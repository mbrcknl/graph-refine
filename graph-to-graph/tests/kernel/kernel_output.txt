
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Wed Jan 15 11:51:38 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/yshen/work/verificatin/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel
  Poly/ML: 580
  HOL: Kananaskis 13 (stdknl) commit 1953e2133
======================================================================
  Reading /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel.elf.txt, done.
  Reading /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel.elf.txt, done.
  Reading /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel.sigs, done.
======================================================================
  Total: 8 functions, 50 RISC-V instructions
  Longest function: main (18 instructions)
  0 deps: 6 functions (zero, loop, f, m, g, halt)
  1 deps: 1 functions (call_zero)
  3 deps: 1 functions (main)
======================================================================

Section zero (1 of 8)
=====================

Deriving specifications
-----------------------

Section `zero` consists of 7 instructions.

RVC_FFFT__________FT.
ADDI..
RVC_TTT___________TF..
RVC_FTT_FT________TF.
RVC_FFFFFT________FT.
RVC_FFFFFFFT______FT.
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `zero`:

    0x100d2    0x0    addi sp,sp,-16
    0x100d4    0x2    li a5,100
    0x100d8    0x6    sd a5,8(sp)           ; stack access
    0x100da    0x8    ld a0,8(sp)           ; stack access
    0x100dc    0xa    addi a0,a0,16
    0x100de    0xc    addi sp,sp,16
    0x100e0    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `zero` has 10 nodes.

Section loop (2 of 8)
=====================

Deriving specifications
-----------------------

Section `loop` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `loop`:

    0x100cc    0x0    addi a0,a0,45
    0x100d0    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loop` has 3 nodes.

Section f (3 of 8)
==================

Deriving specifications
-----------------------

Section `f` consists of 9 instructions.

RVC_TTF___________TF..
RVC_FTF_FT________TF.
RVC_FFT___________FT.

Stack analysis
---------------

4 stack accesses found. Annotated code for `f`:

    0x100ba     0x0    addi sp,sp,-16
    0x100bc     0x2    sw zero,12(sp)        ; stack access
    0x100be     0x4    lw a5,12(sp)          ; stack access
    0x100c0     0x6    addiw a5,a5,1
    0x100c2     0x8    sw a5,12(sp)          ; stack access
    0x100c4     0xa    lw a0,12(sp)          ; stack access
    0x100c6     0xc    sext.w a0,a0
    0x100c8     0xe    addi sp,sp,16
    0x100ca    0x10    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `f` has 14 nodes.

Section m (4 of 8)
==================

Deriving specifications
-----------------------

Section `m` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `m`:

    0x100b6    0x0    addi a0,a0,-1
    0x100b8    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `m` has 3 nodes.

Section g (5 of 8)
==================

Deriving specifications
-----------------------

Section `g` consists of 2 instructions.


Stack analysis
---------------


Type inference failure: unable to infer a type for the application of

READ32 (a :word32)

on line 179, characters 27-45

which has type

:(word32 -> word8) -> word32

to

m :64 graph_function

at line 179, character 45

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function
Stack intro failed in g for pos 0x0.

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `g` has 3 nodes.

Section halt (6 of 8)
=====================

Deriving specifications
-----------------------

Section `halt` consists of 1 instructions.

RVC_TFT___________FT.

Stack analysis
---------------


Type inference failure: unable to infer a type for the application of

READ32 (a :word32)

on line 179, characters 27-45

which has type

:(word32 -> word8) -> word32

to

m :64 graph_function

at line 179, character 45

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function
Stack intro failed in halt for pos 0x0.

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 1 nodes.

Section call_zero (7 of 8)
==========================

Deriving specifications
-----------------------

Section `call_zero` consists of 9 instructions.

JAL.
RVC_FTT_FFFFT_____TF.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------


Type inference failure: unable to infer a type for the application of

READ32 (a :word32)

on line 179, characters 27-45

which has type

:(word32 -> word8) -> word32

to

m :64 graph_function

at line 179, character 45

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function
Stack intro failed in call_zero for pos 0x0.

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `call_zero` has 15 nodes.

Section main (8 of 8)
=====================

Deriving specifications
-----------------------

Section `main` consists of 18 instructions.

RVC_FTF___________FT.

Stack analysis
---------------


Type inference failure: unable to infer a type for the application of

READ32 (a :word32)

on line 179, characters 27-45

which has type

:(word32 -> word8) -> word32

to

m :64 graph_function

at line 179, character 45

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function
Stack intro failed in main for pos 0x0.

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Type inference failure: unable to infer a type for the application of

riscv_MEMORY (d :word64 -> bool)

on line 14, characters 42-57

which has type

:(word64 -> word8) -> (riscv_component # riscv_data -> bool) -> bool

to

m :64 graph_function

at line 14, character 57

unification failure message: Attempt to unify different type operators: min$fun and GraphLang$graph_function

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `main` has 29 nodes.

Completing graph
-----------------


Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

Stack intro failed in main for pos 0x0.
Stack intro failed in call_zero for pos 0x0.
Stack intro failed in halt for pos 0x0.
Stack intro failed in g for pos 0x0.
No graph spec failures.
No export failures.
No call offset failures.
> 