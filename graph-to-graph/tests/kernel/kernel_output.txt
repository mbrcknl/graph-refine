
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Wed Jan 15 11:51:38 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/yshen/work/verificatin/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel
  Poly/ML: 580
  HOL: Kananaskis 13 (stdknl) commit 1953e2133
======================================================================
  Reading /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel.elf.txt, done.
  Reading /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel.elf.txt, done.
  Reading /home/yshen/work/verificatin/graph-refine/graph-to-graph/tests/kernel/kernel.sigs, done.
======================================================================
  Total: 4 functions, 51 RISC-V instructions
  Longest function: g (17 instructions)
  0 deps: 3 functions (f, g, halt)
  1 deps: 1 functions (main)
======================================================================

Section f (1 of 4)
==================

Deriving specifications
-----------------------

Section `f` consists of 13 instructions.

ADDI..
SD..
SW..
LW..
ADDIW..
ADDI_NOP.
LD..
JALR..
JALR_NOP.

Stack analysis
---------------

5 stack accesses found. Annotated code for `f`:

    0x10104     0x0    addi sp,sp,-32
    0x10108     0x4    sd s0,24(sp)          ; stack access
    0x1010c     0x8    addi s0,sp,32
    0x10110     0xc    sw zero,-20(s0)       ; stack access
    0x10114    0x10    lw a5,-20(s0)         ; stack access
    0x10118    0x14    sext.w a5,a5
    0x1011c    0x18    addiw a5,a5,1
    0x10120    0x1c    sext.w a5,a5
    0x10124    0x20    sw a5,-20(s0)         ; stack access
    0x10128    0x24    nop
    0x1012c    0x28    ld s0,24(sp)          ; stack access
    0x10130    0x2c    addi sp,sp,32
    0x10134    0x30    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `f` has 19 nodes.

Section g (2 of 4)
==================

Deriving specifications
-----------------------

Section `g` consists of 17 instructions.

SLLIW..
ANDI..
ADDW.....

Stack analysis
---------------

5 stack accesses found. Annotated code for `g`:

    0x100c0     0x0    addi sp,sp,-32
    0x100c4     0x4    sd s0,24(sp)          ; stack access
    0x100c8     0x8    addi s0,sp,32
    0x100cc     0xc    mv a5,a0
    0x100d0    0x10    sw a5,-20(s0)         ; stack access
    0x100d4    0x14    lw a5,-20(s0)         ; stack access
    0x100d8    0x18    slliw a5,a5,0x3
    0x100dc    0x1c    sext.w a4,a5
    0x100e0    0x20    lw a5,-20(s0)         ; stack access
    0x100e4    0x24    andi a5,a5,15
    0x100e8    0x28    sext.w a5,a5
    0x100ec    0x2c    addw a5,a4,a5
    0x100f0    0x30    sext.w a5,a5
    0x100f4    0x34    mv a0,a5
    0x100f8    0x38    ld s0,24(sp)          ; stack access
    0x100fc    0x3c    addi sp,sp,32
    0x10100    0x40    ret

Proving inst theorems
---------------------

17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `g` has 23 nodes.

Section halt (3 of 4)
=====================

Deriving specifications
-----------------------

Section `halt` consists of 4 instructions.

JAL.
JAL_NOP.

Stack analysis
---------------

1 stack accesses found. Annotated code for `halt`:

    0x100b0    0x0    addi sp,sp,-16
    0x100b4    0x4    sd s0,8(sp)           ; stack access
    0x100b8    0x8    addi s0,sp,16
    0x100bc    0xc    j 100bc <halt+0xc>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 5 nodes.

Section main (4 of 4)
=====================

Deriving specifications
-----------------------

Section `main` consists of 17 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `main`:

    0x10138     0x0    addi sp,sp,-32
    0x1013c     0x4    sd ra,24(sp)          ; stack access
    0x10140     0x8    sd s0,16(sp)          ; stack access
    0x10144     0xc    addi s0,sp,32
    0x10148    0x10    sw zero,-20(s0)       ; stack access
    0x1014c    0x14    jal ra,10104 <f>
    0x10150    0x18    lw a5,-20(s0)         ; stack access
    0x10154    0x1c    sext.w a5,a5
    0x10158    0x20    addiw a5,a5,1
    0x1015c    0x24    sext.w a5,a5
    0x10160    0x28    sw a5,-20(s0)         ; stack access
    0x10164    0x2c    li a5,2
    0x10168    0x30    mv a0,a5
    0x1016c    0x34    ld ra,24(sp)          ; stack access
    0x10170    0x38    ld s0,16(sp)          ; stack access
    0x10174    0x3c    addi sp,sp,32
    0x10178    0x40    ret

Proving inst theorems
---------------------

17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `main` has 26 nodes.

Completing graph
-----------------


Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
No graph spec failures.
No export failures.
No call offset failures.
> 