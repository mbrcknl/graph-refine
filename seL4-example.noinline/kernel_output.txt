
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Wed Jan 15 11:51:38 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/yshen/work/verificatin/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/yshen/work/verificatin/graph-refine/seL4-example.noinline/kernel
  Poly/ML: 580
  HOL: Kananaskis 13 (stdknl) commit 1953e2133
======================================================================
  Reading /home/yshen/work/verificatin/graph-refine/seL4-example.noinline/kernel.elf.txt, done.
  Reading /home/yshen/work/verificatin/graph-refine/seL4-example.noinline/kernel.elf.txt, done.
  Reading /home/yshen/work/verificatin/graph-refine/seL4-example.noinline/kernel.sigs, done.
No signature info for section: _start
No signature info for section: avail_p_regs
No signature info for section: ndks_boot
No signature info for section: rootserver
No signature info for section: rootserver_mem
No signature info for section: avail_reg
No signature info for section: res_reg
No signature info for section: trap_entry
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzsi2
No signature info for section: __ctzsi2
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 271 functions, 14153 RISC-V instructions
  Longest function: create_initial_thread (818 instructions)
  0 deps: 101 functions (avail_p_regs, ndks_boot, rootserver, ...)
  1 deps: 77 functions (str_to_long, memset, ...)
  2 deps: 41 functions (performPageTableInvocationUnmap, ...)
  3 deps: 21 functions (c_handle_syscall, ...)
  4 deps: 8 functions (invokeUntyped_Retype, decodeSetIPCBuffer, ...)
  5 deps: 9 functions (invokeTCB_ThreadControl, handleRecv, ...)
  6 deps: 4 functions (decodeUntypedInvocation, decodeSetSpace, ...)
  7 deps: 3 functions (handleInvocation, decodeTCBConfigure, ...)
  8 deps: 1 functions (finaliseCap)
  11 deps: 1 functions (handleSyscall)
  12 deps: 1 functions (decodeInvocation)
  14 deps: 1 functions (decodeRISCVMMUInvocation)
  15 deps: 1 functions (decodeTCBInvocation)
  16 deps: 1 functions (decodeCNodeInvocation)
  23 deps: 1 functions (init_kernel)
======================================================================

Section avail_p_regs (1 of 271)
===============================

Deriving specifications
-----------------------

Section `avail_p_regs` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_p_regs` has 0 nodes.

Section ndks_boot (2 of 271)
============================

Deriving specifications
-----------------------

Section `ndks_boot` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ndks_boot` has 0 nodes.

Section rootserver (3 of 271)
=============================

Deriving specifications
-----------------------

Section `rootserver` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver` has 0 nodes.

Section rootserver_mem (4 of 271)
=================================

Deriving specifications
-----------------------

Section `rootserver_mem` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver_mem` has 0 nodes.

Section avail_reg (5 of 271)
============================

Deriving specifications
-----------------------

Section `avail_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_reg` has 0 nodes.

Section res_reg (6 of 271)
==========================

Deriving specifications
-----------------------

Section `res_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `res_reg` has 0 nodes.

Section fastpath_restore (7 of 271)
===================================

Deriving specifications
-----------------------

Section `fastpath_restore` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_restore` has 0 nodes.

Section restore_user_context (8 of 271)
=======================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 0 nodes.

Section slowpath (9 of 271)
===========================

Deriving specifications
-----------------------

Section `slowpath` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 0 nodes.

Section fastpath_call (10 of 271)
=================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 0 nodes.

Section fastpath_reply_recv (11 of 271)
=======================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 0 nodes.

Section __ctzdi2 (12 of 271)
============================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 13 instructions.

RVC_TFFFFT___FT___TF..
ANDI..
RVC_TTT___________FT.
RVC_FTF___________FT.
ADDI..
RVC_TFF_FF________FT.
RVC_FFT___________FT.
BNE..
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x8401714a     0x0    mv a5,a0
    0x8401714c     0x2    andi a4,a0,1
    0x84017150     0x6    bnez a4,ffffffff84017168 <__ctzdi2+0x1e>
    0x84017152     0x8    li a0,0
    0x84017154     0xa    li a3,65
    0x84017158     0xe    srli a5,a5,0x1
    0x8401715a    0x10    addiw a0,a0,1
    0x8401715c    0x12    andi a4,a5,1
    0x84017160    0x16    bnez a4,ffffffff8401716a <__ctzdi2+0x20>
    0x84017162    0x18    bne a0,a3,ffffffff84017158 <__ctzdi2+0xe>
    0x84017166    0x1c    ret
    0x84017168    0x1e    li a0,0
    0x8401716a    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 21 nodes.

Section __clzdi2 (13 of 271)
============================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 11 instructions.

BLT..
RVC_FFF___________TF.

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x8401712c     0x0    mv a5,a0
    0x8401712e     0x2    bltz a0,ffffffff84017146 <__clzdi2+0x1a>
    0x84017132     0x6    li a0,0
    0x84017134     0x8    li a4,65
    0x84017138     0xc    slli a5,a5,0x1
    0x8401713a     0xe    addiw a0,a0,1
    0x8401713c    0x10    bltz a5,ffffffff84017148 <__clzdi2+0x1c>
    0x84017140    0x14    bne a0,a4,ffffffff84017138 <__clzdi2+0xc>
    0x84017144    0x18    ret
    0x84017146    0x1a    li a0,0
    0x84017148    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 19 nodes.

Section __ctzsi2 (14 of 271)
============================

Deriving specifications
-----------------------

Section `__ctzsi2` consists of 13 instructions.

SRLIW..
ADDIW..
RVC_TFF_TF________FT.
RVC_TFT___________FT.

Stack analysis
---------------

No stack accesses found. Code for `__ctzsi2`:

    0x84017108     0x0    andi a4,a0,1
    0x8401710c     0x4    bnez a4,ffffffff84017128 <__ctzsi2+0x20>
    0x8401710e     0x6    li a3,33
    0x84017112     0xa    srliw a5,a0,0x1
    0x84017116     0xe    sext.w a0,a5
    0x8401711a    0x12    addiw a4,a4,1
    0x8401711c    0x14    andi a5,a5,1
    0x8401711e    0x16    bnez a5,ffffffff84017124 <__ctzsi2+0x1c>
    0x84017120    0x18    bne a4,a3,ffffffff84017112 <__ctzsi2+0xa>
    0x84017124    0x1c    mv a0,a4
    0x84017126    0x1e    ret
    0x84017128    0x20    li a4,0
    0x8401712a    0x22    j ffffffff84017124 <__ctzsi2+0x1c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzsi2` has 20 nodes.

Section __clzsi2 (15 of 271)
============================

Deriving specifications
-----------------------

Section `__clzsi2` consists of 13 instructions.

SLLIW..
SLLI..

Stack analysis
---------------

No stack accesses found. Code for `__clzsi2`:

    0x840170e0     0x0    bltz a0,ffffffff84017104 <__clzsi2+0x24>
    0x840170e4     0x4    li a5,0
    0x840170e6     0x6    li a3,34
    0x840170ea     0xa    slliw a4,a0,0x1
    0x840170ee     0xe    sext.w a0,a4
    0x840170f2    0x12    addiw a5,a5,1
    0x840170f4    0x14    slli a2,a4,0x20
    0x840170f8    0x18    bltz a2,ffffffff84017100 <__clzsi2+0x20>
    0x840170fc    0x1c    bne a5,a3,ffffffff840170ea <__clzsi2+0xa>
    0x84017100    0x20    mv a0,a5
    0x84017102    0x22    ret
    0x84017104    0x24    li a5,0
    0x84017106    0x26    j ffffffff84017100 <__clzsi2+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzsi2` has 20 nodes.

Section char_to_long (16 of 271)
================================

Deriving specifications
-----------------------

Section `char_to_long` consists of 20 instructions.

BGEU..
BLTU..

Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x8401702c     0x0    addiw a5,a0,-48
    0x84017030     0x4    andi a5,a5,255
    0x84017034     0x8    li a4,9
    0x84017036     0xa    bgeu a4,a5,ffffffff8401705c <char_to_long+0x30>
    0x8401703a     0xe    addiw a5,a0,-65
    0x8401703e    0x12    andi a5,a5,255
    0x84017042    0x16    li a4,5
    0x84017044    0x18    bgeu a4,a5,ffffffff84017062 <char_to_long+0x36>
    0x84017048    0x1c    addiw a5,a0,-97
    0x8401704c    0x20    andi a5,a5,255
    0x84017050    0x24    li a4,5
    0x84017052    0x26    bltu a4,a5,ffffffff84017068 <char_to_long+0x3c>
    0x84017056    0x2a    addiw a0,a0,-87
    0x8401705a    0x2e    ret
    0x8401705c    0x30    addiw a0,a0,-48
    0x84017060    0x34    ret
    0x84017062    0x36    addiw a0,a0,-55
    0x84017066    0x3a    ret
    0x84017068    0x3c    li a0,-1
    0x8401706a    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 30 nodes.

Section strncmp (17 of 271)
===========================

Deriving specifications
-----------------------

Section `strncmp` consists of 26 instructions.

RVC_TTF___________FT.
LBU..
SUBW.....
RVC_FFFFFT________FT.
RVC_TFFTFT___FT___TF..
BEQ..

Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x84016fe8     0x0    beqz a2,ffffffff84017020 <strncmp+0x38>
    0x84016fea     0x2    lbu a5,0(a0)
    0x84016fee     0x6    lbu a3,0(a1)
    0x84016ff2     0xa    subw a3,a5,a3
    0x84016ff6     0xe    bnez a3,ffffffff84017024 <strncmp+0x3c>
    0x84016ff8    0x10    beqz a5,ffffffff84017028 <strncmp+0x40>
    0x84016ffa    0x12    addi a5,a0,1
    0x84016ffe    0x16    addi a1,a1,1
    0x84017000    0x18    add a2,a2,a0
    0x84017002    0x1a    beq a5,a2,ffffffff8401701c <strncmp+0x34>
    0x84017006    0x1e    lbu a4,0(a5)
    0x8401700a    0x22    lbu a0,0(a1)
    0x8401700e    0x26    subw a0,a4,a0
    0x84017012    0x2a    bnez a0,ffffffff8401701a <strncmp+0x32>
    0x84017014    0x2c    addi a5,a5,1
    0x84017016    0x2e    addi a1,a1,1
    0x84017018    0x30    bnez a4,ffffffff84017002 <strncmp+0x1a>
    0x8401701a    0x32    ret
    0x8401701c    0x34    mv a0,a3
    0x8401701e    0x36    ret
    0x84017020    0x38    li a0,0
    0x84017022    0x3a    ret
    0x84017024    0x3c    mv a0,a3
    0x84017026    0x3e    ret
    0x84017028    0x40    mv a0,a3
    0x8401702a    0x42    j ffffffff8401701a <strncmp+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 46 nodes.

Section memcpy (18 of 271)
==========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x84016fd0     0x0    beqz a2,ffffffff84016fe6 <memcpy+0x16>
    0x84016fd2     0x2    add a2,a2,a0
    0x84016fd4     0x4    mv a5,a0
    0x84016fd6     0x6    lbu a4,0(a1)
    0x84016fda     0xa    sb a4,0(a5)
    0x84016fde     0xe    addi a5,a5,1
    0x84016fe0    0x10    addi a1,a1,1
    0x84016fe2    0x12    bne a2,a5,ffffffff84016fd6 <memcpy+0x6>
    0x84016fe6    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memzero (19 of 271)
===========================

Deriving specifications
-----------------------

Section `memzero` consists of 7 instructions.

SD..

Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x84015844     0x0    beqz a1,ffffffff84015854 <memzero+0x10>
    0x84015846     0x2    mv a5,a0
    0x84015848     0x4    add a1,a1,a0
    0x8401584a     0x6    sd zero,0(a5)
    0x8401584e     0xa    addi a5,a5,8
    0x84015850     0xc    bne a5,a1,ffffffff8401584a <memzero+0x6>
    0x84015854    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 13 nodes.

Section strlcat (20 of 271)
===========================

Deriving specifications
-----------------------

Section `strlcat` consists of 37 instructions.

ADD.....
RVC_FFFT__________FT.
RVC_TFFFFT___T____TF.
SUB.....

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x840157de     0x0    beqz a2,ffffffff84015840 <strlcat+0x62>
    0x840157e0     0x2    lbu a5,0(a0)
    0x840157e4     0x6    beqz a5,ffffffff8401580a <strlcat+0x2c>
    0x840157e6     0x8    li a5,0
    0x840157e8     0xa    addi a5,a5,1
    0x840157ea     0xc    beq a2,a5,ffffffff84015834 <strlcat+0x56>
    0x840157ee    0x10    add a4,a0,a5
    0x840157f2    0x14    lbu a4,0(a4)
    0x840157f6    0x18    bnez a4,ffffffff840157e8 <strlcat+0xa>
    0x840157f8    0x1a    addi a4,a5,1
    0x840157fc    0x1e    bgeu a4,a2,ffffffff84015838 <strlcat+0x5a>
    0x84015800    0x22    lbu a3,0(a1)
    0x84015804    0x26    beqz a3,ffffffff8401583c <strlcat+0x5e>
    0x84015806    0x28    addi a2,a2,-1
    0x84015808    0x2a    j ffffffff84015810 <strlcat+0x32>
    0x8401580a    0x2c    li a5,0
    0x8401580c    0x2e    j ffffffff840157f8 <strlcat+0x1a>
    0x8401580e    0x30    mv a4,a6
    0x84015810    0x32    add a6,a0,a4
    0x84015814    0x36    sb a3,-1(a6)
    0x84015818    0x3a    beq a4,a2,ffffffff8401582c <strlcat+0x4e>
    0x8401581c    0x3e    addi a6,a4,1
    0x84015820    0x42    sub a3,a6,a5
    0x84015824    0x46    add a3,a3,a1
    0x84015826    0x48    lbu a3,-1(a3)
    0x8401582a    0x4c    bnez a3,ffffffff8401580e <strlcat+0x30>
    0x8401582c    0x4e    add a0,a0,a4
    0x8401582e    0x50    sb zero,0(a0)
    0x84015832    0x54    mv a5,a4
    0x84015834    0x56    mv a0,a5
    0x84015836    0x58    ret
    0x84015838    0x5a    mv a4,a5
    0x8401583a    0x5c    j ffffffff8401582c <strlcat+0x4e>
    0x8401583c    0x5e    mv a4,a5
    0x8401583e    0x60    j ffffffff8401582c <strlcat+0x4e>
    0x84015840    0x62    mv a5,a2
    0x84015842    0x64    j ffffffff84015834 <strlcat+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 60 nodes.

Section strlcpy (21 of 271)
===========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 22 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x840157a0     0x0    li a5,1
    0x840157a2     0x2    bgeu a5,a2,ffffffff840157d6 <strlcpy+0x36>
    0x840157a6     0x6    lbu a4,0(a1)
    0x840157aa     0xa    beqz a4,ffffffff840157da <strlcpy+0x3a>
    0x840157ac     0xc    addi a2,a2,-1
    0x840157ae     0xe    j ffffffff840157b2 <strlcpy+0x12>
    0x840157b0    0x10    mv a5,a3
    0x840157b2    0x12    add a3,a0,a5
    0x840157b6    0x16    sb a4,-1(a3)
    0x840157ba    0x1a    beq a5,a2,ffffffff840157cc <strlcpy+0x2c>
    0x840157be    0x1e    addi a3,a5,1
    0x840157c2    0x22    add a4,a1,a3
    0x840157c6    0x26    lbu a4,-1(a4)
    0x840157ca    0x2a    bnez a4,ffffffff840157b0 <strlcpy+0x10>
    0x840157cc    0x2c    add a0,a0,a5
    0x840157ce    0x2e    sb zero,0(a0)
    0x840157d2    0x32    mv a0,a5
    0x840157d4    0x34    ret
    0x840157d6    0x36    li a5,0
    0x840157d8    0x38    j ffffffff840157cc <strlcpy+0x2c>
    0x840157da    0x3a    li a5,0
    0x840157dc    0x3c    j ffffffff840157cc <strlcpy+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 35 nodes.

Section strnlen (22 of 271)
===========================

Deriving specifications
-----------------------

Section `strnlen` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x8401577a     0x0    beqz a1,ffffffff84015798 <strnlen+0x1e>
    0x8401577c     0x2    lbu a5,0(a0)
    0x84015780     0x6    beqz a5,ffffffff8401579c <strnlen+0x22>
    0x84015782     0x8    li a5,0
    0x84015784     0xa    addi a5,a5,1
    0x84015786     0xc    beq a1,a5,ffffffff84015794 <strnlen+0x1a>
    0x8401578a    0x10    add a4,a0,a5
    0x8401578e    0x14    lbu a4,0(a4)
    0x84015792    0x18    bnez a4,ffffffff84015784 <strnlen+0xa>
    0x84015794    0x1a    mv a0,a5
    0x84015796    0x1c    ret
    0x84015798    0x1e    mv a5,a1
    0x8401579a    0x20    j ffffffff84015794 <strnlen+0x1a>
    0x8401579c    0x22    li a5,0
    0x8401579e    0x24    j ffffffff84015794 <strnlen+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 26 nodes.

Section copyMRs (23 of 271)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 45 instructions.

RVC_FTT___________FF..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x84013c08     0x0    beqz a4,ffffffff84013c66 <copyMRs+0x5e>
    0x84013c0a     0x2    ld a5,88(a0)
    0x84013c0c     0x4    sd a5,88(a2)
    0x84013c0e     0x6    li a5,1
    0x84013c10     0x8    bgeu a5,a4,ffffffff84013c5a <copyMRs+0x52>
    0x84013c14     0xc    ld a5,96(a0)
    0x84013c16     0xe    sd a5,96(a2)
    0x84013c18    0x10    li a5,2
    0x84013c1a    0x12    bgeu a5,a4,ffffffff84013c5e <copyMRs+0x56>
    0x84013c1e    0x16    ld a5,104(a0)
    0x84013c20    0x18    sd a5,104(a2)
    0x84013c22    0x1a    li a5,3
    0x84013c24    0x1c    bgeu a5,a4,ffffffff84013c62 <copyMRs+0x5a>
    0x84013c28    0x20    ld a5,112(a0)
    0x84013c2a    0x22    sd a5,112(a2)
    0x84013c2c    0x24    li a5,4
    0x84013c2e    0x26    beqz a3,ffffffff84013c6a <copyMRs+0x62>
    0x84013c30    0x28    beqz a1,ffffffff84013c6e <copyMRs+0x66>
    0x84013c32    0x2a    bgeu a5,a4,ffffffff84013c72 <copyMRs+0x6a>
    0x84013c36    0x2e    addi a5,a5,1
    0x84013c38    0x30    slli a5,a5,0x3
    0x84013c3a    0x32    addi a0,a4,1
    0x84013c3e    0x36    slli a0,a0,0x3
    0x84013c40    0x38    add a2,a1,a5
    0x84013c44    0x3c    ld a6,0(a2)
    0x84013c48    0x40    add a2,a3,a5
    0x84013c4c    0x44    sd a6,0(a2)
    0x84013c50    0x48    addi a5,a5,8
    0x84013c52    0x4a    bne a5,a0,ffffffff84013c40 <copyMRs+0x38>
    0x84013c56    0x4e    mv a0,a4
    0x84013c58    0x50    ret
    0x84013c5a    0x52    li a5,1
    0x84013c5c    0x54    j ffffffff84013c2e <copyMRs+0x26>
    0x84013c5e    0x56    li a5,2
    0x84013c60    0x58    j ffffffff84013c2e <copyMRs+0x26>
    0x84013c62    0x5a    li a5,3
    0x84013c64    0x5c    j ffffffff84013c2e <copyMRs+0x26>
    0x84013c66    0x5e    mv a5,a4
    0x84013c68    0x60    j ffffffff84013c2e <copyMRs+0x26>
    0x84013c6a    0x62    mv a4,a5
    0x84013c6c    0x64    j ffffffff84013c56 <copyMRs+0x4e>
    0x84013c6e    0x66    mv a4,a5
    0x84013c70    0x68    j ffffffff84013c56 <copyMRs+0x4e>
    0x84013c72    0x6a    mv a4,a5
    0x84013c74    0x6c    j ffffffff84013c56 <copyMRs+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 72 nodes.

Section setExtraBadge (24 of 271)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x84013b10    0x0    addi a2,a2,122 # fffffffff800007a <ki_end+0x73fd207a>
    0x84013b14    0x4    slli a2,a2,0x3
    0x84013b16    0x6    add a2,a2,a0
    0x84013b18    0x8    sd a1,0(a2)
    0x84013b1a    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (25 of 271)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x84013b04    0x0    addi a1,a1,122
    0x84013b08    0x4    slli a1,a1,0x3
    0x84013b0a    0x6    add a1,a1,a0
    0x84013b0c    0x8    ld a0,0(a1)
    0x84013b0e    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbEPDequeue (26 of 271)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 19 instructions.

RVC_TTT___________TF..
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

Section `tcbEPDequeue` expects pointer to stack in a0.
5 stack accesses found. Annotated code for `tcbEPDequeue`:

    0x84012b3a     0x0    addi sp,sp,-32
    0x84012b3c     0x2    mv a5,a0
    0x84012b3e     0x4    sd a1,0(sp)           ; stack access
    0x84012b40     0x6    ld a4,416(a0)         ; stack access
    0x84012b44     0xa    beqz a4,ffffffff84012b64 <tcbEPDequeue+0x2a>
    0x84012b46     0xc    mv a0,a1
    0x84012b48     0xe    ld a3,408(a5)         ; stack access
    0x84012b4c    0x12    sd a3,408(a4)
    0x84012b50    0x16    ld a4,408(a5)         ; stack access
    0x84012b54    0x1a    beqz a4,ffffffff84012b6a <tcbEPDequeue+0x30>
    0x84012b56    0x1c    ld a5,416(a5)         ; stack access
    0x84012b5a    0x20    sd a5,416(a4)
    0x84012b5e    0x24    mv a1,a2
    0x84012b60    0x26    addi sp,sp,32
    0x84012b62    0x28    ret
    0x84012b64    0x2a    ld a0,408(a0)
    0x84012b68    0x2e    j ffffffff84012b50 <tcbEPDequeue+0x16>
    0x84012b6a    0x30    ld a2,416(a5)
    0x84012b6e    0x34    j ffffffff84012b5e <tcbEPDequeue+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 33 nodes.

Section tcbEPAppend (27 of 271)
===============================

Deriving specifications
-----------------------

Section `tcbEPAppend` consists of 12 instructions.


Stack analysis
---------------

Section `tcbEPAppend` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `tcbEPAppend`:

    0x84012b1c     0x0    addi sp,sp,-32
    0x84012b1e     0x2    mv a5,a0
    0x84012b20     0x4    beqz a1,ffffffff84012b36 <tcbEPAppend+0x1a>
    0x84012b22     0x6    sd a0,408(a2)
    0x84012b26     0xa    sd a2,416(a5)         ; stack access
    0x84012b2a     0xe    sd zero,408(a5)       ; stack access
    0x84012b2e    0x12    mv a0,a1
    0x84012b30    0x14    mv a1,a5
    0x84012b32    0x16    addi sp,sp,32
    0x84012b34    0x18    ret
    0x84012b36    0x1a    mv a1,a0
    0x84012b38    0x1c    j ffffffff84012b26 <tcbEPAppend+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPAppend` has 18 nodes.

Section tcbSchedDequeue (28 of 271)
===================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 60 instructions.

AUIPC.
SRLI..
SLL.....
XORI..
RVC_TFFTFT___T____TF.
AND.....
RVC_TFFFTT___TT___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x8401278c     0x0    ld a5,288(a0)
    0x84012790     0x4    andi a5,a5,1
    0x84012792     0x6    beqz a5,ffffffff840127e0 <tcbSchedDequeue+0x54>
    0x84012794     0x8    ld a2,344(a0)
    0x84012798     0xc    ld a3,360(a0)
    0x8401279c    0x10    slli a5,a2,0x8
    0x840127a0    0x14    add a5,a5,a3
    0x840127a2    0x16    slli a5,a5,0x4
    0x840127a4    0x18    auipc a4,0xb
    0x840127a8    0x1c    addi a4,a4,-628 # ffffffff8401d530 <ksReadyQueues>
    0x840127ac    0x20    add a5,a5,a4
    0x840127ae    0x22    ld a6,8(a5)
    0x840127b2    0x26    ld a4,400(a0)
    0x840127b6    0x2a    beqz a4,ffffffff840127e2 <tcbSchedDequeue+0x56>
    0x840127b8    0x2c    ld a1,0(a5)
    0x840127ba    0x2e    ld a3,392(a0)
    0x840127be    0x32    sd a3,392(a4)
    0x840127c2    0x36    ld a4,392(a0)
    0x840127c6    0x3a    beqz a4,ffffffff8401283c <tcbSchedDequeue+0xb0>
    0x840127c8    0x3c    ld a3,400(a0)
    0x840127cc    0x40    sd a3,400(a4)
    0x840127d0    0x44    sd a1,0(a5)
    0x840127d2    0x46    sd a6,8(a5)
    0x840127d6    0x4a    ld a5,288(a0)
    0x840127da    0x4e    andi a5,a5,-2
    0x840127dc    0x50    sd a5,288(a0)
    0x840127e0    0x54    ret
    0x840127e2    0x56    ld a1,392(a0)
    0x840127e6    0x5a    bnez a1,ffffffff84012838 <tcbSchedDequeue+0xac>
    0x840127e8    0x5c    srli t1,a3,0x6
    0x840127ec    0x60    li a4,3
    0x840127ee    0x62    sub a7,a4,t1
    0x840127f2    0x66    li a4,1
    0x840127f4    0x68    sll a3,a4,a3
    0x840127f8    0x6c    not a3,a3
    0x840127fc    0x70    slli a4,a2,0x2
    0x84012800    0x74    add a4,a4,a7
    0x84012802    0x76    slli a4,a4,0x3
    0x84012804    0x78    auipc a7,0x1b
    0x84012808    0x7c    addi a7,a7,-500 # ffffffff8402d610 <ksReadyQueuesL2Bitmap>
    0x8401280c    0x80    add a4,a4,a7
    0x8401280e    0x82    ld a7,0(a4)
    0x84012812    0x86    and a3,a3,a7
    0x84012816    0x8a    sd a3,0(a4)
    0x84012818    0x8c    bnez a3,ffffffff840127c2 <tcbSchedDequeue+0x36>
    0x8401281a    0x8e    slli a2,a2,0x3
    0x8401281c    0x90    auipc a4,0x1b
    0x84012820    0x94    addi a4,a4,-4 # ffffffff8402d818 <ksReadyQueuesL1Bitmap>
    0x84012824    0x98    add a2,a2,a4
    0x84012826    0x9a    li a4,1
    0x84012828    0x9c    sll a4,a4,t1
    0x8401282c    0xa0    not a4,a4
    0x84012830    0xa4    ld a3,0(a2)
    0x84012832    0xa6    and a4,a4,a3
    0x84012834    0xa8    sd a4,0(a2)
    0x84012836    0xaa    j ffffffff840127c2 <tcbSchedDequeue+0x36>
    0x84012838    0xac    mv a4,a1
    0x8401283a    0xae    j ffffffff840127c8 <tcbSchedDequeue+0x3c>
    0x8401283c    0xb0    ld a6,400(a0)
    0x84012840    0xb4    j ffffffff840127d0 <tcbSchedDequeue+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 92 nodes.

Section tcbSchedAppend (29 of 271)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 47 instructions.

ORI..
RVC_TFFTT____FT___TF.
OR.....
RVC_TFFTFT___FFT__TF.
RVC_TFFFTT___TF___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x840126aa     0x0    ld a5,288(a0)
    0x840126ae     0x4    andi a5,a5,1
    0x840126b0     0x6    bnez a5,ffffffff840126ee <tcbSchedAppend+0x44>
    0x840126b2     0x8    ld a4,344(a0)
    0x840126b6     0xc    ld a1,360(a0)
    0x840126ba    0x10    slli a5,a4,0x8
    0x840126be    0x14    add a5,a5,a1
    0x840126c0    0x16    slli a5,a5,0x4
    0x840126c2    0x18    auipc a3,0xb
    0x840126c6    0x1c    addi a3,a3,-402 # ffffffff8401d530 <ksReadyQueues>
    0x840126ca    0x20    add a5,a5,a3
    0x840126cc    0x22    ld a3,0(a5)
    0x840126ce    0x24    ld a2,8(a5)
    0x840126d0    0x26    beqz a3,ffffffff840126f0 <tcbSchedAppend+0x46>
    0x840126d2    0x28    sd a0,392(a2)
    0x840126d6    0x2c    sd a2,400(a0)
    0x840126da    0x30    sd zero,392(a0)
    0x840126de    0x34    sd a3,0(a5)
    0x840126e0    0x36    sd a0,8(a5)
    0x840126e2    0x38    ld a5,288(a0)
    0x840126e6    0x3c    ori a5,a5,1
    0x840126ea    0x40    sd a5,288(a0)
    0x840126ee    0x44    ret
    0x840126f0    0x46    srli a7,a1,0x6
    0x840126f4    0x4a    li t1,3
    0x840126f6    0x4c    sub t1,t1,a7
    0x840126fa    0x50    slli a3,a4,0x3
    0x840126fe    0x54    auipc a6,0x1b
    0x84012702    0x58    addi a6,a6,282 # ffffffff8402d818 <ksReadyQueuesL1Bitmap>
    0x84012706    0x5c    add a6,a6,a3
    0x84012708    0x5e    li a3,1
    0x8401270a    0x60    sll a7,a3,a7
    0x8401270e    0x64    ld t3,0(a6)
    0x84012712    0x68    or a7,t3,a7
    0x84012716    0x6c    sd a7,0(a6)
    0x8401271a    0x70    slli a4,a4,0x2
    0x8401271c    0x72    add a4,a4,t1
    0x8401271e    0x74    slli a4,a4,0x3
    0x84012720    0x76    auipc a6,0x1b
    0x84012724    0x7a    addi a6,a6,-272 # ffffffff8402d610 <ksReadyQueuesL2Bitmap>
    0x84012728    0x7e    add a4,a4,a6
    0x8401272a    0x80    sll a1,a3,a1
    0x8401272e    0x84    ld a3,0(a4)
    0x84012730    0x86    or a1,a1,a3
    0x84012732    0x88    sd a1,0(a4)
    0x84012734    0x8a    mv a3,a0
    0x84012736    0x8c    j ffffffff840126d6 <tcbSchedAppend+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 68 nodes.

Section decodeIRQControlInvocation (30 of 271)
==============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 36 instructions.


Stack analysis
---------------

No stack accesses found. Code for `decodeIRQControlInvocation`:

    0x8401246e     0x0    ld a4,0(a3)
    0x84012470     0x2    li a5,25
    0x84012472     0x4    bne a0,a5,ffffffff840124a0 <decodeIRQControlInvocation+0x32>
    0x84012476     0x8    li a5,2
    0x84012478     0xa    bgeu a5,a1,ffffffff84012492 <decodeIRQControlInvocation+0x24>
    0x8401247c     0xe    beqz a4,ffffffff84012492 <decodeIRQControlInvocation+0x24>
    0x8401247e    0x10    auipc a5,0xb
    0x84012482    0x14    addi a5,a5,74 # ffffffff8401d4c8 <current_syscall_error>
    0x84012486    0x18    li a4,4
    0x84012488    0x1a    sd a4,48(a5)
    0x8401248a    0x1c    li a4,1
    0x8401248c    0x1e    sd a4,16(a5)
    0x8401248e    0x20    sd a4,24(a5)
    0x84012490    0x22    j ffffffff8401249c <decodeIRQControlInvocation+0x2e>
    0x84012492    0x24    li a5,7
    0x84012494    0x26    auipc a4,0xb
    0x84012498    0x2a    sd a5,100(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401249c    0x2e    li a0,3
    0x8401249e    0x30    ret
    0x840124a0    0x32    li a5,37
    0x840124a4    0x36    bne a0,a5,ffffffff840124c8 <decodeIRQControlInvocation+0x5a>
    0x840124a8    0x3a    li a5,3
    0x840124aa    0x3c    bgeu a5,a1,ffffffff840124bc <decodeIRQControlInvocation+0x4e>
    0x840124ae    0x40    beqz a4,ffffffff840124bc <decodeIRQControlInvocation+0x4e>
    0x840124b0    0x42    li a5,3
    0x840124b2    0x44    auipc a4,0xb
    0x840124b6    0x48    sd a5,70(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840124ba    0x4c    j ffffffff8401249c <decodeIRQControlInvocation+0x2e>
    0x840124bc    0x4e    li a5,7
    0x840124be    0x50    auipc a4,0xb
    0x840124c2    0x54    sd a5,58(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840124c6    0x58    j ffffffff8401249c <decodeIRQControlInvocation+0x2e>
    0x840124c8    0x5a    li a5,3
    0x840124ca    0x5c    auipc a4,0xb
    0x840124ce    0x60    sd a5,46(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840124d2    0x64    j ffffffff8401249c <decodeIRQControlInvocation+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 57 nodes.

Section tcbSchedEnqueue (31 of 271)
===================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 47 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x8401230a     0x0    ld a5,288(a0) # fffffffff8000120 <ki_end+0x73fd2120>
    0x8401230e     0x4    andi a5,a5,1
    0x84012310     0x6    bnez a5,ffffffff8401234e <tcbSchedEnqueue+0x44>
    0x84012312     0x8    ld a4,344(a0)
    0x84012316     0xc    ld a1,360(a0)
    0x8401231a    0x10    slli a5,a4,0x8
    0x8401231e    0x14    add a5,a5,a1
    0x84012320    0x16    slli a5,a5,0x4
    0x84012322    0x18    auipc a3,0xb
    0x84012326    0x1c    addi a3,a3,526 # ffffffff8401d530 <ksReadyQueues>
    0x8401232a    0x20    add a5,a5,a3
    0x8401232c    0x22    ld a2,0(a5)
    0x8401232e    0x24    ld a3,8(a5)
    0x84012330    0x26    beqz a3,ffffffff84012350 <tcbSchedEnqueue+0x46>
    0x84012332    0x28    sd a0,400(a2)
    0x84012336    0x2c    sd zero,400(a0)
    0x8401233a    0x30    sd a2,392(a0)
    0x8401233e    0x34    sd a0,0(a5)
    0x84012340    0x36    sd a3,8(a5)
    0x84012342    0x38    ld a5,288(a0)
    0x84012346    0x3c    ori a5,a5,1
    0x8401234a    0x40    sd a5,288(a0)
    0x8401234e    0x44    ret
    0x84012350    0x46    srli a7,a1,0x6
    0x84012354    0x4a    li t1,3
    0x84012356    0x4c    sub t1,t1,a7
    0x8401235a    0x50    slli a3,a4,0x3
    0x8401235e    0x54    auipc a6,0x1b
    0x84012362    0x58    addi a6,a6,1210 # ffffffff8402d818 <ksReadyQueuesL1Bitmap>
    0x84012366    0x5c    add a6,a6,a3
    0x84012368    0x5e    li a3,1
    0x8401236a    0x60    sll a7,a3,a7
    0x8401236e    0x64    ld t3,0(a6)
    0x84012372    0x68    or a7,t3,a7
    0x84012376    0x6c    sd a7,0(a6)
    0x8401237a    0x70    slli a4,a4,0x2
    0x8401237c    0x72    add a4,a4,t1
    0x8401237e    0x74    slli a4,a4,0x3
    0x84012380    0x76    auipc a6,0x1b
    0x84012384    0x7a    addi a6,a6,656 # ffffffff8402d610 <ksReadyQueuesL2Bitmap>
    0x84012388    0x7e    add a4,a4,a6
    0x8401238a    0x80    sll a1,a3,a1
    0x8401238e    0x84    ld a3,0(a4)
    0x84012390    0x86    or a1,a1,a3
    0x84012392    0x88    sd a1,0(a4)
    0x84012394    0x8a    mv a3,a0
    0x84012396    0x8c    j ffffffff84012336 <tcbSchedEnqueue+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 68 nodes.

Section updateCapData (32 of 271)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 58 instructions.

RVC_FTT_FT________TF.

Stack analysis
---------------

Section `updateCapData` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `updateCapData`:

    0x84012036     0x0    addi sp,sp,-32
    0x84012038     0x2    slli a4,a2,0x4
    0x8401203c     0x6    bltz a4,ffffffff8401205c <updateCapData+0x26>
    0x84012040     0xa    srli a5,a2,0x3b
    0x84012044     0xe    li a4,6
    0x84012046    0x10    beq a5,a4,ffffffff84012078 <updateCapData+0x42>
    0x8401204a    0x14    li a4,10
    0x8401204c    0x16    beq a5,a4,ffffffff84012088 <updateCapData+0x52>
    0x84012050    0x1a    li a4,4
    0x84012052    0x1c    beq a5,a4,ffffffff84012068 <updateCapData+0x32>
    0x84012056    0x20    sd a2,16(sp)          ; stack access
    0x84012058    0x22    sd a3,24(sp)          ; stack access
    0x8401205a    0x24    j ffffffff84012060 <updateCapData+0x2a>
    0x8401205c    0x26    sd a2,16(sp)          ; stack access
    0x8401205e    0x28    sd a3,24(sp)          ; stack access
    0x84012060    0x2a    ld a0,16(sp)          ; stack access
    0x84012062    0x2c    ld a1,24(sp)          ; stack access
    0x84012064    0x2e    addi sp,sp,32
    0x84012066    0x30    ret
    0x84012068    0x32    or a3,a3,a0
    0x8401206a    0x34    bnez a3,ffffffff84012072 <updateCapData+0x3c>
    0x8401206c    0x36    sd a2,16(sp)          ; stack access
    0x8401206e    0x38    sd a1,24(sp)          ; stack access
    0x84012070    0x3a    j ffffffff84012060 <updateCapData+0x2a>
    0x84012072    0x3c    sd zero,16(sp)
    0x84012074    0x3e    sd zero,24(sp)
    0x84012076    0x40    j ffffffff84012060 <updateCapData+0x2a>
    0x84012078    0x42    or a3,a3,a0
    0x8401207a    0x44    bnez a3,ffffffff84012082 <updateCapData+0x4c>
    0x8401207c    0x46    sd a2,16(sp)          ; stack access
    0x8401207e    0x48    sd a1,24(sp)          ; stack access
    0x84012080    0x4a    j ffffffff84012060 <updateCapData+0x2a>
    0x84012082    0x4c    sd zero,16(sp)
    0x84012084    0x4e    sd zero,24(sp)
    0x84012086    0x50    j ffffffff84012060 <updateCapData+0x2a>
    0x84012088    0x52    andi a4,a1,63
    0x8401208c    0x56    srli a5,a2,0x2f
    0x84012090    0x5a    andi a5,a5,63
    0x84012094    0x5e    add a5,a5,a4
    0x84012096    0x60    li a3,64
    0x8401209a    0x64    bgeu a3,a5,ffffffff840120a4 <updateCapData+0x6e>
    0x8401209e    0x68    sd zero,16(sp)        ; stack access
    0x840120a0    0x6a    sd zero,24(sp)        ; stack access
    0x840120a2    0x6c    j ffffffff84012060 <updateCapData+0x2a>
    0x840120a4    0x6e    li a5,-63
    0x840120a8    0x72    slli a5,a5,0x35
    0x840120aa    0x74    addi a5,a5,-1
    0x840120ac    0x76    and a2,a2,a5
    0x840120ae    0x78    slli a5,a4,0x35
    0x840120b2    0x7c    or a2,a2,a5
    0x840120b4    0x7e    sd a2,16(sp)          ; stack access
    0x840120b6    0x80    li a5,-1
    0x840120b8    0x82    sll a5,a5,a4
    0x840120bc    0x86    not a5,a5
    0x840120c0    0x8a    srli a1,a1,0x6
    0x840120c2    0x8c    and a1,a1,a5
    0x840120c4    0x8e    sd a1,24(sp)          ; stack access
    0x840120c6    0x90    j ffffffff84012060 <updateCapData+0x2a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 91 nodes.

Section hasCancelSendRights (33 of 271)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 20 instructions.

RVC_FFFFFFFT______FT.
RVC_TFFFTT___FF___FT..
SLTIU..

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x84011980     0x0    addi sp,sp,-16
    0x84011982     0x2    srli a4,a0,0x3b
    0x84011986     0x6    li a5,4
    0x84011988     0x8    beq a4,a5,ffffffff84011992 <hasCancelSendRights+0x12>
    0x8401198c     0xc    li a0,0
    0x8401198e     0xe    addi sp,sp,16
    0x84011990    0x10    ret
    0x84011992    0x12    li a4,3
    0x84011994    0x14    slli a4,a4,0x37
    0x84011996    0x16    and a3,a0,a4
    0x8401199a    0x1a    li a5,0
    0x8401199c    0x1c    beq a3,a4,ffffffff840119a4 <hasCancelSendRights+0x24>
    0x840119a0    0x20    mv a0,a5
    0x840119a2    0x22    j ffffffff8401198e <hasCancelSendRights+0xe>
    0x840119a4    0x24    li a5,3
    0x840119a6    0x26    slli a5,a5,0x39
    0x840119a8    0x28    and a0,a0,a5
    0x840119aa    0x2a    sub a0,a0,a5
    0x840119ac    0x2c    seqz a5,a0
    0x840119b0    0x30    j ffffffff840119a0 <hasCancelSendRights+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 25 nodes.

Section bindNotification (34 of 271)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84011920     0x0    ld a4,24(a1)
    0x84011922     0x2    li a5,-1
    0x84011924     0x4    slli a3,a5,0x27
    0x84011928     0x8    and a4,a4,a3
    0x8401192a     0xa    srli a5,a5,0x19
    0x8401192c     0xc    and a5,a5,a0
    0x8401192e     0xe    or a5,a5,a4
    0x84011930    0x10    sd a5,24(a1)
    0x84011932    0x12    sd a1,304(a0)
    0x84011936    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (35 of 271)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x8401190c     0x0    ld a4,304(a0)
    0x84011910     0x4    beqz a4,ffffffff8401191e <unbindNotification+0x12>
    0x84011912     0x6    ld a5,24(a4)
    0x84011914     0x8    srli a5,a5,0x27
    0x84011916     0xa    slli a5,a5,0x27
    0x84011918     0xc    sd a5,24(a4)
    0x8401191a     0xe    sd zero,304(a0)
    0x8401191e    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (36 of 271)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 15 instructions.

BGE..

Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x840118e6     0x0    ld a5,24(a0)
    0x840118e8     0x2    slli a4,a5,0x19
    0x840118ec     0x6    srli a4,a4,0x19
    0x840118ee     0x8    slli a3,a5,0x19
    0x840118f2     0xc    bgez a3,ffffffff84011908 <unbindMaybeNotification+0x22>
    0x840118f6    0x10    li a3,-1
    0x840118f8    0x12    slli a3,a3,0x27
    0x840118fa    0x14    or a4,a4,a3
    0x840118fc    0x16    srli a5,a5,0x27
    0x840118fe    0x18    slli a5,a5,0x27
    0x84011900    0x1a    sd a5,24(a0)
    0x84011902    0x1c    sd zero,304(a4)
    0x84011906    0x20    j ffffffff8401190a <unbindMaybeNotification+0x24>
    0x84011908    0x22    bnez a4,ffffffff840118fc <unbindMaybeNotification+0x16>
    0x8401190a    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 23 nodes.

Section isIRQActive (37 of 271)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 9 instructions.

SLTU.....

Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x840117ba     0x0    slli a0,a0,0x20
    0x840117bc     0x2    srli a0,a0,0x20
    0x840117be     0x4    slli a5,a0,0x3
    0x840117c2     0x8    auipc a0,0xc
    0x840117c6     0xc    addi a0,a0,-682 # ffffffff8401d518 <intStateIRQTable>
    0x840117ca    0x10    add a0,a0,a5
    0x840117cc    0x12    ld a0,0(a0)
    0x840117ce    0x14    snez a0,a0
    0x840117d2    0x18    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 11 nodes.

Section invokeIRQHandler_AckIRQ (38 of 271)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x840117b8    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 2 nodes.

Section replyFromKernel_success_empty (39 of 271)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x840117ae    0x0    sd zero,72(a0)
    0x840117b2    0x4    sd zero,80(a0)
    0x840117b6    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (40 of 271)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x8401179a     0x0    ld a3,1008(a1) # fffffffff80003f0 <ki_end+0x73fd23f0>
    0x8401179e     0x4    ld a4,1016(a1)
    0x840117a2     0x8    ld a2,1000(a1)
    0x840117a6     0xc    sd a2,0(a0)           ; stack access
    0x840117a8     0xe    sd a3,8(a0)           ; stack access
    0x840117aa    0x10    sd a4,16(a0)          ; stack access
    0x840117ac    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (41 of 271)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x84011726     0x0    ld a0,0(a0)
    0x84011728     0x2    srli a0,a0,0x3b
    0x8401172a     0x4    bnez a0,ffffffff8401172e <ensureEmptySlot+0x8>
    0x8401172c     0x6    ret
    0x8401172e     0x8    li a5,8
    0x84011730     0xa    auipc a4,0xc
    0x84011734     0xe    sd a5,-568(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84011738    0x12    li a0,3
    0x8401173a    0x14    j ffffffff8401172c <ensureEmptySlot+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 14 nodes.

Section setupReplyMaster (42 of 271)
====================================

Deriving specifications
-----------------------

Section `setupReplyMaster` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setupReplyMaster`:

    0x84011708     0x0    andi a4,a0,-1024
    0x8401170c     0x4    ld a5,64(a4)
    0x8401170e     0x6    srli a5,a5,0x3b
    0x84011710     0x8    bnez a5,ffffffff84011724 <setupReplyMaster+0x1c>
    0x84011712     0xa    li a5,1
    0x84011714     0xc    slli a5,a5,0x3e
    0x84011716     0xe    addi a5,a5,3
    0x84011718    0x10    sd a5,64(a4)
    0x8401171a    0x12    sd a0,72(a4)
    0x8401171c    0x14    sd zero,80(a4) # fffffffff8000050 <ki_end+0x73fd2050>
    0x84011720    0x18    li a5,3
    0x84011722    0x1a    sd a5,88(a4)
    0x84011724    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupReplyMaster` has 21 nodes.

Section insertNewCap (43 of 271)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 42 instructions.

LUI.

Stack analysis
---------------

5 stack accesses found. Annotated code for `insertNewCap`:

    0x840116a8     0x0    addi sp,sp,-16
    0x840116aa     0x2    sd a2,0(sp)           ; stack access
    0x840116ac     0x4    sd a3,8(sp)           ; stack access
    0x840116ae     0x6    ld a4,24(a0)
    0x840116b0     0x8    lui a5,0xf8000
    0x840116b4     0xc    srli a5,a5,0x19
    0x840116b6     0xe    and a5,a5,a4
    0x840116b8    0x10    slli a3,a4,0x19
    0x840116bc    0x14    bgez a3,ffffffff840116d8 <insertNewCap+0x30>
    0x840116c0    0x18    li a4,-1
    0x840116c2    0x1a    slli a4,a4,0x27
    0x840116c4    0x1c    or a4,a4,a5
    0x840116c6    0x1e    sd a2,0(a1)
    0x840116c8    0x20    ld a3,8(sp)           ; stack access
    0x840116ca    0x22    sd a3,8(a1)
    0x840116cc    0x24    sd a0,16(a1)
    0x840116ce    0x26    ori a5,a5,3
    0x840116d2    0x2a    sd a5,24(a1)
    0x840116d4    0x2c    sd a1,16(a4)
    0x840116d6    0x2e    j ffffffff840116ea <insertNewCap+0x42>
    0x840116d8    0x30    ld a4,0(sp)           ; stack access
    0x840116da    0x32    sd a4,0(a1)
    0x840116dc    0x34    ld a4,8(sp)           ; stack access
    0x840116de    0x36    sd a4,8(a1)
    0x840116e0    0x38    sd a0,16(a1)
    0x840116e2    0x3a    ori a4,a5,3
    0x840116e6    0x3e    sd a4,24(a1)
    0x840116e8    0x40    bnez a5,ffffffff84011704 <insertNewCap+0x5c>
    0x840116ea    0x42    ld a5,24(a0)
    0x840116ec    0x44    li a4,-1
    0x840116ee    0x46    slli a4,a4,0x27
    0x840116f0    0x48    addi a4,a4,3
    0x840116f2    0x4a    and a5,a5,a4
    0x840116f4    0x4c    lui a4,0xf8000
    0x840116f8    0x50    srli a4,a4,0x19
    0x840116fa    0x52    and a1,a1,a4
    0x840116fc    0x54    or a1,a1,a5
    0x840116fe    0x56    sd a1,24(a0)
    0x84011700    0x58    addi sp,sp,16
    0x84011702    0x5a    ret
    0x84011704    0x5c    mv a4,a5
    0x84011706    0x5e    j ffffffff840116d4 <insertNewCap+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 64 nodes.

Section cteSwap (44 of 271)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 63 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x840115ae     0x0    addi sp,sp,-32
    0x840115b0     0x2    sd a0,16(sp)          ; stack access
    0x840115b2     0x4    sd a1,24(sp)          ; stack access
    0x840115b4     0x6    sd a3,0(sp)           ; stack access
    0x840115b6     0x8    sd a4,8(sp)           ; stack access
    0x840115b8     0xa    sd a3,0(a2)
    0x840115ba     0xc    sd a4,8(a2)
    0x840115bc     0xe    sd a0,0(a5)
    0x840115be    0x10    sd a1,8(a5)
    0x840115c0    0x12    ld a0,16(a2)
    0x840115c2    0x14    ld a1,24(a2)
    0x840115c4    0x16    beqz a0,ffffffff840115dc <cteSwap+0x2e>
    0x840115c6    0x18    ld a4,24(a0)
    0x840115c8    0x1a    li a3,-1
    0x840115ca    0x1c    slli a3,a3,0x27
    0x840115cc    0x1e    addi a3,a3,3
    0x840115ce    0x20    and a4,a4,a3
    0x840115d0    0x22    lui a3,0xf8000
    0x840115d4    0x26    srli a3,a3,0x19
    0x840115d6    0x28    and a3,a3,a5
    0x840115d8    0x2a    or a4,a4,a3
    0x840115da    0x2c    sd a4,24(a0)
    0x840115dc    0x2e    lui a4,0xf8000
    0x840115e0    0x32    srli a4,a4,0x19
    0x840115e2    0x34    and a4,a4,a1
    0x840115e4    0x36    slli a3,a1,0x19
    0x840115e8    0x3a    bgez a3,ffffffff840115f6 <cteSwap+0x48>
    0x840115ec    0x3e    li a3,-1
    0x840115ee    0x40    slli a3,a3,0x27
    0x840115f0    0x42    or a4,a4,a3
    0x840115f2    0x44    sd a5,16(a4)
    0x840115f4    0x46    j ffffffff840115f8 <cteSwap+0x4a>
    0x840115f6    0x48    bnez a4,ffffffff840115f2 <cteSwap+0x44>
    0x840115f8    0x4a    ld a3,16(a5)
    0x840115fa    0x4c    ld a4,24(a5)
    0x840115fc    0x4e    sd a3,16(a2)
    0x840115fe    0x50    sd a4,24(a2)
    0x84011600    0x52    sd a0,16(a5)
    0x84011602    0x54    sd a1,24(a5)
    0x84011604    0x56    beqz a3,ffffffff8401161c <cteSwap+0x6e>
    0x84011606    0x58    ld a5,24(a3)
    0x84011608    0x5a    li a1,-1
    0x8401160a    0x5c    slli a1,a1,0x27
    0x8401160c    0x5e    addi a1,a1,3
    0x8401160e    0x60    and a5,a5,a1
    0x84011610    0x62    lui a1,0xf8000
    0x84011614    0x66    srli a1,a1,0x19
    0x84011616    0x68    and a1,a1,a2
    0x84011618    0x6a    or a5,a5,a1
    0x8401161a    0x6c    sd a5,24(a3)
    0x8401161c    0x6e    lui a5,0xf8000
    0x84011620    0x72    srli a5,a5,0x19
    0x84011622    0x74    and a5,a5,a4
    0x84011624    0x76    slli a3,a4,0x19
    0x84011628    0x7a    bgez a3,ffffffff84011636 <cteSwap+0x88>
    0x8401162c    0x7e    li a4,-1
    0x8401162e    0x80    slli a4,a4,0x27
    0x84011630    0x82    or a5,a5,a4
    0x84011632    0x84    sd a2,16(a5)
    0x84011634    0x86    j ffffffff84011638 <cteSwap+0x8a>
    0x84011636    0x88    bnez a5,ffffffff84011632 <cteSwap+0x84>
    0x84011638    0x8a    addi sp,sp,32
    0x8401163a    0x8c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 98 nodes.

Section cteMove (45 of 271)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 37 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x840114fc     0x0    addi sp,sp,-16
    0x840114fe     0x2    sd a0,0(sp)           ; stack access
    0x84011500     0x4    sd a1,8(sp)           ; stack access
    0x84011502     0x6    ld a5,16(a2)
    0x84011504     0x8    ld a4,24(a2)
    0x84011506     0xa    sd a0,0(a3)
    0x84011508     0xc    sd a1,8(a3)
    0x8401150a     0xe    sd zero,0(a2)
    0x8401150e    0x12    sd zero,8(a2)
    0x84011512    0x16    sd a5,16(a3)
    0x84011514    0x18    sd a4,24(a3)
    0x84011516    0x1a    sd zero,16(a2)
    0x8401151a    0x1e    sd zero,24(a2)
    0x8401151e    0x22    beqz a5,ffffffff84011536 <cteMove+0x3a>
    0x84011520    0x24    ld a2,24(a5)
    0x84011522    0x26    li a1,-1
    0x84011524    0x28    slli a1,a1,0x27
    0x84011526    0x2a    addi a1,a1,3
    0x84011528    0x2c    and a2,a2,a1
    0x8401152a    0x2e    lui a1,0xf8000
    0x8401152e    0x32    srli a1,a1,0x19
    0x84011530    0x34    and a1,a1,a3
    0x84011532    0x36    or a2,a2,a1
    0x84011534    0x38    sd a2,24(a5)
    0x84011536    0x3a    lui a5,0xf8000
    0x8401153a    0x3e    srli a5,a5,0x19
    0x8401153c    0x40    and a5,a5,a4
    0x8401153e    0x42    slli a2,a4,0x19
    0x84011542    0x46    bgez a2,ffffffff84011550 <cteMove+0x54>
    0x84011546    0x4a    li a4,-1
    0x84011548    0x4c    slli a4,a4,0x27
    0x8401154a    0x4e    or a5,a5,a4
    0x8401154c    0x50    sd a3,16(a5)
    0x8401154e    0x52    j ffffffff84011552 <cteMove+0x56>
    0x84011550    0x54    bnez a5,ffffffff8401154c <cteMove+0x50>
    0x84011552    0x56    addi sp,sp,16
    0x84011554    0x58    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 59 nodes.

Section cteInsert (46 of 271)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 104 instructions.

RVC_TFFFT____FT___TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x840113c0      0x0    addi sp,sp,-16
    0x840113c2      0x2    sd a0,0(sp)           ; stack access
    0x840113c4      0x4    sd a1,8(sp)           ; stack access
    0x840113c6      0x6    ld a4,24(a2)
    0x840113c8      0x8    ld a6,0(a2)
    0x840113cc      0xc    ld t3,8(a2)
    0x840113d0     0x10    srli a5,a0,0x3b
    0x840113d4     0x14    slli a7,a0,0x4
    0x840113d8     0x18    bltz a7,ffffffff84011470 <cteInsert+0xb0>
    0x840113dc     0x1c    li a7,4
    0x840113de     0x1e    beq a5,a7,ffffffff84011416 <cteInsert+0x56>
    0x840113e2     0x22    bgeu a7,a5,ffffffff840113fe <cteInsert+0x3e>
    0x840113e6     0x26    li a7,6
    0x840113e8     0x28    beq a5,a7,ffffffff84011466 <cteInsert+0xa6>
    0x840113ec     0x2c    li a7,16
    0x840113ee     0x2e    bne a5,a7,ffffffff84011470 <cteInsert+0xb0>
    0x840113f2     0x32    srli a1,a6,0x3b
    0x840113f6     0x36    addi a1,a1,-14
    0x840113f8     0x38    seqz a1,a1
    0x840113fc     0x3c    j ffffffff8401141e <cteInsert+0x5e>
    0x840113fe     0x3e    li a7,2
    0x84011400     0x40    bne a5,a7,ffffffff84011470 <cteInsert+0xb0>
    0x84011404     0x44    mv a7,a2
    0x84011406     0x46    ori a4,a4,3
    0x8401140a     0x4a    srli a5,a6,0x3b
    0x8401140e     0x4e    li t1,2
    0x84011410     0x50    bne a5,t1,ffffffff8401142a <cteInsert+0x6a>
    0x84011414     0x54    j ffffffff84011484 <cteInsert+0xc4>
    0x84011416     0x56    sub a1,a1,t3
    0x8401141a     0x5a    snez a1,a1
    0x8401141e     0x5e    mv a7,a2
    0x84011420     0x60    slli a5,a1,0x1
    0x84011424     0x64    andi a4,a4,-4
    0x84011426     0x66    or a4,a4,a5
    0x84011428     0x68    or a4,a4,a1
    0x8401142a     0x6a    ld a5,0(sp)           ; stack access
    0x8401142c     0x6c    sd a5,0(a3)
    0x8401142e     0x6e    ld a5,8(sp)           ; stack access
    0x84011430     0x70    sd a5,8(a3)
    0x84011432     0x72    sd a7,16(a3)
    0x84011436     0x76    sd a4,24(a3)
    0x84011438     0x78    ld a1,24(a2)
    0x8401143a     0x7a    li a5,-1
    0x8401143c     0x7c    slli a5,a5,0x27
    0x8401143e     0x7e    addi a5,a5,3
    0x84011440     0x80    and a1,a1,a5
    0x84011442     0x82    lui a5,0xf8000
    0x84011446     0x86    srli a5,a5,0x19
    0x84011448     0x88    and a0,a3,a5
    0x8401144c     0x8c    or a1,a1,a0
    0x8401144e     0x8e    sd a1,24(a2)
    0x84011450     0x90    and a5,a5,a4
    0x84011452     0x92    slli a2,a4,0x19
    0x84011456     0x96    bgez a2,ffffffff840114e8 <cteInsert+0x128>
    0x8401145a     0x9a    li a4,-1
    0x8401145c     0x9c    slli a4,a4,0x27
    0x8401145e     0x9e    or a5,a5,a4
    0x84011460     0xa0    sd a3,16(a5)
    0x84011462     0xa2    addi sp,sp,16
    0x84011464     0xa4    ret
    0x84011466     0xa6    sub a1,a1,t3
    0x8401146a     0xaa    snez a1,a1
    0x8401146e     0xae    j ffffffff8401141e <cteInsert+0x5e>
    0x84011470     0xb0    mv a7,a2
    0x84011472     0xb2    andi a4,a4,-4
    0x84011474     0xb4    srli t1,a6,0x3b
    0x84011478     0xb8    li t4,2
    0x8401147a     0xba    bne t1,t4,ffffffff8401142a <cteInsert+0x6a>
    0x8401147e     0xbe    li t1,2
    0x84011480     0xc0    bne a5,t1,ffffffff8401142a <cteInsert+0x6a>
    0x84011484     0xc4    slli t1,a6,0x19
    0x84011488     0xc8    srli t1,t1,0x19
    0x8401148c     0xcc    slli a5,a6,0x19
    0x84011490     0xd0    bgez a5,ffffffff840114ac <cteInsert+0xec>
    0x84011494     0xd4    slli a5,a0,0x19
    0x84011498     0xd8    bgez a5,ffffffff8401142a <cteInsert+0x6a>
    0x8401149c     0xdc    li a5,-1
    0x8401149e     0xde    slli a6,a5,0x27
    0x840114a2     0xe2    or t1,t1,a6
    0x840114a6     0xe6    srli a5,a5,0x19
    0x840114a8     0xe8    and a5,a5,a0
    0x840114aa     0xea    j ffffffff840114ba <cteInsert+0xfa>
    0x840114ac     0xec    slli a5,a0,0x19
    0x840114b0     0xf0    srli a5,a5,0x19
    0x840114b2     0xf2    slli a6,a0,0x19
    0x840114b6     0xf6    bgez a6,ffffffff840114c0 <cteInsert+0x100>
    0x840114ba     0xfa    li a0,-1
    0x840114bc     0xfc    slli a0,a0,0x27
    0x840114be     0xfe    or a5,a5,a0
    0x840114c0    0x100    bne a5,t1,ffffffff8401142a <cteInsert+0x6a>
    0x840114c4    0x104    andi t3,t3,63
    0x840114c8    0x108    andi a1,a1,63
    0x840114cc    0x10c    bne a1,t3,ffffffff8401142a <cteInsert+0x6a>
    0x840114d0    0x110    addiw t3,t3,-4
    0x840114d2    0x112    lui a5,0x2000
    0x840114d6    0x116    sll t3,a5,t3
    0x840114da    0x11a    ld a5,8(a2)
    0x840114dc    0x11c    slli a5,a5,0x27
    0x840114de    0x11e    srli a5,a5,0x27
    0x840114e0    0x120    or a5,t3,a5
    0x840114e4    0x124    sd a5,8(a2)
    0x840114e6    0x126    j ffffffff8401142a <cteInsert+0x6a>
    0x840114e8    0x128    beqz a5,ffffffff84011462 <cteInsert+0xa2>
    0x840114ea    0x12a    j ffffffff84011460 <cteInsert+0xa0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 153 nodes.

Section preemptionPoint (47 of 271)
===================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 18 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `preemptionPoint`:

    0x84011388     0x0    auipc a5,0x1c
    0x8401138c     0x4    addi a5,a5,1160 # ffffffff8402d810 <ksWorkUnitsCompleted>
    0x84011390     0x8    ld a5,0(a5)
    0x84011392     0xa    addi a5,a5,1
    0x84011394     0xc    li a4,99
    0x84011398    0x10    bltu a4,a5,ffffffff840113a8 <preemptionPoint+0x20>
    0x8401139c    0x14    auipc a4,0x1c
    0x840113a0    0x18    sd a5,1140(a4) # ffffffff8402d810 <ksWorkUnitsCompleted>
    0x840113a4    0x1c    li a0,0
    0x840113a6    0x1e    ret
    0x840113a8    0x20    auipc a5,0x1c
    0x840113ac    0x24    sd zero,1128(a5) # ffffffff8402d810 <ksWorkUnitsCompleted>
    0x840113b0    0x28    csrr a0,sip
    0x840113b4    0x2c    andi a0,a0,544
    0x840113b8    0x30    bnez a0,ffffffff840113bc <preemptionPoint+0x34>
    0x840113ba    0x32    ret
    0x840113bc    0x34    li a0,4
    0x840113be    0x36    j ffffffff840113ba <preemptionPoint+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 28 nodes.

Section setMCPriority (48 of 271)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x84011382    0x0    sd a1,352(a0)
    0x84011386    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (49 of 271)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x8401135c    0x0    sd zero,72(a0)
    0x84011360    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section resolveAddressBits (50 of 271)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 98 instructions.

RVC_TFFFFFT__FT___TF.
SRL.....
RVC_TFFTTT___FF___FT..
RVC_FTTFFT___T____FT.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
21 stack accesses found. Annotated code for `resolveAddressBits`:

    0x8401103c      0x0    addi sp,sp,-32
    0x8401103e      0x2    sd s0,24(sp)          ; stack access
    0x84011040      0x4    sd s1,16(sp)          ; stack access
    0x84011042      0x6    sd a1,0(sp)           ; stack access
    0x84011044      0x8    sd a2,8(sp)           ; stack access
    0x84011046      0xa    srli a6,a1,0x3b
    0x8401104a      0xe    li a5,10
    0x8401104c     0x10    bne a6,a5,ffffffff840110de <resolveAddressBits+0xa2>
    0x84011050     0x14    mv t1,a4
    0x84011052     0x16    li t5,-1
    0x84011054     0x18    lui t0,0xfc000
    0x84011058     0x1c    srli t0,t0,0x19
    0x8401105c     0x20    li t6,1
    0x8401105e     0x22    slli t6,t6,0x26
    0x84011060     0x24    slli t2,t5,0x27
    0x84011064     0x28    li s0,10
    0x84011066     0x2a    srli a6,a1,0x2f
    0x8401106a     0x2e    andi a6,a6,63
    0x8401106e     0x32    srli t3,a1,0x35
    0x84011072     0x36    andi t3,t3,63
    0x84011076     0x3a    add s1,t3,a6
    0x8401107a     0x3e    sext.w a5,t1
    0x8401107e     0x42    sext.w a7,t3
    0x84011082     0x46    subw t4,a5,a7
    0x84011086     0x4a    srl t4,a3,t4
    0x8401108a     0x4e    sll a7,t5,a7
    0x8401108e     0x52    not a7,a7
    0x84011092     0x56    and a7,t4,a7
    0x84011096     0x5a    bltu t1,t3,ffffffff840110fa <resolveAddressBits+0xbe>
    0x8401109a     0x5e    bne a2,a7,ffffffff840110fa <resolveAddressBits+0xbe>
    0x8401109e     0x62    bltu t1,s1,ffffffff84011128 <resolveAddressBits+0xec>
    0x840110a2     0x66    subw a5,a5,s1
    0x840110a4     0x68    srl a5,a3,a5
    0x840110a8     0x6c    sll a6,t5,a6
    0x840110ac     0x70    not a6,a6
    0x840110b0     0x74    and a5,a5,a6
    0x840110b4     0x78    slli a5,a5,0x5
    0x840110b6     0x7a    slli a1,a1,0x1
    0x840110b8     0x7c    and a2,a1,t0
    0x840110bc     0x80    and a1,a1,t6
    0x840110c0     0x84    beqz a1,ffffffff840110c6 <resolveAddressBits+0x8a>
    0x840110c2     0x86    or a2,a2,t2
    0x840110c6     0x8a    add a5,a5,a2
    0x840110c8     0x8c    bne t1,s1,ffffffff84011150 <resolveAddressBits+0x114>
    0x840110cc     0x90    sd zero,0(a0)         ; stack access
    0x840110d0     0x94    sd a5,8(a0)           ; stack access
    0x840110d2     0x96    sd zero,16(a0)        ; stack access
    0x840110d6     0x9a    ld s0,24(sp)          ; stack access
    0x840110d8     0x9c    ld s1,16(sp)          ; stack access
    0x840110da     0x9e    addi sp,sp,32
    0x840110dc     0xa0    ret
    0x840110de     0xa2    auipc a5,0xc
    0x840110e2     0xa6    addi a5,a5,978 # ffffffff8401d4b0 <current_lookup_fault>
    0x840110e6     0xaa    sd zero,0(a5)
    0x840110ea     0xae    sd zero,8(a5)
    0x840110ee     0xb2    li a5,2
    0x840110f0     0xb4    sd a5,0(a0)           ; stack access
    0x840110f2     0xb6    sd zero,8(a0)         ; stack access
    0x840110f6     0xba    sd a4,16(a0)          ; stack access
    0x840110f8     0xbc    j ffffffff840110d6 <resolveAddressBits+0x9a>
    0x840110fa     0xbe    auipc a3,0xc
    0x840110fe     0xc2    addi a3,a3,950 # ffffffff8401d4b0 <current_lookup_fault>
    0x84011102     0xc6    slli t1,t1,0x9
    0x84011104     0xc8    lui a5,0x10
    0x84011106     0xca    addi a5,a5,-1
    0x84011108     0xcc    and t1,t1,a5
    0x8401110c     0xd0    slli t3,t3,0x2
    0x8401110e     0xd2    or t3,t1,t3
    0x84011112     0xd6    ori t3,t3,3
    0x84011116     0xda    sd t3,0(a3)
    0x8401111a     0xde    sd a2,8(a3)
    0x8401111c     0xe0    li a5,2
    0x8401111e     0xe2    sd a5,0(a0)           ; stack access
    0x84011120     0xe4    sd zero,8(a0)         ; stack access
    0x84011124     0xe8    sd a4,16(a0)          ; stack access
    0x84011126     0xea    j ffffffff840110d6 <resolveAddressBits+0x9a>
    0x84011128     0xec    auipc a5,0xc
    0x8401112c     0xf0    addi a5,a5,904 # ffffffff8401d4b0 <current_lookup_fault>
    0x84011130     0xf4    slli s1,s1,0x9
    0x84011132     0xf6    slli t1,t1,0x2
    0x84011134     0xf8    or t1,s1,t1
    0x84011138     0xfc    ori t1,t1,2
    0x8401113c    0x100    sd t1,0(a5)
    0x84011140    0x104    sd zero,8(a5)
    0x84011144    0x108    li a5,2
    0x84011146    0x10a    sd a5,0(a0)           ; stack access
    0x84011148    0x10c    sd zero,8(a0)         ; stack access
    0x8401114c    0x110    sd a4,16(a0)          ; stack access
    0x8401114e    0x112    j ffffffff840110d6 <resolveAddressBits+0x9a>
    0x84011150    0x114    sub t1,t1,s1
    0x84011154    0x118    ld a1,0(a5)
    0x84011156    0x11a    ld a2,8(a5)
    0x84011158    0x11c    srli a6,a1,0x3b
    0x8401115c    0x120    beq a6,s0,ffffffff84011066 <resolveAddressBits+0x2a>
    0x84011160    0x124    sd zero,0(a0)         ; stack access
    0x84011164    0x128    sd a5,8(a0)           ; stack access
    0x84011166    0x12a    sd t1,16(a0)          ; stack access
    0x8401116a    0x12e    j ffffffff840110d6 <resolveAddressBits+0x9a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
98 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 142 nodes.

Section Arch_performTransfer (51 of 271)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x84011038    0x0    li a0,0
    0x8401103a    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (52 of 271)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x84011034    0x0    li a0,0
    0x84011036    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (53 of 271)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x8401102c    0x0    addi a0,a0,-5
    0x8401102e    0x2    sltiu a0,a0,3
    0x84011032    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (54 of 271)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x8401102a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_getObjectSize (55 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_getObjectSize`:

    0x84010f66     0x0    li a5,6
    0x84010f68     0x2    beq a0,a5,ffffffff84010f92 <Arch_getObjectSize+0x2c>
    0x84010f6c     0x6    bgeu a5,a0,ffffffff84010f84 <Arch_getObjectSize+0x1e>
    0x84010f70     0xa    li a4,7
    0x84010f72     0xc    li a5,21
    0x84010f74     0xe    beq a0,a4,ffffffff84010f8e <Arch_getObjectSize+0x28>
    0x84010f78    0x12    li a4,8
    0x84010f7a    0x14    li a5,12
    0x84010f7c    0x16    beq a0,a4,ffffffff84010f8e <Arch_getObjectSize+0x28>
    0x84010f80    0x1a    li a5,0
    0x84010f82    0x1c    j ffffffff84010f8e <Arch_getObjectSize+0x28>
    0x84010f84    0x1e    li a4,5
    0x84010f86    0x20    li a5,30
    0x84010f88    0x22    beq a0,a4,ffffffff84010f8e <Arch_getObjectSize+0x28>
    0x84010f8c    0x26    li a5,0
    0x84010f8e    0x28    mv a0,a5
    0x84010f90    0x2a    ret
    0x84010f92    0x2c    li a5,12
    0x84010f94    0x2e    j ffffffff84010f8e <Arch_getObjectSize+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 30 nodes.

Section Arch_updateCapData (56 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

Section `Arch_updateCapData` expects pointer to stack in a0.
No stack accesses found. Code for `Arch_updateCapData`:

    0x84010bee    0x0    addi sp,sp,-32
    0x84010bf0    0x2    mv a0,a2
    0x84010bf2    0x4    mv a1,a3
    0x84010bf4    0x6    addi sp,sp,32
    0x84010bf6    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_decodeIRQControlInvocation (57 of 271)
===================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeIRQControlInvocation`:

    0x84010b4c     0x0    li a5,37
    0x84010b50     0x4    bne a0,a5,ffffffff84010b76 <Arch_decodeIRQControlInvocation+0x2a>
    0x84010b54     0x8    li a5,3
    0x84010b56     0xa    bgeu a5,a1,ffffffff84010b6a <Arch_decodeIRQControlInvocation+0x1e>
    0x84010b5a     0xe    ld a5,0(a3)
    0x84010b5c    0x10    beqz a5,ffffffff84010b6a <Arch_decodeIRQControlInvocation+0x1e>
    0x84010b5e    0x12    li a5,3
    0x84010b60    0x14    auipc a4,0xd
    0x84010b64    0x18    sd a5,-1640(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84010b68    0x1c    j ffffffff84010b80 <Arch_decodeIRQControlInvocation+0x34>
    0x84010b6a    0x1e    li a5,7
    0x84010b6c    0x20    auipc a4,0xd
    0x84010b70    0x24    sd a5,-1652(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84010b74    0x28    j ffffffff84010b80 <Arch_decodeIRQControlInvocation+0x34>
    0x84010b76    0x2a    li a5,3
    0x84010b78    0x2c    auipc a4,0xd
    0x84010b7c    0x30    sd a5,-1664(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84010b80    0x34    li a0,3
    0x84010b82    0x36    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 30 nodes.

Section Arch_checkIRQ (58 of 271)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84010b36     0x0    auipc a5,0xd
    0x84010b3a     0x4    addi a5,a5,-1646 # ffffffff8401d4c8 <current_syscall_error>
    0x84010b3e     0x8    li a4,4
    0x84010b40     0xa    sd a4,48(a5)
    0x84010b42     0xc    li a4,1
    0x84010b44     0xe    sd a4,16(a5)
    0x84010b46    0x10    sd a4,24(a5)
    0x84010b48    0x12    li a0,3
    0x84010b4a    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 13 nodes.

Section handleSpuriousIRQ (59 of 271)
=====================================

Deriving specifications
-----------------------

Section `handleSpuriousIRQ` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `handleSpuriousIRQ`:

    0x84010b34    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSpuriousIRQ` has 2 nodes.

Section plat_cleanInvalidateL2Range (60 of 271)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84010b32    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (61 of 271)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84010b30    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (62 of 271)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84010b2e    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section ackInterrupt (63 of 271)
================================

Deriving specifications
-----------------------

Section `ackInterrupt` consists of 3 instructions.

SW..

Stack analysis
---------------

No stack accesses found. Code for `ackInterrupt`:

    0x84010b24    0x0    auipc a5,0x7
    0x84010b28    0x4    sw zero,1764(a5) # ffffffff84018208 <active_irq>
    0x84010b2c    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ackInterrupt` has 5 nodes.

Section maskInterrupt (64 of 271)
=================================

Deriving specifications
-----------------------

Section `maskInterrupt` consists of 10 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `maskInterrupt`:

    0x84010b06     0x0    li a5,1
    0x84010b08     0x2    beq a1,a5,ffffffff84010b0e <maskInterrupt+0x8>
    0x84010b0c     0x6    ret
    0x84010b0e     0x8    beqz a0,ffffffff84010b1a <maskInterrupt+0x14>
    0x84010b10     0xa    li a5,32
    0x84010b14     0xe    csrrc a5,sie,a5
    0x84010b18    0x12    ret
    0x84010b1a    0x14    li a5,32
    0x84010b1e    0x18    csrrs a5,sie,a5
    0x84010b22    0x1c    j ffffffff84010b0c <maskInterrupt+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskInterrupt` has 18 nodes.

Section isIRQPending (65 of 271)
================================

Deriving specifications
-----------------------

Section `isIRQPending` consists of 3 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `isIRQPending`:

    0x84010afc    0x0    csrr a0,sip
    0x84010b00    0x4    andi a0,a0,544
    0x84010b04    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQPending` has 5 nodes.

Section getActiveIRQ (66 of 271)
================================

Deriving specifications
-----------------------

Section `getActiveIRQ` consists of 14 instructions.

RVC_FTF___________FF..
Skipping 144027f3 csrr a5,sip


Stack analysis
---------------

No stack accesses found. Code for `getActiveIRQ`:

    0x84010ad0     0x0    auipc a5,0x7
    0x84010ad4     0x4    addi a5,a5,1848 # ffffffff84018208 <active_irq>
    0x84010ad8     0x8    lw a0,0(a5)
    0x84010ada     0xa    li a5,1
    0x84010adc     0xc    beq a0,a5,ffffffff84010afa <getActiveIRQ+0x2a>
    0x84010ae0    0x10    csrr a5,sip
    0x84010ae4    0x14    andi a4,a5,512
    0x84010ae8    0x18    li a0,0
    0x84010aea    0x1a    bnez a4,ffffffff84010af2 <getActiveIRQ+0x22>
    0x84010aec    0x1c    srli a0,a5,0x5
    0x84010af0    0x20    andi a0,a0,1
    0x84010af2    0x22    auipc a5,0x7
    0x84010af6    0x26    sw a0,1814(a5) # ffffffff84018208 <active_irq>
    0x84010afa    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getActiveIRQ` has 22 nodes.

Section setNextPC (67 of 271)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84010aca    0x0    sd a1,272(a0)
    0x84010ace    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (68 of 271)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84010ac4    0x0    ld a0,264(a0)
    0x84010ac8    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (69 of 271)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x84010a48     0x0    addi sp,sp,-16
    0x84010a4a     0x2    sd a0,0(sp)           ; stack access
    0x84010a4c     0x4    sd a1,8(sp)           ; stack access
    0x84010a4e     0x6    sd a0,0(a2)
    0x84010a50     0x8    sd a1,8(a2)
    0x84010a52     0xa    sd a3,0(a4)
    0x84010a54     0xc    sfence.vma
    0x84010a58    0x10    li a0,0
    0x84010a5a    0x12    addi sp,sp,16
    0x84010a5c    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (70 of 271)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84010a32     0x0    addi sp,sp,-16
    0x84010a34     0x2    sd a0,0(sp)           ; stack access
    0x84010a36     0x4    sd a1,8(sp)           ; stack access
    0x84010a38     0x6    sd a0,0(a2)
    0x84010a3a     0x8    sd a1,8(a2)
    0x84010a3c     0xa    sd a3,0(a4)
    0x84010a3e     0xc    sfence.vma
    0x84010a42    0x10    li a0,0
    0x84010a44    0x12    addi sp,sp,16
    0x84010a46    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (71 of 271)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 29 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x840109ec     0x0    mv a5,a0
    0x840109ee     0x2    li a4,1
    0x840109f0     0x4    beq a0,a4,ffffffff84010a08 <maskVMRights+0x1c>
    0x840109f4     0x8    li a4,3
    0x840109f6     0xa    beq a0,a4,ffffffff84010a10 <maskVMRights+0x24>
    0x840109fa     0xe    li a4,2
    0x840109fc    0x10    li a0,0
    0x840109fe    0x12    bne a5,a4,ffffffff84010a06 <maskVMRights+0x1a>
    0x84010a02    0x16    andi a1,a1,1
    0x84010a04    0x18    bnez a1,ffffffff84010a2e <maskVMRights+0x42>
    0x84010a06    0x1a    ret
    0x84010a08    0x1c    srli a1,a1,0x1
    0x84010a0a    0x1e    andi a0,a1,1
    0x84010a0e    0x22    ret
    0x84010a10    0x24    srli a3,a1,0x1
    0x84010a14    0x28    or a4,a3,a1
    0x84010a18    0x2c    andi a4,a4,1
    0x84010a1a    0x2e    li a0,0
    0x84010a1c    0x30    beqz a4,ffffffff84010a06 <maskVMRights+0x1a>
    0x84010a1e    0x32    andi a1,a1,1
    0x84010a20    0x34    li a0,1
    0x84010a22    0x36    beqz a1,ffffffff84010a06 <maskVMRights+0x1a>
    0x84010a24    0x38    andi a3,a3,1
    0x84010a26    0x3a    li a0,2
    0x84010a28    0x3c    beqz a3,ffffffff84010a06 <maskVMRights+0x1a>
    0x84010a2a    0x3e    mv a0,a5
    0x84010a2c    0x40    ret
    0x84010a2e    0x42    mv a0,a5
    0x84010a30    0x44    j ffffffff84010a06 <maskVMRights+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 46 nodes.

Section checkValidIPCBuffer (72 of 271)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 25 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x840109a4     0x0    addi sp,sp,-16
    0x840109a6     0x2    srli a4,a1,0x3b
    0x840109aa     0x6    li a5,1
    0x840109ac     0x8    bne a4,a5,ffffffff840109c2 <checkValidIPCBuffer+0x1e>
    0x840109b0     0xc    slli a5,a1,0xa
    0x840109b4    0x10    bltz a5,ffffffff840109d0 <checkValidIPCBuffer+0x2c>
    0x840109b8    0x14    andi a0,a0,1023
    0x840109bc    0x18    bnez a0,ffffffff840109de <checkValidIPCBuffer+0x3a>
    0x840109be    0x1a    addi sp,sp,16
    0x840109c0    0x1c    ret
    0x840109c2    0x1e    li a5,3
    0x840109c4    0x20    auipc a4,0xd
    0x840109c8    0x24    sd a5,-1228(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840109cc    0x28    li a0,3
    0x840109ce    0x2a    j ffffffff840109be <checkValidIPCBuffer+0x1a>
    0x840109d0    0x2c    li a5,3
    0x840109d2    0x2e    auipc a4,0xd
    0x840109d6    0x32    sd a5,-1242(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840109da    0x36    li a0,3
    0x840109dc    0x38    j ffffffff840109be <checkValidIPCBuffer+0x1a>
    0x840109de    0x3a    li a5,5
    0x840109e0    0x3c    auipc a4,0xd
    0x840109e4    0x40    sd a5,-1256(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840109e8    0x44    li a0,3
    0x840109ea    0x46    j ffffffff840109be <checkValidIPCBuffer+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 35 nodes.

Section isValidVTableRoot (73 of 271)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x8401098e     0x0    addi sp,sp,-16
    0x84010990     0x2    srli a4,a0,0x3b
    0x84010994     0x6    li a5,3
    0x84010996     0x8    srli a0,a0,0x27
    0x84010998     0xa    andi a0,a0,1
    0x8401099a     0xc    beq a4,a5,ffffffff840109a0 <isValidVTableRoot+0x12>
    0x8401099e    0x10    li a0,0
    0x840109a0    0x12    addi sp,sp,16
    0x840109a2    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (74 of 271)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 30 instructions.


Stack analysis
---------------

Section `lookupPTSlot` expects pointer to stack in a0.
1 stack accesses found. Annotated code for `lookupPTSlot`:

    0x84010630     0x0    addi sp,sp,-16
    0x84010632     0x2    li a2,30
    0x84010634     0x4    lui a7,0xfff00
    0x84010638     0x8    srli a7,a7,0x8
    0x8401063c     0xc    li a6,-1
    0x8401063e     0xe    slli a6,a6,0x26
    0x84010640    0x10    srl a5,a1,a2
    0x84010644    0x14    andi a5,a5,511
    0x84010648    0x18    slli a5,a5,0x3
    0x8401064a    0x1a    add a5,a5,a0
    0x8401064c    0x1c    ld a4,0(a5)           ; stack access
    0x8401064e    0x1e    slli a0,a4,0x2
    0x84010652    0x22    and a0,a0,a7
    0x84010656    0x26    add a0,a0,a6
    0x84010658    0x28    andi a3,a4,1
    0x8401065c    0x2c    beqz a3,ffffffff84010676 <lookupPTSlot+0x46>
    0x8401065e    0x2e    addi t3,a2,-9
    0x84010662    0x32    srli a3,a4,0x1
    0x84010666    0x36    srli t1,a4,0x2
    0x8401066a    0x3a    or a3,a3,t1
    0x8401066e    0x3e    srli a4,a4,0x3
    0x84010670    0x40    or a4,a4,a3
    0x84010672    0x42    andi a4,a4,1
    0x84010674    0x44    beqz a4,ffffffff8401067e <lookupPTSlot+0x4e>
    0x84010676    0x46    mv a0,a5
    0x84010678    0x48    mv a1,a2
    0x8401067a    0x4a    addi sp,sp,16
    0x8401067c    0x4c    ret
    0x8401067e    0x4e    mv a2,t3
    0x84010680    0x50    j ffffffff84010640 <lookupPTSlot+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 36 nodes.

Section copyGlobalMappings (75 of 271)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x8401041e     0x0    auipc a5,0xb
    0x84010422     0x4    addi a5,a5,994 # ffffffff8401b800 <kernel_root_pageTable+0x800>
    0x84010426     0x8    lui a4,0x1
    0x84010428     0xa    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x8401042c     0xe    add a0,a0,a4
    0x8401042e    0x10    auipc a3,0xc
    0x84010432    0x14    addi a3,a3,-1070 # ffffffff8401c000 <kernel_root_pageTable+0x1000>
    0x84010436    0x18    ld a4,0(a5)
    0x84010438    0x1a    sd a4,0(a0)
    0x8401043a    0x1c    addi a5,a5,8
    0x8401043c    0x1e    addi a0,a0,8
    0x8401043e    0x20    bne a5,a3,ffffffff84010436 <copyGlobalMappings+0x18>
    0x84010442    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (76 of 271)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x8401041c    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (77 of 271)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x8401041a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (78 of 271)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x84010294    0x0    li a0,0
    0x84010296    0x2    li a1,0
    0x84010298    0x4    li a2,0
    0x8401029a    0x6    li a7,8
    0x8401029c    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section findVSpaceForASID (79 of 271)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 35 instructions.


Stack analysis
---------------

Section `findVSpaceForASID` expects pointer to stack in a0.
6 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x840100fe     0x0    addi sp,sp,-16
    0x84010100     0x2    srli a5,a0,0x9
    0x84010104     0x6    slli a4,a5,0x3
    0x84010108     0xa    auipc a5,0xc
    0x8401010c     0xe    addi a5,a5,-96 # ffffffff8401c0a8 <riscvKSASIDTable>
    0x84010110    0x12    add a5,a5,a4
    0x84010112    0x14    ld a5,0(a5)           ; stack access
    0x84010114    0x16    beqz a5,ffffffff8401012e <findVSpaceForASID+0x30>
    0x84010116    0x18    andi a0,a0,511
    0x8401011a    0x1c    slli a0,a0,0x3
    0x8401011c    0x1e    add a0,a0,a5
    0x8401011e    0x20    ld a5,0(a0)           ; stack access
    0x84010120    0x22    beqz a5,ffffffff84010146 <findVSpaceForASID+0x48>
    0x84010122    0x24    sd zero,0(sp)         ; stack access
    0x84010124    0x26    sd a5,8(sp)           ; stack access
    0x84010126    0x28    ld a0,0(sp)           ; stack access
    0x84010128    0x2a    ld a1,8(sp)           ; stack access
    0x8401012a    0x2c    addi sp,sp,16
    0x8401012c    0x2e    ret
    0x8401012e    0x30    auipc a5,0xd
    0x84010132    0x34    addi a5,a5,898 # ffffffff8401d4b0 <current_lookup_fault>
    0x84010136    0x38    sd zero,0(a5)
    0x8401013a    0x3c    sd zero,8(a5)
    0x8401013e    0x40    li a5,2
    0x84010140    0x42    sd a5,0(sp)
    0x84010142    0x44    sd zero,8(sp)
    0x84010144    0x46    j ffffffff84010126 <findVSpaceForASID+0x28>
    0x84010146    0x48    auipc a5,0xd
    0x8401014a    0x4c    addi a5,a5,874 # ffffffff8401d4b0 <current_lookup_fault>
    0x8401014e    0x50    sd zero,0(a5)
    0x84010152    0x54    sd zero,8(a5)
    0x84010156    0x58    li a5,2
    0x84010158    0x5a    sd a5,0(sp)
    0x8401015a    0x5c    sd zero,8(sp)
    0x8401015c    0x5e    j ffffffff84010126 <findVSpaceForASID+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 54 nodes.

Section pte_next (80 of 271)
============================

Deriving specifications
-----------------------

Section `pte_next` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `pte_next`:

    0x840100da     0x0    snez a1,a1
    0x840100de     0x4    srli a0,a0,0x2
    0x840100e0     0x6    lui a5,0xfff00
    0x840100e4     0xa    srli a5,a5,0xa
    0x840100e6     0xc    and a0,a0,a5
    0x840100e8     0xe    slli a5,a1,0x3
    0x840100ec    0x12    slli a4,a1,0x2
    0x840100f0    0x16    or a5,a5,a4
    0x840100f2    0x18    or a0,a0,a5
    0x840100f4    0x1a    slli a1,a1,0x1
    0x840100f6    0x1c    or a0,a0,a1
    0x840100f8    0x1e    ori a0,a0,225
    0x840100fc    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `pte_next` has 14 nodes.

Section idle_thread (81 of 271)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x840100d4    0x0    wfi
    0x840100d8    0x4    j ffffffff840100d4 <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section bi_finalise (82 of 271)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x840017b0     0x0    auipc a5,0x1
    0x840017b4     0x4    addi a5,a5,1000 # ffffffff84002b98 <ndks_boot>
    0x840017b8     0x8    ld a3,576(a5)
    0x840017bc     0xc    ld a4,584(a5)
    0x840017c0    0x10    ld a5,568(a5)
    0x840017c4    0x14    sd a3,40(a5)
    0x840017c6    0x16    sd a4,48(a5)
    0x840017c8    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (83 of 271)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x8400158c     0x0    auipc a5,0x1c
    0x84001590     0x4    sd a0,-204(a5) # ffffffff8401d4c0 <ksSchedulerAction>
    0x84001594     0x8    auipc a5,0x1c
    0x84001598     0xc    addi a5,a5,-236 # ffffffff8401d4a8 <ksIdleThread>
    0x8400159c    0x10    ld a5,0(a5)
    0x8400159e    0x12    auipc a4,0x2c
    0x840015a2    0x16    sd a5,762(a4) # ffffffff8402d898 <ksCurThread>
    0x840015a6    0x1a    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 12 nodes.

Section create_it_asid_pool (84 of 271)
=======================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 248 instructions.

RVC_TFFFFT___FFFFFTF.

Stack analysis
---------------

Section `create_it_asid_pool` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x840012d6      0x0    addi sp,sp,-32
    0x840012d8      0x2    auipc a5,0x2
    0x840012dc      0x6    addi a5,a5,-1856 # ffffffff84002b98 <ndks_boot>
    0x840012e0      0xa    ld a5,608(a5)
    0x840012e4      0xe    slli a5,a5,0x19
    0x840012e6     0x10    srli a5,a5,0x1b
    0x840012e8     0x12    li a4,13
    0x840012ea     0x14    slli a4,a4,0x3b
    0x840012ec     0x16    or a4,a4,a5
    0x840012ee     0x18    srli a3,a0,0x3b
    0x840012f2     0x1c    li a5,20
    0x840012f4     0x1e    bltu a5,a3,ffffffff84001480 <create_it_asid_pool+0x1aa>
    0x840012f8     0x22    slli a2,a3,0x2
    0x840012fc     0x26    auipc a6,0x16
    0x84001300     0x2a    addi a6,a6,516 # ffffffff84017500 <ksDomScheduleLength+0x390>
    0x84001304     0x2e    add a2,a2,a6
    0x84001306     0x30    lw a5,0(a2)           ; stack access
    0x84001308     0x32    add a5,a5,a6
    0x8400130a     0x34    jr a5
    0x8400130c     0x36    slli a5,a0,0x19
    0x84001310     0x3a    srli a5,a5,0x19
    0x84001312     0x3c    slli a3,a0,0x19
    0x84001316     0x40    bgez a3,ffffffff84001320 <create_it_asid_pool+0x4a>
    0x8400131a     0x44    li a3,-1
    0x8400131c     0x46    slli a3,a3,0x27
    0x8400131e     0x48    or a5,a5,a3
    0x84001320     0x4a    sd a4,192(a5)
    0x84001322     0x4c    sd zero,200(a5)
    0x84001326     0x50    sd zero,208(a5)
    0x8400132a     0x54    li a3,3
    0x8400132c     0x56    sd a3,216(a5)
    0x8400132e     0x58    slli a5,a0,0x19
    0x84001332     0x5c    srli a5,a5,0x19
    0x84001334     0x5e    slli a3,a0,0x19
    0x84001338     0x62    bgez a3,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x8400133c     0x66    li a3,-1
    0x8400133e     0x68    slli a3,a3,0x27
    0x84001340     0x6a    or a5,a5,a3
    0x84001342     0x6c    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001344     0x6e    slli a5,a0,0x19
    0x84001348     0x72    srli a5,a5,0x19
    0x8400134a     0x74    slli a3,a0,0x19
    0x8400134e     0x78    bgez a3,ffffffff84001358 <create_it_asid_pool+0x82>
    0x84001352     0x7c    li a3,-1
    0x84001354     0x7e    slli a3,a3,0x27
    0x84001356     0x80    or a5,a5,a3
    0x84001358     0x82    sd a4,192(a5)
    0x8400135a     0x84    sd zero,200(a5)
    0x8400135e     0x88    sd zero,208(a5)
    0x84001362     0x8c    li a3,3
    0x84001364     0x8e    sd a3,216(a5)
    0x84001366     0x90    slli a5,a0,0x19
    0x8400136a     0x94    srli a5,a5,0x19
    0x8400136c     0x96    slli a3,a0,0x19
    0x84001370     0x9a    bgez a3,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001374     0x9e    li a3,-1
    0x84001376     0xa0    slli a3,a3,0x27
    0x84001378     0xa2    or a5,a5,a3
    0x8400137a     0xa4    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x8400137c     0xa6    slli a5,a0,0x19
    0x84001380     0xaa    srli a5,a5,0x19
    0x84001382     0xac    slli a3,a0,0x19
    0x84001386     0xb0    bgez a3,ffffffff84001390 <create_it_asid_pool+0xba>
    0x8400138a     0xb4    li a3,-1
    0x8400138c     0xb6    slli a3,a3,0x27
    0x8400138e     0xb8    or a5,a5,a3
    0x84001390     0xba    sd a4,192(a5)
    0x84001392     0xbc    sd zero,200(a5)
    0x84001396     0xc0    sd zero,208(a5)
    0x8400139a     0xc4    li a3,3
    0x8400139c     0xc6    sd a3,216(a5)
    0x8400139e     0xc8    slli a5,a0,0x19
    0x840013a2     0xcc    srli a5,a5,0x19
    0x840013a4     0xce    slli a3,a0,0x19
    0x840013a8     0xd2    bgez a3,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x840013ac     0xd6    li a3,-1
    0x840013ae     0xd8    slli a3,a3,0x27
    0x840013b0     0xda    or a5,a5,a3
    0x840013b2     0xdc    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x840013b4     0xde    slli a3,a0,0x1
    0x840013b8     0xe2    lui a5,0xfc000
    0x840013bc     0xe6    srli a5,a5,0x19
    0x840013be     0xe8    and a5,a5,a3
    0x840013c0     0xea    slli a2,a3,0x19
    0x840013c4     0xee    bgez a2,ffffffff840013ce <create_it_asid_pool+0xf8>
    0x840013c8     0xf2    li a3,-1
    0x840013ca     0xf4    slli a3,a3,0x27
    0x840013cc     0xf6    or a5,a5,a3
    0x840013ce     0xf8    sd a4,192(a5)
    0x840013d0     0xfa    sd zero,200(a5) # fffffffffc0000c8 <ki_end+0x77fd20c8>
    0x840013d4     0xfe    sd zero,208(a5)
    0x840013d8    0x102    li a3,3
    0x840013da    0x104    sd a3,216(a5)
    0x840013dc    0x106    slli a0,a0,0x1
    0x840013de    0x108    lui a5,0xfc000
    0x840013e2    0x10c    srli a5,a5,0x19
    0x840013e4    0x10e    and a5,a5,a0
    0x840013e6    0x110    slli a3,a0,0x19
    0x840013ea    0x114    bgez a3,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x840013ee    0x118    li a3,-1
    0x840013f0    0x11a    slli a3,a3,0x27
    0x840013f2    0x11c    or a5,a5,a3
    0x840013f4    0x11e    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x840013f6    0x120    slli a5,a0,0x19
    0x840013fa    0x124    srli a5,a5,0x19
    0x840013fc    0x126    slli a3,a0,0x19
    0x84001400    0x12a    bgez a3,ffffffff8400140a <create_it_asid_pool+0x134>
    0x84001404    0x12e    li a3,-1
    0x84001406    0x130    slli a3,a3,0x27
    0x84001408    0x132    or a5,a5,a3
    0x8400140a    0x134    andi a5,a5,-1024
    0x8400140e    0x138    sd a4,192(a5)
    0x84001410    0x13a    sd zero,200(a5) # fffffffffc0000c8 <ki_end+0x77fd20c8>
    0x84001414    0x13e    sd zero,208(a5)
    0x84001418    0x142    li a3,3
    0x8400141a    0x144    sd a3,216(a5)
    0x8400141c    0x146    slli a5,a0,0x19
    0x84001420    0x14a    srli a5,a5,0x19
    0x84001422    0x14c    slli a3,a0,0x19
    0x84001426    0x150    bgez a3,ffffffff84001430 <create_it_asid_pool+0x15a>
    0x8400142a    0x154    li a3,-1
    0x8400142c    0x156    slli a3,a3,0x27
    0x8400142e    0x158    or a5,a5,a3
    0x84001430    0x15a    andi a5,a5,-1024
    0x84001434    0x15e    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001436    0x160    andi a5,a0,127
    0x8400143a    0x164    li a3,64
    0x8400143e    0x168    beq a5,a3,ffffffff8400147c <create_it_asid_pool+0x1a6>
    0x84001442    0x16c    andi a5,a0,63
    0x84001446    0x170    addiw a3,a5,1
    0x8400144a    0x174    li a5,-1
    0x8400144c    0x176    sll a5,a5,a3
    0x84001450    0x17a    and a5,a5,a1
    0x84001452    0x17c    sd a4,192(a5)
    0x84001454    0x17e    sd zero,200(a5)
    0x84001458    0x182    sd zero,208(a5)
    0x8400145c    0x186    li a3,3
    0x8400145e    0x188    sd a3,216(a5)
    0x84001460    0x18a    andi a5,a0,127
    0x84001464    0x18e    li a3,64
    0x84001468    0x192    beq a5,a3,ffffffff8400150e <create_it_asid_pool+0x238>
    0x8400146c    0x196    andi a0,a0,63
    0x84001470    0x19a    addiw a0,a0,1
    0x84001472    0x19c    li a5,-1
    0x84001474    0x19e    sll a5,a5,a0
    0x84001478    0x1a2    and a5,a5,a1
    0x8400147a    0x1a4    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x8400147c    0x1a6    li a5,4
    0x8400147e    0x1a8    j ffffffff84001446 <create_it_asid_pool+0x170>
    0x84001480    0x1aa    li a5,3
    0x84001482    0x1ac    beq a3,a5,ffffffff840014ae <create_it_asid_pool+0x1d8>
    0x84001486    0x1b0    li a5,13
    0x84001488    0x1b2    beq a3,a5,ffffffff840014c8 <create_it_asid_pool+0x1f2>
    0x8400148c    0x1b6    li a2,1
    0x8400148e    0x1b8    li a5,0
    0x84001490    0x1ba    bne a3,a2,ffffffff840014e6 <create_it_asid_pool+0x210>
    0x84001494    0x1be    srli a2,a1,0x9
    0x84001498    0x1c2    slli a5,a2,0x19
    0x8400149c    0x1c6    srli a5,a5,0x19
    0x8400149e    0x1c8    slli a6,a2,0x19
    0x840014a2    0x1cc    bgez a6,ffffffff840014e6 <create_it_asid_pool+0x210>
    0x840014a6    0x1d0    li a2,-1
    0x840014a8    0x1d2    slli a2,a2,0x27
    0x840014aa    0x1d4    or a5,a5,a2
    0x840014ac    0x1d6    j ffffffff840014e6 <create_it_asid_pool+0x210>
    0x840014ae    0x1d8    srli a2,a1,0x9
    0x840014b2    0x1dc    slli a5,a2,0x19
    0x840014b6    0x1e0    srli a5,a5,0x19
    0x840014b8    0x1e2    slli a6,a2,0x19
    0x840014bc    0x1e6    bgez a6,ffffffff840014e6 <create_it_asid_pool+0x210>
    0x840014c0    0x1ea    li a2,-1
    0x840014c2    0x1ec    slli a2,a2,0x27
    0x840014c4    0x1ee    or a5,a5,a2
    0x840014c6    0x1f0    j ffffffff840014e6 <create_it_asid_pool+0x210>
    0x840014c8    0x1f2    slli a2,a0,0x2
    0x840014cc    0x1f6    lui a5,0xf8000
    0x840014d0    0x1fa    srli a5,a5,0x19
    0x840014d2    0x1fc    and a5,a5,a2
    0x840014d4    0x1fe    slli a6,a2,0x19
    0x840014d8    0x202    bgez a6,ffffffff840014e6 <create_it_asid_pool+0x210>
    0x840014dc    0x206    li a2,-1
    0x840014de    0x208    slli a2,a2,0x27
    0x840014e0    0x20a    or a5,a5,a2
    0x840014e2    0x20c    j ffffffff840014e6 <create_it_asid_pool+0x210>
    0x840014e4    0x20e    li a5,0
    0x840014e6    0x210    sd a4,192(a5)
    0x840014e8    0x212    sd zero,200(a5) # fffffffff80000c8 <ki_end+0x73fd20c8>
    0x840014ec    0x216    sd zero,208(a5)
    0x840014f0    0x21a    li a2,3
    0x840014f2    0x21c    sd a2,216(a5)
    0x840014f4    0x21e    li a5,20
    0x840014f6    0x220    bltu a5,a3,ffffffff84001512 <create_it_asid_pool+0x23c>
    0x840014fa    0x224    slli a2,a3,0x2
    0x840014fe    0x228    auipc a6,0x16
    0x84001502    0x22c    addi a6,a6,86 # ffffffff84017554 <ksDomScheduleLength+0x3e4>
    0x84001506    0x230    add a2,a2,a6
    0x84001508    0x232    lw a5,0(a2)           ; stack access
    0x8400150a    0x234    add a5,a5,a6
    0x8400150c    0x236    jr a5
    0x8400150e    0x238    li a0,4
    0x84001510    0x23a    j ffffffff84001470 <create_it_asid_pool+0x19a>
    0x84001512    0x23c    li a5,3
    0x84001514    0x23e    beq a3,a5,ffffffff8400153e <create_it_asid_pool+0x268>
    0x84001518    0x242    li a5,13
    0x8400151a    0x244    beq a3,a5,ffffffff84001556 <create_it_asid_pool+0x280>
    0x8400151e    0x248    li a2,1
    0x84001520    0x24a    li a5,0
    0x84001522    0x24c    bne a3,a2,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001526    0x250    srli a1,a1,0x9
    0x84001528    0x252    slli a5,a1,0x19
    0x8400152c    0x256    srli a5,a5,0x19
    0x8400152e    0x258    slli a3,a1,0x19
    0x84001532    0x25c    bgez a3,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001536    0x260    li a3,-1
    0x84001538    0x262    slli a3,a3,0x27
    0x8400153a    0x264    or a5,a5,a3
    0x8400153c    0x266    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x8400153e    0x268    srli a1,a1,0x9
    0x84001540    0x26a    slli a5,a1,0x19
    0x84001544    0x26e    srli a5,a5,0x19
    0x84001546    0x270    slli a3,a1,0x19
    0x8400154a    0x274    bgez a3,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x8400154e    0x278    li a3,-1
    0x84001550    0x27a    slli a3,a3,0x27
    0x84001552    0x27c    or a5,a5,a3
    0x84001554    0x27e    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001556    0x280    slli a0,a0,0x2
    0x84001558    0x282    lui a5,0xf8000
    0x8400155c    0x286    srli a5,a5,0x19
    0x8400155e    0x288    and a5,a5,a0
    0x84001560    0x28a    slli a3,a0,0x19
    0x84001564    0x28e    bgez a3,ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001568    0x292    li a3,-1
    0x8400156a    0x294    slli a3,a3,0x27
    0x8400156c    0x296    or a5,a5,a3
    0x8400156e    0x298    j ffffffff84001572 <create_it_asid_pool+0x29c>
    0x84001570    0x29a    li a5,0
    0x84001572    0x29c    li a3,11
    0x84001574    0x29e    slli a3,a3,0x3b
    0x84001576    0x2a0    sd a3,160(a5)
    0x84001578    0x2a2    sd zero,168(a5) # fffffffff80000a8 <ki_end+0x73fd20a8>
    0x8400157c    0x2a6    sd zero,176(a5)
    0x84001580    0x2aa    li a3,3
    0x84001582    0x2ac    sd a3,184(a5)
    0x84001584    0x2ae    mv a0,a4
    0x84001586    0x2b0    li a1,0
    0x84001588    0x2b2    addi sp,sp,32
    0x8400158a    0x2b4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
248 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 338 nodes.

Section provide_cap (85 of 271)
===============================

Deriving specifications
-----------------------

Section `provide_cap` consists of 131 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `provide_cap`:

    0x84000e36      0x0    addi sp,sp,-32
    0x84000e38      0x2    sd a0,16(sp)          ; stack access
    0x84000e3a      0x4    sd a1,24(sp)          ; stack access
    0x84000e3c      0x6    sd a2,0(sp)           ; stack access
    0x84000e3e      0x8    sd a3,8(sp)           ; stack access
    0x84000e40      0xa    auipc a5,0x2
    0x84000e44      0xe    addi a5,a5,-680 # ffffffff84002b98 <ndks_boot>
    0x84000e48     0x12    ld a3,576(a5)
    0x84000e4c     0x16    ld a5,584(a5)
    0x84000e50     0x1a    bltu a3,a5,ffffffff84000e5a <provide_cap+0x24>
    0x84000e54     0x1e    li a0,0
    0x84000e56     0x20    addi sp,sp,32
    0x84000e58     0x22    ret
    0x84000e5a     0x24    mv a4,a0
    0x84000e5c     0x26    mv a6,a1
    0x84000e5e     0x28    srli a1,a0,0x3b
    0x84000e62     0x2c    li a5,20
    0x84000e64     0x2e    bltu a5,a1,ffffffff84000f14 <provide_cap+0xde>
    0x84000e68     0x32    slli a2,a1,0x2
    0x84000e6c     0x36    auipc a0,0x16
    0x84000e70     0x3a    addi a0,a0,1516 # ffffffff84017458 <ksDomScheduleLength+0x2e8>
    0x84000e74     0x3e    add a2,a2,a0
    0x84000e76     0x40    lw a5,0(a2)
    0x84000e78     0x42    add a5,a5,a0
    0x84000e7a     0x44    jr a5
    0x84000e7c     0x46    slli a5,a4,0x19
    0x84000e80     0x4a    srli a5,a5,0x19
    0x84000e82     0x4c    slli a2,a4,0x19
    0x84000e86     0x50    bgez a2,ffffffff84000f7c <provide_cap+0x146>
    0x84000e8a     0x54    li a4,-1
    0x84000e8c     0x56    slli a4,a4,0x27
    0x84000e8e     0x58    or a5,a5,a4
    0x84000e90     0x5a    j ffffffff84000f7c <provide_cap+0x146>
    0x84000e92     0x5c    slli a5,a4,0x19
    0x84000e96     0x60    srli a5,a5,0x19
    0x84000e98     0x62    slli a2,a4,0x19
    0x84000e9c     0x66    bgez a2,ffffffff84000f7c <provide_cap+0x146>
    0x84000ea0     0x6a    li a4,-1
    0x84000ea2     0x6c    slli a4,a4,0x27
    0x84000ea4     0x6e    or a5,a5,a4
    0x84000ea6     0x70    j ffffffff84000f7c <provide_cap+0x146>
    0x84000ea8     0x72    slli a5,a4,0x19
    0x84000eac     0x76    srli a5,a5,0x19
    0x84000eae     0x78    slli a2,a4,0x19
    0x84000eb2     0x7c    bgez a2,ffffffff84000f7c <provide_cap+0x146>
    0x84000eb6     0x80    li a4,-1
    0x84000eb8     0x82    slli a4,a4,0x27
    0x84000eba     0x84    or a5,a5,a4
    0x84000ebc     0x86    j ffffffff84000f7c <provide_cap+0x146>
    0x84000ebe     0x88    slli a4,a4,0x1
    0x84000ec0     0x8a    lui a5,0xfc000
    0x84000ec4     0x8e    srli a5,a5,0x19
    0x84000ec6     0x90    and a5,a5,a4
    0x84000ec8     0x92    slli a2,a4,0x19
    0x84000ecc     0x96    bgez a2,ffffffff84000f7c <provide_cap+0x146>
    0x84000ed0     0x9a    li a4,-1
    0x84000ed2     0x9c    slli a4,a4,0x27
    0x84000ed4     0x9e    or a5,a5,a4
    0x84000ed6     0xa0    j ffffffff84000f7c <provide_cap+0x146>
    0x84000ed8     0xa2    slli a5,a4,0x19
    0x84000edc     0xa6    srli a5,a5,0x19
    0x84000ede     0xa8    slli a2,a4,0x19
    0x84000ee2     0xac    bgez a2,ffffffff84000eec <provide_cap+0xb6>
    0x84000ee6     0xb0    li a4,-1
    0x84000ee8     0xb2    slli a4,a4,0x27
    0x84000eea     0xb4    or a5,a5,a4
    0x84000eec     0xb6    andi a5,a5,-1024
    0x84000ef0     0xba    j ffffffff84000f7c <provide_cap+0x146>
    0x84000ef2     0xbc    andi a5,a4,127
    0x84000ef6     0xc0    li a2,64
    0x84000efa     0xc4    beq a5,a2,ffffffff84000f10 <provide_cap+0xda>
    0x84000efe     0xc8    andi a4,a4,63
    0x84000f02     0xcc    addiw a4,a4,1
    0x84000f04     0xce    li a5,-1
    0x84000f06     0xd0    sll a5,a5,a4
    0x84000f0a     0xd4    and a5,a5,a6
    0x84000f0e     0xd8    j ffffffff84000f7c <provide_cap+0x146>
    0x84000f10     0xda    li a4,4
    0x84000f12     0xdc    j ffffffff84000f02 <provide_cap+0xcc>
    0x84000f14     0xde    li a5,3
    0x84000f16     0xe0    beq a1,a5,ffffffff84000f42 <provide_cap+0x10c>
    0x84000f1a     0xe4    li a5,13
    0x84000f1c     0xe6    beq a1,a5,ffffffff84000f5c <provide_cap+0x126>
    0x84000f20     0xea    li a4,1
    0x84000f22     0xec    li a5,0
    0x84000f24     0xee    bne a1,a4,ffffffff84000f7c <provide_cap+0x146>
    0x84000f28     0xf2    srli a6,a6,0x9
    0x84000f2c     0xf6    slli a5,a6,0x19
    0x84000f30     0xfa    srli a5,a5,0x19
    0x84000f32     0xfc    slli a4,a6,0x19
    0x84000f36    0x100    bgez a4,ffffffff84000f7c <provide_cap+0x146>
    0x84000f3a    0x104    li a4,-1
    0x84000f3c    0x106    slli a4,a4,0x27
    0x84000f3e    0x108    or a5,a5,a4
    0x84000f40    0x10a    j ffffffff84000f7c <provide_cap+0x146>
    0x84000f42    0x10c    srli a6,a6,0x9
    0x84000f46    0x110    slli a5,a6,0x19
    0x84000f4a    0x114    srli a5,a5,0x19
    0x84000f4c    0x116    slli a4,a6,0x19
    0x84000f50    0x11a    bgez a4,ffffffff84000f7c <provide_cap+0x146>
    0x84000f54    0x11e    li a4,-1
    0x84000f56    0x120    slli a4,a4,0x27
    0x84000f58    0x122    or a5,a5,a4
    0x84000f5a    0x124    j ffffffff84000f7c <provide_cap+0x146>
    0x84000f5c    0x126    slli a2,a4,0x2
    0x84000f60    0x12a    lui a4,0xf8000
    0x84000f64    0x12e    srli a4,a4,0x19
    0x84000f66    0x130    and a5,a2,a4
    0x84000f6a    0x134    slli a4,a2,0x19
    0x84000f6e    0x138    bgez a4,ffffffff84000f7c <provide_cap+0x146>
    0x84000f72    0x13c    li a4,-1
    0x84000f74    0x13e    slli a4,a4,0x27
    0x84000f76    0x140    or a5,a5,a4
    0x84000f78    0x142    j ffffffff84000f7c <provide_cap+0x146>
    0x84000f7a    0x144    li a5,0
    0x84000f7c    0x146    slli a3,a3,0x5
    0x84000f7e    0x148    add a5,a5,a3
    0x84000f80    0x14a    ld a4,0(sp)           ; stack access
    0x84000f82    0x14c    sd a4,0(a5)
    0x84000f84    0x14e    ld a4,8(sp)           ; stack access
    0x84000f86    0x150    sd a4,8(a5)
    0x84000f88    0x152    sd zero,16(a5) # fffffffffc000010 <ki_end+0x77fd2010>
    0x84000f8c    0x156    li a4,3
    0x84000f8e    0x158    sd a4,24(a5)
    0x84000f90    0x15a    auipc a4,0x2
    0x84000f94    0x15e    addi a4,a4,-1016 # ffffffff84002b98 <ndks_boot>
    0x84000f98    0x162    ld a5,576(a4)
    0x84000f9c    0x166    addi a5,a5,1
    0x84000f9e    0x168    sd a5,576(a4)
    0x84000fa2    0x16c    li a0,1
    0x84000fa4    0x16e    j ffffffff84000e56 <provide_cap+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
131 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 176 nodes.

Section create_domain_cap (86 of 271)
=====================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 110 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_domain_cap`:

    0x84000b70      0x0    addi sp,sp,-16
    0x84000b72      0x2    srli a3,a0,0x3b
    0x84000b76      0x6    li a5,20
    0x84000b78      0x8    bltu a5,a3,ffffffff84000c26 <create_domain_cap+0xb6>
    0x84000b7c      0xc    slli a4,a3,0x2
    0x84000b80     0x10    auipc a2,0x17
    0x84000b84     0x14    addi a2,a2,-2000 # ffffffff840173b0 <ksDomScheduleLength+0x240>
    0x84000b88     0x18    add a4,a4,a2
    0x84000b8a     0x1a    lw a5,0(a4)
    0x84000b8c     0x1c    add a5,a5,a2
    0x84000b8e     0x1e    jr a5
    0x84000b90     0x20    slli a5,a0,0x19
    0x84000b94     0x24    srli a5,a5,0x19
    0x84000b96     0x26    slli a4,a0,0x19
    0x84000b9a     0x2a    bgez a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000b9e     0x2e    li a4,-1
    0x84000ba0     0x30    slli a4,a4,0x27
    0x84000ba2     0x32    or a5,a5,a4
    0x84000ba4     0x34    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000ba6     0x36    slli a5,a0,0x19
    0x84000baa     0x3a    srli a5,a5,0x19
    0x84000bac     0x3c    slli a4,a0,0x19
    0x84000bb0     0x40    bgez a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000bb4     0x44    li a4,-1
    0x84000bb6     0x46    slli a4,a4,0x27
    0x84000bb8     0x48    or a5,a5,a4
    0x84000bba     0x4a    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000bbc     0x4c    slli a5,a0,0x19
    0x84000bc0     0x50    srli a5,a5,0x19
    0x84000bc2     0x52    slli a4,a0,0x19
    0x84000bc6     0x56    bgez a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000bca     0x5a    li a4,-1
    0x84000bcc     0x5c    slli a4,a4,0x27
    0x84000bce     0x5e    or a5,a5,a4
    0x84000bd0     0x60    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000bd2     0x62    slli a0,a0,0x1
    0x84000bd4     0x64    lui a5,0xfc000
    0x84000bd8     0x68    srli a5,a5,0x19
    0x84000bda     0x6a    and a5,a5,a0
    0x84000bdc     0x6c    slli a4,a0,0x19
    0x84000be0     0x70    bgez a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000be4     0x74    li a4,-1
    0x84000be6     0x76    slli a4,a4,0x27
    0x84000be8     0x78    or a5,a5,a4
    0x84000bea     0x7a    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000bec     0x7c    slli a5,a0,0x19
    0x84000bf0     0x80    srli a5,a5,0x19
    0x84000bf2     0x82    slli a4,a0,0x19
    0x84000bf6     0x86    bgez a4,ffffffff84000c00 <create_domain_cap+0x90>
    0x84000bfa     0x8a    li a4,-1
    0x84000bfc     0x8c    slli a4,a4,0x27
    0x84000bfe     0x8e    or a5,a5,a4
    0x84000c00     0x90    andi a5,a5,-1024
    0x84000c04     0x94    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c06     0x96    andi a5,a0,127
    0x84000c0a     0x9a    li a4,64
    0x84000c0e     0x9e    beq a5,a4,ffffffff84000c22 <create_domain_cap+0xb2>
    0x84000c12     0xa2    andi a0,a0,63
    0x84000c16     0xa6    addiw a0,a0,1
    0x84000c18     0xa8    li a5,-1
    0x84000c1a     0xaa    sll a5,a5,a0
    0x84000c1e     0xae    and a5,a5,a1
    0x84000c20     0xb0    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c22     0xb2    li a0,4
    0x84000c24     0xb4    j ffffffff84000c16 <create_domain_cap+0xa6>
    0x84000c26     0xb6    li a5,3
    0x84000c28     0xb8    beq a3,a5,ffffffff84000c52 <create_domain_cap+0xe2>
    0x84000c2c     0xbc    li a5,13
    0x84000c2e     0xbe    beq a3,a5,ffffffff84000c6a <create_domain_cap+0xfa>
    0x84000c32     0xc2    li a4,1
    0x84000c34     0xc4    li a5,0
    0x84000c36     0xc6    bne a3,a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c3a     0xca    srli a1,a1,0x9
    0x84000c3c     0xcc    slli a5,a1,0x19
    0x84000c40     0xd0    srli a5,a5,0x19
    0x84000c42     0xd2    slli a4,a1,0x19
    0x84000c46     0xd6    bgez a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c4a     0xda    li a4,-1
    0x84000c4c     0xdc    slli a4,a4,0x27
    0x84000c4e     0xde    or a5,a5,a4
    0x84000c50     0xe0    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c52     0xe2    srli a1,a1,0x9
    0x84000c54     0xe4    slli a5,a1,0x19
    0x84000c58     0xe8    srli a5,a5,0x19
    0x84000c5a     0xea    slli a4,a1,0x19
    0x84000c5e     0xee    bgez a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c62     0xf2    li a4,-1
    0x84000c64     0xf4    slli a4,a4,0x27
    0x84000c66     0xf6    or a5,a5,a4
    0x84000c68     0xf8    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c6a     0xfa    slli a0,a0,0x2
    0x84000c6c     0xfc    lui a5,0xf8000
    0x84000c70    0x100    srli a5,a5,0x19
    0x84000c72    0x102    and a5,a5,a0
    0x84000c74    0x104    slli a4,a0,0x19
    0x84000c78    0x108    bgez a4,ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c7c    0x10c    li a4,-1
    0x84000c7e    0x10e    slli a4,a4,0x27
    0x84000c80    0x110    or a5,a5,a4
    0x84000c82    0x112    j ffffffff84000c86 <create_domain_cap+0x116>
    0x84000c84    0x114    li a5,0
    0x84000c86    0x116    li a4,-3
    0x84000c88    0x118    slli a4,a4,0x3d
    0x84000c8a    0x11a    sd a4,352(a5) # fffffffff8000160 <ki_end+0x73fd2160>
    0x84000c8e    0x11e    sd zero,360(a5)
    0x84000c92    0x122    sd zero,368(a5)
    0x84000c96    0x126    li a4,3
    0x84000c98    0x128    sd a4,376(a5)
    0x84000c9c    0x12c    addi sp,sp,16
    0x84000c9e    0x12e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
110 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 143 nodes.

Section create_root_cnode (87 of 271)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

Section `create_root_cnode` expects pointer to stack in a0.
No stack accesses found. Code for `create_root_cnode`:

    0x84000b34     0x0    addi sp,sp,-16
    0x84000b36     0x2    auipc a5,0x2
    0x84000b3a     0x6    addi a5,a5,98 # ffffffff84002b98 <ndks_boot>
    0x84000b3e     0xa    lui a4,0x80
    0x84000b42     0xe    sd a4,584(a5)
    0x84000b46    0x12    ld a4,592(a5)
    0x84000b4a    0x16    slli a0,a4,0x19
    0x84000b4e    0x1a    srli a0,a0,0x1a
    0x84000b50    0x1c    lui a5,0xab53
    0x84000b54    0x20    slli a5,a5,0x23
    0x84000b56    0x22    or a0,a0,a5
    0x84000b58    0x24    addi a5,a4,64 # 80040 <KERNEL_OFFSET-0xfffffffefff7ffc0>
    0x84000b5c    0x28    sd a0,64(a4)
    0x84000b5e    0x2a    sd zero,72(a4)
    0x84000b62    0x2e    sd zero,80(a4)
    0x84000b66    0x32    li a4,3
    0x84000b68    0x34    sd a4,24(a5)
    0x84000b6a    0x36    li a1,0
    0x84000b6c    0x38    addi sp,sp,16
    0x84000b6e    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (88 of 271)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x84000b22     0x0    addi sp,sp,-16
    0x84000b24     0x2    sd a1,0(a0)
    0x84000b26     0x4    sd a2,8(a0)
    0x84000b28     0x6    sd zero,16(a0)
    0x84000b2c     0xa    li a5,3
    0x84000b2e     0xc    sd a5,24(a0)
    0x84000b30     0xe    addi sp,sp,16
    0x84000b32    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section initIRQController (89 of 271)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x8400098c    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 2 nodes.

Section initLocalIRQController (90 of 271)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 3 instructions.

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x84000982    0x0    li a5,544
    0x84000986    0x4    csrrs a5,sie,a5
    0x8400098a    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 5 nodes.

Section initL2Cache (91 of 271)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x84000980    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section initTimer (92 of 271)
=============================

Deriving specifications
-----------------------

Section `initTimer` consists of 9 instructions.

Skipping c0102573 rdtime a0

RVC_FTTFFT___FFT__FT.
Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `initTimer`:

    0x84000968     0x0    rdtime a0
    0x8400096c     0x4    lui a5,0x5
    0x8400096e     0x6    addi a5,a5,-480 # 4e20 <KERNEL_OFFSET-0xfffffffeffffb1e0>
    0x84000972     0xa    add a0,a0,a5
    0x84000974     0xc    li a1,0
    0x84000976     0xe    li a2,0
    0x84000978    0x10    li a7,0
    0x8400097a    0x12    ecall
    0x8400097e    0x16    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initTimer` has 12 nodes.

Section map_kernel_devices (93 of 271)
======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `map_kernel_devices`:

    0x84000966    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 2 nodes.

Section get_avail_p_regs (94 of 271)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x8400095c    0x0    auipc a0,0x2
    0x84000960    0x4    addi a0,a0,556 # ffffffff84002b88 <avail_p_regs>
    0x84000964    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (95 of 271)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x84000958    0x0    li a0,1
    0x8400095a    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section write_it_asid_pool (96 of 271)
======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 210 instructions.

RVC_FTT_T_________TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x84000208      0x0    addi sp,sp,-32
    0x8400020a      0x2    sd a2,0(sp)           ; stack access
    0x8400020c      0x4    sd a3,8(sp)           ; stack access
    0x8400020e      0x6    srli a3,a0,0x3b
    0x84000212      0xa    li a5,20
    0x84000214      0xc    bltu a5,a3,ffffffff840002c4 <write_it_asid_pool+0xbc>
    0x84000218     0x10    slli a4,a3,0x2
    0x8400021c     0x14    auipc a2,0x17
    0x84000220     0x18    addi a2,a2,-164 # ffffffff84017178 <ksDomScheduleLength+0x8>
    0x84000224     0x1c    add a4,a4,a2
    0x84000226     0x1e    lw a5,0(a4)
    0x84000228     0x20    add a5,a5,a2
    0x8400022a     0x22    jr a5
    0x8400022c     0x24    slli a5,a0,0x19
    0x84000230     0x28    srli a5,a5,0x19
    0x84000232     0x2a    slli a4,a0,0x19
    0x84000236     0x2e    bgez a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x8400023a     0x32    li a4,-1
    0x8400023c     0x34    slli a4,a4,0x27
    0x8400023e     0x36    or a5,a5,a4
    0x84000240     0x38    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000242     0x3a    slli a5,a0,0x19
    0x84000246     0x3e    srli a5,a5,0x19
    0x84000248     0x40    slli a4,a0,0x19
    0x8400024c     0x44    bgez a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000250     0x48    li a4,-1
    0x84000252     0x4a    slli a4,a4,0x27
    0x84000254     0x4c    or a5,a5,a4
    0x84000256     0x4e    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000258     0x50    slli a5,a0,0x19
    0x8400025c     0x54    srli a5,a5,0x19
    0x8400025e     0x56    slli a4,a0,0x19
    0x84000262     0x5a    bgez a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000266     0x5e    li a4,-1
    0x84000268     0x60    slli a4,a4,0x27
    0x8400026a     0x62    or a5,a5,a4
    0x8400026c     0x64    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x8400026e     0x66    slli a0,a0,0x1
    0x84000270     0x68    lui a5,0xfc000
    0x84000274     0x6c    srli a5,a5,0x19
    0x84000276     0x6e    and a5,a5,a0
    0x84000278     0x70    slli a4,a0,0x19
    0x8400027c     0x74    bgez a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000280     0x78    li a4,-1
    0x84000282     0x7a    slli a4,a4,0x27
    0x84000284     0x7c    or a5,a5,a4
    0x84000286     0x7e    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000288     0x80    slli a5,a0,0x19
    0x8400028c     0x84    srli a5,a5,0x19
    0x8400028e     0x86    slli a4,a0,0x19
    0x84000292     0x8a    bgez a4,ffffffff8400029c <write_it_asid_pool+0x94>
    0x84000296     0x8e    li a4,-1
    0x84000298     0x90    slli a4,a4,0x27
    0x8400029a     0x92    or a5,a5,a4
    0x8400029c     0x94    andi a5,a5,-1024
    0x840002a0     0x98    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x840002a2     0x9a    andi a5,a0,127
    0x840002a6     0x9e    li a4,64
    0x840002aa     0xa2    beq a5,a4,ffffffff840002c0 <write_it_asid_pool+0xb8>
    0x840002ae     0xa6    andi a0,a0,63
    0x840002b2     0xaa    addiw a0,a0,1
    0x840002b4     0xac    li a5,-1
    0x840002b6     0xae    sll a0,a5,a0
    0x840002ba     0xb2    and a5,a0,a1
    0x840002be     0xb6    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x840002c0     0xb8    li a0,4
    0x840002c2     0xba    j ffffffff840002b2 <write_it_asid_pool+0xaa>
    0x840002c4     0xbc    li a5,3
    0x840002c6     0xbe    beq a3,a5,ffffffff840002f0 <write_it_asid_pool+0xe8>
    0x840002ca     0xc2    li a5,13
    0x840002cc     0xc4    beq a3,a5,ffffffff84000308 <write_it_asid_pool+0x100>
    0x840002d0     0xc8    li a4,1
    0x840002d2     0xca    li a5,0
    0x840002d4     0xcc    bne a3,a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x840002d8     0xd0    srli a1,a1,0x9
    0x840002da     0xd2    slli a5,a1,0x19
    0x840002de     0xd6    srli a5,a5,0x19
    0x840002e0     0xd8    slli a4,a1,0x19
    0x840002e4     0xdc    bgez a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x840002e8     0xe0    li a4,-1
    0x840002ea     0xe2    slli a4,a4,0x27
    0x840002ec     0xe4    or a5,a5,a4
    0x840002ee     0xe6    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x840002f0     0xe8    srli a1,a1,0x9
    0x840002f2     0xea    slli a5,a1,0x19
    0x840002f6     0xee    srli a5,a5,0x19
    0x840002f8     0xf0    slli a4,a1,0x19
    0x840002fc     0xf4    bgez a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000300     0xf8    li a4,-1
    0x84000302     0xfa    slli a4,a4,0x27
    0x84000304     0xfc    or a5,a5,a4
    0x84000306     0xfe    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000308    0x100    slli a0,a0,0x2
    0x8400030a    0x102    lui a5,0xf8000
    0x8400030e    0x106    srli a5,a5,0x19
    0x84000310    0x108    and a5,a5,a0
    0x84000312    0x10a    slli a4,a0,0x19
    0x84000316    0x10e    bgez a4,ffffffff84000324 <write_it_asid_pool+0x11c>
    0x8400031a    0x112    li a4,-1
    0x8400031c    0x114    slli a4,a4,0x27
    0x8400031e    0x116    or a5,a5,a4
    0x84000320    0x118    j ffffffff84000324 <write_it_asid_pool+0x11c>
    0x84000322    0x11a    li a5,0
    0x84000324    0x11c    ld a3,0(sp)           ; stack access
    0x84000326    0x11e    ld a6,8(sp)           ; stack access
    0x84000328    0x120    srli a1,a3,0x3b
    0x8400032c    0x124    li a4,20
    0x8400032e    0x126    bltu a4,a1,ffffffff840003de <write_it_asid_pool+0x1d6>
    0x84000332    0x12a    slli a2,a1,0x2
    0x84000336    0x12e    auipc a0,0x17
    0x8400033a    0x132    addi a0,a0,-362 # ffffffff840171cc <ksDomScheduleLength+0x5c>
    0x8400033e    0x136    add a2,a2,a0
    0x84000340    0x138    lw a4,0(a2)
    0x84000342    0x13a    add a4,a4,a0
    0x84000344    0x13c    jr a4
    0x84000346    0x13e    slli a4,a3,0x19
    0x8400034a    0x142    srli a4,a4,0x19
    0x8400034c    0x144    slli a2,a3,0x19
    0x84000350    0x148    bgez a2,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000354    0x14c    li a3,-1
    0x84000356    0x14e    slli a3,a3,0x27
    0x84000358    0x150    or a4,a4,a3
    0x8400035a    0x152    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x8400035c    0x154    slli a4,a3,0x19
    0x84000360    0x158    srli a4,a4,0x19
    0x84000362    0x15a    slli a2,a3,0x19
    0x84000366    0x15e    bgez a2,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x8400036a    0x162    li a3,-1
    0x8400036c    0x164    slli a3,a3,0x27
    0x8400036e    0x166    or a4,a4,a3
    0x84000370    0x168    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000372    0x16a    slli a4,a3,0x19
    0x84000376    0x16e    srli a4,a4,0x19
    0x84000378    0x170    slli a2,a3,0x19
    0x8400037c    0x174    bgez a2,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000380    0x178    li a3,-1
    0x84000382    0x17a    slli a3,a3,0x27
    0x84000384    0x17c    or a4,a4,a3
    0x84000386    0x17e    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000388    0x180    slli a3,a3,0x1
    0x8400038a    0x182    lui a4,0xfc000
    0x8400038e    0x186    srli a4,a4,0x19
    0x84000390    0x188    and a4,a4,a3
    0x84000392    0x18a    slli a2,a3,0x19
    0x84000396    0x18e    bgez a2,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x8400039a    0x192    li a3,-1
    0x8400039c    0x194    slli a3,a3,0x27
    0x8400039e    0x196    or a4,a4,a3
    0x840003a0    0x198    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x840003a2    0x19a    slli a4,a3,0x19
    0x840003a6    0x19e    srli a4,a4,0x19
    0x840003a8    0x1a0    slli a2,a3,0x19
    0x840003ac    0x1a4    bgez a2,ffffffff840003b6 <write_it_asid_pool+0x1ae>
    0x840003b0    0x1a8    li a3,-1
    0x840003b2    0x1aa    slli a3,a3,0x27
    0x840003b4    0x1ac    or a4,a4,a3
    0x840003b6    0x1ae    andi a4,a4,-1024
    0x840003ba    0x1b2    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x840003bc    0x1b4    andi a4,a3,127
    0x840003c0    0x1b8    li a2,64
    0x840003c4    0x1bc    beq a4,a2,ffffffff840003da <write_it_asid_pool+0x1d2>
    0x840003c8    0x1c0    andi a3,a3,63
    0x840003cc    0x1c4    addiw a3,a3,1
    0x840003ce    0x1c6    li a4,-1
    0x840003d0    0x1c8    sll a4,a4,a3
    0x840003d4    0x1cc    and a4,a4,a6
    0x840003d8    0x1d0    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x840003da    0x1d2    li a3,4
    0x840003dc    0x1d4    j ffffffff840003cc <write_it_asid_pool+0x1c4>
    0x840003de    0x1d6    li a4,3
    0x840003e0    0x1d8    beq a1,a4,ffffffff8400040c <write_it_asid_pool+0x204>
    0x840003e4    0x1dc    li a4,13
    0x840003e6    0x1de    beq a1,a4,ffffffff84000426 <write_it_asid_pool+0x21e>
    0x840003ea    0x1e2    li a3,1
    0x840003ec    0x1e4    li a4,0
    0x840003ee    0x1e6    bne a1,a3,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x840003f2    0x1ea    srli a6,a6,0x9
    0x840003f6    0x1ee    slli a4,a6,0x19
    0x840003fa    0x1f2    srli a4,a4,0x19
    0x840003fc    0x1f4    slli a3,a6,0x19
    0x84000400    0x1f8    bgez a3,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000404    0x1fc    li a3,-1
    0x84000406    0x1fe    slli a3,a3,0x27
    0x84000408    0x200    or a4,a4,a3
    0x8400040a    0x202    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x8400040c    0x204    srli a6,a6,0x9
    0x84000410    0x208    slli a4,a6,0x19
    0x84000414    0x20c    srli a4,a4,0x19
    0x84000416    0x20e    slli a3,a6,0x19
    0x8400041a    0x212    bgez a3,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x8400041e    0x216    li a3,-1
    0x84000420    0x218    slli a3,a3,0x27
    0x84000422    0x21a    or a4,a4,a3
    0x84000424    0x21c    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000426    0x21e    slli a3,a3,0x2
    0x84000428    0x220    lui a4,0xf8000
    0x8400042c    0x224    srli a4,a4,0x19
    0x8400042e    0x226    and a4,a4,a3
    0x84000430    0x228    slli a2,a3,0x19
    0x84000434    0x22c    bgez a2,ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000438    0x230    li a3,-1
    0x8400043a    0x232    slli a3,a3,0x27
    0x8400043c    0x234    or a4,a4,a3
    0x8400043e    0x236    j ffffffff84000442 <write_it_asid_pool+0x23a>
    0x84000440    0x238    li a4,0
    0x84000442    0x23a    sd a4,8(a5)
    0x84000444    0x23c    auipc a4,0x1c
    0x84000448    0x240    sd a5,-924(a4) # ffffffff8401c0a8 <riscvKSASIDTable>
    0x8400044c    0x244    addi sp,sp,32
    0x8400044e    0x246    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
210 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 273 nodes.

Section activate_kernel_vspace (97 of 271)
==========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x840001e2     0x0    auipc a5,0x1b
    0x840001e6     0x4    addi a5,a5,-482 # ffffffff8401b000 <kernel_root_pageTable>
    0x840001ea     0x8    li a4,1
    0x840001ec     0xa    slli a4,a4,0x20
    0x840001ee     0xc    add a5,a5,a4
    0x840001f0     0xe    srli a5,a5,0xc
    0x840001f2    0x10    li a4,-1
    0x840001f4    0x12    srli a3,a4,0x14
    0x840001f8    0x16    and a5,a5,a3
    0x840001fa    0x18    slli a4,a4,0x3f
    0x840001fc    0x1a    or a5,a5,a4
    0x840001fe    0x1c    csrw satp,a5
    0x84000202    0x20    sfence.vma
    0x84000206    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (98 of 271)
=====================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x840001b4     0x0    addi sp,sp,-16
    0x840001b6     0x2    addi a1,a1,-1
    0x840001b8     0x4    srli a5,a1,0x15
    0x840001bc     0x8    addi a5,a5,1
    0x840001be     0xa    slli a5,a5,0x15
    0x840001c0     0xc    lui a4,0xffe00
    0x840001c4    0x10    and a4,a4,a0
    0x840001c6    0x12    sub a5,a5,a4
    0x840001c8    0x14    srli a5,a5,0x15
    0x840001ca    0x16    srli a1,a1,0x1e
    0x840001cc    0x18    addi a1,a1,1
    0x840001ce    0x1a    slli a1,a1,0x1e
    0x840001d0    0x1c    lui a4,0xc0000
    0x840001d4    0x20    and a0,a0,a4
    0x840001d6    0x22    sub a1,a1,a0
    0x840001d8    0x24    srli a1,a1,0x1e
    0x840001da    0x26    add a0,a5,a1
    0x840001de    0x2a    addi sp,sp,16
    0x840001e0    0x2c    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (99 of 271)
================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

Section `create_unmapped_it_frame_cap` expects pointer to stack in a0.
No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x8400019e     0x0    addi sp,sp,-16
    0x840001a0     0x2    slli a1,a0,0x9
    0x840001a4     0x6    li a0,1
    0x840001a6     0x8    slli a0,a0,0x3b
    0x840001a8     0xa    lui a5,0xfe000
    0x840001ac     0xe    srli a5,a5,0x10
    0x840001ae    0x10    and a1,a1,a5
    0x840001b0    0x12    addi sp,sp,16
    0x840001b2    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section Arch_configureIdleThread (100 of 271)
=============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x84000096     0x0    auipc a5,0x10
    0x8400009a     0x4    addi a5,a5,62 # ffffffff840100d4 <idle_thread>
    0x8400009e     0x8    sd a5,272(a0)
    0x840000a2     0xc    li a5,288
    0x840000a6    0x10    sd a5,256(a0)
    0x840000aa    0x14    auipc a5,0x1d
    0x840000ae    0x18    addi a5,a5,1022 # ffffffff8401d4a8 <ksIdleThread>
    0x840000b2    0x1c    sd a5,8(a0)
    0x840000b4    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (101 of 271)
==================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 39 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    li a4,1
    0x84000028     0x2    auipc a2,0x3
    0x8400002c     0x6    addi a2,a2,-1168 # ffffffff84002b98 <ndks_boot>
    0x84000030     0xa    auipc a6,0x3
    0x84000034     0xe    addi a6,a6,-1192 # ffffffff84002b88 <avail_p_regs>
    0x84000038    0x12    j ffffffff84000070 <merge_regions+0x4a>
    0x8400003a    0x14    slli a5,a4,0x4
    0x8400003e    0x18    add a5,a5,a2
    0x84000040    0x1a    ld a5,8(a5)
    0x84000042    0x1c    slli a0,a0,0x4
    0x84000044    0x1e    add a0,a0,a2
    0x84000046    0x20    sd a5,8(a0)
    0x84000048    0x22    addi a5,a4,1
    0x8400004c    0x26    bgeu a5,a1,ffffffff8400006a <merge_regions+0x44>
    0x84000050    0x2a    slli a5,a4,0x4
    0x84000054    0x2e    add a5,a5,a2
    0x84000056    0x30    slli a0,a1,0x4
    0x8400005a    0x34    add a0,a0,a6
    0x8400005c    0x36    ld a3,16(a5)
    0x8400005e    0x38    sd a3,0(a5)
    0x84000060    0x3a    ld a3,24(a5)
    0x84000062    0x3c    sd a3,8(a5)
    0x84000064    0x3e    addi a5,a5,16
    0x84000066    0x40    bne a5,a0,ffffffff8400005c <merge_regions+0x36>
    0x8400006a    0x44    addi a1,a1,-1
    0x8400006c    0x46    sd a1,304(a2)
    0x84000070    0x4a    ld a1,304(a2)
    0x84000074    0x4e    bgeu a4,a1,ffffffff84000094 <merge_regions+0x6e>
    0x84000078    0x52    addi a0,a4,-1
    0x8400007c    0x56    slli a3,a0,0x4
    0x84000080    0x5a    add a3,a3,a2
    0x84000082    0x5c    slli a5,a4,0x4
    0x84000086    0x60    add a5,a5,a2
    0x84000088    0x62    ld a3,8(a3)
    0x8400008a    0x64    ld a5,0(a5)
    0x8400008c    0x66    beq a3,a5,ffffffff8400003a <merge_regions+0x14>
    0x84000090    0x6a    addi a4,a4,1
    0x84000092    0x6c    j ffffffff84000070 <merge_regions+0x4a>
    0x84000094    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 58 nodes.

Section str_to_long (102 of 271)
================================

Deriving specifications
-----------------------

Section `str_to_long` consists of 44 instructions.

RVC_FTTTFFFTF_____FT.
JAL.
MUL.....
RVC_FTT_FFFFT_____TF.
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `str_to_long`:

    0x8401706c     0x0    addi sp,sp,-48
    0x8401706e     0x2    sd ra,40(sp)          ; stack access
    0x84017070     0x4    sd s0,32(sp)          ; stack access
    0x84017072     0x6    sd s1,24(sp)          ; stack access
    0x84017074     0x8    sd s2,16(sp)          ; stack access
    0x84017076     0xa    sd s3,8(sp)           ; stack access
    0x84017078     0xc    mv s1,a0
    0x8401707a     0xe    lbu a0,0(a0)
    0x8401707e    0x12    li a5,48
    0x84017082    0x16    li s2,10
    0x84017084    0x18    beq a0,a5,ffffffff840170b6 <str_to_long+0x4a>
    0x84017088    0x1c    lbu a0,0(s1)
    0x8401708c    0x20    beqz a0,ffffffff840170cc <str_to_long+0x60>
    0x8401708e    0x22    li s0,0
    0x84017090    0x24    li s3,-1
    0x84017092    0x26    slli s2,s2,0x20
    0x84017094    0x28    srli s2,s2,0x20
    0x84017098    0x2c    jal ra,ffffffff8401702c <char_to_long>
    0x8401709c    0x30    beq a0,s3,ffffffff840170d2 <str_to_long+0x66>
    0x840170a0    0x34    bge a0,s2,ffffffff840170d0 <str_to_long+0x64>
    0x840170a4    0x38    mul s0,s2,s0
    0x840170a8    0x3c    add s0,s0,a0
    0x840170aa    0x3e    addi s1,s1,1
    0x840170ac    0x40    lbu a0,0(s1)
    0x840170b0    0x44    bnez a0,ffffffff84017098 <str_to_long+0x2c>
    0x840170b2    0x46    mv a0,s0
    0x840170b4    0x48    j ffffffff840170d2 <str_to_long+0x66>
    0x840170b6    0x4a    lbu a5,1(s1)
    0x840170ba    0x4e    andi a5,a5,223
    0x840170be    0x52    li a4,88
    0x840170c2    0x56    bne a5,a4,ffffffff8401708e <str_to_long+0x22>
    0x840170c6    0x5a    addi s1,s1,2
    0x840170c8    0x5c    li s2,16
    0x840170ca    0x5e    j ffffffff84017088 <str_to_long+0x1c>
    0x840170cc    0x60    li a0,-1
    0x840170ce    0x62    j ffffffff840170d2 <str_to_long+0x66>
    0x840170d0    0x64    li a0,-1
    0x840170d2    0x66    ld ra,40(sp)          ; stack access
    0x840170d4    0x68    ld s0,32(sp)          ; stack access
    0x840170d6    0x6a    ld s1,24(sp)          ; stack access
    0x840170d8    0x6c    ld s2,16(sp)          ; stack access
    0x840170da    0x6e    ld s3,8(sp)           ; stack access
    0x840170dc    0x70    addi sp,sp,48
    0x840170de    0x72    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 72 nodes.

Section memset (103 of 271)
===========================

Deriving specifications
-----------------------

Section `memset` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `memset`:

    0x84016f9a     0x0    addi sp,sp,-16
    0x84016f9c     0x2    sd ra,8(sp)           ; stack access
    0x84016f9e     0x4    sd s0,0(sp)           ; stack access
    0x84016fa0     0x6    mv s0,a0
    0x84016fa2     0x8    or a5,a0,a2
    0x84016fa6     0xc    andi a5,a5,7
    0x84016fa8     0xe    or a5,a5,a1
    0x84016faa    0x10    bnez a5,ffffffff84016fbc <memset+0x22>
    0x84016fac    0x12    mv a1,a2
    0x84016fae    0x14    jal ra,ffffffff84015844 <memzero>
    0x84016fb2    0x18    mv a0,s0
    0x84016fb4    0x1a    ld ra,8(sp)           ; stack access
    0x84016fb6    0x1c    ld s0,0(sp)           ; stack access
    0x84016fb8    0x1e    addi sp,sp,16
    0x84016fba    0x20    ret
    0x84016fbc    0x22    add a4,a0,a2
    0x84016fc0    0x26    mv a5,a0
    0x84016fc2    0x28    beqz a2,ffffffff84016fb2 <memset+0x18>
    0x84016fc4    0x2a    sb a1,0(a5)
    0x84016fc8    0x2e    addi a5,a5,1
    0x84016fca    0x30    bne a4,a5,ffffffff84016fc4 <memset+0x2a>
    0x84016fce    0x34    j ffffffff84016fb2 <memset+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 35 nodes.

Section Arch_decodeInvocation (104 of 271)
==========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 14 instructions.

RVC_TFFFT____FFFT_TF.
RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

6 stack accesses found. Annotated code for `Arch_decodeInvocation`:

    0x840161a2     0x0    addi sp,sp,-64
    0x840161a4     0x2    sd ra,56(sp)          ; stack access
    0x840161a6     0x4    ld a7,0(a6)
    0x840161aa     0x8    sd a7,0(sp)           ; stack access
    0x840161ac     0xa    ld a7,8(a6)
    0x840161b0     0xe    sd a7,8(sp)           ; stack access
    0x840161b2    0x10    ld a6,16(a6)
    0x840161b6    0x14    sd a6,16(sp)          ; stack access
    0x840161b8    0x16    ld a7,64(sp)          ; stack access
    0x840161ba    0x18    mv a6,sp
    0x840161bc    0x1a    jal ra,ffffffff840158c4 <decodeRISCVMMUInvocation>
    0x840161c0    0x1e    ld ra,56(sp)          ; stack access
    0x840161c2    0x20    addi sp,sp,64
    0x840161c4    0x22    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 25 nodes.

Section setMRs_syscall_error (105 of 271)
=========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 94 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x84015644     0x0    addi sp,sp,-16
    0x84015646     0x2    sd ra,8(sp)           ; stack access
    0x84015648     0x4    auipc a5,0x8
    0x8401564c     0x8    addi a5,a5,-384 # ffffffff8401d4c8 <current_syscall_error>
    0x84015650     0xc    ld a5,48(a5)
    0x84015652     0xe    li a4,10
    0x84015654    0x10    bltu a4,a5,ffffffff84015734 <setMRs_syscall_error+0xf0>
    0x84015658    0x14    slli a3,a5,0x2
    0x8401565c    0x18    auipc a2,0x2
    0x84015660    0x1c    addi a2,a2,912 # ffffffff840179ec <__global_pointer$+0x80>
    0x84015664    0x20    add a3,a3,a2
    0x84015666    0x22    lw a4,0(a3)
    0x84015668    0x24    add a4,a4,a2
    0x8401566a    0x26    jr a4
    0x8401566c    0x28    auipc a4,0x8
    0x84015670    0x2c    addi a4,a4,-420 # ffffffff8401d4c8 <current_syscall_error>
    0x84015674    0x30    ld a4,0(a4)
    0x84015676    0x32    sd a4,88(a0)
    0x84015678    0x34    j ffffffff8401573a <setMRs_syscall_error+0xf6>
    0x8401567a    0x36    auipc a5,0x8
    0x8401567e    0x3a    addi a5,a5,-434 # ffffffff8401d4c8 <current_syscall_error>
    0x84015682    0x3e    ld a5,8(a5)
    0x84015684    0x40    sd a5,88(a0)
    0x84015686    0x42    li a5,1
    0x84015688    0x44    j ffffffff8401573a <setMRs_syscall_error+0xf6>
    0x8401568a    0x46    auipc a5,0x8
    0x8401568e    0x4a    addi a5,a5,-450 # ffffffff8401d4c8 <current_syscall_error>
    0x84015692    0x4e    ld a4,16(a5)
    0x84015694    0x50    sd a4,88(a0)
    0x84015696    0x52    ld a5,24(a5)
    0x84015698    0x54    sd a5,96(a0)
    0x8401569a    0x56    li a5,2
    0x8401569c    0x58    j ffffffff8401573a <setMRs_syscall_error+0xf6>
    0x8401569e    0x5a    auipc a5,0x8
    0x840156a2    0x5e    addi a5,a5,-470 # ffffffff8401d4c8 <current_syscall_error>
    0x840156a6    0x62    ld a5,40(a5)
    0x840156a8    0x64    snez a5,a5
    0x840156ac    0x68    sd a5,88(a0)
    0x840156ae    0x6a    auipc a5,0x8
    0x840156b2    0x6e    addi a5,a5,-510 # ffffffff8401d4b0 <current_lookup_fault>
    0x840156b6    0x72    ld a4,0(a5)
    0x840156b8    0x74    ld a2,8(a5)
    0x840156ba    0x76    andi a5,a4,3
    0x840156be    0x7a    addi a3,a5,1
    0x840156c2    0x7e    sd a3,96(a0)
    0x840156c4    0x80    li a3,1
    0x840156c6    0x82    beq a5,a3,ffffffff840156f2 <setMRs_syscall_error+0xae>
    0x840156ca    0x86    beqz a5,ffffffff84015718 <setMRs_syscall_error+0xd4>
    0x840156cc    0x88    li a3,2
    0x840156ce    0x8a    beq a5,a3,ffffffff840156fe <setMRs_syscall_error+0xba>
    0x840156d2    0x8e    li a3,3
    0x840156d4    0x90    bne a5,a3,ffffffff84015714 <setMRs_syscall_error+0xd0>
    0x840156d8    0x94    srli a5,a4,0x9
    0x840156dc    0x98    andi a5,a5,127
    0x840156e0    0x9c    sd a5,104(a0)
    0x840156e2    0x9e    sd a2,112(a0)
    0x840156e4    0xa0    beqz a1,ffffffff84015720 <setMRs_syscall_error+0xdc>
    0x840156e6    0xa2    srli a4,a4,0x2
    0x840156e8    0xa4    andi a4,a4,127
    0x840156ec    0xa8    sd a4,40(a1)
    0x840156ee    0xaa    li a5,5
    0x840156f0    0xac    j ffffffff8401571a <setMRs_syscall_error+0xd6>
    0x840156f2    0xae    srli a4,a4,0x2
    0x840156f4    0xb0    andi a4,a4,127
    0x840156f8    0xb4    sd a4,104(a0)
    0x840156fa    0xb6    li a5,3
    0x840156fc    0xb8    j ffffffff8401571a <setMRs_syscall_error+0xd6>
    0x840156fe    0xba    srli a5,a4,0x2
    0x84015702    0xbe    andi a5,a5,127
    0x84015706    0xc2    sd a5,104(a0)
    0x84015708    0xc4    srli a4,a4,0x9
    0x8401570a    0xc6    andi a4,a4,127
    0x8401570e    0xca    sd a4,112(a0)
    0x84015710    0xcc    li a5,4
    0x84015712    0xce    j ffffffff8401571a <setMRs_syscall_error+0xd6>
    0x84015714    0xd0    jal ra,ffffffff84010294 <halt>
    0x84015718    0xd4    li a5,2
    0x8401571a    0xd6    slli a5,a5,0x20
    0x8401571c    0xd8    srli a5,a5,0x20
    0x8401571e    0xda    j ffffffff8401573a <setMRs_syscall_error+0xf6>
    0x84015720    0xdc    li a5,4
    0x84015722    0xde    j ffffffff8401571a <setMRs_syscall_error+0xd6>
    0x84015724    0xe0    auipc a5,0x8
    0x84015728    0xe4    addi a5,a5,-604 # ffffffff8401d4c8 <current_syscall_error>
    0x8401572c    0xe8    ld a5,32(a5)
    0x8401572e    0xea    sd a5,88(a0)
    0x84015730    0xec    li a5,1
    0x84015732    0xee    j ffffffff8401573a <setMRs_syscall_error+0xf6>
    0x84015734    0xf0    jal ra,ffffffff84010294 <halt>
    0x84015738    0xf4    li a5,0
    0x8401573a    0xf6    mv a0,a5
    0x8401573c    0xf8    ld ra,8(sp)           ; stack access
    0x8401573e    0xfa    addi sp,sp,16
    0x84015740    0xfc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
94 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 135 nodes.

Section invokeTCB_Resume (106 of 271)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x840146a6    0x0    addi sp,sp,-16
    0x840146a8    0x2    sd ra,8(sp)           ; stack access
    0x840146aa    0x4    jal ra,ffffffff840138c0 <restart>
    0x840146ae    0x8    li a0,0
    0x840146b0    0xa    ld ra,8(sp)           ; stack access
    0x840146b2    0xc    addi sp,sp,16
    0x840146b4    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 11 nodes.

Section invokeTCB_Suspend (107 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x84014696    0x0    addi sp,sp,-16
    0x84014698    0x2    sd ra,8(sp)           ; stack access
    0x8401469a    0x4    jal ra,ffffffff84012dd6 <suspend>
    0x8401469e    0x8    li a0,0
    0x840146a0    0xa    ld ra,8(sp)           ; stack access
    0x840146a2    0xc    addi sp,sp,16
    0x840146a4    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section performInvocation_Endpoint (108 of 271)
===============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 18 instructions.

RVC_TFFFFT___FFT__TF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x8401429e     0x0    addi sp,sp,-16
    0x840142a0     0x2    sd ra,8(sp)           ; stack access
    0x840142a2     0x4    mv a7,a4
    0x840142a4     0x6    mv t1,a5
    0x840142a6     0x8    mv a6,a0
    0x840142a8     0xa    auipc a5,0x19
    0x840142ac     0xe    addi a5,a5,1520 # ffffffff8402d898 <ksCurThread>
    0x840142b0    0x12    ld a5,0(a5)
    0x840142b2    0x14    mv a4,a3
    0x840142b4    0x16    mv a3,a2
    0x840142b6    0x18    mv a2,a1
    0x840142b8    0x1a    mv a1,t1
    0x840142ba    0x1c    mv a0,a7
    0x840142bc    0x1e    jal ra,ffffffff84013f4a <sendIPC>
    0x840142c0    0x22    li a0,0
    0x840142c2    0x24    ld ra,8(sp)           ; stack access
    0x840142c4    0x26    addi sp,sp,16
    0x840142c6    0x28    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 23 nodes.

Section performInvocation_Reply (109 of 271)
============================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 13 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x84013f2a     0x0    addi sp,sp,-16
    0x84013f2c     0x2    sd ra,8(sp)           ; stack access
    0x84013f2e     0x4    mv a3,a2
    0x84013f30     0x6    mv a2,a1
    0x84013f32     0x8    mv a1,a0
    0x84013f34     0xa    auipc a5,0x1a
    0x84013f38     0xe    addi a5,a5,-1692 # ffffffff8402d898 <ksCurThread>
    0x84013f3c    0x12    ld a0,0(a5)
    0x84013f3e    0x14    jal ra,ffffffff84013e74 <doReplyTransfer>
    0x84013f42    0x18    li a0,0
    0x84013f44    0x1a    ld ra,8(sp)           ; stack access
    0x84013f46    0x1c    addi sp,sp,16
    0x84013f48    0x1e    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 18 nodes.

Section lookupExtraCaps (110 of 271)
====================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 56 instructions.

RVC_FFFFT_________FT.

Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84013b74     0x0    beqz a1,ffffffff84013bda <lookupExtraCaps+0x66>
    0x84013b76     0x2    addi sp,sp,-80
    0x84013b78     0x4    sd ra,72(sp)          ; stack access
    0x84013b7a     0x6    sd s0,64(sp)          ; stack access
    0x84013b7c     0x8    sd s1,56(sp)          ; stack access
    0x84013b7e     0xa    sd s2,48(sp)          ; stack access
    0x84013b80     0xc    sd s3,40(sp)          ; stack access
    0x84013b82     0xe    sd s4,32(sp)          ; stack access
    0x84013b84    0x10    sd s5,24(sp)          ; stack access
    0x84013b86    0x12    srli a2,a2,0x7
    0x84013b88    0x14    andi s4,a2,3
    0x84013b8c    0x18    beqz s4,ffffffff84013bc6 <lookupExtraCaps+0x52>
    0x84013b90    0x1c    mv s5,a0
    0x84013b92    0x1e    addi s0,a1,976
    0x84013b96    0x22    auipc s2,0xa
    0x84013b9a    0x26    addi s2,s2,-1686 # ffffffff8401d500 <current_extra_caps>
    0x84013b9e    0x2a    li s1,0
    0x84013ba0    0x2c    ld s3,0(s0)
    0x84013ba4    0x30    mv a1,s3
    0x84013ba6    0x32    mv a0,s5
    0x84013ba8    0x34    jal ra,ffffffff8401116c <lookupSlot>
    0x84013bac    0x38    sd a1,8(sp)           ; stack access
    0x84013bae    0x3a    bnez a0,ffffffff84013be6 <lookupExtraCaps+0x72>
    0x84013bb0    0x3c    ld a5,8(sp)           ; stack access
    0x84013bb2    0x3e    sd a5,0(s2)
    0x84013bb6    0x42    addi s1,s1,1
    0x84013bb8    0x44    addi s0,s0,8
    0x84013bba    0x46    addi s2,s2,8
    0x84013bbc    0x48    bne s1,s4,ffffffff84013ba0 <lookupExtraCaps+0x2c>
    0x84013bc0    0x4c    li a5,2
    0x84013bc2    0x4e    bltu a5,s4,ffffffff84013bf6 <lookupExtraCaps+0x82>
    0x84013bc6    0x52    slli s4,s4,0x3
    0x84013bc8    0x54    auipc a5,0xa
    0x84013bcc    0x58    addi a5,a5,-1736 # ffffffff8401d500 <current_extra_caps>
    0x84013bd0    0x5c    add s4,s4,a5
    0x84013bd2    0x5e    sd zero,0(s4)
    0x84013bd6    0x62    li a0,0
    0x84013bd8    0x64    j ffffffff84013bf6 <lookupExtraCaps+0x82>
    0x84013bda    0x66    auipc a5,0xa
    0x84013bde    0x6a    sd zero,-1754(a5) # ffffffff8401d500 <current_extra_caps>
    0x84013be2    0x6e    li a0,0
    0x84013be4    0x70    ret
    0x84013be6    0x72    auipc a5,0x8
    0x84013bea    0x76    addi a5,a5,1178 # ffffffff8401c080 <current_fault>
    0x84013bee    0x7a    li a4,1
    0x84013bf0    0x7c    sd a4,0(a5)
    0x84013bf2    0x7e    sd s3,8(a5)
    0x84013bf6    0x82    ld ra,72(sp)          ; stack access
    0x84013bf8    0x84    ld s0,64(sp)          ; stack access
    0x84013bfa    0x86    ld s1,56(sp)          ; stack access
    0x84013bfc    0x88    ld s2,48(sp)          ; stack access
    0x84013bfe    0x8a    ld s3,40(sp)          ; stack access
    0x84013c00    0x8c    ld s4,32(sp)          ; stack access
    0x84013c02    0x8e    ld s5,24(sp)          ; stack access
    0x84013c04    0x90    addi sp,sp,80
    0x84013c06    0x92    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 91 nodes.

Section deleteCallerCap (111 of 271)
====================================

Deriving specifications
-----------------------

Section `deleteCallerCap` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteCallerCap`:

    0x84013b5e     0x0    addi sp,sp,-16
    0x84013b60     0x2    sd ra,8(sp)           ; stack access
    0x84013b62     0x4    andi a0,a0,-1024
    0x84013b66     0x8    addi a0,a0,96
    0x84013b6a     0xc    jal ra,ffffffff8401374e <cteDeleteOne>
    0x84013b6e    0x10    ld ra,8(sp)           ; stack access
    0x84013b70    0x12    addi sp,sp,16
    0x84013b72    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteCallerCap` has 12 nodes.

Section performInvocation_Notification (112 of 271)
===================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x84013af4    0x0    addi sp,sp,-16
    0x84013af6    0x2    sd ra,8(sp)           ; stack access
    0x84013af8    0x4    jal ra,ffffffff84013900 <sendSignal>
    0x84013afc    0x8    li a0,0
    0x84013afe    0xa    ld ra,8(sp)           ; stack access
    0x84013b00    0xc    addi sp,sp,16
    0x84013b02    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section deletingIRQHandler (113 of 271)
=======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletingIRQHandler`:

    0x840138a2     0x0    addi sp,sp,-16
    0x840138a4     0x2    sd ra,8(sp)           ; stack access
    0x840138a6     0x4    slli a0,a0,0x20
    0x840138a8     0x6    srli a0,a0,0x20
    0x840138aa     0x8    slli a0,a0,0x5
    0x840138ac     0xa    auipc a5,0x1a
    0x840138b0     0xe    addi a5,a5,-812 # ffffffff8402d580 <intStateIRQNode>
    0x840138b4    0x12    add a0,a0,a5
    0x840138b6    0x14    jal ra,ffffffff8401374e <cteDeleteOne>
    0x840138ba    0x18    ld ra,8(sp)           ; stack access
    0x840138bc    0x1a    addi sp,sp,16
    0x840138be    0x1c    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 16 nodes.

Section invokeIRQHandler_ClearIRQHandler (114 of 271)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeIRQHandler_ClearIRQHandler`:

    0x840137be     0x0    addi sp,sp,-16
    0x840137c0     0x2    sd ra,8(sp)           ; stack access
    0x840137c2     0x4    slli a0,a0,0x20
    0x840137c4     0x6    srli a0,a0,0x20
    0x840137c6     0x8    slli a0,a0,0x5
    0x840137c8     0xa    auipc a5,0x1a
    0x840137cc     0xe    addi a5,a5,-584 # ffffffff8402d580 <intStateIRQNode>
    0x840137d0    0x12    add a0,a0,a5
    0x840137d2    0x14    jal ra,ffffffff8401374e <cteDeleteOne>
    0x840137d6    0x18    ld ra,8(sp)           ; stack access
    0x840137d8    0x1a    addi sp,sp,16
    0x840137da    0x1c    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 16 nodes.

Section invokeCNodeRevoke (115 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeRevoke`:

    0x8401329e    0x0    addi sp,sp,-16
    0x840132a0    0x2    sd ra,8(sp)           ; stack access
    0x840132a2    0x4    jal ra,ffffffff8401321a <cteRevoke>
    0x840132a6    0x8    ld ra,8(sp)           ; stack access
    0x840132a8    0xa    addi sp,sp,16
    0x840132aa    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 10 nodes.

Section invokeCNodeDelete (116 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x8401320a    0x0    addi sp,sp,-16
    0x8401320c    0x2    sd ra,8(sp)           ; stack access
    0x8401320e    0x4    li a1,1
    0x84013210    0x6    jal ra,ffffffff840131cc <cteDelete>
    0x84013214    0xa    ld ra,8(sp)           ; stack access
    0x84013216    0xc    addi sp,sp,16
    0x84013218    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 11 nodes.

Section invokeCNodeCancelBadgedSends (117 of 271)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 17 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x84012c5c     0x0    addi sp,sp,-32
    0x84012c5e     0x2    sd ra,24(sp)          ; stack access
    0x84012c60     0x4    sd a0,0(sp)           ; stack access
    0x84012c62     0x6    beqz a1,ffffffff84012c7c <invokeCNodeCancelBadgedSends+0x20>
    0x84012c64     0x8    mv a5,a0
    0x84012c66     0xa    slli a0,a0,0x19
    0x84012c68     0xc    srli a0,a0,0x19
    0x84012c6a     0xe    slli a4,a5,0x19
    0x84012c6e    0x12    bgez a4,ffffffff84012c78 <invokeCNodeCancelBadgedSends+0x1c>
    0x84012c72    0x16    li a5,-1
    0x84012c74    0x18    slli a5,a5,0x27
    0x84012c76    0x1a    or a0,a0,a5
    0x84012c78    0x1c    jal ra,ffffffff84012b70 <cancelBadgedSends>
    0x84012c7c    0x20    li a0,0
    0x84012c7e    0x22    ld ra,24(sp)          ; stack access
    0x84012c80    0x24    addi sp,sp,32
    0x84012c82    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 26 nodes.

Section scheduleChooseNewThread (118 of 271)
============================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 37 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleChooseNewThread`:

    0x840128e2     0x0    addi sp,sp,-16
    0x840128e4     0x2    sd ra,8(sp)           ; stack access
    0x840128e6     0x4    auipc a5,0x1b
    0x840128ea     0x8    addi a5,a5,-950 # ffffffff8402d530 <ksDomainTime>
    0x840128ee     0xc    ld a5,0(a5)
    0x840128f0     0xe    beqz a5,ffffffff840128fc <scheduleChooseNewThread+0x1a>
    0x840128f2    0x10    jal ra,ffffffff84012864 <chooseThread>
    0x840128f6    0x14    ld ra,8(sp)           ; stack access
    0x840128f8    0x16    addi sp,sp,16
    0x840128fa    0x18    ret
    0x840128fc    0x1a    auipc a5,0x1b
    0x84012900    0x1e    addi a5,a5,-92 # ffffffff8402d8a0 <ksDomScheduleIdx>
    0x84012904    0x22    ld a5,0(a5)
    0x84012906    0x24    addi a5,a5,1
    0x84012908    0x26    li a4,2
    0x8401290a    0x28    bltu a4,a5,ffffffff8401294c <scheduleChooseNewThread+0x6a>
    0x8401290e    0x2c    auipc a4,0x1b
    0x84012912    0x30    sd a5,-110(a4) # ffffffff8402d8a0 <ksDomScheduleIdx>
    0x84012916    0x34    auipc a5,0x1b
    0x8401291a    0x38    sd zero,-262(a5) # ffffffff8402d810 <ksWorkUnitsCompleted>
    0x8401291e    0x3c    auipc a5,0x1b
    0x84012922    0x40    addi a5,a5,-126 # ffffffff8402d8a0 <ksDomScheduleIdx>
    0x84012926    0x44    ld a5,0(a5)
    0x84012928    0x46    slli a4,a5,0x4
    0x8401292c    0x4a    auipc a5,0x5
    0x84012930    0x4e    addi a5,a5,524 # ffffffff84017b38 <fault_messages>
    0x84012934    0x52    add a5,a5,a4
    0x84012936    0x54    ld a4,192(a5)
    0x84012938    0x56    auipc a3,0x1b
    0x8401293c    0x5a    sd a4,-824(a3) # ffffffff8402d600 <ksCurDomain>
    0x84012940    0x5e    ld a5,200(a5)
    0x84012942    0x60    auipc a4,0x1b
    0x84012946    0x64    sd a5,-1042(a4) # ffffffff8402d530 <ksDomainTime>
    0x8401294a    0x68    j ffffffff840128f2 <scheduleChooseNewThread+0x10>
    0x8401294c    0x6a    auipc a5,0x1b
    0x84012950    0x6e    sd zero,-172(a5) # ffffffff8402d8a0 <ksDomScheduleIdx>
    0x84012954    0x72    j ffffffff84012916 <scheduleChooseNewThread+0x34>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 55 nodes.

Section receiveSignal (119 of 271)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 89 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `receiveSignal`:

    0x840124d4     0x0    addi sp,sp,-48
    0x840124d6     0x2    sd ra,40(sp)          ; stack access
    0x840124d8     0x4    sd s0,32(sp)          ; stack access
    0x840124da     0x6    sd s1,24(sp)          ; stack access
    0x840124dc     0x8    sd s2,16(sp)          ; stack access
    0x840124de     0xa    sd a1,0(sp)           ; stack access
    0x840124e0     0xc    sd a2,8(sp)           ; stack access
    0x840124e2     0xe    slli a5,a1,0x19
    0x840124e6    0x12    srli a5,a5,0x19
    0x840124e8    0x14    slli a4,a1,0x19
    0x840124ec    0x18    bgez a4,ffffffff840124f6 <receiveSignal+0x22>
    0x840124f0    0x1c    li a4,-1
    0x840124f2    0x1e    slli a4,a4,0x27
    0x840124f4    0x20    or a5,a5,a4
    0x840124f6    0x22    mv s1,a5
    0x840124f8    0x24    ld a4,0(a5)
    0x840124fa    0x26    andi a4,a4,3
    0x840124fc    0x28    li a2,1
    0x840124fe    0x2a    bgeu a2,a4,ffffffff84012514 <receiveSignal+0x40>
    0x84012502    0x2e    li a5,2
    0x84012504    0x30    beq a4,a5,ffffffff840125ac <receiveSignal+0xd8>
    0x84012508    0x34    ld ra,40(sp)          ; stack access
    0x8401250a    0x36    ld s0,32(sp)          ; stack access
    0x8401250c    0x38    ld s1,24(sp)          ; stack access
    0x8401250e    0x3a    ld s2,16(sp)          ; stack access
    0x84012510    0x3c    addi sp,sp,48
    0x84012512    0x3e    ret
    0x84012514    0x40    beqz a3,ffffffff840125a6 <receiveSignal+0xd2>
    0x84012516    0x42    mv s0,a0
    0x84012518    0x44    ld a4,280(a0)
    0x8401251c    0x48    li s2,-1
    0x8401251e    0x4a    slli a3,s2,0x27
    0x84012522    0x4e    and a4,a4,a3
    0x84012524    0x50    lui a3,0xe0000
    0x84012528    0x54    srli a3,a3,0x19
    0x8401252a    0x56    and a5,a5,a3
    0x8401252c    0x58    or a5,a5,a4
    0x8401252e    0x5a    ori a5,a5,6
    0x84012532    0x5e    sd a5,280(a0)
    0x84012536    0x62    jal ra,ffffffff840123cc <scheduleTCB>
    0x8401253a    0x66    ld a4,8(s1)
    0x8401253c    0x68    srli a5,s2,0x19
    0x84012540    0x6c    and a5,a5,a4
    0x84012542    0x6e    slli a3,a4,0x19
    0x84012546    0x72    bgez a3,ffffffff8401255c <receiveSignal+0x88>
    0x8401254a    0x76    li a4,-1
    0x8401254c    0x78    slli a4,a4,0x27
    0x8401254e    0x7a    or a5,a5,a4
    0x84012550    0x7c    ld a3,0(s1)
    0x84012552    0x7e    srli a4,a3,0x19
    0x84012556    0x82    bgez a3,ffffffff84012570 <receiveSignal+0x9c>
    0x8401255a    0x86    j ffffffff84012566 <receiveSignal+0x92>
    0x8401255c    0x88    ld a3,0(s1)
    0x8401255e    0x8a    srli a4,a3,0x19
    0x84012562    0x8e    bgez a3,ffffffff8401256c <receiveSignal+0x98>
    0x84012566    0x92    li a3,-1
    0x84012568    0x94    slli a3,a3,0x27
    0x8401256a    0x96    or a4,a4,a3
    0x8401256c    0x98    mv a3,s0
    0x8401256e    0x9a    beqz a5,ffffffff84012576 <receiveSignal+0xa2>
    0x84012570    0x9c    mv a3,a5
    0x84012572    0x9e    sd s0,408(a4)
    0x84012576    0xa2    sd a4,416(s0)
    0x8401257a    0xa6    sd zero,408(s0)
    0x8401257e    0xaa    ld a0,0(s1)
    0x84012580    0xac    ld a5,8(s1)
    0x84012582    0xae    li a4,-1
    0x84012584    0xb0    slli a2,a4,0x27
    0x84012588    0xb4    and a5,a5,a2
    0x8401258a    0xb6    srli a4,a4,0x19
    0x8401258c    0xb8    and a4,a4,a3
    0x8401258e    0xba    or a5,a5,a4
    0x84012590    0xbc    sd a5,8(s1)
    0x84012592    0xbe    lui a5,0x2000
    0x84012596    0xc2    addi a5,a5,-4
    0x84012598    0xc4    and a0,a0,a5
    0x8401259a    0xc6    slli s0,s0,0x19
    0x8401259c    0xc8    or a0,a0,s0
    0x8401259e    0xca    ori a0,a0,1
    0x840125a2    0xce    sd a0,0(s1)
    0x840125a4    0xd0    j ffffffff84012508 <receiveSignal+0x34>
    0x840125a6    0xd2    sd zero,72(a0)
    0x840125aa    0xd6    j ffffffff84012508 <receiveSignal+0x34>
    0x840125ac    0xd8    ld a5,16(s1)
    0x840125ae    0xda    sd a5,72(a0)
    0x840125b0    0xdc    ld a5,0(s1)
    0x840125b2    0xde    andi a5,a5,-4
    0x840125b4    0xe0    sd a5,0(s1)
    0x840125b6    0xe2    j ffffffff84012508 <receiveSignal+0x34>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
89 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 135 nodes.

Section handleDoubleFault (120 of 271)
======================================

Deriving specifications
-----------------------

Section `handleDoubleFault` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleDoubleFault`:

    0x84012420    0x0    addi sp,sp,-32
    0x84012422    0x2    sd ra,24(sp)          ; stack access
    0x84012424    0x4    li a1,0
    0x84012426    0x6    jal ra,ffffffff84012404 <setThreadState>
    0x8401242a    0xa    ld ra,24(sp)          ; stack access
    0x8401242c    0xc    addi sp,sp,32
    0x8401242e    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleDoubleFault` has 11 nodes.

Section setThreadState (121 of 271)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setThreadState`:

    0x84012404     0x0    addi sp,sp,-16
    0x84012406     0x2    sd ra,8(sp)           ; stack access
    0x84012408     0x4    ld a5,280(a0)
    0x8401240c     0x8    andi a5,a5,-16
    0x8401240e     0xa    andi a1,a1,15
    0x84012410     0xc    or a5,a5,a1
    0x84012412     0xe    sd a5,280(a0)
    0x84012416    0x12    jal ra,ffffffff840123cc <scheduleTCB>
    0x8401241a    0x16    ld ra,8(sp)           ; stack access
    0x8401241c    0x18    addi sp,sp,16
    0x8401241e    0x1a    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 17 nodes.

Section scheduleTCB (122 of 271)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleTCB`:

    0x840123cc     0x0    auipc a5,0x1b
    0x840123d0     0x4    addi a5,a5,1228 # ffffffff8402d898 <ksCurThread>
    0x840123d4     0x8    ld a5,0(a5)
    0x840123d6     0xa    beq a5,a0,ffffffff840123dc <scheduleTCB+0x10>
    0x840123da     0xe    ret
    0x840123dc    0x10    auipc a5,0xb
    0x840123e0    0x14    addi a5,a5,228 # ffffffff8401d4c0 <ksSchedulerAction>
    0x840123e4    0x18    ld a5,0(a5)
    0x840123e6    0x1a    bnez a5,ffffffff840123da <scheduleTCB+0xe>
    0x840123e8    0x1c    ld a5,280(a0)
    0x840123ec    0x20    andi a5,a5,15
    0x840123ee    0x22    addi a5,a5,-1
    0x840123f0    0x24    li a4,1
    0x840123f2    0x26    bgeu a4,a5,ffffffff840123da <scheduleTCB+0xe>
    0x840123f6    0x2a    addi sp,sp,-16
    0x840123f8    0x2c    sd ra,8(sp)           ; stack access
    0x840123fa    0x2e    jal ra,ffffffff84012398 <rescheduleRequired>
    0x840123fe    0x32    ld ra,8(sp)           ; stack access
    0x84012400    0x34    addi sp,sp,16
    0x84012402    0x36    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 34 nodes.

Section rescheduleRequired (123 of 271)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 18 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `rescheduleRequired`:

    0x84012398     0x0    auipc a5,0xb
    0x8401239c     0x4    addi a5,a5,296 # ffffffff8401d4c0 <ksSchedulerAction>
    0x840123a0     0x8    ld a0,0(a5)
    0x840123a2     0xa    li a5,1
    0x840123a4     0xc    bltu a5,a0,ffffffff840123b4 <rescheduleRequired+0x1c>
    0x840123a8    0x10    li a5,1
    0x840123aa    0x12    auipc a4,0xb
    0x840123ae    0x16    sd a5,278(a4) # ffffffff8401d4c0 <ksSchedulerAction>
    0x840123b2    0x1a    ret
    0x840123b4    0x1c    addi sp,sp,-16
    0x840123b6    0x1e    sd ra,8(sp)           ; stack access
    0x840123b8    0x20    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x840123bc    0x24    li a5,1
    0x840123be    0x26    auipc a4,0xb
    0x840123c2    0x2a    sd a5,258(a4) # ffffffff8401d4c0 <ksSchedulerAction>
    0x840123c6    0x2e    ld ra,8(sp)           ; stack access
    0x840123c8    0x30    addi sp,sp,16
    0x840123ca    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 28 nodes.

Section slotCapLongRunningDelete (124 of 271)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x84011ffc     0x0    addi sp,sp,-16
    0x84011ffe     0x2    sd ra,8(sp)           ; stack access
    0x84012000     0x4    sd s0,0(sp)           ; stack access
    0x84012002     0x6    ld s0,0(a0)
    0x84012004     0x8    srli s0,s0,0x3b
    0x84012006     0xa    beqz s0,ffffffff84012020 <slotCapLongRunningDelete+0x24>
    0x84012008     0xc    jal ra,ffffffff84011fa4 <isFinalCapability>
    0x8401200c    0x10    beqz a0,ffffffff8401202a <slotCapLongRunningDelete+0x2e>
    0x8401200e    0x12    li a5,12
    0x84012010    0x14    beq s0,a5,ffffffff8401202e <slotCapLongRunningDelete+0x32>
    0x84012014    0x18    li a5,18
    0x84012016    0x1a    beq s0,a5,ffffffff84012032 <slotCapLongRunningDelete+0x36>
    0x8401201a    0x1e    addi s0,s0,-10
    0x8401201c    0x20    seqz s0,s0
    0x84012020    0x24    mv a0,s0
    0x84012022    0x26    ld ra,8(sp)           ; stack access
    0x84012024    0x28    ld s0,0(sp)           ; stack access
    0x84012026    0x2a    addi sp,sp,16
    0x84012028    0x2c    ret
    0x8401202a    0x2e    mv s0,a0
    0x8401202c    0x30    j ffffffff84012020 <slotCapLongRunningDelete+0x24>
    0x8401202e    0x32    li s0,1
    0x84012030    0x34    j ffffffff84012020 <slotCapLongRunningDelete+0x24>
    0x84012032    0x36    li s0,1
    0x84012034    0x38    j ffffffff84012020 <slotCapLongRunningDelete+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 40 nodes.

Section isFinalCapability (125 of 271)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 38 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `isFinalCapability`:

    0x84011fa4     0x0    addi sp,sp,-32
    0x84011fa6     0x2    sd ra,24(sp)          ; stack access
    0x84011fa8     0x4    sd s0,16(sp)          ; stack access
    0x84011faa     0x6    sd s1,8(sp)           ; stack access
    0x84011fac     0x8    mv s0,a0
    0x84011fae     0xa    ld a5,16(a0)
    0x84011fb0     0xc    ld s1,24(a0)
    0x84011fb2     0xe    beqz a5,ffffffff84011fc4 <isFinalCapability+0x20>
    0x84011fb4    0x10    ld a2,0(a0)
    0x84011fb6    0x12    ld a3,8(a0)
    0x84011fb8    0x14    ld a0,0(a5)
    0x84011fba    0x16    ld a1,8(a5)
    0x84011fbc    0x18    jal ra,ffffffff84011f4c <sameObjectAs>
    0x84011fc0    0x1c    li a4,0
    0x84011fc2    0x1e    bnez a0,ffffffff84011ff0 <isFinalCapability+0x4c>
    0x84011fc4    0x20    lui a5,0xf8000
    0x84011fc8    0x24    srli a5,a5,0x19
    0x84011fca    0x26    and a5,a5,s1
    0x84011fcc    0x28    slli a4,s1,0x19
    0x84011fd0    0x2c    bgez a4,ffffffff84011fec <isFinalCapability+0x48>
    0x84011fd4    0x30    li a4,-1
    0x84011fd6    0x32    slli a4,a4,0x27
    0x84011fd8    0x34    or a5,a5,a4
    0x84011fda    0x36    ld a2,0(a5)
    0x84011fdc    0x38    ld a3,8(a5)
    0x84011fde    0x3a    ld a0,0(s0)
    0x84011fe0    0x3c    ld a1,8(s0)
    0x84011fe2    0x3e    jal ra,ffffffff84011f4c <sameObjectAs>
    0x84011fe6    0x42    seqz a4,a0
    0x84011fea    0x46    j ffffffff84011ff0 <isFinalCapability+0x4c>
    0x84011fec    0x48    li a4,1
    0x84011fee    0x4a    bnez a5,ffffffff84011fda <isFinalCapability+0x36>
    0x84011ff0    0x4c    mv a0,a4
    0x84011ff2    0x4e    ld ra,24(sp)          ; stack access
    0x84011ff4    0x50    ld s0,16(sp)          ; stack access
    0x84011ff6    0x52    ld s1,8(sp)           ; stack access
    0x84011ff8    0x54    addi sp,sp,32
    0x84011ffa    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 65 nodes.

Section ensureNoChildren (126 of 271)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 26 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `ensureNoChildren`:

    0x84011e8a     0x0    ld a5,24(a0)
    0x84011e8c     0x2    lui a1,0xf8000
    0x84011e90     0x6    srli a1,a1,0x19
    0x84011e92     0x8    and a1,a1,a5
    0x84011e94     0xa    slli a4,a5,0x19
    0x84011e98     0xe    bgez a4,ffffffff84011eb6 <ensureNoChildren+0x2c>
    0x84011e9c    0x12    li a5,-1
    0x84011e9e    0x14    slli a5,a5,0x27
    0x84011ea0    0x16    or a1,a1,a5
    0x84011ea2    0x18    addi sp,sp,-16
    0x84011ea4    0x1a    sd ra,8(sp)           ; stack access
    0x84011ea6    0x1c    jal ra,ffffffff84011e12 <isMDBParentOf>
    0x84011eaa    0x20    mv a1,a0
    0x84011eac    0x22    bnez a0,ffffffff84011ebc <ensureNoChildren+0x32>
    0x84011eae    0x24    mv a0,a1
    0x84011eb0    0x26    ld ra,8(sp)           ; stack access
    0x84011eb2    0x28    addi sp,sp,16
    0x84011eb4    0x2a    ret
    0x84011eb6    0x2c    bnez a1,ffffffff84011ea2 <ensureNoChildren+0x18>
    0x84011eb8    0x2e    mv a0,a1
    0x84011eba    0x30    ret
    0x84011ebc    0x32    li a5,9
    0x84011ebe    0x34    auipc a4,0xb
    0x84011ec2    0x38    sd a5,1594(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84011ec6    0x3c    li a1,3
    0x84011ec8    0x3e    j ffffffff84011eae <ensureNoChildren+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 39 nodes.

Section isMDBParentOf (127 of 271)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isMDBParentOf`:

    0x84011e12     0x0    addi sp,sp,-32
    0x84011e14     0x2    sd ra,24(sp)          ; stack access
    0x84011e16     0x4    sd s0,16(sp)          ; stack access
    0x84011e18     0x6    sd s1,8(sp)           ; stack access
    0x84011e1a     0x8    sd s2,0(sp)           ; stack access
    0x84011e1c     0xa    ld s0,24(a0)
    0x84011e1e     0xc    srli s0,s0,0x1
    0x84011e20     0xe    andi s0,s0,1
    0x84011e22    0x10    beqz s0,ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e24    0x12    mv s2,a1
    0x84011e26    0x14    mv s1,a0
    0x84011e28    0x16    ld a2,0(a1)
    0x84011e2a    0x18    ld a3,8(a1)
    0x84011e2c    0x1a    ld a0,0(a0)
    0x84011e2e    0x1c    ld a1,8(s1)
    0x84011e30    0x1e    jal ra,ffffffff840119b2 <sameRegionAs>
    0x84011e34    0x22    beqz a0,ffffffff84011e7a <isMDBParentOf+0x68>
    0x84011e36    0x24    ld a5,0(s1)
    0x84011e38    0x26    srli a5,a5,0x3b
    0x84011e3a    0x28    li a4,4
    0x84011e3c    0x2a    beq a5,a4,ffffffff84011e60 <isMDBParentOf+0x4e>
    0x84011e40    0x2e    li a4,6
    0x84011e42    0x30    bne a5,a4,ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e46    0x34    ld a5,8(s1)
    0x84011e48    0x36    beqz a5,ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e4a    0x38    ld a4,8(s2)
    0x84011e4e    0x3c    li s0,0
    0x84011e50    0x3e    bne a5,a4,ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e54    0x42    ld s0,24(s2)
    0x84011e58    0x46    xori s0,s0,1
    0x84011e5c    0x4a    andi s0,s0,1
    0x84011e5e    0x4c    j ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e60    0x4e    ld a5,8(s1)
    0x84011e62    0x50    beqz a5,ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e64    0x52    ld a4,8(s2)
    0x84011e68    0x56    li s0,0
    0x84011e6a    0x58    bne a4,a5,ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e6e    0x5c    ld s0,24(s2)
    0x84011e72    0x60    xori s0,s0,1
    0x84011e76    0x64    andi s0,s0,1
    0x84011e78    0x66    j ffffffff84011e7c <isMDBParentOf+0x6a>
    0x84011e7a    0x68    mv s0,a0
    0x84011e7c    0x6a    mv a0,s0
    0x84011e7e    0x6c    ld ra,24(sp)          ; stack access
    0x84011e80    0x6e    ld s0,16(sp)          ; stack access
    0x84011e82    0x70    ld s1,8(sp)           ; stack access
    0x84011e84    0x72    ld s2,0(sp)           ; stack access
    0x84011e86    0x74    addi sp,sp,32
    0x84011e88    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 87 nodes.

Section completeSignal (128 of 271)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 14 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `completeSignal`:

    0x840118c6     0x0    beqz a1,ffffffff840118de <completeSignal+0x18>
    0x840118c8     0x2    ld a5,0(a0)
    0x840118ca     0x4    andi a5,a5,3
    0x840118cc     0x6    li a4,2
    0x840118ce     0x8    bne a5,a4,ffffffff840118de <completeSignal+0x18>
    0x840118d2     0xc    ld a5,16(a0)
    0x840118d4     0xe    sd a5,72(a1)
    0x840118d6    0x10    ld a5,0(a0)
    0x840118d8    0x12    andi a5,a5,-4
    0x840118da    0x14    sd a5,0(a0)
    0x840118dc    0x16    ret
    0x840118de    0x18    addi sp,sp,-16
    0x840118e0    0x1a    sd ra,8(sp)           ; stack access
    0x840118e2    0x1c    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 26 nodes.

Section emptySlot (129 of 271)
==============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 54 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `emptySlot`:

    0x84011846     0x0    addi sp,sp,-32
    0x84011848     0x2    sd ra,24(sp)          ; stack access
    0x8401184a     0x4    sd a1,0(sp)           ; stack access
    0x8401184c     0x6    sd a2,8(sp)           ; stack access
    0x8401184e     0x8    ld a5,0(a0)
    0x84011850     0xa    srli a5,a5,0x3b
    0x84011852     0xc    beqz a5,ffffffff840118b0 <emptySlot+0x6a>
    0x84011854     0xe    ld a3,16(a0)
    0x84011856    0x10    ld a4,24(a0)
    0x84011858    0x12    lui a5,0xf8000
    0x8401185c    0x16    srli a5,a5,0x19
    0x8401185e    0x18    and a5,a5,a4
    0x84011860    0x1a    slli a2,a4,0x19
    0x84011864    0x1e    bgez a2,ffffffff840118b6 <emptySlot+0x70>
    0x84011868    0x22    li a2,-1
    0x8401186a    0x24    slli a2,a2,0x27
    0x8401186c    0x26    or a5,a5,a2
    0x8401186e    0x28    beqz a3,ffffffff84011888 <emptySlot+0x42>
    0x84011870    0x2a    ld a2,24(a3)
    0x84011872    0x2c    li a1,-1
    0x84011874    0x2e    slli a1,a1,0x27
    0x84011876    0x30    addi a1,a1,3
    0x84011878    0x32    and a2,a2,a1
    0x8401187a    0x34    lui a1,0xf8000
    0x8401187e    0x38    srli a1,a1,0x19
    0x84011880    0x3a    and a1,a1,a5
    0x84011882    0x3c    or a2,a2,a1
    0x84011884    0x3e    sd a2,24(a3)
    0x84011886    0x40    beqz a5,ffffffff84011896 <emptySlot+0x50>
    0x84011888    0x42    sd a3,16(a5)
    0x8401188a    0x44    ld a3,24(a5)
    0x8401188c    0x46    or a4,a4,a3
    0x8401188e    0x48    andi a4,a4,1
    0x84011890    0x4a    andi a3,a3,-2
    0x84011892    0x4c    or a4,a4,a3
    0x84011894    0x4e    sd a4,24(a5)
    0x84011896    0x50    sd zero,0(a0)
    0x8401189a    0x54    sd zero,8(a0)
    0x8401189e    0x58    sd zero,16(a0)
    0x840118a2    0x5c    sd zero,24(a0)
    0x840118a6    0x60    ld a5,0(sp)           ; stack access
    0x840118a8    0x62    srli a5,a5,0x3b
    0x840118aa    0x64    li a4,16
    0x840118ac    0x66    beq a5,a4,ffffffff840118ba <emptySlot+0x74>
    0x840118b0    0x6a    ld ra,24(sp)          ; stack access
    0x840118b2    0x6c    addi sp,sp,32
    0x840118b4    0x6e    ret
    0x840118b6    0x70    beqz a3,ffffffff84011886 <emptySlot+0x40>
    0x840118b8    0x72    j ffffffff84011870 <emptySlot+0x2a>
    0x840118ba    0x74    ld a0,8(sp)           ; stack access
    0x840118bc    0x76    slli a0,a0,0x34
    0x840118be    0x78    srli a0,a0,0x34
    0x840118c0    0x7a    jal ra,ffffffff84011834 <deletedIRQHandler>
    0x840118c4    0x7e    j ffffffff840118b0 <emptySlot+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 86 nodes.

Section deletedIRQHandler (130 of 271)
======================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletedIRQHandler`:

    0x84011834     0x0    addi sp,sp,-16
    0x84011836     0x2    sd ra,8(sp)           ; stack access
    0x84011838     0x4    mv a1,a0
    0x8401183a     0x6    li a0,0
    0x8401183c     0x8    jal ra,ffffffff840117d4 <setIRQState>
    0x84011840     0xc    ld ra,8(sp)           ; stack access
    0x84011842     0xe    addi sp,sp,16
    0x84011844    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 12 nodes.

Section setIRQState (131 of 271)
================================

Deriving specifications
-----------------------

Section `setIRQState` consists of 14 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setIRQState`:

    0x840117d4     0x0    addi sp,sp,-16
    0x840117d6     0x2    sd ra,8(sp)           ; stack access
    0x840117d8     0x4    slli a5,a1,0x20
    0x840117dc     0x8    srli a5,a5,0x20
    0x840117de     0xa    slli a4,a5,0x3
    0x840117e2     0xe    auipc a5,0xc
    0x840117e6    0x12    addi a5,a5,-714 # ffffffff8401d518 <intStateIRQTable>
    0x840117ea    0x16    add a5,a5,a4
    0x840117ec    0x18    sd a0,0(a5)
    0x840117ee    0x1a    seqz a0,a0
    0x840117f2    0x1e    jal ra,ffffffff84010b06 <maskInterrupt>
    0x840117f6    0x22    ld ra,8(sp)           ; stack access
    0x840117f8    0x24    addi sp,sp,16
    0x840117fa    0x26    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 19 nodes.

Section capSwapForDelete (132 of 271)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `capSwapForDelete`:

    0x84011684     0x0    beq a0,a1,ffffffff840116a6 <capSwapForDelete+0x22>
    0x84011688     0x4    addi sp,sp,-48
    0x8401168a     0x6    sd ra,40(sp)          ; stack access
    0x8401168c     0x8    mv a6,a0
    0x8401168e     0xa    mv a5,a1
    0x84011690     0xc    ld a3,0(a1)
    0x84011692     0xe    ld a4,8(a1)
    0x84011694    0x10    mv a2,a0
    0x84011696    0x12    ld a0,0(a0)
    0x84011698    0x14    ld a1,8(a6)
    0x8401169c    0x18    jal ra,ffffffff840115ae <cteSwap>
    0x840116a0    0x1c    ld ra,40(sp)          ; stack access
    0x840116a2    0x1e    addi sp,sp,48
    0x840116a4    0x20    ret
    0x840116a6    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 26 nodes.

Section invokeCNodeMove (133 of 271)
====================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x84011556    0x0    addi sp,sp,-32
    0x84011558    0x2    sd ra,24(sp)          ; stack access
    0x8401155a    0x4    jal ra,ffffffff840114fc <cteMove>
    0x8401155e    0x8    li a0,0
    0x84011560    0xa    ld ra,24(sp)          ; stack access
    0x84011562    0xc    addi sp,sp,32
    0x84011564    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 11 nodes.

Section invokeCNodeInsert (134 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x840114ec    0x0    addi sp,sp,-32
    0x840114ee    0x2    sd ra,24(sp)          ; stack access
    0x840114f0    0x4    jal ra,ffffffff840113c0 <cteInsert>
    0x840114f4    0x8    li a0,0
    0x840114f6    0xa    ld ra,24(sp)          ; stack access
    0x840114f8    0xc    addi sp,sp,32
    0x840114fa    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section switchToIdleThread (135 of 271)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `switchToIdleThread`:

    0x84011362     0x0    addi sp,sp,-16
    0x84011364     0x2    sd ra,8(sp)           ; stack access
    0x84011366     0x4    jal ra,ffffffff840108f0 <Arch_switchToIdleThread>
    0x8401136a     0x8    auipc a5,0xc
    0x8401136e     0xc    addi a5,a5,318 # ffffffff8401d4a8 <ksIdleThread>
    0x84011372    0x10    ld a5,0(a5)
    0x84011374    0x12    auipc a4,0x1c
    0x84011378    0x16    sd a5,1316(a4) # ffffffff8402d898 <ksCurThread>
    0x8401137c    0x1a    ld ra,8(sp)           ; stack access
    0x8401137e    0x1c    addi sp,sp,16
    0x84011380    0x1e    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 17 nodes.

Section doFaultTransfer (136 of 271)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x84011320     0x0    addi sp,sp,-32
    0x84011322     0x2    sd ra,24(sp)          ; stack access
    0x84011324     0x4    sd s0,16(sp)          ; stack access
    0x84011326     0x6    sd s1,8(sp)           ; stack access
    0x84011328     0x8    sd s2,0(sp)           ; stack access
    0x8401132a     0xa    mv s2,a0
    0x8401132c     0xc    mv s1,a1
    0x8401132e     0xe    mv s0,a2
    0x84011330    0x10    mv a2,a3
    0x84011332    0x12    mv a1,s0
    0x84011334    0x14    mv a0,s1
    0x84011336    0x16    jal ra,ffffffff840102e4 <setMRs_fault>
    0x8401133a    0x1a    ld a5,312(s1)
    0x8401133e    0x1e    slli a5,a5,0xc
    0x84011340    0x20    lui a4,0xf
    0x84011342    0x22    and a5,a5,a4
    0x84011344    0x24    andi a0,a0,127
    0x84011348    0x28    or a5,a5,a0
    0x8401134a    0x2a    sd a5,80(s0)
    0x8401134c    0x2c    sd s2,72(s0)
    0x84011350    0x30    ld ra,24(sp)          ; stack access
    0x84011352    0x32    ld s0,16(sp)          ; stack access
    0x84011354    0x34    ld s1,8(sp)           ; stack access
    0x84011356    0x36    ld s2,0(sp)           ; stack access
    0x84011358    0x38    addi sp,sp,32
    0x8401135a    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section lookupPivotSlot (137 of 271)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 12 instructions.


Stack analysis
---------------

Section `lookupPivotSlot` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `lookupPivotSlot`:

    0x84011306     0x0    addi sp,sp,-48
    0x84011308     0x2    sd ra,40(sp)          ; stack access
    0x8401130a     0x4    mv a5,a1
    0x8401130c     0x6    mv a4,a3
    0x8401130e     0x8    mv a3,a2
    0x84011310     0xa    mv a1,a0
    0x84011312     0xc    mv a2,a5
    0x84011314     0xe    li a0,1
    0x84011316    0x10    jal ra,ffffffff84011206 <lookupSlotForCNodeOp>
    0x8401131a    0x14    ld ra,40(sp)          ; stack access
    0x8401131c    0x16    addi sp,sp,48
    0x8401131e    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 16 nodes.

Section lookupTargetSlot (138 of 271)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 12 instructions.


Stack analysis
---------------

Section `lookupTargetSlot` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `lookupTargetSlot`:

    0x840112ec     0x0    addi sp,sp,-48
    0x840112ee     0x2    sd ra,40(sp)          ; stack access
    0x840112f0     0x4    mv a5,a1
    0x840112f2     0x6    mv a4,a3
    0x840112f4     0x8    mv a3,a2
    0x840112f6     0xa    mv a1,a0
    0x840112f8     0xc    mv a2,a5
    0x840112fa     0xe    li a0,0
    0x840112fc    0x10    jal ra,ffffffff84011206 <lookupSlotForCNodeOp>
    0x84011300    0x14    ld ra,40(sp)          ; stack access
    0x84011302    0x16    addi sp,sp,48
    0x84011304    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 16 nodes.

Section lookupSourceSlot (139 of 271)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 12 instructions.


Stack analysis
---------------

Section `lookupSourceSlot` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `lookupSourceSlot`:

    0x840112d2     0x0    addi sp,sp,-48
    0x840112d4     0x2    sd ra,40(sp)          ; stack access
    0x840112d6     0x4    mv a5,a1
    0x840112d8     0x6    mv a4,a3
    0x840112da     0x8    mv a3,a2
    0x840112dc     0xa    mv a1,a0
    0x840112de     0xc    mv a2,a5
    0x840112e0     0xe    li a0,1
    0x840112e2    0x10    jal ra,ffffffff84011206 <lookupSlotForCNodeOp>
    0x840112e6    0x14    ld ra,40(sp)          ; stack access
    0x840112e8    0x16    addi sp,sp,48
    0x840112ea    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 16 nodes.

Section lookupSlotForCNodeOp (140 of 271)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 79 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

Section `lookupSlotForCNodeOp` expects pointer to stack in a0.
19 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x84011206     0x0    addi sp,sp,-80
    0x84011208     0x2    sd ra,72(sp)          ; stack access
    0x8401120a     0x4    sd s0,64(sp)          ; stack access
    0x8401120c     0x6    sd a1,0(sp)           ; stack access
    0x8401120e     0x8    sd a2,8(sp)           ; stack access
    0x84011210     0xa    srli a1,a1,0x3b
    0x84011212     0xc    li a5,10
    0x84011214     0xe    bne a1,a5,ffffffff8401124a <lookupSlotForCNodeOp+0x44>
    0x84011218    0x12    addi a5,a4,-1 # fffffffff7ffffff <ki_end+0x73fd1fff>
    0x8401121c    0x16    li a2,63
    0x84011220    0x1a    bltu a2,a5,ffffffff84011270 <lookupSlotForCNodeOp+0x6a>
    0x84011224    0x1e    mv s0,a0
    0x84011226    0x20    ld a1,0(sp)           ; stack access
    0x84011228    0x22    ld a2,8(sp)           ; stack access
    0x8401122a    0x24    addi a0,sp,24
    0x8401122c    0x26    jal ra,ffffffff8401103c <resolveAddressBits>
    0x84011230    0x2a    ld a5,40(sp)          ; stack access
    0x84011232    0x2c    ld a4,24(sp)          ; stack access
    0x84011234    0x2e    bnez a4,ffffffff8401128e <lookupSlotForCNodeOp+0x88>
    0x84011236    0x30    bnez a5,ffffffff840112a4 <lookupSlotForCNodeOp+0x9e>
    0x84011238    0x32    sd zero,48(sp)        ; stack access
    0x8401123a    0x34    ld a5,32(sp)          ; stack access
    0x8401123c    0x36    sd a5,56(sp)          ; stack access
    0x8401123e    0x38    ld a0,48(sp)          ; stack access
    0x84011240    0x3a    ld a1,56(sp)          ; stack access
    0x84011242    0x3c    ld ra,72(sp)          ; stack access
    0x84011244    0x3e    ld s0,64(sp)          ; stack access
    0x84011246    0x40    addi sp,sp,80
    0x84011248    0x42    ret
    0x8401124a    0x44    auipc a5,0xc
    0x8401124e    0x48    addi a5,a5,638 # ffffffff8401d4c8 <current_syscall_error>
    0x84011252    0x4c    li a4,6
    0x84011254    0x4e    sd a4,48(a5)
    0x84011256    0x50    sd a0,40(a5)
    0x84011258    0x52    auipc a5,0xc
    0x8401125c    0x56    addi a5,a5,600 # ffffffff8401d4b0 <current_lookup_fault>
    0x84011260    0x5a    sd zero,0(a5)
    0x84011264    0x5e    sd zero,8(a5)
    0x84011268    0x62    li a5,3
    0x8401126a    0x64    sd a5,48(sp)          ; stack access
    0x8401126c    0x66    sd zero,56(sp)        ; stack access
    0x8401126e    0x68    j ffffffff8401123e <lookupSlotForCNodeOp+0x38>
    0x84011270    0x6a    auipc a5,0xc
    0x84011274    0x6e    addi a5,a5,600 # ffffffff8401d4c8 <current_syscall_error>
    0x84011278    0x72    li a4,4
    0x8401127a    0x74    sd a4,48(a5)
    0x8401127c    0x76    li a4,1
    0x8401127e    0x78    sd a4,16(a5)
    0x84011280    0x7a    li a4,64
    0x84011284    0x7e    sd a4,24(a5)
    0x84011286    0x80    li a5,3
    0x84011288    0x82    sd a5,48(sp)          ; stack access
    0x8401128a    0x84    sd zero,56(sp)        ; stack access
    0x8401128c    0x86    j ffffffff8401123e <lookupSlotForCNodeOp+0x38>
    0x8401128e    0x88    auipc a5,0xc
    0x84011292    0x8c    addi a5,a5,570 # ffffffff8401d4c8 <current_syscall_error>
    0x84011296    0x90    li a4,6
    0x84011298    0x92    sd a4,48(a5)
    0x8401129a    0x94    sd s0,40(a5)
    0x8401129c    0x96    li a5,3
    0x8401129e    0x98    sd a5,48(sp)
    0x840112a0    0x9a    sd zero,56(sp)
    0x840112a2    0x9c    j ffffffff8401123e <lookupSlotForCNodeOp+0x38>
    0x840112a4    0x9e    auipc a4,0xc
    0x840112a8    0xa2    addi a4,a4,548 # ffffffff8401d4c8 <current_syscall_error>
    0x840112ac    0xa6    li a3,6
    0x840112ae    0xa8    sd a3,48(a4)
    0x840112b0    0xaa    sd s0,40(a4)
    0x840112b2    0xac    auipc a4,0xc
    0x840112b6    0xb0    addi a4,a4,510 # ffffffff8401d4b0 <current_lookup_fault>
    0x840112ba    0xb4    slli a5,a5,0x2
    0x840112bc    0xb6    andi a5,a5,508
    0x840112c0    0xba    ori a5,a5,2
    0x840112c4    0xbe    sd a5,0(a4)
    0x840112c6    0xc0    sd zero,8(a4)
    0x840112ca    0xc4    li a5,3
    0x840112cc    0xc6    sd a5,48(sp)
    0x840112ce    0xc8    sd zero,56(sp)
    0x840112d0    0xca    j ffffffff8401123e <lookupSlotForCNodeOp+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 125 nodes.

Section lookupCapAndSlot (141 of 271)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 26 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x840111c8     0x0    addi sp,sp,-32
    0x840111ca     0x2    sd ra,24(sp)          ; stack access
    0x840111cc     0x4    sd s0,16(sp)          ; stack access
    0x840111ce     0x6    mv s0,a0
    0x840111d0     0x8    mv a0,a1
    0x840111d2     0xa    mv a1,a2
    0x840111d4     0xc    jal ra,ffffffff8401116c <lookupSlot>
    0x840111d8    0x10    sd a0,0(sp)           ; stack access
    0x840111da    0x12    sd a1,8(sp)           ; stack access
    0x840111dc    0x14    bnez a0,ffffffff840111f6 <lookupCapAndSlot+0x2e>
    0x840111de    0x16    ld a4,0(a1)
    0x840111e0    0x18    ld a5,8(a1)
    0x840111e2    0x1a    sd zero,0(s0)         ; stack access
    0x840111e6    0x1e    sd a4,8(s0)           ; stack access
    0x840111e8    0x20    sd a5,16(s0)          ; stack access
    0x840111ea    0x22    sd a1,24(s0)          ; stack access
    0x840111ec    0x24    mv a0,s0
    0x840111ee    0x26    ld ra,24(sp)          ; stack access
    0x840111f0    0x28    ld s0,16(sp)          ; stack access
    0x840111f2    0x2a    addi sp,sp,32
    0x840111f4    0x2c    ret
    0x840111f6    0x2e    sd a0,0(s0)
    0x840111f8    0x30    sd zero,8(s0)
    0x840111fc    0x34    sd zero,16(s0)
    0x84011200    0x38    sd zero,24(s0)
    0x84011204    0x3c    j ffffffff840111ec <lookupCapAndSlot+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 46 nodes.

Section lookupCap (142 of 271)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 25 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `lookupCap`:

    0x8401118e     0x0    addi sp,sp,-32
    0x84011190     0x2    sd ra,24(sp)          ; stack access
    0x84011192     0x4    sd s0,16(sp)          ; stack access
    0x84011194     0x6    mv s0,a0
    0x84011196     0x8    mv a0,a1
    0x84011198     0xa    mv a1,a2
    0x8401119a     0xc    jal ra,ffffffff8401116c <lookupSlot>
    0x8401119e    0x10    sd a0,0(sp)           ; stack access
    0x840111a0    0x12    sd a1,8(sp)           ; stack access
    0x840111a2    0x14    bnez a0,ffffffff840111bc <lookupCap+0x2e>
    0x840111a4    0x16    ld a5,8(sp)           ; stack access
    0x840111a6    0x18    ld a4,0(a5)
    0x840111a8    0x1a    ld a5,8(a5)
    0x840111aa    0x1c    sd zero,0(s0)         ; stack access
    0x840111ae    0x20    sd a4,8(s0)           ; stack access
    0x840111b0    0x22    sd a5,16(s0)          ; stack access
    0x840111b2    0x24    mv a0,s0
    0x840111b4    0x26    ld ra,24(sp)          ; stack access
    0x840111b6    0x28    ld s0,16(sp)          ; stack access
    0x840111b8    0x2a    addi sp,sp,32
    0x840111ba    0x2c    ret
    0x840111bc    0x2e    sd a0,0(s0)
    0x840111be    0x30    sd zero,8(s0)
    0x840111c2    0x34    sd zero,16(s0)
    0x840111c6    0x38    j ffffffff840111b2 <lookupCap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 44 nodes.

Section lookupSlot (143 of 271)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.

RVC_FFFFFFFFFFT___FF.

Stack analysis
---------------

Section `lookupSlot` expects pointer to stack in a0.
6 stack accesses found. Annotated code for `lookupSlot`:

    0x8401116c     0x0    addi sp,sp,-80
    0x8401116e     0x2    sd ra,72(sp)          ; stack access
    0x84011170     0x4    andi a0,a0,-1024
    0x84011174     0x8    li a4,64
    0x84011178     0xc    mv a3,a1
    0x8401117a     0xe    ld a1,0(a0)           ; stack access
    0x8401117c    0x10    ld a2,8(a0)           ; stack access
    0x8401117e    0x12    addi a0,sp,8
    0x84011180    0x14    jal ra,ffffffff8401103c <resolveAddressBits>
    0x84011184    0x18    ld a0,8(sp)           ; stack access
    0x84011186    0x1a    ld a1,16(sp)          ; stack access
    0x84011188    0x1c    ld ra,72(sp)          ; stack access
    0x8401118a    0x1e    addi sp,sp,80
    0x8401118c    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (144 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 61 instructions.


Stack analysis
---------------

Section `Arch_createObject` expects pointer to stack in a0.
12 stack accesses found. Annotated code for `Arch_createObject`:

    0x84010f96     0x0    addi sp,sp,-32
    0x84010f98     0x2    sd ra,24(sp)          ; stack access
    0x84010f9a     0x4    li a5,6
    0x84010f9c     0x6    beq a0,a5,ffffffff84010fe6 <Arch_createObject+0x50>
    0x84010fa0     0xa    bgeu a5,a0,ffffffff84010fc4 <Arch_createObject+0x2e>
    0x84010fa4     0xe    li a5,7
    0x84010fa6    0x10    beq a0,a5,ffffffff8401100a <Arch_createObject+0x74>
    0x84010faa    0x14    li a5,8
    0x84010fac    0x16    bne a0,a5,ffffffff84011026 <Arch_createObject+0x90>
    0x84010fb0    0x1a    li a5,3
    0x84010fb2    0x1c    slli a5,a5,0x3b
    0x84010fb4    0x1e    sd a5,0(sp)           ; stack access
    0x84010fb6    0x20    slli a1,a1,0x9
    0x84010fb8    0x22    lui a5,0xfe000
    0x84010fbc    0x26    srli a5,a5,0x10
    0x84010fbe    0x28    and a1,a1,a5
    0x84010fc0    0x2a    sd a1,8(sp)           ; stack access
    0x84010fc2    0x2c    j ffffffff84011000 <Arch_createObject+0x6a>
    0x84010fc4    0x2e    li a5,5
    0x84010fc6    0x30    bne a0,a5,ffffffff84011026 <Arch_createObject+0x90>
    0x84010fca    0x34    andi a3,a3,1
    0x84010fcc    0x36    slli a3,a3,0x35
    0x84010fce    0x38    li a5,51
    0x84010fd2    0x3c    slli a5,a5,0x36
    0x84010fd4    0x3e    or a3,a3,a5
    0x84010fd6    0x40    sd a3,0(sp)           ; stack access
    0x84010fd8    0x42    slli a1,a1,0x9
    0x84010fda    0x44    lui a5,0xfe000
    0x84010fde    0x48    srli a5,a5,0x10
    0x84010fe0    0x4a    and a1,a1,a5
    0x84010fe2    0x4c    sd a1,8(sp)           ; stack access
    0x84010fe4    0x4e    j ffffffff84011000 <Arch_createObject+0x6a>
    0x84010fe6    0x50    andi a3,a3,1
    0x84010fe8    0x52    slli a3,a3,0x35
    0x84010fea    0x54    li a5,35
    0x84010fee    0x58    slli a5,a5,0x36
    0x84010ff0    0x5a    or a3,a3,a5
    0x84010ff2    0x5c    sd a3,0(sp)           ; stack access
    0x84010ff4    0x5e    slli a1,a1,0x9
    0x84010ff6    0x60    lui a5,0xfe000
    0x84010ffa    0x64    srli a5,a5,0x10
    0x84010ffc    0x66    and a1,a1,a5
    0x84010ffe    0x68    sd a1,8(sp)           ; stack access
    0x84011000    0x6a    ld a0,0(sp)           ; stack access
    0x84011002    0x6c    ld a1,8(sp)           ; stack access
    0x84011004    0x6e    ld ra,24(sp)          ; stack access
    0x84011006    0x70    addi sp,sp,32
    0x84011008    0x72    ret
    0x8401100a    0x74    andi a3,a3,1
    0x8401100c    0x76    slli a3,a3,0x35
    0x8401100e    0x78    li a5,43
    0x84011012    0x7c    slli a5,a5,0x36
    0x84011014    0x7e    or a3,a3,a5
    0x84011016    0x80    sd a3,0(sp)           ; stack access
    0x84011018    0x82    slli a1,a1,0x9
    0x8401101a    0x84    lui a5,0xfe000
    0x8401101e    0x88    srli a5,a5,0x10
    0x84011020    0x8a    and a1,a1,a5
    0x84011022    0x8c    sd a1,8(sp)           ; stack access
    0x84011024    0x8e    j ffffffff84011000 <Arch_createObject+0x6a>
    0x84011026    0x90    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 85 nodes.

Section Arch_sameObjectAs (145 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84010ebe     0x0    addi sp,sp,-48
    0x84010ec0     0x2    sd ra,40(sp)          ; stack access
    0x84010ec2     0x4    sd a0,16(sp)          ; stack access
    0x84010ec4     0x6    sd a1,24(sp)          ; stack access
    0x84010ec6     0x8    sd a2,0(sp)           ; stack access
    0x84010ec8     0xa    sd a3,8(sp)           ; stack access
    0x84010eca     0xc    srli a4,a0,0x3b
    0x84010ece    0x10    li a5,1
    0x84010ed0    0x12    beq a4,a5,ffffffff84010ee6 <Arch_sameObjectAs+0x28>
    0x84010ed4    0x16    ld a2,0(sp)           ; stack access
    0x84010ed6    0x18    ld a3,8(sp)           ; stack access
    0x84010ed8    0x1a    ld a0,16(sp)          ; stack access
    0x84010eda    0x1c    ld a1,24(sp)          ; stack access
    0x84010edc    0x1e    jal ra,ffffffff84010d50 <Arch_sameRegionAs>
    0x84010ee0    0x22    ld ra,40(sp)          ; stack access
    0x84010ee2    0x24    addi sp,sp,48
    0x84010ee4    0x26    ret
    0x84010ee6    0x28    mv a4,a2
    0x84010ee8    0x2a    srli a3,a2,0x3b
    0x84010eec    0x2e    bne a3,a5,ffffffff84010ed4 <Arch_sameObjectAs+0x16>
    0x84010ef0    0x32    srli a5,a1,0x9
    0x84010ef4    0x36    slli a2,a5,0x19
    0x84010ef8    0x3a    srli a2,a2,0x19
    0x84010efa    0x3c    slli a3,a5,0x19
    0x84010efe    0x40    bgez a3,ffffffff84010f2c <Arch_sameObjectAs+0x6e>
    0x84010f02    0x44    ld a3,8(sp)           ; stack access
    0x84010f04    0x46    srli a3,a3,0x9
    0x84010f06    0x48    li a5,0
    0x84010f08    0x4a    slli a1,a3,0x19
    0x84010f0c    0x4e    bgez a1,ffffffff84010f28 <Arch_sameObjectAs+0x6a>
    0x84010f10    0x52    li a5,-1
    0x84010f12    0x54    slli a1,a5,0x27
    0x84010f16    0x58    or a2,a2,a1
    0x84010f18    0x5a    srli a5,a5,0x19
    0x84010f1a    0x5c    and a3,a3,a5
    0x84010f1c    0x5e    li a5,-1
    0x84010f1e    0x60    slli a5,a5,0x27
    0x84010f20    0x62    or a3,a3,a5
    0x84010f22    0x64    li a5,0
    0x84010f24    0x66    beq a3,a2,ffffffff84010f40 <Arch_sameObjectAs+0x82>
    0x84010f28    0x6a    mv a0,a5
    0x84010f2a    0x6c    j ffffffff84010ee0 <Arch_sameObjectAs+0x22>
    0x84010f2c    0x6e    ld a5,8(sp)           ; stack access
    0x84010f2e    0x70    srli a5,a5,0x9
    0x84010f30    0x72    slli a3,a5,0x19
    0x84010f34    0x76    srli a3,a3,0x19
    0x84010f36    0x78    slli a1,a5,0x19
    0x84010f3a    0x7c    bgez a1,ffffffff84010f22 <Arch_sameObjectAs+0x64>
    0x84010f3e    0x80    j ffffffff84010f1c <Arch_sameObjectAs+0x5e>
    0x84010f40    0x82    srli a2,a4,0x39
    0x84010f44    0x86    andi a2,a2,3
    0x84010f46    0x88    srli a3,a0,0x39
    0x84010f4a    0x8c    andi a3,a3,3
    0x84010f4c    0x8e    bne a2,a3,ffffffff84010f28 <Arch_sameObjectAs+0x6a>
    0x84010f50    0x92    srli a5,a0,0x35
    0x84010f54    0x96    srli a4,a4,0x35
    0x84010f56    0x98    xori a4,a4,1
    0x84010f5a    0x9c    andi a5,a5,1
    0x84010f5c    0x9e    andi a4,a4,1
    0x84010f5e    0xa0    sub a5,a5,a4
    0x84010f60    0xa2    snez a5,a5
    0x84010f64    0xa6    j ffffffff84010f28 <Arch_sameObjectAs+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 90 nodes.

Section Arch_sameRegionAs (146 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 134 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x84010d50      0x0    srli a5,a0,0x3b
    0x84010d54      0x4    li a4,3
    0x84010d56      0x6    beq a5,a4,ffffffff84010e74 <Arch_sameRegionAs+0x124>
    0x84010d5a      0xa    bgeu a4,a5,ffffffff84010db4 <Arch_sameRegionAs+0x64>
    0x84010d5e      0xe    li a4,11
    0x84010d60     0x10    beq a5,a4,ffffffff84010eb2 <Arch_sameRegionAs+0x162>
    0x84010d64     0x14    li a4,13
    0x84010d66     0x16    bne a5,a4,ffffffff84010e58 <Arch_sameRegionAs+0x108>
    0x84010d6a     0x1a    srli a4,a2,0x3b
    0x84010d6e     0x1e    li a3,13
    0x84010d70     0x20    li a5,0
    0x84010d72     0x22    bne a4,a3,ffffffff84010e54 <Arch_sameRegionAs+0x104>
    0x84010d76     0x26    slli a0,a0,0x2
    0x84010d78     0x28    lui a5,0xf8000
    0x84010d7c     0x2c    srli a5,a5,0x19
    0x84010d7e     0x2e    and a3,a0,a5
    0x84010d82     0x32    slli a5,a0,0x19
    0x84010d86     0x36    bgez a5,ffffffff84010d90 <Arch_sameRegionAs+0x40>
    0x84010d8a     0x3a    li a5,-1
    0x84010d8c     0x3c    slli a5,a5,0x27
    0x84010d8e     0x3e    or a3,a3,a5
    0x84010d90     0x40    slli a5,a2,0x2
    0x84010d94     0x44    lui a4,0xf8000
    0x84010d98     0x48    srli a4,a4,0x19
    0x84010d9a     0x4a    and a4,a4,a5
    0x84010d9c     0x4c    slli a2,a5,0x19
    0x84010da0     0x50    bgez a2,ffffffff84010daa <Arch_sameRegionAs+0x5a>
    0x84010da4     0x54    li a5,-1
    0x84010da6     0x56    slli a5,a5,0x27
    0x84010da8     0x58    or a4,a4,a5
    0x84010daa     0x5a    sub a5,a4,a3
    0x84010dae     0x5e    seqz a5,a5
    0x84010db2     0x62    j ffffffff84010e54 <Arch_sameRegionAs+0x104>
    0x84010db4     0x64    li a4,1
    0x84010db6     0x66    bne a5,a4,ffffffff84010e52 <Arch_sameRegionAs+0x102>
    0x84010dba     0x6a    srli a4,a2,0x3b
    0x84010dbe     0x6e    li a6,1
    0x84010dc0     0x70    li a5,0
    0x84010dc2     0x72    bne a4,a6,ffffffff84010e54 <Arch_sameRegionAs+0x104>
    0x84010dc6     0x76    addi sp,sp,-48
    0x84010dc8     0x78    sd ra,40(sp)          ; stack access
    0x84010dca     0x7a    srli a1,a1,0x9
    0x84010dcc     0x7c    slli a4,a1,0x19
    0x84010dd0     0x80    srli a4,a4,0x19
    0x84010dd2     0x82    slli a5,a1,0x19
    0x84010dd6     0x86    bgez a5,ffffffff84010de0 <Arch_sameRegionAs+0x90>
    0x84010dda     0x8a    li a5,-1
    0x84010ddc     0x8c    slli a5,a5,0x27
    0x84010dde     0x8e    or a4,a4,a5
    0x84010de0     0x90    srli a3,a3,0x9
    0x84010de2     0x92    slli a1,a3,0x19
    0x84010de6     0x96    srli a1,a1,0x19
    0x84010de8     0x98    slli a5,a3,0x19
    0x84010dec     0x9c    bgez a5,ffffffff84010df6 <Arch_sameRegionAs+0xa6>
    0x84010df0     0xa0    li a5,-1
    0x84010df2     0xa2    slli a5,a5,0x27
    0x84010df4     0xa4    or a1,a1,a5
    0x84010df6     0xa6    mv a5,a2
    0x84010df8     0xa8    srli a0,a0,0x39
    0x84010dfa     0xaa    andi a0,a0,3
    0x84010dfc     0xac    li a3,1
    0x84010dfe     0xae    beq a0,a3,ffffffff84010e60 <Arch_sameRegionAs+0x110>
    0x84010e02     0xb2    beqz a0,ffffffff84010e64 <Arch_sameRegionAs+0x114>
    0x84010e04     0xb4    li a3,2
    0x84010e06     0xb6    li a2,30
    0x84010e08     0xb8    bne a0,a3,ffffffff84010e5c <Arch_sameRegionAs+0x10c>
    0x84010e0c     0xbc    srli a5,a5,0x39
    0x84010e0e     0xbe    andi a5,a5,3
    0x84010e10     0xc0    li a3,1
    0x84010e12     0xc2    beq a5,a3,ffffffff84010e6c <Arch_sameRegionAs+0x11c>
    0x84010e16     0xc6    beqz a5,ffffffff84010e70 <Arch_sameRegionAs+0x120>
    0x84010e18     0xc8    li a0,2
    0x84010e1a     0xca    li a3,30
    0x84010e1c     0xcc    bne a5,a0,ffffffff84010e68 <Arch_sameRegionAs+0x118>
    0x84010e20     0xd0    li a5,0
    0x84010e22     0xd2    bltu a1,a4,ffffffff84010e4a <Arch_sameRegionAs+0xfa>
    0x84010e26     0xd6    li a5,1
    0x84010e28     0xd8    sll a3,a5,a3
    0x84010e2c     0xdc    addi a0,a1,-1 # fffffffff7ffffff <ki_end+0x73fd1fff>
    0x84010e30     0xe0    add a3,a3,a0
    0x84010e32     0xe2    sll a5,a5,a2
    0x84010e36     0xe6    addi a4,a4,-1
    0x84010e38     0xe8    add a4,a4,a5
    0x84010e3a     0xea    li a5,0
    0x84010e3c     0xec    bltu a4,a3,ffffffff84010e4a <Arch_sameRegionAs+0xfa>
    0x84010e40     0xf0    sltu a5,a3,a1
    0x84010e44     0xf4    xori a5,a5,1
    0x84010e48     0xf8    sext.w a5,a5
    0x84010e4a     0xfa    mv a0,a5
    0x84010e4c     0xfc    ld ra,40(sp)          ; stack access
    0x84010e4e     0xfe    addi sp,sp,48
    0x84010e50    0x100    ret
    0x84010e52    0x102    li a5,0
    0x84010e54    0x104    mv a0,a5
    0x84010e56    0x106    ret
    0x84010e58    0x108    li a5,0
    0x84010e5a    0x10a    j ffffffff84010e54 <Arch_sameRegionAs+0x104>
    0x84010e5c    0x10c    jal ra,ffffffff84010294 <halt>
    0x84010e60    0x110    li a2,21
    0x84010e62    0x112    j ffffffff84010e0c <Arch_sameRegionAs+0xbc>
    0x84010e64    0x114    li a2,12
    0x84010e66    0x116    j ffffffff84010e0c <Arch_sameRegionAs+0xbc>
    0x84010e68    0x118    jal ra,ffffffff84010294 <halt>
    0x84010e6c    0x11c    li a3,21
    0x84010e6e    0x11e    j ffffffff84010e20 <Arch_sameRegionAs+0xd0>
    0x84010e70    0x120    li a3,12
    0x84010e72    0x122    j ffffffff84010e20 <Arch_sameRegionAs+0xd0>
    0x84010e74    0x124    srli a2,a2,0x3b
    0x84010e76    0x126    li a4,3
    0x84010e78    0x128    li a5,0
    0x84010e7a    0x12a    bne a2,a4,ffffffff84010e54 <Arch_sameRegionAs+0x104>
    0x84010e7e    0x12e    srli a1,a1,0x9
    0x84010e80    0x130    slli a0,a1,0x19
    0x84010e84    0x134    srli a0,a0,0x19
    0x84010e86    0x136    slli a5,a1,0x19
    0x84010e8a    0x13a    bgez a5,ffffffff84010e94 <Arch_sameRegionAs+0x144>
    0x84010e8e    0x13e    li a5,-1
    0x84010e90    0x140    slli a5,a5,0x27
    0x84010e92    0x142    or a0,a0,a5
    0x84010e94    0x144    srli a3,a3,0x9
    0x84010e96    0x146    slli a5,a3,0x19
    0x84010e9a    0x14a    srli a5,a5,0x19
    0x84010e9c    0x14c    slli a4,a3,0x19
    0x84010ea0    0x150    bgez a4,ffffffff84010eaa <Arch_sameRegionAs+0x15a>
    0x84010ea4    0x154    li a4,-1
    0x84010ea6    0x156    slli a4,a4,0x27
    0x84010ea8    0x158    or a5,a5,a4
    0x84010eaa    0x15a    sub a5,a5,a0
    0x84010eac    0x15c    seqz a5,a5
    0x84010eb0    0x160    j ffffffff84010e54 <Arch_sameRegionAs+0x104>
    0x84010eb2    0x162    srli a5,a2,0x3b
    0x84010eb6    0x166    addi a5,a5,-11
    0x84010eb8    0x168    seqz a5,a5
    0x84010ebc    0x16c    j ffffffff84010e54 <Arch_sameRegionAs+0x104>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
134 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 184 nodes.

Section Arch_maskCapRights (147 of 271)
=======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 32 instructions.


Stack analysis
---------------

Section `Arch_maskCapRights` expects pointer to stack in a0.
12 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84010bf8     0x0    addi sp,sp,-64
    0x84010bfa     0x2    sd ra,56(sp)          ; stack access
    0x84010bfc     0x4    sd s0,48(sp)          ; stack access
    0x84010bfe     0x6    sd s1,40(sp)          ; stack access
    0x84010c00     0x8    srli a4,a1,0x3b
    0x84010c04     0xc    li a5,1
    0x84010c06     0xe    beq a4,a5,ffffffff84010c1c <Arch_maskCapRights+0x24>
    0x84010c0a    0x12    sd a1,16(sp)          ; stack access
    0x84010c0c    0x14    sd a2,24(sp)          ; stack access
    0x84010c0e    0x16    ld a0,16(sp)          ; stack access
    0x84010c10    0x18    ld a1,24(sp)          ; stack access
    0x84010c12    0x1a    ld ra,56(sp)          ; stack access
    0x84010c14    0x1c    ld s0,48(sp)          ; stack access
    0x84010c16    0x1e    ld s1,40(sp)          ; stack access
    0x84010c18    0x20    addi sp,sp,64
    0x84010c1a    0x22    ret
    0x84010c1c    0x24    mv s1,a2
    0x84010c1e    0x26    mv s0,a1
    0x84010c20    0x28    mv a1,a0
    0x84010c22    0x2a    srli a0,s0,0x36
    0x84010c26    0x2e    andi a0,a0,7
    0x84010c28    0x30    jal ra,ffffffff840109ec <maskVMRights>
    0x84010c2c    0x34    andi a0,a0,7
    0x84010c2e    0x36    slli a0,a0,0x36
    0x84010c30    0x38    li a1,-7
    0x84010c32    0x3a    slli a1,a1,0x36
    0x84010c34    0x3c    addi a1,a1,-1
    0x84010c36    0x3e    and a1,a1,s0
    0x84010c38    0x40    or a1,a1,a0
    0x84010c3a    0x42    sd a1,16(sp)          ; stack access
    0x84010c3c    0x44    sd s1,24(sp)          ; stack access
    0x84010c3e    0x46    j ffffffff84010c0e <Arch_maskCapRights+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 48 nodes.

Section Arch_deriveCap (148 of 271)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 40 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84010b84     0x0    srli a5,a2,0x3b
    0x84010b88     0x4    li a4,3
    0x84010b8a     0x6    beq a5,a4,ffffffff84010bc4 <Arch_deriveCap+0x40>
    0x84010b8e     0xa    bgeu a4,a5,ffffffff84010ba8 <Arch_deriveCap+0x24>
    0x84010b92     0xe    li a4,11
    0x84010b94    0x10    beq a5,a4,ffffffff84010b9e <Arch_deriveCap+0x1a>
    0x84010b98    0x14    li a4,13
    0x84010b9a    0x16    bne a5,a4,ffffffff84010be6 <Arch_deriveCap+0x62>
    0x84010b9e    0x1a    sd zero,0(a0)         ; stack access
    0x84010ba2    0x1e    sd a2,8(a0)           ; stack access
    0x84010ba4    0x20    sd a3,16(a0)          ; stack access
    0x84010ba6    0x22    ret
    0x84010ba8    0x24    li a4,1
    0x84010baa    0x26    bne a5,a4,ffffffff84010be6 <Arch_deriveCap+0x62>
    0x84010bae    0x2a    sd zero,0(a0)         ; stack access
    0x84010bb2    0x2e    li a5,-1
    0x84010bb4    0x30    slli a4,a5,0x27
    0x84010bb8    0x34    and a2,a2,a4
    0x84010bba    0x36    sd a2,8(a0)           ; stack access
    0x84010bbc    0x38    srli a5,a5,0x10
    0x84010bbe    0x3a    and a3,a3,a5
    0x84010bc0    0x3c    sd a3,16(a0)          ; stack access
    0x84010bc2    0x3e    ret
    0x84010bc4    0x40    srli a4,a2,0x27
    0x84010bc8    0x44    andi a4,a4,1
    0x84010bca    0x46    bnez a4,ffffffff84010be2 <Arch_deriveCap+0x5e>
    0x84010bcc    0x48    li a3,3
    0x84010bce    0x4a    auipc a2,0xd
    0x84010bd2    0x4e    sd a3,-1750(a2) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84010bd6    0x52    mv a3,a4
    0x84010bd8    0x54    mv a2,a4
    0x84010bda    0x56    sd a5,0(a0)           ; stack access
    0x84010bdc    0x58    sd a2,8(a0)           ; stack access
    0x84010bde    0x5a    sd a3,16(a0)          ; stack access
    0x84010be0    0x5c    ret
    0x84010be2    0x5e    li a5,0
    0x84010be4    0x60    j ffffffff84010bda <Arch_deriveCap+0x56>
    0x84010be6    0x62    addi sp,sp,-32
    0x84010be8    0x64    sd ra,24(sp)          ; stack access
    0x84010bea    0x66    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
40 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 67 nodes.

Section performPageInvocationUnmap (149 of 271)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 41 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x84010a5e     0x0    addi sp,sp,-32
    0x84010a60     0x2    sd ra,24(sp)          ; stack access
    0x84010a62     0x4    sd s0,16(sp)          ; stack access
    0x84010a64     0x6    sd a0,0(sp)           ; stack access
    0x84010a66     0x8    mv s0,a2
    0x84010a68     0xa    srli a4,a1,0x30
    0x84010a6c     0xe    beqz a4,ffffffff84010aa6 <performPageInvocationUnmap+0x48>
    0x84010a6e    0x10    mv a5,a0
    0x84010a70    0x12    srli a0,a0,0x39
    0x84010a72    0x14    andi a0,a0,3
    0x84010a74    0x16    slli a2,a5,0x19
    0x84010a78    0x1a    srli a2,a2,0x19
    0x84010a7a    0x1c    slli a3,a5,0x19
    0x84010a7e    0x20    bgez a3,ffffffff84010a88 <performPageInvocationUnmap+0x2a>
    0x84010a82    0x24    li a5,-1
    0x84010a84    0x26    slli a5,a5,0x27
    0x84010a86    0x28    or a2,a2,a5
    0x84010a88    0x2a    srli a5,a1,0x9
    0x84010a8c    0x2e    slli a3,a5,0x19
    0x84010a90    0x32    srli a3,a3,0x19
    0x84010a92    0x34    slli a1,a5,0x19
    0x84010a96    0x38    bgez a1,ffffffff84010aa0 <performPageInvocationUnmap+0x42>
    0x84010a9a    0x3c    li a5,-1
    0x84010a9c    0x3e    slli a5,a5,0x27
    0x84010a9e    0x40    or a3,a3,a5
    0x84010aa0    0x42    mv a1,a4
    0x84010aa2    0x44    jal ra,ffffffff8401078e <unmapPage>
    0x84010aa6    0x48    ld a4,8(s0)
    0x84010aa8    0x4a    ld a3,0(s0)
    0x84010aaa    0x4c    li a5,-1
    0x84010aac    0x4e    slli a2,a5,0x27
    0x84010ab0    0x52    and a3,a3,a2
    0x84010ab2    0x54    sd a3,0(s0)
    0x84010ab4    0x56    srli a5,a5,0x10
    0x84010ab6    0x58    and a5,a5,a4
    0x84010ab8    0x5a    sd a5,8(s0)
    0x84010aba    0x5c    li a0,0
    0x84010abc    0x5e    ld ra,24(sp)          ; stack access
    0x84010abe    0x60    ld s0,16(sp)          ; stack access
    0x84010ac0    0x62    addi sp,sp,32
    0x84010ac2    0x64    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 58 nodes.

Section deleteASID (150 of 271)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 24 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASID`:

    0x84010948     0x0    srli a5,a0,0x9
    0x8401094c     0x4    slli a4,a5,0x3
    0x84010950     0x8    auipc a5,0xb
    0x84010954     0xc    addi a5,a5,1880 # ffffffff8401c0a8 <riscvKSASIDTable>
    0x84010958    0x10    add a5,a5,a4
    0x8401095a    0x12    ld a5,0(a5)
    0x8401095c    0x14    beqz a5,ffffffff8401096c <deleteASID+0x24>
    0x8401095e    0x16    andi a4,a0,511
    0x84010962    0x1a    slli a4,a4,0x3
    0x84010964    0x1c    add a5,a5,a4
    0x84010966    0x1e    ld a4,0(a5)
    0x84010968    0x20    beq a4,a1,ffffffff8401096e <deleteASID+0x26>
    0x8401096c    0x24    ret
    0x8401096e    0x26    addi sp,sp,-16
    0x84010970    0x28    sd ra,8(sp)           ; stack access
    0x84010972    0x2a    sfence.vma zero,a0
    0x84010976    0x2e    sd zero,0(a5)
    0x8401097a    0x32    auipc a5,0x1d
    0x8401097e    0x36    addi a5,a5,-226 # ffffffff8402d898 <ksCurThread>
    0x84010982    0x3a    ld a0,0(a5)
    0x84010984    0x3c    jal ra,ffffffff84010820 <setVMRoot>
    0x84010988    0x40    ld ra,8(sp)           ; stack access
    0x8401098a    0x42    addi sp,sp,16
    0x8401098c    0x44    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 38 nodes.

Section deleteASIDPool (151 of 271)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 21 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASIDPool`:

    0x84010908     0x0    srli a0,a0,0x9
    0x8401090a     0x2    slli a4,a0,0x3
    0x8401090e     0x6    auipc a5,0xb
    0x84010912     0xa    addi a5,a5,1946 # ffffffff8401c0a8 <riscvKSASIDTable>
    0x84010916     0xe    add a5,a5,a4
    0x84010918    0x10    ld a5,0(a5)
    0x8401091a    0x12    beq a5,a1,ffffffff84010920 <deleteASIDPool+0x18>
    0x8401091e    0x16    ret
    0x84010920    0x18    addi sp,sp,-16
    0x84010922    0x1a    sd ra,8(sp)           ; stack access
    0x84010924    0x1c    auipc a5,0xb
    0x84010928    0x20    addi a5,a5,1924 # ffffffff8401c0a8 <riscvKSASIDTable>
    0x8401092c    0x24    add a0,a5,a4
    0x84010930    0x28    sd zero,0(a0)
    0x84010934    0x2c    auipc a5,0x1d
    0x84010938    0x30    addi a5,a5,-156 # ffffffff8402d898 <ksCurThread>
    0x8401093c    0x34    ld a0,0(a5)
    0x8401093e    0x36    jal ra,ffffffff84010820 <setVMRoot>
    0x84010942    0x3a    ld ra,8(sp)           ; stack access
    0x84010944    0x3c    addi sp,sp,16
    0x84010946    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 31 nodes.

Section Arch_switchToIdleThread (152 of 271)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 9 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToIdleThread`:

    0x840108f0     0x0    addi sp,sp,-16
    0x840108f2     0x2    sd ra,8(sp)           ; stack access
    0x840108f4     0x4    auipc a5,0xd
    0x840108f8     0x8    addi a5,a5,-1100 # ffffffff8401d4a8 <ksIdleThread>
    0x840108fc     0xc    ld a0,0(a5)
    0x840108fe     0xe    jal ra,ffffffff84010820 <setVMRoot>
    0x84010902    0x12    ld ra,8(sp)           ; stack access
    0x84010904    0x14    addi sp,sp,16
    0x84010906    0x16    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 14 nodes.

Section Arch_switchToThread (153 of 271)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToThread`:

    0x840108e2    0x0    addi sp,sp,-16
    0x840108e4    0x2    sd ra,8(sp)           ; stack access
    0x840108e6    0x4    jal ra,ffffffff84010820 <setVMRoot>
    0x840108ea    0x8    ld ra,8(sp)           ; stack access
    0x840108ec    0xa    addi sp,sp,16
    0x840108ee    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 10 nodes.

Section setVMRoot (154 of 271)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 74 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `setVMRoot`:

    0x84010820     0x0    andi a0,a0,-1024
    0x84010824     0x4    ld a5,32(a0)
    0x84010826     0x6    srli a5,a5,0x3b
    0x84010828     0x8    li a4,3
    0x8401082a     0xa    beq a5,a4,ffffffff84010854 <setVMRoot+0x34>
    0x8401082e     0xe    auipc a5,0xa
    0x84010832    0x12    addi a5,a5,2002 # ffffffff8401b000 <kernel_root_pageTable>
    0x84010836    0x16    li a4,1
    0x84010838    0x18    slli a4,a4,0x20
    0x8401083a    0x1a    add a5,a5,a4
    0x8401083c    0x1c    srli a5,a5,0xc
    0x8401083e    0x1e    li a4,-1
    0x84010840    0x20    srli a3,a4,0x14
    0x84010844    0x24    and a5,a5,a3
    0x84010846    0x26    slli a4,a4,0x3f
    0x84010848    0x28    or a5,a5,a4
    0x8401084a    0x2a    csrw satp,a5
    0x8401084e    0x2e    sfence.vma
    0x84010852    0x32    ret
    0x84010854    0x34    addi sp,sp,-48
    0x84010856    0x36    sd ra,40(sp)          ; stack access
    0x84010858    0x38    sd s0,32(sp)          ; stack access
    0x8401085a    0x3a    sd s1,24(sp)          ; stack access
    0x8401085c    0x3c    sd s2,16(sp)          ; stack access
    0x8401085e    0x3e    addi a3,a0,32
    0x84010862    0x42    ld a5,8(a3)
    0x84010864    0x44    srli a4,a5,0x9
    0x84010868    0x48    slli s0,a4,0x19
    0x8401086c    0x4c    srli s0,s0,0x19
    0x8401086e    0x4e    slli a3,a4,0x19
    0x84010872    0x52    bgez a3,ffffffff8401087c <setVMRoot+0x5c>
    0x84010876    0x56    li a4,-1
    0x84010878    0x58    slli a4,a4,0x27
    0x8401087a    0x5a    or s0,s0,a4
    0x8401087c    0x5c    srli s1,a5,0x30
    0x84010880    0x60    mv a0,s1
    0x84010882    0x62    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010886    0x66    sd a0,0(sp)           ; stack access
    0x84010888    0x68    sd a1,8(sp)           ; stack access
    0x8401088a    0x6a    bnez a0,ffffffff840108bc <setVMRoot+0x9c>
    0x8401088c    0x6c    bne a1,s0,ffffffff840108bc <setVMRoot+0x9c>
    0x84010890    0x70    li a5,1
    0x84010892    0x72    slli a5,a5,0x26
    0x84010894    0x74    add a5,a5,s0
    0x84010896    0x76    srli a5,a5,0xc
    0x84010898    0x78    li a4,-1
    0x8401089a    0x7a    srli s0,a4,0x14
    0x8401089e    0x7e    and a5,a5,s0
    0x840108a0    0x80    slli s1,s1,0x2c
    0x840108a2    0x82    or a5,a5,s1
    0x840108a4    0x84    slli a4,a4,0x3f
    0x840108a6    0x86    or a5,a5,a4
    0x840108a8    0x88    csrw satp,a5
    0x840108ac    0x8c    sfence.vma
    0x840108b0    0x90    ld ra,40(sp)          ; stack access
    0x840108b2    0x92    ld s0,32(sp)          ; stack access
    0x840108b4    0x94    ld s1,24(sp)          ; stack access
    0x840108b6    0x96    ld s2,16(sp)          ; stack access
    0x840108b8    0x98    addi sp,sp,48
    0x840108ba    0x9a    ret
    0x840108bc    0x9c    auipc a5,0xa
    0x840108c0    0xa0    addi a5,a5,1860 # ffffffff8401b000 <kernel_root_pageTable>
    0x840108c4    0xa4    li a4,1
    0x840108c6    0xa6    slli a4,a4,0x20
    0x840108c8    0xa8    add a5,a5,a4
    0x840108ca    0xaa    srli a5,a5,0xc
    0x840108cc    0xac    li a4,-1
    0x840108ce    0xae    srli a3,a4,0x14
    0x840108d2    0xb2    and a5,a5,a3
    0x840108d4    0xb4    slli a4,a4,0x3f
    0x840108d6    0xb6    or a5,a5,a4
    0x840108d8    0xb8    csrw satp,a5
    0x840108dc    0xbc    sfence.vma
    0x840108e0    0xc0    j ffffffff840108b0 <setVMRoot+0x90>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 103 nodes.

Section unmapPageTable (155 of 271)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 64 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `unmapPageTable`:

    0x840106e4     0x0    addi sp,sp,-48
    0x840106e6     0x2    sd ra,40(sp)          ; stack access
    0x840106e8     0x4    sd s0,32(sp)          ; stack access
    0x840106ea     0x6    sd s1,24(sp)          ; stack access
    0x840106ec     0x8    mv s0,a1
    0x840106ee     0xa    mv s1,a2
    0x840106f0     0xc    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x840106f4    0x10    sd a0,0(sp)           ; stack access
    0x840106f6    0x12    sd a1,8(sp)           ; stack access
    0x840106f8    0x14    bnez a0,ffffffff84010778 <unmapPageTable+0x94>
    0x840106fa    0x16    beq a1,s1,ffffffff84010782 <unmapPageTable+0x9e>
    0x840106fe    0x1a    srli a5,s0,0x1e
    0x84010702    0x1e    andi a5,a5,511
    0x84010706    0x22    slli a5,a5,0x3
    0x84010708    0x24    add a4,a1,a5
    0x8401070c    0x28    ld a5,0(a4)
    0x8401070e    0x2a    andi a3,a5,1
    0x84010712    0x2e    beqz a3,ffffffff84010778 <unmapPageTable+0x94>
    0x84010714    0x30    srli a3,a5,0x1
    0x84010718    0x34    srli a2,a5,0x2
    0x8401071c    0x38    or a3,a3,a2
    0x8401071e    0x3a    srli a2,a5,0x3
    0x84010722    0x3e    or a3,a3,a2
    0x84010724    0x40    andi a3,a3,1
    0x84010726    0x42    bnez a3,ffffffff84010778 <unmapPageTable+0x94>
    0x84010728    0x44    slli a5,a5,0x2
    0x8401072a    0x46    lui a3,0xfff00
    0x8401072e    0x4a    srli a3,a3,0x8
    0x84010730    0x4c    and a5,a5,a3
    0x84010732    0x4e    li a3,-1
    0x84010734    0x50    slli a3,a3,0x26
    0x84010736    0x52    add a5,a5,a3
    0x84010738    0x54    beq s1,a5,ffffffff84010784 <unmapPageTable+0xa0>
    0x8401073c    0x58    srli s0,s0,0x15
    0x8401073e    0x5a    andi s0,s0,511
    0x84010742    0x5e    slli s0,s0,0x3
    0x84010744    0x60    add a4,a5,s0
    0x84010748    0x64    ld a5,0(a4)
    0x8401074a    0x66    andi a3,a5,1
    0x8401074e    0x6a    beqz a3,ffffffff84010778 <unmapPageTable+0x94>
    0x84010750    0x6c    srli a3,a5,0x1
    0x84010754    0x70    srli a2,a5,0x2
    0x84010758    0x74    or a3,a3,a2
    0x8401075a    0x76    srli a2,a5,0x3
    0x8401075e    0x7a    or a3,a3,a2
    0x84010760    0x7c    andi a3,a3,1
    0x84010762    0x7e    bnez a3,ffffffff84010778 <unmapPageTable+0x94>
    0x84010764    0x80    slli a5,a5,0x2
    0x84010766    0x82    lui a3,0xfff00
    0x8401076a    0x86    srli a3,a3,0x8
    0x8401076c    0x88    and a5,a5,a3
    0x8401076e    0x8a    li a3,-1
    0x84010770    0x8c    slli a3,a3,0x26
    0x84010772    0x8e    add a5,a5,a3
    0x84010774    0x90    beq s1,a5,ffffffff84010784 <unmapPageTable+0xa0>
    0x84010778    0x94    ld ra,40(sp)          ; stack access
    0x8401077a    0x96    ld s0,32(sp)          ; stack access
    0x8401077c    0x98    ld s1,24(sp)          ; stack access
    0x8401077e    0x9a    addi sp,sp,48
    0x84010780    0x9c    ret
    0x84010782    0x9e    li a4,0
    0x84010784    0xa0    sd zero,0(a4)
    0x84010788    0xa4    sfence.vma
    0x8401078c    0xa8    j ffffffff84010778 <unmapPageTable+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 94 nodes.

Section handleVMFault (156 of 271)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 35 instructions.

Skipping 143026f3 csrr a3,stval


Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x84010682     0x0    csrr a3,stval
    0x84010686     0x4    li a5,15
    0x84010688     0x6    bltu a5,a1,ffffffff840106dc <handleVMFault+0x5a>
    0x8401068c     0xa    slli a1,a1,0x2
    0x8401068e     0xc    auipc a4,0x7
    0x84010692    0x10    addi a4,a4,-798 # ffffffff84017370 <ksDomScheduleLength+0x200>
    0x84010696    0x14    add a1,a1,a4
    0x84010698    0x16    lw a5,0(a1)
    0x8401069a    0x18    add a5,a5,a4
    0x8401069c    0x1a    jr a5
    0x8401069e    0x1c    auipc a4,0xc
    0x840106a2    0x20    addi a4,a4,-1566 # ffffffff8401c080 <current_fault>
    0x840106a6    0x24    lui a5,0x28000
    0x840106aa    0x28    addi a5,a5,5
    0x840106ac    0x2a    sd a5,0(a4)
    0x840106ae    0x2c    sd a3,8(a4)
    0x840106b0    0x2e    li a0,1
    0x840106b2    0x30    ret
    0x840106b4    0x32    auipc a4,0xc
    0x840106b8    0x36    addi a4,a4,-1588 # ffffffff8401c080 <current_fault>
    0x840106bc    0x3a    lui a5,0x38000
    0x840106c0    0x3e    addi a5,a5,5
    0x840106c2    0x40    sd a5,0(a4)
    0x840106c4    0x42    sd a3,8(a4)
    0x840106c6    0x44    j ffffffff840106b0 <handleVMFault+0x2e>
    0x840106c8    0x46    auipc a4,0xc
    0x840106cc    0x4a    addi a4,a4,-1608 # ffffffff8401c080 <current_fault>
    0x840106d0    0x4e    lui a5,0x8080
    0x840106d4    0x52    addi a5,a5,5
    0x840106d6    0x54    sd a5,0(a4)
    0x840106d8    0x56    sd a3,8(a4)
    0x840106da    0x58    j ffffffff840106b0 <handleVMFault+0x2e>
    0x840106dc    0x5a    addi sp,sp,-16
    0x840106de    0x5c    sd ra,8(sp)           ; stack access
    0x840106e0    0x5e    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 49 nodes.

Section lookupIPCBuffer (157 of 271)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 54 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x84010444     0x0    andi a5,a1,-1024
    0x84010448     0x4    addi a2,a5,128
    0x8401044c     0x8    ld a5,128(a5)
    0x8401044e     0xa    srli a3,a5,0x3b
    0x84010452     0xe    li a4,1
    0x84010454    0x10    bne a3,a4,ffffffff840104c8 <lookupIPCBuffer+0x84>
    0x84010458    0x14    slli a4,a5,0xa
    0x8401045c    0x18    bltz a4,ffffffff840104cc <lookupIPCBuffer+0x88>
    0x84010460    0x1c    srli a4,a5,0x36
    0x84010464    0x20    andi a4,a4,7
    0x84010466    0x22    li a3,3
    0x84010468    0x24    bne a4,a3,ffffffff840104ac <lookupIPCBuffer+0x68>
    0x8401046c    0x28    ld a3,8(a2)
    0x8401046e    0x2a    srli a3,a3,0x9
    0x84010470    0x2c    slli a4,a3,0x19
    0x84010474    0x30    srli a4,a4,0x19
    0x84010476    0x32    slli a2,a3,0x19
    0x8401047a    0x36    bgez a2,ffffffff84010484 <lookupIPCBuffer+0x40>
    0x8401047e    0x3a    li a3,-1
    0x84010480    0x3c    slli a3,a3,0x27
    0x84010482    0x3e    or a4,a4,a3
    0x84010484    0x40    ld a2,384(a1)
    0x84010488    0x44    srli a5,a5,0x39
    0x8401048a    0x46    andi a5,a5,3
    0x8401048c    0x48    li a3,1
    0x8401048e    0x4a    beq a5,a3,ffffffff840104c0 <lookupIPCBuffer+0x7c>
    0x84010492    0x4e    beqz a5,ffffffff840104c4 <lookupIPCBuffer+0x80>
    0x84010494    0x50    li a1,2
    0x84010496    0x52    li a3,30
    0x84010498    0x54    bne a5,a1,ffffffff840104b8 <lookupIPCBuffer+0x74>
    0x8401049c    0x58    li a0,-1
    0x8401049e    0x5a    sll a0,a0,a3
    0x840104a2    0x5e    not a0,a0
    0x840104a6    0x62    and a0,a0,a2
    0x840104a8    0x64    add a0,a0,a4
    0x840104aa    0x66    ret
    0x840104ac    0x68    bnez a0,ffffffff840104d0 <lookupIPCBuffer+0x8c>
    0x840104ae    0x6a    li a3,1
    0x840104b0    0x6c    beq a4,a3,ffffffff8401046c <lookupIPCBuffer+0x28>
    0x840104b4    0x70    li a0,0
    0x840104b6    0x72    ret
    0x840104b8    0x74    addi sp,sp,-16
    0x840104ba    0x76    sd ra,8(sp)           ; stack access
    0x840104bc    0x78    jal ra,ffffffff84010294 <halt>
    0x840104c0    0x7c    li a3,21
    0x840104c2    0x7e    j ffffffff8401049c <lookupIPCBuffer+0x58>
    0x840104c4    0x80    li a3,12
    0x840104c6    0x82    j ffffffff8401049c <lookupIPCBuffer+0x58>
    0x840104c8    0x84    li a0,0
    0x840104ca    0x86    ret
    0x840104cc    0x88    li a0,0
    0x840104ce    0x8a    ret
    0x840104d0    0x8c    li a0,0
    0x840104d2    0x8e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 82 nodes.

Section Arch_setMRs_fault (158 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 18 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x840102b2     0x0    li a5,5
    0x840102b4     0x2    bne a3,a5,ffffffff840102dc <Arch_setMRs_fault+0x2a>
    0x840102b8     0x6    ld a5,264(a0)
    0x840102bc     0xa    sd a5,88(a1)
    0x840102be     0xc    ld a5,312(a0)
    0x840102c2    0x10    srli a5,a5,0x13
    0x840102c4    0x12    andi a5,a5,1
    0x840102c6    0x14    sd a5,104(a1)
    0x840102c8    0x16    ld a5,320(a0)
    0x840102cc    0x1a    sd a5,96(a1)
    0x840102ce    0x1c    ld a5,312(a0)
    0x840102d2    0x20    srliw a5,a5,0x1b
    0x840102d6    0x24    sd a5,112(a1)
    0x840102d8    0x26    li a0,4
    0x840102da    0x28    ret
    0x840102dc    0x2a    addi sp,sp,-16
    0x840102de    0x2c    sd ra,8(sp)           ; stack access
    0x840102e0    0x2e    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 31 nodes.

Section Arch_handleFaultReply (159 of 271)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x840102a0    0x0    li a5,5
    0x840102a2    0x2    bne a2,a5,ffffffff840102aa <Arch_handleFaultReply+0xa>
    0x840102a6    0x6    li a0,1
    0x840102a8    0x8    ret
    0x840102aa    0xa    addi sp,sp,-16
    0x840102ac    0xc    sd ra,8(sp)           ; stack access
    0x840102ae    0xe    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section interrupt (160 of 271)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840100cc    0x0    sd ra,272(t0)
    0x840100d0    0x4    j ffffffff84013ae8 <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (161 of 271)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840100c4    0x0    sd ra,272(t0)
    0x840100c8    0x4    j ffffffff8401426a <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (162 of 271)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840100ba    0x0    addi ra,ra,4
    0x840100bc    0x2    sd ra,272(t0)
    0x840100c0    0x6    j ffffffff84016f7c <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section maybe_alloc_extra_bi (163 of 271)
=========================================

Deriving specifications
-----------------------

Section `maybe_alloc_extra_bi` consists of 16 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `maybe_alloc_extra_bi`:

    0x840023b0     0x0    bltu a1,a0,ffffffff840023c2 <maybe_alloc_extra_bi+0x12>
    0x840023b4     0x4    auipc a5,0x0
    0x840023b8     0x8    addi a5,a5,2020 # ffffffff84002b98 <ndks_boot>
    0x840023bc     0xc    ld a5,632(a5)
    0x840023c0    0x10    beqz a5,ffffffff840023c4 <maybe_alloc_extra_bi+0x14>
    0x840023c2    0x12    ret
    0x840023c4    0x14    addi sp,sp,-16
    0x840023c6    0x16    sd ra,8(sp)
    0x840023c8    0x18    mv a0,a1
    0x840023ca    0x1a    li a1,1
    0x840023cc    0x1c    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x840023d0    0x20    auipc a5,0x1
    0x840023d4    0x24    sd a0,-1472(a5) # ffffffff84002e10 <rootserver+0x28>
    0x840023d8    0x28    ld ra,8(sp)           ; stack access
    0x840023da    0x2a    addi sp,sp,16
    0x840023dc    0x2c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maybe_alloc_extra_bi` has 27 nodes.

Section alloc_rootserver_obj (164 of 271)
=========================================

Deriving specifications
-----------------------

Section `alloc_rootserver_obj` consists of 16 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `alloc_rootserver_obj`:

    0x84002382     0x0    addi sp,sp,-16
    0x84002384     0x2    sd ra,8(sp)           ; stack access
    0x84002386     0x4    sd s0,0(sp)           ; stack access
    0x84002388     0x6    auipc a5,0x1
    0x8400238c     0xa    addi a5,a5,-2032 # ffffffff84002b98 <ndks_boot>
    0x84002390     0xe    ld s0,664(a5)
    0x84002394    0x12    sll a1,a1,a0
    0x84002398    0x16    add a4,a1,s0
    0x8400239c    0x1a    sd a4,664(a5)
    0x840023a0    0x1e    mv a0,s0
    0x840023a2    0x20    jal ra,ffffffff84015844 <memzero>
    0x840023a6    0x24    mv a0,s0
    0x840023a8    0x26    ld ra,8(sp)           ; stack access
    0x840023aa    0x28    ld s0,0(sp)           ; stack access
    0x840023ac    0x2a    addi sp,sp,16
    0x840023ae    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `alloc_rootserver_obj` has 24 nodes.

Section create_idle_thread (165 of 271)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_idle_thread`:

    0x84002144     0x0    addi sp,sp,-16
    0x84002146     0x2    sd ra,8(sp)           ; stack access
    0x84002148     0x4    auipc a0,0x16
    0x8400214c     0x8    addi a0,a0,-328 # ffffffff84018000 <ksIdleThreadTCB+0x200>
    0x84002150     0xc    auipc a5,0x1b
    0x84002154    0x10    sd a0,856(a5) # ffffffff8401d4a8 <ksIdleThread>
    0x84002158    0x14    jal ra,ffffffff84002116 <configureIdleThread>
    0x8400215c    0x18    li a0,1
    0x8400215e    0x1a    ld ra,8(sp)           ; stack access
    0x84002160    0x1c    addi sp,sp,16
    0x84002162    0x1e    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 16 nodes.

Section configureIdleThread (166 of 271)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `configureIdleThread`:

    0x84002116     0x0    addi sp,sp,-16
    0x84002118     0x2    sd ra,8(sp)           ; stack access
    0x8400211a     0x4    auipc a4,0xe
    0x8400211e     0x8    addi a4,a4,-70 # ffffffff840100d4 <idle_thread>
    0x84002122     0xc    sd a4,272(a0)
    0x84002126    0x10    li a4,288
    0x8400212a    0x14    sd a4,256(a0)
    0x8400212e    0x18    auipc a4,0x1b
    0x84002132    0x1c    addi a4,a4,890 # ffffffff8401d4a8 <ksIdleThread>
    0x84002136    0x20    sd a4,8(a0)
    0x84002138    0x22    li a1,7
    0x8400213a    0x24    jal ra,ffffffff84012404 <setThreadState>
    0x8400213e    0x28    ld ra,8(sp)           ; stack access
    0x84002140    0x2a    addi sp,sp,16
    0x84002142    0x2c    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 22 nodes.

Section create_kernel_untypeds (167 of 271)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 38 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x84001752     0x0    addi sp,sp,-80
    0x84001754     0x2    sd ra,72(sp)          ; stack access
    0x84001756     0x4    sd s0,64(sp)          ; stack access
    0x84001758     0x6    sd s1,56(sp)          ; stack access
    0x8400175a     0x8    sd s2,48(sp)          ; stack access
    0x8400175c     0xa    sd a0,16(sp)          ; stack access
    0x8400175e     0xc    sd a1,24(sp)          ; stack access
    0x84001760     0xe    mv a6,a3
    0x84001762    0x10    mv s1,a4
    0x84001764    0x12    mv a5,a4
    0x84001766    0x14    mv a3,a2
    0x84001768    0x16    mv a4,a6
    0x8400176a    0x18    li a2,0
    0x8400176c    0x1a    jal ra,ffffffff840015a8 <create_untypeds_for_region>
    0x84001770    0x1e    beqz a0,ffffffff840017a4 <create_kernel_untypeds+0x52>
    0x84001772    0x20    auipc s0,0x1
    0x84001776    0x24    addi s0,s0,1374 # ffffffff84002cd0 <ndks_boot+0x138>
    0x8400177a    0x28    auipc s2,0x1
    0x8400177e    0x2c    addi s2,s2,1622 # ffffffff84002dd0 <ndks_boot+0x238>
    0x84001782    0x30    ld a3,0(s0)
    0x84001784    0x32    ld a4,8(s0)
    0x84001786    0x34    sd zero,0(s0)
    0x8400178a    0x38    sd zero,8(s0)
    0x8400178e    0x3c    mv a5,s1
    0x84001790    0x3e    li a2,0
    0x84001792    0x40    ld a0,16(sp)          ; stack access
    0x84001794    0x42    ld a1,24(sp)          ; stack access
    0x84001796    0x44    jal ra,ffffffff840015a8 <create_untypeds_for_region>
    0x8400179a    0x48    beqz a0,ffffffff840017a4 <create_kernel_untypeds+0x52>
    0x8400179c    0x4a    addi s0,s0,16
    0x8400179e    0x4c    bne s0,s2,ffffffff84001782 <create_kernel_untypeds+0x30>
    0x840017a2    0x50    li a0,1
    0x840017a4    0x52    ld ra,72(sp)          ; stack access
    0x840017a6    0x54    ld s0,64(sp)          ; stack access
    0x840017a8    0x56    ld s1,56(sp)          ; stack access
    0x840017aa    0x58    ld s2,48(sp)          ; stack access
    0x840017ac    0x5a    addi sp,sp,80
    0x840017ae    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 63 nodes.

Section create_device_untypeds (168 of 271)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 64 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_device_untypeds`:

    0x840016ba     0x0    addi sp,sp,-96
    0x840016bc     0x2    sd ra,88(sp)          ; stack access
    0x840016be     0x4    sd s0,80(sp)          ; stack access
    0x840016c0     0x6    sd s1,72(sp)          ; stack access
    0x840016c2     0x8    sd s2,64(sp)          ; stack access
    0x840016c4     0xa    sd s3,56(sp)          ; stack access
    0x840016c6     0xc    sd s4,48(sp)          ; stack access
    0x840016c8     0xe    sd s5,40(sp)          ; stack access
    0x840016ca    0x10    sd a0,0(sp)           ; stack access
    0x840016cc    0x12    sd a1,8(sp)           ; stack access
    0x840016ce    0x14    mv s5,a2
    0x840016d0    0x16    auipc a5,0x1
    0x840016d4    0x1a    addi a5,a5,1224 # ffffffff84002b98 <ndks_boot>
    0x840016d8    0x1e    ld a3,304(a5)
    0x840016dc    0x22    beqz a3,ffffffff84001736 <create_device_untypeds+0x7c>
    0x840016de    0x24    mv s0,a5
    0x840016e0    0x26    li s1,0
    0x840016e2    0x28    li a3,0
    0x840016e4    0x2a    li s4,-1
    0x840016e6    0x2c    slli s4,s4,0x26
    0x840016e8    0x2e    mv s3,a5
    0x840016ea    0x30    j ffffffff840016fc <create_device_untypeds+0x42>
    0x840016ec    0x32    ld a3,8(s2)
    0x840016f0    0x36    addi s1,s1,1
    0x840016f2    0x38    addi s0,s0,16
    0x840016f4    0x3a    ld a5,304(s3)
    0x840016f8    0x3e    bgeu s1,a5,ffffffff84001718 <create_device_untypeds+0x5e>
    0x840016fc    0x42    mv s2,s0
    0x840016fe    0x44    ld a4,0(s0)
    0x84001700    0x46    bgeu a3,a4,ffffffff840016ec <create_device_untypeds+0x32>
    0x84001704    0x4a    mv a5,s5
    0x84001706    0x4c    add a3,a3,s4
    0x84001708    0x4e    add a4,a4,s4
    0x8400170a    0x50    li a2,1
    0x8400170c    0x52    ld a0,0(sp)
    0x8400170e    0x54    ld a1,8(sp)           ; stack access
    0x84001710    0x56    jal ra,ffffffff840015a8 <create_untypeds_for_region>
    0x84001714    0x5a    bnez a0,ffffffff840016ec <create_device_untypeds+0x32>
    0x84001716    0x5c    j ffffffff84001724 <create_device_untypeds+0x6a>
    0x84001718    0x5e    lui a5,0xfc000
    0x8400171c    0x62    srli a5,a5,0x19
    0x8400171e    0x64    li a0,1
    0x84001720    0x66    bgeu a5,a3,ffffffff84001736 <create_device_untypeds+0x7c>
    0x84001724    0x6a    ld ra,88(sp)
    0x84001726    0x6c    ld s0,80(sp)
    0x84001728    0x6e    ld s1,72(sp)
    0x8400172a    0x70    ld s2,64(sp)
    0x8400172c    0x72    ld s3,56(sp)
    0x8400172e    0x74    ld s4,48(sp)
    0x84001730    0x76    ld s5,40(sp)
    0x84001732    0x78    addi sp,sp,96
    0x84001734    0x7a    ret
    0x84001736    0x7c    li a4,-1
    0x84001738    0x7e    slli a2,a4,0x26
    0x8400173c    0x82    mv a5,s5
    0x8400173e    0x84    add a3,a3,a2
    0x84001740    0x86    srli a4,a4,0x1a
    0x84001742    0x88    li a2,1
    0x84001744    0x8a    ld a0,0(sp)
    0x84001746    0x8c    ld a1,8(sp)
    0x84001748    0x8e    jal ra,ffffffff840015a8 <create_untypeds_for_region>
    0x8400174c    0x92    beqz a0,ffffffff84001724 <create_device_untypeds+0x6a>
    0x8400174e    0x94    li a0,1
    0x84001750    0x96    j ffffffff84001724 <create_device_untypeds+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 103 nodes.

Section calculate_extra_bi_size_bits (169 of 271)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x84000dfc     0x0    beqz a0,ffffffff84000e34 <calculate_extra_bi_size_bits+0x38>
    0x84000dfe     0x2    addi sp,sp,-16
    0x84000e00     0x4    sd ra,8(sp)           ; stack access
    0x84000e02     0x6    sd s0,0(sp)           ; stack access
    0x84000e04     0x8    mv s0,a0
    0x84000e06     0xa    addi a0,a0,-1
    0x84000e08     0xc    srli a0,a0,0xc
    0x84000e0a     0xe    addi a0,a0,1
    0x84000e0c    0x10    slli a0,a0,0xc
    0x84000e0e    0x12    jal ra,ffffffff8401712c <__clzdi2>
    0x84000e12    0x16    sext.w a4,a0
    0x84000e16    0x1a    li a0,63
    0x84000e1a    0x1e    sub a0,a0,a4
    0x84000e1c    0x20    li a5,1
    0x84000e1e    0x22    sll a5,a5,a0
    0x84000e22    0x26    bgeu a5,s0,ffffffff84000e2c <calculate_extra_bi_size_bits+0x30>
    0x84000e26    0x2a    li a0,64
    0x84000e2a    0x2e    sub a0,a0,a4
    0x84000e2c    0x30    ld ra,8(sp)           ; stack access
    0x84000e2e    0x32    ld s0,0(sp)           ; stack access
    0x84000e30    0x34    addi sp,sp,16
    0x84000e32    0x36    ret
    0x84000e34    0x38    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 34 nodes.

Section create_bi_frame_cap (170 of 271)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 128 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x84000ca0      0x0    addi sp,sp,-64
    0x84000ca2      0x2    sd ra,56(sp)          ; stack access
    0x84000ca4      0x4    sd a0,16(sp)          ; stack access
    0x84000ca6      0x6    sd a1,24(sp)          ; stack access
    0x84000ca8      0x8    mv a0,a2
    0x84000caa      0xa    mv a1,a3
    0x84000cac      0xc    mv a3,a4
    0x84000cae      0xe    li a6,0
    0x84000cb0     0x10    li a5,0
    0x84000cb2     0x12    li a4,1
    0x84000cb4     0x14    auipc a2,0x2
    0x84000cb8     0x18    addi a2,a2,-284 # ffffffff84002b98 <ndks_boot>
    0x84000cbc     0x1c    ld a2,624(a2)
    0x84000cc0     0x20    jal ra,ffffffff84000918 <create_mapped_it_frame_cap>
    0x84000cc4     0x24    sd a0,32(sp)          ; stack access
    0x84000cc6     0x26    sd a1,40(sp)          ; stack access
    0x84000cc8     0x28    ld a4,16(sp)          ; stack access
    0x84000cca     0x2a    ld a0,24(sp)          ; stack access
    0x84000ccc     0x2c    srli a2,a4,0x3b
    0x84000cd0     0x30    li a5,20
    0x84000cd2     0x32    bltu a5,a2,ffffffff84000d80 <create_bi_frame_cap+0xe0>
    0x84000cd6     0x36    slli a3,a2,0x2
    0x84000cda     0x3a    auipc a1,0x16
    0x84000cde     0x3e    addi a1,a1,1834 # ffffffff84017404 <ksDomScheduleLength+0x294>
    0x84000ce2     0x42    add a3,a3,a1
    0x84000ce4     0x44    lw a5,0(a3)
    0x84000ce6     0x46    add a5,a5,a1
    0x84000ce8     0x48    jr a5
    0x84000cea     0x4a    slli a5,a4,0x19
    0x84000cee     0x4e    srli a5,a5,0x19
    0x84000cf0     0x50    slli a3,a4,0x19
    0x84000cf4     0x54    bgez a3,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000cf8     0x58    li a4,-1
    0x84000cfa     0x5a    slli a4,a4,0x27
    0x84000cfc     0x5c    or a5,a5,a4
    0x84000cfe     0x5e    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d00     0x60    slli a5,a4,0x19
    0x84000d04     0x64    srli a5,a5,0x19
    0x84000d06     0x66    slli a3,a4,0x19
    0x84000d0a     0x6a    bgez a3,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d0e     0x6e    li a4,-1
    0x84000d10     0x70    slli a4,a4,0x27
    0x84000d12     0x72    or a5,a5,a4
    0x84000d14     0x74    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d16     0x76    slli a5,a4,0x19
    0x84000d1a     0x7a    srli a5,a5,0x19
    0x84000d1c     0x7c    slli a3,a4,0x19
    0x84000d20     0x80    bgez a3,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d24     0x84    li a4,-1
    0x84000d26     0x86    slli a4,a4,0x27
    0x84000d28     0x88    or a5,a5,a4
    0x84000d2a     0x8a    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d2c     0x8c    slli a4,a4,0x1
    0x84000d2e     0x8e    lui a5,0xfc000
    0x84000d32     0x92    srli a5,a5,0x19
    0x84000d34     0x94    and a5,a5,a4
    0x84000d36     0x96    slli a3,a4,0x19
    0x84000d3a     0x9a    bgez a3,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d3e     0x9e    li a4,-1
    0x84000d40     0xa0    slli a4,a4,0x27
    0x84000d42     0xa2    or a5,a5,a4
    0x84000d44     0xa4    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d46     0xa6    slli a5,a4,0x19
    0x84000d4a     0xaa    srli a5,a5,0x19
    0x84000d4c     0xac    slli a3,a4,0x19
    0x84000d50     0xb0    bgez a3,ffffffff84000d5a <create_bi_frame_cap+0xba>
    0x84000d54     0xb4    li a4,-1
    0x84000d56     0xb6    slli a4,a4,0x27
    0x84000d58     0xb8    or a5,a5,a4
    0x84000d5a     0xba    andi a5,a5,-1024
    0x84000d5e     0xbe    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d60     0xc0    andi a5,a4,127
    0x84000d64     0xc4    li a3,64
    0x84000d68     0xc8    beq a5,a3,ffffffff84000d7c <create_bi_frame_cap+0xdc>
    0x84000d6c     0xcc    andi a4,a4,63
    0x84000d70     0xd0    addiw a4,a4,1
    0x84000d72     0xd2    li a5,-1
    0x84000d74     0xd4    sll a5,a5,a4
    0x84000d78     0xd8    and a5,a5,a0
    0x84000d7a     0xda    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d7c     0xdc    li a4,4
    0x84000d7e     0xde    j ffffffff84000d70 <create_bi_frame_cap+0xd0>
    0x84000d80     0xe0    li a5,3
    0x84000d82     0xe2    beq a2,a5,ffffffff84000dac <create_bi_frame_cap+0x10c>
    0x84000d86     0xe6    li a5,13
    0x84000d88     0xe8    beq a2,a5,ffffffff84000dc4 <create_bi_frame_cap+0x124>
    0x84000d8c     0xec    li a4,1
    0x84000d8e     0xee    li a5,0
    0x84000d90     0xf0    bne a2,a4,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000d94     0xf4    srli a0,a0,0x9
    0x84000d96     0xf6    slli a5,a0,0x19
    0x84000d9a     0xfa    srli a5,a5,0x19
    0x84000d9c     0xfc    slli a4,a0,0x19
    0x84000da0    0x100    bgez a4,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000da4    0x104    li a4,-1
    0x84000da6    0x106    slli a4,a4,0x27
    0x84000da8    0x108    or a5,a5,a4
    0x84000daa    0x10a    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000dac    0x10c    srli a0,a0,0x9
    0x84000dae    0x10e    slli a5,a0,0x19
    0x84000db2    0x112    srli a5,a5,0x19
    0x84000db4    0x114    slli a4,a0,0x19
    0x84000db8    0x118    bgez a4,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000dbc    0x11c    li a4,-1
    0x84000dbe    0x11e    slli a4,a4,0x27
    0x84000dc0    0x120    or a5,a5,a4
    0x84000dc2    0x122    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000dc4    0x124    slli a4,a4,0x2
    0x84000dc6    0x126    lui a5,0xf8000
    0x84000dca    0x12a    srli a5,a5,0x19
    0x84000dcc    0x12c    and a5,a5,a4
    0x84000dce    0x12e    slli a3,a4,0x19
    0x84000dd2    0x132    bgez a3,ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000dd6    0x136    li a4,-1
    0x84000dd8    0x138    slli a4,a4,0x27
    0x84000dda    0x13a    or a5,a5,a4
    0x84000ddc    0x13c    j ffffffff84000de0 <create_bi_frame_cap+0x140>
    0x84000dde    0x13e    li a5,0
    0x84000de0    0x140    ld a4,32(sp)          ; stack access
    0x84000de2    0x142    sd a4,288(a5) # fffffffff8000120 <ki_end+0x73fd2120>
    0x84000de6    0x146    ld a4,40(sp)          ; stack access
    0x84000de8    0x148    sd a4,296(a5)
    0x84000dec    0x14c    sd zero,304(a5)
    0x84000df0    0x150    li a4,3
    0x84000df2    0x152    sd a4,312(a5)
    0x84000df6    0x156    ld ra,56(sp)          ; stack access
    0x84000df8    0x158    addi sp,sp,64
    0x84000dfa    0x15a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
128 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 173 nodes.

Section insert_region (171 of 271)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 45 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `insert_region`:

    0x84000aae     0x0    addi sp,sp,-48
    0x84000ab0     0x2    sd ra,40(sp)          ; stack access
    0x84000ab2     0x4    sd s0,32(sp)          ; stack access
    0x84000ab4     0x6    sd a0,0(sp)           ; stack access
    0x84000ab6     0x8    sd a1,8(sp)           ; stack access
    0x84000ab8     0xa    beq a1,a0,ffffffff84000b1e <insert_region+0x70>
    0x84000abc     0xe    auipc a5,0x2
    0x84000ac0    0x12    addi a5,a5,220 # ffffffff84002b98 <ndks_boot>
    0x84000ac4    0x16    ld a4,312(a5)
    0x84000ac8    0x1a    ld a5,320(a5)
    0x84000acc    0x1e    beq a4,a5,ffffffff84000af6 <insert_region+0x48>
    0x84000ad0    0x22    auipc a5,0x2
    0x84000ad4    0x26    addi a5,a5,528 # ffffffff84002ce0 <ndks_boot+0x148>
    0x84000ad8    0x2a    li s0,1
    0x84000ada    0x2c    li a2,16
    0x84000adc    0x2e    ld a3,0(a5)
    0x84000ade    0x30    ld a4,8(a5)
    0x84000ae0    0x32    beq a3,a4,ffffffff84000af8 <insert_region+0x4a>
    0x84000ae4    0x36    addi s0,s0,1
    0x84000ae6    0x38    addi a5,a5,16
    0x84000ae8    0x3a    bne s0,a2,ffffffff84000adc <insert_region+0x2e>
    0x84000aec    0x3e    li a0,0
    0x84000aee    0x40    ld ra,40(sp)          ; stack access
    0x84000af0    0x42    ld s0,32(sp)          ; stack access
    0x84000af2    0x44    addi sp,sp,48
    0x84000af4    0x46    ret
    0x84000af6    0x48    li s0,0
    0x84000af8    0x4a    li a5,1
    0x84000afa    0x4c    slli a5,a5,0x26
    0x84000afc    0x4e    add a0,a0,a5
    0x84000afe    0x50    add a1,a1,a5
    0x84000b00    0x52    jal ra,ffffffff8400098e <reserve_region>
    0x84000b04    0x56    addi s0,s0,19
    0x84000b06    0x58    slli s0,s0,0x4
    0x84000b08    0x5a    auipc a5,0x2
    0x84000b0c    0x5e    addi a5,a5,144 # ffffffff84002b98 <ndks_boot>
    0x84000b10    0x62    add s0,s0,a5
    0x84000b12    0x64    ld a5,0(sp)           ; stack access
    0x84000b14    0x66    sd a5,8(s0)
    0x84000b16    0x68    ld a5,8(sp)           ; stack access
    0x84000b18    0x6a    sd a5,16(s0)
    0x84000b1a    0x6c    li a0,1
    0x84000b1c    0x6e    j ffffffff84000aee <insert_region+0x40>
    0x84000b1e    0x70    li a0,1
    0x84000b20    0x72    j ffffffff84000aee <insert_region+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 69 nodes.

Section reserve_region (172 of 271)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 97 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `reserve_region`:

    0x8400098e      0x0    beq a1,a0,ffffffff84000aa8 <reserve_region+0x11a>
    0x84000992      0x4    addi sp,sp,-32
    0x84000994      0x6    sd ra,24(sp)          ; stack access
    0x84000996      0x8    auipc a5,0x2
    0x8400099a      0xc    addi a5,a5,514 # ffffffff84002b98 <ndks_boot>
    0x8400099e     0x10    ld a7,304(a5)
    0x840009a2     0x14    beqz a7,ffffffff84000a86 <reserve_region+0xf8>
    0x840009a6     0x18    mv a2,a1
    0x840009a8     0x1a    mv t1,a0
    0x840009aa     0x1c    ld a5,0(a5)
    0x840009ac     0x1e    beq a1,a5,ffffffff84000a36 <reserve_region+0xa8>
    0x840009b0     0x22    auipc a4,0x2
    0x840009b4     0x26    addi a4,a4,488 # ffffffff84002b98 <ndks_boot>
    0x840009b8     0x2a    ld a4,8(a4)
    0x840009ba     0x2c    beq a0,a4,ffffffff84000a56 <reserve_region+0xc8>
    0x840009be     0x30    bltu a1,a5,ffffffff84000a6e <reserve_region+0xe0>
    0x840009c2     0x34    auipc a5,0x2
    0x840009c6     0x38    addi a5,a5,486 # ffffffff84002ba8 <ndks_boot+0x10>
    0x840009ca     0x3c    li a4,0
    0x840009cc     0x3e    addi a4,a4,1
    0x840009ce     0x40    beq a4,a7,ffffffff84000a7e <reserve_region+0xf0>
    0x840009d2     0x44    ld a3,0(a5)
    0x840009d4     0x46    beq a3,a2,ffffffff84000a38 <reserve_region+0xaa>
    0x840009d8     0x4a    ld a6,8(a5)
    0x840009dc     0x4e    beq a6,t1,ffffffff84000a58 <reserve_region+0xca>
    0x840009e0     0x52    addi a5,a5,16
    0x840009e2     0x54    bgeu a2,a3,ffffffff840009cc <reserve_region+0x3e>
    0x840009e6     0x58    addi a3,a7,1
    0x840009ea     0x5c    li a1,18
    0x840009ec     0x5e    li a5,0
    0x840009ee     0x60    bltu a1,a3,ffffffff84000a4e <reserve_region+0xc0>
    0x840009f2     0x64    slli a3,a7,0x4
    0x840009f6     0x68    auipc a5,0x2
    0x840009fa     0x6c    addi a5,a5,418 # ffffffff84002b98 <ndks_boot>
    0x840009fe     0x70    add a5,a5,a3
    0x84000a00     0x72    addi a7,a7,-1
    0x84000a02     0x74    ld a3,-16(a5)
    0x84000a06     0x78    sd a3,0(a5)
    0x84000a08     0x7a    ld a3,-8(a5)
    0x84000a0c     0x7e    sd a3,8(a5)
    0x84000a0e     0x80    addi a5,a5,-16
    0x84000a10     0x82    bltu a4,a7,ffffffff84000a00 <reserve_region+0x72>
    0x84000a14     0x86    auipc a3,0x2
    0x84000a18     0x8a    addi a3,a3,388 # ffffffff84002b98 <ndks_boot>
    0x84000a1c     0x8e    slli a5,a4,0x4
    0x84000a20     0x92    add a5,a5,a3
    0x84000a22     0x94    sd t1,0(a5)
    0x84000a26     0x98    sd a2,8(a5)
    0x84000a28     0x9a    ld a5,304(a3)
    0x84000a2c     0x9e    addi a5,a5,1
    0x84000a2e     0xa0    sd a5,304(a3)
    0x84000a32     0xa4    li a5,1
    0x84000a34     0xa6    j ffffffff84000a4e <reserve_region+0xc0>
    0x84000a36     0xa8    li a4,0
    0x84000a38     0xaa    slli a4,a4,0x4
    0x84000a3a     0xac    auipc a5,0x2
    0x84000a3e     0xb0    addi a5,a5,350 # ffffffff84002b98 <ndks_boot>
    0x84000a42     0xb4    add a4,a4,a5
    0x84000a44     0xb6    sd t1,0(a4)
    0x84000a48     0xba    jal ra,ffffffff84000026 <merge_regions>
    0x84000a4c     0xbe    li a5,1
    0x84000a4e     0xc0    mv a0,a5
    0x84000a50     0xc2    ld ra,24(sp)          ; stack access
    0x84000a52     0xc4    addi sp,sp,32
    0x84000a54     0xc6    ret
    0x84000a56     0xc8    li a4,0
    0x84000a58     0xca    slli a4,a4,0x4
    0x84000a5a     0xcc    auipc a5,0x2
    0x84000a5e     0xd0    addi a5,a5,318 # ffffffff84002b98 <ndks_boot>
    0x84000a62     0xd4    add a4,a4,a5
    0x84000a64     0xd6    sd a2,8(a4)
    0x84000a66     0xd8    jal ra,ffffffff84000026 <merge_regions>
    0x84000a6a     0xdc    li a5,1
    0x84000a6c     0xde    j ffffffff84000a4e <reserve_region+0xc0>
    0x84000a6e     0xe0    addi a4,a7,1
    0x84000a72     0xe4    li a3,18
    0x84000a74     0xe6    li a5,0
    0x84000a76     0xe8    bltu a3,a4,ffffffff84000a4e <reserve_region+0xc0>
    0x84000a7a     0xec    li a4,0
    0x84000a7c     0xee    j ffffffff840009f2 <reserve_region+0x64>
    0x84000a7e     0xf0    li a4,18
    0x84000a80     0xf2    li a5,0
    0x84000a82     0xf4    beq a7,a4,ffffffff84000a4e <reserve_region+0xc0>
    0x84000a86     0xf8    auipc a5,0x2
    0x84000a8a     0xfc    addi a5,a5,274 # ffffffff84002b98 <ndks_boot>
    0x84000a8e    0x100    slli a7,a7,0x4
    0x84000a90    0x102    add a7,a7,a5
    0x84000a92    0x104    sd a0,0(a7)
    0x84000a96    0x108    sd a1,8(a7)
    0x84000a9a    0x10c    ld a4,304(a5)
    0x84000a9e    0x110    addi a4,a4,1
    0x84000aa0    0x112    sd a4,304(a5)
    0x84000aa4    0x116    li a5,1
    0x84000aa6    0x118    j ffffffff84000a4e <reserve_region+0xc0>
    0x84000aa8    0x11a    li a5,1
    0x84000aaa    0x11c    mv a0,a5
    0x84000aac    0x11e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 148 nodes.

Section create_mapped_it_frame_cap (173 of 271)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

Section `create_mapped_it_frame_cap` expects pointer to stack in a0.
6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x84000918     0x0    addi sp,sp,-80
    0x8400091a     0x2    sd ra,72(sp)          ; stack access
    0x8400091c     0x4    sd s0,64(sp)          ; stack access
    0x8400091e     0x6    sd s1,56(sp)          ; stack access
    0x84000920     0x8    snez a5,a5
    0x84000924     0xc    slli a5,a5,0x39
    0x84000926     0xe    slli a3,a3,0x19
    0x84000928    0x10    srli a3,a3,0x19
    0x8400092a    0x12    or a5,a5,a3
    0x8400092c    0x14    li s0,35
    0x84000930    0x18    slli s0,s0,0x36
    0x84000932    0x1a    or s0,s0,a5
    0x84000934    0x1c    slli a2,a2,0x9
    0x84000936    0x1e    lui s1,0xfe000
    0x8400093a    0x22    srli s1,s1,0x10
    0x8400093c    0x24    and s1,s1,a2
    0x8400093e    0x26    slli a4,a4,0x30
    0x84000940    0x28    or s1,s1,a4
    0x84000942    0x2a    mv a2,s0
    0x84000944    0x2c    mv a3,s1
    0x84000946    0x2e    jal ra,ffffffff8400068c <map_it_frame_cap>
    0x8400094a    0x32    mv a0,s0
    0x8400094c    0x34    mv a1,s1
    0x8400094e    0x36    ld ra,72(sp)          ; stack access
    0x84000950    0x38    ld s0,64(sp)          ; stack access
    0x84000952    0x3a    ld s1,56(sp)          ; stack access
    0x84000954    0x3c    addi sp,sp,80
    0x84000956    0x3e    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section map_it_frame_cap (174 of 271)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 235 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

11 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x8400068c      0x0    addi sp,sp,-64
    0x8400068e      0x2    sd ra,56(sp)          ; stack access
    0x84000690      0x4    sd s0,48(sp)          ; stack access
    0x84000692      0x6    sd a0,16(sp)          ; stack access
    0x84000694      0x8    sd a1,24(sp)          ; stack access
    0x84000696      0xa    sd a2,0(sp)           ; stack access
    0x84000698      0xc    sd a3,8(sp)           ; stack access
    0x8400069a      0xe    srli a3,a0,0x3b
    0x8400069e     0x12    li a5,20
    0x840006a0     0x14    bltu a5,a3,ffffffff84000756 <map_it_frame_cap+0xca>
    0x840006a4     0x18    slli a4,a3,0x2
    0x840006a8     0x1c    auipc a6,0x17
    0x840006ac     0x20    addi a6,a6,-992 # ffffffff840172c8 <ksDomScheduleLength+0x158>
    0x840006b0     0x24    add a4,a4,a6
    0x840006b2     0x26    lw a5,0(a4)
    0x840006b4     0x28    add a5,a5,a6
    0x840006b6     0x2a    jr a5
    0x840006b8     0x2c    slli a5,a0,0x19
    0x840006bc     0x30    srli a5,a5,0x19
    0x840006be     0x32    slli a4,a0,0x19
    0x840006c2     0x36    bgez a4,ffffffff840006cc <map_it_frame_cap+0x40>
    0x840006c6     0x3a    li a4,-1
    0x840006c8     0x3c    slli a4,a4,0x27
    0x840006ca     0x3e    or a5,a5,a4
    0x840006cc     0x40    mv a0,a5
    0x840006ce     0x42    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x840006d0     0x44    slli a5,a0,0x19
    0x840006d4     0x48    srli a5,a5,0x19
    0x840006d6     0x4a    slli a4,a0,0x19
    0x840006da     0x4e    bgez a4,ffffffff840006e4 <map_it_frame_cap+0x58>
    0x840006de     0x52    li a4,-1
    0x840006e0     0x54    slli a4,a4,0x27
    0x840006e2     0x56    or a5,a5,a4
    0x840006e4     0x58    mv a0,a5
    0x840006e6     0x5a    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x840006e8     0x5c    slli a5,a0,0x19
    0x840006ec     0x60    srli a5,a5,0x19
    0x840006ee     0x62    slli a4,a0,0x19
    0x840006f2     0x66    bgez a4,ffffffff840006fc <map_it_frame_cap+0x70>
    0x840006f6     0x6a    li a4,-1
    0x840006f8     0x6c    slli a4,a4,0x27
    0x840006fa     0x6e    or a5,a5,a4
    0x840006fc     0x70    mv a0,a5
    0x840006fe     0x72    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x84000700     0x74    slli a5,a0,0x1
    0x84000704     0x78    lui a0,0xfc000
    0x84000708     0x7c    srli a0,a0,0x19
    0x8400070a     0x7e    and a0,a0,a5
    0x8400070c     0x80    slli a4,a5,0x19
    0x84000710     0x84    bgez a4,ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x84000714     0x88    li a5,-1
    0x84000716     0x8a    slli a5,a5,0x27
    0x84000718     0x8c    or a0,a0,a5
    0x8400071a     0x8e    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x8400071c     0x90    slli a5,a0,0x19
    0x84000720     0x94    srli a5,a5,0x19
    0x84000722     0x96    slli a4,a0,0x19
    0x84000726     0x9a    bgez a4,ffffffff84000730 <map_it_frame_cap+0xa4>
    0x8400072a     0x9e    li a4,-1
    0x8400072c     0xa0    slli a4,a4,0x27
    0x8400072e     0xa2    or a5,a5,a4
    0x84000730     0xa4    andi a0,a5,-1024
    0x84000734     0xa8    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x84000736     0xaa    andi a5,a0,127
    0x8400073a     0xae    li a4,64
    0x8400073e     0xb2    beq a5,a4,ffffffff84000752 <map_it_frame_cap+0xc6>
    0x84000742     0xb6    andi a0,a0,63
    0x84000746     0xba    addiw a0,a0,1
    0x84000748     0xbc    li a5,-1
    0x8400074a     0xbe    sll a0,a5,a0
    0x8400074e     0xc2    and a0,a0,a1
    0x84000750     0xc4    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x84000752     0xc6    li a0,4
    0x84000754     0xc8    j ffffffff84000746 <map_it_frame_cap+0xba>
    0x84000756     0xca    li a5,3
    0x84000758     0xcc    beq a3,a5,ffffffff84000782 <map_it_frame_cap+0xf6>
    0x8400075c     0xd0    li a5,13
    0x8400075e     0xd2    beq a3,a5,ffffffff8400079a <map_it_frame_cap+0x10e>
    0x84000762     0xd6    li a5,1
    0x84000764     0xd8    li a0,0
    0x84000766     0xda    bne a3,a5,ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x8400076a     0xde    srli a1,a1,0x9
    0x8400076c     0xe0    slli a0,a1,0x19
    0x84000770     0xe4    srli a0,a0,0x19
    0x84000772     0xe6    slli a5,a1,0x19
    0x84000776     0xea    bgez a5,ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x8400077a     0xee    li a5,-1
    0x8400077c     0xf0    slli a5,a5,0x27
    0x8400077e     0xf2    or a0,a0,a5
    0x84000780     0xf4    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x84000782     0xf6    srli a1,a1,0x9
    0x84000784     0xf8    slli a0,a1,0x19
    0x84000788     0xfc    srli a0,a0,0x19
    0x8400078a     0xfe    slli a5,a1,0x19
    0x8400078e    0x102    bgez a5,ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x84000792    0x106    li a5,-1
    0x84000794    0x108    slli a5,a5,0x27
    0x84000796    0x10a    or a0,a0,a5
    0x84000798    0x10c    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x8400079a    0x10e    slli a5,a0,0x2
    0x8400079e    0x112    lui a0,0xf8000
    0x840007a2    0x116    srli a0,a0,0x19
    0x840007a4    0x118    and a0,a0,a5
    0x840007a6    0x11a    slli a4,a5,0x19
    0x840007aa    0x11e    bgez a4,ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x840007ae    0x122    li a5,-1
    0x840007b0    0x124    slli a5,a5,0x27
    0x840007b2    0x126    or a0,a0,a5
    0x840007b4    0x128    j ffffffff840007b8 <map_it_frame_cap+0x12c>
    0x840007b6    0x12a    li a0,0
    0x840007b8    0x12c    ld a6,8(sp)           ; stack access
    0x840007ba    0x12e    srli a3,a2,0x3b
    0x840007be    0x132    li a5,20
    0x840007c0    0x134    bltu a5,a3,ffffffff84000874 <map_it_frame_cap+0x1e8>
    0x840007c4    0x138    slli a4,a3,0x2
    0x840007c8    0x13c    auipc a1,0x17
    0x840007cc    0x140    addi a1,a1,-1196 # ffffffff8401731c <ksDomScheduleLength+0x1ac>
    0x840007d0    0x144    add a4,a4,a1
    0x840007d2    0x146    lw a5,0(a4)
    0x840007d4    0x148    add a5,a5,a1
    0x840007d6    0x14a    jr a5
    0x840007d8    0x14c    slli s0,a2,0x19
    0x840007dc    0x150    srli s0,s0,0x19
    0x840007de    0x152    slli a5,a2,0x19
    0x840007e2    0x156    bgez a5,ffffffff840008da <map_it_frame_cap+0x24e>
    0x840007e6    0x15a    li a5,-1
    0x840007e8    0x15c    slli a5,a5,0x27
    0x840007ea    0x15e    or s0,s0,a5
    0x840007ec    0x160    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x840007ee    0x162    slli s0,a2,0x19
    0x840007f2    0x166    srli s0,s0,0x19
    0x840007f4    0x168    slli a5,a2,0x19
    0x840007f8    0x16c    bgez a5,ffffffff840008da <map_it_frame_cap+0x24e>
    0x840007fc    0x170    li a5,-1
    0x840007fe    0x172    slli a5,a5,0x27
    0x84000800    0x174    or s0,s0,a5
    0x84000802    0x176    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x84000804    0x178    slli s0,a2,0x19
    0x84000808    0x17c    srli s0,s0,0x19
    0x8400080a    0x17e    slli a5,a2,0x19
    0x8400080e    0x182    bgez a5,ffffffff840008da <map_it_frame_cap+0x24e>
    0x84000812    0x186    li a5,-1
    0x84000814    0x188    slli a5,a5,0x27
    0x84000816    0x18a    or s0,s0,a5
    0x84000818    0x18c    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x8400081a    0x18e    slli a5,a2,0x1
    0x8400081e    0x192    lui s0,0xfc000
    0x84000822    0x196    srli s0,s0,0x19
    0x84000824    0x198    and s0,s0,a5
    0x84000826    0x19a    slli a4,a5,0x19
    0x8400082a    0x19e    bgez a4,ffffffff840008da <map_it_frame_cap+0x24e>
    0x8400082e    0x1a2    li a5,-1
    0x84000830    0x1a4    slli a5,a5,0x27
    0x84000832    0x1a6    or s0,s0,a5
    0x84000834    0x1a8    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x84000836    0x1aa    slli s0,a2,0x19
    0x8400083a    0x1ae    srli s0,s0,0x19
    0x8400083c    0x1b0    slli a5,a2,0x19
    0x84000840    0x1b4    bgez a5,ffffffff8400084a <map_it_frame_cap+0x1be>
    0x84000844    0x1b8    li a5,-1
    0x84000846    0x1ba    slli a5,a5,0x27
    0x84000848    0x1bc    or s0,s0,a5
    0x8400084a    0x1be    andi s0,s0,-1024
    0x8400084e    0x1c2    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x84000850    0x1c4    andi a5,a2,127
    0x84000854    0x1c8    li a4,64
    0x84000858    0x1cc    beq a5,a4,ffffffff84000870 <map_it_frame_cap+0x1e4>
    0x8400085c    0x1d0    andi s0,a2,63
    0x84000860    0x1d4    addiw a5,s0,1
    0x84000864    0x1d8    li s0,-1
    0x84000866    0x1da    sll s0,s0,a5
    0x8400086a    0x1de    and s0,s0,a6
    0x8400086e    0x1e2    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x84000870    0x1e4    li s0,4
    0x84000872    0x1e6    j ffffffff84000860 <map_it_frame_cap+0x1d4>
    0x84000874    0x1e8    li a5,3
    0x84000876    0x1ea    beq a3,a5,ffffffff840008a2 <map_it_frame_cap+0x216>
    0x8400087a    0x1ee    li a5,13
    0x8400087c    0x1f0    beq a3,a5,ffffffff840008bc <map_it_frame_cap+0x230>
    0x84000880    0x1f4    li a5,1
    0x84000882    0x1f6    li s0,0
    0x84000884    0x1f8    bne a3,a5,ffffffff840008da <map_it_frame_cap+0x24e>
    0x84000888    0x1fc    srli a6,a6,0x9
    0x8400088c    0x200    slli s0,a6,0x19
    0x84000890    0x204    srli s0,s0,0x19
    0x84000892    0x206    slli a5,a6,0x19
    0x84000896    0x20a    bgez a5,ffffffff840008da <map_it_frame_cap+0x24e>
    0x8400089a    0x20e    li a5,-1
    0x8400089c    0x210    slli a5,a5,0x27
    0x8400089e    0x212    or s0,s0,a5
    0x840008a0    0x214    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x840008a2    0x216    srli a6,a6,0x9
    0x840008a6    0x21a    slli s0,a6,0x19
    0x840008aa    0x21e    srli s0,s0,0x19
    0x840008ac    0x220    slli a5,a6,0x19
    0x840008b0    0x224    bgez a5,ffffffff840008da <map_it_frame_cap+0x24e>
    0x840008b4    0x228    li a5,-1
    0x840008b6    0x22a    slli a5,a5,0x27
    0x840008b8    0x22c    or s0,s0,a5
    0x840008ba    0x22e    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x840008bc    0x230    slli a5,a2,0x2
    0x840008c0    0x234    lui s0,0xf8000
    0x840008c4    0x238    srli s0,s0,0x19
    0x840008c6    0x23a    and s0,s0,a5
    0x840008c8    0x23c    slli a4,a5,0x19
    0x840008cc    0x240    bgez a4,ffffffff840008da <map_it_frame_cap+0x24e>
    0x840008d0    0x244    li a5,-1
    0x840008d2    0x246    slli a5,a5,0x27
    0x840008d4    0x248    or s0,s0,a5
    0x840008d6    0x24a    j ffffffff840008da <map_it_frame_cap+0x24e>
    0x840008d8    0x24c    li s0,0
    0x840008da    0x24e    slli a1,a2,0x19
    0x840008de    0x252    srli a1,a1,0x19
    0x840008e0    0x254    slli a5,a2,0x19
    0x840008e4    0x258    bgez a5,ffffffff840008ee <map_it_frame_cap+0x262>
    0x840008e8    0x25c    li a5,-1
    0x840008ea    0x25e    slli a5,a5,0x27
    0x840008ec    0x260    or a1,a1,a5
    0x840008ee    0x262    jal ra,ffffffff84010630 <lookupPTSlot>
    0x840008f2    0x266    sd a0,32(sp)          ; stack access
    0x840008f4    0x268    sd a1,40(sp)          ; stack access
    0x840008f6    0x26a    li a5,1
    0x840008f8    0x26c    slli a5,a5,0x26
    0x840008fa    0x26e    add s0,s0,a5
    0x840008fc    0x270    srli s0,s0,0x2
    0x840008fe    0x272    lui a5,0xfff00
    0x84000902    0x276    srli a5,a5,0xa
    0x84000904    0x278    and s0,s0,a5
    0x84000906    0x27a    ori s0,s0,223
    0x8400090a    0x27e    sd s0,0(a0)
    0x8400090c    0x280    sfence.vma
    0x84000910    0x284    ld ra,56(sp)          ; stack access
    0x84000912    0x286    ld s0,48(sp)          ; stack access
    0x84000914    0x288    addi sp,sp,64
    0x84000916    0x28a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
235 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 308 nodes.

Section map_it_pt_cap (175 of 271)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 209 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x84000450      0x0    addi sp,sp,-64
    0x84000452      0x2    sd ra,56(sp)          ; stack access
    0x84000454      0x4    sd s0,48(sp)          ; stack access
    0x84000456      0x6    sd a0,16(sp)          ; stack access
    0x84000458      0x8    sd a1,24(sp)          ; stack access
    0x8400045a      0xa    sd a2,0(sp)           ; stack access
    0x8400045c      0xc    sd a3,8(sp)           ; stack access
    0x8400045e      0xe    slli a1,a2,0x19
    0x84000462     0x12    srli a1,a1,0x19
    0x84000464     0x14    slli a5,a2,0x19
    0x84000468     0x18    bgez a5,ffffffff84000472 <map_it_pt_cap+0x22>
    0x8400046c     0x1c    li a5,-1
    0x8400046e     0x1e    slli a5,a5,0x27
    0x84000470     0x20    or a1,a1,a5
    0x84000472     0x22    ld a5,16(sp)          ; stack access
    0x84000474     0x24    ld a7,24(sp)          ; stack access
    0x84000476     0x26    srli a6,a5,0x3b
    0x8400047a     0x2a    li a4,20
    0x8400047c     0x2c    bltu a4,a6,ffffffff8400052c <map_it_pt_cap+0xdc>
    0x84000480     0x30    slli a3,a6,0x2
    0x84000484     0x34    auipc a0,0x17
    0x84000488     0x38    addi a0,a0,-612 # ffffffff84017220 <ksDomScheduleLength+0xb0>
    0x8400048c     0x3c    add a3,a3,a0
    0x8400048e     0x3e    lw a4,0(a3)
    0x84000490     0x40    add a4,a4,a0
    0x84000492     0x42    jr a4
    0x84000494     0x44    slli a0,a5,0x19
    0x84000498     0x48    srli a0,a0,0x19
    0x8400049a     0x4a    slli a4,a5,0x19
    0x8400049e     0x4e    bgez a4,ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004a2     0x52    li a5,-1
    0x840004a4     0x54    slli a5,a5,0x27
    0x840004a6     0x56    or a0,a0,a5
    0x840004a8     0x58    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004aa     0x5a    slli a0,a5,0x19
    0x840004ae     0x5e    srli a0,a0,0x19
    0x840004b0     0x60    slli a4,a5,0x19
    0x840004b4     0x64    bgez a4,ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004b8     0x68    li a5,-1
    0x840004ba     0x6a    slli a5,a5,0x27
    0x840004bc     0x6c    or a0,a0,a5
    0x840004be     0x6e    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004c0     0x70    slli a0,a5,0x19
    0x840004c4     0x74    srli a0,a0,0x19
    0x840004c6     0x76    slli a4,a5,0x19
    0x840004ca     0x7a    bgez a4,ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004ce     0x7e    li a5,-1
    0x840004d0     0x80    slli a5,a5,0x27
    0x840004d2     0x82    or a0,a0,a5
    0x840004d4     0x84    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004d6     0x86    slli a5,a5,0x1
    0x840004d8     0x88    lui a0,0xfc000
    0x840004dc     0x8c    srli a0,a0,0x19
    0x840004de     0x8e    and a0,a0,a5
    0x840004e0     0x90    slli a4,a5,0x19
    0x840004e4     0x94    bgez a4,ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004e8     0x98    li a5,-1
    0x840004ea     0x9a    slli a5,a5,0x27
    0x840004ec     0x9c    or a0,a0,a5
    0x840004ee     0x9e    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x840004f0     0xa0    slli a0,a5,0x19
    0x840004f4     0xa4    srli a0,a0,0x19
    0x840004f6     0xa6    slli a4,a5,0x19
    0x840004fa     0xaa    bgez a4,ffffffff84000504 <map_it_pt_cap+0xb4>
    0x840004fe     0xae    li a5,-1
    0x84000500     0xb0    slli a5,a5,0x27
    0x84000502     0xb2    or a0,a0,a5
    0x84000504     0xb4    andi a0,a0,-1024
    0x84000508     0xb8    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x8400050a     0xba    andi a4,a5,127
    0x8400050e     0xbe    li a3,64
    0x84000512     0xc2    beq a4,a3,ffffffff84000528 <map_it_pt_cap+0xd8>
    0x84000516     0xc6    andi a5,a5,63
    0x8400051a     0xca    addiw a5,a5,1
    0x8400051c     0xcc    li a0,-1
    0x8400051e     0xce    sll a0,a0,a5
    0x84000522     0xd2    and a0,a0,a7
    0x84000526     0xd6    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x84000528     0xd8    li a5,4
    0x8400052a     0xda    j ffffffff8400051a <map_it_pt_cap+0xca>
    0x8400052c     0xdc    li a4,3
    0x8400052e     0xde    beq a6,a4,ffffffff8400055a <map_it_pt_cap+0x10a>
    0x84000532     0xe2    li a4,13
    0x84000534     0xe4    beq a6,a4,ffffffff84000574 <map_it_pt_cap+0x124>
    0x84000538     0xe8    li a5,1
    0x8400053a     0xea    li a0,0
    0x8400053c     0xec    bne a6,a5,ffffffff84000590 <map_it_pt_cap+0x140>
    0x84000540     0xf0    srli a7,a7,0x9
    0x84000544     0xf4    slli a0,a7,0x19
    0x84000548     0xf8    srli a0,a0,0x19
    0x8400054a     0xfa    slli a5,a7,0x19
    0x8400054e     0xfe    bgez a5,ffffffff84000590 <map_it_pt_cap+0x140>
    0x84000552    0x102    li a5,-1
    0x84000554    0x104    slli a5,a5,0x27
    0x84000556    0x106    or a0,a0,a5
    0x84000558    0x108    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x8400055a    0x10a    srli a7,a7,0x9
    0x8400055e    0x10e    slli a0,a7,0x19
    0x84000562    0x112    srli a0,a0,0x19
    0x84000564    0x114    slli a5,a7,0x19
    0x84000568    0x118    bgez a5,ffffffff84000590 <map_it_pt_cap+0x140>
    0x8400056c    0x11c    li a5,-1
    0x8400056e    0x11e    slli a5,a5,0x27
    0x84000570    0x120    or a0,a0,a5
    0x84000572    0x122    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x84000574    0x124    slli a5,a5,0x2
    0x84000576    0x126    lui a0,0xf8000
    0x8400057a    0x12a    srli a0,a0,0x19
    0x8400057c    0x12c    and a0,a0,a5
    0x8400057e    0x12e    slli a4,a5,0x19
    0x84000582    0x132    bgez a4,ffffffff84000590 <map_it_pt_cap+0x140>
    0x84000586    0x136    li a5,-1
    0x84000588    0x138    slli a5,a5,0x27
    0x8400058a    0x13a    or a0,a0,a5
    0x8400058c    0x13c    j ffffffff84000590 <map_it_pt_cap+0x140>
    0x8400058e    0x13e    li a0,0
    0x84000590    0x140    ld a7,8(sp)           ; stack access
    0x84000592    0x142    srli a3,a2,0x3b
    0x84000596    0x146    li a5,20
    0x84000598    0x148    bltu a5,a3,ffffffff840005fe <map_it_pt_cap+0x1ae>
    0x8400059c    0x14c    slli a4,a3,0x2
    0x840005a0    0x150    auipc a6,0x17
    0x840005a4    0x154    addi a6,a6,-812 # ffffffff84017274 <ksDomScheduleLength+0x104>
    0x840005a8    0x158    add a4,a4,a6
    0x840005aa    0x15a    lw a5,0(a4)
    0x840005ac    0x15c    add a5,a5,a6
    0x840005ae    0x15e    jr a5
    0x840005b0    0x160    mv s0,a1
    0x840005b2    0x162    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x840005b4    0x164    mv s0,a1
    0x840005b6    0x166    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x840005b8    0x168    mv s0,a1
    0x840005ba    0x16a    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x840005bc    0x16c    slli a2,a2,0x1
    0x840005be    0x16e    lui s0,0xfc000
    0x840005c2    0x172    srli s0,s0,0x19
    0x840005c4    0x174    and s0,s0,a2
    0x840005c6    0x176    slli a5,a2,0x19
    0x840005ca    0x17a    bgez a5,ffffffff84000662 <map_it_pt_cap+0x212>
    0x840005ce    0x17e    li a5,-1
    0x840005d0    0x180    slli a5,a5,0x27
    0x840005d2    0x182    or s0,s0,a5
    0x840005d4    0x184    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x840005d6    0x186    andi s0,a1,-1024
    0x840005da    0x18a    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x840005dc    0x18c    andi a5,a2,127
    0x840005e0    0x190    li a4,64
    0x840005e4    0x194    beq a5,a4,ffffffff840005fa <map_it_pt_cap+0x1aa>
    0x840005e8    0x198    andi a2,a2,63
    0x840005ec    0x19c    addiw a2,a2,1
    0x840005ee    0x19e    li s0,-1
    0x840005f0    0x1a0    sll s0,s0,a2
    0x840005f4    0x1a4    and s0,s0,a7
    0x840005f8    0x1a8    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x840005fa    0x1aa    li a2,4
    0x840005fc    0x1ac    j ffffffff840005ec <map_it_pt_cap+0x19c>
    0x840005fe    0x1ae    li a5,3
    0x84000600    0x1b0    beq a3,a5,ffffffff8400062c <map_it_pt_cap+0x1dc>
    0x84000604    0x1b4    li a5,13
    0x84000606    0x1b6    beq a3,a5,ffffffff84000646 <map_it_pt_cap+0x1f6>
    0x8400060a    0x1ba    li a5,1
    0x8400060c    0x1bc    li s0,0
    0x8400060e    0x1be    bne a3,a5,ffffffff84000662 <map_it_pt_cap+0x212>
    0x84000612    0x1c2    srli a7,a7,0x9
    0x84000616    0x1c6    slli s0,a7,0x19
    0x8400061a    0x1ca    srli s0,s0,0x19
    0x8400061c    0x1cc    slli a5,a7,0x19
    0x84000620    0x1d0    bgez a5,ffffffff84000662 <map_it_pt_cap+0x212>
    0x84000624    0x1d4    li a5,-1
    0x84000626    0x1d6    slli a5,a5,0x27
    0x84000628    0x1d8    or s0,s0,a5
    0x8400062a    0x1da    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x8400062c    0x1dc    srli a7,a7,0x9
    0x84000630    0x1e0    slli s0,a7,0x19
    0x84000634    0x1e4    srli s0,s0,0x19
    0x84000636    0x1e6    slli a5,a7,0x19
    0x8400063a    0x1ea    bgez a5,ffffffff84000662 <map_it_pt_cap+0x212>
    0x8400063e    0x1ee    li a5,-1
    0x84000640    0x1f0    slli a5,a5,0x27
    0x84000642    0x1f2    or s0,s0,a5
    0x84000644    0x1f4    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x84000646    0x1f6    slli a2,a2,0x2
    0x84000648    0x1f8    lui s0,0xf8000
    0x8400064c    0x1fc    srli s0,s0,0x19
    0x8400064e    0x1fe    and s0,s0,a2
    0x84000650    0x200    slli a5,a2,0x19
    0x84000654    0x204    bgez a5,ffffffff84000662 <map_it_pt_cap+0x212>
    0x84000658    0x208    li a5,-1
    0x8400065a    0x20a    slli a5,a5,0x27
    0x8400065c    0x20c    or s0,s0,a5
    0x8400065e    0x20e    j ffffffff84000662 <map_it_pt_cap+0x212>
    0x84000660    0x210    li s0,0
    0x84000662    0x212    jal ra,ffffffff84010630 <lookupPTSlot>
    0x84000666    0x216    sd a0,32(sp)          ; stack access
    0x84000668    0x218    sd a1,40(sp)          ; stack access
    0x8400066a    0x21a    li a5,1
    0x8400066c    0x21c    slli a5,a5,0x26
    0x8400066e    0x21e    add s0,s0,a5
    0x84000670    0x220    srli s0,s0,0x2
    0x84000672    0x222    lui a5,0xfff00
    0x84000676    0x226    srli a5,a5,0xa
    0x84000678    0x228    and s0,s0,a5
    0x8400067a    0x22a    ori s0,s0,193
    0x8400067e    0x22e    sd s0,0(a0)
    0x84000680    0x230    sfence.vma
    0x84000684    0x234    ld ra,56(sp)          ; stack access
    0x84000686    0x236    ld s0,48(sp)          ; stack access
    0x84000688    0x238    addi sp,sp,64
    0x8400068a    0x23a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
209 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 276 nodes.

Section map_kernel_window (176 of 271)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 68 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_window`:

    0x840000e4     0x0    addi sp,sp,-64
    0x840000e6     0x2    sd ra,56(sp)          ; stack access
    0x840000e8     0x4    sd s0,48(sp)          ; stack access
    0x840000ea     0x6    sd s1,40(sp)          ; stack access
    0x840000ec     0x8    sd s2,32(sp)          ; stack access
    0x840000ee     0xa    sd s3,24(sp)          ; stack access
    0x840000f0     0xc    sd s4,16(sp)          ; stack access
    0x840000f2     0xe    sd s5,8(sp)           ; stack access
    0x840000f4    0x10    sd s6,0(sp)           ; stack access
    0x840000f6    0x12    li s1,-1
    0x840000f8    0x14    slli s1,s1,0x26
    0x840000fa    0x16    auipc s6,0x1b
    0x840000fe    0x1a    addi s6,s6,-250 # ffffffff8401b000 <kernel_root_pageTable>
    0x84000102    0x1e    li s2,1
    0x84000104    0x20    slli s5,s2,0x26
    0x84000108    0x24    lui s4,0x40000
    0x8400010c    0x28    lui s3,0x80000
    0x84000110    0x2c    srli s0,s1,0x1e
    0x84000114    0x30    andi s0,s0,511
    0x84000118    0x34    slli s0,s0,0x3
    0x8400011a    0x36    add s0,s0,s6
    0x8400011c    0x38    mv a1,s2
    0x8400011e    0x3a    add a0,s1,s5
    0x84000122    0x3e    jal ra,ffffffff840100da <pte_next>
    0x84000126    0x42    sd a0,0(s0)
    0x84000128    0x44    add s1,s1,s4
    0x8400012a    0x46    bne s1,s3,ffffffff84000110 <map_kernel_window+0x2c>
    0x8400012e    0x4a    li s0,1
    0x84000130    0x4c    slli a5,s0,0x20
    0x84000134    0x50    auipc s1,0x1a
    0x84000138    0x54    addi s1,s1,-308 # ffffffff8401a000 <kernel_image_level2_pt>
    0x8400013c    0x58    add s1,s1,a5
    0x8400013e    0x5a    auipc s2,0x1c
    0x84000142    0x5e    addi s2,s2,-318 # ffffffff8401c000 <kernel_root_pageTable+0x1000>
    0x84000146    0x62    li a1,0
    0x84000148    0x64    mv a0,s1
    0x8400014a    0x66    jal ra,ffffffff840100da <pte_next>
    0x8400014e    0x6a    sd a0,-2032(s2)
    0x84000152    0x6e    li a1,0
    0x84000154    0x70    mv a0,s1
    0x84000156    0x72    jal ra,ffffffff840100da <pte_next>
    0x8400015a    0x76    sd a0,-16(s2)
    0x8400015e    0x7a    li s2,0
    0x84000160    0x7c    slli s0,s0,0x1f
    0x84000162    0x7e    auipc s5,0x1a
    0x84000166    0x82    addi s5,s5,-354 # ffffffff8401a000 <kernel_image_level2_pt>
    0x8400016a    0x86    lui s4,0x200
    0x8400016e    0x8a    li s3,3
    0x84000170    0x8c    slli s3,s3,0x1e
    0x84000172    0x8e    slli s1,s2,0x3
    0x84000176    0x92    add s1,s1,s5
    0x84000178    0x94    li a1,1
    0x8400017a    0x96    mv a0,s0
    0x8400017c    0x98    jal ra,ffffffff840100da <pte_next>
    0x84000180    0x9c    sd a0,0(s1)
    0x84000182    0x9e    addi s2,s2,1
    0x84000184    0xa0    add s0,s0,s4
    0x84000186    0xa2    bne s0,s3,ffffffff84000172 <map_kernel_window+0x8e>
    0x8400018a    0xa6    ld ra,56(sp)          ; stack access
    0x8400018c    0xa8    ld s0,48(sp)          ; stack access
    0x8400018e    0xaa    ld s1,40(sp)          ; stack access
    0x84000190    0xac    ld s2,32(sp)          ; stack access
    0x84000192    0xae    ld s3,24(sp)          ; stack access
    0x84000194    0xb0    ld s4,16(sp)          ; stack access
    0x84000196    0xb2    ld s5,8(sp)           ; stack access
    0x84000198    0xb4    ld s6,0(sp)           ; stack access
    0x8400019a    0xb6    addi sp,sp,64
    0x8400019c    0xb8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 97 nodes.

Section map_kernel_frame (177 of 271)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `map_kernel_frame`:

    0x840000b6     0x0    addi sp,sp,-16
    0x840000b8     0x2    sd ra,8(sp)           ; stack access
    0x840000ba     0x4    sd s0,0(sp)           ; stack access
    0x840000bc     0x6    srli a1,a1,0x1e
    0x840000be     0x8    andi a1,a1,511
    0x840000c2     0xc    slli a1,a1,0x3
    0x840000c4     0xe    auipc s0,0x1b
    0x840000c8    0x12    addi s0,s0,-196 # ffffffff8401b000 <kernel_root_pageTable>
    0x840000cc    0x16    add s0,s0,a1
    0x840000ce    0x18    li a1,1
    0x840000d0    0x1a    lui a5,0xc0000
    0x840000d4    0x1e    and a0,a0,a5
    0x840000d6    0x20    jal ra,ffffffff840100da <pte_next>
    0x840000da    0x24    sd a0,0(s0)
    0x840000dc    0x26    ld ra,8(sp)           ; stack access
    0x840000de    0x28    ld s0,0(sp)           ; stack access
    0x840000e0    0x2a    addi sp,sp,16
    0x840000e2    0x2c    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 25 nodes.

Section _start (178 of 271)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0x18
    0x84000008     0x8    addi gp,gp,-1688 # ffffffff8401796c <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x1d
    0x84000010    0x10    addi sp,sp,1180 # ffffffff8401d4a8 <ksIdleThread>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff8400281e <init_kernel>
    0x8400001c    0x1c    auipc ra,0x10
    0x84000020    0x20    addi ra,ra,468 # ffffffff840101f0 <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section performPageTableInvocationUnmap (179 of 271)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 44 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x84015856     0x0    addi sp,sp,-48
    0x84015858     0x2    sd ra,40(sp)          ; stack access
    0x8401585a     0x4    sd s0,32(sp)          ; stack access
    0x8401585c     0x6    sd s1,24(sp)          ; stack access
    0x8401585e     0x8    sd a1,8(sp)           ; stack access
    0x84015860     0xa    mv s1,a2
    0x84015862     0xc    slli a5,a0,0x18
    0x84015866    0x10    bgez a5,ffffffff840158ac <performPageTableInvocationUnmap+0x56>
    0x8401586a    0x14    mv a5,a1
    0x8401586c    0x16    srli a4,a1,0x9
    0x84015870    0x1a    slli a2,a4,0x19
    0x84015874    0x1e    srli a2,a2,0x19
    0x84015876    0x20    slli a3,a4,0x19
    0x8401587a    0x24    bgez a3,ffffffff84015884 <performPageTableInvocationUnmap+0x2e>
    0x8401587e    0x28    li a4,-1
    0x84015880    0x2a    slli a4,a4,0x27
    0x84015882    0x2c    or a2,a2,a4
    0x84015884    0x2e    mv s0,a2
    0x84015886    0x30    srli a5,a5,0x30
    0x84015888    0x32    slli a1,a0,0x19
    0x8401588c    0x36    srli a1,a1,0x19
    0x8401588e    0x38    slli a4,a0,0x19
    0x84015892    0x3c    bgez a4,ffffffff8401589c <performPageTableInvocationUnmap+0x46>
    0x84015896    0x40    li a4,-1
    0x84015898    0x42    slli a4,a4,0x27
    0x8401589a    0x44    or a1,a1,a4
    0x8401589c    0x46    mv a2,s0
    0x8401589e    0x48    mv a0,a5
    0x840158a0    0x4a    jal ra,ffffffff840106e4 <unmapPageTable>
    0x840158a4    0x4e    lui a1,0x1
    0x840158a6    0x50    mv a0,s0
    0x840158a8    0x52    jal ra,ffffffff84015844 <memzero>
    0x840158ac    0x56    ld a4,0(s1)
    0x840158ae    0x58    li a5,-1
    0x840158b0    0x5a    slli a5,a5,0x27
    0x840158b2    0x5c    addi a5,a5,-1
    0x840158b4    0x5e    and a5,a5,a4
    0x840158b6    0x60    sd a5,0(s1)
    0x840158b8    0x62    li a0,0
    0x840158ba    0x64    ld ra,40(sp)          ; stack access
    0x840158bc    0x66    ld s0,32(sp)          ; stack access
    0x840158be    0x68    ld s1,24(sp)          ; stack access
    0x840158c0    0x6a    addi sp,sp,48
    0x840158c2    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 62 nodes.

Section replyFromKernel_error (180 of 271)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x84015742     0x0    addi sp,sp,-16
    0x84015744     0x2    sd ra,8(sp)           ; stack access
    0x84015746     0x4    sd s0,0(sp)           ; stack access
    0x84015748     0x6    mv s0,a0
    0x8401574a     0x8    mv a1,a0
    0x8401574c     0xa    li a0,1
    0x8401574e     0xc    jal ra,ffffffff84010444 <lookupIPCBuffer>
    0x84015752    0x10    sd zero,72(s0)
    0x84015756    0x14    mv a1,a0
    0x84015758    0x16    mv a0,s0
    0x8401575a    0x18    jal ra,ffffffff84015644 <setMRs_syscall_error>
    0x8401575e    0x1c    auipc a5,0x8
    0x84015762    0x20    addi a5,a5,-662 # ffffffff8401d4c8 <current_syscall_error>
    0x84015766    0x24    ld a5,48(a5)
    0x84015768    0x26    slli a5,a5,0xc
    0x8401576a    0x28    andi a0,a0,127
    0x8401576e    0x2c    or a5,a5,a0
    0x84015770    0x2e    sd a5,80(s0)
    0x84015772    0x30    ld ra,8(sp)           ; stack access
    0x84015774    0x32    ld s0,0(sp)           ; stack access
    0x84015776    0x34    addi sp,sp,16
    0x84015778    0x36    ret

Proving inst theorems
---------------------

22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 32 nodes.

Section decodeUnbindNotification (181 of 271)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 31 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x84015418     0x0    addi sp,sp,-32
    0x8401541a     0x2    sd ra,24(sp)          ; stack access
    0x8401541c     0x4    sd s0,16(sp)          ; stack access
    0x8401541e     0x6    sd a0,0(sp)           ; stack access
    0x84015420     0x8    sd a1,8(sp)           ; stack access
    0x84015422     0xa    slli s0,a0,0x19
    0x84015426     0xe    srli s0,s0,0x19
    0x84015428    0x10    slli a5,a0,0x19
    0x8401542c    0x14    bgez a5,ffffffff84015436 <decodeUnbindNotification+0x1e>
    0x84015430    0x18    li a5,-1
    0x84015432    0x1a    slli a5,a5,0x27
    0x84015434    0x1c    or s0,s0,a5
    0x84015436    0x1e    ld a5,304(s0)
    0x8401543a    0x22    beqz a5,ffffffff8401545c <decodeUnbindNotification+0x44>
    0x8401543c    0x24    li a1,2
    0x8401543e    0x26    auipc a5,0x18
    0x84015442    0x2a    addi a5,a5,1114 # ffffffff8402d898 <ksCurThread>
    0x84015446    0x2e    ld a0,0(a5)
    0x84015448    0x30    jal ra,ffffffff84012404 <setThreadState>
    0x8401544c    0x34    li a1,0
    0x8401544e    0x36    mv a0,s0
    0x84015450    0x38    jal ra,ffffffff84015330 <invokeTCB_NotificationControl>
    0x84015454    0x3c    ld ra,24(sp)          ; stack access
    0x84015456    0x3e    ld s0,16(sp)          ; stack access
    0x84015458    0x40    addi sp,sp,32
    0x8401545a    0x42    ret
    0x8401545c    0x44    li a5,3
    0x8401545e    0x46    auipc a4,0x8
    0x84015462    0x4a    sd a5,154(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015466    0x4e    li a0,3
    0x84015468    0x50    j ffffffff84015454 <decodeUnbindNotification+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 47 nodes.

Section decodeBindNotification (182 of 271)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 77 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeBindNotification`:

    0x84015348     0x0    addi sp,sp,-48
    0x8401534a     0x2    sd ra,40(sp)          ; stack access
    0x8401534c     0x4    sd s0,32(sp)          ; stack access
    0x8401534e     0x6    sd s1,24(sp)          ; stack access
    0x84015350     0x8    sd a0,0(sp)           ; stack access
    0x84015352     0xa    sd a1,8(sp)           ; stack access
    0x84015354     0xc    ld a3,0(a2)
    0x84015356     0xe    beqz a3,ffffffff840153ca <decodeBindNotification+0x82>
    0x84015358    0x10    ld a4,0(sp)           ; stack access
    0x8401535a    0x12    slli a5,a4,0x19
    0x8401535e    0x16    srli a5,a5,0x19
    0x84015360    0x18    slli a2,a4,0x19
    0x84015364    0x1c    bgez a2,ffffffff8401536e <decodeBindNotification+0x26>
    0x84015368    0x20    li a4,-1
    0x8401536a    0x22    slli a4,a4,0x27
    0x8401536c    0x24    or a5,a5,a4
    0x8401536e    0x26    mv s0,a5
    0x84015370    0x28    ld a5,304(a5)
    0x84015374    0x2c    bnez a5,ffffffff840153d8 <decodeBindNotification+0x90>
    0x84015376    0x2e    ld a5,0(a3)
    0x84015378    0x30    srli a3,a5,0x3b
    0x8401537c    0x34    li a4,6
    0x8401537e    0x36    bne a3,a4,ffffffff840153ee <decodeBindNotification+0xa6>
    0x84015382    0x3a    slli a4,a5,0x19
    0x84015386    0x3e    srli a4,a4,0x19
    0x84015388    0x40    slli a3,a5,0x19
    0x8401538c    0x44    bgez a3,ffffffff84015396 <decodeBindNotification+0x4e>
    0x84015390    0x48    li a3,-1
    0x84015392    0x4a    slli a3,a3,0x27
    0x84015394    0x4c    or a4,a4,a3
    0x84015396    0x4e    mv s1,a4
    0x84015398    0x50    slli a3,a5,0x5
    0x8401539c    0x54    bgez a3,ffffffff840153fc <decodeBindNotification+0xb4>
    0x840153a0    0x58    ld a5,8(a4)
    0x840153a2    0x5a    slli a4,a5,0x19
    0x840153a6    0x5e    bnez a4,ffffffff8401540a <decodeBindNotification+0xc2>
    0x840153a8    0x60    ld a5,24(s1)
    0x840153aa    0x62    slli a4,a5,0x19
    0x840153ae    0x66    bnez a4,ffffffff8401540a <decodeBindNotification+0xc2>
    0x840153b0    0x68    li a1,2
    0x840153b2    0x6a    auipc a5,0x18
    0x840153b6    0x6e    addi a5,a5,1254 # ffffffff8402d898 <ksCurThread>
    0x840153ba    0x72    ld a0,0(a5)
    0x840153bc    0x74    jal ra,ffffffff84012404 <setThreadState>
    0x840153c0    0x78    mv a1,s1
    0x840153c2    0x7a    mv a0,s0
    0x840153c4    0x7c    jal ra,ffffffff84015330 <invokeTCB_NotificationControl>
    0x840153c8    0x80    j ffffffff840153e4 <decodeBindNotification+0x9c>
    0x840153ca    0x82    li a5,7
    0x840153cc    0x84    auipc a4,0x8
    0x840153d0    0x88    sd a5,300(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840153d4    0x8c    li a0,3
    0x840153d6    0x8e    j ffffffff840153e4 <decodeBindNotification+0x9c>
    0x840153d8    0x90    li a5,3
    0x840153da    0x92    auipc a4,0x8
    0x840153de    0x96    sd a5,286(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840153e2    0x9a    li a0,3
    0x840153e4    0x9c    ld ra,40(sp)
    0x840153e6    0x9e    ld s0,32(sp)
    0x840153e8    0xa0    ld s1,24(sp)
    0x840153ea    0xa2    addi sp,sp,48
    0x840153ec    0xa4    ret
    0x840153ee    0xa6    li a5,3
    0x840153f0    0xa8    auipc a4,0x8
    0x840153f4    0xac    sd a5,264(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840153f8    0xb0    li a0,3
    0x840153fa    0xb2    j ffffffff840153e4 <decodeBindNotification+0x9c>
    0x840153fc    0xb4    li a5,3
    0x840153fe    0xb6    auipc a4,0x8
    0x84015402    0xba    sd a5,250(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015406    0xbe    li a0,3
    0x84015408    0xc0    j ffffffff840153e4 <decodeBindNotification+0x9c>
    0x8401540a    0xc2    li a5,3
    0x8401540c    0xc4    auipc a4,0x8
    0x84015410    0xc8    sd a5,236(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015414    0xcc    li a0,3
    0x84015416    0xce    j ffffffff840153e4 <decodeBindNotification+0x9c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 116 nodes.

Section invokeTCB_NotificationControl (183 of 271)
==================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_NotificationControl`:

    0x84015330     0x0    addi sp,sp,-16
    0x84015332     0x2    sd ra,8(sp)           ; stack access
    0x84015334     0x4    beqz a1,ffffffff84015342 <invokeTCB_NotificationControl+0x12>
    0x84015336     0x6    jal ra,ffffffff84011920 <bindNotification>
    0x8401533a     0xa    li a0,0
    0x8401533c     0xc    ld ra,8(sp)           ; stack access
    0x8401533e     0xe    addi sp,sp,16
    0x84015340    0x10    ret
    0x84015342    0x12    jal ra,ffffffff8401190c <unbindNotification>
    0x84015346    0x16    j ffffffff8401533a <invokeTCB_NotificationControl+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 17 nodes.

Section decodeWriteRegisters (184 of 271)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 57 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x84015298     0x0    addi sp,sp,-64
    0x8401529a     0x2    sd ra,56(sp)          ; stack access
    0x8401529c     0x4    sd s0,48(sp)          ; stack access
    0x8401529e     0x6    sd s1,40(sp)          ; stack access
    0x840152a0     0x8    sd s2,32(sp)          ; stack access
    0x840152a2     0xa    sd s3,24(sp)          ; stack access
    0x840152a4     0xc    sd a0,0(sp)           ; stack access
    0x840152a6     0xe    sd a1,8(sp)           ; stack access
    0x840152a8    0x10    li a5,1
    0x840152aa    0x12    bgeu a5,a2,ffffffff84015306 <decodeWriteRegisters+0x6e>
    0x840152ae    0x16    auipc a5,0x18
    0x840152b2    0x1a    addi a5,a5,1514 # ffffffff8402d898 <ksCurThread>
    0x840152b6    0x1e    ld a0,0(a5)
    0x840152b8    0x20    ld s2,96(a0)
    0x840152bc    0x24    addi a2,a2,-2
    0x840152be    0x26    bltu a2,s2,ffffffff84015314 <decodeWriteRegisters+0x7c>
    0x840152c2    0x2a    ld a5,0(sp)           ; stack access
    0x840152c4    0x2c    slli s0,a5,0x19
    0x840152c8    0x30    srli s0,s0,0x19
    0x840152ca    0x32    slli a4,a5,0x19
    0x840152ce    0x36    bgez a4,ffffffff840152d8 <decodeWriteRegisters+0x40>
    0x840152d2    0x3a    li a5,-1
    0x840152d4    0x3c    slli a5,a5,0x27
    0x840152d6    0x3e    or s0,s0,a5
    0x840152d8    0x40    beq a0,s0,ffffffff84015322 <decodeWriteRegisters+0x8a>
    0x840152dc    0x44    mv s1,a3
    0x840152de    0x46    ld s3,88(a0)
    0x840152e2    0x4a    li a1,2
    0x840152e4    0x4c    jal ra,ffffffff84012404 <setThreadState>
    0x840152e8    0x50    mv a4,s1
    0x840152ea    0x52    li a3,0
    0x840152ec    0x54    mv a2,s2
    0x840152ee    0x56    andi a1,s3,1
    0x840152f2    0x5a    mv a0,s0
    0x840152f4    0x5c    jal ra,ffffffff84015188 <invokeTCB_WriteRegisters>
    0x840152f8    0x60    ld ra,56(sp)          ; stack access
    0x840152fa    0x62    ld s0,48(sp)          ; stack access
    0x840152fc    0x64    ld s1,40(sp)          ; stack access
    0x840152fe    0x66    ld s2,32(sp)          ; stack access
    0x84015300    0x68    ld s3,24(sp)          ; stack access
    0x84015302    0x6a    addi sp,sp,64
    0x84015304    0x6c    ret
    0x84015306    0x6e    li a5,7
    0x84015308    0x70    auipc a4,0x8
    0x8401530c    0x74    sd a5,496(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015310    0x78    li a0,3
    0x84015312    0x7a    j ffffffff840152f8 <decodeWriteRegisters+0x60>
    0x84015314    0x7c    li a5,7
    0x84015316    0x7e    auipc a4,0x8
    0x8401531a    0x82    sd a5,482(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401531e    0x86    li a0,3
    0x84015320    0x88    j ffffffff840152f8 <decodeWriteRegisters+0x60>
    0x84015322    0x8a    li a5,3
    0x84015324    0x8c    auipc a4,0x8
    0x84015328    0x90    sd a5,468(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401532c    0x94    li a0,3
    0x8401532e    0x96    j ffffffff840152f8 <decodeWriteRegisters+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 87 nodes.

Section invokeTCB_WriteRegisters (185 of 271)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 95 instructions.

RVC_TFFTFFT__T____TF.
RVC_TFFTT____FFT__TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x84015188      0x0    addi sp,sp,-16
    0x8401518a      0x2    sd ra,8(sp)           ; stack access
    0x8401518c      0x4    sd s0,0(sp)           ; stack access
    0x8401518e      0x6    mv s0,a0
    0x84015190      0x8    mv a7,a2
    0x84015192      0xa    li a5,32
    0x84015196      0xe    bgeu a5,a2,ffffffff8401519e <invokeTCB_WriteRegisters+0x16>
    0x8401519a     0x12    li a7,32
    0x8401519e     0x16    beqz a2,ffffffff84015268 <invokeTCB_WriteRegisters+0xe0>
    0x840151a0     0x18    auipc a0,0x3
    0x840151a4     0x1c    addi a0,a0,-1400 # ffffffff84017c28 <frameRegisters>
    0x840151a8     0x20    li a5,2
    0x840151aa     0x22    li t3,3
    0x840151ac     0x24    li t4,17
    0x840151ae     0x26    auipc t6,0x18
    0x840151b2     0x2a    addi t6,t6,1770 # ffffffff8402d898 <ksCurThread>
    0x840151b6     0x2e    auipc t5,0x3
    0x840151ba     0x32    addi t5,t5,-1502 # ffffffff84017bd8 <msgRegisters>
    0x840151be     0x36    j ffffffff840151ec <invokeTCB_WriteRegisters+0x64>
    0x840151c0     0x38    ld a6,0(t6)
    0x840151c4     0x3c    slli t1,a5,0x3
    0x840151c8     0x40    add t1,t1,t5
    0x840151ca     0x42    ld t1,0(t1)
    0x840151ce     0x46    slli t1,t1,0x3
    0x840151d0     0x48    add a6,a6,t1
    0x840151d2     0x4a    ld a6,0(a6)
    0x840151d6     0x4e    slli a3,a3,0x3
    0x840151d8     0x50    add a3,a3,s0
    0x840151da     0x52    sd a6,0(a3) # ffffffffe0000000 <ki_end+0x5bfd2000>
    0x840151de     0x56    addi a0,a0,8
    0x840151e0     0x58    addi a3,a5,1
    0x840151e4     0x5c    addi a5,a5,-1
    0x840151e6     0x5e    bgeu a5,a7,ffffffff84015208 <invokeTCB_WriteRegisters+0x80>
    0x840151ea     0x62    mv a5,a3
    0x840151ec     0x64    ld a3,0(a0)
    0x840151ee     0x66    bgeu t3,a5,ffffffff840151c0 <invokeTCB_WriteRegisters+0x38>
    0x840151f2     0x6a    slli a6,a5,0x3
    0x840151f6     0x6e    add a6,a6,a4
    0x840151f8     0x70    ld a6,8(a6)
    0x840151fc     0x74    slli a3,a3,0x3
    0x840151fe     0x76    add a3,a3,s0
    0x84015200     0x78    sd a6,0(a3)
    0x84015204     0x7c    bne a5,t4,ffffffff840151de <invokeTCB_WriteRegisters+0x56>
    0x84015208     0x80    li a5,16
    0x8401520a     0x82    bgeu a5,a2,ffffffff84015268 <invokeTCB_WriteRegisters+0xe0>
    0x8401520e     0x86    addi a4,a4,152
    0x84015212     0x8a    auipc a0,0x3
    0x84015216     0x8e    addi a0,a0,-1378 # ffffffff84017cb0 <gpRegisters+0x8>
    0x8401521a     0x92    li a3,17
    0x8401521c     0x94    li a5,9
    0x8401521e     0x96    li a6,32
    0x84015222     0x9a    li t1,3
    0x84015224     0x9c    ld a2,0(a4)
    0x84015226     0x9e    slli a5,a5,0x3
    0x84015228     0xa0    add a5,a5,s0
    0x8401522a     0xa2    sd a2,0(a5)
    0x8401522c     0xa4    beq a3,a6,ffffffff84015268 <invokeTCB_WriteRegisters+0xe0>
    0x84015230     0xa8    bgeu a3,a7,ffffffff84015268 <invokeTCB_WriteRegisters+0xe0>
    0x84015234     0xac    ld a5,0(a0)
    0x84015236     0xae    addi a2,a3,2
    0x8401523a     0xb2    addi a4,a4,8
    0x8401523c     0xb4    addi a0,a0,8
    0x8401523e     0xb6    addi a3,a3,1
    0x84015240     0xb8    bltu t1,a2,ffffffff84015224 <invokeTCB_WriteRegisters+0x9c>
    0x84015244     0xbc    auipc a4,0x18
    0x84015248     0xc0    addi a4,a4,1620 # ffffffff8402d898 <ksCurThread>
    0x8401524c     0xc4    ld a4,0(a4)
    0x8401524e     0xc6    slli a2,a2,0x3
    0x84015250     0xc8    auipc a3,0x3
    0x84015254     0xcc    addi a3,a3,-1816 # ffffffff84017b38 <fault_messages>
    0x84015258     0xd0    add a2,a2,a3
    0x8401525a     0xd2    ld a3,160(a2)
    0x8401525c     0xd4    slli a3,a3,0x3
    0x8401525e     0xd6    add a4,a4,a3
    0x84015260     0xd8    ld a4,0(a4)
    0x84015262     0xda    slli a5,a5,0x3
    0x84015264     0xdc    add a5,a5,s0
    0x84015266     0xde    sd a4,0(a5)
    0x84015268     0xe0    ld a5,264(s0)
    0x8401526c     0xe4    sd a5,272(s0)
    0x84015270     0xe8    bnez a1,ffffffff8401528a <invokeTCB_WriteRegisters+0x102>
    0x84015272     0xea    auipc a5,0x18
    0x84015276     0xee    addi a5,a5,1574 # ffffffff8402d898 <ksCurThread>
    0x8401527a     0xf2    ld a5,0(a5)
    0x8401527c     0xf4    beq a5,s0,ffffffff84015292 <invokeTCB_WriteRegisters+0x10a>
    0x84015280     0xf8    li a0,0
    0x84015282     0xfa    ld ra,8(sp)           ; stack access
    0x84015284     0xfc    ld s0,0(sp)           ; stack access
    0x84015286     0xfe    addi sp,sp,16
    0x84015288    0x100    ret
    0x8401528a    0x102    mv a0,s0
    0x8401528c    0x104    jal ra,ffffffff840138c0 <restart>
    0x84015290    0x108    j ffffffff84015272 <invokeTCB_WriteRegisters+0xea>
    0x84015292    0x10a    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84015296    0x10e    j ffffffff84015280 <invokeTCB_WriteRegisters+0xf8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
95 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 141 nodes.

Section decodeReadRegisters (186 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 63 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x840150e0     0x0    addi sp,sp,-64
    0x840150e2     0x2    sd ra,56(sp)          ; stack access
    0x840150e4     0x4    sd s0,48(sp)          ; stack access
    0x840150e6     0x6    sd s1,40(sp)          ; stack access
    0x840150e8     0x8    sd s2,32(sp)          ; stack access
    0x840150ea     0xa    sd s3,24(sp)          ; stack access
    0x840150ec     0xc    sd a0,0(sp)           ; stack access
    0x840150ee     0xe    sd a1,8(sp)           ; stack access
    0x840150f0    0x10    li a5,1
    0x840150f2    0x12    bgeu a5,a2,ffffffff84015152 <decodeReadRegisters+0x72>
    0x840150f6    0x16    auipc a5,0x18
    0x840150fa    0x1a    addi a5,a5,1954 # ffffffff8402d898 <ksCurThread>
    0x840150fe    0x1e    ld a0,0(a5)
    0x84015100    0x20    ld s2,96(a0)
    0x84015104    0x24    addi a4,s2,-1
    0x84015108    0x28    li a5,31
    0x8401510a    0x2a    bltu a5,a4,ffffffff84015160 <decodeReadRegisters+0x80>
    0x8401510e    0x2e    ld a5,0(sp)           ; stack access
    0x84015110    0x30    slli s0,a5,0x19
    0x84015114    0x34    srli s0,s0,0x19
    0x84015116    0x36    slli a4,a5,0x19
    0x8401511a    0x3a    bgez a4,ffffffff84015124 <decodeReadRegisters+0x44>
    0x8401511e    0x3e    li a5,-1
    0x84015120    0x40    slli a5,a5,0x27
    0x84015122    0x42    or s0,s0,a5
    0x84015124    0x44    beq a0,s0,ffffffff8401517a <decodeReadRegisters+0x9a>
    0x84015128    0x48    mv s1,a3
    0x8401512a    0x4a    ld s3,88(a0)
    0x8401512e    0x4e    li a1,2
    0x84015130    0x50    jal ra,ffffffff84012404 <setThreadState>
    0x84015134    0x54    mv a4,s1
    0x84015136    0x56    li a3,0
    0x84015138    0x58    mv a2,s2
    0x8401513a    0x5a    andi a1,s3,1
    0x8401513e    0x5e    mv a0,s0
    0x84015140    0x60    jal ra,ffffffff84014fce <invokeTCB_ReadRegisters>
    0x84015144    0x64    ld ra,56(sp)          ; stack access
    0x84015146    0x66    ld s0,48(sp)          ; stack access
    0x84015148    0x68    ld s1,40(sp)          ; stack access
    0x8401514a    0x6a    ld s2,32(sp)          ; stack access
    0x8401514c    0x6c    ld s3,24(sp)          ; stack access
    0x8401514e    0x6e    addi sp,sp,64
    0x84015150    0x70    ret
    0x84015152    0x72    li a5,7
    0x84015154    0x74    auipc a4,0x8
    0x84015158    0x78    sd a5,932(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401515c    0x7c    li a0,3
    0x8401515e    0x7e    j ffffffff84015144 <decodeReadRegisters+0x64>
    0x84015160    0x80    auipc a5,0x8
    0x84015164    0x84    addi a5,a5,872 # ffffffff8401d4c8 <current_syscall_error>
    0x84015168    0x88    li a4,4
    0x8401516a    0x8a    sd a4,48(a5)
    0x8401516c    0x8c    li a4,1
    0x8401516e    0x8e    sd a4,16(a5)
    0x84015170    0x90    li a4,32
    0x84015174    0x94    sd a4,24(a5)
    0x84015176    0x96    li a0,3
    0x84015178    0x98    j ffffffff84015144 <decodeReadRegisters+0x64>
    0x8401517a    0x9a    li a5,3
    0x8401517c    0x9c    auipc a4,0x8
    0x84015180    0xa0    sd a5,892(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015184    0xa4    li a0,3
    0x84015186    0xa6    j ffffffff84015144 <decodeReadRegisters+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 95 nodes.

Section decodeCopyRegisters (187 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 60 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x84014f2e     0x0    addi sp,sp,-48
    0x84014f30     0x2    sd ra,40(sp)          ; stack access
    0x84014f32     0x4    sd s0,32(sp)          ; stack access
    0x84014f34     0x6    sd s1,24(sp)          ; stack access
    0x84014f36     0x8    sd a0,0(sp)           ; stack access
    0x84014f38     0xa    sd a1,8(sp)           ; stack access
    0x84014f3a     0xc    beqz a2,ffffffff84014fac <decodeCopyRegisters+0x7e>
    0x84014f3c     0xe    ld a5,0(a3)
    0x84014f3e    0x10    beqz a5,ffffffff84014fac <decodeCopyRegisters+0x7e>
    0x84014f40    0x12    ld a5,0(a5)
    0x84014f42    0x14    srli a3,a5,0x3b
    0x84014f46    0x18    li a4,12
    0x84014f48    0x1a    bne a3,a4,ffffffff84014fba <decodeCopyRegisters+0x8c>
    0x84014f4c    0x1e    slli a1,a5,0x19
    0x84014f50    0x22    srli a1,a1,0x19
    0x84014f52    0x24    slli a4,a5,0x19
    0x84014f56    0x28    bgez a4,ffffffff84014f60 <decodeCopyRegisters+0x32>
    0x84014f5a    0x2c    li a5,-1
    0x84014f5c    0x2e    slli a5,a5,0x27
    0x84014f5e    0x30    or a1,a1,a5
    0x84014f60    0x32    auipc a5,0x19
    0x84014f64    0x36    addi a5,a5,-1736 # ffffffff8402d898 <ksCurThread>
    0x84014f68    0x3a    ld a0,0(a5)
    0x84014f6a    0x3c    ld s1,88(a0)
    0x84014f6c    0x3e    mv s0,a1
    0x84014f6e    0x40    li a1,2
    0x84014f70    0x42    jal ra,ffffffff84012404 <setThreadState>
    0x84014f74    0x46    ld a5,0(sp)           ; stack access
    0x84014f76    0x48    slli a0,a5,0x19
    0x84014f7a    0x4c    srli a0,a0,0x19
    0x84014f7c    0x4e    slli a4,a5,0x19
    0x84014f80    0x52    bgez a4,ffffffff84014f8a <decodeCopyRegisters+0x5c>
    0x84014f84    0x56    li a5,-1
    0x84014f86    0x58    slli a5,a5,0x27
    0x84014f88    0x5a    or a0,a0,a5
    0x84014f8a    0x5c    li a6,0
    0x84014f8c    0x5e    andi a5,s1,8
    0x84014f90    0x62    andi a4,s1,4
    0x84014f94    0x66    andi a3,s1,2
    0x84014f98    0x6a    andi a2,s1,1
    0x84014f9c    0x6e    mv a1,s0
    0x84014f9e    0x70    jal ra,ffffffff84014e82 <invokeTCB_CopyRegisters>
    0x84014fa2    0x74    ld ra,40(sp)          ; stack access
    0x84014fa4    0x76    ld s0,32(sp)          ; stack access
    0x84014fa6    0x78    ld s1,24(sp)          ; stack access
    0x84014fa8    0x7a    addi sp,sp,48
    0x84014faa    0x7c    ret
    0x84014fac    0x7e    li a5,7
    0x84014fae    0x80    auipc a4,0x8
    0x84014fb2    0x84    sd a5,1354(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014fb6    0x88    li a0,3
    0x84014fb8    0x8a    j ffffffff84014fa2 <decodeCopyRegisters+0x74>
    0x84014fba    0x8c    auipc a5,0x8
    0x84014fbe    0x90    addi a5,a5,1294 # ffffffff8401d4c8 <current_syscall_error>
    0x84014fc2    0x94    li a4,2
    0x84014fc4    0x96    sd a4,48(a5)
    0x84014fc6    0x98    li a4,1
    0x84014fc8    0x9a    sd a4,8(a5)
    0x84014fca    0x9c    li a0,3
    0x84014fcc    0x9e    j ffffffff84014fa2 <decodeCopyRegisters+0x74>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 89 nodes.

Section decodeSetSchedParams (188 of 271)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 91 instructions.

RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x84014b62     0x0    addi sp,sp,-128
    0x84014b64     0x2    sd ra,120(sp)         ; stack access
    0x84014b66     0x4    sd s0,112(sp)         ; stack access
    0x84014b68     0x6    sd s1,104(sp)         ; stack access
    0x84014b6a     0x8    sd a0,64(sp)          ; stack access
    0x84014b6c     0xa    sd a1,72(sp)          ; stack access
    0x84014b6e     0xc    ld a5,0(a3)
    0x84014b70     0xe    li a4,1
    0x84014b72    0x10    bgeu a4,a2,ffffffff84014bee <decodeSetSchedParams+0x8c>
    0x84014b76    0x14    beqz a5,ffffffff84014bee <decodeSetSchedParams+0x8c>
    0x84014b78    0x16    ld a5,0(a5)
    0x84014b7a    0x18    srli a3,a5,0x3b
    0x84014b7e    0x1c    li a4,12
    0x84014b80    0x1e    bne a3,a4,ffffffff84014bfc <decodeSetSchedParams+0x9a>
    0x84014b84    0x22    slli a4,a5,0x19
    0x84014b88    0x26    srli a4,a4,0x19
    0x84014b8a    0x28    slli a3,a5,0x19
    0x84014b8e    0x2c    bgez a3,ffffffff84014b98 <decodeSetSchedParams+0x36>
    0x84014b92    0x30    li a5,-1
    0x84014b94    0x32    slli a5,a5,0x27
    0x84014b96    0x34    or a4,a4,a5
    0x84014b98    0x36    auipc a5,0x19
    0x84014b9c    0x3a    addi a5,a5,-768 # ffffffff8402d898 <ksCurThread>
    0x84014ba0    0x3e    ld a0,0(a5)
    0x84014ba2    0x40    ld s0,88(a0)
    0x84014ba4    0x42    ld a5,352(a4)
    0x84014ba8    0x46    bltu a5,s0,ffffffff84014c18 <decodeSetSchedParams+0xb6>
    0x84014bac    0x4a    ld s1,96(a0)
    0x84014bae    0x4c    bltu a5,s1,ffffffff84014c2e <decodeSetSchedParams+0xcc>
    0x84014bb2    0x50    li a1,2
    0x84014bb4    0x52    jal ra,ffffffff84012404 <setThreadState>
    0x84014bb8    0x56    ld a5,64(sp)          ; stack access
    0x84014bba    0x58    slli a0,a5,0x19
    0x84014bbe    0x5c    srli a0,a0,0x19
    0x84014bc0    0x5e    slli a4,a5,0x19
    0x84014bc4    0x62    bltz a4,ffffffff84014c44 <decodeSetSchedParams+0xe2>
    0x84014bc8    0x66    li a5,9
    0x84014bca    0x68    sd a5,56(sp)          ; stack access
    0x84014bcc    0x6a    sd zero,48(sp)        ; stack access
    0x84014bce    0x6c    sd zero,32(sp)        ; stack access
    0x84014bd0    0x6e    sd zero,40(sp)        ; stack access
    0x84014bd2    0x70    sd zero,24(sp)        ; stack access
    0x84014bd4    0x72    sd zero,16(sp)        ; stack access
    0x84014bd6    0x74    sd zero,0(sp)         ; stack access
    0x84014bd8    0x76    sd zero,8(sp)         ; stack access
    0x84014bda    0x78    li a7,0
    0x84014bdc    0x7a    li a5,0
    0x84014bde    0x7c    li a6,0
    0x84014be0    0x7e    mv a4,s1
    0x84014be2    0x80    mv a3,s0
    0x84014be4    0x82    li a2,0
    0x84014be6    0x84    li a1,0
    0x84014be8    0x86    jal ra,ffffffff840146b6 <invokeTCB_ThreadControl>
    0x84014bec    0x8a    j ffffffff84014c0e <decodeSetSchedParams+0xac>
    0x84014bee    0x8c    li a5,7
    0x84014bf0    0x8e    auipc a4,0x9
    0x84014bf4    0x92    sd a5,-1784(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014bf8    0x96    li a0,3
    0x84014bfa    0x98    j ffffffff84014c0e <decodeSetSchedParams+0xac>
    0x84014bfc    0x9a    auipc a5,0x9
    0x84014c00    0x9e    addi a5,a5,-1844 # ffffffff8401d4c8 <current_syscall_error>
    0x84014c04    0xa2    li a4,2
    0x84014c06    0xa4    sd a4,48(a5)
    0x84014c08    0xa6    li a4,1
    0x84014c0a    0xa8    sd a4,8(a5)
    0x84014c0c    0xaa    li a0,3
    0x84014c0e    0xac    ld ra,120(sp)         ; stack access
    0x84014c10    0xae    ld s0,112(sp)         ; stack access
    0x84014c12    0xb0    ld s1,104(sp)         ; stack access
    0x84014c14    0xb2    addi sp,sp,128
    0x84014c16    0xb4    ret
    0x84014c18    0xb6    auipc a4,0x9
    0x84014c1c    0xba    addi a4,a4,-1872 # ffffffff8401d4c8 <current_syscall_error>
    0x84014c20    0xbe    li a3,4
    0x84014c22    0xc0    sd a3,48(a4)
    0x84014c24    0xc2    sd zero,16(a4)
    0x84014c28    0xc6    sd a5,24(a4)
    0x84014c2a    0xc8    li a0,3
    0x84014c2c    0xca    j ffffffff84014c0e <decodeSetSchedParams+0xac>
    0x84014c2e    0xcc    auipc a4,0x9
    0x84014c32    0xd0    addi a4,a4,-1894 # ffffffff8401d4c8 <current_syscall_error>
    0x84014c36    0xd4    li a3,4
    0x84014c38    0xd6    sd a3,48(a4)
    0x84014c3a    0xd8    sd zero,16(a4)
    0x84014c3e    0xdc    sd a5,24(a4)
    0x84014c40    0xde    li a0,3
    0x84014c42    0xe0    j ffffffff84014c0e <decodeSetSchedParams+0xac>
    0x84014c44    0xe2    li a5,-1
    0x84014c46    0xe4    slli a5,a5,0x27
    0x84014c48    0xe6    or a0,a0,a5
    0x84014c4a    0xe8    j ffffffff84014bc8 <decodeSetSchedParams+0x66>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
91 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 140 nodes.

Section decodeSetMCPriority (189 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 77 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x84014a9e     0x0    addi sp,sp,-112
    0x84014aa0     0x2    sd ra,104(sp)         ; stack access
    0x84014aa2     0x4    sd s0,96(sp)          ; stack access
    0x84014aa4     0x6    sd a0,64(sp)          ; stack access
    0x84014aa6     0x8    sd a1,72(sp)          ; stack access
    0x84014aa8     0xa    beqz a2,ffffffff84014b24 <decodeSetMCPriority+0x86>
    0x84014aaa     0xc    ld a5,0(a3)
    0x84014aac     0xe    beqz a5,ffffffff84014b24 <decodeSetMCPriority+0x86>
    0x84014aae    0x10    ld a5,0(a5)
    0x84014ab0    0x12    srli a3,a5,0x3b
    0x84014ab4    0x16    li a4,12
    0x84014ab6    0x18    bne a3,a4,ffffffff84014b38 <decodeSetMCPriority+0x9a>
    0x84014aba    0x1c    slli a4,a5,0x19
    0x84014abe    0x20    srli a4,a4,0x19
    0x84014ac0    0x22    slli a3,a5,0x19
    0x84014ac4    0x26    bgez a3,ffffffff84014ace <decodeSetMCPriority+0x30>
    0x84014ac8    0x2a    li a5,-1
    0x84014aca    0x2c    slli a5,a5,0x27
    0x84014acc    0x2e    or a4,a4,a5
    0x84014ace    0x30    auipc a5,0x19
    0x84014ad2    0x34    addi a5,a5,-566 # ffffffff8402d898 <ksCurThread>
    0x84014ad6    0x38    ld a0,0(a5)
    0x84014ad8    0x3a    ld s0,88(a0)
    0x84014ada    0x3c    ld a5,352(a4)
    0x84014ade    0x40    bltu a5,s0,ffffffff84014b4c <decodeSetMCPriority+0xae>
    0x84014ae2    0x44    li a1,2
    0x84014ae4    0x46    jal ra,ffffffff84012404 <setThreadState>
    0x84014ae8    0x4a    ld a5,64(sp)          ; stack access
    0x84014aea    0x4c    slli a0,a5,0x19
    0x84014aee    0x50    srli a0,a0,0x19
    0x84014af0    0x52    slli a4,a5,0x19
    0x84014af4    0x56    bgez a4,ffffffff84014afe <decodeSetMCPriority+0x60>
    0x84014af8    0x5a    li a5,-1
    0x84014afa    0x5c    slli a5,a5,0x27
    0x84014afc    0x5e    or a0,a0,a5
    0x84014afe    0x60    li a5,8
    0x84014b00    0x62    sd a5,56(sp)          ; stack access
    0x84014b02    0x64    sd zero,48(sp)        ; stack access
    0x84014b04    0x66    sd zero,32(sp)        ; stack access
    0x84014b06    0x68    sd zero,40(sp)        ; stack access
    0x84014b08    0x6a    sd zero,24(sp)        ; stack access
    0x84014b0a    0x6c    sd zero,16(sp)        ; stack access
    0x84014b0c    0x6e    sd zero,0(sp)         ; stack access
    0x84014b0e    0x70    sd zero,8(sp)         ; stack access
    0x84014b10    0x72    li a7,0
    0x84014b12    0x74    li a5,0
    0x84014b14    0x76    li a6,0
    0x84014b16    0x78    li a4,0
    0x84014b18    0x7a    mv a3,s0
    0x84014b1a    0x7c    li a2,0
    0x84014b1c    0x7e    li a1,0
    0x84014b1e    0x80    jal ra,ffffffff840146b6 <invokeTCB_ThreadControl>
    0x84014b22    0x84    j ffffffff84014b30 <decodeSetMCPriority+0x92>
    0x84014b24    0x86    li a5,7
    0x84014b26    0x88    auipc a4,0x9
    0x84014b2a    0x8c    sd a5,-1582(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014b2e    0x90    li a0,3
    0x84014b30    0x92    ld ra,104(sp)
    0x84014b32    0x94    ld s0,96(sp)
    0x84014b34    0x96    addi sp,sp,112
    0x84014b36    0x98    ret
    0x84014b38    0x9a    auipc a5,0x9
    0x84014b3c    0x9e    addi a5,a5,-1648 # ffffffff8401d4c8 <current_syscall_error>
    0x84014b40    0xa2    li a4,2
    0x84014b42    0xa4    sd a4,48(a5)
    0x84014b44    0xa6    li a4,1
    0x84014b46    0xa8    sd a4,8(a5)
    0x84014b48    0xaa    li a0,3
    0x84014b4a    0xac    j ffffffff84014b30 <decodeSetMCPriority+0x92>
    0x84014b4c    0xae    auipc a4,0x9
    0x84014b50    0xb2    addi a4,a4,-1668 # ffffffff8401d4c8 <current_syscall_error>
    0x84014b54    0xb6    li a3,4
    0x84014b56    0xb8    sd a3,48(a4)
    0x84014b58    0xba    sd zero,16(a4)
    0x84014b5c    0xbe    sd a5,24(a4)
    0x84014b5e    0xc0    li a0,3
    0x84014b60    0xc2    j ffffffff84014b30 <decodeSetMCPriority+0x92>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 118 nodes.

Section decodeSetPriority (190 of 271)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 77 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeSetPriority`:

    0x840149da     0x0    addi sp,sp,-112
    0x840149dc     0x2    sd ra,104(sp)         ; stack access
    0x840149de     0x4    sd s0,96(sp)          ; stack access
    0x840149e0     0x6    sd a0,64(sp)          ; stack access
    0x840149e2     0x8    sd a1,72(sp)          ; stack access
    0x840149e4     0xa    beqz a2,ffffffff84014a60 <decodeSetPriority+0x86>
    0x840149e6     0xc    ld a5,0(a3)
    0x840149e8     0xe    beqz a5,ffffffff84014a60 <decodeSetPriority+0x86>
    0x840149ea    0x10    ld a5,0(a5)
    0x840149ec    0x12    srli a3,a5,0x3b
    0x840149f0    0x16    li a4,12
    0x840149f2    0x18    bne a3,a4,ffffffff84014a74 <decodeSetPriority+0x9a>
    0x840149f6    0x1c    slli a4,a5,0x19
    0x840149fa    0x20    srli a4,a4,0x19
    0x840149fc    0x22    slli a3,a5,0x19
    0x84014a00    0x26    bgez a3,ffffffff84014a0a <decodeSetPriority+0x30>
    0x84014a04    0x2a    li a5,-1
    0x84014a06    0x2c    slli a5,a5,0x27
    0x84014a08    0x2e    or a4,a4,a5
    0x84014a0a    0x30    auipc a5,0x19
    0x84014a0e    0x34    addi a5,a5,-370 # ffffffff8402d898 <ksCurThread>
    0x84014a12    0x38    ld a0,0(a5)
    0x84014a14    0x3a    ld s0,88(a0)
    0x84014a16    0x3c    ld a5,352(a4)
    0x84014a1a    0x40    bltu a5,s0,ffffffff84014a88 <decodeSetPriority+0xae>
    0x84014a1e    0x44    li a1,2
    0x84014a20    0x46    jal ra,ffffffff84012404 <setThreadState>
    0x84014a24    0x4a    ld a5,64(sp)          ; stack access
    0x84014a26    0x4c    slli a0,a5,0x19
    0x84014a2a    0x50    srli a0,a0,0x19
    0x84014a2c    0x52    slli a4,a5,0x19
    0x84014a30    0x56    bgez a4,ffffffff84014a3a <decodeSetPriority+0x60>
    0x84014a34    0x5a    li a5,-1
    0x84014a36    0x5c    slli a5,a5,0x27
    0x84014a38    0x5e    or a0,a0,a5
    0x84014a3a    0x60    li a5,1
    0x84014a3c    0x62    sd a5,56(sp)          ; stack access
    0x84014a3e    0x64    sd zero,48(sp)        ; stack access
    0x84014a40    0x66    sd zero,32(sp)        ; stack access
    0x84014a42    0x68    sd zero,40(sp)        ; stack access
    0x84014a44    0x6a    sd zero,24(sp)        ; stack access
    0x84014a46    0x6c    sd zero,16(sp)        ; stack access
    0x84014a48    0x6e    sd zero,0(sp)         ; stack access
    0x84014a4a    0x70    sd zero,8(sp)         ; stack access
    0x84014a4c    0x72    li a7,0
    0x84014a4e    0x74    li a5,0
    0x84014a50    0x76    li a6,0
    0x84014a52    0x78    mv a4,s0
    0x84014a54    0x7a    li a3,0
    0x84014a56    0x7c    li a2,0
    0x84014a58    0x7e    li a1,0
    0x84014a5a    0x80    jal ra,ffffffff840146b6 <invokeTCB_ThreadControl>
    0x84014a5e    0x84    j ffffffff84014a6c <decodeSetPriority+0x92>
    0x84014a60    0x86    li a5,7
    0x84014a62    0x88    auipc a4,0x9
    0x84014a66    0x8c    sd a5,-1386(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014a6a    0x90    li a0,3
    0x84014a6c    0x92    ld ra,104(sp)
    0x84014a6e    0x94    ld s0,96(sp)
    0x84014a70    0x96    addi sp,sp,112
    0x84014a72    0x98    ret
    0x84014a74    0x9a    auipc a5,0x9
    0x84014a78    0x9e    addi a5,a5,-1452 # ffffffff8401d4c8 <current_syscall_error>
    0x84014a7c    0xa2    li a4,2
    0x84014a7e    0xa4    sd a4,48(a5)
    0x84014a80    0xa6    li a4,1
    0x84014a82    0xa8    sd a4,8(a5)
    0x84014a84    0xaa    li a0,3
    0x84014a86    0xac    j ffffffff84014a6c <decodeSetPriority+0x92>
    0x84014a88    0xae    auipc a4,0x9
    0x84014a8c    0xb2    addi a4,a4,-1472 # ffffffff8401d4c8 <current_syscall_error>
    0x84014a90    0xb6    li a3,4
    0x84014a92    0xb8    sd a3,48(a4)
    0x84014a94    0xba    sd zero,16(a4)
    0x84014a98    0xbe    sd a5,24(a4)
    0x84014a9a    0xc0    li a0,3
    0x84014a9c    0xc2    j ffffffff84014a6c <decodeSetPriority+0x92>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 118 nodes.

Section decodeDomainInvocation (191 of 271)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 65 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x840145e8     0x0    li a5,29
    0x840145ea     0x2    bne a0,a5,ffffffff84014646 <decodeDomainInvocation+0x5e>
    0x840145ee     0x6    beqz a1,ffffffff84014654 <decodeDomainInvocation+0x6c>
    0x840145f0     0x8    addi sp,sp,-32
    0x840145f2     0xa    sd ra,24(sp)          ; stack access
    0x840145f4     0xc    sd s0,16(sp)          ; stack access
    0x840145f6     0xe    sd s1,8(sp)           ; stack access
    0x840145f8    0x10    auipc a5,0x19
    0x840145fc    0x14    addi a5,a5,672 # ffffffff8402d898 <ksCurThread>
    0x84014600    0x18    ld a0,0(a5)
    0x84014602    0x1a    ld s1,88(a0)
    0x84014604    0x1c    li a5,15
    0x84014606    0x1e    bltu a5,s1,ffffffff84014662 <decodeDomainInvocation+0x7a>
    0x8401460a    0x22    ld a5,0(a2)
    0x8401460c    0x24    beqz a5,ffffffff84014676 <decodeDomainInvocation+0x8e>
    0x8401460e    0x26    ld s0,0(a5)
    0x84014610    0x28    srli a4,s0,0x3b
    0x84014614    0x2c    li a5,12
    0x84014616    0x2e    bne a4,a5,ffffffff84014684 <decodeDomainInvocation+0x9c>
    0x8401461a    0x32    li a1,2
    0x8401461c    0x34    jal ra,ffffffff84012404 <setThreadState>
    0x84014620    0x38    slli a0,s0,0x19
    0x84014624    0x3c    srli a0,a0,0x19
    0x84014626    0x3e    slli a5,s0,0x19
    0x8401462a    0x42    bgez a5,ffffffff84014634 <decodeDomainInvocation+0x4c>
    0x8401462e    0x46    li a5,-1
    0x84014630    0x48    slli a5,a5,0x27
    0x84014632    0x4a    or a0,a0,a5
    0x84014634    0x4c    mv a1,s1
    0x84014636    0x4e    jal ra,ffffffff84012a8c <setDomain>
    0x8401463a    0x52    li a0,0
    0x8401463c    0x54    ld ra,24(sp)          ; stack access
    0x8401463e    0x56    ld s0,16(sp)          ; stack access
    0x84014640    0x58    ld s1,8(sp)           ; stack access
    0x84014642    0x5a    addi sp,sp,32
    0x84014644    0x5c    ret
    0x84014646    0x5e    li a5,3
    0x84014648    0x60    auipc a4,0x9
    0x8401464c    0x64    sd a5,-336(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014650    0x68    li a0,3
    0x84014652    0x6a    ret
    0x84014654    0x6c    li a5,7
    0x84014656    0x6e    auipc a4,0x9
    0x8401465a    0x72    sd a5,-350(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401465e    0x76    li a0,3
    0x84014660    0x78    ret
    0x84014662    0x7a    auipc a5,0x9
    0x84014666    0x7e    addi a5,a5,-410 # ffffffff8401d4c8 <current_syscall_error>
    0x8401466a    0x82    li a4,1
    0x8401466c    0x84    sd a4,48(a5)
    0x8401466e    0x86    sd zero,0(a5)
    0x84014672    0x8a    li a0,3
    0x84014674    0x8c    j ffffffff8401463c <decodeDomainInvocation+0x54>
    0x84014676    0x8e    li a5,7
    0x84014678    0x90    auipc a4,0x9
    0x8401467c    0x94    sd a5,-384(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014680    0x98    li a0,3
    0x84014682    0x9a    j ffffffff8401463c <decodeDomainInvocation+0x54>
    0x84014684    0x9c    auipc a5,0x9
    0x84014688    0xa0    addi a5,a5,-444 # ffffffff8401d4c8 <current_syscall_error>
    0x8401468c    0xa4    li a4,1
    0x8401468e    0xa6    sd a4,48(a5)
    0x84014690    0xa8    sd a4,0(a5)
    0x84014692    0xaa    li a0,3
    0x84014694    0xac    j ffffffff8401463c <decodeDomainInvocation+0x54>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 99 nodes.

Section handleFault (192 of 271)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 14 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleFault`:

    0x840141a4     0x0    addi sp,sp,-16
    0x840141a6     0x2    sd ra,8(sp)           ; stack access
    0x840141a8     0x4    sd s0,0(sp)           ; stack access
    0x840141aa     0x6    mv s0,a0
    0x840141ac     0x8    jal ra,ffffffff840140ba <sendFaultIPC>
    0x840141b0     0xc    bnez a0,ffffffff840141ba <handleFault+0x16>
    0x840141b2     0xe    ld ra,8(sp)           ; stack access
    0x840141b4    0x10    ld s0,0(sp)           ; stack access
    0x840141b6    0x12    addi sp,sp,16
    0x840141b8    0x14    ret
    0x840141ba    0x16    li a1,0
    0x840141bc    0x18    mv a0,s0
    0x840141be    0x1a    jal ra,ffffffff84012404 <setThreadState>
    0x840141c2    0x1e    j ffffffff840141b2 <handleFault+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 23 nodes.

Section sendFaultIPC (193 of 271)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 83 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `sendFaultIPC`:

    0x840140ba     0x0    addi sp,sp,-80
    0x840140bc     0x2    sd ra,72(sp)          ; stack access
    0x840140be     0x4    sd s0,64(sp)          ; stack access
    0x840140c0     0x6    sd s1,56(sp)          ; stack access
    0x840140c2     0x8    sd s2,48(sp)          ; stack access
    0x840140c4     0xa    sd s3,40(sp)          ; stack access
    0x840140c6     0xc    sd s4,32(sp)          ; stack access
    0x840140c8     0xe    mv s1,a0
    0x840140ca    0x10    auipc a5,0x9
    0x840140ce    0x14    addi a5,a5,998 # ffffffff8401d4b0 <current_lookup_fault>
    0x840140d2    0x18    ld s4,0(a5)
    0x840140d6    0x1c    ld s3,8(a5)
    0x840140da    0x20    ld s2,376(a0)
    0x840140de    0x24    mv a2,s2
    0x840140e0    0x26    mv a1,a0
    0x840140e2    0x28    addi a0,sp,8
    0x840140e4    0x2a    jal ra,ffffffff8401118e <lookupCap>
    0x840140e8    0x2e    ld s0,8(sp)           ; stack access
    0x840140ea    0x30    bnez s0,ffffffff84014154 <sendFaultIPC+0x9a>
    0x840140ec    0x32    ld a5,16(sp)          ; stack access
    0x840140ee    0x34    srli a3,a5,0x3b
    0x840140f2    0x38    li a4,4
    0x840140f4    0x3a    bne a3,a4,ffffffff84014172 <sendFaultIPC+0xb8>
    0x840140f8    0x3e    slli a4,a5,0x8
    0x840140fc    0x42    bgez a4,ffffffff84014172 <sendFaultIPC+0xb8>
    0x84014100    0x46    srli a3,a5,0x39
    0x84014104    0x4a    srli a4,a5,0x3a
    0x84014108    0x4e    or a4,a4,a3
    0x8401410a    0x50    andi a4,a4,1
    0x8401410c    0x52    beqz a4,ffffffff84014172 <sendFaultIPC+0xb8>
    0x8401410e    0x54    ld a2,24(sp)          ; stack access
    0x84014110    0x56    auipc a1,0x8
    0x84014114    0x5a    addi a1,a1,-144 # ffffffff8401c080 <current_fault>
    0x84014118    0x5e    ld a4,0(a1)
    0x8401411a    0x60    sd a4,312(s1)
    0x8401411e    0x64    ld a1,8(a1)
    0x84014120    0x66    sd a1,320(s1)
    0x84014124    0x6a    andi a4,a4,15
    0x84014126    0x6c    li a1,1
    0x84014128    0x6e    beq a4,a1,ffffffff84014168 <sendFaultIPC+0xae>
    0x8401412c    0x72    slli a6,a5,0x19
    0x84014130    0x76    srli a6,a6,0x19
    0x84014134    0x7a    slli a4,a5,0x19
    0x84014138    0x7e    bgez a4,ffffffff84014144 <sendFaultIPC+0x8a>
    0x8401413c    0x82    li a5,-1
    0x8401413e    0x84    slli a5,a5,0x27
    0x84014140    0x86    or a6,a6,a5
    0x84014144    0x8a    mv a5,s1
    0x84014146    0x8c    li a4,1
    0x84014148    0x8e    andi a3,a3,1
    0x8401414a    0x90    li a1,1
    0x8401414c    0x92    li a0,1
    0x8401414e    0x94    jal ra,ffffffff84013f4a <sendIPC>
    0x84014152    0x98    j ffffffff84014192 <sendFaultIPC+0xd8>
    0x84014154    0x9a    auipc a5,0x8
    0x84014158    0x9e    addi a5,a5,-212 # ffffffff8401c080 <current_fault>
    0x8401415c    0xa2    li a4,1
    0x8401415e    0xa4    sd a4,0(a5)
    0x84014160    0xa6    sd s2,8(a5)
    0x84014164    0xaa    li s0,1
    0x84014166    0xac    j ffffffff84014192 <sendFaultIPC+0xd8>
    0x84014168    0xae    sd s4,328(s1)
    0x8401416c    0xb2    sd s3,336(s1)
    0x84014170    0xb6    j ffffffff8401412c <sendFaultIPC+0x72>
    0x84014172    0xb8    auipc a5,0x8
    0x84014176    0xbc    addi a5,a5,-242 # ffffffff8401c080 <current_fault>
    0x8401417a    0xc0    li a4,1
    0x8401417c    0xc2    sd a4,0(a5)
    0x8401417e    0xc4    sd s2,8(a5)
    0x84014182    0xc8    auipc a5,0x9
    0x84014186    0xcc    addi a5,a5,814 # ffffffff8401d4b0 <current_lookup_fault>
    0x8401418a    0xd0    sd a4,0(a5)
    0x8401418c    0xd2    sd zero,8(a5)
    0x84014190    0xd6    li s0,1
    0x84014192    0xd8    mv a0,s0
    0x84014194    0xda    ld ra,72(sp)          ; stack access
    0x84014196    0xdc    ld s0,64(sp)          ; stack access
    0x84014198    0xde    ld s1,56(sp)          ; stack access
    0x8401419a    0xe0    ld s2,48(sp)          ; stack access
    0x8401419c    0xe2    ld s3,40(sp)          ; stack access
    0x8401419e    0xe4    ld s4,32(sp)          ; stack access
    0x840141a0    0xe6    addi sp,sp,80
    0x840141a2    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 128 nodes.

Section handleReply (194 of 271)
================================

Deriving specifications
-----------------------

Section `handleReply` consists of 24 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleReply`:

    0x84013ee8     0x0    auipc a5,0x1a
    0x84013eec     0x4    addi a5,a5,-1616 # ffffffff8402d898 <ksCurThread>
    0x84013ef0     0x8    ld a0,0(a5)
    0x84013ef2     0xa    andi a5,a0,-1024
    0x84013ef6     0xe    addi a1,a5,96
    0x84013efa    0x12    ld a3,96(a5)
    0x84013efc    0x14    srli a5,a3,0x3b
    0x84013f00    0x18    beqz a5,ffffffff84013f28 <handleReply+0x40>
    0x84013f02    0x1a    addi sp,sp,-16
    0x84013f04    0x1c    sd ra,8(sp)           ; stack access
    0x84013f06    0x1e    li a4,8
    0x84013f08    0x20    bne a5,a4,ffffffff84013f24 <handleReply+0x3c>
    0x84013f0c    0x24    andi a5,a3,1
    0x84013f10    0x28    bnez a5,ffffffff84013f24 <handleReply+0x3c>
    0x84013f12    0x2a    srli a3,a3,0x1
    0x84013f14    0x2c    andi a3,a3,1
    0x84013f16    0x2e    mv a2,a1
    0x84013f18    0x30    ld a1,8(a1)
    0x84013f1a    0x32    jal ra,ffffffff84013e74 <doReplyTransfer>
    0x84013f1e    0x36    ld ra,8(sp)           ; stack access
    0x84013f20    0x38    addi sp,sp,16
    0x84013f22    0x3a    ret
    0x84013f24    0x3c    jal ra,ffffffff84010294 <halt>
    0x84013f28    0x40    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleReply` has 39 nodes.

Section setupCallerCap (195 of 271)
===================================

Deriving specifications
-----------------------

Section `setupCallerCap` consists of 27 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `setupCallerCap`:

    0x84013b1c     0x0    addi sp,sp,-48
    0x84013b1e     0x2    sd ra,40(sp)          ; stack access
    0x84013b20     0x4    sd s0,32(sp)          ; stack access
    0x84013b22     0x6    sd s1,24(sp)          ; stack access
    0x84013b24     0x8    sd s2,16(sp)          ; stack access
    0x84013b26     0xa    mv s2,a0
    0x84013b28     0xc    mv s1,a1
    0x84013b2a     0xe    mv s0,a2
    0x84013b2c    0x10    li a1,5
    0x84013b2e    0x12    jal ra,ffffffff84012404 <setThreadState>
    0x84013b32    0x16    slli s0,s0,0x1
    0x84013b34    0x18    andi s0,s0,2
    0x84013b36    0x1a    andi a3,s1,-1024
    0x84013b3a    0x1e    andi a2,s2,-1024
    0x84013b3e    0x22    addi a3,a3,96
    0x84013b42    0x26    addi a2,a2,64
    0x84013b46    0x2a    li a0,1
    0x84013b48    0x2c    slli a0,a0,0x3e
    0x84013b4a    0x2e    or a0,a0,s0
    0x84013b4c    0x30    mv a1,s2
    0x84013b4e    0x32    jal ra,ffffffff840113c0 <cteInsert>
    0x84013b52    0x36    ld ra,40(sp)          ; stack access
    0x84013b54    0x38    ld s0,32(sp)          ; stack access
    0x84013b56    0x3a    ld s1,24(sp)          ; stack access
    0x84013b58    0x3c    ld s2,16(sp)          ; stack access
    0x84013b5a    0x3e    addi sp,sp,48
    0x84013b5c    0x40    ret

Proving inst theorems
---------------------

27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupCallerCap` has 38 nodes.

Section c_handle_interrupt (196 of 271)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x84013ae8    0x0    addi sp,sp,-16
    0x84013aea    0x2    sd ra,8(sp)           ; stack access
    0x84013aec    0x4    jal ra,ffffffff84013ac6 <handleInterruptEntry>
    0x84013af0    0x8    jal ra,ffffffff840101f0 <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section invokeIRQHandler_SetIRQHandler (197 of 271)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 25 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x84013782     0x0    addi sp,sp,-48
    0x84013784     0x2    sd ra,40(sp)          ; stack access
    0x84013786     0x4    sd s0,32(sp)          ; stack access
    0x84013788     0x6    sd s1,24(sp)          ; stack access
    0x8401378a     0x8    sd a1,0(sp)           ; stack access
    0x8401378c     0xa    sd a2,8(sp)           ; stack access
    0x8401378e     0xc    mv s1,a3
    0x84013790     0xe    slli s0,a0,0x20
    0x84013794    0x12    srli s0,s0,0x20
    0x84013796    0x14    slli s0,s0,0x5
    0x84013798    0x16    auipc a0,0x1a
    0x8401379c    0x1a    addi a0,a0,-536 # ffffffff8402d580 <intStateIRQNode>
    0x840137a0    0x1e    add s0,s0,a0
    0x840137a2    0x20    mv a0,s0
    0x840137a4    0x22    jal ra,ffffffff8401374e <cteDeleteOne>
    0x840137a8    0x26    mv a3,s0
    0x840137aa    0x28    mv a2,s1
    0x840137ac    0x2a    ld a0,0(sp)           ; stack access
    0x840137ae    0x2c    ld a1,8(sp)           ; stack access
    0x840137b0    0x2e    jal ra,ffffffff840113c0 <cteInsert>
    0x840137b4    0x32    ld ra,40(sp)          ; stack access
    0x840137b6    0x34    ld s0,32(sp)          ; stack access
    0x840137b8    0x36    ld s1,24(sp)          ; stack access
    0x840137ba    0x38    addi sp,sp,48
    0x840137bc    0x3a    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 38 nodes.

Section cteDelete (198 of 271)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 29 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

12 stack accesses found. Annotated code for `cteDelete`:

    0x840131cc     0x0    addi sp,sp,-64
    0x840131ce     0x2    sd ra,56(sp)          ; stack access
    0x840131d0     0x4    sd s0,48(sp)          ; stack access
    0x840131d2     0x6    sd s1,40(sp)          ; stack access
    0x840131d4     0x8    sd s2,32(sp)          ; stack access
    0x840131d6     0xa    mv s2,a0
    0x840131d8     0xc    mv s0,a1
    0x840131da     0xe    mv a2,a1
    0x840131dc    0x10    mv a1,a0
    0x840131de    0x12    mv a0,sp
    0x840131e0    0x14    jal ra,ffffffff84012fca <finaliseSlot>
    0x840131e4    0x18    ld s1,0(sp)           ; stack access
    0x840131e6    0x1a    bnez s1,ffffffff840131f8 <cteDelete+0x2c>
    0x840131e8    0x1c    ld a5,8(sp)           ; stack access
    0x840131ea    0x1e    or s0,s0,a5
    0x840131ec    0x20    beqz s0,ffffffff84013206 <cteDelete+0x3a>
    0x840131ee    0x22    ld a1,16(sp)          ; stack access
    0x840131f0    0x24    ld a2,24(sp)          ; stack access
    0x840131f2    0x26    mv a0,s2
    0x840131f4    0x28    jal ra,ffffffff84011846 <emptySlot>
    0x840131f8    0x2c    mv a0,s1
    0x840131fa    0x2e    ld ra,56(sp)          ; stack access
    0x840131fc    0x30    ld s0,48(sp)          ; stack access
    0x840131fe    0x32    ld s1,40(sp)          ; stack access
    0x84013200    0x34    ld s2,32(sp)          ; stack access
    0x84013202    0x36    addi sp,sp,64
    0x84013204    0x38    ret
    0x84013206    0x3a    mv s1,s0
    0x84013208    0x3c    j ffffffff840131f8 <cteDelete+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 48 nodes.

Section cancelSignal (199 of 271)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 48 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `cancelSignal`:

    0x84012c84     0x0    addi sp,sp,-48
    0x84012c86     0x2    sd ra,40(sp)          ; stack access
    0x84012c88     0x4    sd s0,32(sp)          ; stack access
    0x84012c8a     0x6    sd s1,24(sp)          ; stack access
    0x84012c8c     0x8    mv s1,a0
    0x84012c8e     0xa    mv s0,a1
    0x84012c90     0xc    ld a5,8(a1)
    0x84012c92     0xe    slli a1,a5,0x19
    0x84012c96    0x12    srli a1,a1,0x19
    0x84012c98    0x14    slli a4,a5,0x19
    0x84012c9c    0x18    bgez a4,ffffffff84012ca6 <cancelSignal+0x22>
    0x84012ca0    0x1c    li a5,-1
    0x84012ca2    0x1e    slli a5,a5,0x27
    0x84012ca4    0x20    or a1,a1,a5
    0x84012ca6    0x22    ld a5,0(s0)
    0x84012ca8    0x24    srli a2,a5,0x19
    0x84012cac    0x28    bgez a5,ffffffff84012cb6 <cancelSignal+0x32>
    0x84012cb0    0x2c    li a5,-1
    0x84012cb2    0x2e    slli a5,a5,0x27
    0x84012cb4    0x30    or a2,a2,a5
    0x84012cb6    0x32    mv a0,s1
    0x84012cb8    0x34    jal ra,ffffffff84012b3a <tcbEPDequeue>
    0x84012cbc    0x38    ld a4,8(s0)
    0x84012cbe    0x3a    li a5,-1
    0x84012cc0    0x3c    slli a3,a5,0x27
    0x84012cc4    0x40    and a4,a4,a3
    0x84012cc6    0x42    srli a5,a5,0x19
    0x84012cc8    0x44    and a5,a5,a0
    0x84012cca    0x46    or a5,a5,a4
    0x84012ccc    0x48    sd a5,8(s0)
    0x84012cce    0x4a    ld a5,0(s0)
    0x84012cd0    0x4c    slli a5,a5,0x27
    0x84012cd2    0x4e    srli a5,a5,0x27
    0x84012cd4    0x50    slli a1,a1,0x19
    0x84012cd6    0x52    or a5,a5,a1
    0x84012cd8    0x54    beqz a0,ffffffff84012cee <cancelSignal+0x6a>
    0x84012cda    0x56    sd a5,0(s0)
    0x84012cdc    0x58    li a1,0
    0x84012cde    0x5a    mv a0,s1
    0x84012ce0    0x5c    jal ra,ffffffff84012404 <setThreadState>
    0x84012ce4    0x60    ld ra,40(sp)          ; stack access
    0x84012ce6    0x62    ld s0,32(sp)          ; stack access
    0x84012ce8    0x64    ld s1,24(sp)          ; stack access
    0x84012cea    0x66    addi sp,sp,48
    0x84012cec    0x68    ret
    0x84012cee    0x6a    andi a5,a5,-4
    0x84012cf0    0x6c    sd a5,0(s0)
    0x84012cf2    0x6e    j ffffffff84012cdc <cancelSignal+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 70 nodes.

Section switchToThread (200 of 271)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 13 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x84012842     0x0    addi sp,sp,-16
    0x84012844     0x2    sd ra,8(sp)           ; stack access
    0x84012846     0x4    sd s0,0(sp)           ; stack access
    0x84012848     0x6    mv s0,a0
    0x8401284a     0x8    jal ra,ffffffff84010820 <setVMRoot>
    0x8401284e     0xc    mv a0,s0
    0x84012850     0xe    jal ra,ffffffff8401278c <tcbSchedDequeue>
    0x84012854    0x12    auipc a5,0x1b
    0x84012858    0x16    sd s0,68(a5) # ffffffff8402d898 <ksCurThread>
    0x8401285c    0x1a    ld ra,8(sp)           ; stack access
    0x8401285e    0x1c    ld s0,0(sp)           ; stack access
    0x84012860    0x1e    addi sp,sp,16
    0x84012862    0x20    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 21 nodes.

Section timerTick (201 of 271)
==============================

Deriving specifications
-----------------------

Section `timerTick` consists of 29 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `timerTick`:

    0x84012738     0x0    addi sp,sp,-16
    0x8401273a     0x2    sd ra,8(sp)           ; stack access
    0x8401273c     0x4    auipc a5,0x1b
    0x84012740     0x8    addi a5,a5,348 # ffffffff8402d898 <ksCurThread>
    0x84012744     0xc    ld a0,0(a5)
    0x84012746     0xe    ld a5,280(a0)
    0x8401274a    0x12    andi a5,a5,15
    0x8401274c    0x14    li a4,1
    0x8401274e    0x16    bne a5,a4,ffffffff84012760 <timerTick+0x28>
    0x84012752    0x1a    ld a5,368(a0)
    0x84012756    0x1e    bgeu a4,a5,ffffffff84012776 <timerTick+0x3e>
    0x8401275a    0x22    addi a5,a5,-1
    0x8401275c    0x24    sd a5,368(a0)
    0x84012760    0x28    auipc a4,0x1b
    0x84012764    0x2c    addi a4,a4,-560 # ffffffff8402d530 <ksDomainTime>
    0x84012768    0x30    ld a5,0(a4)
    0x8401276a    0x32    addi a5,a5,-1
    0x8401276c    0x34    sd a5,0(a4)
    0x8401276e    0x36    beqz a5,ffffffff84012786 <timerTick+0x4e>
    0x84012770    0x38    ld ra,8(sp)           ; stack access
    0x84012772    0x3a    addi sp,sp,16
    0x84012774    0x3c    ret
    0x84012776    0x3e    li a5,5
    0x84012778    0x40    sd a5,368(a0)
    0x8401277c    0x44    jal ra,ffffffff840126aa <tcbSchedAppend>
    0x84012780    0x48    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84012784    0x4c    j ffffffff84012760 <timerTick+0x28>
    0x84012786    0x4e    jal ra,ffffffff84012398 <rescheduleRequired>
    0x8401278a    0x52    j ffffffff84012770 <timerTick+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `timerTick` has 48 nodes.

Section possibleSwitchTo (202 of 271)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x840125b8     0x0    addi sp,sp,-16
    0x840125ba     0x2    sd ra,8(sp)           ; stack access
    0x840125bc     0x4    sd s0,0(sp)           ; stack access
    0x840125be     0x6    mv s0,a0
    0x840125c0     0x8    ld a4,344(a0)
    0x840125c4     0xc    auipc a5,0x1b
    0x840125c8    0x10    addi a5,a5,60 # ffffffff8402d600 <ksCurDomain>
    0x840125cc    0x14    ld a5,0(a5)
    0x840125ce    0x16    bne a4,a5,ffffffff840125ea <possibleSwitchTo+0x32>
    0x840125d2    0x1a    auipc a5,0xb
    0x840125d6    0x1e    addi a5,a5,-274 # ffffffff8401d4c0 <ksSchedulerAction>
    0x840125da    0x22    ld a5,0(a5)
    0x840125dc    0x24    beqz a5,ffffffff840125f6 <possibleSwitchTo+0x3e>
    0x840125de    0x26    jal ra,ffffffff84012398 <rescheduleRequired>
    0x840125e2    0x2a    mv a0,s0
    0x840125e4    0x2c    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x840125e8    0x30    j ffffffff840125ee <possibleSwitchTo+0x36>
    0x840125ea    0x32    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x840125ee    0x36    ld ra,8(sp)           ; stack access
    0x840125f0    0x38    ld s0,0(sp)           ; stack access
    0x840125f2    0x3a    addi sp,sp,16
    0x840125f4    0x3c    ret
    0x840125f6    0x3e    auipc a5,0xb
    0x840125fa    0x42    sd a0,-310(a5) # ffffffff8401d4c0 <ksSchedulerAction>
    0x840125fe    0x46    j ffffffff840125ee <possibleSwitchTo+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 41 nodes.

Section activateThread (203 of 271)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 21 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `activateThread`:

    0x84012430     0x0    addi sp,sp,-16
    0x84012432     0x2    sd ra,8(sp)           ; stack access
    0x84012434     0x4    auipc a5,0x1b
    0x84012438     0x8    addi a5,a5,1124 # ffffffff8402d898 <ksCurThread>
    0x8401243c     0xc    ld a0,0(a5)
    0x8401243e     0xe    ld a5,280(a0)
    0x84012442    0x12    andi a5,a5,15
    0x84012444    0x14    li a4,2
    0x84012446    0x16    beq a5,a4,ffffffff8401245a <activateThread+0x2a>
    0x8401244a    0x1a    li a4,7
    0x8401244c    0x1c    beq a5,a4,ffffffff84012468 <activateThread+0x38>
    0x84012450    0x20    li a4,1
    0x84012452    0x22    beq a5,a4,ffffffff84012468 <activateThread+0x38>
    0x84012456    0x26    jal ra,ffffffff84010294 <halt>
    0x8401245a    0x2a    ld a5,264(a0)
    0x8401245e    0x2e    sd a5,272(a0)
    0x84012462    0x32    li a1,1
    0x84012464    0x34    jal ra,ffffffff84012404 <setThreadState>
    0x84012468    0x38    ld ra,8(sp)           ; stack access
    0x8401246a    0x3a    addi sp,sp,16
    0x8401246c    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 36 nodes.

Section createObject (204 of 271)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 78 instructions.


Stack analysis
---------------

Section `createObject` expects pointer to stack in a0.
7 stack accesses found. Annotated code for `createObject`:

    0x840121d2     0x0    addi sp,sp,-32
    0x840121d4     0x2    sd ra,24(sp)          ; stack access
    0x840121d6     0x4    li a5,4
    0x840121d8     0x6    bltu a5,a0,ffffffff840121f4 <createObject+0x22>
    0x840121dc     0xa    li a5,4
    0x840121de     0xc    bltu a5,a0,ffffffff8401228c <createObject+0xba>
    0x840121e2    0x10    slli a0,a0,0x2
    0x840121e4    0x12    auipc a4,0x5
    0x840121e8    0x16    addi a4,a4,1404 # ffffffff84017760 <ksDomScheduleLength+0x5f0>
    0x840121ec    0x1a    add a0,a0,a4
    0x840121ee    0x1c    lw a5,0(a0)           ; stack access
    0x840121f0    0x1e    add a5,a5,a4
    0x840121f2    0x20    jr a5
    0x840121f4    0x22    jal ra,ffffffff84010f96 <Arch_createObject>
    0x840121f8    0x26    sd a0,0(sp)           ; stack access
    0x840121fa    0x28    sd a1,8(sp)           ; stack access
    0x840121fc    0x2a    ld a0,0(sp)           ; stack access
    0x840121fe    0x2c    ld a1,8(sp)           ; stack access
    0x84012200    0x2e    ld ra,24(sp)          ; stack access
    0x84012202    0x30    addi sp,sp,32
    0x84012204    0x32    ret
    0x84012206    0x34    li a5,32
    0x8401220a    0x38    sd a5,768(a1) # fffffffff8000300 <ki_end+0x73fd2300>
    0x8401220e    0x3c    li a5,5
    0x84012210    0x3e    sd a5,880(a1)
    0x84012214    0x42    auipc a5,0x1b
    0x84012218    0x46    addi a5,a5,1004 # ffffffff8402d600 <ksCurDomain>
    0x8401221c    0x4a    ld a5,0(a5)
    0x8401221e    0x4c    sd a5,856(a1)
    0x84012222    0x50    addi a1,a1,512
    0x84012226    0x54    slli a1,a1,0x19
    0x84012228    0x56    srli a1,a1,0x19
    0x8401222a    0x58    li a5,3
    0x8401222c    0x5a    slli a5,a5,0x3d
    0x8401222e    0x5c    or a1,a1,a5
    0x84012230    0x5e    sd a1,0(sp)
    0x84012232    0x60    sd zero,8(sp)
    0x84012234    0x62    j ffffffff840121fc <createObject+0x2a>
    0x84012236    0x64    slli a1,a1,0x19
    0x84012238    0x66    srli a1,a1,0x19
    0x8401223a    0x68    li a5,79
    0x8401223e    0x6c    slli a5,a5,0x37
    0x84012240    0x6e    or a1,a1,a5
    0x84012242    0x70    sd a1,0(sp)
    0x84012244    0x72    sd zero,8(sp)
    0x84012246    0x74    j ffffffff840121fc <createObject+0x2a>
    0x84012248    0x76    slli a1,a1,0x19
    0x8401224a    0x78    srli a1,a1,0x19
    0x8401224c    0x7a    li a5,27
    0x8401224e    0x7c    slli a5,a5,0x39
    0x84012250    0x7e    or a1,a1,a5
    0x84012252    0x80    sd a1,0(sp)
    0x84012254    0x82    sd zero,8(sp)
    0x84012256    0x84    j ffffffff840121fc <createObject+0x2a>
    0x84012258    0x86    andi a2,a2,63
    0x8401225c    0x8a    slli a2,a2,0x2f
    0x8401225e    0x8c    slli a1,a1,0x19
    0x84012260    0x8e    srli a1,a1,0x1a
    0x84012262    0x90    or a1,a1,a2
    0x84012264    0x92    li a2,5
    0x84012266    0x94    slli a2,a2,0x3c
    0x84012268    0x96    or a1,a1,a2
    0x8401226a    0x98    sd a1,0(sp)
    0x8401226c    0x9a    sd zero,8(sp)
    0x8401226e    0x9c    j ffffffff840121fc <createObject+0x2a>
    0x84012270    0x9e    slli a1,a1,0x19
    0x84012272    0xa0    srli a1,a1,0x19
    0x84012274    0xa2    li a5,1
    0x84012276    0xa4    slli a5,a5,0x3c
    0x84012278    0xa6    or a1,a1,a5
    0x8401227a    0xa8    sd a1,0(sp)
    0x8401227c    0xaa    snez a3,a3
    0x84012280    0xae    slli a3,a3,0x6
    0x84012282    0xb0    andi a2,a2,63
    0x84012286    0xb4    or a2,a2,a3
    0x84012288    0xb6    sd a2,8(sp)
    0x8401228a    0xb8    j ffffffff840121fc <createObject+0x2a>
    0x8401228c    0xba    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 107 nodes.

Section maskCapRights (205 of 271)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 101 instructions.


Stack analysis
---------------

Section `maskCapRights` expects pointer to stack in a0.
9 stack accesses found. Annotated code for `maskCapRights`:

    0x840120c8      0x0    addi sp,sp,-48
    0x840120ca      0x2    sd ra,40(sp)          ; stack access
    0x840120cc      0x4    sd a1,0(sp)           ; stack access
    0x840120ce      0x6    sd a2,8(sp)           ; stack access
    0x840120d0      0x8    slli a4,a1,0x4
    0x840120d4      0xc    bltz a4,ffffffff840120f6 <maskCapRights+0x2e>
    0x840120d8     0x10    srli a5,a1,0x3b
    0x840120dc     0x14    ld a4,8(sp)           ; stack access
    0x840120de     0x16    li a3,20
    0x840120e0     0x18    bltu a3,a5,ffffffff840121ce <maskCapRights+0x106>
    0x840120e4     0x1c    slli a5,a5,0x2
    0x840120e6     0x1e    auipc a3,0x5
    0x840120ea     0x22    addi a3,a3,1574 # ffffffff8401770c <ksDomScheduleLength+0x59c>
    0x840120ee     0x26    add a5,a5,a3
    0x840120f0     0x28    lw a5,0(a5)
    0x840120f2     0x2a    add a5,a5,a3
    0x840120f4     0x2c    jr a5
    0x840120f6     0x2e    jal ra,ffffffff84010bf8 <Arch_maskCapRights>
    0x840120fa     0x32    sd a0,16(sp)          ; stack access
    0x840120fc     0x34    sd a1,24(sp)          ; stack access
    0x840120fe     0x36    ld a0,16(sp)          ; stack access
    0x84012100     0x38    ld a1,24(sp)          ; stack access
    0x84012102     0x3a    ld ra,40(sp)          ; stack access
    0x84012104     0x3c    addi sp,sp,48
    0x84012106     0x3e    ret
    0x84012108     0x40    sd a1,16(sp)
    0x8401210a     0x42    sd a4,24(sp)
    0x8401210c     0x44    j ffffffff840120fe <maskCapRights+0x36>
    0x8401210e     0x46    srli a5,a1,0x37
    0x84012112     0x4a    and a5,a5,a0
    0x84012114     0x4c    li a3,1
    0x84012116     0x4e    and a5,a5,a3
    0x84012118     0x50    slli a5,a5,0x37
    0x8401211a     0x52    li a2,-1
    0x8401211c     0x54    slli a6,a2,0x37
    0x84012120     0x58    addi a6,a6,-1
    0x84012122     0x5a    and a6,a1,a6
    0x84012126     0x5e    or a5,a5,a6
    0x8401212a     0x62    slli a6,a2,0x38
    0x8401212e     0x66    addi a6,a6,-1
    0x84012130     0x68    and a5,a5,a6
    0x84012134     0x6c    srli a6,a0,0x1
    0x84012138     0x70    srli a7,a1,0x38
    0x8401213c     0x74    and a6,a6,a7
    0x84012140     0x78    and a6,a3,a6
    0x84012144     0x7c    slli a6,a6,0x38
    0x84012146     0x7e    or a5,a5,a6
    0x8401214a     0x82    slli a6,a2,0x39
    0x8401214e     0x86    addi a6,a6,-1
    0x84012150     0x88    and a5,a5,a6
    0x84012154     0x8c    srli a6,a0,0x2
    0x84012158     0x90    srli a7,a1,0x39
    0x8401215c     0x94    and a6,a6,a7
    0x84012160     0x98    and a6,a3,a6
    0x84012164     0x9c    slli a6,a6,0x39
    0x84012166     0x9e    or a5,a5,a6
    0x8401216a     0xa2    slli a2,a2,0x3a
    0x8401216c     0xa4    addi a2,a2,-1
    0x8401216e     0xa6    and a5,a5,a2
    0x84012170     0xa8    srli a0,a0,0x3
    0x84012172     0xaa    srli a1,a1,0x3a
    0x84012174     0xac    and a0,a0,a1
    0x84012176     0xae    and a3,a3,a0
    0x84012178     0xb0    slli a3,a3,0x3a
    0x8401217a     0xb2    or a5,a5,a3
    0x8401217c     0xb4    sd a5,16(sp)
    0x8401217e     0xb6    sd a4,24(sp)
    0x84012180     0xb8    j ffffffff840120fe <maskCapRights+0x36>
    0x84012182     0xba    srli a5,a1,0x39
    0x84012186     0xbe    and a5,a5,a0
    0x84012188     0xc0    li a3,1
    0x8401218a     0xc2    and a5,a5,a3
    0x8401218c     0xc4    slli a5,a5,0x39
    0x8401218e     0xc6    li a2,-1
    0x84012190     0xc8    slli a6,a2,0x39
    0x84012194     0xcc    addi a6,a6,-1
    0x84012196     0xce    and a6,a1,a6
    0x8401219a     0xd2    or a5,a5,a6
    0x8401219e     0xd6    slli a2,a2,0x3a
    0x840121a0     0xd8    addi a2,a2,-1
    0x840121a2     0xda    and a5,a5,a2
    0x840121a4     0xdc    srli a0,a0,0x1
    0x840121a6     0xde    srli a1,a1,0x3a
    0x840121a8     0xe0    and a0,a0,a1
    0x840121aa     0xe2    and a3,a3,a0
    0x840121ac     0xe4    slli a3,a3,0x3a
    0x840121ae     0xe6    or a5,a5,a3
    0x840121b0     0xe8    sd a5,16(sp)
    0x840121b2     0xea    sd a4,24(sp)
    0x840121b4     0xec    j ffffffff840120fe <maskCapRights+0x36>
    0x840121b6     0xee    srli a5,a0,0x2
    0x840121ba     0xf2    srli a0,a1,0x1
    0x840121be     0xf6    and a5,a5,a0
    0x840121c0     0xf8    slli a5,a5,0x1
    0x840121c2     0xfa    andi a5,a5,2
    0x840121c4     0xfc    andi a1,a1,-3
    0x840121c6     0xfe    or a1,a1,a5
    0x840121c8    0x100    sd a1,16(sp)
    0x840121ca    0x102    sd a4,24(sp)
    0x840121cc    0x104    j ffffffff840120fe <maskCapRights+0x36>
    0x840121ce    0x106    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 127 nodes.

Section sameObjectAs (206 of 271)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 36 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `sameObjectAs`:

    0x84011f4c     0x0    addi sp,sp,-48
    0x84011f4e     0x2    sd ra,40(sp)          ; stack access
    0x84011f50     0x4    sd a0,16(sp)          ; stack access
    0x84011f52     0x6    sd a1,24(sp)          ; stack access
    0x84011f54     0x8    sd a2,0(sp)           ; stack access
    0x84011f56     0xa    sd a3,8(sp)           ; stack access
    0x84011f58     0xc    srli a0,a0,0x3b
    0x84011f5a     0xe    li a5,2
    0x84011f5c    0x10    beq a0,a5,ffffffff84011fa0 <sameObjectAs+0x54>
    0x84011f60    0x14    li a4,14
    0x84011f62    0x16    beq a0,a4,ffffffff84011f84 <sameObjectAs+0x38>
    0x84011f66    0x1a    andi a0,a0,1
    0x84011f68    0x1c    beqz a0,ffffffff84011f72 <sameObjectAs+0x26>
    0x84011f6a    0x1e    slli a4,a2,0x4
    0x84011f6e    0x22    bltz a4,ffffffff84011f92 <sameObjectAs+0x46>
    0x84011f72    0x26    ld a2,0(sp)           ; stack access
    0x84011f74    0x28    ld a3,8(sp)           ; stack access
    0x84011f76    0x2a    ld a0,16(sp)          ; stack access
    0x84011f78    0x2c    ld a1,24(sp)          ; stack access
    0x84011f7a    0x2e    jal ra,ffffffff840119b2 <sameRegionAs>
    0x84011f7e    0x32    ld ra,40(sp)          ; stack access
    0x84011f80    0x34    addi sp,sp,48
    0x84011f82    0x36    ret
    0x84011f84    0x38    srli a5,a2,0x3b
    0x84011f88    0x3c    li a4,16
    0x84011f8a    0x3e    li a0,0
    0x84011f8c    0x40    bne a5,a4,ffffffff84011f72 <sameObjectAs+0x26>
    0x84011f90    0x44    j ffffffff84011f7e <sameObjectAs+0x32>
    0x84011f92    0x46    ld a2,0(sp)           ; stack access
    0x84011f94    0x48    ld a3,8(sp)           ; stack access
    0x84011f96    0x4a    ld a0,16(sp)          ; stack access
    0x84011f98    0x4c    ld a1,24(sp)          ; stack access
    0x84011f9a    0x4e    jal ra,ffffffff84010ebe <Arch_sameObjectAs>
    0x84011f9e    0x52    j ffffffff84011f7e <sameObjectAs+0x32>
    0x84011fa0    0x54    li a0,0
    0x84011fa2    0x56    j ffffffff84011f7e <sameObjectAs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 63 nodes.

Section deriveCap (207 of 271)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 54 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `deriveCap`:

    0x84011eca     0x0    addi sp,sp,-64
    0x84011ecc     0x2    sd ra,56(sp)          ; stack access
    0x84011ece     0x4    sd s0,48(sp)          ; stack access
    0x84011ed0     0x6    sd s1,40(sp)          ; stack access
    0x84011ed2     0x8    sd s2,32(sp)          ; stack access
    0x84011ed4     0xa    sd s3,24(sp)          ; stack access
    0x84011ed6     0xc    mv s1,a0
    0x84011ed8     0xe    sd a2,0(sp)           ; stack access
    0x84011eda    0x10    sd a3,8(sp)           ; stack access
    0x84011edc    0x12    mv s2,a2
    0x84011ede    0x14    srli a5,a2,0x3b
    0x84011ee2    0x18    andi s0,a5,1
    0x84011ee6    0x1c    bnez s0,ffffffff84011f06 <deriveCap+0x3c>
    0x84011ee8    0x1e    ld s3,8(sp)           ; stack access
    0x84011eea    0x20    li a4,8
    0x84011eec    0x22    beq a5,a4,ffffffff84011f32 <deriveCap+0x68>
    0x84011ef0    0x26    bltu a4,a5,ffffffff84011f0c <deriveCap+0x42>
    0x84011ef4    0x2a    li a4,2
    0x84011ef6    0x2c    bne a5,a4,ffffffff84011f18 <deriveCap+0x4e>
    0x84011efa    0x30    mv a0,a1
    0x84011efc    0x32    jal ra,ffffffff84011e8a <ensureNoChildren>
    0x84011f00    0x36    bnez a0,ffffffff84011f44 <deriveCap+0x7a>
    0x84011f02    0x38    mv s0,a0
    0x84011f04    0x3a    j ffffffff84011f18 <deriveCap+0x4e>
    0x84011f06    0x3c    jal ra,ffffffff84010b84 <Arch_deriveCap>
    0x84011f0a    0x40    j ffffffff84011f22 <deriveCap+0x58>
    0x84011f0c    0x42    li a4,14
    0x84011f0e    0x44    beq a5,a4,ffffffff84011f38 <deriveCap+0x6e>
    0x84011f12    0x48    li a4,18
    0x84011f14    0x4a    beq a5,a4,ffffffff84011f3e <deriveCap+0x74>
    0x84011f18    0x4e    sd s0,0(s1)           ; stack access
    0x84011f1a    0x50    sd s2,8(s1)           ; stack access
    0x84011f1e    0x54    sd s3,16(s1)          ; stack access
    0x84011f22    0x58    mv a0,s1
    0x84011f24    0x5a    ld ra,56(sp)          ; stack access
    0x84011f26    0x5c    ld s0,48(sp)          ; stack access
    0x84011f28    0x5e    ld s1,40(sp)          ; stack access
    0x84011f2a    0x60    ld s2,32(sp)          ; stack access
    0x84011f2c    0x62    ld s3,24(sp)          ; stack access
    0x84011f2e    0x64    addi sp,sp,64
    0x84011f30    0x66    ret
    0x84011f32    0x68    mv s3,s0
    0x84011f34    0x6a    mv s2,s0
    0x84011f36    0x6c    j ffffffff84011f18 <deriveCap+0x4e>
    0x84011f38    0x6e    mv s3,s0
    0x84011f3a    0x70    mv s2,s0
    0x84011f3c    0x72    j ffffffff84011f18 <deriveCap+0x4e>
    0x84011f3e    0x74    mv s3,s0
    0x84011f40    0x76    mv s2,s0
    0x84011f42    0x78    j ffffffff84011f18 <deriveCap+0x4e>
    0x84011f44    0x7a    mv s3,s0
    0x84011f46    0x7c    mv s2,s0
    0x84011f48    0x7e    mv s0,a0
    0x84011f4a    0x80    j ffffffff84011f18 <deriveCap+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 87 nodes.

Section sameRegionAs (208 of 271)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 392 instructions.

RVC_TFFTT____T____TF..
LW..

Stack analysis
---------------

9 stack accesses found. Annotated code for `sameRegionAs`:

    0x840119b2      0x0    addi sp,sp,-48
    0x840119b4      0x2    sd ra,40(sp)          ; stack access
    0x840119b6      0x4    sd a0,16(sp)          ; stack access
    0x840119b8      0x6    sd a1,24(sp)          ; stack access
    0x840119ba      0x8    sd a2,0(sp)           ; stack access
    0x840119bc      0xa    sd a3,8(sp)           ; stack access
    0x840119be      0xc    srli a5,a0,0x3b
    0x840119c2     0x10    li a4,20
    0x840119c4     0x12    bltu a4,a5,ffffffff84011df2 <sameRegionAs+0x440>
    0x840119c8     0x16    mv t1,a0
    0x840119ca     0x18    slli a6,a5,0x2
    0x840119ce     0x1c    auipc a7,0x6
    0x840119d2     0x20    addi a7,a7,-1042 # ffffffff840175bc <ksDomScheduleLength+0x44c>
    0x840119d6     0x24    add a6,a6,a7
    0x840119d8     0x26    lw a4,0(a6)
    0x840119dc     0x2a    add a4,a4,a7
    0x840119de     0x2c    jr a4
    0x840119e0     0x2e    srli a4,a2,0x3b
    0x840119e4     0x32    li a5,20
    0x840119e6     0x34    bltu a5,a4,ffffffff840119fe <sameRegionAs+0x4c>
    0x840119ea     0x38    slli a0,a4,0x2
    0x840119ee     0x3c    auipc a6,0x6
    0x840119f2     0x40    addi a6,a6,-990 # ffffffff84017610 <ksDomScheduleLength+0x4a0>
    0x840119f6     0x44    add a0,a0,a6
    0x840119f8     0x46    lw a5,0(a0)
    0x840119fa     0x48    add a5,a5,a6
    0x840119fc     0x4a    jr a5
    0x840119fe     0x4c    li a5,3
    0x84011a00     0x4e    beq a4,a5,ffffffff84011a26 <sameRegionAs+0x74>
    0x84011a04     0x52    bgeu a5,a4,ffffffff84011a1a <sameRegionAs+0x68>
    0x84011a08     0x56    li a5,11
    0x84011a0a     0x58    li a0,0
    0x84011a0c     0x5a    beq a4,a5,ffffffff84011a2c <sameRegionAs+0x7a>
    0x84011a10     0x5e    li a5,13
    0x84011a12     0x60    li a0,1
    0x84011a14     0x62    beq a4,a5,ffffffff84011a2c <sameRegionAs+0x7a>
    0x84011a18     0x66    j ffffffff84011a22 <sameRegionAs+0x70>
    0x84011a1a     0x68    li a5,1
    0x84011a1c     0x6a    li a0,1
    0x84011a1e     0x6c    beq a4,a5,ffffffff84011a2c <sameRegionAs+0x7a>
    0x84011a22     0x70    jal ra,ffffffff84010294 <halt>
    0x84011a26     0x74    li a0,1
    0x84011a28     0x76    j ffffffff84011a2c <sameRegionAs+0x7a>
    0x84011a2a     0x78    li a0,1
    0x84011a2c     0x7a    beqz a0,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011a30     0x7e    slli a6,t1,0x19
    0x84011a34     0x82    srli a6,a6,0x19
    0x84011a38     0x86    slli a5,t1,0x19
    0x84011a3c     0x8a    bgez a5,ffffffff84011a48 <sameRegionAs+0x96>
    0x84011a40     0x8e    li a5,-1
    0x84011a42     0x90    slli a5,a5,0x27
    0x84011a44     0x92    or a6,a6,a5
    0x84011a48     0x96    li a5,20
    0x84011a4a     0x98    bltu a5,a4,ffffffff84011b72 <sameRegionAs+0x1c0>
    0x84011a4e     0x9c    slli a0,a4,0x2
    0x84011a52     0xa0    auipc a7,0x6
    0x84011a56     0xa4    addi a7,a7,-1006 # ffffffff84017664 <ksDomScheduleLength+0x4f4>
    0x84011a5a     0xa8    add a0,a0,a7
    0x84011a5c     0xaa    lw a5,0(a0)
    0x84011a5e     0xac    add a5,a5,a7
    0x84011a60     0xae    jr a5
    0x84011a62     0xb0    slli t1,a2,0x19
    0x84011a66     0xb4    srli t1,t1,0x19
    0x84011a6a     0xb8    slli a5,a2,0x19
    0x84011a6e     0xbc    bgez a5,ffffffff84011a7a <sameRegionAs+0xc8>
    0x84011a72     0xc0    li a5,-1
    0x84011a74     0xc2    slli a5,a5,0x27
    0x84011a76     0xc4    or t1,t1,a5
    0x84011a7a     0xc8    li a5,1
    0x84011a7c     0xca    sll a1,a5,a1
    0x84011a80     0xce    addi a1,a1,-1
    0x84011a82     0xd0    add a1,a1,a6
    0x84011a84     0xd2    andi a3,a3,63
    0x84011a88     0xd6    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011a8a     0xd8    slli t1,a2,0x19
    0x84011a8e     0xdc    srli t1,t1,0x19
    0x84011a92     0xe0    slli a5,a2,0x19
    0x84011a96     0xe4    bgez a5,ffffffff84011aa2 <sameRegionAs+0xf0>
    0x84011a9a     0xe8    li a5,-1
    0x84011a9c     0xea    slli a5,a5,0x27
    0x84011a9e     0xec    or t1,t1,a5
    0x84011aa2     0xf0    li a5,1
    0x84011aa4     0xf2    sll a1,a5,a1
    0x84011aa8     0xf6    addi a1,a1,-1
    0x84011aaa     0xf8    add a1,a1,a6
    0x84011aac     0xfa    li a3,4
    0x84011aae     0xfc    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011ab0     0xfe    slli t1,a2,0x19
    0x84011ab4    0x102    srli t1,t1,0x19
    0x84011ab8    0x106    slli a5,a2,0x19
    0x84011abc    0x10a    bgez a5,ffffffff84011ac8 <sameRegionAs+0x116>
    0x84011ac0    0x10e    li a5,-1
    0x84011ac2    0x110    slli a5,a5,0x27
    0x84011ac4    0x112    or t1,t1,a5
    0x84011ac8    0x116    li a5,1
    0x84011aca    0x118    sll a1,a5,a1
    0x84011ace    0x11c    addi a1,a1,-1
    0x84011ad0    0x11e    add a1,a1,a6
    0x84011ad2    0x120    li a3,5
    0x84011ad4    0x122    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011ad6    0x124    slli a4,a2,0x1
    0x84011ada    0x128    lui a0,0xfc000
    0x84011ade    0x12c    srli a0,a0,0x19
    0x84011ae0    0x12e    and t1,a4,a0
    0x84011ae4    0x132    slli a5,a4,0x19
    0x84011ae8    0x136    bgez a5,ffffffff84011af4 <sameRegionAs+0x142>
    0x84011aec    0x13a    li a5,-1
    0x84011aee    0x13c    slli a5,a5,0x27
    0x84011af0    0x13e    or t1,t1,a5
    0x84011af4    0x142    li a5,1
    0x84011af6    0x144    sll a1,a5,a1
    0x84011afa    0x148    addi a1,a1,-1
    0x84011afc    0x14a    add a1,a1,a6
    0x84011afe    0x14c    srli a3,a2,0x2f
    0x84011b02    0x150    andi a3,a3,63
    0x84011b06    0x154    addi a3,a3,5
    0x84011b08    0x156    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011b0a    0x158    slli a0,a2,0x19
    0x84011b0e    0x15c    srli a0,a0,0x19
    0x84011b10    0x15e    slli a5,a2,0x19
    0x84011b14    0x162    bgez a5,ffffffff84011b1e <sameRegionAs+0x16c>
    0x84011b18    0x166    li a5,-1
    0x84011b1a    0x168    slli a5,a5,0x27
    0x84011b1c    0x16a    or a0,a0,a5
    0x84011b1e    0x16c    andi t1,a0,-1024
    0x84011b22    0x170    li a5,1
    0x84011b24    0x172    sll a1,a5,a1
    0x84011b28    0x176    addi a1,a1,-1
    0x84011b2a    0x178    add a1,a1,a6
    0x84011b2c    0x17a    li a3,10
    0x84011b2e    0x17c    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011b30    0x17e    andi a5,a2,127
    0x84011b34    0x182    li a4,64
    0x84011b38    0x186    beq a5,a4,ffffffff84011b6e <sameRegionAs+0x1bc>
    0x84011b3c    0x18a    andi a5,a2,63
    0x84011b40    0x18e    addiw a5,a5,1
    0x84011b42    0x190    li a4,1
    0x84011b44    0x192    sll a5,a4,a5
    0x84011b48    0x196    neg a5,a5
    0x84011b4c    0x19a    and t1,a5,a3
    0x84011b50    0x19e    sll a1,a4,a1
    0x84011b54    0x1a2    addi a1,a1,-1
    0x84011b56    0x1a4    add a1,a1,a6
    0x84011b58    0x1a6    andi a5,a2,127
    0x84011b5c    0x1aa    li a4,64
    0x84011b60    0x1ae    beq a5,a4,ffffffff84011c6a <sameRegionAs+0x2b8>
    0x84011b64    0x1b2    andi a5,a2,63
    0x84011b68    0x1b6    addi a3,a5,5 # fffffffff8000005 <ki_end+0x73fd2005>
    0x84011b6c    0x1ba    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011b6e    0x1bc    li a5,4
    0x84011b70    0x1be    j ffffffff84011b40 <sameRegionAs+0x18e>
    0x84011b72    0x1c0    li a5,3
    0x84011b74    0x1c2    beq a4,a5,ffffffff84011ba0 <sameRegionAs+0x1ee>
    0x84011b78    0x1c6    li a5,13
    0x84011b7a    0x1c8    beq a4,a5,ffffffff84011bba <sameRegionAs+0x208>
    0x84011b7e    0x1cc    li a5,1
    0x84011b80    0x1ce    li a0,0
    0x84011b82    0x1d0    bne a4,a5,ffffffff84011bd8 <sameRegionAs+0x226>
    0x84011b86    0x1d4    srli a5,a3,0x9
    0x84011b8a    0x1d8    slli a0,a5,0x19
    0x84011b8e    0x1dc    srli a0,a0,0x19
    0x84011b90    0x1de    slli a7,a5,0x19
    0x84011b94    0x1e2    bgez a7,ffffffff84011bd8 <sameRegionAs+0x226>
    0x84011b98    0x1e6    li a5,-1
    0x84011b9a    0x1e8    slli a5,a5,0x27
    0x84011b9c    0x1ea    or a0,a0,a5
    0x84011b9e    0x1ec    j ffffffff84011bd8 <sameRegionAs+0x226>
    0x84011ba0    0x1ee    srli a5,a3,0x9
    0x84011ba4    0x1f2    slli a0,a5,0x19
    0x84011ba8    0x1f6    srli a0,a0,0x19
    0x84011baa    0x1f8    slli a7,a5,0x19
    0x84011bae    0x1fc    bgez a7,ffffffff84011bd8 <sameRegionAs+0x226>
    0x84011bb2    0x200    li a5,-1
    0x84011bb4    0x202    slli a5,a5,0x27
    0x84011bb6    0x204    or a0,a0,a5
    0x84011bb8    0x206    j ffffffff84011bd8 <sameRegionAs+0x226>
    0x84011bba    0x208    slli a5,a2,0x2
    0x84011bbe    0x20c    lui a0,0xf8000
    0x84011bc2    0x210    srli a0,a0,0x19
    0x84011bc4    0x212    and a0,a0,a5
    0x84011bc6    0x214    slli a7,a5,0x19
    0x84011bca    0x218    bgez a7,ffffffff84011bd8 <sameRegionAs+0x226>
    0x84011bce    0x21c    li a5,-1
    0x84011bd0    0x21e    slli a5,a5,0x27
    0x84011bd2    0x220    or a0,a0,a5
    0x84011bd4    0x222    j ffffffff84011bd8 <sameRegionAs+0x226>
    0x84011bd6    0x224    li a0,0
    0x84011bd8    0x226    mv t1,a0
    0x84011bda    0x228    li a5,1
    0x84011bdc    0x22a    sll a1,a5,a1
    0x84011be0    0x22e    addi a1,a1,-1
    0x84011be2    0x230    add a1,a1,a6
    0x84011be4    0x232    li a5,20
    0x84011be6    0x234    bltu a5,a4,ffffffff84011c22 <sameRegionAs+0x270>
    0x84011bea    0x238    slli a5,a4,0x2
    0x84011bee    0x23c    auipc a7,0x6
    0x84011bf2    0x240    addi a7,a7,-1334 # ffffffff840176b8 <ksDomScheduleLength+0x548>
    0x84011bf6    0x244    add a5,a5,a7
    0x84011bf8    0x246    lw a5,0(a5)
    0x84011bfa    0x248    add a5,a5,a7
    0x84011bfc    0x24a    jr a5
    0x84011bfe    0x24c    li a3,0
    0x84011c00    0x24e    li a0,0
    0x84011c02    0x250    bltu t1,a6,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011c06    0x254    li a5,1
    0x84011c08    0x256    sll a5,a5,a3
    0x84011c0c    0x25a    addi a4,t1,-1
    0x84011c10    0x25e    add a5,a5,a4
    0x84011c12    0x260    bltu a1,a5,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011c16    0x264    sltu a0,a5,t1
    0x84011c1a    0x268    xori a0,a0,1
    0x84011c1e    0x26c    sext.w a0,a0
    0x84011c20    0x26e    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011c22    0x270    li a5,3
    0x84011c24    0x272    beq a4,a5,ffffffff84011c56 <sameRegionAs+0x2a4>
    0x84011c28    0x276    li a5,13
    0x84011c2a    0x278    beq a4,a5,ffffffff84011c5a <sameRegionAs+0x2a8>
    0x84011c2e    0x27c    li a5,1
    0x84011c30    0x27e    li a3,0
    0x84011c32    0x280    beq a4,a5,ffffffff84011c3c <sameRegionAs+0x28a>
    0x84011c36    0x284    slli a3,a3,0x20
    0x84011c38    0x286    srli a3,a3,0x20
    0x84011c3a    0x288    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011c3c    0x28a    srli a5,a2,0x39
    0x84011c40    0x28e    andi a5,a5,3
    0x84011c42    0x290    li a4,1
    0x84011c44    0x292    beq a5,a4,ffffffff84011c5e <sameRegionAs+0x2ac>
    0x84011c48    0x296    beqz a5,ffffffff84011c62 <sameRegionAs+0x2b0>
    0x84011c4a    0x298    li a4,2
    0x84011c4c    0x29a    li a3,30
    0x84011c4e    0x29c    beq a5,a4,ffffffff84011c36 <sameRegionAs+0x284>
    0x84011c52    0x2a0    jal ra,ffffffff84010294 <halt>
    0x84011c56    0x2a4    li a3,12
    0x84011c58    0x2a6    j ffffffff84011c36 <sameRegionAs+0x284>
    0x84011c5a    0x2a8    li a3,12
    0x84011c5c    0x2aa    j ffffffff84011c36 <sameRegionAs+0x284>
    0x84011c5e    0x2ac    li a3,21
    0x84011c60    0x2ae    j ffffffff84011c36 <sameRegionAs+0x284>
    0x84011c62    0x2b0    li a3,12
    0x84011c64    0x2b2    j ffffffff84011c36 <sameRegionAs+0x284>
    0x84011c66    0x2b4    li a3,4
    0x84011c68    0x2b6    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011c6a    0x2b8    li a3,10
    0x84011c6c    0x2ba    j ffffffff84011c00 <sameRegionAs+0x24e>
    0x84011c6e    0x2bc    srli a5,a2,0x3b
    0x84011c72    0x2c0    li a4,4
    0x84011c74    0x2c2    li a0,0
    0x84011c76    0x2c4    bne a5,a4,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011c7a    0x2c8    slli a5,t1,0x19
    0x84011c7e    0x2cc    srli a5,a5,0x19
    0x84011c80    0x2ce    slli a4,t1,0x19
    0x84011c84    0x2d2    bgez a4,ffffffff84011c8e <sameRegionAs+0x2dc>
    0x84011c88    0x2d6    li a4,-1
    0x84011c8a    0x2d8    slli a4,a4,0x27
    0x84011c8c    0x2da    or a5,a5,a4
    0x84011c8e    0x2dc    slli a0,a2,0x19
    0x84011c92    0x2e0    srli a0,a0,0x19
    0x84011c94    0x2e2    slli a4,a2,0x19
    0x84011c98    0x2e6    bgez a4,ffffffff84011ca2 <sameRegionAs+0x2f0>
    0x84011c9c    0x2ea    li a4,-1
    0x84011c9e    0x2ec    slli a4,a4,0x27
    0x84011ca0    0x2ee    or a0,a0,a4
    0x84011ca2    0x2f0    sub a0,a0,a5
    0x84011ca4    0x2f2    seqz a0,a0
    0x84011ca8    0x2f6    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011caa    0x2f8    srli a5,a2,0x3b
    0x84011cae    0x2fc    li a4,6
    0x84011cb0    0x2fe    li a0,0
    0x84011cb2    0x300    bne a5,a4,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011cb6    0x304    slli a5,t1,0x19
    0x84011cba    0x308    srli a5,a5,0x19
    0x84011cbc    0x30a    slli a4,t1,0x19
    0x84011cc0    0x30e    bgez a4,ffffffff84011cca <sameRegionAs+0x318>
    0x84011cc4    0x312    li a4,-1
    0x84011cc6    0x314    slli a4,a4,0x27
    0x84011cc8    0x316    or a5,a5,a4
    0x84011cca    0x318    slli a0,a2,0x19
    0x84011cce    0x31c    srli a0,a0,0x19
    0x84011cd0    0x31e    slli a4,a2,0x19
    0x84011cd4    0x322    bgez a4,ffffffff84011cde <sameRegionAs+0x32c>
    0x84011cd8    0x326    li a4,-1
    0x84011cda    0x328    slli a4,a4,0x27
    0x84011cdc    0x32a    or a0,a0,a4
    0x84011cde    0x32c    sub a0,a0,a5
    0x84011ce0    0x32e    seqz a0,a0
    0x84011ce4    0x332    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011ce6    0x334    srli a5,a2,0x3b
    0x84011cea    0x338    li a4,10
    0x84011cec    0x33a    li a0,0
    0x84011cee    0x33c    bne a5,a4,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011cf2    0x340    slli a5,t1,0x1
    0x84011cf6    0x344    lui a4,0xfc000
    0x84011cfa    0x348    srli a4,a4,0x19
    0x84011cfc    0x34a    and a4,a4,a5
    0x84011cfe    0x34c    slli a3,a5,0x19
    0x84011d02    0x350    bgez a3,ffffffff84011d24 <sameRegionAs+0x372>
    0x84011d06    0x354    slli a3,a2,0x1
    0x84011d0a    0x358    li a5,0
    0x84011d0c    0x35a    slli a1,a3,0x19
    0x84011d10    0x35e    bgez a1,ffffffff84011d44 <sameRegionAs+0x392>
    0x84011d14    0x362    li a5,-1
    0x84011d16    0x364    slli a5,a5,0x27
    0x84011d18    0x366    or a4,a4,a5
    0x84011d1a    0x368    lui a5,0xfc000
    0x84011d1e    0x36c    srli a5,a5,0x19
    0x84011d20    0x36e    and a3,a3,a5
    0x84011d22    0x370    j ffffffff84011d38 <sameRegionAs+0x386>
    0x84011d24    0x372    slli a5,a2,0x1
    0x84011d28    0x376    lui a3,0xfc000
    0x84011d2c    0x37a    srli a3,a3,0x19
    0x84011d2e    0x37c    and a3,a3,a5
    0x84011d30    0x37e    slli a1,a5,0x19
    0x84011d34    0x382    bgez a1,ffffffff84011d3e <sameRegionAs+0x38c>
    0x84011d38    0x386    li a5,-1
    0x84011d3a    0x388    slli a5,a5,0x27
    0x84011d3c    0x38a    or a3,a3,a5
    0x84011d3e    0x38c    li a5,0
    0x84011d40    0x38e    beq a3,a4,ffffffff84011d48 <sameRegionAs+0x396>
    0x84011d44    0x392    mv a0,a5
    0x84011d46    0x394    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011d48    0x396    srli a5,a2,0x2f
    0x84011d4c    0x39a    andi a5,a5,63
    0x84011d50    0x39e    srli a4,t1,0x2f
    0x84011d54    0x3a2    andi a4,a4,63
    0x84011d58    0x3a6    sub a5,a5,a4
    0x84011d5a    0x3a8    seqz a5,a5
    0x84011d5e    0x3ac    j ffffffff84011d44 <sameRegionAs+0x392>
    0x84011d60    0x3ae    srli a5,a2,0x3b
    0x84011d64    0x3b2    li a4,12
    0x84011d66    0x3b4    li a0,0
    0x84011d68    0x3b6    bne a5,a4,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011d6c    0x3ba    slli a5,t1,0x19
    0x84011d70    0x3be    srli a5,a5,0x19
    0x84011d72    0x3c0    slli a4,t1,0x19
    0x84011d76    0x3c4    bgez a4,ffffffff84011d80 <sameRegionAs+0x3ce>
    0x84011d7a    0x3c8    li a4,-1
    0x84011d7c    0x3ca    slli a4,a4,0x27
    0x84011d7e    0x3cc    or a5,a5,a4
    0x84011d80    0x3ce    slli a0,a2,0x19
    0x84011d84    0x3d2    srli a0,a0,0x19
    0x84011d86    0x3d4    slli a4,a2,0x19
    0x84011d8a    0x3d8    bgez a4,ffffffff84011d94 <sameRegionAs+0x3e2>
    0x84011d8e    0x3dc    li a4,-1
    0x84011d90    0x3de    slli a4,a4,0x27
    0x84011d92    0x3e0    or a0,a0,a4
    0x84011d94    0x3e2    sub a0,a0,a5
    0x84011d96    0x3e4    seqz a0,a0
    0x84011d9a    0x3e8    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011d9c    0x3ea    srli a5,a2,0x3b
    0x84011da0    0x3ee    li a4,8
    0x84011da2    0x3f0    li a0,0
    0x84011da4    0x3f2    bne a5,a4,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011da8    0x3f6    sub a5,a3,a1
    0x84011dac    0x3fa    seqz a0,a5
    0x84011db0    0x3fe    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011db2    0x400    srli a0,a2,0x3b
    0x84011db6    0x404    addi a0,a0,-20
    0x84011db8    0x406    seqz a0,a0
    0x84011dbc    0x40a    ld ra,40(sp)
    0x84011dbe    0x40c    addi sp,sp,48
    0x84011dc0    0x40e    ret
    0x84011dc2    0x410    srli a0,a2,0x3b
    0x84011dc6    0x414    addi a0,a0,-14
    0x84011dc8    0x416    andi a0,a0,-3
    0x84011dca    0x418    seqz a0,a0
    0x84011dce    0x41c    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011dd0    0x41e    srli a5,a2,0x3b
    0x84011dd4    0x422    li a4,16
    0x84011dd6    0x424    li a0,0
    0x84011dd8    0x426    bne a5,a4,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011ddc    0x42a    lui a5,0x1
    0x84011dde    0x42c    addi a5,a5,-1
    0x84011de0    0x42e    and a1,a1,a5
    0x84011de2    0x430    and a5,a5,a3
    0x84011de4    0x432    sext.w a1,a1
    0x84011de6    0x434    sext.w a5,a5
    0x84011de8    0x436    sub a5,a1,a5
    0x84011dec    0x43a    seqz a0,a5
    0x84011df0    0x43e    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011df2    0x440    andi a0,a5,1
    0x84011df6    0x444    beqz a0,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011df8    0x446    srli a0,a2,0x3b
    0x84011dfc    0x44a    andi a0,a0,1
    0x84011dfe    0x44c    beqz a0,ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011e00    0x44e    ld a2,0(sp)           ; stack access
    0x84011e02    0x450    ld a3,8(sp)           ; stack access
    0x84011e04    0x452    ld a0,16(sp)          ; stack access
    0x84011e06    0x454    ld a1,24(sp)          ; stack access
    0x84011e08    0x456    jal ra,ffffffff84010d50 <Arch_sameRegionAs>
    0x84011e0c    0x45a    j ffffffff84011dbc <sameRegionAs+0x40a>
    0x84011e0e    0x45c    li a0,0
    0x84011e10    0x45e    j ffffffff84011dbc <sameRegionAs+0x40a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
392 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 514 nodes.

Section getObjectSize (209 of 271)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 28 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `getObjectSize`:

    0x84011938     0x0    addi sp,sp,-16
    0x8401193a     0x2    sd ra,8(sp)           ; stack access
    0x8401193c     0x4    li a5,4
    0x8401193e     0x6    bltu a5,a0,ffffffff8401195c <getObjectSize+0x24>
    0x84011942     0xa    li a5,4
    0x84011944     0xc    bltu a5,a0,ffffffff84011974 <getObjectSize+0x3c>
    0x84011948    0x10    slli a5,a0,0x2
    0x8401194c    0x14    auipc a4,0x6
    0x84011950    0x18    addi a4,a4,-932 # ffffffff840175a8 <ksDomScheduleLength+0x438>
    0x84011954    0x1c    add a5,a5,a4
    0x84011956    0x1e    lw a5,0(a5)
    0x84011958    0x20    add a5,a5,a4
    0x8401195a    0x22    jr a5
    0x8401195c    0x24    jal ra,ffffffff84010f66 <Arch_getObjectSize>
    0x84011960    0x28    ld ra,8(sp)           ; stack access
    0x84011962    0x2a    addi sp,sp,16
    0x84011964    0x2c    ret
    0x84011966    0x2e    li a0,4
    0x84011968    0x30    j ffffffff84011960 <getObjectSize+0x28>
    0x8401196a    0x32    addi a0,a1,5 # fffffffff8000005 <ki_end+0x73fd2005>
    0x8401196e    0x36    j ffffffff84011960 <getObjectSize+0x28>
    0x84011970    0x38    mv a0,a1
    0x84011972    0x3a    j ffffffff84011960 <getObjectSize+0x28>
    0x84011974    0x3c    jal ra,ffffffff84010294 <halt>
    0x84011978    0x40    li a0,10
    0x8401197a    0x42    j ffffffff84011960 <getObjectSize+0x28>
    0x8401197c    0x44    li a0,5
    0x8401197e    0x46    j ffffffff84011960 <getObjectSize+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 39 nodes.

Section invokeIRQControl (210 of 271)
=====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 25 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `invokeIRQControl`:

    0x840117fc     0x0    addi sp,sp,-48
    0x840117fe     0x2    sd ra,40(sp)          ; stack access
    0x84011800     0x4    sd s0,32(sp)          ; stack access
    0x84011802     0x6    sd s1,24(sp)          ; stack access
    0x84011804     0x8    sd s2,16(sp)          ; stack access
    0x84011806     0xa    mv s0,a0
    0x84011808     0xc    mv s2,a1
    0x8401180a     0xe    mv s1,a2
    0x8401180c    0x10    mv a1,a0
    0x8401180e    0x12    li a0,1
    0x84011810    0x14    jal ra,ffffffff840117d4 <setIRQState>
    0x84011814    0x18    slli a1,s0,0x34
    0x84011818    0x1c    mv a3,s2
    0x8401181a    0x1e    mv a2,s1
    0x8401181c    0x20    li a0,-1
    0x8401181e    0x22    slli a0,a0,0x3f
    0x84011820    0x24    srli a1,a1,0x34
    0x84011822    0x26    jal ra,ffffffff840113c0 <cteInsert>
    0x84011826    0x2a    li a0,0
    0x84011828    0x2c    ld ra,40(sp)          ; stack access
    0x8401182a    0x2e    ld s0,32(sp)          ; stack access
    0x8401182c    0x30    ld s1,24(sp)          ; stack access
    0x8401182e    0x32    ld s2,16(sp)          ; stack access
    0x84011830    0x34    addi sp,sp,48
    0x84011832    0x36    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 36 nodes.

Section getReceiveSlots (211 of 271)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 39 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

13 stack accesses found. Annotated code for `getReceiveSlots`:

    0x8401173c     0x0    beqz a1,ffffffff84011792 <getReceiveSlots+0x56>
    0x8401173e     0x2    addi sp,sp,-96
    0x84011740     0x4    sd ra,88(sp)          ; stack access
    0x84011742     0x6    sd s0,80(sp)          ; stack access
    0x84011744     0x8    sd s1,72(sp)          ; stack access
    0x84011746     0xa    mv a5,a1
    0x84011748     0xc    mv a1,a0
    0x8401174a     0xe    ld s0,1008(a5) # fffffffff80003f0 <ki_end+0x73fd23f0>
    0x8401174e    0x12    ld s1,1016(a5)
    0x84011752    0x16    ld a2,1000(a5)
    0x84011756    0x1a    addi a0,sp,40
    0x84011758    0x1c    jal ra,ffffffff8401118e <lookupCap>
    0x8401175c    0x20    ld a5,40(sp)          ; stack access
    0x8401175e    0x22    li a0,0
    0x84011760    0x24    bnez a5,ffffffff84011788 <getReceiveSlots+0x4c>
    0x84011762    0x26    ld a0,48(sp)          ; stack access
    0x84011764    0x28    sd a0,8(sp)           ; stack access
    0x84011766    0x2a    ld a1,56(sp)          ; stack access
    0x84011768    0x2c    sd a1,16(sp)          ; stack access
    0x8401176a    0x2e    mv a3,s1
    0x8401176c    0x30    mv a2,s0
    0x8401176e    0x32    jal ra,ffffffff840112ec <lookupTargetSlot>
    0x84011772    0x36    sd a0,24(sp)          ; stack access
    0x84011774    0x38    sd a1,32(sp)          ; stack access
    0x84011776    0x3a    bnez a0,ffffffff84011796 <getReceiveSlots+0x5a>
    0x84011778    0x3c    ld a5,0(a1)
    0x8401177a    0x3e    srli a5,a5,0x3b
    0x8401177c    0x40    seqz a5,a5
    0x84011780    0x44    neg a5,a5
    0x84011784    0x48    and a0,a1,a5
    0x84011788    0x4c    ld ra,88(sp)          ; stack access
    0x8401178a    0x4e    ld s0,80(sp)          ; stack access
    0x8401178c    0x50    ld s1,72(sp)          ; stack access
    0x8401178e    0x52    addi sp,sp,96
    0x84011790    0x54    ret
    0x84011792    0x56    mv a0,a1
    0x84011794    0x58    ret
    0x84011796    0x5a    li a0,0
    0x84011798    0x5c    j ffffffff84011788 <getReceiveSlots+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 66 nodes.

Section invokeCNodeRotate (212 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 32 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x8401163c     0x0    addi sp,sp,-64
    0x8401163e     0x2    sd ra,56(sp)          ; stack access
    0x84011640     0x4    sd s0,48(sp)          ; stack access
    0x84011642     0x6    sd s1,40(sp)          ; stack access
    0x84011644     0x8    sd a0,16(sp)          ; stack access
    0x84011646     0xa    sd a1,24(sp)          ; stack access
    0x84011648     0xc    sd a2,0(sp)           ; stack access
    0x8401164a     0xe    sd a3,8(sp)           ; stack access
    0x8401164c    0x10    mv s0,a4
    0x8401164e    0x12    mv s1,a5
    0x84011650    0x14    beq a4,a6,ffffffff84011678 <invokeCNodeRotate+0x3c>
    0x84011654    0x18    mv a3,a6
    0x84011656    0x1a    mv a2,a5
    0x84011658    0x1c    ld a0,0(sp)           ; stack access
    0x8401165a    0x1e    ld a1,8(sp)           ; stack access
    0x8401165c    0x20    jal ra,ffffffff840114fc <cteMove>
    0x84011660    0x24    mv a3,s1
    0x84011662    0x26    mv a2,s0
    0x84011664    0x28    ld a0,16(sp)          ; stack access
    0x84011666    0x2a    ld a1,24(sp)          ; stack access
    0x84011668    0x2c    jal ra,ffffffff840114fc <cteMove>
    0x8401166c    0x30    li a0,0
    0x8401166e    0x32    ld ra,56(sp)          ; stack access
    0x84011670    0x34    ld s0,48(sp)          ; stack access
    0x84011672    0x36    ld s1,40(sp)          ; stack access
    0x84011674    0x38    addi sp,sp,64
    0x84011676    0x3a    ret
    0x84011678    0x3c    mv a3,a2
    0x8401167a    0x3e    ld a4,8(sp)           ; stack access
    0x8401167c    0x40    mv a2,s0
    0x8401167e    0x42    jal ra,ffffffff840115ae <cteSwap>
    0x84011682    0x46    j ffffffff8401166c <invokeCNodeRotate+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 53 nodes.

Section invokeCNodeSaveCaller (213 of 271)
==========================================

Deriving specifications
-----------------------

Section `invokeCNodeSaveCaller` consists of 27 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `invokeCNodeSaveCaller`:

    0x84011566     0x0    addi sp,sp,-32
    0x84011568     0x2    sd ra,24(sp)          ; stack access
    0x8401156a     0x4    auipc a5,0x1c
    0x8401156e     0x8    addi a5,a5,814 # ffffffff8402d898 <ksCurThread>
    0x84011572     0xc    ld a5,0(a5)
    0x84011574     0xe    andi a5,a5,-1024
    0x84011578    0x12    addi a2,a5,96
    0x8401157c    0x16    ld a5,96(a5)
    0x8401157e    0x18    sd a5,0(sp)           ; stack access
    0x84011580    0x1a    ld a4,8(a2)
    0x84011582    0x1c    sd a4,8(sp)           ; stack access
    0x84011584    0x1e    srli a4,a5,0x3b
    0x84011588    0x22    beqz a4,ffffffff84011596 <invokeCNodeSaveCaller+0x30>
    0x8401158a    0x24    li a3,8
    0x8401158c    0x26    bne a4,a3,ffffffff840115aa <invokeCNodeSaveCaller+0x44>
    0x84011590    0x2a    andi a4,a5,1
    0x84011594    0x2e    beqz a4,ffffffff8401159e <invokeCNodeSaveCaller+0x38>
    0x84011596    0x30    li a0,0
    0x84011598    0x32    ld ra,24(sp)          ; stack access
    0x8401159a    0x34    addi sp,sp,32
    0x8401159c    0x36    ret
    0x8401159e    0x38    mv a3,a0
    0x840115a0    0x3a    mv a0,a5
    0x840115a2    0x3c    ld a1,8(sp)
    0x840115a4    0x3e    jal ra,ffffffff840114fc <cteMove>
    0x840115a8    0x42    j ffffffff84011596 <invokeCNodeSaveCaller+0x30>
    0x840115aa    0x44    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeSaveCaller` has 44 nodes.

Section handleFaultReply (214 of 271)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 130 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `handleFaultReply`:

    0x840104d4      0x0    addi sp,sp,-48
    0x840104d6      0x2    sd ra,40(sp)          ; stack access
    0x840104d8      0x4    sd s0,32(sp)          ; stack access
    0x840104da      0x6    sd s1,24(sp)          ; stack access
    0x840104dc      0x8    sd s2,16(sp)          ; stack access
    0x840104de      0xa    sd s3,8(sp)           ; stack access
    0x840104e0      0xc    mv s1,a0
    0x840104e2      0xe    ld s2,80(a1)
    0x840104e6     0x12    andi s0,s2,127
    0x840104ea     0x16    li a5,120
    0x840104ee     0x1a    bgeu a5,s0,ffffffff84010510 <handleFaultReply+0x3c>
    0x840104f2     0x1e    srli s2,s2,0xc
    0x840104f6     0x22    ld a0,312(a0)
    0x840104fa     0x26    andi a0,a0,15
    0x840104fc     0x28    li a5,2
    0x840104fe     0x2a    beq a0,a5,ffffffff8401054e <handleFaultReply+0x7a>
    0x84010502     0x2e    li a5,3
    0x84010504     0x30    beq a0,a5,ffffffff840105c0 <handleFaultReply+0xec>
    0x84010508     0x34    li a5,1
    0x8401050a     0x36    bne a0,a5,ffffffff8401052c <handleFaultReply+0x58>
    0x8401050e     0x3a    j ffffffff840105b2 <handleFaultReply+0xde>
    0x84010510     0x3c    srli s2,s2,0xc
    0x84010514     0x40    ld a0,312(a0)
    0x84010518     0x44    andi a0,a0,15
    0x8401051a     0x46    li a5,2
    0x8401051c     0x48    beq a0,a5,ffffffff84010536 <handleFaultReply+0x62>
    0x84010520     0x4c    li a5,3
    0x84010522     0x4e    beq a0,a5,ffffffff840105c4 <handleFaultReply+0xf0>
    0x84010526     0x52    li a5,1
    0x84010528     0x54    beq a0,a5,ffffffff840105b2 <handleFaultReply+0xde>
    0x8401052c     0x58    li a5,5
    0x8401052e     0x5a    bne a0,a5,ffffffff8401062c <handleFaultReply+0x158>
    0x84010532     0x5e    li a0,1
    0x84010534     0x60    j ffffffff840105b2 <handleFaultReply+0xde>
    0x84010536     0x62    mv s3,s0
    0x84010538     0x64    li a5,10
    0x8401053a     0x66    bgeu a5,s0,ffffffff84010540 <handleFaultReply+0x6c>
    0x8401053e     0x6a    li s3,10
    0x84010540     0x6c    beqz s0,ffffffff8401057e <handleFaultReply+0xaa>
    0x84010542     0x6e    mv a0,s3
    0x84010544     0x70    li a5,4
    0x84010546     0x72    bgeu a5,s3,ffffffff84010552 <handleFaultReply+0x7e>
    0x8401054a     0x76    li a0,4
    0x8401054c     0x78    j ffffffff84010552 <handleFaultReply+0x7e>
    0x8401054e     0x7a    li a0,4
    0x84010550     0x7c    li s3,10
    0x84010552     0x7e    auipc a2,0x7
    0x84010556     0x82    addi a2,a2,1510 # ffffffff84017b38 <fault_messages>
    0x8401055a     0x86    auipc a3,0x7
    0x8401055e     0x8a    addi a3,a3,1662 # ffffffff84017bd8 <msgRegisters>
    0x84010562     0x8e    li s0,0
    0x84010564     0x90    ld a5,0(a2)
    0x84010566     0x92    ld a4,0(a3)
    0x84010568     0x94    slli a4,a4,0x3
    0x8401056a     0x96    add a4,a4,a1
    0x8401056c     0x98    ld a4,0(a4)
    0x8401056e     0x9a    slli a5,a5,0x3
    0x84010570     0x9c    add a5,a5,s1
    0x84010572     0x9e    sd a4,0(a5)
    0x84010574     0xa0    addi s0,s0,1
    0x84010576     0xa2    addi a2,a2,8
    0x84010578     0xa4    addi a3,a3,8
    0x8401057a     0xa6    bltu s0,a0,ffffffff84010564 <handleFaultReply+0x90>
    0x8401057e     0xaa    bgeu s0,s3,ffffffff840105ae <handleFaultReply+0xda>
    0x84010582     0xae    li a0,0
    0x84010584     0xb0    jal ra,ffffffff84010444 <lookupIPCBuffer>
    0x84010588     0xb4    beqz a0,ffffffff840105ae <handleFaultReply+0xda>
    0x8401058a     0xb6    slli s0,s0,0x3
    0x8401058c     0xb8    auipc a4,0x7
    0x84010590     0xbc    addi a4,a4,1452 # ffffffff84017b38 <fault_messages>
    0x84010594     0xc0    add a4,a4,s0
    0x84010596     0xc2    add s0,s0,a0
    0x84010598     0xc4    slli s3,s3,0x3
    0x8401059a     0xc6    add a0,a0,s3
    0x8401059c     0xc8    ld a5,0(a4)
    0x8401059e     0xca    ld a3,8(s0)
    0x840105a0     0xcc    slli a5,a5,0x3
    0x840105a2     0xce    add a5,a5,s1
    0x840105a4     0xd0    sd a3,0(a5)
    0x840105a6     0xd2    addi a4,a4,8
    0x840105a8     0xd4    addi s0,s0,8
    0x840105aa     0xd6    bne s0,a0,ffffffff8401059c <handleFaultReply+0xc8>
    0x840105ae     0xda    seqz a0,s2
    0x840105b2     0xde    ld ra,40(sp)          ; stack access
    0x840105b4     0xe0    ld s0,32(sp)          ; stack access
    0x840105b6     0xe2    ld s1,24(sp)          ; stack access
    0x840105b8     0xe4    ld s2,16(sp)          ; stack access
    0x840105ba     0xe6    ld s3,8(sp)           ; stack access
    0x840105bc     0xe8    addi sp,sp,48
    0x840105be     0xea    ret
    0x840105c0     0xec    li s0,120
    0x840105c4     0xf0    mv s3,s0
    0x840105c6     0xf2    li a5,3
    0x840105c8     0xf4    bgeu a5,s0,ffffffff840105ce <handleFaultReply+0xfa>
    0x840105cc     0xf8    li s3,3
    0x840105ce     0xfa    beqz s0,ffffffff840105ea <handleFaultReply+0x116>
    0x840105d0     0xfc    ld a5,88(a1)
    0x840105d2     0xfe    sd a5,264(s1)
    0x840105d6    0x102    li a5,1
    0x840105d8    0x104    bgeu a5,s0,ffffffff840105f0 <handleFaultReply+0x11c>
    0x840105dc    0x108    ld a5,96(a1)
    0x840105de    0x10a    sd a5,8(s1)
    0x840105e0    0x10c    li a5,2
    0x840105e2    0x10e    bgeu a5,s0,ffffffff84010628 <handleFaultReply+0x154>
    0x840105e6    0x112    ld a5,104(a1)
    0x840105e8    0x114    sd a5,0(s1)
    0x840105ea    0x116    seqz a0,s2
    0x840105ee    0x11a    j ffffffff840105b2 <handleFaultReply+0xde>
    0x840105f0    0x11c    li s0,1
    0x840105f2    0x11e    bgeu s0,s3,ffffffff840105ea <handleFaultReply+0x116>
    0x840105f6    0x122    li a0,0
    0x840105f8    0x124    jal ra,ffffffff84010444 <lookupIPCBuffer>
    0x840105fc    0x128    beqz a0,ffffffff840105ea <handleFaultReply+0x116>
    0x840105fe    0x12a    slli a4,s0,0x3
    0x84010602    0x12e    slli a2,s3,0x3
    0x84010606    0x132    auipc a1,0x7
    0x8401060a    0x136    addi a1,a1,1330 # ffffffff84017b38 <fault_messages>
    0x8401060e    0x13a    add a5,a1,a4
    0x84010612    0x13e    ld a5,80(a5)
    0x84010614    0x140    add a3,a0,a4
    0x84010618    0x144    ld a3,8(a3)
    0x8401061a    0x146    slli a5,a5,0x3
    0x8401061c    0x148    add a5,a5,s1
    0x8401061e    0x14a    sd a3,0(a5)
    0x84010620    0x14c    addi a4,a4,8
    0x84010622    0x14e    bne a4,a2,ffffffff8401060e <handleFaultReply+0x13a>
    0x84010626    0x152    j ffffffff840105ea <handleFaultReply+0x116>
    0x84010628    0x154    li s0,2
    0x8401062a    0x156    j ffffffff840105f2 <handleFaultReply+0x11e>
    0x8401062c    0x158    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
130 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 207 nodes.

Section setMRs_fault (215 of 271)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 118 instructions.

LWU..

Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_fault`:

    0x840102e4      0x0    ld a3,312(a0)
    0x840102e8      0x4    andi a3,a3,15
    0x840102ea      0x6    li a5,2
    0x840102ec      0x8    beq a3,a5,ffffffff8401039c <setMRs_fault+0xb8>
    0x840102f0      0xc    li a5,3
    0x840102f2      0xe    beq a3,a5,ffffffff840103e8 <setMRs_fault+0x104>
    0x840102f6     0x12    addi sp,sp,-16
    0x840102f8     0x14    sd ra,8(sp)           ; stack access
    0x840102fa     0x16    li a5,1
    0x840102fc     0x18    beq a3,a5,ffffffff8401030a <setMRs_fault+0x26>
    0x84010300     0x1c    jal ra,ffffffff840102b2 <Arch_setMRs_fault>
    0x84010304     0x20    ld ra,8(sp)           ; stack access
    0x84010306     0x22    addi sp,sp,16
    0x84010308     0x24    ret
    0x8401030a     0x26    ld a5,264(a0)
    0x8401030e     0x2a    sd a5,88(a1)
    0x84010310     0x2c    ld a5,320(a0)
    0x84010314     0x30    sd a5,96(a1)
    0x84010316     0x32    ld a5,312(a0)
    0x8401031a     0x36    srli a5,a5,0x3f
    0x8401031c     0x38    sd a5,104(a1)
    0x8401031e     0x3a    ld a4,328(a0)
    0x84010322     0x3e    ld a0,336(a0)
    0x84010326     0x42    andi a5,a4,3
    0x8401032a     0x46    addi a3,a5,1
    0x8401032e     0x4a    sd a3,112(a1)
    0x84010330     0x4c    li a3,1
    0x84010332     0x4e    beq a5,a3,ffffffff8401035e <setMRs_fault+0x7a>
    0x84010336     0x52    beqz a5,ffffffff84010388 <setMRs_fault+0xa4>
    0x84010338     0x54    li a3,2
    0x8401033a     0x56    beq a5,a3,ffffffff8401036c <setMRs_fault+0x88>
    0x8401033e     0x5a    li a3,3
    0x84010340     0x5c    bne a5,a3,ffffffff84010384 <setMRs_fault+0xa0>
    0x84010344     0x60    beqz a2,ffffffff84010398 <setMRs_fault+0xb4>
    0x84010346     0x62    srli a5,a4,0x9
    0x8401034a     0x66    andi a5,a5,127
    0x8401034e     0x6a    sd a5,40(a2)
    0x84010350     0x6c    sd a0,48(a2)
    0x84010352     0x6e    srli a4,a4,0x2
    0x84010354     0x70    andi a4,a4,127
    0x84010358     0x74    sd a4,56(a2)
    0x8401035a     0x76    li a0,7
    0x8401035c     0x78    j ffffffff8401038a <setMRs_fault+0xa6>
    0x8401035e     0x7a    beqz a2,ffffffff84010390 <setMRs_fault+0xac>
    0x84010360     0x7c    srli a4,a4,0x2
    0x84010362     0x7e    andi a4,a4,127
    0x84010366     0x82    sd a4,40(a2)
    0x84010368     0x84    li a0,5
    0x8401036a     0x86    j ffffffff8401038a <setMRs_fault+0xa6>
    0x8401036c     0x88    beqz a2,ffffffff84010394 <setMRs_fault+0xb0>
    0x8401036e     0x8a    srli a5,a4,0x2
    0x84010372     0x8e    andi a5,a5,127
    0x84010376     0x92    sd a5,40(a2)
    0x84010378     0x94    srli a4,a4,0x9
    0x8401037a     0x96    andi a4,a4,127
    0x8401037e     0x9a    sd a4,48(a2)
    0x84010380     0x9c    li a0,6
    0x84010382     0x9e    j ffffffff8401038a <setMRs_fault+0xa6>
    0x84010384     0xa0    jal ra,ffffffff84010294 <halt>
    0x84010388     0xa4    li a0,4
    0x8401038a     0xa6    slli a0,a0,0x20
    0x8401038c     0xa8    srli a0,a0,0x20
    0x8401038e     0xaa    j ffffffff84010304 <setMRs_fault+0x20>
    0x84010390     0xac    li a0,4
    0x84010392     0xae    j ffffffff8401038a <setMRs_fault+0xa6>
    0x84010394     0xb0    li a0,4
    0x84010396     0xb2    j ffffffff8401038a <setMRs_fault+0xa6>
    0x84010398     0xb4    li a0,4
    0x8401039a     0xb6    j ffffffff8401038a <setMRs_fault+0xa6>
    0x8401039c     0xb8    ld a5,264(a0)
    0x840103a0     0xbc    sd a5,88(a1)
    0x840103a2     0xbe    ld a5,8(a0)
    0x840103a4     0xc0    sd a5,96(a1)
    0x840103a6     0xc2    ld a5,0(a0)
    0x840103a8     0xc4    sd a5,104(a1)
    0x840103aa     0xc6    ld a5,72(a0)
    0x840103ac     0xc8    sd a5,112(a1)
    0x840103ae     0xca    li a5,4
    0x840103b0     0xcc    beqz a2,ffffffff840103e0 <setMRs_fault+0xfc>
    0x840103b2     0xce    auipc a4,0x7
    0x840103b6     0xd2    addi a4,a4,1926 # ffffffff84017b38 <fault_messages>
    0x840103ba     0xd6    addi a3,a2,40
    0x840103be     0xda    auipc a1,0x7
    0x840103c2     0xde    addi a1,a1,1962 # ffffffff84017b68 <fault_messages+0x30>
    0x840103c6     0xe2    ld a5,32(a4)
    0x840103c8     0xe4    slli a5,a5,0x3
    0x840103ca     0xe6    add a5,a5,a0
    0x840103cc     0xe8    ld a5,0(a5)
    0x840103ce     0xea    sd a5,0(a3)
    0x840103d0     0xec    addi a4,a4,8
    0x840103d2     0xee    addi a3,a3,8
    0x840103d4     0xf0    bne a1,a4,ffffffff840103c6 <setMRs_fault+0xe2>
    0x840103d8     0xf4    ld a5,320(a0)
    0x840103dc     0xf8    sd a5,88(a2)
    0x840103de     0xfa    li a5,11
    0x840103e0     0xfc    slli a0,a5,0x20
    0x840103e4    0x100    srli a0,a0,0x20
    0x840103e6    0x102    ret
    0x840103e8    0x104    ld a5,264(a0)
    0x840103ec    0x108    sd a5,88(a1)
    0x840103ee    0x10a    ld a5,8(a0)
    0x840103f0    0x10c    sd a5,96(a1)
    0x840103f2    0x10e    ld a5,0(a0)
    0x840103f4    0x110    sd a5,104(a1)
    0x840103f6    0x112    beqz a2,ffffffff84010410 <setMRs_fault+0x12c>
    0x840103f8    0x114    lwu a5,316(a0)
    0x840103fc    0x118    sd a5,112(a1)
    0x840103fe    0x11a    ld a5,312(a0)
    0x84010402    0x11e    srliw a5,a5,0x4
    0x84010406    0x122    sd a5,40(a2)
    0x84010408    0x124    li a0,5
    0x8401040a    0x126    slli a0,a0,0x20
    0x8401040c    0x128    srli a0,a0,0x20
    0x8401040e    0x12a    ret
    0x84010410    0x12c    lwu a5,316(a0)
    0x84010414    0x130    sd a5,112(a1)
    0x84010416    0x132    li a0,4
    0x84010418    0x134    j ffffffff8401040a <setMRs_fault+0x126>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
118 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 192 nodes.

Section trap_entry (216 of 271)
===============================

Deriving specifications
-----------------------

Section `trap_entry` consists of 48 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc


Stack analysis
---------------

No stack accesses found. Code for `trap_entry`:

    0x84010000     0x0    csrrw t0,sscratch,t0
    0x84010004     0x4    sd ra,0(t0)
    0x84010008     0x8    sd sp,8(t0)
    0x8401000c     0xc    sd gp,16(t0)
    0x84010010    0x10    sd tp,24(t0)
    0x84010014    0x14    sd t1,40(t0)
    0x84010018    0x18    sd t2,48(t0)
    0x8401001c    0x1c    sd s0,56(t0)
    0x84010020    0x20    sd s1,64(t0)
    0x84010024    0x24    sd a0,72(t0)
    0x84010028    0x28    sd a1,80(t0)
    0x8401002c    0x2c    sd a2,88(t0)
    0x84010030    0x30    sd a3,96(t0)
    0x84010034    0x34    sd a4,104(t0)
    0x84010038    0x38    sd a5,112(t0)
    0x8401003c    0x3c    sd a6,120(t0)
    0x84010040    0x40    sd a7,128(t0)
    0x84010044    0x44    sd s2,136(t0)
    0x84010048    0x48    sd s3,144(t0)
    0x8401004c    0x4c    sd s4,152(t0)
    0x84010050    0x50    sd s5,160(t0)
    0x84010054    0x54    sd s6,168(t0)
    0x84010058    0x58    sd s7,176(t0)
    0x8401005c    0x5c    sd s8,184(t0)
    0x84010060    0x60    sd s9,192(t0)
    0x84010064    0x64    sd s10,200(t0)
    0x84010068    0x68    sd s11,208(t0)
    0x8401006c    0x6c    sd t3,216(t0)
    0x84010070    0x70    sd t4,224(t0)
    0x84010074    0x74    sd t5,232(t0)
    0x84010078    0x78    sd t6,240(t0)
    0x8401007c    0x7c    csrr ra,sscratch
    0x84010080    0x80    sd ra,32(t0)
    0x84010084    0x84    csrr ra,sstatus
    0x84010088    0x88    sd ra,256(t0)
    0x8401008c    0x8c    csrr s0,scause
    0x84010090    0x90    sd s0,248(t0)
    0x84010094    0x94    mv gp,gp
    0x84010098    0x98    auipc sp,0xd
    0x8401009c    0x9c    addi sp,sp,1040 # ffffffff8401d4a8 <ksIdleThread>
    0x840100a0    0xa0    csrr ra,sepc
    0x840100a4    0xa4    sd ra,264(t0)
    0x840100a8    0xa8    srli s2,s0,0x3f
    0x840100ac    0xac    li s1,1
    0x840100ae    0xae    beq s2,s1,ffffffff840100cc <interrupt>
    0x840100b2    0xb2    andi s0,s0,15
    0x840100b4    0xb4    li s4,8
    0x840100b6    0xb6    bne s0,s4,ffffffff840100c4 <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
Graph spec failed in trap_entry for pos 0x840100ae.
<<HOL message: inventing new type variable names: 'a>>
Graph spec failed in trap_entry for pos 0x840100b6.
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `trap_entry` has 85 nodes.

Section populate_bi_frame (217 of 271)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 58 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `populate_bi_frame`:

    0x840022d8     0x0    addi sp,sp,-48
    0x840022da     0x2    sd ra,40(sp)          ; stack access
    0x840022dc     0x4    sd s0,32(sp)          ; stack access
    0x840022de     0x6    sd s1,24(sp)          ; stack access
    0x840022e0     0x8    sd s2,16(sp)          ; stack access
    0x840022e2     0xa    sd s3,8(sp)           ; stack access
    0x840022e4     0xc    mv s3,a0
    0x840022e6     0xe    mv s2,a1
    0x840022e8    0x10    mv s1,a2
    0x840022ea    0x12    mv s0,a3
    0x840022ec    0x14    lui a1,0x1
    0x840022ee    0x16    auipc a5,0x1
    0x840022f2    0x1a    addi a5,a5,-1878 # ffffffff84002b98 <ndks_boot>
    0x840022f6    0x1e    ld a0,624(a5)
    0x840022fa    0x22    jal ra,ffffffff84015844 <memzero>
    0x840022fe    0x26    bnez s0,ffffffff84002364 <populate_bi_frame+0x8c>
    0x84002300    0x28    auipc a5,0x1
    0x84002304    0x2c    addi a5,a5,-1896 # ffffffff84002b98 <ndks_boot>
    0x84002308    0x30    ld a4,624(a5)
    0x8400230c    0x34    sd a4,568(a5)
    0x84002310    0x38    li a3,12
    0x84002312    0x3a    sd a3,576(a5)
    0x84002316    0x3e    sd s3,8(a4)
    0x8400231a    0x42    ld a4,624(a5)
    0x8400231e    0x46    sd s2,16(a4)
    0x84002322    0x4a    ld a4,624(a5)
    0x84002326    0x4e    sd zero,24(a4)
    0x8400232a    0x52    ld a4,624(a5)
    0x8400232e    0x56    sd s1,32(a4)
    0x84002330    0x58    ld a5,624(a5)
    0x84002334    0x5c    li a4,19
    0x84002336    0x5e    sd a4,136(a5)
    0x84002338    0x60    auipc a4,0x2b
    0x8400233c    0x64    addi a4,a4,1384 # ffffffff8402d8a0 <ksDomScheduleIdx>
    0x84002340    0x68    ld a4,0(a4)
    0x84002342    0x6a    slli a3,a4,0x4
    0x84002346    0x6e    auipc a4,0x15
    0x8400234a    0x72    addi a4,a4,2034 # ffffffff84017b38 <fault_messages>
    0x8400234e    0x76    add a4,a4,a3
    0x84002350    0x78    ld a4,192(a4)
    0x84002352    0x7a    sd a4,144(a5)
    0x84002354    0x7c    sd s0,0(a5)
    0x84002356    0x7e    ld ra,40(sp)          ; stack access
    0x84002358    0x80    ld s0,32(sp)          ; stack access
    0x8400235a    0x82    ld s1,24(sp)          ; stack access
    0x8400235c    0x84    ld s2,16(sp)          ; stack access
    0x8400235e    0x86    ld s3,8(sp)           ; stack access
    0x84002360    0x88    addi sp,sp,48
    0x84002362    0x8a    ret
    0x84002364    0x8c    mv a0,s0
    0x84002366    0x8e    jal ra,ffffffff84000dfc <calculate_extra_bi_size_bits>
    0x8400236a    0x92    li a1,1
    0x8400236c    0x94    sll a1,a1,a0
    0x84002370    0x98    auipc a5,0x1
    0x84002374    0x9c    addi a5,a5,-2008 # ffffffff84002b98 <ndks_boot>
    0x84002378    0xa0    ld a0,632(a5)
    0x8400237c    0xa4    jal ra,ffffffff84015844 <memzero>
    0x84002380    0xa8    j ffffffff84002300 <populate_bi_frame+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 92 nodes.

Section create_ipcbuf_frame_cap (218 of 271)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 138 instructions.


Stack analysis
---------------

Section `create_ipcbuf_frame_cap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84002164      0x0    addi sp,sp,-96
    0x84002166      0x2    sd ra,88(sp)          ; stack access
    0x84002168      0x4    sd s0,80(sp)          ; stack access
    0x8400216a      0x6    sd s1,72(sp)          ; stack access
    0x8400216c      0x8    sd a0,16(sp)          ; stack access
    0x8400216e      0xa    sd a1,24(sp)          ; stack access
    0x84002170      0xc    sd a2,0(sp)           ; stack access
    0x84002172      0xe    sd a3,8(sp)           ; stack access
    0x84002174     0x10    mv s1,a4
    0x84002176     0x12    auipc s0,0x1
    0x8400217a     0x16    addi s0,s0,-1502 # ffffffff84002b98 <ndks_boot>
    0x8400217e     0x1a    lui a1,0x1
    0x84002180     0x1c    ld a0,616(s0)
    0x84002184     0x20    jal ra,ffffffff84015844 <memzero>
    0x84002188     0x24    li a6,0
    0x8400218a     0x26    li a5,0
    0x8400218c     0x28    li a4,1
    0x8400218e     0x2a    mv a3,s1
    0x84002190     0x2c    ld a2,616(s0)
    0x84002194     0x30    ld a0,0(sp)           ; stack access
    0x84002196     0x32    ld a1,8(sp)           ; stack access
    0x84002198     0x34    jal ra,ffffffff84000918 <create_mapped_it_frame_cap>
    0x8400219c     0x38    sd a0,32(sp)          ; stack access
    0x8400219e     0x3a    sd a1,40(sp)          ; stack access
    0x840021a0     0x3c    ld a4,16(sp)          ; stack access
    0x840021a2     0x3e    ld a0,24(sp)          ; stack access
    0x840021a4     0x40    srli a2,a4,0x3b
    0x840021a8     0x44    li a5,20
    0x840021aa     0x46    bltu a5,a2,ffffffff84002258 <create_ipcbuf_frame_cap+0xf4>
    0x840021ae     0x4a    slli a3,a2,0x2
    0x840021b2     0x4e    auipc a1,0x16
    0x840021b6     0x52    addi a1,a1,-1946 # ffffffff84017a18 <__global_pointer$+0xac>
    0x840021ba     0x56    add a3,a3,a1
    0x840021bc     0x58    lw a5,0(a3)
    0x840021be     0x5a    add a5,a5,a1
    0x840021c0     0x5c    jr a5
    0x840021c2     0x5e    slli a5,a4,0x19
    0x840021c6     0x62    srli a5,a5,0x19
    0x840021c8     0x64    slli a3,a4,0x19
    0x840021cc     0x68    bgez a3,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x840021d0     0x6c    li a4,-1
    0x840021d2     0x6e    slli a4,a4,0x27
    0x840021d4     0x70    or a5,a5,a4
    0x840021d6     0x72    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x840021d8     0x74    slli a5,a4,0x19
    0x840021dc     0x78    srli a5,a5,0x19
    0x840021de     0x7a    slli a3,a4,0x19
    0x840021e2     0x7e    bgez a3,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x840021e6     0x82    li a4,-1
    0x840021e8     0x84    slli a4,a4,0x27
    0x840021ea     0x86    or a5,a5,a4
    0x840021ec     0x88    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x840021ee     0x8a    slli a5,a4,0x19
    0x840021f2     0x8e    srli a5,a5,0x19
    0x840021f4     0x90    slli a3,a4,0x19
    0x840021f8     0x94    bgez a3,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x840021fc     0x98    li a4,-1
    0x840021fe     0x9a    slli a4,a4,0x27
    0x84002200     0x9c    or a5,a5,a4
    0x84002202     0x9e    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x84002204     0xa0    slli a4,a4,0x1
    0x84002206     0xa2    lui a5,0xfc000
    0x8400220a     0xa6    srli a5,a5,0x19
    0x8400220c     0xa8    and a5,a5,a4
    0x8400220e     0xaa    slli a3,a4,0x19
    0x84002212     0xae    bgez a3,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x84002216     0xb2    li a4,-1
    0x84002218     0xb4    slli a4,a4,0x27
    0x8400221a     0xb6    or a5,a5,a4
    0x8400221c     0xb8    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x8400221e     0xba    slli a5,a4,0x19
    0x84002222     0xbe    srli a5,a5,0x19
    0x84002224     0xc0    slli a3,a4,0x19
    0x84002228     0xc4    bgez a3,ffffffff84002232 <create_ipcbuf_frame_cap+0xce>
    0x8400222c     0xc8    li a4,-1
    0x8400222e     0xca    slli a4,a4,0x27
    0x84002230     0xcc    or a5,a5,a4
    0x84002232     0xce    andi a5,a5,-1024
    0x84002236     0xd2    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x84002238     0xd4    andi a5,a4,127
    0x8400223c     0xd8    li a3,64
    0x84002240     0xdc    beq a5,a3,ffffffff84002254 <create_ipcbuf_frame_cap+0xf0>
    0x84002244     0xe0    andi a4,a4,63
    0x84002248     0xe4    addiw a4,a4,1
    0x8400224a     0xe6    li a5,-1
    0x8400224c     0xe8    sll a5,a5,a4
    0x84002250     0xec    and a5,a5,a0
    0x84002252     0xee    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x84002254     0xf0    li a4,4
    0x84002256     0xf2    j ffffffff84002248 <create_ipcbuf_frame_cap+0xe4>
    0x84002258     0xf4    li a5,3
    0x8400225a     0xf6    beq a2,a5,ffffffff84002284 <create_ipcbuf_frame_cap+0x120>
    0x8400225e     0xfa    li a5,13
    0x84002260     0xfc    beq a2,a5,ffffffff8400229c <create_ipcbuf_frame_cap+0x138>
    0x84002264    0x100    li a4,1
    0x84002266    0x102    li a5,0
    0x84002268    0x104    bne a2,a4,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x8400226c    0x108    srli a0,a0,0x9
    0x8400226e    0x10a    slli a5,a0,0x19
    0x84002272    0x10e    srli a5,a5,0x19
    0x84002274    0x110    slli a4,a0,0x19
    0x84002278    0x114    bgez a4,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x8400227c    0x118    li a4,-1
    0x8400227e    0x11a    slli a4,a4,0x27
    0x84002280    0x11c    or a5,a5,a4
    0x84002282    0x11e    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x84002284    0x120    srli a0,a0,0x9
    0x84002286    0x122    slli a5,a0,0x19
    0x8400228a    0x126    srli a5,a5,0x19
    0x8400228c    0x128    slli a4,a0,0x19
    0x84002290    0x12c    bgez a4,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x84002294    0x130    li a4,-1
    0x84002296    0x132    slli a4,a4,0x27
    0x84002298    0x134    or a5,a5,a4
    0x8400229a    0x136    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x8400229c    0x138    slli a4,a4,0x2
    0x8400229e    0x13a    lui a5,0xf8000
    0x840022a2    0x13e    srli a5,a5,0x19
    0x840022a4    0x140    and a5,a5,a4
    0x840022a6    0x142    slli a3,a4,0x19
    0x840022aa    0x146    bgez a3,ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x840022ae    0x14a    li a4,-1
    0x840022b0    0x14c    slli a4,a4,0x27
    0x840022b2    0x14e    or a5,a5,a4
    0x840022b4    0x150    j ffffffff840022b8 <create_ipcbuf_frame_cap+0x154>
    0x840022b6    0x152    li a5,0
    0x840022b8    0x154    ld a1,40(sp)          ; stack access
    0x840022ba    0x156    ld a0,32(sp)          ; stack access
    0x840022bc    0x158    sd a0,320(a5) # fffffffff8000140 <ki_end+0x73fd2140>
    0x840022c0    0x15c    sd a1,328(a5)
    0x840022c4    0x160    sd zero,336(a5)
    0x840022c8    0x164    li a4,3
    0x840022ca    0x166    sd a4,344(a5)
    0x840022ce    0x16a    ld ra,88(sp)          ; stack access
    0x840022d0    0x16c    ld s0,80(sp)          ; stack access
    0x840022d2    0x16e    ld s1,72(sp)          ; stack access
    0x840022d4    0x170    addi sp,sp,96
    0x840022d6    0x172    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 193 nodes.

Section create_frames_of_region (219 of 271)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 82 instructions.

RVC_TFFFT____T____TF..
RVC_FTTFT____FFFFTFT.

Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
32 stack accesses found. Annotated code for `create_frames_of_region`:

    0x84001200     0x0    addi sp,sp,-160
    0x84001202     0x2    sd ra,152(sp)         ; stack access
    0x84001204     0x4    sd s0,144(sp)         ; stack access
    0x84001206     0x6    sd s1,136(sp)         ; stack access
    0x84001208     0x8    sd s2,128(sp)         ; stack access
    0x8400120a     0xa    sd s3,120(sp)         ; stack access
    0x8400120c     0xc    sd s4,112(sp)         ; stack access
    0x8400120e     0xe    sd s5,104(sp)         ; stack access
    0x84001210    0x10    sd s6,96(sp)          ; stack access
    0x84001212    0x12    sd s7,88(sp)          ; stack access
    0x84001214    0x14    sd s8,80(sp)          ; stack access
    0x84001216    0x16    sd s9,72(sp)          ; stack access
    0x84001218    0x18    mv s8,a0
    0x8400121a    0x1a    sd a1,32(sp)          ; stack access
    0x8400121c    0x1c    sd a2,40(sp)          ; stack access
    0x8400121e    0x1e    sd a3,16(sp)          ; stack access
    0x84001220    0x20    sd a4,24(sp)          ; stack access
    0x84001222    0x22    auipc a4,0x2
    0x84001226    0x26    addi a4,a4,-1674 # ffffffff84002b98 <ndks_boot>
    0x8400122a    0x2a    ld s9,576(a4)
    0x8400122e    0x2e    bgeu a5,a6,ffffffff840012a0 <create_frames_of_region+0xa0>
    0x84001232    0x32    mv s3,a7
    0x84001234    0x34    mv s2,a6
    0x84001236    0x36    mv s0,a5
    0x84001238    0x38    li s1,1
    0x8400123a    0x3a    slli s7,s1,0x3b
    0x8400123e    0x3e    lui s6,0xfe000
    0x84001242    0x42    srli s6,s6,0x10
    0x84001246    0x46    slli s5,s1,0x26
    0x8400124a    0x4a    ld a5,160(sp)         ; stack access
    0x8400124c    0x4c    sub s5,s5,a5
    0x84001250    0x50    lui s4,0x1
    0x84001252    0x52    j ffffffff84001274 <create_frames_of_region+0x74>
    0x84001254    0x54    sd s7,48(sp)
    0x84001256    0x56    slli a5,s0,0x9
    0x8400125a    0x5a    and a5,a5,s6
    0x8400125e    0x5e    sd a5,56(sp)
    0x84001260    0x60    ld a2,48(sp)
    0x84001262    0x62    ld a3,56(sp)
    0x84001264    0x64    ld a0,32(sp)
    0x84001266    0x66    ld a1,40(sp)
    0x84001268    0x68    jal ra,ffffffff84000e36 <provide_cap>
    0x8400126c    0x6c    beqz a0,ffffffff84001292 <create_frames_of_region+0x92>
    0x8400126e    0x6e    add s0,s0,s4
    0x84001270    0x70    bgeu s0,s2,ffffffff840012a0 <create_frames_of_region+0xa0>
    0x84001274    0x74    beqz s3,ffffffff84001254 <create_frames_of_region+0x54>
    0x84001278    0x78    mv a6,s1
    0x8400127a    0x7a    li a5,0
    0x8400127c    0x7c    mv a4,s1
    0x8400127e    0x7e    add a3,s5,s0
    0x84001282    0x82    mv a2,s0
    0x84001284    0x84    ld a0,16(sp)
    0x84001286    0x86    ld a1,24(sp)
    0x84001288    0x88    jal ra,ffffffff84000918 <create_mapped_it_frame_cap>
    0x8400128c    0x8c    sd a0,48(sp)
    0x8400128e    0x8e    sd a1,56(sp)
    0x84001290    0x90    j ffffffff84001260 <create_frames_of_region+0x60>
    0x84001292    0x92    sd zero,0(s8)
    0x84001296    0x96    sd zero,8(s8)         ; stack access
    0x8400129a    0x9a    sd zero,16(s8)        ; stack access
    0x8400129e    0x9e    j ffffffff840012ba <create_frames_of_region+0xba>
    0x840012a0    0xa0    auipc a5,0x2
    0x840012a4    0xa4    addi a5,a5,-1800 # ffffffff84002b98 <ndks_boot>
    0x840012a8    0xa8    ld a5,576(a5)
    0x840012ac    0xac    sd s9,0(s8)           ; stack access
    0x840012b0    0xb0    sd a5,8(s8)           ; stack access
    0x840012b4    0xb4    li a5,1
    0x840012b6    0xb6    sd a5,16(s8)          ; stack access
    0x840012ba    0xba    mv a0,s8
    0x840012bc    0xbc    ld ra,152(sp)         ; stack access
    0x840012be    0xbe    ld s0,144(sp)         ; stack access
    0x840012c0    0xc0    ld s1,136(sp)         ; stack access
    0x840012c2    0xc2    ld s2,128(sp)         ; stack access
    0x840012c4    0xc4    ld s3,120(sp)         ; stack access
    0x840012c6    0xc6    ld s4,112(sp)         ; stack access
    0x840012c8    0xc8    ld s5,104(sp)         ; stack access
    0x840012ca    0xca    ld s6,96(sp)          ; stack access
    0x840012cc    0xcc    ld s7,88(sp)          ; stack access
    0x840012ce    0xce    ld s8,80(sp)          ; stack access
    0x840012d0    0xd0    ld s9,72(sp)          ; stack access
    0x840012d2    0xd2    addi sp,sp,160
    0x840012d4    0xd4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
82 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 138 nodes.

Section c_handle_syscall (220 of 271)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 10 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x84016f7c     0x0    addi sp,sp,-16
    0x84016f7e     0x2    sd ra,8(sp)           ; stack access
    0x84016f80     0x4    li a5,-1
    0x84016f82     0x6    beq a7,a5,ffffffff84016f92 <c_handle_syscall+0x16>
    0x84016f86     0xa    li a5,-2
    0x84016f88     0xc    beq a7,a5,ffffffff84016f96 <c_handle_syscall+0x1a>
    0x84016f8c    0x10    mv a0,a7
    0x84016f8e    0x12    jal ra,ffffffff840169e8 <slowpath>
    0x84016f92    0x16    jal ra,ffffffff84016a00 <fastpath_call>
    0x84016f96    0x1a    jal ra,ffffffff84016c8e <fastpath_reply_recv>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 18 nodes.

Section invokeTCB_ReadRegisters (221 of 271)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 107 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x84014fce      0x0    addi sp,sp,-48
    0x84014fd0      0x2    sd ra,40(sp)          ; stack access
    0x84014fd2      0x4    sd s0,32(sp)          ; stack access
    0x84014fd4      0x6    sd s1,24(sp)          ; stack access
    0x84014fd6      0x8    sd s2,16(sp)          ; stack access
    0x84014fd8      0xa    sd s3,8(sp)           ; stack access
    0x84014fda      0xc    mv s2,a0
    0x84014fdc      0xe    mv s0,a2
    0x84014fde     0x10    mv s3,a4
    0x84014fe0     0x12    auipc a5,0x19
    0x84014fe4     0x16    addi a5,a5,-1864 # ffffffff8402d898 <ksCurThread>
    0x84014fe8     0x1a    ld s1,0(a5)
    0x84014fea     0x1c    bnez a1,ffffffff84015064 <invokeTCB_ReadRegisters+0x96>
    0x84014fec     0x1e    beqz s3,ffffffff84015082 <invokeTCB_ReadRegisters+0xb4>
    0x84014ff0     0x22    mv a1,s1
    0x84014ff2     0x24    li a0,1
    0x84014ff4     0x26    jal ra,ffffffff84010444 <lookupIPCBuffer>
    0x84014ff8     0x2a    sd zero,72(s1)
    0x84014ffc     0x2e    beqz s0,ffffffff840150d8 <invokeTCB_ReadRegisters+0x10a>
    0x84014ffe     0x30    ld a5,264(s2)
    0x84015002     0x34    sd a5,88(s1)
    0x84015004     0x36    li a5,1
    0x84015006     0x38    bgeu a5,s0,ffffffff8401506a <invokeTCB_ReadRegisters+0x9c>
    0x8401500a     0x3c    ld a5,0(s2)
    0x8401500e     0x40    sd a5,96(s1)
    0x84015010     0x42    li a5,2
    0x84015012     0x44    bgeu a5,s0,ffffffff8401509a <invokeTCB_ReadRegisters+0xcc>
    0x84015016     0x48    ld a5,8(s2)
    0x8401501a     0x4c    sd a5,104(s1)
    0x8401501c     0x4e    li a5,3
    0x8401501e     0x50    bgeu a5,s0,ffffffff8401509e <invokeTCB_ReadRegisters+0xd0>
    0x84015022     0x54    ld a5,16(s2)
    0x84015026     0x58    sd a5,112(s1)
    0x84015028     0x5a    li a5,4
    0x8401502a     0x5c    li a3,4
    0x8401502c     0x5e    bgeu a5,s0,ffffffff8401506c <invokeTCB_ReadRegisters+0x9e>
    0x84015030     0x62    li a3,4
    0x84015032     0x64    beqz a0,ffffffff840150dc <invokeTCB_ReadRegisters+0x10e>
    0x84015034     0x66    bgeu a3,s0,ffffffff84015072 <invokeTCB_ReadRegisters+0xa4>
    0x84015038     0x6a    slli a4,a3,0x3
    0x8401503c     0x6e    auipc a2,0x3
    0x84015040     0x72    addi a2,a2,-1044 # ffffffff84017c28 <frameRegisters>
    0x84015044     0x76    add a2,a2,a4
    0x84015046     0x78    add a4,a4,a0
    0x84015048     0x7a    li a1,16
    0x8401504a     0x7c    addi a3,a3,1
    0x8401504c     0x7e    ld a5,0(a2)
    0x8401504e     0x80    slli a5,a5,0x3
    0x84015050     0x82    add a5,a5,s2
    0x84015052     0x84    ld a5,0(a5)
    0x84015054     0x86    sd a5,8(a4)
    0x84015056     0x88    bgeu a3,s0,ffffffff84015072 <invokeTCB_ReadRegisters+0xa4>
    0x8401505a     0x8c    addi a2,a2,8
    0x8401505c     0x8e    addi a4,a4,8
    0x8401505e     0x90    bne a3,a1,ffffffff8401504a <invokeTCB_ReadRegisters+0x7c>
    0x84015062     0x94    j ffffffff84015072 <invokeTCB_ReadRegisters+0xa4>
    0x84015064     0x96    jal ra,ffffffff84012dd6 <suspend>
    0x84015068     0x9a    j ffffffff84014fec <invokeTCB_ReadRegisters+0x1e>
    0x8401506a     0x9c    li a3,1
    0x8401506c     0x9e    beqz a0,ffffffff840150dc <invokeTCB_ReadRegisters+0x10e>
    0x8401506e     0xa0    bltu a3,s0,ffffffff84015034 <invokeTCB_ReadRegisters+0x66>
    0x84015072     0xa4    li a5,16
    0x84015074     0xa6    bltu a5,s0,ffffffff840150a2 <invokeTCB_ReadRegisters+0xd4>
    0x84015078     0xaa    li a5,0
    0x8401507a     0xac    add a5,a5,a3
    0x8401507c     0xae    andi a5,a5,127
    0x84015080     0xb2    sd a5,80(s1)
    0x84015082     0xb4    li a1,1
    0x84015084     0xb6    mv a0,s1
    0x84015086     0xb8    jal ra,ffffffff84012404 <setThreadState>
    0x8401508a     0xbc    li a0,0
    0x8401508c     0xbe    ld ra,40(sp)          ; stack access
    0x8401508e     0xc0    ld s0,32(sp)          ; stack access
    0x84015090     0xc2    ld s1,24(sp)          ; stack access
    0x84015092     0xc4    ld s2,16(sp)          ; stack access
    0x84015094     0xc6    ld s3,8(sp)           ; stack access
    0x84015096     0xc8    addi sp,sp,48
    0x84015098     0xca    ret
    0x8401509a     0xcc    li a3,2
    0x8401509c     0xce    j ffffffff8401506c <invokeTCB_ReadRegisters+0x9e>
    0x8401509e     0xd0    li a3,3
    0x840150a0     0xd2    j ffffffff8401506c <invokeTCB_ReadRegisters+0x9e>
    0x840150a2     0xd4    ld a5,72(s2)
    0x840150a6     0xd8    sd a5,136(a0)
    0x840150a8     0xda    auipc a2,0x3
    0x840150ac     0xde    addi a2,a2,-1016 # ffffffff84017cb0 <gpRegisters+0x8>
    0x840150b0     0xe2    addi a0,a0,144
    0x840150b4     0xe6    addi s0,s0,-16
    0x840150b6     0xe8    li a5,1
    0x840150b8     0xea    li a1,16
    0x840150ba     0xec    beq a5,s0,ffffffff840150d4 <invokeTCB_ReadRegisters+0x106>
    0x840150be     0xf0    ld a4,0(a2)
    0x840150c0     0xf2    slli a4,a4,0x3
    0x840150c2     0xf4    add a4,a4,s2
    0x840150c4     0xf6    ld a4,0(a4)
    0x840150c6     0xf8    sd a4,0(a0)
    0x840150c8     0xfa    addi a5,a5,1
    0x840150ca     0xfc    addi a2,a2,8
    0x840150cc     0xfe    addi a0,a0,8
    0x840150ce    0x100    bne a5,a1,ffffffff840150ba <invokeTCB_ReadRegisters+0xec>
    0x840150d2    0x104    j ffffffff8401507a <invokeTCB_ReadRegisters+0xac>
    0x840150d4    0x106    mv a5,s0
    0x840150d6    0x108    j ffffffff8401507a <invokeTCB_ReadRegisters+0xac>
    0x840150d8    0x10a    mv a3,s0
    0x840150da    0x10c    bnez a0,ffffffff84015072 <invokeTCB_ReadRegisters+0xa4>
    0x840150dc    0x10e    li a5,0
    0x840150de    0x110    j ffffffff8401507a <invokeTCB_ReadRegisters+0xac>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
107 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 174 nodes.

Section invokeTCB_CopyRegisters (222 of 271)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 63 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x84014e82     0x0    addi sp,sp,-48
    0x84014e84     0x2    sd ra,40(sp)          ; stack access
    0x84014e86     0x4    sd s0,32(sp)          ; stack access
    0x84014e88     0x6    sd s1,24(sp)          ; stack access
    0x84014e8a     0x8    sd s2,16(sp)          ; stack access
    0x84014e8c     0xa    sd s3,8(sp)           ; stack access
    0x84014e8e     0xc    sd s4,0(sp)           ; stack access
    0x84014e90     0xe    mv s0,a0
    0x84014e92    0x10    mv s1,a1
    0x84014e94    0x12    mv s4,a3
    0x84014e96    0x14    mv s3,a4
    0x84014e98    0x16    mv s2,a5
    0x84014e9a    0x18    bnez a2,ffffffff84014f18 <invokeTCB_CopyRegisters+0x96>
    0x84014e9c    0x1a    bnez s4,ffffffff84014f20 <invokeTCB_CopyRegisters+0x9e>
    0x84014ea0    0x1e    beqz s3,ffffffff84014ed0 <invokeTCB_CopyRegisters+0x4e>
    0x84014ea4    0x22    auipc a4,0x3
    0x84014ea8    0x26    addi a4,a4,-636 # ffffffff84017c28 <frameRegisters>
    0x84014eac    0x2a    auipc a2,0x3
    0x84014eb0    0x2e    addi a2,a2,-516 # ffffffff84017ca8 <gpRegisters>
    0x84014eb4    0x32    ld a5,0(a4)
    0x84014eb6    0x34    slli a5,a5,0x3
    0x84014eb8    0x36    add a3,s1,a5
    0x84014ebc    0x3a    ld a3,0(a3)
    0x84014ebe    0x3c    add a5,a5,s0
    0x84014ec0    0x3e    sd a3,0(a5)
    0x84014ec2    0x40    addi a4,a4,8
    0x84014ec4    0x42    bne a4,a2,ffffffff84014eb4 <invokeTCB_CopyRegisters+0x32>
    0x84014ec8    0x46    ld a5,264(s0)
    0x84014ecc    0x4a    sd a5,272(s0)
    0x84014ed0    0x4e    beqz s2,ffffffff84014ef8 <invokeTCB_CopyRegisters+0x76>
    0x84014ed4    0x52    auipc a4,0x3
    0x84014ed8    0x56    addi a4,a4,-556 # ffffffff84017ca8 <gpRegisters>
    0x84014edc    0x5a    auipc a2,0x3
    0x84014ee0    0x5e    addi a2,a2,-436 # ffffffff84017d28 <gpRegisters+0x80>
    0x84014ee4    0x62    ld a5,0(a4)
    0x84014ee6    0x64    slli a5,a5,0x3
    0x84014ee8    0x66    add a3,s1,a5
    0x84014eec    0x6a    ld a3,0(a3)
    0x84014eee    0x6c    add a5,a5,s0
    0x84014ef0    0x6e    sd a3,0(a5)
    0x84014ef2    0x70    addi a4,a4,8
    0x84014ef4    0x72    bne a4,a2,ffffffff84014ee4 <invokeTCB_CopyRegisters+0x62>
    0x84014ef8    0x76    auipc a5,0x19
    0x84014efc    0x7a    addi a5,a5,-1632 # ffffffff8402d898 <ksCurThread>
    0x84014f00    0x7e    ld a5,0(a5)
    0x84014f02    0x80    beq a5,s0,ffffffff84014f28 <invokeTCB_CopyRegisters+0xa6>
    0x84014f06    0x84    li a0,0
    0x84014f08    0x86    ld ra,40(sp)          ; stack access
    0x84014f0a    0x88    ld s0,32(sp)          ; stack access
    0x84014f0c    0x8a    ld s1,24(sp)          ; stack access
    0x84014f0e    0x8c    ld s2,16(sp)          ; stack access
    0x84014f10    0x8e    ld s3,8(sp)           ; stack access
    0x84014f12    0x90    ld s4,0(sp)           ; stack access
    0x84014f14    0x92    addi sp,sp,48
    0x84014f16    0x94    ret
    0x84014f18    0x96    mv a0,a1
    0x84014f1a    0x98    jal ra,ffffffff84012dd6 <suspend>
    0x84014f1e    0x9c    j ffffffff84014e9c <invokeTCB_CopyRegisters+0x1a>
    0x84014f20    0x9e    mv a0,s0
    0x84014f22    0xa0    jal ra,ffffffff840138c0 <restart>
    0x84014f26    0xa4    j ffffffff84014ea0 <invokeTCB_CopyRegisters+0x1e>
    0x84014f28    0xa6    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84014f2c    0xaa    j ffffffff84014f06 <invokeTCB_CopyRegisters+0x84>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 102 nodes.

Section c_handle_exception (223 of 271)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 18 instructions.

Skipping 14202573 csrr a0,scause


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x8401426a     0x0    addi sp,sp,-16
    0x8401426c     0x2    sd ra,8(sp)           ; stack access
    0x8401426e     0x4    csrr a0,scause
    0x84014272     0x8    li a5,15
    0x84014274     0xa    bltu a5,a0,ffffffff84014296 <c_handle_exception+0x2c>
    0x84014278     0xe    slli a4,a0,0x2
    0x8401427c    0x12    auipc a3,0x3
    0x84014280    0x16    addi a3,a3,1776 # ffffffff8401796c <__global_pointer$>
    0x84014284    0x1a    add a4,a4,a3
    0x84014286    0x1c    lw a5,0(a4)
    0x84014288    0x1e    add a5,a5,a3
    0x8401428a    0x20    jr a5
    0x8401428c    0x22    sext.w a0,a0
    0x8401428e    0x24    jal ra,ffffffff84014234 <handleVMFaultEvent>
    0x84014292    0x28    jal ra,ffffffff840101f0 <restore_user_context>
    0x84014296    0x2c    li a1,0
    0x84014298    0x2e    jal ra,ffffffff840141f4 <handleUserLevelFault>
    0x8401429c    0x32    j ffffffff84014292 <c_handle_exception+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 27 nodes.

Section handleUserLevelFault (224 of 271)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 23 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x840141f4     0x0    addi sp,sp,-16
    0x840141f6     0x2    sd ra,8(sp)           ; stack access
    0x840141f8     0x4    auipc a4,0x8
    0x840141fc     0x8    addi a4,a4,-376 # ffffffff8401c080 <current_fault>
    0x84014200     0xc    slli a1,a1,0x4
    0x84014202     0xe    li a5,-1
    0x84014204    0x10    srli a5,a5,0x20
    0x84014206    0x12    and a1,a1,a5
    0x84014208    0x14    slli a0,a0,0x20
    0x8401420a    0x16    or a1,a1,a0
    0x8401420c    0x18    ori a1,a1,3
    0x84014210    0x1c    sd a1,0(a4)
    0x84014212    0x1e    sd zero,8(a4)
    0x84014216    0x22    auipc a5,0x19
    0x8401421a    0x26    addi a5,a5,1666 # ffffffff8402d898 <ksCurThread>
    0x8401421e    0x2a    ld a0,0(a5)
    0x84014220    0x2c    jal ra,ffffffff840141a4 <handleFault>
    0x84014224    0x30    jal ra,ffffffff84012956 <schedule>
    0x84014228    0x34    jal ra,ffffffff84012430 <activateThread>
    0x8401422c    0x38    li a0,0
    0x8401422e    0x3a    ld ra,8(sp)           ; stack access
    0x84014230    0x3c    addi sp,sp,16
    0x84014232    0x3e    ret

Proving inst theorems
---------------------

23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 32 nodes.

Section handleUnknownSyscall (225 of 271)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x840141c4     0x0    addi sp,sp,-16
    0x840141c6     0x2    sd ra,8(sp)           ; stack access
    0x840141c8     0x4    auipc a5,0x8
    0x840141cc     0x8    addi a5,a5,-328 # ffffffff8401c080 <current_fault>
    0x840141d0     0xc    li a4,2
    0x840141d2     0xe    sd a4,0(a5)
    0x840141d4    0x10    sd a0,8(a5)
    0x840141d6    0x12    auipc a5,0x19
    0x840141da    0x16    addi a5,a5,1730 # ffffffff8402d898 <ksCurThread>
    0x840141de    0x1a    ld a0,0(a5)
    0x840141e0    0x1c    jal ra,ffffffff840141a4 <handleFault>
    0x840141e4    0x20    jal ra,ffffffff84012956 <schedule>
    0x840141e8    0x24    jal ra,ffffffff84012430 <activateThread>
    0x840141ec    0x28    li a0,0
    0x840141ee    0x2a    ld ra,8(sp)           ; stack access
    0x840141f0    0x2c    addi sp,sp,16
    0x840141f2    0x2e    ret

Proving inst theorems
---------------------

17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 26 nodes.

Section doIPCTransfer (226 of 271)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 46 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `doIPCTransfer`:

    0x84013e0e     0x0    addi sp,sp,-64
    0x84013e10     0x2    sd ra,56(sp)          ; stack access
    0x84013e12     0x4    sd s0,48(sp)          ; stack access
    0x84013e14     0x6    sd s1,40(sp)          ; stack access
    0x84013e16     0x8    sd s2,32(sp)          ; stack access
    0x84013e18     0xa    sd s3,24(sp)          ; stack access
    0x84013e1a     0xc    sd s4,16(sp)          ; stack access
    0x84013e1c     0xe    sd s5,8(sp)           ; stack access
    0x84013e1e    0x10    mv s0,a0
    0x84013e20    0x12    mv s4,a1
    0x84013e22    0x14    mv s2,a2
    0x84013e24    0x16    mv s5,a3
    0x84013e26    0x18    mv s1,a4
    0x84013e28    0x1a    mv a1,a4
    0x84013e2a    0x1c    li a0,1
    0x84013e2c    0x1e    jal ra,ffffffff84010444 <lookupIPCBuffer>
    0x84013e30    0x22    mv s3,a0
    0x84013e32    0x24    ld a5,312(s0)
    0x84013e36    0x28    andi a5,a5,15
    0x84013e38    0x2a    bnez a5,ffffffff84013e66 <doIPCTransfer+0x58>
    0x84013e3a    0x2c    mv a1,s0
    0x84013e3c    0x2e    li a0,0
    0x84013e3e    0x30    jal ra,ffffffff84010444 <lookupIPCBuffer>
    0x84013e42    0x34    mv a6,s3
    0x84013e44    0x36    mv a5,s1
    0x84013e46    0x38    mv a4,s5
    0x84013e48    0x3a    mv a3,s2
    0x84013e4a    0x3c    mv a2,s4
    0x84013e4c    0x3e    mv a1,a0
    0x84013e4e    0x40    mv a0,s0
    0x84013e50    0x42    jal ra,ffffffff84013c76 <doNormalTransfer>
    0x84013e54    0x46    ld ra,56(sp)          ; stack access
    0x84013e56    0x48    ld s0,48(sp)          ; stack access
    0x84013e58    0x4a    ld s1,40(sp)          ; stack access
    0x84013e5a    0x4c    ld s2,32(sp)          ; stack access
    0x84013e5c    0x4e    ld s3,24(sp)          ; stack access
    0x84013e5e    0x50    ld s4,16(sp)          ; stack access
    0x84013e60    0x52    ld s5,8(sp)           ; stack access
    0x84013e62    0x54    addi sp,sp,64
    0x84013e64    0x56    ret
    0x84013e66    0x58    mv a3,a0
    0x84013e68    0x5a    mv a2,s1
    0x84013e6a    0x5c    mv a1,s0
    0x84013e6c    0x5e    mv a0,s2
    0x84013e6e    0x60    jal ra,ffffffff84011320 <doFaultTransfer>
    0x84013e72    0x64    j ffffffff84013e54 <doIPCTransfer+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 68 nodes.

Section decodeIRQHandlerInvocation (227 of 271)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 73 instructions.


Stack analysis
---------------

11 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x840137dc     0x0    addi sp,sp,-48
    0x840137de     0x2    sd ra,40(sp)          ; stack access
    0x840137e0     0x4    sd s0,32(sp)          ; stack access
    0x840137e2     0x6    sd s1,24(sp)          ; stack access
    0x840137e4     0x8    sd s2,16(sp)          ; stack access
    0x840137e6     0xa    mv s0,a1
    0x840137e8     0xc    li a5,27
    0x840137ea     0xe    beq a0,a5,ffffffff84013826 <decodeIRQHandlerInvocation+0x4a>
    0x840137ee    0x12    li a5,28
    0x840137f0    0x14    beq a0,a5,ffffffff84013888 <decodeIRQHandlerInvocation+0xac>
    0x840137f4    0x18    li a5,26
    0x840137f6    0x1a    beq a0,a5,ffffffff84013808 <decodeIRQHandlerInvocation+0x2c>
    0x840137fa    0x1e    li a5,3
    0x840137fc    0x20    auipc a4,0xa
    0x84013800    0x24    sd a5,-772(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84013804    0x28    li a0,3
    0x84013806    0x2a    j ffffffff8401381a <decodeIRQHandlerInvocation+0x3e>
    0x84013808    0x2c    li a1,2
    0x8401380a    0x2e    auipc a5,0x1a
    0x8401380e    0x32    addi a5,a5,142 # ffffffff8402d898 <ksCurThread>
    0x84013812    0x36    ld a0,0(a5)
    0x84013814    0x38    jal ra,ffffffff84012404 <setThreadState>
    0x84013818    0x3c    li a0,0
    0x8401381a    0x3e    ld ra,40(sp)          ; stack access
    0x8401381c    0x40    ld s0,32(sp)          ; stack access
    0x8401381e    0x42    ld s1,24(sp)          ; stack access
    0x84013820    0x44    ld s2,16(sp)          ; stack access
    0x84013822    0x46    addi sp,sp,48
    0x84013824    0x48    ret
    0x84013826    0x4a    ld s1,0(a2)
    0x84013828    0x4c    beqz s1,ffffffff8401385a <decodeIRQHandlerInvocation+0x7e>
    0x8401382a    0x4e    ld s2,0(s1)
    0x8401382e    0x52    sd s2,0(sp)           ; stack access
    0x84013830    0x54    ld a5,8(s1)
    0x84013832    0x56    sd a5,8(sp)           ; stack access
    0x84013834    0x58    srli a4,s2,0x3b
    0x84013838    0x5c    li a5,6
    0x8401383a    0x5e    bne a4,a5,ffffffff84013846 <decodeIRQHandlerInvocation+0x6a>
    0x8401383e    0x62    slli a5,s2,0x6
    0x84013842    0x66    bltz a5,ffffffff84013868 <decodeIRQHandlerInvocation+0x8c>
    0x84013846    0x6a    auipc a5,0xa
    0x8401384a    0x6e    addi a5,a5,-894 # ffffffff8401d4c8 <current_syscall_error>
    0x8401384e    0x72    li a4,2
    0x84013850    0x74    sd a4,48(a5)
    0x84013852    0x76    sd zero,8(a5)
    0x84013856    0x7a    li a0,3
    0x84013858    0x7c    j ffffffff8401381a <decodeIRQHandlerInvocation+0x3e>
    0x8401385a    0x7e    li a5,7
    0x8401385c    0x80    auipc a4,0xa
    0x84013860    0x84    sd a5,-868(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84013864    0x88    li a0,3
    0x84013866    0x8a    j ffffffff8401381a <decodeIRQHandlerInvocation+0x3e>
    0x84013868    0x8c    li a1,2
    0x8401386a    0x8e    auipc a5,0x1a
    0x8401386e    0x92    addi a5,a5,46 # ffffffff8402d898 <ksCurThread>
    0x84013872    0x96    ld a0,0(a5)
    0x84013874    0x98    jal ra,ffffffff84012404 <setThreadState>
    0x84013878    0x9c    mv a3,s1
    0x8401387a    0x9e    mv a1,s2
    0x8401387c    0xa0    ld a2,8(sp)           ; stack access
    0x8401387e    0xa2    mv a0,s0
    0x84013880    0xa4    jal ra,ffffffff84013782 <invokeIRQHandler_SetIRQHandler>
    0x84013884    0xa8    li a0,0
    0x84013886    0xaa    j ffffffff8401381a <decodeIRQHandlerInvocation+0x3e>
    0x84013888    0xac    li a1,2
    0x8401388a    0xae    auipc a5,0x1a
    0x8401388e    0xb2    addi a5,a5,14 # ffffffff8402d898 <ksCurThread>
    0x84013892    0xb6    ld a0,0(a5)
    0x84013894    0xb8    jal ra,ffffffff84012404 <setThreadState>
    0x84013898    0xbc    mv a0,s0
    0x8401389a    0xbe    jal ra,ffffffff840137be <invokeIRQHandler_ClearIRQHandler>
    0x8401389e    0xc2    li a0,0
    0x840138a0    0xc4    j ffffffff8401381a <decodeIRQHandlerInvocation+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 112 nodes.

Section cteDeleteOne (228 of 271)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 23 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `cteDeleteOne`:

    0x8401374e     0x0    ld a5,0(a0)
    0x84013750     0x2    srli a5,a5,0x3b
    0x84013752     0x4    bnez a5,ffffffff84013756 <cteDeleteOne+0x8>
    0x84013754     0x6    ret
    0x84013756     0x8    addi sp,sp,-64
    0x84013758     0xa    sd ra,56(sp)
    0x8401375a     0xc    sd s0,48(sp)          ; stack access
    0x8401375c     0xe    mv s0,a0
    0x8401375e    0x10    jal ra,ffffffff84011fa4 <isFinalCapability>
    0x84013762    0x14    li a4,1
    0x84013764    0x16    mv a3,a0
    0x84013766    0x18    ld a1,0(s0)
    0x84013768    0x1a    ld a2,8(s0)
    0x8401376a    0x1c    mv a0,sp
    0x8401376c    0x1e    jal ra,ffffffff84012e0e <finaliseCap>
    0x84013770    0x22    li a1,0
    0x84013772    0x24    li a2,0
    0x84013774    0x26    mv a0,s0
    0x84013776    0x28    jal ra,ffffffff84011846 <emptySlot>
    0x8401377a    0x2c    ld ra,56(sp)          ; stack access
    0x8401377c    0x2e    ld s0,48(sp)          ; stack access
    0x8401377e    0x30    addi sp,sp,64
    0x84013780    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 37 nodes.

Section cteRevoke (229 of 271)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 53 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cteRevoke`:

    0x8401321a     0x0    addi sp,sp,-64
    0x8401321c     0x2    sd ra,56(sp)          ; stack access
    0x8401321e     0x4    sd s0,48(sp)          ; stack access
    0x84013220     0x6    sd s1,40(sp)          ; stack access
    0x84013222     0x8    sd s2,32(sp)          ; stack access
    0x84013224     0xa    sd s3,24(sp)          ; stack access
    0x84013226     0xc    sd s4,16(sp)          ; stack access
    0x84013228     0xe    sd s5,8(sp)           ; stack access
    0x8401322a    0x10    mv s1,a0
    0x8401322c    0x12    ld a4,24(a0)
    0x8401322e    0x14    lui a5,0xf8000
    0x84013232    0x18    srli a5,a5,0x19
    0x84013234    0x1a    and a0,a4,a5
    0x84013238    0x1e    slli a5,a4,0x19
    0x8401323c    0x22    bgez a5,ffffffff84013298 <cteRevoke+0x7e>
    0x84013240    0x26    li s0,-1
    0x84013242    0x28    slli s0,s0,0x27
    0x84013244    0x2a    or s0,s0,a0
    0x84013246    0x2c    li s3,1
    0x84013248    0x2e    lui s2,0xf8000
    0x8401324c    0x32    srli s2,s2,0x19
    0x84013250    0x36    slli s4,s3,0x26
    0x84013254    0x3a    li s5,-1
    0x84013256    0x3c    slli s5,s5,0x27
    0x84013258    0x3e    mv a1,s0
    0x8401325a    0x40    mv a0,s1
    0x8401325c    0x42    jal ra,ffffffff84011e12 <isMDBParentOf>
    0x84013260    0x46    beqz a0,ffffffff84013286 <cteRevoke+0x6c>
    0x84013262    0x48    mv a1,s3
    0x84013264    0x4a    mv a0,s0
    0x84013266    0x4c    jal ra,ffffffff840131cc <cteDelete>
    0x8401326a    0x50    bnez a0,ffffffff84013286 <cteRevoke+0x6c>
    0x8401326c    0x52    jal ra,ffffffff84011388 <preemptionPoint>
    0x84013270    0x56    bnez a0,ffffffff84013286 <cteRevoke+0x6c>
    0x84013272    0x58    ld a5,24(s1)
    0x84013274    0x5a    and a0,a5,s2
    0x84013278    0x5e    and a5,a5,s4
    0x8401327c    0x62    or s0,a0,s5
    0x84013280    0x66    bnez a5,ffffffff84013258 <cteRevoke+0x3e>
    0x84013282    0x68    mv s0,a0
    0x84013284    0x6a    bnez a0,ffffffff84013258 <cteRevoke+0x3e>
    0x84013286    0x6c    ld ra,56(sp)          ; stack access
    0x84013288    0x6e    ld s0,48(sp)          ; stack access
    0x8401328a    0x70    ld s1,40(sp)          ; stack access
    0x8401328c    0x72    ld s2,32(sp)          ; stack access
    0x8401328e    0x74    ld s3,24(sp)          ; stack access
    0x84013290    0x76    ld s4,16(sp)          ; stack access
    0x84013292    0x78    ld s5,8(sp)           ; stack access
    0x84013294    0x7a    addi sp,sp,64
    0x84013296    0x7c    ret
    0x84013298    0x7e    mv s0,a0
    0x8401329a    0x80    bnez a0,ffffffff84013246 <cteRevoke+0x2c>
    0x8401329c    0x82    j ffffffff84013286 <cteRevoke+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
53 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 87 nodes.

Section suspend (230 of 271)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x84012dd6     0x0    addi sp,sp,-16
    0x84012dd8     0x2    sd ra,8(sp)           ; stack access
    0x84012dda     0x4    sd s0,0(sp)           ; stack access
    0x84012ddc     0x6    mv s0,a0
    0x84012dde     0x8    jal ra,ffffffff84012cf4 <cancelIPC>
    0x84012de2     0xc    ld a5,280(s0)
    0x84012de6    0x10    andi a5,a5,15
    0x84012de8    0x12    li a4,1
    0x84012dea    0x14    beq a5,a4,ffffffff84012e04 <suspend+0x2e>
    0x84012dee    0x18    li a1,0
    0x84012df0    0x1a    mv a0,s0
    0x84012df2    0x1c    jal ra,ffffffff84012404 <setThreadState>
    0x84012df6    0x20    mv a0,s0
    0x84012df8    0x22    jal ra,ffffffff8401278c <tcbSchedDequeue>
    0x84012dfc    0x26    ld ra,8(sp)           ; stack access
    0x84012dfe    0x28    ld s0,0(sp)           ; stack access
    0x84012e00    0x2a    addi sp,sp,16
    0x84012e02    0x2c    ret
    0x84012e04    0x2e    ld a5,272(s0)
    0x84012e08    0x32    sd a5,264(s0)
    0x84012e0c    0x36    j ffffffff84012dee <suspend+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 34 nodes.

Section setPriority (231 of 271)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 27 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setPriority`:

    0x84012ad4     0x0    addi sp,sp,-32
    0x84012ad6     0x2    sd ra,24(sp)          ; stack access
    0x84012ad8     0x4    sd s0,16(sp)          ; stack access
    0x84012ada     0x6    sd s1,8(sp)           ; stack access
    0x84012adc     0x8    mv s0,a0
    0x84012ade     0xa    mv s1,a1
    0x84012ae0     0xc    jal ra,ffffffff8401278c <tcbSchedDequeue>
    0x84012ae4    0x10    sd s1,360(s0)
    0x84012ae8    0x14    ld a5,280(s0)
    0x84012aec    0x18    andi a5,a5,15
    0x84012aee    0x1a    addi a5,a5,-1
    0x84012af0    0x1c    li a4,1
    0x84012af2    0x1e    bgeu a4,a5,ffffffff84012b00 <setPriority+0x2c>
    0x84012af6    0x22    ld ra,24(sp)          ; stack access
    0x84012af8    0x24    ld s0,16(sp)          ; stack access
    0x84012afa    0x26    ld s1,8(sp)           ; stack access
    0x84012afc    0x28    addi sp,sp,32
    0x84012afe    0x2a    ret
    0x84012b00    0x2c    auipc a5,0x1b
    0x84012b04    0x30    addi a5,a5,-616 # ffffffff8402d898 <ksCurThread>
    0x84012b08    0x34    ld a5,0(a5)
    0x84012b0a    0x36    beq a5,s0,ffffffff84012b16 <setPriority+0x42>
    0x84012b0e    0x3a    mv a0,s0
    0x84012b10    0x3c    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x84012b14    0x40    j ffffffff84012af6 <setPriority+0x22>
    0x84012b16    0x42    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84012b1a    0x46    j ffffffff84012af6 <setPriority+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 44 nodes.

Section setDomain (232 of 271)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 27 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setDomain`:

    0x84012a8c     0x0    addi sp,sp,-32
    0x84012a8e     0x2    sd ra,24(sp)          ; stack access
    0x84012a90     0x4    sd s0,16(sp)          ; stack access
    0x84012a92     0x6    sd s1,8(sp)           ; stack access
    0x84012a94     0x8    mv s0,a0
    0x84012a96     0xa    mv s1,a1
    0x84012a98     0xc    jal ra,ffffffff8401278c <tcbSchedDequeue>
    0x84012a9c    0x10    sd s1,344(s0)
    0x84012aa0    0x14    ld a5,280(s0)
    0x84012aa4    0x18    andi a5,a5,15
    0x84012aa6    0x1a    addi a5,a5,-1
    0x84012aa8    0x1c    li a4,1
    0x84012aaa    0x1e    bgeu a4,a5,ffffffff84012ac6 <setDomain+0x3a>
    0x84012aae    0x22    auipc a5,0x1b
    0x84012ab2    0x26    addi a5,a5,-534 # ffffffff8402d898 <ksCurThread>
    0x84012ab6    0x2a    ld a5,0(a5)
    0x84012ab8    0x2c    beq a5,s0,ffffffff84012ace <setDomain+0x42>
    0x84012abc    0x30    ld ra,24(sp)          ; stack access
    0x84012abe    0x32    ld s0,16(sp)          ; stack access
    0x84012ac0    0x34    ld s1,8(sp)           ; stack access
    0x84012ac2    0x36    addi sp,sp,32
    0x84012ac4    0x38    ret
    0x84012ac6    0x3a    mv a0,s0
    0x84012ac8    0x3c    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x84012acc    0x40    j ffffffff84012aae <setDomain+0x22>
    0x84012ace    0x42    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84012ad2    0x46    j ffffffff84012abc <setDomain+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 44 nodes.

Section chooseThread (233 of 271)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 45 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `chooseThread`:

    0x84012864     0x0    addi sp,sp,-32
    0x84012866     0x2    sd ra,24(sp)          ; stack access
    0x84012868     0x4    sd s0,16(sp)          ; stack access
    0x8401286a     0x6    sd s1,8(sp)           ; stack access
    0x8401286c     0x8    auipc a5,0x1b
    0x84012870     0xc    addi a5,a5,-620 # ffffffff8402d600 <ksCurDomain>
    0x84012874    0x10    ld s0,0(a5)
    0x84012876    0x12    slli a4,s0,0x3
    0x8401287a    0x16    auipc a5,0x1b
    0x8401287e    0x1a    addi a5,a5,-98 # ffffffff8402d818 <ksReadyQueuesL1Bitmap>
    0x84012882    0x1e    add a5,a5,a4
    0x84012884    0x20    ld a0,0(a5)
    0x84012886    0x22    beqz a0,ffffffff840128dc <chooseThread+0x78>
    0x84012888    0x24    jal ra,ffffffff8401712c <__clzdi2>
    0x8401288c    0x28    sext.w s1,a0
    0x84012890    0x2c    slli a5,s0,0x2
    0x84012894    0x30    addi a4,s1,-60
    0x84012898    0x34    add a5,a5,a4
    0x8401289a    0x36    slli a5,a5,0x3
    0x8401289c    0x38    auipc a4,0x1b
    0x840128a0    0x3c    addi a4,a4,-652 # ffffffff8402d610 <ksReadyQueuesL2Bitmap>
    0x840128a4    0x40    add a5,a5,a4
    0x840128a6    0x42    ld a0,0(a5)
    0x840128a8    0x44    jal ra,ffffffff8401712c <__clzdi2>
    0x840128ac    0x48    sext.w a0,a0
    0x840128ae    0x4a    li a5,63
    0x840128b2    0x4e    sub s1,a5,s1
    0x840128b6    0x52    slli s1,s1,0x6
    0x840128b8    0x54    sub a5,a5,a0
    0x840128ba    0x56    or s1,s1,a5
    0x840128bc    0x58    slli s0,s0,0x8
    0x840128be    0x5a    add s0,s0,s1
    0x840128c0    0x5c    slli s0,s0,0x4
    0x840128c2    0x5e    auipc a5,0xb
    0x840128c6    0x62    addi a5,a5,-914 # ffffffff8401d530 <ksReadyQueues>
    0x840128ca    0x66    add s0,s0,a5
    0x840128cc    0x68    ld a0,0(s0)
    0x840128ce    0x6a    jal ra,ffffffff84012842 <switchToThread>
    0x840128d2    0x6e    ld ra,24(sp)          ; stack access
    0x840128d4    0x70    ld s0,16(sp)          ; stack access
    0x840128d6    0x72    ld s1,8(sp)           ; stack access
    0x840128d8    0x74    addi sp,sp,32
    0x840128da    0x76    ret
    0x840128dc    0x78    jal ra,ffffffff84011362 <switchToIdleThread>
    0x840128e0    0x7c    j ffffffff840128d2 <chooseThread+0x6e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 62 nodes.

Section cancelAllSignals (234 of 271)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 43 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllSignals`:

    0x8401263e     0x0    ld a5,0(a0)
    0x84012640     0x2    andi a3,a5,3
    0x84012644     0x6    li a4,1
    0x84012646     0x8    beq a3,a4,ffffffff8401264c <cancelAllSignals+0xe>
    0x8401264a     0xc    ret
    0x8401264c     0xe    addi sp,sp,-16
    0x8401264e    0x10    sd ra,8(sp)           ; stack access
    0x84012650    0x12    sd s0,0(sp)           ; stack access
    0x84012652    0x14    ld a4,8(a0)
    0x84012654    0x16    slli s0,a4,0x19
    0x84012658    0x1a    srli s0,s0,0x19
    0x8401265a    0x1c    slli a3,a4,0x19
    0x8401265e    0x20    bgez a3,ffffffff84012696 <cancelAllSignals+0x58>
    0x84012662    0x24    li a3,-1
    0x84012664    0x26    slli a3,a3,0x27
    0x84012666    0x28    or s0,s0,a3
    0x84012668    0x2a    and a4,a4,a3
    0x8401266a    0x2c    sd a4,8(a0)
    0x8401266c    0x2e    lui a4,0x2000
    0x84012670    0x32    addi a4,a4,-4
    0x84012672    0x34    and a5,a5,a4
    0x84012674    0x36    sd a5,0(a0)
    0x84012676    0x38    li a1,2
    0x84012678    0x3a    mv a0,s0
    0x8401267a    0x3c    jal ra,ffffffff84012404 <setThreadState>
    0x8401267e    0x40    mv a0,s0
    0x84012680    0x42    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x84012684    0x46    ld s0,408(s0)
    0x84012688    0x4a    bnez s0,ffffffff84012676 <cancelAllSignals+0x38>
    0x8401268a    0x4c    jal ra,ffffffff84012398 <rescheduleRequired>
    0x8401268e    0x50    ld ra,8(sp)           ; stack access
    0x84012690    0x52    ld s0,0(sp)           ; stack access
    0x84012692    0x54    addi sp,sp,16
    0x84012694    0x56    ret
    0x84012696    0x58    srli a4,a4,0x27
    0x84012698    0x5a    slli a4,a4,0x27
    0x8401269a    0x5c    sd a4,8(a0)
    0x8401269c    0x5e    lui a4,0x2000
    0x840126a0    0x62    addi a4,a4,-4
    0x840126a2    0x64    and a5,a5,a4
    0x840126a4    0x66    sd a5,0(a0)
    0x840126a6    0x68    bnez s0,ffffffff84012676 <cancelAllSignals+0x38>
    0x840126a8    0x6a    j ffffffff8401268a <cancelAllSignals+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 67 nodes.

Section cancelAllIPC (235 of 271)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllIPC`:

    0x84012600     0x0    ld a5,0(a0)
    0x84012602     0x2    andi a4,a5,3
    0x84012606     0x6    beqz a4,ffffffff8401263c <cancelAllIPC+0x3c>
    0x84012608     0x8    addi sp,sp,-16
    0x8401260a     0xa    sd ra,8(sp)           ; stack access
    0x8401260c     0xc    sd s0,0(sp)           ; stack access
    0x8401260e     0xe    ld s0,8(a0)
    0x84012610    0x10    sd zero,8(a0)
    0x84012614    0x14    srli a5,a5,0x27
    0x84012616    0x16    slli a5,a5,0x27
    0x84012618    0x18    sd a5,0(a0)
    0x8401261a    0x1a    beqz s0,ffffffff84012630 <cancelAllIPC+0x30>
    0x8401261c    0x1c    li a1,2
    0x8401261e    0x1e    mv a0,s0
    0x84012620    0x20    jal ra,ffffffff84012404 <setThreadState>
    0x84012624    0x24    mv a0,s0
    0x84012626    0x26    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x8401262a    0x2a    ld s0,408(s0)
    0x8401262e    0x2e    bnez s0,ffffffff8401261c <cancelAllIPC+0x1c>
    0x84012630    0x30    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84012634    0x34    ld ra,8(sp)           ; stack access
    0x84012636    0x36    ld s0,0(sp)           ; stack access
    0x84012638    0x38    addi sp,sp,16
    0x8401263a    0x3a    ret
    0x8401263c    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 45 nodes.

Section createNewObjects (236 of 271)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 52 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `createNewObjects`:

    0x84012290     0x0    addi sp,sp,-96
    0x84012292     0x2    sd ra,88(sp)          ; stack access
    0x84012294     0x4    sd s0,80(sp)          ; stack access
    0x84012296     0x6    sd s1,72(sp)          ; stack access
    0x84012298     0x8    sd s2,64(sp)          ; stack access
    0x8401229a     0xa    sd s3,56(sp)          ; stack access
    0x8401229c     0xc    sd s4,48(sp)          ; stack access
    0x8401229e     0xe    sd s5,40(sp)          ; stack access
    0x840122a0    0x10    sd s6,32(sp)          ; stack access
    0x840122a2    0x12    sd s7,24(sp)          ; stack access
    0x840122a4    0x14    sd s8,16(sp)          ; stack access
    0x840122a6    0x16    mv s5,a0
    0x840122a8    0x18    mv s6,a1
    0x840122aa    0x1a    mv s1,a2
    0x840122ac    0x1c    mv s7,a3
    0x840122ae    0x1e    mv s3,a4
    0x840122b0    0x20    mv s8,a5
    0x840122b2    0x22    ld s2,16(a2)
    0x840122b6    0x26    mv a1,a4
    0x840122b8    0x28    jal ra,ffffffff84011938 <getObjectSize>
    0x840122bc    0x2c    beqz s2,ffffffff840122f2 <createNewObjects+0x62>
    0x840122c0    0x30    sext.w s4,a0
    0x840122c4    0x34    li s0,0
    0x840122c6    0x36    sll a1,s0,s4
    0x840122ca    0x3a    mv a3,s8
    0x840122cc    0x3c    mv a2,s3
    0x840122ce    0x3e    add a1,a1,s7
    0x840122d0    0x40    mv a0,s5
    0x840122d2    0x42    jal ra,ffffffff840121d2 <createObject>
    0x840122d6    0x46    ld a5,8(s1)
    0x840122d8    0x48    add a5,a5,s0
    0x840122da    0x4a    slli a5,a5,0x5
    0x840122dc    0x4c    ld a4,0(s1)
    0x840122de    0x4e    mv a2,a0
    0x840122e0    0x50    mv a3,a1
    0x840122e2    0x52    add a1,a4,a5
    0x840122e6    0x56    mv a0,s6
    0x840122e8    0x58    jal ra,ffffffff840116a8 <insertNewCap>
    0x840122ec    0x5c    addi s0,s0,1
    0x840122ee    0x5e    bne s2,s0,ffffffff840122c6 <createNewObjects+0x36>
    0x840122f2    0x62    ld ra,88(sp)          ; stack access
    0x840122f4    0x64    ld s0,80(sp)          ; stack access
    0x840122f6    0x66    ld s1,72(sp)          ; stack access
    0x840122f8    0x68    ld s2,64(sp)          ; stack access
    0x840122fa    0x6a    ld s3,56(sp)          ; stack access
    0x840122fc    0x6c    ld s4,48(sp)          ; stack access
    0x840122fe    0x6e    ld s5,40(sp)          ; stack access
    0x84012300    0x70    ld s6,32(sp)          ; stack access
    0x84012302    0x72    ld s7,24(sp)          ; stack access
    0x84012304    0x74    ld s8,16(sp)          ; stack access
    0x84012306    0x76    addi sp,sp,96
    0x84012308    0x78    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 83 nodes.

Section unmapPage (237 of 271)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 59 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `unmapPage`:

    0x8401078e     0x0    addi sp,sp,-64
    0x84010790     0x2    sd ra,56(sp)          ; stack access
    0x84010792     0x4    sd s0,48(sp)          ; stack access
    0x84010794     0x6    sd s1,40(sp)          ; stack access
    0x84010796     0x8    sd s2,32(sp)          ; stack access
    0x84010798     0xa    mv s0,a0
    0x8401079a     0xc    mv s2,a2
    0x8401079c     0xe    mv s1,a3
    0x8401079e    0x10    mv a0,a1
    0x840107a0    0x12    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x840107a4    0x16    sd a0,16(sp)          ; stack access
    0x840107a6    0x18    sd a1,24(sp)          ; stack access
    0x840107a8    0x1a    beqz a0,ffffffff840107b6 <unmapPage+0x28>
    0x840107aa    0x1c    ld ra,56(sp)          ; stack access
    0x840107ac    0x1e    ld s0,48(sp)          ; stack access
    0x840107ae    0x20    ld s1,40(sp)          ; stack access
    0x840107b0    0x22    ld s2,32(sp)          ; stack access
    0x840107b2    0x24    addi sp,sp,64
    0x840107b4    0x26    ret
    0x840107b6    0x28    mv a1,s2
    0x840107b8    0x2a    ld a0,24(sp)
    0x840107ba    0x2c    jal ra,ffffffff84010630 <lookupPTSlot>
    0x840107be    0x30    sd a0,0(sp)
    0x840107c0    0x32    sd a1,8(sp)
    0x840107c2    0x34    li a5,1
    0x840107c4    0x36    beq s0,a5,ffffffff84010818 <unmapPage+0x8a>
    0x840107c8    0x3a    beqz s0,ffffffff8401081c <unmapPage+0x8e>
    0x840107ca    0x3c    li a4,2
    0x840107cc    0x3e    li a5,30
    0x840107ce    0x40    bne s0,a4,ffffffff84010814 <unmapPage+0x86>
    0x840107d2    0x44    slli a5,a5,0x20
    0x840107d4    0x46    srli a5,a5,0x20
    0x840107d6    0x48    bne a1,a5,ffffffff840107aa <unmapPage+0x1c>
    0x840107da    0x4c    ld a4,0(a0)
    0x840107dc    0x4e    andi a5,a4,1
    0x840107e0    0x52    beqz a5,ffffffff840107aa <unmapPage+0x1c>
    0x840107e2    0x54    srli a5,a4,0x1
    0x840107e6    0x58    srli a3,a4,0x2
    0x840107ea    0x5c    or a5,a5,a3
    0x840107ec    0x5e    srli a3,a4,0x3
    0x840107f0    0x62    or a5,a5,a3
    0x840107f2    0x64    andi a5,a5,1
    0x840107f4    0x66    beqz a5,ffffffff840107aa <unmapPage+0x1c>
    0x840107f6    0x68    slli a4,a4,0x2
    0x840107f8    0x6a    lui a5,0xfff00
    0x840107fc    0x6e    srli a5,a5,0x8
    0x840107fe    0x70    and a4,a4,a5
    0x84010800    0x72    li a5,1
    0x84010802    0x74    slli a5,a5,0x26
    0x84010804    0x76    add s1,s1,a5
    0x84010806    0x78    bne a4,s1,ffffffff840107aa <unmapPage+0x1c>
    0x8401080a    0x7c    sd zero,0(a0)
    0x8401080e    0x80    sfence.vma
    0x84010812    0x84    j ffffffff840107aa <unmapPage+0x1c>
    0x84010814    0x86    jal ra,ffffffff84010294 <halt>
    0x84010818    0x8a    li a5,21
    0x8401081a    0x8c    j ffffffff840107d2 <unmapPage+0x44>
    0x8401081c    0x8e    li a5,12
    0x8401081e    0x90    j ffffffff840107d2 <unmapPage+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
59 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 95 nodes.

Section create_rootserver_objects (238 of 271)
==============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 88 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x840023de     0x0    addi sp,sp,-80
    0x840023e0     0x2    sd ra,72(sp)          ; stack access
    0x840023e2     0x4    sd s0,64(sp)          ; stack access
    0x840023e4     0x6    sd s1,56(sp)          ; stack access
    0x840023e6     0x8    sd s2,48(sp)          ; stack access
    0x840023e8     0xa    sd s3,40(sp)          ; stack access
    0x840023ea     0xc    sd s4,32(sp)          ; stack access
    0x840023ec     0xe    mv s1,a0
    0x840023ee    0x10    sd a1,0(sp)           ; stack access
    0x840023f0    0x12    sd a2,8(sp)           ; stack access
    0x840023f2    0x14    mv s2,a3
    0x840023f4    0x16    mv s4,a3
    0x840023f6    0x18    li a5,24
    0x840023f8    0x1a    bgeu a3,a5,ffffffff840023fe <create_rootserver_objects+0x20>
    0x840023fc    0x1e    li s4,24
    0x840023fe    0x20    ld a5,0(sp)           ; stack access
    0x84002400    0x22    sd a5,16(sp)          ; stack access
    0x84002402    0x24    ld a5,8(sp)           ; stack access
    0x84002404    0x26    sd a5,24(sp)          ; stack access
    0x84002406    0x28    mv s3,s2
    0x84002408    0x2a    beqz s2,ffffffff84002412 <create_rootserver_objects+0x34>
    0x8400240c    0x2e    li s3,1
    0x8400240e    0x30    sll s3,s3,s2
    0x84002412    0x34    ld a0,16(sp)          ; stack access
    0x84002414    0x36    ld a1,24(sp)          ; stack access
    0x84002416    0x38    jal ra,ffffffff840001b4 <arch_get_n_paging>
    0x8400241a    0x3c    auipc s0,0x0
    0x8400241e    0x40    addi s0,s0,1918 # ffffffff84002b98 <ndks_boot>
    0x84002422    0x44    sd s1,664(s0)
    0x84002426    0x48    lui a5,0x1004
    0x8400242a    0x4c    addi a5,a5,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x8400242e    0x50    add s1,s1,a5
    0x84002430    0x52    add s1,s1,s3
    0x84002432    0x54    slli a0,a0,0xc
    0x84002434    0x56    add s1,s1,a0
    0x84002436    0x58    sd s1,672(s0)
    0x8400243a    0x5c    mv a1,s2
    0x8400243c    0x5e    mv a0,s4
    0x8400243e    0x60    jal ra,ffffffff840023b0 <maybe_alloc_extra_bi>
    0x84002442    0x64    li a1,1
    0x84002444    0x66    li a0,24
    0x84002446    0x68    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x8400244a    0x6c    sd a0,592(s0)
    0x8400244e    0x70    mv a1,s2
    0x84002450    0x72    li a0,12
    0x84002452    0x74    jal ra,ffffffff840023b0 <maybe_alloc_extra_bi>
    0x84002456    0x78    li a1,1
    0x84002458    0x7a    li a0,12
    0x8400245a    0x7c    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x8400245e    0x80    sd a0,600(s0)
    0x84002462    0x84    mv a1,s2
    0x84002464    0x86    li a0,12
    0x84002466    0x88    jal ra,ffffffff840023b0 <maybe_alloc_extra_bi>
    0x8400246a    0x8c    li a1,1
    0x8400246c    0x8e    li a0,12
    0x8400246e    0x90    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x84002472    0x94    sd a0,608(s0)
    0x84002476    0x98    li a1,1
    0x84002478    0x9a    li a0,12
    0x8400247a    0x9c    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x8400247e    0xa0    sd a0,616(s0)
    0x84002482    0xa4    li a1,1
    0x84002484    0xa6    li a0,12
    0x84002486    0xa8    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x8400248a    0xac    sd a0,624(s0)
    0x8400248e    0xb0    ld a0,0(sp)           ; stack access
    0x84002490    0xb2    ld a1,8(sp)           ; stack access
    0x84002492    0xb4    jal ra,ffffffff840001b4 <arch_get_n_paging>
    0x84002496    0xb8    mv s1,a0
    0x84002498    0xba    mv a1,a0
    0x8400249a    0xbc    li a0,12
    0x8400249c    0xbe    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x840024a0    0xc2    sd a0,648(s0)
    0x840024a4    0xc6    slli s1,s1,0xc
    0x840024a6    0xc8    add s1,s1,a0
    0x840024a8    0xca    sd s1,656(s0)
    0x840024ac    0xce    li a1,1
    0x840024ae    0xd0    li a0,10
    0x840024b0    0xd2    jal ra,ffffffff84002382 <alloc_rootserver_obj>
    0x840024b4    0xd6    sd a0,640(s0)
    0x840024b8    0xda    ld ra,72(sp)          ; stack access
    0x840024ba    0xdc    ld s0,64(sp)          ; stack access
    0x840024bc    0xde    ld s1,56(sp)          ; stack access
    0x840024be    0xe0    ld s2,48(sp)          ; stack access
    0x840024c0    0xe2    ld s3,40(sp)          ; stack access
    0x840024c2    0xe4    ld s4,32(sp)          ; stack access
    0x840024c4    0xe6    addi sp,sp,80
    0x840024c6    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 137 nodes.

Section create_untypeds_for_region (239 of 271)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 103 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x840015a8      0x0    addi sp,sp,-192
    0x840015aa      0x2    sd ra,184(sp)         ; stack access
    0x840015ac      0x4    sd s0,176(sp)         ; stack access
    0x840015ae      0x6    sd s1,168(sp)         ; stack access
    0x840015b0      0x8    sd s2,160(sp)         ; stack access
    0x840015b2      0xa    sd s3,152(sp)         ; stack access
    0x840015b4      0xc    sd s4,144(sp)         ; stack access
    0x840015b6      0xe    sd s5,136(sp)         ; stack access
    0x840015b8     0x10    sd s6,128(sp)         ; stack access
    0x840015ba     0x12    sd s7,120(sp)         ; stack access
    0x840015bc     0x14    sd s8,112(sp)         ; stack access
    0x840015be     0x16    sd s9,104(sp)         ; stack access
    0x840015c0     0x18    sd s10,96(sp)         ; stack access
    0x840015c2     0x1a    sd s11,88(sp)         ; stack access
    0x840015c4     0x1c    sd a0,32(sp)          ; stack access
    0x840015c6     0x1e    sd a1,40(sp)          ; stack access
    0x840015c8     0x20    beq a4,a3,ffffffff840016b6 <create_untypeds_for_region+0x10e>
    0x840015cc     0x24    mv s10,a2
    0x840015ce     0x26    mv s8,a5
    0x840015d0     0x28    mv s1,a3
    0x840015d2     0x2a    mv s3,a4
    0x840015d4     0x2c    slli s9,a2,0x6
    0x840015d8     0x30    andi s9,s9,64
    0x840015dc     0x34    li s6,63
    0x840015e0     0x38    li s5,38
    0x840015e4     0x3c    auipc s7,0x1
    0x840015e8     0x40    addi s7,s7,1460 # ffffffff84002b98 <ndks_boot>
    0x840015ec     0x44    li s4,1
    0x840015ee     0x46    slli s11,s4,0x26
    0x840015f2     0x4a    li a5,-1
    0x840015f4     0x4c    srli a5,a5,0x19
    0x840015f6     0x4e    sd a5,0(sp)           ; stack access
    0x840015f8     0x50    slli a5,s4,0x3c
    0x840015fc     0x54    sd a5,8(sp)           ; stack access
    0x840015fe     0x56    j ffffffff84001624 <create_untypeds_for_region+0x7c>
    0x84001600     0x58    mv s0,s5
    0x84001602     0x5a    ld a5,32(sp)          ; stack access
    0x84001604     0x5c    sd a5,48(sp)          ; stack access
    0x84001606     0x5e    ld a5,40(sp)          ; stack access
    0x84001608     0x60    sd a5,56(sp)          ; stack access
    0x8400160a     0x62    ld a5,576(s7)
    0x8400160e     0x66    sub a5,a5,s8
    0x84001612     0x6a    li a4,49
    0x84001616     0x6e    bgeu a4,a5,ffffffff84001652 <create_untypeds_for_region+0xaa>
    0x8400161a     0x72    sll s0,s4,s0
    0x8400161e     0x76    add s1,s1,s0
    0x84001620     0x78    beq s3,s1,ffffffff84001696 <create_untypeds_for_region+0xee>
    0x84001624     0x7c    sub a0,s3,s1
    0x84001628     0x80    jal ra,ffffffff8401712c <__clzdi2>
    0x8400162c     0x84    sext.w a0,a0
    0x8400162e     0x86    sub s2,s6,a0
    0x84001632     0x8a    mv s0,s2
    0x84001634     0x8c    beqz s1,ffffffff84001640 <create_untypeds_for_region+0x98>
    0x84001636     0x8e    mv a0,s1
    0x84001638     0x90    jal ra,ffffffff8401714a <__ctzdi2>
    0x8400163c     0x94    sext.w s0,a0
    0x84001640     0x98    bgeu s2,s0,ffffffff84001646 <create_untypeds_for_region+0x9e>
    0x84001644     0x9c    mv s0,s2
    0x84001646     0x9e    bltu s5,s0,ffffffff84001600 <create_untypeds_for_region+0x58>
    0x8400164a     0xa2    li a5,3
    0x8400164c     0xa4    bgeu a5,s0,ffffffff8400161a <create_untypeds_for_region+0x72>
    0x84001650     0xa8    j ffffffff84001602 <create_untypeds_for_region+0x5a>
    0x84001652     0xaa    slli a5,a5,0x4
    0x84001654     0xac    ld a4,568(s7)
    0x84001658     0xb0    add a5,a5,a4
    0x8400165a     0xb2    sd zero,176(a5)
    0x8400165e     0xb6    add a4,s1,s11
    0x84001662     0xba    sd a4,168(a5)
    0x84001664     0xbc    sb s0,176(a5)
    0x84001668     0xc0    sb s10,177(a5)
    0x8400166c     0xc4    ld a5,0(sp)           ; stack access
    0x8400166e     0xc6    and a2,s1,a5
    0x84001672     0xca    addiw a5,s0,-4
    0x84001676     0xce    sll a5,s4,a5
    0x8400167a     0xd2    slli a5,a5,0x19
    0x8400167c     0xd4    andi a3,s0,63
    0x84001680     0xd8    or a3,a3,s9
    0x84001684     0xdc    ld a4,8(sp)           ; stack access
    0x84001686     0xde    or a2,a2,a4
    0x84001688     0xe0    or a3,a3,a5
    0x8400168a     0xe2    ld a0,48(sp)          ; stack access
    0x8400168c     0xe4    ld a1,56(sp)          ; stack access
    0x8400168e     0xe6    jal ra,ffffffff84000e36 <provide_cap>
    0x84001692     0xea    bnez a0,ffffffff8400161a <create_untypeds_for_region+0x72>
    0x84001694     0xec    j ffffffff84001698 <create_untypeds_for_region+0xf0>
    0x84001696     0xee    li a0,1
    0x84001698     0xf0    ld ra,184(sp)         ; stack access
    0x8400169a     0xf2    ld s0,176(sp)         ; stack access
    0x8400169c     0xf4    ld s1,168(sp)         ; stack access
    0x8400169e     0xf6    ld s2,160(sp)         ; stack access
    0x840016a0     0xf8    ld s3,152(sp)         ; stack access
    0x840016a2     0xfa    ld s4,144(sp)         ; stack access
    0x840016a4     0xfc    ld s5,136(sp)         ; stack access
    0x840016a6     0xfe    ld s6,128(sp)         ; stack access
    0x840016a8    0x100    ld s7,120(sp)         ; stack access
    0x840016aa    0x102    ld s8,112(sp)         ; stack access
    0x840016ac    0x104    ld s9,104(sp)         ; stack access
    0x840016ae    0x106    ld s10,96(sp)         ; stack access
    0x840016b0    0x108    ld s11,88(sp)         ; stack access
    0x840016b2    0x10a    addi sp,sp,192
    0x840016b4    0x10c    ret
    0x840016b6    0x10e    li a0,1
    0x840016b8    0x110    j ffffffff84001698 <create_untypeds_for_region+0xf0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 167 nodes.

Section create_it_address_space (240 of 271)
============================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 225 instructions.

RVC_FTF_FT________TF.

Stack analysis
---------------

Section `create_it_address_space` expects pointer to stack in a0.
48 stack accesses found. Annotated code for `create_it_address_space`:

    0x84000fa6      0x0    addi sp,sp,-240
    0x84000fa8      0x2    sd ra,232(sp)         ; stack access
    0x84000faa      0x4    sd s0,224(sp)         ; stack access
    0x84000fac      0x6    sd s1,216(sp)         ; stack access
    0x84000fae      0x8    sd s2,208(sp)         ; stack access
    0x84000fb0      0xa    sd s3,200(sp)         ; stack access
    0x84000fb2      0xc    sd s4,192(sp)         ; stack access
    0x84000fb4      0xe    sd s5,184(sp)         ; stack access
    0x84000fb6     0x10    sd s6,176(sp)         ; stack access
    0x84000fb8     0x12    sd s7,168(sp)         ; stack access
    0x84000fba     0x14    sd s8,160(sp)         ; stack access
    0x84000fbc     0x16    sd s9,152(sp)         ; stack access
    0x84000fbe     0x18    sd s10,144(sp)        ; stack access
    0x84000fc0     0x1a    sd s11,136(sp)        ; stack access
    0x84000fc2     0x1c    sd a0,48(sp)          ; stack access
    0x84000fc4     0x1e    sd a1,56(sp)          ; stack access
    0x84000fc6     0x20    sd a2,32(sp)          ; stack access
    0x84000fc8     0x22    mv s10,a3
    0x84000fca     0x24    auipc s0,0x2
    0x84000fce     0x28    addi s0,s0,-1074 # ffffffff84002b98 <ndks_boot>
    0x84000fd2     0x2c    ld a0,600(s0)
    0x84000fd6     0x30    jal ra,ffffffff8401041e <copyGlobalMappings>
    0x84000fda     0x34    ld a5,600(s0)
    0x84000fde     0x38    slli s4,a5,0x19
    0x84000fe2     0x3c    srli s4,s4,0x19
    0x84000fe6     0x40    lui a4,0x300
    0x84000fea     0x44    addi a4,a4,1
    0x84000fec     0x46    slli a4,a4,0x27
    0x84000fee     0x48    or s4,s4,a4
    0x84000ff2     0x4c    slli a5,a5,0x9
    0x84000ff4     0x4e    lui a4,0xfe000
    0x84000ff8     0x52    srli a4,a4,0x10
    0x84000ffa     0x54    and a5,a5,a4
    0x84000ffc     0x56    li a4,1
    0x84000ffe     0x58    slli a4,a4,0x30
    0x84001000     0x5a    or a5,a5,a4
    0x84001002     0x5c    sd a5,8(sp)           ; stack access
    0x84001004     0x5e    ld a5,576(s0)
    0x84001008     0x62    sd a5,24(sp)          ; stack access
    0x8400100a     0x64    ld a4,48(sp)          ; stack access
    0x8400100c     0x66    ld a0,56(sp)          ; stack access
    0x8400100e     0x68    srli a2,a4,0x3b
    0x84001012     0x6c    li a5,20
    0x84001014     0x6e    bltu a5,a2,ffffffff840010c2 <create_it_address_space+0x11c>
    0x84001018     0x72    slli a3,a2,0x2
    0x8400101c     0x76    auipc a1,0x16
    0x84001020     0x7a    addi a1,a1,1168 # ffffffff840174ac <ksDomScheduleLength+0x33c>
    0x84001024     0x7e    add a3,a3,a1
    0x84001026     0x80    lw a5,0(a3)
    0x84001028     0x82    add a5,a5,a1
    0x8400102a     0x84    jr a5
    0x8400102c     0x86    slli a5,a4,0x19
    0x84001030     0x8a    srli a5,a5,0x19
    0x84001032     0x8c    slli a3,a4,0x19
    0x84001036     0x90    bgez a3,ffffffff84001122 <create_it_address_space+0x17c>
    0x8400103a     0x94    li a4,-1
    0x8400103c     0x96    slli a4,a4,0x27
    0x8400103e     0x98    or a5,a5,a4
    0x84001040     0x9a    j ffffffff84001122 <create_it_address_space+0x17c>
    0x84001042     0x9c    slli a5,a4,0x19
    0x84001046     0xa0    srli a5,a5,0x19
    0x84001048     0xa2    slli a3,a4,0x19
    0x8400104c     0xa6    bgez a3,ffffffff84001122 <create_it_address_space+0x17c>
    0x84001050     0xaa    li a4,-1
    0x84001052     0xac    slli a4,a4,0x27
    0x84001054     0xae    or a5,a5,a4
    0x84001056     0xb0    j ffffffff84001122 <create_it_address_space+0x17c>
    0x84001058     0xb2    slli a5,a4,0x19
    0x8400105c     0xb6    srli a5,a5,0x19
    0x8400105e     0xb8    slli a3,a4,0x19
    0x84001062     0xbc    bgez a3,ffffffff84001122 <create_it_address_space+0x17c>
    0x84001066     0xc0    li a4,-1
    0x84001068     0xc2    slli a4,a4,0x27
    0x8400106a     0xc4    or a5,a5,a4
    0x8400106c     0xc6    j ffffffff84001122 <create_it_address_space+0x17c>
    0x8400106e     0xc8    slli a4,a4,0x1
    0x84001070     0xca    lui a5,0xfc000
    0x84001074     0xce    srli a5,a5,0x19
    0x84001076     0xd0    and a5,a5,a4
    0x84001078     0xd2    slli a3,a4,0x19
    0x8400107c     0xd6    bgez a3,ffffffff84001122 <create_it_address_space+0x17c>
    0x84001080     0xda    li a4,-1
    0x84001082     0xdc    slli a4,a4,0x27
    0x84001084     0xde    or a5,a5,a4
    0x84001086     0xe0    j ffffffff84001122 <create_it_address_space+0x17c>
    0x84001088     0xe2    slli a5,a4,0x19
    0x8400108c     0xe6    srli a5,a5,0x19
    0x8400108e     0xe8    slli a3,a4,0x19
    0x84001092     0xec    bgez a3,ffffffff8400109c <create_it_address_space+0xf6>
    0x84001096     0xf0    li a4,-1
    0x84001098     0xf2    slli a4,a4,0x27
    0x8400109a     0xf4    or a5,a5,a4
    0x8400109c     0xf6    andi a5,a5,-1024
    0x840010a0     0xfa    j ffffffff84001122 <create_it_address_space+0x17c>
    0x840010a2     0xfc    andi a5,a4,127
    0x840010a6    0x100    li a3,64
    0x840010aa    0x104    beq a5,a3,ffffffff840010be <create_it_address_space+0x118>
    0x840010ae    0x108    andi a4,a4,63
    0x840010b2    0x10c    addiw a4,a4,1
    0x840010b4    0x10e    li a5,-1
    0x840010b6    0x110    sll a5,a5,a4
    0x840010ba    0x114    and a5,a5,a0
    0x840010bc    0x116    j ffffffff84001122 <create_it_address_space+0x17c>
    0x840010be    0x118    li a4,4
    0x840010c0    0x11a    j ffffffff840010b2 <create_it_address_space+0x10c>
    0x840010c2    0x11c    li a5,3
    0x840010c4    0x11e    beq a2,a5,ffffffff840010ee <create_it_address_space+0x148>
    0x840010c8    0x122    li a5,13
    0x840010ca    0x124    beq a2,a5,ffffffff84001106 <create_it_address_space+0x160>
    0x840010ce    0x128    li a4,1
    0x840010d0    0x12a    li a5,0
    0x840010d2    0x12c    bne a2,a4,ffffffff84001122 <create_it_address_space+0x17c>
    0x840010d6    0x130    srli a0,a0,0x9
    0x840010d8    0x132    slli a5,a0,0x19
    0x840010dc    0x136    srli a5,a5,0x19
    0x840010de    0x138    slli a4,a0,0x19
    0x840010e2    0x13c    bgez a4,ffffffff84001122 <create_it_address_space+0x17c>
    0x840010e6    0x140    li a4,-1
    0x840010e8    0x142    slli a4,a4,0x27
    0x840010ea    0x144    or a5,a5,a4
    0x840010ec    0x146    j ffffffff84001122 <create_it_address_space+0x17c>
    0x840010ee    0x148    srli a0,a0,0x9
    0x840010f0    0x14a    slli a5,a0,0x19
    0x840010f4    0x14e    srli a5,a5,0x19
    0x840010f6    0x150    slli a4,a0,0x19
    0x840010fa    0x154    bgez a4,ffffffff84001122 <create_it_address_space+0x17c>
    0x840010fe    0x158    li a4,-1
    0x84001100    0x15a    slli a4,a4,0x27
    0x84001102    0x15c    or a5,a5,a4
    0x84001104    0x15e    j ffffffff84001122 <create_it_address_space+0x17c>
    0x84001106    0x160    slli a4,a4,0x2
    0x84001108    0x162    lui a5,0xf8000
    0x8400110c    0x166    srli a5,a5,0x19
    0x8400110e    0x168    and a5,a5,a4
    0x84001110    0x16a    slli a3,a4,0x19
    0x84001114    0x16e    bgez a3,ffffffff84001122 <create_it_address_space+0x17c>
    0x84001118    0x172    li a4,-1
    0x8400111a    0x174    slli a4,a4,0x27
    0x8400111c    0x176    or a5,a5,a4
    0x8400111e    0x178    j ffffffff84001122 <create_it_address_space+0x17c>
    0x84001120    0x17a    li a5,0
    0x84001122    0x17c    sd s4,96(a5) # fffffffff8000060 <ki_end+0x73fd2060>
    0x84001126    0x180    ld a4,8(sp)           ; stack access
    0x84001128    0x182    sd a4,104(a5)
    0x8400112a    0x184    sd zero,112(a5)
    0x8400112e    0x188    li a4,3
    0x84001130    0x18a    sd a4,120(a5)
    0x84001132    0x18c    li a5,30
    0x84001134    0x18e    sd a5,16(sp)          ; stack access
    0x84001136    0x190    auipc s3,0x2
    0x8400113a    0x194    addi s3,s3,-1438 # ffffffff84002b98 <ndks_boot>
    0x8400113e    0x198    li s7,-1
    0x84001140    0x19a    srli s7,s7,0x19
    0x84001144    0x19e    lui s5,0x300
    0x84001148    0x1a2    addi s5,s5,1
    0x8400114a    0x1a4    slli s5,s5,0x27
    0x8400114c    0x1a6    lui s6,0xfe000
    0x84001150    0x1aa    srli s6,s6,0x10
    0x84001154    0x1ae    lw a5,16(sp)          ; stack access
    0x84001156    0x1b0    ld s2,32(sp)          ; stack access
    0x84001158    0x1b2    srl s2,s2,a5
    0x8400115c    0x1b6    sll s2,s2,a5
    0x84001160    0x1ba    bgeu s2,s10,ffffffff840011ae <create_it_address_space+0x208>
    0x84001164    0x1be    li s9,1
    0x84001166    0x1c0    sll s9,s9,a5
    0x8400116a    0x1c4    lui s11,0x1
    0x8400116c    0x1c6    li s8,1
    0x8400116e    0x1c8    slli s8,s8,0x30
    0x84001170    0x1ca    ld s0,648(s3)
    0x84001174    0x1ce    add a5,s0,s11
    0x84001178    0x1d2    sd a5,648(s3)
    0x8400117c    0x1d6    and s1,s2,s7
    0x84001180    0x1da    or s1,s1,s5
    0x84001184    0x1de    slli s0,s0,0x9
    0x84001186    0x1e0    and s0,s0,s6
    0x8400118a    0x1e4    or s0,s0,s8
    0x8400118e    0x1e8    mv a2,s1
    0x84001190    0x1ea    mv a3,s0
    0x84001192    0x1ec    mv a0,s4
    0x84001194    0x1ee    ld a1,8(sp)           ; stack access
    0x84001196    0x1f0    jal ra,ffffffff84000450 <map_it_pt_cap>
    0x8400119a    0x1f4    mv a2,s1
    0x8400119c    0x1f6    mv a3,s0
    0x8400119e    0x1f8    ld a0,48(sp)          ; stack access
    0x840011a0    0x1fa    ld a1,56(sp)          ; stack access
    0x840011a2    0x1fc    jal ra,ffffffff84000e36 <provide_cap>
    0x840011a6    0x200    beqz a0,ffffffff840011fa <create_it_address_space+0x254>
    0x840011a8    0x202    add s2,s2,s9
    0x840011aa    0x204    bltu s2,s10,ffffffff84001170 <create_it_address_space+0x1ca>
    0x840011ae    0x208    ld a5,16(sp)          ; stack access
    0x840011b0    0x20a    addiw a5,a5,-9
    0x840011b2    0x20c    mv a4,a5
    0x840011b4    0x20e    sd a5,16(sp)          ; stack access
    0x840011b6    0x210    li a5,12
    0x840011b8    0x212    bne a4,a5,ffffffff84001154 <create_it_address_space+0x1ae>
    0x840011bc    0x216    auipc a5,0x2
    0x840011c0    0x21a    addi a5,a5,-1572 # ffffffff84002b98 <ndks_boot>
    0x840011c4    0x21e    ld a4,576(a5)
    0x840011c8    0x222    ld a5,568(a5)
    0x840011cc    0x226    ld a3,24(sp)          ; stack access
    0x840011ce    0x228    sd a3,88(a5)
    0x840011d0    0x22a    sd a4,96(a5)
    0x840011d2    0x22c    sd s4,112(sp)         ; stack access
    0x840011d4    0x22e    ld a5,8(sp)           ; stack access
    0x840011d6    0x230    sd a5,120(sp)         ; stack access
    0x840011d8    0x232    ld a0,112(sp)         ; stack access
    0x840011da    0x234    ld a1,120(sp)         ; stack access
    0x840011dc    0x236    ld ra,232(sp)         ; stack access
    0x840011de    0x238    ld s0,224(sp)         ; stack access
    0x840011e0    0x23a    ld s1,216(sp)         ; stack access
    0x840011e2    0x23c    ld s2,208(sp)         ; stack access
    0x840011e4    0x23e    ld s3,200(sp)         ; stack access
    0x840011e6    0x240    ld s4,192(sp)         ; stack access
    0x840011e8    0x242    ld s5,184(sp)         ; stack access
    0x840011ea    0x244    ld s6,176(sp)         ; stack access
    0x840011ec    0x246    ld s7,168(sp)         ; stack access
    0x840011ee    0x248    ld s8,160(sp)         ; stack access
    0x840011f0    0x24a    ld s9,152(sp)         ; stack access
    0x840011f2    0x24c    ld s10,144(sp)        ; stack access
    0x840011f4    0x24e    ld s11,136(sp)        ; stack access
    0x840011f6    0x250    addi sp,sp,240
    0x840011f8    0x252    ret
    0x840011fa    0x254    sd zero,112(sp)
    0x840011fc    0x256    sd zero,120(sp)
    0x840011fe    0x258    j ffffffff840011d8 <create_it_address_space+0x232>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
225 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 328 nodes.

Section invokeUntyped_Retype (241 of 271)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 104 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x840161c6      0x0    addi sp,sp,-128
    0x840161c8      0x2    sd ra,120(sp)         ; stack access
    0x840161ca      0x4    sd s0,112(sp)         ; stack access
    0x840161cc      0x6    sd s1,104(sp)         ; stack access
    0x840161ce      0x8    sd s2,96(sp)          ; stack access
    0x840161d0      0xa    sd s3,88(sp)          ; stack access
    0x840161d2      0xc    sd s4,80(sp)          ; stack access
    0x840161d4      0xe    sd s5,72(sp)          ; stack access
    0x840161d6     0x10    sd s6,64(sp)          ; stack access
    0x840161d8     0x12    sd s7,56(sp)          ; stack access
    0x840161da     0x14    sd s8,48(sp)          ; stack access
    0x840161dc     0x16    sd s9,40(sp)          ; stack access
    0x840161de     0x18    sd s10,32(sp)         ; stack access
    0x840161e0     0x1a    mv s0,a0
    0x840161e2     0x1c    mv s3,a2
    0x840161e4     0x1e    mv s2,a3
    0x840161e6     0x20    mv s4,a4
    0x840161e8     0x22    mv s1,a5
    0x840161ea     0x24    mv s6,a6
    0x840161ec     0x26    ld s8,0(a0)
    0x840161f0     0x2a    slli s7,s8,0x19
    0x840161f4     0x2e    srli s7,s7,0x19
    0x840161f8     0x32    slli a5,s8,0x19
    0x840161fc     0x36    bgez a5,ffffffff84016208 <invokeUntyped_Retype+0x42>
    0x84016200     0x3a    li a5,-1
    0x84016202     0x3c    slli a5,a5,0x27
    0x84016204     0x3e    or s7,s7,a5
    0x84016208     0x42    beqz a1,ffffffff84016240 <invokeUntyped_Retype+0x7a>
    0x8401620a     0x44    ld s9,8(s0)
    0x8401620e     0x48    srli s5,s9,0x19
    0x84016212     0x4c    slli s5,s5,0x4
    0x84016214     0x4e    beqz s5,ffffffff84016240 <invokeUntyped_Retype+0x7a>
    0x84016218     0x52    srli a5,s9,0x6
    0x8401621c     0x56    andi a5,a5,1
    0x8401621e     0x58    bnez a5,ffffffff84016232 <invokeUntyped_Retype+0x6c>
    0x84016220     0x5a    andi a5,s9,56
    0x84016224     0x5e    bnez a5,ffffffff8401629c <invokeUntyped_Retype+0xd6>
    0x84016226     0x60    li a1,1
    0x84016228     0x62    sll a1,a1,s9
    0x8401622c     0x66    mv a0,s7
    0x8401622e     0x68    jal ra,ffffffff84015844 <memzero>
    0x84016232     0x6c    sd s8,0(s0)
    0x84016236     0x70    slli s9,s9,0x27
    0x84016238     0x72    srli s9,s9,0x27
    0x8401623c     0x76    sd s9,8(s0)
    0x84016240     0x7a    ld s5,16(s1)
    0x84016244     0x7e    mv a1,s4
    0x84016246     0x80    mv a0,s2
    0x84016248     0x82    jal ra,ffffffff84011938 <getObjectSize>
    0x8401624c     0x86    sll a5,s5,a0
    0x84016250     0x8a    sub s7,s3,s7
    0x84016254     0x8e    add a5,a5,s7
    0x84016256     0x90    srli a5,a5,0x4
    0x84016258     0x92    slli a5,a5,0x19
    0x8401625a     0x94    ld a4,8(s0)
    0x8401625c     0x96    slli a4,a4,0x27
    0x8401625e     0x98    srli a4,a4,0x27
    0x84016260     0x9a    or a5,a5,a4
    0x84016262     0x9c    sd a5,8(s0)
    0x84016264     0x9e    ld a5,0(s1)
    0x84016266     0xa0    sd a5,0(sp)           ; stack access
    0x84016268     0xa2    ld a5,8(s1)
    0x8401626a     0xa4    sd a5,8(sp)           ; stack access
    0x8401626c     0xa6    sd s5,16(sp)          ; stack access
    0x8401626e     0xa8    mv a5,s6
    0x84016270     0xaa    mv a4,s4
    0x84016272     0xac    mv a3,s3
    0x84016274     0xae    mv a2,sp
    0x84016276     0xb0    mv a1,s0
    0x84016278     0xb2    mv a0,s2
    0x8401627a     0xb4    jal ra,ffffffff84012290 <createNewObjects>
    0x8401627e     0xb8    li a0,0
    0x84016280     0xba    ld ra,120(sp)         ; stack access
    0x84016282     0xbc    ld s0,112(sp)         ; stack access
    0x84016284     0xbe    ld s1,104(sp)         ; stack access
    0x84016286     0xc0    ld s2,96(sp)          ; stack access
    0x84016288     0xc2    ld s3,88(sp)          ; stack access
    0x8401628a     0xc4    ld s4,80(sp)          ; stack access
    0x8401628c     0xc6    ld s5,72(sp)          ; stack access
    0x8401628e     0xc8    ld s6,64(sp)          ; stack access
    0x84016290     0xca    ld s7,56(sp)          ; stack access
    0x84016292     0xcc    ld s8,48(sp)          ; stack access
    0x84016294     0xce    ld s9,40(sp)          ; stack access
    0x84016296     0xd0    ld s10,32(sp)         ; stack access
    0x84016298     0xd2    addi sp,sp,128
    0x8401629a     0xd4    ret
    0x8401629c     0xd6    addi s5,s5,-1
    0x8401629e     0xd8    andi s5,s5,-256
    0x840162a2     0xdc    slli s9,s9,0x27
    0x840162a4     0xde    srli s9,s9,0x27
    0x840162a8     0xe2    li s10,-256
    0x840162ac     0xe6    li a1,256
    0x840162b0     0xea    add a0,s7,s5
    0x840162b4     0xee    jal ra,ffffffff84015844 <memzero>
    0x840162b8     0xf2    sd s8,0(s0)
    0x840162bc     0xf6    srli a5,s5,0x4
    0x840162c0     0xfa    slli a5,a5,0x19
    0x840162c2     0xfc    or a5,a5,s9
    0x840162c6    0x100    sd a5,8(s0)
    0x840162c8    0x102    jal ra,ffffffff84011388 <preemptionPoint>
    0x840162cc    0x106    bnez a0,ffffffff84016280 <invokeUntyped_Retype+0xba>
    0x840162ce    0x108    addi s5,s5,-256
    0x840162d2    0x10c    bne s5,s10,ffffffff840162ac <invokeUntyped_Retype+0xe6>
    0x840162d6    0x110    j ffffffff84016240 <invokeUntyped_Retype+0x7a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 162 nodes.

Section decodeSetIPCBuffer (242 of 271)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 79 instructions.


Stack analysis
---------------

26 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x84014c4c     0x0    addi sp,sp,-176
    0x84014c4e     0x2    sd ra,168(sp)         ; stack access
    0x84014c50     0x4    sd s0,160(sp)         ; stack access
    0x84014c52     0x6    sd s1,152(sp)         ; stack access
    0x84014c54     0x8    sd s2,144(sp)         ; stack access
    0x84014c56     0xa    sd a0,64(sp)          ; stack access
    0x84014c58     0xc    sd a1,72(sp)          ; stack access
    0x84014c5a     0xe    beqz a2,ffffffff84014c9a <decodeSetIPCBuffer+0x4e>
    0x84014c5c    0x10    ld s0,0(a4)
    0x84014c5e    0x12    beqz s0,ffffffff84014c9a <decodeSetIPCBuffer+0x4e>
    0x84014c60    0x14    mv s2,a3
    0x84014c62    0x16    auipc a5,0x19
    0x84014c66    0x1a    addi a5,a5,-970 # ffffffff8402d898 <ksCurThread>
    0x84014c6a    0x1e    ld a5,0(a5)
    0x84014c6c    0x20    ld s1,88(a5)
    0x84014c6e    0x22    ld a5,0(s0)
    0x84014c70    0x24    sd a5,112(sp)         ; stack access
    0x84014c72    0x26    ld a5,8(s0)
    0x84014c74    0x28    sd a5,120(sp)         ; stack access
    0x84014c76    0x2a    beqz s1,ffffffff84014ca8 <decodeSetIPCBuffer+0x5c>
    0x84014c78    0x2c    ld a2,112(sp)         ; stack access
    0x84014c7a    0x2e    mv a3,a5
    0x84014c7c    0x30    mv a1,s0
    0x84014c7e    0x32    addi a0,sp,88
    0x84014c80    0x34    jal ra,ffffffff84011eca <deriveCap>
    0x84014c84    0x38    ld a0,88(sp)          ; stack access
    0x84014c86    0x3a    bnez a0,ffffffff84014cf8 <decodeSetIPCBuffer+0xac>
    0x84014c88    0x3c    ld a1,96(sp)          ; stack access
    0x84014c8a    0x3e    sd a1,112(sp)         ; stack access
    0x84014c8c    0x40    ld a2,104(sp)         ; stack access
    0x84014c8e    0x42    sd a2,120(sp)         ; stack access
    0x84014c90    0x44    mv a0,s1
    0x84014c92    0x46    jal ra,ffffffff840109a4 <checkValidIPCBuffer>
    0x84014c96    0x4a    beqz a0,ffffffff84014caa <decodeSetIPCBuffer+0x5e>
    0x84014c98    0x4c    j ffffffff84014cf8 <decodeSetIPCBuffer+0xac>
    0x84014c9a    0x4e    li a5,7
    0x84014c9c    0x50    auipc a4,0x9
    0x84014ca0    0x54    sd a5,-1956(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014ca4    0x58    li a0,3
    0x84014ca6    0x5a    j ffffffff84014cf8 <decodeSetIPCBuffer+0xac>
    0x84014ca8    0x5c    li s0,0
    0x84014caa    0x5e    li a1,2
    0x84014cac    0x60    auipc a5,0x19
    0x84014cb0    0x64    addi a5,a5,-1044 # ffffffff8402d898 <ksCurThread>
    0x84014cb4    0x68    ld a0,0(a5)
    0x84014cb6    0x6a    jal ra,ffffffff84012404 <setThreadState>
    0x84014cba    0x6e    ld a5,64(sp)
    0x84014cbc    0x70    slli a0,a5,0x19
    0x84014cc0    0x74    srli a0,a0,0x19
    0x84014cc2    0x76    slli a4,a5,0x19
    0x84014cc6    0x7a    bgez a4,ffffffff84014cd0 <decodeSetIPCBuffer+0x84>
    0x84014cca    0x7e    li a5,-1
    0x84014ccc    0x80    slli a5,a5,0x27
    0x84014cce    0x82    or a0,a0,a5
    0x84014cd0    0x84    li a5,2
    0x84014cd2    0x86    sd a5,56(sp)
    0x84014cd4    0x88    sd s0,48(sp)
    0x84014cd6    0x8a    ld a5,112(sp)         ; stack access
    0x84014cd8    0x8c    sd a5,32(sp)          ; stack access
    0x84014cda    0x8e    ld a5,120(sp)         ; stack access
    0x84014cdc    0x90    sd a5,40(sp)          ; stack access
    0x84014cde    0x92    sd s1,24(sp)          ; stack access
    0x84014ce0    0x94    sd zero,16(sp)        ; stack access
    0x84014ce2    0x96    sd zero,0(sp)         ; stack access
    0x84014ce4    0x98    sd zero,8(sp)         ; stack access
    0x84014ce6    0x9a    li a7,0
    0x84014ce8    0x9c    li a5,0
    0x84014cea    0x9e    li a6,0
    0x84014cec    0xa0    li a4,0
    0x84014cee    0xa2    li a3,0
    0x84014cf0    0xa4    li a2,0
    0x84014cf2    0xa6    mv a1,s2
    0x84014cf4    0xa8    jal ra,ffffffff840146b6 <invokeTCB_ThreadControl>
    0x84014cf8    0xac    ld ra,168(sp)         ; stack access
    0x84014cfa    0xae    ld s0,160(sp)         ; stack access
    0x84014cfc    0xb0    ld s1,152(sp)         ; stack access
    0x84014cfe    0xb2    ld s2,144(sp)         ; stack access
    0x84014d00    0xb4    addi sp,sp,176
    0x84014d02    0xb6    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 132 nodes.

Section handleVMFaultEvent (243 of 271)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 19 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x84014234     0x0    addi sp,sp,-16
    0x84014236     0x2    sd ra,8(sp)           ; stack access
    0x84014238     0x4    mv a1,a0
    0x8401423a     0x6    auipc a5,0x19
    0x8401423e     0xa    addi a5,a5,1630 # ffffffff8402d898 <ksCurThread>
    0x84014242     0xe    ld a0,0(a5)
    0x84014244    0x10    jal ra,ffffffff84010682 <handleVMFault>
    0x84014248    0x14    bnez a0,ffffffff8401425a <handleVMFaultEvent+0x26>
    0x8401424a    0x16    jal ra,ffffffff84012956 <schedule>
    0x8401424e    0x1a    jal ra,ffffffff84012430 <activateThread>
    0x84014252    0x1e    li a0,0
    0x84014254    0x20    ld ra,8(sp)           ; stack access
    0x84014256    0x22    addi sp,sp,16
    0x84014258    0x24    ret
    0x8401425a    0x26    auipc a5,0x19
    0x8401425e    0x2a    addi a5,a5,1598 # ffffffff8402d898 <ksCurThread>
    0x84014262    0x2e    ld a0,0(a5)
    0x84014264    0x30    jal ra,ffffffff840141a4 <handleFault>
    0x84014268    0x34    j ffffffff8401424a <handleVMFaultEvent+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 30 nodes.

Section handleInterruptEntry (244 of 271)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 13 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x84013ac6     0x0    addi sp,sp,-16
    0x84013ac8     0x2    sd ra,8(sp)           ; stack access
    0x84013aca     0x4    jal ra,ffffffff84010ad0 <getActiveIRQ>
    0x84013ace     0x8    sext.w a0,a0
    0x84013ad0     0xa    bnez a0,ffffffff84013ae2 <handleInterruptEntry+0x1c>
    0x84013ad2     0xc    jal ra,ffffffff84012956 <schedule>
    0x84013ad6    0x10    jal ra,ffffffff84012430 <activateThread>
    0x84013ada    0x14    li a0,0
    0x84013adc    0x16    ld ra,8(sp)           ; stack access
    0x84013ade    0x18    addi sp,sp,16
    0x84013ae0    0x1a    ret
    0x84013ae2    0x1c    jal ra,ffffffff840139fc <handleInterrupt>
    0x84013ae6    0x20    j ffffffff84013ad2 <handleInterruptEntry+0xc>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 22 nodes.

Section handleInterrupt (245 of 271)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 69 instructions.

Skipping c01027f3 rdtime a5

Skipping 00000073 ecall

Skipping c0102773 rdtime a4


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterrupt`:

    0x840139fc     0x0    addi sp,sp,-16
    0x840139fe     0x2    sd ra,8(sp)           ; stack access
    0x84013a00     0x4    li a5,1
    0x84013a02     0x6    bltu a5,a0,ffffffff84013a3e <handleInterrupt+0x42>
    0x84013a06     0xa    slli a5,a0,0x20
    0x84013a0a     0xe    srli a5,a5,0x20
    0x84013a0c    0x10    slli a4,a5,0x3
    0x84013a10    0x14    auipc a5,0xa
    0x84013a14    0x18    addi a5,a5,-1272 # ffffffff8401d518 <intStateIRQTable>
    0x84013a18    0x1c    add a5,a5,a4
    0x84013a1a    0x1e    ld a5,0(a5)
    0x84013a1c    0x20    li a4,1
    0x84013a1e    0x22    beq a5,a4,ffffffff84013a50 <handleInterrupt+0x54>
    0x84013a22    0x26    beqz a5,ffffffff84013ab8 <handleInterrupt+0xbc>
    0x84013a24    0x28    li a4,2
    0x84013a26    0x2a    beq a5,a4,ffffffff84013a92 <handleInterrupt+0x96>
    0x84013a2a    0x2e    li a4,3
    0x84013a2c    0x30    bne a5,a4,ffffffff84013ac2 <handleInterrupt+0xc6>
    0x84013a30    0x34    auipc a5,0x4
    0x84013a34    0x38    sw zero,2008(a5) # ffffffff84018208 <active_irq>
    0x84013a38    0x3c    ld ra,8(sp)           ; stack access
    0x84013a3a    0x3e    addi sp,sp,16
    0x84013a3c    0x40    ret
    0x84013a3e    0x42    mv a1,a0
    0x84013a40    0x44    li a0,1
    0x84013a42    0x46    jal ra,ffffffff84010b06 <maskInterrupt>
    0x84013a46    0x4a    auipc a5,0x4
    0x84013a4a    0x4e    sw zero,1986(a5) # ffffffff84018208 <active_irq>
    0x84013a4e    0x52    j ffffffff84013a38 <handleInterrupt+0x3c>
    0x84013a50    0x54    slli a5,a0,0x20
    0x84013a54    0x58    srli a5,a5,0x20
    0x84013a56    0x5a    slli a5,a5,0x5
    0x84013a58    0x5c    auipc a0,0x1a
    0x84013a5c    0x60    addi a0,a0,-1240 # ffffffff8402d580 <intStateIRQNode>
    0x84013a60    0x64    add a5,a5,a0
    0x84013a62    0x66    ld a4,0(a5)
    0x84013a64    0x68    srli a2,a4,0x3b
    0x84013a68    0x6c    li a3,6
    0x84013a6a    0x6e    bne a2,a3,ffffffff84013a30 <handleInterrupt+0x34>
    0x84013a6e    0x72    slli a3,a4,0x6
    0x84013a72    0x76    bgez a3,ffffffff84013a30 <handleInterrupt+0x34>
    0x84013a76    0x7a    slli a0,a4,0x19
    0x84013a7a    0x7e    srli a0,a0,0x19
    0x84013a7c    0x80    slli a3,a4,0x19
    0x84013a80    0x84    bgez a3,ffffffff84013a8a <handleInterrupt+0x8e>
    0x84013a84    0x88    li a4,-1
    0x84013a86    0x8a    slli a4,a4,0x27
    0x84013a88    0x8c    or a0,a0,a4
    0x84013a8a    0x8e    ld a1,8(a5)
    0x84013a8c    0x90    jal ra,ffffffff84013900 <sendSignal>
    0x84013a90    0x94    j ffffffff84013a30 <handleInterrupt+0x34>
    0x84013a92    0x96    jal ra,ffffffff84012738 <timerTick>
    0x84013a96    0x9a    lui a3,0x5
    0x84013a98    0x9c    addi a3,a3,-480 # 4e20 <KERNEL_OFFSET-0xfffffffeffffb1e0>
    0x84013a9c    0xa0    rdtime a5
    0x84013aa0    0xa4    add a5,a5,a3
    0x84013aa2    0xa6    mv a0,a5
    0x84013aa4    0xa8    li a1,0
    0x84013aa6    0xaa    li a2,0
    0x84013aa8    0xac    li a7,0
    0x84013aaa    0xae    ecall
    0x84013aae    0xb2    rdtime a4
    0x84013ab2    0xb6    bltu a5,a4,ffffffff84013a9c <handleInterrupt+0xa0>
    0x84013ab6    0xba    j ffffffff84013a30 <handleInterrupt+0x34>
    0x84013ab8    0xbc    mv a1,a0
    0x84013aba    0xbe    li a0,1
    0x84013abc    0xc0    jal ra,ffffffff84010b06 <maskInterrupt>
    0x84013ac0    0xc4    j ffffffff84013a30 <handleInterrupt+0x34>
    0x84013ac2    0xc6    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 103 nodes.

Section sendSignal (246 of 271)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 99 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `sendSignal`:

    0x84013900     0x0    addi sp,sp,-48
    0x84013902     0x2    sd ra,40(sp)          ; stack access
    0x84013904     0x4    sd s0,32(sp)          ; stack access
    0x84013906     0x6    sd s1,24(sp)          ; stack access
    0x84013908     0x8    sd s2,16(sp)          ; stack access
    0x8401390a     0xa    mv s0,a0
    0x8401390c     0xc    mv s2,a1
    0x8401390e     0xe    ld a4,0(a0)
    0x84013910    0x10    andi a5,a4,3
    0x84013914    0x14    li a3,1
    0x84013916    0x16    beq a5,a3,ffffffff8401398a <sendSignal+0x8a>
    0x8401391a    0x1a    beqz a5,ffffffff8401392e <sendSignal+0x2e>
    0x8401391c    0x1c    li a4,2
    0x8401391e    0x1e    beq a5,a4,ffffffff840139f0 <sendSignal+0xf0>
    0x84013922    0x22    ld ra,40(sp)          ; stack access
    0x84013924    0x24    ld s0,32(sp)          ; stack access
    0x84013926    0x26    ld s1,24(sp)          ; stack access
    0x84013928    0x28    ld s2,16(sp)          ; stack access
    0x8401392a    0x2a    addi sp,sp,48
    0x8401392c    0x2c    ret
    0x8401392e    0x2e    ld a3,24(a0)
    0x84013930    0x30    slli a5,a3,0x19
    0x84013934    0x34    srli a5,a5,0x19
    0x84013936    0x36    slli a2,a3,0x19
    0x8401393a    0x3a    bgez a2,ffffffff8401395e <sendSignal+0x5e>
    0x8401393e    0x3e    li s1,-1
    0x84013940    0x40    slli s1,s1,0x27
    0x84013942    0x42    or s1,s1,a5
    0x84013944    0x44    ld a5,280(s1)
    0x84013948    0x48    andi a5,a5,15
    0x8401394a    0x4a    li a3,3
    0x8401394c    0x4c    beq a5,a3,ffffffff84013970 <sendSignal+0x70>
    0x84013950    0x50    andi a4,a4,-4
    0x84013952    0x52    ori a4,a4,2
    0x84013956    0x56    sd a4,0(s0)
    0x84013958    0x58    sd s2,16(s0)
    0x8401395c    0x5c    j ffffffff84013922 <sendSignal+0x22>
    0x8401395e    0x5e    bnez a5,ffffffff8401396c <sendSignal+0x6c>
    0x84013960    0x60    andi a4,a4,-4
    0x84013962    0x62    ori a4,a4,2
    0x84013966    0x66    sd a4,0(a0)
    0x84013968    0x68    sd a1,16(s0)
    0x8401396a    0x6a    j ffffffff84013922 <sendSignal+0x22>
    0x8401396c    0x6c    mv s1,a5
    0x8401396e    0x6e    j ffffffff84013944 <sendSignal+0x44>
    0x84013970    0x70    mv a0,s1
    0x84013972    0x72    jal ra,ffffffff84012cf4 <cancelIPC>
    0x84013976    0x76    li a1,1
    0x84013978    0x78    mv a0,s1
    0x8401397a    0x7a    jal ra,ffffffff84012404 <setThreadState>
    0x8401397e    0x7e    sd s2,72(s1)
    0x84013982    0x82    mv a0,s1
    0x84013984    0x84    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x84013988    0x88    j ffffffff84013922 <sendSignal+0x22>
    0x8401398a    0x8a    ld a5,8(a0)
    0x8401398c    0x8c    slli s1,a5,0x19
    0x84013990    0x90    srli s1,s1,0x19
    0x84013992    0x92    slli a3,a5,0x19
    0x84013996    0x96    bgez a3,ffffffff840139a0 <sendSignal+0xa0>
    0x8401399a    0x9a    li a5,-1
    0x8401399c    0x9c    slli a5,a5,0x27
    0x8401399e    0x9e    or s1,s1,a5
    0x840139a0    0xa0    srli a2,a4,0x19
    0x840139a4    0xa4    bgez a4,ffffffff840139ae <sendSignal+0xae>
    0x840139a8    0xa8    li a5,-1
    0x840139aa    0xaa    slli a5,a5,0x27
    0x840139ac    0xac    or a2,a2,a5
    0x840139ae    0xae    mv a1,s1
    0x840139b0    0xb0    mv a0,s1
    0x840139b2    0xb2    jal ra,ffffffff84012b3a <tcbEPDequeue>
    0x840139b6    0xb6    ld a4,8(s0)
    0x840139b8    0xb8    li a5,-1
    0x840139ba    0xba    slli a3,a5,0x27
    0x840139be    0xbe    and a4,a4,a3
    0x840139c0    0xc0    srli a5,a5,0x19
    0x840139c2    0xc2    and a5,a5,a0
    0x840139c4    0xc4    or a5,a5,a4
    0x840139c6    0xc6    sd a5,8(s0)
    0x840139c8    0xc8    ld a5,0(s0)
    0x840139ca    0xca    slli a5,a5,0x27
    0x840139cc    0xcc    srli a5,a5,0x27
    0x840139ce    0xce    slli a1,a1,0x19
    0x840139d0    0xd0    or a5,a5,a1
    0x840139d2    0xd2    beqz a0,ffffffff840139ea <sendSignal+0xea>
    0x840139d4    0xd4    sd a5,0(s0)
    0x840139d6    0xd6    li a1,1
    0x840139d8    0xd8    mv a0,s1
    0x840139da    0xda    jal ra,ffffffff84012404 <setThreadState>
    0x840139de    0xde    sd s2,72(s1)
    0x840139e2    0xe2    mv a0,s1
    0x840139e4    0xe4    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x840139e8    0xe8    j ffffffff84013922 <sendSignal+0x22>
    0x840139ea    0xea    andi a5,a5,-4
    0x840139ec    0xec    sd a5,0(s0)
    0x840139ee    0xee    j ffffffff840139d6 <sendSignal+0xd6>
    0x840139f0    0xf0    ld a5,16(a0)
    0x840139f2    0xf2    or s2,a5,a1
    0x840139f6    0xf6    sd s2,16(a0)
    0x840139fa    0xfa    j ffffffff84013922 <sendSignal+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
99 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 149 nodes.

Section cancelIPC (247 of 271)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 87 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelIPC`:

    0x84012cf4     0x0    addi sp,sp,-48
    0x84012cf6     0x2    sd ra,40(sp)          ; stack access
    0x84012cf8     0x4    sd s0,32(sp)          ; stack access
    0x84012cfa     0x6    sd s1,24(sp)          ; stack access
    0x84012cfc     0x8    mv s0,a0
    0x84012cfe     0xa    ld a4,280(a0)
    0x84012d02     0xe    andi a5,a4,15
    0x84012d06    0x12    li a3,5
    0x84012d08    0x14    beq a5,a3,ffffffff84012da8 <cancelIPC+0xb4>
    0x84012d0c    0x18    bltu a3,a5,ffffffff84012d7e <cancelIPC+0x8a>
    0x84012d10    0x1c    li a3,3
    0x84012d12    0x1e    bltu a5,a3,ffffffff84012d74 <cancelIPC+0x80>
    0x84012d16    0x22    lui a5,0xe0000
    0x84012d1a    0x26    srli a5,a5,0x19
    0x84012d1c    0x28    and a5,a5,a4
    0x84012d1e    0x2a    slli a3,a4,0x19
    0x84012d22    0x2e    bgez a3,ffffffff84012d2c <cancelIPC+0x38>
    0x84012d26    0x32    li a4,-1
    0x84012d28    0x34    slli a4,a4,0x27
    0x84012d2a    0x36    or a5,a5,a4
    0x84012d2c    0x38    mv s1,a5
    0x84012d2e    0x3a    ld a1,8(a5)
    0x84012d30    0x3c    ld a5,0(a5)
    0x84012d32    0x3e    lui a2,0xf8000
    0x84012d36    0x42    srli a2,a2,0x19
    0x84012d38    0x44    and a2,a2,a5
    0x84012d3a    0x46    slli a4,a5,0x19
    0x84012d3e    0x4a    bgez a4,ffffffff84012d48 <cancelIPC+0x54>
    0x84012d42    0x4e    li a5,-1
    0x84012d44    0x50    slli a5,a5,0x27
    0x84012d46    0x52    or a2,a2,a5
    0x84012d48    0x54    mv a0,s0
    0x84012d4a    0x56    jal ra,ffffffff84012b3a <tcbEPDequeue>
    0x84012d4e    0x5a    sd a0,0(sp)           ; stack access
    0x84012d50    0x5c    sd a1,8(sp)           ; stack access
    0x84012d52    0x5e    sd a0,8(s1)
    0x84012d54    0x60    ld a5,0(s1)
    0x84012d56    0x62    li a4,-1
    0x84012d58    0x64    slli a4,a4,0x27
    0x84012d5a    0x66    addi a4,a4,3
    0x84012d5c    0x68    and a5,a5,a4
    0x84012d5e    0x6a    lui a4,0xf8000
    0x84012d62    0x6e    srli a4,a4,0x19
    0x84012d64    0x70    and a1,a1,a4
    0x84012d66    0x72    or a5,a5,a1
    0x84012d68    0x74    beqz a0,ffffffff84012da2 <cancelIPC+0xae>
    0x84012d6a    0x76    sd a5,0(s1)
    0x84012d6c    0x78    li a1,0
    0x84012d6e    0x7a    mv a0,s0
    0x84012d70    0x7c    jal ra,ffffffff84012404 <setThreadState>
    0x84012d74    0x80    ld ra,40(sp)          ; stack access
    0x84012d76    0x82    ld s0,32(sp)          ; stack access
    0x84012d78    0x84    ld s1,24(sp)          ; stack access
    0x84012d7a    0x86    addi sp,sp,48
    0x84012d7c    0x88    ret
    0x84012d7e    0x8a    li a3,6
    0x84012d80    0x8c    bne a5,a3,ffffffff84012d74 <cancelIPC+0x80>
    0x84012d84    0x90    lui a1,0xe0000
    0x84012d88    0x94    srli a1,a1,0x19
    0x84012d8a    0x96    and a1,a1,a4
    0x84012d8c    0x98    slli a5,a4,0x19
    0x84012d90    0x9c    bgez a5,ffffffff84012d9a <cancelIPC+0xa6>
    0x84012d94    0xa0    li a5,-1
    0x84012d96    0xa2    slli a5,a5,0x27
    0x84012d98    0xa4    or a1,a1,a5
    0x84012d9a    0xa6    mv a0,s0
    0x84012d9c    0xa8    jal ra,ffffffff84012c84 <cancelSignal>
    0x84012da0    0xac    j ffffffff84012d74 <cancelIPC+0x80>
    0x84012da2    0xae    andi a5,a5,-4
    0x84012da4    0xb0    sd a5,0(s1)
    0x84012da6    0xb2    j ffffffff84012d6c <cancelIPC+0x78>
    0x84012da8    0xb4    sd zero,312(a0)
    0x84012dac    0xb8    sd zero,320(a0)
    0x84012db0    0xbc    andi s0,a0,-1024
    0x84012db4    0xc0    ld a5,88(s0)
    0x84012db6    0xc2    lui a0,0xf8000
    0x84012dba    0xc6    srli a0,a0,0x19
    0x84012dbc    0xc8    and a0,a0,a5
    0x84012dbe    0xca    slli a4,a5,0x19
    0x84012dc2    0xce    bgez a4,ffffffff84012dd2 <cancelIPC+0xde>
    0x84012dc6    0xd2    li a5,-1
    0x84012dc8    0xd4    slli a5,a5,0x27
    0x84012dca    0xd6    or a0,a0,a5
    0x84012dcc    0xd8    jal ra,ffffffff8401374e <cteDeleteOne>
    0x84012dd0    0xdc    j ffffffff84012d74 <cancelIPC+0x80>
    0x84012dd2    0xde    beqz a0,ffffffff84012d74 <cancelIPC+0x80>
    0x84012dd4    0xe0    j ffffffff84012dcc <cancelIPC+0xd8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
87 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 130 nodes.

Section create_initial_thread (248 of 271)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 818 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `create_initial_thread`:

    0x840017ca      0x0    addi sp,sp,-160
    0x840017cc      0x2    sd ra,136(sp)         ; stack access
    0x840017ce      0x4    sd s0,128(sp)         ; stack access
    0x840017d0      0x6    sd s1,120(sp)         ; stack access
    0x840017d2      0x8    sd s2,112(sp)         ; stack access
    0x840017d4      0xa    sd s3,104(sp)         ; stack access
    0x840017d6      0xc    sd s4,96(sp)          ; stack access
    0x840017d8      0xe    sd s5,88(sp)          ; stack access
    0x840017da     0x10    sd s6,80(sp)          ; stack access
    0x840017dc     0x12    sd s7,72(sp)          ; stack access
    0x840017de     0x14    sd a0,16(sp)          ; stack access
    0x840017e0     0x16    sd a1,24(sp)          ; stack access
    0x840017e2     0x18    sd a2,0(sp)           ; stack access
    0x840017e4     0x1a    sd a3,8(sp)           ; stack access
    0x840017e6     0x1c    mv s5,a4
    0x840017e8     0x1e    mv s6,a5
    0x840017ea     0x20    mv s7,a6
    0x840017ec     0x22    sd a7,152(sp)         ; stack access
    0x840017ee     0x24    auipc a5,0x1
    0x840017f2     0x28    addi a5,a5,938 # ffffffff84002b98 <ndks_boot>
    0x840017f6     0x2c    ld s0,640(a5)
    0x840017fa     0x30    addi s0,s0,512
    0x840017fe     0x34    mv s3,s0
    0x84001800     0x36    li a5,5
    0x84001802     0x38    sd a5,368(s0)
    0x84001806     0x3c    li a5,32
    0x8400180a     0x40    sd a5,256(s0)
    0x8400180e     0x44    mv s1,a0
    0x84001810     0x46    mv s4,a1
    0x84001812     0x48    srli s2,a0,0x3b
    0x84001816     0x4c    li a5,20
    0x84001818     0x4e    bltu a5,s2,ffffffff84001be8 <create_initial_thread+0x41e>
    0x8400181c     0x52    slli a4,s2,0x2
    0x84001820     0x56    auipc a3,0x16
    0x84001824     0x5a    addi a3,a3,-172 # ffffffff84017774 <ksDomScheduleLength+0x604>
    0x84001828     0x5e    add a4,a4,a3
    0x8400182a     0x60    lw a5,0(a4)
    0x8400182c     0x62    add a5,a5,a3
    0x8400182e     0x64    jr a5
    0x84001830     0x66    slli a1,a0,0x19
    0x84001834     0x6a    srli a1,a1,0x19
    0x84001836     0x6c    slli a5,a0,0x19
    0x8400183a     0x70    bgez a5,ffffffff84002058 <create_initial_thread+0x88e>
    0x8400183e     0x74    li a5,-1
    0x84001840     0x76    slli a5,a5,0x27
    0x84001842     0x78    or a1,a1,a5
    0x84001844     0x7a    ld a2,152(sp)
    0x84001846     0x7c    ld a3,160(sp)
    0x84001848     0x7e    addi a1,a1,320
    0x8400184c     0x82    addi a0,sp,40
    0x8400184e     0x84    jal ra,ffffffff84011eca <deriveCap>
    0x84001852     0x88    ld a5,40(sp)
    0x84001854     0x8a    slli a2,s1,0x19
    0x84001858     0x8e    srli a2,a2,0x19
    0x8400185a     0x90    bnez a5,ffffffff84002038 <create_initial_thread+0x86e>
    0x8400185e     0x94    li a5,-1
    0x84001860     0x96    slli a5,a5,0x27
    0x84001862     0x98    or a2,a2,a5
    0x84001864     0x9a    auipc a5,0x1
    0x84001868     0x9e    addi a5,a5,820 # ffffffff84002b98 <ndks_boot>
    0x8400186c     0xa2    ld a3,640(a5)
    0x84001870     0xa6    addi a2,a2,64
    0x84001874     0xaa    ld a0,16(sp)
    0x84001876     0xac    ld a1,24(sp)
    0x84001878     0xae    jal ra,ffffffff840113c0 <cteInsert>
    0x8400187c     0xb2    slli a2,s1,0x19
    0x84001880     0xb6    srli a2,a2,0x19
    0x84001882     0xb8    slli a5,s1,0x19
    0x84001886     0xbc    bgez a5,ffffffff84001890 <create_initial_thread+0xc6>
    0x8400188a     0xc0    li a5,-1
    0x8400188c     0xc2    slli a5,a5,0x27
    0x8400188e     0xc4    or a2,a2,a5
    0x84001890     0xc6    auipc a5,0x1
    0x84001894     0xca    addi a5,a5,776 # ffffffff84002b98 <ndks_boot>
    0x84001898     0xce    ld a3,640(a5)
    0x8400189c     0xd2    addi a3,a3,32
    0x840018a0     0xd6    addi a2,a2,96
    0x840018a4     0xda    ld a0,0(sp)
    0x840018a6     0xdc    ld a1,8(sp)
    0x840018a8     0xde    jal ra,ffffffff840113c0 <cteInsert>
    0x840018ac     0xe2    slli a2,s1,0x19
    0x840018b0     0xe6    srli a2,a2,0x19
    0x840018b2     0xe8    slli a5,s1,0x19
    0x840018b6     0xec    bgez a5,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x840018ba     0xf0    li a5,-1
    0x840018bc     0xf2    slli a5,a5,0x27
    0x840018be     0xf4    or a2,a2,a5
    0x840018c0     0xf6    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x840018c2     0xf8    slli a1,a0,0x19
    0x840018c6     0xfc    srli a1,a1,0x19
    0x840018c8     0xfe    slli a5,a0,0x19
    0x840018cc    0x102    bgez a5,ffffffff84002076 <create_initial_thread+0x8ac>
    0x840018d0    0x106    li a5,-1
    0x840018d2    0x108    slli a5,a5,0x27
    0x840018d4    0x10a    or a1,a1,a5
    0x840018d6    0x10c    ld a2,152(sp)
    0x840018d8    0x10e    ld a3,160(sp)
    0x840018da    0x110    addi a1,a1,320
    0x840018de    0x114    addi a0,sp,40
    0x840018e0    0x116    jal ra,ffffffff84011eca <deriveCap>
    0x840018e4    0x11a    ld a5,40(sp)
    0x840018e6    0x11c    slli a2,s1,0x19
    0x840018ea    0x120    srli a2,a2,0x19
    0x840018ec    0x122    bnez a5,ffffffff8400203c <create_initial_thread+0x872>
    0x840018f0    0x126    li a5,-1
    0x840018f2    0x128    slli a5,a5,0x27
    0x840018f4    0x12a    or a2,a2,a5
    0x840018f6    0x12c    auipc a5,0x1
    0x840018fa    0x130    addi a5,a5,674 # ffffffff84002b98 <ndks_boot>
    0x840018fe    0x134    ld a3,640(a5)
    0x84001902    0x138    addi a2,a2,64
    0x84001906    0x13c    ld a0,16(sp)
    0x84001908    0x13e    ld a1,24(sp)
    0x8400190a    0x140    jal ra,ffffffff840113c0 <cteInsert>
    0x8400190e    0x144    slli a2,s1,0x19
    0x84001912    0x148    srli a2,a2,0x19
    0x84001914    0x14a    slli a5,s1,0x19
    0x84001918    0x14e    bgez a5,ffffffff84001922 <create_initial_thread+0x158>
    0x8400191c    0x152    li a5,-1
    0x8400191e    0x154    slli a5,a5,0x27
    0x84001920    0x156    or a2,a2,a5
    0x84001922    0x158    auipc a5,0x1
    0x84001926    0x15c    addi a5,a5,630 # ffffffff84002b98 <ndks_boot>
    0x8400192a    0x160    ld a3,640(a5)
    0x8400192e    0x164    addi a3,a3,32
    0x84001932    0x168    addi a2,a2,96
    0x84001936    0x16c    ld a0,0(sp)
    0x84001938    0x16e    ld a1,8(sp)
    0x8400193a    0x170    jal ra,ffffffff840113c0 <cteInsert>
    0x8400193e    0x174    slli a2,s1,0x19
    0x84001942    0x178    srli a2,a2,0x19
    0x84001944    0x17a    slli a5,s1,0x19
    0x84001948    0x17e    bgez a5,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x8400194c    0x182    li a5,-1
    0x8400194e    0x184    slli a5,a5,0x27
    0x84001950    0x186    or a2,a2,a5
    0x84001952    0x188    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001954    0x18a    slli a1,a0,0x19
    0x84001958    0x18e    srli a1,a1,0x19
    0x8400195a    0x190    slli a5,a0,0x19
    0x8400195e    0x194    bgez a5,ffffffff84002094 <create_initial_thread+0x8ca>
    0x84001962    0x198    li a5,-1
    0x84001964    0x19a    slli a5,a5,0x27
    0x84001966    0x19c    or a1,a1,a5
    0x84001968    0x19e    ld a2,152(sp)
    0x8400196a    0x1a0    ld a3,160(sp)
    0x8400196c    0x1a2    addi a1,a1,320
    0x84001970    0x1a6    addi a0,sp,40
    0x84001972    0x1a8    jal ra,ffffffff84011eca <deriveCap>
    0x84001976    0x1ac    ld a5,40(sp)
    0x84001978    0x1ae    slli a2,s1,0x19
    0x8400197c    0x1b2    srli a2,a2,0x19
    0x8400197e    0x1b4    bnez a5,ffffffff84002040 <create_initial_thread+0x876>
    0x84001982    0x1b8    li a5,-1
    0x84001984    0x1ba    slli a5,a5,0x27
    0x84001986    0x1bc    or a2,a2,a5
    0x84001988    0x1be    auipc a5,0x1
    0x8400198c    0x1c2    addi a5,a5,528 # ffffffff84002b98 <ndks_boot>
    0x84001990    0x1c6    ld a3,640(a5)
    0x84001994    0x1ca    addi a2,a2,64
    0x84001998    0x1ce    ld a0,16(sp)
    0x8400199a    0x1d0    ld a1,24(sp)
    0x8400199c    0x1d2    jal ra,ffffffff840113c0 <cteInsert>
    0x840019a0    0x1d6    slli a2,s1,0x19
    0x840019a4    0x1da    srli a2,a2,0x19
    0x840019a6    0x1dc    slli a5,s1,0x19
    0x840019aa    0x1e0    bgez a5,ffffffff840019b4 <create_initial_thread+0x1ea>
    0x840019ae    0x1e4    li a5,-1
    0x840019b0    0x1e6    slli a5,a5,0x27
    0x840019b2    0x1e8    or a2,a2,a5
    0x840019b4    0x1ea    auipc a5,0x1
    0x840019b8    0x1ee    addi a5,a5,484 # ffffffff84002b98 <ndks_boot>
    0x840019bc    0x1f2    ld a3,640(a5)
    0x840019c0    0x1f6    addi a3,a3,32
    0x840019c4    0x1fa    addi a2,a2,96
    0x840019c8    0x1fe    ld a0,0(sp)
    0x840019ca    0x200    ld a1,8(sp)
    0x840019cc    0x202    jal ra,ffffffff840113c0 <cteInsert>
    0x840019d0    0x206    slli a2,s1,0x19
    0x840019d4    0x20a    srli a2,a2,0x19
    0x840019d6    0x20c    slli a5,s1,0x19
    0x840019da    0x210    bgez a5,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x840019de    0x214    li a5,-1
    0x840019e0    0x216    slli a5,a5,0x27
    0x840019e2    0x218    or a2,a2,a5
    0x840019e4    0x21a    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x840019e6    0x21c    slli a5,a0,0x1
    0x840019ea    0x220    lui a1,0xfc000
    0x840019ee    0x224    srli a1,a1,0x19
    0x840019f0    0x226    and a1,a1,a5
    0x840019f2    0x228    slli a4,a5,0x19
    0x840019f6    0x22c    bgez a4,ffffffff840020b2 <create_initial_thread+0x8e8>
    0x840019fa    0x230    li a5,-1
    0x840019fc    0x232    slli a5,a5,0x27
    0x840019fe    0x234    or a1,a1,a5
    0x84001a00    0x236    ld a2,152(sp)
    0x84001a02    0x238    ld a3,160(sp)
    0x84001a04    0x23a    addi a1,a1,320 # fffffffffc000140 <ki_end+0x77fd2140>
    0x84001a08    0x23e    addi a0,sp,40
    0x84001a0a    0x240    jal ra,ffffffff84011eca <deriveCap>
    0x84001a0e    0x244    ld a5,40(sp)
    0x84001a10    0x246    bnez a5,ffffffff84002044 <create_initial_thread+0x87a>
    0x84001a14    0x24a    slli a2,s1,0x1
    0x84001a18    0x24e    lui a5,0xfc000
    0x84001a1c    0x252    srli a5,a5,0x19
    0x84001a1e    0x254    and a2,a2,a5
    0x84001a20    0x256    li a5,-1
    0x84001a22    0x258    slli a5,a5,0x27
    0x84001a24    0x25a    or a2,a2,a5
    0x84001a26    0x25c    auipc a5,0x1
    0x84001a2a    0x260    addi a5,a5,370 # ffffffff84002b98 <ndks_boot>
    0x84001a2e    0x264    ld a3,640(a5)
    0x84001a32    0x268    addi a2,a2,64
    0x84001a36    0x26c    ld a0,16(sp)
    0x84001a38    0x26e    ld a1,24(sp)
    0x84001a3a    0x270    jal ra,ffffffff840113c0 <cteInsert>
    0x84001a3e    0x274    slli a5,s1,0x1
    0x84001a42    0x278    lui a2,0xfc000
    0x84001a46    0x27c    srli a2,a2,0x19
    0x84001a48    0x27e    and a2,a2,a5
    0x84001a4a    0x280    slli a4,a5,0x19
    0x84001a4e    0x284    bgez a4,ffffffff84001a58 <create_initial_thread+0x28e>
    0x84001a52    0x288    li a5,-1
    0x84001a54    0x28a    slli a5,a5,0x27
    0x84001a56    0x28c    or a2,a2,a5
    0x84001a58    0x28e    auipc a5,0x1
    0x84001a5c    0x292    addi a5,a5,320 # ffffffff84002b98 <ndks_boot>
    0x84001a60    0x296    ld a3,640(a5)
    0x84001a64    0x29a    addi a3,a3,32
    0x84001a68    0x29e    addi a2,a2,96 # fffffffffc000060 <ki_end+0x77fd2060>
    0x84001a6c    0x2a2    ld a0,0(sp)
    0x84001a6e    0x2a4    ld a1,8(sp)
    0x84001a70    0x2a6    jal ra,ffffffff840113c0 <cteInsert>
    0x84001a74    0x2aa    slli a5,s1,0x1
    0x84001a78    0x2ae    lui a2,0xfc000
    0x84001a7c    0x2b2    srli a2,a2,0x19
    0x84001a7e    0x2b4    and a2,a2,a5
    0x84001a80    0x2b6    slli a4,a5,0x19
    0x84001a84    0x2ba    bgez a4,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001a88    0x2be    li a5,-1
    0x84001a8a    0x2c0    slli a5,a5,0x27
    0x84001a8c    0x2c2    or a2,a2,a5
    0x84001a8e    0x2c4    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001a90    0x2c6    slli a5,a0,0x19
    0x84001a94    0x2ca    bgez a5,ffffffff840020d2 <create_initial_thread+0x908>
    0x84001a98    0x2ce    li a1,1
    0x84001a9a    0x2d0    slli a1,a1,0x27
    0x84001a9c    0x2d2    addi a1,a1,-1024
    0x84001aa0    0x2d6    and a1,a1,a0
    0x84001aa2    0x2d8    li a5,-1
    0x84001aa4    0x2da    slli a5,a5,0x27
    0x84001aa6    0x2dc    or a1,a1,a5
    0x84001aa8    0x2de    ld a2,152(sp)
    0x84001aaa    0x2e0    ld a3,160(sp)
    0x84001aac    0x2e2    addi a1,a1,320
    0x84001ab0    0x2e6    addi a0,sp,40
    0x84001ab2    0x2e8    jal ra,ffffffff84011eca <deriveCap>
    0x84001ab6    0x2ec    ld a5,40(sp)
    0x84001ab8    0x2ee    slli a2,s1,0x19
    0x84001abc    0x2f2    srli a2,a2,0x19
    0x84001abe    0x2f4    bnez a5,ffffffff84002048 <create_initial_thread+0x87e>
    0x84001ac2    0x2f8    li a5,-1
    0x84001ac4    0x2fa    slli a5,a5,0x27
    0x84001ac6    0x2fc    or a2,a2,a5
    0x84001ac8    0x2fe    andi a2,a2,-1024
    0x84001acc    0x302    auipc a5,0x1
    0x84001ad0    0x306    addi a5,a5,204 # ffffffff84002b98 <ndks_boot>
    0x84001ad4    0x30a    ld a3,640(a5)
    0x84001ad8    0x30e    addi a2,a2,64 # fffffffffc000040 <ki_end+0x77fd2040>
    0x84001adc    0x312    ld a0,16(sp)
    0x84001ade    0x314    ld a1,24(sp)
    0x84001ae0    0x316    jal ra,ffffffff840113c0 <cteInsert>
    0x84001ae4    0x31a    slli a2,s1,0x19
    0x84001ae8    0x31e    srli a2,a2,0x19
    0x84001aea    0x320    slli a5,s1,0x19
    0x84001aee    0x324    bgez a5,ffffffff84001af8 <create_initial_thread+0x32e>
    0x84001af2    0x328    li a5,-1
    0x84001af4    0x32a    slli a5,a5,0x27
    0x84001af6    0x32c    or a2,a2,a5
    0x84001af8    0x32e    auipc a5,0x1
    0x84001afc    0x332    addi a5,a5,160 # ffffffff84002b98 <ndks_boot>
    0x84001b00    0x336    ld a3,640(a5)
    0x84001b04    0x33a    andi a2,a2,-1024
    0x84001b08    0x33e    addi a3,a3,32
    0x84001b0c    0x342    addi a2,a2,96
    0x84001b10    0x346    ld a0,0(sp)
    0x84001b12    0x348    ld a1,8(sp)
    0x84001b14    0x34a    jal ra,ffffffff840113c0 <cteInsert>
    0x84001b18    0x34e    slli a2,s1,0x19
    0x84001b1c    0x352    srli a2,a2,0x19
    0x84001b1e    0x354    slli a5,s1,0x19
    0x84001b22    0x358    bgez a5,ffffffff84001b2c <create_initial_thread+0x362>
    0x84001b26    0x35c    li a5,-1
    0x84001b28    0x35e    slli a5,a5,0x27
    0x84001b2a    0x360    or a2,a2,a5
    0x84001b2c    0x362    andi a2,a2,-1024
    0x84001b30    0x366    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001b32    0x368    andi a5,a0,127
    0x84001b36    0x36c    li a4,64
    0x84001b3a    0x370    beq a5,a4,ffffffff840020fa <create_initial_thread+0x930>
    0x84001b3e    0x374    andi a1,a0,63
    0x84001b42    0x378    addiw a5,a1,1
    0x84001b46    0x37c    li a1,-1
    0x84001b48    0x37e    sll a1,a1,a5
    0x84001b4c    0x382    and a1,a1,s4
    0x84001b50    0x386    ld a2,152(sp)
    0x84001b52    0x388    ld a3,160(sp)
    0x84001b54    0x38a    addi a1,a1,320
    0x84001b58    0x38e    addi a0,sp,40
    0x84001b5a    0x390    jal ra,ffffffff84011eca <deriveCap>
    0x84001b5e    0x394    ld a5,40(sp)
    0x84001b60    0x396    bnez a5,ffffffff8400204c <create_initial_thread+0x882>
    0x84001b64    0x39a    andi a2,s1,63
    0x84001b68    0x39e    addiw a5,a2,1
    0x84001b6c    0x3a2    li a2,-1
    0x84001b6e    0x3a4    sll a2,a2,a5
    0x84001b72    0x3a8    and a2,a2,s4
    0x84001b76    0x3ac    auipc a5,0x1
    0x84001b7a    0x3b0    addi a5,a5,34 # ffffffff84002b98 <ndks_boot>
    0x84001b7e    0x3b4    ld a3,640(a5)
    0x84001b82    0x3b8    addi a2,a2,64
    0x84001b86    0x3bc    ld a0,16(sp)
    0x84001b88    0x3be    ld a1,24(sp)
    0x84001b8a    0x3c0    jal ra,ffffffff840113c0 <cteInsert>
    0x84001b8e    0x3c4    andi a5,s1,127
    0x84001b92    0x3c8    li a4,64
    0x84001b96    0x3cc    beq a5,a4,ffffffff84001d7a <create_initial_thread+0x5b0>
    0x84001b9a    0x3d0    andi a2,s1,63
    0x84001b9e    0x3d4    auipc a5,0x1
    0x84001ba2    0x3d8    addi a5,a5,-6 # ffffffff84002b98 <ndks_boot>
    0x84001ba6    0x3dc    ld a3,640(a5)
    0x84001baa    0x3e0    addiw a5,a2,1
    0x84001bae    0x3e4    li a2,-1
    0x84001bb0    0x3e6    sll a2,a2,a5
    0x84001bb4    0x3ea    and a2,a2,s4
    0x84001bb8    0x3ee    addi a3,a3,32
    0x84001bbc    0x3f2    addi a2,a2,96
    0x84001bc0    0x3f6    ld a0,0(sp)
    0x84001bc2    0x3f8    ld a1,8(sp)
    0x84001bc4    0x3fa    jal ra,ffffffff840113c0 <cteInsert>
    0x84001bc8    0x3fe    andi a5,s1,127
    0x84001bcc    0x402    li a4,64
    0x84001bd0    0x406    beq a5,a4,ffffffff84001e1a <create_initial_thread+0x650>
    0x84001bd4    0x40a    andi a2,s1,63
    0x84001bd8    0x40e    addiw a5,a2,1
    0x84001bdc    0x412    li a2,-1
    0x84001bde    0x414    sll a2,a2,a5
    0x84001be2    0x418    and a2,a2,s4
    0x84001be6    0x41c    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001be8    0x41e    li a5,3
    0x84001bea    0x420    beq s2,a5,ffffffff84001c16 <create_initial_thread+0x44c>
    0x84001bee    0x424    li a5,13
    0x84001bf0    0x426    beq s2,a5,ffffffff84001c30 <create_initial_thread+0x466>
    0x84001bf4    0x42a    li a5,1
    0x84001bf6    0x42c    li a1,0
    0x84001bf8    0x42e    bne s2,a5,ffffffff84001c4e <create_initial_thread+0x484>
    0x84001bfc    0x432    srli a5,s4,0x9
    0x84001c00    0x436    slli a1,a5,0x19
    0x84001c04    0x43a    srli a1,a1,0x19
    0x84001c06    0x43c    slli a4,a5,0x19
    0x84001c0a    0x440    bgez a4,ffffffff84001c4e <create_initial_thread+0x484>
    0x84001c0e    0x444    li a5,-1
    0x84001c10    0x446    slli a5,a5,0x27
    0x84001c12    0x448    or a1,a1,a5
    0x84001c14    0x44a    j ffffffff84001c4e <create_initial_thread+0x484>
    0x84001c16    0x44c    srli a5,s4,0x9
    0x84001c1a    0x450    slli a1,a5,0x19
    0x84001c1e    0x454    srli a1,a1,0x19
    0x84001c20    0x456    slli a4,a5,0x19
    0x84001c24    0x45a    bgez a4,ffffffff84001c4e <create_initial_thread+0x484>
    0x84001c28    0x45e    li a5,-1
    0x84001c2a    0x460    slli a5,a5,0x27
    0x84001c2c    0x462    or a1,a1,a5
    0x84001c2e    0x464    j ffffffff84001c4e <create_initial_thread+0x484>
    0x84001c30    0x466    slli a5,s1,0x2
    0x84001c34    0x46a    lui a1,0xf8000
    0x84001c38    0x46e    srli a1,a1,0x19
    0x84001c3a    0x470    and a1,a1,a5
    0x84001c3c    0x472    slli a4,a5,0x19
    0x84001c40    0x476    bgez a4,ffffffff84001c4e <create_initial_thread+0x484>
    0x84001c44    0x47a    li a5,-1
    0x84001c46    0x47c    slli a5,a5,0x27
    0x84001c48    0x47e    or a1,a1,a5
    0x84001c4a    0x480    j ffffffff84001c4e <create_initial_thread+0x484>
    0x84001c4c    0x482    li a1,0
    0x84001c4e    0x484    ld a2,152(sp)         ; stack access
    0x84001c50    0x486    ld a3,160(sp)         ; stack access
    0x84001c52    0x488    addi a1,a1,320 # fffffffff8000140 <ki_end+0x73fd2140>
    0x84001c56    0x48c    addi a0,sp,40
    0x84001c58    0x48e    jal ra,ffffffff84011eca <deriveCap>
    0x84001c5c    0x492    ld a5,40(sp)          ; stack access
    0x84001c5e    0x494    bnez a5,ffffffff84002050 <create_initial_thread+0x886>
    0x84001c62    0x498    li a5,20
    0x84001c64    0x49a    bltu a5,s2,ffffffff84001ce2 <create_initial_thread+0x518>
    0x84001c68    0x49e    slli a4,s2,0x2
    0x84001c6c    0x4a2    auipc a3,0x16
    0x84001c70    0x4a6    addi a3,a3,-1188 # ffffffff840177c8 <ksDomScheduleLength+0x658>
    0x84001c74    0x4aa    add a4,a4,a3
    0x84001c76    0x4ac    lw a5,0(a4)
    0x84001c78    0x4ae    add a5,a5,a3
    0x84001c7a    0x4b0    jr a5
    0x84001c7c    0x4b2    slli a2,s1,0x19
    0x84001c80    0x4b6    srli a2,a2,0x19
    0x84001c82    0x4b8    slli a5,s1,0x19
    0x84001c86    0x4bc    bltz a5,ffffffff8400185e <create_initial_thread+0x94>
    0x84001c8a    0x4c0    j ffffffff84001864 <create_initial_thread+0x9a>
    0x84001c8c    0x4c2    slli a2,s1,0x19
    0x84001c90    0x4c6    srli a2,a2,0x19
    0x84001c92    0x4c8    slli a5,s1,0x19
    0x84001c96    0x4cc    bltz a5,ffffffff840018f0 <create_initial_thread+0x126>
    0x84001c9a    0x4d0    j ffffffff840018f6 <create_initial_thread+0x12c>
    0x84001c9c    0x4d2    slli a2,s1,0x19
    0x84001ca0    0x4d6    srli a2,a2,0x19
    0x84001ca2    0x4d8    slli a5,s1,0x19
    0x84001ca6    0x4dc    bgez a5,ffffffff84001988 <create_initial_thread+0x1be>
    0x84001caa    0x4e0    j ffffffff84001982 <create_initial_thread+0x1b8>
    0x84001cac    0x4e2    slli a5,s1,0x1
    0x84001cb0    0x4e6    lui a2,0xfc000
    0x84001cb4    0x4ea    srli a2,a2,0x19
    0x84001cb6    0x4ec    and a2,a2,a5
    0x84001cb8    0x4ee    slli a4,a5,0x19
    0x84001cbc    0x4f2    bltz a4,ffffffff84001a20 <create_initial_thread+0x256>
    0x84001cc0    0x4f6    j ffffffff84001a26 <create_initial_thread+0x25c>
    0x84001cc2    0x4f8    slli a2,s1,0x19
    0x84001cc6    0x4fc    srli a2,a2,0x19
    0x84001cc8    0x4fe    slli a5,s1,0x19
    0x84001ccc    0x502    bltz a5,ffffffff84001ac2 <create_initial_thread+0x2f8>
    0x84001cd0    0x506    j ffffffff84001ac8 <create_initial_thread+0x2fe>
    0x84001cd2    0x508    andi a5,s1,127
    0x84001cd6    0x50c    li a4,64
    0x84001cda    0x510    bne a5,a4,ffffffff84001b64 <create_initial_thread+0x39a>
    0x84001cde    0x514    li a2,4
    0x84001ce0    0x516    j ffffffff84001b68 <create_initial_thread+0x39e>
    0x84001ce2    0x518    li a5,3
    0x84001ce4    0x51a    beq s2,a5,ffffffff84001d10 <create_initial_thread+0x546>
    0x84001ce8    0x51e    li a5,13
    0x84001cea    0x520    beq s2,a5,ffffffff84001d2a <create_initial_thread+0x560>
    0x84001cee    0x524    li a5,1
    0x84001cf0    0x526    li a2,0
    0x84001cf2    0x528    bne s2,a5,ffffffff84001d48 <create_initial_thread+0x57e>
    0x84001cf6    0x52c    srli a5,s4,0x9
    0x84001cfa    0x530    slli a2,a5,0x19
    0x84001cfe    0x534    srli a2,a2,0x19
    0x84001d00    0x536    slli a4,a5,0x19
    0x84001d04    0x53a    bgez a4,ffffffff84001d48 <create_initial_thread+0x57e>
    0x84001d08    0x53e    li a5,-1
    0x84001d0a    0x540    slli a5,a5,0x27
    0x84001d0c    0x542    or a2,a2,a5
    0x84001d0e    0x544    j ffffffff84001d48 <create_initial_thread+0x57e>
    0x84001d10    0x546    srli a5,s4,0x9
    0x84001d14    0x54a    slli a2,a5,0x19
    0x84001d18    0x54e    srli a2,a2,0x19
    0x84001d1a    0x550    slli a4,a5,0x19
    0x84001d1e    0x554    bgez a4,ffffffff84001d48 <create_initial_thread+0x57e>
    0x84001d22    0x558    li a5,-1
    0x84001d24    0x55a    slli a5,a5,0x27
    0x84001d26    0x55c    or a2,a2,a5
    0x84001d28    0x55e    j ffffffff84001d48 <create_initial_thread+0x57e>
    0x84001d2a    0x560    slli a5,s1,0x2
    0x84001d2e    0x564    lui a2,0xf8000
    0x84001d32    0x568    srli a2,a2,0x19
    0x84001d34    0x56a    and a2,a2,a5
    0x84001d36    0x56c    slli a4,a5,0x19
    0x84001d3a    0x570    bgez a4,ffffffff84001d48 <create_initial_thread+0x57e>
    0x84001d3e    0x574    li a5,-1
    0x84001d40    0x576    slli a5,a5,0x27
    0x84001d42    0x578    or a2,a2,a5
    0x84001d44    0x57a    j ffffffff84001d48 <create_initial_thread+0x57e>
    0x84001d46    0x57c    li a2,0
    0x84001d48    0x57e    auipc a5,0x1
    0x84001d4c    0x582    addi a5,a5,-432 # ffffffff84002b98 <ndks_boot>
    0x84001d50    0x586    ld a3,640(a5)
    0x84001d54    0x58a    addi a2,a2,64 # fffffffff8000040 <ki_end+0x73fd2040>
    0x84001d58    0x58e    ld a0,16(sp)          ; stack access
    0x84001d5a    0x590    ld a1,24(sp)          ; stack access
    0x84001d5c    0x592    jal ra,ffffffff840113c0 <cteInsert>
    0x84001d60    0x596    li a5,20
    0x84001d62    0x598    bltu a5,s2,ffffffff84001d7e <create_initial_thread+0x5b4>
    0x84001d66    0x59c    slli a4,s2,0x2
    0x84001d6a    0x5a0    auipc a3,0x16
    0x84001d6e    0x5a4    addi a3,a3,-1358 # ffffffff8401781c <ksDomScheduleLength+0x6ac>
    0x84001d72    0x5a8    add a4,a4,a3
    0x84001d74    0x5aa    lw a5,0(a4)
    0x84001d76    0x5ac    add a5,a5,a3
    0x84001d78    0x5ae    jr a5
    0x84001d7a    0x5b0    li a2,4
    0x84001d7c    0x5b2    j ffffffff84001b9e <create_initial_thread+0x3d4>
    0x84001d7e    0x5b4    li a5,3
    0x84001d80    0x5b6    beq s2,a5,ffffffff84001dac <create_initial_thread+0x5e2>
    0x84001d84    0x5ba    li a5,13
    0x84001d86    0x5bc    beq s2,a5,ffffffff84001dc6 <create_initial_thread+0x5fc>
    0x84001d8a    0x5c0    li a5,1
    0x84001d8c    0x5c2    li a2,0
    0x84001d8e    0x5c4    bne s2,a5,ffffffff84001de4 <create_initial_thread+0x61a>
    0x84001d92    0x5c8    srli a5,s4,0x9
    0x84001d96    0x5cc    slli a2,a5,0x19
    0x84001d9a    0x5d0    srli a2,a2,0x19
    0x84001d9c    0x5d2    slli a4,a5,0x19
    0x84001da0    0x5d6    bgez a4,ffffffff84001de4 <create_initial_thread+0x61a>
    0x84001da4    0x5da    li a5,-1
    0x84001da6    0x5dc    slli a5,a5,0x27
    0x84001da8    0x5de    or a2,a2,a5
    0x84001daa    0x5e0    j ffffffff84001de4 <create_initial_thread+0x61a>
    0x84001dac    0x5e2    srli a5,s4,0x9
    0x84001db0    0x5e6    slli a2,a5,0x19
    0x84001db4    0x5ea    srli a2,a2,0x19
    0x84001db6    0x5ec    slli a4,a5,0x19
    0x84001dba    0x5f0    bgez a4,ffffffff84001de4 <create_initial_thread+0x61a>
    0x84001dbe    0x5f4    li a5,-1
    0x84001dc0    0x5f6    slli a5,a5,0x27
    0x84001dc2    0x5f8    or a2,a2,a5
    0x84001dc4    0x5fa    j ffffffff84001de4 <create_initial_thread+0x61a>
    0x84001dc6    0x5fc    slli a5,s1,0x2
    0x84001dca    0x600    lui a2,0xf8000
    0x84001dce    0x604    srli a2,a2,0x19
    0x84001dd0    0x606    and a2,a2,a5
    0x84001dd2    0x608    slli a4,a5,0x19
    0x84001dd6    0x60c    bgez a4,ffffffff84001de4 <create_initial_thread+0x61a>
    0x84001dda    0x610    li a5,-1
    0x84001ddc    0x612    slli a5,a5,0x27
    0x84001dde    0x614    or a2,a2,a5
    0x84001de0    0x616    j ffffffff84001de4 <create_initial_thread+0x61a>
    0x84001de2    0x618    li a2,0
    0x84001de4    0x61a    auipc a5,0x1
    0x84001de8    0x61e    addi a5,a5,-588 # ffffffff84002b98 <ndks_boot>
    0x84001dec    0x622    ld a3,640(a5)
    0x84001df0    0x626    addi a3,a3,32
    0x84001df4    0x62a    addi a2,a2,96 # fffffffff8000060 <ki_end+0x73fd2060>
    0x84001df8    0x62e    ld a0,0(sp)           ; stack access
    0x84001dfa    0x630    ld a1,8(sp)           ; stack access
    0x84001dfc    0x632    jal ra,ffffffff840113c0 <cteInsert>
    0x84001e00    0x636    li a5,20
    0x84001e02    0x638    bltu a5,s2,ffffffff84001e1e <create_initial_thread+0x654>
    0x84001e06    0x63c    slli a4,s2,0x2
    0x84001e0a    0x640    auipc a3,0x16
    0x84001e0e    0x644    addi a3,a3,-1434 # ffffffff84017870 <ksDomScheduleLength+0x700>
    0x84001e12    0x648    add a4,a4,a3
    0x84001e14    0x64a    lw a5,0(a4)
    0x84001e16    0x64c    add a5,a5,a3
    0x84001e18    0x64e    jr a5
    0x84001e1a    0x650    li a2,4
    0x84001e1c    0x652    j ffffffff84001bd8 <create_initial_thread+0x40e>
    0x84001e1e    0x654    li a5,3
    0x84001e20    0x656    beq s2,a5,ffffffff84001e4c <create_initial_thread+0x682>
    0x84001e24    0x65a    li a5,13
    0x84001e26    0x65c    beq s2,a5,ffffffff84001e66 <create_initial_thread+0x69c>
    0x84001e2a    0x660    li a5,1
    0x84001e2c    0x662    li a2,0
    0x84001e2e    0x664    bne s2,a5,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001e32    0x668    srli a5,s4,0x9
    0x84001e36    0x66c    slli a2,a5,0x19
    0x84001e3a    0x670    srli a2,a2,0x19
    0x84001e3c    0x672    slli a4,a5,0x19
    0x84001e40    0x676    bgez a4,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001e44    0x67a    li a5,-1
    0x84001e46    0x67c    slli a5,a5,0x27
    0x84001e48    0x67e    or a2,a2,a5
    0x84001e4a    0x680    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001e4c    0x682    srli a5,s4,0x9
    0x84001e50    0x686    slli a2,a5,0x19
    0x84001e54    0x68a    srli a2,a2,0x19
    0x84001e56    0x68c    slli a4,a5,0x19
    0x84001e5a    0x690    bgez a4,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001e5e    0x694    li a5,-1
    0x84001e60    0x696    slli a5,a5,0x27
    0x84001e62    0x698    or a2,a2,a5
    0x84001e64    0x69a    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001e66    0x69c    slli a5,s1,0x2
    0x84001e6a    0x6a0    lui a2,0xf8000
    0x84001e6e    0x6a4    srli a2,a2,0x19
    0x84001e70    0x6a6    and a2,a2,a5
    0x84001e72    0x6a8    slli a4,a5,0x19
    0x84001e76    0x6ac    bgez a4,ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001e7a    0x6b0    li a5,-1
    0x84001e7c    0x6b2    slli a5,a5,0x27
    0x84001e7e    0x6b4    or a2,a2,a5
    0x84001e80    0x6b6    j ffffffff84001e84 <create_initial_thread+0x6ba>
    0x84001e82    0x6b8    li a2,0
    0x84001e84    0x6ba    auipc a5,0x1
    0x84001e88    0x6be    addi a5,a5,-748 # ffffffff84002b98 <ndks_boot>
    0x84001e8c    0x6c2    ld a3,640(a5)
    0x84001e90    0x6c6    addi a3,a3,128
    0x84001e94    0x6ca    addi a2,a2,320 # fffffffff8000140 <ki_end+0x73fd2140>
    0x84001e98    0x6ce    ld a0,48(sp)          ; stack access
    0x84001e9a    0x6d0    ld a1,56(sp)          ; stack access
    0x84001e9c    0x6d2    jal ra,ffffffff840113c0 <cteInsert>
    0x84001ea0    0x6d6    sd s7,384(s0)
    0x84001ea4    0x6da    sd s6,72(s0)
    0x84001ea8    0x6de    sd s5,272(s0)
    0x84001eac    0x6e2    li a5,255
    0x84001eb0    0x6e6    sd a5,360(s0)
    0x84001eb4    0x6ea    sd a5,352(s0)
    0x84001eb8    0x6ee    mv a0,s0
    0x84001eba    0x6f0    jal ra,ffffffff84011708 <setupReplyMaster>
    0x84001ebe    0x6f4    li a1,1
    0x84001ec0    0x6f6    mv a0,s0
    0x84001ec2    0x6f8    jal ra,ffffffff84012404 <setThreadState>
    0x84001ec6    0x6fc    auipc a5,0x2c
    0x84001eca    0x700    addi a5,a5,-1574 # ffffffff8402d8a0 <ksDomScheduleIdx>
    0x84001ece    0x704    ld a5,0(a5)
    0x84001ed0    0x706    slli a4,a5,0x4
    0x84001ed4    0x70a    auipc a5,0x16
    0x84001ed8    0x70e    addi a5,a5,-924 # ffffffff84017b38 <fault_messages>
    0x84001edc    0x712    add a5,a5,a4
    0x84001ede    0x714    ld a4,192(a5)
    0x84001ee0    0x716    auipc a3,0x2b
    0x84001ee4    0x71a    sd a4,1824(a3) # ffffffff8402d600 <ksCurDomain>
    0x84001ee8    0x71e    ld a5,200(a5)
    0x84001eea    0x720    auipc a4,0x2b
    0x84001eee    0x724    sd a5,1606(a4) # ffffffff8402d530 <ksDomainTime>
    0x84001ef2    0x728    slli s0,s0,0x19
    0x84001ef4    0x72a    srli s0,s0,0x19
    0x84001ef6    0x72c    li a5,3
    0x84001ef8    0x72e    slli a5,a5,0x3d
    0x84001efa    0x730    or s0,s0,a5
    0x84001efc    0x732    li a5,20
    0x84001efe    0x734    bltu a5,s2,ffffffff84001fae <create_initial_thread+0x7e4>
    0x84001f02    0x738    slli a4,s2,0x2
    0x84001f06    0x73c    auipc a3,0x16
    0x84001f0a    0x740    addi a3,a3,-1602 # ffffffff840178c4 <ksDomScheduleLength+0x754>
    0x84001f0e    0x744    add a4,a4,a3
    0x84001f10    0x746    lw a5,0(a4)
    0x84001f12    0x748    add a5,a5,a3
    0x84001f14    0x74a    jr a5
    0x84001f16    0x74c    slli a5,s1,0x19
    0x84001f1a    0x750    srli a5,a5,0x19
    0x84001f1c    0x752    slli a4,s1,0x19
    0x84001f20    0x756    bgez a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84001f24    0x75a    li a4,-1
    0x84001f26    0x75c    slli a4,a4,0x27
    0x84001f28    0x75e    or a5,a5,a4
    0x84001f2a    0x760    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001f2c    0x762    slli a5,s1,0x19
    0x84001f30    0x766    srli a5,a5,0x19
    0x84001f32    0x768    slli a4,s1,0x19
    0x84001f36    0x76c    bgez a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84001f3a    0x770    li a4,-1
    0x84001f3c    0x772    slli a4,a4,0x27
    0x84001f3e    0x774    or a5,a5,a4
    0x84001f40    0x776    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001f42    0x778    slli a5,s1,0x19
    0x84001f46    0x77c    srli a5,a5,0x19
    0x84001f48    0x77e    slli a4,s1,0x19
    0x84001f4c    0x782    bgez a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84001f50    0x786    li a4,-1
    0x84001f52    0x788    slli a4,a4,0x27
    0x84001f54    0x78a    or a5,a5,a4
    0x84001f56    0x78c    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001f58    0x78e    slli s1,s1,0x1
    0x84001f5a    0x790    lui a5,0xfc000
    0x84001f5e    0x794    srli a5,a5,0x19
    0x84001f60    0x796    and a5,a5,s1
    0x84001f62    0x798    slli a4,s1,0x19
    0x84001f66    0x79c    bgez a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84001f6a    0x7a0    li a4,-1
    0x84001f6c    0x7a2    slli a4,a4,0x27
    0x84001f6e    0x7a4    or a5,a5,a4
    0x84001f70    0x7a6    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001f72    0x7a8    slli a5,s1,0x19
    0x84001f76    0x7ac    srli a5,a5,0x19
    0x84001f78    0x7ae    slli a4,s1,0x19
    0x84001f7c    0x7b2    bgez a4,ffffffff84001f86 <create_initial_thread+0x7bc>
    0x84001f80    0x7b6    li a4,-1
    0x84001f82    0x7b8    slli a4,a4,0x27
    0x84001f84    0x7ba    or a5,a5,a4
    0x84001f86    0x7bc    andi a5,a5,-1024
    0x84001f8a    0x7c0    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001f8c    0x7c2    andi a5,s1,127
    0x84001f90    0x7c6    li a4,64
    0x84001f94    0x7ca    beq a5,a4,ffffffff84001faa <create_initial_thread+0x7e0>
    0x84001f98    0x7ce    andi s1,s1,63
    0x84001f9c    0x7d2    addiw s1,s1,1
    0x84001f9e    0x7d4    li a5,-1
    0x84001fa0    0x7d6    sll a5,a5,s1
    0x84001fa4    0x7da    and a5,a5,s4
    0x84001fa8    0x7de    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001faa    0x7e0    li s1,4
    0x84001fac    0x7e2    j ffffffff84001f9c <create_initial_thread+0x7d2>
    0x84001fae    0x7e4    li a5,3
    0x84001fb0    0x7e6    beq s2,a5,ffffffff84001fdc <create_initial_thread+0x812>
    0x84001fb4    0x7ea    li a5,13
    0x84001fb6    0x7ec    beq s2,a5,ffffffff84001ff6 <create_initial_thread+0x82c>
    0x84001fba    0x7f0    li a4,1
    0x84001fbc    0x7f2    li a5,0
    0x84001fbe    0x7f4    bne s2,a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84001fc2    0x7f8    srli s4,s4,0x9
    0x84001fc6    0x7fc    slli a5,s4,0x19
    0x84001fca    0x800    srli a5,a5,0x19
    0x84001fcc    0x802    slli a4,s4,0x19
    0x84001fd0    0x806    bgez a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84001fd4    0x80a    li a4,-1
    0x84001fd6    0x80c    slli a4,a4,0x27
    0x84001fd8    0x80e    or a5,a5,a4
    0x84001fda    0x810    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001fdc    0x812    srli s4,s4,0x9
    0x84001fe0    0x816    slli a5,s4,0x19
    0x84001fe4    0x81a    srli a5,a5,0x19
    0x84001fe6    0x81c    slli a4,s4,0x19
    0x84001fea    0x820    bgez a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84001fee    0x824    li a4,-1
    0x84001ff0    0x826    slli a4,a4,0x27
    0x84001ff2    0x828    or a5,a5,a4
    0x84001ff4    0x82a    j ffffffff84002012 <create_initial_thread+0x848>
    0x84001ff6    0x82c    slli s1,s1,0x2
    0x84001ff8    0x82e    lui a5,0xf8000
    0x84001ffc    0x832    srli a5,a5,0x19
    0x84001ffe    0x834    and a5,a5,s1
    0x84002000    0x836    slli a4,s1,0x19
    0x84002004    0x83a    bgez a4,ffffffff84002012 <create_initial_thread+0x848>
    0x84002008    0x83e    li a4,-1
    0x8400200a    0x840    slli a4,a4,0x27
    0x8400200c    0x842    or a5,a5,a4
    0x8400200e    0x844    j ffffffff84002012 <create_initial_thread+0x848>
    0x84002010    0x846    li a5,0
    0x84002012    0x848    sd s0,32(a5)
    0x84002014    0x84a    sd zero,40(a5) # fffffffff8000028 <ki_end+0x73fd2028>
    0x84002018    0x84e    sd zero,48(a5)
    0x8400201c    0x852    li a4,3
    0x8400201e    0x854    sd a4,56(a5)
    0x84002020    0x856    mv a0,s3
    0x84002022    0x858    ld ra,136(sp)         ; stack access
    0x84002024    0x85a    ld s0,128(sp)         ; stack access
    0x84002026    0x85c    ld s1,120(sp)         ; stack access
    0x84002028    0x85e    ld s2,112(sp)         ; stack access
    0x8400202a    0x860    ld s3,104(sp)         ; stack access
    0x8400202c    0x862    ld s4,96(sp)          ; stack access
    0x8400202e    0x864    ld s5,88(sp)          ; stack access
    0x84002030    0x866    ld s6,80(sp)          ; stack access
    0x84002032    0x868    ld s7,72(sp)          ; stack access
    0x84002034    0x86a    addi sp,sp,160
    0x84002036    0x86c    ret
    0x84002038    0x86e    li s3,0
    0x8400203a    0x870    j ffffffff84002020 <create_initial_thread+0x856>
    0x8400203c    0x872    li s3,0
    0x8400203e    0x874    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002040    0x876    li s3,0
    0x84002042    0x878    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002044    0x87a    li s3,0
    0x84002046    0x87c    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002048    0x87e    li s3,0
    0x8400204a    0x880    j ffffffff84002020 <create_initial_thread+0x856>
    0x8400204c    0x882    li s3,0
    0x8400204e    0x884    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002050    0x886    li s3,0
    0x84002052    0x888    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002054    0x88a    li s3,0
    0x84002056    0x88c    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002058    0x88e    ld a2,152(sp)
    0x8400205a    0x890    ld a3,160(sp)
    0x8400205c    0x892    addi a1,a1,320
    0x84002060    0x896    addi a0,sp,40
    0x84002062    0x898    jal ra,ffffffff84011eca <deriveCap>
    0x84002066    0x89c    ld a5,40(sp)
    0x84002068    0x89e    slli a2,s1,0x19
    0x8400206c    0x8a2    srli a2,a2,0x19
    0x8400206e    0x8a4    beqz a5,ffffffff84001864 <create_initial_thread+0x9a>
    0x84002072    0x8a8    li s3,0
    0x84002074    0x8aa    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002076    0x8ac    ld a2,152(sp)
    0x84002078    0x8ae    ld a3,160(sp)
    0x8400207a    0x8b0    addi a1,a1,320
    0x8400207e    0x8b4    addi a0,sp,40
    0x84002080    0x8b6    jal ra,ffffffff84011eca <deriveCap>
    0x84002084    0x8ba    ld a5,40(sp)
    0x84002086    0x8bc    slli a2,s1,0x19
    0x8400208a    0x8c0    srli a2,a2,0x19
    0x8400208c    0x8c2    beqz a5,ffffffff840018f6 <create_initial_thread+0x12c>
    0x84002090    0x8c6    li s3,0
    0x84002092    0x8c8    j ffffffff84002020 <create_initial_thread+0x856>
    0x84002094    0x8ca    ld a2,152(sp)
    0x84002096    0x8cc    ld a3,160(sp)
    0x84002098    0x8ce    addi a1,a1,320
    0x8400209c    0x8d2    addi a0,sp,40
    0x8400209e    0x8d4    jal ra,ffffffff84011eca <deriveCap>
    0x840020a2    0x8d8    ld a5,40(sp)
    0x840020a4    0x8da    slli a2,s1,0x19
    0x840020a8    0x8de    srli a2,a2,0x19
    0x840020aa    0x8e0    beqz a5,ffffffff84001988 <create_initial_thread+0x1be>
    0x840020ae    0x8e4    li s3,0
    0x840020b0    0x8e6    j ffffffff84002020 <create_initial_thread+0x856>
    0x840020b2    0x8e8    ld a2,152(sp)
    0x840020b4    0x8ea    ld a3,160(sp)
    0x840020b6    0x8ec    addi a1,a1,320
    0x840020ba    0x8f0    addi a0,sp,40
    0x840020bc    0x8f2    jal ra,ffffffff84011eca <deriveCap>
    0x840020c0    0x8f6    ld a5,40(sp)
    0x840020c2    0x8f8    bnez a5,ffffffff84002054 <create_initial_thread+0x88a>
    0x840020c4    0x8fa    slli a2,s1,0x1
    0x840020c8    0x8fe    lui a5,0xfc000
    0x840020cc    0x902    srli a5,a5,0x19
    0x840020ce    0x904    and a2,a2,a5
    0x840020d0    0x906    j ffffffff84001a26 <create_initial_thread+0x25c>
    0x840020d2    0x908    li a1,1
    0x840020d4    0x90a    slli a1,a1,0x27
    0x840020d6    0x90c    addi a1,a1,-1024
    0x840020da    0x910    and a1,a1,a0
    0x840020dc    0x912    ld a2,152(sp)
    0x840020de    0x914    ld a3,160(sp)
    0x840020e0    0x916    addi a1,a1,320
    0x840020e4    0x91a    addi a0,sp,40
    0x840020e6    0x91c    jal ra,ffffffff84011eca <deriveCap>
    0x840020ea    0x920    ld a5,40(sp)
    0x840020ec    0x922    slli a2,s1,0x19
    0x840020f0    0x926    srli a2,a2,0x19
    0x840020f2    0x928    beqz a5,ffffffff84001ac8 <create_initial_thread+0x2fe>
    0x840020f6    0x92c    li s3,0
    0x840020f8    0x92e    j ffffffff84002020 <create_initial_thread+0x856>
    0x840020fa    0x930    andi a1,a1,-32
    0x840020fc    0x932    ld a2,152(sp)
    0x840020fe    0x934    ld a3,160(sp)
    0x84002100    0x936    addi a1,a1,320
    0x84002104    0x93a    addi a0,sp,40
    0x84002106    0x93c    jal ra,ffffffff84011eca <deriveCap>
    0x8400210a    0x940    ld a5,40(sp)
    0x8400210c    0x942    li a2,4
    0x8400210e    0x944    beqz a5,ffffffff84001b68 <create_initial_thread+0x39e>
    0x84002112    0x948    li s3,0
    0x84002114    0x94a    j ffffffff84002020 <create_initial_thread+0x856>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
818 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 1139 nodes.

Section invokeTCB_ThreadControl (249 of 271)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControl` consists of 131 instructions.


Stack analysis
---------------

31 stack accesses found. Annotated code for `invokeTCB_ThreadControl`:

    0x840146b6      0x0    addi sp,sp,-96
    0x840146b8      0x2    sd ra,88(sp)          ; stack access
    0x840146ba      0x4    sd s0,80(sp)          ; stack access
    0x840146bc      0x6    sd s1,72(sp)          ; stack access
    0x840146be      0x8    sd s2,64(sp)          ; stack access
    0x840146c0      0xa    sd s3,56(sp)          ; stack access
    0x840146c2      0xc    sd s4,48(sp)          ; stack access
    0x840146c4      0xe    sd s5,40(sp)          ; stack access
    0x840146c6     0x10    mv s1,a0
    0x840146c8     0x12    mv s3,a1
    0x840146ca     0x14    mv s4,a4
    0x840146cc     0x16    sd a5,0(sp)           ; stack access
    0x840146ce     0x18    sd a6,8(sp)           ; stack access
    0x840146d0     0x1a    mv s5,a7
    0x840146d2     0x1c    ld s0,152(sp)         ; stack access
    0x840146d4     0x1e    slli a5,a0,0x19
    0x840146d8     0x22    srli a5,a5,0x19
    0x840146da     0x24    li a4,3
    0x840146dc     0x26    slli a4,a4,0x3d
    0x840146de     0x28    or a5,a5,a4
    0x840146e0     0x2a    sd a5,16(sp)          ; stack access
    0x840146e2     0x2c    sd zero,24(sp)        ; stack access
    0x840146e4     0x2e    andi a5,s0,4
    0x840146e8     0x32    beqz a5,ffffffff840147e8 <invokeTCB_ThreadControl+0x132>
    0x840146ec     0x36    sd a2,376(a0)
    0x840146f0     0x3a    andi a4,s0,8
    0x840146f4     0x3e    bnez a4,ffffffff84014768 <invokeTCB_ThreadControl+0xb2>
    0x840146f6     0x40    andi s2,s1,-1024
    0x840146fa     0x44    li a1,1
    0x840146fc     0x46    mv a0,s2
    0x840146fe     0x48    jal ra,ffffffff840131cc <cteDelete>
    0x84014702     0x4c    bnez a0,ffffffff840147fa <invokeTCB_ThreadControl+0x144>
    0x84014706     0x50    ld a2,0(s5)
    0x8401470a     0x54    ld a3,8(s5)
    0x8401470e     0x58    ld a0,0(sp)           ; stack access
    0x84014710     0x5a    ld a1,8(sp)           ; stack access
    0x84014712     0x5c    jal ra,ffffffff84011f4c <sameObjectAs>
    0x84014716     0x60    beqz a0,ffffffff8401472a <invokeTCB_ThreadControl+0x74>
    0x84014718     0x62    ld a2,0(s3)
    0x8401471c     0x66    ld a3,8(s3)
    0x84014720     0x6a    ld a0,16(sp)          ; stack access
    0x84014722     0x6c    ld a1,24(sp)          ; stack access
    0x84014724     0x6e    jal ra,ffffffff84011f4c <sameObjectAs>
    0x84014728     0x72    bnez a0,ffffffff84014770 <invokeTCB_ThreadControl+0xba>
    0x8401472a     0x74    addi s2,s2,32
    0x8401472e     0x78    li a1,1
    0x84014730     0x7a    mv a0,s2
    0x84014732     0x7c    jal ra,ffffffff840131cc <cteDelete>
    0x84014736     0x80    bnez a0,ffffffff840147fa <invokeTCB_ThreadControl+0x144>
    0x84014738     0x82    ld a5,112(sp)         ; stack access
    0x8401473a     0x84    ld a2,0(a5)
    0x8401473c     0x86    ld a3,8(a5)
    0x8401473e     0x88    ld a0,96(sp)          ; stack access
    0x84014740     0x8a    ld a1,104(sp)         ; stack access
    0x84014742     0x8c    jal ra,ffffffff84011f4c <sameObjectAs>
    0x84014746     0x90    beqz a0,ffffffff840147ee <invokeTCB_ThreadControl+0x138>
    0x84014748     0x92    ld a2,0(s3)
    0x8401474c     0x96    ld a3,8(s3)
    0x84014750     0x9a    ld a0,16(sp)          ; stack access
    0x84014752     0x9c    ld a1,24(sp)          ; stack access
    0x84014754     0x9e    jal ra,ffffffff84011f4c <sameObjectAs>
    0x84014758     0xa2    beqz a0,ffffffff840147ee <invokeTCB_ThreadControl+0x138>
    0x8401475a     0xa4    mv a3,s2
    0x8401475c     0xa6    ld a2,112(sp)         ; stack access
    0x8401475e     0xa8    ld a0,96(sp)          ; stack access
    0x84014760     0xaa    ld a1,104(sp)         ; stack access
    0x84014762     0xac    jal ra,ffffffff840113c0 <cteInsert>
    0x84014766     0xb0    j ffffffff840147ee <invokeTCB_ThreadControl+0x138>
    0x84014768     0xb2    sd a3,352(s1)
    0x8401476c     0xb6    beqz a5,ffffffff840147ee <invokeTCB_ThreadControl+0x138>
    0x8401476e     0xb8    j ffffffff840146f6 <invokeTCB_ThreadControl+0x40>
    0x84014770     0xba    mv a3,s2
    0x84014772     0xbc    mv a2,s5
    0x84014774     0xbe    ld a0,0(sp)
    0x84014776     0xc0    ld a1,8(sp)
    0x84014778     0xc2    jal ra,ffffffff840113c0 <cteInsert>
    0x8401477c     0xc6    j ffffffff8401472a <invokeTCB_ThreadControl+0x74>
    0x8401477e     0xc8    andi s2,s1,-1024
    0x84014782     0xcc    addi s2,s2,128
    0x84014786     0xd0    li a1,1
    0x84014788     0xd2    mv a0,s2
    0x8401478a     0xd4    jal ra,ffffffff840131cc <cteDelete>
    0x8401478e     0xd8    bnez a0,ffffffff840147fa <invokeTCB_ThreadControl+0x144>
    0x84014790     0xda    ld a5,120(sp)
    0x84014792     0xdc    sd a5,384(s1)
    0x84014796     0xe0    ld a5,144(sp)
    0x84014798     0xe2    beqz a5,ffffffff840147ba <invokeTCB_ThreadControl+0x104>
    0x8401479a     0xe4    ld a2,0(a5)
    0x8401479c     0xe6    ld a3,8(a5)
    0x8401479e     0xe8    ld a0,128(sp)
    0x840147a0     0xea    ld a1,136(sp)
    0x840147a2     0xec    jal ra,ffffffff84011f4c <sameObjectAs>
    0x840147a6     0xf0    beqz a0,ffffffff840147ba <invokeTCB_ThreadControl+0x104>
    0x840147a8     0xf2    ld a2,0(s3)
    0x840147ac     0xf6    ld a3,8(s3)
    0x840147b0     0xfa    ld a0,16(sp)
    0x840147b2     0xfc    ld a1,24(sp)
    0x840147b4     0xfe    jal ra,ffffffff84011f4c <sameObjectAs>
    0x840147b8    0x102    bnez a0,ffffffff840147ce <invokeTCB_ThreadControl+0x118>
    0x840147ba    0x104    auipc a5,0x19
    0x840147be    0x108    addi a5,a5,222 # ffffffff8402d898 <ksCurThread>
    0x840147c2    0x10c    ld a5,0(a5)
    0x840147c4    0x10e    bne a5,s1,ffffffff840147f4 <invokeTCB_ThreadControl+0x13e>
    0x840147c8    0x112    jal ra,ffffffff84012398 <rescheduleRequired>
    0x840147cc    0x116    j ffffffff840147f4 <invokeTCB_ThreadControl+0x13e>
    0x840147ce    0x118    mv a3,s2
    0x840147d0    0x11a    ld a2,144(sp)
    0x840147d2    0x11c    ld a0,128(sp)
    0x840147d4    0x11e    ld a1,136(sp)
    0x840147d6    0x120    jal ra,ffffffff840113c0 <cteInsert>
    0x840147da    0x124    j ffffffff840147ba <invokeTCB_ThreadControl+0x104>
    0x840147dc    0x126    mv a1,s4
    0x840147de    0x128    mv a0,s1
    0x840147e0    0x12a    jal ra,ffffffff84012ad4 <setPriority>
    0x840147e4    0x12e    li a0,0
    0x840147e6    0x130    j ffffffff840147fa <invokeTCB_ThreadControl+0x144>
    0x840147e8    0x132    andi a4,s0,8
    0x840147ec    0x136    bnez a4,ffffffff84014768 <invokeTCB_ThreadControl+0xb2>
    0x840147ee    0x138    andi a5,s0,2
    0x840147f2    0x13c    bnez a5,ffffffff8401477e <invokeTCB_ThreadControl+0xc8>
    0x840147f4    0x13e    andi a0,s0,1
    0x840147f8    0x142    bnez a0,ffffffff840147dc <invokeTCB_ThreadControl+0x126>
    0x840147fa    0x144    ld ra,88(sp)          ; stack access
    0x840147fc    0x146    ld s0,80(sp)          ; stack access
    0x840147fe    0x148    ld s1,72(sp)          ; stack access
    0x84014800    0x14a    ld s2,64(sp)          ; stack access
    0x84014802    0x14c    ld s3,56(sp)          ; stack access
    0x84014804    0x14e    ld s4,48(sp)          ; stack access
    0x84014806    0x150    ld s5,40(sp)          ; stack access
    0x84014808    0x152    addi sp,sp,96
    0x8401480a    0x154    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
131 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControl` has 238 nodes.

Section handleRecv (250 of 271)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 132 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `handleRecv`:

    0x8401446e      0x0    addi sp,sp,-64
    0x84014470      0x2    sd ra,56(sp)          ; stack access
    0x84014472      0x4    sd s0,48(sp)          ; stack access
    0x84014474      0x6    sd s1,40(sp)          ; stack access
    0x84014476      0x8    mv s1,a0
    0x84014478      0xa    auipc a5,0x19
    0x8401447c      0xe    addi a5,a5,1056 # ffffffff8402d898 <ksCurThread>
    0x84014480     0x12    ld a1,0(a5)
    0x84014482     0x14    ld s0,72(a1)
    0x84014484     0x16    mv a2,s0
    0x84014486     0x18    addi a0,sp,8
    0x84014488     0x1a    jal ra,ffffffff8401118e <lookupCap>
    0x8401448c     0x1e    ld a5,8(sp)           ; stack access
    0x8401448e     0x20    bnez a5,ffffffff840144dc <handleRecv+0x6e>
    0x84014490     0x22    ld a5,16(sp)          ; stack access
    0x84014492     0x24    srli a4,a5,0x3b
    0x84014496     0x28    li a3,4
    0x84014498     0x2a    beq a4,a3,ffffffff840144fe <handleRecv+0x90>
    0x8401449c     0x2e    li a3,6
    0x8401449e     0x30    beq a4,a3,ffffffff84014554 <handleRecv+0xe6>
    0x840144a2     0x34    auipc a5,0x9
    0x840144a6     0x38    addi a5,a5,14 # ffffffff8401d4b0 <current_lookup_fault>
    0x840144aa     0x3c    li a4,1
    0x840144ac     0x3e    sd a4,0(a5)
    0x840144ae     0x40    sd zero,8(a5)
    0x840144b2     0x44    auipc a4,0x8
    0x840144b6     0x48    addi a4,a4,-1074 # ffffffff8401c080 <current_fault>
    0x840144ba     0x4c    li a5,-1
    0x840144bc     0x4e    slli a5,a5,0x3f
    0x840144be     0x50    addi a5,a5,1
    0x840144c0     0x52    sd a5,0(a4)
    0x840144c2     0x54    sd s0,8(a4)
    0x840144c4     0x56    auipc a5,0x19
    0x840144c8     0x5a    addi a5,a5,980 # ffffffff8402d898 <ksCurThread>
    0x840144cc     0x5e    ld a0,0(a5)
    0x840144ce     0x60    jal ra,ffffffff840141a4 <handleFault>
    0x840144d2     0x64    ld ra,56(sp)          ; stack access
    0x840144d4     0x66    ld s0,48(sp)          ; stack access
    0x840144d6     0x68    ld s1,40(sp)          ; stack access
    0x840144d8     0x6a    addi sp,sp,64
    0x840144da     0x6c    ret
    0x840144dc     0x6e    auipc a4,0x8
    0x840144e0     0x72    addi a4,a4,-1116 # ffffffff8401c080 <current_fault>
    0x840144e4     0x76    li a5,-1
    0x840144e6     0x78    slli a5,a5,0x3f
    0x840144e8     0x7a    addi a5,a5,1
    0x840144ea     0x7c    sd a5,0(a4)
    0x840144ec     0x7e    sd s0,8(a4)
    0x840144ee     0x80    auipc a5,0x19
    0x840144f2     0x84    addi a5,a5,938 # ffffffff8402d898 <ksCurThread>
    0x840144f6     0x88    ld a0,0(a5)
    0x840144f8     0x8a    jal ra,ffffffff840141a4 <handleFault>
    0x840144fc     0x8e    j ffffffff840144d2 <handleRecv+0x64>
    0x840144fe     0x90    slli a4,a5,0x7
    0x84014502     0x94    bgez a4,ffffffff84014522 <handleRecv+0xb4>
    0x84014506     0x98    auipc s0,0x19
    0x8401450a     0x9c    addi s0,s0,914 # ffffffff8402d898 <ksCurThread>
    0x8401450e     0xa0    ld a0,0(s0)
    0x84014510     0xa2    jal ra,ffffffff84013b5e <deleteCallerCap>
    0x84014514     0xa6    mv a3,s1
    0x84014516     0xa8    ld a1,16(sp)          ; stack access
    0x84014518     0xaa    ld a2,24(sp)          ; stack access
    0x8401451a     0xac    ld a0,0(s0)
    0x8401451c     0xae    jal ra,ffffffff840142c8 <receiveIPC>
    0x84014520     0xb2    j ffffffff840144d2 <handleRecv+0x64>
    0x84014522     0xb4    auipc a5,0x9
    0x84014526     0xb8    addi a5,a5,-114 # ffffffff8401d4b0 <current_lookup_fault>
    0x8401452a     0xbc    li a4,1
    0x8401452c     0xbe    sd a4,0(a5)
    0x8401452e     0xc0    sd zero,8(a5)
    0x84014532     0xc4    auipc a4,0x8
    0x84014536     0xc8    addi a4,a4,-1202 # ffffffff8401c080 <current_fault>
    0x8401453a     0xcc    li a5,-1
    0x8401453c     0xce    slli a5,a5,0x3f
    0x8401453e     0xd0    addi a5,a5,1
    0x84014540     0xd2    sd a5,0(a4)
    0x84014542     0xd4    sd s0,8(a4)
    0x84014544     0xd6    auipc a5,0x19
    0x84014548     0xda    addi a5,a5,852 # ffffffff8402d898 <ksCurThread>
    0x8401454c     0xde    ld a0,0(a5)
    0x8401454e     0xe0    jal ra,ffffffff840141a4 <handleFault>
    0x84014552     0xe4    j ffffffff840144d2 <handleRecv+0x64>
    0x84014554     0xe6    slli a4,a5,0x19
    0x84014558     0xea    srli a4,a4,0x19
    0x8401455a     0xec    slli a3,a5,0x19
    0x8401455e     0xf0    bgez a3,ffffffff84014568 <handleRecv+0xfa>
    0x84014562     0xf4    li a3,-1
    0x84014564     0xf6    slli a3,a3,0x27
    0x84014566     0xf8    or a4,a4,a3
    0x84014568     0xfa    ld a3,24(a4)
    0x8401456a     0xfc    slli a4,a3,0x19
    0x8401456e    0x100    srli a4,a4,0x19
    0x84014570    0x102    slli a2,a3,0x19
    0x84014574    0x106    bgez a2,ffffffff840145c8 <handleRecv+0x15a>
    0x84014578    0x10a    slli a3,a5,0x5
    0x8401457c    0x10e    bltz a3,ffffffff840145b2 <handleRecv+0x144>
    0x84014580    0x112    auipc a5,0x9
    0x84014584    0x116    addi a5,a5,-208 # ffffffff8401d4b0 <current_lookup_fault>
    0x84014588    0x11a    li a4,1
    0x8401458a    0x11c    sd a4,0(a5)
    0x8401458c    0x11e    sd zero,8(a5)
    0x84014590    0x122    auipc a4,0x8
    0x84014594    0x126    addi a4,a4,-1296 # ffffffff8401c080 <current_fault>
    0x84014598    0x12a    li a5,-1
    0x8401459a    0x12c    slli a5,a5,0x3f
    0x8401459c    0x12e    addi a5,a5,1
    0x8401459e    0x130    sd a5,0(a4)
    0x840145a0    0x132    sd s0,8(a4)
    0x840145a2    0x134    auipc a5,0x19
    0x840145a6    0x138    addi a5,a5,758 # ffffffff8402d898 <ksCurThread>
    0x840145aa    0x13c    ld a0,0(a5)
    0x840145ac    0x13e    jal ra,ffffffff840141a4 <handleFault>
    0x840145b0    0x142    j ffffffff840144d2 <handleRecv+0x64>
    0x840145b2    0x144    li a5,-1
    0x840145b4    0x146    slli a5,a5,0x27
    0x840145b6    0x148    or a4,a4,a5
    0x840145b8    0x14a    auipc a5,0x19
    0x840145bc    0x14e    addi a5,a5,736 # ffffffff8402d898 <ksCurThread>
    0x840145c0    0x152    ld a5,0(a5)
    0x840145c2    0x154    beq a4,a5,ffffffff840145d2 <handleRecv+0x164>
    0x840145c6    0x158    j ffffffff84014580 <handleRecv+0x112>
    0x840145c8    0x15a    slli a3,a5,0x5
    0x840145cc    0x15e    bgez a3,ffffffff84014580 <handleRecv+0x112>
    0x840145d0    0x162    bnez a4,ffffffff840145b8 <handleRecv+0x14a>
    0x840145d2    0x164    mv a3,s1
    0x840145d4    0x166    ld a1,16(sp)          ; stack access
    0x840145d6    0x168    ld a2,24(sp)          ; stack access
    0x840145d8    0x16a    auipc a5,0x19
    0x840145dc    0x16e    addi a5,a5,704 # ffffffff8402d898 <ksCurThread>
    0x840145e0    0x172    ld a0,0(a5)
    0x840145e2    0x174    jal ra,ffffffff840124d4 <receiveSignal>
    0x840145e6    0x178    j ffffffff840144d2 <handleRecv+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
132 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 198 nodes.

Section doReplyTransfer (251 of 271)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 46 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `doReplyTransfer`:

    0x84013e74     0x0    addi sp,sp,-32
    0x84013e76     0x2    sd ra,24(sp)          ; stack access
    0x84013e78     0x4    sd s0,16(sp)          ; stack access
    0x84013e7a     0x6    sd s1,8(sp)           ; stack access
    0x84013e7c     0x8    sd s2,0(sp)           ; stack access
    0x84013e7e     0xa    mv s1,a0
    0x84013e80     0xc    mv s0,a1
    0x84013e82     0xe    mv s2,a2
    0x84013e84    0x10    ld a5,312(a1)
    0x84013e88    0x14    andi a5,a5,15
    0x84013e8a    0x16    bnez a5,ffffffff84013eb6 <doReplyTransfer+0x42>
    0x84013e8c    0x18    mv a4,a1
    0x84013e8e    0x1a    li a2,0
    0x84013e90    0x1c    li a1,0
    0x84013e92    0x1e    jal ra,ffffffff84013e0e <doIPCTransfer>
    0x84013e96    0x22    mv a0,s2
    0x84013e98    0x24    jal ra,ffffffff8401374e <cteDeleteOne>
    0x84013e9c    0x28    li a1,1
    0x84013e9e    0x2a    mv a0,s0
    0x84013ea0    0x2c    jal ra,ffffffff84012404 <setThreadState>
    0x84013ea4    0x30    mv a0,s0
    0x84013ea6    0x32    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x84013eaa    0x36    ld ra,24(sp)          ; stack access
    0x84013eac    0x38    ld s0,16(sp)          ; stack access
    0x84013eae    0x3a    ld s1,8(sp)           ; stack access
    0x84013eb0    0x3c    ld s2,0(sp)           ; stack access
    0x84013eb2    0x3e    addi sp,sp,32
    0x84013eb4    0x40    ret
    0x84013eb6    0x42    mv a0,a2
    0x84013eb8    0x44    jal ra,ffffffff8401374e <cteDeleteOne>
    0x84013ebc    0x48    mv a1,s1
    0x84013ebe    0x4a    mv a0,s0
    0x84013ec0    0x4c    jal ra,ffffffff840104d4 <handleFaultReply>
    0x84013ec4    0x50    sd zero,312(s0)
    0x84013ec8    0x54    sd zero,320(s0)
    0x84013ecc    0x58    beqz a0,ffffffff84013ede <doReplyTransfer+0x6a>
    0x84013ece    0x5a    li a1,2
    0x84013ed0    0x5c    mv a0,s0
    0x84013ed2    0x5e    jal ra,ffffffff84012404 <setThreadState>
    0x84013ed6    0x62    mv a0,s0
    0x84013ed8    0x64    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x84013edc    0x68    j ffffffff84013eaa <doReplyTransfer+0x36>
    0x84013ede    0x6a    li a1,0
    0x84013ee0    0x6c    mv a0,s0
    0x84013ee2    0x6e    jal ra,ffffffff84012404 <setThreadState>
    0x84013ee6    0x72    j ffffffff84013eaa <doReplyTransfer+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 71 nodes.

Section doNormalTransfer (252 of 271)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 156 instructions.

RVC_FTTTFT________FT.
SLLW.....

Stack analysis
---------------

30 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84013c76      0x0    addi sp,sp,-192
    0x84013c78      0x2    sd ra,184(sp)         ; stack access
    0x84013c7a      0x4    sd s0,176(sp)         ; stack access
    0x84013c7c      0x6    sd s1,168(sp)         ; stack access
    0x84013c7e      0x8    sd s2,160(sp)         ; stack access
    0x84013c80      0xa    sd s3,152(sp)         ; stack access
    0x84013c82      0xc    sd s4,144(sp)         ; stack access
    0x84013c84      0xe    sd s5,136(sp)         ; stack access
    0x84013c86     0x10    sd s6,128(sp)         ; stack access
    0x84013c88     0x12    sd s7,120(sp)         ; stack access
    0x84013c8a     0x14    sd s8,112(sp)         ; stack access
    0x84013c8c     0x16    sd s9,104(sp)         ; stack access
    0x84013c8e     0x18    sd s10,96(sp)         ; stack access
    0x84013c90     0x1a    sd s11,88(sp)         ; stack access
    0x84013c92     0x1c    mv s2,a0
    0x84013c94     0x1e    mv s8,a1
    0x84013c96     0x20    mv s6,a2
    0x84013c98     0x22    mv s4,a3
    0x84013c9a     0x24    mv s1,a5
    0x84013c9c     0x26    mv s3,a6
    0x84013c9e     0x28    ld s0,80(a0)
    0x84013ca0     0x2a    andi a3,s0,127
    0x84013ca4     0x2e    li a5,120
    0x84013ca8     0x32    bgeu a5,a3,ffffffff84013cb4 <doNormalTransfer+0x3e>
    0x84013cac     0x36    andi s0,s0,-128
    0x84013cb0     0x3a    ori s0,s0,120
    0x84013cb4     0x3e    bnez a4,ffffffff84013d00 <doNormalTransfer+0x8a>
    0x84013cb6     0x40    andi a4,s0,127
    0x84013cba     0x44    mv a3,s3
    0x84013cbc     0x46    mv a2,s1
    0x84013cbe     0x48    mv a1,s8
    0x84013cc0     0x4a    mv a0,s2
    0x84013cc2     0x4c    jal ra,ffffffff84013c08 <copyMRs>
    0x84013cc6     0x50    mv s2,a0
    0x84013cc8     0x52    lui a5,0xfffff
    0x84013cca     0x54    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfd107f>
    0x84013cce     0x58    and s0,s0,a5
    0x84013cd0     0x5a    andi s0,s0,-128
    0x84013cd4     0x5e    andi s2,s2,127
    0x84013cd8     0x62    or s0,s0,s2
    0x84013cdc     0x66    sd s0,80(s1)
    0x84013cde     0x68    sd s4,72(s1)
    0x84013ce2     0x6c    ld ra,184(sp)         ; stack access
    0x84013ce4     0x6e    ld s0,176(sp)         ; stack access
    0x84013ce6     0x70    ld s1,168(sp)         ; stack access
    0x84013ce8     0x72    ld s2,160(sp)         ; stack access
    0x84013cea     0x74    ld s3,152(sp)         ; stack access
    0x84013cec     0x76    ld s4,144(sp)         ; stack access
    0x84013cee     0x78    ld s5,136(sp)         ; stack access
    0x84013cf0     0x7a    ld s6,128(sp)         ; stack access
    0x84013cf2     0x7c    ld s7,120(sp)         ; stack access
    0x84013cf4     0x7e    ld s8,112(sp)         ; stack access
    0x84013cf6     0x80    ld s9,104(sp)         ; stack access
    0x84013cf8     0x82    ld s10,96(sp)         ; stack access
    0x84013cfa     0x84    ld s11,88(sp)         ; stack access
    0x84013cfc     0x86    addi sp,sp,192
    0x84013cfe     0x88    ret
    0x84013d00     0x8a    mv a2,s0
    0x84013d02     0x8c    mv a1,s8
    0x84013d04     0x8e    mv a0,s2
    0x84013d06     0x90    jal ra,ffffffff84013b74 <lookupExtraCaps>
    0x84013d0a     0x94    mv s7,a0
    0x84013d0c     0x96    auipc a5,0x9
    0x84013d10     0x9a    addi a5,a5,2036 # ffffffff8401d500 <current_extra_caps>
    0x84013d14     0x9e    ld s5,0(a5)
    0x84013d18     0xa2    ld s9,8(a5)
    0x84013d1c     0xa6    ld s10,16(a5)
    0x84013d20     0xaa    bnez a0,ffffffff84013cb6 <doNormalTransfer+0x40>
    0x84013d22     0xac    andi a4,s0,127
    0x84013d26     0xb0    mv a3,s3
    0x84013d28     0xb2    mv a2,s1
    0x84013d2a     0xb4    mv a1,s8
    0x84013d2c     0xb6    mv a0,s2
    0x84013d2e     0xb8    jal ra,ffffffff84013c08 <copyMRs>
    0x84013d32     0xbc    mv s2,a0
    0x84013d34     0xbe    sd s5,32(sp)
    0x84013d36     0xc0    sd s9,40(sp)
    0x84013d38     0xc2    sd s10,48(sp)         ; stack access
    0x84013d3a     0xc4    lui a5,0xfffff
    0x84013d3c     0xc6    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfd107f>
    0x84013d40     0xca    and s0,s0,a5
    0x84013d42     0xcc    beqz s5,ffffffff84013cd0 <doNormalTransfer+0x5a>
    0x84013d46     0xd0    beqz s3,ffffffff84013cd0 <doNormalTransfer+0x5a>
    0x84013d4a     0xd4    mv a1,s3
    0x84013d4c     0xd6    mv a0,s1
    0x84013d4e     0xd8    jal ra,ffffffff8401173c <getReceiveSlots>
    0x84013d52     0xdc    mv s8,a0
    0x84013d54     0xde    li s10,-1
    0x84013d56     0xe0    srli s11,s10,0x19
    0x84013d5a     0xe4    li s9,1
    0x84013d5c     0xe6    slli s9,s9,0x26
    0x84013d5e     0xe8    lui a5,0x1
    0x84013d60     0xea    addi a5,a5,-512 # e00 <KERNEL_OFFSET-0xfffffffefffff200>
    0x84013d64     0xee    sd a5,0(sp)           ; stack access
    0x84013d66     0xf0    lui a5,0xfffff
    0x84013d68     0xf2    addi a5,a5,511 # fffffffffffff1ff <ki_end+0x7bfd11ff>
    0x84013d6c     0xf6    sd a5,8(sp)           ; stack access
    0x84013d6e     0xf8    j ffffffff84013db4 <doNormalTransfer+0x13e>
    0x84013d70     0xfa    beq s6,a5,ffffffff84013ddc <doNormalTransfer+0x166>
    0x84013d74     0xfe    beqz s8,ffffffff84013e02 <doNormalTransfer+0x18c>
    0x84013d78    0x102    sd a2,16(sp)
    0x84013d7a    0x104    sd a3,24(sp)
    0x84013d7c    0x106    mv a1,s5
    0x84013d7e    0x108    addi a0,sp,56
    0x84013d80    0x10a    jal ra,ffffffff84011eca <deriveCap>
    0x84013d84    0x10e    ld a5,56(sp)
    0x84013d86    0x110    bnez a5,ffffffff84013e02 <doNormalTransfer+0x18c>
    0x84013d88    0x112    ld a5,64(sp)
    0x84013d8a    0x114    srli a5,a5,0x3b
    0x84013d8c    0x116    beqz a5,ffffffff84013e02 <doNormalTransfer+0x18c>
    0x84013d8e    0x118    mv a3,s8
    0x84013d90    0x11a    mv a2,s5
    0x84013d92    0x11c    ld a0,64(sp)
    0x84013d94    0x11e    ld a1,72(sp)
    0x84013d96    0x120    jal ra,ffffffff840113c0 <cteInsert>
    0x84013d9a    0x124    li s8,0
    0x84013d9c    0x126    addi s7,s7,1
    0x84013d9e    0x128    li a5,3
    0x84013da0    0x12a    beq s7,a5,ffffffff84013e02 <doNormalTransfer+0x18c>
    0x84013da4    0x12e    slli a5,s7,0x3
    0x84013da8    0x132    addi a4,sp,80
    0x84013daa    0x134    add a5,a5,a4
    0x84013dac    0x136    ld s5,-48(a5)
    0x84013db0    0x13a    beqz s5,ffffffff84013e02 <doNormalTransfer+0x18c>
    0x84013db4    0x13e    ld a2,0(s5)
    0x84013db8    0x142    sd a2,16(sp)
    0x84013dba    0x144    ld a3,8(s5)
    0x84013dbe    0x148    sd a3,24(sp)
    0x84013dc0    0x14a    srli a4,a2,0x3b
    0x84013dc4    0x14e    li a5,4
    0x84013dc6    0x150    bne a4,a5,ffffffff84013d74 <doNormalTransfer+0xfe>
    0x84013dca    0x154    and a5,a2,s11
    0x84013dce    0x158    and a4,a2,s9
    0x84013dd2    0x15c    beqz a4,ffffffff84013d70 <doNormalTransfer+0xfa>
    0x84013dd4    0x15e    slli a4,s10,0x27
    0x84013dd8    0x162    or a5,a5,a4
    0x84013dda    0x164    j ffffffff84013d70 <doNormalTransfer+0xfa>
    0x84013ddc    0x166    slli a5,s7,0x3
    0x84013de0    0x16a    add a5,a5,s3
    0x84013de2    0x16c    sd a3,976(a5)
    0x84013de6    0x170    srli a5,s0,0x9
    0x84013dea    0x174    andi a5,a5,7
    0x84013dec    0x176    li a4,1
    0x84013dee    0x178    sllw a4,a4,s7
    0x84013df2    0x17c    or a5,a5,a4
    0x84013df4    0x17e    slli a5,a5,0x9
    0x84013df6    0x180    ld a4,0(sp)
    0x84013df8    0x182    and a5,a5,a4
    0x84013dfa    0x184    ld a4,8(sp)           ; stack access
    0x84013dfc    0x186    and s0,s0,a4
    0x84013dfe    0x188    or s0,s0,a5
    0x84013e00    0x18a    j ffffffff84013d9c <doNormalTransfer+0x126>
    0x84013e02    0x18c    slli a5,s7,0x7
    0x84013e06    0x190    andi a5,a5,384
    0x84013e0a    0x194    or s0,s0,a5
    0x84013e0c    0x196    j ffffffff84013cd0 <doNormalTransfer+0x5a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
156 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 240 nodes.

Section restart (253 of 271)
============================

Deriving specifications
-----------------------

Section `restart` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `restart`:

    0x840138c0     0x0    ld a5,280(a0)
    0x840138c4     0x4    andi a5,a5,15
    0x840138c6     0x6    beqz a5,ffffffff840138d2 <restart+0x12>
    0x840138c8     0x8    addi a5,a5,-3
    0x840138ca     0xa    li a4,3
    0x840138cc     0xc    bgeu a4,a5,ffffffff840138d2 <restart+0x12>
    0x840138d0    0x10    ret
    0x840138d2    0x12    addi sp,sp,-16
    0x840138d4    0x14    sd ra,8(sp)           ; stack access
    0x840138d6    0x16    sd s0,0(sp)           ; stack access
    0x840138d8    0x18    mv s0,a0
    0x840138da    0x1a    jal ra,ffffffff84012cf4 <cancelIPC>
    0x840138de    0x1e    mv a0,s0
    0x840138e0    0x20    jal ra,ffffffff84011708 <setupReplyMaster>
    0x840138e4    0x24    li a1,2
    0x840138e6    0x26    mv a0,s0
    0x840138e8    0x28    jal ra,ffffffff84012404 <setThreadState>
    0x840138ec    0x2c    mv a0,s0
    0x840138ee    0x2e    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x840138f2    0x32    mv a0,s0
    0x840138f4    0x34    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x840138f8    0x38    ld ra,8(sp)           ; stack access
    0x840138fa    0x3a    ld s0,0(sp)           ; stack access
    0x840138fc    0x3c    addi sp,sp,16
    0x840138fe    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 41 nodes.

Section cancelBadgedSends (254 of 271)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 87 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x84012b70     0x0    addi sp,sp,-80
    0x84012b72     0x2    sd ra,72(sp)          ; stack access
    0x84012b74     0x4    sd s0,64(sp)          ; stack access
    0x84012b76     0x6    sd s1,56(sp)          ; stack access
    0x84012b78     0x8    sd s2,48(sp)          ; stack access
    0x84012b7a     0xa    sd s3,40(sp)          ; stack access
    0x84012b7c     0xc    sd s4,32(sp)          ; stack access
    0x84012b7e     0xe    sd s5,24(sp)          ; stack access
    0x84012b80    0x10    ld a5,0(a0)
    0x84012b82    0x12    andi a4,a5,3
    0x84012b86    0x16    li a3,1
    0x84012b88    0x18    beq a4,a3,ffffffff84012ba6 <cancelBadgedSends+0x36>
    0x84012b8c    0x1c    beqz a4,ffffffff84012b94 <cancelBadgedSends+0x24>
    0x84012b8e    0x1e    li a5,2
    0x84012b90    0x20    bne a4,a5,ffffffff84012c58 <cancelBadgedSends+0xe8>
    0x84012b94    0x24    ld ra,72(sp)          ; stack access
    0x84012b96    0x26    ld s0,64(sp)          ; stack access
    0x84012b98    0x28    ld s1,56(sp)          ; stack access
    0x84012b9a    0x2a    ld s2,48(sp)          ; stack access
    0x84012b9c    0x2c    ld s3,40(sp)          ; stack access
    0x84012b9e    0x2e    ld s4,32(sp)          ; stack access
    0x84012ba0    0x30    ld s5,24(sp)          ; stack access
    0x84012ba2    0x32    addi sp,sp,80
    0x84012ba4    0x34    ret
    0x84012ba6    0x36    mv s5,a0
    0x84012ba8    0x38    mv s4,a1
    0x84012baa    0x3a    ld s2,8(a0)
    0x84012bae    0x3e    mv s0,s2
    0x84012bb0    0x40    lui a4,0xf8000
    0x84012bb4    0x44    srli a4,a4,0x19
    0x84012bb6    0x46    and a4,a4,a5
    0x84012bb8    0x48    slli a3,a5,0x19
    0x84012bbc    0x4c    bgez a3,ffffffff84012bc6 <cancelBadgedSends+0x56>
    0x84012bc0    0x50    li a3,-1
    0x84012bc2    0x52    slli a3,a3,0x27
    0x84012bc4    0x54    or a4,a4,a3
    0x84012bc6    0x56    mv s3,a4
    0x84012bc8    0x58    sd zero,8(s5)
    0x84012bcc    0x5c    srli a5,a5,0x27
    0x84012bce    0x5e    slli a5,a5,0x27
    0x84012bd0    0x60    sd a5,0(s5)
    0x84012bd4    0x64    bnez s2,ffffffff84012c10 <cancelBadgedSends+0xa0>
    0x84012bd8    0x68    sd zero,8(s5)
    0x84012bdc    0x6c    lui a3,0xf8000
    0x84012be0    0x70    srli a3,a3,0x19
    0x84012be2    0x72    and a4,a4,a3
    0x84012be4    0x74    or a5,a5,a4
    0x84012be6    0x76    sd a5,0(s5)
    0x84012bea    0x7a    j ffffffff84012c4c <cancelBadgedSends+0xdc>
    0x84012bec    0x7c    li a1,2
    0x84012bee    0x7e    mv a0,s0
    0x84012bf0    0x80    jal ra,ffffffff84012404 <setThreadState>
    0x84012bf4    0x84    mv a0,s0
    0x84012bf6    0x86    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x84012bfa    0x8a    mv a1,s2
    0x84012bfc    0x8c    mv a2,s3
    0x84012bfe    0x8e    mv a0,s0
    0x84012c00    0x90    jal ra,ffffffff84012b3a <tcbEPDequeue>
    0x84012c04    0x94    sd a0,0(sp)
    0x84012c06    0x96    sd a1,8(sp)
    0x84012c08    0x98    mv s2,a0
    0x84012c0a    0x9a    mv s3,a1
    0x84012c0c    0x9c    mv s0,s1
    0x84012c0e    0x9e    beqz s1,ffffffff84012c1e <cancelBadgedSends+0xae>
    0x84012c10    0xa0    ld s1,408(s0)
    0x84012c14    0xa4    ld a5,296(s0)
    0x84012c18    0xa8    bne s4,a5,ffffffff84012c0c <cancelBadgedSends+0x9c>
    0x84012c1c    0xac    j ffffffff84012bec <cancelBadgedSends+0x7c>
    0x84012c1e    0xae    sd s2,8(s5)
    0x84012c22    0xb2    ld a5,0(s5)
    0x84012c26    0xb6    li a4,-1
    0x84012c28    0xb8    slli a4,a4,0x27
    0x84012c2a    0xba    addi a4,a4,3
    0x84012c2c    0xbc    and a5,a5,a4
    0x84012c2e    0xbe    lui a1,0xf8000
    0x84012c32    0xc2    srli a1,a1,0x19
    0x84012c34    0xc4    and s3,s3,a1
    0x84012c38    0xc8    or s3,a5,s3
    0x84012c3c    0xcc    beqz s2,ffffffff84012c52 <cancelBadgedSends+0xe2>
    0x84012c40    0xd0    andi s3,s3,-4
    0x84012c44    0xd4    ori s3,s3,1
    0x84012c48    0xd8    sd s3,0(s5)
    0x84012c4c    0xdc    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84012c50    0xe0    j ffffffff84012b94 <cancelBadgedSends+0x24>
    0x84012c52    0xe2    sd s3,0(s5)
    0x84012c56    0xe6    j ffffffff84012c4c <cancelBadgedSends+0xdc>
    0x84012c58    0xe8    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
87 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 137 nodes.

Section schedule (255 of 271)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 101 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedule`:

    0x84012956      0x0    auipc a5,0xb
    0x8401295a      0x4    addi a5,a5,-1174 # ffffffff8401d4c0 <ksSchedulerAction>
    0x8401295e      0x8    ld a5,0(a5)
    0x84012960      0xa    beqz a5,ffffffff84012a82 <schedule+0x12c>
    0x84012964      0xe    addi sp,sp,-48
    0x84012966     0x10    sd ra,40(sp)          ; stack access
    0x84012968     0x12    sd s0,32(sp)          ; stack access
    0x8401296a     0x14    sd s1,24(sp)          ; stack access
    0x8401296c     0x16    sd s2,16(sp)          ; stack access
    0x8401296e     0x18    sd s3,8(sp)           ; stack access
    0x84012970     0x1a    sd s4,0(sp)           ; stack access
    0x84012972     0x1c    auipc a5,0x1b
    0x84012976     0x20    addi a5,a5,-218 # ffffffff8402d898 <ksCurThread>
    0x8401297a     0x24    ld a0,0(a5)
    0x8401297c     0x26    ld a5,280(a0)
    0x84012980     0x2a    andi a5,a5,15
    0x84012982     0x2c    addi a5,a5,-1
    0x84012984     0x2e    li a4,1
    0x84012986     0x30    li s4,0
    0x84012988     0x32    bgeu a4,a5,ffffffff84012a30 <schedule+0xda>
    0x8401298c     0x36    auipc a5,0xb
    0x84012990     0x3a    addi a5,a5,-1228 # ffffffff8401d4c0 <ksSchedulerAction>
    0x84012994     0x3e    ld s0,0(a5)
    0x84012996     0x40    li a5,1
    0x84012998     0x42    beq s0,a5,ffffffff84012a38 <schedule+0xe2>
    0x8401299c     0x46    auipc a5,0x1b
    0x840129a0     0x4a    addi a5,a5,-260 # ffffffff8402d898 <ksCurThread>
    0x840129a4     0x4e    ld s2,0(a5)
    0x840129a8     0x52    auipc a5,0xb
    0x840129ac     0x56    addi a5,a5,-1280 # ffffffff8401d4a8 <ksIdleThread>
    0x840129b0     0x5a    ld a5,0(a5)
    0x840129b2     0x5c    beq s2,a5,ffffffff840129c2 <schedule+0x6c>
    0x840129b6     0x60    ld a4,360(s0)
    0x840129ba     0x64    ld a5,360(s2)
    0x840129be     0x68    bgeu a4,a5,ffffffff84012a3e <schedule+0xe8>
    0x840129c2     0x6c    auipc a5,0x1b
    0x840129c6     0x70    addi a5,a5,-962 # ffffffff8402d600 <ksCurDomain>
    0x840129ca     0x74    ld s1,0(a5)
    0x840129cc     0x76    slli a4,s1,0x3
    0x840129d0     0x7a    auipc a5,0x1b
    0x840129d4     0x7e    addi a5,a5,-440 # ffffffff8402d818 <ksReadyQueuesL1Bitmap>
    0x840129d8     0x82    add a5,a5,a4
    0x840129da     0x84    ld a0,0(a5)
    0x840129dc     0x86    beqz a0,ffffffff84012a3e <schedule+0xe8>
    0x840129de     0x88    jal ra,ffffffff8401712c <__clzdi2>
    0x840129e2     0x8c    sext.w s3,a0
    0x840129e6     0x90    slli s1,s1,0x2
    0x840129e8     0x92    addi a5,s3,-60 # 1fc4 <KERNEL_OFFSET-0xfffffffeffffe03c>
    0x840129ec     0x96    add s1,s1,a5
    0x840129ee     0x98    slli s1,s1,0x3
    0x840129f0     0x9a    auipc a5,0x1b
    0x840129f4     0x9e    addi a5,a5,-992 # ffffffff8402d610 <ksReadyQueuesL2Bitmap>
    0x840129f8     0xa2    add s1,s1,a5
    0x840129fa     0xa4    ld a0,0(s1)
    0x840129fc     0xa6    jal ra,ffffffff8401712c <__clzdi2>
    0x84012a00     0xaa    sext.w a0,a0
    0x84012a02     0xac    li a5,63
    0x84012a06     0xb0    sub s3,a5,s3
    0x84012a0a     0xb4    slli s3,s3,0x6
    0x84012a0c     0xb6    sub a5,a5,a0
    0x84012a0e     0xb8    or s3,s3,a5
    0x84012a12     0xbc    ld a5,360(s0)
    0x84012a16     0xc0    bgeu a5,s3,ffffffff84012a3e <schedule+0xe8>
    0x84012a1a     0xc4    mv a0,s0
    0x84012a1c     0xc6    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x84012a20     0xca    li a5,1
    0x84012a22     0xcc    auipc a4,0xb
    0x84012a26     0xd0    sd a5,-1378(a4) # ffffffff8401d4c0 <ksSchedulerAction>
    0x84012a2a     0xd4    jal ra,ffffffff840128e2 <scheduleChooseNewThread>
    0x84012a2e     0xd8    j ffffffff84012a54 <schedule+0xfe>
    0x84012a30     0xda    jal ra,ffffffff8401230a <tcbSchedEnqueue>
    0x84012a34     0xde    li s4,1
    0x84012a36     0xe0    j ffffffff8401298c <schedule+0x36>
    0x84012a38     0xe2    jal ra,ffffffff840128e2 <scheduleChooseNewThread>
    0x84012a3c     0xe6    j ffffffff84012a54 <schedule+0xfe>
    0x84012a3e     0xe8    beqz s4,ffffffff84012a4e <schedule+0xf8>
    0x84012a42     0xec    ld a4,360(s0)
    0x84012a46     0xf0    ld a5,360(s2)
    0x84012a4a     0xf4    beq a4,a5,ffffffff84012a6c <schedule+0x116>
    0x84012a4e     0xf8    mv a0,s0
    0x84012a50     0xfa    jal ra,ffffffff84012842 <switchToThread>
    0x84012a54     0xfe    auipc a5,0xb
    0x84012a58    0x102    sd zero,-1428(a5) # ffffffff8401d4c0 <ksSchedulerAction>
    0x84012a5c    0x106    ld ra,40(sp)          ; stack access
    0x84012a5e    0x108    ld s0,32(sp)          ; stack access
    0x84012a60    0x10a    ld s1,24(sp)          ; stack access
    0x84012a62    0x10c    ld s2,16(sp)          ; stack access
    0x84012a64    0x10e    ld s3,8(sp)           ; stack access
    0x84012a66    0x110    ld s4,0(sp)           ; stack access
    0x84012a68    0x112    addi sp,sp,48
    0x84012a6a    0x114    ret
    0x84012a6c    0x116    mv a0,s0
    0x84012a6e    0x118    jal ra,ffffffff840126aa <tcbSchedAppend>
    0x84012a72    0x11c    li a5,1
    0x84012a74    0x11e    auipc a4,0xb
    0x84012a78    0x122    sd a5,-1460(a4) # ffffffff8401d4c0 <ksSchedulerAction>
    0x84012a7c    0x126    jal ra,ffffffff840128e2 <scheduleChooseNewThread>
    0x84012a80    0x12a    j ffffffff84012a54 <schedule+0xfe>
    0x84012a82    0x12c    auipc a5,0xb
    0x84012a86    0x130    sd zero,-1474(a5) # ffffffff8401d4c0 <ksSchedulerAction>
    0x84012a8a    0x134    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 160 nodes.

Section Arch_finaliseCap (256 of 271)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 98 instructions.


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84010c40      0x0    addi sp,sp,-80
    0x84010c42      0x2    sd ra,72(sp)          ; stack access
    0x84010c44      0x4    sd s0,64(sp)          ; stack access
    0x84010c46      0x6    sd s1,56(sp)          ; stack access
    0x84010c48      0x8    sd s2,48(sp)          ; stack access
    0x84010c4a      0xa    sd s3,40(sp)          ; stack access
    0x84010c4c      0xc    mv s0,a0
    0x84010c4e      0xe    mv s2,a2
    0x84010c50     0x10    mv s1,a1
    0x84010c52     0x12    srli a5,a1,0x3b
    0x84010c56     0x16    li a4,3
    0x84010c58     0x18    beq a5,a4,ffffffff84010cc6 <Arch_finaliseCap+0x86>
    0x84010c5c     0x1c    li a4,13
    0x84010c5e     0x1e    beq a5,a4,ffffffff84010d26 <Arch_finaliseCap+0xe6>
    0x84010c62     0x22    li a4,1
    0x84010c64     0x24    beq a5,a4,ffffffff84010c88 <Arch_finaliseCap+0x48>
    0x84010c68     0x28    sd zero,0(s0) # 1000 <KERNEL_OFFSET-0xfffffffefffff000>  ; stack access
    0x84010c6c     0x2c    sd zero,8(s0)         ; stack access
    0x84010c70     0x30    sd zero,16(s0)        ; stack access
    0x84010c74     0x34    sd zero,24(s0)        ; stack access
    0x84010c78     0x38    mv a0,s0
    0x84010c7a     0x3a    ld ra,72(sp)          ; stack access
    0x84010c7c     0x3c    ld s0,64(sp)          ; stack access
    0x84010c7e     0x3e    ld s1,56(sp)          ; stack access
    0x84010c80     0x40    ld s2,48(sp)          ; stack access
    0x84010c82     0x42    ld s3,40(sp)          ; stack access
    0x84010c84     0x44    addi sp,sp,80
    0x84010c86     0x46    ret
    0x84010c88     0x48    srli a1,a2,0x30
    0x84010c8c     0x4c    beqz a1,ffffffff84010c68 <Arch_finaliseCap+0x28>
    0x84010c8e     0x4e    srli a0,s1,0x39
    0x84010c92     0x52    andi a0,a0,3
    0x84010c94     0x54    slli a2,s1,0x19
    0x84010c98     0x58    srli a2,a2,0x19
    0x84010c9a     0x5a    slli a5,s1,0x19
    0x84010c9e     0x5e    bgez a5,ffffffff84010ca8 <Arch_finaliseCap+0x68>
    0x84010ca2     0x62    li a5,-1
    0x84010ca4     0x64    slli a5,a5,0x27
    0x84010ca6     0x66    or a2,a2,a5
    0x84010ca8     0x68    srli s2,s2,0x9
    0x84010cac     0x6c    slli a3,s2,0x19
    0x84010cb0     0x70    srli a3,a3,0x19
    0x84010cb2     0x72    slli a5,s2,0x19
    0x84010cb6     0x76    bgez a5,ffffffff84010cc0 <Arch_finaliseCap+0x80>
    0x84010cba     0x7a    li a5,-1
    0x84010cbc     0x7c    slli a5,a5,0x27
    0x84010cbe     0x7e    or a3,a3,a5
    0x84010cc0     0x80    jal ra,ffffffff8401078e <unmapPage>
    0x84010cc4     0x84    j ffffffff84010c68 <Arch_finaliseCap+0x28>
    0x84010cc6     0x86    beqz a3,ffffffff84010c68 <Arch_finaliseCap+0x28>
    0x84010cc8     0x88    slli a5,a1,0x18
    0x84010ccc     0x8c    bgez a5,ffffffff84010c68 <Arch_finaliseCap+0x28>
    0x84010cd0     0x90    srli s3,a2,0x30
    0x84010cd4     0x94    mv a0,s3
    0x84010cd6     0x96    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010cda     0x9a    sd a0,16(sp)          ; stack access
    0x84010cdc     0x9c    sd a1,24(sp)          ; stack access
    0x84010cde     0x9e    srli s2,s2,0x9
    0x84010ce2     0xa2    slli a2,s2,0x19
    0x84010ce6     0xa6    srli a2,a2,0x19
    0x84010ce8     0xa8    slli a5,s2,0x19
    0x84010cec     0xac    bgez a5,ffffffff84010cf6 <Arch_finaliseCap+0xb6>
    0x84010cf0     0xb0    li a5,-1
    0x84010cf2     0xb2    slli a5,a5,0x27
    0x84010cf4     0xb4    or a2,a2,a5
    0x84010cf6     0xb6    ld a5,16(sp)          ; stack access
    0x84010cf8     0xb8    bnez a5,ffffffff84010d00 <Arch_finaliseCap+0xc0>
    0x84010cfa     0xba    ld a5,24(sp)          ; stack access
    0x84010cfc     0xbc    beq a5,a2,ffffffff84010d1c <Arch_finaliseCap+0xdc>
    0x84010d00     0xc0    slli a1,s1,0x19
    0x84010d04     0xc4    srli a1,a1,0x19
    0x84010d06     0xc6    slli a5,s1,0x19
    0x84010d0a     0xca    bgez a5,ffffffff84010d14 <Arch_finaliseCap+0xd4>
    0x84010d0e     0xce    li a5,-1
    0x84010d10     0xd0    slli a5,a5,0x27
    0x84010d12     0xd2    or a1,a1,a5
    0x84010d14     0xd4    mv a0,s3
    0x84010d16     0xd6    jal ra,ffffffff840106e4 <unmapPageTable>
    0x84010d1a     0xda    j ffffffff84010c68 <Arch_finaliseCap+0x28>
    0x84010d1c     0xdc    mv a1,a2
    0x84010d1e     0xde    mv a0,s3
    0x84010d20     0xe0    jal ra,ffffffff84010948 <deleteASID>
    0x84010d24     0xe4    j ffffffff84010c68 <Arch_finaliseCap+0x28>
    0x84010d26     0xe6    beqz a3,ffffffff84010c68 <Arch_finaliseCap+0x28>
    0x84010d28     0xe8    srli a0,a1,0x2b
    0x84010d2c     0xec    slli a0,a0,0x30
    0x84010d2e     0xee    srli a0,a0,0x30
    0x84010d30     0xf0    slli s1,a1,0x2
    0x84010d34     0xf4    lui a1,0xf8000
    0x84010d38     0xf8    srli a1,a1,0x19
    0x84010d3a     0xfa    and a1,a1,s1
    0x84010d3c     0xfc    slli a5,s1,0x19
    0x84010d40    0x100    bgez a5,ffffffff84010d4a <Arch_finaliseCap+0x10a>
    0x84010d44    0x104    li a5,-1
    0x84010d46    0x106    slli a5,a5,0x27
    0x84010d48    0x108    or a1,a1,a5
    0x84010d4a    0x10a    jal ra,ffffffff84010908 <deleteASIDPool>
    0x84010d4e    0x10e    j ffffffff84010c68 <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
98 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 150 nodes.

Section init_freemem (257 of 271)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 301 instructions.


Stack analysis
---------------

40 stack accesses found. Annotated code for `init_freemem`:

    0x840024c8      0x0    addi sp,sp,-192
    0x840024ca      0x2    sd ra,184(sp)         ; stack access
    0x840024cc      0x4    sd s0,176(sp)         ; stack access
    0x840024ce      0x6    sd s1,168(sp)         ; stack access
    0x840024d0      0x8    sd s2,160(sp)         ; stack access
    0x840024d2      0xa    sd s3,152(sp)         ; stack access
    0x840024d4      0xc    sd s4,144(sp)         ; stack access
    0x840024d6      0xe    sd s5,136(sp)         ; stack access
    0x840024d8     0x10    sd s6,128(sp)         ; stack access
    0x840024da     0x12    sd s7,120(sp)         ; stack access
    0x840024dc     0x14    sd s8,112(sp)         ; stack access
    0x840024de     0x16    sd s9,104(sp)         ; stack access
    0x840024e0     0x18    mv s1,a0
    0x840024e2     0x1a    mv s3,a2
    0x840024e4     0x1c    mv s4,a3
    0x840024e6     0x1e    sd a4,0(sp)           ; stack access
    0x840024e8     0x20    sd a5,8(sp)           ; stack access
    0x840024ea     0x22    mv s2,a6
    0x840024ec     0x24    li a5,1
    0x840024ee     0x26    bgeu a5,a2,ffffffff840024fe <init_freemem+0x36>
    0x840024f2     0x2a    addi a4,a2,-1
    0x840024f6     0x2e    li a5,0
    0x840024f8     0x30    addi a5,a5,1
    0x840024fa     0x32    bne a5,a4,ffffffff840024f8 <init_freemem+0x30>
    0x840024fe     0x36    addi a4,s1,-1 # fffffffffdffffff <ki_end+0x79fd1fff>
    0x84002502     0x3a    beqz a4,ffffffff8400250c <init_freemem+0x44>
    0x84002504     0x3c    li a5,0
    0x84002506     0x3e    addi a5,a5,1
    0x84002508     0x40    bne a5,a4,ffffffff84002506 <init_freemem+0x3e>
    0x8400250c     0x44    auipc a5,0x0
    0x84002510     0x48    addi a5,a5,1988 # ffffffff84002cd0 <ndks_boot+0x138>
    0x84002514     0x4c    auipc a4,0x1
    0x84002518     0x50    addi a4,a4,-1860 # ffffffff84002dd0 <ndks_boot+0x238>
    0x8400251c     0x54    sd zero,0(a5)
    0x84002520     0x58    sd zero,8(a5)
    0x84002524     0x5c    addi a5,a5,16
    0x84002526     0x5e    bne a5,a4,ffffffff8400251c <init_freemem+0x54>
    0x8400252a     0x62    beqz s1,ffffffff840027d6 <init_freemem+0x30e>
    0x8400252e     0x66    mv a3,a1
    0x84002530     0x68    auipc a4,0x1
    0x84002534     0x6c    addi a4,a4,-1768 # ffffffff84002e48 <avail_reg+0x8>
    0x84002538     0x70    slli a5,s1,0x4
    0x8400253c     0x74    add a1,a1,a5
    0x8400253e     0x76    li t1,-1
    0x84002540     0x78    slli t1,t1,0x26
    0x84002542     0x7a    li a7,127
    0x84002546     0x7e    slli a7,a7,0x1f
    0x84002548     0x80    lui t4,0x80000
    0x8400254c     0x84    li t3,1
    0x8400254e     0x86    slli t3,t3,0x26
    0x84002550     0x88    j ffffffff84002562 <init_freemem+0x9a>
    0x84002552     0x8a    mv a5,t4
    0x84002554     0x8c    j ffffffff8400257a <init_freemem+0xb2>
    0x84002556     0x8e    sd a5,-8(a2)
    0x8400255a     0x92    addi a3,a3,16
    0x8400255c     0x94    addi a4,a4,16
    0x8400255e     0x96    beq a3,a1,ffffffff840027ec <init_freemem+0x324>
    0x84002562     0x9a    ld a6,8(a3)
    0x84002566     0x9e    add a5,a6,t1
    0x8400256a     0xa2    mv a2,a4
    0x8400256c     0xa4    ld a0,0(a3)
    0x8400256e     0xa6    add a0,a0,t1
    0x84002570     0xa8    sd a0,-8(a4)
    0x84002574     0xac    sd a5,0(a4)
    0x84002576     0xae    bltu a7,a6,ffffffff84002552 <init_freemem+0x8a>
    0x8400257a     0xb2    sd a5,0(a2)
    0x8400257c     0xb4    ld a5,-8(a2)
    0x84002580     0xb8    add a0,a5,t3
    0x84002584     0xbc    bgeu a7,a0,ffffffff84002556 <init_freemem+0x8e>
    0x84002588     0xc0    mv a5,t4
    0x8400258a     0xc2    j ffffffff84002556 <init_freemem+0x8e>
    0x8400258c     0xc4    addi s0,s0,1
    0x8400258e     0xc6    bgeu s5,s1,ffffffff840027da <init_freemem+0x312>
    0x84002592     0xca    bgeu s0,s3,ffffffff84002806 <init_freemem+0x33e>
    0x84002596     0xce    slli s6,s0,0x4
    0x8400259a     0xd2    add s6,s6,s4
    0x8400259c     0xd4    ld a1,0(s6) # fffffffffe000000 <ki_end+0x79fd2000>
    0x840025a0     0xd8    ld a4,8(s6)
    0x840025a4     0xdc    beq a1,a4,ffffffff8400258c <init_freemem+0xc4>
    0x840025a8     0xe0    slli a5,s5,0x4
    0x840025ac     0xe4    add a5,a5,s7
    0x840025ae     0xe6    ld a3,680(a5)
    0x840025b2     0xea    ld a5,688(a5)
    0x840025b6     0xee    bltu a3,a5,ffffffff840025be <init_freemem+0xf6>
    0x840025ba     0xf2    addi s5,s5,1
    0x840025bc     0xf4    j ffffffff8400258e <init_freemem+0xc6>
    0x840025be     0xf6    bgeu a3,a4,ffffffff840025f2 <init_freemem+0x12a>
    0x840025c2     0xfa    bgeu a1,a5,ffffffff84002606 <init_freemem+0x13e>
    0x840025c6     0xfe    bltu a3,a1,ffffffff8400261c <init_freemem+0x154>
    0x840025ca    0x102    slli a3,s5,0x4
    0x840025ce    0x106    add a3,a3,s7
    0x840025d0    0x108    bgeu a5,a4,ffffffff840025d6 <init_freemem+0x10e>
    0x840025d4    0x10c    mv a4,a5
    0x840025d6    0x10e    sd a4,680(a3)
    0x840025da    0x112    ld a1,8(s6)
    0x840025de    0x116    add a1,a1,s8
    0x840025e0    0x118    ld a0,0(s6)
    0x840025e4    0x11c    add a0,a0,s8
    0x840025e6    0x11e    sd a0,48(sp)          ; stack access
    0x840025e8    0x120    sd a1,56(sp)          ; stack access
    0x840025ea    0x122    jal ra,ffffffff8400098e <reserve_region>
    0x840025ee    0x126    addi s0,s0,1
    0x840025f0    0x128    j ffffffff8400258e <init_freemem+0xc6>
    0x840025f2    0x12a    add a0,a1,s8
    0x840025f6    0x12e    sd a0,32(sp)          ; stack access
    0x840025f8    0x130    add a1,a4,s8
    0x840025fc    0x134    sd a1,40(sp)          ; stack access
    0x840025fe    0x136    jal ra,ffffffff8400098e <reserve_region>
    0x84002602    0x13a    addi s0,s0,1
    0x84002604    0x13c    j ffffffff8400258e <init_freemem+0xc6>
    0x84002606    0x13e    slli a5,s5,0x4
    0x8400260a    0x142    add a5,a5,s7
    0x8400260c    0x144    ld a0,680(a5)
    0x84002610    0x148    ld a1,688(a5)
    0x84002614    0x14c    jal ra,ffffffff84000aae <insert_region>
    0x84002618    0x150    addi s5,s5,1
    0x8400261a    0x152    j ffffffff8400258e <init_freemem+0xc6>
    0x8400261c    0x154    slli s9,s5,0x4
    0x84002620    0x158    add s9,s9,s7
    0x84002622    0x15a    ld a0,680(s9)
    0x84002626    0x15e    sd a0,16(sp)          ; stack access
    0x84002628    0x160    sd a1,24(sp)          ; stack access
    0x8400262a    0x162    jal ra,ffffffff84000aae <insert_region>
    0x8400262e    0x166    ld a5,8(s6)
    0x84002632    0x16a    ld a4,688(s9)
    0x84002636    0x16e    bltu a5,a4,ffffffff8400263e <init_freemem+0x176>
    0x8400263a    0x172    addi s5,s5,1
    0x8400263c    0x174    j ffffffff8400258e <init_freemem+0xc6>
    0x8400263e    0x176    sd a5,680(s9)
    0x84002642    0x17a    ld a1,8(s6)
    0x84002646    0x17e    add a1,a1,s8
    0x84002648    0x180    ld a0,0(s6)
    0x8400264c    0x184    add a0,a0,s8
    0x8400264e    0x186    sd a0,64(sp)          ; stack access
    0x84002650    0x188    sd a1,72(sp)          ; stack access
    0x84002652    0x18a    jal ra,ffffffff8400098e <reserve_region>
    0x84002656    0x18e    addi s0,s0,1
    0x84002658    0x190    j ffffffff8400258e <init_freemem+0xc6>
    0x8400265a    0x192    add a0,a0,s3
    0x8400265c    0x194    sd a0,80(sp)
    0x8400265e    0x196    add a1,a1,s3
    0x84002660    0x198    sd a1,88(sp)
    0x84002662    0x19a    jal ra,ffffffff8400098e <reserve_region>
    0x84002666    0x19e    addi s0,s0,16
    0x84002668    0x1a0    beq s4,s0,ffffffff84002802 <init_freemem+0x33a>
    0x8400266c    0x1a4    ld a0,0(s0)
    0x8400266e    0x1a6    ld a1,8(s0)
    0x84002670    0x1a8    bgeu a0,a1,ffffffff84002666 <init_freemem+0x19e>
    0x84002674    0x1ac    j ffffffff8400265a <init_freemem+0x192>
    0x84002676    0x1ae    slli a5,s5,0x4
    0x8400267a    0x1b2    add a5,a5,s3
    0x8400267c    0x1b4    ld a0,680(a5)
    0x84002680    0x1b8    ld a1,688(a5)
    0x84002684    0x1bc    jal ra,ffffffff84000aae <insert_region>
    0x84002688    0x1c0    addi s5,s5,1
    0x8400268a    0x1c2    addi s0,s0,16
    0x8400268c    0x1c4    beq s1,s5,ffffffff8400269a <init_freemem+0x1d2>
    0x84002690    0x1c8    ld a4,0(s0)
    0x84002692    0x1ca    ld a5,8(s0)
    0x84002694    0x1cc    bgeu a4,a5,ffffffff84002688 <init_freemem+0x1c0>
    0x84002698    0x1d0    j ffffffff84002676 <init_freemem+0x1ae>
    0x8400269a    0x1d2    auipc a5,0x0
    0x8400269e    0x1d6    addi a5,a5,1278 # ffffffff84002b98 <ndks_boot>
    0x840026a2    0x1da    ld a3,552(a5)
    0x840026a6    0x1de    ld a4,560(a5)
    0x840026aa    0x1e2    auipc a5,0x0
    0x840026ae    0x1e6    addi a5,a5,1798 # ffffffff84002db0 <ndks_boot+0x218>
    0x840026b2    0x1ea    li s1,15
    0x840026b4    0x1ec    beq a3,a4,ffffffff840026be <init_freemem+0x1f6>
    0x840026b8    0x1f0    jal ra,ffffffff84010294 <halt>
    0x840026bc    0x1f4    mv s1,s3
    0x840026be    0x1f6    addi s3,s1,-1
    0x840026c2    0x1fa    ld a3,0(a5)
    0x840026c4    0x1fc    addi a5,a5,-16
    0x840026c6    0x1fe    ld a4,24(a5)
    0x840026c8    0x200    beq a3,a4,ffffffff840026bc <init_freemem+0x1f4>
    0x840026cc    0x204    ld a5,0(sp)           ; stack access
    0x840026ce    0x206    sd a5,16(sp)          ; stack access
    0x840026d0    0x208    ld a5,8(sp)           ; stack access
    0x840026d2    0x20a    sd a5,24(sp)          ; stack access
    0x840026d4    0x20c    mv s4,s2
    0x840026d6    0x20e    beqz s2,ffffffff840026e0 <init_freemem+0x218>
    0x840026da    0x212    li s4,1
    0x840026dc    0x214    sll s4,s4,s2
    0x840026e0    0x218    ld a0,16(sp)          ; stack access
    0x840026e2    0x21a    ld a1,24(sp)          ; stack access
    0x840026e4    0x21c    jal ra,ffffffff840001b4 <arch_get_n_paging>
    0x840026e8    0x220    lui a5,0x1004
    0x840026ec    0x224    addi a5,a5,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x840026f0    0x228    add s4,s4,a5
    0x840026f2    0x22a    slli a0,a0,0xc
    0x840026f4    0x22c    add s4,s4,a0
    0x840026f6    0x22e    mv a4,s2
    0x840026f8    0x230    li a5,24
    0x840026fa    0x232    bgeu s2,a5,ffffffff84002700 <init_freemem+0x238>
    0x840026fe    0x236    li a4,24
    0x84002700    0x238    sext.w a4,a4
    0x84002702    0x23a    addi a5,s3,19
    0x84002706    0x23e    slli a3,a5,0x4
    0x8400270a    0x242    auipc a5,0x0
    0x8400270e    0x246    addi a5,a5,1166 # ffffffff84002b98 <ndks_boot>
    0x84002712    0x24a    add a5,a5,a3
    0x84002714    0x24c    ld s0,16(a5)
    0x84002716    0x24e    sub s0,s0,s4
    0x8400271a    0x252    srl s0,s0,a4
    0x8400271e    0x256    sll s0,s0,a4
    0x84002722    0x25a    ld a5,8(a5)
    0x84002724    0x25c    bgeu s0,a5,ffffffff84002742 <init_freemem+0x27a>
    0x84002728    0x260    slli a5,s3,0x4
    0x8400272c    0x264    auipc a3,0x0
    0x84002730    0x268    addi a3,a3,1428 # ffffffff84002cc0 <ndks_boot+0x128>
    0x84002734    0x26c    add a5,a5,a3
    0x84002736    0x26e    li a2,15
    0x84002738    0x270    auipc a1,0x0
    0x8400273c    0x274    addi a1,a1,1120 # ffffffff84002b98 <ndks_boot>
    0x84002740    0x278    j ffffffff840027c2 <init_freemem+0x2fa>
    0x84002742    0x27a    mv s5,s3
    0x84002744    0x27c    mv s3,s1
    0x84002746    0x27e    mv a3,s2
    0x84002748    0x280    ld a1,0(sp)           ; stack access
    0x8400274a    0x282    ld a2,8(sp)           ; stack access
    0x8400274c    0x284    mv a0,s0
    0x8400274e    0x286    jal ra,ffffffff840023de <create_rootserver_objects>
    0x84002752    0x28a    li a5,15
    0x84002754    0x28c    bltu a5,s5,ffffffff84002778 <init_freemem+0x2b0>
    0x84002758    0x290    auipc a5,0x0
    0x8400275c    0x294    addi a5,a5,1088 # ffffffff84002b98 <ndks_boot>
    0x84002760    0x298    addi a4,s5,19 # 300013 <KERNEL_OFFSET-0xfffffffeffcfffed>
    0x84002764    0x29c    slli a4,a4,0x4
    0x84002766    0x29e    add a4,a4,a5
    0x84002768    0x2a0    ld a4,16(a4)
    0x8400276a    0x2a2    addi s3,s3,19
    0x8400276c    0x2a4    slli s3,s3,0x4
    0x8400276e    0x2a6    add a5,a5,s3
    0x84002770    0x2a8    sd a4,16(a5)
    0x84002772    0x2aa    add s4,s4,s0
    0x84002774    0x2ac    sd s4,8(a5)
    0x84002778    0x2b0    addi s5,s5,19
    0x8400277a    0x2b2    slli s5,s5,0x4
    0x8400277c    0x2b4    auipc a5,0x0
    0x84002780    0x2b8    addi a5,a5,1052 # ffffffff84002b98 <ndks_boot>
    0x84002784    0x2bc    add s5,s5,a5
    0x84002786    0x2be    sd s0,16(s5)
    0x8400278a    0x2c2    ld ra,184(sp)         ; stack access
    0x8400278c    0x2c4    ld s0,176(sp)         ; stack access
    0x8400278e    0x2c6    ld s1,168(sp)         ; stack access
    0x84002790    0x2c8    ld s2,160(sp)         ; stack access
    0x84002792    0x2ca    ld s3,152(sp)         ; stack access
    0x84002794    0x2cc    ld s4,144(sp)         ; stack access
    0x84002796    0x2ce    ld s5,136(sp)         ; stack access
    0x84002798    0x2d0    ld s6,128(sp)         ; stack access
    0x8400279a    0x2d2    ld s7,120(sp)         ; stack access
    0x8400279c    0x2d4    ld s8,112(sp)         ; stack access
    0x8400279e    0x2d6    ld s9,104(sp)         ; stack access
    0x840027a0    0x2d8    addi sp,sp,192
    0x840027a2    0x2da    ret
    0x840027a4    0x2dc    addi s5,s3,-1
    0x840027a8    0x2e0    ld s0,8(a5)
    0x840027aa    0x2e2    sub s0,s0,s4
    0x840027ae    0x2e6    srl s0,s0,a4
    0x840027b2    0x2ea    sll s0,s0,a4
    0x840027b6    0x2ee    addi a5,a5,-16
    0x840027b8    0x2f0    mv s1,s3
    0x840027ba    0x2f2    ld a3,16(a5)
    0x840027bc    0x2f4    bgeu s0,a3,ffffffff84002746 <init_freemem+0x27e>
    0x840027c0    0x2f8    mv s3,s5
    0x840027c2    0x2fa    bltu a2,s3,ffffffff840027a4 <init_freemem+0x2dc>
    0x840027c6    0x2fe    addi s1,s1,19
    0x840027c8    0x300    slli s1,s1,0x4
    0x840027ca    0x302    add s1,s1,a1
    0x840027cc    0x304    ld a3,16(a5)
    0x840027ce    0x306    sd a3,8(s1)
    0x840027d0    0x308    ld a3,24(a5)
    0x840027d2    0x30a    sd a3,16(s1)
    0x840027d4    0x30c    j ffffffff840027a4 <init_freemem+0x2dc>
    0x840027d6    0x30e    mv s5,s1
    0x840027d8    0x310    mv s0,s1
    0x840027da    0x312    bgeu s0,s3,ffffffff8400269a <init_freemem+0x1d2>
    0x840027de    0x316    slli s0,s0,0x4
    0x840027e0    0x318    add s0,s0,s4
    0x840027e2    0x31a    slli s3,s3,0x4
    0x840027e4    0x31c    add s4,s4,s3
    0x840027e6    0x31e    li s3,1
    0x840027e8    0x320    slli s3,s3,0x26
    0x840027ea    0x322    j ffffffff8400266c <init_freemem+0x1a4>
    0x840027ec    0x324    li s0,0
    0x840027ee    0x326    li s5,0
    0x840027f0    0x328    auipc s7,0x0
    0x840027f4    0x32c    addi s7,s7,936 # ffffffff84002b98 <ndks_boot>
    0x840027f8    0x330    li s8,1
    0x840027fa    0x332    slli s8,s8,0x26
    0x840027fc    0x334    bnez s3,ffffffff84002596 <init_freemem+0xce>
    0x84002800    0x338    mv s5,s3
    0x84002802    0x33a    bgeu s5,s1,ffffffff8400269a <init_freemem+0x1d2>
    0x84002806    0x33e    slli a5,s5,0x4
    0x8400280a    0x342    auipc s0,0x0
    0x8400280e    0x346    addi s0,s0,1590 # ffffffff84002e40 <avail_reg>
    0x84002812    0x34a    add s0,s0,a5
    0x84002814    0x34c    auipc s3,0x0
    0x84002818    0x350    addi s3,s3,900 # ffffffff84002b98 <ndks_boot>
    0x8400281c    0x354    j ffffffff84002690 <init_freemem+0x1c8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
301 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 466 nodes.

Section decodeUntypedInvocation (258 of 271)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 259 instructions.


Stack analysis
---------------

39 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x840162d8      0x0    addi sp,sp,-208
    0x840162da      0x2    sd ra,200(sp)         ; stack access
    0x840162dc      0x4    sd s0,192(sp)         ; stack access
    0x840162de      0x6    sd s1,184(sp)         ; stack access
    0x840162e0      0x8    sd s2,176(sp)         ; stack access
    0x840162e2      0xa    sd s3,168(sp)         ; stack access
    0x840162e4      0xc    sd s4,160(sp)         ; stack access
    0x840162e6      0xe    sd s5,152(sp)         ; stack access
    0x840162e8     0x10    sd s6,144(sp)         ; stack access
    0x840162ea     0x12    sd s7,136(sp)         ; stack access
    0x840162ec     0x14    sd s8,128(sp)         ; stack access
    0x840162ee     0x16    sd s9,120(sp)         ; stack access
    0x840162f0     0x18    sd s10,112(sp)        ; stack access
    0x840162f2     0x1a    sd a3,32(sp)          ; stack access
    0x840162f4     0x1c    sd a4,40(sp)          ; stack access
    0x840162f6     0x1e    li a4,1
    0x840162f8     0x20    bne a0,a4,ffffffff84016472 <decodeUntypedInvocation+0x19a>
    0x840162fc     0x24    mv s0,a0
    0x840162fe     0x26    mv s5,a2
    0x84016300     0x28    mv s4,a7
    0x84016302     0x2a    li a4,5
    0x84016304     0x2c    bgeu a4,a1,ffffffff8401649a <decodeUntypedInvocation+0x1c2>
    0x84016308     0x30    ld s10,0(a5)
    0x8401630c     0x34    beqz s10,ffffffff8401649a <decodeUntypedInvocation+0x1c2>
    0x84016310     0x38    auipc a5,0x17
    0x84016314     0x3c    addi a5,a5,1416 # ffffffff8402d898 <ksCurThread>
    0x84016318     0x40    ld s3,0(a5)
    0x8401631c     0x44    ld s1,88(s3)
    0x84016320     0x48    li a5,8
    0x84016322     0x4a    bltu a5,s1,ffffffff840164a8 <decodeUntypedInvocation+0x1d0>
    0x84016326     0x4e    ld s6,96(s3)
    0x8401632a     0x52    mv a1,s6
    0x8401632c     0x54    mv a0,s1
    0x8401632e     0x56    jal ra,ffffffff84011938 <getObjectSize>
    0x84016332     0x5a    mv s8,a0
    0x84016334     0x5c    li a5,63
    0x84016338     0x60    bltu a5,s6,ffffffff840164bc <decodeUntypedInvocation+0x1e4>
    0x8401633c     0x64    li a5,38
    0x84016340     0x68    bltu a5,a0,ffffffff840164bc <decodeUntypedInvocation+0x1e4>
    0x84016344     0x6c    li a5,4
    0x84016346     0x6e    beq s1,a5,ffffffff840164d6 <decodeUntypedInvocation+0x1fe>
    0x8401634a     0x72    bnez s1,ffffffff84016352 <decodeUntypedInvocation+0x7a>
    0x8401634c     0x74    li a5,3
    0x8401634e     0x76    bgeu a5,s6,ffffffff840164ec <decodeUntypedInvocation+0x214>
    0x84016352     0x7a    ld s9,40(sp)          ; stack access
    0x84016354     0x7c    ld s7,112(s3)
    0x84016358     0x80    ld s2,40(s4)
    0x8401635c     0x84    ld s4,48(s4)
    0x84016360     0x88    bnez s7,ffffffff840164fe <decodeUntypedInvocation+0x226>
    0x84016364     0x8c    ld a4,0(s10)
    0x84016368     0x90    srli a5,a4,0x3b
    0x8401636c     0x94    li a3,10
    0x8401636e     0x96    bne a5,a3,ffffffff8401651e <decodeUntypedInvocation+0x246>
    0x84016372     0x9a    srli a5,a4,0x2f
    0x84016376     0x9e    li a3,1
    0x84016378     0xa0    sll a5,a3,a5
    0x8401637c     0xa4    addi a3,a5,-1
    0x84016380     0xa8    bltu a3,s2,ffffffff8401654c <decodeUntypedInvocation+0x274>
    0x84016384     0xac    addi a3,s4,-1
    0x84016388     0xb0    li a2,255
    0x8401638c     0xb4    bltu a2,a3,ffffffff84016562 <decodeUntypedInvocation+0x28a>
    0x84016390     0xb8    sub a5,a5,s2
    0x84016394     0xbc    bltu a5,s4,ffffffff8401657c <decodeUntypedInvocation+0x2a4>
    0x84016398     0xc0    slli a4,a4,0x1
    0x8401639a     0xc2    lui s3,0xfc000
    0x8401639e     0xc6    srli s3,s3,0x19
    0x840163a2     0xca    and a5,a4,s3
    0x840163a6     0xce    slli a3,a4,0x19
    0x840163aa     0xd2    bgez a3,ffffffff840163b4 <decodeUntypedInvocation+0xdc>
    0x840163ae     0xd6    li a4,-1
    0x840163b0     0xd8    slli a4,a4,0x27
    0x840163b2     0xda    or a5,a5,a4
    0x840163b4     0xdc    mv s10,a5
    0x840163b6     0xde    sd s2,80(sp)          ; stack access
    0x840163b8     0xe0    sd s4,88(sp)          ; stack access
    0x840163ba     0xe2    add s7,s4,s2
    0x840163be     0xe6    bgeu s2,s7,ffffffff840163da <decodeUntypedInvocation+0x102>
    0x840163c2     0xea    slli s3,s2,0x5
    0x840163c6     0xee    add s3,s3,a5
    0x840163c8     0xf0    mv a0,s3
    0x840163ca     0xf2    jal ra,ffffffff84011726 <ensureEmptySlot>
    0x840163ce     0xf6    bnez a0,ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x840163d0     0xf8    addi s2,s2,1
    0x840163d2     0xfa    addi s3,s3,32 # fffffffffc000020 <ki_end+0x77fd2020>
    0x840163d6     0xfe    bltu s2,s7,ffffffff840163c8 <decodeUntypedInvocation+0xf0>
    0x840163da    0x102    mv a0,s5
    0x840163dc    0x104    jal ra,ffffffff84011e8a <ensureNoChildren>
    0x840163e0    0x108    beqz a0,ffffffff840163e8 <decodeUntypedInvocation+0x110>
    0x840163e2    0x10a    srli a0,s9,0x19
    0x840163e6    0x10e    li s0,0
    0x840163e8    0x110    ld a5,32(sp)          ; stack access
    0x840163ea    0x112    slli a4,a5,0x19
    0x840163ee    0x116    srli a4,a4,0x19
    0x840163f0    0x118    slli a3,a5,0x19
    0x840163f4    0x11c    bgez a3,ffffffff840163fe <decodeUntypedInvocation+0x126>
    0x840163f8    0x120    li a5,-1
    0x840163fa    0x122    slli a5,a5,0x27
    0x840163fc    0x124    or a4,a4,a5
    0x840163fe    0x126    slli a0,a0,0x4
    0x84016400    0x128    li a5,1
    0x84016402    0x12a    sll a5,a5,s9
    0x84016406    0x12e    sub a5,a5,a0
    0x84016408    0x130    sext.w s8,s8
    0x8401640a    0x132    srl a3,a5,s8
    0x8401640e    0x136    bltu a3,s4,ffffffff84016592 <decodeUntypedInvocation+0x2ba>
    0x84016412    0x13a    srli s9,s9,0x6
    0x84016416    0x13e    andi s9,s9,1
    0x8401641a    0x142    beqz s9,ffffffff8401642c <decodeUntypedInvocation+0x154>
    0x8401641e    0x146    addi a5,s1,-5
    0x84016422    0x14a    li a3,2
    0x84016424    0x14c    bgeu a3,a5,ffffffff8401642c <decodeUntypedInvocation+0x154>
    0x84016428    0x150    bnez s1,ffffffff840165a4 <decodeUntypedInvocation+0x2cc>
    0x8401642c    0x154    li a5,1
    0x8401642e    0x156    sll s8,a5,s8
    0x84016432    0x15a    addi s2,s8,-1
    0x84016436    0x15e    add a0,a0,s2
    0x84016438    0x160    add s2,a0,a4
    0x8401643c    0x164    neg s8,s8
    0x84016440    0x168    and s2,s2,s8
    0x84016444    0x16c    li a1,2
    0x84016446    0x16e    auipc a5,0x17
    0x8401644a    0x172    addi a5,a5,1106 # ffffffff8402d898 <ksCurThread>
    0x8401644e    0x176    ld a0,0(a5)
    0x84016450    0x178    jal ra,ffffffff84012404 <setThreadState>
    0x84016454    0x17c    sd s10,0(sp)          ; stack access
    0x84016456    0x17e    ld a5,80(sp)          ; stack access
    0x84016458    0x180    sd a5,8(sp)           ; stack access
    0x8401645a    0x182    ld a5,88(sp)          ; stack access
    0x8401645c    0x184    sd a5,16(sp)          ; stack access
    0x8401645e    0x186    mv a6,s9
    0x84016460    0x188    mv a5,sp
    0x84016462    0x18a    mv a4,s6
    0x84016464    0x18c    mv a3,s1
    0x84016466    0x18e    mv a2,s2
    0x84016468    0x190    mv a1,s0
    0x8401646a    0x192    mv a0,s5
    0x8401646c    0x194    jal ra,ffffffff840161c6 <invokeUntyped_Retype>
    0x84016470    0x198    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x84016472    0x19a    li a5,3
    0x84016474    0x19c    auipc a4,0x7
    0x84016478    0x1a0    sd a5,132(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401647c    0x1a4    li a0,3
    0x8401647e    0x1a6    ld ra,200(sp)         ; stack access
    0x84016480    0x1a8    ld s0,192(sp)         ; stack access
    0x84016482    0x1aa    ld s1,184(sp)         ; stack access
    0x84016484    0x1ac    ld s2,176(sp)         ; stack access
    0x84016486    0x1ae    ld s3,168(sp)         ; stack access
    0x84016488    0x1b0    ld s4,160(sp)         ; stack access
    0x8401648a    0x1b2    ld s5,152(sp)         ; stack access
    0x8401648c    0x1b4    ld s6,144(sp)         ; stack access
    0x8401648e    0x1b6    ld s7,136(sp)         ; stack access
    0x84016490    0x1b8    ld s8,128(sp)         ; stack access
    0x84016492    0x1ba    ld s9,120(sp)         ; stack access
    0x84016494    0x1bc    ld s10,112(sp)        ; stack access
    0x84016496    0x1be    addi sp,sp,208
    0x84016498    0x1c0    ret
    0x8401649a    0x1c2    li a5,7
    0x8401649c    0x1c4    auipc a4,0x7
    0x840164a0    0x1c8    sd a5,92(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840164a4    0x1cc    li a0,3
    0x840164a6    0x1ce    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x840164a8    0x1d0    auipc a5,0x7
    0x840164ac    0x1d4    addi a5,a5,32 # ffffffff8401d4c8 <current_syscall_error>
    0x840164b0    0x1d8    li a4,1
    0x840164b2    0x1da    sd a4,48(a5)
    0x840164b4    0x1dc    sd zero,0(a5)
    0x840164b8    0x1e0    li a0,3
    0x840164ba    0x1e2    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x840164bc    0x1e4    auipc a5,0x7
    0x840164c0    0x1e8    addi a5,a5,12 # ffffffff8401d4c8 <current_syscall_error>
    0x840164c4    0x1ec    li a4,4
    0x840164c6    0x1ee    sd a4,48(a5)
    0x840164c8    0x1f0    sd zero,16(a5)
    0x840164cc    0x1f4    li a4,38
    0x840164d0    0x1f8    sd a4,24(a5)
    0x840164d2    0x1fa    li a0,3
    0x840164d4    0x1fc    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x840164d6    0x1fe    bnez s6,ffffffff84016352 <decodeUntypedInvocation+0x7a>
    0x840164da    0x202    auipc a5,0x7
    0x840164de    0x206    addi a5,a5,-18 # ffffffff8401d4c8 <current_syscall_error>
    0x840164e2    0x20a    li a4,1
    0x840164e4    0x20c    sd a4,48(a5)
    0x840164e6    0x20e    sd a4,0(a5)
    0x840164e8    0x210    li a0,3
    0x840164ea    0x212    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x840164ec    0x214    auipc a5,0x7
    0x840164f0    0x218    addi a5,a5,-36 # ffffffff8401d4c8 <current_syscall_error>
    0x840164f4    0x21c    li a4,1
    0x840164f6    0x21e    sd a4,48(a5)
    0x840164f8    0x220    sd a4,0(a5)
    0x840164fa    0x222    li a0,3
    0x840164fc    0x224    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x840164fe    0x226    ld a0,0(s10)
    0x84016502    0x22a    sd a0,56(sp)          ; stack access
    0x84016504    0x22c    ld a1,8(s10)
    0x84016508    0x230    sd a1,64(sp)          ; stack access
    0x8401650a    0x232    mv a3,s7
    0x8401650c    0x234    ld a2,104(s3)
    0x84016510    0x238    jal ra,ffffffff840112ec <lookupTargetSlot>
    0x84016514    0x23c    sd a0,96(sp)          ; stack access
    0x84016516    0x23e    sd a1,104(sp)         ; stack access
    0x84016518    0x240    bnez a0,ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x8401651a    0x242    ld a4,0(a1)
    0x8401651c    0x244    j ffffffff84016368 <decodeUntypedInvocation+0x90>
    0x8401651e    0x246    auipc a5,0x7
    0x84016522    0x24a    addi a5,a5,-86 # ffffffff8401d4c8 <current_syscall_error>
    0x84016526    0x24e    li a4,6
    0x84016528    0x250    sd a4,48(a5)
    0x8401652a    0x252    sd zero,40(a5)
    0x8401652e    0x256    auipc a4,0x7
    0x84016532    0x25a    addi a4,a4,-126 # ffffffff8401d4b0 <current_lookup_fault>
    0x84016536    0x25e    slli a5,s7,0x2
    0x8401653a    0x262    andi a5,a5,508
    0x8401653e    0x266    ori a5,a5,1
    0x84016542    0x26a    sd a5,0(a4)
    0x84016544    0x26c    sd zero,8(a4)
    0x84016548    0x270    li a0,3
    0x8401654a    0x272    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x8401654c    0x274    auipc a5,0x7
    0x84016550    0x278    addi a5,a5,-132 # ffffffff8401d4c8 <current_syscall_error>
    0x84016554    0x27c    li a4,4
    0x84016556    0x27e    sd a4,48(a5)
    0x84016558    0x280    sd zero,16(a5)
    0x8401655c    0x284    sd a3,24(a5)
    0x8401655e    0x286    li a0,3
    0x84016560    0x288    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x84016562    0x28a    auipc a5,0x7
    0x84016566    0x28e    addi a5,a5,-154 # ffffffff8401d4c8 <current_syscall_error>
    0x8401656a    0x292    li a4,4
    0x8401656c    0x294    sd a4,48(a5)
    0x8401656e    0x296    li a4,1
    0x84016570    0x298    sd a4,16(a5)
    0x84016572    0x29a    li a4,256
    0x84016576    0x29e    sd a4,24(a5)
    0x84016578    0x2a0    li a0,3
    0x8401657a    0x2a2    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x8401657c    0x2a4    auipc a4,0x7
    0x84016580    0x2a8    addi a4,a4,-180 # ffffffff8401d4c8 <current_syscall_error>
    0x84016584    0x2ac    li a3,4
    0x84016586    0x2ae    sd a3,48(a4)
    0x84016588    0x2b0    li a3,1
    0x8401658a    0x2b2    sd a3,16(a4)
    0x8401658c    0x2b4    sd a5,24(a4)
    0x8401658e    0x2b6    li a0,3
    0x84016590    0x2b8    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x84016592    0x2ba    auipc a4,0x7
    0x84016596    0x2be    addi a4,a4,-202 # ffffffff8401d4c8 <current_syscall_error>
    0x8401659a    0x2c2    li a3,10
    0x8401659c    0x2c4    sd a3,48(a4)
    0x8401659e    0x2c6    sd a5,32(a4)
    0x840165a0    0x2c8    li a0,3
    0x840165a2    0x2ca    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>
    0x840165a4    0x2cc    auipc a5,0x7
    0x840165a8    0x2d0    addi a5,a5,-220 # ffffffff8401d4c8 <current_syscall_error>
    0x840165ac    0x2d4    li a4,1
    0x840165ae    0x2d6    sd a4,48(a5)
    0x840165b0    0x2d8    sd a4,0(a5)
    0x840165b2    0x2da    li a0,3
    0x840165b4    0x2dc    j ffffffff8401647e <decodeUntypedInvocation+0x1a6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
259 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 398 nodes.

Section decodeSetSpace (259 of 271)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 151 instructions.

RVC_FTTFFFFTFFFT__FT.

Stack analysis
---------------

58 stack accesses found. Annotated code for `decodeSetSpace`:

    0x84014d04      0x0    addi sp,sp,-256
    0x84014d06      0x2    sd ra,248(sp)         ; stack access
    0x84014d08      0x4    sd s0,240(sp)         ; stack access
    0x84014d0a      0x6    sd s1,232(sp)         ; stack access
    0x84014d0c      0x8    sd s2,224(sp)         ; stack access
    0x84014d0e      0xa    sd s3,216(sp)         ; stack access
    0x84014d10      0xc    sd s4,208(sp)         ; stack access
    0x84014d12      0xe    sd s5,200(sp)         ; stack access
    0x84014d14     0x10    sd s6,192(sp)         ; stack access
    0x84014d16     0x12    sd s7,184(sp)         ; stack access
    0x84014d18     0x14    sd s8,176(sp)         ; stack access
    0x84014d1a     0x16    sd s9,168(sp)         ; stack access
    0x84014d1c     0x18    sd a0,64(sp)          ; stack access
    0x84014d1e     0x1a    sd a1,72(sp)          ; stack access
    0x84014d20     0x1c    li a5,2
    0x84014d22     0x1e    bgeu a5,a2,ffffffff84014e32 <decodeSetSpace+0x12e>
    0x84014d26     0x22    ld s0,0(a4)
    0x84014d28     0x24    beqz s0,ffffffff84014e32 <decodeSetSpace+0x12e>
    0x84014d2c     0x28    ld s2,8(a4)
    0x84014d30     0x2c    beqz s2,ffffffff84014e32 <decodeSetSpace+0x12e>
    0x84014d34     0x30    auipc a5,0x19
    0x84014d38     0x34    addi a5,a5,-1180 # ffffffff8402d898 <ksCurThread>
    0x84014d3c     0x38    ld a5,0(a5)
    0x84014d3e     0x3a    ld s7,88(a5)
    0x84014d42     0x3e    ld s6,96(a5)
    0x84014d46     0x42    ld s8,104(a5)
    0x84014d4a     0x46    ld s5,0(s0)
    0x84014d4e     0x4a    sd s5,128(sp)         ; stack access
    0x84014d50     0x4c    ld a5,8(s0)
    0x84014d52     0x4e    sd a5,136(sp)         ; stack access
    0x84014d54     0x50    mv s9,s5
    0x84014d56     0x52    ld a5,0(s2)
    0x84014d5a     0x56    sd a5,112(sp)         ; stack access
    0x84014d5c     0x58    ld a5,8(s2)
    0x84014d60     0x5c    sd a5,120(sp)         ; stack access
    0x84014d62     0x5e    ld a5,64(sp)          ; stack access
    0x84014d64     0x60    slli s1,a5,0x19
    0x84014d68     0x64    srli s1,s1,0x19
    0x84014d6a     0x66    slli a4,a5,0x19
    0x84014d6e     0x6a    bgez a4,ffffffff84014d78 <decodeSetSpace+0x74>
    0x84014d72     0x6e    li a5,-1
    0x84014d74     0x70    slli a5,a5,0x27
    0x84014d76     0x72    or s1,s1,a5
    0x84014d78     0x74    mv s4,a3
    0x84014d7a     0x76    andi s3,s1,-1024
    0x84014d7e     0x7a    mv a0,s3
    0x84014d80     0x7c    jal ra,ffffffff84011ffc <slotCapLongRunningDelete>
    0x84014d84     0x80    bnez a0,ffffffff84014e58 <decodeSetSpace+0x154>
    0x84014d86     0x82    addi a0,s3,32
    0x84014d8a     0x86    jal ra,ffffffff84011ffc <slotCapLongRunningDelete>
    0x84014d8e     0x8a    bnez a0,ffffffff84014e58 <decodeSetSpace+0x154>
    0x84014d90     0x8c    beqz s6,ffffffff84014da4 <decodeSetSpace+0xa0>
    0x84014d94     0x90    mv a2,s5
    0x84014d96     0x92    ld a3,136(sp)         ; stack access
    0x84014d98     0x94    mv a1,s6
    0x84014d9a     0x96    li a0,0
    0x84014d9c     0x98    jal ra,ffffffff84012036 <updateCapData>
    0x84014da0     0x9c    sd a1,136(sp)         ; stack access
    0x84014da2     0x9e    mv s9,a0
    0x84014da4     0xa0    mv a2,s9
    0x84014da6     0xa2    ld a3,136(sp)         ; stack access
    0x84014da8     0xa4    mv a1,s0
    0x84014daa     0xa6    addi a0,sp,88
    0x84014dac     0xa8    jal ra,ffffffff84011eca <deriveCap>
    0x84014db0     0xac    ld a0,88(sp)          ; stack access
    0x84014db2     0xae    bnez a0,ffffffff84014e3e <decodeSetSpace+0x13a>
    0x84014db4     0xb0    ld s3,96(sp)          ; stack access
    0x84014db6     0xb2    ld a5,104(sp)         ; stack access
    0x84014db8     0xb4    sd a5,136(sp)         ; stack access
    0x84014dba     0xb6    srli a4,s3,0x3b
    0x84014dbe     0xba    li a5,10
    0x84014dc0     0xbc    bne a4,a5,ffffffff84014e66 <decodeSetSpace+0x162>
    0x84014dc4     0xc0    beqz s8,ffffffff84014dd8 <decodeSetSpace+0xd4>
    0x84014dc8     0xc4    ld a2,112(sp)         ; stack access
    0x84014dca     0xc6    ld a3,120(sp)         ; stack access
    0x84014dcc     0xc8    mv a1,s8
    0x84014dce     0xca    li a0,0
    0x84014dd0     0xcc    jal ra,ffffffff84012036 <updateCapData>
    0x84014dd4     0xd0    sd a0,112(sp)         ; stack access
    0x84014dd6     0xd2    sd a1,120(sp)         ; stack access
    0x84014dd8     0xd4    ld a2,112(sp)         ; stack access
    0x84014dda     0xd6    ld a3,120(sp)         ; stack access
    0x84014ddc     0xd8    mv a1,s2
    0x84014dde     0xda    addi a0,sp,88
    0x84014de0     0xdc    jal ra,ffffffff84011eca <deriveCap>
    0x84014de4     0xe0    ld a0,88(sp)          ; stack access
    0x84014de6     0xe2    bnez a0,ffffffff84014e3e <decodeSetSpace+0x13a>
    0x84014de8     0xe4    ld a0,96(sp)          ; stack access
    0x84014dea     0xe6    sd a0,112(sp)         ; stack access
    0x84014dec     0xe8    ld a1,104(sp)         ; stack access
    0x84014dee     0xea    sd a1,120(sp)         ; stack access
    0x84014df0     0xec    jal ra,ffffffff8401098e <isValidVTableRoot>
    0x84014df4     0xf0    beqz a0,ffffffff84014e74 <decodeSetSpace+0x170>
    0x84014df6     0xf2    li a1,2
    0x84014df8     0xf4    auipc a5,0x19
    0x84014dfc     0xf8    addi a5,a5,-1376 # ffffffff8402d898 <ksCurThread>
    0x84014e00     0xfc    ld a0,0(a5)
    0x84014e02     0xfe    jal ra,ffffffff84012404 <setThreadState>
    0x84014e06    0x102    li a5,4
    0x84014e08    0x104    sd a5,56(sp)          ; stack access
    0x84014e0a    0x106    sd zero,48(sp)        ; stack access
    0x84014e0c    0x108    sd zero,32(sp)        ; stack access
    0x84014e0e    0x10a    sd zero,40(sp)        ; stack access
    0x84014e10    0x10c    sd zero,24(sp)        ; stack access
    0x84014e12    0x10e    sd s2,16(sp)          ; stack access
    0x84014e14    0x110    ld a5,112(sp)         ; stack access
    0x84014e16    0x112    sd a5,0(sp)           ; stack access
    0x84014e18    0x114    ld a5,120(sp)         ; stack access
    0x84014e1a    0x116    sd a5,8(sp)           ; stack access
    0x84014e1c    0x118    mv a7,s0
    0x84014e1e    0x11a    mv a5,s3
    0x84014e20    0x11c    ld a6,136(sp)         ; stack access
    0x84014e22    0x11e    li a4,0
    0x84014e24    0x120    li a3,0
    0x84014e26    0x122    mv a2,s7
    0x84014e28    0x124    mv a1,s4
    0x84014e2a    0x126    mv a0,s1
    0x84014e2c    0x128    jal ra,ffffffff840146b6 <invokeTCB_ThreadControl>
    0x84014e30    0x12c    j ffffffff84014e3e <decodeSetSpace+0x13a>
    0x84014e32    0x12e    li a5,7
    0x84014e34    0x130    auipc a4,0x8
    0x84014e38    0x134    sd a5,1732(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014e3c    0x138    li a0,3
    0x84014e3e    0x13a    ld ra,248(sp)         ; stack access
    0x84014e40    0x13c    ld s0,240(sp)         ; stack access
    0x84014e42    0x13e    ld s1,232(sp)         ; stack access
    0x84014e44    0x140    ld s2,224(sp)         ; stack access
    0x84014e46    0x142    ld s3,216(sp)         ; stack access
    0x84014e48    0x144    ld s4,208(sp)         ; stack access
    0x84014e4a    0x146    ld s5,200(sp)         ; stack access
    0x84014e4c    0x148    ld s6,192(sp)         ; stack access
    0x84014e4e    0x14a    ld s7,184(sp)         ; stack access
    0x84014e50    0x14c    ld s8,176(sp)         ; stack access
    0x84014e52    0x14e    ld s9,168(sp)         ; stack access
    0x84014e54    0x150    addi sp,sp,256
    0x84014e56    0x152    ret
    0x84014e58    0x154    li a5,3
    0x84014e5a    0x156    auipc a4,0x8
    0x84014e5e    0x15a    sd a5,1694(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014e62    0x15e    li a0,3
    0x84014e64    0x160    j ffffffff84014e3e <decodeSetSpace+0x13a>
    0x84014e66    0x162    li a5,3
    0x84014e68    0x164    auipc a4,0x8
    0x84014e6c    0x168    sd a5,1680(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014e70    0x16c    li a0,3
    0x84014e72    0x16e    j ffffffff84014e3e <decodeSetSpace+0x13a>
    0x84014e74    0x170    li a5,3
    0x84014e76    0x172    auipc a4,0x8
    0x84014e7a    0x176    sd a5,1666(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84014e7e    0x17a    li a0,3
    0x84014e80    0x17c    j ffffffff84014e3e <decodeSetSpace+0x13a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
151 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 258 nodes.

Section sendIPC (260 of 271)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 139 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `sendIPC`:

    0x84013f4a      0x0    addi sp,sp,-80
    0x84013f4c      0x2    sd ra,72(sp)          ; stack access
    0x84013f4e      0x4    sd s0,64(sp)          ; stack access
    0x84013f50      0x6    sd s1,56(sp)          ; stack access
    0x84013f52      0x8    sd s2,48(sp)          ; stack access
    0x84013f54      0xa    sd s3,40(sp)          ; stack access
    0x84013f56      0xc    sd s4,32(sp)          ; stack access
    0x84013f58      0xe    sd s5,24(sp)          ; stack access
    0x84013f5a     0x10    sd s6,16(sp)          ; stack access
    0x84013f5c     0x12    mv s4,a1
    0x84013f5e     0x14    mv s6,a2
    0x84013f60     0x16    mv s3,a3
    0x84013f62     0x18    mv s5,a4
    0x84013f64     0x1a    mv s1,a5
    0x84013f66     0x1c    mv s0,a6
    0x84013f68     0x1e    ld a4,0(a6)
    0x84013f6c     0x22    andi a5,a4,3
    0x84013f70     0x26    li a3,1
    0x84013f72     0x28    bgeu a3,a5,ffffffff84013f90 <sendIPC+0x46>
    0x84013f76     0x2c    li a3,2
    0x84013f78     0x2e    beq a5,a3,ffffffff8401402e <sendIPC+0xe4>
    0x84013f7c     0x32    ld ra,72(sp)          ; stack access
    0x84013f7e     0x34    ld s0,64(sp)          ; stack access
    0x84013f80     0x36    ld s1,56(sp)          ; stack access
    0x84013f82     0x38    ld s2,48(sp)          ; stack access
    0x84013f84     0x3a    ld s3,40(sp)          ; stack access
    0x84013f86     0x3c    ld s4,32(sp)          ; stack access
    0x84013f88     0x3e    ld s5,24(sp)          ; stack access
    0x84013f8a     0x40    ld s6,16(sp)          ; stack access
    0x84013f8c     0x42    addi sp,sp,80
    0x84013f8e     0x44    ret
    0x84013f90     0x46    beqz a0,ffffffff84013f7c <sendIPC+0x32>
    0x84013f92     0x48    ld a5,280(s1)
    0x84013f96     0x4c    srli a5,a5,0x27
    0x84013f98     0x4e    slli a5,a5,0x27
    0x84013f9a     0x50    lui a4,0xe0000
    0x84013f9e     0x54    srli a4,a4,0x19
    0x84013fa0     0x56    and a4,a6,a4
    0x84013fa4     0x5a    or a5,a5,a4
    0x84013fa6     0x5c    ori a5,a5,4
    0x84013faa     0x60    sd a5,280(s1)
    0x84013fae     0x64    sd a2,296(s1)
    0x84013fb2     0x68    ld a5,288(s1)
    0x84013fb6     0x6c    slli s3,s3,0x3
    0x84013fb8     0x6e    andi s3,s3,8
    0x84013fbc     0x72    andi a5,a5,-13
    0x84013fbe     0x74    or a5,a5,s3
    0x84013fc2     0x78    slli s5,s5,0x2
    0x84013fc4     0x7a    andi s5,s5,4
    0x84013fc8     0x7e    or a5,a5,s5
    0x84013fcc     0x82    andi a5,a5,-3
    0x84013fce     0x84    slli s4,a1,0x1
    0x84013fd2     0x88    andi s4,s4,2
    0x84013fd6     0x8c    or s4,a5,s4
    0x84013fda     0x90    sd s4,288(s1)
    0x84013fde     0x94    mv a0,s1
    0x84013fe0     0x96    jal ra,ffffffff840123cc <scheduleTCB>
    0x84013fe4     0x9a    ld a2,8(s0)
    0x84013fe6     0x9c    ld a4,0(s0)
    0x84013fe8     0x9e    lui a5,0xf8000
    0x84013fec     0xa2    srli a5,a5,0x19
    0x84013fee     0xa4    and a5,a5,a4
    0x84013ff0     0xa6    slli a3,a4,0x19
    0x84013ff4     0xaa    bgez a3,ffffffff84013ffe <sendIPC+0xb4>
    0x84013ff8     0xae    li a4,-1
    0x84013ffa     0xb0    slli a4,a4,0x27
    0x84013ffc     0xb2    or a5,a5,a4
    0x84013ffe     0xb4    mv a4,a5
    0x84014000     0xb6    mv a3,s1
    0x84014002     0xb8    beqz a2,ffffffff8401400a <sendIPC+0xc0>
    0x84014004     0xba    mv a3,a2
    0x84014006     0xbc    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd2198>
    0x8401400a     0xc0    sd a4,416(s1)
    0x8401400e     0xc4    sd zero,408(s1)
    0x84014012     0xc8    ld a4,0(s0)
    0x84014014     0xca    sd a3,8(s0)
    0x84014016     0xcc    lui a5,0xf8000
    0x8401401a     0xd0    srli a5,a5,0x19
    0x8401401c     0xd2    and s1,s1,a5
    0x8401401e     0xd4    srli a5,a4,0x27
    0x84014022     0xd8    slli a5,a5,0x27
    0x84014024     0xda    or s1,s1,a5
    0x84014026     0xdc    ori s1,s1,1
    0x8401402a     0xe0    sd s1,0(s0)
    0x8401402c     0xe2    j ffffffff84013f7c <sendIPC+0x32>
    0x8401402e     0xe4    ld s2,8(a6)
    0x84014032     0xe8    lui a2,0xf8000
    0x84014036     0xec    srli a2,a2,0x19
    0x84014038     0xee    and a2,a2,a4
    0x8401403a     0xf0    slli a5,a4,0x19
    0x8401403e     0xf4    bgez a5,ffffffff84014048 <sendIPC+0xfe>
    0x84014042     0xf8    li a5,-1
    0x84014044     0xfa    slli a5,a5,0x27
    0x84014046     0xfc    or a2,a2,a5
    0x84014048     0xfe    mv a1,s2
    0x8401404a    0x100    mv a0,s2
    0x8401404c    0x102    jal ra,ffffffff84012b3a <tcbEPDequeue>
    0x84014050    0x106    sd a0,0(sp)           ; stack access
    0x84014052    0x108    sd a1,8(sp)           ; stack access
    0x84014054    0x10a    sd a0,8(s0)
    0x84014056    0x10c    ld a5,0(s0)
    0x84014058    0x10e    li a4,-1
    0x8401405a    0x110    slli a4,a4,0x27
    0x8401405c    0x112    addi a4,a4,3
    0x8401405e    0x114    and a5,a5,a4
    0x84014060    0x116    lui a4,0xf8000
    0x84014064    0x11a    srli a4,a4,0x19
    0x84014066    0x11c    and a1,a1,a4
    0x84014068    0x11e    or a5,a5,a1
    0x8401406a    0x120    beqz a0,ffffffff840140aa <sendIPC+0x160>
    0x8401406c    0x122    sd a5,0(s0)
    0x8401406e    0x124    mv a4,s2
    0x84014070    0x126    mv a3,s3
    0x84014072    0x128    mv a2,s6
    0x84014074    0x12a    mv a1,s0
    0x84014076    0x12c    mv a0,s1
    0x84014078    0x12e    jal ra,ffffffff84013e0e <doIPCTransfer>
    0x8401407c    0x132    ld s0,288(s2)
    0x84014080    0x136    li a1,1
    0x84014082    0x138    mv a0,s2
    0x84014084    0x13a    jal ra,ffffffff84012404 <setThreadState>
    0x84014088    0x13e    mv a0,s2
    0x8401408a    0x140    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x8401408e    0x144    beqz s4,ffffffff84013f7c <sendIPC+0x32>
    0x84014092    0x148    or s3,s3,s5
    0x84014096    0x14c    beqz s3,ffffffff840140b0 <sendIPC+0x166>
    0x8401409a    0x150    srli a2,s0,0x3
    0x8401409e    0x154    andi a2,a2,1
    0x840140a0    0x156    mv a1,s2
    0x840140a2    0x158    mv a0,s1
    0x840140a4    0x15a    jal ra,ffffffff84013b1c <setupCallerCap>
    0x840140a8    0x15e    j ffffffff84013f7c <sendIPC+0x32>
    0x840140aa    0x160    andi a5,a5,-4
    0x840140ac    0x162    sd a5,0(s0)
    0x840140ae    0x164    j ffffffff8401406e <sendIPC+0x124>
    0x840140b0    0x166    li a1,0
    0x840140b2    0x168    mv a0,s1
    0x840140b4    0x16a    jal ra,ffffffff84012404 <setThreadState>
    0x840140b8    0x16e    j ffffffff84013f7c <sendIPC+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
139 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 203 nodes.

Section finaliseSlot (261 of 271)
=================================

Deriving specifications
-----------------------

Section `finaliseSlot` consists of 175 instructions.


Stack analysis
---------------

Section `finaliseSlot` expects pointer to stack in a0.
27 stack accesses found. Annotated code for `finaliseSlot`:

    0x84012fca      0x0    addi sp,sp,-128
    0x84012fcc      0x2    sd ra,120(sp)         ; stack access
    0x84012fce      0x4    sd s0,112(sp)         ; stack access
    0x84012fd0      0x6    sd s1,104(sp)         ; stack access
    0x84012fd2      0x8    sd s2,96(sp)          ; stack access
    0x84012fd4      0xa    sd s3,88(sp)          ; stack access
    0x84012fd6      0xc    sd s4,80(sp)          ; stack access
    0x84012fd8      0xe    sd s5,72(sp)          ; stack access
    0x84012fda     0x10    sd s6,64(sp)          ; stack access
    0x84012fdc     0x12    sd s7,56(sp)          ; stack access
    0x84012fde     0x14    sd s8,48(sp)          ; stack access
    0x84012fe0     0x16    sd s9,40(sp)          ; stack access
    0x84012fe2     0x18    sd s10,32(sp)         ; stack access
    0x84012fe4     0x1a    mv s6,a0
    0x84012fe6     0x1c    mv s0,a1
    0x84012fe8     0x1e    mv s5,a2
    0x84012fea     0x20    li s1,1
    0x84012fec     0x22    li s2,18
    0x84012fee     0x24    li s3,64
    0x84012ff2     0x28    li s4,-1
    0x84012ff4     0x2a    li s7,4
    0x84012ff6     0x2c    j ffffffff84013034 <finaliseSlot+0x6a>
    0x84012ff8     0x2e    mv a0,s7
    0x84012ffa     0x30    j ffffffff8401306c <finaliseSlot+0xa2>
    0x84012ffc     0x32    jal ra,ffffffff84010294 <halt>
    0x84013000     0x36    mv a2,s1
    0x84013002     0x38    bnez a2,ffffffff84013096 <finaliseSlot+0xcc>
    0x84013004     0x3a    sd a5,0(s0)
    0x84013006     0x3c    sd a4,8(s0)
    0x84013008     0x3e    bnez s5,ffffffff8401313e <finaliseSlot+0x174>
    0x8401300c     0x42    beq a3,s2,ffffffff840130aa <finaliseSlot+0xe0>
    0x84013010     0x46    andi a3,a5,127
    0x84013014     0x4a    beq a3,s3,ffffffff840131c6 <finaliseSlot+0x1fc>
    0x84013018     0x4e    andi a0,a5,63
    0x8401301c     0x52    addiw a0,a0,1
    0x8401301e     0x54    sll a0,s1,a0
    0x84013022     0x58    neg a0,a0
    0x84013026     0x5c    and a0,a0,a4
    0x84013028     0x5e    mv a1,s0
    0x8401302a     0x60    jal ra,ffffffff84011684 <capSwapForDelete>
    0x8401302e     0x64    jal ra,ffffffff84011388 <preemptionPoint>
    0x84013032     0x68    bnez a0,ffffffff840130f2 <finaliseSlot+0x128>
    0x84013034     0x6a    ld a5,0(s0)
    0x84013036     0x6c    srli a5,a5,0x3b
    0x84013038     0x6e    beqz a5,ffffffff84013104 <finaliseSlot+0x13a>
    0x8401303a     0x70    mv a0,s0
    0x8401303c     0x72    jal ra,ffffffff84011fa4 <isFinalCapability>
    0x84013040     0x76    li a4,0
    0x84013042     0x78    mv a3,a0
    0x84013044     0x7a    ld a1,0(s0)
    0x84013046     0x7c    ld a2,8(s0)
    0x84013048     0x7e    mv a0,sp
    0x8401304a     0x80    jal ra,ffffffff84012e0e <finaliseCap>
    0x8401304e     0x84    ld a5,0(sp)           ; stack access
    0x84013050     0x86    ld a4,8(sp)           ; stack access
    0x84013052     0x88    ld a7,16(sp)          ; stack access
    0x84013054     0x8a    ld a6,24(sp)          ; stack access
    0x84013056     0x8c    srli a3,a5,0x3b
    0x8401305a     0x90    beqz a3,ffffffff84013000 <finaliseSlot+0x36>
    0x8401305c     0x92    bne a3,s2,ffffffff84012ffc <finaliseSlot+0x32>
    0x84013060     0x96    andi a2,a5,127
    0x84013064     0x9a    beq a2,s3,ffffffff84012ff8 <finaliseSlot+0x2e>
    0x84013068     0x9e    andi a0,a5,63
    0x8401306c     0xa2    addi a0,a0,1
    0x8401306e     0xa4    sll a1,s4,a0
    0x84013072     0xa8    not a1,a1
    0x84013076     0xac    and a1,a1,a4
    0x84013078     0xae    mv a2,s1
    0x8401307a     0xb0    beqz a1,ffffffff84013002 <finaliseSlot+0x38>
    0x8401307c     0xb2    li a2,0
    0x8401307e     0xb4    bne a1,s1,ffffffff84013002 <finaliseSlot+0x38>
    0x84013082     0xb8    sll a2,s1,a0
    0x84013086     0xbc    neg a2,a2
    0x8401308a     0xc0    and a2,a2,a4
    0x8401308c     0xc2    sub a2,s0,a2
    0x84013090     0xc6    seqz a2,a2
    0x84013094     0xca    j ffffffff84013002 <finaliseSlot+0x38>
    0x84013096     0xcc    sd zero,0(s6)
    0x8401309a     0xd0    li a5,1
    0x8401309c     0xd2    sd a5,8(s6)
    0x840130a0     0xd6    sd a7,16(s6)
    0x840130a4     0xda    sd a6,24(s6)
    0x840130a8     0xde    j ffffffff84013116 <finaliseSlot+0x14c>
    0x840130aa     0xe0    andi a3,a5,127
    0x840130ae     0xe4    beq a3,s3,ffffffff840131be <finaliseSlot+0x1f4>
    0x840130b2     0xe8    andi a3,a5,63
    0x840130b6     0xec    addiw a3,a3,1
    0x840130b8     0xee    sll a3,s1,a3
    0x840130bc     0xf2    neg a3,a3
    0x840130c0     0xf6    and a3,a3,a4
    0x840130c2     0xf8    bne s0,a3,ffffffff84013010 <finaliseSlot+0x46>
    0x840130c6     0xfc    sd zero,0(s6)         ; stack access
    0x840130ca    0x100    sd zero,8(s6)         ; stack access
    0x840130ce    0x104    sd a7,16(s6)          ; stack access
    0x840130d2    0x108    sd a6,24(s6)          ; stack access
    0x840130d6    0x10c    j ffffffff84013116 <finaliseSlot+0x14c>
    0x840130d8    0x10e    mv a5,s7
    0x840130da    0x110    j ffffffff84013190 <finaliseSlot+0x1c6>
    0x840130dc    0x112    jal ra,ffffffff84010294 <halt>
    0x840130e0    0x116    sd a0,0(s6)           ; stack access
    0x840130e4    0x11a    sd zero,8(s6)         ; stack access
    0x840130e8    0x11e    sd zero,16(s6)        ; stack access
    0x840130ec    0x122    sd zero,24(s6)        ; stack access
    0x840130f0    0x126    j ffffffff84013116 <finaliseSlot+0x14c>
    0x840130f2    0x128    sd a0,0(s6)
    0x840130f6    0x12c    sd zero,8(s6)
    0x840130fa    0x130    sd zero,16(s6)
    0x840130fe    0x134    sd zero,24(s6)
    0x84013102    0x138    j ffffffff84013116 <finaliseSlot+0x14c>
    0x84013104    0x13a    sd zero,0(s6)
    0x84013108    0x13e    li a5,1
    0x8401310a    0x140    sd a5,8(s6)
    0x8401310e    0x144    sd zero,16(s6)
    0x84013112    0x148    sd zero,24(s6)
    0x84013116    0x14c    mv a0,s6
    0x84013118    0x14e    ld ra,120(sp)
    0x8401311a    0x150    ld s0,112(sp)
    0x8401311c    0x152    ld s1,104(sp)
    0x8401311e    0x154    ld s2,96(sp)
    0x84013120    0x156    ld s3,88(sp)
    0x84013122    0x158    ld s4,80(sp)
    0x84013124    0x15a    ld s5,72(sp)
    0x84013126    0x15c    ld s6,64(sp)
    0x84013128    0x15e    ld s7,56(sp)
    0x8401312a    0x160    ld s8,48(sp)          ; stack access
    0x8401312c    0x162    ld s9,40(sp)          ; stack access
    0x8401312e    0x164    ld s10,32(sp)         ; stack access
    0x84013130    0x166    addi sp,sp,128
    0x84013132    0x168    ret
    0x84013134    0x16a    andi s10,a4,-32
    0x84013138    0x16e    andi s8,a4,31
    0x8401313c    0x172    j ffffffff84013164 <finaliseSlot+0x19a>
    0x8401313e    0x174    andi s9,a5,127
    0x84013142    0x178    beq s9,s3,ffffffff84013134 <finaliseSlot+0x16a>
    0x84013146    0x17c    andi a5,a5,63
    0x8401314a    0x180    addi a5,a5,1
    0x8401314c    0x182    sll s10,s1,a5
    0x84013150    0x186    neg s10,s10
    0x84013154    0x18a    and s10,s10,a4
    0x84013158    0x18e    sll s8,s4,a5
    0x8401315c    0x192    not s8,s8
    0x84013160    0x196    and s8,s8,a4
    0x84013164    0x19a    slli a0,s8,0x5
    0x84013168    0x19e    addi a0,a0,-32
    0x8401316a    0x1a0    li a1,0
    0x8401316c    0x1a2    add a0,a0,s10
    0x8401316e    0x1a4    jal ra,ffffffff840131cc <cteDelete>
    0x84013172    0x1a8    bnez a0,ffffffff840130e0 <finaliseSlot+0x116>
    0x84013174    0x1aa    ld a5,0(s0)
    0x84013176    0x1ac    srli a4,a5,0x3b
    0x8401317a    0x1b0    beqz a4,ffffffff8401302e <finaliseSlot+0x64>
    0x8401317e    0x1b4    bne a4,s2,ffffffff840130dc <finaliseSlot+0x112>
    0x84013182    0x1b8    ld a3,8(s0)
    0x84013184    0x1ba    andi a2,a5,127
    0x84013188    0x1be    beq a2,s3,ffffffff840130d8 <finaliseSlot+0x10e>
    0x8401318c    0x1c2    andi a5,a5,63
    0x84013190    0x1c6    addi a5,a5,1
    0x84013192    0x1c8    sll a4,s1,a5
    0x84013196    0x1cc    neg a4,a4
    0x8401319a    0x1d0    and a4,a4,a3
    0x8401319c    0x1d2    bne s10,a4,ffffffff8401302e <finaliseSlot+0x64>
    0x840131a0    0x1d6    sll a5,s4,a5
    0x840131a4    0x1da    not a5,a5
    0x840131a8    0x1de    and a3,a3,a5
    0x840131aa    0x1e0    bne a3,s8,ffffffff8401302e <finaliseSlot+0x64>
    0x840131ae    0x1e4    bne a2,s9,ffffffff8401302e <finaliseSlot+0x64>
    0x840131b2    0x1e8    addi s8,s8,-1
    0x840131b4    0x1ea    and a5,s8,a5
    0x840131b8    0x1ee    or a4,a4,a5
    0x840131ba    0x1f0    sd a4,8(s0)
    0x840131bc    0x1f2    j ffffffff8401302e <finaliseSlot+0x64>
    0x840131be    0x1f4    andi a5,a4,-32
    0x840131c2    0x1f8    beq s0,a5,ffffffff840130c6 <finaliseSlot+0xfc>
    0x840131c6    0x1fc    andi a0,a4,-32
    0x840131ca    0x200    j ffffffff84013028 <finaliseSlot+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
175 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseSlot` has 283 nodes.

Section handleInvocation (262 of 271)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 115 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `handleInvocation`:

    0x84016800      0x0    addi sp,sp,-160
    0x84016802      0x2    sd ra,152(sp)         ; stack access
    0x84016804      0x4    sd s0,144(sp)         ; stack access
    0x84016806      0x6    sd s1,136(sp)         ; stack access
    0x84016808      0x8    sd s2,128(sp)         ; stack access
    0x8401680a      0xa    sd s3,120(sp)         ; stack access
    0x8401680c      0xc    sd s4,112(sp)         ; stack access
    0x8401680e      0xe    sd s5,104(sp)         ; stack access
    0x84016810     0x10    sd s6,96(sp)          ; stack access
    0x84016812     0x12    sd s7,88(sp)          ; stack access
    0x84016814     0x14    mv s6,a0
    0x84016816     0x16    mv s5,a1
    0x84016818     0x18    auipc a5,0x17
    0x8401681c     0x1c    addi a5,a5,128 # ffffffff8402d898 <ksCurThread>
    0x84016820     0x20    ld s0,0(a5)
    0x84016822     0x22    ld s1,80(s0)
    0x84016824     0x24    andi a4,s1,127
    0x84016828     0x28    li a5,120
    0x8401682c     0x2c    bgeu a5,a4,ffffffff84016838 <handleInvocation+0x38>
    0x84016830     0x30    andi s1,s1,-128
    0x84016834     0x34    ori s1,s1,120
    0x84016838     0x38    ld s3,72(s0)
    0x8401683c     0x3c    mv a2,s3
    0x8401683e     0x3e    mv a1,s0
    0x84016840     0x40    addi a0,sp,48
    0x84016842     0x42    jal ra,ffffffff840111c8 <lookupCapAndSlot>
    0x84016846     0x46    ld s7,48(sp)          ; stack access
    0x84016848     0x48    bnez s7,ffffffff840168cc <handleInvocation+0xcc>
    0x8401684c     0x4c    mv a1,s0
    0x8401684e     0x4e    li a0,0
    0x84016850     0x50    jal ra,ffffffff84010444 <lookupIPCBuffer>
    0x84016854     0x54    mv s4,a0
    0x84016856     0x56    mv a2,s1
    0x84016858     0x58    mv a1,a0
    0x8401685a     0x5a    mv a0,s0
    0x8401685c     0x5c    jal ra,ffffffff84013b74 <lookupExtraCaps>
    0x84016860     0x60    mv s2,a0
    0x84016862     0x62    bnez a0,ffffffff840168ec <handleInvocation+0xec>
    0x84016864     0x64    andi a1,s1,127
    0x84016868     0x68    li a5,4
    0x8401686a     0x6a    bltu a5,a1,ffffffff840168fc <handleInvocation+0xfc>
    0x8401686e     0x6e    auipc a5,0x7
    0x84016872     0x72    addi a5,a5,-878 # ffffffff8401d500 <current_extra_caps>
    0x84016876     0x76    ld a4,0(a5)
    0x84016878     0x78    sd a4,16(sp)          ; stack access
    0x8401687a     0x7a    ld a4,8(a5)
    0x8401687c     0x7c    sd a4,24(sp)          ; stack access
    0x8401687e     0x7e    ld a5,16(a5)
    0x84016880     0x80    sd a5,32(sp)          ; stack access
    0x84016882     0x82    sd s4,8(sp)           ; stack access
    0x84016884     0x84    sd s6,0(sp)           ; stack access
    0x84016886     0x86    mv a7,s5
    0x84016888     0x88    addi a6,sp,16
    0x8401688c     0x8c    ld a4,56(sp)          ; stack access
    0x8401688e     0x8e    ld a5,64(sp)          ; stack access
    0x84016890     0x90    ld a3,72(sp)          ; stack access
    0x84016892     0x92    mv a2,s3
    0x84016894     0x94    srli a0,s1,0xc
    0x84016898     0x98    jal ra,ffffffff840165b6 <decodeInvocation>
    0x8401689c     0x9c    li a5,4
    0x8401689e     0x9e    beq a0,a5,ffffffff8401692c <handleInvocation+0x12c>
    0x840168a2     0xa2    li a5,3
    0x840168a4     0xa4    beq a0,a5,ffffffff84016904 <handleInvocation+0x104>
    0x840168a8     0xa8    ld a5,280(s0)
    0x840168ac     0xac    andi a5,a5,15
    0x840168ae     0xae    li a4,2
    0x840168b0     0xb0    beq a5,a4,ffffffff84016914 <handleInvocation+0x114>
    0x840168b4     0xb4    mv a0,s2
    0x840168b6     0xb6    ld ra,152(sp)         ; stack access
    0x840168b8     0xb8    ld s0,144(sp)         ; stack access
    0x840168ba     0xba    ld s1,136(sp)         ; stack access
    0x840168bc     0xbc    ld s2,128(sp)         ; stack access
    0x840168be     0xbe    ld s3,120(sp)         ; stack access
    0x840168c0     0xc0    ld s4,112(sp)         ; stack access
    0x840168c2     0xc2    ld s5,104(sp)         ; stack access
    0x840168c4     0xc4    ld s6,96(sp)          ; stack access
    0x840168c6     0xc6    ld s7,88(sp)          ; stack access
    0x840168c8     0xc8    addi sp,sp,160
    0x840168ca     0xca    ret
    0x840168cc     0xcc    auipc a5,0x5
    0x840168d0     0xd0    addi a5,a5,1972 # ffffffff8401c080 <current_fault>
    0x840168d4     0xd4    li a4,1
    0x840168d6     0xd6    sd a4,0(a5)
    0x840168d8     0xd8    sd s3,8(a5)
    0x840168dc     0xdc    mv s2,s5
    0x840168de     0xde    beqz s5,ffffffff840168b4 <handleInvocation+0xb4>
    0x840168e2     0xe2    mv a0,s0
    0x840168e4     0xe4    jal ra,ffffffff840141a4 <handleFault>
    0x840168e8     0xe8    li s2,0
    0x840168ea     0xea    j ffffffff840168b4 <handleInvocation+0xb4>
    0x840168ec     0xec    mv s2,s5
    0x840168ee     0xee    beqz s5,ffffffff840168b4 <handleInvocation+0xb4>
    0x840168f2     0xf2    mv a0,s0
    0x840168f4     0xf4    jal ra,ffffffff840141a4 <handleFault>
    0x840168f8     0xf8    mv s2,s7
    0x840168fa     0xfa    j ffffffff840168b4 <handleInvocation+0xb4>
    0x840168fc     0xfc    bnez s4,ffffffff8401686e <handleInvocation+0x6e>
    0x84016900    0x100    li a1,4
    0x84016902    0x102    j ffffffff8401686e <handleInvocation+0x6e>
    0x84016904    0x104    bnez s6,ffffffff8401690c <handleInvocation+0x10c>
    0x84016908    0x108    mv s2,s6
    0x8401690a    0x10a    j ffffffff840168b4 <handleInvocation+0xb4>
    0x8401690c    0x10c    mv a0,s0
    0x8401690e    0x10e    jal ra,ffffffff84015742 <replyFromKernel_error>
    0x84016912    0x112    j ffffffff840168b4 <handleInvocation+0xb4>
    0x84016914    0x114    bnez s6,ffffffff84016922 <handleInvocation+0x122>
    0x84016918    0x118    li a1,1
    0x8401691a    0x11a    mv a0,s0
    0x8401691c    0x11c    jal ra,ffffffff84012404 <setThreadState>
    0x84016920    0x120    j ffffffff840168b4 <handleInvocation+0xb4>
    0x84016922    0x122    sd zero,72(s0)
    0x84016926    0x126    sd zero,80(s0)
    0x8401692a    0x12a    j ffffffff84016918 <handleInvocation+0x118>
    0x8401692c    0x12c    mv s2,a0
    0x8401692e    0x12e    j ffffffff840168b4 <handleInvocation+0xb4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
115 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 186 nodes.

Section decodeTCBConfigure (263 of 271)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 181 instructions.


Stack analysis
---------------

72 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x8401480c      0x0    addi sp,sp,-272
    0x8401480e      0x2    sd ra,264(sp)         ; stack access
    0x84014810      0x4    sd s0,256(sp)         ; stack access
    0x84014812      0x6    sd s1,248(sp)         ; stack access
    0x84014814      0x8    sd s2,240(sp)         ; stack access
    0x84014816      0xa    sd s3,232(sp)         ; stack access
    0x84014818      0xc    sd s4,224(sp)         ; stack access
    0x8401481a      0xe    sd s5,216(sp)         ; stack access
    0x8401481c     0x10    sd s6,208(sp)         ; stack access
    0x8401481e     0x12    sd s7,200(sp)         ; stack access
    0x84014820     0x14    sd s8,192(sp)         ; stack access
    0x84014822     0x16    sd s9,184(sp)         ; stack access
    0x84014824     0x18    sd s10,176(sp)        ; stack access
    0x84014826     0x1a    sd s11,168(sp)        ; stack access
    0x84014828     0x1c    sd a0,64(sp)          ; stack access
    0x8401482a     0x1e    sd a1,72(sp)          ; stack access
    0x8401482c     0x20    li a5,3
    0x8401482e     0x22    bgeu a5,a2,ffffffff84014962 <decodeTCBConfigure+0x156>
    0x84014832     0x26    ld s0,0(a4)
    0x84014834     0x28    beqz s0,ffffffff84014962 <decodeTCBConfigure+0x156>
    0x84014838     0x2c    ld s2,8(a4)
    0x8401483c     0x30    beqz s2,ffffffff84014962 <decodeTCBConfigure+0x156>
    0x84014840     0x34    ld s1,16(a4)
    0x84014842     0x36    beqz s1,ffffffff84014962 <decodeTCBConfigure+0x156>
    0x84014846     0x3a    mv s5,a3
    0x84014848     0x3c    auipc a5,0x19
    0x8401484c     0x40    addi a5,a5,80 # ffffffff8402d898 <ksCurThread>
    0x84014850     0x44    ld a5,0(a5)
    0x84014852     0x46    ld s9,88(a5)
    0x84014856     0x4a    ld s7,96(a5)
    0x8401485a     0x4e    ld s8,104(a5)
    0x8401485e     0x52    ld s6,112(a5)
    0x84014862     0x56    ld s4,0(s0)
    0x84014866     0x5a    sd s4,128(sp)         ; stack access
    0x84014868     0x5c    ld a5,8(s0)
    0x8401486a     0x5e    sd a5,136(sp)         ; stack access
    0x8401486c     0x60    mv s10,s4
    0x8401486e     0x62    ld a5,0(s2)
    0x84014872     0x66    sd a5,112(sp)         ; stack access
    0x84014874     0x68    ld a5,8(s2)
    0x84014878     0x6c    sd a5,120(sp)         ; stack access
    0x8401487a     0x6e    ld a5,0(s1)
    0x8401487c     0x70    sd a5,144(sp)         ; stack access
    0x8401487e     0x72    ld a5,8(s1)
    0x84014880     0x74    sd a5,152(sp)         ; stack access
    0x84014882     0x76    bnez s6,ffffffff8401498c <decodeTCBConfigure+0x180>
    0x84014886     0x7a    li s1,0
    0x84014888     0x7c    ld a5,64(sp)          ; stack access
    0x8401488a     0x7e    slli s3,a5,0x19
    0x8401488e     0x82    srli s3,s3,0x19
    0x84014892     0x86    slli a4,a5,0x19
    0x84014896     0x8a    bgez a4,ffffffff840148a2 <decodeTCBConfigure+0x96>
    0x8401489a     0x8e    li a5,-1
    0x8401489c     0x90    slli a5,a5,0x27
    0x8401489e     0x92    or s3,s3,a5
    0x840148a2     0x96    andi s11,s3,-1024
    0x840148a6     0x9a    mv a0,s11
    0x840148a8     0x9c    jal ra,ffffffff84011ffc <slotCapLongRunningDelete>
    0x840148ac     0xa0    bnez a0,ffffffff840149b0 <decodeTCBConfigure+0x1a4>
    0x840148b0     0xa4    addi a0,s11,32 # 1020 <KERNEL_OFFSET-0xfffffffeffffefe0>
    0x840148b4     0xa8    jal ra,ffffffff84011ffc <slotCapLongRunningDelete>
    0x840148b8     0xac    bnez a0,ffffffff840149b0 <decodeTCBConfigure+0x1a4>
    0x840148bc     0xb0    beqz s7,ffffffff840148d0 <decodeTCBConfigure+0xc4>
    0x840148c0     0xb4    mv a2,s4
    0x840148c2     0xb6    ld a3,136(sp)         ; stack access
    0x840148c4     0xb8    mv a1,s7
    0x840148c6     0xba    li a0,0
    0x840148c8     0xbc    jal ra,ffffffff84012036 <updateCapData>
    0x840148cc     0xc0    sd a1,136(sp)         ; stack access
    0x840148ce     0xc2    mv s10,a0
    0x840148d0     0xc4    mv a2,s10
    0x840148d2     0xc6    ld a3,136(sp)         ; stack access
    0x840148d4     0xc8    mv a1,s0
    0x840148d6     0xca    addi a0,sp,88
    0x840148d8     0xcc    jal ra,ffffffff84011eca <deriveCap>
    0x840148dc     0xd0    ld a0,88(sp)          ; stack access
    0x840148de     0xd2    bnez a0,ffffffff8401496e <decodeTCBConfigure+0x162>
    0x840148e0     0xd4    ld s4,96(sp)          ; stack access
    0x840148e2     0xd6    ld a5,104(sp)         ; stack access
    0x840148e4     0xd8    sd a5,136(sp)         ; stack access
    0x840148e6     0xda    srli a4,s4,0x3b
    0x840148ea     0xde    li a5,10
    0x840148ec     0xe0    bne a4,a5,ffffffff840149be <decodeTCBConfigure+0x1b2>
    0x840148f0     0xe4    beqz s8,ffffffff84014904 <decodeTCBConfigure+0xf8>
    0x840148f4     0xe8    ld a2,112(sp)         ; stack access
    0x840148f6     0xea    ld a3,120(sp)         ; stack access
    0x840148f8     0xec    mv a1,s8
    0x840148fa     0xee    li a0,0
    0x840148fc     0xf0    jal ra,ffffffff84012036 <updateCapData>
    0x84014900     0xf4    sd a0,112(sp)         ; stack access
    0x84014902     0xf6    sd a1,120(sp)         ; stack access
    0x84014904     0xf8    ld a2,112(sp)         ; stack access
    0x84014906     0xfa    ld a3,120(sp)         ; stack access
    0x84014908     0xfc    mv a1,s2
    0x8401490a     0xfe    addi a0,sp,88
    0x8401490c    0x100    jal ra,ffffffff84011eca <deriveCap>
    0x84014910    0x104    ld a0,88(sp)          ; stack access
    0x84014912    0x106    bnez a0,ffffffff8401496e <decodeTCBConfigure+0x162>
    0x84014914    0x108    ld a0,96(sp)          ; stack access
    0x84014916    0x10a    sd a0,112(sp)         ; stack access
    0x84014918    0x10c    ld a1,104(sp)         ; stack access
    0x8401491a    0x10e    sd a1,120(sp)         ; stack access
    0x8401491c    0x110    jal ra,ffffffff8401098e <isValidVTableRoot>
    0x84014920    0x114    beqz a0,ffffffff840149cc <decodeTCBConfigure+0x1c0>
    0x84014922    0x116    li a1,2
    0x84014924    0x118    auipc a5,0x19
    0x84014928    0x11c    addi a5,a5,-140 # ffffffff8402d898 <ksCurThread>
    0x8401492c    0x120    ld a0,0(a5)
    0x8401492e    0x122    jal ra,ffffffff84012404 <setThreadState>
    0x84014932    0x126    li a5,6
    0x84014934    0x128    sd a5,56(sp)          ; stack access
    0x84014936    0x12a    sd s1,48(sp)          ; stack access
    0x84014938    0x12c    ld a5,144(sp)         ; stack access
    0x8401493a    0x12e    sd a5,32(sp)          ; stack access
    0x8401493c    0x130    ld a5,152(sp)         ; stack access
    0x8401493e    0x132    sd a5,40(sp)          ; stack access
    0x84014940    0x134    sd s6,24(sp)          ; stack access
    0x84014942    0x136    sd s2,16(sp)          ; stack access
    0x84014944    0x138    ld a5,112(sp)         ; stack access
    0x84014946    0x13a    sd a5,0(sp)           ; stack access
    0x84014948    0x13c    ld a5,120(sp)         ; stack access
    0x8401494a    0x13e    sd a5,8(sp)           ; stack access
    0x8401494c    0x140    mv a7,s0
    0x8401494e    0x142    mv a5,s4
    0x84014950    0x144    ld a6,136(sp)         ; stack access
    0x84014952    0x146    li a4,0
    0x84014954    0x148    li a3,0
    0x84014956    0x14a    mv a2,s9
    0x84014958    0x14c    mv a1,s5
    0x8401495a    0x14e    mv a0,s3
    0x8401495c    0x150    jal ra,ffffffff840146b6 <invokeTCB_ThreadControl>
    0x84014960    0x154    j ffffffff8401496e <decodeTCBConfigure+0x162>
    0x84014962    0x156    li a5,7
    0x84014964    0x158    auipc a4,0x9
    0x84014968    0x15c    sd a5,-1132(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401496c    0x160    li a0,3
    0x8401496e    0x162    ld ra,264(sp)         ; stack access
    0x84014970    0x164    ld s0,256(sp)         ; stack access
    0x84014972    0x166    ld s1,248(sp)         ; stack access
    0x84014974    0x168    ld s2,240(sp)         ; stack access
    0x84014976    0x16a    ld s3,232(sp)         ; stack access
    0x84014978    0x16c    ld s4,224(sp)         ; stack access
    0x8401497a    0x16e    ld s5,216(sp)         ; stack access
    0x8401497c    0x170    ld s6,208(sp)         ; stack access
    0x8401497e    0x172    ld s7,200(sp)         ; stack access
    0x84014980    0x174    ld s8,192(sp)         ; stack access
    0x84014982    0x176    ld s9,184(sp)         ; stack access
    0x84014984    0x178    ld s10,176(sp)        ; stack access
    0x84014986    0x17a    ld s11,168(sp)        ; stack access
    0x84014988    0x17c    addi sp,sp,272
    0x8401498a    0x17e    ret
    0x8401498c    0x180    ld a2,144(sp)         ; stack access
    0x8401498e    0x182    mv a3,a5
    0x84014990    0x184    mv a1,s1
    0x84014992    0x186    addi a0,sp,88
    0x84014994    0x188    jal ra,ffffffff84011eca <deriveCap>
    0x84014998    0x18c    ld a0,88(sp)          ; stack access
    0x8401499a    0x18e    bnez a0,ffffffff8401496e <decodeTCBConfigure+0x162>
    0x8401499c    0x190    ld a1,96(sp)          ; stack access
    0x8401499e    0x192    sd a1,144(sp)         ; stack access
    0x840149a0    0x194    ld a2,104(sp)         ; stack access
    0x840149a2    0x196    sd a2,152(sp)         ; stack access
    0x840149a4    0x198    mv a0,s6
    0x840149a6    0x19a    jal ra,ffffffff840109a4 <checkValidIPCBuffer>
    0x840149aa    0x19e    beqz a0,ffffffff84014888 <decodeTCBConfigure+0x7c>
    0x840149ae    0x1a2    j ffffffff8401496e <decodeTCBConfigure+0x162>
    0x840149b0    0x1a4    li a5,3
    0x840149b2    0x1a6    auipc a4,0x9
    0x840149b6    0x1aa    sd a5,-1210(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840149ba    0x1ae    li a0,3
    0x840149bc    0x1b0    j ffffffff8401496e <decodeTCBConfigure+0x162>
    0x840149be    0x1b2    li a5,3
    0x840149c0    0x1b4    auipc a4,0x9
    0x840149c4    0x1b8    sd a5,-1224(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840149c8    0x1bc    li a0,3
    0x840149ca    0x1be    j ffffffff8401496e <decodeTCBConfigure+0x162>
    0x840149cc    0x1c0    li a5,3
    0x840149ce    0x1c2    auipc a4,0x9
    0x840149d2    0x1c6    sd a5,-1238(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840149d6    0x1ca    li a0,3
    0x840149d8    0x1cc    j ffffffff8401496e <decodeTCBConfigure+0x162>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
181 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 316 nodes.

Section receiveIPC (264 of 271)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 154 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `receiveIPC`:

    0x840142c8      0x0    addi sp,sp,-96
    0x840142ca      0x2    sd ra,88(sp)          ; stack access
    0x840142cc      0x4    sd s0,80(sp)          ; stack access
    0x840142ce      0x6    sd s1,72(sp)          ; stack access
    0x840142d0      0x8    sd s2,64(sp)          ; stack access
    0x840142d2      0xa    sd s3,56(sp)          ; stack access
    0x840142d4      0xc    sd s4,48(sp)          ; stack access
    0x840142d6      0xe    sd s5,40(sp)          ; stack access
    0x840142d8     0x10    mv s1,a0
    0x840142da     0x12    sd a1,0(sp)           ; stack access
    0x840142dc     0x14    sd a2,8(sp)           ; stack access
    0x840142de     0x16    mv s0,a1
    0x840142e0     0x18    slli a5,a1,0x19
    0x840142e4     0x1c    srli a5,a5,0x19
    0x840142e6     0x1e    slli a4,a1,0x19
    0x840142ea     0x22    bgez a4,ffffffff840142f4 <receiveIPC+0x2c>
    0x840142ee     0x26    li a4,-1
    0x840142f0     0x28    slli a4,a4,0x27
    0x840142f2     0x2a    or a5,a5,a4
    0x840142f4     0x2c    mv s2,a5
    0x840142f6     0x2e    ld a0,304(s1)
    0x840142fa     0x32    beqz a0,ffffffff84014306 <receiveIPC+0x3e>
    0x840142fc     0x34    ld a4,0(a0)
    0x840142fe     0x36    andi a4,a4,3
    0x84014300     0x38    li a2,2
    0x84014302     0x3a    beq a4,a2,ffffffff8401432e <receiveIPC+0x66>
    0x84014306     0x3e    ld a1,0(s2)
    0x8401430a     0x42    andi a4,a1,3
    0x8401430e     0x46    li a2,1
    0x84014310     0x48    beq a4,a2,ffffffff840143c2 <receiveIPC+0xfa>
    0x84014314     0x4c    beqz a4,ffffffff84014336 <receiveIPC+0x6e>
    0x84014316     0x4e    li a2,2
    0x84014318     0x50    beq a4,a2,ffffffff84014336 <receiveIPC+0x6e>
    0x8401431c     0x54    ld ra,88(sp)          ; stack access
    0x8401431e     0x56    ld s0,80(sp)          ; stack access
    0x84014320     0x58    ld s1,72(sp)          ; stack access
    0x84014322     0x5a    ld s2,64(sp)          ; stack access
    0x84014324     0x5c    ld s3,56(sp)          ; stack access
    0x84014326     0x5e    ld s4,48(sp)          ; stack access
    0x84014328     0x60    ld s5,40(sp)          ; stack access
    0x8401432a     0x62    addi sp,sp,96
    0x8401432c     0x64    ret
    0x8401432e     0x66    mv a1,s1
    0x84014330     0x68    jal ra,ffffffff840118c6 <completeSignal>
    0x84014334     0x6c    j ffffffff8401431c <receiveIPC+0x54>
    0x84014336     0x6e    beqz a3,ffffffff840143bc <receiveIPC+0xf4>
    0x84014338     0x70    ld a4,280(s1)
    0x8401433c     0x74    srli a4,a4,0x27
    0x8401433e     0x76    slli a4,a4,0x27
    0x84014340     0x78    lui a3,0xe0000
    0x84014344     0x7c    srli a3,a3,0x19
    0x84014346     0x7e    and a5,a5,a3
    0x84014348     0x80    or a5,a5,a4
    0x8401434a     0x82    ori a5,a5,3
    0x8401434e     0x86    sd a5,280(s1)
    0x84014352     0x8a    srli s0,s0,0x36
    0x84014354     0x8c    andi s0,s0,8
    0x84014356     0x8e    ld a5,288(s1)
    0x8401435a     0x92    andi a5,a5,-9
    0x8401435c     0x94    or s0,s0,a5
    0x8401435e     0x96    sd s0,288(s1)
    0x84014362     0x9a    mv a0,s1
    0x84014364     0x9c    jal ra,ffffffff840123cc <scheduleTCB>
    0x84014368     0xa0    ld a2,8(s2)
    0x8401436c     0xa4    ld a4,0(s2)
    0x84014370     0xa8    lui a5,0xf8000
    0x84014374     0xac    srli a5,a5,0x19
    0x84014376     0xae    and a5,a5,a4
    0x84014378     0xb0    slli a3,a4,0x19
    0x8401437c     0xb4    bgez a3,ffffffff84014386 <receiveIPC+0xbe>
    0x84014380     0xb8    li a4,-1
    0x84014382     0xba    slli a4,a4,0x27
    0x84014384     0xbc    or a5,a5,a4
    0x84014386     0xbe    mv a4,a5
    0x84014388     0xc0    mv a3,s1
    0x8401438a     0xc2    beqz a2,ffffffff84014392 <receiveIPC+0xca>
    0x8401438c     0xc4    mv a3,a2
    0x8401438e     0xc6    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd2198>
    0x84014392     0xca    sd a4,416(s1)
    0x84014396     0xce    sd zero,408(s1)
    0x8401439a     0xd2    ld a4,0(s2)
    0x8401439e     0xd6    sd a3,8(s2)
    0x840143a2     0xda    lui a5,0xf8000
    0x840143a6     0xde    srli a5,a5,0x19
    0x840143a8     0xe0    and s1,s1,a5
    0x840143aa     0xe2    srli a5,a4,0x27
    0x840143ae     0xe6    slli a5,a5,0x27
    0x840143b0     0xe8    or s1,s1,a5
    0x840143b2     0xea    ori s1,s1,2
    0x840143b6     0xee    sd s1,0(s2)
    0x840143ba     0xf2    j ffffffff8401431c <receiveIPC+0x54>
    0x840143bc     0xf4    sd zero,72(s1)
    0x840143c0     0xf8    j ffffffff8401431c <receiveIPC+0x54>
    0x840143c2     0xfa    ld s3,8(s2)
    0x840143c6     0xfe    lui a2,0xf8000
    0x840143ca    0x102    srli a2,a2,0x19
    0x840143cc    0x104    and a2,a2,a1
    0x840143ce    0x106    slli a5,a1,0x19
    0x840143d2    0x10a    bgez a5,ffffffff840143dc <receiveIPC+0x114>
    0x840143d6    0x10e    li a5,-1
    0x840143d8    0x110    slli a5,a5,0x27
    0x840143da    0x112    or a2,a2,a5
    0x840143dc    0x114    mv a1,s3
    0x840143de    0x116    mv a0,s3
    0x840143e0    0x118    jal ra,ffffffff84012b3a <tcbEPDequeue>
    0x840143e4    0x11c    sd a0,16(sp)          ; stack access
    0x840143e6    0x11e    sd a1,24(sp)          ; stack access
    0x840143e8    0x120    sd a0,8(s2)
    0x840143ec    0x124    ld a5,0(s2)
    0x840143f0    0x128    li a4,-1
    0x840143f2    0x12a    slli a4,a4,0x27
    0x840143f4    0x12c    addi a4,a4,3
    0x840143f6    0x12e    and a5,a5,a4
    0x840143f8    0x130    lui a4,0xf8000
    0x840143fc    0x134    srli a4,a4,0x19
    0x840143fe    0x136    and a1,a1,a4
    0x84014400    0x138    or a5,a5,a1
    0x84014402    0x13a    beqz a0,ffffffff8401444c <receiveIPC+0x184>
    0x84014404    0x13c    sd a5,0(s2)
    0x84014408    0x140    ld s4,288(s3)
    0x8401440c    0x144    srli s5,s4,0x3
    0x84014410    0x148    mv a4,s1
    0x84014412    0x14a    andi a3,s5,1
    0x84014416    0x14e    ld a2,296(s3)
    0x8401441a    0x152    mv a1,s2
    0x8401441c    0x154    mv a0,s3
    0x8401441e    0x156    jal ra,ffffffff84013e0e <doIPCTransfer>
    0x84014422    0x15a    ld a5,288(s3)
    0x84014426    0x15e    srli a5,a5,0x1
    0x84014428    0x160    andi a5,a5,1
    0x8401442a    0x162    beqz a5,ffffffff8401445e <receiveIPC+0x196>
    0x8401442c    0x164    srli s4,s4,0x2
    0x84014430    0x168    or s4,s4,s5
    0x84014434    0x16c    andi s4,s4,1
    0x84014438    0x170    beqz s4,ffffffff84014454 <receiveIPC+0x18c>
    0x8401443c    0x174    srli a2,s0,0x39
    0x84014440    0x178    andi a2,a2,1
    0x84014442    0x17a    mv a1,s1
    0x84014444    0x17c    mv a0,s3
    0x84014446    0x17e    jal ra,ffffffff84013b1c <setupCallerCap>
    0x8401444a    0x182    j ffffffff8401431c <receiveIPC+0x54>
    0x8401444c    0x184    andi a5,a5,-4
    0x8401444e    0x186    sd a5,0(s2)
    0x84014452    0x18a    j ffffffff84014408 <receiveIPC+0x140>
    0x84014454    0x18c    li a1,0
    0x84014456    0x18e    mv a0,s3
    0x84014458    0x190    jal ra,ffffffff84012404 <setThreadState>
    0x8401445c    0x194    j ffffffff8401431c <receiveIPC+0x54>
    0x8401445e    0x196    li a1,1
    0x84014460    0x198    mv a0,s3
    0x84014462    0x19a    jal ra,ffffffff84012404 <setThreadState>
    0x84014466    0x19e    mv a0,s3
    0x84014468    0x1a0    jal ra,ffffffff840125b8 <possibleSwitchTo>
    0x8401446c    0x1a4    j ffffffff8401431c <receiveIPC+0x54>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
154 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 231 nodes.

Section finaliseCap (265 of 271)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 150 instructions.

XOR.....
RVC_TFFFTT___FT___FT..

Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
29 stack accesses found. Annotated code for `finaliseCap`:

    0x84012e0e      0x0    addi sp,sp,-48
    0x84012e10      0x2    sd ra,40(sp)          ; stack access
    0x84012e12      0x4    sd s0,32(sp)          ; stack access
    0x84012e14      0x6    sd s1,24(sp)          ; stack access
    0x84012e16      0x8    sd s2,16(sp)          ; stack access
    0x84012e18      0xa    mv s0,a0
    0x84012e1a      0xc    sd a1,0(sp)           ; stack access
    0x84012e1c      0xe    sd a2,8(sp)           ; stack access
    0x84012e1e     0x10    mv s1,a1
    0x84012e20     0x12    slli a2,a1,0x4
    0x84012e24     0x16    bltz a2,ffffffff84012e46 <finaliseCap+0x38>
    0x84012e28     0x1a    srli a5,a1,0x3b
    0x84012e2c     0x1e    li a2,20
    0x84012e2e     0x20    bltu a2,a5,ffffffff84012ed0 <finaliseCap+0xc2>
    0x84012e32     0x24    slli a1,a5,0x2
    0x84012e36     0x28    auipc a0,0x5
    0x84012e3a     0x2c    addi a0,a0,-1310 # ffffffff84017918 <ksDomScheduleLength+0x7a8>
    0x84012e3e     0x30    add a1,a1,a0
    0x84012e40     0x32    lw a2,0(a1)
    0x84012e42     0x34    add a2,a2,a0
    0x84012e44     0x36    jr a2
    0x84012e46     0x38    ld a2,8(sp)           ; stack access
    0x84012e48     0x3a    jal ra,ffffffff84010c40 <Arch_finaliseCap>
    0x84012e4c     0x3e    mv a0,s0
    0x84012e4e     0x40    ld ra,40(sp)          ; stack access
    0x84012e50     0x42    ld s0,32(sp)          ; stack access
    0x84012e52     0x44    ld s1,24(sp)          ; stack access
    0x84012e54     0x46    ld s2,16(sp)          ; stack access
    0x84012e56     0x48    addi sp,sp,48
    0x84012e58     0x4a    ret
    0x84012e5a     0x4c    beqz a3,ffffffff84012e74 <finaliseCap+0x66>
    0x84012e5c     0x4e    slli a0,s1,0x19
    0x84012e60     0x52    srli a0,a0,0x19
    0x84012e62     0x54    slli a5,s1,0x19
    0x84012e66     0x58    bgez a5,ffffffff84012e70 <finaliseCap+0x62>
    0x84012e6a     0x5c    li a5,-1
    0x84012e6c     0x5e    slli a5,a5,0x27
    0x84012e6e     0x60    or a0,a0,a5
    0x84012e70     0x62    jal ra,ffffffff84012600 <cancelAllIPC>
    0x84012e74     0x66    sd zero,0(s0)
    0x84012e78     0x6a    sd zero,8(s0)
    0x84012e7c     0x6e    sd zero,16(s0)
    0x84012e80     0x72    sd zero,24(s0)
    0x84012e84     0x76    j ffffffff84012e4c <finaliseCap+0x3e>
    0x84012e86     0x78    beqz a3,ffffffff84012eac <finaliseCap+0x9e>
    0x84012e88     0x7a    slli s2,s1,0x19
    0x84012e8c     0x7e    srli s2,s2,0x19
    0x84012e90     0x82    slli a5,s1,0x19
    0x84012e94     0x86    bgez a5,ffffffff84012ea0 <finaliseCap+0x92>
    0x84012e98     0x8a    li a5,-1
    0x84012e9a     0x8c    slli a5,a5,0x27
    0x84012e9c     0x8e    or s2,s2,a5
    0x84012ea0     0x92    mv a0,s2
    0x84012ea2     0x94    jal ra,ffffffff840118e6 <unbindMaybeNotification>
    0x84012ea6     0x98    mv a0,s2
    0x84012ea8     0x9a    jal ra,ffffffff8401263e <cancelAllSignals>
    0x84012eac     0x9e    sd zero,0(s0)
    0x84012eb0     0xa2    sd zero,8(s0)
    0x84012eb4     0xa6    sd zero,16(s0)
    0x84012eb8     0xaa    sd zero,24(s0)
    0x84012ebc     0xae    j ffffffff84012e4c <finaliseCap+0x3e>
    0x84012ebe     0xb0    sd zero,0(s0)
    0x84012ec2     0xb4    sd zero,8(s0)
    0x84012ec6     0xb8    sd zero,16(s0)
    0x84012eca     0xbc    sd zero,24(s0)
    0x84012ece     0xc0    j ffffffff84012e4c <finaliseCap+0x3e>
    0x84012ed0     0xc2    bnez a4,ffffffff84012efa <finaliseCap+0xec>
    0x84012ed2     0xc4    ld s2,8(sp)           ; stack access
    0x84012ed4     0xc6    li a4,12
    0x84012ed6     0xc8    beq a5,a4,ffffffff84012f58 <finaliseCap+0x14a>
    0x84012eda     0xcc    bgeu a4,a5,ffffffff84012efe <finaliseCap+0xf0>
    0x84012ede     0xd0    li a4,16
    0x84012ee0     0xd2    beq a5,a4,ffffffff84012f9c <finaliseCap+0x18e>
    0x84012ee4     0xd6    li a4,18
    0x84012ee6     0xd8    bne a5,a4,ffffffff84012f9e <finaliseCap+0x190>
    0x84012eea     0xdc    sd s1,0(s0)           ; stack access
    0x84012eec     0xde    sd s2,8(s0)           ; stack access
    0x84012ef0     0xe2    sd zero,16(s0)        ; stack access
    0x84012ef4     0xe6    sd zero,24(s0)        ; stack access
    0x84012ef8     0xea    j ffffffff84012e4c <finaliseCap+0x3e>
    0x84012efa     0xec    jal ra,ffffffff84010294 <halt>
    0x84012efe     0xf0    li a4,10
    0x84012f00     0xf2    bne a5,a4,ffffffff84012f9e <finaliseCap+0x190>
    0x84012f04     0xf6    beqz a3,ffffffff84012f9e <finaliseCap+0x190>
    0x84012f06     0xf8    srli a3,s1,0x2f
    0x84012f0a     0xfc    andi a3,a3,63
    0x84012f0e    0x100    sext.w a2,a3
    0x84012f12    0x104    li a1,1
    0x84012f14    0x106    sll a0,a1,a2
    0x84012f18    0x10a    slli s1,s1,0x1
    0x84012f1a    0x10c    lui a5,0xfc000
    0x84012f1e    0x110    srli a5,a5,0x19
    0x84012f20    0x112    and a4,s1,a5
    0x84012f24    0x116    slli a1,a1,0x26
    0x84012f26    0x118    and s1,s1,a1
    0x84012f28    0x11a    beqz s1,ffffffff84012f30 <finaliseCap+0x122>
    0x84012f2a    0x11c    li a5,-1
    0x84012f2c    0x11e    slli a5,a5,0x27
    0x84012f2e    0x120    or a4,a4,a5
    0x84012f30    0x122    li a5,-7
    0x84012f32    0x124    slli a5,a5,0x3c
    0x84012f34    0x126    or a3,a3,a5
    0x84012f36    0x128    sd a3,0(s0)           ; stack access
    0x84012f38    0x12a    addiw a2,a2,1
    0x84012f3a    0x12c    li a5,-1
    0x84012f3c    0x12e    sll a5,a5,a2
    0x84012f40    0x132    not a5,a5
    0x84012f44    0x136    xor a3,a0,a4
    0x84012f48    0x13a    and a5,a5,a3
    0x84012f4a    0x13c    xor a5,a5,a4
    0x84012f4c    0x13e    sd a5,8(s0)           ; stack access
    0x84012f4e    0x140    sd zero,16(s0)        ; stack access
    0x84012f52    0x144    sd zero,24(s0)        ; stack access
    0x84012f56    0x148    j ffffffff84012e4c <finaliseCap+0x3e>
    0x84012f58    0x14a    beqz a3,ffffffff84012f9e <finaliseCap+0x190>
    0x84012f5a    0x14c    slli s2,s1,0x19
    0x84012f5e    0x150    srli s2,s2,0x19
    0x84012f62    0x154    slli a5,s1,0x19
    0x84012f66    0x158    bgez a5,ffffffff84012f72 <finaliseCap+0x164>
    0x84012f6a    0x15c    li a5,-1
    0x84012f6c    0x15e    slli a5,a5,0x27
    0x84012f6e    0x160    or s2,s2,a5
    0x84012f72    0x164    mv a0,s2
    0x84012f74    0x166    jal ra,ffffffff8401190c <unbindNotification>
    0x84012f78    0x16a    mv a0,s2
    0x84012f7a    0x16c    jal ra,ffffffff84012dd6 <suspend>
    0x84012f7e    0x170    li a5,-7
    0x84012f80    0x172    slli a5,a5,0x3c
    0x84012f82    0x174    addi a5,a5,64 # fffffffffc000040 <ki_end+0x77fd2040>
    0x84012f86    0x178    sd a5,0(s0)           ; stack access
    0x84012f88    0x17a    andi a5,s2,-1024
    0x84012f8c    0x17e    xori a5,a5,5
    0x84012f90    0x182    sd a5,8(s0)           ; stack access
    0x84012f92    0x184    sd zero,16(s0)        ; stack access
    0x84012f96    0x188    sd zero,24(s0)        ; stack access
    0x84012f9a    0x18c    j ffffffff84012e4c <finaliseCap+0x3e>
    0x84012f9c    0x18e    bnez a3,ffffffff84012fb0 <finaliseCap+0x1a2>
    0x84012f9e    0x190    sd zero,0(s0)         ; stack access
    0x84012fa2    0x194    sd zero,8(s0)         ; stack access
    0x84012fa6    0x198    sd zero,16(s0)        ; stack access
    0x84012faa    0x19c    sd zero,24(s0)        ; stack access
    0x84012fae    0x1a0    j ffffffff84012e4c <finaliseCap+0x3e>
    0x84012fb0    0x1a2    slli a0,s2,0x34
    0x84012fb4    0x1a6    srli a0,a0,0x34
    0x84012fb6    0x1a8    jal ra,ffffffff840138a2 <deletingIRQHandler>
    0x84012fba    0x1ac    sd zero,0(s0)
    0x84012fbe    0x1b0    sd zero,8(s0)
    0x84012fc2    0x1b4    sd s1,16(s0)
    0x84012fc4    0x1b6    sd s2,24(s0)          ; stack access
    0x84012fc8    0x1ba    j ffffffff84012e4c <finaliseCap+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
150 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 239 nodes.

Section handleSyscall (266 of 271)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 67 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleSyscall`:

    0x84016930     0x0    addi sp,sp,-16
    0x84016932     0x2    sd ra,8(sp)           ; stack access
    0x84016934     0x4    sd s0,0(sp)           ; stack access
    0x84016936     0x6    addi a0,a0,8
    0x84016938     0x8    li a5,7
    0x8401693a     0xa    bltu a5,a0,ffffffff840169e4 <handleSyscall+0xb4>
    0x8401693e     0xe    slli a0,a0,0x2
    0x84016940    0x10    auipc a4,0x1
    0x84016944    0x14    addi a4,a4,384 # ffffffff84017ac0 <__global_pointer$+0x154>
    0x84016948    0x18    add a0,a0,a4
    0x8401694a    0x1a    lw a5,0(a0)
    0x8401694c    0x1c    add a5,a5,a4
    0x8401694e    0x1e    jr a5
    0x84016950    0x20    li a1,1
    0x84016952    0x22    li a0,0
    0x84016954    0x24    jal ra,ffffffff84016800 <handleInvocation>
    0x84016958    0x28    beqz a0,ffffffff8401699e <handleSyscall+0x6e>
    0x8401695a    0x2a    jal ra,ffffffff84010ad0 <getActiveIRQ>
    0x8401695e    0x2e    sext.w a0,a0
    0x84016960    0x30    beqz a0,ffffffff8401699e <handleSyscall+0x6e>
    0x84016962    0x32    jal ra,ffffffff840139fc <handleInterrupt>
    0x84016966    0x36    j ffffffff8401699e <handleSyscall+0x6e>
    0x84016968    0x38    li a1,0
    0x8401696a    0x3a    li a0,0
    0x8401696c    0x3c    jal ra,ffffffff84016800 <handleInvocation>
    0x84016970    0x40    beqz a0,ffffffff8401699e <handleSyscall+0x6e>
    0x84016972    0x42    jal ra,ffffffff84010ad0 <getActiveIRQ>
    0x84016976    0x46    sext.w a0,a0
    0x84016978    0x48    beqz a0,ffffffff8401699e <handleSyscall+0x6e>
    0x8401697a    0x4a    jal ra,ffffffff840139fc <handleInterrupt>
    0x8401697e    0x4e    j ffffffff8401699e <handleSyscall+0x6e>
    0x84016980    0x50    li a1,1
    0x84016982    0x52    li a0,1
    0x84016984    0x54    jal ra,ffffffff84016800 <handleInvocation>
    0x84016988    0x58    beqz a0,ffffffff8401699e <handleSyscall+0x6e>
    0x8401698a    0x5a    jal ra,ffffffff84010ad0 <getActiveIRQ>
    0x8401698e    0x5e    sext.w a0,a0
    0x84016990    0x60    beqz a0,ffffffff8401699e <handleSyscall+0x6e>
    0x84016992    0x62    jal ra,ffffffff840139fc <handleInterrupt>
    0x84016996    0x66    j ffffffff8401699e <handleSyscall+0x6e>
    0x84016998    0x68    li a0,1
    0x8401699a    0x6a    jal ra,ffffffff8401446e <handleRecv>
    0x8401699e    0x6e    jal ra,ffffffff84012956 <schedule>
    0x840169a2    0x72    jal ra,ffffffff84012430 <activateThread>
    0x840169a6    0x76    li a0,0
    0x840169a8    0x78    ld ra,8(sp)
    0x840169aa    0x7a    ld s0,0(sp)
    0x840169ac    0x7c    addi sp,sp,16
    0x840169ae    0x7e    ret
    0x840169b0    0x80    jal ra,ffffffff84013ee8 <handleReply>
    0x840169b4    0x84    j ffffffff8401699e <handleSyscall+0x6e>
    0x840169b6    0x86    jal ra,ffffffff84013ee8 <handleReply>
    0x840169ba    0x8a    li a0,1
    0x840169bc    0x8c    jal ra,ffffffff8401446e <handleRecv>
    0x840169c0    0x90    j ffffffff8401699e <handleSyscall+0x6e>
    0x840169c2    0x92    li a0,0
    0x840169c4    0x94    jal ra,ffffffff8401446e <handleRecv>
    0x840169c8    0x98    j ffffffff8401699e <handleSyscall+0x6e>
    0x840169ca    0x9a    auipc s0,0x17
    0x840169ce    0x9e    addi s0,s0,-306 # ffffffff8402d898 <ksCurThread>
    0x840169d2    0xa2    ld a0,0(s0)
    0x840169d4    0xa4    jal ra,ffffffff8401278c <tcbSchedDequeue>
    0x840169d8    0xa8    ld a0,0(s0)
    0x840169da    0xaa    jal ra,ffffffff840126aa <tcbSchedAppend>
    0x840169de    0xae    jal ra,ffffffff84012398 <rescheduleRequired>
    0x840169e2    0xb2    j ffffffff8401699e <handleSyscall+0x6e>
    0x840169e4    0xb4    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
67 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 110 nodes.

Section decodeInvocation (267 of 271)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 217 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `decodeInvocation`:

    0x840165b6      0x0    addi sp,sp,-144
    0x840165b8      0x2    sd ra,136(sp)         ; stack access
    0x840165ba      0x4    sd s0,128(sp)         ; stack access
    0x840165bc      0x6    sd s1,120(sp)         ; stack access
    0x840165be      0x8    sd s2,112(sp)         ; stack access
    0x840165c0      0xa    sd s3,104(sp)         ; stack access
    0x840165c2      0xc    sd s4,96(sp)          ; stack access
    0x840165c4      0xe    mv s3,a3
    0x840165c6     0x10    sd a4,32(sp)          ; stack access
    0x840165c8     0x12    sd a5,40(sp)          ; stack access
    0x840165ca     0x14    mv s1,a4
    0x840165cc     0x16    mv s2,a5
    0x840165ce     0x18    srli a5,a4,0x3b
    0x840165d2     0x1c    andi s0,a5,1
    0x840165d6     0x20    bnez s0,ffffffff840165f2 <decodeInvocation+0x3c>
    0x840165d8     0x22    mv s4,a7
    0x840165da     0x24    li a4,20
    0x840165dc     0x26    bltu a4,a5,ffffffff840167fc <decodeInvocation+0x246>
    0x840165e0     0x2a    slli a5,a5,0x2
    0x840165e2     0x2c    auipc a4,0x1
    0x840165e6     0x30    addi a4,a4,1162 # ffffffff84017a6c <__global_pointer$+0x100>
    0x840165ea     0x34    add a5,a5,a4
    0x840165ec     0x36    lw a5,0(a5)
    0x840165ee     0x38    add a5,a5,a4
    0x840165f0     0x3a    jr a5
    0x840165f2     0x3c    ld a3,0(a6)
    0x840165f6     0x40    ld a4,8(a6)
    0x840165fa     0x44    ld a5,16(a6)
    0x840165fe     0x48    sd a3,0(sp)
    0x84016600     0x4a    sd a4,8(sp)
    0x84016602     0x4c    sd a5,16(sp)
    0x84016604     0x4e    ld a7,152(sp)
    0x84016606     0x50    mv a6,sp
    0x84016608     0x52    mv a4,s1
    0x8401660a     0x54    mv a5,s2
    0x8401660c     0x56    mv a3,s3
    0x8401660e     0x58    sext.w a1,a1
    0x84016610     0x5a    jal ra,ffffffff840158c4 <decodeRISCVMMUInvocation>
    0x84016614     0x5e    mv s0,a0
    0x84016616     0x60    mv a0,s0
    0x84016618     0x62    ld ra,136(sp)         ; stack access
    0x8401661a     0x64    ld s0,128(sp)         ; stack access
    0x8401661c     0x66    ld s1,120(sp)         ; stack access
    0x8401661e     0x68    ld s2,112(sp)         ; stack access
    0x84016620     0x6a    ld s3,104(sp)         ; stack access
    0x84016622     0x6c    ld s4,96(sp)          ; stack access
    0x84016624     0x6e    addi sp,sp,144
    0x84016626     0x70    ret
    0x84016628     0x72    auipc a5,0x7
    0x8401662c     0x76    addi a5,a5,-352 # ffffffff8401d4c8 <current_syscall_error>
    0x84016630     0x7a    li a4,2
    0x84016632     0x7c    sd a4,48(a5)
    0x84016634     0x7e    sd zero,8(a5)
    0x84016638     0x82    li s0,3
    0x8401663a     0x84    j ffffffff84016616 <decodeInvocation+0x60>
    0x8401663c     0x86    auipc a5,0x7
    0x84016640     0x8a    addi a5,a5,-372 # ffffffff8401d4c8 <current_syscall_error>
    0x84016644     0x8e    li a4,2
    0x84016646     0x90    sd a4,48(a5)
    0x84016648     0x92    sd zero,8(a5)
    0x8401664c     0x96    li s0,3
    0x8401664e     0x98    j ffffffff84016616 <decodeInvocation+0x60>
    0x84016650     0x9a    slli a5,s1,0x8
    0x84016654     0x9e    bgez a5,ffffffff84016696 <decodeInvocation+0xe0>
    0x84016658     0xa2    li a1,2
    0x8401665a     0xa4    auipc a5,0x17
    0x8401665e     0xa8    addi a5,a5,574 # ffffffff8402d898 <ksCurThread>
    0x84016662     0xac    ld a0,0(a5)
    0x84016664     0xae    jal ra,ffffffff84012404 <setThreadState>
    0x84016668     0xb2    slli a0,s1,0x19
    0x8401666c     0xb6    srli a0,a0,0x19
    0x8401666e     0xb8    slli a5,s1,0x19
    0x84016672     0xbc    bgez a5,ffffffff8401667c <decodeInvocation+0xc6>
    0x84016676     0xc0    li a5,-1
    0x84016678     0xc2    slli a5,a5,0x27
    0x8401667a     0xc4    or a0,a0,a5
    0x8401667c     0xc6    srli a3,s1,0x3a
    0x84016680     0xca    srli a2,s1,0x39
    0x84016684     0xce    ld a5,144(sp)
    0x84016686     0xd0    mv a4,s4
    0x84016688     0xd2    andi a3,a3,1
    0x8401668a     0xd4    andi a2,a2,1
    0x8401668c     0xd6    mv a1,s2
    0x8401668e     0xd8    jal ra,ffffffff8401429e <performInvocation_Endpoint>
    0x84016692     0xdc    mv s0,a0
    0x84016694     0xde    j ffffffff84016616 <decodeInvocation+0x60>
    0x84016696     0xe0    auipc a5,0x7
    0x8401669a     0xe4    addi a5,a5,-462 # ffffffff8401d4c8 <current_syscall_error>
    0x8401669e     0xe8    li a4,2
    0x840166a0     0xea    sd a4,48(a5)
    0x840166a2     0xec    sd zero,8(a5)
    0x840166a6     0xf0    li s0,3
    0x840166a8     0xf2    j ffffffff84016616 <decodeInvocation+0x60>
    0x840166aa     0xf4    slli a5,s1,0x6
    0x840166ae     0xf8    bgez a5,ffffffff840166de <decodeInvocation+0x128>
    0x840166b2     0xfc    li a1,2
    0x840166b4     0xfe    auipc a5,0x17
    0x840166b8    0x102    addi a5,a5,484 # ffffffff8402d898 <ksCurThread>
    0x840166bc    0x106    ld a0,0(a5)
    0x840166be    0x108    jal ra,ffffffff84012404 <setThreadState>
    0x840166c2    0x10c    slli a0,s1,0x19
    0x840166c6    0x110    srli a0,a0,0x19
    0x840166c8    0x112    slli a5,s1,0x19
    0x840166cc    0x116    bgez a5,ffffffff840166d6 <decodeInvocation+0x120>
    0x840166d0    0x11a    li a5,-1
    0x840166d2    0x11c    slli a5,a5,0x27
    0x840166d4    0x11e    or a0,a0,a5
    0x840166d6    0x120    mv a1,s2
    0x840166d8    0x122    jal ra,ffffffff84013900 <sendSignal>
    0x840166dc    0x126    j ffffffff84016616 <decodeInvocation+0x60>
    0x840166de    0x128    auipc a5,0x7
    0x840166e2    0x12c    addi a5,a5,-534 # ffffffff8401d4c8 <current_syscall_error>
    0x840166e6    0x130    li a4,2
    0x840166e8    0x132    sd a4,48(a5)
    0x840166ea    0x134    sd zero,8(a5)
    0x840166ee    0x138    li s0,3
    0x840166f0    0x13a    j ffffffff84016616 <decodeInvocation+0x60>
    0x840166f2    0x13c    andi a5,s1,1
    0x840166f6    0x140    bnez a5,ffffffff8401671a <decodeInvocation+0x164>
    0x840166f8    0x142    li a1,2
    0x840166fa    0x144    auipc a5,0x17
    0x840166fe    0x148    addi a5,a5,414 # ffffffff8402d898 <ksCurThread>
    0x84016702    0x14c    ld a0,0(a5)
    0x84016704    0x14e    jal ra,ffffffff84012404 <setThreadState>
    0x84016708    0x152    srli a2,s1,0x1
    0x8401670c    0x156    andi a2,a2,1
    0x8401670e    0x158    mv a1,s3
    0x84016710    0x15a    mv a0,s2
    0x84016712    0x15c    jal ra,ffffffff84013f2a <performInvocation_Reply>
    0x84016716    0x160    mv s0,a0
    0x84016718    0x162    j ffffffff84016616 <decodeInvocation+0x60>
    0x8401671a    0x164    auipc a5,0x7
    0x8401671e    0x168    addi a5,a5,-594 # ffffffff8401d4c8 <current_syscall_error>
    0x84016722    0x16c    li a4,2
    0x84016724    0x16e    sd a4,48(a5)
    0x84016726    0x170    sd zero,8(a5)
    0x8401672a    0x174    li s0,3
    0x8401672c    0x176    j ffffffff84016616 <decodeInvocation+0x60>
    0x8401672e    0x178    ld a5,0(a6)
    0x84016732    0x17c    sd a5,0(sp)
    0x84016734    0x17e    ld a5,8(a6)
    0x84016738    0x182    sd a5,8(sp)
    0x8401673a    0x184    ld a5,16(a6)
    0x8401673e    0x188    sd a5,16(sp)
    0x84016740    0x18a    ld a7,152(sp)
    0x84016742    0x18c    ld a6,144(sp)
    0x84016744    0x18e    mv a5,sp
    0x84016746    0x190    mv a4,a3
    0x84016748    0x192    ld a2,32(sp)
    0x8401674a    0x194    ld a3,40(sp)
    0x8401674c    0x196    jal ra,ffffffff8401546a <decodeTCBInvocation>
    0x84016750    0x19a    mv s0,a0
    0x84016752    0x19c    j ffffffff84016616 <decodeInvocation+0x60>
    0x84016754    0x19e    ld a5,0(a6)
    0x84016758    0x1a2    sd a5,0(sp)
    0x8401675a    0x1a4    ld a5,8(a6)
    0x8401675e    0x1a8    sd a5,8(sp)
    0x84016760    0x1aa    ld a5,16(a6)
    0x84016764    0x1ae    sd a5,16(sp)
    0x84016766    0x1b0    ld a3,152(sp)
    0x84016768    0x1b2    mv a2,sp
    0x8401676a    0x1b4    jal ra,ffffffff840145e8 <decodeDomainInvocation>
    0x8401676e    0x1b8    mv s0,a0
    0x84016770    0x1ba    j ffffffff84016616 <decodeInvocation+0x60>
    0x84016772    0x1bc    ld a5,0(a6)
    0x84016776    0x1c0    sd a5,0(sp)
    0x84016778    0x1c2    ld a5,8(a6)
    0x8401677c    0x1c6    sd a5,8(sp)
    0x8401677e    0x1c8    ld a5,16(a6)
    0x84016782    0x1cc    sd a5,16(sp)
    0x84016784    0x1ce    ld a5,152(sp)
    0x84016786    0x1d0    mv a4,sp
    0x84016788    0x1d2    ld a2,32(sp)
    0x8401678a    0x1d4    ld a3,40(sp)
    0x8401678c    0x1d6    jal ra,ffffffff840132ac <decodeCNodeInvocation>
    0x84016790    0x1da    mv s0,a0
    0x84016792    0x1dc    j ffffffff84016616 <decodeInvocation+0x60>
    0x84016794    0x1de    ld a5,0(a6)
    0x84016798    0x1e2    sd a5,0(sp)
    0x8401679a    0x1e4    ld a5,8(a6)
    0x8401679e    0x1e8    sd a5,8(sp)
    0x840167a0    0x1ea    ld a5,16(a6)
    0x840167a4    0x1ee    sd a5,16(sp)
    0x840167a6    0x1f0    ld a7,152(sp)
    0x840167a8    0x1f2    ld a6,144(sp)
    0x840167aa    0x1f4    mv a5,sp
    0x840167ac    0x1f6    ld a3,32(sp)
    0x840167ae    0x1f8    ld a4,40(sp)
    0x840167b0    0x1fa    mv a2,s3
    0x840167b2    0x1fc    jal ra,ffffffff840162d8 <decodeUntypedInvocation>
    0x840167b6    0x200    mv s0,a0
    0x840167b8    0x202    j ffffffff84016616 <decodeInvocation+0x60>
    0x840167ba    0x204    ld a5,0(a6)
    0x840167be    0x208    sd a5,0(sp)
    0x840167c0    0x20a    ld a5,8(a6)
    0x840167c4    0x20e    sd a5,8(sp)
    0x840167c6    0x210    ld a5,16(a6)
    0x840167ca    0x214    sd a5,16(sp)
    0x840167cc    0x216    ld a4,152(sp)
    0x840167ce    0x218    mv a3,sp
    0x840167d0    0x21a    mv a2,s3
    0x840167d2    0x21c    jal ra,ffffffff8401246e <decodeIRQControlInvocation>
    0x840167d6    0x220    mv s0,a0
    0x840167d8    0x222    j ffffffff84016616 <decodeInvocation+0x60>
    0x840167da    0x224    ld a5,0(a6)
    0x840167de    0x228    sd a5,0(sp)
    0x840167e0    0x22a    ld a5,8(a6)
    0x840167e4    0x22e    sd a5,8(sp)
    0x840167e6    0x230    ld a5,16(a6)
    0x840167ea    0x234    sd a5,16(sp)
    0x840167ec    0x236    slli a1,s2,0x34
    0x840167f0    0x23a    mv a2,sp
    0x840167f2    0x23c    srli a1,a1,0x34
    0x840167f4    0x23e    jal ra,ffffffff840137dc <decodeIRQHandlerInvocation>
    0x840167f8    0x242    mv s0,a0
    0x840167fa    0x244    j ffffffff84016616 <decodeInvocation+0x60>
    0x840167fc    0x246    jal ra,ffffffff84010294 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
217 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 332 nodes.

Section decodeRISCVMMUInvocation (268 of 271)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 773 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

55 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x840158c4      0x0    addi sp,sp,-192
    0x840158c6      0x2    sd ra,184(sp)         ; stack access
    0x840158c8      0x4    sd s0,176(sp)         ; stack access
    0x840158ca      0x6    sd s1,168(sp)         ; stack access
    0x840158cc      0x8    sd s2,160(sp)         ; stack access
    0x840158ce      0xa    sd s3,152(sp)         ; stack access
    0x840158d0      0xc    sd s4,144(sp)         ; stack access
    0x840158d2      0xe    sd s5,136(sp)         ; stack access
    0x840158d4     0x10    sd s6,128(sp)         ; stack access
    0x840158d6     0x12    sd s7,120(sp)         ; stack access
    0x840158d8     0x14    sd s8,112(sp)         ; stack access
    0x840158da     0x16    sd s9,104(sp)         ; stack access
    0x840158dc     0x18    mv s3,a3
    0x840158de     0x1a    sd a4,0(sp)           ; stack access
    0x840158e0     0x1c    sd a5,8(sp)           ; stack access
    0x840158e2     0x1e    mv s1,a4
    0x840158e4     0x20    ld s2,0(a6)
    0x840158e8     0x24    srli s0,a4,0x3b
    0x840158ec     0x28    li a5,3
    0x840158ee     0x2a    beq s0,a5,ffffffff840159a6 <decodeRISCVMMUInvocation+0xe2>
    0x840158f2     0x2e    bgeu a5,s0,ffffffff84015972 <decodeRISCVMMUInvocation+0xae>
    0x840158f6     0x32    li a5,11
    0x840158f8     0x34    beq s0,a5,ffffffff84015eec <decodeRISCVMMUInvocation+0x628>
    0x840158fc     0x38    li a5,13
    0x840158fe     0x3a    bne s0,a5,ffffffff8401613c <decodeRISCVMMUInvocation+0x878>
    0x84015902     0x3e    li a5,36
    0x84015906     0x42    bne a0,a5,ffffffff8401604e <decodeRISCVMMUInvocation+0x78a>
    0x8401590a     0x46    beqz s2,ffffffff8401605c <decodeRISCVMMUInvocation+0x798>
    0x8401590e     0x4a    ld s0,0(s2)
    0x84015912     0x4e    srli s0,s0,0x27
    0x84015914     0x50    andi s0,s0,1
    0x84015916     0x52    bnez s0,ffffffff8401606a <decodeRISCVMMUInvocation+0x7a6>
    0x8401591a     0x56    srli a3,a4,0x2b
    0x8401591e     0x5a    slli a3,a3,0x30
    0x84015920     0x5c    srli a3,a3,0x30
    0x84015922     0x5e    srli a5,a3,0x9
    0x84015926     0x62    slli a4,a5,0x3
    0x8401592a     0x66    auipc a5,0x6
    0x8401592e     0x6a    addi a5,a5,1918 # ffffffff8401c0a8 <riscvKSASIDTable>
    0x84015932     0x6e    add a5,a5,a4
    0x84015934     0x70    ld s3,0(a5)
    0x84015938     0x74    beqz s3,ffffffff8401607e <decodeRISCVMMUInvocation+0x7ba>
    0x8401593c     0x78    slli s1,s1,0x2
    0x8401593e     0x7a    lui a4,0xf8000
    0x84015942     0x7e    srli a4,a4,0x19
    0x84015944     0x80    and a4,a4,s1
    0x84015946     0x82    slli a5,s1,0x19
    0x8401594a     0x86    bgez a5,ffffffff84015954 <decodeRISCVMMUInvocation+0x90>
    0x8401594e     0x8a    li a5,-1
    0x84015950     0x8c    slli a5,a5,0x27
    0x84015952     0x8e    or a4,a4,a5
    0x84015954     0x90    mv a5,s0
    0x84015956     0x92    li a2,512
    0x8401595a     0x96    beq s3,a4,ffffffff840160a8 <decodeRISCVMMUInvocation+0x7e4>
    0x8401595e     0x9a    auipc a5,0x8
    0x84015962     0x9e    addi a5,a5,-1174 # ffffffff8401d4c8 <current_syscall_error>
    0x84015966     0xa2    li a4,2
    0x84015968     0xa4    sd a4,48(a5)
    0x8401596a     0xa6    sd zero,8(a5)
    0x8401596e     0xaa    li s0,3
    0x84015970     0xac    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015972     0xae    li a5,1
    0x84015974     0xb0    bne s0,a5,ffffffff8401613c <decodeRISCVMMUInvocation+0x878>
    0x84015978     0xb4    ld a5,0(sp)           ; stack access
    0x8401597a     0xb6    sd a5,32(sp)          ; stack access
    0x8401597c     0xb8    ld s4,8(sp)           ; stack access
    0x8401597e     0xba    sd s4,40(sp)          ; stack access
    0x84015980     0xbc    li a5,33
    0x84015984     0xc0    beq a0,a5,ffffffff84015e8c <decodeRISCVMMUInvocation+0x5c8>
    0x84015988     0xc4    li a5,34
    0x8401598c     0xc8    beq a0,a5,ffffffff84015eaa <decodeRISCVMMUInvocation+0x5e6>
    0x84015990     0xcc    li a5,32
    0x84015994     0xd0    beq a0,a5,ffffffff84015be4 <decodeRISCVMMUInvocation+0x320>
    0x84015998     0xd4    li a5,3
    0x8401599a     0xd6    auipc a4,0x8
    0x8401599e     0xda    sd a5,-1186(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840159a2     0xde    li s0,3
    0x840159a4     0xe0    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x840159a6     0xe2    ld a5,0(sp)           ; stack access
    0x840159a8     0xe4    sd a5,16(sp)          ; stack access
    0x840159aa     0xe6    ld s4,8(sp)           ; stack access
    0x840159ac     0xe8    sd s4,24(sp)          ; stack access
    0x840159ae     0xea    li a5,31
    0x840159b0     0xec    beq a0,a5,ffffffff84015ad2 <decodeRISCVMMUInvocation+0x20e>
    0x840159b4     0xf0    li a5,30
    0x840159b6     0xf2    bne a0,a5,ffffffff84015b5e <decodeRISCVMMUInvocation+0x29a>
    0x840159ba     0xf6    li a5,1
    0x840159bc     0xf8    bgeu a5,a1,ffffffff84015b6a <decodeRISCVMMUInvocation+0x2a6>
    0x840159c0     0xfc    beqz s2,ffffffff84015b6a <decodeRISCVMMUInvocation+0x2a6>
    0x840159c4    0x100    slli a5,a4,0x18
    0x840159c8    0x104    bltz a5,ffffffff84015b76 <decodeRISCVMMUInvocation+0x2b2>
    0x840159cc    0x108    ld a5,0(s2)
    0x840159d0    0x10c    srli s5,a5,0x3b
    0x840159d4    0x110    li a4,3
    0x840159d6    0x112    bne s5,a4,ffffffff84015b88 <decodeRISCVMMUInvocation+0x2c4>
    0x840159da    0x116    slli a4,a5,0x18
    0x840159de    0x11a    bgez a4,ffffffff84015b88 <decodeRISCVMMUInvocation+0x2c4>
    0x840159e2    0x11e    ld s9,8(s2)
    0x840159e6    0x122    srli a5,s9,0x9
    0x840159ea    0x126    slli a0,a5,0x19
    0x840159ee    0x12a    srli a0,a0,0x19
    0x840159f0    0x12c    slli a4,a5,0x19
    0x840159f4    0x130    bgez a4,ffffffff840159fe <decodeRISCVMMUInvocation+0x13a>
    0x840159f8    0x134    li a5,-1
    0x840159fa    0x136    slli a5,a5,0x27
    0x840159fc    0x138    or a0,a0,a5
    0x840159fe    0x13a    auipc a5,0x18
    0x84015a02    0x13e    addi a5,a5,-358 # ffffffff8402d898 <ksCurThread>
    0x84015a06    0x142    ld a5,0(a5)
    0x84015a08    0x144    ld s8,88(a5)
    0x84015a0c    0x148    mv s0,a0
    0x84015a0e    0x14a    srli a0,s9,0x30
    0x84015a12    0x14e    lui a5,0xfefff
    0x84015a16    0x152    slli a5,a5,0xe
    0x84015a18    0x154    srli a5,a5,0x1a
    0x84015a1a    0x156    bltu a5,s8,ffffffff84015b9a <decodeRISCVMMUInvocation+0x2d6>
    0x84015a1e    0x15a    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015a22    0x15e    sd a0,64(sp)          ; stack access
    0x84015a24    0x160    sd a1,72(sp)          ; stack access
    0x84015a26    0x162    bnez a0,ffffffff84015bae <decodeRISCVMMUInvocation+0x2ea>
    0x84015a2a    0x166    ld a5,72(sp)          ; stack access
    0x84015a2c    0x168    bne s0,a5,ffffffff84015bc2 <decodeRISCVMMUInvocation+0x2fe>
    0x84015a30    0x16c    mv a1,s8
    0x84015a32    0x16e    mv a0,s0
    0x84015a34    0x170    jal ra,ffffffff84010630 <lookupPTSlot>
    0x84015a38    0x174    mv s6,a0
    0x84015a3a    0x176    mv s2,a1
    0x84015a3c    0x178    sd a0,48(sp)          ; stack access
    0x84015a3e    0x17a    sd a1,56(sp)          ; stack access
    0x84015a40    0x17c    li a5,12
    0x84015a42    0x17e    beq a1,a5,ffffffff84015bd6 <decodeRISCVMMUInvocation+0x312>
    0x84015a46    0x182    ld s0,0(a0)
    0x84015a48    0x184    andi s0,s0,1
    0x84015a4a    0x186    bnez s0,ffffffff84015bd6 <decodeRISCVMMUInvocation+0x312>
    0x84015a4e    0x18a    srli a5,s4,0x9
    0x84015a52    0x18e    slli s5,a5,0x19
    0x84015a56    0x192    srli s5,s5,0x19
    0x84015a5a    0x196    slli a4,a5,0x19
    0x84015a5e    0x19a    bgez a4,ffffffff84015a6a <decodeRISCVMMUInvocation+0x1a6>
    0x84015a62    0x19e    li a5,-1
    0x84015a64    0x1a0    slli a5,a5,0x27
    0x84015a66    0x1a2    or s5,s5,a5
    0x84015a6a    0x1a6    li s7,-1
    0x84015a6c    0x1a8    srli a5,s7,0x10
    0x84015a70    0x1ac    and s4,s4,a5
    0x84015a74    0x1b0    slli a5,s7,0x30
    0x84015a78    0x1b4    and s9,s9,a5
    0x84015a7c    0x1b8    or s4,s4,s9
    0x84015a80    0x1bc    li a1,2
    0x84015a82    0x1be    auipc a5,0x18
    0x84015a86    0x1c2    addi a5,a5,-490 # ffffffff8402d898 <ksCurThread>
    0x84015a8a    0x1c6    ld a0,0(a5)
    0x84015a8c    0x1c8    jal ra,ffffffff84012404 <setThreadState>
    0x84015a90    0x1cc    li a4,1
    0x84015a92    0x1ce    sll a5,a4,s2
    0x84015a96    0x1d2    neg a5,a5
    0x84015a9a    0x1d6    and a5,a5,s8
    0x84015a9e    0x1da    slli s7,s7,0x28
    0x84015aa0    0x1dc    and s1,s1,s7
    0x84015aa4    0x1e0    or a5,a5,s1
    0x84015aa6    0x1e2    slli a3,a4,0x27
    0x84015aaa    0x1e6    or a5,a5,a3
    0x84015aac    0x1e8    sd a5,0(s3)
    0x84015ab0    0x1ec    sd s4,8(s3)
    0x84015ab4    0x1f0    slli a5,a4,0x26
    0x84015ab8    0x1f4    add a5,a5,s5
    0x84015aba    0x1f6    srli a5,a5,0x2
    0x84015abc    0x1f8    lui a4,0xfff00
    0x84015ac0    0x1fc    srli a4,a4,0xa
    0x84015ac2    0x1fe    and a5,a5,a4
    0x84015ac4    0x200    ori a5,a5,193
    0x84015ac8    0x204    sd a5,0(s6)
    0x84015acc    0x208    sfence.vma
    0x84015ad0    0x20c    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015ad2    0x20e    mv a0,a3
    0x84015ad4    0x210    jal ra,ffffffff84011fa4 <isFinalCapability>
    0x84015ad8    0x214    beqz a0,ffffffff84015b2c <decodeRISCVMMUInvocation+0x268>
    0x84015ada    0x216    srli s2,s1,0x27
    0x84015ade    0x21a    andi s2,s2,1
    0x84015ae2    0x21e    beqz s2,ffffffff84015b38 <decodeRISCVMMUInvocation+0x274>
    0x84015ae6    0x222    srli a0,s4,0x30
    0x84015aea    0x226    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015aee    0x22a    sd a0,64(sp)          ; stack access
    0x84015af0    0x22c    sd a1,72(sp)          ; stack access
    0x84015af2    0x22e    srli a4,s4,0x9
    0x84015af6    0x232    slli a5,a4,0x19
    0x84015afa    0x236    srli a5,a5,0x19
    0x84015afc    0x238    slli a3,a4,0x19
    0x84015b00    0x23c    bgez a3,ffffffff84015b0a <decodeRISCVMMUInvocation+0x246>
    0x84015b04    0x240    li a4,-1
    0x84015b06    0x242    slli a4,a4,0x27
    0x84015b08    0x244    or a5,a5,a4
    0x84015b0a    0x246    ld a4,64(sp)          ; stack access
    0x84015b0c    0x248    beqz a4,ffffffff84015b4c <decodeRISCVMMUInvocation+0x288>
    0x84015b0e    0x24a    li a1,2
    0x84015b10    0x24c    auipc a5,0x18
    0x84015b14    0x250    addi a5,a5,-632 # ffffffff8402d898 <ksCurThread>
    0x84015b18    0x254    ld a0,0(a5)
    0x84015b1a    0x256    jal ra,ffffffff84012404 <setThreadState>
    0x84015b1e    0x25a    mv a2,s3
    0x84015b20    0x25c    mv a0,s1
    0x84015b22    0x25e    mv a1,s4
    0x84015b24    0x260    jal ra,ffffffff84015856 <performPageTableInvocationUnmap>
    0x84015b28    0x264    mv s0,a0
    0x84015b2a    0x266    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b2c    0x268    li a5,9
    0x84015b2e    0x26a    auipc a4,0x8
    0x84015b32    0x26e    sd a5,-1590(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015b36    0x272    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b38    0x274    li a1,2
    0x84015b3a    0x276    auipc a5,0x18
    0x84015b3e    0x27a    addi a5,a5,-674 # ffffffff8402d898 <ksCurThread>
    0x84015b42    0x27e    ld a0,0(a5)
    0x84015b44    0x280    jal ra,ffffffff84012404 <setThreadState>
    0x84015b48    0x284    mv s0,s2
    0x84015b4a    0x286    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b4c    0x288    ld a4,72(sp)
    0x84015b4e    0x28a    bne a4,a5,ffffffff84015b0e <decodeRISCVMMUInvocation+0x24a>
    0x84015b52    0x28e    li a5,9
    0x84015b54    0x290    auipc a4,0x8
    0x84015b58    0x294    sd a5,-1628(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015b5c    0x298    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b5e    0x29a    li a5,3
    0x84015b60    0x29c    auipc a4,0x8
    0x84015b64    0x2a0    sd a5,-1640(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015b68    0x2a4    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b6a    0x2a6    li a5,7
    0x84015b6c    0x2a8    auipc a4,0x8
    0x84015b70    0x2ac    sd a5,-1652(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015b74    0x2b0    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b76    0x2b2    auipc a5,0x8
    0x84015b7a    0x2b6    addi a5,a5,-1710 # ffffffff8401d4c8 <current_syscall_error>
    0x84015b7e    0x2ba    li a4,2
    0x84015b80    0x2bc    sd a4,48(a5)
    0x84015b82    0x2be    sd zero,8(a5)
    0x84015b86    0x2c2    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b88    0x2c4    auipc a5,0x8
    0x84015b8c    0x2c8    addi a5,a5,-1728 # ffffffff8401d4c8 <current_syscall_error>
    0x84015b90    0x2cc    li a4,2
    0x84015b92    0x2ce    sd a4,48(a5)
    0x84015b94    0x2d0    li a4,1
    0x84015b96    0x2d2    sd a4,8(a5)
    0x84015b98    0x2d4    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015b9a    0x2d6    auipc a5,0x8
    0x84015b9e    0x2da    addi a5,a5,-1746 # ffffffff8401d4c8 <current_syscall_error>
    0x84015ba2    0x2de    li a4,1
    0x84015ba4    0x2e0    sd a4,48(a5)
    0x84015ba6    0x2e2    sd zero,0(a5)
    0x84015baa    0x2e6    mv s0,s5
    0x84015bac    0x2e8    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015bae    0x2ea    auipc a5,0x8
    0x84015bb2    0x2ee    addi a5,a5,-1766 # ffffffff8401d4c8 <current_syscall_error>
    0x84015bb6    0x2f2    li a4,6
    0x84015bb8    0x2f4    sd a4,48(a5)
    0x84015bba    0x2f6    sd zero,40(a5)
    0x84015bbe    0x2fa    mv s0,s5
    0x84015bc0    0x2fc    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015bc2    0x2fe    auipc a5,0x8
    0x84015bc6    0x302    addi a5,a5,-1786 # ffffffff8401d4c8 <current_syscall_error>
    0x84015bca    0x306    li a4,2
    0x84015bcc    0x308    sd a4,48(a5)
    0x84015bce    0x30a    li a4,1
    0x84015bd0    0x30c    sd a4,8(a5)
    0x84015bd2    0x30e    mv s0,s5
    0x84015bd4    0x310    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015bd6    0x312    li a5,8
    0x84015bd8    0x314    auipc a4,0x8
    0x84015bdc    0x318    sd a5,-1760(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015be0    0x31c    mv s0,s5
    0x84015be2    0x31e    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015be4    0x320    li a5,2
    0x84015be6    0x322    bgeu a5,a1,ffffffff84015c90 <decodeRISCVMMUInvocation+0x3cc>
    0x84015bea    0x326    beqz s2,ffffffff84015c90 <decodeRISCVMMUInvocation+0x3cc>
    0x84015bee    0x32a    ld a5,0(s2)
    0x84015bf2    0x32e    srli s5,a5,0x3b
    0x84015bf6    0x332    li a4,3
    0x84015bf8    0x334    bne s5,a4,ffffffff84015c9e <decodeRISCVMMUInvocation+0x3da>
    0x84015bfc    0x338    slli a4,a5,0x18
    0x84015c00    0x33c    bgez a4,ffffffff84015c9e <decodeRISCVMMUInvocation+0x3da>
    0x84015c04    0x340    ld s9,8(s2)
    0x84015c08    0x344    srli a5,s9,0x9
    0x84015c0c    0x348    slli a0,a5,0x19
    0x84015c10    0x34c    srli a0,a0,0x19
    0x84015c12    0x34e    slli a4,a5,0x19
    0x84015c16    0x352    bgez a4,ffffffff84015c20 <decodeRISCVMMUInvocation+0x35c>
    0x84015c1a    0x356    li a5,-1
    0x84015c1c    0x358    slli a5,a5,0x27
    0x84015c1e    0x35a    or a0,a0,a5
    0x84015c20    0x35c    auipc a5,0x18
    0x84015c24    0x360    addi a5,a5,-904 # ffffffff8402d898 <ksCurThread>
    0x84015c28    0x364    ld a5,0(a5)
    0x84015c2a    0x366    ld s8,88(a5)
    0x84015c2e    0x36a    ld s6,96(a5)
    0x84015c32    0x36e    ld s7,104(a5)
    0x84015c36    0x372    mv s2,a0
    0x84015c38    0x374    srli a0,s9,0x30
    0x84015c3c    0x378    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015c40    0x37c    sd a0,48(sp)          ; stack access
    0x84015c42    0x37e    sd a1,56(sp)          ; stack access
    0x84015c44    0x380    mv s0,a0
    0x84015c46    0x382    bnez a0,ffffffff84015cb2 <decodeRISCVMMUInvocation+0x3ee>
    0x84015c48    0x384    ld a5,56(sp)          ; stack access
    0x84015c4a    0x386    bne s2,a5,ffffffff84015cc6 <decodeRISCVMMUInvocation+0x402>
    0x84015c4e    0x38a    srli a5,s1,0x39
    0x84015c52    0x38e    andi a5,a5,3
    0x84015c54    0x390    li a4,1
    0x84015c56    0x392    beq a5,a4,ffffffff84016140 <decodeRISCVMMUInvocation+0x87c>
    0x84015c5a    0x396    beqz a5,ffffffff84015cde <decodeRISCVMMUInvocation+0x41a>
    0x84015c5c    0x398    li a4,2
    0x84015c5e    0x39a    bne a5,a4,ffffffff84015cda <decodeRISCVMMUInvocation+0x416>
    0x84015c62    0x39e    lui a4,0x40000
    0x84015c66    0x3a2    addi a4,a4,-1
    0x84015c68    0x3a4    add a4,a4,s8
    0x84015c6a    0x3a6    lui a5,0xfefff
    0x84015c6e    0x3aa    slli a5,a5,0xe
    0x84015c70    0x3ac    srli a5,a5,0x1a
    0x84015c72    0x3ae    bltu a5,a4,ffffffff84015dd4 <decodeRISCVMMUInvocation+0x510>
    0x84015c76    0x3b2    slli a5,s8,0x22
    0x84015c7a    0x3b6    bnez a5,ffffffff84015de8 <decodeRISCVMMUInvocation+0x524>
    0x84015c7e    0x3ba    mv a1,s8
    0x84015c80    0x3bc    mv a0,s2
    0x84015c82    0x3be    jal ra,ffffffff84010630 <lookupPTSlot>
    0x84015c86    0x3c2    sd a0,64(sp)          ; stack access
    0x84015c88    0x3c4    sd a1,72(sp)          ; stack access
    0x84015c8a    0x3c6    mv s2,a0
    0x84015c8c    0x3c8    li a5,30
    0x84015c8e    0x3ca    j ffffffff84015d08 <decodeRISCVMMUInvocation+0x444>
    0x84015c90    0x3cc    li a5,7
    0x84015c92    0x3ce    auipc a4,0x8
    0x84015c96    0x3d2    sd a5,-1946(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015c9a    0x3d6    li s0,3
    0x84015c9c    0x3d8    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015c9e    0x3da    auipc a5,0x8
    0x84015ca2    0x3de    addi a5,a5,-2006 # ffffffff8401d4c8 <current_syscall_error>
    0x84015ca6    0x3e2    li a4,2
    0x84015ca8    0x3e4    sd a4,48(a5)
    0x84015caa    0x3e6    li a4,1
    0x84015cac    0x3e8    sd a4,8(a5)
    0x84015cae    0x3ea    li s0,3
    0x84015cb0    0x3ec    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015cb2    0x3ee    auipc a5,0x8
    0x84015cb6    0x3f2    addi a5,a5,-2026 # ffffffff8401d4c8 <current_syscall_error>
    0x84015cba    0x3f6    li a4,6
    0x84015cbc    0x3f8    sd a4,48(a5)
    0x84015cbe    0x3fa    sd zero,40(a5)
    0x84015cc2    0x3fe    mv s0,s5
    0x84015cc4    0x400    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015cc6    0x402    auipc a5,0x8
    0x84015cca    0x406    addi a5,a5,-2046 # ffffffff8401d4c8 <current_syscall_error>
    0x84015cce    0x40a    li a4,2
    0x84015cd0    0x40c    sd a4,48(a5)
    0x84015cd2    0x40e    li a4,1
    0x84015cd4    0x410    sd a4,8(a5)
    0x84015cd6    0x412    mv s0,s5
    0x84015cd8    0x414    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015cda    0x416    jal ra,ffffffff84010294 <halt>
    0x84015cde    0x41a    lui a4,0x1
    0x84015ce0    0x41c    addi a4,a4,-1
    0x84015ce2    0x41e    add a4,a4,s8
    0x84015ce4    0x420    lui a5,0xfefff
    0x84015ce8    0x424    slli a5,a5,0xe
    0x84015cea    0x426    srli a5,a5,0x1a
    0x84015cec    0x428    bltu a5,a4,ffffffff84015dd4 <decodeRISCVMMUInvocation+0x510>
    0x84015cf0    0x42c    slli a5,s8,0x34
    0x84015cf4    0x430    bnez a5,ffffffff84015de8 <decodeRISCVMMUInvocation+0x524>
    0x84015cf8    0x434    mv a1,s8
    0x84015cfa    0x436    mv a0,s2
    0x84015cfc    0x438    jal ra,ffffffff84010630 <lookupPTSlot>
    0x84015d00    0x43c    sd a0,64(sp)          ; stack access
    0x84015d02    0x43e    sd a1,72(sp)          ; stack access
    0x84015d04    0x440    mv s2,a0
    0x84015d06    0x442    li a5,12
    0x84015d08    0x444    slli a5,a5,0x20
    0x84015d0a    0x446    srli a5,a5,0x20
    0x84015d0c    0x448    bne a5,a1,ffffffff84015df6 <decodeRISCVMMUInvocation+0x532>
    0x84015d10    0x44c    srli a5,s4,0x30
    0x84015d14    0x450    bnez a5,ffffffff84015e24 <decodeRISCVMMUInvocation+0x560>
    0x84015d18    0x454    ld a5,0(s2)
    0x84015d1c    0x458    andi a5,a5,1
    0x84015d1e    0x45a    bnez a5,ffffffff84015e7e <decodeRISCVMMUInvocation+0x5ba>
    0x84015d22    0x45e    srli a0,s1,0x36
    0x84015d26    0x462    mv a1,s6
    0x84015d28    0x464    andi a0,a0,7
    0x84015d2a    0x466    jal ra,ffffffff840109ec <maskVMRights>
    0x84015d2e    0x46a    sext.w s5,a0
    0x84015d32    0x46e    srli a5,s4,0x9
    0x84015d36    0x472    slli s6,a5,0x19
    0x84015d3a    0x476    srli s6,s6,0x19
    0x84015d3e    0x47a    slli a4,a5,0x19
    0x84015d42    0x47e    bgez a4,ffffffff84015d4e <decodeRISCVMMUInvocation+0x48a>
    0x84015d46    0x482    li a5,-1
    0x84015d48    0x484    slli a5,a5,0x27
    0x84015d4a    0x486    or s6,s6,a5
    0x84015d4e    0x48a    li a5,-1
    0x84015d50    0x48c    srli a4,a5,0x10
    0x84015d54    0x490    and s4,s4,a4
    0x84015d58    0x494    slli a4,a5,0x30
    0x84015d5c    0x498    and s9,s9,a4
    0x84015d60    0x49c    or s4,s4,s9
    0x84015d64    0x4a0    slli a4,a5,0x27
    0x84015d68    0x4a4    and s1,s1,a4
    0x84015d6a    0x4a6    srli a5,a5,0x19
    0x84015d6c    0x4a8    and s8,s8,a5
    0x84015d70    0x4ac    or s8,s1,s8
    0x84015d74    0x4b0    li a1,2
    0x84015d76    0x4b2    auipc a5,0x18
    0x84015d7a    0x4b6    addi a5,a5,-1246 # ffffffff8402d898 <ksCurThread>
    0x84015d7e    0x4ba    ld a0,0(a5)
    0x84015d80    0x4bc    jal ra,ffffffff84012404 <setThreadState>
    0x84015d84    0x4c0    sd s8,0(s3)
    0x84015d88    0x4c4    sd s4,8(s3)
    0x84015d8c    0x4c8    li a5,1
    0x84015d8e    0x4ca    slli a5,a5,0x26
    0x84015d90    0x4cc    add a5,a5,s6
    0x84015d92    0x4ce    srli a5,a5,0x2
    0x84015d94    0x4d0    lui a4,0xfff00
    0x84015d98    0x4d4    srli a4,a4,0xa
    0x84015d9a    0x4d6    and a5,a5,a4
    0x84015d9c    0x4d8    xori a4,s7,1
    0x84015da0    0x4dc    andi a4,a4,1
    0x84015da2    0x4de    slli a4,a4,0x3
    0x84015da4    0x4e0    or a5,a5,a4
    0x84015da6    0x4e2    snez a4,s5
    0x84015daa    0x4e6    slli a4,a4,0x4
    0x84015dac    0x4e8    or a5,a5,a4
    0x84015dae    0x4ea    addi a4,s5,-1
    0x84015db2    0x4ee    snez a4,a4
    0x84015db6    0x4f2    slli a4,a4,0x2
    0x84015db8    0x4f4    or a5,a5,a4
    0x84015dba    0x4f6    addi a4,s5,-2
    0x84015dbe    0x4fa    snez a4,a4
    0x84015dc2    0x4fe    slli a4,a4,0x1
    0x84015dc4    0x500    or a5,a5,a4
    0x84015dc6    0x502    ori a5,a5,193
    0x84015dca    0x506    sd a5,0(s2)
    0x84015dce    0x50a    sfence.vma
    0x84015dd2    0x50e    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015dd4    0x510    auipc a5,0x7
    0x84015dd8    0x514    addi a5,a5,1780 # ffffffff8401d4c8 <current_syscall_error>
    0x84015ddc    0x518    li a4,1
    0x84015dde    0x51a    sd a4,48(a5)
    0x84015de0    0x51c    sd zero,0(a5)
    0x84015de4    0x520    mv s0,s5
    0x84015de6    0x522    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015de8    0x524    li a5,5
    0x84015dea    0x526    auipc a4,0x7
    0x84015dee    0x52a    sd a5,1806(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015df2    0x52e    mv s0,s5
    0x84015df4    0x530    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015df6    0x532    auipc a4,0x7
    0x84015dfa    0x536    addi a4,a4,1722 # ffffffff8401d4b0 <current_lookup_fault>
    0x84015dfe    0x53a    slli a5,a1,0x2
    0x84015e02    0x53e    andi a5,a5,508
    0x84015e06    0x542    ori a5,a5,1
    0x84015e0a    0x546    sd a5,0(a4)
    0x84015e0c    0x548    sd zero,8(a4)
    0x84015e10    0x54c    auipc a5,0x7
    0x84015e14    0x550    addi a5,a5,1720 # ffffffff8401d4c8 <current_syscall_error>
    0x84015e18    0x554    li a4,6
    0x84015e1a    0x556    sd a4,48(a5)
    0x84015e1c    0x558    sd zero,40(a5)
    0x84015e20    0x55c    mv s0,s5
    0x84015e22    0x55e    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015e24    0x560    slli a5,s1,0x19
    0x84015e28    0x564    srli a5,a5,0x19
    0x84015e2a    0x566    slli a4,s1,0x19
    0x84015e2e    0x56a    bgez a4,ffffffff84015e38 <decodeRISCVMMUInvocation+0x574>
    0x84015e32    0x56e    li a4,-1
    0x84015e34    0x570    slli a4,a4,0x27
    0x84015e36    0x572    or a5,a5,a4
    0x84015e38    0x574    bne s8,a5,ffffffff84015e70 <decodeRISCVMMUInvocation+0x5ac>
    0x84015e3c    0x578    ld a4,0(s2)
    0x84015e40    0x57c    andi a5,a4,1
    0x84015e44    0x580    beqz a5,ffffffff84015d22 <decodeRISCVMMUInvocation+0x45e>
    0x84015e48    0x584    srli a5,a4,0x1
    0x84015e4c    0x588    srli a3,a4,0x2
    0x84015e50    0x58c    or a5,a5,a3
    0x84015e52    0x58e    srli a4,a4,0x3
    0x84015e54    0x590    or a5,a5,a4
    0x84015e56    0x592    andi a5,a5,1
    0x84015e58    0x594    bnez a5,ffffffff84015d22 <decodeRISCVMMUInvocation+0x45e>
    0x84015e5c    0x598    auipc a5,0x7
    0x84015e60    0x59c    addi a5,a5,1644 # ffffffff8401d4c8 <current_syscall_error>
    0x84015e64    0x5a0    li a4,2
    0x84015e66    0x5a2    sd a4,48(a5)
    0x84015e68    0x5a4    sd zero,8(a5)
    0x84015e6c    0x5a8    mv s0,s5
    0x84015e6e    0x5aa    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015e70    0x5ac    li a5,3
    0x84015e72    0x5ae    auipc a4,0x7
    0x84015e76    0x5b2    sd a5,1670(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015e7a    0x5b6    mv s0,s5
    0x84015e7c    0x5b8    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015e7e    0x5ba    li a5,8
    0x84015e80    0x5bc    auipc a4,0x7
    0x84015e84    0x5c0    sd a5,1656(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015e88    0x5c4    mv s0,s5
    0x84015e8a    0x5c6    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015e8c    0x5c8    li a1,2
    0x84015e8e    0x5ca    auipc a5,0x18
    0x84015e92    0x5ce    addi a5,a5,-1526 # ffffffff8402d898 <ksCurThread>
    0x84015e96    0x5d2    ld a0,0(a5)
    0x84015e98    0x5d4    jal ra,ffffffff84012404 <setThreadState>
    0x84015e9c    0x5d8    mv a2,s3
    0x84015e9e    0x5da    mv a0,s1
    0x84015ea0    0x5dc    mv a1,s4
    0x84015ea2    0x5de    jal ra,ffffffff84010a5e <performPageInvocationUnmap>
    0x84015ea6    0x5e2    mv s0,a0
    0x84015ea8    0x5e4    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015eaa    0x5e6    li a1,2
    0x84015eac    0x5e8    auipc a5,0x18
    0x84015eb0    0x5ec    addi a5,a5,-1556 # ffffffff8402d898 <ksCurThread>
    0x84015eb4    0x5f0    ld a0,0(a5)
    0x84015eb6    0x5f2    jal ra,ffffffff84012404 <setThreadState>
    0x84015eba    0x5f6    srli s4,s4,0x9
    0x84015ebe    0x5fa    slli a5,s4,0x19
    0x84015ec2    0x5fe    srli a5,a5,0x19
    0x84015ec4    0x600    slli a4,s4,0x19
    0x84015ec8    0x604    bgez a4,ffffffff84015ed2 <decodeRISCVMMUInvocation+0x60e>
    0x84015ecc    0x608    li a4,-1
    0x84015ece    0x60a    slli a4,a4,0x27
    0x84015ed0    0x60c    or a5,a5,a4
    0x84015ed2    0x60e    auipc a4,0x18
    0x84015ed6    0x612    addi a4,a4,-1594 # ffffffff8402d898 <ksCurThread>
    0x84015eda    0x616    ld a4,0(a4)
    0x84015edc    0x618    li a3,1
    0x84015ede    0x61a    slli a2,a3,0x26
    0x84015ee2    0x61e    add a5,a5,a2
    0x84015ee4    0x620    sd a5,88(a4)
    0x84015ee6    0x622    sd a3,80(a4)
    0x84015ee8    0x624    li s0,0
    0x84015eea    0x626    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015eec    0x628    li a5,35
    0x84015ef0    0x62c    beq a0,a5,ffffffff84015f1c <decodeRISCVMMUInvocation+0x658>
    0x84015ef4    0x630    li a5,3
    0x84015ef6    0x632    auipc a4,0x7
    0x84015efa    0x636    sd a5,1538(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015efe    0x63a    li s0,3
    0x84015f00    0x63c    mv a0,s0
    0x84015f02    0x63e    ld ra,184(sp)         ; stack access
    0x84015f04    0x640    ld s0,176(sp)         ; stack access
    0x84015f06    0x642    ld s1,168(sp)         ; stack access
    0x84015f08    0x644    ld s2,160(sp)         ; stack access
    0x84015f0a    0x646    ld s3,152(sp)         ; stack access
    0x84015f0c    0x648    ld s4,144(sp)         ; stack access
    0x84015f0e    0x64a    ld s5,136(sp)         ; stack access
    0x84015f10    0x64c    ld s6,128(sp)         ; stack access
    0x84015f12    0x64e    ld s7,120(sp)         ; stack access
    0x84015f14    0x650    ld s8,112(sp)         ; stack access
    0x84015f16    0x652    ld s9,104(sp)         ; stack access
    0x84015f18    0x654    addi sp,sp,192
    0x84015f1a    0x656    ret
    0x84015f1c    0x658    li a5,1
    0x84015f1e    0x65a    bgeu a5,a1,ffffffff84015f86 <decodeRISCVMMUInvocation+0x6c2>
    0x84015f22    0x65e    beqz s2,ffffffff84015f86 <decodeRISCVMMUInvocation+0x6c2>
    0x84015f26    0x662    ld a5,8(a6)
    0x84015f2a    0x666    beqz a5,ffffffff84015f86 <decodeRISCVMMUInvocation+0x6c2>
    0x84015f2c    0x668    auipc a4,0x18
    0x84015f30    0x66c    addi a4,a4,-1684 # ffffffff8402d898 <ksCurThread>
    0x84015f34    0x670    ld a4,0(a4)
    0x84015f36    0x672    ld s4,88(a4)
    0x84015f3a    0x676    ld s5,96(a4)
    0x84015f3e    0x67a    ld s3,0(s2)
    0x84015f42    0x67e    ld a2,8(s2)
    0x84015f46    0x682    ld a4,0(a5)
    0x84015f48    0x684    sd a4,48(sp)          ; stack access
    0x84015f4a    0x686    ld a5,8(a5)
    0x84015f4c    0x688    sd a5,56(sp)          ; stack access
    0x84015f4e    0x68a    auipc a5,0x6
    0x84015f52    0x68e    addi a5,a5,346 # ffffffff8401c0a8 <riscvKSASIDTable>
    0x84015f56    0x692    ld a5,0(a5)
    0x84015f58    0x694    beqz a5,ffffffff8401616e <decodeRISCVMMUInvocation+0x8aa>
    0x84015f5c    0x698    auipc a5,0x6
    0x84015f60    0x69c    addi a5,a5,340 # ffffffff8401c0b0 <riscvKSASIDTable+0x8>
    0x84015f64    0x6a0    li s1,1
    0x84015f66    0x6a2    li a3,128
    0x84015f6a    0x6a6    ld a4,0(a5)
    0x84015f6c    0x6a8    beqz a4,ffffffff84016170 <decodeRISCVMMUInvocation+0x8ac>
    0x84015f70    0x6ac    addi s1,s1,1
    0x84015f72    0x6ae    addi a5,a5,8
    0x84015f74    0x6b0    bne s1,a3,ffffffff84015f6a <decodeRISCVMMUInvocation+0x6a6>
    0x84015f78    0x6b4    li a5,8
    0x84015f7a    0x6b6    auipc a4,0x7
    0x84015f7e    0x6ba    sd a5,1406(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015f82    0x6be    li s0,3
    0x84015f84    0x6c0    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015f86    0x6c2    li a5,7
    0x84015f88    0x6c4    auipc a4,0x7
    0x84015f8c    0x6c8    sd a5,1392(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015f90    0x6cc    li s0,3
    0x84015f92    0x6ce    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015f94    0x6d0    mv a0,s2
    0x84015f96    0x6d2    jal ra,ffffffff84011e8a <ensureNoChildren>
    0x84015f9a    0x6d6    mv s0,a0
    0x84015f9c    0x6d8    bnez a0,ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015f9e    0x6da    slli s6,s3,0x19
    0x84015fa2    0x6de    srli s6,s6,0x19
    0x84015fa6    0x6e2    slli a5,s3,0x19
    0x84015faa    0x6e6    bgez a5,ffffffff84015fb6 <decodeRISCVMMUInvocation+0x6f2>
    0x84015fae    0x6ea    li a5,-1
    0x84015fb0    0x6ec    slli a5,a5,0x27
    0x84015fb2    0x6ee    or s6,s6,a5
    0x84015fb6    0x6f2    mv a3,s5
    0x84015fb8    0x6f4    mv a2,s4
    0x84015fba    0x6f6    ld a0,48(sp)          ; stack access
    0x84015fbc    0x6f8    ld a1,56(sp)          ; stack access
    0x84015fbe    0x6fa    jal ra,ffffffff840112ec <lookupTargetSlot>
    0x84015fc2    0x6fe    sd a0,64(sp)          ; stack access
    0x84015fc4    0x700    sd a1,72(sp)          ; stack access
    0x84015fc6    0x702    mv s0,a0
    0x84015fc8    0x704    bnez a0,ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015fca    0x706    mv s4,a1
    0x84015fcc    0x708    mv a0,a1
    0x84015fce    0x70a    jal ra,ffffffff84011726 <ensureEmptySlot>
    0x84015fd2    0x70e    mv s0,a0
    0x84015fd4    0x710    bnez a0,ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x84015fd6    0x712    li a1,2
    0x84015fd8    0x714    auipc a5,0x18
    0x84015fdc    0x718    addi a5,a5,-1856 # ffffffff8402d898 <ksCurThread>
    0x84015fe0    0x71c    ld a0,0(a5)
    0x84015fe2    0x71e    jal ra,ffffffff84012404 <setThreadState>
    0x84015fe6    0x722    ld a5,8(s2)
    0x84015fea    0x726    andi a4,a5,63
    0x84015fee    0x72a    addiw a3,a4,-4
    0x84015ff2    0x72e    lui a4,0x2000
    0x84015ff6    0x732    sll a4,a4,a3
    0x84015ffa    0x736    slli a5,a5,0x27
    0x84015ffc    0x738    srli a5,a5,0x27
    0x84015ffe    0x73a    or a5,a5,a4
    0x84016000    0x73c    sd a5,8(s2)
    0x84016004    0x740    lui a1,0x1
    0x84016006    0x742    mv a0,s6
    0x84016008    0x744    jal ra,ffffffff84015844 <memzero>
    0x8401600c    0x748    slli a5,s1,0x34
    0x84016010    0x74c    lui a4,0xffff
    0x84016014    0x750    slli a4,a4,0x1f
    0x84016016    0x752    and a5,a5,a4
    0x84016018    0x754    srli a4,s6,0x2
    0x8401601c    0x758    li s3,-1
    0x8401601e    0x75a    srli a3,s3,0x1b
    0x84016022    0x75e    and a4,a4,a3
    0x84016024    0x760    or a5,a5,a4
    0x84016026    0x762    mv a3,s4
    0x84016028    0x764    mv a2,s2
    0x8401602a    0x766    li a0,13
    0x8401602c    0x768    slli a0,a0,0x3b
    0x8401602e    0x76a    or a0,a0,a5
    0x84016030    0x76c    li a1,0
    0x84016032    0x76e    jal ra,ffffffff840113c0 <cteInsert>
    0x84016036    0x772    srli a5,s3,0x9
    0x8401603a    0x776    and a5,a5,s1
    0x8401603c    0x778    slli a5,a5,0x3
    0x8401603e    0x77a    auipc a4,0x6
    0x84016042    0x77e    addi a4,a4,106 # ffffffff8401c0a8 <riscvKSASIDTable>
    0x84016046    0x782    add a5,a5,a4
    0x84016048    0x784    sd s6,0(a5)
    0x8401604c    0x788    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x8401604e    0x78a    li a5,3
    0x84016050    0x78c    auipc a4,0x7
    0x84016054    0x790    sd a5,1192(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84016058    0x794    li s0,3
    0x8401605a    0x796    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x8401605c    0x798    li a5,7
    0x8401605e    0x79a    auipc a4,0x7
    0x84016062    0x79e    sd a5,1178(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84016066    0x7a2    li s0,3
    0x84016068    0x7a4    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x8401606a    0x7a6    auipc a5,0x7
    0x8401606e    0x7aa    addi a5,a5,1118 # ffffffff8401d4c8 <current_syscall_error>
    0x84016072    0x7ae    li a4,2
    0x84016074    0x7b0    sd a4,48(a5)
    0x84016076    0x7b2    li a4,1
    0x84016078    0x7b4    sd a4,8(a5)
    0x8401607a    0x7b6    li s0,3
    0x8401607c    0x7b8    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x8401607e    0x7ba    auipc a5,0x7
    0x84016082    0x7be    addi a5,a5,1098 # ffffffff8401d4c8 <current_syscall_error>
    0x84016086    0x7c2    li a4,6
    0x84016088    0x7c4    sd a4,48(a5)
    0x8401608a    0x7c6    sd zero,40(a5)
    0x8401608e    0x7ca    auipc a5,0x7
    0x84016092    0x7ce    addi a5,a5,1058 # ffffffff8401d4b0 <current_lookup_fault>
    0x84016096    0x7d2    sd zero,0(a5)
    0x8401609a    0x7d6    sd zero,8(a5)
    0x8401609e    0x7da    li s0,3
    0x840160a0    0x7dc    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x840160a2    0x7de    addi a5,a5,1
    0x840160a4    0x7e0    beq a5,a2,ffffffff8401612e <decodeRISCVMMUInvocation+0x86a>
    0x840160a8    0x7e4    add a4,a3,a5
    0x840160ac    0x7e8    beqz a4,ffffffff840160a2 <decodeRISCVMMUInvocation+0x7de>
    0x840160ae    0x7ea    slli a4,a5,0x3
    0x840160b2    0x7ee    add a4,a4,s3
    0x840160b4    0x7f0    ld a4,0(a4)
    0x840160b6    0x7f2    bnez a4,ffffffff840160a2 <decodeRISCVMMUInvocation+0x7de>
    0x840160b8    0x7f4    li a4,512
    0x840160bc    0x7f8    beq a5,a4,ffffffff8401612e <decodeRISCVMMUInvocation+0x86a>
    0x840160c0    0x7fc    add s1,a3,a5
    0x840160c4    0x800    li a1,2
    0x840160c6    0x802    auipc a5,0x17
    0x840160ca    0x806    addi a5,a5,2002 # ffffffff8402d898 <ksCurThread>
    0x840160ce    0x80a    ld a0,0(a5)
    0x840160d0    0x80c    jal ra,ffffffff84012404 <setThreadState>
    0x840160d4    0x810    ld a5,8(s2)
    0x840160d8    0x814    srli a4,a5,0x9
    0x840160dc    0x818    slli s4,a4,0x19
    0x840160e0    0x81c    srli s4,s4,0x19
    0x840160e4    0x820    slli a3,a4,0x19
    0x840160e8    0x824    bgez a3,ffffffff840160f4 <decodeRISCVMMUInvocation+0x830>
    0x840160ec    0x828    li a4,-1
    0x840160ee    0x82a    slli a4,a4,0x27
    0x840160f0    0x82c    or s4,s4,a4
    0x840160f4    0x830    ld a4,0(s2)
    0x840160f8    0x834    li a3,-1
    0x840160fa    0x836    slli a2,a3,0x27
    0x840160fe    0x83a    addi a2,a2,-1
    0x84016100    0x83c    and a4,a4,a2
    0x84016102    0x83e    li a2,1
    0x84016104    0x840    slli a2,a2,0x27
    0x84016106    0x842    or a4,a4,a2
    0x84016108    0x844    sd a4,0(s2)
    0x8401610c    0x848    srli a3,a3,0x10
    0x8401610e    0x84a    and a5,a5,a3
    0x84016110    0x84c    slli a4,s1,0x30
    0x84016114    0x850    or a5,a5,a4
    0x84016116    0x852    sd a5,8(s2)
    0x8401611a    0x856    mv a0,s4
    0x8401611c    0x858    jal ra,ffffffff8401041e <copyGlobalMappings>
    0x84016120    0x85c    andi a3,s1,511
    0x84016124    0x860    slli a3,a3,0x3
    0x84016126    0x862    add s3,s3,a3
    0x84016128    0x864    sd s4,0(s3)
    0x8401612c    0x868    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x8401612e    0x86a    li a5,8
    0x84016130    0x86c    auipc a4,0x7
    0x84016134    0x870    sd a5,968(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84016138    0x874    li s0,3
    0x8401613a    0x876    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>
    0x8401613c    0x878    jal ra,ffffffff84010294 <halt>
    0x84016140    0x87c    lui a4,0x200
    0x84016144    0x880    addi a4,a4,-1
    0x84016146    0x882    add a4,a4,s8
    0x84016148    0x884    lui a5,0xfefff
    0x8401614c    0x888    slli a5,a5,0xe
    0x8401614e    0x88a    srli a5,a5,0x1a
    0x84016150    0x88c    bltu a5,a4,ffffffff84015dd4 <decodeRISCVMMUInvocation+0x510>
    0x84016154    0x890    slli a5,s8,0x2b
    0x84016158    0x894    bnez a5,ffffffff84015de8 <decodeRISCVMMUInvocation+0x524>
    0x8401615c    0x898    mv a1,s8
    0x8401615e    0x89a    mv a0,s2
    0x84016160    0x89c    jal ra,ffffffff84010630 <lookupPTSlot>
    0x84016164    0x8a0    sd a0,64(sp)          ; stack access
    0x84016166    0x8a2    sd a1,72(sp)          ; stack access
    0x84016168    0x8a4    mv s2,a0
    0x8401616a    0x8a6    li a5,21
    0x8401616c    0x8a8    j ffffffff84015d08 <decodeRISCVMMUInvocation+0x444>
    0x8401616e    0x8aa    li s1,0
    0x84016170    0x8ac    srli a5,s3,0x3b
    0x84016174    0x8b0    li a4,2
    0x84016176    0x8b2    bne a5,a4,ffffffff8401618e <decodeRISCVMMUInvocation+0x8ca>
    0x8401617a    0x8b6    andi a5,a2,63
    0x8401617e    0x8ba    li a4,12
    0x84016180    0x8bc    bne a5,a4,ffffffff8401618e <decodeRISCVMMUInvocation+0x8ca>
    0x84016184    0x8c0    srli a5,a2,0x6
    0x84016188    0x8c4    andi a5,a5,1
    0x8401618a    0x8c6    beqz a5,ffffffff84015f94 <decodeRISCVMMUInvocation+0x6d0>
    0x8401618e    0x8ca    auipc a5,0x7
    0x84016192    0x8ce    addi a5,a5,826 # ffffffff8401d4c8 <current_syscall_error>
    0x84016196    0x8d2    li a4,2
    0x84016198    0x8d4    sd a4,48(a5)
    0x8401619a    0x8d6    li a4,1
    0x8401619c    0x8d8    sd a4,8(a5)
    0x8401619e    0x8da    li s0,3
    0x840161a0    0x8dc    j ffffffff84015f00 <decodeRISCVMMUInvocation+0x63c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
773 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1115 nodes.

Section decodeTCBInvocation (269 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 195 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x8401546a      0x0    addi sp,sp,-80
    0x8401546c      0x2    sd ra,72(sp)          ; stack access
    0x8401546e      0x4    sd s0,64(sp)          ; stack access
    0x84015470      0x6    sd s1,56(sp)          ; stack access
    0x84015472      0x8    sd a2,32(sp)          ; stack access
    0x84015474      0xa    sd a3,40(sp)          ; stack access
    0x84015476      0xc    li t1,15
    0x84015478      0xe    bltu t1,a0,ffffffff84015636 <decodeTCBInvocation+0x1cc>
    0x8401547c     0x12    mv s0,a2
    0x8401547e     0x14    mv a3,a4
    0x84015480     0x16    mv a2,a1
    0x84015482     0x18    slli a0,a0,0x2
    0x84015484     0x1a    auipc t1,0x2
    0x84015488     0x1e    addi t1,t1,1320 # ffffffff840179ac <__global_pointer$+0x40>
    0x8401548c     0x22    add a0,a0,t1
    0x8401548e     0x24    lw a0,0(a0)
    0x84015490     0x26    add a0,a0,t1
    0x84015492     0x28    jr a0
    0x84015494     0x2a    mv a4,a7
    0x84015496     0x2c    mv a3,a6
    0x84015498     0x2e    ld a0,32(sp)
    0x8401549a     0x30    ld a1,40(sp)
    0x8401549c     0x32    jal ra,ffffffff840150e0 <decodeReadRegisters>
    0x840154a0     0x36    ld ra,72(sp)
    0x840154a2     0x38    ld s0,64(sp)
    0x840154a4     0x3a    ld s1,56(sp)
    0x840154a6     0x3c    addi sp,sp,80
    0x840154a8     0x3e    ret
    0x840154aa     0x40    mv a3,a7
    0x840154ac     0x42    ld a0,32(sp)
    0x840154ae     0x44    ld a1,40(sp)
    0x840154b0     0x46    jal ra,ffffffff84015298 <decodeWriteRegisters>
    0x840154b4     0x4a    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x840154b6     0x4c    ld a4,0(a5)
    0x840154b8     0x4e    sd a4,0(sp)
    0x840154ba     0x50    ld a4,8(a5)
    0x840154bc     0x52    sd a4,8(sp)
    0x840154be     0x54    ld a5,16(a5)
    0x840154c0     0x56    sd a5,16(sp)
    0x840154c2     0x58    mv a4,a7
    0x840154c4     0x5a    mv a3,sp
    0x840154c6     0x5c    ld a0,32(sp)
    0x840154c8     0x5e    ld a1,40(sp)
    0x840154ca     0x60    jal ra,ffffffff84014f2e <decodeCopyRegisters>
    0x840154ce     0x64    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x840154d0     0x66    li a1,2
    0x840154d2     0x68    auipc a5,0x18
    0x840154d6     0x6c    addi a5,a5,966 # ffffffff8402d898 <ksCurThread>
    0x840154da     0x70    ld a0,0(a5)
    0x840154dc     0x72    jal ra,ffffffff84012404 <setThreadState>
    0x840154e0     0x76    slli a0,s0,0x19
    0x840154e4     0x7a    srli a0,a0,0x19
    0x840154e6     0x7c    slli a5,s0,0x19
    0x840154ea     0x80    bgez a5,ffffffff840154f4 <decodeTCBInvocation+0x8a>
    0x840154ee     0x84    li a5,-1
    0x840154f0     0x86    slli a5,a5,0x27
    0x840154f2     0x88    or a0,a0,a5
    0x840154f4     0x8a    jal ra,ffffffff84012dd6 <suspend>
    0x840154f8     0x8e    li a0,0
    0x840154fa     0x90    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x840154fc     0x92    li a1,2
    0x840154fe     0x94    auipc a5,0x18
    0x84015502     0x98    addi a5,a5,922 # ffffffff8402d898 <ksCurThread>
    0x84015506     0x9c    ld a0,0(a5)
    0x84015508     0x9e    jal ra,ffffffff84012404 <setThreadState>
    0x8401550c     0xa2    slli a0,s0,0x19
    0x84015510     0xa6    srli a0,a0,0x19
    0x84015512     0xa8    slli a5,s0,0x19
    0x84015516     0xac    bgez a5,ffffffff84015520 <decodeTCBInvocation+0xb6>
    0x8401551a     0xb0    li a5,-1
    0x8401551c     0xb2    slli a5,a5,0x27
    0x8401551e     0xb4    or a0,a0,a5
    0x84015520     0xb6    jal ra,ffffffff840138c0 <restart>
    0x84015524     0xba    li a0,0
    0x84015526     0xbc    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x84015528     0xbe    ld a4,0(a5)
    0x8401552a     0xc0    sd a4,0(sp)
    0x8401552c     0xc2    ld a4,8(a5)
    0x8401552e     0xc4    sd a4,8(sp)
    0x84015530     0xc6    ld a5,16(a5)
    0x84015532     0xc8    sd a5,16(sp)
    0x84015534     0xca    mv a5,a7
    0x84015536     0xcc    mv a4,sp
    0x84015538     0xce    ld a0,32(sp)
    0x8401553a     0xd0    ld a1,40(sp)
    0x8401553c     0xd2    jal ra,ffffffff8401480c <decodeTCBConfigure>
    0x84015540     0xd6    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x84015542     0xd8    ld a4,0(a5)
    0x84015544     0xda    sd a4,0(sp)
    0x84015546     0xdc    ld a4,8(a5)
    0x84015548     0xde    sd a4,8(sp)
    0x8401554a     0xe0    ld a5,16(a5)
    0x8401554c     0xe2    sd a5,16(sp)
    0x8401554e     0xe4    mv a4,a7
    0x84015550     0xe6    mv a3,sp
    0x84015552     0xe8    ld a0,32(sp)
    0x84015554     0xea    ld a1,40(sp)
    0x84015556     0xec    jal ra,ffffffff840149da <decodeSetPriority>
    0x8401555a     0xf0    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x8401555c     0xf2    ld a4,0(a5)
    0x8401555e     0xf4    sd a4,0(sp)
    0x84015560     0xf6    ld a4,8(a5)
    0x84015562     0xf8    sd a4,8(sp)
    0x84015564     0xfa    ld a5,16(a5)
    0x84015566     0xfc    sd a5,16(sp)
    0x84015568     0xfe    mv a4,a7
    0x8401556a    0x100    mv a3,sp
    0x8401556c    0x102    ld a0,32(sp)
    0x8401556e    0x104    ld a1,40(sp)
    0x84015570    0x106    jal ra,ffffffff84014a9e <decodeSetMCPriority>
    0x84015574    0x10a    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x84015576    0x10c    ld a4,0(a5)
    0x84015578    0x10e    sd a4,0(sp)
    0x8401557a    0x110    ld a4,8(a5)
    0x8401557c    0x112    sd a4,8(sp)
    0x8401557e    0x114    ld a5,16(a5)
    0x84015580    0x116    sd a5,16(sp)
    0x84015582    0x118    mv a4,a7
    0x84015584    0x11a    mv a3,sp
    0x84015586    0x11c    ld a0,32(sp)
    0x84015588    0x11e    ld a1,40(sp)
    0x8401558a    0x120    jal ra,ffffffff84014b62 <decodeSetSchedParams>
    0x8401558e    0x124    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x84015590    0x126    ld a4,0(a5)
    0x84015592    0x128    sd a4,0(sp)
    0x84015594    0x12a    ld a4,8(a5)
    0x84015596    0x12c    sd a4,8(sp)
    0x84015598    0x12e    ld a5,16(a5)
    0x8401559a    0x130    sd a5,16(sp)
    0x8401559c    0x132    mv a5,a7
    0x8401559e    0x134    mv a4,sp
    0x840155a0    0x136    ld a0,32(sp)
    0x840155a2    0x138    ld a1,40(sp)
    0x840155a4    0x13a    jal ra,ffffffff84014c4c <decodeSetIPCBuffer>
    0x840155a8    0x13e    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x840155aa    0x140    ld a4,0(a5)
    0x840155ac    0x142    sd a4,0(sp)
    0x840155ae    0x144    ld a4,8(a5)
    0x840155b0    0x146    sd a4,8(sp)
    0x840155b2    0x148    ld a5,16(a5)
    0x840155b4    0x14a    sd a5,16(sp)
    0x840155b6    0x14c    mv a5,a7
    0x840155b8    0x14e    mv a4,sp
    0x840155ba    0x150    ld a0,32(sp)
    0x840155bc    0x152    ld a1,40(sp)
    0x840155be    0x154    jal ra,ffffffff84014d04 <decodeSetSpace>
    0x840155c2    0x158    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x840155c4    0x15a    ld a4,0(a5)
    0x840155c6    0x15c    sd a4,0(sp)
    0x840155c8    0x15e    ld a4,8(a5)
    0x840155ca    0x160    sd a4,8(sp)
    0x840155cc    0x162    ld a5,16(a5)
    0x840155ce    0x164    sd a5,16(sp)
    0x840155d0    0x166    mv a2,sp
    0x840155d2    0x168    ld a0,32(sp)
    0x840155d4    0x16a    ld a1,40(sp)
    0x840155d6    0x16c    jal ra,ffffffff84015348 <decodeBindNotification>
    0x840155da    0x170    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x840155dc    0x172    ld a0,32(sp)
    0x840155de    0x174    ld a1,40(sp)
    0x840155e0    0x176    jal ra,ffffffff84015418 <decodeUnbindNotification>
    0x840155e4    0x17a    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x840155e6    0x17c    beqz a1,ffffffff84015628 <decodeTCBInvocation+0x1be>
    0x840155e8    0x17e    auipc a5,0x18
    0x840155ec    0x182    addi a5,a5,688 # ffffffff8402d898 <ksCurThread>
    0x840155f0    0x186    ld a0,0(a5)
    0x840155f2    0x188    ld s1,88(a0)
    0x840155f4    0x18a    li a1,2
    0x840155f6    0x18c    jal ra,ffffffff84012404 <setThreadState>
    0x840155fa    0x190    slli a5,s0,0x19
    0x840155fe    0x194    srli a5,a5,0x19
    0x84015600    0x196    slli a4,s0,0x19
    0x84015604    0x19a    bgez a4,ffffffff8401560e <decodeTCBInvocation+0x1a4>
    0x84015608    0x19e    li a4,-1
    0x8401560a    0x1a0    slli a4,a4,0x27
    0x8401560c    0x1a2    or a5,a5,a4
    0x8401560e    0x1a4    sd s1,24(a5)
    0x84015610    0x1a6    auipc a4,0x18
    0x84015614    0x1aa    addi a4,a4,648 # ffffffff8402d898 <ksCurThread>
    0x84015618    0x1ae    ld a4,0(a4)
    0x8401561a    0x1b0    li a0,0
    0x8401561c    0x1b2    bne a5,a4,ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x84015620    0x1b6    jal ra,ffffffff84012398 <rescheduleRequired>
    0x84015624    0x1ba    li a0,0
    0x84015626    0x1bc    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x84015628    0x1be    li a5,7
    0x8401562a    0x1c0    auipc a4,0x8
    0x8401562e    0x1c4    sd a5,-306(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015632    0x1c8    li a0,3
    0x84015634    0x1ca    j ffffffff840154a0 <decodeTCBInvocation+0x36>
    0x84015636    0x1cc    li a5,3
    0x84015638    0x1ce    auipc a4,0x8
    0x8401563c    0x1d2    sd a5,-320(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84015640    0x1d6    li a0,3
    0x84015642    0x1d8    j ffffffff840154a0 <decodeTCBInvocation+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
195 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 313 nodes.

Section decodeCNodeInvocation (270 of 271)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 425 instructions.


Stack analysis
---------------

69 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x840132ac      0x0    addi sp,sp,-240
    0x840132ae      0x2    sd ra,232(sp)         ; stack access
    0x840132b0      0x4    sd s0,224(sp)         ; stack access
    0x840132b2      0x6    sd s1,216(sp)         ; stack access
    0x840132b4      0x8    sd s2,208(sp)         ; stack access
    0x840132b6      0xa    sd s3,200(sp)         ; stack access
    0x840132b8      0xc    sd s4,192(sp)         ; stack access
    0x840132ba      0xe    sd s5,184(sp)         ; stack access
    0x840132bc     0x10    sd s6,176(sp)         ; stack access
    0x840132be     0x12    sd s7,168(sp)         ; stack access
    0x840132c0     0x14    sd s8,160(sp)         ; stack access
    0x840132c2     0x16    sd s9,152(sp)         ; stack access
    0x840132c4     0x18    sd a2,0(sp)           ; stack access
    0x840132c6     0x1a    sd a3,8(sp)           ; stack access
    0x840132c8     0x1c    addi a2,a0,-16
    0x840132cc     0x20    li a3,8
    0x840132ce     0x22    bltu a3,a2,ffffffff840133a4 <decodeCNodeInvocation+0xf8>
    0x840132d2     0x26    li a3,1
    0x840132d4     0x28    bgeu a3,a1,ffffffff840133b2 <decodeCNodeInvocation+0x106>
    0x840132d8     0x2c    mv s3,a5
    0x840132da     0x2e    mv s2,a1
    0x840132dc     0x30    mv s1,a0
    0x840132de     0x32    ld s4,0(a4) # fffffffff8000000 <ki_end+0x73fd2000>
    0x840132e2     0x36    ld s5,8(a4)
    0x840132e6     0x3a    auipc a5,0x1a
    0x840132ea     0x3e    addi a5,a5,1458 # ffffffff8402d898 <ksCurThread>
    0x840132ee     0x42    ld a4,0(a5)
    0x840132f0     0x44    ld a3,96(a4)
    0x840132f2     0x46    ld a2,88(a4)
    0x840132f4     0x48    ld a0,0(sp)           ; stack access
    0x840132f6     0x4a    ld a1,8(sp)           ; stack access
    0x840132f8     0x4c    jal ra,ffffffff840112ec <lookupTargetSlot>
    0x840132fc     0x50    sd a0,112(sp)         ; stack access
    0x840132fe     0x52    sd a1,120(sp)         ; stack access
    0x84013300     0x54    mv s0,a0
    0x84013302     0x56    bnez a0,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013304     0x58    mv s6,a1
    0x84013306     0x5a    addi a5,s1,-19
    0x8401330a     0x5e    li a4,3
    0x8401330c     0x60    bltu a4,a5,ffffffff840134fe <decodeCNodeInvocation+0x252>
    0x84013310     0x64    li a5,3
    0x84013312     0x66    bgeu a5,s2,ffffffff840133da <decodeCNodeInvocation+0x12e>
    0x84013316     0x6a    beqz s4,ffffffff840133da <decodeCNodeInvocation+0x12e>
    0x8401331a     0x6e    auipc a5,0x1a
    0x8401331e     0x72    addi a5,a5,1406 # ffffffff8402d898 <ksCurThread>
    0x84013322     0x76    ld a5,0(a5)
    0x84013324     0x78    ld s7,104(a5)
    0x84013328     0x7c    ld s5,112(a5)
    0x8401332c     0x80    ld a5,0(s4) # 1000 <KERNEL_OFFSET-0xfffffffefffff000>
    0x84013330     0x84    sd a5,24(sp)          ; stack access
    0x84013332     0x86    ld a5,8(s4)
    0x84013336     0x8a    sd a5,32(sp)          ; stack access
    0x84013338     0x8c    mv a0,a1
    0x8401333a     0x8e    jal ra,ffffffff84011726 <ensureEmptySlot>
    0x8401333e     0x92    mv s0,a0
    0x84013340     0x94    bnez a0,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013342     0x96    mv a3,s5
    0x84013344     0x98    mv a2,s7
    0x84013346     0x9a    ld a0,24(sp)          ; stack access
    0x84013348     0x9c    ld a1,32(sp)          ; stack access
    0x8401334a     0x9e    jal ra,ffffffff840112d2 <lookupSourceSlot>
    0x8401334e     0xa2    sd a0,112(sp)         ; stack access
    0x84013350     0xa4    sd a1,120(sp)         ; stack access
    0x84013352     0xa6    mv s0,a0
    0x84013354     0xa8    bnez a0,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013356     0xaa    mv s4,a1
    0x84013358     0xac    ld s7,0(a1) # ffffffffe0000000 <ki_end+0x5bfd2000>
    0x8401335c     0xb0    srli a5,s7,0x3b
    0x84013360     0xb4    beqz a5,ffffffff840133e8 <decodeCNodeInvocation+0x13c>
    0x84013362     0xb6    li a5,20
    0x84013364     0xb8    beq s1,a5,ffffffff84013478 <decodeCNodeInvocation+0x1cc>
    0x84013368     0xbc    bgeu a5,s1,ffffffff84013416 <decodeCNodeInvocation+0x16a>
    0x8401336c     0xc0    li a5,21
    0x8401336e     0xc2    beq s1,a5,ffffffff840134c2 <decodeCNodeInvocation+0x216>
    0x84013372     0xc6    li a5,22
    0x84013374     0xc8    bne s1,a5,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013378     0xcc    li a5,4
    0x8401337a     0xce    bgeu a5,s2,ffffffff840134e8 <decodeCNodeInvocation+0x23c>
    0x8401337e     0xd2    ld a2,0(a1)
    0x84013380     0xd4    ld a3,8(a1)
    0x84013382     0xd6    ld a1,40(s3)
    0x84013386     0xda    li a0,1
    0x84013388     0xdc    jal ra,ffffffff84012036 <updateCapData>
    0x8401338c     0xe0    sd a1,48(sp)          ; stack access
    0x8401338e     0xe2    mv s7,a0
    0x84013390     0xe4    srli a0,a0,0x3b
    0x84013392     0xe6    bnez a0,ffffffff8401373c <decodeCNodeInvocation+0x490>
    0x84013396     0xea    li a5,3
    0x84013398     0xec    auipc a4,0xa
    0x8401339c     0xf0    sd a5,352(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840133a0     0xf4    li s0,3
    0x840133a2     0xf6    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840133a4     0xf8    li a5,3
    0x840133a6     0xfa    auipc a4,0xa
    0x840133aa     0xfe    sd a5,338(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840133ae    0x102    li s0,3
    0x840133b0    0x104    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840133b2    0x106    li a5,7
    0x840133b4    0x108    auipc a4,0xa
    0x840133b8    0x10c    sd a5,324(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840133bc    0x110    li s0,3
    0x840133be    0x112    mv a0,s0
    0x840133c0    0x114    ld ra,232(sp)         ; stack access
    0x840133c2    0x116    ld s0,224(sp)         ; stack access
    0x840133c4    0x118    ld s1,216(sp)         ; stack access
    0x840133c6    0x11a    ld s2,208(sp)         ; stack access
    0x840133c8    0x11c    ld s3,200(sp)         ; stack access
    0x840133ca    0x11e    ld s4,192(sp)         ; stack access
    0x840133cc    0x120    ld s5,184(sp)         ; stack access
    0x840133ce    0x122    ld s6,176(sp)         ; stack access
    0x840133d0    0x124    ld s7,168(sp)         ; stack access
    0x840133d2    0x126    ld s8,160(sp)         ; stack access
    0x840133d4    0x128    ld s9,152(sp)         ; stack access
    0x840133d6    0x12a    addi sp,sp,240
    0x840133d8    0x12c    ret
    0x840133da    0x12e    li a5,7
    0x840133dc    0x130    auipc a4,0xa
    0x840133e0    0x134    sd a5,284(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840133e4    0x138    li s0,3
    0x840133e6    0x13a    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840133e8    0x13c    auipc a5,0xa
    0x840133ec    0x140    addi a5,a5,224 # ffffffff8401d4c8 <current_syscall_error>
    0x840133f0    0x144    li a4,6
    0x840133f2    0x146    sd a4,48(a5)
    0x840133f4    0x148    li a4,1
    0x840133f6    0x14a    sd a4,40(a5)
    0x840133f8    0x14c    auipc a4,0xa
    0x840133fc    0x150    addi a4,a4,184 # ffffffff8401d4b0 <current_lookup_fault>
    0x84013400    0x154    slli a5,s5,0x2
    0x84013404    0x158    andi a5,a5,508
    0x84013408    0x15c    ori a5,a5,1
    0x8401340c    0x160    sd a5,0(a4)
    0x8401340e    0x162    sd zero,8(a4)
    0x84013412    0x166    li s0,3
    0x84013414    0x168    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013416    0x16a    li a5,19
    0x84013418    0x16c    bne s1,a5,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x8401341c    0x170    li a5,4
    0x8401341e    0x172    bltu a5,s2,ffffffff84013430 <decodeCNodeInvocation+0x184>
    0x84013422    0x176    li a5,7
    0x84013424    0x178    auipc a4,0xa
    0x84013428    0x17c    sd a5,212(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401342c    0x180    li s0,3
    0x8401342e    0x182    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013430    0x184    ld a1,0(a1)
    0x84013432    0x186    ld a2,8(s4)
    0x84013436    0x18a    ld a0,40(s3)
    0x8401343a    0x18e    jal ra,ffffffff840120c8 <maskCapRights>
    0x8401343e    0x192    mv a2,a0
    0x84013440    0x194    mv a3,a1
    0x84013442    0x196    mv a1,s4
    0x84013444    0x198    addi a0,sp,88
    0x84013446    0x19a    jal ra,ffffffff84011eca <deriveCap>
    0x8401344a    0x19e    ld a5,88(sp)          ; stack access
    0x8401344c    0x1a0    bnez a5,ffffffff840134f6 <decodeCNodeInvocation+0x24a>
    0x8401344e    0x1a2    ld a5,104(sp)         ; stack access
    0x84013450    0x1a4    sd a5,48(sp)          ; stack access
    0x84013452    0x1a6    ld s1,96(sp)          ; stack access
    0x84013454    0x1a8    srli a5,s1,0x3b
    0x84013458    0x1ac    beqz a5,ffffffff84013396 <decodeCNodeInvocation+0xea>
    0x8401345a    0x1ae    li a1,2
    0x8401345c    0x1b0    auipc a5,0x1a
    0x84013460    0x1b4    addi a5,a5,1084 # ffffffff8402d898 <ksCurThread>
    0x84013464    0x1b8    ld a0,0(a5)
    0x84013466    0x1ba    jal ra,ffffffff84012404 <setThreadState>
    0x8401346a    0x1be    mv a3,s6
    0x8401346c    0x1c0    mv a2,s4
    0x8401346e    0x1c2    mv a0,s1
    0x84013470    0x1c4    ld a1,48(sp)          ; stack access
    0x84013472    0x1c6    jal ra,ffffffff840113c0 <cteInsert>
    0x84013476    0x1ca    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013478    0x1cc    li a5,5
    0x8401347a    0x1ce    bltu a5,s2,ffffffff8401348c <decodeCNodeInvocation+0x1e0>
    0x8401347e    0x1d2    li a5,7
    0x84013480    0x1d4    auipc a4,0xa
    0x84013484    0x1d8    sd a5,120(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84013488    0x1dc    li s0,3
    0x8401348a    0x1de    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x8401348c    0x1e0    ld s1,48(s3)
    0x84013490    0x1e4    ld a1,0(a1)
    0x84013492    0x1e6    ld a2,8(s4)
    0x84013496    0x1ea    ld a0,40(s3)
    0x8401349a    0x1ee    jal ra,ffffffff840120c8 <maskCapRights>
    0x8401349e    0x1f2    mv a2,a0
    0x840134a0    0x1f4    mv a3,a1
    0x840134a2    0x1f6    mv a1,s1
    0x840134a4    0x1f8    li a0,0
    0x840134a6    0x1fa    jal ra,ffffffff84012036 <updateCapData>
    0x840134aa    0x1fe    mv a2,a0
    0x840134ac    0x200    mv a3,a1
    0x840134ae    0x202    mv a1,s4
    0x840134b0    0x204    addi a0,sp,88
    0x840134b2    0x206    jal ra,ffffffff84011eca <deriveCap>
    0x840134b6    0x20a    ld a5,88(sp)          ; stack access
    0x840134b8    0x20c    bnez a5,ffffffff840134fa <decodeCNodeInvocation+0x24e>
    0x840134ba    0x20e    ld a5,104(sp)         ; stack access
    0x840134bc    0x210    sd a5,48(sp)          ; stack access
    0x840134be    0x212    ld s1,96(sp)          ; stack access
    0x840134c0    0x214    j ffffffff84013454 <decodeCNodeInvocation+0x1a8>
    0x840134c2    0x216    ld a5,0(a1)
    0x840134c4    0x218    sd a5,40(sp)          ; stack access
    0x840134c6    0x21a    ld a5,8(a1)
    0x840134c8    0x21c    sd a5,48(sp)          ; stack access
    0x840134ca    0x21e    li a1,2
    0x840134cc    0x220    auipc a5,0x1a
    0x840134d0    0x224    addi a5,a5,972 # ffffffff8402d898 <ksCurThread>
    0x840134d4    0x228    ld a0,0(a5)
    0x840134d6    0x22a    jal ra,ffffffff84012404 <setThreadState>
    0x840134da    0x22e    mv a3,s6
    0x840134dc    0x230    mv a2,s4
    0x840134de    0x232    mv a0,s7
    0x840134e0    0x234    ld a1,48(sp)          ; stack access
    0x840134e2    0x236    jal ra,ffffffff840114fc <cteMove>
    0x840134e6    0x23a    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840134e8    0x23c    li a5,7
    0x840134ea    0x23e    auipc a4,0xa
    0x840134ee    0x242    sd a5,14(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840134f2    0x246    li s0,3
    0x840134f4    0x248    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840134f6    0x24a    mv s0,a5
    0x840134f8    0x24c    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840134fa    0x24e    mv s0,a5
    0x840134fc    0x250    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840134fe    0x252    li a5,16
    0x84013500    0x254    beq s1,a5,ffffffff840135fe <decodeCNodeInvocation+0x352>
    0x84013504    0x258    li a5,17
    0x84013506    0x25a    beq s1,a5,ffffffff84013618 <decodeCNodeInvocation+0x36c>
    0x8401350a    0x25e    li a5,24
    0x8401350c    0x260    beq s1,a5,ffffffff84013632 <decodeCNodeInvocation+0x386>
    0x84013510    0x264    li a5,18
    0x84013512    0x266    beq s1,a5,ffffffff84013658 <decodeCNodeInvocation+0x3ac>
    0x84013516    0x26a    li a5,23
    0x84013518    0x26c    bne s1,a5,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x8401351c    0x270    li a5,7
    0x8401351e    0x272    bgeu a5,s2,ffffffff84013690 <decodeCNodeInvocation+0x3e4>
    0x84013522    0x276    beqz s4,ffffffff84013690 <decodeCNodeInvocation+0x3e4>
    0x84013526    0x27a    beqz s5,ffffffff84013690 <decodeCNodeInvocation+0x3e4>
    0x8401352a    0x27e    auipc a5,0x1a
    0x8401352e    0x282    addi a5,a5,878 # ffffffff8402d898 <ksCurThread>
    0x84013532    0x286    ld a5,0(a5)
    0x84013534    0x288    ld s8,104(a5)
    0x84013538    0x28c    ld s7,112(a5)
    0x8401353c    0x290    ld s2,40(s3)
    0x84013540    0x294    ld s9,48(s3)
    0x84013544    0x298    ld s1,64(s3)
    0x84013548    0x29c    ld a5,0(s4)
    0x8401354c    0x2a0    sd a5,40(sp)          ; stack access
    0x8401354e    0x2a2    ld a5,8(s4)
    0x84013552    0x2a6    sd a5,48(sp)          ; stack access
    0x84013554    0x2a8    ld a0,0(s5)
    0x84013558    0x2ac    sd a0,56(sp)          ; stack access
    0x8401355a    0x2ae    ld a1,8(s5)
    0x8401355e    0x2b2    sd a1,64(sp)          ; stack access
    0x84013560    0x2b4    mv a3,s1
    0x84013562    0x2b6    ld a2,56(s3)
    0x84013566    0x2ba    jal ra,ffffffff840112d2 <lookupSourceSlot>
    0x8401356a    0x2be    sd a1,120(sp)         ; stack access
    0x8401356c    0x2c0    mv s0,a0
    0x8401356e    0x2c2    bnez a0,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013572    0x2c6    mv s3,a1
    0x84013574    0x2c8    mv a3,s2
    0x84013576    0x2ca    mv a2,s7
    0x84013578    0x2cc    ld a0,40(sp)          ; stack access
    0x8401357a    0x2ce    ld a1,48(sp)          ; stack access
    0x8401357c    0x2d0    jal ra,ffffffff84011306 <lookupPivotSlot>
    0x84013580    0x2d4    sd a0,112(sp)         ; stack access
    0x84013582    0x2d6    sd a1,120(sp)         ; stack access
    0x84013584    0x2d8    mv s0,a0
    0x84013586    0x2da    bnez a0,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x8401358a    0x2de    mv s4,a1
    0x8401358c    0x2e0    beq s3,a1,ffffffff8401369e <decodeCNodeInvocation+0x3f2>
    0x84013590    0x2e4    beq s6,a1,ffffffff8401369e <decodeCNodeInvocation+0x3f2>
    0x84013594    0x2e8    beq s6,s3,ffffffff840135a4 <decodeCNodeInvocation+0x2f8>
    0x84013598    0x2ec    mv a0,s6
    0x8401359a    0x2ee    jal ra,ffffffff84011726 <ensureEmptySlot>
    0x8401359e    0x2f2    mv s0,a0
    0x840135a0    0x2f4    bnez a0,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840135a4    0x2f8    ld a5,0(s3)
    0x840135a8    0x2fc    srli a5,a5,0x3b
    0x840135aa    0x2fe    beqz a5,ffffffff840136ac <decodeCNodeInvocation+0x400>
    0x840135ae    0x302    ld a5,0(s4)
    0x840135b2    0x306    srli a5,a5,0x3b
    0x840135b4    0x308    beqz a5,ffffffff840136da <decodeCNodeInvocation+0x42e>
    0x840135b8    0x30c    ld a2,0(s3)
    0x840135bc    0x310    ld a3,8(s3)
    0x840135c0    0x314    mv a1,s9
    0x840135c2    0x316    li a0,1
    0x840135c4    0x318    jal ra,ffffffff84012036 <updateCapData>
    0x840135c8    0x31c    mv s0,a0
    0x840135ca    0x31e    sd a0,72(sp)          ; stack access
    0x840135cc    0x320    sd a1,80(sp)          ; stack access
    0x840135ce    0x322    ld a2,0(s4)
    0x840135d2    0x326    ld a3,8(s4)
    0x840135d6    0x32a    mv a1,s8
    0x840135d8    0x32c    li a0,1
    0x840135da    0x32e    jal ra,ffffffff84012036 <updateCapData>
    0x840135de    0x332    sd a0,88(sp)          ; stack access
    0x840135e0    0x334    sd a1,96(sp)          ; stack access
    0x840135e2    0x336    srli s0,s0,0x3b
    0x840135e4    0x338    beqz s0,ffffffff84013708 <decodeCNodeInvocation+0x45c>
    0x840135e8    0x33c    ld a5,88(sp)          ; stack access
    0x840135ea    0x33e    srli a5,a5,0x3b
    0x840135ec    0x340    bnez a5,ffffffff84013716 <decodeCNodeInvocation+0x46a>
    0x840135f0    0x344    li a5,3
    0x840135f2    0x346    auipc a4,0xa
    0x840135f6    0x34a    sd a5,-250(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840135fa    0x34e    li s0,3
    0x840135fc    0x350    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840135fe    0x352    li a1,2
    0x84013600    0x354    auipc a5,0x1a
    0x84013604    0x358    addi a5,a5,664 # ffffffff8402d898 <ksCurThread>
    0x84013608    0x35c    ld a0,0(a5)
    0x8401360a    0x35e    jal ra,ffffffff84012404 <setThreadState>
    0x8401360e    0x362    mv a0,s6
    0x84013610    0x364    jal ra,ffffffff8401321a <cteRevoke>
    0x84013614    0x368    mv s0,a0
    0x84013616    0x36a    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013618    0x36c    li a1,2
    0x8401361a    0x36e    auipc a5,0x1a
    0x8401361e    0x372    addi a5,a5,638 # ffffffff8402d898 <ksCurThread>
    0x84013622    0x376    ld a0,0(a5)
    0x84013624    0x378    jal ra,ffffffff84012404 <setThreadState>
    0x84013628    0x37c    mv a0,s6
    0x8401362a    0x37e    jal ra,ffffffff8401320a <invokeCNodeDelete>
    0x8401362e    0x382    mv s0,a0
    0x84013630    0x384    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013632    0x386    mv a0,a1
    0x84013634    0x388    jal ra,ffffffff84011726 <ensureEmptySlot>
    0x84013638    0x38c    mv s0,a0
    0x8401363a    0x38e    bnez a0,ffffffff840133be <decodeCNodeInvocation+0x112>
    0x8401363e    0x392    li a1,2
    0x84013640    0x394    auipc a5,0x1a
    0x84013644    0x398    addi a5,a5,600 # ffffffff8402d898 <ksCurThread>
    0x84013648    0x39c    ld a0,0(a5)
    0x8401364a    0x39e    jal ra,ffffffff84012404 <setThreadState>
    0x8401364e    0x3a2    mv a0,s6
    0x84013650    0x3a4    jal ra,ffffffff84011566 <invokeCNodeSaveCaller>
    0x84013654    0x3a8    mv s0,a0
    0x84013656    0x3aa    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013658    0x3ac    ld a0,0(a1)
    0x8401365a    0x3ae    sd a0,88(sp)          ; stack access
    0x8401365c    0x3b0    ld a1,8(a1)
    0x8401365e    0x3b2    sd a1,96(sp)          ; stack access
    0x84013660    0x3b4    jal ra,ffffffff84011980 <hasCancelSendRights>
    0x84013664    0x3b8    bnez a0,ffffffff84013674 <decodeCNodeInvocation+0x3c8>
    0x84013666    0x3ba    li a5,3
    0x84013668    0x3bc    auipc a4,0xa
    0x8401366c    0x3c0    sd a5,-368(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84013670    0x3c4    li s0,3
    0x84013672    0x3c6    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013674    0x3c8    li a1,2
    0x84013676    0x3ca    auipc a5,0x1a
    0x8401367a    0x3ce    addi a5,a5,546 # ffffffff8402d898 <ksCurThread>
    0x8401367e    0x3d2    ld a0,0(a5)
    0x84013680    0x3d4    jal ra,ffffffff84012404 <setThreadState>
    0x84013684    0x3d8    ld a0,88(sp)          ; stack access
    0x84013686    0x3da    ld a1,96(sp)          ; stack access
    0x84013688    0x3dc    jal ra,ffffffff84012c5c <invokeCNodeCancelBadgedSends>
    0x8401368c    0x3e0    mv s0,a0
    0x8401368e    0x3e2    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013690    0x3e4    li a5,7
    0x84013692    0x3e6    auipc a4,0xa
    0x84013696    0x3ea    sd a5,-410(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x8401369a    0x3ee    li s0,3
    0x8401369c    0x3f0    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x8401369e    0x3f2    li a5,3
    0x840136a0    0x3f4    auipc a4,0xa
    0x840136a4    0x3f8    sd a5,-424(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x840136a8    0x3fc    li s0,3
    0x840136aa    0x3fe    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840136ac    0x400    auipc a5,0xa
    0x840136b0    0x404    addi a5,a5,-484 # ffffffff8401d4c8 <current_syscall_error>
    0x840136b4    0x408    li a4,6
    0x840136b6    0x40a    sd a4,48(a5)
    0x840136b8    0x40c    li a4,1
    0x840136ba    0x40e    sd a4,40(a5)
    0x840136bc    0x410    auipc a4,0xa
    0x840136c0    0x414    addi a4,a4,-524 # ffffffff8401d4b0 <current_lookup_fault>
    0x840136c4    0x418    slli a5,s1,0x2
    0x840136c8    0x41c    andi a5,a5,508
    0x840136cc    0x420    ori a5,a5,1
    0x840136d0    0x424    sd a5,0(a4)
    0x840136d2    0x426    sd zero,8(a4)
    0x840136d6    0x42a    li s0,3
    0x840136d8    0x42c    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x840136da    0x42e    auipc a5,0xa
    0x840136de    0x432    addi a5,a5,-530 # ffffffff8401d4c8 <current_syscall_error>
    0x840136e2    0x436    li a4,6
    0x840136e4    0x438    sd a4,48(a5)
    0x840136e6    0x43a    sd zero,40(a5)
    0x840136ea    0x43e    auipc a4,0xa
    0x840136ee    0x442    addi a4,a4,-570 # ffffffff8401d4b0 <current_lookup_fault>
    0x840136f2    0x446    slli a5,s2,0x2
    0x840136f6    0x44a    andi a5,a5,508
    0x840136fa    0x44e    ori a5,a5,1
    0x840136fe    0x452    sd a5,0(a4)
    0x84013700    0x454    sd zero,8(a4)
    0x84013704    0x458    li s0,3
    0x84013706    0x45a    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013708    0x45c    li a5,3
    0x8401370a    0x45e    auipc a4,0xa
    0x8401370e    0x462    sd a5,-530(a4) # ffffffff8401d4f8 <current_syscall_error+0x30>
    0x84013712    0x466    li s0,3
    0x84013714    0x468    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x84013716    0x46a    li a1,2
    0x84013718    0x46c    auipc a5,0x1a
    0x8401371c    0x470    addi a5,a5,384 # ffffffff8402d898 <ksCurThread>
    0x84013720    0x474    ld a0,0(a5)
    0x84013722    0x476    jal ra,ffffffff84012404 <setThreadState>
    0x84013726    0x47a    mv a6,s6
    0x84013728    0x47c    mv a5,s4
    0x8401372a    0x47e    mv a4,s3
    0x8401372c    0x480    ld a2,88(sp)          ; stack access
    0x8401372e    0x482    ld a3,96(sp)          ; stack access
    0x84013730    0x484    ld a0,72(sp)          ; stack access
    0x84013732    0x486    ld a1,80(sp)          ; stack access
    0x84013734    0x488    jal ra,ffffffff8401163c <invokeCNodeRotate>
    0x84013738    0x48c    mv s0,a0
    0x8401373a    0x48e    j ffffffff840133be <decodeCNodeInvocation+0x112>
    0x8401373c    0x490    li a1,2
    0x8401373e    0x492    auipc a5,0x1a
    0x84013742    0x496    addi a5,a5,346 # ffffffff8402d898 <ksCurThread>
    0x84013746    0x49a    ld a0,0(a5)
    0x84013748    0x49c    jal ra,ffffffff84012404 <setThreadState>
    0x8401374c    0x4a0    j ffffffff840134da <decodeCNodeInvocation+0x22e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
425 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 682 nodes.

Section init_kernel (271 of 271)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 317 instructions.

RVC_FTTFT____FFFT_FT.
Skipping 10579073 csrw stvec,a5

Skipping 1047a7f3 csrrs a5,sie,a5

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp


Stack analysis
---------------

76 stack accesses found. Annotated code for `init_kernel`:

    0x8400281e      0x0    addi sp,sp,-272
    0x84002820      0x2    sd ra,264(sp)         ; stack access
    0x84002822      0x4    sd s0,256(sp)         ; stack access
    0x84002824      0x6    sd s1,248(sp)         ; stack access
    0x84002826      0x8    sd s2,240(sp)         ; stack access
    0x84002828      0xa    sd s3,232(sp)         ; stack access
    0x8400282a      0xc    sd s4,224(sp)         ; stack access
    0x8400282c      0xe    sd s5,216(sp)         ; stack access
    0x8400282e     0x10    sd s6,208(sp)         ; stack access
    0x84002830     0x12    sd s7,200(sp)         ; stack access
    0x84002832     0x14    sd s8,192(sp)         ; stack access
    0x84002834     0x16    sd s9,184(sp)         ; stack access
    0x84002836     0x18    mv s4,a3
    0x84002838     0x1a    li s0,-1
    0x8400283a     0x1c    slli s0,s0,0x26
    0x8400283c     0x1e    add s6,a0,s0
    0x84002840     0x22    add s0,s0,a1
    0x84002842     0x24    sd s6,88(sp)          ; stack access
    0x84002844     0x26    sd s0,96(sp)          ; stack access
    0x84002846     0x28    slli s5,a2,0x20
    0x8400284a     0x2c    srli s5,s5,0x20
    0x8400284e     0x30    sub s1,a0,s5
    0x84002852     0x34    sub s2,a1,s5
    0x84002856     0x38    lui s3,0x2
    0x84002858     0x3a    add s3,s3,s2
    0x8400285a     0x3c    jal ra,ffffffff840000e4 <map_kernel_window>
    0x8400285e     0x40    jal ra,ffffffff840001e2 <activate_kernel_vspace>
    0x84002862     0x44    auipc a5,0xd
    0x84002866     0x48    addi a5,a5,1950 # ffffffff84010000 <ki_boot_end>
    0x8400286a     0x4c    csrw stvec,a5
    0x8400286e     0x50    li a5,544
    0x84002872     0x54    csrrs a5,sie,a5
    0x84002876     0x58    jal ra,ffffffff84000968 <initTimer>
    0x8400287a     0x5c    sd s1,152(sp)         ; stack access
    0x8400287c     0x5e    sd s3,160(sp)         ; stack access
    0x8400287e     0x60    auipc a5,0x0
    0x84002882     0x64    addi a5,a5,794 # ffffffff84002b98 <ndks_boot>
    0x84002886     0x68    li a4,-127
    0x8400288a     0x6c    slli a4,a4,0x1f
    0x8400288c     0x6e    sd a4,936(a5)
    0x84002890     0x72    auipc a4,0x2b
    0x84002894     0x76    addi a4,a4,1904 # ffffffff8402e000 <ki_end>
    0x84002898     0x7a    li a3,-63
    0x8400289c     0x7e    slli a3,a3,0x20
    0x8400289e     0x80    add a4,a4,a3
    0x840028a0     0x82    sd a4,944(a5)
    0x840028a4     0x86    sd s6,952(a5)
    0x840028a8     0x8a    sd s0,960(a5)
    0x840028ac     0x8e    li a6,0
    0x840028ae     0x90    mv a4,s1
    0x840028b0     0x92    mv a5,s3
    0x840028b2     0x94    auipc a3,0x0
    0x840028b6     0x98    addi a3,a3,1678 # ffffffff84002f40 <res_reg>
    0x840028ba     0x9c    li a2,2
    0x840028bc     0x9e    auipc a1,0x0
    0x840028c0     0xa2    addi a1,a1,716 # ffffffff84002b88 <avail_p_regs>
    0x840028c4     0xa6    li a0,1
    0x840028c6     0xa8    jal ra,ffffffff840024c8 <init_freemem>
    0x840028ca     0xac    jal ra,ffffffff84000b34 <create_root_cnode>
    0x840028ce     0xb0    sd a0,24(sp)          ; stack access
    0x840028d0     0xb2    sd a1,32(sp)          ; stack access
    0x840028d2     0xb4    srli s7,a0,0x3b
    0x840028d6     0xb8    bnez s7,ffffffff840028de <init_kernel+0xc0>
    0x840028da     0xbc    jal ra,ffffffff84010294 <halt>
    0x840028de     0xc0    mv s6,a0
    0x840028e0     0xc2    jal ra,ffffffff84000b70 <create_domain_cap>
    0x840028e4     0xc6    ld s8,32(sp)          ; stack access
    0x840028e6     0xc8    li s0,0
    0x840028e8     0xca    li s9,1
    0x840028ea     0xcc    j ffffffff840028ee <init_kernel+0xd0>
    0x840028ec     0xce    addiw s0,s0,1
    0x840028ee     0xd0    sext.w s0,s0
    0x840028f0     0xd2    beqz s0,ffffffff840028ec <init_kernel+0xce>
    0x840028f2     0xd4    mv a1,s0
    0x840028f4     0xd6    li a0,0
    0x840028f6     0xd8    jal ra,ffffffff840117d4 <setIRQState>
    0x840028fa     0xdc    addiw a5,s0,1
    0x840028fe     0xe0    bgeu s9,a5,ffffffff840028ec <init_kernel+0xce>
    0x84002902     0xe4    li a1,1
    0x84002904     0xe6    li a0,2
    0x84002906     0xe8    jal ra,ffffffff840117d4 <setIRQState>
    0x8400290a     0xec    sext.w s7,s7
    0x8400290c     0xee    li a5,20
    0x8400290e     0xf0    bltu a5,s7,ffffffff840029c0 <init_kernel+0x1a2>
    0x84002912     0xf4    slli a4,s7,0x2
    0x84002916     0xf8    auipc a3,0x15
    0x8400291a     0xfc    addi a3,a3,458 # ffffffff84017ae0 <__global_pointer$+0x174>
    0x8400291e    0x100    add a4,a4,a3
    0x84002920    0x102    lw a5,0(a4)
    0x84002922    0x104    add a5,a5,a3
    0x84002924    0x106    jr a5
    0x84002926    0x108    slli a5,s6,0x19
    0x8400292a    0x10c    srli a5,a5,0x19
    0x8400292c    0x10e    slli a4,s6,0x19
    0x84002930    0x112    bgez a4,ffffffff84002a26 <init_kernel+0x208>
    0x84002934    0x116    li a4,-1
    0x84002936    0x118    slli a4,a4,0x27
    0x84002938    0x11a    or a5,a5,a4
    0x8400293a    0x11c    j ffffffff84002a26 <init_kernel+0x208>
    0x8400293c    0x11e    slli a5,s6,0x19
    0x84002940    0x122    srli a5,a5,0x19
    0x84002942    0x124    slli a4,s6,0x19
    0x84002946    0x128    bgez a4,ffffffff84002a26 <init_kernel+0x208>
    0x8400294a    0x12c    li a4,-1
    0x8400294c    0x12e    slli a4,a4,0x27
    0x8400294e    0x130    or a5,a5,a4
    0x84002950    0x132    j ffffffff84002a26 <init_kernel+0x208>
    0x84002952    0x134    slli a5,s6,0x19
    0x84002956    0x138    srli a5,a5,0x19
    0x84002958    0x13a    slli a4,s6,0x19
    0x8400295c    0x13e    bgez a4,ffffffff84002a26 <init_kernel+0x208>
    0x84002960    0x142    li a4,-1
    0x84002962    0x144    slli a4,a4,0x27
    0x84002964    0x146    or a5,a5,a4
    0x84002966    0x148    j ffffffff84002a26 <init_kernel+0x208>
    0x84002968    0x14a    slli s6,s6,0x1
    0x8400296a    0x14c    lui a5,0xfc000
    0x8400296e    0x150    srli a5,a5,0x19
    0x84002970    0x152    and a5,s6,a5
    0x84002974    0x156    slli a4,s6,0x19
    0x84002978    0x15a    bgez a4,ffffffff84002a26 <init_kernel+0x208>
    0x8400297c    0x15e    li a4,-1
    0x8400297e    0x160    slli a4,a4,0x27
    0x84002980    0x162    or a5,a5,a4
    0x84002982    0x164    j ffffffff84002a26 <init_kernel+0x208>
    0x84002984    0x166    slli a5,s6,0x19
    0x84002988    0x16a    srli a5,a5,0x19
    0x8400298a    0x16c    slli a4,s6,0x19
    0x8400298e    0x170    bgez a4,ffffffff84002998 <init_kernel+0x17a>
    0x84002992    0x174    li a4,-1
    0x84002994    0x176    slli a4,a4,0x27
    0x84002996    0x178    or a5,a5,a4
    0x84002998    0x17a    andi a5,a5,-1024
    0x8400299c    0x17e    j ffffffff84002a26 <init_kernel+0x208>
    0x8400299e    0x180    andi a5,s6,127
    0x840029a2    0x184    li a4,64
    0x840029a6    0x188    beq a5,a4,ffffffff840029bc <init_kernel+0x19e>
    0x840029aa    0x18c    andi s6,s6,63
    0x840029ae    0x190    addiw s6,s6,1
    0x840029b0    0x192    li a5,-1
    0x840029b2    0x194    sll a5,a5,s6
    0x840029b6    0x198    and a5,a5,s8
    0x840029ba    0x19c    j ffffffff84002a26 <init_kernel+0x208>
    0x840029bc    0x19e    li s6,4
    0x840029be    0x1a0    j ffffffff840029ae <init_kernel+0x190>
    0x840029c0    0x1a2    li a5,3
    0x840029c2    0x1a4    beq s7,a5,ffffffff840029ee <init_kernel+0x1d0>
    0x840029c6    0x1a8    li a5,13
    0x840029c8    0x1aa    beq s7,a5,ffffffff84002a08 <init_kernel+0x1ea>
    0x840029cc    0x1ae    li a4,1
    0x840029ce    0x1b0    li a5,0
    0x840029d0    0x1b2    bne s7,a4,ffffffff84002a26 <init_kernel+0x208>
    0x840029d4    0x1b6    srli s8,s8,0x9
    0x840029d8    0x1ba    slli a5,s8,0x19
    0x840029dc    0x1be    srli a5,a5,0x19
    0x840029de    0x1c0    slli a4,s8,0x19
    0x840029e2    0x1c4    bgez a4,ffffffff84002a26 <init_kernel+0x208>
    0x840029e6    0x1c8    li a4,-1
    0x840029e8    0x1ca    slli a4,a4,0x27
    0x840029ea    0x1cc    or a5,a5,a4
    0x840029ec    0x1ce    j ffffffff84002a26 <init_kernel+0x208>
    0x840029ee    0x1d0    srli s8,s8,0x9
    0x840029f2    0x1d4    slli a5,s8,0x19
    0x840029f6    0x1d8    srli a5,a5,0x19
    0x840029f8    0x1da    slli a4,s8,0x19
    0x840029fc    0x1de    bgez a4,ffffffff84002a26 <init_kernel+0x208>
    0x84002a00    0x1e2    li a4,-1
    0x84002a02    0x1e4    slli a4,a4,0x27
    0x84002a04    0x1e6    or a5,a5,a4
    0x84002a06    0x1e8    j ffffffff84002a26 <init_kernel+0x208>
    0x84002a08    0x1ea    slli s6,s6,0x2
    0x84002a0a    0x1ec    lui a5,0xf8000
    0x84002a0e    0x1f0    srli a5,a5,0x19
    0x84002a10    0x1f2    and a5,s6,a5
    0x84002a14    0x1f6    slli a4,s6,0x19
    0x84002a18    0x1fa    bgez a4,ffffffff84002a26 <init_kernel+0x208>
    0x84002a1c    0x1fe    li a4,-1
    0x84002a1e    0x200    slli a4,a4,0x27
    0x84002a20    0x202    or a5,a5,a4
    0x84002a22    0x204    j ffffffff84002a26 <init_kernel+0x208>
    0x84002a24    0x206    li a5,0
    0x84002a26    0x208    li a4,7
    0x84002a28    0x20a    slli a4,a4,0x3c
    0x84002a2a    0x20c    sd a4,128(a5)
    0x84002a2c    0x20e    sd zero,136(a5) # fffffffff8000088 <ki_end+0x73fd2088>
    0x84002a30    0x212    sd zero,144(a5)
    0x84002a34    0x216    li a4,3
    0x84002a36    0x218    sd a4,152(a5)
    0x84002a38    0x21a    li a3,0
    0x84002a3a    0x21c    mv a2,s2
    0x84002a3c    0x21e    li a1,1
    0x84002a3e    0x220    li a0,0
    0x84002a40    0x222    jal ra,ffffffff840022d8 <populate_bi_frame>
    0x84002a44    0x226    mv a2,s1
    0x84002a46    0x228    mv a3,s3
    0x84002a48    0x22a    ld a0,24(sp)          ; stack access
    0x84002a4a    0x22c    ld a1,32(sp)          ; stack access
    0x84002a4c    0x22e    jal ra,ffffffff84000fa6 <create_it_address_space>
    0x84002a50    0x232    sd a0,40(sp)          ; stack access
    0x84002a52    0x234    sd a1,48(sp)          ; stack access
    0x84002a54    0x236    srli a0,a0,0x3b
    0x84002a56    0x238    beqz a0,ffffffff840028da <init_kernel+0xbc>
    0x84002a5a    0x23c    lui s0,0x1
    0x84002a5c    0x23e    add s0,s0,s2
    0x84002a5e    0x240    mv a4,s0
    0x84002a60    0x242    ld a2,40(sp)          ; stack access
    0x84002a62    0x244    mv a3,a1
    0x84002a64    0x246    ld a0,24(sp)          ; stack access
    0x84002a66    0x248    ld a1,32(sp)          ; stack access
    0x84002a68    0x24a    jal ra,ffffffff84000ca0 <create_bi_frame_cap>
    0x84002a6c    0x24e    mv a4,s2
    0x84002a6e    0x250    ld a2,40(sp)          ; stack access
    0x84002a70    0x252    ld a3,48(sp)          ; stack access
    0x84002a72    0x254    ld a0,24(sp)          ; stack access
    0x84002a74    0x256    ld a1,32(sp)          ; stack access
    0x84002a76    0x258    jal ra,ffffffff84002164 <create_ipcbuf_frame_cap>
    0x84002a7a    0x25c    sd a0,72(sp)          ; stack access
    0x84002a7c    0x25e    sd a1,80(sp)          ; stack access
    0x84002a7e    0x260    srli a0,a0,0x3b
    0x84002a80    0x262    beqz a0,ffffffff840028da <init_kernel+0xbc>
    0x84002a84    0x266    sd s5,0(sp)           ; stack access
    0x84002a86    0x268    li a7,1
    0x84002a88    0x26a    ld a5,88(sp)          ; stack access
    0x84002a8a    0x26c    ld a6,96(sp)          ; stack access
    0x84002a8c    0x26e    ld a3,40(sp)          ; stack access
    0x84002a8e    0x270    ld a4,48(sp)          ; stack access
    0x84002a90    0x272    ld a1,24(sp)          ; stack access
    0x84002a92    0x274    ld a2,32(sp)          ; stack access
    0x84002a94    0x276    addi a0,sp,152
    0x84002a96    0x278    jal ra,ffffffff84001200 <create_frames_of_region>
    0x84002a9a    0x27c    ld a5,168(sp)         ; stack access
    0x84002a9c    0x27e    beqz a5,ffffffff840028da <init_kernel+0xbc>
    0x84002aa0    0x282    auipc a5,0x0
    0x84002aa4    0x286    addi a5,a5,248 # ffffffff84002b98 <ndks_boot>
    0x84002aa8    0x28a    ld a5,568(a5)
    0x84002aac    0x28e    ld a4,152(sp)         ; stack access
    0x84002aae    0x290    sd a4,72(a5)
    0x84002ab0    0x292    ld a4,160(sp)         ; stack access
    0x84002ab2    0x294    sd a4,80(a5)
    0x84002ab4    0x296    ld a0,24(sp)          ; stack access
    0x84002ab6    0x298    ld a1,32(sp)          ; stack access
    0x84002ab8    0x29a    jal ra,ffffffff840012d6 <create_it_asid_pool>
    0x84002abc    0x29e    sd a0,56(sp)          ; stack access
    0x84002abe    0x2a0    sd a1,64(sp)          ; stack access
    0x84002ac0    0x2a2    srli a0,a0,0x3b
    0x84002ac2    0x2a4    beqz a0,ffffffff840028da <init_kernel+0xbc>
    0x84002ac6    0x2a8    ld a2,40(sp)          ; stack access
    0x84002ac8    0x2aa    ld a3,48(sp)          ; stack access
    0x84002aca    0x2ac    ld a0,56(sp)          ; stack access
    0x84002acc    0x2ae    jal ra,ffffffff84000208 <write_it_asid_pool>
    0x84002ad0    0x2b2    jal ra,ffffffff84002144 <create_idle_thread>
    0x84002ad4    0x2b6    beqz a0,ffffffff840028da <init_kernel+0xbc>
    0x84002ad8    0x2ba    ld a5,80(sp)          ; stack access
    0x84002ada    0x2bc    sd a5,0(sp)           ; stack access
    0x84002adc    0x2be    ld a7,72(sp)          ; stack access
    0x84002ade    0x2c0    mv a6,s2
    0x84002ae0    0x2c2    mv a5,s0
    0x84002ae2    0x2c4    mv a4,s4
    0x84002ae4    0x2c6    ld a2,40(sp)          ; stack access
    0x84002ae6    0x2c8    ld a3,48(sp)          ; stack access
    0x84002ae8    0x2ca    ld a0,24(sp)          ; stack access
    0x84002aea    0x2cc    ld a1,32(sp)          ; stack access
    0x84002aec    0x2ce    jal ra,ffffffff840017ca <create_initial_thread>
    0x84002af0    0x2d2    beqz a0,ffffffff840028da <init_kernel+0xbc>
    0x84002af4    0x2d6    jal ra,ffffffff8400158c <init_core_state>
    0x84002af8    0x2da    ld a0,24(sp)          ; stack access
    0x84002afa    0x2dc    sd a0,120(sp)         ; stack access
    0x84002afc    0x2de    ld a1,32(sp)          ; stack access
    0x84002afe    0x2e0    sd a1,128(sp)         ; stack access
    0x84002b00    0x2e2    lui a5,0xff021
    0x84002b04    0x2e6    slli a5,a5,0xe
    0x84002b06    0x2e8    sd a5,136(sp)         ; stack access
    0x84002b08    0x2ea    auipc a5,0xd
    0x84002b0c    0x2ee    addi a5,a5,1272 # ffffffff84010000 <ki_boot_end>
    0x84002b10    0x2f2    li a4,-63
    0x84002b14    0x2f6    slli a4,a4,0x20
    0x84002b16    0x2f8    add a5,a5,a4
    0x84002b18    0x2fa    sd a5,144(sp)         ; stack access
    0x84002b1a    0x2fc    auipc s1,0x0
    0x84002b1e    0x300    addi s1,s1,126 # ffffffff84002b98 <ndks_boot>
    0x84002b22    0x304    ld s0,576(s1)
    0x84002b26    0x308    mv a2,s0
    0x84002b28    0x30a    jal ra,ffffffff840016ba <create_device_untypeds>
    0x84002b2c    0x30e    mv a4,s0
    0x84002b2e    0x310    ld a2,136(sp)         ; stack access
    0x84002b30    0x312    ld a3,144(sp)         ; stack access
    0x84002b32    0x314    ld a0,120(sp)         ; stack access
    0x84002b34    0x316    ld a1,128(sp)         ; stack access
    0x84002b36    0x318    jal ra,ffffffff84001752 <create_kernel_untypeds>
    0x84002b3a    0x31c    ld a4,576(s1)
    0x84002b3e    0x320    ld a5,568(s1)
    0x84002b42    0x324    sd s0,152(a5)
    0x84002b44    0x326    sd a4,160(a5)
    0x84002b46    0x328    beqz a0,ffffffff840028da <init_kernel+0xbc>
    0x84002b4a    0x32c    ld a5,568(s1)
    0x84002b4e    0x330    sd zero,56(a5)
    0x84002b52    0x334    sd zero,64(a5)
    0x84002b56    0x338    jal ra,ffffffff840017b0 <bi_finalise>
    0x84002b5a    0x33c    li a5,1
    0x84002b5c    0x33e    auipc a4,0x1b
    0x84002b60    0x342    sd a5,-1588(a4) # ffffffff8401d528 <ksNumCPUs>
    0x84002b64    0x346    jal ra,ffffffff84012956 <schedule>
    0x84002b68    0x34a    jal ra,ffffffff84012430 <activateThread>
    0x84002b6c    0x34e    ld ra,264(sp)         ; stack access
    0x84002b6e    0x350    ld s0,256(sp)         ; stack access
    0x84002b70    0x352    ld s1,248(sp)         ; stack access
    0x84002b72    0x354    ld s2,240(sp)         ; stack access
    0x84002b74    0x356    ld s3,232(sp)         ; stack access
    0x84002b76    0x358    ld s4,224(sp)         ; stack access
    0x84002b78    0x35a    ld s5,216(sp)         ; stack access
    0x84002b7a    0x35c    ld s6,208(sp)         ; stack access
    0x84002b7c    0x35e    ld s7,200(sp)         ; stack access
    0x84002b7e    0x360    ld s8,192(sp)         ; stack access
    0x84002b80    0x362    ld s9,184(sp)         ; stack access
    0x84002b82    0x364    addi sp,sp,272
    0x84002b84    0x366    ret
    0x84002b86    0x368    unimp

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
317 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 489 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_840113B0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84010B14` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84010B1E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_84010AFC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a5_sip_84010AE0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010A54` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010A3E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_8401029C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_840100D4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84000986` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_8400097A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a0_84000968` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_840001FE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000202` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_84010972` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_840108A8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_840108D8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_8401084A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840108AC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840108DC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401084E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010788` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a3_stval_84010682` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400090C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000680` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8401008C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8401007C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84010084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840100A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84010000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_8401426E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401080E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84013AAA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_84013A9C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a4_84013AAE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84015ACC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84015DCE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_8400286A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84002872` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_84002B86` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
Graph spec failed in trap_entry for pos 0x840100b6.
Graph spec failed in trap_entry for pos 0x840100b6.
Graph spec failed in trap_entry for pos 0x840100ae.
Graph spec failed in trap_entry for pos 0x840100ae.
No export failures.
No call offset failures.
> 