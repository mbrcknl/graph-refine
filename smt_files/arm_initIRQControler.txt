(set-option :produce-models true)
(set-logic QF_AUFBV)
(define-fun load-word32 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)))
	(_ BitVec 32)
(select m ((_ extract 31 2) p)))
(define-fun store-word32 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)) (v (_ BitVec 32)))
	(Array (_ BitVec 30) (_ BitVec 32))
(store m ((_ extract 31 2) p) v))
(define-fun load-word64 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)))
	(_ BitVec 64)
(bvor ((_ zero_extend 32) (load-word32 m p))
	(bvshl ((_ zero_extend 32)
		(load-word32 m (bvadd p #x00000004))) #x0000000000000020)))
(define-fun store-word64 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)) (v (_ BitVec 64)))
        (Array (_ BitVec 30) (_ BitVec 32))
(store-word32 (store-word32 m p ((_ extract 31 0) v))
	(bvadd p #x00000004) ((_ extract 63 32) v)))
(define-fun word8-shift ((p (_ BitVec 32))) (_ BitVec 32)
(bvshl ((_ zero_extend 30) ((_ extract 1 0) p)) #x00000003))
(define-fun word8-get ((p (_ BitVec 32)) (x (_ BitVec 32))) (_ BitVec 8)
((_ extract 7 0) (bvlshr x (word8-shift p))))
(define-fun load-word8 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32))) (_ BitVec 8)
(word8-get p (load-word32 m p)))
(define-fun word8-put ((p (_ BitVec 32)) (x (_ BitVec 32)) (y (_ BitVec 8)))
  (_ BitVec 32) (bvor (bvshl ((_ zero_extend 24) y) (word8-shift p))
	(bvand x (bvnot (bvshl #x000000FF (word8-shift p))))))
(define-fun store-word8 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)) (v (_ BitVec 8)))
	(Array (_ BitVec 30) (_ BitVec 32))
(store-word32 m p (word8-put p (load-word32 m p) v)))
(define-fun mem-dom ((p (_ BitVec 32)) (d (Array (_ BitVec 32) (_ BitVec 1)))) Bool
(not (= (select d p) #b0)))
(define-fun mem-eq ((x (Array (_ BitVec 30) (_ BitVec 32))) (y (Array (_ BitVec 30) (_ BitVec 32)))) Bool (= x y))
(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))
    Bool (= x y))
(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))
   (b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2))) Bool
(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))
(declare-fun unspecified-precond () Bool)
(declare-fun rodata-witness () (_ BitVec 32))
(declare-fun rodata-witness-val () (_ BitVec 32))
(assert (or (and (bvule #xe000434c rodata-witness) (bvule rodata-witness #xe0004383)) (and (bvule #xe001b360 rodata-witness) (bvule rodata-witness #xe001b44b))))
(assert (= (bvand rodata-witness #x00000003) #x00000000))
(define-fun rodata ((m (Array (_ BitVec 30) (_ BitVec 32)))) Bool (and (= (load-word32 m #xe0004380) #x00000000) 
  (= (load-word32 m #xe001b380) #x00000011) 
  (= (load-word32 m #xe001b384) #x0000000d) 
  (= (load-word32 m #xe001b410) #x00000002) 
  (= (load-word32 m #xe001b388) #x0000000e) 
  (= (load-word32 m #xe001b36c) #x00000003) 
  (= (load-word32 m #xe001b38c) #x00000010) 
  (= (load-word32 m #xe001b40c) #x0000000c) 
  (= (load-word32 m #xe001b390) #x00000011) 
  (= (load-word32 m #xe001b3d8) #x00000002) 
  (= (load-word32 m #xe001b394) #x0000000d) 
  (= (load-word32 m #xe001b398) #x00000010) 
  (= (load-word32 m #xe001b404) #x0000000a) 
  (= (load-word32 m #xe001b39c) #x00000000) 
  (= (load-word32 m #xe001b3a0) #x00000000) 
  (= (load-word32 m #xe001b370) #x00000004) 
  (= (load-word32 m #xe001b3a4) #x00000000) 
  (= (load-word32 m #xe001b400) #x00000009) 
  (= (load-word32 m #xe001b3a8) #x00000000) 
  (= (load-word32 m #xe001b3dc) #x0000002a) 
  (= (load-word32 m #xe001b3ac) #x00000000) 
  (= (load-word32 m #xe001b3fc) #x00000008) 
  (= (load-word32 m #xe001b43c) #xfff02600) 
  (= (load-word32 m #xe001b3b0) #x00000000) 
  (= (load-word32 m #xe001b408) #x0000000b) 
  (= (load-word32 m #xe001b3b4) #x00000000) 
  (= (load-word32 m #xe001b3f8) #x00000001) 
  (= (load-word32 m #xe001b440) #xfff03000) 
  (= (load-word32 m #xe001b438) #x00000003) 
  (= (load-word32 m #xe001b3b8) #x00000000) 
  (= (load-word32 m #xe0004374) #x00a02000) 
  (= (load-word32 m #xe001b3bc) #x00000000) 
  (= (load-word32 m #xe001b3f4) #x00000000) 
  (= (load-word32 m #xe001b434) #xe0010000) 
  (= (load-word32 m #xe001b3c0) #x00000002) 
  (= (load-word32 m #xe001b360) #x00000000) 
  (= (load-word32 m #xe001b3c4) #x00000003) 
  (= (load-word32 m #xe001b3f0) #x00000010) 
  (= (load-word32 m #xe001b430) #xe0000000) 
  (= (load-word32 m #xe001b3c8) #x00000004) 
  (= (load-word32 m #xe001b3cc) #x00000005) 
  (= (load-word32 m #xe001b444) #xfff02100) 
  (= (load-word32 m #xe000434c) #x10000000) 
  (= (load-word32 m #xe001b3ec) #x0000000d) 
  (= (load-word32 m #xe001b42c) #x00000012) 
  (= (load-word32 m #xe0004350) #x2ff00000) 
  (= (load-word32 m #xe0004378) #xfff03000) 
  (= (load-word32 m #xe0004354) #x00a01000) 
  (= (load-word32 m #xe001b3e8) #x00000011) 
  (= (load-word32 m #xe001b428) #x0000000e) 
  (= (load-word32 m #xe0004358) #xfff01000) 
  (= (load-word32 m #xe001b364) #x00000001) 
  (= (load-word32 m #xe000435c) #x00000001) 
  (= (load-word32 m #xe001b3e4) #x00000049) 
  (= (load-word32 m #xe001b424) #x00000007) 
  (= (load-word32 m #xe0004360) #x00000000) 
  (= (load-word32 m #xe001b3d0) #x00000000) 
  (= (load-word32 m #xe0004364) #x00a00000) 
  (= (load-word32 m #xe001b3e0) #x00000001) 
  (= (load-word32 m #xe001b448) #xfff01000) 
  (= (load-word32 m #xe001b420) #x00000006) 
  (= (load-word32 m #xe0004368) #xfff02000) 
  (= (load-word32 m #xe000437c) #x00000001) 
  (= (load-word32 m #xe000436c) #x00000001) 
  (= (load-word32 m #xe001b41c) #x00000005) 
  (= (load-word32 m #xe0004370) #x00000000) 
  (= (load-word32 m #xe001b368) #x00000002) 
  (= (load-word32 m #xe001b374) #x00000005) 
  (= (load-word32 m #xe001b418) #x00000004) 
  (= (load-word32 m #xe001b378) #x00000006) 
  (= (load-word32 m #xe001b3d4) #x0000000f) 
  (= (load-word32 m #xe001b37c) #x00000007) 
  (= (load-word32 m #xe001b414) #x00000003) 
  (= (load-word32 m rodata-witness) rodata-witness-val)))
(define-fun implies-rodata ((m (Array (_ BitVec 30) (_ BitVec 32)))) Bool (= (load-word32 m rodata-witness) rodata-witness-val))
(declare-fun Mem_init () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun GhostAssertions_init () (Array (_ BitVec 50) (_ BitVec 32)))
(declare-fun ret_init () (_ BitVec 32))
(declare-fun r0_init () (_ BitVec 32))
(declare-fun r1_init () (_ BitVec 32))
(declare-fun r2_init () (_ BitVec 32))
(declare-fun r3_init () (_ BitVec 32))
(declare-fun r4_init () (_ BitVec 32))
(declare-fun r5_init () (_ BitVec 32))
(declare-fun r6_init () (_ BitVec 32))
(declare-fun r7_init () (_ BitVec 32))
(declare-fun r8_init () (_ BitVec 32))
(declare-fun r9_init () (_ BitVec 32))
(declare-fun r10_init () (_ BitVec 32))
(declare-fun r11_init () (_ BitVec 32))
(declare-fun r12_init () (_ BitVec 32))
(declare-fun r13_init () (_ BitVec 32))
(declare-fun r14_init () (_ BitVec 32))
(declare-fun r15_init () (_ BitVec 32))
(declare-fun r16_init () (_ BitVec 32))
(declare-fun r17_init () (_ BitVec 32))
(declare-fun r18_init () (_ BitVec 32))
(declare-fun r19_init () (_ BitVec 32))
(declare-fun r20_init () (_ BitVec 32))
(declare-fun r21_init () (_ BitVec 32))
(declare-fun r22_init () (_ BitVec 32))
(declare-fun r23_init () (_ BitVec 32))
(declare-fun r24_init () (_ BitVec 32))
(declare-fun r25_init () (_ BitVec 32))
(declare-fun r26_init () (_ BitVec 32))
(declare-fun r27_init () (_ BitVec 32))
(declare-fun r28_init () (_ BitVec 32))
(declare-fun r29_init () (_ BitVec 32))
(declare-fun r30_init () (_ BitVec 32))
(declare-fun r31_init () (_ BitVec 32))
(declare-fun mode_init () (_ BitVec 32))
(declare-fun n_init () Bool)
(declare-fun z_init () Bool)
(declare-fun c_init () Bool)
(declare-fun v_init () Bool)
(declare-fun mem_init () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_init () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_init () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_init () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_init () (_ BitVec 64))
(declare-fun ret_addr_input_init () (_ BitVec 32))
(define-fun path_cond_to_7_ASM () Bool true)
(define-fun cond_at_7 () Bool (and (and (word32-eq (bvand r13_init #x00000001) #x00000000) (word32-eq (bvand r13_init #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_4_ASM () Bool (and cond_at_7 path_cond_to_7_ASM))
(define-fun query_load-word32stack_ini () (_ BitVec 32) (load-word32 stack_init (bvadd r13_init #xfffffffc)))
(define-fun query_bvaddr13_init_xfffff () (_ BitVec 32) (bvadd r13_init #xfffffffc))
(define-fun query_load-word32store-wor () (_ BitVec 32) (load-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8)))
(define-fun query_bvaddr13_init_xfffff.1 () (_ BitVec 32) (bvadd r13_init #xfffffff8))
(define-fun stack_after_4 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r4_init))
(define-fun r13_after_4 () (_ BitVec 32) (bvadd r13_init #xfffffff8))
(declare-fun fun_success_at_5 () Bool)
(declare-fun r0_after_5 () (_ BitVec 32))
(declare-fun r1_after_5 () (_ BitVec 32))
(declare-fun r2_after_5 () (_ BitVec 32))
(declare-fun r3_after_5 () (_ BitVec 32))
(declare-fun r4_after_5 () (_ BitVec 32))
(declare-fun r5_after_5 () (_ BitVec 32))
(declare-fun r6_after_5 () (_ BitVec 32))
(declare-fun r7_after_5 () (_ BitVec 32))
(declare-fun r8_after_5 () (_ BitVec 32))
(declare-fun r9_after_5 () (_ BitVec 32))
(declare-fun r10_after_5 () (_ BitVec 32))
(declare-fun r11_after_5 () (_ BitVec 32))
(declare-fun r12_after_5 () (_ BitVec 32))
(declare-fun r13_after_5 () (_ BitVec 32))
(declare-fun r14_after_5 () (_ BitVec 32))
(declare-fun r15_after_5 () (_ BitVec 32))
(declare-fun r16_after_5 () (_ BitVec 32))
(declare-fun r17_after_5 () (_ BitVec 32))
(declare-fun r18_after_5 () (_ BitVec 32))
(declare-fun r19_after_5 () (_ BitVec 32))
(declare-fun r20_after_5 () (_ BitVec 32))
(declare-fun r21_after_5 () (_ BitVec 32))
(declare-fun r22_after_5 () (_ BitVec 32))
(declare-fun r23_after_5 () (_ BitVec 32))
(declare-fun r24_after_5 () (_ BitVec 32))
(declare-fun r25_after_5 () (_ BitVec 32))
(declare-fun r26_after_5 () (_ BitVec 32))
(declare-fun r27_after_5 () (_ BitVec 32))
(declare-fun r28_after_5 () (_ BitVec 32))
(declare-fun r29_after_5 () (_ BitVec 32))
(declare-fun r30_after_5 () (_ BitVec 32))
(declare-fun r31_after_5 () (_ BitVec 32))
(declare-fun mode_after_5 () (_ BitVec 32))
(declare-fun n_after_5 () Bool)
(declare-fun z_after_5 () Bool)
(declare-fun c_after_5 () Bool)
(declare-fun v_after_5 () Bool)
(declare-fun mem_after_5 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_5 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_5 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_5 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_5 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_5 () (_ BitVec 32))
(declare-fun stack_for_5_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_5_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun query_bvaddr13_after_5_x00 () (_ BitVec 32) (bvadd r13_after_5 #x00000004))
(define-fun query_load-word32stack_for () (_ BitVec 32) (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004)))
(define-fun query_load-word32stack_for.1 () (_ BitVec 32) (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))

(define-fun cond_at_10 () Bool
(and 
    (and true 
         (and
            (and
                (word32-eq (bvand r13_after_5 #x00000001) #x00000000)
                (word32-eq (bvand r13_after_5 #x00000002) #x00000000))
            (and
                true
                (and
                    true
                    (and
                        true
                        (and
                            true
                            (and
                                (word32-eq 
                                    (bvand
                                        (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                                             (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                                             (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                                        #x00000001) 
                                    #x00000000)
                                (and
                                    true
                                    (and
                                        true
                                        (and
                                            (word32-eq
                                                (bvand
                                                    (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                                                        (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                                                        (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                                                    #x00000002)
                                                #x00000000)
                                            (and
                                                true
                                                (and 
                                                    (word32-eq
                                                        (bvand 
                                                            (bvshl 
                                                                (bvlshr
                                                                    (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                                                                        (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                                                                        (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                                                                    #x00000001)
                                                                #x00000001)
                                                            #x00000001)
                                                        #x00000000)
                                                    (word32-eq

                                                        (bvand

                                                            (bvshl
                                                                (bvlshr
                                                                    (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                                                                        (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                                                                        (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                                                                    #x00000001)
                                                                #x00000001)

                                                            #x00000002)

                                                        #x00000000)))))))))))))

    (word32-eq
        (bvshl
            (bvlshr
                (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                    (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                    (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                #x00000001)
            #x00000001)
        ret_init)
        
        ))

(define-fun path_cond_to_Err_ASM () Bool (or (and (not cond_at_10) path_cond_to_4_ASM) (or false (and (not cond_at_7) path_cond_to_7_ASM))))

(define-fun path_cond_to_6_ASM () Bool (and cond_at_10 path_cond_to_4_ASM))
(define-fun query_r13_after_5 () (_ BitVec 32) r13_after_5)
(define-fun query_load-word32stack_for.2 () (_ BitVec 32) (load-word32 stack_for_5_top r13_after_5))
(define-fun query_load-word32stack_for.3 () (_ BitVec 32) (load-word32 stack_for_5_bot r13_after_5))
(define-fun r4_after_6 () (_ BitVec 32) (ite (bvule r13_after_5 r13_after_5) (load-word32 stack_for_5_top r13_after_5) (load-word32 stack_for_5_bot r13_after_5)))
(define-fun r13_after_6 () (_ BitVec 32) (bvadd r13_after_5 #x00000008))
(define-fun path_cond_to_2_C () Bool true)
(declare-fun fun_success_at_2 () Bool)
(declare-fun Mem_after_2 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun GhostAssertions_after_2 () (Array (_ BitVec 50) (_ BitVec 32)))
(define-fun query_mem-eqmem_initMem_in () Bool (mem-eq mem_init Mem_init))
(define-fun query_implies-rodataMem_in () Bool (implies-rodata Mem_init))
(define-fun query_mem-eqmem_after_5Mem () Bool (mem-eq mem_after_5 Mem_after_2))
(define-fun query_rodataMem_after_2 () Bool (rodata Mem_after_2))
(define-fun query_=stack_for_5_topstac () Bool (= stack_for_5_top stack_after_4))
(assert (=> 
    (and
        (mem-eq mem_init Mem_init) (and (implies-rodata Mem_init) (and (word32-eq (bvand r13_after_4 #x00000003) #x00000000) (and (word32-eq #xe0000a14 #xe0000a14) (and (word32-eq (bvand #xe0000a14 #x00000003) #x00000000) (and (word32-eq r0_init r0_init) (and (bvule #x00000000 r13_after_4) path_cond_to_2_C))))))) (and (mem-eq mem_after_5 Mem_after_2) (and (rodata Mem_after_2) (and (word32-eq r4_init r4_after_5) (and (word32-eq r5_init r5_after_5) (and (word32-eq r6_init r6_after_5) (and (word32-eq r7_init r7_after_5) (and (word32-eq r8_init r8_after_5) (and (word32-eq r9_init r9_after_5) (and (word32-eq r10_init r10_after_5) (and (word32-eq r11_init r11_after_5) (and (word32-eq r13_after_4 r13_after_5) (and (and (= r13_after_4 r13_after_5) (=> true (= stack_for_5_top stack_after_4))) (=> fun_success_at_2 fun_success_at_5)))))))))))))))
(define-fun query_rodataMem_init () Bool (rodata Mem_init))
(define-fun query_implies-rodataMem_af () Bool (implies-rodata Mem_after_2))
(declare-fun stack-eq-witness () (_ BitVec 32))
(assert (= (bvand stack-eq-witness #x00000003) #x00000000))
(assert (bvule r13_init stack-eq-witness))
(define-fun query_stack-eq-witness () (_ BitVec 32) stack-eq-witness)
(define-fun query_load-word32stack_ini.1 () (_ BitVec 32) (load-word32 stack_init stack-eq-witness))
(define-fun query_load-word32stack_for.4 () (_ BitVec 32) (load-word32 stack_for_5_top stack-eq-witness))
(define-fun query_load-word32stack_for.5 () (_ BitVec 32) (load-word32 stack_for_5_bot stack-eq-witness))
(define-fun stack-eq () Bool (word32-eq (load-word32 stack_init stack-eq-witness) (ite (bvule r13_after_5 stack-eq-witness) (load-word32 stack_for_5_top stack-eq-witness) (load-word32 stack_for_5_bot stack-eq-witness))))

;(assert (not (=> (=> false false) (=> (mem-eq mem_init Mem_init) (=> (rodata Mem_init) (=> (word32-eq (bvand r13_init #x00000003) #x00000000) (=> (word32-eq ret_init r14_init) (=> (word32-eq (bvand ret_init #x00000003) #x00000000) (=> (word32-eq ret_addr_input_init r0_init) (=> (bvule #x00000008 r13_init) (=> (=> path_cond_to_Err_ASM false) (=> true (and (= r13_init r13_after_6) stack-eq)))))))))))))

(assert (bvule #x00000008 r13_init))
(assert (word32-eq (bvand ret_init #x00000003) #x00000000))
(assert (mem-eq mem_init Mem_init))
(assert (word32-eq (bvand r13_init #x00000003) #x00000000))
(assert (word32-eq ret_addr_input_init r0_init))
(assert (bvule #x00000008 r13_init))
(assert path_cond_to_Err_ASM)
(assert (= r13_init r13_after_6))
(assert stack-eq)
(assert (rodata Mem_init))
(assert (word32-eq 
                                    (bvand
                                        (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                                             (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                                             (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                                        #x00000001) 
                                    #x00000000))
                               
(assert 
    (word32-eq
        (bvshl
            (bvlshr
                (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                    (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                    (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                #x00000001)
            #x00000001)
        ret_init)
;         #x00000000)
)
;(assert cond_at_10)
;(assert (=> path_cond_to_Err_ASM false))
;(assert (not path_cond_to_Err_ASM))
(check-sat)

(get-value (stack_after_4))
(get-value (r13_after_5))
(get-value (cond_at_10))
(get-value (r0_init))
(get-value (r13_after_6))
(get-value (ret_init))
(get-value ((bvule r13_after_5 (bvadd r13_after_5 #x00000004))))
(get-value ((load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))))
(get-value ((mem-eq mem_init Mem_init)))
(get-value ((rodata Mem_init)))
(get-value ((word32-eq (bvand r13_init #x00000003) #x00000000)))
(get-value ((word32-eq ret_init r14_init)))
(get-value (ret_addr_input_init))
(get-value (ret_init))
(get-value (path_cond_to_Err_ASM))
(get-value (stack-eq))
(get-value (r13_init))
(get-value (r13_after_6))
(get-value ((=> false false)))
(get-value (stack-eq))
(get-value (cond_at_10))
(get-value ((=> true (and (= r13_init r13_after_6) stack-eq))))

(get-value ((not (=> (=> false false) (=> (mem-eq mem_init Mem_init) (=> (rodata Mem_init) (=> (word32-eq (bvand r13_init #x00000003) #x00000000) (=> (word32-eq ret_init r14_init) (=> (word32-eq (bvand ret_init #x00000003) #x00000000) (=> (word32-eq ret_addr_input_init r0_init) (=> (bvule #x00000008 r13_init) (=> (=> path_cond_to_Err_ASM false) (=> true (and (= r13_init r13_after_6) stack-eq))))))))))))))
(get-value ((not (=> 
                    (=> false false)
                    (=>
                        (mem-eq mem_init Mem_init)
                        (=>
                            (rodata Mem_init)
                            (=>
                                (word32-eq (bvand r13_init #x00000003) #x00000000)
                                (=>
                                    (word32-eq ret_init r14_init)
                                    (=>
                                        (word32-eq (bvand ret_init #x00000003) #x00000000)
                                        (=>
                                            (word32-eq ret_addr_input_init r0_init)
                                            (=>
                                                (bvule #x00000008 r13_init)
                                                (=>
                                                    (=> path_cond_to_Err_ASM false)
                                                        (=> true
                                                            (and
                                                                (= r13_init r13_after_6)
                                                                stack-eq)
)))))))))))))
(get-value (
                                                            (bvshl
                                                                (bvlshr
                                                                    (ite (bvule r13_after_5 (bvadd r13_after_5 #x00000004))
                                                                        (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004))
                                                                        (load-word32 stack_for_5_bot (bvadd r13_after_5 #x00000004)))
                                                                    #x00000001)
                                                                #x00000001)
))

(get-value ((bvlshr (load-word32 stack_for_5_top (bvadd r13_after_5 #x00000004)) #x00000001)))