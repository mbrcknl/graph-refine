(set-option :produce-models true)
(set-logic QF_AUFBV)

(define-fun load-word8 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)))
	(_ BitVec 8)
	(select m p)
)


(define-fun load-word16 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)))
	(_ BitVec 16)
	(concat (select m (bvadd p #x0000000000000001))
	        (select m p)
	)
)


(define-fun load-word32 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)))
	(_ BitVec 32)
	(concat 
		(concat (select m (bvadd p #x0000000000000003))
				(select m (bvadd p #x0000000000000002)))
		(concat (select m (bvadd p #x0000000000000001))
				(select m p))
	)
)


(define-fun load-word64 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)))
	(_ BitVec 64)
	(concat (load-word32 m (bvadd p #x0000000000000004))
			(load-word32 m p)
	)
)


(define-fun store-word8 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)) (v (_ BitVec 8)))
	(Array (_ BitVec 64) (_ BitVec 8))
	(store m p v)
)


(define-fun store-word16 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)) (v (_ BitVec 16)))
	(Array (_ BitVec 64) (_ BitVec 8))
	(store-word8
		(store-word8 m p ((_ extract 7 0) v))
		(bvadd p #x0000000000000001)
		((_ extract 15 8) v)
	)
)


(define-fun store-word32 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)) (v (_ BitVec 32)))
	(Array (_ BitVec 64) (_ BitVec 8))
	(store-word16
		(store-word16 m p ((_ extract 15 0) v))
		(bvadd p #x0000000000000002)
		((_ extract 31 16) v)
	)
)


(define-fun store-word64 ((m (Array (_ BitVec 64) (_ BitVec 8))) (p (_ BitVec 64)) (v (_ BitVec 64)))
	(Array (_ BitVec 64) (_ BitVec 8))
	(store-word32
		(store-word32 m p ((_ extract 31 0) v))
		(bvadd p #x0000000000000004)
		((_ extract 63 32) v)
	)
)


(define-fun mem-dom ((p (_ BitVec 64)) (d (Array (_ BitVec 64) (_ BitVec 1))))
	Bool
	(not (= (select d p) #b0)))


(define-fun mem-eq ((x (Array (_ BitVec 64) (_ BitVec 8))) (y (Array (_ BitVec 64) (_ BitVec 8))))
	Bool
	(= x y))


(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32)))
	Bool
	(= x y))


(define-fun word64-eq ((x (_ BitVec 64)) (y (_ BitVec 64)))
    Bool
    (= x y))


(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2))
	(b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2)))
	Bool
	(bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))

(declare-fun unspecified-precond () Bool)
(define-fun rodata ((m (Array (_ BitVec 64) (_ BitVec 8)))) Bool true)
(define-fun implies-rodata ((m (Array (_ BitVec 64) (_ BitVec 8)))) Bool true)
(declare-fun irq___unsigned_v_init () (_ BitVec 32))
(declare-fun Mem_init () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun GhostAssertions_init () (Array (_ BitVec 50) (_ BitVec 64)))
(declare-fun ret_init () (_ BitVec 64))
(declare-fun r0_init () (_ BitVec 64))
(declare-fun r1_init () (_ BitVec 64))
(declare-fun r2_init () (_ BitVec 64))
(declare-fun r3_init () (_ BitVec 64))
(declare-fun r4_init () (_ BitVec 64))
(declare-fun r5_init () (_ BitVec 64))
(declare-fun r6_init () (_ BitVec 64))
(declare-fun r7_init () (_ BitVec 64))
(declare-fun r8_init () (_ BitVec 64))
(declare-fun r9_init () (_ BitVec 64))
(declare-fun r10_init () (_ BitVec 64))
(declare-fun r11_init () (_ BitVec 64))
(declare-fun r12_init () (_ BitVec 64))
(declare-fun r13_init () (_ BitVec 64))
(declare-fun r14_init () (_ BitVec 64))
(declare-fun r15_init () (_ BitVec 64))
(declare-fun r16_init () (_ BitVec 64))
(declare-fun r17_init () (_ BitVec 64))
(declare-fun r18_init () (_ BitVec 64))
(declare-fun r19_init () (_ BitVec 64))
(declare-fun r20_init () (_ BitVec 64))
(declare-fun r21_init () (_ BitVec 64))
(declare-fun r22_init () (_ BitVec 64))
(declare-fun r23_init () (_ BitVec 64))
(declare-fun r24_init () (_ BitVec 64))
(declare-fun r25_init () (_ BitVec 64))
(declare-fun r26_init () (_ BitVec 64))
(declare-fun r27_init () (_ BitVec 64))
(declare-fun r28_init () (_ BitVec 64))
(declare-fun r29_init () (_ BitVec 64))
(declare-fun r30_init () (_ BitVec 64))
(declare-fun r31_init () (_ BitVec 64))
(declare-fun mode_init () (_ BitVec 64))
(declare-fun n_init () Bool)
(declare-fun z_init () Bool)
(declare-fun c_init () Bool)
(declare-fun v_init () Bool)
(declare-fun mem_init () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun dom_init () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun stack_init () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun dom_stack_init () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun clock_init () (_ BitVec 64))
(declare-fun ret_addr_input_init () (_ BitVec 64))
(define-fun path_cond_to_12_ASM () Bool true)
(define-fun r2_after_12 () (_ BitVec 64) (bvadd r2_init #xfffffffffffffff0))
(define-fun cond_at_13 () Bool (and true (and (word64-eq (bvand (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) #x0000000000000000) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_4_ASM () Bool (and cond_at_13 path_cond_to_12_ASM))
(define-fun query_bvandbvaddbvadd_x000 () (_ BitVec 64) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) #xfffffffffffffffd))
(define-fun query_load-word64stack_ini () (_ BitVec 64) (load-word64 stack_init (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) #xfffffffffffffffd)))
(define-fun query_bvandbvaddbvadd_x000.1 () (_ BitVec 64) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) #xfffffffffffffffd))
(define-fun query_load-word64store-wor () (_ BitVec 64) (load-word64 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) #xfffffffffffffffd)))
(define-fun query_bvandbvaddbvadd_x000.2 () (_ BitVec 64) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) #xfffffffffffffffd))
(define-fun query_load-word64store-wor.1 () (_ BitVec 64) (load-word64 (store-word8 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000030) #x00000000000000ff))) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) #xfffffffffffffffd)))
(define-fun query_bvandbvaddbvadd_x000.3 () (_ BitVec 64) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000004) #xfffffffffffffffd))
(define-fun query_load-word64store-wor.2 () (_ BitVec 64) (load-word64 (store-word8 (store-word8 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000030) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000028) #x00000000000000ff))) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000004) #xfffffffffffffffd)))
(define-fun query_bvandbvaddbvadd_x000.4 () (_ BitVec 64) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000003) #xfffffffffffffffd))
(define-fun query_load-word64store-wor.3 () (_ BitVec 64) (load-word64 (store-word8 (store-word8 (store-word8 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000030) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000028) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000004) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000020) #x00000000000000ff))) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000003) #xfffffffffffffffd)))
(define-fun query_bvandbvaddbvadd_x000.5 () (_ BitVec 64) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000002) #xfffffffffffffffd))
(define-fun query_load-word64store-wor.4 () (_ BitVec 64) (load-word64 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000030) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000028) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000004) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000020) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000003) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000018) #x00000000000000ff))) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000002) #xfffffffffffffffd)))
(define-fun query_bvandbvaddbvadd_x000.6 () (_ BitVec 64) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000001) #xfffffffffffffffd))
(define-fun query_load-word64store-wor.5 () (_ BitVec 64) (load-word64 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000030) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000028) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000004) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000020) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000003) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000018) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000002) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000010) #x00000000000000ff))) (bvand (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000001) #xfffffffffffffffd)))
(define-fun query_bvandbvadd_x00000000 () (_ BitVec 64) (bvand (bvadd #x0000000000000008 r2_after_12) #xfffffffffffffffd))
(define-fun query_load-word64store-wor.6 () (_ BitVec 64) (load-word64 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000030) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000028) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000004) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000020) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000003) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000018) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000002) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000010) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000001) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000008) #x00000000000000ff))) (bvand (bvadd #x0000000000000008 r2_after_12) #xfffffffffffffffd)))
(define-fun stack_after_4 () (Array (_ BitVec 64) (_ BitVec 8)) (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 (store-word8 stack_init (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000007) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000038) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000006) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000030) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000005) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000028) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000004) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000020) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000003) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000018) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000002) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000010) #x00000000000000ff))) (bvadd (bvadd #x0000000000000008 r2_after_12) #x0000000000000001) ((_ extract 7 0) (bvand (bvlshr r1_init #x0000000000000008) #x00000000000000ff))) (bvadd #x0000000000000008 r2_after_12) ((_ extract 7 0) (bvand r1_init #x00000000000000ff))))
(define-fun r10_after_15 () (_ BitVec 64) #x0000000000000000)
(declare-fun setIRQState_success_at_6 () Bool)
(declare-fun r0_after_6 () (_ BitVec 64))
(declare-fun r1_after_6 () (_ BitVec 64))
;(declare-fun r2_after_6 () (_ BitVec 64))
(define-fun r2_after_6 () (_ BitVec 64) r2_after_12)
(declare-fun r3_after_6 () (_ BitVec 64))
(declare-fun r4_after_6 () (_ BitVec 64))
(declare-fun r5_after_6 () (_ BitVec 64))
(declare-fun r6_after_6 () (_ BitVec 64))
(declare-fun r7_after_6 () (_ BitVec 64))
(declare-fun r8_after_6 () (_ BitVec 64))
(declare-fun r9_after_6 () (_ BitVec 64))
(declare-fun r10_after_6 () (_ BitVec 64))
(declare-fun r11_after_6 () (_ BitVec 64))
(declare-fun r12_after_6 () (_ BitVec 64))
(declare-fun r13_after_6 () (_ BitVec 64))
(declare-fun r14_after_6 () (_ BitVec 64))
(declare-fun r15_after_6 () (_ BitVec 64))
(declare-fun r16_after_6 () (_ BitVec 64))
(declare-fun r17_after_6 () (_ BitVec 64))
(declare-fun r18_after_6 () (_ BitVec 64))
(declare-fun r19_after_6 () (_ BitVec 64))
(declare-fun r20_after_6 () (_ BitVec 64))
(declare-fun r21_after_6 () (_ BitVec 64))
(declare-fun r22_after_6 () (_ BitVec 64))
(declare-fun r23_after_6 () (_ BitVec 64))
(declare-fun r24_after_6 () (_ BitVec 64))
(declare-fun r25_after_6 () (_ BitVec 64))
(declare-fun r26_after_6 () (_ BitVec 64))
(declare-fun r27_after_6 () (_ BitVec 64))
(declare-fun r28_after_6 () (_ BitVec 64))
(declare-fun r29_after_6 () (_ BitVec 64))
(declare-fun r30_after_6 () (_ BitVec 64))
(declare-fun r31_after_6 () (_ BitVec 64))
(declare-fun mode_after_6 () (_ BitVec 64))
(declare-fun n_after_6 () Bool)
(declare-fun z_after_6 () Bool)
(declare-fun c_after_6 () Bool)
(declare-fun v_after_6 () Bool)
(declare-fun mem_after_6 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun dom_after_6 () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun stack_after_6 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun dom_stack_after_6 () (Array (_ BitVec 64) (_ BitVec 1)))
(declare-fun clock_after_6 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_6 () (_ BitVec 64))

;(declare-fun stack_for_6_bot () (Array (_ BitVec 64) (_ BitVec 8)))
;(declare-fun stack_for_6_top () (Array (_ BitVec 64) (_ BitVec 8)))

(define-fun stack_for_6_bot () (Array (_ BitVec 64) (_ BitVec 8)) stack_after_4)
(define-fun stack_for_6_top () (Array (_ BitVec 64) (_ BitVec 8)) stack_after_4)
(define-fun cond_at_5 () Bool (and true (and (word64-eq (bvand (bvadd #x0000000000000008 r2_after_6) #x0000000000000007) #x0000000000000000) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_8_ASM () Bool (and cond_at_5 path_cond_to_4_ASM))
(define-fun query_bvadd_x0000000000000 () (_ BitVec 64) (bvadd #x0000000000000008 r2_after_6))
(define-fun query_load-word64stack_for () (_ BitVec 64) (load-word64 stack_for_6_top (bvadd #x0000000000000008 r2_after_6)))
(define-fun query_load-word64stack_for.1 () (_ BitVec 64) (load-word64 stack_for_6_bot (bvadd #x0000000000000008 r2_after_6)))
(define-fun r1_after_8 () (_ BitVec 64) (ite (bvule r2_after_6 (bvadd #x0000000000000008 r2_after_6)) (load-word64 stack_for_6_top (bvadd #x0000000000000008 r2_after_6)) (load-word64 stack_for_6_bot (bvadd #x0000000000000008 r2_after_6))))
(define-fun r2_after_7 () (_ BitVec 64) (bvadd #x0000000000000010 r2_after_6))
(define-fun cond_at_9 () Bool (and (word64-eq (bvand #xfffffffffffffffe r1_after_8) ret_init) (word64-eq (bvand (bvand #xfffffffffffffffe r1_after_8) #x0000000000000001) #x0000000000000000)))
(define-fun path_cond_to_Err_ASM () Bool (or (or (and (not cond_at_9) path_cond_to_8_ASM) (and (not cond_at_13) path_cond_to_12_ASM)) (or (and (not cond_at_5) path_cond_to_4_ASM) false)))
(define-fun path_cond_to_10_ASM () Bool (and cond_at_9 path_cond_to_8_ASM))
(define-fun path_cond_to_2_C () Bool true)
(declare-fun setIRQState_success_at_2 () Bool)
(declare-fun Mem_after_2 () (Array (_ BitVec 64) (_ BitVec 8)))
(declare-fun GhostAssertions_after_2 () (Array (_ BitVec 50) (_ BitVec 64)))
(define-fun query_mem-eqmem_initMem_in () Bool (mem-eq mem_init Mem_init))
(define-fun query_implies-rodataMem_in () Bool (implies-rodata Mem_init))
(define-fun query_mem-eqmem_after_6Mem () Bool (mem-eq mem_after_6 Mem_after_2))
(define-fun query_rodataMem_after_2 () Bool (rodata Mem_after_2))
(define-fun query_=stack_for_6_topstac () Bool (= stack_for_6_top stack_after_4))
(assert (=> (and (word64-eq r10_after_15 ((_ sign_extend 32) #x00000000)) (and (word64-eq r10_init ((_ zero_extend 32) irq___unsigned_v_init)) (and (mem-eq mem_init Mem_init) (and (implies-rodata Mem_init) (and (word64-eq (bvand r2_after_12 #x000000000000000f) #x0000000000000000) (and (word64-eq ret_init #x0000000084011842) (and (word64-eq r2_after_12 r2_after_12) (and (word64-eq (bvand ret_init #x0000000000000001) #x0000000000000000) (and (bvule #x0000000000000010 r2_after_12) path_cond_to_2_C))))))))) (and (mem-eq mem_after_6 Mem_after_2) (and (rodata Mem_after_2) (and (word64-eq r2_after_12 r2_after_6) (and (word64-eq r8_init r8_after_6) (and (word64-eq r9_init r9_after_6) (and (word64-eq r18_init r18_after_6) (and (word64-eq r19_init r19_after_6) (and (word64-eq r20_init r20_after_6) (and (word64-eq r21_init r21_after_6) (and (word64-eq r22_init r22_after_6) (and (word64-eq r23_init r23_after_6) (and (word64-eq r24_init r24_after_6) (and (word64-eq r25_init r25_after_6) (and (word64-eq r26_init r26_after_6) (and (word64-eq r27_init r27_after_6) (and (and (= r2_after_12 r2_after_6) (=> true (= stack_for_6_top stack_after_4))) (=> setIRQState_success_at_2 setIRQState_success_at_6)))))))))))))))))))
(define-fun query_rodataMem_init () Bool (rodata Mem_init))
(define-fun query_implies-rodataMem_af () Bool (implies-rodata Mem_after_2))
(assert (not (and (not false) (word64-eq r10_init ((_ zero_extend 32) irq___unsigned_v_init)) (mem-eq mem_init Mem_init) (rodata Mem_init) (word64-eq (bvand r2_init #x000000000000000f) #x0000000000000000) (word64-eq ret_init r1_init) (word64-eq r2_init r2_init) (word64-eq (bvand ret_init #x0000000000000001) #x0000000000000000) (bvule #x0000000000000020 r2_init) (not path_cond_to_Err_ASM) true (not (implies-rodata Mem_after_2)))))
(declare-fun stack-eq-witness () (_ BitVec 64))
(assert (= (bvand stack-eq-witness #x0000000000000007) #x0000000000000000))
(assert (bvule r2_init stack-eq-witness))
(define-fun query_stack-eq-witness () (_ BitVec 64) stack-eq-witness)
(define-fun query_load-word64stack_ini.1 () (_ BitVec 64) (load-word64 stack_init stack-eq-witness))
(define-fun query_load-word64stack_for.2 () (_ BitVec 64) (load-word64 stack_for_6_top stack-eq-witness))
(define-fun query_load-word64stack_for.3 () (_ BitVec 64) (load-word64 stack_for_6_bot stack-eq-witness))

(define-fun stack-eq () Bool (word64-eq (load-word64 stack_init stack-eq-witness) (ite (bvule r2_after_6 stack-eq-witness) (load-word64 stack_for_6_top stack-eq-witness) (load-word64 stack_for_6_bot stack-eq-witness))))
;(define-fun stack-eq () Bool (word64-eq (load-word64 stack_after_4 stack-eq-witness) (ite (bvule r2_after_6 stack-eq-witness) (load-word64 stack_for_6_top stack-eq-witness) (load-word64 stack_for_6_bot stack-eq-witness))))
(assert (not (=> (=> false false) (=> (word64-eq r10_init ((_ zero_extend 32) irq___unsigned_v_init)) (=> (mem-eq mem_init Mem_init) (=> (rodata Mem_init) (=> (word64-eq (bvand r2_init #x000000000000000f) #x0000000000000000) (=> (word64-eq ret_init r1_init) (=> (word64-eq r2_init r2_init) (=> (word64-eq (bvand ret_init #x0000000000000001) #x0000000000000000) (=> (bvule #x0000000000000020 r2_init) (=> true (=> path_cond_to_Err_ASM false)))))))))))))
(check-sat)
(get-value (r2_after_12))
(get-value (r2_after_6))