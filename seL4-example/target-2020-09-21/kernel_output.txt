
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Mon Sep 21 16:50:48 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/matthewb/verification/bv/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-MCS-O1/kernel
  Poly/ML: 581
  HOL: Kananaskis 13 (stdknl) commit 2f0afb202
======================================================================
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-MCS-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-MCS-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-MCS-O1/kernel.sigs, done.
No signature info for section: _start
No signature info for section: ki_boot_end
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 292 functions, 16888 RISC-V instructions
  Longest function: decodeRISCVMMUInvocation (756 instructions)
  0 deps: 92 functions (__ctzdi2, __clzdi2, char_to_long, ...)
  1 deps: 82 functions (isHighestPrio, scheduleChooseNewThread, ...)
  2 deps: 48 functions (fastpath_reply_recv, fastpath_call, ...)
  3 deps: 27 functions (c_handle_syscall, slowpath, ...)
  4 deps: 9 functions (invokeUntyped_Retype, decodeSetIPCBuffer, ...)
  5 deps: 9 functions (doNormalTransfer, receiveSignal, suspend, ...)
  6 deps: 6 functions (handleUserLevelFault, ...)
  7 deps: 8 functions (handleVMFaultEvent, handleInvocation, ...)
  9 deps: 3 functions (schedule, receiveIPC, ...)
  11 deps: 1 functions (handleSyscall)
  13 deps: 1 functions (decodeSchedContextInvocation)
  14 deps: 3 functions (decodeInvocation, ...)
  15 deps: 1 functions (decodeCNodeInvocation)
  16 deps: 1 functions (decodeTCBInvocation)
  28 deps: 1 functions (init_kernel)
======================================================================

Section __ctzdi2 (1 of 292)
===========================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 32 instructions.

SLTIU..
SLLI..
RVC_TFF_FF________FT.
RVC_FFF___________TF.
SRL.....
ADDW.....
RVC_TFFTTT___FT___FT..
ANDI..
XORI..
RVC_TFF_TF________FT.
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x8400b936     0x0    seqz a4,a0
    0x8400b93a     0x4    slli a3,a0,0x20
    0x8400b93e     0x8    srli a3,a3,0x20
    0x8400b940     0xa    seqz a3,a3
    0x8400b944     0xe    slli a3,a3,0x5
    0x8400b946    0x10    srl a5,a0,a3
    0x8400b94a    0x14    addw a0,a4,a3
    0x8400b94e    0x18    slli a4,a5,0x30
    0x8400b952    0x1c    srli a4,a4,0x30
    0x8400b954    0x1e    seqz a4,a4
    0x8400b958    0x22    slli a4,a4,0x4
    0x8400b95a    0x24    srl a5,a5,a4
    0x8400b95e    0x28    addw a0,a0,a4
    0x8400b960    0x2a    andi a4,a5,255
    0x8400b964    0x2e    seqz a4,a4
    0x8400b968    0x32    slli a4,a4,0x3
    0x8400b96a    0x34    srl a5,a5,a4
    0x8400b96e    0x38    addw a0,a0,a4
    0x8400b970    0x3a    andi a4,a5,15
    0x8400b974    0x3e    seqz a4,a4
    0x8400b978    0x42    slli a4,a4,0x2
    0x8400b97a    0x44    srl a5,a5,a4
    0x8400b97e    0x48    addw a0,a0,a4
    0x8400b980    0x4a    andi a4,a5,3
    0x8400b984    0x4e    seqz a4,a4
    0x8400b988    0x52    slli a4,a4,0x1
    0x8400b98a    0x54    addw a0,a0,a4
    0x8400b98c    0x56    srl a5,a5,a4
    0x8400b990    0x5a    xori a5,a5,1
    0x8400b994    0x5e    andi a5,a5,1
    0x8400b996    0x60    addw a0,a0,a5
    0x8400b998    0x62    ret

Proving inst theorems
---------------------

32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 33 nodes.

Section __clzdi2 (2 of 292)
===========================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 36 instructions.

RVC_FTF___________FT.
SLTU.....
ADDI..
RVC_TFFTTT___FF___FT..
RVC_FTTFFT___T____FT.

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x8400a66a     0x0    li a4,-1
    0x8400a66c     0x2    srli a4,a4,0x20
    0x8400a66e     0x4    sltu a4,a4,a0
    0x8400a672     0x8    slli a4,a4,0x5
    0x8400a674     0xa    srl a5,a0,a4
    0x8400a678     0xe    li a0,64
    0x8400a67c    0x12    subw a0,a0,a4
    0x8400a67e    0x14    lui a4,0x10
    0x8400a680    0x16    sltu a4,a5,a4
    0x8400a684    0x1a    xori a4,a4,1
    0x8400a688    0x1e    slli a4,a4,0x20
    0x8400a68a    0x20    srli a4,a4,0x20
    0x8400a68c    0x22    slli a4,a4,0x4
    0x8400a68e    0x24    srl a5,a5,a4
    0x8400a692    0x28    subw a0,a0,a4
    0x8400a694    0x2a    li a4,255
    0x8400a698    0x2e    sltu a4,a4,a5
    0x8400a69c    0x32    slli a4,a4,0x3
    0x8400a69e    0x34    srl a5,a5,a4
    0x8400a6a2    0x38    subw a0,a0,a4
    0x8400a6a4    0x3a    li a4,15
    0x8400a6a6    0x3c    sltu a4,a4,a5
    0x8400a6aa    0x40    slli a4,a4,0x2
    0x8400a6ac    0x42    srl a5,a5,a4
    0x8400a6b0    0x46    subw a0,a0,a4
    0x8400a6b2    0x48    li a4,3
    0x8400a6b4    0x4a    sltu a4,a4,a5
    0x8400a6b8    0x4e    slli a4,a4,0x1
    0x8400a6ba    0x50    srl a5,a5,a4
    0x8400a6be    0x54    subw a0,a0,a4
    0x8400a6c0    0x56    sltiu a4,a5,2
    0x8400a6c4    0x5a    xori a4,a4,1
    0x8400a6c8    0x5e    subw a0,a0,a4
    0x8400a6ca    0x60    srl a5,a5,a4
    0x8400a6ce    0x64    subw a0,a0,a5
    0x8400a6d0    0x66    ret

Proving inst theorems
---------------------

36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 37 nodes.

Section char_to_long (3 of 292)
===============================

Deriving specifications
-----------------------

Section `char_to_long` consists of 20 instructions.

ADDIW..
BGEU..
BLTU..

Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x8400a5b6     0x0    addiw a5,a0,-48
    0x8400a5ba     0x4    andi a5,a5,255
    0x8400a5be     0x8    li a4,9
    0x8400a5c0     0xa    bgeu a4,a5,ffffffff8400a5e6 <char_to_long+0x30>
    0x8400a5c4     0xe    addiw a5,a0,-65
    0x8400a5c8    0x12    andi a5,a5,255
    0x8400a5cc    0x16    li a4,5
    0x8400a5ce    0x18    bgeu a4,a5,ffffffff8400a5ec <char_to_long+0x36>
    0x8400a5d2    0x1c    addiw a5,a0,-97
    0x8400a5d6    0x20    andi a5,a5,255
    0x8400a5da    0x24    li a4,5
    0x8400a5dc    0x26    bltu a4,a5,ffffffff8400a5f2 <char_to_long+0x3c>
    0x8400a5e0    0x2a    addiw a0,a0,-87
    0x8400a5e4    0x2e    ret
    0x8400a5e6    0x30    addiw a0,a0,-48
    0x8400a5ea    0x34    ret
    0x8400a5ec    0x36    addiw a0,a0,-55
    0x8400a5f0    0x3a    ret
    0x8400a5f2    0x3c    li a0,-1
    0x8400a5f4    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 30 nodes.

Section strncmp (4 of 292)
==========================

Deriving specifications
-----------------------

Section `strncmp` consists of 14 instructions.

RVC_TTF___________FT.
RVC_TFFFFT___FT___TF..
RVC_TFFTFT___FT___TF..
LBU..
SUBW.....
RVC_TTT___________FT.
RVC_FFFFFT________FT.
BNE..

Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x8400a592     0x0    beqz a2,ffffffff8400a5b2 <strncmp+0x20>
    0x8400a594     0x2    mv a5,a0
    0x8400a596     0x4    add a2,a2,a0
    0x8400a598     0x6    lbu a4,0(a5)
    0x8400a59c     0xa    lbu a0,0(a1)
    0x8400a5a0     0xe    subw a0,a4,a0
    0x8400a5a4    0x12    bnez a0,ffffffff8400a5b4 <strncmp+0x22>
    0x8400a5a6    0x14    beqz a4,ffffffff8400a5b4 <strncmp+0x22>
    0x8400a5a8    0x16    addi a5,a5,1
    0x8400a5aa    0x18    addi a1,a1,1
    0x8400a5ac    0x1a    bne a5,a2,ffffffff8400a598 <strncmp+0x6>
    0x8400a5b0    0x1e    ret
    0x8400a5b2    0x20    li a0,0
    0x8400a5b4    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 26 nodes.

Section memcpy (5 of 292)
=========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x8400a57a     0x0    beqz a2,ffffffff8400a590 <memcpy+0x16>
    0x8400a57c     0x2    add a2,a2,a0
    0x8400a57e     0x4    mv a5,a0
    0x8400a580     0x6    lbu a4,0(a1)
    0x8400a584     0xa    sb a4,0(a5)
    0x8400a588     0xe    addi a5,a5,1
    0x8400a58a    0x10    addi a1,a1,1
    0x8400a58c    0x12    bne a2,a5,ffffffff8400a580 <memcpy+0x6>
    0x8400a590    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memzero (6 of 292)
==========================

Deriving specifications
-----------------------

Section `memzero` consists of 7 instructions.

SD..

Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x840092da     0x0    beqz a1,ffffffff840092ea <memzero+0x10>
    0x840092dc     0x2    mv a5,a0
    0x840092de     0x4    add a1,a1,a0
    0x840092e0     0x6    sd zero,0(a5)
    0x840092e4     0xa    addi a5,a5,8
    0x840092e6     0xc    bne a5,a1,ffffffff840092e0 <memzero+0x6>
    0x840092ea    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 13 nodes.

Section strlcat (7 of 292)
==========================

Deriving specifications
-----------------------

Section `strlcat` consists of 31 instructions.

ADD.....
RVC_TFT___________FT.
SUB.....
RVC_TFFFFT___T____TF.

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x84009280     0x0    mv a3,a0
    0x84009282     0x2    li a0,0
    0x84009284     0x4    beqz a2,ffffffff84009298 <strlcat+0x18>
    0x84009286     0x6    add a5,a3,a0
    0x8400928a     0xa    lbu a5,0(a5)
    0x8400928e     0xe    beqz a5,ffffffff8400929c <strlcat+0x1c>
    0x84009290    0x10    addi a0,a0,1
    0x84009292    0x12    bne a2,a0,ffffffff84009286 <strlcat+0x6>
    0x84009296    0x16    j ffffffff840092d4 <strlcat+0x54>
    0x84009298    0x18    mv a0,a2
    0x8400929a    0x1a    ret
    0x8400929c    0x1c    bgeu a0,a2,ffffffff840092d4 <strlcat+0x54>
    0x840092a0    0x20    addi a5,a0,1
    0x840092a4    0x24    bgeu a5,a2,ffffffff840092ce <strlcat+0x4e>
    0x840092a8    0x28    addi a6,a5,-1
    0x840092ac    0x2c    sub a4,a5,a0
    0x840092b0    0x30    add a4,a4,a1
    0x840092b2    0x32    lbu a4,-1(a4)
    0x840092b6    0x36    beqz a4,ffffffff840092cc <strlcat+0x4c>
    0x840092b8    0x38    add a6,a3,a5
    0x840092bc    0x3c    sb a4,-1(a6)
    0x840092c0    0x40    addi a4,a5,1
    0x840092c4    0x44    bgeu a4,a2,ffffffff840092d6 <strlcat+0x56>
    0x840092c8    0x48    mv a5,a4
    0x840092ca    0x4a    j ffffffff840092a8 <strlcat+0x28>
    0x840092cc    0x4c    mv a0,a6
    0x840092ce    0x4e    add a3,a3,a0
    0x840092d0    0x50    sb zero,0(a3)
    0x840092d4    0x54    ret
    0x840092d6    0x56    mv a0,a5
    0x840092d8    0x58    j ffffffff840092ce <strlcat+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 51 nodes.

Section strlcpy (8 of 292)
==========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 19 instructions.

RVC_FFFT__________FT.

Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x8400924e     0x0    mv a3,a0
    0x84009250     0x2    li a5,1
    0x84009252     0x4    bgeu a5,a2,ffffffff8400927c <strlcpy+0x2e>
    0x84009256     0x8    addi a2,a2,-1
    0x84009258     0xa    li a5,0
    0x8400925a     0xc    mv a0,a5
    0x8400925c     0xe    addi a5,a5,1
    0x8400925e    0x10    add a4,a1,a0
    0x84009262    0x14    lbu a4,0(a4)
    0x84009266    0x18    beqz a4,ffffffff84009274 <strlcpy+0x26>
    0x84009268    0x1a    add a0,a0,a3
    0x8400926a    0x1c    sb a4,0(a0)
    0x8400926e    0x20    bne a5,a2,ffffffff8400925a <strlcpy+0xc>
    0x84009272    0x24    mv a0,a5
    0x84009274    0x26    add a3,a3,a0
    0x84009276    0x28    sb zero,0(a3)
    0x8400927a    0x2c    ret
    0x8400927c    0x2e    li a0,0
    0x8400927e    0x30    j ffffffff84009274 <strlcpy+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 29 nodes.

Section strnlen (9 of 292)
==========================

Deriving specifications
-----------------------

Section `strnlen` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x84009232     0x0    mv a4,a0
    0x84009234     0x2    li a0,0
    0x84009236     0x4    beqz a1,ffffffff8400924a <strnlen+0x18>
    0x84009238     0x6    add a5,a4,a0
    0x8400923c     0xa    lbu a5,0(a5)
    0x84009240     0xe    beqz a5,ffffffff84009248 <strnlen+0x16>
    0x84009242    0x10    addi a0,a0,1
    0x84009244    0x12    bne a1,a0,ffffffff84009238 <strnlen+0x6>
    0x84009248    0x16    ret
    0x8400924a    0x18    mv a0,a1
    0x8400924c    0x1a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 20 nodes.

Section copyMRs (10 of 292)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 46 instructions.

RVC_FTT___________FF..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x840069ec     0x0    mv a5,a0
    0x840069ee     0x2    mv a0,a4
    0x840069f0     0x4    beqz a4,ffffffff84006a4c <copyMRs+0x60>
    0x840069f2     0x6    ld a4,88(a5)
    0x840069f4     0x8    sd a4,88(a2)
    0x840069f6     0xa    li a4,1
    0x840069f8     0xc    bgeu a4,a0,ffffffff84006a40 <copyMRs+0x54>
    0x840069fc    0x10    ld a4,96(a5)
    0x840069fe    0x12    sd a4,96(a2)
    0x84006a00    0x14    li a4,2
    0x84006a02    0x16    bgeu a4,a0,ffffffff84006a44 <copyMRs+0x58>
    0x84006a06    0x1a    ld a4,104(a5)
    0x84006a08    0x1c    sd a4,104(a2)
    0x84006a0a    0x1e    li a4,3
    0x84006a0c    0x20    bgeu a4,a0,ffffffff84006a48 <copyMRs+0x5c>
    0x84006a10    0x24    ld a5,112(a5)
    0x84006a12    0x26    sd a5,112(a2)
    0x84006a14    0x28    li a5,4
    0x84006a16    0x2a    beqz a3,ffffffff84006a50 <copyMRs+0x64>
    0x84006a18    0x2c    beqz a1,ffffffff84006a54 <copyMRs+0x68>
    0x84006a1a    0x2e    bgeu a5,a0,ffffffff84006a58 <copyMRs+0x6c>
    0x84006a1e    0x32    addi a5,a5,1
    0x84006a20    0x34    slli a5,a5,0x3
    0x84006a22    0x36    addi a4,a0,1
    0x84006a26    0x3a    slli a4,a4,0x3
    0x84006a28    0x3c    add a2,a1,a5
    0x84006a2c    0x40    ld a6,0(a2)
    0x84006a30    0x44    add a2,a3,a5
    0x84006a34    0x48    sd a6,0(a2)
    0x84006a38    0x4c    addi a5,a5,8
    0x84006a3a    0x4e    bne a5,a4,ffffffff84006a28 <copyMRs+0x3c>
    0x84006a3e    0x52    ret
    0x84006a40    0x54    li a5,1
    0x84006a42    0x56    j ffffffff84006a16 <copyMRs+0x2a>
    0x84006a44    0x58    li a5,2
    0x84006a46    0x5a    j ffffffff84006a16 <copyMRs+0x2a>
    0x84006a48    0x5c    li a5,3
    0x84006a4a    0x5e    j ffffffff84006a16 <copyMRs+0x2a>
    0x84006a4c    0x60    mv a5,a4
    0x84006a4e    0x62    j ffffffff84006a16 <copyMRs+0x2a>
    0x84006a50    0x64    mv a0,a5
    0x84006a52    0x66    ret
    0x84006a54    0x68    mv a0,a5
    0x84006a56    0x6a    ret
    0x84006a58    0x6c    mv a0,a5
    0x84006a5a    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 76 nodes.

Section setExtraBadge (11 of 292)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x8400694a    0x0    addi a2,a2,122
    0x8400694e    0x4    slli a2,a2,0x3
    0x84006950    0x6    add a0,a0,a2
    0x84006952    0x8    sd a1,0(a0)
    0x84006954    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (12 of 292)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x8400693e    0x0    addi a1,a1,122
    0x84006942    0x4    slli a1,a1,0x3
    0x84006944    0x6    add a0,a0,a1
    0x84006946    0x8    ld a0,0(a0)
    0x84006948    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbReleaseDequeue (13 of 292)
=====================================

Deriving specifications
-----------------------

Section `tcbReleaseDequeue` consists of 18 instructions.

AUIPC.

Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseDequeue`:

    0x8400689e     0x0    auipc a4,0x18
    0x840068a2     0x4    addi a4,a4,1986 # ffffffff8401f060 <ksReleaseHead>
    0x840068a6     0x8    ld a0,0(a4)
    0x840068a8     0xa    ld a5,392(a0)
    0x840068ac     0xe    sd a5,0(a4)
    0x840068ae    0x10    beqz a5,ffffffff840068c2 <tcbReleaseDequeue+0x24>
    0x840068b0    0x12    sd zero,400(a5)
    0x840068b4    0x16    ld a5,392(a0)
    0x840068b8    0x1a    beqz a5,ffffffff840068c2 <tcbReleaseDequeue+0x24>
    0x840068ba    0x1c    sd zero,400(a5)
    0x840068be    0x20    sd zero,392(a0)
    0x840068c2    0x24    ld a5,288(a0)
    0x840068c6    0x28    andi a5,a5,-2
    0x840068c8    0x2a    sd a5,288(a0)
    0x840068cc    0x2e    li a5,1
    0x840068ce    0x30    auipc a4,0x18
    0x840068d2    0x34    sd a5,1898(a4) # ffffffff8401f038 <ksReprogram>
    0x840068d6    0x38    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseDequeue` has 33 nodes.

Section tcbReleaseEnqueue (14 of 292)
=====================================

Deriving specifications
-----------------------

Section `tcbReleaseEnqueue` consists of 42 instructions.

ORI..

Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseEnqueue`:

    0x84005bfe     0x0    auipc a4,0x19
    0x84005c02     0x4    ld a4,1122(a4) # ffffffff8401f060 <ksReleaseHead>
    0x84005c06     0x8    beqz a4,ffffffff84005c4c <tcbReleaseEnqueue+0x4e>
    0x84005c08     0xa    ld a5,368(a0)
    0x84005c0c     0xe    ld a3,72(a5)
    0x84005c0e    0x10    slli a3,a3,0x4
    0x84005c10    0x12    add a5,a5,a3
    0x84005c12    0x14    ld a1,88(a5)
    0x84005c14    0x16    li a2,0
    0x84005c16    0x18    ld a5,368(a4)
    0x84005c1a    0x1c    ld a3,72(a5)
    0x84005c1c    0x1e    slli a3,a3,0x4
    0x84005c1e    0x20    add a5,a5,a3
    0x84005c20    0x22    ld a5,88(a5)
    0x84005c22    0x24    bltu a1,a5,ffffffff84005c32 <tcbReleaseEnqueue+0x34>
    0x84005c26    0x28    ld a5,392(a4)
    0x84005c2a    0x2c    mv a2,a4
    0x84005c2c    0x2e    beqz a5,ffffffff84005c54 <tcbReleaseEnqueue+0x56>
    0x84005c2e    0x30    mv a4,a5
    0x84005c30    0x32    j ffffffff84005c16 <tcbReleaseEnqueue+0x18>
    0x84005c32    0x34    bnez a2,ffffffff84005c50 <tcbReleaseEnqueue+0x52>
    0x84005c34    0x36    auipc a5,0x19
    0x84005c38    0x3a    sd a0,1068(a5) # ffffffff8401f060 <ksReleaseHead>
    0x84005c3c    0x3e    li a5,1
    0x84005c3e    0x40    auipc a3,0x19
    0x84005c42    0x44    sd a5,1018(a3) # ffffffff8401f038 <ksReprogram>
    0x84005c46    0x48    mv a5,a4
    0x84005c48    0x4a    mv a4,a2
    0x84005c4a    0x4c    j ffffffff84005c58 <tcbReleaseEnqueue+0x5a>
    0x84005c4c    0x4e    mv a2,a4
    0x84005c4e    0x50    j ffffffff84005c34 <tcbReleaseEnqueue+0x36>
    0x84005c50    0x52    mv a5,a4
    0x84005c52    0x54    mv a4,a2
    0x84005c54    0x56    sd a0,392(a4)
    0x84005c58    0x5a    beqz a5,ffffffff84005c5e <tcbReleaseEnqueue+0x60>
    0x84005c5a    0x5c    sd a0,400(a5)
    0x84005c5e    0x60    sd a5,392(a0)
    0x84005c62    0x64    sd a4,400(a0)
    0x84005c66    0x68    ld a5,288(a0)
    0x84005c6a    0x6c    ori a5,a5,1
    0x84005c6e    0x70    sd a5,288(a0)
    0x84005c72    0x74    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseEnqueue` has 69 nodes.

Section tcbReleaseRemove (15 of 292)
====================================

Deriving specifications
-----------------------

Section `tcbReleaseRemove` consists of 24 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseRemove`:

    0x84005724     0x0    ld a5,288(a0) # ffffffffe0000120 <ki_end+0x5bfdc120>
    0x84005728     0x4    andi a5,a5,1
    0x8400572a     0x6    beqz a5,ffffffff8400575a <tcbReleaseRemove+0x36>
    0x8400572c     0x8    ld a5,400(a0)
    0x84005730     0xc    beqz a5,ffffffff8400575c <tcbReleaseRemove+0x38>
    0x84005732     0xe    ld a4,392(a0)
    0x84005736    0x12    sd a4,392(a5)
    0x8400573a    0x16    ld a5,392(a0)
    0x8400573e    0x1a    beqz a5,ffffffff84005748 <tcbReleaseRemove+0x24>
    0x84005740    0x1c    ld a4,400(a0)
    0x84005744    0x20    sd a4,400(a5)
    0x84005748    0x24    sd zero,392(a0)
    0x8400574c    0x28    sd zero,400(a0)
    0x84005750    0x2c    ld a5,288(a0)
    0x84005754    0x30    andi a5,a5,-2
    0x84005756    0x32    sd a5,288(a0)
    0x8400575a    0x36    ret
    0x8400575c    0x38    ld a5,392(a0)
    0x84005760    0x3c    auipc a4,0x1a
    0x84005764    0x40    sd a5,-1792(a4) # ffffffff8401f060 <ksReleaseHead>
    0x84005768    0x44    li a5,1
    0x8400576a    0x46    auipc a4,0x1a
    0x8400576e    0x4a    sd a5,-1842(a4) # ffffffff8401f038 <ksReprogram>
    0x84005772    0x4e    j ffffffff8400573a <tcbReleaseRemove+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseRemove` has 45 nodes.

Section tcbEPDequeue (16 of 292)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 19 instructions.

RVC_TTT___________TF..
RVC_FTT_FT________TF.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

2 stack accesses found. Annotated code for `tcbEPDequeue`:

    0x84005280     0x0    addi sp,sp,-32
    0x84005282     0x2    mv a5,a0
    0x84005284     0x4    sd a1,0(sp)           ; stack access
    0x84005286     0x6    mv a1,a2
    0x84005288     0x8    ld a4,416(a0)
    0x8400528c     0xc    beqz a4,ffffffff840052aa <tcbEPDequeue+0x2a>
    0x8400528e     0xe    ld a0,0(sp)           ; stack access
    0x84005290    0x10    ld a3,408(a5)
    0x84005294    0x14    sd a3,408(a4)
    0x84005298    0x18    ld a4,408(a5)
    0x8400529c    0x1c    beqz a4,ffffffff840052b0 <tcbEPDequeue+0x30>
    0x8400529e    0x1e    ld a5,416(a5)
    0x840052a2    0x22    sd a5,416(a4)
    0x840052a6    0x26    addi sp,sp,32
    0x840052a8    0x28    ret
    0x840052aa    0x2a    ld a0,408(a0)
    0x840052ae    0x2e    j ffffffff84005298 <tcbEPDequeue+0x18>
    0x840052b0    0x30    ld a1,416(a5)
    0x840052b4    0x34    j ffffffff840052a6 <tcbEPDequeue+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 34 nodes.

Section tcbSchedDequeue (17 of 292)
===================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 69 instructions.

SRLI..
SLL.....
RVC_TFFFTT___TT___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x84004efa     0x0    ld a5,288(a0)
    0x84004efe     0x4    srli a5,a5,0x1
    0x84004f00     0x6    andi a5,a5,1
    0x84004f02     0x8    beqz a5,ffffffff84004f70 <tcbSchedDequeue+0x76>
    0x84004f04     0xa    ld a1,344(a0)
    0x84004f08     0xe    ld a2,360(a0)
    0x84004f0c    0x12    slli a5,a1,0x8
    0x84004f10    0x16    add a5,a5,a2
    0x84004f12    0x18    slli a3,a5,0x4
    0x84004f16    0x1c    auipc a4,0x9
    0x84004f1a    0x20    addi a4,a4,234 # ffffffff8400e000 <ksReadyQueues>
    0x84004f1e    0x24    add a4,a4,a3
    0x84004f20    0x26    ld a7,8(a4)
    0x84004f24    0x2a    ld a3,400(a0)
    0x84004f28    0x2e    beqz a3,ffffffff84004f72 <tcbSchedDequeue+0x78>
    0x84004f2a    0x30    slli a2,a5,0x4
    0x84004f2e    0x34    auipc a4,0x9
    0x84004f32    0x38    addi a4,a4,210 # ffffffff8400e000 <ksReadyQueues>
    0x84004f36    0x3c    add a4,a4,a2
    0x84004f38    0x3e    ld a6,0(a4)
    0x84004f3c    0x42    ld a4,392(a0)
    0x84004f40    0x46    sd a4,392(a3)
    0x84004f44    0x4a    ld a4,392(a0)
    0x84004f48    0x4e    beqz a4,ffffffff84004fd2 <tcbSchedDequeue+0xd8>
    0x84004f4a    0x50    ld a3,400(a0)
    0x84004f4e    0x54    sd a3,400(a4)
    0x84004f52    0x58    slli a5,a5,0x4
    0x84004f54    0x5a    auipc a4,0x9
    0x84004f58    0x5e    addi a4,a4,172 # ffffffff8400e000 <ksReadyQueues>
    0x84004f5c    0x62    add a5,a5,a4
    0x84004f5e    0x64    sd a6,0(a5)
    0x84004f62    0x68    sd a7,8(a5)
    0x84004f66    0x6c    ld a5,288(a0)
    0x84004f6a    0x70    andi a5,a5,-3
    0x84004f6c    0x72    sd a5,288(a0)
    0x84004f70    0x76    ret
    0x84004f72    0x78    ld a6,392(a0)
    0x84004f76    0x7c    bnez a6,ffffffff84004fce <tcbSchedDequeue+0xd4>
    0x84004f7a    0x80    srli t1,a2,0x6
    0x84004f7e    0x84    li a4,3
    0x84004f80    0x86    sub a3,a4,t1
    0x84004f84    0x8a    li a4,1
    0x84004f86    0x8c    sll a2,a4,a2
    0x84004f8a    0x90    not a2,a2
    0x84004f8e    0x94    slli a4,a1,0x2
    0x84004f92    0x98    add a4,a4,a3
    0x84004f94    0x9a    slli a4,a4,0x3
    0x84004f96    0x9c    auipc a3,0x8
    0x84004f9a    0xa0    addi a3,a3,-1942 # ffffffff8400c800 <riscvKSASIDTable>
    0x84004f9e    0xa4    add a4,a4,a3
    0x84004fa0    0xa6    ld a3,1680(a4)
    0x84004fa4    0xaa    and a2,a2,a3
    0x84004fa6    0xac    sd a2,1680(a4)
    0x84004faa    0xb0    bnez a2,ffffffff84004f44 <tcbSchedDequeue+0x4a>
    0x84004fac    0xb2    slli a1,a1,0x3
    0x84004fae    0xb4    auipc a4,0x8
    0x84004fb2    0xb8    addi a4,a4,-1966 # ffffffff8400c800 <riscvKSASIDTable>
    0x84004fb6    0xbc    add a1,a1,a4
    0x84004fb8    0xbe    li a4,1
    0x84004fba    0xc0    sll a4,a4,t1
    0x84004fbe    0xc4    not a4,a4
    0x84004fc2    0xc8    ld a3,1552(a1)
    0x84004fc6    0xcc    and a4,a4,a3
    0x84004fc8    0xce    sd a4,1552(a1)
    0x84004fcc    0xd2    j ffffffff84004f44 <tcbSchedDequeue+0x4a>
    0x84004fce    0xd4    mv a4,a6
    0x84004fd0    0xd6    j ffffffff84004f4a <tcbSchedDequeue+0x50>
    0x84004fd2    0xd8    ld a7,400(a0)
    0x84004fd6    0xdc    j ffffffff84004f52 <tcbSchedDequeue+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 101 nodes.

Section tcbSchedAppend (18 of 292)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 50 instructions.

RVC_TFFTT____T____TF..
OR.....
RVC_TFFTFT___T____TF.
RVC_TFFFTT___TF___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x84004e60     0x0    ld a5,288(a0)
    0x84004e64     0x4    srli a5,a5,0x1
    0x84004e66     0x6    andi a5,a5,1
    0x84004e68     0x8    bnez a5,ffffffff84004eb4 <tcbSchedAppend+0x54>
    0x84004e6a     0xa    ld a3,344(a0)
    0x84004e6e     0xe    ld a1,360(a0)
    0x84004e72    0x12    slli a5,a3,0x8
    0x84004e76    0x16    add a5,a5,a1
    0x84004e78    0x18    slli a2,a5,0x4
    0x84004e7c    0x1c    auipc a4,0x9
    0x84004e80    0x20    addi a4,a4,388 # ffffffff8400e000 <ksReadyQueues>
    0x84004e84    0x24    add a4,a4,a2
    0x84004e86    0x26    ld a2,0(a4)
    0x84004e88    0x28    ld a4,8(a4)
    0x84004e8a    0x2a    beqz a2,ffffffff84004eb6 <tcbSchedAppend+0x56>
    0x84004e8c    0x2c    sd a0,392(a4)
    0x84004e90    0x30    sd a4,400(a0)
    0x84004e94    0x34    sd zero,392(a0)
    0x84004e98    0x38    slli a5,a5,0x4
    0x84004e9a    0x3a    auipc a4,0x9
    0x84004e9e    0x3e    addi a4,a4,358 # ffffffff8400e000 <ksReadyQueues>
    0x84004ea2    0x42    add a5,a5,a4
    0x84004ea4    0x44    sd a2,0(a5)
    0x84004ea6    0x46    sd a0,8(a5)
    0x84004ea8    0x48    ld a5,288(a0)
    0x84004eac    0x4c    ori a5,a5,2
    0x84004eb0    0x50    sd a5,288(a0)
    0x84004eb4    0x54    ret
    0x84004eb6    0x56    srli t1,a1,0x6
    0x84004eba    0x5a    li t3,3
    0x84004ebc    0x5c    sub t3,t3,t1
    0x84004ec0    0x60    auipc a6,0x8
    0x84004ec4    0x64    addi a6,a6,-1728 # ffffffff8400c800 <riscvKSASIDTable>
    0x84004ec8    0x68    slli a7,a3,0x3
    0x84004ecc    0x6c    add a7,a7,a6
    0x84004ece    0x6e    li a2,1
    0x84004ed0    0x70    sll t1,a2,t1
    0x84004ed4    0x74    ld t4,1552(a7)
    0x84004ed8    0x78    or t1,t4,t1
    0x84004edc    0x7c    sd t1,1552(a7)
    0x84004ee0    0x80    slli a3,a3,0x2
    0x84004ee2    0x82    add a3,a3,t3
    0x84004ee4    0x84    slli a3,a3,0x3
    0x84004ee6    0x86    add a3,a3,a6
    0x84004ee8    0x88    sll a2,a2,a1
    0x84004eec    0x8c    ld a1,1680(a3)
    0x84004ef0    0x90    or a2,a2,a1
    0x84004ef2    0x92    sd a2,1680(a3)
    0x84004ef6    0x96    mv a2,a0
    0x84004ef8    0x98    j ffffffff84004e90 <tcbSchedAppend+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
50 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 71 nodes.

Section tcbSchedEnqueue (19 of 292)
===================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 50 instructions.

RVC_TFFTT____FT___TF.

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x8400491c     0x0    ld a5,288(a0)
    0x84004920     0x4    srli a5,a5,0x1
    0x84004922     0x6    andi a5,a5,1
    0x84004924     0x8    bnez a5,ffffffff84004970 <tcbSchedEnqueue+0x54>
    0x84004926     0xa    ld a3,344(a0)
    0x8400492a     0xe    ld a6,360(a0)
    0x8400492e    0x12    slli a5,a3,0x8
    0x84004932    0x16    add a5,a5,a6
    0x84004934    0x18    slli a2,a5,0x4
    0x84004938    0x1c    auipc a4,0x9
    0x8400493c    0x20    addi a4,a4,1736 # ffffffff8400e000 <ksReadyQueues>
    0x84004940    0x24    add a4,a4,a2
    0x84004942    0x26    ld a1,0(a4)
    0x84004944    0x28    ld a2,8(a4)
    0x84004946    0x2a    beqz a2,ffffffff84004972 <tcbSchedEnqueue+0x56>
    0x84004948    0x2c    sd a0,400(a1) # fffffffff8000190 <ki_end+0x73fdc190>
    0x8400494c    0x30    sd zero,400(a0)
    0x84004950    0x34    sd a1,392(a0)
    0x84004954    0x38    slli a5,a5,0x4
    0x84004956    0x3a    auipc a4,0x9
    0x8400495a    0x3e    addi a4,a4,1706 # ffffffff8400e000 <ksReadyQueues>
    0x8400495e    0x42    add a5,a5,a4
    0x84004960    0x44    sd a0,0(a5)
    0x84004962    0x46    sd a2,8(a5)
    0x84004964    0x48    ld a5,288(a0)
    0x84004968    0x4c    ori a5,a5,2
    0x8400496c    0x50    sd a5,288(a0)
    0x84004970    0x54    ret
    0x84004972    0x56    srli t1,a6,0x6
    0x84004976    0x5a    li t3,3
    0x84004978    0x5c    sub t3,t3,t1
    0x8400497c    0x60    auipc a2,0x8
    0x84004980    0x64    addi a2,a2,-380 # ffffffff8400c800 <riscvKSASIDTable>
    0x84004984    0x68    slli a7,a3,0x3
    0x84004988    0x6c    add a7,a7,a2
    0x8400498a    0x6e    li a4,1
    0x8400498c    0x70    sll t1,a4,t1
    0x84004990    0x74    ld t4,1552(a7)
    0x84004994    0x78    or t1,t4,t1
    0x84004998    0x7c    sd t1,1552(a7)
    0x8400499c    0x80    slli a3,a3,0x2
    0x8400499e    0x82    add a3,a3,t3
    0x840049a0    0x84    slli a3,a3,0x3
    0x840049a2    0x86    add a3,a3,a2
    0x840049a4    0x88    sll a4,a4,a6
    0x840049a8    0x8c    ld a6,1680(a3)
    0x840049ac    0x90    or a4,a4,a6
    0x840049b0    0x94    sd a4,1680(a3)
    0x840049b4    0x98    mv a2,a0
    0x840049b6    0x9a    j ffffffff8400494c <tcbSchedEnqueue+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
50 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 71 nodes.

Section schedContext_cancelYieldTo (20 of 292)
==============================================

Deriving specifications
-----------------------

Section `schedContext_cancelYieldTo` consists of 6 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_cancelYieldTo`:

    0x840048d8     0x0    beqz a0,ffffffff840048e8 <schedContext_cancelYieldTo+0x10>
    0x840048da     0x2    ld a5,376(a0)
    0x840048de     0x6    beqz a5,ffffffff840048e8 <schedContext_cancelYieldTo+0x10>
    0x840048e0     0x8    sd zero,56(a5)
    0x840048e4     0xc    sd zero,376(a0)
    0x840048e8    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_cancelYieldTo` has 14 nodes.

Section schedContext_updateConsumed (21 of 292)
===============================================

Deriving specifications
-----------------------

Section `schedContext_updateConsumed` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_updateConsumed`:

    0x840047c0    0x0    mv a5,a0
    0x840047c2    0x2    ld a0,8(a0)
    0x840047c4    0x4    sd zero,8(a5) # fffffffff8000008 <ki_end+0x73fdc008>
    0x840047c8    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_updateConsumed` has 7 nodes.

Section schedContext_unbindNtfn (22 of 292)
===========================================

Deriving specifications
-----------------------

Section `schedContext_unbindNtfn` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_unbindNtfn`:

    0x840047ac     0x0    beqz a0,ffffffff840047be <schedContext_unbindNtfn+0x12>
    0x840047ae     0x2    ld a4,40(a0)
    0x840047b0     0x4    beqz a4,ffffffff840047be <schedContext_unbindNtfn+0x12>
    0x840047b2     0x6    ld a5,32(a4)
    0x840047b4     0x8    srli a5,a5,0x27
    0x840047b6     0xa    slli a5,a5,0x27
    0x840047b8     0xc    sd a5,32(a4)
    0x840047ba     0xe    sd zero,40(a0) # 1028 <KERNEL_OFFSET-0xfffffffeffffefd8>
    0x840047be    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindNtfn` has 18 nodes.

Section schedContext_bindNtfn (23 of 292)
=========================================

Deriving specifications
-----------------------

Section `schedContext_bindNtfn` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_bindNtfn`:

    0x84004796     0x0    ld a4,32(a1)
    0x84004798     0x2    li a5,-1
    0x8400479a     0x4    slli a3,a5,0x27
    0x8400479e     0x8    and a4,a4,a3
    0x840047a0     0xa    srli a5,a5,0x19
    0x840047a2     0xc    and a5,a5,a0
    0x840047a4     0xe    or a5,a5,a4
    0x840047a6    0x10    sd a5,32(a1)
    0x840047a8    0x12    sd a1,40(a0)
    0x840047aa    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_bindNtfn` has 14 nodes.

Section updateCapData (24 of 292)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 58 instructions.

BEQ..

Stack analysis
---------------

18 stack accesses found. Annotated code for `updateCapData`:

    0x840045f8     0x0    addi sp,sp,-32
    0x840045fa     0x2    srli a5,a2,0x3b
    0x840045fe     0x6    andi a4,a5,1
    0x84004602     0xa    bnez a4,ffffffff8400461c <updateCapData+0x24>
    0x84004604     0xc    li a4,6
    0x84004606     0xe    beq a5,a4,ffffffff84004638 <updateCapData+0x40>
    0x8400460a    0x12    li a4,10
    0x8400460c    0x14    beq a5,a4,ffffffff84004648 <updateCapData+0x50>
    0x84004610    0x18    li a4,4
    0x84004612    0x1a    beq a5,a4,ffffffff84004628 <updateCapData+0x30>
    0x84004616    0x1e    sd a2,16(sp)          ; stack access
    0x84004618    0x20    sd a3,24(sp)          ; stack access
    0x8400461a    0x22    j ffffffff84004620 <updateCapData+0x28>
    0x8400461c    0x24    sd a2,16(sp)          ; stack access
    0x8400461e    0x26    sd a3,24(sp)          ; stack access
    0x84004620    0x28    ld a0,16(sp)          ; stack access
    0x84004622    0x2a    ld a1,24(sp)          ; stack access
    0x84004624    0x2c    addi sp,sp,32
    0x84004626    0x2e    ret
    0x84004628    0x30    or a3,a3,a0
    0x8400462a    0x32    bnez a3,ffffffff84004632 <updateCapData+0x3a>
    0x8400462c    0x34    sd a2,16(sp)          ; stack access
    0x8400462e    0x36    sd a1,24(sp)          ; stack access
    0x84004630    0x38    j ffffffff84004620 <updateCapData+0x28>
    0x84004632    0x3a    sd zero,16(sp)        ; stack access
    0x84004634    0x3c    sd zero,24(sp)        ; stack access
    0x84004636    0x3e    j ffffffff84004620 <updateCapData+0x28>
    0x84004638    0x40    or a3,a3,a0
    0x8400463a    0x42    bnez a3,ffffffff84004642 <updateCapData+0x4a>
    0x8400463c    0x44    sd a2,16(sp)          ; stack access
    0x8400463e    0x46    sd a1,24(sp)          ; stack access
    0x84004640    0x48    j ffffffff84004620 <updateCapData+0x28>
    0x84004642    0x4a    sd zero,16(sp)        ; stack access
    0x84004644    0x4c    sd zero,24(sp)        ; stack access
    0x84004646    0x4e    j ffffffff84004620 <updateCapData+0x28>
    0x84004648    0x50    andi a4,a1,63
    0x8400464c    0x54    srli a5,a2,0x2f
    0x84004650    0x58    andi a5,a5,63
    0x84004654    0x5c    add a5,a5,a4
    0x84004656    0x5e    li a3,64
    0x8400465a    0x62    bgeu a3,a5,ffffffff84004664 <updateCapData+0x6c>
    0x8400465e    0x66    sd zero,16(sp)        ; stack access
    0x84004660    0x68    sd zero,24(sp)        ; stack access
    0x84004662    0x6a    j ffffffff84004620 <updateCapData+0x28>
    0x84004664    0x6c    li a5,-63
    0x84004668    0x70    slli a5,a5,0x35
    0x8400466a    0x72    addi a5,a5,-1
    0x8400466c    0x74    and a2,a2,a5
    0x8400466e    0x76    slli a5,a4,0x35
    0x84004672    0x7a    or a2,a2,a5
    0x84004674    0x7c    sd a2,16(sp)          ; stack access
    0x84004676    0x7e    li a5,-1
    0x84004678    0x80    sll a5,a5,a4
    0x8400467c    0x84    not a5,a5
    0x84004680    0x88    srli a1,a1,0x6
    0x84004682    0x8a    and a1,a1,a5
    0x84004684    0x8c    sd a1,24(sp)          ; stack access
    0x84004686    0x8e    j ffffffff84004620 <updateCapData+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 91 nodes.

Section hasCancelSendRights (25 of 292)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 20 instructions.

RVC_FFFFFFFT______FT.
AND.....
RVC_TFFFTT___FF___FT..

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x84004034     0x0    addi sp,sp,-16
    0x84004036     0x2    srli a4,a0,0x3b
    0x8400403a     0x6    li a5,4
    0x8400403c     0x8    beq a4,a5,ffffffff84004046 <hasCancelSendRights+0x12>
    0x84004040     0xc    li a0,0
    0x84004042     0xe    addi sp,sp,16
    0x84004044    0x10    ret
    0x84004046    0x12    li a4,3
    0x84004048    0x14    slli a4,a4,0x37
    0x8400404a    0x16    and a3,a0,a4
    0x8400404e    0x1a    li a5,0
    0x84004050    0x1c    beq a3,a4,ffffffff84004058 <hasCancelSendRights+0x24>
    0x84004054    0x20    mv a0,a5
    0x84004056    0x22    j ffffffff84004042 <hasCancelSendRights+0xe>
    0x84004058    0x24    li a5,3
    0x8400405a    0x26    slli a5,a5,0x39
    0x8400405c    0x28    and a0,a0,a5
    0x8400405e    0x2a    sub a0,a0,a5
    0x84004060    0x2c    seqz a5,a0
    0x84004064    0x30    j ffffffff84004054 <hasCancelSendRights+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 25 nodes.

Section bindNotification (26 of 292)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84003fcc     0x0    ld a4,24(a1)
    0x84003fce     0x2    li a5,-1
    0x84003fd0     0x4    slli a3,a5,0x27
    0x84003fd4     0x8    and a4,a4,a3
    0x84003fd6     0xa    srli a5,a5,0x19
    0x84003fd8     0xc    and a5,a5,a0
    0x84003fda     0xe    or a5,a5,a4
    0x84003fdc    0x10    sd a5,24(a1)
    0x84003fde    0x12    sd a1,304(a0)
    0x84003fe2    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (27 of 292)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x84003fb8     0x0    ld a4,304(a0)
    0x84003fbc     0x4    beqz a4,ffffffff84003fca <unbindNotification+0x12>
    0x84003fbe     0x6    ld a5,24(a4)
    0x84003fc0     0x8    srli a5,a5,0x27
    0x84003fc2     0xa    slli a5,a5,0x27
    0x84003fc4     0xc    sd a5,24(a4)
    0x84003fc6     0xe    sd zero,304(a0)
    0x84003fca    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (28 of 292)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 16 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x84003f92     0x0    ld a4,24(a0)
    0x84003f94     0x2    slli a5,a4,0x19
    0x84003f98     0x6    srli a5,a5,0x19
    0x84003f9a     0x8    srli a3,a4,0x26
    0x84003f9e     0xc    andi a3,a3,1
    0x84003fa0     0xe    beqz a3,ffffffff84003fb4 <unbindMaybeNotification+0x22>
    0x84003fa2    0x10    li a3,-1
    0x84003fa4    0x12    slli a3,a3,0x27
    0x84003fa6    0x14    or a5,a5,a3
    0x84003fa8    0x16    srli a4,a4,0x27
    0x84003faa    0x18    slli a4,a4,0x27
    0x84003fac    0x1a    sd a4,24(a0)
    0x84003fae    0x1c    sd zero,304(a5) # fffffffff8000130 <ki_end+0x73fdc130>
    0x84003fb2    0x20    ret
    0x84003fb4    0x22    beqz a5,ffffffff84003fb2 <unbindMaybeNotification+0x20>
    0x84003fb6    0x24    j ffffffff84003fa8 <unbindMaybeNotification+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 24 nodes.

Section setIRQState (29 of 292)
===============================

Deriving specifications
-----------------------

Section `setIRQState` consists of 35 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5

LUI.
RVC_FTF___________FF..
RVC_FFT___________FT.
RVC_TTF___________FF..

Stack analysis
---------------

No stack accesses found. Code for `setIRQState`:

    0x84003e60     0x0    slli a4,a1,0x3
    0x84003e64     0x4    auipc a5,0x9
    0x84003e68     0x8    addi a5,a5,-1636 # ffffffff8400c800 <riscvKSASIDTable>
    0x84003e6c     0xc    add a5,a5,a4
    0x84003e6e     0xe    sd a0,1112(a5)
    0x84003e72    0x12    li a5,54
    0x84003e76    0x16    bne a1,a5,ffffffff84003e90 <setIRQState+0x30>
    0x84003e7a    0x1a    bnez a0,ffffffff84003e86 <setIRQState+0x26>
    0x84003e7c    0x1c    li a5,32
    0x84003e80    0x20    csrrc a5,sie,a5
    0x84003e84    0x24    ret
    0x84003e86    0x26    li a5,32
    0x84003e8a    0x2a    csrrs a5,sie,a5
    0x84003e8e    0x2e    ret
    0x84003e90    0x30    andi a3,a1,31
    0x84003e94    0x34    srli a1,a1,0x5
    0x84003e96    0x36    slli a1,a1,0x2
    0x84003e98    0x38    lui a4,0xcc002
    0x84003e9c    0x3c    addi a4,a4,256 # ffffffffcc002100 <ki_end+0x47fde100>
    0x84003ea0    0x40    add a1,a1,a4
    0x84003ea2    0x42    lw a5,0(a1)
    0x84003ea4    0x44    sext.w a4,a5
    0x84003ea8    0x48    bnez a0,ffffffff84003ebc <setIRQState+0x5c>
    0x84003eaa    0x4a    li a5,1
    0x84003eac    0x4c    sll a5,a5,a3
    0x84003eb0    0x50    not a5,a5
    0x84003eb4    0x54    and a5,a5,a4
    0x84003eb6    0x56    sext.w a5,a5
    0x84003eb8    0x58    sw a5,0(a1)
    0x84003eba    0x5a    ret
    0x84003ebc    0x5c    li a5,1
    0x84003ebe    0x5e    sll a5,a5,a3
    0x84003ec2    0x62    or a5,a5,a4
    0x84003ec4    0x64    sext.w a5,a5
    0x84003ec6    0x66    j ffffffff84003eb8 <setIRQState+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 49 nodes.

Section isIRQActive (30 of 292)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 7 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x84003e48     0x0    slli a5,a0,0x3
    0x84003e4c     0x4    auipc a0,0x9
    0x84003e50     0x8    addi a0,a0,-1612 # ffffffff8400c800 <riscvKSASIDTable>
    0x84003e54     0xc    add a0,a0,a5
    0x84003e56     0xe    ld a0,1112(a0)
    0x84003e5a    0x12    snez a0,a0
    0x84003e5e    0x16    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 9 nodes.

Section invokeIRQHandler_AckIRQ (31 of 292)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x84003e3e    0x0    sext.w a0,a0
    0x84003e40    0x2    lui a5,0xcc202
    0x84003e44    0x6    sw a0,4(a5)
    0x84003e46    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 6 nodes.

Section replyFromKernel_success_empty (32 of 292)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x84003e34    0x0    sd zero,72(a0)
    0x84003e38    0x4    sd zero,80(a0)
    0x84003e3c    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (33 of 292)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x84003e20     0x0    ld a3,1008(a1)
    0x84003e24     0x4    ld a4,1016(a1)
    0x84003e28     0x8    ld a2,1000(a1)
    0x84003e2c     0xc    sd a2,0(a0)           ; stack access
    0x84003e2e     0xe    sd a3,8(a0)           ; stack access
    0x84003e30    0x10    sd a4,16(a0)          ; stack access
    0x84003e32    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (34 of 292)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x84003dae     0x0    ld a0,0(a0)
    0x84003db0     0x2    srli a0,a0,0x3b
    0x84003db2     0x4    bnez a0,ffffffff84003db6 <ensureEmptySlot+0x8>
    0x84003db4     0x6    ret
    0x84003db6     0x8    li a5,8
    0x84003db8     0xa    auipc a4,0x9
    0x84003dbc     0xe    sd a5,-376(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84003dc0    0x12    li a0,3
    0x84003dc2    0x14    j ffffffff84003db4 <ensureEmptySlot+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 14 nodes.

Section insertNewCap (35 of 292)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 42 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `insertNewCap`:

    0x84003d52     0x0    addi sp,sp,-16
    0x84003d54     0x2    sd a2,0(sp)           ; stack access
    0x84003d56     0x4    sd a3,8(sp)           ; stack access
    0x84003d58     0x6    ld a4,24(a0)
    0x84003d5a     0x8    lui a5,0xf8000
    0x84003d5e     0xc    srli a5,a5,0x19
    0x84003d60     0xe    and a5,a5,a4
    0x84003d62    0x10    srli a4,a4,0x26
    0x84003d64    0x12    andi a4,a4,1
    0x84003d66    0x14    beqz a4,ffffffff84003d98 <insertNewCap+0x46>
    0x84003d68    0x16    li a4,-1
    0x84003d6a    0x18    slli a4,a4,0x27
    0x84003d6c    0x1a    or a4,a4,a5
    0x84003d6e    0x1c    sd a2,0(a1)
    0x84003d70    0x1e    ld a3,8(sp)           ; stack access
    0x84003d72    0x20    sd a3,8(a1)
    0x84003d74    0x22    sd a0,16(a1)
    0x84003d76    0x24    ori a5,a5,3
    0x84003d7a    0x28    sd a5,24(a1)
    0x84003d7c    0x2a    sd a1,16(a4)
    0x84003d7e    0x2c    ld a5,24(a0)
    0x84003d80    0x2e    li a4,-1
    0x84003d82    0x30    slli a4,a4,0x27
    0x84003d84    0x32    addi a4,a4,3
    0x84003d86    0x34    and a5,a5,a4
    0x84003d88    0x36    lui a4,0xf8000
    0x84003d8c    0x3a    srli a4,a4,0x19
    0x84003d8e    0x3c    and a1,a1,a4
    0x84003d90    0x3e    or a1,a1,a5
    0x84003d92    0x40    sd a1,24(a0)
    0x84003d94    0x42    addi sp,sp,16
    0x84003d96    0x44    ret
    0x84003d98    0x46    ld a4,0(sp)           ; stack access
    0x84003d9a    0x48    sd a4,0(a1)
    0x84003d9c    0x4a    ld a4,8(sp)           ; stack access
    0x84003d9e    0x4c    sd a4,8(a1)
    0x84003da0    0x4e    sd a0,16(a1)
    0x84003da2    0x50    ori a4,a5,3
    0x84003da6    0x54    sd a4,24(a1)
    0x84003da8    0x56    beqz a5,ffffffff84003d7e <insertNewCap+0x2c>
    0x84003daa    0x58    mv a4,a5
    0x84003dac    0x5a    j ffffffff84003d7c <insertNewCap+0x2a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 64 nodes.

Section cteSwap (36 of 292)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 65 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x84003c5e     0x0    addi sp,sp,-32
    0x84003c60     0x2    sd a0,16(sp)          ; stack access
    0x84003c62     0x4    sd a1,24(sp)          ; stack access
    0x84003c64     0x6    sd a3,0(sp)           ; stack access
    0x84003c66     0x8    sd a4,8(sp)           ; stack access
    0x84003c68     0xa    sd a3,0(a2)
    0x84003c6a     0xc    sd a4,8(a2)
    0x84003c6c     0xe    sd a0,0(a5)
    0x84003c6e    0x10    sd a1,8(a5)
    0x84003c70    0x12    ld a0,16(a2)
    0x84003c72    0x14    ld a1,24(a2)
    0x84003c74    0x16    beqz a0,ffffffff84003c8c <cteSwap+0x2e>
    0x84003c76    0x18    ld a4,24(a0)
    0x84003c78    0x1a    li a3,-1
    0x84003c7a    0x1c    slli a3,a3,0x27
    0x84003c7c    0x1e    addi a3,a3,3
    0x84003c7e    0x20    and a4,a4,a3
    0x84003c80    0x22    lui a3,0xf8000
    0x84003c84    0x26    srli a3,a3,0x19
    0x84003c86    0x28    and a3,a3,a5
    0x84003c88    0x2a    or a4,a4,a3
    0x84003c8a    0x2c    sd a4,24(a0)
    0x84003c8c    0x2e    lui a4,0xf8000
    0x84003c90    0x32    srli a4,a4,0x19
    0x84003c92    0x34    and a4,a4,a1
    0x84003c94    0x36    srli a3,a1,0x26
    0x84003c98    0x3a    andi a3,a3,1
    0x84003c9a    0x3c    beqz a3,ffffffff84003ce2 <cteSwap+0x84>
    0x84003c9c    0x3e    li a3,-1
    0x84003c9e    0x40    slli a3,a3,0x27
    0x84003ca0    0x42    or a4,a4,a3
    0x84003ca2    0x44    sd a5,16(a4)
    0x84003ca4    0x46    ld a3,16(a5)
    0x84003ca6    0x48    ld a4,24(a5)
    0x84003ca8    0x4a    sd a3,16(a2)
    0x84003caa    0x4c    sd a4,24(a2)
    0x84003cac    0x4e    sd a0,16(a5)
    0x84003cae    0x50    sd a1,24(a5)
    0x84003cb0    0x52    beqz a3,ffffffff84003cc8 <cteSwap+0x6a>
    0x84003cb2    0x54    ld a5,24(a3)
    0x84003cb4    0x56    li a1,-1
    0x84003cb6    0x58    slli a1,a1,0x27
    0x84003cb8    0x5a    addi a1,a1,3
    0x84003cba    0x5c    and a5,a5,a1
    0x84003cbc    0x5e    lui a1,0xf8000
    0x84003cc0    0x62    srli a1,a1,0x19
    0x84003cc2    0x64    and a1,a1,a2
    0x84003cc4    0x66    or a5,a5,a1
    0x84003cc6    0x68    sd a5,24(a3)
    0x84003cc8    0x6a    lui a5,0xf8000
    0x84003ccc    0x6e    srli a5,a5,0x19
    0x84003cce    0x70    and a5,a5,a4
    0x84003cd0    0x72    srli a4,a4,0x26
    0x84003cd2    0x74    andi a4,a4,1
    0x84003cd4    0x76    beqz a4,ffffffff84003ce6 <cteSwap+0x88>
    0x84003cd6    0x78    li a4,-1
    0x84003cd8    0x7a    slli a4,a4,0x27
    0x84003cda    0x7c    or a5,a5,a4
    0x84003cdc    0x7e    sd a2,16(a5)
    0x84003cde    0x80    addi sp,sp,32
    0x84003ce0    0x82    ret
    0x84003ce2    0x84    beqz a4,ffffffff84003ca4 <cteSwap+0x46>
    0x84003ce4    0x86    j ffffffff84003ca2 <cteSwap+0x44>
    0x84003ce6    0x88    beqz a5,ffffffff84003cde <cteSwap+0x80>
    0x84003ce8    0x8a    j ffffffff84003cdc <cteSwap+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 100 nodes.

Section cteMove (37 of 292)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 38 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x84003bf6     0x0    addi sp,sp,-16
    0x84003bf8     0x2    sd a0,0(sp)           ; stack access
    0x84003bfa     0x4    sd a1,8(sp)           ; stack access
    0x84003bfc     0x6    ld a4,16(a2)
    0x84003bfe     0x8    ld a5,24(a2)
    0x84003c00     0xa    sd a0,0(a3)
    0x84003c02     0xc    sd a1,8(a3)
    0x84003c04     0xe    sd zero,0(a2)
    0x84003c08    0x12    sd zero,8(a2)
    0x84003c0c    0x16    sd a4,16(a3)
    0x84003c0e    0x18    sd a5,24(a3)
    0x84003c10    0x1a    sd zero,16(a2)
    0x84003c14    0x1e    sd zero,24(a2)
    0x84003c18    0x22    beqz a4,ffffffff84003c30 <cteMove+0x3a>
    0x84003c1a    0x24    ld a2,24(a4)
    0x84003c1c    0x26    li a1,-1
    0x84003c1e    0x28    slli a1,a1,0x27
    0x84003c20    0x2a    addi a1,a1,3
    0x84003c22    0x2c    and a2,a2,a1
    0x84003c24    0x2e    lui a1,0xf8000
    0x84003c28    0x32    srli a1,a1,0x19
    0x84003c2a    0x34    and a1,a1,a3
    0x84003c2c    0x36    or a2,a2,a1
    0x84003c2e    0x38    sd a2,24(a4)
    0x84003c30    0x3a    lui a4,0xf8000
    0x84003c34    0x3e    srli a4,a4,0x19
    0x84003c36    0x40    and a4,a4,a5
    0x84003c38    0x42    srli a5,a5,0x26
    0x84003c3a    0x44    andi a5,a5,1
    0x84003c3c    0x46    beqz a5,ffffffff84003c4a <cteMove+0x54>
    0x84003c3e    0x48    li a5,-1
    0x84003c40    0x4a    slli a5,a5,0x27
    0x84003c42    0x4c    or a4,a4,a5
    0x84003c44    0x4e    sd a3,16(a4)
    0x84003c46    0x50    addi sp,sp,16
    0x84003c48    0x52    ret
    0x84003c4a    0x54    beqz a4,ffffffff84003c46 <cteMove+0x50>
    0x84003c4c    0x56    j ffffffff84003c44 <cteMove+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 60 nodes.

Section cteInsert (38 of 292)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 108 instructions.

RVC_TFFFFFT__FT___TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x84003aba      0x0    addi sp,sp,-16
    0x84003abc      0x2    sd a0,0(sp)           ; stack access
    0x84003abe      0x4    sd a1,8(sp)           ; stack access
    0x84003ac0      0x6    ld a5,24(a2)
    0x84003ac2      0x8    ld a7,0(a2)
    0x84003ac6      0xc    ld t3,8(a2)
    0x84003aca     0x10    srli a4,a0,0x3b
    0x84003ace     0x14    andi a6,a4,1
    0x84003ad2     0x18    bnez a6,ffffffff84003b58 <cteInsert+0x9e>
    0x84003ad6     0x1c    li t1,6
    0x84003ad8     0x1e    beq a4,t1,ffffffff84003b4e <cteInsert+0x94>
    0x84003adc     0x22    bltu t1,a4,ffffffff84003b3c <cteInsert+0x82>
    0x84003ae0     0x26    li t1,2
    0x84003ae2     0x28    beq a4,t1,ffffffff84003b80 <cteInsert+0xc6>
    0x84003ae6     0x2c    li a0,4
    0x84003ae8     0x2e    bne a4,a0,ffffffff84003af4 <cteInsert+0x3a>
    0x84003aec     0x32    sub a6,t3,a1
    0x84003af0     0x36    snez a6,a6
    0x84003af4     0x3a    mv t1,a2
    0x84003af6     0x3c    slli a4,a6,0x1
    0x84003afa     0x40    andi a5,a5,-4
    0x84003afc     0x42    or a5,a5,a4
    0x84003afe     0x44    or a5,a5,a6
    0x84003b02     0x48    ld a4,0(sp)           ; stack access
    0x84003b04     0x4a    sd a4,0(a3)
    0x84003b06     0x4c    ld a4,8(sp)           ; stack access
    0x84003b08     0x4e    sd a4,8(a3)
    0x84003b0a     0x50    sd t1,16(a3)
    0x84003b0e     0x54    sd a5,24(a3)
    0x84003b10     0x56    ld a1,24(a2)
    0x84003b12     0x58    li a4,-1
    0x84003b14     0x5a    slli a4,a4,0x27
    0x84003b16     0x5c    addi a4,a4,3
    0x84003b18     0x5e    and a1,a1,a4
    0x84003b1a     0x60    lui a4,0xf8000
    0x84003b1e     0x64    srli a4,a4,0x19
    0x84003b20     0x66    and a0,a3,a4
    0x84003b24     0x6a    or a1,a1,a0
    0x84003b26     0x6c    sd a1,24(a2)
    0x84003b28     0x6e    and a4,a4,a5
    0x84003b2a     0x70    srli a5,a5,0x26
    0x84003b2c     0x72    andi a5,a5,1
    0x84003b2e     0x74    beqz a5,ffffffff84003b7c <cteInsert+0xc2>
    0x84003b30     0x76    li a5,-1
    0x84003b32     0x78    slli a5,a5,0x27
    0x84003b34     0x7a    or a4,a4,a5
    0x84003b36     0x7c    sd a3,16(a4)
    0x84003b38     0x7e    addi sp,sp,16
    0x84003b3a     0x80    ret
    0x84003b3c     0x82    li a1,16
    0x84003b3e     0x84    bne a4,a1,ffffffff84003af4 <cteInsert+0x3a>
    0x84003b42     0x88    srli a6,a7,0x3b
    0x84003b46     0x8c    addi a6,a6,-14
    0x84003b48     0x8e    seqz a6,a6
    0x84003b4c     0x92    j ffffffff84003af4 <cteInsert+0x3a>
    0x84003b4e     0x94    sub a6,t3,a1
    0x84003b52     0x98    snez a6,a6
    0x84003b56     0x9c    j ffffffff84003af4 <cteInsert+0x3a>
    0x84003b58     0x9e    mv t1,a2
    0x84003b5a     0xa0    andi a5,a5,-4
    0x84003b5c     0xa2    srli a6,a7,0x3b
    0x84003b60     0xa6    li t4,2
    0x84003b62     0xa8    bne a6,t4,ffffffff84003b02 <cteInsert+0x48>
    0x84003b66     0xac    li a6,2
    0x84003b68     0xae    beq a4,a6,ffffffff84003b90 <cteInsert+0xd6>
    0x84003b6c     0xb2    j ffffffff84003b02 <cteInsert+0x48>
    0x84003b6e     0xb4    slli a4,a0,0x19
    0x84003b72     0xb8    srli a4,a4,0x19
    0x84003b74     0xba    srli a0,a0,0x26
    0x84003b76     0xbc    andi a0,a0,1
    0x84003b78     0xbe    bnez a0,ffffffff84003bb8 <cteInsert+0xfe>
    0x84003b7a     0xc0    j ffffffff84003bbe <cteInsert+0x104>
    0x84003b7c     0xc2    beqz a4,ffffffff84003b38 <cteInsert+0x7e>
    0x84003b7e     0xc4    j ffffffff84003b36 <cteInsert+0x7c>
    0x84003b80     0xc6    mv t1,a2
    0x84003b82     0xc8    ori a5,a5,3
    0x84003b86     0xcc    srli a4,a7,0x3b
    0x84003b8a     0xd0    li a6,2
    0x84003b8c     0xd2    bne a4,a6,ffffffff84003b02 <cteInsert+0x48>
    0x84003b90     0xd6    slli t4,a7,0x19
    0x84003b94     0xda    srli t4,t4,0x19
    0x84003b98     0xde    srli a6,a7,0x26
    0x84003b9c     0xe2    andi a6,a6,1
    0x84003ba0     0xe6    beqz a6,ffffffff84003b6e <cteInsert+0xb4>
    0x84003ba4     0xea    li a4,-1
    0x84003ba6     0xec    slli a6,a4,0x27
    0x84003baa     0xf0    or t4,t4,a6
    0x84003bae     0xf4    srli a4,a4,0x19
    0x84003bb0     0xf6    and a4,a4,a0
    0x84003bb2     0xf8    srli a0,a0,0x26
    0x84003bb4     0xfa    andi a0,a0,1
    0x84003bb6     0xfc    beqz a0,ffffffff84003b02 <cteInsert+0x48>
    0x84003bb8     0xfe    li a0,-1
    0x84003bba    0x100    slli a0,a0,0x27
    0x84003bbc    0x102    or a4,a4,a0
    0x84003bbe    0x104    bne a4,t4,ffffffff84003b02 <cteInsert+0x48>
    0x84003bc2    0x108    andi t3,t3,63
    0x84003bc6    0x10c    andi a6,a1,63
    0x84003bca    0x110    bne a6,t3,ffffffff84003b02 <cteInsert+0x48>
    0x84003bce    0x114    addiw t3,t3,-4
    0x84003bd0    0x116    lui a4,0x2000
    0x84003bd4    0x11a    sll t3,a4,t3
    0x84003bd8    0x11e    ld a4,8(a2)
    0x84003bda    0x120    slli a4,a4,0x27
    0x84003bdc    0x122    srli a4,a4,0x27
    0x84003bde    0x124    or a4,t3,a4
    0x84003be2    0x128    sd a4,8(a2)
    0x84003be4    0x12a    j ffffffff84003b02 <cteInsert+0x48>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
108 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 157 nodes.

Section setNextInterrupt (39 of 292)
====================================

Deriving specifications
-----------------------

Section `setNextInterrupt` consists of 31 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `setNextInterrupt`:

    0x84003a62     0x0    auipc a5,0x1b
    0x84003a66     0x4    ld a5,1526(a5) # ffffffff8401f058 <ksCurThread>
    0x84003a6a     0x8    ld a5,368(a5)
    0x84003a6e     0xc    auipc a0,0x1b
    0x84003a72    0x10    ld a0,1474(a0) # ffffffff8401f030 <ksCurTime>
    0x84003a76    0x14    ld a4,72(a5)
    0x84003a78    0x16    slli a4,a4,0x4
    0x84003a7a    0x18    add a5,a5,a4
    0x84003a7c    0x1a    ld a5,96(a5)
    0x84003a7e    0x1c    add a5,a5,a0
    0x84003a80    0x1e    auipc a4,0x1b
    0x84003a84    0x22    ld a4,1424(a4) # ffffffff8401f010 <ksDomainTime>
    0x84003a88    0x26    add a0,a0,a4
    0x84003a8a    0x28    bgeu a5,a0,ffffffff84003a90 <setNextInterrupt+0x2e>
    0x84003a8e    0x2c    mv a0,a5
    0x84003a90    0x2e    auipc a5,0x1b
    0x84003a94    0x32    ld a5,1488(a5) # ffffffff8401f060 <ksReleaseHead>
    0x84003a98    0x36    beqz a5,ffffffff84003aac <setNextInterrupt+0x4a>
    0x84003a9a    0x38    ld a5,368(a5)
    0x84003a9e    0x3c    ld a4,72(a5)
    0x84003aa0    0x3e    slli a4,a4,0x4
    0x84003aa2    0x40    add a5,a5,a4
    0x84003aa4    0x42    ld a5,88(a5)
    0x84003aa6    0x44    bgeu a5,a0,ffffffff84003aac <setNextInterrupt+0x4a>
    0x84003aaa    0x48    mv a0,a5
    0x84003aac    0x4a    addi a0,a0,-1
    0x84003aae    0x4c    li a1,0
    0x84003ab0    0x4e    li a2,0
    0x84003ab2    0x50    li a7,0
    0x84003ab4    0x52    ecall
    0x84003ab8    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextInterrupt` has 49 nodes.

Section setMCPriority (40 of 292)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x84003a5c    0x0    sd a1,352(a0)
    0x84003a60    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (41 of 292)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x84003a38    0x0    sd zero,72(a0)
    0x84003a3c    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section refill_unblock_check (42 of 292)
========================================

Deriving specifications
-----------------------

Section `refill_unblock_check` consists of 45 instructions.

RVC_TFFFFT___FFT__TF.

Stack analysis
---------------

No stack accesses found. Code for `refill_unblock_check`:

    0x840039bc     0x0    ld a5,0(a0)
    0x840039be     0x2    beqz a5,ffffffff84003a36 <refill_unblock_check+0x7a>
    0x840039c0     0x4    addi a2,a0,88
    0x840039c4     0x8    ld a5,72(a0)
    0x840039c6     0xa    slli a5,a5,0x4
    0x840039c8     0xc    add a5,a5,a2
    0x840039ca     0xe    auipc a4,0x1b
    0x840039ce    0x12    ld a4,1638(a4) # ffffffff8401f030 <ksCurTime>
    0x840039d2    0x16    addi a3,a4,10
    0x840039d6    0x1a    ld a1,0(a5)
    0x840039d8    0x1c    bltu a3,a1,ffffffff84003a36 <refill_unblock_check+0x7a>
    0x840039dc    0x20    sd a4,0(a5)
    0x840039de    0x22    li a5,1
    0x840039e0    0x24    auipc a4,0x1b
    0x840039e4    0x28    sd a5,1624(a4) # ffffffff8401f038 <ksReprogram>
    0x840039e8    0x2c    li t1,0
    0x840039ea    0x2e    auipc t3,0x1b
    0x840039ee    0x32    addi t3,t3,1606 # ffffffff8401f030 <ksCurTime>
    0x840039f2    0x36    j ffffffff84003a04 <refill_unblock_check+0x48>
    0x840039f4    0x38    sd a3,72(a0)
    0x840039f6    0x3a    ld a4,8(a5)
    0x840039f8    0x3c    add a4,a4,a6
    0x840039fa    0x3e    sd a4,8(a5)
    0x840039fc    0x40    ld a5,72(a0)
    0x840039fe    0x42    slli a5,a5,0x4
    0x84003a00    0x44    add a5,a5,a2
    0x84003a02    0x46    sd a1,0(a5)
    0x84003a04    0x48    ld a5,72(a0)
    0x84003a06    0x4a    ld a4,64(a0)
    0x84003a08    0x4c    addi a4,a4,-1
    0x84003a0a    0x4e    mv a3,t1
    0x84003a0c    0x50    beq a5,a4,ffffffff84003a14 <refill_unblock_check+0x58>
    0x84003a10    0x54    addi a3,a5,1
    0x84003a14    0x58    ld a4,80(a0)
    0x84003a16    0x5a    beq a5,a4,ffffffff84003a36 <refill_unblock_check+0x7a>
    0x84003a1a    0x5e    slli a5,a5,0x4
    0x84003a1c    0x60    add a5,a5,a2
    0x84003a1e    0x62    ld a6,8(a5)
    0x84003a22    0x66    ld a1,0(t3)
    0x84003a26    0x6a    slli a5,a3,0x4
    0x84003a2a    0x6e    add a5,a5,a2
    0x84003a2c    0x70    add a7,a6,a1
    0x84003a30    0x74    ld a4,0(a5)
    0x84003a32    0x76    bgeu a7,a4,ffffffff840039f4 <refill_unblock_check+0x38>
    0x84003a36    0x7a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_unblock_check` has 73 nodes.

Section refill_split_check (43 of 292)
======================================

Deriving specifications
-----------------------

Section `refill_split_check` consists of 148 instructions.

RVC_TFFTFT___FFT__TF.
RVC_TFFFFFT__T____TF.

Stack analysis
---------------

No stack accesses found. Code for `refill_split_check`:

    0x840036d2      0x0    auipc a4,0x1c
    0x840036d6      0x4    ld a4,-1706(a4) # ffffffff8401f028 <ksCurSC>
    0x840036da      0x8    ld a2,72(a4)
    0x840036dc      0xa    addi a6,a4,88
    0x840036e0      0xe    slli a3,a2,0x4
    0x840036e4     0x12    add a3,a3,a6
    0x840036e6     0x14    ld a1,8(a3)
    0x840036e8     0x16    sub a1,a1,a0
    0x840036ea     0x18    ld a7,0(a3)
    0x840036ee     0x1c    ld a5,0(a4)
    0x840036f0     0x1e    add a7,a7,a5
    0x840036f2     0x20    ld a5,80(a4)
    0x840036f4     0x22    bgeu a5,a2,ffffffff8400373c <refill_split_check+0x6a>
    0x840036f8     0x26    ld t1,64(a4)
    0x840036fc     0x2a    add a5,a5,t1
    0x840036fe     0x2c    addi a5,a5,1
    0x84003700     0x2e    sub a5,a5,a2
    0x84003702     0x30    beq t1,a5,ffffffff84003760 <refill_split_check+0x8e>
    0x84003706     0x34    li a5,19
    0x84003708     0x36    bgeu a5,a1,ffffffff84003760 <refill_split_check+0x8e>
    0x8400370c     0x3a    sd a1,8(a3)
    0x8400370e     0x3c    li a5,19
    0x84003710     0x3e    bltu a5,a0,ffffffff8400381c <refill_split_check+0x14a>
    0x84003714     0x42    ld a5,80(a4)
    0x84003716     0x44    ld a3,72(a4)
    0x84003718     0x46    beq a3,a5,ffffffff8400381c <refill_split_check+0x14a>
    0x8400371c     0x4a    slli a5,a5,0x4
    0x8400371e     0x4c    add a5,a5,a6
    0x84003720     0x4e    ld a3,8(a5)
    0x84003722     0x50    add a0,a0,a3
    0x84003724     0x52    sd a0,8(a5)
    0x84003726     0x54    ld a5,80(a4)
    0x84003728     0x56    slli a5,a5,0x4
    0x8400372a     0x58    add a6,a6,a5
    0x8400372c     0x5a    ld a5,0(a6)
    0x84003730     0x5e    bgeu a5,a7,ffffffff84003736 <refill_split_check+0x64>
    0x84003734     0x62    mv a5,a7
    0x84003736     0x64    sd a5,0(a6)
    0x8400373a     0x68    ret
    0x8400373c     0x6a    addi t3,a5,1
    0x84003740     0x6e    sub t3,t3,a2
    0x84003744     0x72    ld t1,64(a4)
    0x84003748     0x76    beq t1,t3,ffffffff8400375c <refill_split_check+0x8a>
    0x8400374c     0x7a    li t3,19
    0x8400374e     0x7c    bltu t3,a1,ffffffff8400370c <refill_split_check+0x3a>
    0x84003752     0x80    bne a5,a2,ffffffff84003760 <refill_split_check+0x8e>
    0x84003756     0x84    sd a7,0(a3)
    0x8400375a     0x88    ret
    0x8400375c     0x8a    mv t1,t3
    0x8400375e     0x8c    j ffffffff84003752 <refill_split_check+0x80>
    0x84003760     0x8e    addi t1,t1,-1
    0x84003762     0x90    li a5,0
    0x84003764     0x92    beq a2,t1,ffffffff8400376c <refill_split_check+0x9a>
    0x84003768     0x96    addi a5,a2,1
    0x8400376c     0x9a    sd a5,72(a4)
    0x8400376e     0x9c    slli a5,a5,0x4
    0x84003770     0x9e    add a5,a5,a6
    0x84003772     0xa0    ld a3,8(a5)
    0x84003774     0xa2    add a1,a1,a3
    0x84003776     0xa4    sd a1,8(a5)
    0x84003778     0xa6    li a5,19
    0x8400377a     0xa8    bltu a5,a0,ffffffff840037a2 <refill_split_check+0xd0>
    0x8400377e     0xac    ld a5,80(a4)
    0x84003780     0xae    ld a3,72(a4)
    0x84003782     0xb0    beq a3,a5,ffffffff840037a2 <refill_split_check+0xd0>
    0x84003786     0xb4    slli a5,a5,0x4
    0x84003788     0xb6    add a5,a5,a6
    0x8400378a     0xb8    ld a3,8(a5)
    0x8400378c     0xba    add a0,a0,a3
    0x8400378e     0xbc    sd a0,8(a5)
    0x84003790     0xbe    ld a5,80(a4)
    0x84003792     0xc0    slli a5,a5,0x4
    0x84003794     0xc2    add a5,a5,a6
    0x84003796     0xc4    ld a3,0(a5)
    0x84003798     0xc6    bgeu a3,a7,ffffffff8400379e <refill_split_check+0xcc>
    0x8400379c     0xca    mv a3,a7
    0x8400379e     0xcc    sd a3,0(a5)
    0x840037a0     0xce    j ffffffff840037b6 <refill_split_check+0xe4>
    0x840037a2     0xd0    ld a3,80(a4)
    0x840037a4     0xd2    slli a5,a3,0x4
    0x840037a8     0xd6    add a5,a5,a6
    0x840037aa     0xd8    ld a2,0(a5)
    0x840037ac     0xda    bltu a2,a7,ffffffff840037bc <refill_split_check+0xea>
    0x840037b0     0xde    ld a3,8(a5)
    0x840037b2     0xe0    add a0,a0,a3
    0x840037b4     0xe2    sd a0,8(a5)
    0x840037b6     0xe4    li a0,19
    0x840037b8     0xe6    li a7,0
    0x840037ba     0xe8    j ffffffff840037fc <refill_split_check+0x12a>
    0x840037bc     0xea    ld a2,64(a4)
    0x840037be     0xec    addi a2,a2,-1
    0x840037c0     0xee    li a5,0
    0x840037c2     0xf0    beq a3,a2,ffffffff840037ca <refill_split_check+0xf8>
    0x840037c6     0xf4    addi a5,a3,1
    0x840037ca     0xf8    sd a5,80(a4)
    0x840037cc     0xfa    slli a5,a5,0x4
    0x840037ce     0xfc    add a5,a5,a6
    0x840037d0     0xfe    sd a7,0(a5)
    0x840037d4    0x102    sd a0,8(a5)
    0x840037d6    0x104    j ffffffff840037b6 <refill_split_check+0xe4>
    0x840037d8    0x106    addi a5,a5,1
    0x840037da    0x108    sub a5,a5,a3
    0x840037dc    0x10a    ld a2,64(a4)
    0x840037de    0x10c    bne a2,a5,ffffffff8400381a <refill_split_check+0x148>
    0x840037e2    0x110    ld a2,64(a4)
    0x840037e4    0x112    addi a2,a2,-1
    0x840037e6    0x114    mv a5,a7
    0x840037e8    0x116    beq a3,a2,ffffffff840037f0 <refill_split_check+0x11e>
    0x840037ec    0x11a    addi a5,a3,1
    0x840037f0    0x11e    sd a5,72(a4)
    0x840037f2    0x120    slli a5,a5,0x4
    0x840037f4    0x122    add a5,a5,a6
    0x840037f6    0x124    ld a3,8(a5)
    0x840037f8    0x126    add a3,a3,a1
    0x840037fa    0x128    sd a3,8(a5)
    0x840037fc    0x12a    ld a3,72(a4)
    0x840037fe    0x12c    slli a5,a3,0x4
    0x84003802    0x130    add a5,a5,a6
    0x84003804    0x132    ld a1,8(a5)
    0x84003806    0x134    bgeu a0,a1,ffffffff840037e2 <refill_split_check+0x110>
    0x8400380a    0x138    ld a5,80(a4)
    0x8400380c    0x13a    bgeu a5,a3,ffffffff840037d8 <refill_split_check+0x106>
    0x84003810    0x13e    ld a2,64(a4)
    0x84003812    0x140    add a5,a5,a2
    0x84003814    0x142    addi a5,a5,1
    0x84003816    0x144    sub a5,a5,a3
    0x84003818    0x146    j ffffffff840037dc <refill_split_check+0x10a>
    0x8400381a    0x148    ret
    0x8400381c    0x14a    ld a3,80(a4)
    0x8400381e    0x14c    slli a5,a3,0x4
    0x84003822    0x150    add a5,a5,a6
    0x84003824    0x152    ld a2,0(a5)
    0x84003826    0x154    bltu a2,a7,ffffffff84003832 <refill_split_check+0x160>
    0x8400382a    0x158    ld a4,8(a5)
    0x8400382c    0x15a    add a0,a0,a4
    0x8400382e    0x15c    sd a0,8(a5)
    0x84003830    0x15e    ret
    0x84003832    0x160    ld a2,64(a4)
    0x84003834    0x162    addi a2,a2,-1
    0x84003836    0x164    li a5,0
    0x84003838    0x166    beq a3,a2,ffffffff84003840 <refill_split_check+0x16e>
    0x8400383c    0x16a    addi a5,a3,1
    0x84003840    0x16e    sd a5,80(a4)
    0x84003842    0x170    slli a5,a5,0x4
    0x84003844    0x172    add a6,a6,a5
    0x84003846    0x174    sd a7,0(a6)
    0x8400384a    0x178    sd a0,8(a6)
    0x8400384e    0x17c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
148 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_split_check` has 247 nodes.

Section refill_update (44 of 292)
=================================

Deriving specifications
-----------------------

Section `refill_update` consists of 59 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `refill_update`:

    0x84003638     0x0    addi a4,a0,88
    0x8400363c     0x4    ld a5,72(a0)
    0x8400363e     0x6    slli a5,a5,0x4
    0x84003640     0x8    add a5,a5,a4
    0x84003642     0xa    ld a6,0(a5)
    0x84003646     0xe    sd a6,88(a0)
    0x8400364a    0x12    ld a5,8(a5)
    0x8400364c    0x14    sd a5,8(a4)
    0x8400364e    0x16    sd zero,72(a0)
    0x84003652    0x1a    sd zero,80(a0)
    0x84003656    0x1e    sd a3,64(a0)
    0x84003658    0x20    sd a1,0(a0)
    0x8400365a    0x22    auipc a5,0x1c
    0x8400365e    0x26    ld a5,-1578(a5) # ffffffff8401f030 <ksCurTime>
    0x84003662    0x2a    addi a3,a5,10
    0x84003666    0x2e    ld a6,88(a0)
    0x8400366a    0x32    bltu a3,a6,ffffffff84003670 <refill_update+0x38>
    0x8400366e    0x36    sd a5,88(a0)
    0x84003670    0x38    ld a5,72(a0)
    0x84003672    0x3a    slli a5,a5,0x4
    0x84003674    0x3c    add a5,a5,a4
    0x84003676    0x3e    ld a3,8(a5)
    0x84003678    0x40    bltu a3,a2,ffffffff840036ae <refill_update+0x76>
    0x8400367c    0x44    sd a2,8(a5)
    0x8400367e    0x46    ld a5,0(a0)
    0x84003680    0x48    beqz a5,ffffffff84003684 <refill_update+0x4c>
    0x84003682    0x4a    ret
    0x84003684    0x4c    addi sp,sp,-32
    0x84003686    0x4e    auipc a1,0x1c
    0x8400368a    0x52    ld a1,-1622(a1) # ffffffff8401f030 <ksCurTime>
    0x8400368e    0x56    sd zero,24(sp)        ; stack access
    0x84003690    0x58    ld a2,80(a0)
    0x84003692    0x5a    ld a3,64(a0)
    0x84003694    0x5c    addi a3,a3,-1
    0x84003696    0x5e    beq a2,a3,ffffffff8400369e <refill_update+0x66>
    0x8400369a    0x62    addi a5,a2,1
    0x8400369e    0x66    sd a5,80(a0)
    0x840036a0    0x68    slli a5,a5,0x4
    0x840036a2    0x6a    add a4,a4,a5
    0x840036a4    0x6c    sd a1,0(a4)
    0x840036a6    0x6e    ld a5,24(sp)          ; stack access
    0x840036a8    0x70    sd a5,8(a4)
    0x840036aa    0x72    addi sp,sp,32
    0x840036ac    0x74    ret
    0x840036ae    0x76    ld a5,0(a5)
    0x840036b0    0x78    add a1,a1,a5
    0x840036b2    0x7a    sub a2,a2,a3
    0x840036b4    0x7c    ld a6,80(a0)
    0x840036b8    0x80    ld a3,64(a0)
    0x840036ba    0x82    addi a3,a3,-1
    0x840036bc    0x84    li a5,0
    0x840036be    0x86    beq a6,a3,ffffffff840036c6 <refill_update+0x8e>
    0x840036c2    0x8a    addi a5,a6,1 # fffffffffff00001 <ki_end+0x7bedc001>
    0x840036c6    0x8e    sd a5,80(a0)
    0x840036c8    0x90    slli a5,a5,0x4
    0x840036ca    0x92    add a4,a4,a5
    0x840036cc    0x94    sd a1,0(a4)
    0x840036ce    0x96    sd a2,8(a4)
    0x840036d0    0x98    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
59 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_update` has 102 nodes.

Section refill_new (45 of 292)
==============================

Deriving specifications
-----------------------

Section `refill_new` consists of 29 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `refill_new`:

    0x840035ec     0x0    sd a3,0(a0)
    0x840035ee     0x2    sd zero,72(a0)
    0x840035f2     0x6    sd zero,80(a0)
    0x840035f6     0xa    sd a1,64(a0)
    0x840035f8     0xc    addi a4,a0,88
    0x840035fc    0x10    sd a2,8(a4)
    0x840035fe    0x12    auipc a5,0x1c
    0x84003602    0x16    ld a5,-1486(a5) # ffffffff8401f030 <ksCurTime>
    0x84003606    0x1a    sd a5,0(a4)
    0x84003608    0x1c    ld a5,0(a0)
    0x8400360a    0x1e    beqz a5,ffffffff8400360e <refill_new+0x22>
    0x8400360c    0x20    ret
    0x8400360e    0x22    addi sp,sp,-32
    0x84003610    0x24    auipc a1,0x1c
    0x84003614    0x28    ld a1,-1504(a1) # ffffffff8401f030 <ksCurTime>
    0x84003618    0x2c    sd zero,24(sp)        ; stack access
    0x8400361a    0x2e    ld a2,80(a0)
    0x8400361c    0x30    ld a3,64(a0)
    0x8400361e    0x32    addi a3,a3,-1
    0x84003620    0x34    beq a2,a3,ffffffff84003628 <refill_new+0x3c>
    0x84003624    0x38    addi a5,a2,1
    0x84003628    0x3c    sd a5,80(a0)
    0x8400362a    0x3e    slli a5,a5,0x4
    0x8400362c    0x40    add a5,a5,a4
    0x8400362e    0x42    sd a1,0(a5)
    0x84003630    0x44    ld a4,24(sp)          ; stack access
    0x84003632    0x46    sd a4,8(a5)
    0x84003634    0x48    addi sp,sp,32
    0x84003636    0x4a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_new` has 51 nodes.

Section resolveAddressBits (46 of 292)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 97 instructions.

RVC_TFFFT____FT___TF.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
21 stack accesses found. Annotated code for `resolveAddressBits`:

    0x84003306      0x0    addi sp,sp,-32
    0x84003308      0x2    sd s0,24(sp)          ; stack access
    0x8400330a      0x4    sd s1,16(sp)          ; stack access
    0x8400330c      0x6    sd a1,0(sp)           ; stack access
    0x8400330e      0x8    sd a2,8(sp)           ; stack access
    0x84003310      0xa    srli a7,a1,0x3b
    0x84003314      0xe    li a5,10
    0x84003316     0x10    bne a7,a5,ffffffff840033a4 <resolveAddressBits+0x9e>
    0x8400331a     0x14    mv a6,a4
    0x8400331c     0x16    li t5,-1
    0x8400331e     0x18    lui t0,0xfc000
    0x84003322     0x1c    srli t0,t0,0x19
    0x84003326     0x20    li t6,1
    0x84003328     0x22    slli t6,t6,0x26
    0x8400332a     0x24    slli t2,t5,0x27
    0x8400332e     0x28    li s0,10
    0x84003330     0x2a    srli a7,a1,0x2f
    0x84003334     0x2e    andi a7,a7,63
    0x84003338     0x32    srli t1,a1,0x35
    0x8400333c     0x36    andi t1,t1,63
    0x84003340     0x3a    add s1,t1,a7
    0x84003344     0x3e    sext.w a5,a6
    0x84003348     0x42    subw t3,a6,t1
    0x8400334c     0x46    srl t3,a3,t3
    0x84003350     0x4a    sll t4,t5,t1
    0x84003354     0x4e    not t4,t4
    0x84003358     0x52    and t3,t3,t4
    0x8400335c     0x56    bltu a6,t1,ffffffff840033c0 <resolveAddressBits+0xba>
    0x84003360     0x5a    bne a2,t3,ffffffff840033c0 <resolveAddressBits+0xba>
    0x84003364     0x5e    bltu a6,s1,ffffffff840033f0 <resolveAddressBits+0xea>
    0x84003368     0x62    subw a5,a5,s1
    0x8400336a     0x64    srl a5,a3,a5
    0x8400336e     0x68    sll a7,t5,a7
    0x84003372     0x6c    not a7,a7
    0x84003376     0x70    and a5,a5,a7
    0x8400337a     0x74    slli a5,a5,0x5
    0x8400337c     0x76    slli a1,a1,0x1
    0x8400337e     0x78    and a2,a1,t0
    0x84003382     0x7c    and a1,a1,t6
    0x84003386     0x80    beqz a1,ffffffff8400338c <resolveAddressBits+0x86>
    0x84003388     0x82    or a2,a2,t2
    0x8400338c     0x86    add a5,a5,a2
    0x8400338e     0x88    bne a6,s1,ffffffff84003418 <resolveAddressBits+0x112>
    0x84003392     0x8c    sd zero,0(a0) # fffffffff8000000 <ki_end+0x73fdc000>  ; stack access
    0x84003396     0x90    sd a5,8(a0)           ; stack access
    0x84003398     0x92    sd zero,16(a0)        ; stack access
    0x8400339c     0x96    ld s0,24(sp)          ; stack access
    0x8400339e     0x98    ld s1,16(sp)          ; stack access
    0x840033a0     0x9a    addi sp,sp,32
    0x840033a2     0x9c    ret
    0x840033a4     0x9e    auipc a5,0x9
    0x840033a8     0xa2    addi a5,a5,1116 # ffffffff8400c800 <riscvKSASIDTable>
    0x840033ac     0xa6    sd zero,1024(a5)
    0x840033b0     0xaa    sd zero,1032(a5)
    0x840033b4     0xae    li a5,2
    0x840033b6     0xb0    sd a5,0(a0)           ; stack access
    0x840033b8     0xb2    sd zero,8(a0)         ; stack access
    0x840033bc     0xb6    sd a4,16(a0)          ; stack access
    0x840033be     0xb8    j ffffffff8400339c <resolveAddressBits+0x96>
    0x840033c0     0xba    auipc a3,0x9
    0x840033c4     0xbe    addi a3,a3,1088 # ffffffff8400c800 <riscvKSASIDTable>
    0x840033c8     0xc2    slli a6,a6,0x9
    0x840033ca     0xc4    lui a5,0x10
    0x840033cc     0xc6    addi a5,a5,-1
    0x840033ce     0xc8    and a6,a6,a5
    0x840033d2     0xcc    slli t1,t1,0x2
    0x840033d4     0xce    or t1,a6,t1
    0x840033d8     0xd2    ori t1,t1,3
    0x840033dc     0xd6    sd t1,1024(a3)
    0x840033e0     0xda    sd a2,1032(a3)
    0x840033e4     0xde    li a5,2
    0x840033e6     0xe0    sd a5,0(a0)           ; stack access
    0x840033e8     0xe2    sd zero,8(a0)         ; stack access
    0x840033ec     0xe6    sd a4,16(a0)          ; stack access
    0x840033ee     0xe8    j ffffffff8400339c <resolveAddressBits+0x96>
    0x840033f0     0xea    auipc a5,0x9
    0x840033f4     0xee    addi a5,a5,1040 # ffffffff8400c800 <riscvKSASIDTable>
    0x840033f8     0xf2    slli s1,s1,0x9
    0x840033fa     0xf4    slli a6,a6,0x2
    0x840033fc     0xf6    or a6,s1,a6
    0x84003400     0xfa    ori a6,a6,2
    0x84003404     0xfe    sd a6,1024(a5)
    0x84003408    0x102    sd zero,1032(a5)
    0x8400340c    0x106    li a5,2
    0x8400340e    0x108    sd a5,0(a0)           ; stack access
    0x84003410    0x10a    sd zero,8(a0)         ; stack access
    0x84003414    0x10e    sd a4,16(a0)          ; stack access
    0x84003416    0x110    j ffffffff8400339c <resolveAddressBits+0x96>
    0x84003418    0x112    sub a6,a6,s1
    0x8400341c    0x116    ld a1,0(a5)
    0x8400341e    0x118    ld a2,8(a5)
    0x84003420    0x11a    srli a7,a1,0x3b
    0x84003424    0x11e    beq a7,s0,ffffffff84003330 <resolveAddressBits+0x2a>
    0x84003428    0x122    sd zero,0(a0)         ; stack access
    0x8400342c    0x126    sd a5,8(a0)           ; stack access
    0x8400342e    0x128    sd a6,16(a0)          ; stack access
    0x84003432    0x12c    j ffffffff8400339c <resolveAddressBits+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 141 nodes.

Section Arch_performTransfer (47 of 292)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x84003302    0x0    li a0,0
    0x84003304    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (48 of 292)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x840032fe    0x0    li a0,0
    0x84003300    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (49 of 292)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x840032f6    0x0    addi a0,a0,-7
    0x840032f8    0x2    sltiu a0,a0,3
    0x840032fc    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (50 of 292)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x840032f4    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_updateCapData (51 of 292)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_updateCapData`:

    0x84002ed0    0x0    addi sp,sp,-32
    0x84002ed2    0x2    mv a0,a2
    0x84002ed4    0x4    mv a1,a3
    0x84002ed6    0x6    addi sp,sp,32
    0x84002ed8    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_checkIRQ (52 of 292)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84002e3e     0x0    addi a0,a0,-1
    0x84002e40     0x2    li a5,53
    0x84002e44     0x6    bltu a5,a0,ffffffff84002e4c <Arch_checkIRQ+0xe>
    0x84002e48     0xa    li a0,0
    0x84002e4a     0xc    ret
    0x84002e4c     0xe    auipc a5,0xa
    0x84002e50    0x12    addi a5,a5,-1612 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002e54    0x16    li a4,4
    0x84002e56    0x18    sd a4,1088(a5)
    0x84002e5a    0x1c    li a4,1
    0x84002e5c    0x1e    sd a4,1056(a5)
    0x84002e60    0x22    li a4,54
    0x84002e64    0x26    sd a4,1064(a5)
    0x84002e68    0x2a    li a0,3
    0x84002e6a    0x2c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 22 nodes.

Section getNBSendRecvDest (53 of 292)
=====================================

Deriving specifications
-----------------------

Section `getNBSendRecvDest` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getNBSendRecvDest`:

    0x84002e32    0x0    auipc a5,0x1c
    0x84002e36    0x4    ld a5,550(a5) # ffffffff8401f058 <ksCurThread>
    0x84002e3a    0x8    ld a0,32(a5)
    0x84002e3c    0xa    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNBSendRecvDest` has 7 nodes.

Section plat_cleanInvalidateL2Range (54 of 292)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84002e30    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (55 of 292)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84002e2e    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (56 of 292)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84002e2c    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section setIRQTrigger (57 of 292)
=================================

Deriving specifications
-----------------------

Section `setIRQTrigger` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setIRQTrigger`:

    0x84002e2a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQTrigger` has 2 nodes.

Section setNextPC (58 of 292)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84002e24    0x0    sd a1,272(a0)
    0x84002e28    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (59 of 292)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84002e1e    0x0    ld a0,264(a0)
    0x84002e22    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (60 of 292)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x84002daa     0x0    addi sp,sp,-16
    0x84002dac     0x2    sd a0,0(sp)           ; stack access
    0x84002dae     0x4    sd a1,8(sp)           ; stack access
    0x84002db0     0x6    sd a0,0(a2)
    0x84002db2     0x8    sd a1,8(a2)
    0x84002db4     0xa    sd a3,0(a4)
    0x84002db6     0xc    sfence.vma
    0x84002dba    0x10    li a0,0
    0x84002dbc    0x12    addi sp,sp,16
    0x84002dbe    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (61 of 292)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84002d94     0x0    addi sp,sp,-16
    0x84002d96     0x2    sd a0,0(sp)           ; stack access
    0x84002d98     0x4    sd a1,8(sp)           ; stack access
    0x84002d9a     0x6    sd a0,0(a2)
    0x84002d9c     0x8    sd a1,8(a2)
    0x84002d9e     0xa    sd a3,0(a4)
    0x84002da0     0xc    sfence.vma
    0x84002da4    0x10    li a0,0
    0x84002da6    0x12    addi sp,sp,16
    0x84002da8    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (62 of 292)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x84002d68     0x0    mv a5,a0
    0x84002d6a     0x2    li a4,2
    0x84002d6c     0x4    beq a0,a4,ffffffff84002d7a <maskVMRights+0x12>
    0x84002d70     0x8    li a4,3
    0x84002d72     0xa    li a0,1
    0x84002d74     0xc    beq a5,a4,ffffffff84002d84 <maskVMRights+0x1c>
    0x84002d78    0x10    ret
    0x84002d7a    0x12    srli a1,a1,0x1
    0x84002d7c    0x14    andi a1,a1,1
    0x84002d7e    0x16    addi a0,a1,1
    0x84002d82    0x1a    ret
    0x84002d84    0x1c    srli a5,a1,0x1
    0x84002d88    0x20    andi a5,a5,1
    0x84002d8a    0x22    beqz a5,ffffffff84002d78 <maskVMRights+0x10>
    0x84002d8c    0x24    andi a1,a1,1
    0x84002d8e    0x26    addi a0,a1,2
    0x84002d92    0x2a    j ffffffff84002d78 <maskVMRights+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 25 nodes.

Section checkValidIPCBuffer (63 of 292)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 26 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x84002d22     0x0    addi sp,sp,-16
    0x84002d24     0x2    srli a4,a1,0x3b
    0x84002d28     0x6    li a5,1
    0x84002d2a     0x8    bne a4,a5,ffffffff84002d3e <checkValidIPCBuffer+0x1c>
    0x84002d2e     0xc    srli a1,a1,0x36
    0x84002d30     0xe    andi a1,a1,1
    0x84002d32    0x10    bnez a1,ffffffff84002d4c <checkValidIPCBuffer+0x2a>
    0x84002d34    0x12    andi a0,a0,1023
    0x84002d38    0x16    bnez a0,ffffffff84002d5a <checkValidIPCBuffer+0x38>
    0x84002d3a    0x18    addi sp,sp,16
    0x84002d3c    0x1a    ret
    0x84002d3e    0x1c    li a5,3
    0x84002d40    0x1e    auipc a4,0xa
    0x84002d44    0x22    sd a5,-256(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84002d48    0x26    li a0,3
    0x84002d4a    0x28    j ffffffff84002d3a <checkValidIPCBuffer+0x18>
    0x84002d4c    0x2a    li a5,3
    0x84002d4e    0x2c    auipc a4,0xa
    0x84002d52    0x30    sd a5,-270(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84002d56    0x34    li a0,3
    0x84002d58    0x36    j ffffffff84002d3a <checkValidIPCBuffer+0x18>
    0x84002d5a    0x38    li a5,5
    0x84002d5c    0x3a    auipc a4,0xa
    0x84002d60    0x3e    sd a5,-284(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84002d64    0x42    li a0,3
    0x84002d66    0x44    j ffffffff84002d3a <checkValidIPCBuffer+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 36 nodes.

Section isValidVTableRoot (64 of 292)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x84002d0c     0x0    addi sp,sp,-16
    0x84002d0e     0x2    srli a4,a0,0x3b
    0x84002d12     0x6    li a5,3
    0x84002d14     0x8    srli a0,a0,0x27
    0x84002d16     0xa    andi a0,a0,1
    0x84002d18     0xc    beq a4,a5,ffffffff84002d1e <isValidVTableRoot+0x12>
    0x84002d1c    0x10    li a0,0
    0x84002d1e    0x12    addi sp,sp,16
    0x84002d20    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (65 of 292)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 36 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupPTSlot`:

    0x84002998     0x0    addi sp,sp,-16
    0x8400299a     0x2    mv a3,a1
    0x8400299c     0x4    srli a5,a1,0x1e
    0x840029a0     0x8    andi a5,a5,511
    0x840029a4     0xc    slli a5,a5,0x3
    0x840029a6     0xe    add a0,a0,a5
    0x840029a8    0x10    li a1,30
    0x840029aa    0x12    li a7,3
    0x840029ac    0x14    lui a6,0xfff00
    0x840029b0    0x18    srli a6,a6,0x8
    0x840029b4    0x1c    li a2,-1
    0x840029b6    0x1e    slli a2,a2,0x26
    0x840029b8    0x20    j ffffffff840029d6 <lookupPTSlot+0x3e>
    0x840029ba    0x22    addi a1,a1,-9
    0x840029bc    0x24    beq a1,a7,ffffffff840029fa <lookupPTSlot+0x62>
    0x840029c0    0x28    slli a0,a5,0x2
    0x840029c4    0x2c    and a0,a0,a6
    0x840029c8    0x30    add a0,a0,a2
    0x840029ca    0x32    srl a5,a3,a1
    0x840029ce    0x36    andi a5,a5,511
    0x840029d2    0x3a    slli a5,a5,0x3
    0x840029d4    0x3c    add a0,a0,a5
    0x840029d6    0x3e    ld a5,0(a0)
    0x840029d8    0x40    andi a4,a5,1
    0x840029dc    0x44    beqz a4,ffffffff840029f6 <lookupPTSlot+0x5e>
    0x840029de    0x46    srli a4,a5,0x1
    0x840029e2    0x4a    srli t1,a5,0x2
    0x840029e6    0x4e    or a4,a4,t1
    0x840029ea    0x52    srli t1,a5,0x3
    0x840029ee    0x56    or a4,a4,t1
    0x840029f2    0x5a    andi a4,a4,1
    0x840029f4    0x5c    beqz a4,ffffffff840029ba <lookupPTSlot+0x22>
    0x840029f6    0x5e    addi sp,sp,16
    0x840029f8    0x60    ret
    0x840029fa    0x62    li a1,12
    0x840029fc    0x64    j ffffffff840029f6 <lookupPTSlot+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 44 nodes.

Section copyGlobalMappings (66 of 292)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x84002702     0x0    auipc a5,0x20
    0x84002706     0x4    addi a5,a5,254 # ffffffff84022800 <kernel_root_pageTable+0x800>
    0x8400270a     0x8    lui a4,0x1
    0x8400270c     0xa    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x84002710     0xe    add a4,a4,a0
    0x84002712    0x10    auipc a2,0x21
    0x84002716    0x14    addi a2,a2,-1810 # ffffffff84023000 <kernel_root_pageTable+0x1000>
    0x8400271a    0x18    ld a3,0(a5)
    0x8400271c    0x1a    sd a3,0(a4)
    0x8400271e    0x1c    addi a5,a5,8
    0x84002720    0x1e    addi a4,a4,8
    0x84002722    0x20    bne a5,a2,ffffffff8400271a <copyGlobalMappings+0x18>
    0x84002726    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (67 of 292)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x84002700    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (68 of 292)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x840026fe    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (69 of 292)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x84002424    0x0    li a0,0
    0x84002426    0x2    li a1,0
    0x84002428    0x4    li a2,0
    0x8400242a    0x6    li a7,8
    0x8400242c    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section restore_user_context (70 of 292)
========================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 42 instructions.

Skipping 1802a02f sc.w zero,zero,(t0)

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

No stack accesses found. Code for `restore_user_context`:

    0x8400237e     0x0    auipc a5,0x1d
    0x84002382     0x4    ld a5,-806(a5) # ffffffff8401f058 <ksCurThread>
    0x84002386     0x8    mv t0,a5
    0x84002388     0xa    ld ra,0(t0)
    0x8400238c     0xe    ld sp,8(t0)
    0x84002390    0x12    ld gp,16(t0)
    0x84002394    0x16    sc.w zero,zero,(t0)
    0x84002398    0x1a    ld t2,48(t0)
    0x8400239c    0x1e    ld s0,56(t0)
    0x840023a0    0x22    ld s1,64(t0)
    0x840023a4    0x26    ld a0,72(t0)
    0x840023a8    0x2a    ld a1,80(t0)
    0x840023ac    0x2e    ld a2,88(t0)
    0x840023b0    0x32    ld a3,96(t0)
    0x840023b4    0x36    ld a4,104(t0)
    0x840023b8    0x3a    ld a5,112(t0)
    0x840023bc    0x3e    ld a6,120(t0)
    0x840023c0    0x42    ld a7,128(t0)
    0x840023c4    0x46    ld s2,136(t0)
    0x840023c8    0x4a    ld s3,144(t0)
    0x840023cc    0x4e    ld s4,152(t0)
    0x840023d0    0x52    ld s5,160(t0)
    0x840023d4    0x56    ld s6,168(t0)
    0x840023d8    0x5a    ld s7,176(t0)
    0x840023dc    0x5e    ld s8,184(t0)
    0x840023e0    0x62    ld s9,192(t0)
    0x840023e4    0x66    ld s10,200(t0)
    0x840023e8    0x6a    ld s11,208(t0)
    0x840023ec    0x6e    ld t3,216(t0)
    0x840023f0    0x72    ld t4,224(t0)
    0x840023f4    0x76    ld t5,232(t0)
    0x840023f8    0x7a    ld t6,240(t0)
    0x840023fc    0x7e    ld t1,24(t0)
    0x84002400    0x82    add tp,t1,zero
    0x84002404    0x86    ld t1,272(t0)
    0x84002408    0x8a    csrw sepc,t1
    0x8400240c    0x8e    csrw sscratch,t0
    0x84002410    0x92    ld t1,256(t0)
    0x84002414    0x96    csrw sstatus,t1
    0x84002418    0x9a    ld t1,40(t0)
    0x8400241c    0x9e    ld t0,32(t0)
    0x84002420    0xa2    sret

Proving inst theorems
---------------------

42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 81 nodes.

Section cap_get_capPtr (71 of 292)
==================================

Deriving specifications
-----------------------

Section `cap_get_capPtr` consists of 126 instructions.
Switch found.

RVC_TFFFFT___FFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `cap_get_capPtr`:

    0x8400224a      0x0    addi sp,sp,-16
    0x8400224c      0x2    srli a5,a0,0x3b
    0x84002250      0x6    li a4,24
    0x84002252      0x8    bltu a4,a5,ffffffff8400231e <cap_get_capPtr+0xd4>
    0x84002256      0xc    slli a3,a5,0x2
    0x8400225a     0x10    auipc a2,0x9
    0x8400225e     0x14    addi a2,a2,1878 # ffffffff8400b9b0 <msgRegisters+0x8>
    0x84002262     0x18    add a3,a3,a2
    0x84002264     0x1a    lw a4,0(a3)
    0x84002266     0x1c    add a4,a4,a2
    0x84002268     0x1e    jr a4
    0x8400226a     0x20    slli a4,a0,0x19
    0x8400226e     0x24    srli a4,a4,0x19
    0x84002270     0x26    srli a5,a0,0x26
    0x84002274     0x2a    andi a5,a5,1
    0x84002276     0x2c    beqz a5,ffffffff8400227e <cap_get_capPtr+0x34>
    0x84002278     0x2e    li a5,-1
    0x8400227a     0x30    slli a5,a5,0x27
    0x8400227c     0x32    or a4,a4,a5
    0x8400227e     0x34    mv a0,a4
    0x84002280     0x36    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002282     0x38    slli a4,a0,0x19
    0x84002286     0x3c    srli a4,a4,0x19
    0x84002288     0x3e    srli a5,a0,0x26
    0x8400228c     0x42    andi a5,a5,1
    0x8400228e     0x44    beqz a5,ffffffff84002296 <cap_get_capPtr+0x4c>
    0x84002290     0x46    li a5,-1
    0x84002292     0x48    slli a5,a5,0x27
    0x84002294     0x4a    or a4,a4,a5
    0x84002296     0x4c    mv a0,a4
    0x84002298     0x4e    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x8400229a     0x50    slli a4,a0,0x19
    0x8400229e     0x54    srli a4,a4,0x19
    0x840022a0     0x56    srli a5,a0,0x26
    0x840022a4     0x5a    andi a5,a5,1
    0x840022a6     0x5c    beqz a5,ffffffff840022ae <cap_get_capPtr+0x64>
    0x840022a8     0x5e    li a5,-1
    0x840022aa     0x60    slli a5,a5,0x27
    0x840022ac     0x62    or a4,a4,a5
    0x840022ae     0x64    mv a0,a4
    0x840022b0     0x66    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x840022b2     0x68    slli a5,a0,0x1
    0x840022b6     0x6c    lui a0,0xfc000
    0x840022ba     0x70    srli a0,a0,0x19
    0x840022bc     0x72    and a0,a0,a5
    0x840022be     0x74    srli a5,a5,0x26
    0x840022c0     0x76    andi a5,a5,1
    0x840022c2     0x78    beqz a5,ffffffff8400237a <cap_get_capPtr+0x130>
    0x840022c4     0x7a    li a5,-1
    0x840022c6     0x7c    slli a5,a5,0x27
    0x840022c8     0x7e    or a0,a0,a5
    0x840022ca     0x80    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x840022cc     0x82    slli a5,a0,0x19
    0x840022d0     0x86    srli a5,a5,0x19
    0x840022d2     0x88    srli a0,a0,0x26
    0x840022d4     0x8a    andi a0,a0,1
    0x840022d6     0x8c    beqz a0,ffffffff840022de <cap_get_capPtr+0x94>
    0x840022d8     0x8e    li a4,-1
    0x840022da     0x90    slli a4,a4,0x27
    0x840022dc     0x92    or a5,a5,a4
    0x840022de     0x94    andi a0,a5,-1024
    0x840022e2     0x98    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x840022e4     0x9a    andi a5,a0,127
    0x840022e8     0x9e    li a4,64
    0x840022ec     0xa2    beq a5,a4,ffffffff84002300 <cap_get_capPtr+0xb6>
    0x840022f0     0xa6    andi a0,a0,63
    0x840022f4     0xaa    addiw a0,a0,1
    0x840022f6     0xac    li a5,-1
    0x840022f8     0xae    sll a0,a5,a0
    0x840022fc     0xb2    and a0,a0,a1
    0x840022fe     0xb4    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002300     0xb6    li a0,4
    0x84002302     0xb8    j ffffffff840022f4 <cap_get_capPtr+0xaa>
    0x84002304     0xba    mv a0,a1
    0x84002306     0xbc    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002308     0xbe    srli a1,a1,0x10
    0x8400230a     0xc0    slli a0,a1,0x19
    0x8400230e     0xc4    srli a0,a0,0x19
    0x84002310     0xc6    srli a1,a1,0x26
    0x84002312     0xc8    andi a1,a1,1
    0x84002314     0xca    beqz a1,ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002316     0xcc    li a5,-1
    0x84002318     0xce    slli a5,a5,0x27
    0x8400231a     0xd0    or a0,a0,a5
    0x8400231c     0xd2    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x8400231e     0xd4    li a4,3
    0x84002320     0xd6    beq a5,a4,ffffffff84002348 <cap_get_capPtr+0xfe>
    0x84002324     0xda    li a4,13
    0x84002326     0xdc    beq a5,a4,ffffffff8400235e <cap_get_capPtr+0x114>
    0x8400232a     0xe0    li a4,1
    0x8400232c     0xe2    li a0,0
    0x8400232e     0xe4    bne a5,a4,ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002332     0xe8    srli a1,a1,0x9
    0x84002334     0xea    slli a0,a1,0x19
    0x84002338     0xee    srli a0,a0,0x19
    0x8400233a     0xf0    srli a1,a1,0x26
    0x8400233c     0xf2    andi a1,a1,1
    0x8400233e     0xf4    beqz a1,ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002340     0xf6    li a5,-1
    0x84002342     0xf8    slli a5,a5,0x27
    0x84002344     0xfa    or a0,a0,a5
    0x84002346     0xfc    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002348     0xfe    srli a1,a1,0x9
    0x8400234a    0x100    slli a0,a1,0x19
    0x8400234e    0x104    srli a0,a0,0x19
    0x84002350    0x106    srli a1,a1,0x26
    0x84002352    0x108    andi a1,a1,1
    0x84002354    0x10a    beqz a1,ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002356    0x10c    li a5,-1
    0x84002358    0x10e    slli a5,a5,0x27
    0x8400235a    0x110    or a0,a0,a5
    0x8400235c    0x112    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x8400235e    0x114    slli a5,a0,0x2
    0x84002362    0x118    lui a0,0xf8000
    0x84002366    0x11c    srli a0,a0,0x19
    0x84002368    0x11e    and a0,a0,a5
    0x8400236a    0x120    srli a5,a5,0x26
    0x8400236c    0x122    andi a5,a5,1
    0x8400236e    0x124    beqz a5,ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002370    0x126    li a5,-1
    0x84002372    0x128    slli a5,a5,0x27
    0x84002374    0x12a    or a0,a0,a5
    0x84002376    0x12c    j ffffffff8400237a <cap_get_capPtr+0x130>
    0x84002378    0x12e    li a0,0
    0x8400237a    0x130    addi sp,sp,16
    0x8400237c    0x132    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
120 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cap_get_capPtr` has 222 nodes.

Section validFaultHandler (72 of 292)
=====================================

Deriving specifications
-----------------------

Section `validFaultHandler` consists of 26 instructions.


Stack analysis
---------------

No stack accesses found. Code for `validFaultHandler`:

    0x84002206     0x0    addi sp,sp,-16
    0x84002208     0x2    srli a5,a0,0x3b
    0x8400220c     0x6    beqz a5,ffffffff84002246 <validFaultHandler+0x40>
    0x8400220e     0x8    li a4,4
    0x84002210     0xa    bne a5,a4,ffffffff84002236 <validFaultHandler+0x30>
    0x84002214     0xe    srli a5,a0,0x37
    0x84002218    0x12    andi a5,a5,1
    0x8400221a    0x14    beqz a5,ffffffff84002228 <validFaultHandler+0x22>
    0x8400221c    0x16    srli a5,a0,0x39
    0x84002220    0x1a    srli a0,a0,0x3a
    0x84002222    0x1c    or a0,a0,a5
    0x84002224    0x1e    andi a0,a0,1
    0x84002226    0x20    bnez a0,ffffffff84002242 <validFaultHandler+0x3c>
    0x84002228    0x22    li a5,2
    0x8400222a    0x24    auipc a4,0xb
    0x8400222e    0x28    sd a5,-1514(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84002232    0x2c    li a0,0
    0x84002234    0x2e    j ffffffff84002242 <validFaultHandler+0x3c>
    0x84002236    0x30    li a5,2
    0x84002238    0x32    auipc a4,0xb
    0x8400223c    0x36    sd a5,-1528(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84002240    0x3a    li a0,0
    0x84002242    0x3c    addi sp,sp,16
    0x84002244    0x3e    ret
    0x84002246    0x40    li a0,1
    0x84002248    0x42    j ffffffff84002242 <validFaultHandler+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `validFaultHandler` has 37 nodes.

Section getNewActiveIRQ (73 of 292)
===================================

Deriving specifications
-----------------------

Section `getNewActiveIRQ` consists of 13 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `getNewActiveIRQ`:

    0x840021e2     0x0    csrr a0,sip
    0x840021e6     0x4    andi a5,a0,512
    0x840021ea     0x8    bnez a5,ffffffff840021f4 <getNewActiveIRQ+0x12>
    0x840021ec     0xa    andi a0,a0,32
    0x840021f0     0xe    bnez a0,ffffffff84002200 <getNewActiveIRQ+0x1e>
    0x840021f2    0x10    ret
    0x840021f4    0x12    lui a5,0xcc202
    0x840021f8    0x16    lw a0,4(a5)
    0x840021fa    0x18    slli a0,a0,0x20
    0x840021fc    0x1a    srli a0,a0,0x20
    0x840021fe    0x1c    ret
    0x84002200    0x1e    li a0,54
    0x84002204    0x22    j ffffffff840021f2 <getNewActiveIRQ+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNewActiveIRQ` has 21 nodes.

Section findVSpaceForASID (74 of 292)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 35 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x84002182     0x0    addi sp,sp,-16
    0x84002184     0x2    srli a5,a0,0x9
    0x84002188     0x6    slli a4,a5,0x3
    0x8400218c     0xa    auipc a5,0xa
    0x84002190     0xe    addi a5,a5,1652 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002194    0x12    add a5,a5,a4
    0x84002196    0x14    ld a5,0(a5)
    0x84002198    0x16    beqz a5,ffffffff840021b2 <findVSpaceForASID+0x30>
    0x8400219a    0x18    andi a0,a0,511
    0x8400219e    0x1c    slli a0,a0,0x3
    0x840021a0    0x1e    add a0,a0,a5
    0x840021a2    0x20    ld a5,0(a0)
    0x840021a4    0x22    beqz a5,ffffffff840021ca <findVSpaceForASID+0x48>
    0x840021a6    0x24    sd zero,0(sp)         ; stack access
    0x840021a8    0x26    sd a5,8(sp)           ; stack access
    0x840021aa    0x28    ld a0,0(sp)           ; stack access
    0x840021ac    0x2a    ld a1,8(sp)           ; stack access
    0x840021ae    0x2c    addi sp,sp,16
    0x840021b0    0x2e    ret
    0x840021b2    0x30    auipc a5,0xa
    0x840021b6    0x34    addi a5,a5,1614 # ffffffff8400c800 <riscvKSASIDTable>
    0x840021ba    0x38    sd zero,1024(a5)
    0x840021be    0x3c    sd zero,1032(a5)
    0x840021c2    0x40    li a5,2
    0x840021c4    0x42    sd a5,0(sp)           ; stack access
    0x840021c6    0x44    sd zero,8(sp)         ; stack access
    0x840021c8    0x46    j ffffffff840021aa <findVSpaceForASID+0x28>
    0x840021ca    0x48    auipc a5,0xa
    0x840021ce    0x4c    addi a5,a5,1590 # ffffffff8400c800 <riscvKSASIDTable>
    0x840021d2    0x50    sd zero,1024(a5)
    0x840021d6    0x54    sd zero,1032(a5)
    0x840021da    0x58    li a5,2
    0x840021dc    0x5a    sd a5,0(sp)           ; stack access
    0x840021de    0x5c    sd zero,8(sp)         ; stack access
    0x840021e0    0x5e    j ffffffff840021aa <findVSpaceForASID+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 54 nodes.

Section pte_next (75 of 292)
============================

Deriving specifications
-----------------------

Section `pte_next` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `pte_next`:

    0x8400215e     0x0    snez a1,a1
    0x84002162     0x4    srli a0,a0,0x2
    0x84002164     0x6    lui a5,0xfff00
    0x84002168     0xa    srli a5,a5,0xa
    0x8400216a     0xc    and a0,a0,a5
    0x8400216c     0xe    slli a5,a1,0x3
    0x84002170    0x12    slli a4,a1,0x2
    0x84002174    0x16    or a5,a5,a4
    0x84002176    0x18    or a0,a0,a5
    0x84002178    0x1a    slli a1,a1,0x1
    0x8400217a    0x1c    or a0,a0,a1
    0x8400217c    0x1e    ori a0,a0,225
    0x84002180    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `pte_next` has 14 nodes.

Section idle_thread (76 of 292)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x84002158    0x0    wfi
    0x8400215c    0x4    j ffffffff84002158 <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section copyMRsFault (77 of 292)
================================

Deriving specifications
-----------------------

Section `copyMRsFault` consists of 51 instructions.

RVC_FFFFT_________FT.

Stack analysis
---------------

No stack accesses found. Code for `copyMRsFault`:

    0x840020cc     0x0    mv t4,a3
    0x840020ce     0x2    li a5,4
    0x840020d0     0x4    bgeu a5,a3,ffffffff840020d6 <copyMRsFault+0xa>
    0x840020d4     0x8    li t4,4
    0x840020d6     0xa    beqz a3,ffffffff84002156 <copyMRsFault+0x8a>
    0x840020d8     0xc    auipc a7,0xa
    0x840020dc    0x10    addi a7,a7,-1840 # ffffffff8400b9a8 <msgRegisters>
    0x840020e0    0x14    slli t3,a2,0x20
    0x840020e4    0x18    srli t3,t3,0x20
    0x840020e8    0x1c    slli t3,t3,0x5
    0x840020ea    0x1e    li a6,0
    0x840020ec    0x20    auipc t5,0xa
    0x840020f0    0x24    addi t5,t5,-556 # ffffffff8400bec0 <fault_messages>
    0x840020f4    0x28    add a5,a6,t3
    0x840020f8    0x2c    add a5,a5,t5
    0x840020fa    0x2e    lbu a5,0(a5)
    0x840020fe    0x32    slli a5,a5,0x3
    0x84002100    0x34    add a5,a5,a0
    0x84002102    0x36    ld t1,0(a5)
    0x84002106    0x3a    lbu a5,0(a7)
    0x8400210a    0x3e    slli a5,a5,0x3
    0x8400210c    0x40    add a5,a5,a1
    0x8400210e    0x42    sd t1,0(a5)
    0x84002112    0x46    addi a6,a6,1
    0x84002114    0x48    addi a7,a7,1
    0x84002116    0x4a    bltu a6,t4,ffffffff840020f4 <copyMRsFault+0x28>
    0x8400211a    0x4e    li a5,1
    0x8400211c    0x50    beqz a3,ffffffff84002120 <copyMRsFault+0x54>
    0x8400211e    0x52    mv a5,t4
    0x84002120    0x54    beqz a4,ffffffff84002156 <copyMRsFault+0x8a>
    0x84002122    0x56    bgeu a5,a3,ffffffff84002156 <copyMRsFault+0x8a>
    0x84002126    0x5a    slli a2,a2,0x20
    0x84002128    0x5c    srli a2,a2,0x20
    0x8400212a    0x5e    slli a2,a2,0x5
    0x8400212c    0x60    add a2,a2,a5
    0x8400212e    0x62    auipc a1,0xa
    0x84002132    0x66    addi a1,a1,-622 # ffffffff8400bec0 <fault_messages>
    0x84002136    0x6a    add a1,a1,a2
    0x84002138    0x6c    slli a2,a5,0x3
    0x8400213c    0x70    add a2,a2,a4
    0x8400213e    0x72    slli a3,a3,0x3
    0x84002140    0x74    add a4,a4,a3
    0x84002142    0x76    lbu a5,0(a1)
    0x84002146    0x7a    slli a5,a5,0x3
    0x84002148    0x7c    add a5,a5,a0
    0x8400214a    0x7e    ld a5,0(a5)
    0x8400214c    0x80    sd a5,8(a2)
    0x8400214e    0x82    addi a1,a1,1
    0x84002150    0x84    addi a2,a2,8
    0x84002152    0x86    bne a2,a4,ffffffff84002142 <copyMRsFault+0x76>
    0x84002156    0x8a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRsFault` has 73 nodes.

Section bi_finalise (78 of 292)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x84000bf0     0x0    auipc a5,0x1
    0x84000bf4     0x4    addi a5,a5,-568 # ffffffff840019b8 <ndks_boot>
    0x84000bf8     0x8    ld a3,592(a5)
    0x84000bfc     0xc    ld a4,600(a5)
    0x84000c00    0x10    ld a5,584(a5)
    0x84000c04    0x14    sd a3,40(a5)
    0x84000c06    0x16    sd a4,48(a5)
    0x84000c08    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (79 of 292)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 20 instructions.

Skipping c01027f3 rdtime a5


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x84000ba4     0x0    auipc a5,0x1e
    0x84000ba8     0x4    sd a0,1188(a5) # ffffffff8401f048 <ksSchedulerAction>
    0x84000bac     0x8    auipc a5,0x1e
    0x84000bb0     0xc    ld a5,1188(a5) # ffffffff8401f050 <ksIdleThread>
    0x84000bb4    0x10    auipc a4,0x1e
    0x84000bb8    0x14    sd a5,1188(a4) # ffffffff8401f058 <ksCurThread>
    0x84000bbc    0x18    ld a5,368(a5)
    0x84000bc0    0x1c    auipc a4,0x1e
    0x84000bc4    0x20    sd a5,1128(a4) # ffffffff8401f028 <ksCurSC>
    0x84000bc8    0x24    auipc a5,0x1e
    0x84000bcc    0x28    sd zero,1144(a5) # ffffffff8401f040 <ksConsumed>
    0x84000bd0    0x2c    li a5,1
    0x84000bd2    0x2e    auipc a4,0x1e
    0x84000bd6    0x32    sd a5,1126(a4) # ffffffff8401f038 <ksReprogram>
    0x84000bda    0x36    auipc a5,0x1e
    0x84000bde    0x3a    sd zero,1158(a5) # ffffffff8401f060 <ksReleaseHead>
    0x84000be2    0x3e    rdtime a5
    0x84000be6    0x42    auipc a4,0x1e
    0x84000bea    0x46    sd a5,1098(a4) # ffffffff8401f030 <ksCurTime>
    0x84000bee    0x4a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 31 nodes.

Section create_root_cnode (80 of 292)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_root_cnode`:

    0x840007c4     0x0    addi sp,sp,-16
    0x840007c6     0x2    auipc a5,0x1
    0x840007ca     0x6    addi a5,a5,498 # ffffffff840019b8 <ndks_boot>
    0x840007ce     0xa    lui a4,0x80
    0x840007d2     0xe    sd a4,600(a5)
    0x840007d6    0x12    ld a4,608(a5)
    0x840007da    0x16    slli a0,a4,0x19
    0x840007de    0x1a    srli a0,a0,0x1a
    0x840007e0    0x1c    lui a5,0xab53
    0x840007e4    0x20    slli a5,a5,0x23
    0x840007e6    0x22    or a0,a0,a5
    0x840007e8    0x24    addi a5,a4,64 # 80040 <KERNEL_OFFSET-0xfffffffefff7ffc0>
    0x840007ec    0x28    sd a0,64(a4)
    0x840007ee    0x2a    sd zero,72(a4)
    0x840007f2    0x2e    sd zero,80(a4)
    0x840007f6    0x32    li a4,3
    0x840007f8    0x34    sd a4,24(a5)
    0x840007fa    0x36    li a1,0
    0x840007fc    0x38    addi sp,sp,16
    0x840007fe    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (81 of 292)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x840007b2     0x0    addi sp,sp,-16
    0x840007b4     0x2    sd a1,0(a0)
    0x840007b6     0x4    sd a2,8(a0)
    0x840007b8     0x6    sd zero,16(a0) # c000010 <KERNEL_OFFSET-0xfffffffef3fffff0>
    0x840007bc     0xa    li a5,3
    0x840007be     0xc    sd a5,24(a0)
    0x840007c0     0xe    addi sp,sp,16
    0x840007c2    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section initIRQController (82 of 292)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 30 instructions.

LW..
SW..

Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x84000530     0x0    li a4,1
    0x84000532     0x2    lui a0,0xcc001
    0x84000536     0x6    lui a6,0xcc202
    0x8400053a     0xa    li a1,54
    0x8400053e     0xe    j ffffffff84000546 <initIRQController+0x16>
    0x84000540    0x10    addi a4,a4,1
    0x84000542    0x12    beq a4,a1,ffffffff8400056e <initIRQController+0x3e>
    0x84000546    0x16    sext.w a2,a4
    0x8400054a    0x1a    srli a5,a4,0x5
    0x8400054e    0x1e    slli a5,a5,0x2
    0x84000550    0x20    add a5,a5,a0
    0x84000552    0x22    lw a5,0(a5)
    0x84000554    0x24    slli a5,a5,0x20
    0x84000556    0x26    srli a5,a5,0x20
    0x84000558    0x28    andi a3,a4,31
    0x8400055c    0x2c    srl a5,a5,a3
    0x84000560    0x30    andi a5,a5,1
    0x84000562    0x32    beqz a5,ffffffff84000540 <initIRQController+0x10>
    0x84000564    0x34    lw a5,4(a6) # ffffffffcc202004 <ki_end+0x481de004>
    0x84000568    0x38    sw a2,4(a6)
    0x8400056c    0x3c    j ffffffff84000540 <initIRQController+0x10>
    0x8400056e    0x3e    lui a5,0xcc000
    0x84000572    0x42    addi a5,a5,4
    0x84000574    0x44    li a3,2
    0x84000576    0x46    lui a4,0xcc000
    0x8400057a    0x4a    addi a4,a4,220 # ffffffffcc0000dc <ki_end+0x47fdc0dc>
    0x8400057e    0x4e    sw a3,0(a5)
    0x84000580    0x50    addi a5,a5,4
    0x84000582    0x52    bne a5,a4,ffffffff8400057e <initIRQController+0x4e>
    0x84000586    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 41 nodes.

Section initLocalIRQController (83 of 292)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 22 instructions.

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x840004ec     0x0    li a3,1
    0x840004ee     0x2    lui a1,0xcc002
    0x840004f2     0x6    addi a1,a1,256 # ffffffffcc002100 <ki_end+0x47fde100>
    0x840004f6     0xa    li a6,1
    0x840004f8     0xc    li a0,54
    0x840004fc    0x10    srli a4,a3,0x5
    0x84000500    0x14    slli a4,a4,0x2
    0x84000502    0x16    add a4,a4,a1
    0x84000504    0x18    lw a2,0(a4)
    0x84000506    0x1a    andi a5,a3,31
    0x8400050a    0x1e    sll a5,a6,a5
    0x8400050e    0x22    not a5,a5
    0x84000512    0x26    and a5,a5,a2
    0x84000514    0x28    sext.w a5,a5
    0x84000516    0x2a    sw a5,0(a4)
    0x84000518    0x2c    addi a3,a3,1
    0x8400051a    0x2e    bne a3,a0,ffffffff840004fc <initLocalIRQController+0x10>
    0x8400051e    0x32    lui a5,0xcc202
    0x84000522    0x36    sw zero,0(a5) # ffffffffcc202000 <ki_end+0x481de000>
    0x84000526    0x3a    li a5,544
    0x8400052a    0x3e    csrrs a5,sie,a5
    0x8400052e    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 29 nodes.

Section initL2Cache (84 of 292)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x840004ea    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section get_avail_p_regs (85 of 292)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x840004e0    0x0    auipc a0,0x1
    0x840004e4    0x4    addi a0,a0,1224 # ffffffff840019a8 <avail_p_regs>
    0x840004e8    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (86 of 292)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x840004dc    0x0    li a0,1
    0x840004de    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section write_it_asid_pool (87 of 292)
======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 255 instructions.
Switch found.
Switch found.


Stack analysis
---------------

4 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x8400015e      0x0    addi sp,sp,-32
    0x84000160      0x2    sd a2,0(sp)           ; stack access
    0x84000162      0x4    sd a3,8(sp)           ; stack access
    0x84000164      0x6    srli a5,a0,0x3b
    0x84000168      0xa    li a4,24
    0x8400016a      0xc    bltu a4,a5,ffffffff84000238 <write_it_asid_pool+0xda>
    0x8400016e     0x10    slli a3,a5,0x2
    0x84000172     0x14    auipc a2,0xc
    0x84000176     0x18    addi a2,a2,-1886 # ffffffff8400ba14 <msgRegisters+0x6c>
    0x8400017a     0x1c    add a3,a3,a2
    0x8400017c     0x1e    lw a4,0(a3)
    0x8400017e     0x20    add a4,a4,a2
    0x84000180     0x22    jr a4
    0x84000182     0x24    slli a4,a0,0x19
    0x84000186     0x28    srli a4,a4,0x19
    0x84000188     0x2a    srli a5,a0,0x26
    0x8400018c     0x2e    andi a5,a5,1
    0x8400018e     0x30    beqz a5,ffffffff84000196 <write_it_asid_pool+0x38>
    0x84000190     0x32    li a5,-1
    0x84000192     0x34    slli a5,a5,0x27
    0x84000194     0x36    or a4,a4,a5
    0x84000196     0x38    mv a0,a4
    0x84000198     0x3a    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x8400019a     0x3c    slli a4,a0,0x19
    0x8400019e     0x40    srli a4,a4,0x19
    0x840001a0     0x42    srli a5,a0,0x26
    0x840001a4     0x46    andi a5,a5,1
    0x840001a6     0x48    beqz a5,ffffffff840001ae <write_it_asid_pool+0x50>
    0x840001a8     0x4a    li a5,-1
    0x840001aa     0x4c    slli a5,a5,0x27
    0x840001ac     0x4e    or a4,a4,a5
    0x840001ae     0x50    mv a0,a4
    0x840001b0     0x52    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x840001b2     0x54    slli a4,a0,0x19
    0x840001b6     0x58    srli a4,a4,0x19
    0x840001b8     0x5a    srli a5,a0,0x26
    0x840001bc     0x5e    andi a5,a5,1
    0x840001be     0x60    beqz a5,ffffffff840001c6 <write_it_asid_pool+0x68>
    0x840001c0     0x62    li a5,-1
    0x840001c2     0x64    slli a5,a5,0x27
    0x840001c4     0x66    or a4,a4,a5
    0x840001c6     0x68    mv a0,a4
    0x840001c8     0x6a    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x840001ca     0x6c    slli a0,a0,0x1
    0x840001cc     0x6e    lui a4,0xfc000
    0x840001d0     0x72    srli a4,a4,0x19
    0x840001d2     0x74    and a4,a4,a0
    0x840001d4     0x76    srli a0,a0,0x26
    0x840001d6     0x78    andi a5,a0,1
    0x840001da     0x7c    beqz a5,ffffffff840001e2 <write_it_asid_pool+0x84>
    0x840001dc     0x7e    li a5,-1
    0x840001de     0x80    slli a5,a5,0x27
    0x840001e0     0x82    or a4,a4,a5
    0x840001e2     0x84    mv a0,a4
    0x840001e4     0x86    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x840001e6     0x88    slli a5,a0,0x19
    0x840001ea     0x8c    srli a5,a5,0x19
    0x840001ec     0x8e    srli a0,a0,0x26
    0x840001ee     0x90    andi a0,a0,1
    0x840001f0     0x92    beqz a0,ffffffff840001f8 <write_it_asid_pool+0x9a>
    0x840001f2     0x94    li a4,-1
    0x840001f4     0x96    slli a4,a4,0x27
    0x840001f6     0x98    or a5,a5,a4
    0x840001f8     0x9a    andi a0,a5,-1024
    0x840001fc     0x9e    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x840001fe     0xa0    andi a5,a0,127
    0x84000202     0xa4    li a4,64
    0x84000206     0xa8    beq a5,a4,ffffffff8400021a <write_it_asid_pool+0xbc>
    0x8400020a     0xac    andi a0,a0,63
    0x8400020e     0xb0    addiw a0,a0,1
    0x84000210     0xb2    li a5,-1
    0x84000212     0xb4    sll a0,a5,a0
    0x84000216     0xb8    and a0,a0,a1
    0x84000218     0xba    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x8400021a     0xbc    li a0,4
    0x8400021c     0xbe    j ffffffff8400020e <write_it_asid_pool+0xb0>
    0x8400021e     0xc0    mv a0,a1
    0x84000220     0xc2    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x84000222     0xc4    srli a1,a1,0x10
    0x84000224     0xc6    slli a0,a1,0x19
    0x84000228     0xca    srli a0,a0,0x19
    0x8400022a     0xcc    srli a1,a1,0x26
    0x8400022c     0xce    andi a1,a1,1
    0x8400022e     0xd0    beqz a1,ffffffff84000296 <write_it_asid_pool+0x138>
    0x84000230     0xd2    li a5,-1
    0x84000232     0xd4    slli a5,a5,0x27
    0x84000234     0xd6    or a0,a0,a5
    0x84000236     0xd8    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x84000238     0xda    li a4,3
    0x8400023a     0xdc    beq a5,a4,ffffffff84000262 <write_it_asid_pool+0x104>
    0x8400023e     0xe0    li a4,13
    0x84000240     0xe2    beq a5,a4,ffffffff84000278 <write_it_asid_pool+0x11a>
    0x84000244     0xe6    li a4,1
    0x84000246     0xe8    li a0,0
    0x84000248     0xea    bne a5,a4,ffffffff84000296 <write_it_asid_pool+0x138>
    0x8400024c     0xee    srli a1,a1,0x9
    0x8400024e     0xf0    slli a0,a1,0x19
    0x84000252     0xf4    srli a0,a0,0x19
    0x84000254     0xf6    srli a1,a1,0x26
    0x84000256     0xf8    andi a1,a1,1
    0x84000258     0xfa    beqz a1,ffffffff84000296 <write_it_asid_pool+0x138>
    0x8400025a     0xfc    li a5,-1
    0x8400025c     0xfe    slli a5,a5,0x27
    0x8400025e    0x100    or a0,a0,a5
    0x84000260    0x102    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x84000262    0x104    srli a1,a1,0x9
    0x84000264    0x106    slli a0,a1,0x19
    0x84000268    0x10a    srli a0,a0,0x19
    0x8400026a    0x10c    srli a1,a1,0x26
    0x8400026c    0x10e    andi a1,a1,1
    0x8400026e    0x110    beqz a1,ffffffff84000296 <write_it_asid_pool+0x138>
    0x84000270    0x112    li a5,-1
    0x84000272    0x114    slli a5,a5,0x27
    0x84000274    0x116    or a0,a0,a5
    0x84000276    0x118    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x84000278    0x11a    slli a0,a0,0x2
    0x8400027a    0x11c    lui a4,0xf8000
    0x8400027e    0x120    srli a4,a4,0x19
    0x84000280    0x122    and a4,a4,a0
    0x84000282    0x124    srli a0,a0,0x26
    0x84000284    0x126    andi a5,a0,1
    0x84000288    0x12a    beqz a5,ffffffff84000290 <write_it_asid_pool+0x132>
    0x8400028a    0x12c    li a5,-1
    0x8400028c    0x12e    slli a5,a5,0x27
    0x8400028e    0x130    or a4,a4,a5
    0x84000290    0x132    mv a0,a4
    0x84000292    0x134    j ffffffff84000296 <write_it_asid_pool+0x138>
    0x84000294    0x136    li a0,0
    0x84000296    0x138    ld a4,0(sp)           ; stack access
    0x84000298    0x13a    ld a1,8(sp)           ; stack access
    0x8400029a    0x13c    srli a3,a4,0x3b
    0x8400029e    0x140    li a5,24
    0x840002a0    0x142    bltu a5,a3,ffffffff8400035e <write_it_asid_pool+0x200>
    0x840002a4    0x146    slli a2,a3,0x2
    0x840002a8    0x14a    auipc a6,0xb
    0x840002ac    0x14e    addi a6,a6,2000 # ffffffff8400ba78 <msgRegisters+0xd0>
    0x840002b0    0x152    add a2,a2,a6
    0x840002b2    0x154    lw a5,0(a2)
    0x840002b4    0x156    add a5,a5,a6
    0x840002b6    0x158    jr a5
    0x840002b8    0x15a    slli a5,a4,0x19
    0x840002bc    0x15e    srli a5,a5,0x19
    0x840002be    0x160    srli a4,a4,0x26
    0x840002c0    0x162    andi a4,a4,1
    0x840002c2    0x164    beqz a4,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840002c4    0x166    li a4,-1
    0x840002c6    0x168    slli a4,a4,0x27
    0x840002c8    0x16a    or a5,a5,a4
    0x840002ca    0x16c    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840002cc    0x16e    slli a5,a4,0x19
    0x840002d0    0x172    srli a5,a5,0x19
    0x840002d2    0x174    srli a4,a4,0x26
    0x840002d4    0x176    andi a4,a4,1
    0x840002d6    0x178    beqz a4,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840002d8    0x17a    li a4,-1
    0x840002da    0x17c    slli a4,a4,0x27
    0x840002dc    0x17e    or a5,a5,a4
    0x840002de    0x180    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840002e0    0x182    slli a5,a4,0x19
    0x840002e4    0x186    srli a5,a5,0x19
    0x840002e6    0x188    srli a4,a4,0x26
    0x840002e8    0x18a    andi a4,a4,1
    0x840002ea    0x18c    beqz a4,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840002ec    0x18e    li a4,-1
    0x840002ee    0x190    slli a4,a4,0x27
    0x840002f0    0x192    or a5,a5,a4
    0x840002f2    0x194    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840002f4    0x196    slli a4,a4,0x1
    0x840002f6    0x198    lui a5,0xfc000
    0x840002fa    0x19c    srli a5,a5,0x19
    0x840002fc    0x19e    and a5,a5,a4
    0x840002fe    0x1a0    srli a4,a4,0x26
    0x84000300    0x1a2    andi a4,a4,1
    0x84000302    0x1a4    beqz a4,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000304    0x1a6    li a4,-1
    0x84000306    0x1a8    slli a4,a4,0x27
    0x84000308    0x1aa    or a5,a5,a4
    0x8400030a    0x1ac    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x8400030c    0x1ae    slli a5,a4,0x19
    0x84000310    0x1b2    srli a5,a5,0x19
    0x84000312    0x1b4    srli a4,a4,0x26
    0x84000314    0x1b6    andi a4,a4,1
    0x84000316    0x1b8    beqz a4,ffffffff8400031e <write_it_asid_pool+0x1c0>
    0x84000318    0x1ba    li a4,-1
    0x8400031a    0x1bc    slli a4,a4,0x27
    0x8400031c    0x1be    or a5,a5,a4
    0x8400031e    0x1c0    andi a5,a5,-1024
    0x84000322    0x1c4    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000324    0x1c6    andi a5,a4,127
    0x84000328    0x1ca    li a3,64
    0x8400032c    0x1ce    beq a5,a3,ffffffff84000340 <write_it_asid_pool+0x1e2>
    0x84000330    0x1d2    andi a4,a4,63
    0x84000334    0x1d6    addiw a4,a4,1
    0x84000336    0x1d8    li a5,-1
    0x84000338    0x1da    sll a5,a5,a4
    0x8400033c    0x1de    and a5,a5,a1
    0x8400033e    0x1e0    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000340    0x1e2    li a4,4
    0x84000342    0x1e4    j ffffffff84000334 <write_it_asid_pool+0x1d6>
    0x84000344    0x1e6    mv a5,a1
    0x84000346    0x1e8    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000348    0x1ea    srli a1,a1,0x10
    0x8400034a    0x1ec    slli a5,a1,0x19
    0x8400034e    0x1f0    srli a5,a5,0x19
    0x84000350    0x1f2    srli a1,a1,0x26
    0x84000352    0x1f4    andi a1,a1,1
    0x84000354    0x1f6    beqz a1,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000356    0x1f8    li a4,-1
    0x84000358    0x1fa    slli a4,a4,0x27
    0x8400035a    0x1fc    or a5,a5,a4
    0x8400035c    0x1fe    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x8400035e    0x200    li a5,3
    0x84000360    0x202    beq a3,a5,ffffffff84000388 <write_it_asid_pool+0x22a>
    0x84000364    0x206    li a5,13
    0x84000366    0x208    beq a3,a5,ffffffff8400039e <write_it_asid_pool+0x240>
    0x8400036a    0x20c    li a4,1
    0x8400036c    0x20e    li a5,0
    0x8400036e    0x210    bne a3,a4,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000372    0x214    srli a1,a1,0x9
    0x84000374    0x216    slli a5,a1,0x19
    0x84000378    0x21a    srli a5,a5,0x19
    0x8400037a    0x21c    srli a1,a1,0x26
    0x8400037c    0x21e    andi a1,a1,1
    0x8400037e    0x220    beqz a1,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000380    0x222    li a4,-1
    0x84000382    0x224    slli a4,a4,0x27
    0x84000384    0x226    or a5,a5,a4
    0x84000386    0x228    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000388    0x22a    srli a1,a1,0x9
    0x8400038a    0x22c    slli a5,a1,0x19
    0x8400038e    0x230    srli a5,a5,0x19
    0x84000390    0x232    srli a1,a1,0x26
    0x84000392    0x234    andi a1,a1,1
    0x84000394    0x236    beqz a1,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x84000396    0x238    li a4,-1
    0x84000398    0x23a    slli a4,a4,0x27
    0x8400039a    0x23c    or a5,a5,a4
    0x8400039c    0x23e    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x8400039e    0x240    slli a4,a4,0x2
    0x840003a0    0x242    lui a5,0xf8000
    0x840003a4    0x246    srli a5,a5,0x19
    0x840003a6    0x248    and a5,a5,a4
    0x840003a8    0x24a    srli a4,a4,0x26
    0x840003aa    0x24c    andi a4,a4,1
    0x840003ac    0x24e    beqz a4,ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840003ae    0x250    li a4,-1
    0x840003b0    0x252    slli a4,a4,0x27
    0x840003b2    0x254    or a5,a5,a4
    0x840003b4    0x256    j ffffffff840003b8 <write_it_asid_pool+0x25a>
    0x840003b6    0x258    li a5,0
    0x840003b8    0x25a    sd a5,8(a0)
    0x840003ba    0x25c    auipc a5,0xc
    0x840003be    0x260    sd a0,1094(a5) # ffffffff8400c800 <riscvKSASIDTable>
    0x840003c2    0x264    addi sp,sp,32
    0x840003c4    0x266    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
243 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 470 nodes.

Section activate_kernel_vspace (88 of 292)
==========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x84000138     0x0    auipc a5,0x22
    0x8400013c     0x4    addi a5,a5,-312 # ffffffff84022000 <kernel_root_pageTable>
    0x84000140     0x8    li a4,1
    0x84000142     0xa    slli a4,a4,0x20
    0x84000144     0xc    add a5,a5,a4
    0x84000146     0xe    srli a5,a5,0xc
    0x84000148    0x10    li a4,-1
    0x8400014a    0x12    srli a3,a4,0x14
    0x8400014e    0x16    and a5,a5,a3
    0x84000150    0x18    slli a4,a4,0x3f
    0x84000152    0x1a    or a5,a5,a4
    0x84000154    0x1c    csrw satp,a5
    0x84000158    0x20    sfence.vma
    0x8400015c    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (89 of 292)
=====================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x84000108     0x0    addi sp,sp,-16
    0x8400010a     0x2    addi a1,a1,-1
    0x8400010c     0x4    srli a4,a1,0x15
    0x84000110     0x8    addi a4,a4,1
    0x84000112     0xa    slli a4,a4,0x15
    0x84000114     0xc    lui a5,0xffe00
    0x84000118    0x10    and a5,a5,a0
    0x8400011a    0x12    sub a4,a4,a5
    0x8400011c    0x14    srli a4,a4,0x15
    0x8400011e    0x16    srli a5,a1,0x1e
    0x84000122    0x1a    addi a5,a5,1
    0x84000124    0x1c    slli a5,a5,0x1e
    0x84000126    0x1e    lui a3,0xc0000
    0x8400012a    0x22    and a0,a0,a3
    0x8400012c    0x24    sub a5,a5,a0
    0x8400012e    0x26    srli a5,a5,0x1e
    0x84000130    0x28    add a0,a4,a5
    0x84000134    0x2c    addi sp,sp,16
    0x84000136    0x2e    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (90 of 292)
================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x840000f2     0x0    addi sp,sp,-16
    0x840000f4     0x2    slli a1,a0,0x9
    0x840000f8     0x6    li a0,1
    0x840000fa     0x8    slli a0,a0,0x3b
    0x840000fc     0xa    lui a5,0xfe000
    0x84000100     0xe    srli a5,a5,0x10
    0x84000102    0x10    and a1,a1,a5
    0x84000104    0x12    addi sp,sp,16
    0x84000106    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section Arch_configureIdleThread (91 of 292)
============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x840000a4     0x0    auipc a5,0x2
    0x840000a8     0x4    addi a5,a5,180 # ffffffff84002158 <idle_thread>
    0x840000ac     0x8    sd a5,272(a0)
    0x840000b0     0xc    li a5,288
    0x840000b4    0x10    sd a5,256(a0)
    0x840000b8    0x14    auipc a5,0x1f
    0x840000bc    0x18    addi a5,a5,-184 # ffffffff8401f000 <tlbLockCount>
    0x840000c0    0x1c    sd a5,8(a0)
    0x840000c2    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (92 of 292)
=================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 43 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    auipc a1,0x2
    0x8400002a     0x4    ld a1,-1326(a1) # ffffffff84001af8 <ndks_boot+0x140>
    0x8400002e     0x8    li a5,1
    0x84000030     0xa    bgeu a5,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000034     0xe    li a4,1
    0x84000036    0x10    auipc a2,0x2
    0x8400003a    0x14    addi a2,a2,-1662 # ffffffff840019b8 <ndks_boot>
    0x8400003e    0x18    auipc a6,0x2
    0x84000042    0x1c    addi a6,a6,-1686 # ffffffff840019a8 <avail_p_regs>
    0x84000046    0x20    j ffffffff84000086 <merge_regions+0x60>
    0x84000048    0x22    slli a5,a4,0x4
    0x8400004c    0x26    add a5,a5,a2
    0x8400004e    0x28    ld a5,8(a5)
    0x84000050    0x2a    slli a0,a0,0x4
    0x84000052    0x2c    add a0,a0,a2
    0x84000054    0x2e    sd a5,8(a0)
    0x84000056    0x30    addi a5,a4,1
    0x8400005a    0x34    bgeu a5,a1,ffffffff84000078 <merge_regions+0x52>
    0x8400005e    0x38    slli a5,a4,0x4
    0x84000062    0x3c    add a5,a5,a2
    0x84000064    0x3e    slli a0,a1,0x4
    0x84000068    0x42    add a0,a0,a6
    0x8400006a    0x44    ld a3,16(a5)
    0x8400006c    0x46    sd a3,0(a5)
    0x8400006e    0x48    ld a3,24(a5)
    0x84000070    0x4a    sd a3,8(a5)
    0x84000072    0x4c    addi a5,a5,16
    0x84000074    0x4e    bne a5,a0,ffffffff8400006a <merge_regions+0x44>
    0x84000078    0x52    addi a1,a1,-1
    0x8400007a    0x54    sd a1,320(a2)
    0x8400007e    0x58    ld a1,320(a2)
    0x84000082    0x5c    bgeu a4,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000086    0x60    addi a0,a4,-1
    0x8400008a    0x64    slli a3,a0,0x4
    0x8400008e    0x68    add a3,a3,a2
    0x84000090    0x6a    slli a5,a4,0x4
    0x84000094    0x6e    add a5,a5,a2
    0x84000096    0x70    ld a3,8(a3)
    0x84000098    0x72    ld a5,0(a5)
    0x8400009a    0x74    beq a3,a5,ffffffff84000048 <merge_regions+0x22>
    0x8400009e    0x78    addi a4,a4,1
    0x840000a0    0x7a    j ffffffff8400007e <merge_regions+0x58>
    0x840000a2    0x7c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 65 nodes.

Section isHighestPrio (93 of 292)
=================================

Deriving specifications
-----------------------

Section `isHighestPrio` consists of 40 instructions.

JAL.
RVC_FTT_FFFFT_____TF.
RVC_FTT_T_________TF.

Stack analysis
---------------

8 stack accesses found. Annotated code for `isHighestPrio`:

    0x8400b0f4     0x0    addi sp,sp,-32
    0x8400b0f6     0x2    sd ra,24(sp)          ; stack access
    0x8400b0f8     0x4    sd s0,16(sp)          ; stack access
    0x8400b0fa     0x6    sd s1,8(sp)           ; stack access
    0x8400b0fc     0x8    sd s2,0(sp)           ; stack access
    0x8400b0fe     0xa    mv s0,a0
    0x8400b100     0xc    slli a4,a0,0x3
    0x8400b104    0x10    auipc a5,0x1
    0x8400b108    0x14    addi a5,a5,1788 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400b10c    0x18    add a5,a5,a4
    0x8400b10e    0x1a    ld a0,1552(a5)
    0x8400b112    0x1e    beqz a0,ffffffff8400b160 <isHighestPrio+0x6c>
    0x8400b114    0x20    mv s1,a1
    0x8400b116    0x22    jal ra,ffffffff8400a66a <__clzdi2>
    0x8400b11a    0x26    mv s2,a0
    0x8400b11c    0x28    slli s0,s0,0x2
    0x8400b11e    0x2a    addi a0,a0,-60
    0x8400b122    0x2e    add s0,s0,a0
    0x8400b124    0x30    slli s0,s0,0x3
    0x8400b126    0x32    auipc a5,0x1
    0x8400b12a    0x36    addi a5,a5,1754 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400b12e    0x3a    add s0,s0,a5
    0x8400b130    0x3c    ld a0,1680(s0)
    0x8400b134    0x40    jal ra,ffffffff8400a66a <__clzdi2>
    0x8400b138    0x44    li a5,63
    0x8400b13c    0x48    sub s2,a5,s2
    0x8400b140    0x4c    slli s2,s2,0x6
    0x8400b142    0x4e    sub a0,a5,a0
    0x8400b146    0x52    or a0,s2,a0
    0x8400b14a    0x56    sltu a0,s1,a0
    0x8400b14e    0x5a    xori a0,a0,1
    0x8400b152    0x5e    sext.w a0,a0
    0x8400b154    0x60    ld ra,24(sp)          ; stack access
    0x8400b156    0x62    ld s0,16(sp)          ; stack access
    0x8400b158    0x64    ld s1,8(sp)           ; stack access
    0x8400b15a    0x66    ld s2,0(sp)           ; stack access
    0x8400b15c    0x68    addi sp,sp,32
    0x8400b15e    0x6a    ret
    0x8400b160    0x6c    li a0,1
    0x8400b162    0x6e    j ffffffff8400b154 <isHighestPrio+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
40 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isHighestPrio` has 55 nodes.

Section scheduleChooseNewThread (94 of 292)
===========================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 39 instructions.

MUL.....

Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleChooseNewThread`:

    0x8400a74e     0x0    addi sp,sp,-16
    0x8400a750     0x2    sd ra,8(sp)           ; stack access
    0x8400a752     0x4    auipc a5,0x15
    0x8400a756     0x8    ld a5,-1858(a5) # ffffffff8401f010 <ksDomainTime>
    0x8400a75a     0xc    beqz a5,ffffffff8400a766 <scheduleChooseNewThread+0x18>
    0x8400a75c     0xe    jal ra,ffffffff8400a6d2 <chooseThread>
    0x8400a760    0x12    ld ra,8(sp)           ; stack access
    0x8400a762    0x14    addi sp,sp,16
    0x8400a764    0x16    ret
    0x8400a766    0x18    auipc a5,0x15
    0x8400a76a    0x1c    ld a5,-1886(a5) # ffffffff8401f008 <ksDomScheduleIdx>
    0x8400a76e    0x20    addi a5,a5,1
    0x8400a770    0x22    li a4,2
    0x8400a772    0x24    bltu a4,a5,ffffffff8400a7c4 <scheduleChooseNewThread+0x76>
    0x8400a776    0x28    auipc a4,0x15
    0x8400a77a    0x2c    sd a5,-1902(a4) # ffffffff8401f008 <ksDomScheduleIdx>
    0x8400a77e    0x30    li a5,1
    0x8400a780    0x32    auipc a4,0x15
    0x8400a784    0x36    sd a5,-1864(a4) # ffffffff8401f038 <ksReprogram>
    0x8400a788    0x3a    auipc a5,0x15
    0x8400a78c    0x3e    sd zero,-1896(a5) # ffffffff8401f020 <ksWorkUnitsCompleted>
    0x8400a790    0x42    auipc a5,0x15
    0x8400a794    0x46    ld a5,-1928(a5) # ffffffff8401f008 <ksDomScheduleIdx>
    0x8400a798    0x4a    slli a4,a5,0x4
    0x8400a79c    0x4e    auipc a5,0x1
    0x8400a7a0    0x52    addi a5,a5,1828 # ffffffff8400bec0 <fault_messages>
    0x8400a7a4    0x56    add a5,a5,a4
    0x8400a7a6    0x58    ld a4,96(a5)
    0x8400a7a8    0x5a    auipc a3,0x15
    0x8400a7ac    0x5e    sd a4,-1936(a3) # ffffffff8401f018 <ksCurDomain>
    0x8400a7b0    0x62    ld a5,104(a5)
    0x8400a7b2    0x64    li a4,1000
    0x8400a7b6    0x68    mul a5,a5,a4
    0x8400a7ba    0x6c    auipc a4,0x15
    0x8400a7be    0x70    sd a5,-1962(a4) # ffffffff8401f010 <ksDomainTime>
    0x8400a7c2    0x74    j ffffffff8400a75c <scheduleChooseNewThread+0xe>
    0x8400a7c4    0x76    auipc a5,0x15
    0x8400a7c8    0x7a    sd zero,-1980(a5) # ffffffff8401f008 <ksDomScheduleIdx>
    0x8400a7cc    0x7e    j ffffffff8400a77e <scheduleChooseNewThread+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 58 nodes.

Section str_to_long (95 of 292)
===============================

Deriving specifications
-----------------------

Section `str_to_long` consists of 44 instructions.

RVC_FTTTFFFTF_____FT.
BGE..
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `str_to_long`:

    0x8400a5f6     0x0    addi sp,sp,-48
    0x8400a5f8     0x2    sd ra,40(sp)          ; stack access
    0x8400a5fa     0x4    sd s0,32(sp)          ; stack access
    0x8400a5fc     0x6    sd s1,24(sp)          ; stack access
    0x8400a5fe     0x8    sd s2,16(sp)          ; stack access
    0x8400a600     0xa    sd s3,8(sp)           ; stack access
    0x8400a602     0xc    mv s1,a0
    0x8400a604     0xe    lbu a0,0(a0)
    0x8400a608    0x12    li a5,48
    0x8400a60c    0x16    li s2,10
    0x8400a60e    0x18    beq a0,a5,ffffffff8400a640 <str_to_long+0x4a>
    0x8400a612    0x1c    lbu a0,0(s1)
    0x8400a616    0x20    beqz a0,ffffffff8400a656 <str_to_long+0x60>
    0x8400a618    0x22    li s0,0
    0x8400a61a    0x24    li s3,-1
    0x8400a61c    0x26    slli s2,s2,0x20
    0x8400a61e    0x28    srli s2,s2,0x20
    0x8400a622    0x2c    jal ra,ffffffff8400a5b6 <char_to_long>
    0x8400a626    0x30    beq a0,s3,ffffffff8400a65c <str_to_long+0x66>
    0x8400a62a    0x34    bge a0,s2,ffffffff8400a65a <str_to_long+0x64>
    0x8400a62e    0x38    mul s0,s2,s0
    0x8400a632    0x3c    add s0,s0,a0
    0x8400a634    0x3e    addi s1,s1,1
    0x8400a636    0x40    lbu a0,0(s1)
    0x8400a63a    0x44    bnez a0,ffffffff8400a622 <str_to_long+0x2c>
    0x8400a63c    0x46    mv a0,s0
    0x8400a63e    0x48    j ffffffff8400a65c <str_to_long+0x66>
    0x8400a640    0x4a    lbu a5,1(s1)
    0x8400a644    0x4e    andi a5,a5,223
    0x8400a648    0x52    li a4,88
    0x8400a64c    0x56    bne a5,a4,ffffffff8400a618 <str_to_long+0x22>
    0x8400a650    0x5a    addi s1,s1,2
    0x8400a652    0x5c    li s2,16
    0x8400a654    0x5e    j ffffffff8400a612 <str_to_long+0x1c>
    0x8400a656    0x60    li a0,-1
    0x8400a658    0x62    j ffffffff8400a65c <str_to_long+0x66>
    0x8400a65a    0x64    li a0,-1
    0x8400a65c    0x66    ld ra,40(sp)          ; stack access
    0x8400a65e    0x68    ld s0,32(sp)          ; stack access
    0x8400a660    0x6a    ld s1,24(sp)          ; stack access
    0x8400a662    0x6c    ld s2,16(sp)          ; stack access
    0x8400a664    0x6e    ld s3,8(sp)           ; stack access
    0x8400a666    0x70    addi sp,sp,48
    0x8400a668    0x72    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 72 nodes.

Section memset (96 of 292)
==========================

Deriving specifications
-----------------------

Section `memset` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `memset`:

    0x8400a542     0x0    addi sp,sp,-16
    0x8400a544     0x2    sd ra,8(sp)           ; stack access
    0x8400a546     0x4    sd s0,0(sp)           ; stack access
    0x8400a548     0x6    mv s0,a0
    0x8400a54a     0x8    mv a4,a1
    0x8400a54c     0xa    mv a1,a2
    0x8400a54e     0xc    or a5,a0,a2
    0x8400a552    0x10    andi a5,a5,7
    0x8400a554    0x12    or a5,a5,a4
    0x8400a556    0x14    bnez a5,ffffffff8400a566 <memset+0x24>
    0x8400a558    0x16    jal ra,ffffffff840092da <memzero>
    0x8400a55c    0x1a    mv a0,s0
    0x8400a55e    0x1c    ld ra,8(sp)           ; stack access
    0x8400a560    0x1e    ld s0,0(sp)           ; stack access
    0x8400a562    0x20    addi sp,sp,16
    0x8400a564    0x22    ret
    0x8400a566    0x24    add a3,a0,a2
    0x8400a56a    0x28    mv a5,a0
    0x8400a56c    0x2a    beqz a2,ffffffff8400a55c <memset+0x1a>
    0x8400a56e    0x2c    sb a4,0(a5)
    0x8400a572    0x30    addi a5,a5,1
    0x8400a574    0x32    bne a3,a5,ffffffff8400a56e <memset+0x2c>
    0x8400a578    0x36    j ffffffff8400a55c <memset+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 36 nodes.

Section Arch_decodeInvocation (97 of 292)
=========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 7 instructions.

RVC_TFFFT____T____TF..

Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_decodeInvocation`:

    0x84009c14    0x0    addi sp,sp,-32
    0x84009c16    0x2    sd ra,24(sp)          ; stack access
    0x84009c18    0x4    mv a6,a7
    0x84009c1a    0x6    jal ra,ffffffff84009358 <decodeRISCVMMUInvocation>
    0x84009c1e    0xa    ld ra,24(sp)          ; stack access
    0x84009c20    0xc    addi sp,sp,32
    0x84009c22    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 11 nodes.

Section invokeTCB_Resume (98 of 292)
====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x84007efc    0x0    addi sp,sp,-16
    0x84007efe    0x2    sd ra,8(sp)           ; stack access
    0x84007f00    0x4    jal ra,ffffffff84005cf0 <restart>
    0x84007f04    0x8    li a0,0
    0x84007f06    0xa    ld ra,8(sp)           ; stack access
    0x84007f08    0xc    addi sp,sp,16
    0x84007f0a    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 11 nodes.

Section invokeTCB_Suspend (99 of 292)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x84007eec    0x0    addi sp,sp,-16
    0x84007eee    0x2    sd ra,8(sp)           ; stack access
    0x84007ef0    0x4    jal ra,ffffffff84005774 <suspend>
    0x84007ef4    0x8    li a0,0
    0x84007ef6    0xa    ld ra,8(sp)           ; stack access
    0x84007ef8    0xc    addi sp,sp,16
    0x84007efa    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section performInvocation_Reply (100 of 292)
============================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x840079c4    0x0    addi sp,sp,-16
    0x840079c6    0x2    sd ra,8(sp)           ; stack access
    0x840079c8    0x4    jal ra,ffffffff840078d4 <doReplyTransfer>
    0x840079cc    0x8    li a0,0
    0x840079ce    0xa    ld ra,8(sp)           ; stack access
    0x840079d0    0xc    addi sp,sp,16
    0x840079d2    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 11 nodes.

Section performInvocation_Endpoint (101 of 292)
===============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x840078ac     0x0    addi sp,sp,-16
    0x840078ae     0x2    sd ra,8(sp)           ; stack access
    0x840078b0     0x4    mv a7,a0
    0x840078b2     0x6    mv t1,a1
    0x840078b4     0x8    mv a0,a4
    0x840078b6     0xa    mv a1,a5
    0x840078b8     0xc    mv a5,a6
    0x840078ba     0xe    auipc a6,0x17
    0x840078be    0x12    ld a6,1950(a6) # ffffffff8401f058 <ksCurThread>
    0x840078c2    0x16    mv a4,a3
    0x840078c4    0x18    mv a3,a2
    0x840078c6    0x1a    mv a2,t1
    0x840078c8    0x1c    jal ra,ffffffff84006c40 <sendIPC>
    0x840078cc    0x20    li a0,0
    0x840078ce    0x22    ld ra,8(sp)           ; stack access
    0x840078d0    0x24    addi sp,sp,16
    0x840078d2    0x26    ret

Proving inst theorems
---------------------

17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 22 nodes.

Section invokeCNodeRevoke (102 of 292)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeRevoke`:

    0x84007438    0x0    addi sp,sp,-16
    0x8400743a    0x2    sd ra,8(sp)           ; stack access
    0x8400743c    0x4    jal ra,ffffffff840073b4 <cteRevoke>
    0x84007440    0x8    ld ra,8(sp)           ; stack access
    0x84007442    0xa    addi sp,sp,16
    0x84007444    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 10 nodes.

Section invokeCNodeDelete (103 of 292)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x840073a4    0x0    addi sp,sp,-16
    0x840073a6    0x2    sd ra,8(sp)           ; stack access
    0x840073a8    0x4    li a1,1
    0x840073aa    0x6    jal ra,ffffffff840071e4 <cteDelete>
    0x840073ae    0xa    ld ra,8(sp)           ; stack access
    0x840073b0    0xc    addi sp,sp,16
    0x840073b2    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 11 nodes.

Section handleTimeout (104 of 292)
==================================

Deriving specifications
-----------------------

Section `handleTimeout` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleTimeout`:

    0x84006eea     0x0    addi sp,sp,-16
    0x84006eec     0x2    sd ra,8(sp)           ; stack access
    0x84006eee     0x4    andi a5,a0,-1024
    0x84006ef2     0x8    li a3,0
    0x84006ef4     0xa    ld a1,128(a5)
    0x84006ef6     0xc    ld a2,136(a5)
    0x84006ef8     0xe    jal ra,ffffffff84006e5a <sendFaultIPC>
    0x84006efc    0x12    ld ra,8(sp)           ; stack access
    0x84006efe    0x14    addi sp,sp,16
    0x84006f00    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleTimeout` has 16 nodes.

Section sendFaultIPC (105 of 292)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 35 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `sendFaultIPC`:

    0x84006e5a     0x0    addi sp,sp,-32
    0x84006e5c     0x2    sd ra,24(sp)          ; stack access
    0x84006e5e     0x4    sd a2,8(sp)           ; stack access
    0x84006e60     0x6    mv a5,a3
    0x84006e62     0x8    srli a3,a1,0x3b
    0x84006e66     0xc    li a4,4
    0x84006e68     0xe    beq a3,a4,ffffffff84006e74 <sendFaultIPC+0x1a>
    0x84006e6c    0x12    li a0,0
    0x84006e6e    0x14    ld ra,24(sp)          ; stack access
    0x84006e70    0x16    addi sp,sp,32
    0x84006e72    0x18    ret
    0x84006e74    0x1a    auipc a4,0x6
    0x84006e78    0x1e    addi a4,a4,-1652 # ffffffff8400c800 <riscvKSASIDTable>
    0x84006e7c    0x22    ld a3,1096(a4)
    0x84006e80    0x26    sd a3,312(a0)
    0x84006e84    0x2a    ld a4,1104(a4)
    0x84006e88    0x2e    sd a4,320(a0)
    0x84006e8c    0x32    srli a3,a1,0x39
    0x84006e90    0x36    andi a3,a3,1
    0x84006e92    0x38    srli a4,a1,0x3a
    0x84006e96    0x3c    andi a4,a4,1
    0x84006e98    0x3e    slli a7,a1,0x19
    0x84006e9c    0x42    srli a7,a7,0x19
    0x84006ea0    0x46    srli a1,a1,0x26
    0x84006ea2    0x48    andi a1,a1,1
    0x84006ea4    0x4a    beqz a1,ffffffff84006eae <sendFaultIPC+0x54>
    0x84006ea6    0x4c    li a1,-1
    0x84006ea8    0x4e    slli a1,a1,0x27
    0x84006eaa    0x50    or a7,a7,a1
    0x84006eae    0x54    mv a6,a0
    0x84006eb0    0x56    li a1,0
    0x84006eb2    0x58    li a0,1
    0x84006eb4    0x5a    jal ra,ffffffff84006c40 <sendIPC>
    0x84006eb8    0x5e    li a0,1
    0x84006eba    0x60    j ffffffff84006e6e <sendFaultIPC+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 48 nodes.

Section lookupExtraCaps (106 of 292)
====================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 56 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84006956     0x0    beqz a1,ffffffff840069bc <lookupExtraCaps+0x66>
    0x84006958     0x2    addi sp,sp,-80
    0x8400695a     0x4    sd ra,72(sp)          ; stack access
    0x8400695c     0x6    sd s0,64(sp)          ; stack access
    0x8400695e     0x8    sd s1,56(sp)          ; stack access
    0x84006960     0xa    sd s2,48(sp)          ; stack access
    0x84006962     0xc    sd s3,40(sp)          ; stack access
    0x84006964     0xe    sd s4,32(sp)          ; stack access
    0x84006966    0x10    sd s5,24(sp)          ; stack access
    0x84006968    0x12    mv s4,a0
    0x8400696a    0x14    srli a2,a2,0x7
    0x8400696c    0x16    andi s3,a2,3
    0x84006970    0x1a    beqz s3,ffffffff840069a8 <lookupExtraCaps+0x52>
    0x84006974    0x1e    addi s0,a1,976
    0x84006978    0x22    auipc s2,0x6
    0x8400697c    0x26    addi s2,s2,1816 # ffffffff8400d090 <current_extra_caps>
    0x84006980    0x2a    li s1,0
    0x84006982    0x2c    ld s5,0(s0)
    0x84006986    0x30    mv a1,s5
    0x84006988    0x32    mv a0,s4
    0x8400698a    0x34    jal ra,ffffffff84003434 <lookupSlot>
    0x8400698e    0x38    sd a1,8(sp)           ; stack access
    0x84006990    0x3a    bnez a0,ffffffff840069c8 <lookupExtraCaps+0x72>
    0x84006992    0x3c    ld a5,8(sp)           ; stack access
    0x84006994    0x3e    sd a5,0(s2)
    0x84006998    0x42    addi s1,s1,1
    0x8400699a    0x44    addi s0,s0,8
    0x8400699c    0x46    addi s2,s2,8
    0x8400699e    0x48    bne s1,s3,ffffffff84006982 <lookupExtraCaps+0x2c>
    0x840069a2    0x4c    li a5,2
    0x840069a4    0x4e    bltu a5,s3,ffffffff840069da <lookupExtraCaps+0x84>
    0x840069a8    0x52    slli s3,s3,0x3
    0x840069aa    0x54    auipc a5,0x7
    0x840069ae    0x58    addi a5,a5,-426 # ffffffff8400d800 <intStateIRQNode>
    0x840069b2    0x5c    add s3,s3,a5
    0x840069b4    0x5e    sd zero,-1904(s3)
    0x840069b8    0x62    li a0,0
    0x840069ba    0x64    j ffffffff840069da <lookupExtraCaps+0x84>
    0x840069bc    0x66    auipc a5,0x6
    0x840069c0    0x6a    sd zero,1748(a5) # ffffffff8400d090 <current_extra_caps>
    0x840069c4    0x6e    li a0,0
    0x840069c6    0x70    ret
    0x840069c8    0x72    auipc a5,0x6
    0x840069cc    0x76    addi a5,a5,-456 # ffffffff8400c800 <riscvKSASIDTable>
    0x840069d0    0x7a    li a4,1
    0x840069d2    0x7c    sd a4,1096(a5)
    0x840069d6    0x80    sd s5,1104(a5)
    0x840069da    0x84    ld ra,72(sp)          ; stack access
    0x840069dc    0x86    ld s0,64(sp)          ; stack access
    0x840069de    0x88    ld s1,56(sp)          ; stack access
    0x840069e0    0x8a    ld s2,48(sp)          ; stack access
    0x840069e2    0x8c    ld s3,40(sp)          ; stack access
    0x840069e4    0x8e    ld s4,32(sp)          ; stack access
    0x840069e6    0x90    ld s5,24(sp)          ; stack access
    0x840069e8    0x92    addi sp,sp,80
    0x840069ea    0x94    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 91 nodes.

Section performInvocation_Notification (107 of 292)
===================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x8400688e    0x0    addi sp,sp,-16
    0x84006890    0x2    sd ra,8(sp)           ; stack access
    0x84006892    0x4    jal ra,ffffffff840065a6 <sendSignal>
    0x84006896    0x8    li a0,0
    0x84006898    0xa    ld ra,8(sp)           ; stack access
    0x8400689a    0xc    addi sp,sp,16
    0x8400689c    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section schedContext_resume (108 of 292)
========================================

Deriving specifications
-----------------------

Section `schedContext_resume` consists of 33 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `schedContext_resume`:

    0x84005c9a     0x0    beqz a0,ffffffff84005cac <schedContext_resume+0x12>
    0x84005c9c     0x2    ld a4,24(a0)
    0x84005c9e     0x4    ld a5,280(a4)
    0x84005ca2     0x8    andi a5,a5,15
    0x84005ca4     0xa    addi a5,a5,-1
    0x84005ca6     0xc    li a3,1
    0x84005ca8     0xe    bgeu a3,a5,ffffffff84005cae <schedContext_resume+0x14>
    0x84005cac    0x12    ret
    0x84005cae    0x14    ld a5,368(a4)
    0x84005cb2    0x18    beqz a5,ffffffff84005cac <schedContext_resume+0x12>
    0x84005cb4    0x1a    ld a5,64(a5)
    0x84005cb6    0x1c    beqz a5,ffffffff84005cac <schedContext_resume+0x12>
    0x84005cb8    0x1e    ld a5,288(a4)
    0x84005cbc    0x22    andi a5,a5,1
    0x84005cbe    0x24    bnez a5,ffffffff84005cac <schedContext_resume+0x12>
    0x84005cc0    0x26    ld a5,72(a0)
    0x84005cc2    0x28    slli a5,a5,0x4
    0x84005cc4    0x2a    addi a4,a0,88
    0x84005cc8    0x2e    add a5,a5,a4
    0x84005cca    0x30    auipc a4,0x19
    0x84005cce    0x34    ld a4,870(a4) # ffffffff8401f030 <ksCurTime>
    0x84005cd2    0x38    addi a4,a4,10
    0x84005cd4    0x3a    ld a3,0(a5)
    0x84005cd6    0x3c    bltu a4,a3,ffffffff84005ce2 <schedContext_resume+0x48>
    0x84005cda    0x40    ld a4,8(a5)
    0x84005cdc    0x42    li a5,19
    0x84005cde    0x44    bltu a5,a4,ffffffff84005cac <schedContext_resume+0x12>
    0x84005ce2    0x48    addi sp,sp,-16
    0x84005ce4    0x4a    sd ra,8(sp)           ; stack access
    0x84005ce6    0x4c    jal ra,ffffffff84005c74 <postpone>
    0x84005cea    0x50    ld ra,8(sp)           ; stack access
    0x84005cec    0x52    addi sp,sp,16
    0x84005cee    0x54    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
33 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_resume` has 61 nodes.

Section deletingIRQHandler (109 of 292)
=======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletingIRQHandler`:

    0x84005be4     0x0    addi sp,sp,-16
    0x84005be6     0x2    sd ra,8(sp)           ; stack access
    0x84005be8     0x4    slli a0,a0,0x5
    0x84005bea     0x6    auipc a5,0x8
    0x84005bee     0xa    addi a5,a5,-1002 # ffffffff8400d800 <intStateIRQNode>
    0x84005bf2     0xe    add a0,a0,a5
    0x84005bf4    0x10    jal ra,ffffffff84005a96 <cteDeleteOne>
    0x84005bf8    0x14    ld ra,8(sp)           ; stack access
    0x84005bfa    0x16    addi sp,sp,16
    0x84005bfc    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 14 nodes.

Section invokeIRQHandler_ClearIRQHandler (110 of 292)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeIRQHandler_ClearIRQHandler`:

    0x84005b00     0x0    addi sp,sp,-16
    0x84005b02     0x2    sd ra,8(sp)           ; stack access
    0x84005b04     0x4    slli a0,a0,0x5
    0x84005b06     0x6    auipc a5,0x8
    0x84005b0a     0xa    addi a5,a5,-774 # ffffffff8400d800 <intStateIRQNode>
    0x84005b0e     0xe    add a0,a0,a5
    0x84005b10    0x10    jal ra,ffffffff84005a96 <cteDeleteOne>
    0x84005b14    0x14    ld ra,8(sp)           ; stack access
    0x84005b16    0x16    addi sp,sp,16
    0x84005b18    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 14 nodes.

Section schedContext_unbindAllTCBs (111 of 292)
===============================================

Deriving specifications
-----------------------

Section `schedContext_unbindAllTCBs` consists of 9 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `schedContext_unbindAllTCBs`:

    0x840057f0     0x0    ld a1,24(a0)
    0x840057f2     0x2    beqz a1,ffffffff84005802 <schedContext_unbindAllTCBs+0x12>
    0x840057f4     0x4    addi sp,sp,-16
    0x840057f6     0x6    sd ra,8(sp)           ; stack access
    0x840057f8     0x8    jal ra,ffffffff840057b8 <schedContext_unbindTCB>
    0x840057fc     0xc    ld ra,8(sp)           ; stack access
    0x840057fe     0xe    addi sp,sp,16
    0x84005800    0x10    ret
    0x84005802    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindAllTCBs` has 17 nodes.

Section reorderNTFN (112 of 292)
================================

Deriving specifications
-----------------------

Section `reorderNTFN` consists of 73 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `reorderNTFN`:

    0x840055ca     0x0    addi sp,sp,-48
    0x840055cc     0x2    sd ra,40(sp)          ; stack access
    0x840055ce     0x4    sd s0,32(sp)          ; stack access
    0x840055d0     0x6    sd s1,24(sp)          ; stack access
    0x840055d2     0x8    mv s1,a0
    0x840055d4     0xa    mv s0,a1
    0x840055d6     0xc    ld a5,8(a0)
    0x840055d8     0xe    slli a1,a5,0x19
    0x840055dc    0x12    srli a1,a1,0x19
    0x840055de    0x14    srli a5,a5,0x26
    0x840055e0    0x16    andi a5,a5,1
    0x840055e2    0x18    beqz a5,ffffffff840055ea <reorderNTFN+0x20>
    0x840055e4    0x1a    li a5,-1
    0x840055e6    0x1c    slli a5,a5,0x27
    0x840055e8    0x1e    or a1,a1,a5
    0x840055ea    0x20    ld a5,0(s1)
    0x840055ec    0x22    srli a2,a5,0x19
    0x840055f0    0x26    bgez a5,ffffffff840055fa <reorderNTFN+0x30>
    0x840055f4    0x2a    li a5,-1
    0x840055f6    0x2c    slli a5,a5,0x27
    0x840055f8    0x2e    or a2,a2,a5
    0x840055fa    0x30    mv a0,s0
    0x840055fc    0x32    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x84005600    0x36    sd a0,0(sp)           ; stack access
    0x84005602    0x38    sd a1,8(sp)           ; stack access
    0x84005604    0x3a    mv a5,a1
    0x84005606    0x3c    bnez a1,ffffffff8400563e <reorderNTFN+0x74>
    0x84005608    0x3e    mv a4,a1
    0x8400560a    0x40    mv a0,s0
    0x8400560c    0x42    mv a2,s0
    0x8400560e    0x44    sd a4,408(s0)
    0x84005612    0x48    sd a5,416(s0)
    0x84005616    0x4c    ld a4,8(s1)
    0x84005618    0x4e    li a3,-1
    0x8400561a    0x50    slli a5,a3,0x27
    0x8400561e    0x54    and a4,a4,a5
    0x84005620    0x56    srli a3,a3,0x19
    0x84005622    0x58    and a0,a0,a3
    0x84005624    0x5a    or a0,a0,a4
    0x84005626    0x5c    sd a0,8(s1)
    0x84005628    0x5e    ld a5,0(s1)
    0x8400562a    0x60    slli a5,a5,0x27
    0x8400562c    0x62    srli a5,a5,0x27
    0x8400562e    0x64    slli a2,a2,0x19
    0x84005630    0x66    or a5,a5,a2
    0x84005632    0x68    sd a5,0(s1)
    0x84005634    0x6a    ld ra,40(sp)          ; stack access
    0x84005636    0x6c    ld s0,32(sp)          ; stack access
    0x84005638    0x6e    ld s1,24(sp)          ; stack access
    0x8400563a    0x70    addi sp,sp,48
    0x8400563c    0x72    ret
    0x8400563e    0x74    ld a2,360(s0)
    0x84005642    0x78    mv a3,a1
    0x84005644    0x7a    li a4,0
    0x84005646    0x7c    ld a5,360(a3) # fffffffff8000168 <ki_end+0x73fdc168>
    0x8400564a    0x80    bltu a5,a2,ffffffff84005662 <reorderNTFN+0x98>
    0x8400564e    0x84    sd s0,408(a3)
    0x84005652    0x88    mv a5,a3
    0x84005654    0x8a    mv a2,s0
    0x84005656    0x8c    beqz a4,ffffffff8400560e <reorderNTFN+0x44>
    0x84005658    0x8e    sd s0,416(a4)
    0x8400565c    0x92    mv a2,a1
    0x8400565e    0x94    mv a5,a3
    0x84005660    0x96    j ffffffff8400560e <reorderNTFN+0x44>
    0x84005662    0x98    ld a5,416(a3)
    0x84005666    0x9c    bnez a5,ffffffff84005670 <reorderNTFN+0xa6>
    0x84005668    0x9e    mv a4,a3
    0x8400566a    0xa0    mv a3,a5
    0x8400566c    0xa2    mv a0,s0
    0x8400566e    0xa4    j ffffffff84005658 <reorderNTFN+0x8e>
    0x84005670    0xa6    mv a4,a3
    0x84005672    0xa8    mv a3,a5
    0x84005674    0xaa    j ffffffff84005646 <reorderNTFN+0x7c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reorderNTFN` has 108 nodes.

Section reorderEP (113 of 292)
==============================

Deriving specifications
-----------------------

Section `reorderEP` consists of 66 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `reorderEP`:

    0x840053ca     0x0    addi sp,sp,-48
    0x840053cc     0x2    sd ra,40(sp)          ; stack access
    0x840053ce     0x4    sd s0,32(sp)          ; stack access
    0x840053d0     0x6    sd s1,24(sp)          ; stack access
    0x840053d2     0x8    mv s1,a0
    0x840053d4     0xa    mv s0,a1
    0x840053d6     0xc    ld a1,8(a0)
    0x840053d8     0xe    ld a5,0(a0)
    0x840053da    0x10    lui a2,0xf8000
    0x840053de    0x14    srli a2,a2,0x19
    0x840053e0    0x16    and a2,a2,a5
    0x840053e2    0x18    srli a5,a5,0x26
    0x840053e4    0x1a    andi a5,a5,1
    0x840053e6    0x1c    beqz a5,ffffffff840053ee <reorderEP+0x24>
    0x840053e8    0x1e    li a5,-1
    0x840053ea    0x20    slli a5,a5,0x27
    0x840053ec    0x22    or a2,a2,a5
    0x840053ee    0x24    mv a0,s0
    0x840053f0    0x26    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x840053f4    0x2a    sd a0,0(sp)           ; stack access
    0x840053f6    0x2c    sd a1,8(sp)           ; stack access
    0x840053f8    0x2e    mv a5,a1
    0x840053fa    0x30    bnez a1,ffffffff8400542c <reorderEP+0x62>
    0x840053fc    0x32    mv a4,a1
    0x840053fe    0x34    mv a0,s0
    0x84005400    0x36    mv a3,s0
    0x84005402    0x38    sd a5,408(s0)
    0x84005406    0x3c    sd a4,416(s0)
    0x8400540a    0x40    sd a0,8(s1)
    0x8400540c    0x42    ld a5,0(s1)
    0x8400540e    0x44    li a4,-1
    0x84005410    0x46    slli a4,a4,0x27
    0x84005412    0x48    addi a4,a4,3
    0x84005414    0x4a    and a5,a5,a4
    0x84005416    0x4c    lui a4,0xf8000
    0x8400541a    0x50    srli a4,a4,0x19
    0x8400541c    0x52    and a3,a3,a4
    0x8400541e    0x54    or a5,a5,a3
    0x84005420    0x56    sd a5,0(s1)
    0x84005422    0x58    ld ra,40(sp)          ; stack access
    0x84005424    0x5a    ld s0,32(sp)          ; stack access
    0x84005426    0x5c    ld s1,24(sp)          ; stack access
    0x84005428    0x5e    addi sp,sp,48
    0x8400542a    0x60    ret
    0x8400542c    0x62    ld a3,360(s0)
    0x84005430    0x66    mv a4,a1
    0x84005432    0x68    li a2,0
    0x84005434    0x6a    ld a5,360(a4) # fffffffff8000168 <ki_end+0x73fdc168>
    0x84005438    0x6e    bltu a5,a3,ffffffff84005450 <reorderEP+0x86>
    0x8400543c    0x72    sd s0,408(a4)
    0x84005440    0x76    mv a5,a2
    0x84005442    0x78    mv a3,s0
    0x84005444    0x7a    beqz a2,ffffffff84005402 <reorderEP+0x38>
    0x84005446    0x7c    sd s0,416(a2) # fffffffff80001a0 <ki_end+0x73fdc1a0>
    0x8400544a    0x80    mv a3,a1
    0x8400544c    0x82    mv a5,a2
    0x8400544e    0x84    j ffffffff84005402 <reorderEP+0x38>
    0x84005450    0x86    ld a5,416(a4)
    0x84005454    0x8a    bnez a5,ffffffff8400545e <reorderEP+0x94>
    0x84005456    0x8c    mv a0,s0
    0x84005458    0x8e    mv a2,a4
    0x8400545a    0x90    mv a4,a5
    0x8400545c    0x92    j ffffffff84005446 <reorderEP+0x7c>
    0x8400545e    0x94    mv a2,a4
    0x84005460    0x96    mv a4,a5
    0x84005462    0x98    j ffffffff84005434 <reorderEP+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reorderEP` has 98 nodes.

Section invokeCNodeCancelBadgedSends (114 of 292)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 18 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x840053a4     0x0    addi sp,sp,-32
    0x840053a6     0x2    sd ra,24(sp)          ; stack access
    0x840053a8     0x4    sd a0,0(sp)           ; stack access
    0x840053aa     0x6    beqz a1,ffffffff840053c2 <invokeCNodeCancelBadgedSends+0x1e>
    0x840053ac     0x8    mv a5,a0
    0x840053ae     0xa    slli a0,a0,0x19
    0x840053b0     0xc    srli a0,a0,0x19
    0x840053b2     0xe    srli a5,a5,0x26
    0x840053b4    0x10    andi a5,a5,1
    0x840053b6    0x12    beqz a5,ffffffff840053be <invokeCNodeCancelBadgedSends+0x1a>
    0x840053b8    0x14    li a5,-1
    0x840053ba    0x16    slli a5,a5,0x27
    0x840053bc    0x18    or a0,a0,a5
    0x840053be    0x1a    jal ra,ffffffff840052b6 <cancelBadgedSends>
    0x840053c2    0x1e    li a0,0
    0x840053c4    0x20    ld ra,24(sp)          ; stack access
    0x840053c6    0x22    addi sp,sp,32
    0x840053c8    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 27 nodes.

Section reply_remove_tcb (115 of 292)
=====================================

Deriving specifications
-----------------------

Section `reply_remove_tcb` consists of 68 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `reply_remove_tcb`:

    0x84004c50     0x0    addi sp,sp,-16
    0x84004c52     0x2    sd ra,8(sp)           ; stack access
    0x84004c54     0x4    ld a4,288(a0)
    0x84004c58     0x8    srli a4,a4,0x1
    0x84004c5a     0xa    lui a5,0xe0000
    0x84004c5e     0xe    srli a5,a5,0x19
    0x84004c60    0x10    and a5,a5,a4
    0x84004c62    0x12    srli a4,a4,0x26
    0x84004c64    0x14    andi a4,a4,1
    0x84004c66    0x16    beqz a4,ffffffff84004c6e <reply_remove_tcb+0x1e>
    0x84004c68    0x18    li a4,-1
    0x84004c6a    0x1a    slli a4,a4,0x27
    0x84004c6c    0x1c    or a5,a5,a4
    0x84004c6e    0x1e    mv a6,a5
    0x84004c70    0x20    ld a1,16(a5)
    0x84004c72    0x22    slli a2,a1,0x19
    0x84004c76    0x26    srli a2,a2,0x19
    0x84004c78    0x28    srli a4,a1,0x26
    0x84004c7c    0x2c    andi a4,a4,1
    0x84004c7e    0x2e    beqz a4,ffffffff84004caa <reply_remove_tcb+0x5a>
    0x84004c80    0x30    li a4,-1
    0x84004c82    0x32    slli a3,a4,0x27
    0x84004c86    0x36    or a2,a2,a3
    0x84004c88    0x38    ld a3,8(a5)
    0x84004c8a    0x3a    srli a5,a4,0x19
    0x84004c8e    0x3e    and a5,a5,a3
    0x84004c90    0x40    srli a3,a3,0x26
    0x84004c92    0x42    andi a3,a3,1
    0x84004c94    0x44    beqz a3,ffffffff84004c9c <reply_remove_tcb+0x4c>
    0x84004c96    0x46    li a4,-1
    0x84004c98    0x48    slli a4,a4,0x27
    0x84004c9a    0x4a    or a5,a5,a4
    0x84004c9c    0x4c    srli a1,a1,0x30
    0x84004c9e    0x4e    andi a1,a1,1
    0x84004ca0    0x50    beqz a1,ffffffff84004cf4 <reply_remove_tcb+0xa4>
    0x84004ca2    0x52    sd zero,32(a2)
    0x84004ca6    0x56    beqz a5,ffffffff84004cc8 <reply_remove_tcb+0x78>
    0x84004ca8    0x58    j ffffffff84004cc4 <reply_remove_tcb+0x74>
    0x84004caa    0x5a    ld a4,8(a5)
    0x84004cac    0x5c    slli a5,a4,0x19
    0x84004cb0    0x60    srli a5,a5,0x19
    0x84004cb2    0x62    srli a4,a4,0x26
    0x84004cb4    0x64    andi a4,a4,1
    0x84004cb6    0x66    bnez a4,ffffffff84004cbc <reply_remove_tcb+0x6c>
    0x84004cb8    0x68    beqz a2,ffffffff84004ca6 <reply_remove_tcb+0x56>
    0x84004cba    0x6a    j ffffffff84004c9c <reply_remove_tcb+0x4c>
    0x84004cbc    0x6c    li a4,-1
    0x84004cbe    0x6e    slli a4,a4,0x27
    0x84004cc0    0x70    or a5,a5,a4
    0x84004cc2    0x72    bnez a2,ffffffff84004c9c <reply_remove_tcb+0x4c>
    0x84004cc4    0x74    sd zero,16(a5) # ffffffffe0000010 <ki_end+0x5bfdc010>
    0x84004cc8    0x78    sd zero,8(a6)
    0x84004ccc    0x7c    sd zero,16(a6)
    0x84004cd0    0x80    ld a0,0(a6)
    0x84004cd4    0x84    ld a4,288(a0)
    0x84004cd8    0x88    li a5,-1
    0x84004cda    0x8a    slli a5,a5,0x28
    0x84004cdc    0x8c    addi a5,a5,31
    0x84004cde    0x8e    and a5,a5,a4
    0x84004ce0    0x90    sd a5,288(a0)
    0x84004ce4    0x94    sd zero,0(a6)
    0x84004ce8    0x98    li a1,0
    0x84004cea    0x9a    jal ra,ffffffff84004a52 <setThreadState>
    0x84004cee    0x9e    ld ra,8(sp)           ; stack access
    0x84004cf0    0xa0    addi sp,sp,16
    0x84004cf2    0xa2    ret
    0x84004cf4    0xa4    sd zero,8(a2)
    0x84004cf8    0xa8    j ffffffff84004ca6 <reply_remove_tcb+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_remove_tcb` has 101 nodes.

Section handleNoFaultHandler (116 of 292)
=========================================

Deriving specifications
-----------------------

Section `handleNoFaultHandler` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleNoFaultHandler`:

    0x84004b34    0x0    addi sp,sp,-16
    0x84004b36    0x2    sd ra,8(sp)           ; stack access
    0x84004b38    0x4    li a1,0
    0x84004b3a    0x6    jal ra,ffffffff84004a52 <setThreadState>
    0x84004b3e    0xa    ld ra,8(sp)           ; stack access
    0x84004b40    0xc    addi sp,sp,16
    0x84004b42    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleNoFaultHandler` has 11 nodes.

Section setThreadState (117 of 292)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setThreadState`:

    0x84004a52     0x0    addi sp,sp,-16
    0x84004a54     0x2    sd ra,8(sp)           ; stack access
    0x84004a56     0x4    ld a5,280(a0)
    0x84004a5a     0x8    andi a5,a5,-16
    0x84004a5c     0xa    andi a1,a1,15
    0x84004a5e     0xc    or a5,a5,a1
    0x84004a60     0xe    sd a5,280(a0)
    0x84004a64    0x12    jal ra,ffffffff84004a0a <scheduleTCB>
    0x84004a68    0x16    ld ra,8(sp)           ; stack access
    0x84004a6a    0x18    addi sp,sp,16
    0x84004a6c    0x1a    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 17 nodes.

Section scheduleTCB (118 of 292)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 26 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleTCB`:

    0x84004a0a     0x0    auipc a5,0x1a
    0x84004a0e     0x4    ld a5,1614(a5) # ffffffff8401f058 <ksCurThread>
    0x84004a12     0x8    beq a5,a0,ffffffff84004a18 <scheduleTCB+0xe>
    0x84004a16     0xc    ret
    0x84004a18     0xe    auipc a5,0x1a
    0x84004a1c    0x12    ld a5,1584(a5) # ffffffff8401f048 <ksSchedulerAction>
    0x84004a20    0x16    bnez a5,ffffffff84004a16 <scheduleTCB+0xc>
    0x84004a22    0x18    ld a5,280(a0)
    0x84004a26    0x1c    andi a5,a5,15
    0x84004a28    0x1e    addi a5,a5,-1
    0x84004a2a    0x20    li a4,1
    0x84004a2c    0x22    bgeu a4,a5,ffffffff84004a3e <scheduleTCB+0x34>
    0x84004a30    0x26    addi sp,sp,-16
    0x84004a32    0x28    sd ra,8(sp)           ; stack access
    0x84004a34    0x2a    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84004a38    0x2e    ld ra,8(sp)           ; stack access
    0x84004a3a    0x30    addi sp,sp,16
    0x84004a3c    0x32    ret
    0x84004a3e    0x34    ld a5,368(a0)
    0x84004a42    0x38    beqz a5,ffffffff84004a30 <scheduleTCB+0x26>
    0x84004a44    0x3a    ld a5,64(a5)
    0x84004a46    0x3c    beqz a5,ffffffff84004a30 <scheduleTCB+0x26>
    0x84004a48    0x3e    ld a5,288(a0)
    0x84004a4c    0x42    andi a5,a5,1
    0x84004a4e    0x44    beqz a5,ffffffff84004a16 <scheduleTCB+0xc>
    0x84004a50    0x46    j ffffffff84004a30 <scheduleTCB+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 49 nodes.

Section rescheduleRequired (119 of 292)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 29 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `rescheduleRequired`:

    0x840049b8     0x0    auipc a0,0x1a
    0x840049bc     0x4    ld a0,1680(a0) # ffffffff8401f048 <ksSchedulerAction>
    0x840049c0     0x8    li a5,1
    0x840049c2     0xa    bgeu a5,a0,ffffffff840049d4 <rescheduleRequired+0x1c>
    0x840049c6     0xe    ld a5,280(a0)
    0x840049ca    0x12    andi a5,a5,15
    0x840049cc    0x14    addi a5,a5,-1
    0x840049ce    0x16    li a4,1
    0x840049d0    0x18    bgeu a4,a5,ffffffff840049e0 <rescheduleRequired+0x28>
    0x840049d4    0x1c    li a5,1
    0x840049d6    0x1e    auipc a4,0x1a
    0x840049da    0x22    sd a5,1650(a4) # ffffffff8401f048 <ksSchedulerAction>
    0x840049de    0x26    ret
    0x840049e0    0x28    ld a5,368(a0)
    0x840049e4    0x2c    beqz a5,ffffffff840049d4 <rescheduleRequired+0x1c>
    0x840049e6    0x2e    ld a5,64(a5)
    0x840049e8    0x30    beqz a5,ffffffff840049d4 <rescheduleRequired+0x1c>
    0x840049ea    0x32    ld a5,288(a0)
    0x840049ee    0x36    andi a5,a5,1
    0x840049f0    0x38    bnez a5,ffffffff840049d4 <rescheduleRequired+0x1c>
    0x840049f2    0x3a    addi sp,sp,-16
    0x840049f4    0x3c    sd ra,8(sp)           ; stack access
    0x840049f6    0x3e    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x840049fa    0x42    li a5,1
    0x840049fc    0x44    auipc a4,0x1a
    0x84004a00    0x48    sd a5,1612(a4) # ffffffff8401f048 <ksSchedulerAction>
    0x84004a04    0x4c    ld ra,8(sp)           ; stack access
    0x84004a06    0x4e    addi sp,sp,16
    0x84004a08    0x50    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 51 nodes.

Section doFaultTransfer (120 of 292)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x8400489c     0x0    addi sp,sp,-32
    0x8400489e     0x2    sd ra,24(sp)          ; stack access
    0x840048a0     0x4    sd s0,16(sp)          ; stack access
    0x840048a2     0x6    sd s1,8(sp)           ; stack access
    0x840048a4     0x8    sd s2,0(sp)           ; stack access
    0x840048a6     0xa    mv s2,a0
    0x840048a8     0xc    mv s1,a1
    0x840048aa     0xe    mv s0,a2
    0x840048ac    0x10    mv a2,a3
    0x840048ae    0x12    mv a1,s0
    0x840048b0    0x14    mv a0,s1
    0x840048b2    0x16    jal ra,ffffffff840047ca <setMRs_fault>
    0x840048b6    0x1a    ld a5,312(s1)
    0x840048ba    0x1e    slli a5,a5,0xc
    0x840048bc    0x20    lui a4,0xf
    0x840048be    0x22    and a5,a5,a4
    0x840048c0    0x24    andi a0,a0,127
    0x840048c4    0x28    or a5,a5,a0
    0x840048c6    0x2a    sd a5,80(s0)
    0x840048c8    0x2c    sd s2,72(s0)
    0x840048cc    0x30    ld ra,24(sp)          ; stack access
    0x840048ce    0x32    ld s0,16(sp)          ; stack access
    0x840048d0    0x34    ld s1,8(sp)           ; stack access
    0x840048d2    0x36    ld s2,0(sp)           ; stack access
    0x840048d4    0x38    addi sp,sp,32
    0x840048d6    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section slotCapLongRunningDelete (121 of 292)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 24 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x840045be     0x0    addi sp,sp,-16
    0x840045c0     0x2    sd ra,8(sp)           ; stack access
    0x840045c2     0x4    sd s0,0(sp)           ; stack access
    0x840045c4     0x6    ld s0,0(a0)
    0x840045c6     0x8    srli s0,s0,0x3b
    0x840045c8     0xa    beqz s0,ffffffff840045e6 <slotCapLongRunningDelete+0x28>
    0x840045ca     0xc    jal ra,ffffffff84004568 <isFinalCapability>
    0x840045ce    0x10    beqz a0,ffffffff840045f0 <slotCapLongRunningDelete+0x32>
    0x840045d0    0x12    addi s0,s0,-10
    0x840045d2    0x14    li a5,8
    0x840045d4    0x16    bltu a5,s0,ffffffff840045f4 <slotCapLongRunningDelete+0x36>
    0x840045d8    0x1a    li a5,1
    0x840045da    0x1c    sll s0,a5,s0
    0x840045de    0x20    andi s0,s0,261
    0x840045e2    0x24    snez s0,s0
    0x840045e6    0x28    mv a0,s0
    0x840045e8    0x2a    ld ra,8(sp)           ; stack access
    0x840045ea    0x2c    ld s0,0(sp)           ; stack access
    0x840045ec    0x2e    addi sp,sp,16
    0x840045ee    0x30    ret
    0x840045f0    0x32    mv s0,a0
    0x840045f2    0x34    j ffffffff840045e6 <slotCapLongRunningDelete+0x28>
    0x840045f4    0x36    li s0,0
    0x840045f6    0x38    j ffffffff840045e6 <slotCapLongRunningDelete+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 37 nodes.

Section isFinalCapability (122 of 292)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 39 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `isFinalCapability`:

    0x84004568     0x0    addi sp,sp,-32
    0x8400456a     0x2    sd ra,24(sp)          ; stack access
    0x8400456c     0x4    sd s0,16(sp)          ; stack access
    0x8400456e     0x6    sd s1,8(sp)           ; stack access
    0x84004570     0x8    mv s0,a0
    0x84004572     0xa    ld a5,16(a0)
    0x84004574     0xc    ld s1,24(a0)
    0x84004576     0xe    beqz a5,ffffffff8400458a <isFinalCapability+0x22>
    0x84004578    0x10    ld a2,0(a0)
    0x8400457a    0x12    ld a3,8(a0)
    0x8400457c    0x14    ld a0,0(a5)
    0x8400457e    0x16    ld a1,8(a5)
    0x84004580    0x18    jal ra,ffffffff84004510 <sameObjectAs>
    0x84004584    0x1c    mv a5,a0
    0x84004586    0x1e    li a0,0
    0x84004588    0x20    bnez a5,ffffffff840045b4 <isFinalCapability+0x4c>
    0x8400458a    0x22    lui a5,0xf8000
    0x8400458e    0x26    srli a5,a5,0x19
    0x84004590    0x28    and a5,a5,s1
    0x84004592    0x2a    srli s1,s1,0x26
    0x84004594    0x2c    andi s1,s1,1
    0x84004596    0x2e    beqz s1,ffffffff840045b0 <isFinalCapability+0x48>
    0x84004598    0x30    li a4,-1
    0x8400459a    0x32    slli a4,a4,0x27
    0x8400459c    0x34    or a5,a5,a4
    0x8400459e    0x36    ld a2,0(a5)
    0x840045a0    0x38    ld a3,8(a5)
    0x840045a2    0x3a    ld a0,0(s0)
    0x840045a4    0x3c    ld a1,8(s0)
    0x840045a6    0x3e    jal ra,ffffffff84004510 <sameObjectAs>
    0x840045aa    0x42    seqz a0,a0
    0x840045ae    0x46    j ffffffff840045b4 <isFinalCapability+0x4c>
    0x840045b0    0x48    li a0,1
    0x840045b2    0x4a    bnez a5,ffffffff8400459e <isFinalCapability+0x36>
    0x840045b4    0x4c    ld ra,24(sp)          ; stack access
    0x840045b6    0x4e    ld s0,16(sp)          ; stack access
    0x840045b8    0x50    ld s1,8(sp)           ; stack access
    0x840045ba    0x52    addi sp,sp,32
    0x840045bc    0x54    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 66 nodes.

Section ensureNoChildren (123 of 292)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 27 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `ensureNoChildren`:

    0x84004466     0x0    ld a5,24(a0)
    0x84004468     0x2    lui a1,0xf8000
    0x8400446c     0x6    srli a1,a1,0x19
    0x8400446e     0x8    and a1,a1,a5
    0x84004470     0xa    srli a5,a5,0x26
    0x84004472     0xc    andi a5,a5,1
    0x84004474     0xe    beqz a5,ffffffff84004490 <ensureNoChildren+0x2a>
    0x84004476    0x10    li a5,-1
    0x84004478    0x12    slli a5,a5,0x27
    0x8400447a    0x14    or a1,a1,a5
    0x8400447c    0x16    addi sp,sp,-16
    0x8400447e    0x18    sd ra,8(sp)           ; stack access
    0x84004480    0x1a    jal ra,ffffffff840043ee <isMDBParentOf>
    0x84004484    0x1e    mv a1,a0
    0x84004486    0x20    bnez a0,ffffffff84004496 <ensureNoChildren+0x30>
    0x84004488    0x22    mv a0,a1
    0x8400448a    0x24    ld ra,8(sp)           ; stack access
    0x8400448c    0x26    addi sp,sp,16
    0x8400448e    0x28    ret
    0x84004490    0x2a    bnez a1,ffffffff8400447c <ensureNoChildren+0x16>
    0x84004492    0x2c    mv a0,a1
    0x84004494    0x2e    ret
    0x84004496    0x30    li a5,9
    0x84004498    0x32    auipc a4,0x8
    0x8400449c    0x36    sd a5,1960(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840044a0    0x3a    li a1,3
    0x840044a2    0x3c    j ffffffff84004488 <ensureNoChildren+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 40 nodes.

Section isMDBParentOf (124 of 292)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isMDBParentOf`:

    0x840043ee     0x0    addi sp,sp,-32
    0x840043f0     0x2    sd ra,24(sp)          ; stack access
    0x840043f2     0x4    sd s0,16(sp)          ; stack access
    0x840043f4     0x6    sd s1,8(sp)           ; stack access
    0x840043f6     0x8    sd s2,0(sp)           ; stack access
    0x840043f8     0xa    ld s0,24(a0)
    0x840043fa     0xc    srli s0,s0,0x1
    0x840043fc     0xe    andi s0,s0,1
    0x840043fe    0x10    beqz s0,ffffffff84004458 <isMDBParentOf+0x6a>
    0x84004400    0x12    mv s1,a0
    0x84004402    0x14    mv s2,a1
    0x84004404    0x16    ld a2,0(a1)
    0x84004406    0x18    ld a3,8(a1)
    0x84004408    0x1a    ld a0,0(a0)
    0x8400440a    0x1c    ld a1,8(s1)
    0x8400440c    0x1e    jal ra,ffffffff84004066 <sameRegionAs>
    0x84004410    0x22    beqz a0,ffffffff84004456 <isMDBParentOf+0x68>
    0x84004412    0x24    ld a5,0(s1)
    0x84004414    0x26    srli a5,a5,0x3b
    0x84004416    0x28    li a4,4
    0x84004418    0x2a    beq a5,a4,ffffffff8400443c <isMDBParentOf+0x4e>
    0x8400441c    0x2e    li a4,6
    0x8400441e    0x30    bne a5,a4,ffffffff84004458 <isMDBParentOf+0x6a>
    0x84004422    0x34    ld a5,8(s1)
    0x84004424    0x36    beqz a5,ffffffff84004458 <isMDBParentOf+0x6a>
    0x84004426    0x38    ld a4,8(s2)
    0x8400442a    0x3c    li s0,0
    0x8400442c    0x3e    bne a5,a4,ffffffff84004458 <isMDBParentOf+0x6a>
    0x84004430    0x42    ld s0,24(s2)
    0x84004434    0x46    xori s0,s0,1
    0x84004438    0x4a    andi s0,s0,1
    0x8400443a    0x4c    j ffffffff84004458 <isMDBParentOf+0x6a>
    0x8400443c    0x4e    ld a5,8(s1)
    0x8400443e    0x50    beqz a5,ffffffff84004458 <isMDBParentOf+0x6a>
    0x84004440    0x52    ld a4,8(s2)
    0x84004444    0x56    li s0,0
    0x84004446    0x58    bne a4,a5,ffffffff84004458 <isMDBParentOf+0x6a>
    0x8400444a    0x5c    ld s0,24(s2)
    0x8400444e    0x60    xori s0,s0,1
    0x84004452    0x64    andi s0,s0,1
    0x84004454    0x66    j ffffffff84004458 <isMDBParentOf+0x6a>
    0x84004456    0x68    mv s0,a0
    0x84004458    0x6a    mv a0,s0
    0x8400445a    0x6c    ld ra,24(sp)          ; stack access
    0x8400445c    0x6e    ld s0,16(sp)          ; stack access
    0x8400445e    0x70    ld s1,8(sp)           ; stack access
    0x84004460    0x72    ld s2,0(sp)           ; stack access
    0x84004462    0x74    addi sp,sp,32
    0x84004464    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 87 nodes.

Section emptySlot (125 of 292)
==============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 55 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `emptySlot`:

    0x84003f12     0x0    addi sp,sp,-32
    0x84003f14     0x2    sd ra,24(sp)          ; stack access
    0x84003f16     0x4    sd a1,0(sp)           ; stack access
    0x84003f18     0x6    sd a2,8(sp)           ; stack access
    0x84003f1a     0x8    ld a5,0(a0)
    0x84003f1c     0xa    srli a5,a5,0x3b
    0x84003f1e     0xc    beqz a5,ffffffff84003f64 <emptySlot+0x52>
    0x84003f20     0xe    ld a2,16(a0)
    0x84003f22    0x10    ld a4,24(a0)
    0x84003f24    0x12    lui a5,0xf8000
    0x84003f28    0x16    srli a5,a5,0x19
    0x84003f2a    0x18    and a5,a5,a4
    0x84003f2c    0x1a    srli a3,a4,0x26
    0x84003f30    0x1e    andi a3,a3,1
    0x84003f32    0x20    beqz a3,ffffffff84003f6a <emptySlot+0x58>
    0x84003f34    0x22    li a3,-1
    0x84003f36    0x24    slli a3,a3,0x27
    0x84003f38    0x26    or a5,a5,a3
    0x84003f3a    0x28    bnez a2,ffffffff84003f6c <emptySlot+0x5a>
    0x84003f3c    0x2a    sd a2,16(a5)
    0x84003f3e    0x2c    ld a3,24(a5)
    0x84003f40    0x2e    or a4,a4,a3
    0x84003f42    0x30    andi a4,a4,1
    0x84003f44    0x32    andi a3,a3,-2
    0x84003f46    0x34    or a4,a4,a3
    0x84003f48    0x36    sd a4,24(a5)
    0x84003f4a    0x38    sd zero,0(a0)
    0x84003f4e    0x3c    sd zero,8(a0)
    0x84003f52    0x40    sd zero,16(a0)
    0x84003f56    0x44    sd zero,24(a0)
    0x84003f5a    0x48    ld a5,0(sp)           ; stack access
    0x84003f5c    0x4a    srli a5,a5,0x3b
    0x84003f5e    0x4c    li a4,16
    0x84003f60    0x4e    beq a5,a4,ffffffff84003f86 <emptySlot+0x74>
    0x84003f64    0x52    ld ra,24(sp)          ; stack access
    0x84003f66    0x54    addi sp,sp,32
    0x84003f68    0x56    ret
    0x84003f6a    0x58    beqz a2,ffffffff84003f82 <emptySlot+0x70>
    0x84003f6c    0x5a    ld a3,24(a2)
    0x84003f6e    0x5c    li a1,-1
    0x84003f70    0x5e    slli a1,a1,0x27
    0x84003f72    0x60    addi a1,a1,3
    0x84003f74    0x62    and a3,a3,a1
    0x84003f76    0x64    lui a1,0xf8000
    0x84003f7a    0x68    srli a1,a1,0x19
    0x84003f7c    0x6a    and a1,a1,a5
    0x84003f7e    0x6c    or a3,a3,a1
    0x84003f80    0x6e    sd a3,24(a2)
    0x84003f82    0x70    beqz a5,ffffffff84003f4a <emptySlot+0x38>
    0x84003f84    0x72    j ffffffff84003f3c <emptySlot+0x2a>
    0x84003f86    0x74    ld a0,8(sp)           ; stack access
    0x84003f88    0x76    slli a0,a0,0x34
    0x84003f8a    0x78    srli a0,a0,0x34
    0x84003f8c    0x7a    jal ra,ffffffff84003f00 <deletedIRQHandler>
    0x84003f90    0x7e    j ffffffff84003f64 <emptySlot+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 87 nodes.

Section deletedIRQHandler (126 of 292)
======================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletedIRQHandler`:

    0x84003f00     0x0    addi sp,sp,-16
    0x84003f02     0x2    sd ra,8(sp)           ; stack access
    0x84003f04     0x4    mv a1,a0
    0x84003f06     0x6    li a0,0
    0x84003f08     0x8    jal ra,ffffffff84003e60 <setIRQState>
    0x84003f0c     0xc    ld ra,8(sp)           ; stack access
    0x84003f0e     0xe    addi sp,sp,16
    0x84003f10    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 12 nodes.

Section capSwapForDelete (127 of 292)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 14 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `capSwapForDelete`:

    0x84003d32     0x0    beq a0,a1,ffffffff84003d50 <capSwapForDelete+0x1e>
    0x84003d36     0x4    addi sp,sp,-48
    0x84003d38     0x6    sd ra,40(sp)          ; stack access
    0x84003d3a     0x8    mv a2,a0
    0x84003d3c     0xa    mv a5,a1
    0x84003d3e     0xc    ld a3,0(a1)
    0x84003d40     0xe    ld a4,8(a1)
    0x84003d42    0x10    ld a0,0(a0)
    0x84003d44    0x12    ld a1,8(a2)
    0x84003d46    0x14    jal ra,ffffffff84003c5e <cteSwap>
    0x84003d4a    0x18    ld ra,40(sp)          ; stack access
    0x84003d4c    0x1a    addi sp,sp,48
    0x84003d4e    0x1c    ret
    0x84003d50    0x1e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 25 nodes.

Section invokeCNodeMove (128 of 292)
====================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x84003c4e    0x0    addi sp,sp,-32
    0x84003c50    0x2    sd ra,24(sp)          ; stack access
    0x84003c52    0x4    jal ra,ffffffff84003bf6 <cteMove>
    0x84003c56    0x8    li a0,0
    0x84003c58    0xa    ld ra,24(sp)          ; stack access
    0x84003c5a    0xc    addi sp,sp,32
    0x84003c5c    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 11 nodes.

Section invokeCNodeInsert (129 of 292)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x84003be6    0x0    addi sp,sp,-32
    0x84003be8    0x2    sd ra,24(sp)          ; stack access
    0x84003bea    0x4    jal ra,ffffffff84003aba <cteInsert>
    0x84003bee    0x8    li a0,0
    0x84003bf0    0xa    ld ra,24(sp)          ; stack access
    0x84003bf2    0xc    addi sp,sp,32
    0x84003bf4    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section switchToIdleThread (130 of 292)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `switchToIdleThread`:

    0x84003a3e     0x0    addi sp,sp,-16
    0x84003a40     0x2    sd ra,8(sp)           ; stack access
    0x84003a42     0x4    jal ra,ffffffff84002c74 <Arch_switchToIdleThread>
    0x84003a46     0x8    auipc a5,0x1b
    0x84003a4a     0xc    ld a5,1546(a5) # ffffffff8401f050 <ksIdleThread>
    0x84003a4e    0x10    auipc a4,0x1b
    0x84003a52    0x14    sd a5,1546(a4) # ffffffff8401f058 <ksCurThread>
    0x84003a56    0x18    ld ra,8(sp)           ; stack access
    0x84003a58    0x1a    addi sp,sp,16
    0x84003a5a    0x1c    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 16 nodes.

Section refill_budget_check (131 of 292)
========================================

Deriving specifications
-----------------------

Section `refill_budget_check` consists of 145 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `refill_budget_check`:

    0x84003850      0x0    addi sp,sp,-32
    0x84003852      0x2    sd ra,24(sp)          ; stack access
    0x84003854      0x4    sd s0,16(sp)          ; stack access
    0x84003856      0x6    sd s1,8(sp)           ; stack access
    0x84003858      0x8    auipc s0,0x1b
    0x8400385c      0xc    ld s0,2000(s0) # ffffffff8401f028 <ksCurSC>
    0x84003860     0x10    ld a3,72(s0)
    0x84003862     0x12    addi s1,s0,88
    0x84003866     0x16    slli a5,a3,0x4
    0x8400386a     0x1a    add a5,a5,s1
    0x8400386c     0x1c    ld a4,8(a5)
    0x8400386e     0x1e    bltu a0,a4,ffffffff8400395a <refill_budget_check+0x10a>
    0x84003872     0x22    li a7,0
    0x84003874     0x24    li t1,19
    0x84003876     0x26    j ffffffff840038d6 <refill_budget_check+0x86>
    0x84003878     0x28    ld a5,0(a5)
    0x8400387a     0x2a    ld a1,64(s0)
    0x8400387c     0x2c    addi a1,a1,-1
    0x8400387e     0x2e    mv a6,a7
    0x84003880     0x30    beq a1,a3,ffffffff84003888 <refill_budget_check+0x38>
    0x84003884     0x34    addi a6,a3,1
    0x84003888     0x38    sd a6,72(s0)
    0x8400388c     0x3c    ld a3,0(s0)
    0x8400388e     0x3e    add a5,a5,a3
    0x84003890     0x40    bltu t1,a4,ffffffff840038b4 <refill_budget_check+0x64>
    0x84003894     0x44    beq a2,a6,ffffffff840038b4 <refill_budget_check+0x64>
    0x84003898     0x48    slli a2,a2,0x4
    0x8400389a     0x4a    add a2,a2,s1
    0x8400389c     0x4c    ld a3,8(a2)
    0x8400389e     0x4e    add a4,a4,a3
    0x840038a0     0x50    sd a4,8(a2)
    0x840038a2     0x52    ld a4,80(s0)
    0x840038a4     0x54    slli a4,a4,0x4
    0x840038a6     0x56    add a4,a4,s1
    0x840038a8     0x58    ld a3,0(a4)
    0x840038aa     0x5a    bgeu a3,a5,ffffffff840038b0 <refill_budget_check+0x60>
    0x840038ae     0x5e    mv a3,a5
    0x840038b0     0x60    sd a3,0(a4)
    0x840038b2     0x62    j ffffffff840038c8 <refill_budget_check+0x78>
    0x840038b4     0x64    slli a3,a2,0x4
    0x840038b8     0x68    add a3,a3,s1
    0x840038ba     0x6a    ld a6,0(a3)
    0x840038be     0x6e    bltu a6,a5,ffffffff840038e8 <refill_budget_check+0x98>
    0x840038c2     0x72    ld a5,8(a3)
    0x840038c4     0x74    add a4,a4,a5
    0x840038c6     0x76    sd a4,8(a3)
    0x840038c8     0x78    ld a3,72(s0)
    0x840038ca     0x7a    slli a5,a3,0x4
    0x840038ce     0x7e    add a5,a5,s1
    0x840038d0     0x80    ld a4,8(a5)
    0x840038d2     0x82    bltu a0,a4,ffffffff840038fe <refill_budget_check+0xae>
    0x840038d6     0x86    sub a0,a0,a4
    0x840038d8     0x88    ld a2,80(s0)
    0x840038da     0x8a    bne a2,a3,ffffffff84003878 <refill_budget_check+0x28>
    0x840038de     0x8e    ld a4,0(a5)
    0x840038e0     0x90    ld a3,0(s0)
    0x840038e2     0x92    add a4,a4,a3
    0x840038e4     0x94    sd a4,0(a5)
    0x840038e6     0x96    j ffffffff840038c8 <refill_budget_check+0x78>
    0x840038e8     0x98    mv a3,a7
    0x840038ea     0x9a    beq a2,a1,ffffffff840038f2 <refill_budget_check+0xa2>
    0x840038ee     0x9e    addi a3,a2,1
    0x840038f2     0xa2    sd a3,80(s0)
    0x840038f4     0xa4    slli a3,a3,0x4
    0x840038f6     0xa6    add a3,a3,s1
    0x840038f8     0xa8    sd a5,0(a3)
    0x840038fa     0xaa    sd a4,8(a3)
    0x840038fc     0xac    j ffffffff840038c8 <refill_budget_check+0x78>
    0x840038fe     0xae    beqz a0,ffffffff84003936 <refill_budget_check+0xe6>
    0x84003900     0xb0    ld a4,0(a5)
    0x84003902     0xb2    add a4,a4,a0
    0x84003904     0xb4    sd a4,0(a5)
    0x84003906     0xb6    ld a5,72(s0)
    0x84003908     0xb8    ld a4,80(s0)
    0x8400390a     0xba    beq a5,a4,ffffffff84003936 <refill_budget_check+0xe6>
    0x8400390e     0xbe    slli a4,a5,0x4
    0x84003912     0xc2    add a4,a4,s1
    0x84003914     0xc4    ld a2,0(a4)
    0x84003916     0xc6    ld a1,8(a4)
    0x84003918     0xc8    add a6,a2,a1
    0x8400391c     0xcc    ld a4,64(s0)
    0x8400391e     0xce    addi a4,a4,-1
    0x84003920     0xd0    li a3,0
    0x84003922     0xd2    beq a5,a4,ffffffff8400392a <refill_budget_check+0xda>
    0x84003926     0xd6    addi a3,a5,1
    0x8400392a     0xda    slli a5,a3,0x4
    0x8400392e     0xde    add a5,a5,s1
    0x84003930     0xe0    ld a4,0(a5)
    0x84003932     0xe2    bgeu a6,a4,ffffffff84003948 <refill_budget_check+0xf8>
    0x84003936     0xe6    ld a5,72(s0)
    0x84003938     0xe8    slli a5,a5,0x4
    0x8400393a     0xea    add a5,a5,s1
    0x8400393c     0xec    ld a4,8(a5)
    0x8400393e     0xee    bltu a0,a4,ffffffff8400395a <refill_budget_check+0x10a>
    0x84003942     0xf2    li a1,19
    0x84003944     0xf4    li a0,0
    0x84003946     0xf6    j ffffffff84003994 <refill_budget_check+0x144>
    0x84003948     0xf8    sd a3,72(s0)
    0x8400394a     0xfa    ld a4,8(a5)
    0x8400394c     0xfc    add a1,a1,a4
    0x8400394e     0xfe    sd a1,8(a5)
    0x84003950    0x100    ld a5,72(s0)
    0x84003952    0x102    slli a5,a5,0x4
    0x84003954    0x104    add a5,a5,s1
    0x84003956    0x106    sd a2,0(a5)
    0x84003958    0x108    j ffffffff84003936 <refill_budget_check+0xe6>
    0x8400395a    0x10a    auipc a4,0x1b
    0x8400395e    0x10e    ld a4,1750(a4) # ffffffff8401f030 <ksCurTime>
    0x84003962    0x112    addi a4,a4,10
    0x84003964    0x114    ld a5,0(a5)
    0x84003966    0x116    bltu a4,a5,ffffffff84003942 <refill_budget_check+0xf2>
    0x8400396a    0x11a    jal ra,ffffffff840036d2 <refill_split_check>
    0x8400396e    0x11e    j ffffffff84003942 <refill_budget_check+0xf2>
    0x84003970    0x120    addi a5,a5,1
    0x84003972    0x122    sub a5,a5,a4
    0x84003974    0x124    ld a3,64(s0)
    0x84003976    0x126    bne a3,a5,ffffffff840039b2 <refill_budget_check+0x162>
    0x8400397a    0x12a    ld a3,64(s0)
    0x8400397c    0x12c    addi a3,a3,-1
    0x8400397e    0x12e    mv a5,a0
    0x84003980    0x130    beq a4,a3,ffffffff84003988 <refill_budget_check+0x138>
    0x84003984    0x134    addi a5,a4,1
    0x84003988    0x138    sd a5,72(s0)
    0x8400398a    0x13a    slli a5,a5,0x4
    0x8400398c    0x13c    add a5,a5,s1
    0x8400398e    0x13e    ld a4,8(a5)
    0x84003990    0x140    add a4,a4,a2
    0x84003992    0x142    sd a4,8(a5)
    0x84003994    0x144    ld a4,72(s0)
    0x84003996    0x146    slli a5,a4,0x4
    0x8400399a    0x14a    add a5,a5,s1
    0x8400399c    0x14c    ld a2,8(a5)
    0x8400399e    0x14e    bgeu a1,a2,ffffffff8400397a <refill_budget_check+0x12a>
    0x840039a2    0x152    ld a5,80(s0)
    0x840039a4    0x154    bgeu a5,a4,ffffffff84003970 <refill_budget_check+0x120>
    0x840039a8    0x158    ld a3,64(s0)
    0x840039aa    0x15a    add a5,a5,a3
    0x840039ac    0x15c    addi a5,a5,1
    0x840039ae    0x15e    sub a5,a5,a4
    0x840039b0    0x160    j ffffffff84003974 <refill_budget_check+0x124>
    0x840039b2    0x162    ld ra,24(sp)          ; stack access
    0x840039b4    0x164    ld s0,16(sp)          ; stack access
    0x840039b6    0x166    ld s1,8(sp)           ; stack access
    0x840039b8    0x168    addi sp,sp,32
    0x840039ba    0x16a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
145 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_budget_check` has 241 nodes.

Section lookupPivotSlot (132 of 292)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupPivotSlot`:

    0x840035d2     0x0    addi sp,sp,-48
    0x840035d4     0x2    sd ra,40(sp)          ; stack access
    0x840035d6     0x4    mv a5,a1
    0x840035d8     0x6    mv a4,a3
    0x840035da     0x8    mv a3,a2
    0x840035dc     0xa    mv a1,a0
    0x840035de     0xc    mv a2,a5
    0x840035e0     0xe    li a0,1
    0x840035e2    0x10    jal ra,ffffffff840034ce <lookupSlotForCNodeOp>
    0x840035e6    0x14    ld ra,40(sp)          ; stack access
    0x840035e8    0x16    addi sp,sp,48
    0x840035ea    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 16 nodes.

Section lookupTargetSlot (133 of 292)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupTargetSlot`:

    0x840035b8     0x0    addi sp,sp,-48
    0x840035ba     0x2    sd ra,40(sp)          ; stack access
    0x840035bc     0x4    mv a5,a1
    0x840035be     0x6    mv a4,a3
    0x840035c0     0x8    mv a3,a2
    0x840035c2     0xa    mv a1,a0
    0x840035c4     0xc    mv a2,a5
    0x840035c6     0xe    li a0,0
    0x840035c8    0x10    jal ra,ffffffff840034ce <lookupSlotForCNodeOp>
    0x840035cc    0x14    ld ra,40(sp)          ; stack access
    0x840035ce    0x16    addi sp,sp,48
    0x840035d0    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 16 nodes.

Section lookupSourceSlot (134 of 292)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupSourceSlot`:

    0x8400359e     0x0    addi sp,sp,-48
    0x840035a0     0x2    sd ra,40(sp)          ; stack access
    0x840035a2     0x4    mv a5,a1
    0x840035a4     0x6    mv a4,a3
    0x840035a6     0x8    mv a3,a2
    0x840035a8     0xa    mv a1,a0
    0x840035aa     0xc    mv a2,a5
    0x840035ac     0xe    li a0,1
    0x840035ae    0x10    jal ra,ffffffff840034ce <lookupSlotForCNodeOp>
    0x840035b2    0x14    ld ra,40(sp)          ; stack access
    0x840035b4    0x16    addi sp,sp,48
    0x840035b6    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 16 nodes.

Section lookupSlotForCNodeOp (135 of 292)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 75 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

23 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x840034ce     0x0    addi sp,sp,-80
    0x840034d0     0x2    sd ra,72(sp)          ; stack access
    0x840034d2     0x4    sd s0,64(sp)          ; stack access
    0x840034d4     0x6    mv s0,a0
    0x840034d6     0x8    sd a1,0(sp)           ; stack access
    0x840034d8     0xa    sd a2,8(sp)           ; stack access
    0x840034da     0xc    srli a1,a1,0x3b
    0x840034dc     0xe    li a5,10
    0x840034de    0x10    bne a1,a5,ffffffff84003512 <lookupSlotForCNodeOp+0x44>
    0x840034e2    0x14    addi a5,a4,-1
    0x840034e6    0x18    li a2,63
    0x840034ea    0x1c    bltu a2,a5,ffffffff84003534 <lookupSlotForCNodeOp+0x66>
    0x840034ee    0x20    ld a1,0(sp)           ; stack access
    0x840034f0    0x22    ld a2,8(sp)           ; stack access
    0x840034f2    0x24    addi a0,sp,24
    0x840034f4    0x26    jal ra,ffffffff84003306 <resolveAddressBits>
    0x840034f8    0x2a    ld a5,40(sp)          ; stack access
    0x840034fa    0x2c    ld a4,24(sp)          ; stack access
    0x840034fc    0x2e    bnez a4,ffffffff84003558 <lookupSlotForCNodeOp+0x8a>
    0x840034fe    0x30    bnez a5,ffffffff84003572 <lookupSlotForCNodeOp+0xa4>
    0x84003500    0x32    sd zero,48(sp)        ; stack access
    0x84003502    0x34    ld a5,32(sp)          ; stack access
    0x84003504    0x36    sd a5,56(sp)          ; stack access
    0x84003506    0x38    ld a0,48(sp)          ; stack access
    0x84003508    0x3a    ld a1,56(sp)          ; stack access
    0x8400350a    0x3c    ld ra,72(sp)          ; stack access
    0x8400350c    0x3e    ld s0,64(sp)          ; stack access
    0x8400350e    0x40    addi sp,sp,80
    0x84003510    0x42    ret
    0x84003512    0x44    auipc a5,0x9
    0x84003516    0x48    addi a5,a5,750 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400351a    0x4c    li a4,6
    0x8400351c    0x4e    sd a4,1088(a5)
    0x84003520    0x52    sd a0,1080(a5)
    0x84003524    0x56    sd zero,1024(a5)
    0x84003528    0x5a    sd zero,1032(a5)
    0x8400352c    0x5e    li a5,3
    0x8400352e    0x60    sd a5,48(sp)          ; stack access
    0x84003530    0x62    sd zero,56(sp)        ; stack access
    0x84003532    0x64    j ffffffff84003506 <lookupSlotForCNodeOp+0x38>
    0x84003534    0x66    auipc a5,0x9
    0x84003538    0x6a    addi a5,a5,716 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400353c    0x6e    li a4,4
    0x8400353e    0x70    sd a4,1088(a5)
    0x84003542    0x74    li a4,1
    0x84003544    0x76    sd a4,1056(a5)
    0x84003548    0x7a    li a4,64
    0x8400354c    0x7e    sd a4,1064(a5)
    0x84003550    0x82    li a5,3
    0x84003552    0x84    sd a5,48(sp)          ; stack access
    0x84003554    0x86    sd zero,56(sp)        ; stack access
    0x84003556    0x88    j ffffffff84003506 <lookupSlotForCNodeOp+0x38>
    0x84003558    0x8a    auipc a5,0x9
    0x8400355c    0x8e    addi a5,a5,680 # ffffffff8400c800 <riscvKSASIDTable>
    0x84003560    0x92    li a4,6
    0x84003562    0x94    sd a4,1088(a5)
    0x84003566    0x98    sd s0,1080(a5)
    0x8400356a    0x9c    li a5,3
    0x8400356c    0x9e    sd a5,48(sp)          ; stack access
    0x8400356e    0xa0    sd zero,56(sp)        ; stack access
    0x84003570    0xa2    j ffffffff84003506 <lookupSlotForCNodeOp+0x38>
    0x84003572    0xa4    auipc a4,0x9
    0x84003576    0xa8    addi a4,a4,654 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400357a    0xac    li a3,6
    0x8400357c    0xae    sd a3,1088(a4)
    0x84003580    0xb2    sd s0,1080(a4)
    0x84003584    0xb6    slli a5,a5,0x2
    0x84003586    0xb8    andi a5,a5,508
    0x8400358a    0xbc    ori a5,a5,2
    0x8400358e    0xc0    sd a5,1024(a4)
    0x84003592    0xc4    sd zero,1032(a4)
    0x84003596    0xc8    li a5,3
    0x84003598    0xca    sd a5,48(sp)          ; stack access
    0x8400359a    0xcc    sd zero,56(sp)        ; stack access
    0x8400359c    0xce    j ffffffff84003506 <lookupSlotForCNodeOp+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 121 nodes.

Section lookupCapAndSlot (136 of 292)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 26 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x84003490     0x0    addi sp,sp,-32
    0x84003492     0x2    sd ra,24(sp)          ; stack access
    0x84003494     0x4    sd s0,16(sp)          ; stack access
    0x84003496     0x6    mv s0,a0
    0x84003498     0x8    mv a0,a1
    0x8400349a     0xa    mv a1,a2
    0x8400349c     0xc    jal ra,ffffffff84003434 <lookupSlot>
    0x840034a0    0x10    sd a0,0(sp)           ; stack access
    0x840034a2    0x12    sd a1,8(sp)           ; stack access
    0x840034a4    0x14    bnez a0,ffffffff840034be <lookupCapAndSlot+0x2e>
    0x840034a6    0x16    ld a4,0(a1)
    0x840034a8    0x18    ld a5,8(a1)
    0x840034aa    0x1a    sd zero,0(s0)         ; stack access
    0x840034ae    0x1e    sd a4,8(s0)           ; stack access
    0x840034b0    0x20    sd a5,16(s0)          ; stack access
    0x840034b2    0x22    sd a1,24(s0)          ; stack access
    0x840034b4    0x24    mv a0,s0
    0x840034b6    0x26    ld ra,24(sp)          ; stack access
    0x840034b8    0x28    ld s0,16(sp)          ; stack access
    0x840034ba    0x2a    addi sp,sp,32
    0x840034bc    0x2c    ret
    0x840034be    0x2e    sd a0,0(s0)           ; stack access
    0x840034c0    0x30    sd zero,8(s0)         ; stack access
    0x840034c4    0x34    sd zero,16(s0)        ; stack access
    0x840034c8    0x38    sd zero,24(s0)        ; stack access
    0x840034cc    0x3c    j ffffffff840034b4 <lookupCapAndSlot+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 46 nodes.

Section lookupCap (137 of 292)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 25 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
13 stack accesses found. Annotated code for `lookupCap`:

    0x84003456     0x0    addi sp,sp,-32
    0x84003458     0x2    sd ra,24(sp)          ; stack access
    0x8400345a     0x4    sd s0,16(sp)          ; stack access
    0x8400345c     0x6    mv s0,a0
    0x8400345e     0x8    mv a0,a1
    0x84003460     0xa    mv a1,a2
    0x84003462     0xc    jal ra,ffffffff84003434 <lookupSlot>
    0x84003466    0x10    sd a0,0(sp)           ; stack access
    0x84003468    0x12    sd a1,8(sp)           ; stack access
    0x8400346a    0x14    bnez a0,ffffffff84003484 <lookupCap+0x2e>
    0x8400346c    0x16    ld a5,8(sp)           ; stack access
    0x8400346e    0x18    ld a4,0(a5)
    0x84003470    0x1a    ld a5,8(a5)
    0x84003472    0x1c    sd zero,0(s0)         ; stack access
    0x84003476    0x20    sd a4,8(s0)           ; stack access
    0x84003478    0x22    sd a5,16(s0)          ; stack access
    0x8400347a    0x24    mv a0,s0
    0x8400347c    0x26    ld ra,24(sp)          ; stack access
    0x8400347e    0x28    ld s0,16(sp)          ; stack access
    0x84003480    0x2a    addi sp,sp,32
    0x84003482    0x2c    ret
    0x84003484    0x2e    sd a0,0(s0)           ; stack access
    0x84003486    0x30    sd zero,8(s0)         ; stack access
    0x8400348a    0x34    sd zero,16(s0)        ; stack access
    0x8400348e    0x38    j ffffffff8400347a <lookupCap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 44 nodes.

Section lookupSlot (138 of 292)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.

RVC_FFFFFFFFFFT___FF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `lookupSlot`:

    0x84003434     0x0    addi sp,sp,-80
    0x84003436     0x2    sd ra,72(sp)          ; stack access
    0x84003438     0x4    mv a3,a1
    0x8400343a     0x6    andi a0,a0,-1024
    0x8400343e     0xa    li a4,64
    0x84003442     0xe    ld a1,0(a0)
    0x84003444    0x10    ld a2,8(a0)
    0x84003446    0x12    addi a0,sp,8
    0x84003448    0x14    jal ra,ffffffff84003306 <resolveAddressBits>
    0x8400344c    0x18    ld a0,8(sp)           ; stack access
    0x8400344e    0x1a    ld a1,16(sp)          ; stack access
    0x84003450    0x1c    ld ra,72(sp)          ; stack access
    0x84003452    0x1e    addi sp,sp,80
    0x84003454    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (139 of 292)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 61 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_createObject`:

    0x84003266     0x0    addi sp,sp,-32
    0x84003268     0x2    sd ra,24(sp)          ; stack access
    0x8400326a     0x4    li a5,9
    0x8400326c     0x6    beq a0,a5,ffffffff840032bc <Arch_createObject+0x56>
    0x84003270     0xa    bltu a5,a0,ffffffff840032a2 <Arch_createObject+0x3c>
    0x84003274     0xe    li a5,7
    0x84003276    0x10    beq a0,a5,ffffffff840032d6 <Arch_createObject+0x70>
    0x8400327a    0x14    li a5,8
    0x8400327c    0x16    bne a0,a5,ffffffff840032f0 <Arch_createObject+0x8a>
    0x84003280    0x1a    andi a3,a3,1
    0x84003282    0x1c    slli a3,a3,0x36
    0x84003284    0x1e    li a5,19
    0x84003286    0x20    slli a5,a5,0x37
    0x84003288    0x22    or a3,a3,a5
    0x8400328a    0x24    sd a3,0(sp)           ; stack access
    0x8400328c    0x26    slli a1,a1,0x9
    0x8400328e    0x28    lui a5,0xfe000
    0x84003292    0x2c    srli a5,a5,0x10
    0x84003294    0x2e    and a1,a1,a5
    0x84003296    0x30    sd a1,8(sp)           ; stack access
    0x84003298    0x32    ld a0,0(sp)           ; stack access
    0x8400329a    0x34    ld a1,8(sp)           ; stack access
    0x8400329c    0x36    ld ra,24(sp)          ; stack access
    0x8400329e    0x38    addi sp,sp,32
    0x840032a0    0x3a    ret
    0x840032a2    0x3c    li a5,10
    0x840032a4    0x3e    bne a0,a5,ffffffff840032f0 <Arch_createObject+0x8a>
    0x840032a8    0x42    li a5,3
    0x840032aa    0x44    slli a5,a5,0x3b
    0x840032ac    0x46    sd a5,0(sp)           ; stack access
    0x840032ae    0x48    slli a1,a1,0x9
    0x840032b0    0x4a    lui a5,0xfe000
    0x840032b4    0x4e    srli a5,a5,0x10
    0x840032b6    0x50    and a1,a1,a5
    0x840032b8    0x52    sd a1,8(sp)           ; stack access
    0x840032ba    0x54    j ffffffff84003298 <Arch_createObject+0x32>
    0x840032bc    0x56    andi a3,a3,1
    0x840032be    0x58    slli a3,a3,0x36
    0x840032c0    0x5a    li a5,23
    0x840032c2    0x5c    slli a5,a5,0x37
    0x840032c4    0x5e    or a3,a3,a5
    0x840032c6    0x60    sd a3,0(sp)           ; stack access
    0x840032c8    0x62    slli a1,a1,0x9
    0x840032ca    0x64    lui a5,0xfe000
    0x840032ce    0x68    srli a5,a5,0x10
    0x840032d0    0x6a    and a1,a1,a5
    0x840032d2    0x6c    sd a1,8(sp)           ; stack access
    0x840032d4    0x6e    j ffffffff84003298 <Arch_createObject+0x32>
    0x840032d6    0x70    andi a3,a3,1
    0x840032d8    0x72    slli a3,a3,0x36
    0x840032da    0x74    li a5,27
    0x840032dc    0x76    slli a5,a5,0x37
    0x840032de    0x78    or a3,a3,a5
    0x840032e0    0x7a    sd a3,0(sp)           ; stack access
    0x840032e2    0x7c    slli a1,a1,0x9
    0x840032e4    0x7e    lui a5,0xfe000
    0x840032e8    0x82    srli a5,a5,0x10
    0x840032ea    0x84    and a1,a1,a5
    0x840032ec    0x86    sd a1,8(sp)           ; stack access
    0x840032ee    0x88    j ffffffff84003298 <Arch_createObject+0x32>
    0x840032f0    0x8a    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 85 nodes.

Section Arch_getObjectSize (140 of 292)
=======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 19 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_getObjectSize`:

    0x84003234     0x0    li a4,9
    0x84003236     0x2    beq a0,a4,ffffffff84003262 <Arch_getObjectSize+0x2e>
    0x8400323a     0x6    mv a5,a0
    0x8400323c     0x8    bltu a4,a0,ffffffff84003252 <Arch_getObjectSize+0x1e>
    0x84003240     0xc    li a4,7
    0x84003242     0xe    li a0,30
    0x84003244    0x10    beq a5,a4,ffffffff84003250 <Arch_getObjectSize+0x1c>
    0x84003248    0x14    li a4,8
    0x8400324a    0x16    li a0,12
    0x8400324c    0x18    bne a5,a4,ffffffff8400325a <Arch_getObjectSize+0x26>
    0x84003250    0x1c    ret
    0x84003252    0x1e    li a4,10
    0x84003254    0x20    li a0,12
    0x84003256    0x22    beq a5,a4,ffffffff84003250 <Arch_getObjectSize+0x1c>
    0x8400325a    0x26    addi sp,sp,-16
    0x8400325c    0x28    sd ra,8(sp)           ; stack access
    0x8400325e    0x2a    jal ra,ffffffff84002424 <halt>
    0x84003262    0x2e    li a0,21
    0x84003264    0x30    j ffffffff84003250 <Arch_getObjectSize+0x1c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 32 nodes.

Section Arch_sameObjectAs (141 of 292)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 64 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84003194     0x0    addi sp,sp,-48
    0x84003196     0x2    sd ra,40(sp)          ; stack access
    0x84003198     0x4    sd a0,16(sp)          ; stack access
    0x8400319a     0x6    sd a1,24(sp)          ; stack access
    0x8400319c     0x8    sd a2,0(sp)           ; stack access
    0x8400319e     0xa    sd a3,8(sp)           ; stack access
    0x840031a0     0xc    srli a4,a0,0x3b
    0x840031a4    0x10    li a5,1
    0x840031a6    0x12    beq a4,a5,ffffffff840031bc <Arch_sameObjectAs+0x28>
    0x840031aa    0x16    ld a2,0(sp)           ; stack access
    0x840031ac    0x18    ld a3,8(sp)           ; stack access
    0x840031ae    0x1a    ld a0,16(sp)          ; stack access
    0x840031b0    0x1c    ld a1,24(sp)          ; stack access
    0x840031b2    0x1e    jal ra,ffffffff84003036 <Arch_sameRegionAs>
    0x840031b6    0x22    ld ra,40(sp)          ; stack access
    0x840031b8    0x24    addi sp,sp,48
    0x840031ba    0x26    ret
    0x840031bc    0x28    mv a4,a2
    0x840031be    0x2a    srli a3,a2,0x3b
    0x840031c2    0x2e    bne a3,a5,ffffffff840031aa <Arch_sameObjectAs+0x16>
    0x840031c6    0x32    srli a5,a1,0x9
    0x840031ca    0x36    slli a2,a5,0x19
    0x840031ce    0x3a    srli a2,a2,0x19
    0x840031d0    0x3c    srli a5,a5,0x26
    0x840031d2    0x3e    andi a5,a5,1
    0x840031d4    0x40    beqz a5,ffffffff840031fc <Arch_sameObjectAs+0x68>
    0x840031d6    0x42    li a3,-1
    0x840031d8    0x44    slli a5,a3,0x27
    0x840031dc    0x48    or a2,a2,a5
    0x840031de    0x4a    ld a5,8(sp)           ; stack access
    0x840031e0    0x4c    srli a5,a5,0x9
    0x840031e2    0x4e    srli a3,a3,0x19
    0x840031e4    0x50    and a3,a3,a5
    0x840031e6    0x52    srli a5,a5,0x26
    0x840031e8    0x54    andi a5,a5,1
    0x840031ea    0x56    beqz a5,ffffffff840031f8 <Arch_sameObjectAs+0x64>
    0x840031ec    0x58    li a5,-1
    0x840031ee    0x5a    slli a5,a5,0x27
    0x840031f0    0x5c    or a3,a3,a5
    0x840031f2    0x5e    li a5,0
    0x840031f4    0x60    beq a3,a2,ffffffff8400320e <Arch_sameObjectAs+0x7a>
    0x840031f8    0x64    mv a0,a5
    0x840031fa    0x66    j ffffffff840031b6 <Arch_sameObjectAs+0x22>
    0x840031fc    0x68    ld a5,8(sp)           ; stack access
    0x840031fe    0x6a    srli a5,a5,0x9
    0x84003200    0x6c    slli a3,a5,0x19
    0x84003204    0x70    srli a3,a3,0x19
    0x84003206    0x72    srli a5,a5,0x26
    0x84003208    0x74    andi a5,a5,1
    0x8400320a    0x76    bnez a5,ffffffff840031ec <Arch_sameObjectAs+0x58>
    0x8400320c    0x78    j ffffffff840031f2 <Arch_sameObjectAs+0x5e>
    0x8400320e    0x7a    srli a2,a4,0x39
    0x84003212    0x7e    andi a2,a2,3
    0x84003214    0x80    srli a3,a0,0x39
    0x84003218    0x84    andi a3,a3,3
    0x8400321a    0x86    bne a2,a3,ffffffff840031f8 <Arch_sameObjectAs+0x64>
    0x8400321e    0x8a    srli a5,a0,0x36
    0x84003222    0x8e    srli a4,a4,0x36
    0x84003224    0x90    xori a4,a4,1
    0x84003228    0x94    andi a5,a5,1
    0x8400322a    0x96    andi a4,a4,1
    0x8400322c    0x98    sub a5,a5,a4
    0x8400322e    0x9a    snez a5,a5
    0x84003232    0x9e    j ffffffff840031f8 <Arch_sameObjectAs+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 92 nodes.

Section Arch_sameRegionAs (142 of 292)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 138 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x84003036      0x0    srli a5,a0,0x3b
    0x8400303a      0x4    li a6,11
    0x8400303c      0x6    beq a5,a6,ffffffff84003188 <Arch_sameRegionAs+0x152>
    0x84003040      0xa    mv a4,a0
    0x84003042      0xc    bltu a6,a5,ffffffff84003092 <Arch_sameRegionAs+0x5c>
    0x84003046     0x10    li a6,1
    0x84003048     0x12    beq a5,a6,ffffffff840030e0 <Arch_sameRegionAs+0xaa>
    0x8400304c     0x16    li a6,3
    0x8400304e     0x18    bne a5,a6,ffffffff8400308e <Arch_sameRegionAs+0x58>
    0x84003052     0x1c    srli a2,a2,0x3b
    0x84003054     0x1e    li a5,3
    0x84003056     0x20    li a0,0
    0x84003058     0x22    bne a2,a5,ffffffff840030ec <Arch_sameRegionAs+0xb6>
    0x8400305c     0x26    srli a1,a1,0x9
    0x8400305e     0x28    slli a0,a1,0x19
    0x84003062     0x2c    srli a5,a0,0x19
    0x84003066     0x30    srli a1,a1,0x26
    0x84003068     0x32    andi a1,a1,1
    0x8400306a     0x34    beqz a1,ffffffff84003072 <Arch_sameRegionAs+0x3c>
    0x8400306c     0x36    li a4,-1
    0x8400306e     0x38    slli a4,a4,0x27
    0x84003070     0x3a    or a5,a5,a4
    0x84003072     0x3c    srli a3,a3,0x9
    0x84003074     0x3e    slli a0,a3,0x19
    0x84003078     0x42    srli a0,a0,0x19
    0x8400307a     0x44    srli a3,a3,0x26
    0x8400307c     0x46    andi a3,a3,1
    0x8400307e     0x48    beqz a3,ffffffff84003086 <Arch_sameRegionAs+0x50>
    0x84003080     0x4a    li a4,-1
    0x84003082     0x4c    slli a4,a4,0x27
    0x84003084     0x4e    or a0,a0,a4
    0x84003086     0x50    sub a0,a0,a5
    0x84003088     0x52    seqz a0,a0
    0x8400308c     0x56    ret
    0x8400308e     0x58    li a0,0
    0x84003090     0x5a    ret
    0x84003092     0x5c    li a3,13
    0x84003094     0x5e    bne a5,a3,ffffffff840030dc <Arch_sameRegionAs+0xa6>
    0x84003098     0x62    srli a5,a2,0x3b
    0x8400309c     0x66    li a3,13
    0x8400309e     0x68    li a0,0
    0x840030a0     0x6a    bne a5,a3,ffffffff840030ec <Arch_sameRegionAs+0xb6>
    0x840030a4     0x6e    slli a4,a4,0x2
    0x840030a6     0x70    lui a0,0xf8000
    0x840030aa     0x74    srli a0,a0,0x19
    0x840030ac     0x76    and a0,a0,a4
    0x840030ae     0x78    srli a4,a4,0x26
    0x840030b0     0x7a    andi a4,a4,1
    0x840030b2     0x7c    beqz a4,ffffffff840030ba <Arch_sameRegionAs+0x84>
    0x840030b4     0x7e    li a5,-1
    0x840030b6     0x80    slli a5,a5,0x27
    0x840030b8     0x82    or a0,a0,a5
    0x840030ba     0x84    slli a4,a2,0x2
    0x840030be     0x88    lui a5,0xf8000
    0x840030c2     0x8c    srli a5,a5,0x19
    0x840030c4     0x8e    and a5,a5,a4
    0x840030c6     0x90    srli a4,a4,0x26
    0x840030c8     0x92    andi a4,a4,1
    0x840030ca     0x94    beqz a4,ffffffff840030d2 <Arch_sameRegionAs+0x9c>
    0x840030cc     0x96    li a4,-1
    0x840030ce     0x98    slli a4,a4,0x27
    0x840030d0     0x9a    or a5,a5,a4
    0x840030d2     0x9c    sub a0,a5,a0
    0x840030d6     0xa0    seqz a0,a0
    0x840030da     0xa4    ret
    0x840030dc     0xa6    li a0,0
    0x840030de     0xa8    ret
    0x840030e0     0xaa    srli a5,a2,0x3b
    0x840030e4     0xae    li a6,1
    0x840030e6     0xb0    li a0,0
    0x840030e8     0xb2    beq a5,a6,ffffffff840030ee <Arch_sameRegionAs+0xb8>
    0x840030ec     0xb6    ret
    0x840030ee     0xb8    addi sp,sp,-48
    0x840030f0     0xba    sd ra,40(sp)          ; stack access
    0x840030f2     0xbc    srli a1,a1,0x9
    0x840030f4     0xbe    slli a5,a1,0x19
    0x840030f8     0xc2    srli a5,a5,0x19
    0x840030fa     0xc4    srli a1,a1,0x26
    0x840030fc     0xc6    andi a1,a1,1
    0x840030fe     0xc8    beqz a1,ffffffff84003106 <Arch_sameRegionAs+0xd0>
    0x84003100     0xca    li a1,-1
    0x84003102     0xcc    slli a1,a1,0x27
    0x84003104     0xce    or a5,a5,a1
    0x84003106     0xd0    srli a3,a3,0x9
    0x84003108     0xd2    slli a1,a3,0x19
    0x8400310c     0xd6    srli a1,a1,0x19
    0x8400310e     0xd8    srli a3,a3,0x26
    0x84003110     0xda    andi a3,a3,1
    0x84003112     0xdc    beqz a3,ffffffff8400311a <Arch_sameRegionAs+0xe4>
    0x84003114     0xde    li a3,-1
    0x84003116     0xe0    slli a3,a3,0x27
    0x84003118     0xe2    or a1,a1,a3
    0x8400311a     0xe4    srli a4,a4,0x39
    0x8400311c     0xe6    andi a4,a4,3
    0x8400311e     0xe8    li a3,1
    0x84003120     0xea    beq a4,a3,ffffffff84003130 <Arch_sameRegionAs+0xfa>
    0x84003124     0xee    li a3,2
    0x84003126     0xf0    beq a4,a3,ffffffff84003134 <Arch_sameRegionAs+0xfe>
    0x8400312a     0xf4    beqz a4,ffffffff8400314c <Arch_sameRegionAs+0x116>
    0x8400312c     0xf6    jal ra,ffffffff84002424 <halt>
    0x84003130     0xfa    li a6,21
    0x84003132     0xfc    j ffffffff84003136 <Arch_sameRegionAs+0x100>
    0x84003134     0xfe    li a6,30
    0x84003136    0x100    srli a2,a2,0x39
    0x84003138    0x102    andi a2,a2,3
    0x8400313a    0x104    li a4,1
    0x8400313c    0x106    beq a2,a4,ffffffff84003150 <Arch_sameRegionAs+0x11a>
    0x84003140    0x10a    li a4,2
    0x84003142    0x10c    beq a2,a4,ffffffff84003154 <Arch_sameRegionAs+0x11e>
    0x84003146    0x110    beqz a2,ffffffff84003184 <Arch_sameRegionAs+0x14e>
    0x84003148    0x112    jal ra,ffffffff84002424 <halt>
    0x8400314c    0x116    li a6,12
    0x8400314e    0x118    j ffffffff84003136 <Arch_sameRegionAs+0x100>
    0x84003150    0x11a    li a4,21
    0x84003152    0x11c    j ffffffff84003156 <Arch_sameRegionAs+0x120>
    0x84003154    0x11e    li a4,30
    0x84003156    0x120    li a0,0
    0x84003158    0x122    bltu a1,a5,ffffffff8400317e <Arch_sameRegionAs+0x148>
    0x8400315c    0x126    li a3,1
    0x8400315e    0x128    sll a4,a3,a4
    0x84003162    0x12c    addi a2,a1,-1 # fffffffff7ffffff <ki_end+0x73fdbfff>
    0x84003166    0x130    add a4,a4,a2
    0x84003168    0x132    sll a3,a3,a6
    0x8400316c    0x136    addi a5,a5,-1
    0x8400316e    0x138    add a5,a5,a3
    0x84003170    0x13a    bltu a5,a4,ffffffff8400317e <Arch_sameRegionAs+0x148>
    0x84003174    0x13e    sltu a0,a4,a1
    0x84003178    0x142    xori a0,a0,1
    0x8400317c    0x146    sext.w a0,a0
    0x8400317e    0x148    ld ra,40(sp)          ; stack access
    0x84003180    0x14a    addi sp,sp,48
    0x84003182    0x14c    ret
    0x84003184    0x14e    li a4,12
    0x84003186    0x150    j ffffffff84003156 <Arch_sameRegionAs+0x120>
    0x84003188    0x152    srli a0,a2,0x3b
    0x8400318c    0x156    addi a0,a0,-11
    0x8400318e    0x158    seqz a0,a0
    0x84003192    0x15c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 193 nodes.

Section Arch_maskCapRights (143 of 292)
=======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 32 instructions.

RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84002eda     0x0    addi sp,sp,-64
    0x84002edc     0x2    sd ra,56(sp)          ; stack access
    0x84002ede     0x4    sd s0,48(sp)          ; stack access
    0x84002ee0     0x6    sd s1,40(sp)          ; stack access
    0x84002ee2     0x8    mv s0,a1
    0x84002ee4     0xa    mv s1,a2
    0x84002ee6     0xc    srli a4,a1,0x3b
    0x84002eea    0x10    li a5,1
    0x84002eec    0x12    beq a4,a5,ffffffff84002f02 <Arch_maskCapRights+0x28>
    0x84002ef0    0x16    sd a1,16(sp)          ; stack access
    0x84002ef2    0x18    sd a2,24(sp)          ; stack access
    0x84002ef4    0x1a    ld a0,16(sp)          ; stack access
    0x84002ef6    0x1c    ld a1,24(sp)          ; stack access
    0x84002ef8    0x1e    ld ra,56(sp)          ; stack access
    0x84002efa    0x20    ld s0,48(sp)          ; stack access
    0x84002efc    0x22    ld s1,40(sp)          ; stack access
    0x84002efe    0x24    addi sp,sp,64
    0x84002f00    0x26    ret
    0x84002f02    0x28    srli a5,a1,0x37
    0x84002f06    0x2c    mv a1,a0
    0x84002f08    0x2e    andi a0,a5,3
    0x84002f0c    0x32    jal ra,ffffffff84002d68 <maskVMRights>
    0x84002f10    0x36    andi a0,a0,3
    0x84002f12    0x38    slli a0,a0,0x37
    0x84002f14    0x3a    li a1,-3
    0x84002f16    0x3c    slli a1,a1,0x37
    0x84002f18    0x3e    addi a1,a1,-1
    0x84002f1a    0x40    and s0,s0,a1
    0x84002f1c    0x42    or s0,s0,a0
    0x84002f1e    0x44    sd s0,16(sp)          ; stack access
    0x84002f20    0x46    sd s1,24(sp)          ; stack access
    0x84002f22    0x48    j ffffffff84002ef4 <Arch_maskCapRights+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 48 nodes.

Section Arch_deriveCap (144 of 292)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 39 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84002e6c     0x0    srli a5,a2,0x3b
    0x84002e70     0x4    li a4,3
    0x84002e72     0x6    beq a5,a4,ffffffff84002ea4 <Arch_deriveCap+0x38>
    0x84002e76     0xa    bgeu a4,a5,ffffffff84002e88 <Arch_deriveCap+0x1c>
    0x84002e7a     0xe    addi a5,a5,-11
    0x84002e7c    0x10    andi a5,a5,-3
    0x84002e7e    0x12    beqz a5,ffffffff84002ec6 <Arch_deriveCap+0x5a>
    0x84002e80    0x14    addi sp,sp,-32
    0x84002e82    0x16    sd ra,24(sp)          ; stack access
    0x84002e84    0x18    jal ra,ffffffff84002424 <halt>
    0x84002e88    0x1c    li a4,1
    0x84002e8a    0x1e    bne a5,a4,ffffffff84002e80 <Arch_deriveCap+0x14>
    0x84002e8e    0x22    sd zero,0(a0)         ; stack access
    0x84002e92    0x26    li a5,-1
    0x84002e94    0x28    slli a4,a5,0x27
    0x84002e98    0x2c    and a2,a2,a4
    0x84002e9a    0x2e    sd a2,8(a0)           ; stack access
    0x84002e9c    0x30    srli a5,a5,0x10
    0x84002e9e    0x32    and a3,a3,a5
    0x84002ea0    0x34    sd a3,16(a0)          ; stack access
    0x84002ea2    0x36    ret
    0x84002ea4    0x38    srli a4,a2,0x27
    0x84002ea8    0x3c    andi a4,a4,1
    0x84002eaa    0x3e    bnez a4,ffffffff84002ec2 <Arch_deriveCap+0x56>
    0x84002eac    0x40    li a3,3
    0x84002eae    0x42    auipc a2,0xa
    0x84002eb2    0x46    sd a3,-622(a2) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84002eb6    0x4a    mv a3,a4
    0x84002eb8    0x4c    mv a2,a4
    0x84002eba    0x4e    sd a5,0(a0)           ; stack access
    0x84002ebc    0x50    sd a2,8(a0)           ; stack access
    0x84002ebe    0x52    sd a3,16(a0)          ; stack access
    0x84002ec0    0x54    ret
    0x84002ec2    0x56    li a5,0
    0x84002ec4    0x58    j ffffffff84002eba <Arch_deriveCap+0x4e>
    0x84002ec6    0x5a    sd zero,0(a0)         ; stack access
    0x84002eca    0x5e    sd a2,8(a0)           ; stack access
    0x84002ecc    0x60    sd a3,16(a0)          ; stack access
    0x84002ece    0x62    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 64 nodes.

Section performPageInvocationUnmap (145 of 292)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 43 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x84002dc0     0x0    addi sp,sp,-32
    0x84002dc2     0x2    sd ra,24(sp)          ; stack access
    0x84002dc4     0x4    sd s0,16(sp)          ; stack access
    0x84002dc6     0x6    sd a0,0(sp)           ; stack access
    0x84002dc8     0x8    mv s0,a2
    0x84002dca     0xa    mv a5,a1
    0x84002dcc     0xc    srli a1,a1,0x30
    0x84002dce     0xe    beqz a1,ffffffff84002e00 <performPageInvocationUnmap+0x40>
    0x84002dd0    0x10    mv a4,a0
    0x84002dd2    0x12    srli a0,a0,0x39
    0x84002dd4    0x14    andi a0,a0,3
    0x84002dd6    0x16    slli a2,a4,0x19
    0x84002dda    0x1a    srli a2,a2,0x19
    0x84002ddc    0x1c    srli a4,a4,0x26
    0x84002dde    0x1e    andi a4,a4,1
    0x84002de0    0x20    beqz a4,ffffffff84002de8 <performPageInvocationUnmap+0x28>
    0x84002de2    0x22    li a4,-1
    0x84002de4    0x24    slli a4,a4,0x27
    0x84002de6    0x26    or a2,a2,a4
    0x84002de8    0x28    srli a5,a5,0x9
    0x84002dea    0x2a    slli a3,a5,0x19
    0x84002dee    0x2e    srli a3,a3,0x19
    0x84002df0    0x30    srli a5,a5,0x26
    0x84002df2    0x32    andi a5,a5,1
    0x84002df4    0x34    beqz a5,ffffffff84002dfc <performPageInvocationUnmap+0x3c>
    0x84002df6    0x36    li a5,-1
    0x84002df8    0x38    slli a5,a5,0x27
    0x84002dfa    0x3a    or a3,a3,a5
    0x84002dfc    0x3c    jal ra,ffffffff84002b16 <unmapPage>
    0x84002e00    0x40    ld a4,8(s0)
    0x84002e02    0x42    li a5,-1
    0x84002e04    0x44    srli a3,a5,0x10
    0x84002e08    0x48    and a4,a4,a3
    0x84002e0a    0x4a    ld a3,0(s0)
    0x84002e0c    0x4c    slli a5,a5,0x27
    0x84002e0e    0x4e    and a5,a5,a3
    0x84002e10    0x50    sd a5,0(s0)
    0x84002e12    0x52    sd a4,8(s0)
    0x84002e14    0x54    li a0,0
    0x84002e16    0x56    ld ra,24(sp)          ; stack access
    0x84002e18    0x58    ld s0,16(sp)          ; stack access
    0x84002e1a    0x5a    addi sp,sp,32
    0x84002e1c    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 60 nodes.

Section deleteASID (146 of 292)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 23 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASID`:

    0x84002cc8     0x0    srli a5,a0,0x9
    0x84002ccc     0x4    slli a4,a5,0x3
    0x84002cd0     0x8    auipc a5,0xa
    0x84002cd4     0xc    addi a5,a5,-1232 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002cd8    0x10    add a5,a5,a4
    0x84002cda    0x12    ld a5,0(a5)
    0x84002cdc    0x14    beqz a5,ffffffff84002cec <deleteASID+0x24>
    0x84002cde    0x16    andi a4,a0,511
    0x84002ce2    0x1a    slli a4,a4,0x3
    0x84002ce4    0x1c    add a5,a5,a4
    0x84002ce6    0x1e    ld a4,0(a5)
    0x84002ce8    0x20    beq a4,a1,ffffffff84002cee <deleteASID+0x26>
    0x84002cec    0x24    ret
    0x84002cee    0x26    addi sp,sp,-16
    0x84002cf0    0x28    sd ra,8(sp)           ; stack access
    0x84002cf2    0x2a    sfence.vma zero,a0
    0x84002cf6    0x2e    sd zero,0(a5)
    0x84002cfa    0x32    auipc a0,0x1c
    0x84002cfe    0x36    ld a0,862(a0) # ffffffff8401f058 <ksCurThread>
    0x84002d02    0x3a    jal ra,ffffffff84002ba4 <setVMRoot>
    0x84002d06    0x3e    ld ra,8(sp)           ; stack access
    0x84002d08    0x40    addi sp,sp,16
    0x84002d0a    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 37 nodes.

Section deleteASIDPool (147 of 292)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASIDPool`:

    0x84002c8a     0x0    srli a0,a0,0x9
    0x84002c8c     0x2    slli a4,a0,0x3
    0x84002c90     0x6    auipc a5,0xa
    0x84002c94     0xa    addi a5,a5,-1168 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002c98     0xe    add a5,a5,a4
    0x84002c9a    0x10    ld a5,0(a5)
    0x84002c9c    0x12    beq a5,a1,ffffffff84002ca2 <deleteASIDPool+0x18>
    0x84002ca0    0x16    ret
    0x84002ca2    0x18    addi sp,sp,-16
    0x84002ca4    0x1a    sd ra,8(sp)           ; stack access
    0x84002ca6    0x1c    auipc a5,0xa
    0x84002caa    0x20    addi a5,a5,-1190 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002cae    0x24    add a0,a5,a4
    0x84002cb2    0x28    sd zero,0(a0)
    0x84002cb6    0x2c    auipc a0,0x1c
    0x84002cba    0x30    ld a0,930(a0) # ffffffff8401f058 <ksCurThread>
    0x84002cbe    0x34    jal ra,ffffffff84002ba4 <setVMRoot>
    0x84002cc2    0x38    ld ra,8(sp)           ; stack access
    0x84002cc4    0x3a    addi sp,sp,16
    0x84002cc6    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 30 nodes.

Section Arch_switchToIdleThread (148 of 292)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToIdleThread`:

    0x84002c74     0x0    addi sp,sp,-16
    0x84002c76     0x2    sd ra,8(sp)           ; stack access
    0x84002c78     0x4    auipc a0,0x1c
    0x84002c7c     0x8    ld a0,984(a0) # ffffffff8401f050 <ksIdleThread>
    0x84002c80     0xc    jal ra,ffffffff84002ba4 <setVMRoot>
    0x84002c84    0x10    ld ra,8(sp)           ; stack access
    0x84002c86    0x12    addi sp,sp,16
    0x84002c88    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 13 nodes.

Section Arch_switchToThread (149 of 292)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToThread`:

    0x84002c66    0x0    addi sp,sp,-16
    0x84002c68    0x2    sd ra,8(sp)           ; stack access
    0x84002c6a    0x4    jal ra,ffffffff84002ba4 <setVMRoot>
    0x84002c6e    0x8    ld ra,8(sp)           ; stack access
    0x84002c70    0xa    addi sp,sp,16
    0x84002c72    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 10 nodes.

Section setVMRoot (150 of 292)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 75 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `setVMRoot`:

    0x84002ba4     0x0    andi a0,a0,-1024
    0x84002ba8     0x4    ld a5,32(a0)
    0x84002baa     0x6    srli a5,a5,0x3b
    0x84002bac     0x8    li a4,3
    0x84002bae     0xa    beq a5,a4,ffffffff84002bd8 <setVMRoot+0x34>
    0x84002bb2     0xe    auipc a5,0x1f
    0x84002bb6    0x12    addi a5,a5,1102 # ffffffff84022000 <kernel_root_pageTable>
    0x84002bba    0x16    li a4,1
    0x84002bbc    0x18    slli a4,a4,0x20
    0x84002bbe    0x1a    add a5,a5,a4
    0x84002bc0    0x1c    srli a5,a5,0xc
    0x84002bc2    0x1e    li a4,-1
    0x84002bc4    0x20    srli a3,a4,0x14
    0x84002bc8    0x24    and a5,a5,a3
    0x84002bca    0x26    slli a4,a4,0x3f
    0x84002bcc    0x28    or a5,a5,a4
    0x84002bce    0x2a    csrw satp,a5
    0x84002bd2    0x2e    sfence.vma
    0x84002bd6    0x32    ret
    0x84002bd8    0x34    addi sp,sp,-48
    0x84002bda    0x36    sd ra,40(sp)          ; stack access
    0x84002bdc    0x38    sd s0,32(sp)          ; stack access
    0x84002bde    0x3a    sd s1,24(sp)          ; stack access
    0x84002be0    0x3c    sd s2,16(sp)          ; stack access
    0x84002be2    0x3e    addi a3,a0,32
    0x84002be6    0x42    ld a5,8(a3)
    0x84002be8    0x44    srli a4,a5,0x9
    0x84002bec    0x48    slli s0,a4,0x19
    0x84002bf0    0x4c    srli s0,s0,0x19
    0x84002bf2    0x4e    srli a4,a4,0x26
    0x84002bf4    0x50    andi a4,a4,1
    0x84002bf6    0x52    beqz a4,ffffffff84002bfe <setVMRoot+0x5a>
    0x84002bf8    0x54    li a4,-1
    0x84002bfa    0x56    slli a4,a4,0x27
    0x84002bfc    0x58    or s0,s0,a4
    0x84002bfe    0x5a    srli s1,a5,0x30
    0x84002c02    0x5e    mv a0,s1
    0x84002c04    0x60    jal ra,ffffffff84002182 <findVSpaceForASID>
    0x84002c08    0x64    sd a0,0(sp)           ; stack access
    0x84002c0a    0x66    sd a1,8(sp)           ; stack access
    0x84002c0c    0x68    bnez a0,ffffffff84002c40 <setVMRoot+0x9c>
    0x84002c0e    0x6a    bne a1,s0,ffffffff84002c40 <setVMRoot+0x9c>
    0x84002c12    0x6e    li a5,1
    0x84002c14    0x70    slli a5,a5,0x26
    0x84002c16    0x72    add a5,a5,s0
    0x84002c18    0x74    srli a5,a5,0xc
    0x84002c1a    0x76    li a4,-1
    0x84002c1c    0x78    srli s0,a4,0x14
    0x84002c20    0x7c    and a5,a5,s0
    0x84002c22    0x7e    slli a0,s1,0x2c
    0x84002c26    0x82    or a5,a5,a0
    0x84002c28    0x84    slli a4,a4,0x3f
    0x84002c2a    0x86    or a5,a5,a4
    0x84002c2c    0x88    csrw satp,a5
    0x84002c30    0x8c    sfence.vma
    0x84002c34    0x90    ld ra,40(sp)          ; stack access
    0x84002c36    0x92    ld s0,32(sp)          ; stack access
    0x84002c38    0x94    ld s1,24(sp)          ; stack access
    0x84002c3a    0x96    ld s2,16(sp)          ; stack access
    0x84002c3c    0x98    addi sp,sp,48
    0x84002c3e    0x9a    ret
    0x84002c40    0x9c    auipc a5,0x1f
    0x84002c44    0xa0    addi a5,a5,960 # ffffffff84022000 <kernel_root_pageTable>
    0x84002c48    0xa4    li a4,1
    0x84002c4a    0xa6    slli a4,a4,0x20
    0x84002c4c    0xa8    add a5,a5,a4
    0x84002c4e    0xaa    srli a5,a5,0xc
    0x84002c50    0xac    li a4,-1
    0x84002c52    0xae    srli a3,a4,0x14
    0x84002c56    0xb2    and a5,a5,a3
    0x84002c58    0xb4    slli a4,a4,0x3f
    0x84002c5a    0xb6    or a5,a5,a4
    0x84002c5c    0xb8    csrw satp,a5
    0x84002c60    0xbc    sfence.vma
    0x84002c64    0xc0    j ffffffff84002c34 <setVMRoot+0x90>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 104 nodes.

Section unmapPageTable (151 of 292)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 64 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `unmapPageTable`:

    0x84002a6c     0x0    addi sp,sp,-48
    0x84002a6e     0x2    sd ra,40(sp)          ; stack access
    0x84002a70     0x4    sd s0,32(sp)          ; stack access
    0x84002a72     0x6    sd s1,24(sp)          ; stack access
    0x84002a74     0x8    mv s0,a1
    0x84002a76     0xa    mv s1,a2
    0x84002a78     0xc    jal ra,ffffffff84002182 <findVSpaceForASID>
    0x84002a7c    0x10    sd a0,0(sp)           ; stack access
    0x84002a7e    0x12    sd a1,8(sp)           ; stack access
    0x84002a80    0x14    bnez a0,ffffffff84002b00 <unmapPageTable+0x94>
    0x84002a82    0x16    beq a1,s1,ffffffff84002b0a <unmapPageTable+0x9e>
    0x84002a86    0x1a    srli a5,s0,0x1e
    0x84002a8a    0x1e    andi a5,a5,511
    0x84002a8e    0x22    slli a5,a5,0x3
    0x84002a90    0x24    add a4,a1,a5
    0x84002a94    0x28    ld a5,0(a4)
    0x84002a96    0x2a    andi a3,a5,1
    0x84002a9a    0x2e    beqz a3,ffffffff84002b00 <unmapPageTable+0x94>
    0x84002a9c    0x30    srli a3,a5,0x1
    0x84002aa0    0x34    srli a2,a5,0x2
    0x84002aa4    0x38    or a3,a3,a2
    0x84002aa6    0x3a    srli a2,a5,0x3
    0x84002aaa    0x3e    or a3,a3,a2
    0x84002aac    0x40    andi a3,a3,1
    0x84002aae    0x42    bnez a3,ffffffff84002b00 <unmapPageTable+0x94>
    0x84002ab0    0x44    slli a5,a5,0x2
    0x84002ab2    0x46    lui a3,0xfff00
    0x84002ab6    0x4a    srli a3,a3,0x8
    0x84002ab8    0x4c    and a5,a5,a3
    0x84002aba    0x4e    li a3,-1
    0x84002abc    0x50    slli a3,a3,0x26
    0x84002abe    0x52    add a5,a5,a3
    0x84002ac0    0x54    beq s1,a5,ffffffff84002b0c <unmapPageTable+0xa0>
    0x84002ac4    0x58    srli s0,s0,0x15
    0x84002ac6    0x5a    andi s0,s0,511
    0x84002aca    0x5e    slli s0,s0,0x3
    0x84002acc    0x60    add a4,a5,s0
    0x84002ad0    0x64    ld a5,0(a4)
    0x84002ad2    0x66    andi a3,a5,1
    0x84002ad6    0x6a    beqz a3,ffffffff84002b00 <unmapPageTable+0x94>
    0x84002ad8    0x6c    srli a3,a5,0x1
    0x84002adc    0x70    srli a2,a5,0x2
    0x84002ae0    0x74    or a3,a3,a2
    0x84002ae2    0x76    srli a2,a5,0x3
    0x84002ae6    0x7a    or a3,a3,a2
    0x84002ae8    0x7c    andi a3,a3,1
    0x84002aea    0x7e    bnez a3,ffffffff84002b00 <unmapPageTable+0x94>
    0x84002aec    0x80    slli a5,a5,0x2
    0x84002aee    0x82    lui a3,0xfff00
    0x84002af2    0x86    srli a3,a3,0x8
    0x84002af4    0x88    and a5,a5,a3
    0x84002af6    0x8a    li a3,-1
    0x84002af8    0x8c    slli a3,a3,0x26
    0x84002afa    0x8e    add a5,a5,a3
    0x84002afc    0x90    beq s1,a5,ffffffff84002b0c <unmapPageTable+0xa0>
    0x84002b00    0x94    ld ra,40(sp)          ; stack access
    0x84002b02    0x96    ld s0,32(sp)          ; stack access
    0x84002b04    0x98    ld s1,24(sp)          ; stack access
    0x84002b06    0x9a    addi sp,sp,48
    0x84002b08    0x9c    ret
    0x84002b0a    0x9e    li a4,0
    0x84002b0c    0xa0    sd zero,0(a4)
    0x84002b10    0xa4    sfence.vma
    0x84002b14    0xa8    j ffffffff84002b00 <unmapPageTable+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 94 nodes.

Section handleVMFault (152 of 292)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 35 instructions.

Skipping 143026f3 csrr a3,stval
Switch found.


Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x840029fe     0x0    csrr a3,stval
    0x84002a02     0x4    li a5,15
    0x84002a04     0x6    bltu a5,a1,ffffffff84002a64 <handleVMFault+0x66>
    0x84002a08     0xa    slli a1,a1,0x2
    0x84002a0a     0xc    auipc a4,0x9
    0x84002a0e    0x10    addi a4,a4,210 # ffffffff8400badc <msgRegisters+0x134>
    0x84002a12    0x14    add a1,a1,a4
    0x84002a14    0x16    lw a5,0(a1)
    0x84002a16    0x18    add a5,a5,a4
    0x84002a18    0x1a    jr a5
    0x84002a1a    0x1c    auipc a4,0xa
    0x84002a1e    0x20    addi a4,a4,-538 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002a22    0x24    lui a5,0x28000
    0x84002a26    0x28    addi a5,a5,6
    0x84002a28    0x2a    sd a5,1096(a4)
    0x84002a2c    0x2e    sd a3,1104(a4)
    0x84002a30    0x32    li a0,1
    0x84002a32    0x34    ret
    0x84002a34    0x36    auipc a4,0xa
    0x84002a38    0x3a    addi a4,a4,-564 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002a3c    0x3e    lui a5,0x38000
    0x84002a40    0x42    addi a5,a5,6
    0x84002a42    0x44    sd a5,1096(a4)
    0x84002a46    0x48    sd a3,1104(a4)
    0x84002a4a    0x4c    j ffffffff84002a30 <handleVMFault+0x32>
    0x84002a4c    0x4e    auipc a4,0xa
    0x84002a50    0x52    addi a4,a4,-588 # ffffffff8400c800 <riscvKSASIDTable>
    0x84002a54    0x56    lui a5,0x8080
    0x84002a58    0x5a    addi a5,a5,6
    0x84002a5a    0x5c    sd a5,1096(a4)
    0x84002a5e    0x60    sd a3,1104(a4)
    0x84002a62    0x64    j ffffffff84002a30 <handleVMFault+0x32>
    0x84002a64    0x66    addi sp,sp,-16
    0x84002a66    0x68    sd ra,8(sp)           ; stack access
    0x84002a68    0x6a    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 87 nodes.

Section lookupIPCBuffer (153 of 292)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 56 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x84002728     0x0    andi a5,a1,-1024
    0x8400272c     0x4    addi a2,a5,64
    0x84002730     0x8    ld a5,64(a5)
    0x84002732     0xa    srli a3,a5,0x3b
    0x84002736     0xe    li a4,1
    0x84002738    0x10    bne a3,a4,ffffffff840027ac <lookupIPCBuffer+0x84>
    0x8400273c    0x14    srli a4,a5,0x36
    0x84002740    0x18    andi a4,a4,1
    0x84002742    0x1a    bnez a4,ffffffff840027b0 <lookupIPCBuffer+0x88>
    0x84002744    0x1c    srli a4,a5,0x37
    0x84002748    0x20    andi a4,a4,3
    0x8400274a    0x22    li a3,3
    0x8400274c    0x24    bne a4,a3,ffffffff84002786 <lookupIPCBuffer+0x5e>
    0x84002750    0x28    ld a4,8(a2)
    0x84002752    0x2a    srli a4,a4,0x9
    0x84002754    0x2c    slli a0,a4,0x19
    0x84002758    0x30    srli a3,a0,0x19
    0x8400275c    0x34    srli a4,a4,0x26
    0x8400275e    0x36    andi a4,a4,1
    0x84002760    0x38    beqz a4,ffffffff84002768 <lookupIPCBuffer+0x40>
    0x84002762    0x3a    li a4,-1
    0x84002764    0x3c    slli a4,a4,0x27
    0x84002766    0x3e    or a3,a3,a4
    0x84002768    0x40    ld a4,384(a1)
    0x8400276c    0x44    srli a5,a5,0x39
    0x8400276e    0x46    andi a5,a5,3
    0x84002770    0x48    li a2,1
    0x84002772    0x4a    beq a5,a2,ffffffff84002792 <lookupIPCBuffer+0x6a>
    0x84002776    0x4e    li a2,2
    0x84002778    0x50    beq a5,a2,ffffffff84002796 <lookupIPCBuffer+0x6e>
    0x8400277c    0x54    beqz a5,ffffffff840027a8 <lookupIPCBuffer+0x80>
    0x8400277e    0x56    addi sp,sp,-16
    0x84002780    0x58    sd ra,8(sp)           ; stack access
    0x84002782    0x5a    jal ra,ffffffff84002424 <halt>
    0x84002786    0x5e    bnez a0,ffffffff840027b4 <lookupIPCBuffer+0x8c>
    0x84002788    0x60    li a3,2
    0x8400278a    0x62    beq a4,a3,ffffffff84002750 <lookupIPCBuffer+0x28>
    0x8400278e    0x66    li a0,0
    0x84002790    0x68    ret
    0x84002792    0x6a    li a5,21
    0x84002794    0x6c    j ffffffff84002798 <lookupIPCBuffer+0x70>
    0x84002796    0x6e    li a5,30
    0x84002798    0x70    li a0,-1
    0x8400279a    0x72    sll a0,a0,a5
    0x8400279e    0x76    not a0,a0
    0x840027a2    0x7a    and a0,a0,a4
    0x840027a4    0x7c    add a0,a0,a3
    0x840027a6    0x7e    ret
    0x840027a8    0x80    li a5,12
    0x840027aa    0x82    j ffffffff84002798 <lookupIPCBuffer+0x70>
    0x840027ac    0x84    li a0,0
    0x840027ae    0x86    ret
    0x840027b0    0x88    li a0,0
    0x840027b2    0x8a    ret
    0x840027b4    0x8c    li a0,0
    0x840027b6    0x8e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 84 nodes.

Section Arch_setMRs_fault (154 of 292)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 18 instructions.

SRLIW..

Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x840026cc     0x0    li a5,6
    0x840026ce     0x2    bne a3,a5,ffffffff840026f6 <Arch_setMRs_fault+0x2a>
    0x840026d2     0x6    ld a5,264(a0)
    0x840026d6     0xa    sd a5,88(a1)
    0x840026d8     0xc    ld a5,320(a0)
    0x840026dc    0x10    sd a5,96(a1)
    0x840026de    0x12    ld a5,312(a0)
    0x840026e2    0x16    srli a5,a5,0x13
    0x840026e4    0x18    andi a5,a5,1
    0x840026e6    0x1a    sd a5,104(a1)
    0x840026e8    0x1c    ld a5,312(a0)
    0x840026ec    0x20    srliw a5,a5,0x1b
    0x840026f0    0x24    sd a5,112(a1)
    0x840026f2    0x26    li a0,4
    0x840026f4    0x28    ret
    0x840026f6    0x2a    addi sp,sp,-16
    0x840026f8    0x2c    sd ra,8(sp)           ; stack access
    0x840026fa    0x2e    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 31 nodes.

Section Arch_handleFaultReply (155 of 292)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x840026ba    0x0    li a5,6
    0x840026bc    0x2    bne a2,a5,ffffffff840026c4 <Arch_handleFaultReply+0xa>
    0x840026c0    0x6    li a0,1
    0x840026c2    0x8    ret
    0x840026c4    0xa    addi sp,sp,-16
    0x840026c6    0xc    sd ra,8(sp)           ; stack access
    0x840026c8    0xe    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section setMRs_lookup_failure (156 of 292)
==========================================

Deriving specifications
-----------------------

Section `setMRs_lookup_failure` consists of 230 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setMRs_lookup_failure`:

    0x84002430      0x0    addi sp,sp,-32
    0x84002432      0x2    sd ra,24(sp)          ; stack access
    0x84002434      0x4    mv a7,a0
    0x84002436      0x6    sd a3,8(sp)           ; stack access
    0x84002438      0x8    andi a5,a2,3
    0x8400243c      0xc    addi a6,a5,1
    0x84002440     0x10    li a3,3
    0x84002442     0x12    bgeu a3,a4,ffffffff8400249c <setMRs_lookup_failure+0x6c>
    0x84002446     0x16    beqz a1,ffffffff840024be <setMRs_lookup_failure+0x8e>
    0x84002448     0x18    addiw a3,a4,1
    0x8400244c     0x1c    sext.w a0,a3
    0x84002450     0x20    slli a3,a3,0x20
    0x84002452     0x22    srli a3,a3,0x20
    0x84002454     0x24    slli a3,a3,0x3
    0x84002456     0x26    add a3,a3,a1
    0x84002458     0x28    sd a6,0(a3)
    0x8400245c     0x2c    li a3,2
    0x8400245e     0x2e    beq a5,a3,ffffffff840024e0 <setMRs_lookup_failure+0xb0>
    0x84002462     0x32    bltu a3,a5,ffffffff84002558 <setMRs_lookup_failure+0x128>
    0x84002466     0x36    beqz a5,ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x84002468     0x38    li a3,1
    0x8400246a     0x3a    bne a5,a3,ffffffff84002618 <setMRs_lookup_failure+0x1e8>
    0x8400246e     0x3e    addiw a5,a4,1
    0x84002472     0x42    sext.w a0,a5
    0x84002476     0x46    srli a2,a2,0x2
    0x84002478     0x48    andi a2,a2,127
    0x8400247c     0x4c    li a3,3
    0x8400247e     0x4e    bgeu a3,a0,ffffffff840024c2 <setMRs_lookup_failure+0x92>
    0x84002482     0x52    beqz a1,ffffffff8400261c <setMRs_lookup_failure+0x1ec>
    0x84002486     0x56    addiw a4,a4,2
    0x84002488     0x58    sext.w a0,a4
    0x8400248c     0x5c    slli a4,a4,0x20
    0x8400248e     0x5e    srli a4,a4,0x20
    0x84002490     0x60    slli a4,a4,0x3
    0x84002492     0x62    add a1,a1,a4
    0x84002494     0x64    sd a2,0(a1)
    0x84002496     0x66    ld ra,24(sp)          ; stack access
    0x84002498     0x68    addi sp,sp,32
    0x8400249a     0x6a    ret
    0x8400249c     0x6c    slli a0,a4,0x20
    0x840024a0     0x70    srli a0,a0,0x20
    0x840024a2     0x72    auipc a3,0x9
    0x840024a6     0x76    addi a3,a3,1286 # ffffffff8400b9a8 <msgRegisters>
    0x840024aa     0x7a    add a3,a3,a0
    0x840024ac     0x7c    lbu a3,0(a3)
    0x840024b0     0x80    slli a3,a3,0x3
    0x840024b2     0x82    add a3,a3,a7
    0x840024b4     0x84    sd a6,0(a3)
    0x840024b8     0x88    addiw a0,a4,1
    0x840024bc     0x8c    j ffffffff8400245c <setMRs_lookup_failure+0x2c>
    0x840024be     0x8e    li a0,4
    0x840024c0     0x90    j ffffffff8400245c <setMRs_lookup_failure+0x2c>
    0x840024c2     0x92    slli a5,a5,0x20
    0x840024c4     0x94    srli a5,a5,0x20
    0x840024c6     0x96    auipc a3,0x9
    0x840024ca     0x9a    addi a3,a3,1250 # ffffffff8400b9a8 <msgRegisters>
    0x840024ce     0x9e    add a5,a5,a3
    0x840024d0     0xa0    lbu a0,0(a5)
    0x840024d4     0xa4    slli a0,a0,0x3
    0x840024d6     0xa6    add a0,a0,a7
    0x840024d8     0xa8    sd a2,0(a0)
    0x840024da     0xaa    addiw a0,a4,2
    0x840024de     0xae    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x840024e0     0xb0    addiw a0,a4,1
    0x840024e4     0xb4    sext.w a6,a0
    0x840024e8     0xb8    srli a5,a2,0x2
    0x840024ec     0xbc    andi a3,a5,127
    0x840024f0     0xc0    li a5,3
    0x840024f2     0xc2    bgeu a5,a6,ffffffff8400252a <setMRs_lookup_failure+0xfa>
    0x840024f6     0xc6    beqz a1,ffffffff84002620 <setMRs_lookup_failure+0x1f0>
    0x840024fa     0xca    addiw a5,a4,2
    0x840024fe     0xce    sext.w a6,a5
    0x84002502     0xd2    slli a5,a5,0x20
    0x84002504     0xd4    srli a5,a5,0x20
    0x84002506     0xd6    slli a5,a5,0x3
    0x84002508     0xd8    add a5,a5,a1
    0x8400250a     0xda    sd a3,0(a5)
    0x8400250c     0xdc    srli a2,a2,0x9
    0x8400250e     0xde    andi a2,a2,127
    0x84002512     0xe2    li a5,3
    0x84002514     0xe4    bgeu a5,a6,ffffffff84002632 <setMRs_lookup_failure+0x202>
    0x84002518     0xe8    addiw a4,a4,3
    0x8400251a     0xea    sext.w a0,a4
    0x8400251e     0xee    slli a4,a4,0x20
    0x84002520     0xf0    srli a4,a4,0x20
    0x84002522     0xf2    slli a4,a4,0x3
    0x84002524     0xf4    add a1,a1,a4
    0x84002526     0xf6    sd a2,0(a1)
    0x84002528     0xf8    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x8400252a     0xfa    slli a0,a0,0x20
    0x8400252c     0xfc    srli a0,a0,0x20
    0x8400252e     0xfe    auipc a5,0x9
    0x84002532    0x102    addi a5,a5,1146 # ffffffff8400b9a8 <msgRegisters>
    0x84002536    0x106    add a0,a0,a5
    0x84002538    0x108    lbu a5,0(a0) # fffffffff8000000 <ki_end+0x73fdc000>
    0x8400253c    0x10c    slli a5,a5,0x3
    0x8400253e    0x10e    add a5,a5,a7
    0x84002540    0x110    sd a3,0(a5)
    0x84002542    0x112    addiw a6,a4,2
    0x84002546    0x116    srli a2,a2,0x9
    0x84002548    0x118    andi a2,a2,127
    0x8400254c    0x11c    li a5,3
    0x8400254e    0x11e    bgeu a5,a6,ffffffff84002632 <setMRs_lookup_failure+0x202>
    0x84002552    0x122    bnez a1,ffffffff84002518 <setMRs_lookup_failure+0xe8>
    0x84002554    0x124    li a0,4
    0x84002556    0x126    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x84002558    0x128    addiw a3,a4,1
    0x8400255c    0x12c    sext.w a6,a3
    0x84002560    0x130    srli a5,a2,0x9
    0x84002564    0x134    andi a5,a5,127
    0x84002568    0x138    li a0,3
    0x8400256a    0x13a    bgeu a0,a6,ffffffff840025c0 <setMRs_lookup_failure+0x190>
    0x8400256e    0x13e    beqz a1,ffffffff8400269a <setMRs_lookup_failure+0x26a>
    0x84002572    0x142    addiw a0,a4,2
    0x84002576    0x146    sext.w t1,a0
    0x8400257a    0x14a    slli a3,a0,0x20
    0x8400257e    0x14e    srli a3,a3,0x20
    0x84002580    0x150    slli a3,a3,0x3
    0x84002582    0x152    add a3,a3,a1
    0x84002584    0x154    sd a5,0(a3)
    0x84002586    0x156    ld a6,8(sp)           ; stack access
    0x84002588    0x158    li a5,3
    0x8400258a    0x15a    bgeu a5,t1,ffffffff84002652 <setMRs_lookup_failure+0x222>
    0x8400258e    0x15e    addiw a5,a4,3
    0x84002592    0x162    sext.w a3,a5
    0x84002596    0x166    slli a5,a5,0x20
    0x84002598    0x168    srli a5,a5,0x20
    0x8400259a    0x16a    slli a5,a5,0x3
    0x8400259c    0x16c    add a5,a5,a1
    0x8400259e    0x16e    sd a6,0(a5)
    0x840025a2    0x172    srli a2,a2,0x2
    0x840025a4    0x174    andi a2,a2,127
    0x840025a8    0x178    li a5,3
    0x840025aa    0x17a    bgeu a5,a3,ffffffff8400267c <setMRs_lookup_failure+0x24c>
    0x840025ae    0x17e    addiw a4,a4,4
    0x840025b0    0x180    sext.w a0,a4
    0x840025b4    0x184    slli a4,a4,0x20
    0x840025b6    0x186    srli a4,a4,0x20
    0x840025b8    0x188    slli a4,a4,0x3
    0x840025ba    0x18a    add a1,a1,a4
    0x840025bc    0x18c    sd a2,0(a1)
    0x840025be    0x18e    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x840025c0    0x190    slli a3,a3,0x20
    0x840025c2    0x192    srli a3,a3,0x20
    0x840025c4    0x194    auipc a0,0x9
    0x840025c8    0x198    addi a0,a0,996 # ffffffff8400b9a8 <msgRegisters>
    0x840025cc    0x19c    add a3,a3,a0
    0x840025ce    0x19e    lbu a3,0(a3)
    0x840025d2    0x1a2    slli a3,a3,0x3
    0x840025d4    0x1a4    add a3,a3,a7
    0x840025d6    0x1a6    sd a5,0(a3)
    0x840025d8    0x1a8    addiw a5,a4,2
    0x840025dc    0x1ac    ld a6,8(sp)           ; stack access
    0x840025de    0x1ae    li a3,3
    0x840025e0    0x1b0    bgeu a3,a5,ffffffff840025e8 <setMRs_lookup_failure+0x1b8>
    0x840025e4    0x1b4    bnez a1,ffffffff8400258e <setMRs_lookup_failure+0x15e>
    0x840025e6    0x1b6    j ffffffff840026a6 <setMRs_lookup_failure+0x276>
    0x840025e8    0x1b8    slli a5,a5,0x20
    0x840025ea    0x1ba    srli a5,a5,0x20
    0x840025ec    0x1bc    auipc a3,0x9
    0x840025f0    0x1c0    addi a3,a3,956 # ffffffff8400b9a8 <msgRegisters>
    0x840025f4    0x1c4    add a5,a5,a3
    0x840025f6    0x1c6    lbu a5,0(a5)
    0x840025fa    0x1ca    slli a5,a5,0x3
    0x840025fc    0x1cc    add a5,a5,a7
    0x840025fe    0x1ce    sd a6,0(a5)
    0x84002602    0x1d2    addiw a3,a4,3
    0x84002606    0x1d6    srli a2,a2,0x2
    0x84002608    0x1d8    andi a2,a2,127
    0x8400260c    0x1dc    li a5,3
    0x8400260e    0x1de    bgeu a5,a3,ffffffff8400267c <setMRs_lookup_failure+0x24c>
    0x84002612    0x1e2    li a0,4
    0x84002614    0x1e4    bnez a1,ffffffff840025ae <setMRs_lookup_failure+0x17e>
    0x84002616    0x1e6    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x84002618    0x1e8    jal ra,ffffffff84002424 <halt>
    0x8400261c    0x1ec    li a0,4
    0x8400261e    0x1ee    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x84002620    0x1f0    addiw a6,a4,2
    0x84002624    0x1f4    li a5,3
    0x84002626    0x1f6    li a0,4
    0x84002628    0x1f8    srli a2,a2,0x9
    0x8400262a    0x1fa    andi a2,a2,127
    0x8400262e    0x1fe    bltu a5,a6,ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x84002632    0x202    slli a6,a6,0x20
    0x84002634    0x204    srli a6,a6,0x20
    0x84002638    0x208    auipc a5,0x9
    0x8400263c    0x20c    addi a5,a5,880 # ffffffff8400b9a8 <msgRegisters>
    0x84002640    0x210    add a6,a6,a5
    0x84002642    0x212    lbu a0,0(a6)
    0x84002646    0x216    slli a0,a0,0x3
    0x84002648    0x218    add a0,a0,a7
    0x8400264a    0x21a    sd a2,0(a0)
    0x8400264c    0x21c    addiw a0,a4,3
    0x84002650    0x220    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x84002652    0x222    slli a0,a0,0x20
    0x84002654    0x224    srli a0,a0,0x20
    0x84002656    0x226    auipc a5,0x9
    0x8400265a    0x22a    addi a5,a5,850 # ffffffff8400b9a8 <msgRegisters>
    0x8400265e    0x22e    add a0,a0,a5
    0x84002660    0x230    lbu a5,0(a0)
    0x84002664    0x234    slli a5,a5,0x3
    0x84002666    0x236    add a5,a5,a7
    0x84002668    0x238    sd a6,0(a5)
    0x8400266c    0x23c    addiw a3,a4,3
    0x84002670    0x240    srli a2,a2,0x2
    0x84002672    0x242    andi a2,a2,127
    0x84002676    0x246    li a5,3
    0x84002678    0x248    bltu a5,a3,ffffffff840025ae <setMRs_lookup_failure+0x17e>
    0x8400267c    0x24c    slli a3,a3,0x20
    0x8400267e    0x24e    srli a3,a3,0x20
    0x84002680    0x250    auipc a5,0x9
    0x84002684    0x254    addi a5,a5,808 # ffffffff8400b9a8 <msgRegisters>
    0x84002688    0x258    add a3,a3,a5
    0x8400268a    0x25a    lbu a0,0(a3)
    0x8400268e    0x25e    slli a0,a0,0x3
    0x84002690    0x260    add a0,a0,a7
    0x84002692    0x262    sd a2,0(a0)
    0x84002694    0x264    addiw a0,a4,4
    0x84002698    0x268    j ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x8400269a    0x26a    addiw a5,a4,2
    0x8400269e    0x26e    ld a6,8(sp)           ; stack access
    0x840026a0    0x270    li a3,3
    0x840026a2    0x272    bgeu a3,a5,ffffffff840025e8 <setMRs_lookup_failure+0x1b8>
    0x840026a6    0x276    addiw a3,a4,3
    0x840026aa    0x27a    li a5,3
    0x840026ac    0x27c    li a0,4
    0x840026ae    0x27e    srli a2,a2,0x2
    0x840026b0    0x280    andi a2,a2,127
    0x840026b4    0x284    bltu a5,a3,ffffffff84002496 <setMRs_lookup_failure+0x66>
    0x840026b8    0x288    j ffffffff8400267c <setMRs_lookup_failure+0x24c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
230 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_lookup_failure` has 311 nodes.

Section interrupt (157 of 292)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840020c4    0x0    sd ra,272(t0)
    0x840020c8    0x4    j ffffffff8400aad4 <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (158 of 292)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840020bc    0x0    sd ra,272(t0)
    0x840020c0    0x4    j ffffffff8400ad7e <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (159 of 292)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840020b2    0x0    addi ra,ra,4
    0x840020b4    0x2    sd ra,272(t0)
    0x840020b8    0x6    j ffffffff8400b916 <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section create_kernel_untypeds (160 of 292)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 38 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x840015b0     0x0    addi sp,sp,-80
    0x840015b2     0x2    sd ra,72(sp)          ; stack access
    0x840015b4     0x4    sd s0,64(sp)          ; stack access
    0x840015b6     0x6    sd s1,56(sp)          ; stack access
    0x840015b8     0x8    sd s2,48(sp)          ; stack access
    0x840015ba     0xa    sd a0,16(sp)          ; stack access
    0x840015bc     0xc    sd a1,24(sp)          ; stack access
    0x840015be     0xe    mv a6,a3
    0x840015c0    0x10    mv s1,a4
    0x840015c2    0x12    mv a5,a4
    0x840015c4    0x14    mv a3,a2
    0x840015c6    0x16    mv a4,a6
    0x840015c8    0x18    li a2,0
    0x840015ca    0x1a    jal ra,ffffffff84001400 <create_untypeds_for_region>
    0x840015ce    0x1e    beqz a0,ffffffff84001602 <create_kernel_untypeds+0x52>
    0x840015d0    0x20    auipc s0,0x0
    0x840015d4    0x24    addi s0,s0,1328 # ffffffff84001b00 <ndks_boot+0x148>
    0x840015d8    0x28    auipc s2,0x0
    0x840015dc    0x2c    addi s2,s2,1576 # ffffffff84001c00 <ndks_boot+0x248>
    0x840015e0    0x30    ld a3,0(s0)
    0x840015e2    0x32    ld a4,8(s0)
    0x840015e4    0x34    sd zero,0(s0)
    0x840015e8    0x38    sd zero,8(s0)
    0x840015ec    0x3c    mv a5,s1
    0x840015ee    0x3e    li a2,0
    0x840015f0    0x40    ld a0,16(sp)          ; stack access
    0x840015f2    0x42    ld a1,24(sp)          ; stack access
    0x840015f4    0x44    jal ra,ffffffff84001400 <create_untypeds_for_region>
    0x840015f8    0x48    beqz a0,ffffffff84001602 <create_kernel_untypeds+0x52>
    0x840015fa    0x4a    addi s0,s0,16
    0x840015fc    0x4c    bne s0,s2,ffffffff840015e0 <create_kernel_untypeds+0x30>
    0x84001600    0x50    li a0,1
    0x84001602    0x52    ld ra,72(sp)          ; stack access
    0x84001604    0x54    ld s0,64(sp)          ; stack access
    0x84001606    0x56    ld s1,56(sp)          ; stack access
    0x84001608    0x58    ld s2,48(sp)          ; stack access
    0x8400160a    0x5a    addi sp,sp,80
    0x8400160c    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 63 nodes.

Section create_device_untypeds (161 of 292)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 68 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `create_device_untypeds`:

    0x8400150e     0x0    addi sp,sp,-96
    0x84001510     0x2    sd ra,88(sp)          ; stack access
    0x84001512     0x4    sd s0,80(sp)          ; stack access
    0x84001514     0x6    sd s1,72(sp)          ; stack access
    0x84001516     0x8    sd s2,64(sp)          ; stack access
    0x84001518     0xa    sd s3,56(sp)          ; stack access
    0x8400151a     0xc    sd s4,48(sp)          ; stack access
    0x8400151c     0xe    sd s5,40(sp)          ; stack access
    0x8400151e    0x10    sd a0,0(sp)           ; stack access
    0x84001520    0x12    sd a1,8(sp)           ; stack access
    0x84001522    0x14    mv s4,a2
    0x84001524    0x16    auipc a3,0x0
    0x84001528    0x1a    ld a3,1492(a3) # ffffffff84001af8 <ndks_boot+0x140>
    0x8400152c    0x1e    beqz a3,ffffffff84001590 <create_device_untypeds+0x82>
    0x8400152e    0x20    auipc s0,0x0
    0x84001532    0x24    addi s0,s0,1162 # ffffffff840019b8 <ndks_boot>
    0x84001536    0x28    li s1,0
    0x84001538    0x2a    li a3,0
    0x8400153a    0x2c    li s5,-1
    0x8400153c    0x2e    slli s5,s5,0x26
    0x8400153e    0x30    mv s3,s0
    0x84001540    0x32    j ffffffff84001552 <create_device_untypeds+0x44>
    0x84001542    0x34    ld a3,8(s2)
    0x84001546    0x38    addi s1,s1,1
    0x84001548    0x3a    addi s0,s0,16
    0x8400154a    0x3c    ld a4,320(s3)
    0x8400154e    0x40    bgeu s1,a4,ffffffff84001572 <create_device_untypeds+0x64>
    0x84001552    0x44    mv s2,s0
    0x84001554    0x46    ld a4,0(s0)
    0x84001556    0x48    bgeu a3,a4,ffffffff84001542 <create_device_untypeds+0x34>
    0x8400155a    0x4c    add a3,a3,s5
    0x8400155c    0x4e    sd a3,16(sp)          ; stack access
    0x8400155e    0x50    add a4,a4,s5
    0x84001560    0x52    sd a4,24(sp)          ; stack access
    0x84001562    0x54    mv a5,s4
    0x84001564    0x56    li a2,1
    0x84001566    0x58    ld a0,0(sp)           ; stack access
    0x84001568    0x5a    ld a1,8(sp)           ; stack access
    0x8400156a    0x5c    jal ra,ffffffff84001400 <create_untypeds_for_region>
    0x8400156e    0x60    bnez a0,ffffffff84001542 <create_device_untypeds+0x34>
    0x84001570    0x62    j ffffffff8400157e <create_device_untypeds+0x70>
    0x84001572    0x64    lui a5,0xfc000
    0x84001576    0x68    srli a5,a5,0x19
    0x84001578    0x6a    li a0,1
    0x8400157a    0x6c    bgeu a5,a3,ffffffff84001590 <create_device_untypeds+0x82>
    0x8400157e    0x70    ld ra,88(sp)          ; stack access
    0x84001580    0x72    ld s0,80(sp)          ; stack access
    0x84001582    0x74    ld s1,72(sp)          ; stack access
    0x84001584    0x76    ld s2,64(sp)          ; stack access
    0x84001586    0x78    ld s3,56(sp)          ; stack access
    0x84001588    0x7a    ld s4,48(sp)          ; stack access
    0x8400158a    0x7c    ld s5,40(sp)          ; stack access
    0x8400158c    0x7e    addi sp,sp,96
    0x8400158e    0x80    ret
    0x84001590    0x82    li a4,-1
    0x84001592    0x84    slli a5,a4,0x26
    0x84001596    0x88    add a3,a3,a5
    0x84001598    0x8a    sd a3,16(sp)          ; stack access
    0x8400159a    0x8c    srli a4,a4,0x1a
    0x8400159c    0x8e    sd a4,24(sp)          ; stack access
    0x8400159e    0x90    mv a5,s4
    0x840015a0    0x92    li a2,1
    0x840015a2    0x94    ld a0,0(sp)           ; stack access
    0x840015a4    0x96    ld a1,8(sp)           ; stack access
    0x840015a6    0x98    jal ra,ffffffff84001400 <create_untypeds_for_region>
    0x840015aa    0x9c    beqz a0,ffffffff8400157e <create_device_untypeds+0x70>
    0x840015ac    0x9e    li a0,1
    0x840015ae    0xa0    j ffffffff8400157e <create_device_untypeds+0x70>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 111 nodes.

Section calculate_extra_bi_size_bits (162 of 292)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x84001326     0x0    addi sp,sp,-16
    0x84001328     0x2    sd ra,8(sp)           ; stack access
    0x8400132a     0x4    sd s0,0(sp)           ; stack access
    0x8400132c     0x6    mv s0,a0
    0x8400132e     0x8    beqz a0,ffffffff84001358 <calculate_extra_bi_size_bits+0x32>
    0x84001330     0xa    addi a0,a0,-1
    0x84001332     0xc    srli a0,a0,0xc
    0x84001334     0xe    addi a0,a0,1
    0x84001336    0x10    slli a0,a0,0xc
    0x84001338    0x12    jal ra,ffffffff8400a66a <__clzdi2>
    0x8400133c    0x16    mv a4,a0
    0x8400133e    0x18    li a5,63
    0x84001342    0x1c    sub a0,a5,a0
    0x84001346    0x20    li a5,1
    0x84001348    0x22    sll a5,a5,a0
    0x8400134c    0x26    bgeu a5,s0,ffffffff84001358 <calculate_extra_bi_size_bits+0x32>
    0x84001350    0x2a    li a5,64
    0x84001354    0x2e    sub a0,a5,a4
    0x84001358    0x32    ld ra,8(sp)           ; stack access
    0x8400135a    0x34    ld s0,0(sp)           ; stack access
    0x8400135c    0x36    addi sp,sp,16
    0x8400135e    0x38    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 32 nodes.

Section maybe_alloc_extra_bi (163 of 292)
=========================================

Deriving specifications
-----------------------

Section `maybe_alloc_extra_bi` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `maybe_alloc_extra_bi`:

    0x84000ea4     0x0    bltu a1,a0,ffffffff84000eb4 <maybe_alloc_extra_bi+0x10>
    0x84000ea8     0x4    mv a5,a1
    0x84000eaa     0x6    auipc a4,0x1
    0x84000eae     0xa    ld a4,-618(a4) # ffffffff84001c40 <rootserver+0x28>
    0x84000eb2     0xe    beqz a4,ffffffff84000eb6 <maybe_alloc_extra_bi+0x12>
    0x84000eb4    0x10    ret
    0x84000eb6    0x12    addi sp,sp,-16
    0x84000eb8    0x14    sd ra,8(sp)           ; stack access
    0x84000eba    0x16    li a1,1
    0x84000ebc    0x18    mv a0,a5
    0x84000ebe    0x1a    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000ec2    0x1e    auipc a5,0x1
    0x84000ec6    0x22    sd a0,-642(a5) # ffffffff84001c40 <rootserver+0x28>
    0x84000eca    0x26    ld ra,8(sp)           ; stack access
    0x84000ecc    0x28    addi sp,sp,16
    0x84000ece    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maybe_alloc_extra_bi` has 27 nodes.

Section alloc_rootserver_obj (164 of 292)
=========================================

Deriving specifications
-----------------------

Section `alloc_rootserver_obj` consists of 16 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `alloc_rootserver_obj`:

    0x84000e76     0x0    addi sp,sp,-16
    0x84000e78     0x2    sd ra,8(sp)           ; stack access
    0x84000e7a     0x4    sd s0,0(sp)           ; stack access
    0x84000e7c     0x6    auipc a5,0x1
    0x84000e80     0xa    addi a5,a5,-1220 # ffffffff840019b8 <ndks_boot>
    0x84000e84     0xe    ld s0,688(a5)
    0x84000e88    0x12    sll a1,a1,a0
    0x84000e8c    0x16    add a4,a1,s0
    0x84000e90    0x1a    sd a4,688(a5)
    0x84000e94    0x1e    mv a0,s0
    0x84000e96    0x20    jal ra,ffffffff840092da <memzero>
    0x84000e9a    0x24    mv a0,s0
    0x84000e9c    0x26    ld ra,8(sp)           ; stack access
    0x84000e9e    0x28    ld s0,0(sp)           ; stack access
    0x84000ea0    0x2a    addi sp,sp,16
    0x84000ea2    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `alloc_rootserver_obj` has 24 nodes.

Section configureIdleThread (165 of 292)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `configureIdleThread`:

    0x84000d9c     0x0    addi sp,sp,-16
    0x84000d9e     0x2    sd ra,8(sp)           ; stack access
    0x84000da0     0x4    auipc a4,0x1
    0x84000da4     0x8    addi a4,a4,952 # ffffffff84002158 <idle_thread>
    0x84000da8     0xc    sd a4,272(a0)
    0x84000dac    0x10    li a4,288
    0x84000db0    0x14    sd a4,256(a0)
    0x84000db4    0x18    auipc a4,0x1e
    0x84000db8    0x1c    addi a4,a4,588 # ffffffff8401f000 <tlbLockCount>
    0x84000dbc    0x20    sd a4,8(a0)
    0x84000dbe    0x22    li a1,7
    0x84000dc0    0x24    jal ra,ffffffff84004a52 <setThreadState>
    0x84000dc4    0x28    ld ra,8(sp)           ; stack access
    0x84000dc6    0x2a    addi sp,sp,16
    0x84000dc8    0x2c    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 22 nodes.

Section init_sched_control (166 of 292)
=======================================

Deriving specifications
-----------------------

Section `init_sched_control` consists of 39 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `init_sched_control`:

    0x84000b42     0x0    addi sp,sp,-80
    0x84000b44     0x2    sd ra,72(sp)          ; stack access
    0x84000b46     0x4    sd s0,64(sp)          ; stack access
    0x84000b48     0x6    sd s1,56(sp)          ; stack access
    0x84000b4a     0x8    sd s2,48(sp)          ; stack access
    0x84000b4c     0xa    sd s3,40(sp)          ; stack access
    0x84000b4e     0xc    sd a0,0(sp)           ; stack access
    0x84000b50     0xe    sd a1,8(sp)           ; stack access
    0x84000b52    0x10    auipc s3,0x1
    0x84000b56    0x14    ld s3,182(s3) # ffffffff84001c08 <ndks_boot+0x250>
    0x84000b5a    0x18    beqz a2,ffffffff84000b7e <init_sched_control+0x3c>
    0x84000b5c    0x1a    addi s1,a2,-1
    0x84000b60    0x1e    li s0,0
    0x84000b62    0x20    li s2,-1
    0x84000b64    0x22    slli s2,s2,0x3e
    0x84000b66    0x24    mv a2,s2
    0x84000b68    0x26    mv a3,s0
    0x84000b6a    0x28    ld a0,0(sp)           ; stack access
    0x84000b6c    0x2a    ld a1,8(sp)           ; stack access
    0x84000b6e    0x2c    jal ra,ffffffff84000870 <provide_cap>
    0x84000b72    0x30    beq s1,s0,ffffffff84000b7c <init_sched_control+0x3a>
    0x84000b76    0x34    addi s0,s0,1
    0x84000b78    0x36    bnez a0,ffffffff84000b66 <init_sched_control+0x24>
    0x84000b7a    0x38    j ffffffff84000b96 <init_sched_control+0x54>
    0x84000b7c    0x3a    beqz a0,ffffffff84000b96 <init_sched_control+0x54>
    0x84000b7e    0x3c    auipc a4,0x1
    0x84000b82    0x40    addi a4,a4,-454 # ffffffff840019b8 <ndks_boot>
    0x84000b86    0x44    ld a5,584(a4)
    0x84000b8a    0x48    ld a4,592(a4)
    0x84000b8e    0x4c    sd s3,152(a5)
    0x84000b92    0x50    sd a4,160(a5)
    0x84000b94    0x52    li a0,1
    0x84000b96    0x54    ld ra,72(sp)          ; stack access
    0x84000b98    0x56    ld s0,64(sp)          ; stack access
    0x84000b9a    0x58    ld s1,56(sp)          ; stack access
    0x84000b9c    0x5a    ld s2,48(sp)          ; stack access
    0x84000b9e    0x5c    ld s3,40(sp)          ; stack access
    0x84000ba0    0x5e    addi sp,sp,80
    0x84000ba2    0x60    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_sched_control` has 68 nodes.

Section create_it_asid_pool (167 of 292)
========================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 39 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x84000ae0     0x0    addi sp,sp,-80
    0x84000ae2     0x2    sd ra,72(sp)          ; stack access
    0x84000ae4     0x4    sd s0,64(sp)          ; stack access
    0x84000ae6     0x6    sd s1,56(sp)          ; stack access
    0x84000ae8     0x8    sd s2,48(sp)          ; stack access
    0x84000aea     0xa    sd s3,40(sp)          ; stack access
    0x84000aec     0xc    mv s2,a0
    0x84000aee     0xe    mv s1,a1
    0x84000af0    0x10    auipc s0,0x1
    0x84000af4    0x14    ld s0,312(s0) # ffffffff84001c28 <rootserver+0x10>
    0x84000af8    0x18    slli s0,s0,0x19
    0x84000afa    0x1a    srli s0,s0,0x1b
    0x84000afc    0x1c    li a5,13
    0x84000afe    0x1e    slli a5,a5,0x3b
    0x84000b00    0x20    or s0,s0,a5
    0x84000b02    0x22    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000b06    0x26    sd s0,192(a0)
    0x84000b08    0x28    sd zero,200(a0)
    0x84000b0c    0x2c    sd zero,208(a0)
    0x84000b10    0x30    li s3,3
    0x84000b12    0x32    sd s3,216(a0)
    0x84000b16    0x36    mv a0,s2
    0x84000b18    0x38    mv a1,s1
    0x84000b1a    0x3a    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000b1e    0x3e    li a5,11
    0x84000b20    0x40    slli a5,a5,0x3b
    0x84000b22    0x42    sd a5,160(a0)
    0x84000b24    0x44    sd zero,168(a0)
    0x84000b28    0x48    sd zero,176(a0)
    0x84000b2c    0x4c    sd s3,184(a0)
    0x84000b30    0x50    mv a0,s0
    0x84000b32    0x52    li a1,0
    0x84000b34    0x54    ld ra,72(sp)          ; stack access
    0x84000b36    0x56    ld s0,64(sp)          ; stack access
    0x84000b38    0x58    ld s1,56(sp)          ; stack access
    0x84000b3a    0x5a    ld s2,48(sp)          ; stack access
    0x84000b3c    0x5c    ld s3,40(sp)          ; stack access
    0x84000b3e    0x5e    addi sp,sp,80
    0x84000b40    0x60    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 61 nodes.

Section provide_cap (168 of 292)
================================

Deriving specifications
-----------------------

Section `provide_cap` consists of 34 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `provide_cap`:

    0x84000870     0x0    addi sp,sp,-48
    0x84000872     0x2    sd ra,40(sp)          ; stack access
    0x84000874     0x4    sd s0,32(sp)          ; stack access
    0x84000876     0x6    sd a0,16(sp)          ; stack access
    0x84000878     0x8    sd a1,24(sp)          ; stack access
    0x8400087a     0xa    sd a2,0(sp)           ; stack access
    0x8400087c     0xc    sd a3,8(sp)           ; stack access
    0x8400087e     0xe    auipc a5,0x1
    0x84000882    0x12    addi a5,a5,314 # ffffffff840019b8 <ndks_boot>
    0x84000886    0x16    ld s0,592(a5)
    0x8400088a    0x1a    ld a5,600(a5)
    0x8400088e    0x1e    bltu s0,a5,ffffffff8400089c <provide_cap+0x2c>
    0x84000892    0x22    li a0,0
    0x84000894    0x24    ld ra,40(sp)          ; stack access
    0x84000896    0x26    ld s0,32(sp)          ; stack access
    0x84000898    0x28    addi sp,sp,48
    0x8400089a    0x2a    ret
    0x8400089c    0x2c    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x840008a0    0x30    slli s0,s0,0x5
    0x840008a2    0x32    add s0,s0,a0
    0x840008a4    0x34    ld a5,0(sp)           ; stack access
    0x840008a6    0x36    sd a5,0(s0)
    0x840008a8    0x38    ld a5,8(sp)           ; stack access
    0x840008aa    0x3a    sd a5,8(s0)
    0x840008ac    0x3c    sd zero,16(s0)
    0x840008b0    0x40    li a5,3
    0x840008b2    0x42    sd a5,24(s0)
    0x840008b4    0x44    auipc a4,0x1
    0x840008b8    0x48    addi a4,a4,260 # ffffffff840019b8 <ndks_boot>
    0x840008bc    0x4c    ld a5,592(a4)
    0x840008c0    0x50    addi a5,a5,1
    0x840008c2    0x52    sd a5,592(a4)
    0x840008c6    0x56    li a0,1
    0x840008c8    0x58    j ffffffff84000894 <provide_cap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 56 nodes.

Section create_domain_cap (169 of 292)
======================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 13 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_domain_cap`:

    0x84000800     0x0    addi sp,sp,-32
    0x84000802     0x2    sd ra,24(sp)          ; stack access
    0x84000804     0x4    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000808     0x8    li a5,-3
    0x8400080a     0xa    slli a5,a5,0x3d
    0x8400080c     0xc    sd a5,352(a0)
    0x84000810    0x10    sd zero,360(a0)
    0x84000814    0x14    sd zero,368(a0)
    0x84000818    0x18    li a5,3
    0x8400081a    0x1a    sd a5,376(a0)
    0x8400081e    0x1e    ld ra,24(sp)          ; stack access
    0x84000820    0x20    addi sp,sp,32
    0x84000822    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 21 nodes.

Section insert_region (170 of 292)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 39 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `insert_region`:

    0x84000754     0x0    addi sp,sp,-48
    0x84000756     0x2    sd ra,40(sp)          ; stack access
    0x84000758     0x4    sd s0,32(sp)          ; stack access
    0x8400075a     0x6    sd a0,0(sp)           ; stack access
    0x8400075c     0x8    sd a1,8(sp)           ; stack access
    0x8400075e     0xa    beq a1,a0,ffffffff840007ae <insert_region+0x5a>
    0x84000762     0xe    auipc a5,0x1
    0x84000766    0x12    addi a5,a5,926 # ffffffff84001b00 <ndks_boot+0x148>
    0x8400076a    0x16    li s0,0
    0x8400076c    0x18    li a2,16
    0x8400076e    0x1a    ld a3,0(a5)
    0x84000770    0x1c    ld a4,8(a5)
    0x84000772    0x1e    beq a3,a4,ffffffff84000788 <insert_region+0x34>
    0x84000776    0x22    addi s0,s0,1
    0x84000778    0x24    addi a5,a5,16
    0x8400077a    0x26    bne s0,a2,ffffffff8400076e <insert_region+0x1a>
    0x8400077e    0x2a    li a0,0
    0x84000780    0x2c    ld ra,40(sp)          ; stack access
    0x84000782    0x2e    ld s0,32(sp)          ; stack access
    0x84000784    0x30    addi sp,sp,48
    0x84000786    0x32    ret
    0x84000788    0x34    li a5,1
    0x8400078a    0x36    slli a5,a5,0x26
    0x8400078c    0x38    add a0,a0,a5
    0x8400078e    0x3a    add a1,a1,a5
    0x84000790    0x3c    jal ra,ffffffff84000588 <reserve_region>
    0x84000794    0x40    addi s0,s0,20
    0x84000796    0x42    slli s0,s0,0x4
    0x84000798    0x44    auipc a5,0x1
    0x8400079c    0x48    addi a5,a5,544 # ffffffff840019b8 <ndks_boot>
    0x840007a0    0x4c    add s0,s0,a5
    0x840007a2    0x4e    ld a5,0(sp)           ; stack access
    0x840007a4    0x50    sd a5,8(s0)
    0x840007a6    0x52    ld a5,8(sp)           ; stack access
    0x840007a8    0x54    sd a5,16(s0)
    0x840007aa    0x56    li a0,1
    0x840007ac    0x58    j ffffffff84000780 <insert_region+0x2c>
    0x840007ae    0x5a    li a0,1
    0x840007b0    0x5c    j ffffffff84000780 <insert_region+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 59 nodes.

Section reserve_region (171 of 292)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 78 instructions.

RVC_TFFTFFT__FT___TF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `reserve_region`:

    0x84000588     0x0    beq a0,a1,ffffffff8400066e <reserve_region+0xe6>
    0x8400058c     0x4    addi sp,sp,-32
    0x8400058e     0x6    sd ra,24(sp)          ; stack access
    0x84000590     0x8    mv a7,a0
    0x84000592     0xa    auipc a6,0x1
    0x84000596     0xe    ld a6,1382(a6) # ffffffff84001af8 <ndks_boot+0x140>
    0x8400059a    0x12    beqz a6,ffffffff840005ca <reserve_region+0x42>
    0x8400059e    0x16    auipc t1,0x1
    0x840005a2    0x1a    addi t1,t1,1050 # ffffffff840019b8 <ndks_boot>
    0x840005a6    0x1e    mv a5,t1
    0x840005a8    0x20    li a4,0
    0x840005aa    0x22    ld a3,0(a5)
    0x840005ac    0x24    beq a3,a1,ffffffff840005e8 <reserve_region+0x60>
    0x840005b0    0x28    ld a2,8(a5)
    0x840005b2    0x2a    beq a2,a7,ffffffff84000604 <reserve_region+0x7c>
    0x840005b6    0x2e    bltu a1,a3,ffffffff8400061a <reserve_region+0x92>
    0x840005ba    0x32    addi a4,a4,1
    0x840005bc    0x34    addi a5,a5,16
    0x840005be    0x36    bne a4,a6,ffffffff840005aa <reserve_region+0x22>
    0x840005c2    0x3a    li a5,19
    0x840005c4    0x3c    li a0,0
    0x840005c6    0x3e    beq a6,a5,ffffffff840005fe <reserve_region+0x76>
    0x840005ca    0x42    auipc a4,0x1
    0x840005ce    0x46    addi a4,a4,1006 # ffffffff840019b8 <ndks_boot>
    0x840005d2    0x4a    slli a5,a6,0x4
    0x840005d6    0x4e    add a5,a5,a4
    0x840005d8    0x50    sd a7,0(a5) # ffffffffcc000000 <ki_end+0x47fdc000>
    0x840005dc    0x54    sd a1,8(a5)
    0x840005de    0x56    addi a6,a6,1
    0x840005e0    0x58    sd a6,320(a4)
    0x840005e4    0x5c    li a0,1
    0x840005e6    0x5e    j ffffffff840005fe <reserve_region+0x76>
    0x840005e8    0x60    slli a4,a4,0x4
    0x840005ea    0x62    auipc a5,0x1
    0x840005ee    0x66    addi a5,a5,974 # ffffffff840019b8 <ndks_boot>
    0x840005f2    0x6a    add a4,a4,a5
    0x840005f4    0x6c    sd a7,0(a4)
    0x840005f8    0x70    jal ra,ffffffff84000026 <merge_regions>
    0x840005fc    0x74    li a0,1
    0x840005fe    0x76    ld ra,24(sp)          ; stack access
    0x84000600    0x78    addi sp,sp,32
    0x84000602    0x7a    ret
    0x84000604    0x7c    slli a4,a4,0x4
    0x84000606    0x7e    auipc a5,0x1
    0x8400060a    0x82    addi a5,a5,946 # ffffffff840019b8 <ndks_boot>
    0x8400060e    0x86    add a4,a4,a5
    0x84000610    0x88    sd a1,8(a4)
    0x84000612    0x8a    jal ra,ffffffff84000026 <merge_regions>
    0x84000616    0x8e    li a0,1
    0x84000618    0x90    j ffffffff840005fe <reserve_region+0x76>
    0x8400061a    0x92    addi a3,a6,1
    0x8400061e    0x96    li a5,19
    0x84000620    0x98    li a0,0
    0x84000622    0x9a    bltu a5,a3,ffffffff840005fe <reserve_region+0x76>
    0x84000626    0x9e    bgeu a4,a6,ffffffff84000652 <reserve_region+0xca>
    0x8400062a    0xa2    slli a6,a6,0x4
    0x8400062c    0xa4    auipc a5,0x1
    0x84000630    0xa8    addi a5,a5,908 # ffffffff840019b8 <ndks_boot>
    0x84000634    0xac    add a6,a6,a5
    0x84000636    0xae    slli a5,a4,0x4
    0x8400063a    0xb2    add t1,t1,a5
    0x8400063c    0xb4    ld a5,-16(a6)
    0x84000640    0xb8    sd a5,0(a6)
    0x84000644    0xbc    ld a5,-8(a6)
    0x84000648    0xc0    sd a5,8(a6)
    0x8400064c    0xc4    addi a6,a6,-16
    0x8400064e    0xc6    bne a6,t1,ffffffff8400063c <reserve_region+0xb4>
    0x84000652    0xca    auipc a2,0x1
    0x84000656    0xce    addi a2,a2,870 # ffffffff840019b8 <ndks_boot>
    0x8400065a    0xd2    slli a5,a4,0x4
    0x8400065e    0xd6    add a5,a5,a2
    0x84000660    0xd8    sd a7,0(a5)
    0x84000664    0xdc    sd a1,8(a5)
    0x84000666    0xde    sd a3,320(a2)
    0x8400066a    0xe2    li a0,1
    0x8400066c    0xe4    j ffffffff840005fe <reserve_region+0x76>
    0x8400066e    0xe6    li a0,1
    0x84000670    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 119 nodes.

Section create_mapped_it_frame_cap (172 of 292)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x8400049e     0x0    addi sp,sp,-80
    0x840004a0     0x2    sd ra,72(sp)          ; stack access
    0x840004a2     0x4    sd s0,64(sp)          ; stack access
    0x840004a4     0x6    sd s1,56(sp)          ; stack access
    0x840004a6     0x8    snez s0,a5
    0x840004aa     0xc    slli s0,s0,0x39
    0x840004ac     0xe    slli a3,a3,0x19
    0x840004ae    0x10    srli a3,a3,0x19
    0x840004b0    0x12    or s0,s0,a3
    0x840004b2    0x14    li a5,19
    0x840004b4    0x16    slli a5,a5,0x37
    0x840004b6    0x18    or s0,s0,a5
    0x840004b8    0x1a    slli a2,a2,0x9
    0x840004ba    0x1c    lui s1,0xfe000
    0x840004be    0x20    srli s1,s1,0x10
    0x840004c0    0x22    and s1,s1,a2
    0x840004c2    0x24    slli a4,a4,0x30
    0x840004c4    0x26    or s1,s1,a4
    0x840004c6    0x28    mv a2,s0
    0x840004c8    0x2a    mv a3,s1
    0x840004ca    0x2c    jal ra,ffffffff84000430 <map_it_frame_cap>
    0x840004ce    0x30    mv a0,s0
    0x840004d0    0x32    mv a1,s1
    0x840004d2    0x34    ld ra,72(sp)          ; stack access
    0x840004d4    0x36    ld s0,64(sp)          ; stack access
    0x840004d6    0x38    ld s1,56(sp)          ; stack access
    0x840004d8    0x3a    addi sp,sp,80
    0x840004da    0x3c    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section map_kernel_frame (173 of 292)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `map_kernel_frame`:

    0x840000c4     0x0    addi sp,sp,-16
    0x840000c6     0x2    sd ra,8(sp)           ; stack access
    0x840000c8     0x4    sd s0,0(sp)           ; stack access
    0x840000ca     0x6    srli a1,a1,0x1e
    0x840000cc     0x8    andi a1,a1,511
    0x840000d0     0xc    slli a1,a1,0x3
    0x840000d2     0xe    auipc s0,0x22
    0x840000d6    0x12    addi s0,s0,-210 # ffffffff84022000 <kernel_root_pageTable>
    0x840000da    0x16    add s0,s0,a1
    0x840000dc    0x18    li a1,1
    0x840000de    0x1a    lui a5,0xc0000
    0x840000e2    0x1e    and a0,a0,a5
    0x840000e4    0x20    jal ra,ffffffff8400215e <pte_next>
    0x840000e8    0x24    sd a0,0(s0)
    0x840000ea    0x26    ld ra,8(sp)           ; stack access
    0x840000ec    0x28    ld s0,0(sp)           ; stack access
    0x840000ee    0x2a    addi sp,sp,16
    0x840000f0    0x2c    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 25 nodes.

Section _start (174 of 292)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0xc
    0x84000008     0x8    addi gp,gp,406 # ffffffff8400c19a <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x1f
    0x84000010    0x10    addi sp,sp,-12 # ffffffff8401f000 <tlbLockCount>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff8400160e <init_kernel>
    0x8400001c    0x1c    auipc ra,0x2
    0x84000020    0x20    addi ra,ra,866 # ffffffff8400237e <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section fastpath_reply_recv (175 of 292)
========================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 367 instructions.

RVC_TFFTFFT__T____TF.
Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

RVC_FTTTFT________FT.
Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

11 stack accesses found. Annotated code for `fastpath_reply_recv`:

    0x8400b4a6      0x0    addi sp,sp,-96
    0x8400b4a8      0x2    sd ra,88(sp)          ; stack access
    0x8400b4aa      0x4    sd s0,80(sp)          ; stack access
    0x8400b4ac      0x6    sd s1,72(sp)          ; stack access
    0x8400b4ae      0x8    sd s2,64(sp)          ; stack access
    0x8400b4b0      0xa    sd s3,56(sp)          ; stack access
    0x8400b4b2      0xc    sd s4,48(sp)          ; stack access
    0x8400b4b4      0xe    sd s5,40(sp)          ; stack access
    0x8400b4b6     0x10    sd s6,32(sp)          ; stack access
    0x8400b4b8     0x12    sd s7,24(sp)          ; stack access
    0x8400b4ba     0x14    sd s8,16(sp)          ; stack access
    0x8400b4bc     0x16    sd s9,8(sp)           ; stack access
    0x8400b4be     0x18    mv s1,a1
    0x8400b4c0     0x1a    auipc s2,0x14
    0x8400b4c4     0x1e    ld s2,-1128(s2) # ffffffff8401f058 <ksCurThread>
    0x8400b4c8     0x22    ld a1,312(s2)
    0x8400b4cc     0x26    andi a4,s1,511
    0x8400b4d0     0x2a    li a5,4
    0x8400b4d2     0x2c    bltu a5,a4,ffffffff8400b68c <fastpath_reply_recv+0x1e6>
    0x8400b4d6     0x30    andi a1,a1,15
    0x8400b4d8     0x32    bnez a1,ffffffff8400b68c <fastpath_reply_recv+0x1e6>
    0x8400b4dc     0x36    andi a5,s2,-1024
    0x8400b4e0     0x3a    ld a4,0(a5)
    0x8400b4e2     0x3c    ld s0,8(a5)
    0x8400b4e4     0x3e    srli a3,a4,0x3b
    0x8400b4e8     0x42    li a5,10
    0x8400b4ea     0x44    bne a3,a5,ffffffff8400b69c <fastpath_reply_recv+0x1f6>
    0x8400b4ee     0x48    mv s4,s0
    0x8400b4f0     0x4a    mv a5,a4
    0x8400b4f2     0x4c    mv t1,a1
    0x8400b4f4     0x4e    li t0,64
    0x8400b4f8     0x52    lui t4,0xfc000
    0x8400b4fc     0x56    srli t4,t4,0x19
    0x8400b500     0x5a    li t3,1
    0x8400b502     0x5c    slli t3,t3,0x26
    0x8400b504     0x5e    li t5,-1
    0x8400b506     0x60    slli t5,t5,0x27
    0x8400b508     0x62    li t2,63
    0x8400b50c     0x66    li s3,10
    0x8400b50e     0x68    srli a6,a5,0x35
    0x8400b512     0x6c    andi a6,a6,63
    0x8400b516     0x70    srli a7,a5,0x2f
    0x8400b51a     0x74    andi a7,a7,63
    0x8400b51e     0x78    sll a3,a0,t1
    0x8400b522     0x7c    beqz a6,ffffffff8400b532 <fastpath_reply_recv+0x8c>
    0x8400b526     0x80    subw t6,t0,a6
    0x8400b52a     0x84    srl t6,a3,t6
    0x8400b52e     0x88    bne t6,s4,ffffffff8400b69c <fastpath_reply_recv+0x1f6>
    0x8400b532     0x8c    sll a3,a3,a6
    0x8400b536     0x90    subw t6,t0,a7
    0x8400b53a     0x94    srl a3,a3,t6
    0x8400b53e     0x98    slli a3,a3,0x5
    0x8400b540     0x9a    slli a5,a5,0x1
    0x8400b542     0x9c    and t6,a5,t4
    0x8400b546     0xa0    and a5,a5,t3
    0x8400b54a     0xa4    beqz a5,ffffffff8400b550 <fastpath_reply_recv+0xaa>
    0x8400b54c     0xa6    or t6,t6,t5
    0x8400b550     0xaa    add a3,a3,t6
    0x8400b552     0xac    ld a5,0(a3)
    0x8400b554     0xae    ld s4,8(a3)
    0x8400b558     0xb2    add a6,a6,a7
    0x8400b55a     0xb4    add t1,t1,a6
    0x8400b55c     0xb6    bgeu t2,t1,ffffffff8400b692 <fastpath_reply_recv+0x1ec>
    0x8400b560     0xba    li a3,64
    0x8400b564     0xbe    bltu a3,t1,ffffffff8400b69c <fastpath_reply_recv+0x1f6>
    0x8400b568     0xc2    srli a3,a5,0x3b
    0x8400b56c     0xc6    li a0,4
    0x8400b56e     0xc8    bne a3,a0,ffffffff8400b69c <fastpath_reply_recv+0x1f6>
    0x8400b572     0xcc    srli a3,a5,0x38
    0x8400b576     0xd0    andi a3,a3,1
    0x8400b578     0xd2    beqz a3,ffffffff8400b69c <fastpath_reply_recv+0x1f6>
    0x8400b57c     0xd6    li t4,64
    0x8400b580     0xda    lui a3,0xfc000
    0x8400b584     0xde    srli t5,a3,0x19
    0x8400b588     0xe2    li a3,1
    0x8400b58a     0xe4    slli t3,a3,0x26
    0x8400b58e     0xe8    li a3,-1
    0x8400b590     0xea    slli t1,a3,0x27
    0x8400b594     0xee    li t6,63
    0x8400b598     0xf2    li t0,10
    0x8400b59a     0xf4    srli a0,a4,0x35
    0x8400b59e     0xf8    andi a0,a0,63
    0x8400b5a2     0xfc    srli a6,a4,0x2f
    0x8400b5a6    0x100    andi a6,a6,63
    0x8400b5aa    0x104    sll a3,a2,a1
    0x8400b5ae    0x108    beqz a0,ffffffff8400b5bc <fastpath_reply_recv+0x116>
    0x8400b5b0    0x10a    subw a7,t4,a0
    0x8400b5b4    0x10e    srl a7,a3,a7
    0x8400b5b8    0x112    bne s0,a7,ffffffff8400b6ac <fastpath_reply_recv+0x206>
    0x8400b5bc    0x116    sll a3,a3,a0
    0x8400b5c0    0x11a    subw a7,t4,a6
    0x8400b5c4    0x11e    srl a3,a3,a7
    0x8400b5c8    0x122    slli a3,a3,0x5
    0x8400b5ca    0x124    slli a4,a4,0x1
    0x8400b5cc    0x126    and a7,a4,t5
    0x8400b5d0    0x12a    and a4,a4,t3
    0x8400b5d4    0x12e    beqz a4,ffffffff8400b5da <fastpath_reply_recv+0x134>
    0x8400b5d6    0x130    or a7,a7,t1
    0x8400b5da    0x134    add a3,a3,a7
    0x8400b5dc    0x136    ld a4,0(a3)
    0x8400b5de    0x138    ld s0,8(a3)
    0x8400b5e0    0x13a    add a0,a0,a6
    0x8400b5e2    0x13c    add a1,a1,a0
    0x8400b5e4    0x13e    bgeu t6,a1,ffffffff8400b6a2 <fastpath_reply_recv+0x1fc>
    0x8400b5e8    0x142    li a3,64
    0x8400b5ec    0x146    bltu a3,a1,ffffffff8400b6ac <fastpath_reply_recv+0x206>
    0x8400b5f0    0x14a    srli a4,a4,0x3b
    0x8400b5f2    0x14c    li a3,8
    0x8400b5f4    0x14e    bne a4,a3,ffffffff8400b6ac <fastpath_reply_recv+0x206>
    0x8400b5f8    0x152    ld a4,304(s2)
    0x8400b5fc    0x156    bnez a4,ffffffff8400b6b2 <fastpath_reply_recv+0x20c>
    0x8400b5fe    0x158    slli s4,a5,0x19
    0x8400b602    0x15c    srli s4,s4,0x19
    0x8400b606    0x160    srli a5,a5,0x26
    0x8400b608    0x162    andi a5,a5,1
    0x8400b60a    0x164    beqz a5,ffffffff8400b614 <fastpath_reply_recv+0x16e>
    0x8400b60c    0x166    li a5,-1
    0x8400b60e    0x168    slli a5,a5,0x27
    0x8400b610    0x16a    or s4,s4,a5
    0x8400b614    0x16e    mv s8,s4
    0x8400b616    0x170    ld a5,0(s4)
    0x8400b61a    0x174    andi a5,a5,3
    0x8400b61c    0x176    li a4,1
    0x8400b61e    0x178    beq a5,a4,ffffffff8400b6c2 <fastpath_reply_recv+0x21c>
    0x8400b622    0x17c    mv s7,s0
    0x8400b624    0x17e    ld s3,0(s0)
    0x8400b628    0x182    beqz s3,ffffffff8400b6c8 <fastpath_reply_recv+0x222>
    0x8400b62c    0x186    ld a5,16(s0)
    0x8400b62e    0x188    srli a4,a5,0x30
    0x8400b632    0x18c    andi a4,a4,1
    0x8400b634    0x18e    beqz a4,ffffffff8400b6c8 <fastpath_reply_recv+0x222>
    0x8400b636    0x190    slli a4,a5,0x19
    0x8400b63a    0x194    srli a4,a4,0x19
    0x8400b63c    0x196    srli a5,a5,0x26
    0x8400b63e    0x198    andi a5,a5,1
    0x8400b640    0x19a    beqz a5,ffffffff8400b648 <fastpath_reply_recv+0x1a2>
    0x8400b642    0x19c    li a5,-1
    0x8400b644    0x19e    slli a5,a5,0x27
    0x8400b646    0x1a0    or a4,a4,a5
    0x8400b648    0x1a2    ld a5,368(s2)
    0x8400b64c    0x1a6    bne a5,a4,ffffffff8400b6c8 <fastpath_reply_recv+0x222>
    0x8400b650    0x1aa    ld a5,312(s3)
    0x8400b654    0x1ae    andi a5,a5,15
    0x8400b656    0x1b0    bnez a5,ffffffff8400b6ce <fastpath_reply_recv+0x228>
    0x8400b658    0x1b2    andi a5,s3,-1024
    0x8400b65c    0x1b6    ld a4,32(a5)
    0x8400b65e    0x1b8    ld s6,40(a5)
    0x8400b662    0x1bc    srli a5,s6,0x9
    0x8400b666    0x1c0    slli s5,a5,0x19
    0x8400b66a    0x1c4    srli s5,s5,0x19
    0x8400b66e    0x1c8    srli a5,a5,0x26
    0x8400b670    0x1ca    andi a5,a5,1
    0x8400b672    0x1cc    beqz a5,ffffffff8400b67c <fastpath_reply_recv+0x1d6>
    0x8400b674    0x1ce    li a5,-1
    0x8400b676    0x1d0    slli a5,a5,0x27
    0x8400b678    0x1d2    or s5,s5,a5
    0x8400b67c    0x1d6    srli a5,a4,0x3b
    0x8400b680    0x1da    li a3,3
    0x8400b682    0x1dc    beq a5,a3,ffffffff8400b6d4 <fastpath_reply_recv+0x22e>
    0x8400b686    0x1e0    li a0,-2
    0x8400b688    0x1e2    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b68c    0x1e6    li a0,-2
    0x8400b68e    0x1e8    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b692    0x1ec    srli a3,a5,0x3b
    0x8400b696    0x1f0    bne a3,s3,ffffffff8400b568 <fastpath_reply_recv+0xc2>
    0x8400b69a    0x1f4    j ffffffff8400b50e <fastpath_reply_recv+0x68>
    0x8400b69c    0x1f6    li a0,-2
    0x8400b69e    0x1f8    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b6a2    0x1fc    srli a3,a4,0x3b
    0x8400b6a6    0x200    bne a3,t0,ffffffff8400b5f0 <fastpath_reply_recv+0x14a>
    0x8400b6aa    0x204    j ffffffff8400b59a <fastpath_reply_recv+0xf4>
    0x8400b6ac    0x206    li a0,-2
    0x8400b6ae    0x208    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b6b2    0x20c    ld a4,0(a4)
    0x8400b6b4    0x20e    andi a4,a4,3
    0x8400b6b6    0x210    li a3,2
    0x8400b6b8    0x212    bne a4,a3,ffffffff8400b5fe <fastpath_reply_recv+0x158>
    0x8400b6bc    0x216    li a0,-2
    0x8400b6be    0x218    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b6c2    0x21c    li a0,-2
    0x8400b6c4    0x21e    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b6c8    0x222    li a0,-2
    0x8400b6ca    0x224    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b6ce    0x228    li a0,-2
    0x8400b6d0    0x22a    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b6d4    0x22e    srli a4,a4,0x27
    0x8400b6d6    0x230    andi a4,a4,1
    0x8400b6d8    0x232    beqz a4,ffffffff8400b686 <fastpath_reply_recv+0x1e0>
    0x8400b6da    0x234    auipc s9,0x14
    0x8400b6de    0x238    ld s9,-1730(s9) # ffffffff8401f018 <ksCurDomain>
    0x8400b6e2    0x23c    ld a1,360(s3)
    0x8400b6e6    0x240    mv a0,s9
    0x8400b6e8    0x242    jal ra,ffffffff8400b0f4 <isHighestPrio>
    0x8400b6ec    0x246    beqz a0,ffffffff8400b77e <fastpath_reply_recv+0x2d8>
    0x8400b6ee    0x248    ld a5,344(s3)
    0x8400b6f2    0x24c    bne a5,s9,ffffffff8400b784 <fastpath_reply_recv+0x2de>
    0x8400b6f6    0x250    ld a3,368(s3)
    0x8400b6fa    0x254    bnez a3,ffffffff8400b78a <fastpath_reply_recv+0x2e4>
    0x8400b6fc    0x256    ori s4,s4,3
    0x8400b700    0x25a    sd s4,280(s2)
    0x8400b704    0x25e    ld a4,288(s3)
    0x8400b708    0x262    li a5,-1
    0x8400b70a    0x264    slli a5,a5,0x28
    0x8400b70c    0x266    addi a5,a5,31
    0x8400b70e    0x268    and a4,a4,a5
    0x8400b710    0x26a    sd a4,288(s3)
    0x8400b714    0x26e    ld a4,288(s2)
    0x8400b718    0x272    and a5,a5,a4
    0x8400b71a    0x274    slli s0,s0,0x1
    0x8400b71c    0x276    lui a4,0xe0000
    0x8400b720    0x27a    srli a4,a4,0x18
    0x8400b722    0x27c    and s0,s0,a4
    0x8400b724    0x27e    or s0,s0,a5
    0x8400b726    0x280    sd s0,288(s2)
    0x8400b72a    0x284    sd s2,0(s7)
    0x8400b72e    0x288    ld a4,0(s8)
    0x8400b732    0x28c    lui a5,0xf8000
    0x8400b736    0x290    srli a5,a5,0x19
    0x8400b738    0x292    and a5,a5,a4
    0x8400b73a    0x294    srli a4,a4,0x26
    0x8400b73c    0x296    andi a4,a4,1
    0x8400b73e    0x298    beqz a4,ffffffff8400b790 <fastpath_reply_recv+0x2ea>
    0x8400b740    0x29a    li a4,-1
    0x8400b742    0x29c    slli a4,a4,0x27
    0x8400b744    0x29e    or a5,a5,a4
    0x8400b746    0x2a0    auipc a4,0x14
    0x8400b74a    0x2a4    ld a4,-1774(a4) # ffffffff8401f058 <ksCurThread>
    0x8400b74e    0x2a8    ld a1,8(s8)
    0x8400b752    0x2ac    ld a6,360(a4)
    0x8400b756    0x2b0    mv a2,a5
    0x8400b758    0x2b2    ld a0,360(a2)
    0x8400b75c    0x2b6    bltu a0,a6,ffffffff8400b7e6 <fastpath_reply_recv+0x340>
    0x8400b760    0x2ba    sd a4,408(a2)
    0x8400b764    0x2be    bnez a3,ffffffff8400b7fe <fastpath_reply_recv+0x358>
    0x8400b766    0x2c0    mv a5,a4
    0x8400b768    0x2c2    sd a3,408(a4)
    0x8400b76c    0x2c6    sd a2,416(a4)
    0x8400b770    0x2ca    sd a1,8(s8)
    0x8400b774    0x2ce    ori a5,a5,2
    0x8400b778    0x2d2    sd a5,0(s8)
    0x8400b77c    0x2d6    j ffffffff8400b7ae <fastpath_reply_recv+0x308>
    0x8400b77e    0x2d8    li a0,-2
    0x8400b780    0x2da    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b784    0x2de    li a0,-2
    0x8400b786    0x2e0    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b78a    0x2e4    li a0,-2
    0x8400b78c    0x2e6    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b790    0x2ea    bnez a5,ffffffff8400b746 <fastpath_reply_recv+0x2a0>
    0x8400b792    0x2ec    auipc a5,0x14
    0x8400b796    0x2f0    ld a5,-1850(a5) # ffffffff8401f058 <ksCurThread>
    0x8400b79a    0x2f4    sd zero,416(a5)
    0x8400b79e    0x2f8    sd zero,408(a5)
    0x8400b7a2    0x2fc    sd a5,8(s8)
    0x8400b7a6    0x300    ori a5,a5,2
    0x8400b7aa    0x304    sd a5,0(s8)
    0x8400b7ae    0x308    ld a5,8(s7)
    0x8400b7b2    0x30c    slli a4,a5,0x19
    0x8400b7b6    0x310    srli a4,a4,0x19
    0x8400b7b8    0x312    srli a5,a5,0x26
    0x8400b7ba    0x314    andi a5,a5,1
    0x8400b7bc    0x316    beqz a5,ffffffff8400b804 <fastpath_reply_recv+0x35e>
    0x8400b7be    0x318    auipc a2,0x14
    0x8400b7c2    0x31c    ld a2,-1894(a2) # ffffffff8401f058 <ksCurThread>
    0x8400b7c6    0x320    ld a3,368(a2)
    0x8400b7ca    0x324    sd zero,368(a2)
    0x8400b7ce    0x328    sd a3,368(s3)
    0x8400b7d2    0x32c    sd s3,24(a3) # fffffffffc000018 <ki_end+0x77fdc018>
    0x8400b7d6    0x330    li a5,-1
    0x8400b7d8    0x332    slli a5,a5,0x27
    0x8400b7da    0x334    or a5,a5,a4
    0x8400b7dc    0x336    sd a5,32(a3)
    0x8400b7de    0x338    ld a4,16(s7)
    0x8400b7e2    0x33c    sd a4,16(a5)
    0x8400b7e4    0x33e    j ffffffff8400b822 <fastpath_reply_recv+0x37c>
    0x8400b7e6    0x340    ld a0,416(a2)
    0x8400b7ea    0x344    mv a3,a2
    0x8400b7ec    0x346    bnez a0,ffffffff8400b7fa <fastpath_reply_recv+0x354>
    0x8400b7ee    0x348    mv a1,a4
    0x8400b7f0    0x34a    sd a4,416(a2)
    0x8400b7f4    0x34e    mv a3,a2
    0x8400b7f6    0x350    mv a2,a0
    0x8400b7f8    0x352    j ffffffff8400b768 <fastpath_reply_recv+0x2c2>
    0x8400b7fa    0x354    mv a2,a0
    0x8400b7fc    0x356    j ffffffff8400b758 <fastpath_reply_recv+0x2b2>
    0x8400b7fe    0x358    mv a0,a2
    0x8400b800    0x35a    mv a2,a3
    0x8400b802    0x35c    j ffffffff8400b7f0 <fastpath_reply_recv+0x34a>
    0x8400b804    0x35e    auipc a2,0x14
    0x8400b808    0x362    ld a2,-1964(a2) # ffffffff8401f058 <ksCurThread>
    0x8400b80c    0x366    ld a3,368(a2)
    0x8400b810    0x36a    sd zero,368(a2)
    0x8400b814    0x36e    sd a3,368(s3)
    0x8400b818    0x372    sd s3,24(a3)
    0x8400b81c    0x376    mv a5,a4
    0x8400b81e    0x378    sd a4,32(a3)
    0x8400b820    0x37a    bnez a4,ffffffff8400b7de <fastpath_reply_recv+0x338>
    0x8400b822    0x37c    andi a3,s1,127
    0x8400b826    0x380    sd zero,8(s7)
    0x8400b82a    0x384    sd zero,16(s7)
    0x8400b82e    0x388    beqz a3,ffffffff8400b846 <fastpath_reply_recv+0x3a0>
    0x8400b830    0x38a    mv a5,a2
    0x8400b832    0x38c    addi a4,s3,88
    0x8400b836    0x390    slli a3,a3,0x3
    0x8400b838    0x392    add a2,a2,a3
    0x8400b83a    0x394    ld a3,88(a5)
    0x8400b83c    0x396    sd a3,0(a4)
    0x8400b83e    0x398    addi a5,a5,8
    0x8400b840    0x39a    addi a4,a4,8
    0x8400b842    0x39c    bne a5,a2,ffffffff8400b83a <fastpath_reply_recv+0x394>
    0x8400b846    0x3a0    li a5,1
    0x8400b848    0x3a2    sd a5,280(s3)
    0x8400b84c    0x3a6    slli a5,a5,0x26
    0x8400b84e    0x3a8    add a5,a5,s5
    0x8400b850    0x3aa    srli a5,a5,0xc
    0x8400b852    0x3ac    li a4,-1
    0x8400b854    0x3ae    srli s5,a4,0x14
    0x8400b858    0x3b2    and a5,a5,s5
    0x8400b85c    0x3b6    srli s6,s6,0x30
    0x8400b860    0x3ba    slli s6,s6,0x2c
    0x8400b862    0x3bc    or a5,a5,s6
    0x8400b866    0x3c0    slli a4,a4,0x3f
    0x8400b868    0x3c2    or a5,a5,a4
    0x8400b86a    0x3c4    csrw satp,a5
    0x8400b86e    0x3c8    sfence.vma
    0x8400b872    0x3cc    auipc a5,0x13
    0x8400b876    0x3d0    sd s3,2022(a5) # ffffffff8401f058 <ksCurThread>
    0x8400b87a    0x3d4    li a0,0
    0x8400b87c    0x3d6    lui a1,0xfffff
    0x8400b87e    0x3d8    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfdb1ff>
    0x8400b882    0x3dc    and a1,a1,s1
    0x8400b884    0x3de    mv t0,s3
    0x8400b886    0x3e0    ld ra,0(t0)
    0x8400b88a    0x3e4    ld sp,8(t0)
    0x8400b88e    0x3e8    ld gp,16(t0)
    0x8400b892    0x3ec    ld t2,48(t0)
    0x8400b896    0x3f0    ld s0,56(t0)
    0x8400b89a    0x3f4    ld s1,64(t0)
    0x8400b89e    0x3f8    ld a2,88(t0)
    0x8400b8a2    0x3fc    ld a3,96(t0)
    0x8400b8a6    0x400    ld a4,104(t0)
    0x8400b8aa    0x404    ld a5,112(t0)
    0x8400b8ae    0x408    ld a6,120(t0)
    0x8400b8b2    0x40c    ld a7,128(t0)
    0x8400b8b6    0x410    ld s2,136(t0)
    0x8400b8ba    0x414    ld s3,144(t0)
    0x8400b8be    0x418    ld s4,152(t0)
    0x8400b8c2    0x41c    ld s5,160(t0)
    0x8400b8c6    0x420    ld s6,168(t0)
    0x8400b8ca    0x424    ld s7,176(t0)
    0x8400b8ce    0x428    ld s8,184(t0)
    0x8400b8d2    0x42c    ld s9,192(t0)
    0x8400b8d6    0x430    ld s10,200(t0)
    0x8400b8da    0x434    ld s11,208(t0)
    0x8400b8de    0x438    ld t3,216(t0)
    0x8400b8e2    0x43c    ld t4,224(t0)
    0x8400b8e6    0x440    ld t5,232(t0)
    0x8400b8ea    0x444    ld t6,240(t0)
    0x8400b8ee    0x448    ld t1,24(t0)
    0x8400b8f2    0x44c    add tp,t1,zero
    0x8400b8f6    0x450    ld t1,272(t0)
    0x8400b8fa    0x454    csrw sepc,t1
    0x8400b8fe    0x458    csrw sscratch,t0
    0x8400b902    0x45c    ld t1,256(t0)
    0x8400b906    0x460    csrw sstatus,t1
    0x8400b90a    0x464    ld t1,40(t0)
    0x8400b90e    0x468    ld t0,32(t0)
    0x8400b912    0x46c    sret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
367 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 576 nodes.

Section fastpath_call (176 of 292)
==================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 269 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

9 stack accesses found. Annotated code for `fastpath_call`:

    0x8400b164      0x0    addi sp,sp,-80
    0x8400b166      0x2    sd ra,72(sp)          ; stack access
    0x8400b168      0x4    sd s0,64(sp)          ; stack access
    0x8400b16a      0x6    sd s1,56(sp)          ; stack access
    0x8400b16c      0x8    sd s2,48(sp)          ; stack access
    0x8400b16e      0xa    sd s3,40(sp)          ; stack access
    0x8400b170      0xc    sd s4,32(sp)          ; stack access
    0x8400b172      0xe    sd s5,24(sp)          ; stack access
    0x8400b174     0x10    sd s6,16(sp)          ; stack access
    0x8400b176     0x12    sd s7,8(sp)           ; stack access
    0x8400b178     0x14    auipc a6,0x14
    0x8400b17c     0x18    ld a6,-288(a6) # ffffffff8401f058 <ksCurThread>
    0x8400b180     0x1c    ld a4,312(a6)
    0x8400b184     0x20    andi a3,a1,511
    0x8400b188     0x24    li a5,4
    0x8400b18a     0x26    bltu a5,a3,ffffffff8400b284 <fastpath_call+0x120>
    0x8400b18e     0x2a    mv s2,a1
    0x8400b190     0x2c    andi a4,a4,15
    0x8400b192     0x2e    bnez a4,ffffffff8400b284 <fastpath_call+0x120>
    0x8400b194     0x30    andi a5,a6,-1024
    0x8400b198     0x34    ld s0,0(a5)
    0x8400b19a     0x36    ld s3,8(a5)
    0x8400b19e     0x3a    srli a3,s0,0x3b
    0x8400b1a2     0x3e    li a5,10
    0x8400b1a4     0x40    bne a3,a5,ffffffff8400b294 <fastpath_call+0x130>
    0x8400b1a8     0x44    li t4,64
    0x8400b1ac     0x48    lui a5,0xfc000
    0x8400b1b0     0x4c    srli t3,a5,0x19
    0x8400b1b4     0x50    li a5,1
    0x8400b1b6     0x52    slli t1,a5,0x26
    0x8400b1ba     0x56    li a5,-1
    0x8400b1bc     0x58    slli a7,a5,0x27
    0x8400b1c0     0x5c    li t5,63
    0x8400b1c4     0x60    li t6,10
    0x8400b1c6     0x62    srli a3,s0,0x35
    0x8400b1ca     0x66    andi a3,a3,63
    0x8400b1ce     0x6a    srli a2,s0,0x2f
    0x8400b1d2     0x6e    andi a2,a2,63
    0x8400b1d6     0x72    sll a5,a0,a4
    0x8400b1da     0x76    beqz a3,ffffffff8400b1e8 <fastpath_call+0x84>
    0x8400b1dc     0x78    subw a1,t4,a3
    0x8400b1e0     0x7c    srl a1,a5,a1
    0x8400b1e4     0x80    bne s3,a1,ffffffff8400b294 <fastpath_call+0x130>
    0x8400b1e8     0x84    sll a5,a5,a3
    0x8400b1ec     0x88    subw a1,t4,a2
    0x8400b1f0     0x8c    srl a5,a5,a1
    0x8400b1f4     0x90    slli a5,a5,0x5
    0x8400b1f6     0x92    slli s0,s0,0x1
    0x8400b1f8     0x94    and a1,s0,t3
    0x8400b1fc     0x98    and s0,s0,t1
    0x8400b200     0x9c    beqz s0,ffffffff8400b206 <fastpath_call+0xa2>
    0x8400b202     0x9e    or a1,a1,a7
    0x8400b206     0xa2    add a5,a5,a1
    0x8400b208     0xa4    ld s0,0(a5)
    0x8400b20a     0xa6    ld s3,8(a5) # fffffffffc000008 <ki_end+0x77fdc008>
    0x8400b20e     0xaa    add a3,a3,a2
    0x8400b210     0xac    add a4,a4,a3
    0x8400b212     0xae    bgeu t5,a4,ffffffff8400b28a <fastpath_call+0x126>
    0x8400b216     0xb2    li a5,64
    0x8400b21a     0xb6    bltu a5,a4,ffffffff8400b294 <fastpath_call+0x130>
    0x8400b21e     0xba    srli a5,s0,0x3b
    0x8400b222     0xbe    li a4,4
    0x8400b224     0xc0    bne a5,a4,ffffffff8400b294 <fastpath_call+0x130>
    0x8400b228     0xc4    srli a5,s0,0x37
    0x8400b22c     0xc8    andi a5,a5,1
    0x8400b22e     0xca    beqz a5,ffffffff8400b294 <fastpath_call+0x130>
    0x8400b230     0xcc    slli a5,s0,0x19
    0x8400b234     0xd0    srli a5,a5,0x19
    0x8400b236     0xd2    srli a4,s0,0x26
    0x8400b23a     0xd6    andi a4,a4,1
    0x8400b23c     0xd8    beqz a4,ffffffff8400b244 <fastpath_call+0xe0>
    0x8400b23e     0xda    li a4,-1
    0x8400b240     0xdc    slli a4,a4,0x27
    0x8400b242     0xde    or a5,a5,a4
    0x8400b244     0xe0    mv s6,a5
    0x8400b246     0xe2    ld s4,8(a5)
    0x8400b24a     0xe6    ld a5,0(a5)
    0x8400b24c     0xe8    andi a5,a5,3
    0x8400b24e     0xea    li a4,2
    0x8400b250     0xec    bne a5,a4,ffffffff8400b29a <fastpath_call+0x136>
    0x8400b254     0xf0    andi a5,s4,-1024
    0x8400b258     0xf4    ld a4,32(a5)
    0x8400b25a     0xf6    ld s5,40(a5)
    0x8400b25e     0xfa    srli a5,s5,0x9
    0x8400b262     0xfe    slli s1,a5,0x19
    0x8400b266    0x102    srli s1,s1,0x19
    0x8400b268    0x104    srli a5,a5,0x26
    0x8400b26a    0x106    andi a5,a5,1
    0x8400b26c    0x108    beqz a5,ffffffff8400b274 <fastpath_call+0x110>
    0x8400b26e    0x10a    li a5,-1
    0x8400b270    0x10c    slli a5,a5,0x27
    0x8400b272    0x10e    or s1,s1,a5
    0x8400b274    0x110    srli a5,a4,0x3b
    0x8400b278    0x114    li a3,3
    0x8400b27a    0x116    beq a5,a3,ffffffff8400b2a0 <fastpath_call+0x13c>
    0x8400b27e    0x11a    li a0,-1
    0x8400b280    0x11c    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b284    0x120    li a0,-1
    0x8400b286    0x122    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b28a    0x126    srli a5,s0,0x3b
    0x8400b28e    0x12a    bne a5,t6,ffffffff8400b21e <fastpath_call+0xba>
    0x8400b292    0x12e    j ffffffff8400b1c6 <fastpath_call+0x62>
    0x8400b294    0x130    li a0,-1
    0x8400b296    0x132    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b29a    0x136    li a0,-1
    0x8400b29c    0x138    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b2a0    0x13c    srli a4,a4,0x27
    0x8400b2a2    0x13e    andi a4,a4,1
    0x8400b2a4    0x140    beqz a4,ffffffff8400b27e <fastpath_call+0x11a>
    0x8400b2a6    0x142    auipc s7,0x14
    0x8400b2aa    0x146    ld s7,-654(s7) # ffffffff8401f018 <ksCurDomain>
    0x8400b2ae    0x14a    ld a1,360(s4)
    0x8400b2b2    0x14e    ld a5,360(a6)
    0x8400b2b6    0x152    bltu a1,a5,ffffffff8400b468 <fastpath_call+0x304>
    0x8400b2ba    0x156    srli a5,s0,0x39
    0x8400b2be    0x15a    srli s0,s0,0x3a
    0x8400b2c0    0x15c    or s0,s0,a5
    0x8400b2c2    0x15e    andi s0,s0,1
    0x8400b2c4    0x160    beqz s0,ffffffff8400b478 <fastpath_call+0x314>
    0x8400b2c8    0x164    ld a5,344(s4)
    0x8400b2cc    0x168    bne a5,s7,ffffffff8400b47e <fastpath_call+0x31a>
    0x8400b2d0    0x16c    ld a5,368(s4)
    0x8400b2d4    0x170    bnez a5,ffffffff8400b484 <fastpath_call+0x320>
    0x8400b2d8    0x174    ld a5,288(s4)
    0x8400b2dc    0x178    srli a5,a5,0x1
    0x8400b2de    0x17a    lui a1,0xe0000
    0x8400b2e2    0x17e    srli a1,a1,0x19
    0x8400b2e4    0x180    and a1,a1,a5
    0x8400b2e6    0x182    srli a5,a5,0x26
    0x8400b2e8    0x184    andi a5,a5,1
    0x8400b2ea    0x186    beqz a5,ffffffff8400b48a <fastpath_call+0x326>
    0x8400b2ee    0x18a    li a5,-1
    0x8400b2f0    0x18c    slli a5,a5,0x27
    0x8400b2f2    0x18e    or a1,a1,a5
    0x8400b2f4    0x190    mv a0,a1
    0x8400b2f6    0x192    ld a5,408(s4)
    0x8400b2fa    0x196    sd a5,8(s6)
    0x8400b2fe    0x19a    ld a5,408(s4)
    0x8400b302    0x19e    bnez a5,ffffffff8400b496 <fastpath_call+0x332>
    0x8400b306    0x1a2    sd zero,0(s6)
    0x8400b30a    0x1a6    auipc a7,0x14
    0x8400b30e    0x1aa    addi a7,a7,-690 # ffffffff8401f058 <ksCurThread>
    0x8400b312    0x1ae    ld a2,0(a7)
    0x8400b316    0x1b2    li a5,5
    0x8400b318    0x1b4    sd a5,280(a2)
    0x8400b31c    0x1b8    ld a4,288(s4)
    0x8400b320    0x1bc    li a5,-1
    0x8400b322    0x1be    slli a3,a5,0x28
    0x8400b326    0x1c2    addi a3,a3,31
    0x8400b328    0x1c4    and a4,a4,a3
    0x8400b32a    0x1c6    sd a4,288(s4)
    0x8400b32e    0x1ca    ld a4,288(a2)
    0x8400b332    0x1ce    and a3,a3,a4
    0x8400b334    0x1d0    slli a4,a1,0x1
    0x8400b338    0x1d4    lui a6,0xe0000
    0x8400b33c    0x1d8    srli a6,a6,0x18
    0x8400b340    0x1dc    and a4,a4,a6
    0x8400b344    0x1e0    or a4,a4,a3
    0x8400b346    0x1e2    sd a4,288(a2)
    0x8400b34a    0x1e6    sd a2,0(a0)
    0x8400b34c    0x1e8    ld a2,0(a7)
    0x8400b350    0x1ec    ld a4,368(a2)
    0x8400b354    0x1f0    sd s4,24(a4)
    0x8400b358    0x1f4    sd a4,368(s4)
    0x8400b35c    0x1f8    sd zero,368(a2)
    0x8400b360    0x1fc    ld a3,32(a4)
    0x8400b362    0x1fe    srli a5,a5,0x19
    0x8400b364    0x200    and a5,a5,a3
    0x8400b366    0x202    sd a5,8(a0)
    0x8400b368    0x204    bnez a3,ffffffff8400b49c <fastpath_call+0x338>
    0x8400b36c    0x208    andi a3,s2,127
    0x8400b370    0x20c    slli a5,a4,0x19
    0x8400b374    0x210    srli a5,a5,0x19
    0x8400b376    0x212    li a1,1
    0x8400b378    0x214    slli a1,a1,0x30
    0x8400b37a    0x216    or a5,a5,a1
    0x8400b37c    0x218    sd a5,16(a0)
    0x8400b37e    0x21a    sd a0,32(a4)
    0x8400b380    0x21c    beqz a3,ffffffff8400b398 <fastpath_call+0x234>
    0x8400b382    0x21e    mv a5,a2
    0x8400b384    0x220    addi a4,s4,88
    0x8400b388    0x224    slli a3,a3,0x3
    0x8400b38a    0x226    add a2,a2,a3
    0x8400b38c    0x228    ld a3,88(a5)
    0x8400b38e    0x22a    sd a3,0(a4)
    0x8400b390    0x22c    addi a5,a5,8
    0x8400b392    0x22e    addi a4,a4,8
    0x8400b394    0x230    bne a2,a5,ffffffff8400b38c <fastpath_call+0x228>
    0x8400b398    0x234    li a5,1
    0x8400b39a    0x236    sd a5,280(s4)
    0x8400b39e    0x23a    slli a5,a5,0x26
    0x8400b3a0    0x23c    add a5,a5,s1
    0x8400b3a2    0x23e    srli a5,a5,0xc
    0x8400b3a4    0x240    li a4,-1
    0x8400b3a6    0x242    srli s1,a4,0x14
    0x8400b3aa    0x246    and a5,a5,s1
    0x8400b3ac    0x248    srli s5,s5,0x30
    0x8400b3b0    0x24c    slli s5,s5,0x2c
    0x8400b3b2    0x24e    or a5,a5,s5
    0x8400b3b6    0x252    slli a4,a4,0x3f
    0x8400b3b8    0x254    or a5,a5,a4
    0x8400b3ba    0x256    csrw satp,a5
    0x8400b3be    0x25a    sfence.vma
    0x8400b3c2    0x25e    auipc a5,0x14
    0x8400b3c6    0x262    sd s4,-874(a5) # ffffffff8401f058 <ksCurThread>
    0x8400b3ca    0x266    mv a0,s3
    0x8400b3cc    0x268    lui a1,0xfffff
    0x8400b3ce    0x26a    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfdb1ff>
    0x8400b3d2    0x26e    and a1,s2,a1
    0x8400b3d6    0x272    mv t0,s4
    0x8400b3d8    0x274    ld ra,0(t0)
    0x8400b3dc    0x278    ld sp,8(t0)
    0x8400b3e0    0x27c    ld gp,16(t0)
    0x8400b3e4    0x280    ld t2,48(t0)
    0x8400b3e8    0x284    ld s0,56(t0)
    0x8400b3ec    0x288    ld s1,64(t0)
    0x8400b3f0    0x28c    ld a2,88(t0)
    0x8400b3f4    0x290    ld a3,96(t0)
    0x8400b3f8    0x294    ld a4,104(t0)
    0x8400b3fc    0x298    ld a5,112(t0)
    0x8400b400    0x29c    ld a6,120(t0)
    0x8400b404    0x2a0    ld a7,128(t0)
    0x8400b408    0x2a4    ld s2,136(t0)
    0x8400b40c    0x2a8    ld s3,144(t0)
    0x8400b410    0x2ac    ld s4,152(t0)
    0x8400b414    0x2b0    ld s5,160(t0)
    0x8400b418    0x2b4    ld s6,168(t0)
    0x8400b41c    0x2b8    ld s7,176(t0)
    0x8400b420    0x2bc    ld s8,184(t0)
    0x8400b424    0x2c0    ld s9,192(t0)
    0x8400b428    0x2c4    ld s10,200(t0)
    0x8400b42c    0x2c8    ld s11,208(t0)
    0x8400b430    0x2cc    ld t3,216(t0)
    0x8400b434    0x2d0    ld t4,224(t0)
    0x8400b438    0x2d4    ld t5,232(t0)
    0x8400b43c    0x2d8    ld t6,240(t0)
    0x8400b440    0x2dc    ld t1,24(t0)
    0x8400b444    0x2e0    add tp,t1,zero
    0x8400b448    0x2e4    ld t1,272(t0)
    0x8400b44c    0x2e8    csrw sepc,t1
    0x8400b450    0x2ec    csrw sscratch,t0
    0x8400b454    0x2f0    ld t1,256(t0)
    0x8400b458    0x2f4    csrw sstatus,t1
    0x8400b45c    0x2f8    ld t1,40(t0)
    0x8400b460    0x2fc    ld t0,32(t0)
    0x8400b464    0x300    sret
    0x8400b468    0x304    mv a0,s7
    0x8400b46a    0x306    jal ra,ffffffff8400b0f4 <isHighestPrio>
    0x8400b46e    0x30a    bnez a0,ffffffff8400b2ba <fastpath_call+0x156>
    0x8400b472    0x30e    li a0,-1
    0x8400b474    0x310    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b478    0x314    li a0,-1
    0x8400b47a    0x316    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b47e    0x31a    li a0,-1
    0x8400b480    0x31c    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b484    0x320    li a0,-1
    0x8400b486    0x322    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b48a    0x326    bnez a1,ffffffff8400b492 <fastpath_call+0x32e>
    0x8400b48c    0x328    li a0,-1
    0x8400b48e    0x32a    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b492    0x32e    mv a0,a1
    0x8400b494    0x330    j ffffffff8400b2f6 <fastpath_call+0x192>
    0x8400b496    0x332    sd zero,416(a5)
    0x8400b49a    0x336    j ffffffff8400b30a <fastpath_call+0x1a6>
    0x8400b49c    0x338    li a5,-1
    0x8400b49e    0x33a    srli a5,a5,0x19
    0x8400b4a0    0x33c    and a5,a5,a1
    0x8400b4a2    0x33e    sd a5,16(a3)
    0x8400b4a4    0x340    j ffffffff8400b36c <fastpath_call+0x208>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
269 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 421 nodes.

Section c_handle_interrupt (177 of 292)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x8400aad4    0x0    addi sp,sp,-16
    0x8400aad6    0x2    sd ra,8(sp)           ; stack access
    0x8400aad8    0x4    jal ra,ffffffff8400a9f0 <handleInterruptEntry>
    0x8400aadc    0x8    jal ra,ffffffff8400237e <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section performPageTableInvocationUnmap (178 of 292)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 47 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x840092ec     0x0    addi sp,sp,-48
    0x840092ee     0x2    sd ra,40(sp)          ; stack access
    0x840092f0     0x4    sd s0,32(sp)          ; stack access
    0x840092f2     0x6    sd s1,24(sp)          ; stack access
    0x840092f4     0x8    sd a1,8(sp)           ; stack access
    0x840092f6     0xa    mv s0,a2
    0x840092f8     0xc    srli a4,a0,0x27
    0x840092fc    0x10    andi a4,a4,1
    0x840092fe    0x12    beqz a4,ffffffff84009340 <performPageTableInvocationUnmap+0x54>
    0x84009300    0x14    mv a5,a0
    0x84009302    0x16    mv a3,a1
    0x84009304    0x18    srli a4,a1,0x9
    0x84009308    0x1c    slli a0,a4,0x19
    0x8400930c    0x20    srli a0,a0,0x19
    0x8400930e    0x22    srli a4,a4,0x26
    0x84009310    0x24    andi a4,a4,1
    0x84009312    0x26    beqz a4,ffffffff8400931a <performPageTableInvocationUnmap+0x2e>
    0x84009314    0x28    li a4,-1
    0x84009316    0x2a    slli a4,a4,0x27
    0x84009318    0x2c    or a0,a0,a4
    0x8400931a    0x2e    mv s1,a0
    0x8400931c    0x30    srli a0,a3,0x30
    0x84009320    0x34    slli a1,a5,0x19
    0x84009324    0x38    srli a1,a1,0x19
    0x84009326    0x3a    srli a5,a5,0x26
    0x84009328    0x3c    andi a5,a5,1
    0x8400932a    0x3e    beqz a5,ffffffff84009332 <performPageTableInvocationUnmap+0x46>
    0x8400932c    0x40    li a5,-1
    0x8400932e    0x42    slli a5,a5,0x27
    0x84009330    0x44    or a1,a1,a5
    0x84009332    0x46    mv a2,s1
    0x84009334    0x48    jal ra,ffffffff84002a6c <unmapPageTable>
    0x84009338    0x4c    lui a1,0x1
    0x8400933a    0x4e    mv a0,s1
    0x8400933c    0x50    jal ra,ffffffff840092da <memzero>
    0x84009340    0x54    ld a4,0(s0)
    0x84009342    0x56    li a5,-1
    0x84009344    0x58    slli a5,a5,0x27
    0x84009346    0x5a    addi a5,a5,-1
    0x84009348    0x5c    and a5,a5,a4
    0x8400934a    0x5e    sd a5,0(s0)
    0x8400934c    0x60    li a0,0
    0x8400934e    0x62    ld ra,40(sp)          ; stack access
    0x84009350    0x64    ld s0,32(sp)          ; stack access
    0x84009352    0x66    ld s1,24(sp)          ; stack access
    0x84009354    0x68    addi sp,sp,48
    0x84009356    0x6a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 65 nodes.

Section replyFromKernel_error (179 of 292)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x840091fc     0x0    addi sp,sp,-16
    0x840091fe     0x2    sd ra,8(sp)           ; stack access
    0x84009200     0x4    sd s0,0(sp)           ; stack access
    0x84009202     0x6    mv s0,a0
    0x84009204     0x8    mv a1,a0
    0x84009206     0xa    li a0,1
    0x84009208     0xc    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x8400920c    0x10    mv a1,a0
    0x8400920e    0x12    sd zero,72(s0)
    0x84009212    0x16    mv a0,s0
    0x84009214    0x18    jal ra,ffffffff84009160 <setMRs_syscall_error>
    0x84009218    0x1c    auipc a5,0x4
    0x8400921c    0x20    ld a5,-1496(a5) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009220    0x24    slli a5,a5,0xc
    0x84009222    0x26    andi a0,a0,127
    0x84009226    0x2a    or a5,a5,a0
    0x84009228    0x2c    sd a5,80(s0)
    0x8400922a    0x2e    ld ra,8(sp)           ; stack access
    0x8400922c    0x30    ld s0,0(sp)           ; stack access
    0x8400922e    0x32    addi sp,sp,16
    0x84009230    0x34    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 31 nodes.

Section setMRs_syscall_error (180 of 292)
=========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 54 instructions.
Switch found.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x84009160     0x0    addi sp,sp,-16
    0x84009162     0x2    sd ra,8(sp)           ; stack access
    0x84009164     0x4    mv a5,a0
    0x84009166     0x6    auipc a0,0x4
    0x8400916a     0xa    ld a0,-1318(a0) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400916e     0xe    li a4,10
    0x84009170    0x10    bltu a4,a0,ffffffff840091f0 <setMRs_syscall_error+0x90>
    0x84009174    0x14    slli a3,a0,0x2
    0x84009178    0x18    auipc a2,0x3
    0x8400917c    0x1c    addi a2,a2,-976 # ffffffff8400bda8 <msgRegisters+0x400>
    0x84009180    0x20    add a3,a3,a2
    0x84009182    0x22    lw a4,0(a3)
    0x84009184    0x24    add a4,a4,a2
    0x84009186    0x26    jr a4
    0x84009188    0x28    auipc a4,0x4
    0x8400918c    0x2c    ld a4,-1400(a4) # ffffffff8400cc10 <current_syscall_error>
    0x84009190    0x30    sd a4,88(a5)
    0x84009192    0x32    j ffffffff840091f6 <setMRs_syscall_error+0x96>
    0x84009194    0x34    auipc a4,0x4
    0x84009198    0x38    ld a4,-1404(a4) # ffffffff8400cc18 <current_syscall_error+0x8>
    0x8400919c    0x3c    sd a4,88(a5)
    0x8400919e    0x3e    li a0,1
    0x840091a0    0x40    j ffffffff840091f6 <setMRs_syscall_error+0x96>
    0x840091a2    0x42    auipc a4,0x3
    0x840091a6    0x46    addi a4,a4,1630 # ffffffff8400c800 <riscvKSASIDTable>
    0x840091aa    0x4a    ld a3,1056(a4)
    0x840091ae    0x4e    sd a3,88(a5)
    0x840091b0    0x50    ld a4,1064(a4)
    0x840091b4    0x54    sd a4,96(a5)
    0x840091b6    0x56    li a0,2
    0x840091b8    0x58    j ffffffff840091f6 <setMRs_syscall_error+0x96>
    0x840091ba    0x5a    auipc a3,0x3
    0x840091be    0x5e    addi a3,a3,1606 # ffffffff8400c800 <riscvKSASIDTable>
    0x840091c2    0x62    ld a4,1080(a3)
    0x840091c6    0x66    snez a4,a4
    0x840091ca    0x6a    sd a4,88(a5)
    0x840091cc    0x6c    li a4,1
    0x840091ce    0x6e    ld a2,1024(a3)
    0x840091d2    0x72    ld a3,1032(a3)
    0x840091d6    0x76    mv a0,a5
    0x840091d8    0x78    jal ra,ffffffff84002430 <setMRs_lookup_failure>
    0x840091dc    0x7c    slli a0,a0,0x20
    0x840091de    0x7e    srli a0,a0,0x20
    0x840091e0    0x80    j ffffffff840091f6 <setMRs_syscall_error+0x96>
    0x840091e2    0x82    auipc a4,0x4
    0x840091e6    0x86    ld a4,-1458(a4) # ffffffff8400cc30 <current_syscall_error+0x20>
    0x840091ea    0x8a    sd a4,88(a5)
    0x840091ec    0x8c    li a0,1
    0x840091ee    0x8e    j ffffffff840091f6 <setMRs_syscall_error+0x96>
    0x840091f0    0x90    jal ra,ffffffff84002424 <halt>
    0x840091f4    0x94    li a0,0
    0x840091f6    0x96    ld ra,8(sp)           ; stack access
    0x840091f8    0x98    addi sp,sp,16
    0x840091fa    0x9a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 101 nodes.

Section decodeUnbindNotification (181 of 292)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 31 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x84008f94     0x0    addi sp,sp,-32
    0x84008f96     0x2    sd ra,24(sp)          ; stack access
    0x84008f98     0x4    sd s0,16(sp)          ; stack access
    0x84008f9a     0x6    sd a0,0(sp)           ; stack access
    0x84008f9c     0x8    sd a1,8(sp)           ; stack access
    0x84008f9e     0xa    slli s0,a0,0x19
    0x84008fa2     0xe    srli s0,s0,0x19
    0x84008fa4    0x10    srli a0,a0,0x26
    0x84008fa6    0x12    andi a0,a0,1
    0x84008fa8    0x14    beqz a0,ffffffff84008fb0 <decodeUnbindNotification+0x1c>
    0x84008faa    0x16    li a5,-1
    0x84008fac    0x18    slli a5,a5,0x27
    0x84008fae    0x1a    or s0,s0,a5
    0x84008fb0    0x1c    ld a5,304(s0)
    0x84008fb4    0x20    beqz a5,ffffffff84008fd4 <decodeUnbindNotification+0x40>
    0x84008fb6    0x22    li a1,2
    0x84008fb8    0x24    auipc a0,0x16
    0x84008fbc    0x28    ld a0,160(a0) # ffffffff8401f058 <ksCurThread>
    0x84008fc0    0x2c    jal ra,ffffffff84004a52 <setThreadState>
    0x84008fc4    0x30    li a1,0
    0x84008fc6    0x32    mv a0,s0
    0x84008fc8    0x34    jal ra,ffffffff84008eb0 <invokeTCB_NotificationControl>
    0x84008fcc    0x38    ld ra,24(sp)          ; stack access
    0x84008fce    0x3a    ld s0,16(sp)          ; stack access
    0x84008fd0    0x3c    addi sp,sp,32
    0x84008fd2    0x3e    ret
    0x84008fd4    0x40    li a5,3
    0x84008fd6    0x42    auipc a4,0x4
    0x84008fda    0x46    sd a5,-918(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008fde    0x4a    li a0,3
    0x84008fe0    0x4c    j ffffffff84008fcc <decodeUnbindNotification+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 47 nodes.

Section decodeBindNotification (182 of 292)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 80 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeBindNotification`:

    0x84008ec8     0x0    addi sp,sp,-48
    0x84008eca     0x2    sd ra,40(sp)          ; stack access
    0x84008ecc     0x4    sd s0,32(sp)          ; stack access
    0x84008ece     0x6    sd s1,24(sp)          ; stack access
    0x84008ed0     0x8    sd a0,0(sp)           ; stack access
    0x84008ed2     0xa    sd a1,8(sp)           ; stack access
    0x84008ed4     0xc    auipc a3,0x4
    0x84008ed8    0x10    ld a3,444(a3) # ffffffff8400d090 <current_extra_caps>
    0x84008edc    0x14    beqz a3,ffffffff84008f36 <decodeBindNotification+0x6e>
    0x84008ede    0x16    ld a5,0(sp)           ; stack access
    0x84008ee0    0x18    slli a4,a5,0x19
    0x84008ee4    0x1c    srli a4,a4,0x19
    0x84008ee6    0x1e    srli a5,a5,0x26
    0x84008ee8    0x20    andi a5,a5,1
    0x84008eea    0x22    beqz a5,ffffffff84008ef2 <decodeBindNotification+0x2a>
    0x84008eec    0x24    li a5,-1
    0x84008eee    0x26    slli a5,a5,0x27
    0x84008ef0    0x28    or a4,a4,a5
    0x84008ef2    0x2a    mv s0,a4
    0x84008ef4    0x2c    ld a5,304(a4)
    0x84008ef8    0x30    bnez a5,ffffffff84008f44 <decodeBindNotification+0x7c>
    0x84008efa    0x32    ld a5,0(a3)
    0x84008efc    0x34    srli a3,a5,0x3b
    0x84008f00    0x38    li a4,6
    0x84008f02    0x3a    bne a3,a4,ffffffff84008f5a <decodeBindNotification+0x92>
    0x84008f06    0x3e    slli a4,a5,0x19
    0x84008f0a    0x42    srli a4,a4,0x19
    0x84008f0c    0x44    srli a3,a5,0x26
    0x84008f10    0x48    andi a3,a3,1
    0x84008f12    0x4a    beqz a3,ffffffff84008f1a <decodeBindNotification+0x52>
    0x84008f14    0x4c    li a3,-1
    0x84008f16    0x4e    slli a3,a3,0x27
    0x84008f18    0x50    or a4,a4,a3
    0x84008f1a    0x52    mv s1,a4
    0x84008f1c    0x54    srli a5,a5,0x3a
    0x84008f1e    0x56    andi a5,a5,1
    0x84008f20    0x58    beqz a5,ffffffff84008f68 <decodeBindNotification+0xa0>
    0x84008f22    0x5a    ld a5,8(a4)
    0x84008f24    0x5c    slli a5,a5,0x19
    0x84008f26    0x5e    beqz a5,ffffffff84008f76 <decodeBindNotification+0xae>
    0x84008f28    0x60    li a5,3
    0x84008f2a    0x62    auipc a4,0x4
    0x84008f2e    0x66    sd a5,-746(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008f32    0x6a    li a0,3
    0x84008f34    0x6c    j ffffffff84008f50 <decodeBindNotification+0x88>
    0x84008f36    0x6e    li a5,7
    0x84008f38    0x70    auipc a4,0x4
    0x84008f3c    0x74    sd a5,-760(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008f40    0x78    li a0,3
    0x84008f42    0x7a    j ffffffff84008f50 <decodeBindNotification+0x88>
    0x84008f44    0x7c    li a5,3
    0x84008f46    0x7e    auipc a4,0x4
    0x84008f4a    0x82    sd a5,-774(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008f4e    0x86    li a0,3
    0x84008f50    0x88    ld ra,40(sp)          ; stack access
    0x84008f52    0x8a    ld s0,32(sp)          ; stack access
    0x84008f54    0x8c    ld s1,24(sp)          ; stack access
    0x84008f56    0x8e    addi sp,sp,48
    0x84008f58    0x90    ret
    0x84008f5a    0x92    li a5,3
    0x84008f5c    0x94    auipc a4,0x4
    0x84008f60    0x98    sd a5,-796(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008f64    0x9c    li a0,3
    0x84008f66    0x9e    j ffffffff84008f50 <decodeBindNotification+0x88>
    0x84008f68    0xa0    li a5,3
    0x84008f6a    0xa2    auipc a4,0x4
    0x84008f6e    0xa6    sd a5,-810(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008f72    0xaa    li a0,3
    0x84008f74    0xac    j ffffffff84008f50 <decodeBindNotification+0x88>
    0x84008f76    0xae    ld a5,24(a4)
    0x84008f78    0xb0    slli a5,a5,0x19
    0x84008f7a    0xb2    bnez a5,ffffffff84008f28 <decodeBindNotification+0x60>
    0x84008f7c    0xb4    li a1,2
    0x84008f7e    0xb6    auipc a0,0x16
    0x84008f82    0xba    ld a0,218(a0) # ffffffff8401f058 <ksCurThread>
    0x84008f86    0xbe    jal ra,ffffffff84004a52 <setThreadState>
    0x84008f8a    0xc2    mv a1,s1
    0x84008f8c    0xc4    mv a0,s0
    0x84008f8e    0xc6    jal ra,ffffffff84008eb0 <invokeTCB_NotificationControl>
    0x84008f92    0xca    j ffffffff84008f50 <decodeBindNotification+0x88>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 119 nodes.

Section invokeTCB_NotificationControl (183 of 292)
==================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_NotificationControl`:

    0x84008eb0     0x0    addi sp,sp,-16
    0x84008eb2     0x2    sd ra,8(sp)           ; stack access
    0x84008eb4     0x4    beqz a1,ffffffff84008ec2 <invokeTCB_NotificationControl+0x12>
    0x84008eb6     0x6    jal ra,ffffffff84003fcc <bindNotification>
    0x84008eba     0xa    li a0,0
    0x84008ebc     0xc    ld ra,8(sp)           ; stack access
    0x84008ebe     0xe    addi sp,sp,16
    0x84008ec0    0x10    ret
    0x84008ec2    0x12    jal ra,ffffffff84003fb8 <unbindNotification>
    0x84008ec6    0x16    j ffffffff84008eba <invokeTCB_NotificationControl+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 17 nodes.

Section decodeWriteRegisters (184 of 292)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 57 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x84008e1c     0x0    addi sp,sp,-64
    0x84008e1e     0x2    sd ra,56(sp)          ; stack access
    0x84008e20     0x4    sd s0,48(sp)          ; stack access
    0x84008e22     0x6    sd s1,40(sp)          ; stack access
    0x84008e24     0x8    sd s2,32(sp)          ; stack access
    0x84008e26     0xa    sd s3,24(sp)          ; stack access
    0x84008e28     0xc    sd a0,0(sp)           ; stack access
    0x84008e2a     0xe    sd a1,8(sp)           ; stack access
    0x84008e2c    0x10    li a5,1
    0x84008e2e    0x12    bgeu a5,a2,ffffffff84008e86 <decodeWriteRegisters+0x6a>
    0x84008e32    0x16    mv s1,a3
    0x84008e34    0x18    auipc a0,0x16
    0x84008e38    0x1c    ld a0,548(a0) # ffffffff8401f058 <ksCurThread>
    0x84008e3c    0x20    ld s2,96(a0)
    0x84008e40    0x24    addi a2,a2,-2
    0x84008e42    0x26    bltu a2,s2,ffffffff84008e94 <decodeWriteRegisters+0x78>
    0x84008e46    0x2a    ld a5,0(sp)           ; stack access
    0x84008e48    0x2c    slli s0,a5,0x19
    0x84008e4c    0x30    srli s0,s0,0x19
    0x84008e4e    0x32    srli a5,a5,0x26
    0x84008e50    0x34    andi a5,a5,1
    0x84008e52    0x36    beqz a5,ffffffff84008e5a <decodeWriteRegisters+0x3e>
    0x84008e54    0x38    li a5,-1
    0x84008e56    0x3a    slli a5,a5,0x27
    0x84008e58    0x3c    or s0,s0,a5
    0x84008e5a    0x3e    beq a0,s0,ffffffff84008ea2 <decodeWriteRegisters+0x86>
    0x84008e5e    0x42    ld s3,88(a0)
    0x84008e62    0x46    li a1,2
    0x84008e64    0x48    jal ra,ffffffff84004a52 <setThreadState>
    0x84008e68    0x4c    mv a4,s1
    0x84008e6a    0x4e    li a3,0
    0x84008e6c    0x50    mv a2,s2
    0x84008e6e    0x52    andi a1,s3,1
    0x84008e72    0x56    mv a0,s0
    0x84008e74    0x58    jal ra,ffffffff84008d28 <invokeTCB_WriteRegisters>
    0x84008e78    0x5c    ld ra,56(sp)          ; stack access
    0x84008e7a    0x5e    ld s0,48(sp)          ; stack access
    0x84008e7c    0x60    ld s1,40(sp)          ; stack access
    0x84008e7e    0x62    ld s2,32(sp)          ; stack access
    0x84008e80    0x64    ld s3,24(sp)          ; stack access
    0x84008e82    0x66    addi sp,sp,64
    0x84008e84    0x68    ret
    0x84008e86    0x6a    li a5,7
    0x84008e88    0x6c    auipc a4,0x4
    0x84008e8c    0x70    sd a5,-584(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008e90    0x74    li a0,3
    0x84008e92    0x76    j ffffffff84008e78 <decodeWriteRegisters+0x5c>
    0x84008e94    0x78    li a5,7
    0x84008e96    0x7a    auipc a4,0x4
    0x84008e9a    0x7e    sd a5,-598(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008e9e    0x82    li a0,3
    0x84008ea0    0x84    j ffffffff84008e78 <decodeWriteRegisters+0x5c>
    0x84008ea2    0x86    li a5,3
    0x84008ea4    0x88    auipc a4,0x4
    0x84008ea8    0x8c    sd a5,-612(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008eac    0x90    li a0,3
    0x84008eae    0x92    j ffffffff84008e78 <decodeWriteRegisters+0x5c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 87 nodes.

Section invokeTCB_WriteRegisters (185 of 292)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 81 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x84008d28     0x0    addi sp,sp,-16
    0x84008d2a     0x2    sd ra,8(sp)           ; stack access
    0x84008d2c     0x4    sd s0,0(sp)           ; stack access
    0x84008d2e     0x6    mv s0,a0
    0x84008d30     0x8    mv a7,a2
    0x84008d32     0xa    li a5,32
    0x84008d36     0xe    bgeu a5,a2,ffffffff84008d3e <invokeTCB_WriteRegisters+0x16>
    0x84008d3a    0x12    li a7,32
    0x84008d3e    0x16    beqz a2,ffffffff84008dee <invokeTCB_WriteRegisters+0xc6>
    0x84008d40    0x18    auipc a0,0x3
    0x84008d44    0x1c    addi a0,a0,528 # ffffffff8400bf50 <frameRegisters>
    0x84008d48    0x20    addi a6,a4,24
    0x84008d4c    0x24    li a3,0
    0x84008d4e    0x26    li t4,3
    0x84008d50    0x28    li t5,16
    0x84008d52    0x2a    auipc t0,0x16
    0x84008d56    0x2e    addi t0,t0,774 # ffffffff8401f058 <ksCurThread>
    0x84008d5a    0x32    auipc t6,0x3
    0x84008d5e    0x36    addi t6,t6,-946 # ffffffff8400b9a8 <msgRegisters>
    0x84008d62    0x3a    j ffffffff84008d8a <invokeTCB_WriteRegisters+0x62>
    0x84008d64    0x3c    ld t1,0(t0)
    0x84008d68    0x40    add t3,a3,t6
    0x84008d6c    0x44    lbu t3,2(t3)
    0x84008d70    0x48    slli t3,t3,0x3
    0x84008d72    0x4a    add t1,t1,t3
    0x84008d74    0x4c    ld t1,0(t1)
    0x84008d78    0x50    slli a5,a5,0x3
    0x84008d7a    0x52    add a5,a5,s0
    0x84008d7c    0x54    sd t1,0(a5)
    0x84008d80    0x58    addi a3,a3,1
    0x84008d82    0x5a    addi a0,a0,1
    0x84008d84    0x5c    addi a6,a6,8
    0x84008d86    0x5e    bgeu a3,a7,ffffffff84008da8 <invokeTCB_WriteRegisters+0x80>
    0x84008d8a    0x62    lbu a5,0(a0)
    0x84008d8e    0x66    addi t1,a3,2
    0x84008d92    0x6a    bgeu t4,t1,ffffffff84008d64 <invokeTCB_WriteRegisters+0x3c>
    0x84008d96    0x6e    ld t1,0(a6)
    0x84008d9a    0x72    slli a5,a5,0x3
    0x84008d9c    0x74    add a5,a5,s0
    0x84008d9e    0x76    sd t1,0(a5)
    0x84008da2    0x7a    addi a3,a3,1
    0x84008da4    0x7c    bne a3,t5,ffffffff84008d82 <invokeTCB_WriteRegisters+0x5a>
    0x84008da8    0x80    li a5,16
    0x84008daa    0x82    bgeu a5,a2,ffffffff84008dee <invokeTCB_WriteRegisters+0xc6>
    0x84008dae    0x86    addi a3,a4,152
    0x84008db2    0x8a    auipc a4,0x3
    0x84008db6    0x8e    addi a4,a4,431 # ffffffff8400bf61 <gpRegisters+0x1>
    0x84008dba    0x92    auipc a6,0x3
    0x84008dbe    0x96    addi a6,a6,438 # ffffffff8400bf70 <gpRegisters+0x10>
    0x84008dc2    0x9a    li a5,9
    0x84008dc4    0x9c    auipc a2,0x3
    0x84008dc8    0xa0    addi a2,a2,412 # ffffffff8400bf60 <gpRegisters>
    0x84008dcc    0xa4    li a0,16
    0x84008dce    0xa6    sub a0,a0,a2
    0x84008dd0    0xa8    j ffffffff84008dd8 <invokeTCB_WriteRegisters+0xb0>
    0x84008dd2    0xaa    lbu a5,0(a4)
    0x84008dd6    0xae    addi a4,a4,1
    0x84008dd8    0xb0    ld a2,0(a3)
    0x84008dda    0xb2    slli a5,a5,0x3
    0x84008ddc    0xb4    add a5,a5,s0
    0x84008dde    0xb6    sd a2,0(a5)
    0x84008de0    0xb8    beq a6,a4,ffffffff84008dee <invokeTCB_WriteRegisters+0xc6>
    0x84008de4    0xbc    addi a3,a3,8
    0x84008de6    0xbe    add a5,a0,a4
    0x84008dea    0xc2    bltu a5,a7,ffffffff84008dd2 <invokeTCB_WriteRegisters+0xaa>
    0x84008dee    0xc6    ld a5,264(s0)
    0x84008df2    0xca    sd a5,272(s0)
    0x84008df6    0xce    bnez a1,ffffffff84008e0e <invokeTCB_WriteRegisters+0xe6>
    0x84008df8    0xd0    auipc a5,0x16
    0x84008dfc    0xd4    ld a5,608(a5) # ffffffff8401f058 <ksCurThread>
    0x84008e00    0xd8    beq a5,s0,ffffffff84008e16 <invokeTCB_WriteRegisters+0xee>
    0x84008e04    0xdc    li a0,0
    0x84008e06    0xde    ld ra,8(sp)           ; stack access
    0x84008e08    0xe0    ld s0,0(sp)           ; stack access
    0x84008e0a    0xe2    addi sp,sp,16
    0x84008e0c    0xe4    ret
    0x84008e0e    0xe6    mv a0,s0
    0x84008e10    0xe8    jal ra,ffffffff84005cf0 <restart>
    0x84008e14    0xec    j ffffffff84008df8 <invokeTCB_WriteRegisters+0xd0>
    0x84008e16    0xee    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84008e1a    0xf2    j ffffffff84008e04 <invokeTCB_WriteRegisters+0xdc>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
81 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 121 nodes.

Section decodeReadRegisters (186 of 292)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 63 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x84008c80     0x0    addi sp,sp,-64
    0x84008c82     0x2    sd ra,56(sp)          ; stack access
    0x84008c84     0x4    sd s0,48(sp)          ; stack access
    0x84008c86     0x6    sd s1,40(sp)          ; stack access
    0x84008c88     0x8    sd s2,32(sp)          ; stack access
    0x84008c8a     0xa    sd s3,24(sp)          ; stack access
    0x84008c8c     0xc    sd a0,0(sp)           ; stack access
    0x84008c8e     0xe    sd a1,8(sp)           ; stack access
    0x84008c90    0x10    li a5,1
    0x84008c92    0x12    bgeu a5,a2,ffffffff84008cec <decodeReadRegisters+0x6c>
    0x84008c96    0x16    mv s2,a3
    0x84008c98    0x18    auipc a0,0x16
    0x84008c9c    0x1c    ld a0,960(a0) # ffffffff8401f058 <ksCurThread>
    0x84008ca0    0x20    ld s1,96(a0)
    0x84008ca2    0x22    addi a4,s1,-1
    0x84008ca6    0x26    li a5,31
    0x84008ca8    0x28    bltu a5,a4,ffffffff84008cfa <decodeReadRegisters+0x7a>
    0x84008cac    0x2c    ld a5,0(sp)           ; stack access
    0x84008cae    0x2e    slli s0,a5,0x19
    0x84008cb2    0x32    srli s0,s0,0x19
    0x84008cb4    0x34    srli a5,a5,0x26
    0x84008cb6    0x36    andi a5,a5,1
    0x84008cb8    0x38    beqz a5,ffffffff84008cc0 <decodeReadRegisters+0x40>
    0x84008cba    0x3a    li a5,-1
    0x84008cbc    0x3c    slli a5,a5,0x27
    0x84008cbe    0x3e    or s0,s0,a5
    0x84008cc0    0x40    beq a0,s0,ffffffff84008d1a <decodeReadRegisters+0x9a>
    0x84008cc4    0x44    ld s3,88(a0)
    0x84008cc8    0x48    li a1,2
    0x84008cca    0x4a    jal ra,ffffffff84004a52 <setThreadState>
    0x84008cce    0x4e    mv a4,s2
    0x84008cd0    0x50    li a3,0
    0x84008cd2    0x52    mv a2,s1
    0x84008cd4    0x54    andi a1,s3,1
    0x84008cd8    0x58    mv a0,s0
    0x84008cda    0x5a    jal ra,ffffffff84008b6a <invokeTCB_ReadRegisters>
    0x84008cde    0x5e    ld ra,56(sp)          ; stack access
    0x84008ce0    0x60    ld s0,48(sp)          ; stack access
    0x84008ce2    0x62    ld s1,40(sp)          ; stack access
    0x84008ce4    0x64    ld s2,32(sp)          ; stack access
    0x84008ce6    0x66    ld s3,24(sp)          ; stack access
    0x84008ce8    0x68    addi sp,sp,64
    0x84008cea    0x6a    ret
    0x84008cec    0x6c    li a5,7
    0x84008cee    0x6e    auipc a4,0x4
    0x84008cf2    0x72    sd a5,-174(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008cf6    0x76    li a0,3
    0x84008cf8    0x78    j ffffffff84008cde <decodeReadRegisters+0x5e>
    0x84008cfa    0x7a    auipc a5,0x4
    0x84008cfe    0x7e    addi a5,a5,-1274 # ffffffff8400c800 <riscvKSASIDTable>
    0x84008d02    0x82    li a4,4
    0x84008d04    0x84    sd a4,1088(a5)
    0x84008d08    0x88    li a4,1
    0x84008d0a    0x8a    sd a4,1056(a5)
    0x84008d0e    0x8e    li a4,32
    0x84008d12    0x92    sd a4,1064(a5)
    0x84008d16    0x96    li a0,3
    0x84008d18    0x98    j ffffffff84008cde <decodeReadRegisters+0x5e>
    0x84008d1a    0x9a    li a5,3
    0x84008d1c    0x9c    auipc a4,0x4
    0x84008d20    0xa0    sd a5,-220(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008d24    0xa4    li a0,3
    0x84008d26    0xa6    j ffffffff84008cde <decodeReadRegisters+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 95 nodes.

Section decodeCopyRegisters (187 of 292)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 62 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x84008ac6     0x0    addi sp,sp,-48
    0x84008ac8     0x2    sd ra,40(sp)          ; stack access
    0x84008aca     0x4    sd s0,32(sp)          ; stack access
    0x84008acc     0x6    sd s1,24(sp)          ; stack access
    0x84008ace     0x8    sd a0,0(sp)           ; stack access
    0x84008ad0     0xa    sd a1,8(sp)           ; stack access
    0x84008ad2     0xc    beqz a2,ffffffff84008b44 <decodeCopyRegisters+0x7e>
    0x84008ad4     0xe    auipc a5,0x4
    0x84008ad8    0x12    ld a5,1468(a5) # ffffffff8400d090 <current_extra_caps>
    0x84008adc    0x16    beqz a5,ffffffff84008b44 <decodeCopyRegisters+0x7e>
    0x84008ade    0x18    ld a5,0(a5)
    0x84008ae0    0x1a    srli a3,a5,0x3b
    0x84008ae4    0x1e    li a4,12
    0x84008ae6    0x20    bne a3,a4,ffffffff84008b52 <decodeCopyRegisters+0x8c>
    0x84008aea    0x24    slli a1,a5,0x19
    0x84008aee    0x28    srli a1,a1,0x19
    0x84008af0    0x2a    srli a5,a5,0x26
    0x84008af2    0x2c    andi a5,a5,1
    0x84008af4    0x2e    beqz a5,ffffffff84008afc <decodeCopyRegisters+0x36>
    0x84008af6    0x30    li a5,-1
    0x84008af8    0x32    slli a5,a5,0x27
    0x84008afa    0x34    or a1,a1,a5
    0x84008afc    0x36    auipc a0,0x16
    0x84008b00    0x3a    ld a0,1372(a0) # ffffffff8401f058 <ksCurThread>
    0x84008b04    0x3e    ld s1,88(a0)
    0x84008b06    0x40    mv s0,a1
    0x84008b08    0x42    li a1,2
    0x84008b0a    0x44    jal ra,ffffffff84004a52 <setThreadState>
    0x84008b0e    0x48    ld a5,0(sp)           ; stack access
    0x84008b10    0x4a    slli a0,a5,0x19
    0x84008b14    0x4e    srli a0,a0,0x19
    0x84008b16    0x50    srli a5,a5,0x26
    0x84008b18    0x52    andi a5,a5,1
    0x84008b1a    0x54    beqz a5,ffffffff84008b22 <decodeCopyRegisters+0x5c>
    0x84008b1c    0x56    li a5,-1
    0x84008b1e    0x58    slli a5,a5,0x27
    0x84008b20    0x5a    or a0,a0,a5
    0x84008b22    0x5c    li a6,0
    0x84008b24    0x5e    andi a5,s1,8
    0x84008b28    0x62    andi a4,s1,4
    0x84008b2c    0x66    andi a3,s1,2
    0x84008b30    0x6a    andi a2,s1,1
    0x84008b34    0x6e    mv a1,s0
    0x84008b36    0x70    jal ra,ffffffff84008a18 <invokeTCB_CopyRegisters>
    0x84008b3a    0x74    ld ra,40(sp)          ; stack access
    0x84008b3c    0x76    ld s0,32(sp)          ; stack access
    0x84008b3e    0x78    ld s1,24(sp)          ; stack access
    0x84008b40    0x7a    addi sp,sp,48
    0x84008b42    0x7c    ret
    0x84008b44    0x7e    li a5,7
    0x84008b46    0x80    auipc a4,0x4
    0x84008b4a    0x84    sd a5,250(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008b4e    0x88    li a0,3
    0x84008b50    0x8a    j ffffffff84008b3a <decodeCopyRegisters+0x74>
    0x84008b52    0x8c    auipc a5,0x4
    0x84008b56    0x90    addi a5,a5,-850 # ffffffff8400c800 <riscvKSASIDTable>
    0x84008b5a    0x94    li a4,2
    0x84008b5c    0x96    sd a4,1088(a5)
    0x84008b60    0x9a    li a4,1
    0x84008b62    0x9c    sd a4,1048(a5)
    0x84008b66    0xa0    li a0,3
    0x84008b68    0xa2    j ffffffff84008b3a <decodeCopyRegisters+0x74>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 91 nodes.

Section decodeSetMCPriority (188 of 292)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 72 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x84008796     0x0    addi sp,sp,-64
    0x84008798     0x2    sd ra,56(sp)          ; stack access
    0x8400879a     0x4    sd s0,48(sp)          ; stack access
    0x8400879c     0x6    sd a0,16(sp)          ; stack access
    0x8400879e     0x8    sd a1,24(sp)          ; stack access
    0x840087a0     0xa    beqz a2,ffffffff8400880e <decodeSetMCPriority+0x78>
    0x840087a2     0xc    auipc a5,0x5
    0x840087a6    0x10    ld a5,-1810(a5) # ffffffff8400d090 <current_extra_caps>
    0x840087aa    0x14    beqz a5,ffffffff8400880e <decodeSetMCPriority+0x78>
    0x840087ac    0x16    ld a5,0(a5)
    0x840087ae    0x18    srli a3,a5,0x3b
    0x840087b2    0x1c    li a4,12
    0x840087b4    0x1e    bne a3,a4,ffffffff84008822 <decodeSetMCPriority+0x8c>
    0x840087b8    0x22    slli a4,a5,0x19
    0x840087bc    0x26    srli a4,a4,0x19
    0x840087be    0x28    srli a5,a5,0x26
    0x840087c0    0x2a    andi a5,a5,1
    0x840087c2    0x2c    beqz a5,ffffffff840087ca <decodeSetMCPriority+0x34>
    0x840087c4    0x2e    li a5,-1
    0x840087c6    0x30    slli a5,a5,0x27
    0x840087c8    0x32    or a4,a4,a5
    0x840087ca    0x34    auipc a0,0x17
    0x840087ce    0x38    ld a0,-1906(a0) # ffffffff8401f058 <ksCurThread>
    0x840087d2    0x3c    ld s0,88(a0)
    0x840087d4    0x3e    ld a5,352(a4)
    0x840087d8    0x42    bltu a5,s0,ffffffff8400883a <decodeSetMCPriority+0xa4>
    0x840087dc    0x46    li a1,2
    0x840087de    0x48    jal ra,ffffffff84004a52 <setThreadState>
    0x840087e2    0x4c    ld a5,16(sp)          ; stack access
    0x840087e4    0x4e    slli a0,a5,0x19
    0x840087e8    0x52    srli a0,a0,0x19
    0x840087ea    0x54    srli a5,a5,0x26
    0x840087ec    0x56    andi a5,a5,1
    0x840087ee    0x58    beqz a5,ffffffff840087f6 <decodeSetMCPriority+0x60>
    0x840087f0    0x5a    li a5,-1
    0x840087f2    0x5c    slli a5,a5,0x27
    0x840087f4    0x5e    or a0,a0,a5
    0x840087f6    0x60    li a5,2
    0x840087f8    0x62    sd a5,0(sp)           ; stack access
    0x840087fa    0x64    li a7,0
    0x840087fc    0x66    li a6,0
    0x840087fe    0x68    mv a5,s0
    0x84008800    0x6a    li a4,0
    0x84008802    0x6c    li a2,0
    0x84008804    0x6e    li a3,0
    0x84008806    0x70    li a1,0
    0x84008808    0x72    jal ra,ffffffff840085ee <invokeTCB_ThreadControlSched>
    0x8400880c    0x76    j ffffffff8400881a <decodeSetMCPriority+0x84>
    0x8400880e    0x78    li a5,7
    0x84008810    0x7a    auipc a4,0x4
    0x84008814    0x7e    sd a5,1072(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008818    0x82    li a0,3
    0x8400881a    0x84    ld ra,56(sp)          ; stack access
    0x8400881c    0x86    ld s0,48(sp)          ; stack access
    0x8400881e    0x88    addi sp,sp,64
    0x84008820    0x8a    ret
    0x84008822    0x8c    auipc a5,0x4
    0x84008826    0x90    addi a5,a5,-34 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400882a    0x94    li a4,2
    0x8400882c    0x96    sd a4,1088(a5)
    0x84008830    0x9a    li a4,1
    0x84008832    0x9c    sd a4,1048(a5)
    0x84008836    0xa0    li a0,3
    0x84008838    0xa2    j ffffffff8400881a <decodeSetMCPriority+0x84>
    0x8400883a    0xa4    auipc a4,0x4
    0x8400883e    0xa8    addi a4,a4,-58 # ffffffff8400c800 <riscvKSASIDTable>
    0x84008842    0xac    li a3,4
    0x84008844    0xae    sd a3,1088(a4)
    0x84008848    0xb2    sd zero,1056(a4)
    0x8400884c    0xb6    sd a5,1064(a4)
    0x84008850    0xba    li a0,3
    0x84008852    0xbc    j ffffffff8400881a <decodeSetMCPriority+0x84>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
72 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 106 nodes.

Section decodeSetPriority (189 of 292)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 72 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `decodeSetPriority`:

    0x840086d8     0x0    addi sp,sp,-64
    0x840086da     0x2    sd ra,56(sp)          ; stack access
    0x840086dc     0x4    sd s0,48(sp)          ; stack access
    0x840086de     0x6    sd a0,16(sp)          ; stack access
    0x840086e0     0x8    sd a1,24(sp)          ; stack access
    0x840086e2     0xa    beqz a2,ffffffff84008750 <decodeSetPriority+0x78>
    0x840086e4     0xc    auipc a5,0x5
    0x840086e8    0x10    ld a5,-1620(a5) # ffffffff8400d090 <current_extra_caps>
    0x840086ec    0x14    beqz a5,ffffffff84008750 <decodeSetPriority+0x78>
    0x840086ee    0x16    ld a5,0(a5)
    0x840086f0    0x18    srli a3,a5,0x3b
    0x840086f4    0x1c    li a4,12
    0x840086f6    0x1e    bne a3,a4,ffffffff84008764 <decodeSetPriority+0x8c>
    0x840086fa    0x22    slli a4,a5,0x19
    0x840086fe    0x26    srli a4,a4,0x19
    0x84008700    0x28    srli a5,a5,0x26
    0x84008702    0x2a    andi a5,a5,1
    0x84008704    0x2c    beqz a5,ffffffff8400870c <decodeSetPriority+0x34>
    0x84008706    0x2e    li a5,-1
    0x84008708    0x30    slli a5,a5,0x27
    0x8400870a    0x32    or a4,a4,a5
    0x8400870c    0x34    auipc a0,0x17
    0x84008710    0x38    ld a0,-1716(a0) # ffffffff8401f058 <ksCurThread>
    0x84008714    0x3c    ld s0,88(a0)
    0x84008716    0x3e    ld a5,352(a4)
    0x8400871a    0x42    bltu a5,s0,ffffffff8400877c <decodeSetPriority+0xa4>
    0x8400871e    0x46    li a1,2
    0x84008720    0x48    jal ra,ffffffff84004a52 <setThreadState>
    0x84008724    0x4c    ld a5,16(sp)          ; stack access
    0x84008726    0x4e    slli a0,a5,0x19
    0x8400872a    0x52    srli a0,a0,0x19
    0x8400872c    0x54    srli a5,a5,0x26
    0x8400872e    0x56    andi a5,a5,1
    0x84008730    0x58    beqz a5,ffffffff84008738 <decodeSetPriority+0x60>
    0x84008732    0x5a    li a5,-1
    0x84008734    0x5c    slli a5,a5,0x27
    0x84008736    0x5e    or a0,a0,a5
    0x84008738    0x60    li a5,1
    0x8400873a    0x62    sd a5,0(sp)           ; stack access
    0x8400873c    0x64    li a7,0
    0x8400873e    0x66    mv a6,s0
    0x84008740    0x68    li a5,0
    0x84008742    0x6a    li a4,0
    0x84008744    0x6c    li a2,0
    0x84008746    0x6e    li a3,0
    0x84008748    0x70    li a1,0
    0x8400874a    0x72    jal ra,ffffffff840085ee <invokeTCB_ThreadControlSched>
    0x8400874e    0x76    j ffffffff8400875c <decodeSetPriority+0x84>
    0x84008750    0x78    li a5,7
    0x84008752    0x7a    auipc a4,0x4
    0x84008756    0x7e    sd a5,1262(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400875a    0x82    li a0,3
    0x8400875c    0x84    ld ra,56(sp)          ; stack access
    0x8400875e    0x86    ld s0,48(sp)          ; stack access
    0x84008760    0x88    addi sp,sp,64
    0x84008762    0x8a    ret
    0x84008764    0x8c    auipc a5,0x4
    0x84008768    0x90    addi a5,a5,156 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400876c    0x94    li a4,2
    0x8400876e    0x96    sd a4,1088(a5)
    0x84008772    0x9a    li a4,1
    0x84008774    0x9c    sd a4,1048(a5)
    0x84008778    0xa0    li a0,3
    0x8400877a    0xa2    j ffffffff8400875c <decodeSetPriority+0x84>
    0x8400877c    0xa4    auipc a4,0x4
    0x84008780    0xa8    addi a4,a4,132 # ffffffff8400c800 <riscvKSASIDTable>
    0x84008784    0xac    li a3,4
    0x84008786    0xae    sd a3,1088(a4)
    0x8400878a    0xb2    sd zero,1056(a4)
    0x8400878e    0xb6    sd a5,1064(a4)
    0x84008792    0xba    li a0,3
    0x84008794    0xbc    j ffffffff8400875c <decodeSetPriority+0x84>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
72 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 106 nodes.

Section decodeDomainInvocation (190 of 292)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 66 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x84007e36     0x0    li a5,29
    0x84007e38     0x2    bne a0,a5,ffffffff84007e96 <decodeDomainInvocation+0x60>
    0x84007e3c     0x6    beqz a1,ffffffff84007ea4 <decodeDomainInvocation+0x6e>
    0x84007e3e     0x8    addi sp,sp,-32
    0x84007e40     0xa    sd ra,24(sp)          ; stack access
    0x84007e42     0xc    sd s0,16(sp)          ; stack access
    0x84007e44     0xe    sd s1,8(sp)           ; stack access
    0x84007e46    0x10    auipc a0,0x17
    0x84007e4a    0x14    ld a0,530(a0) # ffffffff8401f058 <ksCurThread>
    0x84007e4e    0x18    ld s1,88(a0)
    0x84007e50    0x1a    li a5,15
    0x84007e52    0x1c    bltu a5,s1,ffffffff84007eb2 <decodeDomainInvocation+0x7c>
    0x84007e56    0x20    auipc a5,0x5
    0x84007e5a    0x24    ld a5,570(a5) # ffffffff8400d090 <current_extra_caps>
    0x84007e5e    0x28    beqz a5,ffffffff84007ec8 <decodeDomainInvocation+0x92>
    0x84007e60    0x2a    ld s0,0(a5)
    0x84007e62    0x2c    srli a4,s0,0x3b
    0x84007e66    0x30    li a5,12
    0x84007e68    0x32    bne a4,a5,ffffffff84007ed6 <decodeDomainInvocation+0xa0>
    0x84007e6c    0x36    li a1,2
    0x84007e6e    0x38    jal ra,ffffffff84004a52 <setThreadState>
    0x84007e72    0x3c    slli a0,s0,0x19
    0x84007e76    0x40    srli a0,a0,0x19
    0x84007e78    0x42    srli s0,s0,0x26
    0x84007e7a    0x44    andi s0,s0,1
    0x84007e7c    0x46    beqz s0,ffffffff84007e84 <decodeDomainInvocation+0x4e>
    0x84007e7e    0x48    li a5,-1
    0x84007e80    0x4a    slli a5,a5,0x27
    0x84007e82    0x4c    or a0,a0,a5
    0x84007e84    0x4e    mv a1,s1
    0x84007e86    0x50    jal ra,ffffffff84004ffa <setDomain>
    0x84007e8a    0x54    li a0,0
    0x84007e8c    0x56    ld ra,24(sp)          ; stack access
    0x84007e8e    0x58    ld s0,16(sp)          ; stack access
    0x84007e90    0x5a    ld s1,8(sp)           ; stack access
    0x84007e92    0x5c    addi sp,sp,32
    0x84007e94    0x5e    ret
    0x84007e96    0x60    li a5,3
    0x84007e98    0x62    auipc a4,0x5
    0x84007e9c    0x66    sd a5,-600(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007ea0    0x6a    li a0,3
    0x84007ea2    0x6c    ret
    0x84007ea4    0x6e    li a5,7
    0x84007ea6    0x70    auipc a4,0x5
    0x84007eaa    0x74    sd a5,-614(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007eae    0x78    li a0,3
    0x84007eb0    0x7a    ret
    0x84007eb2    0x7c    auipc a5,0x5
    0x84007eb6    0x80    addi a5,a5,-1714 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007eba    0x84    li a4,1
    0x84007ebc    0x86    sd a4,1088(a5)
    0x84007ec0    0x8a    sd zero,1040(a5)
    0x84007ec4    0x8e    li a0,3
    0x84007ec6    0x90    j ffffffff84007e8c <decodeDomainInvocation+0x56>
    0x84007ec8    0x92    li a5,7
    0x84007eca    0x94    auipc a4,0x5
    0x84007ece    0x98    sd a5,-650(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007ed2    0x9c    li a0,3
    0x84007ed4    0x9e    j ffffffff84007e8c <decodeDomainInvocation+0x56>
    0x84007ed6    0xa0    auipc a5,0x5
    0x84007eda    0xa4    addi a5,a5,-1750 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007ede    0xa8    li a4,1
    0x84007ee0    0xaa    sd a4,1088(a5)
    0x84007ee4    0xae    sd a4,1040(a5)
    0x84007ee8    0xb2    li a0,3
    0x84007eea    0xb4    j ffffffff84007e8c <decodeDomainInvocation+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 100 nodes.

Section preemptionPoint (191 of 292)
====================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 71 instructions.

Skipping 14402573 csrr a0,sip

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `preemptionPoint`:

    0x84007118     0x0    auipc a5,0x18
    0x8400711c     0x4    ld a5,-248(a5) # ffffffff8401f020 <ksWorkUnitsCompleted>
    0x84007120     0x8    addi a5,a5,1
    0x84007122     0xa    li a4,99
    0x84007126     0xe    bgeu a4,a5,ffffffff840071d4 <preemptionPoint+0xbc>
    0x8400712a    0x12    auipc a5,0x18
    0x8400712e    0x16    sd zero,-266(a5) # ffffffff8401f020 <ksWorkUnitsCompleted>
    0x84007132    0x1a    csrr a0,sip
    0x84007136    0x1e    andi a0,a0,544
    0x8400713a    0x22    bnez a0,ffffffff840071e0 <preemptionPoint+0xc8>
    0x8400713c    0x24    addi sp,sp,-16
    0x8400713e    0x26    sd ra,8(sp)           ; stack access
    0x84007140    0x28    auipc a4,0x18
    0x84007144    0x2c    addi a4,a4,-272 # ffffffff8401f030 <ksCurTime>
    0x84007148    0x30    ld a2,0(a4)
    0x8400714a    0x32    rdtime a3
    0x8400714e    0x36    sd a3,0(a4)
    0x84007150    0x38    auipc a4,0x18
    0x84007154    0x3c    addi a4,a4,-272 # ffffffff8401f040 <ksConsumed>
    0x84007158    0x40    ld a5,0(a4)
    0x8400715a    0x42    sub a5,a5,a2
    0x8400715c    0x44    add a5,a5,a3
    0x8400715e    0x46    sd a5,0(a4)
    0x84007160    0x48    auipc a3,0x18
    0x84007164    0x4c    ld a3,-312(a3) # ffffffff8401f028 <ksCurSC>
    0x84007168    0x50    ld a2,72(a3)
    0x8400716a    0x52    slli a4,a2,0x4
    0x8400716e    0x56    add a4,a4,a3
    0x84007170    0x58    ld a4,96(a4)
    0x84007172    0x5a    bltu a4,a5,ffffffff840071ac <preemptionPoint+0x94>
    0x84007176    0x5e    sub a4,a4,a5
    0x84007178    0x60    li a1,19
    0x8400717a    0x62    bgeu a1,a4,ffffffff840071ac <preemptionPoint+0x94>
    0x8400717e    0x66    ld a4,0(a3)
    0x84007180    0x68    bnez a4,ffffffff84007196 <preemptionPoint+0x7e>
    0x84007182    0x6a    addi a5,a5,20
    0x84007184    0x6c    auipc a4,0x18
    0x84007188    0x70    ld a4,-372(a4) # ffffffff8401f010 <ksDomainTime>
    0x8400718c    0x74    bltu a4,a5,ffffffff840071c4 <preemptionPoint+0xac>
    0x84007190    0x78    ld ra,8(sp)           ; stack access
    0x84007192    0x7a    addi sp,sp,16
    0x84007194    0x7c    ret
    0x84007196    0x7e    ld a4,80(a3)
    0x84007198    0x80    bgeu a4,a2,ffffffff840071bc <preemptionPoint+0xa4>
    0x8400719c    0x84    ld a1,64(a3)
    0x8400719e    0x86    add a4,a4,a1
    0x840071a0    0x88    addi a4,a4,1
    0x840071a2    0x8a    sub a2,a4,a2
    0x840071a6    0x8e    ld a4,64(a3)
    0x840071a8    0x90    bne a4,a2,ffffffff84007182 <preemptionPoint+0x6a>
    0x840071ac    0x94    li a3,1
    0x840071ae    0x96    li a2,0
    0x840071b0    0x98    li a1,1
    0x840071b2    0x9a    mv a0,a5
    0x840071b4    0x9c    jal ra,ffffffff84006f86 <chargeBudget>
    0x840071b8    0xa0    li a0,4
    0x840071ba    0xa2    j ffffffff84007190 <preemptionPoint+0x78>
    0x840071bc    0xa4    addi a4,a4,1
    0x840071be    0xa6    sub a2,a4,a2
    0x840071c2    0xaa    j ffffffff840071a6 <preemptionPoint+0x8e>
    0x840071c4    0xac    li a5,1
    0x840071c6    0xae    auipc a4,0x18
    0x840071ca    0xb2    sd a5,-398(a4) # ffffffff8401f038 <ksReprogram>
    0x840071ce    0xb6    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x840071d2    0xba    j ffffffff840071b8 <preemptionPoint+0xa0>
    0x840071d4    0xbc    auipc a4,0x18
    0x840071d8    0xc0    sd a5,-436(a4) # ffffffff8401f020 <ksWorkUnitsCompleted>
    0x840071dc    0xc4    li a0,0
    0x840071de    0xc6    ret
    0x840071e0    0xc8    li a0,4
    0x840071e2    0xca    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
71 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 112 nodes.

Section mcsIRQ (192 of 292)
===========================

Deriving specifications
-----------------------

Section `mcsIRQ` consists of 83 instructions.

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `mcsIRQ`:

    0x8400702a     0x0    addi sp,sp,-16
    0x8400702c     0x2    sd ra,8(sp)           ; stack access
    0x8400702e     0x4    li a5,54
    0x84007032     0x8    beq a0,a5,ffffffff8400705e <mcsIRQ+0x34>
    0x84007036     0xc    auipc a4,0x18
    0x8400703a    0x10    ld a4,34(a4) # ffffffff8401f058 <ksCurThread>
    0x8400703e    0x14    ld a5,280(a4)
    0x84007042    0x18    andi a5,a5,15
    0x84007044    0x1a    addi a5,a5,-1
    0x84007046    0x1c    li a3,1
    0x84007048    0x1e    bgeu a3,a5,ffffffff84007080 <mcsIRQ+0x56>
    0x8400704c    0x22    auipc a5,0x18
    0x84007050    0x26    ld a5,-36(a5) # ffffffff8401f028 <ksCurSC>
    0x84007054    0x2a    ld a5,64(a5)
    0x84007056    0x2c    bnez a5,ffffffff84007104 <mcsIRQ+0xda>
    0x84007058    0x2e    ld ra,8(sp)           ; stack access
    0x8400705a    0x30    addi sp,sp,16
    0x8400705c    0x32    ret
    0x8400705e    0x34    auipc a4,0x18
    0x84007062    0x38    addi a4,a4,-46 # ffffffff8401f030 <ksCurTime>
    0x84007066    0x3c    ld a2,0(a4)
    0x84007068    0x3e    rdtime a3
    0x8400706c    0x42    sd a3,0(a4)
    0x8400706e    0x44    auipc a4,0x18
    0x84007072    0x48    addi a4,a4,-46 # ffffffff8401f040 <ksConsumed>
    0x84007076    0x4c    ld a5,0(a4)
    0x84007078    0x4e    sub a5,a5,a2
    0x8400707a    0x50    add a5,a5,a3
    0x8400707c    0x52    sd a5,0(a4)
    0x8400707e    0x54    j ffffffff84007036 <mcsIRQ+0xc>
    0x84007080    0x56    ld a5,368(a4)
    0x84007084    0x5a    beqz a5,ffffffff8400704c <mcsIRQ+0x22>
    0x84007086    0x5c    ld a5,64(a5)
    0x84007088    0x5e    beqz a5,ffffffff8400704c <mcsIRQ+0x22>
    0x8400708a    0x60    ld a5,288(a4)
    0x8400708e    0x64    andi a5,a5,1
    0x84007090    0x66    bnez a5,ffffffff8400704c <mcsIRQ+0x22>
    0x84007092    0x68    auipc a4,0x18
    0x84007096    0x6c    ld a4,-106(a4) # ffffffff8401f028 <ksCurSC>
    0x8400709a    0x70    auipc a0,0x18
    0x8400709e    0x74    ld a0,-90(a0) # ffffffff8401f040 <ksConsumed>
    0x840070a2    0x78    ld a3,72(a4)
    0x840070a4    0x7a    slli a5,a3,0x4
    0x840070a8    0x7e    add a5,a5,a4
    0x840070aa    0x80    ld a5,96(a5)
    0x840070ac    0x82    bltu a5,a0,ffffffff840070f0 <mcsIRQ+0xc6>
    0x840070b0    0x86    sub a5,a5,a0
    0x840070b2    0x88    li a2,19
    0x840070b4    0x8a    bgeu a2,a5,ffffffff840070f0 <mcsIRQ+0xc6>
    0x840070b8    0x8e    ld a5,0(a4)
    0x840070ba    0x90    bnez a5,ffffffff840070da <mcsIRQ+0xb0>
    0x840070bc    0x92    addi a0,a0,20
    0x840070be    0x94    auipc a5,0x18
    0x840070c2    0x98    ld a5,-174(a5) # ffffffff8401f010 <ksDomainTime>
    0x840070c6    0x9c    bgeu a5,a0,ffffffff84007058 <mcsIRQ+0x2e>
    0x840070ca    0xa0    li a5,1
    0x840070cc    0xa2    auipc a4,0x18
    0x840070d0    0xa6    sd a5,-148(a4) # ffffffff8401f038 <ksReprogram>
    0x840070d4    0xaa    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x840070d8    0xae    j ffffffff84007058 <mcsIRQ+0x2e>
    0x840070da    0xb0    ld a5,80(a4)
    0x840070dc    0xb2    bgeu a5,a3,ffffffff840070fc <mcsIRQ+0xd2>
    0x840070e0    0xb6    ld a2,64(a4)
    0x840070e2    0xb8    add a5,a5,a2
    0x840070e4    0xba    addi a5,a5,1
    0x840070e6    0xbc    sub a3,a5,a3
    0x840070ea    0xc0    ld a5,64(a4)
    0x840070ec    0xc2    bne a5,a3,ffffffff840070bc <mcsIRQ+0x92>
    0x840070f0    0xc6    li a3,1
    0x840070f2    0xc8    li a2,0
    0x840070f4    0xca    li a1,1
    0x840070f6    0xcc    jal ra,ffffffff84006f86 <chargeBudget>
    0x840070fa    0xd0    j ffffffff84007058 <mcsIRQ+0x2e>
    0x840070fc    0xd2    addi a5,a5,1
    0x840070fe    0xd4    sub a3,a5,a3
    0x84007102    0xd8    j ffffffff840070ea <mcsIRQ+0xc0>
    0x84007104    0xda    li a3,1
    0x84007106    0xdc    li a2,0
    0x84007108    0xde    li a1,0
    0x8400710a    0xe0    auipc a0,0x18
    0x8400710e    0xe4    ld a0,-202(a0) # ffffffff8401f040 <ksConsumed>
    0x84007112    0xe8    jal ra,ffffffff84006f86 <chargeBudget>
    0x84007116    0xec    j ffffffff84007058 <mcsIRQ+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `mcsIRQ` has 136 nodes.

Section handleFault (193 of 292)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleFault`:

    0x84006ebc     0x0    addi sp,sp,-16
    0x84006ebe     0x2    sd ra,8(sp)           ; stack access
    0x84006ec0     0x4    sd s0,0(sp)           ; stack access
    0x84006ec2     0x6    mv s0,a0
    0x84006ec4     0x8    ld a3,368(a0)
    0x84006ec8     0xc    andi a5,a0,-1024
    0x84006ecc    0x10    snez a3,a3
    0x84006ed0    0x14    ld a1,96(a5)
    0x84006ed2    0x16    ld a2,104(a5)
    0x84006ed4    0x18    jal ra,ffffffff84006e5a <sendFaultIPC>
    0x84006ed8    0x1c    beqz a0,ffffffff84006ee2 <handleFault+0x26>
    0x84006eda    0x1e    ld ra,8(sp)           ; stack access
    0x84006edc    0x20    ld s0,0(sp)           ; stack access
    0x84006ede    0x22    addi sp,sp,16
    0x84006ee0    0x24    ret
    0x84006ee2    0x26    mv a0,s0
    0x84006ee4    0x28    jal ra,ffffffff84004b34 <handleNoFaultHandler>
    0x84006ee8    0x2c    j ffffffff84006eda <handleFault+0x1e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 30 nodes.

Section awaken (194 of 292)
===========================

Deriving specifications
-----------------------

Section `awaken` consists of 38 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `awaken`:

    0x840068d8     0x0    auipc a5,0x18
    0x840068dc     0x4    ld a5,1928(a5) # ffffffff8401f060 <ksReleaseHead>
    0x840068e0     0x8    bnez a5,ffffffff840068e4 <awaken+0xc>
    0x840068e2     0xa    ret
    0x840068e4     0xc    addi sp,sp,-48
    0x840068e6     0xe    sd ra,40(sp)          ; stack access
    0x840068e8    0x10    sd s0,32(sp)          ; stack access
    0x840068ea    0x12    sd s1,24(sp)          ; stack access
    0x840068ec    0x14    sd s2,16(sp)          ; stack access
    0x840068ee    0x16    sd s3,8(sp)           ; stack access
    0x840068f0    0x18    auipc s0,0x18
    0x840068f4    0x1c    addi s0,s0,1856 # ffffffff8401f030 <ksCurTime>
    0x840068f8    0x20    auipc s3,0x18
    0x840068fc    0x24    addi s3,s3,1856 # ffffffff8401f038 <ksReprogram>
    0x84006900    0x28    li s2,1
    0x84006902    0x2a    auipc s1,0x18
    0x84006906    0x2e    addi s1,s1,1886 # ffffffff8401f060 <ksReleaseHead>
    0x8400690a    0x32    ld a5,368(a5)
    0x8400690e    0x36    ld a4,72(a5)
    0x84006910    0x38    slli a4,a4,0x4
    0x84006912    0x3a    add a5,a5,a4
    0x84006914    0x3c    ld a4,0(s0)
    0x84006916    0x3e    addi a4,a4,10
    0x84006918    0x40    ld a5,88(a5)
    0x8400691a    0x42    bgeu a4,a5,ffffffff8400692c <awaken+0x54>
    0x8400691e    0x46    ld ra,40(sp)          ; stack access
    0x84006920    0x48    ld s0,32(sp)          ; stack access
    0x84006922    0x4a    ld s1,24(sp)          ; stack access
    0x84006924    0x4c    ld s2,16(sp)          ; stack access
    0x84006926    0x4e    ld s3,8(sp)           ; stack access
    0x84006928    0x50    addi sp,sp,48
    0x8400692a    0x52    ret
    0x8400692c    0x54    jal ra,ffffffff8400689e <tcbReleaseDequeue>
    0x84006930    0x58    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x84006934    0x5c    sd s2,0(s3)
    0x84006938    0x60    ld a5,0(s1)
    0x8400693a    0x62    beqz a5,ffffffff8400691e <awaken+0x46>
    0x8400693c    0x64    j ffffffff8400690a <awaken+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `awaken` has 65 nodes.

Section handleInterrupt (195 of 292)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 84 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterrupt`:

    0x84006798     0x0    li a5,54
    0x8400679c     0x4    bltu a5,a0,ffffffff840067fc <handleInterrupt+0x64>
    0x840067a0     0x8    slli a4,a0,0x3
    0x840067a4     0xc    auipc a5,0x6
    0x840067a8    0x10    addi a5,a5,92 # ffffffff8400c800 <riscvKSASIDTable>
    0x840067ac    0x14    add a5,a5,a4
    0x840067ae    0x16    ld a5,1112(a5)
    0x840067b2    0x1a    li a4,2
    0x840067b4    0x1c    beq a5,a4,ffffffff8400683e <handleInterrupt+0xa6>
    0x840067b8    0x20    addi sp,sp,-16
    0x840067ba    0x22    sd ra,8(sp)           ; stack access
    0x840067bc    0x24    bltu a4,a5,ffffffff8400682a <handleInterrupt+0x92>
    0x840067c0    0x28    beqz a5,ffffffff84006852 <handleInterrupt+0xba>
    0x840067c2    0x2a    slli a0,a0,0x5
    0x840067c4    0x2c    auipc a5,0x7
    0x840067c8    0x30    addi a5,a5,60 # ffffffff8400d800 <intStateIRQNode>
    0x840067cc    0x34    add a5,a5,a0
    0x840067ce    0x36    ld a4,0(a5)
    0x840067d0    0x38    srli a2,a4,0x3b
    0x840067d4    0x3c    li a3,6
    0x840067d6    0x3e    bne a2,a3,ffffffff84006830 <handleInterrupt+0x98>
    0x840067da    0x42    srli a3,a4,0x39
    0x840067de    0x46    andi a3,a3,1
    0x840067e0    0x48    beqz a3,ffffffff84006830 <handleInterrupt+0x98>
    0x840067e2    0x4a    slli a0,a4,0x19
    0x840067e6    0x4e    srli a0,a0,0x19
    0x840067e8    0x50    srli a4,a4,0x26
    0x840067ea    0x52    andi a4,a4,1
    0x840067ec    0x54    beqz a4,ffffffff840067f4 <handleInterrupt+0x5c>
    0x840067ee    0x56    li a4,-1
    0x840067f0    0x58    slli a4,a4,0x27
    0x840067f2    0x5a    or a0,a0,a4
    0x840067f4    0x5c    ld a1,8(a5)
    0x840067f6    0x5e    jal ra,ffffffff840065a6 <sendSignal>
    0x840067fa    0x62    j ffffffff84006830 <handleInterrupt+0x98>
    0x840067fc    0x64    srli a4,a0,0x5
    0x84006800    0x68    slli a4,a4,0x2
    0x84006802    0x6a    lui a5,0xcc002
    0x84006806    0x6e    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fde100>
    0x8400680a    0x72    add a4,a4,a5
    0x8400680c    0x74    lw a3,0(a4)
    0x8400680e    0x76    andi a0,a0,31
    0x84006810    0x78    li a5,1
    0x84006812    0x7a    sll a0,a5,a0
    0x84006816    0x7e    not a5,a0
    0x8400681a    0x82    and a5,a5,a3
    0x8400681c    0x84    sext.w a5,a5
    0x8400681e    0x86    sw a5,0(a4)
    0x84006820    0x88    auipc a5,0x19
    0x84006824    0x8c    sw zero,-1968(a5) # ffffffff8401f070 <active_irq>
    0x84006828    0x90    ret
    0x8400682a    0x92    li a4,3
    0x8400682c    0x94    bne a5,a4,ffffffff8400688a <handleInterrupt+0xf2>
    0x84006830    0x98    auipc a5,0x19
    0x84006834    0x9c    sw zero,-1984(a5) # ffffffff8401f070 <active_irq>
    0x84006838    0xa0    ld ra,8(sp)           ; stack access
    0x8400683a    0xa2    addi sp,sp,16
    0x8400683c    0xa4    ret
    0x8400683e    0xa6    li a5,1
    0x84006840    0xa8    auipc a4,0x18
    0x84006844    0xac    sd a5,2040(a4) # ffffffff8401f038 <ksReprogram>
    0x84006848    0xb0    auipc a5,0x19
    0x8400684c    0xb4    sw zero,-2008(a5) # ffffffff8401f070 <active_irq>
    0x84006850    0xb8    ret
    0x84006852    0xba    li a5,54
    0x84006856    0xbe    bne a0,a5,ffffffff84006864 <handleInterrupt+0xcc>
    0x8400685a    0xc2    li a5,32
    0x8400685e    0xc6    csrrc a5,sie,a5
    0x84006862    0xca    j ffffffff84006830 <handleInterrupt+0x98>
    0x84006864    0xcc    srli a4,a0,0x5
    0x84006868    0xd0    slli a4,a4,0x2
    0x8400686a    0xd2    lui a5,0xcc002
    0x8400686e    0xd6    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fde100>
    0x84006872    0xda    add a4,a4,a5
    0x84006874    0xdc    lw a3,0(a4)
    0x84006876    0xde    andi a0,a0,31
    0x84006878    0xe0    li a5,1
    0x8400687a    0xe2    sll a0,a5,a0
    0x8400687e    0xe6    not a5,a0
    0x84006882    0xea    and a5,a5,a3
    0x84006884    0xec    sext.w a5,a5
    0x84006886    0xee    sw a5,0(a4)
    0x84006888    0xf0    j ffffffff84006830 <handleInterrupt+0x98>
    0x8400688a    0xf2    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
84 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 121 nodes.

Section postpone (196 of 292)
=============================

Deriving specifications
-----------------------

Section `postpone` consists of 15 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `postpone`:

    0x84005c74     0x0    addi sp,sp,-16
    0x84005c76     0x2    sd ra,8(sp)           ; stack access
    0x84005c78     0x4    sd s0,0(sp)           ; stack access
    0x84005c7a     0x6    mv s0,a0
    0x84005c7c     0x8    ld a0,24(a0)
    0x84005c7e     0xa    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x84005c82     0xe    ld a0,24(s0)
    0x84005c84    0x10    jal ra,ffffffff84005bfe <tcbReleaseEnqueue>
    0x84005c88    0x14    li a5,1
    0x84005c8a    0x16    auipc a4,0x19
    0x84005c8e    0x1a    sd a5,942(a4) # ffffffff8401f038 <ksReprogram>
    0x84005c92    0x1e    ld ra,8(sp)           ; stack access
    0x84005c94    0x20    ld s0,0(sp)           ; stack access
    0x84005c96    0x22    addi sp,sp,16
    0x84005c98    0x24    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `postpone` has 25 nodes.

Section invokeIRQHandler_SetIRQHandler (197 of 292)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 23 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x84005aca     0x0    addi sp,sp,-48
    0x84005acc     0x2    sd ra,40(sp)          ; stack access
    0x84005ace     0x4    sd s0,32(sp)          ; stack access
    0x84005ad0     0x6    sd s1,24(sp)          ; stack access
    0x84005ad2     0x8    sd a1,0(sp)           ; stack access
    0x84005ad4     0xa    sd a2,8(sp)           ; stack access
    0x84005ad6     0xc    mv s1,a3
    0x84005ad8     0xe    slli a0,a0,0x5
    0x84005ada    0x10    auipc s0,0x8
    0x84005ade    0x14    addi s0,s0,-730 # ffffffff8400d800 <intStateIRQNode>
    0x84005ae2    0x18    add s0,s0,a0
    0x84005ae4    0x1a    mv a0,s0
    0x84005ae6    0x1c    jal ra,ffffffff84005a96 <cteDeleteOne>
    0x84005aea    0x20    mv a3,s0
    0x84005aec    0x22    mv a2,s1
    0x84005aee    0x24    ld a0,0(sp)           ; stack access
    0x84005af0    0x26    ld a1,8(sp)           ; stack access
    0x84005af2    0x28    jal ra,ffffffff84003aba <cteInsert>
    0x84005af6    0x2c    ld ra,40(sp)          ; stack access
    0x84005af8    0x2e    ld s0,32(sp)          ; stack access
    0x84005afa    0x30    ld s1,24(sp)          ; stack access
    0x84005afc    0x32    addi sp,sp,48
    0x84005afe    0x34    ret

Proving inst theorems
---------------------

23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 36 nodes.

Section cancelSignal (198 of 292)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 49 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `cancelSignal`:

    0x84005464     0x0    addi sp,sp,-48
    0x84005466     0x2    sd ra,40(sp)          ; stack access
    0x84005468     0x4    sd s0,32(sp)          ; stack access
    0x8400546a     0x6    sd s1,24(sp)          ; stack access
    0x8400546c     0x8    mv s1,a0
    0x8400546e     0xa    mv s0,a1
    0x84005470     0xc    ld a5,8(a1)
    0x84005472     0xe    slli a1,a5,0x19
    0x84005476    0x12    srli a1,a1,0x19
    0x84005478    0x14    srli a5,a5,0x26
    0x8400547a    0x16    andi a5,a5,1
    0x8400547c    0x18    beqz a5,ffffffff84005484 <cancelSignal+0x20>
    0x8400547e    0x1a    li a5,-1
    0x84005480    0x1c    slli a5,a5,0x27
    0x84005482    0x1e    or a1,a1,a5
    0x84005484    0x20    ld a5,0(s0)
    0x84005486    0x22    srli a2,a5,0x19
    0x8400548a    0x26    bgez a5,ffffffff84005494 <cancelSignal+0x30>
    0x8400548e    0x2a    li a5,-1
    0x84005490    0x2c    slli a5,a5,0x27
    0x84005492    0x2e    or a2,a2,a5
    0x84005494    0x30    mv a0,s1
    0x84005496    0x32    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x8400549a    0x36    ld a3,8(s0)
    0x8400549c    0x38    li a4,-1
    0x8400549e    0x3a    slli a5,a4,0x27
    0x840054a2    0x3e    and a3,a3,a5
    0x840054a4    0x40    srli a4,a4,0x19
    0x840054a6    0x42    and a4,a4,a0
    0x840054a8    0x44    or a4,a4,a3
    0x840054aa    0x46    sd a4,8(s0)
    0x840054ac    0x48    ld a5,0(s0)
    0x840054ae    0x4a    slli a5,a5,0x27
    0x840054b0    0x4c    srli a5,a5,0x27
    0x840054b2    0x4e    slli a1,a1,0x19
    0x840054b4    0x50    or a5,a5,a1
    0x840054b6    0x52    beqz a0,ffffffff840054cc <cancelSignal+0x68>
    0x840054b8    0x54    sd a5,0(s0)
    0x840054ba    0x56    li a1,0
    0x840054bc    0x58    mv a0,s1
    0x840054be    0x5a    jal ra,ffffffff84004a52 <setThreadState>
    0x840054c2    0x5e    ld ra,40(sp)          ; stack access
    0x840054c4    0x60    ld s0,32(sp)          ; stack access
    0x840054c6    0x62    ld s1,24(sp)          ; stack access
    0x840054c8    0x64    addi sp,sp,48
    0x840054ca    0x66    ret
    0x840054cc    0x68    andi a5,a5,-4
    0x840054ce    0x6a    sd a5,0(s0)
    0x840054d0    0x6c    j ffffffff840054ba <cancelSignal+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 71 nodes.

Section reply_remove (199 of 292)
=================================

Deriving specifications
-----------------------

Section `reply_remove` consists of 69 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `reply_remove`:

    0x840051d4     0x0    addi sp,sp,-32
    0x840051d6     0x2    sd ra,24(sp)          ; stack access
    0x840051d8     0x4    sd s0,16(sp)          ; stack access
    0x840051da     0x6    sd s1,8(sp)           ; stack access
    0x840051dc     0x8    mv s1,a0
    0x840051de     0xa    ld a5,16(a0)
    0x840051e0     0xc    slli a3,a5,0x19
    0x840051e4    0x10    srli a3,a3,0x19
    0x840051e6    0x12    srli a4,a5,0x26
    0x840051ea    0x16    andi a4,a4,1
    0x840051ec    0x18    beqz a4,ffffffff84005220 <reply_remove+0x4c>
    0x840051ee    0x1a    li s0,-1
    0x840051f0    0x1c    slli a4,s0,0x27
    0x840051f4    0x20    or a3,a3,a4
    0x840051f6    0x22    ld a4,8(a0)
    0x840051f8    0x24    srli s0,s0,0x19
    0x840051fa    0x26    and s0,s0,a4
    0x840051fc    0x28    srli a4,a4,0x26
    0x840051fe    0x2a    andi a4,a4,1
    0x84005200    0x2c    beqz a4,ffffffff8400520a <reply_remove+0x36>
    0x84005202    0x2e    li a4,-1
    0x84005204    0x30    slli a4,a4,0x27
    0x84005206    0x32    or s0,s0,a4
    0x84005208    0x34    beqz a3,ffffffff84005260 <reply_remove+0x8c>
    0x8400520a    0x36    srli a5,a5,0x30
    0x8400520c    0x38    andi a5,a5,1
    0x8400520e    0x3a    beqz a5,ffffffff84005230 <reply_remove+0x5c>
    0x84005210    0x3c    mv a0,s1
    0x84005212    0x3e    jal ra,ffffffff84005136 <reply_pop>
    0x84005216    0x42    ld ra,24(sp)          ; stack access
    0x84005218    0x44    ld s0,16(sp)          ; stack access
    0x8400521a    0x46    ld s1,8(sp)           ; stack access
    0x8400521c    0x48    addi sp,sp,32
    0x8400521e    0x4a    ret
    0x84005220    0x4c    ld a4,8(a0)
    0x84005222    0x4e    slli s0,a4,0x19
    0x84005226    0x52    srli s0,s0,0x19
    0x84005228    0x54    srli a4,a4,0x26
    0x8400522a    0x56    andi a4,a4,1
    0x8400522c    0x58    bnez a4,ffffffff84005202 <reply_remove+0x2e>
    0x8400522e    0x5a    j ffffffff84005208 <reply_remove+0x34>
    0x84005230    0x5c    sd zero,8(a3) # ffffffffe0000008 <ki_end+0x5bfdc008>
    0x84005234    0x60    ld a0,0(s1)
    0x84005236    0x62    ld a4,288(a0)
    0x8400523a    0x66    li a5,-1
    0x8400523c    0x68    slli a5,a5,0x28
    0x8400523e    0x6a    addi a5,a5,31
    0x84005240    0x6c    and a5,a5,a4
    0x84005242    0x6e    sd a5,288(a0)
    0x84005246    0x72    sd zero,0(s1)
    0x8400524a    0x76    li a1,0
    0x8400524c    0x78    jal ra,ffffffff84004a52 <setThreadState>
    0x84005250    0x7c    beqz s0,ffffffff84005256 <reply_remove+0x82>
    0x84005252    0x7e    sd zero,16(s0)
    0x84005256    0x82    sd zero,8(s1)
    0x8400525a    0x86    sd zero,16(s1)
    0x8400525e    0x8a    j ffffffff84005216 <reply_remove+0x42>
    0x84005260    0x8c    ld a0,0(s1)
    0x84005262    0x8e    beqz a0,ffffffff84005250 <reply_remove+0x7c>
    0x84005264    0x90    ld a4,288(a0)
    0x84005268    0x94    li a5,-1
    0x8400526a    0x96    slli a5,a5,0x28
    0x8400526c    0x98    addi a5,a5,31
    0x8400526e    0x9a    and a5,a5,a4
    0x84005270    0x9c    sd a5,288(a0)
    0x84005274    0xa0    sd zero,0(s1)
    0x84005278    0xa4    li a1,0
    0x8400527a    0xa6    jal ra,ffffffff84004a52 <setThreadState>
    0x8400527e    0xaa    j ffffffff84005250 <reply_remove+0x7c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_remove` has 108 nodes.

Section reply_pop (200 of 292)
==============================

Deriving specifications
-----------------------

Section `reply_pop` consists of 63 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `reply_pop`:

    0x84005136     0x0    addi sp,sp,-48
    0x84005138     0x2    sd ra,40(sp)          ; stack access
    0x8400513a     0x4    sd s0,32(sp)          ; stack access
    0x8400513c     0x6    sd s1,24(sp)          ; stack access
    0x8400513e     0x8    sd s2,16(sp)          ; stack access
    0x84005140     0xa    sd s3,8(sp)           ; stack access
    0x84005142     0xc    mv s2,a0
    0x84005144     0xe    ld s3,0(a0)
    0x84005148    0x12    ld a5,288(s3)
    0x8400514c    0x16    li s0,-1
    0x8400514e    0x18    slli a4,s0,0x28
    0x84005152    0x1c    addi a4,a4,31
    0x84005154    0x1e    and a5,a5,a4
    0x84005156    0x20    sd a5,288(s3)
    0x8400515a    0x24    sd zero,0(a0)
    0x8400515e    0x28    li a1,0
    0x84005160    0x2a    mv a0,s3
    0x84005162    0x2c    jal ra,ffffffff84004a52 <setThreadState>
    0x84005166    0x30    ld a5,16(s2)
    0x8400516a    0x34    srli s0,s0,0x19
    0x8400516c    0x36    and s0,s0,a5
    0x8400516e    0x38    srli a5,a5,0x26
    0x84005170    0x3a    andi a5,a5,1
    0x84005172    0x3c    beqz a5,ffffffff840051b8 <reply_pop+0x82>
    0x84005174    0x3e    li s1,-1
    0x84005176    0x40    slli a5,s1,0x27
    0x8400517a    0x44    or s0,s0,a5
    0x8400517c    0x46    ld a5,8(s2)
    0x84005180    0x4a    srli s1,s1,0x19
    0x84005182    0x4c    and s1,s1,a5
    0x84005184    0x4e    srli a5,a5,0x26
    0x84005186    0x50    andi a5,a5,1
    0x84005188    0x52    beqz a5,ffffffff84005192 <reply_pop+0x5c>
    0x8400518a    0x54    li a5,-1
    0x8400518c    0x56    slli a5,a5,0x27
    0x8400518e    0x58    or s1,s1,a5
    0x84005190    0x5a    beqz s0,ffffffff840051aa <reply_pop+0x74>
    0x84005192    0x5c    ld a5,368(s3)
    0x84005196    0x60    beqz a5,ffffffff840051ca <reply_pop+0x94>
    0x84005198    0x62    sd s1,32(s0)
    0x8400519a    0x64    beqz s1,ffffffff840051a2 <reply_pop+0x6c>
    0x8400519c    0x66    ld a5,16(s2)
    0x840051a0    0x6a    sd a5,16(s1)
    0x840051a2    0x6c    sd zero,8(s2)
    0x840051a6    0x70    sd zero,16(s2)
    0x840051aa    0x74    ld ra,40(sp)          ; stack access
    0x840051ac    0x76    ld s0,32(sp)          ; stack access
    0x840051ae    0x78    ld s1,24(sp)          ; stack access
    0x840051b0    0x7a    ld s2,16(sp)          ; stack access
    0x840051b2    0x7c    ld s3,8(sp)           ; stack access
    0x840051b4    0x7e    addi sp,sp,48
    0x840051b6    0x80    ret
    0x840051b8    0x82    ld a5,8(s2)
    0x840051bc    0x86    slli s1,a5,0x19
    0x840051c0    0x8a    srli s1,s1,0x19
    0x840051c2    0x8c    srli a5,a5,0x26
    0x840051c4    0x8e    andi a5,a5,1
    0x840051c6    0x90    bnez a5,ffffffff8400518a <reply_pop+0x54>
    0x840051c8    0x92    j ffffffff84005190 <reply_pop+0x5a>
    0x840051ca    0x94    mv a1,s3
    0x840051cc    0x96    mv a0,s0
    0x840051ce    0x98    jal ra,ffffffff84005052 <schedContext_donate>
    0x840051d2    0x9c    j ffffffff84005198 <reply_pop+0x62>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_pop` has 101 nodes.

Section reply_push (201 of 292)
===============================

Deriving specifications
-----------------------

Section `reply_push` consists of 57 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `reply_push`:

    0x840050a2     0x0    addi sp,sp,-48
    0x840050a4     0x2    sd ra,40(sp)          ; stack access
    0x840050a6     0x4    sd s0,32(sp)          ; stack access
    0x840050a8     0x6    sd s1,24(sp)          ; stack access
    0x840050aa     0x8    sd s2,16(sp)          ; stack access
    0x840050ac     0xa    sd s3,8(sp)           ; stack access
    0x840050ae     0xc    mv s0,a1
    0x840050b0     0xe    mv s1,a2
    0x840050b2    0x10    mv s2,a3
    0x840050b4    0x12    ld s3,368(a0)
    0x840050b8    0x16    ld a3,288(a1)
    0x840050bc    0x1a    li a4,-1
    0x840050be    0x1c    slli a4,a4,0x28
    0x840050c0    0x1e    addi a4,a4,31
    0x840050c2    0x20    and a3,a3,a4
    0x840050c4    0x22    sd a3,288(a1)
    0x840050c8    0x26    sd a0,0(a2)
    0x840050ca    0x28    ld a6,288(a0)
    0x840050ce    0x2c    and a4,a6,a4
    0x840050d2    0x30    slli a2,a2,0x1
    0x840050d4    0x32    lui a3,0xe0000
    0x840050d8    0x36    srli a3,a3,0x18
    0x840050da    0x38    and a2,a2,a3
    0x840050dc    0x3a    or a4,a4,a2
    0x840050de    0x3c    sd a4,288(a0)
    0x840050e2    0x40    li a1,5
    0x840050e4    0x42    jal ra,ffffffff84004a52 <setThreadState>
    0x840050e8    0x46    beqz s3,ffffffff840050f2 <reply_push+0x50>
    0x840050ec    0x4a    ld a5,368(s0)
    0x840050f0    0x4e    beqz a5,ffffffff84005100 <reply_push+0x5e>
    0x840050f2    0x50    ld ra,40(sp)          ; stack access
    0x840050f4    0x52    ld s0,32(sp)          ; stack access
    0x840050f6    0x54    ld s1,24(sp)          ; stack access
    0x840050f8    0x56    ld s2,16(sp)          ; stack access
    0x840050fa    0x58    ld s3,8(sp)           ; stack access
    0x840050fc    0x5a    addi sp,sp,48
    0x840050fe    0x5c    ret
    0x84005100    0x5e    beqz s2,ffffffff840050f2 <reply_push+0x50>
    0x84005104    0x62    ld a4,32(s3) # ffffffffe0000020 <ki_end+0x5bfdc020>
    0x84005108    0x66    slli a5,a4,0x19
    0x8400510c    0x6a    srli a5,a5,0x19
    0x8400510e    0x6c    sd a5,8(s1)
    0x84005110    0x6e    beqz a4,ffffffff8400511a <reply_push+0x78>
    0x84005112    0x70    slli a5,s1,0x19
    0x84005116    0x74    srli a5,a5,0x19
    0x84005118    0x76    sd a5,16(a4)
    0x8400511a    0x78    slli a5,s3,0x19
    0x8400511e    0x7c    srli a5,a5,0x19
    0x84005120    0x7e    li a4,1
    0x84005122    0x80    slli a4,a4,0x30
    0x84005124    0x82    or a5,a5,a4
    0x84005126    0x84    sd a5,16(s1)
    0x84005128    0x86    sd s1,32(s3)
    0x8400512c    0x8a    mv a1,s0
    0x8400512e    0x8c    mv a0,s3
    0x84005130    0x8e    jal ra,ffffffff84005052 <schedContext_donate>
    0x84005134    0x92    j ffffffff840050f2 <reply_push+0x50>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_push` has 90 nodes.

Section schedContext_donate (202 of 292)
========================================

Deriving specifications
-----------------------

Section `schedContext_donate` consists of 28 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `schedContext_donate`:

    0x84005052     0x0    addi sp,sp,-32
    0x84005054     0x2    sd ra,24(sp)          ; stack access
    0x84005056     0x4    sd s0,16(sp)          ; stack access
    0x84005058     0x6    sd s1,8(sp)           ; stack access
    0x8400505a     0x8    sd s2,0(sp)           ; stack access
    0x8400505c     0xa    mv s0,a0
    0x8400505e     0xc    mv s1,a1
    0x84005060     0xe    ld s2,24(a0)
    0x84005064    0x12    beqz s2,ffffffff8400508a <schedContext_donate+0x38>
    0x84005068    0x16    mv a0,s2
    0x8400506a    0x18    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x8400506e    0x1c    sd zero,368(s2)
    0x84005072    0x20    auipc a5,0x1a
    0x84005076    0x24    ld a5,-26(a5) # ffffffff8401f058 <ksCurThread>
    0x8400507a    0x28    beq a5,s2,ffffffff8400509c <schedContext_donate+0x4a>
    0x8400507e    0x2c    auipc a5,0x1a
    0x84005082    0x30    ld a5,-54(a5) # ffffffff8401f048 <ksSchedulerAction>
    0x84005086    0x34    beq a5,s2,ffffffff8400509c <schedContext_donate+0x4a>
    0x8400508a    0x38    sd s1,24(s0)
    0x8400508c    0x3a    sd s0,368(s1)
    0x84005090    0x3e    ld ra,24(sp)          ; stack access
    0x84005092    0x40    ld s0,16(sp)          ; stack access
    0x84005094    0x42    ld s1,8(sp)           ; stack access
    0x84005096    0x44    ld s2,0(sp)           ; stack access
    0x84005098    0x46    addi sp,sp,32
    0x8400509a    0x48    ret
    0x8400509c    0x4a    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x840050a0    0x4e    j ffffffff8400508a <schedContext_donate+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_donate` has 51 nodes.

Section switchToThread (203 of 292)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 13 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x84004fd8     0x0    addi sp,sp,-16
    0x84004fda     0x2    sd ra,8(sp)           ; stack access
    0x84004fdc     0x4    sd s0,0(sp)           ; stack access
    0x84004fde     0x6    mv s0,a0
    0x84004fe0     0x8    jal ra,ffffffff84002ba4 <setVMRoot>
    0x84004fe4     0xc    mv a0,s0
    0x84004fe6     0xe    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x84004fea    0x12    auipc a5,0x1a
    0x84004fee    0x16    sd s0,110(a5) # ffffffff8401f058 <ksCurThread>
    0x84004ff2    0x1a    ld ra,8(sp)           ; stack access
    0x84004ff4    0x1c    ld s0,0(sp)           ; stack access
    0x84004ff6    0x1e    addi sp,sp,16
    0x84004ff8    0x20    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 21 nodes.

Section possibleSwitchTo (204 of 292)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 29 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x84004cfa     0x0    ld a5,368(a0)
    0x84004cfe     0x4    beqz a5,ffffffff84004d4c <possibleSwitchTo+0x52>
    0x84004d00     0x6    addi sp,sp,-16
    0x84004d02     0x8    sd ra,8(sp)           ; stack access
    0x84004d04     0xa    sd s0,0(sp)           ; stack access
    0x84004d06     0xc    mv s0,a0
    0x84004d08     0xe    ld a5,288(a0)
    0x84004d0c    0x12    andi a5,a5,1
    0x84004d0e    0x14    bnez a5,ffffffff84004d3a <possibleSwitchTo+0x40>
    0x84004d10    0x16    ld a4,344(a0)
    0x84004d14    0x1a    auipc a5,0x1a
    0x84004d18    0x1e    ld a5,772(a5) # ffffffff8401f018 <ksCurDomain>
    0x84004d1c    0x22    bne a4,a5,ffffffff84004d36 <possibleSwitchTo+0x3c>
    0x84004d20    0x26    auipc a5,0x1a
    0x84004d24    0x2a    ld a5,808(a5) # ffffffff8401f048 <ksSchedulerAction>
    0x84004d28    0x2e    beqz a5,ffffffff84004d42 <possibleSwitchTo+0x48>
    0x84004d2a    0x30    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84004d2e    0x34    mv a0,s0
    0x84004d30    0x36    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x84004d34    0x3a    j ffffffff84004d3a <possibleSwitchTo+0x40>
    0x84004d36    0x3c    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x84004d3a    0x40    ld ra,8(sp)           ; stack access
    0x84004d3c    0x42    ld s0,0(sp)           ; stack access
    0x84004d3e    0x44    addi sp,sp,16
    0x84004d40    0x46    ret
    0x84004d42    0x48    auipc a5,0x1a
    0x84004d46    0x4c    sd a0,774(a5) # ffffffff8401f048 <ksSchedulerAction>
    0x84004d4a    0x50    j ffffffff84004d3a <possibleSwitchTo+0x40>
    0x84004d4c    0x52    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 52 nodes.

Section schedContext_completeYieldTo (205 of 292)
=================================================

Deriving specifications
-----------------------

Section `schedContext_completeYieldTo` consists of 20 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_completeYieldTo`:

    0x840048ea     0x0    beqz a0,ffffffff8400491a <schedContext_completeYieldTo+0x30>
    0x840048ec     0x2    addi sp,sp,-16
    0x840048ee     0x4    sd ra,8(sp)           ; stack access
    0x840048f0     0x6    sd s0,0(sp)           ; stack access
    0x840048f2     0x8    mv s0,a0
    0x840048f4     0xa    ld a0,376(a0)
    0x840048f8     0xe    beqz a0,ffffffff84004912 <schedContext_completeYieldTo+0x28>
    0x840048fa    0x10    jal ra,ffffffff840047c0 <schedContext_updateConsumed>
    0x840048fe    0x14    auipc a5,0x1a
    0x84004902    0x18    ld a5,1882(a5) # ffffffff8401f058 <ksCurThread>
    0x84004906    0x1c    sd a0,88(a5)
    0x84004908    0x1e    li a4,1
    0x8400490a    0x20    sd a4,80(a5)
    0x8400490c    0x22    mv a0,s0
    0x8400490e    0x24    jal ra,ffffffff840048d8 <schedContext_cancelYieldTo>
    0x84004912    0x28    ld ra,8(sp)           ; stack access
    0x84004914    0x2a    ld s0,0(sp)           ; stack access
    0x84004916    0x2c    addi sp,sp,16
    0x84004918    0x2e    ret
    0x8400491a    0x30    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_completeYieldTo` has 36 nodes.

Section maskCapRights (206 of 292)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 104 instructions.
Switch found.


Stack analysis
---------------

17 stack accesses found. Annotated code for `maskCapRights`:

    0x84004688      0x0    addi sp,sp,-48
    0x8400468a      0x2    sd ra,40(sp)          ; stack access
    0x8400468c      0x4    sd a1,0(sp)           ; stack access
    0x8400468e      0x6    sd a2,8(sp)           ; stack access
    0x84004690      0x8    srli a5,a1,0x3b
    0x84004694      0xc    andi a4,a5,1
    0x84004698     0x10    bnez a4,ffffffff840046b4 <maskCapRights+0x2c>
    0x8400469a     0x12    ld a4,8(sp)           ; stack access
    0x8400469c     0x14    li a3,24
    0x8400469e     0x16    bltu a3,a5,ffffffff84004792 <maskCapRights+0x10a>
    0x840046a2     0x1a    slli a5,a5,0x2
    0x840046a4     0x1c    auipc a3,0x7
    0x840046a8     0x20    addi a3,a3,1472 # ffffffff8400bc64 <msgRegisters+0x2bc>
    0x840046ac     0x24    add a5,a5,a3
    0x840046ae     0x26    lw a5,0(a5)
    0x840046b0     0x28    add a5,a5,a3
    0x840046b2     0x2a    jr a5
    0x840046b4     0x2c    jal ra,ffffffff84002eda <Arch_maskCapRights>
    0x840046b8     0x30    sd a0,16(sp)          ; stack access
    0x840046ba     0x32    sd a1,24(sp)          ; stack access
    0x840046bc     0x34    ld a0,16(sp)          ; stack access
    0x840046be     0x36    ld a1,24(sp)          ; stack access
    0x840046c0     0x38    ld ra,40(sp)          ; stack access
    0x840046c2     0x3a    addi sp,sp,48
    0x840046c4     0x3c    ret
    0x840046c6     0x3e    sd a1,16(sp)          ; stack access
    0x840046c8     0x40    sd a4,24(sp)          ; stack access
    0x840046ca     0x42    j ffffffff840046bc <maskCapRights+0x34>
    0x840046cc     0x44    srli a5,a1,0x37
    0x840046d0     0x48    and a5,a5,a0
    0x840046d2     0x4a    li a3,1
    0x840046d4     0x4c    and a5,a5,a3
    0x840046d6     0x4e    slli a5,a5,0x37
    0x840046d8     0x50    li a2,-1
    0x840046da     0x52    slli a6,a2,0x37
    0x840046de     0x56    addi a6,a6,-1
    0x840046e0     0x58    and a6,a1,a6
    0x840046e4     0x5c    or a5,a5,a6
    0x840046e8     0x60    slli a6,a2,0x38
    0x840046ec     0x64    addi a6,a6,-1
    0x840046ee     0x66    and a5,a5,a6
    0x840046f2     0x6a    srli a6,a0,0x1
    0x840046f6     0x6e    srli a7,a1,0x38
    0x840046fa     0x72    and a6,a6,a7
    0x840046fe     0x76    and a6,a3,a6
    0x84004702     0x7a    slli a6,a6,0x38
    0x84004704     0x7c    or a5,a5,a6
    0x84004708     0x80    slli a6,a2,0x39
    0x8400470c     0x84    addi a6,a6,-1
    0x8400470e     0x86    and a5,a5,a6
    0x84004712     0x8a    srli a6,a0,0x2
    0x84004716     0x8e    srli a7,a1,0x39
    0x8400471a     0x92    and a6,a6,a7
    0x8400471e     0x96    and a6,a3,a6
    0x84004722     0x9a    slli a6,a6,0x39
    0x84004724     0x9c    or a5,a5,a6
    0x84004728     0xa0    slli a2,a2,0x3a
    0x8400472a     0xa2    addi a2,a2,-1
    0x8400472c     0xa4    and a5,a5,a2
    0x8400472e     0xa6    srli a0,a0,0x3
    0x84004730     0xa8    srli a1,a1,0x3a
    0x84004732     0xaa    and a1,a1,a0
    0x84004734     0xac    and a3,a3,a1
    0x84004736     0xae    slli a3,a3,0x3a
    0x84004738     0xb0    or a5,a5,a3
    0x8400473a     0xb2    sd a5,16(sp)          ; stack access
    0x8400473c     0xb4    sd a4,24(sp)          ; stack access
    0x8400473e     0xb6    j ffffffff840046bc <maskCapRights+0x34>
    0x84004740     0xb8    srli a5,a1,0x39
    0x84004744     0xbc    and a5,a5,a0
    0x84004746     0xbe    li a3,1
    0x84004748     0xc0    and a5,a5,a3
    0x8400474a     0xc2    slli a5,a5,0x39
    0x8400474c     0xc4    li a2,-1
    0x8400474e     0xc6    slli a6,a2,0x39
    0x84004752     0xca    addi a6,a6,-1
    0x84004754     0xcc    and a6,a1,a6
    0x84004758     0xd0    or a5,a5,a6
    0x8400475c     0xd4    slli a2,a2,0x3a
    0x8400475e     0xd6    addi a2,a2,-1
    0x84004760     0xd8    and a5,a5,a2
    0x84004762     0xda    srli a0,a0,0x1
    0x84004764     0xdc    srli a1,a1,0x3a
    0x84004766     0xde    and a1,a1,a0
    0x84004768     0xe0    and a3,a3,a1
    0x8400476a     0xe2    slli a3,a3,0x3a
    0x8400476c     0xe4    or a5,a5,a3
    0x8400476e     0xe6    sd a5,16(sp)          ; stack access
    0x84004770     0xe8    sd a4,24(sp)          ; stack access
    0x84004772     0xea    j ffffffff840046bc <maskCapRights+0x34>
    0x84004774     0xec    srli a5,a0,0x2
    0x84004778     0xf0    srli a0,a1,0x3a
    0x8400477c     0xf4    and a5,a5,a0
    0x8400477e     0xf6    andi a5,a5,1
    0x84004780     0xf8    slli a5,a5,0x3a
    0x84004782     0xfa    li a3,-1
    0x84004784     0xfc    slli a3,a3,0x3a
    0x84004786     0xfe    addi a3,a3,-1
    0x84004788    0x100    and a1,a1,a3
    0x8400478a    0x102    or a1,a1,a5
    0x8400478c    0x104    sd a1,16(sp)          ; stack access
    0x8400478e    0x106    sd a4,24(sp)          ; stack access
    0x84004790    0x108    j ffffffff840046bc <maskCapRights+0x34>
    0x84004792    0x10a    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
98 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 195 nodes.

Section sameObjectAs (207 of 292)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 37 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `sameObjectAs`:

    0x84004510     0x0    addi sp,sp,-48
    0x84004512     0x2    sd ra,40(sp)          ; stack access
    0x84004514     0x4    sd a0,16(sp)          ; stack access
    0x84004516     0x6    sd a1,24(sp)          ; stack access
    0x84004518     0x8    sd a2,0(sp)           ; stack access
    0x8400451a     0xa    sd a3,8(sp)           ; stack access
    0x8400451c     0xc    srli a0,a0,0x3b
    0x8400451e     0xe    li a5,2
    0x84004520    0x10    beq a0,a5,ffffffff84004564 <sameObjectAs+0x54>
    0x84004524    0x14    li a4,14
    0x84004526    0x16    beq a0,a4,ffffffff84004548 <sameObjectAs+0x38>
    0x8400452a    0x1a    andi a0,a0,1
    0x8400452c    0x1c    beqz a0,ffffffff84004536 <sameObjectAs+0x26>
    0x8400452e    0x1e    srli a5,a2,0x3b
    0x84004532    0x22    andi a5,a5,1
    0x84004534    0x24    bnez a5,ffffffff84004556 <sameObjectAs+0x46>
    0x84004536    0x26    ld a2,0(sp)           ; stack access
    0x84004538    0x28    ld a3,8(sp)           ; stack access
    0x8400453a    0x2a    ld a0,16(sp)          ; stack access
    0x8400453c    0x2c    ld a1,24(sp)          ; stack access
    0x8400453e    0x2e    jal ra,ffffffff84004066 <sameRegionAs>
    0x84004542    0x32    ld ra,40(sp)          ; stack access
    0x84004544    0x34    addi sp,sp,48
    0x84004546    0x36    ret
    0x84004548    0x38    srli a5,a2,0x3b
    0x8400454c    0x3c    li a4,16
    0x8400454e    0x3e    li a0,0
    0x84004550    0x40    bne a5,a4,ffffffff84004536 <sameObjectAs+0x26>
    0x84004554    0x44    j ffffffff84004542 <sameObjectAs+0x32>
    0x84004556    0x46    ld a2,0(sp)           ; stack access
    0x84004558    0x48    ld a3,8(sp)           ; stack access
    0x8400455a    0x4a    ld a0,16(sp)          ; stack access
    0x8400455c    0x4c    ld a1,24(sp)          ; stack access
    0x8400455e    0x4e    jal ra,ffffffff84003194 <Arch_sameObjectAs>
    0x84004562    0x52    j ffffffff84004542 <sameObjectAs+0x32>
    0x84004564    0x54    li a0,0
    0x84004566    0x56    j ffffffff84004542 <sameObjectAs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 64 nodes.

Section deriveCap (208 of 292)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 45 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `deriveCap`:

    0x840044a4     0x0    addi sp,sp,-64
    0x840044a6     0x2    sd ra,56(sp)          ; stack access
    0x840044a8     0x4    sd s0,48(sp)          ; stack access
    0x840044aa     0x6    sd s1,40(sp)          ; stack access
    0x840044ac     0x8    sd s2,32(sp)          ; stack access
    0x840044ae     0xa    sd s3,24(sp)          ; stack access
    0x840044b0     0xc    mv s0,a0
    0x840044b2     0xe    sd a2,0(sp)           ; stack access
    0x840044b4    0x10    sd a3,8(sp)           ; stack access
    0x840044b6    0x12    mv s1,a2
    0x840044b8    0x14    srli a5,a2,0x3b
    0x840044bc    0x18    andi s2,a5,1
    0x840044c0    0x1c    bnez s2,ffffffff840044ee <deriveCap+0x4a>
    0x840044c4    0x20    ld s3,8(sp)           ; stack access
    0x840044c6    0x22    addi a4,a5,-14
    0x840044ca    0x26    andi a4,a4,-5
    0x840044cc    0x28    beqz a4,ffffffff84004500 <deriveCap+0x5c>
    0x840044ce    0x2a    li a4,2
    0x840044d0    0x2c    beq a5,a4,ffffffff840044f4 <deriveCap+0x50>
    0x840044d4    0x30    sd s2,0(s0)           ; stack access
    0x840044d8    0x34    sd s1,8(s0)           ; stack access
    0x840044da    0x36    sd s3,16(s0)          ; stack access
    0x840044de    0x3a    mv a0,s0
    0x840044e0    0x3c    ld ra,56(sp)          ; stack access
    0x840044e2    0x3e    ld s0,48(sp)          ; stack access
    0x840044e4    0x40    ld s1,40(sp)          ; stack access
    0x840044e6    0x42    ld s2,32(sp)          ; stack access
    0x840044e8    0x44    ld s3,24(sp)          ; stack access
    0x840044ea    0x46    addi sp,sp,64
    0x840044ec    0x48    ret
    0x840044ee    0x4a    jal ra,ffffffff84002e6c <Arch_deriveCap>
    0x840044f2    0x4e    j ffffffff840044de <deriveCap+0x3a>
    0x840044f4    0x50    mv a0,a1
    0x840044f6    0x52    jal ra,ffffffff84004466 <ensureNoChildren>
    0x840044fa    0x56    bnez a0,ffffffff84004508 <deriveCap+0x64>
    0x840044fc    0x58    mv s2,a0
    0x840044fe    0x5a    j ffffffff840044d4 <deriveCap+0x30>
    0x84004500    0x5c    mv s3,a4
    0x84004502    0x5e    mv s1,a4
    0x84004504    0x60    mv s2,a4
    0x84004506    0x62    j ffffffff840044d4 <deriveCap+0x30>
    0x84004508    0x64    mv s3,s2
    0x8400450a    0x66    mv s1,s2
    0x8400450c    0x68    mv s2,a0
    0x8400450e    0x6a    j ffffffff840044d4 <deriveCap+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 72 nodes.

Section getObjectSize (209 of 292)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 32 instructions.
Switch found.


Stack analysis
---------------

2 stack accesses found. Annotated code for `getObjectSize`:

    0x84003fe4     0x0    addi sp,sp,-16
    0x84003fe6     0x2    sd ra,8(sp)           ; stack access
    0x84003fe8     0x4    li a5,6
    0x84003fea     0x6    bltu a5,a0,ffffffff84004008 <getObjectSize+0x24>
    0x84003fee     0xa    li a5,6
    0x84003ff0     0xc    bltu a5,a0,ffffffff84004028 <getObjectSize+0x44>
    0x84003ff4    0x10    slli a0,a0,0x2
    0x84003ff6    0x12    auipc a4,0x8
    0x84003ffa    0x16    addi a4,a4,-1242 # ffffffff8400bb1c <msgRegisters+0x174>
    0x84003ffe    0x1a    add a5,a0,a4
    0x84004002    0x1e    lw a5,0(a5)
    0x84004004    0x20    add a5,a5,a4
    0x84004006    0x22    jr a5
    0x84004008    0x24    jal ra,ffffffff84003234 <Arch_getObjectSize>
    0x8400400c    0x28    ld ra,8(sp)           ; stack access
    0x8400400e    0x2a    addi sp,sp,16
    0x84004010    0x2c    ret
    0x84004012    0x2e    li a0,4
    0x84004014    0x30    j ffffffff8400400c <getObjectSize+0x28>
    0x84004016    0x32    addi a0,a1,5 # fffffffff8000005 <ki_end+0x73fdc005>
    0x8400401a    0x36    j ffffffff8400400c <getObjectSize+0x28>
    0x8400401c    0x38    mv a0,a1
    0x8400401e    0x3a    j ffffffff8400400c <getObjectSize+0x28>
    0x84004020    0x3c    mv a0,a1
    0x84004022    0x3e    j ffffffff8400400c <getObjectSize+0x28>
    0x84004024    0x40    li a0,5
    0x84004026    0x42    j ffffffff8400400c <getObjectSize+0x28>
    0x84004028    0x44    jal ra,ffffffff84002424 <halt>
    0x8400402c    0x48    li a0,10
    0x8400402e    0x4a    j ffffffff8400400c <getObjectSize+0x28>
    0x84004030    0x4c    li a0,6
    0x84004032    0x4e    j ffffffff8400400c <getObjectSize+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 54 nodes.

Section invokeIRQControl (210 of 292)
=====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 25 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `invokeIRQControl`:

    0x84003ec8     0x0    addi sp,sp,-48
    0x84003eca     0x2    sd ra,40(sp)          ; stack access
    0x84003ecc     0x4    sd s0,32(sp)          ; stack access
    0x84003ece     0x6    sd s1,24(sp)          ; stack access
    0x84003ed0     0x8    sd s2,16(sp)          ; stack access
    0x84003ed2     0xa    mv s0,a0
    0x84003ed4     0xc    mv s2,a1
    0x84003ed6     0xe    mv s1,a2
    0x84003ed8    0x10    mv a1,a0
    0x84003eda    0x12    li a0,1
    0x84003edc    0x14    jal ra,ffffffff84003e60 <setIRQState>
    0x84003ee0    0x18    slli s0,s0,0x34
    0x84003ee2    0x1a    mv a3,s2
    0x84003ee4    0x1c    mv a2,s1
    0x84003ee6    0x1e    li a0,-1
    0x84003ee8    0x20    slli a0,a0,0x3f
    0x84003eea    0x22    srli a1,s0,0x34
    0x84003eee    0x26    jal ra,ffffffff84003aba <cteInsert>
    0x84003ef2    0x2a    li a0,0
    0x84003ef4    0x2c    ld ra,40(sp)          ; stack access
    0x84003ef6    0x2e    ld s0,32(sp)          ; stack access
    0x84003ef8    0x30    ld s1,24(sp)          ; stack access
    0x84003efa    0x32    ld s2,16(sp)          ; stack access
    0x84003efc    0x34    addi sp,sp,48
    0x84003efe    0x36    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 36 nodes.

Section getReceiveSlots (211 of 292)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 38 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

13 stack accesses found. Annotated code for `getReceiveSlots`:

    0x84003dc4     0x0    beqz a1,ffffffff84003e18 <getReceiveSlots+0x54>
    0x84003dc6     0x2    addi sp,sp,-96
    0x84003dc8     0x4    sd ra,88(sp)          ; stack access
    0x84003dca     0x6    sd s0,80(sp)          ; stack access
    0x84003dcc     0x8    sd s1,72(sp)          ; stack access
    0x84003dce     0xa    ld s0,1008(a1) # fffffffff80003f0 <ki_end+0x73fdc3f0>
    0x84003dd2     0xe    ld s1,1016(a1)
    0x84003dd6    0x12    ld a2,1000(a1)
    0x84003dda    0x16    mv a1,a0
    0x84003ddc    0x18    addi a0,sp,40
    0x84003dde    0x1a    jal ra,ffffffff84003456 <lookupCap>
    0x84003de2    0x1e    ld a5,40(sp)          ; stack access
    0x84003de4    0x20    li a0,0
    0x84003de6    0x22    bnez a5,ffffffff84003e0e <getReceiveSlots+0x4a>
    0x84003de8    0x24    ld a0,48(sp)          ; stack access
    0x84003dea    0x26    sd a0,8(sp)           ; stack access
    0x84003dec    0x28    ld a1,56(sp)          ; stack access
    0x84003dee    0x2a    sd a1,16(sp)          ; stack access
    0x84003df0    0x2c    mv a3,s1
    0x84003df2    0x2e    mv a2,s0
    0x84003df4    0x30    jal ra,ffffffff840035b8 <lookupTargetSlot>
    0x84003df8    0x34    sd a0,24(sp)          ; stack access
    0x84003dfa    0x36    sd a1,32(sp)          ; stack access
    0x84003dfc    0x38    bnez a0,ffffffff84003e1c <getReceiveSlots+0x58>
    0x84003dfe    0x3a    ld a5,0(a1)
    0x84003e00    0x3c    srli a5,a5,0x3b
    0x84003e02    0x3e    seqz a5,a5
    0x84003e06    0x42    neg a5,a5
    0x84003e0a    0x46    and a0,a1,a5
    0x84003e0e    0x4a    ld ra,88(sp)          ; stack access
    0x84003e10    0x4c    ld s0,80(sp)          ; stack access
    0x84003e12    0x4e    ld s1,72(sp)          ; stack access
    0x84003e14    0x50    addi sp,sp,96
    0x84003e16    0x52    ret
    0x84003e18    0x54    mv a0,a1
    0x84003e1a    0x56    ret
    0x84003e1c    0x58    li a0,0
    0x84003e1e    0x5a    j ffffffff84003e0e <getReceiveSlots+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 65 nodes.

Section invokeCNodeRotate (212 of 292)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 32 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x84003cea     0x0    addi sp,sp,-64
    0x84003cec     0x2    sd ra,56(sp)          ; stack access
    0x84003cee     0x4    sd s0,48(sp)          ; stack access
    0x84003cf0     0x6    sd s1,40(sp)          ; stack access
    0x84003cf2     0x8    sd a0,16(sp)          ; stack access
    0x84003cf4     0xa    sd a1,24(sp)          ; stack access
    0x84003cf6     0xc    sd a2,0(sp)           ; stack access
    0x84003cf8     0xe    sd a3,8(sp)           ; stack access
    0x84003cfa    0x10    mv s0,a4
    0x84003cfc    0x12    mv s1,a5
    0x84003cfe    0x14    beq a4,a6,ffffffff84003d26 <invokeCNodeRotate+0x3c>
    0x84003d02    0x18    mv a3,a6
    0x84003d04    0x1a    mv a2,a5
    0x84003d06    0x1c    ld a0,0(sp)           ; stack access
    0x84003d08    0x1e    ld a1,8(sp)           ; stack access
    0x84003d0a    0x20    jal ra,ffffffff84003bf6 <cteMove>
    0x84003d0e    0x24    mv a3,s1
    0x84003d10    0x26    mv a2,s0
    0x84003d12    0x28    ld a0,16(sp)          ; stack access
    0x84003d14    0x2a    ld a1,24(sp)          ; stack access
    0x84003d16    0x2c    jal ra,ffffffff84003bf6 <cteMove>
    0x84003d1a    0x30    li a0,0
    0x84003d1c    0x32    ld ra,56(sp)          ; stack access
    0x84003d1e    0x34    ld s0,48(sp)          ; stack access
    0x84003d20    0x36    ld s1,40(sp)          ; stack access
    0x84003d22    0x38    addi sp,sp,64
    0x84003d24    0x3a    ret
    0x84003d26    0x3c    mv a3,a2
    0x84003d28    0x3e    ld a4,8(sp)           ; stack access
    0x84003d2a    0x40    mv a2,s0
    0x84003d2c    0x42    jal ra,ffffffff84003c5e <cteSwap>
    0x84003d30    0x46    j ffffffff84003d1a <invokeCNodeRotate+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 53 nodes.

Section handleFaultReply (213 of 292)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 173 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `handleFaultReply`:

    0x840027b8      0x0    addi sp,sp,-48
    0x840027ba      0x2    sd ra,40(sp)          ; stack access
    0x840027bc      0x4    sd s0,32(sp)          ; stack access
    0x840027be      0x6    sd s1,24(sp)          ; stack access
    0x840027c0      0x8    sd s2,16(sp)          ; stack access
    0x840027c2      0xa    sd s3,8(sp)           ; stack access
    0x840027c4      0xc    mv s0,a0
    0x840027c6      0xe    ld a4,80(a1)
    0x840027c8     0x10    andi a3,a4,127
    0x840027cc     0x14    li a5,120
    0x840027d0     0x18    bgeu a5,a3,ffffffff840027dc <handleFaultReply+0x24>
    0x840027d4     0x1c    andi a4,a4,-128
    0x840027d8     0x20    ori a4,a4,120
    0x840027dc     0x24    srli s1,a4,0xc
    0x840027e0     0x28    andi a3,a4,127
    0x840027e4     0x2c    ld a5,312(s0) # 1138 <KERNEL_OFFSET-0xfffffffeffffeec8>
    0x840027e8     0x30    andi a0,a5,15
    0x840027ec     0x34    li a2,3
    0x840027ee     0x36    beq a0,a2,ffffffff84002928 <handleFaultReply+0x170>
    0x840027f2     0x3a    andi a5,a5,12
    0x840027f4     0x3c    bnez a5,ffffffff84002896 <handleFaultReply+0xde>
    0x840027f6     0x3e    li a4,1
    0x840027f8     0x40    beq a0,a4,ffffffff84002888 <handleFaultReply+0xd0>
    0x840027fc     0x44    li a4,2
    0x840027fe     0x46    bne a0,a4,ffffffff84002994 <handleFaultReply+0x1dc>
    0x84002802     0x4a    mv s2,a3
    0x84002804     0x4c    li a4,10
    0x84002806     0x4e    bgeu a4,a3,ffffffff8400280c <handleFaultReply+0x54>
    0x8400280a     0x52    li s2,10
    0x8400280c     0x54    mv a7,s2
    0x8400280e     0x56    li a4,4
    0x84002810     0x58    bgeu a4,s2,ffffffff84002816 <handleFaultReply+0x5e>
    0x84002814     0x5c    li a7,4
    0x84002816     0x5e    beqz a3,ffffffff84002884 <handleFaultReply+0xcc>
    0x84002818     0x60    auipc a0,0x9
    0x8400281c     0x64    addi a0,a0,1704 # ffffffff8400bec0 <fault_messages>
    0x84002820     0x68    auipc a2,0x9
    0x84002824     0x6c    addi a2,a2,392 # ffffffff8400b9a8 <msgRegisters>
    0x84002828     0x70    lbu a4,0(a2)
    0x8400282c     0x74    slli a4,a4,0x3
    0x8400282e     0x76    add a4,a4,a1
    0x84002830     0x78    ld a6,0(a4)
    0x84002834     0x7c    lbu a4,0(a0)
    0x84002838     0x80    slli a4,a4,0x3
    0x8400283a     0x82    add a4,a4,s0
    0x8400283c     0x84    sd a6,0(a4)
    0x84002840     0x88    addi a5,a5,1
    0x84002842     0x8a    addi a0,a0,1
    0x84002844     0x8c    addi a2,a2,1
    0x84002846     0x8e    bltu a5,a7,ffffffff84002828 <handleFaultReply+0x70>
    0x8400284a     0x92    li s3,1
    0x8400284c     0x94    beqz a3,ffffffff84002850 <handleFaultReply+0x98>
    0x8400284e     0x96    mv s3,a7
    0x84002850     0x98    bgeu s3,s2,ffffffff84002884 <handleFaultReply+0xcc>
    0x84002854     0x9c    li a0,0
    0x84002856     0x9e    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x8400285a     0xa2    beqz a0,ffffffff84002884 <handleFaultReply+0xcc>
    0x8400285c     0xa4    auipc a3,0x9
    0x84002860     0xa8    addi a3,a3,1636 # ffffffff8400bec0 <fault_messages>
    0x84002864     0xac    add a3,a3,s3
    0x84002866     0xae    slli a4,s3,0x3
    0x8400286a     0xb2    add a4,a4,a0
    0x8400286c     0xb4    slli s2,s2,0x3
    0x8400286e     0xb6    add s2,s2,a0
    0x84002870     0xb8    ld a2,8(a4)
    0x84002872     0xba    lbu a5,0(a3)
    0x84002876     0xbe    slli a5,a5,0x3
    0x84002878     0xc0    add a5,a5,s0
    0x8400287a     0xc2    sd a2,0(a5)
    0x8400287c     0xc4    addi a3,a3,1
    0x8400287e     0xc6    addi a4,a4,8
    0x84002880     0xc8    bne s2,a4,ffffffff84002870 <handleFaultReply+0xb8>
    0x84002884     0xcc    seqz a0,s1
    0x84002888     0xd0    ld ra,40(sp)          ; stack access
    0x8400288a     0xd2    ld s0,32(sp)          ; stack access
    0x8400288c     0xd4    ld s1,24(sp)          ; stack access
    0x8400288e     0xd6    ld s2,16(sp)          ; stack access
    0x84002890     0xd8    ld s3,8(sp)           ; stack access
    0x84002892     0xda    addi sp,sp,48
    0x84002894     0xdc    ret
    0x84002896     0xde    li a5,5
    0x84002898     0xe0    bne a0,a5,ffffffff8400298a <handleFaultReply+0x1d2>
    0x8400289c     0xe4    mv s2,a3
    0x8400289e     0xe6    li a5,32
    0x840028a2     0xea    bgeu a5,a3,ffffffff840028aa <handleFaultReply+0xf2>
    0x840028a6     0xee    li s2,32
    0x840028aa     0xf2    mv a6,s2
    0x840028ac     0xf4    li a5,4
    0x840028ae     0xf6    bgeu a5,s2,ffffffff840028b4 <handleFaultReply+0xfc>
    0x840028b2     0xfa    li a6,4
    0x840028b4     0xfc    beqz a3,ffffffff84002922 <handleFaultReply+0x16a>
    0x840028b6     0xfe    auipc a2,0x9
    0x840028ba    0x102    addi a2,a2,242 # ffffffff8400b9a8 <msgRegisters>
    0x840028be    0x106    li a4,0
    0x840028c0    0x108    auipc a7,0x9
    0x840028c4    0x10c    addi a7,a7,1536 # ffffffff8400bec0 <fault_messages>
    0x840028c8    0x110    lbu a5,0(a2)
    0x840028cc    0x114    slli a5,a5,0x3
    0x840028ce    0x116    add a5,a5,a1
    0x840028d0    0x118    ld a0,0(a5)
    0x840028d2    0x11a    add a5,a7,a4
    0x840028d6    0x11e    lbu a5,64(a5)
    0x840028da    0x122    slli a5,a5,0x3
    0x840028dc    0x124    add a5,a5,s0
    0x840028de    0x126    sd a0,0(a5)
    0x840028e0    0x128    addi a4,a4,1
    0x840028e2    0x12a    addi a2,a2,1
    0x840028e4    0x12c    bltu a4,a6,ffffffff840028c8 <handleFaultReply+0x110>
    0x840028e8    0x130    li s3,1
    0x840028ea    0x132    beqz a3,ffffffff840028ee <handleFaultReply+0x136>
    0x840028ec    0x134    mv s3,a6
    0x840028ee    0x136    bgeu s3,s2,ffffffff84002922 <handleFaultReply+0x16a>
    0x840028f2    0x13a    li a0,0
    0x840028f4    0x13c    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x840028f8    0x140    beqz a0,ffffffff84002922 <handleFaultReply+0x16a>
    0x840028fa    0x142    auipc a3,0x9
    0x840028fe    0x146    addi a3,a3,1478 # ffffffff8400bec0 <fault_messages>
    0x84002902    0x14a    add a3,a3,s3
    0x84002904    0x14c    slli a4,s3,0x3
    0x84002908    0x150    add a4,a4,a0
    0x8400290a    0x152    slli s2,s2,0x3
    0x8400290c    0x154    add s2,s2,a0
    0x8400290e    0x156    ld a2,8(a4)
    0x84002910    0x158    lbu a5,64(a3)
    0x84002914    0x15c    slli a5,a5,0x3
    0x84002916    0x15e    add a5,a5,s0
    0x84002918    0x160    sd a2,0(a5)
    0x8400291a    0x162    addi a3,a3,1
    0x8400291c    0x164    addi a4,a4,8
    0x8400291e    0x166    bne a4,s2,ffffffff8400290e <handleFaultReply+0x156>
    0x84002922    0x16a    seqz a0,s1
    0x84002926    0x16e    j ffffffff84002888 <handleFaultReply+0xd0>
    0x84002928    0x170    mv s3,a3
    0x8400292a    0x172    li a5,2
    0x8400292c    0x174    bgeu a5,a3,ffffffff84002932 <handleFaultReply+0x17a>
    0x84002930    0x178    li s3,2
    0x84002932    0x17a    mv a2,s3
    0x84002934    0x17c    li a5,4
    0x84002936    0x17e    bgeu a5,s3,ffffffff8400293c <handleFaultReply+0x184>
    0x8400293a    0x182    li a2,4
    0x8400293c    0x184    beqz a3,ffffffff84002984 <handleFaultReply+0x1cc>
    0x8400293e    0x186    ld a5,88(a1)
    0x84002940    0x188    sd a5,264(s0)
    0x84002944    0x18c    andi a4,a4,126
    0x84002948    0x190    beqz a4,ffffffff8400294e <handleFaultReply+0x196>
    0x8400294a    0x192    ld a5,96(a1)
    0x8400294c    0x194    sd a5,8(s0)
    0x8400294e    0x196    li s2,1
    0x84002950    0x198    beqz a3,ffffffff84002954 <handleFaultReply+0x19c>
    0x84002952    0x19a    mv s2,a2
    0x84002954    0x19c    bgeu s2,s3,ffffffff84002984 <handleFaultReply+0x1cc>
    0x84002958    0x1a0    li a0,0
    0x8400295a    0x1a2    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x8400295e    0x1a6    beqz a0,ffffffff84002984 <handleFaultReply+0x1cc>
    0x84002960    0x1a8    auipc a2,0x9
    0x84002964    0x1ac    addi a2,a2,1376 # ffffffff8400bec0 <fault_messages>
    0x84002968    0x1b0    add a3,a2,s2
    0x8400296c    0x1b4    addi s2,s2,1
    0x8400296e    0x1b6    slli a5,s2,0x3
    0x84002972    0x1ba    add a5,a5,a0
    0x84002974    0x1bc    ld a4,0(a5)
    0x84002976    0x1be    lbu a5,32(a3)
    0x8400297a    0x1c2    slli a5,a5,0x3
    0x8400297c    0x1c4    add a5,a5,s0
    0x8400297e    0x1c6    sd a4,0(a5)
    0x84002980    0x1c8    bne s3,s2,ffffffff84002968 <handleFaultReply+0x1b0>
    0x84002984    0x1cc    seqz a0,s1
    0x84002988    0x1d0    j ffffffff84002888 <handleFaultReply+0xd0>
    0x8400298a    0x1d2    li a5,6
    0x8400298c    0x1d4    bne a0,a5,ffffffff84002994 <handleFaultReply+0x1dc>
    0x84002990    0x1d8    li a0,1
    0x84002992    0x1da    j ffffffff84002888 <handleFaultReply+0xd0>
    0x84002994    0x1dc    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
173 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 273 nodes.

Section ki_boot_end (214 of 292)
================================

Deriving specifications
-----------------------

Section `ki_boot_end` consists of 45 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc

BLT..

Stack analysis
---------------

No stack accesses found. Code for `ki_boot_end`:

    0x84002000     0x0    csrrw t0,sscratch,t0
    0x84002004     0x4    sd ra,0(t0)
    0x84002008     0x8    sd sp,8(t0)
    0x8400200c     0xc    sd gp,16(t0)
    0x84002010    0x10    sd tp,24(t0)
    0x84002014    0x14    sd t1,40(t0)
    0x84002018    0x18    sd t2,48(t0)
    0x8400201c    0x1c    sd s0,56(t0)
    0x84002020    0x20    sd s1,64(t0)
    0x84002024    0x24    sd a0,72(t0)
    0x84002028    0x28    sd a1,80(t0)
    0x8400202c    0x2c    sd a2,88(t0)
    0x84002030    0x30    sd a3,96(t0)
    0x84002034    0x34    sd a4,104(t0)
    0x84002038    0x38    sd a5,112(t0)
    0x8400203c    0x3c    sd a6,120(t0)
    0x84002040    0x40    sd a7,128(t0)
    0x84002044    0x44    sd s2,136(t0)
    0x84002048    0x48    sd s3,144(t0)
    0x8400204c    0x4c    sd s4,152(t0)
    0x84002050    0x50    sd s5,160(t0)
    0x84002054    0x54    sd s6,168(t0)
    0x84002058    0x58    sd s7,176(t0)
    0x8400205c    0x5c    sd s8,184(t0)
    0x84002060    0x60    sd s9,192(t0)
    0x84002064    0x64    sd s10,200(t0)
    0x84002068    0x68    sd s11,208(t0)
    0x8400206c    0x6c    sd t3,216(t0)
    0x84002070    0x70    sd t4,224(t0)
    0x84002074    0x74    sd t5,232(t0)
    0x84002078    0x78    sd t6,240(t0)
    0x8400207c    0x7c    csrr ra,sscratch
    0x84002080    0x80    sd ra,32(t0)
    0x84002084    0x84    csrr ra,sstatus
    0x84002088    0x88    sd ra,256(t0)
    0x8400208c    0x8c    csrr s0,scause
    0x84002090    0x90    sd s0,248(t0)
    0x84002094    0x94    mv gp,gp
    0x84002098    0x98    auipc sp,0x1d
    0x8400209c    0x9c    addi sp,sp,-152 # ffffffff8401f000 <tlbLockCount>
    0x840020a0    0xa0    csrr ra,sepc
    0x840020a4    0xa4    sd ra,264(t0)
    0x840020a8    0xa8    bltz s0,ffffffff840020c4 <interrupt>
    0x840020ac    0xac    li s4,8
    0x840020ae    0xae    bne s0,s4,ffffffff840020bc <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ki_boot_end` has 92 nodes.

Section populate_bi_frame (215 of 292)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 55 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `populate_bi_frame`:

    0x84001360     0x0    addi sp,sp,-48
    0x84001362     0x2    sd ra,40(sp)          ; stack access
    0x84001364     0x4    sd s0,32(sp)          ; stack access
    0x84001366     0x6    sd s1,24(sp)          ; stack access
    0x84001368     0x8    sd s2,16(sp)          ; stack access
    0x8400136a     0xa    sd s3,8(sp)           ; stack access
    0x8400136c     0xc    mv s3,a0
    0x8400136e     0xe    mv s2,a1
    0x84001370    0x10    mv s1,a2
    0x84001372    0x12    mv s0,a3
    0x84001374    0x14    lui a1,0x1
    0x84001376    0x16    auipc a0,0x1
    0x8400137a    0x1a    ld a0,-1854(a0) # ffffffff84001c38 <rootserver+0x20>
    0x8400137e    0x1e    jal ra,ffffffff840092da <memzero>
    0x84001382    0x22    bnez s0,ffffffff840013e6 <populate_bi_frame+0x86>
    0x84001384    0x24    auipc a5,0x0
    0x84001388    0x28    addi a5,a5,1588 # ffffffff840019b8 <ndks_boot>
    0x8400138c    0x2c    ld a4,640(a5)
    0x84001390    0x30    sd a4,584(a5)
    0x84001394    0x34    li a3,13
    0x84001396    0x36    sd a3,592(a5)
    0x8400139a    0x3a    sd s3,8(a4)
    0x8400139e    0x3e    ld a4,640(a5)
    0x840013a2    0x42    sd s2,16(a4)
    0x840013a6    0x46    ld a4,640(a5)
    0x840013aa    0x4a    sd zero,24(a4)
    0x840013ae    0x4e    ld a4,640(a5)
    0x840013b2    0x52    sd s1,32(a4)
    0x840013b4    0x54    ld a5,640(a5)
    0x840013b8    0x58    li a4,19
    0x840013ba    0x5a    sd a4,136(a5)
    0x840013bc    0x5c    auipc a4,0x1e
    0x840013c0    0x60    ld a4,-948(a4) # ffffffff8401f008 <ksDomScheduleIdx>
    0x840013c4    0x64    slli a3,a4,0x4
    0x840013c8    0x68    auipc a4,0xb
    0x840013cc    0x6c    addi a4,a4,-1288 # ffffffff8400bec0 <fault_messages>
    0x840013d0    0x70    add a4,a4,a3
    0x840013d2    0x72    ld a4,96(a4)
    0x840013d4    0x74    sd a4,144(a5)
    0x840013d6    0x76    sd s0,0(a5)
    0x840013d8    0x78    ld ra,40(sp)          ; stack access
    0x840013da    0x7a    ld s0,32(sp)          ; stack access
    0x840013dc    0x7c    ld s1,24(sp)          ; stack access
    0x840013de    0x7e    ld s2,16(sp)          ; stack access
    0x840013e0    0x80    ld s3,8(sp)           ; stack access
    0x840013e2    0x82    addi sp,sp,48
    0x840013e4    0x84    ret
    0x840013e6    0x86    mv a0,s0
    0x840013e8    0x88    jal ra,ffffffff84001326 <calculate_extra_bi_size_bits>
    0x840013ec    0x8c    li a1,1
    0x840013ee    0x8e    sll a1,a1,a0
    0x840013f2    0x92    auipc a0,0x1
    0x840013f6    0x96    ld a0,-1970(a0) # ffffffff84001c40 <rootserver+0x28>
    0x840013fa    0x9a    jal ra,ffffffff840092da <memzero>
    0x840013fe    0x9e    j ffffffff84001384 <populate_bi_frame+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 89 nodes.

Section create_idle_thread (216 of 292)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `create_idle_thread`:

    0x84000dca     0x0    addi sp,sp,-16
    0x84000dcc     0x2    sd ra,8(sp)           ; stack access
    0x84000dce     0x4    sd s0,0(sp)           ; stack access
    0x84000dd0     0x6    auipc a0,0xb
    0x84000dd4     0xa    addi a0,a0,1072 # ffffffff8400c200 <__global_pointer$+0x66>
    0x84000dd8     0xe    auipc s0,0x1e
    0x84000ddc    0x12    addi s0,s0,632 # ffffffff8401f050 <ksIdleThread>
    0x84000de0    0x16    sd a0,0(s0)
    0x84000de2    0x18    jal ra,ffffffff84000d9c <configureIdleThread>
    0x84000de6    0x1c    ld s0,0(s0)
    0x84000de8    0x1e    auipc a0,0xc
    0x84000dec    0x22    addi a0,a0,792 # ffffffff8400d100 <ksIdleThreadSC>
    0x84000df0    0x26    sd a0,368(s0)
    0x84000df4    0x2a    li a3,0
    0x84000df6    0x2c    lui a2,0x1
    0x84000df8    0x2e    addi a2,a2,904 # 1388 <KERNEL_OFFSET-0xfffffffeffffec78>
    0x84000dfc    0x32    li a1,2
    0x84000dfe    0x34    jal ra,ffffffff840035ec <refill_new>
    0x84000e02    0x38    ld a5,368(s0)
    0x84000e06    0x3c    sd s0,24(a5)
    0x84000e08    0x3e    li a0,1
    0x84000e0a    0x40    ld ra,8(sp)           ; stack access
    0x84000e0c    0x42    ld s0,0(sp)           ; stack access
    0x84000e0e    0x44    addi sp,sp,16
    0x84000e10    0x46    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 37 nodes.

Section create_frames_of_region (217 of 292)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 80 instructions.

RVC_FTTFT____FFFFTFT.
RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
43 stack accesses found. Annotated code for `create_frames_of_region`:

    0x84000a12     0x0    addi sp,sp,-160
    0x84000a14     0x2    sd ra,152(sp)         ; stack access
    0x84000a16     0x4    sd s0,144(sp)         ; stack access
    0x84000a18     0x6    sd s1,136(sp)         ; stack access
    0x84000a1a     0x8    sd s2,128(sp)         ; stack access
    0x84000a1c     0xa    sd s3,120(sp)         ; stack access
    0x84000a1e     0xc    sd s4,112(sp)         ; stack access
    0x84000a20     0xe    sd s5,104(sp)         ; stack access
    0x84000a22    0x10    sd s6,96(sp)          ; stack access
    0x84000a24    0x12    sd s7,88(sp)          ; stack access
    0x84000a26    0x14    sd s8,80(sp)          ; stack access
    0x84000a28    0x16    sd s9,72(sp)          ; stack access
    0x84000a2a    0x18    mv s7,a0
    0x84000a2c    0x1a    sd a1,32(sp)          ; stack access
    0x84000a2e    0x1c    sd a2,40(sp)          ; stack access
    0x84000a30    0x1e    sd a3,16(sp)          ; stack access
    0x84000a32    0x20    sd a4,24(sp)          ; stack access
    0x84000a34    0x22    auipc s9,0x1
    0x84000a38    0x26    ld s9,468(s9) # ffffffff84001c08 <ndks_boot+0x250>
    0x84000a3c    0x2a    bgeu a5,a6,ffffffff84000aae <create_frames_of_region+0x9c>
    0x84000a40    0x2e    mv s2,a7
    0x84000a42    0x30    mv s1,a6
    0x84000a44    0x32    mv s0,a5
    0x84000a46    0x34    li s3,1
    0x84000a48    0x36    slli s8,s3,0x3b
    0x84000a4c    0x3a    lui s6,0xfe000
    0x84000a50    0x3e    srli s6,s6,0x10
    0x84000a54    0x42    slli s5,s3,0x26
    0x84000a58    0x46    ld a5,160(sp)         ; stack access
    0x84000a5a    0x48    sub s5,s5,a5
    0x84000a5e    0x4c    lui s4,0x1
    0x84000a60    0x4e    j ffffffff84000a82 <create_frames_of_region+0x70>
    0x84000a62    0x50    sd s8,48(sp)          ; stack access
    0x84000a64    0x52    slli a5,s0,0x9
    0x84000a68    0x56    and a5,a5,s6
    0x84000a6c    0x5a    sd a5,56(sp)          ; stack access
    0x84000a6e    0x5c    ld a2,48(sp)          ; stack access
    0x84000a70    0x5e    ld a3,56(sp)          ; stack access
    0x84000a72    0x60    ld a0,32(sp)          ; stack access
    0x84000a74    0x62    ld a1,40(sp)          ; stack access
    0x84000a76    0x64    jal ra,ffffffff84000870 <provide_cap>
    0x84000a7a    0x68    beqz a0,ffffffff84000aa0 <create_frames_of_region+0x8e>
    0x84000a7c    0x6a    add s0,s0,s4
    0x84000a7e    0x6c    bgeu s0,s1,ffffffff84000aae <create_frames_of_region+0x9c>
    0x84000a82    0x70    beqz s2,ffffffff84000a62 <create_frames_of_region+0x50>
    0x84000a86    0x74    mv a6,s3
    0x84000a88    0x76    li a5,0
    0x84000a8a    0x78    mv a4,s3
    0x84000a8c    0x7a    add a3,s5,s0
    0x84000a90    0x7e    mv a2,s0
    0x84000a92    0x80    ld a0,16(sp)          ; stack access
    0x84000a94    0x82    ld a1,24(sp)          ; stack access
    0x84000a96    0x84    jal ra,ffffffff8400049e <create_mapped_it_frame_cap>
    0x84000a9a    0x88    sd a0,48(sp)          ; stack access
    0x84000a9c    0x8a    sd a1,56(sp)          ; stack access
    0x84000a9e    0x8c    j ffffffff84000a6e <create_frames_of_region+0x5c>
    0x84000aa0    0x8e    sd zero,0(s7) # fffffffffe000000 <ki_end+0x79fdc000>  ; stack access
    0x84000aa4    0x92    sd zero,8(s7)         ; stack access
    0x84000aa8    0x96    sd zero,16(s7)        ; stack access
    0x84000aac    0x9a    j ffffffff84000ac4 <create_frames_of_region+0xb2>
    0x84000aae    0x9c    sd s9,0(s7)           ; stack access
    0x84000ab2    0xa0    auipc a5,0x1
    0x84000ab6    0xa4    ld a5,342(a5) # ffffffff84001c08 <ndks_boot+0x250>
    0x84000aba    0xa8    sd a5,8(s7)           ; stack access
    0x84000abe    0xac    li a5,1
    0x84000ac0    0xae    sd a5,16(s7)          ; stack access
    0x84000ac4    0xb2    mv a0,s7
    0x84000ac6    0xb4    ld ra,152(sp)         ; stack access
    0x84000ac8    0xb6    ld s0,144(sp)         ; stack access
    0x84000aca    0xb8    ld s1,136(sp)         ; stack access
    0x84000acc    0xba    ld s2,128(sp)         ; stack access
    0x84000ace    0xbc    ld s3,120(sp)         ; stack access
    0x84000ad0    0xbe    ld s4,112(sp)         ; stack access
    0x84000ad2    0xc0    ld s5,104(sp)         ; stack access
    0x84000ad4    0xc2    ld s6,96(sp)          ; stack access
    0x84000ad6    0xc4    ld s7,88(sp)          ; stack access
    0x84000ad8    0xc6    ld s8,80(sp)          ; stack access
    0x84000ada    0xc8    ld s9,72(sp)          ; stack access
    0x84000adc    0xca    addi sp,sp,160
    0x84000ade    0xcc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 136 nodes.

Section create_bi_frame_cap (218 of 292)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 30 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x84000824     0x0    addi sp,sp,-80
    0x84000826     0x2    sd ra,72(sp)          ; stack access
    0x84000828     0x4    sd s0,64(sp)          ; stack access
    0x8400082a     0x6    sd s1,56(sp)          ; stack access
    0x8400082c     0x8    sd a0,16(sp)          ; stack access
    0x8400082e     0xa    sd a1,24(sp)          ; stack access
    0x84000830     0xc    mv a0,a2
    0x84000832     0xe    mv a1,a3
    0x84000834    0x10    mv a3,a4
    0x84000836    0x12    li a6,0
    0x84000838    0x14    li a5,0
    0x8400083a    0x16    li a4,1
    0x8400083c    0x18    auipc a2,0x1
    0x84000840    0x1c    ld a2,1020(a2) # ffffffff84001c38 <rootserver+0x20>
    0x84000844    0x20    jal ra,ffffffff8400049e <create_mapped_it_frame_cap>
    0x84000848    0x24    mv s1,a0
    0x8400084a    0x26    mv s0,a1
    0x8400084c    0x28    ld a0,16(sp)          ; stack access
    0x8400084e    0x2a    ld a1,24(sp)          ; stack access
    0x84000850    0x2c    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000854    0x30    sd s1,288(a0)
    0x84000858    0x34    sd s0,296(a0)
    0x8400085c    0x38    sd zero,304(a0)
    0x84000860    0x3c    li a5,3
    0x84000862    0x3e    sd a5,312(a0)
    0x84000866    0x42    ld ra,72(sp)          ; stack access
    0x84000868    0x44    ld s0,64(sp)          ; stack access
    0x8400086a    0x46    ld s1,56(sp)          ; stack access
    0x8400086c    0x48    addi sp,sp,80
    0x8400086e    0x4a    ret

Proving inst theorems
---------------------

30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 48 nodes.

Section map_kernel_window (219 of 292)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 69 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_window`:

    0x84000696     0x0    addi sp,sp,-64
    0x84000698     0x2    sd ra,56(sp)          ; stack access
    0x8400069a     0x4    sd s0,48(sp)          ; stack access
    0x8400069c     0x6    sd s1,40(sp)          ; stack access
    0x8400069e     0x8    sd s2,32(sp)          ; stack access
    0x840006a0     0xa    sd s3,24(sp)          ; stack access
    0x840006a2     0xc    sd s4,16(sp)          ; stack access
    0x840006a4     0xe    sd s5,8(sp)           ; stack access
    0x840006a6    0x10    sd s6,0(sp)           ; stack access
    0x840006a8    0x12    li s1,-1
    0x840006aa    0x14    slli s1,s1,0x26
    0x840006ac    0x16    auipc s6,0x22
    0x840006b0    0x1a    addi s6,s6,-1708 # ffffffff84022000 <kernel_root_pageTable>
    0x840006b4    0x1e    li s2,1
    0x840006b6    0x20    slli s5,s2,0x26
    0x840006ba    0x24    lui s4,0x40000
    0x840006be    0x28    lui s3,0x80000
    0x840006c2    0x2c    srli s0,s1,0x1e
    0x840006c6    0x30    andi s0,s0,511
    0x840006ca    0x34    slli s0,s0,0x3
    0x840006cc    0x36    add s0,s0,s6
    0x840006ce    0x38    mv a1,s2
    0x840006d0    0x3a    add a0,s1,s5
    0x840006d4    0x3e    jal ra,ffffffff8400215e <pte_next>
    0x840006d8    0x42    sd a0,0(s0)
    0x840006da    0x44    add s1,s1,s4
    0x840006dc    0x46    bne s1,s3,ffffffff840006c2 <map_kernel_window+0x2c>
    0x840006e0    0x4a    li s0,1
    0x840006e2    0x4c    slli a5,s0,0x20
    0x840006e6    0x50    auipc s1,0x21
    0x840006ea    0x54    addi s1,s1,-1766 # ffffffff84021000 <kernel_image_level2_pt>
    0x840006ee    0x58    add s1,s1,a5
    0x840006f0    0x5a    auipc s2,0x23
    0x840006f4    0x5e    addi s2,s2,-1776 # ffffffff84023000 <kernel_root_pageTable+0x1000>
    0x840006f8    0x62    li a1,0
    0x840006fa    0x64    mv a0,s1
    0x840006fc    0x66    jal ra,ffffffff8400215e <pte_next>
    0x84000700    0x6a    sd a0,-2032(s2)
    0x84000704    0x6e    li a1,0
    0x84000706    0x70    mv a0,s1
    0x84000708    0x72    jal ra,ffffffff8400215e <pte_next>
    0x8400070c    0x76    sd a0,-16(s2)
    0x84000710    0x7a    li s2,0
    0x84000712    0x7c    slli s0,s0,0x1f
    0x84000714    0x7e    auipc s5,0x21
    0x84000718    0x82    addi s5,s5,-1812 # ffffffff84021000 <kernel_image_level2_pt>
    0x8400071c    0x86    lui s4,0x200
    0x84000720    0x8a    li s3,3
    0x84000722    0x8c    slli s3,s3,0x1e
    0x84000724    0x8e    slli s1,s2,0x3
    0x84000728    0x92    add s1,s1,s5
    0x8400072a    0x94    li a1,1
    0x8400072c    0x96    mv a0,s0
    0x8400072e    0x98    jal ra,ffffffff8400215e <pte_next>
    0x84000732    0x9c    sd a0,0(s1)
    0x84000734    0x9e    addi s2,s2,1
    0x84000736    0xa0    add s0,s0,s4
    0x84000738    0xa2    bne s0,s3,ffffffff84000724 <map_kernel_window+0x8e>
    0x8400073c    0xa6    jal ra,ffffffff84000672 <map_kernel_devices>
    0x84000740    0xaa    ld ra,56(sp)          ; stack access
    0x84000742    0xac    ld s0,48(sp)          ; stack access
    0x84000744    0xae    ld s1,40(sp)          ; stack access
    0x84000746    0xb0    ld s2,32(sp)          ; stack access
    0x84000748    0xb2    ld s3,24(sp)          ; stack access
    0x8400074a    0xb4    ld s4,16(sp)          ; stack access
    0x8400074c    0xb6    ld s5,8(sp)           ; stack access
    0x8400074e    0xb8    ld s6,0(sp)           ; stack access
    0x84000750    0xba    addi sp,sp,64
    0x84000752    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 99 nodes.

Section map_kernel_devices (220 of 292)
=======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `map_kernel_devices`:

    0x84000672     0x0    addi sp,sp,-32
    0x84000674     0x2    sd ra,24(sp)          ; stack access
    0x84000676     0x4    li a2,1
    0x84000678     0x6    lui a1,0xc0000
    0x8400067c     0xa    lui a0,0xc000
    0x84000680     0xe    jal ra,ffffffff840000c4 <map_kernel_frame>
    0x84000684    0x12    lui a0,0xc000
    0x84000688    0x16    lui a1,0xc001
    0x8400068c    0x1a    jal ra,ffffffff84000588 <reserve_region>
    0x84000690    0x1e    ld ra,24(sp)          ; stack access
    0x84000692    0x20    addi sp,sp,32
    0x84000694    0x22    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 17 nodes.

Section map_it_frame_cap (221 of 292)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 47 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x84000430     0x0    addi sp,sp,-96
    0x84000432     0x2    sd ra,88(sp)          ; stack access
    0x84000434     0x4    sd s0,80(sp)          ; stack access
    0x84000436     0x6    sd s1,72(sp)          ; stack access
    0x84000438     0x8    sd s2,64(sp)          ; stack access
    0x8400043a     0xa    sd s3,56(sp)          ; stack access
    0x8400043c     0xc    sd a0,16(sp)          ; stack access
    0x8400043e     0xe    sd a1,24(sp)          ; stack access
    0x84000440    0x10    mv s3,a2
    0x84000442    0x12    sd a2,0(sp)           ; stack access
    0x84000444    0x14    mv s0,a3
    0x84000446    0x16    sd a3,8(sp)           ; stack access
    0x84000448    0x18    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x8400044c    0x1c    mv s2,a0
    0x8400044e    0x1e    mv a0,s3
    0x84000450    0x20    mv a1,s0
    0x84000452    0x22    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000456    0x26    mv s0,a0
    0x84000458    0x28    slli a1,s3,0x19
    0x8400045c    0x2c    srli a1,a1,0x19
    0x8400045e    0x2e    srli s1,s3,0x26
    0x84000462    0x32    andi s1,s1,1
    0x84000464    0x34    beqz s1,ffffffff8400046c <map_it_frame_cap+0x3c>
    0x84000466    0x36    li a5,-1
    0x84000468    0x38    slli a5,a5,0x27
    0x8400046a    0x3a    or a1,a1,a5
    0x8400046c    0x3c    mv a0,s2
    0x8400046e    0x3e    jal ra,ffffffff84002998 <lookupPTSlot>
    0x84000472    0x42    sd a0,32(sp)          ; stack access
    0x84000474    0x44    sd a1,40(sp)          ; stack access
    0x84000476    0x46    li a5,1
    0x84000478    0x48    slli a5,a5,0x26
    0x8400047a    0x4a    add s0,s0,a5
    0x8400047c    0x4c    srli s0,s0,0x2
    0x8400047e    0x4e    lui a5,0xfff00
    0x84000482    0x52    srli a5,a5,0xa
    0x84000484    0x54    and s0,s0,a5
    0x84000486    0x56    ori s0,s0,223
    0x8400048a    0x5a    sd s0,0(a0)
    0x8400048c    0x5c    sfence.vma
    0x84000490    0x60    ld ra,88(sp)          ; stack access
    0x84000492    0x62    ld s0,80(sp)          ; stack access
    0x84000494    0x64    ld s1,72(sp)          ; stack access
    0x84000496    0x66    ld s2,64(sp)          ; stack access
    0x84000498    0x68    ld s3,56(sp)          ; stack access
    0x8400049a    0x6a    addi sp,sp,96
    0x8400049c    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 71 nodes.

Section map_it_pt_cap (222 of 292)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 46 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

18 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x840003c6     0x0    addi sp,sp,-80
    0x840003c8     0x2    sd ra,72(sp)          ; stack access
    0x840003ca     0x4    sd s0,64(sp)          ; stack access
    0x840003cc     0x6    sd s1,56(sp)          ; stack access
    0x840003ce     0x8    sd s2,48(sp)          ; stack access
    0x840003d0     0xa    sd a0,16(sp)          ; stack access
    0x840003d2     0xc    sd a1,24(sp)          ; stack access
    0x840003d4     0xe    sd a2,0(sp)           ; stack access
    0x840003d6    0x10    sd a3,8(sp)           ; stack access
    0x840003d8    0x12    slli s1,a2,0x19
    0x840003dc    0x16    srli s1,s1,0x19
    0x840003de    0x18    srli a2,a2,0x26
    0x840003e0    0x1a    andi a2,a2,1
    0x840003e2    0x1c    beqz a2,ffffffff840003ea <map_it_pt_cap+0x24>
    0x840003e4    0x1e    li a5,-1
    0x840003e6    0x20    slli a5,a5,0x27
    0x840003e8    0x22    or s1,s1,a5
    0x840003ea    0x24    ld a0,16(sp)          ; stack access
    0x840003ec    0x26    ld a1,24(sp)          ; stack access
    0x840003ee    0x28    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x840003f2    0x2c    mv s2,a0
    0x840003f4    0x2e    ld a0,0(sp)           ; stack access
    0x840003f6    0x30    ld a1,8(sp)           ; stack access
    0x840003f8    0x32    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x840003fc    0x36    mv s0,a0
    0x840003fe    0x38    mv a1,s1
    0x84000400    0x3a    mv a0,s2
    0x84000402    0x3c    jal ra,ffffffff84002998 <lookupPTSlot>
    0x84000406    0x40    sd a0,32(sp)          ; stack access
    0x84000408    0x42    sd a1,40(sp)          ; stack access
    0x8400040a    0x44    li a5,1
    0x8400040c    0x46    slli a5,a5,0x26
    0x8400040e    0x48    add s0,s0,a5
    0x84000410    0x4a    srli s0,s0,0x2
    0x84000412    0x4c    lui a5,0xfff00
    0x84000416    0x50    srli a5,a5,0xa
    0x84000418    0x52    and s0,s0,a5
    0x8400041a    0x54    ori s0,s0,193
    0x8400041e    0x58    sd s0,0(a0)
    0x84000420    0x5a    sfence.vma
    0x84000424    0x5e    ld ra,72(sp)          ; stack access
    0x84000426    0x60    ld s0,64(sp)          ; stack access
    0x84000428    0x62    ld s1,56(sp)          ; stack access
    0x8400042a    0x64    ld s2,48(sp)          ; stack access
    0x8400042c    0x66    addi sp,sp,80
    0x8400042e    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 72 nodes.

Section c_handle_syscall (223 of 292)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 11 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x8400b916     0x0    addi sp,sp,-16
    0x8400b918     0x2    sd ra,8(sp)           ; stack access
    0x8400b91a     0x4    li a5,-1
    0x8400b91c     0x6    beq a7,a5,ffffffff8400b92c <c_handle_syscall+0x16>
    0x8400b920     0xa    li a5,-2
    0x8400b922     0xc    beq a7,a5,ffffffff8400b930 <c_handle_syscall+0x1a>
    0x8400b926    0x10    mv a0,a7
    0x8400b928    0x12    jal ra,ffffffff8400b0dc <slowpath>
    0x8400b92c    0x16    jal ra,ffffffff8400b164 <fastpath_call>
    0x8400b930    0x1a    mv a2,a6
    0x8400b932    0x1c    jal ra,ffffffff8400b4a6 <fastpath_reply_recv>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 19 nodes.

Section slowpath (224 of 292)
=============================

Deriving specifications
-----------------------

Section `slowpath` consists of 8 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `slowpath`:

    0x8400b0dc     0x0    addi sp,sp,-16
    0x8400b0de     0x2    sd ra,8(sp)           ; stack access
    0x8400b0e0     0x4    li a5,-12
    0x8400b0e2     0x6    bgeu a5,a0,ffffffff8400b0ee <slowpath+0x12>
    0x8400b0e6     0xa    jal ra,ffffffff8400adb0 <handleSyscall>
    0x8400b0ea     0xe    jal ra,ffffffff8400237e <restore_user_context>
    0x8400b0ee    0x12    jal ra,ffffffff8400aae0 <handleUnknownSyscall>
    0x8400b0f2    0x16    j ffffffff8400b0ea <slowpath+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 14 nodes.

Section c_handle_exception (225 of 292)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 17 instructions.

Skipping 14202573 csrr a0,scause
Switch found.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x8400ad7e     0x0    addi sp,sp,-16
    0x8400ad80     0x2    sd ra,8(sp)           ; stack access
    0x8400ad82     0x4    csrr a0,scause
    0x8400ad86     0x8    li a5,15
    0x8400ad88     0xa    bltu a5,a0,ffffffff8400ada8 <c_handle_exception+0x2a>
    0x8400ad8c     0xe    slli a4,a0,0x2
    0x8400ad90    0x12    auipc a3,0x1
    0x8400ad94    0x16    addi a3,a3,196 # ffffffff8400be54 <msgRegisters+0x4ac>
    0x8400ad98    0x1a    add a4,a4,a3
    0x8400ad9a    0x1c    lw a5,0(a4)
    0x8400ad9c    0x1e    add a5,a5,a3
    0x8400ad9e    0x20    jr a5
    0x8400ada0    0x22    jal ra,ffffffff8400aca4 <handleVMFaultEvent>
    0x8400ada4    0x26    jal ra,ffffffff8400237e <restore_user_context>
    0x8400ada8    0x2a    li a1,0
    0x8400adaa    0x2c    jal ra,ffffffff8400abba <handleUserLevelFault>
    0x8400adae    0x30    j ffffffff8400ada4 <c_handle_exception+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 64 nodes.

Section chooseThread (226 of 292)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 43 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `chooseThread`:

    0x8400a6d2     0x0    addi sp,sp,-32
    0x8400a6d4     0x2    sd ra,24(sp)          ; stack access
    0x8400a6d6     0x4    sd s0,16(sp)          ; stack access
    0x8400a6d8     0x6    sd s1,8(sp)           ; stack access
    0x8400a6da     0x8    auipc s1,0x15
    0x8400a6de     0xc    ld s1,-1730(s1) # ffffffff8401f018 <ksCurDomain>
    0x8400a6e2    0x10    slli a4,s1,0x3
    0x8400a6e6    0x14    auipc a5,0x2
    0x8400a6ea    0x18    addi a5,a5,282 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a6ee    0x1c    add a5,a5,a4
    0x8400a6f0    0x1e    ld a0,1552(a5)
    0x8400a6f4    0x22    beqz a0,ffffffff8400a748 <chooseThread+0x76>
    0x8400a6f6    0x24    jal ra,ffffffff8400a66a <__clzdi2>
    0x8400a6fa    0x28    mv s0,a0
    0x8400a6fc    0x2a    slli a5,s1,0x2
    0x8400a700    0x2e    addi a4,a0,-60
    0x8400a704    0x32    add a5,a5,a4
    0x8400a706    0x34    slli a5,a5,0x3
    0x8400a708    0x36    auipc a4,0x2
    0x8400a70c    0x3a    addi a4,a4,248 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a710    0x3e    add a5,a5,a4
    0x8400a712    0x40    ld a0,1680(a5)
    0x8400a716    0x44    jal ra,ffffffff8400a66a <__clzdi2>
    0x8400a71a    0x48    li a5,63
    0x8400a71e    0x4c    sub s0,a5,s0
    0x8400a722    0x50    slli s0,s0,0x6
    0x8400a724    0x52    sub a5,a5,a0
    0x8400a726    0x54    or s0,s0,a5
    0x8400a728    0x56    slli s1,s1,0x8
    0x8400a72a    0x58    add s0,s0,s1
    0x8400a72c    0x5a    slli s0,s0,0x4
    0x8400a72e    0x5c    auipc s1,0x4
    0x8400a732    0x60    addi s1,s1,-1838 # ffffffff8400e000 <ksReadyQueues>
    0x8400a736    0x64    add s0,s0,s1
    0x8400a738    0x66    ld a0,0(s0)
    0x8400a73a    0x68    jal ra,ffffffff84004fd8 <switchToThread>
    0x8400a73e    0x6c    ld ra,24(sp)          ; stack access
    0x8400a740    0x6e    ld s0,16(sp)          ; stack access
    0x8400a742    0x70    ld s1,8(sp)           ; stack access
    0x8400a744    0x72    addi sp,sp,32
    0x8400a746    0x74    ret
    0x8400a748    0x76    jal ra,ffffffff84003a3e <switchToIdleThread>
    0x8400a74c    0x7a    j ffffffff8400a73e <chooseThread+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 60 nodes.

Section createNewObjects (227 of 292)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 52 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `createNewObjects`:

    0x84009d2c     0x0    addi sp,sp,-96
    0x84009d2e     0x2    sd ra,88(sp)          ; stack access
    0x84009d30     0x4    sd s0,80(sp)          ; stack access
    0x84009d32     0x6    sd s1,72(sp)          ; stack access
    0x84009d34     0x8    sd s2,64(sp)          ; stack access
    0x84009d36     0xa    sd s3,56(sp)          ; stack access
    0x84009d38     0xc    sd s4,48(sp)          ; stack access
    0x84009d3a     0xe    sd s5,40(sp)          ; stack access
    0x84009d3c    0x10    sd s6,32(sp)          ; stack access
    0x84009d3e    0x12    sd s7,24(sp)          ; stack access
    0x84009d40    0x14    sd s8,16(sp)          ; stack access
    0x84009d42    0x16    mv s5,a0
    0x84009d44    0x18    mv s6,a1
    0x84009d46    0x1a    mv s1,a2
    0x84009d48    0x1c    mv s0,a3
    0x84009d4a    0x1e    mv s2,a4
    0x84009d4c    0x20    mv s7,a5
    0x84009d4e    0x22    mv s3,a6
    0x84009d50    0x24    mv s8,a7
    0x84009d52    0x26    mv a1,a6
    0x84009d54    0x28    jal ra,ffffffff84003fe4 <getObjectSize>
    0x84009d58    0x2c    beqz s2,ffffffff84009d8c <createNewObjects+0x60>
    0x84009d5c    0x30    sext.w s4,a0
    0x84009d60    0x34    slli s0,s0,0x5
    0x84009d62    0x36    add s1,s1,s0
    0x84009d64    0x38    li s0,0
    0x84009d66    0x3a    sll a1,s0,s4
    0x84009d6a    0x3e    mv a3,s8
    0x84009d6c    0x40    mv a2,s3
    0x84009d6e    0x42    add a1,a1,s7
    0x84009d70    0x44    mv a0,s5
    0x84009d72    0x46    jal ra,ffffffff84009c24 <createObject>
    0x84009d76    0x4a    mv a2,a0
    0x84009d78    0x4c    mv a3,a1
    0x84009d7a    0x4e    mv a1,s1
    0x84009d7c    0x50    mv a0,s6
    0x84009d7e    0x52    jal ra,ffffffff84003d52 <insertNewCap>
    0x84009d82    0x56    addi s0,s0,1
    0x84009d84    0x58    addi s1,s1,32
    0x84009d88    0x5c    bne s2,s0,ffffffff84009d66 <createNewObjects+0x3a>
    0x84009d8c    0x60    ld ra,88(sp)          ; stack access
    0x84009d8e    0x62    ld s0,80(sp)          ; stack access
    0x84009d90    0x64    ld s1,72(sp)          ; stack access
    0x84009d92    0x66    ld s2,64(sp)          ; stack access
    0x84009d94    0x68    ld s3,56(sp)          ; stack access
    0x84009d96    0x6a    ld s4,48(sp)          ; stack access
    0x84009d98    0x6c    ld s5,40(sp)          ; stack access
    0x84009d9a    0x6e    ld s6,32(sp)          ; stack access
    0x84009d9c    0x70    ld s7,24(sp)          ; stack access
    0x84009d9e    0x72    ld s8,16(sp)          ; stack access
    0x84009da0    0x74    addi sp,sp,96
    0x84009da2    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 80 nodes.

Section createObject (228 of 292)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 107 instructions.
Switch found.


Stack analysis
---------------

24 stack accesses found. Annotated code for `createObject`:

    0x84009c24      0x0    addi sp,sp,-48
    0x84009c26      0x2    sd ra,40(sp)          ; stack access
    0x84009c28      0x4    sd s0,32(sp)          ; stack access
    0x84009c2a      0x6    sd s1,24(sp)          ; stack access
    0x84009c2c      0x8    mv s0,a1
    0x84009c2e      0xa    mv s1,a2
    0x84009c30      0xc    li a5,6
    0x84009c32      0xe    bltu a5,a0,ffffffff84009c4e <createObject+0x2a>
    0x84009c36     0x12    li a5,6
    0x84009c38     0x14    bltu a5,a0,ffffffff84009d28 <createObject+0x104>
    0x84009c3c     0x18    slli a0,a0,0x2
    0x84009c3e     0x1a    auipc a4,0x2
    0x84009c42     0x1e    addi a4,a4,406 # ffffffff8400bdd4 <msgRegisters+0x42c>
    0x84009c46     0x22    add a0,a0,a4
    0x84009c48     0x24    lw a5,0(a0)
    0x84009c4a     0x26    add a5,a5,a4
    0x84009c4c     0x28    jr a5
    0x84009c4e     0x2a    jal ra,ffffffff84003266 <Arch_createObject>
    0x84009c52     0x2e    sd a0,0(sp)           ; stack access
    0x84009c54     0x30    sd a1,8(sp)           ; stack access
    0x84009c56     0x32    ld a0,0(sp)           ; stack access
    0x84009c58     0x34    ld a1,8(sp)           ; stack access
    0x84009c5a     0x36    ld ra,40(sp)          ; stack access
    0x84009c5c     0x38    ld s0,32(sp)          ; stack access
    0x84009c5e     0x3a    ld s1,24(sp)          ; stack access
    0x84009c60     0x3c    addi sp,sp,48
    0x84009c62     0x3e    ret
    0x84009c64     0x40    li a5,32
    0x84009c68     0x44    sd a5,768(a1) # 1300 <KERNEL_OFFSET-0xfffffffeffffed00>
    0x84009c6c     0x48    auipc a5,0x15
    0x84009c70     0x4c    ld a5,940(a5) # ffffffff8401f018 <ksCurDomain>
    0x84009c74     0x50    sd a5,856(a1)
    0x84009c78     0x54    addi s0,a1,512
    0x84009c7c     0x58    slli s0,s0,0x19
    0x84009c7e     0x5a    srli s0,s0,0x19
    0x84009c80     0x5c    li a5,3
    0x84009c82     0x5e    slli a5,a5,0x3d
    0x84009c84     0x60    or s0,s0,a5
    0x84009c86     0x62    sd s0,0(sp)           ; stack access
    0x84009c88     0x64    sd zero,8(sp)         ; stack access
    0x84009c8a     0x66    j ffffffff84009c56 <createObject+0x32>
    0x84009c8c     0x68    slli s0,a1,0x19
    0x84009c90     0x6c    srli s0,s0,0x19
    0x84009c92     0x6e    li a5,79
    0x84009c96     0x72    slli a5,a5,0x37
    0x84009c98     0x74    or s0,s0,a5
    0x84009c9a     0x76    sd s0,0(sp)           ; stack access
    0x84009c9c     0x78    sd zero,8(sp)         ; stack access
    0x84009c9e     0x7a    j ffffffff84009c56 <createObject+0x32>
    0x84009ca0     0x7c    slli s0,a1,0x19
    0x84009ca4     0x80    srli s0,s0,0x19
    0x84009ca6     0x82    li a5,27
    0x84009ca8     0x84    slli a5,a5,0x39
    0x84009caa     0x86    or s0,s0,a5
    0x84009cac     0x88    sd s0,0(sp)           ; stack access
    0x84009cae     0x8a    sd zero,8(sp)         ; stack access
    0x84009cb0     0x8c    j ffffffff84009c56 <createObject+0x32>
    0x84009cb2     0x8e    andi a5,a2,63
    0x84009cb6     0x92    slli a5,a5,0x2f
    0x84009cb8     0x94    slli s0,a1,0x19
    0x84009cbc     0x98    srli s0,s0,0x1a
    0x84009cbe     0x9a    or a5,a5,s0
    0x84009cc0     0x9c    li a4,5
    0x84009cc2     0x9e    slli a4,a4,0x3c
    0x84009cc4     0xa0    or a5,a5,a4
    0x84009cc6     0xa2    sd a5,0(sp)           ; stack access
    0x84009cc8     0xa4    sd zero,8(sp)         ; stack access
    0x84009cca     0xa6    j ffffffff84009c56 <createObject+0x32>
    0x84009ccc     0xa8    slli s0,a1,0x19
    0x84009cd0     0xac    srli s0,s0,0x19
    0x84009cd2     0xae    li a5,1
    0x84009cd4     0xb0    slli a5,a5,0x3c
    0x84009cd6     0xb2    or s0,s0,a5
    0x84009cd8     0xb4    sd s0,0(sp)           ; stack access
    0x84009cda     0xb6    snez a3,a3
    0x84009cde     0xba    slli a3,a3,0x6
    0x84009ce0     0xbc    andi s1,a2,63
    0x84009ce4     0xc0    or s1,s1,a3
    0x84009ce6     0xc2    sd s1,8(sp)           ; stack access
    0x84009ce8     0xc4    j ffffffff84009c56 <createObject+0x32>
    0x84009cea     0xc6    li a1,1
    0x84009cec     0xc8    sll a1,a1,a2
    0x84009cf0     0xcc    mv a0,s0
    0x84009cf2     0xce    jal ra,ffffffff840092da <memzero>
    0x84009cf6     0xd2    li a5,-5
    0x84009cf8     0xd4    slli a5,a5,0x3c
    0x84009cfa     0xd6    sd a5,0(sp)           ; stack access
    0x84009cfc     0xd8    slli s0,s0,0x10
    0x84009cfe     0xda    lui a5,0xfe000
    0x84009d02     0xde    srli a5,a5,0x9
    0x84009d04     0xe0    and s0,s0,a5
    0x84009d06     0xe2    slli s1,s1,0xa
    0x84009d08     0xe4    lui a5,0x10
    0x84009d0a     0xe6    addi a5,a5,-1
    0x84009d0c     0xe8    and s1,s1,a5
    0x84009d0e     0xea    or s1,s1,s0
    0x84009d10     0xec    sd s1,8(sp)           ; stack access
    0x84009d12     0xee    j ffffffff84009c56 <createObject+0x32>
    0x84009d14     0xf0    li a1,32
    0x84009d18     0xf4    mv a0,s0
    0x84009d1a     0xf6    jal ra,ffffffff840092da <memzero>
    0x84009d1e     0xfa    li a5,17
    0x84009d20     0xfc    slli a5,a5,0x3a
    0x84009d22     0xfe    sd a5,0(sp)           ; stack access
    0x84009d24    0x100    sd s0,8(sp)           ; stack access
    0x84009d26    0x102    j ffffffff84009c56 <createObject+0x32>
    0x84009d28    0x104    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 156 nodes.

Section invokeTCB_ReadRegisters (229 of 292)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 106 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x84008b6a      0x0    addi sp,sp,-48
    0x84008b6c      0x2    sd ra,40(sp)          ; stack access
    0x84008b6e      0x4    sd s0,32(sp)          ; stack access
    0x84008b70      0x6    sd s1,24(sp)          ; stack access
    0x84008b72      0x8    sd s2,16(sp)          ; stack access
    0x84008b74      0xa    sd s3,8(sp)           ; stack access
    0x84008b76      0xc    mv s1,a0
    0x84008b78      0xe    mv s0,a2
    0x84008b7a     0x10    mv s3,a4
    0x84008b7c     0x12    auipc s2,0x16
    0x84008b80     0x16    ld s2,1244(s2) # ffffffff8401f058 <ksCurThread>
    0x84008b84     0x1a    bnez a1,ffffffff84008c02 <invokeTCB_ReadRegisters+0x98>
    0x84008b86     0x1c    beqz s3,ffffffff84008c22 <invokeTCB_ReadRegisters+0xb8>
    0x84008b8a     0x20    mv a1,s2
    0x84008b8c     0x22    li a0,1
    0x84008b8e     0x24    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x84008b92     0x28    sd zero,72(s2)
    0x84008b96     0x2c    beqz s0,ffffffff84008c78 <invokeTCB_ReadRegisters+0x10e>
    0x84008b98     0x2e    ld a5,264(s1)
    0x84008b9c     0x32    sd a5,88(s2)
    0x84008ba0     0x36    li a5,1
    0x84008ba2     0x38    bgeu a5,s0,ffffffff84008c08 <invokeTCB_ReadRegisters+0x9e>
    0x84008ba6     0x3c    ld a5,0(s1)
    0x84008ba8     0x3e    sd a5,96(s2)
    0x84008bac     0x42    li a5,2
    0x84008bae     0x44    bgeu a5,s0,ffffffff84008c3a <invokeTCB_ReadRegisters+0xd0>
    0x84008bb2     0x48    ld a5,8(s1)
    0x84008bb4     0x4a    sd a5,104(s2)
    0x84008bb8     0x4e    li a5,3
    0x84008bba     0x50    bgeu a5,s0,ffffffff84008c3e <invokeTCB_ReadRegisters+0xd4>
    0x84008bbe     0x54    ld a5,16(s1)
    0x84008bc0     0x56    sd a5,112(s2)
    0x84008bc4     0x5a    li a5,4
    0x84008bc6     0x5c    li a3,4
    0x84008bc8     0x5e    bgeu a5,s0,ffffffff84008c0a <invokeTCB_ReadRegisters+0xa0>
    0x84008bcc     0x62    li a3,4
    0x84008bce     0x64    beqz a0,ffffffff84008c7c <invokeTCB_ReadRegisters+0x112>
    0x84008bd0     0x66    bgeu a3,s0,ffffffff84008c10 <invokeTCB_ReadRegisters+0xa6>
    0x84008bd4     0x6a    auipc a2,0x3
    0x84008bd8     0x6e    addi a2,a2,892 # ffffffff8400bf50 <frameRegisters>
    0x84008bdc     0x72    add a2,a2,a3
    0x84008bde     0x74    slli a4,a3,0x3
    0x84008be2     0x78    add a4,a4,a0
    0x84008be4     0x7a    li a1,16
    0x84008be6     0x7c    addi a3,a3,1
    0x84008be8     0x7e    lbu a5,0(a2)
    0x84008bec     0x82    slli a5,a5,0x3
    0x84008bee     0x84    add a5,a5,s1
    0x84008bf0     0x86    ld a5,0(a5)
    0x84008bf2     0x88    sd a5,8(a4)
    0x84008bf4     0x8a    bgeu a3,s0,ffffffff84008c10 <invokeTCB_ReadRegisters+0xa6>
    0x84008bf8     0x8e    addi a2,a2,1
    0x84008bfa     0x90    addi a4,a4,8
    0x84008bfc     0x92    bne a3,a1,ffffffff84008be6 <invokeTCB_ReadRegisters+0x7c>
    0x84008c00     0x96    j ffffffff84008c10 <invokeTCB_ReadRegisters+0xa6>
    0x84008c02     0x98    jal ra,ffffffff84005774 <suspend>
    0x84008c06     0x9c    j ffffffff84008b86 <invokeTCB_ReadRegisters+0x1c>
    0x84008c08     0x9e    li a3,1
    0x84008c0a     0xa0    beqz a0,ffffffff84008c7c <invokeTCB_ReadRegisters+0x112>
    0x84008c0c     0xa2    bltu a3,s0,ffffffff84008bd0 <invokeTCB_ReadRegisters+0x66>
    0x84008c10     0xa6    li a5,16
    0x84008c12     0xa8    bltu a5,s0,ffffffff84008c46 <invokeTCB_ReadRegisters+0xdc>
    0x84008c16     0xac    li a5,0
    0x84008c18     0xae    add a5,a5,a3
    0x84008c1a     0xb0    andi a5,a5,127
    0x84008c1e     0xb4    sd a5,80(s2)
    0x84008c22     0xb8    li a1,1
    0x84008c24     0xba    mv a0,s2
    0x84008c26     0xbc    jal ra,ffffffff84004a52 <setThreadState>
    0x84008c2a     0xc0    li a0,0
    0x84008c2c     0xc2    ld ra,40(sp)          ; stack access
    0x84008c2e     0xc4    ld s0,32(sp)          ; stack access
    0x84008c30     0xc6    ld s1,24(sp)          ; stack access
    0x84008c32     0xc8    ld s2,16(sp)          ; stack access
    0x84008c34     0xca    ld s3,8(sp)           ; stack access
    0x84008c36     0xcc    addi sp,sp,48
    0x84008c38     0xce    ret
    0x84008c3a     0xd0    li a3,2
    0x84008c3c     0xd2    j ffffffff84008c0a <invokeTCB_ReadRegisters+0xa0>
    0x84008c3e     0xd4    li a3,3
    0x84008c40     0xd6    j ffffffff84008c0a <invokeTCB_ReadRegisters+0xa0>
    0x84008c42     0xd8    mv a5,s0
    0x84008c44     0xda    j ffffffff84008c18 <invokeTCB_ReadRegisters+0xae>
    0x84008c46     0xdc    ld a5,72(s1)
    0x84008c48     0xde    sd a5,136(a0)
    0x84008c4a     0xe0    auipc a1,0x3
    0x84008c4e     0xe4    addi a1,a1,791 # ffffffff8400bf61 <gpRegisters+0x1>
    0x84008c52     0xe8    addi a0,a0,144
    0x84008c56     0xec    addi s0,s0,-16
    0x84008c58     0xee    li a5,1
    0x84008c5a     0xf0    li a2,16
    0x84008c5c     0xf2    beq a5,s0,ffffffff84008c42 <invokeTCB_ReadRegisters+0xd8>
    0x84008c60     0xf6    lbu a4,0(a1)
    0x84008c64     0xfa    slli a4,a4,0x3
    0x84008c66     0xfc    add a4,a4,s1
    0x84008c68     0xfe    ld a4,0(a4)
    0x84008c6a    0x100    sd a4,0(a0)
    0x84008c6c    0x102    addi a5,a5,1
    0x84008c6e    0x104    addi a1,a1,1
    0x84008c70    0x106    addi a0,a0,8
    0x84008c72    0x108    bne a5,a2,ffffffff84008c5c <invokeTCB_ReadRegisters+0xf2>
    0x84008c76    0x10c    j ffffffff84008c18 <invokeTCB_ReadRegisters+0xae>
    0x84008c78    0x10e    mv a3,s0
    0x84008c7a    0x110    bnez a0,ffffffff84008c10 <invokeTCB_ReadRegisters+0xa6>
    0x84008c7c    0x112    li a5,0
    0x84008c7e    0x114    j ffffffff84008c18 <invokeTCB_ReadRegisters+0xae>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
106 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 173 nodes.

Section invokeTCB_CopyRegisters (230 of 292)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x84008a18     0x0    addi sp,sp,-48
    0x84008a1a     0x2    sd ra,40(sp)          ; stack access
    0x84008a1c     0x4    sd s0,32(sp)          ; stack access
    0x84008a1e     0x6    sd s1,24(sp)          ; stack access
    0x84008a20     0x8    sd s2,16(sp)          ; stack access
    0x84008a22     0xa    sd s3,8(sp)           ; stack access
    0x84008a24     0xc    sd s4,0(sp)           ; stack access
    0x84008a26     0xe    mv s0,a0
    0x84008a28    0x10    mv s1,a1
    0x84008a2a    0x12    mv s4,a3
    0x84008a2c    0x14    mv s3,a4
    0x84008a2e    0x16    mv s2,a5
    0x84008a30    0x18    bnez a2,ffffffff84008ab0 <invokeTCB_CopyRegisters+0x98>
    0x84008a32    0x1a    bnez s4,ffffffff84008ab8 <invokeTCB_CopyRegisters+0xa0>
    0x84008a36    0x1e    beqz s3,ffffffff84008a68 <invokeTCB_CopyRegisters+0x50>
    0x84008a3a    0x22    auipc a3,0x3
    0x84008a3e    0x26    addi a3,a3,1302 # ffffffff8400bf50 <frameRegisters>
    0x84008a42    0x2a    auipc a1,0x3
    0x84008a46    0x2e    addi a1,a1,1310 # ffffffff8400bf60 <gpRegisters>
    0x84008a4a    0x32    lbu a4,0(a3)
    0x84008a4e    0x36    slli a4,a4,0x3
    0x84008a50    0x38    add a2,s1,a4
    0x84008a54    0x3c    ld a2,0(a2)
    0x84008a56    0x3e    add a4,a4,s0
    0x84008a58    0x40    sd a2,0(a4)
    0x84008a5a    0x42    addi a3,a3,1
    0x84008a5c    0x44    bne a3,a1,ffffffff84008a4a <invokeTCB_CopyRegisters+0x32>
    0x84008a60    0x48    ld a5,264(s0)
    0x84008a64    0x4c    sd a5,272(s0)
    0x84008a68    0x50    beqz s2,ffffffff84008a92 <invokeTCB_CopyRegisters+0x7a>
    0x84008a6c    0x54    auipc a4,0x3
    0x84008a70    0x58    addi a4,a4,1268 # ffffffff8400bf60 <gpRegisters>
    0x84008a74    0x5c    auipc a2,0x3
    0x84008a78    0x60    addi a2,a2,1276 # ffffffff8400bf70 <gpRegisters+0x10>
    0x84008a7c    0x64    lbu a5,0(a4)
    0x84008a80    0x68    slli a5,a5,0x3
    0x84008a82    0x6a    add a3,s1,a5
    0x84008a86    0x6e    ld a3,0(a3)
    0x84008a88    0x70    add a5,a5,s0
    0x84008a8a    0x72    sd a3,0(a5)
    0x84008a8c    0x74    addi a4,a4,1
    0x84008a8e    0x76    bne a4,a2,ffffffff84008a7c <invokeTCB_CopyRegisters+0x64>
    0x84008a92    0x7a    auipc a5,0x16
    0x84008a96    0x7e    ld a5,1478(a5) # ffffffff8401f058 <ksCurThread>
    0x84008a9a    0x82    beq a5,s0,ffffffff84008ac0 <invokeTCB_CopyRegisters+0xa8>
    0x84008a9e    0x86    li a0,0
    0x84008aa0    0x88    ld ra,40(sp)          ; stack access
    0x84008aa2    0x8a    ld s0,32(sp)          ; stack access
    0x84008aa4    0x8c    ld s1,24(sp)          ; stack access
    0x84008aa6    0x8e    ld s2,16(sp)          ; stack access
    0x84008aa8    0x90    ld s3,8(sp)           ; stack access
    0x84008aaa    0x92    ld s4,0(sp)           ; stack access
    0x84008aac    0x94    addi sp,sp,48
    0x84008aae    0x96    ret
    0x84008ab0    0x98    mv a0,a1
    0x84008ab2    0x9a    jal ra,ffffffff84005774 <suspend>
    0x84008ab6    0x9e    j ffffffff84008a32 <invokeTCB_CopyRegisters+0x1a>
    0x84008ab8    0xa0    mv a0,s0
    0x84008aba    0xa2    jal ra,ffffffff84005cf0 <restart>
    0x84008abe    0xa6    j ffffffff84008a36 <invokeTCB_CopyRegisters+0x1e>
    0x84008ac0    0xa8    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84008ac4    0xac    j ffffffff84008a9e <invokeTCB_CopyRegisters+0x86>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 101 nodes.

Section decodeSetSchedParams (231 of 292)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 164 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x84008854      0x0    addi sp,sp,-112
    0x84008856      0x2    sd ra,104(sp)         ; stack access
    0x84008858      0x4    sd s0,96(sp)          ; stack access
    0x8400885a      0x6    sd s1,88(sp)          ; stack access
    0x8400885c      0x8    sd s2,80(sp)          ; stack access
    0x8400885e      0xa    sd s3,72(sp)          ; stack access
    0x84008860      0xc    sd s4,64(sp)          ; stack access
    0x84008862      0xe    sd s5,56(sp)          ; stack access
    0x84008864     0x10    sd a0,16(sp)          ; stack access
    0x84008866     0x12    sd a1,24(sp)          ; stack access
    0x84008868     0x14    li a5,1
    0x8400886a     0x16    bgeu a5,a2,ffffffff8400892c <decodeSetSchedParams+0xd8>
    0x8400886e     0x1a    mv s1,a3
    0x84008870     0x1c    auipc a5,0x5
    0x84008874     0x20    ld a5,-2016(a5) # ffffffff8400d090 <current_extra_caps>
    0x84008878     0x24    beqz a5,ffffffff8400892c <decodeSetSchedParams+0xd8>
    0x8400887a     0x26    auipc a4,0x5
    0x8400887e     0x2a    ld a4,-2018(a4) # ffffffff8400d098 <current_extra_caps+0x8>
    0x84008882     0x2e    beqz a4,ffffffff8400892c <decodeSetSchedParams+0xd8>
    0x84008884     0x30    auipc s0,0x5
    0x84008888     0x34    ld s0,-2020(s0) # ffffffff8400d0a0 <current_extra_caps+0x10>
    0x8400888c     0x38    beqz s0,ffffffff8400892c <decodeSetSchedParams+0xd8>
    0x8400888e     0x3a    auipc a3,0x16
    0x84008892     0x3e    ld a3,1994(a3) # ffffffff8401f058 <ksCurThread>
    0x84008896     0x42    ld s2,88(a3)
    0x8400889a     0x46    ld s3,96(a3)
    0x8400889e     0x4a    ld a5,0(a5)
    0x840088a0     0x4c    ld a1,0(a4)
    0x840088a2     0x4e    ld a6,8(a4)
    0x840088a6     0x52    ld a4,0(s0)
    0x840088a8     0x54    sd a4,32(sp)          ; stack access
    0x840088aa     0x56    ld a4,8(s0)
    0x840088ac     0x58    sd a4,40(sp)          ; stack access
    0x840088ae     0x5a    srli a2,a5,0x3b
    0x840088b2     0x5e    li a4,12
    0x840088b4     0x60    bne a2,a4,ffffffff8400894a <decodeSetSchedParams+0xf6>
    0x840088b8     0x64    slli a4,a5,0x19
    0x840088bc     0x68    srli a4,a4,0x19
    0x840088be     0x6a    srli a5,a5,0x26
    0x840088c0     0x6c    andi a5,a5,1
    0x840088c2     0x6e    beqz a5,ffffffff840088ca <decodeSetSchedParams+0x76>
    0x840088c4     0x70    li a5,-1
    0x840088c6     0x72    slli a5,a5,0x27
    0x840088c8     0x74    or a4,a4,a5
    0x840088ca     0x76    ld a5,352(a4)
    0x840088ce     0x7a    bltu a5,s2,ffffffff84008962 <decodeSetSchedParams+0x10e>
    0x840088d2     0x7e    bltu a5,s3,ffffffff8400897c <decodeSetSchedParams+0x128>
    0x840088d6     0x82    ld a5,16(sp)          ; stack access
    0x840088d8     0x84    slli a0,a5,0x19
    0x840088dc     0x88    srli a0,a0,0x19
    0x840088de     0x8a    srli a5,a5,0x26
    0x840088e0     0x8c    andi a5,a5,1
    0x840088e2     0x8e    beqz a5,ffffffff840088ea <decodeSetSchedParams+0x96>
    0x840088e4     0x90    li a5,-1
    0x840088e6     0x92    slli a5,a5,0x27
    0x840088e8     0x94    or a0,a0,a5
    0x840088ea     0x96    mv s4,a0
    0x840088ec     0x98    srli a1,a1,0x3b
    0x840088ee     0x9a    beqz a1,ffffffff840089a4 <decodeSetSchedParams+0x150>
    0x840088f0     0x9c    li a5,22
    0x840088f2     0x9e    bne a1,a5,ffffffff840089ea <decodeSetSchedParams+0x196>
    0x840088f6     0xa2    srli a6,a6,0x10
    0x840088fa     0xa6    slli a5,a6,0x19
    0x840088fe     0xaa    srli a5,a5,0x19
    0x84008900     0xac    srli a6,a6,0x26
    0x84008904     0xb0    andi a6,a6,1
    0x84008908     0xb4    beqz a6,ffffffff84008912 <decodeSetSchedParams+0xbe>
    0x8400890c     0xb8    li a4,-1
    0x8400890e     0xba    slli a4,a4,0x27
    0x84008910     0xbc    or a5,a5,a4
    0x84008912     0xbe    ld a4,368(s4)
    0x84008916     0xc2    bnez a4,ffffffff84008996 <decodeSetSchedParams+0x142>
    0x84008918     0xc4    mv s5,a5
    0x8400891a     0xc6    ld a5,24(a5)
    0x8400891c     0xc8    beqz a5,ffffffff840089aa <decodeSetSchedParams+0x156>
    0x8400891e     0xca    li a5,3
    0x84008920     0xcc    auipc a4,0x4
    0x84008924     0xd0    sd a5,800(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008928     0xd4    li a0,3
    0x8400892a     0xd6    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x8400892c     0xd8    li a5,7
    0x8400892e     0xda    auipc a4,0x4
    0x84008932     0xde    sd a5,786(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84008936     0xe2    li a0,3
    0x84008938     0xe4    ld ra,104(sp)         ; stack access
    0x8400893a     0xe6    ld s0,96(sp)          ; stack access
    0x8400893c     0xe8    ld s1,88(sp)          ; stack access
    0x8400893e     0xea    ld s2,80(sp)          ; stack access
    0x84008940     0xec    ld s3,72(sp)          ; stack access
    0x84008942     0xee    ld s4,64(sp)          ; stack access
    0x84008944     0xf0    ld s5,56(sp)          ; stack access
    0x84008946     0xf2    addi sp,sp,112
    0x84008948     0xf4    ret
    0x8400894a     0xf6    auipc a5,0x4
    0x8400894e     0xfa    addi a5,a5,-330 # ffffffff8400c800 <riscvKSASIDTable>
    0x84008952     0xfe    li a4,2
    0x84008954    0x100    sd a4,1088(a5)
    0x84008958    0x104    li a4,1
    0x8400895a    0x106    sd a4,1048(a5)
    0x8400895e    0x10a    li a0,3
    0x84008960    0x10c    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x84008962    0x10e    auipc a4,0x4
    0x84008966    0x112    addi a4,a4,-354 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400896a    0x116    li a3,4
    0x8400896c    0x118    sd a3,1088(a4)
    0x84008970    0x11c    sd zero,1056(a4)
    0x84008974    0x120    sd a5,1064(a4)
    0x84008978    0x124    li a0,3
    0x8400897a    0x126    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x8400897c    0x128    auipc a4,0x4
    0x84008980    0x12c    addi a4,a4,-380 # ffffffff8400c800 <riscvKSASIDTable>
    0x84008984    0x130    li a3,4
    0x84008986    0x132    sd a3,1088(a4)
    0x8400898a    0x136    sd zero,1056(a4)
    0x8400898e    0x13a    sd a5,1064(a4)
    0x84008992    0x13e    li a0,3
    0x84008994    0x140    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x84008996    0x142    li a5,3
    0x84008998    0x144    auipc a4,0x4
    0x8400899c    0x148    sd a5,680(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840089a0    0x14c    li a0,3
    0x840089a2    0x14e    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x840089a4    0x150    li s5,0
    0x840089a6    0x152    beq a0,a3,ffffffff840089dc <decodeSetSchedParams+0x188>
    0x840089aa    0x156    ld a0,32(sp)          ; stack access
    0x840089ac    0x158    ld a1,40(sp)          ; stack access
    0x840089ae    0x15a    jal ra,ffffffff84002206 <validFaultHandler>
    0x840089b2    0x15e    beqz a0,ffffffff84008a00 <decodeSetSchedParams+0x1ac>
    0x840089b4    0x160    li a1,2
    0x840089b6    0x162    auipc a0,0x16
    0x840089ba    0x166    ld a0,1698(a0) # ffffffff8401f058 <ksCurThread>
    0x840089be    0x16a    jal ra,ffffffff84004a52 <setThreadState>
    0x840089c2    0x16e    li a5,15
    0x840089c4    0x170    sd a5,0(sp)           ; stack access
    0x840089c6    0x172    mv a7,s5
    0x840089c8    0x174    mv a6,s3
    0x840089ca    0x176    mv a5,s2
    0x840089cc    0x178    mv a4,s0
    0x840089ce    0x17a    ld a2,32(sp)          ; stack access
    0x840089d0    0x17c    ld a3,40(sp)          ; stack access
    0x840089d2    0x17e    mv a1,s1
    0x840089d4    0x180    mv a0,s4
    0x840089d6    0x182    jal ra,ffffffff840085ee <invokeTCB_ThreadControlSched>
    0x840089da    0x186    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x840089dc    0x188    li a5,3
    0x840089de    0x18a    auipc a4,0x4
    0x840089e2    0x18e    sd a5,610(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840089e6    0x192    li a0,3
    0x840089e8    0x194    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x840089ea    0x196    auipc a5,0x4
    0x840089ee    0x19a    addi a5,a5,-490 # ffffffff8400c800 <riscvKSASIDTable>
    0x840089f2    0x19e    li a4,2
    0x840089f4    0x1a0    sd a4,1088(a5)
    0x840089f8    0x1a4    sd a4,1048(a5)
    0x840089fc    0x1a8    li a0,3
    0x840089fe    0x1aa    j ffffffff84008938 <decodeSetSchedParams+0xe4>
    0x84008a00    0x1ac    auipc a5,0x4
    0x84008a04    0x1b0    addi a5,a5,-512 # ffffffff8400c800 <riscvKSASIDTable>
    0x84008a08    0x1b4    li a4,2
    0x84008a0a    0x1b6    sd a4,1088(a5)
    0x84008a0e    0x1ba    li a4,3
    0x84008a10    0x1bc    sd a4,1048(a5)
    0x84008a14    0x1c0    li a0,3
    0x84008a16    0x1c2    j ffffffff84008938 <decodeSetSchedParams+0xe4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
164 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 255 nodes.

Section decodeSetTimeoutEndpoint (232 of 292)
=============================================

Deriving specifications
-----------------------

Section `decodeSetTimeoutEndpoint` consists of 61 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `decodeSetTimeoutEndpoint`:

    0x840082ea     0x0    addi sp,sp,-176
    0x840082ec     0x2    sd ra,168(sp)         ; stack access
    0x840082ee     0x4    sd s0,160(sp)         ; stack access
    0x840082f0     0x6    sd s1,152(sp)         ; stack access
    0x840082f2     0x8    sd a0,96(sp)          ; stack access
    0x840082f4     0xa    sd a1,104(sp)         ; stack access
    0x840082f6     0xc    auipc s0,0x5
    0x840082fa    0x10    ld s0,-614(s0) # ffffffff8400d090 <current_extra_caps>
    0x840082fe    0x14    beqz s0,ffffffff84008374 <decodeSetTimeoutEndpoint+0x8a>
    0x84008300    0x16    mv s1,a2
    0x84008302    0x18    ld a0,0(s0)
    0x84008304    0x1a    sd a0,112(sp)         ; stack access
    0x84008306    0x1c    ld a1,8(s0)
    0x84008308    0x1e    sd a1,120(sp)         ; stack access
    0x8400830a    0x20    jal ra,ffffffff84002206 <validFaultHandler>
    0x8400830e    0x24    beqz a0,ffffffff84008366 <decodeSetTimeoutEndpoint+0x7c>
    0x84008310    0x26    li a1,2
    0x84008312    0x28    auipc a0,0x17
    0x84008316    0x2c    ld a0,-698(a0) # ffffffff8401f058 <ksCurThread>
    0x8400831a    0x30    jal ra,ffffffff84004a52 <setThreadState>
    0x8400831e    0x34    ld a5,96(sp)          ; stack access
    0x84008320    0x36    slli a0,a5,0x19
    0x84008324    0x3a    srli a0,a0,0x19
    0x84008326    0x3c    srli a5,a5,0x26
    0x84008328    0x3e    andi a5,a5,1
    0x8400832a    0x40    beqz a5,ffffffff84008332 <decodeSetTimeoutEndpoint+0x48>
    0x8400832c    0x42    li a5,-1
    0x8400832e    0x44    slli a5,a5,0x27
    0x84008330    0x46    or a0,a0,a5
    0x84008332    0x48    li a5,8
    0x84008334    0x4a    sd a5,80(sp)          ; stack access
    0x84008336    0x4c    sd zero,72(sp)        ; stack access
    0x84008338    0x4e    sd zero,56(sp)        ; stack access
    0x8400833a    0x50    sd zero,64(sp)        ; stack access
    0x8400833c    0x52    sd zero,48(sp)        ; stack access
    0x8400833e    0x54    sd zero,40(sp)        ; stack access
    0x84008340    0x56    sd zero,24(sp)        ; stack access
    0x84008342    0x58    sd zero,32(sp)        ; stack access
    0x84008344    0x5a    sd zero,16(sp)        ; stack access
    0x84008346    0x5c    sd zero,0(sp)         ; stack access
    0x84008348    0x5e    sd zero,8(sp)         ; stack access
    0x8400834a    0x60    mv a7,s0
    0x8400834c    0x62    ld a5,112(sp)         ; stack access
    0x8400834e    0x64    ld a6,120(sp)         ; stack access
    0x84008350    0x66    li a4,0
    0x84008352    0x68    li a2,0
    0x84008354    0x6a    li a3,0
    0x84008356    0x6c    mv a1,s1
    0x84008358    0x6e    jal ra,ffffffff84007f0c <invokeTCB_ThreadControlCaps>
    0x8400835c    0x72    ld ra,168(sp)         ; stack access
    0x8400835e    0x74    ld s0,160(sp)         ; stack access
    0x84008360    0x76    ld s1,152(sp)         ; stack access
    0x84008362    0x78    addi sp,sp,176
    0x84008364    0x7a    ret
    0x84008366    0x7c    li a5,1
    0x84008368    0x7e    auipc a4,0x5
    0x8400836c    0x82    sd a5,-1872(a4) # ffffffff8400cc18 <current_syscall_error+0x8>
    0x84008370    0x86    li a0,3
    0x84008372    0x88    j ffffffff8400835c <decodeSetTimeoutEndpoint+0x72>
    0x84008374    0x8a    li a0,3
    0x84008376    0x8c    j ffffffff8400835c <decodeSetTimeoutEndpoint+0x72>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetTimeoutEndpoint` has 100 nodes.

Section cteRevoke (233 of 292)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 55 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cteRevoke`:

    0x840073b4     0x0    addi sp,sp,-64
    0x840073b6     0x2    sd ra,56(sp)          ; stack access
    0x840073b8     0x4    sd s0,48(sp)          ; stack access
    0x840073ba     0x6    sd s1,40(sp)          ; stack access
    0x840073bc     0x8    sd s2,32(sp)          ; stack access
    0x840073be     0xa    sd s3,24(sp)          ; stack access
    0x840073c0     0xc    sd s4,16(sp)          ; stack access
    0x840073c2     0xe    sd s5,8(sp)           ; stack access
    0x840073c4    0x10    mv s1,a0
    0x840073c6    0x12    ld a4,24(a0)
    0x840073c8    0x14    lui a5,0xf8000
    0x840073cc    0x18    srli a5,a5,0x19
    0x840073ce    0x1a    and a0,a4,a5
    0x840073d2    0x1e    srli a4,a4,0x26
    0x840073d4    0x20    andi a4,a4,1
    0x840073d6    0x22    beqz a4,ffffffff8400741c <cteRevoke+0x68>
    0x840073d8    0x24    li s0,-1
    0x840073da    0x26    slli s0,s0,0x27
    0x840073dc    0x28    or s0,s0,a0
    0x840073de    0x2a    li s3,1
    0x840073e0    0x2c    lui s2,0xf8000
    0x840073e4    0x30    srli s2,s2,0x19
    0x840073e8    0x34    slli s5,s3,0x26
    0x840073ec    0x38    li s4,-1
    0x840073ee    0x3a    slli s4,s4,0x27
    0x840073f0    0x3c    mv a1,s0
    0x840073f2    0x3e    mv a0,s1
    0x840073f4    0x40    jal ra,ffffffff840043ee <isMDBParentOf>
    0x840073f8    0x44    beqz a0,ffffffff84007420 <cteRevoke+0x6c>
    0x840073fa    0x46    mv a1,s3
    0x840073fc    0x48    mv a0,s0
    0x840073fe    0x4a    jal ra,ffffffff840071e4 <cteDelete>
    0x84007402    0x4e    bnez a0,ffffffff84007420 <cteRevoke+0x6c>
    0x84007404    0x50    jal ra,ffffffff84007118 <preemptionPoint>
    0x84007408    0x54    bnez a0,ffffffff84007420 <cteRevoke+0x6c>
    0x8400740a    0x56    ld a5,24(s1)
    0x8400740c    0x58    and a0,a5,s2
    0x84007410    0x5c    and a5,a5,s5
    0x84007414    0x60    beqz a5,ffffffff84007432 <cteRevoke+0x7e>
    0x84007416    0x62    or s0,a0,s4
    0x8400741a    0x66    j ffffffff840073f0 <cteRevoke+0x3c>
    0x8400741c    0x68    mv s0,a0
    0x8400741e    0x6a    bnez a0,ffffffff840073de <cteRevoke+0x2a>
    0x84007420    0x6c    ld ra,56(sp)          ; stack access
    0x84007422    0x6e    ld s0,48(sp)          ; stack access
    0x84007424    0x70    ld s1,40(sp)          ; stack access
    0x84007426    0x72    ld s2,32(sp)          ; stack access
    0x84007428    0x74    ld s3,24(sp)          ; stack access
    0x8400742a    0x76    ld s4,16(sp)          ; stack access
    0x8400742c    0x78    ld s5,8(sp)           ; stack access
    0x8400742e    0x7a    addi sp,sp,64
    0x84007430    0x7c    ret
    0x84007432    0x7e    beqz a0,ffffffff84007420 <cteRevoke+0x6c>
    0x84007434    0x80    mv s0,a0
    0x84007436    0x82    j ffffffff840073f0 <cteRevoke+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 89 nodes.

Section chargeBudget (234 of 292)
=================================

Deriving specifications
-----------------------

Section `chargeBudget` consists of 63 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `chargeBudget`:

    0x84006f86     0x0    addi sp,sp,-32
    0x84006f88     0x2    sd ra,24(sp)          ; stack access
    0x84006f8a     0x4    sd s0,16(sp)          ; stack access
    0x84006f8c     0x6    sd s1,8(sp)           ; stack access
    0x84006f8e     0x8    sd s2,0(sp)           ; stack access
    0x84006f90     0xa    mv s0,a0
    0x84006f92     0xc    mv s2,a1
    0x84006f94     0xe    mv s1,a3
    0x84006f96    0x10    auipc a4,0x18
    0x84006f9a    0x14    ld a4,146(a4) # ffffffff8401f028 <ksCurSC>
    0x84006f9e    0x18    ld a5,0(a4)
    0x84006fa0    0x1a    bnez a5,ffffffff84007024 <chargeBudget+0x9e>
    0x84006fa2    0x1c    addi a3,a4,88
    0x84006fa6    0x20    ld a5,72(a4)
    0x84006fa8    0x22    slli a5,a5,0x4
    0x84006faa    0x24    add a5,a5,a3
    0x84006fac    0x26    ld a2,80(a4)
    0x84006fae    0x28    slli a2,a2,0x4
    0x84006fb0    0x2a    add a2,a2,a3
    0x84006fb2    0x2c    ld a1,8(a5)
    0x84006fb4    0x2e    ld a2,8(a2)
    0x84006fb6    0x30    add a2,a2,a1
    0x84006fb8    0x32    sd a2,8(a5)
    0x84006fba    0x34    ld a5,80(a4)
    0x84006fbc    0x36    slli a5,a5,0x4
    0x84006fbe    0x38    add a5,a5,a3
    0x84006fc0    0x3a    sd zero,8(a5)
    0x84006fc4    0x3e    auipc a5,0x18
    0x84006fc8    0x42    ld a5,100(a5) # ffffffff8401f028 <ksCurSC>
    0x84006fcc    0x46    ld a0,8(a5)
    0x84006fce    0x48    add s0,s0,a0
    0x84006fd0    0x4a    sd s0,8(a5)
    0x84006fd2    0x4c    auipc a5,0x18
    0x84006fd6    0x50    sd zero,110(a5) # ffffffff8401f040 <ksConsumed>
    0x84006fda    0x54    beqz s1,ffffffff84007018 <chargeBudget+0x92>
    0x84006fdc    0x56    auipc a4,0x18
    0x84006fe0    0x5a    ld a4,124(a4) # ffffffff8401f058 <ksCurThread>
    0x84006fe4    0x5e    ld a5,280(a4)
    0x84006fe8    0x62    andi a5,a5,15
    0x84006fea    0x64    addi a5,a5,-1
    0x84006fec    0x66    li a3,1
    0x84006fee    0x68    bltu a3,a5,ffffffff84007018 <chargeBudget+0x92>
    0x84006ff2    0x6c    ld a5,368(a4)
    0x84006ff6    0x70    beqz a5,ffffffff84007018 <chargeBudget+0x92>
    0x84006ff8    0x72    ld a5,64(a5)
    0x84006ffa    0x74    beqz a5,ffffffff84007018 <chargeBudget+0x92>
    0x84006ffc    0x76    ld a5,288(a4)
    0x84007000    0x7a    andi a5,a5,1
    0x84007002    0x7c    bnez a5,ffffffff84007018 <chargeBudget+0x92>
    0x84007004    0x7e    mv a0,s2
    0x84007006    0x80    jal ra,ffffffff84006f02 <endTimeslice>
    0x8400700a    0x84    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x8400700e    0x88    li a5,1
    0x84007010    0x8a    auipc a4,0x18
    0x84007014    0x8e    sd a5,40(a4) # ffffffff8401f038 <ksReprogram>
    0x84007018    0x92    ld ra,24(sp)          ; stack access
    0x8400701a    0x94    ld s0,16(sp)          ; stack access
    0x8400701c    0x96    ld s1,8(sp)           ; stack access
    0x8400701e    0x98    ld s2,0(sp)           ; stack access
    0x84007020    0x9a    addi sp,sp,32
    0x84007022    0x9c    ret
    0x84007024    0x9e    jal ra,ffffffff84003850 <refill_budget_check>
    0x84007028    0xa2    j ffffffff84006fc4 <chargeBudget+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chargeBudget` has 106 nodes.

Section endTimeslice (235 of 292)
=================================

Deriving specifications
-----------------------

Section `endTimeslice` consists of 44 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `endTimeslice`:

    0x84006f02     0x0    addi sp,sp,-16
    0x84006f04     0x2    sd ra,8(sp)           ; stack access
    0x84006f06     0x4    beqz a0,ffffffff84006f2a <endTimeslice+0x28>
    0x84006f08     0x6    auipc a5,0x18
    0x84006f0c     0xa    ld a5,288(a5) # ffffffff8401f028 <ksCurSC>
    0x84006f10     0xe    ld a4,0(a5)
    0x84006f12    0x10    beqz a4,ffffffff84006f2a <endTimeslice+0x28>
    0x84006f14    0x12    auipc a0,0x18
    0x84006f18    0x16    ld a0,324(a0) # ffffffff8401f058 <ksCurThread>
    0x84006f1c    0x1a    andi a4,a0,-1024
    0x84006f20    0x1e    ld a4,128(a4)
    0x84006f22    0x20    srli a4,a4,0x3b
    0x84006f24    0x22    li a3,4
    0x84006f26    0x24    beq a4,a3,ffffffff84006f5e <endTimeslice+0x5c>
    0x84006f2a    0x28    auipc a0,0x18
    0x84006f2e    0x2c    ld a0,254(a0) # ffffffff8401f028 <ksCurSC>
    0x84006f32    0x30    ld a5,72(a0)
    0x84006f34    0x32    slli a5,a5,0x4
    0x84006f36    0x34    addi a4,a0,88
    0x84006f3a    0x38    add a5,a5,a4
    0x84006f3c    0x3a    auipc a4,0x18
    0x84006f40    0x3e    ld a4,244(a4) # ffffffff8401f030 <ksCurTime>
    0x84006f44    0x42    addi a4,a4,10
    0x84006f46    0x44    ld a3,0(a5)
    0x84006f48    0x46    bltu a4,a3,ffffffff84006f54 <endTimeslice+0x52>
    0x84006f4c    0x4a    ld a4,8(a5)
    0x84006f4e    0x4c    li a5,19
    0x84006f50    0x4e    bltu a5,a4,ffffffff84006f78 <endTimeslice+0x76>
    0x84006f54    0x52    jal ra,ffffffff84005c74 <postpone>
    0x84006f58    0x56    ld ra,8(sp)           ; stack access
    0x84006f5a    0x58    addi sp,sp,16
    0x84006f5c    0x5a    ret
    0x84006f5e    0x5c    ld a4,48(a5)
    0x84006f60    0x5e    auipc a5,0x6
    0x84006f64    0x62    addi a5,a5,-1888 # ffffffff8400c800 <riscvKSASIDTable>
    0x84006f68    0x66    li a3,5
    0x84006f6a    0x68    sd a3,1096(a5)
    0x84006f6e    0x6c    sd a4,1104(a5)
    0x84006f72    0x70    jal ra,ffffffff84006eea <handleTimeout>
    0x84006f76    0x74    j ffffffff84006f58 <endTimeslice+0x56>
    0x84006f78    0x76    auipc a0,0x18
    0x84006f7c    0x7a    ld a0,224(a0) # ffffffff8401f058 <ksCurThread>
    0x84006f80    0x7e    jal ra,ffffffff84004e60 <tcbSchedAppend>
    0x84006f84    0x82    j ffffffff84006f58 <endTimeslice+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `endTimeslice` has 73 nodes.

Section doIPCTransfer (236 of 292)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 46 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `doIPCTransfer`:

    0x84006bda     0x0    addi sp,sp,-64
    0x84006bdc     0x2    sd ra,56(sp)          ; stack access
    0x84006bde     0x4    sd s0,48(sp)          ; stack access
    0x84006be0     0x6    sd s1,40(sp)          ; stack access
    0x84006be2     0x8    sd s2,32(sp)          ; stack access
    0x84006be4     0xa    sd s3,24(sp)          ; stack access
    0x84006be6     0xc    sd s4,16(sp)          ; stack access
    0x84006be8     0xe    sd s5,8(sp)           ; stack access
    0x84006bea    0x10    mv s0,a0
    0x84006bec    0x12    mv s5,a1
    0x84006bee    0x14    mv s2,a2
    0x84006bf0    0x16    mv s4,a3
    0x84006bf2    0x18    mv s1,a4
    0x84006bf4    0x1a    mv a1,a4
    0x84006bf6    0x1c    li a0,1
    0x84006bf8    0x1e    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x84006bfc    0x22    mv s3,a0
    0x84006bfe    0x24    ld a5,312(s0)
    0x84006c02    0x28    andi a5,a5,15
    0x84006c04    0x2a    bnez a5,ffffffff84006c32 <doIPCTransfer+0x58>
    0x84006c06    0x2c    mv a1,s0
    0x84006c08    0x2e    li a0,0
    0x84006c0a    0x30    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x84006c0e    0x34    mv a1,a0
    0x84006c10    0x36    mv a6,s3
    0x84006c12    0x38    mv a5,s1
    0x84006c14    0x3a    mv a4,s4
    0x84006c16    0x3c    mv a3,s2
    0x84006c18    0x3e    mv a2,s5
    0x84006c1a    0x40    mv a0,s0
    0x84006c1c    0x42    jal ra,ffffffff84006a5c <doNormalTransfer>
    0x84006c20    0x46    ld ra,56(sp)          ; stack access
    0x84006c22    0x48    ld s0,48(sp)          ; stack access
    0x84006c24    0x4a    ld s1,40(sp)          ; stack access
    0x84006c26    0x4c    ld s2,32(sp)          ; stack access
    0x84006c28    0x4e    ld s3,24(sp)          ; stack access
    0x84006c2a    0x50    ld s4,16(sp)          ; stack access
    0x84006c2c    0x52    ld s5,8(sp)           ; stack access
    0x84006c2e    0x54    addi sp,sp,64
    0x84006c30    0x56    ret
    0x84006c32    0x58    mv a3,a0
    0x84006c34    0x5a    mv a2,s1
    0x84006c36    0x5c    mv a1,s0
    0x84006c38    0x5e    mv a0,s2
    0x84006c3a    0x60    jal ra,ffffffff8400489c <doFaultTransfer>
    0x84006c3e    0x64    j ffffffff84006c20 <doIPCTransfer+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 68 nodes.

Section schedContext_bindTCB (237 of 292)
=========================================

Deriving specifications
-----------------------

Section `schedContext_bindTCB` consists of 27 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_bindTCB`:

    0x84005d4e     0x0    addi sp,sp,-16
    0x84005d50     0x2    sd ra,8(sp)           ; stack access
    0x84005d52     0x4    sd s0,0(sp)           ; stack access
    0x84005d54     0x6    mv s0,a1
    0x84005d56     0x8    sd a0,368(a1) # ffffffffe0000170 <ki_end+0x5bfdc170>
    0x84005d5a     0xc    sd a1,24(a0)
    0x84005d5c     0xe    jal ra,ffffffff84005c9a <schedContext_resume>
    0x84005d60    0x12    ld a5,280(s0)
    0x84005d64    0x16    andi a5,a5,15
    0x84005d66    0x18    addi a5,a5,-1
    0x84005d68    0x1a    li a4,1
    0x84005d6a    0x1c    bgeu a4,a5,ffffffff84005d76 <schedContext_bindTCB+0x28>
    0x84005d6e    0x20    ld ra,8(sp)           ; stack access
    0x84005d70    0x22    ld s0,0(sp)           ; stack access
    0x84005d72    0x24    addi sp,sp,16
    0x84005d74    0x26    ret
    0x84005d76    0x28    ld a5,368(s0)
    0x84005d7a    0x2c    beqz a5,ffffffff84005d6e <schedContext_bindTCB+0x20>
    0x84005d7c    0x2e    ld a5,64(a5)
    0x84005d7e    0x30    beqz a5,ffffffff84005d6e <schedContext_bindTCB+0x20>
    0x84005d80    0x32    ld a5,288(s0)
    0x84005d84    0x36    andi a5,a5,1
    0x84005d86    0x38    bnez a5,ffffffff84005d6e <schedContext_bindTCB+0x20>
    0x84005d88    0x3a    mv a0,s0
    0x84005d8a    0x3c    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x84005d8e    0x40    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84005d92    0x44    j ffffffff84005d6e <schedContext_bindTCB+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_bindTCB` has 49 nodes.

Section decodeIRQHandlerInvocation (238 of 292)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 73 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x84005b1a     0x0    addi sp,sp,-48
    0x84005b1c     0x2    sd ra,40(sp)          ; stack access
    0x84005b1e     0x4    sd s0,32(sp)          ; stack access
    0x84005b20     0x6    sd s1,24(sp)          ; stack access
    0x84005b22     0x8    mv s0,a1
    0x84005b24     0xa    li a5,27
    0x84005b26     0xc    beq a0,a5,ffffffff84005b68 <decodeIRQHandlerInvocation+0x4e>
    0x84005b2a    0x10    li a5,28
    0x84005b2c    0x12    beq a0,a5,ffffffff84005bcc <decodeIRQHandlerInvocation+0xb2>
    0x84005b30    0x16    li a5,26
    0x84005b32    0x18    beq a0,a5,ffffffff84005b44 <decodeIRQHandlerInvocation+0x2a>
    0x84005b36    0x1c    li a5,3
    0x84005b38    0x1e    auipc a4,0x7
    0x84005b3c    0x22    sd a5,264(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005b40    0x26    li a0,3
    0x84005b42    0x28    j ffffffff84005b5e <decodeIRQHandlerInvocation+0x44>
    0x84005b44    0x2a    li a1,2
    0x84005b46    0x2c    auipc a0,0x19
    0x84005b4a    0x30    ld a0,1298(a0) # ffffffff8401f058 <ksCurThread>
    0x84005b4e    0x34    jal ra,ffffffff84004a52 <setThreadState>
    0x84005b52    0x38    sext.w a1,s0
    0x84005b56    0x3c    lui a5,0xcc202
    0x84005b5a    0x40    sw a1,4(a5)
    0x84005b5c    0x42    li a0,0
    0x84005b5e    0x44    ld ra,40(sp)          ; stack access
    0x84005b60    0x46    ld s0,32(sp)          ; stack access
    0x84005b62    0x48    ld s1,24(sp)          ; stack access
    0x84005b64    0x4a    addi sp,sp,48
    0x84005b66    0x4c    ret
    0x84005b68    0x4e    auipc s1,0x7
    0x84005b6c    0x52    ld s1,1320(s1) # ffffffff8400d090 <current_extra_caps>
    0x84005b70    0x56    beqz s1,ffffffff84005ba0 <decodeIRQHandlerInvocation+0x86>
    0x84005b72    0x58    ld a5,0(s1)
    0x84005b74    0x5a    sd a5,0(sp)           ; stack access
    0x84005b76    0x5c    ld a4,8(s1)
    0x84005b78    0x5e    sd a4,8(sp)           ; stack access
    0x84005b7a    0x60    srli a3,a5,0x3b
    0x84005b7e    0x64    li a4,6
    0x84005b80    0x66    bne a3,a4,ffffffff84005b8a <decodeIRQHandlerInvocation+0x70>
    0x84005b84    0x6a    srli a5,a5,0x39
    0x84005b86    0x6c    andi a5,a5,1
    0x84005b88    0x6e    bnez a5,ffffffff84005bae <decodeIRQHandlerInvocation+0x94>
    0x84005b8a    0x70    auipc a5,0x7
    0x84005b8e    0x74    addi a5,a5,-906 # ffffffff8400c800 <riscvKSASIDTable>
    0x84005b92    0x78    li a4,2
    0x84005b94    0x7a    sd a4,1088(a5)
    0x84005b98    0x7e    sd zero,1048(a5)
    0x84005b9c    0x82    li a0,3
    0x84005b9e    0x84    j ffffffff84005b5e <decodeIRQHandlerInvocation+0x44>
    0x84005ba0    0x86    li a5,7
    0x84005ba2    0x88    auipc a4,0x7
    0x84005ba6    0x8c    sd a5,158(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005baa    0x90    li a0,3
    0x84005bac    0x92    j ffffffff84005b5e <decodeIRQHandlerInvocation+0x44>
    0x84005bae    0x94    li a1,2
    0x84005bb0    0x96    auipc a0,0x19
    0x84005bb4    0x9a    ld a0,1192(a0) # ffffffff8401f058 <ksCurThread>
    0x84005bb8    0x9e    jal ra,ffffffff84004a52 <setThreadState>
    0x84005bbc    0xa2    mv a3,s1
    0x84005bbe    0xa4    ld a1,0(sp)           ; stack access
    0x84005bc0    0xa6    ld a2,8(sp)           ; stack access
    0x84005bc2    0xa8    mv a0,s0
    0x84005bc4    0xaa    jal ra,ffffffff84005aca <invokeIRQHandler_SetIRQHandler>
    0x84005bc8    0xae    li a0,0
    0x84005bca    0xb0    j ffffffff84005b5e <decodeIRQHandlerInvocation+0x44>
    0x84005bcc    0xb2    li a1,2
    0x84005bce    0xb4    auipc a0,0x19
    0x84005bd2    0xb8    ld a0,1162(a0) # ffffffff8401f058 <ksCurThread>
    0x84005bd6    0xbc    jal ra,ffffffff84004a52 <setThreadState>
    0x84005bda    0xc0    mv a0,s0
    0x84005bdc    0xc2    jal ra,ffffffff84005b00 <invokeIRQHandler_ClearIRQHandler>
    0x84005be0    0xc6    li a0,0
    0x84005be2    0xc8    j ffffffff84005b5e <decodeIRQHandlerInvocation+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 112 nodes.

Section cteDeleteOne (239 of 292)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 23 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteDeleteOne`:

    0x84005a96     0x0    ld a5,0(a0)
    0x84005a98     0x2    srli a5,a5,0x3b
    0x84005a9a     0x4    bnez a5,ffffffff84005a9e <cteDeleteOne+0x8>
    0x84005a9c     0x6    ret
    0x84005a9e     0x8    addi sp,sp,-64
    0x84005aa0     0xa    sd ra,56(sp)          ; stack access
    0x84005aa2     0xc    sd s0,48(sp)          ; stack access
    0x84005aa4     0xe    mv s0,a0
    0x84005aa6    0x10    jal ra,ffffffff84004568 <isFinalCapability>
    0x84005aaa    0x14    mv a3,a0
    0x84005aac    0x16    li a4,1
    0x84005aae    0x18    ld a1,0(s0)
    0x84005ab0    0x1a    ld a2,8(s0)
    0x84005ab2    0x1c    mv a0,sp
    0x84005ab4    0x1e    jal ra,ffffffff84005804 <finaliseCap>
    0x84005ab8    0x22    li a1,0
    0x84005aba    0x24    li a2,0
    0x84005abc    0x26    mv a0,s0
    0x84005abe    0x28    jal ra,ffffffff84003f12 <emptySlot>
    0x84005ac2    0x2c    ld ra,56(sp)          ; stack access
    0x84005ac4    0x2e    ld s0,48(sp)          ; stack access
    0x84005ac6    0x30    addi sp,sp,64
    0x84005ac8    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 37 nodes.

Section schedContext_unbindTCB (240 of 292)
===========================================

Deriving specifications
-----------------------

Section `schedContext_unbindTCB` consists of 20 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_unbindTCB`:

    0x840057b8     0x0    addi sp,sp,-16
    0x840057ba     0x2    sd ra,8(sp)           ; stack access
    0x840057bc     0x4    sd s0,0(sp)           ; stack access
    0x840057be     0x6    mv s0,a0
    0x840057c0     0x8    auipc a5,0x1a
    0x840057c4     0xc    ld a5,-1896(a5) # ffffffff8401f058 <ksCurThread>
    0x840057c8    0x10    beq a5,a1,ffffffff840057ea <schedContext_unbindTCB+0x32>
    0x840057cc    0x14    ld a0,24(s0)
    0x840057ce    0x16    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x840057d2    0x1a    ld a0,24(s0)
    0x840057d4    0x1c    jal ra,ffffffff84005724 <tcbReleaseRemove>
    0x840057d8    0x20    ld a5,24(s0)
    0x840057da    0x22    sd zero,368(a5)
    0x840057de    0x26    sd zero,24(s0)
    0x840057e2    0x2a    ld ra,8(sp)           ; stack access
    0x840057e4    0x2c    ld s0,0(sp)           ; stack access
    0x840057e6    0x2e    addi sp,sp,16
    0x840057e8    0x30    ret
    0x840057ea    0x32    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x840057ee    0x36    j ffffffff840057cc <schedContext_unbindTCB+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindTCB` has 36 nodes.

Section setDomain (241 of 292)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 33 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setDomain`:

    0x84004ffa     0x0    addi sp,sp,-32
    0x84004ffc     0x2    sd ra,24(sp)          ; stack access
    0x84004ffe     0x4    sd s0,16(sp)          ; stack access
    0x84005000     0x6    sd s1,8(sp)           ; stack access
    0x84005002     0x8    mv s0,a0
    0x84005004     0xa    mv s1,a1
    0x84005006     0xc    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x8400500a    0x10    sd s1,344(s0)
    0x8400500e    0x14    ld a5,280(s0)
    0x84005012    0x18    andi a5,a5,15
    0x84005014    0x1a    addi a5,a5,-1
    0x84005016    0x1c    li a4,1
    0x84005018    0x1e    bgeu a4,a5,ffffffff84005032 <setDomain+0x38>
    0x8400501c    0x22    auipc a5,0x1a
    0x84005020    0x26    ld a5,60(a5) # ffffffff8401f058 <ksCurThread>
    0x84005024    0x2a    beq a5,s0,ffffffff8400504c <setDomain+0x52>
    0x84005028    0x2e    ld ra,24(sp)          ; stack access
    0x8400502a    0x30    ld s0,16(sp)          ; stack access
    0x8400502c    0x32    ld s1,8(sp)           ; stack access
    0x8400502e    0x34    addi sp,sp,32
    0x84005030    0x36    ret
    0x84005032    0x38    ld a5,368(s0)
    0x84005036    0x3c    beqz a5,ffffffff8400501c <setDomain+0x22>
    0x84005038    0x3e    ld a5,64(a5)
    0x8400503a    0x40    beqz a5,ffffffff8400501c <setDomain+0x22>
    0x8400503c    0x42    ld a5,288(s0)
    0x84005040    0x46    andi a5,a5,1
    0x84005042    0x48    bnez a5,ffffffff8400501c <setDomain+0x22>
    0x84005044    0x4a    mv a0,s0
    0x84005046    0x4c    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x8400504a    0x50    j ffffffff8400501c <setDomain+0x22>
    0x8400504c    0x52    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84005050    0x56    j ffffffff84005028 <setDomain+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
33 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 59 nodes.

Section cancelAllSignals (242 of 292)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 44 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllSignals`:

    0x84004df4     0x0    ld a5,0(a0)
    0x84004df6     0x2    andi a3,a5,3
    0x84004dfa     0x6    li a4,1
    0x84004dfc     0x8    beq a3,a4,ffffffff84004e02 <cancelAllSignals+0xe>
    0x84004e00     0xc    ret
    0x84004e02     0xe    addi sp,sp,-16
    0x84004e04    0x10    sd ra,8(sp)           ; stack access
    0x84004e06    0x12    sd s0,0(sp)           ; stack access
    0x84004e08    0x14    ld a4,8(a0)
    0x84004e0a    0x16    slli s0,a4,0x19
    0x84004e0e    0x1a    srli s0,s0,0x19
    0x84004e10    0x1c    srli a3,a4,0x26
    0x84004e14    0x20    andi a3,a3,1
    0x84004e16    0x22    beqz a3,ffffffff84004e4c <cancelAllSignals+0x58>
    0x84004e18    0x24    li a3,-1
    0x84004e1a    0x26    slli a3,a3,0x27
    0x84004e1c    0x28    or s0,s0,a3
    0x84004e1e    0x2a    and a4,a4,a3
    0x84004e20    0x2c    sd a4,8(a0)
    0x84004e22    0x2e    lui a4,0x2000
    0x84004e26    0x32    addi a4,a4,-4
    0x84004e28    0x34    and a5,a5,a4
    0x84004e2a    0x36    sd a5,0(a0)
    0x84004e2c    0x38    li a1,2
    0x84004e2e    0x3a    mv a0,s0
    0x84004e30    0x3c    jal ra,ffffffff84004a52 <setThreadState>
    0x84004e34    0x40    mv a0,s0
    0x84004e36    0x42    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x84004e3a    0x46    ld s0,408(s0)
    0x84004e3e    0x4a    bnez s0,ffffffff84004e2c <cancelAllSignals+0x38>
    0x84004e40    0x4c    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84004e44    0x50    ld ra,8(sp)           ; stack access
    0x84004e46    0x52    ld s0,0(sp)           ; stack access
    0x84004e48    0x54    addi sp,sp,16
    0x84004e4a    0x56    ret
    0x84004e4c    0x58    srli a4,a4,0x27
    0x84004e4e    0x5a    slli a4,a4,0x27
    0x84004e50    0x5c    sd a4,8(a0)
    0x84004e52    0x5e    lui a4,0x2000
    0x84004e56    0x62    addi a4,a4,-4
    0x84004e58    0x64    and a5,a5,a4
    0x84004e5a    0x66    sd a5,0(a0)
    0x84004e5c    0x68    beqz s0,ffffffff84004e40 <cancelAllSignals+0x4c>
    0x84004e5e    0x6a    j ffffffff84004e2c <cancelAllSignals+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 68 nodes.

Section cancelAllIPC (243 of 292)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 64 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `cancelAllIPC`:

    0x84004d4e     0x0    ld a5,0(a0)
    0x84004d50     0x2    andi a4,a5,3
    0x84004d54     0x6    beqz a4,ffffffff84004df2 <cancelAllIPC+0xa4>
    0x84004d56     0x8    addi sp,sp,-48
    0x84004d58     0xa    sd ra,40(sp)          ; stack access
    0x84004d5a     0xc    sd s0,32(sp)          ; stack access
    0x84004d5c     0xe    sd s1,24(sp)          ; stack access
    0x84004d5e    0x10    sd s2,16(sp)          ; stack access
    0x84004d60    0x12    sd s3,8(sp)           ; stack access
    0x84004d62    0x14    sd s4,0(sp)           ; stack access
    0x84004d64    0x16    ld s0,8(a0)
    0x84004d66    0x18    sd zero,8(a0)
    0x84004d6a    0x1c    srli a5,a5,0x27
    0x84004d6c    0x1e    slli a5,a5,0x27
    0x84004d6e    0x20    sd a5,0(a0)
    0x84004d70    0x22    beqz s0,ffffffff84004dde <cancelAllIPC+0x90>
    0x84004d72    0x24    lui s3,0xe0000
    0x84004d76    0x28    srli s3,s3,0x19
    0x84004d7a    0x2c    li s2,1
    0x84004d7c    0x2e    slli s2,s2,0x26
    0x84004d7e    0x30    li s1,-1
    0x84004d80    0x32    slli s4,s1,0x28
    0x84004d84    0x36    addi s4,s4,31
    0x84004d86    0x38    slli s1,s1,0x27
    0x84004d88    0x3a    j ffffffff84004da8 <cancelAllIPC+0x5a>
    0x84004d8a    0x3c    bnez a4,ffffffff84004dba <cancelAllIPC+0x6c>
    0x84004d8c    0x3e    ld a5,312(s0)
    0x84004d90    0x42    andi a5,a5,15
    0x84004d92    0x44    bnez a5,ffffffff84004dd4 <cancelAllIPC+0x86>
    0x84004d94    0x46    li a1,2
    0x84004d96    0x48    mv a0,s0
    0x84004d98    0x4a    jal ra,ffffffff84004a52 <setThreadState>
    0x84004d9c    0x4e    mv a0,s0
    0x84004d9e    0x50    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x84004da2    0x54    ld s0,408(s0)
    0x84004da6    0x58    beqz s0,ffffffff84004dde <cancelAllIPC+0x90>
    0x84004da8    0x5a    ld a5,288(s0)
    0x84004dac    0x5e    srli a5,a5,0x1
    0x84004dae    0x60    and a4,a5,s3
    0x84004db2    0x64    and a5,a5,s2
    0x84004db6    0x68    beqz a5,ffffffff84004d8a <cancelAllIPC+0x3c>
    0x84004db8    0x6a    or a4,a4,s1
    0x84004dba    0x6c    ld a0,0(a4)
    0x84004dbc    0x6e    ld a5,288(a0)
    0x84004dc0    0x72    and a5,a5,s4
    0x84004dc4    0x76    sd a5,288(a0)
    0x84004dc8    0x7a    sd zero,0(a4)
    0x84004dcc    0x7e    li a1,0
    0x84004dce    0x80    jal ra,ffffffff84004a52 <setThreadState>
    0x84004dd2    0x84    j ffffffff84004d8c <cancelAllIPC+0x3e>
    0x84004dd4    0x86    li a1,0
    0x84004dd6    0x88    mv a0,s0
    0x84004dd8    0x8a    jal ra,ffffffff84004a52 <setThreadState>
    0x84004ddc    0x8e    j ffffffff84004da2 <cancelAllIPC+0x54>
    0x84004dde    0x90    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84004de2    0x94    ld ra,40(sp)          ; stack access
    0x84004de4    0x96    ld s0,32(sp)          ; stack access
    0x84004de6    0x98    ld s1,24(sp)          ; stack access
    0x84004de8    0x9a    ld s2,16(sp)          ; stack access
    0x84004dea    0x9c    ld s3,8(sp)           ; stack access
    0x84004dec    0x9e    ld s4,0(sp)           ; stack access
    0x84004dee    0xa0    addi sp,sp,48
    0x84004df0    0xa2    ret
    0x84004df2    0xa4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 106 nodes.

Section activateThread (244 of 292)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 26 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `activateThread`:

    0x84004b44     0x0    addi sp,sp,-16
    0x84004b46     0x2    sd ra,8(sp)           ; stack access
    0x84004b48     0x4    auipc a0,0x1a
    0x84004b4c     0x8    ld a0,1296(a0) # ffffffff8401f058 <ksCurThread>
    0x84004b50     0xc    ld a5,376(a0)
    0x84004b54    0x10    bnez a5,ffffffff84004b7a <activateThread+0x36>
    0x84004b56    0x12    auipc a0,0x1a
    0x84004b5a    0x16    ld a0,1282(a0) # ffffffff8401f058 <ksCurThread>
    0x84004b5e    0x1a    ld a5,280(a0)
    0x84004b62    0x1e    andi a5,a5,15
    0x84004b64    0x20    li a4,2
    0x84004b66    0x22    beq a5,a4,ffffffff84004b80 <activateThread+0x3c>
    0x84004b6a    0x26    li a4,7
    0x84004b6c    0x28    beq a5,a4,ffffffff84004b8e <activateThread+0x4a>
    0x84004b70    0x2c    li a4,1
    0x84004b72    0x2e    beq a5,a4,ffffffff84004b8e <activateThread+0x4a>
    0x84004b76    0x32    jal ra,ffffffff84002424 <halt>
    0x84004b7a    0x36    jal ra,ffffffff840048ea <schedContext_completeYieldTo>
    0x84004b7e    0x3a    j ffffffff84004b56 <activateThread+0x12>
    0x84004b80    0x3c    ld a5,264(a0)
    0x84004b84    0x40    sd a5,272(a0)
    0x84004b88    0x44    li a1,1
    0x84004b8a    0x46    jal ra,ffffffff84004a52 <setThreadState>
    0x84004b8e    0x4a    ld ra,8(sp)           ; stack access
    0x84004b90    0x4c    addi sp,sp,16
    0x84004b92    0x4e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 46 nodes.

Section sameRegionAs (245 of 292)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 340 instructions.
Switch found.
Switch found.

RVC_FTTFFT___FFFT_FT.Switch found.


Stack analysis
---------------

22 stack accesses found. Annotated code for `sameRegionAs`:

    0x84004066      0x0    addi sp,sp,-80
    0x84004068      0x2    sd ra,72(sp)          ; stack access
    0x8400406a      0x4    sd s0,64(sp)          ; stack access
    0x8400406c      0x6    sd s1,56(sp)          ; stack access
    0x8400406e      0x8    sd s2,48(sp)          ; stack access
    0x84004070      0xa    sd s3,40(sp)          ; stack access
    0x84004072      0xc    sd s4,32(sp)          ; stack access
    0x84004074      0xe    sd a0,16(sp)          ; stack access
    0x84004076     0x10    sd a1,24(sp)          ; stack access
    0x84004078     0x12    sd a2,0(sp)           ; stack access
    0x8400407a     0x14    sd a3,8(sp)           ; stack access
    0x8400407c     0x16    mv s0,a2
    0x8400407e     0x18    srli a5,a0,0x3b
    0x84004082     0x1c    li a4,24
    0x84004084     0x1e    bltu a4,a5,ffffffff840043ce <sameRegionAs+0x368>
    0x84004088     0x22    mv s2,a1
    0x8400408a     0x24    mv s1,a3
    0x8400408c     0x26    mv a2,a0
    0x8400408e     0x28    slli a3,a5,0x2
    0x84004092     0x2c    auipc a1,0x8
    0x84004096     0x30    addi a1,a1,-1370 # ffffffff8400bb38 <msgRegisters+0x190>
    0x8400409a     0x34    add a3,a3,a1
    0x8400409c     0x36    lw a4,0(a3)
    0x8400409e     0x38    add a4,a4,a1
    0x840040a0     0x3a    jr a4
    0x840040a2     0x3c    srli s3,s0,0x3b
    0x840040a6     0x40    li a5,24
    0x840040a8     0x42    bltu a5,s3,ffffffff840040c0 <sameRegionAs+0x5a>
    0x840040ac     0x46    slli a4,s3,0x2
    0x840040b0     0x4a    auipc a3,0x8
    0x840040b4     0x4e    addi a3,a3,-1300 # ffffffff8400bb9c <msgRegisters+0x1f4>
    0x840040b8     0x52    add a4,a4,a3
    0x840040ba     0x54    lw a5,0(a4)
    0x840040bc     0x56    add a5,a5,a3
    0x840040be     0x58    jr a5
    0x840040c0     0x5a    li a5,13
    0x840040c2     0x5c    bltu a5,s3,ffffffff840040d8 <sameRegionAs+0x72>
    0x840040c6     0x60    li a4,1
    0x840040c8     0x62    sll a4,a4,s3
    0x840040cc     0x66    lui a0,0x2
    0x840040ce     0x68    addi a0,a0,10
    0x840040d0     0x6a    and a4,a4,a0
    0x840040d2     0x6c    snez a0,a4
    0x840040d6     0x70    j ffffffff840040de <sameRegionAs+0x78>
    0x840040d8     0x72    li a0,0
    0x840040da     0x74    j ffffffff840040de <sameRegionAs+0x78>
    0x840040dc     0x76    li a0,1
    0x840040de     0x78    beqz a0,ffffffff8400431e <sameRegionAs+0x2b8>
    0x840040e2     0x7c    slli s4,a2,0x19
    0x840040e6     0x80    srli s4,s4,0x19
    0x840040ea     0x84    srli a2,a2,0x26
    0x840040ec     0x86    andi a2,a2,1
    0x840040ee     0x88    beqz a2,ffffffff840040f8 <sameRegionAs+0x92>
    0x840040f0     0x8a    li a5,-1
    0x840040f2     0x8c    slli a5,a5,0x27
    0x840040f4     0x8e    or s4,s4,a5
    0x840040f8     0x92    ld a0,0(sp)           ; stack access
    0x840040fa     0x94    ld a1,8(sp)           ; stack access
    0x840040fc     0x96    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84004100     0x9a    mv a4,a0
    0x84004102     0x9c    li a5,24
    0x84004104     0x9e    bltu a5,s3,ffffffff84004192 <sameRegionAs+0x12c>
    0x84004108     0xa2    slli a3,s3,0x2
    0x8400410c     0xa6    auipc a2,0x8
    0x84004110     0xaa    addi a2,a2,-1292 # ffffffff8400bc00 <msgRegisters+0x258>
    0x84004114     0xae    add a3,a3,a2
    0x84004116     0xb0    lw a5,0(a3)
    0x84004118     0xb2    add a5,a5,a2
    0x8400411a     0xb4    jr a5
    0x8400411c     0xb6    li a5,6
    0x8400411e     0xb8    j ffffffff84004124 <sameRegionAs+0xbe>
    0x84004120     0xba    andi a5,s1,63
    0x84004124     0xbe    li a0,0
    0x84004126     0xc0    bltu a4,s4,ffffffff8400431e <sameRegionAs+0x2b8>
    0x8400412a     0xc4    li a3,1
    0x8400412c     0xc6    sll a5,a3,a5
    0x84004130     0xca    addi a2,a4,-1
    0x84004134     0xce    add a2,a2,a5
    0x84004136     0xd0    sll a5,a3,s2
    0x8400413a     0xd4    addi a5,a5,-1
    0x8400413c     0xd6    add s4,s4,a5
    0x8400413e     0xd8    bltu s4,a2,ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004142     0xdc    sltu a0,a2,a4
    0x84004146     0xe0    xori a0,a0,1
    0x8400414a     0xe4    sext.w a0,a0
    0x8400414c     0xe6    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x8400414e     0xe8    srli a0,s0,0x2f
    0x84004152     0xec    andi a5,a0,63
    0x84004156     0xf0    addi a5,a5,5
    0x84004158     0xf2    j ffffffff84004124 <sameRegionAs+0xbe>
    0x8400415a     0xf4    li a5,10
    0x8400415c     0xf6    j ffffffff84004124 <sameRegionAs+0xbe>
    0x8400415e     0xf8    andi a5,s0,127
    0x84004162     0xfc    li a3,64
    0x84004166    0x100    beq a5,a3,ffffffff840041d6 <sameRegionAs+0x170>
    0x8400416a    0x104    andi a0,s0,63
    0x8400416e    0x108    addi a5,a0,5 # 2005 <KERNEL_OFFSET-0xfffffffeffffdffb>
    0x84004172    0x10c    j ffffffff84004124 <sameRegionAs+0xbe>
    0x84004174    0x10e    li a5,0
    0x84004176    0x110    j ffffffff84004124 <sameRegionAs+0xbe>
    0x84004178    0x112    li a5,0
    0x8400417a    0x114    j ffffffff84004124 <sameRegionAs+0xbe>
    0x8400417c    0x116    li a5,5
    0x8400417e    0x118    j ffffffff84004124 <sameRegionAs+0xbe>
    0x84004180    0x11a    li a5,0
    0x84004182    0x11c    j ffffffff84004124 <sameRegionAs+0xbe>
    0x84004184    0x11e    li a5,0
    0x84004186    0x120    j ffffffff84004124 <sameRegionAs+0xbe>
    0x84004188    0x122    srli a5,s1,0xa
    0x8400418c    0x126    andi a5,a5,63
    0x84004190    0x12a    j ffffffff84004124 <sameRegionAs+0xbe>
    0x84004192    0x12c    li a5,3
    0x84004194    0x12e    beq s3,a5,ffffffff840041be <sameRegionAs+0x158>
    0x84004198    0x132    li a5,13
    0x8400419a    0x134    beq s3,a5,ffffffff840041c2 <sameRegionAs+0x15c>
    0x8400419e    0x138    li a3,1
    0x840041a0    0x13a    li a5,0
    0x840041a2    0x13c    bne s3,a3,ffffffff84004124 <sameRegionAs+0xbe>
    0x840041a6    0x140    srli a0,s0,0x39
    0x840041aa    0x144    andi a5,a0,3
    0x840041ae    0x148    beq a5,a3,ffffffff840041c6 <sameRegionAs+0x160>
    0x840041b2    0x14c    li a3,2
    0x840041b4    0x14e    beq a5,a3,ffffffff840041ca <sameRegionAs+0x164>
    0x840041b8    0x152    beqz a5,ffffffff840041ce <sameRegionAs+0x168>
    0x840041ba    0x154    jal ra,ffffffff84002424 <halt>
    0x840041be    0x158    li a5,12
    0x840041c0    0x15a    j ffffffff84004124 <sameRegionAs+0xbe>
    0x840041c2    0x15c    li a5,12
    0x840041c4    0x15e    j ffffffff84004124 <sameRegionAs+0xbe>
    0x840041c6    0x160    li a5,21
    0x840041c8    0x162    j ffffffff84004124 <sameRegionAs+0xbe>
    0x840041ca    0x164    li a5,30
    0x840041cc    0x166    j ffffffff84004124 <sameRegionAs+0xbe>
    0x840041ce    0x168    li a5,12
    0x840041d0    0x16a    j ffffffff84004124 <sameRegionAs+0xbe>
    0x840041d2    0x16c    li a5,4
    0x840041d4    0x16e    j ffffffff84004124 <sameRegionAs+0xbe>
    0x840041d6    0x170    li a5,10
    0x840041d8    0x172    j ffffffff84004124 <sameRegionAs+0xbe>
    0x840041da    0x174    srli a5,s0,0x3b
    0x840041de    0x178    li a4,4
    0x840041e0    0x17a    li a0,0
    0x840041e2    0x17c    bne a5,a4,ffffffff8400431e <sameRegionAs+0x2b8>
    0x840041e6    0x180    slli a5,a2,0x19
    0x840041ea    0x184    srli a4,a5,0x19
    0x840041ee    0x188    srli a2,a2,0x26
    0x840041f0    0x18a    andi a2,a2,1
    0x840041f2    0x18c    beqz a2,ffffffff840041fa <sameRegionAs+0x194>
    0x840041f4    0x18e    li a5,-1
    0x840041f6    0x190    slli a5,a5,0x27
    0x840041f8    0x192    or a4,a4,a5
    0x840041fa    0x194    slli a5,s0,0x19
    0x840041fe    0x198    srli a5,a5,0x19
    0x84004200    0x19a    srli a0,s0,0x26
    0x84004204    0x19e    andi a0,a0,1
    0x84004206    0x1a0    beqz a0,ffffffff8400420e <sameRegionAs+0x1a8>
    0x84004208    0x1a2    li a3,-1
    0x8400420a    0x1a4    slli a3,a3,0x27
    0x8400420c    0x1a6    or a5,a5,a3
    0x8400420e    0x1a8    sub a5,a5,a4
    0x84004210    0x1aa    seqz a0,a5
    0x84004214    0x1ae    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004216    0x1b0    srli a5,s0,0x3b
    0x8400421a    0x1b4    li a4,6
    0x8400421c    0x1b6    li a0,0
    0x8400421e    0x1b8    bne a5,a4,ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004222    0x1bc    slli a5,a2,0x19
    0x84004226    0x1c0    srli a4,a5,0x19
    0x8400422a    0x1c4    srli a2,a2,0x26
    0x8400422c    0x1c6    andi a2,a2,1
    0x8400422e    0x1c8    beqz a2,ffffffff84004236 <sameRegionAs+0x1d0>
    0x84004230    0x1ca    li a5,-1
    0x84004232    0x1cc    slli a5,a5,0x27
    0x84004234    0x1ce    or a4,a4,a5
    0x84004236    0x1d0    slli a5,s0,0x19
    0x8400423a    0x1d4    srli a5,a5,0x19
    0x8400423c    0x1d6    srli a0,s0,0x26
    0x84004240    0x1da    andi a0,a0,1
    0x84004242    0x1dc    beqz a0,ffffffff8400424a <sameRegionAs+0x1e4>
    0x84004244    0x1de    li a3,-1
    0x84004246    0x1e0    slli a3,a3,0x27
    0x84004248    0x1e2    or a5,a5,a3
    0x8400424a    0x1e4    sub a5,a5,a4
    0x8400424c    0x1e6    seqz a0,a5
    0x84004250    0x1ea    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004252    0x1ec    srli a5,s0,0x3b
    0x84004256    0x1f0    li a4,10
    0x84004258    0x1f2    li a0,0
    0x8400425a    0x1f4    bne a5,a4,ffffffff8400431e <sameRegionAs+0x2b8>
    0x8400425e    0x1f8    slli a5,a2,0x1
    0x84004262    0x1fc    lui a4,0xfc000
    0x84004266    0x200    srli a4,a4,0x19
    0x84004268    0x202    and a4,a4,a5
    0x8400426a    0x204    srli a5,a5,0x26
    0x8400426c    0x206    andi a5,a5,1
    0x8400426e    0x208    beqz a5,ffffffff84004298 <sameRegionAs+0x232>
    0x84004270    0x20a    li a5,-1
    0x84004272    0x20c    slli a5,a5,0x27
    0x84004274    0x20e    or a4,a4,a5
    0x84004276    0x210    slli a5,s0,0x1
    0x8400427a    0x214    lui a3,0xfc000
    0x8400427e    0x218    srli a3,a3,0x19
    0x84004280    0x21a    and a3,a3,a5
    0x84004282    0x21c    srli a5,a5,0x26
    0x84004284    0x21e    andi a5,a5,1
    0x84004286    0x220    beqz a5,ffffffff84004294 <sameRegionAs+0x22e>
    0x84004288    0x222    li a5,-1
    0x8400428a    0x224    slli a5,a5,0x27
    0x8400428c    0x226    or a3,a3,a5
    0x8400428e    0x228    li a5,0
    0x84004290    0x22a    beq a3,a4,ffffffff840042ac <sameRegionAs+0x246>
    0x84004294    0x22e    mv a0,a5
    0x84004296    0x230    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004298    0x232    slli a5,s0,0x1
    0x8400429c    0x236    lui a3,0xfc000
    0x840042a0    0x23a    srli a3,a3,0x19
    0x840042a2    0x23c    and a3,a3,a5
    0x840042a4    0x23e    srli a5,a5,0x26
    0x840042a6    0x240    andi a5,a5,1
    0x840042a8    0x242    bnez a5,ffffffff84004288 <sameRegionAs+0x222>
    0x840042aa    0x244    j ffffffff8400428e <sameRegionAs+0x228>
    0x840042ac    0x246    srli a5,s0,0x2f
    0x840042b0    0x24a    andi a5,a5,63
    0x840042b4    0x24e    srli a4,a2,0x2f
    0x840042b8    0x252    andi a4,a4,63
    0x840042bc    0x256    sub a5,a5,a4
    0x840042be    0x258    seqz a5,a5
    0x840042c2    0x25c    j ffffffff84004294 <sameRegionAs+0x22e>
    0x840042c4    0x25e    srli a5,s0,0x3b
    0x840042c8    0x262    li a4,12
    0x840042ca    0x264    li a0,0
    0x840042cc    0x266    bne a5,a4,ffffffff8400431e <sameRegionAs+0x2b8>
    0x840042d0    0x26a    slli a5,a2,0x19
    0x840042d4    0x26e    srli a4,a5,0x19
    0x840042d8    0x272    srli a2,a2,0x26
    0x840042da    0x274    andi a2,a2,1
    0x840042dc    0x276    beqz a2,ffffffff840042e4 <sameRegionAs+0x27e>
    0x840042de    0x278    li a5,-1
    0x840042e0    0x27a    slli a5,a5,0x27
    0x840042e2    0x27c    or a4,a4,a5
    0x840042e4    0x27e    slli a5,s0,0x19
    0x840042e8    0x282    srli a5,a5,0x19
    0x840042ea    0x284    srli a0,s0,0x26
    0x840042ee    0x288    andi a0,a0,1
    0x840042f0    0x28a    beqz a0,ffffffff840042f8 <sameRegionAs+0x292>
    0x840042f2    0x28c    li a3,-1
    0x840042f4    0x28e    slli a3,a3,0x27
    0x840042f6    0x290    or a5,a5,a3
    0x840042f8    0x292    sub a5,a5,a4
    0x840042fa    0x294    seqz a0,a5
    0x840042fe    0x298    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004300    0x29a    srli s0,s0,0x3b
    0x84004302    0x29c    li a5,8
    0x84004304    0x29e    li a0,0
    0x84004306    0x2a0    bne s0,a5,ffffffff8400431e <sameRegionAs+0x2b8>
    0x8400430a    0x2a4    sub a0,s1,s2
    0x8400430e    0x2a8    seqz a0,a0
    0x84004312    0x2ac    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004314    0x2ae    srli a0,s0,0x3b
    0x84004318    0x2b2    addi a0,a0,-20
    0x8400431a    0x2b4    seqz a0,a0
    0x8400431e    0x2b8    ld ra,72(sp)          ; stack access
    0x84004320    0x2ba    ld s0,64(sp)          ; stack access
    0x84004322    0x2bc    ld s1,56(sp)          ; stack access
    0x84004324    0x2be    ld s2,48(sp)          ; stack access
    0x84004326    0x2c0    ld s3,40(sp)          ; stack access
    0x84004328    0x2c2    ld s4,32(sp)          ; stack access
    0x8400432a    0x2c4    addi sp,sp,80
    0x8400432c    0x2c6    ret
    0x8400432e    0x2c8    srli a0,s0,0x3b
    0x84004332    0x2cc    addi a0,a0,-14
    0x84004334    0x2ce    andi a0,a0,-3
    0x84004336    0x2d0    seqz a0,a0
    0x8400433a    0x2d4    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x8400433c    0x2d6    srli s0,s0,0x3b
    0x8400433e    0x2d8    li a5,16
    0x84004340    0x2da    li a0,0
    0x84004342    0x2dc    bne s0,a5,ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004346    0x2e0    lui a0,0x1
    0x84004348    0x2e2    addi a0,a0,-1
    0x8400434a    0x2e4    and a5,s1,a0
    0x8400434e    0x2e8    and a0,s2,a0
    0x84004352    0x2ec    sub a0,a5,a0
    0x84004356    0x2f0    seqz a0,a0
    0x8400435a    0x2f4    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x8400435c    0x2f6    srli s0,s0,0x3b
    0x8400435e    0x2f8    li a5,22
    0x84004360    0x2fa    li a0,0
    0x84004362    0x2fc    bne s0,a5,ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004366    0x300    srli a5,s2,0x10
    0x8400436a    0x304    slli a3,a5,0x19
    0x8400436e    0x308    srli a3,a3,0x19
    0x84004370    0x30a    srli a5,a5,0x26
    0x84004372    0x30c    andi a5,a5,1
    0x84004374    0x30e    beqz a5,ffffffff840043b0 <sameRegionAs+0x34a>
    0x84004376    0x310    li a5,-1
    0x84004378    0x312    slli a4,a5,0x27
    0x8400437c    0x316    or a3,a3,a4
    0x8400437e    0x318    srli a4,s1,0x10
    0x84004382    0x31c    srli a5,a5,0x19
    0x84004384    0x31e    and a5,a5,a4
    0x84004386    0x320    srli a4,a4,0x26
    0x84004388    0x322    andi a4,a4,1
    0x8400438a    0x324    beqz a4,ffffffff8400431e <sameRegionAs+0x2b8>
    0x8400438c    0x326    li a4,-1
    0x8400438e    0x328    slli a4,a4,0x27
    0x84004390    0x32a    or a5,a5,a4
    0x84004392    0x32c    li a0,0
    0x84004394    0x32e    bne a3,a5,ffffffff8400431e <sameRegionAs+0x2b8>
    0x84004398    0x332    srli a0,s1,0xa
    0x8400439c    0x336    andi a0,a0,63
    0x840043a0    0x33a    srli a5,s2,0xa
    0x840043a4    0x33e    andi a5,a5,63
    0x840043a8    0x342    sub a0,a0,a5
    0x840043aa    0x344    seqz a0,a0
    0x840043ae    0x348    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x840043b0    0x34a    srli a4,s1,0x10
    0x840043b4    0x34e    slli a5,a4,0x19
    0x840043b8    0x352    srli a5,a5,0x19
    0x840043ba    0x354    srli a4,a4,0x26
    0x840043bc    0x356    andi a4,a4,1
    0x840043be    0x358    bnez a4,ffffffff8400438c <sameRegionAs+0x326>
    0x840043c0    0x35a    j ffffffff84004392 <sameRegionAs+0x32c>
    0x840043c2    0x35c    srli a0,s0,0x3b
    0x840043c6    0x360    addi a0,a0,-24
    0x840043c8    0x362    seqz a0,a0
    0x840043cc    0x366    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x840043ce    0x368    andi a0,a5,1
    0x840043d2    0x36c    beqz a0,ffffffff8400431e <sameRegionAs+0x2b8>
    0x840043d4    0x36e    srli a0,s0,0x3b
    0x840043d8    0x372    andi a0,a0,1
    0x840043da    0x374    beqz a0,ffffffff8400431e <sameRegionAs+0x2b8>
    0x840043dc    0x376    ld a2,0(sp)           ; stack access
    0x840043de    0x378    ld a3,8(sp)           ; stack access
    0x840043e0    0x37a    ld a0,16(sp)          ; stack access
    0x840043e2    0x37c    ld a1,24(sp)          ; stack access
    0x840043e4    0x37e    jal ra,ffffffff84003036 <Arch_sameRegionAs>
    0x840043e8    0x382    j ffffffff8400431e <sameRegionAs+0x2b8>
    0x840043ea    0x384    li a0,0
    0x840043ec    0x386    j ffffffff8400431e <sameRegionAs+0x2b8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
322 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 646 nodes.

Section unmapPage (246 of 292)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 57 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `unmapPage`:

    0x84002b16     0x0    addi sp,sp,-64
    0x84002b18     0x2    sd ra,56(sp)          ; stack access
    0x84002b1a     0x4    sd s0,48(sp)          ; stack access
    0x84002b1c     0x6    sd s1,40(sp)          ; stack access
    0x84002b1e     0x8    sd s2,32(sp)          ; stack access
    0x84002b20     0xa    mv s0,a0
    0x84002b22     0xc    mv s2,a2
    0x84002b24     0xe    mv s1,a3
    0x84002b26    0x10    mv a0,a1
    0x84002b28    0x12    jal ra,ffffffff84002182 <findVSpaceForASID>
    0x84002b2c    0x16    sd a0,16(sp)          ; stack access
    0x84002b2e    0x18    sd a1,24(sp)          ; stack access
    0x84002b30    0x1a    beqz a0,ffffffff84002b3e <unmapPage+0x28>
    0x84002b32    0x1c    ld ra,56(sp)          ; stack access
    0x84002b34    0x1e    ld s0,48(sp)          ; stack access
    0x84002b36    0x20    ld s1,40(sp)          ; stack access
    0x84002b38    0x22    ld s2,32(sp)          ; stack access
    0x84002b3a    0x24    addi sp,sp,64
    0x84002b3c    0x26    ret
    0x84002b3e    0x28    mv a1,s2
    0x84002b40    0x2a    ld a0,24(sp)          ; stack access
    0x84002b42    0x2c    jal ra,ffffffff84002998 <lookupPTSlot>
    0x84002b46    0x30    sd a0,0(sp)           ; stack access
    0x84002b48    0x32    sd a1,8(sp)           ; stack access
    0x84002b4a    0x34    li a5,1
    0x84002b4c    0x36    beq s0,a5,ffffffff84002b5c <unmapPage+0x46>
    0x84002b50    0x3a    li a5,2
    0x84002b52    0x3c    beq s0,a5,ffffffff84002b60 <unmapPage+0x4a>
    0x84002b56    0x40    beqz s0,ffffffff84002ba0 <unmapPage+0x8a>
    0x84002b58    0x42    jal ra,ffffffff84002424 <halt>
    0x84002b5c    0x46    li a5,21
    0x84002b5e    0x48    j ffffffff84002b62 <unmapPage+0x4c>
    0x84002b60    0x4a    li a5,30
    0x84002b62    0x4c    bne a1,a5,ffffffff84002b32 <unmapPage+0x1c>
    0x84002b66    0x50    ld a4,0(a0)
    0x84002b68    0x52    andi a5,a4,1
    0x84002b6c    0x56    beqz a5,ffffffff84002b32 <unmapPage+0x1c>
    0x84002b6e    0x58    srli a5,a4,0x1
    0x84002b72    0x5c    srli a3,a4,0x2
    0x84002b76    0x60    or a5,a5,a3
    0x84002b78    0x62    srli a3,a4,0x3
    0x84002b7c    0x66    or a5,a5,a3
    0x84002b7e    0x68    andi a5,a5,1
    0x84002b80    0x6a    beqz a5,ffffffff84002b32 <unmapPage+0x1c>
    0x84002b82    0x6c    slli a4,a4,0x2
    0x84002b84    0x6e    lui a5,0xfff00
    0x84002b88    0x72    srli a5,a5,0x8
    0x84002b8a    0x74    and a4,a4,a5
    0x84002b8c    0x76    li a3,1
    0x84002b8e    0x78    slli a3,a3,0x26
    0x84002b90    0x7a    add s1,s1,a3
    0x84002b92    0x7c    bne a4,s1,ffffffff84002b32 <unmapPage+0x1c>
    0x84002b96    0x80    sd zero,0(a0)
    0x84002b9a    0x84    sfence.vma
    0x84002b9e    0x88    j ffffffff84002b32 <unmapPage+0x1c>
    0x84002ba0    0x8a    li a5,12
    0x84002ba2    0x8c    j ffffffff84002b62 <unmapPage+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 93 nodes.

Section create_untypeds_for_region (247 of 292)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 102 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x84001400      0x0    addi sp,sp,-192
    0x84001402      0x2    sd ra,184(sp)         ; stack access
    0x84001404      0x4    sd s0,176(sp)         ; stack access
    0x84001406      0x6    sd s1,168(sp)         ; stack access
    0x84001408      0x8    sd s2,160(sp)         ; stack access
    0x8400140a      0xa    sd s3,152(sp)         ; stack access
    0x8400140c      0xc    sd s4,144(sp)         ; stack access
    0x8400140e      0xe    sd s5,136(sp)         ; stack access
    0x84001410     0x10    sd s6,128(sp)         ; stack access
    0x84001412     0x12    sd s7,120(sp)         ; stack access
    0x84001414     0x14    sd s8,112(sp)         ; stack access
    0x84001416     0x16    sd s9,104(sp)         ; stack access
    0x84001418     0x18    sd s10,96(sp)         ; stack access
    0x8400141a     0x1a    sd s11,88(sp)         ; stack access
    0x8400141c     0x1c    sd a0,32(sp)          ; stack access
    0x8400141e     0x1e    sd a1,40(sp)          ; stack access
    0x84001420     0x20    beq a3,a4,ffffffff8400150a <create_untypeds_for_region+0x10a>
    0x84001424     0x24    mv s9,a2
    0x84001426     0x26    mv s8,a5
    0x84001428     0x28    mv s1,a3
    0x8400142a     0x2a    mv s3,a4
    0x8400142c     0x2c    slli s10,a2,0x6
    0x84001430     0x30    andi s10,s10,64
    0x84001434     0x34    li s6,63
    0x84001438     0x38    li s5,38
    0x8400143c     0x3c    auipc s7,0x0
    0x84001440     0x40    addi s7,s7,1404 # ffffffff840019b8 <ndks_boot>
    0x84001444     0x44    li s4,1
    0x84001446     0x46    slli s11,s4,0x26
    0x8400144a     0x4a    li a5,-1
    0x8400144c     0x4c    srli a5,a5,0x19
    0x8400144e     0x4e    sd a5,0(sp)           ; stack access
    0x84001450     0x50    slli a5,s4,0x3c
    0x84001454     0x54    sd a5,8(sp)           ; stack access
    0x84001456     0x56    j ffffffff8400147c <create_untypeds_for_region+0x7c>
    0x84001458     0x58    mv s0,s5
    0x8400145a     0x5a    ld a5,32(sp)          ; stack access
    0x8400145c     0x5c    sd a5,48(sp)          ; stack access
    0x8400145e     0x5e    ld a5,40(sp)          ; stack access
    0x84001460     0x60    sd a5,56(sp)          ; stack access
    0x84001462     0x62    ld a5,592(s7)
    0x84001466     0x66    sub a5,a5,s8
    0x8400146a     0x6a    li a4,49
    0x8400146e     0x6e    bgeu a4,a5,ffffffff840014a6 <create_untypeds_for_region+0xa6>
    0x84001472     0x72    sll s0,s4,s0
    0x84001476     0x76    add s1,s1,s0
    0x84001478     0x78    beq s1,s3,ffffffff840014ea <create_untypeds_for_region+0xea>
    0x8400147c     0x7c    sub a0,s3,s1
    0x84001480     0x80    jal ra,ffffffff8400a66a <__clzdi2>
    0x84001484     0x84    sub s2,s6,a0
    0x84001488     0x88    mv s0,s2
    0x8400148a     0x8a    beqz s1,ffffffff84001494 <create_untypeds_for_region+0x94>
    0x8400148c     0x8c    mv a0,s1
    0x8400148e     0x8e    jal ra,ffffffff8400b936 <__ctzdi2>
    0x84001492     0x92    mv s0,a0
    0x84001494     0x94    bgeu s2,s0,ffffffff8400149a <create_untypeds_for_region+0x9a>
    0x84001498     0x98    mv s0,s2
    0x8400149a     0x9a    bltu s5,s0,ffffffff84001458 <create_untypeds_for_region+0x58>
    0x8400149e     0x9e    li a5,3
    0x840014a0     0xa0    bgeu a5,s0,ffffffff84001472 <create_untypeds_for_region+0x72>
    0x840014a4     0xa4    j ffffffff8400145a <create_untypeds_for_region+0x5a>
    0x840014a6     0xa6    slli a5,a5,0x4
    0x840014a8     0xa8    ld a4,584(s7)
    0x840014ac     0xac    add a5,a5,a4
    0x840014ae     0xae    sd zero,192(a5)
    0x840014b2     0xb2    add a4,s1,s11
    0x840014b6     0xb6    sd a4,184(a5)
    0x840014b8     0xb8    sb s0,192(a5)
    0x840014bc     0xbc    sb s9,193(a5)
    0x840014c0     0xc0    ld a5,0(sp)           ; stack access
    0x840014c2     0xc2    and a2,s1,a5
    0x840014c6     0xc6    addiw a5,s0,-4
    0x840014ca     0xca    sll a5,s4,a5
    0x840014ce     0xce    slli a5,a5,0x19
    0x840014d0     0xd0    andi a3,s0,63
    0x840014d4     0xd4    or a3,a3,s10
    0x840014d8     0xd8    ld a4,8(sp)           ; stack access
    0x840014da     0xda    or a2,a2,a4
    0x840014dc     0xdc    or a3,a3,a5
    0x840014de     0xde    ld a0,48(sp)          ; stack access
    0x840014e0     0xe0    ld a1,56(sp)          ; stack access
    0x840014e2     0xe2    jal ra,ffffffff84000870 <provide_cap>
    0x840014e6     0xe6    bnez a0,ffffffff84001472 <create_untypeds_for_region+0x72>
    0x840014e8     0xe8    j ffffffff840014ec <create_untypeds_for_region+0xec>
    0x840014ea     0xea    li a0,1
    0x840014ec     0xec    ld ra,184(sp)         ; stack access
    0x840014ee     0xee    ld s0,176(sp)         ; stack access
    0x840014f0     0xf0    ld s1,168(sp)         ; stack access
    0x840014f2     0xf2    ld s2,160(sp)         ; stack access
    0x840014f4     0xf4    ld s3,152(sp)         ; stack access
    0x840014f6     0xf6    ld s4,144(sp)         ; stack access
    0x840014f8     0xf8    ld s5,136(sp)         ; stack access
    0x840014fa     0xfa    ld s6,128(sp)         ; stack access
    0x840014fc     0xfc    ld s7,120(sp)         ; stack access
    0x840014fe     0xfe    ld s8,112(sp)         ; stack access
    0x84001500    0x100    ld s9,104(sp)         ; stack access
    0x84001502    0x102    ld s10,96(sp)         ; stack access
    0x84001504    0x104    ld s11,88(sp)         ; stack access
    0x84001506    0x106    addi sp,sp,192
    0x84001508    0x108    ret
    0x8400150a    0x10a    li a0,1
    0x8400150c    0x10c    j ffffffff840014ec <create_untypeds_for_region+0xec>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
102 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 166 nodes.

Section create_rootserver_objects (248 of 292)
==============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 92 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x84000ed0     0x0    addi sp,sp,-80
    0x84000ed2     0x2    sd ra,72(sp)          ; stack access
    0x84000ed4     0x4    sd s0,64(sp)          ; stack access
    0x84000ed6     0x6    sd s1,56(sp)          ; stack access
    0x84000ed8     0x8    sd s2,48(sp)          ; stack access
    0x84000eda     0xa    sd s3,40(sp)          ; stack access
    0x84000edc     0xc    sd s4,32(sp)          ; stack access
    0x84000ede     0xe    mv s1,a0
    0x84000ee0    0x10    sd a1,0(sp)           ; stack access
    0x84000ee2    0x12    sd a2,8(sp)           ; stack access
    0x84000ee4    0x14    mv s2,a3
    0x84000ee6    0x16    mv s4,a3
    0x84000ee8    0x18    li a5,24
    0x84000eea    0x1a    bgeu a3,a5,ffffffff84000ef0 <create_rootserver_objects+0x20>
    0x84000eee    0x1e    li s4,24
    0x84000ef0    0x20    ld a5,0(sp)           ; stack access
    0x84000ef2    0x22    sd a5,16(sp)          ; stack access
    0x84000ef4    0x24    ld a5,8(sp)           ; stack access
    0x84000ef6    0x26    sd a5,24(sp)          ; stack access
    0x84000ef8    0x28    mv s3,s2
    0x84000efa    0x2a    beqz s2,ffffffff84000f04 <create_rootserver_objects+0x34>
    0x84000efe    0x2e    li s3,1
    0x84000f00    0x30    sll s3,s3,s2
    0x84000f04    0x34    ld a0,16(sp)          ; stack access
    0x84000f06    0x36    ld a1,24(sp)          ; stack access
    0x84000f08    0x38    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000f0c    0x3c    auipc s0,0x1
    0x84000f10    0x40    addi s0,s0,-1364 # ffffffff840019b8 <ndks_boot>
    0x84000f14    0x44    sd s1,688(s0)
    0x84000f18    0x48    lui a5,0x1004
    0x84000f1c    0x4c    addi a5,a5,1280 # 1004500 <KERNEL_OFFSET-0xfffffffefeffbb00>
    0x84000f20    0x50    add s1,s1,a5
    0x84000f22    0x52    add s1,s1,s3
    0x84000f24    0x54    slli a0,a0,0xc
    0x84000f26    0x56    add s1,s1,a0
    0x84000f28    0x58    sd s1,696(s0)
    0x84000f2c    0x5c    mv a1,s2
    0x84000f2e    0x5e    mv a0,s4
    0x84000f30    0x60    jal ra,ffffffff84000ea4 <maybe_alloc_extra_bi>
    0x84000f34    0x64    li a1,1
    0x84000f36    0x66    li a0,24
    0x84000f38    0x68    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000f3c    0x6c    sd a0,608(s0)
    0x84000f40    0x70    mv a1,s2
    0x84000f42    0x72    li a0,12
    0x84000f44    0x74    jal ra,ffffffff84000ea4 <maybe_alloc_extra_bi>
    0x84000f48    0x78    li a1,1
    0x84000f4a    0x7a    li a0,12
    0x84000f4c    0x7c    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000f50    0x80    sd a0,616(s0)
    0x84000f54    0x84    mv a1,s2
    0x84000f56    0x86    li a0,12
    0x84000f58    0x88    jal ra,ffffffff84000ea4 <maybe_alloc_extra_bi>
    0x84000f5c    0x8c    li a1,1
    0x84000f5e    0x8e    li a0,12
    0x84000f60    0x90    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000f64    0x94    sd a0,624(s0)
    0x84000f68    0x98    li a1,1
    0x84000f6a    0x9a    li a0,12
    0x84000f6c    0x9c    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000f70    0xa0    sd a0,632(s0)
    0x84000f74    0xa4    li a1,1
    0x84000f76    0xa6    li a0,12
    0x84000f78    0xa8    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000f7c    0xac    sd a0,640(s0)
    0x84000f80    0xb0    ld a0,0(sp)           ; stack access
    0x84000f82    0xb2    ld a1,8(sp)           ; stack access
    0x84000f84    0xb4    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000f88    0xb8    mv s1,a0
    0x84000f8a    0xba    mv a1,a0
    0x84000f8c    0xbc    li a0,12
    0x84000f8e    0xbe    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000f92    0xc2    sd a0,672(s0)
    0x84000f96    0xc6    slli s1,s1,0xc
    0x84000f98    0xc8    add s1,s1,a0
    0x84000f9a    0xca    sd s1,680(s0)
    0x84000f9e    0xce    li a1,1
    0x84000fa0    0xd0    li a0,10
    0x84000fa2    0xd2    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000fa6    0xd6    sd a0,656(s0)
    0x84000faa    0xda    li a1,1
    0x84000fac    0xdc    li a0,8
    0x84000fae    0xde    jal ra,ffffffff84000e76 <alloc_rootserver_obj>
    0x84000fb2    0xe2    sd a0,664(s0)
    0x84000fb6    0xe6    ld ra,72(sp)          ; stack access
    0x84000fb8    0xe8    ld s0,64(sp)          ; stack access
    0x84000fba    0xea    ld s1,56(sp)          ; stack access
    0x84000fbc    0xec    ld s2,48(sp)          ; stack access
    0x84000fbe    0xee    ld s3,40(sp)          ; stack access
    0x84000fc0    0xf0    ld s4,32(sp)          ; stack access
    0x84000fc2    0xf2    addi sp,sp,80
    0x84000fc4    0xf4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
92 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 143 nodes.

Section create_ipcbuf_frame_cap (249 of 292)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 39 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84000e12     0x0    addi sp,sp,-96
    0x84000e14     0x2    sd ra,88(sp)          ; stack access
    0x84000e16     0x4    sd s0,80(sp)          ; stack access
    0x84000e18     0x6    sd s1,72(sp)          ; stack access
    0x84000e1a     0x8    sd a0,16(sp)          ; stack access
    0x84000e1c     0xa    sd a1,24(sp)          ; stack access
    0x84000e1e     0xc    sd a2,0(sp)           ; stack access
    0x84000e20     0xe    sd a3,8(sp)           ; stack access
    0x84000e22    0x10    mv s0,a4
    0x84000e24    0x12    auipc s1,0x1
    0x84000e28    0x16    addi s1,s1,-1132 # ffffffff840019b8 <ndks_boot>
    0x84000e2c    0x1a    lui a1,0x1
    0x84000e2e    0x1c    ld a0,632(s1)
    0x84000e32    0x20    jal ra,ffffffff840092da <memzero>
    0x84000e36    0x24    li a6,0
    0x84000e38    0x26    li a5,0
    0x84000e3a    0x28    li a4,1
    0x84000e3c    0x2a    mv a3,s0
    0x84000e3e    0x2c    ld a2,632(s1)
    0x84000e42    0x30    ld a0,0(sp)           ; stack access
    0x84000e44    0x32    ld a1,8(sp)           ; stack access
    0x84000e46    0x34    jal ra,ffffffff8400049e <create_mapped_it_frame_cap>
    0x84000e4a    0x38    mv s1,a0
    0x84000e4c    0x3a    mv s0,a1
    0x84000e4e    0x3c    ld a0,16(sp)          ; stack access
    0x84000e50    0x3e    ld a1,24(sp)          ; stack access
    0x84000e52    0x40    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000e56    0x44    sd s1,320(a0)
    0x84000e5a    0x48    sd s0,328(a0)
    0x84000e5e    0x4c    sd zero,336(a0)
    0x84000e62    0x50    li a5,3
    0x84000e64    0x52    sd a5,344(a0)
    0x84000e68    0x56    mv a0,s1
    0x84000e6a    0x58    mv a1,s0
    0x84000e6c    0x5a    ld ra,88(sp)          ; stack access
    0x84000e6e    0x5c    ld s0,80(sp)          ; stack access
    0x84000e70    0x5e    ld s1,72(sp)          ; stack access
    0x84000e72    0x60    addi sp,sp,96
    0x84000e74    0x62    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 63 nodes.

Section invokeUntyped_Retype (250 of 292)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 104 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x84009da4      0x0    addi sp,sp,-112
    0x84009da6      0x2    sd ra,104(sp)         ; stack access
    0x84009da8      0x4    sd s0,96(sp)          ; stack access
    0x84009daa      0x6    sd s1,88(sp)          ; stack access
    0x84009dac      0x8    sd s2,80(sp)          ; stack access
    0x84009dae      0xa    sd s3,72(sp)          ; stack access
    0x84009db0      0xc    sd s4,64(sp)          ; stack access
    0x84009db2      0xe    sd s5,56(sp)          ; stack access
    0x84009db4     0x10    sd s6,48(sp)          ; stack access
    0x84009db6     0x12    sd s7,40(sp)          ; stack access
    0x84009db8     0x14    sd s8,32(sp)          ; stack access
    0x84009dba     0x16    sd s9,24(sp)          ; stack access
    0x84009dbc     0x18    sd s10,16(sp)         ; stack access
    0x84009dbe     0x1a    sd s11,8(sp)          ; stack access
    0x84009dc0     0x1c    mv s0,a0
    0x84009dc2     0x1e    mv s3,a2
    0x84009dc4     0x20    mv s1,a3
    0x84009dc6     0x22    mv s4,a4
    0x84009dc8     0x24    mv s5,a5
    0x84009dca     0x26    mv s6,a6
    0x84009dcc     0x28    mv s2,a7
    0x84009dce     0x2a    ld s9,0(a0)
    0x84009dd2     0x2e    slli s7,s9,0x19
    0x84009dd6     0x32    srli s7,s7,0x19
    0x84009dda     0x36    srli a5,s9,0x26
    0x84009dde     0x3a    andi a5,a5,1
    0x84009de0     0x3c    beqz a5,ffffffff84009dea <invokeUntyped_Retype+0x46>
    0x84009de2     0x3e    li a5,-1
    0x84009de4     0x40    slli a5,a5,0x27
    0x84009de6     0x42    or s7,s7,a5
    0x84009dea     0x46    beqz a1,ffffffff84009e22 <invokeUntyped_Retype+0x7e>
    0x84009dec     0x48    ld s10,8(s0)
    0x84009df0     0x4c    srli a5,s10,0x19
    0x84009df4     0x50    slli s8,a5,0x4
    0x84009df8     0x54    beqz a5,ffffffff84009e22 <invokeUntyped_Retype+0x7e>
    0x84009dfa     0x56    srli a5,s10,0x6
    0x84009dfe     0x5a    andi a5,a5,1
    0x84009e00     0x5c    bnez a5,ffffffff84009e14 <invokeUntyped_Retype+0x70>
    0x84009e02     0x5e    andi a5,s10,56
    0x84009e06     0x62    bnez a5,ffffffff84009e7c <invokeUntyped_Retype+0xd8>
    0x84009e08     0x64    li a1,1
    0x84009e0a     0x66    sll a1,a1,s10
    0x84009e0e     0x6a    mv a0,s7
    0x84009e10     0x6c    jal ra,ffffffff840092da <memzero>
    0x84009e14     0x70    sd s9,0(s0)
    0x84009e18     0x74    slli s10,s10,0x27
    0x84009e1a     0x76    srli s10,s10,0x27
    0x84009e1e     0x7a    sd s10,8(s0)
    0x84009e22     0x7e    mv a1,s4
    0x84009e24     0x80    mv a0,s1
    0x84009e26     0x82    jal ra,ffffffff84003fe4 <getObjectSize>
    0x84009e2a     0x86    sll t1,s2,a0
    0x84009e2e     0x8a    sub s7,s3,s7
    0x84009e32     0x8e    add t1,t1,s7
    0x84009e34     0x90    srli t1,t1,0x4
    0x84009e38     0x94    slli t1,t1,0x19
    0x84009e3a     0x96    ld a5,8(s0)
    0x84009e3c     0x98    slli a5,a5,0x27
    0x84009e3e     0x9a    srli a5,a5,0x27
    0x84009e40     0x9c    or t1,t1,a5
    0x84009e44     0xa0    sd t1,8(s0)
    0x84009e48     0xa4    ld a7,112(sp)         ; stack access
    0x84009e4a     0xa6    mv a6,s4
    0x84009e4c     0xa8    mv a5,s3
    0x84009e4e     0xaa    mv a4,s2
    0x84009e50     0xac    mv a3,s6
    0x84009e52     0xae    mv a2,s5
    0x84009e54     0xb0    mv a1,s0
    0x84009e56     0xb2    mv a0,s1
    0x84009e58     0xb4    jal ra,ffffffff84009d2c <createNewObjects>
    0x84009e5c     0xb8    li a0,0
    0x84009e5e     0xba    ld ra,104(sp)         ; stack access
    0x84009e60     0xbc    ld s0,96(sp)          ; stack access
    0x84009e62     0xbe    ld s1,88(sp)          ; stack access
    0x84009e64     0xc0    ld s2,80(sp)          ; stack access
    0x84009e66     0xc2    ld s3,72(sp)          ; stack access
    0x84009e68     0xc4    ld s4,64(sp)          ; stack access
    0x84009e6a     0xc6    ld s5,56(sp)          ; stack access
    0x84009e6c     0xc8    ld s6,48(sp)          ; stack access
    0x84009e6e     0xca    ld s7,40(sp)          ; stack access
    0x84009e70     0xcc    ld s8,32(sp)          ; stack access
    0x84009e72     0xce    ld s9,24(sp)          ; stack access
    0x84009e74     0xd0    ld s10,16(sp)         ; stack access
    0x84009e76     0xd2    ld s11,8(sp)          ; stack access
    0x84009e78     0xd4    addi sp,sp,112
    0x84009e7a     0xd6    ret
    0x84009e7c     0xd8    addi s8,s8,-1
    0x84009e7e     0xda    andi s8,s8,-256
    0x84009e82     0xde    slli s10,s10,0x27
    0x84009e84     0xe0    srli s10,s10,0x27
    0x84009e88     0xe4    li s11,-256
    0x84009e8c     0xe8    li a1,256
    0x84009e90     0xec    add a0,s7,s8
    0x84009e94     0xf0    jal ra,ffffffff840092da <memzero>
    0x84009e98     0xf4    sd s9,0(s0)
    0x84009e9c     0xf8    srli a5,s8,0x4
    0x84009ea0     0xfc    slli a5,a5,0x19
    0x84009ea2     0xfe    or a5,a5,s10
    0x84009ea6    0x102    sd a5,8(s0)
    0x84009ea8    0x104    jal ra,ffffffff84007118 <preemptionPoint>
    0x84009eac    0x108    bnez a0,ffffffff84009e5e <invokeUntyped_Retype+0xba>
    0x84009eae    0x10a    addi s8,s8,-256
    0x84009eb2    0x10e    bne s8,s11,ffffffff84009e8c <invokeUntyped_Retype+0xe8>
    0x84009eb6    0x112    j ffffffff84009e22 <invokeUntyped_Retype+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 159 nodes.

Section decodeSetIPCBuffer (251 of 292)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 82 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x84008378     0x0    addi sp,sp,-208
    0x8400837a     0x2    sd ra,200(sp)         ; stack access
    0x8400837c     0x4    sd s0,192(sp)         ; stack access
    0x8400837e     0x6    sd s1,184(sp)         ; stack access
    0x84008380     0x8    sd s2,176(sp)         ; stack access
    0x84008382     0xa    sd a0,96(sp)          ; stack access
    0x84008384     0xc    sd a1,104(sp)         ; stack access
    0x84008386     0xe    beqz a2,ffffffff840083ca <decodeSetIPCBuffer+0x52>
    0x84008388    0x10    mv s2,a3
    0x8400838a    0x12    auipc s0,0x5
    0x8400838e    0x16    ld s0,-762(s0) # ffffffff8400d090 <current_extra_caps>
    0x84008392    0x1a    beqz s0,ffffffff840083ca <decodeSetIPCBuffer+0x52>
    0x84008394    0x1c    auipc a5,0x17
    0x84008398    0x20    ld a5,-828(a5) # ffffffff8401f058 <ksCurThread>
    0x8400839c    0x24    ld s1,88(a5)
    0x8400839e    0x26    ld a5,0(s0)
    0x840083a0    0x28    sd a5,144(sp)         ; stack access
    0x840083a2    0x2a    ld a5,8(s0)
    0x840083a4    0x2c    sd a5,152(sp)         ; stack access
    0x840083a6    0x2e    beqz s1,ffffffff840083d8 <decodeSetIPCBuffer+0x60>
    0x840083a8    0x30    ld a2,144(sp)         ; stack access
    0x840083aa    0x32    mv a3,a5
    0x840083ac    0x34    mv a1,s0
    0x840083ae    0x36    addi a0,sp,120
    0x840083b0    0x38    jal ra,ffffffff840044a4 <deriveCap>
    0x840083b4    0x3c    ld a0,120(sp)         ; stack access
    0x840083b6    0x3e    bnez a0,ffffffff8400842a <decodeSetIPCBuffer+0xb2>
    0x840083b8    0x40    ld a1,128(sp)         ; stack access
    0x840083ba    0x42    sd a1,144(sp)         ; stack access
    0x840083bc    0x44    ld a2,136(sp)         ; stack access
    0x840083be    0x46    sd a2,152(sp)         ; stack access
    0x840083c0    0x48    mv a0,s1
    0x840083c2    0x4a    jal ra,ffffffff84002d22 <checkValidIPCBuffer>
    0x840083c6    0x4e    beqz a0,ffffffff840083da <decodeSetIPCBuffer+0x62>
    0x840083c8    0x50    j ffffffff8400842a <decodeSetIPCBuffer+0xb2>
    0x840083ca    0x52    li a5,7
    0x840083cc    0x54    auipc a4,0x5
    0x840083d0    0x58    sd a5,-1932(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840083d4    0x5c    li a0,3
    0x840083d6    0x5e    j ffffffff8400842a <decodeSetIPCBuffer+0xb2>
    0x840083d8    0x60    li s0,0
    0x840083da    0x62    li a1,2
    0x840083dc    0x64    auipc a0,0x17
    0x840083e0    0x68    ld a0,-900(a0) # ffffffff8401f058 <ksCurThread>
    0x840083e4    0x6c    jal ra,ffffffff84004a52 <setThreadState>
    0x840083e8    0x70    ld a5,96(sp)          ; stack access
    0x840083ea    0x72    slli a0,a5,0x19
    0x840083ee    0x76    srli a0,a0,0x19
    0x840083f0    0x78    srli a5,a5,0x26
    0x840083f2    0x7a    andi a5,a5,1
    0x840083f4    0x7c    beqz a5,ffffffff840083fc <decodeSetIPCBuffer+0x84>
    0x840083f6    0x7e    li a5,-1
    0x840083f8    0x80    slli a5,a5,0x27
    0x840083fa    0x82    or a0,a0,a5
    0x840083fc    0x84    li a5,1
    0x840083fe    0x86    sd a5,80(sp)          ; stack access
    0x84008400    0x88    sd s0,72(sp)          ; stack access
    0x84008402    0x8a    ld a5,144(sp)         ; stack access
    0x84008404    0x8c    sd a5,56(sp)          ; stack access
    0x84008406    0x8e    ld a5,152(sp)         ; stack access
    0x84008408    0x90    sd a5,64(sp)          ; stack access
    0x8400840a    0x92    sd s1,48(sp)          ; stack access
    0x8400840c    0x94    sd zero,40(sp)        ; stack access
    0x8400840e    0x96    sd zero,24(sp)        ; stack access
    0x84008410    0x98    sd zero,32(sp)        ; stack access
    0x84008412    0x9a    sd zero,16(sp)        ; stack access
    0x84008414    0x9c    sd zero,0(sp)         ; stack access
    0x84008416    0x9e    sd zero,8(sp)         ; stack access
    0x84008418    0xa0    li a7,0
    0x8400841a    0xa2    li a5,0
    0x8400841c    0xa4    li a6,0
    0x8400841e    0xa6    li a4,0
    0x84008420    0xa8    li a2,0
    0x84008422    0xaa    li a3,0
    0x84008424    0xac    mv a1,s2
    0x84008426    0xae    jal ra,ffffffff84007f0c <invokeTCB_ThreadControlCaps>
    0x8400842a    0xb2    ld ra,200(sp)         ; stack access
    0x8400842c    0xb4    ld s0,192(sp)         ; stack access
    0x8400842e    0xb6    ld s1,184(sp)         ; stack access
    0x84008430    0xb8    ld s2,176(sp)         ; stack access
    0x84008432    0xba    addi sp,sp,208
    0x84008434    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
82 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 138 nodes.

Section invokeTCB_ThreadControlCaps (252 of 292)
================================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControlCaps` consists of 200 instructions.


Stack analysis
---------------

80 stack accesses found. Annotated code for `invokeTCB_ThreadControlCaps`:

    0x84007f0c      0x0    addi sp,sp,-160
    0x84007f0e      0x2    sd ra,152(sp)         ; stack access
    0x84007f10      0x4    sd s0,144(sp)         ; stack access
    0x84007f12      0x6    sd s1,136(sp)         ; stack access
    0x84007f14      0x8    sd s2,128(sp)         ; stack access
    0x84007f16      0xa    sd s3,120(sp)         ; stack access
    0x84007f18      0xc    sd s4,112(sp)         ; stack access
    0x84007f1a      0xe    sd s5,104(sp)         ; stack access
    0x84007f1c     0x10    sd s6,96(sp)          ; stack access
    0x84007f1e     0x12    sd s7,88(sp)          ; stack access
    0x84007f20     0x14    mv s2,a0
    0x84007f22     0x16    mv s4,a1
    0x84007f24     0x18    sd a2,16(sp)          ; stack access
    0x84007f26     0x1a    sd a3,24(sp)          ; stack access
    0x84007f28     0x1c    sd a5,0(sp)           ; stack access
    0x84007f2a     0x1e    sd a6,8(sp)           ; stack access
    0x84007f2c     0x20    mv s6,a7
    0x84007f2e     0x22    ld s3,240(sp)         ; stack access
    0x84007f30     0x24    slli s1,a0,0x19
    0x84007f34     0x28    srli s1,s1,0x19
    0x84007f36     0x2a    li a5,3
    0x84007f38     0x2c    slli a5,a5,0x3d
    0x84007f3a     0x2e    or s1,s1,a5
    0x84007f3c     0x30    andi a5,s3,4
    0x84007f40     0x34    bnez a5,ffffffff84007f6e <invokeTCB_ThreadControlCaps+0x62>
    0x84007f42     0x36    andi a5,s3,8
    0x84007f46     0x3a    bnez a5,ffffffff84007fbe <invokeTCB_ThreadControlCaps+0xb2>
    0x84007f48     0x3c    andi a5,s3,2
    0x84007f4c     0x40    bnez a5,ffffffff84008010 <invokeTCB_ThreadControlCaps+0x104>
    0x84007f4e     0x42    andi s0,s3,1
    0x84007f52     0x46    bnez s0,ffffffff840080ae <invokeTCB_ThreadControlCaps+0x1a2>
    0x84007f56     0x4a    mv a0,s0
    0x84007f58     0x4c    ld ra,152(sp)         ; stack access
    0x84007f5a     0x4e    ld s0,144(sp)         ; stack access
    0x84007f5c     0x50    ld s1,136(sp)         ; stack access
    0x84007f5e     0x52    ld s2,128(sp)         ; stack access
    0x84007f60     0x54    ld s3,120(sp)         ; stack access
    0x84007f62     0x56    ld s4,112(sp)         ; stack access
    0x84007f64     0x58    ld s5,104(sp)         ; stack access
    0x84007f66     0x5a    ld s6,96(sp)          ; stack access
    0x84007f68     0x5c    ld s7,88(sp)          ; stack access
    0x84007f6a     0x5e    addi sp,sp,160
    0x84007f6c     0x60    ret
    0x84007f6e     0x62    mv s5,a4
    0x84007f70     0x64    sd s1,32(sp)          ; stack access
    0x84007f72     0x66    sd zero,40(sp)        ; stack access
    0x84007f74     0x68    sd a2,48(sp)          ; stack access
    0x84007f76     0x6a    sd a3,56(sp)          ; stack access
    0x84007f78     0x6c    andi s7,a0,-1024
    0x84007f7c     0x70    addi s7,s7,96
    0x84007f80     0x74    li a1,1
    0x84007f82     0x76    mv a0,s7
    0x84007f84     0x78    jal ra,ffffffff840071e4 <cteDelete>
    0x84007f88     0x7c    mv s0,a0
    0x84007f8a     0x7e    bnez a0,ffffffff84007f56 <invokeTCB_ThreadControlCaps+0x4a>
    0x84007f8c     0x80    ld a2,0(s5)
    0x84007f90     0x84    ld a3,8(s5)
    0x84007f94     0x88    ld a0,48(sp)          ; stack access
    0x84007f96     0x8a    ld a1,56(sp)          ; stack access
    0x84007f98     0x8c    jal ra,ffffffff84004510 <sameObjectAs>
    0x84007f9c     0x90    beqz a0,ffffffff84007f42 <invokeTCB_ThreadControlCaps+0x36>
    0x84007f9e     0x92    ld a2,0(s4)
    0x84007fa2     0x96    ld a3,8(s4)
    0x84007fa6     0x9a    ld a0,32(sp)          ; stack access
    0x84007fa8     0x9c    ld a1,40(sp)          ; stack access
    0x84007faa     0x9e    jal ra,ffffffff84004510 <sameObjectAs>
    0x84007fae     0xa2    beqz a0,ffffffff84007f42 <invokeTCB_ThreadControlCaps+0x36>
    0x84007fb0     0xa4    mv a3,s7
    0x84007fb2     0xa6    mv a2,s5
    0x84007fb4     0xa8    ld a0,48(sp)          ; stack access
    0x84007fb6     0xaa    ld a1,56(sp)          ; stack access
    0x84007fb8     0xac    jal ra,ffffffff84003aba <cteInsert>
    0x84007fbc     0xb0    j ffffffff84007f42 <invokeTCB_ThreadControlCaps+0x36>
    0x84007fbe     0xb2    sd s1,32(sp)          ; stack access
    0x84007fc0     0xb4    sd zero,40(sp)        ; stack access
    0x84007fc2     0xb6    ld a5,0(sp)           ; stack access
    0x84007fc4     0xb8    sd a5,48(sp)          ; stack access
    0x84007fc6     0xba    ld a5,8(sp)           ; stack access
    0x84007fc8     0xbc    sd a5,56(sp)          ; stack access
    0x84007fca     0xbe    andi s5,s2,-1024
    0x84007fce     0xc2    addi s5,s5,128
    0x84007fd2     0xc6    li a1,1
    0x84007fd4     0xc8    mv a0,s5
    0x84007fd6     0xca    jal ra,ffffffff840071e4 <cteDelete>
    0x84007fda     0xce    mv s0,a0
    0x84007fdc     0xd0    bnez a0,ffffffff84007f56 <invokeTCB_ThreadControlCaps+0x4a>
    0x84007fde     0xd2    ld a2,0(s6)
    0x84007fe2     0xd6    ld a3,8(s6)
    0x84007fe6     0xda    ld a0,48(sp)          ; stack access
    0x84007fe8     0xdc    ld a1,56(sp)          ; stack access
    0x84007fea     0xde    jal ra,ffffffff84004510 <sameObjectAs>
    0x84007fee     0xe2    beqz a0,ffffffff84007f48 <invokeTCB_ThreadControlCaps+0x3c>
    0x84007ff0     0xe4    ld a2,0(s4)
    0x84007ff4     0xe8    ld a3,8(s4)
    0x84007ff8     0xec    ld a0,32(sp)          ; stack access
    0x84007ffa     0xee    ld a1,40(sp)          ; stack access
    0x84007ffc     0xf0    jal ra,ffffffff84004510 <sameObjectAs>
    0x84008000     0xf4    beqz a0,ffffffff84007f48 <invokeTCB_ThreadControlCaps+0x3c>
    0x84008002     0xf6    mv a3,s5
    0x84008004     0xf8    mv a2,s6
    0x84008006     0xfa    ld a0,48(sp)          ; stack access
    0x84008008     0xfc    ld a1,56(sp)          ; stack access
    0x8400800a     0xfe    jal ra,ffffffff84003aba <cteInsert>
    0x8400800e    0x102    j ffffffff84007f48 <invokeTCB_ThreadControlCaps+0x3c>
    0x84008010    0x104    sd s1,32(sp)          ; stack access
    0x84008012    0x106    sd zero,40(sp)        ; stack access
    0x84008014    0x108    ld a5,160(sp)         ; stack access
    0x84008016    0x10a    sd a5,48(sp)          ; stack access
    0x84008018    0x10c    ld a5,168(sp)         ; stack access
    0x8400801a    0x10e    sd a5,56(sp)          ; stack access
    0x8400801c    0x110    andi s5,s2,-1024
    0x84008020    0x114    li a1,1
    0x84008022    0x116    mv a0,s5
    0x84008024    0x118    jal ra,ffffffff840071e4 <cteDelete>
    0x84008028    0x11c    mv s0,a0
    0x8400802a    0x11e    bnez a0,ffffffff84007f56 <invokeTCB_ThreadControlCaps+0x4a>
    0x8400802c    0x120    ld a5,176(sp)         ; stack access
    0x8400802e    0x122    ld a2,0(a5)
    0x84008030    0x124    ld a3,8(a5)
    0x84008032    0x126    ld a0,48(sp)          ; stack access
    0x84008034    0x128    ld a1,56(sp)          ; stack access
    0x84008036    0x12a    jal ra,ffffffff84004510 <sameObjectAs>
    0x8400803a    0x12e    beqz a0,ffffffff8400804e <invokeTCB_ThreadControlCaps+0x142>
    0x8400803c    0x130    ld a2,0(s4)
    0x84008040    0x134    ld a3,8(s4)
    0x84008044    0x138    ld a0,32(sp)          ; stack access
    0x84008046    0x13a    ld a1,40(sp)          ; stack access
    0x84008048    0x13c    jal ra,ffffffff84004510 <sameObjectAs>
    0x8400804c    0x140    bnez a0,ffffffff840080a0 <invokeTCB_ThreadControlCaps+0x194>
    0x8400804e    0x142    sd s1,32(sp)          ; stack access
    0x84008050    0x144    sd zero,40(sp)        ; stack access
    0x84008052    0x146    ld a5,184(sp)         ; stack access
    0x84008054    0x148    sd a5,48(sp)          ; stack access
    0x84008056    0x14a    ld a5,192(sp)         ; stack access
    0x84008058    0x14c    sd a5,56(sp)          ; stack access
    0x8400805a    0x14e    addi s5,s5,32
    0x8400805e    0x152    li a1,1
    0x84008060    0x154    mv a0,s5
    0x84008062    0x156    jal ra,ffffffff840071e4 <cteDelete>
    0x84008066    0x15a    mv s0,a0
    0x84008068    0x15c    bnez a0,ffffffff84007f56 <invokeTCB_ThreadControlCaps+0x4a>
    0x8400806c    0x160    ld a5,200(sp)         ; stack access
    0x8400806e    0x162    ld a2,0(a5)
    0x84008070    0x164    ld a3,8(a5)
    0x84008072    0x166    ld a0,48(sp)          ; stack access
    0x84008074    0x168    ld a1,56(sp)          ; stack access
    0x84008076    0x16a    jal ra,ffffffff84004510 <sameObjectAs>
    0x8400807a    0x16e    beqz a0,ffffffff84007f4e <invokeTCB_ThreadControlCaps+0x42>
    0x8400807e    0x172    ld a2,0(s4)
    0x84008082    0x176    ld a3,8(s4)
    0x84008086    0x17a    ld a0,32(sp)          ; stack access
    0x84008088    0x17c    ld a1,40(sp)          ; stack access
    0x8400808a    0x17e    jal ra,ffffffff84004510 <sameObjectAs>
    0x8400808e    0x182    beqz a0,ffffffff84007f4e <invokeTCB_ThreadControlCaps+0x42>
    0x84008092    0x186    mv a3,s5
    0x84008094    0x188    ld a2,200(sp)         ; stack access
    0x84008096    0x18a    ld a0,48(sp)          ; stack access
    0x84008098    0x18c    ld a1,56(sp)          ; stack access
    0x8400809a    0x18e    jal ra,ffffffff84003aba <cteInsert>
    0x8400809e    0x192    j ffffffff84007f4e <invokeTCB_ThreadControlCaps+0x42>
    0x840080a0    0x194    mv a3,s5
    0x840080a2    0x196    ld a2,176(sp)         ; stack access
    0x840080a4    0x198    ld a0,48(sp)          ; stack access
    0x840080a6    0x19a    ld a1,56(sp)          ; stack access
    0x840080a8    0x19c    jal ra,ffffffff84003aba <cteInsert>
    0x840080ac    0x1a0    j ffffffff8400804e <invokeTCB_ThreadControlCaps+0x142>
    0x840080ae    0x1a2    andi s3,s2,-1024
    0x840080b2    0x1a6    addi s3,s3,64
    0x840080b6    0x1aa    li a1,1
    0x840080b8    0x1ac    mv a0,s3
    0x840080ba    0x1ae    jal ra,ffffffff840071e4 <cteDelete>
    0x840080be    0x1b2    mv s0,a0
    0x840080c0    0x1b4    bnez a0,ffffffff84007f56 <invokeTCB_ThreadControlCaps+0x4a>
    0x840080c4    0x1b8    ld a5,208(sp)         ; stack access
    0x840080c6    0x1ba    sd a5,384(s2)
    0x840080ca    0x1be    ld a5,232(sp)         ; stack access
    0x840080cc    0x1c0    beqz a5,ffffffff840080ee <invokeTCB_ThreadControlCaps+0x1e2>
    0x840080ce    0x1c2    ld a2,0(a5)
    0x840080d0    0x1c4    ld a3,8(a5)
    0x840080d2    0x1c6    ld a0,216(sp)         ; stack access
    0x840080d4    0x1c8    ld a1,224(sp)         ; stack access
    0x840080d6    0x1ca    jal ra,ffffffff84004510 <sameObjectAs>
    0x840080da    0x1ce    beqz a0,ffffffff840080ee <invokeTCB_ThreadControlCaps+0x1e2>
    0x840080dc    0x1d0    ld a2,0(s4)
    0x840080e0    0x1d4    ld a3,8(s4)
    0x840080e4    0x1d8    mv a0,s1
    0x840080e6    0x1da    li a1,0
    0x840080e8    0x1dc    jal ra,ffffffff84004510 <sameObjectAs>
    0x840080ec    0x1e0    bnez a0,ffffffff84008100 <invokeTCB_ThreadControlCaps+0x1f4>
    0x840080ee    0x1e2    auipc a5,0x17
    0x840080f2    0x1e6    ld a5,-150(a5) # ffffffff8401f058 <ksCurThread>
    0x840080f6    0x1ea    bne a5,s2,ffffffff84007f56 <invokeTCB_ThreadControlCaps+0x4a>
    0x840080fa    0x1ee    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x840080fe    0x1f2    j ffffffff84007f56 <invokeTCB_ThreadControlCaps+0x4a>
    0x84008100    0x1f4    mv a3,s3
    0x84008102    0x1f6    ld a2,232(sp)         ; stack access
    0x84008104    0x1f8    ld a0,216(sp)         ; stack access
    0x84008106    0x1fa    ld a1,224(sp)         ; stack access
    0x84008108    0x1fc    jal ra,ffffffff84003aba <cteInsert>
    0x8400810c    0x200    j ffffffff840080ee <invokeTCB_ThreadControlCaps+0x1e2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
200 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControlCaps` has 366 nodes.

Section handleRecv (253 of 292)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 169 instructions.


Stack analysis
---------------

26 stack accesses found. Annotated code for `handleRecv`:

    0x84007c52      0x0    addi sp,sp,-112
    0x84007c54      0x2    sd ra,104(sp)         ; stack access
    0x84007c56      0x4    sd s0,96(sp)          ; stack access
    0x84007c58      0x6    sd s1,88(sp)          ; stack access
    0x84007c5a      0x8    sd s2,80(sp)          ; stack access
    0x84007c5c      0xa    mv s0,a0
    0x84007c5e      0xc    mv s1,a1
    0x84007c60      0xe    auipc a1,0x17
    0x84007c64     0x12    ld a1,1016(a1) # ffffffff8401f058 <ksCurThread>
    0x84007c68     0x16    ld s2,72(a1)
    0x84007c6c     0x1a    mv a2,s2
    0x84007c6e     0x1c    addi a0,sp,56
    0x84007c70     0x1e    jal ra,ffffffff84003456 <lookupCap>
    0x84007c74     0x22    ld a5,64(sp)          ; stack access
    0x84007c76     0x24    ld a4,56(sp)          ; stack access
    0x84007c78     0x26    bnez a4,ffffffff84007cc2 <handleRecv+0x70>
    0x84007c7a     0x28    srli a4,a5,0x3b
    0x84007c7e     0x2c    li a3,4
    0x84007c80     0x2e    beq a4,a3,ffffffff84007ce6 <handleRecv+0x94>
    0x84007c84     0x32    li a3,6
    0x84007c86     0x34    beq a4,a3,ffffffff84007db0 <handleRecv+0x15e>
    0x84007c8a     0x38    auipc a4,0x5
    0x84007c8e     0x3c    addi a4,a4,-1162 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007c92     0x40    li a5,1
    0x84007c94     0x42    sd a5,1024(a4)
    0x84007c98     0x46    sd zero,1032(a4)
    0x84007c9c     0x4a    li a5,-1
    0x84007c9e     0x4c    slli a5,a5,0x3f
    0x84007ca0     0x4e    addi a5,a5,1
    0x84007ca2     0x50    sd a5,1096(a4)
    0x84007ca6     0x54    sd s2,1104(a4)
    0x84007caa     0x58    auipc a0,0x17
    0x84007cae     0x5c    ld a0,942(a0) # ffffffff8401f058 <ksCurThread>
    0x84007cb2     0x60    jal ra,ffffffff84006ebc <handleFault>
    0x84007cb6     0x64    ld ra,104(sp)         ; stack access
    0x84007cb8     0x66    ld s0,96(sp)          ; stack access
    0x84007cba     0x68    ld s1,88(sp)          ; stack access
    0x84007cbc     0x6a    ld s2,80(sp)          ; stack access
    0x84007cbe     0x6c    addi sp,sp,112
    0x84007cc0     0x6e    ret
    0x84007cc2     0x70    auipc a4,0x5
    0x84007cc6     0x74    addi a4,a4,-1218 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007cca     0x78    li a5,-1
    0x84007ccc     0x7a    slli a5,a5,0x3f
    0x84007cce     0x7c    addi a5,a5,1
    0x84007cd0     0x7e    sd a5,1096(a4)
    0x84007cd4     0x82    sd s2,1104(a4)
    0x84007cd8     0x86    auipc a0,0x17
    0x84007cdc     0x8a    ld a0,896(a0) # ffffffff8401f058 <ksCurThread>
    0x84007ce0     0x8e    jal ra,ffffffff84006ebc <handleFault>
    0x84007ce4     0x92    j ffffffff84007cb6 <handleRecv+0x64>
    0x84007ce6     0x94    srli a4,a5,0x38
    0x84007cea     0x98    andi a4,a4,1
    0x84007cec     0x9a    beqz a4,ffffffff84007d3a <handleRecv+0xe8>
    0x84007cee     0x9c    sd a5,0(sp)           ; stack access
    0x84007cf0     0x9e    ld a5,72(sp)          ; stack access
    0x84007cf2     0xa0    sd a5,8(sp)           ; stack access
    0x84007cf4     0xa2    sd zero,16(sp)        ; stack access
    0x84007cf6     0xa4    sd zero,24(sp)        ; stack access
    0x84007cf8     0xa6    beqz s1,ffffffff84007d22 <handleRecv+0xd0>
    0x84007cfa     0xa8    auipc a1,0x17
    0x84007cfe     0xac    ld a1,862(a1) # ffffffff8401f058 <ksCurThread>
    0x84007d02     0xb0    ld s1,120(a1)
    0x84007d04     0xb2    mv a2,s1
    0x84007d06     0xb4    addi a0,sp,32
    0x84007d08     0xb6    jal ra,ffffffff84003456 <lookupCap>
    0x84007d0c     0xba    ld a5,32(sp)          ; stack access
    0x84007d0e     0xbc    bnez a5,ffffffff84007d68 <handleRecv+0x116>
    0x84007d10     0xbe    ld a5,40(sp)          ; stack access
    0x84007d12     0xc0    srli a3,a5,0x3b
    0x84007d16     0xc4    li a4,8
    0x84007d18     0xc6    bne a3,a4,ffffffff84007d8c <handleRecv+0x13a>
    0x84007d1c     0xca    sd a5,16(sp)          ; stack access
    0x84007d1e     0xcc    ld a5,48(sp)          ; stack access
    0x84007d20     0xce    sd a5,24(sp)          ; stack access
    0x84007d22     0xd0    ld a4,16(sp)          ; stack access
    0x84007d24     0xd2    ld a5,24(sp)          ; stack access
    0x84007d26     0xd4    mv a3,s0
    0x84007d28     0xd6    ld a1,0(sp)           ; stack access
    0x84007d2a     0xd8    ld a2,8(sp)           ; stack access
    0x84007d2c     0xda    auipc a0,0x17
    0x84007d30     0xde    ld a0,812(a0) # ffffffff8401f058 <ksCurThread>
    0x84007d34     0xe2    jal ra,ffffffff840079d4 <receiveIPC>
    0x84007d38     0xe6    j ffffffff84007cb6 <handleRecv+0x64>
    0x84007d3a     0xe8    auipc a4,0x5
    0x84007d3e     0xec    addi a4,a4,-1338 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007d42     0xf0    li a5,1
    0x84007d44     0xf2    sd a5,1024(a4)
    0x84007d48     0xf6    sd zero,1032(a4)
    0x84007d4c     0xfa    li a5,-1
    0x84007d4e     0xfc    slli a5,a5,0x3f
    0x84007d50     0xfe    addi a5,a5,1
    0x84007d52    0x100    sd a5,1096(a4)
    0x84007d56    0x104    sd s2,1104(a4)
    0x84007d5a    0x108    auipc a0,0x17
    0x84007d5e    0x10c    ld a0,766(a0) # ffffffff8401f058 <ksCurThread>
    0x84007d62    0x110    jal ra,ffffffff84006ebc <handleFault>
    0x84007d66    0x114    j ffffffff84007cb6 <handleRecv+0x64>
    0x84007d68    0x116    auipc a4,0x5
    0x84007d6c    0x11a    addi a4,a4,-1384 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007d70    0x11e    li a5,-1
    0x84007d72    0x120    slli a5,a5,0x3f
    0x84007d74    0x122    addi a5,a5,1
    0x84007d76    0x124    sd a5,1096(a4)
    0x84007d7a    0x128    sd s1,1104(a4)
    0x84007d7e    0x12c    auipc a0,0x17
    0x84007d82    0x130    ld a0,730(a0) # ffffffff8401f058 <ksCurThread>
    0x84007d86    0x134    jal ra,ffffffff84006ebc <handleFault>
    0x84007d8a    0x138    j ffffffff84007cb6 <handleRecv+0x64>
    0x84007d8c    0x13a    auipc a4,0x5
    0x84007d90    0x13e    addi a4,a4,-1420 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007d94    0x142    li a5,-1
    0x84007d96    0x144    slli a5,a5,0x3f
    0x84007d98    0x146    addi a5,a5,1
    0x84007d9a    0x148    sd a5,1096(a4)
    0x84007d9e    0x14c    sd s1,1104(a4)
    0x84007da2    0x150    auipc a0,0x17
    0x84007da6    0x154    ld a0,694(a0) # ffffffff8401f058 <ksCurThread>
    0x84007daa    0x158    jal ra,ffffffff84006ebc <handleFault>
    0x84007dae    0x15c    j ffffffff84007cb6 <handleRecv+0x64>
    0x84007db0    0x15e    slli a4,a5,0x19
    0x84007db4    0x162    srli a4,a4,0x19
    0x84007db6    0x164    srli a3,a5,0x26
    0x84007dba    0x168    andi a3,a3,1
    0x84007dbc    0x16a    beqz a3,ffffffff84007dc4 <handleRecv+0x172>
    0x84007dbe    0x16c    li a3,-1
    0x84007dc0    0x16e    slli a3,a3,0x27
    0x84007dc2    0x170    or a4,a4,a3
    0x84007dc4    0x172    ld a4,24(a4)
    0x84007dc6    0x174    slli a3,a4,0x19
    0x84007dca    0x178    srli a3,a3,0x19
    0x84007dcc    0x17a    srli a4,a4,0x26
    0x84007dce    0x17c    andi a4,a4,1
    0x84007dd0    0x17e    beqz a4,ffffffff84007e1a <handleRecv+0x1c8>
    0x84007dd2    0x180    srli a5,a5,0x3a
    0x84007dd4    0x182    andi a5,a5,1
    0x84007dd6    0x184    bnez a5,ffffffff84007e06 <handleRecv+0x1b4>
    0x84007dd8    0x186    auipc a4,0x5
    0x84007ddc    0x18a    addi a4,a4,-1496 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007de0    0x18e    li a5,1
    0x84007de2    0x190    sd a5,1024(a4)
    0x84007de6    0x194    sd zero,1032(a4)
    0x84007dea    0x198    li a5,-1
    0x84007dec    0x19a    slli a5,a5,0x3f
    0x84007dee    0x19c    addi a5,a5,1
    0x84007df0    0x19e    sd a5,1096(a4)
    0x84007df4    0x1a2    sd s2,1104(a4)
    0x84007df8    0x1a6    auipc a0,0x17
    0x84007dfc    0x1aa    ld a0,608(a0) # ffffffff8401f058 <ksCurThread>
    0x84007e00    0x1ae    jal ra,ffffffff84006ebc <handleFault>
    0x84007e04    0x1b2    j ffffffff84007cb6 <handleRecv+0x64>
    0x84007e06    0x1b4    li a5,-1
    0x84007e08    0x1b6    slli a5,a5,0x27
    0x84007e0a    0x1b8    or a3,a3,a5
    0x84007e0c    0x1ba    auipc a5,0x17
    0x84007e10    0x1be    ld a5,588(a5) # ffffffff8401f058 <ksCurThread>
    0x84007e14    0x1c2    beq a5,a3,ffffffff84007e22 <handleRecv+0x1d0>
    0x84007e18    0x1c6    j ffffffff84007dd8 <handleRecv+0x186>
    0x84007e1a    0x1c8    srli a5,a5,0x3a
    0x84007e1c    0x1ca    andi a5,a5,1
    0x84007e1e    0x1cc    beqz a5,ffffffff84007dd8 <handleRecv+0x186>
    0x84007e20    0x1ce    bnez a3,ffffffff84007e0c <handleRecv+0x1ba>
    0x84007e22    0x1d0    mv a3,s0
    0x84007e24    0x1d2    ld a1,64(sp)          ; stack access
    0x84007e26    0x1d4    ld a2,72(sp)          ; stack access
    0x84007e28    0x1d6    auipc a0,0x17
    0x84007e2c    0x1da    ld a0,560(a0) # ffffffff8401f058 <ksCurThread>
    0x84007e30    0x1de    jal ra,ffffffff84006424 <receiveSignal>
    0x84007e34    0x1e2    j ffffffff84007cb6 <handleRecv+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
169 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 264 nodes.

Section completeSignal (254 of 292)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 44 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `completeSignal`:

    0x840063b8     0x0    addi sp,sp,-16
    0x840063ba     0x2    sd ra,8(sp)           ; stack access
    0x840063bc     0x4    sd s0,0(sp)           ; stack access
    0x840063be     0x6    beqz a1,ffffffff84006420 <completeSignal+0x68>
    0x840063c0     0x8    ld a5,0(a0)
    0x840063c2     0xa    andi a5,a5,3
    0x840063c4     0xc    li a4,2
    0x840063c6     0xe    bne a5,a4,ffffffff84006420 <completeSignal+0x68>
    0x840063ca    0x12    ld a5,16(a0)
    0x840063cc    0x14    sd a5,72(a1)
    0x840063ce    0x16    ld a5,0(a0)
    0x840063d0    0x18    andi a5,a5,-4
    0x840063d2    0x1a    sd a5,0(a0)
    0x840063d4    0x1c    ld a5,368(a1)
    0x840063d8    0x20    beqz a5,ffffffff840063e2 <completeSignal+0x2a>
    0x840063da    0x22    ld ra,8(sp)           ; stack access
    0x840063dc    0x24    ld s0,0(sp)           ; stack access
    0x840063de    0x26    addi sp,sp,16
    0x840063e0    0x28    ret
    0x840063e2    0x2a    ld a5,32(a0)
    0x840063e4    0x2c    slli a4,a5,0x19
    0x840063e8    0x30    srli a4,a4,0x19
    0x840063ea    0x32    srli a5,a5,0x26
    0x840063ec    0x34    andi a5,a5,1
    0x840063ee    0x36    beqz a5,ffffffff8400641a <completeSignal+0x62>
    0x840063f0    0x38    li s0,-1
    0x840063f2    0x3a    slli s0,s0,0x27
    0x840063f4    0x3c    or s0,s0,a4
    0x840063f6    0x3e    ld a5,24(s0)
    0x840063f8    0x40    bnez a5,ffffffff840063da <completeSignal+0x22>
    0x840063fa    0x42    mv a0,s0
    0x840063fc    0x44    jal ra,ffffffff84005052 <schedContext_donate>
    0x84006400    0x48    auipc a5,0x19
    0x84006404    0x4c    ld a5,-984(a5) # ffffffff8401f028 <ksCurSC>
    0x84006408    0x50    beq s0,a5,ffffffff84006412 <completeSignal+0x5a>
    0x8400640c    0x54    mv a0,s0
    0x8400640e    0x56    jal ra,ffffffff840039bc <refill_unblock_check>
    0x84006412    0x5a    mv a0,s0
    0x84006414    0x5c    jal ra,ffffffff84005c9a <schedContext_resume>
    0x84006418    0x60    j ffffffff840063da <completeSignal+0x22>
    0x8400641a    0x62    beqz a4,ffffffff840063da <completeSignal+0x22>
    0x8400641c    0x64    mv s0,a4
    0x8400641e    0x66    j ffffffff840063f6 <completeSignal+0x3e>
    0x84006420    0x68    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 76 nodes.

Section restart (255 of 292)
============================

Deriving specifications
-----------------------

Section `restart` consists of 36 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `restart`:

    0x84005cf0     0x0    addi sp,sp,-16
    0x84005cf2     0x2    sd ra,8(sp)           ; stack access
    0x84005cf4     0x4    sd s0,0(sp)           ; stack access
    0x84005cf6     0x6    mv s0,a0
    0x84005cf8     0x8    ld a5,280(a0)
    0x84005cfc     0xc    andi a5,a5,15
    0x84005cfe     0xe    beqz a5,ffffffff84005d08 <restart+0x18>
    0x84005d00    0x10    addi a5,a5,-3
    0x84005d02    0x12    li a4,3
    0x84005d04    0x14    bltu a4,a5,ffffffff84005d2c <restart+0x3c>
    0x84005d08    0x18    mv a0,s0
    0x84005d0a    0x1a    jal ra,ffffffff840054d2 <cancelIPC>
    0x84005d0e    0x1e    li a1,2
    0x84005d10    0x20    mv a0,s0
    0x84005d12    0x22    jal ra,ffffffff84004a52 <setThreadState>
    0x84005d16    0x26    ld a0,368(s0)
    0x84005d1a    0x2a    jal ra,ffffffff84005c9a <schedContext_resume>
    0x84005d1e    0x2e    ld a5,280(s0)
    0x84005d22    0x32    andi a5,a5,15
    0x84005d24    0x34    addi a5,a5,-1
    0x84005d26    0x36    li a4,1
    0x84005d28    0x38    bgeu a4,a5,ffffffff84005d34 <restart+0x44>
    0x84005d2c    0x3c    ld ra,8(sp)           ; stack access
    0x84005d2e    0x3e    ld s0,0(sp)           ; stack access
    0x84005d30    0x40    addi sp,sp,16
    0x84005d32    0x42    ret
    0x84005d34    0x44    ld a5,368(s0)
    0x84005d38    0x48    beqz a5,ffffffff84005d2c <restart+0x3c>
    0x84005d3a    0x4a    ld a5,64(a5)
    0x84005d3c    0x4c    beqz a5,ffffffff84005d2c <restart+0x3c>
    0x84005d3e    0x4e    ld a5,288(s0)
    0x84005d42    0x52    andi a5,a5,1
    0x84005d44    0x54    bnez a5,ffffffff84005d2c <restart+0x3c>
    0x84005d46    0x56    mv a0,s0
    0x84005d48    0x58    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x84005d4c    0x5c    j ffffffff84005d2c <restart+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 63 nodes.

Section cancelIPC (256 of 292)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 102 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelIPC`:

    0x840054d2     0x0    addi sp,sp,-48
    0x840054d4     0x2    sd ra,40(sp)          ; stack access
    0x840054d6     0x4    sd s0,32(sp)          ; stack access
    0x840054d8     0x6    sd s1,24(sp)          ; stack access
    0x840054da     0x8    mv s0,a0
    0x840054dc     0xa    sd zero,312(a0)
    0x840054e0     0xe    sd zero,320(a0)
    0x840054e4    0x12    ld a4,280(a0)
    0x840054e8    0x16    andi a5,a4,15
    0x840054ec    0x1a    li a3,5
    0x840054ee    0x1c    beq a5,a3,ffffffff840055c4 <cancelIPC+0xf2>
    0x840054f2    0x20    bltu a3,a5,ffffffff84005588 <cancelIPC+0xb6>
    0x840054f6    0x24    addi a5,a5,-3
    0x840054f8    0x26    li a3,1
    0x840054fa    0x28    bltu a3,a5,ffffffff840055ba <cancelIPC+0xe8>
    0x840054fe    0x2c    lui a5,0xe0000
    0x84005502    0x30    srli a5,a5,0x19
    0x84005504    0x32    and a5,a5,a4
    0x84005506    0x34    srli a4,a4,0x26
    0x84005508    0x36    andi a4,a4,1
    0x8400550a    0x38    beqz a4,ffffffff84005512 <cancelIPC+0x40>
    0x8400550c    0x3a    li a4,-1
    0x8400550e    0x3c    slli a4,a4,0x27
    0x84005510    0x3e    or a5,a5,a4
    0x84005512    0x40    mv s1,a5
    0x84005514    0x42    ld a1,8(a5)
    0x84005516    0x44    ld a5,0(a5)
    0x84005518    0x46    lui a2,0xf8000
    0x8400551c    0x4a    srli a2,a2,0x19
    0x8400551e    0x4c    and a2,a2,a5
    0x84005520    0x4e    srli a5,a5,0x26
    0x84005522    0x50    andi a5,a5,1
    0x84005524    0x52    beqz a5,ffffffff8400552c <cancelIPC+0x5a>
    0x84005526    0x54    li a5,-1
    0x84005528    0x56    slli a5,a5,0x27
    0x8400552a    0x58    or a2,a2,a5
    0x8400552c    0x5a    mv a0,s0
    0x8400552e    0x5c    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x84005532    0x60    sd a0,0(sp)           ; stack access
    0x84005534    0x62    sd a1,8(sp)           ; stack access
    0x84005536    0x64    sd a0,8(s1)
    0x84005538    0x66    ld a5,0(s1)
    0x8400553a    0x68    li a4,-1
    0x8400553c    0x6a    slli a4,a4,0x27
    0x8400553e    0x6c    addi a4,a4,3
    0x84005540    0x6e    and a5,a5,a4
    0x84005542    0x70    lui a4,0xf8000
    0x84005546    0x74    srli a4,a4,0x19
    0x84005548    0x76    and a1,a1,a4
    0x8400554a    0x78    or a1,a1,a5
    0x8400554c    0x7a    beqz a0,ffffffff840055aa <cancelIPC+0xd8>
    0x8400554e    0x7c    sd a1,0(s1)
    0x84005550    0x7e    ld a5,288(s0)
    0x84005554    0x82    srli a5,a5,0x1
    0x84005556    0x84    lui a4,0xe0000
    0x8400555a    0x88    srli a4,a4,0x19
    0x8400555c    0x8a    and a4,a4,a5
    0x8400555e    0x8c    srli a5,a5,0x26
    0x84005560    0x8e    andi a5,a5,1
    0x84005562    0x90    beqz a5,ffffffff840055b0 <cancelIPC+0xde>
    0x84005564    0x92    li a5,-1
    0x84005566    0x94    slli a5,a5,0x27
    0x84005568    0x96    or a4,a4,a5
    0x8400556a    0x98    ld a0,0(a4)
    0x8400556c    0x9a    ld a3,288(a0)
    0x84005570    0x9e    li a5,-1
    0x84005572    0xa0    slli a5,a5,0x28
    0x84005574    0xa2    addi a5,a5,31
    0x84005576    0xa4    and a5,a5,a3
    0x84005578    0xa6    sd a5,288(a0)
    0x8400557c    0xaa    sd zero,0(a4) # ffffffffe0000000 <ki_end+0x5bfdc000>
    0x84005580    0xae    li a1,0
    0x84005582    0xb0    jal ra,ffffffff84004a52 <setThreadState>
    0x84005586    0xb4    j ffffffff840055b2 <cancelIPC+0xe0>
    0x84005588    0xb6    li a3,6
    0x8400558a    0xb8    bne a5,a3,ffffffff840055ba <cancelIPC+0xe8>
    0x8400558e    0xbc    lui a1,0xe0000
    0x84005592    0xc0    srli a1,a1,0x19
    0x84005594    0xc2    and a1,a1,a4
    0x84005596    0xc4    srli a4,a4,0x26
    0x84005598    0xc6    andi a4,a4,1
    0x8400559a    0xc8    beqz a4,ffffffff840055a2 <cancelIPC+0xd0>
    0x8400559c    0xca    li a5,-1
    0x8400559e    0xcc    slli a5,a5,0x27
    0x840055a0    0xce    or a1,a1,a5
    0x840055a2    0xd0    mv a0,s0
    0x840055a4    0xd2    jal ra,ffffffff84005464 <cancelSignal>
    0x840055a8    0xd6    j ffffffff840055ba <cancelIPC+0xe8>
    0x840055aa    0xd8    andi a1,a1,-4
    0x840055ac    0xda    sd a1,0(s1)
    0x840055ae    0xdc    j ffffffff84005550 <cancelIPC+0x7e>
    0x840055b0    0xde    bnez a4,ffffffff8400556a <cancelIPC+0x98>
    0x840055b2    0xe0    li a1,0
    0x840055b4    0xe2    mv a0,s0
    0x840055b6    0xe4    jal ra,ffffffff84004a52 <setThreadState>
    0x840055ba    0xe8    ld ra,40(sp)          ; stack access
    0x840055bc    0xea    ld s0,32(sp)          ; stack access
    0x840055be    0xec    ld s1,24(sp)          ; stack access
    0x840055c0    0xee    addi sp,sp,48
    0x840055c2    0xf0    ret
    0x840055c4    0xf2    jal ra,ffffffff84004c50 <reply_remove_tcb>
    0x840055c8    0xf6    j ffffffff840055ba <cancelIPC+0xe8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
102 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 150 nodes.

Section setMRs_fault (257 of 292)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 80 instructions.

LWU..

Stack analysis
---------------

8 stack accesses found. Annotated code for `setMRs_fault`:

    0x840047ca     0x0    addi sp,sp,-32
    0x840047cc     0x2    sd ra,24(sp)          ; stack access
    0x840047ce     0x4    sd s0,16(sp)          ; stack access
    0x840047d0     0x6    sd s1,8(sp)           ; stack access
    0x840047d2     0x8    sd s2,0(sp)           ; stack access
    0x840047d4     0xa    mv s0,a0
    0x840047d6     0xc    mv s2,a1
    0x840047d8     0xe    mv s1,a2
    0x840047da    0x10    ld a5,312(a0)
    0x840047de    0x14    andi a3,a5,15
    0x840047e2    0x18    li a4,3
    0x840047e4    0x1a    beq a3,a4,ffffffff8400486e <setMRs_fault+0xa4>
    0x840047e8    0x1e    andi a5,a5,12
    0x840047ea    0x20    bnez a5,ffffffff84004812 <setMRs_fault+0x48>
    0x840047ec    0x22    li a5,1
    0x840047ee    0x24    beq a3,a5,ffffffff84004834 <setMRs_fault+0x6a>
    0x840047f2    0x28    li a5,2
    0x840047f4    0x2a    bne a3,a5,ffffffff84004890 <setMRs_fault+0xc6>
    0x840047f8    0x2e    mv a4,a2
    0x840047fa    0x30    li a3,10
    0x840047fc    0x32    li a2,0
    0x840047fe    0x34    jal ra,ffffffff840020cc <copyMRsFault>
    0x84004802    0x38    beqz s1,ffffffff8400486a <setMRs_fault+0xa0>
    0x84004804    0x3a    ld a5,320(s0)
    0x84004808    0x3e    sd a5,88(s1)
    0x8400480a    0x40    li a0,11
    0x8400480c    0x42    slli a0,a0,0x20
    0x8400480e    0x44    srli a0,a0,0x20
    0x84004810    0x46    j ffffffff8400485e <setMRs_fault+0x94>
    0x84004812    0x48    li a5,5
    0x84004814    0x4a    bne a3,a5,ffffffff84004890 <setMRs_fault+0xc6>
    0x84004818    0x4e    ld a5,320(a0)
    0x8400481c    0x52    sd a5,88(a1)
    0x8400481e    0x54    ld a5,368(a0)
    0x84004822    0x58    li a0,1
    0x84004824    0x5a    beqz a5,ffffffff8400485e <setMRs_fault+0x94>
    0x84004826    0x5c    mv a0,a5
    0x84004828    0x5e    jal ra,ffffffff840047c0 <schedContext_updateConsumed>
    0x8400482c    0x62    sd a0,96(s2)
    0x84004830    0x66    li a0,2
    0x84004832    0x68    j ffffffff8400485e <setMRs_fault+0x94>
    0x84004834    0x6a    ld a5,264(a0)
    0x84004838    0x6e    sd a5,88(a1)
    0x8400483a    0x70    ld a5,320(a0)
    0x8400483e    0x74    sd a5,96(a1)
    0x84004840    0x76    ld a5,312(a0)
    0x84004844    0x7a    srli a5,a5,0x3f
    0x84004846    0x7c    sd a5,104(a1)
    0x84004848    0x7e    li a4,3
    0x8400484a    0x80    ld a2,328(a0)
    0x8400484e    0x84    ld a3,336(a0)
    0x84004852    0x88    mv a1,s1
    0x84004854    0x8a    mv a0,s2
    0x84004856    0x8c    jal ra,ffffffff84002430 <setMRs_lookup_failure>
    0x8400485a    0x90    slli a0,a0,0x20
    0x8400485c    0x92    srli a0,a0,0x20
    0x8400485e    0x94    ld ra,24(sp)          ; stack access
    0x84004860    0x96    ld s0,16(sp)          ; stack access
    0x84004862    0x98    ld s1,8(sp)           ; stack access
    0x84004864    0x9a    ld s2,0(sp)           ; stack access
    0x84004866    0x9c    addi sp,sp,32
    0x84004868    0x9e    ret
    0x8400486a    0xa0    li a0,4
    0x8400486c    0xa2    j ffffffff8400480c <setMRs_fault+0x42>
    0x8400486e    0xa4    mv a4,a2
    0x84004870    0xa6    li a3,2
    0x84004872    0xa8    li a2,1
    0x84004874    0xaa    jal ra,ffffffff840020cc <copyMRsFault>
    0x84004878    0xae    lwu a5,316(s0)
    0x8400487c    0xb2    sd a5,104(s2)
    0x84004880    0xb6    ld a5,312(s0)
    0x84004884    0xba    srliw a5,a5,0x4
    0x84004888    0xbe    sd a5,112(s2)
    0x8400488c    0xc2    li a0,4
    0x8400488e    0xc4    j ffffffff8400485e <setMRs_fault+0x94>
    0x84004890    0xc6    mv a2,s1
    0x84004892    0xc8    mv a1,s2
    0x84004894    0xca    mv a0,s0
    0x84004896    0xcc    jal ra,ffffffff840026cc <Arch_setMRs_fault>
    0x8400489a    0xd0    j ffffffff8400485e <setMRs_fault+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 127 nodes.

Section create_it_address_space (258 of 292)
============================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 125 instructions.


Stack analysis
---------------

49 stack accesses found. Annotated code for `create_it_address_space`:

    0x840008ca      0x0    addi sp,sp,-240
    0x840008cc      0x2    sd ra,232(sp)         ; stack access
    0x840008ce      0x4    sd s0,224(sp)         ; stack access
    0x840008d0      0x6    sd s1,216(sp)         ; stack access
    0x840008d2      0x8    sd s2,208(sp)         ; stack access
    0x840008d4      0xa    sd s3,200(sp)         ; stack access
    0x840008d6      0xc    sd s4,192(sp)         ; stack access
    0x840008d8      0xe    sd s5,184(sp)         ; stack access
    0x840008da     0x10    sd s6,176(sp)         ; stack access
    0x840008dc     0x12    sd s7,168(sp)         ; stack access
    0x840008de     0x14    sd s8,160(sp)         ; stack access
    0x840008e0     0x16    sd s9,152(sp)         ; stack access
    0x840008e2     0x18    sd s10,144(sp)        ; stack access
    0x840008e4     0x1a    sd s11,136(sp)        ; stack access
    0x840008e6     0x1c    sd a0,48(sp)          ; stack access
    0x840008e8     0x1e    sd a1,56(sp)          ; stack access
    0x840008ea     0x20    sd a2,32(sp)          ; stack access
    0x840008ec     0x22    mv s6,a3
    0x840008ee     0x24    auipc s0,0x1
    0x840008f2     0x28    addi s0,s0,202 # ffffffff840019b8 <ndks_boot>
    0x840008f6     0x2c    ld a0,616(s0)
    0x840008fa     0x30    jal ra,ffffffff84002702 <copyGlobalMappings>
    0x840008fe     0x34    ld a5,616(s0)
    0x84000902     0x38    slli s4,a5,0x19
    0x84000906     0x3c    srli s4,s4,0x19
    0x8400090a     0x40    lui a4,0x300
    0x8400090e     0x44    addi a4,a4,1
    0x84000910     0x46    slli a4,a4,0x27
    0x84000912     0x48    or s4,s4,a4
    0x84000916     0x4c    slli a5,a5,0x9
    0x84000918     0x4e    lui a4,0xfe000
    0x8400091c     0x52    srli a4,a4,0x10
    0x8400091e     0x54    and a5,a5,a4
    0x84000920     0x56    li a4,1
    0x84000922     0x58    slli a4,a4,0x30
    0x84000924     0x5a    or s1,a5,a4
    0x84000928     0x5e    sd s1,8(sp)           ; stack access
    0x8400092a     0x60    ld a5,592(s0)
    0x8400092e     0x64    sd a5,24(sp)          ; stack access
    0x84000930     0x66    ld a0,48(sp)          ; stack access
    0x84000932     0x68    ld a1,56(sp)          ; stack access
    0x84000934     0x6a    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000938     0x6e    sd s4,96(a0)
    0x8400093c     0x72    sd s1,104(a0)
    0x8400093e     0x74    sd zero,112(a0)
    0x84000942     0x78    li a5,3
    0x84000944     0x7a    sd a5,120(a0)
    0x84000946     0x7c    li a5,30
    0x84000948     0x7e    sd a5,16(sp)          ; stack access
    0x8400094a     0x80    mv s3,s0
    0x8400094c     0x82    li s8,-1
    0x8400094e     0x84    srli s8,s8,0x19
    0x84000952     0x88    lui s5,0x300
    0x84000956     0x8c    addi s5,s5,1
    0x84000958     0x8e    slli s5,s5,0x27
    0x8400095a     0x90    lui s7,0xfe000
    0x8400095e     0x94    srli s7,s7,0x10
    0x84000962     0x98    ld a4,16(sp)          ; stack access
    0x84000964     0x9a    sext.w a5,a4
    0x84000968     0x9e    ld s2,32(sp)          ; stack access
    0x8400096a     0xa0    srl s2,s2,a4
    0x8400096e     0xa4    sll s2,s2,a4
    0x84000972     0xa8    bgeu s2,s6,ffffffff840009c0 <create_it_address_space+0xf6>
    0x84000976     0xac    li s10,1
    0x84000978     0xae    sll s10,s10,a5
    0x8400097c     0xb2    lui s11,0x1
    0x8400097e     0xb4    li s9,1
    0x84000980     0xb6    slli s9,s9,0x30
    0x84000982     0xb8    ld s0,672(s3) # ffffffff800002a0 <KERNEL_OFFSET+0x800002a0>
    0x84000986     0xbc    add a5,s0,s11
    0x8400098a     0xc0    sd a5,672(s3)
    0x8400098e     0xc4    and s1,s2,s8
    0x84000992     0xc8    or s1,s1,s5
    0x84000996     0xcc    slli s0,s0,0x9
    0x84000998     0xce    and s0,s0,s7
    0x8400099c     0xd2    or s0,s0,s9
    0x840009a0     0xd6    mv a2,s1
    0x840009a2     0xd8    mv a3,s0
    0x840009a4     0xda    mv a0,s4
    0x840009a6     0xdc    ld a1,8(sp)           ; stack access
    0x840009a8     0xde    jal ra,ffffffff840003c6 <map_it_pt_cap>
    0x840009ac     0xe2    mv a2,s1
    0x840009ae     0xe4    mv a3,s0
    0x840009b0     0xe6    ld a0,48(sp)          ; stack access
    0x840009b2     0xe8    ld a1,56(sp)          ; stack access
    0x840009b4     0xea    jal ra,ffffffff84000870 <provide_cap>
    0x840009b8     0xee    beqz a0,ffffffff84000a0c <create_it_address_space+0x142>
    0x840009ba     0xf0    add s2,s2,s10
    0x840009bc     0xf2    bltu s2,s6,ffffffff84000982 <create_it_address_space+0xb8>
    0x840009c0     0xf6    ld a5,16(sp)          ; stack access
    0x840009c2     0xf8    addiw a5,a5,-9
    0x840009c4     0xfa    mv a4,a5
    0x840009c6     0xfc    sd a5,16(sp)          ; stack access
    0x840009c8     0xfe    li a5,12
    0x840009ca    0x100    bne a4,a5,ffffffff84000962 <create_it_address_space+0x98>
    0x840009ce    0x104    auipc a5,0x1
    0x840009d2    0x108    addi a5,a5,-22 # ffffffff840019b8 <ndks_boot>
    0x840009d6    0x10c    ld a4,592(a5)
    0x840009da    0x110    ld a5,584(a5)
    0x840009de    0x114    ld a3,24(sp)          ; stack access
    0x840009e0    0x116    sd a3,88(a5)
    0x840009e2    0x118    sd a4,96(a5)
    0x840009e4    0x11a    sd s4,112(sp)         ; stack access
    0x840009e6    0x11c    ld a5,8(sp)           ; stack access
    0x840009e8    0x11e    sd a5,120(sp)         ; stack access
    0x840009ea    0x120    ld a0,112(sp)         ; stack access
    0x840009ec    0x122    ld a1,120(sp)         ; stack access
    0x840009ee    0x124    ld ra,232(sp)         ; stack access
    0x840009f0    0x126    ld s0,224(sp)         ; stack access
    0x840009f2    0x128    ld s1,216(sp)         ; stack access
    0x840009f4    0x12a    ld s2,208(sp)         ; stack access
    0x840009f6    0x12c    ld s3,200(sp)         ; stack access
    0x840009f8    0x12e    ld s4,192(sp)         ; stack access
    0x840009fa    0x130    ld s5,184(sp)         ; stack access
    0x840009fc    0x132    ld s6,176(sp)         ; stack access
    0x840009fe    0x134    ld s7,168(sp)         ; stack access
    0x84000a00    0x136    ld s8,160(sp)         ; stack access
    0x84000a02    0x138    ld s9,152(sp)         ; stack access
    0x84000a04    0x13a    ld s10,144(sp)        ; stack access
    0x84000a06    0x13c    ld s11,136(sp)        ; stack access
    0x84000a08    0x13e    addi sp,sp,240
    0x84000a0a    0x140    ret
    0x84000a0c    0x142    sd zero,112(sp)       ; stack access
    0x84000a0e    0x144    sd zero,120(sp)       ; stack access
    0x84000a10    0x146    j ffffffff840009ea <create_it_address_space+0x120>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
125 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 200 nodes.

Section doNormalTransfer (259 of 292)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 146 instructions.

SLLW.....

Stack analysis
---------------

40 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84006a5c      0x0    addi sp,sp,-192
    0x84006a5e      0x2    sd ra,184(sp)         ; stack access
    0x84006a60      0x4    sd s0,176(sp)         ; stack access
    0x84006a62      0x6    sd s1,168(sp)         ; stack access
    0x84006a64      0x8    sd s2,160(sp)         ; stack access
    0x84006a66      0xa    sd s3,152(sp)         ; stack access
    0x84006a68      0xc    sd s4,144(sp)         ; stack access
    0x84006a6a      0xe    sd s5,136(sp)         ; stack access
    0x84006a6c     0x10    sd s6,128(sp)         ; stack access
    0x84006a6e     0x12    sd s7,120(sp)         ; stack access
    0x84006a70     0x14    sd s8,112(sp)         ; stack access
    0x84006a72     0x16    sd s9,104(sp)         ; stack access
    0x84006a74     0x18    sd s10,96(sp)         ; stack access
    0x84006a76     0x1a    sd s11,88(sp)         ; stack access
    0x84006a78     0x1c    mv s2,a0
    0x84006a7a     0x1e    mv s6,a1
    0x84006a7c     0x20    mv s5,a2
    0x84006a7e     0x22    mv s4,a3
    0x84006a80     0x24    mv s1,a5
    0x84006a82     0x26    mv s3,a6
    0x84006a84     0x28    ld s0,80(a0)
    0x84006a86     0x2a    andi a3,s0,127
    0x84006a8a     0x2e    li a5,120
    0x84006a8e     0x32    bgeu a5,a3,ffffffff84006a9a <doNormalTransfer+0x3e>
    0x84006a92     0x36    andi s0,s0,-128
    0x84006a96     0x3a    ori s0,s0,120
    0x84006a9a     0x3e    bnez a4,ffffffff84006af8 <doNormalTransfer+0x9c>
    0x84006a9c     0x40    auipc a5,0x6
    0x84006aa0     0x44    sd zero,1524(a5) # ffffffff8400d090 <current_extra_caps>
    0x84006aa4     0x48    andi a4,s0,127
    0x84006aa8     0x4c    mv a3,s3
    0x84006aaa     0x4e    mv a2,s1
    0x84006aac     0x50    mv a1,s6
    0x84006aae     0x52    mv a0,s2
    0x84006ab0     0x54    jal ra,ffffffff840069ec <copyMRs>
    0x84006ab4     0x58    mv s2,a0
    0x84006ab6     0x5a    lui a5,0xfffff
    0x84006ab8     0x5c    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfdb07f>
    0x84006abc     0x60    and s0,s0,a5
    0x84006abe     0x62    auipc a5,0x6
    0x84006ac2     0x66    ld a5,1490(a5) # ffffffff8400d090 <current_extra_caps>
    0x84006ac6     0x6a    bnez a5,ffffffff84006b0e <doNormalTransfer+0xb2>
    0x84006ac8     0x6c    andi s0,s0,-128
    0x84006acc     0x70    andi s2,s2,127
    0x84006ad0     0x74    or s0,s0,s2
    0x84006ad4     0x78    sd s0,80(s1)
    0x84006ad6     0x7a    sd s4,72(s1)
    0x84006ada     0x7e    ld ra,184(sp)         ; stack access
    0x84006adc     0x80    ld s0,176(sp)         ; stack access
    0x84006ade     0x82    ld s1,168(sp)         ; stack access
    0x84006ae0     0x84    ld s2,160(sp)         ; stack access
    0x84006ae2     0x86    ld s3,152(sp)         ; stack access
    0x84006ae4     0x88    ld s4,144(sp)         ; stack access
    0x84006ae6     0x8a    ld s5,136(sp)         ; stack access
    0x84006ae8     0x8c    ld s6,128(sp)         ; stack access
    0x84006aea     0x8e    ld s7,120(sp)         ; stack access
    0x84006aec     0x90    ld s8,112(sp)         ; stack access
    0x84006aee     0x92    ld s9,104(sp)         ; stack access
    0x84006af0     0x94    ld s10,96(sp)         ; stack access
    0x84006af2     0x96    ld s11,88(sp)         ; stack access
    0x84006af4     0x98    addi sp,sp,192
    0x84006af6     0x9a    ret
    0x84006af8     0x9c    mv a2,s0
    0x84006afa     0x9e    mv a1,s6
    0x84006afc     0xa0    mv a0,s2
    0x84006afe     0xa2    jal ra,ffffffff84006956 <lookupExtraCaps>
    0x84006b02     0xa6    beqz a0,ffffffff84006aa4 <doNormalTransfer+0x48>
    0x84006b04     0xa8    auipc a5,0x6
    0x84006b08     0xac    sd zero,1420(a5) # ffffffff8400d090 <current_extra_caps>
    0x84006b0c     0xb0    j ffffffff84006aa4 <doNormalTransfer+0x48>
    0x84006b0e     0xb2    beqz s3,ffffffff84006ac8 <doNormalTransfer+0x6c>
    0x84006b12     0xb6    mv a1,s3
    0x84006b14     0xb8    mv a0,s1
    0x84006b16     0xba    jal ra,ffffffff84003dc4 <getReceiveSlots>
    0x84006b1a     0xbe    mv s8,a0
    0x84006b1c     0xc0    auipc s9,0x6
    0x84006b20     0xc4    addi s9,s9,1396 # ffffffff8400d090 <current_extra_caps>
    0x84006b24     0xc8    addi s3,s3,976
    0x84006b28     0xcc    li s7,0
    0x84006b2a     0xce    li s10,-1
    0x84006b2c     0xd0    srli s11,s10,0x19
    0x84006b30     0xd4    li a5,1
    0x84006b32     0xd6    slli a5,a5,0x26
    0x84006b34     0xd8    sd a5,8(sp)           ; stack access
    0x84006b36     0xda    lui a5,0x1
    0x84006b38     0xdc    addi a5,a5,-512 # e00 <KERNEL_OFFSET-0xfffffffefffff200>
    0x84006b3c     0xe0    sd a5,16(sp)          ; stack access
    0x84006b3e     0xe2    lui a5,0xfffff
    0x84006b40     0xe4    addi a5,a5,511 # fffffffffffff1ff <ki_end+0x7bfdb1ff>
    0x84006b44     0xe8    sd a5,24(sp)          ; stack access
    0x84006b46     0xea    j ffffffff84006b7c <doNormalTransfer+0x120>
    0x84006b48     0xec    beqz s8,ffffffff84006bce <doNormalTransfer+0x172>
    0x84006b4c     0xf0    sd a2,40(sp)          ; stack access
    0x84006b4e     0xf2    sd a3,48(sp)          ; stack access
    0x84006b50     0xf4    mv a1,s6
    0x84006b52     0xf6    addi a0,sp,56
    0x84006b54     0xf8    jal ra,ffffffff840044a4 <deriveCap>
    0x84006b58     0xfc    ld a5,56(sp)          ; stack access
    0x84006b5a     0xfe    bnez a5,ffffffff84006bce <doNormalTransfer+0x172>
    0x84006b5c    0x100    ld a5,64(sp)          ; stack access
    0x84006b5e    0x102    srli a5,a5,0x3b
    0x84006b60    0x104    beqz a5,ffffffff84006bce <doNormalTransfer+0x172>
    0x84006b62    0x106    mv a3,s8
    0x84006b64    0x108    mv a2,s6
    0x84006b66    0x10a    ld a0,64(sp)          ; stack access
    0x84006b68    0x10c    ld a1,72(sp)          ; stack access
    0x84006b6a    0x10e    jal ra,ffffffff84003aba <cteInsert>
    0x84006b6e    0x112    li s8,0
    0x84006b70    0x114    addi s7,s7,1
    0x84006b72    0x116    addi s9,s9,8
    0x84006b74    0x118    addi s3,s3,8
    0x84006b76    0x11a    li a5,3
    0x84006b78    0x11c    beq s7,a5,ffffffff84006bce <doNormalTransfer+0x172>
    0x84006b7c    0x120    ld s6,0(s9)
    0x84006b80    0x124    beqz s6,ffffffff84006bce <doNormalTransfer+0x172>
    0x84006b84    0x128    ld a2,0(s6) # fffffffffe000000 <ki_end+0x79fdc000>
    0x84006b88    0x12c    sd a2,40(sp)          ; stack access
    0x84006b8a    0x12e    ld a3,8(s6)
    0x84006b8e    0x132    sd a3,48(sp)          ; stack access
    0x84006b90    0x134    srli a4,a2,0x3b
    0x84006b94    0x138    li a5,4
    0x84006b96    0x13a    bne a4,a5,ffffffff84006b48 <doNormalTransfer+0xec>
    0x84006b9a    0x13e    and a5,a2,s11
    0x84006b9e    0x142    ld a4,8(sp)           ; stack access
    0x84006ba0    0x144    and a4,a4,a2
    0x84006ba2    0x146    beqz a4,ffffffff84006baa <doNormalTransfer+0x14e>
    0x84006ba4    0x148    slli a4,s10,0x27
    0x84006ba8    0x14c    or a5,a5,a4
    0x84006baa    0x14e    bne s5,a5,ffffffff84006b48 <doNormalTransfer+0xec>
    0x84006bae    0x152    sd a3,0(s3)
    0x84006bb2    0x156    srli a5,s0,0x9
    0x84006bb6    0x15a    andi a5,a5,7
    0x84006bb8    0x15c    li a4,1
    0x84006bba    0x15e    sllw a4,a4,s7
    0x84006bbe    0x162    or a5,a5,a4
    0x84006bc0    0x164    slli a5,a5,0x9
    0x84006bc2    0x166    ld a4,16(sp)          ; stack access
    0x84006bc4    0x168    and a5,a5,a4
    0x84006bc6    0x16a    ld a4,24(sp)          ; stack access
    0x84006bc8    0x16c    and s0,s0,a4
    0x84006bca    0x16e    or s0,s0,a5
    0x84006bcc    0x170    j ffffffff84006b70 <doNormalTransfer+0x114>
    0x84006bce    0x172    slli a5,s7,0x7
    0x84006bd2    0x176    andi a5,a5,384
    0x84006bd6    0x17a    or s0,s0,a5
    0x84006bd8    0x17c    j ffffffff84006ac8 <doNormalTransfer+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
146 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 228 nodes.

Section receiveSignal (260 of 292)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 149 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `receiveSignal`:

    0x84006424      0x0    addi sp,sp,-48
    0x84006426      0x2    sd ra,40(sp)          ; stack access
    0x84006428      0x4    sd s0,32(sp)          ; stack access
    0x8400642a      0x6    sd s1,24(sp)          ; stack access
    0x8400642c      0x8    mv s0,a0
    0x8400642e      0xa    sd a1,0(sp)           ; stack access
    0x84006430      0xc    sd a2,8(sp)           ; stack access
    0x84006432      0xe    slli a5,a1,0x19
    0x84006436     0x12    srli a5,a5,0x19
    0x84006438     0x14    srli a1,a1,0x26
    0x8400643a     0x16    andi a1,a1,1
    0x8400643c     0x18    beqz a1,ffffffff84006444 <receiveSignal+0x20>
    0x8400643e     0x1a    li a4,-1
    0x84006440     0x1c    slli a4,a4,0x27
    0x84006442     0x1e    or a5,a5,a4
    0x84006444     0x20    mv s1,a5
    0x84006446     0x22    ld a4,0(a5)
    0x84006448     0x24    andi a2,a4,3
    0x8400644c     0x28    andi a4,a4,2
    0x8400644e     0x2a    beqz a4,ffffffff84006472 <receiveSignal+0x4e>
    0x84006450     0x2c    li a5,2
    0x84006452     0x2e    bne a2,a5,ffffffff84006468 <receiveSignal+0x44>
    0x84006456     0x32    ld a5,16(s1)
    0x84006458     0x34    sd a5,72(s0)
    0x8400645a     0x36    ld a5,0(s1)
    0x8400645c     0x38    andi a5,a5,-4
    0x8400645e     0x3a    sd a5,0(s1)
    0x84006460     0x3c    ld a5,368(s0)
    0x84006464     0x40    beqz a5,ffffffff84006562 <receiveSignal+0x13e>
    0x84006468     0x44    ld ra,40(sp)          ; stack access
    0x8400646a     0x46    ld s0,32(sp)          ; stack access
    0x8400646c     0x48    ld s1,24(sp)          ; stack access
    0x8400646e     0x4a    addi sp,sp,48
    0x84006470     0x4c    ret
    0x84006472     0x4e    beqz a3,ffffffff8400655c <receiveSignal+0x138>
    0x84006474     0x50    ld a3,280(s0)
    0x84006478     0x54    li a4,-1
    0x8400647a     0x56    slli a2,a4,0x27
    0x8400647e     0x5a    and a3,a3,a2
    0x84006480     0x5c    lui a2,0xe0000
    0x84006484     0x60    srli a2,a2,0x19
    0x84006486     0x62    and a5,a5,a2
    0x84006488     0x64    or a5,a5,a3
    0x8400648a     0x66    ori a5,a5,6
    0x8400648e     0x6a    sd a5,280(s0)
    0x84006492     0x6e    ld a3,32(s1)
    0x84006494     0x70    srli a5,a4,0x19
    0x84006498     0x74    and a5,a5,a3
    0x8400649a     0x76    srli a3,a3,0x26
    0x8400649c     0x78    andi a3,a3,1
    0x8400649e     0x7a    beqz a3,ffffffff840064a4 <receiveSignal+0x80>
    0x840064a0     0x7c    slli a4,a4,0x27
    0x840064a2     0x7e    or a5,a5,a4
    0x840064a4     0x80    ld a4,368(s0)
    0x840064a8     0x84    beq a4,a5,ffffffff840064f0 <receiveSignal+0xcc>
    0x840064ac     0x88    mv a0,s0
    0x840064ae     0x8a    jal ra,ffffffff84004a0a <scheduleTCB>
    0x840064b2     0x8e    ld a4,8(s1)
    0x840064b4     0x90    slli a5,a4,0x19
    0x840064b8     0x94    srli a5,a5,0x19
    0x840064ba     0x96    srli a4,a4,0x26
    0x840064bc     0x98    andi a4,a4,1
    0x840064be     0x9a    beqz a4,ffffffff840064c6 <receiveSignal+0xa2>
    0x840064c0     0x9c    li a4,-1
    0x840064c2     0x9e    slli a4,a4,0x27
    0x840064c4     0xa0    or a5,a5,a4
    0x840064c6     0xa2    ld a3,0(s1)
    0x840064c8     0xa4    srli a4,a3,0x19
    0x840064cc     0xa8    bgez a3,ffffffff8400650a <receiveSignal+0xe6>
    0x840064d0     0xac    li a3,-1
    0x840064d2     0xae    slli a3,a3,0x27
    0x840064d4     0xb0    or a4,a4,a3
    0x840064d6     0xb2    ld a1,360(s0)
    0x840064da     0xb6    mv a3,a4
    0x840064dc     0xb8    li a2,0
    0x840064de     0xba    ld a0,360(a3)
    0x840064e2     0xbe    bltu a0,a1,ffffffff84006544 <receiveSignal+0x120>
    0x840064e6     0xc2    sd s0,408(a3)
    0x840064ea     0xc6    bnez a2,ffffffff84006550 <receiveSignal+0x12c>
    0x840064ec     0xc8    mv a4,s0
    0x840064ee     0xca    j ffffffff84006514 <receiveSignal+0xf0>
    0x840064f0     0xcc    sd zero,368(s0)
    0x840064f4     0xd0    sd zero,24(a5)
    0x840064f8     0xd4    auipc a5,0x19
    0x840064fc     0xd8    ld a5,-1184(a5) # ffffffff8401f058 <ksCurThread>
    0x84006500     0xdc    bne s0,a5,ffffffff840064ac <receiveSignal+0x88>
    0x84006504     0xe0    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84006508     0xe4    j ffffffff840064ac <receiveSignal+0x88>
    0x8400650a     0xe6    bnez a4,ffffffff840064d6 <receiveSignal+0xb2>
    0x8400650c     0xe8    mv a5,s0
    0x8400650e     0xea    mv a4,s0
    0x84006510     0xec    li a2,0
    0x84006512     0xee    li a3,0
    0x84006514     0xf0    sd a2,408(s0)
    0x84006518     0xf4    sd a3,416(s0)
    0x8400651c     0xf8    ld a3,0(s1)
    0x8400651e     0xfa    ld a2,8(s1)
    0x84006520     0xfc    li a1,-1
    0x84006522     0xfe    slli a0,a1,0x27
    0x84006526    0x102    and a2,a2,a0
    0x84006528    0x104    srli a1,a1,0x19
    0x8400652a    0x106    and a5,a5,a1
    0x8400652c    0x108    or a5,a5,a2
    0x8400652e    0x10a    sd a5,8(s1)
    0x84006530    0x10c    lui a5,0x2000
    0x84006534    0x110    addi a5,a5,-4
    0x84006536    0x112    and a5,a5,a3
    0x84006538    0x114    slli a4,a4,0x19
    0x8400653a    0x116    or a4,a4,a5
    0x8400653c    0x118    ori a4,a4,1
    0x84006540    0x11c    sd a4,0(s1)
    0x84006542    0x11e    j ffffffff84006468 <receiveSignal+0x44>
    0x84006544    0x120    ld a0,416(a3)
    0x84006548    0x124    bnez a0,ffffffff84006556 <receiveSignal+0x132>
    0x8400654a    0x126    mv a2,a3
    0x8400654c    0x128    mv a5,s0
    0x8400654e    0x12a    mv a3,a0
    0x84006550    0x12c    sd s0,416(a2) # ffffffffe00001a0 <ki_end+0x5bfdc1a0>
    0x84006554    0x130    j ffffffff84006514 <receiveSignal+0xf0>
    0x84006556    0x132    mv a2,a3
    0x84006558    0x134    mv a3,a0
    0x8400655a    0x136    j ffffffff840064de <receiveSignal+0xba>
    0x8400655c    0x138    sd zero,72(s0)
    0x84006560    0x13c    j ffffffff84006468 <receiveSignal+0x44>
    0x84006562    0x13e    ld a5,32(s1)
    0x84006564    0x140    slli a4,a5,0x19
    0x84006568    0x144    srli a4,a4,0x19
    0x8400656a    0x146    srli a5,a5,0x26
    0x8400656c    0x148    andi a5,a5,1
    0x8400656e    0x14a    beqz a5,ffffffff8400659e <receiveSignal+0x17a>
    0x84006570    0x14c    li s1,-1
    0x84006572    0x14e    slli s1,s1,0x27
    0x84006574    0x150    or s1,s1,a4
    0x84006576    0x152    ld a5,24(s1)
    0x84006578    0x154    bnez a5,ffffffff84006468 <receiveSignal+0x44>
    0x8400657c    0x158    mv a1,s0
    0x8400657e    0x15a    mv a0,s1
    0x84006580    0x15c    jal ra,ffffffff84005052 <schedContext_donate>
    0x84006584    0x160    auipc a5,0x19
    0x84006588    0x164    ld a5,-1372(a5) # ffffffff8401f028 <ksCurSC>
    0x8400658c    0x168    beq s1,a5,ffffffff84006596 <receiveSignal+0x172>
    0x84006590    0x16c    mv a0,s1
    0x84006592    0x16e    jal ra,ffffffff840039bc <refill_unblock_check>
    0x84006596    0x172    mv a0,s1
    0x84006598    0x174    jal ra,ffffffff84005c9a <schedContext_resume>
    0x8400659c    0x178    j ffffffff84006468 <receiveSignal+0x44>
    0x8400659e    0x17a    beqz a4,ffffffff84006468 <receiveSignal+0x44>
    0x840065a2    0x17e    mv s1,a4
    0x840065a4    0x180    j ffffffff84006576 <receiveSignal+0x152>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
149 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 229 nodes.

Section suspend (261 of 292)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x84005774     0x0    addi sp,sp,-16
    0x84005776     0x2    sd ra,8(sp)           ; stack access
    0x84005778     0x4    sd s0,0(sp)           ; stack access
    0x8400577a     0x6    mv s0,a0
    0x8400577c     0x8    jal ra,ffffffff840054d2 <cancelIPC>
    0x84005780     0xc    ld a5,280(s0)
    0x84005784    0x10    andi a5,a5,15
    0x84005786    0x12    li a4,1
    0x84005788    0x14    beq a5,a4,ffffffff840057ae <suspend+0x3a>
    0x8400578c    0x18    li a1,0
    0x8400578e    0x1a    mv a0,s0
    0x84005790    0x1c    jal ra,ffffffff84004a52 <setThreadState>
    0x84005794    0x20    mv a0,s0
    0x84005796    0x22    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x8400579a    0x26    mv a0,s0
    0x8400579c    0x28    jal ra,ffffffff84005724 <tcbReleaseRemove>
    0x840057a0    0x2c    mv a0,s0
    0x840057a2    0x2e    jal ra,ffffffff840048d8 <schedContext_cancelYieldTo>
    0x840057a6    0x32    ld ra,8(sp)           ; stack access
    0x840057a8    0x34    ld s0,0(sp)           ; stack access
    0x840057aa    0x36    addi sp,sp,16
    0x840057ac    0x38    ret
    0x840057ae    0x3a    ld a5,272(s0)
    0x840057b2    0x3e    sd a5,264(s0)
    0x840057b6    0x42    j ffffffff8400578c <suspend+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 40 nodes.

Section setPriority (262 of 292)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 65 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setPriority`:

    0x84005676     0x0    addi sp,sp,-32
    0x84005678     0x2    sd ra,24(sp)          ; stack access
    0x8400567a     0x4    sd s0,16(sp)          ; stack access
    0x8400567c     0x6    sd s1,8(sp)           ; stack access
    0x8400567e     0x8    mv s0,a0
    0x84005680     0xa    mv s1,a1
    0x84005682     0xc    ld a4,280(a0)
    0x84005686    0x10    andi a5,a4,15
    0x8400568a    0x14    li a3,4
    0x8400568c    0x16    bltu a3,a5,ffffffff840056ba <setPriority+0x44>
    0x84005690    0x1a    li a3,2
    0x84005692    0x1c    bltu a3,a5,ffffffff840056f6 <setPriority+0x80>
    0x84005696    0x20    addi a5,a5,-1
    0x84005698    0x22    li a4,1
    0x8400569a    0x24    bltu a4,a5,ffffffff8400571e <setPriority+0xa8>
    0x8400569e    0x28    ld a5,288(a0)
    0x840056a2    0x2c    srli a5,a5,0x1
    0x840056a4    0x2e    andi a5,a5,1
    0x840056a6    0x30    bnez a5,ffffffff840056e0 <setPriority+0x6a>
    0x840056a8    0x32    auipc a5,0x1a
    0x840056ac    0x36    ld a5,-1616(a5) # ffffffff8401f058 <ksCurThread>
    0x840056b0    0x3a    beq a5,a0,ffffffff840056e0 <setPriority+0x6a>
    0x840056b4    0x3e    sd a1,360(s0)
    0x840056b8    0x42    j ffffffff84005714 <setPriority+0x9e>
    0x840056ba    0x44    li a3,6
    0x840056bc    0x46    bne a5,a3,ffffffff8400571e <setPriority+0xa8>
    0x840056c0    0x4a    sd a1,360(s0)
    0x840056c4    0x4e    lui a0,0xe0000
    0x840056c8    0x52    srli a0,a0,0x19
    0x840056ca    0x54    and a0,a0,a4
    0x840056cc    0x56    srli a4,a4,0x26
    0x840056ce    0x58    andi a4,a4,1
    0x840056d0    0x5a    beqz a4,ffffffff840056d8 <setPriority+0x62>
    0x840056d2    0x5c    li a5,-1
    0x840056d4    0x5e    slli a5,a5,0x27
    0x840056d6    0x60    or a0,a0,a5
    0x840056d8    0x62    mv a1,s0
    0x840056da    0x64    jal ra,ffffffff840055ca <reorderNTFN>
    0x840056de    0x68    j ffffffff84005714 <setPriority+0x9e>
    0x840056e0    0x6a    mv a0,s0
    0x840056e2    0x6c    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x840056e6    0x70    sd s1,360(s0)
    0x840056ea    0x74    mv a0,s0
    0x840056ec    0x76    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x840056f0    0x7a    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x840056f4    0x7e    j ffffffff84005714 <setPriority+0x9e>
    0x840056f6    0x80    sd a1,360(s0)
    0x840056fa    0x84    lui a0,0xe0000
    0x840056fe    0x88    srli a0,a0,0x19
    0x84005700    0x8a    and a0,a0,a4
    0x84005702    0x8c    srli a4,a4,0x26
    0x84005704    0x8e    andi a4,a4,1
    0x84005706    0x90    beqz a4,ffffffff8400570e <setPriority+0x98>
    0x84005708    0x92    li a5,-1
    0x8400570a    0x94    slli a5,a5,0x27
    0x8400570c    0x96    or a0,a0,a5
    0x8400570e    0x98    mv a1,s0
    0x84005710    0x9a    jal ra,ffffffff840053ca <reorderEP>
    0x84005714    0x9e    ld ra,24(sp)          ; stack access
    0x84005716    0xa0    ld s0,16(sp)          ; stack access
    0x84005718    0xa2    ld s1,8(sp)           ; stack access
    0x8400571a    0xa4    addi sp,sp,32
    0x8400571c    0xa6    ret
    0x8400571e    0xa8    sd s1,360(s0)
    0x84005722    0xac    j ffffffff84005714 <setPriority+0x9e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 101 nodes.

Section cancelBadgedSends (263 of 292)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 92 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x840052b6     0x0    addi sp,sp,-80
    0x840052b8     0x2    sd ra,72(sp)          ; stack access
    0x840052ba     0x4    sd s0,64(sp)          ; stack access
    0x840052bc     0x6    sd s1,56(sp)          ; stack access
    0x840052be     0x8    sd s2,48(sp)          ; stack access
    0x840052c0     0xa    sd s3,40(sp)          ; stack access
    0x840052c2     0xc    sd s4,32(sp)          ; stack access
    0x840052c4     0xe    sd s5,24(sp)          ; stack access
    0x840052c6    0x10    ld a5,0(a0)
    0x840052c8    0x12    andi a3,a5,3
    0x840052cc    0x16    li a4,1
    0x840052ce    0x18    beq a3,a4,ffffffff840052da <cancelBadgedSends+0x24>
    0x840052d2    0x1c    andi a5,a5,1
    0x840052d4    0x1e    beqz a5,ffffffff8400538c <cancelBadgedSends+0xd6>
    0x840052d6    0x20    jal ra,ffffffff84002424 <halt>
    0x840052da    0x24    mv s5,a0
    0x840052dc    0x26    mv s4,a1
    0x840052de    0x28    ld s0,8(a0)
    0x840052e0    0x2a    mv s3,s0
    0x840052e2    0x2c    lui a4,0xf8000
    0x840052e6    0x30    srli a4,a4,0x19
    0x840052e8    0x32    and a4,a4,a5
    0x840052ea    0x34    srli a3,a5,0x26
    0x840052ee    0x38    andi a3,a3,1
    0x840052f0    0x3a    beqz a3,ffffffff840052f8 <cancelBadgedSends+0x42>
    0x840052f2    0x3c    li a3,-1
    0x840052f4    0x3e    slli a3,a3,0x27
    0x840052f6    0x40    or a4,a4,a3
    0x840052f8    0x42    mv s2,a4
    0x840052fa    0x44    sd zero,8(s5)
    0x840052fe    0x48    srli a5,a5,0x27
    0x84005300    0x4a    slli a5,a5,0x27
    0x84005302    0x4c    sd a5,0(s5)
    0x84005306    0x50    bnez s0,ffffffff84005338 <cancelBadgedSends+0x82>
    0x84005308    0x52    sd zero,8(s5)
    0x8400530c    0x56    lui a3,0xf8000
    0x84005310    0x5a    srli a3,a3,0x19
    0x84005312    0x5c    and a4,a4,a3
    0x84005314    0x5e    or a5,a5,a4
    0x84005316    0x60    sd a5,0(s5)
    0x8400531a    0x64    j ffffffff84005388 <cancelBadgedSends+0xd2>
    0x8400531c    0x66    li a1,0
    0x8400531e    0x68    mv a0,s1
    0x84005320    0x6a    jal ra,ffffffff84004a52 <setThreadState>
    0x84005324    0x6e    mv a1,s3
    0x84005326    0x70    mv a2,s2
    0x84005328    0x72    mv a0,s1
    0x8400532a    0x74    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x8400532e    0x78    mv s3,a0
    0x84005330    0x7a    sd a0,0(sp)           ; stack access
    0x84005332    0x7c    sd a1,8(sp)           ; stack access
    0x84005334    0x7e    mv s2,a1
    0x84005336    0x80    beqz s0,ffffffff8400535e <cancelBadgedSends+0xa8>
    0x84005338    0x82    ld a5,296(s0)
    0x8400533c    0x86    mv s1,s0
    0x8400533e    0x88    ld s0,408(s0)
    0x84005342    0x8c    bne s4,a5,ffffffff84005336 <cancelBadgedSends+0x80>
    0x84005346    0x90    ld a5,312(s1)
    0x8400534a    0x94    andi a5,a5,15
    0x8400534c    0x96    bnez a5,ffffffff8400531c <cancelBadgedSends+0x66>
    0x8400534e    0x98    li a1,2
    0x84005350    0x9a    mv a0,s1
    0x84005352    0x9c    jal ra,ffffffff84004a52 <setThreadState>
    0x84005356    0xa0    mv a0,s1
    0x84005358    0xa2    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x8400535c    0xa6    j ffffffff84005324 <cancelBadgedSends+0x6e>
    0x8400535e    0xa8    sd s3,8(s5)
    0x84005362    0xac    ld a2,0(s5)
    0x84005366    0xb0    li a5,-1
    0x84005368    0xb2    slli a5,a5,0x27
    0x8400536a    0xb4    addi a5,a5,3
    0x8400536c    0xb6    and a5,a5,a2
    0x8400536e    0xb8    lui a2,0xf8000
    0x84005372    0xbc    srli a2,a2,0x19
    0x84005374    0xbe    and a2,s2,a2
    0x84005378    0xc2    or a2,a2,a5
    0x8400537a    0xc4    beqz s3,ffffffff8400539e <cancelBadgedSends+0xe8>
    0x8400537e    0xc8    andi a2,a2,-4
    0x84005380    0xca    ori a2,a2,1
    0x84005384    0xce    sd a2,0(s5)
    0x84005388    0xd2    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x8400538c    0xd6    ld ra,72(sp)          ; stack access
    0x8400538e    0xd8    ld s0,64(sp)          ; stack access
    0x84005390    0xda    ld s1,56(sp)          ; stack access
    0x84005392    0xdc    ld s2,48(sp)          ; stack access
    0x84005394    0xde    ld s3,40(sp)          ; stack access
    0x84005396    0xe0    ld s4,32(sp)          ; stack access
    0x84005398    0xe2    ld s5,24(sp)          ; stack access
    0x8400539a    0xe4    addi sp,sp,80
    0x8400539c    0xe6    ret
    0x8400539e    0xe8    sd a2,0(s5)
    0x840053a2    0xec    j ffffffff84005388 <cancelBadgedSends+0xd2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
92 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 144 nodes.

Section Arch_decodeIRQControlInvocation (264 of 292)
====================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 73 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `Arch_decodeIRQControlInvocation`:

    0x84004a6e     0x0    li a5,43
    0x84004a72     0x4    bne a0,a5,ffffffff84004b26 <Arch_decodeIRQControlInvocation+0xb8>
    0x84004a76     0x8    addi sp,sp,-80
    0x84004a78     0xa    sd ra,72(sp)          ; stack access
    0x84004a7a     0xc    sd s0,64(sp)          ; stack access
    0x84004a7c     0xe    sd s1,56(sp)          ; stack access
    0x84004a7e    0x10    sd s2,48(sp)          ; stack access
    0x84004a80    0x12    sd s3,40(sp)          ; stack access
    0x84004a82    0x14    mv s0,a2
    0x84004a84    0x16    li a5,3
    0x84004a86    0x18    bgeu a5,a1,ffffffff84004ad8 <Arch_decodeIRQControlInvocation+0x6a>
    0x84004a8a    0x1c    auipc a5,0x8
    0x84004a8e    0x20    ld a5,1542(a5) # ffffffff8400d090 <current_extra_caps>
    0x84004a92    0x24    beqz a5,ffffffff84004ad8 <Arch_decodeIRQControlInvocation+0x6a>
    0x84004a94    0x26    auipc a4,0x1a
    0x84004a98    0x2a    ld a4,1476(a4) # ffffffff8401f058 <ksCurThread>
    0x84004a9c    0x2e    ld s1,88(a4)
    0x84004a9e    0x30    ld s2,104(a4)
    0x84004aa2    0x34    ld s3,112(a4)
    0x84004aa6    0x38    ld a4,0(a5)
    0x84004aa8    0x3a    sd a4,0(sp)           ; stack access
    0x84004aaa    0x3c    ld a5,8(a5)
    0x84004aac    0x3e    sd a5,8(sp)           ; stack access
    0x84004aae    0x40    mv a0,s1
    0x84004ab0    0x42    jal ra,ffffffff84002e3e <Arch_checkIRQ>
    0x84004ab4    0x46    bnez a0,ffffffff84004ae4 <Arch_decodeIRQControlInvocation+0x76>
    0x84004ab6    0x48    slli a4,s1,0x3
    0x84004aba    0x4c    auipc a5,0x8
    0x84004abe    0x50    addi a5,a5,-698 # ffffffff8400c800 <riscvKSASIDTable>
    0x84004ac2    0x54    add a5,a5,a4
    0x84004ac4    0x56    ld a5,1112(a5)
    0x84004ac8    0x5a    beqz a5,ffffffff84004af2 <Arch_decodeIRQControlInvocation+0x84>
    0x84004aca    0x5c    li a5,9
    0x84004acc    0x5e    auipc a4,0x8
    0x84004ad0    0x62    sd a5,372(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84004ad4    0x66    li a0,3
    0x84004ad6    0x68    j ffffffff84004ae4 <Arch_decodeIRQControlInvocation+0x76>
    0x84004ad8    0x6a    li a5,7
    0x84004ada    0x6c    auipc a4,0x8
    0x84004ade    0x70    sd a5,358(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84004ae2    0x74    li a0,3
    0x84004ae4    0x76    ld ra,72(sp)          ; stack access
    0x84004ae6    0x78    ld s0,64(sp)          ; stack access
    0x84004ae8    0x7a    ld s1,56(sp)          ; stack access
    0x84004aea    0x7c    ld s2,48(sp)          ; stack access
    0x84004aec    0x7e    ld s3,40(sp)          ; stack access
    0x84004aee    0x80    addi sp,sp,80
    0x84004af0    0x82    ret
    0x84004af2    0x84    mv a3,s3
    0x84004af4    0x86    mv a2,s2
    0x84004af6    0x88    ld a0,0(sp)           ; stack access
    0x84004af8    0x8a    ld a1,8(sp)           ; stack access
    0x84004afa    0x8c    jal ra,ffffffff840035b8 <lookupTargetSlot>
    0x84004afe    0x90    sd a1,24(sp)          ; stack access
    0x84004b00    0x92    bnez a0,ffffffff84004ae4 <Arch_decodeIRQControlInvocation+0x76>
    0x84004b02    0x94    mv s2,a1
    0x84004b04    0x96    mv a0,a1
    0x84004b06    0x98    jal ra,ffffffff84003dae <ensureEmptySlot>
    0x84004b0a    0x9c    bnez a0,ffffffff84004ae4 <Arch_decodeIRQControlInvocation+0x76>
    0x84004b0c    0x9e    li a1,2
    0x84004b0e    0xa0    auipc a0,0x1a
    0x84004b12    0xa4    ld a0,1354(a0) # ffffffff8401f058 <ksCurThread>
    0x84004b16    0xa8    jal ra,ffffffff84004a52 <setThreadState>
    0x84004b1a    0xac    mv a2,s0
    0x84004b1c    0xae    mv a1,s2
    0x84004b1e    0xb0    mv a0,s1
    0x84004b20    0xb2    jal ra,ffffffff84003ec8 <invokeIRQControl>
    0x84004b24    0xb6    j ffffffff84004ae4 <Arch_decodeIRQControlInvocation+0x76>
    0x84004b26    0xb8    li a5,3
    0x84004b28    0xba    auipc a4,0x8
    0x84004b2c    0xbe    sd a5,280(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84004b30    0xc2    li a0,3
    0x84004b32    0xc4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 121 nodes.

Section Arch_finaliseCap (265 of 292)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 104 instructions.


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84002f24      0x0    addi sp,sp,-80
    0x84002f26      0x2    sd ra,72(sp)          ; stack access
    0x84002f28      0x4    sd s0,64(sp)          ; stack access
    0x84002f2a      0x6    sd s1,56(sp)          ; stack access
    0x84002f2c      0x8    sd s2,48(sp)          ; stack access
    0x84002f2e      0xa    sd s3,40(sp)          ; stack access
    0x84002f30      0xc    mv s0,a0
    0x84002f32      0xe    mv s2,a2
    0x84002f34     0x10    mv s1,a1
    0x84002f36     0x12    srli a5,a1,0x3b
    0x84002f3a     0x16    li a4,3
    0x84002f3c     0x18    beq a5,a4,ffffffff84002fac <Arch_finaliseCap+0x88>
    0x84002f40     0x1c    li a4,13
    0x84002f42     0x1e    beq a5,a4,ffffffff8400300e <Arch_finaliseCap+0xea>
    0x84002f46     0x22    li a4,1
    0x84002f48     0x24    beq a5,a4,ffffffff84002f6c <Arch_finaliseCap+0x48>
    0x84002f4c     0x28    sd zero,0(s0)         ; stack access
    0x84002f50     0x2c    sd zero,8(s0)         ; stack access
    0x84002f54     0x30    sd zero,16(s0)        ; stack access
    0x84002f58     0x34    sd zero,24(s0)        ; stack access
    0x84002f5c     0x38    mv a0,s0
    0x84002f5e     0x3a    ld ra,72(sp)          ; stack access
    0x84002f60     0x3c    ld s0,64(sp)          ; stack access
    0x84002f62     0x3e    ld s1,56(sp)          ; stack access
    0x84002f64     0x40    ld s2,48(sp)          ; stack access
    0x84002f66     0x42    ld s3,40(sp)          ; stack access
    0x84002f68     0x44    addi sp,sp,80
    0x84002f6a     0x46    ret
    0x84002f6c     0x48    srli a1,a2,0x30
    0x84002f70     0x4c    beqz a1,ffffffff84002f4c <Arch_finaliseCap+0x28>
    0x84002f72     0x4e    srli a0,s1,0x39
    0x84002f76     0x52    andi a0,a0,3
    0x84002f78     0x54    slli a2,s1,0x19
    0x84002f7c     0x58    srli a2,a2,0x19
    0x84002f7e     0x5a    srli s1,s1,0x26
    0x84002f80     0x5c    andi s1,s1,1
    0x84002f82     0x5e    beqz s1,ffffffff84002f8a <Arch_finaliseCap+0x66>
    0x84002f84     0x60    li a5,-1
    0x84002f86     0x62    slli a5,a5,0x27
    0x84002f88     0x64    or a2,a2,a5
    0x84002f8a     0x66    srli s2,s2,0x9
    0x84002f8e     0x6a    slli a3,s2,0x19
    0x84002f92     0x6e    srli a3,a3,0x19
    0x84002f94     0x70    srli s2,s2,0x26
    0x84002f98     0x74    andi s2,s2,1
    0x84002f9c     0x78    beqz s2,ffffffff84002fa6 <Arch_finaliseCap+0x82>
    0x84002fa0     0x7c    li a5,-1
    0x84002fa2     0x7e    slli a5,a5,0x27
    0x84002fa4     0x80    or a3,a3,a5
    0x84002fa6     0x82    jal ra,ffffffff84002b16 <unmapPage>
    0x84002faa     0x86    j ffffffff84002f4c <Arch_finaliseCap+0x28>
    0x84002fac     0x88    beqz a3,ffffffff84002f4c <Arch_finaliseCap+0x28>
    0x84002fae     0x8a    srli a5,a1,0x27
    0x84002fb2     0x8e    andi a5,a5,1
    0x84002fb4     0x90    beqz a5,ffffffff84002f4c <Arch_finaliseCap+0x28>
    0x84002fb6     0x92    srli s3,a2,0x30
    0x84002fba     0x96    mv a0,s3
    0x84002fbc     0x98    jal ra,ffffffff84002182 <findVSpaceForASID>
    0x84002fc0     0x9c    sd a0,16(sp)          ; stack access
    0x84002fc2     0x9e    sd a1,24(sp)          ; stack access
    0x84002fc4     0xa0    srli s2,s2,0x9
    0x84002fc8     0xa4    slli a2,s2,0x19
    0x84002fcc     0xa8    srli a2,a2,0x19
    0x84002fce     0xaa    srli s2,s2,0x26
    0x84002fd2     0xae    andi s2,s2,1
    0x84002fd6     0xb2    beqz s2,ffffffff84002fe0 <Arch_finaliseCap+0xbc>
    0x84002fda     0xb6    li a5,-1
    0x84002fdc     0xb8    slli a5,a5,0x27
    0x84002fde     0xba    or a2,a2,a5
    0x84002fe0     0xbc    ld a5,16(sp)          ; stack access
    0x84002fe2     0xbe    bnez a5,ffffffff84002fea <Arch_finaliseCap+0xc6>
    0x84002fe4     0xc0    ld a5,24(sp)          ; stack access
    0x84002fe6     0xc2    beq a5,a2,ffffffff84003004 <Arch_finaliseCap+0xe0>
    0x84002fea     0xc6    slli a1,s1,0x19
    0x84002fee     0xca    srli a1,a1,0x19
    0x84002ff0     0xcc    srli s1,s1,0x26
    0x84002ff2     0xce    andi s1,s1,1
    0x84002ff4     0xd0    beqz s1,ffffffff84002ffc <Arch_finaliseCap+0xd8>
    0x84002ff6     0xd2    li a5,-1
    0x84002ff8     0xd4    slli a5,a5,0x27
    0x84002ffa     0xd6    or a1,a1,a5
    0x84002ffc     0xd8    mv a0,s3
    0x84002ffe     0xda    jal ra,ffffffff84002a6c <unmapPageTable>
    0x84003002     0xde    j ffffffff84002f4c <Arch_finaliseCap+0x28>
    0x84003004     0xe0    mv a1,a2
    0x84003006     0xe2    mv a0,s3
    0x84003008     0xe4    jal ra,ffffffff84002cc8 <deleteASID>
    0x8400300c     0xe8    j ffffffff84002f4c <Arch_finaliseCap+0x28>
    0x8400300e     0xea    beqz a3,ffffffff84002f4c <Arch_finaliseCap+0x28>
    0x84003010     0xec    srli a0,a1,0x2b
    0x84003014     0xf0    slli a0,a0,0x30
    0x84003016     0xf2    srli a0,a0,0x30
    0x84003018     0xf4    slli s1,a1,0x2
    0x8400301c     0xf8    lui a1,0xf8000
    0x84003020     0xfc    srli a1,a1,0x19
    0x84003022     0xfe    and a1,a1,s1
    0x84003024    0x100    srli s1,s1,0x26
    0x84003026    0x102    andi s1,s1,1
    0x84003028    0x104    beqz s1,ffffffff84003030 <Arch_finaliseCap+0x10c>
    0x8400302a    0x106    li a5,-1
    0x8400302c    0x108    slli a5,a5,0x27
    0x8400302e    0x10a    or a1,a1,a5
    0x84003030    0x10c    jal ra,ffffffff84002c8a <deleteASIDPool>
    0x84003034    0x110    j ffffffff84002f4c <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 156 nodes.

Section init_freemem (266 of 292)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 299 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `init_freemem`:

    0x84000fc6      0x0    addi sp,sp,-192
    0x84000fc8      0x2    sd ra,184(sp)         ; stack access
    0x84000fca      0x4    sd s0,176(sp)         ; stack access
    0x84000fcc      0x6    sd s1,168(sp)         ; stack access
    0x84000fce      0x8    sd s2,160(sp)         ; stack access
    0x84000fd0      0xa    sd s3,152(sp)         ; stack access
    0x84000fd2      0xc    sd s4,144(sp)         ; stack access
    0x84000fd4      0xe    sd s5,136(sp)         ; stack access
    0x84000fd6     0x10    sd s6,128(sp)         ; stack access
    0x84000fd8     0x12    sd s7,120(sp)         ; stack access
    0x84000fda     0x14    sd s8,112(sp)         ; stack access
    0x84000fdc     0x16    sd s9,104(sp)         ; stack access
    0x84000fde     0x18    mv s4,a0
    0x84000fe0     0x1a    mv s5,a2
    0x84000fe2     0x1c    mv s6,a3
    0x84000fe4     0x1e    sd a4,0(sp)           ; stack access
    0x84000fe6     0x20    sd a5,8(sp)           ; stack access
    0x84000fe8     0x22    mv s3,a6
    0x84000fea     0x24    li a5,1
    0x84000fec     0x26    bgeu a5,a2,ffffffff84000ffc <init_freemem+0x36>
    0x84000ff0     0x2a    addi a4,a2,-1
    0x84000ff4     0x2e    li a5,0
    0x84000ff6     0x30    addi a5,a5,1
    0x84000ff8     0x32    bne a5,a4,ffffffff84000ff6 <init_freemem+0x30>
    0x84000ffc     0x36    addi a4,s4,-1 # fff <KERNEL_OFFSET-0xfffffffefffff001>
    0x84001000     0x3a    beqz a4,ffffffff8400100a <init_freemem+0x44>
    0x84001002     0x3c    li a5,0
    0x84001004     0x3e    addi a5,a5,1
    0x84001006     0x40    bne a5,a4,ffffffff84001004 <init_freemem+0x3e>
    0x8400100a     0x44    auipc a5,0x1
    0x8400100e     0x48    addi a5,a5,-1290 # ffffffff84001b00 <ndks_boot+0x148>
    0x84001012     0x4c    auipc a4,0x1
    0x84001016     0x50    addi a4,a4,-1042 # ffffffff84001c00 <ndks_boot+0x248>
    0x8400101a     0x54    sd zero,0(a5)
    0x8400101e     0x58    sd zero,8(a5)
    0x84001022     0x5c    addi a5,a5,16
    0x84001024     0x5e    bne a5,a4,ffffffff8400101a <init_freemem+0x54>
    0x84001028     0x62    beqz s4,ffffffff84001256 <init_freemem+0x290>
    0x8400102c     0x66    mv a6,a1
    0x8400102e     0x68    auipc a4,0x1
    0x84001032     0x6c    addi a4,a4,-942 # ffffffff84001c80 <avail_reg+0x8>
    0x84001036     0x70    slli t1,s4,0x4
    0x8400103a     0x74    add t1,t1,a1
    0x8400103c     0x76    li a7,-1
    0x8400103e     0x78    slli a7,a7,0x26
    0x84001040     0x7a    li a0,127
    0x84001044     0x7e    slli a0,a0,0x1f
    0x84001046     0x80    lui t4,0x80000
    0x8400104a     0x84    li t3,1
    0x8400104c     0x86    slli t3,t3,0x26
    0x8400104e     0x88    j ffffffff84001060 <init_freemem+0x9a>
    0x84001050     0x8a    mv a5,t4
    0x84001052     0x8c    j ffffffff8400107a <init_freemem+0xb4>
    0x84001054     0x8e    sd a5,-8(a3)
    0x84001058     0x92    addi a6,a6,16
    0x8400105a     0x94    addi a4,a4,16
    0x8400105c     0x96    beq a6,t1,ffffffff8400130e <init_freemem+0x348>
    0x84001060     0x9a    ld a1,8(a6)
    0x84001064     0x9e    add a5,a1,a7
    0x84001068     0xa2    mv a3,a4
    0x8400106a     0xa4    ld a2,0(a6)
    0x8400106e     0xa8    add a2,a2,a7
    0x84001070     0xaa    sd a2,-8(a4)
    0x84001074     0xae    sd a5,0(a4)
    0x84001076     0xb0    bltu a0,a1,ffffffff84001050 <init_freemem+0x8a>
    0x8400107a     0xb4    sd a5,0(a3)
    0x8400107c     0xb6    ld a5,-8(a3)
    0x84001080     0xba    add a2,a5,t3
    0x84001084     0xbe    bgeu a0,a2,ffffffff84001054 <init_freemem+0x8e>
    0x84001088     0xc2    mv a5,t4
    0x8400108a     0xc4    j ffffffff84001054 <init_freemem+0x8e>
    0x8400108c     0xc6    addi s1,s1,1
    0x8400108e     0xc8    bgeu s0,s4,ffffffff8400125a <init_freemem+0x294>
    0x84001092     0xcc    bgeu s1,s5,ffffffff8400117e <init_freemem+0x1b8>
    0x84001096     0xd0    slli s2,s1,0x4
    0x8400109a     0xd4    add s2,s2,s6
    0x8400109c     0xd6    ld a1,0(s2)
    0x840010a0     0xda    ld a4,8(s2)
    0x840010a4     0xde    beq a1,a4,ffffffff8400108c <init_freemem+0xc6>
    0x840010a8     0xe2    slli a5,s0,0x4
    0x840010ac     0xe6    add a5,a5,s7
    0x840010ae     0xe8    ld a3,704(a5)
    0x840010b2     0xec    ld a5,712(a5)
    0x840010b6     0xf0    bltu a3,a5,ffffffff840010be <init_freemem+0xf8>
    0x840010ba     0xf4    addi s0,s0,1
    0x840010bc     0xf6    j ffffffff8400108e <init_freemem+0xc8>
    0x840010be     0xf8    bgeu a3,a4,ffffffff840010f2 <init_freemem+0x12c>
    0x840010c2     0xfc    bgeu a1,a5,ffffffff84001106 <init_freemem+0x140>
    0x840010c6    0x100    bltu a3,a1,ffffffff8400111c <init_freemem+0x156>
    0x840010ca    0x104    slli a3,s0,0x4
    0x840010ce    0x108    add a3,a3,s7
    0x840010d0    0x10a    bgeu a5,a4,ffffffff840010d6 <init_freemem+0x110>
    0x840010d4    0x10e    mv a4,a5
    0x840010d6    0x110    sd a4,704(a3)
    0x840010da    0x114    ld a1,8(s2)
    0x840010de    0x118    add a1,a1,s8
    0x840010e0    0x11a    ld a0,0(s2)
    0x840010e4    0x11e    add a0,a0,s8
    0x840010e6    0x120    sd a0,48(sp)          ; stack access
    0x840010e8    0x122    sd a1,56(sp)          ; stack access
    0x840010ea    0x124    jal ra,ffffffff84000588 <reserve_region>
    0x840010ee    0x128    addi s1,s1,1
    0x840010f0    0x12a    j ffffffff8400108e <init_freemem+0xc8>
    0x840010f2    0x12c    add a0,a1,s8
    0x840010f6    0x130    sd a0,32(sp)          ; stack access
    0x840010f8    0x132    add a1,a4,s8
    0x840010fc    0x136    sd a1,40(sp)          ; stack access
    0x840010fe    0x138    jal ra,ffffffff84000588 <reserve_region>
    0x84001102    0x13c    addi s1,s1,1
    0x84001104    0x13e    j ffffffff8400108e <init_freemem+0xc8>
    0x84001106    0x140    slli a5,s0,0x4
    0x8400110a    0x144    add a5,a5,s7
    0x8400110c    0x146    ld a0,704(a5)
    0x84001110    0x14a    ld a1,712(a5)
    0x84001114    0x14e    jal ra,ffffffff84000754 <insert_region>
    0x84001118    0x152    addi s0,s0,1
    0x8400111a    0x154    j ffffffff8400108e <init_freemem+0xc8>
    0x8400111c    0x156    slli s9,s0,0x4
    0x84001120    0x15a    add s9,s9,s7
    0x84001122    0x15c    ld a0,704(s9)
    0x84001126    0x160    sd a0,16(sp)          ; stack access
    0x84001128    0x162    sd a1,24(sp)          ; stack access
    0x8400112a    0x164    jal ra,ffffffff84000754 <insert_region>
    0x8400112e    0x168    ld a5,8(s2)
    0x84001132    0x16c    ld a4,712(s9)
    0x84001136    0x170    bltu a5,a4,ffffffff8400113e <init_freemem+0x178>
    0x8400113a    0x174    addi s0,s0,1
    0x8400113c    0x176    j ffffffff8400108e <init_freemem+0xc8>
    0x8400113e    0x178    sd a5,704(s9)
    0x84001142    0x17c    ld a0,0(s2)
    0x84001146    0x180    add a0,a0,s8
    0x84001148    0x182    sd a0,64(sp)          ; stack access
    0x8400114a    0x184    add a1,a5,s8
    0x8400114e    0x188    sd a1,72(sp)          ; stack access
    0x84001150    0x18a    jal ra,ffffffff84000588 <reserve_region>
    0x84001154    0x18e    addi s1,s1,1
    0x84001156    0x190    j ffffffff8400108e <init_freemem+0xc8>
    0x84001158    0x192    addi s1,s1,1
    0x8400115a    0x194    addi s2,s2,16
    0x8400115c    0x196    beq s5,s1,ffffffff8400117a <init_freemem+0x1b4>
    0x84001160    0x19a    ld a0,0(s2)
    0x84001164    0x19e    ld a1,8(s2)
    0x84001168    0x1a2    bgeu a0,a1,ffffffff84001158 <init_freemem+0x192>
    0x8400116c    0x1a6    add a0,a0,s6
    0x8400116e    0x1a8    sd a0,80(sp)          ; stack access
    0x84001170    0x1aa    add a1,a1,s6
    0x84001172    0x1ac    sd a1,88(sp)          ; stack access
    0x84001174    0x1ae    jal ra,ffffffff84000588 <reserve_region>
    0x84001178    0x1b2    j ffffffff84001158 <init_freemem+0x192>
    0x8400117a    0x1b4    bgeu s0,s4,ffffffff84001268 <init_freemem+0x2a2>
    0x8400117e    0x1b8    slli a5,s0,0x4
    0x84001182    0x1bc    auipc s1,0x1
    0x84001186    0x1c0    addi s1,s1,-1290 # ffffffff84001c78 <avail_reg>
    0x8400118a    0x1c4    add s1,s1,a5
    0x8400118c    0x1c6    auipc s2,0x1
    0x84001190    0x1ca    addi s2,s2,-2004 # ffffffff840019b8 <ndks_boot>
    0x84001194    0x1ce    j ffffffff8400119e <init_freemem+0x1d8>
    0x84001196    0x1d0    addi s0,s0,1
    0x84001198    0x1d2    addi s1,s1,16
    0x8400119a    0x1d4    beq s4,s0,ffffffff84001268 <init_freemem+0x2a2>
    0x8400119e    0x1d8    ld a4,0(s1)
    0x840011a0    0x1da    ld a5,8(s1)
    0x840011a2    0x1dc    bgeu a4,a5,ffffffff84001196 <init_freemem+0x1d0>
    0x840011a6    0x1e0    slli a5,s0,0x4
    0x840011aa    0x1e4    add a5,a5,s2
    0x840011ac    0x1e6    ld a0,704(a5)
    0x840011b0    0x1ea    ld a1,712(a5)
    0x840011b4    0x1ee    jal ra,ffffffff84000754 <insert_region>
    0x840011b8    0x1f2    j ffffffff84001196 <init_freemem+0x1d0>
    0x840011ba    0x1f4    jal ra,ffffffff84002424 <halt>
    0x840011be    0x1f8    mv s5,s1
    0x840011c0    0x1fa    mv s1,s2
    0x840011c2    0x1fc    mv a3,s3
    0x840011c4    0x1fe    ld a1,0(sp)           ; stack access
    0x840011c6    0x200    ld a2,8(sp)           ; stack access
    0x840011c8    0x202    mv a0,s0
    0x840011ca    0x204    jal ra,ffffffff84000ed0 <create_rootserver_objects>
    0x840011ce    0x208    li a5,15
    0x840011d0    0x20a    bltu a5,s5,ffffffff840011f4 <init_freemem+0x22e>
    0x840011d4    0x20e    auipc a5,0x0
    0x840011d8    0x212    addi a5,a5,2020 # ffffffff840019b8 <ndks_boot>
    0x840011dc    0x216    addi a4,s5,20 # 300014 <KERNEL_OFFSET-0xfffffffeffcfffec>
    0x840011e0    0x21a    slli a4,a4,0x4
    0x840011e2    0x21c    add a4,a4,a5
    0x840011e4    0x21e    ld a4,16(a4)
    0x840011e6    0x220    addi s1,s1,20
    0x840011e8    0x222    slli s1,s1,0x4
    0x840011ea    0x224    add a5,a5,s1
    0x840011ec    0x226    sd a4,16(a5)
    0x840011ee    0x228    add s4,s4,s0
    0x840011f0    0x22a    sd s4,8(a5)
    0x840011f4    0x22e    addi s5,s5,20
    0x840011f6    0x230    slli s5,s5,0x4
    0x840011f8    0x232    auipc a5,0x0
    0x840011fc    0x236    addi a5,a5,1984 # ffffffff840019b8 <ndks_boot>
    0x84001200    0x23a    add s5,s5,a5
    0x84001202    0x23c    sd s0,16(s5)
    0x84001206    0x240    ld ra,184(sp)         ; stack access
    0x84001208    0x242    ld s0,176(sp)         ; stack access
    0x8400120a    0x244    ld s1,168(sp)         ; stack access
    0x8400120c    0x246    ld s2,160(sp)         ; stack access
    0x8400120e    0x248    ld s3,152(sp)         ; stack access
    0x84001210    0x24a    ld s4,144(sp)         ; stack access
    0x84001212    0x24c    ld s5,136(sp)         ; stack access
    0x84001214    0x24e    ld s6,128(sp)         ; stack access
    0x84001216    0x250    ld s7,120(sp)         ; stack access
    0x84001218    0x252    ld s8,112(sp)         ; stack access
    0x8400121a    0x254    ld s9,104(sp)         ; stack access
    0x8400121c    0x256    addi sp,sp,192
    0x8400121e    0x258    ret
    0x84001220    0x25a    addi s5,s1,-1
    0x84001224    0x25e    ld s0,8(a5)
    0x84001226    0x260    sub s0,s0,s4
    0x8400122a    0x264    srl s0,s0,a4
    0x8400122e    0x268    sll s0,s0,a4
    0x84001232    0x26c    addi a5,a5,-16
    0x84001234    0x26e    mv s2,s1
    0x84001236    0x270    ld a3,16(a5)
    0x84001238    0x272    bgeu s0,a3,ffffffff840011c2 <init_freemem+0x1fc>
    0x8400123c    0x276    mv s1,s5
    0x8400123e    0x278    bltu a2,s1,ffffffff84001220 <init_freemem+0x25a>
    0x84001242    0x27c    addi s2,s2,20
    0x84001244    0x27e    slli s2,s2,0x4
    0x84001246    0x280    add s2,s2,a1
    0x84001248    0x282    ld a3,16(a5)
    0x8400124a    0x284    sd a3,8(s2)
    0x8400124e    0x288    ld a3,24(a5)
    0x84001250    0x28a    sd a3,16(s2)
    0x84001254    0x28e    j ffffffff84001220 <init_freemem+0x25a>
    0x84001256    0x290    mv s0,s4
    0x84001258    0x292    mv s1,s4
    0x8400125a    0x294    slli s2,s1,0x4
    0x8400125e    0x298    add s2,s2,s6
    0x84001260    0x29a    li s6,1
    0x84001262    0x29c    slli s6,s6,0x26
    0x84001264    0x29e    bltu s1,s5,ffffffff84001160 <init_freemem+0x19a>
    0x84001268    0x2a2    auipc a5,0x0
    0x8400126c    0x2a6    addi a5,a5,1872 # ffffffff840019b8 <ndks_boot>
    0x84001270    0x2aa    ld a3,568(a5)
    0x84001274    0x2ae    ld a4,576(a5)
    0x84001278    0x2b2    auipc a5,0x1
    0x8400127c    0x2b6    addi a5,a5,-1688 # ffffffff84001be0 <ndks_boot+0x228>
    0x84001280    0x2ba    li s1,15
    0x84001282    0x2bc    bne a3,a4,ffffffff840011ba <init_freemem+0x1f4>
    0x84001286    0x2c0    mv s2,s1
    0x84001288    0x2c2    addi s1,s1,-1
    0x8400128a    0x2c4    ld a3,0(a5)
    0x8400128c    0x2c6    addi a5,a5,-16
    0x8400128e    0x2c8    ld a4,24(a5)
    0x84001290    0x2ca    beq a3,a4,ffffffff84001286 <init_freemem+0x2c0>
    0x84001294    0x2ce    ld a5,0(sp)           ; stack access
    0x84001296    0x2d0    sd a5,16(sp)          ; stack access
    0x84001298    0x2d2    ld a5,8(sp)           ; stack access
    0x8400129a    0x2d4    sd a5,24(sp)          ; stack access
    0x8400129c    0x2d6    mv s0,s3
    0x8400129e    0x2d8    beqz s3,ffffffff840012a8 <init_freemem+0x2e2>
    0x840012a2    0x2dc    li s0,1
    0x840012a4    0x2de    sll s0,s0,s3
    0x840012a8    0x2e2    ld a0,16(sp)          ; stack access
    0x840012aa    0x2e4    ld a1,24(sp)          ; stack access
    0x840012ac    0x2e6    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x840012b0    0x2ea    lui s4,0x1004
    0x840012b4    0x2ee    addi s4,s4,1280 # 1004500 <KERNEL_OFFSET-0xfffffffefeffbb00>
    0x840012b8    0x2f2    add s0,s0,s4
    0x840012ba    0x2f4    slli s4,a0,0xc
    0x840012be    0x2f8    add s4,s4,s0
    0x840012c0    0x2fa    mv a3,s3
    0x840012c2    0x2fc    li a5,24
    0x840012c4    0x2fe    bgeu s3,a5,ffffffff840012ca <init_freemem+0x304>
    0x840012c8    0x302    li a3,24
    0x840012ca    0x304    sext.w a4,a3
    0x840012ce    0x308    addi a5,s1,20
    0x840012d2    0x30c    slli a2,a5,0x4
    0x840012d6    0x310    auipc a5,0x0
    0x840012da    0x314    addi a5,a5,1762 # ffffffff840019b8 <ndks_boot>
    0x840012de    0x318    add a5,a5,a2
    0x840012e0    0x31a    ld s0,16(a5)
    0x840012e2    0x31c    sub s0,s0,s4
    0x840012e6    0x320    srl s0,s0,a3
    0x840012ea    0x324    sll s0,s0,a3
    0x840012ee    0x328    ld a5,8(a5)
    0x840012f0    0x32a    bgeu s0,a5,ffffffff840011be <init_freemem+0x1f8>
    0x840012f4    0x32e    slli a5,s1,0x4
    0x840012f8    0x332    auipc a3,0x0
    0x840012fc    0x336    addi a3,a3,2040 # ffffffff84001af0 <ndks_boot+0x138>
    0x84001300    0x33a    add a5,a5,a3
    0x84001302    0x33c    li a2,15
    0x84001304    0x33e    auipc a1,0x0
    0x84001308    0x342    addi a1,a1,1716 # ffffffff840019b8 <ndks_boot>
    0x8400130c    0x346    j ffffffff8400123e <init_freemem+0x278>
    0x8400130e    0x348    li s1,0
    0x84001310    0x34a    li s0,0
    0x84001312    0x34c    auipc s7,0x0
    0x84001316    0x350    addi s7,s7,1702 # ffffffff840019b8 <ndks_boot>
    0x8400131a    0x354    li s8,1
    0x8400131c    0x356    slli s8,s8,0x26
    0x8400131e    0x358    bnez s5,ffffffff84001096 <init_freemem+0xd0>
    0x84001322    0x35c    mv s0,s5
    0x84001324    0x35e    j ffffffff8400117e <init_freemem+0x1b8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
299 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 463 nodes.

Section create_initial_thread (267 of 292)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 136 instructions.


Stack analysis
---------------

37 stack accesses found. Annotated code for `create_initial_thread`:

    0x84000c0a      0x0    addi sp,sp,-144
    0x84000c0c      0x2    sd ra,120(sp)         ; stack access
    0x84000c0e      0x4    sd s0,112(sp)         ; stack access
    0x84000c10      0x6    sd s1,104(sp)         ; stack access
    0x84000c12      0x8    sd s2,96(sp)          ; stack access
    0x84000c14      0xa    sd s3,88(sp)          ; stack access
    0x84000c16      0xc    sd s4,80(sp)          ; stack access
    0x84000c18      0xe    sd s5,72(sp)          ; stack access
    0x84000c1a     0x10    sd a0,16(sp)          ; stack access
    0x84000c1c     0x12    sd a1,24(sp)          ; stack access
    0x84000c1e     0x14    sd a2,0(sp)           ; stack access
    0x84000c20     0x16    sd a3,8(sp)           ; stack access
    0x84000c22     0x18    mv s3,a4
    0x84000c24     0x1a    mv s4,a5
    0x84000c26     0x1c    mv s5,a6
    0x84000c28     0x1e    mv s2,a7
    0x84000c2a     0x20    sd a7,136(sp)         ; stack access
    0x84000c2c     0x22    auipc s0,0x1
    0x84000c30     0x26    ld s0,28(s0) # ffffffff84001c48 <rootserver+0x30>
    0x84000c34     0x2a    addi s0,s0,512
    0x84000c38     0x2e    li a5,32
    0x84000c3c     0x32    sd a5,256(s0)
    0x84000c40     0x36    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000c44     0x3a    mv a2,s2
    0x84000c46     0x3c    ld a3,144(sp)         ; stack access
    0x84000c48     0x3e    addi a1,a0,320
    0x84000c4c     0x42    addi a0,sp,40
    0x84000c4e     0x44    jal ra,ffffffff840044a4 <deriveCap>
    0x84000c52     0x48    ld a5,40(sp)          ; stack access
    0x84000c54     0x4a    li s1,0
    0x84000c56     0x4c    bnez a5,ffffffff84000d88 <create_initial_thread+0x17e>
    0x84000c5a     0x50    mv s1,s0
    0x84000c5c     0x52    ld a0,16(sp)          ; stack access
    0x84000c5e     0x54    ld a1,24(sp)          ; stack access
    0x84000c60     0x56    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000c64     0x5a    auipc s2,0x1
    0x84000c68     0x5e    addi s2,s2,-684 # ffffffff840019b8 <ndks_boot>
    0x84000c6c     0x62    ld a3,656(s2)
    0x84000c70     0x66    addi a2,a0,64
    0x84000c74     0x6a    ld a0,16(sp)          ; stack access
    0x84000c76     0x6c    ld a1,24(sp)          ; stack access
    0x84000c78     0x6e    jal ra,ffffffff84003aba <cteInsert>
    0x84000c7c     0x72    ld a0,16(sp)          ; stack access
    0x84000c7e     0x74    ld a1,24(sp)          ; stack access
    0x84000c80     0x76    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000c84     0x7a    ld a3,656(s2)
    0x84000c88     0x7e    addi a3,a3,32 # ffffffffc0000020 <ki_end+0x3bfdc020>
    0x84000c8c     0x82    addi a2,a0,96
    0x84000c90     0x86    ld a0,0(sp)           ; stack access
    0x84000c92     0x88    ld a1,8(sp)           ; stack access
    0x84000c94     0x8a    jal ra,ffffffff84003aba <cteInsert>
    0x84000c98     0x8e    ld a0,16(sp)          ; stack access
    0x84000c9a     0x90    ld a1,24(sp)          ; stack access
    0x84000c9c     0x92    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000ca0     0x96    ld a3,656(s2)
    0x84000ca4     0x9a    addi a3,a3,64
    0x84000ca8     0x9e    addi a2,a0,320
    0x84000cac     0xa2    ld a0,48(sp)          ; stack access
    0x84000cae     0xa4    ld a1,56(sp)          ; stack access
    0x84000cb0     0xa6    jal ra,ffffffff84003aba <cteInsert>
    0x84000cb4     0xaa    sd s5,384(s0)
    0x84000cb8     0xae    sd s4,72(s0)
    0x84000cbc     0xb2    sd s3,272(s0)
    0x84000cc0     0xb6    ld a0,664(s2)
    0x84000cc4     0xba    sd a0,368(s0)
    0x84000cc8     0xbe    li a3,0
    0x84000cca     0xc0    lui a2,0x1
    0x84000ccc     0xc2    addi a2,a2,904 # 1388 <KERNEL_OFFSET-0xfffffffeffffec78>
    0x84000cd0     0xc6    li a1,2
    0x84000cd2     0xc8    jal ra,ffffffff840035ec <refill_new>
    0x84000cd6     0xcc    ld a5,368(s0)
    0x84000cda     0xd0    sd s0,24(a5)
    0x84000cdc     0xd2    li a5,255
    0x84000ce0     0xd6    sd a5,360(s0)
    0x84000ce4     0xda    sd a5,352(s0)
    0x84000ce8     0xde    auipc s2,0xb
    0x84000cec     0xe2    addi s2,s2,472 # ffffffff8400bec0 <fault_messages>
    0x84000cf0     0xe6    auipc s3,0x1e
    0x84000cf4     0xea    addi s3,s3,792 # ffffffff8401f008 <ksDomScheduleIdx>
    0x84000cf8     0xee    ld a5,0(s3)
    0x84000cfc     0xf2    slli a5,a5,0x4
    0x84000cfe     0xf4    add a5,a5,s2
    0x84000d00     0xf6    ld a5,96(a5)
    0x84000d02     0xf8    sd a5,344(s0)
    0x84000d06     0xfc    li a1,1
    0x84000d08     0xfe    mv a0,s0
    0x84000d0a    0x100    jal ra,ffffffff84004a52 <setThreadState>
    0x84000d0e    0x104    ld a5,0(s3)
    0x84000d12    0x108    slli a5,a5,0x4
    0x84000d14    0x10a    add s2,s2,a5
    0x84000d16    0x10c    ld a5,96(s2)
    0x84000d1a    0x110    auipc a4,0x1e
    0x84000d1e    0x114    sd a5,766(a4) # ffffffff8401f018 <ksCurDomain>
    0x84000d22    0x118    ld a5,104(s2)
    0x84000d26    0x11c    li a4,1000
    0x84000d2a    0x120    mul a5,a5,a4
    0x84000d2e    0x124    auipc a4,0x1e
    0x84000d32    0x128    sd a5,738(a4) # ffffffff8401f010 <ksDomainTime>
    0x84000d36    0x12c    ld a0,16(sp)          ; stack access
    0x84000d38    0x12e    ld a1,24(sp)          ; stack access
    0x84000d3a    0x130    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000d3e    0x134    slli a5,s0,0x19
    0x84000d42    0x138    srli a5,a5,0x19
    0x84000d44    0x13a    li s2,3
    0x84000d46    0x13c    slli a4,s2,0x3d
    0x84000d4a    0x140    or a5,a5,a4
    0x84000d4c    0x142    sd a5,32(a0)
    0x84000d4e    0x144    sd zero,40(a0)
    0x84000d52    0x148    sd zero,48(a0)
    0x84000d56    0x14c    sd s2,56(a0)
    0x84000d5a    0x150    ld s0,368(s0)
    0x84000d5e    0x154    slli s0,s0,0x10
    0x84000d60    0x156    lui a5,0xfe000
    0x84000d64    0x15a    srli a5,a5,0x9
    0x84000d66    0x15c    and s0,s0,a5
    0x84000d68    0x15e    lui a5,0x2
    0x84000d6a    0x160    or s0,s0,a5
    0x84000d6c    0x162    ld a0,16(sp)          ; stack access
    0x84000d6e    0x164    ld a1,24(sp)          ; stack access
    0x84000d70    0x166    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x84000d74    0x16a    li a5,-5
    0x84000d76    0x16c    slli a5,a5,0x3c
    0x84000d78    0x16e    sd a5,384(a0)
    0x84000d7c    0x172    sd s0,392(a0)
    0x84000d80    0x176    sd zero,400(a0)
    0x84000d84    0x17a    sd s2,408(a0)
    0x84000d88    0x17e    mv a0,s1
    0x84000d8a    0x180    ld ra,120(sp)         ; stack access
    0x84000d8c    0x182    ld s0,112(sp)         ; stack access
    0x84000d8e    0x184    ld s1,104(sp)         ; stack access
    0x84000d90    0x186    ld s2,96(sp)          ; stack access
    0x84000d92    0x188    ld s3,88(sp)          ; stack access
    0x84000d94    0x18a    ld s4,80(sp)          ; stack access
    0x84000d96    0x18c    ld s5,72(sp)          ; stack access
    0x84000d98    0x18e    addi sp,sp,144
    0x84000d9a    0x190    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
136 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 219 nodes.

Section handleUserLevelFault (268 of 292)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 80 instructions.

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x8400abba     0x0    addi sp,sp,-16
    0x8400abbc     0x2    sd ra,8(sp)           ; stack access
    0x8400abbe     0x4    auipc a4,0x14
    0x8400abc2     0x8    addi a4,a4,1138 # ffffffff8401f030 <ksCurTime>
    0x8400abc6     0xc    ld a2,0(a4)
    0x8400abc8     0xe    rdtime a3
    0x8400abcc    0x12    sd a3,0(a4)
    0x8400abce    0x14    auipc a4,0x14
    0x8400abd2    0x18    addi a4,a4,1138 # ffffffff8401f040 <ksConsumed>
    0x8400abd6    0x1c    ld a5,0(a4)
    0x8400abd8    0x1e    sub a5,a5,a2
    0x8400abda    0x20    add a5,a5,a3
    0x8400abdc    0x22    sd a5,0(a4)
    0x8400abde    0x24    auipc a3,0x14
    0x8400abe2    0x28    ld a3,1098(a3) # ffffffff8401f028 <ksCurSC>
    0x8400abe6    0x2c    ld a2,72(a3)
    0x8400abe8    0x2e    slli a4,a2,0x4
    0x8400abec    0x32    add a4,a4,a3
    0x8400abee    0x34    ld a4,96(a4)
    0x8400abf0    0x36    bltu a4,a5,ffffffff8400ac62 <handleUserLevelFault+0xa8>
    0x8400abf4    0x3a    sub a4,a4,a5
    0x8400abf6    0x3c    li a6,19
    0x8400abf8    0x3e    bgeu a6,a4,ffffffff8400ac62 <handleUserLevelFault+0xa8>
    0x8400abfc    0x42    ld a4,0(a3)
    0x8400abfe    0x44    bnez a4,ffffffff8400ac4a <handleUserLevelFault+0x90>
    0x8400ac00    0x46    addi a5,a5,20
    0x8400ac02    0x48    auipc a4,0x14
    0x8400ac06    0x4c    ld a4,1038(a4) # ffffffff8401f010 <ksDomainTime>
    0x8400ac0a    0x50    bltu a4,a5,ffffffff8400ac94 <handleUserLevelFault+0xda>
    0x8400ac0e    0x54    auipc a4,0x2
    0x8400ac12    0x58    addi a4,a4,-1038 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400ac16    0x5c    slli a1,a1,0x4
    0x8400ac18    0x5e    li a5,-1
    0x8400ac1a    0x60    srli a5,a5,0x20
    0x8400ac1c    0x62    and a1,a1,a5
    0x8400ac1e    0x64    slli a0,a0,0x20
    0x8400ac20    0x66    or a1,a1,a0
    0x8400ac22    0x68    ori a1,a1,3
    0x8400ac26    0x6c    sd a1,1096(a4)
    0x8400ac2a    0x70    sd zero,1104(a4)
    0x8400ac2e    0x74    auipc a0,0x14
    0x8400ac32    0x78    ld a0,1066(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ac36    0x7c    jal ra,ffffffff84006ebc <handleFault>
    0x8400ac3a    0x80    jal ra,ffffffff8400a7ce <schedule>
    0x8400ac3e    0x84    jal ra,ffffffff84004b44 <activateThread>
    0x8400ac42    0x88    li a0,0
    0x8400ac44    0x8a    ld ra,8(sp)           ; stack access
    0x8400ac46    0x8c    addi sp,sp,16
    0x8400ac48    0x8e    ret
    0x8400ac4a    0x90    ld a4,80(a3)
    0x8400ac4c    0x92    bgeu a4,a2,ffffffff8400ac8c <handleUserLevelFault+0xd2>
    0x8400ac50    0x96    ld a6,64(a3)
    0x8400ac54    0x9a    add a4,a4,a6
    0x8400ac56    0x9c    addi a4,a4,1
    0x8400ac58    0x9e    sub a2,a4,a2
    0x8400ac5c    0xa2    ld a4,64(a3)
    0x8400ac5e    0xa4    bne a4,a2,ffffffff8400ac00 <handleUserLevelFault+0x46>
    0x8400ac62    0xa8    li a3,1
    0x8400ac64    0xaa    li a2,0
    0x8400ac66    0xac    li a1,1
    0x8400ac68    0xae    mv a0,a5
    0x8400ac6a    0xb0    jal ra,ffffffff84006f86 <chargeBudget>
    0x8400ac6e    0xb4    auipc a0,0x14
    0x8400ac72    0xb8    ld a0,1002(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ac76    0xbc    ld a5,280(a0)
    0x8400ac7a    0xc0    andi a5,a5,15
    0x8400ac7c    0xc2    addi a5,a5,-1
    0x8400ac7e    0xc4    li a4,1
    0x8400ac80    0xc6    bltu a4,a5,ffffffff8400ac3a <handleUserLevelFault+0x80>
    0x8400ac84    0xca    li a1,2
    0x8400ac86    0xcc    jal ra,ffffffff84004a52 <setThreadState>
    0x8400ac8a    0xd0    j ffffffff8400ac3a <handleUserLevelFault+0x80>
    0x8400ac8c    0xd2    addi a4,a4,1
    0x8400ac8e    0xd4    sub a2,a4,a2
    0x8400ac92    0xd8    j ffffffff8400ac5c <handleUserLevelFault+0xa2>
    0x8400ac94    0xda    li a5,1
    0x8400ac96    0xdc    auipc a4,0x14
    0x8400ac9a    0xe0    sd a5,930(a4) # ffffffff8401f038 <ksReprogram>
    0x8400ac9e    0xe4    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x8400aca2    0xe8    j ffffffff8400ac6e <handleUserLevelFault+0xb4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 122 nodes.

Section handleUnknownSyscall (269 of 292)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 74 instructions.

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x8400aae0     0x0    addi sp,sp,-16
    0x8400aae2     0x2    sd ra,8(sp)           ; stack access
    0x8400aae4     0x4    auipc a4,0x14
    0x8400aae8     0x8    addi a4,a4,1356 # ffffffff8401f030 <ksCurTime>
    0x8400aaec     0xc    ld a2,0(a4)
    0x8400aaee     0xe    rdtime a3
    0x8400aaf2    0x12    sd a3,0(a4)
    0x8400aaf4    0x14    auipc a4,0x14
    0x8400aaf8    0x18    addi a4,a4,1356 # ffffffff8401f040 <ksConsumed>
    0x8400aafc    0x1c    ld a5,0(a4)
    0x8400aafe    0x1e    sub a5,a5,a2
    0x8400ab00    0x20    add a5,a5,a3
    0x8400ab02    0x22    sd a5,0(a4)
    0x8400ab04    0x24    auipc a3,0x14
    0x8400ab08    0x28    ld a3,1316(a3) # ffffffff8401f028 <ksCurSC>
    0x8400ab0c    0x2c    ld a2,72(a3)
    0x8400ab0e    0x2e    slli a4,a2,0x4
    0x8400ab12    0x32    add a4,a4,a3
    0x8400ab14    0x34    ld a4,96(a4)
    0x8400ab16    0x36    bltu a4,a5,ffffffff8400ab78 <handleUnknownSyscall+0x98>
    0x8400ab1a    0x3a    sub a4,a4,a5
    0x8400ab1c    0x3c    li a1,19
    0x8400ab1e    0x3e    bgeu a1,a4,ffffffff8400ab78 <handleUnknownSyscall+0x98>
    0x8400ab22    0x42    ld a4,0(a3)
    0x8400ab24    0x44    bnez a4,ffffffff8400ab62 <handleUnknownSyscall+0x82>
    0x8400ab26    0x46    addi a5,a5,20
    0x8400ab28    0x48    auipc a4,0x14
    0x8400ab2c    0x4c    ld a4,1256(a4) # ffffffff8401f010 <ksDomainTime>
    0x8400ab30    0x50    bltu a4,a5,ffffffff8400abaa <handleUnknownSyscall+0xca>
    0x8400ab34    0x54    auipc a5,0x2
    0x8400ab38    0x58    addi a5,a5,-820 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400ab3c    0x5c    li a4,2
    0x8400ab3e    0x5e    sd a4,1096(a5)
    0x8400ab42    0x62    sd a0,1104(a5)
    0x8400ab46    0x66    auipc a0,0x14
    0x8400ab4a    0x6a    ld a0,1298(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ab4e    0x6e    jal ra,ffffffff84006ebc <handleFault>
    0x8400ab52    0x72    jal ra,ffffffff8400a7ce <schedule>
    0x8400ab56    0x76    jal ra,ffffffff84004b44 <activateThread>
    0x8400ab5a    0x7a    li a0,0
    0x8400ab5c    0x7c    ld ra,8(sp)           ; stack access
    0x8400ab5e    0x7e    addi sp,sp,16
    0x8400ab60    0x80    ret
    0x8400ab62    0x82    ld a4,80(a3)
    0x8400ab64    0x84    bgeu a4,a2,ffffffff8400aba2 <handleUnknownSyscall+0xc2>
    0x8400ab68    0x88    ld a1,64(a3)
    0x8400ab6a    0x8a    add a4,a4,a1
    0x8400ab6c    0x8c    addi a4,a4,1
    0x8400ab6e    0x8e    sub a2,a4,a2
    0x8400ab72    0x92    ld a4,64(a3)
    0x8400ab74    0x94    bne a4,a2,ffffffff8400ab26 <handleUnknownSyscall+0x46>
    0x8400ab78    0x98    li a3,1
    0x8400ab7a    0x9a    li a2,0
    0x8400ab7c    0x9c    li a1,1
    0x8400ab7e    0x9e    mv a0,a5
    0x8400ab80    0xa0    jal ra,ffffffff84006f86 <chargeBudget>
    0x8400ab84    0xa4    auipc a0,0x14
    0x8400ab88    0xa8    ld a0,1236(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ab8c    0xac    ld a5,280(a0)
    0x8400ab90    0xb0    andi a5,a5,15
    0x8400ab92    0xb2    addi a5,a5,-1
    0x8400ab94    0xb4    li a4,1
    0x8400ab96    0xb6    bltu a4,a5,ffffffff8400ab52 <handleUnknownSyscall+0x72>
    0x8400ab9a    0xba    li a1,2
    0x8400ab9c    0xbc    jal ra,ffffffff84004a52 <setThreadState>
    0x8400aba0    0xc0    j ffffffff8400ab52 <handleUnknownSyscall+0x72>
    0x8400aba2    0xc2    addi a4,a4,1
    0x8400aba4    0xc4    sub a2,a4,a2
    0x8400aba8    0xc8    j ffffffff8400ab72 <handleUnknownSyscall+0x92>
    0x8400abaa    0xca    li a5,1
    0x8400abac    0xcc    auipc a4,0x14
    0x8400abb0    0xd0    sd a5,1164(a4) # ffffffff8401f038 <ksReprogram>
    0x8400abb4    0xd4    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x8400abb8    0xd8    j ffffffff8400ab84 <handleUnknownSyscall+0xa4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 116 nodes.

Section handleInterruptEntry (270 of 292)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 78 instructions.

Skipping c0102773 rdtime a4


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x8400a9f0     0x0    addi sp,sp,-16
    0x8400a9f2     0x2    sd ra,8(sp)           ; stack access
    0x8400a9f4     0x4    sd s0,0(sp)           ; stack access
    0x8400a9f6     0x6    auipc a5,0x14
    0x8400a9fa     0xa    lw a5,1658(a5) # ffffffff8401f070 <active_irq>
    0x8400a9fe     0xe    addiw a3,a5,-1
    0x8400aa02    0x12    li a4,53
    0x8400aa06    0x16    bltu a4,a3,ffffffff8400aa74 <handleInterruptEntry+0x84>
    0x8400aa0a    0x1a    slli s0,a5,0x20
    0x8400aa0e    0x1e    srli s0,s0,0x20
    0x8400aa10    0x20    auipc a5,0x14
    0x8400aa14    0x24    addi a5,a5,1568 # ffffffff8401f030 <ksCurTime>
    0x8400aa18    0x28    ld a3,0(a5)
    0x8400aa1a    0x2a    rdtime a4
    0x8400aa1e    0x2e    sd a4,0(a5)
    0x8400aa20    0x30    auipc a5,0x14
    0x8400aa24    0x34    addi a5,a5,1568 # ffffffff8401f040 <ksConsumed>
    0x8400aa28    0x38    ld a0,0(a5)
    0x8400aa2a    0x3a    sub a0,a0,a3
    0x8400aa2c    0x3c    add a0,a0,a4
    0x8400aa2e    0x3e    sd a0,0(a5)
    0x8400aa30    0x40    auipc a4,0x14
    0x8400aa34    0x44    ld a4,1528(a4) # ffffffff8401f028 <ksCurSC>
    0x8400aa38    0x48    ld a3,72(a4)
    0x8400aa3a    0x4a    slli a5,a3,0x4
    0x8400aa3e    0x4e    add a5,a5,a4
    0x8400aa40    0x50    ld a5,96(a5)
    0x8400aa42    0x52    bltu a5,a0,ffffffff8400aaa8 <handleInterruptEntry+0xb8>
    0x8400aa46    0x56    sub a5,a5,a0
    0x8400aa48    0x58    li a2,19
    0x8400aa4a    0x5a    bgeu a2,a5,ffffffff8400aaa8 <handleInterruptEntry+0xb8>
    0x8400aa4e    0x5e    ld a5,0(a4)
    0x8400aa50    0x60    bnez a5,ffffffff8400aa92 <handleInterruptEntry+0xa2>
    0x8400aa52    0x62    addi a0,a0,20
    0x8400aa54    0x64    auipc a5,0x14
    0x8400aa58    0x68    ld a5,1468(a5) # ffffffff8401f010 <ksDomainTime>
    0x8400aa5c    0x6c    bltu a5,a0,ffffffff8400aabc <handleInterruptEntry+0xcc>
    0x8400aa60    0x70    bnez s0,ffffffff8400aacc <handleInterruptEntry+0xdc>
    0x8400aa62    0x72    jal ra,ffffffff8400a7ce <schedule>
    0x8400aa66    0x76    jal ra,ffffffff84004b44 <activateThread>
    0x8400aa6a    0x7a    li a0,0
    0x8400aa6c    0x7c    ld ra,8(sp)           ; stack access
    0x8400aa6e    0x7e    ld s0,0(sp)           ; stack access
    0x8400aa70    0x80    addi sp,sp,16
    0x8400aa72    0x82    ret
    0x8400aa74    0x84    jal ra,ffffffff840021e2 <getNewActiveIRQ>
    0x8400aa78    0x88    sext.w a5,a0
    0x8400aa7c    0x8c    auipc a4,0x14
    0x8400aa80    0x90    sw a0,1524(a4) # ffffffff8401f070 <active_irq>
    0x8400aa84    0x94    addiw a0,a0,-1
    0x8400aa86    0x96    li a4,53
    0x8400aa8a    0x9a    bgeu a4,a0,ffffffff8400aa0a <handleInterruptEntry+0x1a>
    0x8400aa8e    0x9e    li a5,0
    0x8400aa90    0xa0    j ffffffff8400aa0a <handleInterruptEntry+0x1a>
    0x8400aa92    0xa2    ld a5,80(a4)
    0x8400aa94    0xa4    bgeu a5,a3,ffffffff8400aab4 <handleInterruptEntry+0xc4>
    0x8400aa98    0xa8    ld a2,64(a4)
    0x8400aa9a    0xaa    add a5,a5,a2
    0x8400aa9c    0xac    addi a5,a5,1
    0x8400aa9e    0xae    sub a3,a5,a3
    0x8400aaa2    0xb2    ld a5,64(a4)
    0x8400aaa4    0xb4    bne a5,a3,ffffffff8400aa52 <handleInterruptEntry+0x62>
    0x8400aaa8    0xb8    li a3,1
    0x8400aaaa    0xba    li a2,0
    0x8400aaac    0xbc    li a1,1
    0x8400aaae    0xbe    jal ra,ffffffff84006f86 <chargeBudget>
    0x8400aab2    0xc2    j ffffffff8400aa60 <handleInterruptEntry+0x70>
    0x8400aab4    0xc4    addi a5,a5,1
    0x8400aab6    0xc6    sub a3,a5,a3
    0x8400aaba    0xca    j ffffffff8400aaa2 <handleInterruptEntry+0xb2>
    0x8400aabc    0xcc    li a5,1
    0x8400aabe    0xce    auipc a4,0x14
    0x8400aac2    0xd2    sd a5,1402(a4) # ffffffff8401f038 <ksReprogram>
    0x8400aac6    0xd6    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x8400aaca    0xda    j ffffffff8400aa60 <handleInterruptEntry+0x70>
    0x8400aacc    0xdc    mv a0,s0
    0x8400aace    0xde    jal ra,ffffffff84006798 <handleInterrupt>
    0x8400aad2    0xe2    j ffffffff8400aa62 <handleInterruptEntry+0x72>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 123 nodes.

Section decodeUntypedInvocation (271 of 292)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 267 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x84009eb8      0x0    addi sp,sp,-176
    0x84009eba      0x2    sd ra,168(sp)         ; stack access
    0x84009ebc      0x4    sd s0,160(sp)         ; stack access
    0x84009ebe      0x6    sd s1,152(sp)         ; stack access
    0x84009ec0      0x8    sd s2,144(sp)         ; stack access
    0x84009ec2      0xa    sd s3,136(sp)         ; stack access
    0x84009ec4      0xc    sd s4,128(sp)         ; stack access
    0x84009ec6      0xe    sd s5,120(sp)         ; stack access
    0x84009ec8     0x10    sd s6,112(sp)         ; stack access
    0x84009eca     0x12    sd s7,104(sp)         ; stack access
    0x84009ecc     0x14    sd s8,96(sp)          ; stack access
    0x84009ece     0x16    sd s9,88(sp)          ; stack access
    0x84009ed0     0x18    sd s10,80(sp)         ; stack access
    0x84009ed2     0x1a    sd s11,72(sp)         ; stack access
    0x84009ed4     0x1c    sd a3,16(sp)          ; stack access
    0x84009ed6     0x1e    sd a4,24(sp)          ; stack access
    0x84009ed8     0x20    li a5,1
    0x84009eda     0x22    bne a0,a5,ffffffff8400a04c <decodeUntypedInvocation+0x194>
    0x84009ede     0x26    mv s0,a0
    0x84009ee0     0x28    mv s1,a2
    0x84009ee2     0x2a    mv s6,a6
    0x84009ee4     0x2c    li a5,5
    0x84009ee6     0x2e    bgeu a5,a1,ffffffff8400a076 <decodeUntypedInvocation+0x1be>
    0x84009eea     0x32    auipc s11,0x3
    0x84009eee     0x36    ld s11,422(s11) # ffffffff8400d090 <current_extra_caps>
    0x84009ef2     0x3a    beqz s11,ffffffff8400a076 <decodeUntypedInvocation+0x1be>
    0x84009ef6     0x3e    auipc s8,0x15
    0x84009efa     0x42    ld s8,354(s8) # ffffffff8401f058 <ksCurThread>
    0x84009efe     0x46    ld s2,88(s8)
    0x84009f02     0x4a    li a5,10
    0x84009f04     0x4c    bltu a5,s2,ffffffff8400a084 <decodeUntypedInvocation+0x1cc>
    0x84009f08     0x50    ld s4,96(s8)
    0x84009f0c     0x54    mv a1,s4
    0x84009f0e     0x56    mv a0,s2
    0x84009f10     0x58    jal ra,ffffffff84003fe4 <getObjectSize>
    0x84009f14     0x5c    mv s3,a0
    0x84009f16     0x5e    li a5,63
    0x84009f1a     0x62    bltu a5,s4,ffffffff8400a09a <decodeUntypedInvocation+0x1e2>
    0x84009f1e     0x66    li a5,38
    0x84009f22     0x6a    bltu a5,a0,ffffffff8400a09a <decodeUntypedInvocation+0x1e2>
    0x84009f26     0x6e    li a5,4
    0x84009f28     0x70    beq s2,a5,ffffffff8400a0b8 <decodeUntypedInvocation+0x200>
    0x84009f2c     0x74    bnez s2,ffffffff8400a0e8 <decodeUntypedInvocation+0x230>
    0x84009f30     0x78    li a5,3
    0x84009f32     0x7a    bgeu a5,s4,ffffffff8400a0d2 <decodeUntypedInvocation+0x21a>
    0x84009f36     0x7e    ld s10,24(sp)         ; stack access
    0x84009f38     0x80    ld s5,112(s8)
    0x84009f3c     0x84    ld s7,40(s6)
    0x84009f40     0x88    ld s9,48(s6)
    0x84009f44     0x8c    bnez s5,ffffffff8400a10a <decodeUntypedInvocation+0x252>
    0x84009f48     0x90    ld a5,0(s11)
    0x84009f4c     0x94    srli a4,a5,0x3b
    0x84009f50     0x98    li a3,10
    0x84009f52     0x9a    bne a4,a3,ffffffff8400a12a <decodeUntypedInvocation+0x272>
    0x84009f56     0x9e    srli a4,a5,0x2f
    0x84009f5a     0xa2    li a3,1
    0x84009f5c     0xa4    sll a4,a3,a4
    0x84009f60     0xa8    addi a3,a4,-1
    0x84009f64     0xac    bltu a3,s7,ffffffff8400a154 <decodeUntypedInvocation+0x29c>
    0x84009f68     0xb0    addi a3,s9,-1
    0x84009f6c     0xb4    li a2,255
    0x84009f70     0xb8    bltu a2,a3,ffffffff8400a16e <decodeUntypedInvocation+0x2b6>
    0x84009f74     0xbc    sub a4,a4,s7
    0x84009f78     0xc0    bltu a4,s9,ffffffff8400a18e <decodeUntypedInvocation+0x2d6>
    0x84009f7c     0xc4    slli a5,a5,0x1
    0x84009f7e     0xc6    lui s5,0xfc000
    0x84009f82     0xca    srli s5,s5,0x19
    0x84009f86     0xce    and a4,a5,s5
    0x84009f8a     0xd2    srli a5,a5,0x26
    0x84009f8c     0xd4    andi a5,a5,1
    0x84009f8e     0xd6    beqz a5,ffffffff84009f96 <decodeUntypedInvocation+0xde>
    0x84009f90     0xd8    li a5,-1
    0x84009f92     0xda    slli a5,a5,0x27
    0x84009f94     0xdc    or a4,a4,a5
    0x84009f96     0xde    mv s11,a4
    0x84009f98     0xe0    add s8,s9,s7
    0x84009f9c     0xe4    bgeu s7,s8,ffffffff84009fba <decodeUntypedInvocation+0x102>
    0x84009fa0     0xe8    slli s5,s7,0x5
    0x84009fa4     0xec    add s5,s5,a4
    0x84009fa6     0xee    mv s6,s7
    0x84009fa8     0xf0    mv a0,s5
    0x84009faa     0xf2    jal ra,ffffffff84003dae <ensureEmptySlot>
    0x84009fae     0xf6    bnez a0,ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x84009fb0     0xf8    addi s6,s6,1
    0x84009fb2     0xfa    addi s5,s5,32 # fffffffffc000020 <ki_end+0x77fdc020>
    0x84009fb6     0xfe    bne s6,s8,ffffffff84009fa8 <decodeUntypedInvocation+0xf0>
    0x84009fba    0x102    mv a0,s1
    0x84009fbc    0x104    jal ra,ffffffff84004466 <ensureNoChildren>
    0x84009fc0    0x108    beqz a0,ffffffff84009fc8 <decodeUntypedInvocation+0x110>
    0x84009fc2    0x10a    srli a0,s10,0x19
    0x84009fc6    0x10e    li s0,0
    0x84009fc8    0x110    ld a5,16(sp)          ; stack access
    0x84009fca    0x112    slli s5,a5,0x19
    0x84009fce    0x116    srli a4,s5,0x19
    0x84009fd2    0x11a    srli a5,a5,0x26
    0x84009fd4    0x11c    andi a5,a5,1
    0x84009fd6    0x11e    beqz a5,ffffffff84009fde <decodeUntypedInvocation+0x126>
    0x84009fd8    0x120    li a5,-1
    0x84009fda    0x122    slli a5,a5,0x27
    0x84009fdc    0x124    or a4,a4,a5
    0x84009fde    0x126    slli a0,a0,0x4
    0x84009fe0    0x128    li a5,1
    0x84009fe2    0x12a    sll a5,a5,s10
    0x84009fe6    0x12e    sub a5,a5,a0
    0x84009fe8    0x130    sext.w a3,s3
    0x84009fec    0x134    srl s3,a5,s3
    0x84009ff0    0x138    bltu s3,s9,ffffffff8400a1aa <decodeUntypedInvocation+0x2f2>
    0x84009ff4    0x13c    srli s3,s10,0x6
    0x84009ff8    0x140    andi s3,s3,1
    0x84009ffc    0x144    beqz s3,ffffffff8400a00e <decodeUntypedInvocation+0x156>
    0x8400a000    0x148    addi a5,s2,-7
    0x8400a004    0x14c    li a2,2
    0x8400a006    0x14e    bgeu a2,a5,ffffffff8400a00e <decodeUntypedInvocation+0x156>
    0x8400a00a    0x152    bnez s2,ffffffff8400a1c0 <decodeUntypedInvocation+0x308>
    0x8400a00e    0x156    li a5,1
    0x8400a010    0x158    sll a5,a5,a3
    0x8400a014    0x15c    addi s5,a5,-1 # ffff <KERNEL_OFFSET-0xfffffffeffff0001>
    0x8400a018    0x160    add a0,a0,s5
    0x8400a01a    0x162    add s5,a0,a4
    0x8400a01e    0x166    neg a5,a5
    0x8400a022    0x16a    and s5,s5,a5
    0x8400a026    0x16e    li a1,2
    0x8400a028    0x170    auipc a0,0x15
    0x8400a02c    0x174    ld a0,48(a0) # ffffffff8401f058 <ksCurThread>
    0x8400a030    0x178    jal ra,ffffffff84004a52 <setThreadState>
    0x8400a034    0x17c    sd s3,0(sp)           ; stack access
    0x8400a036    0x17e    mv a7,s9
    0x8400a038    0x180    mv a6,s7
    0x8400a03a    0x182    mv a5,s11
    0x8400a03c    0x184    mv a4,s4
    0x8400a03e    0x186    mv a3,s2
    0x8400a040    0x188    mv a2,s5
    0x8400a042    0x18a    mv a1,s0
    0x8400a044    0x18c    mv a0,s1
    0x8400a046    0x18e    jal ra,ffffffff84009da4 <invokeUntyped_Retype>
    0x8400a04a    0x192    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a04c    0x194    li a5,3
    0x8400a04e    0x196    auipc a4,0x3
    0x8400a052    0x19a    sd a5,-1038(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400a056    0x19e    li a0,3
    0x8400a058    0x1a0    ld ra,168(sp)         ; stack access
    0x8400a05a    0x1a2    ld s0,160(sp)         ; stack access
    0x8400a05c    0x1a4    ld s1,152(sp)         ; stack access
    0x8400a05e    0x1a6    ld s2,144(sp)         ; stack access
    0x8400a060    0x1a8    ld s3,136(sp)         ; stack access
    0x8400a062    0x1aa    ld s4,128(sp)         ; stack access
    0x8400a064    0x1ac    ld s5,120(sp)         ; stack access
    0x8400a066    0x1ae    ld s6,112(sp)         ; stack access
    0x8400a068    0x1b0    ld s7,104(sp)         ; stack access
    0x8400a06a    0x1b2    ld s8,96(sp)          ; stack access
    0x8400a06c    0x1b4    ld s9,88(sp)          ; stack access
    0x8400a06e    0x1b6    ld s10,80(sp)         ; stack access
    0x8400a070    0x1b8    ld s11,72(sp)         ; stack access
    0x8400a072    0x1ba    addi sp,sp,176
    0x8400a074    0x1bc    ret
    0x8400a076    0x1be    li a5,7
    0x8400a078    0x1c0    auipc a4,0x3
    0x8400a07c    0x1c4    sd a5,-1080(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400a080    0x1c8    li a0,3
    0x8400a082    0x1ca    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a084    0x1cc    auipc a5,0x2
    0x8400a088    0x1d0    addi a5,a5,1916 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a08c    0x1d4    li a4,1
    0x8400a08e    0x1d6    sd a4,1088(a5)
    0x8400a092    0x1da    sd zero,1040(a5)
    0x8400a096    0x1de    li a0,3
    0x8400a098    0x1e0    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a09a    0x1e2    auipc a5,0x2
    0x8400a09e    0x1e6    addi a5,a5,1894 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a0a2    0x1ea    li a4,4
    0x8400a0a4    0x1ec    sd a4,1088(a5)
    0x8400a0a8    0x1f0    sd zero,1056(a5)
    0x8400a0ac    0x1f4    li a4,38
    0x8400a0b0    0x1f8    sd a4,1064(a5)
    0x8400a0b4    0x1fc    li a0,3
    0x8400a0b6    0x1fe    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a0b8    0x200    bnez s4,ffffffff84009f36 <decodeUntypedInvocation+0x7e>
    0x8400a0bc    0x204    auipc a5,0x2
    0x8400a0c0    0x208    addi a5,a5,1860 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a0c4    0x20c    li a4,1
    0x8400a0c6    0x20e    sd a4,1088(a5)
    0x8400a0ca    0x212    sd a4,1040(a5)
    0x8400a0ce    0x216    li a0,3
    0x8400a0d0    0x218    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a0d2    0x21a    auipc a5,0x2
    0x8400a0d6    0x21e    addi a5,a5,1838 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a0da    0x222    li a4,1
    0x8400a0dc    0x224    sd a4,1088(a5)
    0x8400a0e0    0x228    sd a4,1040(a5)
    0x8400a0e4    0x22c    li a0,3
    0x8400a0e6    0x22e    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a0e8    0x230    li a5,5
    0x8400a0ea    0x232    bne s2,a5,ffffffff84009f36 <decodeUntypedInvocation+0x7e>
    0x8400a0ee    0x236    li a5,7
    0x8400a0f0    0x238    bltu a5,s4,ffffffff84009f36 <decodeUntypedInvocation+0x7e>
    0x8400a0f4    0x23c    auipc a5,0x2
    0x8400a0f8    0x240    addi a5,a5,1804 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a0fc    0x244    li a4,1
    0x8400a0fe    0x246    sd a4,1088(a5)
    0x8400a102    0x24a    sd a4,1040(a5)
    0x8400a106    0x24e    li a0,3
    0x8400a108    0x250    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a10a    0x252    ld a0,0(s11)
    0x8400a10e    0x256    sd a0,32(sp)          ; stack access
    0x8400a110    0x258    ld a1,8(s11)
    0x8400a114    0x25c    sd a1,40(sp)          ; stack access
    0x8400a116    0x25e    mv a3,s5
    0x8400a118    0x260    ld a2,104(s8)
    0x8400a11c    0x264    jal ra,ffffffff840035b8 <lookupTargetSlot>
    0x8400a120    0x268    sd a0,48(sp)          ; stack access
    0x8400a122    0x26a    sd a1,56(sp)          ; stack access
    0x8400a124    0x26c    bnez a0,ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a126    0x26e    ld a5,0(a1)
    0x8400a128    0x270    j ffffffff84009f4c <decodeUntypedInvocation+0x94>
    0x8400a12a    0x272    auipc a4,0x2
    0x8400a12e    0x276    addi a4,a4,1750 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a132    0x27a    li a5,6
    0x8400a134    0x27c    sd a5,1088(a4)
    0x8400a138    0x280    sd zero,1080(a4)
    0x8400a13c    0x284    slli a5,s5,0x2
    0x8400a140    0x288    andi a5,a5,508
    0x8400a144    0x28c    ori a5,a5,1
    0x8400a148    0x290    sd a5,1024(a4)
    0x8400a14c    0x294    sd zero,1032(a4)
    0x8400a150    0x298    li a0,3
    0x8400a152    0x29a    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a154    0x29c    auipc a5,0x2
    0x8400a158    0x2a0    addi a5,a5,1708 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a15c    0x2a4    li a4,4
    0x8400a15e    0x2a6    sd a4,1088(a5)
    0x8400a162    0x2aa    sd zero,1056(a5)
    0x8400a166    0x2ae    sd a3,1064(a5)
    0x8400a16a    0x2b2    li a0,3
    0x8400a16c    0x2b4    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a16e    0x2b6    auipc a5,0x2
    0x8400a172    0x2ba    addi a5,a5,1682 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a176    0x2be    li a4,4
    0x8400a178    0x2c0    sd a4,1088(a5)
    0x8400a17c    0x2c4    li a4,1
    0x8400a17e    0x2c6    sd a4,1056(a5)
    0x8400a182    0x2ca    li a4,256
    0x8400a186    0x2ce    sd a4,1064(a5)
    0x8400a18a    0x2d2    li a0,3
    0x8400a18c    0x2d4    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a18e    0x2d6    auipc a5,0x2
    0x8400a192    0x2da    addi a5,a5,1650 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a196    0x2de    li a3,4
    0x8400a198    0x2e0    sd a3,1088(a5)
    0x8400a19c    0x2e4    li a3,1
    0x8400a19e    0x2e6    sd a3,1056(a5)
    0x8400a1a2    0x2ea    sd a4,1064(a5)
    0x8400a1a6    0x2ee    li a0,3
    0x8400a1a8    0x2f0    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a1aa    0x2f2    auipc a4,0x2
    0x8400a1ae    0x2f6    addi a4,a4,1622 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a1b2    0x2fa    li a3,10
    0x8400a1b4    0x2fc    sd a3,1088(a4)
    0x8400a1b8    0x300    sd a5,1072(a4)
    0x8400a1bc    0x304    li a0,3
    0x8400a1be    0x306    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>
    0x8400a1c0    0x308    auipc a5,0x2
    0x8400a1c4    0x30c    addi a5,a5,1600 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a1c8    0x310    li a4,1
    0x8400a1ca    0x312    sd a4,1088(a5)
    0x8400a1ce    0x316    sd a4,1040(a5)
    0x8400a1d2    0x31a    li a0,3
    0x8400a1d4    0x31c    j ffffffff8400a058 <decodeUntypedInvocation+0x1a0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
267 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 408 nodes.

Section invokeTCB_ThreadControlSched (272 of 292)
=================================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControlSched` consists of 94 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `invokeTCB_ThreadControlSched`:

    0x840085ee     0x0    addi sp,sp,-128
    0x840085f0     0x2    sd ra,120(sp)         ; stack access
    0x840085f2     0x4    sd s0,112(sp)         ; stack access
    0x840085f4     0x6    sd s1,104(sp)         ; stack access
    0x840085f6     0x8    sd s2,96(sp)          ; stack access
    0x840085f8     0xa    sd s3,88(sp)          ; stack access
    0x840085fa     0xc    sd s4,80(sp)          ; stack access
    0x840085fc     0xe    sd s5,72(sp)          ; stack access
    0x840085fe    0x10    sd s6,64(sp)          ; stack access
    0x84008600    0x12    sd s7,56(sp)          ; stack access
    0x84008602    0x14    mv s0,a0
    0x84008604    0x16    sd a2,0(sp)           ; stack access
    0x84008606    0x18    sd a3,8(sp)           ; stack access
    0x84008608    0x1a    mv s6,a5
    0x8400860a    0x1c    mv s4,a6
    0x8400860c    0x1e    mv s2,a7
    0x8400860e    0x20    ld s1,128(sp)         ; stack access
    0x84008610    0x22    andi a3,s1,8
    0x84008614    0x26    bnez a3,ffffffff84008656 <invokeTCB_ThreadControlSched+0x68>
    0x84008616    0x28    andi a5,s1,2
    0x8400861a    0x2c    bnez a5,ffffffff840086b4 <invokeTCB_ThreadControlSched+0xc6>
    0x8400861c    0x2e    andi a5,s1,1
    0x84008620    0x32    bnez a5,ffffffff840086ba <invokeTCB_ThreadControlSched+0xcc>
    0x84008622    0x34    andi a0,s1,4
    0x84008626    0x38    beqz a0,ffffffff84008640 <invokeTCB_ThreadControlSched+0x52>
    0x84008628    0x3a    beqz s2,ffffffff840086c4 <invokeTCB_ThreadControlSched+0xd6>
    0x8400862c    0x3e    ld a5,368(s0)
    0x84008630    0x42    li a0,0
    0x84008632    0x44    beq a5,s2,ffffffff84008640 <invokeTCB_ThreadControlSched+0x52>
    0x84008636    0x48    mv a1,s0
    0x84008638    0x4a    mv a0,s2
    0x8400863a    0x4c    jal ra,ffffffff84005d4e <schedContext_bindTCB>
    0x8400863e    0x50    li a0,0
    0x84008640    0x52    ld ra,120(sp)         ; stack access
    0x84008642    0x54    ld s0,112(sp)         ; stack access
    0x84008644    0x56    ld s1,104(sp)         ; stack access
    0x84008646    0x58    ld s2,96(sp)          ; stack access
    0x84008648    0x5a    ld s3,88(sp)          ; stack access
    0x8400864a    0x5c    ld s4,80(sp)          ; stack access
    0x8400864c    0x5e    ld s5,72(sp)          ; stack access
    0x8400864e    0x60    ld s6,64(sp)          ; stack access
    0x84008650    0x62    ld s7,56(sp)          ; stack access
    0x84008652    0x64    addi sp,sp,128
    0x84008654    0x66    ret
    0x84008656    0x68    mv s5,a1
    0x84008658    0x6a    mv s3,a4
    0x8400865a    0x6c    slli a5,a0,0x19
    0x8400865e    0x70    srli a5,a5,0x19
    0x84008660    0x72    li a4,3
    0x84008662    0x74    slli a4,a4,0x3d
    0x84008664    0x76    or a5,a5,a4
    0x84008666    0x78    sd a5,16(sp)          ; stack access
    0x84008668    0x7a    sd zero,24(sp)        ; stack access
    0x8400866a    0x7c    sd a2,32(sp)          ; stack access
    0x8400866c    0x7e    ld a5,8(sp)           ; stack access
    0x8400866e    0x80    sd a5,40(sp)          ; stack access
    0x84008670    0x82    andi s7,a0,-1024
    0x84008674    0x86    addi s7,s7,96
    0x84008678    0x8a    li a1,1
    0x8400867a    0x8c    mv a0,s7
    0x8400867c    0x8e    jal ra,ffffffff840071e4 <cteDelete>
    0x84008680    0x92    bnez a0,ffffffff84008640 <invokeTCB_ThreadControlSched+0x52>
    0x84008682    0x94    ld a2,0(s3)
    0x84008686    0x98    ld a3,8(s3)
    0x8400868a    0x9c    ld a0,32(sp)          ; stack access
    0x8400868c    0x9e    ld a1,40(sp)          ; stack access
    0x8400868e    0xa0    jal ra,ffffffff84004510 <sameObjectAs>
    0x84008692    0xa4    beqz a0,ffffffff84008616 <invokeTCB_ThreadControlSched+0x28>
    0x84008694    0xa6    ld a2,0(s5)
    0x84008698    0xaa    ld a3,8(s5)
    0x8400869c    0xae    ld a0,16(sp)          ; stack access
    0x8400869e    0xb0    ld a1,24(sp)          ; stack access
    0x840086a0    0xb2    jal ra,ffffffff84004510 <sameObjectAs>
    0x840086a4    0xb6    beqz a0,ffffffff84008616 <invokeTCB_ThreadControlSched+0x28>
    0x840086a6    0xb8    mv a3,s7
    0x840086a8    0xba    mv a2,s3
    0x840086aa    0xbc    ld a0,32(sp)          ; stack access
    0x840086ac    0xbe    ld a1,40(sp)          ; stack access
    0x840086ae    0xc0    jal ra,ffffffff84003aba <cteInsert>
    0x840086b2    0xc4    j ffffffff84008616 <invokeTCB_ThreadControlSched+0x28>
    0x840086b4    0xc6    sd s6,352(s0)
    0x840086b8    0xca    j ffffffff8400861c <invokeTCB_ThreadControlSched+0x2e>
    0x840086ba    0xcc    mv a1,s4
    0x840086bc    0xce    mv a0,s0
    0x840086be    0xd0    jal ra,ffffffff84005676 <setPriority>
    0x840086c2    0xd4    j ffffffff84008622 <invokeTCB_ThreadControlSched+0x34>
    0x840086c4    0xd6    ld a5,368(s0)
    0x840086c8    0xda    li a0,0
    0x840086ca    0xdc    beqz a5,ffffffff84008640 <invokeTCB_ThreadControlSched+0x52>
    0x840086cc    0xde    mv a1,s0
    0x840086ce    0xe0    mv a0,a5
    0x840086d0    0xe2    jal ra,ffffffff840057b8 <schedContext_unbindTCB>
    0x840086d4    0xe6    li a0,0
    0x840086d6    0xe8    j ffffffff84008640 <invokeTCB_ThreadControlSched+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
94 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControlSched` has 161 nodes.

Section decodeIRQControlInvocation (273 of 292)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 70 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeIRQControlInvocation`:

    0x84004b94     0x0    addi sp,sp,-80
    0x84004b96     0x2    sd ra,72(sp)          ; stack access
    0x84004b98     0x4    sd s0,64(sp)          ; stack access
    0x84004b9a     0x6    sd s1,56(sp)          ; stack access
    0x84004b9c     0x8    sd s2,48(sp)          ; stack access
    0x84004b9e     0xa    sd s3,40(sp)          ; stack access
    0x84004ba0     0xc    mv s0,a2
    0x84004ba2     0xe    li a5,25
    0x84004ba4    0x10    bne a0,a5,ffffffff84004c4a <decodeIRQControlInvocation+0xb6>
    0x84004ba8    0x14    li a5,2
    0x84004baa    0x16    bgeu a5,a1,ffffffff84004bfc <decodeIRQControlInvocation+0x68>
    0x84004bae    0x1a    auipc a5,0x8
    0x84004bb2    0x1e    ld a5,1250(a5) # ffffffff8400d090 <current_extra_caps>
    0x84004bb6    0x22    beqz a5,ffffffff84004bfc <decodeIRQControlInvocation+0x68>
    0x84004bb8    0x24    auipc a4,0x1a
    0x84004bbc    0x28    ld a4,1184(a4) # ffffffff8401f058 <ksCurThread>
    0x84004bc0    0x2c    ld s1,88(a4)
    0x84004bc2    0x2e    ld s2,96(a4)
    0x84004bc6    0x32    ld s3,104(a4)
    0x84004bca    0x36    ld a4,0(a5)
    0x84004bcc    0x38    sd a4,0(sp)           ; stack access
    0x84004bce    0x3a    ld a5,8(a5)
    0x84004bd0    0x3c    sd a5,8(sp)           ; stack access
    0x84004bd2    0x3e    mv a0,s1
    0x84004bd4    0x40    jal ra,ffffffff84002e3e <Arch_checkIRQ>
    0x84004bd8    0x44    bnez a0,ffffffff84004c08 <decodeIRQControlInvocation+0x74>
    0x84004bda    0x46    slli a4,s1,0x3
    0x84004bde    0x4a    auipc a5,0x8
    0x84004be2    0x4e    addi a5,a5,-990 # ffffffff8400c800 <riscvKSASIDTable>
    0x84004be6    0x52    add a5,a5,a4
    0x84004be8    0x54    ld a5,1112(a5)
    0x84004bec    0x58    beqz a5,ffffffff84004c16 <decodeIRQControlInvocation+0x82>
    0x84004bee    0x5a    li a5,9
    0x84004bf0    0x5c    auipc a4,0x8
    0x84004bf4    0x60    sd a5,80(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84004bf8    0x64    li a0,3
    0x84004bfa    0x66    j ffffffff84004c08 <decodeIRQControlInvocation+0x74>
    0x84004bfc    0x68    li a5,7
    0x84004bfe    0x6a    auipc a4,0x8
    0x84004c02    0x6e    sd a5,66(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84004c06    0x72    li a0,3
    0x84004c08    0x74    ld ra,72(sp)          ; stack access
    0x84004c0a    0x76    ld s0,64(sp)          ; stack access
    0x84004c0c    0x78    ld s1,56(sp)          ; stack access
    0x84004c0e    0x7a    ld s2,48(sp)          ; stack access
    0x84004c10    0x7c    ld s3,40(sp)          ; stack access
    0x84004c12    0x7e    addi sp,sp,80
    0x84004c14    0x80    ret
    0x84004c16    0x82    mv a3,s3
    0x84004c18    0x84    mv a2,s2
    0x84004c1a    0x86    ld a0,0(sp)           ; stack access
    0x84004c1c    0x88    ld a1,8(sp)           ; stack access
    0x84004c1e    0x8a    jal ra,ffffffff840035b8 <lookupTargetSlot>
    0x84004c22    0x8e    sd a1,24(sp)          ; stack access
    0x84004c24    0x90    bnez a0,ffffffff84004c08 <decodeIRQControlInvocation+0x74>
    0x84004c26    0x92    mv s2,a1
    0x84004c28    0x94    mv a0,a1
    0x84004c2a    0x96    jal ra,ffffffff84003dae <ensureEmptySlot>
    0x84004c2e    0x9a    bnez a0,ffffffff84004c08 <decodeIRQControlInvocation+0x74>
    0x84004c30    0x9c    li a1,2
    0x84004c32    0x9e    auipc a0,0x1a
    0x84004c36    0xa2    ld a0,1062(a0) # ffffffff8401f058 <ksCurThread>
    0x84004c3a    0xa6    jal ra,ffffffff84004a52 <setThreadState>
    0x84004c3e    0xaa    mv a2,s0
    0x84004c40    0xac    mv a1,s2
    0x84004c42    0xae    mv a0,s1
    0x84004c44    0xb0    jal ra,ffffffff84003ec8 <invokeIRQControl>
    0x84004c48    0xb4    j ffffffff84004c08 <decodeIRQControlInvocation+0x74>
    0x84004c4a    0xb6    jal ra,ffffffff84004a6e <Arch_decodeIRQControlInvocation>
    0x84004c4e    0xba    j ffffffff84004c08 <decodeIRQControlInvocation+0x74>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
70 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 117 nodes.

Section handleVMFaultEvent (274 of 292)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 75 instructions.

Skipping c0102573 rdtime a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x8400aca4     0x0    addi sp,sp,-16
    0x8400aca6     0x2    sd ra,8(sp)           ; stack access
    0x8400aca8     0x4    mv a1,a0
    0x8400acaa     0x6    auipc a4,0x14
    0x8400acae     0xa    addi a4,a4,902 # ffffffff8401f030 <ksCurTime>
    0x8400acb2     0xe    ld a3,0(a4)
    0x8400acb4    0x10    rdtime a0
    0x8400acb8    0x14    sd a0,0(a4)
    0x8400acba    0x16    auipc a4,0x14
    0x8400acbe    0x1a    addi a4,a4,902 # ffffffff8401f040 <ksConsumed>
    0x8400acc2    0x1e    ld a5,0(a4)
    0x8400acc4    0x20    sub a5,a5,a3
    0x8400acc6    0x22    add a5,a5,a0
    0x8400acc8    0x24    sd a5,0(a4)
    0x8400acca    0x26    auipc a3,0x14
    0x8400acce    0x2a    ld a3,862(a3) # ffffffff8401f028 <ksCurSC>
    0x8400acd2    0x2e    ld a2,72(a3)
    0x8400acd4    0x30    slli a4,a2,0x4
    0x8400acd8    0x34    add a4,a4,a3
    0x8400acda    0x36    ld a4,96(a4)
    0x8400acdc    0x38    bltu a4,a5,ffffffff8400ad2e <handleVMFaultEvent+0x8a>
    0x8400ace0    0x3c    sub a4,a4,a5
    0x8400ace2    0x3e    li a0,19
    0x8400ace4    0x40    bgeu a0,a4,ffffffff8400ad2e <handleVMFaultEvent+0x8a>
    0x8400ace8    0x44    ld a4,0(a3)
    0x8400acea    0x46    bnez a4,ffffffff8400ad18 <handleVMFaultEvent+0x74>
    0x8400acec    0x48    addi a5,a5,20
    0x8400acee    0x4a    auipc a4,0x14
    0x8400acf2    0x4e    ld a4,802(a4) # ffffffff8401f010 <ksDomainTime>
    0x8400acf6    0x52    bltu a4,a5,ffffffff8400ad60 <handleVMFaultEvent+0xbc>
    0x8400acfa    0x56    auipc a0,0x14
    0x8400acfe    0x5a    ld a0,862(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ad02    0x5e    jal ra,ffffffff840029fe <handleVMFault>
    0x8400ad06    0x62    bnez a0,ffffffff8400ad70 <handleVMFaultEvent+0xcc>
    0x8400ad08    0x64    jal ra,ffffffff8400a7ce <schedule>
    0x8400ad0c    0x68    jal ra,ffffffff84004b44 <activateThread>
    0x8400ad10    0x6c    li a0,0
    0x8400ad12    0x6e    ld ra,8(sp)           ; stack access
    0x8400ad14    0x70    addi sp,sp,16
    0x8400ad16    0x72    ret
    0x8400ad18    0x74    ld a4,80(a3)
    0x8400ad1a    0x76    bgeu a4,a2,ffffffff8400ad58 <handleVMFaultEvent+0xb4>
    0x8400ad1e    0x7a    ld a0,64(a3)
    0x8400ad20    0x7c    add a4,a4,a0
    0x8400ad22    0x7e    addi a4,a4,1
    0x8400ad24    0x80    sub a2,a4,a2
    0x8400ad28    0x84    ld a4,64(a3)
    0x8400ad2a    0x86    bne a4,a2,ffffffff8400acec <handleVMFaultEvent+0x48>
    0x8400ad2e    0x8a    li a3,1
    0x8400ad30    0x8c    li a2,0
    0x8400ad32    0x8e    li a1,1
    0x8400ad34    0x90    mv a0,a5
    0x8400ad36    0x92    jal ra,ffffffff84006f86 <chargeBudget>
    0x8400ad3a    0x96    auipc a0,0x14
    0x8400ad3e    0x9a    ld a0,798(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ad42    0x9e    ld a5,280(a0)
    0x8400ad46    0xa2    andi a5,a5,15
    0x8400ad48    0xa4    addi a5,a5,-1
    0x8400ad4a    0xa6    li a4,1
    0x8400ad4c    0xa8    bltu a4,a5,ffffffff8400ad08 <handleVMFaultEvent+0x64>
    0x8400ad50    0xac    li a1,2
    0x8400ad52    0xae    jal ra,ffffffff84004a52 <setThreadState>
    0x8400ad56    0xb2    j ffffffff8400ad08 <handleVMFaultEvent+0x64>
    0x8400ad58    0xb4    addi a4,a4,1
    0x8400ad5a    0xb6    sub a2,a4,a2
    0x8400ad5e    0xba    j ffffffff8400ad28 <handleVMFaultEvent+0x84>
    0x8400ad60    0xbc    li a5,1
    0x8400ad62    0xbe    auipc a4,0x14
    0x8400ad66    0xc2    sd a5,726(a4) # ffffffff8401f038 <ksReprogram>
    0x8400ad6a    0xc6    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x8400ad6e    0xca    j ffffffff8400ad3a <handleVMFaultEvent+0x96>
    0x8400ad70    0xcc    auipc a0,0x14
    0x8400ad74    0xd0    ld a0,744(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ad78    0xd4    jal ra,ffffffff84006ebc <handleFault>
    0x8400ad7c    0xd8    j ffffffff8400ad08 <handleVMFaultEvent+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 119 nodes.

Section handleInvocation (275 of 292)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 113 instructions.


Stack analysis
---------------

29 stack accesses found. Annotated code for `handleInvocation`:

    0x8400a41c      0x0    addi sp,sp,-160
    0x8400a41e      0x2    sd ra,152(sp)         ; stack access
    0x8400a420      0x4    sd s0,144(sp)         ; stack access
    0x8400a422      0x6    sd s1,136(sp)         ; stack access
    0x8400a424      0x8    sd s2,128(sp)         ; stack access
    0x8400a426      0xa    sd s3,120(sp)         ; stack access
    0x8400a428      0xc    sd s4,112(sp)         ; stack access
    0x8400a42a      0xe    sd s5,104(sp)         ; stack access
    0x8400a42c     0x10    sd s6,96(sp)          ; stack access
    0x8400a42e     0x12    sd s7,88(sp)          ; stack access
    0x8400a430     0x14    sd s8,80(sp)          ; stack access
    0x8400a432     0x16    sd s9,72(sp)          ; stack access
    0x8400a434     0x18    mv s6,a0
    0x8400a436     0x1a    mv s5,a1
    0x8400a438     0x1c    mv s7,a2
    0x8400a43a     0x1e    mv s8,a3
    0x8400a43c     0x20    mv s3,a4
    0x8400a43e     0x22    auipc s1,0x15
    0x8400a442     0x26    ld s1,-998(s1) # ffffffff8401f058 <ksCurThread>
    0x8400a446     0x2a    ld s0,80(s1)
    0x8400a448     0x2c    andi a4,s0,127
    0x8400a44c     0x30    li a5,120
    0x8400a450     0x34    bgeu a5,a4,ffffffff8400a45c <handleInvocation+0x40>
    0x8400a454     0x38    andi s0,s0,-128
    0x8400a458     0x3c    ori s0,s0,120
    0x8400a45c     0x40    mv a2,s3
    0x8400a45e     0x42    mv a1,s1
    0x8400a460     0x44    addi a0,sp,32
    0x8400a462     0x46    jal ra,ffffffff84003490 <lookupCapAndSlot>
    0x8400a466     0x4a    ld s9,32(sp)          ; stack access
    0x8400a468     0x4c    bnez s9,ffffffff8400a4dc <handleInvocation+0xc0>
    0x8400a46c     0x50    mv a1,s1
    0x8400a46e     0x52    li a0,0
    0x8400a470     0x54    jal ra,ffffffff84002728 <lookupIPCBuffer>
    0x8400a474     0x58    mv s4,a0
    0x8400a476     0x5a    mv a2,s0
    0x8400a478     0x5c    mv a1,a0
    0x8400a47a     0x5e    mv a0,s1
    0x8400a47c     0x60    jal ra,ffffffff84006956 <lookupExtraCaps>
    0x8400a480     0x64    mv s2,a0
    0x8400a482     0x66    bnez a0,ffffffff8400a4fe <handleInvocation+0xe2>
    0x8400a484     0x68    andi a1,s0,127
    0x8400a488     0x6c    li a5,4
    0x8400a48a     0x6e    bltu a5,a1,ffffffff8400a50e <handleInvocation+0xf2>
    0x8400a48e     0x72    sd s4,16(sp)          ; stack access
    0x8400a490     0x74    sd s8,8(sp)           ; stack access
    0x8400a492     0x76    sd s7,0(sp)           ; stack access
    0x8400a494     0x78    mv a7,s6
    0x8400a496     0x7a    mv a6,s5
    0x8400a498     0x7c    ld a4,40(sp)          ; stack access
    0x8400a49a     0x7e    ld a5,48(sp)          ; stack access
    0x8400a49c     0x80    ld a3,56(sp)          ; stack access
    0x8400a49e     0x82    mv a2,s3
    0x8400a4a0     0x84    srli a0,s0,0xc
    0x8400a4a4     0x88    jal ra,ffffffff8400a1d6 <decodeInvocation>
    0x8400a4a8     0x8c    li a5,4
    0x8400a4aa     0x8e    beq a0,a5,ffffffff8400a53e <handleInvocation+0x122>
    0x8400a4ae     0x92    li a5,3
    0x8400a4b0     0x94    beq a0,a5,ffffffff8400a516 <handleInvocation+0xfa>
    0x8400a4b4     0x98    ld a5,280(s1)
    0x8400a4b8     0x9c    andi a5,a5,15
    0x8400a4ba     0x9e    li a4,2
    0x8400a4bc     0xa0    beq a5,a4,ffffffff8400a526 <handleInvocation+0x10a>
    0x8400a4c0     0xa4    mv a0,s2
    0x8400a4c2     0xa6    ld ra,152(sp)         ; stack access
    0x8400a4c4     0xa8    ld s0,144(sp)         ; stack access
    0x8400a4c6     0xaa    ld s1,136(sp)         ; stack access
    0x8400a4c8     0xac    ld s2,128(sp)         ; stack access
    0x8400a4ca     0xae    ld s3,120(sp)         ; stack access
    0x8400a4cc     0xb0    ld s4,112(sp)         ; stack access
    0x8400a4ce     0xb2    ld s5,104(sp)         ; stack access
    0x8400a4d0     0xb4    ld s6,96(sp)          ; stack access
    0x8400a4d2     0xb6    ld s7,88(sp)          ; stack access
    0x8400a4d4     0xb8    ld s8,80(sp)          ; stack access
    0x8400a4d6     0xba    ld s9,72(sp)          ; stack access
    0x8400a4d8     0xbc    addi sp,sp,160
    0x8400a4da     0xbe    ret
    0x8400a4dc     0xc0    auipc a5,0x2
    0x8400a4e0     0xc4    addi a5,a5,804 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a4e4     0xc8    li a4,1
    0x8400a4e6     0xca    sd a4,1096(a5)
    0x8400a4ea     0xce    sd s3,1104(a5)
    0x8400a4ee     0xd2    mv s2,s5
    0x8400a4f0     0xd4    beqz s5,ffffffff8400a4c0 <handleInvocation+0xa4>
    0x8400a4f4     0xd8    mv a0,s1
    0x8400a4f6     0xda    jal ra,ffffffff84006ebc <handleFault>
    0x8400a4fa     0xde    li s2,0
    0x8400a4fc     0xe0    j ffffffff8400a4c0 <handleInvocation+0xa4>
    0x8400a4fe     0xe2    mv s2,s5
    0x8400a500     0xe4    beqz s5,ffffffff8400a4c0 <handleInvocation+0xa4>
    0x8400a504     0xe8    mv a0,s1
    0x8400a506     0xea    jal ra,ffffffff84006ebc <handleFault>
    0x8400a50a     0xee    mv s2,s9
    0x8400a50c     0xf0    j ffffffff8400a4c0 <handleInvocation+0xa4>
    0x8400a50e     0xf2    bnez s4,ffffffff8400a48e <handleInvocation+0x72>
    0x8400a512     0xf6    li a1,4
    0x8400a514     0xf8    j ffffffff8400a48e <handleInvocation+0x72>
    0x8400a516     0xfa    bnez s6,ffffffff8400a51e <handleInvocation+0x102>
    0x8400a51a     0xfe    mv s2,s6
    0x8400a51c    0x100    j ffffffff8400a4c0 <handleInvocation+0xa4>
    0x8400a51e    0x102    mv a0,s1
    0x8400a520    0x104    jal ra,ffffffff840091fc <replyFromKernel_error>
    0x8400a524    0x108    j ffffffff8400a4c0 <handleInvocation+0xa4>
    0x8400a526    0x10a    bnez s6,ffffffff8400a534 <handleInvocation+0x118>
    0x8400a52a    0x10e    li a1,1
    0x8400a52c    0x110    mv a0,s1
    0x8400a52e    0x112    jal ra,ffffffff84004a52 <setThreadState>
    0x8400a532    0x116    j ffffffff8400a4c0 <handleInvocation+0xa4>
    0x8400a534    0x118    sd zero,72(s1)
    0x8400a538    0x11c    sd zero,80(s1)
    0x8400a53c    0x120    j ffffffff8400a52a <handleInvocation+0x10e>
    0x8400a53e    0x122    mv s2,a0
    0x8400a540    0x124    j ffffffff8400a4c0 <handleInvocation+0xa4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
113 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 182 nodes.

Section decodeSetSpace (276 of 292)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 171 instructions.

RVC_FFFFFFFT______FF.

Stack analysis
---------------

67 stack accesses found. Annotated code for `decodeSetSpace`:

    0x84008436      0x0    addi sp,sp,-304
    0x84008438      0x2    sd ra,296(sp)         ; stack access
    0x8400843a      0x4    sd s0,288(sp)         ; stack access
    0x8400843c      0x6    sd s1,280(sp)         ; stack access
    0x8400843e      0x8    sd s2,272(sp)         ; stack access
    0x84008440      0xa    sd s3,264(sp)         ; stack access
    0x84008442      0xc    sd s4,256(sp)         ; stack access
    0x84008444      0xe    sd s5,248(sp)         ; stack access
    0x84008446     0x10    sd s6,240(sp)         ; stack access
    0x84008448     0x12    sd s7,232(sp)         ; stack access
    0x8400844a     0x14    sd s8,224(sp)         ; stack access
    0x8400844c     0x16    sd s9,216(sp)         ; stack access
    0x8400844e     0x18    sd a0,96(sp)          ; stack access
    0x84008450     0x1a    sd a1,104(sp)         ; stack access
    0x84008452     0x1c    li a5,1
    0x84008454     0x1e    bgeu a5,a2,ffffffff84008590 <decodeSetSpace+0x15a>
    0x84008458     0x22    mv s2,a3
    0x8400845a     0x24    auipc s3,0x5
    0x8400845e     0x28    ld s3,-970(s3) # ffffffff8400d090 <current_extra_caps>
    0x84008462     0x2c    beqz s3,ffffffff84008590 <decodeSetSpace+0x15a>
    0x84008466     0x30    auipc s1,0x5
    0x8400846a     0x34    ld s1,-974(s1) # ffffffff8400d098 <current_extra_caps+0x8>
    0x8400846e     0x38    beqz s1,ffffffff84008590 <decodeSetSpace+0x15a>
    0x84008472     0x3c    auipc s4,0x5
    0x84008476     0x40    ld s4,-978(s4) # ffffffff8400d0a0 <current_extra_caps+0x10>
    0x8400847a     0x44    beqz s4,ffffffff84008590 <decodeSetSpace+0x15a>
    0x8400847e     0x48    auipc a5,0x17
    0x84008482     0x4c    ld a5,-1062(a5) # ffffffff8401f058 <ksCurThread>
    0x84008486     0x50    ld s8,88(a5)
    0x8400848a     0x54    ld s7,96(a5)
    0x8400848e     0x58    ld a5,0(s3)
    0x84008492     0x5c    sd a5,120(sp)         ; stack access
    0x84008494     0x5e    ld a5,8(s3)
    0x84008498     0x62    sd a5,128(sp)         ; stack access
    0x8400849a     0x64    ld s5,0(s1)
    0x8400849e     0x68    sd s5,176(sp)         ; stack access
    0x840084a0     0x6a    ld a5,8(s1)
    0x840084a2     0x6c    sd a5,184(sp)         ; stack access
    0x840084a4     0x6e    mv s6,s5
    0x840084a6     0x70    ld a5,0(s4)
    0x840084aa     0x74    sd a5,160(sp)         ; stack access
    0x840084ac     0x76    ld a5,8(s4)
    0x840084b0     0x7a    sd a5,168(sp)         ; stack access
    0x840084b2     0x7c    ld a5,96(sp)          ; stack access
    0x840084b4     0x7e    slli s0,a5,0x19
    0x840084b8     0x82    srli s0,s0,0x19
    0x840084ba     0x84    srli a5,a5,0x26
    0x840084bc     0x86    andi a5,a5,1
    0x840084be     0x88    beqz a5,ffffffff840084c6 <decodeSetSpace+0x90>
    0x840084c0     0x8a    li a5,-1
    0x840084c2     0x8c    slli a5,a5,0x27
    0x840084c4     0x8e    or s0,s0,a5
    0x840084c6     0x90    andi s9,s0,-1024
    0x840084ca     0x94    mv a0,s9
    0x840084cc     0x96    jal ra,ffffffff840045be <slotCapLongRunningDelete>
    0x840084d0     0x9a    bnez a0,ffffffff840085b6 <decodeSetSpace+0x180>
    0x840084d4     0x9e    addi a0,s9,32
    0x840084d8     0xa2    jal ra,ffffffff840045be <slotCapLongRunningDelete>
    0x840084dc     0xa6    bnez a0,ffffffff840085b6 <decodeSetSpace+0x180>
    0x840084de     0xa8    beqz s8,ffffffff840084f2 <decodeSetSpace+0xbc>
    0x840084e2     0xac    mv a2,s5
    0x840084e4     0xae    ld a3,184(sp)         ; stack access
    0x840084e6     0xb0    mv a1,s8
    0x840084e8     0xb2    li a0,0
    0x840084ea     0xb4    jal ra,ffffffff840045f8 <updateCapData>
    0x840084ee     0xb8    sd a1,184(sp)         ; stack access
    0x840084f0     0xba    mv s6,a0
    0x840084f2     0xbc    mv a2,s6
    0x840084f4     0xbe    ld a3,184(sp)         ; stack access
    0x840084f6     0xc0    mv a1,s1
    0x840084f8     0xc2    addi a0,sp,136
    0x840084fa     0xc4    jal ra,ffffffff840044a4 <deriveCap>
    0x840084fe     0xc8    ld a0,136(sp)         ; stack access
    0x84008500     0xca    bnez a0,ffffffff8400859c <decodeSetSpace+0x166>
    0x84008502     0xcc    ld s5,144(sp)         ; stack access
    0x84008504     0xce    ld a5,152(sp)         ; stack access
    0x84008506     0xd0    sd a5,184(sp)         ; stack access
    0x84008508     0xd2    srli a4,s5,0x3b
    0x8400850c     0xd6    li a5,10
    0x8400850e     0xd8    bne a4,a5,ffffffff840085c4 <decodeSetSpace+0x18e>
    0x84008512     0xdc    beqz s7,ffffffff84008526 <decodeSetSpace+0xf0>
    0x84008516     0xe0    ld a2,160(sp)         ; stack access
    0x84008518     0xe2    ld a3,168(sp)         ; stack access
    0x8400851a     0xe4    mv a1,s7
    0x8400851c     0xe6    li a0,0
    0x8400851e     0xe8    jal ra,ffffffff840045f8 <updateCapData>
    0x84008522     0xec    sd a0,160(sp)         ; stack access
    0x84008524     0xee    sd a1,168(sp)         ; stack access
    0x84008526     0xf0    ld a2,160(sp)         ; stack access
    0x84008528     0xf2    ld a3,168(sp)         ; stack access
    0x8400852a     0xf4    mv a1,s4
    0x8400852c     0xf6    addi a0,sp,136
    0x8400852e     0xf8    jal ra,ffffffff840044a4 <deriveCap>
    0x84008532     0xfc    ld a0,136(sp)         ; stack access
    0x84008534     0xfe    bnez a0,ffffffff8400859c <decodeSetSpace+0x166>
    0x84008536    0x100    ld a0,144(sp)         ; stack access
    0x84008538    0x102    sd a0,160(sp)         ; stack access
    0x8400853a    0x104    ld a1,152(sp)         ; stack access
    0x8400853c    0x106    sd a1,168(sp)         ; stack access
    0x8400853e    0x108    jal ra,ffffffff84002d0c <isValidVTableRoot>
    0x84008542    0x10c    beqz a0,ffffffff840085d2 <decodeSetSpace+0x19c>
    0x84008544    0x10e    ld a0,120(sp)         ; stack access
    0x84008546    0x110    ld a1,128(sp)         ; stack access
    0x84008548    0x112    jal ra,ffffffff84002206 <validFaultHandler>
    0x8400854c    0x116    beqz a0,ffffffff840085e0 <decodeSetSpace+0x1aa>
    0x8400854e    0x118    li a1,2
    0x84008550    0x11a    auipc a0,0x17
    0x84008554    0x11e    ld a0,-1272(a0) # ffffffff8401f058 <ksCurThread>
    0x84008558    0x122    jal ra,ffffffff84004a52 <setThreadState>
    0x8400855c    0x126    li a5,6
    0x8400855e    0x128    sd a5,80(sp)          ; stack access
    0x84008560    0x12a    sd zero,72(sp)        ; stack access
    0x84008562    0x12c    sd zero,56(sp)        ; stack access
    0x84008564    0x12e    sd zero,64(sp)        ; stack access
    0x84008566    0x130    sd zero,48(sp)        ; stack access
    0x84008568    0x132    sd s4,40(sp)          ; stack access
    0x8400856a    0x134    ld a5,160(sp)         ; stack access
    0x8400856c    0x136    sd a5,24(sp)          ; stack access
    0x8400856e    0x138    ld a5,168(sp)         ; stack access
    0x84008570    0x13a    sd a5,32(sp)          ; stack access
    0x84008572    0x13c    sd s1,16(sp)          ; stack access
    0x84008574    0x13e    sd s5,0(sp)           ; stack access
    0x84008576    0x140    ld a5,184(sp)         ; stack access
    0x84008578    0x142    sd a5,8(sp)           ; stack access
    0x8400857a    0x144    li a7,0
    0x8400857c    0x146    li a5,0
    0x8400857e    0x148    li a6,0
    0x84008580    0x14a    mv a4,s3
    0x84008582    0x14c    ld a2,120(sp)         ; stack access
    0x84008584    0x14e    ld a3,128(sp)         ; stack access
    0x84008586    0x150    mv a1,s2
    0x84008588    0x152    mv a0,s0
    0x8400858a    0x154    jal ra,ffffffff84007f0c <invokeTCB_ThreadControlCaps>
    0x8400858e    0x158    j ffffffff8400859c <decodeSetSpace+0x166>
    0x84008590    0x15a    li a5,7
    0x84008592    0x15c    auipc a4,0x4
    0x84008596    0x160    sd a5,1710(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400859a    0x164    li a0,3
    0x8400859c    0x166    ld ra,296(sp)         ; stack access
    0x8400859e    0x168    ld s0,288(sp)         ; stack access
    0x840085a0    0x16a    ld s1,280(sp)         ; stack access
    0x840085a2    0x16c    ld s2,272(sp)         ; stack access
    0x840085a4    0x16e    ld s3,264(sp)         ; stack access
    0x840085a6    0x170    ld s4,256(sp)         ; stack access
    0x840085a8    0x172    ld s5,248(sp)         ; stack access
    0x840085aa    0x174    ld s6,240(sp)         ; stack access
    0x840085ac    0x176    ld s7,232(sp)         ; stack access
    0x840085ae    0x178    ld s8,224(sp)         ; stack access
    0x840085b0    0x17a    ld s9,216(sp)         ; stack access
    0x840085b2    0x17c    addi sp,sp,304
    0x840085b4    0x17e    ret
    0x840085b6    0x180    li a5,3
    0x840085b8    0x182    auipc a4,0x4
    0x840085bc    0x186    sd a5,1672(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840085c0    0x18a    li a0,3
    0x840085c2    0x18c    j ffffffff8400859c <decodeSetSpace+0x166>
    0x840085c4    0x18e    li a5,3
    0x840085c6    0x190    auipc a4,0x4
    0x840085ca    0x194    sd a5,1658(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840085ce    0x198    li a0,3
    0x840085d0    0x19a    j ffffffff8400859c <decodeSetSpace+0x166>
    0x840085d2    0x19c    li a5,3
    0x840085d4    0x19e    auipc a4,0x4
    0x840085d8    0x1a2    sd a5,1644(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840085dc    0x1a6    li a0,3
    0x840085de    0x1a8    j ffffffff8400859c <decodeSetSpace+0x166>
    0x840085e0    0x1aa    li a5,1
    0x840085e2    0x1ac    auipc a4,0x4
    0x840085e6    0x1b0    sd a5,1590(a4) # ffffffff8400cc18 <current_syscall_error+0x8>
    0x840085ea    0x1b4    li a0,3
    0x840085ec    0x1b6    j ffffffff8400859c <decodeSetSpace+0x166>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
171 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 295 nodes.

Section decodeTCBConfigure (277 of 292)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 184 instructions.


Stack analysis
---------------

73 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x8400810e      0x0    addi sp,sp,-304
    0x84008110      0x2    sd ra,296(sp)         ; stack access
    0x84008112      0x4    sd s0,288(sp)         ; stack access
    0x84008114      0x6    sd s1,280(sp)         ; stack access
    0x84008116      0x8    sd s2,272(sp)         ; stack access
    0x84008118      0xa    sd s3,264(sp)         ; stack access
    0x8400811a      0xc    sd s4,256(sp)         ; stack access
    0x8400811c      0xe    sd s5,248(sp)         ; stack access
    0x8400811e     0x10    sd s6,240(sp)         ; stack access
    0x84008120     0x12    sd s7,232(sp)         ; stack access
    0x84008122     0x14    sd s8,224(sp)         ; stack access
    0x84008124     0x16    sd s9,216(sp)         ; stack access
    0x84008126     0x18    sd s10,208(sp)        ; stack access
    0x84008128     0x1a    sd a0,96(sp)          ; stack access
    0x8400812a     0x1c    sd a1,104(sp)         ; stack access
    0x8400812c     0x1e    li a5,2
    0x8400812e     0x20    bgeu a5,a2,ffffffff84008274 <decodeTCBConfigure+0x166>
    0x84008132     0x24    mv s0,a3
    0x84008134     0x26    auipc s1,0x5
    0x84008138     0x2a    ld s1,-164(s1) # ffffffff8400d090 <current_extra_caps>
    0x8400813c     0x2e    beqz s1,ffffffff84008274 <decodeTCBConfigure+0x166>
    0x84008140     0x32    auipc s3,0x5
    0x84008144     0x36    ld s3,-168(s3) # ffffffff8400d098 <current_extra_caps+0x8>
    0x84008148     0x3a    beqz s3,ffffffff84008274 <decodeTCBConfigure+0x166>
    0x8400814c     0x3e    auipc s2,0x5
    0x84008150     0x42    ld s2,-172(s2) # ffffffff8400d0a0 <current_extra_caps+0x10>
    0x84008154     0x46    beqz s2,ffffffff84008274 <decodeTCBConfigure+0x166>
    0x84008158     0x4a    auipc a5,0x17
    0x8400815c     0x4e    ld a5,-256(a5) # ffffffff8401f058 <ksCurThread>
    0x84008160     0x52    ld s7,88(a5)
    0x84008164     0x56    ld s8,96(a5)
    0x84008168     0x5a    ld s5,104(a5)
    0x8400816c     0x5e    ld s4,0(s1)
    0x84008170     0x62    sd s4,160(sp)         ; stack access
    0x84008172     0x64    ld a5,8(s1)
    0x84008174     0x66    sd a5,168(sp)         ; stack access
    0x84008176     0x68    mv s6,s4
    0x84008178     0x6a    ld a5,0(s3)
    0x8400817c     0x6e    sd a5,144(sp)         ; stack access
    0x8400817e     0x70    ld a5,8(s3)
    0x84008182     0x74    sd a5,152(sp)         ; stack access
    0x84008184     0x76    ld a5,0(s2)
    0x84008188     0x7a    sd a5,176(sp)         ; stack access
    0x8400818a     0x7c    ld a5,8(s2)
    0x8400818e     0x80    sd a5,184(sp)         ; stack access
    0x84008190     0x82    bnez s5,ffffffff8400829c <decodeTCBConfigure+0x18e>
    0x84008194     0x86    li s2,0
    0x84008196     0x88    ld a5,96(sp)          ; stack access
    0x84008198     0x8a    slli s9,a5,0x19
    0x8400819c     0x8e    srli s9,s9,0x19
    0x840081a0     0x92    srli a5,a5,0x26
    0x840081a2     0x94    andi a5,a5,1
    0x840081a4     0x96    beqz a5,ffffffff840081ae <decodeTCBConfigure+0xa0>
    0x840081a6     0x98    li a5,-1
    0x840081a8     0x9a    slli a5,a5,0x27
    0x840081aa     0x9c    or s9,s9,a5
    0x840081ae     0xa0    andi s10,s9,-1024
    0x840081b2     0xa4    mv a0,s10
    0x840081b4     0xa6    jal ra,ffffffff840045be <slotCapLongRunningDelete>
    0x840081b8     0xaa    bnez a0,ffffffff840082c0 <decodeTCBConfigure+0x1b2>
    0x840081bc     0xae    addi a0,s10,32 # 2020 <KERNEL_OFFSET-0xfffffffeffffdfe0>
    0x840081c0     0xb2    jal ra,ffffffff840045be <slotCapLongRunningDelete>
    0x840081c4     0xb6    bnez a0,ffffffff840082c0 <decodeTCBConfigure+0x1b2>
    0x840081c8     0xba    beqz s7,ffffffff840081dc <decodeTCBConfigure+0xce>
    0x840081cc     0xbe    mv a2,s4
    0x840081ce     0xc0    ld a3,168(sp)         ; stack access
    0x840081d0     0xc2    mv a1,s7
    0x840081d2     0xc4    li a0,0
    0x840081d4     0xc6    jal ra,ffffffff840045f8 <updateCapData>
    0x840081d8     0xca    sd a1,168(sp)         ; stack access
    0x840081da     0xcc    mv s6,a0
    0x840081dc     0xce    mv a2,s6
    0x840081de     0xd0    ld a3,168(sp)         ; stack access
    0x840081e0     0xd2    mv a1,s1
    0x840081e2     0xd4    addi a0,sp,120
    0x840081e4     0xd6    jal ra,ffffffff840044a4 <deriveCap>
    0x840081e8     0xda    ld a0,120(sp)         ; stack access
    0x840081ea     0xdc    bnez a0,ffffffff84008280 <decodeTCBConfigure+0x172>
    0x840081ec     0xde    ld s4,128(sp)         ; stack access
    0x840081ee     0xe0    ld a5,136(sp)         ; stack access
    0x840081f0     0xe2    sd a5,168(sp)         ; stack access
    0x840081f2     0xe4    srli a4,s4,0x3b
    0x840081f6     0xe8    li a5,10
    0x840081f8     0xea    bne a4,a5,ffffffff840082ce <decodeTCBConfigure+0x1c0>
    0x840081fc     0xee    beqz s8,ffffffff84008210 <decodeTCBConfigure+0x102>
    0x84008200     0xf2    ld a2,144(sp)         ; stack access
    0x84008202     0xf4    ld a3,152(sp)         ; stack access
    0x84008204     0xf6    mv a1,s8
    0x84008206     0xf8    li a0,0
    0x84008208     0xfa    jal ra,ffffffff840045f8 <updateCapData>
    0x8400820c     0xfe    sd a0,144(sp)         ; stack access
    0x8400820e    0x100    sd a1,152(sp)         ; stack access
    0x84008210    0x102    ld a2,144(sp)         ; stack access
    0x84008212    0x104    ld a3,152(sp)         ; stack access
    0x84008214    0x106    mv a1,s3
    0x84008216    0x108    addi a0,sp,120
    0x84008218    0x10a    jal ra,ffffffff840044a4 <deriveCap>
    0x8400821c    0x10e    ld a0,120(sp)         ; stack access
    0x8400821e    0x110    bnez a0,ffffffff84008280 <decodeTCBConfigure+0x172>
    0x84008220    0x112    ld a0,128(sp)         ; stack access
    0x84008222    0x114    sd a0,144(sp)         ; stack access
    0x84008224    0x116    ld a1,136(sp)         ; stack access
    0x84008226    0x118    sd a1,152(sp)         ; stack access
    0x84008228    0x11a    jal ra,ffffffff84002d0c <isValidVTableRoot>
    0x8400822c    0x11e    beqz a0,ffffffff840082dc <decodeTCBConfigure+0x1ce>
    0x8400822e    0x120    li a1,2
    0x84008230    0x122    auipc a0,0x17
    0x84008234    0x126    ld a0,-472(a0) # ffffffff8401f058 <ksCurThread>
    0x84008238    0x12a    jal ra,ffffffff84004a52 <setThreadState>
    0x8400823c    0x12e    li a5,3
    0x8400823e    0x130    sd a5,80(sp)          ; stack access
    0x84008240    0x132    sd s2,72(sp)          ; stack access
    0x84008242    0x134    ld a5,176(sp)         ; stack access
    0x84008244    0x136    sd a5,56(sp)          ; stack access
    0x84008246    0x138    ld a5,184(sp)         ; stack access
    0x84008248    0x13a    sd a5,64(sp)          ; stack access
    0x8400824a    0x13c    sd s5,48(sp)          ; stack access
    0x8400824c    0x13e    sd s3,40(sp)          ; stack access
    0x8400824e    0x140    ld a5,144(sp)         ; stack access
    0x84008250    0x142    sd a5,24(sp)          ; stack access
    0x84008252    0x144    ld a5,152(sp)         ; stack access
    0x84008254    0x146    sd a5,32(sp)          ; stack access
    0x84008256    0x148    sd s1,16(sp)          ; stack access
    0x84008258    0x14a    sd s4,0(sp)           ; stack access
    0x8400825a    0x14c    ld a5,168(sp)         ; stack access
    0x8400825c    0x14e    sd a5,8(sp)           ; stack access
    0x8400825e    0x150    li a7,0
    0x84008260    0x152    li a5,0
    0x84008262    0x154    li a6,0
    0x84008264    0x156    li a4,0
    0x84008266    0x158    li a2,0
    0x84008268    0x15a    li a3,0
    0x8400826a    0x15c    mv a1,s0
    0x8400826c    0x15e    mv a0,s9
    0x8400826e    0x160    jal ra,ffffffff84007f0c <invokeTCB_ThreadControlCaps>
    0x84008272    0x164    j ffffffff84008280 <decodeTCBConfigure+0x172>
    0x84008274    0x166    li a5,7
    0x84008276    0x168    auipc a4,0x5
    0x8400827a    0x16c    sd a5,-1590(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400827e    0x170    li a0,3
    0x84008280    0x172    ld ra,296(sp)         ; stack access
    0x84008282    0x174    ld s0,288(sp)         ; stack access
    0x84008284    0x176    ld s1,280(sp)         ; stack access
    0x84008286    0x178    ld s2,272(sp)         ; stack access
    0x84008288    0x17a    ld s3,264(sp)         ; stack access
    0x8400828a    0x17c    ld s4,256(sp)         ; stack access
    0x8400828c    0x17e    ld s5,248(sp)         ; stack access
    0x8400828e    0x180    ld s6,240(sp)         ; stack access
    0x84008290    0x182    ld s7,232(sp)         ; stack access
    0x84008292    0x184    ld s8,224(sp)         ; stack access
    0x84008294    0x186    ld s9,216(sp)         ; stack access
    0x84008296    0x188    ld s10,208(sp)        ; stack access
    0x84008298    0x18a    addi sp,sp,304
    0x8400829a    0x18c    ret
    0x8400829c    0x18e    ld a2,176(sp)         ; stack access
    0x8400829e    0x190    mv a3,a5
    0x840082a0    0x192    mv a1,s2
    0x840082a2    0x194    addi a0,sp,120
    0x840082a4    0x196    jal ra,ffffffff840044a4 <deriveCap>
    0x840082a8    0x19a    ld a0,120(sp)         ; stack access
    0x840082aa    0x19c    bnez a0,ffffffff84008280 <decodeTCBConfigure+0x172>
    0x840082ac    0x19e    ld a1,128(sp)         ; stack access
    0x840082ae    0x1a0    sd a1,176(sp)         ; stack access
    0x840082b0    0x1a2    ld a2,136(sp)         ; stack access
    0x840082b2    0x1a4    sd a2,184(sp)         ; stack access
    0x840082b4    0x1a6    mv a0,s5
    0x840082b6    0x1a8    jal ra,ffffffff84002d22 <checkValidIPCBuffer>
    0x840082ba    0x1ac    beqz a0,ffffffff84008196 <decodeTCBConfigure+0x88>
    0x840082be    0x1b0    j ffffffff84008280 <decodeTCBConfigure+0x172>
    0x840082c0    0x1b2    li a5,3
    0x840082c2    0x1b4    auipc a4,0x5
    0x840082c6    0x1b8    sd a5,-1666(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840082ca    0x1bc    li a0,3
    0x840082cc    0x1be    j ffffffff84008280 <decodeTCBConfigure+0x172>
    0x840082ce    0x1c0    li a5,3
    0x840082d0    0x1c2    auipc a4,0x5
    0x840082d4    0x1c6    sd a5,-1680(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840082d8    0x1ca    li a0,3
    0x840082da    0x1cc    j ffffffff84008280 <decodeTCBConfigure+0x172>
    0x840082dc    0x1ce    li a5,3
    0x840082de    0x1d0    auipc a4,0x5
    0x840082e2    0x1d4    sd a5,-1694(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840082e6    0x1d8    li a0,3
    0x840082e8    0x1da    j ffffffff84008280 <decodeTCBConfigure+0x172>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
184 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 319 nodes.

Section doReplyTransfer (278 of 292)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 89 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `doReplyTransfer`:

    0x840078d4     0x0    addi sp,sp,-48
    0x840078d6     0x2    sd ra,40(sp)          ; stack access
    0x840078d8     0x4    sd s0,32(sp)          ; stack access
    0x840078da     0x6    sd s1,24(sp)          ; stack access
    0x840078dc     0x8    sd s2,16(sp)          ; stack access
    0x840078de     0xa    sd s3,8(sp)           ; stack access
    0x840078e0     0xc    ld s0,0(a1)
    0x840078e2     0xe    beqz s0,ffffffff840078f4 <doReplyTransfer+0x20>
    0x840078e4    0x10    mv s1,a0
    0x840078e6    0x12    mv s2,a2
    0x840078e8    0x14    ld a5,280(s0)
    0x840078ec    0x18    andi a5,a5,15
    0x840078ee    0x1a    li a4,5
    0x840078f0    0x1c    beq a5,a4,ffffffff84007902 <doReplyTransfer+0x2e>
    0x840078f4    0x20    ld ra,40(sp)          ; stack access
    0x840078f6    0x22    ld s0,32(sp)          ; stack access
    0x840078f8    0x24    ld s1,24(sp)          ; stack access
    0x840078fa    0x26    ld s2,16(sp)          ; stack access
    0x840078fc    0x28    ld s3,8(sp)           ; stack access
    0x840078fe    0x2a    addi sp,sp,48
    0x84007900    0x2c    ret
    0x84007902    0x2e    mv a0,a1
    0x84007904    0x30    jal ra,ffffffff840051d4 <reply_remove>
    0x84007908    0x34    ld s3,312(s0)
    0x8400790c    0x38    andi s3,s3,15
    0x84007910    0x3c    bnez s3,ffffffff8400797a <doReplyTransfer+0xa6>
    0x84007914    0x40    mv a4,s0
    0x84007916    0x42    mv a3,s2
    0x84007918    0x44    li a2,0
    0x8400791a    0x46    li a1,0
    0x8400791c    0x48    mv a0,s1
    0x8400791e    0x4a    jal ra,ffffffff84006bda <doIPCTransfer>
    0x84007922    0x4e    li a1,1
    0x84007924    0x50    mv a0,s0
    0x84007926    0x52    jal ra,ffffffff84004a52 <setThreadState>
    0x8400792a    0x56    ld a0,368(s0)
    0x8400792e    0x5a    beqz a0,ffffffff840078f4 <doReplyTransfer+0x20>
    0x84007930    0x5c    ld a5,280(s0)
    0x84007934    0x60    andi a5,a5,15
    0x84007936    0x62    addi a5,a5,-1
    0x84007938    0x64    li a4,1
    0x8400793a    0x66    bltu a4,a5,ffffffff840078f4 <doReplyTransfer+0x20>
    0x8400793e    0x6a    ld a5,72(a0)
    0x84007940    0x6c    slli a5,a5,0x4
    0x84007942    0x6e    addi a4,a0,88
    0x84007946    0x72    add a5,a5,a4
    0x84007948    0x74    auipc a4,0x17
    0x8400794c    0x78    ld a4,1768(a4) # ffffffff8401f030 <ksCurTime>
    0x84007950    0x7c    addi a4,a4,10
    0x84007952    0x7e    ld a3,0(a5)
    0x84007954    0x80    bltu a4,a3,ffffffff84007960 <doReplyTransfer+0x8c>
    0x84007958    0x84    ld a4,8(a5)
    0x8400795a    0x86    li a5,19
    0x8400795c    0x88    bltu a5,a4,ffffffff840079a0 <doReplyTransfer+0xcc>
    0x84007960    0x8c    andi a5,s0,-1024
    0x84007964    0x90    ld a5,128(a5)
    0x84007966    0x92    srli a5,a5,0x3b
    0x84007968    0x94    li a4,4
    0x8400796a    0x96    bne a5,a4,ffffffff84007974 <doReplyTransfer+0xa0>
    0x8400796e    0x9a    li a5,5
    0x84007970    0x9c    bne s3,a5,ffffffff840079a8 <doReplyTransfer+0xd4>
    0x84007974    0xa0    jal ra,ffffffff84005c74 <postpone>
    0x84007978    0xa4    j ffffffff840078f4 <doReplyTransfer+0x20>
    0x8400797a    0xa6    mv a1,s1
    0x8400797c    0xa8    mv a0,s0
    0x8400797e    0xaa    jal ra,ffffffff840027b8 <handleFaultReply>
    0x84007982    0xae    sd zero,312(s0)
    0x84007986    0xb2    sd zero,320(s0)
    0x8400798a    0xb6    beqz a0,ffffffff84007996 <doReplyTransfer+0xc2>
    0x8400798c    0xb8    li a1,2
    0x8400798e    0xba    mv a0,s0
    0x84007990    0xbc    jal ra,ffffffff84004a52 <setThreadState>
    0x84007994    0xc0    j ffffffff8400792a <doReplyTransfer+0x56>
    0x84007996    0xc2    li a1,0
    0x84007998    0xc4    mv a0,s0
    0x8400799a    0xc6    jal ra,ffffffff84004a52 <setThreadState>
    0x8400799e    0xca    j ffffffff8400792a <doReplyTransfer+0x56>
    0x840079a0    0xcc    mv a0,s0
    0x840079a2    0xce    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x840079a6    0xd2    j ffffffff840078f4 <doReplyTransfer+0x20>
    0x840079a8    0xd4    ld a4,48(a0)
    0x840079aa    0xd6    auipc a5,0x5
    0x840079ae    0xda    addi a5,a5,-426 # ffffffff8400c800 <riscvKSASIDTable>
    0x840079b2    0xde    li a3,5
    0x840079b4    0xe0    sd a3,1096(a5)
    0x840079b8    0xe4    sd a4,1104(a5)
    0x840079bc    0xe8    mv a0,s0
    0x840079be    0xea    jal ra,ffffffff84006eea <handleTimeout>
    0x840079c2    0xee    j ffffffff840078f4 <doReplyTransfer+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
89 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 144 nodes.

Section cteDelete (279 of 292)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 162 instructions.


Stack analysis
---------------

34 stack accesses found. Annotated code for `cteDelete`:

    0x840071e4      0x0    addi sp,sp,-160
    0x840071e6      0x2    sd ra,152(sp)         ; stack access
    0x840071e8      0x4    sd s0,144(sp)         ; stack access
    0x840071ea      0x6    sd s1,136(sp)         ; stack access
    0x840071ec      0x8    sd s2,128(sp)         ; stack access
    0x840071ee      0xa    sd s3,120(sp)         ; stack access
    0x840071f0      0xc    sd s4,112(sp)         ; stack access
    0x840071f2      0xe    sd s5,104(sp)         ; stack access
    0x840071f4     0x10    sd s6,96(sp)          ; stack access
    0x840071f6     0x12    sd s7,88(sp)          ; stack access
    0x840071f8     0x14    sd s8,80(sp)          ; stack access
    0x840071fa     0x16    sd s9,72(sp)          ; stack access
    0x840071fc     0x18    mv s0,a0
    0x840071fe     0x1a    mv s4,a1
    0x84007200     0x1c    li s2,18
    0x84007202     0x1e    li s3,64
    0x84007206     0x22    li s6,4
    0x84007208     0x24    li s5,-1
    0x8400720a     0x26    li s1,1
    0x8400720c     0x28    j ffffffff8400724c <cteDelete+0x68>
    0x8400720e     0x2a    mv a2,s6
    0x84007210     0x2c    j ffffffff84007284 <cteDelete+0xa0>
    0x84007212     0x2e    bnez a1,ffffffff840072b2 <cteDelete+0xce>
    0x84007214     0x30    ld a3,0(sp)           ; stack access
    0x84007216     0x32    sd a3,0(s0)
    0x84007218     0x34    ld a3,8(sp)           ; stack access
    0x8400721a     0x36    sd a3,8(s0)
    0x8400721c     0x38    bnez s4,ffffffff84007318 <cteDelete+0x134>
    0x84007220     0x3c    beq a4,s2,ffffffff840072b8 <cteDelete+0xd4>
    0x84007224     0x40    ld a5,0(s0)
    0x84007226     0x42    ld a4,8(s0)
    0x84007228     0x44    andi a3,a5,127
    0x8400722c     0x48    beq a3,s3,ffffffff8400739e <cteDelete+0x1ba>
    0x84007230     0x4c    andi a0,a5,63
    0x84007234     0x50    addiw a0,a0,1
    0x84007236     0x52    sll a0,s1,a0
    0x8400723a     0x56    neg a0,a0
    0x8400723e     0x5a    and a0,a0,a4
    0x84007240     0x5c    mv a1,s0
    0x84007242     0x5e    jal ra,ffffffff84003d32 <capSwapForDelete>
    0x84007246     0x62    jal ra,ffffffff84007118 <preemptionPoint>
    0x8400724a     0x66    bnez a0,ffffffff840072f4 <cteDelete+0x110>
    0x8400724c     0x68    ld a5,0(s0)
    0x8400724e     0x6a    srli a5,a5,0x3b
    0x84007250     0x6c    beqz a5,ffffffff840072e4 <cteDelete+0x100>
    0x84007252     0x6e    mv a0,s0
    0x84007254     0x70    jal ra,ffffffff84004568 <isFinalCapability>
    0x84007258     0x74    mv a3,a0
    0x8400725a     0x76    li a4,0
    0x8400725c     0x78    ld a1,0(s0)
    0x8400725e     0x7a    ld a2,8(s0)
    0x84007260     0x7c    mv a0,sp
    0x84007262     0x7e    jal ra,ffffffff84005804 <finaliseCap>
    0x84007266     0x82    ld a7,16(sp)          ; stack access
    0x84007268     0x84    ld a6,24(sp)          ; stack access
    0x8400726a     0x86    ld a5,0(sp)           ; stack access
    0x8400726c     0x88    ld a0,8(sp)           ; stack access
    0x8400726e     0x8a    srli a4,a5,0x3b
    0x84007272     0x8e    beqz a4,ffffffff840072b2 <cteDelete+0xce>
    0x84007274     0x90    bne a4,s2,ffffffff840072ae <cteDelete+0xca>
    0x84007278     0x94    andi a3,a5,127
    0x8400727c     0x98    beq a3,s3,ffffffff8400720e <cteDelete+0x2a>
    0x84007280     0x9c    andi a2,a5,63
    0x84007284     0xa0    addi a2,a2,1
    0x84007286     0xa2    sll a3,s5,a2
    0x8400728a     0xa6    not a3,a3
    0x8400728e     0xaa    and a3,a3,a0
    0x84007290     0xac    mv a1,s1
    0x84007292     0xae    beqz a3,ffffffff84007212 <cteDelete+0x2e>
    0x84007294     0xb0    li a1,0
    0x84007296     0xb2    bne a3,s1,ffffffff84007212 <cteDelete+0x2e>
    0x8400729a     0xb6    sll a3,s1,a2
    0x8400729e     0xba    neg a3,a3
    0x840072a2     0xbe    and a3,a3,a0
    0x840072a4     0xc0    sub a3,s0,a3
    0x840072a8     0xc4    seqz a1,a3
    0x840072ac     0xc8    j ffffffff84007212 <cteDelete+0x2e>
    0x840072ae     0xca    jal ra,ffffffff84002424 <halt>
    0x840072b2     0xce    sd a7,48(sp)          ; stack access
    0x840072b4     0xd0    sd a6,56(sp)          ; stack access
    0x840072b6     0xd2    j ffffffff840072e8 <cteDelete+0x104>
    0x840072b8     0xd4    andi a4,a5,127
    0x840072bc     0xd8    beq a4,s3,ffffffff840072d8 <cteDelete+0xf4>
    0x840072c0     0xdc    andi a5,a5,63
    0x840072c4     0xe0    addiw a5,a5,1
    0x840072c6     0xe2    sll a5,s1,a5
    0x840072ca     0xe6    neg a5,a5
    0x840072ce     0xea    and a5,a5,a0
    0x840072d0     0xec    bne s0,a5,ffffffff84007224 <cteDelete+0x40>
    0x840072d4     0xf0    mv a0,s4
    0x840072d6     0xf2    j ffffffff840072f4 <cteDelete+0x110>
    0x840072d8     0xf4    mv a5,s6
    0x840072da     0xf6    j ffffffff840072c4 <cteDelete+0xe0>
    0x840072dc     0xf8    mv a5,s6
    0x840072de     0xfa    j ffffffff84007370 <cteDelete+0x18c>
    0x840072e0     0xfc    jal ra,ffffffff84002424 <halt>
    0x840072e4    0x100    sd zero,48(sp)        ; stack access
    0x840072e6    0x102    sd zero,56(sp)        ; stack access
    0x840072e8    0x104    ld a1,48(sp)          ; stack access
    0x840072ea    0x106    ld a2,56(sp)          ; stack access
    0x840072ec    0x108    mv a0,s0
    0x840072ee    0x10a    jal ra,ffffffff84003f12 <emptySlot>
    0x840072f2    0x10e    li a0,0
    0x840072f4    0x110    ld ra,152(sp)         ; stack access
    0x840072f6    0x112    ld s0,144(sp)         ; stack access
    0x840072f8    0x114    ld s1,136(sp)         ; stack access
    0x840072fa    0x116    ld s2,128(sp)         ; stack access
    0x840072fc    0x118    ld s3,120(sp)         ; stack access
    0x840072fe    0x11a    ld s4,112(sp)         ; stack access
    0x84007300    0x11c    ld s5,104(sp)         ; stack access
    0x84007302    0x11e    ld s6,96(sp)          ; stack access
    0x84007304    0x120    ld s7,88(sp)          ; stack access
    0x84007306    0x122    ld s8,80(sp)          ; stack access
    0x84007308    0x124    ld s9,72(sp)          ; stack access
    0x8400730a    0x126    addi sp,sp,160
    0x8400730c    0x128    ret
    0x8400730e    0x12a    andi s8,s9,-32
    0x84007312    0x12e    andi s9,s9,31
    0x84007316    0x132    j ffffffff84007344 <cteDelete+0x160>
    0x84007318    0x134    ld a5,0(s0)
    0x8400731a    0x136    ld s9,8(s0) # ffffffffe0000008 <ki_end+0x5bfdc008>
    0x8400731e    0x13a    andi s7,a5,127
    0x84007322    0x13e    beq s7,s3,ffffffff8400730e <cteDelete+0x12a>
    0x84007326    0x142    andi a5,a5,63
    0x8400732a    0x146    addi a5,a5,1
    0x8400732c    0x148    sll s8,s1,a5
    0x84007330    0x14c    neg s8,s8
    0x84007334    0x150    and s8,s8,s9
    0x84007338    0x154    sll a5,s5,a5
    0x8400733c    0x158    not a5,a5
    0x84007340    0x15c    and s9,a5,s9
    0x84007344    0x160    slli a0,s9,0x5
    0x84007348    0x164    addi a0,a0,-32
    0x8400734a    0x166    li a1,0
    0x8400734c    0x168    add a0,a0,s8
    0x8400734e    0x16a    jal ra,ffffffff840071e4 <cteDelete>
    0x84007352    0x16e    bnez a0,ffffffff840072f4 <cteDelete+0x110>
    0x84007354    0x170    ld a5,0(s0)
    0x84007356    0x172    srli a4,a5,0x3b
    0x8400735a    0x176    beqz a4,ffffffff84007246 <cteDelete+0x62>
    0x8400735e    0x17a    bne a4,s2,ffffffff840072e0 <cteDelete+0xfc>
    0x84007362    0x17e    ld a3,8(s0)
    0x84007364    0x180    andi a2,a5,127
    0x84007368    0x184    beq a2,s3,ffffffff840072dc <cteDelete+0xf8>
    0x8400736c    0x188    andi a5,a5,63
    0x84007370    0x18c    addi a5,a5,1
    0x84007372    0x18e    sll a4,s1,a5
    0x84007376    0x192    neg a4,a4
    0x8400737a    0x196    and a4,a4,a3
    0x8400737c    0x198    bne s8,a4,ffffffff84007246 <cteDelete+0x62>
    0x84007380    0x19c    sll a5,s5,a5
    0x84007384    0x1a0    not a5,a5
    0x84007388    0x1a4    and a3,a3,a5
    0x8400738a    0x1a6    bne a3,s9,ffffffff84007246 <cteDelete+0x62>
    0x8400738e    0x1aa    bne a2,s7,ffffffff84007246 <cteDelete+0x62>
    0x84007392    0x1ae    addi s9,s9,-1
    0x84007394    0x1b0    and a5,s9,a5
    0x84007398    0x1b4    or a4,a4,a5
    0x8400739a    0x1b6    sd a4,8(s0)
    0x8400739c    0x1b8    j ffffffff84007246 <cteDelete+0x62>
    0x8400739e    0x1ba    andi a0,a4,-32
    0x840073a2    0x1be    j ffffffff84007240 <cteDelete+0x5c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
162 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 259 nodes.

Section sendIPC (280 of 292)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 201 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `sendIPC`:

    0x84006c40      0x0    addi sp,sp,-96
    0x84006c42      0x2    sd ra,88(sp)          ; stack access
    0x84006c44      0x4    sd s0,80(sp)          ; stack access
    0x84006c46      0x6    sd s1,72(sp)          ; stack access
    0x84006c48      0x8    sd s2,64(sp)          ; stack access
    0x84006c4a      0xa    sd s3,56(sp)          ; stack access
    0x84006c4c      0xc    sd s4,48(sp)          ; stack access
    0x84006c4e      0xe    sd s5,40(sp)          ; stack access
    0x84006c50     0x10    sd s6,32(sp)          ; stack access
    0x84006c52     0x12    sd s7,24(sp)          ; stack access
    0x84006c54     0x14    mv s3,a1
    0x84006c56     0x16    mv s5,a2
    0x84006c58     0x18    mv s2,a3
    0x84006c5a     0x1a    mv s4,a4
    0x84006c5c     0x1c    mv s6,a5
    0x84006c5e     0x1e    mv s1,a6
    0x84006c60     0x20    mv s0,a7
    0x84006c62     0x22    ld a6,0(a7)
    0x84006c66     0x26    andi a5,a6,2
    0x84006c6a     0x2a    beqz a5,ffffffff84006d40 <sendIPC+0x100>
    0x84006c6c     0x2c    andi a4,a6,3
    0x84006c70     0x30    li a5,2
    0x84006c72     0x32    bne a4,a5,ffffffff84006d2a <sendIPC+0xea>
    0x84006c76     0x36    ld s7,8(a7)
    0x84006c7a     0x3a    lui a2,0xf8000
    0x84006c7e     0x3e    srli a2,a2,0x19
    0x84006c80     0x40    and a2,a6,a2
    0x84006c84     0x44    srli a6,a6,0x26
    0x84006c88     0x48    andi a6,a6,1
    0x84006c8c     0x4c    beqz a6,ffffffff84006c96 <sendIPC+0x56>
    0x84006c90     0x50    li a5,-1
    0x84006c92     0x52    slli a5,a5,0x27
    0x84006c94     0x54    or a2,a2,a5
    0x84006c96     0x56    mv a1,s7
    0x84006c98     0x58    mv a0,s7
    0x84006c9a     0x5a    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x84006c9e     0x5e    sd a0,0(sp)           ; stack access
    0x84006ca0     0x60    sd a1,8(sp)           ; stack access
    0x84006ca2     0x62    sd a0,8(s0)
    0x84006ca4     0x64    ld a5,0(s0)
    0x84006ca6     0x66    li a4,-1
    0x84006ca8     0x68    slli a4,a4,0x27
    0x84006caa     0x6a    addi a4,a4,3
    0x84006cac     0x6c    and a5,a5,a4
    0x84006cae     0x6e    lui a4,0xf8000
    0x84006cb2     0x72    srli a4,a4,0x19
    0x84006cb4     0x74    and a1,a1,a4
    0x84006cb6     0x76    or a1,a1,a5
    0x84006cb8     0x78    beqz a0,ffffffff84006e0c <sendIPC+0x1cc>
    0x84006cbc     0x7c    sd a1,0(s0)
    0x84006cbe     0x7e    mv a4,s7
    0x84006cc0     0x80    mv a3,s2
    0x84006cc2     0x82    mv a2,s5
    0x84006cc4     0x84    mv a1,s0
    0x84006cc6     0x86    mv a0,s1
    0x84006cc8     0x88    jal ra,ffffffff84006bda <doIPCTransfer>
    0x84006ccc     0x8c    ld a5,288(s7)
    0x84006cd0     0x90    srli a5,a5,0x1
    0x84006cd2     0x92    lui s0,0xe0000
    0x84006cd6     0x96    srli s0,s0,0x19
    0x84006cd8     0x98    and s0,s0,a5
    0x84006cda     0x9a    srli a5,a5,0x26
    0x84006cdc     0x9c    andi a5,a5,1
    0x84006cde     0x9e    beqz a5,ffffffff84006e12 <sendIPC+0x1d2>
    0x84006ce2     0xa2    li a5,-1
    0x84006ce4     0xa4    slli a5,a5,0x27
    0x84006ce6     0xa6    or s0,s0,a5
    0x84006ce8     0xa8    mv s5,s0
    0x84006cea     0xaa    ld a0,0(s5)
    0x84006cee     0xae    ld a4,288(a0)
    0x84006cf2     0xb2    li a5,-1
    0x84006cf4     0xb4    slli a5,a5,0x28
    0x84006cf6     0xb6    addi a5,a5,31
    0x84006cf8     0xb8    and a5,a5,a4
    0x84006cfa     0xba    sd a5,288(a0)
    0x84006cfe     0xbe    sd zero,0(s5)
    0x84006d02     0xc2    li a1,0
    0x84006d04     0xc4    jal ra,ffffffff84004a52 <setThreadState>
    0x84006d08     0xc8    beqz s3,ffffffff84006e3e <sendIPC+0x1fe>
    0x84006d0c     0xcc    or s2,s2,s4
    0x84006d10     0xd0    bnez s2,ffffffff84006e4c <sendIPC+0x20c>
    0x84006d14     0xd4    li a1,0
    0x84006d16     0xd6    mv a0,s1
    0x84006d18     0xd8    jal ra,ffffffff84004a52 <setThreadState>
    0x84006d1c     0xdc    li a1,1
    0x84006d1e     0xde    mv a0,s7
    0x84006d20     0xe0    jal ra,ffffffff84004a52 <setThreadState>
    0x84006d24     0xe4    mv a0,s7
    0x84006d26     0xe6    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x84006d2a     0xea    ld ra,88(sp)          ; stack access
    0x84006d2c     0xec    ld s0,80(sp)          ; stack access
    0x84006d2e     0xee    ld s1,72(sp)          ; stack access
    0x84006d30     0xf0    ld s2,64(sp)          ; stack access
    0x84006d32     0xf2    ld s3,56(sp)          ; stack access
    0x84006d34     0xf4    ld s4,48(sp)          ; stack access
    0x84006d36     0xf6    ld s5,40(sp)          ; stack access
    0x84006d38     0xf8    ld s6,32(sp)          ; stack access
    0x84006d3a     0xfa    ld s7,24(sp)          ; stack access
    0x84006d3c     0xfc    addi sp,sp,96
    0x84006d3e     0xfe    ret
    0x84006d40    0x100    beqz a0,ffffffff84006d2a <sendIPC+0xea>
    0x84006d42    0x102    ld a5,280(s1)
    0x84006d46    0x106    srli a5,a5,0x27
    0x84006d48    0x108    slli a5,a5,0x27
    0x84006d4a    0x10a    lui a4,0xe0000
    0x84006d4e    0x10e    srli a4,a4,0x19
    0x84006d50    0x110    and a4,a7,a4
    0x84006d54    0x114    or a5,a5,a4
    0x84006d56    0x116    ori a5,a5,4
    0x84006d5a    0x11a    sd a5,280(s1)
    0x84006d5e    0x11e    sd a2,296(s1)
    0x84006d62    0x122    ld a5,288(s1)
    0x84006d66    0x126    slli s2,a3,0x4
    0x84006d6a    0x12a    andi s2,s2,16
    0x84006d6e    0x12e    andi a5,a5,-25
    0x84006d70    0x130    or a5,a5,s2
    0x84006d74    0x134    slli s4,s4,0x3
    0x84006d76    0x136    andi s4,s4,8
    0x84006d7a    0x13a    or a5,a5,s4
    0x84006d7e    0x13e    andi a5,a5,-5
    0x84006d80    0x140    slli s3,a1,0x2
    0x84006d84    0x144    andi s3,s3,4
    0x84006d88    0x148    or s3,a5,s3
    0x84006d8c    0x14c    sd s3,288(s1)
    0x84006d90    0x150    mv a0,s1
    0x84006d92    0x152    jal ra,ffffffff84004a0a <scheduleTCB>
    0x84006d96    0x156    ld a2,8(s0)
    0x84006d98    0x158    ld a4,0(s0)
    0x84006d9a    0x15a    lui a5,0xf8000
    0x84006d9e    0x15e    srli a5,a5,0x19
    0x84006da0    0x160    and a5,a5,a4
    0x84006da2    0x162    srli a4,a4,0x26
    0x84006da4    0x164    andi a4,a4,1
    0x84006da6    0x166    beqz a4,ffffffff84006dc8 <sendIPC+0x188>
    0x84006da8    0x168    li a4,-1
    0x84006daa    0x16a    slli a4,a4,0x27
    0x84006dac    0x16c    or a5,a5,a4
    0x84006dae    0x16e    ld a1,360(s1)
    0x84006db2    0x172    mv a4,a5
    0x84006db4    0x174    li a3,0
    0x84006db6    0x176    ld a0,360(a4) # ffffffffe0000168 <ki_end+0x5bfdc168>
    0x84006dba    0x17a    bltu a0,a1,ffffffff84006df4 <sendIPC+0x1b4>
    0x84006dbe    0x17e    sd s1,408(a4)
    0x84006dc2    0x182    bnez a3,ffffffff84006e00 <sendIPC+0x1c0>
    0x84006dc4    0x184    mv a5,s1
    0x84006dc6    0x186    j ffffffff84006dd2 <sendIPC+0x192>
    0x84006dc8    0x188    bnez a5,ffffffff84006dae <sendIPC+0x16e>
    0x84006dca    0x18a    mv a2,s1
    0x84006dcc    0x18c    mv a5,s1
    0x84006dce    0x18e    li a3,0
    0x84006dd0    0x190    li a4,0
    0x84006dd2    0x192    sd a3,408(s1)
    0x84006dd6    0x196    sd a4,416(s1)
    0x84006dda    0x19a    ld a4,0(s0)
    0x84006ddc    0x19c    sd a2,8(s0)
    0x84006dde    0x19e    srli a4,a4,0x27
    0x84006de0    0x1a0    slli a4,a4,0x27
    0x84006de2    0x1a2    lui a3,0xf8000
    0x84006de6    0x1a6    srli a3,a3,0x19
    0x84006de8    0x1a8    and a5,a5,a3
    0x84006dea    0x1aa    or a5,a5,a4
    0x84006dec    0x1ac    ori a5,a5,1
    0x84006df0    0x1b0    sd a5,0(s0)
    0x84006df2    0x1b2    j ffffffff84006d2a <sendIPC+0xea>
    0x84006df4    0x1b4    ld a0,416(a4)
    0x84006df8    0x1b8    bnez a0,ffffffff84006e06 <sendIPC+0x1c6>
    0x84006dfa    0x1ba    mv a2,s1
    0x84006dfc    0x1bc    mv a3,a4
    0x84006dfe    0x1be    mv a4,a0
    0x84006e00    0x1c0    sd s1,416(a3) # fffffffff80001a0 <ki_end+0x73fdc1a0>
    0x84006e04    0x1c4    j ffffffff84006dd2 <sendIPC+0x192>
    0x84006e06    0x1c6    mv a3,a4
    0x84006e08    0x1c8    mv a4,a0
    0x84006e0a    0x1ca    j ffffffff84006db6 <sendIPC+0x176>
    0x84006e0c    0x1cc    andi a1,a1,-4
    0x84006e0e    0x1ce    sd a1,0(s0)
    0x84006e10    0x1d0    j ffffffff84006cbe <sendIPC+0x7e>
    0x84006e12    0x1d2    mv s5,s0
    0x84006e14    0x1d4    bnez s0,ffffffff84006cea <sendIPC+0xaa>
    0x84006e18    0x1d8    bnez s3,ffffffff84006d14 <sendIPC+0xd4>
    0x84006e1c    0x1dc    ld a5,312(s1)
    0x84006e20    0x1e0    andi a5,a5,15
    0x84006e22    0x1e2    bnez a5,ffffffff84006d14 <sendIPC+0xd4>
    0x84006e26    0x1e6    beqz s6,ffffffff84006d1c <sendIPC+0xdc>
    0x84006e2a    0x1ea    ld a5,368(s7)
    0x84006e2e    0x1ee    bnez a5,ffffffff84006d1c <sendIPC+0xdc>
    0x84006e32    0x1f2    mv a1,s7
    0x84006e34    0x1f4    ld a0,368(s1)
    0x84006e38    0x1f8    jal ra,ffffffff84005052 <schedContext_donate>
    0x84006e3c    0x1fc    j ffffffff84006d1c <sendIPC+0xdc>
    0x84006e3e    0x1fe    ld a5,312(s1)
    0x84006e42    0x202    andi a5,a5,15
    0x84006e44    0x204    beqz a5,ffffffff84006e26 <sendIPC+0x1e6>
    0x84006e46    0x206    bnez s0,ffffffff84006d0c <sendIPC+0xcc>
    0x84006e4a    0x20a    j ffffffff84006d14 <sendIPC+0xd4>
    0x84006e4c    0x20c    mv a3,s6
    0x84006e4e    0x20e    mv a2,s5
    0x84006e50    0x210    mv a1,s7
    0x84006e52    0x212    mv a0,s1
    0x84006e54    0x214    jal ra,ffffffff840050a2 <reply_push>
    0x84006e58    0x218    j ffffffff84006d1c <sendIPC+0xdc>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
201 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 303 nodes.

Section sendSignal (281 of 292)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 192 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `sendSignal`:

    0x840065a6      0x0    addi sp,sp,-48
    0x840065a8      0x2    sd ra,40(sp)          ; stack access
    0x840065aa      0x4    sd s0,32(sp)          ; stack access
    0x840065ac      0x6    sd s1,24(sp)          ; stack access
    0x840065ae      0x8    sd s2,16(sp)          ; stack access
    0x840065b0      0xa    mv s0,a0
    0x840065b2      0xc    mv s1,a1
    0x840065b4      0xe    ld a4,0(a0)
    0x840065b6     0x10    andi a5,a4,3
    0x840065ba     0x14    li a3,1
    0x840065bc     0x16    beq a5,a3,ffffffff840066a2 <sendSignal+0xfc>
    0x840065c0     0x1a    li a3,2
    0x840065c2     0x1c    beq a5,a3,ffffffff84006790 <sendSignal+0x1ea>
    0x840065c6     0x20    beqz a5,ffffffff840065d4 <sendSignal+0x2e>
    0x840065c8     0x22    ld ra,40(sp)          ; stack access
    0x840065ca     0x24    ld s0,32(sp)          ; stack access
    0x840065cc     0x26    ld s1,24(sp)          ; stack access
    0x840065ce     0x28    ld s2,16(sp)          ; stack access
    0x840065d0     0x2a    addi sp,sp,48
    0x840065d2     0x2c    ret
    0x840065d4     0x2e    ld a5,24(a0)
    0x840065d6     0x30    slli a3,a5,0x19
    0x840065da     0x34    srli a3,a3,0x19
    0x840065dc     0x36    srli a5,a5,0x26
    0x840065de     0x38    andi a5,a5,1
    0x840065e0     0x3a    beqz a5,ffffffff84006602 <sendSignal+0x5c>
    0x840065e2     0x3c    li s2,-1
    0x840065e4     0x3e    slli s2,s2,0x27
    0x840065e6     0x40    or s2,a3,s2
    0x840065ea     0x44    ld a5,280(s2)
    0x840065ee     0x48    andi a5,a5,15
    0x840065f0     0x4a    li a3,3
    0x840065f2     0x4c    beq a5,a3,ffffffff84006614 <sendSignal+0x6e>
    0x840065f6     0x50    andi a4,a4,-4
    0x840065f8     0x52    ori a4,a4,2
    0x840065fc     0x56    sd a4,0(s0)
    0x840065fe     0x58    sd s1,16(s0)
    0x84006600     0x5a    j ffffffff840065c8 <sendSignal+0x22>
    0x84006602     0x5c    bnez a3,ffffffff84006610 <sendSignal+0x6a>
    0x84006604     0x5e    andi a4,a4,-4
    0x84006606     0x60    ori a4,a4,2
    0x8400660a     0x64    sd a4,0(a0)
    0x8400660c     0x66    sd a1,16(s0)
    0x8400660e     0x68    j ffffffff840065c8 <sendSignal+0x22>
    0x84006610     0x6a    mv s2,a3
    0x84006612     0x6c    j ffffffff840065ea <sendSignal+0x44>
    0x84006614     0x6e    mv a0,s2
    0x84006616     0x70    jal ra,ffffffff840054d2 <cancelIPC>
    0x8400661a     0x74    li a1,1
    0x8400661c     0x76    mv a0,s2
    0x8400661e     0x78    jal ra,ffffffff84004a52 <setThreadState>
    0x84006622     0x7c    sd s1,72(s2)
    0x84006626     0x80    ld a4,368(s2)
    0x8400662a     0x84    beqz a4,ffffffff8400664e <sendSignal+0xa8>
    0x8400662c     0x86    ld a5,280(s2)
    0x84006630     0x8a    andi a5,a5,15
    0x84006632     0x8c    addi a5,a5,-1
    0x84006634     0x8e    li a3,1
    0x84006636     0x90    bltu a3,a5,ffffffff840065c8 <sendSignal+0x22>
    0x8400663a     0x94    ld a5,64(a4)
    0x8400663c     0x96    beqz a5,ffffffff840065c8 <sendSignal+0x22>
    0x8400663e     0x98    ld a5,288(s2)
    0x84006642     0x9c    andi a5,a5,1
    0x84006644     0x9e    bnez a5,ffffffff840065c8 <sendSignal+0x22>
    0x84006646     0xa0    mv a0,s2
    0x84006648     0xa2    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x8400664c     0xa6    j ffffffff840065c8 <sendSignal+0x22>
    0x8400664e     0xa8    ld a5,32(s0)
    0x84006650     0xaa    slli a4,a5,0x19
    0x84006654     0xae    srli a4,a4,0x19
    0x84006656     0xb0    srli a5,a5,0x26
    0x84006658     0xb2    andi a5,a5,1
    0x8400665a     0xb4    beqz a5,ffffffff8400669c <sendSignal+0xf6>
    0x8400665c     0xb6    li s0,-1
    0x8400665e     0xb8    slli s0,s0,0x27
    0x84006660     0xba    or s0,s0,a4
    0x84006662     0xbc    ld a5,24(s0)
    0x84006664     0xbe    bnez a5,ffffffff840065c8 <sendSignal+0x22>
    0x84006666     0xc0    mv a1,s2
    0x84006668     0xc2    mv a0,s0
    0x8400666a     0xc4    jal ra,ffffffff84005052 <schedContext_donate>
    0x8400666e     0xc8    auipc a5,0x19
    0x84006672     0xcc    ld a5,-1606(a5) # ffffffff8401f028 <ksCurSC>
    0x84006676     0xd0    beq a5,s0,ffffffff84006680 <sendSignal+0xda>
    0x8400667a     0xd4    mv a0,s0
    0x8400667c     0xd6    jal ra,ffffffff840039bc <refill_unblock_check>
    0x84006680     0xda    mv a0,s0
    0x84006682     0xdc    jal ra,ffffffff84005c9a <schedContext_resume>
    0x84006686     0xe0    ld a5,280(s2)
    0x8400668a     0xe4    andi a5,a5,15
    0x8400668c     0xe6    addi a5,a5,-1
    0x8400668e     0xe8    li a4,1
    0x84006690     0xea    bltu a4,a5,ffffffff840065c8 <sendSignal+0x22>
    0x84006694     0xee    ld a4,368(s2)
    0x84006698     0xf2    beqz a4,ffffffff840065c8 <sendSignal+0x22>
    0x8400669a     0xf4    j ffffffff8400663a <sendSignal+0x94>
    0x8400669c     0xf6    beqz a4,ffffffff840065c8 <sendSignal+0x22>
    0x8400669e     0xf8    mv s0,a4
    0x840066a0     0xfa    j ffffffff84006662 <sendSignal+0xbc>
    0x840066a2     0xfc    ld a5,8(a0)
    0x840066a4     0xfe    slli s2,a5,0x19
    0x840066a8    0x102    srli s2,s2,0x19
    0x840066ac    0x106    srli a5,a5,0x26
    0x840066ae    0x108    andi a5,a5,1
    0x840066b0    0x10a    beqz a5,ffffffff840066ba <sendSignal+0x114>
    0x840066b2    0x10c    li a5,-1
    0x840066b4    0x10e    slli a5,a5,0x27
    0x840066b6    0x110    or s2,s2,a5
    0x840066ba    0x114    srli a2,a4,0x19
    0x840066be    0x118    bgez a4,ffffffff840066c8 <sendSignal+0x122>
    0x840066c2    0x11c    li a5,-1
    0x840066c4    0x11e    slli a5,a5,0x27
    0x840066c6    0x120    or a2,a2,a5
    0x840066c8    0x122    mv a1,s2
    0x840066ca    0x124    mv a0,s2
    0x840066cc    0x126    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x840066d0    0x12a    sd a0,0(sp)           ; stack access
    0x840066d2    0x12c    sd a1,8(sp)           ; stack access
    0x840066d4    0x12e    ld a4,8(s0)
    0x840066d6    0x130    li a5,-1
    0x840066d8    0x132    slli a3,a5,0x27
    0x840066dc    0x136    and a4,a4,a3
    0x840066de    0x138    srli a5,a5,0x19
    0x840066e0    0x13a    and a5,a5,a0
    0x840066e2    0x13c    or a5,a5,a4
    0x840066e4    0x13e    sd a5,8(s0)
    0x840066e6    0x140    ld a5,0(s0)
    0x840066e8    0x142    slli a5,a5,0x27
    0x840066ea    0x144    srli a5,a5,0x27
    0x840066ec    0x146    slli a1,a1,0x19
    0x840066ee    0x148    or a5,a5,a1
    0x840066f0    0x14a    beqz a0,ffffffff84006730 <sendSignal+0x18a>
    0x840066f2    0x14c    sd a5,0(s0)
    0x840066f4    0x14e    li a1,1
    0x840066f6    0x150    mv a0,s2
    0x840066f8    0x152    jal ra,ffffffff84004a52 <setThreadState>
    0x840066fc    0x156    sd s1,72(s2)
    0x84006700    0x15a    ld a5,368(s2)
    0x84006704    0x15e    beqz a5,ffffffff84006736 <sendSignal+0x190>
    0x84006706    0x160    ld a5,280(s2)
    0x8400670a    0x164    andi a5,a5,15
    0x8400670c    0x166    addi a5,a5,-1
    0x8400670e    0x168    li a4,1
    0x84006710    0x16a    bltu a4,a5,ffffffff840065c8 <sendSignal+0x22>
    0x84006714    0x16e    ld a5,368(s2)
    0x84006718    0x172    ld a5,64(a5)
    0x8400671a    0x174    beqz a5,ffffffff840065c8 <sendSignal+0x22>
    0x8400671e    0x178    ld a5,288(s2)
    0x84006722    0x17c    andi a5,a5,1
    0x84006724    0x17e    bnez a5,ffffffff840065c8 <sendSignal+0x22>
    0x84006728    0x182    mv a0,s2
    0x8400672a    0x184    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x8400672e    0x188    j ffffffff840065c8 <sendSignal+0x22>
    0x84006730    0x18a    andi a5,a5,-4
    0x84006732    0x18c    sd a5,0(s0)
    0x84006734    0x18e    j ffffffff840066f4 <sendSignal+0x14e>
    0x84006736    0x190    ld a5,32(s0)
    0x84006738    0x192    slli a4,a5,0x19
    0x8400673c    0x196    srli a4,a4,0x19
    0x8400673e    0x198    srli a5,a5,0x26
    0x84006740    0x19a    andi a5,a5,1
    0x84006742    0x19c    beqz a5,ffffffff84006788 <sendSignal+0x1e2>
    0x84006744    0x19e    li s0,-1
    0x84006746    0x1a0    slli s0,s0,0x27
    0x84006748    0x1a2    or s0,s0,a4
    0x8400674a    0x1a4    ld a5,24(s0)
    0x8400674c    0x1a6    bnez a5,ffffffff840065c8 <sendSignal+0x22>
    0x84006750    0x1aa    mv a1,s2
    0x84006752    0x1ac    mv a0,s0
    0x84006754    0x1ae    jal ra,ffffffff84005052 <schedContext_donate>
    0x84006758    0x1b2    auipc a5,0x19
    0x8400675c    0x1b6    ld a5,-1840(a5) # ffffffff8401f028 <ksCurSC>
    0x84006760    0x1ba    beq a5,s0,ffffffff8400676a <sendSignal+0x1c4>
    0x84006764    0x1be    mv a0,s0
    0x84006766    0x1c0    jal ra,ffffffff840039bc <refill_unblock_check>
    0x8400676a    0x1c4    mv a0,s0
    0x8400676c    0x1c6    jal ra,ffffffff84005c9a <schedContext_resume>
    0x84006770    0x1ca    ld a5,280(s2)
    0x84006774    0x1ce    andi a5,a5,15
    0x84006776    0x1d0    addi a5,a5,-1
    0x84006778    0x1d2    li a4,1
    0x8400677a    0x1d4    bltu a4,a5,ffffffff840065c8 <sendSignal+0x22>
    0x8400677e    0x1d8    ld a5,368(s2)
    0x84006782    0x1dc    beqz a5,ffffffff840065c8 <sendSignal+0x22>
    0x84006786    0x1e0    j ffffffff84006718 <sendSignal+0x172>
    0x84006788    0x1e2    beqz a4,ffffffff840065c8 <sendSignal+0x22>
    0x8400678c    0x1e6    mv s0,a4
    0x8400678e    0x1e8    j ffffffff8400674a <sendSignal+0x1a4>
    0x84006790    0x1ea    ld a1,16(a0)
    0x84006792    0x1ec    or s1,s1,a1
    0x84006794    0x1ee    sd s1,16(a0)
    0x84006796    0x1f0    j ffffffff840065c8 <sendSignal+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
192 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 309 nodes.

Section schedule (282 of 292)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 176 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedule`:

    0x8400a7ce      0x0    addi sp,sp,-48
    0x8400a7d0      0x2    sd ra,40(sp)          ; stack access
    0x8400a7d2      0x4    sd s0,32(sp)          ; stack access
    0x8400a7d4      0x6    sd s1,24(sp)          ; stack access
    0x8400a7d6      0x8    sd s2,16(sp)          ; stack access
    0x8400a7d8      0xa    sd s3,8(sp)           ; stack access
    0x8400a7da      0xc    sd s4,0(sp)           ; stack access
    0x8400a7dc      0xe    jal ra,ffffffff840068d8 <awaken>
    0x8400a7e0     0x12    auipc a5,0x15
    0x8400a7e4     0x16    ld a5,-1944(a5) # ffffffff8401f048 <ksSchedulerAction>
    0x8400a7e8     0x1a    beqz a5,ffffffff8400a8d6 <schedule+0x108>
    0x8400a7ec     0x1e    auipc a0,0x15
    0x8400a7f0     0x22    ld a0,-1940(a0) # ffffffff8401f058 <ksCurThread>
    0x8400a7f4     0x26    ld a5,280(a0)
    0x8400a7f8     0x2a    andi a5,a5,15
    0x8400a7fa     0x2c    addi a5,a5,-1
    0x8400a7fc     0x2e    li a4,1
    0x8400a7fe     0x30    li s1,0
    0x8400a800     0x32    bgeu a4,a5,ffffffff8400a89e <schedule+0xd0>
    0x8400a804     0x36    auipc s0,0x15
    0x8400a808     0x3a    ld s0,-1980(s0) # ffffffff8401f048 <ksSchedulerAction>
    0x8400a80c     0x3e    li a5,1
    0x8400a80e     0x40    beq s0,a5,ffffffff8400a8bc <schedule+0xee>
    0x8400a812     0x44    auipc s4,0x15
    0x8400a816     0x48    ld s4,-1978(s4) # ffffffff8401f058 <ksCurThread>
    0x8400a81a     0x4c    auipc a5,0x15
    0x8400a81e     0x50    ld a5,-1994(a5) # ffffffff8401f050 <ksIdleThread>
    0x8400a822     0x54    beq s4,a5,ffffffff8400a832 <schedule+0x64>
    0x8400a826     0x58    ld a4,360(s0)
    0x8400a82a     0x5c    ld a5,360(s4)
    0x8400a82e     0x60    bgeu a4,a5,ffffffff8400a8c2 <schedule+0xf4>
    0x8400a832     0x64    auipc s2,0x14
    0x8400a836     0x68    ld s2,2022(s2) # ffffffff8401f018 <ksCurDomain>
    0x8400a83a     0x6c    slli a4,s2,0x3
    0x8400a83e     0x70    auipc a5,0x2
    0x8400a842     0x74    addi a5,a5,-62 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a846     0x78    add a5,a5,a4
    0x8400a848     0x7a    ld a0,1552(a5)
    0x8400a84c     0x7e    beqz a0,ffffffff8400a8c2 <schedule+0xf4>
    0x8400a84e     0x80    jal ra,ffffffff8400a66a <__clzdi2>
    0x8400a852     0x84    mv s3,a0
    0x8400a854     0x86    slli s2,s2,0x2
    0x8400a856     0x88    addi a5,a0,-60
    0x8400a85a     0x8c    add s2,s2,a5
    0x8400a85c     0x8e    slli s2,s2,0x3
    0x8400a85e     0x90    auipc a5,0x2
    0x8400a862     0x94    addi a5,a5,-94 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a866     0x98    add s2,s2,a5
    0x8400a868     0x9a    ld a0,1680(s2)
    0x8400a86c     0x9e    jal ra,ffffffff8400a66a <__clzdi2>
    0x8400a870     0xa2    li a5,63
    0x8400a874     0xa6    sub s3,a5,s3
    0x8400a878     0xaa    slli s3,s3,0x6
    0x8400a87a     0xac    sub a5,a5,a0
    0x8400a87c     0xae    or s3,s3,a5
    0x8400a880     0xb2    ld a5,360(s0)
    0x8400a884     0xb6    bgeu a5,s3,ffffffff8400a8c2 <schedule+0xf4>
    0x8400a888     0xba    mv a0,s0
    0x8400a88a     0xbc    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x8400a88e     0xc0    li a5,1
    0x8400a890     0xc2    auipc a4,0x14
    0x8400a894     0xc6    sd a5,1976(a4) # ffffffff8401f048 <ksSchedulerAction>
    0x8400a898     0xca    jal ra,ffffffff8400a74e <scheduleChooseNewThread>
    0x8400a89c     0xce    j ffffffff8400a8d6 <schedule+0x108>
    0x8400a89e     0xd0    ld a5,368(a0)
    0x8400a8a2     0xd4    beqz a5,ffffffff8400a804 <schedule+0x36>
    0x8400a8a4     0xd6    ld s1,64(a5)
    0x8400a8a6     0xd8    beqz s1,ffffffff8400a804 <schedule+0x36>
    0x8400a8a8     0xda    ld a5,288(a0)
    0x8400a8ac     0xde    andi a5,a5,1
    0x8400a8ae     0xe0    bnez a5,ffffffff8400a8b8 <schedule+0xea>
    0x8400a8b0     0xe2    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x8400a8b4     0xe6    li s1,1
    0x8400a8b6     0xe8    j ffffffff8400a804 <schedule+0x36>
    0x8400a8b8     0xea    li s1,0
    0x8400a8ba     0xec    j ffffffff8400a804 <schedule+0x36>
    0x8400a8bc     0xee    jal ra,ffffffff8400a74e <scheduleChooseNewThread>
    0x8400a8c0     0xf2    j ffffffff8400a8d6 <schedule+0x108>
    0x8400a8c2     0xf4    beqz s1,ffffffff8400a8d0 <schedule+0x102>
    0x8400a8c4     0xf6    ld a4,360(s0)
    0x8400a8c8     0xfa    ld a5,360(s4)
    0x8400a8cc     0xfe    beq a4,a5,ffffffff8400a92e <schedule+0x160>
    0x8400a8d0    0x102    mv a0,s0
    0x8400a8d2    0x104    jal ra,ffffffff84004fd8 <switchToThread>
    0x8400a8d6    0x108    auipc a5,0x14
    0x8400a8da    0x10c    sd zero,1906(a5) # ffffffff8401f048 <ksSchedulerAction>
    0x8400a8de    0x110    auipc a5,0x14
    0x8400a8e2    0x114    ld a5,1914(a5) # ffffffff8401f058 <ksCurThread>
    0x8400a8e6    0x118    ld a0,368(a5)
    0x8400a8ea    0x11c    auipc a5,0x14
    0x8400a8ee    0x120    ld a5,1854(a5) # ffffffff8401f028 <ksCurSC>
    0x8400a8f2    0x124    bne a0,a5,ffffffff8400a944 <schedule+0x176>
    0x8400a8f6    0x128    auipc a5,0x14
    0x8400a8fa    0x12c    ld a5,1858(a5) # ffffffff8401f038 <ksReprogram>
    0x8400a8fe    0x130    bnez a5,ffffffff8400a964 <schedule+0x196>
    0x8400a900    0x132    auipc a5,0x14
    0x8400a904    0x136    ld a5,1880(a5) # ffffffff8401f058 <ksCurThread>
    0x8400a908    0x13a    ld a5,368(a5)
    0x8400a90c    0x13e    auipc a4,0x14
    0x8400a910    0x142    sd a5,1820(a4) # ffffffff8401f028 <ksCurSC>
    0x8400a914    0x146    auipc a5,0x14
    0x8400a918    0x14a    ld a5,1828(a5) # ffffffff8401f038 <ksReprogram>
    0x8400a91c    0x14e    bnez a5,ffffffff8400a9e2 <schedule+0x214>
    0x8400a91e    0x150    ld ra,40(sp)          ; stack access
    0x8400a920    0x152    ld s0,32(sp)          ; stack access
    0x8400a922    0x154    ld s1,24(sp)          ; stack access
    0x8400a924    0x156    ld s2,16(sp)          ; stack access
    0x8400a926    0x158    ld s3,8(sp)           ; stack access
    0x8400a928    0x15a    ld s4,0(sp)           ; stack access
    0x8400a92a    0x15c    addi sp,sp,48
    0x8400a92c    0x15e    ret
    0x8400a92e    0x160    mv a0,s0
    0x8400a930    0x162    jal ra,ffffffff84004e60 <tcbSchedAppend>
    0x8400a934    0x166    li a5,1
    0x8400a936    0x168    auipc a4,0x14
    0x8400a93a    0x16c    sd a5,1810(a4) # ffffffff8401f048 <ksSchedulerAction>
    0x8400a93e    0x170    jal ra,ffffffff8400a74e <scheduleChooseNewThread>
    0x8400a942    0x174    j ffffffff8400a8d6 <schedule+0x108>
    0x8400a944    0x176    ld a5,64(a5)
    0x8400a946    0x178    bnez a5,ffffffff8400a954 <schedule+0x186>
    0x8400a948    0x17a    auipc a5,0x14
    0x8400a94c    0x17e    ld a5,1776(a5) # ffffffff8401f038 <ksReprogram>
    0x8400a950    0x182    beqz a5,ffffffff8400a900 <schedule+0x132>
    0x8400a952    0x184    j ffffffff8400a9b0 <schedule+0x1e2>
    0x8400a954    0x186    li a5,1
    0x8400a956    0x188    auipc a4,0x14
    0x8400a95a    0x18c    sd a5,1762(a4) # ffffffff8401f038 <ksReprogram>
    0x8400a95e    0x190    jal ra,ffffffff840039bc <refill_unblock_check>
    0x8400a962    0x194    j ffffffff8400a8f6 <schedule+0x128>
    0x8400a964    0x196    auipc a5,0x14
    0x8400a968    0x19a    ld a5,1732(a5) # ffffffff8401f028 <ksCurSC>
    0x8400a96c    0x19e    ld a4,64(a5)
    0x8400a96e    0x1a0    beqz a4,ffffffff8400a9b0 <schedule+0x1e2>
    0x8400a970    0x1a2    auipc a0,0x14
    0x8400a974    0x1a6    ld a0,1744(a0) # ffffffff8401f040 <ksConsumed>
    0x8400a978    0x1aa    beqz a0,ffffffff8400a99a <schedule+0x1cc>
    0x8400a97a    0x1ac    ld a4,0(a5)
    0x8400a97c    0x1ae    bnez a4,ffffffff8400a9dc <schedule+0x20e>
    0x8400a97e    0x1b0    addi a2,a5,88
    0x8400a982    0x1b4    ld a4,72(a5)
    0x8400a984    0x1b6    slli a4,a4,0x4
    0x8400a986    0x1b8    add a4,a4,a2
    0x8400a988    0x1ba    ld a3,8(a4)
    0x8400a98a    0x1bc    sub a3,a3,a0
    0x8400a98c    0x1be    sd a3,8(a4)
    0x8400a98e    0x1c0    ld a5,80(a5)
    0x8400a990    0x1c2    slli a5,a5,0x4
    0x8400a992    0x1c4    add a5,a5,a2
    0x8400a994    0x1c6    ld a4,8(a5)
    0x8400a996    0x1c8    add a0,a0,a4
    0x8400a998    0x1ca    sd a0,8(a5)
    0x8400a99a    0x1cc    auipc a4,0x14
    0x8400a99e    0x1d0    ld a4,1678(a4) # ffffffff8401f028 <ksCurSC>
    0x8400a9a2    0x1d4    ld a5,8(a4)
    0x8400a9a4    0x1d6    auipc a3,0x14
    0x8400a9a8    0x1da    ld a3,1692(a3) # ffffffff8401f040 <ksConsumed>
    0x8400a9ac    0x1de    add a5,a5,a3
    0x8400a9ae    0x1e0    sd a5,8(a4)
    0x8400a9b0    0x1e2    auipc a4,0x14
    0x8400a9b4    0x1e6    ld a4,1680(a4) # ffffffff8401f040 <ksConsumed>
    0x8400a9b8    0x1ea    auipc a3,0x14
    0x8400a9bc    0x1ee    ld a3,1624(a3) # ffffffff8401f010 <ksDomainTime>
    0x8400a9c0    0x1f2    li a5,0
    0x8400a9c2    0x1f4    bgeu a4,a3,ffffffff8400a9ca <schedule+0x1fc>
    0x8400a9c6    0x1f8    sub a5,a3,a4
    0x8400a9ca    0x1fc    auipc a4,0x14
    0x8400a9ce    0x200    sd a5,1606(a4) # ffffffff8401f010 <ksDomainTime>
    0x8400a9d2    0x204    auipc a5,0x14
    0x8400a9d6    0x208    sd zero,1646(a5) # ffffffff8401f040 <ksConsumed>
    0x8400a9da    0x20c    j ffffffff8400a900 <schedule+0x132>
    0x8400a9dc    0x20e    jal ra,ffffffff840036d2 <refill_split_check>
    0x8400a9e0    0x212    j ffffffff8400a99a <schedule+0x1cc>
    0x8400a9e2    0x214    jal ra,ffffffff84003a62 <setNextInterrupt>
    0x8400a9e6    0x218    auipc a5,0x14
    0x8400a9ea    0x21c    sd zero,1618(a5) # ffffffff8401f038 <ksReprogram>
    0x8400a9ee    0x220    j ffffffff8400a91e <schedule+0x150>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
176 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 294 nodes.

Section receiveIPC (283 of 292)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 236 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `receiveIPC`:

    0x840079d4      0x0    addi sp,sp,-112
    0x840079d6      0x2    sd ra,104(sp)         ; stack access
    0x840079d8      0x4    sd s0,96(sp)          ; stack access
    0x840079da      0x6    sd s1,88(sp)          ; stack access
    0x840079dc      0x8    sd s2,80(sp)          ; stack access
    0x840079de      0xa    sd s3,72(sp)          ; stack access
    0x840079e0      0xc    sd s4,64(sp)          ; stack access
    0x840079e2      0xe    sd s5,56(sp)          ; stack access
    0x840079e4     0x10    mv s0,a0
    0x840079e6     0x12    sd a1,16(sp)          ; stack access
    0x840079e8     0x14    sd a2,24(sp)          ; stack access
    0x840079ea     0x16    mv s3,a3
    0x840079ec     0x18    sd a4,0(sp)           ; stack access
    0x840079ee     0x1a    sd a5,8(sp)           ; stack access
    0x840079f0     0x1c    slli s1,a1,0x19
    0x840079f4     0x20    srli s1,s1,0x19
    0x840079f6     0x22    srli a1,a1,0x26
    0x840079f8     0x24    andi a1,a1,1
    0x840079fa     0x26    beqz a1,ffffffff84007a02 <receiveIPC+0x2e>
    0x840079fc     0x28    li a5,-1
    0x840079fe     0x2a    slli a5,a5,0x27
    0x84007a00     0x2c    or s1,s1,a5
    0x84007a02     0x2e    mv s2,s1
    0x84007a04     0x30    ld a5,0(sp)           ; stack access
    0x84007a06     0x32    srli a5,a5,0x3b
    0x84007a08     0x34    li a4,8
    0x84007a0a     0x36    li s4,0
    0x84007a0c     0x38    beq a5,a4,ffffffff84007a4a <receiveIPC+0x76>
    0x84007a10     0x3c    ld a0,304(s0)
    0x84007a14     0x40    beqz a0,ffffffff84007aae <receiveIPC+0xda>
    0x84007a16     0x42    ld a5,0(a0)
    0x84007a18     0x44    andi a5,a5,3
    0x84007a1a     0x46    li a4,2
    0x84007a1c     0x48    beq a5,a4,ffffffff84007a5c <receiveIPC+0x88>
    0x84007a20     0x4c    bnez s3,ffffffff84007a64 <receiveIPC+0x90>
    0x84007a24     0x50    ld a5,0(s2) # fffffffff8000000 <ki_end+0x73fdc000>
    0x84007a28     0x54    andi a3,a5,3
    0x84007a2c     0x58    li a4,1
    0x84007a2e     0x5a    beq a3,a4,ffffffff84007b90 <receiveIPC+0x1bc>
    0x84007a32     0x5e    andi a5,a5,1
    0x84007a34     0x60    beqz a5,ffffffff84007b8a <receiveIPC+0x1b6>
    0x84007a38     0x64    ld ra,104(sp)         ; stack access
    0x84007a3a     0x66    ld s0,96(sp)          ; stack access
    0x84007a3c     0x68    ld s1,88(sp)          ; stack access
    0x84007a3e     0x6a    ld s2,80(sp)          ; stack access
    0x84007a40     0x6c    ld s3,72(sp)          ; stack access
    0x84007a42     0x6e    ld s4,64(sp)          ; stack access
    0x84007a44     0x70    ld s5,56(sp)          ; stack access
    0x84007a46     0x72    addi sp,sp,112
    0x84007a48     0x74    ret
    0x84007a4a     0x76    ld s4,8(sp)           ; stack access
    0x84007a4c     0x78    ld a0,0(s4)
    0x84007a50     0x7c    beqz a0,ffffffff84007a10 <receiveIPC+0x3c>
    0x84007a52     0x7e    beq a0,s0,ffffffff84007a10 <receiveIPC+0x3c>
    0x84007a56     0x82    jal ra,ffffffff840054d2 <cancelIPC>
    0x84007a5a     0x86    j ffffffff84007a10 <receiveIPC+0x3c>
    0x84007a5c     0x88    mv a1,s0
    0x84007a5e     0x8a    jal ra,ffffffff840063b8 <completeSignal>
    0x84007a62     0x8e    j ffffffff84007a38 <receiveIPC+0x64>
    0x84007a64     0x90    ld a5,32(a0)
    0x84007a66     0x92    slli a4,a5,0x19
    0x84007a6a     0x96    srli a4,a4,0x19
    0x84007a6c     0x98    srli a5,a5,0x26
    0x84007a6e     0x9a    andi a5,a5,1
    0x84007a70     0x9c    beqz a5,ffffffff84007a78 <receiveIPC+0xa4>
    0x84007a72     0x9e    li a5,-1
    0x84007a74     0xa0    slli a5,a5,0x27
    0x84007a76     0xa2    or a4,a4,a5
    0x84007a78     0xa4    ld a5,368(s0)
    0x84007a7c     0xa8    beq a5,a4,ffffffff84007a94 <receiveIPC+0xc0>
    0x84007a80     0xac    ld a5,0(s2)
    0x84007a84     0xb0    andi a3,a5,3
    0x84007a88     0xb4    li a4,1
    0x84007a8a     0xb6    beq a3,a4,ffffffff84007b90 <receiveIPC+0x1bc>
    0x84007a8e     0xba    andi a5,a5,1
    0x84007a90     0xbc    bnez a5,ffffffff84007a38 <receiveIPC+0x64>
    0x84007a92     0xbe    j ffffffff84007ac4 <receiveIPC+0xf0>
    0x84007a94     0xc0    sd zero,368(s0)
    0x84007a98     0xc4    sd zero,24(a4)
    0x84007a9c     0xc8    auipc a5,0x17
    0x84007aa0     0xcc    ld a5,1468(a5) # ffffffff8401f058 <ksCurThread>
    0x84007aa4     0xd0    bne s0,a5,ffffffff84007a80 <receiveIPC+0xac>
    0x84007aa8     0xd4    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84007aac     0xd8    j ffffffff84007a80 <receiveIPC+0xac>
    0x84007aae     0xda    ld a5,0(s2)
    0x84007ab2     0xde    andi a3,a5,3
    0x84007ab6     0xe2    li a4,1
    0x84007ab8     0xe4    beq a3,a4,ffffffff84007b90 <receiveIPC+0x1bc>
    0x84007abc     0xe8    andi a5,a5,1
    0x84007abe     0xea    bnez a5,ffffffff84007a38 <receiveIPC+0x64>
    0x84007ac0     0xec    beqz s3,ffffffff84007b8a <receiveIPC+0x1b6>
    0x84007ac4     0xf0    ld a5,280(s0)
    0x84007ac8     0xf4    li a4,-1
    0x84007aca     0xf6    slli a3,a4,0x27
    0x84007ace     0xfa    and a5,a5,a3
    0x84007ad0     0xfc    lui a3,0xe0000
    0x84007ad4    0x100    srli a2,a3,0x19
    0x84007ad8    0x104    and s1,s1,a2
    0x84007ada    0x106    or s1,s1,a5
    0x84007adc    0x108    ori s1,s1,3
    0x84007ae0    0x10c    sd s1,280(s0)
    0x84007ae4    0x110    ld a5,288(s0)
    0x84007ae8    0x114    slli a4,a4,0x28
    0x84007aea    0x116    addi a4,a4,31
    0x84007aec    0x118    and a4,a4,a5
    0x84007aee    0x11a    slli a5,s4,0x1
    0x84007af2    0x11e    srli a3,a3,0x18
    0x84007af4    0x120    and a5,a5,a3
    0x84007af6    0x122    or a4,a4,a5
    0x84007af8    0x124    sd a4,288(s0)
    0x84007afc    0x128    beqz s4,ffffffff84007b04 <receiveIPC+0x130>
    0x84007b00    0x12c    sd s0,0(s4)
    0x84007b04    0x130    mv a0,s0
    0x84007b06    0x132    jal ra,ffffffff84004a0a <scheduleTCB>
    0x84007b0a    0x136    ld a2,8(s2)
    0x84007b0e    0x13a    ld a4,0(s2)
    0x84007b12    0x13e    lui a5,0xf8000
    0x84007b16    0x142    srli a5,a5,0x19
    0x84007b18    0x144    and a5,a5,a4
    0x84007b1a    0x146    srli a4,a4,0x26
    0x84007b1c    0x148    andi a4,a4,1
    0x84007b1e    0x14a    beqz a4,ffffffff84007b40 <receiveIPC+0x16c>
    0x84007b20    0x14c    li a4,-1
    0x84007b22    0x14e    slli a4,a4,0x27
    0x84007b24    0x150    or a5,a5,a4
    0x84007b26    0x152    ld a1,360(s0)
    0x84007b2a    0x156    mv a4,a5
    0x84007b2c    0x158    li a3,0
    0x84007b2e    0x15a    ld a0,360(a4)
    0x84007b32    0x15e    bltu a0,a1,ffffffff84007b72 <receiveIPC+0x19e>
    0x84007b36    0x162    sd s0,408(a4)
    0x84007b3a    0x166    bnez a3,ffffffff84007b7e <receiveIPC+0x1aa>
    0x84007b3c    0x168    mv a5,s0
    0x84007b3e    0x16a    j ffffffff84007b4a <receiveIPC+0x176>
    0x84007b40    0x16c    bnez a5,ffffffff84007b26 <receiveIPC+0x152>
    0x84007b42    0x16e    mv a2,s0
    0x84007b44    0x170    mv a5,s0
    0x84007b46    0x172    li a4,0
    0x84007b48    0x174    li a3,0
    0x84007b4a    0x176    sd a3,408(s0)
    0x84007b4e    0x17a    sd a4,416(s0)
    0x84007b52    0x17e    ld a4,0(s2)
    0x84007b56    0x182    sd a2,8(s2)
    0x84007b5a    0x186    srli a4,a4,0x27
    0x84007b5c    0x188    slli a4,a4,0x27
    0x84007b5e    0x18a    lui a3,0xf8000
    0x84007b62    0x18e    srli a3,a3,0x19
    0x84007b64    0x190    and a5,a5,a3
    0x84007b66    0x192    or a5,a5,a4
    0x84007b68    0x194    ori a5,a5,2
    0x84007b6c    0x198    sd a5,0(s2)
    0x84007b70    0x19c    j ffffffff84007a38 <receiveIPC+0x64>
    0x84007b72    0x19e    ld a0,416(a4)
    0x84007b76    0x1a2    bnez a0,ffffffff84007b84 <receiveIPC+0x1b0>
    0x84007b78    0x1a4    mv a2,s0
    0x84007b7a    0x1a6    mv a3,a4
    0x84007b7c    0x1a8    mv a4,a0
    0x84007b7e    0x1aa    sd s0,416(a3) # fffffffff80001a0 <ki_end+0x73fdc1a0>
    0x84007b82    0x1ae    j ffffffff84007b4a <receiveIPC+0x176>
    0x84007b84    0x1b0    mv a3,a4
    0x84007b86    0x1b2    mv a4,a0
    0x84007b88    0x1b4    j ffffffff84007b2e <receiveIPC+0x15a>
    0x84007b8a    0x1b6    sd zero,72(s0)
    0x84007b8e    0x1ba    j ffffffff84007a38 <receiveIPC+0x64>
    0x84007b90    0x1bc    ld s1,8(s2)
    0x84007b94    0x1c0    lui a2,0xf8000
    0x84007b98    0x1c4    srli a2,a2,0x19
    0x84007b9a    0x1c6    and a2,a2,a5
    0x84007b9c    0x1c8    srli a5,a5,0x26
    0x84007b9e    0x1ca    andi a5,a5,1
    0x84007ba0    0x1cc    beqz a5,ffffffff84007ba8 <receiveIPC+0x1d4>
    0x84007ba2    0x1ce    li a5,-1
    0x84007ba4    0x1d0    slli a5,a5,0x27
    0x84007ba6    0x1d2    or a2,a2,a5
    0x84007ba8    0x1d4    mv a1,s1
    0x84007baa    0x1d6    mv a0,s1
    0x84007bac    0x1d8    jal ra,ffffffff84005280 <tcbEPDequeue>
    0x84007bb0    0x1dc    sd a0,32(sp)          ; stack access
    0x84007bb2    0x1de    sd a1,40(sp)          ; stack access
    0x84007bb4    0x1e0    sd a0,8(s2)
    0x84007bb8    0x1e4    ld a5,0(s2)
    0x84007bbc    0x1e8    li a4,-1
    0x84007bbe    0x1ea    slli a4,a4,0x27
    0x84007bc0    0x1ec    addi a4,a4,3
    0x84007bc2    0x1ee    and a5,a5,a4
    0x84007bc4    0x1f0    lui a4,0xf8000
    0x84007bc8    0x1f4    srli a4,a4,0x19
    0x84007bca    0x1f6    and a1,a1,a4
    0x84007bcc    0x1f8    or a1,a1,a5
    0x84007bce    0x1fa    beqz a0,ffffffff84007c30 <receiveIPC+0x25c>
    0x84007bd0    0x1fc    sd a1,0(s2)
    0x84007bd4    0x200    ld a5,288(s1)
    0x84007bd8    0x204    srli s5,a5,0x4
    0x84007bdc    0x208    srli s3,a5,0x3
    0x84007be0    0x20c    mv a4,s0
    0x84007be2    0x20e    andi a3,s5,1
    0x84007be6    0x212    ld a2,296(s1)
    0x84007bea    0x216    mv a1,s2
    0x84007bec    0x218    mv a0,s1
    0x84007bee    0x21a    jal ra,ffffffff84006bda <doIPCTransfer>
    0x84007bf2    0x21e    ld a5,288(s1)
    0x84007bf6    0x222    srli a5,a5,0x2
    0x84007bf8    0x224    andi a5,a5,1
    0x84007bfa    0x226    bnez a5,ffffffff84007c04 <receiveIPC+0x230>
    0x84007bfc    0x228    ld a5,312(s1)
    0x84007c00    0x22c    andi a5,a5,15
    0x84007c02    0x22e    beqz a5,ffffffff84007c42 <receiveIPC+0x26e>
    0x84007c04    0x230    or a5,s3,s5
    0x84007c08    0x234    andi a5,a5,1
    0x84007c0a    0x236    beqz a5,ffffffff84007c38 <receiveIPC+0x264>
    0x84007c0c    0x238    beqz s4,ffffffff84007c38 <receiveIPC+0x264>
    0x84007c10    0x23c    ld a5,368(s1)
    0x84007c14    0x240    li a3,0
    0x84007c16    0x242    beqz a5,ffffffff84007c24 <receiveIPC+0x250>
    0x84007c18    0x244    ld a3,312(s1)
    0x84007c1c    0x248    andi a3,a3,15
    0x84007c1e    0x24a    addi a3,a3,-5
    0x84007c20    0x24c    snez a3,a3
    0x84007c24    0x250    mv a2,s4
    0x84007c26    0x252    mv a1,s0
    0x84007c28    0x254    mv a0,s1
    0x84007c2a    0x256    jal ra,ffffffff840050a2 <reply_push>
    0x84007c2e    0x25a    j ffffffff84007a38 <receiveIPC+0x64>
    0x84007c30    0x25c    andi a1,a1,-4
    0x84007c32    0x25e    sd a1,0(s2)
    0x84007c36    0x262    j ffffffff84007bd4 <receiveIPC+0x200>
    0x84007c38    0x264    li a1,0
    0x84007c3a    0x266    mv a0,s1
    0x84007c3c    0x268    jal ra,ffffffff84004a52 <setThreadState>
    0x84007c40    0x26c    j ffffffff84007a38 <receiveIPC+0x64>
    0x84007c42    0x26e    li a1,1
    0x84007c44    0x270    mv a0,s1
    0x84007c46    0x272    jal ra,ffffffff84004a52 <setThreadState>
    0x84007c4a    0x276    mv a0,s1
    0x84007c4c    0x278    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x84007c50    0x27c    j ffffffff84007a38 <receiveIPC+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
236 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 369 nodes.

Section decodeSchedControlInvocation (284 of 292)
=================================================

Deriving specifications
-----------------------

Section `decodeSchedControlInvocation` consists of 231 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `decodeSchedControlInvocation`:

    0x84006118      0x0    addi sp,sp,-80
    0x8400611a      0x2    sd ra,72(sp)          ; stack access
    0x8400611c      0x4    sd s0,64(sp)          ; stack access
    0x8400611e      0x6    sd s1,56(sp)          ; stack access
    0x84006120      0x8    sd s2,48(sp)          ; stack access
    0x84006122      0xa    sd s3,40(sp)          ; stack access
    0x84006124      0xc    sd s4,32(sp)          ; stack access
    0x84006126      0xe    sd s5,24(sp)          ; stack access
    0x84006128     0x10    sd a1,0(sp)           ; stack access
    0x8400612a     0x12    sd a2,8(sp)           ; stack access
    0x8400612c     0x14    li a5,30
    0x8400612e     0x16    beq a0,a5,ffffffff84006150 <decodeSchedControlInvocation+0x38>
    0x84006132     0x1a    li a5,3
    0x84006134     0x1c    auipc a4,0x7
    0x84006138     0x20    sd a5,-1268(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400613c     0x24    li a0,3
    0x8400613e     0x26    ld ra,72(sp)          ; stack access
    0x84006140     0x28    ld s0,64(sp)          ; stack access
    0x84006142     0x2a    ld s1,56(sp)          ; stack access
    0x84006144     0x2c    ld s2,48(sp)          ; stack access
    0x84006146     0x2e    ld s3,40(sp)          ; stack access
    0x84006148     0x30    ld s4,32(sp)          ; stack access
    0x8400614a     0x32    ld s5,24(sp)          ; stack access
    0x8400614c     0x34    addi sp,sp,80
    0x8400614e     0x36    ret
    0x84006150     0x38    auipc a4,0x7
    0x84006154     0x3c    ld a4,-192(a4) # ffffffff8400d090 <current_extra_caps>
    0x84006158     0x40    beqz a4,ffffffff84006264 <decodeSchedControlInvocation+0x14c>
    0x8400615c     0x44    li a5,3
    0x8400615e     0x46    bgeu a5,a3,ffffffff84006272 <decodeSchedControlInvocation+0x15a>
    0x84006162     0x4a    ld a5,0(a4)
    0x84006164     0x4c    srli a5,a5,0x3b
    0x84006166     0x4e    li a3,22
    0x84006168     0x50    bne a5,a3,ffffffff84006280 <decodeSchedControlInvocation+0x168>
    0x8400616c     0x54    auipc a0,0x19
    0x84006170     0x58    ld a0,-276(a0) # ffffffff8401f058 <ksCurThread>
    0x84006174     0x5c    ld s0,88(a0)
    0x84006176     0x5e    addi a3,s0,-20
    0x8400617a     0x62    lui a5,0x6b49d
    0x8400617e     0x66    slli a5,a5,0x1
    0x84006180     0x68    addi a5,a5,1004 # 6b49d3ec <KERNEL_OFFSET-0xfffffffe94b62c14>
    0x84006184     0x6c    bltu a5,a3,ffffffff84006298 <decodeSchedControlInvocation+0x180>
    0x84006188     0x70    ld s2,96(a0)
    0x8400618c     0x74    addi a3,s2,-20
    0x84006190     0x78    lui a5,0x6b49d
    0x84006194     0x7c    slli a5,a5,0x1
    0x84006196     0x7e    addi a5,a5,1004 # 6b49d3ec <KERNEL_OFFSET-0xfffffffe94b62c14>
    0x8400619a     0x82    bltu a5,a3,ffffffff840062be <decodeSchedControlInvocation+0x1a6>
    0x8400619e     0x86    bltu s2,s0,ffffffff840062e4 <decodeSchedControlInvocation+0x1cc>
    0x840061a2     0x8a    ld s1,8(a4)
    0x840061a4     0x8c    ld s3,104(a0)
    0x840061a8     0x90    addi s3,s3,2
    0x840061aa     0x92    srli a4,s1,0xa
    0x840061ae     0x96    li a5,1
    0x840061b0     0x98    sll a5,a5,a4
    0x840061b4     0x9c    addi a5,a5,-88
    0x840061b8     0xa0    srli a5,a5,0x4
    0x840061ba     0xa2    bltu a5,s3,ffffffff84006300 <decodeSchedControlInvocation+0x1e8>
    0x840061be     0xa6    ld s5,112(a0)
    0x840061c2     0xaa    li a1,2
    0x840061c4     0xac    jal ra,ffffffff84004a52 <setThreadState>
    0x840061c8     0xb0    srli s1,s1,0x10
    0x840061ca     0xb2    slli s4,s1,0x19
    0x840061ce     0xb6    srli s4,s4,0x19
    0x840061d2     0xba    srli s1,s1,0x26
    0x840061d4     0xbc    andi s1,s1,1
    0x840061d6     0xbe    beqz s1,ffffffff840061e0 <decodeSchedControlInvocation+0xc8>
    0x840061d8     0xc0    li a5,-1
    0x840061da     0xc2    slli a5,a5,0x27
    0x840061dc     0xc4    or s4,s4,a5
    0x840061e0     0xc8    mv s1,s4
    0x840061e2     0xca    sd s5,48(s4)
    0x840061e6     0xce    ld a0,24(s4)
    0x840061ea     0xd2    beqz a0,ffffffff84006204 <decodeSchedControlInvocation+0xec>
    0x840061ec     0xd4    jal ra,ffffffff84005724 <tcbReleaseRemove>
    0x840061f0     0xd8    ld a0,24(s4)
    0x840061f4     0xdc    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x840061f8     0xe0    auipc a5,0x19
    0x840061fc     0xe4    ld a5,-464(a5) # ffffffff8401f028 <ksCurSC>
    0x84006200     0xe8    beq s4,a5,ffffffff8400631c <decodeSchedControlInvocation+0x204>
    0x84006204     0xec    beq s2,s0,ffffffff84006392 <decodeSchedControlInvocation+0x27a>
    0x84006208     0xf0    ld a5,64(s1)
    0x8400620a     0xf2    beqz a5,ffffffff8400621e <decodeSchedControlInvocation+0x106>
    0x8400620c     0xf4    ld a5,24(s1)
    0x8400620e     0xf6    beqz a5,ffffffff8400621e <decodeSchedControlInvocation+0x106>
    0x84006210     0xf8    ld a5,280(a5)
    0x84006214     0xfc    andi a5,a5,15
    0x84006216     0xfe    addi a5,a5,-1
    0x84006218    0x100    li a4,1
    0x8400621a    0x102    bgeu a4,a5,ffffffff84006398 <decodeSchedControlInvocation+0x280>
    0x8400621e    0x106    mv a3,s2
    0x84006220    0x108    mv a2,s0
    0x84006222    0x10a    mv a1,s3
    0x84006224    0x10c    mv a0,s1
    0x84006226    0x10e    jal ra,ffffffff840035ec <refill_new>
    0x8400622a    0x112    ld a5,24(s1)
    0x8400622c    0x114    li a0,0
    0x8400622e    0x116    beqz a5,ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x84006230    0x118    ld a0,64(s1)
    0x84006232    0x11a    beqz a0,ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x84006236    0x11e    mv a0,s1
    0x84006238    0x120    jal ra,ffffffff84005c9a <schedContext_resume>
    0x8400623c    0x124    ld a0,24(s1)
    0x8400623e    0x126    ld a5,280(a0)
    0x84006242    0x12a    andi a5,a5,15
    0x84006244    0x12c    addi a5,a5,-1
    0x84006246    0x12e    li a4,1
    0x84006248    0x130    bgeu a4,a5,ffffffff840063a6 <decodeSchedControlInvocation+0x28e>
    0x8400624c    0x134    ld a4,24(s1)
    0x8400624e    0x136    auipc a5,0x19
    0x84006252    0x13a    ld a5,-502(a5) # ffffffff8401f058 <ksCurThread>
    0x84006256    0x13e    li a0,0
    0x84006258    0x140    bne a4,a5,ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x8400625c    0x144    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84006260    0x148    li a0,0
    0x84006262    0x14a    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x84006264    0x14c    li a5,7
    0x84006266    0x14e    auipc a4,0x7
    0x8400626a    0x152    sd a5,-1574(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400626e    0x156    li a0,3
    0x84006270    0x158    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x84006272    0x15a    li a5,7
    0x84006274    0x15c    auipc a4,0x7
    0x84006278    0x160    sd a5,-1588(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400627c    0x164    li a0,3
    0x8400627e    0x166    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x84006280    0x168    auipc a5,0x6
    0x84006284    0x16c    addi a5,a5,1408 # ffffffff8400c800 <riscvKSASIDTable>
    0x84006288    0x170    li a4,2
    0x8400628a    0x172    sd a4,1088(a5)
    0x8400628e    0x176    li a4,1
    0x84006290    0x178    sd a4,1048(a5)
    0x84006294    0x17c    li a0,3
    0x84006296    0x17e    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x84006298    0x180    auipc a4,0x6
    0x8400629c    0x184    addi a4,a4,1384 # ffffffff8400c800 <riscvKSASIDTable>
    0x840062a0    0x188    li a5,4
    0x840062a2    0x18a    sd a5,1088(a4)
    0x840062a6    0x18e    li a5,20
    0x840062a8    0x190    sd a5,1056(a4)
    0x840062ac    0x194    lui a5,0x6b49d
    0x840062b0    0x198    slli a5,a5,0x1
    0x840062b2    0x19a    addi a5,a5,1024 # 6b49d400 <KERNEL_OFFSET-0xfffffffe94b62c00>
    0x840062b6    0x19e    sd a5,1064(a4)
    0x840062ba    0x1a2    li a0,3
    0x840062bc    0x1a4    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x840062be    0x1a6    auipc a4,0x6
    0x840062c2    0x1aa    addi a4,a4,1346 # ffffffff8400c800 <riscvKSASIDTable>
    0x840062c6    0x1ae    li a5,4
    0x840062c8    0x1b0    sd a5,1088(a4)
    0x840062cc    0x1b4    li a5,20
    0x840062ce    0x1b6    sd a5,1056(a4)
    0x840062d2    0x1ba    lui a5,0x6b49d
    0x840062d6    0x1be    slli a5,a5,0x1
    0x840062d8    0x1c0    addi a5,a5,1024 # 6b49d400 <KERNEL_OFFSET-0xfffffffe94b62c00>
    0x840062dc    0x1c4    sd a5,1064(a4)
    0x840062e0    0x1c8    li a0,3
    0x840062e2    0x1ca    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x840062e4    0x1cc    auipc a5,0x6
    0x840062e8    0x1d0    addi a5,a5,1308 # ffffffff8400c800 <riscvKSASIDTable>
    0x840062ec    0x1d4    li a4,4
    0x840062ee    0x1d6    sd a4,1088(a5)
    0x840062f2    0x1da    li a4,20
    0x840062f4    0x1dc    sd a4,1056(a5)
    0x840062f8    0x1e0    sd s2,1064(a5)
    0x840062fc    0x1e4    li a0,3
    0x840062fe    0x1e6    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x84006300    0x1e8    auipc a4,0x6
    0x84006304    0x1ec    addi a4,a4,1280 # ffffffff8400c800 <riscvKSASIDTable>
    0x84006308    0x1f0    li a3,4
    0x8400630a    0x1f2    sd a3,1088(a4)
    0x8400630e    0x1f6    sd zero,1056(a4)
    0x84006312    0x1fa    addi a5,a5,-2
    0x84006314    0x1fc    sd a5,1064(a4)
    0x84006318    0x200    li a0,3
    0x8400631a    0x202    j ffffffff8400613e <decodeSchedControlInvocation+0x26>
    0x8400631c    0x204    ld a4,64(a5)
    0x8400631e    0x206    beqz a4,ffffffff84006360 <decodeSchedControlInvocation+0x248>
    0x84006320    0x208    auipc a0,0x19
    0x84006324    0x20c    ld a0,-736(a0) # ffffffff8401f040 <ksConsumed>
    0x84006328    0x210    beqz a0,ffffffff8400634a <decodeSchedControlInvocation+0x232>
    0x8400632a    0x212    ld a4,0(a5)
    0x8400632c    0x214    bnez a4,ffffffff8400638c <decodeSchedControlInvocation+0x274>
    0x8400632e    0x216    addi a2,a5,88
    0x84006332    0x21a    ld a4,72(a5)
    0x84006334    0x21c    slli a4,a4,0x4
    0x84006336    0x21e    add a4,a4,a2
    0x84006338    0x220    ld a3,8(a4)
    0x8400633a    0x222    sub a3,a3,a0
    0x8400633c    0x224    sd a3,8(a4)
    0x8400633e    0x226    ld a5,80(a5)
    0x84006340    0x228    slli a5,a5,0x4
    0x84006342    0x22a    add a5,a5,a2
    0x84006344    0x22c    ld a4,8(a5)
    0x84006346    0x22e    add a4,a4,a0
    0x84006348    0x230    sd a4,8(a5)
    0x8400634a    0x232    auipc a4,0x19
    0x8400634e    0x236    ld a4,-802(a4) # ffffffff8401f028 <ksCurSC>
    0x84006352    0x23a    ld a5,8(a4)
    0x84006354    0x23c    auipc a3,0x19
    0x84006358    0x240    ld a3,-788(a3) # ffffffff8401f040 <ksConsumed>
    0x8400635c    0x244    add a5,a5,a3
    0x8400635e    0x246    sd a5,8(a4)
    0x84006360    0x248    auipc a4,0x19
    0x84006364    0x24c    ld a4,-800(a4) # ffffffff8401f040 <ksConsumed>
    0x84006368    0x250    auipc a3,0x19
    0x8400636c    0x254    ld a3,-856(a3) # ffffffff8401f010 <ksDomainTime>
    0x84006370    0x258    li a5,0
    0x84006372    0x25a    bgeu a4,a3,ffffffff8400637a <decodeSchedControlInvocation+0x262>
    0x84006376    0x25e    sub a5,a3,a4
    0x8400637a    0x262    auipc a4,0x19
    0x8400637e    0x266    sd a5,-874(a4) # ffffffff8401f010 <ksDomainTime>
    0x84006382    0x26a    auipc a5,0x19
    0x84006386    0x26e    sd zero,-834(a5) # ffffffff8401f040 <ksConsumed>
    0x8400638a    0x272    j ffffffff84006204 <decodeSchedControlInvocation+0xec>
    0x8400638c    0x274    jal ra,ffffffff840036d2 <refill_split_check>
    0x84006390    0x278    j ffffffff8400634a <decodeSchedControlInvocation+0x232>
    0x84006392    0x27a    li s3,2
    0x84006394    0x27c    li s2,0
    0x84006396    0x27e    j ffffffff84006208 <decodeSchedControlInvocation+0xf0>
    0x84006398    0x280    mv a3,s3
    0x8400639a    0x282    mv a2,s0
    0x8400639c    0x284    mv a1,s2
    0x8400639e    0x286    mv a0,s1
    0x840063a0    0x288    jal ra,ffffffff84003638 <refill_update>
    0x840063a4    0x28c    j ffffffff8400622a <decodeSchedControlInvocation+0x112>
    0x840063a6    0x28e    auipc a5,0x19
    0x840063aa    0x292    ld a5,-846(a5) # ffffffff8401f058 <ksCurThread>
    0x840063ae    0x296    beq a0,a5,ffffffff8400625c <decodeSchedControlInvocation+0x144>
    0x840063b2    0x29a    jal ra,ffffffff84004cfa <possibleSwitchTo>
    0x840063b6    0x29e    j ffffffff8400624c <decodeSchedControlInvocation+0x134>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
231 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSchedControlInvocation` has 361 nodes.

Section handleSyscall (285 of 292)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 271 instructions.

Skipping c01026f3 rdtime a3
Switch found.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleSyscall`:

    0x8400adb0      0x0    addi sp,sp,-16
    0x8400adb2      0x2    sd ra,8(sp)           ; stack access
    0x8400adb4      0x4    sd s0,0(sp)           ; stack access
    0x8400adb6      0x6    auipc a5,0x14
    0x8400adba      0xa    addi a5,a5,634 # ffffffff8401f030 <ksCurTime>
    0x8400adbe      0xe    ld a2,0(a5)
    0x8400adc0     0x10    rdtime a3
    0x8400adc4     0x14    sd a3,0(a5)
    0x8400adc6     0x16    auipc a5,0x14
    0x8400adca     0x1a    addi a5,a5,634 # ffffffff8401f040 <ksConsumed>
    0x8400adce     0x1e    ld a4,0(a5)
    0x8400add0     0x20    sub a4,a4,a2
    0x8400add2     0x22    add a4,a4,a3
    0x8400add4     0x24    sd a4,0(a5)
    0x8400add6     0x26    auipc a3,0x14
    0x8400adda     0x2a    ld a3,594(a3) # ffffffff8401f028 <ksCurSC>
    0x8400adde     0x2e    ld a2,72(a3)
    0x8400ade0     0x30    slli a5,a2,0x4
    0x8400ade4     0x34    add a5,a5,a3
    0x8400ade6     0x36    ld a6,96(a5)
    0x8400adea     0x3a    bltu a6,a4,ffffffff8400ae3e <handleSyscall+0x8e>
    0x8400adee     0x3e    sub a5,a6,a4
    0x8400adf2     0x42    li a1,19
    0x8400adf4     0x44    bgeu a1,a5,ffffffff8400ae3e <handleSyscall+0x8e>
    0x8400adf8     0x48    ld a5,0(a3)
    0x8400adfa     0x4a    bnez a5,ffffffff8400ae28 <handleSyscall+0x78>
    0x8400adfc     0x4c    addi a5,a4,20
    0x8400ae00     0x50    auipc a2,0x14
    0x8400ae04     0x54    ld a2,528(a2) # ffffffff8401f010 <ksDomainTime>
    0x8400ae08     0x58    bltu a2,a5,ffffffff8400ae7a <handleSyscall+0xca>
    0x8400ae0c     0x5c    addi a5,a0,11
    0x8400ae10     0x60    li a2,10
    0x8400ae12     0x62    bltu a2,a5,ffffffff8400b0d8 <handleSyscall+0x328>
    0x8400ae16     0x66    slli a5,a5,0x2
    0x8400ae18     0x68    auipc a2,0x1
    0x8400ae1c     0x6c    addi a2,a2,124 # ffffffff8400be94 <msgRegisters+0x4ec>
    0x8400ae20     0x70    add a5,a5,a2
    0x8400ae22     0x72    lw a5,0(a5)
    0x8400ae24     0x74    add a5,a5,a2
    0x8400ae26     0x76    jr a5
    0x8400ae28     0x78    ld a5,80(a3)
    0x8400ae2a     0x7a    bgeu a5,a2,ffffffff8400ae72 <handleSyscall+0xc2>
    0x8400ae2e     0x7e    ld a1,64(a3)
    0x8400ae30     0x80    add a5,a5,a1
    0x8400ae32     0x82    addi a5,a5,1
    0x8400ae34     0x84    sub a2,a5,a2
    0x8400ae38     0x88    ld a5,64(a3)
    0x8400ae3a     0x8a    bne a5,a2,ffffffff8400adfc <handleSyscall+0x4c>
    0x8400ae3e     0x8e    li a3,1
    0x8400ae40     0x90    li a2,0
    0x8400ae42     0x92    li a1,1
    0x8400ae44     0x94    mv a0,a4
    0x8400ae46     0x96    jal ra,ffffffff84006f86 <chargeBudget>
    0x8400ae4a     0x9a    auipc a0,0x14
    0x8400ae4e     0x9e    ld a0,526(a0) # ffffffff8401f058 <ksCurThread>
    0x8400ae52     0xa2    ld a5,280(a0)
    0x8400ae56     0xa6    andi a5,a5,15
    0x8400ae58     0xa8    addi a5,a5,-1
    0x8400ae5a     0xaa    li a4,1
    0x8400ae5c     0xac    bgeu a4,a5,ffffffff8400ae8a <handleSyscall+0xda>
    0x8400ae60     0xb0    jal ra,ffffffff8400a7ce <schedule>
    0x8400ae64     0xb4    jal ra,ffffffff84004b44 <activateThread>
    0x8400ae68     0xb8    li a0,0
    0x8400ae6a     0xba    ld ra,8(sp)           ; stack access
    0x8400ae6c     0xbc    ld s0,0(sp)           ; stack access
    0x8400ae6e     0xbe    addi sp,sp,16
    0x8400ae70     0xc0    ret
    0x8400ae72     0xc2    addi a5,a5,1
    0x8400ae74     0xc4    sub a2,a5,a2
    0x8400ae78     0xc8    j ffffffff8400ae38 <handleSyscall+0x88>
    0x8400ae7a     0xca    li a5,1
    0x8400ae7c     0xcc    auipc a4,0x14
    0x8400ae80     0xd0    sd a5,444(a4) # ffffffff8401f038 <ksReprogram>
    0x8400ae84     0xd4    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x8400ae88     0xd8    j ffffffff8400ae4a <handleSyscall+0x9a>
    0x8400ae8a     0xda    li a1,2
    0x8400ae8c     0xdc    jal ra,ffffffff84004a52 <setThreadState>
    0x8400ae90     0xe0    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400ae92     0xe2    auipc a5,0x14
    0x8400ae96     0xe6    ld a5,454(a5) # ffffffff8401f058 <ksCurThread>
    0x8400ae9a     0xea    ld a4,72(a5)
    0x8400ae9c     0xec    li a3,0
    0x8400ae9e     0xee    li a2,0
    0x8400aea0     0xf0    li a1,1
    0x8400aea2     0xf2    li a0,0
    0x8400aea4     0xf4    jal ra,ffffffff8400a41c <handleInvocation>
    0x8400aea8     0xf8    beqz a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400aeaa     0xfa    auipc a5,0x14
    0x8400aeae     0xfe    lw a5,454(a5) # ffffffff8401f070 <active_irq>
    0x8400aeb2    0x102    addiw a3,a5,-1
    0x8400aeb6    0x106    li a4,53
    0x8400aeba    0x10a    bltu a4,a3,ffffffff8400aed2 <handleSyscall+0x122>
    0x8400aebe    0x10e    slli s0,a5,0x20
    0x8400aec2    0x112    srli s0,s0,0x20
    0x8400aec4    0x114    mv a0,s0
    0x8400aec6    0x116    jal ra,ffffffff8400702a <mcsIRQ>
    0x8400aeca    0x11a    mv a0,s0
    0x8400aecc    0x11c    jal ra,ffffffff84006798 <handleInterrupt>
    0x8400aed0    0x120    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400aed2    0x122    jal ra,ffffffff840021e2 <getNewActiveIRQ>
    0x8400aed6    0x126    sext.w a5,a0
    0x8400aeda    0x12a    auipc a4,0x14
    0x8400aede    0x12e    sw a0,406(a4) # ffffffff8401f070 <active_irq>
    0x8400aee2    0x132    addiw a0,a0,-1
    0x8400aee4    0x134    li a4,53
    0x8400aee8    0x138    bltu a4,a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400aeec    0x13c    j ffffffff8400aebe <handleSyscall+0x10e>
    0x8400aeee    0x13e    auipc a5,0x14
    0x8400aef2    0x142    ld a5,362(a5) # ffffffff8401f058 <ksCurThread>
    0x8400aef6    0x146    ld a4,72(a5)
    0x8400aef8    0x148    li a3,0
    0x8400aefa    0x14a    li a2,0
    0x8400aefc    0x14c    li a1,0
    0x8400aefe    0x14e    li a0,0
    0x8400af00    0x150    jal ra,ffffffff8400a41c <handleInvocation>
    0x8400af04    0x154    beqz a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400af06    0x156    auipc a5,0x14
    0x8400af0a    0x15a    lw a5,362(a5) # ffffffff8401f070 <active_irq>
    0x8400af0e    0x15e    addiw a3,a5,-1
    0x8400af12    0x162    li a4,53
    0x8400af16    0x166    bltu a4,a3,ffffffff8400af2e <handleSyscall+0x17e>
    0x8400af1a    0x16a    slli s0,a5,0x20
    0x8400af1e    0x16e    srli s0,s0,0x20
    0x8400af20    0x170    mv a0,s0
    0x8400af22    0x172    jal ra,ffffffff8400702a <mcsIRQ>
    0x8400af26    0x176    mv a0,s0
    0x8400af28    0x178    jal ra,ffffffff84006798 <handleInterrupt>
    0x8400af2c    0x17c    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400af2e    0x17e    jal ra,ffffffff840021e2 <getNewActiveIRQ>
    0x8400af32    0x182    sext.w a5,a0
    0x8400af36    0x186    auipc a4,0x14
    0x8400af3a    0x18a    sw a0,314(a4) # ffffffff8401f070 <active_irq>
    0x8400af3e    0x18e    addiw a0,a0,-1
    0x8400af40    0x190    li a4,53
    0x8400af44    0x194    bltu a4,a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400af48    0x198    j ffffffff8400af1a <handleSyscall+0x16a>
    0x8400af4a    0x19a    auipc a5,0x14
    0x8400af4e    0x19e    ld a5,270(a5) # ffffffff8401f058 <ksCurThread>
    0x8400af52    0x1a2    ld a4,72(a5)
    0x8400af54    0x1a4    li a3,0
    0x8400af56    0x1a6    li a2,1
    0x8400af58    0x1a8    li a1,1
    0x8400af5a    0x1aa    li a0,1
    0x8400af5c    0x1ac    jal ra,ffffffff8400a41c <handleInvocation>
    0x8400af60    0x1b0    beqz a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400af64    0x1b4    auipc a5,0x14
    0x8400af68    0x1b8    lw a5,268(a5) # ffffffff8401f070 <active_irq>
    0x8400af6c    0x1bc    addiw a3,a5,-1
    0x8400af70    0x1c0    li a4,53
    0x8400af74    0x1c4    bltu a4,a3,ffffffff8400af8c <handleSyscall+0x1dc>
    0x8400af78    0x1c8    slli s0,a5,0x20
    0x8400af7c    0x1cc    srli s0,s0,0x20
    0x8400af7e    0x1ce    mv a0,s0
    0x8400af80    0x1d0    jal ra,ffffffff8400702a <mcsIRQ>
    0x8400af84    0x1d4    mv a0,s0
    0x8400af86    0x1d6    jal ra,ffffffff84006798 <handleInterrupt>
    0x8400af8a    0x1da    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400af8c    0x1dc    jal ra,ffffffff840021e2 <getNewActiveIRQ>
    0x8400af90    0x1e0    sext.w a5,a0
    0x8400af94    0x1e4    auipc a4,0x14
    0x8400af98    0x1e8    sw a0,220(a4) # ffffffff8401f070 <active_irq>
    0x8400af9c    0x1ec    addiw a0,a0,-1
    0x8400af9e    0x1ee    li a4,53
    0x8400afa2    0x1f2    bltu a4,a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400afa6    0x1f6    j ffffffff8400af78 <handleSyscall+0x1c8>
    0x8400afa8    0x1f8    li a1,1
    0x8400afaa    0x1fa    li a0,1
    0x8400afac    0x1fc    jal ra,ffffffff84007c52 <handleRecv>
    0x8400afb0    0x200    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400afb2    0x202    li a1,0
    0x8400afb4    0x204    li a0,1
    0x8400afb6    0x206    jal ra,ffffffff84007c52 <handleRecv>
    0x8400afba    0x20a    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400afbc    0x20c    li a1,0
    0x8400afbe    0x20e    li a0,0
    0x8400afc0    0x210    jal ra,ffffffff84007c52 <handleRecv>
    0x8400afc4    0x214    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400afc6    0x216    auipc a5,0x14
    0x8400afca    0x21a    ld a5,146(a5) # ffffffff8401f058 <ksCurThread>
    0x8400afce    0x21e    ld a4,120(a5)
    0x8400afd0    0x220    li a3,1
    0x8400afd2    0x222    li a2,1
    0x8400afd4    0x224    li a1,0
    0x8400afd6    0x226    li a0,0
    0x8400afd8    0x228    jal ra,ffffffff8400a41c <handleInvocation>
    0x8400afdc    0x22c    li a1,1
    0x8400afde    0x22e    li a0,1
    0x8400afe0    0x230    jal ra,ffffffff84007c52 <handleRecv>
    0x8400afe4    0x234    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400afe6    0x236    auipc a5,0x14
    0x8400afea    0x23a    ld a5,114(a5) # ffffffff8401f058 <ksCurThread>
    0x8400afee    0x23e    ld a4,32(a5)
    0x8400aff0    0x240    li a3,1
    0x8400aff2    0x242    li a2,1
    0x8400aff4    0x244    li a1,0
    0x8400aff6    0x246    li a0,0
    0x8400aff8    0x248    jal ra,ffffffff8400a41c <handleInvocation>
    0x8400affc    0x24c    bnez a0,ffffffff8400b008 <handleSyscall+0x258>
    0x8400affe    0x24e    li a1,1
    0x8400b000    0x250    li a0,1
    0x8400b002    0x252    jal ra,ffffffff84007c52 <handleRecv>
    0x8400b006    0x256    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b008    0x258    auipc a5,0x14
    0x8400b00c    0x25c    lw a5,104(a5) # ffffffff8401f070 <active_irq>
    0x8400b010    0x260    addiw a3,a5,-1
    0x8400b014    0x264    li a4,53
    0x8400b018    0x268    bltu a4,a3,ffffffff8400b030 <handleSyscall+0x280>
    0x8400b01c    0x26c    slli s0,a5,0x20
    0x8400b020    0x270    srli s0,s0,0x20
    0x8400b022    0x272    mv a0,s0
    0x8400b024    0x274    jal ra,ffffffff8400702a <mcsIRQ>
    0x8400b028    0x278    mv a0,s0
    0x8400b02a    0x27a    jal ra,ffffffff84006798 <handleInterrupt>
    0x8400b02e    0x27e    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b030    0x280    jal ra,ffffffff840021e2 <getNewActiveIRQ>
    0x8400b034    0x284    sext.w a5,a0
    0x8400b038    0x288    auipc a4,0x14
    0x8400b03c    0x28c    sw a0,56(a4) # ffffffff8401f070 <active_irq>
    0x8400b040    0x290    addiw a0,a0,-1
    0x8400b042    0x292    li a4,53
    0x8400b046    0x296    bltu a4,a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b04a    0x29a    j ffffffff8400b01c <handleSyscall+0x26c>
    0x8400b04c    0x29c    auipc a5,0x14
    0x8400b050    0x2a0    ld a5,12(a5) # ffffffff8401f058 <ksCurThread>
    0x8400b054    0x2a4    ld a4,120(a5)
    0x8400b056    0x2a6    li a3,1
    0x8400b058    0x2a8    li a2,1
    0x8400b05a    0x2aa    li a1,0
    0x8400b05c    0x2ac    li a0,0
    0x8400b05e    0x2ae    jal ra,ffffffff8400a41c <handleInvocation>
    0x8400b062    0x2b2    bnez a0,ffffffff8400b06e <handleSyscall+0x2be>
    0x8400b064    0x2b4    li a1,0
    0x8400b066    0x2b6    li a0,1
    0x8400b068    0x2b8    jal ra,ffffffff84007c52 <handleRecv>
    0x8400b06c    0x2bc    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b06e    0x2be    auipc a5,0x14
    0x8400b072    0x2c2    lw a5,2(a5) # ffffffff8401f070 <active_irq>
    0x8400b076    0x2c6    addiw a3,a5,-1
    0x8400b07a    0x2ca    li a4,53
    0x8400b07e    0x2ce    bltu a4,a3,ffffffff8400b096 <handleSyscall+0x2e6>
    0x8400b082    0x2d2    slli s0,a5,0x20
    0x8400b086    0x2d6    srli s0,s0,0x20
    0x8400b088    0x2d8    mv a0,s0
    0x8400b08a    0x2da    jal ra,ffffffff8400702a <mcsIRQ>
    0x8400b08e    0x2de    mv a0,s0
    0x8400b090    0x2e0    jal ra,ffffffff84006798 <handleInterrupt>
    0x8400b094    0x2e4    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b096    0x2e6    jal ra,ffffffff840021e2 <getNewActiveIRQ>
    0x8400b09a    0x2ea    sext.w a5,a0
    0x8400b09e    0x2ee    auipc a4,0x14
    0x8400b0a2    0x2f2    sw a0,-46(a4) # ffffffff8401f070 <active_irq>
    0x8400b0a6    0x2f6    addiw a0,a0,-1
    0x8400b0a8    0x2f8    li a4,53
    0x8400b0ac    0x2fc    bltu a4,a0,ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b0b0    0x300    j ffffffff8400b082 <handleSyscall+0x2d2>
    0x8400b0b2    0x302    li a1,1
    0x8400b0b4    0x304    li a0,0
    0x8400b0b6    0x306    jal ra,ffffffff84007c52 <handleRecv>
    0x8400b0ba    0x30a    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b0bc    0x30c    ld s0,8(a3)
    0x8400b0be    0x30e    add s0,s0,a4
    0x8400b0c0    0x310    li a3,1
    0x8400b0c2    0x312    li a2,0
    0x8400b0c4    0x314    li a1,0
    0x8400b0c6    0x316    mv a0,a6
    0x8400b0c8    0x318    jal ra,ffffffff84006f86 <chargeBudget>
    0x8400b0cc    0x31c    auipc a5,0x14
    0x8400b0d0    0x320    ld a5,-164(a5) # ffffffff8401f028 <ksCurSC>
    0x8400b0d4    0x324    sd s0,8(a5)
    0x8400b0d6    0x326    j ffffffff8400ae60 <handleSyscall+0xb0>
    0x8400b0d8    0x328    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
265 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 423 nodes.

Section decodeSchedContextInvocation (286 of 292)
=================================================

Deriving specifications
-----------------------

Section `decodeSchedContextInvocation` consists of 320 instructions.
Switch found.


Stack analysis
---------------

8 stack accesses found. Annotated code for `decodeSchedContextInvocation`:

    0x84005d94      0x0    addi sp,sp,-48
    0x84005d96      0x2    sd ra,40(sp)          ; stack access
    0x84005d98      0x4    sd s0,32(sp)          ; stack access
    0x84005d9a      0x6    sd s1,24(sp)          ; stack access
    0x84005d9c      0x8    sd a1,0(sp)           ; stack access
    0x84005d9e      0xa    sd a2,8(sp)           ; stack access
    0x84005da0      0xc    srli a2,a2,0x10
    0x84005da2      0xe    slli a5,a2,0x19
    0x84005da6     0x12    srli a5,a5,0x19
    0x84005da8     0x14    srli a2,a2,0x26
    0x84005daa     0x16    andi a2,a2,1
    0x84005dac     0x18    beqz a2,ffffffff84005db4 <decodeSchedContextInvocation+0x20>
    0x84005dae     0x1a    li a4,-1
    0x84005db0     0x1c    slli a4,a4,0x27
    0x84005db2     0x1e    or a5,a5,a4
    0x84005db4     0x20    mv s0,a5
    0x84005db6     0x22    addi a5,a0,-31
    0x84005dba     0x26    li a4,4
    0x84005dbc     0x28    bltu a4,a5,ffffffff840060bc <decodeSchedContextInvocation+0x328>
    0x84005dc0     0x2c    slli a5,a5,0x2
    0x84005dc2     0x2e    auipc a4,0x6
    0x84005dc6     0x32    addi a4,a4,-114 # ffffffff8400bd50 <msgRegisters+0x3a8>
    0x84005dca     0x36    add a5,a5,a4
    0x84005dcc     0x38    lw a5,0(a5)
    0x84005dce     0x3a    add a5,a5,a4
    0x84005dd0     0x3c    jr a5
    0x84005dd2     0x3e    auipc s1,0x19
    0x84005dd6     0x42    addi s1,s1,646 # ffffffff8401f058 <ksCurThread>
    0x84005dda     0x46    li a1,2
    0x84005ddc     0x48    ld a0,0(s1)
    0x84005dde     0x4a    jal ra,ffffffff84004a52 <setThreadState>
    0x84005de2     0x4e    mv a0,s0
    0x84005de4     0x50    jal ra,ffffffff840047c0 <schedContext_updateConsumed>
    0x84005de8     0x54    ld a5,0(s1)
    0x84005dea     0x56    sd a0,88(a5)
    0x84005dec     0x58    li a4,1
    0x84005dee     0x5a    sd a4,80(a5)
    0x84005df0     0x5c    li s1,0
    0x84005df2     0x5e    mv a0,s1
    0x84005df4     0x60    ld ra,40(sp)          ; stack access
    0x84005df6     0x62    ld s0,32(sp)          ; stack access
    0x84005df8     0x64    ld s1,24(sp)          ; stack access
    0x84005dfa     0x66    addi sp,sp,48
    0x84005dfc     0x68    ret
    0x84005dfe     0x6a    auipc a5,0x7
    0x84005e02     0x6e    ld a5,658(a5) # ffffffff8400d090 <current_extra_caps>
    0x84005e06     0x72    beqz a5,ffffffff84005e5c <decodeSchedContextInvocation+0xc8>
    0x84005e08     0x74    ld a4,24(s0)
    0x84005e0a     0x76    bnez a4,ffffffff84005e6a <decodeSchedContextInvocation+0xd6>
    0x84005e0c     0x78    ld a4,40(s0)
    0x84005e0e     0x7a    bnez a4,ffffffff84005e6a <decodeSchedContextInvocation+0xd6>
    0x84005e10     0x7c    ld a5,0(a5)
    0x84005e12     0x7e    srli a4,a5,0x3b
    0x84005e16     0x82    li a3,6
    0x84005e18     0x84    beq a4,a3,ffffffff84005e86 <decodeSchedContextInvocation+0xf2>
    0x84005e1c     0x88    li a3,12
    0x84005e1e     0x8a    bne a4,a3,ffffffff84005eb4 <decodeSchedContextInvocation+0x120>
    0x84005e22     0x8e    slli s1,a5,0x19
    0x84005e26     0x92    srli s1,s1,0x19
    0x84005e28     0x94    srli a5,a5,0x26
    0x84005e2a     0x96    andi a5,a5,1
    0x84005e2c     0x98    beqz a5,ffffffff840060ca <decodeSchedContextInvocation+0x336>
    0x84005e30     0x9c    li a5,-1
    0x84005e32     0x9e    slli a5,a5,0x27
    0x84005e34     0xa0    or a5,a5,s1
    0x84005e36     0xa2    ld a5,368(a5)
    0x84005e3a     0xa6    bnez a5,ffffffff84005e78 <decodeSchedContextInvocation+0xe4>
    0x84005e3c     0xa8    li a1,2
    0x84005e3e     0xaa    auipc a0,0x19
    0x84005e42     0xae    ld a0,538(a0) # ffffffff8401f058 <ksCurThread>
    0x84005e46     0xb2    jal ra,ffffffff84004a52 <setThreadState>
    0x84005e4a     0xb6    li a5,-1
    0x84005e4c     0xb8    slli a5,a5,0x27
    0x84005e4e     0xba    or s1,s1,a5
    0x84005e50     0xbc    mv a1,s1
    0x84005e52     0xbe    mv a0,s0
    0x84005e54     0xc0    jal ra,ffffffff84005d4e <schedContext_bindTCB>
    0x84005e58     0xc4    li s1,0
    0x84005e5a     0xc6    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005e5c     0xc8    li a5,7
    0x84005e5e     0xca    auipc a4,0x7
    0x84005e62     0xce    sd a5,-542(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005e66     0xd2    li s1,3
    0x84005e68     0xd4    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005e6a     0xd6    li a5,3
    0x84005e6c     0xd8    auipc a4,0x7
    0x84005e70     0xdc    sd a5,-556(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005e74     0xe0    li s1,3
    0x84005e76     0xe2    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005e78     0xe4    li a5,3
    0x84005e7a     0xe6    auipc a4,0x7
    0x84005e7e     0xea    sd a5,-570(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005e82     0xee    li s1,3
    0x84005e84     0xf0    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005e86     0xf2    slli s1,a5,0x19
    0x84005e8a     0xf6    srli s1,s1,0x19
    0x84005e8c     0xf8    srli a5,a5,0x26
    0x84005e8e     0xfa    andi a5,a5,1
    0x84005e90     0xfc    beqz a5,ffffffff84006100 <decodeSchedContextInvocation+0x36c>
    0x84005e94    0x100    li a5,-1
    0x84005e96    0x102    slli a4,a5,0x27
    0x84005e9a    0x106    or a4,a4,s1
    0x84005e9c    0x108    ld a4,32(a4)
    0x84005e9e    0x10a    srli a5,a5,0x19
    0x84005ea0    0x10c    and a5,a5,a4
    0x84005ea2    0x10e    beqz a5,ffffffff840060e2 <decodeSchedContextInvocation+0x34e>
    0x84005ea6    0x112    li a5,3
    0x84005ea8    0x114    auipc a4,0x7
    0x84005eac    0x118    sd a5,-616(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005eb0    0x11c    li s1,3
    0x84005eb2    0x11e    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005eb4    0x120    auipc a5,0x7
    0x84005eb8    0x124    addi a5,a5,-1716 # ffffffff8400c800 <riscvKSASIDTable>
    0x84005ebc    0x128    li a4,2
    0x84005ebe    0x12a    sd a4,1088(a5)
    0x84005ec2    0x12e    li a4,1
    0x84005ec4    0x130    sd a4,1048(a5)
    0x84005ec8    0x134    li s1,3
    0x84005eca    0x136    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005ecc    0x138    auipc a5,0x7
    0x84005ed0    0x13c    ld a5,452(a5) # ffffffff8400d090 <current_extra_caps>
    0x84005ed4    0x140    beqz a5,ffffffff84005f1c <decodeSchedContextInvocation+0x188>
    0x84005ed6    0x142    ld a5,0(a5)
    0x84005ed8    0x144    srli a4,a5,0x3b
    0x84005edc    0x148    li a3,6
    0x84005ede    0x14a    beq a4,a3,ffffffff84005f46 <decodeSchedContextInvocation+0x1b2>
    0x84005ee2    0x14e    li a3,12
    0x84005ee4    0x150    bne a4,a3,ffffffff84005f84 <decodeSchedContextInvocation+0x1f0>
    0x84005ee8    0x154    ld a3,24(s0)
    0x84005eea    0x156    slli a4,a5,0x19
    0x84005eee    0x15a    srli a4,a4,0x19
    0x84005ef0    0x15c    srli a5,a5,0x26
    0x84005ef2    0x15e    andi a5,a5,1
    0x84005ef4    0x160    beqz a5,ffffffff84005efc <decodeSchedContextInvocation+0x168>
    0x84005ef6    0x162    li a5,-1
    0x84005ef8    0x164    slli a5,a5,0x27
    0x84005efa    0x166    or a4,a4,a5
    0x84005efc    0x168    bne a3,a4,ffffffff84005f2a <decodeSchedContextInvocation+0x196>
    0x84005f00    0x16c    auipc a0,0x19
    0x84005f04    0x170    ld a0,344(a0) # ffffffff8401f058 <ksCurThread>
    0x84005f08    0x174    beq a3,a0,ffffffff84005f38 <decodeSchedContextInvocation+0x1a4>
    0x84005f0c    0x178    li a1,2
    0x84005f0e    0x17a    jal ra,ffffffff84004a52 <setThreadState>
    0x84005f12    0x17e    ld a1,24(s0)
    0x84005f14    0x180    mv a0,s0
    0x84005f16    0x182    jal ra,ffffffff840057b8 <schedContext_unbindTCB>
    0x84005f1a    0x186    j ffffffff84005f72 <decodeSchedContextInvocation+0x1de>
    0x84005f1c    0x188    li a5,7
    0x84005f1e    0x18a    auipc a4,0x7
    0x84005f22    0x18e    sd a5,-734(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005f26    0x192    li s1,3
    0x84005f28    0x194    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005f2a    0x196    li a5,3
    0x84005f2c    0x198    auipc a4,0x7
    0x84005f30    0x19c    sd a5,-748(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005f34    0x1a0    li s1,3
    0x84005f36    0x1a2    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005f38    0x1a4    li a5,3
    0x84005f3a    0x1a6    auipc a4,0x7
    0x84005f3e    0x1aa    sd a5,-762(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005f42    0x1ae    li s1,3
    0x84005f44    0x1b0    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005f46    0x1b2    ld a3,40(s0)
    0x84005f48    0x1b4    slli a4,a5,0x19
    0x84005f4c    0x1b8    srli a4,a4,0x19
    0x84005f4e    0x1ba    srli a5,a5,0x26
    0x84005f50    0x1bc    andi a5,a5,1
    0x84005f52    0x1be    beqz a5,ffffffff84005f5a <decodeSchedContextInvocation+0x1c6>
    0x84005f54    0x1c0    li a5,-1
    0x84005f56    0x1c2    slli a5,a5,0x27
    0x84005f58    0x1c4    or a4,a4,a5
    0x84005f5a    0x1c6    bne a3,a4,ffffffff84005f76 <decodeSchedContextInvocation+0x1e2>
    0x84005f5e    0x1ca    li a1,2
    0x84005f60    0x1cc    auipc a0,0x19
    0x84005f64    0x1d0    ld a0,248(a0) # ffffffff8401f058 <ksCurThread>
    0x84005f68    0x1d4    jal ra,ffffffff84004a52 <setThreadState>
    0x84005f6c    0x1d8    mv a0,s0
    0x84005f6e    0x1da    jal ra,ffffffff840047ac <schedContext_unbindNtfn>
    0x84005f72    0x1de    li s1,0
    0x84005f74    0x1e0    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005f76    0x1e2    li a5,3
    0x84005f78    0x1e4    auipc a4,0x7
    0x84005f7c    0x1e8    sd a5,-824(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005f80    0x1ec    li s1,3
    0x84005f82    0x1ee    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005f84    0x1f0    auipc a5,0x7
    0x84005f88    0x1f4    addi a5,a5,-1924 # ffffffff8400c800 <riscvKSASIDTable>
    0x84005f8c    0x1f8    li a4,2
    0x84005f8e    0x1fa    sd a4,1088(a5)
    0x84005f92    0x1fe    li a4,1
    0x84005f94    0x200    sd a4,1048(a5)
    0x84005f98    0x204    li s1,3
    0x84005f9a    0x206    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005f9c    0x208    auipc a0,0x19
    0x84005fa0    0x20c    ld a0,188(a0) # ffffffff8401f058 <ksCurThread>
    0x84005fa4    0x210    ld a5,24(s0)
    0x84005fa6    0x212    beq a5,a0,ffffffff84005fce <decodeSchedContextInvocation+0x23a>
    0x84005faa    0x216    li a1,2
    0x84005fac    0x218    jal ra,ffffffff84004a52 <setThreadState>
    0x84005fb0    0x21c    mv a0,s0
    0x84005fb2    0x21e    jal ra,ffffffff840057f0 <schedContext_unbindAllTCBs>
    0x84005fb6    0x222    mv a0,s0
    0x84005fb8    0x224    jal ra,ffffffff840047ac <schedContext_unbindNtfn>
    0x84005fbc    0x228    ld a5,32(s0)
    0x84005fbe    0x22a    li s1,0
    0x84005fc0    0x22c    beqz a5,ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005fc4    0x230    sd zero,16(a5)
    0x84005fc8    0x234    sd zero,32(s0)
    0x84005fcc    0x238    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005fce    0x23a    li a5,3
    0x84005fd0    0x23c    auipc a4,0x7
    0x84005fd4    0x240    sd a5,-912(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84005fd8    0x244    li s1,3
    0x84005fda    0x246    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84005fdc    0x248    ld a5,24(s0)
    0x84005fde    0x24a    auipc a0,0x19
    0x84005fe2    0x24e    ld a0,122(a0) # ffffffff8401f058 <ksCurThread>
    0x84005fe6    0x252    beq a5,a0,ffffffff84006034 <decodeSchedContextInvocation+0x2a0>
    0x84005fea    0x256    beqz a5,ffffffff84006042 <decodeSchedContextInvocation+0x2ae>
    0x84005fec    0x258    ld a4,360(a5)
    0x84005ff0    0x25c    ld a5,352(a0)
    0x84005ff4    0x260    bltu a5,a4,ffffffff84006050 <decodeSchedContextInvocation+0x2bc>
    0x84005ff8    0x264    li a1,2
    0x84005ffa    0x266    jal ra,ffffffff84004a52 <setThreadState>
    0x84005ffe    0x26a    ld a0,56(s0)
    0x84006000    0x26c    beqz a0,ffffffff84006006 <decodeSchedContextInvocation+0x272>
    0x84006002    0x26e    jal ra,ffffffff840048ea <schedContext_completeYieldTo>
    0x84006006    0x272    mv a0,s0
    0x84006008    0x274    jal ra,ffffffff84005c9a <schedContext_resume>
    0x8400600c    0x278    ld a4,24(s0)
    0x8400600e    0x27a    ld a5,280(a4)
    0x84006012    0x27e    andi a5,a5,15
    0x84006014    0x280    addi a5,a5,-1
    0x84006016    0x282    li a3,1
    0x84006018    0x284    bgeu a3,a5,ffffffff8400605e <decodeSchedContextInvocation+0x2ca>
    0x8400601c    0x288    mv a0,s0
    0x8400601e    0x28a    jal ra,ffffffff840047c0 <schedContext_updateConsumed>
    0x84006022    0x28e    auipc a5,0x19
    0x84006026    0x292    ld a5,54(a5) # ffffffff8401f058 <ksCurThread>
    0x8400602a    0x296    sd a0,88(a5)
    0x8400602c    0x298    li a4,1
    0x8400602e    0x29a    sd a4,80(a5)
    0x84006030    0x29c    li s1,0
    0x84006032    0x29e    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84006034    0x2a0    li a5,3
    0x84006036    0x2a2    auipc a4,0x7
    0x8400603a    0x2a6    sd a5,-1014(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400603e    0x2aa    li s1,3
    0x84006040    0x2ac    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84006042    0x2ae    li a5,3
    0x84006044    0x2b0    auipc a4,0x7
    0x84006048    0x2b4    sd a5,-1028(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400604c    0x2b8    li s1,3
    0x8400604e    0x2ba    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x84006050    0x2bc    li a5,3
    0x84006052    0x2be    auipc a4,0x7
    0x84006056    0x2c2    sd a5,-1042(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400605a    0x2c6    li s1,3
    0x8400605c    0x2c8    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x8400605e    0x2ca    ld a5,368(a4)
    0x84006062    0x2ce    beqz a5,ffffffff8400601c <decodeSchedContextInvocation+0x288>
    0x84006064    0x2d0    ld a5,64(a5)
    0x84006066    0x2d2    beqz a5,ffffffff8400601c <decodeSchedContextInvocation+0x288>
    0x84006068    0x2d4    ld s1,288(a4)
    0x8400606c    0x2d8    andi s1,s1,1
    0x8400606e    0x2da    bnez s1,ffffffff8400601c <decodeSchedContextInvocation+0x288>
    0x84006070    0x2dc    mv a0,s0
    0x84006072    0x2de    jal ra,ffffffff840039bc <refill_unblock_check>
    0x84006076    0x2e2    ld a0,24(s0)
    0x84006078    0x2e4    auipc a5,0x19
    0x8400607c    0x2e8    ld a5,-32(a5) # ffffffff8401f058 <ksCurThread>
    0x84006080    0x2ec    ld a3,360(a0)
    0x84006084    0x2f0    ld a4,360(a5)
    0x84006088    0x2f4    bgeu a3,a4,ffffffff84006098 <decodeSchedContextInvocation+0x304>
    0x8400608c    0x2f8    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x84006090    0x2fc    ld a0,24(s0)
    0x84006092    0x2fe    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x84006096    0x302    j ffffffff8400601c <decodeSchedContextInvocation+0x288>
    0x84006098    0x304    sd s0,376(a5)
    0x8400609c    0x308    sd a5,56(s0)
    0x8400609e    0x30a    ld a0,24(s0)
    0x840060a0    0x30c    jal ra,ffffffff84004efa <tcbSchedDequeue>
    0x840060a4    0x310    auipc a0,0x19
    0x840060a8    0x314    ld a0,-76(a0) # ffffffff8401f058 <ksCurThread>
    0x840060ac    0x318    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x840060b0    0x31c    ld a0,24(s0)
    0x840060b2    0x31e    jal ra,ffffffff8400491c <tcbSchedEnqueue>
    0x840060b6    0x322    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x840060ba    0x326    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x840060bc    0x328    li a5,3
    0x840060be    0x32a    auipc a4,0x7
    0x840060c2    0x32e    sd a5,-1150(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840060c6    0x332    li s1,3
    0x840060c8    0x334    j ffffffff84005df2 <decodeSchedContextInvocation+0x5e>
    0x840060ca    0x336    ld a5,368(s1)
    0x840060ce    0x33a    bnez a5,ffffffff84005e78 <decodeSchedContextInvocation+0xe4>
    0x840060d2    0x33e    li a1,2
    0x840060d4    0x340    auipc a0,0x19
    0x840060d8    0x344    ld a0,-124(a0) # ffffffff8401f058 <ksCurThread>
    0x840060dc    0x348    jal ra,ffffffff84004a52 <setThreadState>
    0x840060e0    0x34c    j ffffffff84005e50 <decodeSchedContextInvocation+0xbc>
    0x840060e2    0x34e    li a1,2
    0x840060e4    0x350    auipc a0,0x19
    0x840060e8    0x354    ld a0,-140(a0) # ffffffff8401f058 <ksCurThread>
    0x840060ec    0x358    jal ra,ffffffff84004a52 <setThreadState>
    0x840060f0    0x35c    li a5,-1
    0x840060f2    0x35e    slli a5,a5,0x27
    0x840060f4    0x360    or s1,s1,a5
    0x840060f6    0x362    mv a1,s1
    0x840060f8    0x364    mv a0,s0
    0x840060fa    0x366    jal ra,ffffffff84004796 <schedContext_bindNtfn>
    0x840060fe    0x36a    j ffffffff84005e58 <decodeSchedContextInvocation+0xc4>
    0x84006100    0x36c    ld a5,32(s1)
    0x84006102    0x36e    slli a5,a5,0x19
    0x84006104    0x370    bnez a5,ffffffff84005ea6 <decodeSchedContextInvocation+0x112>
    0x84006108    0x374    li a1,2
    0x8400610a    0x376    auipc a0,0x19
    0x8400610e    0x37a    ld a0,-178(a0) # ffffffff8401f058 <ksCurThread>
    0x84006112    0x37e    jal ra,ffffffff84004a52 <setThreadState>
    0x84006116    0x382    j ffffffff840060f6 <decodeSchedContextInvocation+0x362>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
314 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSchedContextInvocation` has 494 nodes.

Section decodeInvocation (287 of 292)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 216 instructions.
Switch found.


Stack analysis
---------------

38 stack accesses found. Annotated code for `decodeInvocation`:

    0x8400a1d6      0x0    addi sp,sp,-80
    0x8400a1d8      0x2    sd ra,72(sp)          ; stack access
    0x8400a1da      0x4    sd s0,64(sp)          ; stack access
    0x8400a1dc      0x6    sd s1,56(sp)          ; stack access
    0x8400a1de      0x8    sd s2,48(sp)          ; stack access
    0x8400a1e0      0xa    sd s3,40(sp)          ; stack access
    0x8400a1e2      0xc    sd s4,32(sp)          ; stack access
    0x8400a1e4      0xe    mv t3,a3
    0x8400a1e6     0x10    sd a4,0(sp)           ; stack access
    0x8400a1e8     0x12    sd a5,8(sp)           ; stack access
    0x8400a1ea     0x14    mv s1,a4
    0x8400a1ec     0x16    mv s3,a5
    0x8400a1ee     0x18    srli t1,a4,0x3b
    0x8400a1f2     0x1c    andi s0,t1,1
    0x8400a1f6     0x20    bnez s0,ffffffff8400a216 <decodeInvocation+0x40>
    0x8400a1f8     0x22    mv s4,a6
    0x8400a1fa     0x24    mv s2,a7
    0x8400a1fc     0x26    li a5,24
    0x8400a1fe     0x28    bltu a5,t1,ffffffff8400a418 <decodeInvocation+0x242>
    0x8400a202     0x2c    slli t1,t1,0x2
    0x8400a204     0x2e    auipc a4,0x2
    0x8400a208     0x32    addi a4,a4,-1044 # ffffffff8400bdf0 <msgRegisters+0x448>
    0x8400a20c     0x36    add t1,t1,a4
    0x8400a20e     0x38    lw a5,0(t1)
    0x8400a212     0x3c    add a5,a5,a4
    0x8400a214     0x3e    jr a5
    0x8400a216     0x40    ld a6,96(sp)          ; stack access
    0x8400a218     0x42    jal ra,ffffffff84009358 <decodeRISCVMMUInvocation>
    0x8400a21c     0x46    mv s0,a0
    0x8400a21e     0x48    mv a0,s0
    0x8400a220     0x4a    ld ra,72(sp)          ; stack access
    0x8400a222     0x4c    ld s0,64(sp)          ; stack access
    0x8400a224     0x4e    ld s1,56(sp)          ; stack access
    0x8400a226     0x50    ld s2,48(sp)          ; stack access
    0x8400a228     0x52    ld s3,40(sp)          ; stack access
    0x8400a22a     0x54    ld s4,32(sp)          ; stack access
    0x8400a22c     0x56    addi sp,sp,80
    0x8400a22e     0x58    ret
    0x8400a230     0x5a    auipc a5,0x2
    0x8400a234     0x5e    addi a5,a5,1488 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a238     0x62    li a4,2
    0x8400a23a     0x64    sd a4,1088(a5)
    0x8400a23e     0x68    sd zero,1048(a5)
    0x8400a242     0x6c    li s0,3
    0x8400a244     0x6e    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a246     0x70    auipc a5,0x2
    0x8400a24a     0x74    addi a5,a5,1466 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a24e     0x78    li a4,2
    0x8400a250     0x7a    sd a4,1088(a5)
    0x8400a254     0x7e    sd zero,1048(a5)
    0x8400a258     0x82    li s0,3
    0x8400a25a     0x84    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a25c     0x86    srli a5,s1,0x37
    0x8400a260     0x8a    andi a5,a5,1
    0x8400a262     0x8c    beqz a5,ffffffff8400a2a2 <decodeInvocation+0xcc>
    0x8400a264     0x8e    li a1,2
    0x8400a266     0x90    auipc a0,0x15
    0x8400a26a     0x94    ld a0,-526(a0) # ffffffff8401f058 <ksCurThread>
    0x8400a26e     0x98    jal ra,ffffffff84004a52 <setThreadState>
    0x8400a272     0x9c    slli a0,s1,0x19
    0x8400a276     0xa0    srli a0,a0,0x19
    0x8400a278     0xa2    srli a5,s1,0x26
    0x8400a27c     0xa6    andi a5,a5,1
    0x8400a27e     0xa8    beqz a5,ffffffff8400a286 <decodeInvocation+0xb0>
    0x8400a280     0xaa    li a5,-1
    0x8400a282     0xac    slli a5,a5,0x27
    0x8400a284     0xae    or a0,a0,a5
    0x8400a286     0xb0    srli a3,s1,0x3a
    0x8400a28a     0xb4    srli a2,s1,0x39
    0x8400a28e     0xb8    ld a6,80(sp)          ; stack access
    0x8400a290     0xba    mv a5,s2
    0x8400a292     0xbc    mv a4,s4
    0x8400a294     0xbe    andi a3,a3,1
    0x8400a296     0xc0    andi a2,a2,1
    0x8400a298     0xc2    mv a1,s3
    0x8400a29a     0xc4    jal ra,ffffffff840078ac <performInvocation_Endpoint>
    0x8400a29e     0xc8    mv s0,a0
    0x8400a2a0     0xca    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a2a2     0xcc    auipc a5,0x2
    0x8400a2a6     0xd0    addi a5,a5,1374 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a2aa     0xd4    li a4,2
    0x8400a2ac     0xd6    sd a4,1088(a5)
    0x8400a2b0     0xda    sd zero,1048(a5)
    0x8400a2b4     0xde    li s0,3
    0x8400a2b6     0xe0    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a2b8     0xe2    srli a5,s1,0x39
    0x8400a2bc     0xe6    andi a5,a5,1
    0x8400a2be     0xe8    beqz a5,ffffffff8400a2e8 <decodeInvocation+0x112>
    0x8400a2c0     0xea    li a1,2
    0x8400a2c2     0xec    auipc a0,0x15
    0x8400a2c6     0xf0    ld a0,-618(a0) # ffffffff8401f058 <ksCurThread>
    0x8400a2ca     0xf4    jal ra,ffffffff84004a52 <setThreadState>
    0x8400a2ce     0xf8    slli a0,s1,0x19
    0x8400a2d2     0xfc    srli a0,a0,0x19
    0x8400a2d4     0xfe    srli s1,s1,0x26
    0x8400a2d6    0x100    andi s1,s1,1
    0x8400a2d8    0x102    beqz s1,ffffffff8400a2e0 <decodeInvocation+0x10a>
    0x8400a2da    0x104    li a5,-1
    0x8400a2dc    0x106    slli a5,a5,0x27
    0x8400a2de    0x108    or a0,a0,a5
    0x8400a2e0    0x10a    mv a1,s3
    0x8400a2e2    0x10c    jal ra,ffffffff840065a6 <sendSignal>
    0x8400a2e6    0x110    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a2e8    0x112    auipc a5,0x2
    0x8400a2ec    0x116    addi a5,a5,1304 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a2f0    0x11a    li a4,2
    0x8400a2f2    0x11c    sd a4,1088(a5)
    0x8400a2f6    0x120    sd zero,1048(a5)
    0x8400a2fa    0x124    li s0,3
    0x8400a2fc    0x126    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a2fe    0x128    auipc s2,0x15
    0x8400a302    0x12c    addi s2,s2,-678 # ffffffff8401f058 <ksCurThread>
    0x8400a306    0x130    li a1,2
    0x8400a308    0x132    ld a0,0(s2)
    0x8400a30c    0x136    jal ra,ffffffff84004a52 <setThreadState>
    0x8400a310    0x13a    srli a2,s1,0x3a
    0x8400a314    0x13e    andi a2,a2,1
    0x8400a316    0x140    mv a1,s3
    0x8400a318    0x142    ld a0,0(s2)
    0x8400a31c    0x146    jal ra,ffffffff840078d4 <doReplyTransfer>
    0x8400a320    0x14a    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a322    0x14c    ld a5,88(sp)          ; stack access
    0x8400a324    0x14e    bnez a5,ffffffff8400a338 <decodeInvocation+0x162>
    0x8400a326    0x150    ld a6,96(sp)          ; stack access
    0x8400a328    0x152    mv a5,a7
    0x8400a32a    0x154    mv a4,a3
    0x8400a32c    0x156    ld a2,0(sp)           ; stack access
    0x8400a32e    0x158    ld a3,8(sp)           ; stack access
    0x8400a330    0x15a    jal ra,ffffffff84008fe2 <decodeTCBInvocation>
    0x8400a334    0x15e    mv s0,a0
    0x8400a336    0x160    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a338    0x162    auipc a5,0x2
    0x8400a33c    0x166    addi a5,a5,1224 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a340    0x16a    li a4,2
    0x8400a342    0x16c    sd a4,1088(a5)
    0x8400a346    0x170    sd zero,1048(a5)
    0x8400a34a    0x174    li s0,3
    0x8400a34c    0x176    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a34e    0x178    ld a5,88(sp)          ; stack access
    0x8400a350    0x17a    bnez a5,ffffffff8400a35c <decodeInvocation+0x186>
    0x8400a352    0x17c    ld a2,96(sp)          ; stack access
    0x8400a354    0x17e    jal ra,ffffffff84007e36 <decodeDomainInvocation>
    0x8400a358    0x182    mv s0,a0
    0x8400a35a    0x184    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a35c    0x186    auipc a5,0x2
    0x8400a360    0x18a    addi a5,a5,1188 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a364    0x18e    li a4,2
    0x8400a366    0x190    sd a4,1088(a5)
    0x8400a36a    0x194    sd zero,1048(a5)
    0x8400a36e    0x198    li s0,3
    0x8400a370    0x19a    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a372    0x19c    ld a5,88(sp)          ; stack access
    0x8400a374    0x19e    bnez a5,ffffffff8400a384 <decodeInvocation+0x1ae>
    0x8400a376    0x1a0    ld a4,96(sp)          ; stack access
    0x8400a378    0x1a2    ld a2,0(sp)           ; stack access
    0x8400a37a    0x1a4    ld a3,8(sp)           ; stack access
    0x8400a37c    0x1a6    jal ra,ffffffff84007446 <decodeCNodeInvocation>
    0x8400a380    0x1aa    mv s0,a0
    0x8400a382    0x1ac    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a384    0x1ae    auipc a5,0x2
    0x8400a388    0x1b2    addi a5,a5,1148 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a38c    0x1b6    li a4,2
    0x8400a38e    0x1b8    sd a4,1088(a5)
    0x8400a392    0x1bc    sd zero,1048(a5)
    0x8400a396    0x1c0    li s0,3
    0x8400a398    0x1c2    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a39a    0x1c4    ld a6,96(sp)          ; stack access
    0x8400a39c    0x1c6    mv a5,a7
    0x8400a39e    0x1c8    ld a3,0(sp)           ; stack access
    0x8400a3a0    0x1ca    ld a4,8(sp)           ; stack access
    0x8400a3a2    0x1cc    mv a2,t3
    0x8400a3a4    0x1ce    jal ra,ffffffff84009eb8 <decodeUntypedInvocation>
    0x8400a3a8    0x1d2    mv s0,a0
    0x8400a3aa    0x1d4    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a3ac    0x1d6    ld a3,96(sp)          ; stack access
    0x8400a3ae    0x1d8    mv a2,t3
    0x8400a3b0    0x1da    jal ra,ffffffff84004b94 <decodeIRQControlInvocation>
    0x8400a3b4    0x1de    mv s0,a0
    0x8400a3b6    0x1e0    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a3b8    0x1e2    slli a1,s3,0x34
    0x8400a3bc    0x1e6    srli a1,a1,0x34
    0x8400a3be    0x1e8    jal ra,ffffffff84005b1a <decodeIRQHandlerInvocation>
    0x8400a3c2    0x1ec    mv s0,a0
    0x8400a3c4    0x1ee    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a3c6    0x1f0    ld a5,88(sp)          ; stack access
    0x8400a3c8    0x1f2    bnez a5,ffffffff8400a3da <decodeInvocation+0x204>
    0x8400a3ca    0x1f4    ld a4,96(sp)          ; stack access
    0x8400a3cc    0x1f6    mv a3,a1
    0x8400a3ce    0x1f8    ld a1,0(sp)           ; stack access
    0x8400a3d0    0x1fa    ld a2,8(sp)           ; stack access
    0x8400a3d2    0x1fc    jal ra,ffffffff84006118 <decodeSchedControlInvocation>
    0x8400a3d6    0x200    mv s0,a0
    0x8400a3d8    0x202    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a3da    0x204    auipc a5,0x2
    0x8400a3de    0x208    addi a5,a5,1062 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a3e2    0x20c    li a4,2
    0x8400a3e4    0x20e    sd a4,1088(a5)
    0x8400a3e8    0x212    sd zero,1048(a5)
    0x8400a3ec    0x216    li s0,3
    0x8400a3ee    0x218    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a3f0    0x21a    ld a5,88(sp)          ; stack access
    0x8400a3f2    0x21c    bnez a5,ffffffff8400a402 <decodeInvocation+0x22c>
    0x8400a3f4    0x21e    ld a3,96(sp)          ; stack access
    0x8400a3f6    0x220    ld a1,0(sp)           ; stack access
    0x8400a3f8    0x222    ld a2,8(sp)           ; stack access
    0x8400a3fa    0x224    jal ra,ffffffff84005d94 <decodeSchedContextInvocation>
    0x8400a3fe    0x228    mv s0,a0
    0x8400a400    0x22a    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a402    0x22c    auipc a5,0x2
    0x8400a406    0x230    addi a5,a5,1022 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400a40a    0x234    li a4,2
    0x8400a40c    0x236    sd a4,1088(a5)
    0x8400a410    0x23a    sd zero,1048(a5)
    0x8400a414    0x23e    li s0,3
    0x8400a416    0x240    j ffffffff8400a21e <decodeInvocation+0x48>
    0x8400a418    0x242    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
210 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 382 nodes.

Section decodeRISCVMMUInvocation (288 of 292)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 756 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

56 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x84009358      0x0    addi sp,sp,-208
    0x8400935a      0x2    sd ra,200(sp)         ; stack access
    0x8400935c      0x4    sd s0,192(sp)         ; stack access
    0x8400935e      0x6    sd s1,184(sp)         ; stack access
    0x84009360      0x8    sd s2,176(sp)         ; stack access
    0x84009362      0xa    sd s3,168(sp)         ; stack access
    0x84009364      0xc    sd s4,160(sp)         ; stack access
    0x84009366      0xe    sd s5,152(sp)         ; stack access
    0x84009368     0x10    sd s6,144(sp)         ; stack access
    0x8400936a     0x12    sd s7,136(sp)         ; stack access
    0x8400936c     0x14    sd s8,128(sp)         ; stack access
    0x8400936e     0x16    sd s9,120(sp)         ; stack access
    0x84009370     0x18    sd s10,112(sp)        ; stack access
    0x84009372     0x1a    sd s11,104(sp)        ; stack access
    0x84009374     0x1c    sd a4,0(sp)           ; stack access
    0x84009376     0x1e    sd a5,8(sp)           ; stack access
    0x84009378     0x20    srli s0,a4,0x3b
    0x8400937c     0x24    li a5,11
    0x8400937e     0x26    beq s0,a5,ffffffff84009982 <decodeRISCVMMUInvocation+0x62a>
    0x84009382     0x2a    mv s2,a3
    0x84009384     0x2c    mv s1,a4
    0x84009386     0x2e    bltu a5,s0,ffffffff840094c6 <decodeRISCVMMUInvocation+0x16e>
    0x8400938a     0x32    li a5,1
    0x8400938c     0x34    beq s0,a5,ffffffff84009644 <decodeRISCVMMUInvocation+0x2ec>
    0x84009390     0x38    li a5,3
    0x84009392     0x3a    bne s0,a5,ffffffff84009c10 <decodeRISCVMMUInvocation+0x8b8>
    0x84009396     0x3e    ld a5,0(sp)           ; stack access
    0x84009398     0x40    sd a5,16(sp)          ; stack access
    0x8400939a     0x42    ld s3,8(sp)           ; stack access
    0x8400939c     0x44    sd s3,24(sp)          ; stack access
    0x8400939e     0x46    li a5,37
    0x840093a2     0x4a    beq a0,a5,ffffffff84009540 <decodeRISCVMMUInvocation+0x1e8>
    0x840093a6     0x4e    li a5,36
    0x840093aa     0x52    bne a0,a5,ffffffff840095b0 <decodeRISCVMMUInvocation+0x258>
    0x840093ae     0x56    li a5,1
    0x840093b0     0x58    bgeu a5,a1,ffffffff840095bc <decodeRISCVMMUInvocation+0x264>
    0x840093b4     0x5c    auipc a4,0x4
    0x840093b8     0x60    ld a4,-804(a4) # ffffffff8400d090 <current_extra_caps>
    0x840093bc     0x64    beqz a4,ffffffff840095bc <decodeRISCVMMUInvocation+0x264>
    0x840093c0     0x68    srli a5,s1,0x27
    0x840093c4     0x6c    andi a5,a5,1
    0x840093c6     0x6e    bnez a5,ffffffff840095c8 <decodeRISCVMMUInvocation+0x270>
    0x840093ca     0x72    ld a5,0(a4)
    0x840093cc     0x74    srli s5,a5,0x3b
    0x840093d0     0x78    li a3,3
    0x840093d2     0x7a    bne s5,a3,ffffffff840095dc <decodeRISCVMMUInvocation+0x284>
    0x840093d6     0x7e    srli a5,a5,0x27
    0x840093d8     0x80    andi a5,a5,1
    0x840093da     0x82    beqz a5,ffffffff840095dc <decodeRISCVMMUInvocation+0x284>
    0x840093de     0x86    ld s9,8(a4)
    0x840093e2     0x8a    srli a5,s9,0x9
    0x840093e6     0x8e    slli a0,a5,0x19
    0x840093ea     0x92    srli a0,a0,0x19
    0x840093ec     0x94    srli a5,a5,0x26
    0x840093ee     0x96    andi a5,a5,1
    0x840093f0     0x98    beqz a5,ffffffff840093f8 <decodeRISCVMMUInvocation+0xa0>
    0x840093f2     0x9a    li a5,-1
    0x840093f4     0x9c    slli a5,a5,0x27
    0x840093f6     0x9e    or a0,a0,a5
    0x840093f8     0xa0    auipc a5,0x16
    0x840093fc     0xa4    ld a5,-928(a5) # ffffffff8401f058 <ksCurThread>
    0x84009400     0xa8    ld s8,88(a5)
    0x84009404     0xac    mv s0,a0
    0x84009406     0xae    srli a0,s9,0x30
    0x8400940a     0xb2    lui a5,0xfefff
    0x8400940e     0xb6    slli a5,a5,0xe
    0x84009410     0xb8    srli a5,a5,0x1a
    0x84009412     0xba    bltu a5,s8,ffffffff840095f2 <decodeRISCVMMUInvocation+0x29a>
    0x84009416     0xbe    jal ra,ffffffff84002182 <findVSpaceForASID>
    0x8400941a     0xc2    sd a0,64(sp)          ; stack access
    0x8400941c     0xc4    sd a1,72(sp)          ; stack access
    0x8400941e     0xc6    bnez a0,ffffffff84009608 <decodeRISCVMMUInvocation+0x2b0>
    0x84009422     0xca    ld a5,72(sp)          ; stack access
    0x84009424     0xcc    bne s0,a5,ffffffff8400961e <decodeRISCVMMUInvocation+0x2c6>
    0x84009428     0xd0    mv a1,s8
    0x8400942a     0xd2    mv a0,s0
    0x8400942c     0xd4    jal ra,ffffffff84002998 <lookupPTSlot>
    0x84009430     0xd8    mv s6,a0
    0x84009432     0xda    mv s4,a1
    0x84009434     0xdc    sd a0,48(sp)          ; stack access
    0x84009436     0xde    sd a1,56(sp)          ; stack access
    0x84009438     0xe0    li a5,12
    0x8400943a     0xe2    beq a1,a5,ffffffff84009636 <decodeRISCVMMUInvocation+0x2de>
    0x8400943e     0xe6    ld s0,0(a0)
    0x84009440     0xe8    andi s0,s0,1
    0x84009442     0xea    bnez s0,ffffffff84009636 <decodeRISCVMMUInvocation+0x2de>
    0x84009446     0xee    srli a5,s3,0x9
    0x8400944a     0xf2    slli s5,a5,0x19
    0x8400944e     0xf6    srli s5,s5,0x19
    0x84009452     0xfa    srli a5,a5,0x26
    0x84009454     0xfc    andi a5,a5,1
    0x84009456     0xfe    beqz a5,ffffffff84009460 <decodeRISCVMMUInvocation+0x108>
    0x84009458    0x100    li a5,-1
    0x8400945a    0x102    slli a5,a5,0x27
    0x8400945c    0x104    or s5,s5,a5
    0x84009460    0x108    li s7,-1
    0x84009462    0x10a    srli a5,s7,0x10
    0x84009466    0x10e    and s3,s3,a5
    0x8400946a    0x112    slli a5,s7,0x30
    0x8400946e    0x116    and s9,s9,a5
    0x84009472    0x11a    or s3,s3,s9
    0x84009476    0x11e    li a1,2
    0x84009478    0x120    auipc a0,0x16
    0x8400947c    0x124    ld a0,-1056(a0) # ffffffff8401f058 <ksCurThread>
    0x84009480    0x128    jal ra,ffffffff84004a52 <setThreadState>
    0x84009484    0x12c    li a4,1
    0x84009486    0x12e    sll a5,a4,s4
    0x8400948a    0x132    neg a5,a5
    0x8400948e    0x136    and a5,a5,s8
    0x84009492    0x13a    slli s7,s7,0x28
    0x84009494    0x13c    and s1,s1,s7
    0x84009498    0x140    or a5,a5,s1
    0x8400949a    0x142    slli a3,a4,0x27
    0x8400949e    0x146    or a5,a5,a3
    0x840094a0    0x148    sd a5,0(s2)
    0x840094a4    0x14c    sd s3,8(s2)
    0x840094a8    0x150    slli a5,a4,0x26
    0x840094ac    0x154    add a5,a5,s5
    0x840094ae    0x156    srli a5,a5,0x2
    0x840094b0    0x158    lui a4,0xfff00
    0x840094b4    0x15c    srli a4,a4,0xa
    0x840094b6    0x15e    and a5,a5,a4
    0x840094b8    0x160    ori a5,a5,193
    0x840094bc    0x164    sd a5,0(s6)
    0x840094c0    0x168    sfence.vma
    0x840094c4    0x16c    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840094c6    0x16e    li a5,13
    0x840094c8    0x170    bne s0,a5,ffffffff84009c10 <decodeRISCVMMUInvocation+0x8b8>
    0x840094cc    0x174    li a5,42
    0x840094d0    0x178    bne a0,a5,ffffffff84009b20 <decodeRISCVMMUInvocation+0x7c8>
    0x840094d4    0x17c    auipc s3,0x4
    0x840094d8    0x180    ld s3,-1092(s3) # ffffffff8400d090 <current_extra_caps>
    0x840094dc    0x184    beqz s3,ffffffff84009b2e <decodeRISCVMMUInvocation+0x7d6>
    0x840094e0    0x188    ld s2,0(s3)
    0x840094e4    0x18c    srli s0,s2,0x3b
    0x840094e8    0x190    li a5,3
    0x840094ea    0x192    bne s0,a5,ffffffff84009b3c <decodeRISCVMMUInvocation+0x7e4>
    0x840094ee    0x196    srli s2,s2,0x27
    0x840094f2    0x19a    andi s2,s2,1
    0x840094f6    0x19e    bnez s2,ffffffff84009b3c <decodeRISCVMMUInvocation+0x7e4>
    0x840094fa    0x1a2    srli a2,a4,0x2b
    0x840094fe    0x1a6    slli a2,a2,0x30
    0x84009500    0x1a8    srli a2,a2,0x30
    0x84009502    0x1aa    srli a5,a2,0x9
    0x84009506    0x1ae    slli a4,a5,0x3
    0x8400950a    0x1b2    auipc a5,0x3
    0x8400950e    0x1b6    addi a5,a5,758 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009512    0x1ba    add a5,a5,a4
    0x84009514    0x1bc    ld s4,0(a5)
    0x84009518    0x1c0    beqz s4,ffffffff84009b54 <decodeRISCVMMUInvocation+0x7fc>
    0x8400951c    0x1c4    slli s1,s1,0x2
    0x8400951e    0x1c6    lui a5,0xf8000
    0x84009522    0x1ca    srli a5,a5,0x19
    0x84009524    0x1cc    and a5,a5,s1
    0x84009526    0x1ce    srli s1,s1,0x26
    0x84009528    0x1d0    andi s1,s1,1
    0x8400952a    0x1d2    beqz s1,ffffffff84009532 <decodeRISCVMMUInvocation+0x1da>
    0x8400952c    0x1d4    li a4,-1
    0x8400952e    0x1d6    slli a4,a4,0x27
    0x84009530    0x1d8    or a5,a5,a4
    0x84009532    0x1da    bne s4,a5,ffffffff84009b70 <decodeRISCVMMUInvocation+0x818>
    0x84009536    0x1de    mv a4,s4
    0x84009538    0x1e0    mv a5,s2
    0x8400953a    0x1e2    li a1,512
    0x8400953e    0x1e6    j ffffffff84009b8c <decodeRISCVMMUInvocation+0x834>
    0x84009540    0x1e8    mv a0,a3
    0x84009542    0x1ea    jal ra,ffffffff84004568 <isFinalCapability>
    0x84009546    0x1ee    beqz a0,ffffffff84009592 <decodeRISCVMMUInvocation+0x23a>
    0x84009548    0x1f0    srli a5,s1,0x27
    0x8400954c    0x1f4    andi a5,a5,1
    0x8400954e    0x1f6    beqz a5,ffffffff84009576 <decodeRISCVMMUInvocation+0x21e>
    0x84009550    0x1f8    srli a0,s3,0x30
    0x84009554    0x1fc    jal ra,ffffffff84002182 <findVSpaceForASID>
    0x84009558    0x200    sd a0,64(sp)          ; stack access
    0x8400955a    0x202    sd a1,72(sp)          ; stack access
    0x8400955c    0x204    srli a5,s3,0x9
    0x84009560    0x208    slli a4,a5,0x19
    0x84009564    0x20c    srli a4,a4,0x19
    0x84009566    0x20e    srli a5,a5,0x26
    0x84009568    0x210    andi a5,a5,1
    0x8400956a    0x212    beqz a5,ffffffff84009572 <decodeRISCVMMUInvocation+0x21a>
    0x8400956c    0x214    li a5,-1
    0x8400956e    0x216    slli a5,a5,0x27
    0x84009570    0x218    or a4,a4,a5
    0x84009572    0x21a    ld a5,64(sp)          ; stack access
    0x84009574    0x21c    beqz a5,ffffffff8400959e <decodeRISCVMMUInvocation+0x246>
    0x84009576    0x21e    li a1,2
    0x84009578    0x220    auipc a0,0x16
    0x8400957c    0x224    ld a0,-1312(a0) # ffffffff8401f058 <ksCurThread>
    0x84009580    0x228    jal ra,ffffffff84004a52 <setThreadState>
    0x84009584    0x22c    mv a2,s2
    0x84009586    0x22e    mv a0,s1
    0x84009588    0x230    mv a1,s3
    0x8400958a    0x232    jal ra,ffffffff840092ec <performPageTableInvocationUnmap>
    0x8400958e    0x236    mv s0,a0
    0x84009590    0x238    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009592    0x23a    li a5,9
    0x84009594    0x23c    auipc a4,0x3
    0x84009598    0x240    sd a5,1708(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400959c    0x244    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x8400959e    0x246    ld a5,72(sp)          ; stack access
    0x840095a0    0x248    bne a5,a4,ffffffff84009576 <decodeRISCVMMUInvocation+0x21e>
    0x840095a4    0x24c    li a5,9
    0x840095a6    0x24e    auipc a4,0x3
    0x840095aa    0x252    sd a5,1690(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840095ae    0x256    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840095b0    0x258    li a5,3
    0x840095b2    0x25a    auipc a4,0x3
    0x840095b6    0x25e    sd a5,1678(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840095ba    0x262    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840095bc    0x264    li a5,7
    0x840095be    0x266    auipc a4,0x3
    0x840095c2    0x26a    sd a5,1666(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840095c6    0x26e    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840095c8    0x270    auipc a5,0x3
    0x840095cc    0x274    addi a5,a5,568 # ffffffff8400c800 <riscvKSASIDTable>
    0x840095d0    0x278    li a4,2
    0x840095d2    0x27a    sd a4,1088(a5)
    0x840095d6    0x27e    sd zero,1048(a5)
    0x840095da    0x282    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840095dc    0x284    auipc a5,0x3
    0x840095e0    0x288    addi a5,a5,548 # ffffffff8400c800 <riscvKSASIDTable>
    0x840095e4    0x28c    li a4,2
    0x840095e6    0x28e    sd a4,1088(a5)
    0x840095ea    0x292    li a4,1
    0x840095ec    0x294    sd a4,1048(a5)
    0x840095f0    0x298    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840095f2    0x29a    auipc a5,0x3
    0x840095f6    0x29e    addi a5,a5,526 # ffffffff8400c800 <riscvKSASIDTable>
    0x840095fa    0x2a2    li a4,1
    0x840095fc    0x2a4    sd a4,1088(a5)
    0x84009600    0x2a8    sd zero,1040(a5)
    0x84009604    0x2ac    mv s0,s5
    0x84009606    0x2ae    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009608    0x2b0    auipc a5,0x3
    0x8400960c    0x2b4    addi a5,a5,504 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009610    0x2b8    li a4,6
    0x84009612    0x2ba    sd a4,1088(a5)
    0x84009616    0x2be    sd zero,1080(a5)
    0x8400961a    0x2c2    mv s0,s5
    0x8400961c    0x2c4    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x8400961e    0x2c6    auipc a5,0x3
    0x84009622    0x2ca    addi a5,a5,482 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009626    0x2ce    li a4,2
    0x84009628    0x2d0    sd a4,1088(a5)
    0x8400962c    0x2d4    li a4,1
    0x8400962e    0x2d6    sd a4,1048(a5)
    0x84009632    0x2da    mv s0,s5
    0x84009634    0x2dc    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009636    0x2de    li a5,8
    0x84009638    0x2e0    auipc a4,0x3
    0x8400963c    0x2e4    sd a5,1544(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009640    0x2e8    mv s0,s5
    0x84009642    0x2ea    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009644    0x2ec    ld a5,0(sp)           ; stack access
    0x84009646    0x2ee    sd a5,32(sp)          ; stack access
    0x84009648    0x2f0    ld s4,8(sp)           ; stack access
    0x8400964a    0x2f2    sd s4,40(sp)          ; stack access
    0x8400964c    0x2f4    li a5,39
    0x84009650    0x2f8    beq a0,a5,ffffffff8400992a <decodeRISCVMMUInvocation+0x5d2>
    0x84009654    0x2fc    li a5,40
    0x84009658    0x300    beq a0,a5,ffffffff84009946 <decodeRISCVMMUInvocation+0x5ee>
    0x8400965c    0x304    li a5,38
    0x84009660    0x308    beq a0,a5,ffffffff84009672 <decodeRISCVMMUInvocation+0x31a>
    0x84009664    0x30c    li a5,3
    0x84009666    0x30e    auipc a4,0x3
    0x8400966a    0x312    sd a5,1498(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400966e    0x316    li s0,3
    0x84009670    0x318    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009672    0x31a    li a5,2
    0x84009674    0x31c    bgeu a5,a1,ffffffff840096f4 <decodeRISCVMMUInvocation+0x39c>
    0x84009678    0x320    auipc a4,0x4
    0x8400967c    0x324    ld a4,-1512(a4) # ffffffff8400d090 <current_extra_caps>
    0x84009680    0x328    beqz a4,ffffffff840096f4 <decodeRISCVMMUInvocation+0x39c>
    0x84009682    0x32a    ld a5,0(a4)
    0x84009684    0x32c    srli s8,a5,0x3b
    0x84009688    0x330    li a3,3
    0x8400968a    0x332    bne s8,a3,ffffffff84009702 <decodeRISCVMMUInvocation+0x3aa>
    0x8400968e    0x336    srli a5,a5,0x27
    0x84009690    0x338    andi a5,a5,1
    0x84009692    0x33a    beqz a5,ffffffff84009702 <decodeRISCVMMUInvocation+0x3aa>
    0x84009694    0x33c    ld s7,8(a4)
    0x84009698    0x340    srli a5,s7,0x9
    0x8400969c    0x344    slli a0,a5,0x19
    0x840096a0    0x348    srli a0,a0,0x19
    0x840096a2    0x34a    srli a5,a5,0x26
    0x840096a4    0x34c    andi a5,a5,1
    0x840096a6    0x34e    beqz a5,ffffffff840096ae <decodeRISCVMMUInvocation+0x356>
    0x840096a8    0x350    li a5,-1
    0x840096aa    0x352    slli a5,a5,0x27
    0x840096ac    0x354    or a0,a0,a5
    0x840096ae    0x356    auipc a5,0x16
    0x840096b2    0x35a    ld a5,-1622(a5) # ffffffff8401f058 <ksCurThread>
    0x840096b6    0x35e    ld s5,88(a5)
    0x840096ba    0x362    ld s10,96(a5)
    0x840096be    0x366    ld s6,104(a5)
    0x840096c2    0x36a    mv s3,a0
    0x840096c4    0x36c    srli s11,s7,0x30
    0x840096c8    0x370    mv a0,s11
    0x840096ca    0x372    jal ra,ffffffff84002182 <findVSpaceForASID>
    0x840096ce    0x376    sd a0,48(sp)          ; stack access
    0x840096d0    0x378    sd a1,56(sp)          ; stack access
    0x840096d2    0x37a    bnez a0,ffffffff8400971a <decodeRISCVMMUInvocation+0x3c2>
    0x840096d4    0x37c    ld a5,56(sp)          ; stack access
    0x840096d6    0x37e    bne s3,a5,ffffffff84009730 <decodeRISCVMMUInvocation+0x3d8>
    0x840096da    0x382    srli a5,s1,0x39
    0x840096de    0x386    andi a5,a5,3
    0x840096e0    0x388    li a4,1
    0x840096e2    0x38a    beq a5,a4,ffffffff84009748 <decodeRISCVMMUInvocation+0x3f0>
    0x840096e6    0x38e    li a4,2
    0x840096e8    0x390    beq a5,a4,ffffffff8400974c <decodeRISCVMMUInvocation+0x3f4>
    0x840096ec    0x394    beqz a5,ffffffff8400984a <decodeRISCVMMUInvocation+0x4f2>
    0x840096f0    0x398    jal ra,ffffffff84002424 <halt>
    0x840096f4    0x39c    li a5,7
    0x840096f6    0x39e    auipc a4,0x3
    0x840096fa    0x3a2    sd a5,1354(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840096fe    0x3a6    li s0,3
    0x84009700    0x3a8    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009702    0x3aa    auipc a5,0x3
    0x84009706    0x3ae    addi a5,a5,254 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400970a    0x3b2    li a4,2
    0x8400970c    0x3b4    sd a4,1088(a5)
    0x84009710    0x3b8    li a4,1
    0x84009712    0x3ba    sd a4,1048(a5)
    0x84009716    0x3be    li s0,3
    0x84009718    0x3c0    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x8400971a    0x3c2    auipc a5,0x3
    0x8400971e    0x3c6    addi a5,a5,230 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009722    0x3ca    li a4,6
    0x84009724    0x3cc    sd a4,1088(a5)
    0x84009728    0x3d0    sd zero,1080(a5)
    0x8400972c    0x3d4    mv s0,s8
    0x8400972e    0x3d6    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009730    0x3d8    auipc a5,0x3
    0x84009734    0x3dc    addi a5,a5,208 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009738    0x3e0    li a4,2
    0x8400973a    0x3e2    sd a4,1088(a5)
    0x8400973e    0x3e6    li a4,1
    0x84009740    0x3e8    sd a4,1048(a5)
    0x84009744    0x3ec    mv s0,s8
    0x84009746    0x3ee    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009748    0x3f0    li s9,21
    0x8400974a    0x3f2    j ffffffff8400974e <decodeRISCVMMUInvocation+0x3f6>
    0x8400974c    0x3f4    li s9,30
    0x8400974e    0x3f6    sext.w a3,s9
    0x84009752    0x3fa    addi a4,s5,-1
    0x84009756    0x3fe    li a5,1
    0x84009758    0x400    sll a5,a5,s9
    0x8400975c    0x404    add a4,a4,a5
    0x8400975e    0x406    lui a5,0xfefff
    0x84009762    0x40a    slli a5,a5,0xe
    0x84009764    0x40c    srli a5,a5,0x1a
    0x84009766    0x40e    bltu a5,a4,ffffffff8400984e <decodeRISCVMMUInvocation+0x4f6>
    0x8400976a    0x412    li s0,-1
    0x8400976c    0x414    sll s0,s0,a3
    0x84009770    0x418    not s0,s0
    0x84009774    0x41c    and s0,s0,s5
    0x84009778    0x420    bnez s0,ffffffff84009864 <decodeRISCVMMUInvocation+0x50c>
    0x8400977a    0x422    mv a1,s5
    0x8400977c    0x424    mv a0,s3
    0x8400977e    0x426    jal ra,ffffffff84002998 <lookupPTSlot>
    0x84009782    0x42a    mv s3,a0
    0x84009784    0x42c    sd a0,64(sp)          ; stack access
    0x84009786    0x42e    sd a1,72(sp)          ; stack access
    0x84009788    0x430    bne a1,s9,ffffffff84009872 <decodeRISCVMMUInvocation+0x51a>
    0x8400978c    0x434    srli a5,s4,0x30
    0x84009790    0x438    bnez a5,ffffffff8400989c <decodeRISCVMMUInvocation+0x544>
    0x84009794    0x43c    ld a5,0(a0)
    0x84009796    0x43e    andi a5,a5,1
    0x84009798    0x440    bnez a5,ffffffff84009914 <decodeRISCVMMUInvocation+0x5bc>
    0x8400979c    0x444    srli a0,s1,0x37
    0x840097a0    0x448    mv a1,s10
    0x840097a2    0x44a    andi a0,a0,3
    0x840097a4    0x44c    jal ra,ffffffff84002d68 <maskVMRights>
    0x840097a8    0x450    srli a4,s4,0x9
    0x840097ac    0x454    slli a5,a4,0x19
    0x840097b0    0x458    srli a5,a5,0x19
    0x840097b2    0x45a    srli a4,a4,0x26
    0x840097b4    0x45c    andi a4,a4,1
    0x840097b6    0x45e    beqz a4,ffffffff840097be <decodeRISCVMMUInvocation+0x466>
    0x840097b8    0x460    li a4,-1
    0x840097ba    0x462    slli a4,a4,0x27
    0x840097bc    0x464    or a5,a5,a4
    0x840097be    0x466    li a1,1
    0x840097c0    0x468    slli a4,a1,0x26
    0x840097c4    0x46c    add a5,a5,a4
    0x840097c6    0x46e    li a4,-1
    0x840097c8    0x470    srli a3,a4,0x10
    0x840097cc    0x474    and s4,s4,a3
    0x840097d0    0x478    slli a3,a4,0x30
    0x840097d4    0x47c    and s7,s7,a3
    0x840097d8    0x480    or s4,s4,s7
    0x840097dc    0x484    slli a3,a4,0x27
    0x840097e0    0x488    and s1,s1,a3
    0x840097e2    0x48a    srli a4,a4,0x19
    0x840097e4    0x48c    and s5,s5,a4
    0x840097e8    0x490    or s5,s1,s5
    0x840097ec    0x494    andi s6,s6,1
    0x840097f0    0x498    xori a2,s6,1
    0x840097f4    0x49c    addi a3,a0,-3
    0x840097f8    0x4a0    seqz a3,a3
    0x840097fc    0x4a4    addi a4,a0,-1
    0x84009800    0x4a8    snez a4,a4
    0x84009804    0x4ac    beq a0,a1,ffffffff84009922 <decodeRISCVMMUInvocation+0x5ca>
    0x84009808    0x4b0    srli s1,a5,0x2
    0x8400980c    0x4b4    lui a5,0xfff00
    0x84009810    0x4b8    srli a5,a5,0xa
    0x84009812    0x4ba    and s1,s1,a5
    0x84009814    0x4bc    slli a5,a2,0x3
    0x84009818    0x4c0    or s1,s1,a5
    0x8400981a    0x4c2    slli a5,a3,0x2
    0x8400981e    0x4c6    or s1,s1,a5
    0x84009820    0x4c8    slli a5,a4,0x1
    0x84009824    0x4cc    or s1,s1,a5
    0x84009826    0x4ce    ori s1,s1,209
    0x8400982a    0x4d2    li a1,2
    0x8400982c    0x4d4    auipc a0,0x16
    0x84009830    0x4d8    ld a0,-2004(a0) # ffffffff8401f058 <ksCurThread>
    0x84009834    0x4dc    jal ra,ffffffff84004a52 <setThreadState>
    0x84009838    0x4e0    sd s5,0(s2)
    0x8400983c    0x4e4    sd s4,8(s2)
    0x84009840    0x4e8    sd s1,0(s3)
    0x84009844    0x4ec    sfence.vma
    0x84009848    0x4f0    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x8400984a    0x4f2    li s9,12
    0x8400984c    0x4f4    j ffffffff8400974e <decodeRISCVMMUInvocation+0x3f6>
    0x8400984e    0x4f6    auipc a5,0x3
    0x84009852    0x4fa    addi a5,a5,-78 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009856    0x4fe    li a4,1
    0x84009858    0x500    sd a4,1088(a5)
    0x8400985c    0x504    sd zero,1040(a5)
    0x84009860    0x508    mv s0,s8
    0x84009862    0x50a    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009864    0x50c    li a5,5
    0x84009866    0x50e    auipc a4,0x3
    0x8400986a    0x512    sd a5,986(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400986e    0x516    mv s0,s8
    0x84009870    0x518    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009872    0x51a    auipc a4,0x3
    0x84009876    0x51e    addi a4,a4,-114 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400987a    0x522    slli a5,a1,0x2
    0x8400987e    0x526    andi a5,a5,508
    0x84009882    0x52a    ori a5,a5,1
    0x84009886    0x52e    sd a5,1024(a4)
    0x8400988a    0x532    sd zero,1032(a4)
    0x8400988e    0x536    li a5,6
    0x84009890    0x538    sd a5,1088(a4)
    0x84009894    0x53c    sd zero,1080(a4)
    0x84009898    0x540    mv s0,s8
    0x8400989a    0x542    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x8400989c    0x544    beq s11,a5,ffffffff840098b8 <decodeRISCVMMUInvocation+0x560>
    0x840098a0    0x548    auipc a5,0x3
    0x840098a4    0x54c    addi a5,a5,-160 # ffffffff8400c800 <riscvKSASIDTable>
    0x840098a8    0x550    li a4,2
    0x840098aa    0x552    sd a4,1088(a5)
    0x840098ae    0x556    li a4,1
    0x840098b0    0x558    sd a4,1048(a5)
    0x840098b4    0x55c    mv s0,s8
    0x840098b6    0x55e    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840098b8    0x560    slli a5,s1,0x19
    0x840098bc    0x564    srli a5,a5,0x19
    0x840098be    0x566    srli a4,s1,0x26
    0x840098c2    0x56a    andi a4,a4,1
    0x840098c4    0x56c    beqz a4,ffffffff840098cc <decodeRISCVMMUInvocation+0x574>
    0x840098c6    0x56e    li a4,-1
    0x840098c8    0x570    slli a4,a4,0x27
    0x840098ca    0x572    or a5,a5,a4
    0x840098cc    0x574    bne s5,a5,ffffffff840098fe <decodeRISCVMMUInvocation+0x5a6>
    0x840098d0    0x578    ld a4,0(s3)
    0x840098d4    0x57c    andi a5,a4,1
    0x840098d8    0x580    beqz a5,ffffffff8400979c <decodeRISCVMMUInvocation+0x444>
    0x840098dc    0x584    srli a5,a4,0x1
    0x840098e0    0x588    srli a3,a4,0x2
    0x840098e4    0x58c    or a5,a5,a3
    0x840098e6    0x58e    srli a4,a4,0x3
    0x840098e8    0x590    or a5,a5,a4
    0x840098ea    0x592    andi a5,a5,1
    0x840098ec    0x594    bnez a5,ffffffff8400979c <decodeRISCVMMUInvocation+0x444>
    0x840098f0    0x598    li a5,8
    0x840098f2    0x59a    auipc a4,0x3
    0x840098f6    0x59e    sd a5,846(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840098fa    0x5a2    mv s0,s8
    0x840098fc    0x5a4    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x840098fe    0x5a6    auipc a5,0x3
    0x84009902    0x5aa    addi a5,a5,-254 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009906    0x5ae    li a4,1
    0x84009908    0x5b0    sd a4,1088(a5)
    0x8400990c    0x5b4    sd zero,1040(a5)
    0x84009910    0x5b8    mv s0,s8
    0x84009912    0x5ba    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009914    0x5bc    li a5,8
    0x84009916    0x5be    auipc a4,0x3
    0x8400991a    0x5c2    sd a5,810(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400991e    0x5c6    mv s0,s8
    0x84009920    0x5c8    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009922    0x5ca    beqz s6,ffffffff84009808 <decodeRISCVMMUInvocation+0x4b0>
    0x84009926    0x5ce    mv s1,s0
    0x84009928    0x5d0    j ffffffff8400982a <decodeRISCVMMUInvocation+0x4d2>
    0x8400992a    0x5d2    li a1,2
    0x8400992c    0x5d4    auipc a0,0x15
    0x84009930    0x5d8    ld a0,1836(a0) # ffffffff8401f058 <ksCurThread>
    0x84009934    0x5dc    jal ra,ffffffff84004a52 <setThreadState>
    0x84009938    0x5e0    mv a2,s2
    0x8400993a    0x5e2    mv a0,s1
    0x8400993c    0x5e4    mv a1,s4
    0x8400993e    0x5e6    jal ra,ffffffff84002dc0 <performPageInvocationUnmap>
    0x84009942    0x5ea    mv s0,a0
    0x84009944    0x5ec    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009946    0x5ee    li a1,2
    0x84009948    0x5f0    auipc a0,0x15
    0x8400994c    0x5f4    ld a0,1808(a0) # ffffffff8401f058 <ksCurThread>
    0x84009950    0x5f8    jal ra,ffffffff84004a52 <setThreadState>
    0x84009954    0x5fc    srli a5,s4,0x9
    0x84009958    0x600    slli a4,a5,0x19
    0x8400995c    0x604    srli a4,a4,0x19
    0x8400995e    0x606    srli a5,a5,0x26
    0x84009960    0x608    andi a5,a5,1
    0x84009962    0x60a    beqz a5,ffffffff8400996a <decodeRISCVMMUInvocation+0x612>
    0x84009964    0x60c    li a5,-1
    0x84009966    0x60e    slli a5,a5,0x27
    0x84009968    0x610    or a4,a4,a5
    0x8400996a    0x612    auipc a5,0x15
    0x8400996e    0x616    ld a5,1774(a5) # ffffffff8401f058 <ksCurThread>
    0x84009972    0x61a    li a3,1
    0x84009974    0x61c    slli a2,a3,0x26
    0x84009978    0x620    add a4,a4,a2
    0x8400997a    0x622    sd a4,88(a5)
    0x8400997c    0x624    sd a3,80(a5)
    0x8400997e    0x626    li s0,0
    0x84009980    0x628    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009982    0x62a    li a5,41
    0x84009986    0x62e    beq a0,a5,ffffffff840099b6 <decodeRISCVMMUInvocation+0x65e>
    0x8400998a    0x632    li a5,3
    0x8400998c    0x634    auipc a4,0x3
    0x84009990    0x638    sd a5,692(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009994    0x63c    li s0,3
    0x84009996    0x63e    mv a0,s0
    0x84009998    0x640    ld ra,200(sp)         ; stack access
    0x8400999a    0x642    ld s0,192(sp)         ; stack access
    0x8400999c    0x644    ld s1,184(sp)         ; stack access
    0x8400999e    0x646    ld s2,176(sp)         ; stack access
    0x840099a0    0x648    ld s3,168(sp)         ; stack access
    0x840099a2    0x64a    ld s4,160(sp)         ; stack access
    0x840099a4    0x64c    ld s5,152(sp)         ; stack access
    0x840099a6    0x64e    ld s6,144(sp)         ; stack access
    0x840099a8    0x650    ld s7,136(sp)         ; stack access
    0x840099aa    0x652    ld s8,128(sp)         ; stack access
    0x840099ac    0x654    ld s9,120(sp)         ; stack access
    0x840099ae    0x656    ld s10,112(sp)        ; stack access
    0x840099b0    0x658    ld s11,104(sp)        ; stack access
    0x840099b2    0x65a    addi sp,sp,208
    0x840099b4    0x65c    ret
    0x840099b6    0x65e    li a5,1
    0x840099b8    0x660    bgeu a5,a1,ffffffff84009a1a <decodeRISCVMMUInvocation+0x6c2>
    0x840099bc    0x664    auipc s2,0x3
    0x840099c0    0x668    ld s2,1748(s2) # ffffffff8400d090 <current_extra_caps>
    0x840099c4    0x66c    beqz s2,ffffffff84009a1a <decodeRISCVMMUInvocation+0x6c2>
    0x840099c8    0x670    auipc a5,0x3
    0x840099cc    0x674    ld a5,1744(a5) # ffffffff8400d098 <current_extra_caps+0x8>
    0x840099d0    0x678    beqz a5,ffffffff84009a1a <decodeRISCVMMUInvocation+0x6c2>
    0x840099d2    0x67a    auipc a4,0x15
    0x840099d6    0x67e    ld a4,1670(a4) # ffffffff8401f058 <ksCurThread>
    0x840099da    0x682    ld s4,88(a4)
    0x840099de    0x686    ld s5,96(a4)
    0x840099e2    0x68a    ld s3,0(s2)
    0x840099e6    0x68e    ld a2,8(s2)
    0x840099ea    0x692    ld a4,0(a5)
    0x840099ec    0x694    sd a4,48(sp)          ; stack access
    0x840099ee    0x696    ld a5,8(a5)
    0x840099f0    0x698    sd a5,56(sp)          ; stack access
    0x840099f2    0x69a    auipc a5,0x3
    0x840099f6    0x69e    addi a5,a5,-498 # ffffffff8400c800 <riscvKSASIDTable>
    0x840099fa    0x6a2    li s1,0
    0x840099fc    0x6a4    li a3,128
    0x84009a00    0x6a8    ld a4,0(a5)
    0x84009a02    0x6aa    beqz a4,ffffffff84009a28 <decodeRISCVMMUInvocation+0x6d0>
    0x84009a04    0x6ac    addi s1,s1,1
    0x84009a06    0x6ae    addi a5,a5,8
    0x84009a08    0x6b0    bne s1,a3,ffffffff84009a00 <decodeRISCVMMUInvocation+0x6a8>
    0x84009a0c    0x6b4    li a5,8
    0x84009a0e    0x6b6    auipc a4,0x3
    0x84009a12    0x6ba    sd a5,562(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009a16    0x6be    li s0,3
    0x84009a18    0x6c0    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009a1a    0x6c2    li a5,7
    0x84009a1c    0x6c4    auipc a4,0x3
    0x84009a20    0x6c8    sd a5,548(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009a24    0x6cc    li s0,3
    0x84009a26    0x6ce    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009a28    0x6d0    li a5,128
    0x84009a2c    0x6d4    beq s1,a5,ffffffff84009a0c <decodeRISCVMMUInvocation+0x6b4>
    0x84009a30    0x6d8    srli a5,s3,0x3b
    0x84009a34    0x6dc    li a4,2
    0x84009a36    0x6de    bne a5,a4,ffffffff84009a4c <decodeRISCVMMUInvocation+0x6f4>
    0x84009a3a    0x6e2    andi a5,a2,63
    0x84009a3e    0x6e6    li a4,12
    0x84009a40    0x6e8    bne a5,a4,ffffffff84009a4c <decodeRISCVMMUInvocation+0x6f4>
    0x84009a44    0x6ec    srli a5,a2,0x6
    0x84009a48    0x6f0    andi a5,a5,1
    0x84009a4a    0x6f2    beqz a5,ffffffff84009a64 <decodeRISCVMMUInvocation+0x70c>
    0x84009a4c    0x6f4    auipc a5,0x3
    0x84009a50    0x6f8    addi a5,a5,-588 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009a54    0x6fc    li a4,2
    0x84009a56    0x6fe    sd a4,1088(a5)
    0x84009a5a    0x702    li a4,1
    0x84009a5c    0x704    sd a4,1048(a5)
    0x84009a60    0x708    li s0,3
    0x84009a62    0x70a    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009a64    0x70c    mv a0,s2
    0x84009a66    0x70e    jal ra,ffffffff84004466 <ensureNoChildren>
    0x84009a6a    0x712    mv s0,a0
    0x84009a6c    0x714    bnez a0,ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009a6e    0x716    slli s6,s3,0x19
    0x84009a72    0x71a    srli s6,s6,0x19
    0x84009a76    0x71e    srli a5,s3,0x26
    0x84009a7a    0x722    andi a5,a5,1
    0x84009a7c    0x724    beqz a5,ffffffff84009a86 <decodeRISCVMMUInvocation+0x72e>
    0x84009a7e    0x726    li a5,-1
    0x84009a80    0x728    slli a5,a5,0x27
    0x84009a82    0x72a    or s6,s6,a5
    0x84009a86    0x72e    mv a3,s5
    0x84009a88    0x730    mv a2,s4
    0x84009a8a    0x732    ld a0,48(sp)          ; stack access
    0x84009a8c    0x734    ld a1,56(sp)          ; stack access
    0x84009a8e    0x736    jal ra,ffffffff840035b8 <lookupTargetSlot>
    0x84009a92    0x73a    sd a0,64(sp)          ; stack access
    0x84009a94    0x73c    sd a1,72(sp)          ; stack access
    0x84009a96    0x73e    mv s0,a0
    0x84009a98    0x740    bnez a0,ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009a9c    0x744    mv s3,a1
    0x84009a9e    0x746    mv a0,a1
    0x84009aa0    0x748    jal ra,ffffffff84003dae <ensureEmptySlot>
    0x84009aa4    0x74c    mv s0,a0
    0x84009aa6    0x74e    bnez a0,ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009aaa    0x752    li a1,2
    0x84009aac    0x754    auipc a0,0x15
    0x84009ab0    0x758    ld a0,1452(a0) # ffffffff8401f058 <ksCurThread>
    0x84009ab4    0x75c    jal ra,ffffffff84004a52 <setThreadState>
    0x84009ab8    0x760    ld a5,8(s2)
    0x84009abc    0x764    andi a4,a5,63
    0x84009ac0    0x768    addiw a3,a4,-4
    0x84009ac4    0x76c    lui a4,0x2000
    0x84009ac8    0x770    sll a4,a4,a3
    0x84009acc    0x774    slli a5,a5,0x27
    0x84009ace    0x776    srli a5,a5,0x27
    0x84009ad0    0x778    or a5,a5,a4
    0x84009ad2    0x77a    sd a5,8(s2)
    0x84009ad6    0x77e    lui a1,0x1
    0x84009ad8    0x780    mv a0,s6
    0x84009ada    0x782    jal ra,ffffffff840092da <memzero>
    0x84009ade    0x786    slli a5,s1,0x34
    0x84009ae2    0x78a    lui a4,0xffff
    0x84009ae6    0x78e    slli a4,a4,0x1f
    0x84009ae8    0x790    and a5,a5,a4
    0x84009aea    0x792    srli a4,s6,0x2
    0x84009aee    0x796    li s4,-1
    0x84009af0    0x798    srli a3,s4,0x1b
    0x84009af4    0x79c    and a4,a4,a3
    0x84009af6    0x79e    or a5,a5,a4
    0x84009af8    0x7a0    mv a3,s3
    0x84009afa    0x7a2    mv a2,s2
    0x84009afc    0x7a4    li a0,13
    0x84009afe    0x7a6    slli a0,a0,0x3b
    0x84009b00    0x7a8    or a0,a0,a5
    0x84009b02    0x7aa    li a1,0
    0x84009b04    0x7ac    jal ra,ffffffff84003aba <cteInsert>
    0x84009b08    0x7b0    srli a5,s4,0x9
    0x84009b0c    0x7b4    and a5,a5,s1
    0x84009b0e    0x7b6    slli a5,a5,0x3
    0x84009b10    0x7b8    auipc a4,0x3
    0x84009b14    0x7bc    addi a4,a4,-784 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009b18    0x7c0    add a5,a5,a4
    0x84009b1a    0x7c2    sd s6,0(a5)
    0x84009b1e    0x7c6    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009b20    0x7c8    li a5,3
    0x84009b22    0x7ca    auipc a4,0x3
    0x84009b26    0x7ce    sd a5,286(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009b2a    0x7d2    li s0,3
    0x84009b2c    0x7d4    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009b2e    0x7d6    li a5,7
    0x84009b30    0x7d8    auipc a4,0x3
    0x84009b34    0x7dc    sd a5,272(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009b38    0x7e0    li s0,3
    0x84009b3a    0x7e2    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009b3c    0x7e4    auipc a5,0x3
    0x84009b40    0x7e8    addi a5,a5,-828 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009b44    0x7ec    li a4,2
    0x84009b46    0x7ee    sd a4,1088(a5)
    0x84009b4a    0x7f2    li a4,1
    0x84009b4c    0x7f4    sd a4,1048(a5)
    0x84009b50    0x7f8    li s0,3
    0x84009b52    0x7fa    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009b54    0x7fc    auipc a5,0x3
    0x84009b58    0x800    addi a5,a5,-852 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009b5c    0x804    li a4,6
    0x84009b5e    0x806    sd a4,1088(a5)
    0x84009b62    0x80a    sd zero,1080(a5)
    0x84009b66    0x80e    sd zero,1024(a5)
    0x84009b6a    0x812    sd zero,1032(a5)
    0x84009b6e    0x816    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009b70    0x818    auipc a5,0x3
    0x84009b74    0x81c    addi a5,a5,-880 # ffffffff8400c800 <riscvKSASIDTable>
    0x84009b78    0x820    li a4,2
    0x84009b7a    0x822    sd a4,1088(a5)
    0x84009b7e    0x826    sd zero,1048(a5)
    0x84009b82    0x82a    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009b84    0x82c    addi a5,a5,1
    0x84009b86    0x82e    addi a4,a4,8
    0x84009b88    0x830    beq a5,a1,ffffffff84009c04 <decodeRISCVMMUInvocation+0x8ac>
    0x84009b8c    0x834    add a3,a5,a2
    0x84009b90    0x838    beqz a3,ffffffff84009b84 <decodeRISCVMMUInvocation+0x82c>
    0x84009b92    0x83a    ld a3,0(a4)
    0x84009b94    0x83c    bnez a3,ffffffff84009b84 <decodeRISCVMMUInvocation+0x82c>
    0x84009b96    0x83e    li a4,512
    0x84009b9a    0x842    beq a5,a4,ffffffff84009c04 <decodeRISCVMMUInvocation+0x8ac>
    0x84009b9e    0x846    add s0,a5,a2
    0x84009ba2    0x84a    li a1,2
    0x84009ba4    0x84c    auipc a0,0x15
    0x84009ba8    0x850    ld a0,1204(a0) # ffffffff8401f058 <ksCurThread>
    0x84009bac    0x854    jal ra,ffffffff84004a52 <setThreadState>
    0x84009bb0    0x858    ld a3,0(s3)
    0x84009bb4    0x85c    ld a5,8(s3)
    0x84009bb8    0x860    srli a4,a5,0x9
    0x84009bbc    0x864    slli s1,a4,0x19
    0x84009bc0    0x868    srli s1,s1,0x19
    0x84009bc2    0x86a    srli a4,a4,0x26
    0x84009bc4    0x86c    andi a4,a4,1
    0x84009bc6    0x86e    beqz a4,ffffffff84009bce <decodeRISCVMMUInvocation+0x876>
    0x84009bc8    0x870    li a4,-1
    0x84009bca    0x872    slli a4,a4,0x27
    0x84009bcc    0x874    or s1,s1,a4
    0x84009bce    0x876    li a2,-1
    0x84009bd0    0x878    slli a4,a2,0x28
    0x84009bd4    0x87c    and a4,a4,a3
    0x84009bd6    0x87e    li a3,1
    0x84009bd8    0x880    slli a3,a3,0x27
    0x84009bda    0x882    or a4,a4,a3
    0x84009bdc    0x884    sd a4,0(s3)
    0x84009be0    0x888    srli a2,a2,0x10
    0x84009be2    0x88a    and a5,a5,a2
    0x84009be4    0x88c    slli a4,s0,0x30
    0x84009be8    0x890    or a5,a5,a4
    0x84009bea    0x892    sd a5,8(s3)
    0x84009bee    0x896    mv a0,s1
    0x84009bf0    0x898    jal ra,ffffffff84002702 <copyGlobalMappings>
    0x84009bf4    0x89c    andi a5,s0,511
    0x84009bf8    0x8a0    slli a5,a5,0x3
    0x84009bfa    0x8a2    add s4,s4,a5
    0x84009bfc    0x8a4    sd s1,0(s4)
    0x84009c00    0x8a8    mv s0,s2
    0x84009c02    0x8aa    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009c04    0x8ac    li a5,8
    0x84009c06    0x8ae    auipc a4,0x3
    0x84009c0a    0x8b2    sd a5,58(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84009c0e    0x8b6    j ffffffff84009996 <decodeRISCVMMUInvocation+0x63e>
    0x84009c10    0x8b8    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
756 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1098 nodes.

Section finaliseCap (289 of 292)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 231 instructions.
Switch found.
Switch found.

XOR.....
RVC_TFFFTT___FT___FT..

Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
54 stack accesses found. Annotated code for `finaliseCap`:

    0x84005804      0x0    addi sp,sp,-64
    0x84005806      0x2    sd ra,56(sp)          ; stack access
    0x84005808      0x4    sd s0,48(sp)          ; stack access
    0x8400580a      0x6    sd s1,40(sp)          ; stack access
    0x8400580c      0x8    sd s2,32(sp)          ; stack access
    0x8400580e      0xa    sd s3,24(sp)          ; stack access
    0x84005810      0xc    mv s0,a0
    0x84005812      0xe    sd a1,0(sp)           ; stack access
    0x84005814     0x10    sd a2,8(sp)           ; stack access
    0x84005816     0x12    mv s1,a1
    0x84005818     0x14    srli a5,a1,0x3b
    0x8400581c     0x18    andi a2,a5,1
    0x84005820     0x1c    bnez a2,ffffffff8400583e <finaliseCap+0x3a>
    0x84005822     0x1e    ld s2,8(sp)           ; stack access
    0x84005824     0x20    li a2,20
    0x84005826     0x22    bltu a2,a5,ffffffff84005932 <finaliseCap+0x12e>
    0x8400582a     0x26    slli a1,a5,0x2
    0x8400582e     0x2a    auipc a0,0x6
    0x84005832     0x2e    addi a0,a0,1178 # ffffffff8400bcc8 <msgRegisters+0x320>
    0x84005836     0x32    add a1,a1,a0
    0x84005838     0x34    lw a2,0(a1)
    0x8400583a     0x36    add a2,a2,a0
    0x8400583c     0x38    jr a2
    0x8400583e     0x3a    ld a2,8(sp)           ; stack access
    0x84005840     0x3c    jal ra,ffffffff84002f24 <Arch_finaliseCap>
    0x84005844     0x40    mv a0,s0
    0x84005846     0x42    ld ra,56(sp)          ; stack access
    0x84005848     0x44    ld s0,48(sp)          ; stack access
    0x8400584a     0x46    ld s1,40(sp)          ; stack access
    0x8400584c     0x48    ld s2,32(sp)          ; stack access
    0x8400584e     0x4a    ld s3,24(sp)          ; stack access
    0x84005850     0x4c    addi sp,sp,64
    0x84005852     0x4e    ret
    0x84005854     0x50    beqz a3,ffffffff8400586c <finaliseCap+0x68>
    0x84005856     0x52    slli a0,s1,0x19
    0x8400585a     0x56    srli a0,a0,0x19
    0x8400585c     0x58    srli s1,s1,0x26
    0x8400585e     0x5a    andi s1,s1,1
    0x84005860     0x5c    beqz s1,ffffffff84005868 <finaliseCap+0x64>
    0x84005862     0x5e    li a5,-1
    0x84005864     0x60    slli a5,a5,0x27
    0x84005866     0x62    or a0,a0,a5
    0x84005868     0x64    jal ra,ffffffff84004d4e <cancelAllIPC>
    0x8400586c     0x68    sd zero,0(s0)         ; stack access
    0x84005870     0x6c    sd zero,8(s0)         ; stack access
    0x84005874     0x70    sd zero,16(s0)        ; stack access
    0x84005878     0x74    sd zero,24(s0)        ; stack access
    0x8400587c     0x78    j ffffffff84005844 <finaliseCap+0x40>
    0x8400587e     0x7a    beqz a3,ffffffff840058b8 <finaliseCap+0xb4>
    0x84005880     0x7c    slli a5,s1,0x19
    0x84005884     0x80    srli a5,a5,0x19
    0x84005886     0x82    srli s1,s1,0x26
    0x84005888     0x84    andi s1,s1,1
    0x8400588a     0x86    beqz s1,ffffffff84005892 <finaliseCap+0x8e>
    0x8400588c     0x88    li a4,-1
    0x8400588e     0x8a    slli a4,a4,0x27
    0x84005890     0x8c    or a5,a5,a4
    0x84005892     0x8e    mv s1,a5
    0x84005894     0x90    ld a5,32(a5)
    0x84005896     0x92    slli a0,a5,0x19
    0x8400589a     0x96    srli a0,a0,0x19
    0x8400589c     0x98    srli a5,a5,0x26
    0x8400589e     0x9a    andi a5,a5,1
    0x840058a0     0x9c    beqz a5,ffffffff840058a8 <finaliseCap+0xa4>
    0x840058a2     0x9e    li a5,-1
    0x840058a4     0xa0    slli a5,a5,0x27
    0x840058a6     0xa2    or a0,a0,a5
    0x840058a8     0xa4    jal ra,ffffffff840047ac <schedContext_unbindNtfn>
    0x840058ac     0xa8    mv a0,s1
    0x840058ae     0xaa    jal ra,ffffffff84003f92 <unbindMaybeNotification>
    0x840058b2     0xae    mv a0,s1
    0x840058b4     0xb0    jal ra,ffffffff84004df4 <cancelAllSignals>
    0x840058b8     0xb4    sd zero,0(s0)         ; stack access
    0x840058bc     0xb8    sd zero,8(s0)         ; stack access
    0x840058c0     0xbc    sd zero,16(s0)        ; stack access
    0x840058c4     0xc0    sd zero,24(s0)        ; stack access
    0x840058c8     0xc4    j ffffffff84005844 <finaliseCap+0x40>
    0x840058ca     0xc6    beqz a3,ffffffff840058ee <finaliseCap+0xea>
    0x840058cc     0xc8    beqz s2,ffffffff840058ee <finaliseCap+0xea>
    0x840058d0     0xcc    ld a0,0(s2)
    0x840058d4     0xd0    beqz a0,ffffffff840058ee <finaliseCap+0xea>
    0x840058d6     0xd2    ld a5,280(a0)
    0x840058da     0xd6    andi a5,a5,15
    0x840058dc     0xd8    li a4,3
    0x840058de     0xda    beq a5,a4,ffffffff84005900 <finaliseCap+0xfc>
    0x840058e2     0xde    li a4,5
    0x840058e4     0xe0    bne a5,a4,ffffffff8400591c <finaliseCap+0x118>
    0x840058e8     0xe4    mv a0,s2
    0x840058ea     0xe6    jal ra,ffffffff840051d4 <reply_remove>
    0x840058ee     0xea    sd zero,0(s0)         ; stack access
    0x840058f2     0xee    sd zero,8(s0)         ; stack access
    0x840058f6     0xf2    sd zero,16(s0)        ; stack access
    0x840058fa     0xf6    sd zero,24(s0)        ; stack access
    0x840058fe     0xfa    j ffffffff84005844 <finaliseCap+0x40>
    0x84005900     0xfc    ld a4,288(a0)
    0x84005904    0x100    li a5,-1
    0x84005906    0x102    slli a5,a5,0x28
    0x84005908    0x104    addi a5,a5,31
    0x8400590a    0x106    and a5,a5,a4
    0x8400590c    0x108    sd a5,288(a0)
    0x84005910    0x10c    sd zero,0(s2)
    0x84005914    0x110    li a1,0
    0x84005916    0x112    jal ra,ffffffff84004a52 <setThreadState>
    0x8400591a    0x116    j ffffffff840058ee <finaliseCap+0xea>
    0x8400591c    0x118    jal ra,ffffffff84002424 <halt>
    0x84005920    0x11c    sd zero,0(s0)         ; stack access
    0x84005924    0x120    sd zero,8(s0)         ; stack access
    0x84005928    0x124    sd zero,16(s0)        ; stack access
    0x8400592c    0x128    sd zero,24(s0)        ; stack access
    0x84005930    0x12c    j ffffffff84005844 <finaliseCap+0x40>
    0x84005932    0x12e    bnez a4,ffffffff8400594e <finaliseCap+0x14a>
    0x84005934    0x130    addi a5,a5,-10
    0x84005936    0x132    li a4,12
    0x84005938    0x134    bltu a4,a5,ffffffff84005a6a <finaliseCap+0x266>
    0x8400593c    0x138    slli a5,a5,0x2
    0x8400593e    0x13a    auipc a4,0x6
    0x84005942    0x13e    addi a4,a4,990 # ffffffff8400bd1c <msgRegisters+0x374>
    0x84005946    0x142    add a5,a5,a4
    0x84005948    0x144    lw a5,0(a5)
    0x8400594a    0x146    add a5,a5,a4
    0x8400594c    0x148    jr a5
    0x8400594e    0x14a    jal ra,ffffffff84002424 <halt>
    0x84005952    0x14e    beqz a3,ffffffff84005a6a <finaliseCap+0x266>
    0x84005956    0x152    srli a3,s1,0x2f
    0x8400595a    0x156    andi a0,a3,63
    0x8400595e    0x15a    mv a3,a0
    0x84005960    0x15c    li a2,1
    0x84005962    0x15e    sll a1,a2,a0
    0x84005966    0x162    slli s1,s1,0x1
    0x84005968    0x164    lui a5,0xfc000
    0x8400596c    0x168    srli a5,a5,0x19
    0x8400596e    0x16a    and a4,s1,a5
    0x84005972    0x16e    slli a2,a2,0x26
    0x84005974    0x170    and s1,s1,a2
    0x84005976    0x172    beqz s1,ffffffff8400597e <finaliseCap+0x17a>
    0x84005978    0x174    li a5,-1
    0x8400597a    0x176    slli a5,a5,0x27
    0x8400597c    0x178    or a4,a4,a5
    0x8400597e    0x17a    li a5,-7
    0x84005980    0x17c    slli a5,a5,0x3c
    0x84005982    0x17e    or a5,a5,a0
    0x84005984    0x180    sd a5,0(s0)           ; stack access
    0x84005986    0x182    addiw a3,a3,1
    0x84005988    0x184    li a5,-1
    0x8400598a    0x186    sll a5,a5,a3
    0x8400598e    0x18a    not a5,a5
    0x84005992    0x18e    xor a3,a1,a4
    0x84005996    0x192    and a5,a5,a3
    0x84005998    0x194    xor a5,a5,a4
    0x8400599a    0x196    sd a5,8(s0)           ; stack access
    0x8400599c    0x198    sd zero,16(s0)        ; stack access
    0x840059a0    0x19c    sd zero,24(s0)        ; stack access
    0x840059a4    0x1a0    j ffffffff84005844 <finaliseCap+0x40>
    0x840059a6    0x1a2    beqz a3,ffffffff84005a6a <finaliseCap+0x266>
    0x840059a8    0x1a4    slli s2,s1,0x19
    0x840059ac    0x1a8    srli s2,s2,0x19
    0x840059b0    0x1ac    srli a5,s1,0x26
    0x840059b4    0x1b0    andi a5,a5,1
    0x840059b6    0x1b2    beqz a5,ffffffff840059c0 <finaliseCap+0x1bc>
    0x840059b8    0x1b4    li a5,-1
    0x840059ba    0x1b6    slli a5,a5,0x27
    0x840059bc    0x1b8    or s2,s2,a5
    0x840059c0    0x1bc    mv s3,s2
    0x840059c2    0x1be    andi s1,s2,-1024
    0x840059c6    0x1c2    mv a0,s2
    0x840059c8    0x1c4    jal ra,ffffffff84003fb8 <unbindNotification>
    0x840059cc    0x1c8    ld a5,368(s2)
    0x840059d0    0x1cc    beqz a5,ffffffff840059e2 <finaliseCap+0x1de>
    0x840059d2    0x1ce    ld a0,56(a5)
    0x840059d4    0x1d0    jal ra,ffffffff840048ea <schedContext_completeYieldTo>
    0x840059d8    0x1d4    mv a1,s2
    0x840059da    0x1d6    ld a0,368(s2)
    0x840059de    0x1da    jal ra,ffffffff840057b8 <schedContext_unbindTCB>
    0x840059e2    0x1de    mv a0,s3
    0x840059e4    0x1e0    jal ra,ffffffff84005774 <suspend>
    0x840059e8    0x1e4    li a5,-7
    0x840059ea    0x1e6    slli a5,a5,0x3c
    0x840059ec    0x1e8    addi a5,a5,64 # fffffffffc000040 <ki_end+0x77fdc040>
    0x840059f0    0x1ec    sd a5,0(s0)           ; stack access
    0x840059f2    0x1ee    xori s1,s1,5
    0x840059f6    0x1f2    sd s1,8(s0)           ; stack access
    0x840059f8    0x1f4    sd zero,16(s0)        ; stack access
    0x840059fc    0x1f8    sd zero,24(s0)        ; stack access
    0x84005a00    0x1fc    j ffffffff84005844 <finaliseCap+0x40>
    0x84005a02    0x1fe    beqz a3,ffffffff84005a6a <finaliseCap+0x266>
    0x84005a04    0x200    srli s2,s2,0x10
    0x84005a08    0x204    slli s1,s2,0x19
    0x84005a0c    0x208    srli s1,s1,0x19
    0x84005a0e    0x20a    srli s2,s2,0x26
    0x84005a12    0x20e    andi a5,s2,1
    0x84005a16    0x212    beqz a5,ffffffff84005a1e <finaliseCap+0x21a>
    0x84005a18    0x214    li a5,-1
    0x84005a1a    0x216    slli a5,a5,0x27
    0x84005a1c    0x218    or s1,s1,a5
    0x84005a1e    0x21a    mv s2,s1
    0x84005a20    0x21c    mv a0,s1
    0x84005a22    0x21e    jal ra,ffffffff840057f0 <schedContext_unbindAllTCBs>
    0x84005a26    0x222    mv a0,s1
    0x84005a28    0x224    jal ra,ffffffff840047ac <schedContext_unbindNtfn>
    0x84005a2c    0x228    ld a5,32(s1)
    0x84005a2e    0x22a    beqz a5,ffffffff84005a38 <finaliseCap+0x234>
    0x84005a30    0x22c    sd zero,16(a5)
    0x84005a34    0x230    sd zero,32(s1)
    0x84005a38    0x234    ld a0,56(s2)
    0x84005a3c    0x238    beqz a0,ffffffff84005a42 <finaliseCap+0x23e>
    0x84005a3e    0x23a    jal ra,ffffffff840048ea <schedContext_completeYieldTo>
    0x84005a42    0x23e    sd zero,64(s2)
    0x84005a46    0x242    sd zero,0(s0)         ; stack access
    0x84005a4a    0x246    sd zero,8(s0)         ; stack access
    0x84005a4e    0x24a    sd zero,16(s0)        ; stack access
    0x84005a52    0x24e    sd zero,24(s0)        ; stack access
    0x84005a56    0x252    j ffffffff84005844 <finaliseCap+0x40>
    0x84005a58    0x254    sd s1,0(s0)           ; stack access
    0x84005a5a    0x256    sd s2,8(s0)           ; stack access
    0x84005a5e    0x25a    sd zero,16(s0)        ; stack access
    0x84005a62    0x25e    sd zero,24(s0)        ; stack access
    0x84005a66    0x262    j ffffffff84005844 <finaliseCap+0x40>
    0x84005a68    0x264    bnez a3,ffffffff84005a7c <finaliseCap+0x278>
    0x84005a6a    0x266    sd zero,0(s0)         ; stack access
    0x84005a6e    0x26a    sd zero,8(s0)         ; stack access
    0x84005a72    0x26e    sd zero,16(s0)        ; stack access
    0x84005a76    0x272    sd zero,24(s0)        ; stack access
    0x84005a7a    0x276    j ffffffff84005844 <finaliseCap+0x40>
    0x84005a7c    0x278    slli a0,s2,0x34
    0x84005a80    0x27c    srli a0,a0,0x34
    0x84005a82    0x27e    jal ra,ffffffff84005be4 <deletingIRQHandler>
    0x84005a86    0x282    sd zero,0(s0)         ; stack access
    0x84005a8a    0x286    sd zero,8(s0)         ; stack access
    0x84005a8e    0x28a    sd s1,16(s0)          ; stack access
    0x84005a90    0x28c    sd s2,24(s0)          ; stack access
    0x84005a94    0x290    j ffffffff84005844 <finaliseCap+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
219 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 469 nodes.

Section decodeCNodeInvocation (290 of 292)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 405 instructions.


Stack analysis
---------------

78 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x84007446      0x0    addi sp,sp,-224
    0x84007448      0x2    sd ra,216(sp)         ; stack access
    0x8400744a      0x4    sd s0,208(sp)         ; stack access
    0x8400744c      0x6    sd s1,200(sp)         ; stack access
    0x8400744e      0x8    sd s2,192(sp)         ; stack access
    0x84007450      0xa    sd s3,184(sp)         ; stack access
    0x84007452      0xc    sd s4,176(sp)         ; stack access
    0x84007454      0xe    sd s5,168(sp)         ; stack access
    0x84007456     0x10    sd s6,160(sp)         ; stack access
    0x84007458     0x12    sd s7,152(sp)         ; stack access
    0x8400745a     0x14    sd a2,0(sp)           ; stack access
    0x8400745c     0x16    sd a3,8(sp)           ; stack access
    0x8400745e     0x18    addi a3,a0,-17
    0x84007462     0x1c    li a5,7
    0x84007464     0x1e    bltu a5,a3,ffffffff84007518 <decodeCNodeInvocation+0xd2>
    0x84007468     0x22    mv s1,a0
    0x8400746a     0x24    mv s2,a1
    0x8400746c     0x26    mv s3,a4
    0x8400746e     0x28    li a5,1
    0x84007470     0x2a    bgeu a5,a1,ffffffff84007526 <decodeCNodeInvocation+0xe0>
    0x84007474     0x2e    auipc a5,0x18
    0x84007478     0x32    ld a5,-1052(a5) # ffffffff8401f058 <ksCurThread>
    0x8400747c     0x36    ld a3,96(a5)
    0x8400747e     0x38    ld a2,88(a5)
    0x84007480     0x3a    ld a0,0(sp)           ; stack access
    0x84007482     0x3c    ld a1,8(sp)           ; stack access
    0x84007484     0x3e    jal ra,ffffffff840035b8 <lookupTargetSlot>
    0x84007488     0x42    sd a0,112(sp)         ; stack access
    0x8400748a     0x44    sd a1,120(sp)         ; stack access
    0x8400748c     0x46    mv s0,a0
    0x8400748e     0x48    bnez a0,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007490     0x4a    mv s4,a1
    0x84007492     0x4c    addi a5,s1,-20
    0x84007496     0x50    li a4,3
    0x84007498     0x52    bltu a4,a5,ffffffff84007694 <decodeCNodeInvocation+0x24e>
    0x8400749c     0x56    li a5,3
    0x8400749e     0x58    bgeu a5,s2,ffffffff8400754a <decodeCNodeInvocation+0x104>
    0x840074a2     0x5c    auipc a5,0x6
    0x840074a6     0x60    ld a5,-1042(a5) # ffffffff8400d090 <current_extra_caps>
    0x840074aa     0x64    beqz a5,ffffffff8400754a <decodeCNodeInvocation+0x104>
    0x840074ac     0x66    auipc a4,0x18
    0x840074b0     0x6a    ld a4,-1108(a4) # ffffffff8401f058 <ksCurThread>
    0x840074b4     0x6e    ld s6,104(a4)
    0x840074b8     0x72    ld s5,112(a4)
    0x840074bc     0x76    ld a4,0(a5)
    0x840074be     0x78    sd a4,24(sp)          ; stack access
    0x840074c0     0x7a    ld a5,8(a5)
    0x840074c2     0x7c    sd a5,32(sp)          ; stack access
    0x840074c4     0x7e    mv a0,a1
    0x840074c6     0x80    jal ra,ffffffff84003dae <ensureEmptySlot>
    0x840074ca     0x84    mv s0,a0
    0x840074cc     0x86    bnez a0,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840074ce     0x88    mv a3,s5
    0x840074d0     0x8a    mv a2,s6
    0x840074d2     0x8c    ld a0,24(sp)          ; stack access
    0x840074d4     0x8e    ld a1,32(sp)          ; stack access
    0x840074d6     0x90    jal ra,ffffffff8400359e <lookupSourceSlot>
    0x840074da     0x94    sd a0,112(sp)         ; stack access
    0x840074dc     0x96    sd a1,120(sp)         ; stack access
    0x840074de     0x98    mv s0,a0
    0x840074e0     0x9a    bnez a0,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840074e2     0x9c    mv s6,a1
    0x840074e4     0x9e    ld s7,0(a1)
    0x840074e8     0xa2    srli a5,s7,0x3b
    0x840074ec     0xa6    beqz a5,ffffffff84007558 <decodeCNodeInvocation+0x112>
    0x840074ee     0xa8    li a5,22
    0x840074f0     0xaa    beq s1,a5,ffffffff84007626 <decodeCNodeInvocation+0x1e0>
    0x840074f4     0xae    bltu a5,s1,ffffffff84007650 <decodeCNodeInvocation+0x20a>
    0x840074f8     0xb2    li a5,20
    0x840074fa     0xb4    beq s1,a5,ffffffff84007584 <decodeCNodeInvocation+0x13e>
    0x840074fe     0xb8    li a5,21
    0x84007500     0xba    bne s1,a5,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007504     0xbe    li a5,5
    0x84007506     0xc0    bltu a5,s2,ffffffff840075ea <decodeCNodeInvocation+0x1a4>
    0x8400750a     0xc4    li a5,7
    0x8400750c     0xc6    auipc a4,0x5
    0x84007510     0xca    sd a5,1844(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007514     0xce    li s0,3
    0x84007516     0xd0    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007518     0xd2    li a5,3
    0x8400751a     0xd4    auipc a4,0x5
    0x8400751e     0xd8    sd a5,1830(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007522     0xdc    li s0,3
    0x84007524     0xde    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007526     0xe0    li a5,7
    0x84007528     0xe2    auipc a4,0x5
    0x8400752c     0xe6    sd a5,1816(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007530     0xea    li s0,3
    0x84007532     0xec    mv a0,s0
    0x84007534     0xee    ld ra,216(sp)         ; stack access
    0x84007536     0xf0    ld s0,208(sp)         ; stack access
    0x84007538     0xf2    ld s1,200(sp)         ; stack access
    0x8400753a     0xf4    ld s2,192(sp)         ; stack access
    0x8400753c     0xf6    ld s3,184(sp)         ; stack access
    0x8400753e     0xf8    ld s4,176(sp)         ; stack access
    0x84007540     0xfa    ld s5,168(sp)         ; stack access
    0x84007542     0xfc    ld s6,160(sp)         ; stack access
    0x84007544     0xfe    ld s7,152(sp)         ; stack access
    0x84007546    0x100    addi sp,sp,224
    0x84007548    0x102    ret
    0x8400754a    0x104    li a5,7
    0x8400754c    0x106    auipc a4,0x5
    0x84007550    0x10a    sd a5,1780(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007554    0x10e    li s0,3
    0x84007556    0x110    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007558    0x112    auipc a4,0x5
    0x8400755c    0x116    addi a4,a4,680 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007560    0x11a    li a5,6
    0x84007562    0x11c    sd a5,1088(a4)
    0x84007566    0x120    li a5,1
    0x84007568    0x122    sd a5,1080(a4)
    0x8400756c    0x126    slli a5,s5,0x2
    0x84007570    0x12a    andi a5,a5,508
    0x84007574    0x12e    ori a5,a5,1
    0x84007578    0x132    sd a5,1024(a4)
    0x8400757c    0x136    sd zero,1032(a4)
    0x84007580    0x13a    li s0,3
    0x84007582    0x13c    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007584    0x13e    li a5,4
    0x84007586    0x140    bltu a5,s2,ffffffff84007598 <decodeCNodeInvocation+0x152>
    0x8400758a    0x144    li a5,7
    0x8400758c    0x146    auipc a4,0x5
    0x84007590    0x14a    sd a5,1716(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007594    0x14e    li s0,3
    0x84007596    0x150    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007598    0x152    ld a1,0(a1)
    0x8400759a    0x154    ld a2,8(s6)
    0x8400759e    0x158    ld a0,40(s3)
    0x840075a2    0x15c    jal ra,ffffffff84004688 <maskCapRights>
    0x840075a6    0x160    mv a2,a0
    0x840075a8    0x162    mv a3,a1
    0x840075aa    0x164    sd a0,56(sp)          ; stack access
    0x840075ac    0x166    sd a1,64(sp)          ; stack access
    0x840075ae    0x168    mv a1,s6
    0x840075b0    0x16a    addi a0,sp,88
    0x840075b2    0x16c    jal ra,ffffffff840044a4 <deriveCap>
    0x840075b6    0x170    ld a5,88(sp)          ; stack access
    0x840075b8    0x172    bnez a5,ffffffff8400768c <decodeCNodeInvocation+0x246>
    0x840075ba    0x174    ld s1,96(sp)          ; stack access
    0x840075bc    0x176    sd s1,40(sp)          ; stack access
    0x840075be    0x178    ld a5,104(sp)         ; stack access
    0x840075c0    0x17a    sd a5,48(sp)          ; stack access
    0x840075c2    0x17c    srli a5,s1,0x3b
    0x840075c6    0x180    beqz a5,ffffffff84007670 <decodeCNodeInvocation+0x22a>
    0x840075c8    0x182    li a1,2
    0x840075ca    0x184    auipc a0,0x18
    0x840075ce    0x188    ld a0,-1394(a0) # ffffffff8401f058 <ksCurThread>
    0x840075d2    0x18c    jal ra,ffffffff84004a52 <setThreadState>
    0x840075d6    0x190    sd s1,40(sp)          ; stack access
    0x840075d8    0x192    sd s1,72(sp)          ; stack access
    0x840075da    0x194    ld a1,48(sp)          ; stack access
    0x840075dc    0x196    sd a1,80(sp)          ; stack access
    0x840075de    0x198    mv a3,s4
    0x840075e0    0x19a    mv a2,s6
    0x840075e2    0x19c    mv a0,s1
    0x840075e4    0x19e    jal ra,ffffffff84003aba <cteInsert>
    0x840075e8    0x1a2    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840075ea    0x1a4    ld s1,48(s3)
    0x840075ee    0x1a8    ld a1,0(a1)
    0x840075f0    0x1aa    ld a2,8(s6)
    0x840075f4    0x1ae    ld a0,40(s3)
    0x840075f8    0x1b2    jal ra,ffffffff84004688 <maskCapRights>
    0x840075fc    0x1b6    mv a2,a0
    0x840075fe    0x1b8    mv a3,a1
    0x84007600    0x1ba    sd a0,56(sp)          ; stack access
    0x84007602    0x1bc    sd a1,64(sp)          ; stack access
    0x84007604    0x1be    mv a1,s1
    0x84007606    0x1c0    li a0,0
    0x84007608    0x1c2    jal ra,ffffffff840045f8 <updateCapData>
    0x8400760c    0x1c6    mv a2,a0
    0x8400760e    0x1c8    mv a3,a1
    0x84007610    0x1ca    mv a1,s6
    0x84007612    0x1cc    addi a0,sp,88
    0x84007614    0x1ce    jal ra,ffffffff840044a4 <deriveCap>
    0x84007618    0x1d2    ld a5,88(sp)          ; stack access
    0x8400761a    0x1d4    bnez a5,ffffffff84007690 <decodeCNodeInvocation+0x24a>
    0x8400761c    0x1d6    ld s1,96(sp)          ; stack access
    0x8400761e    0x1d8    sd s1,40(sp)          ; stack access
    0x84007620    0x1da    ld a5,104(sp)         ; stack access
    0x84007622    0x1dc    sd a5,48(sp)          ; stack access
    0x84007624    0x1de    j ffffffff840075c2 <decodeCNodeInvocation+0x17c>
    0x84007626    0x1e0    ld a5,0(a1)
    0x84007628    0x1e2    sd a5,40(sp)          ; stack access
    0x8400762a    0x1e4    ld a5,8(a1)
    0x8400762c    0x1e6    sd a5,48(sp)          ; stack access
    0x8400762e    0x1e8    li a1,2
    0x84007630    0x1ea    auipc a0,0x18
    0x84007634    0x1ee    ld a0,-1496(a0) # ffffffff8401f058 <ksCurThread>
    0x84007638    0x1f2    jal ra,ffffffff84004a52 <setThreadState>
    0x8400763c    0x1f6    sd s7,40(sp)          ; stack access
    0x8400763e    0x1f8    sd s7,88(sp)          ; stack access
    0x84007640    0x1fa    ld a1,48(sp)          ; stack access
    0x84007642    0x1fc    sd a1,96(sp)          ; stack access
    0x84007644    0x1fe    mv a3,s4
    0x84007646    0x200    mv a2,s6
    0x84007648    0x202    mv a0,s7
    0x8400764a    0x204    jal ra,ffffffff84003bf6 <cteMove>
    0x8400764e    0x208    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007650    0x20a    li a5,4
    0x84007652    0x20c    bgeu a5,s2,ffffffff8400767e <decodeCNodeInvocation+0x238>
    0x84007656    0x210    ld a2,0(a1)
    0x84007658    0x212    ld a3,8(a1)
    0x8400765a    0x214    ld a1,40(s3)
    0x8400765e    0x218    li a0,1
    0x84007660    0x21a    jal ra,ffffffff840045f8 <updateCapData>
    0x84007664    0x21e    sd a0,40(sp)          ; stack access
    0x84007666    0x220    sd a1,48(sp)          ; stack access
    0x84007668    0x222    mv s7,a0
    0x8400766a    0x224    srli a0,a0,0x3b
    0x8400766c    0x226    bnez a0,ffffffff8400789c <decodeCNodeInvocation+0x456>
    0x84007670    0x22a    li a5,3
    0x84007672    0x22c    auipc a4,0x5
    0x84007676    0x230    sd a5,1486(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400767a    0x234    li s0,3
    0x8400767c    0x236    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x8400767e    0x238    li a5,7
    0x84007680    0x23a    auipc a4,0x5
    0x84007684    0x23e    sd a5,1472(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007688    0x242    li s0,3
    0x8400768a    0x244    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x8400768c    0x246    mv s0,a5
    0x8400768e    0x248    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007690    0x24a    mv s0,a5
    0x84007692    0x24c    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007694    0x24e    li a5,17
    0x84007696    0x250    beq s1,a5,ffffffff84007792 <decodeCNodeInvocation+0x34c>
    0x8400769a    0x254    li a5,18
    0x8400769c    0x256    beq s1,a5,ffffffff840077aa <decodeCNodeInvocation+0x364>
    0x840076a0    0x25a    li a5,19
    0x840076a2    0x25c    beq s1,a5,ffffffff840077c2 <decodeCNodeInvocation+0x37c>
    0x840076a6    0x260    li a5,24
    0x840076a8    0x262    bne s1,a5,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840076ac    0x266    li a5,7
    0x840076ae    0x268    bgeu a5,s2,ffffffff840077f8 <decodeCNodeInvocation+0x3b2>
    0x840076b2    0x26c    auipc a5,0x6
    0x840076b6    0x270    ld a5,-1570(a5) # ffffffff8400d090 <current_extra_caps>
    0x840076ba    0x274    beqz a5,ffffffff840077f8 <decodeCNodeInvocation+0x3b2>
    0x840076be    0x278    auipc a4,0x6
    0x840076c2    0x27c    ld a4,-1574(a4) # ffffffff8400d098 <current_extra_caps+0x8>
    0x840076c6    0x280    beqz a4,ffffffff840077f8 <decodeCNodeInvocation+0x3b2>
    0x840076ca    0x284    auipc a3,0x18
    0x840076ce    0x288    ld a3,-1650(a3) # ffffffff8401f058 <ksCurThread>
    0x840076d2    0x28c    ld s5,104(a3)
    0x840076d6    0x290    ld s7,112(a3)
    0x840076da    0x294    ld s2,40(s3)
    0x840076de    0x298    ld s6,48(s3)
    0x840076e2    0x29c    ld s1,64(s3)
    0x840076e6    0x2a0    ld a3,0(a5)
    0x840076e8    0x2a2    sd a3,40(sp)          ; stack access
    0x840076ea    0x2a4    ld a5,8(a5)
    0x840076ec    0x2a6    sd a5,48(sp)          ; stack access
    0x840076ee    0x2a8    ld a0,0(a4)
    0x840076f0    0x2aa    sd a0,56(sp)          ; stack access
    0x840076f2    0x2ac    ld a1,8(a4)
    0x840076f4    0x2ae    sd a1,64(sp)          ; stack access
    0x840076f6    0x2b0    mv a3,s1
    0x840076f8    0x2b2    ld a2,56(s3)
    0x840076fc    0x2b6    jal ra,ffffffff8400359e <lookupSourceSlot>
    0x84007700    0x2ba    sd a1,120(sp)         ; stack access
    0x84007702    0x2bc    mv s0,a0
    0x84007704    0x2be    bnez a0,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007708    0x2c2    mv s3,a1
    0x8400770a    0x2c4    mv a3,s2
    0x8400770c    0x2c6    mv a2,s7
    0x8400770e    0x2c8    ld a0,40(sp)          ; stack access
    0x84007710    0x2ca    ld a1,48(sp)          ; stack access
    0x84007712    0x2cc    jal ra,ffffffff840035d2 <lookupPivotSlot>
    0x84007716    0x2d0    sd a0,112(sp)         ; stack access
    0x84007718    0x2d2    sd a1,120(sp)         ; stack access
    0x8400771a    0x2d4    mv s0,a0
    0x8400771c    0x2d6    bnez a0,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007720    0x2da    mv s7,a1
    0x84007722    0x2dc    beq s3,a1,ffffffff84007806 <decodeCNodeInvocation+0x3c0>
    0x84007726    0x2e0    beq s4,a1,ffffffff84007806 <decodeCNodeInvocation+0x3c0>
    0x8400772a    0x2e4    beq s4,s3,ffffffff8400773a <decodeCNodeInvocation+0x2f4>
    0x8400772e    0x2e8    mv a0,s4
    0x84007730    0x2ea    jal ra,ffffffff84003dae <ensureEmptySlot>
    0x84007734    0x2ee    mv s0,a0
    0x84007736    0x2f0    bnez a0,ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x8400773a    0x2f4    ld a5,0(s3)
    0x8400773e    0x2f8    srli a5,a5,0x3b
    0x84007740    0x2fa    beqz a5,ffffffff84007814 <decodeCNodeInvocation+0x3ce>
    0x84007742    0x2fc    ld a5,0(s7)
    0x84007746    0x300    srli a5,a5,0x3b
    0x84007748    0x302    beqz a5,ffffffff84007840 <decodeCNodeInvocation+0x3fa>
    0x8400774c    0x306    ld a2,0(s3)
    0x84007750    0x30a    ld a3,8(s3)
    0x84007754    0x30e    mv a1,s6
    0x84007756    0x310    li a0,1
    0x84007758    0x312    jal ra,ffffffff840045f8 <updateCapData>
    0x8400775c    0x316    mv s0,a0
    0x8400775e    0x318    sd a0,72(sp)          ; stack access
    0x84007760    0x31a    sd a1,80(sp)          ; stack access
    0x84007762    0x31c    ld a2,0(s7)
    0x84007766    0x320    ld a3,8(s7)
    0x8400776a    0x324    mv a1,s5
    0x8400776c    0x326    li a0,1
    0x8400776e    0x328    jal ra,ffffffff840045f8 <updateCapData>
    0x84007772    0x32c    sd a0,88(sp)          ; stack access
    0x84007774    0x32e    sd a1,96(sp)          ; stack access
    0x84007776    0x330    srli s0,s0,0x3b
    0x84007778    0x332    beqz s0,ffffffff8400786a <decodeCNodeInvocation+0x424>
    0x8400777c    0x336    ld a5,88(sp)          ; stack access
    0x8400777e    0x338    srli a5,a5,0x3b
    0x84007780    0x33a    bnez a5,ffffffff84007878 <decodeCNodeInvocation+0x432>
    0x84007784    0x33e    li a5,3
    0x84007786    0x340    auipc a4,0x5
    0x8400778a    0x344    sd a5,1210(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400778e    0x348    li s0,3
    0x84007790    0x34a    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007792    0x34c    li a1,2
    0x84007794    0x34e    auipc a0,0x18
    0x84007798    0x352    ld a0,-1852(a0) # ffffffff8401f058 <ksCurThread>
    0x8400779c    0x356    jal ra,ffffffff84004a52 <setThreadState>
    0x840077a0    0x35a    mv a0,s4
    0x840077a2    0x35c    jal ra,ffffffff840073b4 <cteRevoke>
    0x840077a6    0x360    mv s0,a0
    0x840077a8    0x362    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840077aa    0x364    li a1,2
    0x840077ac    0x366    auipc a0,0x18
    0x840077b0    0x36a    ld a0,-1876(a0) # ffffffff8401f058 <ksCurThread>
    0x840077b4    0x36e    jal ra,ffffffff84004a52 <setThreadState>
    0x840077b8    0x372    mv a0,s4
    0x840077ba    0x374    jal ra,ffffffff840073a4 <invokeCNodeDelete>
    0x840077be    0x378    mv s0,a0
    0x840077c0    0x37a    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840077c2    0x37c    ld a0,0(a1)
    0x840077c4    0x37e    sd a0,88(sp)          ; stack access
    0x840077c6    0x380    ld a1,8(a1)
    0x840077c8    0x382    sd a1,96(sp)          ; stack access
    0x840077ca    0x384    jal ra,ffffffff84004034 <hasCancelSendRights>
    0x840077ce    0x388    bnez a0,ffffffff840077de <decodeCNodeInvocation+0x398>
    0x840077d0    0x38a    li a5,3
    0x840077d2    0x38c    auipc a4,0x5
    0x840077d6    0x390    sd a5,1134(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x840077da    0x394    li s0,3
    0x840077dc    0x396    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840077de    0x398    li a1,2
    0x840077e0    0x39a    auipc a0,0x18
    0x840077e4    0x39e    ld a0,-1928(a0) # ffffffff8401f058 <ksCurThread>
    0x840077e8    0x3a2    jal ra,ffffffff84004a52 <setThreadState>
    0x840077ec    0x3a6    ld a0,88(sp)          ; stack access
    0x840077ee    0x3a8    ld a1,96(sp)          ; stack access
    0x840077f0    0x3aa    jal ra,ffffffff840053a4 <invokeCNodeCancelBadgedSends>
    0x840077f4    0x3ae    mv s0,a0
    0x840077f6    0x3b0    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x840077f8    0x3b2    li a5,7
    0x840077fa    0x3b4    auipc a4,0x5
    0x840077fe    0x3b8    sd a5,1094(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007802    0x3bc    li s0,3
    0x84007804    0x3be    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007806    0x3c0    li a5,3
    0x84007808    0x3c2    auipc a4,0x5
    0x8400780c    0x3c6    sd a5,1080(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007810    0x3ca    li s0,3
    0x84007812    0x3cc    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007814    0x3ce    auipc a4,0x5
    0x84007818    0x3d2    addi a4,a4,-20 # ffffffff8400c800 <riscvKSASIDTable>
    0x8400781c    0x3d6    li a5,6
    0x8400781e    0x3d8    sd a5,1088(a4)
    0x84007822    0x3dc    li a5,1
    0x84007824    0x3de    sd a5,1080(a4)
    0x84007828    0x3e2    slli a5,s1,0x2
    0x8400782c    0x3e6    andi a5,a5,508
    0x84007830    0x3ea    ori a5,a5,1
    0x84007834    0x3ee    sd a5,1024(a4)
    0x84007838    0x3f2    sd zero,1032(a4)
    0x8400783c    0x3f6    li s0,3
    0x8400783e    0x3f8    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007840    0x3fa    auipc a4,0x5
    0x84007844    0x3fe    addi a4,a4,-64 # ffffffff8400c800 <riscvKSASIDTable>
    0x84007848    0x402    li a5,6
    0x8400784a    0x404    sd a5,1088(a4)
    0x8400784e    0x408    sd zero,1080(a4)
    0x84007852    0x40c    slli a5,s2,0x2
    0x84007856    0x410    andi a5,a5,508
    0x8400785a    0x414    ori a5,a5,1
    0x8400785e    0x418    sd a5,1024(a4)
    0x84007862    0x41c    sd zero,1032(a4)
    0x84007866    0x420    li s0,3
    0x84007868    0x422    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x8400786a    0x424    li a5,3
    0x8400786c    0x426    auipc a4,0x5
    0x84007870    0x42a    sd a5,980(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x84007874    0x42e    li s0,3
    0x84007876    0x430    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x84007878    0x432    li a1,2
    0x8400787a    0x434    auipc a0,0x17
    0x8400787e    0x438    ld a0,2014(a0) # ffffffff8401f058 <ksCurThread>
    0x84007882    0x43c    jal ra,ffffffff84004a52 <setThreadState>
    0x84007886    0x440    mv a6,s4
    0x84007888    0x442    mv a5,s7
    0x8400788a    0x444    mv a4,s3
    0x8400788c    0x446    ld a2,88(sp)          ; stack access
    0x8400788e    0x448    ld a3,96(sp)          ; stack access
    0x84007890    0x44a    ld a0,72(sp)          ; stack access
    0x84007892    0x44c    ld a1,80(sp)          ; stack access
    0x84007894    0x44e    jal ra,ffffffff84003cea <invokeCNodeRotate>
    0x84007898    0x452    mv s0,a0
    0x8400789a    0x454    j ffffffff84007532 <decodeCNodeInvocation+0xec>
    0x8400789c    0x456    li a1,2
    0x8400789e    0x458    auipc a0,0x17
    0x840078a2    0x45c    ld a0,1978(a0) # ffffffff8401f058 <ksCurThread>
    0x840078a6    0x460    jal ra,ffffffff84004a52 <setThreadState>
    0x840078aa    0x464    j ffffffff8400763c <decodeCNodeInvocation+0x1f6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
405 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 662 nodes.

Section decodeTCBInvocation (291 of 292)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 151 instructions.
Switch found.


Stack analysis
---------------

32 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x84008fe2      0x0    addi sp,sp,-48
    0x84008fe4      0x2    sd ra,40(sp)          ; stack access
    0x84008fe6      0x4    sd s0,32(sp)          ; stack access
    0x84008fe8      0x6    sd s1,24(sp)          ; stack access
    0x84008fea      0x8    sd a2,0(sp)           ; stack access
    0x84008fec      0xa    sd a3,8(sp)           ; stack access
    0x84008fee      0xc    mv a3,a4
    0x84008ff0      0xe    li a4,16
    0x84008ff2     0x10    bltu a4,a0,ffffffff84009152 <decodeTCBInvocation+0x170>
    0x84008ff6     0x14    mv s0,a2
    0x84008ff8     0x16    slli a0,a0,0x2
    0x84008ffa     0x18    auipc a4,0x3
    0x84008ffe     0x1c    addi a4,a4,-662 # ffffffff8400bd64 <msgRegisters+0x3bc>
    0x84009002     0x20    add a0,a0,a4
    0x84009004     0x22    lw a0,0(a0)
    0x84009006     0x24    add a0,a0,a4
    0x84009008     0x26    jr a0
    0x8400900a     0x28    mv a4,a6
    0x8400900c     0x2a    mv a3,a5
    0x8400900e     0x2c    mv a2,a1
    0x84009010     0x2e    ld a0,0(sp)           ; stack access
    0x84009012     0x30    ld a1,8(sp)           ; stack access
    0x84009014     0x32    jal ra,ffffffff84008c80 <decodeReadRegisters>
    0x84009018     0x36    ld ra,40(sp)          ; stack access
    0x8400901a     0x38    ld s0,32(sp)          ; stack access
    0x8400901c     0x3a    ld s1,24(sp)          ; stack access
    0x8400901e     0x3c    addi sp,sp,48
    0x84009020     0x3e    ret
    0x84009022     0x40    mv a3,a6
    0x84009024     0x42    mv a2,a1
    0x84009026     0x44    ld a0,0(sp)           ; stack access
    0x84009028     0x46    ld a1,8(sp)           ; stack access
    0x8400902a     0x48    jal ra,ffffffff84008e1c <decodeWriteRegisters>
    0x8400902e     0x4c    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x84009030     0x4e    mv a3,a6
    0x84009032     0x50    mv a2,a1
    0x84009034     0x52    ld a0,0(sp)           ; stack access
    0x84009036     0x54    ld a1,8(sp)           ; stack access
    0x84009038     0x56    jal ra,ffffffff84008ac6 <decodeCopyRegisters>
    0x8400903c     0x5a    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x8400903e     0x5c    li a1,2
    0x84009040     0x5e    auipc a0,0x16
    0x84009044     0x62    ld a0,24(a0) # ffffffff8401f058 <ksCurThread>
    0x84009048     0x66    jal ra,ffffffff84004a52 <setThreadState>
    0x8400904c     0x6a    slli a0,s0,0x19
    0x84009050     0x6e    srli a0,a0,0x19
    0x84009052     0x70    srli a2,s0,0x26
    0x84009056     0x74    andi a2,a2,1
    0x84009058     0x76    beqz a2,ffffffff84009060 <decodeTCBInvocation+0x7e>
    0x8400905a     0x78    li a5,-1
    0x8400905c     0x7a    slli a5,a5,0x27
    0x8400905e     0x7c    or a0,a0,a5
    0x84009060     0x7e    jal ra,ffffffff84005774 <suspend>
    0x84009064     0x82    li a0,0
    0x84009066     0x84    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x84009068     0x86    li a1,2
    0x8400906a     0x88    auipc a0,0x16
    0x8400906e     0x8c    ld a0,-18(a0) # ffffffff8401f058 <ksCurThread>
    0x84009072     0x90    jal ra,ffffffff84004a52 <setThreadState>
    0x84009076     0x94    slli a0,s0,0x19
    0x8400907a     0x98    srli a0,a0,0x19
    0x8400907c     0x9a    srli a2,s0,0x26
    0x84009080     0x9e    andi a2,a2,1
    0x84009082     0xa0    beqz a2,ffffffff8400908a <decodeTCBInvocation+0xa8>
    0x84009084     0xa2    li a5,-1
    0x84009086     0xa4    slli a5,a5,0x27
    0x84009088     0xa6    or a0,a0,a5
    0x8400908a     0xa8    jal ra,ffffffff84005cf0 <restart>
    0x8400908e     0xac    li a0,0
    0x84009090     0xae    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x84009092     0xb0    mv a4,a6
    0x84009094     0xb2    mv a2,a1
    0x84009096     0xb4    ld a0,0(sp)           ; stack access
    0x84009098     0xb6    ld a1,8(sp)           ; stack access
    0x8400909a     0xb8    jal ra,ffffffff8400810e <decodeTCBConfigure>
    0x8400909e     0xbc    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090a0     0xbe    mv a3,a6
    0x840090a2     0xc0    mv a2,a1
    0x840090a4     0xc2    ld a0,0(sp)           ; stack access
    0x840090a6     0xc4    ld a1,8(sp)           ; stack access
    0x840090a8     0xc6    jal ra,ffffffff840086d8 <decodeSetPriority>
    0x840090ac     0xca    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090ae     0xcc    mv a3,a6
    0x840090b0     0xce    mv a2,a1
    0x840090b2     0xd0    ld a0,0(sp)           ; stack access
    0x840090b4     0xd2    ld a1,8(sp)           ; stack access
    0x840090b6     0xd4    jal ra,ffffffff84008796 <decodeSetMCPriority>
    0x840090ba     0xd8    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090bc     0xda    mv a4,a6
    0x840090be     0xdc    mv a2,a1
    0x840090c0     0xde    ld a0,0(sp)           ; stack access
    0x840090c2     0xe0    ld a1,8(sp)           ; stack access
    0x840090c4     0xe2    jal ra,ffffffff84008854 <decodeSetSchedParams>
    0x840090c8     0xe6    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090ca     0xe8    mv a4,a6
    0x840090cc     0xea    mv a2,a1
    0x840090ce     0xec    ld a0,0(sp)           ; stack access
    0x840090d0     0xee    ld a1,8(sp)           ; stack access
    0x840090d2     0xf0    jal ra,ffffffff84008378 <decodeSetIPCBuffer>
    0x840090d6     0xf4    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090d8     0xf6    mv a4,a6
    0x840090da     0xf8    mv a2,a1
    0x840090dc     0xfa    ld a0,0(sp)           ; stack access
    0x840090de     0xfc    ld a1,8(sp)           ; stack access
    0x840090e0     0xfe    jal ra,ffffffff84008436 <decodeSetSpace>
    0x840090e4    0x102    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090e6    0x104    ld a0,0(sp)           ; stack access
    0x840090e8    0x106    ld a1,8(sp)           ; stack access
    0x840090ea    0x108    jal ra,ffffffff84008ec8 <decodeBindNotification>
    0x840090ee    0x10c    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090f0    0x10e    ld a0,0(sp)           ; stack access
    0x840090f2    0x110    ld a1,8(sp)           ; stack access
    0x840090f4    0x112    jal ra,ffffffff84008f94 <decodeUnbindNotification>
    0x840090f8    0x116    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x840090fa    0x118    mv a2,a3
    0x840090fc    0x11a    ld a0,0(sp)           ; stack access
    0x840090fe    0x11c    ld a1,8(sp)           ; stack access
    0x84009100    0x11e    jal ra,ffffffff840082ea <decodeSetTimeoutEndpoint>
    0x84009104    0x122    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x84009106    0x124    beqz a1,ffffffff84009144 <decodeTCBInvocation+0x162>
    0x84009108    0x126    auipc a0,0x16
    0x8400910c    0x12a    ld a0,-176(a0) # ffffffff8401f058 <ksCurThread>
    0x84009110    0x12e    ld s1,88(a0)
    0x84009112    0x130    li a1,2
    0x84009114    0x132    jal ra,ffffffff84004a52 <setThreadState>
    0x84009118    0x136    slli a5,s0,0x19
    0x8400911c    0x13a    srli a5,a5,0x19
    0x8400911e    0x13c    srli a2,s0,0x26
    0x84009122    0x140    andi a2,a2,1
    0x84009124    0x142    beqz a2,ffffffff8400912c <decodeTCBInvocation+0x14a>
    0x84009126    0x144    li a4,-1
    0x84009128    0x146    slli a4,a4,0x27
    0x8400912a    0x148    or a5,a5,a4
    0x8400912c    0x14a    sd s1,24(a5)
    0x8400912e    0x14c    auipc a4,0x16
    0x84009132    0x150    ld a4,-214(a4) # ffffffff8401f058 <ksCurThread>
    0x84009136    0x154    li a0,0
    0x84009138    0x156    bne a5,a4,ffffffff84009018 <decodeTCBInvocation+0x36>
    0x8400913c    0x15a    jal ra,ffffffff840049b8 <rescheduleRequired>
    0x84009140    0x15e    li a0,0
    0x84009142    0x160    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x84009144    0x162    li a5,7
    0x84009146    0x164    auipc a4,0x4
    0x8400914a    0x168    sd a5,-1286(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400914e    0x16c    li a0,3
    0x84009150    0x16e    j ffffffff84009018 <decodeTCBInvocation+0x36>
    0x84009152    0x170    li a5,3
    0x84009154    0x172    auipc a4,0x4
    0x84009158    0x176    sd a5,-1300(a4) # ffffffff8400cc40 <current_syscall_error+0x30>
    0x8400915c    0x17a    li a0,3
    0x8400915e    0x17c    j ffffffff84009018 <decodeTCBInvocation+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
145 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 265 nodes.

Section init_kernel (292 of 292)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 329 instructions.

RVC_FTTFT____FFFT_FT.
Skipping c01027f3 rdtime a5

Skipping c01027f3 rdtime a5

Skipping 10579073 csrw stvec,a5

RVC_FTTFFT___FFT__FT.
Skipping 1007b073 csrc sstatus,a5


Stack analysis
---------------

101 stack accesses found. Annotated code for `init_kernel`:

    0x8400160e      0x0    addi sp,sp,-304
    0x84001610      0x2    sd ra,296(sp)         ; stack access
    0x84001612      0x4    sd s0,288(sp)         ; stack access
    0x84001614      0x6    sd s1,280(sp)         ; stack access
    0x84001616      0x8    sd s2,272(sp)         ; stack access
    0x84001618      0xa    sd s3,264(sp)         ; stack access
    0x8400161a      0xc    sd s4,256(sp)         ; stack access
    0x8400161c      0xe    sd s5,248(sp)         ; stack access
    0x8400161e     0x10    sd s6,240(sp)         ; stack access
    0x84001620     0x12    sd s7,232(sp)         ; stack access
    0x84001622     0x14    sd s8,224(sp)         ; stack access
    0x84001624     0x16    sd s9,216(sp)         ; stack access
    0x84001626     0x18    sd s10,208(sp)        ; stack access
    0x84001628     0x1a    sd s11,200(sp)        ; stack access
    0x8400162a     0x1c    mv s9,a3
    0x8400162c     0x1e    mv s3,a4
    0x8400162e     0x20    beqz a4,ffffffff840018cc <init_kernel+0x2be>
    0x84001632     0x24    li s7,-1
    0x84001634     0x26    slli s7,s7,0x26
    0x84001636     0x28    add s1,a0,s7
    0x8400163a     0x2c    add s0,a1,s7
    0x8400163e     0x30    sd s1,80(sp)          ; stack access
    0x84001640     0x32    sd s0,88(sp)          ; stack access
    0x84001642     0x34    slli s6,a2,0x20
    0x84001646     0x38    srli s6,s6,0x20
    0x8400164a     0x3c    sub s5,a0,s6
    0x8400164e     0x40    sub s4,a1,s6
    0x84001652     0x44    lui s10,0x2
    0x84001654     0x46    add s10,s10,s4
    0x84001656     0x48    slli a5,a5,0x20
    0x84001658     0x4a    srli a5,a5,0x20
    0x8400165a     0x4c    add a5,a5,a4
    0x8400165c     0x4e    addi a5,a5,-1
    0x8400165e     0x50    srli a5,a5,0xc
    0x84001660     0x52    addi a5,a5,1
    0x84001662     0x54    slli a5,a5,0xc
    0x84001664     0x56    add s8,a4,s7
    0x84001668     0x5a    add s7,s7,a5
    0x8400166a     0x5c    sub s3,a5,a4
    0x8400166e     0x60    addi s3,s3,16
    0x84001670     0x62    j ffffffff840018f2 <init_kernel+0x2e4>
    0x84001672     0x64    ld a0,16(sp)          ; stack access
    0x84001674     0x66    jal ra,ffffffff84000800 <create_domain_cap>
    0x84001678     0x6a    ld a5,16(sp)          ; stack access
    0x8400167a     0x6c    sd a5,168(sp)         ; stack access
    0x8400167c     0x6e    ld a5,24(sp)          ; stack access
    0x8400167e     0x70    sd a5,176(sp)         ; stack access
    0x84001680     0x72    li s1,1
    0x84001682     0x74    li s0,0
    0x84001684     0x76    li s2,54
    0x84001688     0x7a    j ffffffff8400168e <init_kernel+0x80>
    0x8400168a     0x7c    addi s0,s0,1
    0x8400168c     0x7e    addi s1,s1,1
    0x8400168e     0x80    beqz s0,ffffffff8400168a <init_kernel+0x7c>
    0x84001690     0x82    mv a1,s0
    0x84001692     0x84    li a0,0
    0x84001694     0x86    jal ra,ffffffff84003e60 <setIRQState>
    0x84001698     0x8a    bgeu s2,s1,ffffffff8400168a <init_kernel+0x7c>
    0x8400169c     0x8e    li a1,54
    0x840016a0     0x92    li a0,2
    0x840016a2     0x94    jal ra,ffffffff84003e60 <setIRQState>
    0x840016a6     0x98    ld a0,168(sp)         ; stack access
    0x840016a8     0x9a    ld a1,176(sp)         ; stack access
    0x840016aa     0x9c    jal ra,ffffffff8400224a <cap_get_capPtr>
    0x840016ae     0xa0    li a5,7
    0x840016b0     0xa2    slli a5,a5,0x3c
    0x840016b2     0xa4    sd a5,128(a0)
    0x840016b4     0xa6    sd zero,136(a0)
    0x840016b8     0xaa    sd zero,144(a0)
    0x840016bc     0xae    li a5,3
    0x840016be     0xb0    sd a5,152(a0)
    0x840016c0     0xb2    mv a3,s3
    0x840016c2     0xb4    mv a2,s4
    0x840016c4     0xb6    li a1,1
    0x840016c6     0xb8    li a0,0
    0x840016c8     0xba    jal ra,ffffffff84001360 <populate_bi_frame>
    0x840016cc     0xbe    bnez s8,ffffffff840018a0 <init_kernel+0x292>
    0x840016d0     0xc2    bgeu s8,s3,ffffffff840016ea <init_kernel+0xdc>
    0x840016d4     0xc6    auipc a5,0x0
    0x840016d8     0xca    ld a5,1388(a5) # ffffffff84001c40 <rootserver+0x28>
    0x840016dc     0xce    add a5,a5,s8
    0x840016de     0xd0    sd zero,0(a5)
    0x840016e2     0xd4    sub s8,s3,s8
    0x840016e6     0xd8    sd s8,8(a5)
    0x840016ea     0xdc    mv a2,s5
    0x840016ec     0xde    mv a3,s11
    0x840016ee     0xe0    ld a0,16(sp)          ; stack access
    0x840016f0     0xe2    ld a1,24(sp)          ; stack access
    0x840016f2     0xe4    jal ra,ffffffff840008ca <create_it_address_space>
    0x840016f6     0xe8    sd a0,32(sp)          ; stack access
    0x840016f8     0xea    sd a1,40(sp)          ; stack access
    0x840016fa     0xec    srli a0,a0,0x3b
    0x840016fc     0xee    beqz a0,ffffffff840019a0 <init_kernel+0x392>
    0x84001700     0xf2    lui s0,0x1
    0x84001702     0xf4    add s0,s0,s4
    0x84001704     0xf6    mv a4,s0
    0x84001706     0xf8    ld a2,32(sp)          ; stack access
    0x84001708     0xfa    mv a3,a1
    0x8400170a     0xfc    ld a0,16(sp)          ; stack access
    0x8400170c     0xfe    ld a1,24(sp)          ; stack access
    0x8400170e    0x100    jal ra,ffffffff84000824 <create_bi_frame_cap>
    0x84001712    0x104    beqz s3,ffffffff84001758 <init_kernel+0x14a>
    0x84001716    0x108    auipc a5,0x0
    0x8400171a    0x10c    ld a5,1322(a5) # ffffffff84001c40 <rootserver+0x28>
    0x8400171e    0x110    add a6,s3,a5
    0x84001722    0x114    sd a6,152(sp)         ; stack access
    0x84001724    0x116    sd a5,144(sp)         ; stack access
    0x84001726    0x118    li a4,1
    0x84001728    0x11a    slli a4,a4,0x26
    0x8400172a    0x11c    add a4,a4,a5
    0x8400172c    0x11e    sub s10,a4,s10
    0x84001730    0x122    sd s10,0(sp)          ; stack access
    0x84001732    0x124    li a7,1
    0x84001734    0x126    ld a3,32(sp)          ; stack access
    0x84001736    0x128    ld a4,40(sp)          ; stack access
    0x84001738    0x12a    ld a1,16(sp)          ; stack access
    0x8400173a    0x12c    ld a2,24(sp)          ; stack access
    0x8400173c    0x12e    addi a0,sp,168
    0x8400173e    0x130    jal ra,ffffffff84000a12 <create_frames_of_region>
    0x84001742    0x134    ld a5,184(sp)         ; stack access
    0x84001744    0x136    beqz a5,ffffffff840019a0 <init_kernel+0x392>
    0x84001748    0x13a    auipc a5,0x0
    0x8400174c    0x13e    ld a5,1208(a5) # ffffffff84001c00 <ndks_boot+0x248>
    0x84001750    0x142    ld a4,168(sp)         ; stack access
    0x84001752    0x144    sd a4,120(a5)
    0x84001754    0x146    ld a4,176(sp)         ; stack access
    0x84001756    0x148    sd a4,128(a5)
    0x84001758    0x14a    li a2,1
    0x8400175a    0x14c    ld a0,16(sp)          ; stack access
    0x8400175c    0x14e    ld a1,24(sp)          ; stack access
    0x8400175e    0x150    jal ra,ffffffff84000b42 <init_sched_control>
    0x84001762    0x154    mv a4,s4
    0x84001764    0x156    ld a2,32(sp)          ; stack access
    0x84001766    0x158    ld a3,40(sp)          ; stack access
    0x84001768    0x15a    ld a0,16(sp)          ; stack access
    0x8400176a    0x15c    ld a1,24(sp)          ; stack access
    0x8400176c    0x15e    jal ra,ffffffff84000e12 <create_ipcbuf_frame_cap>
    0x84001770    0x162    sd a0,64(sp)          ; stack access
    0x84001772    0x164    sd a1,72(sp)          ; stack access
    0x84001774    0x166    srli a0,a0,0x3b
    0x84001776    0x168    beqz a0,ffffffff840019a0 <init_kernel+0x392>
    0x8400177a    0x16c    sd s6,0(sp)           ; stack access
    0x8400177c    0x16e    li a7,1
    0x8400177e    0x170    ld a5,80(sp)          ; stack access
    0x84001780    0x172    ld a6,88(sp)          ; stack access
    0x84001782    0x174    ld a3,32(sp)          ; stack access
    0x84001784    0x176    ld a4,40(sp)          ; stack access
    0x84001786    0x178    ld a1,16(sp)          ; stack access
    0x84001788    0x17a    ld a2,24(sp)          ; stack access
    0x8400178a    0x17c    addi a0,sp,144
    0x8400178c    0x17e    jal ra,ffffffff84000a12 <create_frames_of_region>
    0x84001790    0x182    ld a5,160(sp)         ; stack access
    0x84001792    0x184    beqz a5,ffffffff840019a0 <init_kernel+0x392>
    0x84001796    0x188    auipc a5,0x0
    0x8400179a    0x18c    ld a5,1130(a5) # ffffffff84001c00 <ndks_boot+0x248>
    0x8400179e    0x190    ld a4,144(sp)         ; stack access
    0x840017a0    0x192    sd a4,72(a5)
    0x840017a2    0x194    ld a4,152(sp)         ; stack access
    0x840017a4    0x196    sd a4,80(a5)
    0x840017a6    0x198    ld a0,16(sp)          ; stack access
    0x840017a8    0x19a    ld a1,24(sp)          ; stack access
    0x840017aa    0x19c    jal ra,ffffffff84000ae0 <create_it_asid_pool>
    0x840017ae    0x1a0    sd a0,48(sp)          ; stack access
    0x840017b0    0x1a2    sd a1,56(sp)          ; stack access
    0x840017b2    0x1a4    srli a5,a0,0x3b
    0x840017b6    0x1a8    beqz a5,ffffffff840019a0 <init_kernel+0x392>
    0x840017ba    0x1ac    ld a2,32(sp)          ; stack access
    0x840017bc    0x1ae    ld a3,40(sp)          ; stack access
    0x840017be    0x1b0    jal ra,ffffffff8400015e <write_it_asid_pool>
    0x840017c2    0x1b4    rdtime a5
    0x840017c6    0x1b8    auipc a4,0x1e
    0x840017ca    0x1bc    sd a5,-1942(a4) # ffffffff8401f030 <ksCurTime>
    0x840017ce    0x1c0    jal ra,ffffffff84000dca <create_idle_thread>
    0x840017d2    0x1c4    beqz a0,ffffffff840019a0 <init_kernel+0x392>
    0x840017d6    0x1c8    ld a5,72(sp)          ; stack access
    0x840017d8    0x1ca    sd a5,0(sp)           ; stack access
    0x840017da    0x1cc    ld a7,64(sp)          ; stack access
    0x840017dc    0x1ce    mv a6,s4
    0x840017de    0x1d0    mv a5,s0
    0x840017e0    0x1d2    mv a4,s9
    0x840017e2    0x1d4    ld a2,32(sp)          ; stack access
    0x840017e4    0x1d6    ld a3,40(sp)          ; stack access
    0x840017e6    0x1d8    ld a0,16(sp)          ; stack access
    0x840017e8    0x1da    ld a1,24(sp)          ; stack access
    0x840017ea    0x1dc    jal ra,ffffffff84000c0a <create_initial_thread>
    0x840017ee    0x1e0    beqz a0,ffffffff840019a0 <init_kernel+0x392>
    0x840017f2    0x1e4    jal ra,ffffffff84000ba4 <init_core_state>
    0x840017f6    0x1e8    ld a0,16(sp)          ; stack access
    0x840017f8    0x1ea    sd a0,112(sp)         ; stack access
    0x840017fa    0x1ec    ld a1,24(sp)          ; stack access
    0x840017fc    0x1ee    sd a1,120(sp)         ; stack access
    0x840017fe    0x1f0    lui a5,0xff021
    0x84001802    0x1f4    slli a5,a5,0xe
    0x84001804    0x1f6    sd a5,128(sp)         ; stack access
    0x84001806    0x1f8    auipc a5,0x0
    0x8400180a    0x1fc    addi a5,a5,2042 # ffffffff84002000 <ki_boot_end>
    0x8400180e    0x200    li a4,-63
    0x84001812    0x204    slli a4,a4,0x20
    0x84001814    0x206    add a5,a5,a4
    0x84001816    0x208    sd a5,136(sp)         ; stack access
    0x84001818    0x20a    auipc s1,0x0
    0x8400181c    0x20e    addi s1,s1,416 # ffffffff840019b8 <ndks_boot>
    0x84001820    0x212    ld s0,592(s1)
    0x84001824    0x216    mv a2,s0
    0x84001826    0x218    jal ra,ffffffff8400150e <create_device_untypeds>
    0x8400182a    0x21c    mv a4,s0
    0x8400182c    0x21e    ld a2,128(sp)         ; stack access
    0x8400182e    0x220    ld a3,136(sp)         ; stack access
    0x84001830    0x222    ld a0,112(sp)         ; stack access
    0x84001832    0x224    ld a1,120(sp)         ; stack access
    0x84001834    0x226    jal ra,ffffffff840015b0 <create_kernel_untypeds>
    0x84001838    0x22a    ld a4,592(s1)
    0x8400183c    0x22e    ld a5,584(s1)
    0x84001840    0x232    sd s0,168(a5)
    0x84001842    0x234    sd a4,176(a5)
    0x84001844    0x236    beqz a0,ffffffff840019a0 <init_kernel+0x392>
    0x84001848    0x23a    auipc a5,0x0
    0x8400184c    0x23e    ld a5,952(a5) # ffffffff84001c00 <ndks_boot+0x248>
    0x84001850    0x242    sd zero,56(a5)
    0x84001854    0x246    sd zero,64(a5)
    0x84001858    0x24a    jal ra,ffffffff84000bf0 <bi_finalise>
    0x8400185c    0x24e    li a5,1
    0x8400185e    0x250    auipc a4,0x1e
    0x84001862    0x254    sd a5,-2038(a4) # ffffffff8401f068 <ksNumCPUs>
    0x84001866    0x258    rdtime a5
    0x8400186a    0x25c    auipc a4,0x1d
    0x8400186e    0x260    sd a5,1990(a4) # ffffffff8401f030 <ksCurTime>
    0x84001872    0x264    auipc a5,0x1d
    0x84001876    0x268    sd zero,1998(a5) # ffffffff8401f040 <ksConsumed>
    0x8400187a    0x26c    jal ra,ffffffff8400a7ce <schedule>
    0x8400187e    0x270    jal ra,ffffffff84004b44 <activateThread>
    0x84001882    0x274    ld ra,296(sp)         ; stack access
    0x84001884    0x276    ld s0,288(sp)         ; stack access
    0x84001886    0x278    ld s1,280(sp)         ; stack access
    0x84001888    0x27a    ld s2,272(sp)         ; stack access
    0x8400188a    0x27c    ld s3,264(sp)         ; stack access
    0x8400188c    0x27e    ld s4,256(sp)         ; stack access
    0x8400188e    0x280    ld s5,248(sp)         ; stack access
    0x84001890    0x282    ld s6,240(sp)         ; stack access
    0x84001892    0x284    ld s7,232(sp)         ; stack access
    0x84001894    0x286    ld s8,224(sp)         ; stack access
    0x84001896    0x288    ld s9,216(sp)         ; stack access
    0x84001898    0x28a    ld s10,208(sp)        ; stack access
    0x8400189a    0x28c    ld s11,200(sp)        ; stack access
    0x8400189c    0x28e    addi sp,sp,304
    0x8400189e    0x290    ret
    0x840018a0    0x292    auipc a5,0x0
    0x840018a4    0x296    addi a5,a5,280 # ffffffff840019b8 <ndks_boot>
    0x840018a8    0x29a    ld a4,648(a5)
    0x840018ac    0x29e    li a3,6
    0x840018ae    0x2a0    sd a3,0(a4)
    0x840018b0    0x2a2    sd s3,8(a4)
    0x840018b4    0x2a6    sub s7,s7,s8
    0x840018b8    0x2aa    ld a0,648(a5)
    0x840018bc    0x2ae    mv a2,s7
    0x840018be    0x2b0    mv a1,s8
    0x840018c0    0x2b2    addi a0,a0,16
    0x840018c2    0x2b4    jal ra,ffffffff8400a57a <memcpy>
    0x840018c6    0x2b8    addi s8,s7,16
    0x840018ca    0x2bc    j ffffffff840016d0 <init_kernel+0xc2>
    0x840018cc    0x2be    li s0,-1
    0x840018ce    0x2c0    slli s0,s0,0x26
    0x840018d0    0x2c2    add s1,a0,s0
    0x840018d4    0x2c6    add s0,s0,a1
    0x840018d6    0x2c8    sd s1,80(sp)          ; stack access
    0x840018d8    0x2ca    sd s0,88(sp)          ; stack access
    0x840018da    0x2cc    slli s6,a2,0x20
    0x840018de    0x2d0    srli s6,s6,0x20
    0x840018e2    0x2d4    sub s5,a0,s6
    0x840018e6    0x2d8    sub s4,a1,s6
    0x840018ea    0x2dc    lui s10,0x2
    0x840018ec    0x2de    add s10,s10,s4
    0x840018ee    0x2e0    mv s7,a4
    0x840018f0    0x2e2    mv s8,a4
    0x840018f2    0x2e4    mv a0,s3
    0x840018f4    0x2e6    jal ra,ffffffff84001326 <calculate_extra_bi_size_bits>
    0x840018f8    0x2ea    mv s2,a0
    0x840018fa    0x2ec    li s11,1
    0x840018fc    0x2ee    sll s11,s11,a0
    0x84001900    0x2f2    add s11,s11,s10
    0x84001902    0x2f4    jal ra,ffffffff84000696 <map_kernel_window>
    0x84001906    0x2f8    jal ra,ffffffff84000138 <activate_kernel_vspace>
    0x8400190a    0x2fc    auipc a5,0x0
    0x8400190e    0x300    addi a5,a5,1782 # ffffffff84002000 <ki_boot_end>
    0x84001912    0x304    csrw stvec,a5
    0x84001916    0x308    jal ra,ffffffff840004ec <initLocalIRQController>
    0x8400191a    0x30c    lui a5,0x6
    0x8400191c    0x30e    csrc sstatus,a5
    0x84001920    0x312    jal ra,ffffffff84000530 <initIRQController>
    0x84001924    0x316    sd s5,168(sp)         ; stack access
    0x84001926    0x318    sd s11,176(sp)        ; stack access
    0x84001928    0x31a    auipc a3,0x0
    0x8400192c    0x31e    addi a3,a3,144 # ffffffff840019b8 <ndks_boot>
    0x84001930    0x322    lui a5,0xff021
    0x84001934    0x326    slli a5,a5,0xe
    0x84001936    0x328    sd a5,960(a3)
    0x8400193a    0x32c    auipc a5,0x22
    0x8400193e    0x330    addi a5,a5,1734 # ffffffff84024000 <ki_end>
    0x84001942    0x334    li a4,-63
    0x84001946    0x338    slli a4,a4,0x20
    0x84001948    0x33a    add a5,a5,a4
    0x8400194a    0x33c    sd a5,968(a3)
    0x8400194e    0x340    li a2,1
    0x84001950    0x342    beqz s8,ffffffff8400195e <init_kernel+0x350>
    0x84001954    0x346    sd s8,976(a3)
    0x84001958    0x34a    sd s7,984(a3)
    0x8400195c    0x34e    li a2,2
    0x8400195e    0x350    slli a4,a2,0x4
    0x84001962    0x354    auipc a5,0x0
    0x84001966    0x358    addi a5,a5,86 # ffffffff840019b8 <ndks_boot>
    0x8400196a    0x35c    add a5,a5,a4
    0x8400196c    0x35e    sd s1,960(a5)
    0x84001970    0x362    sd s0,968(a5)
    0x84001974    0x366    mv a6,s2
    0x84001976    0x368    ld a4,168(sp)         ; stack access
    0x84001978    0x36a    ld a5,176(sp)         ; stack access
    0x8400197a    0x36c    auipc a3,0x0
    0x8400197e    0x370    addi a3,a3,1022 # ffffffff84001d78 <res_reg>
    0x84001982    0x374    addi a2,a2,1
    0x84001984    0x376    auipc a1,0x0
    0x84001988    0x37a    addi a1,a1,36 # ffffffff840019a8 <avail_p_regs>
    0x8400198c    0x37e    li a0,1
    0x8400198e    0x380    jal ra,ffffffff84000fc6 <init_freemem>
    0x84001992    0x384    jal ra,ffffffff840007c4 <create_root_cnode>
    0x84001996    0x388    sd a0,16(sp)          ; stack access
    0x84001998    0x38a    sd a1,24(sp)          ; stack access
    0x8400199a    0x38c    srli a0,a0,0x3b
    0x8400199c    0x38e    bnez a0,ffffffff84001672 <init_kernel+0x64>
    0x840019a0    0x392    jal ra,ffffffff84002424 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
329 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 533 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84003E80` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84003E8A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84003AB4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84002DB6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84002DA0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_8400242C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_8400240C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_84002414` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84002408` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sc_w_zero_zero_t0_84002394` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84002420` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_840021E2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_84002158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_84000BE2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_8400052A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84000154` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_84002CF2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84002C5C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84002C2C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84002BCE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84002C30` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84002C60` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84002BD2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84002B10` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a3_stval_840029FE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_8400B8FE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_8400B906` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_8400B86A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_8400B8FA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_8400B912` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400B86E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_8400B450` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_8400B458` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_8400B3BA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_8400B44C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_8400B464` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400B3BE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_84007132` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_8400714A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_84007068` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_8400685E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8400208C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8400207C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84002084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840020A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84002000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400048C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000420` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_8400AD82` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84002B9A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_8400ABC8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_8400AAEE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a4_8400AA1A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a0_8400ACB4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_8400ADC0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84009844` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840094C0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_84001912` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrc_sstatus_a5_8400191C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_840017C2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_84001866` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
No graph spec failures.
No export failures.
No call offset failures.
> 