
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Tue Jun 16 16:11:50 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/matthewb/verification/bv/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel
  Poly/ML: 580
  HOL: Kananaskis 13 (stdknl) commit 08998e3c2
======================================================================
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.sigs, done.
No signature info for section: _start
No signature info for section: avail_p_regs
No signature info for section: ndks_boot
No signature info for section: rootserver
No signature info for section: rootserver_mem
No signature info for section: avail_reg
No signature info for section: res_reg
No signature info for section: trap_entry
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzsi2
No signature info for section: __ctzsi2
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 271 functions, 13058 RISC-V instructions
  Longest function: decodeRISCVMMUInvocation (768 instructions)
  0 deps: 91 functions (avail_p_regs, ndks_boot, rootserver, ...)
  1 deps: 76 functions (str_to_long, memset, ...)
  2 deps: 38 functions (fastpath_reply_recv, fastpath_call, ...)
  3 deps: 33 functions (c_handle_syscall, slowpath, ...)
  4 deps: 6 functions (invokeUntyped_Retype, handleVMFaultEvent, ...)
  5 deps: 11 functions (decodeSetIPCBuffer, ...)
  6 deps: 3 functions (sendIPC, cteDelete, ...)
  7 deps: 5 functions (handleInvocation, decodeUntypedInvocation, ...)
  8 deps: 2 functions (decodeTCBConfigure, finaliseCap)
  11 deps: 1 functions (handleSyscall)
  12 deps: 1 functions (decodeInvocation)
  15 deps: 1 functions (decodeRISCVMMUInvocation)
  16 deps: 1 functions (decodeTCBInvocation)
  17 deps: 1 functions (decodeCNodeInvocation)
  26 deps: 1 functions (init_kernel)
======================================================================

Section avail_p_regs (1 of 271)
===============================

Deriving specifications
-----------------------

Section `avail_p_regs` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_p_regs` has 0 nodes.

Section ndks_boot (2 of 271)
============================

Deriving specifications
-----------------------

Section `ndks_boot` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ndks_boot` has 0 nodes.

Section rootserver (3 of 271)
=============================

Deriving specifications
-----------------------

Section `rootserver` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver` has 0 nodes.

Section rootserver_mem (4 of 271)
=================================

Deriving specifications
-----------------------

Section `rootserver_mem` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver_mem` has 0 nodes.

Section avail_reg (5 of 271)
============================

Deriving specifications
-----------------------

Section `avail_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_reg` has 0 nodes.

Section res_reg (6 of 271)
==========================

Deriving specifications
-----------------------

Section `res_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `res_reg` has 0 nodes.

Section __ctzdi2 (7 of 271)
===========================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 13 instructions.

RVC_TFFFFT___FT___TF..
ANDI..
RVC_TTT___________FT.
RVC_FTF___________FT.
ADDI..
RVC_TFF_FF________FT.
RVC_FFT___________FT.
BNE..
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x840174c6     0x0    mv a5,a0
    0x840174c8     0x2    andi a4,a0,1
    0x840174cc     0x6    bnez a4,ffffffff840174e4 <__ctzdi2+0x1e>
    0x840174ce     0x8    li a0,0
    0x840174d0     0xa    li a3,65
    0x840174d4     0xe    srli a5,a5,0x1
    0x840174d6    0x10    addiw a0,a0,1
    0x840174d8    0x12    andi a4,a5,1
    0x840174dc    0x16    bnez a4,ffffffff840174e6 <__ctzdi2+0x20>
    0x840174de    0x18    bne a0,a3,ffffffff840174d4 <__ctzdi2+0xe>
    0x840174e2    0x1c    ret
    0x840174e4    0x1e    li a0,0
    0x840174e6    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 21 nodes.

Section __clzdi2 (8 of 271)
===========================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 11 instructions.

BLT..
RVC_FFF___________TF.

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x840174a8     0x0    mv a5,a0
    0x840174aa     0x2    bltz a0,ffffffff840174c2 <__clzdi2+0x1a>
    0x840174ae     0x6    li a0,0
    0x840174b0     0x8    li a4,65
    0x840174b4     0xc    slli a5,a5,0x1
    0x840174b6     0xe    addiw a0,a0,1
    0x840174b8    0x10    bltz a5,ffffffff840174c4 <__clzdi2+0x1c>
    0x840174bc    0x14    bne a0,a4,ffffffff840174b4 <__clzdi2+0xc>
    0x840174c0    0x18    ret
    0x840174c2    0x1a    li a0,0
    0x840174c4    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 19 nodes.

Section __ctzsi2 (9 of 271)
===========================

Deriving specifications
-----------------------

Section `__ctzsi2` consists of 13 instructions.

RVC_TFF_TF________FT.
SRLIW..
ADDIW..

Stack analysis
---------------

No stack accesses found. Code for `__ctzsi2`:

    0x84017486     0x0    mv a4,a0
    0x84017488     0x2    andi a0,a0,1
    0x8401748a     0x4    bnez a0,ffffffff840174a4 <__ctzsi2+0x1e>
    0x8401748c     0x6    li a3,33
    0x84017490     0xa    srliw a5,a4,0x1
    0x84017494     0xe    sext.w a4,a5
    0x84017498    0x12    addiw a0,a0,1
    0x8401749a    0x14    andi a5,a5,1
    0x8401749c    0x16    bnez a5,ffffffff840174a6 <__ctzsi2+0x20>
    0x8401749e    0x18    bne a0,a3,ffffffff84017490 <__ctzsi2+0xa>
    0x840174a2    0x1c    ret
    0x840174a4    0x1e    li a0,0
    0x840174a6    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzsi2` has 21 nodes.

Section __clzsi2 (10 of 271)
============================

Deriving specifications
-----------------------

Section `__clzsi2` consists of 12 instructions.

SLLIW..

Stack analysis
---------------

No stack accesses found. Code for `__clzsi2`:

    0x84017462     0x0    mv a4,a0
    0x84017464     0x2    bltz a0,ffffffff84017482 <__clzsi2+0x20>
    0x84017468     0x6    li a0,0
    0x8401746a     0x8    li a3,34
    0x8401746e     0xc    slliw a5,a4,0x1
    0x84017472    0x10    sext.w a4,a5
    0x84017476    0x14    addiw a0,a0,1
    0x84017478    0x16    bltz a4,ffffffff84017484 <__clzsi2+0x22>
    0x8401747c    0x1a    bne a0,a3,ffffffff8401746e <__clzsi2+0xc>
    0x84017480    0x1e    ret
    0x84017482    0x20    li a0,0
    0x84017484    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzsi2` has 20 nodes.

Section char_to_long (11 of 271)
================================

Deriving specifications
-----------------------

Section `char_to_long` consists of 20 instructions.

BGEU..
BLTU..

Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x840173ae     0x0    addiw a5,a0,-48
    0x840173b2     0x4    andi a5,a5,255
    0x840173b6     0x8    li a4,9
    0x840173b8     0xa    bgeu a4,a5,ffffffff840173de <char_to_long+0x30>
    0x840173bc     0xe    addiw a5,a0,-65
    0x840173c0    0x12    andi a5,a5,255
    0x840173c4    0x16    li a4,5
    0x840173c6    0x18    bgeu a4,a5,ffffffff840173e4 <char_to_long+0x36>
    0x840173ca    0x1c    addiw a5,a0,-97
    0x840173ce    0x20    andi a5,a5,255
    0x840173d2    0x24    li a4,5
    0x840173d4    0x26    bltu a4,a5,ffffffff840173ea <char_to_long+0x3c>
    0x840173d8    0x2a    addiw a0,a0,-87
    0x840173dc    0x2e    ret
    0x840173de    0x30    addiw a0,a0,-48
    0x840173e2    0x34    ret
    0x840173e4    0x36    addiw a0,a0,-55
    0x840173e8    0x3a    ret
    0x840173ea    0x3c    li a0,-1
    0x840173ec    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 30 nodes.

Section strncmp (12 of 271)
===========================

Deriving specifications
-----------------------

Section `strncmp` consists of 14 instructions.

RVC_TTF___________FT.
RVC_TFFTFT___FT___TF..
LBU..
SUBW.....
RVC_FFFFFT________FT.

Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x8401738a     0x0    beqz a2,ffffffff840173aa <strncmp+0x20>
    0x8401738c     0x2    mv a5,a0
    0x8401738e     0x4    add a2,a2,a0
    0x84017390     0x6    lbu a4,0(a5)
    0x84017394     0xa    lbu a0,0(a1)
    0x84017398     0xe    subw a0,a4,a0
    0x8401739c    0x12    bnez a0,ffffffff840173ac <strncmp+0x22>
    0x8401739e    0x14    beqz a4,ffffffff840173ac <strncmp+0x22>
    0x840173a0    0x16    addi a5,a5,1
    0x840173a2    0x18    addi a1,a1,1
    0x840173a4    0x1a    bne a5,a2,ffffffff84017390 <strncmp+0x6>
    0x840173a8    0x1e    ret
    0x840173aa    0x20    li a0,0
    0x840173ac    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 26 nodes.

Section memcpy (13 of 271)
==========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x84017372     0x0    beqz a2,ffffffff84017388 <memcpy+0x16>
    0x84017374     0x2    add a2,a2,a0
    0x84017376     0x4    mv a5,a0
    0x84017378     0x6    lbu a4,0(a1)
    0x8401737c     0xa    sb a4,0(a5)
    0x84017380     0xe    addi a5,a5,1
    0x84017382    0x10    addi a1,a1,1
    0x84017384    0x12    bne a2,a5,ffffffff84017378 <memcpy+0x6>
    0x84017388    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memzero (14 of 271)
===========================

Deriving specifications
-----------------------

Section `memzero` consists of 7 instructions.

SD..

Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x84015b22     0x0    beqz a1,ffffffff84015b32 <memzero+0x10>
    0x84015b24     0x2    mv a5,a0
    0x84015b26     0x4    add a1,a1,a0
    0x84015b28     0x6    sd zero,0(a5)
    0x84015b2c     0xa    addi a5,a5,8
    0x84015b2e     0xc    bne a5,a1,ffffffff84015b28 <memzero+0x6>
    0x84015b32    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 13 nodes.

Section strlcat (15 of 271)
===========================

Deriving specifications
-----------------------

Section `strlcat` consists of 31 instructions.

ADD.....
RVC_TFT___________FT.
SUB.....
RVC_TFFFFT___T____TF.

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x84015ac8     0x0    mv a3,a0
    0x84015aca     0x2    li a0,0
    0x84015acc     0x4    beqz a2,ffffffff84015ae0 <strlcat+0x18>
    0x84015ace     0x6    add a5,a3,a0
    0x84015ad2     0xa    lbu a5,0(a5)
    0x84015ad6     0xe    beqz a5,ffffffff84015ae4 <strlcat+0x1c>
    0x84015ad8    0x10    addi a0,a0,1
    0x84015ada    0x12    bne a2,a0,ffffffff84015ace <strlcat+0x6>
    0x84015ade    0x16    j ffffffff84015b1c <strlcat+0x54>
    0x84015ae0    0x18    mv a0,a2
    0x84015ae2    0x1a    ret
    0x84015ae4    0x1c    bgeu a0,a2,ffffffff84015b1c <strlcat+0x54>
    0x84015ae8    0x20    addi a5,a0,1
    0x84015aec    0x24    bgeu a5,a2,ffffffff84015b16 <strlcat+0x4e>
    0x84015af0    0x28    addi a6,a5,-1
    0x84015af4    0x2c    sub a4,a5,a0
    0x84015af8    0x30    add a4,a4,a1
    0x84015afa    0x32    lbu a4,-1(a4)
    0x84015afe    0x36    beqz a4,ffffffff84015b14 <strlcat+0x4c>
    0x84015b00    0x38    add a6,a3,a5
    0x84015b04    0x3c    sb a4,-1(a6)
    0x84015b08    0x40    addi a4,a5,1
    0x84015b0c    0x44    bgeu a4,a2,ffffffff84015b1e <strlcat+0x56>
    0x84015b10    0x48    mv a5,a4
    0x84015b12    0x4a    j ffffffff84015af0 <strlcat+0x28>
    0x84015b14    0x4c    mv a0,a6
    0x84015b16    0x4e    add a3,a3,a0
    0x84015b18    0x50    sb zero,0(a3)
    0x84015b1c    0x54    ret
    0x84015b1e    0x56    mv a0,a5
    0x84015b20    0x58    j ffffffff84015b16 <strlcat+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 51 nodes.

Section strlcpy (16 of 271)
===========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 19 instructions.

RVC_FFFT__________FT.

Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x84015a96     0x0    mv a3,a0
    0x84015a98     0x2    li a5,1
    0x84015a9a     0x4    bgeu a5,a2,ffffffff84015ac4 <strlcpy+0x2e>
    0x84015a9e     0x8    addi a2,a2,-1
    0x84015aa0     0xa    li a5,0
    0x84015aa2     0xc    mv a0,a5
    0x84015aa4     0xe    addi a5,a5,1
    0x84015aa6    0x10    add a4,a1,a0
    0x84015aaa    0x14    lbu a4,0(a4)
    0x84015aae    0x18    beqz a4,ffffffff84015abc <strlcpy+0x26>
    0x84015ab0    0x1a    add a0,a0,a3
    0x84015ab2    0x1c    sb a4,0(a0)
    0x84015ab6    0x20    bne a5,a2,ffffffff84015aa2 <strlcpy+0xc>
    0x84015aba    0x24    mv a0,a5
    0x84015abc    0x26    add a3,a3,a0
    0x84015abe    0x28    sb zero,0(a3)
    0x84015ac2    0x2c    ret
    0x84015ac4    0x2e    li a0,0
    0x84015ac6    0x30    j ffffffff84015abc <strlcpy+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 29 nodes.

Section strnlen (17 of 271)
===========================

Deriving specifications
-----------------------

Section `strnlen` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x84015a7a     0x0    mv a4,a0
    0x84015a7c     0x2    li a0,0
    0x84015a7e     0x4    beqz a1,ffffffff84015a92 <strnlen+0x18>
    0x84015a80     0x6    add a5,a4,a0
    0x84015a84     0xa    lbu a5,0(a5)
    0x84015a88     0xe    beqz a5,ffffffff84015a90 <strnlen+0x16>
    0x84015a8a    0x10    addi a0,a0,1
    0x84015a8c    0x12    bne a1,a0,ffffffff84015a80 <strnlen+0x6>
    0x84015a90    0x16    ret
    0x84015a92    0x18    mv a0,a1
    0x84015a94    0x1a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 20 nodes.

Section copyMRs (18 of 271)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 46 instructions.

RVC_FTT___________FF..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x84013e4c     0x0    mv a5,a0
    0x84013e4e     0x2    mv a0,a4
    0x84013e50     0x4    beqz a4,ffffffff84013eac <copyMRs+0x60>
    0x84013e52     0x6    ld a4,88(a5)
    0x84013e54     0x8    sd a4,88(a2)
    0x84013e56     0xa    li a4,1
    0x84013e58     0xc    bgeu a4,a0,ffffffff84013ea0 <copyMRs+0x54>
    0x84013e5c    0x10    ld a4,96(a5)
    0x84013e5e    0x12    sd a4,96(a2)
    0x84013e60    0x14    li a4,2
    0x84013e62    0x16    bgeu a4,a0,ffffffff84013ea4 <copyMRs+0x58>
    0x84013e66    0x1a    ld a4,104(a5)
    0x84013e68    0x1c    sd a4,104(a2)
    0x84013e6a    0x1e    li a4,3
    0x84013e6c    0x20    bgeu a4,a0,ffffffff84013ea8 <copyMRs+0x5c>
    0x84013e70    0x24    ld a5,112(a5)
    0x84013e72    0x26    sd a5,112(a2)
    0x84013e74    0x28    li a5,4
    0x84013e76    0x2a    beqz a3,ffffffff84013eb0 <copyMRs+0x64>
    0x84013e78    0x2c    beqz a1,ffffffff84013eb4 <copyMRs+0x68>
    0x84013e7a    0x2e    bgeu a5,a0,ffffffff84013eb8 <copyMRs+0x6c>
    0x84013e7e    0x32    addi a5,a5,1
    0x84013e80    0x34    slli a5,a5,0x3
    0x84013e82    0x36    addi a4,a0,1
    0x84013e86    0x3a    slli a4,a4,0x3
    0x84013e88    0x3c    add a2,a1,a5
    0x84013e8c    0x40    ld a6,0(a2)
    0x84013e90    0x44    add a2,a3,a5
    0x84013e94    0x48    sd a6,0(a2)
    0x84013e98    0x4c    addi a5,a5,8
    0x84013e9a    0x4e    bne a5,a4,ffffffff84013e88 <copyMRs+0x3c>
    0x84013e9e    0x52    ret
    0x84013ea0    0x54    li a5,1
    0x84013ea2    0x56    j ffffffff84013e76 <copyMRs+0x2a>
    0x84013ea4    0x58    li a5,2
    0x84013ea6    0x5a    j ffffffff84013e76 <copyMRs+0x2a>
    0x84013ea8    0x5c    li a5,3
    0x84013eaa    0x5e    j ffffffff84013e76 <copyMRs+0x2a>
    0x84013eac    0x60    mv a5,a4
    0x84013eae    0x62    j ffffffff84013e76 <copyMRs+0x2a>
    0x84013eb0    0x64    mv a0,a5
    0x84013eb2    0x66    ret
    0x84013eb4    0x68    mv a0,a5
    0x84013eb6    0x6a    ret
    0x84013eb8    0x6c    mv a0,a5
    0x84013eba    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 76 nodes.

Section setExtraBadge (19 of 271)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x84013d52    0x0    addi a2,a2,122 # fffffffff800007a <ki_end+0x73fd107a>
    0x84013d56    0x4    slli a2,a2,0x3
    0x84013d58    0x6    add a0,a0,a2
    0x84013d5a    0x8    sd a1,0(a0)
    0x84013d5c    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (20 of 271)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x84013d46    0x0    addi a1,a1,122
    0x84013d4a    0x4    slli a1,a1,0x3
    0x84013d4c    0x6    add a0,a0,a1
    0x84013d4e    0x8    ld a0,0(a0)
    0x84013d50    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbEPDequeue (21 of 271)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 19 instructions.

RVC_TTT___________TF..
RVC_FTT_FT________TF.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

2 stack accesses found. Annotated code for `tcbEPDequeue`:

    0x84012d7e     0x0    addi sp,sp,-32
    0x84012d80     0x2    mv a5,a0
    0x84012d82     0x4    sd a1,0(sp)           ; stack access
    0x84012d84     0x6    mv a1,a2
    0x84012d86     0x8    ld a4,416(a0)
    0x84012d8a     0xc    beqz a4,ffffffff84012da8 <tcbEPDequeue+0x2a>
    0x84012d8c     0xe    ld a0,0(sp)           ; stack access
    0x84012d8e    0x10    ld a3,408(a5)
    0x84012d92    0x14    sd a3,408(a4)
    0x84012d96    0x18    ld a4,408(a5)
    0x84012d9a    0x1c    beqz a4,ffffffff84012dae <tcbEPDequeue+0x30>
    0x84012d9c    0x1e    ld a5,416(a5)
    0x84012da0    0x22    sd a5,416(a4)
    0x84012da4    0x26    addi sp,sp,32
    0x84012da6    0x28    ret
    0x84012da8    0x2a    ld a0,408(a0)
    0x84012dac    0x2e    j ffffffff84012d96 <tcbEPDequeue+0x18>
    0x84012dae    0x30    ld a1,416(a5)
    0x84012db2    0x34    j ffffffff84012da4 <tcbEPDequeue+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 34 nodes.

Section tcbEPAppend (22 of 271)
===============================

Deriving specifications
-----------------------

Section `tcbEPAppend` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbEPAppend`:

    0x84012d64     0x0    addi sp,sp,-32
    0x84012d66     0x2    mv a5,a0
    0x84012d68     0x4    beqz a1,ffffffff84012d70 <tcbEPAppend+0xc>
    0x84012d6a     0x6    mv a0,a1
    0x84012d6c     0x8    sd a5,408(a2)
    0x84012d70     0xc    sd a2,416(a5)
    0x84012d74    0x10    sd zero,408(a5)
    0x84012d78    0x14    mv a1,a5
    0x84012d7a    0x16    addi sp,sp,32
    0x84012d7c    0x18    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPAppend` has 16 nodes.

Section tcbSchedDequeue (23 of 271)
===================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 68 instructions.

SLLI..
AUIPC.
SRLI..
SLL.....
XORI..
RVC_TFFFTT___TT___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x840129c8     0x0    ld a5,288(a0)
    0x840129cc     0x4    andi a5,a5,1
    0x840129ce     0x6    beqz a5,ffffffff84012a3c <tcbSchedDequeue+0x74>
    0x840129d0     0x8    ld a1,344(a0)
    0x840129d4     0xc    ld a2,360(a0)
    0x840129d8    0x10    slli a5,a1,0x8
    0x840129dc    0x14    add a5,a5,a2
    0x840129de    0x16    slli a3,a5,0x4
    0x840129e2    0x1a    auipc a4,0x7
    0x840129e6    0x1e    addi a4,a4,-482 # ffffffff84019800 <ksReadyQueues>
    0x840129ea    0x22    add a4,a4,a3
    0x840129ec    0x24    ld a7,8(a4)
    0x840129f0    0x28    ld a3,400(a0)
    0x840129f4    0x2c    beqz a3,ffffffff84012a3e <tcbSchedDequeue+0x76>
    0x840129f6    0x2e    slli a2,a5,0x4
    0x840129fa    0x32    auipc a4,0x7
    0x840129fe    0x36    addi a4,a4,-506 # ffffffff84019800 <ksReadyQueues>
    0x84012a02    0x3a    add a4,a4,a2
    0x84012a04    0x3c    ld a6,0(a4)
    0x84012a08    0x40    ld a4,392(a0)
    0x84012a0c    0x44    sd a4,392(a3)
    0x84012a10    0x48    ld a4,392(a0)
    0x84012a14    0x4c    beqz a4,ffffffff84012a9e <tcbSchedDequeue+0xd6>
    0x84012a16    0x4e    ld a3,400(a0)
    0x84012a1a    0x52    sd a3,400(a4)
    0x84012a1e    0x56    slli a5,a5,0x4
    0x84012a20    0x58    auipc a4,0x7
    0x84012a24    0x5c    addi a4,a4,-544 # ffffffff84019800 <ksReadyQueues>
    0x84012a28    0x60    add a5,a5,a4
    0x84012a2a    0x62    sd a6,0(a5)
    0x84012a2e    0x66    sd a7,8(a5)
    0x84012a32    0x6a    ld a5,288(a0)
    0x84012a36    0x6e    andi a5,a5,-2
    0x84012a38    0x70    sd a5,288(a0)
    0x84012a3c    0x74    ret
    0x84012a3e    0x76    ld a6,392(a0)
    0x84012a42    0x7a    bnez a6,ffffffff84012a9a <tcbSchedDequeue+0xd2>
    0x84012a46    0x7e    srli t1,a2,0x6
    0x84012a4a    0x82    li a4,3
    0x84012a4c    0x84    sub a3,a4,t1
    0x84012a50    0x88    li a4,1
    0x84012a52    0x8a    sll a2,a4,a2
    0x84012a56    0x8e    not a2,a2
    0x84012a5a    0x92    slli a4,a1,0x2
    0x84012a5e    0x96    add a4,a4,a3
    0x84012a60    0x98    slli a4,a4,0x3
    0x84012a62    0x9a    auipc a3,0x5
    0x84012a66    0x9e    addi a3,a3,1438 # ffffffff84018000 <riscvKSASIDTable>
    0x84012a6a    0xa2    add a4,a4,a3
    0x84012a6c    0xa4    ld a3,1168(a4)
    0x84012a70    0xa8    and a2,a2,a3
    0x84012a72    0xaa    sd a2,1168(a4)
    0x84012a76    0xae    bnez a2,ffffffff84012a10 <tcbSchedDequeue+0x48>
    0x84012a78    0xb0    slli a1,a1,0x3
    0x84012a7a    0xb2    auipc a4,0x5
    0x84012a7e    0xb6    addi a4,a4,1414 # ffffffff84018000 <riscvKSASIDTable>
    0x84012a82    0xba    add a1,a1,a4
    0x84012a84    0xbc    li a4,1
    0x84012a86    0xbe    sll a4,a4,t1
    0x84012a8a    0xc2    not a4,a4
    0x84012a8e    0xc6    ld a3,1040(a1)
    0x84012a92    0xca    and a4,a4,a3
    0x84012a94    0xcc    sd a4,1040(a1)
    0x84012a98    0xd0    j ffffffff84012a10 <tcbSchedDequeue+0x48>
    0x84012a9a    0xd2    mv a4,a6
    0x84012a9c    0xd4    j ffffffff84012a16 <tcbSchedDequeue+0x4e>
    0x84012a9e    0xd6    ld a7,400(a0)
    0x84012aa2    0xda    j ffffffff84012a1e <tcbSchedDequeue+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 100 nodes.

Section tcbSchedAppend (24 of 271)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 49 instructions.

ORI..
RVC_TFFTT____T____TF..
OR.....
RVC_TFFTFT___T____TF.
RVC_TFFFTT___TF___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x840128de     0x0    ld a5,288(a0)
    0x840128e2     0x4    andi a5,a5,1
    0x840128e4     0x6    bnez a5,ffffffff84012930 <tcbSchedAppend+0x52>
    0x840128e6     0x8    ld a3,344(a0)
    0x840128ea     0xc    ld a1,360(a0)
    0x840128ee    0x10    slli a5,a3,0x8
    0x840128f2    0x14    add a5,a5,a1
    0x840128f4    0x16    slli a2,a5,0x4
    0x840128f8    0x1a    auipc a4,0x7
    0x840128fc    0x1e    addi a4,a4,-248 # ffffffff84019800 <ksReadyQueues>
    0x84012900    0x22    add a4,a4,a2
    0x84012902    0x24    ld a2,0(a4)
    0x84012904    0x26    ld a4,8(a4)
    0x84012906    0x28    beqz a2,ffffffff84012932 <tcbSchedAppend+0x54>
    0x84012908    0x2a    sd a0,392(a4)
    0x8401290c    0x2e    sd a4,400(a0)
    0x84012910    0x32    sd zero,392(a0)
    0x84012914    0x36    slli a5,a5,0x4
    0x84012916    0x38    auipc a4,0x7
    0x8401291a    0x3c    addi a4,a4,-278 # ffffffff84019800 <ksReadyQueues>
    0x8401291e    0x40    add a5,a5,a4
    0x84012920    0x42    sd a2,0(a5)
    0x84012922    0x44    sd a0,8(a5)
    0x84012924    0x46    ld a5,288(a0)
    0x84012928    0x4a    ori a5,a5,1
    0x8401292c    0x4e    sd a5,288(a0)
    0x84012930    0x52    ret
    0x84012932    0x54    srli t1,a1,0x6
    0x84012936    0x58    li t3,3
    0x84012938    0x5a    sub t3,t3,t1
    0x8401293c    0x5e    auipc a6,0x5
    0x84012940    0x62    addi a6,a6,1732 # ffffffff84018000 <riscvKSASIDTable>
    0x84012944    0x66    slli a7,a3,0x3
    0x84012948    0x6a    add a7,a7,a6
    0x8401294a    0x6c    li a2,1
    0x8401294c    0x6e    sll t1,a2,t1
    0x84012950    0x72    ld t4,1040(a7)
    0x84012954    0x76    or t1,t4,t1
    0x84012958    0x7a    sd t1,1040(a7)
    0x8401295c    0x7e    slli a3,a3,0x2
    0x8401295e    0x80    add a3,a3,t3
    0x84012960    0x82    slli a3,a3,0x3
    0x84012962    0x84    add a3,a3,a6
    0x84012964    0x86    sll a2,a2,a1
    0x84012968    0x8a    ld a1,1168(a3) # ffffffffe0000490 <ki_end+0x5bfd1490>
    0x8401296c    0x8e    or a2,a2,a1
    0x8401296e    0x90    sd a2,1168(a3)
    0x84012972    0x94    mv a2,a0
    0x84012974    0x96    j ffffffff8401290c <tcbSchedAppend+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 70 nodes.

Section tcbSchedEnqueue (25 of 271)
===================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 49 instructions.

RVC_TFFTT____FT___TF.

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x840123f6     0x0    ld a5,288(a0) # 2120 <KERNEL_OFFSET-0xfffffffeffffdee0>
    0x840123fa     0x4    andi a5,a5,1
    0x840123fc     0x6    bnez a5,ffffffff84012448 <tcbSchedEnqueue+0x52>
    0x840123fe     0x8    ld a3,344(a0)
    0x84012402     0xc    ld a6,360(a0)
    0x84012406    0x10    slli a5,a3,0x8
    0x8401240a    0x14    add a5,a5,a6
    0x8401240c    0x16    slli a2,a5,0x4
    0x84012410    0x1a    auipc a4,0x7
    0x84012414    0x1e    addi a4,a4,1008 # ffffffff84019800 <ksReadyQueues>
    0x84012418    0x22    add a4,a4,a2
    0x8401241a    0x24    ld a1,0(a4)
    0x8401241c    0x26    ld a2,8(a4)
    0x8401241e    0x28    beqz a2,ffffffff8401244a <tcbSchedEnqueue+0x54>
    0x84012420    0x2a    sd a0,400(a1)
    0x84012424    0x2e    sd zero,400(a0)
    0x84012428    0x32    sd a1,392(a0)
    0x8401242c    0x36    slli a5,a5,0x4
    0x8401242e    0x38    auipc a4,0x7
    0x84012432    0x3c    addi a4,a4,978 # ffffffff84019800 <ksReadyQueues>
    0x84012436    0x40    add a5,a5,a4
    0x84012438    0x42    sd a0,0(a5)
    0x8401243a    0x44    sd a2,8(a5)
    0x8401243c    0x46    ld a5,288(a0)
    0x84012440    0x4a    ori a5,a5,1
    0x84012444    0x4e    sd a5,288(a0)
    0x84012448    0x52    ret
    0x8401244a    0x54    srli t1,a6,0x6
    0x8401244e    0x58    li t3,3
    0x84012450    0x5a    sub t3,t3,t1
    0x84012454    0x5e    auipc a2,0x6
    0x84012458    0x62    addi a2,a2,-1108 # ffffffff84018000 <riscvKSASIDTable>
    0x8401245c    0x66    slli a7,a3,0x3
    0x84012460    0x6a    add a7,a7,a2
    0x84012462    0x6c    li a4,1
    0x84012464    0x6e    sll t1,a4,t1
    0x84012468    0x72    ld t4,1040(a7)
    0x8401246c    0x76    or t1,t4,t1
    0x84012470    0x7a    sd t1,1040(a7)
    0x84012474    0x7e    slli a3,a3,0x2
    0x84012476    0x80    add a3,a3,t3
    0x84012478    0x82    slli a3,a3,0x3
    0x8401247a    0x84    add a3,a3,a2
    0x8401247c    0x86    sll a4,a4,a6
    0x84012480    0x8a    ld a6,1168(a3) # fffffffffc000490 <ki_end+0x77fd1490>
    0x84012484    0x8e    or a4,a4,a6
    0x84012488    0x92    sd a4,1168(a3)
    0x8401248c    0x96    mv a2,a0
    0x8401248e    0x98    j ffffffff84012424 <tcbSchedEnqueue+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 70 nodes.

Section updateCapData (26 of 271)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 58 instructions.

BEQ..

Stack analysis
---------------

18 stack accesses found. Annotated code for `updateCapData`:

    0x8401210a     0x0    addi sp,sp,-32
    0x8401210c     0x2    srli a5,a2,0x3b
    0x84012110     0x6    andi a4,a5,1
    0x84012114     0xa    bnez a4,ffffffff8401212e <updateCapData+0x24>
    0x84012116     0xc    li a4,6
    0x84012118     0xe    beq a5,a4,ffffffff8401214a <updateCapData+0x40>
    0x8401211c    0x12    li a4,10
    0x8401211e    0x14    beq a5,a4,ffffffff8401215a <updateCapData+0x50>
    0x84012122    0x18    li a4,4
    0x84012124    0x1a    beq a5,a4,ffffffff8401213a <updateCapData+0x30>
    0x84012128    0x1e    sd a2,16(sp)          ; stack access
    0x8401212a    0x20    sd a3,24(sp)          ; stack access
    0x8401212c    0x22    j ffffffff84012132 <updateCapData+0x28>
    0x8401212e    0x24    sd a2,16(sp)          ; stack access
    0x84012130    0x26    sd a3,24(sp)          ; stack access
    0x84012132    0x28    ld a0,16(sp)          ; stack access
    0x84012134    0x2a    ld a1,24(sp)          ; stack access
    0x84012136    0x2c    addi sp,sp,32
    0x84012138    0x2e    ret
    0x8401213a    0x30    or a3,a3,a0
    0x8401213c    0x32    bnez a3,ffffffff84012144 <updateCapData+0x3a>
    0x8401213e    0x34    sd a2,16(sp)          ; stack access
    0x84012140    0x36    sd a1,24(sp)          ; stack access
    0x84012142    0x38    j ffffffff84012132 <updateCapData+0x28>
    0x84012144    0x3a    sd zero,16(sp)        ; stack access
    0x84012146    0x3c    sd zero,24(sp)        ; stack access
    0x84012148    0x3e    j ffffffff84012132 <updateCapData+0x28>
    0x8401214a    0x40    or a3,a3,a0
    0x8401214c    0x42    bnez a3,ffffffff84012154 <updateCapData+0x4a>
    0x8401214e    0x44    sd a2,16(sp)          ; stack access
    0x84012150    0x46    sd a1,24(sp)          ; stack access
    0x84012152    0x48    j ffffffff84012132 <updateCapData+0x28>
    0x84012154    0x4a    sd zero,16(sp)        ; stack access
    0x84012156    0x4c    sd zero,24(sp)        ; stack access
    0x84012158    0x4e    j ffffffff84012132 <updateCapData+0x28>
    0x8401215a    0x50    andi a4,a1,63
    0x8401215e    0x54    srli a5,a2,0x2f
    0x84012162    0x58    andi a5,a5,63
    0x84012166    0x5c    add a5,a5,a4
    0x84012168    0x5e    li a3,64
    0x8401216c    0x62    bgeu a3,a5,ffffffff84012176 <updateCapData+0x6c>
    0x84012170    0x66    sd zero,16(sp)        ; stack access
    0x84012172    0x68    sd zero,24(sp)        ; stack access
    0x84012174    0x6a    j ffffffff84012132 <updateCapData+0x28>
    0x84012176    0x6c    li a5,-63
    0x8401217a    0x70    slli a5,a5,0x35
    0x8401217c    0x72    addi a5,a5,-1
    0x8401217e    0x74    and a2,a2,a5
    0x84012180    0x76    slli a5,a4,0x35
    0x84012184    0x7a    or a2,a2,a5
    0x84012186    0x7c    sd a2,16(sp)          ; stack access
    0x84012188    0x7e    li a5,-1
    0x8401218a    0x80    sll a5,a5,a4
    0x8401218e    0x84    not a5,a5
    0x84012192    0x88    srli a1,a1,0x6
    0x84012194    0x8a    and a1,a1,a5
    0x84012196    0x8c    sd a1,24(sp)          ; stack access
    0x84012198    0x8e    j ffffffff84012132 <updateCapData+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 91 nodes.

Section hasCancelSendRights (27 of 271)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 20 instructions.

RVC_FFFFFFFT______FT.
AND.....
RVC_TFFFTT___FF___FT..
SLTIU..

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x84011b68     0x0    addi sp,sp,-16
    0x84011b6a     0x2    srli a4,a0,0x3b
    0x84011b6e     0x6    li a5,4
    0x84011b70     0x8    beq a4,a5,ffffffff84011b7a <hasCancelSendRights+0x12>
    0x84011b74     0xc    li a0,0
    0x84011b76     0xe    addi sp,sp,16
    0x84011b78    0x10    ret
    0x84011b7a    0x12    li a4,3
    0x84011b7c    0x14    slli a4,a4,0x37
    0x84011b7e    0x16    and a3,a0,a4
    0x84011b82    0x1a    li a5,0
    0x84011b84    0x1c    beq a3,a4,ffffffff84011b8c <hasCancelSendRights+0x24>
    0x84011b88    0x20    mv a0,a5
    0x84011b8a    0x22    j ffffffff84011b76 <hasCancelSendRights+0xe>
    0x84011b8c    0x24    li a5,3
    0x84011b8e    0x26    slli a5,a5,0x39
    0x84011b90    0x28    and a0,a0,a5
    0x84011b92    0x2a    sub a0,a0,a5
    0x84011b94    0x2c    seqz a5,a0
    0x84011b98    0x30    j ffffffff84011b88 <hasCancelSendRights+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 25 nodes.

Section bindNotification (28 of 271)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84011b0a     0x0    ld a4,24(a1)
    0x84011b0c     0x2    li a5,-1
    0x84011b0e     0x4    slli a3,a5,0x27
    0x84011b12     0x8    and a4,a4,a3
    0x84011b14     0xa    srli a5,a5,0x19
    0x84011b16     0xc    and a5,a5,a0
    0x84011b18     0xe    or a5,a5,a4
    0x84011b1a    0x10    sd a5,24(a1)
    0x84011b1c    0x12    sd a1,304(a0)
    0x84011b20    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (29 of 271)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x84011af6     0x0    ld a4,304(a0)
    0x84011afa     0x4    beqz a4,ffffffff84011b08 <unbindNotification+0x12>
    0x84011afc     0x6    ld a5,24(a4)
    0x84011afe     0x8    srli a5,a5,0x27
    0x84011b00     0xa    slli a5,a5,0x27
    0x84011b02     0xc    sd a5,24(a4)
    0x84011b04     0xe    sd zero,304(a0)
    0x84011b08    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (30 of 271)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 16 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x84011ad0     0x0    ld a4,24(a0)
    0x84011ad2     0x2    slli a5,a4,0x19
    0x84011ad6     0x6    srli a5,a5,0x19
    0x84011ad8     0x8    srli a3,a4,0x26
    0x84011adc     0xc    andi a3,a3,1
    0x84011ade     0xe    beqz a3,ffffffff84011af2 <unbindMaybeNotification+0x22>
    0x84011ae0    0x10    li a3,-1
    0x84011ae2    0x12    slli a3,a3,0x27
    0x84011ae4    0x14    or a5,a5,a3
    0x84011ae6    0x16    srli a4,a4,0x27
    0x84011ae8    0x18    slli a4,a4,0x27
    0x84011aea    0x1a    sd a4,24(a0)
    0x84011aec    0x1c    sd zero,304(a5) # fffffffff8000130 <ki_end+0x73fd1130>
    0x84011af0    0x20    ret
    0x84011af2    0x22    beqz a5,ffffffff84011af0 <unbindMaybeNotification+0x20>
    0x84011af4    0x24    j ffffffff84011ae6 <unbindMaybeNotification+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 24 nodes.

Section setIRQState (31 of 271)
===============================

Deriving specifications
-----------------------

Section `setIRQState` consists of 35 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5

LUI.
RVC_FTF___________FF..
RVC_TTF___________FF..

Stack analysis
---------------

No stack accesses found. Code for `setIRQState`:

    0x8401197e     0x0    slli a4,a1,0x3
    0x84011982     0x4    auipc a5,0x6
    0x84011986     0x8    addi a5,a5,1662 # ffffffff84018000 <riscvKSASIDTable>
    0x8401198a     0xc    add a5,a5,a4
    0x8401198c     0xe    sd a0,1752(a5)
    0x84011990    0x12    li a5,54
    0x84011994    0x16    bne a1,a5,ffffffff840119ae <setIRQState+0x30>
    0x84011998    0x1a    bnez a0,ffffffff840119a4 <setIRQState+0x26>
    0x8401199a    0x1c    li a5,32
    0x8401199e    0x20    csrrc a5,sie,a5
    0x840119a2    0x24    ret
    0x840119a4    0x26    li a5,32
    0x840119a8    0x2a    csrrs a5,sie,a5
    0x840119ac    0x2e    ret
    0x840119ae    0x30    andi a3,a1,31
    0x840119b2    0x34    srli a1,a1,0x5
    0x840119b4    0x36    slli a1,a1,0x2
    0x840119b6    0x38    lui a4,0xcc002
    0x840119ba    0x3c    addi a4,a4,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x840119be    0x40    add a1,a1,a4
    0x840119c0    0x42    lw a5,0(a1)
    0x840119c2    0x44    sext.w a4,a5
    0x840119c6    0x48    bnez a0,ffffffff840119da <setIRQState+0x5c>
    0x840119c8    0x4a    li a5,1
    0x840119ca    0x4c    sll a5,a5,a3
    0x840119ce    0x50    not a5,a5
    0x840119d2    0x54    and a5,a5,a4
    0x840119d4    0x56    sext.w a5,a5
    0x840119d6    0x58    sw a5,0(a1)
    0x840119d8    0x5a    ret
    0x840119da    0x5c    li a5,1
    0x840119dc    0x5e    sll a5,a5,a3
    0x840119e0    0x62    or a5,a5,a4
    0x840119e2    0x64    sext.w a5,a5
    0x840119e4    0x66    j ffffffff840119d6 <setIRQState+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 49 nodes.

Section isIRQActive (32 of 271)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 7 instructions.

SLTU.....

Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x84011966     0x0    slli a5,a0,0x3
    0x8401196a     0x4    auipc a0,0x6
    0x8401196e     0x8    addi a0,a0,1686 # ffffffff84018000 <riscvKSASIDTable>
    0x84011972     0xc    add a0,a0,a5
    0x84011974     0xe    ld a0,1752(a0)
    0x84011978    0x12    snez a0,a0
    0x8401197c    0x16    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 9 nodes.

Section invokeIRQHandler_AckIRQ (33 of 271)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x8401195c    0x0    sext.w a0,a0
    0x8401195e    0x2    lui a5,0xcc202
    0x84011962    0x6    sw a0,4(a5)
    0x84011964    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 6 nodes.

Section replyFromKernel_success_empty (34 of 271)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x84011952    0x0    sd zero,72(a0)
    0x84011956    0x4    sd zero,80(a0)
    0x8401195a    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (35 of 271)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x8401193e     0x0    ld a3,1008(a1)
    0x84011942     0x4    ld a4,1016(a1)
    0x84011946     0x8    ld a2,1000(a1)
    0x8401194a     0xc    sd a2,0(a0)           ; stack access
    0x8401194c     0xe    sd a3,8(a0)           ; stack access
    0x8401194e    0x10    sd a4,16(a0)          ; stack access
    0x84011950    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (36 of 271)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x840118cc     0x0    ld a0,0(a0)
    0x840118ce     0x2    srli a0,a0,0x3b
    0x840118d0     0x4    bnez a0,ffffffff840118d4 <ensureEmptySlot+0x8>
    0x840118d2     0x6    ret
    0x840118d4     0x8    li a5,8
    0x840118d6     0xa    auipc a4,0x7
    0x840118da     0xe    sd a5,-518(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840118de    0x12    li a0,3
    0x840118e0    0x14    j ffffffff840118d2 <ensureEmptySlot+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 14 nodes.

Section setupReplyMaster (37 of 271)
====================================

Deriving specifications
-----------------------

Section `setupReplyMaster` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setupReplyMaster`:

    0x840118ae     0x0    andi a4,a0,-1024
    0x840118b2     0x4    ld a5,64(a4)
    0x840118b4     0x6    srli a5,a5,0x3b
    0x840118b6     0x8    bnez a5,ffffffff840118ca <setupReplyMaster+0x1c>
    0x840118b8     0xa    li a5,1
    0x840118ba     0xc    slli a5,a5,0x3e
    0x840118bc     0xe    addi a5,a5,3
    0x840118be    0x10    sd a5,64(a4)
    0x840118c0    0x12    sd a0,72(a4)
    0x840118c2    0x14    sd zero,80(a4) # fffffffff8000050 <ki_end+0x73fd1050>
    0x840118c6    0x18    li a5,3
    0x840118c8    0x1a    sd a5,88(a4)
    0x840118ca    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupReplyMaster` has 21 nodes.

Section insertNewCap (38 of 271)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 42 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `insertNewCap`:

    0x84011852     0x0    addi sp,sp,-16
    0x84011854     0x2    sd a2,0(sp)           ; stack access
    0x84011856     0x4    sd a3,8(sp)           ; stack access
    0x84011858     0x6    ld a4,24(a0)
    0x8401185a     0x8    lui a5,0xf8000
    0x8401185e     0xc    srli a5,a5,0x19
    0x84011860     0xe    and a5,a5,a4
    0x84011862    0x10    srli a4,a4,0x26
    0x84011864    0x12    andi a4,a4,1
    0x84011866    0x14    beqz a4,ffffffff84011898 <insertNewCap+0x46>
    0x84011868    0x16    li a4,-1
    0x8401186a    0x18    slli a4,a4,0x27
    0x8401186c    0x1a    or a4,a4,a5
    0x8401186e    0x1c    sd a2,0(a1)
    0x84011870    0x1e    ld a3,8(sp)           ; stack access
    0x84011872    0x20    sd a3,8(a1)
    0x84011874    0x22    sd a0,16(a1)
    0x84011876    0x24    ori a5,a5,3
    0x8401187a    0x28    sd a5,24(a1)
    0x8401187c    0x2a    sd a1,16(a4)
    0x8401187e    0x2c    ld a5,24(a0)
    0x84011880    0x2e    li a4,-1
    0x84011882    0x30    slli a4,a4,0x27
    0x84011884    0x32    addi a4,a4,3
    0x84011886    0x34    and a5,a5,a4
    0x84011888    0x36    lui a4,0xf8000
    0x8401188c    0x3a    srli a4,a4,0x19
    0x8401188e    0x3c    and a1,a1,a4
    0x84011890    0x3e    or a1,a1,a5
    0x84011892    0x40    sd a1,24(a0)
    0x84011894    0x42    addi sp,sp,16
    0x84011896    0x44    ret
    0x84011898    0x46    ld a4,0(sp)           ; stack access
    0x8401189a    0x48    sd a4,0(a1)
    0x8401189c    0x4a    ld a4,8(sp)           ; stack access
    0x8401189e    0x4c    sd a4,8(a1)
    0x840118a0    0x4e    sd a0,16(a1)
    0x840118a2    0x50    ori a4,a5,3
    0x840118a6    0x54    sd a4,24(a1)
    0x840118a8    0x56    beqz a5,ffffffff8401187e <insertNewCap+0x2c>
    0x840118aa    0x58    mv a4,a5
    0x840118ac    0x5a    j ffffffff8401187c <insertNewCap+0x2a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 64 nodes.

Section cteSwap (39 of 271)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 65 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x8401175e     0x0    addi sp,sp,-32
    0x84011760     0x2    sd a0,16(sp)          ; stack access
    0x84011762     0x4    sd a1,24(sp)          ; stack access
    0x84011764     0x6    sd a3,0(sp)           ; stack access
    0x84011766     0x8    sd a4,8(sp)           ; stack access
    0x84011768     0xa    sd a3,0(a2)
    0x8401176a     0xc    sd a4,8(a2)
    0x8401176c     0xe    sd a0,0(a5)
    0x8401176e    0x10    sd a1,8(a5)
    0x84011770    0x12    ld a0,16(a2)
    0x84011772    0x14    ld a1,24(a2)
    0x84011774    0x16    beqz a0,ffffffff8401178c <cteSwap+0x2e>
    0x84011776    0x18    ld a4,24(a0)
    0x84011778    0x1a    li a3,-1
    0x8401177a    0x1c    slli a3,a3,0x27
    0x8401177c    0x1e    addi a3,a3,3
    0x8401177e    0x20    and a4,a4,a3
    0x84011780    0x22    lui a3,0xf8000
    0x84011784    0x26    srli a3,a3,0x19
    0x84011786    0x28    and a3,a3,a5
    0x84011788    0x2a    or a4,a4,a3
    0x8401178a    0x2c    sd a4,24(a0)
    0x8401178c    0x2e    lui a4,0xf8000
    0x84011790    0x32    srli a4,a4,0x19
    0x84011792    0x34    and a4,a4,a1
    0x84011794    0x36    srli a3,a1,0x26
    0x84011798    0x3a    andi a3,a3,1
    0x8401179a    0x3c    beqz a3,ffffffff840117e2 <cteSwap+0x84>
    0x8401179c    0x3e    li a3,-1
    0x8401179e    0x40    slli a3,a3,0x27
    0x840117a0    0x42    or a4,a4,a3
    0x840117a2    0x44    sd a5,16(a4)
    0x840117a4    0x46    ld a3,16(a5)
    0x840117a6    0x48    ld a4,24(a5)
    0x840117a8    0x4a    sd a3,16(a2)
    0x840117aa    0x4c    sd a4,24(a2)
    0x840117ac    0x4e    sd a0,16(a5)
    0x840117ae    0x50    sd a1,24(a5)
    0x840117b0    0x52    beqz a3,ffffffff840117c8 <cteSwap+0x6a>
    0x840117b2    0x54    ld a5,24(a3)
    0x840117b4    0x56    li a1,-1
    0x840117b6    0x58    slli a1,a1,0x27
    0x840117b8    0x5a    addi a1,a1,3
    0x840117ba    0x5c    and a5,a5,a1
    0x840117bc    0x5e    lui a1,0xf8000
    0x840117c0    0x62    srli a1,a1,0x19
    0x840117c2    0x64    and a1,a1,a2
    0x840117c4    0x66    or a5,a5,a1
    0x840117c6    0x68    sd a5,24(a3)
    0x840117c8    0x6a    lui a5,0xf8000
    0x840117cc    0x6e    srli a5,a5,0x19
    0x840117ce    0x70    and a5,a5,a4
    0x840117d0    0x72    srli a4,a4,0x26
    0x840117d2    0x74    andi a4,a4,1
    0x840117d4    0x76    beqz a4,ffffffff840117e6 <cteSwap+0x88>
    0x840117d6    0x78    li a4,-1
    0x840117d8    0x7a    slli a4,a4,0x27
    0x840117da    0x7c    or a5,a5,a4
    0x840117dc    0x7e    sd a2,16(a5)
    0x840117de    0x80    addi sp,sp,32
    0x840117e0    0x82    ret
    0x840117e2    0x84    beqz a4,ffffffff840117a4 <cteSwap+0x46>
    0x840117e4    0x86    j ffffffff840117a2 <cteSwap+0x44>
    0x840117e6    0x88    beqz a5,ffffffff840117de <cteSwap+0x80>
    0x840117e8    0x8a    j ffffffff840117dc <cteSwap+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 100 nodes.

Section cteMove (40 of 271)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 38 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x840116b2     0x0    addi sp,sp,-16
    0x840116b4     0x2    sd a0,0(sp)           ; stack access
    0x840116b6     0x4    sd a1,8(sp)           ; stack access
    0x840116b8     0x6    ld a4,16(a2)
    0x840116ba     0x8    ld a5,24(a2)
    0x840116bc     0xa    sd a0,0(a3)
    0x840116be     0xc    sd a1,8(a3)
    0x840116c0     0xe    sd zero,0(a2)
    0x840116c4    0x12    sd zero,8(a2)
    0x840116c8    0x16    sd a4,16(a3)
    0x840116ca    0x18    sd a5,24(a3)
    0x840116cc    0x1a    sd zero,16(a2)
    0x840116d0    0x1e    sd zero,24(a2)
    0x840116d4    0x22    beqz a4,ffffffff840116ec <cteMove+0x3a>
    0x840116d6    0x24    ld a2,24(a4)
    0x840116d8    0x26    li a1,-1
    0x840116da    0x28    slli a1,a1,0x27
    0x840116dc    0x2a    addi a1,a1,3
    0x840116de    0x2c    and a2,a2,a1
    0x840116e0    0x2e    lui a1,0xf8000
    0x840116e4    0x32    srli a1,a1,0x19
    0x840116e6    0x34    and a1,a1,a3
    0x840116e8    0x36    or a2,a2,a1
    0x840116ea    0x38    sd a2,24(a4)
    0x840116ec    0x3a    lui a4,0xf8000
    0x840116f0    0x3e    srli a4,a4,0x19
    0x840116f2    0x40    and a4,a4,a5
    0x840116f4    0x42    srli a5,a5,0x26
    0x840116f6    0x44    andi a5,a5,1
    0x840116f8    0x46    beqz a5,ffffffff84011706 <cteMove+0x54>
    0x840116fa    0x48    li a5,-1
    0x840116fc    0x4a    slli a5,a5,0x27
    0x840116fe    0x4c    or a4,a4,a5
    0x84011700    0x4e    sd a3,16(a4)
    0x84011702    0x50    addi sp,sp,16
    0x84011704    0x52    ret
    0x84011706    0x54    beqz a4,ffffffff84011702 <cteMove+0x50>
    0x84011708    0x56    j ffffffff84011700 <cteMove+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 60 nodes.

Section cteInsert (41 of 271)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 108 instructions.

RVC_TFFFFFT__FT___TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x84011576      0x0    addi sp,sp,-16
    0x84011578      0x2    sd a0,0(sp)           ; stack access
    0x8401157a      0x4    sd a1,8(sp)           ; stack access
    0x8401157c      0x6    ld a5,24(a2)
    0x8401157e      0x8    ld a7,0(a2)
    0x84011582      0xc    ld t3,8(a2)
    0x84011586     0x10    srli a4,a0,0x3b
    0x8401158a     0x14    andi a6,a4,1
    0x8401158e     0x18    bnez a6,ffffffff84011614 <cteInsert+0x9e>
    0x84011592     0x1c    li t1,6
    0x84011594     0x1e    beq a4,t1,ffffffff8401160a <cteInsert+0x94>
    0x84011598     0x22    bltu t1,a4,ffffffff840115f8 <cteInsert+0x82>
    0x8401159c     0x26    li t1,2
    0x8401159e     0x28    beq a4,t1,ffffffff8401163c <cteInsert+0xc6>
    0x840115a2     0x2c    li a0,4
    0x840115a4     0x2e    bne a4,a0,ffffffff840115b0 <cteInsert+0x3a>
    0x840115a8     0x32    sub a6,t3,a1
    0x840115ac     0x36    snez a6,a6
    0x840115b0     0x3a    mv t1,a2
    0x840115b2     0x3c    slli a4,a6,0x1
    0x840115b6     0x40    andi a5,a5,-4
    0x840115b8     0x42    or a5,a5,a4
    0x840115ba     0x44    or a5,a5,a6
    0x840115be     0x48    ld a4,0(sp)           ; stack access
    0x840115c0     0x4a    sd a4,0(a3)
    0x840115c2     0x4c    ld a4,8(sp)           ; stack access
    0x840115c4     0x4e    sd a4,8(a3)
    0x840115c6     0x50    sd t1,16(a3)
    0x840115ca     0x54    sd a5,24(a3)
    0x840115cc     0x56    ld a1,24(a2)
    0x840115ce     0x58    li a4,-1
    0x840115d0     0x5a    slli a4,a4,0x27
    0x840115d2     0x5c    addi a4,a4,3
    0x840115d4     0x5e    and a1,a1,a4
    0x840115d6     0x60    lui a4,0xf8000
    0x840115da     0x64    srli a4,a4,0x19
    0x840115dc     0x66    and a0,a3,a4
    0x840115e0     0x6a    or a1,a1,a0
    0x840115e2     0x6c    sd a1,24(a2)
    0x840115e4     0x6e    and a4,a4,a5
    0x840115e6     0x70    srli a5,a5,0x26
    0x840115e8     0x72    andi a5,a5,1
    0x840115ea     0x74    beqz a5,ffffffff84011638 <cteInsert+0xc2>
    0x840115ec     0x76    li a5,-1
    0x840115ee     0x78    slli a5,a5,0x27
    0x840115f0     0x7a    or a4,a4,a5
    0x840115f2     0x7c    sd a3,16(a4)
    0x840115f4     0x7e    addi sp,sp,16
    0x840115f6     0x80    ret
    0x840115f8     0x82    li a1,16
    0x840115fa     0x84    bne a4,a1,ffffffff840115b0 <cteInsert+0x3a>
    0x840115fe     0x88    srli a6,a7,0x3b
    0x84011602     0x8c    addi a6,a6,-14
    0x84011604     0x8e    seqz a6,a6
    0x84011608     0x92    j ffffffff840115b0 <cteInsert+0x3a>
    0x8401160a     0x94    sub a6,t3,a1
    0x8401160e     0x98    snez a6,a6
    0x84011612     0x9c    j ffffffff840115b0 <cteInsert+0x3a>
    0x84011614     0x9e    mv t1,a2
    0x84011616     0xa0    andi a5,a5,-4
    0x84011618     0xa2    srli a6,a7,0x3b
    0x8401161c     0xa6    li t4,2
    0x8401161e     0xa8    bne a6,t4,ffffffff840115be <cteInsert+0x48>
    0x84011622     0xac    li a6,2
    0x84011624     0xae    beq a4,a6,ffffffff8401164c <cteInsert+0xd6>
    0x84011628     0xb2    j ffffffff840115be <cteInsert+0x48>
    0x8401162a     0xb4    slli a4,a0,0x19
    0x8401162e     0xb8    srli a4,a4,0x19
    0x84011630     0xba    srli a0,a0,0x26
    0x84011632     0xbc    andi a0,a0,1
    0x84011634     0xbe    bnez a0,ffffffff84011674 <cteInsert+0xfe>
    0x84011636     0xc0    j ffffffff8401167a <cteInsert+0x104>
    0x84011638     0xc2    beqz a4,ffffffff840115f4 <cteInsert+0x7e>
    0x8401163a     0xc4    j ffffffff840115f2 <cteInsert+0x7c>
    0x8401163c     0xc6    mv t1,a2
    0x8401163e     0xc8    ori a5,a5,3
    0x84011642     0xcc    srli a4,a7,0x3b
    0x84011646     0xd0    li a6,2
    0x84011648     0xd2    bne a4,a6,ffffffff840115be <cteInsert+0x48>
    0x8401164c     0xd6    slli t4,a7,0x19
    0x84011650     0xda    srli t4,t4,0x19
    0x84011654     0xde    srli a6,a7,0x26
    0x84011658     0xe2    andi a6,a6,1
    0x8401165c     0xe6    beqz a6,ffffffff8401162a <cteInsert+0xb4>
    0x84011660     0xea    li a4,-1
    0x84011662     0xec    slli a6,a4,0x27
    0x84011666     0xf0    or t4,t4,a6
    0x8401166a     0xf4    srli a4,a4,0x19
    0x8401166c     0xf6    and a4,a4,a0
    0x8401166e     0xf8    srli a0,a0,0x26
    0x84011670     0xfa    andi a0,a0,1
    0x84011672     0xfc    beqz a0,ffffffff840115be <cteInsert+0x48>
    0x84011674     0xfe    li a0,-1
    0x84011676    0x100    slli a0,a0,0x27
    0x84011678    0x102    or a4,a4,a0
    0x8401167a    0x104    bne a4,t4,ffffffff840115be <cteInsert+0x48>
    0x8401167e    0x108    andi t3,t3,63
    0x84011682    0x10c    andi a6,a1,63
    0x84011686    0x110    bne a6,t3,ffffffff840115be <cteInsert+0x48>
    0x8401168a    0x114    addiw t3,t3,-4
    0x8401168c    0x116    lui a4,0x2000
    0x84011690    0x11a    sll t3,a4,t3
    0x84011694    0x11e    ld a4,8(a2)
    0x84011696    0x120    slli a4,a4,0x27
    0x84011698    0x122    srli a4,a4,0x27
    0x8401169a    0x124    or a4,t3,a4
    0x8401169e    0x128    sd a4,8(a2)
    0x840116a0    0x12a    j ffffffff840115be <cteInsert+0x48>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
108 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 157 nodes.

Section preemptionPoint (42 of 271)
===================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 17 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `preemptionPoint`:

    0x84011540     0x0    auipc a5,0x19
    0x84011544     0x4    ld a5,736(a5) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x84011548     0x8    addi a5,a5,1
    0x8401154a     0xa    li a4,99
    0x8401154e     0xe    bltu a4,a5,ffffffff8401155e <preemptionPoint+0x1e>
    0x84011552    0x12    auipc a4,0x19
    0x84011556    0x16    sd a5,718(a4) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x8401155a    0x1a    li a0,0
    0x8401155c    0x1c    ret
    0x8401155e    0x1e    auipc a5,0x19
    0x84011562    0x22    sd zero,706(a5) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x84011566    0x26    csrr a0,sip
    0x8401156a    0x2a    andi a0,a0,544
    0x8401156e    0x2e    bnez a0,ffffffff84011572 <preemptionPoint+0x32>
    0x84011570    0x30    ret
    0x84011572    0x32    li a0,4
    0x84011574    0x34    j ffffffff84011570 <preemptionPoint+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 27 nodes.

Section setMCPriority (43 of 271)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x8401153a    0x0    sd a1,352(a0)
    0x8401153e    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (44 of 271)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x84011516    0x0    sd zero,72(a0)
    0x8401151a    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section resolveAddressBits (45 of 271)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 97 instructions.

RVC_TFFFT____FT___TF.
SRL.....
RVC_TFFTTT___FF___FT..
RVC_FTTFFT___T____FT.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
21 stack accesses found. Annotated code for `resolveAddressBits`:

    0x840111f4      0x0    addi sp,sp,-32
    0x840111f6      0x2    sd s0,24(sp)          ; stack access
    0x840111f8      0x4    sd s1,16(sp)          ; stack access
    0x840111fa      0x6    sd a1,0(sp)           ; stack access
    0x840111fc      0x8    sd a2,8(sp)           ; stack access
    0x840111fe      0xa    srli a7,a1,0x3b
    0x84011202      0xe    li a5,10
    0x84011204     0x10    bne a7,a5,ffffffff84011292 <resolveAddressBits+0x9e>
    0x84011208     0x14    mv a6,a4
    0x8401120a     0x16    li t5,-1
    0x8401120c     0x18    lui t0,0xfc000
    0x84011210     0x1c    srli t0,t0,0x19
    0x84011214     0x20    li t6,1
    0x84011216     0x22    slli t6,t6,0x26
    0x84011218     0x24    slli t2,t5,0x27
    0x8401121c     0x28    li s0,10
    0x8401121e     0x2a    srli a7,a1,0x2f
    0x84011222     0x2e    andi a7,a7,63
    0x84011226     0x32    srli t1,a1,0x35
    0x8401122a     0x36    andi t1,t1,63
    0x8401122e     0x3a    add s1,t1,a7
    0x84011232     0x3e    sext.w a5,a6
    0x84011236     0x42    subw t3,a6,t1
    0x8401123a     0x46    srl t3,a3,t3
    0x8401123e     0x4a    sll t4,t5,t1
    0x84011242     0x4e    not t4,t4
    0x84011246     0x52    and t3,t3,t4
    0x8401124a     0x56    bltu a6,t1,ffffffff840112ae <resolveAddressBits+0xba>
    0x8401124e     0x5a    bne a2,t3,ffffffff840112ae <resolveAddressBits+0xba>
    0x84011252     0x5e    bltu a6,s1,ffffffff840112de <resolveAddressBits+0xea>
    0x84011256     0x62    subw a5,a5,s1
    0x84011258     0x64    srl a5,a3,a5
    0x8401125c     0x68    sll a7,t5,a7
    0x84011260     0x6c    not a7,a7
    0x84011264     0x70    and a5,a5,a7
    0x84011268     0x74    slli a5,a5,0x5
    0x8401126a     0x76    slli a1,a1,0x1
    0x8401126c     0x78    and a2,a1,t0
    0x84011270     0x7c    and a1,a1,t6
    0x84011274     0x80    beqz a1,ffffffff8401127a <resolveAddressBits+0x86>
    0x84011276     0x82    or a2,a2,t2
    0x8401127a     0x86    add a5,a5,a2
    0x8401127c     0x88    bne a6,s1,ffffffff84011306 <resolveAddressBits+0x112>
    0x84011280     0x8c    sd zero,0(a0) # fffffffff8000000 <ki_end+0x73fd1000>  ; stack access
    0x84011284     0x90    sd a5,8(a0)           ; stack access
    0x84011286     0x92    sd zero,16(a0)        ; stack access
    0x8401128a     0x96    ld s0,24(sp)          ; stack access
    0x8401128c     0x98    ld s1,16(sp)          ; stack access
    0x8401128e     0x9a    addi sp,sp,32
    0x84011290     0x9c    ret
    0x84011292     0x9e    auipc a5,0x7
    0x84011296     0xa2    addi a5,a5,-658 # ffffffff84018000 <riscvKSASIDTable>
    0x8401129a     0xa6    sd zero,1024(a5)
    0x8401129e     0xaa    sd zero,1032(a5)
    0x840112a2     0xae    li a5,2
    0x840112a4     0xb0    sd a5,0(a0)           ; stack access
    0x840112a6     0xb2    sd zero,8(a0)         ; stack access
    0x840112aa     0xb6    sd a4,16(a0)          ; stack access
    0x840112ac     0xb8    j ffffffff8401128a <resolveAddressBits+0x96>
    0x840112ae     0xba    auipc a3,0x7
    0x840112b2     0xbe    addi a3,a3,-686 # ffffffff84018000 <riscvKSASIDTable>
    0x840112b6     0xc2    slli a6,a6,0x9
    0x840112b8     0xc4    lui a5,0x10
    0x840112ba     0xc6    addi a5,a5,-1
    0x840112bc     0xc8    and a6,a6,a5
    0x840112c0     0xcc    slli t1,t1,0x2
    0x840112c2     0xce    or t1,a6,t1
    0x840112c6     0xd2    ori t1,t1,3
    0x840112ca     0xd6    sd t1,1024(a3)
    0x840112ce     0xda    sd a2,1032(a3)
    0x840112d2     0xde    li a5,2
    0x840112d4     0xe0    sd a5,0(a0)           ; stack access
    0x840112d6     0xe2    sd zero,8(a0)         ; stack access
    0x840112da     0xe6    sd a4,16(a0)          ; stack access
    0x840112dc     0xe8    j ffffffff8401128a <resolveAddressBits+0x96>
    0x840112de     0xea    auipc a5,0x7
    0x840112e2     0xee    addi a5,a5,-734 # ffffffff84018000 <riscvKSASIDTable>
    0x840112e6     0xf2    slli s1,s1,0x9
    0x840112e8     0xf4    slli a6,a6,0x2
    0x840112ea     0xf6    or a6,s1,a6
    0x840112ee     0xfa    ori a6,a6,2
    0x840112f2     0xfe    sd a6,1024(a5)
    0x840112f6    0x102    sd zero,1032(a5)
    0x840112fa    0x106    li a5,2
    0x840112fc    0x108    sd a5,0(a0)           ; stack access
    0x840112fe    0x10a    sd zero,8(a0)         ; stack access
    0x84011302    0x10e    sd a4,16(a0)          ; stack access
    0x84011304    0x110    j ffffffff8401128a <resolveAddressBits+0x96>
    0x84011306    0x112    sub a6,a6,s1
    0x8401130a    0x116    ld a1,0(a5)
    0x8401130c    0x118    ld a2,8(a5)
    0x8401130e    0x11a    srli a7,a1,0x3b
    0x84011312    0x11e    beq a7,s0,ffffffff8401121e <resolveAddressBits+0x2a>
    0x84011316    0x122    sd zero,0(a0)         ; stack access
    0x8401131a    0x126    sd a5,8(a0)           ; stack access
    0x8401131c    0x128    sd a6,16(a0)          ; stack access
    0x84011320    0x12c    j ffffffff8401128a <resolveAddressBits+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 141 nodes.

Section Arch_performTransfer (46 of 271)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x840111f0    0x0    li a0,0
    0x840111f2    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (47 of 271)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x840111ec    0x0    li a0,0
    0x840111ee    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (48 of 271)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x840111e4    0x0    addi a0,a0,-5
    0x840111e6    0x2    sltiu a0,a0,3
    0x840111ea    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (49 of 271)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x840111e2    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_updateCapData (50 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_updateCapData`:

    0x84010dbe    0x0    addi sp,sp,-32
    0x84010dc0    0x2    mv a0,a2
    0x84010dc2    0x4    mv a1,a3
    0x84010dc4    0x6    addi sp,sp,32
    0x84010dc6    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_checkIRQ (51 of 271)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84010d2c     0x0    addi a0,a0,-1
    0x84010d2e     0x2    li a5,53
    0x84010d32     0x6    bltu a5,a0,ffffffff84010d3a <Arch_checkIRQ+0xe>
    0x84010d36     0xa    li a0,0
    0x84010d38     0xc    ret
    0x84010d3a     0xe    auipc a5,0x7
    0x84010d3e    0x12    addi a5,a5,710 # ffffffff84018000 <riscvKSASIDTable>
    0x84010d42    0x16    li a4,4
    0x84010d44    0x18    sd a4,1744(a5)
    0x84010d48    0x1c    li a4,1
    0x84010d4a    0x1e    sd a4,1712(a5)
    0x84010d4e    0x22    li a4,54
    0x84010d52    0x26    sd a4,1720(a5)
    0x84010d56    0x2a    li a0,3
    0x84010d58    0x2c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 22 nodes.

Section plat_cleanInvalidateL2Range (52 of 271)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84010d2a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (53 of 271)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84010d28    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (54 of 271)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84010d26    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section setIRQTrigger (55 of 271)
=================================

Deriving specifications
-----------------------

Section `setIRQTrigger` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setIRQTrigger`:

    0x84010d24    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQTrigger` has 2 nodes.

Section setNextPC (56 of 271)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84010d1e    0x0    sd a1,272(a0)
    0x84010d22    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (57 of 271)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84010d18    0x0    ld a0,264(a0)
    0x84010d1c    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (58 of 271)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x84010ca4     0x0    addi sp,sp,-16
    0x84010ca6     0x2    sd a0,0(sp)           ; stack access
    0x84010ca8     0x4    sd a1,8(sp)           ; stack access
    0x84010caa     0x6    sd a0,0(a2)
    0x84010cac     0x8    sd a1,8(a2)
    0x84010cae     0xa    sd a3,0(a4)
    0x84010cb0     0xc    sfence.vma
    0x84010cb4    0x10    li a0,0
    0x84010cb6    0x12    addi sp,sp,16
    0x84010cb8    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (59 of 271)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84010c8e     0x0    addi sp,sp,-16
    0x84010c90     0x2    sd a0,0(sp)           ; stack access
    0x84010c92     0x4    sd a1,8(sp)           ; stack access
    0x84010c94     0x6    sd a0,0(a2)
    0x84010c96     0x8    sd a1,8(a2)
    0x84010c98     0xa    sd a3,0(a4)
    0x84010c9a     0xc    sfence.vma
    0x84010c9e    0x10    li a0,0
    0x84010ca0    0x12    addi sp,sp,16
    0x84010ca2    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (60 of 271)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x84010c62     0x0    mv a5,a0
    0x84010c64     0x2    li a4,2
    0x84010c66     0x4    beq a0,a4,ffffffff84010c74 <maskVMRights+0x12>
    0x84010c6a     0x8    li a4,3
    0x84010c6c     0xa    li a0,1
    0x84010c6e     0xc    beq a5,a4,ffffffff84010c7e <maskVMRights+0x1c>
    0x84010c72    0x10    ret
    0x84010c74    0x12    srli a1,a1,0x1
    0x84010c76    0x14    andi a1,a1,1
    0x84010c78    0x16    addi a0,a1,1
    0x84010c7c    0x1a    ret
    0x84010c7e    0x1c    srli a5,a1,0x1
    0x84010c82    0x20    andi a5,a5,1
    0x84010c84    0x22    beqz a5,ffffffff84010c72 <maskVMRights+0x10>
    0x84010c86    0x24    andi a1,a1,1
    0x84010c88    0x26    addi a0,a1,2
    0x84010c8c    0x2a    j ffffffff84010c72 <maskVMRights+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 25 nodes.

Section checkValidIPCBuffer (61 of 271)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 26 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x84010c1c     0x0    addi sp,sp,-16
    0x84010c1e     0x2    srli a4,a1,0x3b
    0x84010c22     0x6    li a5,1
    0x84010c24     0x8    bne a4,a5,ffffffff84010c38 <checkValidIPCBuffer+0x1c>
    0x84010c28     0xc    srli a1,a1,0x36
    0x84010c2a     0xe    andi a1,a1,1
    0x84010c2c    0x10    bnez a1,ffffffff84010c46 <checkValidIPCBuffer+0x2a>
    0x84010c2e    0x12    andi a0,a0,1023
    0x84010c32    0x16    bnez a0,ffffffff84010c54 <checkValidIPCBuffer+0x38>
    0x84010c34    0x18    addi sp,sp,16
    0x84010c36    0x1a    ret
    0x84010c38    0x1c    li a5,3
    0x84010c3a    0x1e    auipc a4,0x8
    0x84010c3e    0x22    sd a5,-1386(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010c42    0x26    li a0,3
    0x84010c44    0x28    j ffffffff84010c34 <checkValidIPCBuffer+0x18>
    0x84010c46    0x2a    li a5,3
    0x84010c48    0x2c    auipc a4,0x8
    0x84010c4c    0x30    sd a5,-1400(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010c50    0x34    li a0,3
    0x84010c52    0x36    j ffffffff84010c34 <checkValidIPCBuffer+0x18>
    0x84010c54    0x38    li a5,5
    0x84010c56    0x3a    auipc a4,0x8
    0x84010c5a    0x3e    sd a5,-1414(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010c5e    0x42    li a0,3
    0x84010c60    0x44    j ffffffff84010c34 <checkValidIPCBuffer+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 36 nodes.

Section isValidVTableRoot (62 of 271)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x84010c06     0x0    addi sp,sp,-16
    0x84010c08     0x2    srli a4,a0,0x3b
    0x84010c0c     0x6    li a5,3
    0x84010c0e     0x8    srli a0,a0,0x27
    0x84010c10     0xa    andi a0,a0,1
    0x84010c12     0xc    beq a4,a5,ffffffff84010c18 <isValidVTableRoot+0x12>
    0x84010c16    0x10    li a0,0
    0x84010c18    0x12    addi sp,sp,16
    0x84010c1a    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (63 of 271)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 36 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupPTSlot`:

    0x84010882     0x0    addi sp,sp,-16
    0x84010884     0x2    mv a3,a1
    0x84010886     0x4    srli a5,a1,0x1e
    0x8401088a     0x8    andi a5,a5,511
    0x8401088e     0xc    slli a5,a5,0x3
    0x84010890     0xe    add a0,a0,a5
    0x84010892    0x10    li a1,30
    0x84010894    0x12    li a7,3
    0x84010896    0x14    lui a6,0xfff00
    0x8401089a    0x18    srli a6,a6,0x8
    0x8401089e    0x1c    li a2,-1
    0x840108a0    0x1e    slli a2,a2,0x26
    0x840108a2    0x20    j ffffffff840108c0 <lookupPTSlot+0x3e>
    0x840108a4    0x22    addi a1,a1,-9
    0x840108a6    0x24    beq a1,a7,ffffffff840108e4 <lookupPTSlot+0x62>
    0x840108aa    0x28    slli a0,a5,0x2
    0x840108ae    0x2c    and a0,a0,a6
    0x840108b2    0x30    add a0,a0,a2
    0x840108b4    0x32    srl a5,a3,a1
    0x840108b8    0x36    andi a5,a5,511
    0x840108bc    0x3a    slli a5,a5,0x3
    0x840108be    0x3c    add a0,a0,a5
    0x840108c0    0x3e    ld a5,0(a0)
    0x840108c2    0x40    andi a4,a5,1
    0x840108c6    0x44    beqz a4,ffffffff840108e0 <lookupPTSlot+0x5e>
    0x840108c8    0x46    srli a4,a5,0x1
    0x840108cc    0x4a    srli t1,a5,0x2
    0x840108d0    0x4e    or a4,a4,t1
    0x840108d4    0x52    srli t1,a5,0x3
    0x840108d8    0x56    or a4,a4,t1
    0x840108dc    0x5a    andi a4,a4,1
    0x840108de    0x5c    beqz a4,ffffffff840108a4 <lookupPTSlot+0x22>
    0x840108e0    0x5e    addi sp,sp,16
    0x840108e2    0x60    ret
    0x840108e4    0x62    li a1,12
    0x840108e6    0x64    j ffffffff840108e0 <lookupPTSlot+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 44 nodes.

Section copyGlobalMappings (64 of 271)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x8401067c     0x0    auipc a5,0x1d
    0x84010680     0x4    addi a5,a5,388 # ffffffff8402d800 <kernel_root_pageTable+0x800>
    0x84010684     0x8    lui a4,0x1
    0x84010686     0xa    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x8401068a     0xe    add a4,a4,a0
    0x8401068c    0x10    auipc a2,0x1e
    0x84010690    0x14    addi a2,a2,-1676 # ffffffff8402e000 <kernel_root_pageTable+0x1000>
    0x84010694    0x18    ld a3,0(a5)
    0x84010696    0x1a    sd a3,0(a4)
    0x84010698    0x1c    addi a5,a5,8
    0x8401069a    0x1e    addi a4,a4,8
    0x8401069c    0x20    bne a5,a2,ffffffff84010694 <copyGlobalMappings+0x18>
    0x840106a0    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (65 of 271)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x8401067a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (66 of 271)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x84010678    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (67 of 271)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x8401045e    0x0    li a0,0
    0x84010460    0x2    li a1,0
    0x84010462    0x4    li a2,0
    0x84010464    0x6    li a7,8
    0x84010466    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section restore_user_context (68 of 271)
========================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 41 instructions.

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

No stack accesses found. Code for `restore_user_context`:

    0x840103bc     0x0    auipc a5,0x1a
    0x840103c0     0x4    ld a5,1148(a5) # ffffffff8402a838 <ksCurThread>
    0x840103c4     0x8    mv t0,a5
    0x840103c6     0xa    ld ra,0(t0)
    0x840103ca     0xe    ld sp,8(t0)
    0x840103ce    0x12    ld gp,16(t0)
    0x840103d2    0x16    ld t2,48(t0)
    0x840103d6    0x1a    ld s0,56(t0)
    0x840103da    0x1e    ld s1,64(t0)
    0x840103de    0x22    ld a0,72(t0)
    0x840103e2    0x26    ld a1,80(t0)
    0x840103e6    0x2a    ld a2,88(t0)
    0x840103ea    0x2e    ld a3,96(t0)
    0x840103ee    0x32    ld a4,104(t0)
    0x840103f2    0x36    ld a5,112(t0)
    0x840103f6    0x3a    ld a6,120(t0)
    0x840103fa    0x3e    ld a7,128(t0)
    0x840103fe    0x42    ld s2,136(t0)
    0x84010402    0x46    ld s3,144(t0)
    0x84010406    0x4a    ld s4,152(t0)
    0x8401040a    0x4e    ld s5,160(t0)
    0x8401040e    0x52    ld s6,168(t0)
    0x84010412    0x56    ld s7,176(t0)
    0x84010416    0x5a    ld s8,184(t0)
    0x8401041a    0x5e    ld s9,192(t0)
    0x8401041e    0x62    ld s10,200(t0)
    0x84010422    0x66    ld s11,208(t0)
    0x84010426    0x6a    ld t3,216(t0)
    0x8401042a    0x6e    ld t4,224(t0)
    0x8401042e    0x72    ld t5,232(t0)
    0x84010432    0x76    ld t6,240(t0)
    0x84010436    0x7a    ld t1,24(t0)
    0x8401043a    0x7e    add tp,t1,zero
    0x8401043e    0x82    ld t1,272(t0)
    0x84010442    0x86    csrw sepc,t1
    0x84010446    0x8a    csrw sscratch,t0
    0x8401044a    0x8e    ld t1,256(t0)
    0x8401044e    0x92    csrw sstatus,t1
    0x84010452    0x96    ld t1,40(t0)
    0x84010456    0x9a    ld t0,32(t0)
    0x8401045a    0x9e    sret

Proving inst theorems
---------------------

41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 79 nodes.

Section cap_get_capPtr (69 of 271)
==================================

Deriving specifications
-----------------------

Section `cap_get_capPtr` consists of 129 instructions.


Stack analysis
---------------

No stack accesses found. Code for `cap_get_capPtr`:

    0x84010208      0x0    addi sp,sp,-16
    0x8401020a      0x2    mv a4,a0
    0x8401020c      0x4    srli a5,a0,0x3b
    0x84010210      0x8    li a3,10
    0x84010212      0xa    beq a5,a3,ffffffff840102d2 <cap_get_capPtr+0xca>
    0x84010216      0xe    bltu a3,a5,ffffffff84010260 <cap_get_capPtr+0x58>
    0x8401021a     0x12    li a3,4
    0x8401021c     0x14    beq a5,a3,ffffffff840102ba <cap_get_capPtr+0xb2>
    0x84010220     0x18    bgeu a3,a5,ffffffff84010242 <cap_get_capPtr+0x3a>
    0x84010224     0x1c    li a3,6
    0x84010226     0x1e    li a0,0
    0x84010228     0x20    bne a5,a3,ffffffff840102b6 <cap_get_capPtr+0xae>
    0x8401022c     0x24    slli a5,a4,0x19
    0x84010230     0x28    srli a5,a5,0x19
    0x84010232     0x2a    srli a4,a4,0x26
    0x84010234     0x2c    andi a4,a4,1
    0x84010236     0x2e    beqz a4,ffffffff8401023e <cap_get_capPtr+0x36>
    0x84010238     0x30    li a4,-1
    0x8401023a     0x32    slli a4,a4,0x27
    0x8401023c     0x34    or a5,a5,a4
    0x8401023e     0x36    mv a0,a5
    0x84010240     0x38    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010242     0x3a    li a3,2
    0x84010244     0x3c    bne a5,a3,ffffffff84010328 <cap_get_capPtr+0x120>
    0x84010248     0x40    slli a5,a0,0x19
    0x8401024c     0x44    srli a5,a5,0x19
    0x8401024e     0x46    srli a4,a0,0x26
    0x84010252     0x4a    andi a4,a4,1
    0x84010254     0x4c    beqz a4,ffffffff8401025c <cap_get_capPtr+0x54>
    0x84010256     0x4e    li a4,-1
    0x84010258     0x50    slli a4,a4,0x27
    0x8401025a     0x52    or a5,a5,a4
    0x8401025c     0x54    mv a0,a5
    0x8401025e     0x56    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010260     0x58    li a3,16
    0x84010262     0x5a    beq a5,a3,ffffffff84010324 <cap_get_capPtr+0x11c>
    0x84010266     0x5e    bgeu a3,a5,ffffffff8401028e <cap_get_capPtr+0x86>
    0x8401026a     0x62    li a3,18
    0x8401026c     0x64    li a0,0
    0x8401026e     0x66    bne a5,a3,ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010272     0x6a    andi a5,a4,127
    0x84010276     0x6e    li a3,64
    0x8401027a     0x72    beq a5,a3,ffffffff840102ec <cap_get_capPtr+0xe4>
    0x8401027e     0x76    andi a4,a4,63
    0x84010282     0x7a    addiw a4,a4,1
    0x84010284     0x7c    li a0,-1
    0x84010286     0x7e    sll a0,a0,a4
    0x8401028a     0x82    and a0,a0,a1
    0x8401028c     0x84    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x8401028e     0x86    li a3,12
    0x84010290     0x88    bne a5,a3,ffffffff840102ae <cap_get_capPtr+0xa6>
    0x84010294     0x8c    slli a5,a0,0x19
    0x84010298     0x90    srli a5,a5,0x19
    0x8401029a     0x92    srli a4,a0,0x26
    0x8401029e     0x96    andi a4,a4,1
    0x840102a0     0x98    beqz a4,ffffffff840102a8 <cap_get_capPtr+0xa0>
    0x840102a2     0x9a    li a4,-1
    0x840102a4     0x9c    slli a4,a4,0x27
    0x840102a6     0x9e    or a5,a5,a4
    0x840102a8     0xa0    andi a0,a5,-1024
    0x840102ac     0xa4    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x840102ae     0xa6    li a3,14
    0x840102b0     0xa8    li a0,0
    0x840102b2     0xaa    bne a5,a3,ffffffff840102f0 <cap_get_capPtr+0xe8>
    0x840102b6     0xae    addi sp,sp,16
    0x840102b8     0xb0    ret
    0x840102ba     0xb2    slli a5,a0,0x19
    0x840102be     0xb6    srli a5,a5,0x19
    0x840102c0     0xb8    srli a4,a0,0x26
    0x840102c4     0xbc    andi a4,a4,1
    0x840102c6     0xbe    beqz a4,ffffffff840102ce <cap_get_capPtr+0xc6>
    0x840102c8     0xc0    li a4,-1
    0x840102ca     0xc2    slli a4,a4,0x27
    0x840102cc     0xc4    or a5,a5,a4
    0x840102ce     0xc6    mv a0,a5
    0x840102d0     0xc8    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x840102d2     0xca    slli a4,a0,0x1
    0x840102d6     0xce    lui a0,0xfc000
    0x840102da     0xd2    srli a0,a0,0x19
    0x840102dc     0xd4    and a0,a0,a4
    0x840102de     0xd6    srli a4,a4,0x26
    0x840102e0     0xd8    andi a4,a4,1
    0x840102e2     0xda    beqz a4,ffffffff840102b6 <cap_get_capPtr+0xae>
    0x840102e4     0xdc    li a5,-1
    0x840102e6     0xde    slli a5,a5,0x27
    0x840102e8     0xe0    or a0,a0,a5
    0x840102ea     0xe2    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x840102ec     0xe4    li a4,4
    0x840102ee     0xe6    j ffffffff84010282 <cap_get_capPtr+0x7a>
    0x840102f0     0xe8    li a3,13
    0x840102f2     0xea    bne a5,a3,ffffffff8401032e <cap_get_capPtr+0x126>
    0x840102f6     0xee    slli a4,a4,0x2
    0x840102f8     0xf0    lui a0,0xf8000
    0x840102fc     0xf4    srli a0,a0,0x19
    0x840102fe     0xf6    and a0,a0,a4
    0x84010300     0xf8    srli a4,a4,0x26
    0x84010302     0xfa    andi a4,a4,1
    0x84010304     0xfc    beqz a4,ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010306     0xfe    li a5,-1
    0x84010308    0x100    slli a5,a5,0x27
    0x8401030a    0x102    or a0,a0,a5
    0x8401030c    0x104    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x8401030e    0x106    srli a1,a1,0x9
    0x84010310    0x108    slli a0,a1,0x19
    0x84010314    0x10c    srli a0,a0,0x19
    0x84010316    0x10e    srli a1,a1,0x26
    0x84010318    0x110    andi a1,a1,1
    0x8401031a    0x112    beqz a1,ffffffff840102b6 <cap_get_capPtr+0xae>
    0x8401031c    0x114    li a5,-1
    0x8401031e    0x116    slli a5,a5,0x27
    0x84010320    0x118    or a0,a0,a5
    0x84010322    0x11a    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010324    0x11c    li a0,0
    0x84010326    0x11e    j ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010328    0x120    li a4,3
    0x8401032a    0x122    beq a5,a4,ffffffff8401030e <cap_get_capPtr+0x106>
    0x8401032e    0x126    li a4,1
    0x84010330    0x128    li a0,0
    0x84010332    0x12a    bne a5,a4,ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010336    0x12e    srli a1,a1,0x9
    0x84010338    0x130    slli a0,a1,0x19
    0x8401033c    0x134    srli a0,a0,0x19
    0x8401033e    0x136    srli a1,a1,0x26
    0x84010340    0x138    andi a1,a1,1
    0x84010342    0x13a    beqz a1,ffffffff840102b6 <cap_get_capPtr+0xae>
    0x84010344    0x13c    li a5,-1
    0x84010346    0x13e    slli a5,a5,0x27
    0x84010348    0x140    or a0,a0,a5
    0x8401034a    0x142    j ffffffff840102b6 <cap_get_capPtr+0xae>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
129 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cap_get_capPtr` has 176 nodes.

Section getNewActiveIRQ (70 of 271)
===================================

Deriving specifications
-----------------------

Section `getNewActiveIRQ` consists of 13 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `getNewActiveIRQ`:

    0x840101e4     0x0    csrr a0,sip
    0x840101e8     0x4    andi a5,a0,512
    0x840101ec     0x8    bnez a5,ffffffff840101f6 <getNewActiveIRQ+0x12>
    0x840101ee     0xa    andi a0,a0,32
    0x840101f2     0xe    bnez a0,ffffffff84010202 <getNewActiveIRQ+0x1e>
    0x840101f4    0x10    ret
    0x840101f6    0x12    lui a5,0xcc202
    0x840101fa    0x16    lw a0,4(a5)
    0x840101fc    0x18    slli a0,a0,0x20
    0x840101fe    0x1a    srli a0,a0,0x20
    0x84010200    0x1c    ret
    0x84010202    0x1e    li a0,54
    0x84010206    0x22    j ffffffff840101f4 <getNewActiveIRQ+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNewActiveIRQ` has 21 nodes.

Section findVSpaceForASID (71 of 271)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 35 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x84010184     0x0    addi sp,sp,-16
    0x84010186     0x2    srli a5,a0,0x9
    0x8401018a     0x6    slli a4,a5,0x3
    0x8401018e     0xa    auipc a5,0x8
    0x84010192     0xe    addi a5,a5,-398 # ffffffff84018000 <riscvKSASIDTable>
    0x84010196    0x12    add a5,a5,a4
    0x84010198    0x14    ld a5,0(a5)
    0x8401019a    0x16    beqz a5,ffffffff840101b4 <findVSpaceForASID+0x30>
    0x8401019c    0x18    andi a0,a0,511
    0x840101a0    0x1c    slli a0,a0,0x3
    0x840101a2    0x1e    add a0,a0,a5
    0x840101a4    0x20    ld a5,0(a0)
    0x840101a6    0x22    beqz a5,ffffffff840101cc <findVSpaceForASID+0x48>
    0x840101a8    0x24    sd zero,0(sp)         ; stack access
    0x840101aa    0x26    sd a5,8(sp)           ; stack access
    0x840101ac    0x28    ld a0,0(sp)           ; stack access
    0x840101ae    0x2a    ld a1,8(sp)           ; stack access
    0x840101b0    0x2c    addi sp,sp,16
    0x840101b2    0x2e    ret
    0x840101b4    0x30    auipc a5,0x8
    0x840101b8    0x34    addi a5,a5,-436 # ffffffff84018000 <riscvKSASIDTable>
    0x840101bc    0x38    sd zero,1024(a5)
    0x840101c0    0x3c    sd zero,1032(a5)
    0x840101c4    0x40    li a5,2
    0x840101c6    0x42    sd a5,0(sp)           ; stack access
    0x840101c8    0x44    sd zero,8(sp)         ; stack access
    0x840101ca    0x46    j ffffffff840101ac <findVSpaceForASID+0x28>
    0x840101cc    0x48    auipc a5,0x8
    0x840101d0    0x4c    addi a5,a5,-460 # ffffffff84018000 <riscvKSASIDTable>
    0x840101d4    0x50    sd zero,1024(a5)
    0x840101d8    0x54    sd zero,1032(a5)
    0x840101dc    0x58    li a5,2
    0x840101de    0x5a    sd a5,0(sp)           ; stack access
    0x840101e0    0x5c    sd zero,8(sp)         ; stack access
    0x840101e2    0x5e    j ffffffff840101ac <findVSpaceForASID+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 54 nodes.

Section pte_next (72 of 271)
============================

Deriving specifications
-----------------------

Section `pte_next` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `pte_next`:

    0x84010160     0x0    snez a1,a1
    0x84010164     0x4    srli a0,a0,0x2
    0x84010166     0x6    lui a5,0xfff00
    0x8401016a     0xa    srli a5,a5,0xa
    0x8401016c     0xc    and a0,a0,a5
    0x8401016e     0xe    slli a5,a1,0x3
    0x84010172    0x12    slli a4,a1,0x2
    0x84010176    0x16    or a5,a5,a4
    0x84010178    0x18    or a0,a0,a5
    0x8401017a    0x1a    slli a1,a1,0x1
    0x8401017c    0x1c    or a0,a0,a1
    0x8401017e    0x1e    ori a0,a0,225
    0x84010182    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `pte_next` has 14 nodes.

Section idle_thread (73 of 271)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x8401015a    0x0    wfi
    0x8401015e    0x4    j ffffffff8401015a <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section getSyscallArg (74 of 271)
=================================

Deriving specifications
-----------------------

Section `getSyscallArg` consists of 18 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getSyscallArg`:

    0x8401012a     0x0    li a5,3
    0x8401012c     0x2    bgeu a5,a0,ffffffff8401013a <getSyscallArg+0x10>
    0x84010130     0x6    addi a0,a0,1
    0x84010132     0x8    slli a0,a0,0x3
    0x84010134     0xa    add a1,a1,a0
    0x84010136     0xc    ld a0,0(a1)
    0x84010138     0xe    ret
    0x8401013a    0x10    slli a0,a0,0x3
    0x8401013c    0x12    auipc a5,0x7
    0x84010140    0x16    addi a5,a5,948 # ffffffff840174f0 <msgRegisters>
    0x84010144    0x1a    add a0,a0,a5
    0x84010146    0x1c    ld a5,0(a0)
    0x84010148    0x1e    slli a4,a5,0x3
    0x8401014c    0x22    auipc a5,0x1a
    0x84010150    0x26    ld a5,1772(a5) # ffffffff8402a838 <ksCurThread>
    0x84010154    0x2a    add a5,a5,a4
    0x84010156    0x2c    ld a0,0(a5)
    0x84010158    0x2e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getSyscallArg` has 26 nodes.

Section setMR (75 of 271)
=========================

Deriving specifications
-----------------------

Section `setMR` consists of 25 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMR`:

    0x840100ea     0x0    li a5,3
    0x840100ec     0x2    bgeu a5,a2,ffffffff84010104 <setMR+0x1a>
    0x840100f0     0x6    beqz a1,ffffffff84010126 <setMR+0x3c>
    0x840100f2     0x8    addiw a2,a2,1
    0x840100f4     0xa    sext.w a0,a2
    0x840100f8     0xe    slli a2,a2,0x20
    0x840100fa    0x10    srli a2,a2,0x20
    0x840100fc    0x12    slli a2,a2,0x3
    0x840100fe    0x14    add a1,a1,a2
    0x84010100    0x16    sd a3,0(a1)
    0x84010102    0x18    ret
    0x84010104    0x1a    slli a5,a2,0x20
    0x84010108    0x1e    srli a5,a5,0x20
    0x8401010a    0x20    slli a4,a5,0x3
    0x8401010e    0x24    auipc a5,0x7
    0x84010112    0x28    addi a5,a5,994 # ffffffff840174f0 <msgRegisters>
    0x84010116    0x2c    add a5,a5,a4
    0x84010118    0x2e    ld a5,0(a5)
    0x8401011a    0x30    slli a5,a5,0x3
    0x8401011c    0x32    add a0,a0,a5
    0x8401011e    0x34    sd a3,0(a0)
    0x84010120    0x36    addiw a0,a2,1
    0x84010124    0x3a    ret
    0x84010126    0x3c    li a0,4
    0x84010128    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMR` has 35 nodes.

Section clzl (76 of 271)
========================

Deriving specifications
-----------------------

Section `clzl` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `clzl`:

    0x840100cc     0x0    mv a5,a0
    0x840100ce     0x2    bltz a0,ffffffff840100e6 <clzl+0x1a>
    0x840100d2     0x6    li a0,0
    0x840100d4     0x8    li a4,65
    0x840100d8     0xc    slli a5,a5,0x1
    0x840100da     0xe    addi a0,a0,1
    0x840100dc    0x10    bltz a5,ffffffff840100e8 <clzl+0x1c>
    0x840100e0    0x14    bne a0,a4,ffffffff840100d8 <clzl+0xc>
    0x840100e4    0x18    ret
    0x840100e6    0x1a    li a0,0
    0x840100e8    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `clzl` has 19 nodes.

Section bi_finalise (77 of 271)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x84000b84     0x0    auipc a5,0x1
    0x84000b88     0x4    addi a5,a5,-1628 # ffffffff84001528 <ndks_boot>
    0x84000b8c     0x8    ld a3,592(a5)
    0x84000b90     0xc    ld a4,600(a5)
    0x84000b94    0x10    ld a5,584(a5)
    0x84000b98    0x14    sd a3,40(a5)
    0x84000b9a    0x16    sd a4,48(a5)
    0x84000b9c    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (78 of 271)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 7 instructions.


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x8400095a     0x0    auipc a5,0x2a
    0x8400095e     0x4    sd a0,-306(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84000962     0x8    auipc a5,0x2a
    0x84000966     0xc    ld a5,-306(a5) # ffffffff8402a830 <ksIdleThread>
    0x8400096a    0x10    auipc a4,0x2a
    0x8400096e    0x14    sd a5,-306(a4) # ffffffff8402a838 <ksCurThread>
    0x84000972    0x18    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 11 nodes.

Section create_root_cnode (79 of 271)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_root_cnode`:

    0x840005a2     0x0    addi sp,sp,-16
    0x840005a4     0x2    auipc a5,0x1
    0x840005a8     0x6    addi a5,a5,-124 # ffffffff84001528 <ndks_boot>
    0x840005ac     0xa    lui a4,0x80
    0x840005b0     0xe    sd a4,600(a5)
    0x840005b4    0x12    ld a4,608(a5)
    0x840005b8    0x16    slli a0,a4,0x19
    0x840005bc    0x1a    srli a0,a0,0x1a
    0x840005be    0x1c    lui a5,0xab53
    0x840005c2    0x20    slli a5,a5,0x23
    0x840005c4    0x22    or a0,a0,a5
    0x840005c6    0x24    addi a5,a4,64 # 80040 <KERNEL_OFFSET-0xfffffffefff7ffc0>
    0x840005ca    0x28    sd a0,64(a4)
    0x840005cc    0x2a    sd zero,72(a4)
    0x840005d0    0x2e    sd zero,80(a4)
    0x840005d4    0x32    li a4,3
    0x840005d6    0x34    sd a4,24(a5)
    0x840005d8    0x36    li a1,0
    0x840005da    0x38    addi sp,sp,16
    0x840005dc    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (80 of 271)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x84000590     0x0    addi sp,sp,-16
    0x84000592     0x2    sd a1,0(a0)
    0x84000594     0x4    sd a2,8(a0)
    0x84000596     0x6    sd zero,16(a0) # c000010 <KERNEL_OFFSET-0xfffffffef3fffff0>
    0x8400059a     0xa    li a5,3
    0x8400059c     0xc    sd a5,24(a0)
    0x8400059e     0xe    addi sp,sp,16
    0x840005a0    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section initIRQController (81 of 271)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 30 instructions.

LW..
SW..

Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x8400030e     0x0    li a4,1
    0x84000310     0x2    lui a0,0xcc001
    0x84000314     0x6    lui a6,0xcc202
    0x84000318     0xa    li a1,54
    0x8400031c     0xe    j ffffffff84000324 <initIRQController+0x16>
    0x8400031e    0x10    addi a4,a4,1
    0x84000320    0x12    beq a4,a1,ffffffff8400034c <initIRQController+0x3e>
    0x84000324    0x16    sext.w a2,a4
    0x84000328    0x1a    srli a5,a4,0x5
    0x8400032c    0x1e    slli a5,a5,0x2
    0x8400032e    0x20    add a5,a5,a0
    0x84000330    0x22    lw a5,0(a5)
    0x84000332    0x24    slli a5,a5,0x20
    0x84000334    0x26    srli a5,a5,0x20
    0x84000336    0x28    andi a3,a4,31
    0x8400033a    0x2c    srl a5,a5,a3
    0x8400033e    0x30    andi a5,a5,1
    0x84000340    0x32    beqz a5,ffffffff8400031e <initIRQController+0x10>
    0x84000342    0x34    lw a5,4(a6) # ffffffffcc202004 <ki_end+0x481d3004>
    0x84000346    0x38    sw a2,4(a6)
    0x8400034a    0x3c    j ffffffff8400031e <initIRQController+0x10>
    0x8400034c    0x3e    lui a5,0xcc000
    0x84000350    0x42    addi a5,a5,4
    0x84000352    0x44    li a3,2
    0x84000354    0x46    lui a4,0xcc000
    0x84000358    0x4a    addi a4,a4,220 # ffffffffcc0000dc <ki_end+0x47fd10dc>
    0x8400035c    0x4e    sw a3,0(a5)
    0x8400035e    0x50    addi a5,a5,4
    0x84000360    0x52    bne a5,a4,ffffffff8400035c <initIRQController+0x4e>
    0x84000364    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 41 nodes.

Section initLocalIRQController (82 of 271)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 22 instructions.

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x840002ca     0x0    li a3,1
    0x840002cc     0x2    lui a1,0xcc002
    0x840002d0     0x6    addi a1,a1,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x840002d4     0xa    li a6,1
    0x840002d6     0xc    li a0,54
    0x840002da    0x10    srli a4,a3,0x5
    0x840002de    0x14    slli a4,a4,0x2
    0x840002e0    0x16    add a4,a4,a1
    0x840002e2    0x18    lw a2,0(a4)
    0x840002e4    0x1a    andi a5,a3,31
    0x840002e8    0x1e    sll a5,a6,a5
    0x840002ec    0x22    not a5,a5
    0x840002f0    0x26    and a5,a5,a2
    0x840002f2    0x28    sext.w a5,a5
    0x840002f4    0x2a    sw a5,0(a4)
    0x840002f6    0x2c    addi a3,a3,1
    0x840002f8    0x2e    bne a3,a0,ffffffff840002da <initLocalIRQController+0x10>
    0x840002fc    0x32    lui a5,0xcc202
    0x84000300    0x36    sw zero,0(a5) # ffffffffcc202000 <ki_end+0x481d3000>
    0x84000304    0x3a    li a5,544
    0x84000308    0x3e    csrrs a5,sie,a5
    0x8400030c    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 29 nodes.

Section initL2Cache (83 of 271)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x840002c8    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section initTimer (84 of 271)
=============================

Deriving specifications
-----------------------

Section `initTimer` consists of 7 instructions.

Skipping c0102573 rdtime a0

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `initTimer`:

    0x840002b4     0x0    rdtime a0
    0x840002b8     0x4    addi a0,a0,2000
    0x840002bc     0x8    li a1,0
    0x840002be     0xa    li a2,0
    0x840002c0     0xc    li a7,0
    0x840002c2     0xe    ecall
    0x840002c6    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initTimer` has 10 nodes.

Section get_avail_p_regs (85 of 271)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x840002aa    0x0    auipc a0,0x1
    0x840002ae    0x4    addi a0,a0,622 # ffffffff84001518 <avail_p_regs>
    0x840002b2    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (86 of 271)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x840002a6    0x0    li a0,1
    0x840002a8    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section activate_kernel_vspace (87 of 271)
==========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x84000138     0x0    auipc a5,0x2d
    0x8400013c     0x4    addi a5,a5,-312 # ffffffff8402d000 <kernel_root_pageTable>
    0x84000140     0x8    li a4,1
    0x84000142     0xa    slli a4,a4,0x20
    0x84000144     0xc    add a5,a5,a4
    0x84000146     0xe    srli a5,a5,0xc
    0x84000148    0x10    li a4,-1
    0x8400014a    0x12    srli a3,a4,0x14
    0x8400014e    0x16    and a5,a5,a3
    0x84000150    0x18    slli a4,a4,0x3f
    0x84000152    0x1a    or a5,a5,a4
    0x84000154    0x1c    csrw satp,a5
    0x84000158    0x20    sfence.vma
    0x8400015c    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (88 of 271)
=====================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x84000108     0x0    addi sp,sp,-16
    0x8400010a     0x2    addi a1,a1,-1
    0x8400010c     0x4    srli a4,a1,0x15
    0x84000110     0x8    addi a4,a4,1
    0x84000112     0xa    slli a4,a4,0x15
    0x84000114     0xc    lui a5,0xffe00
    0x84000118    0x10    and a5,a5,a0
    0x8400011a    0x12    sub a4,a4,a5
    0x8400011c    0x14    srli a4,a4,0x15
    0x8400011e    0x16    srli a5,a1,0x1e
    0x84000122    0x1a    addi a5,a5,1
    0x84000124    0x1c    slli a5,a5,0x1e
    0x84000126    0x1e    lui a3,0xc0000
    0x8400012a    0x22    and a0,a0,a3
    0x8400012c    0x24    sub a5,a5,a0
    0x8400012e    0x26    srli a5,a5,0x1e
    0x84000130    0x28    add a0,a4,a5
    0x84000134    0x2c    addi sp,sp,16
    0x84000136    0x2e    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (89 of 271)
================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x840000f2     0x0    addi sp,sp,-16
    0x840000f4     0x2    slli a1,a0,0x9
    0x840000f8     0x6    li a0,1
    0x840000fa     0x8    slli a0,a0,0x3b
    0x840000fc     0xa    lui a5,0xfe000
    0x84000100     0xe    srli a5,a5,0x10
    0x84000102    0x10    and a1,a1,a5
    0x84000104    0x12    addi sp,sp,16
    0x84000106    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section Arch_configureIdleThread (90 of 271)
============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x840000a4     0x0    auipc a5,0x10
    0x840000a8     0x4    addi a5,a5,182 # ffffffff8401015a <idle_thread>
    0x840000ac     0x8    sd a5,272(a0)
    0x840000b0     0xc    li a5,288
    0x840000b4    0x10    sd a5,256(a0)
    0x840000b8    0x14    auipc a5,0x2a
    0x840000bc    0x18    addi a5,a5,1864 # ffffffff8402a800 <tlbLockCount>
    0x840000c0    0x1c    sd a5,8(a0)
    0x840000c2    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (91 of 271)
=================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 43 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    auipc a1,0x1
    0x8400002a     0x4    ld a1,1602(a1) # ffffffff84001668 <ndks_boot+0x140>
    0x8400002e     0x8    li a5,1
    0x84000030     0xa    bgeu a5,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000034     0xe    li a4,1
    0x84000036    0x10    auipc a2,0x1
    0x8400003a    0x14    addi a2,a2,1266 # ffffffff84001528 <ndks_boot>
    0x8400003e    0x18    auipc a6,0x1
    0x84000042    0x1c    addi a6,a6,1242 # ffffffff84001518 <avail_p_regs>
    0x84000046    0x20    j ffffffff84000086 <merge_regions+0x60>
    0x84000048    0x22    slli a5,a4,0x4
    0x8400004c    0x26    add a5,a5,a2
    0x8400004e    0x28    ld a5,8(a5)
    0x84000050    0x2a    slli a0,a0,0x4
    0x84000052    0x2c    add a0,a0,a2
    0x84000054    0x2e    sd a5,8(a0)
    0x84000056    0x30    addi a5,a4,1
    0x8400005a    0x34    bgeu a5,a1,ffffffff84000078 <merge_regions+0x52>
    0x8400005e    0x38    slli a5,a4,0x4
    0x84000062    0x3c    add a5,a5,a2
    0x84000064    0x3e    slli a0,a1,0x4
    0x84000068    0x42    add a0,a0,a6
    0x8400006a    0x44    ld a3,16(a5)
    0x8400006c    0x46    sd a3,0(a5)
    0x8400006e    0x48    ld a3,24(a5)
    0x84000070    0x4a    sd a3,8(a5)
    0x84000072    0x4c    addi a5,a5,16
    0x84000074    0x4e    bne a5,a0,ffffffff8400006a <merge_regions+0x44>
    0x84000078    0x52    addi a1,a1,-1
    0x8400007a    0x54    sd a1,320(a2)
    0x8400007e    0x58    ld a1,320(a2)
    0x84000082    0x5c    bgeu a4,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000086    0x60    addi a0,a4,-1
    0x8400008a    0x64    slli a3,a0,0x4
    0x8400008e    0x68    add a3,a3,a2
    0x84000090    0x6a    slli a5,a4,0x4
    0x84000094    0x6e    add a5,a5,a2
    0x84000096    0x70    ld a3,8(a3)
    0x84000098    0x72    ld a5,0(a5)
    0x8400009a    0x74    beq a3,a5,ffffffff84000048 <merge_regions+0x22>
    0x8400009e    0x78    addi a4,a4,1
    0x840000a0    0x7a    j ffffffff8400007e <merge_regions+0x58>
    0x840000a2    0x7c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 65 nodes.

Section str_to_long (92 of 271)
===============================

Deriving specifications
-----------------------

Section `str_to_long` consists of 44 instructions.

RVC_FTTTFFFTF_____FT.
JAL.
BGE..
MUL.....
RVC_FTT_FFFFT_____TF.
RVC_FTT_T_________TF.
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `str_to_long`:

    0x840173ee     0x0    addi sp,sp,-48
    0x840173f0     0x2    sd ra,40(sp)          ; stack access
    0x840173f2     0x4    sd s0,32(sp)          ; stack access
    0x840173f4     0x6    sd s1,24(sp)          ; stack access
    0x840173f6     0x8    sd s2,16(sp)          ; stack access
    0x840173f8     0xa    sd s3,8(sp)           ; stack access
    0x840173fa     0xc    mv s1,a0
    0x840173fc     0xe    lbu a0,0(a0)
    0x84017400    0x12    li a5,48
    0x84017404    0x16    li s2,10
    0x84017406    0x18    beq a0,a5,ffffffff84017438 <str_to_long+0x4a>
    0x8401740a    0x1c    lbu a0,0(s1)
    0x8401740e    0x20    beqz a0,ffffffff8401744e <str_to_long+0x60>
    0x84017410    0x22    li s0,0
    0x84017412    0x24    li s3,-1
    0x84017414    0x26    slli s2,s2,0x20
    0x84017416    0x28    srli s2,s2,0x20
    0x8401741a    0x2c    jal ra,ffffffff840173ae <char_to_long>
    0x8401741e    0x30    beq a0,s3,ffffffff84017454 <str_to_long+0x66>
    0x84017422    0x34    bge a0,s2,ffffffff84017452 <str_to_long+0x64>
    0x84017426    0x38    mul s0,s2,s0
    0x8401742a    0x3c    add s0,s0,a0
    0x8401742c    0x3e    addi s1,s1,1
    0x8401742e    0x40    lbu a0,0(s1)
    0x84017432    0x44    bnez a0,ffffffff8401741a <str_to_long+0x2c>
    0x84017434    0x46    mv a0,s0
    0x84017436    0x48    j ffffffff84017454 <str_to_long+0x66>
    0x84017438    0x4a    lbu a5,1(s1)
    0x8401743c    0x4e    andi a5,a5,223
    0x84017440    0x52    li a4,88
    0x84017444    0x56    bne a5,a4,ffffffff84017410 <str_to_long+0x22>
    0x84017448    0x5a    addi s1,s1,2
    0x8401744a    0x5c    li s2,16
    0x8401744c    0x5e    j ffffffff8401740a <str_to_long+0x1c>
    0x8401744e    0x60    li a0,-1
    0x84017450    0x62    j ffffffff84017454 <str_to_long+0x66>
    0x84017452    0x64    li a0,-1
    0x84017454    0x66    ld ra,40(sp)          ; stack access
    0x84017456    0x68    ld s0,32(sp)          ; stack access
    0x84017458    0x6a    ld s1,24(sp)          ; stack access
    0x8401745a    0x6c    ld s2,16(sp)          ; stack access
    0x8401745c    0x6e    ld s3,8(sp)           ; stack access
    0x8401745e    0x70    addi sp,sp,48
    0x84017460    0x72    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 72 nodes.

Section memset (93 of 271)
==========================

Deriving specifications
-----------------------

Section `memset` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `memset`:

    0x8401733a     0x0    addi sp,sp,-16
    0x8401733c     0x2    sd ra,8(sp)           ; stack access
    0x8401733e     0x4    sd s0,0(sp)           ; stack access
    0x84017340     0x6    mv s0,a0
    0x84017342     0x8    mv a4,a1
    0x84017344     0xa    mv a1,a2
    0x84017346     0xc    or a5,a0,a2
    0x8401734a    0x10    andi a5,a5,7
    0x8401734c    0x12    or a5,a5,a4
    0x8401734e    0x14    bnez a5,ffffffff8401735e <memset+0x24>
    0x84017350    0x16    jal ra,ffffffff84015b22 <memzero>
    0x84017354    0x1a    mv a0,s0
    0x84017356    0x1c    ld ra,8(sp)           ; stack access
    0x84017358    0x1e    ld s0,0(sp)           ; stack access
    0x8401735a    0x20    addi sp,sp,16
    0x8401735c    0x22    ret
    0x8401735e    0x24    add a3,a0,a2
    0x84017362    0x28    mv a5,a0
    0x84017364    0x2a    beqz a2,ffffffff84017354 <memset+0x1a>
    0x84017366    0x2c    sb a4,0(a5)
    0x8401736a    0x30    addi a5,a5,1
    0x8401736c    0x32    bne a3,a5,ffffffff84017366 <memset+0x2c>
    0x84017370    0x36    j ffffffff84017354 <memset+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 36 nodes.

Section Arch_decodeInvocation (94 of 271)
=========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 7 instructions.

RVC_TFFFT____T____TF..

Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_decodeInvocation`:

    0x8401646a    0x0    addi sp,sp,-32
    0x8401646c    0x2    sd ra,24(sp)          ; stack access
    0x8401646e    0x4    mv a6,a7
    0x84016470    0x6    jal ra,ffffffff84015ba0 <decodeRISCVMMUInvocation>
    0x84016474    0xa    ld ra,24(sp)          ; stack access
    0x84016476    0xc    addi sp,sp,32
    0x84016478    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 11 nodes.

Section invokeTCB_Resume (95 of 271)
====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x840148b6    0x0    addi sp,sp,-16
    0x840148b8    0x2    sd ra,8(sp)           ; stack access
    0x840148ba    0x4    jal ra,ffffffff84013aa0 <restart>
    0x840148be    0x8    li a0,0
    0x840148c0    0xa    ld ra,8(sp)           ; stack access
    0x840148c2    0xc    addi sp,sp,16
    0x840148c4    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 11 nodes.

Section invokeTCB_Suspend (96 of 271)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x840148a6    0x0    addi sp,sp,-16
    0x840148a8    0x2    sd ra,8(sp)           ; stack access
    0x840148aa    0x4    jal ra,ffffffff84013000 <suspend>
    0x840148ae    0x8    li a0,0
    0x840148b0    0xa    ld ra,8(sp)           ; stack access
    0x840148b2    0xc    addi sp,sp,16
    0x840148b4    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section performInvocation_Endpoint (97 of 271)
==============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x840144c2     0x0    addi sp,sp,-16
    0x840144c4     0x2    sd ra,8(sp)           ; stack access
    0x840144c6     0x4    mv a6,a0
    0x840144c8     0x6    mv a7,a1
    0x840144ca     0x8    mv a0,a4
    0x840144cc     0xa    mv a1,a5
    0x840144ce     0xc    auipc a5,0x16
    0x840144d2    0x10    ld a5,874(a5) # ffffffff8402a838 <ksCurThread>
    0x840144d6    0x14    mv a4,a3
    0x840144d8    0x16    mv a3,a2
    0x840144da    0x18    mv a2,a7
    0x840144dc    0x1a    jal ra,ffffffff84014170 <sendIPC>
    0x840144e0    0x1e    li a0,0
    0x840144e2    0x20    ld ra,8(sp)           ; stack access
    0x840144e4    0x22    addi sp,sp,16
    0x840144e6    0x24    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 21 nodes.

Section performInvocation_Reply (98 of 271)
===========================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x84014152     0x0    addi sp,sp,-16
    0x84014154     0x2    sd ra,8(sp)           ; stack access
    0x84014156     0x4    mv a3,a2
    0x84014158     0x6    mv a2,a1
    0x8401415a     0x8    mv a1,a0
    0x8401415c     0xa    auipc a0,0x16
    0x84014160     0xe    ld a0,1756(a0) # ffffffff8402a838 <ksCurThread>
    0x84014164    0x12    jal ra,ffffffff840140a0 <doReplyTransfer>
    0x84014168    0x16    li a0,0
    0x8401416a    0x18    ld ra,8(sp)           ; stack access
    0x8401416c    0x1a    addi sp,sp,16
    0x8401416e    0x1c    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 17 nodes.

Section lookupExtraCaps (99 of 271)
===================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 56 instructions.

RVC_FFFFT_________FT.

Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84013db6     0x0    beqz a1,ffffffff84013e1c <lookupExtraCaps+0x66>
    0x84013db8     0x2    addi sp,sp,-80
    0x84013dba     0x4    sd ra,72(sp)          ; stack access
    0x84013dbc     0x6    sd s0,64(sp)          ; stack access
    0x84013dbe     0x8    sd s1,56(sp)          ; stack access
    0x84013dc0     0xa    sd s2,48(sp)          ; stack access
    0x84013dc2     0xc    sd s3,40(sp)          ; stack access
    0x84013dc4     0xe    sd s4,32(sp)          ; stack access
    0x84013dc6    0x10    sd s5,24(sp)          ; stack access
    0x84013dc8    0x12    mv s4,a0
    0x84013dca    0x14    srli a2,a2,0x7
    0x84013dcc    0x16    andi s3,a2,3
    0x84013dd0    0x1a    beqz s3,ffffffff84013e08 <lookupExtraCaps+0x52>
    0x84013dd4    0x1e    addi s0,a1,976
    0x84013dd8    0x22    auipc s2,0x5
    0x84013ddc    0x26    addi s2,s2,-1352 # ffffffff84018890 <current_extra_caps>
    0x84013de0    0x2a    li s1,0
    0x84013de2    0x2c    ld s5,0(s0)
    0x84013de6    0x30    mv a1,s5
    0x84013de8    0x32    mv a0,s4
    0x84013dea    0x34    jal ra,ffffffff84011322 <lookupSlot>
    0x84013dee    0x38    sd a1,8(sp)           ; stack access
    0x84013df0    0x3a    bnez a0,ffffffff84013e28 <lookupExtraCaps+0x72>
    0x84013df2    0x3c    ld a5,8(sp)           ; stack access
    0x84013df4    0x3e    sd a5,0(s2)
    0x84013df8    0x42    addi s1,s1,1
    0x84013dfa    0x44    addi s0,s0,8
    0x84013dfc    0x46    addi s2,s2,8
    0x84013dfe    0x48    bne s1,s3,ffffffff84013de2 <lookupExtraCaps+0x2c>
    0x84013e02    0x4c    li a5,2
    0x84013e04    0x4e    bltu a5,s3,ffffffff84013e3a <lookupExtraCaps+0x84>
    0x84013e08    0x52    slli s3,s3,0x3
    0x84013e0a    0x54    auipc a5,0x5
    0x84013e0e    0x58    addi a5,a5,502 # ffffffff84019000 <intStateIRQNode>
    0x84013e12    0x5c    add s3,s3,a5
    0x84013e14    0x5e    sd zero,-1904(s3)
    0x84013e18    0x62    li a0,0
    0x84013e1a    0x64    j ffffffff84013e3a <lookupExtraCaps+0x84>
    0x84013e1c    0x66    auipc a5,0x5
    0x84013e20    0x6a    sd zero,-1420(a5) # ffffffff84018890 <current_extra_caps>
    0x84013e24    0x6e    li a0,0
    0x84013e26    0x70    ret
    0x84013e28    0x72    auipc a5,0x4
    0x84013e2c    0x76    addi a5,a5,472 # ffffffff84018000 <riscvKSASIDTable>
    0x84013e30    0x7a    li a4,1
    0x84013e32    0x7c    sd a4,1680(a5)
    0x84013e36    0x80    sd s5,1688(a5)
    0x84013e3a    0x84    ld ra,72(sp)          ; stack access
    0x84013e3c    0x86    ld s0,64(sp)          ; stack access
    0x84013e3e    0x88    ld s1,56(sp)          ; stack access
    0x84013e40    0x8a    ld s2,48(sp)          ; stack access
    0x84013e42    0x8c    ld s3,40(sp)          ; stack access
    0x84013e44    0x8e    ld s4,32(sp)          ; stack access
    0x84013e46    0x90    ld s5,24(sp)          ; stack access
    0x84013e48    0x92    addi sp,sp,80
    0x84013e4a    0x94    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 91 nodes.

Section deleteCallerCap (100 of 271)
====================================

Deriving specifications
-----------------------

Section `deleteCallerCap` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteCallerCap`:

    0x84013da0     0x0    addi sp,sp,-16
    0x84013da2     0x2    sd ra,8(sp)           ; stack access
    0x84013da4     0x4    andi a0,a0,-1024
    0x84013da8     0x8    addi a0,a0,96
    0x84013dac     0xc    jal ra,ffffffff84013938 <cteDeleteOne>
    0x84013db0    0x10    ld ra,8(sp)           ; stack access
    0x84013db2    0x12    addi sp,sp,16
    0x84013db4    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteCallerCap` has 12 nodes.

Section performInvocation_Notification (101 of 271)
===================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x84013d36    0x0    addi sp,sp,-16
    0x84013d38    0x2    sd ra,8(sp)           ; stack access
    0x84013d3a    0x4    jal ra,ffffffff84013ae0 <sendSignal>
    0x84013d3e    0x8    li a0,0
    0x84013d40    0xa    ld ra,8(sp)           ; stack access
    0x84013d42    0xc    addi sp,sp,16
    0x84013d44    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section deletingIRQHandler (102 of 271)
=======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletingIRQHandler`:

    0x84013a86     0x0    addi sp,sp,-16
    0x84013a88     0x2    sd ra,8(sp)           ; stack access
    0x84013a8a     0x4    slli a0,a0,0x5
    0x84013a8c     0x6    auipc a5,0x5
    0x84013a90     0xa    addi a5,a5,1396 # ffffffff84019000 <intStateIRQNode>
    0x84013a94     0xe    add a0,a0,a5
    0x84013a96    0x10    jal ra,ffffffff84013938 <cteDeleteOne>
    0x84013a9a    0x14    ld ra,8(sp)           ; stack access
    0x84013a9c    0x16    addi sp,sp,16
    0x84013a9e    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 14 nodes.

Section invokeIRQHandler_ClearIRQHandler (103 of 271)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeIRQHandler_ClearIRQHandler`:

    0x840139a2     0x0    addi sp,sp,-16
    0x840139a4     0x2    sd ra,8(sp)           ; stack access
    0x840139a6     0x4    slli a0,a0,0x5
    0x840139a8     0x6    auipc a5,0x5
    0x840139ac     0xa    addi a5,a5,1624 # ffffffff84019000 <intStateIRQNode>
    0x840139b0     0xe    add a0,a0,a5
    0x840139b2    0x10    jal ra,ffffffff84013938 <cteDeleteOne>
    0x840139b6    0x14    ld ra,8(sp)           ; stack access
    0x840139b8    0x16    addi sp,sp,16
    0x840139ba    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 14 nodes.

Section invokeCNodeRevoke (104 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeRevoke`:

    0x8401344c    0x0    addi sp,sp,-16
    0x8401344e    0x2    sd ra,8(sp)           ; stack access
    0x84013450    0x4    jal ra,ffffffff840133c8 <cteRevoke>
    0x84013454    0x8    ld ra,8(sp)           ; stack access
    0x84013456    0xa    addi sp,sp,16
    0x84013458    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 10 nodes.

Section invokeCNodeDelete (105 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x840133b8    0x0    addi sp,sp,-16
    0x840133ba    0x2    sd ra,8(sp)           ; stack access
    0x840133bc    0x4    li a1,1
    0x840133be    0x6    jal ra,ffffffff840131f8 <cteDelete>
    0x840133c2    0xa    ld ra,8(sp)           ; stack access
    0x840133c4    0xc    addi sp,sp,16
    0x840133c6    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 11 nodes.

Section invokeCNodeCancelBadgedSends (106 of 271)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 18 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x84012e90     0x0    addi sp,sp,-32
    0x84012e92     0x2    sd ra,24(sp)          ; stack access
    0x84012e94     0x4    sd a0,0(sp)           ; stack access
    0x84012e96     0x6    beqz a1,ffffffff84012eae <invokeCNodeCancelBadgedSends+0x1e>
    0x84012e98     0x8    mv a5,a0
    0x84012e9a     0xa    slli a0,a0,0x19
    0x84012e9c     0xc    srli a0,a0,0x19
    0x84012e9e     0xe    srli a5,a5,0x26
    0x84012ea0    0x10    andi a5,a5,1
    0x84012ea2    0x12    beqz a5,ffffffff84012eaa <invokeCNodeCancelBadgedSends+0x1a>
    0x84012ea4    0x14    li a5,-1
    0x84012ea6    0x16    slli a5,a5,0x27
    0x84012ea8    0x18    or a0,a0,a5
    0x84012eaa    0x1a    jal ra,ffffffff84012db4 <cancelBadgedSends>
    0x84012eae    0x1e    li a0,0
    0x84012eb0    0x20    ld ra,24(sp)          ; stack access
    0x84012eb2    0x22    addi sp,sp,32
    0x84012eb4    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 27 nodes.

Section scheduleChooseNewThread (107 of 271)
============================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 34 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleChooseNewThread`:

    0x84012b42     0x0    addi sp,sp,-16
    0x84012b44     0x2    sd ra,8(sp)           ; stack access
    0x84012b46     0x4    auipc a5,0x18
    0x84012b4a     0x8    ld a5,-822(a5) # ffffffff8402a810 <ksDomainTime>
    0x84012b4e     0xc    beqz a5,ffffffff84012b5a <scheduleChooseNewThread+0x18>
    0x84012b50     0xe    jal ra,ffffffff84012ac6 <chooseThread>
    0x84012b54    0x12    ld ra,8(sp)           ; stack access
    0x84012b56    0x14    addi sp,sp,16
    0x84012b58    0x16    ret
    0x84012b5a    0x18    auipc a5,0x18
    0x84012b5e    0x1c    ld a5,-850(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012b62    0x20    addi a5,a5,1
    0x84012b64    0x22    li a4,2
    0x84012b66    0x24    bltu a4,a5,ffffffff84012ba6 <scheduleChooseNewThread+0x64>
    0x84012b6a    0x28    auipc a4,0x18
    0x84012b6e    0x2c    sd a5,-866(a4) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012b72    0x30    auipc a5,0x18
    0x84012b76    0x34    sd zero,-850(a5) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x84012b7a    0x38    auipc a5,0x18
    0x84012b7e    0x3c    ld a5,-882(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012b82    0x40    slli a4,a5,0x4
    0x84012b86    0x44    auipc a5,0x5
    0x84012b8a    0x48    addi a5,a5,-1686 # ffffffff840174f0 <msgRegisters>
    0x84012b8e    0x4c    add a5,a5,a4
    0x84012b90    0x4e    ld a4,192(a5)
    0x84012b92    0x50    auipc a3,0x18
    0x84012b96    0x54    sd a4,-890(a3) # ffffffff8402a818 <ksCurDomain>
    0x84012b9a    0x58    ld a5,200(a5)
    0x84012b9c    0x5a    auipc a4,0x18
    0x84012ba0    0x5e    sd a5,-908(a4) # ffffffff8402a810 <ksDomainTime>
    0x84012ba4    0x62    j ffffffff84012b50 <scheduleChooseNewThread+0xe>
    0x84012ba6    0x64    auipc a5,0x18
    0x84012baa    0x68    sd zero,-926(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012bae    0x6c    j ffffffff84012b72 <scheduleChooseNewThread+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 52 nodes.

Section receiveSignal (108 of 271)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 91 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `receiveSignal`:

    0x84012710     0x0    addi sp,sp,-48
    0x84012712     0x2    sd ra,40(sp)          ; stack access
    0x84012714     0x4    sd s0,32(sp)          ; stack access
    0x84012716     0x6    sd s1,24(sp)          ; stack access
    0x84012718     0x8    sd s2,16(sp)          ; stack access
    0x8401271a     0xa    mv s0,a0
    0x8401271c     0xc    sd a1,0(sp)           ; stack access
    0x8401271e     0xe    sd a2,8(sp)           ; stack access
    0x84012720    0x10    slli a5,a1,0x19
    0x84012724    0x14    srli a5,a5,0x19
    0x84012726    0x16    srli a1,a1,0x26
    0x84012728    0x18    andi a1,a1,1
    0x8401272a    0x1a    beqz a1,ffffffff84012732 <receiveSignal+0x22>
    0x8401272c    0x1c    li a4,-1
    0x8401272e    0x1e    slli a4,a4,0x27
    0x84012730    0x20    or a5,a5,a4
    0x84012732    0x22    mv s1,a5
    0x84012734    0x24    ld a4,0(a5)
    0x84012736    0x26    andi a2,a4,3
    0x8401273a    0x2a    andi a4,a4,2
    0x8401273c    0x2c    beqz a4,ffffffff8401275a <receiveSignal+0x4a>
    0x8401273e    0x2e    li a5,2
    0x84012740    0x30    bne a2,a5,ffffffff8401274e <receiveSignal+0x3e>
    0x84012744    0x34    ld a5,16(s1)
    0x84012746    0x36    sd a5,72(s0)
    0x84012748    0x38    ld a5,0(s1)
    0x8401274a    0x3a    andi a5,a5,-4
    0x8401274c    0x3c    sd a5,0(s1)
    0x8401274e    0x3e    ld ra,40(sp)          ; stack access
    0x84012750    0x40    ld s0,32(sp)          ; stack access
    0x84012752    0x42    ld s1,24(sp)          ; stack access
    0x84012754    0x44    ld s2,16(sp)          ; stack access
    0x84012756    0x46    addi sp,sp,48
    0x84012758    0x48    ret
    0x8401275a    0x4a    beqz a3,ffffffff840127ea <receiveSignal+0xda>
    0x8401275c    0x4c    ld a4,280(s0)
    0x84012760    0x50    li s2,-1
    0x84012762    0x52    slli a3,s2,0x27
    0x84012766    0x56    and a4,a4,a3
    0x84012768    0x58    lui a3,0xe0000
    0x8401276c    0x5c    srli a3,a3,0x19
    0x8401276e    0x5e    and a5,a5,a3
    0x84012770    0x60    or a5,a5,a4
    0x84012772    0x62    ori a5,a5,6
    0x84012776    0x66    sd a5,280(s0)
    0x8401277a    0x6a    mv a0,s0
    0x8401277c    0x6c    jal ra,ffffffff840124c2 <scheduleTCB>
    0x84012780    0x70    ld a4,8(s1)
    0x84012782    0x72    srli a5,s2,0x19
    0x84012786    0x76    and a5,a5,a4
    0x84012788    0x78    srli a4,a4,0x26
    0x8401278a    0x7a    andi a4,a4,1
    0x8401278c    0x7c    beqz a4,ffffffff840127da <receiveSignal+0xca>
    0x8401278e    0x7e    li a4,-1
    0x84012790    0x80    slli a4,a4,0x27
    0x84012792    0x82    or a5,a5,a4
    0x84012794    0x84    ld a3,0(s1)
    0x84012796    0x86    srli a4,a3,0x19
    0x8401279a    0x8a    bgez a3,ffffffff840127a6 <receiveSignal+0x96>
    0x8401279e    0x8e    li a3,-1
    0x840127a0    0x90    slli a3,a3,0x27
    0x840127a2    0x92    or a4,a4,a3
    0x840127a4    0x94    beqz a5,ffffffff840127e6 <receiveSignal+0xd6>
    0x840127a6    0x96    sd s0,408(a4)
    0x840127aa    0x9a    sd a4,416(s0)
    0x840127ae    0x9e    sd zero,408(s0)
    0x840127b2    0xa2    ld a4,0(s1)
    0x840127b4    0xa4    ld a3,8(s1)
    0x840127b6    0xa6    li a2,-1
    0x840127b8    0xa8    slli a1,a2,0x27
    0x840127bc    0xac    and a3,a3,a1
    0x840127be    0xae    srli a2,a2,0x19
    0x840127c0    0xb0    and a5,a5,a2
    0x840127c2    0xb2    or a5,a5,a3
    0x840127c4    0xb4    sd a5,8(s1)
    0x840127c6    0xb6    lui a5,0x2000
    0x840127ca    0xba    addi a5,a5,-4
    0x840127cc    0xbc    and a5,a5,a4
    0x840127ce    0xbe    slli s0,s0,0x19
    0x840127d0    0xc0    or s0,s0,a5
    0x840127d2    0xc2    ori s0,s0,1
    0x840127d6    0xc6    sd s0,0(s1)
    0x840127d8    0xc8    j ffffffff8401274e <receiveSignal+0x3e>
    0x840127da    0xca    ld a3,0(s1)
    0x840127dc    0xcc    srli a4,a3,0x19
    0x840127e0    0xd0    bltz a3,ffffffff8401279e <receiveSignal+0x8e>
    0x840127e4    0xd4    j ffffffff840127a4 <receiveSignal+0x94>
    0x840127e6    0xd6    mv a5,s0
    0x840127e8    0xd8    j ffffffff840127aa <receiveSignal+0x9a>
    0x840127ea    0xda    sd zero,72(s0)
    0x840127ee    0xde    j ffffffff8401274e <receiveSignal+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
91 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 137 nodes.

Section handleDoubleFault (109 of 271)
======================================

Deriving specifications
-----------------------

Section `handleDoubleFault` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleDoubleFault`:

    0x840125f0    0x0    addi sp,sp,-32
    0x840125f2    0x2    sd ra,24(sp)          ; stack access
    0x840125f4    0x4    li a1,0
    0x840125f6    0x6    jal ra,ffffffff840124f6 <setThreadState>
    0x840125fa    0xa    ld ra,24(sp)          ; stack access
    0x840125fc    0xc    addi sp,sp,32
    0x840125fe    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleDoubleFault` has 11 nodes.

Section setThreadState (110 of 271)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setThreadState`:

    0x840124f6     0x0    addi sp,sp,-16
    0x840124f8     0x2    sd ra,8(sp)           ; stack access
    0x840124fa     0x4    ld a5,280(a0)
    0x840124fe     0x8    andi a5,a5,-16
    0x84012500     0xa    andi a1,a1,15
    0x84012502     0xc    or a5,a5,a1
    0x84012504     0xe    sd a5,280(a0)
    0x84012508    0x12    jal ra,ffffffff840124c2 <scheduleTCB>
    0x8401250c    0x16    ld ra,8(sp)           ; stack access
    0x8401250e    0x18    addi sp,sp,16
    0x84012510    0x1a    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 17 nodes.

Section scheduleTCB (111 of 271)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 18 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleTCB`:

    0x840124c2     0x0    auipc a5,0x18
    0x840124c6     0x4    ld a5,886(a5) # ffffffff8402a838 <ksCurThread>
    0x840124ca     0x8    beq a5,a0,ffffffff840124d0 <scheduleTCB+0xe>
    0x840124ce     0xc    ret
    0x840124d0     0xe    auipc a5,0x18
    0x840124d4    0x12    ld a5,856(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x840124d8    0x16    bnez a5,ffffffff840124ce <scheduleTCB+0xc>
    0x840124da    0x18    ld a5,280(a0)
    0x840124de    0x1c    andi a5,a5,15
    0x840124e0    0x1e    addi a5,a5,-1
    0x840124e2    0x20    li a4,1
    0x840124e4    0x22    bgeu a4,a5,ffffffff840124ce <scheduleTCB+0xc>
    0x840124e8    0x26    addi sp,sp,-16
    0x840124ea    0x28    sd ra,8(sp)           ; stack access
    0x840124ec    0x2a    jal ra,ffffffff84012490 <rescheduleRequired>
    0x840124f0    0x2e    ld ra,8(sp)           ; stack access
    0x840124f2    0x30    addi sp,sp,16
    0x840124f4    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 32 nodes.

Section rescheduleRequired (112 of 271)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `rescheduleRequired`:

    0x84012490     0x0    auipc a0,0x18
    0x84012494     0x4    ld a0,920(a0) # ffffffff8402a828 <ksSchedulerAction>
    0x84012498     0x8    li a5,1
    0x8401249a     0xa    bltu a5,a0,ffffffff840124aa <rescheduleRequired+0x1a>
    0x8401249e     0xe    li a5,1
    0x840124a0    0x10    auipc a4,0x18
    0x840124a4    0x14    sd a5,904(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x840124a8    0x18    ret
    0x840124aa    0x1a    addi sp,sp,-16
    0x840124ac    0x1c    sd ra,8(sp)           ; stack access
    0x840124ae    0x1e    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x840124b2    0x22    li a5,1
    0x840124b4    0x24    auipc a4,0x18
    0x840124b8    0x28    sd a5,884(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x840124bc    0x2c    ld ra,8(sp)           ; stack access
    0x840124be    0x2e    addi sp,sp,16
    0x840124c0    0x30    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 27 nodes.

Section slotCapLongRunningDelete (113 of 271)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 24 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x840120d0     0x0    addi sp,sp,-16
    0x840120d2     0x2    sd ra,8(sp)           ; stack access
    0x840120d4     0x4    sd s0,0(sp)           ; stack access
    0x840120d6     0x6    ld s0,0(a0)
    0x840120d8     0x8    srli s0,s0,0x3b
    0x840120da     0xa    beqz s0,ffffffff840120f8 <slotCapLongRunningDelete+0x28>
    0x840120dc     0xc    jal ra,ffffffff8401207a <isFinalCapability>
    0x840120e0    0x10    beqz a0,ffffffff84012102 <slotCapLongRunningDelete+0x32>
    0x840120e2    0x12    addi s0,s0,-10
    0x840120e4    0x14    li a5,8
    0x840120e6    0x16    bltu a5,s0,ffffffff84012106 <slotCapLongRunningDelete+0x36>
    0x840120ea    0x1a    li a5,1
    0x840120ec    0x1c    sll s0,a5,s0
    0x840120f0    0x20    andi s0,s0,261
    0x840120f4    0x24    snez s0,s0
    0x840120f8    0x28    mv a0,s0
    0x840120fa    0x2a    ld ra,8(sp)           ; stack access
    0x840120fc    0x2c    ld s0,0(sp)           ; stack access
    0x840120fe    0x2e    addi sp,sp,16
    0x84012100    0x30    ret
    0x84012102    0x32    mv s0,a0
    0x84012104    0x34    j ffffffff840120f8 <slotCapLongRunningDelete+0x28>
    0x84012106    0x36    li s0,0
    0x84012108    0x38    j ffffffff840120f8 <slotCapLongRunningDelete+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 37 nodes.

Section isFinalCapability (114 of 271)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 39 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `isFinalCapability`:

    0x8401207a     0x0    addi sp,sp,-32
    0x8401207c     0x2    sd ra,24(sp)          ; stack access
    0x8401207e     0x4    sd s0,16(sp)          ; stack access
    0x84012080     0x6    sd s1,8(sp)           ; stack access
    0x84012082     0x8    mv s0,a0
    0x84012084     0xa    ld a5,16(a0)
    0x84012086     0xc    ld s1,24(a0)
    0x84012088     0xe    beqz a5,ffffffff8401209c <isFinalCapability+0x22>
    0x8401208a    0x10    ld a2,0(a0)
    0x8401208c    0x12    ld a3,8(a0)
    0x8401208e    0x14    ld a0,0(a5)
    0x84012090    0x16    ld a1,8(a5)
    0x84012092    0x18    jal ra,ffffffff84012022 <sameObjectAs>
    0x84012096    0x1c    mv a5,a0
    0x84012098    0x1e    li a0,0
    0x8401209a    0x20    bnez a5,ffffffff840120c6 <isFinalCapability+0x4c>
    0x8401209c    0x22    lui a5,0xf8000
    0x840120a0    0x26    srli a5,a5,0x19
    0x840120a2    0x28    and a5,a5,s1
    0x840120a4    0x2a    srli s1,s1,0x26
    0x840120a6    0x2c    andi s1,s1,1
    0x840120a8    0x2e    beqz s1,ffffffff840120c2 <isFinalCapability+0x48>
    0x840120aa    0x30    li a4,-1
    0x840120ac    0x32    slli a4,a4,0x27
    0x840120ae    0x34    or a5,a5,a4
    0x840120b0    0x36    ld a2,0(a5)
    0x840120b2    0x38    ld a3,8(a5)
    0x840120b4    0x3a    ld a0,0(s0)
    0x840120b6    0x3c    ld a1,8(s0)
    0x840120b8    0x3e    jal ra,ffffffff84012022 <sameObjectAs>
    0x840120bc    0x42    seqz a0,a0
    0x840120c0    0x46    j ffffffff840120c6 <isFinalCapability+0x4c>
    0x840120c2    0x48    li a0,1
    0x840120c4    0x4a    bnez a5,ffffffff840120b0 <isFinalCapability+0x36>
    0x840120c6    0x4c    ld ra,24(sp)          ; stack access
    0x840120c8    0x4e    ld s0,16(sp)          ; stack access
    0x840120ca    0x50    ld s1,8(sp)           ; stack access
    0x840120cc    0x52    addi sp,sp,32
    0x840120ce    0x54    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 66 nodes.

Section ensureNoChildren (115 of 271)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 27 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `ensureNoChildren`:

    0x84011f6a     0x0    ld a5,24(a0)
    0x84011f6c     0x2    lui a1,0xf8000
    0x84011f70     0x6    srli a1,a1,0x19
    0x84011f72     0x8    and a1,a1,a5
    0x84011f74     0xa    srli a5,a5,0x26
    0x84011f76     0xc    andi a5,a5,1
    0x84011f78     0xe    beqz a5,ffffffff84011f94 <ensureNoChildren+0x2a>
    0x84011f7a    0x10    li a5,-1
    0x84011f7c    0x12    slli a5,a5,0x27
    0x84011f7e    0x14    or a1,a1,a5
    0x84011f80    0x16    addi sp,sp,-16
    0x84011f82    0x18    sd ra,8(sp)           ; stack access
    0x84011f84    0x1a    jal ra,ffffffff84011ef2 <isMDBParentOf>
    0x84011f88    0x1e    mv a1,a0
    0x84011f8a    0x20    bnez a0,ffffffff84011f9a <ensureNoChildren+0x30>
    0x84011f8c    0x22    mv a0,a1
    0x84011f8e    0x24    ld ra,8(sp)           ; stack access
    0x84011f90    0x26    addi sp,sp,16
    0x84011f92    0x28    ret
    0x84011f94    0x2a    bnez a1,ffffffff84011f80 <ensureNoChildren+0x16>
    0x84011f96    0x2c    mv a0,a1
    0x84011f98    0x2e    ret
    0x84011f9a    0x30    li a5,9
    0x84011f9c    0x32    auipc a4,0x6
    0x84011fa0    0x36    sd a5,1844(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84011fa4    0x3a    li a1,3
    0x84011fa6    0x3c    j ffffffff84011f8c <ensureNoChildren+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 40 nodes.

Section isMDBParentOf (116 of 271)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isMDBParentOf`:

    0x84011ef2     0x0    addi sp,sp,-32
    0x84011ef4     0x2    sd ra,24(sp)          ; stack access
    0x84011ef6     0x4    sd s0,16(sp)          ; stack access
    0x84011ef8     0x6    sd s1,8(sp)           ; stack access
    0x84011efa     0x8    sd s2,0(sp)           ; stack access
    0x84011efc     0xa    ld s0,24(a0)
    0x84011efe     0xc    srli s0,s0,0x1
    0x84011f00     0xe    andi s0,s0,1
    0x84011f02    0x10    beqz s0,ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f04    0x12    mv s1,a0
    0x84011f06    0x14    mv s2,a1
    0x84011f08    0x16    ld a2,0(a1)
    0x84011f0a    0x18    ld a3,8(a1)
    0x84011f0c    0x1a    ld a0,0(a0)
    0x84011f0e    0x1c    ld a1,8(s1)
    0x84011f10    0x1e    jal ra,ffffffff84011b9a <sameRegionAs>
    0x84011f14    0x22    beqz a0,ffffffff84011f5a <isMDBParentOf+0x68>
    0x84011f16    0x24    ld a5,0(s1)
    0x84011f18    0x26    srli a5,a5,0x3b
    0x84011f1a    0x28    li a4,4
    0x84011f1c    0x2a    beq a5,a4,ffffffff84011f40 <isMDBParentOf+0x4e>
    0x84011f20    0x2e    li a4,6
    0x84011f22    0x30    bne a5,a4,ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f26    0x34    ld a5,8(s1)
    0x84011f28    0x36    beqz a5,ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f2a    0x38    ld a4,8(s2)
    0x84011f2e    0x3c    li s0,0
    0x84011f30    0x3e    bne a5,a4,ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f34    0x42    ld s0,24(s2)
    0x84011f38    0x46    xori s0,s0,1
    0x84011f3c    0x4a    andi s0,s0,1
    0x84011f3e    0x4c    j ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f40    0x4e    ld a5,8(s1)
    0x84011f42    0x50    beqz a5,ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f44    0x52    ld a4,8(s2)
    0x84011f48    0x56    li s0,0
    0x84011f4a    0x58    bne a4,a5,ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f4e    0x5c    ld s0,24(s2)
    0x84011f52    0x60    xori s0,s0,1
    0x84011f56    0x64    andi s0,s0,1
    0x84011f58    0x66    j ffffffff84011f5c <isMDBParentOf+0x6a>
    0x84011f5a    0x68    mv s0,a0
    0x84011f5c    0x6a    mv a0,s0
    0x84011f5e    0x6c    ld ra,24(sp)          ; stack access
    0x84011f60    0x6e    ld s0,16(sp)          ; stack access
    0x84011f62    0x70    ld s1,8(sp)           ; stack access
    0x84011f64    0x72    ld s2,0(sp)           ; stack access
    0x84011f66    0x74    addi sp,sp,32
    0x84011f68    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 87 nodes.

Section completeSignal (117 of 271)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 14 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `completeSignal`:

    0x84011ab0     0x0    beqz a1,ffffffff84011ac8 <completeSignal+0x18>
    0x84011ab2     0x2    ld a5,0(a0)
    0x84011ab4     0x4    andi a5,a5,3
    0x84011ab6     0x6    li a4,2
    0x84011ab8     0x8    bne a5,a4,ffffffff84011ac8 <completeSignal+0x18>
    0x84011abc     0xc    ld a5,16(a0)
    0x84011abe     0xe    sd a5,72(a1)
    0x84011ac0    0x10    ld a5,0(a0)
    0x84011ac2    0x12    andi a5,a5,-4
    0x84011ac4    0x14    sd a5,0(a0)
    0x84011ac6    0x16    ret
    0x84011ac8    0x18    addi sp,sp,-16
    0x84011aca    0x1a    sd ra,8(sp)           ; stack access
    0x84011acc    0x1c    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 26 nodes.

Section emptySlot (118 of 271)
==============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 55 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `emptySlot`:

    0x84011a30     0x0    addi sp,sp,-32
    0x84011a32     0x2    sd ra,24(sp)          ; stack access
    0x84011a34     0x4    sd a1,0(sp)           ; stack access
    0x84011a36     0x6    sd a2,8(sp)           ; stack access
    0x84011a38     0x8    ld a5,0(a0)
    0x84011a3a     0xa    srli a5,a5,0x3b
    0x84011a3c     0xc    beqz a5,ffffffff84011a82 <emptySlot+0x52>
    0x84011a3e     0xe    ld a2,16(a0)
    0x84011a40    0x10    ld a4,24(a0)
    0x84011a42    0x12    lui a5,0xf8000
    0x84011a46    0x16    srli a5,a5,0x19
    0x84011a48    0x18    and a5,a5,a4
    0x84011a4a    0x1a    srli a3,a4,0x26
    0x84011a4e    0x1e    andi a3,a3,1
    0x84011a50    0x20    beqz a3,ffffffff84011a88 <emptySlot+0x58>
    0x84011a52    0x22    li a3,-1
    0x84011a54    0x24    slli a3,a3,0x27
    0x84011a56    0x26    or a5,a5,a3
    0x84011a58    0x28    bnez a2,ffffffff84011a8a <emptySlot+0x5a>
    0x84011a5a    0x2a    sd a2,16(a5)
    0x84011a5c    0x2c    ld a3,24(a5)
    0x84011a5e    0x2e    or a4,a4,a3
    0x84011a60    0x30    andi a4,a4,1
    0x84011a62    0x32    andi a3,a3,-2
    0x84011a64    0x34    or a4,a4,a3
    0x84011a66    0x36    sd a4,24(a5)
    0x84011a68    0x38    sd zero,0(a0)
    0x84011a6c    0x3c    sd zero,8(a0)
    0x84011a70    0x40    sd zero,16(a0)
    0x84011a74    0x44    sd zero,24(a0)
    0x84011a78    0x48    ld a5,0(sp)           ; stack access
    0x84011a7a    0x4a    srli a5,a5,0x3b
    0x84011a7c    0x4c    li a4,16
    0x84011a7e    0x4e    beq a5,a4,ffffffff84011aa4 <emptySlot+0x74>
    0x84011a82    0x52    ld ra,24(sp)          ; stack access
    0x84011a84    0x54    addi sp,sp,32
    0x84011a86    0x56    ret
    0x84011a88    0x58    beqz a2,ffffffff84011aa0 <emptySlot+0x70>
    0x84011a8a    0x5a    ld a3,24(a2)
    0x84011a8c    0x5c    li a1,-1
    0x84011a8e    0x5e    slli a1,a1,0x27
    0x84011a90    0x60    addi a1,a1,3
    0x84011a92    0x62    and a3,a3,a1
    0x84011a94    0x64    lui a1,0xf8000
    0x84011a98    0x68    srli a1,a1,0x19
    0x84011a9a    0x6a    and a1,a1,a5
    0x84011a9c    0x6c    or a3,a3,a1
    0x84011a9e    0x6e    sd a3,24(a2)
    0x84011aa0    0x70    beqz a5,ffffffff84011a68 <emptySlot+0x38>
    0x84011aa2    0x72    j ffffffff84011a5a <emptySlot+0x2a>
    0x84011aa4    0x74    ld a0,8(sp)           ; stack access
    0x84011aa6    0x76    slli a0,a0,0x34
    0x84011aa8    0x78    srli a0,a0,0x34
    0x84011aaa    0x7a    jal ra,ffffffff84011a1e <deletedIRQHandler>
    0x84011aae    0x7e    j ffffffff84011a82 <emptySlot+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 87 nodes.

Section deletedIRQHandler (119 of 271)
======================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletedIRQHandler`:

    0x84011a1e     0x0    addi sp,sp,-16
    0x84011a20     0x2    sd ra,8(sp)           ; stack access
    0x84011a22     0x4    mv a1,a0
    0x84011a24     0x6    li a0,0
    0x84011a26     0x8    jal ra,ffffffff8401197e <setIRQState>
    0x84011a2a     0xc    ld ra,8(sp)           ; stack access
    0x84011a2c     0xe    addi sp,sp,16
    0x84011a2e    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 12 nodes.

Section capSwapForDelete (120 of 271)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 14 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `capSwapForDelete`:

    0x84011832     0x0    beq a0,a1,ffffffff84011850 <capSwapForDelete+0x1e>
    0x84011836     0x4    addi sp,sp,-48
    0x84011838     0x6    sd ra,40(sp)          ; stack access
    0x8401183a     0x8    mv a2,a0
    0x8401183c     0xa    mv a5,a1
    0x8401183e     0xc    ld a3,0(a1)
    0x84011840     0xe    ld a4,8(a1)
    0x84011842    0x10    ld a0,0(a0)
    0x84011844    0x12    ld a1,8(a2)
    0x84011846    0x14    jal ra,ffffffff8401175e <cteSwap>
    0x8401184a    0x18    ld ra,40(sp)          ; stack access
    0x8401184c    0x1a    addi sp,sp,48
    0x8401184e    0x1c    ret
    0x84011850    0x1e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 25 nodes.

Section invokeCNodeMove (121 of 271)
====================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x8401170a    0x0    addi sp,sp,-32
    0x8401170c    0x2    sd ra,24(sp)          ; stack access
    0x8401170e    0x4    jal ra,ffffffff840116b2 <cteMove>
    0x84011712    0x8    li a0,0
    0x84011714    0xa    ld ra,24(sp)          ; stack access
    0x84011716    0xc    addi sp,sp,32
    0x84011718    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 11 nodes.

Section invokeCNodeInsert (122 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x840116a2    0x0    addi sp,sp,-32
    0x840116a4    0x2    sd ra,24(sp)          ; stack access
    0x840116a6    0x4    jal ra,ffffffff84011576 <cteInsert>
    0x840116aa    0x8    li a0,0
    0x840116ac    0xa    ld ra,24(sp)          ; stack access
    0x840116ae    0xc    addi sp,sp,32
    0x840116b0    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section switchToIdleThread (123 of 271)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `switchToIdleThread`:

    0x8401151c     0x0    addi sp,sp,-16
    0x8401151e     0x2    sd ra,8(sp)           ; stack access
    0x84011520     0x4    jal ra,ffffffff84010b6e <Arch_switchToIdleThread>
    0x84011524     0x8    auipc a5,0x19
    0x84011528     0xc    ld a5,780(a5) # ffffffff8402a830 <ksIdleThread>
    0x8401152c    0x10    auipc a4,0x19
    0x84011530    0x14    sd a5,780(a4) # ffffffff8402a838 <ksCurThread>
    0x84011534    0x18    ld ra,8(sp)           ; stack access
    0x84011536    0x1a    addi sp,sp,16
    0x84011538    0x1c    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 16 nodes.

Section doFaultTransfer (124 of 271)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x840114da     0x0    addi sp,sp,-32
    0x840114dc     0x2    sd ra,24(sp)          ; stack access
    0x840114de     0x4    sd s0,16(sp)          ; stack access
    0x840114e0     0x6    sd s1,8(sp)           ; stack access
    0x840114e2     0x8    sd s2,0(sp)           ; stack access
    0x840114e4     0xa    mv s2,a0
    0x840114e6     0xc    mv s1,a1
    0x840114e8     0xe    mv s0,a2
    0x840114ea    0x10    mv a2,a3
    0x840114ec    0x12    mv a1,s0
    0x840114ee    0x14    mv a0,s1
    0x840114f0    0x16    jal ra,ffffffff840104e6 <setMRs_fault>
    0x840114f4    0x1a    ld a5,312(s1)
    0x840114f8    0x1e    slli a5,a5,0xc
    0x840114fa    0x20    lui a4,0xf
    0x840114fc    0x22    and a5,a5,a4
    0x840114fe    0x24    andi a0,a0,127
    0x84011502    0x28    or a5,a5,a0
    0x84011504    0x2a    sd a5,80(s0)
    0x84011506    0x2c    sd s2,72(s0)
    0x8401150a    0x30    ld ra,24(sp)          ; stack access
    0x8401150c    0x32    ld s0,16(sp)          ; stack access
    0x8401150e    0x34    ld s1,8(sp)           ; stack access
    0x84011510    0x36    ld s2,0(sp)           ; stack access
    0x84011512    0x38    addi sp,sp,32
    0x84011514    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section lookupPivotSlot (125 of 271)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupPivotSlot`:

    0x840114c0     0x0    addi sp,sp,-48
    0x840114c2     0x2    sd ra,40(sp)          ; stack access
    0x840114c4     0x4    mv a5,a1
    0x840114c6     0x6    mv a4,a3
    0x840114c8     0x8    mv a3,a2
    0x840114ca     0xa    mv a1,a0
    0x840114cc     0xc    mv a2,a5
    0x840114ce     0xe    li a0,1
    0x840114d0    0x10    jal ra,ffffffff840113bc <lookupSlotForCNodeOp>
    0x840114d4    0x14    ld ra,40(sp)          ; stack access
    0x840114d6    0x16    addi sp,sp,48
    0x840114d8    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 16 nodes.

Section lookupTargetSlot (126 of 271)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupTargetSlot`:

    0x840114a6     0x0    addi sp,sp,-48
    0x840114a8     0x2    sd ra,40(sp)          ; stack access
    0x840114aa     0x4    mv a5,a1
    0x840114ac     0x6    mv a4,a3
    0x840114ae     0x8    mv a3,a2
    0x840114b0     0xa    mv a1,a0
    0x840114b2     0xc    mv a2,a5
    0x840114b4     0xe    li a0,0
    0x840114b6    0x10    jal ra,ffffffff840113bc <lookupSlotForCNodeOp>
    0x840114ba    0x14    ld ra,40(sp)          ; stack access
    0x840114bc    0x16    addi sp,sp,48
    0x840114be    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 16 nodes.

Section lookupSourceSlot (127 of 271)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupSourceSlot`:

    0x8401148c     0x0    addi sp,sp,-48
    0x8401148e     0x2    sd ra,40(sp)          ; stack access
    0x84011490     0x4    mv a5,a1
    0x84011492     0x6    mv a4,a3
    0x84011494     0x8    mv a3,a2
    0x84011496     0xa    mv a1,a0
    0x84011498     0xc    mv a2,a5
    0x8401149a     0xe    li a0,1
    0x8401149c    0x10    jal ra,ffffffff840113bc <lookupSlotForCNodeOp>
    0x840114a0    0x14    ld ra,40(sp)          ; stack access
    0x840114a2    0x16    addi sp,sp,48
    0x840114a4    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 16 nodes.

Section lookupSlotForCNodeOp (128 of 271)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 75 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

23 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x840113bc     0x0    addi sp,sp,-80
    0x840113be     0x2    sd ra,72(sp)          ; stack access
    0x840113c0     0x4    sd s0,64(sp)          ; stack access
    0x840113c2     0x6    mv s0,a0
    0x840113c4     0x8    sd a1,0(sp)           ; stack access
    0x840113c6     0xa    sd a2,8(sp)           ; stack access
    0x840113c8     0xc    srli a1,a1,0x3b
    0x840113ca     0xe    li a5,10
    0x840113cc    0x10    bne a1,a5,ffffffff84011400 <lookupSlotForCNodeOp+0x44>
    0x840113d0    0x14    addi a5,a4,-1
    0x840113d4    0x18    li a2,63
    0x840113d8    0x1c    bltu a2,a5,ffffffff84011422 <lookupSlotForCNodeOp+0x66>
    0x840113dc    0x20    ld a1,0(sp)           ; stack access
    0x840113de    0x22    ld a2,8(sp)           ; stack access
    0x840113e0    0x24    addi a0,sp,24
    0x840113e2    0x26    jal ra,ffffffff840111f4 <resolveAddressBits>
    0x840113e6    0x2a    ld a5,40(sp)          ; stack access
    0x840113e8    0x2c    ld a4,24(sp)          ; stack access
    0x840113ea    0x2e    bnez a4,ffffffff84011446 <lookupSlotForCNodeOp+0x8a>
    0x840113ec    0x30    bnez a5,ffffffff84011460 <lookupSlotForCNodeOp+0xa4>
    0x840113ee    0x32    sd zero,48(sp)        ; stack access
    0x840113f0    0x34    ld a5,32(sp)          ; stack access
    0x840113f2    0x36    sd a5,56(sp)          ; stack access
    0x840113f4    0x38    ld a0,48(sp)          ; stack access
    0x840113f6    0x3a    ld a1,56(sp)          ; stack access
    0x840113f8    0x3c    ld ra,72(sp)          ; stack access
    0x840113fa    0x3e    ld s0,64(sp)          ; stack access
    0x840113fc    0x40    addi sp,sp,80
    0x840113fe    0x42    ret
    0x84011400    0x44    auipc a5,0x7
    0x84011404    0x48    addi a5,a5,-1024 # ffffffff84018000 <riscvKSASIDTable>
    0x84011408    0x4c    li a4,6
    0x8401140a    0x4e    sd a4,1744(a5)
    0x8401140e    0x52    sd a0,1736(a5)
    0x84011412    0x56    sd zero,1024(a5)
    0x84011416    0x5a    sd zero,1032(a5)
    0x8401141a    0x5e    li a5,3
    0x8401141c    0x60    sd a5,48(sp)          ; stack access
    0x8401141e    0x62    sd zero,56(sp)        ; stack access
    0x84011420    0x64    j ffffffff840113f4 <lookupSlotForCNodeOp+0x38>
    0x84011422    0x66    auipc a5,0x7
    0x84011426    0x6a    addi a5,a5,-1058 # ffffffff84018000 <riscvKSASIDTable>
    0x8401142a    0x6e    li a4,4
    0x8401142c    0x70    sd a4,1744(a5)
    0x84011430    0x74    li a4,1
    0x84011432    0x76    sd a4,1712(a5)
    0x84011436    0x7a    li a4,64
    0x8401143a    0x7e    sd a4,1720(a5)
    0x8401143e    0x82    li a5,3
    0x84011440    0x84    sd a5,48(sp)          ; stack access
    0x84011442    0x86    sd zero,56(sp)        ; stack access
    0x84011444    0x88    j ffffffff840113f4 <lookupSlotForCNodeOp+0x38>
    0x84011446    0x8a    auipc a5,0x7
    0x8401144a    0x8e    addi a5,a5,-1094 # ffffffff84018000 <riscvKSASIDTable>
    0x8401144e    0x92    li a4,6
    0x84011450    0x94    sd a4,1744(a5)
    0x84011454    0x98    sd s0,1736(a5)
    0x84011458    0x9c    li a5,3
    0x8401145a    0x9e    sd a5,48(sp)          ; stack access
    0x8401145c    0xa0    sd zero,56(sp)        ; stack access
    0x8401145e    0xa2    j ffffffff840113f4 <lookupSlotForCNodeOp+0x38>
    0x84011460    0xa4    auipc a4,0x7
    0x84011464    0xa8    addi a4,a4,-1120 # ffffffff84018000 <riscvKSASIDTable>
    0x84011468    0xac    li a3,6
    0x8401146a    0xae    sd a3,1744(a4)
    0x8401146e    0xb2    sd s0,1736(a4)
    0x84011472    0xb6    slli a5,a5,0x2
    0x84011474    0xb8    andi a5,a5,508
    0x84011478    0xbc    ori a5,a5,2
    0x8401147c    0xc0    sd a5,1024(a4)
    0x84011480    0xc4    sd zero,1032(a4)
    0x84011484    0xc8    li a5,3
    0x84011486    0xca    sd a5,48(sp)          ; stack access
    0x84011488    0xcc    sd zero,56(sp)        ; stack access
    0x8401148a    0xce    j ffffffff840113f4 <lookupSlotForCNodeOp+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 121 nodes.

Section lookupCapAndSlot (129 of 271)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 26 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x8401137e     0x0    addi sp,sp,-32
    0x84011380     0x2    sd ra,24(sp)          ; stack access
    0x84011382     0x4    sd s0,16(sp)          ; stack access
    0x84011384     0x6    mv s0,a0
    0x84011386     0x8    mv a0,a1
    0x84011388     0xa    mv a1,a2
    0x8401138a     0xc    jal ra,ffffffff84011322 <lookupSlot>
    0x8401138e    0x10    sd a0,0(sp)           ; stack access
    0x84011390    0x12    sd a1,8(sp)           ; stack access
    0x84011392    0x14    bnez a0,ffffffff840113ac <lookupCapAndSlot+0x2e>
    0x84011394    0x16    ld a4,0(a1)
    0x84011396    0x18    ld a5,8(a1)
    0x84011398    0x1a    sd zero,0(s0)         ; stack access
    0x8401139c    0x1e    sd a4,8(s0)           ; stack access
    0x8401139e    0x20    sd a5,16(s0)          ; stack access
    0x840113a0    0x22    sd a1,24(s0)          ; stack access
    0x840113a2    0x24    mv a0,s0
    0x840113a4    0x26    ld ra,24(sp)          ; stack access
    0x840113a6    0x28    ld s0,16(sp)          ; stack access
    0x840113a8    0x2a    addi sp,sp,32
    0x840113aa    0x2c    ret
    0x840113ac    0x2e    sd a0,0(s0)           ; stack access
    0x840113ae    0x30    sd zero,8(s0)         ; stack access
    0x840113b2    0x34    sd zero,16(s0)        ; stack access
    0x840113b6    0x38    sd zero,24(s0)        ; stack access
    0x840113ba    0x3c    j ffffffff840113a2 <lookupCapAndSlot+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 46 nodes.

Section lookupCap (130 of 271)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 25 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
13 stack accesses found. Annotated code for `lookupCap`:

    0x84011344     0x0    addi sp,sp,-32
    0x84011346     0x2    sd ra,24(sp)          ; stack access
    0x84011348     0x4    sd s0,16(sp)          ; stack access
    0x8401134a     0x6    mv s0,a0
    0x8401134c     0x8    mv a0,a1
    0x8401134e     0xa    mv a1,a2
    0x84011350     0xc    jal ra,ffffffff84011322 <lookupSlot>
    0x84011354    0x10    sd a0,0(sp)           ; stack access
    0x84011356    0x12    sd a1,8(sp)           ; stack access
    0x84011358    0x14    bnez a0,ffffffff84011372 <lookupCap+0x2e>
    0x8401135a    0x16    ld a5,8(sp)           ; stack access
    0x8401135c    0x18    ld a4,0(a5)
    0x8401135e    0x1a    ld a5,8(a5)
    0x84011360    0x1c    sd zero,0(s0)         ; stack access
    0x84011364    0x20    sd a4,8(s0)           ; stack access
    0x84011366    0x22    sd a5,16(s0)          ; stack access
    0x84011368    0x24    mv a0,s0
    0x8401136a    0x26    ld ra,24(sp)          ; stack access
    0x8401136c    0x28    ld s0,16(sp)          ; stack access
    0x8401136e    0x2a    addi sp,sp,32
    0x84011370    0x2c    ret
    0x84011372    0x2e    sd a0,0(s0)           ; stack access
    0x84011374    0x30    sd zero,8(s0)         ; stack access
    0x84011378    0x34    sd zero,16(s0)        ; stack access
    0x8401137c    0x38    j ffffffff84011368 <lookupCap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 44 nodes.

Section lookupSlot (131 of 271)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.

RVC_FFFFFFFFFFT___FF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `lookupSlot`:

    0x84011322     0x0    addi sp,sp,-80
    0x84011324     0x2    sd ra,72(sp)          ; stack access
    0x84011326     0x4    mv a3,a1
    0x84011328     0x6    andi a0,a0,-1024
    0x8401132c     0xa    li a4,64
    0x84011330     0xe    ld a1,0(a0)
    0x84011332    0x10    ld a2,8(a0)
    0x84011334    0x12    addi a0,sp,8
    0x84011336    0x14    jal ra,ffffffff840111f4 <resolveAddressBits>
    0x8401133a    0x18    ld a0,8(sp)           ; stack access
    0x8401133c    0x1a    ld a1,16(sp)          ; stack access
    0x8401133e    0x1c    ld ra,72(sp)          ; stack access
    0x84011340    0x1e    addi sp,sp,80
    0x84011342    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (132 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 61 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_createObject`:

    0x84011154     0x0    addi sp,sp,-32
    0x84011156     0x2    sd ra,24(sp)          ; stack access
    0x84011158     0x4    li a5,7
    0x8401115a     0x6    beq a0,a5,ffffffff840111aa <Arch_createObject+0x56>
    0x8401115e     0xa    bltu a5,a0,ffffffff84011190 <Arch_createObject+0x3c>
    0x84011162     0xe    li a5,5
    0x84011164    0x10    beq a0,a5,ffffffff840111c4 <Arch_createObject+0x70>
    0x84011168    0x14    li a5,6
    0x8401116a    0x16    bne a0,a5,ffffffff840111de <Arch_createObject+0x8a>
    0x8401116e    0x1a    andi a3,a3,1
    0x84011170    0x1c    slli a3,a3,0x36
    0x84011172    0x1e    li a5,19
    0x84011174    0x20    slli a5,a5,0x37
    0x84011176    0x22    or a3,a3,a5
    0x84011178    0x24    sd a3,0(sp)           ; stack access
    0x8401117a    0x26    slli a1,a1,0x9
    0x8401117c    0x28    lui a5,0xfe000
    0x84011180    0x2c    srli a5,a5,0x10
    0x84011182    0x2e    and a1,a1,a5
    0x84011184    0x30    sd a1,8(sp)           ; stack access
    0x84011186    0x32    ld a0,0(sp)           ; stack access
    0x84011188    0x34    ld a1,8(sp)           ; stack access
    0x8401118a    0x36    ld ra,24(sp)          ; stack access
    0x8401118c    0x38    addi sp,sp,32
    0x8401118e    0x3a    ret
    0x84011190    0x3c    li a5,8
    0x84011192    0x3e    bne a0,a5,ffffffff840111de <Arch_createObject+0x8a>
    0x84011196    0x42    li a5,3
    0x84011198    0x44    slli a5,a5,0x3b
    0x8401119a    0x46    sd a5,0(sp)           ; stack access
    0x8401119c    0x48    slli a1,a1,0x9
    0x8401119e    0x4a    lui a5,0xfe000
    0x840111a2    0x4e    srli a5,a5,0x10
    0x840111a4    0x50    and a1,a1,a5
    0x840111a6    0x52    sd a1,8(sp)           ; stack access
    0x840111a8    0x54    j ffffffff84011186 <Arch_createObject+0x32>
    0x840111aa    0x56    andi a3,a3,1
    0x840111ac    0x58    slli a3,a3,0x36
    0x840111ae    0x5a    li a5,23
    0x840111b0    0x5c    slli a5,a5,0x37
    0x840111b2    0x5e    or a3,a3,a5
    0x840111b4    0x60    sd a3,0(sp)           ; stack access
    0x840111b6    0x62    slli a1,a1,0x9
    0x840111b8    0x64    lui a5,0xfe000
    0x840111bc    0x68    srli a5,a5,0x10
    0x840111be    0x6a    and a1,a1,a5
    0x840111c0    0x6c    sd a1,8(sp)           ; stack access
    0x840111c2    0x6e    j ffffffff84011186 <Arch_createObject+0x32>
    0x840111c4    0x70    andi a3,a3,1
    0x840111c6    0x72    slli a3,a3,0x36
    0x840111c8    0x74    li a5,27
    0x840111ca    0x76    slli a5,a5,0x37
    0x840111cc    0x78    or a3,a3,a5
    0x840111ce    0x7a    sd a3,0(sp)           ; stack access
    0x840111d0    0x7c    slli a1,a1,0x9
    0x840111d2    0x7e    lui a5,0xfe000
    0x840111d6    0x82    srli a5,a5,0x10
    0x840111d8    0x84    and a1,a1,a5
    0x840111da    0x86    sd a1,8(sp)           ; stack access
    0x840111dc    0x88    j ffffffff84011186 <Arch_createObject+0x32>
    0x840111de    0x8a    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 85 nodes.

Section Arch_getObjectSize (133 of 271)
=======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 19 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_getObjectSize`:

    0x84011122     0x0    li a4,7
    0x84011124     0x2    beq a0,a4,ffffffff84011150 <Arch_getObjectSize+0x2e>
    0x84011128     0x6    mv a5,a0
    0x8401112a     0x8    bltu a4,a0,ffffffff84011140 <Arch_getObjectSize+0x1e>
    0x8401112e     0xc    li a4,5
    0x84011130     0xe    li a0,30
    0x84011132    0x10    beq a5,a4,ffffffff8401113e <Arch_getObjectSize+0x1c>
    0x84011136    0x14    li a4,6
    0x84011138    0x16    li a0,12
    0x8401113a    0x18    bne a5,a4,ffffffff84011148 <Arch_getObjectSize+0x26>
    0x8401113e    0x1c    ret
    0x84011140    0x1e    li a4,8
    0x84011142    0x20    li a0,12
    0x84011144    0x22    beq a5,a4,ffffffff8401113e <Arch_getObjectSize+0x1c>
    0x84011148    0x26    addi sp,sp,-16
    0x8401114a    0x28    sd ra,8(sp)           ; stack access
    0x8401114c    0x2a    jal ra,ffffffff8401045e <halt>
    0x84011150    0x2e    li a0,21
    0x84011152    0x30    j ffffffff8401113e <Arch_getObjectSize+0x1c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 32 nodes.

Section Arch_sameObjectAs (134 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 64 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84011082     0x0    addi sp,sp,-48
    0x84011084     0x2    sd ra,40(sp)          ; stack access
    0x84011086     0x4    sd a0,16(sp)          ; stack access
    0x84011088     0x6    sd a1,24(sp)          ; stack access
    0x8401108a     0x8    sd a2,0(sp)           ; stack access
    0x8401108c     0xa    sd a3,8(sp)           ; stack access
    0x8401108e     0xc    srli a4,a0,0x3b
    0x84011092    0x10    li a5,1
    0x84011094    0x12    beq a4,a5,ffffffff840110aa <Arch_sameObjectAs+0x28>
    0x84011098    0x16    ld a2,0(sp)           ; stack access
    0x8401109a    0x18    ld a3,8(sp)           ; stack access
    0x8401109c    0x1a    ld a0,16(sp)          ; stack access
    0x8401109e    0x1c    ld a1,24(sp)          ; stack access
    0x840110a0    0x1e    jal ra,ffffffff84010f24 <Arch_sameRegionAs>
    0x840110a4    0x22    ld ra,40(sp)          ; stack access
    0x840110a6    0x24    addi sp,sp,48
    0x840110a8    0x26    ret
    0x840110aa    0x28    mv a4,a2
    0x840110ac    0x2a    srli a3,a2,0x3b
    0x840110b0    0x2e    bne a3,a5,ffffffff84011098 <Arch_sameObjectAs+0x16>
    0x840110b4    0x32    srli a5,a1,0x9
    0x840110b8    0x36    slli a2,a5,0x19
    0x840110bc    0x3a    srli a2,a2,0x19
    0x840110be    0x3c    srli a5,a5,0x26
    0x840110c0    0x3e    andi a5,a5,1
    0x840110c2    0x40    beqz a5,ffffffff840110ea <Arch_sameObjectAs+0x68>
    0x840110c4    0x42    li a3,-1
    0x840110c6    0x44    slli a5,a3,0x27
    0x840110ca    0x48    or a2,a2,a5
    0x840110cc    0x4a    ld a5,8(sp)           ; stack access
    0x840110ce    0x4c    srli a5,a5,0x9
    0x840110d0    0x4e    srli a3,a3,0x19
    0x840110d2    0x50    and a3,a3,a5
    0x840110d4    0x52    srli a5,a5,0x26
    0x840110d6    0x54    andi a5,a5,1
    0x840110d8    0x56    beqz a5,ffffffff840110e6 <Arch_sameObjectAs+0x64>
    0x840110da    0x58    li a5,-1
    0x840110dc    0x5a    slli a5,a5,0x27
    0x840110de    0x5c    or a3,a3,a5
    0x840110e0    0x5e    li a5,0
    0x840110e2    0x60    beq a3,a2,ffffffff840110fc <Arch_sameObjectAs+0x7a>
    0x840110e6    0x64    mv a0,a5
    0x840110e8    0x66    j ffffffff840110a4 <Arch_sameObjectAs+0x22>
    0x840110ea    0x68    ld a5,8(sp)           ; stack access
    0x840110ec    0x6a    srli a5,a5,0x9
    0x840110ee    0x6c    slli a3,a5,0x19
    0x840110f2    0x70    srli a3,a3,0x19
    0x840110f4    0x72    srli a5,a5,0x26
    0x840110f6    0x74    andi a5,a5,1
    0x840110f8    0x76    bnez a5,ffffffff840110da <Arch_sameObjectAs+0x58>
    0x840110fa    0x78    j ffffffff840110e0 <Arch_sameObjectAs+0x5e>
    0x840110fc    0x7a    srli a2,a4,0x39
    0x84011100    0x7e    andi a2,a2,3
    0x84011102    0x80    srli a3,a0,0x39
    0x84011106    0x84    andi a3,a3,3
    0x84011108    0x86    bne a2,a3,ffffffff840110e6 <Arch_sameObjectAs+0x64>
    0x8401110c    0x8a    srli a5,a0,0x36
    0x84011110    0x8e    srli a4,a4,0x36
    0x84011112    0x90    xori a4,a4,1
    0x84011116    0x94    andi a5,a5,1
    0x84011118    0x96    andi a4,a4,1
    0x8401111a    0x98    sub a5,a5,a4
    0x8401111c    0x9a    snez a5,a5
    0x84011120    0x9e    j ffffffff840110e6 <Arch_sameObjectAs+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 92 nodes.

Section Arch_sameRegionAs (135 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 138 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x84010f24      0x0    srli a5,a0,0x3b
    0x84010f28      0x4    li a6,11
    0x84010f2a      0x6    beq a5,a6,ffffffff84011076 <Arch_sameRegionAs+0x152>
    0x84010f2e      0xa    mv a4,a0
    0x84010f30      0xc    bltu a6,a5,ffffffff84010f80 <Arch_sameRegionAs+0x5c>
    0x84010f34     0x10    li a6,1
    0x84010f36     0x12    beq a5,a6,ffffffff84010fce <Arch_sameRegionAs+0xaa>
    0x84010f3a     0x16    li a6,3
    0x84010f3c     0x18    bne a5,a6,ffffffff84010f7c <Arch_sameRegionAs+0x58>
    0x84010f40     0x1c    srli a2,a2,0x3b
    0x84010f42     0x1e    li a5,3
    0x84010f44     0x20    li a0,0
    0x84010f46     0x22    bne a2,a5,ffffffff84010fda <Arch_sameRegionAs+0xb6>
    0x84010f4a     0x26    srli a1,a1,0x9
    0x84010f4c     0x28    slli a0,a1,0x19
    0x84010f50     0x2c    srli a5,a0,0x19
    0x84010f54     0x30    srli a1,a1,0x26
    0x84010f56     0x32    andi a1,a1,1
    0x84010f58     0x34    beqz a1,ffffffff84010f60 <Arch_sameRegionAs+0x3c>
    0x84010f5a     0x36    li a4,-1
    0x84010f5c     0x38    slli a4,a4,0x27
    0x84010f5e     0x3a    or a5,a5,a4
    0x84010f60     0x3c    srli a3,a3,0x9
    0x84010f62     0x3e    slli a0,a3,0x19
    0x84010f66     0x42    srli a0,a0,0x19
    0x84010f68     0x44    srli a3,a3,0x26
    0x84010f6a     0x46    andi a3,a3,1
    0x84010f6c     0x48    beqz a3,ffffffff84010f74 <Arch_sameRegionAs+0x50>
    0x84010f6e     0x4a    li a4,-1
    0x84010f70     0x4c    slli a4,a4,0x27
    0x84010f72     0x4e    or a0,a0,a4
    0x84010f74     0x50    sub a0,a0,a5
    0x84010f76     0x52    seqz a0,a0
    0x84010f7a     0x56    ret
    0x84010f7c     0x58    li a0,0
    0x84010f7e     0x5a    ret
    0x84010f80     0x5c    li a3,13
    0x84010f82     0x5e    bne a5,a3,ffffffff84010fca <Arch_sameRegionAs+0xa6>
    0x84010f86     0x62    srli a5,a2,0x3b
    0x84010f8a     0x66    li a3,13
    0x84010f8c     0x68    li a0,0
    0x84010f8e     0x6a    bne a5,a3,ffffffff84010fda <Arch_sameRegionAs+0xb6>
    0x84010f92     0x6e    slli a4,a4,0x2
    0x84010f94     0x70    lui a0,0xf8000
    0x84010f98     0x74    srli a0,a0,0x19
    0x84010f9a     0x76    and a0,a0,a4
    0x84010f9c     0x78    srli a4,a4,0x26
    0x84010f9e     0x7a    andi a4,a4,1
    0x84010fa0     0x7c    beqz a4,ffffffff84010fa8 <Arch_sameRegionAs+0x84>
    0x84010fa2     0x7e    li a5,-1
    0x84010fa4     0x80    slli a5,a5,0x27
    0x84010fa6     0x82    or a0,a0,a5
    0x84010fa8     0x84    slli a4,a2,0x2
    0x84010fac     0x88    lui a5,0xf8000
    0x84010fb0     0x8c    srli a5,a5,0x19
    0x84010fb2     0x8e    and a5,a5,a4
    0x84010fb4     0x90    srli a4,a4,0x26
    0x84010fb6     0x92    andi a4,a4,1
    0x84010fb8     0x94    beqz a4,ffffffff84010fc0 <Arch_sameRegionAs+0x9c>
    0x84010fba     0x96    li a4,-1
    0x84010fbc     0x98    slli a4,a4,0x27
    0x84010fbe     0x9a    or a5,a5,a4
    0x84010fc0     0x9c    sub a0,a5,a0
    0x84010fc4     0xa0    seqz a0,a0
    0x84010fc8     0xa4    ret
    0x84010fca     0xa6    li a0,0
    0x84010fcc     0xa8    ret
    0x84010fce     0xaa    srli a5,a2,0x3b
    0x84010fd2     0xae    li a6,1
    0x84010fd4     0xb0    li a0,0
    0x84010fd6     0xb2    beq a5,a6,ffffffff84010fdc <Arch_sameRegionAs+0xb8>
    0x84010fda     0xb6    ret
    0x84010fdc     0xb8    addi sp,sp,-48
    0x84010fde     0xba    sd ra,40(sp)          ; stack access
    0x84010fe0     0xbc    srli a1,a1,0x9
    0x84010fe2     0xbe    slli a5,a1,0x19
    0x84010fe6     0xc2    srli a5,a5,0x19
    0x84010fe8     0xc4    srli a1,a1,0x26
    0x84010fea     0xc6    andi a1,a1,1
    0x84010fec     0xc8    beqz a1,ffffffff84010ff4 <Arch_sameRegionAs+0xd0>
    0x84010fee     0xca    li a1,-1
    0x84010ff0     0xcc    slli a1,a1,0x27
    0x84010ff2     0xce    or a5,a5,a1
    0x84010ff4     0xd0    srli a3,a3,0x9
    0x84010ff6     0xd2    slli a1,a3,0x19
    0x84010ffa     0xd6    srli a1,a1,0x19
    0x84010ffc     0xd8    srli a3,a3,0x26
    0x84010ffe     0xda    andi a3,a3,1
    0x84011000     0xdc    beqz a3,ffffffff84011008 <Arch_sameRegionAs+0xe4>
    0x84011002     0xde    li a3,-1
    0x84011004     0xe0    slli a3,a3,0x27
    0x84011006     0xe2    or a1,a1,a3
    0x84011008     0xe4    srli a4,a4,0x39
    0x8401100a     0xe6    andi a4,a4,3
    0x8401100c     0xe8    li a3,1
    0x8401100e     0xea    beq a4,a3,ffffffff8401101e <Arch_sameRegionAs+0xfa>
    0x84011012     0xee    li a3,2
    0x84011014     0xf0    beq a4,a3,ffffffff84011022 <Arch_sameRegionAs+0xfe>
    0x84011018     0xf4    beqz a4,ffffffff8401103a <Arch_sameRegionAs+0x116>
    0x8401101a     0xf6    jal ra,ffffffff8401045e <halt>
    0x8401101e     0xfa    li a6,21
    0x84011020     0xfc    j ffffffff84011024 <Arch_sameRegionAs+0x100>
    0x84011022     0xfe    li a6,30
    0x84011024    0x100    srli a2,a2,0x39
    0x84011026    0x102    andi a2,a2,3
    0x84011028    0x104    li a4,1
    0x8401102a    0x106    beq a2,a4,ffffffff8401103e <Arch_sameRegionAs+0x11a>
    0x8401102e    0x10a    li a4,2
    0x84011030    0x10c    beq a2,a4,ffffffff84011042 <Arch_sameRegionAs+0x11e>
    0x84011034    0x110    beqz a2,ffffffff84011072 <Arch_sameRegionAs+0x14e>
    0x84011036    0x112    jal ra,ffffffff8401045e <halt>
    0x8401103a    0x116    li a6,12
    0x8401103c    0x118    j ffffffff84011024 <Arch_sameRegionAs+0x100>
    0x8401103e    0x11a    li a4,21
    0x84011040    0x11c    j ffffffff84011044 <Arch_sameRegionAs+0x120>
    0x84011042    0x11e    li a4,30
    0x84011044    0x120    li a0,0
    0x84011046    0x122    bltu a1,a5,ffffffff8401106c <Arch_sameRegionAs+0x148>
    0x8401104a    0x126    li a3,1
    0x8401104c    0x128    sll a4,a3,a4
    0x84011050    0x12c    addi a2,a1,-1 # fffffffff7ffffff <ki_end+0x73fd0fff>
    0x84011054    0x130    add a4,a4,a2
    0x84011056    0x132    sll a3,a3,a6
    0x8401105a    0x136    addi a5,a5,-1
    0x8401105c    0x138    add a5,a5,a3
    0x8401105e    0x13a    bltu a5,a4,ffffffff8401106c <Arch_sameRegionAs+0x148>
    0x84011062    0x13e    sltu a0,a4,a1
    0x84011066    0x142    xori a0,a0,1
    0x8401106a    0x146    sext.w a0,a0
    0x8401106c    0x148    ld ra,40(sp)          ; stack access
    0x8401106e    0x14a    addi sp,sp,48
    0x84011070    0x14c    ret
    0x84011072    0x14e    li a4,12
    0x84011074    0x150    j ffffffff84011044 <Arch_sameRegionAs+0x120>
    0x84011076    0x152    srli a0,a2,0x3b
    0x8401107a    0x156    addi a0,a0,-11
    0x8401107c    0x158    seqz a0,a0
    0x84011080    0x15c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 193 nodes.

Section Arch_maskCapRights (136 of 271)
=======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 32 instructions.

RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84010dc8     0x0    addi sp,sp,-64
    0x84010dca     0x2    sd ra,56(sp)          ; stack access
    0x84010dcc     0x4    sd s0,48(sp)          ; stack access
    0x84010dce     0x6    sd s1,40(sp)          ; stack access
    0x84010dd0     0x8    mv s0,a1
    0x84010dd2     0xa    mv s1,a2
    0x84010dd4     0xc    srli a4,a1,0x3b
    0x84010dd8    0x10    li a5,1
    0x84010dda    0x12    beq a4,a5,ffffffff84010df0 <Arch_maskCapRights+0x28>
    0x84010dde    0x16    sd a1,16(sp)          ; stack access
    0x84010de0    0x18    sd a2,24(sp)          ; stack access
    0x84010de2    0x1a    ld a0,16(sp)          ; stack access
    0x84010de4    0x1c    ld a1,24(sp)          ; stack access
    0x84010de6    0x1e    ld ra,56(sp)          ; stack access
    0x84010de8    0x20    ld s0,48(sp)          ; stack access
    0x84010dea    0x22    ld s1,40(sp)          ; stack access
    0x84010dec    0x24    addi sp,sp,64
    0x84010dee    0x26    ret
    0x84010df0    0x28    srli a5,a1,0x37
    0x84010df4    0x2c    mv a1,a0
    0x84010df6    0x2e    andi a0,a5,3
    0x84010dfa    0x32    jal ra,ffffffff84010c62 <maskVMRights>
    0x84010dfe    0x36    andi a0,a0,3
    0x84010e00    0x38    slli a0,a0,0x37
    0x84010e02    0x3a    li a1,-3
    0x84010e04    0x3c    slli a1,a1,0x37
    0x84010e06    0x3e    addi a1,a1,-1
    0x84010e08    0x40    and s0,s0,a1
    0x84010e0a    0x42    or s0,s0,a0
    0x84010e0c    0x44    sd s0,16(sp)          ; stack access
    0x84010e0e    0x46    sd s1,24(sp)          ; stack access
    0x84010e10    0x48    j ffffffff84010de2 <Arch_maskCapRights+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 48 nodes.

Section Arch_deriveCap (137 of 271)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 39 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84010d5a     0x0    srli a5,a2,0x3b
    0x84010d5e     0x4    li a4,3
    0x84010d60     0x6    beq a5,a4,ffffffff84010d92 <Arch_deriveCap+0x38>
    0x84010d64     0xa    bgeu a4,a5,ffffffff84010d76 <Arch_deriveCap+0x1c>
    0x84010d68     0xe    addi a5,a5,-11
    0x84010d6a    0x10    andi a5,a5,-3
    0x84010d6c    0x12    beqz a5,ffffffff84010db4 <Arch_deriveCap+0x5a>
    0x84010d6e    0x14    addi sp,sp,-32
    0x84010d70    0x16    sd ra,24(sp)          ; stack access
    0x84010d72    0x18    jal ra,ffffffff8401045e <halt>
    0x84010d76    0x1c    li a4,1
    0x84010d78    0x1e    bne a5,a4,ffffffff84010d6e <Arch_deriveCap+0x14>
    0x84010d7c    0x22    sd zero,0(a0)         ; stack access
    0x84010d80    0x26    li a5,-1
    0x84010d82    0x28    slli a4,a5,0x27
    0x84010d86    0x2c    and a2,a2,a4
    0x84010d88    0x2e    sd a2,8(a0)           ; stack access
    0x84010d8a    0x30    srli a5,a5,0x10
    0x84010d8c    0x32    and a3,a3,a5
    0x84010d8e    0x34    sd a3,16(a0)          ; stack access
    0x84010d90    0x36    ret
    0x84010d92    0x38    srli a4,a2,0x27
    0x84010d96    0x3c    andi a4,a4,1
    0x84010d98    0x3e    bnez a4,ffffffff84010db0 <Arch_deriveCap+0x56>
    0x84010d9a    0x40    li a3,3
    0x84010d9c    0x42    auipc a2,0x8
    0x84010da0    0x46    sd a3,-1740(a2) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010da4    0x4a    mv a3,a4
    0x84010da6    0x4c    mv a2,a4
    0x84010da8    0x4e    sd a5,0(a0)           ; stack access
    0x84010daa    0x50    sd a2,8(a0)           ; stack access
    0x84010dac    0x52    sd a3,16(a0)          ; stack access
    0x84010dae    0x54    ret
    0x84010db0    0x56    li a5,0
    0x84010db2    0x58    j ffffffff84010da8 <Arch_deriveCap+0x4e>
    0x84010db4    0x5a    sd zero,0(a0)         ; stack access
    0x84010db8    0x5e    sd a2,8(a0)           ; stack access
    0x84010dba    0x60    sd a3,16(a0)          ; stack access
    0x84010dbc    0x62    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 64 nodes.

Section performPageInvocationUnmap (138 of 271)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 43 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x84010cba     0x0    addi sp,sp,-32
    0x84010cbc     0x2    sd ra,24(sp)          ; stack access
    0x84010cbe     0x4    sd s0,16(sp)          ; stack access
    0x84010cc0     0x6    sd a0,0(sp)           ; stack access
    0x84010cc2     0x8    mv s0,a2
    0x84010cc4     0xa    mv a5,a1
    0x84010cc6     0xc    srli a1,a1,0x30
    0x84010cc8     0xe    beqz a1,ffffffff84010cfa <performPageInvocationUnmap+0x40>
    0x84010cca    0x10    mv a4,a0
    0x84010ccc    0x12    srli a0,a0,0x39
    0x84010cce    0x14    andi a0,a0,3
    0x84010cd0    0x16    slli a2,a4,0x19
    0x84010cd4    0x1a    srli a2,a2,0x19
    0x84010cd6    0x1c    srli a4,a4,0x26
    0x84010cd8    0x1e    andi a4,a4,1
    0x84010cda    0x20    beqz a4,ffffffff84010ce2 <performPageInvocationUnmap+0x28>
    0x84010cdc    0x22    li a4,-1
    0x84010cde    0x24    slli a4,a4,0x27
    0x84010ce0    0x26    or a2,a2,a4
    0x84010ce2    0x28    srli a5,a5,0x9
    0x84010ce4    0x2a    slli a3,a5,0x19
    0x84010ce8    0x2e    srli a3,a3,0x19
    0x84010cea    0x30    srli a5,a5,0x26
    0x84010cec    0x32    andi a5,a5,1
    0x84010cee    0x34    beqz a5,ffffffff84010cf6 <performPageInvocationUnmap+0x3c>
    0x84010cf0    0x36    li a5,-1
    0x84010cf2    0x38    slli a5,a5,0x27
    0x84010cf4    0x3a    or a3,a3,a5
    0x84010cf6    0x3c    jal ra,ffffffff84010a10 <unmapPage>
    0x84010cfa    0x40    ld a4,8(s0)
    0x84010cfc    0x42    li a5,-1
    0x84010cfe    0x44    srli a3,a5,0x10
    0x84010d02    0x48    and a4,a4,a3
    0x84010d04    0x4a    ld a3,0(s0)
    0x84010d06    0x4c    slli a5,a5,0x27
    0x84010d08    0x4e    and a5,a5,a3
    0x84010d0a    0x50    sd a5,0(s0)
    0x84010d0c    0x52    sd a4,8(s0)
    0x84010d0e    0x54    li a0,0
    0x84010d10    0x56    ld ra,24(sp)          ; stack access
    0x84010d12    0x58    ld s0,16(sp)          ; stack access
    0x84010d14    0x5a    addi sp,sp,32
    0x84010d16    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 60 nodes.

Section deleteASID (139 of 271)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 23 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASID`:

    0x84010bc2     0x0    srli a5,a0,0x9
    0x84010bc6     0x4    slli a4,a5,0x3
    0x84010bca     0x8    auipc a5,0x7
    0x84010bce     0xc    addi a5,a5,1078 # ffffffff84018000 <riscvKSASIDTable>
    0x84010bd2    0x10    add a5,a5,a4
    0x84010bd4    0x12    ld a5,0(a5)
    0x84010bd6    0x14    beqz a5,ffffffff84010be6 <deleteASID+0x24>
    0x84010bd8    0x16    andi a4,a0,511
    0x84010bdc    0x1a    slli a4,a4,0x3
    0x84010bde    0x1c    add a5,a5,a4
    0x84010be0    0x1e    ld a4,0(a5)
    0x84010be2    0x20    beq a4,a1,ffffffff84010be8 <deleteASID+0x26>
    0x84010be6    0x24    ret
    0x84010be8    0x26    addi sp,sp,-16
    0x84010bea    0x28    sd ra,8(sp)           ; stack access
    0x84010bec    0x2a    sfence.vma zero,a0
    0x84010bf0    0x2e    sd zero,0(a5)
    0x84010bf4    0x32    auipc a0,0x1a
    0x84010bf8    0x36    ld a0,-956(a0) # ffffffff8402a838 <ksCurThread>
    0x84010bfc    0x3a    jal ra,ffffffff84010a9e <setVMRoot>
    0x84010c00    0x3e    ld ra,8(sp)           ; stack access
    0x84010c02    0x40    addi sp,sp,16
    0x84010c04    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 37 nodes.

Section deleteASIDPool (140 of 271)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASIDPool`:

    0x84010b84     0x0    srli a0,a0,0x9
    0x84010b86     0x2    slli a4,a0,0x3
    0x84010b8a     0x6    auipc a5,0x7
    0x84010b8e     0xa    addi a5,a5,1142 # ffffffff84018000 <riscvKSASIDTable>
    0x84010b92     0xe    add a5,a5,a4
    0x84010b94    0x10    ld a5,0(a5)
    0x84010b96    0x12    beq a5,a1,ffffffff84010b9c <deleteASIDPool+0x18>
    0x84010b9a    0x16    ret
    0x84010b9c    0x18    addi sp,sp,-16
    0x84010b9e    0x1a    sd ra,8(sp)           ; stack access
    0x84010ba0    0x1c    auipc a5,0x7
    0x84010ba4    0x20    addi a5,a5,1120 # ffffffff84018000 <riscvKSASIDTable>
    0x84010ba8    0x24    add a0,a5,a4
    0x84010bac    0x28    sd zero,0(a0)
    0x84010bb0    0x2c    auipc a0,0x1a
    0x84010bb4    0x30    ld a0,-888(a0) # ffffffff8402a838 <ksCurThread>
    0x84010bb8    0x34    jal ra,ffffffff84010a9e <setVMRoot>
    0x84010bbc    0x38    ld ra,8(sp)           ; stack access
    0x84010bbe    0x3a    addi sp,sp,16
    0x84010bc0    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 30 nodes.

Section Arch_switchToIdleThread (141 of 271)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToIdleThread`:

    0x84010b6e     0x0    addi sp,sp,-16
    0x84010b70     0x2    sd ra,8(sp)           ; stack access
    0x84010b72     0x4    auipc a0,0x1a
    0x84010b76     0x8    ld a0,-834(a0) # ffffffff8402a830 <ksIdleThread>
    0x84010b7a     0xc    jal ra,ffffffff84010a9e <setVMRoot>
    0x84010b7e    0x10    ld ra,8(sp)           ; stack access
    0x84010b80    0x12    addi sp,sp,16
    0x84010b82    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 13 nodes.

Section Arch_switchToThread (142 of 271)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToThread`:

    0x84010b60    0x0    addi sp,sp,-16
    0x84010b62    0x2    sd ra,8(sp)           ; stack access
    0x84010b64    0x4    jal ra,ffffffff84010a9e <setVMRoot>
    0x84010b68    0x8    ld ra,8(sp)           ; stack access
    0x84010b6a    0xa    addi sp,sp,16
    0x84010b6c    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 10 nodes.

Section setVMRoot (143 of 271)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 75 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `setVMRoot`:

    0x84010a9e     0x0    andi a0,a0,-1024
    0x84010aa2     0x4    ld a5,32(a0)
    0x84010aa4     0x6    srli a5,a5,0x3b
    0x84010aa6     0x8    li a4,3
    0x84010aa8     0xa    beq a5,a4,ffffffff84010ad2 <setVMRoot+0x34>
    0x84010aac     0xe    auipc a5,0x1c
    0x84010ab0    0x12    addi a5,a5,1364 # ffffffff8402d000 <kernel_root_pageTable>
    0x84010ab4    0x16    li a4,1
    0x84010ab6    0x18    slli a4,a4,0x20
    0x84010ab8    0x1a    add a5,a5,a4
    0x84010aba    0x1c    srli a5,a5,0xc
    0x84010abc    0x1e    li a4,-1
    0x84010abe    0x20    srli a3,a4,0x14
    0x84010ac2    0x24    and a5,a5,a3
    0x84010ac4    0x26    slli a4,a4,0x3f
    0x84010ac6    0x28    or a5,a5,a4
    0x84010ac8    0x2a    csrw satp,a5
    0x84010acc    0x2e    sfence.vma
    0x84010ad0    0x32    ret
    0x84010ad2    0x34    addi sp,sp,-48
    0x84010ad4    0x36    sd ra,40(sp)          ; stack access
    0x84010ad6    0x38    sd s0,32(sp)          ; stack access
    0x84010ad8    0x3a    sd s1,24(sp)          ; stack access
    0x84010ada    0x3c    sd s2,16(sp)          ; stack access
    0x84010adc    0x3e    addi a3,a0,32
    0x84010ae0    0x42    ld a5,8(a3)
    0x84010ae2    0x44    srli a4,a5,0x9
    0x84010ae6    0x48    slli s0,a4,0x19
    0x84010aea    0x4c    srli s0,s0,0x19
    0x84010aec    0x4e    srli a4,a4,0x26
    0x84010aee    0x50    andi a4,a4,1
    0x84010af0    0x52    beqz a4,ffffffff84010af8 <setVMRoot+0x5a>
    0x84010af2    0x54    li a4,-1
    0x84010af4    0x56    slli a4,a4,0x27
    0x84010af6    0x58    or s0,s0,a4
    0x84010af8    0x5a    srli s1,a5,0x30
    0x84010afc    0x5e    mv a0,s1
    0x84010afe    0x60    jal ra,ffffffff84010184 <findVSpaceForASID>
    0x84010b02    0x64    sd a0,0(sp)           ; stack access
    0x84010b04    0x66    sd a1,8(sp)           ; stack access
    0x84010b06    0x68    bnez a0,ffffffff84010b3a <setVMRoot+0x9c>
    0x84010b08    0x6a    bne a1,s0,ffffffff84010b3a <setVMRoot+0x9c>
    0x84010b0c    0x6e    li a5,1
    0x84010b0e    0x70    slli a5,a5,0x26
    0x84010b10    0x72    add a5,a5,s0
    0x84010b12    0x74    srli a5,a5,0xc
    0x84010b14    0x76    li a4,-1
    0x84010b16    0x78    srli s0,a4,0x14
    0x84010b1a    0x7c    and a5,a5,s0
    0x84010b1c    0x7e    slli a0,s1,0x2c
    0x84010b20    0x82    or a5,a5,a0
    0x84010b22    0x84    slli a4,a4,0x3f
    0x84010b24    0x86    or a5,a5,a4
    0x84010b26    0x88    csrw satp,a5
    0x84010b2a    0x8c    sfence.vma
    0x84010b2e    0x90    ld ra,40(sp)          ; stack access
    0x84010b30    0x92    ld s0,32(sp)          ; stack access
    0x84010b32    0x94    ld s1,24(sp)          ; stack access
    0x84010b34    0x96    ld s2,16(sp)          ; stack access
    0x84010b36    0x98    addi sp,sp,48
    0x84010b38    0x9a    ret
    0x84010b3a    0x9c    auipc a5,0x1c
    0x84010b3e    0xa0    addi a5,a5,1222 # ffffffff8402d000 <kernel_root_pageTable>
    0x84010b42    0xa4    li a4,1
    0x84010b44    0xa6    slli a4,a4,0x20
    0x84010b46    0xa8    add a5,a5,a4
    0x84010b48    0xaa    srli a5,a5,0xc
    0x84010b4a    0xac    li a4,-1
    0x84010b4c    0xae    srli a3,a4,0x14
    0x84010b50    0xb2    and a5,a5,a3
    0x84010b52    0xb4    slli a4,a4,0x3f
    0x84010b54    0xb6    or a5,a5,a4
    0x84010b56    0xb8    csrw satp,a5
    0x84010b5a    0xbc    sfence.vma
    0x84010b5e    0xc0    j ffffffff84010b2e <setVMRoot+0x90>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 104 nodes.

Section unmapPageTable (144 of 271)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 64 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `unmapPageTable`:

    0x84010966     0x0    addi sp,sp,-48
    0x84010968     0x2    sd ra,40(sp)          ; stack access
    0x8401096a     0x4    sd s0,32(sp)          ; stack access
    0x8401096c     0x6    sd s1,24(sp)          ; stack access
    0x8401096e     0x8    mv s0,a1
    0x84010970     0xa    mv s1,a2
    0x84010972     0xc    jal ra,ffffffff84010184 <findVSpaceForASID>
    0x84010976    0x10    sd a0,0(sp)           ; stack access
    0x84010978    0x12    sd a1,8(sp)           ; stack access
    0x8401097a    0x14    bnez a0,ffffffff840109fa <unmapPageTable+0x94>
    0x8401097c    0x16    beq a1,s1,ffffffff84010a04 <unmapPageTable+0x9e>
    0x84010980    0x1a    srli a5,s0,0x1e
    0x84010984    0x1e    andi a5,a5,511
    0x84010988    0x22    slli a5,a5,0x3
    0x8401098a    0x24    add a4,a1,a5
    0x8401098e    0x28    ld a5,0(a4)
    0x84010990    0x2a    andi a3,a5,1
    0x84010994    0x2e    beqz a3,ffffffff840109fa <unmapPageTable+0x94>
    0x84010996    0x30    srli a3,a5,0x1
    0x8401099a    0x34    srli a2,a5,0x2
    0x8401099e    0x38    or a3,a3,a2
    0x840109a0    0x3a    srli a2,a5,0x3
    0x840109a4    0x3e    or a3,a3,a2
    0x840109a6    0x40    andi a3,a3,1
    0x840109a8    0x42    bnez a3,ffffffff840109fa <unmapPageTable+0x94>
    0x840109aa    0x44    slli a5,a5,0x2
    0x840109ac    0x46    lui a3,0xfff00
    0x840109b0    0x4a    srli a3,a3,0x8
    0x840109b2    0x4c    and a5,a5,a3
    0x840109b4    0x4e    li a3,-1
    0x840109b6    0x50    slli a3,a3,0x26
    0x840109b8    0x52    add a5,a5,a3
    0x840109ba    0x54    beq s1,a5,ffffffff84010a06 <unmapPageTable+0xa0>
    0x840109be    0x58    srli s0,s0,0x15
    0x840109c0    0x5a    andi s0,s0,511
    0x840109c4    0x5e    slli s0,s0,0x3
    0x840109c6    0x60    add a4,a5,s0
    0x840109ca    0x64    ld a5,0(a4)
    0x840109cc    0x66    andi a3,a5,1
    0x840109d0    0x6a    beqz a3,ffffffff840109fa <unmapPageTable+0x94>
    0x840109d2    0x6c    srli a3,a5,0x1
    0x840109d6    0x70    srli a2,a5,0x2
    0x840109da    0x74    or a3,a3,a2
    0x840109dc    0x76    srli a2,a5,0x3
    0x840109e0    0x7a    or a3,a3,a2
    0x840109e2    0x7c    andi a3,a3,1
    0x840109e4    0x7e    bnez a3,ffffffff840109fa <unmapPageTable+0x94>
    0x840109e6    0x80    slli a5,a5,0x2
    0x840109e8    0x82    lui a3,0xfff00
    0x840109ec    0x86    srli a3,a3,0x8
    0x840109ee    0x88    and a5,a5,a3
    0x840109f0    0x8a    li a3,-1
    0x840109f2    0x8c    slli a3,a3,0x26
    0x840109f4    0x8e    add a5,a5,a3
    0x840109f6    0x90    beq s1,a5,ffffffff84010a06 <unmapPageTable+0xa0>
    0x840109fa    0x94    ld ra,40(sp)          ; stack access
    0x840109fc    0x96    ld s0,32(sp)          ; stack access
    0x840109fe    0x98    ld s1,24(sp)          ; stack access
    0x84010a00    0x9a    addi sp,sp,48
    0x84010a02    0x9c    ret
    0x84010a04    0x9e    li a4,0
    0x84010a06    0xa0    sd zero,0(a4)
    0x84010a0a    0xa4    sfence.vma
    0x84010a0e    0xa8    j ffffffff840109fa <unmapPageTable+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 94 nodes.

Section handleVMFault (145 of 271)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 42 instructions.

Skipping 14302773 csrr a4,stval

RVC_FTTFFT___FFFT_FT.

Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x840108e8     0x0    csrr a4,stval
    0x840108ec     0x4    li a5,15
    0x840108ee     0x6    bltu a5,a1,ffffffff84010914 <handleVMFault+0x2c>
    0x840108f2     0xa    li a5,1
    0x840108f4     0xc    sll a1,a5,a1
    0x840108f8    0x10    lui a5,0x1
    0x840108fa    0x12    addi a5,a5,2
    0x840108fc    0x14    and a5,a5,a1
    0x840108fe    0x16    bnez a5,ffffffff8401094e <handleVMFault+0x66>
    0x84010900    0x18    lui a5,0x8
    0x84010902    0x1a    addi a5,a5,128 # 8080 <KERNEL_OFFSET-0xfffffffeffff7f80>
    0x84010906    0x1e    and a5,a5,a1
    0x84010908    0x20    bnez a5,ffffffff84010936 <handleVMFault+0x4e>
    0x8401090a    0x22    lui a5,0x2
    0x8401090c    0x24    addi a5,a5,32 # 2020 <KERNEL_OFFSET-0xfffffffeffffdfe0>
    0x84010910    0x28    and a1,a1,a5
    0x84010912    0x2a    bnez a1,ffffffff8401091c <handleVMFault+0x34>
    0x84010914    0x2c    addi sp,sp,-16
    0x84010916    0x2e    sd ra,8(sp)           ; stack access
    0x84010918    0x30    jal ra,ffffffff8401045e <halt>
    0x8401091c    0x34    auipc a3,0x7
    0x84010920    0x38    addi a3,a3,1764 # ffffffff84018000 <riscvKSASIDTable>
    0x84010924    0x3c    lui a5,0x28000
    0x84010928    0x40    addi a5,a5,5
    0x8401092a    0x42    sd a5,1680(a3)
    0x8401092e    0x46    sd a4,1688(a3)
    0x84010932    0x4a    li a0,1
    0x84010934    0x4c    ret
    0x84010936    0x4e    auipc a3,0x7
    0x8401093a    0x52    addi a3,a3,1738 # ffffffff84018000 <riscvKSASIDTable>
    0x8401093e    0x56    lui a5,0x38000
    0x84010942    0x5a    addi a5,a5,5
    0x84010944    0x5c    sd a5,1680(a3)
    0x84010948    0x60    sd a4,1688(a3)
    0x8401094c    0x64    j ffffffff84010932 <handleVMFault+0x4a>
    0x8401094e    0x66    auipc a3,0x7
    0x84010952    0x6a    addi a3,a3,1714 # ffffffff84018000 <riscvKSASIDTable>
    0x84010956    0x6e    lui a5,0x8080
    0x8401095a    0x72    addi a5,a5,5
    0x8401095c    0x74    sd a5,1680(a3)
    0x84010960    0x78    sd a4,1688(a3)
    0x84010964    0x7c    j ffffffff84010932 <handleVMFault+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 60 nodes.

Section lookupIPCBuffer (146 of 271)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 56 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x840106a2     0x0    andi a5,a1,-1024
    0x840106a6     0x4    addi a2,a5,128
    0x840106aa     0x8    ld a5,128(a5)
    0x840106ac     0xa    srli a3,a5,0x3b
    0x840106b0     0xe    li a4,1
    0x840106b2    0x10    bne a3,a4,ffffffff84010726 <lookupIPCBuffer+0x84>
    0x840106b6    0x14    srli a4,a5,0x36
    0x840106ba    0x18    andi a4,a4,1
    0x840106bc    0x1a    bnez a4,ffffffff8401072a <lookupIPCBuffer+0x88>
    0x840106be    0x1c    srli a4,a5,0x37
    0x840106c2    0x20    andi a4,a4,3
    0x840106c4    0x22    li a3,3
    0x840106c6    0x24    bne a4,a3,ffffffff84010700 <lookupIPCBuffer+0x5e>
    0x840106ca    0x28    ld a4,8(a2)
    0x840106cc    0x2a    srli a4,a4,0x9
    0x840106ce    0x2c    slli a0,a4,0x19
    0x840106d2    0x30    srli a3,a0,0x19
    0x840106d6    0x34    srli a4,a4,0x26
    0x840106d8    0x36    andi a4,a4,1
    0x840106da    0x38    beqz a4,ffffffff840106e2 <lookupIPCBuffer+0x40>
    0x840106dc    0x3a    li a4,-1
    0x840106de    0x3c    slli a4,a4,0x27
    0x840106e0    0x3e    or a3,a3,a4
    0x840106e2    0x40    ld a4,384(a1)
    0x840106e6    0x44    srli a5,a5,0x39
    0x840106e8    0x46    andi a5,a5,3
    0x840106ea    0x48    li a2,1
    0x840106ec    0x4a    beq a5,a2,ffffffff8401070c <lookupIPCBuffer+0x6a>
    0x840106f0    0x4e    li a2,2
    0x840106f2    0x50    beq a5,a2,ffffffff84010710 <lookupIPCBuffer+0x6e>
    0x840106f6    0x54    beqz a5,ffffffff84010722 <lookupIPCBuffer+0x80>
    0x840106f8    0x56    addi sp,sp,-16
    0x840106fa    0x58    sd ra,8(sp)           ; stack access
    0x840106fc    0x5a    jal ra,ffffffff8401045e <halt>
    0x84010700    0x5e    bnez a0,ffffffff8401072e <lookupIPCBuffer+0x8c>
    0x84010702    0x60    li a3,2
    0x84010704    0x62    beq a4,a3,ffffffff840106ca <lookupIPCBuffer+0x28>
    0x84010708    0x66    li a0,0
    0x8401070a    0x68    ret
    0x8401070c    0x6a    li a5,21
    0x8401070e    0x6c    j ffffffff84010712 <lookupIPCBuffer+0x70>
    0x84010710    0x6e    li a5,30
    0x84010712    0x70    li a0,-1
    0x84010714    0x72    sll a0,a0,a5
    0x84010718    0x76    not a0,a0
    0x8401071c    0x7a    and a0,a0,a4
    0x8401071e    0x7c    add a0,a0,a3
    0x84010720    0x7e    ret
    0x84010722    0x80    li a5,12
    0x84010724    0x82    j ffffffff84010712 <lookupIPCBuffer+0x70>
    0x84010726    0x84    li a0,0
    0x84010728    0x86    ret
    0x8401072a    0x88    li a0,0
    0x8401072c    0x8a    ret
    0x8401072e    0x8c    li a0,0
    0x84010730    0x8e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 84 nodes.

Section Arch_handleFaultReply (147 of 271)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x8401046a    0x0    li a5,5
    0x8401046c    0x2    bne a2,a5,ffffffff84010474 <Arch_handleFaultReply+0xa>
    0x84010470    0x6    li a0,1
    0x84010472    0x8    ret
    0x84010474    0xa    addi sp,sp,-16
    0x84010476    0xc    sd ra,8(sp)           ; stack access
    0x84010478    0xe    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section isHighestPrio (148 of 271)
==================================

Deriving specifications
-----------------------

Section `isHighestPrio` consists of 40 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isHighestPrio`:

    0x8401034c     0x0    addi sp,sp,-32
    0x8401034e     0x2    sd ra,24(sp)          ; stack access
    0x84010350     0x4    sd s0,16(sp)          ; stack access
    0x84010352     0x6    sd s1,8(sp)           ; stack access
    0x84010354     0x8    sd s2,0(sp)           ; stack access
    0x84010356     0xa    mv s0,a0
    0x84010358     0xc    slli a4,a0,0x3
    0x8401035c    0x10    auipc a5,0x8
    0x84010360    0x14    addi a5,a5,-860 # ffffffff84018000 <riscvKSASIDTable>
    0x84010364    0x18    add a5,a5,a4
    0x84010366    0x1a    ld a0,1040(a5)
    0x8401036a    0x1e    beqz a0,ffffffff840103b8 <isHighestPrio+0x6c>
    0x8401036c    0x20    mv s1,a1
    0x8401036e    0x22    jal ra,ffffffff840100cc <clzl>
    0x84010372    0x26    mv s2,a0
    0x84010374    0x28    slli s0,s0,0x2
    0x84010376    0x2a    addi a0,a0,-60 # fffffffff7ffffc4 <ki_end+0x73fd0fc4>
    0x8401037a    0x2e    add s0,s0,a0
    0x8401037c    0x30    slli s0,s0,0x3
    0x8401037e    0x32    auipc a5,0x8
    0x84010382    0x36    addi a5,a5,-894 # ffffffff84018000 <riscvKSASIDTable>
    0x84010386    0x3a    add s0,s0,a5
    0x84010388    0x3c    ld a0,1168(s0) # 1490 <KERNEL_OFFSET-0xfffffffeffffeb70>
    0x8401038c    0x40    jal ra,ffffffff840100cc <clzl>
    0x84010390    0x44    li a5,63
    0x84010394    0x48    sub s2,a5,s2
    0x84010398    0x4c    slli s2,s2,0x6
    0x8401039a    0x4e    sub a0,a5,a0
    0x8401039e    0x52    or a0,s2,a0
    0x840103a2    0x56    sltu a0,s1,a0
    0x840103a6    0x5a    xori a0,a0,1
    0x840103aa    0x5e    sext.w a0,a0
    0x840103ac    0x60    ld ra,24(sp)          ; stack access
    0x840103ae    0x62    ld s0,16(sp)          ; stack access
    0x840103b0    0x64    ld s1,8(sp)           ; stack access
    0x840103b2    0x66    ld s2,0(sp)           ; stack access
    0x840103b4    0x68    addi sp,sp,32
    0x840103b6    0x6a    ret
    0x840103b8    0x6c    li a0,1
    0x840103ba    0x6e    j ffffffff840103ac <isHighestPrio+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
40 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isHighestPrio` has 55 nodes.

Section interrupt (149 of 271)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840100c4    0x0    sd ra,272(t0)
    0x840100c8    0x4    j ffffffff84013d2a <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (150 of 271)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840100bc    0x0    sd ra,272(t0)
    0x840100c0    0x4    j ffffffff84014494 <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (151 of 271)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840100b2    0x0    addi ra,ra,4
    0x840100b4    0x2    sd ra,272(t0)
    0x840100b8    0x6    j ffffffff8401731c <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section maybe_alloc_extra_bi (152 of 271)
=========================================

Deriving specifications
-----------------------

Section `maybe_alloc_extra_bi` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `maybe_alloc_extra_bi`:

    0x84000e50     0x0    bltu a1,a0,ffffffff84000e60 <maybe_alloc_extra_bi+0x10>
    0x84000e54     0x4    mv a5,a1
    0x84000e56     0x6    auipc a4,0x1
    0x84000e5a     0xa    ld a4,-1702(a4) # ffffffff840017b0 <rootserver+0x28>
    0x84000e5e     0xe    beqz a4,ffffffff84000e62 <maybe_alloc_extra_bi+0x12>
    0x84000e60    0x10    ret
    0x84000e62    0x12    addi sp,sp,-16
    0x84000e64    0x14    sd ra,8(sp)           ; stack access
    0x84000e66    0x16    li a1,1
    0x84000e68    0x18    mv a0,a5
    0x84000e6a    0x1a    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000e6e    0x1e    auipc a5,0x1
    0x84000e72    0x22    sd a0,-1726(a5) # ffffffff840017b0 <rootserver+0x28>
    0x84000e76    0x26    ld ra,8(sp)           ; stack access
    0x84000e78    0x28    addi sp,sp,16
    0x84000e7a    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maybe_alloc_extra_bi` has 27 nodes.

Section alloc_rootserver_obj (153 of 271)
=========================================

Deriving specifications
-----------------------

Section `alloc_rootserver_obj` consists of 16 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `alloc_rootserver_obj`:

    0x84000e22     0x0    addi sp,sp,-16
    0x84000e24     0x2    sd ra,8(sp)           ; stack access
    0x84000e26     0x4    sd s0,0(sp)           ; stack access
    0x84000e28     0x6    auipc a5,0x0
    0x84000e2c     0xa    addi a5,a5,1792 # ffffffff84001528 <ndks_boot>
    0x84000e30     0xe    ld s0,680(a5)
    0x84000e34    0x12    sll a1,a1,a0
    0x84000e38    0x16    add a4,a1,s0
    0x84000e3c    0x1a    sd a4,680(a5)
    0x84000e40    0x1e    mv a0,s0
    0x84000e42    0x20    jal ra,ffffffff84015b22 <memzero>
    0x84000e46    0x24    mv a0,s0
    0x84000e48    0x26    ld ra,8(sp)           ; stack access
    0x84000e4a    0x28    ld s0,0(sp)           ; stack access
    0x84000e4c    0x2a    addi sp,sp,16
    0x84000e4e    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `alloc_rootserver_obj` has 24 nodes.

Section create_idle_thread (154 of 271)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_idle_thread`:

    0x84000cfe     0x0    addi sp,sp,-16
    0x84000d00     0x2    sd ra,8(sp)           ; stack access
    0x84000d02     0x4    auipc a0,0x17
    0x84000d06     0x8    addi a0,a0,-770 # ffffffff84017a00 <ksIdleThreadTCB+0x200>
    0x84000d0a     0xc    auipc a5,0x2a
    0x84000d0e    0x10    sd a0,-1242(a5) # ffffffff8402a830 <ksIdleThread>
    0x84000d12    0x14    jal ra,ffffffff84000cd0 <configureIdleThread>
    0x84000d16    0x18    li a0,1
    0x84000d18    0x1a    ld ra,8(sp)           ; stack access
    0x84000d1a    0x1c    addi sp,sp,16
    0x84000d1c    0x1e    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 16 nodes.

Section configureIdleThread (155 of 271)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `configureIdleThread`:

    0x84000cd0     0x0    addi sp,sp,-16
    0x84000cd2     0x2    sd ra,8(sp)           ; stack access
    0x84000cd4     0x4    auipc a4,0xf
    0x84000cd8     0x8    addi a4,a4,1158 # ffffffff8401015a <idle_thread>
    0x84000cdc     0xc    sd a4,272(a0)
    0x84000ce0    0x10    li a4,288
    0x84000ce4    0x14    sd a4,256(a0)
    0x84000ce8    0x18    auipc a4,0x2a
    0x84000cec    0x1c    addi a4,a4,-1256 # ffffffff8402a800 <tlbLockCount>
    0x84000cf0    0x20    sd a4,8(a0)
    0x84000cf2    0x22    li a1,7
    0x84000cf4    0x24    jal ra,ffffffff840124f6 <setThreadState>
    0x84000cf8    0x28    ld ra,8(sp)           ; stack access
    0x84000cfa    0x2a    addi sp,sp,16
    0x84000cfc    0x2c    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 22 nodes.

Section create_kernel_untypeds (156 of 271)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 38 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x84000b26     0x0    addi sp,sp,-80
    0x84000b28     0x2    sd ra,72(sp)          ; stack access
    0x84000b2a     0x4    sd s0,64(sp)          ; stack access
    0x84000b2c     0x6    sd s1,56(sp)          ; stack access
    0x84000b2e     0x8    sd s2,48(sp)          ; stack access
    0x84000b30     0xa    sd a0,16(sp)          ; stack access
    0x84000b32     0xc    sd a1,24(sp)          ; stack access
    0x84000b34     0xe    mv a6,a3
    0x84000b36    0x10    mv s1,a4
    0x84000b38    0x12    mv a5,a4
    0x84000b3a    0x14    mv a3,a2
    0x84000b3c    0x16    mv a4,a6
    0x84000b3e    0x18    li a2,0
    0x84000b40    0x1a    jal ra,ffffffff84000974 <create_untypeds_for_region>
    0x84000b44    0x1e    beqz a0,ffffffff84000b78 <create_kernel_untypeds+0x52>
    0x84000b46    0x20    auipc s0,0x1
    0x84000b4a    0x24    addi s0,s0,-1238 # ffffffff84001670 <ndks_boot+0x148>
    0x84000b4e    0x28    auipc s2,0x1
    0x84000b52    0x2c    addi s2,s2,-990 # ffffffff84001770 <ndks_boot+0x248>
    0x84000b56    0x30    ld a3,0(s0)
    0x84000b58    0x32    ld a4,8(s0)
    0x84000b5a    0x34    sd zero,0(s0)
    0x84000b5e    0x38    sd zero,8(s0)
    0x84000b62    0x3c    mv a5,s1
    0x84000b64    0x3e    li a2,0
    0x84000b66    0x40    ld a0,16(sp)          ; stack access
    0x84000b68    0x42    ld a1,24(sp)          ; stack access
    0x84000b6a    0x44    jal ra,ffffffff84000974 <create_untypeds_for_region>
    0x84000b6e    0x48    beqz a0,ffffffff84000b78 <create_kernel_untypeds+0x52>
    0x84000b70    0x4a    addi s0,s0,16
    0x84000b72    0x4c    bne s0,s2,ffffffff84000b56 <create_kernel_untypeds+0x30>
    0x84000b76    0x50    li a0,1
    0x84000b78    0x52    ld ra,72(sp)          ; stack access
    0x84000b7a    0x54    ld s0,64(sp)          ; stack access
    0x84000b7c    0x56    ld s1,56(sp)          ; stack access
    0x84000b7e    0x58    ld s2,48(sp)          ; stack access
    0x84000b80    0x5a    addi sp,sp,80
    0x84000b82    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 63 nodes.

Section create_device_untypeds (157 of 271)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 68 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `create_device_untypeds`:

    0x84000a84     0x0    addi sp,sp,-96
    0x84000a86     0x2    sd ra,88(sp)          ; stack access
    0x84000a88     0x4    sd s0,80(sp)          ; stack access
    0x84000a8a     0x6    sd s1,72(sp)          ; stack access
    0x84000a8c     0x8    sd s2,64(sp)          ; stack access
    0x84000a8e     0xa    sd s3,56(sp)          ; stack access
    0x84000a90     0xc    sd s4,48(sp)          ; stack access
    0x84000a92     0xe    sd s5,40(sp)          ; stack access
    0x84000a94    0x10    sd a0,0(sp)           ; stack access
    0x84000a96    0x12    sd a1,8(sp)           ; stack access
    0x84000a98    0x14    mv s4,a2
    0x84000a9a    0x16    auipc a3,0x1
    0x84000a9e    0x1a    ld a3,-1074(a3) # ffffffff84001668 <ndks_boot+0x140>
    0x84000aa2    0x1e    beqz a3,ffffffff84000b06 <create_device_untypeds+0x82>
    0x84000aa4    0x20    auipc s0,0x1
    0x84000aa8    0x24    addi s0,s0,-1404 # ffffffff84001528 <ndks_boot>
    0x84000aac    0x28    li s1,0
    0x84000aae    0x2a    li a3,0
    0x84000ab0    0x2c    li s5,-1
    0x84000ab2    0x2e    slli s5,s5,0x26
    0x84000ab4    0x30    mv s3,s0
    0x84000ab6    0x32    j ffffffff84000ac8 <create_device_untypeds+0x44>
    0x84000ab8    0x34    ld a3,8(s2)
    0x84000abc    0x38    addi s1,s1,1
    0x84000abe    0x3a    addi s0,s0,16
    0x84000ac0    0x3c    ld a4,320(s3)
    0x84000ac4    0x40    bgeu s1,a4,ffffffff84000ae8 <create_device_untypeds+0x64>
    0x84000ac8    0x44    mv s2,s0
    0x84000aca    0x46    ld a4,0(s0)
    0x84000acc    0x48    bgeu a3,a4,ffffffff84000ab8 <create_device_untypeds+0x34>
    0x84000ad0    0x4c    add a3,a3,s5
    0x84000ad2    0x4e    sd a3,16(sp)          ; stack access
    0x84000ad4    0x50    add a4,a4,s5
    0x84000ad6    0x52    sd a4,24(sp)          ; stack access
    0x84000ad8    0x54    mv a5,s4
    0x84000ada    0x56    li a2,1
    0x84000adc    0x58    ld a0,0(sp)           ; stack access
    0x84000ade    0x5a    ld a1,8(sp)           ; stack access
    0x84000ae0    0x5c    jal ra,ffffffff84000974 <create_untypeds_for_region>
    0x84000ae4    0x60    bnez a0,ffffffff84000ab8 <create_device_untypeds+0x34>
    0x84000ae6    0x62    j ffffffff84000af4 <create_device_untypeds+0x70>
    0x84000ae8    0x64    lui a5,0xfc000
    0x84000aec    0x68    srli a5,a5,0x19
    0x84000aee    0x6a    li a0,1
    0x84000af0    0x6c    bgeu a5,a3,ffffffff84000b06 <create_device_untypeds+0x82>
    0x84000af4    0x70    ld ra,88(sp)          ; stack access
    0x84000af6    0x72    ld s0,80(sp)          ; stack access
    0x84000af8    0x74    ld s1,72(sp)          ; stack access
    0x84000afa    0x76    ld s2,64(sp)          ; stack access
    0x84000afc    0x78    ld s3,56(sp)          ; stack access
    0x84000afe    0x7a    ld s4,48(sp)          ; stack access
    0x84000b00    0x7c    ld s5,40(sp)          ; stack access
    0x84000b02    0x7e    addi sp,sp,96
    0x84000b04    0x80    ret
    0x84000b06    0x82    li a4,-1
    0x84000b08    0x84    slli a5,a4,0x26
    0x84000b0c    0x88    add a3,a3,a5
    0x84000b0e    0x8a    sd a3,16(sp)          ; stack access
    0x84000b10    0x8c    srli a4,a4,0x1a
    0x84000b12    0x8e    sd a4,24(sp)          ; stack access
    0x84000b14    0x90    mv a5,s4
    0x84000b16    0x92    li a2,1
    0x84000b18    0x94    ld a0,0(sp)           ; stack access
    0x84000b1a    0x96    ld a1,8(sp)           ; stack access
    0x84000b1c    0x98    jal ra,ffffffff84000974 <create_untypeds_for_region>
    0x84000b20    0x9c    beqz a0,ffffffff84000af4 <create_device_untypeds+0x70>
    0x84000b22    0x9e    li a0,1
    0x84000b24    0xa0    j ffffffff84000af4 <create_device_untypeds+0x70>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 111 nodes.

Section create_it_asid_pool (158 of 271)
========================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 39 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x840008f8     0x0    addi sp,sp,-80
    0x840008fa     0x2    sd ra,72(sp)          ; stack access
    0x840008fc     0x4    sd s0,64(sp)          ; stack access
    0x840008fe     0x6    sd s1,56(sp)          ; stack access
    0x84000900     0x8    sd s2,48(sp)          ; stack access
    0x84000902     0xa    sd s3,40(sp)          ; stack access
    0x84000904     0xc    mv s2,a0
    0x84000906     0xe    mv s1,a1
    0x84000908    0x10    auipc s0,0x1
    0x8400090c    0x14    ld s0,-368(s0) # ffffffff84001798 <rootserver+0x10>
    0x84000910    0x18    slli s0,s0,0x19
    0x84000912    0x1a    srli s0,s0,0x1b
    0x84000914    0x1c    li a5,13
    0x84000916    0x1e    slli a5,a5,0x3b
    0x84000918    0x20    or s0,s0,a5
    0x8400091a    0x22    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x8400091e    0x26    sd s0,192(a0)
    0x84000920    0x28    sd zero,200(a0)
    0x84000924    0x2c    sd zero,208(a0)
    0x84000928    0x30    li s3,3
    0x8400092a    0x32    sd s3,216(a0)
    0x8400092e    0x36    mv a0,s2
    0x84000930    0x38    mv a1,s1
    0x84000932    0x3a    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000936    0x3e    li a5,11
    0x84000938    0x40    slli a5,a5,0x3b
    0x8400093a    0x42    sd a5,160(a0)
    0x8400093c    0x44    sd zero,168(a0)
    0x84000940    0x48    sd zero,176(a0)
    0x84000944    0x4c    sd s3,184(a0)
    0x84000948    0x50    mv a0,s0
    0x8400094a    0x52    li a1,0
    0x8400094c    0x54    ld ra,72(sp)          ; stack access
    0x8400094e    0x56    ld s0,64(sp)          ; stack access
    0x84000950    0x58    ld s1,56(sp)          ; stack access
    0x84000952    0x5a    ld s2,48(sp)          ; stack access
    0x84000954    0x5c    ld s3,40(sp)          ; stack access
    0x84000956    0x5e    addi sp,sp,80
    0x84000958    0x60    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 61 nodes.

Section provide_cap (159 of 271)
================================

Deriving specifications
-----------------------

Section `provide_cap` consists of 34 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `provide_cap`:

    0x84000688     0x0    addi sp,sp,-48
    0x8400068a     0x2    sd ra,40(sp)          ; stack access
    0x8400068c     0x4    sd s0,32(sp)          ; stack access
    0x8400068e     0x6    sd a0,16(sp)          ; stack access
    0x84000690     0x8    sd a1,24(sp)          ; stack access
    0x84000692     0xa    sd a2,0(sp)           ; stack access
    0x84000694     0xc    sd a3,8(sp)           ; stack access
    0x84000696     0xe    auipc a5,0x1
    0x8400069a    0x12    addi a5,a5,-366 # ffffffff84001528 <ndks_boot>
    0x8400069e    0x16    ld s0,592(a5)
    0x840006a2    0x1a    ld a5,600(a5)
    0x840006a6    0x1e    bltu s0,a5,ffffffff840006b4 <provide_cap+0x2c>
    0x840006aa    0x22    li a0,0
    0x840006ac    0x24    ld ra,40(sp)          ; stack access
    0x840006ae    0x26    ld s0,32(sp)          ; stack access
    0x840006b0    0x28    addi sp,sp,48
    0x840006b2    0x2a    ret
    0x840006b4    0x2c    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x840006b8    0x30    slli s0,s0,0x5
    0x840006ba    0x32    add s0,s0,a0
    0x840006bc    0x34    ld a5,0(sp)           ; stack access
    0x840006be    0x36    sd a5,0(s0)
    0x840006c0    0x38    ld a5,8(sp)           ; stack access
    0x840006c2    0x3a    sd a5,8(s0)
    0x840006c4    0x3c    sd zero,16(s0)
    0x840006c8    0x40    li a5,3
    0x840006ca    0x42    sd a5,24(s0)
    0x840006cc    0x44    auipc a4,0x1
    0x840006d0    0x48    addi a4,a4,-420 # ffffffff84001528 <ndks_boot>
    0x840006d4    0x4c    ld a5,592(a4)
    0x840006d8    0x50    addi a5,a5,1
    0x840006da    0x52    sd a5,592(a4)
    0x840006de    0x56    li a0,1
    0x840006e0    0x58    j ffffffff840006ac <provide_cap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 56 nodes.

Section calculate_extra_bi_size_bits (160 of 271)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x8400064e     0x0    addi sp,sp,-16
    0x84000650     0x2    sd ra,8(sp)           ; stack access
    0x84000652     0x4    sd s0,0(sp)           ; stack access
    0x84000654     0x6    mv s0,a0
    0x84000656     0x8    beqz a0,ffffffff84000680 <calculate_extra_bi_size_bits+0x32>
    0x84000658     0xa    addi a0,a0,-1
    0x8400065a     0xc    srli a0,a0,0xc
    0x8400065c     0xe    addi a0,a0,1
    0x8400065e    0x10    slli a0,a0,0xc
    0x84000660    0x12    jal ra,ffffffff840100cc <clzl>
    0x84000664    0x16    mv a4,a0
    0x84000666    0x18    li a5,63
    0x8400066a    0x1c    sub a0,a5,a0
    0x8400066e    0x20    li a5,1
    0x84000670    0x22    sll a5,a5,a0
    0x84000674    0x26    bgeu a5,s0,ffffffff84000680 <calculate_extra_bi_size_bits+0x32>
    0x84000678    0x2a    li a5,64
    0x8400067c    0x2e    sub a0,a5,a4
    0x84000680    0x32    ld ra,8(sp)           ; stack access
    0x84000682    0x34    ld s0,0(sp)           ; stack access
    0x84000684    0x36    addi sp,sp,16
    0x84000686    0x38    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 32 nodes.

Section create_domain_cap (161 of 271)
======================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 13 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_domain_cap`:

    0x840005de     0x0    addi sp,sp,-32
    0x840005e0     0x2    sd ra,24(sp)          ; stack access
    0x840005e2     0x4    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x840005e6     0x8    li a5,-3
    0x840005e8     0xa    slli a5,a5,0x3d
    0x840005ea     0xc    sd a5,352(a0)
    0x840005ee    0x10    sd zero,360(a0)
    0x840005f2    0x14    sd zero,368(a0)
    0x840005f6    0x18    li a5,3
    0x840005f8    0x1a    sd a5,376(a0)
    0x840005fc    0x1e    ld ra,24(sp)          ; stack access
    0x840005fe    0x20    addi sp,sp,32
    0x84000600    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 21 nodes.

Section insert_region (162 of 271)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 39 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `insert_region`:

    0x84000532     0x0    addi sp,sp,-48
    0x84000534     0x2    sd ra,40(sp)          ; stack access
    0x84000536     0x4    sd s0,32(sp)          ; stack access
    0x84000538     0x6    sd a0,0(sp)           ; stack access
    0x8400053a     0x8    sd a1,8(sp)           ; stack access
    0x8400053c     0xa    beq a1,a0,ffffffff8400058c <insert_region+0x5a>
    0x84000540     0xe    auipc a5,0x1
    0x84000544    0x12    addi a5,a5,304 # ffffffff84001670 <ndks_boot+0x148>
    0x84000548    0x16    li s0,0
    0x8400054a    0x18    li a2,16
    0x8400054c    0x1a    ld a3,0(a5)
    0x8400054e    0x1c    ld a4,8(a5)
    0x84000550    0x1e    beq a3,a4,ffffffff84000566 <insert_region+0x34>
    0x84000554    0x22    addi s0,s0,1
    0x84000556    0x24    addi a5,a5,16
    0x84000558    0x26    bne s0,a2,ffffffff8400054c <insert_region+0x1a>
    0x8400055c    0x2a    li a0,0
    0x8400055e    0x2c    ld ra,40(sp)          ; stack access
    0x84000560    0x2e    ld s0,32(sp)          ; stack access
    0x84000562    0x30    addi sp,sp,48
    0x84000564    0x32    ret
    0x84000566    0x34    li a5,1
    0x84000568    0x36    slli a5,a5,0x26
    0x8400056a    0x38    add a0,a0,a5
    0x8400056c    0x3a    add a1,a1,a5
    0x8400056e    0x3c    jal ra,ffffffff84000366 <reserve_region>
    0x84000572    0x40    addi s0,s0,20
    0x84000574    0x42    slli s0,s0,0x4
    0x84000576    0x44    auipc a5,0x1
    0x8400057a    0x48    addi a5,a5,-78 # ffffffff84001528 <ndks_boot>
    0x8400057e    0x4c    add s0,s0,a5
    0x84000580    0x4e    ld a5,0(sp)           ; stack access
    0x84000582    0x50    sd a5,8(s0)
    0x84000584    0x52    ld a5,8(sp)           ; stack access
    0x84000586    0x54    sd a5,16(s0)
    0x84000588    0x56    li a0,1
    0x8400058a    0x58    j ffffffff8400055e <insert_region+0x2c>
    0x8400058c    0x5a    li a0,1
    0x8400058e    0x5c    j ffffffff8400055e <insert_region+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 59 nodes.

Section reserve_region (163 of 271)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 78 instructions.

RVC_TFFFFT___FFT__TF.
RVC_TFFTFFT__FT___TF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `reserve_region`:

    0x84000366     0x0    beq a0,a1,ffffffff8400044c <reserve_region+0xe6>
    0x8400036a     0x4    addi sp,sp,-32
    0x8400036c     0x6    sd ra,24(sp)          ; stack access
    0x8400036e     0x8    mv a7,a0
    0x84000370     0xa    auipc a6,0x1
    0x84000374     0xe    ld a6,760(a6) # ffffffff84001668 <ndks_boot+0x140>
    0x84000378    0x12    beqz a6,ffffffff840003a8 <reserve_region+0x42>
    0x8400037c    0x16    auipc t1,0x1
    0x84000380    0x1a    addi t1,t1,428 # ffffffff84001528 <ndks_boot>
    0x84000384    0x1e    mv a5,t1
    0x84000386    0x20    li a4,0
    0x84000388    0x22    ld a3,0(a5)
    0x8400038a    0x24    beq a3,a1,ffffffff840003c6 <reserve_region+0x60>
    0x8400038e    0x28    ld a2,8(a5)
    0x84000390    0x2a    beq a2,a7,ffffffff840003e2 <reserve_region+0x7c>
    0x84000394    0x2e    bltu a1,a3,ffffffff840003f8 <reserve_region+0x92>
    0x84000398    0x32    addi a4,a4,1
    0x8400039a    0x34    addi a5,a5,16
    0x8400039c    0x36    bne a4,a6,ffffffff84000388 <reserve_region+0x22>
    0x840003a0    0x3a    li a5,19
    0x840003a2    0x3c    li a0,0
    0x840003a4    0x3e    beq a6,a5,ffffffff840003dc <reserve_region+0x76>
    0x840003a8    0x42    auipc a4,0x1
    0x840003ac    0x46    addi a4,a4,384 # ffffffff84001528 <ndks_boot>
    0x840003b0    0x4a    slli a5,a6,0x4
    0x840003b4    0x4e    add a5,a5,a4
    0x840003b6    0x50    sd a7,0(a5) # ffffffffcc000000 <ki_end+0x47fd1000>
    0x840003ba    0x54    sd a1,8(a5)
    0x840003bc    0x56    addi a6,a6,1
    0x840003be    0x58    sd a6,320(a4)
    0x840003c2    0x5c    li a0,1
    0x840003c4    0x5e    j ffffffff840003dc <reserve_region+0x76>
    0x840003c6    0x60    slli a4,a4,0x4
    0x840003c8    0x62    auipc a5,0x1
    0x840003cc    0x66    addi a5,a5,352 # ffffffff84001528 <ndks_boot>
    0x840003d0    0x6a    add a4,a4,a5
    0x840003d2    0x6c    sd a7,0(a4)
    0x840003d6    0x70    jal ra,ffffffff84000026 <merge_regions>
    0x840003da    0x74    li a0,1
    0x840003dc    0x76    ld ra,24(sp)          ; stack access
    0x840003de    0x78    addi sp,sp,32
    0x840003e0    0x7a    ret
    0x840003e2    0x7c    slli a4,a4,0x4
    0x840003e4    0x7e    auipc a5,0x1
    0x840003e8    0x82    addi a5,a5,324 # ffffffff84001528 <ndks_boot>
    0x840003ec    0x86    add a4,a4,a5
    0x840003ee    0x88    sd a1,8(a4)
    0x840003f0    0x8a    jal ra,ffffffff84000026 <merge_regions>
    0x840003f4    0x8e    li a0,1
    0x840003f6    0x90    j ffffffff840003dc <reserve_region+0x76>
    0x840003f8    0x92    addi a3,a6,1
    0x840003fc    0x96    li a5,19
    0x840003fe    0x98    li a0,0
    0x84000400    0x9a    bltu a5,a3,ffffffff840003dc <reserve_region+0x76>
    0x84000404    0x9e    bgeu a4,a6,ffffffff84000430 <reserve_region+0xca>
    0x84000408    0xa2    slli a6,a6,0x4
    0x8400040a    0xa4    auipc a5,0x1
    0x8400040e    0xa8    addi a5,a5,286 # ffffffff84001528 <ndks_boot>
    0x84000412    0xac    add a6,a6,a5
    0x84000414    0xae    slli a5,a4,0x4
    0x84000418    0xb2    add t1,t1,a5
    0x8400041a    0xb4    ld a5,-16(a6)
    0x8400041e    0xb8    sd a5,0(a6)
    0x84000422    0xbc    ld a5,-8(a6)
    0x84000426    0xc0    sd a5,8(a6)
    0x8400042a    0xc4    addi a6,a6,-16
    0x8400042c    0xc6    bne a6,t1,ffffffff8400041a <reserve_region+0xb4>
    0x84000430    0xca    auipc a2,0x1
    0x84000434    0xce    addi a2,a2,248 # ffffffff84001528 <ndks_boot>
    0x84000438    0xd2    slli a5,a4,0x4
    0x8400043c    0xd6    add a5,a5,a2
    0x8400043e    0xd8    sd a7,0(a5)
    0x84000442    0xdc    sd a1,8(a5)
    0x84000444    0xde    sd a3,320(a2)
    0x84000448    0xe2    li a0,1
    0x8400044a    0xe4    j ffffffff840003dc <reserve_region+0x76>
    0x8400044c    0xe6    li a0,1
    0x8400044e    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 119 nodes.

Section create_mapped_it_frame_cap (164 of 271)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x84000268     0x0    addi sp,sp,-80
    0x8400026a     0x2    sd ra,72(sp)          ; stack access
    0x8400026c     0x4    sd s0,64(sp)          ; stack access
    0x8400026e     0x6    sd s1,56(sp)          ; stack access
    0x84000270     0x8    snez s0,a5
    0x84000274     0xc    slli s0,s0,0x39
    0x84000276     0xe    slli a3,a3,0x19
    0x84000278    0x10    srli a3,a3,0x19
    0x8400027a    0x12    or s0,s0,a3
    0x8400027c    0x14    li a5,19
    0x8400027e    0x16    slli a5,a5,0x37
    0x84000280    0x18    or s0,s0,a5
    0x84000282    0x1a    slli a2,a2,0x9
    0x84000284    0x1c    lui s1,0xfe000
    0x84000288    0x20    srli s1,s1,0x10
    0x8400028a    0x22    and s1,s1,a2
    0x8400028c    0x24    slli a4,a4,0x30
    0x8400028e    0x26    or s1,s1,a4
    0x84000290    0x28    mv a2,s0
    0x84000292    0x2a    mv a3,s1
    0x84000294    0x2c    jal ra,ffffffff840001fa <map_it_frame_cap>
    0x84000298    0x30    mv a0,s0
    0x8400029a    0x32    mv a1,s1
    0x8400029c    0x34    ld ra,72(sp)          ; stack access
    0x8400029e    0x36    ld s0,64(sp)          ; stack access
    0x840002a0    0x38    ld s1,56(sp)          ; stack access
    0x840002a2    0x3a    addi sp,sp,80
    0x840002a4    0x3c    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section write_it_asid_pool (165 of 271)
=======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 21 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x8400015e     0x0    addi sp,sp,-64
    0x84000160     0x2    sd ra,56(sp)          ; stack access
    0x84000162     0x4    sd s0,48(sp)          ; stack access
    0x84000164     0x6    sd s1,40(sp)          ; stack access
    0x84000166     0x8    sd s2,32(sp)          ; stack access
    0x84000168     0xa    mv s2,a2
    0x8400016a     0xc    mv s1,a3
    0x8400016c     0xe    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000170    0x12    mv s0,a0
    0x84000172    0x14    mv a0,s2
    0x84000174    0x16    mv a1,s1
    0x84000176    0x18    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x8400017a    0x1c    sd a0,8(s0)
    0x8400017c    0x1e    auipc a5,0x18
    0x84000180    0x22    sd s0,-380(a5) # ffffffff84018000 <riscvKSASIDTable>
    0x84000184    0x26    ld ra,56(sp)          ; stack access
    0x84000186    0x28    ld s0,48(sp)          ; stack access
    0x84000188    0x2a    ld s1,40(sp)          ; stack access
    0x8400018a    0x2c    ld s2,32(sp)          ; stack access
    0x8400018c    0x2e    addi sp,sp,64
    0x8400018e    0x30    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 34 nodes.

Section map_kernel_frame (166 of 271)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `map_kernel_frame`:

    0x840000c4     0x0    addi sp,sp,-16
    0x840000c6     0x2    sd ra,8(sp)           ; stack access
    0x840000c8     0x4    sd s0,0(sp)           ; stack access
    0x840000ca     0x6    srli a1,a1,0x1e
    0x840000cc     0x8    andi a1,a1,511
    0x840000d0     0xc    slli a1,a1,0x3
    0x840000d2     0xe    auipc s0,0x2d
    0x840000d6    0x12    addi s0,s0,-210 # ffffffff8402d000 <kernel_root_pageTable>
    0x840000da    0x16    add s0,s0,a1
    0x840000dc    0x18    li a1,1
    0x840000de    0x1a    lui a5,0xc0000
    0x840000e2    0x1e    and a0,a0,a5
    0x840000e4    0x20    jal ra,ffffffff84010160 <pte_next>
    0x840000e8    0x24    sd a0,0(s0)
    0x840000ea    0x26    ld ra,8(sp)           ; stack access
    0x840000ec    0x28    ld s0,0(sp)           ; stack access
    0x840000ee    0x2a    addi sp,sp,16
    0x840000f0    0x2c    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 25 nodes.

Section _start (167 of 271)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0x18
    0x84000008     0x8    addi gp,gp,-796 # ffffffff84017ce8 <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x2a
    0x84000010    0x10    addi sp,sp,2036 # ffffffff8402a800 <tlbLockCount>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff840012c6 <init_kernel>
    0x8400001c    0x1c    auipc ra,0x10
    0x84000020    0x20    addi ra,ra,928 # ffffffff840103bc <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section fastpath_reply_recv (168 of 271)
========================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 252 instructions.

Skipping 180b1073 csrw satp,s6

Skipping 12000073 sfence.vma

RVC_FTTTFT________FT.
RVC_TFFFFFT__T____TF.
Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

12 stack accesses found. Annotated code for `fastpath_reply_recv`:

    0x84016ff8      0x0    addi sp,sp,-96
    0x84016ffa      0x2    sd ra,88(sp)          ; stack access
    0x84016ffc      0x4    sd s0,80(sp)          ; stack access
    0x84016ffe      0x6    sd s1,72(sp)          ; stack access
    0x84017000      0x8    sd s2,64(sp)          ; stack access
    0x84017002      0xa    sd s3,56(sp)          ; stack access
    0x84017004      0xc    sd s4,48(sp)          ; stack access
    0x84017006      0xe    sd s5,40(sp)          ; stack access
    0x84017008     0x10    sd s6,32(sp)          ; stack access
    0x8401700a     0x12    sd s7,24(sp)          ; stack access
    0x8401700c     0x14    sd s8,16(sp)          ; stack access
    0x8401700e     0x16    sd s9,8(sp)           ; stack access
    0x84017010     0x18    sd s10,0(sp)          ; stack access
    0x84017012     0x1a    auipc s2,0x14
    0x84017016     0x1e    ld s2,-2010(s2) # ffffffff8402a838 <ksCurThread>
    0x8401701a     0x22    ld a4,312(s2)
    0x8401701e     0x26    andi a3,a1,511
    0x84017022     0x2a    li a5,4
    0x84017024     0x2c    bltu a5,a3,ffffffff8401714a <fastpath_reply_recv+0x152>
    0x84017028     0x30    mv s1,a1
    0x8401702a     0x32    andi a4,a4,15
    0x8401702c     0x34    bnez a4,ffffffff8401714a <fastpath_reply_recv+0x152>
    0x84017030     0x38    andi s3,s2,-1024
    0x84017034     0x3c    ld s0,0(s3)
    0x84017038     0x40    ld a6,8(s3)
    0x8401703c     0x44    srli a3,s0,0x3b
    0x84017040     0x48    li a5,10
    0x84017042     0x4a    bne a3,a5,ffffffff8401715a <fastpath_reply_recv+0x162>
    0x84017046     0x4e    li t3,64
    0x8401704a     0x52    lui a5,0xfc000
    0x8401704e     0x56    srli t4,a5,0x19
    0x84017052     0x5a    li a5,1
    0x84017054     0x5c    slli t1,a5,0x26
    0x84017058     0x60    li a5,-1
    0x8401705a     0x62    slli a7,a5,0x27
    0x8401705e     0x66    li t5,63
    0x84017062     0x6a    li t6,10
    0x84017064     0x6c    srli a3,s0,0x35
    0x84017068     0x70    andi a3,a3,63
    0x8401706c     0x74    srli a2,s0,0x2f
    0x84017070     0x78    andi a2,a2,63
    0x84017074     0x7c    sll a5,a0,a4
    0x84017078     0x80    beqz a3,ffffffff84017086 <fastpath_reply_recv+0x8e>
    0x8401707a     0x82    subw a1,t3,a3
    0x8401707e     0x86    srl a1,a5,a1
    0x84017082     0x8a    bne a6,a1,ffffffff8401715a <fastpath_reply_recv+0x162>
    0x84017086     0x8e    sll a5,a5,a3
    0x8401708a     0x92    subw a1,t3,a2
    0x8401708e     0x96    srl a5,a5,a1
    0x84017092     0x9a    slli a5,a5,0x5
    0x84017094     0x9c    slli s0,s0,0x1
    0x84017096     0x9e    and a1,s0,t4
    0x8401709a     0xa2    and s0,s0,t1
    0x8401709e     0xa6    beqz s0,ffffffff840170a4 <fastpath_reply_recv+0xac>
    0x840170a0     0xa8    or a1,a1,a7
    0x840170a4     0xac    add a5,a5,a1
    0x840170a6     0xae    ld s0,0(a5)
    0x840170a8     0xb0    ld a6,8(a5) # fffffffffc000008 <ki_end+0x77fd1008>
    0x840170ac     0xb4    add a3,a3,a2
    0x840170ae     0xb6    add a4,a4,a3
    0x840170b0     0xb8    bgeu t5,a4,ffffffff84017150 <fastpath_reply_recv+0x158>
    0x840170b4     0xbc    li a5,64
    0x840170b8     0xc0    bltu a5,a4,ffffffff8401715a <fastpath_reply_recv+0x162>
    0x840170bc     0xc4    srli a5,s0,0x3b
    0x840170c0     0xc8    li a4,4
    0x840170c2     0xca    bne a5,a4,ffffffff8401715a <fastpath_reply_recv+0x162>
    0x840170c6     0xce    srli a5,s0,0x38
    0x840170ca     0xd2    andi a5,a5,1
    0x840170cc     0xd4    beqz a5,ffffffff8401715a <fastpath_reply_recv+0x162>
    0x840170ce     0xd6    ld a5,304(s2)
    0x840170d2     0xda    bnez a5,ffffffff84017160 <fastpath_reply_recv+0x168>
    0x840170d4     0xdc    slli s9,s0,0x19
    0x840170d8     0xe0    srli s9,s9,0x19
    0x840170dc     0xe4    srli a5,s0,0x26
    0x840170e0     0xe8    andi a5,a5,1
    0x840170e2     0xea    beqz a5,ffffffff840170ec <fastpath_reply_recv+0xf4>
    0x840170e4     0xec    li a5,-1
    0x840170e6     0xee    slli a5,a5,0x27
    0x840170e8     0xf0    or s9,s9,a5
    0x840170ec     0xf4    mv s8,s9
    0x840170ee     0xf6    ld a5,0(s9)
    0x840170f2     0xfa    andi a5,a5,3
    0x840170f4     0xfc    li a4,1
    0x840170f6     0xfe    beq a5,a4,ffffffff84017170 <fastpath_reply_recv+0x178>
    0x840170fa    0x102    addi s7,s3,96
    0x840170fe    0x106    ld s5,8(s7)
    0x84017102    0x10a    ld a5,96(s3)
    0x84017106    0x10e    srli a5,a5,0x3b
    0x84017108    0x110    li a4,8
    0x8401710a    0x112    bne a5,a4,ffffffff84017176 <fastpath_reply_recv+0x17e>
    0x8401710e    0x116    ld a5,312(s5)
    0x84017112    0x11a    andi a5,a5,15
    0x84017114    0x11c    bnez a5,ffffffff8401717c <fastpath_reply_recv+0x184>
    0x84017116    0x11e    andi a5,s5,-1024
    0x8401711a    0x122    ld a4,32(a5)
    0x8401711c    0x124    ld s6,40(a5)
    0x84017120    0x128    srli a5,s6,0x9
    0x84017124    0x12c    slli s4,a5,0x19
    0x84017128    0x130    srli s4,s4,0x19
    0x8401712c    0x134    srli a5,a5,0x26
    0x8401712e    0x136    andi a5,a5,1
    0x84017130    0x138    beqz a5,ffffffff8401713a <fastpath_reply_recv+0x142>
    0x84017132    0x13a    li a5,-1
    0x84017134    0x13c    slli a5,a5,0x27
    0x84017136    0x13e    or s4,s4,a5
    0x8401713a    0x142    srli a5,a4,0x3b
    0x8401713e    0x146    li a3,3
    0x84017140    0x148    beq a5,a3,ffffffff84017182 <fastpath_reply_recv+0x18a>
    0x84017144    0x14c    li a0,-2
    0x84017146    0x14e    jal ra,ffffffff84016d10 <slowpath>
    0x8401714a    0x152    li a0,-2
    0x8401714c    0x154    jal ra,ffffffff84016d10 <slowpath>
    0x84017150    0x158    srli a5,s0,0x3b
    0x84017154    0x15c    bne a5,t6,ffffffff840170bc <fastpath_reply_recv+0xc4>
    0x84017158    0x160    j ffffffff84017064 <fastpath_reply_recv+0x6c>
    0x8401715a    0x162    li a0,-2
    0x8401715c    0x164    jal ra,ffffffff84016d10 <slowpath>
    0x84017160    0x168    ld a5,0(a5)
    0x84017162    0x16a    andi a5,a5,3
    0x84017164    0x16c    li a4,2
    0x84017166    0x16e    bne a5,a4,ffffffff840170d4 <fastpath_reply_recv+0xdc>
    0x8401716a    0x172    li a0,-2
    0x8401716c    0x174    jal ra,ffffffff84016d10 <slowpath>
    0x84017170    0x178    li a0,-2
    0x84017172    0x17a    jal ra,ffffffff84016d10 <slowpath>
    0x84017176    0x17e    li a0,-2
    0x84017178    0x180    jal ra,ffffffff84016d10 <slowpath>
    0x8401717c    0x184    li a0,-2
    0x8401717e    0x186    jal ra,ffffffff84016d10 <slowpath>
    0x84017182    0x18a    srli a4,a4,0x27
    0x84017184    0x18c    andi a4,a4,1
    0x84017186    0x18e    beqz a4,ffffffff84017144 <fastpath_reply_recv+0x14c>
    0x84017188    0x190    srli s6,s6,0x30
    0x8401718c    0x194    auipc s10,0x13
    0x84017190    0x198    ld s10,1676(s10) # ffffffff8402a818 <ksCurDomain>
    0x84017194    0x19c    ld a1,360(s5)
    0x84017198    0x1a0    mv a0,s10
    0x8401719a    0x1a2    jal ra,ffffffff8401034c <isHighestPrio>
    0x8401719e    0x1a6    beqz a0,ffffffff840171ee <fastpath_reply_recv+0x1f6>
    0x840171a0    0x1a8    ld a5,344(s5)
    0x840171a4    0x1ac    bne a5,s10,ffffffff840171f4 <fastpath_reply_recv+0x1fc>
    0x840171a8    0x1b0    ori s9,s9,3
    0x840171ac    0x1b4    sd s9,280(s2)
    0x840171b0    0x1b8    srli s0,s0,0x36
    0x840171b2    0x1ba    andi s0,s0,8
    0x840171b4    0x1bc    ld a5,288(s2)
    0x840171b8    0x1c0    andi a5,a5,-9
    0x840171ba    0x1c2    or s0,s0,a5
    0x840171bc    0x1c4    sd s0,288(s2)
    0x840171c0    0x1c8    ld a4,0(s8)
    0x840171c4    0x1cc    lui a5,0xf8000
    0x840171c8    0x1d0    srli a5,a5,0x19
    0x840171ca    0x1d2    and a5,a5,a4
    0x840171cc    0x1d4    srli a4,a4,0x26
    0x840171ce    0x1d6    andi a4,a4,1
    0x840171d0    0x1d8    beqz a4,ffffffff840171fa <fastpath_reply_recv+0x202>
    0x840171d2    0x1da    li a4,-1
    0x840171d4    0x1dc    slli a4,a4,0x27
    0x840171d6    0x1de    or a5,a5,a4
    0x840171d8    0x1e0    sd s2,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x840171dc    0x1e4    sd a5,416(s2)
    0x840171e0    0x1e8    sd zero,408(s2)
    0x840171e4    0x1ec    ori s2,s2,2
    0x840171e8    0x1f0    sd s2,0(s8)
    0x840171ec    0x1f4    j ffffffff84017210 <fastpath_reply_recv+0x218>
    0x840171ee    0x1f6    li a0,-2
    0x840171f0    0x1f8    jal ra,ffffffff84016d10 <slowpath>
    0x840171f4    0x1fc    li a0,-2
    0x840171f6    0x1fe    jal ra,ffffffff84016d10 <slowpath>
    0x840171fa    0x202    bnez a5,ffffffff840171d8 <fastpath_reply_recv+0x1e0>
    0x840171fc    0x204    sd zero,416(s2)
    0x84017200    0x208    sd zero,408(s2)
    0x84017204    0x20c    sd s2,8(s8)
    0x84017208    0x210    ori s2,s2,2
    0x8401720c    0x214    sd s2,0(s8)
    0x84017210    0x218    andi a3,s1,127
    0x84017214    0x21c    ld a5,16(s7)
    0x84017218    0x220    li a4,3
    0x8401721a    0x222    sd a4,24(a5)
    0x8401721c    0x224    sd zero,96(s3)
    0x84017220    0x228    sd zero,8(s7)
    0x84017224    0x22c    sd zero,16(s7)
    0x84017228    0x230    sd zero,24(s7)
    0x8401722c    0x234    auipc a2,0x13
    0x84017230    0x238    ld a2,1548(a2) # ffffffff8402a838 <ksCurThread>
    0x84017234    0x23c    beqz a3,ffffffff8401724c <fastpath_reply_recv+0x254>
    0x84017236    0x23e    mv a5,a2
    0x84017238    0x240    addi a4,s5,88
    0x8401723c    0x244    slli a3,a3,0x3
    0x8401723e    0x246    add a2,a2,a3
    0x84017240    0x248    ld a3,88(a5)
    0x84017242    0x24a    sd a3,0(a4)
    0x84017244    0x24c    addi a5,a5,8
    0x84017246    0x24e    addi a4,a4,8
    0x84017248    0x250    bne a2,a5,ffffffff84017240 <fastpath_reply_recv+0x248>
    0x8401724c    0x254    li a5,1
    0x8401724e    0x256    sd a5,280(s5)
    0x84017252    0x25a    slli a5,a5,0x26
    0x84017254    0x25c    add s4,s4,a5
    0x84017256    0x25e    srli s4,s4,0xc
    0x8401725a    0x262    li a5,-1
    0x8401725c    0x264    srli a4,a5,0x14
    0x84017260    0x268    and s4,s4,a4
    0x84017264    0x26c    slli s6,s6,0x2c
    0x84017266    0x26e    or s6,s4,s6
    0x8401726a    0x272    slli a5,a5,0x3f
    0x8401726c    0x274    or s6,s6,a5
    0x84017270    0x278    csrw satp,s6
    0x84017274    0x27c    sfence.vma
    0x84017278    0x280    auipc a5,0x13
    0x8401727c    0x284    sd s5,1472(a5) # ffffffff8402a838 <ksCurThread>
    0x84017280    0x288    li a0,0
    0x84017282    0x28a    lui a1,0xfffff
    0x84017284    0x28c    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84017288    0x290    and a1,a1,s1
    0x8401728a    0x292    mv t0,s5
    0x8401728c    0x294    ld ra,0(t0)
    0x84017290    0x298    ld sp,8(t0)
    0x84017294    0x29c    ld gp,16(t0)
    0x84017298    0x2a0    ld t2,48(t0)
    0x8401729c    0x2a4    ld s0,56(t0)
    0x840172a0    0x2a8    ld s1,64(t0)
    0x840172a4    0x2ac    ld a2,88(t0)
    0x840172a8    0x2b0    ld a3,96(t0)
    0x840172ac    0x2b4    ld a4,104(t0)
    0x840172b0    0x2b8    ld a5,112(t0)
    0x840172b4    0x2bc    ld a6,120(t0)
    0x840172b8    0x2c0    ld a7,128(t0)
    0x840172bc    0x2c4    ld s2,136(t0)
    0x840172c0    0x2c8    ld s3,144(t0)
    0x840172c4    0x2cc    ld s4,152(t0)
    0x840172c8    0x2d0    ld s5,160(t0)
    0x840172cc    0x2d4    ld s6,168(t0)
    0x840172d0    0x2d8    ld s7,176(t0)
    0x840172d4    0x2dc    ld s8,184(t0)
    0x840172d8    0x2e0    ld s9,192(t0)
    0x840172dc    0x2e4    ld s10,200(t0)
    0x840172e0    0x2e8    ld s11,208(t0)
    0x840172e4    0x2ec    ld t3,216(t0)
    0x840172e8    0x2f0    ld t4,224(t0)
    0x840172ec    0x2f4    ld t5,232(t0)
    0x840172f0    0x2f8    ld t6,240(t0)
    0x840172f4    0x2fc    ld t1,24(t0)
    0x840172f8    0x300    add tp,t1,zero
    0x840172fc    0x304    ld t1,272(t0)
    0x84017300    0x308    csrw sepc,t1
    0x84017304    0x30c    csrw sscratch,t0
    0x84017308    0x310    ld t1,256(t0)
    0x8401730c    0x314    csrw sstatus,t1
    0x84017310    0x318    ld t1,40(t0)
    0x84017314    0x31c    ld t0,32(t0)
    0x84017318    0x320    sret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
252 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 403 nodes.

Section fastpath_call (169 of 271)
==================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 227 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

10 stack accesses found. Annotated code for `fastpath_call`:

    0x84016d28      0x0    addi sp,sp,-80
    0x84016d2a      0x2    sd ra,72(sp)          ; stack access
    0x84016d2c      0x4    sd s0,64(sp)          ; stack access
    0x84016d2e      0x6    sd s1,56(sp)          ; stack access
    0x84016d30      0x8    sd s2,48(sp)          ; stack access
    0x84016d32      0xa    sd s3,40(sp)          ; stack access
    0x84016d34      0xc    sd s4,32(sp)          ; stack access
    0x84016d36      0xe    sd s5,24(sp)          ; stack access
    0x84016d38     0x10    sd s6,16(sp)          ; stack access
    0x84016d3a     0x12    sd s7,8(sp)           ; stack access
    0x84016d3c     0x14    sd s8,0(sp)           ; stack access
    0x84016d3e     0x16    auipc a6,0x14
    0x84016d42     0x1a    ld a6,-1286(a6) # ffffffff8402a838 <ksCurThread>
    0x84016d46     0x1e    ld a4,312(a6)
    0x84016d4a     0x22    andi a3,a1,511
    0x84016d4e     0x26    li a5,4
    0x84016d50     0x28    bltu a5,a3,ffffffff84016e4c <fastpath_call+0x124>
    0x84016d54     0x2c    mv s2,a1
    0x84016d56     0x2e    andi a4,a4,15
    0x84016d58     0x30    bnez a4,ffffffff84016e4c <fastpath_call+0x124>
    0x84016d5a     0x32    andi a5,a6,-1024
    0x84016d5e     0x36    ld s0,0(a5)
    0x84016d60     0x38    ld s3,8(a5)
    0x84016d64     0x3c    srli a3,s0,0x3b
    0x84016d68     0x40    li a5,10
    0x84016d6a     0x42    bne a3,a5,ffffffff84016e5c <fastpath_call+0x134>
    0x84016d6e     0x46    li t4,64
    0x84016d72     0x4a    lui a5,0xfc000
    0x84016d76     0x4e    srli t3,a5,0x19
    0x84016d7a     0x52    li a5,1
    0x84016d7c     0x54    slli t1,a5,0x26
    0x84016d80     0x58    li a5,-1
    0x84016d82     0x5a    slli a7,a5,0x27
    0x84016d86     0x5e    li t5,63
    0x84016d8a     0x62    li t6,10
    0x84016d8c     0x64    srli a3,s0,0x35
    0x84016d90     0x68    andi a3,a3,63
    0x84016d94     0x6c    srli a2,s0,0x2f
    0x84016d98     0x70    andi a2,a2,63
    0x84016d9c     0x74    sll a5,a0,a4
    0x84016da0     0x78    beqz a3,ffffffff84016dae <fastpath_call+0x86>
    0x84016da2     0x7a    subw a1,t4,a3
    0x84016da6     0x7e    srl a1,a5,a1
    0x84016daa     0x82    bne s3,a1,ffffffff84016e5c <fastpath_call+0x134>
    0x84016dae     0x86    sll a5,a5,a3
    0x84016db2     0x8a    subw a1,t4,a2
    0x84016db6     0x8e    srl a5,a5,a1
    0x84016dba     0x92    slli a5,a5,0x5
    0x84016dbc     0x94    slli s0,s0,0x1
    0x84016dbe     0x96    and a1,s0,t3
    0x84016dc2     0x9a    and s0,s0,t1
    0x84016dc6     0x9e    beqz s0,ffffffff84016dcc <fastpath_call+0xa4>
    0x84016dc8     0xa0    or a1,a1,a7
    0x84016dcc     0xa4    add a5,a5,a1
    0x84016dce     0xa6    ld s0,0(a5)
    0x84016dd0     0xa8    ld s3,8(a5) # fffffffffc000008 <ki_end+0x77fd1008>
    0x84016dd4     0xac    add a3,a3,a2
    0x84016dd6     0xae    add a4,a4,a3
    0x84016dd8     0xb0    bgeu t5,a4,ffffffff84016e52 <fastpath_call+0x12a>
    0x84016ddc     0xb4    li a5,64
    0x84016de0     0xb8    bltu a5,a4,ffffffff84016e5c <fastpath_call+0x134>
    0x84016de4     0xbc    srli a5,s0,0x3b
    0x84016de8     0xc0    li a4,4
    0x84016dea     0xc2    bne a5,a4,ffffffff84016e5c <fastpath_call+0x134>
    0x84016dee     0xc6    srli a5,s0,0x37
    0x84016df2     0xca    andi a5,a5,1
    0x84016df4     0xcc    beqz a5,ffffffff84016e5c <fastpath_call+0x134>
    0x84016df6     0xce    slli a5,s0,0x19
    0x84016dfa     0xd2    srli a5,a5,0x19
    0x84016dfc     0xd4    srli a4,s0,0x26
    0x84016e00     0xd8    andi a4,a4,1
    0x84016e02     0xda    beqz a4,ffffffff84016e0a <fastpath_call+0xe2>
    0x84016e04     0xdc    li a4,-1
    0x84016e06     0xde    slli a4,a4,0x27
    0x84016e08     0xe0    or a5,a5,a4
    0x84016e0a     0xe2    mv s6,a5
    0x84016e0c     0xe4    ld s4,8(a5)
    0x84016e10     0xe8    ld a5,0(a5)
    0x84016e12     0xea    andi a5,a5,3
    0x84016e14     0xec    li a4,2
    0x84016e16     0xee    bne a5,a4,ffffffff84016e62 <fastpath_call+0x13a>
    0x84016e1a     0xf2    andi s7,s4,-1024
    0x84016e1e     0xf6    ld a3,32(s7)
    0x84016e22     0xfa    ld s5,40(s7)
    0x84016e26     0xfe    srli a4,s5,0x9
    0x84016e2a    0x102    slli s1,a4,0x19
    0x84016e2e    0x106    srli s1,s1,0x19
    0x84016e30    0x108    srli a4,a4,0x26
    0x84016e32    0x10a    andi a4,a4,1
    0x84016e34    0x10c    beqz a4,ffffffff84016e3c <fastpath_call+0x114>
    0x84016e36    0x10e    li a4,-1
    0x84016e38    0x110    slli a4,a4,0x27
    0x84016e3a    0x112    or s1,s1,a4
    0x84016e3c    0x114    srli a4,a3,0x3b
    0x84016e40    0x118    li a5,3
    0x84016e42    0x11a    beq a4,a5,ffffffff84016e68 <fastpath_call+0x140>
    0x84016e46    0x11e    li a0,-1
    0x84016e48    0x120    jal ra,ffffffff84016d10 <slowpath>
    0x84016e4c    0x124    li a0,-1
    0x84016e4e    0x126    jal ra,ffffffff84016d10 <slowpath>
    0x84016e52    0x12a    srli a5,s0,0x3b
    0x84016e56    0x12e    bne a5,t6,ffffffff84016de4 <fastpath_call+0xbc>
    0x84016e5a    0x132    j ffffffff84016d8c <fastpath_call+0x64>
    0x84016e5c    0x134    li a0,-1
    0x84016e5e    0x136    jal ra,ffffffff84016d10 <slowpath>
    0x84016e62    0x13a    li a0,-1
    0x84016e64    0x13c    jal ra,ffffffff84016d10 <slowpath>
    0x84016e68    0x140    srli a3,a3,0x27
    0x84016e6a    0x142    andi a3,a3,1
    0x84016e6c    0x144    beqz a3,ffffffff84016e46 <fastpath_call+0x11e>
    0x84016e6e    0x146    srli s5,s5,0x30
    0x84016e72    0x14a    auipc s8,0x14
    0x84016e76    0x14e    ld s8,-1626(s8) # ffffffff8402a818 <ksCurDomain>
    0x84016e7a    0x152    ld a1,360(s4)
    0x84016e7e    0x156    ld a5,360(a6)
    0x84016e82    0x15a    bltu a1,a5,ffffffff84016fd6 <fastpath_call+0x2ae>
    0x84016e86    0x15e    srli a5,s0,0x39
    0x84016e8a    0x162    srli s0,s0,0x3a
    0x84016e8c    0x164    or s0,s0,a5
    0x84016e8e    0x166    andi s0,s0,1
    0x84016e90    0x168    beqz s0,ffffffff84016fe6 <fastpath_call+0x2be>
    0x84016e94    0x16c    ld a5,344(s4)
    0x84016e98    0x170    bne a5,s8,ffffffff84016fec <fastpath_call+0x2c4>
    0x84016e9c    0x174    ld a5,408(s4)
    0x84016ea0    0x178    sd a5,8(s6)
    0x84016ea4    0x17c    ld a5,408(s4)
    0x84016ea8    0x180    bnez a5,ffffffff84016ff2 <fastpath_call+0x2ca>
    0x84016eac    0x184    sd zero,0(s6)
    0x84016eb0    0x188    andi a1,s2,127
    0x84016eb4    0x18c    auipc a0,0x14
    0x84016eb8    0x190    addi a0,a0,-1660 # ffffffff8402a838 <ksCurThread>
    0x84016ebc    0x194    ld a2,0(a0)
    0x84016ebe    0x196    li a5,5
    0x84016ec0    0x198    sd a5,280(a2)
    0x84016ec4    0x19c    andi a3,a2,-1024
    0x84016ec8    0x1a0    addi a3,a3,64
    0x84016ecc    0x1a4    addi a4,s7,96
    0x84016ed0    0x1a8    ld a5,288(s4)
    0x84016ed4    0x1ac    sd a2,104(s7)
    0x84016ed8    0x1b0    srli a5,a5,0x2
    0x84016eda    0x1b2    andi a5,a5,2
    0x84016edc    0x1b4    li a2,1
    0x84016ede    0x1b6    slli a2,a2,0x3e
    0x84016ee0    0x1b8    or a5,a5,a2
    0x84016ee2    0x1ba    sd a5,96(s7)
    0x84016ee6    0x1be    sd a3,112(s7)
    0x84016eea    0x1c2    ori a4,a4,3
    0x84016eee    0x1c6    sd a4,24(a3)
    0x84016ef0    0x1c8    ld a2,0(a0)
    0x84016ef2    0x1ca    beqz a1,ffffffff84016f0a <fastpath_call+0x1e2>
    0x84016ef4    0x1cc    mv a5,a2
    0x84016ef6    0x1ce    addi a4,s4,88
    0x84016efa    0x1d2    slli a1,a1,0x3
    0x84016efc    0x1d4    add a2,a2,a1
    0x84016efe    0x1d6    ld a3,88(a5)
    0x84016f00    0x1d8    sd a3,0(a4)
    0x84016f02    0x1da    addi a5,a5,8
    0x84016f04    0x1dc    addi a4,a4,8
    0x84016f06    0x1de    bne a5,a2,ffffffff84016efe <fastpath_call+0x1d6>
    0x84016f0a    0x1e2    li a5,1
    0x84016f0c    0x1e4    sd a5,280(s4)
    0x84016f10    0x1e8    slli a5,a5,0x26
    0x84016f12    0x1ea    add a5,a5,s1
    0x84016f14    0x1ec    srli a5,a5,0xc
    0x84016f16    0x1ee    li a4,-1
    0x84016f18    0x1f0    srli s1,a4,0x14
    0x84016f1c    0x1f4    and a5,a5,s1
    0x84016f1e    0x1f6    slli s5,s5,0x2c
    0x84016f20    0x1f8    or a5,a5,s5
    0x84016f24    0x1fc    slli a4,a4,0x3f
    0x84016f26    0x1fe    or a5,a5,a4
    0x84016f28    0x200    csrw satp,a5
    0x84016f2c    0x204    sfence.vma
    0x84016f30    0x208    auipc a5,0x14
    0x84016f34    0x20c    sd s4,-1784(a5) # ffffffff8402a838 <ksCurThread>
    0x84016f38    0x210    mv a0,s3
    0x84016f3a    0x212    lui a1,0xfffff
    0x84016f3c    0x214    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84016f40    0x218    and a1,s2,a1
    0x84016f44    0x21c    mv t0,s4
    0x84016f46    0x21e    ld ra,0(t0) # fffffffffc000000 <ki_end+0x77fd1000>
    0x84016f4a    0x222    ld sp,8(t0)
    0x84016f4e    0x226    ld gp,16(t0)
    0x84016f52    0x22a    ld t2,48(t0)
    0x84016f56    0x22e    ld s0,56(t0)
    0x84016f5a    0x232    ld s1,64(t0)
    0x84016f5e    0x236    ld a2,88(t0)
    0x84016f62    0x23a    ld a3,96(t0)
    0x84016f66    0x23e    ld a4,104(t0)
    0x84016f6a    0x242    ld a5,112(t0)
    0x84016f6e    0x246    ld a6,120(t0)
    0x84016f72    0x24a    ld a7,128(t0)
    0x84016f76    0x24e    ld s2,136(t0)
    0x84016f7a    0x252    ld s3,144(t0)
    0x84016f7e    0x256    ld s4,152(t0)
    0x84016f82    0x25a    ld s5,160(t0)
    0x84016f86    0x25e    ld s6,168(t0)
    0x84016f8a    0x262    ld s7,176(t0)
    0x84016f8e    0x266    ld s8,184(t0)
    0x84016f92    0x26a    ld s9,192(t0)
    0x84016f96    0x26e    ld s10,200(t0)
    0x84016f9a    0x272    ld s11,208(t0)
    0x84016f9e    0x276    ld t3,216(t0)
    0x84016fa2    0x27a    ld t4,224(t0)
    0x84016fa6    0x27e    ld t5,232(t0)
    0x84016faa    0x282    ld t6,240(t0)
    0x84016fae    0x286    ld t1,24(t0)
    0x84016fb2    0x28a    add tp,t1,zero
    0x84016fb6    0x28e    ld t1,272(t0)
    0x84016fba    0x292    csrw sepc,t1
    0x84016fbe    0x296    csrw sscratch,t0
    0x84016fc2    0x29a    ld t1,256(t0)
    0x84016fc6    0x29e    csrw sstatus,t1
    0x84016fca    0x2a2    ld t1,40(t0)
    0x84016fce    0x2a6    ld t0,32(t0)
    0x84016fd2    0x2aa    sret
    0x84016fd6    0x2ae    mv a0,s8
    0x84016fd8    0x2b0    jal ra,ffffffff8401034c <isHighestPrio>
    0x84016fdc    0x2b4    bnez a0,ffffffff84016e86 <fastpath_call+0x15e>
    0x84016fe0    0x2b8    li a0,-1
    0x84016fe2    0x2ba    jal ra,ffffffff84016d10 <slowpath>
    0x84016fe6    0x2be    li a0,-1
    0x84016fe8    0x2c0    jal ra,ffffffff84016d10 <slowpath>
    0x84016fec    0x2c4    li a0,-1
    0x84016fee    0x2c6    jal ra,ffffffff84016d10 <slowpath>
    0x84016ff2    0x2ca    sd zero,416(a5)
    0x84016ff6    0x2ce    j ffffffff84016eb0 <fastpath_call+0x188>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
227 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 359 nodes.

Section performPageTableInvocationUnmap (170 of 271)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 47 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x84015b34     0x0    addi sp,sp,-48
    0x84015b36     0x2    sd ra,40(sp)          ; stack access
    0x84015b38     0x4    sd s0,32(sp)          ; stack access
    0x84015b3a     0x6    sd s1,24(sp)          ; stack access
    0x84015b3c     0x8    sd a1,8(sp)           ; stack access
    0x84015b3e     0xa    mv s0,a2
    0x84015b40     0xc    srli a4,a0,0x27
    0x84015b44    0x10    andi a4,a4,1
    0x84015b46    0x12    beqz a4,ffffffff84015b88 <performPageTableInvocationUnmap+0x54>
    0x84015b48    0x14    mv a5,a0
    0x84015b4a    0x16    mv a3,a1
    0x84015b4c    0x18    srli a4,a1,0x9
    0x84015b50    0x1c    slli a0,a4,0x19
    0x84015b54    0x20    srli a0,a0,0x19
    0x84015b56    0x22    srli a4,a4,0x26
    0x84015b58    0x24    andi a4,a4,1
    0x84015b5a    0x26    beqz a4,ffffffff84015b62 <performPageTableInvocationUnmap+0x2e>
    0x84015b5c    0x28    li a4,-1
    0x84015b5e    0x2a    slli a4,a4,0x27
    0x84015b60    0x2c    or a0,a0,a4
    0x84015b62    0x2e    mv s1,a0
    0x84015b64    0x30    srli a0,a3,0x30
    0x84015b68    0x34    slli a1,a5,0x19
    0x84015b6c    0x38    srli a1,a1,0x19
    0x84015b6e    0x3a    srli a5,a5,0x26
    0x84015b70    0x3c    andi a5,a5,1
    0x84015b72    0x3e    beqz a5,ffffffff84015b7a <performPageTableInvocationUnmap+0x46>
    0x84015b74    0x40    li a5,-1
    0x84015b76    0x42    slli a5,a5,0x27
    0x84015b78    0x44    or a1,a1,a5
    0x84015b7a    0x46    mv a2,s1
    0x84015b7c    0x48    jal ra,ffffffff84010966 <unmapPageTable>
    0x84015b80    0x4c    lui a1,0x1
    0x84015b82    0x4e    mv a0,s1
    0x84015b84    0x50    jal ra,ffffffff84015b22 <memzero>
    0x84015b88    0x54    ld a4,0(s0)
    0x84015b8a    0x56    li a5,-1
    0x84015b8c    0x58    slli a5,a5,0x27
    0x84015b8e    0x5a    addi a5,a5,-1
    0x84015b90    0x5c    and a5,a5,a4
    0x84015b92    0x5e    sd a5,0(s0)
    0x84015b94    0x60    li a0,0
    0x84015b96    0x62    ld ra,40(sp)          ; stack access
    0x84015b98    0x64    ld s0,32(sp)          ; stack access
    0x84015b9a    0x66    ld s1,24(sp)          ; stack access
    0x84015b9c    0x68    addi sp,sp,48
    0x84015b9e    0x6a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 65 nodes.

Section replyFromKernel_error (171 of 271)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x84015a44     0x0    addi sp,sp,-16
    0x84015a46     0x2    sd ra,8(sp)           ; stack access
    0x84015a48     0x4    sd s0,0(sp)           ; stack access
    0x84015a4a     0x6    mv s0,a0
    0x84015a4c     0x8    mv a1,a0
    0x84015a4e     0xa    li a0,1
    0x84015a50     0xc    jal ra,ffffffff840106a2 <lookupIPCBuffer>
    0x84015a54    0x10    mv a1,a0
    0x84015a56    0x12    sd zero,72(s0)
    0x84015a5a    0x16    mv a0,s0
    0x84015a5c    0x18    jal ra,ffffffff840158aa <setMRs_syscall_error>
    0x84015a60    0x1c    auipc a5,0x3
    0x84015a64    0x20    ld a5,-912(a5) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015a68    0x24    slli a5,a5,0xc
    0x84015a6a    0x26    andi a0,a0,127
    0x84015a6e    0x2a    or a5,a5,a0
    0x84015a70    0x2c    sd a5,80(s0)
    0x84015a72    0x2e    ld ra,8(sp)           ; stack access
    0x84015a74    0x30    ld s0,0(sp)           ; stack access
    0x84015a76    0x32    addi sp,sp,16
    0x84015a78    0x34    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 31 nodes.

Section setMRs_syscall_error (172 of 271)
=========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 142 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x840158aa      0x0    addi sp,sp,-48
    0x840158ac      0x2    sd ra,40(sp)          ; stack access
    0x840158ae      0x4    sd s0,32(sp)          ; stack access
    0x840158b0      0x6    sd s1,24(sp)          ; stack access
    0x840158b2      0x8    sd s2,16(sp)          ; stack access
    0x840158b4      0xa    sd s3,8(sp)           ; stack access
    0x840158b6      0xc    sd s4,0(sp)           ; stack access
    0x840158b8      0xe    mv s0,a0
    0x840158ba     0x10    mv s1,a1
    0x840158bc     0x12    auipc a5,0x3
    0x840158c0     0x16    ld a5,-492(a5) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840158c4     0x1a    li a4,4
    0x840158c6     0x1c    beq a5,a4,ffffffff840159ae <setMRs_syscall_error+0x104>
    0x840158ca     0x20    bgeu a4,a5,ffffffff84015946 <setMRs_syscall_error+0x9c>
    0x840158ce     0x24    li a4,9
    0x840158d0     0x26    bltu a4,a5,ffffffff84015980 <setMRs_syscall_error+0xd6>
    0x840158d4     0x2a    li a4,6
    0x840158d6     0x2c    bltu a4,a5,ffffffff84015a3c <setMRs_syscall_error+0x192>
    0x840158da     0x30    li a4,5
    0x840158dc     0x32    beq a5,a4,ffffffff84015a40 <setMRs_syscall_error+0x196>
    0x840158e0     0x36    auipc s2,0x2
    0x840158e4     0x3a    addi s2,s2,1824 # ffffffff84018000 <riscvKSASIDTable>
    0x840158e8     0x3e    ld a3,1736(s2)
    0x840158ec     0x42    snez a3,a3
    0x840158f0     0x46    li a2,0
    0x840158f2     0x48    jal ra,ffffffff840100ea <setMR>
    0x840158f6     0x4c    ld s3,1024(s2)
    0x840158fa     0x50    ld s4,1032(s2)
    0x840158fe     0x54    andi s2,s3,3
    0x84015902     0x58    addi a3,s2,1
    0x84015906     0x5c    li a2,1
    0x84015908     0x5e    mv a1,s1
    0x8401590a     0x60    mv a0,s0
    0x8401590c     0x62    jal ra,ffffffff840100ea <setMR>
    0x84015910     0x66    sext.w a5,a0
    0x84015914     0x6a    li a4,2
    0x84015916     0x6c    beq s2,a4,ffffffff840159d4 <setMRs_syscall_error+0x12a>
    0x8401591a     0x70    bltu a4,s2,ffffffff840159fe <setMRs_syscall_error+0x154>
    0x8401591e     0x74    beqz s2,ffffffff8401593e <setMRs_syscall_error+0x94>
    0x84015922     0x78    li a5,1
    0x84015924     0x7a    bne s2,a5,ffffffff84015a34 <setMRs_syscall_error+0x18a>
    0x84015928     0x7e    srli a3,s3,0x2
    0x8401592c     0x82    andi a3,a3,127
    0x84015930     0x86    li a2,2
    0x84015932     0x88    mv a1,s1
    0x84015934     0x8a    mv a0,s0
    0x84015936     0x8c    jal ra,ffffffff840100ea <setMR>
    0x8401593a     0x90    sext.w a5,a0
    0x8401593e     0x94    slli a0,a5,0x20
    0x84015942     0x98    srli a0,a0,0x20
    0x84015944     0x9a    j ffffffff84015954 <setMRs_syscall_error+0xaa>
    0x84015946     0x9c    li a4,2
    0x84015948     0x9e    beq a5,a4,ffffffff8401599a <setMRs_syscall_error+0xf0>
    0x8401594c     0xa2    li a4,3
    0x8401594e     0xa4    li a0,0
    0x84015950     0xa6    bne a5,a4,ffffffff84015964 <setMRs_syscall_error+0xba>
    0x84015954     0xaa    ld ra,40(sp)          ; stack access
    0x84015956     0xac    ld s0,32(sp)          ; stack access
    0x84015958     0xae    ld s1,24(sp)          ; stack access
    0x8401595a     0xb0    ld s2,16(sp)          ; stack access
    0x8401595c     0xb2    ld s3,8(sp)           ; stack access
    0x8401595e     0xb4    ld s4,0(sp)           ; stack access
    0x84015960     0xb6    addi sp,sp,48
    0x84015962     0xb8    ret
    0x84015964     0xba    li a4,1
    0x84015966     0xbc    bne a5,a4,ffffffff84015a38 <setMRs_syscall_error+0x18e>
    0x8401596a     0xc0    auipc a3,0x3
    0x8401596e     0xc4    ld a3,-714(a3) # ffffffff840186a0 <current_syscall_error>
    0x84015972     0xc8    li a2,0
    0x84015974     0xca    mv a0,s0
    0x84015976     0xcc    jal ra,ffffffff840100ea <setMR>
    0x8401597a     0xd0    slli a0,a0,0x20
    0x8401597c     0xd2    srli a0,a0,0x20
    0x8401597e     0xd4    j ffffffff84015954 <setMRs_syscall_error+0xaa>
    0x84015980     0xd6    li a4,10
    0x84015982     0xd8    bne a5,a4,ffffffff84015a38 <setMRs_syscall_error+0x18e>
    0x84015986     0xdc    auipc a3,0x3
    0x8401598a     0xe0    ld a3,-710(a3) # ffffffff840186c0 <current_syscall_error+0x20>
    0x8401598e     0xe4    li a2,0
    0x84015990     0xe6    jal ra,ffffffff840100ea <setMR>
    0x84015994     0xea    slli a0,a0,0x20
    0x84015996     0xec    srli a0,a0,0x20
    0x84015998     0xee    j ffffffff84015954 <setMRs_syscall_error+0xaa>
    0x8401599a     0xf0    auipc a3,0x3
    0x8401599e     0xf4    ld a3,-754(a3) # ffffffff840186a8 <current_syscall_error+0x8>
    0x840159a2     0xf8    li a2,0
    0x840159a4     0xfa    jal ra,ffffffff840100ea <setMR>
    0x840159a8     0xfe    slli a0,a0,0x20
    0x840159aa    0x100    srli a0,a0,0x20
    0x840159ac    0x102    j ffffffff84015954 <setMRs_syscall_error+0xaa>
    0x840159ae    0x104    auipc s2,0x2
    0x840159b2    0x108    addi s2,s2,1618 # ffffffff84018000 <riscvKSASIDTable>
    0x840159b6    0x10c    ld a3,1712(s2)
    0x840159ba    0x110    li a2,0
    0x840159bc    0x112    jal ra,ffffffff840100ea <setMR>
    0x840159c0    0x116    ld a3,1720(s2)
    0x840159c4    0x11a    li a2,1
    0x840159c6    0x11c    mv a1,s1
    0x840159c8    0x11e    mv a0,s0
    0x840159ca    0x120    jal ra,ffffffff840100ea <setMR>
    0x840159ce    0x124    slli a0,a0,0x20
    0x840159d0    0x126    srli a0,a0,0x20
    0x840159d2    0x128    j ffffffff84015954 <setMRs_syscall_error+0xaa>
    0x840159d4    0x12a    srli a3,s3,0x2
    0x840159d8    0x12e    andi a3,a3,127
    0x840159dc    0x132    li a2,2
    0x840159de    0x134    mv a1,s1
    0x840159e0    0x136    mv a0,s0
    0x840159e2    0x138    jal ra,ffffffff840100ea <setMR>
    0x840159e6    0x13c    srli a3,s3,0x9
    0x840159ea    0x140    andi a3,a3,127
    0x840159ee    0x144    li a2,3
    0x840159f0    0x146    mv a1,s1
    0x840159f2    0x148    mv a0,s0
    0x840159f4    0x14a    jal ra,ffffffff840100ea <setMR>
    0x840159f8    0x14e    sext.w a5,a0
    0x840159fc    0x152    j ffffffff8401593e <setMRs_syscall_error+0x94>
    0x840159fe    0x154    srli a3,s3,0x9
    0x84015a02    0x158    andi a3,a3,127
    0x84015a06    0x15c    li a2,2
    0x84015a08    0x15e    mv a1,s1
    0x84015a0a    0x160    mv a0,s0
    0x84015a0c    0x162    jal ra,ffffffff840100ea <setMR>
    0x84015a10    0x166    mv a3,s4
    0x84015a12    0x168    li a2,3
    0x84015a14    0x16a    mv a1,s1
    0x84015a16    0x16c    mv a0,s0
    0x84015a18    0x16e    jal ra,ffffffff840100ea <setMR>
    0x84015a1c    0x172    srli a3,s3,0x2
    0x84015a20    0x176    andi a3,a3,127
    0x84015a24    0x17a    li a2,4
    0x84015a26    0x17c    mv a1,s1
    0x84015a28    0x17e    mv a0,s0
    0x84015a2a    0x180    jal ra,ffffffff840100ea <setMR>
    0x84015a2e    0x184    sext.w a5,a0
    0x84015a32    0x188    j ffffffff8401593e <setMRs_syscall_error+0x94>
    0x84015a34    0x18a    jal ra,ffffffff8401045e <halt>
    0x84015a38    0x18e    jal ra,ffffffff8401045e <halt>
    0x84015a3c    0x192    li a0,0
    0x84015a3e    0x194    j ffffffff84015954 <setMRs_syscall_error+0xaa>
    0x84015a40    0x196    li a0,0
    0x84015a42    0x198    j ffffffff84015954 <setMRs_syscall_error+0xaa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
142 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 205 nodes.

Section decodeUnbindNotification (173 of 271)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 31 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x8401569e     0x0    addi sp,sp,-32
    0x840156a0     0x2    sd ra,24(sp)          ; stack access
    0x840156a2     0x4    sd s0,16(sp)          ; stack access
    0x840156a4     0x6    sd a0,0(sp)           ; stack access
    0x840156a6     0x8    sd a1,8(sp)           ; stack access
    0x840156a8     0xa    slli s0,a0,0x19
    0x840156ac     0xe    srli s0,s0,0x19
    0x840156ae    0x10    srli a0,a0,0x26
    0x840156b0    0x12    andi a0,a0,1
    0x840156b2    0x14    beqz a0,ffffffff840156ba <decodeUnbindNotification+0x1c>
    0x840156b4    0x16    li a5,-1
    0x840156b6    0x18    slli a5,a5,0x27
    0x840156b8    0x1a    or s0,s0,a5
    0x840156ba    0x1c    ld a5,304(s0)
    0x840156be    0x20    beqz a5,ffffffff840156de <decodeUnbindNotification+0x40>
    0x840156c0    0x22    li a1,2
    0x840156c2    0x24    auipc a0,0x15
    0x840156c6    0x28    ld a0,374(a0) # ffffffff8402a838 <ksCurThread>
    0x840156ca    0x2c    jal ra,ffffffff840124f6 <setThreadState>
    0x840156ce    0x30    li a1,0
    0x840156d0    0x32    mv a0,s0
    0x840156d2    0x34    jal ra,ffffffff840155ba <invokeTCB_NotificationControl>
    0x840156d6    0x38    ld ra,24(sp)          ; stack access
    0x840156d8    0x3a    ld s0,16(sp)          ; stack access
    0x840156da    0x3c    addi sp,sp,32
    0x840156dc    0x3e    ret
    0x840156de    0x40    li a5,3
    0x840156e0    0x42    auipc a4,0x3
    0x840156e4    0x46    sd a5,-16(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840156e8    0x4a    li a0,3
    0x840156ea    0x4c    j ffffffff840156d6 <decodeUnbindNotification+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 47 nodes.

Section decodeBindNotification (174 of 271)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 80 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeBindNotification`:

    0x840155d2     0x0    addi sp,sp,-48
    0x840155d4     0x2    sd ra,40(sp)          ; stack access
    0x840155d6     0x4    sd s0,32(sp)          ; stack access
    0x840155d8     0x6    sd s1,24(sp)          ; stack access
    0x840155da     0x8    sd a0,0(sp)           ; stack access
    0x840155dc     0xa    sd a1,8(sp)           ; stack access
    0x840155de     0xc    auipc a3,0x3
    0x840155e2    0x10    ld a3,690(a3) # ffffffff84018890 <current_extra_caps>
    0x840155e6    0x14    beqz a3,ffffffff84015640 <decodeBindNotification+0x6e>
    0x840155e8    0x16    ld a5,0(sp)           ; stack access
    0x840155ea    0x18    slli a4,a5,0x19
    0x840155ee    0x1c    srli a4,a4,0x19
    0x840155f0    0x1e    srli a5,a5,0x26
    0x840155f2    0x20    andi a5,a5,1
    0x840155f4    0x22    beqz a5,ffffffff840155fc <decodeBindNotification+0x2a>
    0x840155f6    0x24    li a5,-1
    0x840155f8    0x26    slli a5,a5,0x27
    0x840155fa    0x28    or a4,a4,a5
    0x840155fc    0x2a    mv s0,a4
    0x840155fe    0x2c    ld a5,304(a4)
    0x84015602    0x30    bnez a5,ffffffff8401564e <decodeBindNotification+0x7c>
    0x84015604    0x32    ld a5,0(a3)
    0x84015606    0x34    srli a3,a5,0x3b
    0x8401560a    0x38    li a4,6
    0x8401560c    0x3a    bne a3,a4,ffffffff84015664 <decodeBindNotification+0x92>
    0x84015610    0x3e    slli a4,a5,0x19
    0x84015614    0x42    srli a4,a4,0x19
    0x84015616    0x44    srli a3,a5,0x26
    0x8401561a    0x48    andi a3,a3,1
    0x8401561c    0x4a    beqz a3,ffffffff84015624 <decodeBindNotification+0x52>
    0x8401561e    0x4c    li a3,-1
    0x84015620    0x4e    slli a3,a3,0x27
    0x84015622    0x50    or a4,a4,a3
    0x84015624    0x52    mv s1,a4
    0x84015626    0x54    srli a5,a5,0x3a
    0x84015628    0x56    andi a5,a5,1
    0x8401562a    0x58    beqz a5,ffffffff84015672 <decodeBindNotification+0xa0>
    0x8401562c    0x5a    ld a5,8(a4)
    0x8401562e    0x5c    slli a5,a5,0x19
    0x84015630    0x5e    beqz a5,ffffffff84015680 <decodeBindNotification+0xae>
    0x84015632    0x60    li a5,3
    0x84015634    0x62    auipc a4,0x3
    0x84015638    0x66    sd a5,156(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401563c    0x6a    li a0,3
    0x8401563e    0x6c    j ffffffff8401565a <decodeBindNotification+0x88>
    0x84015640    0x6e    li a5,7
    0x84015642    0x70    auipc a4,0x3
    0x84015646    0x74    sd a5,142(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401564a    0x78    li a0,3
    0x8401564c    0x7a    j ffffffff8401565a <decodeBindNotification+0x88>
    0x8401564e    0x7c    li a5,3
    0x84015650    0x7e    auipc a4,0x3
    0x84015654    0x82    sd a5,128(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015658    0x86    li a0,3
    0x8401565a    0x88    ld ra,40(sp)          ; stack access
    0x8401565c    0x8a    ld s0,32(sp)          ; stack access
    0x8401565e    0x8c    ld s1,24(sp)          ; stack access
    0x84015660    0x8e    addi sp,sp,48
    0x84015662    0x90    ret
    0x84015664    0x92    li a5,3
    0x84015666    0x94    auipc a4,0x3
    0x8401566a    0x98    sd a5,106(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401566e    0x9c    li a0,3
    0x84015670    0x9e    j ffffffff8401565a <decodeBindNotification+0x88>
    0x84015672    0xa0    li a5,3
    0x84015674    0xa2    auipc a4,0x3
    0x84015678    0xa6    sd a5,92(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401567c    0xaa    li a0,3
    0x8401567e    0xac    j ffffffff8401565a <decodeBindNotification+0x88>
    0x84015680    0xae    ld a5,24(a4)
    0x84015682    0xb0    slli a5,a5,0x19
    0x84015684    0xb2    bnez a5,ffffffff84015632 <decodeBindNotification+0x60>
    0x84015686    0xb4    li a1,2
    0x84015688    0xb6    auipc a0,0x15
    0x8401568c    0xba    ld a0,432(a0) # ffffffff8402a838 <ksCurThread>
    0x84015690    0xbe    jal ra,ffffffff840124f6 <setThreadState>
    0x84015694    0xc2    mv a1,s1
    0x84015696    0xc4    mv a0,s0
    0x84015698    0xc6    jal ra,ffffffff840155ba <invokeTCB_NotificationControl>
    0x8401569c    0xca    j ffffffff8401565a <decodeBindNotification+0x88>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 119 nodes.

Section invokeTCB_NotificationControl (175 of 271)
==================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_NotificationControl`:

    0x840155ba     0x0    addi sp,sp,-16
    0x840155bc     0x2    sd ra,8(sp)           ; stack access
    0x840155be     0x4    beqz a1,ffffffff840155cc <invokeTCB_NotificationControl+0x12>
    0x840155c0     0x6    jal ra,ffffffff84011b0a <bindNotification>
    0x840155c4     0xa    li a0,0
    0x840155c6     0xc    ld ra,8(sp)           ; stack access
    0x840155c8     0xe    addi sp,sp,16
    0x840155ca    0x10    ret
    0x840155cc    0x12    jal ra,ffffffff84011af6 <unbindNotification>
    0x840155d0    0x16    j ffffffff840155c4 <invokeTCB_NotificationControl+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 17 nodes.

Section handleFault (176 of 271)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 14 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleFault`:

    0x840143d0     0x0    addi sp,sp,-16
    0x840143d2     0x2    sd ra,8(sp)           ; stack access
    0x840143d4     0x4    sd s0,0(sp)           ; stack access
    0x840143d6     0x6    mv s0,a0
    0x840143d8     0x8    jal ra,ffffffff840142e6 <sendFaultIPC>
    0x840143dc     0xc    bnez a0,ffffffff840143e6 <handleFault+0x16>
    0x840143de     0xe    ld ra,8(sp)           ; stack access
    0x840143e0    0x10    ld s0,0(sp)           ; stack access
    0x840143e2    0x12    addi sp,sp,16
    0x840143e4    0x14    ret
    0x840143e6    0x16    li a1,0
    0x840143e8    0x18    mv a0,s0
    0x840143ea    0x1a    jal ra,ffffffff840124f6 <setThreadState>
    0x840143ee    0x1e    j ffffffff840143de <handleFault+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 23 nodes.

Section sendFaultIPC (177 of 271)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 83 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `sendFaultIPC`:

    0x840142e6     0x0    addi sp,sp,-80
    0x840142e8     0x2    sd ra,72(sp)          ; stack access
    0x840142ea     0x4    sd s0,64(sp)          ; stack access
    0x840142ec     0x6    sd s1,56(sp)          ; stack access
    0x840142ee     0x8    sd s2,48(sp)          ; stack access
    0x840142f0     0xa    sd s3,40(sp)          ; stack access
    0x840142f2     0xc    sd s4,32(sp)          ; stack access
    0x840142f4     0xe    mv s0,a0
    0x840142f6    0x10    auipc a5,0x4
    0x840142fa    0x14    addi a5,a5,-758 # ffffffff84018000 <riscvKSASIDTable>
    0x840142fe    0x18    ld s3,1024(a5)
    0x84014302    0x1c    ld s4,1032(a5)
    0x84014306    0x20    ld s2,376(a0)
    0x8401430a    0x24    mv a2,s2
    0x8401430c    0x26    mv a1,a0
    0x8401430e    0x28    addi a0,sp,8
    0x84014310    0x2a    jal ra,ffffffff84011344 <lookupCap>
    0x84014314    0x2e    ld s1,8(sp)           ; stack access
    0x84014316    0x30    bnez s1,ffffffff84014382 <sendFaultIPC+0x9c>
    0x84014318    0x32    ld a5,16(sp)          ; stack access
    0x8401431a    0x34    srli a3,a5,0x3b
    0x8401431e    0x38    li a4,4
    0x84014320    0x3a    bne a3,a4,ffffffff840143a2 <sendFaultIPC+0xbc>
    0x84014324    0x3e    srli a4,a5,0x37
    0x84014328    0x42    andi a4,a4,1
    0x8401432a    0x44    beqz a4,ffffffff840143a2 <sendFaultIPC+0xbc>
    0x8401432c    0x46    srli a3,a5,0x39
    0x84014330    0x4a    srli a4,a5,0x3a
    0x84014334    0x4e    or a4,a4,a3
    0x84014336    0x50    andi a4,a4,1
    0x84014338    0x52    beqz a4,ffffffff840143a2 <sendFaultIPC+0xbc>
    0x8401433a    0x54    ld a2,24(sp)          ; stack access
    0x8401433c    0x56    auipc a1,0x4
    0x84014340    0x5a    addi a1,a1,-828 # ffffffff84018000 <riscvKSASIDTable>
    0x84014344    0x5e    ld a4,1680(a1)
    0x84014348    0x62    sd a4,312(s0)
    0x8401434c    0x66    ld a1,1688(a1)
    0x84014350    0x6a    sd a1,320(s0)
    0x84014354    0x6e    andi a4,a4,15
    0x84014356    0x70    li a1,1
    0x84014358    0x72    beq a4,a1,ffffffff84014398 <sendFaultIPC+0xb2>
    0x8401435c    0x76    slli a6,a5,0x19
    0x84014360    0x7a    srli a6,a6,0x19
    0x84014364    0x7e    srli a5,a5,0x26
    0x84014366    0x80    andi a5,a5,1
    0x84014368    0x82    beqz a5,ffffffff84014372 <sendFaultIPC+0x8c>
    0x8401436a    0x84    li a5,-1
    0x8401436c    0x86    slli a5,a5,0x27
    0x8401436e    0x88    or a6,a6,a5
    0x84014372    0x8c    mv a5,s0
    0x84014374    0x8e    li a4,1
    0x84014376    0x90    andi a3,a3,1
    0x84014378    0x92    li a1,1
    0x8401437a    0x94    li a0,1
    0x8401437c    0x96    jal ra,ffffffff84014170 <sendIPC>
    0x84014380    0x9a    j ffffffff840143be <sendFaultIPC+0xd8>
    0x84014382    0x9c    auipc a5,0x4
    0x84014386    0xa0    addi a5,a5,-898 # ffffffff84018000 <riscvKSASIDTable>
    0x8401438a    0xa4    li a4,1
    0x8401438c    0xa6    sd a4,1680(a5)
    0x84014390    0xaa    sd s2,1688(a5)
    0x84014394    0xae    li s1,1
    0x84014396    0xb0    j ffffffff840143be <sendFaultIPC+0xd8>
    0x84014398    0xb2    sd s3,328(s0)
    0x8401439c    0xb6    sd s4,336(s0)
    0x840143a0    0xba    j ffffffff8401435c <sendFaultIPC+0x76>
    0x840143a2    0xbc    auipc a5,0x4
    0x840143a6    0xc0    addi a5,a5,-930 # ffffffff84018000 <riscvKSASIDTable>
    0x840143aa    0xc4    li a4,1
    0x840143ac    0xc6    sd a4,1680(a5)
    0x840143b0    0xca    sd s2,1688(a5)
    0x840143b4    0xce    sd a4,1024(a5)
    0x840143b8    0xd2    sd zero,1032(a5)
    0x840143bc    0xd6    li s1,1
    0x840143be    0xd8    mv a0,s1
    0x840143c0    0xda    ld ra,72(sp)          ; stack access
    0x840143c2    0xdc    ld s0,64(sp)          ; stack access
    0x840143c4    0xde    ld s1,56(sp)          ; stack access
    0x840143c6    0xe0    ld s2,48(sp)          ; stack access
    0x840143c8    0xe2    ld s3,40(sp)          ; stack access
    0x840143ca    0xe4    ld s4,32(sp)          ; stack access
    0x840143cc    0xe6    addi sp,sp,80
    0x840143ce    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 128 nodes.

Section handleReply (178 of 271)
================================

Deriving specifications
-----------------------

Section `handleReply` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleReply`:

    0x84014114     0x0    auipc a0,0x16
    0x84014118     0x4    ld a0,1828(a0) # ffffffff8402a838 <ksCurThread>
    0x8401411c     0x8    andi a5,a0,-1024
    0x84014120     0xc    addi a2,a5,96
    0x84014124    0x10    ld a3,96(a5)
    0x84014126    0x12    srli a5,a3,0x3b
    0x8401412a    0x16    beqz a5,ffffffff84014150 <handleReply+0x3c>
    0x8401412c    0x18    addi sp,sp,-16
    0x8401412e    0x1a    sd ra,8(sp)           ; stack access
    0x84014130    0x1c    li a4,8
    0x84014132    0x1e    bne a5,a4,ffffffff8401414c <handleReply+0x38>
    0x84014136    0x22    andi a5,a3,1
    0x8401413a    0x26    bnez a5,ffffffff8401414c <handleReply+0x38>
    0x8401413c    0x28    srli a3,a3,0x1
    0x8401413e    0x2a    andi a3,a3,1
    0x84014140    0x2c    ld a1,8(a2)
    0x84014142    0x2e    jal ra,ffffffff840140a0 <doReplyTransfer>
    0x84014146    0x32    ld ra,8(sp)           ; stack access
    0x84014148    0x34    addi sp,sp,16
    0x8401414a    0x36    ret
    0x8401414c    0x38    jal ra,ffffffff8401045e <halt>
    0x84014150    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleReply` has 37 nodes.

Section setupCallerCap (179 of 271)
===================================

Deriving specifications
-----------------------

Section `setupCallerCap` consists of 27 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `setupCallerCap`:

    0x84013d5e     0x0    addi sp,sp,-48
    0x84013d60     0x2    sd ra,40(sp)          ; stack access
    0x84013d62     0x4    sd s0,32(sp)          ; stack access
    0x84013d64     0x6    sd s1,24(sp)          ; stack access
    0x84013d66     0x8    sd s2,16(sp)          ; stack access
    0x84013d68     0xa    mv s2,a0
    0x84013d6a     0xc    mv s1,a1
    0x84013d6c     0xe    mv s0,a2
    0x84013d6e    0x10    li a1,5
    0x84013d70    0x12    jal ra,ffffffff840124f6 <setThreadState>
    0x84013d74    0x16    slli s0,s0,0x1
    0x84013d76    0x18    andi s0,s0,2
    0x84013d78    0x1a    andi a3,s1,-1024
    0x84013d7c    0x1e    andi a2,s2,-1024
    0x84013d80    0x22    addi a3,a3,96 # fffffffff8000060 <ki_end+0x73fd1060>
    0x84013d84    0x26    addi a2,a2,64
    0x84013d88    0x2a    li a0,1
    0x84013d8a    0x2c    slli a0,a0,0x3e
    0x84013d8c    0x2e    or a0,a0,s0
    0x84013d8e    0x30    mv a1,s2
    0x84013d90    0x32    jal ra,ffffffff84011576 <cteInsert>
    0x84013d94    0x36    ld ra,40(sp)          ; stack access
    0x84013d96    0x38    ld s0,32(sp)          ; stack access
    0x84013d98    0x3a    ld s1,24(sp)          ; stack access
    0x84013d9a    0x3c    ld s2,16(sp)          ; stack access
    0x84013d9c    0x3e    addi sp,sp,48
    0x84013d9e    0x40    ret

Proving inst theorems
---------------------

27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupCallerCap` has 38 nodes.

Section c_handle_interrupt (180 of 271)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x84013d2a    0x0    addi sp,sp,-16
    0x84013d2c    0x2    sd ra,8(sp)           ; stack access
    0x84013d2e    0x4    jal ra,ffffffff84013cdc <handleInterruptEntry>
    0x84013d32    0x8    jal ra,ffffffff840103bc <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section invokeIRQHandler_SetIRQHandler (181 of 271)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 23 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x8401396c     0x0    addi sp,sp,-48
    0x8401396e     0x2    sd ra,40(sp)          ; stack access
    0x84013970     0x4    sd s0,32(sp)          ; stack access
    0x84013972     0x6    sd s1,24(sp)          ; stack access
    0x84013974     0x8    sd a1,0(sp)           ; stack access
    0x84013976     0xa    sd a2,8(sp)           ; stack access
    0x84013978     0xc    mv s1,a3
    0x8401397a     0xe    slli a0,a0,0x5
    0x8401397c    0x10    auipc s0,0x5
    0x84013980    0x14    addi s0,s0,1668 # ffffffff84019000 <intStateIRQNode>
    0x84013984    0x18    add s0,s0,a0
    0x84013986    0x1a    mv a0,s0
    0x84013988    0x1c    jal ra,ffffffff84013938 <cteDeleteOne>
    0x8401398c    0x20    mv a3,s0
    0x8401398e    0x22    mv a2,s1
    0x84013990    0x24    ld a0,0(sp)           ; stack access
    0x84013992    0x26    ld a1,8(sp)           ; stack access
    0x84013994    0x28    jal ra,ffffffff84011576 <cteInsert>
    0x84013998    0x2c    ld ra,40(sp)          ; stack access
    0x8401399a    0x2e    ld s0,32(sp)          ; stack access
    0x8401399c    0x30    ld s1,24(sp)          ; stack access
    0x8401399e    0x32    addi sp,sp,48
    0x840139a0    0x34    ret

Proving inst theorems
---------------------

23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 36 nodes.

Section cancelSignal (182 of 271)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 49 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `cancelSignal`:

    0x84012eb6     0x0    addi sp,sp,-48
    0x84012eb8     0x2    sd ra,40(sp)          ; stack access
    0x84012eba     0x4    sd s0,32(sp)          ; stack access
    0x84012ebc     0x6    sd s1,24(sp)          ; stack access
    0x84012ebe     0x8    mv s1,a0
    0x84012ec0     0xa    mv s0,a1
    0x84012ec2     0xc    ld a5,8(a1)
    0x84012ec4     0xe    slli a1,a5,0x19
    0x84012ec8    0x12    srli a1,a1,0x19
    0x84012eca    0x14    srli a5,a5,0x26
    0x84012ecc    0x16    andi a5,a5,1
    0x84012ece    0x18    beqz a5,ffffffff84012ed6 <cancelSignal+0x20>
    0x84012ed0    0x1a    li a5,-1
    0x84012ed2    0x1c    slli a5,a5,0x27
    0x84012ed4    0x1e    or a1,a1,a5
    0x84012ed6    0x20    ld a5,0(s0)
    0x84012ed8    0x22    srli a2,a5,0x19
    0x84012edc    0x26    bgez a5,ffffffff84012ee6 <cancelSignal+0x30>
    0x84012ee0    0x2a    li a5,-1
    0x84012ee2    0x2c    slli a5,a5,0x27
    0x84012ee4    0x2e    or a2,a2,a5
    0x84012ee6    0x30    mv a0,s1
    0x84012ee8    0x32    jal ra,ffffffff84012d7e <tcbEPDequeue>
    0x84012eec    0x36    ld a3,8(s0)
    0x84012eee    0x38    li a4,-1
    0x84012ef0    0x3a    slli a5,a4,0x27
    0x84012ef4    0x3e    and a3,a3,a5
    0x84012ef6    0x40    srli a4,a4,0x19
    0x84012ef8    0x42    and a4,a4,a0
    0x84012efa    0x44    or a4,a4,a3
    0x84012efc    0x46    sd a4,8(s0)
    0x84012efe    0x48    ld a5,0(s0)
    0x84012f00    0x4a    slli a5,a5,0x27
    0x84012f02    0x4c    srli a5,a5,0x27
    0x84012f04    0x4e    slli a1,a1,0x19
    0x84012f06    0x50    or a5,a5,a1
    0x84012f08    0x52    beqz a0,ffffffff84012f1e <cancelSignal+0x68>
    0x84012f0a    0x54    sd a5,0(s0)
    0x84012f0c    0x56    li a1,0
    0x84012f0e    0x58    mv a0,s1
    0x84012f10    0x5a    jal ra,ffffffff840124f6 <setThreadState>
    0x84012f14    0x5e    ld ra,40(sp)          ; stack access
    0x84012f16    0x60    ld s0,32(sp)          ; stack access
    0x84012f18    0x62    ld s1,24(sp)          ; stack access
    0x84012f1a    0x64    addi sp,sp,48
    0x84012f1c    0x66    ret
    0x84012f1e    0x68    andi a5,a5,-4
    0x84012f20    0x6a    sd a5,0(s0)
    0x84012f22    0x6c    j ffffffff84012f0c <cancelSignal+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 71 nodes.

Section switchToThread (183 of 271)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 13 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x84012aa4     0x0    addi sp,sp,-16
    0x84012aa6     0x2    sd ra,8(sp)           ; stack access
    0x84012aa8     0x4    sd s0,0(sp)           ; stack access
    0x84012aaa     0x6    mv s0,a0
    0x84012aac     0x8    jal ra,ffffffff84010a9e <setVMRoot>
    0x84012ab0     0xc    mv a0,s0
    0x84012ab2     0xe    jal ra,ffffffff840129c8 <tcbSchedDequeue>
    0x84012ab6    0x12    auipc a5,0x18
    0x84012aba    0x16    sd s0,-638(a5) # ffffffff8402a838 <ksCurThread>
    0x84012abe    0x1a    ld ra,8(sp)           ; stack access
    0x84012ac0    0x1c    ld s0,0(sp)           ; stack access
    0x84012ac2    0x1e    addi sp,sp,16
    0x84012ac4    0x20    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 21 nodes.

Section timerTick (184 of 271)
==============================

Deriving specifications
-----------------------

Section `timerTick` consists of 28 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `timerTick`:

    0x84012976     0x0    addi sp,sp,-16
    0x84012978     0x2    sd ra,8(sp)           ; stack access
    0x8401297a     0x4    auipc a0,0x18
    0x8401297e     0x8    ld a0,-322(a0) # ffffffff8402a838 <ksCurThread>
    0x84012982     0xc    ld a5,280(a0)
    0x84012986    0x10    andi a5,a5,15
    0x84012988    0x12    li a4,1
    0x8401298a    0x14    bne a5,a4,ffffffff8401299c <timerTick+0x26>
    0x8401298e    0x18    ld a5,368(a0)
    0x84012992    0x1c    bgeu a4,a5,ffffffff840129b2 <timerTick+0x3c>
    0x84012996    0x20    addi a5,a5,-1
    0x84012998    0x22    sd a5,368(a0)
    0x8401299c    0x26    auipc a4,0x18
    0x840129a0    0x2a    addi a4,a4,-396 # ffffffff8402a810 <ksDomainTime>
    0x840129a4    0x2e    ld a5,0(a4)
    0x840129a6    0x30    addi a5,a5,-1
    0x840129a8    0x32    sd a5,0(a4)
    0x840129aa    0x34    beqz a5,ffffffff840129c2 <timerTick+0x4c>
    0x840129ac    0x36    ld ra,8(sp)           ; stack access
    0x840129ae    0x38    addi sp,sp,16
    0x840129b0    0x3a    ret
    0x840129b2    0x3c    li a5,5
    0x840129b4    0x3e    sd a5,368(a0)
    0x840129b8    0x42    jal ra,ffffffff840128de <tcbSchedAppend>
    0x840129bc    0x46    jal ra,ffffffff84012490 <rescheduleRequired>
    0x840129c0    0x4a    j ffffffff8401299c <timerTick+0x26>
    0x840129c2    0x4c    jal ra,ffffffff84012490 <rescheduleRequired>
    0x840129c6    0x50    j ffffffff840129ac <timerTick+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `timerTick` has 47 nodes.

Section possibleSwitchTo (185 of 271)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x840127f0     0x0    addi sp,sp,-16
    0x840127f2     0x2    sd ra,8(sp)           ; stack access
    0x840127f4     0x4    sd s0,0(sp)           ; stack access
    0x840127f6     0x6    mv s0,a0
    0x840127f8     0x8    ld a4,344(a0)
    0x840127fc     0xc    auipc a5,0x18
    0x84012800    0x10    ld a5,28(a5) # ffffffff8402a818 <ksCurDomain>
    0x84012804    0x14    bne a4,a5,ffffffff8401281e <possibleSwitchTo+0x2e>
    0x84012808    0x18    auipc a5,0x18
    0x8401280c    0x1c    ld a5,32(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012810    0x20    beqz a5,ffffffff8401282a <possibleSwitchTo+0x3a>
    0x84012812    0x22    jal ra,ffffffff84012490 <rescheduleRequired>
    0x84012816    0x26    mv a0,s0
    0x84012818    0x28    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x8401281c    0x2c    j ffffffff84012822 <possibleSwitchTo+0x32>
    0x8401281e    0x2e    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x84012822    0x32    ld ra,8(sp)           ; stack access
    0x84012824    0x34    ld s0,0(sp)           ; stack access
    0x84012826    0x36    addi sp,sp,16
    0x84012828    0x38    ret
    0x8401282a    0x3a    auipc a5,0x18
    0x8401282e    0x3e    sd a0,-2(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012832    0x42    j ffffffff84012822 <possibleSwitchTo+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 39 nodes.

Section activateThread (186 of 271)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `activateThread`:

    0x84012600     0x0    addi sp,sp,-16
    0x84012602     0x2    sd ra,8(sp)           ; stack access
    0x84012604     0x4    auipc a0,0x18
    0x84012608     0x8    ld a0,564(a0) # ffffffff8402a838 <ksCurThread>
    0x8401260c     0xc    ld a5,280(a0)
    0x84012610    0x10    andi a5,a5,15
    0x84012612    0x12    li a4,2
    0x84012614    0x14    beq a5,a4,ffffffff84012628 <activateThread+0x28>
    0x84012618    0x18    li a4,7
    0x8401261a    0x1a    beq a5,a4,ffffffff84012636 <activateThread+0x36>
    0x8401261e    0x1e    li a4,1
    0x84012620    0x20    beq a5,a4,ffffffff84012636 <activateThread+0x36>
    0x84012624    0x24    jal ra,ffffffff8401045e <halt>
    0x84012628    0x28    ld a5,264(a0)
    0x8401262c    0x2c    sd a5,272(a0)
    0x84012630    0x30    li a1,1
    0x84012632    0x32    jal ra,ffffffff840124f6 <setThreadState>
    0x84012636    0x36    ld ra,8(sp)           ; stack access
    0x84012638    0x38    addi sp,sp,16
    0x8401263a    0x3a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 35 nodes.

Section createObject (187 of 271)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 76 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `createObject`:

    0x840122c2     0x0    addi sp,sp,-32
    0x840122c4     0x2    sd ra,24(sp)          ; stack access
    0x840122c6     0x4    li a5,4
    0x840122c8     0x6    bltu a5,a0,ffffffff8401230c <createObject+0x4a>
    0x840122cc     0xa    li a5,2
    0x840122ce     0xc    beq a0,a5,ffffffff8401233c <createObject+0x7a>
    0x840122d2    0x10    bltu a5,a0,ffffffff8401231e <createObject+0x5c>
    0x840122d6    0x14    beqz a0,ffffffff8401235e <createObject+0x9c>
    0x840122d8    0x16    li a5,1
    0x840122da    0x18    bne a0,a5,ffffffff8401237a <createObject+0xb8>
    0x840122de    0x1c    li a5,32
    0x840122e2    0x20    sd a5,768(a1) # fffffffff8000300 <ki_end+0x73fd1300>
    0x840122e6    0x24    li a5,5
    0x840122e8    0x26    sd a5,880(a1)
    0x840122ec    0x2a    auipc a5,0x18
    0x840122f0    0x2e    ld a5,1324(a5) # ffffffff8402a818 <ksCurDomain>
    0x840122f4    0x32    sd a5,856(a1)
    0x840122f8    0x36    addi a1,a1,512
    0x840122fc    0x3a    slli a1,a1,0x19
    0x840122fe    0x3c    srli a1,a1,0x19
    0x84012300    0x3e    li a5,3
    0x84012302    0x40    slli a5,a5,0x3d
    0x84012304    0x42    or a1,a1,a5
    0x84012306    0x44    sd a1,0(sp)           ; stack access
    0x84012308    0x46    sd zero,8(sp)         ; stack access
    0x8401230a    0x48    j ffffffff84012314 <createObject+0x52>
    0x8401230c    0x4a    jal ra,ffffffff84011154 <Arch_createObject>
    0x84012310    0x4e    sd a0,0(sp)           ; stack access
    0x84012312    0x50    sd a1,8(sp)           ; stack access
    0x84012314    0x52    ld a0,0(sp)           ; stack access
    0x84012316    0x54    ld a1,8(sp)           ; stack access
    0x84012318    0x56    ld ra,24(sp)          ; stack access
    0x8401231a    0x58    addi sp,sp,32
    0x8401231c    0x5a    ret
    0x8401231e    0x5c    li a5,3
    0x84012320    0x5e    beq a0,a5,ffffffff8401234e <createObject+0x8c>
    0x84012324    0x62    andi a2,a2,63
    0x84012328    0x66    slli a2,a2,0x2f
    0x8401232a    0x68    slli a1,a1,0x19
    0x8401232c    0x6a    srli a1,a1,0x1a
    0x8401232e    0x6c    or a2,a2,a1
    0x84012330    0x6e    li a1,5
    0x84012332    0x70    slli a1,a1,0x3c
    0x84012334    0x72    or a2,a2,a1
    0x84012336    0x74    sd a2,0(sp)           ; stack access
    0x84012338    0x76    sd zero,8(sp)         ; stack access
    0x8401233a    0x78    j ffffffff84012314 <createObject+0x52>
    0x8401233c    0x7a    slli a1,a1,0x19
    0x8401233e    0x7c    srli a1,a1,0x19
    0x84012340    0x7e    li a5,79
    0x84012344    0x82    slli a5,a5,0x37
    0x84012346    0x84    or a1,a1,a5
    0x84012348    0x86    sd a1,0(sp)           ; stack access
    0x8401234a    0x88    sd zero,8(sp)         ; stack access
    0x8401234c    0x8a    j ffffffff84012314 <createObject+0x52>
    0x8401234e    0x8c    slli a1,a1,0x19
    0x84012350    0x8e    srli a1,a1,0x19
    0x84012352    0x90    li a5,27
    0x84012354    0x92    slli a5,a5,0x39
    0x84012356    0x94    or a1,a1,a5
    0x84012358    0x96    sd a1,0(sp)           ; stack access
    0x8401235a    0x98    sd zero,8(sp)         ; stack access
    0x8401235c    0x9a    j ffffffff84012314 <createObject+0x52>
    0x8401235e    0x9c    slli a1,a1,0x19
    0x84012360    0x9e    srli a1,a1,0x19
    0x84012362    0xa0    li a5,1
    0x84012364    0xa2    slli a5,a5,0x3c
    0x84012366    0xa4    or a1,a1,a5
    0x84012368    0xa6    sd a1,0(sp)           ; stack access
    0x8401236a    0xa8    snez a3,a3
    0x8401236e    0xac    slli a3,a3,0x6
    0x84012370    0xae    andi a2,a2,63
    0x84012374    0xb2    or a2,a2,a3
    0x84012376    0xb4    sd a2,8(sp)           ; stack access
    0x84012378    0xb6    j ffffffff84012314 <createObject+0x52>
    0x8401237a    0xb8    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
76 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 111 nodes.

Section maskCapRights (188 of 271)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 111 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `maskCapRights`:

    0x8401219a      0x0    addi sp,sp,-48
    0x8401219c      0x2    sd ra,40(sp)          ; stack access
    0x8401219e      0x4    sd a1,0(sp)           ; stack access
    0x840121a0      0x6    sd a2,8(sp)           ; stack access
    0x840121a2      0x8    srli a5,a1,0x3b
    0x840121a6      0xc    andi a4,a5,1
    0x840121aa     0x10    bnez a4,ffffffff8401220c <maskCapRights+0x72>
    0x840121ac     0x12    ld a3,8(sp)           ; stack access
    0x840121ae     0x14    li a4,20
    0x840121b0     0x16    bltu a4,a5,ffffffff840122a0 <maskCapRights+0x106>
    0x840121b4     0x1a    li a4,5
    0x840121b6     0x1c    bgeu a4,a5,ffffffff8401221e <maskCapRights+0x84>
    0x840121ba     0x20    li a4,1
    0x840121bc     0x22    sll a5,a4,a5
    0x840121c0     0x26    lui a4,0x155
    0x840121c4     0x2a    addi a4,a4,1024 # 155400 <KERNEL_OFFSET-0xfffffffeffeaac00>
    0x840121c8     0x2e    and a4,a4,a5
    0x840121ca     0x30    bnez a4,ffffffff840122a4 <maskCapRights+0x10a>
    0x840121cc     0x32    andi a4,a5,256
    0x840121d0     0x36    bnez a4,ffffffff840122aa <maskCapRights+0x110>
    0x840121d2     0x38    andi a5,a5,64
    0x840121d6     0x3c    beqz a5,ffffffff840122a0 <maskCapRights+0x106>
    0x840121d8     0x3e    srli a5,a1,0x39
    0x840121dc     0x42    and a5,a5,a0
    0x840121de     0x44    li a4,1
    0x840121e0     0x46    and a5,a5,a4
    0x840121e2     0x48    slli a5,a5,0x39
    0x840121e4     0x4a    li a2,-1
    0x840121e6     0x4c    slli a6,a2,0x39
    0x840121ea     0x50    addi a6,a6,-1
    0x840121ec     0x52    and a6,a1,a6
    0x840121f0     0x56    or a5,a5,a6
    0x840121f4     0x5a    slli a2,a2,0x3a
    0x840121f6     0x5c    addi a2,a2,-1
    0x840121f8     0x5e    and a5,a5,a2
    0x840121fa     0x60    srli a0,a0,0x1
    0x840121fc     0x62    srli a1,a1,0x3a
    0x840121fe     0x64    and a1,a1,a0
    0x84012200     0x66    and a4,a4,a1
    0x84012202     0x68    slli a4,a4,0x3a
    0x84012204     0x6a    or a5,a5,a4
    0x84012206     0x6c    sd a5,16(sp)          ; stack access
    0x84012208     0x6e    sd a3,24(sp)          ; stack access
    0x8401220a     0x70    j ffffffff84012214 <maskCapRights+0x7a>
    0x8401220c     0x72    jal ra,ffffffff84010dc8 <Arch_maskCapRights>
    0x84012210     0x76    sd a0,16(sp)          ; stack access
    0x84012212     0x78    sd a1,24(sp)          ; stack access
    0x84012214     0x7a    ld a0,16(sp)          ; stack access
    0x84012216     0x7c    ld a1,24(sp)          ; stack access
    0x84012218     0x7e    ld ra,40(sp)          ; stack access
    0x8401221a     0x80    addi sp,sp,48
    0x8401221c     0x82    ret
    0x8401221e     0x84    li a4,4
    0x84012220     0x86    bne a5,a4,ffffffff84012298 <maskCapRights+0xfe>
    0x84012224     0x8a    srli a5,a1,0x37
    0x84012228     0x8e    and a5,a5,a0
    0x8401222a     0x90    li a4,1
    0x8401222c     0x92    and a5,a5,a4
    0x8401222e     0x94    slli a5,a5,0x37
    0x84012230     0x96    li a2,-1
    0x84012232     0x98    slli a6,a2,0x37
    0x84012236     0x9c    addi a6,a6,-1
    0x84012238     0x9e    and a6,a1,a6
    0x8401223c     0xa2    or a5,a5,a6
    0x84012240     0xa6    slli a6,a2,0x38
    0x84012244     0xaa    addi a6,a6,-1
    0x84012246     0xac    and a5,a5,a6
    0x8401224a     0xb0    srli a6,a0,0x1
    0x8401224e     0xb4    srli a7,a1,0x38
    0x84012252     0xb8    and a6,a6,a7
    0x84012256     0xbc    and a6,a4,a6
    0x8401225a     0xc0    slli a6,a6,0x38
    0x8401225c     0xc2    or a5,a5,a6
    0x84012260     0xc6    slli a6,a2,0x39
    0x84012264     0xca    addi a6,a6,-1
    0x84012266     0xcc    and a5,a5,a6
    0x8401226a     0xd0    srli a6,a0,0x2
    0x8401226e     0xd4    srli a7,a1,0x39
    0x84012272     0xd8    and a6,a6,a7
    0x84012276     0xdc    and a6,a4,a6
    0x8401227a     0xe0    slli a6,a6,0x39
    0x8401227c     0xe2    or a5,a5,a6
    0x84012280     0xe6    slli a2,a2,0x3a
    0x84012282     0xe8    addi a2,a2,-1
    0x84012284     0xea    and a5,a5,a2
    0x84012286     0xec    srli a0,a0,0x3
    0x84012288     0xee    srli a1,a1,0x3a
    0x8401228a     0xf0    and a1,a1,a0
    0x8401228c     0xf2    and a4,a4,a1
    0x8401228e     0xf4    slli a4,a4,0x3a
    0x84012290     0xf6    or a5,a5,a4
    0x84012292     0xf8    sd a5,16(sp)          ; stack access
    0x84012294     0xfa    sd a3,24(sp)          ; stack access
    0x84012296     0xfc    j ffffffff84012214 <maskCapRights+0x7a>
    0x84012298     0xfe    bltu a4,a5,ffffffff840122a0 <maskCapRights+0x106>
    0x8401229c    0x102    andi a5,a5,-3
    0x8401229e    0x104    beqz a5,ffffffff840122a4 <maskCapRights+0x10a>
    0x840122a0    0x106    jal ra,ffffffff8401045e <halt>
    0x840122a4    0x10a    sd a1,16(sp)          ; stack access
    0x840122a6    0x10c    sd a3,24(sp)          ; stack access
    0x840122a8    0x10e    j ffffffff84012214 <maskCapRights+0x7a>
    0x840122aa    0x110    srli a5,a0,0x2
    0x840122ae    0x114    srli a0,a1,0x1
    0x840122b2    0x118    and a5,a5,a0
    0x840122b4    0x11a    slli a5,a5,0x1
    0x840122b6    0x11c    andi a5,a5,2
    0x840122b8    0x11e    andi a1,a1,-3
    0x840122ba    0x120    or a1,a1,a5
    0x840122bc    0x122    sd a1,16(sp)          ; stack access
    0x840122be    0x124    sd a3,24(sp)          ; stack access
    0x840122c0    0x126    j ffffffff84012214 <maskCapRights+0x7a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
111 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 149 nodes.

Section sameObjectAs (189 of 271)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 37 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `sameObjectAs`:

    0x84012022     0x0    addi sp,sp,-48
    0x84012024     0x2    sd ra,40(sp)          ; stack access
    0x84012026     0x4    sd a0,16(sp)          ; stack access
    0x84012028     0x6    sd a1,24(sp)          ; stack access
    0x8401202a     0x8    sd a2,0(sp)           ; stack access
    0x8401202c     0xa    sd a3,8(sp)           ; stack access
    0x8401202e     0xc    srli a0,a0,0x3b
    0x84012030     0xe    li a5,2
    0x84012032    0x10    beq a0,a5,ffffffff84012076 <sameObjectAs+0x54>
    0x84012036    0x14    li a4,14
    0x84012038    0x16    beq a0,a4,ffffffff8401205a <sameObjectAs+0x38>
    0x8401203c    0x1a    andi a0,a0,1
    0x8401203e    0x1c    beqz a0,ffffffff84012048 <sameObjectAs+0x26>
    0x84012040    0x1e    srli a5,a2,0x3b
    0x84012044    0x22    andi a5,a5,1
    0x84012046    0x24    bnez a5,ffffffff84012068 <sameObjectAs+0x46>
    0x84012048    0x26    ld a2,0(sp)           ; stack access
    0x8401204a    0x28    ld a3,8(sp)           ; stack access
    0x8401204c    0x2a    ld a0,16(sp)          ; stack access
    0x8401204e    0x2c    ld a1,24(sp)          ; stack access
    0x84012050    0x2e    jal ra,ffffffff84011b9a <sameRegionAs>
    0x84012054    0x32    ld ra,40(sp)          ; stack access
    0x84012056    0x34    addi sp,sp,48
    0x84012058    0x36    ret
    0x8401205a    0x38    srli a5,a2,0x3b
    0x8401205e    0x3c    li a4,16
    0x84012060    0x3e    li a0,0
    0x84012062    0x40    bne a5,a4,ffffffff84012048 <sameObjectAs+0x26>
    0x84012066    0x44    j ffffffff84012054 <sameObjectAs+0x32>
    0x84012068    0x46    ld a2,0(sp)           ; stack access
    0x8401206a    0x48    ld a3,8(sp)           ; stack access
    0x8401206c    0x4a    ld a0,16(sp)          ; stack access
    0x8401206e    0x4c    ld a1,24(sp)          ; stack access
    0x84012070    0x4e    jal ra,ffffffff84011082 <Arch_sameObjectAs>
    0x84012074    0x52    j ffffffff84012054 <sameObjectAs+0x32>
    0x84012076    0x54    li a0,0
    0x84012078    0x56    j ffffffff84012054 <sameObjectAs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 64 nodes.

Section deriveCap (190 of 271)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 51 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `deriveCap`:

    0x84011fa8     0x0    addi sp,sp,-64
    0x84011faa     0x2    sd ra,56(sp)          ; stack access
    0x84011fac     0x4    sd s0,48(sp)          ; stack access
    0x84011fae     0x6    sd s1,40(sp)          ; stack access
    0x84011fb0     0x8    sd s2,32(sp)          ; stack access
    0x84011fb2     0xa    sd s3,24(sp)          ; stack access
    0x84011fb4     0xc    mv s0,a0
    0x84011fb6     0xe    sd a2,0(sp)           ; stack access
    0x84011fb8    0x10    sd a3,8(sp)           ; stack access
    0x84011fba    0x12    mv s1,a2
    0x84011fbc    0x14    srli a5,a2,0x3b
    0x84011fc0    0x18    andi s3,a5,1
    0x84011fc4    0x1c    bnez s3,ffffffff84011fe6 <deriveCap+0x3e>
    0x84011fc8    0x20    ld s2,8(sp)           ; stack access
    0x84011fca    0x22    li a4,8
    0x84011fcc    0x24    beq a5,a4,ffffffff84012014 <deriveCap+0x6c>
    0x84011fd0    0x28    bltu a4,a5,ffffffff84011fec <deriveCap+0x44>
    0x84011fd4    0x2c    li a4,2
    0x84011fd6    0x2e    bne a5,a4,ffffffff84011ff2 <deriveCap+0x4a>
    0x84011fda    0x32    mv a0,a1
    0x84011fdc    0x34    jal ra,ffffffff84011f6a <ensureNoChildren>
    0x84011fe0    0x38    bnez a0,ffffffff8401201a <deriveCap+0x72>
    0x84011fe2    0x3a    mv s3,a0
    0x84011fe4    0x3c    j ffffffff84011ff2 <deriveCap+0x4a>
    0x84011fe6    0x3e    jal ra,ffffffff84010d5a <Arch_deriveCap>
    0x84011fea    0x42    j ffffffff84011ffc <deriveCap+0x54>
    0x84011fec    0x44    addi a5,a5,-14
    0x84011fee    0x46    andi a5,a5,-5
    0x84011ff0    0x48    beqz a5,ffffffff8401200c <deriveCap+0x64>
    0x84011ff2    0x4a    sd s3,0(s0)           ; stack access
    0x84011ff6    0x4e    sd s1,8(s0)           ; stack access
    0x84011ff8    0x50    sd s2,16(s0)          ; stack access
    0x84011ffc    0x54    mv a0,s0
    0x84011ffe    0x56    ld ra,56(sp)          ; stack access
    0x84012000    0x58    ld s0,48(sp)          ; stack access
    0x84012002    0x5a    ld s1,40(sp)          ; stack access
    0x84012004    0x5c    ld s2,32(sp)          ; stack access
    0x84012006    0x5e    ld s3,24(sp)          ; stack access
    0x84012008    0x60    addi sp,sp,64
    0x8401200a    0x62    ret
    0x8401200c    0x64    mv s2,a5
    0x8401200e    0x66    mv s1,a5
    0x84012010    0x68    mv s3,a5
    0x84012012    0x6a    j ffffffff84011ff2 <deriveCap+0x4a>
    0x84012014    0x6c    mv s2,s3
    0x84012016    0x6e    mv s1,s3
    0x84012018    0x70    j ffffffff84011ff2 <deriveCap+0x4a>
    0x8401201a    0x72    mv s2,s3
    0x8401201c    0x74    mv s1,s3
    0x8401201e    0x76    mv s3,a0
    0x84012020    0x78    j ffffffff84011ff2 <deriveCap+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 82 nodes.

Section getObjectSize (191 of 271)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 27 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `getObjectSize`:

    0x84011b22     0x0    addi sp,sp,-16
    0x84011b24     0x2    sd ra,8(sp)           ; stack access
    0x84011b26     0x4    mv a5,a0
    0x84011b28     0x6    li a4,4
    0x84011b2a     0x8    bltu a4,a0,ffffffff84011b48 <getObjectSize+0x26>
    0x84011b2e     0xc    li a4,2
    0x84011b30     0xe    beq a0,a4,ffffffff84011b60 <getObjectSize+0x3e>
    0x84011b34    0x12    bltu a4,a0,ffffffff84011b4e <getObjectSize+0x2c>
    0x84011b38    0x16    beqz a0,ffffffff84011b64 <getObjectSize+0x42>
    0x84011b3a    0x18    li a4,1
    0x84011b3c    0x1a    li a0,10
    0x84011b3e    0x1c    bne a5,a4,ffffffff84011b5c <getObjectSize+0x3a>
    0x84011b42    0x20    ld ra,8(sp)           ; stack access
    0x84011b44    0x22    addi sp,sp,16
    0x84011b46    0x24    ret
    0x84011b48    0x26    jal ra,ffffffff84011122 <Arch_getObjectSize>
    0x84011b4c    0x2a    j ffffffff84011b42 <getObjectSize+0x20>
    0x84011b4e    0x2c    li a4,3
    0x84011b50    0x2e    li a0,5
    0x84011b52    0x30    beq a5,a4,ffffffff84011b42 <getObjectSize+0x20>
    0x84011b56    0x34    addi a0,a1,5 # fffffffff8000005 <ki_end+0x73fd1005>
    0x84011b5a    0x38    j ffffffff84011b42 <getObjectSize+0x20>
    0x84011b5c    0x3a    jal ra,ffffffff8401045e <halt>
    0x84011b60    0x3e    li a0,4
    0x84011b62    0x40    j ffffffff84011b42 <getObjectSize+0x20>
    0x84011b64    0x42    mv a0,a1
    0x84011b66    0x44    j ffffffff84011b42 <getObjectSize+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 44 nodes.

Section invokeIRQControl (192 of 271)
=====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 25 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `invokeIRQControl`:

    0x840119e6     0x0    addi sp,sp,-48
    0x840119e8     0x2    sd ra,40(sp)          ; stack access
    0x840119ea     0x4    sd s0,32(sp)          ; stack access
    0x840119ec     0x6    sd s1,24(sp)          ; stack access
    0x840119ee     0x8    sd s2,16(sp)          ; stack access
    0x840119f0     0xa    mv s0,a0
    0x840119f2     0xc    mv s2,a1
    0x840119f4     0xe    mv s1,a2
    0x840119f6    0x10    mv a1,a0
    0x840119f8    0x12    li a0,1
    0x840119fa    0x14    jal ra,ffffffff8401197e <setIRQState>
    0x840119fe    0x18    slli s0,s0,0x34
    0x84011a00    0x1a    mv a3,s2
    0x84011a02    0x1c    mv a2,s1
    0x84011a04    0x1e    li a0,-1
    0x84011a06    0x20    slli a0,a0,0x3f
    0x84011a08    0x22    srli a1,s0,0x34
    0x84011a0c    0x26    jal ra,ffffffff84011576 <cteInsert>
    0x84011a10    0x2a    li a0,0
    0x84011a12    0x2c    ld ra,40(sp)          ; stack access
    0x84011a14    0x2e    ld s0,32(sp)          ; stack access
    0x84011a16    0x30    ld s1,24(sp)          ; stack access
    0x84011a18    0x32    ld s2,16(sp)          ; stack access
    0x84011a1a    0x34    addi sp,sp,48
    0x84011a1c    0x36    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 36 nodes.

Section getReceiveSlots (193 of 271)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 38 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

13 stack accesses found. Annotated code for `getReceiveSlots`:

    0x840118e2     0x0    beqz a1,ffffffff84011936 <getReceiveSlots+0x54>
    0x840118e4     0x2    addi sp,sp,-96
    0x840118e6     0x4    sd ra,88(sp)          ; stack access
    0x840118e8     0x6    sd s0,80(sp)          ; stack access
    0x840118ea     0x8    sd s1,72(sp)          ; stack access
    0x840118ec     0xa    ld s0,1008(a1) # fffffffff80003f0 <ki_end+0x73fd13f0>
    0x840118f0     0xe    ld s1,1016(a1)
    0x840118f4    0x12    ld a2,1000(a1)
    0x840118f8    0x16    mv a1,a0
    0x840118fa    0x18    addi a0,sp,40
    0x840118fc    0x1a    jal ra,ffffffff84011344 <lookupCap>
    0x84011900    0x1e    ld a5,40(sp)          ; stack access
    0x84011902    0x20    li a0,0
    0x84011904    0x22    bnez a5,ffffffff8401192c <getReceiveSlots+0x4a>
    0x84011906    0x24    ld a0,48(sp)          ; stack access
    0x84011908    0x26    sd a0,8(sp)           ; stack access
    0x8401190a    0x28    ld a1,56(sp)          ; stack access
    0x8401190c    0x2a    sd a1,16(sp)          ; stack access
    0x8401190e    0x2c    mv a3,s1
    0x84011910    0x2e    mv a2,s0
    0x84011912    0x30    jal ra,ffffffff840114a6 <lookupTargetSlot>
    0x84011916    0x34    sd a0,24(sp)          ; stack access
    0x84011918    0x36    sd a1,32(sp)          ; stack access
    0x8401191a    0x38    bnez a0,ffffffff8401193a <getReceiveSlots+0x58>
    0x8401191c    0x3a    ld a5,0(a1)
    0x8401191e    0x3c    srli a5,a5,0x3b
    0x84011920    0x3e    seqz a5,a5
    0x84011924    0x42    neg a5,a5
    0x84011928    0x46    and a0,a1,a5
    0x8401192c    0x4a    ld ra,88(sp)          ; stack access
    0x8401192e    0x4c    ld s0,80(sp)          ; stack access
    0x84011930    0x4e    ld s1,72(sp)          ; stack access
    0x84011932    0x50    addi sp,sp,96
    0x84011934    0x52    ret
    0x84011936    0x54    mv a0,a1
    0x84011938    0x56    ret
    0x8401193a    0x58    li a0,0
    0x8401193c    0x5a    j ffffffff8401192c <getReceiveSlots+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 65 nodes.

Section invokeCNodeRotate (194 of 271)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 32 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x840117ea     0x0    addi sp,sp,-64
    0x840117ec     0x2    sd ra,56(sp)          ; stack access
    0x840117ee     0x4    sd s0,48(sp)          ; stack access
    0x840117f0     0x6    sd s1,40(sp)          ; stack access
    0x840117f2     0x8    sd a0,16(sp)          ; stack access
    0x840117f4     0xa    sd a1,24(sp)          ; stack access
    0x840117f6     0xc    sd a2,0(sp)           ; stack access
    0x840117f8     0xe    sd a3,8(sp)           ; stack access
    0x840117fa    0x10    mv s0,a4
    0x840117fc    0x12    mv s1,a5
    0x840117fe    0x14    beq a4,a6,ffffffff84011826 <invokeCNodeRotate+0x3c>
    0x84011802    0x18    mv a3,a6
    0x84011804    0x1a    mv a2,a5
    0x84011806    0x1c    ld a0,0(sp)           ; stack access
    0x84011808    0x1e    ld a1,8(sp)           ; stack access
    0x8401180a    0x20    jal ra,ffffffff840116b2 <cteMove>
    0x8401180e    0x24    mv a3,s1
    0x84011810    0x26    mv a2,s0
    0x84011812    0x28    ld a0,16(sp)          ; stack access
    0x84011814    0x2a    ld a1,24(sp)          ; stack access
    0x84011816    0x2c    jal ra,ffffffff840116b2 <cteMove>
    0x8401181a    0x30    li a0,0
    0x8401181c    0x32    ld ra,56(sp)          ; stack access
    0x8401181e    0x34    ld s0,48(sp)          ; stack access
    0x84011820    0x36    ld s1,40(sp)          ; stack access
    0x84011822    0x38    addi sp,sp,64
    0x84011824    0x3a    ret
    0x84011826    0x3c    mv a3,a2
    0x84011828    0x3e    ld a4,8(sp)           ; stack access
    0x8401182a    0x40    mv a2,s0
    0x8401182c    0x42    jal ra,ffffffff8401175e <cteSwap>
    0x84011830    0x46    j ffffffff8401181a <invokeCNodeRotate+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 53 nodes.

Section invokeCNodeSaveCaller (195 of 271)
==========================================

Deriving specifications
-----------------------

Section `invokeCNodeSaveCaller` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `invokeCNodeSaveCaller`:

    0x8401171a     0x0    addi sp,sp,-32
    0x8401171c     0x2    sd ra,24(sp)          ; stack access
    0x8401171e     0x4    auipc a5,0x19
    0x84011722     0x8    ld a5,282(a5) # ffffffff8402a838 <ksCurThread>
    0x84011726     0xc    andi a5,a5,-1024
    0x8401172a    0x10    addi a2,a5,96
    0x8401172e    0x14    ld a5,96(a5)
    0x84011730    0x16    sd a5,0(sp)           ; stack access
    0x84011732    0x18    ld a4,8(a2)
    0x84011734    0x1a    sd a4,8(sp)           ; stack access
    0x84011736    0x1c    srli a4,a5,0x3b
    0x8401173a    0x20    beqz a4,ffffffff84011746 <invokeCNodeSaveCaller+0x2c>
    0x8401173c    0x22    li a3,8
    0x8401173e    0x24    bne a4,a3,ffffffff8401175a <invokeCNodeSaveCaller+0x40>
    0x84011742    0x28    andi a5,a5,1
    0x84011744    0x2a    beqz a5,ffffffff8401174e <invokeCNodeSaveCaller+0x34>
    0x84011746    0x2c    li a0,0
    0x84011748    0x2e    ld ra,24(sp)          ; stack access
    0x8401174a    0x30    addi sp,sp,32
    0x8401174c    0x32    ret
    0x8401174e    0x34    mv a3,a0
    0x84011750    0x36    ld a0,0(sp)           ; stack access
    0x84011752    0x38    ld a1,8(sp)           ; stack access
    0x84011754    0x3a    jal ra,ffffffff840116b2 <cteMove>
    0x84011758    0x3e    j ffffffff84011746 <invokeCNodeSaveCaller+0x2c>
    0x8401175a    0x40    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeSaveCaller` has 44 nodes.

Section handleFaultReply (196 of 271)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 123 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `handleFaultReply`:

    0x84010732      0x0    addi sp,sp,-48
    0x84010734      0x2    sd ra,40(sp)          ; stack access
    0x84010736      0x4    sd s0,32(sp)          ; stack access
    0x84010738      0x6    sd s1,24(sp)          ; stack access
    0x8401073a      0x8    sd s2,16(sp)          ; stack access
    0x8401073c      0xa    sd s3,8(sp)           ; stack access
    0x8401073e      0xc    mv s0,a0
    0x84010740      0xe    ld a4,80(a1)
    0x84010742     0x10    andi a3,a4,127
    0x84010746     0x14    li a5,120
    0x8401074a     0x18    bgeu a5,a3,ffffffff84010756 <handleFaultReply+0x24>
    0x8401074e     0x1c    andi a4,a4,-128
    0x84010752     0x20    ori a4,a4,120
    0x84010756     0x24    srli s1,a4,0xc
    0x8401075a     0x28    andi a6,a4,127
    0x8401075e     0x2c    ld a5,312(s0)
    0x84010762     0x30    andi a0,a5,15
    0x84010766     0x34    li a5,2
    0x84010768     0x36    beq a0,a5,ffffffff84010782 <handleFaultReply+0x50>
    0x8401076c     0x3a    li a5,3
    0x8401076e     0x3c    beq a0,a5,ffffffff84010814 <handleFaultReply+0xe2>
    0x84010772     0x40    li a5,1
    0x84010774     0x42    beq a0,a5,ffffffff84010806 <handleFaultReply+0xd4>
    0x84010778     0x46    li a5,5
    0x8401077a     0x48    bne a0,a5,ffffffff8401087e <handleFaultReply+0x14c>
    0x8401077e     0x4c    li a0,1
    0x84010780     0x4e    j ffffffff84010806 <handleFaultReply+0xd4>
    0x84010782     0x50    mv s2,a6
    0x84010784     0x52    li a5,10
    0x84010786     0x54    bgeu a5,a6,ffffffff8401078c <handleFaultReply+0x5a>
    0x8401078a     0x58    li s2,10
    0x8401078c     0x5a    mv a7,s2
    0x8401078e     0x5c    li a5,4
    0x84010790     0x5e    bgeu a5,s2,ffffffff84010796 <handleFaultReply+0x64>
    0x84010794     0x62    li a7,4
    0x84010796     0x64    beqz a6,ffffffff84010802 <handleFaultReply+0xd0>
    0x8401079a     0x68    auipc a0,0x7
    0x8401079e     0x6c    addi a0,a0,-650 # ffffffff84017510 <fault_messages>
    0x840107a2     0x70    auipc a2,0x7
    0x840107a6     0x74    addi a2,a2,-690 # ffffffff840174f0 <msgRegisters>
    0x840107aa     0x78    li a3,0
    0x840107ac     0x7a    ld a5,0(a0)
    0x840107ae     0x7c    ld a4,0(a2)
    0x840107b0     0x7e    slli a4,a4,0x3
    0x840107b2     0x80    add a4,a4,a1
    0x840107b4     0x82    ld a4,0(a4)
    0x840107b6     0x84    slli a5,a5,0x3
    0x840107b8     0x86    add a5,a5,s0
    0x840107ba     0x88    sd a4,0(a5)
    0x840107bc     0x8a    addi a3,a3,1
    0x840107be     0x8c    addi a0,a0,8
    0x840107c0     0x8e    addi a2,a2,8
    0x840107c2     0x90    bltu a3,a7,ffffffff840107ac <handleFaultReply+0x7a>
    0x840107c6     0x94    li a4,1
    0x840107c8     0x96    beqz a6,ffffffff840107ce <handleFaultReply+0x9c>
    0x840107cc     0x9a    mv a4,a7
    0x840107ce     0x9c    mv s3,a4
    0x840107d0     0x9e    bgeu a4,s2,ffffffff84010802 <handleFaultReply+0xd0>
    0x840107d4     0xa2    li a0,0
    0x840107d6     0xa4    jal ra,ffffffff840106a2 <lookupIPCBuffer>
    0x840107da     0xa8    beqz a0,ffffffff84010802 <handleFaultReply+0xd0>
    0x840107dc     0xaa    slli a4,s3,0x3
    0x840107e0     0xae    auipc a3,0x7
    0x840107e4     0xb2    addi a3,a3,-720 # ffffffff84017510 <fault_messages>
    0x840107e8     0xb6    add a3,a3,a4
    0x840107ea     0xb8    add a4,a4,a0
    0x840107ec     0xba    slli s2,s2,0x3
    0x840107ee     0xbc    add s2,s2,a0
    0x840107f0     0xbe    ld a5,0(a3)
    0x840107f2     0xc0    ld a2,8(a4)
    0x840107f4     0xc2    slli a5,a5,0x3
    0x840107f6     0xc4    add a5,a5,s0
    0x840107f8     0xc6    sd a2,0(a5)
    0x840107fa     0xc8    addi a3,a3,8
    0x840107fc     0xca    addi a4,a4,8
    0x840107fe     0xcc    bne a4,s2,ffffffff840107f0 <handleFaultReply+0xbe>
    0x84010802     0xd0    seqz a0,s1
    0x84010806     0xd4    ld ra,40(sp)          ; stack access
    0x84010808     0xd6    ld s0,32(sp)          ; stack access
    0x8401080a     0xd8    ld s1,24(sp)          ; stack access
    0x8401080c     0xda    ld s2,16(sp)          ; stack access
    0x8401080e     0xdc    ld s3,8(sp)           ; stack access
    0x84010810     0xde    addi sp,sp,48
    0x84010812     0xe0    ret
    0x84010814     0xe2    mv s3,a6
    0x84010816     0xe4    li a5,2
    0x84010818     0xe6    bgeu a5,a6,ffffffff8401081e <handleFaultReply+0xec>
    0x8401081c     0xea    li s3,2
    0x8401081e     0xec    mv a3,s3
    0x84010820     0xee    li a5,4
    0x84010822     0xf0    bgeu a5,s3,ffffffff84010828 <handleFaultReply+0xf6>
    0x84010826     0xf4    li a3,4
    0x84010828     0xf6    beqz a6,ffffffff84010878 <handleFaultReply+0x146>
    0x8401082c     0xfa    ld a5,88(a1)
    0x8401082e     0xfc    sd a5,264(s0)
    0x84010832    0x100    andi a4,a4,126
    0x84010836    0x104    beqz a4,ffffffff8401083c <handleFaultReply+0x10a>
    0x84010838    0x106    ld a5,96(a1)
    0x8401083a    0x108    sd a5,8(s0)
    0x8401083c    0x10a    li a5,1
    0x8401083e    0x10c    beqz a6,ffffffff84010844 <handleFaultReply+0x112>
    0x84010842    0x110    mv a5,a3
    0x84010844    0x112    mv s2,a5
    0x84010846    0x114    bgeu a5,s3,ffffffff84010878 <handleFaultReply+0x146>
    0x8401084a    0x118    li a0,0
    0x8401084c    0x11a    jal ra,ffffffff840106a2 <lookupIPCBuffer>
    0x84010850    0x11e    beqz a0,ffffffff84010878 <handleFaultReply+0x146>
    0x84010852    0x120    slli a5,s2,0x3
    0x84010856    0x124    slli s3,s3,0x3
    0x84010858    0x126    auipc a2,0x7
    0x8401085c    0x12a    addi a2,a2,-840 # ffffffff84017510 <fault_messages>
    0x84010860    0x12e    add a4,a2,a5
    0x84010864    0x132    ld a4,80(a4)
    0x84010866    0x134    add a3,a0,a5
    0x8401086a    0x138    ld a3,8(a3)
    0x8401086c    0x13a    slli a4,a4,0x3
    0x8401086e    0x13c    add a4,a4,s0
    0x84010870    0x13e    sd a3,0(a4)
    0x84010872    0x140    addi a5,a5,8
    0x84010874    0x142    bne a5,s3,ffffffff84010860 <handleFaultReply+0x12e>
    0x84010878    0x146    seqz a0,s1
    0x8401087c    0x14a    j ffffffff84010806 <handleFaultReply+0xd4>
    0x8401087e    0x14c    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
123 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 195 nodes.

Section Arch_setMRs_fault (197 of 271)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 42 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x8401047c     0x0    addi sp,sp,-32
    0x8401047e     0x2    sd ra,24(sp)          ; stack access
    0x84010480     0x4    sd s0,16(sp)          ; stack access
    0x84010482     0x6    sd s1,8(sp)           ; stack access
    0x84010484     0x8    sd s2,0(sp)           ; stack access
    0x84010486     0xa    li a5,5
    0x84010488     0xc    bne a3,a5,ffffffff840104e2 <Arch_setMRs_fault+0x66>
    0x8401048c    0x10    mv s2,a0
    0x8401048e    0x12    mv s0,a1
    0x84010490    0x14    mv s1,a2
    0x84010492    0x16    ld a3,264(a0)
    0x84010496    0x1a    li a2,0
    0x84010498    0x1c    mv a1,s1
    0x8401049a    0x1e    mv a0,s0
    0x8401049c    0x20    jal ra,ffffffff840100ea <setMR>
    0x840104a0    0x24    ld a3,320(s2)
    0x840104a4    0x28    li a2,1
    0x840104a6    0x2a    mv a1,s1
    0x840104a8    0x2c    mv a0,s0
    0x840104aa    0x2e    jal ra,ffffffff840100ea <setMR>
    0x840104ae    0x32    ld a3,312(s2)
    0x840104b2    0x36    srli a3,a3,0x13
    0x840104b4    0x38    andi a3,a3,1
    0x840104b6    0x3a    li a2,2
    0x840104b8    0x3c    mv a1,s1
    0x840104ba    0x3e    mv a0,s0
    0x840104bc    0x40    jal ra,ffffffff840100ea <setMR>
    0x840104c0    0x44    ld a3,312(s2)
    0x840104c4    0x48    srliw a3,a3,0x1b
    0x840104c8    0x4c    li a2,3
    0x840104ca    0x4e    mv a1,s1
    0x840104cc    0x50    mv a0,s0
    0x840104ce    0x52    jal ra,ffffffff840100ea <setMR>
    0x840104d2    0x56    slli a0,a0,0x20
    0x840104d4    0x58    srli a0,a0,0x20
    0x840104d6    0x5a    ld ra,24(sp)          ; stack access
    0x840104d8    0x5c    ld s0,16(sp)          ; stack access
    0x840104da    0x5e    ld s1,8(sp)           ; stack access
    0x840104dc    0x60    ld s2,0(sp)           ; stack access
    0x840104de    0x62    addi sp,sp,32
    0x840104e0    0x64    ret
    0x840104e2    0x66    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 62 nodes.

Section trap_entry (198 of 271)
===============================

Deriving specifications
-----------------------

Section `trap_entry` consists of 45 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc


Stack analysis
---------------

No stack accesses found. Code for `trap_entry`:

    0x84010000     0x0    csrrw t0,sscratch,t0
    0x84010004     0x4    sd ra,0(t0)
    0x84010008     0x8    sd sp,8(t0)
    0x8401000c     0xc    sd gp,16(t0)
    0x84010010    0x10    sd tp,24(t0)
    0x84010014    0x14    sd t1,40(t0)
    0x84010018    0x18    sd t2,48(t0)
    0x8401001c    0x1c    sd s0,56(t0)
    0x84010020    0x20    sd s1,64(t0)
    0x84010024    0x24    sd a0,72(t0)
    0x84010028    0x28    sd a1,80(t0)
    0x8401002c    0x2c    sd a2,88(t0)
    0x84010030    0x30    sd a3,96(t0)
    0x84010034    0x34    sd a4,104(t0)
    0x84010038    0x38    sd a5,112(t0)
    0x8401003c    0x3c    sd a6,120(t0)
    0x84010040    0x40    sd a7,128(t0)
    0x84010044    0x44    sd s2,136(t0)
    0x84010048    0x48    sd s3,144(t0)
    0x8401004c    0x4c    sd s4,152(t0)
    0x84010050    0x50    sd s5,160(t0)
    0x84010054    0x54    sd s6,168(t0)
    0x84010058    0x58    sd s7,176(t0)
    0x8401005c    0x5c    sd s8,184(t0)
    0x84010060    0x60    sd s9,192(t0)
    0x84010064    0x64    sd s10,200(t0)
    0x84010068    0x68    sd s11,208(t0)
    0x8401006c    0x6c    sd t3,216(t0)
    0x84010070    0x70    sd t4,224(t0)
    0x84010074    0x74    sd t5,232(t0)
    0x84010078    0x78    sd t6,240(t0)
    0x8401007c    0x7c    csrr ra,sscratch
    0x84010080    0x80    sd ra,32(t0)
    0x84010084    0x84    csrr ra,sstatus
    0x84010088    0x88    sd ra,256(t0)
    0x8401008c    0x8c    csrr s0,scause
    0x84010090    0x90    sd s0,248(t0)
    0x84010094    0x94    mv gp,gp
    0x84010098    0x98    auipc sp,0x1a
    0x8401009c    0x9c    addi sp,sp,1896 # ffffffff8402a800 <tlbLockCount>
    0x840100a0    0xa0    csrr ra,sepc
    0x840100a4    0xa4    sd ra,264(t0)
    0x840100a8    0xa8    bltz s0,ffffffff840100c4 <interrupt>
    0x840100ac    0xac    li s4,8
    0x840100ae    0xae    bne s0,s4,ffffffff840100bc <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `trap_entry` has 92 nodes.

Section populate_bi_frame (199 of 271)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 55 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `populate_bi_frame`:

    0x84000d82     0x0    addi sp,sp,-48
    0x84000d84     0x2    sd ra,40(sp)          ; stack access
    0x84000d86     0x4    sd s0,32(sp)          ; stack access
    0x84000d88     0x6    sd s1,24(sp)          ; stack access
    0x84000d8a     0x8    sd s2,16(sp)          ; stack access
    0x84000d8c     0xa    sd s3,8(sp)           ; stack access
    0x84000d8e     0xc    mv s3,a0
    0x84000d90     0xe    mv s2,a1
    0x84000d92    0x10    mv s1,a2
    0x84000d94    0x12    mv s0,a3
    0x84000d96    0x14    lui a1,0x1
    0x84000d98    0x16    auipc a0,0x1
    0x84000d9c    0x1a    ld a0,-1520(a0) # ffffffff840017a8 <rootserver+0x20>
    0x84000da0    0x1e    jal ra,ffffffff84015b22 <memzero>
    0x84000da4    0x22    bnez s0,ffffffff84000e08 <populate_bi_frame+0x86>
    0x84000da6    0x24    auipc a5,0x0
    0x84000daa    0x28    addi a5,a5,1922 # ffffffff84001528 <ndks_boot>
    0x84000dae    0x2c    ld a4,640(a5)
    0x84000db2    0x30    sd a4,584(a5)
    0x84000db6    0x34    li a3,12
    0x84000db8    0x36    sd a3,592(a5)
    0x84000dbc    0x3a    sd s3,8(a4)
    0x84000dc0    0x3e    ld a4,640(a5)
    0x84000dc4    0x42    sd s2,16(a4)
    0x84000dc8    0x46    ld a4,640(a5)
    0x84000dcc    0x4a    sd zero,24(a4)
    0x84000dd0    0x4e    ld a4,640(a5)
    0x84000dd4    0x52    sd s1,32(a4)
    0x84000dd6    0x54    ld a5,640(a5)
    0x84000dda    0x58    li a4,19
    0x84000ddc    0x5a    sd a4,136(a5)
    0x84000dde    0x5c    auipc a4,0x2a
    0x84000de2    0x60    ld a4,-1494(a4) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84000de6    0x64    slli a3,a4,0x4
    0x84000dea    0x68    auipc a4,0x16
    0x84000dee    0x6c    addi a4,a4,1798 # ffffffff840174f0 <msgRegisters>
    0x84000df2    0x70    add a4,a4,a3
    0x84000df4    0x72    ld a4,192(a4)
    0x84000df6    0x74    sd a4,144(a5)
    0x84000df8    0x76    sd s0,0(a5)
    0x84000dfa    0x78    ld ra,40(sp)          ; stack access
    0x84000dfc    0x7a    ld s0,32(sp)          ; stack access
    0x84000dfe    0x7c    ld s1,24(sp)          ; stack access
    0x84000e00    0x7e    ld s2,16(sp)          ; stack access
    0x84000e02    0x80    ld s3,8(sp)           ; stack access
    0x84000e04    0x82    addi sp,sp,48
    0x84000e06    0x84    ret
    0x84000e08    0x86    mv a0,s0
    0x84000e0a    0x88    jal ra,ffffffff8400064e <calculate_extra_bi_size_bits>
    0x84000e0e    0x8c    li a1,1
    0x84000e10    0x8e    sll a1,a1,a0
    0x84000e14    0x92    auipc a0,0x1
    0x84000e18    0x96    ld a0,-1636(a0) # ffffffff840017b0 <rootserver+0x28>
    0x84000e1c    0x9a    jal ra,ffffffff84015b22 <memzero>
    0x84000e20    0x9e    j ffffffff84000da6 <populate_bi_frame+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 89 nodes.

Section create_frames_of_region (200 of 271)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 80 instructions.

RVC_FTTFT____FFFFTFT.
RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
43 stack accesses found. Annotated code for `create_frames_of_region`:

    0x8400082a     0x0    addi sp,sp,-160
    0x8400082c     0x2    sd ra,152(sp)         ; stack access
    0x8400082e     0x4    sd s0,144(sp)         ; stack access
    0x84000830     0x6    sd s1,136(sp)         ; stack access
    0x84000832     0x8    sd s2,128(sp)         ; stack access
    0x84000834     0xa    sd s3,120(sp)         ; stack access
    0x84000836     0xc    sd s4,112(sp)         ; stack access
    0x84000838     0xe    sd s5,104(sp)         ; stack access
    0x8400083a    0x10    sd s6,96(sp)          ; stack access
    0x8400083c    0x12    sd s7,88(sp)          ; stack access
    0x8400083e    0x14    sd s8,80(sp)          ; stack access
    0x84000840    0x16    sd s9,72(sp)          ; stack access
    0x84000842    0x18    mv s7,a0
    0x84000844    0x1a    sd a1,32(sp)          ; stack access
    0x84000846    0x1c    sd a2,40(sp)          ; stack access
    0x84000848    0x1e    sd a3,16(sp)          ; stack access
    0x8400084a    0x20    sd a4,24(sp)          ; stack access
    0x8400084c    0x22    auipc s9,0x1
    0x84000850    0x26    ld s9,-212(s9) # ffffffff84001778 <ndks_boot+0x250>
    0x84000854    0x2a    bgeu a5,a6,ffffffff840008c6 <create_frames_of_region+0x9c>
    0x84000858    0x2e    mv s2,a7
    0x8400085a    0x30    mv s1,a6
    0x8400085c    0x32    mv s0,a5
    0x8400085e    0x34    li s3,1
    0x84000860    0x36    slli s8,s3,0x3b
    0x84000864    0x3a    lui s6,0xfe000
    0x84000868    0x3e    srli s6,s6,0x10
    0x8400086c    0x42    slli s5,s3,0x26
    0x84000870    0x46    ld a5,160(sp)         ; stack access
    0x84000872    0x48    sub s5,s5,a5
    0x84000876    0x4c    lui s4,0x1
    0x84000878    0x4e    j ffffffff8400089a <create_frames_of_region+0x70>
    0x8400087a    0x50    sd s8,48(sp)          ; stack access
    0x8400087c    0x52    slli a5,s0,0x9
    0x84000880    0x56    and a5,a5,s6
    0x84000884    0x5a    sd a5,56(sp)          ; stack access
    0x84000886    0x5c    ld a2,48(sp)          ; stack access
    0x84000888    0x5e    ld a3,56(sp)          ; stack access
    0x8400088a    0x60    ld a0,32(sp)          ; stack access
    0x8400088c    0x62    ld a1,40(sp)          ; stack access
    0x8400088e    0x64    jal ra,ffffffff84000688 <provide_cap>
    0x84000892    0x68    beqz a0,ffffffff840008b8 <create_frames_of_region+0x8e>
    0x84000894    0x6a    add s0,s0,s4
    0x84000896    0x6c    bgeu s0,s1,ffffffff840008c6 <create_frames_of_region+0x9c>
    0x8400089a    0x70    beqz s2,ffffffff8400087a <create_frames_of_region+0x50>
    0x8400089e    0x74    mv a6,s3
    0x840008a0    0x76    li a5,0
    0x840008a2    0x78    mv a4,s3
    0x840008a4    0x7a    add a3,s5,s0
    0x840008a8    0x7e    mv a2,s0
    0x840008aa    0x80    ld a0,16(sp)          ; stack access
    0x840008ac    0x82    ld a1,24(sp)          ; stack access
    0x840008ae    0x84    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x840008b2    0x88    sd a0,48(sp)          ; stack access
    0x840008b4    0x8a    sd a1,56(sp)          ; stack access
    0x840008b6    0x8c    j ffffffff84000886 <create_frames_of_region+0x5c>
    0x840008b8    0x8e    sd zero,0(s7) # fffffffffe000000 <ki_end+0x79fd1000>  ; stack access
    0x840008bc    0x92    sd zero,8(s7)         ; stack access
    0x840008c0    0x96    sd zero,16(s7)        ; stack access
    0x840008c4    0x9a    j ffffffff840008dc <create_frames_of_region+0xb2>
    0x840008c6    0x9c    sd s9,0(s7)           ; stack access
    0x840008ca    0xa0    auipc a5,0x1
    0x840008ce    0xa4    ld a5,-338(a5) # ffffffff84001778 <ndks_boot+0x250>
    0x840008d2    0xa8    sd a5,8(s7)           ; stack access
    0x840008d6    0xac    li a5,1
    0x840008d8    0xae    sd a5,16(s7)          ; stack access
    0x840008dc    0xb2    mv a0,s7
    0x840008de    0xb4    ld ra,152(sp)         ; stack access
    0x840008e0    0xb6    ld s0,144(sp)         ; stack access
    0x840008e2    0xb8    ld s1,136(sp)         ; stack access
    0x840008e4    0xba    ld s2,128(sp)         ; stack access
    0x840008e6    0xbc    ld s3,120(sp)         ; stack access
    0x840008e8    0xbe    ld s4,112(sp)         ; stack access
    0x840008ea    0xc0    ld s5,104(sp)         ; stack access
    0x840008ec    0xc2    ld s6,96(sp)          ; stack access
    0x840008ee    0xc4    ld s7,88(sp)          ; stack access
    0x840008f0    0xc6    ld s8,80(sp)          ; stack access
    0x840008f2    0xc8    ld s9,72(sp)          ; stack access
    0x840008f4    0xca    addi sp,sp,160
    0x840008f6    0xcc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 136 nodes.

Section create_bi_frame_cap (201 of 271)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 30 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x84000602     0x0    addi sp,sp,-80
    0x84000604     0x2    sd ra,72(sp)          ; stack access
    0x84000606     0x4    sd s0,64(sp)          ; stack access
    0x84000608     0x6    sd s1,56(sp)          ; stack access
    0x8400060a     0x8    sd a0,16(sp)          ; stack access
    0x8400060c     0xa    sd a1,24(sp)          ; stack access
    0x8400060e     0xc    mv a0,a2
    0x84000610     0xe    mv a1,a3
    0x84000612    0x10    mv a3,a4
    0x84000614    0x12    li a6,0
    0x84000616    0x14    li a5,0
    0x84000618    0x16    li a4,1
    0x8400061a    0x18    auipc a2,0x1
    0x8400061e    0x1c    ld a2,398(a2) # ffffffff840017a8 <rootserver+0x20>
    0x84000622    0x20    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x84000626    0x24    mv s1,a0
    0x84000628    0x26    mv s0,a1
    0x8400062a    0x28    ld a0,16(sp)          ; stack access
    0x8400062c    0x2a    ld a1,24(sp)          ; stack access
    0x8400062e    0x2c    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000632    0x30    sd s1,288(a0)
    0x84000636    0x34    sd s0,296(a0)
    0x8400063a    0x38    sd zero,304(a0)
    0x8400063e    0x3c    li a5,3
    0x84000640    0x3e    sd a5,312(a0)
    0x84000644    0x42    ld ra,72(sp)          ; stack access
    0x84000646    0x44    ld s0,64(sp)          ; stack access
    0x84000648    0x46    ld s1,56(sp)          ; stack access
    0x8400064a    0x48    addi sp,sp,80
    0x8400064c    0x4a    ret

Proving inst theorems
---------------------

30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 48 nodes.

Section map_kernel_window (202 of 271)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 69 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_window`:

    0x84000474     0x0    addi sp,sp,-64
    0x84000476     0x2    sd ra,56(sp)          ; stack access
    0x84000478     0x4    sd s0,48(sp)          ; stack access
    0x8400047a     0x6    sd s1,40(sp)          ; stack access
    0x8400047c     0x8    sd s2,32(sp)          ; stack access
    0x8400047e     0xa    sd s3,24(sp)          ; stack access
    0x84000480     0xc    sd s4,16(sp)          ; stack access
    0x84000482     0xe    sd s5,8(sp)           ; stack access
    0x84000484    0x10    sd s6,0(sp)           ; stack access
    0x84000486    0x12    li s1,-1
    0x84000488    0x14    slli s1,s1,0x26
    0x8400048a    0x16    auipc s6,0x2d
    0x8400048e    0x1a    addi s6,s6,-1162 # ffffffff8402d000 <kernel_root_pageTable>
    0x84000492    0x1e    li s2,1
    0x84000494    0x20    slli s5,s2,0x26
    0x84000498    0x24    lui s4,0x40000
    0x8400049c    0x28    lui s3,0x80000
    0x840004a0    0x2c    srli s0,s1,0x1e
    0x840004a4    0x30    andi s0,s0,511
    0x840004a8    0x34    slli s0,s0,0x3
    0x840004aa    0x36    add s0,s0,s6
    0x840004ac    0x38    mv a1,s2
    0x840004ae    0x3a    add a0,s1,s5
    0x840004b2    0x3e    jal ra,ffffffff84010160 <pte_next>
    0x840004b6    0x42    sd a0,0(s0)
    0x840004b8    0x44    add s1,s1,s4
    0x840004ba    0x46    bne s1,s3,ffffffff840004a0 <map_kernel_window+0x2c>
    0x840004be    0x4a    li s0,1
    0x840004c0    0x4c    slli a5,s0,0x20
    0x840004c4    0x50    auipc s1,0x2c
    0x840004c8    0x54    addi s1,s1,-1220 # ffffffff8402c000 <kernel_image_level2_pt>
    0x840004cc    0x58    add s1,s1,a5
    0x840004ce    0x5a    auipc s2,0x2e
    0x840004d2    0x5e    addi s2,s2,-1230 # ffffffff8402e000 <kernel_root_pageTable+0x1000>
    0x840004d6    0x62    li a1,0
    0x840004d8    0x64    mv a0,s1
    0x840004da    0x66    jal ra,ffffffff84010160 <pte_next>
    0x840004de    0x6a    sd a0,-2032(s2)
    0x840004e2    0x6e    li a1,0
    0x840004e4    0x70    mv a0,s1
    0x840004e6    0x72    jal ra,ffffffff84010160 <pte_next>
    0x840004ea    0x76    sd a0,-16(s2)
    0x840004ee    0x7a    li s2,0
    0x840004f0    0x7c    slli s0,s0,0x1f
    0x840004f2    0x7e    auipc s5,0x2c
    0x840004f6    0x82    addi s5,s5,-1266 # ffffffff8402c000 <kernel_image_level2_pt>
    0x840004fa    0x86    lui s4,0x200
    0x840004fe    0x8a    li s3,3
    0x84000500    0x8c    slli s3,s3,0x1e
    0x84000502    0x8e    slli s1,s2,0x3
    0x84000506    0x92    add s1,s1,s5
    0x84000508    0x94    li a1,1
    0x8400050a    0x96    mv a0,s0
    0x8400050c    0x98    jal ra,ffffffff84010160 <pte_next>
    0x84000510    0x9c    sd a0,0(s1)
    0x84000512    0x9e    addi s2,s2,1
    0x84000514    0xa0    add s0,s0,s4
    0x84000516    0xa2    bne s0,s3,ffffffff84000502 <map_kernel_window+0x8e>
    0x8400051a    0xa6    jal ra,ffffffff84000450 <map_kernel_devices>
    0x8400051e    0xaa    ld ra,56(sp)          ; stack access
    0x84000520    0xac    ld s0,48(sp)          ; stack access
    0x84000522    0xae    ld s1,40(sp)          ; stack access
    0x84000524    0xb0    ld s2,32(sp)          ; stack access
    0x84000526    0xb2    ld s3,24(sp)          ; stack access
    0x84000528    0xb4    ld s4,16(sp)          ; stack access
    0x8400052a    0xb6    ld s5,8(sp)           ; stack access
    0x8400052c    0xb8    ld s6,0(sp)           ; stack access
    0x8400052e    0xba    addi sp,sp,64
    0x84000530    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 99 nodes.

Section map_kernel_devices (203 of 271)
=======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `map_kernel_devices`:

    0x84000450     0x0    addi sp,sp,-32
    0x84000452     0x2    sd ra,24(sp)          ; stack access
    0x84000454     0x4    li a2,1
    0x84000456     0x6    lui a1,0xc0000
    0x8400045a     0xa    lui a0,0xc000
    0x8400045e     0xe    jal ra,ffffffff840000c4 <map_kernel_frame>
    0x84000462    0x12    lui a0,0xc000
    0x84000466    0x16    lui a1,0xc001
    0x8400046a    0x1a    jal ra,ffffffff84000366 <reserve_region>
    0x8400046e    0x1e    ld ra,24(sp)          ; stack access
    0x84000470    0x20    addi sp,sp,32
    0x84000472    0x22    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 17 nodes.

Section map_it_frame_cap (204 of 271)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 47 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x840001fa     0x0    addi sp,sp,-96
    0x840001fc     0x2    sd ra,88(sp)          ; stack access
    0x840001fe     0x4    sd s0,80(sp)          ; stack access
    0x84000200     0x6    sd s1,72(sp)          ; stack access
    0x84000202     0x8    sd s2,64(sp)          ; stack access
    0x84000204     0xa    sd s3,56(sp)          ; stack access
    0x84000206     0xc    sd a0,16(sp)          ; stack access
    0x84000208     0xe    sd a1,24(sp)          ; stack access
    0x8400020a    0x10    mv s3,a2
    0x8400020c    0x12    sd a2,0(sp)           ; stack access
    0x8400020e    0x14    mv s0,a3
    0x84000210    0x16    sd a3,8(sp)           ; stack access
    0x84000212    0x18    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000216    0x1c    mv s2,a0
    0x84000218    0x1e    mv a0,s3
    0x8400021a    0x20    mv a1,s0
    0x8400021c    0x22    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000220    0x26    mv s0,a0
    0x84000222    0x28    slli a1,s3,0x19
    0x84000226    0x2c    srli a1,a1,0x19
    0x84000228    0x2e    srli s1,s3,0x26
    0x8400022c    0x32    andi s1,s1,1
    0x8400022e    0x34    beqz s1,ffffffff84000236 <map_it_frame_cap+0x3c>
    0x84000230    0x36    li a5,-1
    0x84000232    0x38    slli a5,a5,0x27
    0x84000234    0x3a    or a1,a1,a5
    0x84000236    0x3c    mv a0,s2
    0x84000238    0x3e    jal ra,ffffffff84010882 <lookupPTSlot>
    0x8400023c    0x42    sd a0,32(sp)          ; stack access
    0x8400023e    0x44    sd a1,40(sp)          ; stack access
    0x84000240    0x46    li a5,1
    0x84000242    0x48    slli a5,a5,0x26
    0x84000244    0x4a    add s0,s0,a5
    0x84000246    0x4c    srli s0,s0,0x2
    0x84000248    0x4e    lui a5,0xfff00
    0x8400024c    0x52    srli a5,a5,0xa
    0x8400024e    0x54    and s0,s0,a5
    0x84000250    0x56    ori s0,s0,223
    0x84000254    0x5a    sd s0,0(a0)
    0x84000256    0x5c    sfence.vma
    0x8400025a    0x60    ld ra,88(sp)          ; stack access
    0x8400025c    0x62    ld s0,80(sp)          ; stack access
    0x8400025e    0x64    ld s1,72(sp)          ; stack access
    0x84000260    0x66    ld s2,64(sp)          ; stack access
    0x84000262    0x68    ld s3,56(sp)          ; stack access
    0x84000264    0x6a    addi sp,sp,96
    0x84000266    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 71 nodes.

Section map_it_pt_cap (205 of 271)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 46 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

18 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x84000190     0x0    addi sp,sp,-80
    0x84000192     0x2    sd ra,72(sp)          ; stack access
    0x84000194     0x4    sd s0,64(sp)          ; stack access
    0x84000196     0x6    sd s1,56(sp)          ; stack access
    0x84000198     0x8    sd s2,48(sp)          ; stack access
    0x8400019a     0xa    sd a0,16(sp)          ; stack access
    0x8400019c     0xc    sd a1,24(sp)          ; stack access
    0x8400019e     0xe    sd a2,0(sp)           ; stack access
    0x840001a0    0x10    sd a3,8(sp)           ; stack access
    0x840001a2    0x12    slli s1,a2,0x19
    0x840001a6    0x16    srli s1,s1,0x19
    0x840001a8    0x18    srli a2,a2,0x26
    0x840001aa    0x1a    andi a2,a2,1
    0x840001ac    0x1c    beqz a2,ffffffff840001b4 <map_it_pt_cap+0x24>
    0x840001ae    0x1e    li a5,-1
    0x840001b0    0x20    slli a5,a5,0x27
    0x840001b2    0x22    or s1,s1,a5
    0x840001b4    0x24    ld a0,16(sp)          ; stack access
    0x840001b6    0x26    ld a1,24(sp)          ; stack access
    0x840001b8    0x28    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x840001bc    0x2c    mv s2,a0
    0x840001be    0x2e    ld a0,0(sp)           ; stack access
    0x840001c0    0x30    ld a1,8(sp)           ; stack access
    0x840001c2    0x32    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x840001c6    0x36    mv s0,a0
    0x840001c8    0x38    mv a1,s1
    0x840001ca    0x3a    mv a0,s2
    0x840001cc    0x3c    jal ra,ffffffff84010882 <lookupPTSlot>
    0x840001d0    0x40    sd a0,32(sp)          ; stack access
    0x840001d2    0x42    sd a1,40(sp)          ; stack access
    0x840001d4    0x44    li a5,1
    0x840001d6    0x46    slli a5,a5,0x26
    0x840001d8    0x48    add s0,s0,a5
    0x840001da    0x4a    srli s0,s0,0x2
    0x840001dc    0x4c    lui a5,0xfff00
    0x840001e0    0x50    srli a5,a5,0xa
    0x840001e2    0x52    and s0,s0,a5
    0x840001e4    0x54    ori s0,s0,193
    0x840001e8    0x58    sd s0,0(a0)
    0x840001ea    0x5a    sfence.vma
    0x840001ee    0x5e    ld ra,72(sp)          ; stack access
    0x840001f0    0x60    ld s0,64(sp)          ; stack access
    0x840001f2    0x62    ld s1,56(sp)          ; stack access
    0x840001f4    0x64    ld s2,48(sp)          ; stack access
    0x840001f6    0x66    addi sp,sp,80
    0x840001f8    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 72 nodes.

Section c_handle_syscall (206 of 271)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 10 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x8401731c     0x0    addi sp,sp,-16
    0x8401731e     0x2    sd ra,8(sp)           ; stack access
    0x84017320     0x4    li a5,-1
    0x84017322     0x6    beq a7,a5,ffffffff84017332 <c_handle_syscall+0x16>
    0x84017326     0xa    li a5,-2
    0x84017328     0xc    beq a7,a5,ffffffff84017336 <c_handle_syscall+0x1a>
    0x8401732c    0x10    mv a0,a7
    0x8401732e    0x12    jal ra,ffffffff84016d10 <slowpath>
    0x84017332    0x16    jal ra,ffffffff84016d28 <fastpath_call>
    0x84017336    0x1a    jal ra,ffffffff84016ff8 <fastpath_reply_recv>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 18 nodes.

Section slowpath (207 of 271)
=============================

Deriving specifications
-----------------------

Section `slowpath` consists of 8 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `slowpath`:

    0x84016d10     0x0    addi sp,sp,-16
    0x84016d12     0x2    sd ra,8(sp)           ; stack access
    0x84016d14     0x4    li a5,-9
    0x84016d16     0x6    bgeu a5,a0,ffffffff84016d22 <slowpath+0x12>
    0x84016d1a     0xa    jal ra,ffffffff84016bae <handleSyscall>
    0x84016d1e     0xe    jal ra,ffffffff840103bc <restore_user_context>
    0x84016d22    0x12    jal ra,ffffffff840143f0 <handleUnknownSyscall>
    0x84016d26    0x16    j ffffffff84016d1e <slowpath+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 14 nodes.

Section decodeWriteRegisters (208 of 271)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 66 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x84015514     0x0    addi sp,sp,-64
    0x84015516     0x2    sd ra,56(sp)          ; stack access
    0x84015518     0x4    sd s0,48(sp)          ; stack access
    0x8401551a     0x6    sd s1,40(sp)          ; stack access
    0x8401551c     0x8    sd s2,32(sp)          ; stack access
    0x8401551e     0xa    sd s3,24(sp)          ; stack access
    0x84015520     0xc    sd s4,16(sp)          ; stack access
    0x84015522     0xe    sd a0,0(sp)           ; stack access
    0x84015524    0x10    li a5,1
    0x84015526    0x12    bgeu a5,a2,ffffffff84015590 <decodeWriteRegisters+0x7c>
    0x8401552a    0x16    mv s0,a2
    0x8401552c    0x18    mv s1,a3
    0x8401552e    0x1a    mv a1,a3
    0x84015530    0x1c    li a0,1
    0x84015532    0x1e    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015536    0x22    mv s2,a0
    0x84015538    0x24    addi s0,s0,-2
    0x8401553a    0x26    bltu s0,a0,ffffffff8401559e <decodeWriteRegisters+0x8a>
    0x8401553e    0x2a    ld a5,0(sp)           ; stack access
    0x84015540    0x2c    slli s0,a5,0x19
    0x84015544    0x30    srli s0,s0,0x19
    0x84015546    0x32    srli a5,a5,0x26
    0x84015548    0x34    andi a5,a5,1
    0x8401554a    0x36    beqz a5,ffffffff84015552 <decodeWriteRegisters+0x3e>
    0x8401554c    0x38    li a5,-1
    0x8401554e    0x3a    slli a5,a5,0x27
    0x84015550    0x3c    or s0,s0,a5
    0x84015552    0x3e    auipc s4,0x15
    0x84015556    0x42    ld s4,742(s4) # ffffffff8402a838 <ksCurThread>
    0x8401555a    0x46    beq s4,s0,ffffffff840155ac <decodeWriteRegisters+0x98>
    0x8401555e    0x4a    mv a1,s1
    0x84015560    0x4c    li a0,0
    0x84015562    0x4e    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015566    0x52    mv s3,a0
    0x84015568    0x54    li a1,2
    0x8401556a    0x56    mv a0,s4
    0x8401556c    0x58    jal ra,ffffffff840124f6 <setThreadState>
    0x84015570    0x5c    mv a4,s1
    0x84015572    0x5e    li a3,0
    0x84015574    0x60    mv a2,s2
    0x84015576    0x62    andi a1,s3,1
    0x8401557a    0x66    mv a0,s0
    0x8401557c    0x68    jal ra,ffffffff8401542c <invokeTCB_WriteRegisters>
    0x84015580    0x6c    ld ra,56(sp)          ; stack access
    0x84015582    0x6e    ld s0,48(sp)          ; stack access
    0x84015584    0x70    ld s1,40(sp)          ; stack access
    0x84015586    0x72    ld s2,32(sp)          ; stack access
    0x84015588    0x74    ld s3,24(sp)          ; stack access
    0x8401558a    0x76    ld s4,16(sp)          ; stack access
    0x8401558c    0x78    addi sp,sp,64
    0x8401558e    0x7a    ret
    0x84015590    0x7c    li a5,7
    0x84015592    0x7e    auipc a4,0x3
    0x84015596    0x82    sd a5,318(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401559a    0x86    li a0,3
    0x8401559c    0x88    j ffffffff84015580 <decodeWriteRegisters+0x6c>
    0x8401559e    0x8a    li a5,7
    0x840155a0    0x8c    auipc a4,0x3
    0x840155a4    0x90    sd a5,304(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840155a8    0x94    li a0,3
    0x840155aa    0x96    j ffffffff84015580 <decodeWriteRegisters+0x6c>
    0x840155ac    0x98    li a5,3
    0x840155ae    0x9a    auipc a4,0x3
    0x840155b2    0x9e    sd a5,290(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840155b6    0xa2    li a0,3
    0x840155b8    0xa4    j ffffffff84015580 <decodeWriteRegisters+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 97 nodes.

Section invokeTCB_WriteRegisters (209 of 271)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 84 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x8401542c     0x0    addi sp,sp,-80
    0x8401542e     0x2    sd ra,72(sp)          ; stack access
    0x84015430     0x4    sd s0,64(sp)          ; stack access
    0x84015432     0x6    sd s1,56(sp)          ; stack access
    0x84015434     0x8    sd s2,48(sp)          ; stack access
    0x84015436     0xa    sd s3,40(sp)          ; stack access
    0x84015438     0xc    sd s4,32(sp)          ; stack access
    0x8401543a     0xe    sd s5,24(sp)          ; stack access
    0x8401543c    0x10    sd s6,16(sp)          ; stack access
    0x8401543e    0x12    sd s7,8(sp)           ; stack access
    0x84015440    0x14    sd s8,0(sp)           ; stack access
    0x84015442    0x16    mv s2,a0
    0x84015444    0x18    mv s5,a1
    0x84015446    0x1a    mv s7,a2
    0x84015448    0x1c    mv s3,a4
    0x8401544a    0x1e    mv s4,a2
    0x8401544c    0x20    li a5,32
    0x84015450    0x24    bgeu a5,a2,ffffffff84015458 <invokeTCB_WriteRegisters+0x2c>
    0x84015454    0x28    li s4,32
    0x84015458    0x2c    beqz s7,ffffffff840154d4 <invokeTCB_WriteRegisters+0xa8>
    0x8401545c    0x30    mv a1,s3
    0x8401545e    0x32    li a0,2
    0x84015460    0x34    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015464    0x38    sd a0,264(s2)
    0x84015468    0x3c    auipc s6,0x2
    0x8401546c    0x40    addi s6,s6,384 # ffffffff840175e8 <frameRegisters+0x8>
    0x84015470    0x44    li s1,1
    0x84015472    0x46    li s8,16
    0x84015474    0x48    bgeu s1,s4,ffffffff84015494 <invokeTCB_WriteRegisters+0x68>
    0x84015478    0x4c    ld s0,0(s6)
    0x8401547c    0x50    mv a1,s3
    0x8401547e    0x52    addi a0,s1,2
    0x84015482    0x56    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015486    0x5a    slli s0,s0,0x3
    0x84015488    0x5c    add s0,s0,s2
    0x8401548a    0x5e    sd a0,0(s0)
    0x8401548c    0x60    addi s1,s1,1
    0x8401548e    0x62    addi s6,s6,8
    0x84015490    0x64    bne s1,s8,ffffffff84015474 <invokeTCB_WriteRegisters+0x48>
    0x84015494    0x68    li a5,16
    0x84015496    0x6a    bgeu a5,s7,ffffffff840154d4 <invokeTCB_WriteRegisters+0xa8>
    0x8401549a    0x6e    mv a1,s3
    0x8401549c    0x70    li a0,18
    0x8401549e    0x72    jal ra,ffffffff8401012a <getSyscallArg>
    0x840154a2    0x76    sd a0,72(s2)
    0x840154a6    0x7a    auipc s6,0x2
    0x840154aa    0x7e    addi s6,s6,450 # ffffffff84017668 <gpRegisters+0x8>
    0x840154ae    0x82    li s1,17
    0x840154b0    0x84    li s7,32
    0x840154b4    0x88    bgeu s1,s4,ffffffff840154d4 <invokeTCB_WriteRegisters+0xa8>
    0x840154b8    0x8c    ld s0,0(s6)
    0x840154bc    0x90    mv a1,s3
    0x840154be    0x92    addi a0,s1,2
    0x840154c2    0x96    jal ra,ffffffff8401012a <getSyscallArg>
    0x840154c6    0x9a    slli s0,s0,0x3
    0x840154c8    0x9c    add s0,s0,s2
    0x840154ca    0x9e    sd a0,0(s0)
    0x840154cc    0xa0    addi s1,s1,1
    0x840154ce    0xa2    addi s6,s6,8
    0x840154d0    0xa4    bne s1,s7,ffffffff840154b4 <invokeTCB_WriteRegisters+0x88>
    0x840154d4    0xa8    ld a5,264(s2)
    0x840154d8    0xac    sd a5,272(s2)
    0x840154dc    0xb0    bnez s5,ffffffff84015506 <invokeTCB_WriteRegisters+0xda>
    0x840154e0    0xb4    auipc a5,0x15
    0x840154e4    0xb8    ld a5,856(a5) # ffffffff8402a838 <ksCurThread>
    0x840154e8    0xbc    beq a5,s2,ffffffff8401550e <invokeTCB_WriteRegisters+0xe2>
    0x840154ec    0xc0    li a0,0
    0x840154ee    0xc2    ld ra,72(sp)          ; stack access
    0x840154f0    0xc4    ld s0,64(sp)          ; stack access
    0x840154f2    0xc6    ld s1,56(sp)          ; stack access
    0x840154f4    0xc8    ld s2,48(sp)          ; stack access
    0x840154f6    0xca    ld s3,40(sp)          ; stack access
    0x840154f8    0xcc    ld s4,32(sp)          ; stack access
    0x840154fa    0xce    ld s5,24(sp)          ; stack access
    0x840154fc    0xd0    ld s6,16(sp)          ; stack access
    0x840154fe    0xd2    ld s7,8(sp)           ; stack access
    0x84015500    0xd4    ld s8,0(sp)           ; stack access
    0x84015502    0xd6    addi sp,sp,80
    0x84015504    0xd8    ret
    0x84015506    0xda    mv a0,s2
    0x84015508    0xdc    jal ra,ffffffff84013aa0 <restart>
    0x8401550c    0xe0    j ffffffff840154e0 <invokeTCB_WriteRegisters+0xb4>
    0x8401550e    0xe2    jal ra,ffffffff84012490 <rescheduleRequired>
    0x84015512    0xe6    j ffffffff840154ec <invokeTCB_WriteRegisters+0xc0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
84 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 138 nodes.

Section decodeReadRegisters (210 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 72 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x84015370     0x0    addi sp,sp,-64
    0x84015372     0x2    sd ra,56(sp)          ; stack access
    0x84015374     0x4    sd s0,48(sp)          ; stack access
    0x84015376     0x6    sd s1,40(sp)          ; stack access
    0x84015378     0x8    sd s2,32(sp)          ; stack access
    0x8401537a     0xa    sd s3,24(sp)          ; stack access
    0x8401537c     0xc    sd s4,16(sp)          ; stack access
    0x8401537e     0xe    sd a0,0(sp)           ; stack access
    0x84015380    0x10    li a5,1
    0x84015382    0x12    bgeu a5,a2,ffffffff840153f0 <decodeReadRegisters+0x80>
    0x84015386    0x16    mv s3,a3
    0x84015388    0x18    mv s0,a4
    0x8401538a    0x1a    mv a1,a4
    0x8401538c    0x1c    li a0,1
    0x8401538e    0x1e    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015392    0x22    mv s2,a0
    0x84015394    0x24    addi a4,a0,-1
    0x84015398    0x28    li a5,31
    0x8401539a    0x2a    bltu a5,a4,ffffffff840153fe <decodeReadRegisters+0x8e>
    0x8401539e    0x2e    ld a5,0(sp)           ; stack access
    0x840153a0    0x30    slli s1,a5,0x19
    0x840153a4    0x34    srli s1,s1,0x19
    0x840153a6    0x36    srli a5,a5,0x26
    0x840153a8    0x38    andi a5,a5,1
    0x840153aa    0x3a    beqz a5,ffffffff840153b2 <decodeReadRegisters+0x42>
    0x840153ac    0x3c    li a5,-1
    0x840153ae    0x3e    slli a5,a5,0x27
    0x840153b0    0x40    or s1,s1,a5
    0x840153b2    0x42    auipc s4,0x15
    0x840153b6    0x46    ld s4,1158(s4) # ffffffff8402a838 <ksCurThread>
    0x840153ba    0x4a    beq s4,s1,ffffffff8401541e <decodeReadRegisters+0xae>
    0x840153be    0x4e    mv a1,s0
    0x840153c0    0x50    li a0,0
    0x840153c2    0x52    jal ra,ffffffff8401012a <getSyscallArg>
    0x840153c6    0x56    mv s0,a0
    0x840153c8    0x58    li a1,2
    0x840153ca    0x5a    mv a0,s4
    0x840153cc    0x5c    jal ra,ffffffff840124f6 <setThreadState>
    0x840153d0    0x60    mv a4,s3
    0x840153d2    0x62    li a3,0
    0x840153d4    0x64    mv a2,s2
    0x840153d6    0x66    andi a1,s0,1
    0x840153da    0x6a    mv a0,s1
    0x840153dc    0x6c    jal ra,ffffffff8401525e <invokeTCB_ReadRegisters>
    0x840153e0    0x70    ld ra,56(sp)          ; stack access
    0x840153e2    0x72    ld s0,48(sp)          ; stack access
    0x840153e4    0x74    ld s1,40(sp)          ; stack access
    0x840153e6    0x76    ld s2,32(sp)          ; stack access
    0x840153e8    0x78    ld s3,24(sp)          ; stack access
    0x840153ea    0x7a    ld s4,16(sp)          ; stack access
    0x840153ec    0x7c    addi sp,sp,64
    0x840153ee    0x7e    ret
    0x840153f0    0x80    li a5,7
    0x840153f2    0x82    auipc a4,0x3
    0x840153f6    0x86    sd a5,734(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840153fa    0x8a    li a0,3
    0x840153fc    0x8c    j ffffffff840153e0 <decodeReadRegisters+0x70>
    0x840153fe    0x8e    auipc a5,0x3
    0x84015402    0x92    addi a5,a5,-1022 # ffffffff84018000 <riscvKSASIDTable>
    0x84015406    0x96    li a4,4
    0x84015408    0x98    sd a4,1744(a5)
    0x8401540c    0x9c    li a4,1
    0x8401540e    0x9e    sd a4,1712(a5)
    0x84015412    0xa2    li a4,32
    0x84015416    0xa6    sd a4,1720(a5)
    0x8401541a    0xaa    li a0,3
    0x8401541c    0xac    j ffffffff840153e0 <decodeReadRegisters+0x70>
    0x8401541e    0xae    li a5,3
    0x84015420    0xb0    auipc a4,0x3
    0x84015424    0xb4    sd a5,688(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015428    0xb8    li a0,3
    0x8401542a    0xba    j ffffffff840153e0 <decodeReadRegisters+0x70>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
72 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 105 nodes.

Section invokeTCB_ReadRegisters (211 of 271)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 106 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x8401525e      0x0    addi sp,sp,-48
    0x84015260      0x2    sd ra,40(sp)          ; stack access
    0x84015262      0x4    sd s0,32(sp)          ; stack access
    0x84015264      0x6    sd s1,24(sp)          ; stack access
    0x84015266      0x8    sd s2,16(sp)          ; stack access
    0x84015268      0xa    sd s3,8(sp)           ; stack access
    0x8401526a      0xc    mv s1,a0
    0x8401526c      0xe    mv s0,a2
    0x8401526e     0x10    mv s3,a4
    0x84015270     0x12    auipc s2,0x15
    0x84015274     0x16    ld s2,1480(s2) # ffffffff8402a838 <ksCurThread>
    0x84015278     0x1a    bnez a1,ffffffff840152f4 <invokeTCB_ReadRegisters+0x96>
    0x8401527a     0x1c    beqz s3,ffffffff84015314 <invokeTCB_ReadRegisters+0xb6>
    0x8401527e     0x20    mv a1,s2
    0x84015280     0x22    li a0,1
    0x84015282     0x24    jal ra,ffffffff840106a2 <lookupIPCBuffer>
    0x84015286     0x28    sd zero,72(s2)
    0x8401528a     0x2c    beqz s0,ffffffff84015368 <invokeTCB_ReadRegisters+0x10a>
    0x8401528c     0x2e    ld a5,264(s1)
    0x84015290     0x32    sd a5,88(s2)
    0x84015294     0x36    li a5,1
    0x84015296     0x38    bgeu a5,s0,ffffffff840152fa <invokeTCB_ReadRegisters+0x9c>
    0x8401529a     0x3c    ld a5,0(s1)
    0x8401529c     0x3e    sd a5,96(s2)
    0x840152a0     0x42    li a5,2
    0x840152a2     0x44    bgeu a5,s0,ffffffff8401532c <invokeTCB_ReadRegisters+0xce>
    0x840152a6     0x48    ld a5,8(s1)
    0x840152a8     0x4a    sd a5,104(s2)
    0x840152ac     0x4e    li a5,3
    0x840152ae     0x50    bgeu a5,s0,ffffffff84015330 <invokeTCB_ReadRegisters+0xd2>
    0x840152b2     0x54    ld a5,16(s1)
    0x840152b4     0x56    sd a5,112(s2)
    0x840152b8     0x5a    li a5,4
    0x840152ba     0x5c    li a3,4
    0x840152bc     0x5e    bgeu a5,s0,ffffffff840152fc <invokeTCB_ReadRegisters+0x9e>
    0x840152c0     0x62    li a3,4
    0x840152c2     0x64    beqz a0,ffffffff8401536c <invokeTCB_ReadRegisters+0x10e>
    0x840152c4     0x66    bgeu a3,s0,ffffffff84015302 <invokeTCB_ReadRegisters+0xa4>
    0x840152c8     0x6a    slli a4,a3,0x3
    0x840152cc     0x6e    auipc a2,0x2
    0x840152d0     0x72    addi a2,a2,788 # ffffffff840175e0 <frameRegisters>
    0x840152d4     0x76    add a2,a2,a4
    0x840152d6     0x78    add a4,a4,a0
    0x840152d8     0x7a    li a1,16
    0x840152da     0x7c    addi a3,a3,1
    0x840152dc     0x7e    ld a5,0(a2)
    0x840152de     0x80    slli a5,a5,0x3
    0x840152e0     0x82    add a5,a5,s1
    0x840152e2     0x84    ld a5,0(a5)
    0x840152e4     0x86    sd a5,8(a4)
    0x840152e6     0x88    bgeu a3,s0,ffffffff84015302 <invokeTCB_ReadRegisters+0xa4>
    0x840152ea     0x8c    addi a2,a2,8
    0x840152ec     0x8e    addi a4,a4,8
    0x840152ee     0x90    bne a3,a1,ffffffff840152da <invokeTCB_ReadRegisters+0x7c>
    0x840152f2     0x94    j ffffffff84015302 <invokeTCB_ReadRegisters+0xa4>
    0x840152f4     0x96    jal ra,ffffffff84013000 <suspend>
    0x840152f8     0x9a    j ffffffff8401527a <invokeTCB_ReadRegisters+0x1c>
    0x840152fa     0x9c    li a3,1
    0x840152fc     0x9e    beqz a0,ffffffff8401536c <invokeTCB_ReadRegisters+0x10e>
    0x840152fe     0xa0    bltu a3,s0,ffffffff840152c4 <invokeTCB_ReadRegisters+0x66>
    0x84015302     0xa4    li a5,16
    0x84015304     0xa6    bltu a5,s0,ffffffff84015338 <invokeTCB_ReadRegisters+0xda>
    0x84015308     0xaa    li a5,0
    0x8401530a     0xac    add a5,a5,a3
    0x8401530c     0xae    andi a5,a5,127
    0x84015310     0xb2    sd a5,80(s2)
    0x84015314     0xb6    li a1,1
    0x84015316     0xb8    mv a0,s2
    0x84015318     0xba    jal ra,ffffffff840124f6 <setThreadState>
    0x8401531c     0xbe    li a0,0
    0x8401531e     0xc0    ld ra,40(sp)          ; stack access
    0x84015320     0xc2    ld s0,32(sp)          ; stack access
    0x84015322     0xc4    ld s1,24(sp)          ; stack access
    0x84015324     0xc6    ld s2,16(sp)          ; stack access
    0x84015326     0xc8    ld s3,8(sp)           ; stack access
    0x84015328     0xca    addi sp,sp,48
    0x8401532a     0xcc    ret
    0x8401532c     0xce    li a3,2
    0x8401532e     0xd0    j ffffffff840152fc <invokeTCB_ReadRegisters+0x9e>
    0x84015330     0xd2    li a3,3
    0x84015332     0xd4    j ffffffff840152fc <invokeTCB_ReadRegisters+0x9e>
    0x84015334     0xd6    mv a5,s0
    0x84015336     0xd8    j ffffffff8401530a <invokeTCB_ReadRegisters+0xac>
    0x84015338     0xda    ld a5,72(s1)
    0x8401533a     0xdc    sd a5,136(a0)
    0x8401533c     0xde    auipc a1,0x2
    0x84015340     0xe2    addi a1,a1,812 # ffffffff84017668 <gpRegisters+0x8>
    0x84015344     0xe6    addi a0,a0,144
    0x84015348     0xea    addi s0,s0,-16
    0x8401534a     0xec    li a5,1
    0x8401534c     0xee    li a2,16
    0x8401534e     0xf0    beq a5,s0,ffffffff84015334 <invokeTCB_ReadRegisters+0xd6>
    0x84015352     0xf4    ld a4,0(a1)
    0x84015354     0xf6    slli a4,a4,0x3
    0x84015356     0xf8    add a4,a4,s1
    0x84015358     0xfa    ld a4,0(a4)
    0x8401535a     0xfc    sd a4,0(a0)
    0x8401535c     0xfe    addi a5,a5,1
    0x8401535e    0x100    addi a1,a1,8
    0x84015360    0x102    addi a0,a0,8
    0x84015362    0x104    bne a5,a2,ffffffff8401534e <invokeTCB_ReadRegisters+0xf0>
    0x84015366    0x108    j ffffffff8401530a <invokeTCB_ReadRegisters+0xac>
    0x84015368    0x10a    mv a3,s0
    0x8401536a    0x10c    bnez a0,ffffffff84015302 <invokeTCB_ReadRegisters+0xa4>
    0x8401536c    0x10e    li a5,0
    0x8401536e    0x110    j ffffffff8401530a <invokeTCB_ReadRegisters+0xac>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
106 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 173 nodes.

Section decodeCopyRegisters (212 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 64 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x840151b4     0x0    addi sp,sp,-48
    0x840151b6     0x2    sd ra,40(sp)          ; stack access
    0x840151b8     0x4    sd s0,32(sp)          ; stack access
    0x840151ba     0x6    sd s1,24(sp)          ; stack access
    0x840151bc     0x8    sd a0,0(sp)           ; stack access
    0x840151be     0xa    sd a1,8(sp)           ; stack access
    0x840151c0     0xc    beqz a2,ffffffff84015238 <decodeCopyRegisters+0x84>
    0x840151c2     0xe    auipc a5,0x3
    0x840151c6    0x12    ld a5,1742(a5) # ffffffff84018890 <current_extra_caps>
    0x840151ca    0x16    beqz a5,ffffffff84015238 <decodeCopyRegisters+0x84>
    0x840151cc    0x18    ld a5,0(a5)
    0x840151ce    0x1a    srli a2,a5,0x3b
    0x840151d2    0x1e    li a4,12
    0x840151d4    0x20    bne a2,a4,ffffffff84015246 <decodeCopyRegisters+0x92>
    0x840151d8    0x24    slli s0,a5,0x19
    0x840151dc    0x28    srli s0,s0,0x19
    0x840151de    0x2a    srli a5,a5,0x26
    0x840151e0    0x2c    andi a5,a5,1
    0x840151e2    0x2e    beqz a5,ffffffff840151ea <decodeCopyRegisters+0x36>
    0x840151e4    0x30    li a5,-1
    0x840151e6    0x32    slli a5,a5,0x27
    0x840151e8    0x34    or s0,s0,a5
    0x840151ea    0x36    mv a1,a3
    0x840151ec    0x38    li a0,0
    0x840151ee    0x3a    jal ra,ffffffff8401012a <getSyscallArg>
    0x840151f2    0x3e    mv s1,a0
    0x840151f4    0x40    li a1,2
    0x840151f6    0x42    auipc a0,0x15
    0x840151fa    0x46    ld a0,1602(a0) # ffffffff8402a838 <ksCurThread>
    0x840151fe    0x4a    jal ra,ffffffff840124f6 <setThreadState>
    0x84015202    0x4e    ld a5,0(sp)           ; stack access
    0x84015204    0x50    slli a0,a5,0x19
    0x84015208    0x54    srli a0,a0,0x19
    0x8401520a    0x56    srli a5,a5,0x26
    0x8401520c    0x58    andi a5,a5,1
    0x8401520e    0x5a    beqz a5,ffffffff84015216 <decodeCopyRegisters+0x62>
    0x84015210    0x5c    li a5,-1
    0x84015212    0x5e    slli a5,a5,0x27
    0x84015214    0x60    or a0,a0,a5
    0x84015216    0x62    li a6,0
    0x84015218    0x64    andi a5,s1,8
    0x8401521c    0x68    andi a4,s1,4
    0x84015220    0x6c    andi a3,s1,2
    0x84015224    0x70    andi a2,s1,1
    0x84015228    0x74    mv a1,s0
    0x8401522a    0x76    jal ra,ffffffff8401510a <invokeTCB_CopyRegisters>
    0x8401522e    0x7a    ld ra,40(sp)          ; stack access
    0x84015230    0x7c    ld s0,32(sp)          ; stack access
    0x84015232    0x7e    ld s1,24(sp)          ; stack access
    0x84015234    0x80    addi sp,sp,48
    0x84015236    0x82    ret
    0x84015238    0x84    li a5,7
    0x8401523a    0x86    auipc a4,0x3
    0x8401523e    0x8a    sd a5,1174(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015242    0x8e    li a0,3
    0x84015244    0x90    j ffffffff8401522e <decodeCopyRegisters+0x7a>
    0x84015246    0x92    auipc a5,0x3
    0x8401524a    0x96    addi a5,a5,-582 # ffffffff84018000 <riscvKSASIDTable>
    0x8401524e    0x9a    li a4,2
    0x84015250    0x9c    sd a4,1744(a5)
    0x84015254    0xa0    li a4,1
    0x84015256    0xa2    sd a4,1704(a5)
    0x8401525a    0xa6    li a0,3
    0x8401525c    0xa8    j ffffffff8401522e <decodeCopyRegisters+0x7a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 93 nodes.

Section invokeTCB_CopyRegisters (213 of 271)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x8401510a     0x0    addi sp,sp,-48
    0x8401510c     0x2    sd ra,40(sp)          ; stack access
    0x8401510e     0x4    sd s0,32(sp)          ; stack access
    0x84015110     0x6    sd s1,24(sp)          ; stack access
    0x84015112     0x8    sd s2,16(sp)          ; stack access
    0x84015114     0xa    sd s3,8(sp)           ; stack access
    0x84015116     0xc    sd s4,0(sp)           ; stack access
    0x84015118     0xe    mv s0,a0
    0x8401511a    0x10    mv s1,a1
    0x8401511c    0x12    mv s4,a3
    0x8401511e    0x14    mv s3,a4
    0x84015120    0x16    mv s2,a5
    0x84015122    0x18    bnez a2,ffffffff8401519e <invokeTCB_CopyRegisters+0x94>
    0x84015124    0x1a    bnez s4,ffffffff840151a6 <invokeTCB_CopyRegisters+0x9c>
    0x84015128    0x1e    beqz s3,ffffffff84015158 <invokeTCB_CopyRegisters+0x4e>
    0x8401512c    0x22    auipc a3,0x2
    0x84015130    0x26    addi a3,a3,1204 # ffffffff840175e0 <frameRegisters>
    0x84015134    0x2a    auipc a1,0x2
    0x84015138    0x2e    addi a1,a1,1324 # ffffffff84017660 <gpRegisters>
    0x8401513c    0x32    ld a4,0(a3)
    0x8401513e    0x34    slli a4,a4,0x3
    0x84015140    0x36    add a2,s1,a4
    0x84015144    0x3a    ld a2,0(a2)
    0x84015146    0x3c    add a4,a4,s0
    0x84015148    0x3e    sd a2,0(a4)
    0x8401514a    0x40    addi a3,a3,8
    0x8401514c    0x42    bne a3,a1,ffffffff8401513c <invokeTCB_CopyRegisters+0x32>
    0x84015150    0x46    ld a5,264(s0)
    0x84015154    0x4a    sd a5,272(s0)
    0x84015158    0x4e    beqz s2,ffffffff84015180 <invokeTCB_CopyRegisters+0x76>
    0x8401515c    0x52    auipc a4,0x2
    0x84015160    0x56    addi a4,a4,1284 # ffffffff84017660 <gpRegisters>
    0x84015164    0x5a    auipc a2,0x2
    0x84015168    0x5e    addi a2,a2,1404 # ffffffff840176e0 <gpRegisters+0x80>
    0x8401516c    0x62    ld a5,0(a4)
    0x8401516e    0x64    slli a5,a5,0x3
    0x84015170    0x66    add a3,s1,a5
    0x84015174    0x6a    ld a3,0(a3)
    0x84015176    0x6c    add a5,a5,s0
    0x84015178    0x6e    sd a3,0(a5)
    0x8401517a    0x70    addi a4,a4,8
    0x8401517c    0x72    bne a4,a2,ffffffff8401516c <invokeTCB_CopyRegisters+0x62>
    0x84015180    0x76    auipc a5,0x15
    0x84015184    0x7a    ld a5,1720(a5) # ffffffff8402a838 <ksCurThread>
    0x84015188    0x7e    beq a5,s0,ffffffff840151ae <invokeTCB_CopyRegisters+0xa4>
    0x8401518c    0x82    li a0,0
    0x8401518e    0x84    ld ra,40(sp)          ; stack access
    0x84015190    0x86    ld s0,32(sp)          ; stack access
    0x84015192    0x88    ld s1,24(sp)          ; stack access
    0x84015194    0x8a    ld s2,16(sp)          ; stack access
    0x84015196    0x8c    ld s3,8(sp)           ; stack access
    0x84015198    0x8e    ld s4,0(sp)           ; stack access
    0x8401519a    0x90    addi sp,sp,48
    0x8401519c    0x92    ret
    0x8401519e    0x94    mv a0,a1
    0x840151a0    0x96    jal ra,ffffffff84013000 <suspend>
    0x840151a4    0x9a    j ffffffff84015124 <invokeTCB_CopyRegisters+0x1a>
    0x840151a6    0x9c    mv a0,s0
    0x840151a8    0x9e    jal ra,ffffffff84013aa0 <restart>
    0x840151ac    0xa2    j ffffffff84015128 <invokeTCB_CopyRegisters+0x1e>
    0x840151ae    0xa4    jal ra,ffffffff84012490 <rescheduleRequired>
    0x840151b2    0xa8    j ffffffff8401518c <invokeTCB_CopyRegisters+0x82>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 101 nodes.

Section decodeSetSchedParams (214 of 271)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 101 instructions.


Stack analysis
---------------

19 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x84014dba      0x0    addi sp,sp,-128
    0x84014dbc      0x2    sd ra,120(sp)         ; stack access
    0x84014dbe      0x4    sd s0,112(sp)         ; stack access
    0x84014dc0      0x6    sd s1,104(sp)         ; stack access
    0x84014dc2      0x8    sd s2,96(sp)          ; stack access
    0x84014dc4      0xa    sd a0,64(sp)          ; stack access
    0x84014dc6      0xc    sd a1,72(sp)          ; stack access
    0x84014dc8      0xe    li a5,1
    0x84014dca     0x10    bgeu a5,a2,ffffffff84014e60 <decodeSetSchedParams+0xa6>
    0x84014dce     0x14    mv s2,a3
    0x84014dd0     0x16    auipc a5,0x4
    0x84014dd4     0x1a    ld a5,-1344(a5) # ffffffff84018890 <current_extra_caps>
    0x84014dd8     0x1e    beqz a5,ffffffff84014e60 <decodeSetSchedParams+0xa6>
    0x84014dda     0x20    ld a5,0(a5)
    0x84014ddc     0x22    srli a3,a5,0x3b
    0x84014de0     0x26    li a4,12
    0x84014de2     0x28    bne a3,a4,ffffffff84014e6e <decodeSetSchedParams+0xb4>
    0x84014de6     0x2c    slli s0,a5,0x19
    0x84014dea     0x30    srli s0,s0,0x19
    0x84014dec     0x32    srli a5,a5,0x26
    0x84014dee     0x34    andi a5,a5,1
    0x84014df0     0x36    beqz a5,ffffffff84014df8 <decodeSetSchedParams+0x3e>
    0x84014df2     0x38    li a5,-1
    0x84014df4     0x3a    slli a5,a5,0x27
    0x84014df6     0x3c    or s0,s0,a5
    0x84014df8     0x3e    mv a1,s2
    0x84014dfa     0x40    li a0,0
    0x84014dfc     0x42    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014e00     0x46    mv s1,a0
    0x84014e02     0x48    ld s0,352(s0)
    0x84014e06     0x4c    bltu s0,a0,ffffffff84014e90 <decodeSetSchedParams+0xd6>
    0x84014e0a     0x50    mv a1,s2
    0x84014e0c     0x52    li a0,1
    0x84014e0e     0x54    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014e12     0x58    mv s2,a0
    0x84014e14     0x5a    bltu s0,a0,ffffffff84014eaa <decodeSetSchedParams+0xf0>
    0x84014e18     0x5e    li a1,2
    0x84014e1a     0x60    auipc a0,0x16
    0x84014e1e     0x64    ld a0,-1506(a0) # ffffffff8402a838 <ksCurThread>
    0x84014e22     0x68    jal ra,ffffffff840124f6 <setThreadState>
    0x84014e26     0x6c    ld a5,64(sp)          ; stack access
    0x84014e28     0x6e    slli a0,a5,0x19
    0x84014e2c     0x72    srli a0,a0,0x19
    0x84014e2e     0x74    srli a5,a5,0x26
    0x84014e30     0x76    andi a5,a5,1
    0x84014e32     0x78    beqz a5,ffffffff84014e3a <decodeSetSchedParams+0x80>
    0x84014e34     0x7a    li a5,-1
    0x84014e36     0x7c    slli a5,a5,0x27
    0x84014e38     0x7e    or a0,a0,a5
    0x84014e3a     0x80    li a5,9
    0x84014e3c     0x82    sd a5,56(sp)          ; stack access
    0x84014e3e     0x84    sd zero,48(sp)        ; stack access
    0x84014e40     0x86    sd zero,32(sp)        ; stack access
    0x84014e42     0x88    sd zero,40(sp)        ; stack access
    0x84014e44     0x8a    sd zero,24(sp)        ; stack access
    0x84014e46     0x8c    sd zero,16(sp)        ; stack access
    0x84014e48     0x8e    sd zero,0(sp)         ; stack access
    0x84014e4a     0x90    sd zero,8(sp)         ; stack access
    0x84014e4c     0x92    li a7,0
    0x84014e4e     0x94    li a5,0
    0x84014e50     0x96    li a6,0
    0x84014e52     0x98    mv a4,s2
    0x84014e54     0x9a    mv a3,s1
    0x84014e56     0x9c    li a2,0
    0x84014e58     0x9e    li a1,0
    0x84014e5a     0xa0    jal ra,ffffffff840148c6 <invokeTCB_ThreadControl>
    0x84014e5e     0xa4    j ffffffff84014e84 <decodeSetSchedParams+0xca>
    0x84014e60     0xa6    li a5,7
    0x84014e62     0xa8    auipc a4,0x4
    0x84014e66     0xac    sd a5,-1938(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014e6a     0xb0    li a0,3
    0x84014e6c     0xb2    j ffffffff84014e84 <decodeSetSchedParams+0xca>
    0x84014e6e     0xb4    auipc a5,0x3
    0x84014e72     0xb8    addi a5,a5,402 # ffffffff84018000 <riscvKSASIDTable>
    0x84014e76     0xbc    li a4,2
    0x84014e78     0xbe    sd a4,1744(a5)
    0x84014e7c     0xc2    li a4,1
    0x84014e7e     0xc4    sd a4,1704(a5)
    0x84014e82     0xc8    li a0,3
    0x84014e84     0xca    ld ra,120(sp)         ; stack access
    0x84014e86     0xcc    ld s0,112(sp)         ; stack access
    0x84014e88     0xce    ld s1,104(sp)         ; stack access
    0x84014e8a     0xd0    ld s2,96(sp)          ; stack access
    0x84014e8c     0xd2    addi sp,sp,128
    0x84014e8e     0xd4    ret
    0x84014e90     0xd6    auipc a5,0x3
    0x84014e94     0xda    addi a5,a5,368 # ffffffff84018000 <riscvKSASIDTable>
    0x84014e98     0xde    li a4,4
    0x84014e9a     0xe0    sd a4,1744(a5)
    0x84014e9e     0xe4    sd zero,1712(a5)
    0x84014ea2     0xe8    sd s0,1720(a5)
    0x84014ea6     0xec    li a0,3
    0x84014ea8     0xee    j ffffffff84014e84 <decodeSetSchedParams+0xca>
    0x84014eaa     0xf0    auipc a5,0x3
    0x84014eae     0xf4    addi a5,a5,342 # ffffffff84018000 <riscvKSASIDTable>
    0x84014eb2     0xf8    li a4,4
    0x84014eb4     0xfa    sd a4,1744(a5)
    0x84014eb8     0xfe    sd zero,1712(a5)
    0x84014ebc    0x102    sd s0,1720(a5)
    0x84014ec0    0x106    li a0,3
    0x84014ec2    0x108    j ffffffff84014e84 <decodeSetSchedParams+0xca>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 152 nodes.

Section decodeSetMCPriority (215 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 84 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x84014ce2     0x0    addi sp,sp,-128
    0x84014ce4     0x2    sd ra,120(sp)         ; stack access
    0x84014ce6     0x4    sd s0,112(sp)         ; stack access
    0x84014ce8     0x6    sd s1,104(sp)         ; stack access
    0x84014cea     0x8    sd a0,64(sp)          ; stack access
    0x84014cec     0xa    sd a1,72(sp)          ; stack access
    0x84014cee     0xc    beqz a2,ffffffff84014d72 <decodeSetMCPriority+0x90>
    0x84014cf0     0xe    auipc a5,0x4
    0x84014cf4    0x12    ld a5,-1120(a5) # ffffffff84018890 <current_extra_caps>
    0x84014cf8    0x16    beqz a5,ffffffff84014d72 <decodeSetMCPriority+0x90>
    0x84014cfa    0x18    ld a5,0(a5)
    0x84014cfc    0x1a    srli a2,a5,0x3b
    0x84014d00    0x1e    li a4,12
    0x84014d02    0x20    bne a2,a4,ffffffff84014d88 <decodeSetMCPriority+0xa6>
    0x84014d06    0x24    slli s0,a5,0x19
    0x84014d0a    0x28    srli s0,s0,0x19
    0x84014d0c    0x2a    srli a5,a5,0x26
    0x84014d0e    0x2c    andi a5,a5,1
    0x84014d10    0x2e    beqz a5,ffffffff84014d18 <decodeSetMCPriority+0x36>
    0x84014d12    0x30    li a5,-1
    0x84014d14    0x32    slli a5,a5,0x27
    0x84014d16    0x34    or s0,s0,a5
    0x84014d18    0x36    mv a1,a3
    0x84014d1a    0x38    li a0,0
    0x84014d1c    0x3a    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014d20    0x3e    mv s1,a0
    0x84014d22    0x40    ld a5,352(s0)
    0x84014d26    0x44    bltu a5,a0,ffffffff84014da0 <decodeSetMCPriority+0xbe>
    0x84014d2a    0x48    li a1,2
    0x84014d2c    0x4a    auipc a0,0x16
    0x84014d30    0x4e    ld a0,-1268(a0) # ffffffff8402a838 <ksCurThread>
    0x84014d34    0x52    jal ra,ffffffff840124f6 <setThreadState>
    0x84014d38    0x56    ld a5,64(sp)          ; stack access
    0x84014d3a    0x58    slli a0,a5,0x19
    0x84014d3e    0x5c    srli a0,a0,0x19
    0x84014d40    0x5e    srli a5,a5,0x26
    0x84014d42    0x60    andi a5,a5,1
    0x84014d44    0x62    beqz a5,ffffffff84014d4c <decodeSetMCPriority+0x6a>
    0x84014d46    0x64    li a5,-1
    0x84014d48    0x66    slli a5,a5,0x27
    0x84014d4a    0x68    or a0,a0,a5
    0x84014d4c    0x6a    li a5,8
    0x84014d4e    0x6c    sd a5,56(sp)          ; stack access
    0x84014d50    0x6e    sd zero,48(sp)        ; stack access
    0x84014d52    0x70    sd zero,32(sp)        ; stack access
    0x84014d54    0x72    sd zero,40(sp)        ; stack access
    0x84014d56    0x74    sd zero,24(sp)        ; stack access
    0x84014d58    0x76    sd zero,16(sp)        ; stack access
    0x84014d5a    0x78    sd zero,0(sp)         ; stack access
    0x84014d5c    0x7a    sd zero,8(sp)         ; stack access
    0x84014d5e    0x7c    li a7,0
    0x84014d60    0x7e    li a5,0
    0x84014d62    0x80    li a6,0
    0x84014d64    0x82    li a4,0
    0x84014d66    0x84    mv a3,s1
    0x84014d68    0x86    li a2,0
    0x84014d6a    0x88    li a1,0
    0x84014d6c    0x8a    jal ra,ffffffff840148c6 <invokeTCB_ThreadControl>
    0x84014d70    0x8e    j ffffffff84014d7e <decodeSetMCPriority+0x9c>
    0x84014d72    0x90    li a5,7
    0x84014d74    0x92    auipc a4,0x4
    0x84014d78    0x96    sd a5,-1700(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014d7c    0x9a    li a0,3
    0x84014d7e    0x9c    ld ra,120(sp)         ; stack access
    0x84014d80    0x9e    ld s0,112(sp)         ; stack access
    0x84014d82    0xa0    ld s1,104(sp)         ; stack access
    0x84014d84    0xa2    addi sp,sp,128
    0x84014d86    0xa4    ret
    0x84014d88    0xa6    auipc a5,0x3
    0x84014d8c    0xaa    addi a5,a5,632 # ffffffff84018000 <riscvKSASIDTable>
    0x84014d90    0xae    li a4,2
    0x84014d92    0xb0    sd a4,1744(a5)
    0x84014d96    0xb4    li a4,1
    0x84014d98    0xb6    sd a4,1704(a5)
    0x84014d9c    0xba    li a0,3
    0x84014d9e    0xbc    j ffffffff84014d7e <decodeSetMCPriority+0x9c>
    0x84014da0    0xbe    auipc a4,0x3
    0x84014da4    0xc2    addi a4,a4,608 # ffffffff84018000 <riscvKSASIDTable>
    0x84014da8    0xc6    li a3,4
    0x84014daa    0xc8    sd a3,1744(a4)
    0x84014dae    0xcc    sd zero,1712(a4)
    0x84014db2    0xd0    sd a5,1720(a4)
    0x84014db6    0xd4    li a0,3
    0x84014db8    0xd6    j ffffffff84014d7e <decodeSetMCPriority+0x9c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
84 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 127 nodes.

Section decodeSetPriority (216 of 271)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 84 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeSetPriority`:

    0x84014c0a     0x0    addi sp,sp,-128
    0x84014c0c     0x2    sd ra,120(sp)         ; stack access
    0x84014c0e     0x4    sd s0,112(sp)         ; stack access
    0x84014c10     0x6    sd s1,104(sp)         ; stack access
    0x84014c12     0x8    sd a0,64(sp)          ; stack access
    0x84014c14     0xa    sd a1,72(sp)          ; stack access
    0x84014c16     0xc    beqz a2,ffffffff84014c9a <decodeSetPriority+0x90>
    0x84014c18     0xe    auipc a5,0x4
    0x84014c1c    0x12    ld a5,-904(a5) # ffffffff84018890 <current_extra_caps>
    0x84014c20    0x16    beqz a5,ffffffff84014c9a <decodeSetPriority+0x90>
    0x84014c22    0x18    ld a5,0(a5)
    0x84014c24    0x1a    srli a2,a5,0x3b
    0x84014c28    0x1e    li a4,12
    0x84014c2a    0x20    bne a2,a4,ffffffff84014cb0 <decodeSetPriority+0xa6>
    0x84014c2e    0x24    slli s0,a5,0x19
    0x84014c32    0x28    srli s0,s0,0x19
    0x84014c34    0x2a    srli a5,a5,0x26
    0x84014c36    0x2c    andi a5,a5,1
    0x84014c38    0x2e    beqz a5,ffffffff84014c40 <decodeSetPriority+0x36>
    0x84014c3a    0x30    li a5,-1
    0x84014c3c    0x32    slli a5,a5,0x27
    0x84014c3e    0x34    or s0,s0,a5
    0x84014c40    0x36    mv a1,a3
    0x84014c42    0x38    li a0,0
    0x84014c44    0x3a    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014c48    0x3e    mv s1,a0
    0x84014c4a    0x40    ld a5,352(s0)
    0x84014c4e    0x44    bltu a5,a0,ffffffff84014cc8 <decodeSetPriority+0xbe>
    0x84014c52    0x48    li a1,2
    0x84014c54    0x4a    auipc a0,0x16
    0x84014c58    0x4e    ld a0,-1052(a0) # ffffffff8402a838 <ksCurThread>
    0x84014c5c    0x52    jal ra,ffffffff840124f6 <setThreadState>
    0x84014c60    0x56    ld a5,64(sp)          ; stack access
    0x84014c62    0x58    slli a0,a5,0x19
    0x84014c66    0x5c    srli a0,a0,0x19
    0x84014c68    0x5e    srli a5,a5,0x26
    0x84014c6a    0x60    andi a5,a5,1
    0x84014c6c    0x62    beqz a5,ffffffff84014c74 <decodeSetPriority+0x6a>
    0x84014c6e    0x64    li a5,-1
    0x84014c70    0x66    slli a5,a5,0x27
    0x84014c72    0x68    or a0,a0,a5
    0x84014c74    0x6a    li a5,1
    0x84014c76    0x6c    sd a5,56(sp)          ; stack access
    0x84014c78    0x6e    sd zero,48(sp)        ; stack access
    0x84014c7a    0x70    sd zero,32(sp)        ; stack access
    0x84014c7c    0x72    sd zero,40(sp)        ; stack access
    0x84014c7e    0x74    sd zero,24(sp)        ; stack access
    0x84014c80    0x76    sd zero,16(sp)        ; stack access
    0x84014c82    0x78    sd zero,0(sp)         ; stack access
    0x84014c84    0x7a    sd zero,8(sp)         ; stack access
    0x84014c86    0x7c    li a7,0
    0x84014c88    0x7e    li a5,0
    0x84014c8a    0x80    li a6,0
    0x84014c8c    0x82    mv a4,s1
    0x84014c8e    0x84    li a3,0
    0x84014c90    0x86    li a2,0
    0x84014c92    0x88    li a1,0
    0x84014c94    0x8a    jal ra,ffffffff840148c6 <invokeTCB_ThreadControl>
    0x84014c98    0x8e    j ffffffff84014ca6 <decodeSetPriority+0x9c>
    0x84014c9a    0x90    li a5,7
    0x84014c9c    0x92    auipc a4,0x4
    0x84014ca0    0x96    sd a5,-1484(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014ca4    0x9a    li a0,3
    0x84014ca6    0x9c    ld ra,120(sp)         ; stack access
    0x84014ca8    0x9e    ld s0,112(sp)         ; stack access
    0x84014caa    0xa0    ld s1,104(sp)         ; stack access
    0x84014cac    0xa2    addi sp,sp,128
    0x84014cae    0xa4    ret
    0x84014cb0    0xa6    auipc a5,0x3
    0x84014cb4    0xaa    addi a5,a5,848 # ffffffff84018000 <riscvKSASIDTable>
    0x84014cb8    0xae    li a4,2
    0x84014cba    0xb0    sd a4,1744(a5)
    0x84014cbe    0xb4    li a4,1
    0x84014cc0    0xb6    sd a4,1704(a5)
    0x84014cc4    0xba    li a0,3
    0x84014cc6    0xbc    j ffffffff84014ca6 <decodeSetPriority+0x9c>
    0x84014cc8    0xbe    auipc a4,0x3
    0x84014ccc    0xc2    addi a4,a4,824 # ffffffff84018000 <riscvKSASIDTable>
    0x84014cd0    0xc6    li a3,4
    0x84014cd2    0xc8    sd a3,1744(a4)
    0x84014cd6    0xcc    sd zero,1712(a4)
    0x84014cda    0xd0    sd a5,1720(a4)
    0x84014cde    0xd4    li a0,3
    0x84014ce0    0xd6    j ffffffff84014ca6 <decodeSetPriority+0x9c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
84 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 127 nodes.

Section decodeDomainInvocation (217 of 271)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 70 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x840147e6     0x0    li a4,29
    0x840147e8     0x2    bne a0,a4,ffffffff84014850 <decodeDomainInvocation+0x6a>
    0x840147ec     0x6    mv a5,a1
    0x840147ee     0x8    mv a1,a2
    0x840147f0     0xa    beqz a5,ffffffff8401485e <decodeDomainInvocation+0x78>
    0x840147f2     0xc    addi sp,sp,-32
    0x840147f4     0xe    sd ra,24(sp)          ; stack access
    0x840147f6    0x10    sd s0,16(sp)          ; stack access
    0x840147f8    0x12    sd s1,8(sp)           ; stack access
    0x840147fa    0x14    li a0,0
    0x840147fc    0x16    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014800    0x1a    mv s1,a0
    0x84014802    0x1c    li a5,15
    0x84014804    0x1e    bltu a5,a0,ffffffff8401486c <decodeDomainInvocation+0x86>
    0x84014808    0x22    auipc a5,0x4
    0x8401480c    0x26    ld a5,136(a5) # ffffffff84018890 <current_extra_caps>
    0x84014810    0x2a    beqz a5,ffffffff84014882 <decodeDomainInvocation+0x9c>
    0x84014812    0x2c    ld s0,0(a5)
    0x84014814    0x2e    srli a4,s0,0x3b
    0x84014818    0x32    li a5,12
    0x8401481a    0x34    bne a4,a5,ffffffff84014890 <decodeDomainInvocation+0xaa>
    0x8401481e    0x38    li a1,2
    0x84014820    0x3a    auipc a0,0x16
    0x84014824    0x3e    ld a0,24(a0) # ffffffff8402a838 <ksCurThread>
    0x84014828    0x42    jal ra,ffffffff840124f6 <setThreadState>
    0x8401482c    0x46    slli a0,s0,0x19
    0x84014830    0x4a    srli a0,a0,0x19
    0x84014832    0x4c    srli s0,s0,0x26
    0x84014834    0x4e    andi s0,s0,1
    0x84014836    0x50    beqz s0,ffffffff8401483e <decodeDomainInvocation+0x58>
    0x84014838    0x52    li a5,-1
    0x8401483a    0x54    slli a5,a5,0x27
    0x8401483c    0x56    or a0,a0,a5
    0x8401483e    0x58    mv a1,s1
    0x84014840    0x5a    jal ra,ffffffff84012cd8 <setDomain>
    0x84014844    0x5e    li a0,0
    0x84014846    0x60    ld ra,24(sp)          ; stack access
    0x84014848    0x62    ld s0,16(sp)          ; stack access
    0x8401484a    0x64    ld s1,8(sp)           ; stack access
    0x8401484c    0x66    addi sp,sp,32
    0x8401484e    0x68    ret
    0x84014850    0x6a    li a5,3
    0x84014852    0x6c    auipc a4,0x4
    0x84014856    0x70    sd a5,-386(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401485a    0x74    li a0,3
    0x8401485c    0x76    ret
    0x8401485e    0x78    li a5,7
    0x84014860    0x7a    auipc a4,0x4
    0x84014864    0x7e    sd a5,-400(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014868    0x82    li a0,3
    0x8401486a    0x84    ret
    0x8401486c    0x86    auipc a5,0x3
    0x84014870    0x8a    addi a5,a5,1940 # ffffffff84018000 <riscvKSASIDTable>
    0x84014874    0x8e    li a4,1
    0x84014876    0x90    sd a4,1744(a5)
    0x8401487a    0x94    sd zero,1696(a5)
    0x8401487e    0x98    li a0,3
    0x84014880    0x9a    j ffffffff84014846 <decodeDomainInvocation+0x60>
    0x84014882    0x9c    li a5,7
    0x84014884    0x9e    auipc a4,0x4
    0x84014888    0xa2    sd a5,-436(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401488c    0xa6    li a0,3
    0x8401488e    0xa8    j ffffffff84014846 <decodeDomainInvocation+0x60>
    0x84014890    0xaa    auipc a5,0x3
    0x84014894    0xae    addi a5,a5,1904 # ffffffff84018000 <riscvKSASIDTable>
    0x84014898    0xb2    li a4,1
    0x8401489a    0xb4    sd a4,1744(a5)
    0x8401489e    0xb8    sd a4,1696(a5)
    0x840148a2    0xbc    li a0,3
    0x840148a4    0xbe    j ffffffff84014846 <decodeDomainInvocation+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
70 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 104 nodes.

Section c_handle_exception (218 of 271)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 16 instructions.

Skipping 14202573 csrr a0,scause


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x84014494     0x0    addi sp,sp,-16
    0x84014496     0x2    sd ra,8(sp)           ; stack access
    0x84014498     0x4    csrr a0,scause
    0x8401449c     0x8    li a5,15
    0x8401449e     0xa    bltu a5,a0,ffffffff840144b2 <c_handle_exception+0x1e>
    0x840144a2     0xe    li a5,1
    0x840144a4    0x10    sll a5,a5,a0
    0x840144a8    0x14    lui a4,0xb
    0x840144aa    0x16    addi a4,a4,162 # b0a2 <KERNEL_OFFSET-0xfffffffeffff4f5e>
    0x840144ae    0x1a    and a5,a5,a4
    0x840144b0    0x1c    bnez a5,ffffffff840144ba <c_handle_exception+0x26>
    0x840144b2    0x1e    li a1,0
    0x840144b4    0x20    jal ra,ffffffff84014422 <handleUserLevelFault>
    0x840144b8    0x24    j ffffffff840144be <c_handle_exception+0x2a>
    0x840144ba    0x26    jal ra,ffffffff84014462 <handleVMFaultEvent>
    0x840144be    0x2a    jal ra,ffffffff840103bc <restore_user_context>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 25 nodes.

Section handleUserLevelFault (219 of 271)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x84014422     0x0    addi sp,sp,-16
    0x84014424     0x2    sd ra,8(sp)           ; stack access
    0x84014426     0x4    auipc a4,0x4
    0x8401442a     0x8    addi a4,a4,-1062 # ffffffff84018000 <riscvKSASIDTable>
    0x8401442e     0xc    slli a1,a1,0x4
    0x84014430     0xe    li a5,-1
    0x84014432    0x10    srli a5,a5,0x20
    0x84014434    0x12    and a1,a1,a5
    0x84014436    0x14    slli a0,a0,0x20
    0x84014438    0x16    or a1,a1,a0
    0x8401443a    0x18    ori a1,a1,3
    0x8401443e    0x1c    sd a1,1680(a4)
    0x84014442    0x20    sd zero,1688(a4)
    0x84014446    0x24    auipc a0,0x16
    0x8401444a    0x28    ld a0,1010(a0) # ffffffff8402a838 <ksCurThread>
    0x8401444e    0x2c    jal ra,ffffffff840143d0 <handleFault>
    0x84014452    0x30    jal ra,ffffffff84012bb0 <schedule>
    0x84014456    0x34    jal ra,ffffffff84012600 <activateThread>
    0x8401445a    0x38    li a0,0
    0x8401445c    0x3a    ld ra,8(sp)           ; stack access
    0x8401445e    0x3c    addi sp,sp,16
    0x84014460    0x3e    ret

Proving inst theorems
---------------------

22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 31 nodes.

Section handleUnknownSyscall (220 of 271)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x840143f0     0x0    addi sp,sp,-16
    0x840143f2     0x2    sd ra,8(sp)           ; stack access
    0x840143f4     0x4    auipc a5,0x4
    0x840143f8     0x8    addi a5,a5,-1012 # ffffffff84018000 <riscvKSASIDTable>
    0x840143fc     0xc    li a4,2
    0x840143fe     0xe    sd a4,1680(a5)
    0x84014402    0x12    sd a0,1688(a5)
    0x84014406    0x16    auipc a0,0x16
    0x8401440a    0x1a    ld a0,1074(a0) # ffffffff8402a838 <ksCurThread>
    0x8401440e    0x1e    jal ra,ffffffff840143d0 <handleFault>
    0x84014412    0x22    jal ra,ffffffff84012bb0 <schedule>
    0x84014416    0x26    jal ra,ffffffff84012600 <activateThread>
    0x8401441a    0x2a    li a0,0
    0x8401441c    0x2c    ld ra,8(sp)           ; stack access
    0x8401441e    0x2e    addi sp,sp,16
    0x84014420    0x30    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 25 nodes.

Section doIPCTransfer (221 of 271)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 46 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `doIPCTransfer`:

    0x8401403a     0x0    addi sp,sp,-64
    0x8401403c     0x2    sd ra,56(sp)          ; stack access
    0x8401403e     0x4    sd s0,48(sp)          ; stack access
    0x84014040     0x6    sd s1,40(sp)          ; stack access
    0x84014042     0x8    sd s2,32(sp)          ; stack access
    0x84014044     0xa    sd s3,24(sp)          ; stack access
    0x84014046     0xc    sd s4,16(sp)          ; stack access
    0x84014048     0xe    sd s5,8(sp)           ; stack access
    0x8401404a    0x10    mv s0,a0
    0x8401404c    0x12    mv s5,a1
    0x8401404e    0x14    mv s2,a2
    0x84014050    0x16    mv s4,a3
    0x84014052    0x18    mv s1,a4
    0x84014054    0x1a    mv a1,a4
    0x84014056    0x1c    li a0,1
    0x84014058    0x1e    jal ra,ffffffff840106a2 <lookupIPCBuffer>
    0x8401405c    0x22    mv s3,a0
    0x8401405e    0x24    ld a5,312(s0)
    0x84014062    0x28    andi a5,a5,15
    0x84014064    0x2a    bnez a5,ffffffff84014092 <doIPCTransfer+0x58>
    0x84014066    0x2c    mv a1,s0
    0x84014068    0x2e    li a0,0
    0x8401406a    0x30    jal ra,ffffffff840106a2 <lookupIPCBuffer>
    0x8401406e    0x34    mv a1,a0
    0x84014070    0x36    mv a6,s3
    0x84014072    0x38    mv a5,s1
    0x84014074    0x3a    mv a4,s4
    0x84014076    0x3c    mv a3,s2
    0x84014078    0x3e    mv a2,s5
    0x8401407a    0x40    mv a0,s0
    0x8401407c    0x42    jal ra,ffffffff84013ebc <doNormalTransfer>
    0x84014080    0x46    ld ra,56(sp)          ; stack access
    0x84014082    0x48    ld s0,48(sp)          ; stack access
    0x84014084    0x4a    ld s1,40(sp)          ; stack access
    0x84014086    0x4c    ld s2,32(sp)          ; stack access
    0x84014088    0x4e    ld s3,24(sp)          ; stack access
    0x8401408a    0x50    ld s4,16(sp)          ; stack access
    0x8401408c    0x52    ld s5,8(sp)           ; stack access
    0x8401408e    0x54    addi sp,sp,64
    0x84014090    0x56    ret
    0x84014092    0x58    mv a3,a0
    0x84014094    0x5a    mv a2,s1
    0x84014096    0x5c    mv a1,s0
    0x84014098    0x5e    mv a0,s2
    0x8401409a    0x60    jal ra,ffffffff840114da <doFaultTransfer>
    0x8401409e    0x64    j ffffffff84014080 <doIPCTransfer+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 68 nodes.

Section handleInterrupt (222 of 271)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 89 instructions.

Skipping c01027f3 rdtime a5

Skipping 00000073 ecall

Skipping c0102773 rdtime a4

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterrupt`:

    0x84013bd8      0x0    li a5,54
    0x84013bdc      0x4    bltu a5,a0,ffffffff84013c3c <handleInterrupt+0x64>
    0x84013be0      0x8    addi sp,sp,-16
    0x84013be2      0xa    sd ra,8(sp)           ; stack access
    0x84013be4      0xc    slli a4,a0,0x3
    0x84013be8     0x10    auipc a5,0x4
    0x84013bec     0x14    addi a5,a5,1048 # ffffffff84018000 <riscvKSASIDTable>
    0x84013bf0     0x18    add a5,a5,a4
    0x84013bf2     0x1a    ld a5,1752(a5)
    0x84013bf6     0x1e    li a4,2
    0x84013bf8     0x20    beq a5,a4,ffffffff84013c7e <handleInterrupt+0xa6>
    0x84013bfc     0x24    bltu a4,a5,ffffffff84013c6a <handleInterrupt+0x92>
    0x84013c00     0x28    beqz a5,ffffffff84013ca0 <handleInterrupt+0xc8>
    0x84013c02     0x2a    slli a0,a0,0x5
    0x84013c04     0x2c    auipc a5,0x5
    0x84013c08     0x30    addi a5,a5,1020 # ffffffff84019000 <intStateIRQNode>
    0x84013c0c     0x34    add a5,a5,a0
    0x84013c0e     0x36    ld a4,0(a5)
    0x84013c10     0x38    srli a2,a4,0x3b
    0x84013c14     0x3c    li a3,6
    0x84013c16     0x3e    bne a2,a3,ffffffff84013c70 <handleInterrupt+0x98>
    0x84013c1a     0x42    srli a3,a4,0x39
    0x84013c1e     0x46    andi a3,a3,1
    0x84013c20     0x48    beqz a3,ffffffff84013c70 <handleInterrupt+0x98>
    0x84013c22     0x4a    slli a0,a4,0x19
    0x84013c26     0x4e    srli a0,a0,0x19
    0x84013c28     0x50    srli a4,a4,0x26
    0x84013c2a     0x52    andi a4,a4,1
    0x84013c2c     0x54    beqz a4,ffffffff84013c34 <handleInterrupt+0x5c>
    0x84013c2e     0x56    li a4,-1
    0x84013c30     0x58    slli a4,a4,0x27
    0x84013c32     0x5a    or a0,a0,a4
    0x84013c34     0x5c    ld a1,8(a5)
    0x84013c36     0x5e    jal ra,ffffffff84013ae0 <sendSignal>
    0x84013c3a     0x62    j ffffffff84013c70 <handleInterrupt+0x98>
    0x84013c3c     0x64    srli a4,a0,0x5
    0x84013c40     0x68    slli a4,a4,0x2
    0x84013c42     0x6a    lui a5,0xcc002
    0x84013c46     0x6e    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x84013c4a     0x72    add a4,a4,a5
    0x84013c4c     0x74    lw a3,0(a4)
    0x84013c4e     0x76    andi a0,a0,31
    0x84013c50     0x78    li a5,1
    0x84013c52     0x7a    sll a0,a5,a0
    0x84013c56     0x7e    not a5,a0
    0x84013c5a     0x82    and a5,a5,a3
    0x84013c5c     0x84    sext.w a5,a5
    0x84013c5e     0x86    sw a5,0(a4)
    0x84013c60     0x88    auipc a5,0x17
    0x84013c64     0x8c    sw zero,-1048(a5) # ffffffff8402a848 <active_irq>
    0x84013c68     0x90    ret
    0x84013c6a     0x92    li a4,3
    0x84013c6c     0x94    bne a5,a4,ffffffff84013cd8 <handleInterrupt+0x100>
    0x84013c70     0x98    auipc a5,0x17
    0x84013c74     0x9c    sw zero,-1064(a5) # ffffffff8402a848 <active_irq>
    0x84013c78     0xa0    ld ra,8(sp)           ; stack access
    0x84013c7a     0xa2    addi sp,sp,16
    0x84013c7c     0xa4    ret
    0x84013c7e     0xa6    jal ra,ffffffff84012976 <timerTick>
    0x84013c82     0xaa    rdtime a5
    0x84013c86     0xae    addi a5,a5,2000
    0x84013c8a     0xb2    mv a0,a5
    0x84013c8c     0xb4    li a1,0
    0x84013c8e     0xb6    li a2,0
    0x84013c90     0xb8    li a7,0
    0x84013c92     0xba    ecall
    0x84013c96     0xbe    rdtime a4
    0x84013c9a     0xc2    bltu a5,a4,ffffffff84013c82 <handleInterrupt+0xaa>
    0x84013c9e     0xc6    j ffffffff84013c70 <handleInterrupt+0x98>
    0x84013ca0     0xc8    li a5,54
    0x84013ca4     0xcc    bne a0,a5,ffffffff84013cb2 <handleInterrupt+0xda>
    0x84013ca8     0xd0    li a5,32
    0x84013cac     0xd4    csrrc a5,sie,a5
    0x84013cb0     0xd8    j ffffffff84013c70 <handleInterrupt+0x98>
    0x84013cb2     0xda    srli a4,a0,0x5
    0x84013cb6     0xde    slli a4,a4,0x2
    0x84013cb8     0xe0    lui a5,0xcc002
    0x84013cbc     0xe4    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x84013cc0     0xe8    add a4,a4,a5
    0x84013cc2     0xea    lw a3,0(a4)
    0x84013cc4     0xec    andi a0,a0,31
    0x84013cc6     0xee    li a5,1
    0x84013cc8     0xf0    sll a0,a5,a0
    0x84013ccc     0xf4    not a5,a0
    0x84013cd0     0xf8    and a5,a5,a3
    0x84013cd2     0xfa    sext.w a5,a5
    0x84013cd4     0xfc    sw a5,0(a4)
    0x84013cd6     0xfe    j ffffffff84013c70 <handleInterrupt+0x98>
    0x84013cd8    0x100    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
89 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 129 nodes.

Section decodeIRQHandlerInvocation (223 of 271)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 73 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x840139bc     0x0    addi sp,sp,-48
    0x840139be     0x2    sd ra,40(sp)          ; stack access
    0x840139c0     0x4    sd s0,32(sp)          ; stack access
    0x840139c2     0x6    sd s1,24(sp)          ; stack access
    0x840139c4     0x8    mv s0,a1
    0x840139c6     0xa    li a5,27
    0x840139c8     0xc    beq a0,a5,ffffffff84013a0a <decodeIRQHandlerInvocation+0x4e>
    0x840139cc    0x10    li a5,28
    0x840139ce    0x12    beq a0,a5,ffffffff84013a6e <decodeIRQHandlerInvocation+0xb2>
    0x840139d2    0x16    li a5,26
    0x840139d4    0x18    beq a0,a5,ffffffff840139e6 <decodeIRQHandlerInvocation+0x2a>
    0x840139d8    0x1c    li a5,3
    0x840139da    0x1e    auipc a4,0x5
    0x840139de    0x22    sd a5,-778(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840139e2    0x26    li a0,3
    0x840139e4    0x28    j ffffffff84013a00 <decodeIRQHandlerInvocation+0x44>
    0x840139e6    0x2a    li a1,2
    0x840139e8    0x2c    auipc a0,0x17
    0x840139ec    0x30    ld a0,-432(a0) # ffffffff8402a838 <ksCurThread>
    0x840139f0    0x34    jal ra,ffffffff840124f6 <setThreadState>
    0x840139f4    0x38    sext.w a1,s0
    0x840139f8    0x3c    lui a5,0xcc202
    0x840139fc    0x40    sw a1,4(a5)
    0x840139fe    0x42    li a0,0
    0x84013a00    0x44    ld ra,40(sp)          ; stack access
    0x84013a02    0x46    ld s0,32(sp)          ; stack access
    0x84013a04    0x48    ld s1,24(sp)          ; stack access
    0x84013a06    0x4a    addi sp,sp,48
    0x84013a08    0x4c    ret
    0x84013a0a    0x4e    auipc s1,0x5
    0x84013a0e    0x52    ld s1,-378(s1) # ffffffff84018890 <current_extra_caps>
    0x84013a12    0x56    beqz s1,ffffffff84013a42 <decodeIRQHandlerInvocation+0x86>
    0x84013a14    0x58    ld a5,0(s1)
    0x84013a16    0x5a    sd a5,0(sp)           ; stack access
    0x84013a18    0x5c    ld a4,8(s1)
    0x84013a1a    0x5e    sd a4,8(sp)           ; stack access
    0x84013a1c    0x60    srli a3,a5,0x3b
    0x84013a20    0x64    li a4,6
    0x84013a22    0x66    bne a3,a4,ffffffff84013a2c <decodeIRQHandlerInvocation+0x70>
    0x84013a26    0x6a    srli a5,a5,0x39
    0x84013a28    0x6c    andi a5,a5,1
    0x84013a2a    0x6e    bnez a5,ffffffff84013a50 <decodeIRQHandlerInvocation+0x94>
    0x84013a2c    0x70    auipc a5,0x4
    0x84013a30    0x74    addi a5,a5,1492 # ffffffff84018000 <riscvKSASIDTable>
    0x84013a34    0x78    li a4,2
    0x84013a36    0x7a    sd a4,1744(a5)
    0x84013a3a    0x7e    sd zero,1704(a5)
    0x84013a3e    0x82    li a0,3
    0x84013a40    0x84    j ffffffff84013a00 <decodeIRQHandlerInvocation+0x44>
    0x84013a42    0x86    li a5,7
    0x84013a44    0x88    auipc a4,0x5
    0x84013a48    0x8c    sd a5,-884(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013a4c    0x90    li a0,3
    0x84013a4e    0x92    j ffffffff84013a00 <decodeIRQHandlerInvocation+0x44>
    0x84013a50    0x94    li a1,2
    0x84013a52    0x96    auipc a0,0x17
    0x84013a56    0x9a    ld a0,-538(a0) # ffffffff8402a838 <ksCurThread>
    0x84013a5a    0x9e    jal ra,ffffffff840124f6 <setThreadState>
    0x84013a5e    0xa2    mv a3,s1
    0x84013a60    0xa4    ld a1,0(sp)           ; stack access
    0x84013a62    0xa6    ld a2,8(sp)           ; stack access
    0x84013a64    0xa8    mv a0,s0
    0x84013a66    0xaa    jal ra,ffffffff8401396c <invokeIRQHandler_SetIRQHandler>
    0x84013a6a    0xae    li a0,0
    0x84013a6c    0xb0    j ffffffff84013a00 <decodeIRQHandlerInvocation+0x44>
    0x84013a6e    0xb2    li a1,2
    0x84013a70    0xb4    auipc a0,0x17
    0x84013a74    0xb8    ld a0,-568(a0) # ffffffff8402a838 <ksCurThread>
    0x84013a78    0xbc    jal ra,ffffffff840124f6 <setThreadState>
    0x84013a7c    0xc0    mv a0,s0
    0x84013a7e    0xc2    jal ra,ffffffff840139a2 <invokeIRQHandler_ClearIRQHandler>
    0x84013a82    0xc6    li a0,0
    0x84013a84    0xc8    j ffffffff84013a00 <decodeIRQHandlerInvocation+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 112 nodes.

Section cteDeleteOne (224 of 271)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 23 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteDeleteOne`:

    0x84013938     0x0    ld a5,0(a0)
    0x8401393a     0x2    srli a5,a5,0x3b
    0x8401393c     0x4    bnez a5,ffffffff84013940 <cteDeleteOne+0x8>
    0x8401393e     0x6    ret
    0x84013940     0x8    addi sp,sp,-64
    0x84013942     0xa    sd ra,56(sp)          ; stack access
    0x84013944     0xc    sd s0,48(sp)          ; stack access
    0x84013946     0xe    mv s0,a0
    0x84013948    0x10    jal ra,ffffffff8401207a <isFinalCapability>
    0x8401394c    0x14    mv a3,a0
    0x8401394e    0x16    li a4,1
    0x84013950    0x18    ld a1,0(s0)
    0x84013952    0x1a    ld a2,8(s0)
    0x84013954    0x1c    mv a0,sp
    0x84013956    0x1e    jal ra,ffffffff84013038 <finaliseCap>
    0x8401395a    0x22    li a1,0
    0x8401395c    0x24    li a2,0
    0x8401395e    0x26    mv a0,s0
    0x84013960    0x28    jal ra,ffffffff84011a30 <emptySlot>
    0x84013964    0x2c    ld ra,56(sp)          ; stack access
    0x84013966    0x2e    ld s0,48(sp)          ; stack access
    0x84013968    0x30    addi sp,sp,64
    0x8401396a    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 37 nodes.

Section cteRevoke (225 of 271)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 55 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cteRevoke`:

    0x840133c8     0x0    addi sp,sp,-64
    0x840133ca     0x2    sd ra,56(sp)          ; stack access
    0x840133cc     0x4    sd s0,48(sp)          ; stack access
    0x840133ce     0x6    sd s1,40(sp)          ; stack access
    0x840133d0     0x8    sd s2,32(sp)          ; stack access
    0x840133d2     0xa    sd s3,24(sp)          ; stack access
    0x840133d4     0xc    sd s4,16(sp)          ; stack access
    0x840133d6     0xe    sd s5,8(sp)           ; stack access
    0x840133d8    0x10    mv s1,a0
    0x840133da    0x12    ld a4,24(a0)
    0x840133dc    0x14    lui a5,0xf8000
    0x840133e0    0x18    srli a5,a5,0x19
    0x840133e2    0x1a    and a0,a4,a5
    0x840133e6    0x1e    srli a4,a4,0x26
    0x840133e8    0x20    andi a4,a4,1
    0x840133ea    0x22    beqz a4,ffffffff84013430 <cteRevoke+0x68>
    0x840133ec    0x24    li s0,-1
    0x840133ee    0x26    slli s0,s0,0x27
    0x840133f0    0x28    or s0,s0,a0
    0x840133f2    0x2a    li s3,1
    0x840133f4    0x2c    lui s2,0xf8000
    0x840133f8    0x30    srli s2,s2,0x19
    0x840133fc    0x34    slli s5,s3,0x26
    0x84013400    0x38    li s4,-1
    0x84013402    0x3a    slli s4,s4,0x27
    0x84013404    0x3c    mv a1,s0
    0x84013406    0x3e    mv a0,s1
    0x84013408    0x40    jal ra,ffffffff84011ef2 <isMDBParentOf>
    0x8401340c    0x44    beqz a0,ffffffff84013434 <cteRevoke+0x6c>
    0x8401340e    0x46    mv a1,s3
    0x84013410    0x48    mv a0,s0
    0x84013412    0x4a    jal ra,ffffffff840131f8 <cteDelete>
    0x84013416    0x4e    bnez a0,ffffffff84013434 <cteRevoke+0x6c>
    0x84013418    0x50    jal ra,ffffffff84011540 <preemptionPoint>
    0x8401341c    0x54    bnez a0,ffffffff84013434 <cteRevoke+0x6c>
    0x8401341e    0x56    ld a5,24(s1)
    0x84013420    0x58    and a0,a5,s2
    0x84013424    0x5c    and a5,a5,s5
    0x84013428    0x60    beqz a5,ffffffff84013446 <cteRevoke+0x7e>
    0x8401342a    0x62    or s0,a0,s4
    0x8401342e    0x66    j ffffffff84013404 <cteRevoke+0x3c>
    0x84013430    0x68    mv s0,a0
    0x84013432    0x6a    bnez a0,ffffffff840133f2 <cteRevoke+0x2a>
    0x84013434    0x6c    ld ra,56(sp)          ; stack access
    0x84013436    0x6e    ld s0,48(sp)          ; stack access
    0x84013438    0x70    ld s1,40(sp)          ; stack access
    0x8401343a    0x72    ld s2,32(sp)          ; stack access
    0x8401343c    0x74    ld s3,24(sp)          ; stack access
    0x8401343e    0x76    ld s4,16(sp)          ; stack access
    0x84013440    0x78    ld s5,8(sp)           ; stack access
    0x84013442    0x7a    addi sp,sp,64
    0x84013444    0x7c    ret
    0x84013446    0x7e    beqz a0,ffffffff84013434 <cteRevoke+0x6c>
    0x84013448    0x80    mv s0,a0
    0x8401344a    0x82    j ffffffff84013404 <cteRevoke+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 89 nodes.

Section suspend (226 of 271)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x84013000     0x0    addi sp,sp,-16
    0x84013002     0x2    sd ra,8(sp)           ; stack access
    0x84013004     0x4    sd s0,0(sp)           ; stack access
    0x84013006     0x6    mv s0,a0
    0x84013008     0x8    jal ra,ffffffff84012f24 <cancelIPC>
    0x8401300c     0xc    ld a5,280(s0)
    0x84013010    0x10    andi a5,a5,15
    0x84013012    0x12    li a4,1
    0x84013014    0x14    beq a5,a4,ffffffff8401302e <suspend+0x2e>
    0x84013018    0x18    li a1,0
    0x8401301a    0x1a    mv a0,s0
    0x8401301c    0x1c    jal ra,ffffffff840124f6 <setThreadState>
    0x84013020    0x20    mv a0,s0
    0x84013022    0x22    jal ra,ffffffff840129c8 <tcbSchedDequeue>
    0x84013026    0x26    ld ra,8(sp)           ; stack access
    0x84013028    0x28    ld s0,0(sp)           ; stack access
    0x8401302a    0x2a    addi sp,sp,16
    0x8401302c    0x2c    ret
    0x8401302e    0x2e    ld a5,272(s0)
    0x84013032    0x32    sd a5,264(s0)
    0x84013036    0x36    j ffffffff84013018 <suspend+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 34 nodes.

Section setPriority (227 of 271)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setPriority`:

    0x84012d1e     0x0    addi sp,sp,-32
    0x84012d20     0x2    sd ra,24(sp)          ; stack access
    0x84012d22     0x4    sd s0,16(sp)          ; stack access
    0x84012d24     0x6    sd s1,8(sp)           ; stack access
    0x84012d26     0x8    mv s0,a0
    0x84012d28     0xa    mv s1,a1
    0x84012d2a     0xc    jal ra,ffffffff840129c8 <tcbSchedDequeue>
    0x84012d2e    0x10    sd s1,360(s0)
    0x84012d32    0x14    ld a5,280(s0)
    0x84012d36    0x18    andi a5,a5,15
    0x84012d38    0x1a    addi a5,a5,-1
    0x84012d3a    0x1c    li a4,1
    0x84012d3c    0x1e    bgeu a4,a5,ffffffff84012d4a <setPriority+0x2c>
    0x84012d40    0x22    ld ra,24(sp)          ; stack access
    0x84012d42    0x24    ld s0,16(sp)          ; stack access
    0x84012d44    0x26    ld s1,8(sp)           ; stack access
    0x84012d46    0x28    addi sp,sp,32
    0x84012d48    0x2a    ret
    0x84012d4a    0x2c    auipc a5,0x18
    0x84012d4e    0x30    ld a5,-1298(a5) # ffffffff8402a838 <ksCurThread>
    0x84012d52    0x34    beq a5,s0,ffffffff84012d5e <setPriority+0x40>
    0x84012d56    0x38    mv a0,s0
    0x84012d58    0x3a    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x84012d5c    0x3e    j ffffffff84012d40 <setPriority+0x22>
    0x84012d5e    0x40    jal ra,ffffffff84012490 <rescheduleRequired>
    0x84012d62    0x44    j ffffffff84012d40 <setPriority+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 43 nodes.

Section setDomain (228 of 271)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setDomain`:

    0x84012cd8     0x0    addi sp,sp,-32
    0x84012cda     0x2    sd ra,24(sp)          ; stack access
    0x84012cdc     0x4    sd s0,16(sp)          ; stack access
    0x84012cde     0x6    sd s1,8(sp)           ; stack access
    0x84012ce0     0x8    mv s0,a0
    0x84012ce2     0xa    mv s1,a1
    0x84012ce4     0xc    jal ra,ffffffff840129c8 <tcbSchedDequeue>
    0x84012ce8    0x10    sd s1,344(s0)
    0x84012cec    0x14    ld a5,280(s0)
    0x84012cf0    0x18    andi a5,a5,15
    0x84012cf2    0x1a    addi a5,a5,-1
    0x84012cf4    0x1c    li a4,1
    0x84012cf6    0x1e    bgeu a4,a5,ffffffff84012d10 <setDomain+0x38>
    0x84012cfa    0x22    auipc a5,0x18
    0x84012cfe    0x26    ld a5,-1218(a5) # ffffffff8402a838 <ksCurThread>
    0x84012d02    0x2a    beq a5,s0,ffffffff84012d18 <setDomain+0x40>
    0x84012d06    0x2e    ld ra,24(sp)          ; stack access
    0x84012d08    0x30    ld s0,16(sp)          ; stack access
    0x84012d0a    0x32    ld s1,8(sp)           ; stack access
    0x84012d0c    0x34    addi sp,sp,32
    0x84012d0e    0x36    ret
    0x84012d10    0x38    mv a0,s0
    0x84012d12    0x3a    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x84012d16    0x3e    j ffffffff84012cfa <setDomain+0x22>
    0x84012d18    0x40    jal ra,ffffffff84012490 <rescheduleRequired>
    0x84012d1c    0x44    j ffffffff84012d06 <setDomain+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 43 nodes.

Section chooseThread (229 of 271)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 43 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `chooseThread`:

    0x84012ac6     0x0    addi sp,sp,-32
    0x84012ac8     0x2    sd ra,24(sp)          ; stack access
    0x84012aca     0x4    sd s0,16(sp)          ; stack access
    0x84012acc     0x6    sd s1,8(sp)           ; stack access
    0x84012ace     0x8    auipc s1,0x18
    0x84012ad2     0xc    ld s1,-694(s1) # ffffffff8402a818 <ksCurDomain>
    0x84012ad6    0x10    slli a4,s1,0x3
    0x84012ada    0x14    auipc a5,0x5
    0x84012ade    0x18    addi a5,a5,1318 # ffffffff84018000 <riscvKSASIDTable>
    0x84012ae2    0x1c    add a5,a5,a4
    0x84012ae4    0x1e    ld a0,1040(a5)
    0x84012ae8    0x22    beqz a0,ffffffff84012b3c <chooseThread+0x76>
    0x84012aea    0x24    jal ra,ffffffff840100cc <clzl>
    0x84012aee    0x28    mv s0,a0
    0x84012af0    0x2a    slli a5,s1,0x2
    0x84012af4    0x2e    addi a4,a0,-60
    0x84012af8    0x32    add a5,a5,a4
    0x84012afa    0x34    slli a5,a5,0x3
    0x84012afc    0x36    auipc a4,0x5
    0x84012b00    0x3a    addi a4,a4,1284 # ffffffff84018000 <riscvKSASIDTable>
    0x84012b04    0x3e    add a5,a5,a4
    0x84012b06    0x40    ld a0,1168(a5)
    0x84012b0a    0x44    jal ra,ffffffff840100cc <clzl>
    0x84012b0e    0x48    li a5,63
    0x84012b12    0x4c    sub s0,a5,s0
    0x84012b16    0x50    slli s0,s0,0x6
    0x84012b18    0x52    sub a5,a5,a0
    0x84012b1a    0x54    or s0,s0,a5
    0x84012b1c    0x56    slli s1,s1,0x8
    0x84012b1e    0x58    add s0,s0,s1
    0x84012b20    0x5a    slli s0,s0,0x4
    0x84012b22    0x5c    auipc s1,0x7
    0x84012b26    0x60    addi s1,s1,-802 # ffffffff84019800 <ksReadyQueues>
    0x84012b2a    0x64    add s0,s0,s1
    0x84012b2c    0x66    ld a0,0(s0)
    0x84012b2e    0x68    jal ra,ffffffff84012aa4 <switchToThread>
    0x84012b32    0x6c    ld ra,24(sp)          ; stack access
    0x84012b34    0x6e    ld s0,16(sp)          ; stack access
    0x84012b36    0x70    ld s1,8(sp)           ; stack access
    0x84012b38    0x72    addi sp,sp,32
    0x84012b3a    0x74    ret
    0x84012b3c    0x76    jal ra,ffffffff8401151c <switchToIdleThread>
    0x84012b40    0x7a    j ffffffff84012b32 <chooseThread+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 60 nodes.

Section cancelAllSignals (230 of 271)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 44 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllSignals`:

    0x84012872     0x0    ld a5,0(a0)
    0x84012874     0x2    andi a3,a5,3
    0x84012878     0x6    li a4,1
    0x8401287a     0x8    beq a3,a4,ffffffff84012880 <cancelAllSignals+0xe>
    0x8401287e     0xc    ret
    0x84012880     0xe    addi sp,sp,-16
    0x84012882    0x10    sd ra,8(sp)           ; stack access
    0x84012884    0x12    sd s0,0(sp)           ; stack access
    0x84012886    0x14    ld a4,8(a0)
    0x84012888    0x16    slli s0,a4,0x19
    0x8401288c    0x1a    srli s0,s0,0x19
    0x8401288e    0x1c    srli a3,a4,0x26
    0x84012892    0x20    andi a3,a3,1
    0x84012894    0x22    beqz a3,ffffffff840128ca <cancelAllSignals+0x58>
    0x84012896    0x24    li a3,-1
    0x84012898    0x26    slli a3,a3,0x27
    0x8401289a    0x28    or s0,s0,a3
    0x8401289c    0x2a    and a4,a4,a3
    0x8401289e    0x2c    sd a4,8(a0)
    0x840128a0    0x2e    lui a4,0x2000
    0x840128a4    0x32    addi a4,a4,-4
    0x840128a6    0x34    and a5,a5,a4
    0x840128a8    0x36    sd a5,0(a0)
    0x840128aa    0x38    li a1,2
    0x840128ac    0x3a    mv a0,s0
    0x840128ae    0x3c    jal ra,ffffffff840124f6 <setThreadState>
    0x840128b2    0x40    mv a0,s0
    0x840128b4    0x42    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x840128b8    0x46    ld s0,408(s0)
    0x840128bc    0x4a    bnez s0,ffffffff840128aa <cancelAllSignals+0x38>
    0x840128be    0x4c    jal ra,ffffffff84012490 <rescheduleRequired>
    0x840128c2    0x50    ld ra,8(sp)           ; stack access
    0x840128c4    0x52    ld s0,0(sp)           ; stack access
    0x840128c6    0x54    addi sp,sp,16
    0x840128c8    0x56    ret
    0x840128ca    0x58    srli a4,a4,0x27
    0x840128cc    0x5a    slli a4,a4,0x27
    0x840128ce    0x5c    sd a4,8(a0)
    0x840128d0    0x5e    lui a4,0x2000
    0x840128d4    0x62    addi a4,a4,-4
    0x840128d6    0x64    and a5,a5,a4
    0x840128d8    0x66    sd a5,0(a0)
    0x840128da    0x68    beqz s0,ffffffff840128be <cancelAllSignals+0x4c>
    0x840128dc    0x6a    j ffffffff840128aa <cancelAllSignals+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 68 nodes.

Section cancelAllIPC (231 of 271)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllIPC`:

    0x84012834     0x0    ld a5,0(a0)
    0x84012836     0x2    andi a4,a5,3
    0x8401283a     0x6    beqz a4,ffffffff84012870 <cancelAllIPC+0x3c>
    0x8401283c     0x8    addi sp,sp,-16
    0x8401283e     0xa    sd ra,8(sp)           ; stack access
    0x84012840     0xc    sd s0,0(sp)           ; stack access
    0x84012842     0xe    ld s0,8(a0)
    0x84012844    0x10    sd zero,8(a0)
    0x84012848    0x14    srli a5,a5,0x27
    0x8401284a    0x16    slli a5,a5,0x27
    0x8401284c    0x18    sd a5,0(a0)
    0x8401284e    0x1a    beqz s0,ffffffff84012864 <cancelAllIPC+0x30>
    0x84012850    0x1c    li a1,2
    0x84012852    0x1e    mv a0,s0
    0x84012854    0x20    jal ra,ffffffff840124f6 <setThreadState>
    0x84012858    0x24    mv a0,s0
    0x8401285a    0x26    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x8401285e    0x2a    ld s0,408(s0)
    0x84012862    0x2e    bnez s0,ffffffff84012850 <cancelAllIPC+0x1c>
    0x84012864    0x30    jal ra,ffffffff84012490 <rescheduleRequired>
    0x84012868    0x34    ld ra,8(sp)           ; stack access
    0x8401286a    0x36    ld s0,0(sp)           ; stack access
    0x8401286c    0x38    addi sp,sp,16
    0x8401286e    0x3a    ret
    0x84012870    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 45 nodes.

Section createNewObjects (232 of 271)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 52 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `createNewObjects`:

    0x8401237e     0x0    addi sp,sp,-96
    0x84012380     0x2    sd ra,88(sp)          ; stack access
    0x84012382     0x4    sd s0,80(sp)          ; stack access
    0x84012384     0x6    sd s1,72(sp)          ; stack access
    0x84012386     0x8    sd s2,64(sp)          ; stack access
    0x84012388     0xa    sd s3,56(sp)          ; stack access
    0x8401238a     0xc    sd s4,48(sp)          ; stack access
    0x8401238c     0xe    sd s5,40(sp)          ; stack access
    0x8401238e    0x10    sd s6,32(sp)          ; stack access
    0x84012390    0x12    sd s7,24(sp)          ; stack access
    0x84012392    0x14    sd s8,16(sp)          ; stack access
    0x84012394    0x16    mv s5,a0
    0x84012396    0x18    mv s6,a1
    0x84012398    0x1a    mv s1,a2
    0x8401239a    0x1c    mv s0,a3
    0x8401239c    0x1e    mv s2,a4
    0x8401239e    0x20    mv s7,a5
    0x840123a0    0x22    mv s3,a6
    0x840123a2    0x24    mv s8,a7
    0x840123a4    0x26    mv a1,a6
    0x840123a6    0x28    jal ra,ffffffff84011b22 <getObjectSize>
    0x840123aa    0x2c    beqz s2,ffffffff840123de <createNewObjects+0x60>
    0x840123ae    0x30    sext.w s4,a0
    0x840123b2    0x34    slli s0,s0,0x5
    0x840123b4    0x36    add s1,s1,s0
    0x840123b6    0x38    li s0,0
    0x840123b8    0x3a    sll a1,s0,s4
    0x840123bc    0x3e    mv a3,s8
    0x840123be    0x40    mv a2,s3
    0x840123c0    0x42    add a1,a1,s7
    0x840123c2    0x44    mv a0,s5
    0x840123c4    0x46    jal ra,ffffffff840122c2 <createObject>
    0x840123c8    0x4a    mv a2,a0
    0x840123ca    0x4c    mv a3,a1
    0x840123cc    0x4e    mv a1,s1
    0x840123ce    0x50    mv a0,s6
    0x840123d0    0x52    jal ra,ffffffff84011852 <insertNewCap>
    0x840123d4    0x56    addi s0,s0,1
    0x840123d6    0x58    addi s1,s1,32
    0x840123da    0x5c    bne s2,s0,ffffffff840123b8 <createNewObjects+0x3a>
    0x840123de    0x60    ld ra,88(sp)          ; stack access
    0x840123e0    0x62    ld s0,80(sp)          ; stack access
    0x840123e2    0x64    ld s1,72(sp)          ; stack access
    0x840123e4    0x66    ld s2,64(sp)          ; stack access
    0x840123e6    0x68    ld s3,56(sp)          ; stack access
    0x840123e8    0x6a    ld s4,48(sp)          ; stack access
    0x840123ea    0x6c    ld s5,40(sp)          ; stack access
    0x840123ec    0x6e    ld s6,32(sp)          ; stack access
    0x840123ee    0x70    ld s7,24(sp)          ; stack access
    0x840123f0    0x72    ld s8,16(sp)          ; stack access
    0x840123f2    0x74    addi sp,sp,96
    0x840123f4    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 80 nodes.

Section sameRegionAs (233 of 271)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 315 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `sameRegionAs`:

    0x84011b9a      0x0    addi sp,sp,-80
    0x84011b9c      0x2    sd ra,72(sp)          ; stack access
    0x84011b9e      0x4    sd s0,64(sp)          ; stack access
    0x84011ba0      0x6    sd s1,56(sp)          ; stack access
    0x84011ba2      0x8    sd s2,48(sp)          ; stack access
    0x84011ba4      0xa    sd s3,40(sp)          ; stack access
    0x84011ba6      0xc    sd s4,32(sp)          ; stack access
    0x84011ba8      0xe    sd a0,16(sp)          ; stack access
    0x84011baa     0x10    sd a1,24(sp)          ; stack access
    0x84011bac     0x12    sd a2,0(sp)           ; stack access
    0x84011bae     0x14    sd a3,8(sp)           ; stack access
    0x84011bb0     0x16    mv s0,a2
    0x84011bb2     0x18    mv s1,a3
    0x84011bb4     0x1a    mv a4,a0
    0x84011bb6     0x1c    srli a5,a0,0x3b
    0x84011bba     0x20    li a3,10
    0x84011bbc     0x22    beq a5,a3,ffffffff84011dfe <sameRegionAs+0x264>
    0x84011bc0     0x26    mv s2,a1
    0x84011bc2     0x28    bgeu a3,a5,ffffffff84011bf0 <sameRegionAs+0x56>
    0x84011bc6     0x2c    li a3,16
    0x84011bc8     0x2e    beq a5,a3,ffffffff84011eaa <sameRegionAs+0x310>
    0x84011bcc     0x32    bgeu a3,a5,ffffffff84011c5e <sameRegionAs+0xc4>
    0x84011bd0     0x36    li a4,20
    0x84011bd2     0x38    bne a5,a4,ffffffff84011ec8 <sameRegionAs+0x32e>
    0x84011bd6     0x3c    srli a0,a2,0x3b
    0x84011bda     0x40    addi a0,a0,-20
    0x84011bdc     0x42    seqz a0,a0
    0x84011be0     0x46    ld ra,72(sp)          ; stack access
    0x84011be2     0x48    ld s0,64(sp)          ; stack access
    0x84011be4     0x4a    ld s1,56(sp)          ; stack access
    0x84011be6     0x4c    ld s2,48(sp)          ; stack access
    0x84011be8     0x4e    ld s3,40(sp)          ; stack access
    0x84011bea     0x50    ld s4,32(sp)          ; stack access
    0x84011bec     0x52    addi sp,sp,80
    0x84011bee     0x54    ret
    0x84011bf0     0x56    li a3,6
    0x84011bf2     0x58    beq a5,a3,ffffffff84011dc2 <sameRegionAs+0x228>
    0x84011bf6     0x5c    bgeu a3,a5,ffffffff84011c16 <sameRegionAs+0x7c>
    0x84011bfa     0x60    li a4,8
    0x84011bfc     0x62    bne a5,a4,ffffffff84011ec8 <sameRegionAs+0x32e>
    0x84011c00     0x66    srli s0,a2,0x3b
    0x84011c04     0x6a    li a5,8
    0x84011c06     0x6c    li a0,0
    0x84011c08     0x6e    bne s0,a5,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011c0c     0x72    sub a0,a1,s1
    0x84011c10     0x76    seqz a0,a0
    0x84011c14     0x7a    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011c16     0x7c    li a3,2
    0x84011c18     0x7e    beq a5,a3,ffffffff84011c78 <sameRegionAs+0xde>
    0x84011c1c     0x82    li a3,4
    0x84011c1e     0x84    bne a5,a3,ffffffff84011ec8 <sameRegionAs+0x32e>
    0x84011c22     0x88    srli a5,a2,0x3b
    0x84011c26     0x8c    li a3,4
    0x84011c28     0x8e    li a0,0
    0x84011c2a     0x90    bne a5,a3,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011c2e     0x94    slli a5,a4,0x19
    0x84011c32     0x98    srli a3,a5,0x19
    0x84011c36     0x9c    srli a4,a4,0x26
    0x84011c38     0x9e    andi a4,a4,1
    0x84011c3a     0xa0    beqz a4,ffffffff84011c42 <sameRegionAs+0xa8>
    0x84011c3c     0xa2    li a5,-1
    0x84011c3e     0xa4    slli a5,a5,0x27
    0x84011c40     0xa6    or a3,a3,a5
    0x84011c42     0xa8    slli a5,s0,0x19
    0x84011c46     0xac    srli a5,a5,0x19
    0x84011c48     0xae    srli a0,s0,0x26
    0x84011c4c     0xb2    andi a0,a0,1
    0x84011c4e     0xb4    beqz a0,ffffffff84011c56 <sameRegionAs+0xbc>
    0x84011c50     0xb6    li a4,-1
    0x84011c52     0xb8    slli a4,a4,0x27
    0x84011c54     0xba    or a5,a5,a4
    0x84011c56     0xbc    sub a5,a5,a3
    0x84011c58     0xbe    seqz a0,a5
    0x84011c5c     0xc2    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011c5e     0xc4    li a3,12
    0x84011c60     0xc6    beq a5,a3,ffffffff84011e6e <sameRegionAs+0x2d4>
    0x84011c64     0xca    li a4,14
    0x84011c66     0xcc    bne a5,a4,ffffffff84011ec8 <sameRegionAs+0x32e>
    0x84011c6a     0xd0    srli a0,a2,0x3b
    0x84011c6e     0xd4    addi a0,a0,-14
    0x84011c70     0xd6    andi a0,a0,-3
    0x84011c72     0xd8    seqz a0,a0
    0x84011c76     0xdc    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011c78     0xde    srli s3,a2,0x3b
    0x84011c7c     0xe2    li a5,20
    0x84011c7e     0xe4    bltu a5,s3,ffffffff84011ca2 <sameRegionAs+0x108>
    0x84011c82     0xe8    li a3,1
    0x84011c84     0xea    sll a3,a3,s3
    0x84011c88     0xee    lui a5,0x41
    0x84011c8c     0xf2    addi a5,a5,1108 # 41454 <KERNEL_OFFSET-0xfffffffefffbebac>
    0x84011c90     0xf6    and a0,a3,a5
    0x84011c94     0xfa    bnez a0,ffffffff84011cba <sameRegionAs+0x120>
    0x84011c96     0xfc    lui a5,0x114
    0x84011c9a    0x100    addi a5,a5,256 # 114100 <KERNEL_OFFSET-0xfffffffeffeebf00>
    0x84011c9e    0x104    and a3,a3,a5
    0x84011ca0    0x106    bnez a3,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011ca2    0x108    li a5,13
    0x84011ca4    0x10a    bltu a5,s3,ffffffff84011cfa <sameRegionAs+0x160>
    0x84011ca8    0x10e    li a5,1
    0x84011caa    0x110    sll a5,a5,s3
    0x84011cae    0x114    lui a0,0x2
    0x84011cb0    0x116    addi a0,a0,10
    0x84011cb2    0x118    and a5,a5,a0
    0x84011cb4    0x11a    snez a0,a5
    0x84011cb8    0x11e    beqz a0,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011cba    0x120    slli s4,a4,0x19
    0x84011cbe    0x124    srli s4,s4,0x19
    0x84011cc2    0x128    srli a4,a4,0x26
    0x84011cc4    0x12a    andi a4,a4,1
    0x84011cc6    0x12c    beqz a4,ffffffff84011cd0 <sameRegionAs+0x136>
    0x84011cc8    0x12e    li a5,-1
    0x84011cca    0x130    slli a5,a5,0x27
    0x84011ccc    0x132    or s4,s4,a5
    0x84011cd0    0x136    ld a0,0(sp)           ; stack access
    0x84011cd2    0x138    ld a1,8(sp)           ; stack access
    0x84011cd4    0x13a    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84011cd8    0x13e    mv a5,a0
    0x84011cda    0x140    li a4,10
    0x84011cdc    0x142    beq s3,a4,ffffffff84011d92 <sameRegionAs+0x1f8>
    0x84011ce0    0x146    bltu a4,s3,ffffffff84011d36 <sameRegionAs+0x19c>
    0x84011ce4    0x14a    li a4,4
    0x84011ce6    0x14c    beq s3,a4,ffffffff84011dae <sameRegionAs+0x214>
    0x84011cea    0x150    bgeu a4,s3,ffffffff84011cfe <sameRegionAs+0x164>
    0x84011cee    0x154    li a4,6
    0x84011cf0    0x156    li s1,5
    0x84011cf2    0x158    beq s3,a4,ffffffff84011d0c <sameRegionAs+0x172>
    0x84011cf6    0x15c    li s1,0
    0x84011cf8    0x15e    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011cfa    0x160    li a0,0
    0x84011cfc    0x162    j ffffffff84011cb8 <sameRegionAs+0x11e>
    0x84011cfe    0x164    beqz s3,ffffffff84011db2 <sameRegionAs+0x218>
    0x84011d02    0x168    li a4,2
    0x84011d04    0x16a    andi s1,s1,63
    0x84011d08    0x16e    bne s3,a4,ffffffff84011ee8 <sameRegionAs+0x34e>
    0x84011d0c    0x172    li a0,0
    0x84011d0e    0x174    bltu a5,s4,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011d12    0x178    li a4,1
    0x84011d14    0x17a    sll s1,a4,s1
    0x84011d18    0x17e    addi a3,a5,-1
    0x84011d1c    0x182    add s1,s1,a3
    0x84011d1e    0x184    sll a4,a4,s2
    0x84011d22    0x188    addi a4,a4,-1
    0x84011d24    0x18a    add s4,s4,a4
    0x84011d26    0x18c    bltu s4,s1,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011d2a    0x190    sltu a0,s1,a5
    0x84011d2e    0x194    xori a0,a0,1
    0x84011d32    0x198    sext.w a0,a0
    0x84011d34    0x19a    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011d36    0x19c    li a4,16
    0x84011d38    0x19e    beq s3,a4,ffffffff84011db6 <sameRegionAs+0x21c>
    0x84011d3c    0x1a2    bgeu a4,s3,ffffffff84011d5c <sameRegionAs+0x1c2>
    0x84011d40    0x1a6    li a4,18
    0x84011d42    0x1a8    li s1,0
    0x84011d44    0x1aa    bne s3,a4,ffffffff84011d0c <sameRegionAs+0x172>
    0x84011d48    0x1ae    andi a4,s0,127
    0x84011d4c    0x1b2    li a3,64
    0x84011d50    0x1b6    beq a4,a3,ffffffff84011dbe <sameRegionAs+0x224>
    0x84011d54    0x1ba    andi s1,s0,63
    0x84011d58    0x1be    addi s1,s1,5
    0x84011d5a    0x1c0    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011d5c    0x1c2    li a4,12
    0x84011d5e    0x1c4    beq s3,a4,ffffffff84011dba <sameRegionAs+0x220>
    0x84011d62    0x1c8    li a4,14
    0x84011d64    0x1ca    li s1,0
    0x84011d66    0x1cc    beq s3,a4,ffffffff84011d0c <sameRegionAs+0x172>
    0x84011d6a    0x1d0    li a4,13
    0x84011d6c    0x1d2    beq s3,a4,ffffffff84011d9e <sameRegionAs+0x204>
    0x84011d70    0x1d6    li a4,1
    0x84011d72    0x1d8    li s1,0
    0x84011d74    0x1da    bne s3,a4,ffffffff84011d0c <sameRegionAs+0x172>
    0x84011d78    0x1de    srli a0,s0,0x39
    0x84011d7c    0x1e2    andi a4,a0,3
    0x84011d80    0x1e6    li a3,1
    0x84011d82    0x1e8    beq a4,a3,ffffffff84011da2 <sameRegionAs+0x208>
    0x84011d86    0x1ec    li a3,2
    0x84011d88    0x1ee    beq a4,a3,ffffffff84011da6 <sameRegionAs+0x20c>
    0x84011d8c    0x1f2    beqz a4,ffffffff84011daa <sameRegionAs+0x210>
    0x84011d8e    0x1f4    jal ra,ffffffff8401045e <halt>
    0x84011d92    0x1f8    srli s1,s0,0x2f
    0x84011d96    0x1fc    andi s1,s1,63
    0x84011d9a    0x200    addi s1,s1,5
    0x84011d9c    0x202    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011d9e    0x204    li s1,12
    0x84011da0    0x206    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011da2    0x208    li s1,21
    0x84011da4    0x20a    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011da6    0x20c    li s1,30
    0x84011da8    0x20e    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011daa    0x210    li s1,12
    0x84011dac    0x212    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011dae    0x214    li s1,4
    0x84011db0    0x216    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011db2    0x218    li s1,0
    0x84011db4    0x21a    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011db6    0x21c    li s1,0
    0x84011db8    0x21e    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011dba    0x220    li s1,10
    0x84011dbc    0x222    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011dbe    0x224    li s1,10
    0x84011dc0    0x226    j ffffffff84011d0c <sameRegionAs+0x172>
    0x84011dc2    0x228    srli a5,a2,0x3b
    0x84011dc6    0x22c    li a3,6
    0x84011dc8    0x22e    li a0,0
    0x84011dca    0x230    bne a5,a3,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011dce    0x234    slli a5,a4,0x19
    0x84011dd2    0x238    srli a3,a5,0x19
    0x84011dd6    0x23c    srli a4,a4,0x26
    0x84011dd8    0x23e    andi a4,a4,1
    0x84011dda    0x240    beqz a4,ffffffff84011de2 <sameRegionAs+0x248>
    0x84011ddc    0x242    li a5,-1
    0x84011dde    0x244    slli a5,a5,0x27
    0x84011de0    0x246    or a3,a3,a5
    0x84011de2    0x248    slli a5,s0,0x19
    0x84011de6    0x24c    srli a5,a5,0x19
    0x84011de8    0x24e    srli a0,s0,0x26
    0x84011dec    0x252    andi a0,a0,1
    0x84011dee    0x254    beqz a0,ffffffff84011df6 <sameRegionAs+0x25c>
    0x84011df0    0x256    li a4,-1
    0x84011df2    0x258    slli a4,a4,0x27
    0x84011df4    0x25a    or a5,a5,a4
    0x84011df6    0x25c    sub a5,a5,a3
    0x84011df8    0x25e    seqz a0,a5
    0x84011dfc    0x262    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011dfe    0x264    srli a5,a2,0x3b
    0x84011e02    0x268    li a3,10
    0x84011e04    0x26a    li a0,0
    0x84011e06    0x26c    bne a5,a3,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011e0a    0x270    slli a5,a4,0x1
    0x84011e0e    0x274    lui a3,0xfc000
    0x84011e12    0x278    srli a3,a3,0x19
    0x84011e14    0x27a    and a3,a3,a5
    0x84011e16    0x27c    srli a5,a5,0x26
    0x84011e18    0x27e    andi a5,a5,1
    0x84011e1a    0x280    beqz a5,ffffffff84011e44 <sameRegionAs+0x2aa>
    0x84011e1c    0x282    li a5,-1
    0x84011e1e    0x284    slli a5,a5,0x27
    0x84011e20    0x286    or a3,a3,a5
    0x84011e22    0x288    slli a5,a2,0x1
    0x84011e26    0x28c    lui a2,0xfc000
    0x84011e2a    0x290    srli a2,a2,0x19
    0x84011e2c    0x292    and a2,a2,a5
    0x84011e2e    0x294    srli a5,a5,0x26
    0x84011e30    0x296    andi a5,a5,1
    0x84011e32    0x298    beqz a5,ffffffff84011e40 <sameRegionAs+0x2a6>
    0x84011e34    0x29a    li a5,-1
    0x84011e36    0x29c    slli a5,a5,0x27
    0x84011e38    0x29e    or a2,a2,a5
    0x84011e3a    0x2a0    li a5,0
    0x84011e3c    0x2a2    beq a2,a3,ffffffff84011e58 <sameRegionAs+0x2be>
    0x84011e40    0x2a6    mv a0,a5
    0x84011e42    0x2a8    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011e44    0x2aa    slli a5,a2,0x1
    0x84011e48    0x2ae    lui a2,0xfc000
    0x84011e4c    0x2b2    srli a2,a2,0x19
    0x84011e4e    0x2b4    and a2,a2,a5
    0x84011e50    0x2b6    srli a5,a5,0x26
    0x84011e52    0x2b8    andi a5,a5,1
    0x84011e54    0x2ba    bnez a5,ffffffff84011e34 <sameRegionAs+0x29a>
    0x84011e56    0x2bc    j ffffffff84011e3a <sameRegionAs+0x2a0>
    0x84011e58    0x2be    srli a5,s0,0x2f
    0x84011e5c    0x2c2    andi a5,a5,63
    0x84011e60    0x2c6    srli a4,a4,0x2f
    0x84011e62    0x2c8    andi a4,a4,63
    0x84011e66    0x2cc    sub a5,a5,a4
    0x84011e68    0x2ce    seqz a5,a5
    0x84011e6c    0x2d2    j ffffffff84011e40 <sameRegionAs+0x2a6>
    0x84011e6e    0x2d4    srli a5,a2,0x3b
    0x84011e72    0x2d8    li a3,12
    0x84011e74    0x2da    li a0,0
    0x84011e76    0x2dc    bne a5,a3,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011e7a    0x2e0    slli a5,a4,0x19
    0x84011e7e    0x2e4    srli a3,a5,0x19
    0x84011e82    0x2e8    srli a4,a4,0x26
    0x84011e84    0x2ea    andi a4,a4,1
    0x84011e86    0x2ec    beqz a4,ffffffff84011e8e <sameRegionAs+0x2f4>
    0x84011e88    0x2ee    li a5,-1
    0x84011e8a    0x2f0    slli a5,a5,0x27
    0x84011e8c    0x2f2    or a3,a3,a5
    0x84011e8e    0x2f4    slli a5,s0,0x19
    0x84011e92    0x2f8    srli a5,a5,0x19
    0x84011e94    0x2fa    srli a0,s0,0x26
    0x84011e98    0x2fe    andi a0,a0,1
    0x84011e9a    0x300    beqz a0,ffffffff84011ea2 <sameRegionAs+0x308>
    0x84011e9c    0x302    li a4,-1
    0x84011e9e    0x304    slli a4,a4,0x27
    0x84011ea0    0x306    or a5,a5,a4
    0x84011ea2    0x308    sub a5,a5,a3
    0x84011ea4    0x30a    seqz a0,a5
    0x84011ea8    0x30e    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011eaa    0x310    srli s0,a2,0x3b
    0x84011eae    0x314    li a5,16
    0x84011eb0    0x316    li a0,0
    0x84011eb2    0x318    bne s0,a5,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011eb6    0x31c    lui a5,0x1
    0x84011eb8    0x31e    addi a5,a5,-1
    0x84011eba    0x320    and a0,s1,a5
    0x84011ebe    0x324    and a5,a5,a1
    0x84011ec0    0x326    sub a0,a0,a5
    0x84011ec2    0x328    seqz a0,a0
    0x84011ec6    0x32c    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011ec8    0x32e    andi a0,a5,1
    0x84011ecc    0x332    beqz a0,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011ed0    0x336    srli a0,s0,0x3b
    0x84011ed4    0x33a    andi a0,a0,1
    0x84011ed6    0x33c    beqz a0,ffffffff84011be0 <sameRegionAs+0x46>
    0x84011eda    0x340    ld a2,0(sp)           ; stack access
    0x84011edc    0x342    ld a3,8(sp)           ; stack access
    0x84011ede    0x344    ld a0,16(sp)          ; stack access
    0x84011ee0    0x346    ld a1,24(sp)          ; stack access
    0x84011ee2    0x348    jal ra,ffffffff84010f24 <Arch_sameRegionAs>
    0x84011ee6    0x34c    j ffffffff84011be0 <sameRegionAs+0x46>
    0x84011ee8    0x34e    li a4,3
    0x84011eea    0x350    bne s3,a4,ffffffff84011d70 <sameRegionAs+0x1d6>
    0x84011eee    0x354    li s1,12
    0x84011ef0    0x356    j ffffffff84011d0c <sameRegionAs+0x172>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
315 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 455 nodes.

Section unmapPage (234 of 271)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 57 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `unmapPage`:

    0x84010a10     0x0    addi sp,sp,-64
    0x84010a12     0x2    sd ra,56(sp)          ; stack access
    0x84010a14     0x4    sd s0,48(sp)          ; stack access
    0x84010a16     0x6    sd s1,40(sp)          ; stack access
    0x84010a18     0x8    sd s2,32(sp)          ; stack access
    0x84010a1a     0xa    mv s0,a0
    0x84010a1c     0xc    mv s2,a2
    0x84010a1e     0xe    mv s1,a3
    0x84010a20    0x10    mv a0,a1
    0x84010a22    0x12    jal ra,ffffffff84010184 <findVSpaceForASID>
    0x84010a26    0x16    sd a0,16(sp)          ; stack access
    0x84010a28    0x18    sd a1,24(sp)          ; stack access
    0x84010a2a    0x1a    beqz a0,ffffffff84010a38 <unmapPage+0x28>
    0x84010a2c    0x1c    ld ra,56(sp)          ; stack access
    0x84010a2e    0x1e    ld s0,48(sp)          ; stack access
    0x84010a30    0x20    ld s1,40(sp)          ; stack access
    0x84010a32    0x22    ld s2,32(sp)          ; stack access
    0x84010a34    0x24    addi sp,sp,64
    0x84010a36    0x26    ret
    0x84010a38    0x28    mv a1,s2
    0x84010a3a    0x2a    ld a0,24(sp)          ; stack access
    0x84010a3c    0x2c    jal ra,ffffffff84010882 <lookupPTSlot>
    0x84010a40    0x30    sd a0,0(sp)           ; stack access
    0x84010a42    0x32    sd a1,8(sp)           ; stack access
    0x84010a44    0x34    li a5,1
    0x84010a46    0x36    beq s0,a5,ffffffff84010a56 <unmapPage+0x46>
    0x84010a4a    0x3a    li a5,2
    0x84010a4c    0x3c    beq s0,a5,ffffffff84010a5a <unmapPage+0x4a>
    0x84010a50    0x40    beqz s0,ffffffff84010a9a <unmapPage+0x8a>
    0x84010a52    0x42    jal ra,ffffffff8401045e <halt>
    0x84010a56    0x46    li a5,21
    0x84010a58    0x48    j ffffffff84010a5c <unmapPage+0x4c>
    0x84010a5a    0x4a    li a5,30
    0x84010a5c    0x4c    bne a1,a5,ffffffff84010a2c <unmapPage+0x1c>
    0x84010a60    0x50    ld a4,0(a0)
    0x84010a62    0x52    andi a5,a4,1
    0x84010a66    0x56    beqz a5,ffffffff84010a2c <unmapPage+0x1c>
    0x84010a68    0x58    srli a5,a4,0x1
    0x84010a6c    0x5c    srli a3,a4,0x2
    0x84010a70    0x60    or a5,a5,a3
    0x84010a72    0x62    srli a3,a4,0x3
    0x84010a76    0x66    or a5,a5,a3
    0x84010a78    0x68    andi a5,a5,1
    0x84010a7a    0x6a    beqz a5,ffffffff84010a2c <unmapPage+0x1c>
    0x84010a7c    0x6c    slli a4,a4,0x2
    0x84010a7e    0x6e    lui a5,0xfff00
    0x84010a82    0x72    srli a5,a5,0x8
    0x84010a84    0x74    and a4,a4,a5
    0x84010a86    0x76    li a3,1
    0x84010a88    0x78    slli a3,a3,0x26
    0x84010a8a    0x7a    add s1,s1,a3
    0x84010a8c    0x7c    bne a4,s1,ffffffff84010a2c <unmapPage+0x1c>
    0x84010a90    0x80    sd zero,0(a0)
    0x84010a94    0x84    sfence.vma
    0x84010a98    0x88    j ffffffff84010a2c <unmapPage+0x1c>
    0x84010a9a    0x8a    li a5,12
    0x84010a9c    0x8c    j ffffffff84010a5c <unmapPage+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 93 nodes.

Section setMRs_fault (235 of 271)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 150 instructions.

LWU..

Stack analysis
---------------

12 stack accesses found. Annotated code for `setMRs_fault`:

    0x840104e6      0x0    addi sp,sp,-48
    0x840104e8      0x2    sd ra,40(sp)          ; stack access
    0x840104ea      0x4    sd s0,32(sp)          ; stack access
    0x840104ec      0x6    sd s1,24(sp)          ; stack access
    0x840104ee      0x8    sd s2,16(sp)          ; stack access
    0x840104f0      0xa    sd s3,8(sp)           ; stack access
    0x840104f2      0xc    sd s4,0(sp)           ; stack access
    0x840104f4      0xe    mv s0,a0
    0x840104f6     0x10    mv s1,a1
    0x840104f8     0x12    mv s2,a2
    0x840104fa     0x14    ld a3,312(a0)
    0x840104fe     0x18    andi a3,a3,15
    0x84010500     0x1a    li a5,2
    0x84010502     0x1c    beq a3,a5,ffffffff840105ec <setMRs_fault+0x106>
    0x84010506     0x20    li a5,3
    0x84010508     0x22    beq a3,a5,ffffffff8401063a <setMRs_fault+0x154>
    0x8401050c     0x26    li a5,1
    0x8401050e     0x28    beq a3,a5,ffffffff84010518 <setMRs_fault+0x32>
    0x84010512     0x2c    jal ra,ffffffff8401047c <Arch_setMRs_fault>
    0x84010516     0x30    j ffffffff84010668 <setMRs_fault+0x182>
    0x84010518     0x32    ld a3,264(a0)
    0x8401051c     0x36    li a2,0
    0x8401051e     0x38    mv a1,s2
    0x84010520     0x3a    mv a0,s1
    0x84010522     0x3c    jal ra,ffffffff840100ea <setMR>
    0x84010526     0x40    ld a3,320(s0)
    0x8401052a     0x44    li a2,1
    0x8401052c     0x46    mv a1,s2
    0x8401052e     0x48    mv a0,s1
    0x84010530     0x4a    jal ra,ffffffff840100ea <setMR>
    0x84010534     0x4e    ld a3,312(s0)
    0x84010538     0x52    srli a3,a3,0x3f
    0x8401053a     0x54    li a2,2
    0x8401053c     0x56    mv a1,s2
    0x8401053e     0x58    mv a0,s1
    0x84010540     0x5a    jal ra,ffffffff840100ea <setMR>
    0x84010544     0x5e    ld s3,328(s0)
    0x84010548     0x62    ld s4,336(s0)
    0x8401054c     0x66    andi s0,s3,3
    0x84010550     0x6a    addi a3,s0,1
    0x84010554     0x6e    li a2,3
    0x84010556     0x70    mv a1,s2
    0x84010558     0x72    mv a0,s1
    0x8401055a     0x74    jal ra,ffffffff840100ea <setMR>
    0x8401055e     0x78    sext.w a0,a0
    0x84010560     0x7a    li a5,2
    0x84010562     0x7c    beq s0,a5,ffffffff8401058c <setMRs_fault+0xa6>
    0x84010566     0x80    bltu a5,s0,ffffffff840105b4 <setMRs_fault+0xce>
    0x8401056a     0x84    beqz s0,ffffffff84010586 <setMRs_fault+0xa0>
    0x8401056c     0x86    li a5,1
    0x8401056e     0x88    bne s0,a5,ffffffff840105e8 <setMRs_fault+0x102>
    0x84010572     0x8c    srli a3,s3,0x2
    0x84010576     0x90    andi a3,a3,127
    0x8401057a     0x94    li a2,4
    0x8401057c     0x96    mv a1,s2
    0x8401057e     0x98    mv a0,s1
    0x84010580     0x9a    jal ra,ffffffff840100ea <setMR>
    0x84010584     0x9e    sext.w a0,a0
    0x84010586     0xa0    slli a0,a0,0x20
    0x84010588     0xa2    srli a0,a0,0x20
    0x8401058a     0xa4    j ffffffff84010668 <setMRs_fault+0x182>
    0x8401058c     0xa6    srli a3,s3,0x2
    0x84010590     0xaa    andi a3,a3,127
    0x84010594     0xae    li a2,4
    0x84010596     0xb0    mv a1,s2
    0x84010598     0xb2    mv a0,s1
    0x8401059a     0xb4    jal ra,ffffffff840100ea <setMR>
    0x8401059e     0xb8    srli a3,s3,0x9
    0x840105a2     0xbc    andi a3,a3,127
    0x840105a6     0xc0    li a2,5
    0x840105a8     0xc2    mv a1,s2
    0x840105aa     0xc4    mv a0,s1
    0x840105ac     0xc6    jal ra,ffffffff840100ea <setMR>
    0x840105b0     0xca    sext.w a0,a0
    0x840105b2     0xcc    j ffffffff84010586 <setMRs_fault+0xa0>
    0x840105b4     0xce    srli a3,s3,0x9
    0x840105b8     0xd2    andi a3,a3,127
    0x840105bc     0xd6    li a2,4
    0x840105be     0xd8    mv a1,s2
    0x840105c0     0xda    mv a0,s1
    0x840105c2     0xdc    jal ra,ffffffff840100ea <setMR>
    0x840105c6     0xe0    mv a3,s4
    0x840105c8     0xe2    li a2,5
    0x840105ca     0xe4    mv a1,s2
    0x840105cc     0xe6    mv a0,s1
    0x840105ce     0xe8    jal ra,ffffffff840100ea <setMR>
    0x840105d2     0xec    srli a3,s3,0x2
    0x840105d6     0xf0    andi a3,a3,127
    0x840105da     0xf4    li a2,6
    0x840105dc     0xf6    mv a1,s2
    0x840105de     0xf8    mv a0,s1
    0x840105e0     0xfa    jal ra,ffffffff840100ea <setMR>
    0x840105e4     0xfe    sext.w a0,a0
    0x840105e6    0x100    j ffffffff84010586 <setMRs_fault+0xa0>
    0x840105e8    0x102    jal ra,ffffffff8401045e <halt>
    0x840105ec    0x106    ld a5,264(a0)
    0x840105f0    0x10a    sd a5,88(a1)
    0x840105f2    0x10c    ld a5,8(a0)
    0x840105f4    0x10e    sd a5,96(a1)
    0x840105f6    0x110    ld a5,0(a0)
    0x840105f8    0x112    sd a5,104(a1)
    0x840105fa    0x114    ld a5,72(a0)
    0x840105fc    0x116    sd a5,112(a1)
    0x840105fe    0x118    beqz a2,ffffffff84010626 <setMRs_fault+0x140>
    0x84010600    0x11a    auipc a4,0x7
    0x84010604    0x11e    addi a4,a4,-240 # ffffffff84017510 <fault_messages>
    0x84010608    0x122    addi a3,a2,40
    0x8401060c    0x126    auipc a2,0x7
    0x84010610    0x12a    addi a2,a2,-204 # ffffffff84017540 <fault_messages+0x30>
    0x84010614    0x12e    ld a5,32(a4)
    0x84010616    0x130    slli a5,a5,0x3
    0x84010618    0x132    add a5,a5,s0
    0x8401061a    0x134    ld a5,0(a5)
    0x8401061c    0x136    sd a5,0(a3)
    0x8401061e    0x138    addi a4,a4,8
    0x84010620    0x13a    addi a3,a3,8
    0x84010622    0x13c    bne a2,a4,ffffffff84010614 <setMRs_fault+0x12e>
    0x84010626    0x140    ld a3,320(s0)
    0x8401062a    0x144    li a2,10
    0x8401062c    0x146    mv a1,s2
    0x8401062e    0x148    mv a0,s1
    0x84010630    0x14a    jal ra,ffffffff840100ea <setMR>
    0x84010634    0x14e    slli a0,a0,0x20
    0x84010636    0x150    srli a0,a0,0x20
    0x84010638    0x152    j ffffffff84010668 <setMRs_fault+0x182>
    0x8401063a    0x154    ld a5,264(a0)
    0x8401063e    0x158    sd a5,88(a1)
    0x84010640    0x15a    ld a5,8(a0)
    0x84010642    0x15c    sd a5,96(a1)
    0x84010644    0x15e    lwu a3,316(a0)
    0x84010648    0x162    li a2,2
    0x8401064a    0x164    mv a1,s2
    0x8401064c    0x166    mv a0,s1
    0x8401064e    0x168    jal ra,ffffffff840100ea <setMR>
    0x84010652    0x16c    ld a3,312(s0)
    0x84010656    0x170    srliw a3,a3,0x4
    0x8401065a    0x174    li a2,3
    0x8401065c    0x176    mv a1,s2
    0x8401065e    0x178    mv a0,s1
    0x84010660    0x17a    jal ra,ffffffff840100ea <setMR>
    0x84010664    0x17e    slli a0,a0,0x20
    0x84010666    0x180    srli a0,a0,0x20
    0x84010668    0x182    ld ra,40(sp)          ; stack access
    0x8401066a    0x184    ld s0,32(sp)          ; stack access
    0x8401066c    0x186    ld s1,24(sp)          ; stack access
    0x8401066e    0x188    ld s2,16(sp)          ; stack access
    0x84010670    0x18a    ld s3,8(sp)           ; stack access
    0x84010672    0x18c    ld s4,0(sp)           ; stack access
    0x84010674    0x18e    addi sp,sp,48
    0x84010676    0x190    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
150 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 220 nodes.

Section create_rootserver_objects (236 of 271)
==============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 88 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x84000e7c     0x0    addi sp,sp,-80
    0x84000e7e     0x2    sd ra,72(sp)          ; stack access
    0x84000e80     0x4    sd s0,64(sp)          ; stack access
    0x84000e82     0x6    sd s1,56(sp)          ; stack access
    0x84000e84     0x8    sd s2,48(sp)          ; stack access
    0x84000e86     0xa    sd s3,40(sp)          ; stack access
    0x84000e88     0xc    sd s4,32(sp)          ; stack access
    0x84000e8a     0xe    mv s1,a0
    0x84000e8c    0x10    sd a1,0(sp)           ; stack access
    0x84000e8e    0x12    sd a2,8(sp)           ; stack access
    0x84000e90    0x14    mv s2,a3
    0x84000e92    0x16    mv s4,a3
    0x84000e94    0x18    li a5,24
    0x84000e96    0x1a    bgeu a3,a5,ffffffff84000e9c <create_rootserver_objects+0x20>
    0x84000e9a    0x1e    li s4,24
    0x84000e9c    0x20    ld a5,0(sp)           ; stack access
    0x84000e9e    0x22    sd a5,16(sp)          ; stack access
    0x84000ea0    0x24    ld a5,8(sp)           ; stack access
    0x84000ea2    0x26    sd a5,24(sp)          ; stack access
    0x84000ea4    0x28    mv s3,s2
    0x84000ea6    0x2a    beqz s2,ffffffff84000eb0 <create_rootserver_objects+0x34>
    0x84000eaa    0x2e    li s3,1
    0x84000eac    0x30    sll s3,s3,s2
    0x84000eb0    0x34    ld a0,16(sp)          ; stack access
    0x84000eb2    0x36    ld a1,24(sp)          ; stack access
    0x84000eb4    0x38    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000eb8    0x3c    auipc s0,0x0
    0x84000ebc    0x40    addi s0,s0,1648 # ffffffff84001528 <ndks_boot>
    0x84000ec0    0x44    sd s1,680(s0)
    0x84000ec4    0x48    lui a5,0x1004
    0x84000ec8    0x4c    addi a5,a5,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x84000ecc    0x50    add s1,s1,a5
    0x84000ece    0x52    add s1,s1,s3
    0x84000ed0    0x54    slli a0,a0,0xc
    0x84000ed2    0x56    add s1,s1,a0
    0x84000ed4    0x58    sd s1,688(s0)
    0x84000ed8    0x5c    mv a1,s2
    0x84000eda    0x5e    mv a0,s4
    0x84000edc    0x60    jal ra,ffffffff84000e50 <maybe_alloc_extra_bi>
    0x84000ee0    0x64    li a1,1
    0x84000ee2    0x66    li a0,24
    0x84000ee4    0x68    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000ee8    0x6c    sd a0,608(s0)
    0x84000eec    0x70    mv a1,s2
    0x84000eee    0x72    li a0,12
    0x84000ef0    0x74    jal ra,ffffffff84000e50 <maybe_alloc_extra_bi>
    0x84000ef4    0x78    li a1,1
    0x84000ef6    0x7a    li a0,12
    0x84000ef8    0x7c    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000efc    0x80    sd a0,616(s0)
    0x84000f00    0x84    mv a1,s2
    0x84000f02    0x86    li a0,12
    0x84000f04    0x88    jal ra,ffffffff84000e50 <maybe_alloc_extra_bi>
    0x84000f08    0x8c    li a1,1
    0x84000f0a    0x8e    li a0,12
    0x84000f0c    0x90    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000f10    0x94    sd a0,624(s0)
    0x84000f14    0x98    li a1,1
    0x84000f16    0x9a    li a0,12
    0x84000f18    0x9c    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000f1c    0xa0    sd a0,632(s0)
    0x84000f20    0xa4    li a1,1
    0x84000f22    0xa6    li a0,12
    0x84000f24    0xa8    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000f28    0xac    sd a0,640(s0)
    0x84000f2c    0xb0    ld a0,0(sp)           ; stack access
    0x84000f2e    0xb2    ld a1,8(sp)           ; stack access
    0x84000f30    0xb4    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000f34    0xb8    mv s1,a0
    0x84000f36    0xba    mv a1,a0
    0x84000f38    0xbc    li a0,12
    0x84000f3a    0xbe    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000f3e    0xc2    sd a0,664(s0)
    0x84000f42    0xc6    slli s1,s1,0xc
    0x84000f44    0xc8    add s1,s1,a0
    0x84000f46    0xca    sd s1,672(s0)
    0x84000f4a    0xce    li a1,1
    0x84000f4c    0xd0    li a0,10
    0x84000f4e    0xd2    jal ra,ffffffff84000e22 <alloc_rootserver_obj>
    0x84000f52    0xd6    sd a0,656(s0)
    0x84000f56    0xda    ld ra,72(sp)          ; stack access
    0x84000f58    0xdc    ld s0,64(sp)          ; stack access
    0x84000f5a    0xde    ld s1,56(sp)          ; stack access
    0x84000f5c    0xe0    ld s2,48(sp)          ; stack access
    0x84000f5e    0xe2    ld s3,40(sp)          ; stack access
    0x84000f60    0xe4    ld s4,32(sp)          ; stack access
    0x84000f62    0xe6    addi sp,sp,80
    0x84000f64    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 137 nodes.

Section create_ipcbuf_frame_cap (237 of 271)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 39 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84000d1e     0x0    addi sp,sp,-96
    0x84000d20     0x2    sd ra,88(sp)          ; stack access
    0x84000d22     0x4    sd s0,80(sp)          ; stack access
    0x84000d24     0x6    sd s1,72(sp)          ; stack access
    0x84000d26     0x8    sd a0,16(sp)          ; stack access
    0x84000d28     0xa    sd a1,24(sp)          ; stack access
    0x84000d2a     0xc    sd a2,0(sp)           ; stack access
    0x84000d2c     0xe    sd a3,8(sp)           ; stack access
    0x84000d2e    0x10    mv s0,a4
    0x84000d30    0x12    auipc s1,0x0
    0x84000d34    0x16    addi s1,s1,2040 # ffffffff84001528 <ndks_boot>
    0x84000d38    0x1a    lui a1,0x1
    0x84000d3a    0x1c    ld a0,632(s1)
    0x84000d3e    0x20    jal ra,ffffffff84015b22 <memzero>
    0x84000d42    0x24    li a6,0
    0x84000d44    0x26    li a5,0
    0x84000d46    0x28    li a4,1
    0x84000d48    0x2a    mv a3,s0
    0x84000d4a    0x2c    ld a2,632(s1)
    0x84000d4e    0x30    ld a0,0(sp)           ; stack access
    0x84000d50    0x32    ld a1,8(sp)           ; stack access
    0x84000d52    0x34    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x84000d56    0x38    mv s1,a0
    0x84000d58    0x3a    mv s0,a1
    0x84000d5a    0x3c    ld a0,16(sp)          ; stack access
    0x84000d5c    0x3e    ld a1,24(sp)          ; stack access
    0x84000d5e    0x40    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000d62    0x44    sd s1,320(a0)
    0x84000d66    0x48    sd s0,328(a0)
    0x84000d6a    0x4c    sd zero,336(a0)
    0x84000d6e    0x50    li a5,3
    0x84000d70    0x52    sd a5,344(a0)
    0x84000d74    0x56    mv a0,s1
    0x84000d76    0x58    mv a1,s0
    0x84000d78    0x5a    ld ra,88(sp)          ; stack access
    0x84000d7a    0x5c    ld s0,80(sp)          ; stack access
    0x84000d7c    0x5e    ld s1,72(sp)          ; stack access
    0x84000d7e    0x60    addi sp,sp,96
    0x84000d80    0x62    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 63 nodes.

Section create_untypeds_for_region (238 of 271)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 102 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x84000974      0x0    addi sp,sp,-192
    0x84000976      0x2    sd ra,184(sp)         ; stack access
    0x84000978      0x4    sd s0,176(sp)         ; stack access
    0x8400097a      0x6    sd s1,168(sp)         ; stack access
    0x8400097c      0x8    sd s2,160(sp)         ; stack access
    0x8400097e      0xa    sd s3,152(sp)         ; stack access
    0x84000980      0xc    sd s4,144(sp)         ; stack access
    0x84000982      0xe    sd s5,136(sp)         ; stack access
    0x84000984     0x10    sd s6,128(sp)         ; stack access
    0x84000986     0x12    sd s7,120(sp)         ; stack access
    0x84000988     0x14    sd s8,112(sp)         ; stack access
    0x8400098a     0x16    sd s9,104(sp)         ; stack access
    0x8400098c     0x18    sd s10,96(sp)         ; stack access
    0x8400098e     0x1a    sd s11,88(sp)         ; stack access
    0x84000990     0x1c    sd a0,32(sp)          ; stack access
    0x84000992     0x1e    sd a1,40(sp)          ; stack access
    0x84000994     0x20    beq a4,a3,ffffffff84000a80 <create_untypeds_for_region+0x10c>
    0x84000998     0x24    mv s9,a2
    0x8400099a     0x26    mv s8,a5
    0x8400099c     0x28    mv s1,a3
    0x8400099e     0x2a    mv s3,a4
    0x840009a0     0x2c    slli s10,a2,0x6
    0x840009a4     0x30    andi s10,s10,64
    0x840009a8     0x34    li s6,63
    0x840009ac     0x38    li s5,38
    0x840009b0     0x3c    auipc s7,0x1
    0x840009b4     0x40    addi s7,s7,-1160 # ffffffff84001528 <ndks_boot>
    0x840009b8     0x44    li s4,1
    0x840009ba     0x46    slli s11,s4,0x26
    0x840009be     0x4a    li a5,-1
    0x840009c0     0x4c    srli a5,a5,0x19
    0x840009c2     0x4e    sd a5,0(sp)           ; stack access
    0x840009c4     0x50    slli a5,s4,0x3c
    0x840009c8     0x54    sd a5,8(sp)           ; stack access
    0x840009ca     0x56    j ffffffff840009f0 <create_untypeds_for_region+0x7c>
    0x840009cc     0x58    mv s0,s5
    0x840009ce     0x5a    ld a5,32(sp)          ; stack access
    0x840009d0     0x5c    sd a5,48(sp)          ; stack access
    0x840009d2     0x5e    ld a5,40(sp)          ; stack access
    0x840009d4     0x60    sd a5,56(sp)          ; stack access
    0x840009d6     0x62    ld a5,592(s7)
    0x840009da     0x66    sub a5,a5,s8
    0x840009de     0x6a    li a4,49
    0x840009e2     0x6e    bgeu a4,a5,ffffffff84000a1c <create_untypeds_for_region+0xa8>
    0x840009e6     0x72    sll s0,s4,s0
    0x840009ea     0x76    add s1,s1,s0
    0x840009ec     0x78    beq s3,s1,ffffffff84000a60 <create_untypeds_for_region+0xec>
    0x840009f0     0x7c    sub a0,s3,s1
    0x840009f4     0x80    jal ra,ffffffff840100cc <clzl>
    0x840009f8     0x84    sub s2,s6,a0
    0x840009fc     0x88    mv s0,s2
    0x840009fe     0x8a    beqz s1,ffffffff84000a0a <create_untypeds_for_region+0x96>
    0x84000a00     0x8c    mv a0,s1
    0x84000a02     0x8e    jal ra,ffffffff840174c6 <__ctzdi2>
    0x84000a06     0x92    sext.w s0,a0
    0x84000a0a     0x96    bgeu s2,s0,ffffffff84000a10 <create_untypeds_for_region+0x9c>
    0x84000a0e     0x9a    mv s0,s2
    0x84000a10     0x9c    bltu s5,s0,ffffffff840009cc <create_untypeds_for_region+0x58>
    0x84000a14     0xa0    li a5,3
    0x84000a16     0xa2    bgeu a5,s0,ffffffff840009e6 <create_untypeds_for_region+0x72>
    0x84000a1a     0xa6    j ffffffff840009ce <create_untypeds_for_region+0x5a>
    0x84000a1c     0xa8    slli a5,a5,0x4
    0x84000a1e     0xaa    ld a4,584(s7)
    0x84000a22     0xae    add a5,a5,a4
    0x84000a24     0xb0    sd zero,176(a5)
    0x84000a28     0xb4    add a4,s1,s11
    0x84000a2c     0xb8    sd a4,168(a5)
    0x84000a2e     0xba    sb s0,176(a5)
    0x84000a32     0xbe    sb s9,177(a5)
    0x84000a36     0xc2    ld a5,0(sp)           ; stack access
    0x84000a38     0xc4    and a2,s1,a5
    0x84000a3c     0xc8    addiw a5,s0,-4
    0x84000a40     0xcc    sll a5,s4,a5
    0x84000a44     0xd0    slli a5,a5,0x19
    0x84000a46     0xd2    andi a3,s0,63
    0x84000a4a     0xd6    or a3,a3,s10
    0x84000a4e     0xda    ld a4,8(sp)           ; stack access
    0x84000a50     0xdc    or a2,a2,a4
    0x84000a52     0xde    or a3,a3,a5
    0x84000a54     0xe0    ld a0,48(sp)          ; stack access
    0x84000a56     0xe2    ld a1,56(sp)          ; stack access
    0x84000a58     0xe4    jal ra,ffffffff84000688 <provide_cap>
    0x84000a5c     0xe8    bnez a0,ffffffff840009e6 <create_untypeds_for_region+0x72>
    0x84000a5e     0xea    j ffffffff84000a62 <create_untypeds_for_region+0xee>
    0x84000a60     0xec    li a0,1
    0x84000a62     0xee    ld ra,184(sp)         ; stack access
    0x84000a64     0xf0    ld s0,176(sp)         ; stack access
    0x84000a66     0xf2    ld s1,168(sp)         ; stack access
    0x84000a68     0xf4    ld s2,160(sp)         ; stack access
    0x84000a6a     0xf6    ld s3,152(sp)         ; stack access
    0x84000a6c     0xf8    ld s4,144(sp)         ; stack access
    0x84000a6e     0xfa    ld s5,136(sp)         ; stack access
    0x84000a70     0xfc    ld s6,128(sp)         ; stack access
    0x84000a72     0xfe    ld s7,120(sp)         ; stack access
    0x84000a74    0x100    ld s8,112(sp)         ; stack access
    0x84000a76    0x102    ld s9,104(sp)         ; stack access
    0x84000a78    0x104    ld s10,96(sp)         ; stack access
    0x84000a7a    0x106    ld s11,88(sp)         ; stack access
    0x84000a7c    0x108    addi sp,sp,192
    0x84000a7e    0x10a    ret
    0x84000a80    0x10c    li a0,1
    0x84000a82    0x10e    j ffffffff84000a62 <create_untypeds_for_region+0xee>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
102 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 166 nodes.

Section invokeUntyped_Retype (239 of 271)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 104 instructions.

RVC_TFFTFFT__T____TF.

Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x8401647a      0x0    addi sp,sp,-112
    0x8401647c      0x2    sd ra,104(sp)         ; stack access
    0x8401647e      0x4    sd s0,96(sp)          ; stack access
    0x84016480      0x6    sd s1,88(sp)          ; stack access
    0x84016482      0x8    sd s2,80(sp)          ; stack access
    0x84016484      0xa    sd s3,72(sp)          ; stack access
    0x84016486      0xc    sd s4,64(sp)          ; stack access
    0x84016488      0xe    sd s5,56(sp)          ; stack access
    0x8401648a     0x10    sd s6,48(sp)          ; stack access
    0x8401648c     0x12    sd s7,40(sp)          ; stack access
    0x8401648e     0x14    sd s8,32(sp)          ; stack access
    0x84016490     0x16    sd s9,24(sp)          ; stack access
    0x84016492     0x18    sd s10,16(sp)         ; stack access
    0x84016494     0x1a    sd s11,8(sp)          ; stack access
    0x84016496     0x1c    mv s0,a0
    0x84016498     0x1e    mv s3,a2
    0x8401649a     0x20    mv s1,a3
    0x8401649c     0x22    mv s4,a4
    0x8401649e     0x24    mv s5,a5
    0x840164a0     0x26    mv s6,a6
    0x840164a2     0x28    mv s2,a7
    0x840164a4     0x2a    ld s9,0(a0)
    0x840164a8     0x2e    slli s7,s9,0x19
    0x840164ac     0x32    srli s7,s7,0x19
    0x840164b0     0x36    srli a5,s9,0x26
    0x840164b4     0x3a    andi a5,a5,1
    0x840164b6     0x3c    beqz a5,ffffffff840164c0 <invokeUntyped_Retype+0x46>
    0x840164b8     0x3e    li a5,-1
    0x840164ba     0x40    slli a5,a5,0x27
    0x840164bc     0x42    or s7,s7,a5
    0x840164c0     0x46    beqz a1,ffffffff840164f8 <invokeUntyped_Retype+0x7e>
    0x840164c2     0x48    ld s10,8(s0)
    0x840164c6     0x4c    srli a5,s10,0x19
    0x840164ca     0x50    slli s8,a5,0x4
    0x840164ce     0x54    beqz a5,ffffffff840164f8 <invokeUntyped_Retype+0x7e>
    0x840164d0     0x56    srli a5,s10,0x6
    0x840164d4     0x5a    andi a5,a5,1
    0x840164d6     0x5c    bnez a5,ffffffff840164ea <invokeUntyped_Retype+0x70>
    0x840164d8     0x5e    andi a5,s10,56
    0x840164dc     0x62    bnez a5,ffffffff84016552 <invokeUntyped_Retype+0xd8>
    0x840164de     0x64    li a1,1
    0x840164e0     0x66    sll a1,a1,s10
    0x840164e4     0x6a    mv a0,s7
    0x840164e6     0x6c    jal ra,ffffffff84015b22 <memzero>
    0x840164ea     0x70    sd s9,0(s0)
    0x840164ee     0x74    slli s10,s10,0x27
    0x840164f0     0x76    srli s10,s10,0x27
    0x840164f4     0x7a    sd s10,8(s0)
    0x840164f8     0x7e    mv a1,s4
    0x840164fa     0x80    mv a0,s1
    0x840164fc     0x82    jal ra,ffffffff84011b22 <getObjectSize>
    0x84016500     0x86    sll t1,s2,a0
    0x84016504     0x8a    sub s7,s3,s7
    0x84016508     0x8e    add t1,t1,s7
    0x8401650a     0x90    srli t1,t1,0x4
    0x8401650e     0x94    slli t1,t1,0x19
    0x84016510     0x96    ld a5,8(s0)
    0x84016512     0x98    slli a5,a5,0x27
    0x84016514     0x9a    srli a5,a5,0x27
    0x84016516     0x9c    or t1,t1,a5
    0x8401651a     0xa0    sd t1,8(s0)
    0x8401651e     0xa4    ld a7,112(sp)         ; stack access
    0x84016520     0xa6    mv a6,s4
    0x84016522     0xa8    mv a5,s3
    0x84016524     0xaa    mv a4,s2
    0x84016526     0xac    mv a3,s6
    0x84016528     0xae    mv a2,s5
    0x8401652a     0xb0    mv a1,s0
    0x8401652c     0xb2    mv a0,s1
    0x8401652e     0xb4    jal ra,ffffffff8401237e <createNewObjects>
    0x84016532     0xb8    li a0,0
    0x84016534     0xba    ld ra,104(sp)         ; stack access
    0x84016536     0xbc    ld s0,96(sp)          ; stack access
    0x84016538     0xbe    ld s1,88(sp)          ; stack access
    0x8401653a     0xc0    ld s2,80(sp)          ; stack access
    0x8401653c     0xc2    ld s3,72(sp)          ; stack access
    0x8401653e     0xc4    ld s4,64(sp)          ; stack access
    0x84016540     0xc6    ld s5,56(sp)          ; stack access
    0x84016542     0xc8    ld s6,48(sp)          ; stack access
    0x84016544     0xca    ld s7,40(sp)          ; stack access
    0x84016546     0xcc    ld s8,32(sp)          ; stack access
    0x84016548     0xce    ld s9,24(sp)          ; stack access
    0x8401654a     0xd0    ld s10,16(sp)         ; stack access
    0x8401654c     0xd2    ld s11,8(sp)          ; stack access
    0x8401654e     0xd4    addi sp,sp,112
    0x84016550     0xd6    ret
    0x84016552     0xd8    addi s8,s8,-1
    0x84016554     0xda    andi s8,s8,-256
    0x84016558     0xde    slli s10,s10,0x27
    0x8401655a     0xe0    srli s10,s10,0x27
    0x8401655e     0xe4    li s11,-256
    0x84016562     0xe8    li a1,256
    0x84016566     0xec    add a0,s7,s8
    0x8401656a     0xf0    jal ra,ffffffff84015b22 <memzero>
    0x8401656e     0xf4    sd s9,0(s0)
    0x84016572     0xf8    srli a5,s8,0x4
    0x84016576     0xfc    slli a5,a5,0x19
    0x84016578     0xfe    or a5,a5,s10
    0x8401657c    0x102    sd a5,8(s0)
    0x8401657e    0x104    jal ra,ffffffff84011540 <preemptionPoint>
    0x84016582    0x108    bnez a0,ffffffff84016534 <invokeUntyped_Retype+0xba>
    0x84016584    0x10a    addi s8,s8,-256
    0x84016588    0x10e    bne s8,s11,ffffffff84016562 <invokeUntyped_Retype+0xe8>
    0x8401658c    0x112    j ffffffff840164f8 <invokeUntyped_Retype+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 159 nodes.

Section handleVMFaultEvent (240 of 271)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x84014462     0x0    addi sp,sp,-16
    0x84014464     0x2    sd ra,8(sp)           ; stack access
    0x84014466     0x4    mv a1,a0
    0x84014468     0x6    auipc a0,0x16
    0x8401446c     0xa    ld a0,976(a0) # ffffffff8402a838 <ksCurThread>
    0x84014470     0xe    jal ra,ffffffff840108e8 <handleVMFault>
    0x84014474    0x12    bnez a0,ffffffff84014486 <handleVMFaultEvent+0x24>
    0x84014476    0x14    jal ra,ffffffff84012bb0 <schedule>
    0x8401447a    0x18    jal ra,ffffffff84012600 <activateThread>
    0x8401447e    0x1c    li a0,0
    0x84014480    0x1e    ld ra,8(sp)           ; stack access
    0x84014482    0x20    addi sp,sp,16
    0x84014484    0x22    ret
    0x84014486    0x24    auipc a0,0x16
    0x8401448a    0x28    ld a0,946(a0) # ffffffff8402a838 <ksCurThread>
    0x8401448e    0x2c    jal ra,ffffffff840143d0 <handleFault>
    0x84014492    0x30    j ffffffff84014476 <handleVMFaultEvent+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 28 nodes.

Section handleInterruptEntry (241 of 271)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 24 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x84013cdc     0x0    addi sp,sp,-16
    0x84013cde     0x2    sd ra,8(sp)           ; stack access
    0x84013ce0     0x4    auipc a5,0x17
    0x84013ce4     0x8    lw a5,-1176(a5) # ffffffff8402a848 <active_irq>
    0x84013ce8     0xc    addiw a3,a5,-1
    0x84013cec    0x10    li a4,53
    0x84013cf0    0x14    bltu a4,a3,ffffffff84013d00 <handleInterruptEntry+0x24>
    0x84013cf4    0x18    slli a0,a5,0x20
    0x84013cf8    0x1c    srli a0,a0,0x20
    0x84013cfa    0x1e    jal ra,ffffffff84013bd8 <handleInterrupt>
    0x84013cfe    0x22    j ffffffff84013d1a <handleInterruptEntry+0x3e>
    0x84013d00    0x24    jal ra,ffffffff840101e4 <getNewActiveIRQ>
    0x84013d04    0x28    sext.w a5,a0
    0x84013d08    0x2c    auipc a4,0x17
    0x84013d0c    0x30    sw a0,-1216(a4) # ffffffff8402a848 <active_irq>
    0x84013d10    0x34    addiw a0,a0,-1
    0x84013d12    0x36    li a4,53
    0x84013d16    0x3a    bgeu a4,a0,ffffffff84013cf4 <handleInterruptEntry+0x18>
    0x84013d1a    0x3e    jal ra,ffffffff84012bb0 <schedule>
    0x84013d1e    0x42    jal ra,ffffffff84012600 <activateThread>
    0x84013d22    0x46    li a0,0
    0x84013d24    0x48    ld ra,8(sp)           ; stack access
    0x84013d26    0x4a    addi sp,sp,16
    0x84013d28    0x4c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 37 nodes.

Section sendSignal (242 of 271)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 101 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `sendSignal`:

    0x84013ae0     0x0    addi sp,sp,-48
    0x84013ae2     0x2    sd ra,40(sp)          ; stack access
    0x84013ae4     0x4    sd s0,32(sp)          ; stack access
    0x84013ae6     0x6    sd s1,24(sp)          ; stack access
    0x84013ae8     0x8    sd s2,16(sp)          ; stack access
    0x84013aea     0xa    mv s0,a0
    0x84013aec     0xc    mv s1,a1
    0x84013aee     0xe    ld a4,0(a0)
    0x84013af0    0x10    andi a5,a4,3
    0x84013af4    0x14    li a3,1
    0x84013af6    0x16    beq a5,a3,ffffffff84013b68 <sendSignal+0x88>
    0x84013afa    0x1a    li a3,2
    0x84013afc    0x1c    beq a5,a3,ffffffff84013bd0 <sendSignal+0xf0>
    0x84013b00    0x20    beqz a5,ffffffff84013b0e <sendSignal+0x2e>
    0x84013b02    0x22    ld ra,40(sp)          ; stack access
    0x84013b04    0x24    ld s0,32(sp)          ; stack access
    0x84013b06    0x26    ld s1,24(sp)          ; stack access
    0x84013b08    0x28    ld s2,16(sp)          ; stack access
    0x84013b0a    0x2a    addi sp,sp,48
    0x84013b0c    0x2c    ret
    0x84013b0e    0x2e    ld a5,24(a0)
    0x84013b10    0x30    slli a3,a5,0x19
    0x84013b14    0x34    srli a3,a3,0x19
    0x84013b16    0x36    srli a5,a5,0x26
    0x84013b18    0x38    andi a5,a5,1
    0x84013b1a    0x3a    beqz a5,ffffffff84013b3c <sendSignal+0x5c>
    0x84013b1c    0x3c    li s2,-1
    0x84013b1e    0x3e    slli s2,s2,0x27
    0x84013b20    0x40    or s2,a3,s2
    0x84013b24    0x44    ld a5,280(s2) # fffffffff8000118 <ki_end+0x73fd1118>
    0x84013b28    0x48    andi a5,a5,15
    0x84013b2a    0x4a    li a3,3
    0x84013b2c    0x4c    beq a5,a3,ffffffff84013b4e <sendSignal+0x6e>
    0x84013b30    0x50    andi a4,a4,-4
    0x84013b32    0x52    ori a4,a4,2
    0x84013b36    0x56    sd a4,0(s0)
    0x84013b38    0x58    sd s1,16(s0)
    0x84013b3a    0x5a    j ffffffff84013b02 <sendSignal+0x22>
    0x84013b3c    0x5c    bnez a3,ffffffff84013b4a <sendSignal+0x6a>
    0x84013b3e    0x5e    andi a4,a4,-4
    0x84013b40    0x60    ori a4,a4,2
    0x84013b44    0x64    sd a4,0(a0)
    0x84013b46    0x66    sd a1,16(s0)
    0x84013b48    0x68    j ffffffff84013b02 <sendSignal+0x22>
    0x84013b4a    0x6a    mv s2,a3
    0x84013b4c    0x6c    j ffffffff84013b24 <sendSignal+0x44>
    0x84013b4e    0x6e    mv a0,s2
    0x84013b50    0x70    jal ra,ffffffff84012f24 <cancelIPC>
    0x84013b54    0x74    li a1,1
    0x84013b56    0x76    mv a0,s2
    0x84013b58    0x78    jal ra,ffffffff840124f6 <setThreadState>
    0x84013b5c    0x7c    sd s1,72(s2)
    0x84013b60    0x80    mv a0,s2
    0x84013b62    0x82    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x84013b66    0x86    j ffffffff84013b02 <sendSignal+0x22>
    0x84013b68    0x88    ld a5,8(a0)
    0x84013b6a    0x8a    slli s2,a5,0x19
    0x84013b6e    0x8e    srli s2,s2,0x19
    0x84013b72    0x92    srli a5,a5,0x26
    0x84013b74    0x94    andi a5,a5,1
    0x84013b76    0x96    beqz a5,ffffffff84013b80 <sendSignal+0xa0>
    0x84013b78    0x98    li a5,-1
    0x84013b7a    0x9a    slli a5,a5,0x27
    0x84013b7c    0x9c    or s2,s2,a5
    0x84013b80    0xa0    srli a2,a4,0x19
    0x84013b84    0xa4    bgez a4,ffffffff84013b8e <sendSignal+0xae>
    0x84013b88    0xa8    li a5,-1
    0x84013b8a    0xaa    slli a5,a5,0x27
    0x84013b8c    0xac    or a2,a2,a5
    0x84013b8e    0xae    mv a1,s2
    0x84013b90    0xb0    mv a0,s2
    0x84013b92    0xb2    jal ra,ffffffff84012d7e <tcbEPDequeue>
    0x84013b96    0xb6    ld a3,8(s0)
    0x84013b98    0xb8    li a4,-1
    0x84013b9a    0xba    slli a5,a4,0x27
    0x84013b9e    0xbe    and a3,a3,a5
    0x84013ba0    0xc0    srli a4,a4,0x19
    0x84013ba2    0xc2    and a4,a4,a0
    0x84013ba4    0xc4    or a4,a4,a3
    0x84013ba6    0xc6    sd a4,8(s0)
    0x84013ba8    0xc8    ld a5,0(s0)
    0x84013baa    0xca    slli a5,a5,0x27
    0x84013bac    0xcc    srli a5,a5,0x27
    0x84013bae    0xce    slli a1,a1,0x19
    0x84013bb0    0xd0    or a5,a5,a1
    0x84013bb2    0xd2    beqz a0,ffffffff84013bca <sendSignal+0xea>
    0x84013bb4    0xd4    sd a5,0(s0)
    0x84013bb6    0xd6    li a1,1
    0x84013bb8    0xd8    mv a0,s2
    0x84013bba    0xda    jal ra,ffffffff840124f6 <setThreadState>
    0x84013bbe    0xde    sd s1,72(s2)
    0x84013bc2    0xe2    mv a0,s2
    0x84013bc4    0xe4    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x84013bc8    0xe8    j ffffffff84013b02 <sendSignal+0x22>
    0x84013bca    0xea    andi a5,a5,-4
    0x84013bcc    0xec    sd a5,0(s0)
    0x84013bce    0xee    j ffffffff84013bb6 <sendSignal+0xd6>
    0x84013bd0    0xf0    ld a1,16(a0)
    0x84013bd2    0xf2    or s1,s1,a1
    0x84013bd4    0xf4    sd s1,16(a0)
    0x84013bd6    0xf6    j ffffffff84013b02 <sendSignal+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 151 nodes.

Section cancelIPC (243 of 271)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 92 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelIPC`:

    0x84012f24     0x0    addi sp,sp,-48
    0x84012f26     0x2    sd ra,40(sp)          ; stack access
    0x84012f28     0x4    sd s0,32(sp)          ; stack access
    0x84012f2a     0x6    sd s1,24(sp)          ; stack access
    0x84012f2c     0x8    mv s0,a0
    0x84012f2e     0xa    ld a4,280(a0)
    0x84012f32     0xe    andi a5,a4,15
    0x84012f36    0x12    li a3,5
    0x84012f38    0x14    beq a5,a3,ffffffff84012fd4 <cancelIPC+0xb0>
    0x84012f3c    0x18    bltu a3,a5,ffffffff84012fac <cancelIPC+0x88>
    0x84012f40    0x1c    addi a5,a5,-3
    0x84012f42    0x1e    li a3,1
    0x84012f44    0x20    bltu a3,a5,ffffffff84012fa2 <cancelIPC+0x7e>
    0x84012f48    0x24    lui a5,0xe0000
    0x84012f4c    0x28    srli a5,a5,0x19
    0x84012f4e    0x2a    and a5,a5,a4
    0x84012f50    0x2c    srli a4,a4,0x26
    0x84012f52    0x2e    andi a4,a4,1
    0x84012f54    0x30    beqz a4,ffffffff84012f5c <cancelIPC+0x38>
    0x84012f56    0x32    li a4,-1
    0x84012f58    0x34    slli a4,a4,0x27
    0x84012f5a    0x36    or a5,a5,a4
    0x84012f5c    0x38    mv s1,a5
    0x84012f5e    0x3a    ld a1,8(a5)
    0x84012f60    0x3c    ld a5,0(a5)
    0x84012f62    0x3e    lui a2,0xf8000
    0x84012f66    0x42    srli a2,a2,0x19
    0x84012f68    0x44    and a2,a2,a5
    0x84012f6a    0x46    srli a5,a5,0x26
    0x84012f6c    0x48    andi a5,a5,1
    0x84012f6e    0x4a    beqz a5,ffffffff84012f76 <cancelIPC+0x52>
    0x84012f70    0x4c    li a5,-1
    0x84012f72    0x4e    slli a5,a5,0x27
    0x84012f74    0x50    or a2,a2,a5
    0x84012f76    0x52    mv a0,s0
    0x84012f78    0x54    jal ra,ffffffff84012d7e <tcbEPDequeue>
    0x84012f7c    0x58    sd a0,0(sp)           ; stack access
    0x84012f7e    0x5a    sd a1,8(sp)           ; stack access
    0x84012f80    0x5c    sd a0,8(s1)
    0x84012f82    0x5e    ld a5,0(s1)
    0x84012f84    0x60    li a4,-1
    0x84012f86    0x62    slli a4,a4,0x27
    0x84012f88    0x64    addi a4,a4,3
    0x84012f8a    0x66    and a5,a5,a4
    0x84012f8c    0x68    lui a4,0xf8000
    0x84012f90    0x6c    srli a4,a4,0x19
    0x84012f92    0x6e    and a1,a1,a4
    0x84012f94    0x70    or a1,a1,a5
    0x84012f96    0x72    beqz a0,ffffffff84012fce <cancelIPC+0xaa>
    0x84012f98    0x74    sd a1,0(s1)
    0x84012f9a    0x76    li a1,0
    0x84012f9c    0x78    mv a0,s0
    0x84012f9e    0x7a    jal ra,ffffffff840124f6 <setThreadState>
    0x84012fa2    0x7e    ld ra,40(sp)          ; stack access
    0x84012fa4    0x80    ld s0,32(sp)          ; stack access
    0x84012fa6    0x82    ld s1,24(sp)          ; stack access
    0x84012fa8    0x84    addi sp,sp,48
    0x84012faa    0x86    ret
    0x84012fac    0x88    li a3,6
    0x84012fae    0x8a    bne a5,a3,ffffffff84012fa2 <cancelIPC+0x7e>
    0x84012fb2    0x8e    lui a1,0xe0000
    0x84012fb6    0x92    srli a1,a1,0x19
    0x84012fb8    0x94    and a1,a1,a4
    0x84012fba    0x96    srli a4,a4,0x26
    0x84012fbc    0x98    andi a4,a4,1
    0x84012fbe    0x9a    beqz a4,ffffffff84012fc6 <cancelIPC+0xa2>
    0x84012fc0    0x9c    li a5,-1
    0x84012fc2    0x9e    slli a5,a5,0x27
    0x84012fc4    0xa0    or a1,a1,a5
    0x84012fc6    0xa2    mv a0,s0
    0x84012fc8    0xa4    jal ra,ffffffff84012eb6 <cancelSignal>
    0x84012fcc    0xa8    j ffffffff84012fa2 <cancelIPC+0x7e>
    0x84012fce    0xaa    andi a1,a1,-4
    0x84012fd0    0xac    sd a1,0(s1)
    0x84012fd2    0xae    j ffffffff84012f9a <cancelIPC+0x76>
    0x84012fd4    0xb0    sd zero,312(a0)
    0x84012fd8    0xb4    sd zero,320(a0)
    0x84012fdc    0xb8    andi s0,a0,-1024
    0x84012fe0    0xbc    ld a5,88(s0)
    0x84012fe2    0xbe    lui a0,0xf8000
    0x84012fe6    0xc2    srli a0,a0,0x19
    0x84012fe8    0xc4    and a0,a0,a5
    0x84012fea    0xc6    srli a5,a5,0x26
    0x84012fec    0xc8    andi a5,a5,1
    0x84012fee    0xca    beqz a5,ffffffff84012ffc <cancelIPC+0xd8>
    0x84012ff0    0xcc    li a5,-1
    0x84012ff2    0xce    slli a5,a5,0x27
    0x84012ff4    0xd0    or a0,a0,a5
    0x84012ff6    0xd2    jal ra,ffffffff84013938 <cteDeleteOne>
    0x84012ffa    0xd6    j ffffffff84012fa2 <cancelIPC+0x7e>
    0x84012ffc    0xd8    beqz a0,ffffffff84012fa2 <cancelIPC+0x7e>
    0x84012ffe    0xda    j ffffffff84012ff6 <cancelIPC+0xd2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
92 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 135 nodes.

Section create_it_address_space (244 of 271)
============================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 125 instructions.


Stack analysis
---------------

49 stack accesses found. Annotated code for `create_it_address_space`:

    0x840006e2      0x0    addi sp,sp,-240
    0x840006e4      0x2    sd ra,232(sp)         ; stack access
    0x840006e6      0x4    sd s0,224(sp)         ; stack access
    0x840006e8      0x6    sd s1,216(sp)         ; stack access
    0x840006ea      0x8    sd s2,208(sp)         ; stack access
    0x840006ec      0xa    sd s3,200(sp)         ; stack access
    0x840006ee      0xc    sd s4,192(sp)         ; stack access
    0x840006f0      0xe    sd s5,184(sp)         ; stack access
    0x840006f2     0x10    sd s6,176(sp)         ; stack access
    0x840006f4     0x12    sd s7,168(sp)         ; stack access
    0x840006f6     0x14    sd s8,160(sp)         ; stack access
    0x840006f8     0x16    sd s9,152(sp)         ; stack access
    0x840006fa     0x18    sd s10,144(sp)        ; stack access
    0x840006fc     0x1a    sd s11,136(sp)        ; stack access
    0x840006fe     0x1c    sd a0,48(sp)          ; stack access
    0x84000700     0x1e    sd a1,56(sp)          ; stack access
    0x84000702     0x20    sd a2,32(sp)          ; stack access
    0x84000704     0x22    mv s6,a3
    0x84000706     0x24    auipc s0,0x1
    0x8400070a     0x28    addi s0,s0,-478 # ffffffff84001528 <ndks_boot>
    0x8400070e     0x2c    ld a0,616(s0)
    0x84000712     0x30    jal ra,ffffffff8401067c <copyGlobalMappings>
    0x84000716     0x34    ld a5,616(s0)
    0x8400071a     0x38    slli s4,a5,0x19
    0x8400071e     0x3c    srli s4,s4,0x19
    0x84000722     0x40    lui a4,0x300
    0x84000726     0x44    addi a4,a4,1
    0x84000728     0x46    slli a4,a4,0x27
    0x8400072a     0x48    or s4,s4,a4
    0x8400072e     0x4c    slli a5,a5,0x9
    0x84000730     0x4e    lui a4,0xfe000
    0x84000734     0x52    srli a4,a4,0x10
    0x84000736     0x54    and a5,a5,a4
    0x84000738     0x56    li a4,1
    0x8400073a     0x58    slli a4,a4,0x30
    0x8400073c     0x5a    or s1,a5,a4
    0x84000740     0x5e    sd s1,8(sp)           ; stack access
    0x84000742     0x60    ld a5,592(s0)
    0x84000746     0x64    sd a5,24(sp)          ; stack access
    0x84000748     0x66    ld a0,48(sp)          ; stack access
    0x8400074a     0x68    ld a1,56(sp)          ; stack access
    0x8400074c     0x6a    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000750     0x6e    sd s4,96(a0)
    0x84000754     0x72    sd s1,104(a0)
    0x84000756     0x74    sd zero,112(a0)
    0x8400075a     0x78    li a5,3
    0x8400075c     0x7a    sd a5,120(a0)
    0x8400075e     0x7c    li a5,30
    0x84000760     0x7e    sd a5,16(sp)          ; stack access
    0x84000762     0x80    mv s3,s0
    0x84000764     0x82    li s8,-1
    0x84000766     0x84    srli s8,s8,0x19
    0x8400076a     0x88    lui s5,0x300
    0x8400076e     0x8c    addi s5,s5,1
    0x84000770     0x8e    slli s5,s5,0x27
    0x84000772     0x90    lui s7,0xfe000
    0x84000776     0x94    srli s7,s7,0x10
    0x8400077a     0x98    ld a4,16(sp)          ; stack access
    0x8400077c     0x9a    sext.w a5,a4
    0x84000780     0x9e    ld s2,32(sp)          ; stack access
    0x84000782     0xa0    srl s2,s2,a4
    0x84000786     0xa4    sll s2,s2,a4
    0x8400078a     0xa8    bgeu s2,s6,ffffffff840007d8 <create_it_address_space+0xf6>
    0x8400078e     0xac    li s10,1
    0x84000790     0xae    sll s10,s10,a5
    0x84000794     0xb2    lui s11,0x1
    0x84000796     0xb4    li s9,1
    0x84000798     0xb6    slli s9,s9,0x30
    0x8400079a     0xb8    ld s0,664(s3) # ffffffff80000298 <KERNEL_OFFSET+0x80000298>
    0x8400079e     0xbc    add a5,s0,s11
    0x840007a2     0xc0    sd a5,664(s3)
    0x840007a6     0xc4    and s1,s2,s8
    0x840007aa     0xc8    or s1,s1,s5
    0x840007ae     0xcc    slli s0,s0,0x9
    0x840007b0     0xce    and s0,s0,s7
    0x840007b4     0xd2    or s0,s0,s9
    0x840007b8     0xd6    mv a2,s1
    0x840007ba     0xd8    mv a3,s0
    0x840007bc     0xda    mv a0,s4
    0x840007be     0xdc    ld a1,8(sp)           ; stack access
    0x840007c0     0xde    jal ra,ffffffff84000190 <map_it_pt_cap>
    0x840007c4     0xe2    mv a2,s1
    0x840007c6     0xe4    mv a3,s0
    0x840007c8     0xe6    ld a0,48(sp)          ; stack access
    0x840007ca     0xe8    ld a1,56(sp)          ; stack access
    0x840007cc     0xea    jal ra,ffffffff84000688 <provide_cap>
    0x840007d0     0xee    beqz a0,ffffffff84000824 <create_it_address_space+0x142>
    0x840007d2     0xf0    add s2,s2,s10
    0x840007d4     0xf2    bltu s2,s6,ffffffff8400079a <create_it_address_space+0xb8>
    0x840007d8     0xf6    ld a5,16(sp)          ; stack access
    0x840007da     0xf8    addiw a5,a5,-9
    0x840007dc     0xfa    mv a4,a5
    0x840007de     0xfc    sd a5,16(sp)          ; stack access
    0x840007e0     0xfe    li a5,12
    0x840007e2    0x100    bne a4,a5,ffffffff8400077a <create_it_address_space+0x98>
    0x840007e6    0x104    auipc a5,0x1
    0x840007ea    0x108    addi a5,a5,-702 # ffffffff84001528 <ndks_boot>
    0x840007ee    0x10c    ld a4,592(a5)
    0x840007f2    0x110    ld a5,584(a5)
    0x840007f6    0x114    ld a3,24(sp)          ; stack access
    0x840007f8    0x116    sd a3,88(a5)
    0x840007fa    0x118    sd a4,96(a5)
    0x840007fc    0x11a    sd s4,112(sp)         ; stack access
    0x840007fe    0x11c    ld a5,8(sp)           ; stack access
    0x84000800    0x11e    sd a5,120(sp)         ; stack access
    0x84000802    0x120    ld a0,112(sp)         ; stack access
    0x84000804    0x122    ld a1,120(sp)         ; stack access
    0x84000806    0x124    ld ra,232(sp)         ; stack access
    0x84000808    0x126    ld s0,224(sp)         ; stack access
    0x8400080a    0x128    ld s1,216(sp)         ; stack access
    0x8400080c    0x12a    ld s2,208(sp)         ; stack access
    0x8400080e    0x12c    ld s3,200(sp)         ; stack access
    0x84000810    0x12e    ld s4,192(sp)         ; stack access
    0x84000812    0x130    ld s5,184(sp)         ; stack access
    0x84000814    0x132    ld s6,176(sp)         ; stack access
    0x84000816    0x134    ld s7,168(sp)         ; stack access
    0x84000818    0x136    ld s8,160(sp)         ; stack access
    0x8400081a    0x138    ld s9,152(sp)         ; stack access
    0x8400081c    0x13a    ld s10,144(sp)        ; stack access
    0x8400081e    0x13c    ld s11,136(sp)        ; stack access
    0x84000820    0x13e    addi sp,sp,240
    0x84000822    0x140    ret
    0x84000824    0x142    sd zero,112(sp)       ; stack access
    0x84000826    0x144    sd zero,120(sp)       ; stack access
    0x84000828    0x146    j ffffffff84000802 <create_it_address_space+0x120>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
125 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 200 nodes.

Section decodeSetIPCBuffer (245 of 271)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 80 instructions.


Stack analysis
---------------

29 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x84014ec4     0x0    addi sp,sp,-176
    0x84014ec6     0x2    sd ra,168(sp)         ; stack access
    0x84014ec8     0x4    sd s0,160(sp)         ; stack access
    0x84014eca     0x6    sd s1,152(sp)         ; stack access
    0x84014ecc     0x8    sd s2,144(sp)         ; stack access
    0x84014ece     0xa    sd a0,64(sp)          ; stack access
    0x84014ed0     0xc    sd a1,72(sp)          ; stack access
    0x84014ed2     0xe    beqz a2,ffffffff84014f16 <decodeSetIPCBuffer+0x52>
    0x84014ed4    0x10    mv s1,a3
    0x84014ed6    0x12    mv a1,a4
    0x84014ed8    0x14    auipc s0,0x4
    0x84014edc    0x18    ld s0,-1608(s0) # ffffffff84018890 <current_extra_caps>
    0x84014ee0    0x1c    beqz s0,ffffffff84014f16 <decodeSetIPCBuffer+0x52>
    0x84014ee2    0x1e    li a0,0
    0x84014ee4    0x20    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014ee8    0x24    mv s2,a0
    0x84014eea    0x26    ld a5,0(s0)
    0x84014eec    0x28    sd a5,112(sp)         ; stack access
    0x84014eee    0x2a    ld a5,8(s0)
    0x84014ef0    0x2c    sd a5,120(sp)         ; stack access
    0x84014ef2    0x2e    beqz a0,ffffffff84014f24 <decodeSetIPCBuffer+0x60>
    0x84014ef4    0x30    ld a2,112(sp)         ; stack access
    0x84014ef6    0x32    mv a3,a5
    0x84014ef8    0x34    mv a1,s0
    0x84014efa    0x36    addi a0,sp,88
    0x84014efc    0x38    jal ra,ffffffff84011fa8 <deriveCap>
    0x84014f00    0x3c    ld a0,88(sp)          ; stack access
    0x84014f02    0x3e    bnez a0,ffffffff84014f70 <decodeSetIPCBuffer+0xac>
    0x84014f04    0x40    ld a1,96(sp)          ; stack access
    0x84014f06    0x42    sd a1,112(sp)         ; stack access
    0x84014f08    0x44    ld a2,104(sp)         ; stack access
    0x84014f0a    0x46    sd a2,120(sp)         ; stack access
    0x84014f0c    0x48    mv a0,s2
    0x84014f0e    0x4a    jal ra,ffffffff84010c1c <checkValidIPCBuffer>
    0x84014f12    0x4e    beqz a0,ffffffff84014f26 <decodeSetIPCBuffer+0x62>
    0x84014f14    0x50    j ffffffff84014f70 <decodeSetIPCBuffer+0xac>
    0x84014f16    0x52    li a5,7
    0x84014f18    0x54    auipc a4,0x3
    0x84014f1c    0x58    sd a5,1976(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014f20    0x5c    li a0,3
    0x84014f22    0x5e    j ffffffff84014f70 <decodeSetIPCBuffer+0xac>
    0x84014f24    0x60    li s0,0
    0x84014f26    0x62    li a1,2
    0x84014f28    0x64    auipc a0,0x16
    0x84014f2c    0x68    ld a0,-1776(a0) # ffffffff8402a838 <ksCurThread>
    0x84014f30    0x6c    jal ra,ffffffff840124f6 <setThreadState>
    0x84014f34    0x70    ld a5,64(sp)          ; stack access
    0x84014f36    0x72    slli a0,a5,0x19
    0x84014f3a    0x76    srli a0,a0,0x19
    0x84014f3c    0x78    srli a5,a5,0x26
    0x84014f3e    0x7a    andi a5,a5,1
    0x84014f40    0x7c    beqz a5,ffffffff84014f48 <decodeSetIPCBuffer+0x84>
    0x84014f42    0x7e    li a5,-1
    0x84014f44    0x80    slli a5,a5,0x27
    0x84014f46    0x82    or a0,a0,a5
    0x84014f48    0x84    li a5,2
    0x84014f4a    0x86    sd a5,56(sp)          ; stack access
    0x84014f4c    0x88    sd s0,48(sp)          ; stack access
    0x84014f4e    0x8a    ld a5,112(sp)         ; stack access
    0x84014f50    0x8c    sd a5,32(sp)          ; stack access
    0x84014f52    0x8e    ld a5,120(sp)         ; stack access
    0x84014f54    0x90    sd a5,40(sp)          ; stack access
    0x84014f56    0x92    sd s2,24(sp)          ; stack access
    0x84014f58    0x94    sd zero,16(sp)        ; stack access
    0x84014f5a    0x96    sd zero,0(sp)         ; stack access
    0x84014f5c    0x98    sd zero,8(sp)         ; stack access
    0x84014f5e    0x9a    li a7,0
    0x84014f60    0x9c    li a5,0
    0x84014f62    0x9e    li a6,0
    0x84014f64    0xa0    li a4,0
    0x84014f66    0xa2    li a3,0
    0x84014f68    0xa4    li a2,0
    0x84014f6a    0xa6    mv a1,s1
    0x84014f6c    0xa8    jal ra,ffffffff840148c6 <invokeTCB_ThreadControl>
    0x84014f70    0xac    ld ra,168(sp)         ; stack access
    0x84014f72    0xae    ld s0,160(sp)         ; stack access
    0x84014f74    0xb0    ld s1,152(sp)         ; stack access
    0x84014f76    0xb2    ld s2,144(sp)         ; stack access
    0x84014f78    0xb4    addi sp,sp,176
    0x84014f7a    0xb6    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 132 nodes.

Section invokeTCB_ThreadControl (246 of 271)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControl` consists of 130 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `invokeTCB_ThreadControl`:

    0x840148c6      0x0    addi sp,sp,-96
    0x840148c8      0x2    sd ra,88(sp)          ; stack access
    0x840148ca      0x4    sd s0,80(sp)          ; stack access
    0x840148cc      0x6    sd s1,72(sp)          ; stack access
    0x840148ce      0x8    sd s2,64(sp)          ; stack access
    0x840148d0      0xa    sd s3,56(sp)          ; stack access
    0x840148d2      0xc    sd s4,48(sp)          ; stack access
    0x840148d4      0xe    sd s5,40(sp)          ; stack access
    0x840148d6     0x10    mv s0,a0
    0x840148d8     0x12    mv s2,a1
    0x840148da     0x14    mv s3,a4
    0x840148dc     0x16    sd a5,0(sp)           ; stack access
    0x840148de     0x18    sd a6,8(sp)           ; stack access
    0x840148e0     0x1a    mv s4,a7
    0x840148e2     0x1c    ld s1,152(sp)         ; stack access
    0x840148e4     0x1e    slli a5,a0,0x19
    0x840148e8     0x22    srli a5,a5,0x19
    0x840148ea     0x24    li a0,3
    0x840148ec     0x26    slli a0,a0,0x3d
    0x840148ee     0x28    or a5,a5,a0
    0x840148f0     0x2a    sd a5,16(sp)          ; stack access
    0x840148f2     0x2c    sd zero,24(sp)        ; stack access
    0x840148f4     0x2e    andi a5,s1,4
    0x840148f8     0x32    beqz a5,ffffffff840149f6 <invokeTCB_ThreadControl+0x130>
    0x840148fc     0x36    sd a2,376(s0)
    0x84014900     0x3a    andi a4,s1,8
    0x84014904     0x3e    bnez a4,ffffffff84014978 <invokeTCB_ThreadControl+0xb2>
    0x84014906     0x40    andi s5,s0,-1024
    0x8401490a     0x44    li a1,1
    0x8401490c     0x46    mv a0,s5
    0x8401490e     0x48    jal ra,ffffffff840131f8 <cteDelete>
    0x84014912     0x4c    bnez a0,ffffffff84014a08 <invokeTCB_ThreadControl+0x142>
    0x84014916     0x50    ld a2,0(s4)
    0x8401491a     0x54    ld a3,8(s4)
    0x8401491e     0x58    ld a0,0(sp)           ; stack access
    0x84014920     0x5a    ld a1,8(sp)           ; stack access
    0x84014922     0x5c    jal ra,ffffffff84012022 <sameObjectAs>
    0x84014926     0x60    beqz a0,ffffffff8401493a <invokeTCB_ThreadControl+0x74>
    0x84014928     0x62    ld a2,0(s2)
    0x8401492c     0x66    ld a3,8(s2)
    0x84014930     0x6a    ld a0,16(sp)          ; stack access
    0x84014932     0x6c    ld a1,24(sp)          ; stack access
    0x84014934     0x6e    jal ra,ffffffff84012022 <sameObjectAs>
    0x84014938     0x72    bnez a0,ffffffff84014980 <invokeTCB_ThreadControl+0xba>
    0x8401493a     0x74    addi s5,s5,32
    0x8401493e     0x78    li a1,1
    0x84014940     0x7a    mv a0,s5
    0x84014942     0x7c    jal ra,ffffffff840131f8 <cteDelete>
    0x84014946     0x80    bnez a0,ffffffff84014a08 <invokeTCB_ThreadControl+0x142>
    0x84014948     0x82    ld a5,112(sp)         ; stack access
    0x8401494a     0x84    ld a2,0(a5)
    0x8401494c     0x86    ld a3,8(a5)
    0x8401494e     0x88    ld a0,96(sp)          ; stack access
    0x84014950     0x8a    ld a1,104(sp)         ; stack access
    0x84014952     0x8c    jal ra,ffffffff84012022 <sameObjectAs>
    0x84014956     0x90    beqz a0,ffffffff840149fc <invokeTCB_ThreadControl+0x136>
    0x84014958     0x92    ld a2,0(s2)
    0x8401495c     0x96    ld a3,8(s2)
    0x84014960     0x9a    ld a0,16(sp)          ; stack access
    0x84014962     0x9c    ld a1,24(sp)          ; stack access
    0x84014964     0x9e    jal ra,ffffffff84012022 <sameObjectAs>
    0x84014968     0xa2    beqz a0,ffffffff840149fc <invokeTCB_ThreadControl+0x136>
    0x8401496a     0xa4    mv a3,s5
    0x8401496c     0xa6    ld a2,112(sp)         ; stack access
    0x8401496e     0xa8    ld a0,96(sp)          ; stack access
    0x84014970     0xaa    ld a1,104(sp)         ; stack access
    0x84014972     0xac    jal ra,ffffffff84011576 <cteInsert>
    0x84014976     0xb0    j ffffffff840149fc <invokeTCB_ThreadControl+0x136>
    0x84014978     0xb2    sd a3,352(s0)
    0x8401497c     0xb6    beqz a5,ffffffff840149fc <invokeTCB_ThreadControl+0x136>
    0x8401497e     0xb8    j ffffffff84014906 <invokeTCB_ThreadControl+0x40>
    0x84014980     0xba    mv a3,s5
    0x84014982     0xbc    mv a2,s4
    0x84014984     0xbe    ld a0,0(sp)           ; stack access
    0x84014986     0xc0    ld a1,8(sp)           ; stack access
    0x84014988     0xc2    jal ra,ffffffff84011576 <cteInsert>
    0x8401498c     0xc6    j ffffffff8401493a <invokeTCB_ThreadControl+0x74>
    0x8401498e     0xc8    andi s4,s0,-1024
    0x84014992     0xcc    addi s4,s4,128
    0x84014996     0xd0    li a1,1
    0x84014998     0xd2    mv a0,s4
    0x8401499a     0xd4    jal ra,ffffffff840131f8 <cteDelete>
    0x8401499e     0xd8    bnez a0,ffffffff84014a08 <invokeTCB_ThreadControl+0x142>
    0x840149a0     0xda    ld a5,120(sp)         ; stack access
    0x840149a2     0xdc    sd a5,384(s0)
    0x840149a6     0xe0    ld a5,144(sp)         ; stack access
    0x840149a8     0xe2    beqz a5,ffffffff840149ca <invokeTCB_ThreadControl+0x104>
    0x840149aa     0xe4    ld a2,0(a5)
    0x840149ac     0xe6    ld a3,8(a5)
    0x840149ae     0xe8    ld a0,128(sp)         ; stack access
    0x840149b0     0xea    ld a1,136(sp)         ; stack access
    0x840149b2     0xec    jal ra,ffffffff84012022 <sameObjectAs>
    0x840149b6     0xf0    beqz a0,ffffffff840149ca <invokeTCB_ThreadControl+0x104>
    0x840149b8     0xf2    ld a2,0(s2)
    0x840149bc     0xf6    ld a3,8(s2)
    0x840149c0     0xfa    ld a0,16(sp)          ; stack access
    0x840149c2     0xfc    ld a1,24(sp)          ; stack access
    0x840149c4     0xfe    jal ra,ffffffff84012022 <sameObjectAs>
    0x840149c8    0x102    bnez a0,ffffffff840149dc <invokeTCB_ThreadControl+0x116>
    0x840149ca    0x104    auipc a5,0x16
    0x840149ce    0x108    ld a5,-402(a5) # ffffffff8402a838 <ksCurThread>
    0x840149d2    0x10c    bne a5,s0,ffffffff84014a02 <invokeTCB_ThreadControl+0x13c>
    0x840149d6    0x110    jal ra,ffffffff84012490 <rescheduleRequired>
    0x840149da    0x114    j ffffffff84014a02 <invokeTCB_ThreadControl+0x13c>
    0x840149dc    0x116    mv a3,s4
    0x840149de    0x118    ld a2,144(sp)         ; stack access
    0x840149e0    0x11a    ld a0,128(sp)         ; stack access
    0x840149e2    0x11c    ld a1,136(sp)         ; stack access
    0x840149e4    0x11e    jal ra,ffffffff84011576 <cteInsert>
    0x840149e8    0x122    j ffffffff840149ca <invokeTCB_ThreadControl+0x104>
    0x840149ea    0x124    mv a1,s3
    0x840149ec    0x126    mv a0,s0
    0x840149ee    0x128    jal ra,ffffffff84012d1e <setPriority>
    0x840149f2    0x12c    li a0,0
    0x840149f4    0x12e    j ffffffff84014a08 <invokeTCB_ThreadControl+0x142>
    0x840149f6    0x130    andi a4,s1,8
    0x840149fa    0x134    bnez a4,ffffffff84014978 <invokeTCB_ThreadControl+0xb2>
    0x840149fc    0x136    andi a5,s1,2
    0x84014a00    0x13a    bnez a5,ffffffff8401498e <invokeTCB_ThreadControl+0xc8>
    0x84014a02    0x13c    andi a0,s1,1
    0x84014a06    0x140    bnez a0,ffffffff840149ea <invokeTCB_ThreadControl+0x124>
    0x84014a08    0x142    ld ra,88(sp)          ; stack access
    0x84014a0a    0x144    ld s0,80(sp)          ; stack access
    0x84014a0c    0x146    ld s1,72(sp)          ; stack access
    0x84014a0e    0x148    ld s2,64(sp)          ; stack access
    0x84014a10    0x14a    ld s3,56(sp)          ; stack access
    0x84014a12    0x14c    ld s4,48(sp)          ; stack access
    0x84014a14    0x14e    ld s5,40(sp)          ; stack access
    0x84014a16    0x150    addi sp,sp,96
    0x84014a18    0x152    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
130 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControl` has 237 nodes.

Section handleRecv (247 of 271)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 124 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `handleRecv`:

    0x84014684      0x0    addi sp,sp,-64
    0x84014686      0x2    sd ra,56(sp)          ; stack access
    0x84014688      0x4    sd s0,48(sp)          ; stack access
    0x8401468a      0x6    sd s1,40(sp)          ; stack access
    0x8401468c      0x8    mv s0,a0
    0x8401468e      0xa    auipc a1,0x16
    0x84014692      0xe    ld a1,426(a1) # ffffffff8402a838 <ksCurThread>
    0x84014696     0x12    ld s1,72(a1)
    0x84014698     0x14    mv a2,s1
    0x8401469a     0x16    addi a0,sp,8
    0x8401469c     0x18    jal ra,ffffffff84011344 <lookupCap>
    0x840146a0     0x1c    ld a5,8(sp)           ; stack access
    0x840146a2     0x1e    bnez a5,ffffffff840146ec <handleRecv+0x68>
    0x840146a4     0x20    ld a5,16(sp)          ; stack access
    0x840146a6     0x22    srli a4,a5,0x3b
    0x840146aa     0x26    li a3,4
    0x840146ac     0x28    beq a4,a3,ffffffff84014710 <handleRecv+0x8c>
    0x840146b0     0x2c    li a3,6
    0x840146b2     0x2e    beq a4,a3,ffffffff84014760 <handleRecv+0xdc>
    0x840146b6     0x32    auipc a4,0x4
    0x840146ba     0x36    addi a4,a4,-1718 # ffffffff84018000 <riscvKSASIDTable>
    0x840146be     0x3a    li a5,1
    0x840146c0     0x3c    sd a5,1024(a4)
    0x840146c4     0x40    sd zero,1032(a4)
    0x840146c8     0x44    li a5,-1
    0x840146ca     0x46    slli a5,a5,0x3f
    0x840146cc     0x48    addi a5,a5,1
    0x840146ce     0x4a    sd a5,1680(a4)
    0x840146d2     0x4e    sd s1,1688(a4)
    0x840146d6     0x52    auipc a0,0x16
    0x840146da     0x56    ld a0,354(a0) # ffffffff8402a838 <ksCurThread>
    0x840146de     0x5a    jal ra,ffffffff840143d0 <handleFault>
    0x840146e2     0x5e    ld ra,56(sp)          ; stack access
    0x840146e4     0x60    ld s0,48(sp)          ; stack access
    0x840146e6     0x62    ld s1,40(sp)          ; stack access
    0x840146e8     0x64    addi sp,sp,64
    0x840146ea     0x66    ret
    0x840146ec     0x68    auipc a4,0x4
    0x840146f0     0x6c    addi a4,a4,-1772 # ffffffff84018000 <riscvKSASIDTable>
    0x840146f4     0x70    li a5,-1
    0x840146f6     0x72    slli a5,a5,0x3f
    0x840146f8     0x74    addi a5,a5,1
    0x840146fa     0x76    sd a5,1680(a4)
    0x840146fe     0x7a    sd s1,1688(a4)
    0x84014702     0x7e    auipc a0,0x16
    0x84014706     0x82    ld a0,310(a0) # ffffffff8402a838 <ksCurThread>
    0x8401470a     0x86    jal ra,ffffffff840143d0 <handleFault>
    0x8401470e     0x8a    j ffffffff840146e2 <handleRecv+0x5e>
    0x84014710     0x8c    srli a5,a5,0x38
    0x84014712     0x8e    andi a5,a5,1
    0x84014714     0x90    beqz a5,ffffffff84014732 <handleRecv+0xae>
    0x84014716     0x92    auipc s1,0x16
    0x8401471a     0x96    addi s1,s1,290 # ffffffff8402a838 <ksCurThread>
    0x8401471e     0x9a    ld a0,0(s1)
    0x84014720     0x9c    jal ra,ffffffff84013da0 <deleteCallerCap>
    0x84014724     0xa0    mv a3,s0
    0x84014726     0xa2    ld a1,16(sp)          ; stack access
    0x84014728     0xa4    ld a2,24(sp)          ; stack access
    0x8401472a     0xa6    ld a0,0(s1)
    0x8401472c     0xa8    jal ra,ffffffff840144e8 <receiveIPC>
    0x84014730     0xac    j ffffffff840146e2 <handleRecv+0x5e>
    0x84014732     0xae    auipc a4,0x4
    0x84014736     0xb2    addi a4,a4,-1842 # ffffffff84018000 <riscvKSASIDTable>
    0x8401473a     0xb6    li a5,1
    0x8401473c     0xb8    sd a5,1024(a4)
    0x84014740     0xbc    sd zero,1032(a4)
    0x84014744     0xc0    li a5,-1
    0x84014746     0xc2    slli a5,a5,0x3f
    0x84014748     0xc4    addi a5,a5,1
    0x8401474a     0xc6    sd a5,1680(a4)
    0x8401474e     0xca    sd s1,1688(a4)
    0x84014752     0xce    auipc a0,0x16
    0x84014756     0xd2    ld a0,230(a0) # ffffffff8402a838 <ksCurThread>
    0x8401475a     0xd6    jal ra,ffffffff840143d0 <handleFault>
    0x8401475e     0xda    j ffffffff840146e2 <handleRecv+0x5e>
    0x84014760     0xdc    slli a4,a5,0x19
    0x84014764     0xe0    srli a4,a4,0x19
    0x84014766     0xe2    srli a3,a5,0x26
    0x8401476a     0xe6    andi a3,a3,1
    0x8401476c     0xe8    beqz a3,ffffffff84014774 <handleRecv+0xf0>
    0x8401476e     0xea    li a3,-1
    0x84014770     0xec    slli a3,a3,0x27
    0x84014772     0xee    or a4,a4,a3
    0x84014774     0xf0    ld a4,24(a4)
    0x84014776     0xf2    slli a3,a4,0x19
    0x8401477a     0xf6    srli a3,a3,0x19
    0x8401477c     0xf8    srli a4,a4,0x26
    0x8401477e     0xfa    andi a4,a4,1
    0x84014780     0xfc    beqz a4,ffffffff840147ca <handleRecv+0x146>
    0x84014782     0xfe    srli a5,a5,0x3a
    0x84014784    0x100    andi a5,a5,1
    0x84014786    0x102    bnez a5,ffffffff840147b6 <handleRecv+0x132>
    0x84014788    0x104    auipc a4,0x4
    0x8401478c    0x108    addi a4,a4,-1928 # ffffffff84018000 <riscvKSASIDTable>
    0x84014790    0x10c    li a5,1
    0x84014792    0x10e    sd a5,1024(a4)
    0x84014796    0x112    sd zero,1032(a4)
    0x8401479a    0x116    li a5,-1
    0x8401479c    0x118    slli a5,a5,0x3f
    0x8401479e    0x11a    addi a5,a5,1
    0x840147a0    0x11c    sd a5,1680(a4)
    0x840147a4    0x120    sd s1,1688(a4)
    0x840147a8    0x124    auipc a0,0x16
    0x840147ac    0x128    ld a0,144(a0) # ffffffff8402a838 <ksCurThread>
    0x840147b0    0x12c    jal ra,ffffffff840143d0 <handleFault>
    0x840147b4    0x130    j ffffffff840146e2 <handleRecv+0x5e>
    0x840147b6    0x132    li a5,-1
    0x840147b8    0x134    slli a5,a5,0x27
    0x840147ba    0x136    or a3,a3,a5
    0x840147bc    0x138    auipc a5,0x16
    0x840147c0    0x13c    ld a5,124(a5) # ffffffff8402a838 <ksCurThread>
    0x840147c4    0x140    beq a3,a5,ffffffff840147d2 <handleRecv+0x14e>
    0x840147c8    0x144    j ffffffff84014788 <handleRecv+0x104>
    0x840147ca    0x146    srli a5,a5,0x3a
    0x840147cc    0x148    andi a5,a5,1
    0x840147ce    0x14a    beqz a5,ffffffff84014788 <handleRecv+0x104>
    0x840147d0    0x14c    bnez a3,ffffffff840147bc <handleRecv+0x138>
    0x840147d2    0x14e    mv a3,s0
    0x840147d4    0x150    ld a1,16(sp)          ; stack access
    0x840147d6    0x152    ld a2,24(sp)          ; stack access
    0x840147d8    0x154    auipc a0,0x16
    0x840147dc    0x158    ld a0,96(a0) # ffffffff8402a838 <ksCurThread>
    0x840147e0    0x15c    jal ra,ffffffff84012710 <receiveSignal>
    0x840147e4    0x160    j ffffffff840146e2 <handleRecv+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
124 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 190 nodes.

Section doReplyTransfer (248 of 271)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 46 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `doReplyTransfer`:

    0x840140a0     0x0    addi sp,sp,-32
    0x840140a2     0x2    sd ra,24(sp)          ; stack access
    0x840140a4     0x4    sd s0,16(sp)          ; stack access
    0x840140a6     0x6    sd s1,8(sp)           ; stack access
    0x840140a8     0x8    sd s2,0(sp)           ; stack access
    0x840140aa     0xa    mv s1,a0
    0x840140ac     0xc    mv s0,a1
    0x840140ae     0xe    mv s2,a2
    0x840140b0    0x10    ld a5,312(a1)
    0x840140b4    0x14    andi a5,a5,15
    0x840140b6    0x16    bnez a5,ffffffff840140e2 <doReplyTransfer+0x42>
    0x840140b8    0x18    mv a4,a1
    0x840140ba    0x1a    li a2,0
    0x840140bc    0x1c    li a1,0
    0x840140be    0x1e    jal ra,ffffffff8401403a <doIPCTransfer>
    0x840140c2    0x22    mv a0,s2
    0x840140c4    0x24    jal ra,ffffffff84013938 <cteDeleteOne>
    0x840140c8    0x28    li a1,1
    0x840140ca    0x2a    mv a0,s0
    0x840140cc    0x2c    jal ra,ffffffff840124f6 <setThreadState>
    0x840140d0    0x30    mv a0,s0
    0x840140d2    0x32    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x840140d6    0x36    ld ra,24(sp)          ; stack access
    0x840140d8    0x38    ld s0,16(sp)          ; stack access
    0x840140da    0x3a    ld s1,8(sp)           ; stack access
    0x840140dc    0x3c    ld s2,0(sp)           ; stack access
    0x840140de    0x3e    addi sp,sp,32
    0x840140e0    0x40    ret
    0x840140e2    0x42    mv a0,a2
    0x840140e4    0x44    jal ra,ffffffff84013938 <cteDeleteOne>
    0x840140e8    0x48    mv a1,s1
    0x840140ea    0x4a    mv a0,s0
    0x840140ec    0x4c    jal ra,ffffffff84010732 <handleFaultReply>
    0x840140f0    0x50    sd zero,312(s0)
    0x840140f4    0x54    sd zero,320(s0)
    0x840140f8    0x58    beqz a0,ffffffff8401410a <doReplyTransfer+0x6a>
    0x840140fa    0x5a    li a1,2
    0x840140fc    0x5c    mv a0,s0
    0x840140fe    0x5e    jal ra,ffffffff840124f6 <setThreadState>
    0x84014102    0x62    mv a0,s0
    0x84014104    0x64    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x84014108    0x68    j ffffffff840140d6 <doReplyTransfer+0x36>
    0x8401410a    0x6a    li a1,0
    0x8401410c    0x6c    mv a0,s0
    0x8401410e    0x6e    jal ra,ffffffff840124f6 <setThreadState>
    0x84014112    0x72    j ffffffff840140d6 <doReplyTransfer+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 71 nodes.

Section doNormalTransfer (249 of 271)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 146 instructions.

SLLW.....

Stack analysis
---------------

40 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84013ebc      0x0    addi sp,sp,-192
    0x84013ebe      0x2    sd ra,184(sp)         ; stack access
    0x84013ec0      0x4    sd s0,176(sp)         ; stack access
    0x84013ec2      0x6    sd s1,168(sp)         ; stack access
    0x84013ec4      0x8    sd s2,160(sp)         ; stack access
    0x84013ec6      0xa    sd s3,152(sp)         ; stack access
    0x84013ec8      0xc    sd s4,144(sp)         ; stack access
    0x84013eca      0xe    sd s5,136(sp)         ; stack access
    0x84013ecc     0x10    sd s6,128(sp)         ; stack access
    0x84013ece     0x12    sd s7,120(sp)         ; stack access
    0x84013ed0     0x14    sd s8,112(sp)         ; stack access
    0x84013ed2     0x16    sd s9,104(sp)         ; stack access
    0x84013ed4     0x18    sd s10,96(sp)         ; stack access
    0x84013ed6     0x1a    sd s11,88(sp)         ; stack access
    0x84013ed8     0x1c    mv s2,a0
    0x84013eda     0x1e    mv s6,a1
    0x84013edc     0x20    mv s5,a2
    0x84013ede     0x22    mv s4,a3
    0x84013ee0     0x24    mv s1,a5
    0x84013ee2     0x26    mv s3,a6
    0x84013ee4     0x28    ld s0,80(a0)
    0x84013ee6     0x2a    andi a3,s0,127
    0x84013eea     0x2e    li a5,120
    0x84013eee     0x32    bgeu a5,a3,ffffffff84013efa <doNormalTransfer+0x3e>
    0x84013ef2     0x36    andi s0,s0,-128
    0x84013ef6     0x3a    ori s0,s0,120
    0x84013efa     0x3e    bnez a4,ffffffff84013f58 <doNormalTransfer+0x9c>
    0x84013efc     0x40    auipc a5,0x5
    0x84013f00     0x44    sd zero,-1644(a5) # ffffffff84018890 <current_extra_caps>
    0x84013f04     0x48    andi a4,s0,127
    0x84013f08     0x4c    mv a3,s3
    0x84013f0a     0x4e    mv a2,s1
    0x84013f0c     0x50    mv a1,s6
    0x84013f0e     0x52    mv a0,s2
    0x84013f10     0x54    jal ra,ffffffff84013e4c <copyMRs>
    0x84013f14     0x58    mv s2,a0
    0x84013f16     0x5a    lui a5,0xfffff
    0x84013f18     0x5c    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfd007f>
    0x84013f1c     0x60    and s0,s0,a5
    0x84013f1e     0x62    auipc a5,0x5
    0x84013f22     0x66    ld a5,-1678(a5) # ffffffff84018890 <current_extra_caps>
    0x84013f26     0x6a    bnez a5,ffffffff84013f6e <doNormalTransfer+0xb2>
    0x84013f28     0x6c    andi s0,s0,-128
    0x84013f2c     0x70    andi s2,s2,127
    0x84013f30     0x74    or s0,s0,s2
    0x84013f34     0x78    sd s0,80(s1)
    0x84013f36     0x7a    sd s4,72(s1)
    0x84013f3a     0x7e    ld ra,184(sp)         ; stack access
    0x84013f3c     0x80    ld s0,176(sp)         ; stack access
    0x84013f3e     0x82    ld s1,168(sp)         ; stack access
    0x84013f40     0x84    ld s2,160(sp)         ; stack access
    0x84013f42     0x86    ld s3,152(sp)         ; stack access
    0x84013f44     0x88    ld s4,144(sp)         ; stack access
    0x84013f46     0x8a    ld s5,136(sp)         ; stack access
    0x84013f48     0x8c    ld s6,128(sp)         ; stack access
    0x84013f4a     0x8e    ld s7,120(sp)         ; stack access
    0x84013f4c     0x90    ld s8,112(sp)         ; stack access
    0x84013f4e     0x92    ld s9,104(sp)         ; stack access
    0x84013f50     0x94    ld s10,96(sp)         ; stack access
    0x84013f52     0x96    ld s11,88(sp)         ; stack access
    0x84013f54     0x98    addi sp,sp,192
    0x84013f56     0x9a    ret
    0x84013f58     0x9c    mv a2,s0
    0x84013f5a     0x9e    mv a1,s6
    0x84013f5c     0xa0    mv a0,s2
    0x84013f5e     0xa2    jal ra,ffffffff84013db6 <lookupExtraCaps>
    0x84013f62     0xa6    beqz a0,ffffffff84013f04 <doNormalTransfer+0x48>
    0x84013f64     0xa8    auipc a5,0x5
    0x84013f68     0xac    sd zero,-1748(a5) # ffffffff84018890 <current_extra_caps>
    0x84013f6c     0xb0    j ffffffff84013f04 <doNormalTransfer+0x48>
    0x84013f6e     0xb2    beqz s3,ffffffff84013f28 <doNormalTransfer+0x6c>
    0x84013f72     0xb6    mv a1,s3
    0x84013f74     0xb8    mv a0,s1
    0x84013f76     0xba    jal ra,ffffffff840118e2 <getReceiveSlots>
    0x84013f7a     0xbe    mv s8,a0
    0x84013f7c     0xc0    auipc s9,0x5
    0x84013f80     0xc4    addi s9,s9,-1772 # ffffffff84018890 <current_extra_caps>
    0x84013f84     0xc8    addi s3,s3,976
    0x84013f88     0xcc    li s7,0
    0x84013f8a     0xce    li s10,-1
    0x84013f8c     0xd0    srli s11,s10,0x19
    0x84013f90     0xd4    li a5,1
    0x84013f92     0xd6    slli a5,a5,0x26
    0x84013f94     0xd8    sd a5,8(sp)           ; stack access
    0x84013f96     0xda    lui a5,0x1
    0x84013f98     0xdc    addi a5,a5,-512 # e00 <KERNEL_OFFSET-0xfffffffefffff200>
    0x84013f9c     0xe0    sd a5,16(sp)          ; stack access
    0x84013f9e     0xe2    lui a5,0xfffff
    0x84013fa0     0xe4    addi a5,a5,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84013fa4     0xe8    sd a5,24(sp)          ; stack access
    0x84013fa6     0xea    j ffffffff84013fdc <doNormalTransfer+0x120>
    0x84013fa8     0xec    beqz s8,ffffffff8401402e <doNormalTransfer+0x172>
    0x84013fac     0xf0    sd a2,40(sp)          ; stack access
    0x84013fae     0xf2    sd a3,48(sp)          ; stack access
    0x84013fb0     0xf4    mv a1,s6
    0x84013fb2     0xf6    addi a0,sp,56
    0x84013fb4     0xf8    jal ra,ffffffff84011fa8 <deriveCap>
    0x84013fb8     0xfc    ld a5,56(sp)          ; stack access
    0x84013fba     0xfe    bnez a5,ffffffff8401402e <doNormalTransfer+0x172>
    0x84013fbc    0x100    ld a5,64(sp)          ; stack access
    0x84013fbe    0x102    srli a5,a5,0x3b
    0x84013fc0    0x104    beqz a5,ffffffff8401402e <doNormalTransfer+0x172>
    0x84013fc2    0x106    mv a3,s8
    0x84013fc4    0x108    mv a2,s6
    0x84013fc6    0x10a    ld a0,64(sp)          ; stack access
    0x84013fc8    0x10c    ld a1,72(sp)          ; stack access
    0x84013fca    0x10e    jal ra,ffffffff84011576 <cteInsert>
    0x84013fce    0x112    li s8,0
    0x84013fd0    0x114    addi s7,s7,1
    0x84013fd2    0x116    addi s9,s9,8
    0x84013fd4    0x118    addi s3,s3,8
    0x84013fd6    0x11a    li a5,3
    0x84013fd8    0x11c    beq s7,a5,ffffffff8401402e <doNormalTransfer+0x172>
    0x84013fdc    0x120    ld s6,0(s9)
    0x84013fe0    0x124    beqz s6,ffffffff8401402e <doNormalTransfer+0x172>
    0x84013fe4    0x128    ld a2,0(s6)
    0x84013fe8    0x12c    sd a2,40(sp)          ; stack access
    0x84013fea    0x12e    ld a3,8(s6)
    0x84013fee    0x132    sd a3,48(sp)          ; stack access
    0x84013ff0    0x134    srli a4,a2,0x3b
    0x84013ff4    0x138    li a5,4
    0x84013ff6    0x13a    bne a4,a5,ffffffff84013fa8 <doNormalTransfer+0xec>
    0x84013ffa    0x13e    and a5,a2,s11
    0x84013ffe    0x142    ld a4,8(sp)           ; stack access
    0x84014000    0x144    and a4,a4,a2
    0x84014002    0x146    beqz a4,ffffffff8401400a <doNormalTransfer+0x14e>
    0x84014004    0x148    slli a4,s10,0x27
    0x84014008    0x14c    or a5,a5,a4
    0x8401400a    0x14e    bne s5,a5,ffffffff84013fa8 <doNormalTransfer+0xec>
    0x8401400e    0x152    sd a3,0(s3)
    0x84014012    0x156    srli a5,s0,0x9
    0x84014016    0x15a    andi a5,a5,7
    0x84014018    0x15c    li a4,1
    0x8401401a    0x15e    sllw a4,a4,s7
    0x8401401e    0x162    or a5,a5,a4
    0x84014020    0x164    slli a5,a5,0x9
    0x84014022    0x166    ld a4,16(sp)          ; stack access
    0x84014024    0x168    and a5,a5,a4
    0x84014026    0x16a    ld a4,24(sp)          ; stack access
    0x84014028    0x16c    and s0,s0,a4
    0x8401402a    0x16e    or s0,s0,a5
    0x8401402c    0x170    j ffffffff84013fd0 <doNormalTransfer+0x114>
    0x8401402e    0x172    slli a5,s7,0x7
    0x84014032    0x176    andi a5,a5,384
    0x84014036    0x17a    or s0,s0,a5
    0x84014038    0x17c    j ffffffff84013f28 <doNormalTransfer+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
146 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 228 nodes.

Section restart (250 of 271)
============================

Deriving specifications
-----------------------

Section `restart` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `restart`:

    0x84013aa0     0x0    addi sp,sp,-16
    0x84013aa2     0x2    sd ra,8(sp)           ; stack access
    0x84013aa4     0x4    sd s0,0(sp)           ; stack access
    0x84013aa6     0x6    mv s0,a0
    0x84013aa8     0x8    ld a5,280(a0)
    0x84013aac     0xc    andi a5,a5,15
    0x84013aae     0xe    beqz a5,ffffffff84013ab8 <restart+0x18>
    0x84013ab0    0x10    addi a5,a5,-3
    0x84013ab2    0x12    li a4,3
    0x84013ab4    0x14    bltu a4,a5,ffffffff84013ad8 <restart+0x38>
    0x84013ab8    0x18    mv a0,s0
    0x84013aba    0x1a    jal ra,ffffffff84012f24 <cancelIPC>
    0x84013abe    0x1e    mv a0,s0
    0x84013ac0    0x20    jal ra,ffffffff840118ae <setupReplyMaster>
    0x84013ac4    0x24    li a1,2
    0x84013ac6    0x26    mv a0,s0
    0x84013ac8    0x28    jal ra,ffffffff840124f6 <setThreadState>
    0x84013acc    0x2c    mv a0,s0
    0x84013ace    0x2e    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x84013ad2    0x32    mv a0,s0
    0x84013ad4    0x34    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x84013ad8    0x38    ld ra,8(sp)           ; stack access
    0x84013ada    0x3a    ld s0,0(sp)           ; stack access
    0x84013adc    0x3c    addi sp,sp,16
    0x84013ade    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 40 nodes.

Section cancelBadgedSends (251 of 271)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 86 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x84012db4     0x0    addi sp,sp,-80
    0x84012db6     0x2    sd ra,72(sp)          ; stack access
    0x84012db8     0x4    sd s0,64(sp)          ; stack access
    0x84012dba     0x6    sd s1,56(sp)          ; stack access
    0x84012dbc     0x8    sd s2,48(sp)          ; stack access
    0x84012dbe     0xa    sd s3,40(sp)          ; stack access
    0x84012dc0     0xc    sd s4,32(sp)          ; stack access
    0x84012dc2     0xe    sd s5,24(sp)          ; stack access
    0x84012dc4    0x10    ld a5,0(a0)
    0x84012dc6    0x12    andi a3,a5,3
    0x84012dca    0x16    li a4,1
    0x84012dcc    0x18    beq a3,a4,ffffffff84012dd8 <cancelBadgedSends+0x24>
    0x84012dd0    0x1c    andi a5,a5,1
    0x84012dd2    0x1e    beqz a5,ffffffff84012e78 <cancelBadgedSends+0xc4>
    0x84012dd4    0x20    jal ra,ffffffff8401045e <halt>
    0x84012dd8    0x24    mv s4,a0
    0x84012dda    0x26    mv s3,a1
    0x84012ddc    0x28    ld s0,8(a0)
    0x84012dde    0x2a    mv s2,s0
    0x84012de0    0x2c    lui a4,0xf8000
    0x84012de4    0x30    srli a4,a4,0x19
    0x84012de6    0x32    and a4,a4,a5
    0x84012de8    0x34    srli a3,a5,0x26
    0x84012dec    0x38    andi a3,a3,1
    0x84012dee    0x3a    beqz a3,ffffffff84012df6 <cancelBadgedSends+0x42>
    0x84012df0    0x3c    li a3,-1
    0x84012df2    0x3e    slli a3,a3,0x27
    0x84012df4    0x40    or a4,a4,a3
    0x84012df6    0x42    mv s1,a4
    0x84012df8    0x44    sd zero,8(s4)
    0x84012dfc    0x48    srli a5,a5,0x27
    0x84012dfe    0x4a    slli a5,a5,0x27
    0x84012e00    0x4c    sd a5,0(s4)
    0x84012e04    0x50    bnez s0,ffffffff84012e1c <cancelBadgedSends+0x68>
    0x84012e06    0x52    sd zero,8(s4)
    0x84012e0a    0x56    lui a3,0xf8000
    0x84012e0e    0x5a    srli a3,a3,0x19
    0x84012e10    0x5c    and a4,a4,a3
    0x84012e12    0x5e    or a5,a5,a4
    0x84012e14    0x60    sd a5,0(s4)
    0x84012e18    0x64    j ffffffff84012e74 <cancelBadgedSends+0xc0>
    0x84012e1a    0x66    beqz s0,ffffffff84012e4c <cancelBadgedSends+0x98>
    0x84012e1c    0x68    ld a5,296(s0)
    0x84012e20    0x6c    mv s5,s0
    0x84012e22    0x6e    ld s0,408(s0)
    0x84012e26    0x72    bne s3,a5,ffffffff84012e1a <cancelBadgedSends+0x66>
    0x84012e2a    0x76    li a1,2
    0x84012e2c    0x78    mv a0,s5
    0x84012e2e    0x7a    jal ra,ffffffff840124f6 <setThreadState>
    0x84012e32    0x7e    mv a0,s5
    0x84012e34    0x80    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x84012e38    0x84    mv a1,s2
    0x84012e3a    0x86    mv a2,s1
    0x84012e3c    0x88    mv a0,s5
    0x84012e3e    0x8a    jal ra,ffffffff84012d7e <tcbEPDequeue>
    0x84012e42    0x8e    mv s2,a0
    0x84012e44    0x90    mv s1,a1
    0x84012e46    0x92    sd a0,0(sp)           ; stack access
    0x84012e48    0x94    sd a1,8(sp)           ; stack access
    0x84012e4a    0x96    j ffffffff84012e1a <cancelBadgedSends+0x66>
    0x84012e4c    0x98    sd s2,8(s4)
    0x84012e50    0x9c    ld a5,0(s4)
    0x84012e54    0xa0    li a4,-1
    0x84012e56    0xa2    slli a4,a4,0x27
    0x84012e58    0xa4    addi a4,a4,3
    0x84012e5a    0xa6    and a5,a5,a4
    0x84012e5c    0xa8    lui a4,0xf8000
    0x84012e60    0xac    srli a4,a4,0x19
    0x84012e62    0xae    and s1,s1,a4
    0x84012e64    0xb0    or s1,s1,a5
    0x84012e66    0xb2    beqz s2,ffffffff84012e8a <cancelBadgedSends+0xd6>
    0x84012e6a    0xb6    andi s1,s1,-4
    0x84012e6c    0xb8    ori s1,s1,1
    0x84012e70    0xbc    sd s1,0(s4)
    0x84012e74    0xc0    jal ra,ffffffff84012490 <rescheduleRequired>
    0x84012e78    0xc4    ld ra,72(sp)          ; stack access
    0x84012e7a    0xc6    ld s0,64(sp)          ; stack access
    0x84012e7c    0xc8    ld s1,56(sp)          ; stack access
    0x84012e7e    0xca    ld s2,48(sp)          ; stack access
    0x84012e80    0xcc    ld s3,40(sp)          ; stack access
    0x84012e82    0xce    ld s4,32(sp)          ; stack access
    0x84012e84    0xd0    ld s5,24(sp)          ; stack access
    0x84012e86    0xd2    addi sp,sp,80
    0x84012e88    0xd4    ret
    0x84012e8a    0xd6    sd s1,0(s4)
    0x84012e8e    0xda    j ffffffff84012e74 <cancelBadgedSends+0xc0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
86 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 134 nodes.

Section schedule (252 of 271)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 94 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedule`:

    0x84012bb0      0x0    auipc a5,0x18
    0x84012bb4      0x4    ld a5,-904(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012bb8      0x8    beqz a5,ffffffff84012cce <schedule+0x11e>
    0x84012bbc      0xc    addi sp,sp,-48
    0x84012bbe      0xe    sd ra,40(sp)          ; stack access
    0x84012bc0     0x10    sd s0,32(sp)          ; stack access
    0x84012bc2     0x12    sd s1,24(sp)          ; stack access
    0x84012bc4     0x14    sd s2,16(sp)          ; stack access
    0x84012bc6     0x16    sd s3,8(sp)           ; stack access
    0x84012bc8     0x18    sd s4,0(sp)           ; stack access
    0x84012bca     0x1a    auipc a0,0x18
    0x84012bce     0x1e    ld a0,-914(a0) # ffffffff8402a838 <ksCurThread>
    0x84012bd2     0x22    ld a5,280(a0)
    0x84012bd6     0x26    andi a5,a5,15
    0x84012bd8     0x28    addi a5,a5,-1
    0x84012bda     0x2a    li a4,1
    0x84012bdc     0x2c    li s3,0
    0x84012bde     0x2e    bgeu a4,a5,ffffffff84012c7c <schedule+0xcc>
    0x84012be2     0x32    auipc s0,0x18
    0x84012be6     0x36    ld s0,-954(s0) # ffffffff8402a828 <ksSchedulerAction>
    0x84012bea     0x3a    li a5,1
    0x84012bec     0x3c    beq s0,a5,ffffffff84012c84 <schedule+0xd4>
    0x84012bf0     0x40    auipc s4,0x18
    0x84012bf4     0x44    ld s4,-952(s4) # ffffffff8402a838 <ksCurThread>
    0x84012bf8     0x48    auipc a5,0x18
    0x84012bfc     0x4c    ld a5,-968(a5) # ffffffff8402a830 <ksIdleThread>
    0x84012c00     0x50    beq s4,a5,ffffffff84012c10 <schedule+0x60>
    0x84012c04     0x54    ld a4,360(s0)
    0x84012c08     0x58    ld a5,360(s4)
    0x84012c0c     0x5c    bgeu a4,a5,ffffffff84012c8a <schedule+0xda>
    0x84012c10     0x60    auipc s1,0x18
    0x84012c14     0x64    ld s1,-1016(s1) # ffffffff8402a818 <ksCurDomain>
    0x84012c18     0x68    slli a4,s1,0x3
    0x84012c1c     0x6c    auipc a5,0x5
    0x84012c20     0x70    addi a5,a5,996 # ffffffff84018000 <riscvKSASIDTable>
    0x84012c24     0x74    add a5,a5,a4
    0x84012c26     0x76    ld a0,1040(a5)
    0x84012c2a     0x7a    beqz a0,ffffffff84012c8a <schedule+0xda>
    0x84012c2c     0x7c    jal ra,ffffffff840100cc <clzl>
    0x84012c30     0x80    mv s2,a0
    0x84012c32     0x82    slli s1,s1,0x2
    0x84012c34     0x84    addi a5,a0,-60
    0x84012c38     0x88    add s1,s1,a5
    0x84012c3a     0x8a    slli s1,s1,0x3
    0x84012c3c     0x8c    auipc a5,0x5
    0x84012c40     0x90    addi a5,a5,964 # ffffffff84018000 <riscvKSASIDTable>
    0x84012c44     0x94    add s1,s1,a5
    0x84012c46     0x96    ld a0,1168(s1)
    0x84012c4a     0x9a    jal ra,ffffffff840100cc <clzl>
    0x84012c4e     0x9e    li a5,63
    0x84012c52     0xa2    sub s2,a5,s2
    0x84012c56     0xa6    slli s2,s2,0x6
    0x84012c58     0xa8    sub a5,a5,a0
    0x84012c5a     0xaa    or s2,s2,a5
    0x84012c5e     0xae    ld a5,360(s0)
    0x84012c62     0xb2    bgeu a5,s2,ffffffff84012c8a <schedule+0xda>
    0x84012c66     0xb6    mv a0,s0
    0x84012c68     0xb8    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x84012c6c     0xbc    li a5,1
    0x84012c6e     0xbe    auipc a4,0x18
    0x84012c72     0xc2    sd a5,-1094(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x84012c76     0xc6    jal ra,ffffffff84012b42 <scheduleChooseNewThread>
    0x84012c7a     0xca    j ffffffff84012ca0 <schedule+0xf0>
    0x84012c7c     0xcc    jal ra,ffffffff840123f6 <tcbSchedEnqueue>
    0x84012c80     0xd0    li s3,1
    0x84012c82     0xd2    j ffffffff84012be2 <schedule+0x32>
    0x84012c84     0xd4    jal ra,ffffffff84012b42 <scheduleChooseNewThread>
    0x84012c88     0xd8    j ffffffff84012ca0 <schedule+0xf0>
    0x84012c8a     0xda    beqz s3,ffffffff84012c9a <schedule+0xea>
    0x84012c8e     0xde    ld a4,360(s0)
    0x84012c92     0xe2    ld a5,360(s4)
    0x84012c96     0xe6    beq a4,a5,ffffffff84012cb8 <schedule+0x108>
    0x84012c9a     0xea    mv a0,s0
    0x84012c9c     0xec    jal ra,ffffffff84012aa4 <switchToThread>
    0x84012ca0     0xf0    auipc a5,0x18
    0x84012ca4     0xf4    sd zero,-1144(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012ca8     0xf8    ld ra,40(sp)          ; stack access
    0x84012caa     0xfa    ld s0,32(sp)          ; stack access
    0x84012cac     0xfc    ld s1,24(sp)          ; stack access
    0x84012cae     0xfe    ld s2,16(sp)          ; stack access
    0x84012cb0    0x100    ld s3,8(sp)           ; stack access
    0x84012cb2    0x102    ld s4,0(sp)           ; stack access
    0x84012cb4    0x104    addi sp,sp,48
    0x84012cb6    0x106    ret
    0x84012cb8    0x108    mv a0,s0
    0x84012cba    0x10a    jal ra,ffffffff840128de <tcbSchedAppend>
    0x84012cbe    0x10e    li a5,1
    0x84012cc0    0x110    auipc a4,0x18
    0x84012cc4    0x114    sd a5,-1176(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x84012cc8    0x118    jal ra,ffffffff84012b42 <scheduleChooseNewThread>
    0x84012ccc    0x11c    j ffffffff84012ca0 <schedule+0xf0>
    0x84012cce    0x11e    auipc a5,0x18
    0x84012cd2    0x122    sd zero,-1190(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012cd6    0x126    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
94 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 153 nodes.

Section Arch_finaliseCap (253 of 271)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 104 instructions.


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84010e12      0x0    addi sp,sp,-80
    0x84010e14      0x2    sd ra,72(sp)          ; stack access
    0x84010e16      0x4    sd s0,64(sp)          ; stack access
    0x84010e18      0x6    sd s1,56(sp)          ; stack access
    0x84010e1a      0x8    sd s2,48(sp)          ; stack access
    0x84010e1c      0xa    sd s3,40(sp)          ; stack access
    0x84010e1e      0xc    mv s0,a0
    0x84010e20      0xe    mv s2,a2
    0x84010e22     0x10    mv s1,a1
    0x84010e24     0x12    srli a5,a1,0x3b
    0x84010e28     0x16    li a4,3
    0x84010e2a     0x18    beq a5,a4,ffffffff84010e9a <Arch_finaliseCap+0x88>
    0x84010e2e     0x1c    li a4,13
    0x84010e30     0x1e    beq a5,a4,ffffffff84010efc <Arch_finaliseCap+0xea>
    0x84010e34     0x22    li a4,1
    0x84010e36     0x24    beq a5,a4,ffffffff84010e5a <Arch_finaliseCap+0x48>
    0x84010e3a     0x28    sd zero,0(s0)         ; stack access
    0x84010e3e     0x2c    sd zero,8(s0)         ; stack access
    0x84010e42     0x30    sd zero,16(s0)        ; stack access
    0x84010e46     0x34    sd zero,24(s0)        ; stack access
    0x84010e4a     0x38    mv a0,s0
    0x84010e4c     0x3a    ld ra,72(sp)          ; stack access
    0x84010e4e     0x3c    ld s0,64(sp)          ; stack access
    0x84010e50     0x3e    ld s1,56(sp)          ; stack access
    0x84010e52     0x40    ld s2,48(sp)          ; stack access
    0x84010e54     0x42    ld s3,40(sp)          ; stack access
    0x84010e56     0x44    addi sp,sp,80
    0x84010e58     0x46    ret
    0x84010e5a     0x48    srli a1,a2,0x30
    0x84010e5e     0x4c    beqz a1,ffffffff84010e3a <Arch_finaliseCap+0x28>
    0x84010e60     0x4e    srli a0,s1,0x39
    0x84010e64     0x52    andi a0,a0,3
    0x84010e66     0x54    slli a2,s1,0x19
    0x84010e6a     0x58    srli a2,a2,0x19
    0x84010e6c     0x5a    srli s1,s1,0x26
    0x84010e6e     0x5c    andi s1,s1,1
    0x84010e70     0x5e    beqz s1,ffffffff84010e78 <Arch_finaliseCap+0x66>
    0x84010e72     0x60    li a5,-1
    0x84010e74     0x62    slli a5,a5,0x27
    0x84010e76     0x64    or a2,a2,a5
    0x84010e78     0x66    srli s2,s2,0x9
    0x84010e7c     0x6a    slli a3,s2,0x19
    0x84010e80     0x6e    srli a3,a3,0x19
    0x84010e82     0x70    srli s2,s2,0x26
    0x84010e86     0x74    andi s2,s2,1
    0x84010e8a     0x78    beqz s2,ffffffff84010e94 <Arch_finaliseCap+0x82>
    0x84010e8e     0x7c    li a5,-1
    0x84010e90     0x7e    slli a5,a5,0x27
    0x84010e92     0x80    or a3,a3,a5
    0x84010e94     0x82    jal ra,ffffffff84010a10 <unmapPage>
    0x84010e98     0x86    j ffffffff84010e3a <Arch_finaliseCap+0x28>
    0x84010e9a     0x88    beqz a3,ffffffff84010e3a <Arch_finaliseCap+0x28>
    0x84010e9c     0x8a    srli a5,a1,0x27
    0x84010ea0     0x8e    andi a5,a5,1
    0x84010ea2     0x90    beqz a5,ffffffff84010e3a <Arch_finaliseCap+0x28>
    0x84010ea4     0x92    srli s3,a2,0x30
    0x84010ea8     0x96    mv a0,s3
    0x84010eaa     0x98    jal ra,ffffffff84010184 <findVSpaceForASID>
    0x84010eae     0x9c    sd a0,16(sp)          ; stack access
    0x84010eb0     0x9e    sd a1,24(sp)          ; stack access
    0x84010eb2     0xa0    srli s2,s2,0x9
    0x84010eb6     0xa4    slli a2,s2,0x19
    0x84010eba     0xa8    srli a2,a2,0x19
    0x84010ebc     0xaa    srli s2,s2,0x26
    0x84010ec0     0xae    andi s2,s2,1
    0x84010ec4     0xb2    beqz s2,ffffffff84010ece <Arch_finaliseCap+0xbc>
    0x84010ec8     0xb6    li a5,-1
    0x84010eca     0xb8    slli a5,a5,0x27
    0x84010ecc     0xba    or a2,a2,a5
    0x84010ece     0xbc    ld a5,16(sp)          ; stack access
    0x84010ed0     0xbe    bnez a5,ffffffff84010ed8 <Arch_finaliseCap+0xc6>
    0x84010ed2     0xc0    ld a5,24(sp)          ; stack access
    0x84010ed4     0xc2    beq a5,a2,ffffffff84010ef2 <Arch_finaliseCap+0xe0>
    0x84010ed8     0xc6    slli a1,s1,0x19
    0x84010edc     0xca    srli a1,a1,0x19
    0x84010ede     0xcc    srli s1,s1,0x26
    0x84010ee0     0xce    andi s1,s1,1
    0x84010ee2     0xd0    beqz s1,ffffffff84010eea <Arch_finaliseCap+0xd8>
    0x84010ee4     0xd2    li a5,-1
    0x84010ee6     0xd4    slli a5,a5,0x27
    0x84010ee8     0xd6    or a1,a1,a5
    0x84010eea     0xd8    mv a0,s3
    0x84010eec     0xda    jal ra,ffffffff84010966 <unmapPageTable>
    0x84010ef0     0xde    j ffffffff84010e3a <Arch_finaliseCap+0x28>
    0x84010ef2     0xe0    mv a1,a2
    0x84010ef4     0xe2    mv a0,s3
    0x84010ef6     0xe4    jal ra,ffffffff84010bc2 <deleteASID>
    0x84010efa     0xe8    j ffffffff84010e3a <Arch_finaliseCap+0x28>
    0x84010efc     0xea    beqz a3,ffffffff84010e3a <Arch_finaliseCap+0x28>
    0x84010efe     0xec    srli a0,a1,0x2b
    0x84010f02     0xf0    slli a0,a0,0x30
    0x84010f04     0xf2    srli a0,a0,0x30
    0x84010f06     0xf4    slli s1,a1,0x2
    0x84010f0a     0xf8    lui a1,0xf8000
    0x84010f0e     0xfc    srli a1,a1,0x19
    0x84010f10     0xfe    and a1,a1,s1
    0x84010f12    0x100    srli s1,s1,0x26
    0x84010f14    0x102    andi s1,s1,1
    0x84010f16    0x104    beqz s1,ffffffff84010f1e <Arch_finaliseCap+0x10c>
    0x84010f18    0x106    li a5,-1
    0x84010f1a    0x108    slli a5,a5,0x27
    0x84010f1c    0x10a    or a1,a1,a5
    0x84010f1e    0x10c    jal ra,ffffffff84010b84 <deleteASIDPool>
    0x84010f22    0x110    j ffffffff84010e3a <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 156 nodes.

Section init_freemem (254 of 271)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 299 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `init_freemem`:

    0x84000f66      0x0    addi sp,sp,-192
    0x84000f68      0x2    sd ra,184(sp)         ; stack access
    0x84000f6a      0x4    sd s0,176(sp)         ; stack access
    0x84000f6c      0x6    sd s1,168(sp)         ; stack access
    0x84000f6e      0x8    sd s2,160(sp)         ; stack access
    0x84000f70      0xa    sd s3,152(sp)         ; stack access
    0x84000f72      0xc    sd s4,144(sp)         ; stack access
    0x84000f74      0xe    sd s5,136(sp)         ; stack access
    0x84000f76     0x10    sd s6,128(sp)         ; stack access
    0x84000f78     0x12    sd s7,120(sp)         ; stack access
    0x84000f7a     0x14    sd s8,112(sp)         ; stack access
    0x84000f7c     0x16    sd s9,104(sp)         ; stack access
    0x84000f7e     0x18    mv s4,a0
    0x84000f80     0x1a    mv s5,a2
    0x84000f82     0x1c    mv s6,a3
    0x84000f84     0x1e    sd a4,0(sp)           ; stack access
    0x84000f86     0x20    sd a5,8(sp)           ; stack access
    0x84000f88     0x22    mv s3,a6
    0x84000f8a     0x24    li a5,1
    0x84000f8c     0x26    bgeu a5,a2,ffffffff84000f9c <init_freemem+0x36>
    0x84000f90     0x2a    addi a4,a2,-1
    0x84000f94     0x2e    li a5,0
    0x84000f96     0x30    addi a5,a5,1
    0x84000f98     0x32    bne a5,a4,ffffffff84000f96 <init_freemem+0x30>
    0x84000f9c     0x36    addi a4,s4,-1 # fff <KERNEL_OFFSET-0xfffffffefffff001>
    0x84000fa0     0x3a    beqz a4,ffffffff84000faa <init_freemem+0x44>
    0x84000fa2     0x3c    li a5,0
    0x84000fa4     0x3e    addi a5,a5,1
    0x84000fa6     0x40    bne a5,a4,ffffffff84000fa4 <init_freemem+0x3e>
    0x84000faa     0x44    auipc a5,0x0
    0x84000fae     0x48    addi a5,a5,1734 # ffffffff84001670 <ndks_boot+0x148>
    0x84000fb2     0x4c    auipc a4,0x0
    0x84000fb6     0x50    addi a4,a4,1982 # ffffffff84001770 <ndks_boot+0x248>
    0x84000fba     0x54    sd zero,0(a5)
    0x84000fbe     0x58    sd zero,8(a5)
    0x84000fc2     0x5c    addi a5,a5,16
    0x84000fc4     0x5e    bne a5,a4,ffffffff84000fba <init_freemem+0x54>
    0x84000fc8     0x62    beqz s4,ffffffff840011f6 <init_freemem+0x290>
    0x84000fcc     0x66    mv a6,a1
    0x84000fce     0x68    auipc a4,0x1
    0x84000fd2     0x6c    addi a4,a4,-2022 # ffffffff840017e8 <avail_reg+0x8>
    0x84000fd6     0x70    slli t1,s4,0x4
    0x84000fda     0x74    add t1,t1,a1
    0x84000fdc     0x76    li a7,-1
    0x84000fde     0x78    slli a7,a7,0x26
    0x84000fe0     0x7a    li a0,127
    0x84000fe4     0x7e    slli a0,a0,0x1f
    0x84000fe6     0x80    lui t4,0x80000
    0x84000fea     0x84    li t3,1
    0x84000fec     0x86    slli t3,t3,0x26
    0x84000fee     0x88    j ffffffff84001000 <init_freemem+0x9a>
    0x84000ff0     0x8a    mv a5,t4
    0x84000ff2     0x8c    j ffffffff8400101a <init_freemem+0xb4>
    0x84000ff4     0x8e    sd a5,-8(a3)
    0x84000ff8     0x92    addi a6,a6,16
    0x84000ffa     0x94    addi a4,a4,16
    0x84000ffc     0x96    beq a6,t1,ffffffff840012ae <init_freemem+0x348>
    0x84001000     0x9a    ld a1,8(a6)
    0x84001004     0x9e    add a5,a1,a7
    0x84001008     0xa2    mv a3,a4
    0x8400100a     0xa4    ld a2,0(a6)
    0x8400100e     0xa8    add a2,a2,a7
    0x84001010     0xaa    sd a2,-8(a4)
    0x84001014     0xae    sd a5,0(a4)
    0x84001016     0xb0    bltu a0,a1,ffffffff84000ff0 <init_freemem+0x8a>
    0x8400101a     0xb4    sd a5,0(a3)
    0x8400101c     0xb6    ld a5,-8(a3)
    0x84001020     0xba    add a2,a5,t3
    0x84001024     0xbe    bgeu a0,a2,ffffffff84000ff4 <init_freemem+0x8e>
    0x84001028     0xc2    mv a5,t4
    0x8400102a     0xc4    j ffffffff84000ff4 <init_freemem+0x8e>
    0x8400102c     0xc6    addi s1,s1,1
    0x8400102e     0xc8    bgeu s0,s4,ffffffff840011fa <init_freemem+0x294>
    0x84001032     0xcc    bgeu s1,s5,ffffffff8400111e <init_freemem+0x1b8>
    0x84001036     0xd0    slli s2,s1,0x4
    0x8400103a     0xd4    add s2,s2,s6
    0x8400103c     0xd6    ld a1,0(s2)
    0x84001040     0xda    ld a4,8(s2)
    0x84001044     0xde    beq a1,a4,ffffffff8400102c <init_freemem+0xc6>
    0x84001048     0xe2    slli a5,s0,0x4
    0x8400104c     0xe6    add a5,a5,s7
    0x8400104e     0xe8    ld a3,696(a5)
    0x84001052     0xec    ld a5,704(a5)
    0x84001056     0xf0    bltu a3,a5,ffffffff8400105e <init_freemem+0xf8>
    0x8400105a     0xf4    addi s0,s0,1
    0x8400105c     0xf6    j ffffffff8400102e <init_freemem+0xc8>
    0x8400105e     0xf8    bgeu a3,a4,ffffffff84001092 <init_freemem+0x12c>
    0x84001062     0xfc    bgeu a1,a5,ffffffff840010a6 <init_freemem+0x140>
    0x84001066    0x100    bltu a3,a1,ffffffff840010bc <init_freemem+0x156>
    0x8400106a    0x104    slli a3,s0,0x4
    0x8400106e    0x108    add a3,a3,s7
    0x84001070    0x10a    bgeu a5,a4,ffffffff84001076 <init_freemem+0x110>
    0x84001074    0x10e    mv a4,a5
    0x84001076    0x110    sd a4,696(a3)
    0x8400107a    0x114    ld a1,8(s2)
    0x8400107e    0x118    add a1,a1,s8
    0x84001080    0x11a    ld a0,0(s2)
    0x84001084    0x11e    add a0,a0,s8
    0x84001086    0x120    sd a0,48(sp)          ; stack access
    0x84001088    0x122    sd a1,56(sp)          ; stack access
    0x8400108a    0x124    jal ra,ffffffff84000366 <reserve_region>
    0x8400108e    0x128    addi s1,s1,1
    0x84001090    0x12a    j ffffffff8400102e <init_freemem+0xc8>
    0x84001092    0x12c    add a0,a1,s8
    0x84001096    0x130    sd a0,32(sp)          ; stack access
    0x84001098    0x132    add a1,a4,s8
    0x8400109c    0x136    sd a1,40(sp)          ; stack access
    0x8400109e    0x138    jal ra,ffffffff84000366 <reserve_region>
    0x840010a2    0x13c    addi s1,s1,1
    0x840010a4    0x13e    j ffffffff8400102e <init_freemem+0xc8>
    0x840010a6    0x140    slli a5,s0,0x4
    0x840010aa    0x144    add a5,a5,s7
    0x840010ac    0x146    ld a0,696(a5)
    0x840010b0    0x14a    ld a1,704(a5)
    0x840010b4    0x14e    jal ra,ffffffff84000532 <insert_region>
    0x840010b8    0x152    addi s0,s0,1
    0x840010ba    0x154    j ffffffff8400102e <init_freemem+0xc8>
    0x840010bc    0x156    slli s9,s0,0x4
    0x840010c0    0x15a    add s9,s9,s7
    0x840010c2    0x15c    ld a0,696(s9)
    0x840010c6    0x160    sd a0,16(sp)          ; stack access
    0x840010c8    0x162    sd a1,24(sp)          ; stack access
    0x840010ca    0x164    jal ra,ffffffff84000532 <insert_region>
    0x840010ce    0x168    ld a5,8(s2)
    0x840010d2    0x16c    ld a4,704(s9)
    0x840010d6    0x170    bltu a5,a4,ffffffff840010de <init_freemem+0x178>
    0x840010da    0x174    addi s0,s0,1
    0x840010dc    0x176    j ffffffff8400102e <init_freemem+0xc8>
    0x840010de    0x178    sd a5,696(s9)
    0x840010e2    0x17c    ld a0,0(s2)
    0x840010e6    0x180    add a0,a0,s8
    0x840010e8    0x182    sd a0,64(sp)          ; stack access
    0x840010ea    0x184    add a1,a5,s8
    0x840010ee    0x188    sd a1,72(sp)          ; stack access
    0x840010f0    0x18a    jal ra,ffffffff84000366 <reserve_region>
    0x840010f4    0x18e    addi s1,s1,1
    0x840010f6    0x190    j ffffffff8400102e <init_freemem+0xc8>
    0x840010f8    0x192    addi s1,s1,1
    0x840010fa    0x194    addi s2,s2,16
    0x840010fc    0x196    beq s5,s1,ffffffff8400111a <init_freemem+0x1b4>
    0x84001100    0x19a    ld a0,0(s2)
    0x84001104    0x19e    ld a1,8(s2)
    0x84001108    0x1a2    bgeu a0,a1,ffffffff840010f8 <init_freemem+0x192>
    0x8400110c    0x1a6    add a0,a0,s6
    0x8400110e    0x1a8    sd a0,80(sp)          ; stack access
    0x84001110    0x1aa    add a1,a1,s6
    0x84001112    0x1ac    sd a1,88(sp)          ; stack access
    0x84001114    0x1ae    jal ra,ffffffff84000366 <reserve_region>
    0x84001118    0x1b2    j ffffffff840010f8 <init_freemem+0x192>
    0x8400111a    0x1b4    bgeu s0,s4,ffffffff84001208 <init_freemem+0x2a2>
    0x8400111e    0x1b8    slli a5,s0,0x4
    0x84001122    0x1bc    auipc s1,0x0
    0x84001126    0x1c0    addi s1,s1,1726 # ffffffff840017e0 <avail_reg>
    0x8400112a    0x1c4    add s1,s1,a5
    0x8400112c    0x1c6    auipc s2,0x0
    0x84001130    0x1ca    addi s2,s2,1020 # ffffffff84001528 <ndks_boot>
    0x84001134    0x1ce    j ffffffff8400113e <init_freemem+0x1d8>
    0x84001136    0x1d0    addi s0,s0,1
    0x84001138    0x1d2    addi s1,s1,16
    0x8400113a    0x1d4    beq s4,s0,ffffffff84001208 <init_freemem+0x2a2>
    0x8400113e    0x1d8    ld a4,0(s1)
    0x84001140    0x1da    ld a5,8(s1)
    0x84001142    0x1dc    bgeu a4,a5,ffffffff84001136 <init_freemem+0x1d0>
    0x84001146    0x1e0    slli a5,s0,0x4
    0x8400114a    0x1e4    add a5,a5,s2
    0x8400114c    0x1e6    ld a0,696(a5)
    0x84001150    0x1ea    ld a1,704(a5)
    0x84001154    0x1ee    jal ra,ffffffff84000532 <insert_region>
    0x84001158    0x1f2    j ffffffff84001136 <init_freemem+0x1d0>
    0x8400115a    0x1f4    jal ra,ffffffff8401045e <halt>
    0x8400115e    0x1f8    mv s5,s1
    0x84001160    0x1fa    mv s1,s2
    0x84001162    0x1fc    mv a3,s3
    0x84001164    0x1fe    ld a1,0(sp)           ; stack access
    0x84001166    0x200    ld a2,8(sp)           ; stack access
    0x84001168    0x202    mv a0,s0
    0x8400116a    0x204    jal ra,ffffffff84000e7c <create_rootserver_objects>
    0x8400116e    0x208    li a5,15
    0x84001170    0x20a    bltu a5,s5,ffffffff84001194 <init_freemem+0x22e>
    0x84001174    0x20e    auipc a5,0x0
    0x84001178    0x212    addi a5,a5,948 # ffffffff84001528 <ndks_boot>
    0x8400117c    0x216    addi a4,s5,20 # 300014 <KERNEL_OFFSET-0xfffffffeffcfffec>
    0x84001180    0x21a    slli a4,a4,0x4
    0x84001182    0x21c    add a4,a4,a5
    0x84001184    0x21e    ld a4,16(a4)
    0x84001186    0x220    addi s1,s1,20
    0x84001188    0x222    slli s1,s1,0x4
    0x8400118a    0x224    add a5,a5,s1
    0x8400118c    0x226    sd a4,16(a5)
    0x8400118e    0x228    add s4,s4,s0
    0x84001190    0x22a    sd s4,8(a5)
    0x84001194    0x22e    addi s5,s5,20
    0x84001196    0x230    slli s5,s5,0x4
    0x84001198    0x232    auipc a5,0x0
    0x8400119c    0x236    addi a5,a5,912 # ffffffff84001528 <ndks_boot>
    0x840011a0    0x23a    add s5,s5,a5
    0x840011a2    0x23c    sd s0,16(s5)
    0x840011a6    0x240    ld ra,184(sp)         ; stack access
    0x840011a8    0x242    ld s0,176(sp)         ; stack access
    0x840011aa    0x244    ld s1,168(sp)         ; stack access
    0x840011ac    0x246    ld s2,160(sp)         ; stack access
    0x840011ae    0x248    ld s3,152(sp)         ; stack access
    0x840011b0    0x24a    ld s4,144(sp)         ; stack access
    0x840011b2    0x24c    ld s5,136(sp)         ; stack access
    0x840011b4    0x24e    ld s6,128(sp)         ; stack access
    0x840011b6    0x250    ld s7,120(sp)         ; stack access
    0x840011b8    0x252    ld s8,112(sp)         ; stack access
    0x840011ba    0x254    ld s9,104(sp)         ; stack access
    0x840011bc    0x256    addi sp,sp,192
    0x840011be    0x258    ret
    0x840011c0    0x25a    addi s5,s1,-1
    0x840011c4    0x25e    ld s0,8(a5)
    0x840011c6    0x260    sub s0,s0,s4
    0x840011ca    0x264    srl s0,s0,a4
    0x840011ce    0x268    sll s0,s0,a4
    0x840011d2    0x26c    addi a5,a5,-16
    0x840011d4    0x26e    mv s2,s1
    0x840011d6    0x270    ld a3,16(a5)
    0x840011d8    0x272    bgeu s0,a3,ffffffff84001162 <init_freemem+0x1fc>
    0x840011dc    0x276    mv s1,s5
    0x840011de    0x278    bltu a2,s1,ffffffff840011c0 <init_freemem+0x25a>
    0x840011e2    0x27c    addi s2,s2,20
    0x840011e4    0x27e    slli s2,s2,0x4
    0x840011e6    0x280    add s2,s2,a1
    0x840011e8    0x282    ld a3,16(a5)
    0x840011ea    0x284    sd a3,8(s2)
    0x840011ee    0x288    ld a3,24(a5)
    0x840011f0    0x28a    sd a3,16(s2)
    0x840011f4    0x28e    j ffffffff840011c0 <init_freemem+0x25a>
    0x840011f6    0x290    mv s0,s4
    0x840011f8    0x292    mv s1,s4
    0x840011fa    0x294    slli s2,s1,0x4
    0x840011fe    0x298    add s2,s2,s6
    0x84001200    0x29a    li s6,1
    0x84001202    0x29c    slli s6,s6,0x26
    0x84001204    0x29e    bltu s1,s5,ffffffff84001100 <init_freemem+0x19a>
    0x84001208    0x2a2    auipc a5,0x0
    0x8400120c    0x2a6    addi a5,a5,800 # ffffffff84001528 <ndks_boot>
    0x84001210    0x2aa    ld a3,568(a5)
    0x84001214    0x2ae    ld a4,576(a5)
    0x84001218    0x2b2    auipc a5,0x0
    0x8400121c    0x2b6    addi a5,a5,1336 # ffffffff84001750 <ndks_boot+0x228>
    0x84001220    0x2ba    li s1,15
    0x84001222    0x2bc    bne a3,a4,ffffffff8400115a <init_freemem+0x1f4>
    0x84001226    0x2c0    mv s2,s1
    0x84001228    0x2c2    addi s1,s1,-1
    0x8400122a    0x2c4    ld a3,0(a5)
    0x8400122c    0x2c6    addi a5,a5,-16
    0x8400122e    0x2c8    ld a4,24(a5)
    0x84001230    0x2ca    beq a3,a4,ffffffff84001226 <init_freemem+0x2c0>
    0x84001234    0x2ce    ld a5,0(sp)           ; stack access
    0x84001236    0x2d0    sd a5,16(sp)          ; stack access
    0x84001238    0x2d2    ld a5,8(sp)           ; stack access
    0x8400123a    0x2d4    sd a5,24(sp)          ; stack access
    0x8400123c    0x2d6    mv s0,s3
    0x8400123e    0x2d8    beqz s3,ffffffff84001248 <init_freemem+0x2e2>
    0x84001242    0x2dc    li s0,1
    0x84001244    0x2de    sll s0,s0,s3
    0x84001248    0x2e2    ld a0,16(sp)          ; stack access
    0x8400124a    0x2e4    ld a1,24(sp)          ; stack access
    0x8400124c    0x2e6    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84001250    0x2ea    lui s4,0x1004
    0x84001254    0x2ee    addi s4,s4,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x84001258    0x2f2    add s0,s0,s4
    0x8400125a    0x2f4    slli s4,a0,0xc
    0x8400125e    0x2f8    add s4,s4,s0
    0x84001260    0x2fa    mv a3,s3
    0x84001262    0x2fc    li a5,24
    0x84001264    0x2fe    bgeu s3,a5,ffffffff8400126a <init_freemem+0x304>
    0x84001268    0x302    li a3,24
    0x8400126a    0x304    sext.w a4,a3
    0x8400126e    0x308    addi a5,s1,20
    0x84001272    0x30c    slli a2,a5,0x4
    0x84001276    0x310    auipc a5,0x0
    0x8400127a    0x314    addi a5,a5,690 # ffffffff84001528 <ndks_boot>
    0x8400127e    0x318    add a5,a5,a2
    0x84001280    0x31a    ld s0,16(a5)
    0x84001282    0x31c    sub s0,s0,s4
    0x84001286    0x320    srl s0,s0,a3
    0x8400128a    0x324    sll s0,s0,a3
    0x8400128e    0x328    ld a5,8(a5)
    0x84001290    0x32a    bgeu s0,a5,ffffffff8400115e <init_freemem+0x1f8>
    0x84001294    0x32e    slli a5,s1,0x4
    0x84001298    0x332    auipc a3,0x0
    0x8400129c    0x336    addi a3,a3,968 # ffffffff84001660 <ndks_boot+0x138>
    0x840012a0    0x33a    add a5,a5,a3
    0x840012a2    0x33c    li a2,15
    0x840012a4    0x33e    auipc a1,0x0
    0x840012a8    0x342    addi a1,a1,644 # ffffffff84001528 <ndks_boot>
    0x840012ac    0x346    j ffffffff840011de <init_freemem+0x278>
    0x840012ae    0x348    li s1,0
    0x840012b0    0x34a    li s0,0
    0x840012b2    0x34c    auipc s7,0x0
    0x840012b6    0x350    addi s7,s7,630 # ffffffff84001528 <ndks_boot>
    0x840012ba    0x354    li s8,1
    0x840012bc    0x356    slli s8,s8,0x26
    0x840012be    0x358    bnez s5,ffffffff84001036 <init_freemem+0xd0>
    0x840012c2    0x35c    mv s0,s5
    0x840012c4    0x35e    j ffffffff8400111e <init_freemem+0x1b8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
299 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 463 nodes.

Section create_initial_thread (255 of 271)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 107 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `create_initial_thread`:

    0x84000b9e      0x0    addi sp,sp,-144
    0x84000ba0      0x2    sd ra,120(sp)         ; stack access
    0x84000ba2      0x4    sd s0,112(sp)         ; stack access
    0x84000ba4      0x6    sd s1,104(sp)         ; stack access
    0x84000ba6      0x8    sd s2,96(sp)          ; stack access
    0x84000ba8      0xa    sd s3,88(sp)          ; stack access
    0x84000baa      0xc    sd s4,80(sp)          ; stack access
    0x84000bac      0xe    sd s5,72(sp)          ; stack access
    0x84000bae     0x10    sd a0,16(sp)          ; stack access
    0x84000bb0     0x12    sd a1,24(sp)          ; stack access
    0x84000bb2     0x14    sd a2,0(sp)           ; stack access
    0x84000bb4     0x16    sd a3,8(sp)           ; stack access
    0x84000bb6     0x18    mv s2,a4
    0x84000bb8     0x1a    mv s3,a5
    0x84000bba     0x1c    mv s4,a6
    0x84000bbc     0x1e    mv s1,a7
    0x84000bbe     0x20    sd a7,136(sp)         ; stack access
    0x84000bc0     0x22    auipc s0,0x1
    0x84000bc4     0x26    ld s0,-1032(s0) # ffffffff840017b8 <rootserver+0x30>
    0x84000bc8     0x2a    addi s0,s0,512
    0x84000bcc     0x2e    li a5,5
    0x84000bce     0x30    sd a5,368(s0)
    0x84000bd2     0x34    li a5,32
    0x84000bd6     0x38    sd a5,256(s0)
    0x84000bda     0x3c    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000bde     0x40    mv a2,s1
    0x84000be0     0x42    ld a3,144(sp)         ; stack access
    0x84000be2     0x44    addi a1,a0,320
    0x84000be6     0x48    addi a0,sp,40
    0x84000be8     0x4a    jal ra,ffffffff84011fa8 <deriveCap>
    0x84000bec     0x4e    ld a5,40(sp)          ; stack access
    0x84000bee     0x50    li s5,0
    0x84000bf0     0x52    bnez a5,ffffffff84000cbc <create_initial_thread+0x11e>
    0x84000bf2     0x54    mv s5,s0
    0x84000bf4     0x56    ld a0,16(sp)          ; stack access
    0x84000bf6     0x58    ld a1,24(sp)          ; stack access
    0x84000bf8     0x5a    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000bfc     0x5e    auipc s1,0x1
    0x84000c00     0x62    addi s1,s1,-1748 # ffffffff84001528 <ndks_boot>
    0x84000c04     0x66    ld a3,656(s1)
    0x84000c08     0x6a    addi a2,a0,64
    0x84000c0c     0x6e    ld a0,16(sp)          ; stack access
    0x84000c0e     0x70    ld a1,24(sp)          ; stack access
    0x84000c10     0x72    jal ra,ffffffff84011576 <cteInsert>
    0x84000c14     0x76    ld a0,16(sp)          ; stack access
    0x84000c16     0x78    ld a1,24(sp)          ; stack access
    0x84000c18     0x7a    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000c1c     0x7e    ld a3,656(s1)
    0x84000c20     0x82    addi a3,a3,32
    0x84000c24     0x86    addi a2,a0,96
    0x84000c28     0x8a    ld a0,0(sp)           ; stack access
    0x84000c2a     0x8c    ld a1,8(sp)           ; stack access
    0x84000c2c     0x8e    jal ra,ffffffff84011576 <cteInsert>
    0x84000c30     0x92    ld a0,16(sp)          ; stack access
    0x84000c32     0x94    ld a1,24(sp)          ; stack access
    0x84000c34     0x96    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000c38     0x9a    ld a3,656(s1)
    0x84000c3c     0x9e    addi a3,a3,128
    0x84000c40     0xa2    addi a2,a0,320
    0x84000c44     0xa6    ld a0,48(sp)          ; stack access
    0x84000c46     0xa8    ld a1,56(sp)          ; stack access
    0x84000c48     0xaa    jal ra,ffffffff84011576 <cteInsert>
    0x84000c4c     0xae    sd s4,384(s0)
    0x84000c50     0xb2    sd s3,72(s0)
    0x84000c54     0xb6    sd s2,272(s0)
    0x84000c58     0xba    li a5,255
    0x84000c5c     0xbe    sd a5,360(s0)
    0x84000c60     0xc2    sd a5,352(s0)
    0x84000c64     0xc6    mv a0,s0
    0x84000c66     0xc8    jal ra,ffffffff840118ae <setupReplyMaster>
    0x84000c6a     0xcc    li a1,1
    0x84000c6c     0xce    mv a0,s0
    0x84000c6e     0xd0    jal ra,ffffffff840124f6 <setThreadState>
    0x84000c72     0xd4    auipc a5,0x2a
    0x84000c76     0xd8    ld a5,-1130(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84000c7a     0xdc    slli a4,a5,0x4
    0x84000c7e     0xe0    auipc a5,0x17
    0x84000c82     0xe4    addi a5,a5,-1934 # ffffffff840174f0 <msgRegisters>
    0x84000c86     0xe8    add a5,a5,a4
    0x84000c88     0xea    ld a4,192(a5)
    0x84000c8a     0xec    auipc a3,0x2a
    0x84000c8e     0xf0    sd a4,-1138(a3) # ffffffff8402a818 <ksCurDomain>
    0x84000c92     0xf4    ld a5,200(a5)
    0x84000c94     0xf6    auipc a4,0x2a
    0x84000c98     0xfa    sd a5,-1156(a4) # ffffffff8402a810 <ksDomainTime>
    0x84000c9c     0xfe    ld a0,16(sp)          ; stack access
    0x84000c9e    0x100    ld a1,24(sp)          ; stack access
    0x84000ca0    0x102    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x84000ca4    0x106    slli s0,s0,0x19
    0x84000ca6    0x108    srli s0,s0,0x19
    0x84000ca8    0x10a    li a5,3
    0x84000caa    0x10c    slli a4,a5,0x3d
    0x84000cae    0x110    or s0,s0,a4
    0x84000cb0    0x112    sd s0,32(a0)
    0x84000cb2    0x114    sd zero,40(a0)
    0x84000cb6    0x118    sd zero,48(a0)
    0x84000cba    0x11c    sd a5,56(a0)
    0x84000cbc    0x11e    mv a0,s5
    0x84000cbe    0x120    ld ra,120(sp)         ; stack access
    0x84000cc0    0x122    ld s0,112(sp)         ; stack access
    0x84000cc2    0x124    ld s1,104(sp)         ; stack access
    0x84000cc4    0x126    ld s2,96(sp)          ; stack access
    0x84000cc6    0x128    ld s3,88(sp)          ; stack access
    0x84000cc8    0x12a    ld s4,80(sp)          ; stack access
    0x84000cca    0x12c    ld s5,72(sp)          ; stack access
    0x84000ccc    0x12e    addi sp,sp,144
    0x84000cce    0x130    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
107 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 176 nodes.

Section sendIPC (256 of 271)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 141 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `sendIPC`:

    0x84014170      0x0    addi sp,sp,-80
    0x84014172      0x2    sd ra,72(sp)          ; stack access
    0x84014174      0x4    sd s0,64(sp)          ; stack access
    0x84014176      0x6    sd s1,56(sp)          ; stack access
    0x84014178      0x8    sd s2,48(sp)          ; stack access
    0x8401417a      0xa    sd s3,40(sp)          ; stack access
    0x8401417c      0xc    sd s4,32(sp)          ; stack access
    0x8401417e      0xe    sd s5,24(sp)          ; stack access
    0x84014180     0x10    sd s6,16(sp)          ; stack access
    0x84014182     0x12    mv s3,a1
    0x84014184     0x14    mv s5,a2
    0x84014186     0x16    mv s2,a3
    0x84014188     0x18    mv s4,a4
    0x8401418a     0x1a    mv s1,a5
    0x8401418c     0x1c    mv s0,a6
    0x8401418e     0x1e    ld a6,0(a6)
    0x84014192     0x22    andi a5,a6,2
    0x84014196     0x26    beqz a5,ffffffff84014226 <sendIPC+0xb6>
    0x84014198     0x28    andi a4,a6,3
    0x8401419c     0x2c    li a5,2
    0x8401419e     0x2e    bne a4,a5,ffffffff84014228 <sendIPC+0xb8>
    0x840141a2     0x32    ld s6,8(s0)
    0x840141a6     0x36    lui a2,0xf8000
    0x840141aa     0x3a    srli a2,a2,0x19
    0x840141ac     0x3c    and a2,a6,a2
    0x840141b0     0x40    srli a6,a6,0x26
    0x840141b4     0x44    andi a6,a6,1
    0x840141b8     0x48    beqz a6,ffffffff840141c2 <sendIPC+0x52>
    0x840141bc     0x4c    li a5,-1
    0x840141be     0x4e    slli a5,a5,0x27
    0x840141c0     0x50    or a2,a2,a5
    0x840141c2     0x52    mv a1,s6
    0x840141c4     0x54    mv a0,s6
    0x840141c6     0x56    jal ra,ffffffff84012d7e <tcbEPDequeue>
    0x840141ca     0x5a    sd a0,0(sp)           ; stack access
    0x840141cc     0x5c    sd a1,8(sp)           ; stack access
    0x840141ce     0x5e    sd a0,8(s0)
    0x840141d0     0x60    ld a5,0(s0)
    0x840141d2     0x62    li a4,-1
    0x840141d4     0x64    slli a4,a4,0x27
    0x840141d6     0x66    addi a4,a4,3
    0x840141d8     0x68    and a5,a5,a4
    0x840141da     0x6a    lui a4,0xf8000
    0x840141de     0x6e    srli a4,a4,0x19
    0x840141e0     0x70    and a1,a1,a4
    0x840141e2     0x72    or a1,a1,a5
    0x840141e4     0x74    beqz a0,ffffffff840142d6 <sendIPC+0x166>
    0x840141e8     0x78    sd a1,0(s0)
    0x840141ea     0x7a    mv a4,s6
    0x840141ec     0x7c    mv a3,s2
    0x840141ee     0x7e    mv a2,s5
    0x840141f0     0x80    mv a1,s0
    0x840141f2     0x82    mv a0,s1
    0x840141f4     0x84    jal ra,ffffffff8401403a <doIPCTransfer>
    0x840141f8     0x88    ld s0,288(s6)
    0x840141fc     0x8c    li a1,1
    0x840141fe     0x8e    mv a0,s6
    0x84014200     0x90    jal ra,ffffffff840124f6 <setThreadState>
    0x84014204     0x94    mv a0,s6
    0x84014206     0x96    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x8401420a     0x9a    beqz s3,ffffffff84014228 <sendIPC+0xb8>
    0x8401420e     0x9e    or s2,s2,s4
    0x84014212     0xa2    beqz s2,ffffffff840142dc <sendIPC+0x16c>
    0x84014216     0xa6    srli a2,s0,0x3
    0x8401421a     0xaa    andi a2,a2,1
    0x8401421c     0xac    mv a1,s6
    0x8401421e     0xae    mv a0,s1
    0x84014220     0xb0    jal ra,ffffffff84013d5e <setupCallerCap>
    0x84014224     0xb4    j ffffffff84014228 <sendIPC+0xb8>
    0x84014226     0xb6    bnez a0,ffffffff8401423c <sendIPC+0xcc>
    0x84014228     0xb8    ld ra,72(sp)          ; stack access
    0x8401422a     0xba    ld s0,64(sp)          ; stack access
    0x8401422c     0xbc    ld s1,56(sp)          ; stack access
    0x8401422e     0xbe    ld s2,48(sp)          ; stack access
    0x84014230     0xc0    ld s3,40(sp)          ; stack access
    0x84014232     0xc2    ld s4,32(sp)          ; stack access
    0x84014234     0xc4    ld s5,24(sp)          ; stack access
    0x84014236     0xc6    ld s6,16(sp)          ; stack access
    0x84014238     0xc8    addi sp,sp,80
    0x8401423a     0xca    ret
    0x8401423c     0xcc    ld a5,280(s1)
    0x84014240     0xd0    srli a5,a5,0x27
    0x84014242     0xd2    slli a5,a5,0x27
    0x84014244     0xd4    lui a4,0xe0000
    0x84014248     0xd8    srli a4,a4,0x19
    0x8401424a     0xda    and a4,a4,s0
    0x8401424c     0xdc    or a5,a5,a4
    0x8401424e     0xde    ori a5,a5,4
    0x84014252     0xe2    sd a5,280(s1)
    0x84014256     0xe6    sd a2,296(s1)
    0x8401425a     0xea    ld a5,288(s1)
    0x8401425e     0xee    slli s2,a3,0x3
    0x84014262     0xf2    andi s2,s2,8
    0x84014266     0xf6    andi a5,a5,-13
    0x84014268     0xf8    or a5,a5,s2
    0x8401426c     0xfc    slli s4,s4,0x2
    0x8401426e     0xfe    andi s4,s4,4
    0x84014272    0x102    or a5,a5,s4
    0x84014276    0x106    andi a5,a5,-3
    0x84014278    0x108    slli s3,a1,0x1
    0x8401427c    0x10c    andi s3,s3,2
    0x84014280    0x110    or s3,a5,s3
    0x84014284    0x114    sd s3,288(s1)
    0x84014288    0x118    mv a0,s1
    0x8401428a    0x11a    jal ra,ffffffff840124c2 <scheduleTCB>
    0x8401428e    0x11e    ld a2,8(s0)
    0x84014290    0x120    ld a4,0(s0)
    0x84014292    0x122    lui a5,0xf8000
    0x84014296    0x126    srli a5,a5,0x19
    0x84014298    0x128    and a5,a5,a4
    0x8401429a    0x12a    srli a4,a4,0x26
    0x8401429c    0x12c    andi a4,a4,1
    0x8401429e    0x12e    beqz a4,ffffffff840142a6 <sendIPC+0x136>
    0x840142a0    0x130    li a4,-1
    0x840142a2    0x132    slli a4,a4,0x27
    0x840142a4    0x134    or a5,a5,a4
    0x840142a6    0x136    mv a4,a5
    0x840142a8    0x138    mv a3,s1
    0x840142aa    0x13a    beqz a2,ffffffff840142b2 <sendIPC+0x142>
    0x840142ac    0x13c    mv a3,a2
    0x840142ae    0x13e    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x840142b2    0x142    sd a4,416(s1)
    0x840142b6    0x146    sd zero,408(s1)
    0x840142ba    0x14a    ld a4,0(s0)
    0x840142bc    0x14c    sd a3,8(s0)
    0x840142be    0x14e    lui a5,0xf8000
    0x840142c2    0x152    srli a5,a5,0x19
    0x840142c4    0x154    and s1,s1,a5
    0x840142c6    0x156    srli a5,a4,0x27
    0x840142ca    0x15a    slli a5,a5,0x27
    0x840142cc    0x15c    or s1,s1,a5
    0x840142ce    0x15e    ori s1,s1,1
    0x840142d2    0x162    sd s1,0(s0)
    0x840142d4    0x164    j ffffffff84014228 <sendIPC+0xb8>
    0x840142d6    0x166    andi a1,a1,-4
    0x840142d8    0x168    sd a1,0(s0)
    0x840142da    0x16a    j ffffffff840141ea <sendIPC+0x7a>
    0x840142dc    0x16c    li a1,0
    0x840142de    0x16e    mv a0,s1
    0x840142e0    0x170    jal ra,ffffffff840124f6 <setThreadState>
    0x840142e4    0x174    j ffffffff84014228 <sendIPC+0xb8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
141 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 205 nodes.

Section cteDelete (257 of 271)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 162 instructions.


Stack analysis
---------------

34 stack accesses found. Annotated code for `cteDelete`:

    0x840131f8      0x0    addi sp,sp,-160
    0x840131fa      0x2    sd ra,152(sp)         ; stack access
    0x840131fc      0x4    sd s0,144(sp)         ; stack access
    0x840131fe      0x6    sd s1,136(sp)         ; stack access
    0x84013200      0x8    sd s2,128(sp)         ; stack access
    0x84013202      0xa    sd s3,120(sp)         ; stack access
    0x84013204      0xc    sd s4,112(sp)         ; stack access
    0x84013206      0xe    sd s5,104(sp)         ; stack access
    0x84013208     0x10    sd s6,96(sp)          ; stack access
    0x8401320a     0x12    sd s7,88(sp)          ; stack access
    0x8401320c     0x14    sd s8,80(sp)          ; stack access
    0x8401320e     0x16    sd s9,72(sp)          ; stack access
    0x84013210     0x18    mv s0,a0
    0x84013212     0x1a    mv s4,a1
    0x84013214     0x1c    li s2,18
    0x84013216     0x1e    li s3,64
    0x8401321a     0x22    li s6,4
    0x8401321c     0x24    li s5,-1
    0x8401321e     0x26    li s1,1
    0x84013220     0x28    j ffffffff84013260 <cteDelete+0x68>
    0x84013222     0x2a    mv a2,s6
    0x84013224     0x2c    j ffffffff84013298 <cteDelete+0xa0>
    0x84013226     0x2e    bnez a1,ffffffff840132c6 <cteDelete+0xce>
    0x84013228     0x30    ld a3,0(sp)           ; stack access
    0x8401322a     0x32    sd a3,0(s0)
    0x8401322c     0x34    ld a3,8(sp)           ; stack access
    0x8401322e     0x36    sd a3,8(s0)
    0x84013230     0x38    bnez s4,ffffffff8401332c <cteDelete+0x134>
    0x84013234     0x3c    beq a4,s2,ffffffff840132cc <cteDelete+0xd4>
    0x84013238     0x40    ld a5,0(s0)
    0x8401323a     0x42    ld a4,8(s0)
    0x8401323c     0x44    andi a3,a5,127
    0x84013240     0x48    beq a3,s3,ffffffff840133b2 <cteDelete+0x1ba>
    0x84013244     0x4c    andi a0,a5,63
    0x84013248     0x50    addiw a0,a0,1
    0x8401324a     0x52    sll a0,s1,a0
    0x8401324e     0x56    neg a0,a0
    0x84013252     0x5a    and a0,a0,a4
    0x84013254     0x5c    mv a1,s0
    0x84013256     0x5e    jal ra,ffffffff84011832 <capSwapForDelete>
    0x8401325a     0x62    jal ra,ffffffff84011540 <preemptionPoint>
    0x8401325e     0x66    bnez a0,ffffffff84013308 <cteDelete+0x110>
    0x84013260     0x68    ld a5,0(s0)
    0x84013262     0x6a    srli a5,a5,0x3b
    0x84013264     0x6c    beqz a5,ffffffff840132f8 <cteDelete+0x100>
    0x84013266     0x6e    mv a0,s0
    0x84013268     0x70    jal ra,ffffffff8401207a <isFinalCapability>
    0x8401326c     0x74    mv a3,a0
    0x8401326e     0x76    li a4,0
    0x84013270     0x78    ld a1,0(s0)
    0x84013272     0x7a    ld a2,8(s0)
    0x84013274     0x7c    mv a0,sp
    0x84013276     0x7e    jal ra,ffffffff84013038 <finaliseCap>
    0x8401327a     0x82    ld a7,16(sp)          ; stack access
    0x8401327c     0x84    ld a6,24(sp)          ; stack access
    0x8401327e     0x86    ld a5,0(sp)           ; stack access
    0x84013280     0x88    ld a0,8(sp)           ; stack access
    0x84013282     0x8a    srli a4,a5,0x3b
    0x84013286     0x8e    beqz a4,ffffffff840132c6 <cteDelete+0xce>
    0x84013288     0x90    bne a4,s2,ffffffff840132c2 <cteDelete+0xca>
    0x8401328c     0x94    andi a3,a5,127
    0x84013290     0x98    beq a3,s3,ffffffff84013222 <cteDelete+0x2a>
    0x84013294     0x9c    andi a2,a5,63
    0x84013298     0xa0    addi a2,a2,1
    0x8401329a     0xa2    sll a3,s5,a2
    0x8401329e     0xa6    not a3,a3
    0x840132a2     0xaa    and a3,a3,a0
    0x840132a4     0xac    mv a1,s1
    0x840132a6     0xae    beqz a3,ffffffff84013226 <cteDelete+0x2e>
    0x840132a8     0xb0    li a1,0
    0x840132aa     0xb2    bne a3,s1,ffffffff84013226 <cteDelete+0x2e>
    0x840132ae     0xb6    sll a3,s1,a2
    0x840132b2     0xba    neg a3,a3
    0x840132b6     0xbe    and a3,a3,a0
    0x840132b8     0xc0    sub a3,s0,a3
    0x840132bc     0xc4    seqz a1,a3
    0x840132c0     0xc8    j ffffffff84013226 <cteDelete+0x2e>
    0x840132c2     0xca    jal ra,ffffffff8401045e <halt>
    0x840132c6     0xce    sd a7,48(sp)          ; stack access
    0x840132c8     0xd0    sd a6,56(sp)          ; stack access
    0x840132ca     0xd2    j ffffffff840132fc <cteDelete+0x104>
    0x840132cc     0xd4    andi a4,a5,127
    0x840132d0     0xd8    beq a4,s3,ffffffff840132ec <cteDelete+0xf4>
    0x840132d4     0xdc    andi a5,a5,63
    0x840132d8     0xe0    addiw a5,a5,1
    0x840132da     0xe2    sll a5,s1,a5
    0x840132de     0xe6    neg a5,a5
    0x840132e2     0xea    and a5,a5,a0
    0x840132e4     0xec    bne s0,a5,ffffffff84013238 <cteDelete+0x40>
    0x840132e8     0xf0    mv a0,s4
    0x840132ea     0xf2    j ffffffff84013308 <cteDelete+0x110>
    0x840132ec     0xf4    mv a5,s6
    0x840132ee     0xf6    j ffffffff840132d8 <cteDelete+0xe0>
    0x840132f0     0xf8    mv a5,s6
    0x840132f2     0xfa    j ffffffff84013384 <cteDelete+0x18c>
    0x840132f4     0xfc    jal ra,ffffffff8401045e <halt>
    0x840132f8    0x100    sd zero,48(sp)        ; stack access
    0x840132fa    0x102    sd zero,56(sp)        ; stack access
    0x840132fc    0x104    ld a1,48(sp)          ; stack access
    0x840132fe    0x106    ld a2,56(sp)          ; stack access
    0x84013300    0x108    mv a0,s0
    0x84013302    0x10a    jal ra,ffffffff84011a30 <emptySlot>
    0x84013306    0x10e    li a0,0
    0x84013308    0x110    ld ra,152(sp)         ; stack access
    0x8401330a    0x112    ld s0,144(sp)         ; stack access
    0x8401330c    0x114    ld s1,136(sp)         ; stack access
    0x8401330e    0x116    ld s2,128(sp)         ; stack access
    0x84013310    0x118    ld s3,120(sp)         ; stack access
    0x84013312    0x11a    ld s4,112(sp)         ; stack access
    0x84013314    0x11c    ld s5,104(sp)         ; stack access
    0x84013316    0x11e    ld s6,96(sp)          ; stack access
    0x84013318    0x120    ld s7,88(sp)          ; stack access
    0x8401331a    0x122    ld s8,80(sp)          ; stack access
    0x8401331c    0x124    ld s9,72(sp)          ; stack access
    0x8401331e    0x126    addi sp,sp,160
    0x84013320    0x128    ret
    0x84013322    0x12a    andi s8,s9,-32
    0x84013326    0x12e    andi s9,s9,31
    0x8401332a    0x132    j ffffffff84013358 <cteDelete+0x160>
    0x8401332c    0x134    ld a5,0(s0)
    0x8401332e    0x136    ld s9,8(s0)
    0x84013332    0x13a    andi s7,a5,127
    0x84013336    0x13e    beq s7,s3,ffffffff84013322 <cteDelete+0x12a>
    0x8401333a    0x142    andi a5,a5,63
    0x8401333e    0x146    addi a5,a5,1
    0x84013340    0x148    sll s8,s1,a5
    0x84013344    0x14c    neg s8,s8
    0x84013348    0x150    and s8,s8,s9
    0x8401334c    0x154    sll a5,s5,a5
    0x84013350    0x158    not a5,a5
    0x84013354    0x15c    and s9,a5,s9
    0x84013358    0x160    slli a0,s9,0x5
    0x8401335c    0x164    addi a0,a0,-32
    0x8401335e    0x166    li a1,0
    0x84013360    0x168    add a0,a0,s8
    0x84013362    0x16a    jal ra,ffffffff840131f8 <cteDelete>
    0x84013366    0x16e    bnez a0,ffffffff84013308 <cteDelete+0x110>
    0x84013368    0x170    ld a5,0(s0)
    0x8401336a    0x172    srli a4,a5,0x3b
    0x8401336e    0x176    beqz a4,ffffffff8401325a <cteDelete+0x62>
    0x84013372    0x17a    bne a4,s2,ffffffff840132f4 <cteDelete+0xfc>
    0x84013376    0x17e    ld a3,8(s0)
    0x84013378    0x180    andi a2,a5,127
    0x8401337c    0x184    beq a2,s3,ffffffff840132f0 <cteDelete+0xf8>
    0x84013380    0x188    andi a5,a5,63
    0x84013384    0x18c    addi a5,a5,1
    0x84013386    0x18e    sll a4,s1,a5
    0x8401338a    0x192    neg a4,a4
    0x8401338e    0x196    and a4,a4,a3
    0x84013390    0x198    bne s8,a4,ffffffff8401325a <cteDelete+0x62>
    0x84013394    0x19c    sll a5,s5,a5
    0x84013398    0x1a0    not a5,a5
    0x8401339c    0x1a4    and a3,a3,a5
    0x8401339e    0x1a6    bne a3,s9,ffffffff8401325a <cteDelete+0x62>
    0x840133a2    0x1aa    bne a2,s7,ffffffff8401325a <cteDelete+0x62>
    0x840133a6    0x1ae    addi s9,s9,-1
    0x840133a8    0x1b0    and a5,s9,a5
    0x840133ac    0x1b4    or a4,a4,a5
    0x840133ae    0x1b6    sd a4,8(s0)
    0x840133b0    0x1b8    j ffffffff8401325a <cteDelete+0x62>
    0x840133b2    0x1ba    andi a0,a4,-32
    0x840133b6    0x1be    j ffffffff84013254 <cteDelete+0x5c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
162 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 258 nodes.

Section Arch_decodeIRQControlInvocation (258 of 271)
====================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 83 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `Arch_decodeIRQControlInvocation`:

    0x84012512     0x0    li a5,37
    0x84012516     0x4    bne a0,a5,ffffffff840125e2 <Arch_decodeIRQControlInvocation+0xd0>
    0x8401251a     0x8    addi sp,sp,-80
    0x8401251c     0xa    sd ra,72(sp)          ; stack access
    0x8401251e     0xc    sd s0,64(sp)          ; stack access
    0x84012520     0xe    sd s1,56(sp)          ; stack access
    0x84012522    0x10    sd s2,48(sp)          ; stack access
    0x84012524    0x12    sd s3,40(sp)          ; stack access
    0x84012526    0x14    sd s4,32(sp)          ; stack access
    0x84012528    0x16    mv s1,a2
    0x8401252a    0x18    mv s0,a3
    0x8401252c    0x1a    li a5,3
    0x8401252e    0x1c    bgeu a5,a1,ffffffff84012592 <Arch_decodeIRQControlInvocation+0x80>
    0x84012532    0x20    auipc s2,0x6
    0x84012536    0x24    ld s2,862(s2) # ffffffff84018890 <current_extra_caps>
    0x8401253a    0x28    beqz s2,ffffffff84012592 <Arch_decodeIRQControlInvocation+0x80>
    0x8401253e    0x2c    mv a1,a3
    0x84012540    0x2e    li a0,0
    0x84012542    0x30    jal ra,ffffffff8401012a <getSyscallArg>
    0x84012546    0x34    mv s3,a0
    0x84012548    0x36    mv a1,s0
    0x8401254a    0x38    li a0,2
    0x8401254c    0x3a    jal ra,ffffffff8401012a <getSyscallArg>
    0x84012550    0x3e    mv s4,a0
    0x84012552    0x40    mv a1,s0
    0x84012554    0x42    li a0,3
    0x84012556    0x44    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401255a    0x48    mv s0,a0
    0x8401255c    0x4a    ld a5,0(s2)
    0x84012560    0x4e    sd a5,0(sp)           ; stack access
    0x84012562    0x50    ld a5,8(s2)
    0x84012566    0x54    sd a5,8(sp)           ; stack access
    0x84012568    0x56    mv a0,s3
    0x8401256a    0x58    jal ra,ffffffff84010d2c <Arch_checkIRQ>
    0x8401256e    0x5c    bnez a0,ffffffff8401259e <Arch_decodeIRQControlInvocation+0x8c>
    0x84012570    0x5e    slli a4,s3,0x3
    0x84012574    0x62    auipc a5,0x6
    0x84012578    0x66    addi a5,a5,-1396 # ffffffff84018000 <riscvKSASIDTable>
    0x8401257c    0x6a    add a5,a5,a4
    0x8401257e    0x6c    ld a5,1752(a5)
    0x84012582    0x70    beqz a5,ffffffff840125ae <Arch_decodeIRQControlInvocation+0x9c>
    0x84012584    0x72    li a5,9
    0x84012586    0x74    auipc a4,0x6
    0x8401258a    0x78    sd a5,330(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401258e    0x7c    li a0,3
    0x84012590    0x7e    j ffffffff8401259e <Arch_decodeIRQControlInvocation+0x8c>
    0x84012592    0x80    li a5,7
    0x84012594    0x82    auipc a4,0x6
    0x84012598    0x86    sd a5,316(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401259c    0x8a    li a0,3
    0x8401259e    0x8c    ld ra,72(sp)          ; stack access
    0x840125a0    0x8e    ld s0,64(sp)          ; stack access
    0x840125a2    0x90    ld s1,56(sp)          ; stack access
    0x840125a4    0x92    ld s2,48(sp)          ; stack access
    0x840125a6    0x94    ld s3,40(sp)          ; stack access
    0x840125a8    0x96    ld s4,32(sp)          ; stack access
    0x840125aa    0x98    addi sp,sp,80
    0x840125ac    0x9a    ret
    0x840125ae    0x9c    mv a3,s0
    0x840125b0    0x9e    mv a2,s4
    0x840125b2    0xa0    ld a0,0(sp)           ; stack access
    0x840125b4    0xa2    ld a1,8(sp)           ; stack access
    0x840125b6    0xa4    jal ra,ffffffff840114a6 <lookupTargetSlot>
    0x840125ba    0xa8    sd a1,24(sp)          ; stack access
    0x840125bc    0xaa    bnez a0,ffffffff8401259e <Arch_decodeIRQControlInvocation+0x8c>
    0x840125be    0xac    mv s0,a1
    0x840125c0    0xae    mv a0,a1
    0x840125c2    0xb0    jal ra,ffffffff840118cc <ensureEmptySlot>
    0x840125c6    0xb4    bnez a0,ffffffff8401259e <Arch_decodeIRQControlInvocation+0x8c>
    0x840125c8    0xb6    li a1,2
    0x840125ca    0xb8    auipc a0,0x18
    0x840125ce    0xbc    ld a0,622(a0) # ffffffff8402a838 <ksCurThread>
    0x840125d2    0xc0    jal ra,ffffffff840124f6 <setThreadState>
    0x840125d6    0xc4    mv a2,s1
    0x840125d8    0xc6    mv a1,s0
    0x840125da    0xc8    mv a0,s3
    0x840125dc    0xca    jal ra,ffffffff840119e6 <invokeIRQControl>
    0x840125e0    0xce    j ffffffff8401259e <Arch_decodeIRQControlInvocation+0x8c>
    0x840125e2    0xd0    li a5,3
    0x840125e4    0xd2    auipc a4,0x6
    0x840125e8    0xd6    sd a5,236(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840125ec    0xda    li a0,3
    0x840125ee    0xdc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 132 nodes.

Section handleInvocation (259 of 271)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 105 instructions.


Stack analysis
---------------

23 stack accesses found. Annotated code for `handleInvocation`:

    0x84016a96      0x0    addi sp,sp,-128
    0x84016a98      0x2    sd ra,120(sp)         ; stack access
    0x84016a9a      0x4    sd s0,112(sp)         ; stack access
    0x84016a9c      0x6    sd s1,104(sp)         ; stack access
    0x84016a9e      0x8    sd s2,96(sp)          ; stack access
    0x84016aa0      0xa    sd s3,88(sp)          ; stack access
    0x84016aa2      0xc    sd s4,80(sp)          ; stack access
    0x84016aa4      0xe    sd s5,72(sp)          ; stack access
    0x84016aa6     0x10    sd s6,64(sp)          ; stack access
    0x84016aa8     0x12    sd s7,56(sp)          ; stack access
    0x84016aaa     0x14    mv s5,a0
    0x84016aac     0x16    mv s4,a1
    0x84016aae     0x18    auipc s0,0x14
    0x84016ab2     0x1c    ld s0,-630(s0) # ffffffff8402a838 <ksCurThread>
    0x84016ab6     0x20    ld s1,80(s0)
    0x84016ab8     0x22    andi a4,s1,127
    0x84016abc     0x26    li a5,120
    0x84016ac0     0x2a    bgeu a5,a4,ffffffff84016acc <handleInvocation+0x36>
    0x84016ac4     0x2e    andi s1,s1,-128
    0x84016ac8     0x32    ori s1,s1,120
    0x84016acc     0x36    ld s6,72(s0)
    0x84016ad0     0x3a    mv a2,s6
    0x84016ad2     0x3c    mv a1,s0
    0x84016ad4     0x3e    addi a0,sp,16
    0x84016ad6     0x40    jal ra,ffffffff8401137e <lookupCapAndSlot>
    0x84016ada     0x44    ld s7,16(sp)          ; stack access
    0x84016adc     0x46    bnez s7,ffffffff84016b48 <handleInvocation+0xb2>
    0x84016ae0     0x4a    mv a1,s0
    0x84016ae2     0x4c    li a0,0
    0x84016ae4     0x4e    jal ra,ffffffff840106a2 <lookupIPCBuffer>
    0x84016ae8     0x52    mv s3,a0
    0x84016aea     0x54    mv a2,s1
    0x84016aec     0x56    mv a1,a0
    0x84016aee     0x58    mv a0,s0
    0x84016af0     0x5a    jal ra,ffffffff84013db6 <lookupExtraCaps>
    0x84016af4     0x5e    mv s2,a0
    0x84016af6     0x60    bnez a0,ffffffff84016b6a <handleInvocation+0xd4>
    0x84016af8     0x62    andi a1,s1,127
    0x84016afc     0x66    li a5,4
    0x84016afe     0x68    bltu a5,a1,ffffffff84016b7a <handleInvocation+0xe4>
    0x84016b02     0x6c    sd s3,0(sp)           ; stack access
    0x84016b04     0x6e    mv a7,s5
    0x84016b06     0x70    mv a6,s4
    0x84016b08     0x72    ld a4,24(sp)          ; stack access
    0x84016b0a     0x74    ld a5,32(sp)          ; stack access
    0x84016b0c     0x76    ld a3,40(sp)          ; stack access
    0x84016b0e     0x78    mv a2,s6
    0x84016b10     0x7a    srli a0,s1,0xc
    0x84016b14     0x7e    jal ra,ffffffff840168a2 <decodeInvocation>
    0x84016b18     0x82    li a5,4
    0x84016b1a     0x84    beq a0,a5,ffffffff84016baa <handleInvocation+0x114>
    0x84016b1e     0x88    li a5,3
    0x84016b20     0x8a    beq a0,a5,ffffffff84016b82 <handleInvocation+0xec>
    0x84016b24     0x8e    ld a5,280(s0)
    0x84016b28     0x92    andi a5,a5,15
    0x84016b2a     0x94    li a4,2
    0x84016b2c     0x96    beq a5,a4,ffffffff84016b92 <handleInvocation+0xfc>
    0x84016b30     0x9a    mv a0,s2
    0x84016b32     0x9c    ld ra,120(sp)         ; stack access
    0x84016b34     0x9e    ld s0,112(sp)         ; stack access
    0x84016b36     0xa0    ld s1,104(sp)         ; stack access
    0x84016b38     0xa2    ld s2,96(sp)          ; stack access
    0x84016b3a     0xa4    ld s3,88(sp)          ; stack access
    0x84016b3c     0xa6    ld s4,80(sp)          ; stack access
    0x84016b3e     0xa8    ld s5,72(sp)          ; stack access
    0x84016b40     0xaa    ld s6,64(sp)          ; stack access
    0x84016b42     0xac    ld s7,56(sp)          ; stack access
    0x84016b44     0xae    addi sp,sp,128
    0x84016b46     0xb0    ret
    0x84016b48     0xb2    auipc a5,0x1
    0x84016b4c     0xb6    addi a5,a5,1208 # ffffffff84018000 <riscvKSASIDTable>
    0x84016b50     0xba    li a4,1
    0x84016b52     0xbc    sd a4,1680(a5)
    0x84016b56     0xc0    sd s6,1688(a5)
    0x84016b5a     0xc4    mv s2,s4
    0x84016b5c     0xc6    beqz s4,ffffffff84016b30 <handleInvocation+0x9a>
    0x84016b60     0xca    mv a0,s0
    0x84016b62     0xcc    jal ra,ffffffff840143d0 <handleFault>
    0x84016b66     0xd0    li s2,0
    0x84016b68     0xd2    j ffffffff84016b30 <handleInvocation+0x9a>
    0x84016b6a     0xd4    mv s2,s4
    0x84016b6c     0xd6    beqz s4,ffffffff84016b30 <handleInvocation+0x9a>
    0x84016b70     0xda    mv a0,s0
    0x84016b72     0xdc    jal ra,ffffffff840143d0 <handleFault>
    0x84016b76     0xe0    mv s2,s7
    0x84016b78     0xe2    j ffffffff84016b30 <handleInvocation+0x9a>
    0x84016b7a     0xe4    bnez s3,ffffffff84016b02 <handleInvocation+0x6c>
    0x84016b7e     0xe8    li a1,4
    0x84016b80     0xea    j ffffffff84016b02 <handleInvocation+0x6c>
    0x84016b82     0xec    bnez s5,ffffffff84016b8a <handleInvocation+0xf4>
    0x84016b86     0xf0    mv s2,s5
    0x84016b88     0xf2    j ffffffff84016b30 <handleInvocation+0x9a>
    0x84016b8a     0xf4    mv a0,s0
    0x84016b8c     0xf6    jal ra,ffffffff84015a44 <replyFromKernel_error>
    0x84016b90     0xfa    j ffffffff84016b30 <handleInvocation+0x9a>
    0x84016b92     0xfc    bnez s5,ffffffff84016ba0 <handleInvocation+0x10a>
    0x84016b96    0x100    li a1,1
    0x84016b98    0x102    mv a0,s0
    0x84016b9a    0x104    jal ra,ffffffff840124f6 <setThreadState>
    0x84016b9e    0x108    j ffffffff84016b30 <handleInvocation+0x9a>
    0x84016ba0    0x10a    sd zero,72(s0)
    0x84016ba4    0x10e    sd zero,80(s0)
    0x84016ba8    0x112    j ffffffff84016b96 <handleInvocation+0x100>
    0x84016baa    0x114    mv s2,a0
    0x84016bac    0x116    j ffffffff84016b30 <handleInvocation+0x9a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
105 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 169 nodes.

Section decodeUntypedInvocation (260 of 271)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 272 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x8401658e      0x0    addi sp,sp,-176
    0x84016590      0x2    sd ra,168(sp)         ; stack access
    0x84016592      0x4    sd s0,160(sp)         ; stack access
    0x84016594      0x6    sd s1,152(sp)         ; stack access
    0x84016596      0x8    sd s2,144(sp)         ; stack access
    0x84016598      0xa    sd s3,136(sp)         ; stack access
    0x8401659a      0xc    sd s4,128(sp)         ; stack access
    0x8401659c      0xe    sd s5,120(sp)         ; stack access
    0x8401659e     0x10    sd s6,112(sp)         ; stack access
    0x840165a0     0x12    sd s7,104(sp)         ; stack access
    0x840165a2     0x14    sd s8,96(sp)          ; stack access
    0x840165a4     0x16    sd s9,88(sp)          ; stack access
    0x840165a6     0x18    sd s10,80(sp)         ; stack access
    0x840165a8     0x1a    sd s11,72(sp)         ; stack access
    0x840165aa     0x1c    sd a3,16(sp)          ; stack access
    0x840165ac     0x1e    sd a4,24(sp)          ; stack access
    0x840165ae     0x20    li a5,1
    0x840165b0     0x22    bne a0,a5,ffffffff84016734 <decodeUntypedInvocation+0x1a6>
    0x840165b4     0x26    mv s1,a0
    0x840165b6     0x28    mv s2,a2
    0x840165b8     0x2a    mv s0,a6
    0x840165ba     0x2c    li a5,5
    0x840165bc     0x2e    bgeu a5,a1,ffffffff8401675e <decodeUntypedInvocation+0x1d0>
    0x840165c0     0x32    auipc s9,0x2
    0x840165c4     0x36    ld s9,720(s9) # ffffffff84018890 <current_extra_caps>
    0x840165c8     0x3a    beqz s9,ffffffff8401675e <decodeUntypedInvocation+0x1d0>
    0x840165cc     0x3e    mv a1,a6
    0x840165ce     0x40    li a0,0
    0x840165d0     0x42    jal ra,ffffffff8401012a <getSyscallArg>
    0x840165d4     0x46    mv s3,a0
    0x840165d6     0x48    li a5,8
    0x840165d8     0x4a    bltu a5,a0,ffffffff8401676c <decodeUntypedInvocation+0x1de>
    0x840165dc     0x4e    mv a1,s0
    0x840165de     0x50    li a0,1
    0x840165e0     0x52    jal ra,ffffffff8401012a <getSyscallArg>
    0x840165e4     0x56    mv s4,a0
    0x840165e6     0x58    mv a1,a0
    0x840165e8     0x5a    mv a0,s3
    0x840165ea     0x5c    jal ra,ffffffff84011b22 <getObjectSize>
    0x840165ee     0x60    mv s5,a0
    0x840165f0     0x62    li a5,63
    0x840165f4     0x66    bltu a5,s4,ffffffff84016782 <decodeUntypedInvocation+0x1f4>
    0x840165f8     0x6a    li a5,38
    0x840165fc     0x6e    bltu a5,a0,ffffffff84016782 <decodeUntypedInvocation+0x1f4>
    0x84016600     0x72    li a5,4
    0x84016602     0x74    beq s3,a5,ffffffff840167a0 <decodeUntypedInvocation+0x212>
    0x84016606     0x78    bnez s3,ffffffff84016610 <decodeUntypedInvocation+0x82>
    0x8401660a     0x7c    li a5,3
    0x8401660c     0x7e    bgeu a5,s4,ffffffff840167ba <decodeUntypedInvocation+0x22c>
    0x84016610     0x82    ld s10,24(sp)         ; stack access
    0x84016612     0x84    mv a1,s0
    0x84016614     0x86    li a0,3
    0x84016616     0x88    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401661a     0x8c    mv s6,a0
    0x8401661c     0x8e    mv a1,s0
    0x8401661e     0x90    li a0,4
    0x84016620     0x92    jal ra,ffffffff8401012a <getSyscallArg>
    0x84016624     0x96    mv s7,a0
    0x84016626     0x98    mv a1,s0
    0x84016628     0x9a    li a0,5
    0x8401662a     0x9c    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401662e     0xa0    mv s8,a0
    0x84016630     0xa2    bnez s6,ffffffff840167d0 <decodeUntypedInvocation+0x242>
    0x84016634     0xa6    ld a5,0(s9)
    0x84016638     0xaa    srli a4,a5,0x3b
    0x8401663c     0xae    li a3,10
    0x8401663e     0xb0    bne a4,a3,ffffffff840167f6 <decodeUntypedInvocation+0x268>
    0x84016642     0xb4    srli a4,a5,0x2f
    0x84016646     0xb8    li a3,1
    0x84016648     0xba    sll a4,a3,a4
    0x8401664c     0xbe    addi a3,a4,-1
    0x84016650     0xc2    bltu a3,s7,ffffffff84016820 <decodeUntypedInvocation+0x292>
    0x84016654     0xc6    addi a3,s8,-1
    0x84016658     0xca    li a2,255
    0x8401665c     0xce    bltu a2,a3,ffffffff8401683a <decodeUntypedInvocation+0x2ac>
    0x84016660     0xd2    sub a4,a4,s7
    0x84016664     0xd6    bltu a4,s8,ffffffff8401685a <decodeUntypedInvocation+0x2cc>
    0x84016668     0xda    slli a5,a5,0x1
    0x8401666a     0xdc    lui s0,0xfc000
    0x8401666e     0xe0    srli s0,s0,0x19
    0x84016670     0xe2    and a4,a5,s0
    0x84016674     0xe6    srli a5,a5,0x26
    0x84016676     0xe8    andi a5,a5,1
    0x84016678     0xea    beqz a5,ffffffff84016680 <decodeUntypedInvocation+0xf2>
    0x8401667a     0xec    li a5,-1
    0x8401667c     0xee    slli a5,a5,0x27
    0x8401667e     0xf0    or a4,a4,a5
    0x84016680     0xf2    mv s11,a4
    0x84016682     0xf4    add s9,s7,s8
    0x84016686     0xf8    bgeu s7,s9,ffffffff840166a4 <decodeUntypedInvocation+0x116>
    0x8401668a     0xfc    slli s0,s7,0x5
    0x8401668e    0x100    add s0,s0,a4
    0x84016690    0x102    mv s6,s7
    0x84016692    0x104    mv a0,s0
    0x84016694    0x106    jal ra,ffffffff840118cc <ensureEmptySlot>
    0x84016698    0x10a    bnez a0,ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x8401669a    0x10c    addi s6,s6,1
    0x8401669c    0x10e    addi s0,s0,32 # fffffffffc000020 <ki_end+0x77fd1020>
    0x840166a0    0x112    bne s6,s9,ffffffff84016692 <decodeUntypedInvocation+0x104>
    0x840166a4    0x116    mv a0,s2
    0x840166a6    0x118    jal ra,ffffffff84011f6a <ensureNoChildren>
    0x840166aa    0x11c    beqz a0,ffffffff840166b2 <decodeUntypedInvocation+0x124>
    0x840166ac    0x11e    srli a0,s10,0x19
    0x840166b0    0x122    li s1,0
    0x840166b2    0x124    ld a5,16(sp)          ; stack access
    0x840166b4    0x126    slli s0,a5,0x19
    0x840166b8    0x12a    srli a4,s0,0x19
    0x840166bc    0x12e    srli a5,a5,0x26
    0x840166be    0x130    andi a5,a5,1
    0x840166c0    0x132    beqz a5,ffffffff840166c8 <decodeUntypedInvocation+0x13a>
    0x840166c2    0x134    li a5,-1
    0x840166c4    0x136    slli a5,a5,0x27
    0x840166c6    0x138    or a4,a4,a5
    0x840166c8    0x13a    slli a0,a0,0x4
    0x840166ca    0x13c    li a5,1
    0x840166cc    0x13e    sll a5,a5,s10
    0x840166d0    0x142    sub a5,a5,a0
    0x840166d2    0x144    sext.w a3,s5
    0x840166d6    0x148    srl s5,a5,s5
    0x840166da    0x14c    bltu s5,s8,ffffffff84016876 <decodeUntypedInvocation+0x2e8>
    0x840166de    0x150    srli s10,s10,0x6
    0x840166e2    0x154    andi s10,s10,1
    0x840166e6    0x158    beqz s10,ffffffff840166f8 <decodeUntypedInvocation+0x16a>
    0x840166ea    0x15c    addi a5,s3,-5
    0x840166ee    0x160    li a2,2
    0x840166f0    0x162    bgeu a2,a5,ffffffff840166f8 <decodeUntypedInvocation+0x16a>
    0x840166f4    0x166    bnez s3,ffffffff8401688c <decodeUntypedInvocation+0x2fe>
    0x840166f8    0x16a    li a5,1
    0x840166fa    0x16c    sll a5,a5,a3
    0x840166fe    0x170    addi s0,a5,-1
    0x84016702    0x174    add a0,a0,s0
    0x84016704    0x176    add s0,a0,a4
    0x84016708    0x17a    neg a5,a5
    0x8401670c    0x17e    and s0,s0,a5
    0x8401670e    0x180    li a1,2
    0x84016710    0x182    auipc a0,0x14
    0x84016714    0x186    ld a0,296(a0) # ffffffff8402a838 <ksCurThread>
    0x84016718    0x18a    jal ra,ffffffff840124f6 <setThreadState>
    0x8401671c    0x18e    sd s10,0(sp)          ; stack access
    0x8401671e    0x190    mv a7,s8
    0x84016720    0x192    mv a6,s7
    0x84016722    0x194    mv a5,s11
    0x84016724    0x196    mv a4,s4
    0x84016726    0x198    mv a3,s3
    0x84016728    0x19a    mv a2,s0
    0x8401672a    0x19c    mv a1,s1
    0x8401672c    0x19e    mv a0,s2
    0x8401672e    0x1a0    jal ra,ffffffff8401647a <invokeUntyped_Retype>
    0x84016732    0x1a4    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x84016734    0x1a6    li a5,3
    0x84016736    0x1a8    auipc a4,0x2
    0x8401673a    0x1ac    sd a5,-102(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401673e    0x1b0    li a0,3
    0x84016740    0x1b2    ld ra,168(sp)         ; stack access
    0x84016742    0x1b4    ld s0,160(sp)         ; stack access
    0x84016744    0x1b6    ld s1,152(sp)         ; stack access
    0x84016746    0x1b8    ld s2,144(sp)         ; stack access
    0x84016748    0x1ba    ld s3,136(sp)         ; stack access
    0x8401674a    0x1bc    ld s4,128(sp)         ; stack access
    0x8401674c    0x1be    ld s5,120(sp)         ; stack access
    0x8401674e    0x1c0    ld s6,112(sp)         ; stack access
    0x84016750    0x1c2    ld s7,104(sp)         ; stack access
    0x84016752    0x1c4    ld s8,96(sp)          ; stack access
    0x84016754    0x1c6    ld s9,88(sp)          ; stack access
    0x84016756    0x1c8    ld s10,80(sp)         ; stack access
    0x84016758    0x1ca    ld s11,72(sp)         ; stack access
    0x8401675a    0x1cc    addi sp,sp,176
    0x8401675c    0x1ce    ret
    0x8401675e    0x1d0    li a5,7
    0x84016760    0x1d2    auipc a4,0x2
    0x84016764    0x1d6    sd a5,-144(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016768    0x1da    li a0,3
    0x8401676a    0x1dc    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x8401676c    0x1de    auipc a5,0x2
    0x84016770    0x1e2    addi a5,a5,-1900 # ffffffff84018000 <riscvKSASIDTable>
    0x84016774    0x1e6    li a4,1
    0x84016776    0x1e8    sd a4,1744(a5)
    0x8401677a    0x1ec    sd zero,1696(a5)
    0x8401677e    0x1f0    li a0,3
    0x84016780    0x1f2    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x84016782    0x1f4    auipc a5,0x2
    0x84016786    0x1f8    addi a5,a5,-1922 # ffffffff84018000 <riscvKSASIDTable>
    0x8401678a    0x1fc    li a4,4
    0x8401678c    0x1fe    sd a4,1744(a5)
    0x84016790    0x202    sd zero,1712(a5)
    0x84016794    0x206    li a4,38
    0x84016798    0x20a    sd a4,1720(a5)
    0x8401679c    0x20e    li a0,3
    0x8401679e    0x210    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x840167a0    0x212    bnez s4,ffffffff84016610 <decodeUntypedInvocation+0x82>
    0x840167a4    0x216    auipc a5,0x2
    0x840167a8    0x21a    addi a5,a5,-1956 # ffffffff84018000 <riscvKSASIDTable>
    0x840167ac    0x21e    li a4,1
    0x840167ae    0x220    sd a4,1744(a5)
    0x840167b2    0x224    sd a4,1696(a5)
    0x840167b6    0x228    li a0,3
    0x840167b8    0x22a    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x840167ba    0x22c    auipc a5,0x2
    0x840167be    0x230    addi a5,a5,-1978 # ffffffff84018000 <riscvKSASIDTable>
    0x840167c2    0x234    li a4,1
    0x840167c4    0x236    sd a4,1744(a5)
    0x840167c8    0x23a    sd a4,1696(a5)
    0x840167cc    0x23e    li a0,3
    0x840167ce    0x240    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x840167d0    0x242    mv a1,s0
    0x840167d2    0x244    li a0,2
    0x840167d4    0x246    jal ra,ffffffff8401012a <getSyscallArg>
    0x840167d8    0x24a    mv a2,a0
    0x840167da    0x24c    ld a0,0(s9)
    0x840167de    0x250    sd a0,32(sp)          ; stack access
    0x840167e0    0x252    ld a1,8(s9)
    0x840167e4    0x256    sd a1,40(sp)          ; stack access
    0x840167e6    0x258    mv a3,s6
    0x840167e8    0x25a    jal ra,ffffffff840114a6 <lookupTargetSlot>
    0x840167ec    0x25e    sd a0,48(sp)          ; stack access
    0x840167ee    0x260    sd a1,56(sp)          ; stack access
    0x840167f0    0x262    bnez a0,ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x840167f2    0x264    ld a5,0(a1)
    0x840167f4    0x266    j ffffffff84016638 <decodeUntypedInvocation+0xaa>
    0x840167f6    0x268    auipc a4,0x2
    0x840167fa    0x26c    addi a4,a4,-2038 # ffffffff84018000 <riscvKSASIDTable>
    0x840167fe    0x270    li a5,6
    0x84016800    0x272    sd a5,1744(a4)
    0x84016804    0x276    sd zero,1736(a4)
    0x84016808    0x27a    slli a5,s6,0x2
    0x8401680c    0x27e    andi a5,a5,508
    0x84016810    0x282    ori a5,a5,1
    0x84016814    0x286    sd a5,1024(a4)
    0x84016818    0x28a    sd zero,1032(a4)
    0x8401681c    0x28e    li a0,3
    0x8401681e    0x290    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x84016820    0x292    auipc a5,0x1
    0x84016824    0x296    addi a5,a5,2016 # ffffffff84018000 <riscvKSASIDTable>
    0x84016828    0x29a    li a4,4
    0x8401682a    0x29c    sd a4,1744(a5)
    0x8401682e    0x2a0    sd zero,1712(a5)
    0x84016832    0x2a4    sd a3,1720(a5)
    0x84016836    0x2a8    li a0,3
    0x84016838    0x2aa    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x8401683a    0x2ac    auipc a5,0x1
    0x8401683e    0x2b0    addi a5,a5,1990 # ffffffff84018000 <riscvKSASIDTable>
    0x84016842    0x2b4    li a4,4
    0x84016844    0x2b6    sd a4,1744(a5)
    0x84016848    0x2ba    li a4,1
    0x8401684a    0x2bc    sd a4,1712(a5)
    0x8401684e    0x2c0    li a4,256
    0x84016852    0x2c4    sd a4,1720(a5)
    0x84016856    0x2c8    li a0,3
    0x84016858    0x2ca    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x8401685a    0x2cc    auipc a5,0x1
    0x8401685e    0x2d0    addi a5,a5,1958 # ffffffff84018000 <riscvKSASIDTable>
    0x84016862    0x2d4    li a3,4
    0x84016864    0x2d6    sd a3,1744(a5)
    0x84016868    0x2da    li a3,1
    0x8401686a    0x2dc    sd a3,1712(a5)
    0x8401686e    0x2e0    sd a4,1720(a5)
    0x84016872    0x2e4    li a0,3
    0x84016874    0x2e6    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x84016876    0x2e8    auipc a4,0x1
    0x8401687a    0x2ec    addi a4,a4,1930 # ffffffff84018000 <riscvKSASIDTable>
    0x8401687e    0x2f0    li a3,10
    0x84016880    0x2f2    sd a3,1744(a4)
    0x84016884    0x2f6    sd a5,1728(a4)
    0x84016888    0x2fa    li a0,3
    0x8401688a    0x2fc    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>
    0x8401688c    0x2fe    auipc a5,0x1
    0x84016890    0x302    addi a5,a5,1908 # ffffffff84018000 <riscvKSASIDTable>
    0x84016894    0x306    li a4,1
    0x84016896    0x308    sd a4,1744(a5)
    0x8401689a    0x30c    sd a4,1696(a5)
    0x8401689e    0x310    li a0,3
    0x840168a0    0x312    j ffffffff84016740 <decodeUntypedInvocation+0x1b2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
272 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 406 nodes.

Section decodeSetSpace (261 of 271)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 160 instructions.

RVC_FTTFFFFTFFFT__FT.

Stack analysis
---------------

58 stack accesses found. Annotated code for `decodeSetSpace`:

    0x84014f7c      0x0    addi sp,sp,-256
    0x84014f7e      0x2    sd ra,248(sp)         ; stack access
    0x84014f80      0x4    sd s0,240(sp)         ; stack access
    0x84014f82      0x6    sd s1,232(sp)         ; stack access
    0x84014f84      0x8    sd s2,224(sp)         ; stack access
    0x84014f86      0xa    sd s3,216(sp)         ; stack access
    0x84014f88      0xc    sd s4,208(sp)         ; stack access
    0x84014f8a      0xe    sd s5,200(sp)         ; stack access
    0x84014f8c     0x10    sd s6,192(sp)         ; stack access
    0x84014f8e     0x12    sd s7,184(sp)         ; stack access
    0x84014f90     0x14    sd s8,176(sp)         ; stack access
    0x84014f92     0x16    sd s9,168(sp)         ; stack access
    0x84014f94     0x18    sd a0,64(sp)          ; stack access
    0x84014f96     0x1a    sd a1,72(sp)          ; stack access
    0x84014f98     0x1c    li a5,2
    0x84014f9a     0x1e    bgeu a5,a2,ffffffff840150ba <decodeSetSpace+0x13e>
    0x84014f9e     0x22    mv s2,a3
    0x84014fa0     0x24    mv s0,a4
    0x84014fa2     0x26    auipc s1,0x4
    0x84014fa6     0x2a    ld s1,-1810(s1) # ffffffff84018890 <current_extra_caps>
    0x84014faa     0x2e    beqz s1,ffffffff840150ba <decodeSetSpace+0x13e>
    0x84014fae     0x32    auipc s3,0x4
    0x84014fb2     0x36    ld s3,-1814(s3) # ffffffff84018898 <current_extra_caps+0x8>
    0x84014fb6     0x3a    beqz s3,ffffffff840150ba <decodeSetSpace+0x13e>
    0x84014fba     0x3e    mv a1,a4
    0x84014fbc     0x40    li a0,0
    0x84014fbe     0x42    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014fc2     0x46    mv s6,a0
    0x84014fc4     0x48    mv a1,s0
    0x84014fc6     0x4a    li a0,1
    0x84014fc8     0x4c    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014fcc     0x50    mv s4,a0
    0x84014fce     0x52    mv a1,s0
    0x84014fd0     0x54    li a0,2
    0x84014fd2     0x56    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014fd6     0x5a    mv s5,a0
    0x84014fd8     0x5c    ld s7,0(s1)
    0x84014fdc     0x60    sd s7,128(sp)         ; stack access
    0x84014fde     0x62    ld a5,8(s1)
    0x84014fe0     0x64    sd a5,136(sp)         ; stack access
    0x84014fe2     0x66    mv s8,s7
    0x84014fe4     0x68    ld a5,0(s3)
    0x84014fe8     0x6c    sd a5,112(sp)         ; stack access
    0x84014fea     0x6e    ld a5,8(s3)
    0x84014fee     0x72    sd a5,120(sp)         ; stack access
    0x84014ff0     0x74    ld a5,64(sp)          ; stack access
    0x84014ff2     0x76    slli s0,a5,0x19
    0x84014ff6     0x7a    srli s0,s0,0x19
    0x84014ff8     0x7c    srli a5,a5,0x26
    0x84014ffa     0x7e    andi a5,a5,1
    0x84014ffc     0x80    beqz a5,ffffffff84015004 <decodeSetSpace+0x88>
    0x84014ffe     0x82    li a5,-1
    0x84015000     0x84    slli a5,a5,0x27
    0x84015002     0x86    or s0,s0,a5
    0x84015004     0x88    andi s9,s0,-1024
    0x84015008     0x8c    mv a0,s9
    0x8401500a     0x8e    jal ra,ffffffff840120d0 <slotCapLongRunningDelete>
    0x8401500e     0x92    bnez a0,ffffffff840150e0 <decodeSetSpace+0x164>
    0x84015010     0x94    addi a0,s9,32
    0x84015014     0x98    jal ra,ffffffff840120d0 <slotCapLongRunningDelete>
    0x84015018     0x9c    bnez a0,ffffffff840150e0 <decodeSetSpace+0x164>
    0x8401501a     0x9e    beqz s4,ffffffff8401502e <decodeSetSpace+0xb2>
    0x8401501e     0xa2    mv a2,s7
    0x84015020     0xa4    ld a3,136(sp)         ; stack access
    0x84015022     0xa6    mv a1,s4
    0x84015024     0xa8    li a0,0
    0x84015026     0xaa    jal ra,ffffffff8401210a <updateCapData>
    0x8401502a     0xae    sd a1,136(sp)         ; stack access
    0x8401502c     0xb0    mv s8,a0
    0x8401502e     0xb2    mv a2,s8
    0x84015030     0xb4    ld a3,136(sp)         ; stack access
    0x84015032     0xb6    mv a1,s1
    0x84015034     0xb8    addi a0,sp,88
    0x84015036     0xba    jal ra,ffffffff84011fa8 <deriveCap>
    0x8401503a     0xbe    ld a0,88(sp)          ; stack access
    0x8401503c     0xc0    bnez a0,ffffffff840150c6 <decodeSetSpace+0x14a>
    0x8401503e     0xc2    ld s4,96(sp)          ; stack access
    0x84015040     0xc4    ld a5,104(sp)         ; stack access
    0x84015042     0xc6    sd a5,136(sp)         ; stack access
    0x84015044     0xc8    srli a4,s4,0x3b
    0x84015048     0xcc    li a5,10
    0x8401504a     0xce    bne a4,a5,ffffffff840150ee <decodeSetSpace+0x172>
    0x8401504e     0xd2    beqz s5,ffffffff84015062 <decodeSetSpace+0xe6>
    0x84015052     0xd6    ld a2,112(sp)         ; stack access
    0x84015054     0xd8    ld a3,120(sp)         ; stack access
    0x84015056     0xda    mv a1,s5
    0x84015058     0xdc    li a0,0
    0x8401505a     0xde    jal ra,ffffffff8401210a <updateCapData>
    0x8401505e     0xe2    sd a0,112(sp)         ; stack access
    0x84015060     0xe4    sd a1,120(sp)         ; stack access
    0x84015062     0xe6    ld a2,112(sp)         ; stack access
    0x84015064     0xe8    ld a3,120(sp)         ; stack access
    0x84015066     0xea    mv a1,s3
    0x84015068     0xec    addi a0,sp,88
    0x8401506a     0xee    jal ra,ffffffff84011fa8 <deriveCap>
    0x8401506e     0xf2    ld a0,88(sp)          ; stack access
    0x84015070     0xf4    bnez a0,ffffffff840150c6 <decodeSetSpace+0x14a>
    0x84015072     0xf6    ld a0,96(sp)          ; stack access
    0x84015074     0xf8    sd a0,112(sp)         ; stack access
    0x84015076     0xfa    ld a1,104(sp)         ; stack access
    0x84015078     0xfc    sd a1,120(sp)         ; stack access
    0x8401507a     0xfe    jal ra,ffffffff84010c06 <isValidVTableRoot>
    0x8401507e    0x102    beqz a0,ffffffff840150fc <decodeSetSpace+0x180>
    0x84015080    0x104    li a1,2
    0x84015082    0x106    auipc a0,0x15
    0x84015086    0x10a    ld a0,1974(a0) # ffffffff8402a838 <ksCurThread>
    0x8401508a    0x10e    jal ra,ffffffff840124f6 <setThreadState>
    0x8401508e    0x112    li a5,4
    0x84015090    0x114    sd a5,56(sp)          ; stack access
    0x84015092    0x116    sd zero,48(sp)        ; stack access
    0x84015094    0x118    sd zero,32(sp)        ; stack access
    0x84015096    0x11a    sd zero,40(sp)        ; stack access
    0x84015098    0x11c    sd zero,24(sp)        ; stack access
    0x8401509a    0x11e    sd s3,16(sp)          ; stack access
    0x8401509c    0x120    ld a5,112(sp)         ; stack access
    0x8401509e    0x122    sd a5,0(sp)           ; stack access
    0x840150a0    0x124    ld a5,120(sp)         ; stack access
    0x840150a2    0x126    sd a5,8(sp)           ; stack access
    0x840150a4    0x128    mv a7,s1
    0x840150a6    0x12a    mv a5,s4
    0x840150a8    0x12c    ld a6,136(sp)         ; stack access
    0x840150aa    0x12e    li a4,0
    0x840150ac    0x130    li a3,0
    0x840150ae    0x132    mv a2,s6
    0x840150b0    0x134    mv a1,s2
    0x840150b2    0x136    mv a0,s0
    0x840150b4    0x138    jal ra,ffffffff840148c6 <invokeTCB_ThreadControl>
    0x840150b8    0x13c    j ffffffff840150c6 <decodeSetSpace+0x14a>
    0x840150ba    0x13e    li a5,7
    0x840150bc    0x140    auipc a4,0x3
    0x840150c0    0x144    sd a5,1556(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840150c4    0x148    li a0,3
    0x840150c6    0x14a    ld ra,248(sp)         ; stack access
    0x840150c8    0x14c    ld s0,240(sp)         ; stack access
    0x840150ca    0x14e    ld s1,232(sp)         ; stack access
    0x840150cc    0x150    ld s2,224(sp)         ; stack access
    0x840150ce    0x152    ld s3,216(sp)         ; stack access
    0x840150d0    0x154    ld s4,208(sp)         ; stack access
    0x840150d2    0x156    ld s5,200(sp)         ; stack access
    0x840150d4    0x158    ld s6,192(sp)         ; stack access
    0x840150d6    0x15a    ld s7,184(sp)         ; stack access
    0x840150d8    0x15c    ld s8,176(sp)         ; stack access
    0x840150da    0x15e    ld s9,168(sp)         ; stack access
    0x840150dc    0x160    addi sp,sp,256
    0x840150de    0x162    ret
    0x840150e0    0x164    li a5,3
    0x840150e2    0x166    auipc a4,0x3
    0x840150e6    0x16a    sd a5,1518(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840150ea    0x16e    li a0,3
    0x840150ec    0x170    j ffffffff840150c6 <decodeSetSpace+0x14a>
    0x840150ee    0x172    li a5,3
    0x840150f0    0x174    auipc a4,0x3
    0x840150f4    0x178    sd a5,1504(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840150f8    0x17c    li a0,3
    0x840150fa    0x17e    j ffffffff840150c6 <decodeSetSpace+0x14a>
    0x840150fc    0x180    li a5,3
    0x840150fe    0x182    auipc a4,0x3
    0x84015102    0x186    sd a5,1490(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015106    0x18a    li a0,3
    0x84015108    0x18c    j ffffffff840150c6 <decodeSetSpace+0x14a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
160 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 266 nodes.

Section receiveIPC (262 of 271)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 156 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `receiveIPC`:

    0x840144e8      0x0    addi sp,sp,-96
    0x840144ea      0x2    sd ra,88(sp)          ; stack access
    0x840144ec      0x4    sd s0,80(sp)          ; stack access
    0x840144ee      0x6    sd s1,72(sp)          ; stack access
    0x840144f0      0x8    sd s2,64(sp)          ; stack access
    0x840144f2      0xa    sd s3,56(sp)          ; stack access
    0x840144f4      0xc    sd s4,48(sp)          ; stack access
    0x840144f6      0xe    sd s5,40(sp)          ; stack access
    0x840144f8     0x10    mv s1,a0
    0x840144fa     0x12    sd a1,0(sp)           ; stack access
    0x840144fc     0x14    sd a2,8(sp)           ; stack access
    0x840144fe     0x16    mv s0,a1
    0x84014500     0x18    slli a5,a1,0x19
    0x84014504     0x1c    srli a5,a5,0x19
    0x84014506     0x1e    srli a4,a1,0x26
    0x8401450a     0x22    andi a4,a4,1
    0x8401450c     0x24    beqz a4,ffffffff84014514 <receiveIPC+0x2c>
    0x8401450e     0x26    li a4,-1
    0x84014510     0x28    slli a4,a4,0x27
    0x84014512     0x2a    or a5,a5,a4
    0x84014514     0x2c    mv s2,a5
    0x84014516     0x2e    ld a0,304(s1)
    0x8401451a     0x32    beqz a0,ffffffff84014526 <receiveIPC+0x3e>
    0x8401451c     0x34    ld a4,0(a0)
    0x8401451e     0x36    andi a4,a4,3
    0x84014520     0x38    li a2,2
    0x84014522     0x3a    beq a4,a2,ffffffff8401454a <receiveIPC+0x62>
    0x84014526     0x3e    ld a4,0(s2)
    0x8401452a     0x42    andi a1,a4,3
    0x8401452e     0x46    li a2,1
    0x84014530     0x48    beq a1,a2,ffffffff840145da <receiveIPC+0xf2>
    0x84014534     0x4c    andi a4,a4,1
    0x84014536     0x4e    beqz a4,ffffffff84014552 <receiveIPC+0x6a>
    0x84014538     0x50    ld ra,88(sp)          ; stack access
    0x8401453a     0x52    ld s0,80(sp)          ; stack access
    0x8401453c     0x54    ld s1,72(sp)          ; stack access
    0x8401453e     0x56    ld s2,64(sp)          ; stack access
    0x84014540     0x58    ld s3,56(sp)          ; stack access
    0x84014542     0x5a    ld s4,48(sp)          ; stack access
    0x84014544     0x5c    ld s5,40(sp)          ; stack access
    0x84014546     0x5e    addi sp,sp,96
    0x84014548     0x60    ret
    0x8401454a     0x62    mv a1,s1
    0x8401454c     0x64    jal ra,ffffffff84011ab0 <completeSignal>
    0x84014550     0x68    j ffffffff84014538 <receiveIPC+0x50>
    0x84014552     0x6a    beqz a3,ffffffff840145d4 <receiveIPC+0xec>
    0x84014554     0x6c    ld a4,280(s1)
    0x84014558     0x70    srli a4,a4,0x27
    0x8401455a     0x72    slli a4,a4,0x27
    0x8401455c     0x74    lui a3,0xe0000
    0x84014560     0x78    srli a3,a3,0x19
    0x84014562     0x7a    and a5,a5,a3
    0x84014564     0x7c    or a5,a5,a4
    0x84014566     0x7e    ori a5,a5,3
    0x8401456a     0x82    sd a5,280(s1)
    0x8401456e     0x86    srli s0,s0,0x36
    0x84014570     0x88    andi s0,s0,8
    0x84014572     0x8a    ld a5,288(s1)
    0x84014576     0x8e    andi a5,a5,-9
    0x84014578     0x90    or s0,s0,a5
    0x8401457a     0x92    sd s0,288(s1)
    0x8401457e     0x96    mv a0,s1
    0x84014580     0x98    jal ra,ffffffff840124c2 <scheduleTCB>
    0x84014584     0x9c    ld a3,8(s2)
    0x84014588     0xa0    ld a4,0(s2)
    0x8401458c     0xa4    lui a5,0xf8000
    0x84014590     0xa8    srli a5,a5,0x19
    0x84014592     0xaa    and a5,a5,a4
    0x84014594     0xac    srli a4,a4,0x26
    0x84014596     0xae    andi a4,a4,1
    0x84014598     0xb0    beqz a4,ffffffff840145a0 <receiveIPC+0xb8>
    0x8401459a     0xb2    li a4,-1
    0x8401459c     0xb4    slli a4,a4,0x27
    0x8401459e     0xb6    or a5,a5,a4
    0x840145a0     0xb8    mv a2,a5
    0x840145a2     0xba    mv a4,s1
    0x840145a4     0xbc    beqz a3,ffffffff840145ac <receiveIPC+0xc4>
    0x840145a6     0xbe    mv a4,a3
    0x840145a8     0xc0    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x840145ac     0xc4    sd a2,416(s1)
    0x840145b0     0xc8    sd zero,408(s1)
    0x840145b4     0xcc    ld a5,0(s2)
    0x840145b8     0xd0    sd a4,8(s2)
    0x840145bc     0xd4    lui a0,0xf8000
    0x840145c0     0xd8    srli a0,a0,0x19
    0x840145c2     0xda    and s1,s1,a0
    0x840145c4     0xdc    srli a5,a5,0x27
    0x840145c6     0xde    slli a5,a5,0x27
    0x840145c8     0xe0    or s1,s1,a5
    0x840145ca     0xe2    ori s1,s1,2
    0x840145ce     0xe6    sd s1,0(s2)
    0x840145d2     0xea    j ffffffff84014538 <receiveIPC+0x50>
    0x840145d4     0xec    sd zero,72(s1)
    0x840145d8     0xf0    j ffffffff84014538 <receiveIPC+0x50>
    0x840145da     0xf2    ld s3,8(s2)
    0x840145de     0xf6    lui a2,0xf8000
    0x840145e2     0xfa    srli a2,a2,0x19
    0x840145e4     0xfc    and a2,a2,a4
    0x840145e6     0xfe    srli a4,a4,0x26
    0x840145e8    0x100    andi a4,a4,1
    0x840145ea    0x102    beqz a4,ffffffff840145f2 <receiveIPC+0x10a>
    0x840145ec    0x104    li a5,-1
    0x840145ee    0x106    slli a5,a5,0x27
    0x840145f0    0x108    or a2,a2,a5
    0x840145f2    0x10a    mv a1,s3
    0x840145f4    0x10c    mv a0,s3
    0x840145f6    0x10e    jal ra,ffffffff84012d7e <tcbEPDequeue>
    0x840145fa    0x112    sd a0,16(sp)          ; stack access
    0x840145fc    0x114    sd a1,24(sp)          ; stack access
    0x840145fe    0x116    sd a0,8(s2)
    0x84014602    0x11a    ld a5,0(s2)
    0x84014606    0x11e    li a4,-1
    0x84014608    0x120    slli a4,a4,0x27
    0x8401460a    0x122    addi a4,a4,3
    0x8401460c    0x124    and a5,a5,a4
    0x8401460e    0x126    lui a4,0xf8000
    0x84014612    0x12a    srli a4,a4,0x19
    0x84014614    0x12c    and a1,a1,a4
    0x84014616    0x12e    or a1,a1,a5
    0x84014618    0x130    beqz a0,ffffffff84014662 <receiveIPC+0x17a>
    0x8401461a    0x132    sd a1,0(s2)
    0x8401461e    0x136    ld s4,288(s3)
    0x84014622    0x13a    srli s5,s4,0x3
    0x84014626    0x13e    mv a4,s1
    0x84014628    0x140    andi a3,s5,1
    0x8401462c    0x144    ld a2,296(s3)
    0x84014630    0x148    mv a1,s2
    0x84014632    0x14a    mv a0,s3
    0x84014634    0x14c    jal ra,ffffffff8401403a <doIPCTransfer>
    0x84014638    0x150    ld a5,288(s3)
    0x8401463c    0x154    srli a5,a5,0x1
    0x8401463e    0x156    andi a5,a5,1
    0x84014640    0x158    beqz a5,ffffffff84014674 <receiveIPC+0x18c>
    0x84014642    0x15a    srli s4,s4,0x2
    0x84014646    0x15e    or s4,s4,s5
    0x8401464a    0x162    andi s4,s4,1
    0x8401464e    0x166    beqz s4,ffffffff8401466a <receiveIPC+0x182>
    0x84014652    0x16a    srli a2,s0,0x39
    0x84014656    0x16e    andi a2,a2,1
    0x84014658    0x170    mv a1,s1
    0x8401465a    0x172    mv a0,s3
    0x8401465c    0x174    jal ra,ffffffff84013d5e <setupCallerCap>
    0x84014660    0x178    j ffffffff84014538 <receiveIPC+0x50>
    0x84014662    0x17a    andi a1,a1,-4
    0x84014664    0x17c    sd a1,0(s2)
    0x84014668    0x180    j ffffffff8401461e <receiveIPC+0x136>
    0x8401466a    0x182    li a1,0
    0x8401466c    0x184    mv a0,s3
    0x8401466e    0x186    jal ra,ffffffff840124f6 <setThreadState>
    0x84014672    0x18a    j ffffffff84014538 <receiveIPC+0x50>
    0x84014674    0x18c    li a1,1
    0x84014676    0x18e    mv a0,s3
    0x84014678    0x190    jal ra,ffffffff840124f6 <setThreadState>
    0x8401467c    0x194    mv a0,s3
    0x8401467e    0x196    jal ra,ffffffff840127f0 <possibleSwitchTo>
    0x84014682    0x19a    j ffffffff84014538 <receiveIPC+0x50>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
156 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 231 nodes.

Section decodeIRQControlInvocation (263 of 271)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 80 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeIRQControlInvocation`:

    0x8401263c     0x0    addi sp,sp,-80
    0x8401263e     0x2    sd ra,72(sp)          ; stack access
    0x84012640     0x4    sd s0,64(sp)          ; stack access
    0x84012642     0x6    sd s1,56(sp)          ; stack access
    0x84012644     0x8    sd s2,48(sp)          ; stack access
    0x84012646     0xa    sd s3,40(sp)          ; stack access
    0x84012648     0xc    sd s4,32(sp)          ; stack access
    0x8401264a     0xe    mv s1,a2
    0x8401264c    0x10    mv s0,a3
    0x8401264e    0x12    li a5,25
    0x84012650    0x14    bne a0,a5,ffffffff8401270a <decodeIRQControlInvocation+0xce>
    0x84012654    0x18    li a5,2
    0x84012656    0x1a    bgeu a5,a1,ffffffff840126ba <decodeIRQControlInvocation+0x7e>
    0x8401265a    0x1e    auipc s2,0x6
    0x8401265e    0x22    ld s2,566(s2) # ffffffff84018890 <current_extra_caps>
    0x84012662    0x26    beqz s2,ffffffff840126ba <decodeIRQControlInvocation+0x7e>
    0x84012666    0x2a    mv a1,a3
    0x84012668    0x2c    li a0,0
    0x8401266a    0x2e    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401266e    0x32    mv s3,a0
    0x84012670    0x34    mv a1,s0
    0x84012672    0x36    li a0,1
    0x84012674    0x38    jal ra,ffffffff8401012a <getSyscallArg>
    0x84012678    0x3c    mv s4,a0
    0x8401267a    0x3e    mv a1,s0
    0x8401267c    0x40    li a0,2
    0x8401267e    0x42    jal ra,ffffffff8401012a <getSyscallArg>
    0x84012682    0x46    mv s0,a0
    0x84012684    0x48    ld a5,0(s2)
    0x84012688    0x4c    sd a5,0(sp)           ; stack access
    0x8401268a    0x4e    ld a5,8(s2)
    0x8401268e    0x52    sd a5,8(sp)           ; stack access
    0x84012690    0x54    mv a0,s3
    0x84012692    0x56    jal ra,ffffffff84010d2c <Arch_checkIRQ>
    0x84012696    0x5a    bnez a0,ffffffff840126c6 <decodeIRQControlInvocation+0x8a>
    0x84012698    0x5c    slli a4,s3,0x3
    0x8401269c    0x60    auipc a5,0x6
    0x840126a0    0x64    addi a5,a5,-1692 # ffffffff84018000 <riscvKSASIDTable>
    0x840126a4    0x68    add a5,a5,a4
    0x840126a6    0x6a    ld a5,1752(a5)
    0x840126aa    0x6e    beqz a5,ffffffff840126d6 <decodeIRQControlInvocation+0x9a>
    0x840126ac    0x70    li a5,9
    0x840126ae    0x72    auipc a4,0x6
    0x840126b2    0x76    sd a5,34(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840126b6    0x7a    li a0,3
    0x840126b8    0x7c    j ffffffff840126c6 <decodeIRQControlInvocation+0x8a>
    0x840126ba    0x7e    li a5,7
    0x840126bc    0x80    auipc a4,0x6
    0x840126c0    0x84    sd a5,20(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840126c4    0x88    li a0,3
    0x840126c6    0x8a    ld ra,72(sp)          ; stack access
    0x840126c8    0x8c    ld s0,64(sp)          ; stack access
    0x840126ca    0x8e    ld s1,56(sp)          ; stack access
    0x840126cc    0x90    ld s2,48(sp)          ; stack access
    0x840126ce    0x92    ld s3,40(sp)          ; stack access
    0x840126d0    0x94    ld s4,32(sp)          ; stack access
    0x840126d2    0x96    addi sp,sp,80
    0x840126d4    0x98    ret
    0x840126d6    0x9a    mv a3,s0
    0x840126d8    0x9c    mv a2,s4
    0x840126da    0x9e    ld a0,0(sp)           ; stack access
    0x840126dc    0xa0    ld a1,8(sp)           ; stack access
    0x840126de    0xa2    jal ra,ffffffff840114a6 <lookupTargetSlot>
    0x840126e2    0xa6    sd a1,24(sp)          ; stack access
    0x840126e4    0xa8    bnez a0,ffffffff840126c6 <decodeIRQControlInvocation+0x8a>
    0x840126e6    0xaa    mv s0,a1
    0x840126e8    0xac    mv a0,a1
    0x840126ea    0xae    jal ra,ffffffff840118cc <ensureEmptySlot>
    0x840126ee    0xb2    bnez a0,ffffffff840126c6 <decodeIRQControlInvocation+0x8a>
    0x840126f0    0xb4    li a1,2
    0x840126f2    0xb6    auipc a0,0x18
    0x840126f6    0xba    ld a0,326(a0) # ffffffff8402a838 <ksCurThread>
    0x840126fa    0xbe    jal ra,ffffffff840124f6 <setThreadState>
    0x840126fe    0xc2    mv a2,s1
    0x84012700    0xc4    mv a1,s0
    0x84012702    0xc6    mv a0,s3
    0x84012704    0xc8    jal ra,ffffffff840119e6 <invokeIRQControl>
    0x84012708    0xcc    j ffffffff840126c6 <decodeIRQControlInvocation+0x8a>
    0x8401270a    0xce    jal ra,ffffffff84012512 <Arch_decodeIRQControlInvocation>
    0x8401270e    0xd2    j ffffffff840126c6 <decodeIRQControlInvocation+0x8a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 128 nodes.

Section decodeTCBConfigure (264 of 271)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 194 instructions.


Stack analysis
---------------

72 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x84014a1a      0x0    addi sp,sp,-272
    0x84014a1c      0x2    sd ra,264(sp)         ; stack access
    0x84014a1e      0x4    sd s0,256(sp)         ; stack access
    0x84014a20      0x6    sd s1,248(sp)         ; stack access
    0x84014a22      0x8    sd s2,240(sp)         ; stack access
    0x84014a24      0xa    sd s3,232(sp)         ; stack access
    0x84014a26      0xc    sd s4,224(sp)         ; stack access
    0x84014a28      0xe    sd s5,216(sp)         ; stack access
    0x84014a2a     0x10    sd s6,208(sp)         ; stack access
    0x84014a2c     0x12    sd s7,200(sp)         ; stack access
    0x84014a2e     0x14    sd s8,192(sp)         ; stack access
    0x84014a30     0x16    sd s9,184(sp)         ; stack access
    0x84014a32     0x18    sd s10,176(sp)        ; stack access
    0x84014a34     0x1a    sd s11,168(sp)        ; stack access
    0x84014a36     0x1c    sd a0,64(sp)          ; stack access
    0x84014a38     0x1e    sd a1,72(sp)          ; stack access
    0x84014a3a     0x20    li a5,3
    0x84014a3c     0x22    bgeu a5,a2,ffffffff84014b92 <decodeTCBConfigure+0x178>
    0x84014a40     0x26    mv s1,a3
    0x84014a42     0x28    mv s0,a4
    0x84014a44     0x2a    auipc s2,0x4
    0x84014a48     0x2e    ld s2,-436(s2) # ffffffff84018890 <current_extra_caps>
    0x84014a4c     0x32    beqz s2,ffffffff84014b92 <decodeTCBConfigure+0x178>
    0x84014a50     0x36    auipc s4,0x4
    0x84014a54     0x3a    ld s4,-440(s4) # ffffffff84018898 <current_extra_caps+0x8>
    0x84014a58     0x3e    beqz s4,ffffffff84014b92 <decodeTCBConfigure+0x178>
    0x84014a5c     0x42    auipc s3,0x4
    0x84014a60     0x46    ld s3,-444(s3) # ffffffff840188a0 <current_extra_caps+0x10>
    0x84014a64     0x4a    beqz s3,ffffffff84014b92 <decodeTCBConfigure+0x178>
    0x84014a68     0x4e    mv a1,a4
    0x84014a6a     0x50    li a0,0
    0x84014a6c     0x52    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014a70     0x56    mv s8,a0
    0x84014a72     0x58    mv a1,s0
    0x84014a74     0x5a    li a0,1
    0x84014a76     0x5c    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014a7a     0x60    mv s5,a0
    0x84014a7c     0x62    mv a1,s0
    0x84014a7e     0x64    li a0,2
    0x84014a80     0x66    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014a84     0x6a    mv s6,a0
    0x84014a86     0x6c    mv a1,s0
    0x84014a88     0x6e    li a0,3
    0x84014a8a     0x70    jal ra,ffffffff8401012a <getSyscallArg>
    0x84014a8e     0x74    mv s0,a0
    0x84014a90     0x76    ld s7,0(s2)
    0x84014a94     0x7a    sd s7,128(sp)         ; stack access
    0x84014a96     0x7c    ld a5,8(s2)
    0x84014a9a     0x80    sd a5,136(sp)         ; stack access
    0x84014a9c     0x82    mv s9,s7
    0x84014a9e     0x84    ld a5,0(s4)
    0x84014aa2     0x88    sd a5,112(sp)         ; stack access
    0x84014aa4     0x8a    ld a5,8(s4)
    0x84014aa8     0x8e    sd a5,120(sp)         ; stack access
    0x84014aaa     0x90    ld a5,0(s3)
    0x84014aae     0x94    sd a5,144(sp)         ; stack access
    0x84014ab0     0x96    ld a5,8(s3)
    0x84014ab4     0x9a    sd a5,152(sp)         ; stack access
    0x84014ab6     0x9c    bnez a0,ffffffff84014bbc <decodeTCBConfigure+0x1a2>
    0x84014aba     0xa0    li s3,0
    0x84014abc     0xa2    ld a5,64(sp)          ; stack access
    0x84014abe     0xa4    slli s10,a5,0x19
    0x84014ac2     0xa8    srli s10,s10,0x19
    0x84014ac6     0xac    srli a5,a5,0x26
    0x84014ac8     0xae    andi a5,a5,1
    0x84014aca     0xb0    beqz a5,ffffffff84014ad4 <decodeTCBConfigure+0xba>
    0x84014acc     0xb2    li a5,-1
    0x84014ace     0xb4    slli a5,a5,0x27
    0x84014ad0     0xb6    or s10,s10,a5
    0x84014ad4     0xba    andi s11,s10,-1024
    0x84014ad8     0xbe    mv a0,s11
    0x84014ada     0xc0    jal ra,ffffffff840120d0 <slotCapLongRunningDelete>
    0x84014ade     0xc4    bnez a0,ffffffff84014be0 <decodeTCBConfigure+0x1c6>
    0x84014ae2     0xc8    addi a0,s11,32 # 1020 <KERNEL_OFFSET-0xfffffffeffffefe0>
    0x84014ae6     0xcc    jal ra,ffffffff840120d0 <slotCapLongRunningDelete>
    0x84014aea     0xd0    bnez a0,ffffffff84014be0 <decodeTCBConfigure+0x1c6>
    0x84014aee     0xd4    beqz s5,ffffffff84014b02 <decodeTCBConfigure+0xe8>
    0x84014af2     0xd8    mv a2,s7
    0x84014af4     0xda    ld a3,136(sp)         ; stack access
    0x84014af6     0xdc    mv a1,s5
    0x84014af8     0xde    li a0,0
    0x84014afa     0xe0    jal ra,ffffffff8401210a <updateCapData>
    0x84014afe     0xe4    sd a1,136(sp)         ; stack access
    0x84014b00     0xe6    mv s9,a0
    0x84014b02     0xe8    mv a2,s9
    0x84014b04     0xea    ld a3,136(sp)         ; stack access
    0x84014b06     0xec    mv a1,s2
    0x84014b08     0xee    addi a0,sp,88
    0x84014b0a     0xf0    jal ra,ffffffff84011fa8 <deriveCap>
    0x84014b0e     0xf4    ld a0,88(sp)          ; stack access
    0x84014b10     0xf6    bnez a0,ffffffff84014b9e <decodeTCBConfigure+0x184>
    0x84014b12     0xf8    ld s5,96(sp)          ; stack access
    0x84014b14     0xfa    ld a5,104(sp)         ; stack access
    0x84014b16     0xfc    sd a5,136(sp)         ; stack access
    0x84014b18     0xfe    srli a4,s5,0x3b
    0x84014b1c    0x102    li a5,10
    0x84014b1e    0x104    bne a4,a5,ffffffff84014bee <decodeTCBConfigure+0x1d4>
    0x84014b22    0x108    beqz s6,ffffffff84014b36 <decodeTCBConfigure+0x11c>
    0x84014b26    0x10c    ld a2,112(sp)         ; stack access
    0x84014b28    0x10e    ld a3,120(sp)         ; stack access
    0x84014b2a    0x110    mv a1,s6
    0x84014b2c    0x112    li a0,0
    0x84014b2e    0x114    jal ra,ffffffff8401210a <updateCapData>
    0x84014b32    0x118    sd a0,112(sp)         ; stack access
    0x84014b34    0x11a    sd a1,120(sp)         ; stack access
    0x84014b36    0x11c    ld a2,112(sp)         ; stack access
    0x84014b38    0x11e    ld a3,120(sp)         ; stack access
    0x84014b3a    0x120    mv a1,s4
    0x84014b3c    0x122    addi a0,sp,88
    0x84014b3e    0x124    jal ra,ffffffff84011fa8 <deriveCap>
    0x84014b42    0x128    ld a0,88(sp)          ; stack access
    0x84014b44    0x12a    bnez a0,ffffffff84014b9e <decodeTCBConfigure+0x184>
    0x84014b46    0x12c    ld a0,96(sp)          ; stack access
    0x84014b48    0x12e    sd a0,112(sp)         ; stack access
    0x84014b4a    0x130    ld a1,104(sp)         ; stack access
    0x84014b4c    0x132    sd a1,120(sp)         ; stack access
    0x84014b4e    0x134    jal ra,ffffffff84010c06 <isValidVTableRoot>
    0x84014b52    0x138    beqz a0,ffffffff84014bfc <decodeTCBConfigure+0x1e2>
    0x84014b54    0x13a    li a1,2
    0x84014b56    0x13c    auipc a0,0x16
    0x84014b5a    0x140    ld a0,-798(a0) # ffffffff8402a838 <ksCurThread>
    0x84014b5e    0x144    jal ra,ffffffff840124f6 <setThreadState>
    0x84014b62    0x148    li a5,6
    0x84014b64    0x14a    sd a5,56(sp)          ; stack access
    0x84014b66    0x14c    sd s3,48(sp)          ; stack access
    0x84014b68    0x14e    ld a5,144(sp)         ; stack access
    0x84014b6a    0x150    sd a5,32(sp)          ; stack access
    0x84014b6c    0x152    ld a5,152(sp)         ; stack access
    0x84014b6e    0x154    sd a5,40(sp)          ; stack access
    0x84014b70    0x156    sd s0,24(sp)          ; stack access
    0x84014b72    0x158    sd s4,16(sp)          ; stack access
    0x84014b74    0x15a    ld a5,112(sp)         ; stack access
    0x84014b76    0x15c    sd a5,0(sp)           ; stack access
    0x84014b78    0x15e    ld a5,120(sp)         ; stack access
    0x84014b7a    0x160    sd a5,8(sp)           ; stack access
    0x84014b7c    0x162    mv a7,s2
    0x84014b7e    0x164    mv a5,s5
    0x84014b80    0x166    ld a6,136(sp)         ; stack access
    0x84014b82    0x168    li a4,0
    0x84014b84    0x16a    li a3,0
    0x84014b86    0x16c    mv a2,s8
    0x84014b88    0x16e    mv a1,s1
    0x84014b8a    0x170    mv a0,s10
    0x84014b8c    0x172    jal ra,ffffffff840148c6 <invokeTCB_ThreadControl>
    0x84014b90    0x176    j ffffffff84014b9e <decodeTCBConfigure+0x184>
    0x84014b92    0x178    li a5,7
    0x84014b94    0x17a    auipc a4,0x4
    0x84014b98    0x17e    sd a5,-1220(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014b9c    0x182    li a0,3
    0x84014b9e    0x184    ld ra,264(sp)         ; stack access
    0x84014ba0    0x186    ld s0,256(sp)         ; stack access
    0x84014ba2    0x188    ld s1,248(sp)         ; stack access
    0x84014ba4    0x18a    ld s2,240(sp)         ; stack access
    0x84014ba6    0x18c    ld s3,232(sp)         ; stack access
    0x84014ba8    0x18e    ld s4,224(sp)         ; stack access
    0x84014baa    0x190    ld s5,216(sp)         ; stack access
    0x84014bac    0x192    ld s6,208(sp)         ; stack access
    0x84014bae    0x194    ld s7,200(sp)         ; stack access
    0x84014bb0    0x196    ld s8,192(sp)         ; stack access
    0x84014bb2    0x198    ld s9,184(sp)         ; stack access
    0x84014bb4    0x19a    ld s10,176(sp)        ; stack access
    0x84014bb6    0x19c    ld s11,168(sp)        ; stack access
    0x84014bb8    0x19e    addi sp,sp,272
    0x84014bba    0x1a0    ret
    0x84014bbc    0x1a2    ld a2,144(sp)         ; stack access
    0x84014bbe    0x1a4    mv a3,a5
    0x84014bc0    0x1a6    mv a1,s3
    0x84014bc2    0x1a8    addi a0,sp,88
    0x84014bc4    0x1aa    jal ra,ffffffff84011fa8 <deriveCap>
    0x84014bc8    0x1ae    ld a0,88(sp)          ; stack access
    0x84014bca    0x1b0    bnez a0,ffffffff84014b9e <decodeTCBConfigure+0x184>
    0x84014bcc    0x1b2    ld a1,96(sp)          ; stack access
    0x84014bce    0x1b4    sd a1,144(sp)         ; stack access
    0x84014bd0    0x1b6    ld a2,104(sp)         ; stack access
    0x84014bd2    0x1b8    sd a2,152(sp)         ; stack access
    0x84014bd4    0x1ba    mv a0,s0
    0x84014bd6    0x1bc    jal ra,ffffffff84010c1c <checkValidIPCBuffer>
    0x84014bda    0x1c0    beqz a0,ffffffff84014abc <decodeTCBConfigure+0xa2>
    0x84014bde    0x1c4    j ffffffff84014b9e <decodeTCBConfigure+0x184>
    0x84014be0    0x1c6    li a5,3
    0x84014be2    0x1c8    auipc a4,0x4
    0x84014be6    0x1cc    sd a5,-1298(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014bea    0x1d0    li a0,3
    0x84014bec    0x1d2    j ffffffff84014b9e <decodeTCBConfigure+0x184>
    0x84014bee    0x1d4    li a5,3
    0x84014bf0    0x1d6    auipc a4,0x4
    0x84014bf4    0x1da    sd a5,-1312(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014bf8    0x1de    li a0,3
    0x84014bfa    0x1e0    j ffffffff84014b9e <decodeTCBConfigure+0x184>
    0x84014bfc    0x1e2    li a5,3
    0x84014bfe    0x1e4    auipc a4,0x4
    0x84014c02    0x1e8    sd a5,-1326(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014c06    0x1ec    li a0,3
    0x84014c08    0x1ee    j ffffffff84014b9e <decodeTCBConfigure+0x184>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
194 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 328 nodes.

Section finaliseCap (265 of 271)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 155 instructions.

XOR.....
RVC_TFFFTT___FT___FT..

Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
44 stack accesses found. Annotated code for `finaliseCap`:

    0x84013038      0x0    addi sp,sp,-48
    0x8401303a      0x2    sd ra,40(sp)          ; stack access
    0x8401303c      0x4    sd s0,32(sp)          ; stack access
    0x8401303e      0x6    sd s1,24(sp)          ; stack access
    0x84013040      0x8    sd s2,16(sp)          ; stack access
    0x84013042      0xa    mv s0,a0
    0x84013044      0xc    sd a1,0(sp)           ; stack access
    0x84013046      0xe    sd a2,8(sp)           ; stack access
    0x84013048     0x10    mv s1,a1
    0x8401304a     0x12    srli a5,a1,0x3b
    0x8401304e     0x16    andi a2,a5,1
    0x84013052     0x1a    bnez a2,ffffffff84013092 <finaliseCap+0x5a>
    0x84013054     0x1c    li a2,6
    0x84013056     0x1e    beq a5,a2,ffffffff840130c4 <finaliseCap+0x8c>
    0x8401305a     0x22    bltu a2,a5,ffffffff840130a6 <finaliseCap+0x6e>
    0x8401305e     0x26    beqz a5,ffffffff840130b2 <finaliseCap+0x7a>
    0x84013060     0x28    li a2,4
    0x84013062     0x2a    bne a5,a2,ffffffff840131f2 <finaliseCap+0x1ba>
    0x84013066     0x2e    beqz a3,ffffffff84013080 <finaliseCap+0x48>
    0x84013068     0x30    slli a0,a1,0x19
    0x8401306c     0x34    srli a0,a0,0x19
    0x8401306e     0x36    srli s1,a1,0x26
    0x84013072     0x3a    andi s1,s1,1
    0x84013074     0x3c    beqz s1,ffffffff8401307c <finaliseCap+0x44>
    0x84013076     0x3e    li a5,-1
    0x84013078     0x40    slli a5,a5,0x27
    0x8401307a     0x42    or a0,a0,a5
    0x8401307c     0x44    jal ra,ffffffff84012834 <cancelAllIPC>
    0x84013080     0x48    sd zero,0(s0)         ; stack access
    0x84013084     0x4c    sd zero,8(s0)         ; stack access
    0x84013088     0x50    sd zero,16(s0)        ; stack access
    0x8401308c     0x54    sd zero,24(s0)        ; stack access
    0x84013090     0x58    j ffffffff84013098 <finaliseCap+0x60>
    0x84013092     0x5a    ld a2,8(sp)           ; stack access
    0x84013094     0x5c    jal ra,ffffffff84010e12 <Arch_finaliseCap>
    0x84013098     0x60    mv a0,s0
    0x8401309a     0x62    ld ra,40(sp)          ; stack access
    0x8401309c     0x64    ld s0,32(sp)          ; stack access
    0x8401309e     0x66    ld s1,24(sp)          ; stack access
    0x840130a0     0x68    ld s2,16(sp)          ; stack access
    0x840130a2     0x6a    addi sp,sp,48
    0x840130a4     0x6c    ret
    0x840130a6     0x6e    li a2,8
    0x840130a8     0x70    beq a5,a2,ffffffff840130b2 <finaliseCap+0x7a>
    0x840130ac     0x74    li a2,20
    0x840130ae     0x76    bne a5,a2,ffffffff840130fc <finaliseCap+0xc4>
    0x840130b2     0x7a    sd zero,0(s0)         ; stack access
    0x840130b6     0x7e    sd zero,8(s0)         ; stack access
    0x840130ba     0x82    sd zero,16(s0)        ; stack access
    0x840130be     0x86    sd zero,24(s0)        ; stack access
    0x840130c2     0x8a    j ffffffff84013098 <finaliseCap+0x60>
    0x840130c4     0x8c    beqz a3,ffffffff840130ea <finaliseCap+0xb2>
    0x840130c6     0x8e    slli s2,a1,0x19
    0x840130ca     0x92    srli s2,s2,0x19
    0x840130ce     0x96    srli s1,a1,0x26
    0x840130d2     0x9a    andi s1,s1,1
    0x840130d4     0x9c    beqz s1,ffffffff840130de <finaliseCap+0xa6>
    0x840130d6     0x9e    li a5,-1
    0x840130d8     0xa0    slli a5,a5,0x27
    0x840130da     0xa2    or s2,s2,a5
    0x840130de     0xa6    mv a0,s2
    0x840130e0     0xa8    jal ra,ffffffff84011ad0 <unbindMaybeNotification>
    0x840130e4     0xac    mv a0,s2
    0x840130e6     0xae    jal ra,ffffffff84012872 <cancelAllSignals>
    0x840130ea     0xb2    sd zero,0(s0)         ; stack access
    0x840130ee     0xb6    sd zero,8(s0)         ; stack access
    0x840130f2     0xba    sd zero,16(s0)        ; stack access
    0x840130f6     0xbe    sd zero,24(s0)        ; stack access
    0x840130fa     0xc2    j ffffffff84013098 <finaliseCap+0x60>
    0x840130fc     0xc4    bnez a4,ffffffff840131f4 <finaliseCap+0x1bc>
    0x84013100     0xc8    ld s2,8(sp)           ; stack access
    0x84013102     0xca    li a4,16
    0x84013104     0xcc    beq a5,a4,ffffffff840131c4 <finaliseCap+0x18c>
    0x84013108     0xd0    bltu a4,a5,ffffffff8401315c <finaliseCap+0x124>
    0x8401310c     0xd4    li a4,10
    0x8401310e     0xd6    beq a5,a4,ffffffff84013172 <finaliseCap+0x13a>
    0x84013112     0xda    li a4,12
    0x84013114     0xdc    bne a5,a4,ffffffff840131c6 <finaliseCap+0x18e>
    0x84013118     0xe0    beqz a3,ffffffff840131c6 <finaliseCap+0x18e>
    0x8401311a     0xe2    slli s2,a1,0x19
    0x8401311e     0xe6    srli s2,s2,0x19
    0x84013122     0xea    srli a5,a1,0x26
    0x84013126     0xee    andi a5,a5,1
    0x84013128     0xf0    beqz a5,ffffffff84013132 <finaliseCap+0xfa>
    0x8401312a     0xf2    li a5,-1
    0x8401312c     0xf4    slli a5,a5,0x27
    0x8401312e     0xf6    or s2,s2,a5
    0x84013132     0xfa    mv a0,s2
    0x84013134     0xfc    jal ra,ffffffff84011af6 <unbindNotification>
    0x84013138    0x100    mv a0,s2
    0x8401313a    0x102    jal ra,ffffffff84013000 <suspend>
    0x8401313e    0x106    li a5,-7
    0x84013140    0x108    slli a5,a5,0x3c
    0x84013142    0x10a    addi a5,a5,64 # ffffffffe0000040 <ki_end+0x5bfd1040>
    0x84013146    0x10e    sd a5,0(s0)           ; stack access
    0x84013148    0x110    andi a5,s2,-1024
    0x8401314c    0x114    xori a5,a5,5
    0x84013150    0x118    sd a5,8(s0)           ; stack access
    0x84013152    0x11a    sd zero,16(s0)        ; stack access
    0x84013156    0x11e    sd zero,24(s0)        ; stack access
    0x8401315a    0x122    j ffffffff84013098 <finaliseCap+0x60>
    0x8401315c    0x124    li a4,18
    0x8401315e    0x126    bne a5,a4,ffffffff840131c6 <finaliseCap+0x18e>
    0x84013162    0x12a    sd a1,0(s0)           ; stack access
    0x84013164    0x12c    sd s2,8(a0) # fffffffff8000008 <ki_end+0x73fd1008>  ; stack access
    0x84013168    0x130    sd zero,16(a0)        ; stack access
    0x8401316c    0x134    sd zero,24(a0)        ; stack access
    0x84013170    0x138    j ffffffff84013098 <finaliseCap+0x60>
    0x84013172    0x13a    beqz a3,ffffffff840131c6 <finaliseCap+0x18e>
    0x84013174    0x13c    srli a3,a1,0x2f
    0x84013178    0x140    andi a0,a3,63
    0x8401317c    0x144    mv a3,a0
    0x8401317e    0x146    li a2,1
    0x84013180    0x148    sll a1,a2,a0
    0x84013184    0x14c    slli s1,s1,0x1
    0x84013186    0x14e    lui a5,0xfc000
    0x8401318a    0x152    srli a5,a5,0x19
    0x8401318c    0x154    and a4,s1,a5
    0x84013190    0x158    slli a2,a2,0x26
    0x84013192    0x15a    and s1,s1,a2
    0x84013194    0x15c    beqz s1,ffffffff8401319c <finaliseCap+0x164>
    0x84013196    0x15e    li a5,-1
    0x84013198    0x160    slli a5,a5,0x27
    0x8401319a    0x162    or a4,a4,a5
    0x8401319c    0x164    li a5,-7
    0x8401319e    0x166    slli a5,a5,0x3c
    0x840131a0    0x168    or a5,a5,a0
    0x840131a2    0x16a    sd a5,0(s0)           ; stack access
    0x840131a4    0x16c    addiw a3,a3,1
    0x840131a6    0x16e    li a5,-1
    0x840131a8    0x170    sll a5,a5,a3
    0x840131ac    0x174    not a5,a5
    0x840131b0    0x178    xor a3,a1,a4
    0x840131b4    0x17c    and a5,a5,a3
    0x840131b6    0x17e    xor a5,a5,a4
    0x840131b8    0x180    sd a5,8(s0)           ; stack access
    0x840131ba    0x182    sd zero,16(s0)        ; stack access
    0x840131be    0x186    sd zero,24(s0)        ; stack access
    0x840131c2    0x18a    j ffffffff84013098 <finaliseCap+0x60>
    0x840131c4    0x18c    bnez a3,ffffffff840131d8 <finaliseCap+0x1a0>
    0x840131c6    0x18e    sd zero,0(s0)         ; stack access
    0x840131ca    0x192    sd zero,8(s0)         ; stack access
    0x840131ce    0x196    sd zero,16(s0)        ; stack access
    0x840131d2    0x19a    sd zero,24(s0)        ; stack access
    0x840131d6    0x19e    j ffffffff84013098 <finaliseCap+0x60>
    0x840131d8    0x1a0    slli a0,s2,0x34
    0x840131dc    0x1a4    srli a0,a0,0x34
    0x840131de    0x1a6    jal ra,ffffffff84013a86 <deletingIRQHandler>
    0x840131e2    0x1aa    sd zero,0(s0)         ; stack access
    0x840131e6    0x1ae    sd zero,8(s0)         ; stack access
    0x840131ea    0x1b2    sd s1,16(s0)          ; stack access
    0x840131ec    0x1b4    sd s2,24(s0)          ; stack access
    0x840131f0    0x1b8    j ffffffff84013098 <finaliseCap+0x60>
    0x840131f2    0x1ba    beqz a4,ffffffff840131c6 <finaliseCap+0x18e>
    0x840131f4    0x1bc    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
155 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 254 nodes.

Section handleSyscall (266 of 271)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 109 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleSyscall`:

    0x84016bae      0x0    addi sp,sp,-16
    0x84016bb0      0x2    sd ra,8(sp)           ; stack access
    0x84016bb2      0x4    sd s0,0(sp)           ; stack access
    0x84016bb4      0x6    li a5,-4
    0x84016bb6      0x8    beq a0,a5,ffffffff84016c74 <handleSyscall+0xc6>
    0x84016bba      0xc    bltu a5,a0,ffffffff84016bee <handleSyscall+0x40>
    0x84016bbe     0x10    li a5,-6
    0x84016bc0     0x12    beq a0,a5,ffffffff84016cf2 <handleSyscall+0x144>
    0x84016bc4     0x16    bltu a5,a0,ffffffff84016cda <handleSyscall+0x12c>
    0x84016bc8     0x1a    li a5,-8
    0x84016bca     0x1c    beq a0,a5,ffffffff84016d04 <handleSyscall+0x156>
    0x84016bce     0x20    li a5,-7
    0x84016bd0     0x22    bne a0,a5,ffffffff84016d0c <handleSyscall+0x15e>
    0x84016bd4     0x26    auipc s0,0x14
    0x84016bd8     0x2a    addi s0,s0,-924 # ffffffff8402a838 <ksCurThread>
    0x84016bdc     0x2e    ld a0,0(s0)
    0x84016bde     0x30    jal ra,ffffffff840129c8 <tcbSchedDequeue>
    0x84016be2     0x34    ld a0,0(s0)
    0x84016be4     0x36    jal ra,ffffffff840128de <tcbSchedAppend>
    0x84016be8     0x3a    jal ra,ffffffff84012490 <rescheduleRequired>
    0x84016bec     0x3e    j ffffffff84016ce0 <handleSyscall+0x132>
    0x84016bee     0x40    li a5,-2
    0x84016bf0     0x42    beq a0,a5,ffffffff84016cf8 <handleSyscall+0x14a>
    0x84016bf4     0x46    li a5,-1
    0x84016bf6     0x48    bne a0,a5,ffffffff84016c26 <handleSyscall+0x78>
    0x84016bfa     0x4c    li a1,1
    0x84016bfc     0x4e    li a0,1
    0x84016bfe     0x50    jal ra,ffffffff84016a96 <handleInvocation>
    0x84016c02     0x54    beqz a0,ffffffff84016ce0 <handleSyscall+0x132>
    0x84016c06     0x58    auipc a4,0x14
    0x84016c0a     0x5c    lw a4,-958(a4) # ffffffff8402a848 <active_irq>
    0x84016c0e     0x60    addiw a3,a4,-1
    0x84016c12     0x64    li a5,53
    0x84016c16     0x68    bltu a5,a3,ffffffff84016cbc <handleSyscall+0x10e>
    0x84016c1a     0x6c    slli a0,a4,0x20
    0x84016c1e     0x70    srli a0,a0,0x20
    0x84016c20     0x72    jal ra,ffffffff84013bd8 <handleInterrupt>
    0x84016c24     0x76    j ffffffff84016ce0 <handleSyscall+0x132>
    0x84016c26     0x78    li a5,-3
    0x84016c28     0x7a    bne a0,a5,ffffffff84016d0c <handleSyscall+0x15e>
    0x84016c2c     0x7e    li a1,1
    0x84016c2e     0x80    li a0,0
    0x84016c30     0x82    jal ra,ffffffff84016a96 <handleInvocation>
    0x84016c34     0x86    beqz a0,ffffffff84016ce0 <handleSyscall+0x132>
    0x84016c36     0x88    auipc a4,0x14
    0x84016c3a     0x8c    lw a4,-1006(a4) # ffffffff8402a848 <active_irq>
    0x84016c3e     0x90    addiw a3,a4,-1
    0x84016c42     0x94    li a5,53
    0x84016c46     0x98    bltu a5,a3,ffffffff84016c56 <handleSyscall+0xa8>
    0x84016c4a     0x9c    slli a0,a4,0x20
    0x84016c4e     0xa0    srli a0,a0,0x20
    0x84016c50     0xa2    jal ra,ffffffff84013bd8 <handleInterrupt>
    0x84016c54     0xa6    j ffffffff84016ce0 <handleSyscall+0x132>
    0x84016c56     0xa8    jal ra,ffffffff840101e4 <getNewActiveIRQ>
    0x84016c5a     0xac    sext.w a4,a0
    0x84016c5e     0xb0    auipc a5,0x14
    0x84016c62     0xb4    sw a0,-1046(a5) # ffffffff8402a848 <active_irq>
    0x84016c66     0xb8    addiw a5,a0,-1
    0x84016c6a     0xbc    li a3,53
    0x84016c6e     0xc0    bltu a3,a5,ffffffff84016ce0 <handleSyscall+0x132>
    0x84016c72     0xc4    j ffffffff84016c4a <handleSyscall+0x9c>
    0x84016c74     0xc6    li a1,0
    0x84016c76     0xc8    li a0,0
    0x84016c78     0xca    jal ra,ffffffff84016a96 <handleInvocation>
    0x84016c7c     0xce    beqz a0,ffffffff84016ce0 <handleSyscall+0x132>
    0x84016c7e     0xd0    auipc a4,0x14
    0x84016c82     0xd4    lw a4,-1078(a4) # ffffffff8402a848 <active_irq>
    0x84016c86     0xd8    addiw a3,a4,-1
    0x84016c8a     0xdc    li a5,53
    0x84016c8e     0xe0    bltu a5,a3,ffffffff84016c9e <handleSyscall+0xf0>
    0x84016c92     0xe4    slli a0,a4,0x20
    0x84016c96     0xe8    srli a0,a0,0x20
    0x84016c98     0xea    jal ra,ffffffff84013bd8 <handleInterrupt>
    0x84016c9c     0xee    j ffffffff84016ce0 <handleSyscall+0x132>
    0x84016c9e     0xf0    jal ra,ffffffff840101e4 <getNewActiveIRQ>
    0x84016ca2     0xf4    sext.w a4,a0
    0x84016ca6     0xf8    auipc a5,0x14
    0x84016caa     0xfc    sw a0,-1118(a5) # ffffffff8402a848 <active_irq>
    0x84016cae    0x100    addiw a5,a0,-1
    0x84016cb2    0x104    li a3,53
    0x84016cb6    0x108    bltu a3,a5,ffffffff84016ce0 <handleSyscall+0x132>
    0x84016cba    0x10c    j ffffffff84016c92 <handleSyscall+0xe4>
    0x84016cbc    0x10e    jal ra,ffffffff840101e4 <getNewActiveIRQ>
    0x84016cc0    0x112    sext.w a4,a0
    0x84016cc4    0x116    auipc a5,0x14
    0x84016cc8    0x11a    sw a0,-1148(a5) # ffffffff8402a848 <active_irq>
    0x84016ccc    0x11e    addiw a5,a0,-1
    0x84016cd0    0x122    li a3,53
    0x84016cd4    0x126    bltu a3,a5,ffffffff84016ce0 <handleSyscall+0x132>
    0x84016cd8    0x12a    j ffffffff84016c1a <handleSyscall+0x6c>
    0x84016cda    0x12c    li a0,1
    0x84016cdc    0x12e    jal ra,ffffffff84014684 <handleRecv>
    0x84016ce0    0x132    jal ra,ffffffff84012bb0 <schedule>
    0x84016ce4    0x136    jal ra,ffffffff84012600 <activateThread>
    0x84016ce8    0x13a    li a0,0
    0x84016cea    0x13c    ld ra,8(sp)           ; stack access
    0x84016cec    0x13e    ld s0,0(sp)           ; stack access
    0x84016cee    0x140    addi sp,sp,16
    0x84016cf0    0x142    ret
    0x84016cf2    0x144    jal ra,ffffffff84014114 <handleReply>
    0x84016cf6    0x148    j ffffffff84016ce0 <handleSyscall+0x132>
    0x84016cf8    0x14a    jal ra,ffffffff84014114 <handleReply>
    0x84016cfc    0x14e    li a0,1
    0x84016cfe    0x150    jal ra,ffffffff84014684 <handleRecv>
    0x84016d02    0x154    j ffffffff84016ce0 <handleSyscall+0x132>
    0x84016d04    0x156    li a0,0
    0x84016d06    0x158    jal ra,ffffffff84014684 <handleRecv>
    0x84016d0a    0x15c    j ffffffff84016ce0 <handleSyscall+0x132>
    0x84016d0c    0x15e    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
109 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 178 nodes.

Section decodeInvocation (267 of 271)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 183 instructions.


Stack analysis
---------------

28 stack accesses found. Annotated code for `decodeInvocation`:

    0x840168a2      0x0    addi sp,sp,-96
    0x840168a4      0x2    sd ra,88(sp)          ; stack access
    0x840168a6      0x4    sd s0,80(sp)          ; stack access
    0x840168a8      0x6    sd s1,72(sp)          ; stack access
    0x840168aa      0x8    sd s2,64(sp)          ; stack access
    0x840168ac      0xa    sd s3,56(sp)          ; stack access
    0x840168ae      0xc    sd s4,48(sp)          ; stack access
    0x840168b0      0xe    sd s5,40(sp)          ; stack access
    0x840168b2     0x10    mv s3,a3
    0x840168b4     0x12    sd a4,0(sp)           ; stack access
    0x840168b6     0x14    sd a5,8(sp)           ; stack access
    0x840168b8     0x16    mv s1,a4
    0x840168ba     0x18    mv s2,a5
    0x840168bc     0x1a    srli t1,a4,0x3b
    0x840168c0     0x1e    andi s0,t1,1
    0x840168c4     0x22    bnez s0,ffffffff84016912 <decodeInvocation+0x70>
    0x840168c6     0x24    mv s4,a6
    0x840168c8     0x26    mv s5,a7
    0x840168ca     0x28    li a5,10
    0x840168cc     0x2a    beq t1,a5,ffffffff84016a76 <decodeInvocation+0x1d4>
    0x840168d0     0x2e    bltu a5,t1,ffffffff8401694a <decodeInvocation+0xa8>
    0x840168d4     0x32    li a5,4
    0x840168d6     0x34    beq t1,a5,ffffffff840169ae <decodeInvocation+0x10c>
    0x840168da     0x38    bgeu a5,t1,ffffffff8401692e <decodeInvocation+0x8c>
    0x840168de     0x3c    li a5,6
    0x840168e0     0x3e    beq t1,a5,ffffffff84016a08 <decodeInvocation+0x166>
    0x840168e4     0x42    li a5,8
    0x840168e6     0x44    bne t1,a5,ffffffff84016a92 <decodeInvocation+0x1f0>
    0x840168ea     0x48    andi a5,a4,1
    0x840168ee     0x4c    bnez a5,ffffffff84016a4e <decodeInvocation+0x1ac>
    0x840168f2     0x50    li a1,2
    0x840168f4     0x52    auipc a0,0x14
    0x840168f8     0x56    ld a0,-188(a0) # ffffffff8402a838 <ksCurThread>
    0x840168fc     0x5a    jal ra,ffffffff840124f6 <setThreadState>
    0x84016900     0x5e    srli s1,s1,0x1
    0x84016902     0x60    andi a2,s1,1
    0x84016906     0x64    mv a1,s3
    0x84016908     0x66    mv a0,s2
    0x8401690a     0x68    jal ra,ffffffff84014152 <performInvocation_Reply>
    0x8401690e     0x6c    mv s0,a0
    0x84016910     0x6e    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016912     0x70    ld a6,96(sp)          ; stack access
    0x84016914     0x72    jal ra,ffffffff84015ba0 <decodeRISCVMMUInvocation>
    0x84016918     0x76    mv s0,a0
    0x8401691a     0x78    mv a0,s0
    0x8401691c     0x7a    ld ra,88(sp)          ; stack access
    0x8401691e     0x7c    ld s0,80(sp)          ; stack access
    0x84016920     0x7e    ld s1,72(sp)          ; stack access
    0x84016922     0x80    ld s2,64(sp)          ; stack access
    0x84016924     0x82    ld s3,56(sp)          ; stack access
    0x84016926     0x84    ld s4,48(sp)          ; stack access
    0x84016928     0x86    ld s5,40(sp)          ; stack access
    0x8401692a     0x88    addi sp,sp,96
    0x8401692c     0x8a    ret
    0x8401692e     0x8c    beqz t1,ffffffff84016982 <decodeInvocation+0xe0>
    0x84016932     0x90    li a5,2
    0x84016934     0x92    bne t1,a5,ffffffff84016a92 <decodeInvocation+0x1f0>
    0x84016938     0x96    ld a6,96(sp)          ; stack access
    0x8401693a     0x98    mv a5,a7
    0x8401693c     0x9a    ld a3,0(sp)           ; stack access
    0x8401693e     0x9c    ld a4,8(sp)           ; stack access
    0x84016940     0x9e    mv a2,s3
    0x84016942     0xa0    jal ra,ffffffff8401658e <decodeUntypedInvocation>
    0x84016946     0xa4    mv s0,a0
    0x84016948     0xa6    j ffffffff8401691a <decodeInvocation+0x78>
    0x8401694a     0xa8    li a5,16
    0x8401694c     0xaa    beq t1,a5,ffffffff84016a84 <decodeInvocation+0x1e2>
    0x84016950     0xae    bgeu a5,t1,ffffffff8401696a <decodeInvocation+0xc8>
    0x84016954     0xb2    li a5,18
    0x84016956     0xb4    beq t1,a5,ffffffff84016998 <decodeInvocation+0xf6>
    0x8401695a     0xb8    li a5,20
    0x8401695c     0xba    bne t1,a5,ffffffff84016a92 <decodeInvocation+0x1f0>
    0x84016960     0xbe    ld a2,96(sp)          ; stack access
    0x84016962     0xc0    jal ra,ffffffff840147e6 <decodeDomainInvocation>
    0x84016966     0xc4    mv s0,a0
    0x84016968     0xc6    j ffffffff8401691a <decodeInvocation+0x78>
    0x8401696a     0xc8    li a5,12
    0x8401696c     0xca    beq t1,a5,ffffffff84016a64 <decodeInvocation+0x1c2>
    0x84016970     0xce    li a5,14
    0x84016972     0xd0    bne t1,a5,ffffffff84016a92 <decodeInvocation+0x1f0>
    0x84016976     0xd4    ld a3,96(sp)          ; stack access
    0x84016978     0xd6    mv a2,s3
    0x8401697a     0xd8    jal ra,ffffffff8401263c <decodeIRQControlInvocation>
    0x8401697e     0xdc    mv s0,a0
    0x84016980     0xde    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016982     0xe0    auipc a5,0x1
    0x84016986     0xe4    addi a5,a5,1662 # ffffffff84018000 <riscvKSASIDTable>
    0x8401698a     0xe8    li a4,2
    0x8401698c     0xea    sd a4,1744(a5)
    0x84016990     0xee    sd zero,1704(a5)
    0x84016994     0xf2    li s0,3
    0x84016996     0xf4    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016998     0xf6    auipc a5,0x1
    0x8401699c     0xfa    addi a5,a5,1640 # ffffffff84018000 <riscvKSASIDTable>
    0x840169a0     0xfe    li a4,2
    0x840169a2    0x100    sd a4,1744(a5)
    0x840169a6    0x104    sd zero,1704(a5)
    0x840169aa    0x108    li s0,3
    0x840169ac    0x10a    j ffffffff8401691a <decodeInvocation+0x78>
    0x840169ae    0x10c    srli a5,a4,0x37
    0x840169b2    0x110    andi a5,a5,1
    0x840169b4    0x112    beqz a5,ffffffff840169f2 <decodeInvocation+0x150>
    0x840169b6    0x114    li a1,2
    0x840169b8    0x116    auipc a0,0x14
    0x840169bc    0x11a    ld a0,-384(a0) # ffffffff8402a838 <ksCurThread>
    0x840169c0    0x11e    jal ra,ffffffff840124f6 <setThreadState>
    0x840169c4    0x122    slli a0,s1,0x19
    0x840169c8    0x126    srli a0,a0,0x19
    0x840169ca    0x128    srli a5,s1,0x26
    0x840169ce    0x12c    andi a5,a5,1
    0x840169d0    0x12e    beqz a5,ffffffff840169d8 <decodeInvocation+0x136>
    0x840169d2    0x130    li a5,-1
    0x840169d4    0x132    slli a5,a5,0x27
    0x840169d6    0x134    or a0,a0,a5
    0x840169d8    0x136    srli a3,s1,0x3a
    0x840169dc    0x13a    srli a2,s1,0x39
    0x840169e0    0x13e    mv a5,s5
    0x840169e2    0x140    mv a4,s4
    0x840169e4    0x142    andi a3,a3,1
    0x840169e6    0x144    andi a2,a2,1
    0x840169e8    0x146    mv a1,s2
    0x840169ea    0x148    jal ra,ffffffff840144c2 <performInvocation_Endpoint>
    0x840169ee    0x14c    mv s0,a0
    0x840169f0    0x14e    j ffffffff8401691a <decodeInvocation+0x78>
    0x840169f2    0x150    auipc a5,0x1
    0x840169f6    0x154    addi a5,a5,1550 # ffffffff84018000 <riscvKSASIDTable>
    0x840169fa    0x158    li a4,2
    0x840169fc    0x15a    sd a4,1744(a5)
    0x84016a00    0x15e    sd zero,1704(a5)
    0x84016a04    0x162    li s0,3
    0x84016a06    0x164    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016a08    0x166    srli a5,a4,0x39
    0x84016a0c    0x16a    andi a5,a5,1
    0x84016a0e    0x16c    beqz a5,ffffffff84016a38 <decodeInvocation+0x196>
    0x84016a10    0x16e    li a1,2
    0x84016a12    0x170    auipc a0,0x14
    0x84016a16    0x174    ld a0,-474(a0) # ffffffff8402a838 <ksCurThread>
    0x84016a1a    0x178    jal ra,ffffffff840124f6 <setThreadState>
    0x84016a1e    0x17c    slli a0,s1,0x19
    0x84016a22    0x180    srli a0,a0,0x19
    0x84016a24    0x182    srli s1,s1,0x26
    0x84016a26    0x184    andi s1,s1,1
    0x84016a28    0x186    beqz s1,ffffffff84016a30 <decodeInvocation+0x18e>
    0x84016a2a    0x188    li a5,-1
    0x84016a2c    0x18a    slli a5,a5,0x27
    0x84016a2e    0x18c    or a0,a0,a5
    0x84016a30    0x18e    mv a1,s2
    0x84016a32    0x190    jal ra,ffffffff84013ae0 <sendSignal>
    0x84016a36    0x194    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016a38    0x196    auipc a5,0x1
    0x84016a3c    0x19a    addi a5,a5,1480 # ffffffff84018000 <riscvKSASIDTable>
    0x84016a40    0x19e    li a4,2
    0x84016a42    0x1a0    sd a4,1744(a5)
    0x84016a46    0x1a4    sd zero,1704(a5)
    0x84016a4a    0x1a8    li s0,3
    0x84016a4c    0x1aa    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016a4e    0x1ac    auipc a5,0x1
    0x84016a52    0x1b0    addi a5,a5,1458 # ffffffff84018000 <riscvKSASIDTable>
    0x84016a56    0x1b4    li a4,2
    0x84016a58    0x1b6    sd a4,1744(a5)
    0x84016a5c    0x1ba    sd zero,1704(a5)
    0x84016a60    0x1be    li s0,3
    0x84016a62    0x1c0    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016a64    0x1c2    ld a6,96(sp)          ; stack access
    0x84016a66    0x1c4    mv a5,a7
    0x84016a68    0x1c6    mv a4,a3
    0x84016a6a    0x1c8    ld a2,0(sp)           ; stack access
    0x84016a6c    0x1ca    ld a3,8(sp)           ; stack access
    0x84016a6e    0x1cc    jal ra,ffffffff840156ec <decodeTCBInvocation>
    0x84016a72    0x1d0    mv s0,a0
    0x84016a74    0x1d2    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016a76    0x1d4    ld a4,96(sp)          ; stack access
    0x84016a78    0x1d6    ld a2,0(sp)           ; stack access
    0x84016a7a    0x1d8    ld a3,8(sp)           ; stack access
    0x84016a7c    0x1da    jal ra,ffffffff8401345a <decodeCNodeInvocation>
    0x84016a80    0x1de    mv s0,a0
    0x84016a82    0x1e0    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016a84    0x1e2    slli a1,s2,0x34
    0x84016a88    0x1e6    srli a1,a1,0x34
    0x84016a8a    0x1e8    jal ra,ffffffff840139bc <decodeIRQHandlerInvocation>
    0x84016a8e    0x1ec    mv s0,a0
    0x84016a90    0x1ee    j ffffffff8401691a <decodeInvocation+0x78>
    0x84016a92    0x1f0    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
183 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 279 nodes.

Section decodeRISCVMMUInvocation (268 of 271)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 768 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

56 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x84015ba0      0x0    addi sp,sp,-208
    0x84015ba2      0x2    sd ra,200(sp)         ; stack access
    0x84015ba4      0x4    sd s0,192(sp)         ; stack access
    0x84015ba6      0x6    sd s1,184(sp)         ; stack access
    0x84015ba8      0x8    sd s2,176(sp)         ; stack access
    0x84015baa      0xa    sd s3,168(sp)         ; stack access
    0x84015bac      0xc    sd s4,160(sp)         ; stack access
    0x84015bae      0xe    sd s5,152(sp)         ; stack access
    0x84015bb0     0x10    sd s6,144(sp)         ; stack access
    0x84015bb2     0x12    sd s7,136(sp)         ; stack access
    0x84015bb4     0x14    sd s8,128(sp)         ; stack access
    0x84015bb6     0x16    sd s9,120(sp)         ; stack access
    0x84015bb8     0x18    sd s10,112(sp)        ; stack access
    0x84015bba     0x1a    sd s11,104(sp)        ; stack access
    0x84015bbc     0x1c    sd a4,0(sp)           ; stack access
    0x84015bbe     0x1e    sd a5,8(sp)           ; stack access
    0x84015bc0     0x20    mv s3,a6
    0x84015bc2     0x22    srli s0,a4,0x3b
    0x84015bc6     0x26    li a5,11
    0x84015bc8     0x28    beq s0,a5,ffffffff840161d4 <decodeRISCVMMUInvocation+0x634>
    0x84015bcc     0x2c    mv s2,a3
    0x84015bce     0x2e    mv s1,a4
    0x84015bd0     0x30    bltu a5,s0,ffffffff84015d08 <decodeRISCVMMUInvocation+0x168>
    0x84015bd4     0x34    li a5,1
    0x84015bd6     0x36    beq s0,a5,ffffffff84015e86 <decodeRISCVMMUInvocation+0x2e6>
    0x84015bda     0x3a    li a5,3
    0x84015bdc     0x3c    bne s0,a5,ffffffff84016466 <decodeRISCVMMUInvocation+0x8c6>
    0x84015be0     0x40    ld a5,0(sp)           ; stack access
    0x84015be2     0x42    sd a5,16(sp)          ; stack access
    0x84015be4     0x44    ld s4,8(sp)           ; stack access
    0x84015be6     0x46    sd s4,24(sp)          ; stack access
    0x84015be8     0x48    li a5,31
    0x84015bea     0x4a    beq a0,a5,ffffffff84015d82 <decodeRISCVMMUInvocation+0x1e2>
    0x84015bee     0x4e    li a5,30
    0x84015bf0     0x50    bne a0,a5,ffffffff84015df2 <decodeRISCVMMUInvocation+0x252>
    0x84015bf4     0x54    li a5,1
    0x84015bf6     0x56    bgeu a5,a1,ffffffff84015dfe <decodeRISCVMMUInvocation+0x25e>
    0x84015bfa     0x5a    auipc a4,0x3
    0x84015bfe     0x5e    ld a4,-874(a4) # ffffffff84018890 <current_extra_caps>
    0x84015c02     0x62    beqz a4,ffffffff84015dfe <decodeRISCVMMUInvocation+0x25e>
    0x84015c06     0x66    srli a5,s1,0x27
    0x84015c0a     0x6a    andi a5,a5,1
    0x84015c0c     0x6c    bnez a5,ffffffff84015e0a <decodeRISCVMMUInvocation+0x26a>
    0x84015c10     0x70    ld a5,0(a4)
    0x84015c12     0x72    srli s5,a5,0x3b
    0x84015c16     0x76    li a3,3
    0x84015c18     0x78    bne s5,a3,ffffffff84015e1e <decodeRISCVMMUInvocation+0x27e>
    0x84015c1c     0x7c    srli a5,a5,0x27
    0x84015c1e     0x7e    andi a5,a5,1
    0x84015c20     0x80    beqz a5,ffffffff84015e1e <decodeRISCVMMUInvocation+0x27e>
    0x84015c24     0x84    ld s8,8(a4)
    0x84015c28     0x88    srli a5,s8,0x9
    0x84015c2c     0x8c    slli s0,a5,0x19
    0x84015c30     0x90    srli s0,s0,0x19
    0x84015c32     0x92    srli a5,a5,0x26
    0x84015c34     0x94    andi a5,a5,1
    0x84015c36     0x96    beqz a5,ffffffff84015c3e <decodeRISCVMMUInvocation+0x9e>
    0x84015c38     0x98    li a5,-1
    0x84015c3a     0x9a    slli a5,a5,0x27
    0x84015c3c     0x9c    or s0,s0,a5
    0x84015c3e     0x9e    mv a1,s3
    0x84015c40     0xa0    li a0,0
    0x84015c42     0xa2    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015c46     0xa6    mv s6,a0
    0x84015c48     0xa8    srli a0,s8,0x30
    0x84015c4c     0xac    lui a5,0xfefff
    0x84015c50     0xb0    slli a5,a5,0xe
    0x84015c52     0xb2    srli a5,a5,0x1a
    0x84015c54     0xb4    bltu a5,s6,ffffffff84015e34 <decodeRISCVMMUInvocation+0x294>
    0x84015c58     0xb8    jal ra,ffffffff84010184 <findVSpaceForASID>
    0x84015c5c     0xbc    sd a0,64(sp)          ; stack access
    0x84015c5e     0xbe    sd a1,72(sp)          ; stack access
    0x84015c60     0xc0    bnez a0,ffffffff84015e4a <decodeRISCVMMUInvocation+0x2aa>
    0x84015c64     0xc4    ld a5,72(sp)          ; stack access
    0x84015c66     0xc6    bne s0,a5,ffffffff84015e60 <decodeRISCVMMUInvocation+0x2c0>
    0x84015c6a     0xca    mv a1,s6
    0x84015c6c     0xcc    mv a0,s0
    0x84015c6e     0xce    jal ra,ffffffff84010882 <lookupPTSlot>
    0x84015c72     0xd2    mv s7,a0
    0x84015c74     0xd4    mv s3,a1
    0x84015c76     0xd6    sd a0,48(sp)          ; stack access
    0x84015c78     0xd8    sd a1,56(sp)          ; stack access
    0x84015c7a     0xda    li a5,12
    0x84015c7c     0xdc    beq a1,a5,ffffffff84015e78 <decodeRISCVMMUInvocation+0x2d8>
    0x84015c80     0xe0    ld s0,0(a0)
    0x84015c82     0xe2    andi s0,s0,1
    0x84015c84     0xe4    bnez s0,ffffffff84015e78 <decodeRISCVMMUInvocation+0x2d8>
    0x84015c88     0xe8    srli a5,s4,0x9
    0x84015c8c     0xec    slli s5,a5,0x19
    0x84015c90     0xf0    srli s5,s5,0x19
    0x84015c94     0xf4    srli a5,a5,0x26
    0x84015c96     0xf6    andi a5,a5,1
    0x84015c98     0xf8    beqz a5,ffffffff84015ca2 <decodeRISCVMMUInvocation+0x102>
    0x84015c9a     0xfa    li a5,-1
    0x84015c9c     0xfc    slli a5,a5,0x27
    0x84015c9e     0xfe    or s5,s5,a5
    0x84015ca2    0x102    li s9,-1
    0x84015ca4    0x104    srli a5,s9,0x10
    0x84015ca8    0x108    and s4,s4,a5
    0x84015cac    0x10c    slli a5,s9,0x30
    0x84015cb0    0x110    and s8,s8,a5
    0x84015cb4    0x114    or s4,s4,s8
    0x84015cb8    0x118    li a1,2
    0x84015cba    0x11a    auipc a0,0x15
    0x84015cbe    0x11e    ld a0,-1154(a0) # ffffffff8402a838 <ksCurThread>
    0x84015cc2    0x122    jal ra,ffffffff840124f6 <setThreadState>
    0x84015cc6    0x126    li a4,1
    0x84015cc8    0x128    sll a5,a4,s3
    0x84015ccc    0x12c    neg a5,a5
    0x84015cd0    0x130    and a5,a5,s6
    0x84015cd4    0x134    slli s9,s9,0x28
    0x84015cd6    0x136    and s1,s1,s9
    0x84015cda    0x13a    or a5,a5,s1
    0x84015cdc    0x13c    slli a3,a4,0x27
    0x84015ce0    0x140    or a5,a5,a3
    0x84015ce2    0x142    sd a5,0(s2)
    0x84015ce6    0x146    sd s4,8(s2)
    0x84015cea    0x14a    slli a5,a4,0x26
    0x84015cee    0x14e    add a5,a5,s5
    0x84015cf0    0x150    srli a5,a5,0x2
    0x84015cf2    0x152    lui a4,0xfff00
    0x84015cf6    0x156    srli a4,a4,0xa
    0x84015cf8    0x158    and a5,a5,a4
    0x84015cfa    0x15a    ori a5,a5,193
    0x84015cfe    0x15e    sd a5,0(s7)
    0x84015d02    0x162    sfence.vma
    0x84015d06    0x166    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015d08    0x168    li a5,13
    0x84015d0a    0x16a    bne s0,a5,ffffffff84016466 <decodeRISCVMMUInvocation+0x8c6>
    0x84015d0e    0x16e    li a5,36
    0x84015d12    0x172    bne a0,a5,ffffffff84016376 <decodeRISCVMMUInvocation+0x7d6>
    0x84015d16    0x176    auipc s3,0x3
    0x84015d1a    0x17a    ld s3,-1158(s3) # ffffffff84018890 <current_extra_caps>
    0x84015d1e    0x17e    beqz s3,ffffffff84016384 <decodeRISCVMMUInvocation+0x7e4>
    0x84015d22    0x182    ld s2,0(s3)
    0x84015d26    0x186    srli s0,s2,0x3b
    0x84015d2a    0x18a    li a5,3
    0x84015d2c    0x18c    bne s0,a5,ffffffff84016392 <decodeRISCVMMUInvocation+0x7f2>
    0x84015d30    0x190    srli s2,s2,0x27
    0x84015d34    0x194    andi s2,s2,1
    0x84015d38    0x198    bnez s2,ffffffff84016392 <decodeRISCVMMUInvocation+0x7f2>
    0x84015d3c    0x19c    srli a2,a4,0x2b
    0x84015d40    0x1a0    slli a2,a2,0x30
    0x84015d42    0x1a2    srli a2,a2,0x30
    0x84015d44    0x1a4    srli a5,a2,0x9
    0x84015d48    0x1a8    slli a4,a5,0x3
    0x84015d4c    0x1ac    auipc a5,0x2
    0x84015d50    0x1b0    addi a5,a5,692 # ffffffff84018000 <riscvKSASIDTable>
    0x84015d54    0x1b4    add a5,a5,a4
    0x84015d56    0x1b6    ld s4,0(a5)
    0x84015d5a    0x1ba    beqz s4,ffffffff840163aa <decodeRISCVMMUInvocation+0x80a>
    0x84015d5e    0x1be    slli s1,s1,0x2
    0x84015d60    0x1c0    lui a5,0xf8000
    0x84015d64    0x1c4    srli a5,a5,0x19
    0x84015d66    0x1c6    and a5,a5,s1
    0x84015d68    0x1c8    srli s1,s1,0x26
    0x84015d6a    0x1ca    andi s1,s1,1
    0x84015d6c    0x1cc    beqz s1,ffffffff84015d74 <decodeRISCVMMUInvocation+0x1d4>
    0x84015d6e    0x1ce    li a4,-1
    0x84015d70    0x1d0    slli a4,a4,0x27
    0x84015d72    0x1d2    or a5,a5,a4
    0x84015d74    0x1d4    bne s4,a5,ffffffff840163c6 <decodeRISCVMMUInvocation+0x826>
    0x84015d78    0x1d8    mv a4,s4
    0x84015d7a    0x1da    mv a5,s2
    0x84015d7c    0x1dc    li a1,512
    0x84015d80    0x1e0    j ffffffff840163e2 <decodeRISCVMMUInvocation+0x842>
    0x84015d82    0x1e2    mv a0,a3
    0x84015d84    0x1e4    jal ra,ffffffff8401207a <isFinalCapability>
    0x84015d88    0x1e8    beqz a0,ffffffff84015dd4 <decodeRISCVMMUInvocation+0x234>
    0x84015d8a    0x1ea    srli a5,s1,0x27
    0x84015d8e    0x1ee    andi a5,a5,1
    0x84015d90    0x1f0    beqz a5,ffffffff84015db8 <decodeRISCVMMUInvocation+0x218>
    0x84015d92    0x1f2    srli a0,s4,0x30
    0x84015d96    0x1f6    jal ra,ffffffff84010184 <findVSpaceForASID>
    0x84015d9a    0x1fa    sd a0,64(sp)          ; stack access
    0x84015d9c    0x1fc    sd a1,72(sp)          ; stack access
    0x84015d9e    0x1fe    srli a5,s4,0x9
    0x84015da2    0x202    slli a4,a5,0x19
    0x84015da6    0x206    srli a4,a4,0x19
    0x84015da8    0x208    srli a5,a5,0x26
    0x84015daa    0x20a    andi a5,a5,1
    0x84015dac    0x20c    beqz a5,ffffffff84015db4 <decodeRISCVMMUInvocation+0x214>
    0x84015dae    0x20e    li a5,-1
    0x84015db0    0x210    slli a5,a5,0x27
    0x84015db2    0x212    or a4,a4,a5
    0x84015db4    0x214    ld a5,64(sp)          ; stack access
    0x84015db6    0x216    beqz a5,ffffffff84015de0 <decodeRISCVMMUInvocation+0x240>
    0x84015db8    0x218    li a1,2
    0x84015dba    0x21a    auipc a0,0x15
    0x84015dbe    0x21e    ld a0,-1410(a0) # ffffffff8402a838 <ksCurThread>
    0x84015dc2    0x222    jal ra,ffffffff840124f6 <setThreadState>
    0x84015dc6    0x226    mv a2,s2
    0x84015dc8    0x228    mv a0,s1
    0x84015dca    0x22a    mv a1,s4
    0x84015dcc    0x22c    jal ra,ffffffff84015b34 <performPageTableInvocationUnmap>
    0x84015dd0    0x230    mv s0,a0
    0x84015dd2    0x232    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015dd4    0x234    li a5,9
    0x84015dd6    0x236    auipc a4,0x3
    0x84015dda    0x23a    sd a5,-1798(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015dde    0x23e    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015de0    0x240    ld a5,72(sp)          ; stack access
    0x84015de2    0x242    bne a5,a4,ffffffff84015db8 <decodeRISCVMMUInvocation+0x218>
    0x84015de6    0x246    li a5,9
    0x84015de8    0x248    auipc a4,0x3
    0x84015dec    0x24c    sd a5,-1816(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015df0    0x250    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015df2    0x252    li a5,3
    0x84015df4    0x254    auipc a4,0x3
    0x84015df8    0x258    sd a5,-1828(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015dfc    0x25c    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015dfe    0x25e    li a5,7
    0x84015e00    0x260    auipc a4,0x3
    0x84015e04    0x264    sd a5,-1840(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015e08    0x268    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015e0a    0x26a    auipc a5,0x2
    0x84015e0e    0x26e    addi a5,a5,502 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e12    0x272    li a4,2
    0x84015e14    0x274    sd a4,1744(a5)
    0x84015e18    0x278    sd zero,1704(a5)
    0x84015e1c    0x27c    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015e1e    0x27e    auipc a5,0x2
    0x84015e22    0x282    addi a5,a5,482 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e26    0x286    li a4,2
    0x84015e28    0x288    sd a4,1744(a5)
    0x84015e2c    0x28c    li a4,1
    0x84015e2e    0x28e    sd a4,1704(a5)
    0x84015e32    0x292    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015e34    0x294    auipc a5,0x2
    0x84015e38    0x298    addi a5,a5,460 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e3c    0x29c    li a4,1
    0x84015e3e    0x29e    sd a4,1744(a5)
    0x84015e42    0x2a2    sd zero,1696(a5)
    0x84015e46    0x2a6    mv s0,s5
    0x84015e48    0x2a8    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015e4a    0x2aa    auipc a5,0x2
    0x84015e4e    0x2ae    addi a5,a5,438 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e52    0x2b2    li a4,6
    0x84015e54    0x2b4    sd a4,1744(a5)
    0x84015e58    0x2b8    sd zero,1736(a5)
    0x84015e5c    0x2bc    mv s0,s5
    0x84015e5e    0x2be    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015e60    0x2c0    auipc a5,0x2
    0x84015e64    0x2c4    addi a5,a5,416 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e68    0x2c8    li a4,2
    0x84015e6a    0x2ca    sd a4,1744(a5)
    0x84015e6e    0x2ce    li a4,1
    0x84015e70    0x2d0    sd a4,1704(a5)
    0x84015e74    0x2d4    mv s0,s5
    0x84015e76    0x2d6    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015e78    0x2d8    li a5,8
    0x84015e7a    0x2da    auipc a4,0x3
    0x84015e7e    0x2de    sd a5,-1962(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015e82    0x2e2    mv s0,s5
    0x84015e84    0x2e4    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015e86    0x2e6    ld a5,0(sp)           ; stack access
    0x84015e88    0x2e8    sd a5,32(sp)          ; stack access
    0x84015e8a    0x2ea    ld s4,8(sp)           ; stack access
    0x84015e8c    0x2ec    sd s4,40(sp)          ; stack access
    0x84015e8e    0x2ee    li a5,33
    0x84015e92    0x2f2    beq a0,a5,ffffffff84016176 <decodeRISCVMMUInvocation+0x5d6>
    0x84015e96    0x2f6    li a5,34
    0x84015e9a    0x2fa    beq a0,a5,ffffffff84016192 <decodeRISCVMMUInvocation+0x5f2>
    0x84015e9e    0x2fe    li a5,32
    0x84015ea2    0x302    beq a0,a5,ffffffff84015eb4 <decodeRISCVMMUInvocation+0x314>
    0x84015ea6    0x306    li a5,3
    0x84015ea8    0x308    auipc a4,0x3
    0x84015eac    0x30c    sd a5,-2008(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015eb0    0x310    li s0,3
    0x84015eb2    0x312    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015eb4    0x314    li a5,2
    0x84015eb6    0x316    bgeu a5,a1,ffffffff84015f40 <decodeRISCVMMUInvocation+0x3a0>
    0x84015eba    0x31a    auipc a4,0x3
    0x84015ebe    0x31e    ld a4,-1578(a4) # ffffffff84018890 <current_extra_caps>
    0x84015ec2    0x322    beqz a4,ffffffff84015f40 <decodeRISCVMMUInvocation+0x3a0>
    0x84015ec4    0x324    ld a5,0(a4)
    0x84015ec6    0x326    srli s8,a5,0x3b
    0x84015eca    0x32a    li a3,3
    0x84015ecc    0x32c    bne s8,a3,ffffffff84015f4e <decodeRISCVMMUInvocation+0x3ae>
    0x84015ed0    0x330    srli a5,a5,0x27
    0x84015ed2    0x332    andi a5,a5,1
    0x84015ed4    0x334    beqz a5,ffffffff84015f4e <decodeRISCVMMUInvocation+0x3ae>
    0x84015ed6    0x336    ld s7,8(a4)
    0x84015eda    0x33a    srli a5,s7,0x9
    0x84015ede    0x33e    slli s0,a5,0x19
    0x84015ee2    0x342    srli s0,s0,0x19
    0x84015ee4    0x344    srli a5,a5,0x26
    0x84015ee6    0x346    andi a5,a5,1
    0x84015ee8    0x348    beqz a5,ffffffff84015ef0 <decodeRISCVMMUInvocation+0x350>
    0x84015eea    0x34a    li a5,-1
    0x84015eec    0x34c    slli a5,a5,0x27
    0x84015eee    0x34e    or s0,s0,a5
    0x84015ef0    0x350    mv a1,s3
    0x84015ef2    0x352    li a0,0
    0x84015ef4    0x354    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015ef8    0x358    mv s5,a0
    0x84015efa    0x35a    mv a1,s3
    0x84015efc    0x35c    li a0,1
    0x84015efe    0x35e    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015f02    0x362    mv s9,a0
    0x84015f04    0x364    mv a1,s3
    0x84015f06    0x366    li a0,2
    0x84015f08    0x368    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015f0c    0x36c    mv s6,a0
    0x84015f0e    0x36e    mv s3,s0
    0x84015f10    0x370    srli s11,s7,0x30
    0x84015f14    0x374    mv a0,s11
    0x84015f16    0x376    jal ra,ffffffff84010184 <findVSpaceForASID>
    0x84015f1a    0x37a    sd a0,48(sp)          ; stack access
    0x84015f1c    0x37c    sd a1,56(sp)          ; stack access
    0x84015f1e    0x37e    bnez a0,ffffffff84015f66 <decodeRISCVMMUInvocation+0x3c6>
    0x84015f20    0x380    ld a5,56(sp)          ; stack access
    0x84015f22    0x382    bne s0,a5,ffffffff84015f7c <decodeRISCVMMUInvocation+0x3dc>
    0x84015f26    0x386    srli a5,s1,0x39
    0x84015f2a    0x38a    andi a5,a5,3
    0x84015f2c    0x38c    li a4,1
    0x84015f2e    0x38e    beq a5,a4,ffffffff84015f94 <decodeRISCVMMUInvocation+0x3f4>
    0x84015f32    0x392    li a4,2
    0x84015f34    0x394    beq a5,a4,ffffffff84015f98 <decodeRISCVMMUInvocation+0x3f8>
    0x84015f38    0x398    beqz a5,ffffffff84016096 <decodeRISCVMMUInvocation+0x4f6>
    0x84015f3c    0x39c    jal ra,ffffffff8401045e <halt>
    0x84015f40    0x3a0    li a5,7
    0x84015f42    0x3a2    auipc a4,0x2
    0x84015f46    0x3a6    sd a5,1934(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015f4a    0x3aa    li s0,3
    0x84015f4c    0x3ac    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015f4e    0x3ae    auipc a5,0x2
    0x84015f52    0x3b2    addi a5,a5,178 # ffffffff84018000 <riscvKSASIDTable>
    0x84015f56    0x3b6    li a4,2
    0x84015f58    0x3b8    sd a4,1744(a5)
    0x84015f5c    0x3bc    li a4,1
    0x84015f5e    0x3be    sd a4,1704(a5)
    0x84015f62    0x3c2    li s0,3
    0x84015f64    0x3c4    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015f66    0x3c6    auipc a5,0x2
    0x84015f6a    0x3ca    addi a5,a5,154 # ffffffff84018000 <riscvKSASIDTable>
    0x84015f6e    0x3ce    li a4,6
    0x84015f70    0x3d0    sd a4,1744(a5)
    0x84015f74    0x3d4    sd zero,1736(a5)
    0x84015f78    0x3d8    mv s0,s8
    0x84015f7a    0x3da    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015f7c    0x3dc    auipc a5,0x2
    0x84015f80    0x3e0    addi a5,a5,132 # ffffffff84018000 <riscvKSASIDTable>
    0x84015f84    0x3e4    li a4,2
    0x84015f86    0x3e6    sd a4,1744(a5)
    0x84015f8a    0x3ea    li a4,1
    0x84015f8c    0x3ec    sd a4,1704(a5)
    0x84015f90    0x3f0    mv s0,s8
    0x84015f92    0x3f2    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84015f94    0x3f4    li s10,21
    0x84015f96    0x3f6    j ffffffff84015f9a <decodeRISCVMMUInvocation+0x3fa>
    0x84015f98    0x3f8    li s10,30
    0x84015f9a    0x3fa    sext.w a3,s10
    0x84015f9e    0x3fe    addi a4,s5,-1
    0x84015fa2    0x402    li a5,1
    0x84015fa4    0x404    sll a5,a5,s10
    0x84015fa8    0x408    add a4,a4,a5
    0x84015faa    0x40a    lui a5,0xfefff
    0x84015fae    0x40e    slli a5,a5,0xe
    0x84015fb0    0x410    srli a5,a5,0x1a
    0x84015fb2    0x412    bltu a5,a4,ffffffff8401609a <decodeRISCVMMUInvocation+0x4fa>
    0x84015fb6    0x416    li s0,-1
    0x84015fb8    0x418    sll s0,s0,a3
    0x84015fbc    0x41c    not s0,s0
    0x84015fc0    0x420    and s0,s0,s5
    0x84015fc4    0x424    bnez s0,ffffffff840160b0 <decodeRISCVMMUInvocation+0x510>
    0x84015fc6    0x426    mv a1,s5
    0x84015fc8    0x428    mv a0,s3
    0x84015fca    0x42a    jal ra,ffffffff84010882 <lookupPTSlot>
    0x84015fce    0x42e    mv s3,a0
    0x84015fd0    0x430    sd a0,64(sp)          ; stack access
    0x84015fd2    0x432    sd a1,72(sp)          ; stack access
    0x84015fd4    0x434    bne a1,s10,ffffffff840160be <decodeRISCVMMUInvocation+0x51e>
    0x84015fd8    0x438    srli a5,s4,0x30
    0x84015fdc    0x43c    bnez a5,ffffffff840160e8 <decodeRISCVMMUInvocation+0x548>
    0x84015fe0    0x440    ld a5,0(a0)
    0x84015fe2    0x442    andi a5,a5,1
    0x84015fe4    0x444    bnez a5,ffffffff84016160 <decodeRISCVMMUInvocation+0x5c0>
    0x84015fe8    0x448    srli a0,s1,0x37
    0x84015fec    0x44c    mv a1,s9
    0x84015fee    0x44e    andi a0,a0,3
    0x84015ff0    0x450    jal ra,ffffffff84010c62 <maskVMRights>
    0x84015ff4    0x454    srli a4,s4,0x9
    0x84015ff8    0x458    slli a5,a4,0x19
    0x84015ffc    0x45c    srli a5,a5,0x19
    0x84015ffe    0x45e    srli a4,a4,0x26
    0x84016000    0x460    andi a4,a4,1
    0x84016002    0x462    beqz a4,ffffffff8401600a <decodeRISCVMMUInvocation+0x46a>
    0x84016004    0x464    li a4,-1
    0x84016006    0x466    slli a4,a4,0x27
    0x84016008    0x468    or a5,a5,a4
    0x8401600a    0x46a    li a1,1
    0x8401600c    0x46c    slli a4,a1,0x26
    0x84016010    0x470    add a5,a5,a4
    0x84016012    0x472    li a4,-1
    0x84016014    0x474    srli a3,a4,0x10
    0x84016018    0x478    and s4,s4,a3
    0x8401601c    0x47c    slli a3,a4,0x30
    0x84016020    0x480    and s7,s7,a3
    0x84016024    0x484    or s4,s4,s7
    0x84016028    0x488    slli a3,a4,0x27
    0x8401602c    0x48c    and s1,s1,a3
    0x8401602e    0x48e    srli a4,a4,0x19
    0x84016030    0x490    and s5,s5,a4
    0x84016034    0x494    or s5,s1,s5
    0x84016038    0x498    andi s6,s6,1
    0x8401603c    0x49c    xori a2,s6,1
    0x84016040    0x4a0    addi a3,a0,-3
    0x84016044    0x4a4    seqz a3,a3
    0x84016048    0x4a8    addi a4,a0,-1
    0x8401604c    0x4ac    snez a4,a4
    0x84016050    0x4b0    beq a0,a1,ffffffff8401616e <decodeRISCVMMUInvocation+0x5ce>
    0x84016054    0x4b4    srli s1,a5,0x2
    0x84016058    0x4b8    lui a5,0xfff00
    0x8401605c    0x4bc    srli a5,a5,0xa
    0x8401605e    0x4be    and s1,s1,a5
    0x84016060    0x4c0    slli a5,a2,0x3
    0x84016064    0x4c4    or s1,s1,a5
    0x84016066    0x4c6    slli a5,a3,0x2
    0x8401606a    0x4ca    or s1,s1,a5
    0x8401606c    0x4cc    slli a5,a4,0x1
    0x84016070    0x4d0    or s1,s1,a5
    0x84016072    0x4d2    ori s1,s1,209
    0x84016076    0x4d6    li a1,2
    0x84016078    0x4d8    auipc a0,0x14
    0x8401607c    0x4dc    ld a0,1984(a0) # ffffffff8402a838 <ksCurThread>
    0x84016080    0x4e0    jal ra,ffffffff840124f6 <setThreadState>
    0x84016084    0x4e4    sd s5,0(s2)
    0x84016088    0x4e8    sd s4,8(s2)
    0x8401608c    0x4ec    sd s1,0(s3)
    0x84016090    0x4f0    sfence.vma
    0x84016094    0x4f4    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016096    0x4f6    li s10,12
    0x84016098    0x4f8    j ffffffff84015f9a <decodeRISCVMMUInvocation+0x3fa>
    0x8401609a    0x4fa    auipc a5,0x2
    0x8401609e    0x4fe    addi a5,a5,-154 # ffffffff84018000 <riscvKSASIDTable>
    0x840160a2    0x502    li a4,1
    0x840160a4    0x504    sd a4,1744(a5)
    0x840160a8    0x508    sd zero,1696(a5)
    0x840160ac    0x50c    mv s0,s8
    0x840160ae    0x50e    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840160b0    0x510    li a5,5
    0x840160b2    0x512    auipc a4,0x2
    0x840160b6    0x516    sd a5,1566(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840160ba    0x51a    mv s0,s8
    0x840160bc    0x51c    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840160be    0x51e    auipc a4,0x2
    0x840160c2    0x522    addi a4,a4,-190 # ffffffff84018000 <riscvKSASIDTable>
    0x840160c6    0x526    slli a5,a1,0x2
    0x840160ca    0x52a    andi a5,a5,508
    0x840160ce    0x52e    ori a5,a5,1
    0x840160d2    0x532    sd a5,1024(a4)
    0x840160d6    0x536    sd zero,1032(a4)
    0x840160da    0x53a    li a5,6
    0x840160dc    0x53c    sd a5,1744(a4)
    0x840160e0    0x540    sd zero,1736(a4)
    0x840160e4    0x544    mv s0,s8
    0x840160e6    0x546    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840160e8    0x548    beq s11,a5,ffffffff84016104 <decodeRISCVMMUInvocation+0x564>
    0x840160ec    0x54c    auipc a5,0x2
    0x840160f0    0x550    addi a5,a5,-236 # ffffffff84018000 <riscvKSASIDTable>
    0x840160f4    0x554    li a4,2
    0x840160f6    0x556    sd a4,1744(a5)
    0x840160fa    0x55a    li a4,1
    0x840160fc    0x55c    sd a4,1704(a5)
    0x84016100    0x560    mv s0,s8
    0x84016102    0x562    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016104    0x564    slli a5,s1,0x19
    0x84016108    0x568    srli a5,a5,0x19
    0x8401610a    0x56a    srli a4,s1,0x26
    0x8401610e    0x56e    andi a4,a4,1
    0x84016110    0x570    beqz a4,ffffffff84016118 <decodeRISCVMMUInvocation+0x578>
    0x84016112    0x572    li a4,-1
    0x84016114    0x574    slli a4,a4,0x27
    0x84016116    0x576    or a5,a5,a4
    0x84016118    0x578    bne s5,a5,ffffffff8401614a <decodeRISCVMMUInvocation+0x5aa>
    0x8401611c    0x57c    ld a4,0(s3)
    0x84016120    0x580    andi a5,a4,1
    0x84016124    0x584    beqz a5,ffffffff84015fe8 <decodeRISCVMMUInvocation+0x448>
    0x84016128    0x588    srli a5,a4,0x1
    0x8401612c    0x58c    srli a3,a4,0x2
    0x84016130    0x590    or a5,a5,a3
    0x84016132    0x592    srli a4,a4,0x3
    0x84016134    0x594    or a5,a5,a4
    0x84016136    0x596    andi a5,a5,1
    0x84016138    0x598    bnez a5,ffffffff84015fe8 <decodeRISCVMMUInvocation+0x448>
    0x8401613c    0x59c    li a5,8
    0x8401613e    0x59e    auipc a4,0x2
    0x84016142    0x5a2    sd a5,1426(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016146    0x5a6    mv s0,s8
    0x84016148    0x5a8    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x8401614a    0x5aa    auipc a5,0x2
    0x8401614e    0x5ae    addi a5,a5,-330 # ffffffff84018000 <riscvKSASIDTable>
    0x84016152    0x5b2    li a4,1
    0x84016154    0x5b4    sd a4,1744(a5)
    0x84016158    0x5b8    sd zero,1696(a5)
    0x8401615c    0x5bc    mv s0,s8
    0x8401615e    0x5be    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016160    0x5c0    li a5,8
    0x84016162    0x5c2    auipc a4,0x2
    0x84016166    0x5c6    sd a5,1390(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401616a    0x5ca    mv s0,s8
    0x8401616c    0x5cc    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x8401616e    0x5ce    beqz s6,ffffffff84016054 <decodeRISCVMMUInvocation+0x4b4>
    0x84016172    0x5d2    mv s1,s0
    0x84016174    0x5d4    j ffffffff84016076 <decodeRISCVMMUInvocation+0x4d6>
    0x84016176    0x5d6    li a1,2
    0x84016178    0x5d8    auipc a0,0x14
    0x8401617c    0x5dc    ld a0,1728(a0) # ffffffff8402a838 <ksCurThread>
    0x84016180    0x5e0    jal ra,ffffffff840124f6 <setThreadState>
    0x84016184    0x5e4    mv a2,s2
    0x84016186    0x5e6    mv a0,s1
    0x84016188    0x5e8    mv a1,s4
    0x8401618a    0x5ea    jal ra,ffffffff84010cba <performPageInvocationUnmap>
    0x8401618e    0x5ee    mv s0,a0
    0x84016190    0x5f0    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016192    0x5f2    li a1,2
    0x84016194    0x5f4    auipc a0,0x14
    0x84016198    0x5f8    ld a0,1700(a0) # ffffffff8402a838 <ksCurThread>
    0x8401619c    0x5fc    jal ra,ffffffff840124f6 <setThreadState>
    0x840161a0    0x600    srli s4,s4,0x9
    0x840161a4    0x604    slli a5,s4,0x19
    0x840161a8    0x608    srli a5,a5,0x19
    0x840161aa    0x60a    srli s4,s4,0x26
    0x840161ae    0x60e    andi s4,s4,1
    0x840161b2    0x612    beqz s4,ffffffff840161bc <decodeRISCVMMUInvocation+0x61c>
    0x840161b6    0x616    li a4,-1
    0x840161b8    0x618    slli a4,a4,0x27
    0x840161ba    0x61a    or a5,a5,a4
    0x840161bc    0x61c    auipc a4,0x14
    0x840161c0    0x620    ld a4,1660(a4) # ffffffff8402a838 <ksCurThread>
    0x840161c4    0x624    li a3,1
    0x840161c6    0x626    slli a2,a3,0x26
    0x840161ca    0x62a    add a5,a5,a2
    0x840161cc    0x62c    sd a5,88(a4)
    0x840161ce    0x62e    sd a3,80(a4)
    0x840161d0    0x630    li s0,0
    0x840161d2    0x632    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840161d4    0x634    li a5,35
    0x840161d8    0x638    beq a0,a5,ffffffff84016208 <decodeRISCVMMUInvocation+0x668>
    0x840161dc    0x63c    li a5,3
    0x840161de    0x63e    auipc a4,0x2
    0x840161e2    0x642    sd a5,1266(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840161e6    0x646    li s0,3
    0x840161e8    0x648    mv a0,s0
    0x840161ea    0x64a    ld ra,200(sp)         ; stack access
    0x840161ec    0x64c    ld s0,192(sp)         ; stack access
    0x840161ee    0x64e    ld s1,184(sp)         ; stack access
    0x840161f0    0x650    ld s2,176(sp)         ; stack access
    0x840161f2    0x652    ld s3,168(sp)         ; stack access
    0x840161f4    0x654    ld s4,160(sp)         ; stack access
    0x840161f6    0x656    ld s5,152(sp)         ; stack access
    0x840161f8    0x658    ld s6,144(sp)         ; stack access
    0x840161fa    0x65a    ld s7,136(sp)         ; stack access
    0x840161fc    0x65c    ld s8,128(sp)         ; stack access
    0x840161fe    0x65e    ld s9,120(sp)         ; stack access
    0x84016200    0x660    ld s10,112(sp)        ; stack access
    0x84016202    0x662    ld s11,104(sp)        ; stack access
    0x84016204    0x664    addi sp,sp,208
    0x84016206    0x666    ret
    0x84016208    0x668    li a5,1
    0x8401620a    0x66a    bgeu a5,a1,ffffffff84016270 <decodeRISCVMMUInvocation+0x6d0>
    0x8401620e    0x66e    auipc s2,0x2
    0x84016212    0x672    ld s2,1666(s2) # ffffffff84018890 <current_extra_caps>
    0x84016216    0x676    beqz s2,ffffffff84016270 <decodeRISCVMMUInvocation+0x6d0>
    0x8401621a    0x67a    auipc s0,0x2
    0x8401621e    0x67e    ld s0,1662(s0) # ffffffff84018898 <current_extra_caps+0x8>
    0x84016222    0x682    beqz s0,ffffffff84016270 <decodeRISCVMMUInvocation+0x6d0>
    0x84016224    0x684    mv a1,a6
    0x84016226    0x686    li a0,0
    0x84016228    0x688    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401622c    0x68c    mv s4,a0
    0x8401622e    0x68e    mv a1,s3
    0x84016230    0x690    li a0,1
    0x84016232    0x692    jal ra,ffffffff8401012a <getSyscallArg>
    0x84016236    0x696    mv s3,a0
    0x84016238    0x698    ld s5,0(s2)
    0x8401623c    0x69c    ld a2,8(s2)
    0x84016240    0x6a0    ld a5,0(s0)
    0x84016242    0x6a2    sd a5,48(sp)          ; stack access
    0x84016244    0x6a4    ld a5,8(s0)
    0x84016246    0x6a6    sd a5,56(sp)          ; stack access
    0x84016248    0x6a8    auipc a5,0x2
    0x8401624c    0x6ac    addi a5,a5,-584 # ffffffff84018000 <riscvKSASIDTable>
    0x84016250    0x6b0    li s1,0
    0x84016252    0x6b2    li a3,128
    0x84016256    0x6b6    ld a4,0(a5)
    0x84016258    0x6b8    beqz a4,ffffffff8401627e <decodeRISCVMMUInvocation+0x6de>
    0x8401625a    0x6ba    addi s1,s1,1
    0x8401625c    0x6bc    addi a5,a5,8
    0x8401625e    0x6be    bne s1,a3,ffffffff84016256 <decodeRISCVMMUInvocation+0x6b6>
    0x84016262    0x6c2    li a5,8
    0x84016264    0x6c4    auipc a4,0x2
    0x84016268    0x6c8    sd a5,1132(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401626c    0x6cc    li s0,3
    0x8401626e    0x6ce    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016270    0x6d0    li a5,7
    0x84016272    0x6d2    auipc a4,0x2
    0x84016276    0x6d6    sd a5,1118(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401627a    0x6da    li s0,3
    0x8401627c    0x6dc    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x8401627e    0x6de    li a5,128
    0x84016282    0x6e2    beq s1,a5,ffffffff84016262 <decodeRISCVMMUInvocation+0x6c2>
    0x84016286    0x6e6    srli a5,s5,0x3b
    0x8401628a    0x6ea    li a4,2
    0x8401628c    0x6ec    bne a5,a4,ffffffff840162a2 <decodeRISCVMMUInvocation+0x702>
    0x84016290    0x6f0    andi a5,a2,63
    0x84016294    0x6f4    li a4,12
    0x84016296    0x6f6    bne a5,a4,ffffffff840162a2 <decodeRISCVMMUInvocation+0x702>
    0x8401629a    0x6fa    srli a5,a2,0x6
    0x8401629e    0x6fe    andi a5,a5,1
    0x840162a0    0x700    beqz a5,ffffffff840162ba <decodeRISCVMMUInvocation+0x71a>
    0x840162a2    0x702    auipc a5,0x2
    0x840162a6    0x706    addi a5,a5,-674 # ffffffff84018000 <riscvKSASIDTable>
    0x840162aa    0x70a    li a4,2
    0x840162ac    0x70c    sd a4,1744(a5)
    0x840162b0    0x710    li a4,1
    0x840162b2    0x712    sd a4,1704(a5)
    0x840162b6    0x716    li s0,3
    0x840162b8    0x718    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840162ba    0x71a    mv a0,s2
    0x840162bc    0x71c    jal ra,ffffffff84011f6a <ensureNoChildren>
    0x840162c0    0x720    mv s0,a0
    0x840162c2    0x722    bnez a0,ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840162c4    0x724    slli s6,s5,0x19
    0x840162c8    0x728    srli s6,s6,0x19
    0x840162cc    0x72c    srli a5,s5,0x26
    0x840162d0    0x730    andi a5,a5,1
    0x840162d2    0x732    beqz a5,ffffffff840162dc <decodeRISCVMMUInvocation+0x73c>
    0x840162d4    0x734    li a5,-1
    0x840162d6    0x736    slli a5,a5,0x27
    0x840162d8    0x738    or s6,s6,a5
    0x840162dc    0x73c    mv a3,s3
    0x840162de    0x73e    mv a2,s4
    0x840162e0    0x740    ld a0,48(sp)          ; stack access
    0x840162e2    0x742    ld a1,56(sp)          ; stack access
    0x840162e4    0x744    jal ra,ffffffff840114a6 <lookupTargetSlot>
    0x840162e8    0x748    sd a0,64(sp)          ; stack access
    0x840162ea    0x74a    sd a1,72(sp)          ; stack access
    0x840162ec    0x74c    mv s0,a0
    0x840162ee    0x74e    bnez a0,ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840162f2    0x752    mv s3,a1
    0x840162f4    0x754    mv a0,a1
    0x840162f6    0x756    jal ra,ffffffff840118cc <ensureEmptySlot>
    0x840162fa    0x75a    mv s0,a0
    0x840162fc    0x75c    bnez a0,ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016300    0x760    li a1,2
    0x84016302    0x762    auipc a0,0x14
    0x84016306    0x766    ld a0,1334(a0) # ffffffff8402a838 <ksCurThread>
    0x8401630a    0x76a    jal ra,ffffffff840124f6 <setThreadState>
    0x8401630e    0x76e    ld a5,8(s2)
    0x84016312    0x772    andi a4,a5,63
    0x84016316    0x776    addiw a3,a4,-4
    0x8401631a    0x77a    lui a4,0x2000
    0x8401631e    0x77e    sll a4,a4,a3
    0x84016322    0x782    slli a5,a5,0x27
    0x84016324    0x784    srli a5,a5,0x27
    0x84016326    0x786    or a5,a5,a4
    0x84016328    0x788    sd a5,8(s2)
    0x8401632c    0x78c    lui a1,0x1
    0x8401632e    0x78e    mv a0,s6
    0x84016330    0x790    jal ra,ffffffff84015b22 <memzero>
    0x84016334    0x794    slli a5,s1,0x34
    0x84016338    0x798    lui a4,0xffff
    0x8401633c    0x79c    slli a4,a4,0x1f
    0x8401633e    0x79e    and a5,a5,a4
    0x84016340    0x7a0    srli a4,s6,0x2
    0x84016344    0x7a4    li s4,-1
    0x84016346    0x7a6    srli a3,s4,0x1b
    0x8401634a    0x7aa    and a4,a4,a3
    0x8401634c    0x7ac    or a5,a5,a4
    0x8401634e    0x7ae    mv a3,s3
    0x84016350    0x7b0    mv a2,s2
    0x84016352    0x7b2    li a0,13
    0x84016354    0x7b4    slli a0,a0,0x3b
    0x84016356    0x7b6    or a0,a0,a5
    0x84016358    0x7b8    li a1,0
    0x8401635a    0x7ba    jal ra,ffffffff84011576 <cteInsert>
    0x8401635e    0x7be    srli a5,s4,0x9
    0x84016362    0x7c2    and a5,a5,s1
    0x84016364    0x7c4    slli a5,a5,0x3
    0x84016366    0x7c6    auipc a4,0x2
    0x8401636a    0x7ca    addi a4,a4,-870 # ffffffff84018000 <riscvKSASIDTable>
    0x8401636e    0x7ce    add a5,a5,a4
    0x84016370    0x7d0    sd s6,0(a5)
    0x84016374    0x7d4    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016376    0x7d6    li a5,3
    0x84016378    0x7d8    auipc a4,0x2
    0x8401637c    0x7dc    sd a5,856(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016380    0x7e0    li s0,3
    0x84016382    0x7e2    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016384    0x7e4    li a5,7
    0x84016386    0x7e6    auipc a4,0x2
    0x8401638a    0x7ea    sd a5,842(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401638e    0x7ee    li s0,3
    0x84016390    0x7f0    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016392    0x7f2    auipc a5,0x2
    0x84016396    0x7f6    addi a5,a5,-914 # ffffffff84018000 <riscvKSASIDTable>
    0x8401639a    0x7fa    li a4,2
    0x8401639c    0x7fc    sd a4,1744(a5)
    0x840163a0    0x800    li a4,1
    0x840163a2    0x802    sd a4,1704(a5)
    0x840163a6    0x806    li s0,3
    0x840163a8    0x808    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840163aa    0x80a    auipc a5,0x2
    0x840163ae    0x80e    addi a5,a5,-938 # ffffffff84018000 <riscvKSASIDTable>
    0x840163b2    0x812    li a4,6
    0x840163b4    0x814    sd a4,1744(a5)
    0x840163b8    0x818    sd zero,1736(a5)
    0x840163bc    0x81c    sd zero,1024(a5)
    0x840163c0    0x820    sd zero,1032(a5)
    0x840163c4    0x824    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840163c6    0x826    auipc a5,0x2
    0x840163ca    0x82a    addi a5,a5,-966 # ffffffff84018000 <riscvKSASIDTable>
    0x840163ce    0x82e    li a4,2
    0x840163d0    0x830    sd a4,1744(a5)
    0x840163d4    0x834    sd zero,1704(a5)
    0x840163d8    0x838    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x840163da    0x83a    addi a5,a5,1
    0x840163dc    0x83c    addi a4,a4,8
    0x840163de    0x83e    beq a5,a1,ffffffff8401645a <decodeRISCVMMUInvocation+0x8ba>
    0x840163e2    0x842    add a3,a5,a2
    0x840163e6    0x846    beqz a3,ffffffff840163da <decodeRISCVMMUInvocation+0x83a>
    0x840163e8    0x848    ld a3,0(a4)
    0x840163ea    0x84a    bnez a3,ffffffff840163da <decodeRISCVMMUInvocation+0x83a>
    0x840163ec    0x84c    li a4,512
    0x840163f0    0x850    beq a5,a4,ffffffff8401645a <decodeRISCVMMUInvocation+0x8ba>
    0x840163f4    0x854    add s0,a5,a2
    0x840163f8    0x858    li a1,2
    0x840163fa    0x85a    auipc a0,0x14
    0x840163fe    0x85e    ld a0,1086(a0) # ffffffff8402a838 <ksCurThread>
    0x84016402    0x862    jal ra,ffffffff840124f6 <setThreadState>
    0x84016406    0x866    ld a3,0(s3)
    0x8401640a    0x86a    ld a5,8(s3)
    0x8401640e    0x86e    srli a4,a5,0x9
    0x84016412    0x872    slli s1,a4,0x19
    0x84016416    0x876    srli s1,s1,0x19
    0x84016418    0x878    srli a4,a4,0x26
    0x8401641a    0x87a    andi a4,a4,1
    0x8401641c    0x87c    beqz a4,ffffffff84016424 <decodeRISCVMMUInvocation+0x884>
    0x8401641e    0x87e    li a4,-1
    0x84016420    0x880    slli a4,a4,0x27
    0x84016422    0x882    or s1,s1,a4
    0x84016424    0x884    li a2,-1
    0x84016426    0x886    slli a4,a2,0x28
    0x8401642a    0x88a    and a4,a4,a3
    0x8401642c    0x88c    li a3,1
    0x8401642e    0x88e    slli a3,a3,0x27
    0x84016430    0x890    or a4,a4,a3
    0x84016432    0x892    sd a4,0(s3)
    0x84016436    0x896    srli a2,a2,0x10
    0x84016438    0x898    and a5,a5,a2
    0x8401643a    0x89a    slli a4,s0,0x30
    0x8401643e    0x89e    or a5,a5,a4
    0x84016440    0x8a0    sd a5,8(s3)
    0x84016444    0x8a4    mv a0,s1
    0x84016446    0x8a6    jal ra,ffffffff8401067c <copyGlobalMappings>
    0x8401644a    0x8aa    andi a5,s0,511
    0x8401644e    0x8ae    slli a5,a5,0x3
    0x84016450    0x8b0    add s4,s4,a5
    0x84016452    0x8b2    sd s1,0(s4)
    0x84016456    0x8b6    mv s0,s2
    0x84016458    0x8b8    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x8401645a    0x8ba    li a5,8
    0x8401645c    0x8bc    auipc a4,0x2
    0x84016460    0x8c0    sd a5,628(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016464    0x8c4    j ffffffff840161e8 <decodeRISCVMMUInvocation+0x648>
    0x84016466    0x8c6    jal ra,ffffffff8401045e <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
768 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1107 nodes.

Section decodeTCBInvocation (269 of 271)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 171 instructions.


Stack analysis
---------------

30 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x840156ec      0x0    addi sp,sp,-48
    0x840156ee      0x2    sd ra,40(sp)          ; stack access
    0x840156f0      0x4    sd s0,32(sp)          ; stack access
    0x840156f2      0x6    sd s1,24(sp)          ; stack access
    0x840156f4      0x8    sd a2,0(sp)           ; stack access
    0x840156f6      0xa    sd a3,8(sp)           ; stack access
    0x840156f8      0xc    mv a3,a4
    0x840156fa      0xe    li a4,9
    0x840156fc     0x10    beq a0,a4,ffffffff8401586c <decodeTCBInvocation+0x180>
    0x84015700     0x14    mv s0,a2
    0x84015702     0x16    bltu a4,a0,ffffffff84015776 <decodeTCBInvocation+0x8a>
    0x84015706     0x1a    li a4,5
    0x84015708     0x1c    beq a0,a4,ffffffff84015850 <decodeTCBInvocation+0x164>
    0x8401570c     0x20    bgeu a4,a0,ffffffff8401572a <decodeTCBInvocation+0x3e>
    0x84015710     0x24    li a5,7
    0x84015712     0x26    beq a0,a5,ffffffff8401585e <decodeTCBInvocation+0x172>
    0x84015716     0x2a    li a5,8
    0x84015718     0x2c    bne a0,a5,ffffffff84015762 <decodeTCBInvocation+0x76>
    0x8401571c     0x30    mv a3,a6
    0x8401571e     0x32    mv a2,a1
    0x84015720     0x34    ld a0,0(sp)           ; stack access
    0x84015722     0x36    ld a1,8(sp)           ; stack access
    0x84015724     0x38    jal ra,ffffffff84014dba <decodeSetSchedParams>
    0x84015728     0x3c    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x8401572a     0x3e    li a4,3
    0x8401572c     0x40    beq a0,a4,ffffffff8401581a <decodeTCBInvocation+0x12e>
    0x84015730     0x44    li a4,4
    0x84015732     0x46    bne a0,a4,ffffffff84015744 <decodeTCBInvocation+0x58>
    0x84015736     0x4a    mv a3,a6
    0x84015738     0x4c    mv a2,a1
    0x8401573a     0x4e    ld a0,0(sp)           ; stack access
    0x8401573c     0x50    ld a1,8(sp)           ; stack access
    0x8401573e     0x52    jal ra,ffffffff840151b4 <decodeCopyRegisters>
    0x84015742     0x56    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x84015744     0x58    li a4,2
    0x84015746     0x5a    bne a0,a4,ffffffff8401589c <decodeTCBInvocation+0x1b0>
    0x8401574a     0x5e    mv a4,a6
    0x8401574c     0x60    mv a3,a5
    0x8401574e     0x62    mv a2,a1
    0x84015750     0x64    ld a0,0(sp)           ; stack access
    0x84015752     0x66    ld a1,8(sp)           ; stack access
    0x84015754     0x68    jal ra,ffffffff84015370 <decodeReadRegisters>
    0x84015758     0x6c    ld ra,40(sp)          ; stack access
    0x8401575a     0x6e    ld s0,32(sp)          ; stack access
    0x8401575c     0x70    ld s1,24(sp)          ; stack access
    0x8401575e     0x72    addi sp,sp,48
    0x84015760     0x74    ret
    0x84015762     0x76    li a5,6
    0x84015764     0x78    bne a0,a5,ffffffff8401589c <decodeTCBInvocation+0x1b0>
    0x84015768     0x7c    mv a3,a6
    0x8401576a     0x7e    mv a2,a1
    0x8401576c     0x80    ld a0,0(sp)           ; stack access
    0x8401576e     0x82    ld a1,8(sp)           ; stack access
    0x84015770     0x84    jal ra,ffffffff84014c0a <decodeSetPriority>
    0x84015774     0x88    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x84015776     0x8a    li a5,13
    0x84015778     0x8c    beq a0,a5,ffffffff8401587a <decodeTCBInvocation+0x18e>
    0x8401577c     0x90    bgeu a5,a0,ffffffff840157d2 <decodeTCBInvocation+0xe6>
    0x84015780     0x94    li a5,14
    0x84015782     0x96    beq a0,a5,ffffffff84015884 <decodeTCBInvocation+0x198>
    0x84015786     0x9a    li a5,15
    0x84015788     0x9c    bne a0,a5,ffffffff8401589c <decodeTCBInvocation+0x1b0>
    0x8401578c     0xa0    beqz a1,ffffffff8401588e <decodeTCBInvocation+0x1a2>
    0x84015790     0xa4    mv a1,a6
    0x84015792     0xa6    li a0,0
    0x84015794     0xa8    jal ra,ffffffff8401012a <getSyscallArg>
    0x84015798     0xac    mv s1,a0
    0x8401579a     0xae    li a1,2
    0x8401579c     0xb0    auipc a0,0x15
    0x840157a0     0xb4    ld a0,156(a0) # ffffffff8402a838 <ksCurThread>
    0x840157a4     0xb8    jal ra,ffffffff840124f6 <setThreadState>
    0x840157a8     0xbc    slli a5,s0,0x19
    0x840157ac     0xc0    srli a5,a5,0x19
    0x840157ae     0xc2    srli s0,s0,0x26
    0x840157b0     0xc4    andi s0,s0,1
    0x840157b2     0xc6    beqz s0,ffffffff840157ba <decodeTCBInvocation+0xce>
    0x840157b4     0xc8    li a4,-1
    0x840157b6     0xca    slli a4,a4,0x27
    0x840157b8     0xcc    or a5,a5,a4
    0x840157ba     0xce    sd s1,24(a5)
    0x840157bc     0xd0    auipc a4,0x15
    0x840157c0     0xd4    ld a4,124(a4) # ffffffff8402a838 <ksCurThread>
    0x840157c4     0xd8    li a0,0
    0x840157c6     0xda    bne a5,a4,ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x840157ca     0xde    jal ra,ffffffff84012490 <rescheduleRequired>
    0x840157ce     0xe2    li a0,0
    0x840157d0     0xe4    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x840157d2     0xe6    li a5,11
    0x840157d4     0xe8    beq a0,a5,ffffffff84015828 <decodeTCBInvocation+0x13c>
    0x840157d8     0xec    li a5,12
    0x840157da     0xee    bne a0,a5,ffffffff84015806 <decodeTCBInvocation+0x11a>
    0x840157de     0xf2    li a1,2
    0x840157e0     0xf4    auipc a0,0x15
    0x840157e4     0xf8    ld a0,88(a0) # ffffffff8402a838 <ksCurThread>
    0x840157e8     0xfc    jal ra,ffffffff840124f6 <setThreadState>
    0x840157ec    0x100    slli a0,s0,0x19
    0x840157f0    0x104    srli a0,a0,0x19
    0x840157f2    0x106    srli s0,s0,0x26
    0x840157f4    0x108    andi s0,s0,1
    0x840157f6    0x10a    beqz s0,ffffffff840157fe <decodeTCBInvocation+0x112>
    0x840157f8    0x10c    li a5,-1
    0x840157fa    0x10e    slli a5,a5,0x27
    0x840157fc    0x110    or a0,a0,a5
    0x840157fe    0x112    jal ra,ffffffff84013aa0 <restart>
    0x84015802    0x116    li a0,0
    0x84015804    0x118    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x84015806    0x11a    li a5,10
    0x84015808    0x11c    bne a0,a5,ffffffff8401589c <decodeTCBInvocation+0x1b0>
    0x8401580c    0x120    mv a4,a6
    0x8401580e    0x122    mv a2,a1
    0x84015810    0x124    ld a0,0(sp)           ; stack access
    0x84015812    0x126    ld a1,8(sp)           ; stack access
    0x84015814    0x128    jal ra,ffffffff84014f7c <decodeSetSpace>
    0x84015818    0x12c    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x8401581a    0x12e    mv a3,a6
    0x8401581c    0x130    mv a2,a1
    0x8401581e    0x132    ld a0,0(sp)           ; stack access
    0x84015820    0x134    ld a1,8(sp)           ; stack access
    0x84015822    0x136    jal ra,ffffffff84015514 <decodeWriteRegisters>
    0x84015826    0x13a    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x84015828    0x13c    li a1,2
    0x8401582a    0x13e    auipc a0,0x15
    0x8401582e    0x142    ld a0,14(a0) # ffffffff8402a838 <ksCurThread>
    0x84015832    0x146    jal ra,ffffffff840124f6 <setThreadState>
    0x84015836    0x14a    slli a0,s0,0x19
    0x8401583a    0x14e    srli a0,a0,0x19
    0x8401583c    0x150    srli s0,s0,0x26
    0x8401583e    0x152    andi s0,s0,1
    0x84015840    0x154    beqz s0,ffffffff84015848 <decodeTCBInvocation+0x15c>
    0x84015842    0x156    li a5,-1
    0x84015844    0x158    slli a5,a5,0x27
    0x84015846    0x15a    or a0,a0,a5
    0x84015848    0x15c    jal ra,ffffffff84013000 <suspend>
    0x8401584c    0x160    li a0,0
    0x8401584e    0x162    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x84015850    0x164    mv a4,a6
    0x84015852    0x166    mv a2,a1
    0x84015854    0x168    ld a0,0(sp)           ; stack access
    0x84015856    0x16a    ld a1,8(sp)           ; stack access
    0x84015858    0x16c    jal ra,ffffffff84014a1a <decodeTCBConfigure>
    0x8401585c    0x170    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x8401585e    0x172    mv a3,a6
    0x84015860    0x174    mv a2,a1
    0x84015862    0x176    ld a0,0(sp)           ; stack access
    0x84015864    0x178    ld a1,8(sp)           ; stack access
    0x84015866    0x17a    jal ra,ffffffff84014ce2 <decodeSetMCPriority>
    0x8401586a    0x17e    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x8401586c    0x180    mv a4,a6
    0x8401586e    0x182    mv a2,a1
    0x84015870    0x184    ld a0,0(sp)           ; stack access
    0x84015872    0x186    ld a1,8(sp)           ; stack access
    0x84015874    0x188    jal ra,ffffffff84014ec4 <decodeSetIPCBuffer>
    0x84015878    0x18c    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x8401587a    0x18e    ld a0,0(sp)           ; stack access
    0x8401587c    0x190    ld a1,8(sp)           ; stack access
    0x8401587e    0x192    jal ra,ffffffff840155d2 <decodeBindNotification>
    0x84015882    0x196    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x84015884    0x198    ld a0,0(sp)           ; stack access
    0x84015886    0x19a    ld a1,8(sp)           ; stack access
    0x84015888    0x19c    jal ra,ffffffff8401569e <decodeUnbindNotification>
    0x8401588c    0x1a0    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x8401588e    0x1a2    li a5,7
    0x84015890    0x1a4    auipc a4,0x3
    0x84015894    0x1a8    sd a5,-448(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015898    0x1ac    li a0,3
    0x8401589a    0x1ae    j ffffffff84015758 <decodeTCBInvocation+0x6c>
    0x8401589c    0x1b0    li a5,3
    0x8401589e    0x1b2    auipc a4,0x3
    0x840158a2    0x1b6    sd a5,-462(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840158a6    0x1ba    li a0,3
    0x840158a8    0x1bc    j ffffffff84015758 <decodeTCBInvocation+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
171 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 271 nodes.

Section decodeCNodeInvocation (270 of 271)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 459 instructions.


Stack analysis
---------------

80 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x8401345a      0x0    addi sp,sp,-224
    0x8401345c      0x2    sd ra,216(sp)         ; stack access
    0x8401345e      0x4    sd s0,208(sp)         ; stack access
    0x84013460      0x6    sd s1,200(sp)         ; stack access
    0x84013462      0x8    sd s2,192(sp)         ; stack access
    0x84013464      0xa    sd s3,184(sp)         ; stack access
    0x84013466      0xc    sd s4,176(sp)         ; stack access
    0x84013468      0xe    sd s5,168(sp)         ; stack access
    0x8401346a     0x10    sd s6,160(sp)         ; stack access
    0x8401346c     0x12    sd s7,152(sp)         ; stack access
    0x8401346e     0x14    sd s8,144(sp)         ; stack access
    0x84013470     0x16    sd a2,0(sp)           ; stack access
    0x84013472     0x18    sd a3,8(sp)           ; stack access
    0x84013474     0x1a    mv s2,a4
    0x84013476     0x1c    addi a4,a0,-16
    0x8401347a     0x20    li a5,8
    0x8401347c     0x22    bltu a5,a4,ffffffff8401353c <decodeCNodeInvocation+0xe2>
    0x84013480     0x26    mv s1,a0
    0x84013482     0x28    mv s3,a1
    0x84013484     0x2a    li a5,1
    0x84013486     0x2c    bgeu a5,a1,ffffffff8401354a <decodeCNodeInvocation+0xf0>
    0x8401348a     0x30    mv a1,s2
    0x8401348c     0x32    li a0,0
    0x8401348e     0x34    jal ra,ffffffff8401012a <getSyscallArg>
    0x84013492     0x38    mv s0,a0
    0x84013494     0x3a    mv a1,s2
    0x84013496     0x3c    li a0,1
    0x84013498     0x3e    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401349c     0x42    mv a3,a0
    0x8401349e     0x44    mv a2,s0
    0x840134a0     0x46    ld a0,0(sp)           ; stack access
    0x840134a2     0x48    ld a1,8(sp)           ; stack access
    0x840134a4     0x4a    jal ra,ffffffff840114a6 <lookupTargetSlot>
    0x840134a8     0x4e    sd a0,112(sp)         ; stack access
    0x840134aa     0x50    sd a1,120(sp)         ; stack access
    0x840134ac     0x52    mv s0,a0
    0x840134ae     0x54    bnez a0,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840134b0     0x56    mv s4,a1
    0x840134b2     0x58    addi a5,s1,-19
    0x840134b6     0x5c    li a4,3
    0x840134b8     0x5e    bltu a4,a5,ffffffff840136dc <decodeCNodeInvocation+0x282>
    0x840134bc     0x62    li a5,3
    0x840134be     0x64    bgeu a5,s3,ffffffff84013570 <decodeCNodeInvocation+0x116>
    0x840134c2     0x68    auipc s0,0x5
    0x840134c6     0x6c    ld s0,974(s0) # ffffffff84018890 <current_extra_caps>
    0x840134ca     0x70    beqz s0,ffffffff84013570 <decodeCNodeInvocation+0x116>
    0x840134cc     0x72    mv a1,s2
    0x840134ce     0x74    li a0,2
    0x840134d0     0x76    jal ra,ffffffff8401012a <getSyscallArg>
    0x840134d4     0x7a    mv s6,a0
    0x840134d6     0x7c    mv a1,s2
    0x840134d8     0x7e    li a0,3
    0x840134da     0x80    jal ra,ffffffff8401012a <getSyscallArg>
    0x840134de     0x84    mv s5,a0
    0x840134e0     0x86    ld a5,0(s0)
    0x840134e2     0x88    sd a5,24(sp)          ; stack access
    0x840134e4     0x8a    ld a5,8(s0)
    0x840134e6     0x8c    sd a5,32(sp)          ; stack access
    0x840134e8     0x8e    mv a0,s4
    0x840134ea     0x90    jal ra,ffffffff840118cc <ensureEmptySlot>
    0x840134ee     0x94    mv s0,a0
    0x840134f0     0x96    bnez a0,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840134f2     0x98    mv a3,s5
    0x840134f4     0x9a    mv a2,s6
    0x840134f6     0x9c    ld a0,24(sp)          ; stack access
    0x840134f8     0x9e    ld a1,32(sp)          ; stack access
    0x840134fa     0xa0    jal ra,ffffffff8401148c <lookupSourceSlot>
    0x840134fe     0xa4    sd a0,112(sp)         ; stack access
    0x84013500     0xa6    sd a1,120(sp)         ; stack access
    0x84013502     0xa8    mv s0,a0
    0x84013504     0xaa    bnez a0,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013506     0xac    mv s6,a1
    0x84013508     0xae    ld s7,0(a1) # ffffffffe0000000 <ki_end+0x5bfd1000>
    0x8401350c     0xb2    srli a5,s7,0x3b
    0x84013510     0xb6    beqz a5,ffffffff8401357e <decodeCNodeInvocation+0x124>
    0x84013512     0xb8    li a5,21
    0x84013514     0xba    beq s1,a5,ffffffff84013664 <decodeCNodeInvocation+0x20a>
    0x84013518     0xbe    bltu a5,s1,ffffffff8401368e <decodeCNodeInvocation+0x234>
    0x8401351c     0xc2    li a5,19
    0x8401351e     0xc4    beq s1,a5,ffffffff840135aa <decodeCNodeInvocation+0x150>
    0x84013522     0xc8    li a5,20
    0x84013524     0xca    bne s1,a5,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013528     0xce    li a5,5
    0x8401352a     0xd0    bltu a5,s3,ffffffff84013618 <decodeCNodeInvocation+0x1be>
    0x8401352e     0xd4    li a5,7
    0x84013530     0xd6    auipc a4,0x5
    0x84013534     0xda    sd a5,416(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013538     0xde    li s0,3
    0x8401353a     0xe0    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401353c     0xe2    li a5,3
    0x8401353e     0xe4    auipc a4,0x5
    0x84013542     0xe8    sd a5,402(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013546     0xec    li s0,3
    0x84013548     0xee    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401354a     0xf0    li a5,7
    0x8401354c     0xf2    auipc a4,0x5
    0x84013550     0xf6    sd a5,388(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013554     0xfa    li s0,3
    0x84013556     0xfc    mv a0,s0
    0x84013558     0xfe    ld ra,216(sp)         ; stack access
    0x8401355a    0x100    ld s0,208(sp)         ; stack access
    0x8401355c    0x102    ld s1,200(sp)         ; stack access
    0x8401355e    0x104    ld s2,192(sp)         ; stack access
    0x84013560    0x106    ld s3,184(sp)         ; stack access
    0x84013562    0x108    ld s4,176(sp)         ; stack access
    0x84013564    0x10a    ld s5,168(sp)         ; stack access
    0x84013566    0x10c    ld s6,160(sp)         ; stack access
    0x84013568    0x10e    ld s7,152(sp)         ; stack access
    0x8401356a    0x110    ld s8,144(sp)         ; stack access
    0x8401356c    0x112    addi sp,sp,224
    0x8401356e    0x114    ret
    0x84013570    0x116    li a5,7
    0x84013572    0x118    auipc a4,0x5
    0x84013576    0x11c    sd a5,350(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401357a    0x120    li s0,3
    0x8401357c    0x122    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401357e    0x124    auipc a4,0x5
    0x84013582    0x128    addi a4,a4,-1406 # ffffffff84018000 <riscvKSASIDTable>
    0x84013586    0x12c    li a5,6
    0x84013588    0x12e    sd a5,1744(a4)
    0x8401358c    0x132    li a5,1
    0x8401358e    0x134    sd a5,1736(a4)
    0x84013592    0x138    slli a5,s5,0x2
    0x84013596    0x13c    andi a5,a5,508
    0x8401359a    0x140    ori a5,a5,1
    0x8401359e    0x144    sd a5,1024(a4)
    0x840135a2    0x148    sd zero,1032(a4)
    0x840135a6    0x14c    li s0,3
    0x840135a8    0x14e    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840135aa    0x150    li a5,4
    0x840135ac    0x152    bltu a5,s3,ffffffff840135be <decodeCNodeInvocation+0x164>
    0x840135b0    0x156    li a5,7
    0x840135b2    0x158    auipc a4,0x5
    0x840135b6    0x15c    sd a5,286(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840135ba    0x160    li s0,3
    0x840135bc    0x162    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840135be    0x164    mv a1,s2
    0x840135c0    0x166    li a0,4
    0x840135c2    0x168    jal ra,ffffffff8401012a <getSyscallArg>
    0x840135c6    0x16c    ld a1,0(s6) # fffffffffe000000 <ki_end+0x79fd1000>
    0x840135ca    0x170    ld a2,8(s6)
    0x840135ce    0x174    jal ra,ffffffff8401219a <maskCapRights>
    0x840135d2    0x178    mv a2,a0
    0x840135d4    0x17a    mv a3,a1
    0x840135d6    0x17c    sd a0,56(sp)          ; stack access
    0x840135d8    0x17e    sd a1,64(sp)          ; stack access
    0x840135da    0x180    mv a1,s6
    0x840135dc    0x182    addi a0,sp,88
    0x840135de    0x184    jal ra,ffffffff84011fa8 <deriveCap>
    0x840135e2    0x188    ld a5,88(sp)          ; stack access
    0x840135e4    0x18a    bnez a5,ffffffff840136d4 <decodeCNodeInvocation+0x27a>
    0x840135e8    0x18e    ld s1,96(sp)          ; stack access
    0x840135ea    0x190    sd s1,40(sp)          ; stack access
    0x840135ec    0x192    ld a5,104(sp)         ; stack access
    0x840135ee    0x194    sd a5,48(sp)          ; stack access
    0x840135f0    0x196    srli a5,s1,0x3b
    0x840135f4    0x19a    beqz a5,ffffffff840136b8 <decodeCNodeInvocation+0x25e>
    0x840135f6    0x19c    li a1,2
    0x840135f8    0x19e    auipc a0,0x17
    0x840135fc    0x1a2    ld a0,576(a0) # ffffffff8402a838 <ksCurThread>
    0x84013600    0x1a6    jal ra,ffffffff840124f6 <setThreadState>
    0x84013604    0x1aa    sd s1,40(sp)          ; stack access
    0x84013606    0x1ac    sd s1,72(sp)          ; stack access
    0x84013608    0x1ae    ld a1,48(sp)          ; stack access
    0x8401360a    0x1b0    sd a1,80(sp)          ; stack access
    0x8401360c    0x1b2    mv a3,s4
    0x8401360e    0x1b4    mv a2,s6
    0x84013610    0x1b6    mv a0,s1
    0x84013612    0x1b8    jal ra,ffffffff84011576 <cteInsert>
    0x84013616    0x1bc    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013618    0x1be    mv a1,s2
    0x8401361a    0x1c0    li a0,4
    0x8401361c    0x1c2    jal ra,ffffffff8401012a <getSyscallArg>
    0x84013620    0x1c6    mv s3,a0
    0x84013622    0x1c8    mv a1,s2
    0x84013624    0x1ca    li a0,5
    0x84013626    0x1cc    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401362a    0x1d0    mv s1,a0
    0x8401362c    0x1d2    ld a1,0(s6)
    0x84013630    0x1d6    ld a2,8(s6)
    0x84013634    0x1da    mv a0,s3
    0x84013636    0x1dc    jal ra,ffffffff8401219a <maskCapRights>
    0x8401363a    0x1e0    mv a2,a0
    0x8401363c    0x1e2    mv a3,a1
    0x8401363e    0x1e4    sd a0,56(sp)          ; stack access
    0x84013640    0x1e6    sd a1,64(sp)          ; stack access
    0x84013642    0x1e8    mv a1,s1
    0x84013644    0x1ea    li a0,0
    0x84013646    0x1ec    jal ra,ffffffff8401210a <updateCapData>
    0x8401364a    0x1f0    mv a2,a0
    0x8401364c    0x1f2    mv a3,a1
    0x8401364e    0x1f4    mv a1,s6
    0x84013650    0x1f6    addi a0,sp,88
    0x84013652    0x1f8    jal ra,ffffffff84011fa8 <deriveCap>
    0x84013656    0x1fc    ld a5,88(sp)          ; stack access
    0x84013658    0x1fe    bnez a5,ffffffff840136d8 <decodeCNodeInvocation+0x27e>
    0x8401365a    0x200    ld s1,96(sp)          ; stack access
    0x8401365c    0x202    sd s1,40(sp)          ; stack access
    0x8401365e    0x204    ld a5,104(sp)         ; stack access
    0x84013660    0x206    sd a5,48(sp)          ; stack access
    0x84013662    0x208    j ffffffff840135f0 <decodeCNodeInvocation+0x196>
    0x84013664    0x20a    ld a5,0(a1)
    0x84013666    0x20c    sd a5,40(sp)          ; stack access
    0x84013668    0x20e    ld a5,8(a1)
    0x8401366a    0x210    sd a5,48(sp)          ; stack access
    0x8401366c    0x212    li a1,2
    0x8401366e    0x214    auipc a0,0x17
    0x84013672    0x218    ld a0,458(a0) # ffffffff8402a838 <ksCurThread>
    0x84013676    0x21c    jal ra,ffffffff840124f6 <setThreadState>
    0x8401367a    0x220    sd s7,40(sp)          ; stack access
    0x8401367c    0x222    sd s7,88(sp)          ; stack access
    0x8401367e    0x224    ld a1,48(sp)          ; stack access
    0x84013680    0x226    sd a1,96(sp)          ; stack access
    0x84013682    0x228    mv a3,s4
    0x84013684    0x22a    mv a2,s6
    0x84013686    0x22c    mv a0,s7
    0x84013688    0x22e    jal ra,ffffffff840116b2 <cteMove>
    0x8401368c    0x232    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401368e    0x234    li a5,4
    0x84013690    0x236    bgeu a5,s3,ffffffff840136c6 <decodeCNodeInvocation+0x26c>
    0x84013694    0x23a    mv a1,s2
    0x84013696    0x23c    li a0,4
    0x84013698    0x23e    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401369c    0x242    mv a1,a0
    0x8401369e    0x244    ld a2,0(s6)
    0x840136a2    0x248    ld a3,8(s6)
    0x840136a6    0x24c    li a0,1
    0x840136a8    0x24e    jal ra,ffffffff8401210a <updateCapData>
    0x840136ac    0x252    sd a0,40(sp)          ; stack access
    0x840136ae    0x254    sd a1,48(sp)          ; stack access
    0x840136b0    0x256    mv s7,a0
    0x840136b2    0x258    srli a0,a0,0x3b
    0x840136b4    0x25a    bnez a0,ffffffff84013928 <decodeCNodeInvocation+0x4ce>
    0x840136b8    0x25e    li a5,3
    0x840136ba    0x260    auipc a4,0x5
    0x840136be    0x264    sd a5,22(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840136c2    0x268    li s0,3
    0x840136c4    0x26a    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840136c6    0x26c    li a5,7
    0x840136c8    0x26e    auipc a4,0x5
    0x840136cc    0x272    sd a5,8(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840136d0    0x276    li s0,3
    0x840136d2    0x278    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840136d4    0x27a    mv s0,a5
    0x840136d6    0x27c    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840136d8    0x27e    mv s0,a5
    0x840136da    0x280    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840136dc    0x282    li a5,16
    0x840136de    0x284    beq s1,a5,ffffffff840137fa <decodeCNodeInvocation+0x3a0>
    0x840136e2    0x288    li a5,17
    0x840136e4    0x28a    beq s1,a5,ffffffff84013812 <decodeCNodeInvocation+0x3b8>
    0x840136e8    0x28e    li a5,24
    0x840136ea    0x290    beq s1,a5,ffffffff8401382a <decodeCNodeInvocation+0x3d0>
    0x840136ee    0x294    li a5,18
    0x840136f0    0x296    beq s1,a5,ffffffff8401384e <decodeCNodeInvocation+0x3f4>
    0x840136f4    0x29a    li a5,23
    0x840136f6    0x29c    bne s1,a5,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840136fa    0x2a0    li a5,7
    0x840136fc    0x2a2    bgeu a5,s3,ffffffff84013884 <decodeCNodeInvocation+0x42a>
    0x84013700    0x2a6    auipc s0,0x5
    0x84013704    0x2aa    ld s0,400(s0) # ffffffff84018890 <current_extra_caps>
    0x84013708    0x2ae    beqz s0,ffffffff84013884 <decodeCNodeInvocation+0x42a>
    0x8401370c    0x2b2    auipc s1,0x5
    0x84013710    0x2b6    ld s1,396(s1) # ffffffff84018898 <current_extra_caps+0x8>
    0x84013714    0x2ba    beqz s1,ffffffff84013884 <decodeCNodeInvocation+0x42a>
    0x84013718    0x2be    mv a1,s2
    0x8401371a    0x2c0    li a0,2
    0x8401371c    0x2c2    jal ra,ffffffff8401012a <getSyscallArg>
    0x84013720    0x2c6    mv s7,a0
    0x84013722    0x2c8    mv a1,s2
    0x84013724    0x2ca    li a0,3
    0x84013726    0x2cc    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401372a    0x2d0    mv s6,a0
    0x8401372c    0x2d2    mv a1,s2
    0x8401372e    0x2d4    li a0,4
    0x84013730    0x2d6    jal ra,ffffffff8401012a <getSyscallArg>
    0x84013734    0x2da    mv s3,a0
    0x84013736    0x2dc    mv a1,s2
    0x84013738    0x2de    li a0,5
    0x8401373a    0x2e0    jal ra,ffffffff8401012a <getSyscallArg>
    0x8401373e    0x2e4    mv s8,a0
    0x84013740    0x2e6    mv a1,s2
    0x84013742    0x2e8    li a0,6
    0x84013744    0x2ea    jal ra,ffffffff8401012a <getSyscallArg>
    0x84013748    0x2ee    mv s5,a0
    0x8401374a    0x2f0    mv a1,s2
    0x8401374c    0x2f2    li a0,7
    0x8401374e    0x2f4    jal ra,ffffffff8401012a <getSyscallArg>
    0x84013752    0x2f8    mv s2,a0
    0x84013754    0x2fa    ld a5,0(s0)
    0x84013756    0x2fc    sd a5,40(sp)          ; stack access
    0x84013758    0x2fe    ld a5,8(s0)
    0x8401375a    0x300    sd a5,48(sp)          ; stack access
    0x8401375c    0x302    ld a0,0(s1)
    0x8401375e    0x304    sd a0,56(sp)          ; stack access
    0x84013760    0x306    ld a1,8(s1)
    0x84013762    0x308    sd a1,64(sp)          ; stack access
    0x84013764    0x30a    mv a3,s2
    0x84013766    0x30c    mv a2,s5
    0x84013768    0x30e    jal ra,ffffffff8401148c <lookupSourceSlot>
    0x8401376c    0x312    sd a1,120(sp)         ; stack access
    0x8401376e    0x314    mv s0,a0
    0x84013770    0x316    bnez a0,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013774    0x31a    mv s1,a1
    0x84013776    0x31c    mv a3,s3
    0x84013778    0x31e    mv a2,s6
    0x8401377a    0x320    ld a0,40(sp)          ; stack access
    0x8401377c    0x322    ld a1,48(sp)          ; stack access
    0x8401377e    0x324    jal ra,ffffffff840114c0 <lookupPivotSlot>
    0x84013782    0x328    sd a0,112(sp)         ; stack access
    0x84013784    0x32a    sd a1,120(sp)         ; stack access
    0x84013786    0x32c    mv s0,a0
    0x84013788    0x32e    bnez a0,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401378c    0x332    mv s5,a1
    0x8401378e    0x334    beq s1,a1,ffffffff84013892 <decodeCNodeInvocation+0x438>
    0x84013792    0x338    beq s4,a1,ffffffff84013892 <decodeCNodeInvocation+0x438>
    0x84013796    0x33c    beq s4,s1,ffffffff840137a6 <decodeCNodeInvocation+0x34c>
    0x8401379a    0x340    mv a0,s4
    0x8401379c    0x342    jal ra,ffffffff840118cc <ensureEmptySlot>
    0x840137a0    0x346    mv s0,a0
    0x840137a2    0x348    bnez a0,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840137a6    0x34c    ld a5,0(s1)
    0x840137a8    0x34e    srli a5,a5,0x3b
    0x840137aa    0x350    beqz a5,ffffffff840138a0 <decodeCNodeInvocation+0x446>
    0x840137ae    0x354    ld a5,0(s5) # 2000 <KERNEL_OFFSET-0xfffffffeffffe000>
    0x840137b2    0x358    srli a5,a5,0x3b
    0x840137b4    0x35a    beqz a5,ffffffff840138cc <decodeCNodeInvocation+0x472>
    0x840137b8    0x35e    ld a2,0(s1)
    0x840137ba    0x360    ld a3,8(s1)
    0x840137bc    0x362    mv a1,s8
    0x840137be    0x364    li a0,1
    0x840137c0    0x366    jal ra,ffffffff8401210a <updateCapData>
    0x840137c4    0x36a    mv s0,a0
    0x840137c6    0x36c    sd a0,72(sp)          ; stack access
    0x840137c8    0x36e    sd a1,80(sp)          ; stack access
    0x840137ca    0x370    ld a2,0(s5)
    0x840137ce    0x374    ld a3,8(s5)
    0x840137d2    0x378    mv a1,s7
    0x840137d4    0x37a    li a0,1
    0x840137d6    0x37c    jal ra,ffffffff8401210a <updateCapData>
    0x840137da    0x380    sd a0,88(sp)          ; stack access
    0x840137dc    0x382    sd a1,96(sp)          ; stack access
    0x840137de    0x384    srli s0,s0,0x3b
    0x840137e0    0x386    beqz s0,ffffffff840138f6 <decodeCNodeInvocation+0x49c>
    0x840137e4    0x38a    ld a5,88(sp)          ; stack access
    0x840137e6    0x38c    srli a5,a5,0x3b
    0x840137e8    0x38e    bnez a5,ffffffff84013904 <decodeCNodeInvocation+0x4aa>
    0x840137ec    0x392    li a5,3
    0x840137ee    0x394    auipc a4,0x5
    0x840137f2    0x398    sd a5,-286(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840137f6    0x39c    li s0,3
    0x840137f8    0x39e    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840137fa    0x3a0    li a1,2
    0x840137fc    0x3a2    auipc a0,0x17
    0x84013800    0x3a6    ld a0,60(a0) # ffffffff8402a838 <ksCurThread>
    0x84013804    0x3aa    jal ra,ffffffff840124f6 <setThreadState>
    0x84013808    0x3ae    mv a0,s4
    0x8401380a    0x3b0    jal ra,ffffffff840133c8 <cteRevoke>
    0x8401380e    0x3b4    mv s0,a0
    0x84013810    0x3b6    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013812    0x3b8    li a1,2
    0x84013814    0x3ba    auipc a0,0x17
    0x84013818    0x3be    ld a0,36(a0) # ffffffff8402a838 <ksCurThread>
    0x8401381c    0x3c2    jal ra,ffffffff840124f6 <setThreadState>
    0x84013820    0x3c6    mv a0,s4
    0x84013822    0x3c8    jal ra,ffffffff840133b8 <invokeCNodeDelete>
    0x84013826    0x3cc    mv s0,a0
    0x84013828    0x3ce    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401382a    0x3d0    mv a0,a1
    0x8401382c    0x3d2    jal ra,ffffffff840118cc <ensureEmptySlot>
    0x84013830    0x3d6    mv s0,a0
    0x84013832    0x3d8    bnez a0,ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013836    0x3dc    li a1,2
    0x84013838    0x3de    auipc a0,0x17
    0x8401383c    0x3e2    ld a0,0(a0) # ffffffff8402a838 <ksCurThread>
    0x84013840    0x3e6    jal ra,ffffffff840124f6 <setThreadState>
    0x84013844    0x3ea    mv a0,s4
    0x84013846    0x3ec    jal ra,ffffffff8401171a <invokeCNodeSaveCaller>
    0x8401384a    0x3f0    mv s0,a0
    0x8401384c    0x3f2    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401384e    0x3f4    ld a0,0(a1)
    0x84013850    0x3f6    sd a0,88(sp)          ; stack access
    0x84013852    0x3f8    ld a1,8(a1)
    0x84013854    0x3fa    sd a1,96(sp)          ; stack access
    0x84013856    0x3fc    jal ra,ffffffff84011b68 <hasCancelSendRights>
    0x8401385a    0x400    bnez a0,ffffffff8401386a <decodeCNodeInvocation+0x410>
    0x8401385c    0x402    li a5,3
    0x8401385e    0x404    auipc a4,0x5
    0x84013862    0x408    sd a5,-398(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013866    0x40c    li s0,3
    0x84013868    0x40e    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x8401386a    0x410    li a1,2
    0x8401386c    0x412    auipc a0,0x17
    0x84013870    0x416    ld a0,-52(a0) # ffffffff8402a838 <ksCurThread>
    0x84013874    0x41a    jal ra,ffffffff840124f6 <setThreadState>
    0x84013878    0x41e    ld a0,88(sp)          ; stack access
    0x8401387a    0x420    ld a1,96(sp)          ; stack access
    0x8401387c    0x422    jal ra,ffffffff84012e90 <invokeCNodeCancelBadgedSends>
    0x84013880    0x426    mv s0,a0
    0x84013882    0x428    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013884    0x42a    li a5,7
    0x84013886    0x42c    auipc a4,0x5
    0x8401388a    0x430    sd a5,-438(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401388e    0x434    li s0,3
    0x84013890    0x436    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013892    0x438    li a5,3
    0x84013894    0x43a    auipc a4,0x5
    0x84013898    0x43e    sd a5,-452(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401389c    0x442    li s0,3
    0x8401389e    0x444    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840138a0    0x446    auipc a4,0x4
    0x840138a4    0x44a    addi a4,a4,1888 # ffffffff84018000 <riscvKSASIDTable>
    0x840138a8    0x44e    li a5,6
    0x840138aa    0x450    sd a5,1744(a4)
    0x840138ae    0x454    li a5,1
    0x840138b0    0x456    sd a5,1736(a4)
    0x840138b4    0x45a    slli a5,s2,0x2
    0x840138b8    0x45e    andi a5,a5,508
    0x840138bc    0x462    ori a5,a5,1
    0x840138c0    0x466    sd a5,1024(a4)
    0x840138c4    0x46a    sd zero,1032(a4)
    0x840138c8    0x46e    li s0,3
    0x840138ca    0x470    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840138cc    0x472    auipc a4,0x4
    0x840138d0    0x476    addi a4,a4,1844 # ffffffff84018000 <riscvKSASIDTable>
    0x840138d4    0x47a    li a5,6
    0x840138d6    0x47c    sd a5,1744(a4)
    0x840138da    0x480    sd zero,1736(a4)
    0x840138de    0x484    slli a5,s3,0x2
    0x840138e2    0x488    andi a5,a5,508
    0x840138e6    0x48c    ori a5,a5,1
    0x840138ea    0x490    sd a5,1024(a4)
    0x840138ee    0x494    sd zero,1032(a4)
    0x840138f2    0x498    li s0,3
    0x840138f4    0x49a    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x840138f6    0x49c    li a5,3
    0x840138f8    0x49e    auipc a4,0x5
    0x840138fc    0x4a2    sd a5,-552(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013900    0x4a6    li s0,3
    0x84013902    0x4a8    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013904    0x4aa    li a1,2
    0x84013906    0x4ac    auipc a0,0x17
    0x8401390a    0x4b0    ld a0,-206(a0) # ffffffff8402a838 <ksCurThread>
    0x8401390e    0x4b4    jal ra,ffffffff840124f6 <setThreadState>
    0x84013912    0x4b8    mv a6,s4
    0x84013914    0x4ba    mv a5,s5
    0x84013916    0x4bc    mv a4,s1
    0x84013918    0x4be    ld a2,88(sp)          ; stack access
    0x8401391a    0x4c0    ld a3,96(sp)          ; stack access
    0x8401391c    0x4c2    ld a0,72(sp)          ; stack access
    0x8401391e    0x4c4    ld a1,80(sp)          ; stack access
    0x84013920    0x4c6    jal ra,ffffffff840117ea <invokeCNodeRotate>
    0x84013924    0x4ca    mv s0,a0
    0x84013926    0x4cc    j ffffffff84013556 <decodeCNodeInvocation+0xfc>
    0x84013928    0x4ce    li a1,2
    0x8401392a    0x4d0    auipc a0,0x17
    0x8401392e    0x4d4    ld a0,-242(a0) # ffffffff8402a838 <ksCurThread>
    0x84013932    0x4d8    jal ra,ffffffff840124f6 <setThreadState>
    0x84013936    0x4dc    j ffffffff8401367a <decodeCNodeInvocation+0x220>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
459 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 723 nodes.

Section init_kernel (271 of 271)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 222 instructions.

RVC_FTTFT____FFFT_FT.
Skipping 10579073 csrw stvec,a5

RVC_FTTFFT___FFT__FT.
Skipping 1007b073 csrc sstatus,a5

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp


Stack analysis
---------------

78 stack accesses found. Annotated code for `init_kernel`:

    0x840012c6      0x0    addi sp,sp,-256
    0x840012c8      0x2    sd ra,248(sp)         ; stack access
    0x840012ca      0x4    sd s0,240(sp)         ; stack access
    0x840012cc      0x6    sd s1,232(sp)         ; stack access
    0x840012ce      0x8    sd s2,224(sp)         ; stack access
    0x840012d0      0xa    sd s3,216(sp)         ; stack access
    0x840012d2      0xc    sd s4,208(sp)         ; stack access
    0x840012d4      0xe    sd s5,200(sp)         ; stack access
    0x840012d6     0x10    sd s6,192(sp)         ; stack access
    0x840012d8     0x12    sd s7,184(sp)         ; stack access
    0x840012da     0x14    mv s7,a3
    0x840012dc     0x16    li s0,-1
    0x840012de     0x18    slli s0,s0,0x26
    0x840012e0     0x1a    add s1,a0,s0
    0x840012e4     0x1e    add s0,s0,a1
    0x840012e6     0x20    sd s1,88(sp)          ; stack access
    0x840012e8     0x22    sd s0,96(sp)          ; stack access
    0x840012ea     0x24    slli s6,a2,0x20
    0x840012ee     0x28    srli s6,s6,0x20
    0x840012f2     0x2c    sub s3,a0,s6
    0x840012f6     0x30    sub s4,a1,s6
    0x840012fa     0x34    lui s5,0x2
    0x840012fc     0x36    add s5,s5,s4
    0x840012fe     0x38    jal ra,ffffffff84000474 <map_kernel_window>
    0x84001302     0x3c    jal ra,ffffffff84000138 <activate_kernel_vspace>
    0x84001306     0x40    auipc a5,0xf
    0x8400130a     0x44    addi a5,a5,-774 # ffffffff84010000 <ki_boot_end>
    0x8400130e     0x48    csrw stvec,a5
    0x84001312     0x4c    jal ra,ffffffff840002ca <initLocalIRQController>
    0x84001316     0x50    jal ra,ffffffff840002b4 <initTimer>
    0x8400131a     0x54    lui a5,0x6
    0x8400131c     0x56    csrc sstatus,a5
    0x84001320     0x5a    jal ra,ffffffff8400030e <initIRQController>
    0x84001324     0x5e    sd s3,152(sp)         ; stack access
    0x84001326     0x60    sd s5,160(sp)         ; stack access
    0x84001328     0x62    auipc a5,0x0
    0x8400132c     0x66    addi a5,a5,512 # ffffffff84001528 <ndks_boot>
    0x84001330     0x6a    lui a4,0xff021
    0x84001334     0x6e    slli a4,a4,0xe
    0x84001336     0x70    sd a4,952(a5)
    0x8400133a     0x74    auipc a4,0x2e
    0x8400133e     0x78    addi a4,a4,-826 # ffffffff8402f000 <ki_end>
    0x84001342     0x7c    li a3,-63
    0x84001346     0x80    slli a3,a3,0x20
    0x84001348     0x82    add a4,a4,a3
    0x8400134a     0x84    sd a4,960(a5)
    0x8400134e     0x88    sd s1,968(a5)
    0x84001352     0x8c    sd s0,976(a5)
    0x84001356     0x90    li a6,0
    0x84001358     0x92    mv a4,s3
    0x8400135a     0x94    mv a5,s5
    0x8400135c     0x96    auipc a3,0x0
    0x84001360     0x9a    addi a3,a3,1412 # ffffffff840018e0 <res_reg>
    0x84001364     0x9e    li a2,2
    0x84001366     0xa0    auipc a1,0x0
    0x8400136a     0xa4    addi a1,a1,434 # ffffffff84001518 <avail_p_regs>
    0x8400136e     0xa8    li a0,1
    0x84001370     0xaa    jal ra,ffffffff84000f66 <init_freemem>
    0x84001374     0xae    jal ra,ffffffff840005a2 <create_root_cnode>
    0x84001378     0xb2    sd a0,24(sp)          ; stack access
    0x8400137a     0xb4    sd a1,32(sp)          ; stack access
    0x8400137c     0xb6    srli a0,a0,0x3b
    0x8400137e     0xb8    bnez a0,ffffffff84001384 <init_kernel+0xbe>
    0x84001380     0xba    jal ra,ffffffff8401045e <halt>
    0x84001384     0xbe    ld a0,24(sp)          ; stack access
    0x84001386     0xc0    jal ra,ffffffff840005de <create_domain_cap>
    0x8400138a     0xc4    ld a5,24(sp)          ; stack access
    0x8400138c     0xc6    sd a5,152(sp)         ; stack access
    0x8400138e     0xc8    ld a5,32(sp)          ; stack access
    0x84001390     0xca    sd a5,160(sp)         ; stack access
    0x84001392     0xcc    li s1,1
    0x84001394     0xce    li s0,0
    0x84001396     0xd0    li s2,54
    0x8400139a     0xd4    j ffffffff840013a0 <init_kernel+0xda>
    0x8400139c     0xd6    addi s0,s0,1
    0x8400139e     0xd8    addi s1,s1,1
    0x840013a0     0xda    beqz s0,ffffffff8400139c <init_kernel+0xd6>
    0x840013a2     0xdc    mv a1,s0
    0x840013a4     0xde    li a0,0
    0x840013a6     0xe0    jal ra,ffffffff8401197e <setIRQState>
    0x840013aa     0xe4    bgeu s2,s1,ffffffff8400139c <init_kernel+0xd6>
    0x840013ae     0xe8    li a1,54
    0x840013b2     0xec    li a0,2
    0x840013b4     0xee    jal ra,ffffffff8401197e <setIRQState>
    0x840013b8     0xf2    ld a0,152(sp)         ; stack access
    0x840013ba     0xf4    ld a1,160(sp)         ; stack access
    0x840013bc     0xf6    jal ra,ffffffff84010208 <cap_get_capPtr>
    0x840013c0     0xfa    li a5,7
    0x840013c2     0xfc    slli a5,a5,0x3c
    0x840013c4     0xfe    sd a5,128(a0)
    0x840013c6    0x100    sd zero,136(a0)
    0x840013ca    0x104    sd zero,144(a0)
    0x840013ce    0x108    li a5,3
    0x840013d0    0x10a    sd a5,152(a0)
    0x840013d2    0x10c    li a3,0
    0x840013d4    0x10e    mv a2,s4
    0x840013d6    0x110    li a1,1
    0x840013d8    0x112    li a0,0
    0x840013da    0x114    jal ra,ffffffff84000d82 <populate_bi_frame>
    0x840013de    0x118    mv a2,s3
    0x840013e0    0x11a    mv a3,s5
    0x840013e2    0x11c    ld a0,24(sp)          ; stack access
    0x840013e4    0x11e    ld a1,32(sp)          ; stack access
    0x840013e6    0x120    jal ra,ffffffff840006e2 <create_it_address_space>
    0x840013ea    0x124    sd a0,40(sp)          ; stack access
    0x840013ec    0x126    sd a1,48(sp)          ; stack access
    0x840013ee    0x128    srli a0,a0,0x3b
    0x840013f0    0x12a    beqz a0,ffffffff84001380 <init_kernel+0xba>
    0x840013f2    0x12c    lui s0,0x1
    0x840013f4    0x12e    add s0,s0,s4
    0x840013f6    0x130    mv a4,s0
    0x840013f8    0x132    ld a2,40(sp)          ; stack access
    0x840013fa    0x134    mv a3,a1
    0x840013fc    0x136    ld a0,24(sp)          ; stack access
    0x840013fe    0x138    ld a1,32(sp)          ; stack access
    0x84001400    0x13a    jal ra,ffffffff84000602 <create_bi_frame_cap>
    0x84001404    0x13e    mv a4,s4
    0x84001406    0x140    ld a2,40(sp)          ; stack access
    0x84001408    0x142    ld a3,48(sp)          ; stack access
    0x8400140a    0x144    ld a0,24(sp)          ; stack access
    0x8400140c    0x146    ld a1,32(sp)          ; stack access
    0x8400140e    0x148    jal ra,ffffffff84000d1e <create_ipcbuf_frame_cap>
    0x84001412    0x14c    sd a0,72(sp)          ; stack access
    0x84001414    0x14e    sd a1,80(sp)          ; stack access
    0x84001416    0x150    srli a0,a0,0x3b
    0x84001418    0x152    beqz a0,ffffffff84001380 <init_kernel+0xba>
    0x8400141a    0x154    sd s6,0(sp)           ; stack access
    0x8400141c    0x156    li a7,1
    0x8400141e    0x158    ld a5,88(sp)          ; stack access
    0x84001420    0x15a    ld a6,96(sp)          ; stack access
    0x84001422    0x15c    ld a3,40(sp)          ; stack access
    0x84001424    0x15e    ld a4,48(sp)          ; stack access
    0x84001426    0x160    ld a1,24(sp)          ; stack access
    0x84001428    0x162    ld a2,32(sp)          ; stack access
    0x8400142a    0x164    addi a0,sp,152
    0x8400142c    0x166    jal ra,ffffffff8400082a <create_frames_of_region>
    0x84001430    0x16a    ld a5,168(sp)         ; stack access
    0x84001432    0x16c    beqz a5,ffffffff84001380 <init_kernel+0xba>
    0x84001434    0x16e    auipc a5,0x0
    0x84001438    0x172    ld a5,828(a5) # ffffffff84001770 <ndks_boot+0x248>
    0x8400143c    0x176    ld a4,152(sp)         ; stack access
    0x8400143e    0x178    sd a4,72(a5)
    0x84001440    0x17a    ld a4,160(sp)         ; stack access
    0x84001442    0x17c    sd a4,80(a5)
    0x84001444    0x17e    ld a0,24(sp)          ; stack access
    0x84001446    0x180    ld a1,32(sp)          ; stack access
    0x84001448    0x182    jal ra,ffffffff840008f8 <create_it_asid_pool>
    0x8400144c    0x186    sd a0,56(sp)          ; stack access
    0x8400144e    0x188    sd a1,64(sp)          ; stack access
    0x84001450    0x18a    srli a0,a0,0x3b
    0x84001452    0x18c    beqz a0,ffffffff84001380 <init_kernel+0xba>
    0x84001454    0x18e    ld a2,40(sp)          ; stack access
    0x84001456    0x190    ld a3,48(sp)          ; stack access
    0x84001458    0x192    ld a0,56(sp)          ; stack access
    0x8400145a    0x194    jal ra,ffffffff8400015e <write_it_asid_pool>
    0x8400145e    0x198    jal ra,ffffffff84000cfe <create_idle_thread>
    0x84001462    0x19c    beqz a0,ffffffff84001380 <init_kernel+0xba>
    0x84001466    0x1a0    ld a5,80(sp)          ; stack access
    0x84001468    0x1a2    sd a5,0(sp)           ; stack access
    0x8400146a    0x1a4    ld a7,72(sp)          ; stack access
    0x8400146c    0x1a6    mv a6,s4
    0x8400146e    0x1a8    mv a5,s0
    0x84001470    0x1aa    mv a4,s7
    0x84001472    0x1ac    ld a2,40(sp)          ; stack access
    0x84001474    0x1ae    ld a3,48(sp)          ; stack access
    0x84001476    0x1b0    ld a0,24(sp)          ; stack access
    0x84001478    0x1b2    ld a1,32(sp)          ; stack access
    0x8400147a    0x1b4    jal ra,ffffffff84000b9e <create_initial_thread>
    0x8400147e    0x1b8    beqz a0,ffffffff84001380 <init_kernel+0xba>
    0x84001482    0x1bc    jal ra,ffffffff8400095a <init_core_state>
    0x84001486    0x1c0    ld a0,24(sp)          ; stack access
    0x84001488    0x1c2    sd a0,120(sp)         ; stack access
    0x8400148a    0x1c4    ld a1,32(sp)          ; stack access
    0x8400148c    0x1c6    sd a1,128(sp)         ; stack access
    0x8400148e    0x1c8    lui a5,0xff021
    0x84001492    0x1cc    slli a5,a5,0xe
    0x84001494    0x1ce    sd a5,136(sp)         ; stack access
    0x84001496    0x1d0    auipc a5,0xf
    0x8400149a    0x1d4    addi a5,a5,-1174 # ffffffff84010000 <ki_boot_end>
    0x8400149e    0x1d8    li a4,-63
    0x840014a2    0x1dc    slli a4,a4,0x20
    0x840014a4    0x1de    add a5,a5,a4
    0x840014a6    0x1e0    sd a5,144(sp)         ; stack access
    0x840014a8    0x1e2    auipc s1,0x0
    0x840014ac    0x1e6    addi s1,s1,128 # ffffffff84001528 <ndks_boot>
    0x840014b0    0x1ea    ld s0,592(s1)
    0x840014b4    0x1ee    mv a2,s0
    0x840014b6    0x1f0    jal ra,ffffffff84000a84 <create_device_untypeds>
    0x840014ba    0x1f4    mv a4,s0
    0x840014bc    0x1f6    ld a2,136(sp)         ; stack access
    0x840014be    0x1f8    ld a3,144(sp)         ; stack access
    0x840014c0    0x1fa    ld a0,120(sp)         ; stack access
    0x840014c2    0x1fc    ld a1,128(sp)         ; stack access
    0x840014c4    0x1fe    jal ra,ffffffff84000b26 <create_kernel_untypeds>
    0x840014c8    0x202    ld a4,592(s1)
    0x840014cc    0x206    ld a5,584(s1)
    0x840014d0    0x20a    sd s0,152(a5)
    0x840014d2    0x20c    sd a4,160(a5)
    0x840014d4    0x20e    beqz a0,ffffffff84001380 <init_kernel+0xba>
    0x840014d8    0x212    auipc a5,0x0
    0x840014dc    0x216    ld a5,664(a5) # ffffffff84001770 <ndks_boot+0x248>
    0x840014e0    0x21a    sd zero,56(a5)
    0x840014e4    0x21e    sd zero,64(a5)
    0x840014e8    0x222    jal ra,ffffffff84000b84 <bi_finalise>
    0x840014ec    0x226    li a5,1
    0x840014ee    0x228    auipc a4,0x29
    0x840014f2    0x22c    sd a5,850(a4) # ffffffff8402a840 <ksNumCPUs>
    0x840014f6    0x230    jal ra,ffffffff84012bb0 <schedule>
    0x840014fa    0x234    jal ra,ffffffff84012600 <activateThread>
    0x840014fe    0x238    ld ra,248(sp)         ; stack access
    0x84001500    0x23a    ld s0,240(sp)         ; stack access
    0x84001502    0x23c    ld s1,232(sp)         ; stack access
    0x84001504    0x23e    ld s2,224(sp)         ; stack access
    0x84001506    0x240    ld s3,216(sp)         ; stack access
    0x84001508    0x242    ld s4,208(sp)         ; stack access
    0x8400150a    0x244    ld s5,200(sp)         ; stack access
    0x8400150c    0x246    ld s6,192(sp)         ; stack access
    0x8400150e    0x248    ld s7,184(sp)         ; stack access
    0x84001510    0x24a    addi sp,sp,256
    0x84001512    0x24c    ret
    0x84001514    0x24e    unimp
    0x84001516    0x250    unimp

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
222 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 372 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_8401199E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_840119A8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_84011566` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010CB0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010C9A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84010466` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84010446` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_8401044E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84010442` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_8401045A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_840101E4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_8401015A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84000308` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840002C2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a0_840002B4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84000154` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_84010BEC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010AC8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010B56` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010B26` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010ACC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010B5A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010B2A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010A0A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a4_stval_840108E8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84017304` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_8401730C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_s6_84017270` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84017300` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84017318` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84017274` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84016FBE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_84016FC6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84016F28` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84016FBA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84016FD2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84016F2C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8401008C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8401007C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84010084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840100A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84010000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000256` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840001EA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_84014498` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84013CAC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84013C92` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_84013C82` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a4_84013C96` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010A94` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84015D02` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84016090` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_8400130E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrc_sstatus_a5_8400131C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_84001514` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_84001516` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
No graph spec failures.
No export failures.
No call offset failures.
> 