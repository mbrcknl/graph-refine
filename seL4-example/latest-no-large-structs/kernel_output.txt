
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Tue May 12 18:50:37 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/matthewb/verification/bv/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel
  Poly/ML: 580
  HOL: Kananaskis 13 (stdknl) commit 58c4d6875
======================================================================
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.sigs, done.
No signature info for section: _start
No signature info for section: avail_p_regs
No signature info for section: ndks_boot
No signature info for section: rootserver
No signature info for section: rootserver_mem
No signature info for section: avail_reg
No signature info for section: res_reg
No signature info for section: trap_entry
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzsi2
No signature info for section: __ctzsi2
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 266 functions, 14557 RISC-V instructions
  Longest function: create_initial_thread (803 instructions)
  0 deps: 91 functions (avail_p_regs, ndks_boot, rootserver, ...)
  1 deps: 76 functions (str_to_long, memset, ...)
  2 deps: 44 functions (fastpath_reply_recv, fastpath_call, ...)
  3 deps: 23 functions (c_handle_syscall, slowpath, ...)
  4 deps: 7 functions (invokeUntyped_Retype, decodeSetIPCBuffer, ...)
  5 deps: 10 functions (invokeTCB_ThreadControl, handleRecv, ...)
  6 deps: 5 functions (decodeUntypedInvocation, decodeSetSpace, ...)
  7 deps: 3 functions (handleInvocation, decodeTCBConfigure, ...)
  8 deps: 1 functions (finaliseCap)
  11 deps: 1 functions (handleSyscall)
  12 deps: 1 functions (decodeInvocation)
  14 deps: 1 functions (decodeRISCVMMUInvocation)
  15 deps: 1 functions (decodeTCBInvocation)
  16 deps: 1 functions (decodeCNodeInvocation)
  25 deps: 1 functions (init_kernel)
======================================================================

Section avail_p_regs (1 of 266)
===============================

Deriving specifications
-----------------------

Section `avail_p_regs` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_p_regs` has 0 nodes.

Section ndks_boot (2 of 266)
============================

Deriving specifications
-----------------------

Section `ndks_boot` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ndks_boot` has 0 nodes.

Section rootserver (3 of 266)
=============================

Deriving specifications
-----------------------

Section `rootserver` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver` has 0 nodes.

Section rootserver_mem (4 of 266)
=================================

Deriving specifications
-----------------------

Section `rootserver_mem` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver_mem` has 0 nodes.

Section avail_reg (5 of 266)
============================

Deriving specifications
-----------------------

Section `avail_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_reg` has 0 nodes.

Section res_reg (6 of 266)
==========================

Deriving specifications
-----------------------

Section `res_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `res_reg` has 0 nodes.

Section __ctzdi2 (7 of 266)
===========================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 13 instructions.

RVC_TFFFFT___FT___TF..
ANDI..
RVC_TTT___________FT.
RVC_FTF___________FT.
ADDI..
RVC_TFF_FF________FT.
RVC_FFT___________FT.
BNE..
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x84017092     0x0    mv a5,a0
    0x84017094     0x2    andi a4,a0,1
    0x84017098     0x6    bnez a4,ffffffff840170b0 <__ctzdi2+0x1e>
    0x8401709a     0x8    li a0,0
    0x8401709c     0xa    li a3,65
    0x840170a0     0xe    srli a5,a5,0x1
    0x840170a2    0x10    addiw a0,a0,1
    0x840170a4    0x12    andi a4,a5,1
    0x840170a8    0x16    bnez a4,ffffffff840170b2 <__ctzdi2+0x20>
    0x840170aa    0x18    bne a0,a3,ffffffff840170a0 <__ctzdi2+0xe>
    0x840170ae    0x1c    ret
    0x840170b0    0x1e    li a0,0
    0x840170b2    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 21 nodes.

Section __clzdi2 (8 of 266)
===========================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 11 instructions.

BLT..
RVC_FFF___________TF.

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x84017074     0x0    mv a5,a0
    0x84017076     0x2    bltz a0,ffffffff8401708e <__clzdi2+0x1a>
    0x8401707a     0x6    li a0,0
    0x8401707c     0x8    li a4,65
    0x84017080     0xc    slli a5,a5,0x1
    0x84017082     0xe    addiw a0,a0,1
    0x84017084    0x10    bltz a5,ffffffff84017090 <__clzdi2+0x1c>
    0x84017088    0x14    bne a0,a4,ffffffff84017080 <__clzdi2+0xc>
    0x8401708c    0x18    ret
    0x8401708e    0x1a    li a0,0
    0x84017090    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 19 nodes.

Section __ctzsi2 (9 of 266)
===========================

Deriving specifications
-----------------------

Section `__ctzsi2` consists of 13 instructions.

RVC_TFF_TF________FT.
SRLIW..
ADDIW..

Stack analysis
---------------

No stack accesses found. Code for `__ctzsi2`:

    0x84017052     0x0    mv a4,a0
    0x84017054     0x2    andi a0,a0,1
    0x84017056     0x4    bnez a0,ffffffff84017070 <__ctzsi2+0x1e>
    0x84017058     0x6    li a3,33
    0x8401705c     0xa    srliw a5,a4,0x1
    0x84017060     0xe    sext.w a4,a5
    0x84017064    0x12    addiw a0,a0,1
    0x84017066    0x14    andi a5,a5,1
    0x84017068    0x16    bnez a5,ffffffff84017072 <__ctzsi2+0x20>
    0x8401706a    0x18    bne a0,a3,ffffffff8401705c <__ctzsi2+0xa>
    0x8401706e    0x1c    ret
    0x84017070    0x1e    li a0,0
    0x84017072    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzsi2` has 21 nodes.

Section __clzsi2 (10 of 266)
============================

Deriving specifications
-----------------------

Section `__clzsi2` consists of 13 instructions.

SLLIW..
SLLI..

Stack analysis
---------------

No stack accesses found. Code for `__clzsi2`:

    0x8401702a     0x0    mv a4,a0
    0x8401702c     0x2    bltz a0,ffffffff8401704e <__clzsi2+0x24>
    0x84017030     0x6    li a0,0
    0x84017032     0x8    li a3,34
    0x84017036     0xc    slliw a5,a4,0x1
    0x8401703a    0x10    sext.w a4,a5
    0x8401703e    0x14    addiw a0,a0,1
    0x84017040    0x16    slli a2,a5,0x20
    0x84017044    0x1a    bltz a2,ffffffff84017050 <__clzsi2+0x26>
    0x84017048    0x1e    bne a0,a3,ffffffff84017036 <__clzsi2+0xc>
    0x8401704c    0x22    ret
    0x8401704e    0x24    li a0,0
    0x84017050    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzsi2` has 21 nodes.

Section char_to_long (11 of 266)
================================

Deriving specifications
-----------------------

Section `char_to_long` consists of 20 instructions.

BGEU..
BLTU..

Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x84016f76     0x0    addiw a5,a0,-48
    0x84016f7a     0x4    andi a5,a5,255
    0x84016f7e     0x8    li a4,9
    0x84016f80     0xa    bgeu a4,a5,ffffffff84016fa6 <char_to_long+0x30>
    0x84016f84     0xe    addiw a5,a0,-65
    0x84016f88    0x12    andi a5,a5,255
    0x84016f8c    0x16    li a4,5
    0x84016f8e    0x18    bgeu a4,a5,ffffffff84016fac <char_to_long+0x36>
    0x84016f92    0x1c    addiw a5,a0,-97
    0x84016f96    0x20    andi a5,a5,255
    0x84016f9a    0x24    li a4,5
    0x84016f9c    0x26    bltu a4,a5,ffffffff84016fb2 <char_to_long+0x3c>
    0x84016fa0    0x2a    addiw a0,a0,-87
    0x84016fa4    0x2e    ret
    0x84016fa6    0x30    addiw a0,a0,-48
    0x84016faa    0x34    ret
    0x84016fac    0x36    addiw a0,a0,-55
    0x84016fb0    0x3a    ret
    0x84016fb2    0x3c    li a0,-1
    0x84016fb4    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 30 nodes.

Section strncmp (12 of 266)
===========================

Deriving specifications
-----------------------

Section `strncmp` consists of 14 instructions.

RVC_TTF___________FT.
RVC_TFFTFT___FT___TF..
LBU..
SUBW.....
RVC_FFFFFT________FT.

Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x84016f52     0x0    beqz a2,ffffffff84016f72 <strncmp+0x20>
    0x84016f54     0x2    mv a5,a0
    0x84016f56     0x4    add a2,a2,a0
    0x84016f58     0x6    lbu a4,0(a5)
    0x84016f5c     0xa    lbu a0,0(a1)
    0x84016f60     0xe    subw a0,a4,a0
    0x84016f64    0x12    bnez a0,ffffffff84016f74 <strncmp+0x22>
    0x84016f66    0x14    beqz a4,ffffffff84016f74 <strncmp+0x22>
    0x84016f68    0x16    addi a5,a5,1
    0x84016f6a    0x18    addi a1,a1,1
    0x84016f6c    0x1a    bne a5,a2,ffffffff84016f58 <strncmp+0x6>
    0x84016f70    0x1e    ret
    0x84016f72    0x20    li a0,0
    0x84016f74    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 26 nodes.

Section memcpy (13 of 266)
==========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x84016f3a     0x0    beqz a2,ffffffff84016f50 <memcpy+0x16>
    0x84016f3c     0x2    add a2,a2,a0
    0x84016f3e     0x4    mv a5,a0
    0x84016f40     0x6    lbu a4,0(a1)
    0x84016f44     0xa    sb a4,0(a5)
    0x84016f48     0xe    addi a5,a5,1
    0x84016f4a    0x10    addi a1,a1,1
    0x84016f4c    0x12    bne a2,a5,ffffffff84016f40 <memcpy+0x6>
    0x84016f50    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memzero (14 of 266)
===========================

Deriving specifications
-----------------------

Section `memzero` consists of 7 instructions.

SD..

Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x840156c0     0x0    beqz a1,ffffffff840156d0 <memzero+0x10>
    0x840156c2     0x2    mv a5,a0
    0x840156c4     0x4    add a1,a1,a0
    0x840156c6     0x6    sd zero,0(a5)
    0x840156ca     0xa    addi a5,a5,8
    0x840156cc     0xc    bne a5,a1,ffffffff840156c6 <memzero+0x6>
    0x840156d0    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 13 nodes.

Section strlcat (15 of 266)
===========================

Deriving specifications
-----------------------

Section `strlcat` consists of 31 instructions.

ADD.....
RVC_TFT___________FT.
SUB.....
RVC_TFFFFT___T____TF.

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x84015666     0x0    mv a3,a0
    0x84015668     0x2    li a0,0
    0x8401566a     0x4    beqz a2,ffffffff8401567e <strlcat+0x18>
    0x8401566c     0x6    add a5,a3,a0
    0x84015670     0xa    lbu a5,0(a5)
    0x84015674     0xe    beqz a5,ffffffff84015682 <strlcat+0x1c>
    0x84015676    0x10    addi a0,a0,1
    0x84015678    0x12    bne a2,a0,ffffffff8401566c <strlcat+0x6>
    0x8401567c    0x16    j ffffffff840156ba <strlcat+0x54>
    0x8401567e    0x18    mv a0,a2
    0x84015680    0x1a    ret
    0x84015682    0x1c    bgeu a0,a2,ffffffff840156ba <strlcat+0x54>
    0x84015686    0x20    addi a5,a0,1
    0x8401568a    0x24    bgeu a5,a2,ffffffff840156b4 <strlcat+0x4e>
    0x8401568e    0x28    addi a6,a5,-1
    0x84015692    0x2c    sub a4,a5,a0
    0x84015696    0x30    add a4,a4,a1
    0x84015698    0x32    lbu a4,-1(a4)
    0x8401569c    0x36    beqz a4,ffffffff840156b2 <strlcat+0x4c>
    0x8401569e    0x38    add a6,a3,a5
    0x840156a2    0x3c    sb a4,-1(a6)
    0x840156a6    0x40    addi a4,a5,1
    0x840156aa    0x44    bgeu a4,a2,ffffffff840156bc <strlcat+0x56>
    0x840156ae    0x48    mv a5,a4
    0x840156b0    0x4a    j ffffffff8401568e <strlcat+0x28>
    0x840156b2    0x4c    mv a0,a6
    0x840156b4    0x4e    add a3,a3,a0
    0x840156b6    0x50    sb zero,0(a3)
    0x840156ba    0x54    ret
    0x840156bc    0x56    mv a0,a5
    0x840156be    0x58    j ffffffff840156b4 <strlcat+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 51 nodes.

Section strlcpy (16 of 266)
===========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 19 instructions.

RVC_FFFT__________FT.

Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x84015634     0x0    mv a3,a0
    0x84015636     0x2    li a5,1
    0x84015638     0x4    bgeu a5,a2,ffffffff84015662 <strlcpy+0x2e>
    0x8401563c     0x8    addi a2,a2,-1
    0x8401563e     0xa    li a5,0
    0x84015640     0xc    mv a0,a5
    0x84015642     0xe    addi a5,a5,1
    0x84015644    0x10    add a4,a1,a0
    0x84015648    0x14    lbu a4,0(a4)
    0x8401564c    0x18    beqz a4,ffffffff8401565a <strlcpy+0x26>
    0x8401564e    0x1a    add a0,a0,a3
    0x84015650    0x1c    sb a4,0(a0)
    0x84015654    0x20    bne a5,a2,ffffffff84015640 <strlcpy+0xc>
    0x84015658    0x24    mv a0,a5
    0x8401565a    0x26    add a3,a3,a0
    0x8401565c    0x28    sb zero,0(a3)
    0x84015660    0x2c    ret
    0x84015662    0x2e    li a0,0
    0x84015664    0x30    j ffffffff8401565a <strlcpy+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 29 nodes.

Section strnlen (17 of 266)
===========================

Deriving specifications
-----------------------

Section `strnlen` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x84015618     0x0    mv a4,a0
    0x8401561a     0x2    li a0,0
    0x8401561c     0x4    beqz a1,ffffffff84015630 <strnlen+0x18>
    0x8401561e     0x6    add a5,a4,a0
    0x84015622     0xa    lbu a5,0(a5)
    0x84015626     0xe    beqz a5,ffffffff8401562e <strnlen+0x16>
    0x84015628    0x10    addi a0,a0,1
    0x8401562a    0x12    bne a1,a0,ffffffff8401561e <strnlen+0x6>
    0x8401562e    0x16    ret
    0x84015630    0x18    mv a0,a1
    0x84015632    0x1a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 20 nodes.

Section copyMRs (18 of 266)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 46 instructions.

RVC_FTT___________FF..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x84013b72     0x0    mv a5,a0
    0x84013b74     0x2    mv a0,a4
    0x84013b76     0x4    beqz a4,ffffffff84013bd2 <copyMRs+0x60>
    0x84013b78     0x6    ld a4,88(a5)
    0x84013b7a     0x8    sd a4,88(a2)
    0x84013b7c     0xa    li a4,1
    0x84013b7e     0xc    bgeu a4,a0,ffffffff84013bc6 <copyMRs+0x54>
    0x84013b82    0x10    ld a4,96(a5)
    0x84013b84    0x12    sd a4,96(a2)
    0x84013b86    0x14    li a4,2
    0x84013b88    0x16    bgeu a4,a0,ffffffff84013bca <copyMRs+0x58>
    0x84013b8c    0x1a    ld a4,104(a5)
    0x84013b8e    0x1c    sd a4,104(a2)
    0x84013b90    0x1e    li a4,3
    0x84013b92    0x20    bgeu a4,a0,ffffffff84013bce <copyMRs+0x5c>
    0x84013b96    0x24    ld a5,112(a5)
    0x84013b98    0x26    sd a5,112(a2)
    0x84013b9a    0x28    li a5,4
    0x84013b9c    0x2a    beqz a3,ffffffff84013bd6 <copyMRs+0x64>
    0x84013b9e    0x2c    beqz a1,ffffffff84013bda <copyMRs+0x68>
    0x84013ba0    0x2e    bgeu a5,a0,ffffffff84013bde <copyMRs+0x6c>
    0x84013ba4    0x32    addi a5,a5,1
    0x84013ba6    0x34    slli a5,a5,0x3
    0x84013ba8    0x36    addi a4,a0,1
    0x84013bac    0x3a    slli a4,a4,0x3
    0x84013bae    0x3c    add a2,a1,a5
    0x84013bb2    0x40    ld a6,0(a2)
    0x84013bb6    0x44    add a2,a3,a5
    0x84013bba    0x48    sd a6,0(a2)
    0x84013bbe    0x4c    addi a5,a5,8
    0x84013bc0    0x4e    bne a5,a4,ffffffff84013bae <copyMRs+0x3c>
    0x84013bc4    0x52    ret
    0x84013bc6    0x54    li a5,1
    0x84013bc8    0x56    j ffffffff84013b9c <copyMRs+0x2a>
    0x84013bca    0x58    li a5,2
    0x84013bcc    0x5a    j ffffffff84013b9c <copyMRs+0x2a>
    0x84013bce    0x5c    li a5,3
    0x84013bd0    0x5e    j ffffffff84013b9c <copyMRs+0x2a>
    0x84013bd2    0x60    mv a5,a4
    0x84013bd4    0x62    j ffffffff84013b9c <copyMRs+0x2a>
    0x84013bd6    0x64    mv a0,a5
    0x84013bd8    0x66    ret
    0x84013bda    0x68    mv a0,a5
    0x84013bdc    0x6a    ret
    0x84013bde    0x6c    mv a0,a5
    0x84013be0    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 76 nodes.

Section setExtraBadge (19 of 266)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x84013a7a    0x0    addi a2,a2,122 # fffffffff800007a <ki_end+0x73fd107a>
    0x84013a7e    0x4    slli a2,a2,0x3
    0x84013a80    0x6    add a2,a2,a0
    0x84013a82    0x8    sd a1,0(a2)
    0x84013a84    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (20 of 266)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x84013a6e    0x0    addi a1,a1,122
    0x84013a72    0x4    slli a1,a1,0x3
    0x84013a74    0x6    add a1,a1,a0
    0x84013a76    0x8    ld a0,0(a1)
    0x84013a78    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbEPDequeue (21 of 266)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 19 instructions.

RVC_TTT___________TF..
RVC_FTT_FT________TF.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

Section `tcbEPDequeue` expects pointer to stack in a0.
8 stack accesses found. Annotated code for `tcbEPDequeue`:

    0x84012b00     0x0    addi sp,sp,-32
    0x84012b02     0x2    mv a5,a0
    0x84012b04     0x4    sd a1,0(sp)           ; stack access
    0x84012b06     0x6    mv a1,a2
    0x84012b08     0x8    ld a4,416(a0)         ; stack access
    0x84012b0c     0xc    beqz a4,ffffffff84012b2a <tcbEPDequeue+0x2a>
    0x84012b0e     0xe    ld a0,0(sp)           ; stack access
    0x84012b10    0x10    ld a3,408(a5)         ; stack access
    0x84012b14    0x14    sd a3,408(a4)
    0x84012b18    0x18    ld a4,408(a5)         ; stack access
    0x84012b1c    0x1c    beqz a4,ffffffff84012b30 <tcbEPDequeue+0x30>
    0x84012b1e    0x1e    ld a5,416(a5)         ; stack access
    0x84012b22    0x22    sd a5,416(a4)
    0x84012b26    0x26    addi sp,sp,32
    0x84012b28    0x28    ret
    0x84012b2a    0x2a    ld a0,408(a0)         ; stack access
    0x84012b2e    0x2e    j ffffffff84012b18 <tcbEPDequeue+0x18>
    0x84012b30    0x30    ld a1,416(a5)         ; stack access
    0x84012b34    0x34    j ffffffff84012b26 <tcbEPDequeue+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 34 nodes.

Section tcbEPAppend (22 of 266)
===============================

Deriving specifications
-----------------------

Section `tcbEPAppend` consists of 10 instructions.


Stack analysis
---------------

Section `tcbEPAppend` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `tcbEPAppend`:

    0x84012ae6     0x0    addi sp,sp,-32
    0x84012ae8     0x2    mv a5,a0
    0x84012aea     0x4    beqz a1,ffffffff84012af2 <tcbEPAppend+0xc>
    0x84012aec     0x6    mv a0,a1
    0x84012aee     0x8    sd a5,408(a2)
    0x84012af2     0xc    sd a2,416(a5)         ; stack access
    0x84012af6    0x10    sd zero,408(a5)       ; stack access
    0x84012afa    0x14    mv a1,a5
    0x84012afc    0x16    addi sp,sp,32
    0x84012afe    0x18    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPAppend` has 16 nodes.

Section tcbSchedDequeue (23 of 266)
===================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 60 instructions.

AUIPC.
SRLI..
SLL.....
XORI..
RVC_TFFTFT___T____TF.
AND.....
RVC_TFFFTT___TT___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x84012770     0x0    ld a5,288(a0)
    0x84012774     0x4    andi a5,a5,1
    0x84012776     0x6    beqz a5,ffffffff840127c4 <tcbSchedDequeue+0x54>
    0x84012778     0x8    ld a2,344(a0)
    0x8401277c     0xc    ld a3,360(a0)
    0x84012780    0x10    slli a5,a2,0x8
    0x84012784    0x14    add a5,a5,a3
    0x84012786    0x16    slli a5,a5,0x4
    0x84012788    0x18    auipc a4,0xb
    0x8401278c    0x1c    addi a4,a4,1744 # ffffffff8401de58 <ksReadyQueues>
    0x84012790    0x20    add a5,a5,a4
    0x84012792    0x22    ld a6,8(a5)
    0x84012796    0x26    ld a4,400(a0)
    0x8401279a    0x2a    beqz a4,ffffffff840127c6 <tcbSchedDequeue+0x56>
    0x8401279c    0x2c    ld a1,0(a5)
    0x8401279e    0x2e    ld a3,392(a0)
    0x840127a2    0x32    sd a3,392(a4)
    0x840127a6    0x36    ld a4,392(a0)
    0x840127aa    0x3a    beqz a4,ffffffff84012820 <tcbSchedDequeue+0xb0>
    0x840127ac    0x3c    ld a3,400(a0)
    0x840127b0    0x40    sd a3,400(a4)
    0x840127b4    0x44    sd a1,0(a5)
    0x840127b6    0x46    sd a6,8(a5)
    0x840127ba    0x4a    ld a5,288(a0)
    0x840127be    0x4e    andi a5,a5,-2
    0x840127c0    0x50    sd a5,288(a0)
    0x840127c4    0x54    ret
    0x840127c6    0x56    ld a1,392(a0)
    0x840127ca    0x5a    bnez a1,ffffffff8401281c <tcbSchedDequeue+0xac>
    0x840127cc    0x5c    srli t1,a3,0x6
    0x840127d0    0x60    li a4,3
    0x840127d2    0x62    sub a7,a4,t1
    0x840127d6    0x66    li a4,1
    0x840127d8    0x68    sll a3,a4,a3
    0x840127dc    0x6c    not a3,a3
    0x840127e0    0x70    slli a4,a2,0x2
    0x840127e4    0x74    add a4,a4,a7
    0x840127e6    0x76    slli a4,a4,0x3
    0x840127e8    0x78    auipc a7,0x1c
    0x840127ec    0x7c    addi a7,a7,40 # ffffffff8402e810 <ksReadyQueuesL2Bitmap>
    0x840127f0    0x80    add a4,a4,a7
    0x840127f2    0x82    ld a7,0(a4)
    0x840127f6    0x86    and a3,a3,a7
    0x840127fa    0x8a    sd a3,0(a4)
    0x840127fc    0x8c    bnez a3,ffffffff840127a6 <tcbSchedDequeue+0x36>
    0x840127fe    0x8e    slli a2,a2,0x3
    0x84012800    0x90    auipc a4,0x1c
    0x84012804    0x94    addi a4,a4,536 # ffffffff8402ea18 <ksReadyQueuesL1Bitmap>
    0x84012808    0x98    add a2,a2,a4
    0x8401280a    0x9a    li a4,1
    0x8401280c    0x9c    sll a4,a4,t1
    0x84012810    0xa0    not a4,a4
    0x84012814    0xa4    ld a3,0(a2)
    0x84012816    0xa6    and a4,a4,a3
    0x84012818    0xa8    sd a4,0(a2)
    0x8401281a    0xaa    j ffffffff840127a6 <tcbSchedDequeue+0x36>
    0x8401281c    0xac    mv a4,a1
    0x8401281e    0xae    j ffffffff840127ac <tcbSchedDequeue+0x3c>
    0x84012820    0xb0    ld a6,400(a0)
    0x84012824    0xb4    j ffffffff840127b4 <tcbSchedDequeue+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 92 nodes.

Section tcbSchedAppend (24 of 266)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 47 instructions.

ORI..
RVC_TFFTT____FT___TF.
OR.....
RVC_TFFTFT___FFT__TF.
RVC_TFFFTT___TF___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x84012690     0x0    ld a5,288(a0)
    0x84012694     0x4    andi a5,a5,1
    0x84012696     0x6    bnez a5,ffffffff840126d4 <tcbSchedAppend+0x44>
    0x84012698     0x8    ld a4,344(a0)
    0x8401269c     0xc    ld a1,360(a0)
    0x840126a0    0x10    slli a5,a4,0x8
    0x840126a4    0x14    add a5,a5,a1
    0x840126a6    0x16    slli a5,a5,0x4
    0x840126a8    0x18    auipc a3,0xb
    0x840126ac    0x1c    addi a3,a3,1968 # ffffffff8401de58 <ksReadyQueues>
    0x840126b0    0x20    add a5,a5,a3
    0x840126b2    0x22    ld a3,0(a5)
    0x840126b4    0x24    ld a2,8(a5)
    0x840126b6    0x26    beqz a3,ffffffff840126d6 <tcbSchedAppend+0x46>
    0x840126b8    0x28    sd a0,392(a2)
    0x840126bc    0x2c    sd a2,400(a0)
    0x840126c0    0x30    sd zero,392(a0)
    0x840126c4    0x34    sd a3,0(a5)
    0x840126c6    0x36    sd a0,8(a5)
    0x840126c8    0x38    ld a5,288(a0)
    0x840126cc    0x3c    ori a5,a5,1
    0x840126d0    0x40    sd a5,288(a0)
    0x840126d4    0x44    ret
    0x840126d6    0x46    srli a7,a1,0x6
    0x840126da    0x4a    li t1,3
    0x840126dc    0x4c    sub t1,t1,a7
    0x840126e0    0x50    slli a3,a4,0x3
    0x840126e4    0x54    auipc a6,0x1c
    0x840126e8    0x58    addi a6,a6,820 # ffffffff8402ea18 <ksReadyQueuesL1Bitmap>
    0x840126ec    0x5c    add a6,a6,a3
    0x840126ee    0x5e    li a3,1
    0x840126f0    0x60    sll a7,a3,a7
    0x840126f4    0x64    ld t3,0(a6)
    0x840126f8    0x68    or a7,t3,a7
    0x840126fc    0x6c    sd a7,0(a6)
    0x84012700    0x70    slli a4,a4,0x2
    0x84012702    0x72    add a4,a4,t1
    0x84012704    0x74    slli a4,a4,0x3
    0x84012706    0x76    auipc a6,0x1c
    0x8401270a    0x7a    addi a6,a6,266 # ffffffff8402e810 <ksReadyQueuesL2Bitmap>
    0x8401270e    0x7e    add a4,a4,a6
    0x84012710    0x80    sll a1,a3,a1
    0x84012714    0x84    ld a3,0(a4)
    0x84012716    0x86    or a1,a1,a3
    0x84012718    0x88    sd a1,0(a4)
    0x8401271a    0x8a    mv a3,a0
    0x8401271c    0x8c    j ffffffff840126bc <tcbSchedAppend+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 68 nodes.

Section tcbSchedEnqueue (25 of 266)
===================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 47 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x840121e4     0x0    ld a5,288(a0) # fffffffff8000120 <ki_end+0x73fd1120>
    0x840121e8     0x4    andi a5,a5,1
    0x840121ea     0x6    bnez a5,ffffffff84012228 <tcbSchedEnqueue+0x44>
    0x840121ec     0x8    ld a4,344(a0)
    0x840121f0     0xc    ld a1,360(a0)
    0x840121f4    0x10    slli a5,a4,0x8
    0x840121f8    0x14    add a5,a5,a1
    0x840121fa    0x16    slli a5,a5,0x4
    0x840121fc    0x18    auipc a3,0xc
    0x84012200    0x1c    addi a3,a3,-932 # ffffffff8401de58 <ksReadyQueues>
    0x84012204    0x20    add a5,a5,a3
    0x84012206    0x22    ld a2,0(a5)
    0x84012208    0x24    ld a3,8(a5)
    0x8401220a    0x26    beqz a3,ffffffff8401222a <tcbSchedEnqueue+0x46>
    0x8401220c    0x28    sd a0,400(a2)
    0x84012210    0x2c    sd zero,400(a0)
    0x84012214    0x30    sd a2,392(a0)
    0x84012218    0x34    sd a0,0(a5)
    0x8401221a    0x36    sd a3,8(a5)
    0x8401221c    0x38    ld a5,288(a0)
    0x84012220    0x3c    ori a5,a5,1
    0x84012224    0x40    sd a5,288(a0)
    0x84012228    0x44    ret
    0x8401222a    0x46    srli a7,a1,0x6
    0x8401222e    0x4a    li t1,3
    0x84012230    0x4c    sub t1,t1,a7
    0x84012234    0x50    slli a3,a4,0x3
    0x84012238    0x54    auipc a6,0x1c
    0x8401223c    0x58    addi a6,a6,2016 # ffffffff8402ea18 <ksReadyQueuesL1Bitmap>
    0x84012240    0x5c    add a6,a6,a3
    0x84012242    0x5e    li a3,1
    0x84012244    0x60    sll a7,a3,a7
    0x84012248    0x64    ld t3,0(a6)
    0x8401224c    0x68    or a7,t3,a7
    0x84012250    0x6c    sd a7,0(a6)
    0x84012254    0x70    slli a4,a4,0x2
    0x84012256    0x72    add a4,a4,t1
    0x84012258    0x74    slli a4,a4,0x3
    0x8401225a    0x76    auipc a6,0x1c
    0x8401225e    0x7a    addi a6,a6,1462 # ffffffff8402e810 <ksReadyQueuesL2Bitmap>
    0x84012262    0x7e    add a4,a4,a6
    0x84012264    0x80    sll a1,a3,a1
    0x84012268    0x84    ld a3,0(a4)
    0x8401226a    0x86    or a1,a1,a3
    0x8401226c    0x88    sd a1,0(a4)
    0x8401226e    0x8a    mv a3,a0
    0x84012270    0x8c    j ffffffff84012210 <tcbSchedEnqueue+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 68 nodes.

Section updateCapData (26 of 266)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 58 instructions.

BEQ..

Stack analysis
---------------

Section `updateCapData` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `updateCapData`:

    0x84011f14     0x0    addi sp,sp,-32
    0x84011f16     0x2    slli a4,a2,0x4
    0x84011f1a     0x6    bltz a4,ffffffff84011f3a <updateCapData+0x26>
    0x84011f1e     0xa    srli a5,a2,0x3b
    0x84011f22     0xe    li a4,6
    0x84011f24    0x10    beq a5,a4,ffffffff84011f56 <updateCapData+0x42>
    0x84011f28    0x14    li a4,10
    0x84011f2a    0x16    beq a5,a4,ffffffff84011f66 <updateCapData+0x52>
    0x84011f2e    0x1a    li a4,4
    0x84011f30    0x1c    beq a5,a4,ffffffff84011f46 <updateCapData+0x32>
    0x84011f34    0x20    sd a2,16(sp)          ; stack access
    0x84011f36    0x22    sd a3,24(sp)          ; stack access
    0x84011f38    0x24    j ffffffff84011f3e <updateCapData+0x2a>
    0x84011f3a    0x26    sd a2,16(sp)          ; stack access
    0x84011f3c    0x28    sd a3,24(sp)          ; stack access
    0x84011f3e    0x2a    ld a0,16(sp)          ; stack access
    0x84011f40    0x2c    ld a1,24(sp)          ; stack access
    0x84011f42    0x2e    addi sp,sp,32
    0x84011f44    0x30    ret
    0x84011f46    0x32    or a3,a3,a0
    0x84011f48    0x34    bnez a3,ffffffff84011f50 <updateCapData+0x3c>
    0x84011f4a    0x36    sd a2,16(sp)          ; stack access
    0x84011f4c    0x38    sd a1,24(sp)          ; stack access
    0x84011f4e    0x3a    j ffffffff84011f3e <updateCapData+0x2a>
    0x84011f50    0x3c    sd zero,16(sp)        ; stack access
    0x84011f52    0x3e    sd zero,24(sp)        ; stack access
    0x84011f54    0x40    j ffffffff84011f3e <updateCapData+0x2a>
    0x84011f56    0x42    or a3,a3,a0
    0x84011f58    0x44    bnez a3,ffffffff84011f60 <updateCapData+0x4c>
    0x84011f5a    0x46    sd a2,16(sp)          ; stack access
    0x84011f5c    0x48    sd a1,24(sp)          ; stack access
    0x84011f5e    0x4a    j ffffffff84011f3e <updateCapData+0x2a>
    0x84011f60    0x4c    sd zero,16(sp)        ; stack access
    0x84011f62    0x4e    sd zero,24(sp)        ; stack access
    0x84011f64    0x50    j ffffffff84011f3e <updateCapData+0x2a>
    0x84011f66    0x52    andi a4,a1,63
    0x84011f6a    0x56    srli a5,a2,0x2f
    0x84011f6e    0x5a    andi a5,a5,63
    0x84011f72    0x5e    add a5,a5,a4
    0x84011f74    0x60    li a3,64
    0x84011f78    0x64    bgeu a3,a5,ffffffff84011f82 <updateCapData+0x6e>
    0x84011f7c    0x68    sd zero,16(sp)        ; stack access
    0x84011f7e    0x6a    sd zero,24(sp)        ; stack access
    0x84011f80    0x6c    j ffffffff84011f3e <updateCapData+0x2a>
    0x84011f82    0x6e    li a5,-63
    0x84011f86    0x72    slli a5,a5,0x35
    0x84011f88    0x74    addi a5,a5,-1
    0x84011f8a    0x76    and a2,a2,a5
    0x84011f8c    0x78    slli a5,a4,0x35
    0x84011f90    0x7c    or a2,a2,a5
    0x84011f92    0x7e    sd a2,16(sp)          ; stack access
    0x84011f94    0x80    li a5,-1
    0x84011f96    0x82    sll a5,a5,a4
    0x84011f9a    0x86    not a5,a5
    0x84011f9e    0x8a    srli a1,a1,0x6
    0x84011fa0    0x8c    and a1,a1,a5
    0x84011fa2    0x8e    sd a1,24(sp)          ; stack access
    0x84011fa4    0x90    j ffffffff84011f3e <updateCapData+0x2a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 91 nodes.

Section hasCancelSendRights (27 of 266)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 20 instructions.

RVC_FFFFFFFT______FT.
RVC_TFFFTT___FF___FT..
SLTIU..

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x84011880     0x0    addi sp,sp,-16
    0x84011882     0x2    srli a4,a0,0x3b
    0x84011886     0x6    li a5,4
    0x84011888     0x8    beq a4,a5,ffffffff84011892 <hasCancelSendRights+0x12>
    0x8401188c     0xc    li a0,0
    0x8401188e     0xe    addi sp,sp,16
    0x84011890    0x10    ret
    0x84011892    0x12    li a4,3
    0x84011894    0x14    slli a4,a4,0x37
    0x84011896    0x16    and a3,a0,a4
    0x8401189a    0x1a    li a5,0
    0x8401189c    0x1c    beq a3,a4,ffffffff840118a4 <hasCancelSendRights+0x24>
    0x840118a0    0x20    mv a0,a5
    0x840118a2    0x22    j ffffffff8401188e <hasCancelSendRights+0xe>
    0x840118a4    0x24    li a5,3
    0x840118a6    0x26    slli a5,a5,0x39
    0x840118a8    0x28    and a0,a0,a5
    0x840118aa    0x2a    sub a0,a0,a5
    0x840118ac    0x2c    seqz a5,a0
    0x840118b0    0x30    j ffffffff840118a0 <hasCancelSendRights+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 25 nodes.

Section bindNotification (28 of 266)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84011820     0x0    ld a4,24(a1)
    0x84011822     0x2    li a5,-1
    0x84011824     0x4    slli a3,a5,0x27
    0x84011828     0x8    and a4,a4,a3
    0x8401182a     0xa    srli a5,a5,0x19
    0x8401182c     0xc    and a5,a5,a0
    0x8401182e     0xe    or a5,a5,a4
    0x84011830    0x10    sd a5,24(a1)
    0x84011832    0x12    sd a1,304(a0)
    0x84011836    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (29 of 266)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x8401180c     0x0    ld a4,304(a0)
    0x84011810     0x4    beqz a4,ffffffff8401181e <unbindNotification+0x12>
    0x84011812     0x6    ld a5,24(a4)
    0x84011814     0x8    srli a5,a5,0x27
    0x84011816     0xa    slli a5,a5,0x27
    0x84011818     0xc    sd a5,24(a4)
    0x8401181a     0xe    sd zero,304(a0)
    0x8401181e    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (30 of 266)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 15 instructions.

BGE..

Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x840117e6     0x0    ld a4,24(a0)
    0x840117e8     0x2    slli a5,a4,0x19
    0x840117ec     0x6    srli a5,a5,0x19
    0x840117ee     0x8    slli a3,a4,0x19
    0x840117f2     0xc    bgez a3,ffffffff84011808 <unbindMaybeNotification+0x22>
    0x840117f6    0x10    li a3,-1
    0x840117f8    0x12    slli a3,a3,0x27
    0x840117fa    0x14    or a5,a5,a3
    0x840117fc    0x16    srli a4,a4,0x27
    0x840117fe    0x18    slli a4,a4,0x27
    0x84011800    0x1a    sd a4,24(a0)
    0x84011802    0x1c    sd zero,304(a5) # fffffffff8000130 <ki_end+0x73fd1130>
    0x84011806    0x20    j ffffffff8401180a <unbindMaybeNotification+0x24>
    0x84011808    0x22    bnez a5,ffffffff840117fc <unbindMaybeNotification+0x16>
    0x8401180a    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 23 nodes.

Section setIRQState (31 of 266)
===============================

Deriving specifications
-----------------------

Section `setIRQState` consists of 35 instructions.

LUI.
RVC_FTF___________FF..
RVC_TTF___________FF..
Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `setIRQState`:

    0x84011696     0x0    slli a4,a1,0x3
    0x8401169a     0x4    auipc a5,0xc
    0x8401169e     0x8    addi a5,a5,1534 # ffffffff8401dc98 <intStateIRQTable>
    0x840116a2     0xc    add a5,a5,a4
    0x840116a4     0xe    sd a0,0(a5)
    0x840116a6    0x10    li a5,54
    0x840116aa    0x14    beq a1,a5,ffffffff840116da <setIRQState+0x44>
    0x840116ae    0x18    andi a3,a1,31
    0x840116b2    0x1c    srli a1,a1,0x5
    0x840116b4    0x1e    slli a1,a1,0x2
    0x840116b6    0x20    lui a4,0xcc002
    0x840116ba    0x24    addi a4,a4,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x840116be    0x28    add a1,a1,a4
    0x840116c0    0x2a    lw a5,0(a1)
    0x840116c2    0x2c    sext.w a4,a5
    0x840116c6    0x30    bnez a0,ffffffff840116f0 <setIRQState+0x5a>
    0x840116c8    0x32    li a5,1
    0x840116ca    0x34    sll a5,a5,a3
    0x840116ce    0x38    not a5,a5
    0x840116d2    0x3c    and a5,a5,a4
    0x840116d4    0x3e    sext.w a5,a5
    0x840116d6    0x40    sw a5,0(a1)
    0x840116d8    0x42    ret
    0x840116da    0x44    bnez a0,ffffffff840116e6 <setIRQState+0x50>
    0x840116dc    0x46    li a5,32
    0x840116e0    0x4a    csrrc a5,sie,a5
    0x840116e4    0x4e    ret
    0x840116e6    0x50    li a5,32
    0x840116ea    0x54    csrrs a5,sie,a5
    0x840116ee    0x58    ret
    0x840116f0    0x5a    li a5,1
    0x840116f2    0x5c    sll a5,a5,a3
    0x840116f6    0x60    or a5,a5,a4
    0x840116f8    0x62    sext.w a5,a5
    0x840116fa    0x64    j ffffffff840116d6 <setIRQState+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 49 nodes.

Section isIRQActive (32 of 266)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 7 instructions.

SLTU.....

Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x84011680     0x0    slli a5,a0,0x3
    0x84011684     0x4    auipc a0,0xc
    0x84011688     0x8    addi a0,a0,1556 # ffffffff8401dc98 <intStateIRQTable>
    0x8401168c     0xc    add a0,a0,a5
    0x8401168e     0xe    ld a0,0(a0)
    0x84011690    0x10    snez a0,a0
    0x84011694    0x14    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 9 nodes.

Section invokeIRQHandler_AckIRQ (33 of 266)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x84011676    0x0    sext.w a0,a0
    0x84011678    0x2    lui a5,0xcc202
    0x8401167c    0x6    sw a0,4(a5)
    0x8401167e    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 6 nodes.

Section replyFromKernel_success_empty (34 of 266)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x8401166c    0x0    sd zero,72(a0)
    0x84011670    0x4    sd zero,80(a0)
    0x84011674    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (35 of 266)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x84011658     0x0    ld a3,1008(a1)
    0x8401165c     0x4    ld a4,1016(a1)
    0x84011660     0x8    ld a2,1000(a1)
    0x84011664     0xc    sd a2,0(a0)           ; stack access
    0x84011666     0xe    sd a3,8(a0)           ; stack access
    0x84011668    0x10    sd a4,16(a0)          ; stack access
    0x8401166a    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (36 of 266)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x840115e6     0x0    ld a0,0(a0)
    0x840115e8     0x2    srli a0,a0,0x3b
    0x840115ea     0x4    bnez a0,ffffffff840115ee <ensureEmptySlot+0x8>
    0x840115ec     0x6    ret
    0x840115ee     0x8    li a5,8
    0x840115f0     0xa    auipc a4,0xc
    0x840115f4     0xe    sd a5,1672(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840115f8    0x12    li a0,3
    0x840115fa    0x14    j ffffffff840115ec <ensureEmptySlot+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 14 nodes.

Section setupReplyMaster (37 of 266)
====================================

Deriving specifications
-----------------------

Section `setupReplyMaster` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setupReplyMaster`:

    0x840115c8     0x0    andi a4,a0,-1024
    0x840115cc     0x4    ld a5,64(a4)
    0x840115ce     0x6    srli a5,a5,0x3b
    0x840115d0     0x8    bnez a5,ffffffff840115e4 <setupReplyMaster+0x1c>
    0x840115d2     0xa    li a5,1
    0x840115d4     0xc    slli a5,a5,0x3e
    0x840115d6     0xe    addi a5,a5,3
    0x840115d8    0x10    sd a5,64(a4)
    0x840115da    0x12    sd a0,72(a4)
    0x840115dc    0x14    sd zero,80(a4) # fffffffff8000050 <ki_end+0x73fd1050>
    0x840115e0    0x18    li a5,3
    0x840115e2    0x1a    sd a5,88(a4)
    0x840115e4    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupReplyMaster` has 21 nodes.

Section insertNewCap (38 of 266)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 42 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `insertNewCap`:

    0x84011568     0x0    addi sp,sp,-16
    0x8401156a     0x2    sd a2,0(sp)           ; stack access
    0x8401156c     0x4    sd a3,8(sp)           ; stack access
    0x8401156e     0x6    ld a4,24(a0)
    0x84011570     0x8    lui a5,0xf8000
    0x84011574     0xc    srli a5,a5,0x19
    0x84011576     0xe    and a5,a5,a4
    0x84011578    0x10    slli a3,a4,0x19
    0x8401157c    0x14    bgez a3,ffffffff84011598 <insertNewCap+0x30>
    0x84011580    0x18    li a4,-1
    0x84011582    0x1a    slli a4,a4,0x27
    0x84011584    0x1c    or a4,a4,a5
    0x84011586    0x1e    sd a2,0(a1)
    0x84011588    0x20    ld a3,8(sp)           ; stack access
    0x8401158a    0x22    sd a3,8(a1)
    0x8401158c    0x24    sd a0,16(a1)
    0x8401158e    0x26    ori a5,a5,3
    0x84011592    0x2a    sd a5,24(a1)
    0x84011594    0x2c    sd a1,16(a4)
    0x84011596    0x2e    j ffffffff840115aa <insertNewCap+0x42>
    0x84011598    0x30    ld a4,0(sp)           ; stack access
    0x8401159a    0x32    sd a4,0(a1)
    0x8401159c    0x34    ld a4,8(sp)           ; stack access
    0x8401159e    0x36    sd a4,8(a1)
    0x840115a0    0x38    sd a0,16(a1)
    0x840115a2    0x3a    ori a4,a5,3
    0x840115a6    0x3e    sd a4,24(a1)
    0x840115a8    0x40    bnez a5,ffffffff840115c4 <insertNewCap+0x5c>
    0x840115aa    0x42    ld a5,24(a0)
    0x840115ac    0x44    li a4,-1
    0x840115ae    0x46    slli a4,a4,0x27
    0x840115b0    0x48    addi a4,a4,3
    0x840115b2    0x4a    and a5,a5,a4
    0x840115b4    0x4c    lui a4,0xf8000
    0x840115b8    0x50    srli a4,a4,0x19
    0x840115ba    0x52    and a1,a1,a4
    0x840115bc    0x54    or a1,a1,a5
    0x840115be    0x56    sd a1,24(a0)
    0x840115c0    0x58    addi sp,sp,16
    0x840115c2    0x5a    ret
    0x840115c4    0x5c    mv a4,a5
    0x840115c6    0x5e    j ffffffff84011594 <insertNewCap+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 64 nodes.

Section cteSwap (39 of 266)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 63 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x84011472     0x0    addi sp,sp,-32
    0x84011474     0x2    sd a0,16(sp)          ; stack access
    0x84011476     0x4    sd a1,24(sp)          ; stack access
    0x84011478     0x6    sd a3,0(sp)           ; stack access
    0x8401147a     0x8    sd a4,8(sp)           ; stack access
    0x8401147c     0xa    sd a3,0(a2)
    0x8401147e     0xc    sd a4,8(a2)
    0x84011480     0xe    sd a0,0(a5)
    0x84011482    0x10    sd a1,8(a5)
    0x84011484    0x12    ld a0,16(a2)
    0x84011486    0x14    ld a1,24(a2)
    0x84011488    0x16    beqz a0,ffffffff840114a0 <cteSwap+0x2e>
    0x8401148a    0x18    ld a4,24(a0)
    0x8401148c    0x1a    li a3,-1
    0x8401148e    0x1c    slli a3,a3,0x27
    0x84011490    0x1e    addi a3,a3,3
    0x84011492    0x20    and a4,a4,a3
    0x84011494    0x22    lui a3,0xf8000
    0x84011498    0x26    srli a3,a3,0x19
    0x8401149a    0x28    and a3,a3,a5
    0x8401149c    0x2a    or a4,a4,a3
    0x8401149e    0x2c    sd a4,24(a0)
    0x840114a0    0x2e    lui a4,0xf8000
    0x840114a4    0x32    srli a4,a4,0x19
    0x840114a6    0x34    and a4,a4,a1
    0x840114a8    0x36    slli a3,a1,0x19
    0x840114ac    0x3a    bgez a3,ffffffff840114ba <cteSwap+0x48>
    0x840114b0    0x3e    li a3,-1
    0x840114b2    0x40    slli a3,a3,0x27
    0x840114b4    0x42    or a4,a4,a3
    0x840114b6    0x44    sd a5,16(a4)
    0x840114b8    0x46    j ffffffff840114bc <cteSwap+0x4a>
    0x840114ba    0x48    bnez a4,ffffffff840114b6 <cteSwap+0x44>
    0x840114bc    0x4a    ld a3,16(a5)
    0x840114be    0x4c    ld a4,24(a5)
    0x840114c0    0x4e    sd a3,16(a2)
    0x840114c2    0x50    sd a4,24(a2)
    0x840114c4    0x52    sd a0,16(a5)
    0x840114c6    0x54    sd a1,24(a5)
    0x840114c8    0x56    beqz a3,ffffffff840114e0 <cteSwap+0x6e>
    0x840114ca    0x58    ld a5,24(a3)
    0x840114cc    0x5a    li a1,-1
    0x840114ce    0x5c    slli a1,a1,0x27
    0x840114d0    0x5e    addi a1,a1,3
    0x840114d2    0x60    and a5,a5,a1
    0x840114d4    0x62    lui a1,0xf8000
    0x840114d8    0x66    srli a1,a1,0x19
    0x840114da    0x68    and a1,a1,a2
    0x840114dc    0x6a    or a5,a5,a1
    0x840114de    0x6c    sd a5,24(a3)
    0x840114e0    0x6e    lui a5,0xf8000
    0x840114e4    0x72    srli a5,a5,0x19
    0x840114e6    0x74    and a5,a5,a4
    0x840114e8    0x76    slli a3,a4,0x19
    0x840114ec    0x7a    bgez a3,ffffffff840114fa <cteSwap+0x88>
    0x840114f0    0x7e    li a4,-1
    0x840114f2    0x80    slli a4,a4,0x27
    0x840114f4    0x82    or a5,a5,a4
    0x840114f6    0x84    sd a2,16(a5)
    0x840114f8    0x86    j ffffffff840114fc <cteSwap+0x8a>
    0x840114fa    0x88    bnez a5,ffffffff840114f6 <cteSwap+0x84>
    0x840114fc    0x8a    addi sp,sp,32
    0x840114fe    0x8c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 98 nodes.

Section cteMove (40 of 266)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 37 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x840113c4     0x0    addi sp,sp,-16
    0x840113c6     0x2    sd a0,0(sp)           ; stack access
    0x840113c8     0x4    sd a1,8(sp)           ; stack access
    0x840113ca     0x6    ld a5,16(a2)
    0x840113cc     0x8    ld a4,24(a2)
    0x840113ce     0xa    sd a0,0(a3)
    0x840113d0     0xc    sd a1,8(a3)
    0x840113d2     0xe    sd zero,0(a2)
    0x840113d6    0x12    sd zero,8(a2)
    0x840113da    0x16    sd a5,16(a3)
    0x840113dc    0x18    sd a4,24(a3)
    0x840113de    0x1a    sd zero,16(a2)
    0x840113e2    0x1e    sd zero,24(a2)
    0x840113e6    0x22    beqz a5,ffffffff840113fe <cteMove+0x3a>
    0x840113e8    0x24    ld a2,24(a5)
    0x840113ea    0x26    li a1,-1
    0x840113ec    0x28    slli a1,a1,0x27
    0x840113ee    0x2a    addi a1,a1,3
    0x840113f0    0x2c    and a2,a2,a1
    0x840113f2    0x2e    lui a1,0xf8000
    0x840113f6    0x32    srli a1,a1,0x19
    0x840113f8    0x34    and a1,a1,a3
    0x840113fa    0x36    or a2,a2,a1
    0x840113fc    0x38    sd a2,24(a5)
    0x840113fe    0x3a    lui a5,0xf8000
    0x84011402    0x3e    srli a5,a5,0x19
    0x84011404    0x40    and a5,a5,a4
    0x84011406    0x42    slli a2,a4,0x19
    0x8401140a    0x46    bgez a2,ffffffff84011418 <cteMove+0x54>
    0x8401140e    0x4a    li a4,-1
    0x84011410    0x4c    slli a4,a4,0x27
    0x84011412    0x4e    or a5,a5,a4
    0x84011414    0x50    sd a3,16(a5)
    0x84011416    0x52    j ffffffff8401141a <cteMove+0x56>
    0x84011418    0x54    bnez a5,ffffffff84011414 <cteMove+0x50>
    0x8401141a    0x56    addi sp,sp,16
    0x8401141c    0x58    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 59 nodes.

Section cteInsert (41 of 266)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 107 instructions.

RVC_TFFFT____FT___TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x84011286      0x0    addi sp,sp,-16
    0x84011288      0x2    sd a0,0(sp)           ; stack access
    0x8401128a      0x4    sd a1,8(sp)           ; stack access
    0x8401128c      0x6    ld a4,24(a2)
    0x8401128e      0x8    ld a5,0(a2)
    0x84011290      0xa    ld t1,8(a2)
    0x84011294      0xe    srli a6,a0,0x3b
    0x84011298     0x12    slli a7,a0,0x4
    0x8401129c     0x16    bltz a7,ffffffff84011320 <cteInsert+0x9a>
    0x840112a0     0x1a    li a7,6
    0x840112a2     0x1c    beq a6,a7,ffffffff84011316 <cteInsert+0x90>
    0x840112a6     0x20    bltu a7,a6,ffffffff84011306 <cteInsert+0x80>
    0x840112aa     0x24    li a7,2
    0x840112ac     0x26    beq a6,a7,ffffffff8401134a <cteInsert+0xc4>
    0x840112b0     0x2a    li a0,4
    0x840112b2     0x2c    sub a5,a1,t1
    0x840112b6     0x30    snez a5,a5
    0x840112ba     0x34    bne a6,a0,ffffffff840113ae <cteInsert+0x128>
    0x840112be     0x38    mv a7,a2
    0x840112c0     0x3a    slli a1,a5,0x1
    0x840112c4     0x3e    andi a4,a4,-4
    0x840112c6     0x40    or a4,a4,a1
    0x840112c8     0x42    or a4,a4,a5
    0x840112ca     0x44    ld a5,0(sp)           ; stack access
    0x840112cc     0x46    sd a5,0(a3)
    0x840112ce     0x48    ld a5,8(sp)           ; stack access
    0x840112d0     0x4a    sd a5,8(a3)
    0x840112d2     0x4c    sd a7,16(a3)
    0x840112d6     0x50    sd a4,24(a3)
    0x840112d8     0x52    ld a1,24(a2)
    0x840112da     0x54    li a5,-1
    0x840112dc     0x56    slli a5,a5,0x27
    0x840112de     0x58    addi a5,a5,3
    0x840112e0     0x5a    and a1,a1,a5
    0x840112e2     0x5c    lui a5,0xf8000
    0x840112e6     0x60    srli a5,a5,0x19
    0x840112e8     0x62    and a0,a3,a5
    0x840112ec     0x66    or a1,a1,a0
    0x840112ee     0x68    sd a1,24(a2)
    0x840112f0     0x6a    and a5,a5,a4
    0x840112f2     0x6c    slli a2,a4,0x19
    0x840112f6     0x70    bgez a2,ffffffff84011346 <cteInsert+0xc0>
    0x840112fa     0x74    li a4,-1
    0x840112fc     0x76    slli a4,a4,0x27
    0x840112fe     0x78    or a5,a5,a4
    0x84011300     0x7a    sd a3,16(a5)
    0x84011302     0x7c    addi sp,sp,16
    0x84011304     0x7e    ret
    0x84011306     0x80    li a1,16
    0x84011308     0x82    bne a6,a1,ffffffff840113ae <cteInsert+0x128>
    0x8401130c     0x86    srli a5,a5,0x3b
    0x8401130e     0x88    addi a5,a5,-14
    0x84011310     0x8a    seqz a5,a5
    0x84011314     0x8e    j ffffffff840112be <cteInsert+0x38>
    0x84011316     0x90    sub a5,a1,t1
    0x8401131a     0x94    snez a5,a5
    0x8401131e     0x98    j ffffffff840112be <cteInsert+0x38>
    0x84011320     0x9a    mv a7,a2
    0x84011322     0x9c    andi a4,a4,-4
    0x84011324     0x9e    srli t3,a5,0x3b
    0x84011328     0xa2    li t4,2
    0x8401132a     0xa4    bne t3,t4,ffffffff840112ca <cteInsert+0x44>
    0x8401132e     0xa8    li t3,2
    0x84011330     0xaa    beq a6,t3,ffffffff8401135a <cteInsert+0xd4>
    0x84011334     0xae    j ffffffff840112ca <cteInsert+0x44>
    0x84011336     0xb0    slli a5,a0,0x19
    0x8401133a     0xb4    srli a5,a5,0x19
    0x8401133c     0xb6    slli t3,a0,0x19
    0x84011340     0xba    bltz t3,ffffffff84011380 <cteInsert+0xfa>
    0x84011344     0xbe    j ffffffff84011386 <cteInsert+0x100>
    0x84011346     0xc0    beqz a5,ffffffff84011302 <cteInsert+0x7c>
    0x84011348     0xc2    j ffffffff84011300 <cteInsert+0x7a>
    0x8401134a     0xc4    mv a7,a2
    0x8401134c     0xc6    ori a4,a4,3
    0x84011350     0xca    srli a6,a5,0x3b
    0x84011354     0xce    li t3,2
    0x84011356     0xd0    bne a6,t3,ffffffff840112ca <cteInsert+0x44>
    0x8401135a     0xd4    slli a6,a5,0x19
    0x8401135e     0xd8    srli a6,a6,0x19
    0x84011362     0xdc    slli t3,a5,0x19
    0x84011366     0xe0    bgez t3,ffffffff84011336 <cteInsert+0xb0>
    0x8401136a     0xe4    li a5,-1
    0x8401136c     0xe6    slli t3,a5,0x27
    0x84011370     0xea    or a6,a6,t3
    0x84011374     0xee    srli a5,a5,0x19
    0x84011376     0xf0    and a5,a5,a0
    0x84011378     0xf2    slli t3,a0,0x19
    0x8401137c     0xf6    bgez t3,ffffffff840112ca <cteInsert+0x44>
    0x84011380     0xfa    li a0,-1
    0x84011382     0xfc    slli a0,a0,0x27
    0x84011384     0xfe    or a5,a5,a0
    0x84011386    0x100    bne a5,a6,ffffffff840112ca <cteInsert+0x44>
    0x8401138a    0x104    andi t1,t1,63
    0x8401138e    0x108    andi a5,a1,63
    0x84011392    0x10c    bne a5,t1,ffffffff840112ca <cteInsert+0x44>
    0x84011396    0x110    addiw t1,t1,-4
    0x84011398    0x112    lui a5,0x2000
    0x8401139c    0x116    sll t1,a5,t1
    0x840113a0    0x11a    ld a5,8(a2)
    0x840113a2    0x11c    slli a5,a5,0x27
    0x840113a4    0x11e    srli a5,a5,0x27
    0x840113a6    0x120    or a5,t1,a5
    0x840113aa    0x124    sd a5,8(a2)
    0x840113ac    0x126    j ffffffff840112ca <cteInsert+0x44>
    0x840113ae    0x128    mv a7,a2
    0x840113b0    0x12a    andi a4,a4,-4
    0x840113b2    0x12c    j ffffffff840112ca <cteInsert+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
107 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 156 nodes.

Section preemptionPoint (42 of 266)
===================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 17 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `preemptionPoint`:

    0x84011250     0x0    auipc a5,0x1d
    0x84011254     0x4    ld a5,1984(a5) # ffffffff8402ea10 <ksWorkUnitsCompleted>
    0x84011258     0x8    addi a5,a5,1
    0x8401125a     0xa    li a4,99
    0x8401125e     0xe    bltu a4,a5,ffffffff8401126e <preemptionPoint+0x1e>
    0x84011262    0x12    auipc a4,0x1d
    0x84011266    0x16    sd a5,1966(a4) # ffffffff8402ea10 <ksWorkUnitsCompleted>
    0x8401126a    0x1a    li a0,0
    0x8401126c    0x1c    ret
    0x8401126e    0x1e    auipc a5,0x1d
    0x84011272    0x22    sd zero,1954(a5) # ffffffff8402ea10 <ksWorkUnitsCompleted>
    0x84011276    0x26    csrr a0,sip
    0x8401127a    0x2a    andi a0,a0,544
    0x8401127e    0x2e    bnez a0,ffffffff84011282 <preemptionPoint+0x32>
    0x84011280    0x30    ret
    0x84011282    0x32    li a0,4
    0x84011284    0x34    j ffffffff84011280 <preemptionPoint+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 27 nodes.

Section setMCPriority (43 of 266)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x8401124a    0x0    sd a1,352(a0)
    0x8401124e    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (44 of 266)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x84011226    0x0    sd zero,72(a0)
    0x8401122a    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section resolveAddressBits (45 of 266)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 97 instructions.

SRL.....
RVC_TFFTTT___FF___FT..
RVC_FTTFFT___T____FT.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
21 stack accesses found. Annotated code for `resolveAddressBits`:

    0x84010f0a      0x0    addi sp,sp,-32
    0x84010f0c      0x2    sd s0,24(sp)          ; stack access
    0x84010f0e      0x4    sd s1,16(sp)          ; stack access
    0x84010f10      0x6    sd a1,0(sp)           ; stack access
    0x84010f12      0x8    sd a2,8(sp)           ; stack access
    0x84010f14      0xa    srli a7,a1,0x3b
    0x84010f18      0xe    li a5,10
    0x84010f1a     0x10    bne a7,a5,ffffffff84010fa8 <resolveAddressBits+0x9e>
    0x84010f1e     0x14    mv a6,a4
    0x84010f20     0x16    li t5,-1
    0x84010f22     0x18    lui t0,0xfc000
    0x84010f26     0x1c    srli t0,t0,0x19
    0x84010f2a     0x20    li t6,1
    0x84010f2c     0x22    slli t6,t6,0x26
    0x84010f2e     0x24    slli t2,t5,0x27
    0x84010f32     0x28    li s0,10
    0x84010f34     0x2a    srli a7,a1,0x2f
    0x84010f38     0x2e    andi a7,a7,63
    0x84010f3c     0x32    srli t1,a1,0x35
    0x84010f40     0x36    andi t1,t1,63
    0x84010f44     0x3a    add s1,t1,a7
    0x84010f48     0x3e    sext.w a5,a6
    0x84010f4c     0x42    subw t3,a6,t1
    0x84010f50     0x46    srl t3,a3,t3
    0x84010f54     0x4a    sll t4,t5,t1
    0x84010f58     0x4e    not t4,t4
    0x84010f5c     0x52    and t3,t3,t4
    0x84010f60     0x56    bltu a6,t1,ffffffff84010fc4 <resolveAddressBits+0xba>
    0x84010f64     0x5a    bne a2,t3,ffffffff84010fc4 <resolveAddressBits+0xba>
    0x84010f68     0x5e    bltu a6,s1,ffffffff84010ff2 <resolveAddressBits+0xe8>
    0x84010f6c     0x62    subw a5,a5,s1
    0x84010f6e     0x64    srl a5,a3,a5
    0x84010f72     0x68    sll a7,t5,a7
    0x84010f76     0x6c    not a7,a7
    0x84010f7a     0x70    and a5,a5,a7
    0x84010f7e     0x74    slli a5,a5,0x5
    0x84010f80     0x76    slli a1,a1,0x1
    0x84010f82     0x78    and a2,a1,t0
    0x84010f86     0x7c    and a1,a1,t6
    0x84010f8a     0x80    beqz a1,ffffffff84010f90 <resolveAddressBits+0x86>
    0x84010f8c     0x82    or a2,a2,t2
    0x84010f90     0x86    add a5,a5,a2
    0x84010f92     0x88    bne a6,s1,ffffffff8401101a <resolveAddressBits+0x110>
    0x84010f96     0x8c    sd zero,0(a0) # fffffffff8000000 <ki_end+0x73fd1000>  ; stack access
    0x84010f9a     0x90    sd a5,8(a0)           ; stack access
    0x84010f9c     0x92    sd zero,16(a0)        ; stack access
    0x84010fa0     0x96    ld s0,24(sp)          ; stack access
    0x84010fa2     0x98    ld s1,16(sp)          ; stack access
    0x84010fa4     0x9a    addi sp,sp,32
    0x84010fa6     0x9c    ret
    0x84010fa8     0x9e    auipc a5,0xd
    0x84010fac     0xa2    addi a5,a5,-888 # ffffffff8401dc30 <current_lookup_fault>
    0x84010fb0     0xa6    sd zero,0(a5)
    0x84010fb4     0xaa    sd zero,8(a5)
    0x84010fb8     0xae    li a5,2
    0x84010fba     0xb0    sd a5,0(a0)           ; stack access
    0x84010fbc     0xb2    sd zero,8(a0)         ; stack access
    0x84010fc0     0xb6    sd a4,16(a0)          ; stack access
    0x84010fc2     0xb8    j ffffffff84010fa0 <resolveAddressBits+0x96>
    0x84010fc4     0xba    auipc a3,0xd
    0x84010fc8     0xbe    addi a3,a3,-916 # ffffffff8401dc30 <current_lookup_fault>
    0x84010fcc     0xc2    slli a6,a6,0x9
    0x84010fce     0xc4    lui a5,0x10
    0x84010fd0     0xc6    addi a5,a5,-1
    0x84010fd2     0xc8    and a6,a6,a5
    0x84010fd6     0xcc    slli t1,t1,0x2
    0x84010fd8     0xce    or t1,a6,t1
    0x84010fdc     0xd2    ori t1,t1,3
    0x84010fe0     0xd6    sd t1,0(a3)
    0x84010fe4     0xda    sd a2,8(a3)
    0x84010fe6     0xdc    li a5,2
    0x84010fe8     0xde    sd a5,0(a0)           ; stack access
    0x84010fea     0xe0    sd zero,8(a0)         ; stack access
    0x84010fee     0xe4    sd a4,16(a0)          ; stack access
    0x84010ff0     0xe6    j ffffffff84010fa0 <resolveAddressBits+0x96>
    0x84010ff2     0xe8    auipc a5,0xd
    0x84010ff6     0xec    addi a5,a5,-962 # ffffffff8401dc30 <current_lookup_fault>
    0x84010ffa     0xf0    slli s1,s1,0x9
    0x84010ffc     0xf2    slli a6,a6,0x2
    0x84010ffe     0xf4    or a6,s1,a6
    0x84011002     0xf8    ori a6,a6,2
    0x84011006     0xfc    sd a6,0(a5)
    0x8401100a    0x100    sd zero,8(a5)
    0x8401100e    0x104    li a5,2
    0x84011010    0x106    sd a5,0(a0)           ; stack access
    0x84011012    0x108    sd zero,8(a0)         ; stack access
    0x84011016    0x10c    sd a4,16(a0)          ; stack access
    0x84011018    0x10e    j ffffffff84010fa0 <resolveAddressBits+0x96>
    0x8401101a    0x110    sub a6,a6,s1
    0x8401101e    0x114    ld a1,0(a5)
    0x84011020    0x116    ld a2,8(a5)
    0x84011022    0x118    srli a7,a1,0x3b
    0x84011026    0x11c    beq a7,s0,ffffffff84010f34 <resolveAddressBits+0x2a>
    0x8401102a    0x120    sd zero,0(a0)         ; stack access
    0x8401102e    0x124    sd a5,8(a0)           ; stack access
    0x84011030    0x126    sd a6,16(a0)          ; stack access
    0x84011034    0x12a    j ffffffff84010fa0 <resolveAddressBits+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 141 nodes.

Section Arch_performTransfer (46 of 266)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x84010f06    0x0    li a0,0
    0x84010f08    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (47 of 266)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x84010f02    0x0    li a0,0
    0x84010f04    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (48 of 266)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x84010efa    0x0    addi a0,a0,-5
    0x84010efc    0x2    sltiu a0,a0,3
    0x84010f00    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (49 of 266)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x84010ef8    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_updateCapData (50 of 266)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

Section `Arch_updateCapData` expects pointer to stack in a0.
No stack accesses found. Code for `Arch_updateCapData`:

    0x84010ac2    0x0    addi sp,sp,-32
    0x84010ac4    0x2    mv a0,a2
    0x84010ac6    0x4    mv a1,a3
    0x84010ac8    0x6    addi sp,sp,32
    0x84010aca    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_checkIRQ (51 of 266)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84010a36     0x0    addi a0,a0,-1
    0x84010a38     0x2    li a5,53
    0x84010a3c     0x6    bltu a5,a0,ffffffff84010a44 <Arch_checkIRQ+0xe>
    0x84010a40     0xa    li a0,0
    0x84010a42     0xc    ret
    0x84010a44     0xe    auipc a5,0xd
    0x84010a48    0x12    addi a5,a5,516 # ffffffff8401dc48 <current_syscall_error>
    0x84010a4c    0x16    li a4,4
    0x84010a4e    0x18    sd a4,48(a5)
    0x84010a50    0x1a    li a4,1
    0x84010a52    0x1c    sd a4,16(a5)
    0x84010a54    0x1e    li a4,54
    0x84010a58    0x22    sd a4,24(a5)
    0x84010a5a    0x24    li a0,3
    0x84010a5c    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 22 nodes.

Section plat_cleanInvalidateL2Range (52 of 266)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84010a34    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (53 of 266)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84010a32    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (54 of 266)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84010a30    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section setIRQTrigger (55 of 266)
=================================

Deriving specifications
-----------------------

Section `setIRQTrigger` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setIRQTrigger`:

    0x84010a2e    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQTrigger` has 2 nodes.

Section setNextPC (56 of 266)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84010a28    0x0    sd a1,272(a0)
    0x84010a2c    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (57 of 266)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84010a22    0x0    ld a0,264(a0)
    0x84010a26    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (58 of 266)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x840109aa     0x0    addi sp,sp,-16
    0x840109ac     0x2    sd a0,0(sp)           ; stack access
    0x840109ae     0x4    sd a1,8(sp)           ; stack access
    0x840109b0     0x6    sd a0,0(a2)
    0x840109b2     0x8    sd a1,8(a2)
    0x840109b4     0xa    sd a3,0(a4)
    0x840109b6     0xc    sfence.vma
    0x840109ba    0x10    li a0,0
    0x840109bc    0x12    addi sp,sp,16
    0x840109be    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (59 of 266)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84010994     0x0    addi sp,sp,-16
    0x84010996     0x2    sd a0,0(sp)           ; stack access
    0x84010998     0x4    sd a1,8(sp)           ; stack access
    0x8401099a     0x6    sd a0,0(a2)
    0x8401099c     0x8    sd a1,8(a2)
    0x8401099e     0xa    sd a3,0(a4)
    0x840109a0     0xc    sfence.vma
    0x840109a4    0x10    li a0,0
    0x840109a6    0x12    addi sp,sp,16
    0x840109a8    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (60 of 266)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x84010968     0x0    mv a5,a0
    0x8401096a     0x2    li a4,2
    0x8401096c     0x4    beq a0,a4,ffffffff8401097a <maskVMRights+0x12>
    0x84010970     0x8    li a4,3
    0x84010972     0xa    li a0,1
    0x84010974     0xc    beq a5,a4,ffffffff84010984 <maskVMRights+0x1c>
    0x84010978    0x10    ret
    0x8401097a    0x12    srli a1,a1,0x1
    0x8401097c    0x14    andi a1,a1,1
    0x8401097e    0x16    addi a0,a1,1
    0x84010982    0x1a    ret
    0x84010984    0x1c    srli a5,a1,0x1
    0x84010988    0x20    andi a5,a5,1
    0x8401098a    0x22    beqz a5,ffffffff84010978 <maskVMRights+0x10>
    0x8401098c    0x24    andi a1,a1,1
    0x8401098e    0x26    addi a0,a1,2
    0x84010992    0x2a    j ffffffff84010978 <maskVMRights+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 25 nodes.

Section checkValidIPCBuffer (61 of 266)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 25 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x84010920     0x0    addi sp,sp,-16
    0x84010922     0x2    srli a4,a1,0x3b
    0x84010926     0x6    li a5,1
    0x84010928     0x8    bne a4,a5,ffffffff8401093e <checkValidIPCBuffer+0x1e>
    0x8401092c     0xc    slli a5,a1,0x9
    0x84010930    0x10    bltz a5,ffffffff8401094c <checkValidIPCBuffer+0x2c>
    0x84010934    0x14    andi a0,a0,1023
    0x84010938    0x18    bnez a0,ffffffff8401095a <checkValidIPCBuffer+0x3a>
    0x8401093a    0x1a    addi sp,sp,16
    0x8401093c    0x1c    ret
    0x8401093e    0x1e    li a5,3
    0x84010940    0x20    auipc a4,0xd
    0x84010944    0x24    sd a5,824(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84010948    0x28    li a0,3
    0x8401094a    0x2a    j ffffffff8401093a <checkValidIPCBuffer+0x1a>
    0x8401094c    0x2c    li a5,3
    0x8401094e    0x2e    auipc a4,0xd
    0x84010952    0x32    sd a5,810(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84010956    0x36    li a0,3
    0x84010958    0x38    j ffffffff8401093a <checkValidIPCBuffer+0x1a>
    0x8401095a    0x3a    li a5,5
    0x8401095c    0x3c    auipc a4,0xd
    0x84010960    0x40    sd a5,796(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84010964    0x44    li a0,3
    0x84010966    0x46    j ffffffff8401093a <checkValidIPCBuffer+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 35 nodes.

Section isValidVTableRoot (62 of 266)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x8401090a     0x0    addi sp,sp,-16
    0x8401090c     0x2    srli a4,a0,0x3b
    0x84010910     0x6    li a5,3
    0x84010912     0x8    srli a0,a0,0x27
    0x84010914     0xa    andi a0,a0,1
    0x84010916     0xc    beq a4,a5,ffffffff8401091c <isValidVTableRoot+0x12>
    0x8401091a    0x10    li a0,0
    0x8401091c    0x12    addi sp,sp,16
    0x8401091e    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (63 of 266)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 36 instructions.


Stack analysis
---------------

Section `lookupPTSlot` expects pointer to stack in a0.
1 stack accesses found. Annotated code for `lookupPTSlot`:

    0x840105a0     0x0    addi sp,sp,-16
    0x840105a2     0x2    mv a3,a1
    0x840105a4     0x4    srli a5,a1,0x1e
    0x840105a8     0x8    andi a5,a5,511
    0x840105ac     0xc    slli a5,a5,0x3
    0x840105ae     0xe    add a0,a0,a5
    0x840105b0    0x10    li a1,30
    0x840105b2    0x12    li a7,3
    0x840105b4    0x14    lui a6,0xfff00
    0x840105b8    0x18    srli a6,a6,0x8
    0x840105bc    0x1c    li a2,-1
    0x840105be    0x1e    slli a2,a2,0x26
    0x840105c0    0x20    j ffffffff840105de <lookupPTSlot+0x3e>
    0x840105c2    0x22    addi a1,a1,-9
    0x840105c4    0x24    beq a1,a7,ffffffff84010602 <lookupPTSlot+0x62>
    0x840105c8    0x28    slli a0,a5,0x2
    0x840105cc    0x2c    and a0,a0,a6
    0x840105d0    0x30    add a0,a0,a2
    0x840105d2    0x32    srl a5,a3,a1
    0x840105d6    0x36    andi a5,a5,511
    0x840105da    0x3a    slli a5,a5,0x3
    0x840105dc    0x3c    add a0,a0,a5
    0x840105de    0x3e    ld a5,0(a0)           ; stack access
    0x840105e0    0x40    andi a4,a5,1
    0x840105e4    0x44    beqz a4,ffffffff840105fe <lookupPTSlot+0x5e>
    0x840105e6    0x46    srli a4,a5,0x1
    0x840105ea    0x4a    srli t1,a5,0x2
    0x840105ee    0x4e    or a4,a4,t1
    0x840105f2    0x52    srli t1,a5,0x3
    0x840105f6    0x56    or a4,a4,t1
    0x840105fa    0x5a    andi a4,a4,1
    0x840105fc    0x5c    beqz a4,ffffffff840105c2 <lookupPTSlot+0x22>
    0x840105fe    0x5e    addi sp,sp,16
    0x84010600    0x60    ret
    0x84010602    0x62    li a1,12
    0x84010604    0x64    j ffffffff840105fe <lookupPTSlot+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 44 nodes.

Section copyGlobalMappings (64 of 266)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x84010398     0x0    auipc a5,0xb
    0x8401039c     0x4    addi a5,a5,1128 # ffffffff8401b800 <kernel_root_pageTable+0x800>
    0x840103a0     0x8    lui a4,0x1
    0x840103a2     0xa    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x840103a6     0xe    add a4,a4,a0
    0x840103a8    0x10    auipc a2,0xc
    0x840103ac    0x14    addi a2,a2,-936 # ffffffff8401c000 <kernel_root_pageTable+0x1000>
    0x840103b0    0x18    ld a3,0(a5)
    0x840103b2    0x1a    sd a3,0(a4)
    0x840103b4    0x1c    addi a5,a5,8
    0x840103b6    0x1e    addi a4,a4,8
    0x840103b8    0x20    bne a5,a2,ffffffff840103b0 <copyGlobalMappings+0x18>
    0x840103bc    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (65 of 266)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x84010396    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (66 of 266)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x84010394    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (67 of 266)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x84010224    0x0    li a0,0
    0x84010226    0x2    li a1,0
    0x84010228    0x4    li a2,0
    0x8401022a    0x6    li a7,8
    0x8401022c    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section restore_user_context (68 of 266)
========================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 41 instructions.

RVC_TFFFFFT__FT___TF.
Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

No stack accesses found. Code for `restore_user_context`:

    0x84010182     0x0    auipc a5,0x1f
    0x84010186     0x4    ld a5,-1770(a5) # ffffffff8402ea98 <ksCurThread>
    0x8401018a     0x8    mv t0,a5
    0x8401018c     0xa    ld ra,0(t0)
    0x84010190     0xe    ld sp,8(t0)
    0x84010194    0x12    ld gp,16(t0)
    0x84010198    0x16    ld t2,48(t0)
    0x8401019c    0x1a    ld s0,56(t0)
    0x840101a0    0x1e    ld s1,64(t0)
    0x840101a4    0x22    ld a0,72(t0)
    0x840101a8    0x26    ld a1,80(t0)
    0x840101ac    0x2a    ld a2,88(t0)
    0x840101b0    0x2e    ld a3,96(t0)
    0x840101b4    0x32    ld a4,104(t0)
    0x840101b8    0x36    ld a5,112(t0)
    0x840101bc    0x3a    ld a6,120(t0)
    0x840101c0    0x3e    ld a7,128(t0)
    0x840101c4    0x42    ld s2,136(t0)
    0x840101c8    0x46    ld s3,144(t0)
    0x840101cc    0x4a    ld s4,152(t0)
    0x840101d0    0x4e    ld s5,160(t0)
    0x840101d4    0x52    ld s6,168(t0)
    0x840101d8    0x56    ld s7,176(t0)
    0x840101dc    0x5a    ld s8,184(t0)
    0x840101e0    0x5e    ld s9,192(t0)
    0x840101e4    0x62    ld s10,200(t0)
    0x840101e8    0x66    ld s11,208(t0)
    0x840101ec    0x6a    ld t3,216(t0)
    0x840101f0    0x6e    ld t4,224(t0)
    0x840101f4    0x72    ld t5,232(t0)
    0x840101f8    0x76    ld t6,240(t0)
    0x840101fc    0x7a    ld t1,24(t0)
    0x84010200    0x7e    add tp,t1,zero
    0x84010204    0x82    ld t1,272(t0)
    0x84010208    0x86    csrw sepc,t1
    0x8401020c    0x8a    csrw sscratch,t0
    0x84010210    0x8e    ld t1,256(t0)
    0x84010214    0x92    csrw sstatus,t1
    0x84010218    0x96    ld t1,40(t0)
    0x8401021c    0x9a    ld t0,32(t0)
    0x84010220    0x9e    sret

Proving inst theorems
---------------------

41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 79 nodes.

Section getNewActiveIRQ (69 of 266)
===================================

Deriving specifications
-----------------------

Section `getNewActiveIRQ` consists of 13 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `getNewActiveIRQ`:

    0x8401015e     0x0    csrr a0,sip
    0x84010162     0x4    andi a5,a0,512
    0x84010166     0x8    bnez a5,ffffffff84010170 <getNewActiveIRQ+0x12>
    0x84010168     0xa    andi a0,a0,32
    0x8401016c     0xe    bnez a0,ffffffff8401017c <getNewActiveIRQ+0x1e>
    0x8401016e    0x10    ret
    0x84010170    0x12    lui a5,0xcc202
    0x84010174    0x16    lw a0,4(a5)
    0x84010176    0x18    slli a0,a0,0x20
    0x84010178    0x1a    srli a0,a0,0x20
    0x8401017a    0x1c    ret
    0x8401017c    0x1e    li a0,54
    0x84010180    0x22    j ffffffff8401016e <getNewActiveIRQ+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNewActiveIRQ` has 21 nodes.

Section findVSpaceForASID (70 of 266)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 35 instructions.


Stack analysis
---------------

Section `findVSpaceForASID` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x840100fe     0x0    addi sp,sp,-16
    0x84010100     0x2    srli a5,a0,0x9
    0x84010104     0x6    slli a4,a5,0x3
    0x84010108     0xa    auipc a5,0xc
    0x8401010c     0xe    addi a5,a5,1824 # ffffffff8401c828 <riscvKSASIDTable>
    0x84010110    0x12    add a5,a5,a4
    0x84010112    0x14    ld a5,0(a5)           ; stack access
    0x84010114    0x16    beqz a5,ffffffff8401012e <findVSpaceForASID+0x30>
    0x84010116    0x18    andi a0,a0,511
    0x8401011a    0x1c    slli a0,a0,0x3
    0x8401011c    0x1e    add a0,a0,a5
    0x8401011e    0x20    ld a5,0(a0)           ; stack access
    0x84010120    0x22    beqz a5,ffffffff84010146 <findVSpaceForASID+0x48>
    0x84010122    0x24    sd zero,0(sp)         ; stack access
    0x84010124    0x26    sd a5,8(sp)           ; stack access
    0x84010126    0x28    ld a0,0(sp)           ; stack access
    0x84010128    0x2a    ld a1,8(sp)           ; stack access
    0x8401012a    0x2c    addi sp,sp,16
    0x8401012c    0x2e    ret
    0x8401012e    0x30    auipc a5,0xe
    0x84010132    0x34    addi a5,a5,-1278 # ffffffff8401dc30 <current_lookup_fault>
    0x84010136    0x38    sd zero,0(a5)
    0x8401013a    0x3c    sd zero,8(a5)
    0x8401013e    0x40    li a5,2
    0x84010140    0x42    sd a5,0(sp)           ; stack access
    0x84010142    0x44    sd zero,8(sp)         ; stack access
    0x84010144    0x46    j ffffffff84010126 <findVSpaceForASID+0x28>
    0x84010146    0x48    auipc a5,0xe
    0x8401014a    0x4c    addi a5,a5,-1302 # ffffffff8401dc30 <current_lookup_fault>
    0x8401014e    0x50    sd zero,0(a5)
    0x84010152    0x54    sd zero,8(a5)
    0x84010156    0x58    li a5,2
    0x84010158    0x5a    sd a5,0(sp)           ; stack access
    0x8401015a    0x5c    sd zero,8(sp)         ; stack access
    0x8401015c    0x5e    j ffffffff84010126 <findVSpaceForASID+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 54 nodes.

Section pte_next (71 of 266)
============================

Deriving specifications
-----------------------

Section `pte_next` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `pte_next`:

    0x840100da     0x0    snez a1,a1
    0x840100de     0x4    srli a0,a0,0x2
    0x840100e0     0x6    lui a5,0xfff00
    0x840100e4     0xa    srli a5,a5,0xa
    0x840100e6     0xc    and a0,a0,a5
    0x840100e8     0xe    slli a5,a1,0x3
    0x840100ec    0x12    slli a4,a1,0x2
    0x840100f0    0x16    or a5,a5,a4
    0x840100f2    0x18    or a0,a0,a5
    0x840100f4    0x1a    slli a1,a1,0x1
    0x840100f6    0x1c    or a0,a0,a1
    0x840100f8    0x1e    ori a0,a0,225
    0x840100fc    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `pte_next` has 14 nodes.

Section idle_thread (72 of 266)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x840100d4    0x0    wfi
    0x840100d8    0x4    j ffffffff840100d4 <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section bi_finalise (73 of 266)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x84001820     0x0    auipc a5,0x1
    0x84001824     0x4    addi a5,a5,936 # ffffffff84002bc8 <ndks_boot>
    0x84001828     0x8    ld a3,592(a5)
    0x8400182c     0xc    ld a4,600(a5)
    0x84001830    0x10    ld a5,584(a5)
    0x84001834    0x14    sd a3,40(a5)
    0x84001836    0x16    sd a4,48(a5)
    0x84001838    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (74 of 266)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 7 instructions.


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x840015f8     0x0    auipc a5,0x1c
    0x840015fc     0x4    sd a0,1608(a5) # ffffffff8401dc40 <ksSchedulerAction>
    0x84001600     0x8    auipc a5,0x1c
    0x84001604     0xc    ld a5,1576(a5) # ffffffff8401dc28 <ksIdleThread>
    0x84001608    0x10    auipc a4,0x2d
    0x8400160c    0x14    sd a5,1168(a4) # ffffffff8402ea98 <ksCurThread>
    0x84001610    0x18    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 11 nodes.

Section create_it_asid_pool (75 of 266)
=======================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 247 instructions.

RVC_TFFFFT___FFFFFTF.

Stack analysis
---------------

Section `create_it_asid_pool` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x84001346      0x0    addi sp,sp,-32
    0x84001348      0x2    auipc a4,0x2
    0x8400134c      0x6    ld a4,-1296(a4) # ffffffff84002e38 <rootserver+0x10>
    0x84001350      0xa    slli a4,a4,0x19
    0x84001352      0xc    srli a4,a4,0x1b
    0x84001354      0xe    li a5,13
    0x84001356     0x10    slli a5,a5,0x3b
    0x84001358     0x12    or a4,a4,a5
    0x8400135a     0x14    srli a3,a0,0x3b
    0x8400135e     0x18    li a5,20
    0x84001360     0x1a    bltu a5,a3,ffffffff84001504 <create_it_asid_pool+0x1be>
    0x84001364     0x1e    slli a2,a3,0x2
    0x84001368     0x22    auipc a6,0x16
    0x8400136c     0x26    addi a6,a6,224 # ffffffff84017448 <ksDomScheduleLength+0x390>
    0x84001370     0x2a    add a2,a2,a6
    0x84001372     0x2c    lw a5,0(a2)           ; stack access
    0x84001374     0x2e    add a5,a5,a6
    0x84001376     0x30    jr a5
    0x84001378     0x32    slli a5,a0,0x19
    0x8400137c     0x36    srli a5,a5,0x19
    0x8400137e     0x38    slli a3,a0,0x19
    0x84001382     0x3c    bgez a3,ffffffff8400138c <create_it_asid_pool+0x46>
    0x84001386     0x40    li a3,-1
    0x84001388     0x42    slli a3,a3,0x27
    0x8400138a     0x44    or a5,a5,a3
    0x8400138c     0x46    sd a4,192(a5)
    0x8400138e     0x48    sd zero,200(a5)
    0x84001392     0x4c    sd zero,208(a5)
    0x84001396     0x50    li a3,3
    0x84001398     0x52    sd a3,216(a5)
    0x8400139a     0x54    slli a5,a0,0x19
    0x8400139e     0x58    srli a5,a5,0x19
    0x840013a0     0x5a    slli a3,a0,0x19
    0x840013a4     0x5e    bgez a3,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840013a8     0x62    li a3,-1
    0x840013aa     0x64    slli a3,a3,0x27
    0x840013ac     0x66    or a5,a5,a3
    0x840013ae     0x68    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840013b0     0x6a    slli a5,a0,0x19
    0x840013b4     0x6e    srli a5,a5,0x19
    0x840013b6     0x70    slli a3,a0,0x19
    0x840013ba     0x74    bgez a3,ffffffff840013c4 <create_it_asid_pool+0x7e>
    0x840013be     0x78    li a3,-1
    0x840013c0     0x7a    slli a3,a3,0x27
    0x840013c2     0x7c    or a5,a5,a3
    0x840013c4     0x7e    sd a4,192(a5)
    0x840013c6     0x80    sd zero,200(a5)
    0x840013ca     0x84    sd zero,208(a5)
    0x840013ce     0x88    li a3,3
    0x840013d0     0x8a    sd a3,216(a5)
    0x840013d2     0x8c    slli a5,a0,0x19
    0x840013d6     0x90    srli a5,a5,0x19
    0x840013d8     0x92    slli a3,a0,0x19
    0x840013dc     0x96    bgez a3,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840013e0     0x9a    li a3,-1
    0x840013e2     0x9c    slli a3,a3,0x27
    0x840013e4     0x9e    or a5,a5,a3
    0x840013e6     0xa0    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840013e8     0xa2    slli a5,a0,0x19
    0x840013ec     0xa6    srli a5,a5,0x19
    0x840013ee     0xa8    slli a3,a0,0x19
    0x840013f2     0xac    bgez a3,ffffffff840013fc <create_it_asid_pool+0xb6>
    0x840013f6     0xb0    li a3,-1
    0x840013f8     0xb2    slli a3,a3,0x27
    0x840013fa     0xb4    or a5,a5,a3
    0x840013fc     0xb6    sd a4,192(a5)
    0x840013fe     0xb8    sd zero,200(a5)
    0x84001402     0xbc    sd zero,208(a5)
    0x84001406     0xc0    li a3,3
    0x84001408     0xc2    sd a3,216(a5)
    0x8400140a     0xc4    slli a5,a0,0x19
    0x8400140e     0xc8    srli a5,a5,0x19
    0x84001410     0xca    slli a3,a0,0x19
    0x84001414     0xce    bgez a3,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x84001418     0xd2    li a3,-1
    0x8400141a     0xd4    slli a3,a3,0x27
    0x8400141c     0xd6    or a5,a5,a3
    0x8400141e     0xd8    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x84001420     0xda    slli a3,a0,0x1
    0x84001424     0xde    lui a5,0xfc000
    0x84001428     0xe2    srli a5,a5,0x19
    0x8400142a     0xe4    and a5,a5,a3
    0x8400142c     0xe6    slli a2,a3,0x19
    0x84001430     0xea    bgez a2,ffffffff8400143a <create_it_asid_pool+0xf4>
    0x84001434     0xee    li a3,-1
    0x84001436     0xf0    slli a3,a3,0x27
    0x84001438     0xf2    or a5,a5,a3
    0x8400143a     0xf4    sd a4,192(a5)
    0x8400143c     0xf6    sd zero,200(a5) # fffffffffc0000c8 <ki_end+0x77fd10c8>
    0x84001440     0xfa    sd zero,208(a5)
    0x84001444     0xfe    li a3,3
    0x84001446    0x100    sd a3,216(a5)
    0x84001448    0x102    slli a0,a0,0x1
    0x8400144a    0x104    lui a5,0xfc000
    0x8400144e    0x108    srli a5,a5,0x19
    0x84001450    0x10a    and a5,a5,a0
    0x84001452    0x10c    slli a3,a0,0x19
    0x84001456    0x110    bgez a3,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x8400145a    0x114    li a3,-1
    0x8400145c    0x116    slli a3,a3,0x27
    0x8400145e    0x118    or a5,a5,a3
    0x84001460    0x11a    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x84001462    0x11c    slli a5,a0,0x19
    0x84001466    0x120    srli a5,a5,0x19
    0x84001468    0x122    slli a3,a0,0x19
    0x8400146c    0x126    bgez a3,ffffffff84001476 <create_it_asid_pool+0x130>
    0x84001470    0x12a    li a3,-1
    0x84001472    0x12c    slli a3,a3,0x27
    0x84001474    0x12e    or a5,a5,a3
    0x84001476    0x130    andi a5,a5,-1024
    0x8400147a    0x134    sd a4,192(a5)
    0x8400147c    0x136    sd zero,200(a5) # fffffffffc0000c8 <ki_end+0x77fd10c8>
    0x84001480    0x13a    sd zero,208(a5)
    0x84001484    0x13e    li a3,3
    0x84001486    0x140    sd a3,216(a5)
    0x84001488    0x142    slli a5,a0,0x19
    0x8400148c    0x146    srli a5,a5,0x19
    0x8400148e    0x148    slli a3,a0,0x19
    0x84001492    0x14c    bgez a3,ffffffff8400149c <create_it_asid_pool+0x156>
    0x84001496    0x150    li a3,-1
    0x84001498    0x152    slli a3,a3,0x27
    0x8400149a    0x154    or a5,a5,a3
    0x8400149c    0x156    andi a5,a5,-1024
    0x840014a0    0x15a    li a3,11
    0x840014a2    0x15c    slli a3,a3,0x3b
    0x840014a4    0x15e    sd a3,160(a5)
    0x840014a6    0x160    sd zero,168(a5)
    0x840014aa    0x164    sd zero,176(a5)
    0x840014ae    0x168    li a3,3
    0x840014b0    0x16a    sd a3,184(a5)
    0x840014b2    0x16c    mv a0,a4
    0x840014b4    0x16e    li a1,0
    0x840014b6    0x170    addi sp,sp,32
    0x840014b8    0x172    ret
    0x840014ba    0x174    andi a5,a0,127
    0x840014be    0x178    li a3,64
    0x840014c2    0x17c    beq a5,a3,ffffffff84001500 <create_it_asid_pool+0x1ba>
    0x840014c6    0x180    andi a5,a0,63
    0x840014ca    0x184    addiw a3,a5,1
    0x840014ce    0x188    li a5,-1
    0x840014d0    0x18a    sll a5,a5,a3
    0x840014d4    0x18e    and a5,a5,a1
    0x840014d6    0x190    sd a4,192(a5)
    0x840014d8    0x192    sd zero,200(a5)
    0x840014dc    0x196    sd zero,208(a5)
    0x840014e0    0x19a    li a3,3
    0x840014e2    0x19c    sd a3,216(a5)
    0x840014e4    0x19e    andi a5,a0,127
    0x840014e8    0x1a2    li a3,64
    0x840014ec    0x1a6    beq a5,a3,ffffffff84001592 <create_it_asid_pool+0x24c>
    0x840014f0    0x1aa    andi a0,a0,63
    0x840014f4    0x1ae    addiw a0,a0,1
    0x840014f6    0x1b0    li a5,-1
    0x840014f8    0x1b2    sll a5,a5,a0
    0x840014fc    0x1b6    and a5,a5,a1
    0x840014fe    0x1b8    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x84001500    0x1ba    li a5,4
    0x84001502    0x1bc    j ffffffff840014ca <create_it_asid_pool+0x184>
    0x84001504    0x1be    li a5,3
    0x84001506    0x1c0    beq a3,a5,ffffffff84001532 <create_it_asid_pool+0x1ec>
    0x8400150a    0x1c4    li a5,13
    0x8400150c    0x1c6    beq a3,a5,ffffffff8400154c <create_it_asid_pool+0x206>
    0x84001510    0x1ca    li a2,1
    0x84001512    0x1cc    li a5,0
    0x84001514    0x1ce    bne a3,a2,ffffffff8400156a <create_it_asid_pool+0x224>
    0x84001518    0x1d2    srli a2,a1,0x9
    0x8400151c    0x1d6    slli a5,a2,0x19
    0x84001520    0x1da    srli a5,a5,0x19
    0x84001522    0x1dc    slli a6,a2,0x19
    0x84001526    0x1e0    bgez a6,ffffffff8400156a <create_it_asid_pool+0x224>
    0x8400152a    0x1e4    li a2,-1
    0x8400152c    0x1e6    slli a2,a2,0x27
    0x8400152e    0x1e8    or a5,a5,a2
    0x84001530    0x1ea    j ffffffff8400156a <create_it_asid_pool+0x224>
    0x84001532    0x1ec    srli a2,a1,0x9
    0x84001536    0x1f0    slli a5,a2,0x19
    0x8400153a    0x1f4    srli a5,a5,0x19
    0x8400153c    0x1f6    slli a6,a2,0x19
    0x84001540    0x1fa    bgez a6,ffffffff8400156a <create_it_asid_pool+0x224>
    0x84001544    0x1fe    li a2,-1
    0x84001546    0x200    slli a2,a2,0x27
    0x84001548    0x202    or a5,a5,a2
    0x8400154a    0x204    j ffffffff8400156a <create_it_asid_pool+0x224>
    0x8400154c    0x206    slli a2,a0,0x2
    0x84001550    0x20a    lui a5,0xf8000
    0x84001554    0x20e    srli a5,a5,0x19
    0x84001556    0x210    and a5,a5,a2
    0x84001558    0x212    slli a6,a2,0x19
    0x8400155c    0x216    bgez a6,ffffffff8400156a <create_it_asid_pool+0x224>
    0x84001560    0x21a    li a2,-1
    0x84001562    0x21c    slli a2,a2,0x27
    0x84001564    0x21e    or a5,a5,a2
    0x84001566    0x220    j ffffffff8400156a <create_it_asid_pool+0x224>
    0x84001568    0x222    li a5,0
    0x8400156a    0x224    sd a4,192(a5)
    0x8400156c    0x226    sd zero,200(a5) # fffffffff80000c8 <ki_end+0x73fd10c8>
    0x84001570    0x22a    sd zero,208(a5)
    0x84001574    0x22e    li a2,3
    0x84001576    0x230    sd a2,216(a5)
    0x84001578    0x232    li a5,20
    0x8400157a    0x234    bltu a5,a3,ffffffff84001596 <create_it_asid_pool+0x250>
    0x8400157e    0x238    slli a2,a3,0x2
    0x84001582    0x23c    auipc a6,0x16
    0x84001586    0x240    addi a6,a6,-230 # ffffffff8401749c <ksDomScheduleLength+0x3e4>
    0x8400158a    0x244    add a2,a2,a6
    0x8400158c    0x246    lw a5,0(a2)           ; stack access
    0x8400158e    0x248    add a5,a5,a6
    0x84001590    0x24a    jr a5
    0x84001592    0x24c    li a0,4
    0x84001594    0x24e    j ffffffff840014f4 <create_it_asid_pool+0x1ae>
    0x84001596    0x250    li a5,3
    0x84001598    0x252    beq a3,a5,ffffffff840015c2 <create_it_asid_pool+0x27c>
    0x8400159c    0x256    li a5,13
    0x8400159e    0x258    beq a3,a5,ffffffff840015da <create_it_asid_pool+0x294>
    0x840015a2    0x25c    li a2,1
    0x840015a4    0x25e    li a5,0
    0x840015a6    0x260    bne a3,a2,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840015aa    0x264    srli a1,a1,0x9
    0x840015ac    0x266    slli a5,a1,0x19
    0x840015b0    0x26a    srli a5,a5,0x19
    0x840015b2    0x26c    slli a3,a1,0x19
    0x840015b6    0x270    bgez a3,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840015ba    0x274    li a3,-1
    0x840015bc    0x276    slli a3,a3,0x27
    0x840015be    0x278    or a5,a5,a3
    0x840015c0    0x27a    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840015c2    0x27c    srli a1,a1,0x9
    0x840015c4    0x27e    slli a5,a1,0x19
    0x840015c8    0x282    srli a5,a5,0x19
    0x840015ca    0x284    slli a3,a1,0x19
    0x840015ce    0x288    bgez a3,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840015d2    0x28c    li a3,-1
    0x840015d4    0x28e    slli a3,a3,0x27
    0x840015d6    0x290    or a5,a5,a3
    0x840015d8    0x292    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840015da    0x294    slli a0,a0,0x2
    0x840015dc    0x296    lui a5,0xf8000
    0x840015e0    0x29a    srli a5,a5,0x19
    0x840015e2    0x29c    and a5,a5,a0
    0x840015e4    0x29e    slli a3,a0,0x19
    0x840015e8    0x2a2    bgez a3,ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840015ec    0x2a6    li a3,-1
    0x840015ee    0x2a8    slli a3,a3,0x27
    0x840015f0    0x2aa    or a5,a5,a3
    0x840015f2    0x2ac    j ffffffff840014a0 <create_it_asid_pool+0x15a>
    0x840015f4    0x2ae    li a5,0
    0x840015f6    0x2b0    j ffffffff840014a0 <create_it_asid_pool+0x15a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
247 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 337 nodes.

Section provide_cap (76 of 266)
===============================

Deriving specifications
-----------------------

Section `provide_cap` consists of 131 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `provide_cap`:

    0x84000ea6      0x0    addi sp,sp,-32
    0x84000ea8      0x2    sd a0,16(sp)          ; stack access
    0x84000eaa      0x4    sd a1,24(sp)          ; stack access
    0x84000eac      0x6    sd a2,0(sp)           ; stack access
    0x84000eae      0x8    sd a3,8(sp)           ; stack access
    0x84000eb0      0xa    auipc a5,0x2
    0x84000eb4      0xe    addi a5,a5,-744 # ffffffff84002bc8 <ndks_boot>
    0x84000eb8     0x12    ld a3,592(a5)
    0x84000ebc     0x16    ld a5,600(a5)
    0x84000ec0     0x1a    bltu a3,a5,ffffffff84000eca <provide_cap+0x24>
    0x84000ec4     0x1e    li a0,0
    0x84000ec6     0x20    addi sp,sp,32
    0x84000ec8     0x22    ret
    0x84000eca     0x24    mv a4,a0
    0x84000ecc     0x26    mv a6,a1
    0x84000ece     0x28    srli a2,a0,0x3b
    0x84000ed2     0x2c    li a5,20
    0x84000ed4     0x2e    bltu a5,a2,ffffffff84000f84 <provide_cap+0xde>
    0x84000ed8     0x32    slli a1,a2,0x2
    0x84000edc     0x36    auipc a0,0x16
    0x84000ee0     0x3a    addi a0,a0,1220 # ffffffff840173a0 <ksDomScheduleLength+0x2e8>
    0x84000ee4     0x3e    add a1,a1,a0
    0x84000ee6     0x40    lw a5,0(a1)
    0x84000ee8     0x42    add a5,a5,a0
    0x84000eea     0x44    jr a5
    0x84000eec     0x46    slli a5,a4,0x19
    0x84000ef0     0x4a    srli a5,a5,0x19
    0x84000ef2     0x4c    slli a2,a4,0x19
    0x84000ef6     0x50    bgez a2,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000efa     0x54    li a4,-1
    0x84000efc     0x56    slli a4,a4,0x27
    0x84000efe     0x58    or a5,a5,a4
    0x84000f00     0x5a    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f02     0x5c    slli a5,a4,0x19
    0x84000f06     0x60    srli a5,a5,0x19
    0x84000f08     0x62    slli a2,a4,0x19
    0x84000f0c     0x66    bgez a2,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f10     0x6a    li a4,-1
    0x84000f12     0x6c    slli a4,a4,0x27
    0x84000f14     0x6e    or a5,a5,a4
    0x84000f16     0x70    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f18     0x72    slli a5,a4,0x19
    0x84000f1c     0x76    srli a5,a5,0x19
    0x84000f1e     0x78    slli a2,a4,0x19
    0x84000f22     0x7c    bgez a2,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f26     0x80    li a4,-1
    0x84000f28     0x82    slli a4,a4,0x27
    0x84000f2a     0x84    or a5,a5,a4
    0x84000f2c     0x86    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f2e     0x88    slli a4,a4,0x1
    0x84000f30     0x8a    lui a5,0xfc000
    0x84000f34     0x8e    srli a5,a5,0x19
    0x84000f36     0x90    and a5,a5,a4
    0x84000f38     0x92    slli a2,a4,0x19
    0x84000f3c     0x96    bgez a2,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f40     0x9a    li a4,-1
    0x84000f42     0x9c    slli a4,a4,0x27
    0x84000f44     0x9e    or a5,a5,a4
    0x84000f46     0xa0    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f48     0xa2    slli a5,a4,0x19
    0x84000f4c     0xa6    srli a5,a5,0x19
    0x84000f4e     0xa8    slli a2,a4,0x19
    0x84000f52     0xac    bgez a2,ffffffff84000f5c <provide_cap+0xb6>
    0x84000f56     0xb0    li a4,-1
    0x84000f58     0xb2    slli a4,a4,0x27
    0x84000f5a     0xb4    or a5,a5,a4
    0x84000f5c     0xb6    andi a5,a5,-1024
    0x84000f60     0xba    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f62     0xbc    andi a5,a4,127
    0x84000f66     0xc0    li a2,64
    0x84000f6a     0xc4    beq a5,a2,ffffffff84000f80 <provide_cap+0xda>
    0x84000f6e     0xc8    andi a4,a4,63
    0x84000f72     0xcc    addiw a4,a4,1
    0x84000f74     0xce    li a5,-1
    0x84000f76     0xd0    sll a5,a5,a4
    0x84000f7a     0xd4    and a5,a5,a6
    0x84000f7e     0xd8    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f80     0xda    li a4,4
    0x84000f82     0xdc    j ffffffff84000f72 <provide_cap+0xcc>
    0x84000f84     0xde    li a5,3
    0x84000f86     0xe0    beq a2,a5,ffffffff84000fb4 <provide_cap+0x10e>
    0x84000f8a     0xe4    li a5,13
    0x84000f8c     0xe6    beq a2,a5,ffffffff84000fd0 <provide_cap+0x12a>
    0x84000f90     0xea    li a4,1
    0x84000f92     0xec    li a5,0
    0x84000f94     0xee    bne a2,a4,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000f98     0xf2    srli a6,a6,0x9
    0x84000f9c     0xf6    slli a4,a6,0x19
    0x84000fa0     0xfa    srli a5,a4,0x19
    0x84000fa4     0xfe    slli a4,a6,0x19
    0x84000fa8    0x102    bgez a4,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000fac    0x106    li a4,-1
    0x84000fae    0x108    slli a4,a4,0x27
    0x84000fb0    0x10a    or a5,a5,a4
    0x84000fb2    0x10c    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000fb4    0x10e    srli a6,a6,0x9
    0x84000fb8    0x112    slli a4,a6,0x19
    0x84000fbc    0x116    srli a5,a4,0x19
    0x84000fc0    0x11a    slli a4,a6,0x19
    0x84000fc4    0x11e    bgez a4,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000fc8    0x122    li a4,-1
    0x84000fca    0x124    slli a4,a4,0x27
    0x84000fcc    0x126    or a5,a5,a4
    0x84000fce    0x128    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000fd0    0x12a    slli a2,a4,0x2
    0x84000fd4    0x12e    lui a4,0xf8000
    0x84000fd8    0x132    srli a4,a4,0x19
    0x84000fda    0x134    and a5,a2,a4
    0x84000fde    0x138    slli a4,a2,0x19
    0x84000fe2    0x13c    bgez a4,ffffffff84000ff0 <provide_cap+0x14a>
    0x84000fe6    0x140    li a4,-1
    0x84000fe8    0x142    slli a4,a4,0x27
    0x84000fea    0x144    or a5,a5,a4
    0x84000fec    0x146    j ffffffff84000ff0 <provide_cap+0x14a>
    0x84000fee    0x148    li a5,0
    0x84000ff0    0x14a    slli a3,a3,0x5
    0x84000ff2    0x14c    add a5,a5,a3
    0x84000ff4    0x14e    ld a4,0(sp)           ; stack access
    0x84000ff6    0x150    sd a4,0(a5)
    0x84000ff8    0x152    ld a4,8(sp)           ; stack access
    0x84000ffa    0x154    sd a4,8(a5)
    0x84000ffc    0x156    sd zero,16(a5) # fffffffffc000010 <ki_end+0x77fd1010>
    0x84001000    0x15a    li a4,3
    0x84001002    0x15c    sd a4,24(a5)
    0x84001004    0x15e    auipc a4,0x2
    0x84001008    0x162    addi a4,a4,-1084 # ffffffff84002bc8 <ndks_boot>
    0x8400100c    0x166    ld a5,592(a4)
    0x84001010    0x16a    addi a5,a5,1
    0x84001012    0x16c    sd a5,592(a4)
    0x84001016    0x170    li a0,1
    0x84001018    0x172    j ffffffff84000ec6 <provide_cap+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
131 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 176 nodes.

Section create_domain_cap (77 of 266)
=====================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 110 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_domain_cap`:

    0x84000be6      0x0    addi sp,sp,-16
    0x84000be8      0x2    srli a4,a0,0x3b
    0x84000bec      0x6    li a5,20
    0x84000bee      0x8    bltu a5,a4,ffffffff84000c9c <create_domain_cap+0xb6>
    0x84000bf2      0xc    slli a3,a4,0x2
    0x84000bf6     0x10    auipc a2,0x16
    0x84000bfa     0x14    addi a2,a2,1794 # ffffffff840172f8 <ksDomScheduleLength+0x240>
    0x84000bfe     0x18    add a3,a3,a2
    0x84000c00     0x1a    lw a5,0(a3)
    0x84000c02     0x1c    add a5,a5,a2
    0x84000c04     0x1e    jr a5
    0x84000c06     0x20    slli a5,a0,0x19
    0x84000c0a     0x24    srli a5,a5,0x19
    0x84000c0c     0x26    slli a4,a0,0x19
    0x84000c10     0x2a    bgez a4,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c14     0x2e    li a4,-1
    0x84000c16     0x30    slli a4,a4,0x27
    0x84000c18     0x32    or a5,a5,a4
    0x84000c1a     0x34    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c1c     0x36    slli a5,a0,0x19
    0x84000c20     0x3a    srli a5,a5,0x19
    0x84000c22     0x3c    slli a4,a0,0x19
    0x84000c26     0x40    bgez a4,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c2a     0x44    li a4,-1
    0x84000c2c     0x46    slli a4,a4,0x27
    0x84000c2e     0x48    or a5,a5,a4
    0x84000c30     0x4a    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c32     0x4c    slli a5,a0,0x19
    0x84000c36     0x50    srli a5,a5,0x19
    0x84000c38     0x52    slli a4,a0,0x19
    0x84000c3c     0x56    bgez a4,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c40     0x5a    li a4,-1
    0x84000c42     0x5c    slli a4,a4,0x27
    0x84000c44     0x5e    or a5,a5,a4
    0x84000c46     0x60    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c48     0x62    slli a0,a0,0x1
    0x84000c4a     0x64    lui a5,0xfc000
    0x84000c4e     0x68    srli a5,a5,0x19
    0x84000c50     0x6a    and a5,a5,a0
    0x84000c52     0x6c    slli a4,a0,0x19
    0x84000c56     0x70    bgez a4,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c5a     0x74    li a4,-1
    0x84000c5c     0x76    slli a4,a4,0x27
    0x84000c5e     0x78    or a5,a5,a4
    0x84000c60     0x7a    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c62     0x7c    slli a5,a0,0x19
    0x84000c66     0x80    srli a5,a5,0x19
    0x84000c68     0x82    slli a4,a0,0x19
    0x84000c6c     0x86    bgez a4,ffffffff84000c76 <create_domain_cap+0x90>
    0x84000c70     0x8a    li a4,-1
    0x84000c72     0x8c    slli a4,a4,0x27
    0x84000c74     0x8e    or a5,a5,a4
    0x84000c76     0x90    andi a5,a5,-1024
    0x84000c7a     0x94    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c7c     0x96    andi a5,a0,127
    0x84000c80     0x9a    li a4,64
    0x84000c84     0x9e    beq a5,a4,ffffffff84000c98 <create_domain_cap+0xb2>
    0x84000c88     0xa2    andi a0,a0,63
    0x84000c8c     0xa6    addiw a0,a0,1
    0x84000c8e     0xa8    li a5,-1
    0x84000c90     0xaa    sll a5,a5,a0
    0x84000c94     0xae    and a5,a5,a1
    0x84000c96     0xb0    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000c98     0xb2    li a0,4
    0x84000c9a     0xb4    j ffffffff84000c8c <create_domain_cap+0xa6>
    0x84000c9c     0xb6    li a5,3
    0x84000c9e     0xb8    beq a4,a5,ffffffff84000cc8 <create_domain_cap+0xe2>
    0x84000ca2     0xbc    li a5,13
    0x84000ca4     0xbe    beq a4,a5,ffffffff84000ce0 <create_domain_cap+0xfa>
    0x84000ca8     0xc2    li a3,1
    0x84000caa     0xc4    li a5,0
    0x84000cac     0xc6    bne a4,a3,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000cb0     0xca    srli a1,a1,0x9
    0x84000cb2     0xcc    slli a5,a1,0x19
    0x84000cb6     0xd0    srli a5,a5,0x19
    0x84000cb8     0xd2    slli a4,a1,0x19
    0x84000cbc     0xd6    bgez a4,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000cc0     0xda    li a4,-1
    0x84000cc2     0xdc    slli a4,a4,0x27
    0x84000cc4     0xde    or a5,a5,a4
    0x84000cc6     0xe0    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000cc8     0xe2    srli a1,a1,0x9
    0x84000cca     0xe4    slli a5,a1,0x19
    0x84000cce     0xe8    srli a5,a5,0x19
    0x84000cd0     0xea    slli a4,a1,0x19
    0x84000cd4     0xee    bgez a4,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000cd8     0xf2    li a4,-1
    0x84000cda     0xf4    slli a4,a4,0x27
    0x84000cdc     0xf6    or a5,a5,a4
    0x84000cde     0xf8    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000ce0     0xfa    slli a0,a0,0x2
    0x84000ce2     0xfc    lui a5,0xf8000
    0x84000ce6    0x100    srli a5,a5,0x19
    0x84000ce8    0x102    and a5,a5,a0
    0x84000cea    0x104    slli a4,a0,0x19
    0x84000cee    0x108    bgez a4,ffffffff84000cfc <create_domain_cap+0x116>
    0x84000cf2    0x10c    li a4,-1
    0x84000cf4    0x10e    slli a4,a4,0x27
    0x84000cf6    0x110    or a5,a5,a4
    0x84000cf8    0x112    j ffffffff84000cfc <create_domain_cap+0x116>
    0x84000cfa    0x114    li a5,0
    0x84000cfc    0x116    li a4,-3
    0x84000cfe    0x118    slli a4,a4,0x3d
    0x84000d00    0x11a    sd a4,352(a5) # fffffffff8000160 <ki_end+0x73fd1160>
    0x84000d04    0x11e    sd zero,360(a5)
    0x84000d08    0x122    sd zero,368(a5)
    0x84000d0c    0x126    li a4,3
    0x84000d0e    0x128    sd a4,376(a5)
    0x84000d12    0x12c    addi sp,sp,16
    0x84000d14    0x12e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
110 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 143 nodes.

Section create_root_cnode (78 of 266)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

Section `create_root_cnode` expects pointer to stack in a0.
No stack accesses found. Code for `create_root_cnode`:

    0x84000baa     0x0    addi sp,sp,-16
    0x84000bac     0x2    auipc a5,0x2
    0x84000bb0     0x6    addi a5,a5,28 # ffffffff84002bc8 <ndks_boot>
    0x84000bb4     0xa    lui a4,0x80
    0x84000bb8     0xe    sd a4,600(a5)
    0x84000bbc    0x12    ld a4,608(a5)
    0x84000bc0    0x16    slli a0,a4,0x19
    0x84000bc4    0x1a    srli a0,a0,0x1a
    0x84000bc6    0x1c    lui a5,0xab53
    0x84000bca    0x20    slli a5,a5,0x23
    0x84000bcc    0x22    or a0,a0,a5
    0x84000bce    0x24    addi a5,a4,64 # 80040 <KERNEL_OFFSET-0xfffffffefff7ffc0>
    0x84000bd2    0x28    sd a0,64(a4)
    0x84000bd4    0x2a    sd zero,72(a4)
    0x84000bd8    0x2e    sd zero,80(a4)
    0x84000bdc    0x32    li a4,3
    0x84000bde    0x34    sd a4,24(a5)
    0x84000be0    0x36    li a1,0
    0x84000be2    0x38    addi sp,sp,16
    0x84000be4    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (79 of 266)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x84000b98     0x0    addi sp,sp,-16
    0x84000b9a     0x2    sd a1,0(a0)
    0x84000b9c     0x4    sd a2,8(a0)
    0x84000b9e     0x6    sd zero,16(a0) # c000010 <KERNEL_OFFSET-0xfffffffef3fffff0>
    0x84000ba2     0xa    li a5,3
    0x84000ba4     0xc    sd a5,24(a0)
    0x84000ba6     0xe    addi sp,sp,16
    0x84000ba8    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section initIRQController (80 of 266)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 30 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x84000910     0x0    li a4,1
    0x84000912     0x2    lui a1,0xcc001
    0x84000916     0x6    lui a3,0xcc202
    0x8400091a     0xa    li a2,54
    0x8400091e     0xe    j ffffffff84000926 <initIRQController+0x16>
    0x84000920    0x10    addi a4,a4,1
    0x84000922    0x12    beq a4,a2,ffffffff8400094a <initIRQController+0x3a>
    0x84000926    0x16    sext.w a0,a4
    0x8400092a    0x1a    srli a5,a4,0x5
    0x8400092e    0x1e    slli a5,a5,0x2
    0x84000930    0x20    add a5,a5,a1
    0x84000932    0x22    lw a5,0(a5)
    0x84000934    0x24    slli a5,a5,0x20
    0x84000936    0x26    srli a5,a5,0x20
    0x84000938    0x28    andi a6,a4,31
    0x8400093c    0x2c    srl a5,a5,a6
    0x84000940    0x30    andi a5,a5,1
    0x84000942    0x32    beqz a5,ffffffff84000920 <initIRQController+0x10>
    0x84000944    0x34    lw a5,4(a3)
    0x84000946    0x36    sw a0,4(a3)
    0x84000948    0x38    j ffffffff84000920 <initIRQController+0x10>
    0x8400094a    0x3a    lui a5,0xcc000
    0x8400094e    0x3e    addi a5,a5,4
    0x84000950    0x40    li a3,2
    0x84000952    0x42    lui a4,0xcc000
    0x84000956    0x46    addi a4,a4,220 # ffffffffcc0000dc <ki_end+0x47fd10dc>
    0x8400095a    0x4a    sw a3,0(a5)
    0x8400095c    0x4c    addi a5,a5,4
    0x8400095e    0x4e    bne a5,a4,ffffffff8400095a <initIRQController+0x4a>
    0x84000962    0x52    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 41 nodes.

Section initLocalIRQController (81 of 266)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 22 instructions.

SW..
Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x840008cc     0x0    li a3,1
    0x840008ce     0x2    lui a1,0xcc002
    0x840008d2     0x6    addi a1,a1,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x840008d6     0xa    li a6,1
    0x840008d8     0xc    li a0,54
    0x840008dc    0x10    srli a4,a3,0x5
    0x840008e0    0x14    slli a4,a4,0x2
    0x840008e2    0x16    add a4,a4,a1
    0x840008e4    0x18    lw a2,0(a4)
    0x840008e6    0x1a    andi a5,a3,31
    0x840008ea    0x1e    sll a5,a6,a5
    0x840008ee    0x22    not a5,a5
    0x840008f2    0x26    and a5,a5,a2
    0x840008f4    0x28    sext.w a5,a5
    0x840008f6    0x2a    sw a5,0(a4)
    0x840008f8    0x2c    addi a3,a3,1
    0x840008fa    0x2e    bne a3,a0,ffffffff840008dc <initLocalIRQController+0x10>
    0x840008fe    0x32    lui a5,0xcc202
    0x84000902    0x36    sw zero,0(a5) # ffffffffcc202000 <ki_end+0x481d3000>
    0x84000906    0x3a    li a5,544
    0x8400090a    0x3e    csrrs a5,sie,a5
    0x8400090e    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 29 nodes.

Section initL2Cache (82 of 266)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x840008ca    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section initTimer (83 of 266)
=============================

Deriving specifications
-----------------------

Section `initTimer` consists of 7 instructions.

Skipping c0102573 rdtime a0

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `initTimer`:

    0x840008b6     0x0    rdtime a0
    0x840008ba     0x4    addi a0,a0,2000
    0x840008be     0x8    li a1,0
    0x840008c0     0xa    li a2,0
    0x840008c2     0xc    li a7,0
    0x840008c4     0xe    ecall
    0x840008c8    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initTimer` has 10 nodes.

Section get_avail_p_regs (84 of 266)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x840008ac    0x0    auipc a0,0x2
    0x840008b0    0x4    addi a0,a0,780 # ffffffff84002bb8 <avail_p_regs>
    0x840008b4    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (85 of 266)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x840008a8    0x0    li a0,1
    0x840008aa    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section write_it_asid_pool (86 of 266)
======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 210 instructions.

RVC_FTT_T_________TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x8400015e      0x0    addi sp,sp,-32
    0x84000160      0x2    sd a2,0(sp)           ; stack access
    0x84000162      0x4    sd a3,8(sp)           ; stack access
    0x84000164      0x6    srli a4,a0,0x3b
    0x84000168      0xa    li a5,20
    0x8400016a      0xc    bltu a5,a4,ffffffff8400021a <write_it_asid_pool+0xbc>
    0x8400016e     0x10    slli a3,a4,0x2
    0x84000172     0x14    auipc a2,0x17
    0x84000176     0x18    addi a2,a2,-178 # ffffffff840170c0 <ksDomScheduleLength+0x8>
    0x8400017a     0x1c    add a3,a3,a2
    0x8400017c     0x1e    lw a5,0(a3)
    0x8400017e     0x20    add a5,a5,a2
    0x84000180     0x22    jr a5
    0x84000182     0x24    slli a5,a0,0x19
    0x84000186     0x28    srli a5,a5,0x19
    0x84000188     0x2a    slli a4,a0,0x19
    0x8400018c     0x2e    bgez a4,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x84000190     0x32    li a4,-1
    0x84000192     0x34    slli a4,a4,0x27
    0x84000194     0x36    or a5,a5,a4
    0x84000196     0x38    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x84000198     0x3a    slli a5,a0,0x19
    0x8400019c     0x3e    srli a5,a5,0x19
    0x8400019e     0x40    slli a4,a0,0x19
    0x840001a2     0x44    bgez a4,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x840001a6     0x48    li a4,-1
    0x840001a8     0x4a    slli a4,a4,0x27
    0x840001aa     0x4c    or a5,a5,a4
    0x840001ac     0x4e    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x840001ae     0x50    slli a5,a0,0x19
    0x840001b2     0x54    srli a5,a5,0x19
    0x840001b4     0x56    slli a4,a0,0x19
    0x840001b8     0x5a    bgez a4,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x840001bc     0x5e    li a4,-1
    0x840001be     0x60    slli a4,a4,0x27
    0x840001c0     0x62    or a5,a5,a4
    0x840001c2     0x64    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x840001c4     0x66    slli a0,a0,0x1
    0x840001c6     0x68    lui a5,0xfc000
    0x840001ca     0x6c    srli a5,a5,0x19
    0x840001cc     0x6e    and a5,a5,a0
    0x840001ce     0x70    slli a4,a0,0x19
    0x840001d2     0x74    bgez a4,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x840001d6     0x78    li a4,-1
    0x840001d8     0x7a    slli a4,a4,0x27
    0x840001da     0x7c    or a5,a5,a4
    0x840001dc     0x7e    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x840001de     0x80    slli a5,a0,0x19
    0x840001e2     0x84    srli a5,a5,0x19
    0x840001e4     0x86    slli a4,a0,0x19
    0x840001e8     0x8a    bgez a4,ffffffff840001f2 <write_it_asid_pool+0x94>
    0x840001ec     0x8e    li a4,-1
    0x840001ee     0x90    slli a4,a4,0x27
    0x840001f0     0x92    or a5,a5,a4
    0x840001f2     0x94    andi a5,a5,-1024
    0x840001f6     0x98    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x840001f8     0x9a    andi a5,a0,127
    0x840001fc     0x9e    li a4,64
    0x84000200     0xa2    beq a5,a4,ffffffff84000216 <write_it_asid_pool+0xb8>
    0x84000204     0xa6    andi a0,a0,63
    0x84000208     0xaa    addiw a0,a0,1
    0x8400020a     0xac    li a5,-1
    0x8400020c     0xae    sll a0,a5,a0
    0x84000210     0xb2    and a5,a0,a1
    0x84000214     0xb6    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x84000216     0xb8    li a0,4
    0x84000218     0xba    j ffffffff84000208 <write_it_asid_pool+0xaa>
    0x8400021a     0xbc    li a5,3
    0x8400021c     0xbe    beq a4,a5,ffffffff84000246 <write_it_asid_pool+0xe8>
    0x84000220     0xc2    li a5,13
    0x84000222     0xc4    beq a4,a5,ffffffff8400025e <write_it_asid_pool+0x100>
    0x84000226     0xc8    li a3,1
    0x84000228     0xca    li a5,0
    0x8400022a     0xcc    bne a4,a3,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x8400022e     0xd0    srli a1,a1,0x9
    0x84000230     0xd2    slli a5,a1,0x19
    0x84000234     0xd6    srli a5,a5,0x19
    0x84000236     0xd8    slli a4,a1,0x19
    0x8400023a     0xdc    bgez a4,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x8400023e     0xe0    li a4,-1
    0x84000240     0xe2    slli a4,a4,0x27
    0x84000242     0xe4    or a5,a5,a4
    0x84000244     0xe6    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x84000246     0xe8    srli a1,a1,0x9
    0x84000248     0xea    slli a5,a1,0x19
    0x8400024c     0xee    srli a5,a5,0x19
    0x8400024e     0xf0    slli a4,a1,0x19
    0x84000252     0xf4    bgez a4,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x84000256     0xf8    li a4,-1
    0x84000258     0xfa    slli a4,a4,0x27
    0x8400025a     0xfc    or a5,a5,a4
    0x8400025c     0xfe    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x8400025e    0x100    slli a0,a0,0x2
    0x84000260    0x102    lui a5,0xf8000
    0x84000264    0x106    srli a5,a5,0x19
    0x84000266    0x108    and a5,a5,a0
    0x84000268    0x10a    slli a4,a0,0x19
    0x8400026c    0x10e    bgez a4,ffffffff8400027a <write_it_asid_pool+0x11c>
    0x84000270    0x112    li a4,-1
    0x84000272    0x114    slli a4,a4,0x27
    0x84000274    0x116    or a5,a5,a4
    0x84000276    0x118    j ffffffff8400027a <write_it_asid_pool+0x11c>
    0x84000278    0x11a    li a5,0
    0x8400027a    0x11c    ld a3,0(sp)           ; stack access
    0x8400027c    0x11e    ld a6,8(sp)           ; stack access
    0x8400027e    0x120    srli a2,a3,0x3b
    0x84000282    0x124    li a4,20
    0x84000284    0x126    bltu a4,a2,ffffffff84000334 <write_it_asid_pool+0x1d6>
    0x84000288    0x12a    slli a1,a2,0x2
    0x8400028c    0x12e    auipc a0,0x17
    0x84000290    0x132    addi a0,a0,-376 # ffffffff84017114 <ksDomScheduleLength+0x5c>
    0x84000294    0x136    add a1,a1,a0
    0x84000296    0x138    lw a4,0(a1)
    0x84000298    0x13a    add a4,a4,a0
    0x8400029a    0x13c    jr a4
    0x8400029c    0x13e    slli a4,a3,0x19
    0x840002a0    0x142    srli a4,a4,0x19
    0x840002a2    0x144    slli a2,a3,0x19
    0x840002a6    0x148    bgez a2,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002aa    0x14c    li a3,-1
    0x840002ac    0x14e    slli a3,a3,0x27
    0x840002ae    0x150    or a4,a4,a3
    0x840002b0    0x152    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002b2    0x154    slli a4,a3,0x19
    0x840002b6    0x158    srli a4,a4,0x19
    0x840002b8    0x15a    slli a2,a3,0x19
    0x840002bc    0x15e    bgez a2,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002c0    0x162    li a3,-1
    0x840002c2    0x164    slli a3,a3,0x27
    0x840002c4    0x166    or a4,a4,a3
    0x840002c6    0x168    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002c8    0x16a    slli a4,a3,0x19
    0x840002cc    0x16e    srli a4,a4,0x19
    0x840002ce    0x170    slli a2,a3,0x19
    0x840002d2    0x174    bgez a2,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002d6    0x178    li a3,-1
    0x840002d8    0x17a    slli a3,a3,0x27
    0x840002da    0x17c    or a4,a4,a3
    0x840002dc    0x17e    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002de    0x180    slli a3,a3,0x1
    0x840002e0    0x182    lui a4,0xfc000
    0x840002e4    0x186    srli a4,a4,0x19
    0x840002e6    0x188    and a4,a4,a3
    0x840002e8    0x18a    slli a2,a3,0x19
    0x840002ec    0x18e    bgez a2,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002f0    0x192    li a3,-1
    0x840002f2    0x194    slli a3,a3,0x27
    0x840002f4    0x196    or a4,a4,a3
    0x840002f6    0x198    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x840002f8    0x19a    slli a4,a3,0x19
    0x840002fc    0x19e    srli a4,a4,0x19
    0x840002fe    0x1a0    slli a2,a3,0x19
    0x84000302    0x1a4    bgez a2,ffffffff8400030c <write_it_asid_pool+0x1ae>
    0x84000306    0x1a8    li a3,-1
    0x84000308    0x1aa    slli a3,a3,0x27
    0x8400030a    0x1ac    or a4,a4,a3
    0x8400030c    0x1ae    andi a4,a4,-1024
    0x84000310    0x1b2    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x84000312    0x1b4    andi a4,a3,127
    0x84000316    0x1b8    li a2,64
    0x8400031a    0x1bc    beq a4,a2,ffffffff84000330 <write_it_asid_pool+0x1d2>
    0x8400031e    0x1c0    andi a3,a3,63
    0x84000322    0x1c4    addiw a3,a3,1
    0x84000324    0x1c6    li a4,-1
    0x84000326    0x1c8    sll a4,a4,a3
    0x8400032a    0x1cc    and a4,a4,a6
    0x8400032e    0x1d0    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x84000330    0x1d2    li a3,4
    0x84000332    0x1d4    j ffffffff84000322 <write_it_asid_pool+0x1c4>
    0x84000334    0x1d6    li a4,3
    0x84000336    0x1d8    beq a2,a4,ffffffff84000362 <write_it_asid_pool+0x204>
    0x8400033a    0x1dc    li a4,13
    0x8400033c    0x1de    beq a2,a4,ffffffff8400037c <write_it_asid_pool+0x21e>
    0x84000340    0x1e2    li a3,1
    0x84000342    0x1e4    li a4,0
    0x84000344    0x1e6    bne a2,a3,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x84000348    0x1ea    srli a6,a6,0x9
    0x8400034c    0x1ee    slli a4,a6,0x19
    0x84000350    0x1f2    srli a4,a4,0x19
    0x84000352    0x1f4    slli a3,a6,0x19
    0x84000356    0x1f8    bgez a3,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x8400035a    0x1fc    li a3,-1
    0x8400035c    0x1fe    slli a3,a3,0x27
    0x8400035e    0x200    or a4,a4,a3
    0x84000360    0x202    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x84000362    0x204    srli a6,a6,0x9
    0x84000366    0x208    slli a4,a6,0x19
    0x8400036a    0x20c    srli a4,a4,0x19
    0x8400036c    0x20e    slli a3,a6,0x19
    0x84000370    0x212    bgez a3,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x84000374    0x216    li a3,-1
    0x84000376    0x218    slli a3,a3,0x27
    0x84000378    0x21a    or a4,a4,a3
    0x8400037a    0x21c    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x8400037c    0x21e    slli a3,a3,0x2
    0x8400037e    0x220    lui a4,0xf8000
    0x84000382    0x224    srli a4,a4,0x19
    0x84000384    0x226    and a4,a4,a3
    0x84000386    0x228    slli a2,a3,0x19
    0x8400038a    0x22c    bgez a2,ffffffff84000398 <write_it_asid_pool+0x23a>
    0x8400038e    0x230    li a3,-1
    0x84000390    0x232    slli a3,a3,0x27
    0x84000392    0x234    or a4,a4,a3
    0x84000394    0x236    j ffffffff84000398 <write_it_asid_pool+0x23a>
    0x84000396    0x238    li a4,0
    0x84000398    0x23a    sd a4,8(a5)
    0x8400039a    0x23c    auipc a4,0x1c
    0x8400039e    0x240    sd a5,1166(a4) # ffffffff8401c828 <riscvKSASIDTable>
    0x840003a2    0x244    addi sp,sp,32
    0x840003a4    0x246    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
210 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 273 nodes.

Section activate_kernel_vspace (87 of 266)
==========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x84000138     0x0    auipc a5,0x1b
    0x8400013c     0x4    addi a5,a5,-312 # ffffffff8401b000 <kernel_root_pageTable>
    0x84000140     0x8    li a4,1
    0x84000142     0xa    slli a4,a4,0x20
    0x84000144     0xc    add a5,a5,a4
    0x84000146     0xe    srli a5,a5,0xc
    0x84000148    0x10    li a4,-1
    0x8400014a    0x12    srli a3,a4,0x14
    0x8400014e    0x16    and a5,a5,a3
    0x84000150    0x18    slli a4,a4,0x3f
    0x84000152    0x1a    or a5,a5,a4
    0x84000154    0x1c    csrw satp,a5
    0x84000158    0x20    sfence.vma
    0x8400015c    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (88 of 266)
=====================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x84000108     0x0    addi sp,sp,-16
    0x8400010a     0x2    addi a1,a1,-1
    0x8400010c     0x4    srli a4,a1,0x15
    0x84000110     0x8    addi a4,a4,1
    0x84000112     0xa    slli a4,a4,0x15
    0x84000114     0xc    lui a5,0xffe00
    0x84000118    0x10    and a5,a5,a0
    0x8400011a    0x12    sub a4,a4,a5
    0x8400011c    0x14    srli a4,a4,0x15
    0x8400011e    0x16    srli a5,a1,0x1e
    0x84000122    0x1a    addi a5,a5,1
    0x84000124    0x1c    slli a5,a5,0x1e
    0x84000126    0x1e    lui a3,0xc0000
    0x8400012a    0x22    and a0,a0,a3
    0x8400012c    0x24    sub a5,a5,a0
    0x8400012e    0x26    srli a5,a5,0x1e
    0x84000130    0x28    add a0,a4,a5
    0x84000134    0x2c    addi sp,sp,16
    0x84000136    0x2e    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (89 of 266)
================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

Section `create_unmapped_it_frame_cap` expects pointer to stack in a0.
No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x840000f2     0x0    addi sp,sp,-16
    0x840000f4     0x2    slli a1,a0,0x9
    0x840000f8     0x6    li a0,1
    0x840000fa     0x8    slli a0,a0,0x3b
    0x840000fc     0xa    lui a5,0xfe000
    0x84000100     0xe    srli a5,a5,0x10
    0x84000102    0x10    and a1,a1,a5
    0x84000104    0x12    addi sp,sp,16
    0x84000106    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section Arch_configureIdleThread (90 of 266)
============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x840000a4     0x0    auipc a5,0x10
    0x840000a8     0x4    addi a5,a5,48 # ffffffff840100d4 <idle_thread>
    0x840000ac     0x8    sd a5,272(a0)
    0x840000b0     0xc    li a5,288
    0x840000b4    0x10    sd a5,256(a0)
    0x840000b8    0x14    auipc a5,0x1e
    0x840000bc    0x18    addi a5,a5,-1168 # ffffffff8401dc28 <ksIdleThread>
    0x840000c0    0x1c    sd a5,8(a0)
    0x840000c2    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (91 of 266)
=================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 43 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    auipc a1,0x3
    0x8400002a     0x4    ld a1,-798(a1) # ffffffff84002d08 <ndks_boot+0x140>
    0x8400002e     0x8    li a5,1
    0x84000030     0xa    bgeu a5,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000034     0xe    li a4,1
    0x84000036    0x10    auipc a2,0x3
    0x8400003a    0x14    addi a2,a2,-1134 # ffffffff84002bc8 <ndks_boot>
    0x8400003e    0x18    auipc a6,0x3
    0x84000042    0x1c    addi a6,a6,-1158 # ffffffff84002bb8 <avail_p_regs>
    0x84000046    0x20    j ffffffff84000086 <merge_regions+0x60>
    0x84000048    0x22    slli a5,a4,0x4
    0x8400004c    0x26    add a5,a5,a2
    0x8400004e    0x28    ld a5,8(a5)
    0x84000050    0x2a    slli a0,a0,0x4
    0x84000052    0x2c    add a0,a0,a2
    0x84000054    0x2e    sd a5,8(a0)
    0x84000056    0x30    addi a5,a4,1
    0x8400005a    0x34    bgeu a5,a1,ffffffff84000078 <merge_regions+0x52>
    0x8400005e    0x38    slli a5,a4,0x4
    0x84000062    0x3c    add a5,a5,a2
    0x84000064    0x3e    slli a0,a1,0x4
    0x84000068    0x42    add a0,a0,a6
    0x8400006a    0x44    ld a3,16(a5)
    0x8400006c    0x46    sd a3,0(a5)
    0x8400006e    0x48    ld a3,24(a5)
    0x84000070    0x4a    sd a3,8(a5)
    0x84000072    0x4c    addi a5,a5,16
    0x84000074    0x4e    bne a5,a0,ffffffff8400006a <merge_regions+0x44>
    0x84000078    0x52    addi a1,a1,-1
    0x8400007a    0x54    sd a1,320(a2)
    0x8400007e    0x58    ld a1,320(a2)
    0x84000082    0x5c    bgeu a4,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000086    0x60    addi a0,a4,-1
    0x8400008a    0x64    slli a3,a0,0x4
    0x8400008e    0x68    add a3,a3,a2
    0x84000090    0x6a    slli a5,a4,0x4
    0x84000094    0x6e    add a5,a5,a2
    0x84000096    0x70    ld a3,8(a3)
    0x84000098    0x72    ld a5,0(a5)
    0x8400009a    0x74    beq a3,a5,ffffffff84000048 <merge_regions+0x22>
    0x8400009e    0x78    addi a4,a4,1
    0x840000a0    0x7a    j ffffffff8400007e <merge_regions+0x58>
    0x840000a2    0x7c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 65 nodes.

Section str_to_long (92 of 266)
===============================

Deriving specifications
-----------------------

Section `str_to_long` consists of 44 instructions.

RVC_FTTTFFFTF_____FT.
JAL.
MUL.....
RVC_FTT_FFFFT_____TF.
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `str_to_long`:

    0x84016fb6     0x0    addi sp,sp,-48
    0x84016fb8     0x2    sd ra,40(sp)          ; stack access
    0x84016fba     0x4    sd s0,32(sp)          ; stack access
    0x84016fbc     0x6    sd s1,24(sp)          ; stack access
    0x84016fbe     0x8    sd s2,16(sp)          ; stack access
    0x84016fc0     0xa    sd s3,8(sp)           ; stack access
    0x84016fc2     0xc    mv s1,a0
    0x84016fc4     0xe    lbu a0,0(a0)
    0x84016fc8    0x12    li a5,48
    0x84016fcc    0x16    li s2,10
    0x84016fce    0x18    beq a0,a5,ffffffff84017000 <str_to_long+0x4a>
    0x84016fd2    0x1c    lbu a0,0(s1)
    0x84016fd6    0x20    beqz a0,ffffffff84017016 <str_to_long+0x60>
    0x84016fd8    0x22    li s0,0
    0x84016fda    0x24    li s3,-1
    0x84016fdc    0x26    slli s2,s2,0x20
    0x84016fde    0x28    srli s2,s2,0x20
    0x84016fe2    0x2c    jal ra,ffffffff84016f76 <char_to_long>
    0x84016fe6    0x30    beq a0,s3,ffffffff8401701c <str_to_long+0x66>
    0x84016fea    0x34    bge a0,s2,ffffffff8401701a <str_to_long+0x64>
    0x84016fee    0x38    mul s0,s2,s0
    0x84016ff2    0x3c    add s0,s0,a0
    0x84016ff4    0x3e    addi s1,s1,1
    0x84016ff6    0x40    lbu a0,0(s1)
    0x84016ffa    0x44    bnez a0,ffffffff84016fe2 <str_to_long+0x2c>
    0x84016ffc    0x46    mv a0,s0
    0x84016ffe    0x48    j ffffffff8401701c <str_to_long+0x66>
    0x84017000    0x4a    lbu a5,1(s1)
    0x84017004    0x4e    andi a5,a5,223
    0x84017008    0x52    li a4,88
    0x8401700c    0x56    bne a5,a4,ffffffff84016fd8 <str_to_long+0x22>
    0x84017010    0x5a    addi s1,s1,2
    0x84017012    0x5c    li s2,16
    0x84017014    0x5e    j ffffffff84016fd2 <str_to_long+0x1c>
    0x84017016    0x60    li a0,-1
    0x84017018    0x62    j ffffffff8401701c <str_to_long+0x66>
    0x8401701a    0x64    li a0,-1
    0x8401701c    0x66    ld ra,40(sp)          ; stack access
    0x8401701e    0x68    ld s0,32(sp)          ; stack access
    0x84017020    0x6a    ld s1,24(sp)          ; stack access
    0x84017022    0x6c    ld s2,16(sp)          ; stack access
    0x84017024    0x6e    ld s3,8(sp)           ; stack access
    0x84017026    0x70    addi sp,sp,48
    0x84017028    0x72    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 72 nodes.

Section memset (93 of 266)
==========================

Deriving specifications
-----------------------

Section `memset` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `memset`:

    0x84016f02     0x0    addi sp,sp,-16
    0x84016f04     0x2    sd ra,8(sp)           ; stack access
    0x84016f06     0x4    sd s0,0(sp)           ; stack access
    0x84016f08     0x6    mv s0,a0
    0x84016f0a     0x8    mv a4,a1
    0x84016f0c     0xa    mv a1,a2
    0x84016f0e     0xc    or a5,a0,a2
    0x84016f12    0x10    andi a5,a5,7
    0x84016f14    0x12    or a5,a5,a4
    0x84016f16    0x14    bnez a5,ffffffff84016f26 <memset+0x24>
    0x84016f18    0x16    jal ra,ffffffff840156c0 <memzero>
    0x84016f1c    0x1a    mv a0,s0
    0x84016f1e    0x1c    ld ra,8(sp)           ; stack access
    0x84016f20    0x1e    ld s0,0(sp)           ; stack access
    0x84016f22    0x20    addi sp,sp,16
    0x84016f24    0x22    ret
    0x84016f26    0x24    add a3,a0,a2
    0x84016f2a    0x28    mv a5,a0
    0x84016f2c    0x2a    beqz a2,ffffffff84016f1c <memset+0x1a>
    0x84016f2e    0x2c    sb a4,0(a5)
    0x84016f32    0x30    addi a5,a5,1
    0x84016f34    0x32    bne a3,a5,ffffffff84016f2e <memset+0x2c>
    0x84016f38    0x36    j ffffffff84016f1c <memset+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 36 nodes.

Section Arch_decodeInvocation (94 of 266)
=========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 7 instructions.

RVC_TFFFT____T____TF..

Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_decodeInvocation`:

    0x84016030    0x0    addi sp,sp,-32
    0x84016032    0x2    sd ra,24(sp)          ; stack access
    0x84016034    0x4    mv a6,a7
    0x84016036    0x6    jal ra,ffffffff84015742 <decodeRISCVMMUInvocation>
    0x8401603a    0xa    ld ra,24(sp)          ; stack access
    0x8401603c    0xc    addi sp,sp,32
    0x8401603e    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 11 nodes.

Section setMRs_syscall_error (95 of 266)
========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 88 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x840154f0     0x0    addi sp,sp,-16
    0x840154f2     0x2    sd ra,8(sp)           ; stack access
    0x840154f4     0x4    mv a5,a0
    0x840154f6     0x6    auipc a0,0x8
    0x840154fa     0xa    ld a0,1922(a0) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840154fe     0xe    li a4,10
    0x84015500    0x10    bltu a4,a0,ffffffff840155d6 <setMRs_syscall_error+0xe6>
    0x84015504    0x14    slli a3,a0,0x2
    0x84015508    0x18    auipc a2,0x2
    0x8401550c    0x1c    addi a2,a2,1068 # ffffffff84017934 <__global_pointer$+0x80>
    0x84015510    0x20    add a3,a3,a2
    0x84015512    0x22    lw a4,0(a3)
    0x84015514    0x24    add a4,a4,a2
    0x84015516    0x26    jr a4
    0x84015518    0x28    auipc a4,0x8
    0x8401551c    0x2c    ld a4,1840(a4) # ffffffff8401dc48 <current_syscall_error>
    0x84015520    0x30    sd a4,88(a5)
    0x84015522    0x32    j ffffffff840155dc <setMRs_syscall_error+0xec>
    0x84015524    0x34    auipc a4,0x8
    0x84015528    0x38    ld a4,1836(a4) # ffffffff8401dc50 <current_syscall_error+0x8>
    0x8401552c    0x3c    sd a4,88(a5)
    0x8401552e    0x3e    li a0,1
    0x84015530    0x40    j ffffffff840155dc <setMRs_syscall_error+0xec>
    0x84015532    0x42    auipc a4,0x8
    0x84015536    0x46    addi a4,a4,1814 # ffffffff8401dc48 <current_syscall_error>
    0x8401553a    0x4a    ld a3,16(a4)
    0x8401553c    0x4c    sd a3,88(a5)
    0x8401553e    0x4e    ld a4,24(a4)
    0x84015540    0x50    sd a4,96(a5)
    0x84015542    0x52    li a0,2
    0x84015544    0x54    j ffffffff840155dc <setMRs_syscall_error+0xec>
    0x84015546    0x56    auipc a4,0x8
    0x8401554a    0x5a    ld a4,1834(a4) # ffffffff8401dc70 <current_syscall_error+0x28>
    0x8401554e    0x5e    snez a4,a4
    0x84015552    0x62    sd a4,88(a5)
    0x84015554    0x64    auipc a4,0x8
    0x84015558    0x68    addi a4,a4,1756 # ffffffff8401dc30 <current_lookup_fault>
    0x8401555c    0x6c    ld a3,0(a4)
    0x8401555e    0x6e    ld a0,8(a4)
    0x84015560    0x70    andi a4,a3,3
    0x84015564    0x74    addi a2,a4,1
    0x84015568    0x78    sd a2,96(a5)
    0x8401556a    0x7a    li a2,2
    0x8401556c    0x7c    beq a4,a2,ffffffff84015588 <setMRs_syscall_error+0x98>
    0x84015570    0x80    bltu a2,a4,ffffffff8401559e <setMRs_syscall_error+0xae>
    0x84015574    0x84    beqz a4,ffffffff840155bc <setMRs_syscall_error+0xcc>
    0x84015576    0x86    li a2,1
    0x84015578    0x88    bne a4,a2,ffffffff840155b8 <setMRs_syscall_error+0xc8>
    0x8401557c    0x8c    srli a3,a3,0x2
    0x8401557e    0x8e    andi a3,a3,127
    0x84015582    0x92    sd a3,104(a5)
    0x84015584    0x94    li a0,3
    0x84015586    0x96    j ffffffff840155be <setMRs_syscall_error+0xce>
    0x84015588    0x98    srli a4,a3,0x2
    0x8401558c    0x9c    andi a4,a4,127
    0x84015590    0xa0    sd a4,104(a5)
    0x84015592    0xa2    srli a3,a3,0x9
    0x84015594    0xa4    andi a3,a3,127
    0x84015598    0xa8    sd a3,112(a5)
    0x8401559a    0xaa    li a0,4
    0x8401559c    0xac    j ffffffff840155be <setMRs_syscall_error+0xce>
    0x8401559e    0xae    srli a4,a3,0x9
    0x840155a2    0xb2    andi a4,a4,127
    0x840155a6    0xb6    sd a4,104(a5)
    0x840155a8    0xb8    sd a0,112(a5)
    0x840155aa    0xba    beqz a1,ffffffff840155c4 <setMRs_syscall_error+0xd4>
    0x840155ac    0xbc    srli a3,a3,0x2
    0x840155ae    0xbe    andi a3,a3,127
    0x840155b2    0xc2    sd a3,40(a1)
    0x840155b4    0xc4    li a0,5
    0x840155b6    0xc6    j ffffffff840155be <setMRs_syscall_error+0xce>
    0x840155b8    0xc8    jal ra,ffffffff84010224 <halt>
    0x840155bc    0xcc    li a0,2
    0x840155be    0xce    slli a0,a0,0x20
    0x840155c0    0xd0    srli a0,a0,0x20
    0x840155c2    0xd2    j ffffffff840155dc <setMRs_syscall_error+0xec>
    0x840155c4    0xd4    li a0,4
    0x840155c6    0xd6    j ffffffff840155be <setMRs_syscall_error+0xce>
    0x840155c8    0xd8    auipc a4,0x8
    0x840155cc    0xdc    ld a4,1696(a4) # ffffffff8401dc68 <current_syscall_error+0x20>
    0x840155d0    0xe0    sd a4,88(a5)
    0x840155d2    0xe2    li a0,1
    0x840155d4    0xe4    j ffffffff840155dc <setMRs_syscall_error+0xec>
    0x840155d6    0xe6    jal ra,ffffffff84010224 <halt>
    0x840155da    0xea    li a0,0
    0x840155dc    0xec    ld ra,8(sp)           ; stack access
    0x840155de    0xee    addi sp,sp,16
    0x840155e0    0xf0    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 129 nodes.

Section invokeTCB_Resume (96 of 266)
====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x840145ca    0x0    addi sp,sp,-16
    0x840145cc    0x2    sd ra,8(sp)           ; stack access
    0x840145ce    0x4    jal ra,ffffffff840137c4 <restart>
    0x840145d2    0x8    li a0,0
    0x840145d4    0xa    ld ra,8(sp)           ; stack access
    0x840145d6    0xc    addi sp,sp,16
    0x840145d8    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 11 nodes.

Section invokeTCB_Suspend (97 of 266)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x840145ba    0x0    addi sp,sp,-16
    0x840145bc    0x2    sd ra,8(sp)           ; stack access
    0x840145be    0x4    jal ra,ffffffff84012d8e <suspend>
    0x840145c2    0x8    li a0,0
    0x840145c4    0xa    ld ra,8(sp)           ; stack access
    0x840145c6    0xc    addi sp,sp,16
    0x840145c8    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section performInvocation_Endpoint (98 of 266)
==============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x840141e4     0x0    addi sp,sp,-16
    0x840141e6     0x2    sd ra,8(sp)           ; stack access
    0x840141e8     0x4    mv a6,a0
    0x840141ea     0x6    mv a7,a1
    0x840141ec     0x8    mv a0,a4
    0x840141ee     0xa    mv a1,a5
    0x840141f0     0xc    auipc a5,0x1b
    0x840141f4    0x10    ld a5,-1880(a5) # ffffffff8402ea98 <ksCurThread>
    0x840141f8    0x14    mv a4,a3
    0x840141fa    0x16    mv a3,a2
    0x840141fc    0x18    mv a2,a7
    0x840141fe    0x1a    jal ra,ffffffff84013e96 <sendIPC>
    0x84014202    0x1e    li a0,0
    0x84014204    0x20    ld ra,8(sp)           ; stack access
    0x84014206    0x22    addi sp,sp,16
    0x84014208    0x24    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 21 nodes.

Section performInvocation_Reply (99 of 266)
===========================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x84013e78     0x0    addi sp,sp,-16
    0x84013e7a     0x2    sd ra,8(sp)           ; stack access
    0x84013e7c     0x4    mv a3,a2
    0x84013e7e     0x6    mv a2,a1
    0x84013e80     0x8    mv a1,a0
    0x84013e82     0xa    auipc a0,0x1b
    0x84013e86     0xe    ld a0,-1002(a0) # ffffffff8402ea98 <ksCurThread>
    0x84013e8a    0x12    jal ra,ffffffff84013dc6 <doReplyTransfer>
    0x84013e8e    0x16    li a0,0
    0x84013e90    0x18    ld ra,8(sp)           ; stack access
    0x84013e92    0x1a    addi sp,sp,16
    0x84013e94    0x1c    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 17 nodes.

Section lookupExtraCaps (100 of 266)
====================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 56 instructions.

RVC_FFFFT_________FT.

Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84013ade     0x0    beqz a1,ffffffff84013b44 <lookupExtraCaps+0x66>
    0x84013ae0     0x2    addi sp,sp,-80
    0x84013ae2     0x4    sd ra,72(sp)          ; stack access
    0x84013ae4     0x6    sd s0,64(sp)          ; stack access
    0x84013ae6     0x8    sd s1,56(sp)          ; stack access
    0x84013ae8     0xa    sd s2,48(sp)          ; stack access
    0x84013aea     0xc    sd s3,40(sp)          ; stack access
    0x84013aec     0xe    sd s4,32(sp)          ; stack access
    0x84013aee    0x10    sd s5,24(sp)          ; stack access
    0x84013af0    0x12    mv s4,a0
    0x84013af2    0x14    srli a2,a2,0x7
    0x84013af4    0x16    andi s3,a2,3
    0x84013af8    0x1a    beqz s3,ffffffff84013b30 <lookupExtraCaps+0x52>
    0x84013afc    0x1e    addi s0,a1,976
    0x84013b00    0x22    auipc s2,0xa
    0x84013b04    0x26    addi s2,s2,384 # ffffffff8401dc80 <current_extra_caps>
    0x84013b08    0x2a    li s1,0
    0x84013b0a    0x2c    ld s5,0(s0)
    0x84013b0e    0x30    mv a1,s5
    0x84013b10    0x32    mv a0,s4
    0x84013b12    0x34    jal ra,ffffffff84011036 <lookupSlot>
    0x84013b16    0x38    sd a1,8(sp)           ; stack access
    0x84013b18    0x3a    bnez a0,ffffffff84013b50 <lookupExtraCaps+0x72>
    0x84013b1a    0x3c    ld a5,8(sp)           ; stack access
    0x84013b1c    0x3e    sd a5,0(s2)
    0x84013b20    0x42    addi s1,s1,1
    0x84013b22    0x44    addi s0,s0,8
    0x84013b24    0x46    addi s2,s2,8
    0x84013b26    0x48    bne s1,s3,ffffffff84013b0a <lookupExtraCaps+0x2c>
    0x84013b2a    0x4c    li a5,2
    0x84013b2c    0x4e    bltu a5,s3,ffffffff84013b60 <lookupExtraCaps+0x82>
    0x84013b30    0x52    slli s3,s3,0x3
    0x84013b32    0x54    auipc a5,0xa
    0x84013b36    0x58    addi a5,a5,334 # ffffffff8401dc80 <current_extra_caps>
    0x84013b3a    0x5c    add s3,s3,a5
    0x84013b3c    0x5e    sd zero,0(s3)
    0x84013b40    0x62    li a0,0
    0x84013b42    0x64    j ffffffff84013b60 <lookupExtraCaps+0x82>
    0x84013b44    0x66    auipc a5,0xa
    0x84013b48    0x6a    sd zero,316(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84013b4c    0x6e    li a0,0
    0x84013b4e    0x70    ret
    0x84013b50    0x72    auipc a5,0x9
    0x84013b54    0x76    addi a5,a5,-848 # ffffffff8401c800 <current_fault>
    0x84013b58    0x7a    li a4,1
    0x84013b5a    0x7c    sd a4,0(a5)
    0x84013b5c    0x7e    sd s5,8(a5)
    0x84013b60    0x82    ld ra,72(sp)          ; stack access
    0x84013b62    0x84    ld s0,64(sp)          ; stack access
    0x84013b64    0x86    ld s1,56(sp)          ; stack access
    0x84013b66    0x88    ld s2,48(sp)          ; stack access
    0x84013b68    0x8a    ld s3,40(sp)          ; stack access
    0x84013b6a    0x8c    ld s4,32(sp)          ; stack access
    0x84013b6c    0x8e    ld s5,24(sp)          ; stack access
    0x84013b6e    0x90    addi sp,sp,80
    0x84013b70    0x92    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 91 nodes.

Section deleteCallerCap (101 of 266)
====================================

Deriving specifications
-----------------------

Section `deleteCallerCap` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteCallerCap`:

    0x84013ac8     0x0    addi sp,sp,-16
    0x84013aca     0x2    sd ra,8(sp)           ; stack access
    0x84013acc     0x4    andi a0,a0,-1024
    0x84013ad0     0x8    addi a0,a0,96
    0x84013ad4     0xc    jal ra,ffffffff84013656 <cteDeleteOne>
    0x84013ad8    0x10    ld ra,8(sp)           ; stack access
    0x84013ada    0x12    addi sp,sp,16
    0x84013adc    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteCallerCap` has 12 nodes.

Section performInvocation_Notification (102 of 266)
===================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x84013a5e    0x0    addi sp,sp,-16
    0x84013a60    0x2    sd ra,8(sp)           ; stack access
    0x84013a62    0x4    jal ra,ffffffff84013804 <sendSignal>
    0x84013a66    0x8    li a0,0
    0x84013a68    0xa    ld ra,8(sp)           ; stack access
    0x84013a6a    0xc    addi sp,sp,16
    0x84013a6c    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section deletingIRQHandler (103 of 266)
=======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletingIRQHandler`:

    0x840137aa     0x0    addi sp,sp,-16
    0x840137ac     0x2    sd ra,8(sp)           ; stack access
    0x840137ae     0x4    slli a0,a0,0x5
    0x840137b0     0x6    auipc a5,0x1b
    0x840137b4     0xa    addi a5,a5,-1968 # ffffffff8402e000 <intStateIRQNode>
    0x840137b8     0xe    add a0,a0,a5
    0x840137ba    0x10    jal ra,ffffffff84013656 <cteDeleteOne>
    0x840137be    0x14    ld ra,8(sp)           ; stack access
    0x840137c0    0x16    addi sp,sp,16
    0x840137c2    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 14 nodes.

Section invokeIRQHandler_ClearIRQHandler (104 of 266)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeIRQHandler_ClearIRQHandler`:

    0x840136c0     0x0    addi sp,sp,-16
    0x840136c2     0x2    sd ra,8(sp)           ; stack access
    0x840136c4     0x4    slli a0,a0,0x5
    0x840136c6     0x6    auipc a5,0x1b
    0x840136ca     0xa    addi a5,a5,-1734 # ffffffff8402e000 <intStateIRQNode>
    0x840136ce     0xe    add a0,a0,a5
    0x840136d0    0x10    jal ra,ffffffff84013656 <cteDeleteOne>
    0x840136d4    0x14    ld ra,8(sp)           ; stack access
    0x840136d6    0x16    addi sp,sp,16
    0x840136d8    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 14 nodes.

Section invokeCNodeRevoke (105 of 266)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeRevoke`:

    0x840131c8    0x0    addi sp,sp,-16
    0x840131ca    0x2    sd ra,8(sp)           ; stack access
    0x840131cc    0x4    jal ra,ffffffff84013144 <cteRevoke>
    0x840131d0    0x8    ld ra,8(sp)           ; stack access
    0x840131d2    0xa    addi sp,sp,16
    0x840131d4    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 10 nodes.

Section invokeCNodeDelete (106 of 266)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x84013134    0x0    addi sp,sp,-16
    0x84013136    0x2    sd ra,8(sp)           ; stack access
    0x84013138    0x4    li a1,1
    0x8401313a    0x6    jal ra,ffffffff84012f7c <cteDelete>
    0x8401313e    0xa    ld ra,8(sp)           ; stack access
    0x84013140    0xc    addi sp,sp,16
    0x84013142    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 11 nodes.

Section invokeCNodeCancelBadgedSends (107 of 266)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 17 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x84012c12     0x0    addi sp,sp,-32
    0x84012c14     0x2    sd ra,24(sp)          ; stack access
    0x84012c16     0x4    sd a0,0(sp)           ; stack access
    0x84012c18     0x6    beqz a1,ffffffff84012c32 <invokeCNodeCancelBadgedSends+0x20>
    0x84012c1a     0x8    mv a5,a0
    0x84012c1c     0xa    slli a0,a0,0x19
    0x84012c1e     0xc    srli a0,a0,0x19
    0x84012c20     0xe    slli a4,a5,0x19
    0x84012c24    0x12    bgez a4,ffffffff84012c2e <invokeCNodeCancelBadgedSends+0x1c>
    0x84012c28    0x16    li a5,-1
    0x84012c2a    0x18    slli a5,a5,0x27
    0x84012c2c    0x1a    or a0,a0,a5
    0x84012c2e    0x1c    jal ra,ffffffff84012b36 <cancelBadgedSends>
    0x84012c32    0x20    li a0,0
    0x84012c34    0x22    ld ra,24(sp)          ; stack access
    0x84012c36    0x24    addi sp,sp,32
    0x84012c38    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 26 nodes.

Section scheduleChooseNewThread (108 of 266)
============================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 34 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleChooseNewThread`:

    0x840128c4     0x0    addi sp,sp,-16
    0x840128c6     0x2    sd ra,8(sp)           ; stack access
    0x840128c8     0x4    auipc a5,0x1b
    0x840128cc     0x8    ld a5,1424(a5) # ffffffff8402de58 <ksDomainTime>
    0x840128d0     0xc    beqz a5,ffffffff840128dc <scheduleChooseNewThread+0x18>
    0x840128d2     0xe    jal ra,ffffffff84012848 <chooseThread>
    0x840128d6    0x12    ld ra,8(sp)           ; stack access
    0x840128d8    0x14    addi sp,sp,16
    0x840128da    0x16    ret
    0x840128dc    0x18    auipc a5,0x1c
    0x840128e0    0x1c    ld a5,452(a5) # ffffffff8402eaa0 <ksDomScheduleIdx>
    0x840128e4    0x20    addi a5,a5,1
    0x840128e6    0x22    li a4,2
    0x840128e8    0x24    bltu a4,a5,ffffffff84012928 <scheduleChooseNewThread+0x64>
    0x840128ec    0x28    auipc a4,0x1c
    0x840128f0    0x2c    sd a5,436(a4) # ffffffff8402eaa0 <ksDomScheduleIdx>
    0x840128f4    0x30    auipc a5,0x1c
    0x840128f8    0x34    sd zero,284(a5) # ffffffff8402ea10 <ksWorkUnitsCompleted>
    0x840128fc    0x38    auipc a5,0x1c
    0x84012900    0x3c    ld a5,420(a5) # ffffffff8402eaa0 <ksDomScheduleIdx>
    0x84012904    0x40    slli a4,a5,0x4
    0x84012908    0x44    auipc a5,0x5
    0x8401290c    0x48    addi a5,a5,376 # ffffffff84017a80 <fault_messages>
    0x84012910    0x4c    add a5,a5,a4
    0x84012912    0x4e    ld a4,192(a5)
    0x84012914    0x50    auipc a3,0x1c
    0x84012918    0x54    sd a4,-276(a3) # ffffffff8402e800 <ksCurDomain>
    0x8401291c    0x58    ld a5,200(a5)
    0x8401291e    0x5a    auipc a4,0x1b
    0x84012922    0x5e    sd a5,1338(a4) # ffffffff8402de58 <ksDomainTime>
    0x84012926    0x62    j ffffffff840128d2 <scheduleChooseNewThread+0xe>
    0x84012928    0x64    auipc a5,0x1c
    0x8401292c    0x68    sd zero,376(a5) # ffffffff8402eaa0 <ksDomScheduleIdx>
    0x84012930    0x6c    j ffffffff840128f4 <scheduleChooseNewThread+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 52 nodes.

Section receiveSignal (109 of 266)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 89 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `receiveSignal`:

    0x840124be     0x0    addi sp,sp,-48
    0x840124c0     0x2    sd ra,40(sp)          ; stack access
    0x840124c2     0x4    sd s0,32(sp)          ; stack access
    0x840124c4     0x6    sd s1,24(sp)          ; stack access
    0x840124c6     0x8    sd s2,16(sp)          ; stack access
    0x840124c8     0xa    mv s0,a0
    0x840124ca     0xc    sd a1,0(sp)           ; stack access
    0x840124cc     0xe    sd a2,8(sp)           ; stack access
    0x840124ce    0x10    slli a5,a1,0x19
    0x840124d2    0x14    srli a5,a5,0x19
    0x840124d4    0x16    slli a4,a1,0x19
    0x840124d8    0x1a    bgez a4,ffffffff840124e2 <receiveSignal+0x24>
    0x840124dc    0x1e    li a4,-1
    0x840124de    0x20    slli a4,a4,0x27
    0x840124e0    0x22    or a5,a5,a4
    0x840124e2    0x24    mv s1,a5
    0x840124e4    0x26    ld a4,0(a5)
    0x840124e6    0x28    andi a2,a4,3
    0x840124ea    0x2c    andi a4,a4,2
    0x840124ec    0x2e    beqz a4,ffffffff8401250a <receiveSignal+0x4c>
    0x840124ee    0x30    li a5,2
    0x840124f0    0x32    bne a2,a5,ffffffff840124fe <receiveSignal+0x40>
    0x840124f4    0x36    ld a5,16(s1)
    0x840124f6    0x38    sd a5,72(s0)
    0x840124f8    0x3a    ld a5,0(s1)
    0x840124fa    0x3c    andi a5,a5,-4
    0x840124fc    0x3e    sd a5,0(s1)
    0x840124fe    0x40    ld ra,40(sp)          ; stack access
    0x84012500    0x42    ld s0,32(sp)          ; stack access
    0x84012502    0x44    ld s1,24(sp)          ; stack access
    0x84012504    0x46    ld s2,16(sp)          ; stack access
    0x84012506    0x48    addi sp,sp,48
    0x84012508    0x4a    ret
    0x8401250a    0x4c    beqz a3,ffffffff8401259c <receiveSignal+0xde>
    0x8401250c    0x4e    ld a4,280(s0)
    0x84012510    0x52    li s2,-1
    0x84012512    0x54    slli a3,s2,0x27
    0x84012516    0x58    and a4,a4,a3
    0x84012518    0x5a    lui a3,0xe0000
    0x8401251c    0x5e    srli a3,a3,0x19
    0x8401251e    0x60    and a5,a5,a3
    0x84012520    0x62    or a5,a5,a4
    0x84012522    0x64    ori a5,a5,6
    0x84012526    0x68    sd a5,280(s0)
    0x8401252a    0x6c    mv a0,s0
    0x8401252c    0x6e    jal ra,ffffffff840122a4 <scheduleTCB>
    0x84012530    0x72    ld a4,8(s1)
    0x84012532    0x74    srli a5,s2,0x19
    0x84012536    0x78    and a5,a5,a4
    0x84012538    0x7a    slli a3,a4,0x19
    0x8401253c    0x7e    bgez a3,ffffffff8401258c <receiveSignal+0xce>
    0x84012540    0x82    li a4,-1
    0x84012542    0x84    slli a4,a4,0x27
    0x84012544    0x86    or a5,a5,a4
    0x84012546    0x88    ld a3,0(s1)
    0x84012548    0x8a    srli a4,a3,0x19
    0x8401254c    0x8e    bgez a3,ffffffff84012558 <receiveSignal+0x9a>
    0x84012550    0x92    li a3,-1
    0x84012552    0x94    slli a3,a3,0x27
    0x84012554    0x96    or a4,a4,a3
    0x84012556    0x98    beqz a5,ffffffff84012598 <receiveSignal+0xda>
    0x84012558    0x9a    sd s0,408(a4)
    0x8401255c    0x9e    sd a4,416(s0)
    0x84012560    0xa2    sd zero,408(s0)
    0x84012564    0xa6    ld a4,0(s1)
    0x84012566    0xa8    ld a3,8(s1)
    0x84012568    0xaa    li a2,-1
    0x8401256a    0xac    slli a1,a2,0x27
    0x8401256e    0xb0    and a3,a3,a1
    0x84012570    0xb2    srli a2,a2,0x19
    0x84012572    0xb4    and a5,a5,a2
    0x84012574    0xb6    or a5,a5,a3
    0x84012576    0xb8    sd a5,8(s1)
    0x84012578    0xba    lui a5,0x2000
    0x8401257c    0xbe    addi a5,a5,-4
    0x8401257e    0xc0    and a5,a5,a4
    0x84012580    0xc2    slli s0,s0,0x19
    0x84012582    0xc4    or s0,s0,a5
    0x84012584    0xc6    ori s0,s0,1
    0x84012588    0xca    sd s0,0(s1)
    0x8401258a    0xcc    j ffffffff840124fe <receiveSignal+0x40>
    0x8401258c    0xce    ld a3,0(s1)
    0x8401258e    0xd0    srli a4,a3,0x19
    0x84012592    0xd4    bltz a3,ffffffff84012550 <receiveSignal+0x92>
    0x84012596    0xd8    j ffffffff84012556 <receiveSignal+0x98>
    0x84012598    0xda    mv a5,s0
    0x8401259a    0xdc    j ffffffff8401255c <receiveSignal+0x9e>
    0x8401259c    0xde    sd zero,72(s0)
    0x840125a0    0xe2    j ffffffff840124fe <receiveSignal+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
89 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 135 nodes.

Section handleDoubleFault (110 of 266)
======================================

Deriving specifications
-----------------------

Section `handleDoubleFault` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleDoubleFault`:

    0x840123b8    0x0    addi sp,sp,-32
    0x840123ba    0x2    sd ra,24(sp)          ; stack access
    0x840123bc    0x4    li a1,0
    0x840123be    0x6    jal ra,ffffffff840122d8 <setThreadState>
    0x840123c2    0xa    ld ra,24(sp)          ; stack access
    0x840123c4    0xc    addi sp,sp,32
    0x840123c6    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleDoubleFault` has 11 nodes.

Section setThreadState (111 of 266)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setThreadState`:

    0x840122d8     0x0    addi sp,sp,-16
    0x840122da     0x2    sd ra,8(sp)           ; stack access
    0x840122dc     0x4    ld a5,280(a0)
    0x840122e0     0x8    andi a5,a5,-16
    0x840122e2     0xa    andi a1,a1,15
    0x840122e4     0xc    or a5,a5,a1
    0x840122e6     0xe    sd a5,280(a0)
    0x840122ea    0x12    jal ra,ffffffff840122a4 <scheduleTCB>
    0x840122ee    0x16    ld ra,8(sp)           ; stack access
    0x840122f0    0x18    addi sp,sp,16
    0x840122f2    0x1a    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 17 nodes.

Section scheduleTCB (112 of 266)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 18 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleTCB`:

    0x840122a4     0x0    auipc a5,0x1c
    0x840122a8     0x4    ld a5,2036(a5) # ffffffff8402ea98 <ksCurThread>
    0x840122ac     0x8    beq a5,a0,ffffffff840122b2 <scheduleTCB+0xe>
    0x840122b0     0xc    ret
    0x840122b2     0xe    auipc a5,0xc
    0x840122b6    0x12    ld a5,-1650(a5) # ffffffff8401dc40 <ksSchedulerAction>
    0x840122ba    0x16    bnez a5,ffffffff840122b0 <scheduleTCB+0xc>
    0x840122bc    0x18    ld a5,280(a0)
    0x840122c0    0x1c    andi a5,a5,15
    0x840122c2    0x1e    addi a5,a5,-1
    0x840122c4    0x20    li a4,1
    0x840122c6    0x22    bgeu a4,a5,ffffffff840122b0 <scheduleTCB+0xc>
    0x840122ca    0x26    addi sp,sp,-16
    0x840122cc    0x28    sd ra,8(sp)           ; stack access
    0x840122ce    0x2a    jal ra,ffffffff84012272 <rescheduleRequired>
    0x840122d2    0x2e    ld ra,8(sp)           ; stack access
    0x840122d4    0x30    addi sp,sp,16
    0x840122d6    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 32 nodes.

Section rescheduleRequired (113 of 266)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `rescheduleRequired`:

    0x84012272     0x0    auipc a0,0xc
    0x84012276     0x4    ld a0,-1586(a0) # ffffffff8401dc40 <ksSchedulerAction>
    0x8401227a     0x8    li a5,1
    0x8401227c     0xa    bltu a5,a0,ffffffff8401228c <rescheduleRequired+0x1a>
    0x84012280     0xe    li a5,1
    0x84012282    0x10    auipc a4,0xc
    0x84012286    0x14    sd a5,-1602(a4) # ffffffff8401dc40 <ksSchedulerAction>
    0x8401228a    0x18    ret
    0x8401228c    0x1a    addi sp,sp,-16
    0x8401228e    0x1c    sd ra,8(sp)           ; stack access
    0x84012290    0x1e    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x84012294    0x22    li a5,1
    0x84012296    0x24    auipc a4,0xc
    0x8401229a    0x28    sd a5,-1622(a4) # ffffffff8401dc40 <ksSchedulerAction>
    0x8401229e    0x2c    ld ra,8(sp)           ; stack access
    0x840122a0    0x2e    addi sp,sp,16
    0x840122a2    0x30    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 27 nodes.

Section slotCapLongRunningDelete (114 of 266)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 24 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x84011ed8     0x0    addi sp,sp,-16
    0x84011eda     0x2    sd ra,8(sp)           ; stack access
    0x84011edc     0x4    sd s0,0(sp)           ; stack access
    0x84011ede     0x6    ld s0,0(a0)
    0x84011ee0     0x8    srli s0,s0,0x3b
    0x84011ee2     0xa    beqz s0,ffffffff84011f06 <slotCapLongRunningDelete+0x2e>
    0x84011ee4     0xc    jal ra,ffffffff84011e80 <isFinalCapability>
    0x84011ee8    0x10    beqz a0,ffffffff84011f04 <slotCapLongRunningDelete+0x2c>
    0x84011eea    0x12    addi a5,s0,-10
    0x84011eee    0x16    li a4,8
    0x84011ef0    0x18    bltu a4,a5,ffffffff84011f10 <slotCapLongRunningDelete+0x38>
    0x84011ef4    0x1c    li s0,1
    0x84011ef6    0x1e    sll s0,s0,a5
    0x84011efa    0x22    andi s0,s0,261
    0x84011efe    0x26    snez s0,s0
    0x84011f02    0x2a    j ffffffff84011f06 <slotCapLongRunningDelete+0x2e>
    0x84011f04    0x2c    mv s0,a0
    0x84011f06    0x2e    mv a0,s0
    0x84011f08    0x30    ld ra,8(sp)           ; stack access
    0x84011f0a    0x32    ld s0,0(sp)           ; stack access
    0x84011f0c    0x34    addi sp,sp,16
    0x84011f0e    0x36    ret
    0x84011f10    0x38    li s0,0
    0x84011f12    0x3a    j ffffffff84011f06 <slotCapLongRunningDelete+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 37 nodes.

Section isFinalCapability (115 of 266)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 38 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `isFinalCapability`:

    0x84011e80     0x0    addi sp,sp,-32
    0x84011e82     0x2    sd ra,24(sp)          ; stack access
    0x84011e84     0x4    sd s0,16(sp)          ; stack access
    0x84011e86     0x6    sd s1,8(sp)           ; stack access
    0x84011e88     0x8    mv s0,a0
    0x84011e8a     0xa    ld a5,16(a0)
    0x84011e8c     0xc    ld s1,24(a0)
    0x84011e8e     0xe    beqz a5,ffffffff84011ea2 <isFinalCapability+0x22>
    0x84011e90    0x10    ld a2,0(a0)
    0x84011e92    0x12    ld a3,8(a0)
    0x84011e94    0x14    ld a0,0(a5)
    0x84011e96    0x16    ld a1,8(a5)
    0x84011e98    0x18    jal ra,ffffffff84011e28 <sameObjectAs>
    0x84011e9c    0x1c    mv a5,a0
    0x84011e9e    0x1e    li a0,0
    0x84011ea0    0x20    bnez a5,ffffffff84011ece <isFinalCapability+0x4e>
    0x84011ea2    0x22    lui a5,0xf8000
    0x84011ea6    0x26    srli a5,a5,0x19
    0x84011ea8    0x28    and a5,a5,s1
    0x84011eaa    0x2a    slli a4,s1,0x19
    0x84011eae    0x2e    bgez a4,ffffffff84011eca <isFinalCapability+0x4a>
    0x84011eb2    0x32    li a4,-1
    0x84011eb4    0x34    slli a4,a4,0x27
    0x84011eb6    0x36    or a5,a5,a4
    0x84011eb8    0x38    ld a2,0(a5)
    0x84011eba    0x3a    ld a3,8(a5)
    0x84011ebc    0x3c    ld a0,0(s0)
    0x84011ebe    0x3e    ld a1,8(s0)
    0x84011ec0    0x40    jal ra,ffffffff84011e28 <sameObjectAs>
    0x84011ec4    0x44    seqz a0,a0
    0x84011ec8    0x48    j ffffffff84011ece <isFinalCapability+0x4e>
    0x84011eca    0x4a    li a0,1
    0x84011ecc    0x4c    bnez a5,ffffffff84011eb8 <isFinalCapability+0x38>
    0x84011ece    0x4e    ld ra,24(sp)          ; stack access
    0x84011ed0    0x50    ld s0,16(sp)          ; stack access
    0x84011ed2    0x52    ld s1,8(sp)           ; stack access
    0x84011ed4    0x54    addi sp,sp,32
    0x84011ed6    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 65 nodes.

Section ensureNoChildren (116 of 266)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 26 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `ensureNoChildren`:

    0x84011d6e     0x0    ld a5,24(a0)
    0x84011d70     0x2    lui a1,0xf8000
    0x84011d74     0x6    srli a1,a1,0x19
    0x84011d76     0x8    and a1,a1,a5
    0x84011d78     0xa    slli a4,a5,0x19
    0x84011d7c     0xe    bgez a4,ffffffff84011d9a <ensureNoChildren+0x2c>
    0x84011d80    0x12    li a5,-1
    0x84011d82    0x14    slli a5,a5,0x27
    0x84011d84    0x16    or a1,a1,a5
    0x84011d86    0x18    addi sp,sp,-16
    0x84011d88    0x1a    sd ra,8(sp)           ; stack access
    0x84011d8a    0x1c    jal ra,ffffffff84011cf6 <isMDBParentOf>
    0x84011d8e    0x20    mv a1,a0
    0x84011d90    0x22    bnez a0,ffffffff84011da0 <ensureNoChildren+0x32>
    0x84011d92    0x24    mv a0,a1
    0x84011d94    0x26    ld ra,8(sp)           ; stack access
    0x84011d96    0x28    addi sp,sp,16
    0x84011d98    0x2a    ret
    0x84011d9a    0x2c    bnez a1,ffffffff84011d86 <ensureNoChildren+0x18>
    0x84011d9c    0x2e    mv a0,a1
    0x84011d9e    0x30    ret
    0x84011da0    0x32    li a5,9
    0x84011da2    0x34    auipc a4,0xc
    0x84011da6    0x38    sd a5,-298(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84011daa    0x3c    li a1,3
    0x84011dac    0x3e    j ffffffff84011d92 <ensureNoChildren+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 39 nodes.

Section isMDBParentOf (117 of 266)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isMDBParentOf`:

    0x84011cf6     0x0    addi sp,sp,-32
    0x84011cf8     0x2    sd ra,24(sp)          ; stack access
    0x84011cfa     0x4    sd s0,16(sp)          ; stack access
    0x84011cfc     0x6    sd s1,8(sp)           ; stack access
    0x84011cfe     0x8    sd s2,0(sp)           ; stack access
    0x84011d00     0xa    ld s0,24(a0)
    0x84011d02     0xc    srli s0,s0,0x1
    0x84011d04     0xe    andi s0,s0,1
    0x84011d06    0x10    beqz s0,ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d08    0x12    mv s1,a0
    0x84011d0a    0x14    mv s2,a1
    0x84011d0c    0x16    ld a2,0(a1)
    0x84011d0e    0x18    ld a3,8(a1)
    0x84011d10    0x1a    ld a0,0(a0)
    0x84011d12    0x1c    ld a1,8(s1)
    0x84011d14    0x1e    jal ra,ffffffff840118b2 <sameRegionAs>
    0x84011d18    0x22    beqz a0,ffffffff84011d5e <isMDBParentOf+0x68>
    0x84011d1a    0x24    ld a5,0(s1)
    0x84011d1c    0x26    srli a5,a5,0x3b
    0x84011d1e    0x28    li a4,4
    0x84011d20    0x2a    beq a5,a4,ffffffff84011d44 <isMDBParentOf+0x4e>
    0x84011d24    0x2e    li a4,6
    0x84011d26    0x30    bne a5,a4,ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d2a    0x34    ld a5,8(s1)
    0x84011d2c    0x36    beqz a5,ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d2e    0x38    ld a4,8(s2)
    0x84011d32    0x3c    li s0,0
    0x84011d34    0x3e    bne a5,a4,ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d38    0x42    ld s0,24(s2)
    0x84011d3c    0x46    xori s0,s0,1
    0x84011d40    0x4a    andi s0,s0,1
    0x84011d42    0x4c    j ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d44    0x4e    ld a5,8(s1)
    0x84011d46    0x50    beqz a5,ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d48    0x52    ld a4,8(s2)
    0x84011d4c    0x56    li s0,0
    0x84011d4e    0x58    bne a5,a4,ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d52    0x5c    ld s0,24(s2)
    0x84011d56    0x60    xori s0,s0,1
    0x84011d5a    0x64    andi s0,s0,1
    0x84011d5c    0x66    j ffffffff84011d60 <isMDBParentOf+0x6a>
    0x84011d5e    0x68    mv s0,a0
    0x84011d60    0x6a    mv a0,s0
    0x84011d62    0x6c    ld ra,24(sp)          ; stack access
    0x84011d64    0x6e    ld s0,16(sp)          ; stack access
    0x84011d66    0x70    ld s1,8(sp)           ; stack access
    0x84011d68    0x72    ld s2,0(sp)           ; stack access
    0x84011d6a    0x74    addi sp,sp,32
    0x84011d6c    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 87 nodes.

Section completeSignal (118 of 266)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 14 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `completeSignal`:

    0x840117c6     0x0    beqz a1,ffffffff840117de <completeSignal+0x18>
    0x840117c8     0x2    ld a5,0(a0)
    0x840117ca     0x4    andi a5,a5,3
    0x840117cc     0x6    li a4,2
    0x840117ce     0x8    bne a5,a4,ffffffff840117de <completeSignal+0x18>
    0x840117d2     0xc    ld a5,16(a0)
    0x840117d4     0xe    sd a5,72(a1)
    0x840117d6    0x10    ld a5,0(a0)
    0x840117d8    0x12    andi a5,a5,-4
    0x840117da    0x14    sd a5,0(a0)
    0x840117dc    0x16    ret
    0x840117de    0x18    addi sp,sp,-16
    0x840117e0    0x1a    sd ra,8(sp)           ; stack access
    0x840117e2    0x1c    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 26 nodes.

Section emptySlot (119 of 266)
==============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 54 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `emptySlot`:

    0x84011746     0x0    addi sp,sp,-32
    0x84011748     0x2    sd ra,24(sp)          ; stack access
    0x8401174a     0x4    sd a1,0(sp)           ; stack access
    0x8401174c     0x6    sd a2,8(sp)           ; stack access
    0x8401174e     0x8    ld a5,0(a0)
    0x84011750     0xa    srli a5,a5,0x3b
    0x84011752     0xc    beqz a5,ffffffff84011798 <emptySlot+0x52>
    0x84011754     0xe    ld a2,16(a0)
    0x84011756    0x10    ld a4,24(a0)
    0x84011758    0x12    lui a5,0xf8000
    0x8401175c    0x16    srli a5,a5,0x19
    0x8401175e    0x18    and a5,a5,a4
    0x84011760    0x1a    slli a3,a4,0x19
    0x84011764    0x1e    bgez a3,ffffffff8401179e <emptySlot+0x58>
    0x84011768    0x22    li a3,-1
    0x8401176a    0x24    slli a3,a3,0x27
    0x8401176c    0x26    or a5,a5,a3
    0x8401176e    0x28    bnez a2,ffffffff840117a0 <emptySlot+0x5a>
    0x84011770    0x2a    sd a2,16(a5)
    0x84011772    0x2c    ld a3,24(a5)
    0x84011774    0x2e    or a4,a4,a3
    0x84011776    0x30    andi a4,a4,1
    0x84011778    0x32    andi a3,a3,-2
    0x8401177a    0x34    or a4,a4,a3
    0x8401177c    0x36    sd a4,24(a5)
    0x8401177e    0x38    sd zero,0(a0)
    0x84011782    0x3c    sd zero,8(a0)
    0x84011786    0x40    sd zero,16(a0)
    0x8401178a    0x44    sd zero,24(a0)
    0x8401178e    0x48    ld a5,0(sp)           ; stack access
    0x84011790    0x4a    srli a5,a5,0x3b
    0x84011792    0x4c    li a4,16
    0x84011794    0x4e    beq a5,a4,ffffffff840117ba <emptySlot+0x74>
    0x84011798    0x52    ld ra,24(sp)          ; stack access
    0x8401179a    0x54    addi sp,sp,32
    0x8401179c    0x56    ret
    0x8401179e    0x58    beqz a2,ffffffff840117b6 <emptySlot+0x70>
    0x840117a0    0x5a    ld a3,24(a2)
    0x840117a2    0x5c    li a1,-1
    0x840117a4    0x5e    slli a1,a1,0x27
    0x840117a6    0x60    addi a1,a1,3
    0x840117a8    0x62    and a3,a3,a1
    0x840117aa    0x64    lui a1,0xf8000
    0x840117ae    0x68    srli a1,a1,0x19
    0x840117b0    0x6a    and a1,a1,a5
    0x840117b2    0x6c    or a3,a3,a1
    0x840117b4    0x6e    sd a3,24(a2)
    0x840117b6    0x70    beqz a5,ffffffff8401177e <emptySlot+0x38>
    0x840117b8    0x72    j ffffffff84011770 <emptySlot+0x2a>
    0x840117ba    0x74    ld a0,8(sp)           ; stack access
    0x840117bc    0x76    slli a0,a0,0x34
    0x840117be    0x78    srli a0,a0,0x34
    0x840117c0    0x7a    jal ra,ffffffff84011734 <deletedIRQHandler>
    0x840117c4    0x7e    j ffffffff84011798 <emptySlot+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 86 nodes.

Section deletedIRQHandler (120 of 266)
======================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletedIRQHandler`:

    0x84011734     0x0    addi sp,sp,-16
    0x84011736     0x2    sd ra,8(sp)           ; stack access
    0x84011738     0x4    mv a1,a0
    0x8401173a     0x6    li a0,0
    0x8401173c     0x8    jal ra,ffffffff84011696 <setIRQState>
    0x84011740     0xc    ld ra,8(sp)           ; stack access
    0x84011742     0xe    addi sp,sp,16
    0x84011744    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 12 nodes.

Section capSwapForDelete (121 of 266)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 14 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `capSwapForDelete`:

    0x84011548     0x0    beq a0,a1,ffffffff84011566 <capSwapForDelete+0x1e>
    0x8401154c     0x4    addi sp,sp,-48
    0x8401154e     0x6    sd ra,40(sp)          ; stack access
    0x84011550     0x8    mv a2,a0
    0x84011552     0xa    mv a5,a1
    0x84011554     0xc    ld a3,0(a1)
    0x84011556     0xe    ld a4,8(a1)
    0x84011558    0x10    ld a0,0(a0)
    0x8401155a    0x12    ld a1,8(a2)
    0x8401155c    0x14    jal ra,ffffffff84011472 <cteSwap>
    0x84011560    0x18    ld ra,40(sp)          ; stack access
    0x84011562    0x1a    addi sp,sp,48
    0x84011564    0x1c    ret
    0x84011566    0x1e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 25 nodes.

Section invokeCNodeMove (122 of 266)
====================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x8401141e    0x0    addi sp,sp,-32
    0x84011420    0x2    sd ra,24(sp)          ; stack access
    0x84011422    0x4    jal ra,ffffffff840113c4 <cteMove>
    0x84011426    0x8    li a0,0
    0x84011428    0xa    ld ra,24(sp)          ; stack access
    0x8401142a    0xc    addi sp,sp,32
    0x8401142c    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 11 nodes.

Section invokeCNodeInsert (123 of 266)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x840113b4    0x0    addi sp,sp,-32
    0x840113b6    0x2    sd ra,24(sp)          ; stack access
    0x840113b8    0x4    jal ra,ffffffff84011286 <cteInsert>
    0x840113bc    0x8    li a0,0
    0x840113be    0xa    ld ra,24(sp)          ; stack access
    0x840113c0    0xc    addi sp,sp,32
    0x840113c2    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section switchToIdleThread (124 of 266)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `switchToIdleThread`:

    0x8401122c     0x0    addi sp,sp,-16
    0x8401122e     0x2    sd ra,8(sp)           ; stack access
    0x84011230     0x4    jal ra,ffffffff84010872 <Arch_switchToIdleThread>
    0x84011234     0x8    auipc a5,0xd
    0x84011238     0xc    ld a5,-1548(a5) # ffffffff8401dc28 <ksIdleThread>
    0x8401123c    0x10    auipc a4,0x1e
    0x84011240    0x14    sd a5,-1956(a4) # ffffffff8402ea98 <ksCurThread>
    0x84011244    0x18    ld ra,8(sp)           ; stack access
    0x84011246    0x1a    addi sp,sp,16
    0x84011248    0x1c    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 16 nodes.

Section doFaultTransfer (125 of 266)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x840111ea     0x0    addi sp,sp,-32
    0x840111ec     0x2    sd ra,24(sp)          ; stack access
    0x840111ee     0x4    sd s0,16(sp)          ; stack access
    0x840111f0     0x6    sd s1,8(sp)           ; stack access
    0x840111f2     0x8    sd s2,0(sp)           ; stack access
    0x840111f4     0xa    mv s2,a0
    0x840111f6     0xc    mv s1,a1
    0x840111f8     0xe    mv s0,a2
    0x840111fa    0x10    mv a2,a3
    0x840111fc    0x12    mv a1,s0
    0x840111fe    0x14    mv a0,s1
    0x84011200    0x16    jal ra,ffffffff84010274 <setMRs_fault>
    0x84011204    0x1a    ld a5,312(s1)
    0x84011208    0x1e    slli a5,a5,0xc
    0x8401120a    0x20    lui a4,0xf
    0x8401120c    0x22    and a5,a5,a4
    0x8401120e    0x24    andi a0,a0,127
    0x84011212    0x28    or a5,a5,a0
    0x84011214    0x2a    sd a5,80(s0)
    0x84011216    0x2c    sd s2,72(s0)
    0x8401121a    0x30    ld ra,24(sp)          ; stack access
    0x8401121c    0x32    ld s0,16(sp)          ; stack access
    0x8401121e    0x34    ld s1,8(sp)           ; stack access
    0x84011220    0x36    ld s2,0(sp)           ; stack access
    0x84011222    0x38    addi sp,sp,32
    0x84011224    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section lookupPivotSlot (126 of 266)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 12 instructions.


Stack analysis
---------------

Section `lookupPivotSlot` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `lookupPivotSlot`:

    0x840111d0     0x0    addi sp,sp,-48
    0x840111d2     0x2    sd ra,40(sp)          ; stack access
    0x840111d4     0x4    mv a5,a1
    0x840111d6     0x6    mv a4,a3
    0x840111d8     0x8    mv a3,a2
    0x840111da     0xa    mv a1,a0
    0x840111dc     0xc    mv a2,a5
    0x840111de     0xe    li a0,1
    0x840111e0    0x10    jal ra,ffffffff840110d0 <lookupSlotForCNodeOp>
    0x840111e4    0x14    ld ra,40(sp)          ; stack access
    0x840111e6    0x16    addi sp,sp,48
    0x840111e8    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 16 nodes.

Section lookupTargetSlot (127 of 266)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 12 instructions.


Stack analysis
---------------

Section `lookupTargetSlot` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `lookupTargetSlot`:

    0x840111b6     0x0    addi sp,sp,-48
    0x840111b8     0x2    sd ra,40(sp)          ; stack access
    0x840111ba     0x4    mv a5,a1
    0x840111bc     0x6    mv a4,a3
    0x840111be     0x8    mv a3,a2
    0x840111c0     0xa    mv a1,a0
    0x840111c2     0xc    mv a2,a5
    0x840111c4     0xe    li a0,0
    0x840111c6    0x10    jal ra,ffffffff840110d0 <lookupSlotForCNodeOp>
    0x840111ca    0x14    ld ra,40(sp)          ; stack access
    0x840111cc    0x16    addi sp,sp,48
    0x840111ce    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 16 nodes.

Section lookupSourceSlot (128 of 266)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 12 instructions.


Stack analysis
---------------

Section `lookupSourceSlot` expects pointer to stack in a0.
2 stack accesses found. Annotated code for `lookupSourceSlot`:

    0x8401119c     0x0    addi sp,sp,-48
    0x8401119e     0x2    sd ra,40(sp)          ; stack access
    0x840111a0     0x4    mv a5,a1
    0x840111a2     0x6    mv a4,a3
    0x840111a4     0x8    mv a3,a2
    0x840111a6     0xa    mv a1,a0
    0x840111a8     0xc    mv a2,a5
    0x840111aa     0xe    li a0,1
    0x840111ac    0x10    jal ra,ffffffff840110d0 <lookupSlotForCNodeOp>
    0x840111b0    0x14    ld ra,40(sp)          ; stack access
    0x840111b2    0x16    addi sp,sp,48
    0x840111b4    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 16 nodes.

Section lookupSlotForCNodeOp (129 of 266)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 79 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

Section `lookupSlotForCNodeOp` expects pointer to stack in a0.
23 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x840110d0     0x0    addi sp,sp,-80
    0x840110d2     0x2    sd ra,72(sp)          ; stack access
    0x840110d4     0x4    sd s0,64(sp)          ; stack access
    0x840110d6     0x6    mv s0,a0
    0x840110d8     0x8    sd a1,0(sp)           ; stack access
    0x840110da     0xa    sd a2,8(sp)           ; stack access
    0x840110dc     0xc    srli a1,a1,0x3b
    0x840110de     0xe    li a5,10
    0x840110e0    0x10    bne a1,a5,ffffffff84011114 <lookupSlotForCNodeOp+0x44>
    0x840110e4    0x14    addi a5,a4,-1
    0x840110e8    0x18    li a2,63
    0x840110ec    0x1c    bltu a2,a5,ffffffff8401113a <lookupSlotForCNodeOp+0x6a>
    0x840110f0    0x20    ld a1,0(sp)           ; stack access
    0x840110f2    0x22    ld a2,8(sp)           ; stack access
    0x840110f4    0x24    addi a0,sp,24
    0x840110f6    0x26    jal ra,ffffffff84010f0a <resolveAddressBits>
    0x840110fa    0x2a    ld a5,40(sp)          ; stack access
    0x840110fc    0x2c    ld a4,24(sp)          ; stack access
    0x840110fe    0x2e    bnez a4,ffffffff84011158 <lookupSlotForCNodeOp+0x88>
    0x84011100    0x30    bnez a5,ffffffff8401116e <lookupSlotForCNodeOp+0x9e>
    0x84011102    0x32    sd zero,48(sp)        ; stack access
    0x84011104    0x34    ld a5,32(sp)          ; stack access
    0x84011106    0x36    sd a5,56(sp)          ; stack access
    0x84011108    0x38    ld a0,48(sp)          ; stack access
    0x8401110a    0x3a    ld a1,56(sp)          ; stack access
    0x8401110c    0x3c    ld ra,72(sp)          ; stack access
    0x8401110e    0x3e    ld s0,64(sp)          ; stack access
    0x84011110    0x40    addi sp,sp,80
    0x84011112    0x42    ret
    0x84011114    0x44    auipc a5,0xd
    0x84011118    0x48    addi a5,a5,-1228 # ffffffff8401dc48 <current_syscall_error>
    0x8401111c    0x4c    li a4,6
    0x8401111e    0x4e    sd a4,48(a5)
    0x84011120    0x50    sd a0,40(a5)
    0x84011122    0x52    auipc a5,0xd
    0x84011126    0x56    addi a5,a5,-1266 # ffffffff8401dc30 <current_lookup_fault>
    0x8401112a    0x5a    sd zero,0(a5)
    0x8401112e    0x5e    sd zero,8(a5)
    0x84011132    0x62    li a5,3
    0x84011134    0x64    sd a5,48(sp)          ; stack access
    0x84011136    0x66    sd zero,56(sp)        ; stack access
    0x84011138    0x68    j ffffffff84011108 <lookupSlotForCNodeOp+0x38>
    0x8401113a    0x6a    auipc a5,0xd
    0x8401113e    0x6e    addi a5,a5,-1266 # ffffffff8401dc48 <current_syscall_error>
    0x84011142    0x72    li a4,4
    0x84011144    0x74    sd a4,48(a5)
    0x84011146    0x76    li a4,1
    0x84011148    0x78    sd a4,16(a5)
    0x8401114a    0x7a    li a4,64
    0x8401114e    0x7e    sd a4,24(a5)
    0x84011150    0x80    li a5,3
    0x84011152    0x82    sd a5,48(sp)          ; stack access
    0x84011154    0x84    sd zero,56(sp)        ; stack access
    0x84011156    0x86    j ffffffff84011108 <lookupSlotForCNodeOp+0x38>
    0x84011158    0x88    auipc a5,0xd
    0x8401115c    0x8c    addi a5,a5,-1296 # ffffffff8401dc48 <current_syscall_error>
    0x84011160    0x90    li a4,6
    0x84011162    0x92    sd a4,48(a5)
    0x84011164    0x94    sd s0,40(a5)
    0x84011166    0x96    li a5,3
    0x84011168    0x98    sd a5,48(sp)          ; stack access
    0x8401116a    0x9a    sd zero,56(sp)        ; stack access
    0x8401116c    0x9c    j ffffffff84011108 <lookupSlotForCNodeOp+0x38>
    0x8401116e    0x9e    auipc a4,0xd
    0x84011172    0xa2    addi a4,a4,-1318 # ffffffff8401dc48 <current_syscall_error>
    0x84011176    0xa6    li a3,6
    0x84011178    0xa8    sd a3,48(a4)
    0x8401117a    0xaa    sd s0,40(a4)
    0x8401117c    0xac    auipc a4,0xd
    0x84011180    0xb0    addi a4,a4,-1356 # ffffffff8401dc30 <current_lookup_fault>
    0x84011184    0xb4    slli a5,a5,0x2
    0x84011186    0xb6    andi a5,a5,508
    0x8401118a    0xba    ori a5,a5,2
    0x8401118e    0xbe    sd a5,0(a4)
    0x84011190    0xc0    sd zero,8(a4)
    0x84011194    0xc4    li a5,3
    0x84011196    0xc6    sd a5,48(sp)          ; stack access
    0x84011198    0xc8    sd zero,56(sp)        ; stack access
    0x8401119a    0xca    j ffffffff84011108 <lookupSlotForCNodeOp+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 125 nodes.

Section lookupCapAndSlot (130 of 266)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 26 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x84011092     0x0    addi sp,sp,-32
    0x84011094     0x2    sd ra,24(sp)          ; stack access
    0x84011096     0x4    sd s0,16(sp)          ; stack access
    0x84011098     0x6    mv s0,a0
    0x8401109a     0x8    mv a0,a1
    0x8401109c     0xa    mv a1,a2
    0x8401109e     0xc    jal ra,ffffffff84011036 <lookupSlot>
    0x840110a2    0x10    sd a0,0(sp)           ; stack access
    0x840110a4    0x12    sd a1,8(sp)           ; stack access
    0x840110a6    0x14    bnez a0,ffffffff840110c0 <lookupCapAndSlot+0x2e>
    0x840110a8    0x16    ld a4,0(a1)
    0x840110aa    0x18    ld a5,8(a1)
    0x840110ac    0x1a    sd zero,0(s0)         ; stack access
    0x840110b0    0x1e    sd a4,8(s0)           ; stack access
    0x840110b2    0x20    sd a5,16(s0)          ; stack access
    0x840110b4    0x22    sd a1,24(s0)          ; stack access
    0x840110b6    0x24    mv a0,s0
    0x840110b8    0x26    ld ra,24(sp)          ; stack access
    0x840110ba    0x28    ld s0,16(sp)          ; stack access
    0x840110bc    0x2a    addi sp,sp,32
    0x840110be    0x2c    ret
    0x840110c0    0x2e    sd a0,0(s0)           ; stack access
    0x840110c2    0x30    sd zero,8(s0)         ; stack access
    0x840110c6    0x34    sd zero,16(s0)        ; stack access
    0x840110ca    0x38    sd zero,24(s0)        ; stack access
    0x840110ce    0x3c    j ffffffff840110b6 <lookupCapAndSlot+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 46 nodes.

Section lookupCap (131 of 266)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 25 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
13 stack accesses found. Annotated code for `lookupCap`:

    0x84011058     0x0    addi sp,sp,-32
    0x8401105a     0x2    sd ra,24(sp)          ; stack access
    0x8401105c     0x4    sd s0,16(sp)          ; stack access
    0x8401105e     0x6    mv s0,a0
    0x84011060     0x8    mv a0,a1
    0x84011062     0xa    mv a1,a2
    0x84011064     0xc    jal ra,ffffffff84011036 <lookupSlot>
    0x84011068    0x10    sd a0,0(sp)           ; stack access
    0x8401106a    0x12    sd a1,8(sp)           ; stack access
    0x8401106c    0x14    bnez a0,ffffffff84011086 <lookupCap+0x2e>
    0x8401106e    0x16    ld a5,8(sp)           ; stack access
    0x84011070    0x18    ld a4,0(a5)
    0x84011072    0x1a    ld a5,8(a5)
    0x84011074    0x1c    sd zero,0(s0)         ; stack access
    0x84011078    0x20    sd a4,8(s0)           ; stack access
    0x8401107a    0x22    sd a5,16(s0)          ; stack access
    0x8401107c    0x24    mv a0,s0
    0x8401107e    0x26    ld ra,24(sp)          ; stack access
    0x84011080    0x28    ld s0,16(sp)          ; stack access
    0x84011082    0x2a    addi sp,sp,32
    0x84011084    0x2c    ret
    0x84011086    0x2e    sd a0,0(s0)           ; stack access
    0x84011088    0x30    sd zero,8(s0)         ; stack access
    0x8401108c    0x34    sd zero,16(s0)        ; stack access
    0x84011090    0x38    j ffffffff8401107c <lookupCap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 44 nodes.

Section lookupSlot (132 of 266)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.

RVC_FFFFFFFFFFT___FF.

Stack analysis
---------------

Section `lookupSlot` expects pointer to stack in a0.
6 stack accesses found. Annotated code for `lookupSlot`:

    0x84011036     0x0    addi sp,sp,-80
    0x84011038     0x2    sd ra,72(sp)          ; stack access
    0x8401103a     0x4    mv a3,a1
    0x8401103c     0x6    andi a0,a0,-1024
    0x84011040     0xa    li a4,64
    0x84011044     0xe    ld a1,0(a0)           ; stack access
    0x84011046    0x10    ld a2,8(a0)           ; stack access
    0x84011048    0x12    addi a0,sp,8
    0x8401104a    0x14    jal ra,ffffffff84010f0a <resolveAddressBits>
    0x8401104e    0x18    ld a0,8(sp)           ; stack access
    0x84011050    0x1a    ld a1,16(sp)          ; stack access
    0x84011052    0x1c    ld ra,72(sp)          ; stack access
    0x84011054    0x1e    addi sp,sp,80
    0x84011056    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (133 of 266)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 61 instructions.


Stack analysis
---------------

Section `Arch_createObject` expects pointer to stack in a0.
12 stack accesses found. Annotated code for `Arch_createObject`:

    0x84010e6a     0x0    addi sp,sp,-32
    0x84010e6c     0x2    sd ra,24(sp)          ; stack access
    0x84010e6e     0x4    li a5,7
    0x84010e70     0x6    beq a0,a5,ffffffff84010ec0 <Arch_createObject+0x56>
    0x84010e74     0xa    bltu a5,a0,ffffffff84010ea6 <Arch_createObject+0x3c>
    0x84010e78     0xe    li a5,5
    0x84010e7a    0x10    beq a0,a5,ffffffff84010eda <Arch_createObject+0x70>
    0x84010e7e    0x14    li a5,6
    0x84010e80    0x16    bne a0,a5,ffffffff84010ef4 <Arch_createObject+0x8a>
    0x84010e84    0x1a    andi a3,a3,1
    0x84010e86    0x1c    slli a3,a3,0x36
    0x84010e88    0x1e    li a5,19
    0x84010e8a    0x20    slli a5,a5,0x37
    0x84010e8c    0x22    or a3,a3,a5
    0x84010e8e    0x24    sd a3,0(sp)           ; stack access
    0x84010e90    0x26    slli a1,a1,0x9
    0x84010e92    0x28    lui a5,0xfe000
    0x84010e96    0x2c    srli a5,a5,0x10
    0x84010e98    0x2e    and a1,a1,a5
    0x84010e9a    0x30    sd a1,8(sp)           ; stack access
    0x84010e9c    0x32    ld a0,0(sp)           ; stack access
    0x84010e9e    0x34    ld a1,8(sp)           ; stack access
    0x84010ea0    0x36    ld ra,24(sp)          ; stack access
    0x84010ea2    0x38    addi sp,sp,32
    0x84010ea4    0x3a    ret
    0x84010ea6    0x3c    li a5,8
    0x84010ea8    0x3e    bne a0,a5,ffffffff84010ef4 <Arch_createObject+0x8a>
    0x84010eac    0x42    li a5,3
    0x84010eae    0x44    slli a5,a5,0x3b
    0x84010eb0    0x46    sd a5,0(sp)           ; stack access
    0x84010eb2    0x48    slli a1,a1,0x9
    0x84010eb4    0x4a    lui a5,0xfe000
    0x84010eb8    0x4e    srli a5,a5,0x10
    0x84010eba    0x50    and a1,a1,a5
    0x84010ebc    0x52    sd a1,8(sp)           ; stack access
    0x84010ebe    0x54    j ffffffff84010e9c <Arch_createObject+0x32>
    0x84010ec0    0x56    andi a3,a3,1
    0x84010ec2    0x58    slli a3,a3,0x36
    0x84010ec4    0x5a    li a5,23
    0x84010ec6    0x5c    slli a5,a5,0x37
    0x84010ec8    0x5e    or a3,a3,a5
    0x84010eca    0x60    sd a3,0(sp)           ; stack access
    0x84010ecc    0x62    slli a1,a1,0x9
    0x84010ece    0x64    lui a5,0xfe000
    0x84010ed2    0x68    srli a5,a5,0x10
    0x84010ed4    0x6a    and a1,a1,a5
    0x84010ed6    0x6c    sd a1,8(sp)           ; stack access
    0x84010ed8    0x6e    j ffffffff84010e9c <Arch_createObject+0x32>
    0x84010eda    0x70    andi a3,a3,1
    0x84010edc    0x72    slli a3,a3,0x36
    0x84010ede    0x74    li a5,27
    0x84010ee0    0x76    slli a5,a5,0x37
    0x84010ee2    0x78    or a3,a3,a5
    0x84010ee4    0x7a    sd a3,0(sp)           ; stack access
    0x84010ee6    0x7c    slli a1,a1,0x9
    0x84010ee8    0x7e    lui a5,0xfe000
    0x84010eec    0x82    srli a5,a5,0x10
    0x84010eee    0x84    and a1,a1,a5
    0x84010ef0    0x86    sd a1,8(sp)           ; stack access
    0x84010ef2    0x88    j ffffffff84010e9c <Arch_createObject+0x32>
    0x84010ef4    0x8a    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 85 nodes.

Section Arch_getObjectSize (134 of 266)
=======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 19 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_getObjectSize`:

    0x84010e38     0x0    li a4,7
    0x84010e3a     0x2    beq a0,a4,ffffffff84010e66 <Arch_getObjectSize+0x2e>
    0x84010e3e     0x6    mv a5,a0
    0x84010e40     0x8    bltu a4,a0,ffffffff84010e56 <Arch_getObjectSize+0x1e>
    0x84010e44     0xc    li a4,5
    0x84010e46     0xe    li a0,30
    0x84010e48    0x10    beq a5,a4,ffffffff84010e54 <Arch_getObjectSize+0x1c>
    0x84010e4c    0x14    li a4,6
    0x84010e4e    0x16    li a0,12
    0x84010e50    0x18    bne a5,a4,ffffffff84010e5e <Arch_getObjectSize+0x26>
    0x84010e54    0x1c    ret
    0x84010e56    0x1e    li a4,8
    0x84010e58    0x20    li a0,12
    0x84010e5a    0x22    beq a5,a4,ffffffff84010e54 <Arch_getObjectSize+0x1c>
    0x84010e5e    0x26    addi sp,sp,-16
    0x84010e60    0x28    sd ra,8(sp)           ; stack access
    0x84010e62    0x2a    jal ra,ffffffff84010224 <halt>
    0x84010e66    0x2e    li a0,21
    0x84010e68    0x30    j ffffffff84010e54 <Arch_getObjectSize+0x1c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 32 nodes.

Section Arch_sameObjectAs (135 of 266)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84010d90     0x0    addi sp,sp,-48
    0x84010d92     0x2    sd ra,40(sp)          ; stack access
    0x84010d94     0x4    sd a0,16(sp)          ; stack access
    0x84010d96     0x6    sd a1,24(sp)          ; stack access
    0x84010d98     0x8    sd a2,0(sp)           ; stack access
    0x84010d9a     0xa    sd a3,8(sp)           ; stack access
    0x84010d9c     0xc    srli a4,a0,0x3b
    0x84010da0    0x10    li a5,1
    0x84010da2    0x12    beq a4,a5,ffffffff84010db8 <Arch_sameObjectAs+0x28>
    0x84010da6    0x16    ld a2,0(sp)           ; stack access
    0x84010da8    0x18    ld a3,8(sp)           ; stack access
    0x84010daa    0x1a    ld a0,16(sp)          ; stack access
    0x84010dac    0x1c    ld a1,24(sp)          ; stack access
    0x84010dae    0x1e    jal ra,ffffffff84010c26 <Arch_sameRegionAs>
    0x84010db2    0x22    ld ra,40(sp)          ; stack access
    0x84010db4    0x24    addi sp,sp,48
    0x84010db6    0x26    ret
    0x84010db8    0x28    mv a4,a2
    0x84010dba    0x2a    srli a3,a2,0x3b
    0x84010dbe    0x2e    bne a3,a5,ffffffff84010da6 <Arch_sameObjectAs+0x16>
    0x84010dc2    0x32    srli a5,a1,0x9
    0x84010dc6    0x36    slli a2,a5,0x19
    0x84010dca    0x3a    srli a2,a2,0x19
    0x84010dcc    0x3c    slli a3,a5,0x19
    0x84010dd0    0x40    bgez a3,ffffffff84010dfe <Arch_sameObjectAs+0x6e>
    0x84010dd4    0x44    li a3,-1
    0x84010dd6    0x46    slli a5,a3,0x27
    0x84010dda    0x4a    or a2,a2,a5
    0x84010ddc    0x4c    ld a5,8(sp)           ; stack access
    0x84010dde    0x4e    srli a5,a5,0x9
    0x84010de0    0x50    srli a3,a3,0x19
    0x84010de2    0x52    and a3,a3,a5
    0x84010de4    0x54    slli a1,a5,0x19
    0x84010de8    0x58    li a5,0
    0x84010dea    0x5a    bgez a1,ffffffff84010dfa <Arch_sameObjectAs+0x6a>
    0x84010dee    0x5e    li a5,-1
    0x84010df0    0x60    slli a5,a5,0x27
    0x84010df2    0x62    or a3,a3,a5
    0x84010df4    0x64    li a5,0
    0x84010df6    0x66    beq a3,a2,ffffffff84010e12 <Arch_sameObjectAs+0x82>
    0x84010dfa    0x6a    mv a0,a5
    0x84010dfc    0x6c    j ffffffff84010db2 <Arch_sameObjectAs+0x22>
    0x84010dfe    0x6e    ld a5,8(sp)           ; stack access
    0x84010e00    0x70    srli a5,a5,0x9
    0x84010e02    0x72    slli a3,a5,0x19
    0x84010e06    0x76    srli a3,a3,0x19
    0x84010e08    0x78    slli a1,a5,0x19
    0x84010e0c    0x7c    bltz a1,ffffffff84010dee <Arch_sameObjectAs+0x5e>
    0x84010e10    0x80    j ffffffff84010df4 <Arch_sameObjectAs+0x64>
    0x84010e12    0x82    srli a2,a4,0x39
    0x84010e16    0x86    andi a2,a2,3
    0x84010e18    0x88    srli a3,a0,0x39
    0x84010e1c    0x8c    andi a3,a3,3
    0x84010e1e    0x8e    bne a2,a3,ffffffff84010dfa <Arch_sameObjectAs+0x6a>
    0x84010e22    0x92    srli a5,a0,0x36
    0x84010e26    0x96    srli a4,a4,0x36
    0x84010e28    0x98    xori a4,a4,1
    0x84010e2c    0x9c    andi a5,a5,1
    0x84010e2e    0x9e    andi a4,a4,1
    0x84010e30    0xa0    sub a5,a5,a4
    0x84010e32    0xa2    snez a5,a5
    0x84010e36    0xa6    j ffffffff84010dfa <Arch_sameObjectAs+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 90 nodes.

Section Arch_sameRegionAs (136 of 266)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 132 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x84010c26      0x0    srli a5,a0,0x3b
    0x84010c2a      0x4    li a6,11
    0x84010c2c      0x6    beq a5,a6,ffffffff84010d84 <Arch_sameRegionAs+0x15e>
    0x84010c30      0xa    mv a4,a0
    0x84010c32      0xc    bltu a6,a5,ffffffff84010c52 <Arch_sameRegionAs+0x2c>
    0x84010c36     0x10    li a6,1
    0x84010c38     0x12    beq a5,a6,ffffffff84010ca4 <Arch_sameRegionAs+0x7e>
    0x84010c3c     0x16    li a6,3
    0x84010c3e     0x18    bne a5,a6,ffffffff84010c4e <Arch_sameRegionAs+0x28>
    0x84010c42     0x1c    srli a2,a2,0x3b
    0x84010c44     0x1e    li a5,3
    0x84010c46     0x20    li a0,0
    0x84010c48     0x22    beq a2,a5,ffffffff84010d4e <Arch_sameRegionAs+0x128>
    0x84010c4c     0x26    ret
    0x84010c4e     0x28    li a0,0
    0x84010c50     0x2a    ret
    0x84010c52     0x2c    li a3,13
    0x84010c54     0x2e    bne a5,a3,ffffffff84010ca0 <Arch_sameRegionAs+0x7a>
    0x84010c58     0x32    srli a5,a2,0x3b
    0x84010c5c     0x36    li a3,13
    0x84010c5e     0x38    li a0,0
    0x84010c60     0x3a    bne a5,a3,ffffffff84010c4c <Arch_sameRegionAs+0x26>
    0x84010c64     0x3e    slli a4,a4,0x2
    0x84010c66     0x40    lui a0,0xf8000
    0x84010c6a     0x44    srli a0,a0,0x19
    0x84010c6c     0x46    and a0,a0,a4
    0x84010c6e     0x48    slli a5,a4,0x19
    0x84010c72     0x4c    bgez a5,ffffffff84010c7c <Arch_sameRegionAs+0x56>
    0x84010c76     0x50    li a5,-1
    0x84010c78     0x52    slli a5,a5,0x27
    0x84010c7a     0x54    or a0,a0,a5
    0x84010c7c     0x56    slli a4,a2,0x2
    0x84010c80     0x5a    lui a5,0xf8000
    0x84010c84     0x5e    srli a5,a5,0x19
    0x84010c86     0x60    and a5,a5,a4
    0x84010c88     0x62    slli a3,a4,0x19
    0x84010c8c     0x66    bgez a3,ffffffff84010c96 <Arch_sameRegionAs+0x70>
    0x84010c90     0x6a    li a4,-1
    0x84010c92     0x6c    slli a4,a4,0x27
    0x84010c94     0x6e    or a5,a5,a4
    0x84010c96     0x70    sub a0,a5,a0
    0x84010c9a     0x74    seqz a0,a0
    0x84010c9e     0x78    ret
    0x84010ca0     0x7a    li a0,0
    0x84010ca2     0x7c    ret
    0x84010ca4     0x7e    srli a5,a2,0x3b
    0x84010ca8     0x82    li a6,1
    0x84010caa     0x84    li a0,0
    0x84010cac     0x86    bne a5,a6,ffffffff84010c4c <Arch_sameRegionAs+0x26>
    0x84010cb0     0x8a    addi sp,sp,-48
    0x84010cb2     0x8c    sd ra,40(sp)          ; stack access
    0x84010cb4     0x8e    srli a1,a1,0x9
    0x84010cb6     0x90    slli a5,a1,0x19
    0x84010cba     0x94    srli a5,a5,0x19
    0x84010cbc     0x96    slli a0,a1,0x19
    0x84010cc0     0x9a    bgez a0,ffffffff84010cca <Arch_sameRegionAs+0xa4>
    0x84010cc4     0x9e    li a1,-1
    0x84010cc6     0xa0    slli a1,a1,0x27
    0x84010cc8     0xa2    or a5,a5,a1
    0x84010cca     0xa4    srli a3,a3,0x9
    0x84010ccc     0xa6    slli a1,a3,0x19
    0x84010cd0     0xaa    srli a1,a1,0x19
    0x84010cd2     0xac    slli a0,a3,0x19
    0x84010cd6     0xb0    bgez a0,ffffffff84010ce0 <Arch_sameRegionAs+0xba>
    0x84010cda     0xb4    li a3,-1
    0x84010cdc     0xb6    slli a3,a3,0x27
    0x84010cde     0xb8    or a1,a1,a3
    0x84010ce0     0xba    srli a4,a4,0x39
    0x84010ce2     0xbc    andi a4,a4,3
    0x84010ce4     0xbe    li a3,1
    0x84010ce6     0xc0    beq a4,a3,ffffffff84010cf6 <Arch_sameRegionAs+0xd0>
    0x84010cea     0xc4    li a3,2
    0x84010cec     0xc6    beq a4,a3,ffffffff84010cfa <Arch_sameRegionAs+0xd4>
    0x84010cf0     0xca    beqz a4,ffffffff84010d12 <Arch_sameRegionAs+0xec>
    0x84010cf2     0xcc    jal ra,ffffffff84010224 <halt>
    0x84010cf6     0xd0    li a6,21
    0x84010cf8     0xd2    j ffffffff84010cfc <Arch_sameRegionAs+0xd6>
    0x84010cfa     0xd4    li a6,30
    0x84010cfc     0xd6    srli a2,a2,0x39
    0x84010cfe     0xd8    andi a2,a2,3
    0x84010d00     0xda    li a4,1
    0x84010d02     0xdc    beq a2,a4,ffffffff84010d16 <Arch_sameRegionAs+0xf0>
    0x84010d06     0xe0    li a4,2
    0x84010d08     0xe2    beq a2,a4,ffffffff84010d1a <Arch_sameRegionAs+0xf4>
    0x84010d0c     0xe6    beqz a2,ffffffff84010d4a <Arch_sameRegionAs+0x124>
    0x84010d0e     0xe8    jal ra,ffffffff84010224 <halt>
    0x84010d12     0xec    li a6,12
    0x84010d14     0xee    j ffffffff84010cfc <Arch_sameRegionAs+0xd6>
    0x84010d16     0xf0    li a4,21
    0x84010d18     0xf2    j ffffffff84010d1c <Arch_sameRegionAs+0xf6>
    0x84010d1a     0xf4    li a4,30
    0x84010d1c     0xf6    li a0,0
    0x84010d1e     0xf8    bltu a1,a5,ffffffff84010d44 <Arch_sameRegionAs+0x11e>
    0x84010d22     0xfc    li a3,1
    0x84010d24     0xfe    sll a4,a3,a4
    0x84010d28    0x102    addi a2,a1,-1 # fffffffff7ffffff <ki_end+0x73fd0fff>
    0x84010d2c    0x106    add a4,a4,a2
    0x84010d2e    0x108    sll a3,a3,a6
    0x84010d32    0x10c    addi a5,a5,-1
    0x84010d34    0x10e    add a5,a5,a3
    0x84010d36    0x110    bltu a5,a4,ffffffff84010d44 <Arch_sameRegionAs+0x11e>
    0x84010d3a    0x114    sltu a0,a4,a1
    0x84010d3e    0x118    xori a0,a0,1
    0x84010d42    0x11c    sext.w a0,a0
    0x84010d44    0x11e    ld ra,40(sp)          ; stack access
    0x84010d46    0x120    addi sp,sp,48
    0x84010d48    0x122    ret
    0x84010d4a    0x124    li a4,12
    0x84010d4c    0x126    j ffffffff84010d1c <Arch_sameRegionAs+0xf6>
    0x84010d4e    0x128    srli a1,a1,0x9
    0x84010d50    0x12a    slli a0,a1,0x19
    0x84010d54    0x12e    srli a5,a0,0x19
    0x84010d58    0x132    slli a4,a1,0x19
    0x84010d5c    0x136    bgez a4,ffffffff84010d66 <Arch_sameRegionAs+0x140>
    0x84010d60    0x13a    li a4,-1
    0x84010d62    0x13c    slli a4,a4,0x27
    0x84010d64    0x13e    or a5,a5,a4
    0x84010d66    0x140    srli a3,a3,0x9
    0x84010d68    0x142    slli a0,a3,0x19
    0x84010d6c    0x146    srli a0,a0,0x19
    0x84010d6e    0x148    slli a4,a3,0x19
    0x84010d72    0x14c    bgez a4,ffffffff84010d7c <Arch_sameRegionAs+0x156>
    0x84010d76    0x150    li a4,-1
    0x84010d78    0x152    slli a4,a4,0x27
    0x84010d7a    0x154    or a0,a0,a4
    0x84010d7c    0x156    sub a0,a0,a5
    0x84010d7e    0x158    seqz a0,a0
    0x84010d82    0x15c    ret
    0x84010d84    0x15e    srli a0,a2,0x3b
    0x84010d88    0x162    addi a0,a0,-11
    0x84010d8a    0x164    seqz a0,a0
    0x84010d8e    0x168    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
132 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 187 nodes.

Section Arch_maskCapRights (137 of 266)
=======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 32 instructions.

RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

Section `Arch_maskCapRights` expects pointer to stack in a0.
12 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84010acc     0x0    addi sp,sp,-64
    0x84010ace     0x2    sd ra,56(sp)          ; stack access
    0x84010ad0     0x4    sd s0,48(sp)          ; stack access
    0x84010ad2     0x6    sd s1,40(sp)          ; stack access
    0x84010ad4     0x8    mv s0,a1
    0x84010ad6     0xa    mv s1,a2
    0x84010ad8     0xc    srli a4,a1,0x3b
    0x84010adc    0x10    li a5,1
    0x84010ade    0x12    beq a4,a5,ffffffff84010af4 <Arch_maskCapRights+0x28>
    0x84010ae2    0x16    sd a1,16(sp)          ; stack access
    0x84010ae4    0x18    sd a2,24(sp)          ; stack access
    0x84010ae6    0x1a    ld a0,16(sp)          ; stack access
    0x84010ae8    0x1c    ld a1,24(sp)          ; stack access
    0x84010aea    0x1e    ld ra,56(sp)          ; stack access
    0x84010aec    0x20    ld s0,48(sp)          ; stack access
    0x84010aee    0x22    ld s1,40(sp)          ; stack access
    0x84010af0    0x24    addi sp,sp,64
    0x84010af2    0x26    ret
    0x84010af4    0x28    srli a5,a1,0x37
    0x84010af8    0x2c    mv a1,a0
    0x84010afa    0x2e    andi a0,a5,3
    0x84010afe    0x32    jal ra,ffffffff84010968 <maskVMRights>
    0x84010b02    0x36    andi a0,a0,3
    0x84010b04    0x38    slli a0,a0,0x37
    0x84010b06    0x3a    li a1,-3
    0x84010b08    0x3c    slli a1,a1,0x37
    0x84010b0a    0x3e    addi a1,a1,-1
    0x84010b0c    0x40    and s0,s0,a1
    0x84010b0e    0x42    or s0,s0,a0
    0x84010b10    0x44    sd s0,16(sp)          ; stack access
    0x84010b12    0x46    sd s1,24(sp)          ; stack access
    0x84010b14    0x48    j ffffffff84010ae6 <Arch_maskCapRights+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 48 nodes.

Section Arch_deriveCap (138 of 266)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 39 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84010a5e     0x0    srli a5,a2,0x3b
    0x84010a62     0x4    li a4,3
    0x84010a64     0x6    beq a5,a4,ffffffff84010a96 <Arch_deriveCap+0x38>
    0x84010a68     0xa    bgeu a4,a5,ffffffff84010a7a <Arch_deriveCap+0x1c>
    0x84010a6c     0xe    addi a5,a5,-11
    0x84010a6e    0x10    andi a5,a5,-3
    0x84010a70    0x12    beqz a5,ffffffff84010ab8 <Arch_deriveCap+0x5a>
    0x84010a72    0x14    addi sp,sp,-32
    0x84010a74    0x16    sd ra,24(sp)          ; stack access
    0x84010a76    0x18    jal ra,ffffffff84010224 <halt>
    0x84010a7a    0x1c    li a4,1
    0x84010a7c    0x1e    bne a5,a4,ffffffff84010a72 <Arch_deriveCap+0x14>
    0x84010a80    0x22    sd zero,0(a0)         ; stack access
    0x84010a84    0x26    li a5,-1
    0x84010a86    0x28    slli a4,a5,0x27
    0x84010a8a    0x2c    and a2,a2,a4
    0x84010a8c    0x2e    sd a2,8(a0)           ; stack access
    0x84010a8e    0x30    srli a5,a5,0x10
    0x84010a90    0x32    and a3,a3,a5
    0x84010a92    0x34    sd a3,16(a0)          ; stack access
    0x84010a94    0x36    ret
    0x84010a96    0x38    srli a4,a2,0x27
    0x84010a9a    0x3c    andi a4,a4,1
    0x84010a9c    0x3e    bnez a4,ffffffff84010ab4 <Arch_deriveCap+0x56>
    0x84010a9e    0x40    li a3,3
    0x84010aa0    0x42    auipc a2,0xd
    0x84010aa4    0x46    sd a3,472(a2) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84010aa8    0x4a    mv a3,a4
    0x84010aaa    0x4c    mv a2,a4
    0x84010aac    0x4e    sd a5,0(a0)           ; stack access
    0x84010aae    0x50    sd a2,8(a0)           ; stack access
    0x84010ab0    0x52    sd a3,16(a0)          ; stack access
    0x84010ab2    0x54    ret
    0x84010ab4    0x56    li a5,0
    0x84010ab6    0x58    j ffffffff84010aac <Arch_deriveCap+0x4e>
    0x84010ab8    0x5a    sd zero,0(a0)         ; stack access
    0x84010abc    0x5e    sd a2,8(a0)           ; stack access
    0x84010abe    0x60    sd a3,16(a0)          ; stack access
    0x84010ac0    0x62    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 64 nodes.

Section performPageInvocationUnmap (139 of 266)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 41 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x840109c0     0x0    addi sp,sp,-32
    0x840109c2     0x2    sd ra,24(sp)          ; stack access
    0x840109c4     0x4    sd s0,16(sp)          ; stack access
    0x840109c6     0x6    sd a0,0(sp)           ; stack access
    0x840109c8     0x8    mv s0,a2
    0x840109ca     0xa    mv a5,a1
    0x840109cc     0xc    srli a1,a1,0x30
    0x840109ce     0xe    beqz a1,ffffffff84010a04 <performPageInvocationUnmap+0x44>
    0x840109d0    0x10    mv a4,a0
    0x840109d2    0x12    srli a0,a0,0x39
    0x840109d4    0x14    andi a0,a0,3
    0x840109d6    0x16    slli a2,a4,0x19
    0x840109da    0x1a    srli a2,a2,0x19
    0x840109dc    0x1c    slli a3,a4,0x19
    0x840109e0    0x20    bgez a3,ffffffff840109ea <performPageInvocationUnmap+0x2a>
    0x840109e4    0x24    li a4,-1
    0x840109e6    0x26    slli a4,a4,0x27
    0x840109e8    0x28    or a2,a2,a4
    0x840109ea    0x2a    srli a5,a5,0x9
    0x840109ec    0x2c    slli a3,a5,0x19
    0x840109f0    0x30    srli a3,a3,0x19
    0x840109f2    0x32    slli a4,a5,0x19
    0x840109f6    0x36    bgez a4,ffffffff84010a00 <performPageInvocationUnmap+0x40>
    0x840109fa    0x3a    li a5,-1
    0x840109fc    0x3c    slli a5,a5,0x27
    0x840109fe    0x3e    or a3,a3,a5
    0x84010a00    0x40    jal ra,ffffffff84010712 <unmapPage>
    0x84010a04    0x44    ld a4,8(s0)
    0x84010a06    0x46    li a5,-1
    0x84010a08    0x48    srli a3,a5,0x10
    0x84010a0c    0x4c    and a4,a4,a3
    0x84010a0e    0x4e    ld a3,0(s0)
    0x84010a10    0x50    slli a5,a5,0x27
    0x84010a12    0x52    and a5,a5,a3
    0x84010a14    0x54    sd a5,0(s0)
    0x84010a16    0x56    sd a4,8(s0)
    0x84010a18    0x58    li a0,0
    0x84010a1a    0x5a    ld ra,24(sp)          ; stack access
    0x84010a1c    0x5c    ld s0,16(sp)          ; stack access
    0x84010a1e    0x5e    addi sp,sp,32
    0x84010a20    0x60    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 58 nodes.

Section deleteASID (140 of 266)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 23 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASID`:

    0x840108c6     0x0    srli a5,a0,0x9
    0x840108ca     0x4    slli a4,a5,0x3
    0x840108ce     0x8    auipc a5,0xc
    0x840108d2     0xc    addi a5,a5,-166 # ffffffff8401c828 <riscvKSASIDTable>
    0x840108d6    0x10    add a5,a5,a4
    0x840108d8    0x12    ld a5,0(a5)
    0x840108da    0x14    beqz a5,ffffffff840108ea <deleteASID+0x24>
    0x840108dc    0x16    andi a4,a0,511
    0x840108e0    0x1a    slli a4,a4,0x3
    0x840108e2    0x1c    add a5,a5,a4
    0x840108e4    0x1e    ld a4,0(a5)
    0x840108e6    0x20    beq a4,a1,ffffffff840108ec <deleteASID+0x26>
    0x840108ea    0x24    ret
    0x840108ec    0x26    addi sp,sp,-16
    0x840108ee    0x28    sd ra,8(sp)           ; stack access
    0x840108f0    0x2a    sfence.vma zero,a0
    0x840108f4    0x2e    sd zero,0(a5)
    0x840108f8    0x32    auipc a0,0x1e
    0x840108fc    0x36    ld a0,416(a0) # ffffffff8402ea98 <ksCurThread>
    0x84010900    0x3a    jal ra,ffffffff840107a0 <setVMRoot>
    0x84010904    0x3e    ld ra,8(sp)           ; stack access
    0x84010906    0x40    addi sp,sp,16
    0x84010908    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 37 nodes.

Section deleteASIDPool (141 of 266)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASIDPool`:

    0x84010888     0x0    srli a0,a0,0x9
    0x8401088a     0x2    slli a4,a0,0x3
    0x8401088e     0x6    auipc a5,0xc
    0x84010892     0xa    addi a5,a5,-102 # ffffffff8401c828 <riscvKSASIDTable>
    0x84010896     0xe    add a5,a5,a4
    0x84010898    0x10    ld a5,0(a5)
    0x8401089a    0x12    beq a5,a1,ffffffff840108a0 <deleteASIDPool+0x18>
    0x8401089e    0x16    ret
    0x840108a0    0x18    addi sp,sp,-16
    0x840108a2    0x1a    sd ra,8(sp)           ; stack access
    0x840108a4    0x1c    auipc a5,0xc
    0x840108a8    0x20    addi a5,a5,-124 # ffffffff8401c828 <riscvKSASIDTable>
    0x840108ac    0x24    add a0,a5,a4
    0x840108b0    0x28    sd zero,0(a0)
    0x840108b4    0x2c    auipc a0,0x1e
    0x840108b8    0x30    ld a0,484(a0) # ffffffff8402ea98 <ksCurThread>
    0x840108bc    0x34    jal ra,ffffffff840107a0 <setVMRoot>
    0x840108c0    0x38    ld ra,8(sp)           ; stack access
    0x840108c2    0x3a    addi sp,sp,16
    0x840108c4    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 30 nodes.

Section Arch_switchToIdleThread (142 of 266)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToIdleThread`:

    0x84010872     0x0    addi sp,sp,-16
    0x84010874     0x2    sd ra,8(sp)           ; stack access
    0x84010876     0x4    auipc a0,0xd
    0x8401087a     0x8    ld a0,946(a0) # ffffffff8401dc28 <ksIdleThread>
    0x8401087e     0xc    jal ra,ffffffff840107a0 <setVMRoot>
    0x84010882    0x10    ld ra,8(sp)           ; stack access
    0x84010884    0x12    addi sp,sp,16
    0x84010886    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 13 nodes.

Section Arch_switchToThread (143 of 266)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToThread`:

    0x84010864    0x0    addi sp,sp,-16
    0x84010866    0x2    sd ra,8(sp)           ; stack access
    0x84010868    0x4    jal ra,ffffffff840107a0 <setVMRoot>
    0x8401086c    0x8    ld ra,8(sp)           ; stack access
    0x8401086e    0xa    addi sp,sp,16
    0x84010870    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 10 nodes.

Section setVMRoot (144 of 266)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 74 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `setVMRoot`:

    0x840107a0     0x0    andi a0,a0,-1024
    0x840107a4     0x4    ld a5,32(a0)
    0x840107a6     0x6    srli a5,a5,0x3b
    0x840107a8     0x8    li a4,3
    0x840107aa     0xa    beq a5,a4,ffffffff840107d4 <setVMRoot+0x34>
    0x840107ae     0xe    auipc a5,0xb
    0x840107b2    0x12    addi a5,a5,-1966 # ffffffff8401b000 <kernel_root_pageTable>
    0x840107b6    0x16    li a4,1
    0x840107b8    0x18    slli a4,a4,0x20
    0x840107ba    0x1a    add a5,a5,a4
    0x840107bc    0x1c    srli a5,a5,0xc
    0x840107be    0x1e    li a4,-1
    0x840107c0    0x20    srli a3,a4,0x14
    0x840107c4    0x24    and a5,a5,a3
    0x840107c6    0x26    slli a4,a4,0x3f
    0x840107c8    0x28    or a5,a5,a4
    0x840107ca    0x2a    csrw satp,a5
    0x840107ce    0x2e    sfence.vma
    0x840107d2    0x32    ret
    0x840107d4    0x34    addi sp,sp,-48
    0x840107d6    0x36    sd ra,40(sp)          ; stack access
    0x840107d8    0x38    sd s0,32(sp)          ; stack access
    0x840107da    0x3a    sd s1,24(sp)          ; stack access
    0x840107dc    0x3c    sd s2,16(sp)          ; stack access
    0x840107de    0x3e    addi a3,a0,32
    0x840107e2    0x42    ld a5,8(a3)
    0x840107e4    0x44    srli a4,a5,0x9
    0x840107e8    0x48    slli s0,a4,0x19
    0x840107ec    0x4c    srli s0,s0,0x19
    0x840107ee    0x4e    slli a3,a4,0x19
    0x840107f2    0x52    bgez a3,ffffffff840107fc <setVMRoot+0x5c>
    0x840107f6    0x56    li a4,-1
    0x840107f8    0x58    slli a4,a4,0x27
    0x840107fa    0x5a    or s0,s0,a4
    0x840107fc    0x5c    srli s1,a5,0x30
    0x84010800    0x60    mv a0,s1
    0x84010802    0x62    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010806    0x66    sd a0,0(sp)           ; stack access
    0x84010808    0x68    sd a1,8(sp)           ; stack access
    0x8401080a    0x6a    bnez a0,ffffffff8401083e <setVMRoot+0x9e>
    0x8401080c    0x6c    bne a1,s0,ffffffff8401083e <setVMRoot+0x9e>
    0x84010810    0x70    li a5,1
    0x84010812    0x72    slli a5,a5,0x26
    0x84010814    0x74    add a5,a5,s0
    0x84010816    0x76    srli a5,a5,0xc
    0x84010818    0x78    li a4,-1
    0x8401081a    0x7a    srli s0,a4,0x14
    0x8401081e    0x7e    and a5,a5,s0
    0x84010820    0x80    slli a0,s1,0x2c
    0x84010824    0x84    or a5,a5,a0
    0x84010826    0x86    slli a4,a4,0x3f
    0x84010828    0x88    or a5,a5,a4
    0x8401082a    0x8a    csrw satp,a5
    0x8401082e    0x8e    sfence.vma
    0x84010832    0x92    ld ra,40(sp)          ; stack access
    0x84010834    0x94    ld s0,32(sp)          ; stack access
    0x84010836    0x96    ld s1,24(sp)          ; stack access
    0x84010838    0x98    ld s2,16(sp)          ; stack access
    0x8401083a    0x9a    addi sp,sp,48
    0x8401083c    0x9c    ret
    0x8401083e    0x9e    auipc a5,0xa
    0x84010842    0xa2    addi a5,a5,1986 # ffffffff8401b000 <kernel_root_pageTable>
    0x84010846    0xa6    li a4,1
    0x84010848    0xa8    slli a4,a4,0x20
    0x8401084a    0xaa    add a5,a5,a4
    0x8401084c    0xac    srli a5,a5,0xc
    0x8401084e    0xae    li a4,-1
    0x84010850    0xb0    srli a3,a4,0x14
    0x84010854    0xb4    and a5,a5,a3
    0x84010856    0xb6    slli a4,a4,0x3f
    0x84010858    0xb8    or a5,a5,a4
    0x8401085a    0xba    csrw satp,a5
    0x8401085e    0xbe    sfence.vma
    0x84010862    0xc2    j ffffffff84010832 <setVMRoot+0x92>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 103 nodes.

Section unmapPageTable (145 of 266)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 64 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `unmapPageTable`:

    0x84010668     0x0    addi sp,sp,-48
    0x8401066a     0x2    sd ra,40(sp)          ; stack access
    0x8401066c     0x4    sd s0,32(sp)          ; stack access
    0x8401066e     0x6    sd s1,24(sp)          ; stack access
    0x84010670     0x8    mv s0,a1
    0x84010672     0xa    mv s1,a2
    0x84010674     0xc    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010678    0x10    sd a0,0(sp)           ; stack access
    0x8401067a    0x12    sd a1,8(sp)           ; stack access
    0x8401067c    0x14    bnez a0,ffffffff840106fc <unmapPageTable+0x94>
    0x8401067e    0x16    beq a1,s1,ffffffff84010706 <unmapPageTable+0x9e>
    0x84010682    0x1a    srli a5,s0,0x1e
    0x84010686    0x1e    andi a5,a5,511
    0x8401068a    0x22    slli a5,a5,0x3
    0x8401068c    0x24    add a4,a1,a5
    0x84010690    0x28    ld a5,0(a4)
    0x84010692    0x2a    andi a3,a5,1
    0x84010696    0x2e    beqz a3,ffffffff840106fc <unmapPageTable+0x94>
    0x84010698    0x30    srli a3,a5,0x1
    0x8401069c    0x34    srli a2,a5,0x2
    0x840106a0    0x38    or a3,a3,a2
    0x840106a2    0x3a    srli a2,a5,0x3
    0x840106a6    0x3e    or a3,a3,a2
    0x840106a8    0x40    andi a3,a3,1
    0x840106aa    0x42    bnez a3,ffffffff840106fc <unmapPageTable+0x94>
    0x840106ac    0x44    slli a5,a5,0x2
    0x840106ae    0x46    lui a3,0xfff00
    0x840106b2    0x4a    srli a3,a3,0x8
    0x840106b4    0x4c    and a5,a5,a3
    0x840106b6    0x4e    li a3,-1
    0x840106b8    0x50    slli a3,a3,0x26
    0x840106ba    0x52    add a5,a5,a3
    0x840106bc    0x54    beq s1,a5,ffffffff84010708 <unmapPageTable+0xa0>
    0x840106c0    0x58    srli s0,s0,0x15
    0x840106c2    0x5a    andi s0,s0,511
    0x840106c6    0x5e    slli s0,s0,0x3
    0x840106c8    0x60    add a4,a5,s0
    0x840106cc    0x64    ld a5,0(a4)
    0x840106ce    0x66    andi a3,a5,1
    0x840106d2    0x6a    beqz a3,ffffffff840106fc <unmapPageTable+0x94>
    0x840106d4    0x6c    srli a3,a5,0x1
    0x840106d8    0x70    srli a2,a5,0x2
    0x840106dc    0x74    or a3,a3,a2
    0x840106de    0x76    srli a2,a5,0x3
    0x840106e2    0x7a    or a3,a3,a2
    0x840106e4    0x7c    andi a3,a3,1
    0x840106e6    0x7e    bnez a3,ffffffff840106fc <unmapPageTable+0x94>
    0x840106e8    0x80    slli a5,a5,0x2
    0x840106ea    0x82    lui a3,0xfff00
    0x840106ee    0x86    srli a3,a3,0x8
    0x840106f0    0x88    and a5,a5,a3
    0x840106f2    0x8a    li a3,-1
    0x840106f4    0x8c    slli a3,a3,0x26
    0x840106f6    0x8e    add a5,a5,a3
    0x840106f8    0x90    beq s1,a5,ffffffff84010708 <unmapPageTable+0xa0>
    0x840106fc    0x94    ld ra,40(sp)          ; stack access
    0x840106fe    0x96    ld s0,32(sp)          ; stack access
    0x84010700    0x98    ld s1,24(sp)          ; stack access
    0x84010702    0x9a    addi sp,sp,48
    0x84010704    0x9c    ret
    0x84010706    0x9e    li a4,0
    0x84010708    0xa0    sd zero,0(a4)
    0x8401070c    0xa4    sfence.vma
    0x84010710    0xa8    j ffffffff840106fc <unmapPageTable+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 94 nodes.

Section handleVMFault (146 of 266)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 35 instructions.

Skipping 143026f3 csrr a3,stval


Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x84010606     0x0    csrr a3,stval
    0x8401060a     0x4    li a5,15
    0x8401060c     0x6    bltu a5,a1,ffffffff84010660 <handleVMFault+0x5a>
    0x84010610     0xa    slli a1,a1,0x2
    0x84010612     0xc    auipc a4,0x7
    0x84010616    0x10    addi a4,a4,-858 # ffffffff840172b8 <ksDomScheduleLength+0x200>
    0x8401061a    0x14    add a1,a1,a4
    0x8401061c    0x16    lw a5,0(a1)
    0x8401061e    0x18    add a5,a5,a4
    0x84010620    0x1a    jr a5
    0x84010622    0x1c    auipc a4,0xc
    0x84010626    0x20    addi a4,a4,478 # ffffffff8401c800 <current_fault>
    0x8401062a    0x24    lui a5,0x28000
    0x8401062e    0x28    addi a5,a5,5
    0x84010630    0x2a    sd a5,0(a4)
    0x84010632    0x2c    sd a3,8(a4)
    0x84010634    0x2e    li a0,1
    0x84010636    0x30    ret
    0x84010638    0x32    auipc a4,0xc
    0x8401063c    0x36    addi a4,a4,456 # ffffffff8401c800 <current_fault>
    0x84010640    0x3a    lui a5,0x38000
    0x84010644    0x3e    addi a5,a5,5
    0x84010646    0x40    sd a5,0(a4)
    0x84010648    0x42    sd a3,8(a4)
    0x8401064a    0x44    j ffffffff84010634 <handleVMFault+0x2e>
    0x8401064c    0x46    auipc a4,0xc
    0x84010650    0x4a    addi a4,a4,436 # ffffffff8401c800 <current_fault>
    0x84010654    0x4e    lui a5,0x8080
    0x84010658    0x52    addi a5,a5,5
    0x8401065a    0x54    sd a5,0(a4)
    0x8401065c    0x56    sd a3,8(a4)
    0x8401065e    0x58    j ffffffff84010634 <handleVMFault+0x2e>
    0x84010660    0x5a    addi sp,sp,-16
    0x84010662    0x5c    sd ra,8(sp)           ; stack access
    0x84010664    0x5e    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 49 nodes.

Section lookupIPCBuffer (147 of 266)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 54 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x840103be     0x0    andi a5,a1,-1024
    0x840103c2     0x4    addi a2,a5,128
    0x840103c6     0x8    ld a5,128(a5)
    0x840103c8     0xa    srli a3,a5,0x3b
    0x840103cc     0xe    li a4,1
    0x840103ce    0x10    bne a3,a4,ffffffff84010444 <lookupIPCBuffer+0x86>
    0x840103d2    0x14    slli a4,a5,0x9
    0x840103d6    0x18    bltz a4,ffffffff84010448 <lookupIPCBuffer+0x8a>
    0x840103da    0x1c    srli a4,a5,0x37
    0x840103de    0x20    andi a4,a4,3
    0x840103e0    0x22    li a3,3
    0x840103e2    0x24    bne a4,a3,ffffffff8401041e <lookupIPCBuffer+0x60>
    0x840103e6    0x28    ld a3,8(a2)
    0x840103e8    0x2a    srli a3,a3,0x9
    0x840103ea    0x2c    slli a0,a3,0x19
    0x840103ee    0x30    srli a4,a0,0x19
    0x840103f2    0x34    slli a2,a3,0x19
    0x840103f6    0x38    bgez a2,ffffffff84010400 <lookupIPCBuffer+0x42>
    0x840103fa    0x3c    li a3,-1
    0x840103fc    0x3e    slli a3,a3,0x27
    0x840103fe    0x40    or a4,a4,a3
    0x84010400    0x42    ld a3,384(a1)
    0x84010404    0x46    srli a5,a5,0x39
    0x84010406    0x48    andi a5,a5,3
    0x84010408    0x4a    li a2,1
    0x8401040a    0x4c    beq a5,a2,ffffffff8401042a <lookupIPCBuffer+0x6c>
    0x8401040e    0x50    li a2,2
    0x84010410    0x52    beq a5,a2,ffffffff8401042e <lookupIPCBuffer+0x70>
    0x84010414    0x56    beqz a5,ffffffff84010440 <lookupIPCBuffer+0x82>
    0x84010416    0x58    addi sp,sp,-16
    0x84010418    0x5a    sd ra,8(sp)           ; stack access
    0x8401041a    0x5c    jal ra,ffffffff84010224 <halt>
    0x8401041e    0x60    bnez a0,ffffffff8401044c <lookupIPCBuffer+0x8e>
    0x84010420    0x62    li a3,2
    0x84010422    0x64    beq a4,a3,ffffffff840103e6 <lookupIPCBuffer+0x28>
    0x84010426    0x68    li a0,0
    0x84010428    0x6a    ret
    0x8401042a    0x6c    li a5,21
    0x8401042c    0x6e    j ffffffff84010430 <lookupIPCBuffer+0x72>
    0x8401042e    0x70    li a5,30
    0x84010430    0x72    li a0,-1
    0x84010432    0x74    sll a0,a0,a5
    0x84010436    0x78    not a0,a0
    0x8401043a    0x7c    and a0,a0,a3
    0x8401043c    0x7e    add a0,a0,a4
    0x8401043e    0x80    ret
    0x84010440    0x82    li a5,12
    0x84010442    0x84    j ffffffff84010430 <lookupIPCBuffer+0x72>
    0x84010444    0x86    li a0,0
    0x84010446    0x88    ret
    0x84010448    0x8a    li a0,0
    0x8401044a    0x8c    ret
    0x8401044c    0x8e    li a0,0
    0x8401044e    0x90    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 82 nodes.

Section Arch_setMRs_fault (148 of 266)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 18 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x84010242     0x0    li a5,5
    0x84010244     0x2    bne a3,a5,ffffffff8401026c <Arch_setMRs_fault+0x2a>
    0x84010248     0x6    ld a5,264(a0)
    0x8401024c     0xa    sd a5,88(a1)
    0x8401024e     0xc    ld a5,320(a0)
    0x84010252    0x10    sd a5,96(a1)
    0x84010254    0x12    ld a5,312(a0)
    0x84010258    0x16    srli a5,a5,0x13
    0x8401025a    0x18    andi a5,a5,1
    0x8401025c    0x1a    sd a5,104(a1)
    0x8401025e    0x1c    ld a5,312(a0)
    0x84010262    0x20    srliw a5,a5,0x1b
    0x84010266    0x24    sd a5,112(a1)
    0x84010268    0x26    li a0,4
    0x8401026a    0x28    ret
    0x8401026c    0x2a    addi sp,sp,-16
    0x8401026e    0x2c    sd ra,8(sp)           ; stack access
    0x84010270    0x2e    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 31 nodes.

Section Arch_handleFaultReply (149 of 266)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x84010230    0x0    li a5,5
    0x84010232    0x2    bne a2,a5,ffffffff8401023a <Arch_handleFaultReply+0xa>
    0x84010236    0x6    li a0,1
    0x84010238    0x8    ret
    0x8401023a    0xa    addi sp,sp,-16
    0x8401023c    0xc    sd ra,8(sp)           ; stack access
    0x8401023e    0xe    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section interrupt (150 of 266)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840100cc    0x0    sd ra,272(t0)
    0x840100d0    0x4    j ffffffff84013a52 <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (151 of 266)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840100c4    0x0    sd ra,272(t0)
    0x840100c8    0x4    j ffffffff840141b2 <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (152 of 266)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840100ba    0x0    addi ra,ra,4
    0x840100bc    0x2    sd ra,272(t0)
    0x840100c0    0x6    j ffffffff84016ee4 <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section maybe_alloc_extra_bi (153 of 266)
=========================================

Deriving specifications
-----------------------

Section `maybe_alloc_extra_bi` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `maybe_alloc_extra_bi`:

    0x840023d8     0x0    bltu a1,a0,ffffffff840023e8 <maybe_alloc_extra_bi+0x10>
    0x840023dc     0x4    mv a5,a1
    0x840023de     0x6    auipc a4,0x1
    0x840023e2     0xa    ld a4,-1422(a4) # ffffffff84002e50 <rootserver+0x28>
    0x840023e6     0xe    beqz a4,ffffffff840023ea <maybe_alloc_extra_bi+0x12>
    0x840023e8    0x10    ret
    0x840023ea    0x12    addi sp,sp,-16
    0x840023ec    0x14    sd ra,8(sp)           ; stack access
    0x840023ee    0x16    li a1,1
    0x840023f0    0x18    mv a0,a5
    0x840023f2    0x1a    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x840023f6    0x1e    auipc a5,0x1
    0x840023fa    0x22    sd a0,-1446(a5) # ffffffff84002e50 <rootserver+0x28>
    0x840023fe    0x26    ld ra,8(sp)           ; stack access
    0x84002400    0x28    addi sp,sp,16
    0x84002402    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maybe_alloc_extra_bi` has 27 nodes.

Section alloc_rootserver_obj (154 of 266)
=========================================

Deriving specifications
-----------------------

Section `alloc_rootserver_obj` consists of 16 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `alloc_rootserver_obj`:

    0x840023aa     0x0    addi sp,sp,-16
    0x840023ac     0x2    sd ra,8(sp)           ; stack access
    0x840023ae     0x4    sd s0,0(sp)           ; stack access
    0x840023b0     0x6    auipc a5,0x1
    0x840023b4     0xa    addi a5,a5,-2024 # ffffffff84002bc8 <ndks_boot>
    0x840023b8     0xe    ld s0,680(a5)
    0x840023bc    0x12    sll a1,a1,a0
    0x840023c0    0x16    add a4,a1,s0
    0x840023c4    0x1a    sd a4,680(a5)
    0x840023c8    0x1e    mv a0,s0
    0x840023ca    0x20    jal ra,ffffffff840156c0 <memzero>
    0x840023ce    0x24    mv a0,s0
    0x840023d0    0x26    ld ra,8(sp)           ; stack access
    0x840023d2    0x28    ld s0,0(sp)           ; stack access
    0x840023d4    0x2a    addi sp,sp,16
    0x840023d6    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `alloc_rootserver_obj` has 24 nodes.

Section create_idle_thread (155 of 266)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_idle_thread`:

    0x84002176     0x0    addi sp,sp,-16
    0x84002178     0x2    sd ra,8(sp)           ; stack access
    0x8400217a     0x4    auipc a0,0x16
    0x8400217e     0x8    addi a0,a0,-378 # ffffffff84018000 <ksIdleThreadTCB+0x200>
    0x84002182     0xc    auipc a5,0x1c
    0x84002186    0x10    sd a0,-1370(a5) # ffffffff8401dc28 <ksIdleThread>
    0x8400218a    0x14    jal ra,ffffffff84002148 <configureIdleThread>
    0x8400218e    0x18    li a0,1
    0x84002190    0x1a    ld ra,8(sp)           ; stack access
    0x84002192    0x1c    addi sp,sp,16
    0x84002194    0x1e    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 16 nodes.

Section configureIdleThread (156 of 266)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `configureIdleThread`:

    0x84002148     0x0    addi sp,sp,-16
    0x8400214a     0x2    sd ra,8(sp)           ; stack access
    0x8400214c     0x4    auipc a4,0xe
    0x84002150     0x8    addi a4,a4,-120 # ffffffff840100d4 <idle_thread>
    0x84002154     0xc    sd a4,272(a0)
    0x84002158    0x10    li a4,288
    0x8400215c    0x14    sd a4,256(a0)
    0x84002160    0x18    auipc a4,0x1c
    0x84002164    0x1c    addi a4,a4,-1336 # ffffffff8401dc28 <ksIdleThread>
    0x84002168    0x20    sd a4,8(a0)
    0x8400216a    0x22    li a1,7
    0x8400216c    0x24    jal ra,ffffffff840122d8 <setThreadState>
    0x84002170    0x28    ld ra,8(sp)           ; stack access
    0x84002172    0x2a    addi sp,sp,16
    0x84002174    0x2c    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 22 nodes.

Section create_kernel_untypeds (157 of 266)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 38 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x840017c2     0x0    addi sp,sp,-80
    0x840017c4     0x2    sd ra,72(sp)          ; stack access
    0x840017c6     0x4    sd s0,64(sp)          ; stack access
    0x840017c8     0x6    sd s1,56(sp)          ; stack access
    0x840017ca     0x8    sd s2,48(sp)          ; stack access
    0x840017cc     0xa    sd a0,16(sp)          ; stack access
    0x840017ce     0xc    sd a1,24(sp)          ; stack access
    0x840017d0     0xe    mv a6,a3
    0x840017d2    0x10    mv s1,a4
    0x840017d4    0x12    mv a5,a4
    0x840017d6    0x14    mv a3,a2
    0x840017d8    0x16    mv a4,a6
    0x840017da    0x18    li a2,0
    0x840017dc    0x1a    jal ra,ffffffff84001612 <create_untypeds_for_region>
    0x840017e0    0x1e    beqz a0,ffffffff84001814 <create_kernel_untypeds+0x52>
    0x840017e2    0x20    auipc s0,0x1
    0x840017e6    0x24    addi s0,s0,1326 # ffffffff84002d10 <ndks_boot+0x148>
    0x840017ea    0x28    auipc s2,0x1
    0x840017ee    0x2c    addi s2,s2,1574 # ffffffff84002e10 <ndks_boot+0x248>
    0x840017f2    0x30    ld a3,0(s0)
    0x840017f4    0x32    ld a4,8(s0)
    0x840017f6    0x34    sd zero,0(s0)
    0x840017fa    0x38    sd zero,8(s0)
    0x840017fe    0x3c    mv a5,s1
    0x84001800    0x3e    li a2,0
    0x84001802    0x40    ld a0,16(sp)          ; stack access
    0x84001804    0x42    ld a1,24(sp)          ; stack access
    0x84001806    0x44    jal ra,ffffffff84001612 <create_untypeds_for_region>
    0x8400180a    0x48    beqz a0,ffffffff84001814 <create_kernel_untypeds+0x52>
    0x8400180c    0x4a    addi s0,s0,16
    0x8400180e    0x4c    bne s0,s2,ffffffff840017f2 <create_kernel_untypeds+0x30>
    0x84001812    0x50    li a0,1
    0x84001814    0x52    ld ra,72(sp)          ; stack access
    0x84001816    0x54    ld s0,64(sp)          ; stack access
    0x84001818    0x56    ld s1,56(sp)          ; stack access
    0x8400181a    0x58    ld s2,48(sp)          ; stack access
    0x8400181c    0x5a    addi sp,sp,80
    0x8400181e    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 63 nodes.

Section create_device_untypeds (158 of 266)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 64 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `create_device_untypeds`:

    0x84001728     0x0    addi sp,sp,-96
    0x8400172a     0x2    sd ra,88(sp)          ; stack access
    0x8400172c     0x4    sd s0,80(sp)          ; stack access
    0x8400172e     0x6    sd s1,72(sp)          ; stack access
    0x84001730     0x8    sd s2,64(sp)          ; stack access
    0x84001732     0xa    sd s3,56(sp)          ; stack access
    0x84001734     0xc    sd s4,48(sp)          ; stack access
    0x84001736     0xe    sd s5,40(sp)          ; stack access
    0x84001738    0x10    sd a0,0(sp)           ; stack access
    0x8400173a    0x12    sd a1,8(sp)           ; stack access
    0x8400173c    0x14    mv s5,a2
    0x8400173e    0x16    auipc a3,0x1
    0x84001742    0x1a    ld a3,1482(a3) # ffffffff84002d08 <ndks_boot+0x140>
    0x84001746    0x1e    beqz a3,ffffffff840017a6 <create_device_untypeds+0x7e>
    0x84001748    0x20    auipc s0,0x1
    0x8400174c    0x24    addi s0,s0,1152 # ffffffff84002bc8 <ndks_boot>
    0x84001750    0x28    li s1,0
    0x84001752    0x2a    li a3,0
    0x84001754    0x2c    li s4,-1
    0x84001756    0x2e    slli s4,s4,0x26
    0x84001758    0x30    mv s3,s0
    0x8400175a    0x32    j ffffffff8400176c <create_device_untypeds+0x44>
    0x8400175c    0x34    ld a3,8(s2)
    0x84001760    0x38    addi s1,s1,1
    0x84001762    0x3a    addi s0,s0,16
    0x84001764    0x3c    ld a5,320(s3)
    0x84001768    0x40    bgeu s1,a5,ffffffff84001788 <create_device_untypeds+0x60>
    0x8400176c    0x44    mv s2,s0
    0x8400176e    0x46    ld a4,0(s0)
    0x84001770    0x48    bgeu a3,a4,ffffffff8400175c <create_device_untypeds+0x34>
    0x84001774    0x4c    mv a5,s5
    0x84001776    0x4e    add a3,a3,s4
    0x84001778    0x50    add a4,a4,s4
    0x8400177a    0x52    li a2,1
    0x8400177c    0x54    ld a0,0(sp)           ; stack access
    0x8400177e    0x56    ld a1,8(sp)           ; stack access
    0x84001780    0x58    jal ra,ffffffff84001612 <create_untypeds_for_region>
    0x84001784    0x5c    bnez a0,ffffffff8400175c <create_device_untypeds+0x34>
    0x84001786    0x5e    j ffffffff84001794 <create_device_untypeds+0x6c>
    0x84001788    0x60    lui a5,0xfc000
    0x8400178c    0x64    srli a5,a5,0x19
    0x8400178e    0x66    li a0,1
    0x84001790    0x68    bgeu a5,a3,ffffffff840017a6 <create_device_untypeds+0x7e>
    0x84001794    0x6c    ld ra,88(sp)          ; stack access
    0x84001796    0x6e    ld s0,80(sp)          ; stack access
    0x84001798    0x70    ld s1,72(sp)          ; stack access
    0x8400179a    0x72    ld s2,64(sp)          ; stack access
    0x8400179c    0x74    ld s3,56(sp)          ; stack access
    0x8400179e    0x76    ld s4,48(sp)          ; stack access
    0x840017a0    0x78    ld s5,40(sp)          ; stack access
    0x840017a2    0x7a    addi sp,sp,96
    0x840017a4    0x7c    ret
    0x840017a6    0x7e    li a4,-1
    0x840017a8    0x80    slli a2,a4,0x26
    0x840017ac    0x84    mv a5,s5
    0x840017ae    0x86    add a3,a3,a2
    0x840017b0    0x88    srli a4,a4,0x1a
    0x840017b2    0x8a    li a2,1
    0x840017b4    0x8c    ld a0,0(sp)           ; stack access
    0x840017b6    0x8e    ld a1,8(sp)           ; stack access
    0x840017b8    0x90    jal ra,ffffffff84001612 <create_untypeds_for_region>
    0x840017bc    0x94    beqz a0,ffffffff84001794 <create_device_untypeds+0x6c>
    0x840017be    0x96    li a0,1
    0x840017c0    0x98    j ffffffff84001794 <create_device_untypeds+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 103 nodes.

Section calculate_extra_bi_size_bits (159 of 266)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x84000e6e     0x0    addi sp,sp,-16
    0x84000e70     0x2    sd ra,8(sp)           ; stack access
    0x84000e72     0x4    sd s0,0(sp)           ; stack access
    0x84000e74     0x6    mv s0,a0
    0x84000e76     0x8    beqz a0,ffffffff84000e9e <calculate_extra_bi_size_bits+0x30>
    0x84000e78     0xa    addi a0,a0,-1
    0x84000e7a     0xc    srli a0,a0,0xc
    0x84000e7c     0xe    addi a0,a0,1
    0x84000e7e    0x10    slli a0,a0,0xc
    0x84000e80    0x12    jal ra,ffffffff84017074 <__clzdi2>
    0x84000e84    0x16    sext.w a5,a0
    0x84000e88    0x1a    li a0,63
    0x84000e8c    0x1e    sub a0,a0,a5
    0x84000e8e    0x20    li a4,1
    0x84000e90    0x22    sll a4,a4,a0
    0x84000e94    0x26    bgeu a4,s0,ffffffff84000e9e <calculate_extra_bi_size_bits+0x30>
    0x84000e98    0x2a    li a0,64
    0x84000e9c    0x2e    sub a0,a0,a5
    0x84000e9e    0x30    ld ra,8(sp)           ; stack access
    0x84000ea0    0x32    ld s0,0(sp)           ; stack access
    0x84000ea2    0x34    addi sp,sp,16
    0x84000ea4    0x36    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 32 nodes.

Section create_bi_frame_cap (160 of 266)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 127 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x84000d16      0x0    addi sp,sp,-64
    0x84000d18      0x2    sd ra,56(sp)          ; stack access
    0x84000d1a      0x4    sd a0,16(sp)          ; stack access
    0x84000d1c      0x6    sd a1,24(sp)          ; stack access
    0x84000d1e      0x8    mv a0,a2
    0x84000d20      0xa    mv a1,a3
    0x84000d22      0xc    mv a3,a4
    0x84000d24      0xe    li a6,0
    0x84000d26     0x10    li a5,0
    0x84000d28     0x12    li a4,1
    0x84000d2a     0x14    auipc a2,0x2
    0x84000d2e     0x18    ld a2,286(a2) # ffffffff84002e48 <rootserver+0x20>
    0x84000d32     0x1c    jal ra,ffffffff8400086a <create_mapped_it_frame_cap>
    0x84000d36     0x20    sd a0,32(sp)          ; stack access
    0x84000d38     0x22    sd a1,40(sp)          ; stack access
    0x84000d3a     0x24    ld a4,16(sp)          ; stack access
    0x84000d3c     0x26    ld a0,24(sp)          ; stack access
    0x84000d3e     0x28    srli a3,a4,0x3b
    0x84000d42     0x2c    li a5,20
    0x84000d44     0x2e    bltu a5,a3,ffffffff84000df2 <create_bi_frame_cap+0xdc>
    0x84000d48     0x32    slli a2,a3,0x2
    0x84000d4c     0x36    auipc a1,0x16
    0x84000d50     0x3a    addi a1,a1,1536 # ffffffff8401734c <ksDomScheduleLength+0x294>
    0x84000d54     0x3e    add a2,a2,a1
    0x84000d56     0x40    lw a5,0(a2)
    0x84000d58     0x42    add a5,a5,a1
    0x84000d5a     0x44    jr a5
    0x84000d5c     0x46    slli a5,a4,0x19
    0x84000d60     0x4a    srli a5,a5,0x19
    0x84000d62     0x4c    slli a3,a4,0x19
    0x84000d66     0x50    bgez a3,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000d6a     0x54    li a4,-1
    0x84000d6c     0x56    slli a4,a4,0x27
    0x84000d6e     0x58    or a5,a5,a4
    0x84000d70     0x5a    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000d72     0x5c    slli a5,a4,0x19
    0x84000d76     0x60    srli a5,a5,0x19
    0x84000d78     0x62    slli a3,a4,0x19
    0x84000d7c     0x66    bgez a3,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000d80     0x6a    li a4,-1
    0x84000d82     0x6c    slli a4,a4,0x27
    0x84000d84     0x6e    or a5,a5,a4
    0x84000d86     0x70    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000d88     0x72    slli a5,a4,0x19
    0x84000d8c     0x76    srli a5,a5,0x19
    0x84000d8e     0x78    slli a3,a4,0x19
    0x84000d92     0x7c    bgez a3,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000d96     0x80    li a4,-1
    0x84000d98     0x82    slli a4,a4,0x27
    0x84000d9a     0x84    or a5,a5,a4
    0x84000d9c     0x86    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000d9e     0x88    slli a4,a4,0x1
    0x84000da0     0x8a    lui a5,0xfc000
    0x84000da4     0x8e    srli a5,a5,0x19
    0x84000da6     0x90    and a5,a5,a4
    0x84000da8     0x92    slli a3,a4,0x19
    0x84000dac     0x96    bgez a3,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000db0     0x9a    li a4,-1
    0x84000db2     0x9c    slli a4,a4,0x27
    0x84000db4     0x9e    or a5,a5,a4
    0x84000db6     0xa0    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000db8     0xa2    slli a5,a4,0x19
    0x84000dbc     0xa6    srli a5,a5,0x19
    0x84000dbe     0xa8    slli a3,a4,0x19
    0x84000dc2     0xac    bgez a3,ffffffff84000dcc <create_bi_frame_cap+0xb6>
    0x84000dc6     0xb0    li a4,-1
    0x84000dc8     0xb2    slli a4,a4,0x27
    0x84000dca     0xb4    or a5,a5,a4
    0x84000dcc     0xb6    andi a5,a5,-1024
    0x84000dd0     0xba    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000dd2     0xbc    andi a5,a4,127
    0x84000dd6     0xc0    li a3,64
    0x84000dda     0xc4    beq a5,a3,ffffffff84000dee <create_bi_frame_cap+0xd8>
    0x84000dde     0xc8    andi a4,a4,63
    0x84000de2     0xcc    addiw a4,a4,1
    0x84000de4     0xce    li a5,-1
    0x84000de6     0xd0    sll a5,a5,a4
    0x84000dea     0xd4    and a5,a5,a0
    0x84000dec     0xd6    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000dee     0xd8    li a4,4
    0x84000df0     0xda    j ffffffff84000de2 <create_bi_frame_cap+0xcc>
    0x84000df2     0xdc    li a5,3
    0x84000df4     0xde    beq a3,a5,ffffffff84000e1e <create_bi_frame_cap+0x108>
    0x84000df8     0xe2    li a5,13
    0x84000dfa     0xe4    beq a3,a5,ffffffff84000e36 <create_bi_frame_cap+0x120>
    0x84000dfe     0xe8    li a4,1
    0x84000e00     0xea    li a5,0
    0x84000e02     0xec    bne a3,a4,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000e06     0xf0    srli a0,a0,0x9
    0x84000e08     0xf2    slli a5,a0,0x19
    0x84000e0c     0xf6    srli a5,a5,0x19
    0x84000e0e     0xf8    slli a4,a0,0x19
    0x84000e12     0xfc    bgez a4,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000e16    0x100    li a4,-1
    0x84000e18    0x102    slli a4,a4,0x27
    0x84000e1a    0x104    or a5,a5,a4
    0x84000e1c    0x106    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000e1e    0x108    srli a0,a0,0x9
    0x84000e20    0x10a    slli a5,a0,0x19
    0x84000e24    0x10e    srli a5,a5,0x19
    0x84000e26    0x110    slli a4,a0,0x19
    0x84000e2a    0x114    bgez a4,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000e2e    0x118    li a4,-1
    0x84000e30    0x11a    slli a4,a4,0x27
    0x84000e32    0x11c    or a5,a5,a4
    0x84000e34    0x11e    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000e36    0x120    slli a4,a4,0x2
    0x84000e38    0x122    lui a5,0xf8000
    0x84000e3c    0x126    srli a5,a5,0x19
    0x84000e3e    0x128    and a5,a5,a4
    0x84000e40    0x12a    slli a3,a4,0x19
    0x84000e44    0x12e    bgez a3,ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000e48    0x132    li a4,-1
    0x84000e4a    0x134    slli a4,a4,0x27
    0x84000e4c    0x136    or a5,a5,a4
    0x84000e4e    0x138    j ffffffff84000e52 <create_bi_frame_cap+0x13c>
    0x84000e50    0x13a    li a5,0
    0x84000e52    0x13c    ld a4,32(sp)          ; stack access
    0x84000e54    0x13e    sd a4,288(a5) # fffffffff8000120 <ki_end+0x73fd1120>
    0x84000e58    0x142    ld a4,40(sp)          ; stack access
    0x84000e5a    0x144    sd a4,296(a5)
    0x84000e5e    0x148    sd zero,304(a5)
    0x84000e62    0x14c    li a4,3
    0x84000e64    0x14e    sd a4,312(a5)
    0x84000e68    0x152    ld ra,56(sp)          ; stack access
    0x84000e6a    0x154    addi sp,sp,64
    0x84000e6c    0x156    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
127 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 172 nodes.

Section insert_region (161 of 266)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 39 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `insert_region`:

    0x84000b3a     0x0    addi sp,sp,-48
    0x84000b3c     0x2    sd ra,40(sp)          ; stack access
    0x84000b3e     0x4    sd s0,32(sp)          ; stack access
    0x84000b40     0x6    sd a0,0(sp)           ; stack access
    0x84000b42     0x8    sd a1,8(sp)           ; stack access
    0x84000b44     0xa    beq a0,a1,ffffffff84000b94 <insert_region+0x5a>
    0x84000b48     0xe    auipc a5,0x2
    0x84000b4c    0x12    addi a5,a5,456 # ffffffff84002d10 <ndks_boot+0x148>
    0x84000b50    0x16    li s0,0
    0x84000b52    0x18    li a2,16
    0x84000b54    0x1a    ld a3,0(a5)
    0x84000b56    0x1c    ld a4,8(a5)
    0x84000b58    0x1e    beq a3,a4,ffffffff84000b6e <insert_region+0x34>
    0x84000b5c    0x22    addi s0,s0,1
    0x84000b5e    0x24    addi a5,a5,16
    0x84000b60    0x26    bne s0,a2,ffffffff84000b54 <insert_region+0x1a>
    0x84000b64    0x2a    li a0,0
    0x84000b66    0x2c    ld ra,40(sp)          ; stack access
    0x84000b68    0x2e    ld s0,32(sp)          ; stack access
    0x84000b6a    0x30    addi sp,sp,48
    0x84000b6c    0x32    ret
    0x84000b6e    0x34    li a5,1
    0x84000b70    0x36    slli a5,a5,0x26
    0x84000b72    0x38    add a0,a0,a5
    0x84000b74    0x3a    add a1,a1,a5
    0x84000b76    0x3c    jal ra,ffffffff84000964 <reserve_region>
    0x84000b7a    0x40    addi s0,s0,20
    0x84000b7c    0x42    slli s0,s0,0x4
    0x84000b7e    0x44    auipc a5,0x2
    0x84000b82    0x48    addi a5,a5,74 # ffffffff84002bc8 <ndks_boot>
    0x84000b86    0x4c    add s0,s0,a5
    0x84000b88    0x4e    ld a5,0(sp)           ; stack access
    0x84000b8a    0x50    sd a5,8(s0)
    0x84000b8c    0x52    ld a5,8(sp)           ; stack access
    0x84000b8e    0x54    sd a5,16(s0)
    0x84000b90    0x56    li a0,1
    0x84000b92    0x58    j ffffffff84000b66 <insert_region+0x2c>
    0x84000b94    0x5a    li a0,1
    0x84000b96    0x5c    j ffffffff84000b66 <insert_region+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 59 nodes.

Section reserve_region (162 of 266)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 81 instructions.

RVC_TFFFFT___FFT__TF.
RVC_TFFTFFT__FT___TF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `reserve_region`:

    0x84000964     0x0    beq a0,a1,ffffffff84000a54 <reserve_region+0xf0>
    0x84000968     0x4    addi sp,sp,-32
    0x8400096a     0x6    sd ra,24(sp)          ; stack access
    0x8400096c     0x8    mv a7,a0
    0x8400096e     0xa    auipc a6,0x2
    0x84000972     0xe    ld a6,922(a6) # ffffffff84002d08 <ndks_boot+0x140>
    0x84000976    0x12    beqz a6,ffffffff840009a6 <reserve_region+0x42>
    0x8400097a    0x16    auipc t1,0x2
    0x8400097e    0x1a    addi t1,t1,590 # ffffffff84002bc8 <ndks_boot>
    0x84000982    0x1e    mv a5,t1
    0x84000984    0x20    li a4,0
    0x84000986    0x22    ld a3,0(a5)
    0x84000988    0x24    beq a3,a1,ffffffff840009c8 <reserve_region+0x64>
    0x8400098c    0x28    ld a2,8(a5)
    0x8400098e    0x2a    beq a2,a7,ffffffff840009e4 <reserve_region+0x80>
    0x84000992    0x2e    bltu a1,a3,ffffffff840009fa <reserve_region+0x96>
    0x84000996    0x32    addi a4,a4,1
    0x84000998    0x34    addi a5,a5,16
    0x8400099a    0x36    bne a4,a6,ffffffff84000986 <reserve_region+0x22>
    0x8400099e    0x3a    li a5,19
    0x840009a0    0x3c    li a0,0
    0x840009a2    0x3e    beq a6,a5,ffffffff840009de <reserve_region+0x7a>
    0x840009a6    0x42    auipc a5,0x2
    0x840009aa    0x46    addi a5,a5,546 # ffffffff84002bc8 <ndks_boot>
    0x840009ae    0x4a    slli a6,a6,0x4
    0x840009b0    0x4c    add a6,a6,a5
    0x840009b2    0x4e    sd a7,0(a6)
    0x840009b6    0x52    sd a1,8(a6)
    0x840009ba    0x56    ld a4,320(a5)
    0x840009be    0x5a    addi a4,a4,1
    0x840009c0    0x5c    sd a4,320(a5)
    0x840009c4    0x60    li a0,1
    0x840009c6    0x62    j ffffffff840009de <reserve_region+0x7a>
    0x840009c8    0x64    slli a4,a4,0x4
    0x840009ca    0x66    auipc a5,0x2
    0x840009ce    0x6a    addi a5,a5,510 # ffffffff84002bc8 <ndks_boot>
    0x840009d2    0x6e    add a4,a4,a5
    0x840009d4    0x70    sd a7,0(a4)
    0x840009d8    0x74    jal ra,ffffffff84000026 <merge_regions>
    0x840009dc    0x78    li a0,1
    0x840009de    0x7a    ld ra,24(sp)          ; stack access
    0x840009e0    0x7c    addi sp,sp,32
    0x840009e2    0x7e    ret
    0x840009e4    0x80    slli a4,a4,0x4
    0x840009e6    0x82    auipc a5,0x2
    0x840009ea    0x86    addi a5,a5,482 # ffffffff84002bc8 <ndks_boot>
    0x840009ee    0x8a    add a4,a4,a5
    0x840009f0    0x8c    sd a1,8(a4)
    0x840009f2    0x8e    jal ra,ffffffff84000026 <merge_regions>
    0x840009f6    0x92    li a0,1
    0x840009f8    0x94    j ffffffff840009de <reserve_region+0x7a>
    0x840009fa    0x96    addi a5,a6,1
    0x840009fe    0x9a    li a3,19
    0x84000a00    0x9c    li a0,0
    0x84000a02    0x9e    bltu a3,a5,ffffffff840009de <reserve_region+0x7a>
    0x84000a06    0xa2    bgeu a4,a6,ffffffff84000a32 <reserve_region+0xce>
    0x84000a0a    0xa6    slli a6,a6,0x4
    0x84000a0c    0xa8    auipc a5,0x2
    0x84000a10    0xac    addi a5,a5,444 # ffffffff84002bc8 <ndks_boot>
    0x84000a14    0xb0    add a6,a6,a5
    0x84000a16    0xb2    slli a5,a4,0x4
    0x84000a1a    0xb6    add t1,t1,a5
    0x84000a1c    0xb8    ld a5,-16(a6)
    0x84000a20    0xbc    sd a5,0(a6)
    0x84000a24    0xc0    ld a5,-8(a6)
    0x84000a28    0xc4    sd a5,8(a6)
    0x84000a2c    0xc8    addi a6,a6,-16
    0x84000a2e    0xca    bne a6,t1,ffffffff84000a1c <reserve_region+0xb8>
    0x84000a32    0xce    auipc a3,0x2
    0x84000a36    0xd2    addi a3,a3,406 # ffffffff84002bc8 <ndks_boot>
    0x84000a3a    0xd6    slli a5,a4,0x4
    0x84000a3e    0xda    add a5,a5,a3
    0x84000a40    0xdc    sd a7,0(a5)
    0x84000a44    0xe0    sd a1,8(a5)
    0x84000a46    0xe2    ld a5,320(a3)
    0x84000a4a    0xe6    addi a5,a5,1
    0x84000a4c    0xe8    sd a5,320(a3)
    0x84000a50    0xec    li a0,1
    0x84000a52    0xee    j ffffffff840009de <reserve_region+0x7a>
    0x84000a54    0xf0    li a0,1
    0x84000a56    0xf2    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
81 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 124 nodes.

Section create_mapped_it_frame_cap (163 of 266)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

Section `create_mapped_it_frame_cap` expects pointer to stack in a0.
6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x8400086a     0x0    addi sp,sp,-80
    0x8400086c     0x2    sd ra,72(sp)          ; stack access
    0x8400086e     0x4    sd s0,64(sp)          ; stack access
    0x84000870     0x6    sd s1,56(sp)          ; stack access
    0x84000872     0x8    snez s0,a5
    0x84000876     0xc    slli s0,s0,0x39
    0x84000878     0xe    slli a3,a3,0x19
    0x8400087a    0x10    srli a3,a3,0x19
    0x8400087c    0x12    or s0,s0,a3
    0x8400087e    0x14    li a5,19
    0x84000880    0x16    slli a5,a5,0x37
    0x84000882    0x18    or s0,s0,a5
    0x84000884    0x1a    slli a2,a2,0x9
    0x84000886    0x1c    lui s1,0xfe000
    0x8400088a    0x20    srli s1,s1,0x10
    0x8400088c    0x22    and s1,s1,a2
    0x8400088e    0x24    slli a4,a4,0x30
    0x84000890    0x26    or s1,s1,a4
    0x84000892    0x28    mv a2,s0
    0x84000894    0x2a    mv a3,s1
    0x84000896    0x2c    jal ra,ffffffff840005de <map_it_frame_cap>
    0x8400089a    0x30    mv a0,s0
    0x8400089c    0x32    mv a1,s1
    0x8400089e    0x34    ld ra,72(sp)          ; stack access
    0x840008a0    0x36    ld s0,64(sp)          ; stack access
    0x840008a2    0x38    ld s1,56(sp)          ; stack access
    0x840008a4    0x3a    addi sp,sp,80
    0x840008a6    0x3c    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section map_it_frame_cap (164 of 266)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 235 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

11 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x840005de      0x0    addi sp,sp,-64
    0x840005e0      0x2    sd ra,56(sp)          ; stack access
    0x840005e2      0x4    sd s0,48(sp)          ; stack access
    0x840005e4      0x6    sd a0,16(sp)          ; stack access
    0x840005e6      0x8    sd a1,24(sp)          ; stack access
    0x840005e8      0xa    sd a2,0(sp)           ; stack access
    0x840005ea      0xc    sd a3,8(sp)           ; stack access
    0x840005ec      0xe    srli a5,a0,0x3b
    0x840005f0     0x12    li a4,20
    0x840005f2     0x14    bltu a4,a5,ffffffff840006a8 <map_it_frame_cap+0xca>
    0x840005f6     0x18    slli a3,a5,0x2
    0x840005fa     0x1c    auipc a6,0x17
    0x840005fe     0x20    addi a6,a6,-1002 # ffffffff84017210 <ksDomScheduleLength+0x158>
    0x84000602     0x24    add a3,a3,a6
    0x84000604     0x26    lw a4,0(a3)
    0x84000606     0x28    add a4,a4,a6
    0x84000608     0x2a    jr a4
    0x8400060a     0x2c    slli a5,a0,0x19
    0x8400060e     0x30    srli a5,a5,0x19
    0x84000610     0x32    slli a4,a0,0x19
    0x84000614     0x36    bgez a4,ffffffff8400061e <map_it_frame_cap+0x40>
    0x84000618     0x3a    li a4,-1
    0x8400061a     0x3c    slli a4,a4,0x27
    0x8400061c     0x3e    or a5,a5,a4
    0x8400061e     0x40    mv a0,a5
    0x84000620     0x42    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x84000622     0x44    slli a5,a0,0x19
    0x84000626     0x48    srli a5,a5,0x19
    0x84000628     0x4a    slli a4,a0,0x19
    0x8400062c     0x4e    bgez a4,ffffffff84000636 <map_it_frame_cap+0x58>
    0x84000630     0x52    li a4,-1
    0x84000632     0x54    slli a4,a4,0x27
    0x84000634     0x56    or a5,a5,a4
    0x84000636     0x58    mv a0,a5
    0x84000638     0x5a    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x8400063a     0x5c    slli a5,a0,0x19
    0x8400063e     0x60    srli a5,a5,0x19
    0x84000640     0x62    slli a4,a0,0x19
    0x84000644     0x66    bgez a4,ffffffff8400064e <map_it_frame_cap+0x70>
    0x84000648     0x6a    li a4,-1
    0x8400064a     0x6c    slli a4,a4,0x27
    0x8400064c     0x6e    or a5,a5,a4
    0x8400064e     0x70    mv a0,a5
    0x84000650     0x72    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x84000652     0x74    slli a5,a0,0x1
    0x84000656     0x78    lui a0,0xfc000
    0x8400065a     0x7c    srli a0,a0,0x19
    0x8400065c     0x7e    and a0,a0,a5
    0x8400065e     0x80    slli a4,a5,0x19
    0x84000662     0x84    bgez a4,ffffffff8400070a <map_it_frame_cap+0x12c>
    0x84000666     0x88    li a5,-1
    0x84000668     0x8a    slli a5,a5,0x27
    0x8400066a     0x8c    or a0,a0,a5
    0x8400066c     0x8e    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x8400066e     0x90    slli a5,a0,0x19
    0x84000672     0x94    srli a5,a5,0x19
    0x84000674     0x96    slli a4,a0,0x19
    0x84000678     0x9a    bgez a4,ffffffff84000682 <map_it_frame_cap+0xa4>
    0x8400067c     0x9e    li a4,-1
    0x8400067e     0xa0    slli a4,a4,0x27
    0x84000680     0xa2    or a5,a5,a4
    0x84000682     0xa4    andi a0,a5,-1024
    0x84000686     0xa8    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x84000688     0xaa    andi a5,a0,127
    0x8400068c     0xae    li a4,64
    0x84000690     0xb2    beq a5,a4,ffffffff840006a4 <map_it_frame_cap+0xc6>
    0x84000694     0xb6    andi a0,a0,63
    0x84000698     0xba    addiw a0,a0,1
    0x8400069a     0xbc    li a5,-1
    0x8400069c     0xbe    sll a0,a5,a0
    0x840006a0     0xc2    and a0,a0,a1
    0x840006a2     0xc4    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x840006a4     0xc6    li a0,4
    0x840006a6     0xc8    j ffffffff84000698 <map_it_frame_cap+0xba>
    0x840006a8     0xca    li a4,3
    0x840006aa     0xcc    beq a5,a4,ffffffff840006d4 <map_it_frame_cap+0xf6>
    0x840006ae     0xd0    li a4,13
    0x840006b0     0xd2    beq a5,a4,ffffffff840006ec <map_it_frame_cap+0x10e>
    0x840006b4     0xd6    li a4,1
    0x840006b6     0xd8    li a0,0
    0x840006b8     0xda    bne a5,a4,ffffffff8400070a <map_it_frame_cap+0x12c>
    0x840006bc     0xde    srli a1,a1,0x9
    0x840006be     0xe0    slli a0,a1,0x19
    0x840006c2     0xe4    srli a0,a0,0x19
    0x840006c4     0xe6    slli a5,a1,0x19
    0x840006c8     0xea    bgez a5,ffffffff8400070a <map_it_frame_cap+0x12c>
    0x840006cc     0xee    li a5,-1
    0x840006ce     0xf0    slli a5,a5,0x27
    0x840006d0     0xf2    or a0,a0,a5
    0x840006d2     0xf4    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x840006d4     0xf6    srli a1,a1,0x9
    0x840006d6     0xf8    slli a0,a1,0x19
    0x840006da     0xfc    srli a0,a0,0x19
    0x840006dc     0xfe    slli a5,a1,0x19
    0x840006e0    0x102    bgez a5,ffffffff8400070a <map_it_frame_cap+0x12c>
    0x840006e4    0x106    li a5,-1
    0x840006e6    0x108    slli a5,a5,0x27
    0x840006e8    0x10a    or a0,a0,a5
    0x840006ea    0x10c    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x840006ec    0x10e    slli a5,a0,0x2
    0x840006f0    0x112    lui a0,0xf8000
    0x840006f4    0x116    srli a0,a0,0x19
    0x840006f6    0x118    and a0,a0,a5
    0x840006f8    0x11a    slli a4,a5,0x19
    0x840006fc    0x11e    bgez a4,ffffffff8400070a <map_it_frame_cap+0x12c>
    0x84000700    0x122    li a5,-1
    0x84000702    0x124    slli a5,a5,0x27
    0x84000704    0x126    or a0,a0,a5
    0x84000706    0x128    j ffffffff8400070a <map_it_frame_cap+0x12c>
    0x84000708    0x12a    li a0,0
    0x8400070a    0x12c    ld a6,8(sp)           ; stack access
    0x8400070c    0x12e    srli a5,a2,0x3b
    0x84000710    0x132    li a4,20
    0x84000712    0x134    bltu a4,a5,ffffffff840007c6 <map_it_frame_cap+0x1e8>
    0x84000716    0x138    slli a3,a5,0x2
    0x8400071a    0x13c    auipc a1,0x17
    0x8400071e    0x140    addi a1,a1,-1206 # ffffffff84017264 <ksDomScheduleLength+0x1ac>
    0x84000722    0x144    add a3,a3,a1
    0x84000724    0x146    lw a4,0(a3)
    0x84000726    0x148    add a4,a4,a1
    0x84000728    0x14a    jr a4
    0x8400072a    0x14c    slli s0,a2,0x19
    0x8400072e    0x150    srli s0,s0,0x19
    0x84000730    0x152    slli a5,a2,0x19
    0x84000734    0x156    bgez a5,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000738    0x15a    li a5,-1
    0x8400073a    0x15c    slli a5,a5,0x27
    0x8400073c    0x15e    or s0,s0,a5
    0x8400073e    0x160    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000740    0x162    slli s0,a2,0x19
    0x84000744    0x166    srli s0,s0,0x19
    0x84000746    0x168    slli a5,a2,0x19
    0x8400074a    0x16c    bgez a5,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x8400074e    0x170    li a5,-1
    0x84000750    0x172    slli a5,a5,0x27
    0x84000752    0x174    or s0,s0,a5
    0x84000754    0x176    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000756    0x178    slli s0,a2,0x19
    0x8400075a    0x17c    srli s0,s0,0x19
    0x8400075c    0x17e    slli a5,a2,0x19
    0x84000760    0x182    bgez a5,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000764    0x186    li a5,-1
    0x84000766    0x188    slli a5,a5,0x27
    0x84000768    0x18a    or s0,s0,a5
    0x8400076a    0x18c    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x8400076c    0x18e    slli a5,a2,0x1
    0x84000770    0x192    lui s0,0xfc000
    0x84000774    0x196    srli s0,s0,0x19
    0x84000776    0x198    and s0,s0,a5
    0x84000778    0x19a    slli a4,a5,0x19
    0x8400077c    0x19e    bgez a4,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000780    0x1a2    li a5,-1
    0x84000782    0x1a4    slli a5,a5,0x27
    0x84000784    0x1a6    or s0,s0,a5
    0x84000786    0x1a8    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000788    0x1aa    slli s0,a2,0x19
    0x8400078c    0x1ae    srli s0,s0,0x19
    0x8400078e    0x1b0    slli a5,a2,0x19
    0x84000792    0x1b4    bgez a5,ffffffff8400079c <map_it_frame_cap+0x1be>
    0x84000796    0x1b8    li a5,-1
    0x84000798    0x1ba    slli a5,a5,0x27
    0x8400079a    0x1bc    or s0,s0,a5
    0x8400079c    0x1be    andi s0,s0,-1024
    0x840007a0    0x1c2    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x840007a2    0x1c4    andi a5,a2,127
    0x840007a6    0x1c8    li a4,64
    0x840007aa    0x1cc    beq a5,a4,ffffffff840007c2 <map_it_frame_cap+0x1e4>
    0x840007ae    0x1d0    andi s0,a2,63
    0x840007b2    0x1d4    addiw a5,s0,1
    0x840007b6    0x1d8    li s0,-1
    0x840007b8    0x1da    sll s0,s0,a5
    0x840007bc    0x1de    and s0,s0,a6
    0x840007c0    0x1e2    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x840007c2    0x1e4    li s0,4
    0x840007c4    0x1e6    j ffffffff840007b2 <map_it_frame_cap+0x1d4>
    0x840007c6    0x1e8    li a4,3
    0x840007c8    0x1ea    beq a5,a4,ffffffff840007f4 <map_it_frame_cap+0x216>
    0x840007cc    0x1ee    li a4,13
    0x840007ce    0x1f0    beq a5,a4,ffffffff8400080e <map_it_frame_cap+0x230>
    0x840007d2    0x1f4    li a4,1
    0x840007d4    0x1f6    li s0,0
    0x840007d6    0x1f8    bne a5,a4,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x840007da    0x1fc    srli a6,a6,0x9
    0x840007de    0x200    slli s0,a6,0x19
    0x840007e2    0x204    srli s0,s0,0x19
    0x840007e4    0x206    slli a5,a6,0x19
    0x840007e8    0x20a    bgez a5,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x840007ec    0x20e    li a5,-1
    0x840007ee    0x210    slli a5,a5,0x27
    0x840007f0    0x212    or s0,s0,a5
    0x840007f2    0x214    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x840007f4    0x216    srli a6,a6,0x9
    0x840007f8    0x21a    slli s0,a6,0x19
    0x840007fc    0x21e    srli s0,s0,0x19
    0x840007fe    0x220    slli a5,a6,0x19
    0x84000802    0x224    bgez a5,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000806    0x228    li a5,-1
    0x84000808    0x22a    slli a5,a5,0x27
    0x8400080a    0x22c    or s0,s0,a5
    0x8400080c    0x22e    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x8400080e    0x230    slli a5,a2,0x2
    0x84000812    0x234    lui s0,0xf8000
    0x84000816    0x238    srli s0,s0,0x19
    0x84000818    0x23a    and s0,s0,a5
    0x8400081a    0x23c    slli a4,a5,0x19
    0x8400081e    0x240    bgez a4,ffffffff8400082c <map_it_frame_cap+0x24e>
    0x84000822    0x244    li a5,-1
    0x84000824    0x246    slli a5,a5,0x27
    0x84000826    0x248    or s0,s0,a5
    0x84000828    0x24a    j ffffffff8400082c <map_it_frame_cap+0x24e>
    0x8400082a    0x24c    li s0,0
    0x8400082c    0x24e    slli a1,a2,0x19
    0x84000830    0x252    srli a1,a1,0x19
    0x84000832    0x254    slli a5,a2,0x19
    0x84000836    0x258    bgez a5,ffffffff84000840 <map_it_frame_cap+0x262>
    0x8400083a    0x25c    li a5,-1
    0x8400083c    0x25e    slli a5,a5,0x27
    0x8400083e    0x260    or a1,a1,a5
    0x84000840    0x262    jal ra,ffffffff840105a0 <lookupPTSlot>
    0x84000844    0x266    sd a0,32(sp)          ; stack access
    0x84000846    0x268    sd a1,40(sp)          ; stack access
    0x84000848    0x26a    li a5,1
    0x8400084a    0x26c    slli a5,a5,0x26
    0x8400084c    0x26e    add s0,s0,a5
    0x8400084e    0x270    srli s0,s0,0x2
    0x84000850    0x272    lui a5,0xfff00
    0x84000854    0x276    srli a5,a5,0xa
    0x84000856    0x278    and s0,s0,a5
    0x84000858    0x27a    ori s0,s0,223
    0x8400085c    0x27e    sd s0,0(a0)
    0x8400085e    0x280    sfence.vma
    0x84000862    0x284    ld ra,56(sp)          ; stack access
    0x84000864    0x286    ld s0,48(sp)          ; stack access
    0x84000866    0x288    addi sp,sp,64
    0x84000868    0x28a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
235 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 308 nodes.

Section map_it_pt_cap (165 of 266)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 209 instructions.

RVC_TFFTT____T____TF..
LW..
Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x840003a6      0x0    addi sp,sp,-64
    0x840003a8      0x2    sd ra,56(sp)          ; stack access
    0x840003aa      0x4    sd s0,48(sp)          ; stack access
    0x840003ac      0x6    sd a0,16(sp)          ; stack access
    0x840003ae      0x8    sd a1,24(sp)          ; stack access
    0x840003b0      0xa    sd a2,0(sp)           ; stack access
    0x840003b2      0xc    sd a3,8(sp)           ; stack access
    0x840003b4      0xe    slli a1,a2,0x19
    0x840003b8     0x12    srli a1,a1,0x19
    0x840003ba     0x14    slli a5,a2,0x19
    0x840003be     0x18    bgez a5,ffffffff840003c8 <map_it_pt_cap+0x22>
    0x840003c2     0x1c    li a5,-1
    0x840003c4     0x1e    slli a5,a5,0x27
    0x840003c6     0x20    or a1,a1,a5
    0x840003c8     0x22    ld a5,16(sp)          ; stack access
    0x840003ca     0x24    ld a7,24(sp)          ; stack access
    0x840003cc     0x26    srli a4,a5,0x3b
    0x840003d0     0x2a    li a3,20
    0x840003d2     0x2c    bltu a3,a4,ffffffff84000482 <map_it_pt_cap+0xdc>
    0x840003d6     0x30    slli a0,a4,0x2
    0x840003da     0x34    auipc a6,0x17
    0x840003de     0x38    addi a6,a6,-626 # ffffffff84017168 <ksDomScheduleLength+0xb0>
    0x840003e2     0x3c    add a0,a0,a6
    0x840003e4     0x3e    lw a3,0(a0)
    0x840003e6     0x40    add a3,a3,a6
    0x840003e8     0x42    jr a3
    0x840003ea     0x44    slli a0,a5,0x19
    0x840003ee     0x48    srli a0,a0,0x19
    0x840003f0     0x4a    slli a4,a5,0x19
    0x840003f4     0x4e    bgez a4,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x840003f8     0x52    li a5,-1
    0x840003fa     0x54    slli a5,a5,0x27
    0x840003fc     0x56    or a0,a0,a5
    0x840003fe     0x58    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x84000400     0x5a    slli a0,a5,0x19
    0x84000404     0x5e    srli a0,a0,0x19
    0x84000406     0x60    slli a4,a5,0x19
    0x8400040a     0x64    bgez a4,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x8400040e     0x68    li a5,-1
    0x84000410     0x6a    slli a5,a5,0x27
    0x84000412     0x6c    or a0,a0,a5
    0x84000414     0x6e    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x84000416     0x70    slli a0,a5,0x19
    0x8400041a     0x74    srli a0,a0,0x19
    0x8400041c     0x76    slli a4,a5,0x19
    0x84000420     0x7a    bgez a4,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x84000424     0x7e    li a5,-1
    0x84000426     0x80    slli a5,a5,0x27
    0x84000428     0x82    or a0,a0,a5
    0x8400042a     0x84    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x8400042c     0x86    slli a5,a5,0x1
    0x8400042e     0x88    lui a0,0xfc000
    0x84000432     0x8c    srli a0,a0,0x19
    0x84000434     0x8e    and a0,a0,a5
    0x84000436     0x90    slli a4,a5,0x19
    0x8400043a     0x94    bgez a4,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x8400043e     0x98    li a5,-1
    0x84000440     0x9a    slli a5,a5,0x27
    0x84000442     0x9c    or a0,a0,a5
    0x84000444     0x9e    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x84000446     0xa0    slli a0,a5,0x19
    0x8400044a     0xa4    srli a0,a0,0x19
    0x8400044c     0xa6    slli a4,a5,0x19
    0x84000450     0xaa    bgez a4,ffffffff8400045a <map_it_pt_cap+0xb4>
    0x84000454     0xae    li a5,-1
    0x84000456     0xb0    slli a5,a5,0x27
    0x84000458     0xb2    or a0,a0,a5
    0x8400045a     0xb4    andi a0,a0,-1024
    0x8400045e     0xb8    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x84000460     0xba    andi a4,a5,127
    0x84000464     0xbe    li a3,64
    0x84000468     0xc2    beq a4,a3,ffffffff8400047e <map_it_pt_cap+0xd8>
    0x8400046c     0xc6    andi a5,a5,63
    0x84000470     0xca    addiw a5,a5,1
    0x84000472     0xcc    li a0,-1
    0x84000474     0xce    sll a5,a0,a5
    0x84000478     0xd2    and a0,a5,a7
    0x8400047c     0xd6    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x8400047e     0xd8    li a5,4
    0x84000480     0xda    j ffffffff84000470 <map_it_pt_cap+0xca>
    0x84000482     0xdc    li a3,3
    0x84000484     0xde    beq a4,a3,ffffffff840004b0 <map_it_pt_cap+0x10a>
    0x84000488     0xe2    li a3,13
    0x8400048a     0xe4    beq a4,a3,ffffffff840004ca <map_it_pt_cap+0x124>
    0x8400048e     0xe8    li a5,1
    0x84000490     0xea    li a0,0
    0x84000492     0xec    bne a4,a5,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x84000496     0xf0    srli a7,a7,0x9
    0x8400049a     0xf4    slli a0,a7,0x19
    0x8400049e     0xf8    srli a0,a0,0x19
    0x840004a0     0xfa    slli a5,a7,0x19
    0x840004a4     0xfe    bgez a5,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x840004a8    0x102    li a5,-1
    0x840004aa    0x104    slli a5,a5,0x27
    0x840004ac    0x106    or a0,a0,a5
    0x840004ae    0x108    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x840004b0    0x10a    srli a7,a7,0x9
    0x840004b4    0x10e    slli a0,a7,0x19
    0x840004b8    0x112    srli a0,a0,0x19
    0x840004ba    0x114    slli a5,a7,0x19
    0x840004be    0x118    bgez a5,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x840004c2    0x11c    li a5,-1
    0x840004c4    0x11e    slli a5,a5,0x27
    0x840004c6    0x120    or a0,a0,a5
    0x840004c8    0x122    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x840004ca    0x124    slli a5,a5,0x2
    0x840004cc    0x126    lui a0,0xf8000
    0x840004d0    0x12a    srli a0,a0,0x19
    0x840004d2    0x12c    and a0,a0,a5
    0x840004d4    0x12e    slli a4,a5,0x19
    0x840004d8    0x132    bgez a4,ffffffff840004e6 <map_it_pt_cap+0x140>
    0x840004dc    0x136    li a5,-1
    0x840004de    0x138    slli a5,a5,0x27
    0x840004e0    0x13a    or a0,a0,a5
    0x840004e2    0x13c    j ffffffff840004e6 <map_it_pt_cap+0x140>
    0x840004e4    0x13e    li a0,0
    0x840004e6    0x140    ld a5,8(sp)           ; stack access
    0x840004e8    0x142    srli a4,a2,0x3b
    0x840004ec    0x146    li a3,20
    0x840004ee    0x148    bltu a3,a4,ffffffff84000554 <map_it_pt_cap+0x1ae>
    0x840004f2    0x14c    slli a6,a4,0x2
    0x840004f6    0x150    auipc a7,0x17
    0x840004fa    0x154    addi a7,a7,-826 # ffffffff840171bc <ksDomScheduleLength+0x104>
    0x840004fe    0x158    add a6,a6,a7
    0x84000500    0x15a    lw a3,0(a6)
    0x84000504    0x15e    add a3,a3,a7
    0x84000506    0x160    jr a3
    0x84000508    0x162    mv s0,a1
    0x8400050a    0x164    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x8400050c    0x166    mv s0,a1
    0x8400050e    0x168    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000510    0x16a    mv s0,a1
    0x84000512    0x16c    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000514    0x16e    slli a2,a2,0x1
    0x84000516    0x170    lui s0,0xfc000
    0x8400051a    0x174    srli s0,s0,0x19
    0x8400051c    0x176    and s0,s0,a2
    0x8400051e    0x178    slli a5,a2,0x19
    0x84000522    0x17c    bgez a5,ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000526    0x180    li a5,-1
    0x84000528    0x182    slli a5,a5,0x27
    0x8400052a    0x184    or s0,s0,a5
    0x8400052c    0x186    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x8400052e    0x188    andi s0,a1,-1024
    0x84000532    0x18c    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000534    0x18e    andi a4,a2,127
    0x84000538    0x192    li a3,64
    0x8400053c    0x196    beq a4,a3,ffffffff84000550 <map_it_pt_cap+0x1aa>
    0x84000540    0x19a    andi a2,a2,63
    0x84000544    0x19e    addiw a2,a2,1
    0x84000546    0x1a0    li s0,-1
    0x84000548    0x1a2    sll s0,s0,a2
    0x8400054c    0x1a6    and s0,s0,a5
    0x8400054e    0x1a8    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000550    0x1aa    li a2,4
    0x84000552    0x1ac    j ffffffff84000544 <map_it_pt_cap+0x19e>
    0x84000554    0x1ae    li a3,3
    0x84000556    0x1b0    beq a4,a3,ffffffff84000580 <map_it_pt_cap+0x1da>
    0x8400055a    0x1b4    li a3,13
    0x8400055c    0x1b6    beq a4,a3,ffffffff84000598 <map_it_pt_cap+0x1f2>
    0x84000560    0x1ba    li a3,1
    0x84000562    0x1bc    li s0,0
    0x84000564    0x1be    bne a4,a3,ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000568    0x1c2    srli a5,a5,0x9
    0x8400056a    0x1c4    slli s0,a5,0x19
    0x8400056e    0x1c8    srli s0,s0,0x19
    0x84000570    0x1ca    slli a4,a5,0x19
    0x84000574    0x1ce    bgez a4,ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000578    0x1d2    li a5,-1
    0x8400057a    0x1d4    slli a5,a5,0x27
    0x8400057c    0x1d6    or s0,s0,a5
    0x8400057e    0x1d8    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000580    0x1da    srli a5,a5,0x9
    0x84000582    0x1dc    slli s0,a5,0x19
    0x84000586    0x1e0    srli s0,s0,0x19
    0x84000588    0x1e2    slli a4,a5,0x19
    0x8400058c    0x1e6    bgez a4,ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000590    0x1ea    li a5,-1
    0x84000592    0x1ec    slli a5,a5,0x27
    0x84000594    0x1ee    or s0,s0,a5
    0x84000596    0x1f0    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x84000598    0x1f2    slli a2,a2,0x2
    0x8400059a    0x1f4    lui s0,0xf8000
    0x8400059e    0x1f8    srli s0,s0,0x19
    0x840005a0    0x1fa    and s0,s0,a2
    0x840005a2    0x1fc    slli a5,a2,0x19
    0x840005a6    0x200    bgez a5,ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x840005aa    0x204    li a5,-1
    0x840005ac    0x206    slli a5,a5,0x27
    0x840005ae    0x208    or s0,s0,a5
    0x840005b0    0x20a    j ffffffff840005b4 <map_it_pt_cap+0x20e>
    0x840005b2    0x20c    li s0,0
    0x840005b4    0x20e    jal ra,ffffffff840105a0 <lookupPTSlot>
    0x840005b8    0x212    sd a0,32(sp)          ; stack access
    0x840005ba    0x214    sd a1,40(sp)          ; stack access
    0x840005bc    0x216    li a5,1
    0x840005be    0x218    slli a5,a5,0x26
    0x840005c0    0x21a    add s0,s0,a5
    0x840005c2    0x21c    srli s0,s0,0x2
    0x840005c4    0x21e    lui a5,0xfff00
    0x840005c8    0x222    srli a5,a5,0xa
    0x840005ca    0x224    and s0,s0,a5
    0x840005cc    0x226    ori s0,s0,193
    0x840005d0    0x22a    sd s0,0(a0)
    0x840005d2    0x22c    sfence.vma
    0x840005d6    0x230    ld ra,56(sp)          ; stack access
    0x840005d8    0x232    ld s0,48(sp)          ; stack access
    0x840005da    0x234    addi sp,sp,64
    0x840005dc    0x236    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
209 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 276 nodes.

Section map_kernel_frame (166 of 266)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `map_kernel_frame`:

    0x840000c4     0x0    addi sp,sp,-16
    0x840000c6     0x2    sd ra,8(sp)           ; stack access
    0x840000c8     0x4    sd s0,0(sp)           ; stack access
    0x840000ca     0x6    srli a1,a1,0x1e
    0x840000cc     0x8    andi a1,a1,511
    0x840000d0     0xc    slli a1,a1,0x3
    0x840000d2     0xe    auipc s0,0x1b
    0x840000d6    0x12    addi s0,s0,-210 # ffffffff8401b000 <kernel_root_pageTable>
    0x840000da    0x16    add s0,s0,a1
    0x840000dc    0x18    li a1,1
    0x840000de    0x1a    lui a5,0xc0000
    0x840000e2    0x1e    and a0,a0,a5
    0x840000e4    0x20    jal ra,ffffffff840100da <pte_next>
    0x840000e8    0x24    sd a0,0(s0)
    0x840000ea    0x26    ld ra,8(sp)           ; stack access
    0x840000ec    0x28    ld s0,0(sp)           ; stack access
    0x840000ee    0x2a    addi sp,sp,16
    0x840000f0    0x2c    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 25 nodes.

Section _start (167 of 266)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0x18
    0x84000008     0x8    addi gp,gp,-1872 # ffffffff840178b4 <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x1e
    0x84000010    0x10    addi sp,sp,-996 # ffffffff8401dc28 <ksIdleThread>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff84002846 <init_kernel>
    0x8400001c    0x1c    auipc ra,0x10
    0x84000020    0x20    addi ra,ra,358 # ffffffff84010182 <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section fastpath_reply_recv (168 of 266)
========================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 269 instructions.

Skipping 180b1073 csrw satp,s6

Skipping 12000073 sfence.vma

RVC_FTTTFT________FT.
RVC_TFFFFFT__T____TF.
Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

13 stack accesses found. Annotated code for `fastpath_reply_recv`:

    0x84016b74      0x0    addi sp,sp,-112
    0x84016b76      0x2    sd ra,104(sp)         ; stack access
    0x84016b78      0x4    sd s0,96(sp)          ; stack access
    0x84016b7a      0x6    sd s1,88(sp)          ; stack access
    0x84016b7c      0x8    sd s2,80(sp)          ; stack access
    0x84016b7e      0xa    sd s3,72(sp)          ; stack access
    0x84016b80      0xc    sd s4,64(sp)          ; stack access
    0x84016b82      0xe    sd s5,56(sp)          ; stack access
    0x84016b84     0x10    sd s6,48(sp)          ; stack access
    0x84016b86     0x12    sd s7,40(sp)          ; stack access
    0x84016b88     0x14    sd s8,32(sp)          ; stack access
    0x84016b8a     0x16    sd s9,24(sp)          ; stack access
    0x84016b8c     0x18    sd s10,16(sp)         ; stack access
    0x84016b8e     0x1a    sd s11,8(sp)          ; stack access
    0x84016b90     0x1c    auipc s2,0x18
    0x84016b94     0x20    ld s2,-248(s2) # ffffffff8402ea98 <ksCurThread>
    0x84016b98     0x24    ld a4,312(s2)
    0x84016b9c     0x28    andi a3,a1,511
    0x84016ba0     0x2c    li a5,4
    0x84016ba2     0x2e    bltu a5,a3,ffffffff84016cca <fastpath_reply_recv+0x156>
    0x84016ba6     0x32    mv s1,a1
    0x84016ba8     0x34    andi a4,a4,15
    0x84016baa     0x36    bnez a4,ffffffff84016cca <fastpath_reply_recv+0x156>
    0x84016bae     0x3a    andi s3,s2,-1024
    0x84016bb2     0x3e    ld s0,0(s3)
    0x84016bb6     0x42    ld a6,8(s3)
    0x84016bba     0x46    srli a3,s0,0x3b
    0x84016bbe     0x4a    li a5,10
    0x84016bc0     0x4c    bne a3,a5,ffffffff84016cda <fastpath_reply_recv+0x166>
    0x84016bc4     0x50    li t3,64
    0x84016bc8     0x54    lui a5,0xfc000
    0x84016bcc     0x58    srli t4,a5,0x19
    0x84016bd0     0x5c    li a5,1
    0x84016bd2     0x5e    slli t1,a5,0x26
    0x84016bd6     0x62    li a5,-1
    0x84016bd8     0x64    slli a7,a5,0x27
    0x84016bdc     0x68    li t5,63
    0x84016be0     0x6c    li t6,10
    0x84016be2     0x6e    srli a3,s0,0x35
    0x84016be6     0x72    andi a3,a3,63
    0x84016bea     0x76    srli a2,s0,0x2f
    0x84016bee     0x7a    andi a2,a2,63
    0x84016bf2     0x7e    sll a5,a0,a4
    0x84016bf6     0x82    beqz a3,ffffffff84016c04 <fastpath_reply_recv+0x90>
    0x84016bf8     0x84    subw a1,t3,a3
    0x84016bfc     0x88    srl a1,a5,a1
    0x84016c00     0x8c    bne a6,a1,ffffffff84016cda <fastpath_reply_recv+0x166>
    0x84016c04     0x90    sll a5,a5,a3
    0x84016c08     0x94    subw a1,t3,a2
    0x84016c0c     0x98    srl a5,a5,a1
    0x84016c10     0x9c    slli a5,a5,0x5
    0x84016c12     0x9e    slli s0,s0,0x1
    0x84016c14     0xa0    and a1,s0,t4
    0x84016c18     0xa4    and s0,s0,t1
    0x84016c1c     0xa8    beqz s0,ffffffff84016c22 <fastpath_reply_recv+0xae>
    0x84016c1e     0xaa    or a1,a1,a7
    0x84016c22     0xae    add a5,a5,a1
    0x84016c24     0xb0    ld s0,0(a5)
    0x84016c26     0xb2    ld a6,8(a5) # fffffffffc000008 <ki_end+0x77fd1008>
    0x84016c2a     0xb6    add a3,a3,a2
    0x84016c2c     0xb8    add a4,a4,a3
    0x84016c2e     0xba    bgeu t5,a4,ffffffff84016cd0 <fastpath_reply_recv+0x15c>
    0x84016c32     0xbe    li a5,64
    0x84016c36     0xc2    bltu a5,a4,ffffffff84016cda <fastpath_reply_recv+0x166>
    0x84016c3a     0xc6    srli a5,s0,0x3b
    0x84016c3e     0xca    li a4,4
    0x84016c40     0xcc    bne a5,a4,ffffffff84016cda <fastpath_reply_recv+0x166>
    0x84016c44     0xd0    slli a5,s0,0x7
    0x84016c48     0xd4    bgez a5,ffffffff84016cda <fastpath_reply_recv+0x166>
    0x84016c4c     0xd8    ld a5,304(s2)
    0x84016c50     0xdc    bnez a5,ffffffff84016ce0 <fastpath_reply_recv+0x16c>
    0x84016c52     0xde    slli s9,s0,0x19
    0x84016c56     0xe2    srli s9,s9,0x19
    0x84016c5a     0xe6    slli a5,s0,0x19
    0x84016c5e     0xea    bgez a5,ffffffff84016c6a <fastpath_reply_recv+0xf6>
    0x84016c62     0xee    li a5,-1
    0x84016c64     0xf0    slli a5,a5,0x27
    0x84016c66     0xf2    or s9,s9,a5
    0x84016c6a     0xf6    mv s8,s9
    0x84016c6c     0xf8    ld a5,0(s9)
    0x84016c70     0xfc    andi a5,a5,3
    0x84016c72     0xfe    li a4,1
    0x84016c74    0x100    beq a5,a4,ffffffff84016cf0 <fastpath_reply_recv+0x17c>
    0x84016c78    0x104    addi s7,s3,96
    0x84016c7c    0x108    ld s5,8(s7)
    0x84016c80    0x10c    ld a5,96(s3)
    0x84016c84    0x110    srli a5,a5,0x3b
    0x84016c86    0x112    li a4,8
    0x84016c88    0x114    bne a5,a4,ffffffff84016cf6 <fastpath_reply_recv+0x182>
    0x84016c8c    0x118    ld a5,312(s5)
    0x84016c90    0x11c    andi a5,a5,15
    0x84016c92    0x11e    bnez a5,ffffffff84016cfc <fastpath_reply_recv+0x188>
    0x84016c94    0x120    andi a5,s5,-1024
    0x84016c98    0x124    ld a4,32(a5)
    0x84016c9a    0x126    ld s6,40(a5)
    0x84016c9e    0x12a    srli a5,s6,0x9
    0x84016ca2    0x12e    slli s4,a5,0x19
    0x84016ca6    0x132    srli s4,s4,0x19
    0x84016caa    0x136    slli a3,a5,0x19
    0x84016cae    0x13a    bgez a3,ffffffff84016cba <fastpath_reply_recv+0x146>
    0x84016cb2    0x13e    li a5,-1
    0x84016cb4    0x140    slli a5,a5,0x27
    0x84016cb6    0x142    or s4,s4,a5
    0x84016cba    0x146    srli a5,a4,0x3b
    0x84016cbe    0x14a    li a3,3
    0x84016cc0    0x14c    beq a5,a3,ffffffff84016d02 <fastpath_reply_recv+0x18e>
    0x84016cc4    0x150    li a0,-2
    0x84016cc6    0x152    jal ra,ffffffff84016840 <slowpath>
    0x84016cca    0x156    li a0,-2
    0x84016ccc    0x158    jal ra,ffffffff84016840 <slowpath>
    0x84016cd0    0x15c    srli a5,s0,0x3b
    0x84016cd4    0x160    bne a5,t6,ffffffff84016c3a <fastpath_reply_recv+0xc6>
    0x84016cd8    0x164    j ffffffff84016be2 <fastpath_reply_recv+0x6e>
    0x84016cda    0x166    li a0,-2
    0x84016cdc    0x168    jal ra,ffffffff84016840 <slowpath>
    0x84016ce0    0x16c    ld a5,0(a5)
    0x84016ce2    0x16e    andi a5,a5,3
    0x84016ce4    0x170    li a4,2
    0x84016ce6    0x172    bne a5,a4,ffffffff84016c52 <fastpath_reply_recv+0xde>
    0x84016cea    0x176    li a0,-2
    0x84016cec    0x178    jal ra,ffffffff84016840 <slowpath>
    0x84016cf0    0x17c    li a0,-2
    0x84016cf2    0x17e    jal ra,ffffffff84016840 <slowpath>
    0x84016cf6    0x182    li a0,-2
    0x84016cf8    0x184    jal ra,ffffffff84016840 <slowpath>
    0x84016cfc    0x188    li a0,-2
    0x84016cfe    0x18a    jal ra,ffffffff84016840 <slowpath>
    0x84016d02    0x18e    slli a5,a4,0x18
    0x84016d06    0x192    bgez a5,ffffffff84016cc4 <fastpath_reply_recv+0x150>
    0x84016d0a    0x196    srli s6,s6,0x30
    0x84016d0e    0x19a    auipc s11,0x18
    0x84016d12    0x19e    ld s11,-1294(s11) # ffffffff8402e800 <ksCurDomain>
    0x84016d16    0x1a2    slli a4,s11,0x3
    0x84016d1a    0x1a6    auipc a5,0x18
    0x84016d1e    0x1aa    addi a5,a5,-770 # ffffffff8402ea18 <ksReadyQueuesL1Bitmap>
    0x84016d22    0x1ae    add a5,a5,a4
    0x84016d24    0x1b0    ld a0,0(a5)
    0x84016d26    0x1b2    beqz a0,ffffffff84016d66 <fastpath_reply_recv+0x1f2>
    0x84016d28    0x1b4    jal ra,ffffffff84017074 <__clzdi2>
    0x84016d2c    0x1b8    sext.w s10,a0
    0x84016d30    0x1bc    slli a5,s11,0x2
    0x84016d34    0x1c0    addi a4,s10,-60
    0x84016d38    0x1c4    add a5,a5,a4
    0x84016d3a    0x1c6    slli a5,a5,0x3
    0x84016d3c    0x1c8    auipc a4,0x18
    0x84016d40    0x1cc    addi a4,a4,-1324 # ffffffff8402e810 <ksReadyQueuesL2Bitmap>
    0x84016d44    0x1d0    add a5,a5,a4
    0x84016d46    0x1d2    ld a0,0(a5)
    0x84016d48    0x1d4    jal ra,ffffffff84017074 <__clzdi2>
    0x84016d4c    0x1d8    sext.w a0,a0
    0x84016d4e    0x1da    li a5,63
    0x84016d52    0x1de    sub s10,a5,s10
    0x84016d56    0x1e2    slli s10,s10,0x6
    0x84016d58    0x1e4    sub a5,a5,a0
    0x84016d5a    0x1e6    or s10,s10,a5
    0x84016d5e    0x1ea    ld a5,360(s5)
    0x84016d62    0x1ee    bltu a5,s10,ffffffff84016db6 <fastpath_reply_recv+0x242>
    0x84016d66    0x1f2    ld a5,344(s5)
    0x84016d6a    0x1f6    bne a5,s11,ffffffff84016dbc <fastpath_reply_recv+0x248>
    0x84016d6e    0x1fa    ori s9,s9,3
    0x84016d72    0x1fe    sd s9,280(s2)
    0x84016d76    0x202    srli s0,s0,0x36
    0x84016d78    0x204    andi s0,s0,8
    0x84016d7a    0x206    ld a5,288(s2)
    0x84016d7e    0x20a    andi a5,a5,-9
    0x84016d80    0x20c    or s0,s0,a5
    0x84016d82    0x20e    sd s0,288(s2)
    0x84016d86    0x212    ld a4,0(s8)
    0x84016d8a    0x216    lui a5,0xf8000
    0x84016d8e    0x21a    srli a5,a5,0x19
    0x84016d90    0x21c    and a5,a5,a4
    0x84016d92    0x21e    slli a3,a4,0x19
    0x84016d96    0x222    bgez a3,ffffffff84016dc2 <fastpath_reply_recv+0x24e>
    0x84016d9a    0x226    li a4,-1
    0x84016d9c    0x228    slli a4,a4,0x27
    0x84016d9e    0x22a    or a5,a5,a4
    0x84016da0    0x22c    sd s2,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x84016da4    0x230    sd a5,416(s2)
    0x84016da8    0x234    sd zero,408(s2)
    0x84016dac    0x238    ori s2,s2,2
    0x84016db0    0x23c    sd s2,0(s8)
    0x84016db4    0x240    j ffffffff84016dd8 <fastpath_reply_recv+0x264>
    0x84016db6    0x242    li a0,-2
    0x84016db8    0x244    jal ra,ffffffff84016840 <slowpath>
    0x84016dbc    0x248    li a0,-2
    0x84016dbe    0x24a    jal ra,ffffffff84016840 <slowpath>
    0x84016dc2    0x24e    bnez a5,ffffffff84016da0 <fastpath_reply_recv+0x22c>
    0x84016dc4    0x250    sd zero,416(s2)
    0x84016dc8    0x254    sd zero,408(s2)
    0x84016dcc    0x258    sd s2,8(s8)
    0x84016dd0    0x25c    ori s2,s2,2
    0x84016dd4    0x260    sd s2,0(s8)
    0x84016dd8    0x264    andi a3,s1,127
    0x84016ddc    0x268    ld a5,16(s7)
    0x84016de0    0x26c    li a4,3
    0x84016de2    0x26e    sd a4,24(a5)
    0x84016de4    0x270    sd zero,96(s3)
    0x84016de8    0x274    sd zero,8(s7)
    0x84016dec    0x278    sd zero,16(s7)
    0x84016df0    0x27c    sd zero,24(s7)
    0x84016df4    0x280    auipc a2,0x18
    0x84016df8    0x284    ld a2,-860(a2) # ffffffff8402ea98 <ksCurThread>
    0x84016dfc    0x288    beqz a3,ffffffff84016e14 <fastpath_reply_recv+0x2a0>
    0x84016dfe    0x28a    mv a5,a2
    0x84016e00    0x28c    addi a4,s5,88
    0x84016e04    0x290    slli a3,a3,0x3
    0x84016e06    0x292    add a2,a2,a3
    0x84016e08    0x294    ld a3,88(a5)
    0x84016e0a    0x296    sd a3,0(a4)
    0x84016e0c    0x298    addi a5,a5,8
    0x84016e0e    0x29a    addi a4,a4,8
    0x84016e10    0x29c    bne a2,a5,ffffffff84016e08 <fastpath_reply_recv+0x294>
    0x84016e14    0x2a0    li a5,1
    0x84016e16    0x2a2    sd a5,280(s5)
    0x84016e1a    0x2a6    slli a5,a5,0x26
    0x84016e1c    0x2a8    add s4,s4,a5
    0x84016e1e    0x2aa    srli s4,s4,0xc
    0x84016e22    0x2ae    li a5,-1
    0x84016e24    0x2b0    srli a4,a5,0x14
    0x84016e28    0x2b4    and s4,s4,a4
    0x84016e2c    0x2b8    slli s6,s6,0x2c
    0x84016e2e    0x2ba    or s6,s4,s6
    0x84016e32    0x2be    slli a5,a5,0x3f
    0x84016e34    0x2c0    or s6,s6,a5
    0x84016e38    0x2c4    csrw satp,s6
    0x84016e3c    0x2c8    sfence.vma
    0x84016e40    0x2cc    auipc a5,0x18
    0x84016e44    0x2d0    sd s5,-936(a5) # ffffffff8402ea98 <ksCurThread>
    0x84016e48    0x2d4    li a0,0
    0x84016e4a    0x2d6    lui a1,0xfffff
    0x84016e4c    0x2d8    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84016e50    0x2dc    and a1,a1,s1
    0x84016e52    0x2de    mv t0,s5
    0x84016e54    0x2e0    ld ra,0(t0)
    0x84016e58    0x2e4    ld sp,8(t0)
    0x84016e5c    0x2e8    ld gp,16(t0)
    0x84016e60    0x2ec    ld t2,48(t0)
    0x84016e64    0x2f0    ld s0,56(t0)
    0x84016e68    0x2f4    ld s1,64(t0)
    0x84016e6c    0x2f8    ld a2,88(t0)
    0x84016e70    0x2fc    ld a3,96(t0)
    0x84016e74    0x300    ld a4,104(t0)
    0x84016e78    0x304    ld a5,112(t0)
    0x84016e7c    0x308    ld a6,120(t0)
    0x84016e80    0x30c    ld a7,128(t0)
    0x84016e84    0x310    ld s2,136(t0)
    0x84016e88    0x314    ld s3,144(t0)
    0x84016e8c    0x318    ld s4,152(t0)
    0x84016e90    0x31c    ld s5,160(t0)
    0x84016e94    0x320    ld s6,168(t0)
    0x84016e98    0x324    ld s7,176(t0)
    0x84016e9c    0x328    ld s8,184(t0)
    0x84016ea0    0x32c    ld s9,192(t0)
    0x84016ea4    0x330    ld s10,200(t0)
    0x84016ea8    0x334    ld s11,208(t0)
    0x84016eac    0x338    ld t3,216(t0)
    0x84016eb0    0x33c    ld t4,224(t0)
    0x84016eb4    0x340    ld t5,232(t0)
    0x84016eb8    0x344    ld t6,240(t0)
    0x84016ebc    0x348    ld t1,24(t0)
    0x84016ec0    0x34c    add tp,t1,zero
    0x84016ec4    0x350    ld t1,272(t0)
    0x84016ec8    0x354    csrw sepc,t1
    0x84016ecc    0x358    csrw sscratch,t0
    0x84016ed0    0x35c    ld t1,256(t0)
    0x84016ed4    0x360    csrw sstatus,t1
    0x84016ed8    0x364    ld t1,40(t0)
    0x84016edc    0x368    ld t0,32(t0)
    0x84016ee0    0x36c    sret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
269 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 426 nodes.

Section fastpath_call (169 of 266)
==================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 246 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

12 stack accesses found. Annotated code for `fastpath_call`:

    0x84016858      0x0    addi sp,sp,-96
    0x8401685a      0x2    sd ra,88(sp)          ; stack access
    0x8401685c      0x4    sd s0,80(sp)          ; stack access
    0x8401685e      0x6    sd s1,72(sp)          ; stack access
    0x84016860      0x8    sd s2,64(sp)          ; stack access
    0x84016862      0xa    sd s3,56(sp)          ; stack access
    0x84016864      0xc    sd s4,48(sp)          ; stack access
    0x84016866      0xe    sd s5,40(sp)          ; stack access
    0x84016868     0x10    sd s6,32(sp)          ; stack access
    0x8401686a     0x12    sd s7,24(sp)          ; stack access
    0x8401686c     0x14    sd s8,16(sp)          ; stack access
    0x8401686e     0x16    sd s9,8(sp)           ; stack access
    0x84016870     0x18    sd s10,0(sp)          ; stack access
    0x84016872     0x1a    mv s2,a1
    0x84016874     0x1c    auipc a1,0x18
    0x84016878     0x20    ld a1,548(a1) # ffffffff8402ea98 <ksCurThread>
    0x8401687c     0x24    ld a4,312(a1)
    0x84016880     0x28    andi a3,s2,511
    0x84016884     0x2c    li a5,4
    0x84016886     0x2e    bltu a5,a3,ffffffff84016982 <fastpath_call+0x12a>
    0x8401688a     0x32    andi a4,a4,15
    0x8401688c     0x34    bnez a4,ffffffff84016982 <fastpath_call+0x12a>
    0x8401688e     0x36    andi a5,a1,-1024
    0x84016892     0x3a    ld s0,0(a5)
    0x84016894     0x3c    ld s3,8(a5)
    0x84016898     0x40    srli a3,s0,0x3b
    0x8401689c     0x44    li a5,10
    0x8401689e     0x46    bne a3,a5,ffffffff84016992 <fastpath_call+0x13a>
    0x840168a2     0x4a    li t4,64
    0x840168a6     0x4e    lui a5,0xfc000
    0x840168aa     0x52    srli t3,a5,0x19
    0x840168ae     0x56    li a5,1
    0x840168b0     0x58    slli t1,a5,0x26
    0x840168b4     0x5c    li a5,-1
    0x840168b6     0x5e    slli a7,a5,0x27
    0x840168ba     0x62    li t5,63
    0x840168be     0x66    li t6,10
    0x840168c0     0x68    srli a3,s0,0x35
    0x840168c4     0x6c    andi a3,a3,63
    0x840168c8     0x70    srli a2,s0,0x2f
    0x840168cc     0x74    andi a2,a2,63
    0x840168d0     0x78    sll a5,a0,a4
    0x840168d4     0x7c    beqz a3,ffffffff840168e2 <fastpath_call+0x8a>
    0x840168d6     0x7e    subw a6,t4,a3
    0x840168da     0x82    srl a6,a5,a6
    0x840168de     0x86    bne s3,a6,ffffffff84016992 <fastpath_call+0x13a>
    0x840168e2     0x8a    sll a5,a5,a3
    0x840168e6     0x8e    subw a6,t4,a2
    0x840168ea     0x92    srl a5,a5,a6
    0x840168ee     0x96    slli a5,a5,0x5
    0x840168f0     0x98    slli s0,s0,0x1
    0x840168f2     0x9a    and a6,s0,t3
    0x840168f6     0x9e    and s0,s0,t1
    0x840168fa     0xa2    beqz s0,ffffffff84016900 <fastpath_call+0xa8>
    0x840168fc     0xa4    or a6,a6,a7
    0x84016900     0xa8    add a5,a5,a6
    0x84016902     0xaa    ld s0,0(a5)
    0x84016904     0xac    ld s3,8(a5) # fffffffffc000008 <ki_end+0x77fd1008>
    0x84016908     0xb0    add a3,a3,a2
    0x8401690a     0xb2    add a4,a4,a3
    0x8401690c     0xb4    bgeu t5,a4,ffffffff84016988 <fastpath_call+0x130>
    0x84016910     0xb8    li a5,64
    0x84016914     0xbc    bltu a5,a4,ffffffff84016992 <fastpath_call+0x13a>
    0x84016918     0xc0    srli a5,s0,0x3b
    0x8401691c     0xc4    li a4,4
    0x8401691e     0xc6    bne a5,a4,ffffffff84016992 <fastpath_call+0x13a>
    0x84016922     0xca    slli a5,s0,0x8
    0x84016926     0xce    bgez a5,ffffffff84016992 <fastpath_call+0x13a>
    0x8401692a     0xd2    slli a5,s0,0x19
    0x8401692e     0xd6    srli a5,a5,0x19
    0x84016930     0xd8    slli a4,s0,0x19
    0x84016934     0xdc    bgez a4,ffffffff8401693e <fastpath_call+0xe6>
    0x84016938     0xe0    li a4,-1
    0x8401693a     0xe2    slli a4,a4,0x27
    0x8401693c     0xe4    or a5,a5,a4
    0x8401693e     0xe6    mv s7,a5
    0x84016940     0xe8    ld s4,8(a5)
    0x84016944     0xec    ld a5,0(a5)
    0x84016946     0xee    andi a5,a5,3
    0x84016948     0xf0    li a4,2
    0x8401694a     0xf2    bne a5,a4,ffffffff84016998 <fastpath_call+0x140>
    0x8401694e     0xf6    andi s6,s4,-1024
    0x84016952     0xfa    ld a5,32(s6)
    0x84016956     0xfe    ld s5,40(s6)
    0x8401695a    0x102    srli a4,s5,0x9
    0x8401695e    0x106    slli s1,a4,0x19
    0x84016962    0x10a    srli s1,s1,0x19
    0x84016964    0x10c    slli a3,a4,0x19
    0x84016968    0x110    bgez a3,ffffffff84016972 <fastpath_call+0x11a>
    0x8401696c    0x114    li a4,-1
    0x8401696e    0x116    slli a4,a4,0x27
    0x84016970    0x118    or s1,s1,a4
    0x84016972    0x11a    srli a4,a5,0x3b
    0x84016976    0x11e    li a3,3
    0x84016978    0x120    beq a4,a3,ffffffff8401699e <fastpath_call+0x146>
    0x8401697c    0x124    li a0,-1
    0x8401697e    0x126    jal ra,ffffffff84016840 <slowpath>
    0x84016982    0x12a    li a0,-1
    0x84016984    0x12c    jal ra,ffffffff84016840 <slowpath>
    0x84016988    0x130    srli a5,s0,0x3b
    0x8401698c    0x134    bne a5,t6,ffffffff84016918 <fastpath_call+0xc0>
    0x84016990    0x138    j ffffffff840168c0 <fastpath_call+0x68>
    0x84016992    0x13a    li a0,-1
    0x84016994    0x13c    jal ra,ffffffff84016840 <slowpath>
    0x84016998    0x140    li a0,-1
    0x8401699a    0x142    jal ra,ffffffff84016840 <slowpath>
    0x8401699e    0x146    slli a4,a5,0x18
    0x840169a2    0x14a    bgez a4,ffffffff8401697c <fastpath_call+0x124>
    0x840169a6    0x14e    srli s5,s5,0x30
    0x840169aa    0x152    auipc s8,0x18
    0x840169ae    0x156    ld s8,-426(s8) # ffffffff8402e800 <ksCurDomain>
    0x840169b2    0x15a    ld s9,360(s4)
    0x840169b6    0x15e    ld a5,360(a1)
    0x840169ba    0x162    bltu s9,a5,ffffffff84016b0e <fastpath_call+0x2b6>
    0x840169be    0x166    srli a5,s0,0x39
    0x840169c2    0x16a    srli s0,s0,0x3a
    0x840169c4    0x16c    or s0,s0,a5
    0x840169c6    0x16e    andi s0,s0,1
    0x840169c8    0x170    beqz s0,ffffffff84016b62 <fastpath_call+0x30a>
    0x840169cc    0x174    ld a5,344(s4)
    0x840169d0    0x178    bne a5,s8,ffffffff84016b68 <fastpath_call+0x310>
    0x840169d4    0x17c    ld a5,408(s4)
    0x840169d8    0x180    sd a5,8(s7)
    0x840169dc    0x184    ld a5,408(s4)
    0x840169e0    0x188    bnez a5,ffffffff84016b6e <fastpath_call+0x316>
    0x840169e4    0x18c    sd zero,0(s7)
    0x840169e8    0x190    andi a1,s2,127
    0x840169ec    0x194    auipc a0,0x18
    0x840169f0    0x198    addi a0,a0,172 # ffffffff8402ea98 <ksCurThread>
    0x840169f4    0x19c    ld a2,0(a0)
    0x840169f6    0x19e    li a5,5
    0x840169f8    0x1a0    sd a5,280(a2)
    0x840169fc    0x1a4    andi a3,a2,-1024
    0x84016a00    0x1a8    addi a3,a3,64
    0x84016a04    0x1ac    addi a4,s6,96
    0x84016a08    0x1b0    ld a5,288(s4)
    0x84016a0c    0x1b4    sd a2,104(s6)
    0x84016a10    0x1b8    srli a5,a5,0x2
    0x84016a12    0x1ba    andi a5,a5,2
    0x84016a14    0x1bc    li a2,1
    0x84016a16    0x1be    slli a2,a2,0x3e
    0x84016a18    0x1c0    or a5,a5,a2
    0x84016a1a    0x1c2    sd a5,96(s6)
    0x84016a1e    0x1c6    sd a3,112(s6)
    0x84016a22    0x1ca    ori a4,a4,3
    0x84016a26    0x1ce    sd a4,24(a3)
    0x84016a28    0x1d0    ld a2,0(a0)
    0x84016a2a    0x1d2    beqz a1,ffffffff84016a42 <fastpath_call+0x1ea>
    0x84016a2c    0x1d4    mv a5,a2
    0x84016a2e    0x1d6    addi a4,s4,88
    0x84016a32    0x1da    slli a1,a1,0x3
    0x84016a34    0x1dc    add a2,a2,a1
    0x84016a36    0x1de    ld a3,88(a5)
    0x84016a38    0x1e0    sd a3,0(a4)
    0x84016a3a    0x1e2    addi a5,a5,8
    0x84016a3c    0x1e4    addi a4,a4,8
    0x84016a3e    0x1e6    bne a5,a2,ffffffff84016a36 <fastpath_call+0x1de>
    0x84016a42    0x1ea    li a5,1
    0x84016a44    0x1ec    sd a5,280(s4)
    0x84016a48    0x1f0    slli a5,a5,0x26
    0x84016a4a    0x1f2    add a5,a5,s1
    0x84016a4c    0x1f4    srli a5,a5,0xc
    0x84016a4e    0x1f6    li a4,-1
    0x84016a50    0x1f8    srli s1,a4,0x14
    0x84016a54    0x1fc    and a5,a5,s1
    0x84016a56    0x1fe    slli s5,s5,0x2c
    0x84016a58    0x200    or a5,a5,s5
    0x84016a5c    0x204    slli a4,a4,0x3f
    0x84016a5e    0x206    or a5,a5,a4
    0x84016a60    0x208    csrw satp,a5
    0x84016a64    0x20c    sfence.vma
    0x84016a68    0x210    auipc a5,0x18
    0x84016a6c    0x214    sd s4,48(a5) # ffffffff8402ea98 <ksCurThread>
    0x84016a70    0x218    mv a0,s3
    0x84016a72    0x21a    lui a1,0xfffff
    0x84016a74    0x21c    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84016a78    0x220    and a1,s2,a1
    0x84016a7c    0x224    mv t0,s4
    0x84016a7e    0x226    ld ra,0(t0) # fffffffffc000000 <ki_end+0x77fd1000>
    0x84016a82    0x22a    ld sp,8(t0)
    0x84016a86    0x22e    ld gp,16(t0)
    0x84016a8a    0x232    ld t2,48(t0)
    0x84016a8e    0x236    ld s0,56(t0)
    0x84016a92    0x23a    ld s1,64(t0)
    0x84016a96    0x23e    ld a2,88(t0)
    0x84016a9a    0x242    ld a3,96(t0)
    0x84016a9e    0x246    ld a4,104(t0)
    0x84016aa2    0x24a    ld a5,112(t0)
    0x84016aa6    0x24e    ld a6,120(t0)
    0x84016aaa    0x252    ld a7,128(t0)
    0x84016aae    0x256    ld s2,136(t0)
    0x84016ab2    0x25a    ld s3,144(t0)
    0x84016ab6    0x25e    ld s4,152(t0)
    0x84016aba    0x262    ld s5,160(t0)
    0x84016abe    0x266    ld s6,168(t0)
    0x84016ac2    0x26a    ld s7,176(t0)
    0x84016ac6    0x26e    ld s8,184(t0)
    0x84016aca    0x272    ld s9,192(t0)
    0x84016ace    0x276    ld s10,200(t0)
    0x84016ad2    0x27a    ld s11,208(t0)
    0x84016ad6    0x27e    ld t3,216(t0)
    0x84016ada    0x282    ld t4,224(t0)
    0x84016ade    0x286    ld t5,232(t0)
    0x84016ae2    0x28a    ld t6,240(t0)
    0x84016ae6    0x28e    ld t1,24(t0)
    0x84016aea    0x292    add tp,t1,zero
    0x84016aee    0x296    ld t1,272(t0)
    0x84016af2    0x29a    csrw sepc,t1
    0x84016af6    0x29e    csrw sscratch,t0
    0x84016afa    0x2a2    ld t1,256(t0)
    0x84016afe    0x2a6    csrw sstatus,t1
    0x84016b02    0x2aa    ld t1,40(t0)
    0x84016b06    0x2ae    ld t0,32(t0)
    0x84016b0a    0x2b2    sret
    0x84016b0e    0x2b6    slli a4,s8,0x3
    0x84016b12    0x2ba    auipc a5,0x18
    0x84016b16    0x2be    addi a5,a5,-250 # ffffffff8402ea18 <ksReadyQueuesL1Bitmap>
    0x84016b1a    0x2c2    add a5,a5,a4
    0x84016b1c    0x2c4    ld a0,0(a5)
    0x84016b1e    0x2c6    beqz a0,ffffffff840169be <fastpath_call+0x166>
    0x84016b22    0x2ca    jal ra,ffffffff84017074 <__clzdi2>
    0x84016b26    0x2ce    sext.w s10,a0
    0x84016b2a    0x2d2    slli a5,s8,0x2
    0x84016b2e    0x2d6    addi a4,s10,-60
    0x84016b32    0x2da    add a5,a5,a4
    0x84016b34    0x2dc    slli a5,a5,0x3
    0x84016b36    0x2de    auipc a4,0x18
    0x84016b3a    0x2e2    addi a4,a4,-806 # ffffffff8402e810 <ksReadyQueuesL2Bitmap>
    0x84016b3e    0x2e6    add a5,a5,a4
    0x84016b40    0x2e8    ld a0,0(a5)
    0x84016b42    0x2ea    jal ra,ffffffff84017074 <__clzdi2>
    0x84016b46    0x2ee    sext.w a3,a0
    0x84016b4a    0x2f2    li a4,63
    0x84016b4e    0x2f6    sub a5,a4,s10
    0x84016b52    0x2fa    slli a5,a5,0x6
    0x84016b54    0x2fc    sub a4,a4,a3
    0x84016b56    0x2fe    or a5,a5,a4
    0x84016b58    0x300    bgeu s9,a5,ffffffff840169be <fastpath_call+0x166>
    0x84016b5c    0x304    li a0,-1
    0x84016b5e    0x306    jal ra,ffffffff84016840 <slowpath>
    0x84016b62    0x30a    li a0,-1
    0x84016b64    0x30c    jal ra,ffffffff84016840 <slowpath>
    0x84016b68    0x310    li a0,-1
    0x84016b6a    0x312    jal ra,ffffffff84016840 <slowpath>
    0x84016b6e    0x316    sd zero,416(a5)
    0x84016b72    0x31a    j ffffffff840169e8 <fastpath_call+0x190>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
246 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 385 nodes.

Section performPageTableInvocationUnmap (170 of 266)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 44 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x840156d2     0x0    addi sp,sp,-48
    0x840156d4     0x2    sd ra,40(sp)          ; stack access
    0x840156d6     0x4    sd s0,32(sp)          ; stack access
    0x840156d8     0x6    sd s1,24(sp)          ; stack access
    0x840156da     0x8    sd a1,8(sp)           ; stack access
    0x840156dc     0xa    mv s0,a2
    0x840156de     0xc    slli a4,a0,0x18
    0x840156e2    0x10    bgez a4,ffffffff8401572a <performPageTableInvocationUnmap+0x58>
    0x840156e6    0x14    mv a5,a0
    0x840156e8    0x16    mv a4,a1
    0x840156ea    0x18    srli a3,a1,0x9
    0x840156ee    0x1c    slli a0,a3,0x19
    0x840156f2    0x20    srli a0,a0,0x19
    0x840156f4    0x22    slli a2,a3,0x19
    0x840156f8    0x26    bgez a2,ffffffff84015702 <performPageTableInvocationUnmap+0x30>
    0x840156fc    0x2a    li a3,-1
    0x840156fe    0x2c    slli a3,a3,0x27
    0x84015700    0x2e    or a0,a0,a3
    0x84015702    0x30    mv s1,a0
    0x84015704    0x32    srli a0,a4,0x30
    0x84015708    0x36    slli a1,a5,0x19
    0x8401570c    0x3a    srli a1,a1,0x19
    0x8401570e    0x3c    slli a4,a5,0x19
    0x84015712    0x40    bgez a4,ffffffff8401571c <performPageTableInvocationUnmap+0x4a>
    0x84015716    0x44    li a5,-1
    0x84015718    0x46    slli a5,a5,0x27
    0x8401571a    0x48    or a1,a1,a5
    0x8401571c    0x4a    mv a2,s1
    0x8401571e    0x4c    jal ra,ffffffff84010668 <unmapPageTable>
    0x84015722    0x50    lui a1,0x1
    0x84015724    0x52    mv a0,s1
    0x84015726    0x54    jal ra,ffffffff840156c0 <memzero>
    0x8401572a    0x58    ld a4,0(s0)
    0x8401572c    0x5a    li a5,-1
    0x8401572e    0x5c    slli a5,a5,0x27
    0x84015730    0x5e    addi a5,a5,-1
    0x84015732    0x60    and a5,a5,a4
    0x84015734    0x62    sd a5,0(s0)
    0x84015736    0x64    li a0,0
    0x84015738    0x66    ld ra,40(sp)          ; stack access
    0x8401573a    0x68    ld s0,32(sp)          ; stack access
    0x8401573c    0x6a    ld s1,24(sp)          ; stack access
    0x8401573e    0x6c    addi sp,sp,48
    0x84015740    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 62 nodes.

Section replyFromKernel_error (171 of 266)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x840155e2     0x0    addi sp,sp,-16
    0x840155e4     0x2    sd ra,8(sp)           ; stack access
    0x840155e6     0x4    sd s0,0(sp)           ; stack access
    0x840155e8     0x6    mv s0,a0
    0x840155ea     0x8    mv a1,a0
    0x840155ec     0xa    li a0,1
    0x840155ee     0xc    jal ra,ffffffff840103be <lookupIPCBuffer>
    0x840155f2    0x10    mv a1,a0
    0x840155f4    0x12    sd zero,72(s0)
    0x840155f8    0x16    mv a0,s0
    0x840155fa    0x18    jal ra,ffffffff840154f0 <setMRs_syscall_error>
    0x840155fe    0x1c    auipc a5,0x8
    0x84015602    0x20    ld a5,1658(a5) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015606    0x24    slli a5,a5,0xc
    0x84015608    0x26    andi a0,a0,127
    0x8401560c    0x2a    or a5,a5,a0
    0x8401560e    0x2c    sd a5,80(s0)
    0x84015610    0x2e    ld ra,8(sp)           ; stack access
    0x84015612    0x30    ld s0,0(sp)           ; stack access
    0x84015614    0x32    addi sp,sp,16
    0x84015616    0x34    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 31 nodes.

Section decodeUnbindNotification (172 of 266)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 30 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x8401532e     0x0    addi sp,sp,-32
    0x84015330     0x2    sd ra,24(sp)          ; stack access
    0x84015332     0x4    sd s0,16(sp)          ; stack access
    0x84015334     0x6    sd a0,0(sp)           ; stack access
    0x84015336     0x8    sd a1,8(sp)           ; stack access
    0x84015338     0xa    slli s0,a0,0x19
    0x8401533c     0xe    srli s0,s0,0x19
    0x8401533e    0x10    slli a5,a0,0x19
    0x84015342    0x14    bgez a5,ffffffff8401534c <decodeUnbindNotification+0x1e>
    0x84015346    0x18    li a5,-1
    0x84015348    0x1a    slli a5,a5,0x27
    0x8401534a    0x1c    or s0,s0,a5
    0x8401534c    0x1e    ld a5,304(s0)
    0x84015350    0x22    beqz a5,ffffffff84015370 <decodeUnbindNotification+0x42>
    0x84015352    0x24    li a1,2
    0x84015354    0x26    auipc a0,0x19
    0x84015358    0x2a    ld a0,1860(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401535c    0x2e    jal ra,ffffffff840122d8 <setThreadState>
    0x84015360    0x32    li a1,0
    0x84015362    0x34    mv a0,s0
    0x84015364    0x36    jal ra,ffffffff84015246 <invokeTCB_NotificationControl>
    0x84015368    0x3a    ld ra,24(sp)          ; stack access
    0x8401536a    0x3c    ld s0,16(sp)          ; stack access
    0x8401536c    0x3e    addi sp,sp,32
    0x8401536e    0x40    ret
    0x84015370    0x42    li a5,3
    0x84015372    0x44    auipc a4,0x9
    0x84015376    0x48    sd a5,-1786(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x8401537a    0x4c    li a0,3
    0x8401537c    0x4e    j ffffffff84015368 <decodeUnbindNotification+0x3a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 46 nodes.

Section decodeBindNotification (173 of 266)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 77 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeBindNotification`:

    0x8401525e     0x0    addi sp,sp,-48
    0x84015260     0x2    sd ra,40(sp)          ; stack access
    0x84015262     0x4    sd s0,32(sp)          ; stack access
    0x84015264     0x6    sd s1,24(sp)          ; stack access
    0x84015266     0x8    sd a0,0(sp)           ; stack access
    0x84015268     0xa    sd a1,8(sp)           ; stack access
    0x8401526a     0xc    auipc a3,0x9
    0x8401526e    0x10    ld a3,-1514(a3) # ffffffff8401dc80 <current_extra_caps>
    0x84015272    0x14    beqz a3,ffffffff840152d0 <decodeBindNotification+0x72>
    0x84015274    0x16    ld a4,0(sp)           ; stack access
    0x84015276    0x18    slli a5,a4,0x19
    0x8401527a    0x1c    srli a5,a5,0x19
    0x8401527c    0x1e    slli a2,a4,0x19
    0x84015280    0x22    bgez a2,ffffffff8401528a <decodeBindNotification+0x2c>
    0x84015284    0x26    li a4,-1
    0x84015286    0x28    slli a4,a4,0x27
    0x84015288    0x2a    or a5,a5,a4
    0x8401528a    0x2c    mv s0,a5
    0x8401528c    0x2e    ld a5,304(a5)
    0x84015290    0x32    bnez a5,ffffffff840152de <decodeBindNotification+0x80>
    0x84015292    0x34    ld a4,0(a3)
    0x84015294    0x36    srli a3,a4,0x3b
    0x84015298    0x3a    li a5,6
    0x8401529a    0x3c    bne a3,a5,ffffffff840152f4 <decodeBindNotification+0x96>
    0x8401529e    0x40    slli a5,a4,0x19
    0x840152a2    0x44    srli a5,a5,0x19
    0x840152a4    0x46    slli a3,a4,0x19
    0x840152a8    0x4a    bgez a3,ffffffff840152b2 <decodeBindNotification+0x54>
    0x840152ac    0x4e    li a3,-1
    0x840152ae    0x50    slli a3,a3,0x27
    0x840152b0    0x52    or a5,a5,a3
    0x840152b2    0x54    mv s1,a5
    0x840152b4    0x56    slli a3,a4,0x5
    0x840152b8    0x5a    bgez a3,ffffffff84015302 <decodeBindNotification+0xa4>
    0x840152bc    0x5e    ld a5,8(a5)
    0x840152be    0x60    slli a5,a5,0x19
    0x840152c0    0x62    beqz a5,ffffffff84015310 <decodeBindNotification+0xb2>
    0x840152c2    0x64    li a5,3
    0x840152c4    0x66    auipc a4,0x9
    0x840152c8    0x6a    sd a5,-1612(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840152cc    0x6e    li a0,3
    0x840152ce    0x70    j ffffffff840152ea <decodeBindNotification+0x8c>
    0x840152d0    0x72    li a5,7
    0x840152d2    0x74    auipc a4,0x9
    0x840152d6    0x78    sd a5,-1626(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840152da    0x7c    li a0,3
    0x840152dc    0x7e    j ffffffff840152ea <decodeBindNotification+0x8c>
    0x840152de    0x80    li a5,3
    0x840152e0    0x82    auipc a4,0x9
    0x840152e4    0x86    sd a5,-1640(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840152e8    0x8a    li a0,3
    0x840152ea    0x8c    ld ra,40(sp)          ; stack access
    0x840152ec    0x8e    ld s0,32(sp)          ; stack access
    0x840152ee    0x90    ld s1,24(sp)          ; stack access
    0x840152f0    0x92    addi sp,sp,48
    0x840152f2    0x94    ret
    0x840152f4    0x96    li a5,3
    0x840152f6    0x98    auipc a4,0x9
    0x840152fa    0x9c    sd a5,-1662(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840152fe    0xa0    li a0,3
    0x84015300    0xa2    j ffffffff840152ea <decodeBindNotification+0x8c>
    0x84015302    0xa4    li a5,3
    0x84015304    0xa6    auipc a4,0x9
    0x84015308    0xaa    sd a5,-1676(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x8401530c    0xae    li a0,3
    0x8401530e    0xb0    j ffffffff840152ea <decodeBindNotification+0x8c>
    0x84015310    0xb2    ld a5,24(s1)
    0x84015312    0xb4    slli a5,a5,0x19
    0x84015314    0xb6    bnez a5,ffffffff840152c2 <decodeBindNotification+0x64>
    0x84015316    0xb8    li a1,2
    0x84015318    0xba    auipc a0,0x19
    0x8401531c    0xbe    ld a0,1920(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015320    0xc2    jal ra,ffffffff840122d8 <setThreadState>
    0x84015324    0xc6    mv a1,s1
    0x84015326    0xc8    mv a0,s0
    0x84015328    0xca    jal ra,ffffffff84015246 <invokeTCB_NotificationControl>
    0x8401532c    0xce    j ffffffff840152ea <decodeBindNotification+0x8c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 116 nodes.

Section invokeTCB_NotificationControl (174 of 266)
==================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_NotificationControl`:

    0x84015246     0x0    addi sp,sp,-16
    0x84015248     0x2    sd ra,8(sp)           ; stack access
    0x8401524a     0x4    beqz a1,ffffffff84015258 <invokeTCB_NotificationControl+0x12>
    0x8401524c     0x6    jal ra,ffffffff84011820 <bindNotification>
    0x84015250     0xa    li a0,0
    0x84015252     0xc    ld ra,8(sp)           ; stack access
    0x84015254     0xe    addi sp,sp,16
    0x84015256    0x10    ret
    0x84015258    0x12    jal ra,ffffffff8401180c <unbindNotification>
    0x8401525c    0x16    j ffffffff84015250 <invokeTCB_NotificationControl+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 17 nodes.

Section decodeWriteRegisters (175 of 266)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 56 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x840151b0     0x0    addi sp,sp,-64
    0x840151b2     0x2    sd ra,56(sp)          ; stack access
    0x840151b4     0x4    sd s0,48(sp)          ; stack access
    0x840151b6     0x6    sd s1,40(sp)          ; stack access
    0x840151b8     0x8    sd s2,32(sp)          ; stack access
    0x840151ba     0xa    sd s3,24(sp)          ; stack access
    0x840151bc     0xc    sd a0,0(sp)           ; stack access
    0x840151be     0xe    sd a1,8(sp)           ; stack access
    0x840151c0    0x10    li a5,1
    0x840151c2    0x12    bgeu a5,a2,ffffffff8401521c <decodeWriteRegisters+0x6c>
    0x840151c6    0x16    mv s1,a3
    0x840151c8    0x18    auipc a0,0x1a
    0x840151cc    0x1c    ld a0,-1840(a0) # ffffffff8402ea98 <ksCurThread>
    0x840151d0    0x20    ld s2,96(a0)
    0x840151d4    0x24    addi a2,a2,-2
    0x840151d6    0x26    bltu a2,s2,ffffffff8401522a <decodeWriteRegisters+0x7a>
    0x840151da    0x2a    ld a5,0(sp)           ; stack access
    0x840151dc    0x2c    slli s0,a5,0x19
    0x840151e0    0x30    srli s0,s0,0x19
    0x840151e2    0x32    slli a4,a5,0x19
    0x840151e6    0x36    bgez a4,ffffffff840151f0 <decodeWriteRegisters+0x40>
    0x840151ea    0x3a    li a5,-1
    0x840151ec    0x3c    slli a5,a5,0x27
    0x840151ee    0x3e    or s0,s0,a5
    0x840151f0    0x40    beq a0,s0,ffffffff84015238 <decodeWriteRegisters+0x88>
    0x840151f4    0x44    ld s3,88(a0)
    0x840151f8    0x48    li a1,2
    0x840151fa    0x4a    jal ra,ffffffff840122d8 <setThreadState>
    0x840151fe    0x4e    mv a4,s1
    0x84015200    0x50    li a3,0
    0x84015202    0x52    mv a2,s2
    0x84015204    0x54    andi a1,s3,1
    0x84015208    0x58    mv a0,s0
    0x8401520a    0x5a    jal ra,ffffffff840150ca <invokeTCB_WriteRegisters>
    0x8401520e    0x5e    ld ra,56(sp)          ; stack access
    0x84015210    0x60    ld s0,48(sp)          ; stack access
    0x84015212    0x62    ld s1,40(sp)          ; stack access
    0x84015214    0x64    ld s2,32(sp)          ; stack access
    0x84015216    0x66    ld s3,24(sp)          ; stack access
    0x84015218    0x68    addi sp,sp,64
    0x8401521a    0x6a    ret
    0x8401521c    0x6c    li a5,7
    0x8401521e    0x6e    auipc a4,0x9
    0x84015222    0x72    sd a5,-1446(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015226    0x76    li a0,3
    0x84015228    0x78    j ffffffff8401520e <decodeWriteRegisters+0x5e>
    0x8401522a    0x7a    li a5,7
    0x8401522c    0x7c    auipc a4,0x9
    0x84015230    0x80    sd a5,-1460(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015234    0x84    li a0,3
    0x84015236    0x86    j ffffffff8401520e <decodeWriteRegisters+0x5e>
    0x84015238    0x88    li a5,3
    0x8401523a    0x8a    auipc a4,0x9
    0x8401523e    0x8e    sd a5,-1474(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015242    0x92    li a0,3
    0x84015244    0x94    j ffffffff8401520e <decodeWriteRegisters+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 86 nodes.

Section invokeTCB_WriteRegisters (176 of 266)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 79 instructions.

RVC_TFFTFFT__T____TF.
RVC_TFFTT____FFT__TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x840150ca     0x0    addi sp,sp,-16
    0x840150cc     0x2    sd ra,8(sp)           ; stack access
    0x840150ce     0x4    sd s0,0(sp)           ; stack access
    0x840150d0     0x6    mv s0,a0
    0x840150d2     0x8    mv a7,a2
    0x840150d4     0xa    li a5,32
    0x840150d8     0xe    bgeu a5,a2,ffffffff840150e0 <invokeTCB_WriteRegisters+0x16>
    0x840150dc    0x12    li a7,32
    0x840150e0    0x16    beqz a2,ffffffff84015182 <invokeTCB_WriteRegisters+0xb8>
    0x840150e2    0x18    auipc a0,0x3
    0x840150e6    0x1c    addi a0,a0,-1394 # ffffffff84017b70 <frameRegisters>
    0x840150ea    0x20    li a5,2
    0x840150ec    0x22    li t3,3
    0x840150ee    0x24    li t4,17
    0x840150f0    0x26    auipc t6,0x1a
    0x840150f4    0x2a    addi t6,t6,-1624 # ffffffff8402ea98 <ksCurThread>
    0x840150f8    0x2e    auipc t5,0x3
    0x840150fc    0x32    addi t5,t5,-1496 # ffffffff84017b20 <msgRegisters>
    0x84015100    0x36    j ffffffff8401512e <invokeTCB_WriteRegisters+0x64>
    0x84015102    0x38    ld a6,0(t6)
    0x84015106    0x3c    slli t1,a5,0x3
    0x8401510a    0x40    add t1,t1,t5
    0x8401510c    0x42    ld t1,0(t1)
    0x84015110    0x46    slli t1,t1,0x3
    0x84015112    0x48    add a6,a6,t1
    0x84015114    0x4a    ld a6,0(a6)
    0x84015118    0x4e    slli a3,a3,0x3
    0x8401511a    0x50    add a3,a3,s0
    0x8401511c    0x52    sd a6,0(a3)
    0x84015120    0x56    addi a0,a0,8
    0x84015122    0x58    addi a3,a5,1
    0x84015126    0x5c    addi a5,a5,-1
    0x84015128    0x5e    bgeu a5,a7,ffffffff8401514a <invokeTCB_WriteRegisters+0x80>
    0x8401512c    0x62    mv a5,a3
    0x8401512e    0x64    ld a3,0(a0)
    0x84015130    0x66    bgeu t3,a5,ffffffff84015102 <invokeTCB_WriteRegisters+0x38>
    0x84015134    0x6a    slli a6,a5,0x3
    0x84015138    0x6e    add a6,a6,a4
    0x8401513a    0x70    ld a6,8(a6)
    0x8401513e    0x74    slli a3,a3,0x3
    0x84015140    0x76    add a3,a3,s0
    0x84015142    0x78    sd a6,0(a3)
    0x84015146    0x7c    bne a5,t4,ffffffff84015120 <invokeTCB_WriteRegisters+0x56>
    0x8401514a    0x80    li a5,16
    0x8401514c    0x82    bgeu a5,a2,ffffffff84015182 <invokeTCB_WriteRegisters+0xb8>
    0x84015150    0x86    addi a4,a4,152
    0x84015154    0x8a    auipc a3,0x3
    0x84015158    0x8e    addi a3,a3,-1372 # ffffffff84017bf8 <gpRegisters+0x8>
    0x8401515c    0x92    auipc a6,0x3
    0x84015160    0x96    addi a6,a6,-1260 # ffffffff84017c70 <gpRegisters+0x80>
    0x84015164    0x9a    li a2,17
    0x84015166    0x9c    li a5,9
    0x84015168    0x9e    j ffffffff84015170 <invokeTCB_WriteRegisters+0xa6>
    0x8401516a    0xa0    ld a5,0(a3)
    0x8401516c    0xa2    addi a3,a3,8
    0x8401516e    0xa4    addi a2,a2,1
    0x84015170    0xa6    ld a0,0(a4)
    0x84015172    0xa8    slli a5,a5,0x3
    0x84015174    0xaa    add a5,a5,s0
    0x84015176    0xac    sd a0,0(a5)
    0x84015178    0xae    beq a3,a6,ffffffff84015182 <invokeTCB_WriteRegisters+0xb8>
    0x8401517c    0xb2    addi a4,a4,8
    0x8401517e    0xb4    bltu a2,a7,ffffffff8401516a <invokeTCB_WriteRegisters+0xa0>
    0x84015182    0xb8    ld a5,264(s0)
    0x84015186    0xbc    sd a5,272(s0)
    0x8401518a    0xc0    bnez a1,ffffffff840151a2 <invokeTCB_WriteRegisters+0xd8>
    0x8401518c    0xc2    auipc a5,0x1a
    0x84015190    0xc6    ld a5,-1780(a5) # ffffffff8402ea98 <ksCurThread>
    0x84015194    0xca    beq a5,s0,ffffffff840151aa <invokeTCB_WriteRegisters+0xe0>
    0x84015198    0xce    li a0,0
    0x8401519a    0xd0    ld ra,8(sp)           ; stack access
    0x8401519c    0xd2    ld s0,0(sp)           ; stack access
    0x8401519e    0xd4    addi sp,sp,16
    0x840151a0    0xd6    ret
    0x840151a2    0xd8    mv a0,s0
    0x840151a4    0xda    jal ra,ffffffff840137c4 <restart>
    0x840151a8    0xde    j ffffffff8401518c <invokeTCB_WriteRegisters+0xc2>
    0x840151aa    0xe0    jal ra,ffffffff84012272 <rescheduleRequired>
    0x840151ae    0xe4    j ffffffff84015198 <invokeTCB_WriteRegisters+0xce>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 119 nodes.

Section decodeReadRegisters (177 of 266)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 62 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x84015026     0x0    addi sp,sp,-64
    0x84015028     0x2    sd ra,56(sp)          ; stack access
    0x8401502a     0x4    sd s0,48(sp)          ; stack access
    0x8401502c     0x6    sd s1,40(sp)          ; stack access
    0x8401502e     0x8    sd s2,32(sp)          ; stack access
    0x84015030     0xa    sd s3,24(sp)          ; stack access
    0x84015032     0xc    sd a0,0(sp)           ; stack access
    0x84015034     0xe    sd a1,8(sp)           ; stack access
    0x84015036    0x10    li a5,1
    0x84015038    0x12    bgeu a5,a2,ffffffff84015094 <decodeReadRegisters+0x6e>
    0x8401503c    0x16    mv s2,a3
    0x8401503e    0x18    auipc a0,0x1a
    0x84015042    0x1c    ld a0,-1446(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015046    0x20    ld s1,96(a0)
    0x84015048    0x22    addi a4,s1,-1
    0x8401504c    0x26    li a5,31
    0x8401504e    0x28    bltu a5,a4,ffffffff840150a2 <decodeReadRegisters+0x7c>
    0x84015052    0x2c    ld a5,0(sp)           ; stack access
    0x84015054    0x2e    slli s0,a5,0x19
    0x84015058    0x32    srli s0,s0,0x19
    0x8401505a    0x34    slli a4,a5,0x19
    0x8401505e    0x38    bgez a4,ffffffff84015068 <decodeReadRegisters+0x42>
    0x84015062    0x3c    li a5,-1
    0x84015064    0x3e    slli a5,a5,0x27
    0x84015066    0x40    or s0,s0,a5
    0x84015068    0x42    beq a0,s0,ffffffff840150bc <decodeReadRegisters+0x96>
    0x8401506c    0x46    ld s3,88(a0)
    0x84015070    0x4a    li a1,2
    0x84015072    0x4c    jal ra,ffffffff840122d8 <setThreadState>
    0x84015076    0x50    mv a4,s2
    0x84015078    0x52    li a3,0
    0x8401507a    0x54    mv a2,s1
    0x8401507c    0x56    andi a1,s3,1
    0x84015080    0x5a    mv a0,s0
    0x84015082    0x5c    jal ra,ffffffff84014f14 <invokeTCB_ReadRegisters>
    0x84015086    0x60    ld ra,56(sp)          ; stack access
    0x84015088    0x62    ld s0,48(sp)          ; stack access
    0x8401508a    0x64    ld s1,40(sp)          ; stack access
    0x8401508c    0x66    ld s2,32(sp)          ; stack access
    0x8401508e    0x68    ld s3,24(sp)          ; stack access
    0x84015090    0x6a    addi sp,sp,64
    0x84015092    0x6c    ret
    0x84015094    0x6e    li a5,7
    0x84015096    0x70    auipc a4,0x9
    0x8401509a    0x74    sd a5,-1054(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x8401509e    0x78    li a0,3
    0x840150a0    0x7a    j ffffffff84015086 <decodeReadRegisters+0x60>
    0x840150a2    0x7c    auipc a5,0x9
    0x840150a6    0x80    addi a5,a5,-1114 # ffffffff8401dc48 <current_syscall_error>
    0x840150aa    0x84    li a4,4
    0x840150ac    0x86    sd a4,48(a5)
    0x840150ae    0x88    li a4,1
    0x840150b0    0x8a    sd a4,16(a5)
    0x840150b2    0x8c    li a4,32
    0x840150b6    0x90    sd a4,24(a5)
    0x840150b8    0x92    li a0,3
    0x840150ba    0x94    j ffffffff84015086 <decodeReadRegisters+0x60>
    0x840150bc    0x96    li a5,3
    0x840150be    0x98    auipc a4,0x9
    0x840150c2    0x9c    sd a5,-1094(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840150c6    0xa0    li a0,3
    0x840150c8    0xa2    j ffffffff84015086 <decodeReadRegisters+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 94 nodes.

Section decodeCopyRegisters (178 of 266)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 60 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x84014e70     0x0    addi sp,sp,-48
    0x84014e72     0x2    sd ra,40(sp)          ; stack access
    0x84014e74     0x4    sd s0,32(sp)          ; stack access
    0x84014e76     0x6    sd s1,24(sp)          ; stack access
    0x84014e78     0x8    sd a0,0(sp)           ; stack access
    0x84014e7a     0xa    sd a1,8(sp)           ; stack access
    0x84014e7c     0xc    beqz a2,ffffffff84014ef2 <decodeCopyRegisters+0x82>
    0x84014e7e     0xe    auipc a5,0x9
    0x84014e82    0x12    ld a5,-510(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84014e86    0x16    beqz a5,ffffffff84014ef2 <decodeCopyRegisters+0x82>
    0x84014e88    0x18    ld a5,0(a5)
    0x84014e8a    0x1a    srli a3,a5,0x3b
    0x84014e8e    0x1e    li a4,12
    0x84014e90    0x20    bne a3,a4,ffffffff84014f00 <decodeCopyRegisters+0x90>
    0x84014e94    0x24    slli a1,a5,0x19
    0x84014e98    0x28    srli a1,a1,0x19
    0x84014e9a    0x2a    slli a4,a5,0x19
    0x84014e9e    0x2e    bgez a4,ffffffff84014ea8 <decodeCopyRegisters+0x38>
    0x84014ea2    0x32    li a5,-1
    0x84014ea4    0x34    slli a5,a5,0x27
    0x84014ea6    0x36    or a1,a1,a5
    0x84014ea8    0x38    auipc a0,0x1a
    0x84014eac    0x3c    ld a0,-1040(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014eb0    0x40    ld s1,88(a0)
    0x84014eb2    0x42    mv s0,a1
    0x84014eb4    0x44    li a1,2
    0x84014eb6    0x46    jal ra,ffffffff840122d8 <setThreadState>
    0x84014eba    0x4a    ld a5,0(sp)           ; stack access
    0x84014ebc    0x4c    slli a0,a5,0x19
    0x84014ec0    0x50    srli a0,a0,0x19
    0x84014ec2    0x52    slli a4,a5,0x19
    0x84014ec6    0x56    bgez a4,ffffffff84014ed0 <decodeCopyRegisters+0x60>
    0x84014eca    0x5a    li a5,-1
    0x84014ecc    0x5c    slli a5,a5,0x27
    0x84014ece    0x5e    or a0,a0,a5
    0x84014ed0    0x60    li a6,0
    0x84014ed2    0x62    andi a5,s1,8
    0x84014ed6    0x66    andi a4,s1,4
    0x84014eda    0x6a    andi a3,s1,2
    0x84014ede    0x6e    andi a2,s1,1
    0x84014ee2    0x72    mv a1,s0
    0x84014ee4    0x74    jal ra,ffffffff84014dc6 <invokeTCB_CopyRegisters>
    0x84014ee8    0x78    ld ra,40(sp)          ; stack access
    0x84014eea    0x7a    ld s0,32(sp)          ; stack access
    0x84014eec    0x7c    ld s1,24(sp)          ; stack access
    0x84014eee    0x7e    addi sp,sp,48
    0x84014ef0    0x80    ret
    0x84014ef2    0x82    li a5,7
    0x84014ef4    0x84    auipc a4,0x9
    0x84014ef8    0x88    sd a5,-636(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014efc    0x8c    li a0,3
    0x84014efe    0x8e    j ffffffff84014ee8 <decodeCopyRegisters+0x78>
    0x84014f00    0x90    auipc a5,0x9
    0x84014f04    0x94    addi a5,a5,-696 # ffffffff8401dc48 <current_syscall_error>
    0x84014f08    0x98    li a4,2
    0x84014f0a    0x9a    sd a4,48(a5)
    0x84014f0c    0x9c    li a4,1
    0x84014f0e    0x9e    sd a4,8(a5)
    0x84014f10    0xa0    li a0,3
    0x84014f12    0xa2    j ffffffff84014ee8 <decodeCopyRegisters+0x78>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 89 nodes.

Section decodeSetSchedParams (179 of 266)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 90 instructions.

RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x84014a9c     0x0    addi sp,sp,-128
    0x84014a9e     0x2    sd ra,120(sp)         ; stack access
    0x84014aa0     0x4    sd s0,112(sp)         ; stack access
    0x84014aa2     0x6    sd s1,104(sp)         ; stack access
    0x84014aa4     0x8    sd a0,64(sp)          ; stack access
    0x84014aa6     0xa    sd a1,72(sp)          ; stack access
    0x84014aa8     0xc    li a5,1
    0x84014aaa     0xe    bgeu a5,a2,ffffffff84014b32 <decodeSetSchedParams+0x96>
    0x84014aae    0x12    auipc a5,0x9
    0x84014ab2    0x16    ld a5,466(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84014ab6    0x1a    beqz a5,ffffffff84014b32 <decodeSetSchedParams+0x96>
    0x84014ab8    0x1c    ld a4,0(a5)
    0x84014aba    0x1e    srli a3,a4,0x3b
    0x84014abe    0x22    li a5,12
    0x84014ac0    0x24    bne a3,a5,ffffffff84014b40 <decodeSetSchedParams+0xa4>
    0x84014ac4    0x28    slli a5,a4,0x19
    0x84014ac8    0x2c    srli a5,a5,0x19
    0x84014aca    0x2e    slli a3,a4,0x19
    0x84014ace    0x32    bgez a3,ffffffff84014ad8 <decodeSetSchedParams+0x3c>
    0x84014ad2    0x36    li a4,-1
    0x84014ad4    0x38    slli a4,a4,0x27
    0x84014ad6    0x3a    or a5,a5,a4
    0x84014ad8    0x3c    auipc a0,0x1a
    0x84014adc    0x40    ld a0,-64(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014ae0    0x44    ld s0,88(a0)
    0x84014ae2    0x46    ld a5,352(a5)
    0x84014ae6    0x4a    bltu a5,s0,ffffffff84014b5c <decodeSetSchedParams+0xc0>
    0x84014aea    0x4e    ld s1,96(a0)
    0x84014aec    0x50    bltu a5,s1,ffffffff84014b72 <decodeSetSchedParams+0xd6>
    0x84014af0    0x54    li a1,2
    0x84014af2    0x56    jal ra,ffffffff840122d8 <setThreadState>
    0x84014af6    0x5a    ld a5,64(sp)          ; stack access
    0x84014af8    0x5c    slli a0,a5,0x19
    0x84014afc    0x60    srli a0,a0,0x19
    0x84014afe    0x62    slli a4,a5,0x19
    0x84014b02    0x66    bgez a4,ffffffff84014b0c <decodeSetSchedParams+0x70>
    0x84014b06    0x6a    li a5,-1
    0x84014b08    0x6c    slli a5,a5,0x27
    0x84014b0a    0x6e    or a0,a0,a5
    0x84014b0c    0x70    li a5,9
    0x84014b0e    0x72    sd a5,56(sp)          ; stack access
    0x84014b10    0x74    sd zero,48(sp)        ; stack access
    0x84014b12    0x76    sd zero,32(sp)        ; stack access
    0x84014b14    0x78    sd zero,40(sp)        ; stack access
    0x84014b16    0x7a    sd zero,24(sp)        ; stack access
    0x84014b18    0x7c    sd zero,16(sp)        ; stack access
    0x84014b1a    0x7e    sd zero,0(sp)         ; stack access
    0x84014b1c    0x80    sd zero,8(sp)         ; stack access
    0x84014b1e    0x82    li a7,0
    0x84014b20    0x84    li a5,0
    0x84014b22    0x86    li a6,0
    0x84014b24    0x88    mv a4,s1
    0x84014b26    0x8a    mv a3,s0
    0x84014b28    0x8c    li a2,0
    0x84014b2a    0x8e    li a1,0
    0x84014b2c    0x90    jal ra,ffffffff840145da <invokeTCB_ThreadControl>
    0x84014b30    0x94    j ffffffff84014b52 <decodeSetSchedParams+0xb6>
    0x84014b32    0x96    li a5,7
    0x84014b34    0x98    auipc a4,0x9
    0x84014b38    0x9c    sd a5,324(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014b3c    0xa0    li a0,3
    0x84014b3e    0xa2    j ffffffff84014b52 <decodeSetSchedParams+0xb6>
    0x84014b40    0xa4    auipc a5,0x9
    0x84014b44    0xa8    addi a5,a5,264 # ffffffff8401dc48 <current_syscall_error>
    0x84014b48    0xac    li a4,2
    0x84014b4a    0xae    sd a4,48(a5)
    0x84014b4c    0xb0    li a4,1
    0x84014b4e    0xb2    sd a4,8(a5)
    0x84014b50    0xb4    li a0,3
    0x84014b52    0xb6    ld ra,120(sp)         ; stack access
    0x84014b54    0xb8    ld s0,112(sp)         ; stack access
    0x84014b56    0xba    ld s1,104(sp)         ; stack access
    0x84014b58    0xbc    addi sp,sp,128
    0x84014b5a    0xbe    ret
    0x84014b5c    0xc0    auipc a4,0x9
    0x84014b60    0xc4    addi a4,a4,236 # ffffffff8401dc48 <current_syscall_error>
    0x84014b64    0xc8    li a3,4
    0x84014b66    0xca    sd a3,48(a4)
    0x84014b68    0xcc    sd zero,16(a4)
    0x84014b6c    0xd0    sd a5,24(a4)
    0x84014b6e    0xd2    li a0,3
    0x84014b70    0xd4    j ffffffff84014b52 <decodeSetSchedParams+0xb6>
    0x84014b72    0xd6    auipc a4,0x9
    0x84014b76    0xda    addi a4,a4,214 # ffffffff8401dc48 <current_syscall_error>
    0x84014b7a    0xde    li a3,4
    0x84014b7c    0xe0    sd a3,48(a4)
    0x84014b7e    0xe2    sd zero,16(a4)
    0x84014b82    0xe6    sd a5,24(a4)
    0x84014b84    0xe8    li a0,3
    0x84014b86    0xea    j ffffffff84014b52 <decodeSetSchedParams+0xb6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
90 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 139 nodes.

Section decodeSetMCPriority (180 of 266)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 77 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x840149d4     0x0    addi sp,sp,-112
    0x840149d6     0x2    sd ra,104(sp)         ; stack access
    0x840149d8     0x4    sd s0,96(sp)          ; stack access
    0x840149da     0x6    sd a0,64(sp)          ; stack access
    0x840149dc     0x8    sd a1,72(sp)          ; stack access
    0x840149de     0xa    beqz a2,ffffffff84014a5e <decodeSetMCPriority+0x8a>
    0x840149e0     0xc    auipc a5,0x9
    0x840149e4    0x10    ld a5,672(a5) # ffffffff8401dc80 <current_extra_caps>
    0x840149e8    0x14    beqz a5,ffffffff84014a5e <decodeSetMCPriority+0x8a>
    0x840149ea    0x16    ld a4,0(a5)
    0x840149ec    0x18    srli a3,a4,0x3b
    0x840149f0    0x1c    li a5,12
    0x840149f2    0x1e    bne a3,a5,ffffffff84014a72 <decodeSetMCPriority+0x9e>
    0x840149f6    0x22    slli a5,a4,0x19
    0x840149fa    0x26    srli a5,a5,0x19
    0x840149fc    0x28    slli a3,a4,0x19
    0x84014a00    0x2c    bgez a3,ffffffff84014a0a <decodeSetMCPriority+0x36>
    0x84014a04    0x30    li a4,-1
    0x84014a06    0x32    slli a4,a4,0x27
    0x84014a08    0x34    or a5,a5,a4
    0x84014a0a    0x36    auipc a0,0x1a
    0x84014a0e    0x3a    ld a0,142(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014a12    0x3e    ld s0,88(a0)
    0x84014a14    0x40    ld a5,352(a5)
    0x84014a18    0x44    bltu a5,s0,ffffffff84014a86 <decodeSetMCPriority+0xb2>
    0x84014a1c    0x48    li a1,2
    0x84014a1e    0x4a    jal ra,ffffffff840122d8 <setThreadState>
    0x84014a22    0x4e    ld a5,64(sp)          ; stack access
    0x84014a24    0x50    slli a0,a5,0x19
    0x84014a28    0x54    srli a0,a0,0x19
    0x84014a2a    0x56    slli a4,a5,0x19
    0x84014a2e    0x5a    bgez a4,ffffffff84014a38 <decodeSetMCPriority+0x64>
    0x84014a32    0x5e    li a5,-1
    0x84014a34    0x60    slli a5,a5,0x27
    0x84014a36    0x62    or a0,a0,a5
    0x84014a38    0x64    li a5,8
    0x84014a3a    0x66    sd a5,56(sp)          ; stack access
    0x84014a3c    0x68    sd zero,48(sp)        ; stack access
    0x84014a3e    0x6a    sd zero,32(sp)        ; stack access
    0x84014a40    0x6c    sd zero,40(sp)        ; stack access
    0x84014a42    0x6e    sd zero,24(sp)        ; stack access
    0x84014a44    0x70    sd zero,16(sp)        ; stack access
    0x84014a46    0x72    sd zero,0(sp)         ; stack access
    0x84014a48    0x74    sd zero,8(sp)         ; stack access
    0x84014a4a    0x76    li a7,0
    0x84014a4c    0x78    li a5,0
    0x84014a4e    0x7a    li a6,0
    0x84014a50    0x7c    li a4,0
    0x84014a52    0x7e    mv a3,s0
    0x84014a54    0x80    li a2,0
    0x84014a56    0x82    li a1,0
    0x84014a58    0x84    jal ra,ffffffff840145da <invokeTCB_ThreadControl>
    0x84014a5c    0x88    j ffffffff84014a6a <decodeSetMCPriority+0x96>
    0x84014a5e    0x8a    li a5,7
    0x84014a60    0x8c    auipc a4,0x9
    0x84014a64    0x90    sd a5,536(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014a68    0x94    li a0,3
    0x84014a6a    0x96    ld ra,104(sp)         ; stack access
    0x84014a6c    0x98    ld s0,96(sp)          ; stack access
    0x84014a6e    0x9a    addi sp,sp,112
    0x84014a70    0x9c    ret
    0x84014a72    0x9e    auipc a5,0x9
    0x84014a76    0xa2    addi a5,a5,470 # ffffffff8401dc48 <current_syscall_error>
    0x84014a7a    0xa6    li a4,2
    0x84014a7c    0xa8    sd a4,48(a5)
    0x84014a7e    0xaa    li a4,1
    0x84014a80    0xac    sd a4,8(a5)
    0x84014a82    0xae    li a0,3
    0x84014a84    0xb0    j ffffffff84014a6a <decodeSetMCPriority+0x96>
    0x84014a86    0xb2    auipc a4,0x9
    0x84014a8a    0xb6    addi a4,a4,450 # ffffffff8401dc48 <current_syscall_error>
    0x84014a8e    0xba    li a3,4
    0x84014a90    0xbc    sd a3,48(a4)
    0x84014a92    0xbe    sd zero,16(a4)
    0x84014a96    0xc2    sd a5,24(a4)
    0x84014a98    0xc4    li a0,3
    0x84014a9a    0xc6    j ffffffff84014a6a <decodeSetMCPriority+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 118 nodes.

Section decodeSetPriority (181 of 266)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 77 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeSetPriority`:

    0x8401490c     0x0    addi sp,sp,-112
    0x8401490e     0x2    sd ra,104(sp)         ; stack access
    0x84014910     0x4    sd s0,96(sp)          ; stack access
    0x84014912     0x6    sd a0,64(sp)          ; stack access
    0x84014914     0x8    sd a1,72(sp)          ; stack access
    0x84014916     0xa    beqz a2,ffffffff84014996 <decodeSetPriority+0x8a>
    0x84014918     0xc    auipc a5,0x9
    0x8401491c    0x10    ld a5,872(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84014920    0x14    beqz a5,ffffffff84014996 <decodeSetPriority+0x8a>
    0x84014922    0x16    ld a4,0(a5)
    0x84014924    0x18    srli a3,a4,0x3b
    0x84014928    0x1c    li a5,12
    0x8401492a    0x1e    bne a3,a5,ffffffff840149aa <decodeSetPriority+0x9e>
    0x8401492e    0x22    slli a5,a4,0x19
    0x84014932    0x26    srli a5,a5,0x19
    0x84014934    0x28    slli a3,a4,0x19
    0x84014938    0x2c    bgez a3,ffffffff84014942 <decodeSetPriority+0x36>
    0x8401493c    0x30    li a4,-1
    0x8401493e    0x32    slli a4,a4,0x27
    0x84014940    0x34    or a5,a5,a4
    0x84014942    0x36    auipc a0,0x1a
    0x84014946    0x3a    ld a0,342(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401494a    0x3e    ld s0,88(a0)
    0x8401494c    0x40    ld a5,352(a5)
    0x84014950    0x44    bltu a5,s0,ffffffff840149be <decodeSetPriority+0xb2>
    0x84014954    0x48    li a1,2
    0x84014956    0x4a    jal ra,ffffffff840122d8 <setThreadState>
    0x8401495a    0x4e    ld a5,64(sp)          ; stack access
    0x8401495c    0x50    slli a0,a5,0x19
    0x84014960    0x54    srli a0,a0,0x19
    0x84014962    0x56    slli a4,a5,0x19
    0x84014966    0x5a    bgez a4,ffffffff84014970 <decodeSetPriority+0x64>
    0x8401496a    0x5e    li a5,-1
    0x8401496c    0x60    slli a5,a5,0x27
    0x8401496e    0x62    or a0,a0,a5
    0x84014970    0x64    li a5,1
    0x84014972    0x66    sd a5,56(sp)          ; stack access
    0x84014974    0x68    sd zero,48(sp)        ; stack access
    0x84014976    0x6a    sd zero,32(sp)        ; stack access
    0x84014978    0x6c    sd zero,40(sp)        ; stack access
    0x8401497a    0x6e    sd zero,24(sp)        ; stack access
    0x8401497c    0x70    sd zero,16(sp)        ; stack access
    0x8401497e    0x72    sd zero,0(sp)         ; stack access
    0x84014980    0x74    sd zero,8(sp)         ; stack access
    0x84014982    0x76    li a7,0
    0x84014984    0x78    li a5,0
    0x84014986    0x7a    li a6,0
    0x84014988    0x7c    mv a4,s0
    0x8401498a    0x7e    li a3,0
    0x8401498c    0x80    li a2,0
    0x8401498e    0x82    li a1,0
    0x84014990    0x84    jal ra,ffffffff840145da <invokeTCB_ThreadControl>
    0x84014994    0x88    j ffffffff840149a2 <decodeSetPriority+0x96>
    0x84014996    0x8a    li a5,7
    0x84014998    0x8c    auipc a4,0x9
    0x8401499c    0x90    sd a5,736(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840149a0    0x94    li a0,3
    0x840149a2    0x96    ld ra,104(sp)         ; stack access
    0x840149a4    0x98    ld s0,96(sp)          ; stack access
    0x840149a6    0x9a    addi sp,sp,112
    0x840149a8    0x9c    ret
    0x840149aa    0x9e    auipc a5,0x9
    0x840149ae    0xa2    addi a5,a5,670 # ffffffff8401dc48 <current_syscall_error>
    0x840149b2    0xa6    li a4,2
    0x840149b4    0xa8    sd a4,48(a5)
    0x840149b6    0xaa    li a4,1
    0x840149b8    0xac    sd a4,8(a5)
    0x840149ba    0xae    li a0,3
    0x840149bc    0xb0    j ffffffff840149a2 <decodeSetPriority+0x96>
    0x840149be    0xb2    auipc a4,0x9
    0x840149c2    0xb6    addi a4,a4,650 # ffffffff8401dc48 <current_syscall_error>
    0x840149c6    0xba    li a3,4
    0x840149c8    0xbc    sd a3,48(a4)
    0x840149ca    0xbe    sd zero,16(a4)
    0x840149ce    0xc2    sd a5,24(a4)
    0x840149d0    0xc4    li a0,3
    0x840149d2    0xc6    j ffffffff840149a2 <decodeSetPriority+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 118 nodes.

Section decodeDomainInvocation (182 of 266)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 65 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x84014508     0x0    li a5,29
    0x8401450a     0x2    bne a0,a5,ffffffff8401456a <decodeDomainInvocation+0x62>
    0x8401450e     0x6    beqz a1,ffffffff84014578 <decodeDomainInvocation+0x70>
    0x84014510     0x8    addi sp,sp,-32
    0x84014512     0xa    sd ra,24(sp)          ; stack access
    0x84014514     0xc    sd s0,16(sp)          ; stack access
    0x84014516     0xe    sd s1,8(sp)           ; stack access
    0x84014518    0x10    auipc a0,0x1a
    0x8401451c    0x14    ld a0,1408(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014520    0x18    ld s1,88(a0)
    0x84014522    0x1a    li a5,15
    0x84014524    0x1c    bltu a5,s1,ffffffff84014586 <decodeDomainInvocation+0x7e>
    0x84014528    0x20    auipc a5,0x9
    0x8401452c    0x24    ld a5,1880(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84014530    0x28    beqz a5,ffffffff8401459a <decodeDomainInvocation+0x92>
    0x84014532    0x2a    ld s0,0(a5)
    0x84014534    0x2c    srli a4,s0,0x3b
    0x84014538    0x30    li a5,12
    0x8401453a    0x32    bne a4,a5,ffffffff840145a8 <decodeDomainInvocation+0xa0>
    0x8401453e    0x36    li a1,2
    0x84014540    0x38    jal ra,ffffffff840122d8 <setThreadState>
    0x84014544    0x3c    slli a0,s0,0x19
    0x84014548    0x40    srli a0,a0,0x19
    0x8401454a    0x42    slli a5,s0,0x19
    0x8401454e    0x46    bgez a5,ffffffff84014558 <decodeDomainInvocation+0x50>
    0x84014552    0x4a    li a5,-1
    0x84014554    0x4c    slli a5,a5,0x27
    0x84014556    0x4e    or a0,a0,a5
    0x84014558    0x50    mv a1,s1
    0x8401455a    0x52    jal ra,ffffffff84012a5a <setDomain>
    0x8401455e    0x56    li a0,0
    0x84014560    0x58    ld ra,24(sp)          ; stack access
    0x84014562    0x5a    ld s0,16(sp)          ; stack access
    0x84014564    0x5c    ld s1,8(sp)           ; stack access
    0x84014566    0x5e    addi sp,sp,32
    0x84014568    0x60    ret
    0x8401456a    0x62    li a5,3
    0x8401456c    0x64    auipc a4,0x9
    0x84014570    0x68    sd a5,1804(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014574    0x6c    li a0,3
    0x84014576    0x6e    ret
    0x84014578    0x70    li a5,7
    0x8401457a    0x72    auipc a4,0x9
    0x8401457e    0x76    sd a5,1790(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014582    0x7a    li a0,3
    0x84014584    0x7c    ret
    0x84014586    0x7e    auipc a5,0x9
    0x8401458a    0x82    addi a5,a5,1730 # ffffffff8401dc48 <current_syscall_error>
    0x8401458e    0x86    li a4,1
    0x84014590    0x88    sd a4,48(a5)
    0x84014592    0x8a    sd zero,0(a5)
    0x84014596    0x8e    li a0,3
    0x84014598    0x90    j ffffffff84014560 <decodeDomainInvocation+0x58>
    0x8401459a    0x92    li a5,7
    0x8401459c    0x94    auipc a4,0x9
    0x840145a0    0x98    sd a5,1756(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840145a4    0x9c    li a0,3
    0x840145a6    0x9e    j ffffffff84014560 <decodeDomainInvocation+0x58>
    0x840145a8    0xa0    auipc a5,0x9
    0x840145ac    0xa4    addi a5,a5,1696 # ffffffff8401dc48 <current_syscall_error>
    0x840145b0    0xa8    li a4,1
    0x840145b2    0xaa    sd a4,48(a5)
    0x840145b4    0xac    sd a4,0(a5)
    0x840145b6    0xae    li a0,3
    0x840145b8    0xb0    j ffffffff84014560 <decodeDomainInvocation+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 99 nodes.

Section handleFault (183 of 266)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 14 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleFault`:

    0x840140f4     0x0    addi sp,sp,-16
    0x840140f6     0x2    sd ra,8(sp)           ; stack access
    0x840140f8     0x4    sd s0,0(sp)           ; stack access
    0x840140fa     0x6    mv s0,a0
    0x840140fc     0x8    jal ra,ffffffff8401400a <sendFaultIPC>
    0x84014100     0xc    bnez a0,ffffffff8401410a <handleFault+0x16>
    0x84014102     0xe    ld ra,8(sp)           ; stack access
    0x84014104    0x10    ld s0,0(sp)           ; stack access
    0x84014106    0x12    addi sp,sp,16
    0x84014108    0x14    ret
    0x8401410a    0x16    li a1,0
    0x8401410c    0x18    mv a0,s0
    0x8401410e    0x1a    jal ra,ffffffff840122d8 <setThreadState>
    0x84014112    0x1e    j ffffffff84014102 <handleFault+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 23 nodes.

Section sendFaultIPC (184 of 266)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 83 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `sendFaultIPC`:

    0x8401400a     0x0    addi sp,sp,-80
    0x8401400c     0x2    sd ra,72(sp)          ; stack access
    0x8401400e     0x4    sd s0,64(sp)          ; stack access
    0x84014010     0x6    sd s1,56(sp)          ; stack access
    0x84014012     0x8    sd s2,48(sp)          ; stack access
    0x84014014     0xa    sd s3,40(sp)          ; stack access
    0x84014016     0xc    sd s4,32(sp)          ; stack access
    0x84014018     0xe    mv s0,a0
    0x8401401a    0x10    auipc a5,0xa
    0x8401401e    0x14    addi a5,a5,-1002 # ffffffff8401dc30 <current_lookup_fault>
    0x84014022    0x18    ld s4,0(a5)
    0x84014026    0x1c    ld s3,8(a5)
    0x8401402a    0x20    ld s2,376(a0)
    0x8401402e    0x24    mv a2,s2
    0x84014030    0x26    mv a1,a0
    0x84014032    0x28    addi a0,sp,8
    0x84014034    0x2a    jal ra,ffffffff84011058 <lookupCap>
    0x84014038    0x2e    ld s1,8(sp)           ; stack access
    0x8401403a    0x30    bnez s1,ffffffff840140a4 <sendFaultIPC+0x9a>
    0x8401403c    0x32    ld a5,16(sp)          ; stack access
    0x8401403e    0x34    srli a3,a5,0x3b
    0x84014042    0x38    li a4,4
    0x84014044    0x3a    bne a3,a4,ffffffff840140c2 <sendFaultIPC+0xb8>
    0x84014048    0x3e    slli a4,a5,0x8
    0x8401404c    0x42    bgez a4,ffffffff840140c2 <sendFaultIPC+0xb8>
    0x84014050    0x46    srli a3,a5,0x39
    0x84014054    0x4a    srli a4,a5,0x3a
    0x84014058    0x4e    or a4,a4,a3
    0x8401405a    0x50    andi a4,a4,1
    0x8401405c    0x52    beqz a4,ffffffff840140c2 <sendFaultIPC+0xb8>
    0x8401405e    0x54    ld a2,24(sp)          ; stack access
    0x84014060    0x56    auipc a1,0x8
    0x84014064    0x5a    addi a1,a1,1952 # ffffffff8401c800 <current_fault>
    0x84014068    0x5e    ld a4,0(a1)
    0x8401406a    0x60    sd a4,312(s0)
    0x8401406e    0x64    ld a1,8(a1)
    0x84014070    0x66    sd a1,320(s0)
    0x84014074    0x6a    andi a4,a4,15
    0x84014076    0x6c    li a1,1
    0x84014078    0x6e    beq a4,a1,ffffffff840140b8 <sendFaultIPC+0xae>
    0x8401407c    0x72    slli a6,a5,0x19
    0x84014080    0x76    srli a6,a6,0x19
    0x84014084    0x7a    slli a4,a5,0x19
    0x84014088    0x7e    bgez a4,ffffffff84014094 <sendFaultIPC+0x8a>
    0x8401408c    0x82    li a5,-1
    0x8401408e    0x84    slli a5,a5,0x27
    0x84014090    0x86    or a6,a6,a5
    0x84014094    0x8a    mv a5,s0
    0x84014096    0x8c    li a4,1
    0x84014098    0x8e    andi a3,a3,1
    0x8401409a    0x90    li a1,1
    0x8401409c    0x92    li a0,1
    0x8401409e    0x94    jal ra,ffffffff84013e96 <sendIPC>
    0x840140a2    0x98    j ffffffff840140e2 <sendFaultIPC+0xd8>
    0x840140a4    0x9a    auipc a5,0x8
    0x840140a8    0x9e    addi a5,a5,1884 # ffffffff8401c800 <current_fault>
    0x840140ac    0xa2    li a4,1
    0x840140ae    0xa4    sd a4,0(a5)
    0x840140b0    0xa6    sd s2,8(a5)
    0x840140b4    0xaa    li s1,1
    0x840140b6    0xac    j ffffffff840140e2 <sendFaultIPC+0xd8>
    0x840140b8    0xae    sd s4,328(s0)
    0x840140bc    0xb2    sd s3,336(s0)
    0x840140c0    0xb6    j ffffffff8401407c <sendFaultIPC+0x72>
    0x840140c2    0xb8    auipc a5,0x8
    0x840140c6    0xbc    addi a5,a5,1854 # ffffffff8401c800 <current_fault>
    0x840140ca    0xc0    li a4,1
    0x840140cc    0xc2    sd a4,0(a5)
    0x840140ce    0xc4    sd s2,8(a5)
    0x840140d2    0xc8    auipc a5,0xa
    0x840140d6    0xcc    addi a5,a5,-1186 # ffffffff8401dc30 <current_lookup_fault>
    0x840140da    0xd0    sd a4,0(a5)
    0x840140dc    0xd2    sd zero,8(a5)
    0x840140e0    0xd6    li s1,1
    0x840140e2    0xd8    mv a0,s1
    0x840140e4    0xda    ld ra,72(sp)          ; stack access
    0x840140e6    0xdc    ld s0,64(sp)          ; stack access
    0x840140e8    0xde    ld s1,56(sp)          ; stack access
    0x840140ea    0xe0    ld s2,48(sp)          ; stack access
    0x840140ec    0xe2    ld s3,40(sp)          ; stack access
    0x840140ee    0xe4    ld s4,32(sp)          ; stack access
    0x840140f0    0xe6    addi sp,sp,80
    0x840140f2    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 128 nodes.

Section handleReply (185 of 266)
================================

Deriving specifications
-----------------------

Section `handleReply` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleReply`:

    0x84013e3a     0x0    auipc a0,0x1b
    0x84013e3e     0x4    ld a0,-930(a0) # ffffffff8402ea98 <ksCurThread>
    0x84013e42     0x8    andi a5,a0,-1024
    0x84013e46     0xc    addi a2,a5,96
    0x84013e4a    0x10    ld a3,96(a5)
    0x84013e4c    0x12    srli a5,a3,0x3b
    0x84013e50    0x16    beqz a5,ffffffff84013e76 <handleReply+0x3c>
    0x84013e52    0x18    addi sp,sp,-16
    0x84013e54    0x1a    sd ra,8(sp)           ; stack access
    0x84013e56    0x1c    li a4,8
    0x84013e58    0x1e    bne a5,a4,ffffffff84013e72 <handleReply+0x38>
    0x84013e5c    0x22    andi a5,a3,1
    0x84013e60    0x26    bnez a5,ffffffff84013e72 <handleReply+0x38>
    0x84013e62    0x28    srli a3,a3,0x1
    0x84013e64    0x2a    andi a3,a3,1
    0x84013e66    0x2c    ld a1,8(a2)
    0x84013e68    0x2e    jal ra,ffffffff84013dc6 <doReplyTransfer>
    0x84013e6c    0x32    ld ra,8(sp)           ; stack access
    0x84013e6e    0x34    addi sp,sp,16
    0x84013e70    0x36    ret
    0x84013e72    0x38    jal ra,ffffffff84010224 <halt>
    0x84013e76    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleReply` has 37 nodes.

Section setupCallerCap (186 of 266)
===================================

Deriving specifications
-----------------------

Section `setupCallerCap` consists of 27 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `setupCallerCap`:

    0x84013a86     0x0    addi sp,sp,-48
    0x84013a88     0x2    sd ra,40(sp)          ; stack access
    0x84013a8a     0x4    sd s0,32(sp)          ; stack access
    0x84013a8c     0x6    sd s1,24(sp)          ; stack access
    0x84013a8e     0x8    sd s2,16(sp)          ; stack access
    0x84013a90     0xa    mv s2,a0
    0x84013a92     0xc    mv s1,a1
    0x84013a94     0xe    mv s0,a2
    0x84013a96    0x10    li a1,5
    0x84013a98    0x12    jal ra,ffffffff840122d8 <setThreadState>
    0x84013a9c    0x16    slli s0,s0,0x1
    0x84013a9e    0x18    andi s0,s0,2
    0x84013aa0    0x1a    andi a3,s1,-1024
    0x84013aa4    0x1e    andi a2,s2,-1024
    0x84013aa8    0x22    addi a3,a3,96
    0x84013aac    0x26    addi a2,a2,64
    0x84013ab0    0x2a    li a0,1
    0x84013ab2    0x2c    slli a0,a0,0x3e
    0x84013ab4    0x2e    or a0,a0,s0
    0x84013ab6    0x30    mv a1,s2
    0x84013ab8    0x32    jal ra,ffffffff84011286 <cteInsert>
    0x84013abc    0x36    ld ra,40(sp)          ; stack access
    0x84013abe    0x38    ld s0,32(sp)          ; stack access
    0x84013ac0    0x3a    ld s1,24(sp)          ; stack access
    0x84013ac2    0x3c    ld s2,16(sp)          ; stack access
    0x84013ac4    0x3e    addi sp,sp,48
    0x84013ac6    0x40    ret

Proving inst theorems
---------------------

27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupCallerCap` has 38 nodes.

Section c_handle_interrupt (187 of 266)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x84013a52    0x0    addi sp,sp,-16
    0x84013a54    0x2    sd ra,8(sp)           ; stack access
    0x84013a56    0x4    jal ra,ffffffff84013a04 <handleInterruptEntry>
    0x84013a5a    0x8    jal ra,ffffffff84010182 <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section invokeIRQHandler_SetIRQHandler (188 of 266)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 23 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x8401368a     0x0    addi sp,sp,-48
    0x8401368c     0x2    sd ra,40(sp)          ; stack access
    0x8401368e     0x4    sd s0,32(sp)          ; stack access
    0x84013690     0x6    sd s1,24(sp)          ; stack access
    0x84013692     0x8    sd a1,0(sp)           ; stack access
    0x84013694     0xa    sd a2,8(sp)           ; stack access
    0x84013696     0xc    mv s1,a3
    0x84013698     0xe    slli a0,a0,0x5
    0x8401369a    0x10    auipc s0,0x1b
    0x8401369e    0x14    addi s0,s0,-1690 # ffffffff8402e000 <intStateIRQNode>
    0x840136a2    0x18    add s0,s0,a0
    0x840136a4    0x1a    mv a0,s0
    0x840136a6    0x1c    jal ra,ffffffff84013656 <cteDeleteOne>
    0x840136aa    0x20    mv a3,s0
    0x840136ac    0x22    mv a2,s1
    0x840136ae    0x24    ld a0,0(sp)           ; stack access
    0x840136b0    0x26    ld a1,8(sp)           ; stack access
    0x840136b2    0x28    jal ra,ffffffff84011286 <cteInsert>
    0x840136b6    0x2c    ld ra,40(sp)          ; stack access
    0x840136b8    0x2e    ld s0,32(sp)          ; stack access
    0x840136ba    0x30    ld s1,24(sp)          ; stack access
    0x840136bc    0x32    addi sp,sp,48
    0x840136be    0x34    ret

Proving inst theorems
---------------------

23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 36 nodes.

Section cancelSignal (189 of 266)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 48 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `cancelSignal`:

    0x84012c3a     0x0    addi sp,sp,-48
    0x84012c3c     0x2    sd ra,40(sp)          ; stack access
    0x84012c3e     0x4    sd s0,32(sp)          ; stack access
    0x84012c40     0x6    sd s1,24(sp)          ; stack access
    0x84012c42     0x8    mv s1,a0
    0x84012c44     0xa    mv s0,a1
    0x84012c46     0xc    ld a5,8(a1)
    0x84012c48     0xe    slli a1,a5,0x19
    0x84012c4c    0x12    srli a1,a1,0x19
    0x84012c4e    0x14    slli a4,a5,0x19
    0x84012c52    0x18    bgez a4,ffffffff84012c5c <cancelSignal+0x22>
    0x84012c56    0x1c    li a5,-1
    0x84012c58    0x1e    slli a5,a5,0x27
    0x84012c5a    0x20    or a1,a1,a5
    0x84012c5c    0x22    ld a5,0(s0)
    0x84012c5e    0x24    srli a2,a5,0x19
    0x84012c62    0x28    bgez a5,ffffffff84012c6c <cancelSignal+0x32>
    0x84012c66    0x2c    li a5,-1
    0x84012c68    0x2e    slli a5,a5,0x27
    0x84012c6a    0x30    or a2,a2,a5
    0x84012c6c    0x32    mv a0,s1
    0x84012c6e    0x34    jal ra,ffffffff84012b00 <tcbEPDequeue>
    0x84012c72    0x38    ld a3,8(s0)
    0x84012c74    0x3a    li a4,-1
    0x84012c76    0x3c    slli a5,a4,0x27
    0x84012c7a    0x40    and a3,a3,a5
    0x84012c7c    0x42    srli a4,a4,0x19
    0x84012c7e    0x44    and a4,a4,a0
    0x84012c80    0x46    or a4,a4,a3
    0x84012c82    0x48    sd a4,8(s0)
    0x84012c84    0x4a    ld a5,0(s0)
    0x84012c86    0x4c    slli a5,a5,0x27
    0x84012c88    0x4e    srli a5,a5,0x27
    0x84012c8a    0x50    slli a1,a1,0x19
    0x84012c8c    0x52    or a5,a5,a1
    0x84012c8e    0x54    beqz a0,ffffffff84012ca4 <cancelSignal+0x6a>
    0x84012c90    0x56    sd a5,0(s0)
    0x84012c92    0x58    li a1,0
    0x84012c94    0x5a    mv a0,s1
    0x84012c96    0x5c    jal ra,ffffffff840122d8 <setThreadState>
    0x84012c9a    0x60    ld ra,40(sp)          ; stack access
    0x84012c9c    0x62    ld s0,32(sp)          ; stack access
    0x84012c9e    0x64    ld s1,24(sp)          ; stack access
    0x84012ca0    0x66    addi sp,sp,48
    0x84012ca2    0x68    ret
    0x84012ca4    0x6a    andi a5,a5,-4
    0x84012ca6    0x6c    sd a5,0(s0)
    0x84012ca8    0x6e    j ffffffff84012c92 <cancelSignal+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 70 nodes.

Section switchToThread (190 of 266)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 13 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x84012826     0x0    addi sp,sp,-16
    0x84012828     0x2    sd ra,8(sp)           ; stack access
    0x8401282a     0x4    sd s0,0(sp)           ; stack access
    0x8401282c     0x6    mv s0,a0
    0x8401282e     0x8    jal ra,ffffffff840107a0 <setVMRoot>
    0x84012832     0xc    mv a0,s0
    0x84012834     0xe    jal ra,ffffffff84012770 <tcbSchedDequeue>
    0x84012838    0x12    auipc a5,0x1c
    0x8401283c    0x16    sd s0,608(a5) # ffffffff8402ea98 <ksCurThread>
    0x84012840    0x1a    ld ra,8(sp)           ; stack access
    0x84012842    0x1c    ld s0,0(sp)           ; stack access
    0x84012844    0x1e    addi sp,sp,16
    0x84012846    0x20    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 21 nodes.

Section timerTick (191 of 266)
==============================

Deriving specifications
-----------------------

Section `timerTick` consists of 28 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `timerTick`:

    0x8401271e     0x0    addi sp,sp,-16
    0x84012720     0x2    sd ra,8(sp)           ; stack access
    0x84012722     0x4    auipc a0,0x1c
    0x84012726     0x8    ld a0,886(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401272a     0xc    ld a5,280(a0)
    0x8401272e    0x10    andi a5,a5,15
    0x84012730    0x12    li a4,1
    0x84012732    0x14    bne a5,a4,ffffffff84012744 <timerTick+0x26>
    0x84012736    0x18    ld a5,368(a0)
    0x8401273a    0x1c    bgeu a4,a5,ffffffff8401275a <timerTick+0x3c>
    0x8401273e    0x20    addi a5,a5,-1
    0x84012740    0x22    sd a5,368(a0)
    0x84012744    0x26    auipc a4,0x1b
    0x84012748    0x2a    addi a4,a4,1812 # ffffffff8402de58 <ksDomainTime>
    0x8401274c    0x2e    ld a5,0(a4)
    0x8401274e    0x30    addi a5,a5,-1
    0x84012750    0x32    sd a5,0(a4)
    0x84012752    0x34    beqz a5,ffffffff8401276a <timerTick+0x4c>
    0x84012754    0x36    ld ra,8(sp)           ; stack access
    0x84012756    0x38    addi sp,sp,16
    0x84012758    0x3a    ret
    0x8401275a    0x3c    li a5,5
    0x8401275c    0x3e    sd a5,368(a0)
    0x84012760    0x42    jal ra,ffffffff84012690 <tcbSchedAppend>
    0x84012764    0x46    jal ra,ffffffff84012272 <rescheduleRequired>
    0x84012768    0x4a    j ffffffff84012744 <timerTick+0x26>
    0x8401276a    0x4c    jal ra,ffffffff84012272 <rescheduleRequired>
    0x8401276e    0x50    j ffffffff84012754 <timerTick+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `timerTick` has 47 nodes.

Section possibleSwitchTo (192 of 266)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x840125a2     0x0    addi sp,sp,-16
    0x840125a4     0x2    sd ra,8(sp)           ; stack access
    0x840125a6     0x4    sd s0,0(sp)           ; stack access
    0x840125a8     0x6    mv s0,a0
    0x840125aa     0x8    ld a4,344(a0)
    0x840125ae     0xc    auipc a5,0x1c
    0x840125b2    0x10    ld a5,594(a5) # ffffffff8402e800 <ksCurDomain>
    0x840125b6    0x14    bne a4,a5,ffffffff840125d0 <possibleSwitchTo+0x2e>
    0x840125ba    0x18    auipc a5,0xb
    0x840125be    0x1c    ld a5,1670(a5) # ffffffff8401dc40 <ksSchedulerAction>
    0x840125c2    0x20    beqz a5,ffffffff840125dc <possibleSwitchTo+0x3a>
    0x840125c4    0x22    jal ra,ffffffff84012272 <rescheduleRequired>
    0x840125c8    0x26    mv a0,s0
    0x840125ca    0x28    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x840125ce    0x2c    j ffffffff840125d4 <possibleSwitchTo+0x32>
    0x840125d0    0x2e    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x840125d4    0x32    ld ra,8(sp)           ; stack access
    0x840125d6    0x34    ld s0,0(sp)           ; stack access
    0x840125d8    0x36    addi sp,sp,16
    0x840125da    0x38    ret
    0x840125dc    0x3a    auipc a5,0xb
    0x840125e0    0x3e    sd a0,1636(a5) # ffffffff8401dc40 <ksSchedulerAction>
    0x840125e4    0x42    j ffffffff840125d4 <possibleSwitchTo+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 39 nodes.

Section activateThread (193 of 266)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `activateThread`:

    0x840123c8     0x0    addi sp,sp,-16
    0x840123ca     0x2    sd ra,8(sp)           ; stack access
    0x840123cc     0x4    auipc a0,0x1c
    0x840123d0     0x8    ld a0,1740(a0) # ffffffff8402ea98 <ksCurThread>
    0x840123d4     0xc    ld a5,280(a0)
    0x840123d8    0x10    andi a5,a5,15
    0x840123da    0x12    li a4,2
    0x840123dc    0x14    beq a5,a4,ffffffff840123f0 <activateThread+0x28>
    0x840123e0    0x18    li a4,7
    0x840123e2    0x1a    beq a5,a4,ffffffff840123fe <activateThread+0x36>
    0x840123e6    0x1e    li a4,1
    0x840123e8    0x20    beq a5,a4,ffffffff840123fe <activateThread+0x36>
    0x840123ec    0x24    jal ra,ffffffff84010224 <halt>
    0x840123f0    0x28    ld a5,264(a0)
    0x840123f4    0x2c    sd a5,272(a0)
    0x840123f8    0x30    li a1,1
    0x840123fa    0x32    jal ra,ffffffff840122d8 <setThreadState>
    0x840123fe    0x36    ld ra,8(sp)           ; stack access
    0x84012400    0x38    addi sp,sp,16
    0x84012402    0x3a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 35 nodes.

Section createObject (194 of 266)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 77 instructions.


Stack analysis
---------------

Section `createObject` expects pointer to stack in a0.
7 stack accesses found. Annotated code for `createObject`:

    0x840120b0     0x0    addi sp,sp,-32
    0x840120b2     0x2    sd ra,24(sp)          ; stack access
    0x840120b4     0x4    li a5,4
    0x840120b6     0x6    bltu a5,a0,ffffffff840120d2 <createObject+0x22>
    0x840120ba     0xa    li a5,4
    0x840120bc     0xc    bltu a5,a0,ffffffff84012168 <createObject+0xb8>
    0x840120c0    0x10    slli a0,a0,0x2
    0x840120c2    0x12    auipc a4,0x5
    0x840120c6    0x16    addi a4,a4,1510 # ffffffff840176a8 <ksDomScheduleLength+0x5f0>
    0x840120ca    0x1a    add a0,a0,a4
    0x840120cc    0x1c    lw a5,0(a0)           ; stack access
    0x840120ce    0x1e    add a5,a5,a4
    0x840120d0    0x20    jr a5
    0x840120d2    0x22    jal ra,ffffffff84010e6a <Arch_createObject>
    0x840120d6    0x26    sd a0,0(sp)           ; stack access
    0x840120d8    0x28    sd a1,8(sp)           ; stack access
    0x840120da    0x2a    ld a0,0(sp)           ; stack access
    0x840120dc    0x2c    ld a1,8(sp)           ; stack access
    0x840120de    0x2e    ld ra,24(sp)          ; stack access
    0x840120e0    0x30    addi sp,sp,32
    0x840120e2    0x32    ret
    0x840120e4    0x34    li a5,32
    0x840120e8    0x38    sd a5,768(a1) # fffffffff8000300 <ki_end+0x73fd1300>
    0x840120ec    0x3c    li a5,5
    0x840120ee    0x3e    sd a5,880(a1)
    0x840120f2    0x42    auipc a5,0x1c
    0x840120f6    0x46    ld a5,1806(a5) # ffffffff8402e800 <ksCurDomain>
    0x840120fa    0x4a    sd a5,856(a1)
    0x840120fe    0x4e    addi a1,a1,512
    0x84012102    0x52    slli a1,a1,0x19
    0x84012104    0x54    srli a1,a1,0x19
    0x84012106    0x56    li a5,3
    0x84012108    0x58    slli a5,a5,0x3d
    0x8401210a    0x5a    or a1,a1,a5
    0x8401210c    0x5c    sd a1,0(sp)
    0x8401210e    0x5e    sd zero,8(sp)
    0x84012110    0x60    j ffffffff840120da <createObject+0x2a>
    0x84012112    0x62    slli a1,a1,0x19
    0x84012114    0x64    srli a1,a1,0x19
    0x84012116    0x66    li a5,79
    0x8401211a    0x6a    slli a5,a5,0x37
    0x8401211c    0x6c    or a1,a1,a5
    0x8401211e    0x6e    sd a1,0(sp)
    0x84012120    0x70    sd zero,8(sp)
    0x84012122    0x72    j ffffffff840120da <createObject+0x2a>
    0x84012124    0x74    slli a1,a1,0x19
    0x84012126    0x76    srli a1,a1,0x19
    0x84012128    0x78    li a5,27
    0x8401212a    0x7a    slli a5,a5,0x39
    0x8401212c    0x7c    or a1,a1,a5
    0x8401212e    0x7e    sd a1,0(sp)
    0x84012130    0x80    sd zero,8(sp)
    0x84012132    0x82    j ffffffff840120da <createObject+0x2a>
    0x84012134    0x84    andi a2,a2,63
    0x84012138    0x88    slli a2,a2,0x2f
    0x8401213a    0x8a    slli a1,a1,0x19
    0x8401213c    0x8c    srli a1,a1,0x1a
    0x8401213e    0x8e    or a2,a2,a1
    0x84012140    0x90    li a1,5
    0x84012142    0x92    slli a1,a1,0x3c
    0x84012144    0x94    or a2,a2,a1
    0x84012146    0x96    sd a2,0(sp)
    0x84012148    0x98    sd zero,8(sp)
    0x8401214a    0x9a    j ffffffff840120da <createObject+0x2a>
    0x8401214c    0x9c    slli a1,a1,0x19
    0x8401214e    0x9e    srli a1,a1,0x19
    0x84012150    0xa0    li a5,1
    0x84012152    0xa2    slli a5,a5,0x3c
    0x84012154    0xa4    or a1,a1,a5
    0x84012156    0xa6    sd a1,0(sp)
    0x84012158    0xa8    snez a3,a3
    0x8401215c    0xac    slli a3,a3,0x6
    0x8401215e    0xae    andi a2,a2,63
    0x84012162    0xb2    or a2,a2,a3
    0x84012164    0xb4    sd a2,8(sp)
    0x84012166    0xb6    j ffffffff840120da <createObject+0x2a>
    0x84012168    0xb8    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 106 nodes.

Section maskCapRights (195 of 266)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 101 instructions.


Stack analysis
---------------

Section `maskCapRights` expects pointer to stack in a0.
9 stack accesses found. Annotated code for `maskCapRights`:

    0x84011fa6      0x0    addi sp,sp,-48
    0x84011fa8      0x2    sd ra,40(sp)          ; stack access
    0x84011faa      0x4    sd a1,0(sp)           ; stack access
    0x84011fac      0x6    sd a2,8(sp)           ; stack access
    0x84011fae      0x8    slli a4,a1,0x4
    0x84011fb2      0xc    bltz a4,ffffffff84011fd4 <maskCapRights+0x2e>
    0x84011fb6     0x10    srli a5,a1,0x3b
    0x84011fba     0x14    ld a4,8(sp)           ; stack access
    0x84011fbc     0x16    li a3,20
    0x84011fbe     0x18    bltu a3,a5,ffffffff840120ac <maskCapRights+0x106>
    0x84011fc2     0x1c    slli a5,a5,0x2
    0x84011fc4     0x1e    auipc a3,0x5
    0x84011fc8     0x22    addi a3,a3,1680 # ffffffff84017654 <ksDomScheduleLength+0x59c>
    0x84011fcc     0x26    add a5,a5,a3
    0x84011fce     0x28    lw a5,0(a5)
    0x84011fd0     0x2a    add a5,a5,a3
    0x84011fd2     0x2c    jr a5
    0x84011fd4     0x2e    jal ra,ffffffff84010acc <Arch_maskCapRights>
    0x84011fd8     0x32    sd a0,16(sp)          ; stack access
    0x84011fda     0x34    sd a1,24(sp)          ; stack access
    0x84011fdc     0x36    ld a0,16(sp)          ; stack access
    0x84011fde     0x38    ld a1,24(sp)          ; stack access
    0x84011fe0     0x3a    ld ra,40(sp)          ; stack access
    0x84011fe2     0x3c    addi sp,sp,48
    0x84011fe4     0x3e    ret
    0x84011fe6     0x40    sd a1,16(sp)
    0x84011fe8     0x42    sd a4,24(sp)
    0x84011fea     0x44    j ffffffff84011fdc <maskCapRights+0x36>
    0x84011fec     0x46    srli a5,a1,0x37
    0x84011ff0     0x4a    and a5,a5,a0
    0x84011ff2     0x4c    li a3,1
    0x84011ff4     0x4e    and a5,a5,a3
    0x84011ff6     0x50    slli a5,a5,0x37
    0x84011ff8     0x52    li a2,-1
    0x84011ffa     0x54    slli a6,a2,0x37
    0x84011ffe     0x58    addi a6,a6,-1
    0x84012000     0x5a    and a6,a1,a6
    0x84012004     0x5e    or a5,a5,a6
    0x84012008     0x62    slli a6,a2,0x38
    0x8401200c     0x66    addi a6,a6,-1
    0x8401200e     0x68    and a5,a5,a6
    0x84012012     0x6c    srli a6,a0,0x1
    0x84012016     0x70    srli a7,a1,0x38
    0x8401201a     0x74    and a6,a6,a7
    0x8401201e     0x78    and a6,a3,a6
    0x84012022     0x7c    slli a6,a6,0x38
    0x84012024     0x7e    or a5,a5,a6
    0x84012028     0x82    slli a6,a2,0x39
    0x8401202c     0x86    addi a6,a6,-1
    0x8401202e     0x88    and a5,a5,a6
    0x84012032     0x8c    srli a6,a0,0x2
    0x84012036     0x90    srli a7,a1,0x39
    0x8401203a     0x94    and a6,a6,a7
    0x8401203e     0x98    and a6,a3,a6
    0x84012042     0x9c    slli a6,a6,0x39
    0x84012044     0x9e    or a5,a5,a6
    0x84012048     0xa2    slli a2,a2,0x3a
    0x8401204a     0xa4    addi a2,a2,-1
    0x8401204c     0xa6    and a5,a5,a2
    0x8401204e     0xa8    srli a0,a0,0x3
    0x84012050     0xaa    srli a1,a1,0x3a
    0x84012052     0xac    and a0,a0,a1
    0x84012054     0xae    and a3,a3,a0
    0x84012056     0xb0    slli a3,a3,0x3a
    0x84012058     0xb2    or a5,a5,a3
    0x8401205a     0xb4    sd a5,16(sp)
    0x8401205c     0xb6    sd a4,24(sp)
    0x8401205e     0xb8    j ffffffff84011fdc <maskCapRights+0x36>
    0x84012060     0xba    srli a5,a1,0x39
    0x84012064     0xbe    and a5,a5,a0
    0x84012066     0xc0    li a3,1
    0x84012068     0xc2    and a5,a5,a3
    0x8401206a     0xc4    slli a5,a5,0x39
    0x8401206c     0xc6    li a2,-1
    0x8401206e     0xc8    slli a6,a2,0x39
    0x84012072     0xcc    addi a6,a6,-1
    0x84012074     0xce    and a6,a1,a6
    0x84012078     0xd2    or a5,a5,a6
    0x8401207c     0xd6    slli a2,a2,0x3a
    0x8401207e     0xd8    addi a2,a2,-1
    0x84012080     0xda    and a5,a5,a2
    0x84012082     0xdc    srli a0,a0,0x1
    0x84012084     0xde    srli a1,a1,0x3a
    0x84012086     0xe0    and a0,a0,a1
    0x84012088     0xe2    and a3,a3,a0
    0x8401208a     0xe4    slli a3,a3,0x3a
    0x8401208c     0xe6    or a5,a5,a3
    0x8401208e     0xe8    sd a5,16(sp)
    0x84012090     0xea    sd a4,24(sp)
    0x84012092     0xec    j ffffffff84011fdc <maskCapRights+0x36>
    0x84012094     0xee    srli a5,a0,0x2
    0x84012098     0xf2    srli a0,a1,0x1
    0x8401209c     0xf6    and a5,a5,a0
    0x8401209e     0xf8    slli a5,a5,0x1
    0x840120a0     0xfa    andi a5,a5,2
    0x840120a2     0xfc    andi a1,a1,-3
    0x840120a4     0xfe    or a1,a1,a5
    0x840120a6    0x100    sd a1,16(sp)
    0x840120a8    0x102    sd a4,24(sp)
    0x840120aa    0x104    j ffffffff84011fdc <maskCapRights+0x36>
    0x840120ac    0x106    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 127 nodes.

Section sameObjectAs (196 of 266)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 36 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `sameObjectAs`:

    0x84011e28     0x0    addi sp,sp,-48
    0x84011e2a     0x2    sd ra,40(sp)          ; stack access
    0x84011e2c     0x4    sd a0,16(sp)          ; stack access
    0x84011e2e     0x6    sd a1,24(sp)          ; stack access
    0x84011e30     0x8    sd a2,0(sp)           ; stack access
    0x84011e32     0xa    sd a3,8(sp)           ; stack access
    0x84011e34     0xc    srli a0,a0,0x3b
    0x84011e36     0xe    li a5,2
    0x84011e38    0x10    beq a0,a5,ffffffff84011e7c <sameObjectAs+0x54>
    0x84011e3c    0x14    li a4,14
    0x84011e3e    0x16    beq a0,a4,ffffffff84011e60 <sameObjectAs+0x38>
    0x84011e42    0x1a    andi a0,a0,1
    0x84011e44    0x1c    beqz a0,ffffffff84011e4e <sameObjectAs+0x26>
    0x84011e46    0x1e    slli a4,a2,0x4
    0x84011e4a    0x22    bltz a4,ffffffff84011e6e <sameObjectAs+0x46>
    0x84011e4e    0x26    ld a2,0(sp)           ; stack access
    0x84011e50    0x28    ld a3,8(sp)           ; stack access
    0x84011e52    0x2a    ld a0,16(sp)          ; stack access
    0x84011e54    0x2c    ld a1,24(sp)          ; stack access
    0x84011e56    0x2e    jal ra,ffffffff840118b2 <sameRegionAs>
    0x84011e5a    0x32    ld ra,40(sp)          ; stack access
    0x84011e5c    0x34    addi sp,sp,48
    0x84011e5e    0x36    ret
    0x84011e60    0x38    srli a5,a2,0x3b
    0x84011e64    0x3c    li a4,16
    0x84011e66    0x3e    li a0,0
    0x84011e68    0x40    bne a5,a4,ffffffff84011e4e <sameObjectAs+0x26>
    0x84011e6c    0x44    j ffffffff84011e5a <sameObjectAs+0x32>
    0x84011e6e    0x46    ld a2,0(sp)           ; stack access
    0x84011e70    0x48    ld a3,8(sp)           ; stack access
    0x84011e72    0x4a    ld a0,16(sp)          ; stack access
    0x84011e74    0x4c    ld a1,24(sp)          ; stack access
    0x84011e76    0x4e    jal ra,ffffffff84010d90 <Arch_sameObjectAs>
    0x84011e7a    0x52    j ffffffff84011e5a <sameObjectAs+0x32>
    0x84011e7c    0x54    li a0,0
    0x84011e7e    0x56    j ffffffff84011e5a <sameObjectAs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 63 nodes.

Section deriveCap (197 of 266)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 51 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `deriveCap`:

    0x84011dae     0x0    addi sp,sp,-64
    0x84011db0     0x2    sd ra,56(sp)          ; stack access
    0x84011db2     0x4    sd s0,48(sp)          ; stack access
    0x84011db4     0x6    sd s1,40(sp)          ; stack access
    0x84011db6     0x8    sd s2,32(sp)          ; stack access
    0x84011db8     0xa    sd s3,24(sp)          ; stack access
    0x84011dba     0xc    mv s0,a0
    0x84011dbc     0xe    sd a2,0(sp)           ; stack access
    0x84011dbe    0x10    sd a3,8(sp)           ; stack access
    0x84011dc0    0x12    mv s1,a2
    0x84011dc2    0x14    srli a5,a2,0x3b
    0x84011dc6    0x18    andi s3,a5,1
    0x84011dca    0x1c    bnez s3,ffffffff84011dec <deriveCap+0x3e>
    0x84011dce    0x20    ld s2,8(sp)           ; stack access
    0x84011dd0    0x22    li a4,8
    0x84011dd2    0x24    beq a5,a4,ffffffff84011e1a <deriveCap+0x6c>
    0x84011dd6    0x28    bltu a4,a5,ffffffff84011df2 <deriveCap+0x44>
    0x84011dda    0x2c    li a4,2
    0x84011ddc    0x2e    bne a5,a4,ffffffff84011df8 <deriveCap+0x4a>
    0x84011de0    0x32    mv a0,a1
    0x84011de2    0x34    jal ra,ffffffff84011d6e <ensureNoChildren>
    0x84011de6    0x38    bnez a0,ffffffff84011e20 <deriveCap+0x72>
    0x84011de8    0x3a    mv s3,a0
    0x84011dea    0x3c    j ffffffff84011df8 <deriveCap+0x4a>
    0x84011dec    0x3e    jal ra,ffffffff84010a5e <Arch_deriveCap>
    0x84011df0    0x42    j ffffffff84011e02 <deriveCap+0x54>
    0x84011df2    0x44    addi a5,a5,-14
    0x84011df4    0x46    andi a5,a5,-5
    0x84011df6    0x48    beqz a5,ffffffff84011e12 <deriveCap+0x64>
    0x84011df8    0x4a    sd s3,0(s0)           ; stack access
    0x84011dfc    0x4e    sd s1,8(s0)           ; stack access
    0x84011dfe    0x50    sd s2,16(s0)          ; stack access
    0x84011e02    0x54    mv a0,s0
    0x84011e04    0x56    ld ra,56(sp)          ; stack access
    0x84011e06    0x58    ld s0,48(sp)          ; stack access
    0x84011e08    0x5a    ld s1,40(sp)          ; stack access
    0x84011e0a    0x5c    ld s2,32(sp)          ; stack access
    0x84011e0c    0x5e    ld s3,24(sp)          ; stack access
    0x84011e0e    0x60    addi sp,sp,64
    0x84011e10    0x62    ret
    0x84011e12    0x64    mv s2,a5
    0x84011e14    0x66    mv s1,a5
    0x84011e16    0x68    mv s3,a5
    0x84011e18    0x6a    j ffffffff84011df8 <deriveCap+0x4a>
    0x84011e1a    0x6c    mv s2,s3
    0x84011e1c    0x6e    mv s1,s3
    0x84011e1e    0x70    j ffffffff84011df8 <deriveCap+0x4a>
    0x84011e20    0x72    mv s2,s3
    0x84011e22    0x74    mv s1,s3
    0x84011e24    0x76    mv s3,a0
    0x84011e26    0x78    j ffffffff84011df8 <deriveCap+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 82 nodes.

Section sameRegionAs (198 of 266)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 378 instructions.

RVC_FTTFT____FFFT_FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `sameRegionAs`:

    0x840118b2      0x0    addi sp,sp,-48
    0x840118b4      0x2    sd ra,40(sp)          ; stack access
    0x840118b6      0x4    sd a0,16(sp)          ; stack access
    0x840118b8      0x6    sd a1,24(sp)          ; stack access
    0x840118ba      0x8    sd a2,0(sp)           ; stack access
    0x840118bc      0xa    sd a3,8(sp)           ; stack access
    0x840118be      0xc    srli a5,a0,0x3b
    0x840118c2     0x10    li a4,20
    0x840118c4     0x12    bltu a4,a5,ffffffff84011cd6 <sameRegionAs+0x424>
    0x840118c8     0x16    mv a6,a0
    0x840118ca     0x18    slli a7,a5,0x2
    0x840118ce     0x1c    auipc t1,0x6
    0x840118d2     0x20    addi t1,t1,-970 # ffffffff84017504 <ksDomScheduleLength+0x44c>
    0x840118d6     0x24    add a7,a7,t1
    0x840118d8     0x26    lw a4,0(a7)
    0x840118dc     0x2a    add a4,a4,t1
    0x840118de     0x2c    jr a4
    0x840118e0     0x2e    srli t1,a2,0x3b
    0x840118e4     0x32    li a5,20
    0x840118e6     0x34    bltu a5,t1,ffffffff840118fe <sameRegionAs+0x4c>
    0x840118ea     0x38    slli a4,t1,0x2
    0x840118ee     0x3c    auipc a0,0x6
    0x840118f2     0x40    addi a0,a0,-918 # ffffffff84017558 <ksDomScheduleLength+0x4a0>
    0x840118f6     0x44    add a4,a4,a0
    0x840118f8     0x46    lw a5,0(a4)
    0x840118fa     0x48    add a5,a5,a0
    0x840118fc     0x4a    jr a5
    0x840118fe     0x4c    li a4,13
    0x84011900     0x4e    bltu a4,t1,ffffffff84011cf2 <sameRegionAs+0x440>
    0x84011904     0x52    li a4,1
    0x84011906     0x54    sll a4,a4,t1
    0x8401190a     0x58    lui a7,0x2
    0x8401190c     0x5a    addi a7,a7,10
    0x8401190e     0x5c    and a4,a4,a7
    0x84011912     0x60    beqz a4,ffffffff84011cf2 <sameRegionAs+0x440>
    0x84011916     0x64    slli a5,a6,0x19
    0x8401191a     0x68    srli a7,a5,0x19
    0x8401191e     0x6c    slli a5,a6,0x19
    0x84011922     0x70    bgez a5,ffffffff8401192e <sameRegionAs+0x7c>
    0x84011926     0x74    li a5,-1
    0x84011928     0x76    slli a5,a5,0x27
    0x8401192a     0x78    or a7,a7,a5
    0x8401192e     0x7c    li a5,20
    0x84011930     0x7e    bltu a5,t1,ffffffff84011a76 <sameRegionAs+0x1c4>
    0x84011934     0x82    slli a4,t1,0x2
    0x84011938     0x86    auipc a0,0x6
    0x8401193c     0x8a    addi a0,a0,-908 # ffffffff840175ac <ksDomScheduleLength+0x4f4>
    0x84011940     0x8e    add a4,a4,a0
    0x84011942     0x90    lw a5,0(a4)
    0x84011944     0x92    add a5,a5,a0
    0x84011946     0x94    jr a5
    0x84011948     0x96    slli a0,a2,0x19
    0x8401194c     0x9a    srli a6,a0,0x19
    0x84011950     0x9e    slli a5,a2,0x19
    0x84011954     0xa2    bgez a5,ffffffff84011960 <sameRegionAs+0xae>
    0x84011958     0xa6    li a5,-1
    0x8401195a     0xa8    slli a5,a5,0x27
    0x8401195c     0xaa    or a6,a6,a5
    0x84011960     0xae    li a4,1
    0x84011962     0xb0    sll a4,a4,a1
    0x84011966     0xb4    addi a4,a4,-1
    0x84011968     0xb6    add a4,a4,a7
    0x8401196a     0xb8    andi a3,a3,63
    0x8401196e     0xbc    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011970     0xbe    slli a0,a2,0x19
    0x84011974     0xc2    srli a6,a0,0x19
    0x84011978     0xc6    slli a5,a2,0x19
    0x8401197c     0xca    bgez a5,ffffffff84011988 <sameRegionAs+0xd6>
    0x84011980     0xce    li a5,-1
    0x84011982     0xd0    slli a5,a5,0x27
    0x84011984     0xd2    or a6,a6,a5
    0x84011988     0xd6    li a4,1
    0x8401198a     0xd8    sll a4,a4,a1
    0x8401198e     0xdc    addi a4,a4,-1
    0x84011990     0xde    add a4,a4,a7
    0x84011992     0xe0    li a3,4
    0x84011994     0xe2    li a0,0
    0x84011996     0xe4    bltu a6,a7,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x8401199a     0xe8    li a5,1
    0x8401199c     0xea    sll a5,a5,a3
    0x840119a0     0xee    addi a3,a6,-1 # ffffffffffefffff <ki_end+0x7bed0fff>
    0x840119a4     0xf2    add a5,a5,a3
    0x840119a6     0xf4    bltu a4,a5,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x840119aa     0xf8    sltu a0,a5,a6
    0x840119ae     0xfc    xori a0,a0,1
    0x840119b2    0x100    sext.w a0,a0
    0x840119b4    0x102    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x840119b6    0x104    slli a0,a2,0x19
    0x840119ba    0x108    srli a6,a0,0x19
    0x840119be    0x10c    slli a5,a2,0x19
    0x840119c2    0x110    bgez a5,ffffffff840119ce <sameRegionAs+0x11c>
    0x840119c6    0x114    li a5,-1
    0x840119c8    0x116    slli a5,a5,0x27
    0x840119ca    0x118    or a6,a6,a5
    0x840119ce    0x11c    li a4,1
    0x840119d0    0x11e    sll a4,a4,a1
    0x840119d4    0x122    addi a4,a4,-1
    0x840119d6    0x124    add a4,a4,a7
    0x840119d8    0x126    li a3,5
    0x840119da    0x128    j ffffffff84011994 <sameRegionAs+0xe2>
    0x840119dc    0x12a    slli a4,a2,0x1
    0x840119e0    0x12e    lui a0,0xfc000
    0x840119e4    0x132    srli a0,a0,0x19
    0x840119e6    0x134    and a6,a4,a0
    0x840119ea    0x138    slli a5,a4,0x19
    0x840119ee    0x13c    bgez a5,ffffffff840119fa <sameRegionAs+0x148>
    0x840119f2    0x140    li a5,-1
    0x840119f4    0x142    slli a5,a5,0x27
    0x840119f6    0x144    or a6,a6,a5
    0x840119fa    0x148    li a4,1
    0x840119fc    0x14a    sll a4,a4,a1
    0x84011a00    0x14e    addi a4,a4,-1
    0x84011a02    0x150    add a4,a4,a7
    0x84011a04    0x152    srli a3,a2,0x2f
    0x84011a08    0x156    andi a3,a3,63
    0x84011a0c    0x15a    addi a3,a3,5
    0x84011a0e    0x15c    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011a10    0x15e    slli a0,a2,0x19
    0x84011a14    0x162    srli a0,a0,0x19
    0x84011a16    0x164    slli a5,a2,0x19
    0x84011a1a    0x168    bgez a5,ffffffff84011a24 <sameRegionAs+0x172>
    0x84011a1e    0x16c    li a5,-1
    0x84011a20    0x16e    slli a5,a5,0x27
    0x84011a22    0x170    or a0,a0,a5
    0x84011a24    0x172    andi a6,a0,-1024
    0x84011a28    0x176    li a4,1
    0x84011a2a    0x178    sll a4,a4,a1
    0x84011a2e    0x17c    addi a4,a4,-1
    0x84011a30    0x17e    add a4,a4,a7
    0x84011a32    0x180    li a3,10
    0x84011a34    0x182    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011a36    0x184    andi a5,a2,127
    0x84011a3a    0x188    li a4,64
    0x84011a3e    0x18c    beq a5,a4,ffffffff84011a72 <sameRegionAs+0x1c0>
    0x84011a42    0x190    andi a5,a2,63
    0x84011a46    0x194    addiw a5,a5,1
    0x84011a48    0x196    li a4,1
    0x84011a4a    0x198    sll a5,a4,a5
    0x84011a4e    0x19c    neg a5,a5
    0x84011a52    0x1a0    and a6,a5,a3
    0x84011a56    0x1a4    sll a4,a4,a1
    0x84011a5a    0x1a8    addi a4,a4,-1
    0x84011a5c    0x1aa    add a4,a4,a7
    0x84011a5e    0x1ac    andi a5,a2,127
    0x84011a62    0x1b0    li a3,64
    0x84011a66    0x1b4    beq a5,a3,ffffffff84011b4c <sameRegionAs+0x29a>
    0x84011a6a    0x1b8    andi a3,a2,63
    0x84011a6e    0x1bc    addi a3,a3,5
    0x84011a70    0x1be    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011a72    0x1c0    li a5,4
    0x84011a74    0x1c2    j ffffffff84011a46 <sameRegionAs+0x194>
    0x84011a76    0x1c4    li a5,3
    0x84011a78    0x1c6    beq t1,a5,ffffffff84011aa4 <sameRegionAs+0x1f2>
    0x84011a7c    0x1ca    li a5,13
    0x84011a7e    0x1cc    beq t1,a5,ffffffff84011abe <sameRegionAs+0x20c>
    0x84011a82    0x1d0    li a5,1
    0x84011a84    0x1d2    li a0,0
    0x84011a86    0x1d4    bne t1,a5,ffffffff84011adc <sameRegionAs+0x22a>
    0x84011a8a    0x1d8    srli a5,a3,0x9
    0x84011a8e    0x1dc    slli a0,a5,0x19
    0x84011a92    0x1e0    srli a0,a0,0x19
    0x84011a94    0x1e2    slli a4,a5,0x19
    0x84011a98    0x1e6    bgez a4,ffffffff84011adc <sameRegionAs+0x22a>
    0x84011a9c    0x1ea    li a5,-1
    0x84011a9e    0x1ec    slli a5,a5,0x27
    0x84011aa0    0x1ee    or a0,a0,a5
    0x84011aa2    0x1f0    j ffffffff84011adc <sameRegionAs+0x22a>
    0x84011aa4    0x1f2    srli a5,a3,0x9
    0x84011aa8    0x1f6    slli a0,a5,0x19
    0x84011aac    0x1fa    srli a0,a0,0x19
    0x84011aae    0x1fc    slli a4,a5,0x19
    0x84011ab2    0x200    bgez a4,ffffffff84011adc <sameRegionAs+0x22a>
    0x84011ab6    0x204    li a5,-1
    0x84011ab8    0x206    slli a5,a5,0x27
    0x84011aba    0x208    or a0,a0,a5
    0x84011abc    0x20a    j ffffffff84011adc <sameRegionAs+0x22a>
    0x84011abe    0x20c    slli a5,a2,0x2
    0x84011ac2    0x210    lui a0,0xf8000
    0x84011ac6    0x214    srli a0,a0,0x19
    0x84011ac8    0x216    and a0,a0,a5
    0x84011aca    0x218    slli a4,a5,0x19
    0x84011ace    0x21c    bgez a4,ffffffff84011adc <sameRegionAs+0x22a>
    0x84011ad2    0x220    li a5,-1
    0x84011ad4    0x222    slli a5,a5,0x27
    0x84011ad6    0x224    or a0,a0,a5
    0x84011ad8    0x226    j ffffffff84011adc <sameRegionAs+0x22a>
    0x84011ada    0x228    li a0,0
    0x84011adc    0x22a    mv a6,a0
    0x84011ade    0x22c    li a4,1
    0x84011ae0    0x22e    sll a1,a4,a1
    0x84011ae4    0x232    addi a4,a1,-1
    0x84011ae8    0x236    add a4,a4,a7
    0x84011aea    0x238    li a5,20
    0x84011aec    0x23a    bltu a5,t1,ffffffff84011b08 <sameRegionAs+0x256>
    0x84011af0    0x23e    slli a5,t1,0x2
    0x84011af4    0x242    auipc a1,0x6
    0x84011af8    0x246    addi a1,a1,-1268 # ffffffff84017600 <ksDomScheduleLength+0x548>
    0x84011afc    0x24a    add a5,a5,a1
    0x84011afe    0x24c    lw a5,0(a5)
    0x84011b00    0x24e    add a5,a5,a1
    0x84011b02    0x250    jr a5
    0x84011b04    0x252    li a3,0
    0x84011b06    0x254    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b08    0x256    li a5,3
    0x84011b0a    0x258    beq t1,a5,ffffffff84011b34 <sameRegionAs+0x282>
    0x84011b0e    0x25c    li a5,13
    0x84011b10    0x25e    beq t1,a5,ffffffff84011b38 <sameRegionAs+0x286>
    0x84011b14    0x262    li a5,1
    0x84011b16    0x264    li a3,0
    0x84011b18    0x266    bne t1,a5,ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b1c    0x26a    srli a5,a2,0x39
    0x84011b20    0x26e    andi a5,a5,3
    0x84011b22    0x270    li a3,1
    0x84011b24    0x272    beq a5,a3,ffffffff84011b3c <sameRegionAs+0x28a>
    0x84011b28    0x276    li a3,2
    0x84011b2a    0x278    beq a5,a3,ffffffff84011b40 <sameRegionAs+0x28e>
    0x84011b2e    0x27c    beqz a5,ffffffff84011b44 <sameRegionAs+0x292>
    0x84011b30    0x27e    jal ra,ffffffff84010224 <halt>
    0x84011b34    0x282    li a3,12
    0x84011b36    0x284    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b38    0x286    li a3,12
    0x84011b3a    0x288    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b3c    0x28a    li a3,21
    0x84011b3e    0x28c    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b40    0x28e    li a3,30
    0x84011b42    0x290    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b44    0x292    li a3,12
    0x84011b46    0x294    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b48    0x296    li a3,4
    0x84011b4a    0x298    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b4c    0x29a    li a3,10
    0x84011b4e    0x29c    j ffffffff84011994 <sameRegionAs+0xe2>
    0x84011b50    0x29e    srli a5,a2,0x3b
    0x84011b54    0x2a2    li a4,4
    0x84011b56    0x2a4    li a0,0
    0x84011b58    0x2a6    bne a5,a4,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011b5c    0x2aa    slli a0,a6,0x19
    0x84011b60    0x2ae    srli a0,a0,0x19
    0x84011b62    0x2b0    slli a5,a6,0x19
    0x84011b66    0x2b4    bgez a5,ffffffff84011b70 <sameRegionAs+0x2be>
    0x84011b6a    0x2b8    li a5,-1
    0x84011b6c    0x2ba    slli a5,a5,0x27
    0x84011b6e    0x2bc    or a0,a0,a5
    0x84011b70    0x2be    slli a4,a2,0x19
    0x84011b74    0x2c2    srli a4,a4,0x19
    0x84011b76    0x2c4    slli a5,a2,0x19
    0x84011b7a    0x2c8    bgez a5,ffffffff84011b84 <sameRegionAs+0x2d2>
    0x84011b7e    0x2cc    li a5,-1
    0x84011b80    0x2ce    slli a5,a5,0x27
    0x84011b82    0x2d0    or a4,a4,a5
    0x84011b84    0x2d2    sub a0,a4,a0
    0x84011b88    0x2d6    seqz a0,a0
    0x84011b8c    0x2da    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011b8e    0x2dc    srli a5,a2,0x3b
    0x84011b92    0x2e0    li a4,6
    0x84011b94    0x2e2    li a0,0
    0x84011b96    0x2e4    bne a5,a4,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011b9a    0x2e8    slli a0,a6,0x19
    0x84011b9e    0x2ec    srli a0,a0,0x19
    0x84011ba0    0x2ee    slli a5,a6,0x19
    0x84011ba4    0x2f2    bgez a5,ffffffff84011bae <sameRegionAs+0x2fc>
    0x84011ba8    0x2f6    li a5,-1
    0x84011baa    0x2f8    slli a5,a5,0x27
    0x84011bac    0x2fa    or a0,a0,a5
    0x84011bae    0x2fc    slli a4,a2,0x19
    0x84011bb2    0x300    srli a4,a4,0x19
    0x84011bb4    0x302    slli a5,a2,0x19
    0x84011bb8    0x306    bgez a5,ffffffff84011bc2 <sameRegionAs+0x310>
    0x84011bbc    0x30a    li a5,-1
    0x84011bbe    0x30c    slli a5,a5,0x27
    0x84011bc0    0x30e    or a4,a4,a5
    0x84011bc2    0x310    sub a0,a4,a0
    0x84011bc6    0x314    seqz a0,a0
    0x84011bca    0x318    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011bcc    0x31a    srli a5,a2,0x3b
    0x84011bd0    0x31e    li a4,10
    0x84011bd2    0x320    li a0,0
    0x84011bd4    0x322    bne a5,a4,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011bd8    0x326    slli a5,a6,0x1
    0x84011bdc    0x32a    lui a4,0xfc000
    0x84011be0    0x32e    srli a4,a4,0x19
    0x84011be2    0x330    and a4,a4,a5
    0x84011be4    0x332    slli a3,a5,0x19
    0x84011be8    0x336    bgez a3,ffffffff84011c18 <sameRegionAs+0x366>
    0x84011bec    0x33a    li a5,-1
    0x84011bee    0x33c    slli a5,a5,0x27
    0x84011bf0    0x33e    or a4,a4,a5
    0x84011bf2    0x340    slli a5,a2,0x1
    0x84011bf6    0x344    lui a3,0xfc000
    0x84011bfa    0x348    srli a3,a3,0x19
    0x84011bfc    0x34a    and a3,a3,a5
    0x84011bfe    0x34c    slli a1,a5,0x19
    0x84011c02    0x350    li a5,0
    0x84011c04    0x352    bgez a1,ffffffff84011c14 <sameRegionAs+0x362>
    0x84011c08    0x356    li a5,-1
    0x84011c0a    0x358    slli a5,a5,0x27
    0x84011c0c    0x35a    or a3,a3,a5
    0x84011c0e    0x35c    li a5,0
    0x84011c10    0x35e    beq a3,a4,ffffffff84011c2e <sameRegionAs+0x37c>
    0x84011c14    0x362    mv a0,a5
    0x84011c16    0x364    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011c18    0x366    slli a5,a2,0x1
    0x84011c1c    0x36a    lui a3,0xfc000
    0x84011c20    0x36e    srli a3,a3,0x19
    0x84011c22    0x370    and a3,a3,a5
    0x84011c24    0x372    slli a1,a5,0x19
    0x84011c28    0x376    bltz a1,ffffffff84011c08 <sameRegionAs+0x356>
    0x84011c2c    0x37a    j ffffffff84011c0e <sameRegionAs+0x35c>
    0x84011c2e    0x37c    srli a5,a2,0x2f
    0x84011c32    0x380    andi a5,a5,63
    0x84011c36    0x384    srli a4,a6,0x2f
    0x84011c3a    0x388    andi a4,a4,63
    0x84011c3e    0x38c    sub a5,a5,a4
    0x84011c40    0x38e    seqz a5,a5
    0x84011c44    0x392    j ffffffff84011c14 <sameRegionAs+0x362>
    0x84011c46    0x394    srli a5,a2,0x3b
    0x84011c4a    0x398    li a4,12
    0x84011c4c    0x39a    li a0,0
    0x84011c4e    0x39c    bne a5,a4,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011c52    0x3a0    slli a0,a6,0x19
    0x84011c56    0x3a4    srli a0,a0,0x19
    0x84011c58    0x3a6    slli a5,a6,0x19
    0x84011c5c    0x3aa    bgez a5,ffffffff84011c66 <sameRegionAs+0x3b4>
    0x84011c60    0x3ae    li a5,-1
    0x84011c62    0x3b0    slli a5,a5,0x27
    0x84011c64    0x3b2    or a0,a0,a5
    0x84011c66    0x3b4    slli a4,a2,0x19
    0x84011c6a    0x3b8    srli a4,a4,0x19
    0x84011c6c    0x3ba    slli a5,a2,0x19
    0x84011c70    0x3be    bgez a5,ffffffff84011c7a <sameRegionAs+0x3c8>
    0x84011c74    0x3c2    li a5,-1
    0x84011c76    0x3c4    slli a5,a5,0x27
    0x84011c78    0x3c6    or a4,a4,a5
    0x84011c7a    0x3c8    sub a0,a4,a0
    0x84011c7e    0x3cc    seqz a0,a0
    0x84011c82    0x3d0    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011c84    0x3d2    srli a5,a2,0x3b
    0x84011c88    0x3d6    li a4,8
    0x84011c8a    0x3d8    li a0,0
    0x84011c8c    0x3da    bne a5,a4,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011c90    0x3de    sub a0,a1,a3
    0x84011c94    0x3e2    seqz a0,a0
    0x84011c98    0x3e6    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011c9a    0x3e8    srli a0,a2,0x3b
    0x84011c9e    0x3ec    addi a0,a0,-20
    0x84011ca0    0x3ee    seqz a0,a0
    0x84011ca4    0x3f2    ld ra,40(sp)          ; stack access
    0x84011ca6    0x3f4    addi sp,sp,48
    0x84011ca8    0x3f6    ret
    0x84011caa    0x3f8    srli a0,a2,0x3b
    0x84011cae    0x3fc    addi a0,a0,-14
    0x84011cb0    0x3fe    andi a0,a0,-3
    0x84011cb2    0x400    seqz a0,a0
    0x84011cb6    0x404    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011cb8    0x406    srli a5,a2,0x3b
    0x84011cbc    0x40a    li a4,16
    0x84011cbe    0x40c    li a0,0
    0x84011cc0    0x40e    bne a5,a4,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011cc4    0x412    lui a5,0x1
    0x84011cc6    0x414    addi a5,a5,-1
    0x84011cc8    0x416    and a0,a3,a5
    0x84011ccc    0x41a    and a1,a1,a5
    0x84011cce    0x41c    sub a0,a0,a1
    0x84011cd0    0x41e    seqz a0,a0
    0x84011cd4    0x422    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011cd6    0x424    andi a0,a5,1
    0x84011cda    0x428    beqz a0,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011cdc    0x42a    srli a0,a2,0x3b
    0x84011ce0    0x42e    andi a0,a0,1
    0x84011ce2    0x430    beqz a0,ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011ce4    0x432    ld a2,0(sp)           ; stack access
    0x84011ce6    0x434    ld a3,8(sp)           ; stack access
    0x84011ce8    0x436    ld a0,16(sp)          ; stack access
    0x84011cea    0x438    ld a1,24(sp)          ; stack access
    0x84011cec    0x43a    jal ra,ffffffff84010c26 <Arch_sameRegionAs>
    0x84011cf0    0x43e    j ffffffff84011ca4 <sameRegionAs+0x3f2>
    0x84011cf2    0x440    li a0,0
    0x84011cf4    0x442    j ffffffff84011ca4 <sameRegionAs+0x3f2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
378 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 491 nodes.

Section getObjectSize (199 of 266)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 28 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `getObjectSize`:

    0x84011838     0x0    addi sp,sp,-16
    0x8401183a     0x2    sd ra,8(sp)           ; stack access
    0x8401183c     0x4    li a5,4
    0x8401183e     0x6    bltu a5,a0,ffffffff8401185c <getObjectSize+0x24>
    0x84011842     0xa    li a5,4
    0x84011844     0xc    bltu a5,a0,ffffffff84011874 <getObjectSize+0x3c>
    0x84011848    0x10    slli a0,a0,0x2
    0x8401184a    0x12    auipc a4,0x6
    0x8401184e    0x16    addi a4,a4,-858 # ffffffff840174f0 <ksDomScheduleLength+0x438>
    0x84011852    0x1a    add a5,a0,a4
    0x84011856    0x1e    lw a5,0(a5)
    0x84011858    0x20    add a5,a5,a4
    0x8401185a    0x22    jr a5
    0x8401185c    0x24    jal ra,ffffffff84010e38 <Arch_getObjectSize>
    0x84011860    0x28    ld ra,8(sp)           ; stack access
    0x84011862    0x2a    addi sp,sp,16
    0x84011864    0x2c    ret
    0x84011866    0x2e    li a0,4
    0x84011868    0x30    j ffffffff84011860 <getObjectSize+0x28>
    0x8401186a    0x32    addi a0,a1,5 # fffffffff8000005 <ki_end+0x73fd1005>
    0x8401186e    0x36    j ffffffff84011860 <getObjectSize+0x28>
    0x84011870    0x38    mv a0,a1
    0x84011872    0x3a    j ffffffff84011860 <getObjectSize+0x28>
    0x84011874    0x3c    jal ra,ffffffff84010224 <halt>
    0x84011878    0x40    li a0,10
    0x8401187a    0x42    j ffffffff84011860 <getObjectSize+0x28>
    0x8401187c    0x44    li a0,5
    0x8401187e    0x46    j ffffffff84011860 <getObjectSize+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 39 nodes.

Section invokeIRQControl (200 of 266)
=====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 25 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `invokeIRQControl`:

    0x840116fc     0x0    addi sp,sp,-48
    0x840116fe     0x2    sd ra,40(sp)          ; stack access
    0x84011700     0x4    sd s0,32(sp)          ; stack access
    0x84011702     0x6    sd s1,24(sp)          ; stack access
    0x84011704     0x8    sd s2,16(sp)          ; stack access
    0x84011706     0xa    mv s0,a0
    0x84011708     0xc    mv s2,a1
    0x8401170a     0xe    mv s1,a2
    0x8401170c    0x10    mv a1,a0
    0x8401170e    0x12    li a0,1
    0x84011710    0x14    jal ra,ffffffff84011696 <setIRQState>
    0x84011714    0x18    slli s0,s0,0x34
    0x84011716    0x1a    mv a3,s2
    0x84011718    0x1c    mv a2,s1
    0x8401171a    0x1e    li a0,-1
    0x8401171c    0x20    slli a0,a0,0x3f
    0x8401171e    0x22    srli a1,s0,0x34
    0x84011722    0x26    jal ra,ffffffff84011286 <cteInsert>
    0x84011726    0x2a    li a0,0
    0x84011728    0x2c    ld ra,40(sp)          ; stack access
    0x8401172a    0x2e    ld s0,32(sp)          ; stack access
    0x8401172c    0x30    ld s1,24(sp)          ; stack access
    0x8401172e    0x32    ld s2,16(sp)          ; stack access
    0x84011730    0x34    addi sp,sp,48
    0x84011732    0x36    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 36 nodes.

Section getReceiveSlots (201 of 266)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 38 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

13 stack accesses found. Annotated code for `getReceiveSlots`:

    0x840115fc     0x0    beqz a1,ffffffff84011650 <getReceiveSlots+0x54>
    0x840115fe     0x2    addi sp,sp,-96
    0x84011600     0x4    sd ra,88(sp)          ; stack access
    0x84011602     0x6    sd s0,80(sp)          ; stack access
    0x84011604     0x8    sd s1,72(sp)          ; stack access
    0x84011606     0xa    ld s0,1008(a1) # fffffffff80003f0 <ki_end+0x73fd13f0>
    0x8401160a     0xe    ld s1,1016(a1)
    0x8401160e    0x12    ld a2,1000(a1)
    0x84011612    0x16    mv a1,a0
    0x84011614    0x18    addi a0,sp,40
    0x84011616    0x1a    jal ra,ffffffff84011058 <lookupCap>
    0x8401161a    0x1e    ld a5,40(sp)          ; stack access
    0x8401161c    0x20    li a0,0
    0x8401161e    0x22    bnez a5,ffffffff84011646 <getReceiveSlots+0x4a>
    0x84011620    0x24    ld a0,48(sp)          ; stack access
    0x84011622    0x26    sd a0,8(sp)           ; stack access
    0x84011624    0x28    ld a1,56(sp)          ; stack access
    0x84011626    0x2a    sd a1,16(sp)          ; stack access
    0x84011628    0x2c    mv a3,s1
    0x8401162a    0x2e    mv a2,s0
    0x8401162c    0x30    jal ra,ffffffff840111b6 <lookupTargetSlot>
    0x84011630    0x34    sd a0,24(sp)          ; stack access
    0x84011632    0x36    sd a1,32(sp)          ; stack access
    0x84011634    0x38    bnez a0,ffffffff84011654 <getReceiveSlots+0x58>
    0x84011636    0x3a    ld a5,0(a1)
    0x84011638    0x3c    srli a5,a5,0x3b
    0x8401163a    0x3e    seqz a5,a5
    0x8401163e    0x42    neg a5,a5
    0x84011642    0x46    and a0,a1,a5
    0x84011646    0x4a    ld ra,88(sp)          ; stack access
    0x84011648    0x4c    ld s0,80(sp)          ; stack access
    0x8401164a    0x4e    ld s1,72(sp)          ; stack access
    0x8401164c    0x50    addi sp,sp,96
    0x8401164e    0x52    ret
    0x84011650    0x54    mv a0,a1
    0x84011652    0x56    ret
    0x84011654    0x58    li a0,0
    0x84011656    0x5a    j ffffffff84011646 <getReceiveSlots+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 65 nodes.

Section invokeCNodeRotate (202 of 266)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 32 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x84011500     0x0    addi sp,sp,-64
    0x84011502     0x2    sd ra,56(sp)          ; stack access
    0x84011504     0x4    sd s0,48(sp)          ; stack access
    0x84011506     0x6    sd s1,40(sp)          ; stack access
    0x84011508     0x8    sd a0,16(sp)          ; stack access
    0x8401150a     0xa    sd a1,24(sp)          ; stack access
    0x8401150c     0xc    sd a2,0(sp)           ; stack access
    0x8401150e     0xe    sd a3,8(sp)           ; stack access
    0x84011510    0x10    mv s0,a4
    0x84011512    0x12    mv s1,a5
    0x84011514    0x14    beq a4,a6,ffffffff8401153c <invokeCNodeRotate+0x3c>
    0x84011518    0x18    mv a3,a6
    0x8401151a    0x1a    mv a2,a5
    0x8401151c    0x1c    ld a0,0(sp)           ; stack access
    0x8401151e    0x1e    ld a1,8(sp)           ; stack access
    0x84011520    0x20    jal ra,ffffffff840113c4 <cteMove>
    0x84011524    0x24    mv a3,s1
    0x84011526    0x26    mv a2,s0
    0x84011528    0x28    ld a0,16(sp)          ; stack access
    0x8401152a    0x2a    ld a1,24(sp)          ; stack access
    0x8401152c    0x2c    jal ra,ffffffff840113c4 <cteMove>
    0x84011530    0x30    li a0,0
    0x84011532    0x32    ld ra,56(sp)          ; stack access
    0x84011534    0x34    ld s0,48(sp)          ; stack access
    0x84011536    0x36    ld s1,40(sp)          ; stack access
    0x84011538    0x38    addi sp,sp,64
    0x8401153a    0x3a    ret
    0x8401153c    0x3c    mv a3,a2
    0x8401153e    0x3e    ld a4,8(sp)           ; stack access
    0x84011540    0x40    mv a2,s0
    0x84011542    0x42    jal ra,ffffffff84011472 <cteSwap>
    0x84011546    0x46    j ffffffff84011530 <invokeCNodeRotate+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 53 nodes.

Section invokeCNodeSaveCaller (203 of 266)
==========================================

Deriving specifications
-----------------------

Section `invokeCNodeSaveCaller` consists of 25 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `invokeCNodeSaveCaller`:

    0x8401142e     0x0    addi sp,sp,-32
    0x84011430     0x2    sd ra,24(sp)          ; stack access
    0x84011432     0x4    mv a3,a0
    0x84011434     0x6    auipc a5,0x1d
    0x84011438     0xa    ld a5,1636(a5) # ffffffff8402ea98 <ksCurThread>
    0x8401143c     0xe    andi a5,a5,-1024
    0x84011440    0x12    addi a2,a5,96
    0x84011444    0x16    ld a0,96(a5)
    0x84011446    0x18    sd a0,0(sp)           ; stack access
    0x84011448    0x1a    ld a5,8(a2)
    0x8401144a    0x1c    sd a5,8(sp)           ; stack access
    0x8401144c    0x1e    srli a5,a0,0x3b
    0x84011450    0x22    beqz a5,ffffffff8401145e <invokeCNodeSaveCaller+0x30>
    0x84011452    0x24    li a4,8
    0x84011454    0x26    bne a5,a4,ffffffff8401146e <invokeCNodeSaveCaller+0x40>
    0x84011458    0x2a    andi a5,a0,1
    0x8401145c    0x2e    beqz a5,ffffffff84011466 <invokeCNodeSaveCaller+0x38>
    0x8401145e    0x30    li a0,0
    0x84011460    0x32    ld ra,24(sp)          ; stack access
    0x84011462    0x34    addi sp,sp,32
    0x84011464    0x36    ret
    0x84011466    0x38    ld a1,8(sp)           ; stack access
    0x84011468    0x3a    jal ra,ffffffff840113c4 <cteMove>
    0x8401146c    0x3e    j ffffffff8401145e <invokeCNodeSaveCaller+0x30>
    0x8401146e    0x40    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeSaveCaller` has 42 nodes.

Section handleFaultReply (204 of 266)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 123 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `handleFaultReply`:

    0x84010450      0x0    addi sp,sp,-48
    0x84010452      0x2    sd ra,40(sp)          ; stack access
    0x84010454      0x4    sd s0,32(sp)          ; stack access
    0x84010456      0x6    sd s1,24(sp)          ; stack access
    0x84010458      0x8    sd s2,16(sp)          ; stack access
    0x8401045a      0xa    sd s3,8(sp)           ; stack access
    0x8401045c      0xc    mv s0,a0
    0x8401045e      0xe    ld a4,80(a1)
    0x84010460     0x10    andi a3,a4,127
    0x84010464     0x14    li a5,120
    0x84010468     0x18    bgeu a5,a3,ffffffff84010474 <handleFaultReply+0x24>
    0x8401046c     0x1c    andi a4,a4,-128
    0x84010470     0x20    ori a4,a4,120
    0x84010474     0x24    srli s1,a4,0xc
    0x84010478     0x28    andi a6,a4,127
    0x8401047c     0x2c    ld a5,312(s0) # 1138 <KERNEL_OFFSET-0xfffffffeffffeec8>
    0x84010480     0x30    andi a0,a5,15
    0x84010484     0x34    li a5,2
    0x84010486     0x36    beq a0,a5,ffffffff840104a0 <handleFaultReply+0x50>
    0x8401048a     0x3a    li a5,3
    0x8401048c     0x3c    beq a0,a5,ffffffff84010532 <handleFaultReply+0xe2>
    0x84010490     0x40    li a5,1
    0x84010492     0x42    beq a0,a5,ffffffff84010524 <handleFaultReply+0xd4>
    0x84010496     0x46    li a5,5
    0x84010498     0x48    bne a0,a5,ffffffff8401059c <handleFaultReply+0x14c>
    0x8401049c     0x4c    li a0,1
    0x8401049e     0x4e    j ffffffff84010524 <handleFaultReply+0xd4>
    0x840104a0     0x50    mv s2,a6
    0x840104a2     0x52    li a5,10
    0x840104a4     0x54    bgeu a5,a6,ffffffff840104aa <handleFaultReply+0x5a>
    0x840104a8     0x58    li s2,10
    0x840104aa     0x5a    mv a7,s2
    0x840104ac     0x5c    li a5,4
    0x840104ae     0x5e    bgeu a5,s2,ffffffff840104b4 <handleFaultReply+0x64>
    0x840104b2     0x62    li a7,4
    0x840104b4     0x64    beqz a6,ffffffff84010520 <handleFaultReply+0xd0>
    0x840104b8     0x68    auipc a0,0x7
    0x840104bc     0x6c    addi a0,a0,1480 # ffffffff84017a80 <fault_messages>
    0x840104c0     0x70    auipc a2,0x7
    0x840104c4     0x74    addi a2,a2,1632 # ffffffff84017b20 <msgRegisters>
    0x840104c8     0x78    li a3,0
    0x840104ca     0x7a    ld a5,0(a0)
    0x840104cc     0x7c    ld a4,0(a2)
    0x840104ce     0x7e    slli a4,a4,0x3
    0x840104d0     0x80    add a4,a4,a1
    0x840104d2     0x82    ld a4,0(a4)
    0x840104d4     0x84    slli a5,a5,0x3
    0x840104d6     0x86    add a5,a5,s0
    0x840104d8     0x88    sd a4,0(a5)
    0x840104da     0x8a    addi a3,a3,1
    0x840104dc     0x8c    addi a0,a0,8
    0x840104de     0x8e    addi a2,a2,8
    0x840104e0     0x90    bltu a3,a7,ffffffff840104ca <handleFaultReply+0x7a>
    0x840104e4     0x94    li a4,1
    0x840104e6     0x96    beqz a6,ffffffff840104ec <handleFaultReply+0x9c>
    0x840104ea     0x9a    mv a4,a7
    0x840104ec     0x9c    mv s3,a4
    0x840104ee     0x9e    bgeu a4,s2,ffffffff84010520 <handleFaultReply+0xd0>
    0x840104f2     0xa2    li a0,0
    0x840104f4     0xa4    jal ra,ffffffff840103be <lookupIPCBuffer>
    0x840104f8     0xa8    beqz a0,ffffffff84010520 <handleFaultReply+0xd0>
    0x840104fa     0xaa    slli a4,s3,0x3
    0x840104fe     0xae    auipc a3,0x7
    0x84010502     0xb2    addi a3,a3,1410 # ffffffff84017a80 <fault_messages>
    0x84010506     0xb6    add a3,a3,a4
    0x84010508     0xb8    add a4,a4,a0
    0x8401050a     0xba    slli s2,s2,0x3
    0x8401050c     0xbc    add s2,s2,a0
    0x8401050e     0xbe    ld a5,0(a3)
    0x84010510     0xc0    ld a2,8(a4)
    0x84010512     0xc2    slli a5,a5,0x3
    0x84010514     0xc4    add a5,a5,s0
    0x84010516     0xc6    sd a2,0(a5)
    0x84010518     0xc8    addi a3,a3,8
    0x8401051a     0xca    addi a4,a4,8
    0x8401051c     0xcc    bne a4,s2,ffffffff8401050e <handleFaultReply+0xbe>
    0x84010520     0xd0    seqz a0,s1
    0x84010524     0xd4    ld ra,40(sp)          ; stack access
    0x84010526     0xd6    ld s0,32(sp)          ; stack access
    0x84010528     0xd8    ld s1,24(sp)          ; stack access
    0x8401052a     0xda    ld s2,16(sp)          ; stack access
    0x8401052c     0xdc    ld s3,8(sp)           ; stack access
    0x8401052e     0xde    addi sp,sp,48
    0x84010530     0xe0    ret
    0x84010532     0xe2    mv s3,a6
    0x84010534     0xe4    li a5,2
    0x84010536     0xe6    bgeu a5,a6,ffffffff8401053c <handleFaultReply+0xec>
    0x8401053a     0xea    li s3,2
    0x8401053c     0xec    mv a3,s3
    0x8401053e     0xee    li a5,4
    0x84010540     0xf0    bgeu a5,s3,ffffffff84010546 <handleFaultReply+0xf6>
    0x84010544     0xf4    li a3,4
    0x84010546     0xf6    beqz a6,ffffffff84010596 <handleFaultReply+0x146>
    0x8401054a     0xfa    ld a5,88(a1)
    0x8401054c     0xfc    sd a5,264(s0)
    0x84010550    0x100    andi a4,a4,126
    0x84010554    0x104    beqz a4,ffffffff8401055a <handleFaultReply+0x10a>
    0x84010556    0x106    ld a5,96(a1)
    0x84010558    0x108    sd a5,8(s0)
    0x8401055a    0x10a    li a5,1
    0x8401055c    0x10c    beqz a6,ffffffff84010562 <handleFaultReply+0x112>
    0x84010560    0x110    mv a5,a3
    0x84010562    0x112    mv s2,a5
    0x84010564    0x114    bgeu a5,s3,ffffffff84010596 <handleFaultReply+0x146>
    0x84010568    0x118    li a0,0
    0x8401056a    0x11a    jal ra,ffffffff840103be <lookupIPCBuffer>
    0x8401056e    0x11e    beqz a0,ffffffff84010596 <handleFaultReply+0x146>
    0x84010570    0x120    slli a5,s2,0x3
    0x84010574    0x124    slli s3,s3,0x3
    0x84010576    0x126    auipc a2,0x7
    0x8401057a    0x12a    addi a2,a2,1290 # ffffffff84017a80 <fault_messages>
    0x8401057e    0x12e    add a4,a2,a5
    0x84010582    0x132    ld a4,80(a4)
    0x84010584    0x134    add a3,a0,a5
    0x84010588    0x138    ld a3,8(a3)
    0x8401058a    0x13a    slli a4,a4,0x3
    0x8401058c    0x13c    add a4,a4,s0
    0x8401058e    0x13e    sd a3,0(a4)
    0x84010590    0x140    addi a5,a5,8
    0x84010592    0x142    bne a5,s3,ffffffff8401057e <handleFaultReply+0x12e>
    0x84010596    0x146    seqz a0,s1
    0x8401059a    0x14a    j ffffffff84010524 <handleFaultReply+0xd4>
    0x8401059c    0x14c    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
123 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 195 nodes.

Section setMRs_fault (205 of 266)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 108 instructions.

LWU..

Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_fault`:

    0x84010274      0x0    ld a3,312(a0)
    0x84010278      0x4    andi a3,a3,15
    0x8401027a      0x6    li a5,2
    0x8401027c      0x8    beq a3,a5,ffffffff8401032a <setMRs_fault+0xb6>
    0x84010280      0xc    li a5,3
    0x84010282      0xe    beq a3,a5,ffffffff84010376 <setMRs_fault+0x102>
    0x84010286     0x12    addi sp,sp,-16
    0x84010288     0x14    sd ra,8(sp)           ; stack access
    0x8401028a     0x16    li a5,1
    0x8401028c     0x18    beq a3,a5,ffffffff8401029a <setMRs_fault+0x26>
    0x84010290     0x1c    jal ra,ffffffff84010242 <Arch_setMRs_fault>
    0x84010294     0x20    ld ra,8(sp)           ; stack access
    0x84010296     0x22    addi sp,sp,16
    0x84010298     0x24    ret
    0x8401029a     0x26    ld a5,264(a0)
    0x8401029e     0x2a    sd a5,88(a1)
    0x840102a0     0x2c    ld a5,320(a0)
    0x840102a4     0x30    sd a5,96(a1)
    0x840102a6     0x32    ld a5,312(a0)
    0x840102aa     0x36    srli a5,a5,0x3f
    0x840102ac     0x38    sd a5,104(a1)
    0x840102ae     0x3a    ld a4,328(a0)
    0x840102b2     0x3e    ld a0,336(a0)
    0x840102b6     0x42    andi a5,a4,3
    0x840102ba     0x46    addi a3,a5,1
    0x840102be     0x4a    sd a3,112(a1)
    0x840102c0     0x4c    li a3,2
    0x840102c2     0x4e    beq a5,a3,ffffffff840102e0 <setMRs_fault+0x6c>
    0x840102c6     0x52    bltu a3,a5,ffffffff840102f8 <setMRs_fault+0x84>
    0x840102ca     0x56    beqz a5,ffffffff84010316 <setMRs_fault+0xa2>
    0x840102cc     0x58    li a3,1
    0x840102ce     0x5a    bne a5,a3,ffffffff84010312 <setMRs_fault+0x9e>
    0x840102d2     0x5e    beqz a2,ffffffff8401031e <setMRs_fault+0xaa>
    0x840102d4     0x60    srli a4,a4,0x2
    0x840102d6     0x62    andi a4,a4,127
    0x840102da     0x66    sd a4,40(a2)
    0x840102dc     0x68    li a0,5
    0x840102de     0x6a    j ffffffff84010318 <setMRs_fault+0xa4>
    0x840102e0     0x6c    beqz a2,ffffffff84010322 <setMRs_fault+0xae>
    0x840102e2     0x6e    srli a5,a4,0x2
    0x840102e6     0x72    andi a5,a5,127
    0x840102ea     0x76    sd a5,40(a2)
    0x840102ec     0x78    srli a4,a4,0x9
    0x840102ee     0x7a    andi a4,a4,127
    0x840102f2     0x7e    sd a4,48(a2)
    0x840102f4     0x80    li a0,6
    0x840102f6     0x82    j ffffffff84010318 <setMRs_fault+0xa4>
    0x840102f8     0x84    beqz a2,ffffffff84010326 <setMRs_fault+0xb2>
    0x840102fa     0x86    srli a5,a4,0x9
    0x840102fe     0x8a    andi a5,a5,127
    0x84010302     0x8e    sd a5,40(a2)
    0x84010304     0x90    sd a0,48(a2)
    0x84010306     0x92    srli a4,a4,0x2
    0x84010308     0x94    andi a4,a4,127
    0x8401030c     0x98    sd a4,56(a2)
    0x8401030e     0x9a    li a0,7
    0x84010310     0x9c    j ffffffff84010318 <setMRs_fault+0xa4>
    0x84010312     0x9e    jal ra,ffffffff84010224 <halt>
    0x84010316     0xa2    li a0,4
    0x84010318     0xa4    slli a0,a0,0x20
    0x8401031a     0xa6    srli a0,a0,0x20
    0x8401031c     0xa8    j ffffffff84010294 <setMRs_fault+0x20>
    0x8401031e     0xaa    li a0,4
    0x84010320     0xac    j ffffffff84010318 <setMRs_fault+0xa4>
    0x84010322     0xae    li a0,4
    0x84010324     0xb0    j ffffffff84010318 <setMRs_fault+0xa4>
    0x84010326     0xb2    li a0,4
    0x84010328     0xb4    j ffffffff84010318 <setMRs_fault+0xa4>
    0x8401032a     0xb6    ld a5,264(a0)
    0x8401032e     0xba    sd a5,88(a1)
    0x84010330     0xbc    ld a5,8(a0)
    0x84010332     0xbe    sd a5,96(a1)
    0x84010334     0xc0    ld a5,0(a0)
    0x84010336     0xc2    sd a5,104(a1)
    0x84010338     0xc4    ld a5,72(a0)
    0x8401033a     0xc6    sd a5,112(a1)
    0x8401033c     0xc8    li a5,4
    0x8401033e     0xca    beqz a2,ffffffff8401036e <setMRs_fault+0xfa>
    0x84010340     0xcc    auipc a4,0x7
    0x84010344     0xd0    addi a4,a4,1856 # ffffffff84017a80 <fault_messages>
    0x84010348     0xd4    addi a3,a2,40
    0x8401034c     0xd8    auipc a1,0x7
    0x84010350     0xdc    addi a1,a1,1892 # ffffffff84017ab0 <fault_messages+0x30>
    0x84010354     0xe0    ld a5,32(a4)
    0x84010356     0xe2    slli a5,a5,0x3
    0x84010358     0xe4    add a5,a5,a0
    0x8401035a     0xe6    ld a5,0(a5)
    0x8401035c     0xe8    sd a5,0(a3)
    0x8401035e     0xea    addi a4,a4,8
    0x84010360     0xec    addi a3,a3,8
    0x84010362     0xee    bne a1,a4,ffffffff84010354 <setMRs_fault+0xe0>
    0x84010366     0xf2    ld a5,320(a0)
    0x8401036a     0xf6    sd a5,88(a2)
    0x8401036c     0xf8    li a5,11
    0x8401036e     0xfa    slli a0,a5,0x20
    0x84010372     0xfe    srli a0,a0,0x20
    0x84010374    0x100    ret
    0x84010376    0x102    ld a5,264(a0)
    0x8401037a    0x106    sd a5,88(a1)
    0x8401037c    0x108    ld a5,8(a0)
    0x8401037e    0x10a    sd a5,96(a1)
    0x84010380    0x10c    lwu a5,316(a0)
    0x84010384    0x110    sd a5,104(a1)
    0x84010386    0x112    ld a5,312(a0)
    0x8401038a    0x116    srliw a5,a5,0x4
    0x8401038e    0x11a    sd a5,112(a1)
    0x84010390    0x11c    li a0,4
    0x84010392    0x11e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
108 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 176 nodes.

Section trap_entry (206 of 266)
===============================

Deriving specifications
-----------------------

Section `trap_entry` consists of 48 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc


Stack analysis
---------------

No stack accesses found. Code for `trap_entry`:

    0x84010000     0x0    csrrw t0,sscratch,t0
    0x84010004     0x4    sd ra,0(t0)
    0x84010008     0x8    sd sp,8(t0)
    0x8401000c     0xc    sd gp,16(t0)
    0x84010010    0x10    sd tp,24(t0)
    0x84010014    0x14    sd t1,40(t0)
    0x84010018    0x18    sd t2,48(t0)
    0x8401001c    0x1c    sd s0,56(t0)
    0x84010020    0x20    sd s1,64(t0)
    0x84010024    0x24    sd a0,72(t0)
    0x84010028    0x28    sd a1,80(t0)
    0x8401002c    0x2c    sd a2,88(t0)
    0x84010030    0x30    sd a3,96(t0)
    0x84010034    0x34    sd a4,104(t0)
    0x84010038    0x38    sd a5,112(t0)
    0x8401003c    0x3c    sd a6,120(t0)
    0x84010040    0x40    sd a7,128(t0)
    0x84010044    0x44    sd s2,136(t0)
    0x84010048    0x48    sd s3,144(t0)
    0x8401004c    0x4c    sd s4,152(t0)
    0x84010050    0x50    sd s5,160(t0)
    0x84010054    0x54    sd s6,168(t0)
    0x84010058    0x58    sd s7,176(t0)
    0x8401005c    0x5c    sd s8,184(t0)
    0x84010060    0x60    sd s9,192(t0)
    0x84010064    0x64    sd s10,200(t0)
    0x84010068    0x68    sd s11,208(t0)
    0x8401006c    0x6c    sd t3,216(t0)
    0x84010070    0x70    sd t4,224(t0)
    0x84010074    0x74    sd t5,232(t0)
    0x84010078    0x78    sd t6,240(t0)
    0x8401007c    0x7c    csrr ra,sscratch
    0x84010080    0x80    sd ra,32(t0)
    0x84010084    0x84    csrr ra,sstatus
    0x84010088    0x88    sd ra,256(t0)
    0x8401008c    0x8c    csrr s0,scause
    0x84010090    0x90    sd s0,248(t0)
    0x84010094    0x94    mv gp,gp
    0x84010098    0x98    auipc sp,0xe
    0x8401009c    0x9c    addi sp,sp,-1136 # ffffffff8401dc28 <ksIdleThread>
    0x840100a0    0xa0    csrr ra,sepc
    0x840100a4    0xa4    sd ra,264(t0)
    0x840100a8    0xa8    srli s2,s0,0x3f
    0x840100ac    0xac    li s1,1
    0x840100ae    0xae    beq s2,s1,ffffffff840100cc <interrupt>
    0x840100b2    0xb2    andi s0,s0,15
    0x840100b4    0xb4    li s4,8
    0x840100b6    0xb6    bne s0,s4,ffffffff840100c4 <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `trap_entry` has 95 nodes.

Section populate_bi_frame (207 of 266)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 55 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `populate_bi_frame`:

    0x8400230a     0x0    addi sp,sp,-48
    0x8400230c     0x2    sd ra,40(sp)          ; stack access
    0x8400230e     0x4    sd s0,32(sp)          ; stack access
    0x84002310     0x6    sd s1,24(sp)          ; stack access
    0x84002312     0x8    sd s2,16(sp)          ; stack access
    0x84002314     0xa    sd s3,8(sp)           ; stack access
    0x84002316     0xc    mv s3,a0
    0x84002318     0xe    mv s2,a1
    0x8400231a    0x10    mv s1,a2
    0x8400231c    0x12    mv s0,a3
    0x8400231e    0x14    lui a1,0x1
    0x84002320    0x16    auipc a0,0x1
    0x84002324    0x1a    ld a0,-1240(a0) # ffffffff84002e48 <rootserver+0x20>
    0x84002328    0x1e    jal ra,ffffffff840156c0 <memzero>
    0x8400232c    0x22    bnez s0,ffffffff84002390 <populate_bi_frame+0x86>
    0x8400232e    0x24    auipc a5,0x1
    0x84002332    0x28    addi a5,a5,-1894 # ffffffff84002bc8 <ndks_boot>
    0x84002336    0x2c    ld a4,640(a5)
    0x8400233a    0x30    sd a4,584(a5)
    0x8400233e    0x34    li a3,12
    0x84002340    0x36    sd a3,592(a5)
    0x84002344    0x3a    sd s3,8(a4)
    0x84002348    0x3e    ld a4,640(a5)
    0x8400234c    0x42    sd s2,16(a4)
    0x84002350    0x46    ld a4,640(a5)
    0x84002354    0x4a    sd zero,24(a4)
    0x84002358    0x4e    ld a4,640(a5)
    0x8400235c    0x52    sd s1,32(a4)
    0x8400235e    0x54    ld a5,640(a5)
    0x84002362    0x58    li a4,19
    0x84002364    0x5a    sd a4,136(a5)
    0x84002366    0x5c    auipc a4,0x2c
    0x8400236a    0x60    ld a4,1850(a4) # ffffffff8402eaa0 <ksDomScheduleIdx>
    0x8400236e    0x64    slli a3,a4,0x4
    0x84002372    0x68    auipc a4,0x15
    0x84002376    0x6c    addi a4,a4,1806 # ffffffff84017a80 <fault_messages>
    0x8400237a    0x70    add a4,a4,a3
    0x8400237c    0x72    ld a4,192(a4)
    0x8400237e    0x74    sd a4,144(a5)
    0x84002380    0x76    sd s0,0(a5)
    0x84002382    0x78    ld ra,40(sp)          ; stack access
    0x84002384    0x7a    ld s0,32(sp)          ; stack access
    0x84002386    0x7c    ld s1,24(sp)          ; stack access
    0x84002388    0x7e    ld s2,16(sp)          ; stack access
    0x8400238a    0x80    ld s3,8(sp)           ; stack access
    0x8400238c    0x82    addi sp,sp,48
    0x8400238e    0x84    ret
    0x84002390    0x86    mv a0,s0
    0x84002392    0x88    jal ra,ffffffff84000e6e <calculate_extra_bi_size_bits>
    0x84002396    0x8c    li a1,1
    0x84002398    0x8e    sll a1,a1,a0
    0x8400239c    0x92    auipc a0,0x1
    0x840023a0    0x96    ld a0,-1356(a0) # ffffffff84002e50 <rootserver+0x28>
    0x840023a4    0x9a    jal ra,ffffffff840156c0 <memzero>
    0x840023a8    0x9e    j ffffffff8400232e <populate_bi_frame+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 89 nodes.

Section create_ipcbuf_frame_cap (208 of 266)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 138 instructions.


Stack analysis
---------------

Section `create_ipcbuf_frame_cap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84002196      0x0    addi sp,sp,-96
    0x84002198      0x2    sd ra,88(sp)          ; stack access
    0x8400219a      0x4    sd s0,80(sp)          ; stack access
    0x8400219c      0x6    sd s1,72(sp)          ; stack access
    0x8400219e      0x8    sd a0,16(sp)          ; stack access
    0x840021a0      0xa    sd a1,24(sp)          ; stack access
    0x840021a2      0xc    sd a2,0(sp)           ; stack access
    0x840021a4      0xe    sd a3,8(sp)           ; stack access
    0x840021a6     0x10    mv s0,a4
    0x840021a8     0x12    auipc s1,0x1
    0x840021ac     0x16    addi s1,s1,-1504 # ffffffff84002bc8 <ndks_boot>
    0x840021b0     0x1a    lui a1,0x1
    0x840021b2     0x1c    ld a0,632(s1)
    0x840021b6     0x20    jal ra,ffffffff840156c0 <memzero>
    0x840021ba     0x24    li a6,0
    0x840021bc     0x26    li a5,0
    0x840021be     0x28    li a4,1
    0x840021c0     0x2a    mv a3,s0
    0x840021c2     0x2c    ld a2,632(s1)
    0x840021c6     0x30    ld a0,0(sp)           ; stack access
    0x840021c8     0x32    ld a1,8(sp)           ; stack access
    0x840021ca     0x34    jal ra,ffffffff8400086a <create_mapped_it_frame_cap>
    0x840021ce     0x38    sd a0,32(sp)          ; stack access
    0x840021d0     0x3a    sd a1,40(sp)          ; stack access
    0x840021d2     0x3c    ld a4,16(sp)          ; stack access
    0x840021d4     0x3e    ld a0,24(sp)          ; stack access
    0x840021d6     0x40    srli a3,a4,0x3b
    0x840021da     0x44    li a5,20
    0x840021dc     0x46    bltu a5,a3,ffffffff8400228a <create_ipcbuf_frame_cap+0xf4>
    0x840021e0     0x4a    slli a2,a3,0x2
    0x840021e4     0x4e    auipc a1,0x15
    0x840021e8     0x52    addi a1,a1,1916 # ffffffff84017960 <__global_pointer$+0xac>
    0x840021ec     0x56    add a2,a2,a1
    0x840021ee     0x58    lw a5,0(a2)
    0x840021f0     0x5a    add a5,a5,a1
    0x840021f2     0x5c    jr a5
    0x840021f4     0x5e    slli a5,a4,0x19
    0x840021f8     0x62    srli a5,a5,0x19
    0x840021fa     0x64    slli a3,a4,0x19
    0x840021fe     0x68    bgez a3,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x84002202     0x6c    li a4,-1
    0x84002204     0x6e    slli a4,a4,0x27
    0x84002206     0x70    or a5,a5,a4
    0x84002208     0x72    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x8400220a     0x74    slli a5,a4,0x19
    0x8400220e     0x78    srli a5,a5,0x19
    0x84002210     0x7a    slli a3,a4,0x19
    0x84002214     0x7e    bgez a3,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x84002218     0x82    li a4,-1
    0x8400221a     0x84    slli a4,a4,0x27
    0x8400221c     0x86    or a5,a5,a4
    0x8400221e     0x88    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x84002220     0x8a    slli a5,a4,0x19
    0x84002224     0x8e    srli a5,a5,0x19
    0x84002226     0x90    slli a3,a4,0x19
    0x8400222a     0x94    bgez a3,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x8400222e     0x98    li a4,-1
    0x84002230     0x9a    slli a4,a4,0x27
    0x84002232     0x9c    or a5,a5,a4
    0x84002234     0x9e    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x84002236     0xa0    slli a4,a4,0x1
    0x84002238     0xa2    lui a5,0xfc000
    0x8400223c     0xa6    srli a5,a5,0x19
    0x8400223e     0xa8    and a5,a5,a4
    0x84002240     0xaa    slli a3,a4,0x19
    0x84002244     0xae    bgez a3,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x84002248     0xb2    li a4,-1
    0x8400224a     0xb4    slli a4,a4,0x27
    0x8400224c     0xb6    or a5,a5,a4
    0x8400224e     0xb8    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x84002250     0xba    slli a5,a4,0x19
    0x84002254     0xbe    srli a5,a5,0x19
    0x84002256     0xc0    slli a3,a4,0x19
    0x8400225a     0xc4    bgez a3,ffffffff84002264 <create_ipcbuf_frame_cap+0xce>
    0x8400225e     0xc8    li a4,-1
    0x84002260     0xca    slli a4,a4,0x27
    0x84002262     0xcc    or a5,a5,a4
    0x84002264     0xce    andi a5,a5,-1024
    0x84002268     0xd2    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x8400226a     0xd4    andi a5,a4,127
    0x8400226e     0xd8    li a3,64
    0x84002272     0xdc    beq a5,a3,ffffffff84002286 <create_ipcbuf_frame_cap+0xf0>
    0x84002276     0xe0    andi a4,a4,63
    0x8400227a     0xe4    addiw a4,a4,1
    0x8400227c     0xe6    li a5,-1
    0x8400227e     0xe8    sll a5,a5,a4
    0x84002282     0xec    and a5,a5,a0
    0x84002284     0xee    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x84002286     0xf0    li a4,4
    0x84002288     0xf2    j ffffffff8400227a <create_ipcbuf_frame_cap+0xe4>
    0x8400228a     0xf4    li a5,3
    0x8400228c     0xf6    beq a3,a5,ffffffff840022b6 <create_ipcbuf_frame_cap+0x120>
    0x84002290     0xfa    li a5,13
    0x84002292     0xfc    beq a3,a5,ffffffff840022ce <create_ipcbuf_frame_cap+0x138>
    0x84002296    0x100    li a4,1
    0x84002298    0x102    li a5,0
    0x8400229a    0x104    bne a3,a4,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x8400229e    0x108    srli a0,a0,0x9
    0x840022a0    0x10a    slli a5,a0,0x19
    0x840022a4    0x10e    srli a5,a5,0x19
    0x840022a6    0x110    slli a4,a0,0x19
    0x840022aa    0x114    bgez a4,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x840022ae    0x118    li a4,-1
    0x840022b0    0x11a    slli a4,a4,0x27
    0x840022b2    0x11c    or a5,a5,a4
    0x840022b4    0x11e    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x840022b6    0x120    srli a0,a0,0x9
    0x840022b8    0x122    slli a5,a0,0x19
    0x840022bc    0x126    srli a5,a5,0x19
    0x840022be    0x128    slli a4,a0,0x19
    0x840022c2    0x12c    bgez a4,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x840022c6    0x130    li a4,-1
    0x840022c8    0x132    slli a4,a4,0x27
    0x840022ca    0x134    or a5,a5,a4
    0x840022cc    0x136    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x840022ce    0x138    slli a4,a4,0x2
    0x840022d0    0x13a    lui a5,0xf8000
    0x840022d4    0x13e    srli a5,a5,0x19
    0x840022d6    0x140    and a5,a5,a4
    0x840022d8    0x142    slli a3,a4,0x19
    0x840022dc    0x146    bgez a3,ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x840022e0    0x14a    li a4,-1
    0x840022e2    0x14c    slli a4,a4,0x27
    0x840022e4    0x14e    or a5,a5,a4
    0x840022e6    0x150    j ffffffff840022ea <create_ipcbuf_frame_cap+0x154>
    0x840022e8    0x152    li a5,0
    0x840022ea    0x154    ld a1,40(sp)          ; stack access
    0x840022ec    0x156    ld a0,32(sp)          ; stack access
    0x840022ee    0x158    sd a0,320(a5) # fffffffff8000140 <ki_end+0x73fd1140>
    0x840022f2    0x15c    sd a1,328(a5)
    0x840022f6    0x160    sd zero,336(a5)
    0x840022fa    0x164    li a4,3
    0x840022fc    0x166    sd a4,344(a5)
    0x84002300    0x16a    ld ra,88(sp)          ; stack access
    0x84002302    0x16c    ld s0,80(sp)          ; stack access
    0x84002304    0x16e    ld s1,72(sp)          ; stack access
    0x84002306    0x170    addi sp,sp,96
    0x84002308    0x172    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 193 nodes.

Section create_frames_of_region (209 of 266)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 80 instructions.

RVC_FTTFT____FFFFTFT.

Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
43 stack accesses found. Annotated code for `create_frames_of_region`:

    0x84001278     0x0    addi sp,sp,-160
    0x8400127a     0x2    sd ra,152(sp)         ; stack access
    0x8400127c     0x4    sd s0,144(sp)         ; stack access
    0x8400127e     0x6    sd s1,136(sp)         ; stack access
    0x84001280     0x8    sd s2,128(sp)         ; stack access
    0x84001282     0xa    sd s3,120(sp)         ; stack access
    0x84001284     0xc    sd s4,112(sp)         ; stack access
    0x84001286     0xe    sd s5,104(sp)         ; stack access
    0x84001288    0x10    sd s6,96(sp)          ; stack access
    0x8400128a    0x12    sd s7,88(sp)          ; stack access
    0x8400128c    0x14    sd s8,80(sp)          ; stack access
    0x8400128e    0x16    sd s9,72(sp)          ; stack access
    0x84001290    0x18    mv s7,a0
    0x84001292    0x1a    sd a1,32(sp)          ; stack access
    0x84001294    0x1c    sd a2,40(sp)          ; stack access
    0x84001296    0x1e    sd a3,16(sp)          ; stack access
    0x84001298    0x20    sd a4,24(sp)          ; stack access
    0x8400129a    0x22    auipc s9,0x2
    0x8400129e    0x26    ld s9,-1154(s9) # ffffffff84002e18 <ndks_boot+0x250>
    0x840012a2    0x2a    bgeu a5,a6,ffffffff84001314 <create_frames_of_region+0x9c>
    0x840012a6    0x2e    mv s2,a7
    0x840012a8    0x30    mv s1,a6
    0x840012aa    0x32    mv s0,a5
    0x840012ac    0x34    li s3,1
    0x840012ae    0x36    slli s8,s3,0x3b
    0x840012b2    0x3a    lui s6,0xfe000
    0x840012b6    0x3e    srli s6,s6,0x10
    0x840012ba    0x42    slli s5,s3,0x26
    0x840012be    0x46    ld a5,160(sp)         ; stack access
    0x840012c0    0x48    sub s5,s5,a5
    0x840012c4    0x4c    lui s4,0x1
    0x840012c6    0x4e    j ffffffff840012e8 <create_frames_of_region+0x70>
    0x840012c8    0x50    sd s8,48(sp)          ; stack access
    0x840012ca    0x52    slli a5,s0,0x9
    0x840012ce    0x56    and a5,a5,s6
    0x840012d2    0x5a    sd a5,56(sp)          ; stack access
    0x840012d4    0x5c    ld a2,48(sp)          ; stack access
    0x840012d6    0x5e    ld a3,56(sp)          ; stack access
    0x840012d8    0x60    ld a0,32(sp)          ; stack access
    0x840012da    0x62    ld a1,40(sp)          ; stack access
    0x840012dc    0x64    jal ra,ffffffff84000ea6 <provide_cap>
    0x840012e0    0x68    beqz a0,ffffffff84001306 <create_frames_of_region+0x8e>
    0x840012e2    0x6a    add s0,s0,s4
    0x840012e4    0x6c    bgeu s0,s1,ffffffff84001314 <create_frames_of_region+0x9c>
    0x840012e8    0x70    beqz s2,ffffffff840012c8 <create_frames_of_region+0x50>
    0x840012ec    0x74    mv a6,s3
    0x840012ee    0x76    li a5,0
    0x840012f0    0x78    mv a4,s3
    0x840012f2    0x7a    add a3,s5,s0
    0x840012f6    0x7e    mv a2,s0
    0x840012f8    0x80    ld a0,16(sp)          ; stack access
    0x840012fa    0x82    ld a1,24(sp)          ; stack access
    0x840012fc    0x84    jal ra,ffffffff8400086a <create_mapped_it_frame_cap>
    0x84001300    0x88    sd a0,48(sp)          ; stack access
    0x84001302    0x8a    sd a1,56(sp)          ; stack access
    0x84001304    0x8c    j ffffffff840012d4 <create_frames_of_region+0x5c>
    0x84001306    0x8e    sd zero,0(s7) # fffffffffe000000 <ki_end+0x79fd1000>  ; stack access
    0x8400130a    0x92    sd zero,8(s7)         ; stack access
    0x8400130e    0x96    sd zero,16(s7)        ; stack access
    0x84001312    0x9a    j ffffffff8400132a <create_frames_of_region+0xb2>
    0x84001314    0x9c    sd s9,0(s7)           ; stack access
    0x84001318    0xa0    auipc a5,0x2
    0x8400131c    0xa4    ld a5,-1280(a5) # ffffffff84002e18 <ndks_boot+0x250>
    0x84001320    0xa8    sd a5,8(s7)           ; stack access
    0x84001324    0xac    li a5,1
    0x84001326    0xae    sd a5,16(s7)          ; stack access
    0x8400132a    0xb2    mv a0,s7
    0x8400132c    0xb4    ld ra,152(sp)         ; stack access
    0x8400132e    0xb6    ld s0,144(sp)         ; stack access
    0x84001330    0xb8    ld s1,136(sp)         ; stack access
    0x84001332    0xba    ld s2,128(sp)         ; stack access
    0x84001334    0xbc    ld s3,120(sp)         ; stack access
    0x84001336    0xbe    ld s4,112(sp)         ; stack access
    0x84001338    0xc0    ld s5,104(sp)         ; stack access
    0x8400133a    0xc2    ld s6,96(sp)          ; stack access
    0x8400133c    0xc4    ld s7,88(sp)          ; stack access
    0x8400133e    0xc6    ld s8,80(sp)          ; stack access
    0x84001340    0xc8    ld s9,72(sp)          ; stack access
    0x84001342    0xca    addi sp,sp,160
    0x84001344    0xcc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 136 nodes.

Section map_kernel_window (210 of 266)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 69 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_window`:

    0x84000a7c     0x0    addi sp,sp,-64
    0x84000a7e     0x2    sd ra,56(sp)          ; stack access
    0x84000a80     0x4    sd s0,48(sp)          ; stack access
    0x84000a82     0x6    sd s1,40(sp)          ; stack access
    0x84000a84     0x8    sd s2,32(sp)          ; stack access
    0x84000a86     0xa    sd s3,24(sp)          ; stack access
    0x84000a88     0xc    sd s4,16(sp)          ; stack access
    0x84000a8a     0xe    sd s5,8(sp)           ; stack access
    0x84000a8c    0x10    sd s6,0(sp)           ; stack access
    0x84000a8e    0x12    li s1,-1
    0x84000a90    0x14    slli s1,s1,0x26
    0x84000a92    0x16    auipc s6,0x1a
    0x84000a96    0x1a    addi s6,s6,1390 # ffffffff8401b000 <kernel_root_pageTable>
    0x84000a9a    0x1e    li s2,1
    0x84000a9c    0x20    slli s5,s2,0x26
    0x84000aa0    0x24    lui s4,0x40000
    0x84000aa4    0x28    lui s3,0x80000
    0x84000aa8    0x2c    srli s0,s1,0x1e
    0x84000aac    0x30    andi s0,s0,511
    0x84000ab0    0x34    slli s0,s0,0x3
    0x84000ab2    0x36    add s0,s0,s6
    0x84000ab4    0x38    mv a1,s2
    0x84000ab6    0x3a    add a0,s1,s5
    0x84000aba    0x3e    jal ra,ffffffff840100da <pte_next>
    0x84000abe    0x42    sd a0,0(s0)
    0x84000ac0    0x44    add s1,s1,s4
    0x84000ac2    0x46    bne s1,s3,ffffffff84000aa8 <map_kernel_window+0x2c>
    0x84000ac6    0x4a    li s0,1
    0x84000ac8    0x4c    slli a5,s0,0x20
    0x84000acc    0x50    auipc s1,0x19
    0x84000ad0    0x54    addi s1,s1,1332 # ffffffff8401a000 <kernel_image_level2_pt>
    0x84000ad4    0x58    add s1,s1,a5
    0x84000ad6    0x5a    auipc s2,0x1b
    0x84000ada    0x5e    addi s2,s2,1322 # ffffffff8401c000 <kernel_root_pageTable+0x1000>
    0x84000ade    0x62    li a1,0
    0x84000ae0    0x64    mv a0,s1
    0x84000ae2    0x66    jal ra,ffffffff840100da <pte_next>
    0x84000ae6    0x6a    sd a0,-2032(s2)
    0x84000aea    0x6e    li a1,0
    0x84000aec    0x70    mv a0,s1
    0x84000aee    0x72    jal ra,ffffffff840100da <pte_next>
    0x84000af2    0x76    sd a0,-16(s2)
    0x84000af6    0x7a    li s2,0
    0x84000af8    0x7c    slli s0,s0,0x1f
    0x84000afa    0x7e    auipc s5,0x19
    0x84000afe    0x82    addi s5,s5,1286 # ffffffff8401a000 <kernel_image_level2_pt>
    0x84000b02    0x86    lui s4,0x200
    0x84000b06    0x8a    li s3,3
    0x84000b08    0x8c    slli s3,s3,0x1e
    0x84000b0a    0x8e    slli s1,s2,0x3
    0x84000b0e    0x92    add s1,s1,s5
    0x84000b10    0x94    li a1,1
    0x84000b12    0x96    mv a0,s0
    0x84000b14    0x98    jal ra,ffffffff840100da <pte_next>
    0x84000b18    0x9c    sd a0,0(s1)
    0x84000b1a    0x9e    addi s2,s2,1
    0x84000b1c    0xa0    add s0,s0,s4
    0x84000b1e    0xa2    bne s0,s3,ffffffff84000b0a <map_kernel_window+0x8e>
    0x84000b22    0xa6    jal ra,ffffffff84000a58 <map_kernel_devices>
    0x84000b26    0xaa    ld ra,56(sp)          ; stack access
    0x84000b28    0xac    ld s0,48(sp)          ; stack access
    0x84000b2a    0xae    ld s1,40(sp)          ; stack access
    0x84000b2c    0xb0    ld s2,32(sp)          ; stack access
    0x84000b2e    0xb2    ld s3,24(sp)          ; stack access
    0x84000b30    0xb4    ld s4,16(sp)          ; stack access
    0x84000b32    0xb6    ld s5,8(sp)           ; stack access
    0x84000b34    0xb8    ld s6,0(sp)           ; stack access
    0x84000b36    0xba    addi sp,sp,64
    0x84000b38    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 99 nodes.

Section map_kernel_devices (211 of 266)
=======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `map_kernel_devices`:

    0x84000a58     0x0    addi sp,sp,-32
    0x84000a5a     0x2    sd ra,24(sp)          ; stack access
    0x84000a5c     0x4    li a2,1
    0x84000a5e     0x6    lui a1,0xc0000
    0x84000a62     0xa    lui a0,0xc000
    0x84000a66     0xe    jal ra,ffffffff840000c4 <map_kernel_frame>
    0x84000a6a    0x12    lui a0,0xc000
    0x84000a6e    0x16    lui a1,0xc001
    0x84000a72    0x1a    jal ra,ffffffff84000964 <reserve_region>
    0x84000a76    0x1e    ld ra,24(sp)          ; stack access
    0x84000a78    0x20    addi sp,sp,32
    0x84000a7a    0x22    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 17 nodes.

Section c_handle_syscall (212 of 266)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 10 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x84016ee4     0x0    addi sp,sp,-16
    0x84016ee6     0x2    sd ra,8(sp)           ; stack access
    0x84016ee8     0x4    li a5,-1
    0x84016eea     0x6    beq a7,a5,ffffffff84016efa <c_handle_syscall+0x16>
    0x84016eee     0xa    li a5,-2
    0x84016ef0     0xc    beq a7,a5,ffffffff84016efe <c_handle_syscall+0x1a>
    0x84016ef4    0x10    mv a0,a7
    0x84016ef6    0x12    jal ra,ffffffff84016840 <slowpath>
    0x84016efa    0x16    jal ra,ffffffff84016858 <fastpath_call>
    0x84016efe    0x1a    jal ra,ffffffff84016b74 <fastpath_reply_recv>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 18 nodes.

Section slowpath (213 of 266)
=============================

Deriving specifications
-----------------------

Section `slowpath` consists of 8 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `slowpath`:

    0x84016840     0x0    addi sp,sp,-16
    0x84016842     0x2    sd ra,8(sp)           ; stack access
    0x84016844     0x4    li a5,-9
    0x84016846     0x6    bgeu a5,a0,ffffffff84016852 <slowpath+0x12>
    0x8401684a     0xa    jal ra,ffffffff840166f8 <handleSyscall>
    0x8401684e     0xe    jal ra,ffffffff84010182 <restore_user_context>
    0x84016852    0x12    jal ra,ffffffff84014114 <handleUnknownSyscall>
    0x84016856    0x16    j ffffffff8401684e <slowpath+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 14 nodes.

Section invokeTCB_ReadRegisters (214 of 266)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 106 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x84014f14      0x0    addi sp,sp,-48
    0x84014f16      0x2    sd ra,40(sp)          ; stack access
    0x84014f18      0x4    sd s0,32(sp)          ; stack access
    0x84014f1a      0x6    sd s1,24(sp)          ; stack access
    0x84014f1c      0x8    sd s2,16(sp)          ; stack access
    0x84014f1e      0xa    sd s3,8(sp)           ; stack access
    0x84014f20      0xc    mv s1,a0
    0x84014f22      0xe    mv s0,a2
    0x84014f24     0x10    mv s3,a4
    0x84014f26     0x12    auipc s2,0x1a
    0x84014f2a     0x16    ld s2,-1166(s2) # ffffffff8402ea98 <ksCurThread>
    0x84014f2e     0x1a    bnez a1,ffffffff84014faa <invokeTCB_ReadRegisters+0x96>
    0x84014f30     0x1c    beqz s3,ffffffff84014fca <invokeTCB_ReadRegisters+0xb6>
    0x84014f34     0x20    mv a1,s2
    0x84014f36     0x22    li a0,1
    0x84014f38     0x24    jal ra,ffffffff840103be <lookupIPCBuffer>
    0x84014f3c     0x28    sd zero,72(s2)
    0x84014f40     0x2c    beqz s0,ffffffff8401501e <invokeTCB_ReadRegisters+0x10a>
    0x84014f42     0x2e    ld a5,264(s1)
    0x84014f46     0x32    sd a5,88(s2)
    0x84014f4a     0x36    li a5,1
    0x84014f4c     0x38    bgeu a5,s0,ffffffff84014fb0 <invokeTCB_ReadRegisters+0x9c>
    0x84014f50     0x3c    ld a5,0(s1)
    0x84014f52     0x3e    sd a5,96(s2)
    0x84014f56     0x42    li a5,2
    0x84014f58     0x44    bgeu a5,s0,ffffffff84014fe2 <invokeTCB_ReadRegisters+0xce>
    0x84014f5c     0x48    ld a5,8(s1)
    0x84014f5e     0x4a    sd a5,104(s2)
    0x84014f62     0x4e    li a5,3
    0x84014f64     0x50    bgeu a5,s0,ffffffff84014fe6 <invokeTCB_ReadRegisters+0xd2>
    0x84014f68     0x54    ld a5,16(s1)
    0x84014f6a     0x56    sd a5,112(s2)
    0x84014f6e     0x5a    li a5,4
    0x84014f70     0x5c    li a3,4
    0x84014f72     0x5e    bgeu a5,s0,ffffffff84014fb2 <invokeTCB_ReadRegisters+0x9e>
    0x84014f76     0x62    li a3,4
    0x84014f78     0x64    beqz a0,ffffffff84015022 <invokeTCB_ReadRegisters+0x10e>
    0x84014f7a     0x66    bgeu a3,s0,ffffffff84014fb8 <invokeTCB_ReadRegisters+0xa4>
    0x84014f7e     0x6a    slli a4,a3,0x3
    0x84014f82     0x6e    auipc a2,0x3
    0x84014f86     0x72    addi a2,a2,-1042 # ffffffff84017b70 <frameRegisters>
    0x84014f8a     0x76    add a2,a2,a4
    0x84014f8c     0x78    add a4,a4,a0
    0x84014f8e     0x7a    li a1,16
    0x84014f90     0x7c    addi a3,a3,1
    0x84014f92     0x7e    ld a5,0(a2)
    0x84014f94     0x80    slli a5,a5,0x3
    0x84014f96     0x82    add a5,a5,s1
    0x84014f98     0x84    ld a5,0(a5)
    0x84014f9a     0x86    sd a5,8(a4)
    0x84014f9c     0x88    bgeu a3,s0,ffffffff84014fb8 <invokeTCB_ReadRegisters+0xa4>
    0x84014fa0     0x8c    addi a2,a2,8
    0x84014fa2     0x8e    addi a4,a4,8
    0x84014fa4     0x90    bne a3,a1,ffffffff84014f90 <invokeTCB_ReadRegisters+0x7c>
    0x84014fa8     0x94    j ffffffff84014fb8 <invokeTCB_ReadRegisters+0xa4>
    0x84014faa     0x96    jal ra,ffffffff84012d8e <suspend>
    0x84014fae     0x9a    j ffffffff84014f30 <invokeTCB_ReadRegisters+0x1c>
    0x84014fb0     0x9c    li a3,1
    0x84014fb2     0x9e    beqz a0,ffffffff84015022 <invokeTCB_ReadRegisters+0x10e>
    0x84014fb4     0xa0    bltu a3,s0,ffffffff84014f7a <invokeTCB_ReadRegisters+0x66>
    0x84014fb8     0xa4    li a5,16
    0x84014fba     0xa6    bltu a5,s0,ffffffff84014fee <invokeTCB_ReadRegisters+0xda>
    0x84014fbe     0xaa    li a5,0
    0x84014fc0     0xac    add a5,a5,a3
    0x84014fc2     0xae    andi a5,a5,127
    0x84014fc6     0xb2    sd a5,80(s2)
    0x84014fca     0xb6    li a1,1
    0x84014fcc     0xb8    mv a0,s2
    0x84014fce     0xba    jal ra,ffffffff840122d8 <setThreadState>
    0x84014fd2     0xbe    li a0,0
    0x84014fd4     0xc0    ld ra,40(sp)          ; stack access
    0x84014fd6     0xc2    ld s0,32(sp)          ; stack access
    0x84014fd8     0xc4    ld s1,24(sp)          ; stack access
    0x84014fda     0xc6    ld s2,16(sp)          ; stack access
    0x84014fdc     0xc8    ld s3,8(sp)           ; stack access
    0x84014fde     0xca    addi sp,sp,48
    0x84014fe0     0xcc    ret
    0x84014fe2     0xce    li a3,2
    0x84014fe4     0xd0    j ffffffff84014fb2 <invokeTCB_ReadRegisters+0x9e>
    0x84014fe6     0xd2    li a3,3
    0x84014fe8     0xd4    j ffffffff84014fb2 <invokeTCB_ReadRegisters+0x9e>
    0x84014fea     0xd6    mv a5,s0
    0x84014fec     0xd8    j ffffffff84014fc0 <invokeTCB_ReadRegisters+0xac>
    0x84014fee     0xda    ld a5,72(s1)
    0x84014ff0     0xdc    sd a5,136(a0)
    0x84014ff2     0xde    auipc a1,0x3
    0x84014ff6     0xe2    addi a1,a1,-1018 # ffffffff84017bf8 <gpRegisters+0x8>
    0x84014ffa     0xe6    addi a0,a0,144
    0x84014ffe     0xea    addi s0,s0,-16
    0x84015000     0xec    li a5,1
    0x84015002     0xee    li a2,16
    0x84015004     0xf0    beq a5,s0,ffffffff84014fea <invokeTCB_ReadRegisters+0xd6>
    0x84015008     0xf4    ld a4,0(a1)
    0x8401500a     0xf6    slli a4,a4,0x3
    0x8401500c     0xf8    add a4,a4,s1
    0x8401500e     0xfa    ld a4,0(a4)
    0x84015010     0xfc    sd a4,0(a0)
    0x84015012     0xfe    addi a5,a5,1
    0x84015014    0x100    addi a1,a1,8
    0x84015016    0x102    addi a0,a0,8
    0x84015018    0x104    bne a5,a2,ffffffff84015004 <invokeTCB_ReadRegisters+0xf0>
    0x8401501c    0x108    j ffffffff84014fc0 <invokeTCB_ReadRegisters+0xac>
    0x8401501e    0x10a    mv a3,s0
    0x84015020    0x10c    bnez a0,ffffffff84014fb8 <invokeTCB_ReadRegisters+0xa4>
    0x84015022    0x10e    li a5,0
    0x84015024    0x110    j ffffffff84014fc0 <invokeTCB_ReadRegisters+0xac>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
106 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 173 nodes.

Section invokeTCB_CopyRegisters (215 of 266)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x84014dc6     0x0    addi sp,sp,-48
    0x84014dc8     0x2    sd ra,40(sp)          ; stack access
    0x84014dca     0x4    sd s0,32(sp)          ; stack access
    0x84014dcc     0x6    sd s1,24(sp)          ; stack access
    0x84014dce     0x8    sd s2,16(sp)          ; stack access
    0x84014dd0     0xa    sd s3,8(sp)           ; stack access
    0x84014dd2     0xc    sd s4,0(sp)           ; stack access
    0x84014dd4     0xe    mv s0,a0
    0x84014dd6    0x10    mv s1,a1
    0x84014dd8    0x12    mv s4,a3
    0x84014dda    0x14    mv s3,a4
    0x84014ddc    0x16    mv s2,a5
    0x84014dde    0x18    bnez a2,ffffffff84014e5a <invokeTCB_CopyRegisters+0x94>
    0x84014de0    0x1a    bnez s4,ffffffff84014e62 <invokeTCB_CopyRegisters+0x9c>
    0x84014de4    0x1e    beqz s3,ffffffff84014e14 <invokeTCB_CopyRegisters+0x4e>
    0x84014de8    0x22    auipc a3,0x3
    0x84014dec    0x26    addi a3,a3,-632 # ffffffff84017b70 <frameRegisters>
    0x84014df0    0x2a    auipc a1,0x3
    0x84014df4    0x2e    addi a1,a1,-512 # ffffffff84017bf0 <gpRegisters>
    0x84014df8    0x32    ld a4,0(a3)
    0x84014dfa    0x34    slli a4,a4,0x3
    0x84014dfc    0x36    add a2,s1,a4
    0x84014e00    0x3a    ld a2,0(a2)
    0x84014e02    0x3c    add a4,a4,s0
    0x84014e04    0x3e    sd a2,0(a4)
    0x84014e06    0x40    addi a3,a3,8
    0x84014e08    0x42    bne a3,a1,ffffffff84014df8 <invokeTCB_CopyRegisters+0x32>
    0x84014e0c    0x46    ld a5,264(s0)
    0x84014e10    0x4a    sd a5,272(s0)
    0x84014e14    0x4e    beqz s2,ffffffff84014e3c <invokeTCB_CopyRegisters+0x76>
    0x84014e18    0x52    auipc a4,0x3
    0x84014e1c    0x56    addi a4,a4,-552 # ffffffff84017bf0 <gpRegisters>
    0x84014e20    0x5a    auipc a2,0x3
    0x84014e24    0x5e    addi a2,a2,-432 # ffffffff84017c70 <gpRegisters+0x80>
    0x84014e28    0x62    ld a5,0(a4)
    0x84014e2a    0x64    slli a5,a5,0x3
    0x84014e2c    0x66    add a3,s1,a5
    0x84014e30    0x6a    ld a3,0(a3)
    0x84014e32    0x6c    add a5,a5,s0
    0x84014e34    0x6e    sd a3,0(a5)
    0x84014e36    0x70    addi a4,a4,8
    0x84014e38    0x72    bne a4,a2,ffffffff84014e28 <invokeTCB_CopyRegisters+0x62>
    0x84014e3c    0x76    auipc a5,0x1a
    0x84014e40    0x7a    ld a5,-932(a5) # ffffffff8402ea98 <ksCurThread>
    0x84014e44    0x7e    beq a5,s0,ffffffff84014e6a <invokeTCB_CopyRegisters+0xa4>
    0x84014e48    0x82    li a0,0
    0x84014e4a    0x84    ld ra,40(sp)          ; stack access
    0x84014e4c    0x86    ld s0,32(sp)          ; stack access
    0x84014e4e    0x88    ld s1,24(sp)          ; stack access
    0x84014e50    0x8a    ld s2,16(sp)          ; stack access
    0x84014e52    0x8c    ld s3,8(sp)           ; stack access
    0x84014e54    0x8e    ld s4,0(sp)           ; stack access
    0x84014e56    0x90    addi sp,sp,48
    0x84014e58    0x92    ret
    0x84014e5a    0x94    mv a0,a1
    0x84014e5c    0x96    jal ra,ffffffff84012d8e <suspend>
    0x84014e60    0x9a    j ffffffff84014de0 <invokeTCB_CopyRegisters+0x1a>
    0x84014e62    0x9c    mv a0,s0
    0x84014e64    0x9e    jal ra,ffffffff840137c4 <restart>
    0x84014e68    0xa2    j ffffffff84014de4 <invokeTCB_CopyRegisters+0x1e>
    0x84014e6a    0xa4    jal ra,ffffffff84012272 <rescheduleRequired>
    0x84014e6e    0xa8    j ffffffff84014e48 <invokeTCB_CopyRegisters+0x82>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 101 nodes.

Section c_handle_exception (216 of 266)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 17 instructions.

Skipping 14202573 csrr a0,scause


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x840141b2     0x0    addi sp,sp,-16
    0x840141b4     0x2    sd ra,8(sp)           ; stack access
    0x840141b6     0x4    csrr a0,scause
    0x840141ba     0x8    li a5,15
    0x840141bc     0xa    bltu a5,a0,ffffffff840141dc <c_handle_exception+0x2a>
    0x840141c0     0xe    slli a4,a0,0x2
    0x840141c4    0x12    auipc a3,0x3
    0x840141c8    0x16    addi a3,a3,1776 # ffffffff840178b4 <__global_pointer$>
    0x840141cc    0x1a    add a4,a4,a3
    0x840141ce    0x1c    lw a5,0(a4)
    0x840141d0    0x1e    add a5,a5,a3
    0x840141d2    0x20    jr a5
    0x840141d4    0x22    jal ra,ffffffff84014180 <handleVMFaultEvent>
    0x840141d8    0x26    jal ra,ffffffff84010182 <restore_user_context>
    0x840141dc    0x2a    li a1,0
    0x840141de    0x2c    jal ra,ffffffff84014142 <handleUserLevelFault>
    0x840141e2    0x30    j ffffffff840141d8 <c_handle_exception+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 26 nodes.

Section handleUserLevelFault (217 of 266)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x84014142     0x0    addi sp,sp,-16
    0x84014144     0x2    sd ra,8(sp)           ; stack access
    0x84014146     0x4    auipc a4,0x8
    0x8401414a     0x8    addi a4,a4,1722 # ffffffff8401c800 <current_fault>
    0x8401414e     0xc    slli a1,a1,0x4
    0x84014150     0xe    li a5,-1
    0x84014152    0x10    srli a5,a5,0x20
    0x84014154    0x12    and a1,a1,a5
    0x84014156    0x14    slli a0,a0,0x20
    0x84014158    0x16    or a1,a1,a0
    0x8401415a    0x18    ori a1,a1,3
    0x8401415e    0x1c    sd a1,0(a4)
    0x84014160    0x1e    sd zero,8(a4)
    0x84014164    0x22    auipc a0,0x1b
    0x84014168    0x26    ld a0,-1740(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401416c    0x2a    jal ra,ffffffff840140f4 <handleFault>
    0x84014170    0x2e    jal ra,ffffffff84012932 <schedule>
    0x84014174    0x32    jal ra,ffffffff840123c8 <activateThread>
    0x84014178    0x36    li a0,0
    0x8401417a    0x38    ld ra,8(sp)           ; stack access
    0x8401417c    0x3a    addi sp,sp,16
    0x8401417e    0x3c    ret

Proving inst theorems
---------------------

22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 31 nodes.

Section handleUnknownSyscall (218 of 266)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x84014114     0x0    addi sp,sp,-16
    0x84014116     0x2    sd ra,8(sp)           ; stack access
    0x84014118     0x4    auipc a5,0x8
    0x8401411c     0x8    addi a5,a5,1768 # ffffffff8401c800 <current_fault>
    0x84014120     0xc    li a4,2
    0x84014122     0xe    sd a4,0(a5)
    0x84014124    0x10    sd a0,8(a5)
    0x84014126    0x12    auipc a0,0x1b
    0x8401412a    0x16    ld a0,-1678(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401412e    0x1a    jal ra,ffffffff840140f4 <handleFault>
    0x84014132    0x1e    jal ra,ffffffff84012932 <schedule>
    0x84014136    0x22    jal ra,ffffffff840123c8 <activateThread>
    0x8401413a    0x26    li a0,0
    0x8401413c    0x28    ld ra,8(sp)           ; stack access
    0x8401413e    0x2a    addi sp,sp,16
    0x84014140    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 25 nodes.

Section doIPCTransfer (219 of 266)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 46 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `doIPCTransfer`:

    0x84013d60     0x0    addi sp,sp,-64
    0x84013d62     0x2    sd ra,56(sp)          ; stack access
    0x84013d64     0x4    sd s0,48(sp)          ; stack access
    0x84013d66     0x6    sd s1,40(sp)          ; stack access
    0x84013d68     0x8    sd s2,32(sp)          ; stack access
    0x84013d6a     0xa    sd s3,24(sp)          ; stack access
    0x84013d6c     0xc    sd s4,16(sp)          ; stack access
    0x84013d6e     0xe    sd s5,8(sp)           ; stack access
    0x84013d70    0x10    mv s0,a0
    0x84013d72    0x12    mv s5,a1
    0x84013d74    0x14    mv s2,a2
    0x84013d76    0x16    mv s4,a3
    0x84013d78    0x18    mv s1,a4
    0x84013d7a    0x1a    mv a1,a4
    0x84013d7c    0x1c    li a0,1
    0x84013d7e    0x1e    jal ra,ffffffff840103be <lookupIPCBuffer>
    0x84013d82    0x22    mv s3,a0
    0x84013d84    0x24    ld a5,312(s0)
    0x84013d88    0x28    andi a5,a5,15
    0x84013d8a    0x2a    bnez a5,ffffffff84013db8 <doIPCTransfer+0x58>
    0x84013d8c    0x2c    mv a1,s0
    0x84013d8e    0x2e    li a0,0
    0x84013d90    0x30    jal ra,ffffffff840103be <lookupIPCBuffer>
    0x84013d94    0x34    mv a1,a0
    0x84013d96    0x36    mv a6,s3
    0x84013d98    0x38    mv a5,s1
    0x84013d9a    0x3a    mv a4,s4
    0x84013d9c    0x3c    mv a3,s2
    0x84013d9e    0x3e    mv a2,s5
    0x84013da0    0x40    mv a0,s0
    0x84013da2    0x42    jal ra,ffffffff84013be2 <doNormalTransfer>
    0x84013da6    0x46    ld ra,56(sp)          ; stack access
    0x84013da8    0x48    ld s0,48(sp)          ; stack access
    0x84013daa    0x4a    ld s1,40(sp)          ; stack access
    0x84013dac    0x4c    ld s2,32(sp)          ; stack access
    0x84013dae    0x4e    ld s3,24(sp)          ; stack access
    0x84013db0    0x50    ld s4,16(sp)          ; stack access
    0x84013db2    0x52    ld s5,8(sp)           ; stack access
    0x84013db4    0x54    addi sp,sp,64
    0x84013db6    0x56    ret
    0x84013db8    0x58    mv a3,a0
    0x84013dba    0x5a    mv a2,s1
    0x84013dbc    0x5c    mv a1,s0
    0x84013dbe    0x5e    mv a0,s2
    0x84013dc0    0x60    jal ra,ffffffff840111ea <doFaultTransfer>
    0x84013dc4    0x64    j ffffffff84013da6 <doIPCTransfer+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 68 nodes.

Section handleInterrupt (220 of 266)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 87 instructions.

Skipping c01027f3 rdtime a5

Skipping 00000073 ecall

Skipping c0102773 rdtime a4

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterrupt`:

    0x84013900      0x0    li a5,54
    0x84013904      0x4    bltu a5,a0,ffffffff84013964 <handleInterrupt+0x64>
    0x84013908      0x8    addi sp,sp,-16
    0x8401390a      0xa    sd ra,8(sp)           ; stack access
    0x8401390c      0xc    slli a4,a0,0x3
    0x84013910     0x10    auipc a5,0xa
    0x84013914     0x14    addi a5,a5,904 # ffffffff8401dc98 <intStateIRQTable>
    0x84013918     0x18    add a5,a5,a4
    0x8401391a     0x1a    ld a5,0(a5)
    0x8401391c     0x1c    li a4,2
    0x8401391e     0x1e    beq a5,a4,ffffffff840139a6 <handleInterrupt+0xa6>
    0x84013922     0x22    bltu a4,a5,ffffffff84013992 <handleInterrupt+0x92>
    0x84013926     0x26    beqz a5,ffffffff840139c8 <handleInterrupt+0xc8>
    0x84013928     0x28    slli a0,a0,0x5
    0x8401392a     0x2a    auipc a5,0x1a
    0x8401392e     0x2e    addi a5,a5,1750 # ffffffff8402e000 <intStateIRQNode>
    0x84013932     0x32    add a5,a5,a0
    0x84013934     0x34    ld a4,0(a5)
    0x84013936     0x36    srli a2,a4,0x3b
    0x8401393a     0x3a    li a3,6
    0x8401393c     0x3c    bne a2,a3,ffffffff84013998 <handleInterrupt+0x98>
    0x84013940     0x40    slli a3,a4,0x6
    0x84013944     0x44    bgez a3,ffffffff84013998 <handleInterrupt+0x98>
    0x84013948     0x48    slli a0,a4,0x19
    0x8401394c     0x4c    srli a0,a0,0x19
    0x8401394e     0x4e    slli a3,a4,0x19
    0x84013952     0x52    bgez a3,ffffffff8401395c <handleInterrupt+0x5c>
    0x84013956     0x56    li a4,-1
    0x84013958     0x58    slli a4,a4,0x27
    0x8401395a     0x5a    or a0,a0,a4
    0x8401395c     0x5c    ld a1,8(a5)
    0x8401395e     0x5e    jal ra,ffffffff84013804 <sendSignal>
    0x84013962     0x62    j ffffffff84013998 <handleInterrupt+0x98>
    0x84013964     0x64    srli a4,a0,0x5
    0x84013968     0x68    slli a4,a4,0x2
    0x8401396a     0x6a    lui a5,0xcc002
    0x8401396e     0x6e    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x84013972     0x72    add a4,a4,a5
    0x84013974     0x74    lw a3,0(a4)
    0x84013976     0x76    andi a0,a0,31
    0x84013978     0x78    li a5,1
    0x8401397a     0x7a    sll a0,a5,a0
    0x8401397e     0x7e    not a5,a0
    0x84013982     0x82    and a5,a5,a3
    0x84013984     0x84    sext.w a5,a5
    0x84013986     0x86    sw a5,0(a4)
    0x84013988     0x88    auipc a5,0x5
    0x8401398c     0x8c    sw zero,-1920(a5) # ffffffff84018208 <active_irq>
    0x84013990     0x90    ret
    0x84013992     0x92    li a4,3
    0x84013994     0x94    bne a5,a4,ffffffff84013a00 <handleInterrupt+0x100>
    0x84013998     0x98    auipc a5,0x5
    0x8401399c     0x9c    sw zero,-1936(a5) # ffffffff84018208 <active_irq>
    0x840139a0     0xa0    ld ra,8(sp)           ; stack access
    0x840139a2     0xa2    addi sp,sp,16
    0x840139a4     0xa4    ret
    0x840139a6     0xa6    jal ra,ffffffff8401271e <timerTick>
    0x840139aa     0xaa    rdtime a5
    0x840139ae     0xae    addi a5,a5,2000
    0x840139b2     0xb2    mv a0,a5
    0x840139b4     0xb4    li a1,0
    0x840139b6     0xb6    li a2,0
    0x840139b8     0xb8    li a7,0
    0x840139ba     0xba    ecall
    0x840139be     0xbe    rdtime a4
    0x840139c2     0xc2    bltu a5,a4,ffffffff840139aa <handleInterrupt+0xaa>
    0x840139c6     0xc6    j ffffffff84013998 <handleInterrupt+0x98>
    0x840139c8     0xc8    li a5,54
    0x840139cc     0xcc    beq a0,a5,ffffffff840139f6 <handleInterrupt+0xf6>
    0x840139d0     0xd0    srli a4,a0,0x5
    0x840139d4     0xd4    slli a4,a4,0x2
    0x840139d6     0xd6    lui a5,0xcc002
    0x840139da     0xda    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x840139de     0xde    add a4,a4,a5
    0x840139e0     0xe0    lw a3,0(a4)
    0x840139e2     0xe2    andi a0,a0,31
    0x840139e4     0xe4    li a5,1
    0x840139e6     0xe6    sll a0,a5,a0
    0x840139ea     0xea    not a5,a0
    0x840139ee     0xee    and a5,a5,a3
    0x840139f0     0xf0    sext.w a5,a5
    0x840139f2     0xf2    sw a5,0(a4)
    0x840139f4     0xf4    j ffffffff84013998 <handleInterrupt+0x98>
    0x840139f6     0xf6    li a5,32
    0x840139fa     0xfa    csrrc a5,sie,a5
    0x840139fe     0xfe    j ffffffff84013998 <handleInterrupt+0x98>
    0x84013a00    0x100    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
87 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 127 nodes.

Section decodeIRQHandlerInvocation (221 of 266)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 74 instructions.


Stack analysis
---------------

11 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x840136da     0x0    addi sp,sp,-48
    0x840136dc     0x2    sd ra,40(sp)          ; stack access
    0x840136de     0x4    sd s0,32(sp)          ; stack access
    0x840136e0     0x6    sd s1,24(sp)          ; stack access
    0x840136e2     0x8    sd s2,16(sp)          ; stack access
    0x840136e4     0xa    mv s0,a1
    0x840136e6     0xc    li a5,27
    0x840136e8     0xe    beq a0,a5,ffffffff8401372c <decodeIRQHandlerInvocation+0x52>
    0x840136ec    0x12    li a5,28
    0x840136ee    0x14    beq a0,a5,ffffffff84013792 <decodeIRQHandlerInvocation+0xb8>
    0x840136f2    0x18    li a5,26
    0x840136f4    0x1a    beq a0,a5,ffffffff84013706 <decodeIRQHandlerInvocation+0x2c>
    0x840136f8    0x1e    li a5,3
    0x840136fa    0x20    auipc a4,0xa
    0x840136fe    0x24    sd a5,1406(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84013702    0x28    li a0,3
    0x84013704    0x2a    j ffffffff84013720 <decodeIRQHandlerInvocation+0x46>
    0x84013706    0x2c    li a1,2
    0x84013708    0x2e    auipc a0,0x1b
    0x8401370c    0x32    ld a0,912(a0) # ffffffff8402ea98 <ksCurThread>
    0x84013710    0x36    jal ra,ffffffff840122d8 <setThreadState>
    0x84013714    0x3a    sext.w a1,s0
    0x84013718    0x3e    lui a5,0xcc202
    0x8401371c    0x42    sw a1,4(a5)
    0x8401371e    0x44    li a0,0
    0x84013720    0x46    ld ra,40(sp)          ; stack access
    0x84013722    0x48    ld s0,32(sp)          ; stack access
    0x84013724    0x4a    ld s1,24(sp)          ; stack access
    0x84013726    0x4c    ld s2,16(sp)          ; stack access
    0x84013728    0x4e    addi sp,sp,48
    0x8401372a    0x50    ret
    0x8401372c    0x52    auipc s1,0xa
    0x84013730    0x56    ld s1,1364(s1) # ffffffff8401dc80 <current_extra_caps>
    0x84013734    0x5a    beqz s1,ffffffff84013766 <decodeIRQHandlerInvocation+0x8c>
    0x84013736    0x5c    ld s2,0(s1)
    0x8401373a    0x60    sd s2,0(sp)           ; stack access
    0x8401373c    0x62    ld a5,8(s1)
    0x8401373e    0x64    sd a5,8(sp)           ; stack access
    0x84013740    0x66    srli a4,s2,0x3b
    0x84013744    0x6a    li a5,6
    0x84013746    0x6c    bne a4,a5,ffffffff84013752 <decodeIRQHandlerInvocation+0x78>
    0x8401374a    0x70    slli a5,s2,0x6
    0x8401374e    0x74    bltz a5,ffffffff84013774 <decodeIRQHandlerInvocation+0x9a>
    0x84013752    0x78    auipc a5,0xa
    0x84013756    0x7c    addi a5,a5,1270 # ffffffff8401dc48 <current_syscall_error>
    0x8401375a    0x80    li a4,2
    0x8401375c    0x82    sd a4,48(a5)
    0x8401375e    0x84    sd zero,8(a5)
    0x84013762    0x88    li a0,3
    0x84013764    0x8a    j ffffffff84013720 <decodeIRQHandlerInvocation+0x46>
    0x84013766    0x8c    li a5,7
    0x84013768    0x8e    auipc a4,0xa
    0x8401376c    0x92    sd a5,1296(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84013770    0x96    li a0,3
    0x84013772    0x98    j ffffffff84013720 <decodeIRQHandlerInvocation+0x46>
    0x84013774    0x9a    li a1,2
    0x84013776    0x9c    auipc a0,0x1b
    0x8401377a    0xa0    ld a0,802(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401377e    0xa4    jal ra,ffffffff840122d8 <setThreadState>
    0x84013782    0xa8    mv a3,s1
    0x84013784    0xaa    mv a1,s2
    0x84013786    0xac    ld a2,8(sp)           ; stack access
    0x84013788    0xae    mv a0,s0
    0x8401378a    0xb0    jal ra,ffffffff8401368a <invokeIRQHandler_SetIRQHandler>
    0x8401378e    0xb4    li a0,0
    0x84013790    0xb6    j ffffffff84013720 <decodeIRQHandlerInvocation+0x46>
    0x84013792    0xb8    li a1,2
    0x84013794    0xba    auipc a0,0x1b
    0x84013798    0xbe    ld a0,772(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401379c    0xc2    jal ra,ffffffff840122d8 <setThreadState>
    0x840137a0    0xc6    mv a0,s0
    0x840137a2    0xc8    jal ra,ffffffff840136c0 <invokeIRQHandler_ClearIRQHandler>
    0x840137a6    0xcc    li a0,0
    0x840137a8    0xce    j ffffffff84013720 <decodeIRQHandlerInvocation+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 114 nodes.

Section cteDeleteOne (222 of 266)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 23 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteDeleteOne`:

    0x84013656     0x0    ld a5,0(a0)
    0x84013658     0x2    srli a5,a5,0x3b
    0x8401365a     0x4    bnez a5,ffffffff8401365e <cteDeleteOne+0x8>
    0x8401365c     0x6    ret
    0x8401365e     0x8    addi sp,sp,-64
    0x84013660     0xa    sd ra,56(sp)          ; stack access
    0x84013662     0xc    sd s0,48(sp)          ; stack access
    0x84013664     0xe    mv s0,a0
    0x84013666    0x10    jal ra,ffffffff84011e80 <isFinalCapability>
    0x8401366a    0x14    mv a3,a0
    0x8401366c    0x16    li a4,1
    0x8401366e    0x18    ld a1,0(s0)
    0x84013670    0x1a    ld a2,8(s0)
    0x84013672    0x1c    mv a0,sp
    0x84013674    0x1e    jal ra,ffffffff84012dc6 <finaliseCap>
    0x84013678    0x22    li a1,0
    0x8401367a    0x24    li a2,0
    0x8401367c    0x26    mv a0,s0
    0x8401367e    0x28    jal ra,ffffffff84011746 <emptySlot>
    0x84013682    0x2c    ld ra,56(sp)          ; stack access
    0x84013684    0x2e    ld s0,48(sp)          ; stack access
    0x84013686    0x30    addi sp,sp,64
    0x84013688    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 37 nodes.

Section cteRevoke (223 of 266)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 54 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cteRevoke`:

    0x84013144     0x0    addi sp,sp,-64
    0x84013146     0x2    sd ra,56(sp)          ; stack access
    0x84013148     0x4    sd s0,48(sp)          ; stack access
    0x8401314a     0x6    sd s1,40(sp)          ; stack access
    0x8401314c     0x8    sd s2,32(sp)          ; stack access
    0x8401314e     0xa    sd s3,24(sp)          ; stack access
    0x84013150     0xc    sd s4,16(sp)          ; stack access
    0x84013152     0xe    sd s5,8(sp)           ; stack access
    0x84013154    0x10    mv s1,a0
    0x84013156    0x12    ld a5,24(a0)
    0x84013158    0x14    lui a0,0xf8000
    0x8401315c    0x18    srli a0,a0,0x19
    0x8401315e    0x1a    and a0,a0,a5
    0x84013160    0x1c    slli a4,a5,0x19
    0x84013164    0x20    bgez a4,ffffffff84013182 <cteRevoke+0x3e>
    0x84013168    0x24    li s0,-1
    0x8401316a    0x26    slli s0,s0,0x27
    0x8401316c    0x28    or s0,s0,a0
    0x8401316e    0x2a    li s3,1
    0x84013170    0x2c    lui s2,0xf8000
    0x84013174    0x30    srli s2,s2,0x19
    0x84013178    0x34    slli s5,s3,0x26
    0x8401317c    0x38    li s4,-1
    0x8401317e    0x3a    slli s4,s4,0x27
    0x84013180    0x3c    j ffffffff8401319c <cteRevoke+0x58>
    0x84013182    0x3e    mv s0,a0
    0x84013184    0x40    bnez a0,ffffffff8401316e <cteRevoke+0x2a>
    0x84013186    0x42    ld ra,56(sp)          ; stack access
    0x84013188    0x44    ld s0,48(sp)          ; stack access
    0x8401318a    0x46    ld s1,40(sp)          ; stack access
    0x8401318c    0x48    ld s2,32(sp)          ; stack access
    0x8401318e    0x4a    ld s3,24(sp)          ; stack access
    0x84013190    0x4c    ld s4,16(sp)          ; stack access
    0x84013192    0x4e    ld s5,8(sp)           ; stack access
    0x84013194    0x50    addi sp,sp,64
    0x84013196    0x52    ret
    0x84013198    0x54    or s0,a0,s4
    0x8401319c    0x58    mv a1,s0
    0x8401319e    0x5a    mv a0,s1
    0x840131a0    0x5c    jal ra,ffffffff84011cf6 <isMDBParentOf>
    0x840131a4    0x60    beqz a0,ffffffff84013186 <cteRevoke+0x42>
    0x840131a6    0x62    mv a1,s3
    0x840131a8    0x64    mv a0,s0
    0x840131aa    0x66    jal ra,ffffffff84012f7c <cteDelete>
    0x840131ae    0x6a    bnez a0,ffffffff84013186 <cteRevoke+0x42>
    0x840131b0    0x6c    jal ra,ffffffff84011250 <preemptionPoint>
    0x840131b4    0x70    bnez a0,ffffffff84013186 <cteRevoke+0x42>
    0x840131b6    0x72    ld a5,24(s1)
    0x840131b8    0x74    and a0,a5,s2
    0x840131bc    0x78    and a5,a5,s5
    0x840131c0    0x7c    bnez a5,ffffffff84013198 <cteRevoke+0x54>
    0x840131c2    0x7e    beqz a0,ffffffff84013186 <cteRevoke+0x42>
    0x840131c4    0x80    mv s0,a0
    0x840131c6    0x82    j ffffffff8401319c <cteRevoke+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 88 nodes.

Section suspend (224 of 266)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x84012d8e     0x0    addi sp,sp,-16
    0x84012d90     0x2    sd ra,8(sp)           ; stack access
    0x84012d92     0x4    sd s0,0(sp)           ; stack access
    0x84012d94     0x6    mv s0,a0
    0x84012d96     0x8    jal ra,ffffffff84012caa <cancelIPC>
    0x84012d9a     0xc    ld a5,280(s0)
    0x84012d9e    0x10    andi a5,a5,15
    0x84012da0    0x12    li a4,1
    0x84012da2    0x14    beq a5,a4,ffffffff84012dbc <suspend+0x2e>
    0x84012da6    0x18    li a1,0
    0x84012da8    0x1a    mv a0,s0
    0x84012daa    0x1c    jal ra,ffffffff840122d8 <setThreadState>
    0x84012dae    0x20    mv a0,s0
    0x84012db0    0x22    jal ra,ffffffff84012770 <tcbSchedDequeue>
    0x84012db4    0x26    ld ra,8(sp)           ; stack access
    0x84012db6    0x28    ld s0,0(sp)           ; stack access
    0x84012db8    0x2a    addi sp,sp,16
    0x84012dba    0x2c    ret
    0x84012dbc    0x2e    ld a5,272(s0)
    0x84012dc0    0x32    sd a5,264(s0)
    0x84012dc4    0x36    j ffffffff84012da6 <suspend+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 34 nodes.

Section setPriority (225 of 266)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setPriority`:

    0x84012aa0     0x0    addi sp,sp,-32
    0x84012aa2     0x2    sd ra,24(sp)          ; stack access
    0x84012aa4     0x4    sd s0,16(sp)          ; stack access
    0x84012aa6     0x6    sd s1,8(sp)           ; stack access
    0x84012aa8     0x8    mv s0,a0
    0x84012aaa     0xa    mv s1,a1
    0x84012aac     0xc    jal ra,ffffffff84012770 <tcbSchedDequeue>
    0x84012ab0    0x10    sd s1,360(s0)
    0x84012ab4    0x14    ld a5,280(s0)
    0x84012ab8    0x18    andi a5,a5,15
    0x84012aba    0x1a    addi a5,a5,-1
    0x84012abc    0x1c    li a4,1
    0x84012abe    0x1e    bgeu a4,a5,ffffffff84012acc <setPriority+0x2c>
    0x84012ac2    0x22    ld ra,24(sp)          ; stack access
    0x84012ac4    0x24    ld s0,16(sp)          ; stack access
    0x84012ac6    0x26    ld s1,8(sp)           ; stack access
    0x84012ac8    0x28    addi sp,sp,32
    0x84012aca    0x2a    ret
    0x84012acc    0x2c    auipc a5,0x1c
    0x84012ad0    0x30    ld a5,-52(a5) # ffffffff8402ea98 <ksCurThread>
    0x84012ad4    0x34    beq a5,s0,ffffffff84012ae0 <setPriority+0x40>
    0x84012ad8    0x38    mv a0,s0
    0x84012ada    0x3a    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x84012ade    0x3e    j ffffffff84012ac2 <setPriority+0x22>
    0x84012ae0    0x40    jal ra,ffffffff84012272 <rescheduleRequired>
    0x84012ae4    0x44    j ffffffff84012ac2 <setPriority+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 43 nodes.

Section setDomain (226 of 266)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setDomain`:

    0x84012a5a     0x0    addi sp,sp,-32
    0x84012a5c     0x2    sd ra,24(sp)          ; stack access
    0x84012a5e     0x4    sd s0,16(sp)          ; stack access
    0x84012a60     0x6    sd s1,8(sp)           ; stack access
    0x84012a62     0x8    mv s0,a0
    0x84012a64     0xa    mv s1,a1
    0x84012a66     0xc    jal ra,ffffffff84012770 <tcbSchedDequeue>
    0x84012a6a    0x10    sd s1,344(s0)
    0x84012a6e    0x14    ld a5,280(s0)
    0x84012a72    0x18    andi a5,a5,15
    0x84012a74    0x1a    addi a5,a5,-1
    0x84012a76    0x1c    li a4,1
    0x84012a78    0x1e    bgeu a4,a5,ffffffff84012a92 <setDomain+0x38>
    0x84012a7c    0x22    auipc a5,0x1c
    0x84012a80    0x26    ld a5,28(a5) # ffffffff8402ea98 <ksCurThread>
    0x84012a84    0x2a    beq a5,s0,ffffffff84012a9a <setDomain+0x40>
    0x84012a88    0x2e    ld ra,24(sp)          ; stack access
    0x84012a8a    0x30    ld s0,16(sp)          ; stack access
    0x84012a8c    0x32    ld s1,8(sp)           ; stack access
    0x84012a8e    0x34    addi sp,sp,32
    0x84012a90    0x36    ret
    0x84012a92    0x38    mv a0,s0
    0x84012a94    0x3a    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x84012a98    0x3e    j ffffffff84012a7c <setDomain+0x22>
    0x84012a9a    0x40    jal ra,ffffffff84012272 <rescheduleRequired>
    0x84012a9e    0x44    j ffffffff84012a88 <setDomain+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 43 nodes.

Section chooseThread (227 of 266)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 44 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `chooseThread`:

    0x84012848     0x0    addi sp,sp,-32
    0x8401284a     0x2    sd ra,24(sp)          ; stack access
    0x8401284c     0x4    sd s0,16(sp)          ; stack access
    0x8401284e     0x6    sd s1,8(sp)           ; stack access
    0x84012850     0x8    auipc s1,0x1c
    0x84012854     0xc    ld s1,-80(s1) # ffffffff8402e800 <ksCurDomain>
    0x84012858    0x10    slli a4,s1,0x3
    0x8401285c    0x14    auipc a5,0x1c
    0x84012860    0x18    addi a5,a5,444 # ffffffff8402ea18 <ksReadyQueuesL1Bitmap>
    0x84012864    0x1c    add a5,a5,a4
    0x84012866    0x1e    ld a0,0(a5)
    0x84012868    0x20    beqz a0,ffffffff840128be <chooseThread+0x76>
    0x8401286a    0x22    jal ra,ffffffff84017074 <__clzdi2>
    0x8401286e    0x26    sext.w s0,a0
    0x84012872    0x2a    slli a5,s1,0x2
    0x84012876    0x2e    addi a4,s0,-60
    0x8401287a    0x32    add a5,a5,a4
    0x8401287c    0x34    slli a5,a5,0x3
    0x8401287e    0x36    auipc a4,0x1c
    0x84012882    0x3a    addi a4,a4,-110 # ffffffff8402e810 <ksReadyQueuesL2Bitmap>
    0x84012886    0x3e    add a5,a5,a4
    0x84012888    0x40    ld a0,0(a5)
    0x8401288a    0x42    jal ra,ffffffff84017074 <__clzdi2>
    0x8401288e    0x46    sext.w a0,a0
    0x84012890    0x48    li a5,63
    0x84012894    0x4c    sub s0,a5,s0
    0x84012898    0x50    slli s0,s0,0x6
    0x8401289a    0x52    sub a5,a5,a0
    0x8401289c    0x54    or s0,s0,a5
    0x8401289e    0x56    slli s1,s1,0x8
    0x840128a0    0x58    add s0,s0,s1
    0x840128a2    0x5a    slli s0,s0,0x4
    0x840128a4    0x5c    auipc s1,0xb
    0x840128a8    0x60    addi s1,s1,1460 # ffffffff8401de58 <ksReadyQueues>
    0x840128ac    0x64    add s0,s0,s1
    0x840128ae    0x66    ld a0,0(s0)
    0x840128b0    0x68    jal ra,ffffffff84012826 <switchToThread>
    0x840128b4    0x6c    ld ra,24(sp)          ; stack access
    0x840128b6    0x6e    ld s0,16(sp)          ; stack access
    0x840128b8    0x70    ld s1,8(sp)           ; stack access
    0x840128ba    0x72    addi sp,sp,32
    0x840128bc    0x74    ret
    0x840128be    0x76    jal ra,ffffffff8401122c <switchToIdleThread>
    0x840128c2    0x7a    j ffffffff840128b4 <chooseThread+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 61 nodes.

Section cancelAllSignals (228 of 266)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 43 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllSignals`:

    0x84012624     0x0    ld a5,0(a0)
    0x84012626     0x2    andi a3,a5,3
    0x8401262a     0x6    li a4,1
    0x8401262c     0x8    beq a3,a4,ffffffff84012632 <cancelAllSignals+0xe>
    0x84012630     0xc    ret
    0x84012632     0xe    addi sp,sp,-16
    0x84012634    0x10    sd ra,8(sp)           ; stack access
    0x84012636    0x12    sd s0,0(sp)           ; stack access
    0x84012638    0x14    ld a4,8(a0)
    0x8401263a    0x16    slli s0,a4,0x19
    0x8401263e    0x1a    srli s0,s0,0x19
    0x84012640    0x1c    slli a3,a4,0x19
    0x84012644    0x20    bgez a3,ffffffff8401267c <cancelAllSignals+0x58>
    0x84012648    0x24    li a3,-1
    0x8401264a    0x26    slli a3,a3,0x27
    0x8401264c    0x28    or s0,s0,a3
    0x8401264e    0x2a    and a4,a4,a3
    0x84012650    0x2c    sd a4,8(a0)
    0x84012652    0x2e    lui a4,0x2000
    0x84012656    0x32    addi a4,a4,-4
    0x84012658    0x34    and a5,a5,a4
    0x8401265a    0x36    sd a5,0(a0)
    0x8401265c    0x38    li a1,2
    0x8401265e    0x3a    mv a0,s0
    0x84012660    0x3c    jal ra,ffffffff840122d8 <setThreadState>
    0x84012664    0x40    mv a0,s0
    0x84012666    0x42    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x8401266a    0x46    ld s0,408(s0)
    0x8401266e    0x4a    bnez s0,ffffffff8401265c <cancelAllSignals+0x38>
    0x84012670    0x4c    jal ra,ffffffff84012272 <rescheduleRequired>
    0x84012674    0x50    ld ra,8(sp)           ; stack access
    0x84012676    0x52    ld s0,0(sp)           ; stack access
    0x84012678    0x54    addi sp,sp,16
    0x8401267a    0x56    ret
    0x8401267c    0x58    srli a4,a4,0x27
    0x8401267e    0x5a    slli a4,a4,0x27
    0x84012680    0x5c    sd a4,8(a0)
    0x84012682    0x5e    lui a4,0x2000
    0x84012686    0x62    addi a4,a4,-4
    0x84012688    0x64    and a5,a5,a4
    0x8401268a    0x66    sd a5,0(a0)
    0x8401268c    0x68    beqz s0,ffffffff84012670 <cancelAllSignals+0x4c>
    0x8401268e    0x6a    j ffffffff8401265c <cancelAllSignals+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 67 nodes.

Section cancelAllIPC (229 of 266)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllIPC`:

    0x840125e6     0x0    ld a5,0(a0)
    0x840125e8     0x2    andi a4,a5,3
    0x840125ec     0x6    beqz a4,ffffffff84012622 <cancelAllIPC+0x3c>
    0x840125ee     0x8    addi sp,sp,-16
    0x840125f0     0xa    sd ra,8(sp)           ; stack access
    0x840125f2     0xc    sd s0,0(sp)           ; stack access
    0x840125f4     0xe    ld s0,8(a0)
    0x840125f6    0x10    sd zero,8(a0)
    0x840125fa    0x14    srli a5,a5,0x27
    0x840125fc    0x16    slli a5,a5,0x27
    0x840125fe    0x18    sd a5,0(a0)
    0x84012600    0x1a    beqz s0,ffffffff84012616 <cancelAllIPC+0x30>
    0x84012602    0x1c    li a1,2
    0x84012604    0x1e    mv a0,s0
    0x84012606    0x20    jal ra,ffffffff840122d8 <setThreadState>
    0x8401260a    0x24    mv a0,s0
    0x8401260c    0x26    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x84012610    0x2a    ld s0,408(s0)
    0x84012614    0x2e    bnez s0,ffffffff84012602 <cancelAllIPC+0x1c>
    0x84012616    0x30    jal ra,ffffffff84012272 <rescheduleRequired>
    0x8401261a    0x34    ld ra,8(sp)           ; stack access
    0x8401261c    0x36    ld s0,0(sp)           ; stack access
    0x8401261e    0x38    addi sp,sp,16
    0x84012620    0x3a    ret
    0x84012622    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 45 nodes.

Section createNewObjects (230 of 266)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 52 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `createNewObjects`:

    0x8401216c     0x0    addi sp,sp,-96
    0x8401216e     0x2    sd ra,88(sp)          ; stack access
    0x84012170     0x4    sd s0,80(sp)          ; stack access
    0x84012172     0x6    sd s1,72(sp)          ; stack access
    0x84012174     0x8    sd s2,64(sp)          ; stack access
    0x84012176     0xa    sd s3,56(sp)          ; stack access
    0x84012178     0xc    sd s4,48(sp)          ; stack access
    0x8401217a     0xe    sd s5,40(sp)          ; stack access
    0x8401217c    0x10    sd s6,32(sp)          ; stack access
    0x8401217e    0x12    sd s7,24(sp)          ; stack access
    0x84012180    0x14    sd s8,16(sp)          ; stack access
    0x84012182    0x16    mv s5,a0
    0x84012184    0x18    mv s6,a1
    0x84012186    0x1a    mv s1,a2
    0x84012188    0x1c    mv s0,a3
    0x8401218a    0x1e    mv s2,a4
    0x8401218c    0x20    mv s7,a5
    0x8401218e    0x22    mv s3,a6
    0x84012190    0x24    mv s8,a7
    0x84012192    0x26    mv a1,a6
    0x84012194    0x28    jal ra,ffffffff84011838 <getObjectSize>
    0x84012198    0x2c    beqz s2,ffffffff840121cc <createNewObjects+0x60>
    0x8401219c    0x30    sext.w s4,a0
    0x840121a0    0x34    slli s0,s0,0x5
    0x840121a2    0x36    add s1,s1,s0
    0x840121a4    0x38    li s0,0
    0x840121a6    0x3a    sll a1,s0,s4
    0x840121aa    0x3e    mv a3,s8
    0x840121ac    0x40    mv a2,s3
    0x840121ae    0x42    add a1,a1,s7
    0x840121b0    0x44    mv a0,s5
    0x840121b2    0x46    jal ra,ffffffff840120b0 <createObject>
    0x840121b6    0x4a    mv a2,a0
    0x840121b8    0x4c    mv a3,a1
    0x840121ba    0x4e    mv a1,s1
    0x840121bc    0x50    mv a0,s6
    0x840121be    0x52    jal ra,ffffffff84011568 <insertNewCap>
    0x840121c2    0x56    addi s0,s0,1
    0x840121c4    0x58    addi s1,s1,32
    0x840121c8    0x5c    bne s2,s0,ffffffff840121a6 <createNewObjects+0x3a>
    0x840121cc    0x60    ld ra,88(sp)          ; stack access
    0x840121ce    0x62    ld s0,80(sp)          ; stack access
    0x840121d0    0x64    ld s1,72(sp)          ; stack access
    0x840121d2    0x66    ld s2,64(sp)          ; stack access
    0x840121d4    0x68    ld s3,56(sp)          ; stack access
    0x840121d6    0x6a    ld s4,48(sp)          ; stack access
    0x840121d8    0x6c    ld s5,40(sp)          ; stack access
    0x840121da    0x6e    ld s6,32(sp)          ; stack access
    0x840121dc    0x70    ld s7,24(sp)          ; stack access
    0x840121de    0x72    ld s8,16(sp)          ; stack access
    0x840121e0    0x74    addi sp,sp,96
    0x840121e2    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 80 nodes.

Section unmapPage (231 of 266)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 57 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `unmapPage`:

    0x84010712     0x0    addi sp,sp,-64
    0x84010714     0x2    sd ra,56(sp)          ; stack access
    0x84010716     0x4    sd s0,48(sp)          ; stack access
    0x84010718     0x6    sd s1,40(sp)          ; stack access
    0x8401071a     0x8    sd s2,32(sp)          ; stack access
    0x8401071c     0xa    mv s0,a0
    0x8401071e     0xc    mv s2,a2
    0x84010720     0xe    mv s1,a3
    0x84010722    0x10    mv a0,a1
    0x84010724    0x12    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010728    0x16    sd a0,16(sp)          ; stack access
    0x8401072a    0x18    sd a1,24(sp)          ; stack access
    0x8401072c    0x1a    beqz a0,ffffffff8401073a <unmapPage+0x28>
    0x8401072e    0x1c    ld ra,56(sp)          ; stack access
    0x84010730    0x1e    ld s0,48(sp)          ; stack access
    0x84010732    0x20    ld s1,40(sp)          ; stack access
    0x84010734    0x22    ld s2,32(sp)          ; stack access
    0x84010736    0x24    addi sp,sp,64
    0x84010738    0x26    ret
    0x8401073a    0x28    mv a1,s2
    0x8401073c    0x2a    ld a0,24(sp)          ; stack access
    0x8401073e    0x2c    jal ra,ffffffff840105a0 <lookupPTSlot>
    0x84010742    0x30    sd a0,0(sp)           ; stack access
    0x84010744    0x32    sd a1,8(sp)           ; stack access
    0x84010746    0x34    li a5,1
    0x84010748    0x36    beq s0,a5,ffffffff84010758 <unmapPage+0x46>
    0x8401074c    0x3a    li a5,2
    0x8401074e    0x3c    beq s0,a5,ffffffff8401075c <unmapPage+0x4a>
    0x84010752    0x40    beqz s0,ffffffff8401079c <unmapPage+0x8a>
    0x84010754    0x42    jal ra,ffffffff84010224 <halt>
    0x84010758    0x46    li a5,21
    0x8401075a    0x48    j ffffffff8401075e <unmapPage+0x4c>
    0x8401075c    0x4a    li a5,30
    0x8401075e    0x4c    bne a1,a5,ffffffff8401072e <unmapPage+0x1c>
    0x84010762    0x50    ld a4,0(a0)
    0x84010764    0x52    andi a5,a4,1
    0x84010768    0x56    beqz a5,ffffffff8401072e <unmapPage+0x1c>
    0x8401076a    0x58    srli a5,a4,0x1
    0x8401076e    0x5c    srli a3,a4,0x2
    0x84010772    0x60    or a5,a5,a3
    0x84010774    0x62    srli a3,a4,0x3
    0x84010778    0x66    or a5,a5,a3
    0x8401077a    0x68    andi a5,a5,1
    0x8401077c    0x6a    beqz a5,ffffffff8401072e <unmapPage+0x1c>
    0x8401077e    0x6c    slli a4,a4,0x2
    0x84010780    0x6e    lui a5,0xfff00
    0x84010784    0x72    srli a5,a5,0x8
    0x84010786    0x74    and a4,a4,a5
    0x84010788    0x76    li a3,1
    0x8401078a    0x78    slli a3,a3,0x26
    0x8401078c    0x7a    add s1,s1,a3
    0x8401078e    0x7c    bne a4,s1,ffffffff8401072e <unmapPage+0x1c>
    0x84010792    0x80    sd zero,0(a0)
    0x84010796    0x84    sfence.vma
    0x8401079a    0x88    j ffffffff8401072e <unmapPage+0x1c>
    0x8401079c    0x8a    li a5,12
    0x8401079e    0x8c    j ffffffff8401075e <unmapPage+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 93 nodes.

Section create_rootserver_objects (232 of 266)
==============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 88 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x84002404     0x0    addi sp,sp,-80
    0x84002406     0x2    sd ra,72(sp)          ; stack access
    0x84002408     0x4    sd s0,64(sp)          ; stack access
    0x8400240a     0x6    sd s1,56(sp)          ; stack access
    0x8400240c     0x8    sd s2,48(sp)          ; stack access
    0x8400240e     0xa    sd s3,40(sp)          ; stack access
    0x84002410     0xc    sd s4,32(sp)          ; stack access
    0x84002412     0xe    mv s1,a0
    0x84002414    0x10    sd a1,0(sp)           ; stack access
    0x84002416    0x12    sd a2,8(sp)           ; stack access
    0x84002418    0x14    mv s2,a3
    0x8400241a    0x16    mv s4,a3
    0x8400241c    0x18    li a5,24
    0x8400241e    0x1a    bgeu a3,a5,ffffffff84002424 <create_rootserver_objects+0x20>
    0x84002422    0x1e    li s4,24
    0x84002424    0x20    ld a5,0(sp)           ; stack access
    0x84002426    0x22    sd a5,16(sp)          ; stack access
    0x84002428    0x24    ld a5,8(sp)           ; stack access
    0x8400242a    0x26    sd a5,24(sp)          ; stack access
    0x8400242c    0x28    mv s3,s2
    0x8400242e    0x2a    beqz s2,ffffffff84002438 <create_rootserver_objects+0x34>
    0x84002432    0x2e    li s3,1
    0x84002434    0x30    sll s3,s3,s2
    0x84002438    0x34    ld a0,16(sp)          ; stack access
    0x8400243a    0x36    ld a1,24(sp)          ; stack access
    0x8400243c    0x38    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84002440    0x3c    auipc s0,0x0
    0x84002444    0x40    addi s0,s0,1928 # ffffffff84002bc8 <ndks_boot>
    0x84002448    0x44    sd s1,680(s0)
    0x8400244c    0x48    lui a5,0x1004
    0x84002450    0x4c    addi a5,a5,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x84002454    0x50    add s1,s1,a5
    0x84002456    0x52    add s1,s1,s3
    0x84002458    0x54    slli a0,a0,0xc
    0x8400245a    0x56    add s1,s1,a0
    0x8400245c    0x58    sd s1,688(s0)
    0x84002460    0x5c    mv a1,s2
    0x84002462    0x5e    mv a0,s4
    0x84002464    0x60    jal ra,ffffffff840023d8 <maybe_alloc_extra_bi>
    0x84002468    0x64    li a1,1
    0x8400246a    0x66    li a0,24
    0x8400246c    0x68    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x84002470    0x6c    sd a0,608(s0)
    0x84002474    0x70    mv a1,s2
    0x84002476    0x72    li a0,12
    0x84002478    0x74    jal ra,ffffffff840023d8 <maybe_alloc_extra_bi>
    0x8400247c    0x78    li a1,1
    0x8400247e    0x7a    li a0,12
    0x84002480    0x7c    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x84002484    0x80    sd a0,616(s0)
    0x84002488    0x84    mv a1,s2
    0x8400248a    0x86    li a0,12
    0x8400248c    0x88    jal ra,ffffffff840023d8 <maybe_alloc_extra_bi>
    0x84002490    0x8c    li a1,1
    0x84002492    0x8e    li a0,12
    0x84002494    0x90    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x84002498    0x94    sd a0,624(s0)
    0x8400249c    0x98    li a1,1
    0x8400249e    0x9a    li a0,12
    0x840024a0    0x9c    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x840024a4    0xa0    sd a0,632(s0)
    0x840024a8    0xa4    li a1,1
    0x840024aa    0xa6    li a0,12
    0x840024ac    0xa8    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x840024b0    0xac    sd a0,640(s0)
    0x840024b4    0xb0    ld a0,0(sp)           ; stack access
    0x840024b6    0xb2    ld a1,8(sp)           ; stack access
    0x840024b8    0xb4    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x840024bc    0xb8    mv s1,a0
    0x840024be    0xba    mv a1,a0
    0x840024c0    0xbc    li a0,12
    0x840024c2    0xbe    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x840024c6    0xc2    sd a0,664(s0)
    0x840024ca    0xc6    slli s1,s1,0xc
    0x840024cc    0xc8    add a0,a0,s1
    0x840024ce    0xca    sd a0,672(s0)
    0x840024d2    0xce    li a1,1
    0x840024d4    0xd0    li a0,10
    0x840024d6    0xd2    jal ra,ffffffff840023aa <alloc_rootserver_obj>
    0x840024da    0xd6    sd a0,656(s0)
    0x840024de    0xda    ld ra,72(sp)          ; stack access
    0x840024e0    0xdc    ld s0,64(sp)          ; stack access
    0x840024e2    0xde    ld s1,56(sp)          ; stack access
    0x840024e4    0xe0    ld s2,48(sp)          ; stack access
    0x840024e6    0xe2    ld s3,40(sp)          ; stack access
    0x840024e8    0xe4    ld s4,32(sp)          ; stack access
    0x840024ea    0xe6    addi sp,sp,80
    0x840024ec    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 137 nodes.

Section create_untypeds_for_region (233 of 266)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 103 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x84001612      0x0    addi sp,sp,-192
    0x84001614      0x2    sd ra,184(sp)         ; stack access
    0x84001616      0x4    sd s0,176(sp)         ; stack access
    0x84001618      0x6    sd s1,168(sp)         ; stack access
    0x8400161a      0x8    sd s2,160(sp)         ; stack access
    0x8400161c      0xa    sd s3,152(sp)         ; stack access
    0x8400161e      0xc    sd s4,144(sp)         ; stack access
    0x84001620      0xe    sd s5,136(sp)         ; stack access
    0x84001622     0x10    sd s6,128(sp)         ; stack access
    0x84001624     0x12    sd s7,120(sp)         ; stack access
    0x84001626     0x14    sd s8,112(sp)         ; stack access
    0x84001628     0x16    sd s9,104(sp)         ; stack access
    0x8400162a     0x18    sd s10,96(sp)         ; stack access
    0x8400162c     0x1a    sd s11,88(sp)         ; stack access
    0x8400162e     0x1c    sd a0,32(sp)          ; stack access
    0x84001630     0x1e    sd a1,40(sp)          ; stack access
    0x84001632     0x20    beq a4,a3,ffffffff84001724 <create_untypeds_for_region+0x112>
    0x84001636     0x24    mv s9,a2
    0x84001638     0x26    mv s8,a5
    0x8400163a     0x28    mv s2,a3
    0x8400163c     0x2a    mv s3,a4
    0x8400163e     0x2c    slli s10,a2,0x6
    0x84001642     0x30    andi s10,s10,64
    0x84001646     0x34    li s6,63
    0x8400164a     0x38    li s5,38
    0x8400164e     0x3c    auipc s7,0x1
    0x84001652     0x40    addi s7,s7,1402 # ffffffff84002bc8 <ndks_boot>
    0x84001656     0x44    li s4,1
    0x84001658     0x46    slli s11,s4,0x26
    0x8400165c     0x4a    li a5,-1
    0x8400165e     0x4c    srli a5,a5,0x19
    0x84001660     0x4e    sd a5,0(sp)           ; stack access
    0x84001662     0x50    slli a5,s4,0x3c
    0x84001666     0x54    sd a5,8(sp)           ; stack access
    0x84001668     0x56    j ffffffff8400168e <create_untypeds_for_region+0x7c>
    0x8400166a     0x58    mv s0,s5
    0x8400166c     0x5a    ld a5,32(sp)          ; stack access
    0x8400166e     0x5c    sd a5,48(sp)          ; stack access
    0x84001670     0x5e    ld a5,40(sp)          ; stack access
    0x84001672     0x60    sd a5,56(sp)          ; stack access
    0x84001674     0x62    ld a5,592(s7)
    0x84001678     0x66    sub a5,a5,s8
    0x8400167c     0x6a    li a4,49
    0x84001680     0x6e    bgeu a4,a5,ffffffff840016c0 <create_untypeds_for_region+0xae>
    0x84001684     0x72    sll s0,s4,s0
    0x84001688     0x76    add s2,s2,s0
    0x8400168a     0x78    beq s3,s2,ffffffff84001704 <create_untypeds_for_region+0xf2>
    0x8400168e     0x7c    sub a0,s3,s2
    0x84001692     0x80    jal ra,ffffffff84017074 <__clzdi2>
    0x84001696     0x84    sext.w s1,a0
    0x8400169a     0x88    sub s1,s6,s1
    0x8400169e     0x8c    mv s0,s1
    0x840016a0     0x8e    beqz s2,ffffffff840016ae <create_untypeds_for_region+0x9c>
    0x840016a4     0x92    mv a0,s2
    0x840016a6     0x94    jal ra,ffffffff84017092 <__ctzdi2>
    0x840016aa     0x98    sext.w s0,a0
    0x840016ae     0x9c    bgeu s1,s0,ffffffff840016b4 <create_untypeds_for_region+0xa2>
    0x840016b2     0xa0    mv s0,s1
    0x840016b4     0xa2    bltu s5,s0,ffffffff8400166a <create_untypeds_for_region+0x58>
    0x840016b8     0xa6    li a5,3
    0x840016ba     0xa8    bgeu a5,s0,ffffffff84001684 <create_untypeds_for_region+0x72>
    0x840016be     0xac    j ffffffff8400166c <create_untypeds_for_region+0x5a>
    0x840016c0     0xae    slli a5,a5,0x4
    0x840016c2     0xb0    ld a4,584(s7)
    0x840016c6     0xb4    add a5,a5,a4
    0x840016c8     0xb6    sd zero,176(a5)
    0x840016cc     0xba    add a4,s2,s11
    0x840016d0     0xbe    sd a4,168(a5)
    0x840016d2     0xc0    sb s0,176(a5)
    0x840016d6     0xc4    sb s9,177(a5)
    0x840016da     0xc8    ld a5,0(sp)           ; stack access
    0x840016dc     0xca    and a2,s2,a5
    0x840016e0     0xce    addiw a5,s0,-4
    0x840016e4     0xd2    sll a5,s4,a5
    0x840016e8     0xd6    slli a5,a5,0x19
    0x840016ea     0xd8    andi a3,s0,63
    0x840016ee     0xdc    or a3,a3,s10
    0x840016f2     0xe0    ld a4,8(sp)           ; stack access
    0x840016f4     0xe2    or a2,a2,a4
    0x840016f6     0xe4    or a3,a3,a5
    0x840016f8     0xe6    ld a0,48(sp)          ; stack access
    0x840016fa     0xe8    ld a1,56(sp)          ; stack access
    0x840016fc     0xea    jal ra,ffffffff84000ea6 <provide_cap>
    0x84001700     0xee    bnez a0,ffffffff84001684 <create_untypeds_for_region+0x72>
    0x84001702     0xf0    j ffffffff84001706 <create_untypeds_for_region+0xf4>
    0x84001704     0xf2    li a0,1
    0x84001706     0xf4    ld ra,184(sp)         ; stack access
    0x84001708     0xf6    ld s0,176(sp)         ; stack access
    0x8400170a     0xf8    ld s1,168(sp)         ; stack access
    0x8400170c     0xfa    ld s2,160(sp)         ; stack access
    0x8400170e     0xfc    ld s3,152(sp)         ; stack access
    0x84001710     0xfe    ld s4,144(sp)         ; stack access
    0x84001712    0x100    ld s5,136(sp)         ; stack access
    0x84001714    0x102    ld s6,128(sp)         ; stack access
    0x84001716    0x104    ld s7,120(sp)         ; stack access
    0x84001718    0x106    ld s8,112(sp)         ; stack access
    0x8400171a    0x108    ld s9,104(sp)         ; stack access
    0x8400171c    0x10a    ld s10,96(sp)         ; stack access
    0x8400171e    0x10c    ld s11,88(sp)         ; stack access
    0x84001720    0x10e    addi sp,sp,192
    0x84001722    0x110    ret
    0x84001724    0x112    li a0,1
    0x84001726    0x114    j ffffffff84001706 <create_untypeds_for_region+0xf4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 167 nodes.

Section create_it_address_space (234 of 266)
============================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 226 instructions.


Stack analysis
---------------

Section `create_it_address_space` expects pointer to stack in a0.
50 stack accesses found. Annotated code for `create_it_address_space`:

    0x8400101a      0x0    addi sp,sp,-240
    0x8400101c      0x2    sd ra,232(sp)         ; stack access
    0x8400101e      0x4    sd s0,224(sp)         ; stack access
    0x84001020      0x6    sd s1,216(sp)         ; stack access
    0x84001022      0x8    sd s2,208(sp)         ; stack access
    0x84001024      0xa    sd s3,200(sp)         ; stack access
    0x84001026      0xc    sd s4,192(sp)         ; stack access
    0x84001028      0xe    sd s5,184(sp)         ; stack access
    0x8400102a     0x10    sd s6,176(sp)         ; stack access
    0x8400102c     0x12    sd s7,168(sp)         ; stack access
    0x8400102e     0x14    sd s8,160(sp)         ; stack access
    0x84001030     0x16    sd s9,152(sp)         ; stack access
    0x84001032     0x18    sd s10,144(sp)        ; stack access
    0x84001034     0x1a    sd s11,136(sp)        ; stack access
    0x84001036     0x1c    sd a0,48(sp)          ; stack access
    0x84001038     0x1e    sd a1,56(sp)          ; stack access
    0x8400103a     0x20    sd a2,32(sp)          ; stack access
    0x8400103c     0x22    mv s6,a3
    0x8400103e     0x24    auipc s0,0x2
    0x84001042     0x28    addi s0,s0,-1142 # ffffffff84002bc8 <ndks_boot>
    0x84001046     0x2c    ld a0,616(s0)
    0x8400104a     0x30    jal ra,ffffffff84010398 <copyGlobalMappings>
    0x8400104e     0x34    ld a5,616(s0)
    0x84001052     0x38    slli s4,a5,0x19
    0x84001056     0x3c    srli s4,s4,0x19
    0x8400105a     0x40    lui a4,0x300
    0x8400105e     0x44    addi a4,a4,1
    0x84001060     0x46    slli a4,a4,0x27
    0x84001062     0x48    or s4,s4,a4
    0x84001066     0x4c    slli a5,a5,0x9
    0x84001068     0x4e    lui a4,0xfe000
    0x8400106c     0x52    srli a4,a4,0x10
    0x8400106e     0x54    and a5,a5,a4
    0x84001070     0x56    li a4,1
    0x84001072     0x58    slli a4,a4,0x30
    0x84001074     0x5a    or a5,a5,a4
    0x84001076     0x5c    sd a5,8(sp)           ; stack access
    0x84001078     0x5e    ld a5,592(s0)
    0x8400107c     0x62    sd a5,24(sp)          ; stack access
    0x8400107e     0x64    ld a4,48(sp)          ; stack access
    0x84001080     0x66    ld a0,56(sp)          ; stack access
    0x84001082     0x68    srli a3,a4,0x3b
    0x84001086     0x6c    li a5,20
    0x84001088     0x6e    bltu a5,a3,ffffffff84001136 <create_it_address_space+0x11c>
    0x8400108c     0x72    slli a2,a3,0x2
    0x84001090     0x76    auipc a1,0x16
    0x84001094     0x7a    addi a1,a1,868 # ffffffff840173f4 <ksDomScheduleLength+0x33c>
    0x84001098     0x7e    add a2,a2,a1
    0x8400109a     0x80    lw a5,0(a2)
    0x8400109c     0x82    add a5,a5,a1
    0x8400109e     0x84    jr a5
    0x840010a0     0x86    slli a5,a4,0x19
    0x840010a4     0x8a    srli a5,a5,0x19
    0x840010a6     0x8c    slli a3,a4,0x19
    0x840010aa     0x90    bgez a3,ffffffff84001196 <create_it_address_space+0x17c>
    0x840010ae     0x94    li a4,-1
    0x840010b0     0x96    slli a4,a4,0x27
    0x840010b2     0x98    or a5,a5,a4
    0x840010b4     0x9a    j ffffffff84001196 <create_it_address_space+0x17c>
    0x840010b6     0x9c    slli a5,a4,0x19
    0x840010ba     0xa0    srli a5,a5,0x19
    0x840010bc     0xa2    slli a3,a4,0x19
    0x840010c0     0xa6    bgez a3,ffffffff84001196 <create_it_address_space+0x17c>
    0x840010c4     0xaa    li a4,-1
    0x840010c6     0xac    slli a4,a4,0x27
    0x840010c8     0xae    or a5,a5,a4
    0x840010ca     0xb0    j ffffffff84001196 <create_it_address_space+0x17c>
    0x840010cc     0xb2    slli a5,a4,0x19
    0x840010d0     0xb6    srli a5,a5,0x19
    0x840010d2     0xb8    slli a3,a4,0x19
    0x840010d6     0xbc    bgez a3,ffffffff84001196 <create_it_address_space+0x17c>
    0x840010da     0xc0    li a4,-1
    0x840010dc     0xc2    slli a4,a4,0x27
    0x840010de     0xc4    or a5,a5,a4
    0x840010e0     0xc6    j ffffffff84001196 <create_it_address_space+0x17c>
    0x840010e2     0xc8    slli a4,a4,0x1
    0x840010e4     0xca    lui a5,0xfc000
    0x840010e8     0xce    srli a5,a5,0x19
    0x840010ea     0xd0    and a5,a5,a4
    0x840010ec     0xd2    slli a3,a4,0x19
    0x840010f0     0xd6    bgez a3,ffffffff84001196 <create_it_address_space+0x17c>
    0x840010f4     0xda    li a4,-1
    0x840010f6     0xdc    slli a4,a4,0x27
    0x840010f8     0xde    or a5,a5,a4
    0x840010fa     0xe0    j ffffffff84001196 <create_it_address_space+0x17c>
    0x840010fc     0xe2    slli a5,a4,0x19
    0x84001100     0xe6    srli a5,a5,0x19
    0x84001102     0xe8    slli a3,a4,0x19
    0x84001106     0xec    bgez a3,ffffffff84001110 <create_it_address_space+0xf6>
    0x8400110a     0xf0    li a4,-1
    0x8400110c     0xf2    slli a4,a4,0x27
    0x8400110e     0xf4    or a5,a5,a4
    0x84001110     0xf6    andi a5,a5,-1024
    0x84001114     0xfa    j ffffffff84001196 <create_it_address_space+0x17c>
    0x84001116     0xfc    andi a5,a4,127
    0x8400111a    0x100    li a3,64
    0x8400111e    0x104    beq a5,a3,ffffffff84001132 <create_it_address_space+0x118>
    0x84001122    0x108    andi a4,a4,63
    0x84001126    0x10c    addiw a4,a4,1
    0x84001128    0x10e    li a5,-1
    0x8400112a    0x110    sll a5,a5,a4
    0x8400112e    0x114    and a5,a5,a0
    0x84001130    0x116    j ffffffff84001196 <create_it_address_space+0x17c>
    0x84001132    0x118    li a4,4
    0x84001134    0x11a    j ffffffff84001126 <create_it_address_space+0x10c>
    0x84001136    0x11c    li a5,3
    0x84001138    0x11e    beq a3,a5,ffffffff84001162 <create_it_address_space+0x148>
    0x8400113c    0x122    li a5,13
    0x8400113e    0x124    beq a3,a5,ffffffff8400117a <create_it_address_space+0x160>
    0x84001142    0x128    li a4,1
    0x84001144    0x12a    li a5,0
    0x84001146    0x12c    bne a3,a4,ffffffff84001196 <create_it_address_space+0x17c>
    0x8400114a    0x130    srli a0,a0,0x9
    0x8400114c    0x132    slli a5,a0,0x19
    0x84001150    0x136    srli a5,a5,0x19
    0x84001152    0x138    slli a4,a0,0x19
    0x84001156    0x13c    bgez a4,ffffffff84001196 <create_it_address_space+0x17c>
    0x8400115a    0x140    li a4,-1
    0x8400115c    0x142    slli a4,a4,0x27
    0x8400115e    0x144    or a5,a5,a4
    0x84001160    0x146    j ffffffff84001196 <create_it_address_space+0x17c>
    0x84001162    0x148    srli a0,a0,0x9
    0x84001164    0x14a    slli a5,a0,0x19
    0x84001168    0x14e    srli a5,a5,0x19
    0x8400116a    0x150    slli a4,a0,0x19
    0x8400116e    0x154    bgez a4,ffffffff84001196 <create_it_address_space+0x17c>
    0x84001172    0x158    li a4,-1
    0x84001174    0x15a    slli a4,a4,0x27
    0x84001176    0x15c    or a5,a5,a4
    0x84001178    0x15e    j ffffffff84001196 <create_it_address_space+0x17c>
    0x8400117a    0x160    slli a4,a4,0x2
    0x8400117c    0x162    lui a5,0xf8000
    0x84001180    0x166    srli a5,a5,0x19
    0x84001182    0x168    and a5,a5,a4
    0x84001184    0x16a    slli a3,a4,0x19
    0x84001188    0x16e    bgez a3,ffffffff84001196 <create_it_address_space+0x17c>
    0x8400118c    0x172    li a4,-1
    0x8400118e    0x174    slli a4,a4,0x27
    0x84001190    0x176    or a5,a5,a4
    0x84001192    0x178    j ffffffff84001196 <create_it_address_space+0x17c>
    0x84001194    0x17a    li a5,0
    0x84001196    0x17c    sd s4,96(a5) # fffffffff8000060 <ki_end+0x73fd1060>
    0x8400119a    0x180    ld a4,8(sp)           ; stack access
    0x8400119c    0x182    sd a4,104(a5)
    0x8400119e    0x184    sd zero,112(a5)
    0x840011a2    0x188    li a4,3
    0x840011a4    0x18a    sd a4,120(a5)
    0x840011a6    0x18c    li a5,30
    0x840011a8    0x18e    sd a5,16(sp)          ; stack access
    0x840011aa    0x190    auipc s3,0x2
    0x840011ae    0x194    addi s3,s3,-1506 # ffffffff84002bc8 <ndks_boot>
    0x840011b2    0x198    li s8,-1
    0x840011b4    0x19a    srli s8,s8,0x19
    0x840011b8    0x19e    lui s5,0x300
    0x840011bc    0x1a2    addi s5,s5,1
    0x840011be    0x1a4    slli s5,s5,0x27
    0x840011c0    0x1a6    lui s7,0xfe000
    0x840011c4    0x1aa    srli s7,s7,0x10
    0x840011c8    0x1ae    ld a4,16(sp)          ; stack access
    0x840011ca    0x1b0    sext.w a5,a4
    0x840011ce    0x1b4    ld s2,32(sp)          ; stack access
    0x840011d0    0x1b6    srl s2,s2,a4
    0x840011d4    0x1ba    sll s2,s2,a4
    0x840011d8    0x1be    bgeu s2,s6,ffffffff84001226 <create_it_address_space+0x20c>
    0x840011dc    0x1c2    li s10,1
    0x840011de    0x1c4    sll s10,s10,a5
    0x840011e2    0x1c8    lui s11,0x1
    0x840011e4    0x1ca    li s9,1
    0x840011e6    0x1cc    slli s9,s9,0x30
    0x840011e8    0x1ce    ld s0,664(s3)
    0x840011ec    0x1d2    add a5,s0,s11
    0x840011f0    0x1d6    sd a5,664(s3)
    0x840011f4    0x1da    and s1,s2,s8
    0x840011f8    0x1de    or s1,s1,s5
    0x840011fc    0x1e2    slli s0,s0,0x9
    0x840011fe    0x1e4    and s0,s0,s7
    0x84001202    0x1e8    or s0,s0,s9
    0x84001206    0x1ec    mv a2,s1
    0x84001208    0x1ee    mv a3,s0
    0x8400120a    0x1f0    mv a0,s4
    0x8400120c    0x1f2    ld a1,8(sp)           ; stack access
    0x8400120e    0x1f4    jal ra,ffffffff840003a6 <map_it_pt_cap>
    0x84001212    0x1f8    mv a2,s1
    0x84001214    0x1fa    mv a3,s0
    0x84001216    0x1fc    ld a0,48(sp)          ; stack access
    0x84001218    0x1fe    ld a1,56(sp)          ; stack access
    0x8400121a    0x200    jal ra,ffffffff84000ea6 <provide_cap>
    0x8400121e    0x204    beqz a0,ffffffff84001272 <create_it_address_space+0x258>
    0x84001220    0x206    add s2,s2,s10
    0x84001222    0x208    bltu s2,s6,ffffffff840011e8 <create_it_address_space+0x1ce>
    0x84001226    0x20c    ld a5,16(sp)          ; stack access
    0x84001228    0x20e    addiw a5,a5,-9
    0x8400122a    0x210    mv a4,a5
    0x8400122c    0x212    sd a5,16(sp)          ; stack access
    0x8400122e    0x214    li a5,12
    0x84001230    0x216    bne a4,a5,ffffffff840011c8 <create_it_address_space+0x1ae>
    0x84001234    0x21a    auipc a5,0x2
    0x84001238    0x21e    addi a5,a5,-1644 # ffffffff84002bc8 <ndks_boot>
    0x8400123c    0x222    ld a4,592(a5)
    0x84001240    0x226    ld a5,584(a5)
    0x84001244    0x22a    ld a3,24(sp)          ; stack access
    0x84001246    0x22c    sd a3,88(a5)
    0x84001248    0x22e    sd a4,96(a5)
    0x8400124a    0x230    sd s4,112(sp)         ; stack access
    0x8400124c    0x232    ld a5,8(sp)           ; stack access
    0x8400124e    0x234    sd a5,120(sp)         ; stack access
    0x84001250    0x236    ld a0,112(sp)         ; stack access
    0x84001252    0x238    ld a1,120(sp)         ; stack access
    0x84001254    0x23a    ld ra,232(sp)         ; stack access
    0x84001256    0x23c    ld s0,224(sp)         ; stack access
    0x84001258    0x23e    ld s1,216(sp)         ; stack access
    0x8400125a    0x240    ld s2,208(sp)         ; stack access
    0x8400125c    0x242    ld s3,200(sp)         ; stack access
    0x8400125e    0x244    ld s4,192(sp)         ; stack access
    0x84001260    0x246    ld s5,184(sp)         ; stack access
    0x84001262    0x248    ld s6,176(sp)         ; stack access
    0x84001264    0x24a    ld s7,168(sp)         ; stack access
    0x84001266    0x24c    ld s8,160(sp)         ; stack access
    0x84001268    0x24e    ld s9,152(sp)         ; stack access
    0x8400126a    0x250    ld s10,144(sp)        ; stack access
    0x8400126c    0x252    ld s11,136(sp)        ; stack access
    0x8400126e    0x254    addi sp,sp,240
    0x84001270    0x256    ret
    0x84001272    0x258    sd zero,112(sp)       ; stack access
    0x84001274    0x25a    sd zero,120(sp)       ; stack access
    0x84001276    0x25c    j ffffffff84001250 <create_it_address_space+0x236>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
226 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 329 nodes.

Section invokeUntyped_Retype (235 of 266)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 103 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x84016040      0x0    addi sp,sp,-112
    0x84016042      0x2    sd ra,104(sp)         ; stack access
    0x84016044      0x4    sd s0,96(sp)          ; stack access
    0x84016046      0x6    sd s1,88(sp)          ; stack access
    0x84016048      0x8    sd s2,80(sp)          ; stack access
    0x8401604a      0xa    sd s3,72(sp)          ; stack access
    0x8401604c      0xc    sd s4,64(sp)          ; stack access
    0x8401604e      0xe    sd s5,56(sp)          ; stack access
    0x84016050     0x10    sd s6,48(sp)          ; stack access
    0x84016052     0x12    sd s7,40(sp)          ; stack access
    0x84016054     0x14    sd s8,32(sp)          ; stack access
    0x84016056     0x16    sd s9,24(sp)          ; stack access
    0x84016058     0x18    sd s10,16(sp)         ; stack access
    0x8401605a     0x1a    sd s11,8(sp)          ; stack access
    0x8401605c     0x1c    mv s0,a0
    0x8401605e     0x1e    mv s3,a2
    0x84016060     0x20    mv s1,a3
    0x84016062     0x22    mv s4,a4
    0x84016064     0x24    mv s5,a5
    0x84016066     0x26    mv s6,a6
    0x84016068     0x28    mv s2,a7
    0x8401606a     0x2a    ld s9,0(a0)
    0x8401606e     0x2e    slli s7,s9,0x19
    0x84016072     0x32    srli s7,s7,0x19
    0x84016076     0x36    slli a5,s9,0x19
    0x8401607a     0x3a    bgez a5,ffffffff84016086 <invokeUntyped_Retype+0x46>
    0x8401607e     0x3e    li a5,-1
    0x84016080     0x40    slli a5,a5,0x27
    0x84016082     0x42    or s7,s7,a5
    0x84016086     0x46    beqz a1,ffffffff840160be <invokeUntyped_Retype+0x7e>
    0x84016088     0x48    ld s10,8(s0)
    0x8401608c     0x4c    srli a5,s10,0x19
    0x84016090     0x50    slli s8,a5,0x4
    0x84016094     0x54    beqz a5,ffffffff840160be <invokeUntyped_Retype+0x7e>
    0x84016096     0x56    srli a5,s10,0x6
    0x8401609a     0x5a    andi a5,a5,1
    0x8401609c     0x5c    bnez a5,ffffffff840160b0 <invokeUntyped_Retype+0x70>
    0x8401609e     0x5e    andi a5,s10,56
    0x840160a2     0x62    bnez a5,ffffffff84016112 <invokeUntyped_Retype+0xd2>
    0x840160a4     0x64    li a1,1
    0x840160a6     0x66    sll a1,a1,s10
    0x840160aa     0x6a    mv a0,s7
    0x840160ac     0x6c    jal ra,ffffffff840156c0 <memzero>
    0x840160b0     0x70    sd s9,0(s0)
    0x840160b4     0x74    slli s10,s10,0x27
    0x840160b6     0x76    srli s10,s10,0x27
    0x840160ba     0x7a    sd s10,8(s0)
    0x840160be     0x7e    mv a1,s4
    0x840160c0     0x80    mv a0,s1
    0x840160c2     0x82    jal ra,ffffffff84011838 <getObjectSize>
    0x840160c6     0x86    sll a1,s2,a0
    0x840160ca     0x8a    sub s7,s3,s7
    0x840160ce     0x8e    add a1,a1,s7
    0x840160d0     0x90    srli a1,a1,0x4
    0x840160d2     0x92    slli a1,a1,0x19
    0x840160d4     0x94    ld a5,8(s0)
    0x840160d6     0x96    slli a5,a5,0x27
    0x840160d8     0x98    srli a5,a5,0x27
    0x840160da     0x9a    or a1,a1,a5
    0x840160dc     0x9c    sd a1,8(s0)
    0x840160de     0x9e    ld a7,112(sp)         ; stack access
    0x840160e0     0xa0    mv a6,s4
    0x840160e2     0xa2    mv a5,s3
    0x840160e4     0xa4    mv a4,s2
    0x840160e6     0xa6    mv a3,s6
    0x840160e8     0xa8    mv a2,s5
    0x840160ea     0xaa    mv a1,s0
    0x840160ec     0xac    mv a0,s1
    0x840160ee     0xae    jal ra,ffffffff8401216c <createNewObjects>
    0x840160f2     0xb2    li a0,0
    0x840160f4     0xb4    ld ra,104(sp)         ; stack access
    0x840160f6     0xb6    ld s0,96(sp)          ; stack access
    0x840160f8     0xb8    ld s1,88(sp)          ; stack access
    0x840160fa     0xba    ld s2,80(sp)          ; stack access
    0x840160fc     0xbc    ld s3,72(sp)          ; stack access
    0x840160fe     0xbe    ld s4,64(sp)          ; stack access
    0x84016100     0xc0    ld s5,56(sp)          ; stack access
    0x84016102     0xc2    ld s6,48(sp)          ; stack access
    0x84016104     0xc4    ld s7,40(sp)          ; stack access
    0x84016106     0xc6    ld s8,32(sp)          ; stack access
    0x84016108     0xc8    ld s9,24(sp)          ; stack access
    0x8401610a     0xca    ld s10,16(sp)         ; stack access
    0x8401610c     0xcc    ld s11,8(sp)          ; stack access
    0x8401610e     0xce    addi sp,sp,112
    0x84016110     0xd0    ret
    0x84016112     0xd2    addi s8,s8,-1
    0x84016114     0xd4    andi s8,s8,-256
    0x84016118     0xd8    slli s10,s10,0x27
    0x8401611a     0xda    srli s10,s10,0x27
    0x8401611e     0xde    li s11,-256
    0x84016122     0xe2    li a1,256
    0x84016126     0xe6    add a0,s7,s8
    0x8401612a     0xea    jal ra,ffffffff840156c0 <memzero>
    0x8401612e     0xee    sd s9,0(s0)
    0x84016132     0xf2    srli a5,s8,0x4
    0x84016136     0xf6    slli a5,a5,0x19
    0x84016138     0xf8    or a5,a5,s10
    0x8401613c     0xfc    sd a5,8(s0)
    0x8401613e     0xfe    jal ra,ffffffff84011250 <preemptionPoint>
    0x84016142    0x102    bnez a0,ffffffff840160f4 <invokeUntyped_Retype+0xb4>
    0x84016144    0x104    addi s8,s8,-256
    0x84016148    0x108    bne s8,s11,ffffffff84016122 <invokeUntyped_Retype+0xe2>
    0x8401614c    0x10c    j ffffffff840160be <invokeUntyped_Retype+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 158 nodes.

Section decodeSetIPCBuffer (236 of 266)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 78 instructions.


Stack analysis
---------------

29 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x84014b88     0x0    addi sp,sp,-176
    0x84014b8a     0x2    sd ra,168(sp)         ; stack access
    0x84014b8c     0x4    sd s0,160(sp)         ; stack access
    0x84014b8e     0x6    sd s1,152(sp)         ; stack access
    0x84014b90     0x8    sd s2,144(sp)         ; stack access
    0x84014b92     0xa    sd a0,64(sp)          ; stack access
    0x84014b94     0xc    sd a1,72(sp)          ; stack access
    0x84014b96     0xe    beqz a2,ffffffff84014bda <decodeSetIPCBuffer+0x52>
    0x84014b98    0x10    mv s2,a3
    0x84014b9a    0x12    auipc s0,0x9
    0x84014b9e    0x16    ld s0,230(s0) # ffffffff8401dc80 <current_extra_caps>
    0x84014ba2    0x1a    beqz s0,ffffffff84014bda <decodeSetIPCBuffer+0x52>
    0x84014ba4    0x1c    auipc a5,0x1a
    0x84014ba8    0x20    ld a5,-268(a5) # ffffffff8402ea98 <ksCurThread>
    0x84014bac    0x24    ld s1,88(a5)
    0x84014bae    0x26    ld a5,0(s0)
    0x84014bb0    0x28    sd a5,112(sp)         ; stack access
    0x84014bb2    0x2a    ld a5,8(s0)
    0x84014bb4    0x2c    sd a5,120(sp)         ; stack access
    0x84014bb6    0x2e    beqz s1,ffffffff84014be8 <decodeSetIPCBuffer+0x60>
    0x84014bb8    0x30    ld a2,112(sp)         ; stack access
    0x84014bba    0x32    mv a3,a5
    0x84014bbc    0x34    mv a1,s0
    0x84014bbe    0x36    addi a0,sp,88
    0x84014bc0    0x38    jal ra,ffffffff84011dae <deriveCap>
    0x84014bc4    0x3c    ld a0,88(sp)          ; stack access
    0x84014bc6    0x3e    bnez a0,ffffffff84014c36 <decodeSetIPCBuffer+0xae>
    0x84014bc8    0x40    ld a1,96(sp)          ; stack access
    0x84014bca    0x42    sd a1,112(sp)         ; stack access
    0x84014bcc    0x44    ld a2,104(sp)         ; stack access
    0x84014bce    0x46    sd a2,120(sp)         ; stack access
    0x84014bd0    0x48    mv a0,s1
    0x84014bd2    0x4a    jal ra,ffffffff84010920 <checkValidIPCBuffer>
    0x84014bd6    0x4e    beqz a0,ffffffff84014bea <decodeSetIPCBuffer+0x62>
    0x84014bd8    0x50    j ffffffff84014c36 <decodeSetIPCBuffer+0xae>
    0x84014bda    0x52    li a5,7
    0x84014bdc    0x54    auipc a4,0x9
    0x84014be0    0x58    sd a5,156(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014be4    0x5c    li a0,3
    0x84014be6    0x5e    j ffffffff84014c36 <decodeSetIPCBuffer+0xae>
    0x84014be8    0x60    li s0,0
    0x84014bea    0x62    li a1,2
    0x84014bec    0x64    auipc a0,0x1a
    0x84014bf0    0x68    ld a0,-340(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014bf4    0x6c    jal ra,ffffffff840122d8 <setThreadState>
    0x84014bf8    0x70    ld a5,64(sp)          ; stack access
    0x84014bfa    0x72    slli a0,a5,0x19
    0x84014bfe    0x76    srli a0,a0,0x19
    0x84014c00    0x78    slli a4,a5,0x19
    0x84014c04    0x7c    bgez a4,ffffffff84014c0e <decodeSetIPCBuffer+0x86>
    0x84014c08    0x80    li a5,-1
    0x84014c0a    0x82    slli a5,a5,0x27
    0x84014c0c    0x84    or a0,a0,a5
    0x84014c0e    0x86    li a5,2
    0x84014c10    0x88    sd a5,56(sp)          ; stack access
    0x84014c12    0x8a    sd s0,48(sp)          ; stack access
    0x84014c14    0x8c    ld a5,112(sp)         ; stack access
    0x84014c16    0x8e    sd a5,32(sp)          ; stack access
    0x84014c18    0x90    ld a5,120(sp)         ; stack access
    0x84014c1a    0x92    sd a5,40(sp)          ; stack access
    0x84014c1c    0x94    sd s1,24(sp)          ; stack access
    0x84014c1e    0x96    sd zero,16(sp)        ; stack access
    0x84014c20    0x98    sd zero,0(sp)         ; stack access
    0x84014c22    0x9a    sd zero,8(sp)         ; stack access
    0x84014c24    0x9c    li a7,0
    0x84014c26    0x9e    li a5,0
    0x84014c28    0xa0    li a6,0
    0x84014c2a    0xa2    li a4,0
    0x84014c2c    0xa4    li a3,0
    0x84014c2e    0xa6    li a2,0
    0x84014c30    0xa8    mv a1,s2
    0x84014c32    0xaa    jal ra,ffffffff840145da <invokeTCB_ThreadControl>
    0x84014c36    0xae    ld ra,168(sp)         ; stack access
    0x84014c38    0xb0    ld s0,160(sp)         ; stack access
    0x84014c3a    0xb2    ld s1,152(sp)         ; stack access
    0x84014c3c    0xb4    ld s2,144(sp)         ; stack access
    0x84014c3e    0xb6    addi sp,sp,176
    0x84014c40    0xb8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 131 nodes.

Section handleVMFaultEvent (237 of 266)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x84014180     0x0    addi sp,sp,-16
    0x84014182     0x2    sd ra,8(sp)           ; stack access
    0x84014184     0x4    mv a1,a0
    0x84014186     0x6    auipc a0,0x1b
    0x8401418a     0xa    ld a0,-1774(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401418e     0xe    jal ra,ffffffff84010606 <handleVMFault>
    0x84014192    0x12    bnez a0,ffffffff840141a4 <handleVMFaultEvent+0x24>
    0x84014194    0x14    jal ra,ffffffff84012932 <schedule>
    0x84014198    0x18    jal ra,ffffffff840123c8 <activateThread>
    0x8401419c    0x1c    li a0,0
    0x8401419e    0x1e    ld ra,8(sp)           ; stack access
    0x840141a0    0x20    addi sp,sp,16
    0x840141a2    0x22    ret
    0x840141a4    0x24    auipc a0,0x1b
    0x840141a8    0x28    ld a0,-1804(a0) # ffffffff8402ea98 <ksCurThread>
    0x840141ac    0x2c    jal ra,ffffffff840140f4 <handleFault>
    0x840141b0    0x30    j ffffffff84014194 <handleVMFaultEvent+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 28 nodes.

Section handleInterruptEntry (238 of 266)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 24 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x84013a04     0x0    addi sp,sp,-16
    0x84013a06     0x2    sd ra,8(sp)           ; stack access
    0x84013a08     0x4    auipc a5,0x5
    0x84013a0c     0x8    lw a5,-2048(a5) # ffffffff84018208 <active_irq>
    0x84013a10     0xc    addiw a3,a5,-1
    0x84013a14    0x10    li a4,53
    0x84013a18    0x14    bltu a4,a3,ffffffff84013a28 <handleInterruptEntry+0x24>
    0x84013a1c    0x18    slli a0,a5,0x20
    0x84013a20    0x1c    srli a0,a0,0x20
    0x84013a22    0x1e    jal ra,ffffffff84013900 <handleInterrupt>
    0x84013a26    0x22    j ffffffff84013a42 <handleInterruptEntry+0x3e>
    0x84013a28    0x24    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84013a2c    0x28    sext.w a5,a0
    0x84013a30    0x2c    auipc a4,0x4
    0x84013a34    0x30    sw a0,2008(a4) # ffffffff84018208 <active_irq>
    0x84013a38    0x34    addiw a0,a0,-1
    0x84013a3a    0x36    li a4,53
    0x84013a3e    0x3a    bgeu a4,a0,ffffffff84013a1c <handleInterruptEntry+0x18>
    0x84013a42    0x3e    jal ra,ffffffff84012932 <schedule>
    0x84013a46    0x42    jal ra,ffffffff840123c8 <activateThread>
    0x84013a4a    0x46    li a0,0
    0x84013a4c    0x48    ld ra,8(sp)           ; stack access
    0x84013a4e    0x4a    addi sp,sp,16
    0x84013a50    0x4c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 37 nodes.

Section sendSignal (239 of 266)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 99 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `sendSignal`:

    0x84013804     0x0    addi sp,sp,-48
    0x84013806     0x2    sd ra,40(sp)          ; stack access
    0x84013808     0x4    sd s0,32(sp)          ; stack access
    0x8401380a     0x6    sd s1,24(sp)          ; stack access
    0x8401380c     0x8    sd s2,16(sp)          ; stack access
    0x8401380e     0xa    mv s0,a0
    0x84013810     0xc    mv s1,a1
    0x84013812     0xe    ld a4,0(a0)
    0x84013814    0x10    andi a5,a4,3
    0x84013818    0x14    li a3,1
    0x8401381a    0x16    beq a5,a3,ffffffff8401388e <sendSignal+0x8a>
    0x8401381e    0x1a    li a3,2
    0x84013820    0x1c    beq a5,a3,ffffffff840138f8 <sendSignal+0xf4>
    0x84013824    0x20    beqz a5,ffffffff84013832 <sendSignal+0x2e>
    0x84013826    0x22    ld ra,40(sp)          ; stack access
    0x84013828    0x24    ld s0,32(sp)          ; stack access
    0x8401382a    0x26    ld s1,24(sp)          ; stack access
    0x8401382c    0x28    ld s2,16(sp)          ; stack access
    0x8401382e    0x2a    addi sp,sp,48
    0x84013830    0x2c    ret
    0x84013832    0x2e    ld a3,24(a0)
    0x84013834    0x30    slli a5,a3,0x19
    0x84013838    0x34    srli a5,a5,0x19
    0x8401383a    0x36    slli a2,a3,0x19
    0x8401383e    0x3a    bgez a2,ffffffff84013862 <sendSignal+0x5e>
    0x84013842    0x3e    li s2,-1
    0x84013844    0x40    slli s2,s2,0x27
    0x84013846    0x42    or s2,a5,s2
    0x8401384a    0x46    ld a5,280(s2) # fffffffff8000118 <ki_end+0x73fd1118>
    0x8401384e    0x4a    andi a5,a5,15
    0x84013850    0x4c    li a3,3
    0x84013852    0x4e    beq a5,a3,ffffffff84013874 <sendSignal+0x70>
    0x84013856    0x52    andi a4,a4,-4
    0x84013858    0x54    ori a4,a4,2
    0x8401385c    0x58    sd a4,0(s0)
    0x8401385e    0x5a    sd s1,16(s0)
    0x84013860    0x5c    j ffffffff84013826 <sendSignal+0x22>
    0x84013862    0x5e    bnez a5,ffffffff84013870 <sendSignal+0x6c>
    0x84013864    0x60    andi a4,a4,-4
    0x84013866    0x62    ori a4,a4,2
    0x8401386a    0x66    sd a4,0(a0)
    0x8401386c    0x68    sd a1,16(s0)
    0x8401386e    0x6a    j ffffffff84013826 <sendSignal+0x22>
    0x84013870    0x6c    mv s2,a5
    0x84013872    0x6e    j ffffffff8401384a <sendSignal+0x46>
    0x84013874    0x70    mv a0,s2
    0x84013876    0x72    jal ra,ffffffff84012caa <cancelIPC>
    0x8401387a    0x76    li a1,1
    0x8401387c    0x78    mv a0,s2
    0x8401387e    0x7a    jal ra,ffffffff840122d8 <setThreadState>
    0x84013882    0x7e    sd s1,72(s2)
    0x84013886    0x82    mv a0,s2
    0x84013888    0x84    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x8401388c    0x88    j ffffffff84013826 <sendSignal+0x22>
    0x8401388e    0x8a    ld a5,8(a0)
    0x84013890    0x8c    slli s2,a5,0x19
    0x84013894    0x90    srli s2,s2,0x19
    0x84013898    0x94    slli a3,a5,0x19
    0x8401389c    0x98    bgez a3,ffffffff840138a8 <sendSignal+0xa4>
    0x840138a0    0x9c    li a5,-1
    0x840138a2    0x9e    slli a5,a5,0x27
    0x840138a4    0xa0    or s2,s2,a5
    0x840138a8    0xa4    srli a2,a4,0x19
    0x840138ac    0xa8    bgez a4,ffffffff840138b6 <sendSignal+0xb2>
    0x840138b0    0xac    li a5,-1
    0x840138b2    0xae    slli a5,a5,0x27
    0x840138b4    0xb0    or a2,a2,a5
    0x840138b6    0xb2    mv a1,s2
    0x840138b8    0xb4    mv a0,s2
    0x840138ba    0xb6    jal ra,ffffffff84012b00 <tcbEPDequeue>
    0x840138be    0xba    ld a3,8(s0)
    0x840138c0    0xbc    li a4,-1
    0x840138c2    0xbe    slli a5,a4,0x27
    0x840138c6    0xc2    and a3,a3,a5
    0x840138c8    0xc4    srli a4,a4,0x19
    0x840138ca    0xc6    and a4,a4,a0
    0x840138cc    0xc8    or a4,a4,a3
    0x840138ce    0xca    sd a4,8(s0)
    0x840138d0    0xcc    ld a5,0(s0)
    0x840138d2    0xce    slli a5,a5,0x27
    0x840138d4    0xd0    srli a5,a5,0x27
    0x840138d6    0xd2    slli a1,a1,0x19
    0x840138d8    0xd4    or a5,a5,a1
    0x840138da    0xd6    beqz a0,ffffffff840138f2 <sendSignal+0xee>
    0x840138dc    0xd8    sd a5,0(s0)
    0x840138de    0xda    li a1,1
    0x840138e0    0xdc    mv a0,s2
    0x840138e2    0xde    jal ra,ffffffff840122d8 <setThreadState>
    0x840138e6    0xe2    sd s1,72(s2)
    0x840138ea    0xe6    mv a0,s2
    0x840138ec    0xe8    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x840138f0    0xec    j ffffffff84013826 <sendSignal+0x22>
    0x840138f2    0xee    andi a5,a5,-4
    0x840138f4    0xf0    sd a5,0(s0)
    0x840138f6    0xf2    j ffffffff840138de <sendSignal+0xda>
    0x840138f8    0xf4    ld a1,16(a0)
    0x840138fa    0xf6    or s1,s1,a1
    0x840138fc    0xf8    sd s1,16(a0)
    0x840138fe    0xfa    j ffffffff84013826 <sendSignal+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
99 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 149 nodes.

Section cancelIPC (240 of 266)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 88 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelIPC`:

    0x84012caa     0x0    addi sp,sp,-48
    0x84012cac     0x2    sd ra,40(sp)          ; stack access
    0x84012cae     0x4    sd s0,32(sp)          ; stack access
    0x84012cb0     0x6    sd s1,24(sp)          ; stack access
    0x84012cb2     0x8    mv s0,a0
    0x84012cb4     0xa    ld a4,280(a0)
    0x84012cb8     0xe    andi a5,a4,15
    0x84012cbc    0x12    li a3,5
    0x84012cbe    0x14    beq a5,a3,ffffffff84012d60 <cancelIPC+0xb6>
    0x84012cc2    0x18    bltu a3,a5,ffffffff84012d36 <cancelIPC+0x8c>
    0x84012cc6    0x1c    addi a5,a5,-3
    0x84012cc8    0x1e    li a3,1
    0x84012cca    0x20    bltu a3,a5,ffffffff84012d2c <cancelIPC+0x82>
    0x84012cce    0x24    lui a5,0xe0000
    0x84012cd2    0x28    srli a5,a5,0x19
    0x84012cd4    0x2a    and a5,a5,a4
    0x84012cd6    0x2c    slli a3,a4,0x19
    0x84012cda    0x30    bgez a3,ffffffff84012ce4 <cancelIPC+0x3a>
    0x84012cde    0x34    li a4,-1
    0x84012ce0    0x36    slli a4,a4,0x27
    0x84012ce2    0x38    or a5,a5,a4
    0x84012ce4    0x3a    mv s1,a5
    0x84012ce6    0x3c    ld a1,8(a5)
    0x84012ce8    0x3e    ld a5,0(a5)
    0x84012cea    0x40    lui a2,0xf8000
    0x84012cee    0x44    srli a2,a2,0x19
    0x84012cf0    0x46    and a2,a2,a5
    0x84012cf2    0x48    slli a4,a5,0x19
    0x84012cf6    0x4c    bgez a4,ffffffff84012d00 <cancelIPC+0x56>
    0x84012cfa    0x50    li a5,-1
    0x84012cfc    0x52    slli a5,a5,0x27
    0x84012cfe    0x54    or a2,a2,a5
    0x84012d00    0x56    mv a0,s0
    0x84012d02    0x58    jal ra,ffffffff84012b00 <tcbEPDequeue>
    0x84012d06    0x5c    sd a0,0(sp)           ; stack access
    0x84012d08    0x5e    sd a1,8(sp)           ; stack access
    0x84012d0a    0x60    sd a0,8(s1)
    0x84012d0c    0x62    ld a5,0(s1)
    0x84012d0e    0x64    li a4,-1
    0x84012d10    0x66    slli a4,a4,0x27
    0x84012d12    0x68    addi a4,a4,3
    0x84012d14    0x6a    and a5,a5,a4
    0x84012d16    0x6c    lui a4,0xf8000
    0x84012d1a    0x70    srli a4,a4,0x19
    0x84012d1c    0x72    and a1,a1,a4
    0x84012d1e    0x74    or a1,a1,a5
    0x84012d20    0x76    beqz a0,ffffffff84012d5a <cancelIPC+0xb0>
    0x84012d22    0x78    sd a1,0(s1)
    0x84012d24    0x7a    li a1,0
    0x84012d26    0x7c    mv a0,s0
    0x84012d28    0x7e    jal ra,ffffffff840122d8 <setThreadState>
    0x84012d2c    0x82    ld ra,40(sp)          ; stack access
    0x84012d2e    0x84    ld s0,32(sp)          ; stack access
    0x84012d30    0x86    ld s1,24(sp)          ; stack access
    0x84012d32    0x88    addi sp,sp,48
    0x84012d34    0x8a    ret
    0x84012d36    0x8c    li a3,6
    0x84012d38    0x8e    bne a5,a3,ffffffff84012d2c <cancelIPC+0x82>
    0x84012d3c    0x92    lui a1,0xe0000
    0x84012d40    0x96    srli a1,a1,0x19
    0x84012d42    0x98    and a1,a1,a4
    0x84012d44    0x9a    slli a5,a4,0x19
    0x84012d48    0x9e    bgez a5,ffffffff84012d52 <cancelIPC+0xa8>
    0x84012d4c    0xa2    li a5,-1
    0x84012d4e    0xa4    slli a5,a5,0x27
    0x84012d50    0xa6    or a1,a1,a5
    0x84012d52    0xa8    mv a0,s0
    0x84012d54    0xaa    jal ra,ffffffff84012c3a <cancelSignal>
    0x84012d58    0xae    j ffffffff84012d2c <cancelIPC+0x82>
    0x84012d5a    0xb0    andi a1,a1,-4
    0x84012d5c    0xb2    sd a1,0(s1)
    0x84012d5e    0xb4    j ffffffff84012d24 <cancelIPC+0x7a>
    0x84012d60    0xb6    sd zero,312(a0)
    0x84012d64    0xba    sd zero,320(a0)
    0x84012d68    0xbe    andi s0,a0,-1024
    0x84012d6c    0xc2    ld a5,88(s0)
    0x84012d6e    0xc4    lui a0,0xf8000
    0x84012d72    0xc8    srli a0,a0,0x19
    0x84012d74    0xca    and a0,a0,a5
    0x84012d76    0xcc    slli a4,a5,0x19
    0x84012d7a    0xd0    bgez a4,ffffffff84012d8a <cancelIPC+0xe0>
    0x84012d7e    0xd4    li a5,-1
    0x84012d80    0xd6    slli a5,a5,0x27
    0x84012d82    0xd8    or a0,a0,a5
    0x84012d84    0xda    jal ra,ffffffff84013656 <cteDeleteOne>
    0x84012d88    0xde    j ffffffff84012d2c <cancelIPC+0x82>
    0x84012d8a    0xe0    beqz a0,ffffffff84012d2c <cancelIPC+0x82>
    0x84012d8c    0xe2    j ffffffff84012d84 <cancelIPC+0xda>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 131 nodes.

Section create_initial_thread (241 of 266)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 803 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `create_initial_thread`:

    0x8400183a      0x0    addi sp,sp,-160
    0x8400183c      0x2    sd ra,136(sp)         ; stack access
    0x8400183e      0x4    sd s0,128(sp)         ; stack access
    0x84001840      0x6    sd s1,120(sp)         ; stack access
    0x84001842      0x8    sd s2,112(sp)         ; stack access
    0x84001844      0xa    sd s3,104(sp)         ; stack access
    0x84001846      0xc    sd s4,96(sp)          ; stack access
    0x84001848      0xe    sd s5,88(sp)          ; stack access
    0x8400184a     0x10    sd s6,80(sp)          ; stack access
    0x8400184c     0x12    sd s7,72(sp)          ; stack access
    0x8400184e     0x14    sd a0,16(sp)          ; stack access
    0x84001850     0x16    sd a1,24(sp)          ; stack access
    0x84001852     0x18    sd a2,0(sp)           ; stack access
    0x84001854     0x1a    sd a3,8(sp)           ; stack access
    0x84001856     0x1c    mv s5,a4
    0x84001858     0x1e    mv s6,a5
    0x8400185a     0x20    mv s7,a6
    0x8400185c     0x22    sd a7,152(sp)         ; stack access
    0x8400185e     0x24    auipc s0,0x1
    0x84001862     0x28    ld s0,1530(s0) # ffffffff84002e58 <rootserver+0x30>
    0x84001866     0x2c    addi s0,s0,512
    0x8400186a     0x30    mv s3,s0
    0x8400186c     0x32    li a5,5
    0x8400186e     0x34    sd a5,368(s0)
    0x84001872     0x38    li a5,32
    0x84001876     0x3c    sd a5,256(s0)
    0x8400187a     0x40    mv s1,a0
    0x8400187c     0x42    mv s4,a1
    0x8400187e     0x44    srli s2,a0,0x3b
    0x84001882     0x48    li a5,20
    0x84001884     0x4a    bltu a5,s2,ffffffff84001cae <create_initial_thread+0x474>
    0x84001888     0x4e    slli a4,s2,0x2
    0x8400188c     0x52    auipc a3,0x16
    0x84001890     0x56    addi a3,a3,-464 # ffffffff840176bc <ksDomScheduleLength+0x604>
    0x84001894     0x5a    add a4,a4,a3
    0x84001896     0x5c    lw a5,0(a4)
    0x84001898     0x5e    add a5,a5,a3
    0x8400189a     0x60    jr a5
    0x8400189c     0x62    slli a1,a0,0x19
    0x840018a0     0x66    srli a1,a1,0x19
    0x840018a2     0x68    slli a5,a0,0x19
    0x840018a6     0x6c    bgez a5,ffffffff8400208a <create_initial_thread+0x850>
    0x840018aa     0x70    li a5,-1
    0x840018ac     0x72    slli a5,a5,0x27
    0x840018ae     0x74    or a1,a1,a5
    0x840018b0     0x76    ld a2,152(sp)
    0x840018b2     0x78    ld a3,160(sp)
    0x840018b4     0x7a    addi a1,a1,320
    0x840018b8     0x7e    addi a0,sp,40
    0x840018ba     0x80    jal ra,ffffffff84011dae <deriveCap>
    0x840018be     0x84    ld a5,40(sp)
    0x840018c0     0x86    slli a2,s1,0x19
    0x840018c4     0x8a    srli a2,a2,0x19
    0x840018c6     0x8c    bnez a5,ffffffff8400206a <create_initial_thread+0x830>
    0x840018ca     0x90    li a5,-1
    0x840018cc     0x92    slli a5,a5,0x27
    0x840018ce     0x94    or a2,a2,a5
    0x840018d0     0x96    auipc a3,0x1
    0x840018d4     0x9a    ld a3,1416(a3) # ffffffff84002e58 <rootserver+0x30>
    0x840018d8     0x9e    addi a2,a2,64
    0x840018dc     0xa2    ld a0,16(sp)
    0x840018de     0xa4    ld a1,24(sp)
    0x840018e0     0xa6    jal ra,ffffffff84011286 <cteInsert>
    0x840018e4     0xaa    slli a2,s1,0x19
    0x840018e8     0xae    srli a2,a2,0x19
    0x840018ea     0xb0    slli a5,s1,0x19
    0x840018ee     0xb4    bgez a5,ffffffff840018f8 <create_initial_thread+0xbe>
    0x840018f2     0xb8    li a5,-1
    0x840018f4     0xba    slli a5,a5,0x27
    0x840018f6     0xbc    or a2,a2,a5
    0x840018f8     0xbe    auipc a3,0x1
    0x840018fc     0xc2    ld a3,1376(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001900     0xc6    addi a3,a3,32
    0x84001904     0xca    addi a2,a2,96
    0x84001908     0xce    ld a0,0(sp)
    0x8400190a     0xd0    ld a1,8(sp)
    0x8400190c     0xd2    jal ra,ffffffff84011286 <cteInsert>
    0x84001910     0xd6    slli a2,s1,0x19
    0x84001914     0xda    srli a2,a2,0x19
    0x84001916     0xdc    slli a5,s1,0x19
    0x8400191a     0xe0    bgez a5,ffffffff84001b74 <create_initial_thread+0x33a>
    0x8400191e     0xe4    li a5,-1
    0x84001920     0xe6    slli a5,a5,0x27
    0x84001922     0xe8    or a2,a2,a5
    0x84001924     0xea    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001926     0xec    slli a1,a0,0x19
    0x8400192a     0xf0    srli a1,a1,0x19
    0x8400192c     0xf2    slli a5,a0,0x19
    0x84001930     0xf6    bgez a5,ffffffff840020a8 <create_initial_thread+0x86e>
    0x84001934     0xfa    li a5,-1
    0x84001936     0xfc    slli a5,a5,0x27
    0x84001938     0xfe    or a1,a1,a5
    0x8400193a    0x100    ld a2,152(sp)
    0x8400193c    0x102    ld a3,160(sp)
    0x8400193e    0x104    addi a1,a1,320
    0x84001942    0x108    addi a0,sp,40
    0x84001944    0x10a    jal ra,ffffffff84011dae <deriveCap>
    0x84001948    0x10e    ld a5,40(sp)
    0x8400194a    0x110    slli a2,s1,0x19
    0x8400194e    0x114    srli a2,a2,0x19
    0x84001950    0x116    bnez a5,ffffffff8400206e <create_initial_thread+0x834>
    0x84001954    0x11a    li a5,-1
    0x84001956    0x11c    slli a5,a5,0x27
    0x84001958    0x11e    or a2,a2,a5
    0x8400195a    0x120    auipc a3,0x1
    0x8400195e    0x124    ld a3,1278(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001962    0x128    addi a2,a2,64
    0x84001966    0x12c    ld a0,16(sp)
    0x84001968    0x12e    ld a1,24(sp)
    0x8400196a    0x130    jal ra,ffffffff84011286 <cteInsert>
    0x8400196e    0x134    slli a2,s1,0x19
    0x84001972    0x138    srli a2,a2,0x19
    0x84001974    0x13a    slli a5,s1,0x19
    0x84001978    0x13e    bgez a5,ffffffff84001982 <create_initial_thread+0x148>
    0x8400197c    0x142    li a5,-1
    0x8400197e    0x144    slli a5,a5,0x27
    0x84001980    0x146    or a2,a2,a5
    0x84001982    0x148    auipc a3,0x1
    0x84001986    0x14c    ld a3,1238(a3) # ffffffff84002e58 <rootserver+0x30>
    0x8400198a    0x150    addi a3,a3,32
    0x8400198e    0x154    addi a2,a2,96
    0x84001992    0x158    ld a0,0(sp)
    0x84001994    0x15a    ld a1,8(sp)
    0x84001996    0x15c    jal ra,ffffffff84011286 <cteInsert>
    0x8400199a    0x160    slli a2,s1,0x19
    0x8400199e    0x164    srli a2,a2,0x19
    0x840019a0    0x166    slli a5,s1,0x19
    0x840019a4    0x16a    bgez a5,ffffffff84001b74 <create_initial_thread+0x33a>
    0x840019a8    0x16e    li a5,-1
    0x840019aa    0x170    slli a5,a5,0x27
    0x840019ac    0x172    or a2,a2,a5
    0x840019ae    0x174    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x840019b0    0x176    slli a1,a0,0x19
    0x840019b4    0x17a    srli a1,a1,0x19
    0x840019b6    0x17c    slli a5,a0,0x19
    0x840019ba    0x180    bgez a5,ffffffff840020c6 <create_initial_thread+0x88c>
    0x840019be    0x184    li a5,-1
    0x840019c0    0x186    slli a5,a5,0x27
    0x840019c2    0x188    or a1,a1,a5
    0x840019c4    0x18a    ld a2,152(sp)
    0x840019c6    0x18c    ld a3,160(sp)
    0x840019c8    0x18e    addi a1,a1,320
    0x840019cc    0x192    addi a0,sp,40
    0x840019ce    0x194    jal ra,ffffffff84011dae <deriveCap>
    0x840019d2    0x198    ld a5,40(sp)
    0x840019d4    0x19a    slli a2,s1,0x19
    0x840019d8    0x19e    srli a2,a2,0x19
    0x840019da    0x1a0    bnez a5,ffffffff84002072 <create_initial_thread+0x838>
    0x840019de    0x1a4    li a5,-1
    0x840019e0    0x1a6    slli a5,a5,0x27
    0x840019e2    0x1a8    or a2,a2,a5
    0x840019e4    0x1aa    auipc a3,0x1
    0x840019e8    0x1ae    ld a3,1140(a3) # ffffffff84002e58 <rootserver+0x30>
    0x840019ec    0x1b2    addi a2,a2,64
    0x840019f0    0x1b6    ld a0,16(sp)
    0x840019f2    0x1b8    ld a1,24(sp)
    0x840019f4    0x1ba    jal ra,ffffffff84011286 <cteInsert>
    0x840019f8    0x1be    slli a2,s1,0x19
    0x840019fc    0x1c2    srli a2,a2,0x19
    0x840019fe    0x1c4    slli a5,s1,0x19
    0x84001a02    0x1c8    bgez a5,ffffffff84001a0c <create_initial_thread+0x1d2>
    0x84001a06    0x1cc    li a5,-1
    0x84001a08    0x1ce    slli a5,a5,0x27
    0x84001a0a    0x1d0    or a2,a2,a5
    0x84001a0c    0x1d2    auipc a3,0x1
    0x84001a10    0x1d6    ld a3,1100(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001a14    0x1da    addi a3,a3,32
    0x84001a18    0x1de    addi a2,a2,96
    0x84001a1c    0x1e2    ld a0,0(sp)
    0x84001a1e    0x1e4    ld a1,8(sp)
    0x84001a20    0x1e6    jal ra,ffffffff84011286 <cteInsert>
    0x84001a24    0x1ea    slli a2,s1,0x19
    0x84001a28    0x1ee    srli a2,a2,0x19
    0x84001a2a    0x1f0    slli a5,s1,0x19
    0x84001a2e    0x1f4    bgez a5,ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001a32    0x1f8    li a5,-1
    0x84001a34    0x1fa    slli a5,a5,0x27
    0x84001a36    0x1fc    or a2,a2,a5
    0x84001a38    0x1fe    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001a3a    0x200    slli a5,a0,0x1
    0x84001a3e    0x204    lui a1,0xfc000
    0x84001a42    0x208    srli a1,a1,0x19
    0x84001a44    0x20a    and a1,a1,a5
    0x84001a46    0x20c    slli a4,a5,0x19
    0x84001a4a    0x210    bgez a4,ffffffff840020e4 <create_initial_thread+0x8aa>
    0x84001a4e    0x214    li a5,-1
    0x84001a50    0x216    slli a5,a5,0x27
    0x84001a52    0x218    or a1,a1,a5
    0x84001a54    0x21a    ld a2,152(sp)
    0x84001a56    0x21c    ld a3,160(sp)
    0x84001a58    0x21e    addi a1,a1,320 # fffffffffc000140 <ki_end+0x77fd1140>
    0x84001a5c    0x222    addi a0,sp,40
    0x84001a5e    0x224    jal ra,ffffffff84011dae <deriveCap>
    0x84001a62    0x228    ld a5,40(sp)
    0x84001a64    0x22a    bnez a5,ffffffff84002076 <create_initial_thread+0x83c>
    0x84001a68    0x22e    slli a2,s1,0x1
    0x84001a6c    0x232    lui a5,0xfc000
    0x84001a70    0x236    srli a5,a5,0x19
    0x84001a72    0x238    and a2,a2,a5
    0x84001a74    0x23a    li a5,-1
    0x84001a76    0x23c    slli a5,a5,0x27
    0x84001a78    0x23e    or a2,a2,a5
    0x84001a7a    0x240    auipc a3,0x1
    0x84001a7e    0x244    ld a3,990(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001a82    0x248    addi a2,a2,64
    0x84001a86    0x24c    ld a0,16(sp)
    0x84001a88    0x24e    ld a1,24(sp)
    0x84001a8a    0x250    jal ra,ffffffff84011286 <cteInsert>
    0x84001a8e    0x254    slli a5,s1,0x1
    0x84001a92    0x258    lui a2,0xfc000
    0x84001a96    0x25c    srli a2,a2,0x19
    0x84001a98    0x25e    and a2,a2,a5
    0x84001a9a    0x260    slli a4,a5,0x19
    0x84001a9e    0x264    bgez a4,ffffffff84001aa8 <create_initial_thread+0x26e>
    0x84001aa2    0x268    li a5,-1
    0x84001aa4    0x26a    slli a5,a5,0x27
    0x84001aa6    0x26c    or a2,a2,a5
    0x84001aa8    0x26e    auipc a3,0x1
    0x84001aac    0x272    ld a3,944(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001ab0    0x276    addi a3,a3,32
    0x84001ab4    0x27a    addi a2,a2,96 # fffffffffc000060 <ki_end+0x77fd1060>
    0x84001ab8    0x27e    ld a0,0(sp)
    0x84001aba    0x280    ld a1,8(sp)
    0x84001abc    0x282    jal ra,ffffffff84011286 <cteInsert>
    0x84001ac0    0x286    slli a5,s1,0x1
    0x84001ac4    0x28a    lui a2,0xfc000
    0x84001ac8    0x28e    srli a2,a2,0x19
    0x84001aca    0x290    and a2,a2,a5
    0x84001acc    0x292    slli a4,a5,0x19
    0x84001ad0    0x296    bgez a4,ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001ad4    0x29a    li a5,-1
    0x84001ad6    0x29c    slli a5,a5,0x27
    0x84001ad8    0x29e    or a2,a2,a5
    0x84001ada    0x2a0    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001adc    0x2a2    slli a5,a0,0x19
    0x84001ae0    0x2a6    bgez a5,ffffffff84002104 <create_initial_thread+0x8ca>
    0x84001ae4    0x2aa    li a1,1
    0x84001ae6    0x2ac    slli a1,a1,0x27
    0x84001ae8    0x2ae    addi a1,a1,-1024
    0x84001aec    0x2b2    and a1,a1,a0
    0x84001aee    0x2b4    li a5,-1
    0x84001af0    0x2b6    slli a5,a5,0x27
    0x84001af2    0x2b8    or a1,a1,a5
    0x84001af4    0x2ba    ld a2,152(sp)
    0x84001af6    0x2bc    ld a3,160(sp)
    0x84001af8    0x2be    addi a1,a1,320
    0x84001afc    0x2c2    addi a0,sp,40
    0x84001afe    0x2c4    jal ra,ffffffff84011dae <deriveCap>
    0x84001b02    0x2c8    ld a5,40(sp)
    0x84001b04    0x2ca    slli a2,s1,0x19
    0x84001b08    0x2ce    srli a2,a2,0x19
    0x84001b0a    0x2d0    bnez a5,ffffffff8400207a <create_initial_thread+0x840>
    0x84001b0e    0x2d4    li a5,-1
    0x84001b10    0x2d6    slli a5,a5,0x27
    0x84001b12    0x2d8    or a2,a2,a5
    0x84001b14    0x2da    andi a2,a2,-1024
    0x84001b18    0x2de    auipc a3,0x1
    0x84001b1c    0x2e2    ld a3,832(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001b20    0x2e6    addi a2,a2,64 # fffffffffc000040 <ki_end+0x77fd1040>
    0x84001b24    0x2ea    ld a0,16(sp)
    0x84001b26    0x2ec    ld a1,24(sp)
    0x84001b28    0x2ee    jal ra,ffffffff84011286 <cteInsert>
    0x84001b2c    0x2f2    slli a2,s1,0x19
    0x84001b30    0x2f6    srli a2,a2,0x19
    0x84001b32    0x2f8    slli a5,s1,0x19
    0x84001b36    0x2fc    bgez a5,ffffffff84001b40 <create_initial_thread+0x306>
    0x84001b3a    0x300    li a5,-1
    0x84001b3c    0x302    slli a5,a5,0x27
    0x84001b3e    0x304    or a2,a2,a5
    0x84001b40    0x306    andi a2,a2,-1024
    0x84001b44    0x30a    auipc a3,0x1
    0x84001b48    0x30e    ld a3,788(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001b4c    0x312    addi a3,a3,32
    0x84001b50    0x316    addi a2,a2,96
    0x84001b54    0x31a    ld a0,0(sp)
    0x84001b56    0x31c    ld a1,8(sp)
    0x84001b58    0x31e    jal ra,ffffffff84011286 <cteInsert>
    0x84001b5c    0x322    slli a2,s1,0x19
    0x84001b60    0x326    srli a2,a2,0x19
    0x84001b62    0x328    slli a5,s1,0x19
    0x84001b66    0x32c    bgez a5,ffffffff84001b70 <create_initial_thread+0x336>
    0x84001b6a    0x330    li a5,-1
    0x84001b6c    0x332    slli a5,a5,0x27
    0x84001b6e    0x334    or a2,a2,a5
    0x84001b70    0x336    andi a2,a2,-1024
    0x84001b74    0x33a    auipc a3,0x1
    0x84001b78    0x33e    ld a3,740(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001b7c    0x342    addi a3,a3,128
    0x84001b80    0x346    addi a2,a2,320
    0x84001b84    0x34a    ld a0,48(sp)          ; stack access
    0x84001b86    0x34c    ld a1,56(sp)          ; stack access
    0x84001b88    0x34e    jal ra,ffffffff84011286 <cteInsert>
    0x84001b8c    0x352    sd s7,384(s0)
    0x84001b90    0x356    sd s6,72(s0)
    0x84001b94    0x35a    sd s5,272(s0)
    0x84001b98    0x35e    li a5,255
    0x84001b9c    0x362    sd a5,360(s0)
    0x84001ba0    0x366    sd a5,352(s0)
    0x84001ba4    0x36a    mv a0,s0
    0x84001ba6    0x36c    jal ra,ffffffff840115c8 <setupReplyMaster>
    0x84001baa    0x370    li a1,1
    0x84001bac    0x372    mv a0,s0
    0x84001bae    0x374    jal ra,ffffffff840122d8 <setThreadState>
    0x84001bb2    0x378    auipc a5,0x2d
    0x84001bb6    0x37c    ld a5,-274(a5) # ffffffff8402eaa0 <ksDomScheduleIdx>
    0x84001bba    0x380    slli a4,a5,0x4
    0x84001bbe    0x384    auipc a5,0x16
    0x84001bc2    0x388    addi a5,a5,-318 # ffffffff84017a80 <fault_messages>
    0x84001bc6    0x38c    add a5,a5,a4
    0x84001bc8    0x38e    ld a4,192(a5)
    0x84001bca    0x390    auipc a3,0x2d
    0x84001bce    0x394    sd a4,-970(a3) # ffffffff8402e800 <ksCurDomain>
    0x84001bd2    0x398    ld a5,200(a5)
    0x84001bd4    0x39a    auipc a4,0x2c
    0x84001bd8    0x39e    sd a5,644(a4) # ffffffff8402de58 <ksDomainTime>
    0x84001bdc    0x3a2    slli s0,s0,0x19
    0x84001bde    0x3a4    srli s0,s0,0x19
    0x84001be0    0x3a6    li a5,3
    0x84001be2    0x3a8    slli a5,a5,0x3d
    0x84001be4    0x3aa    or s0,s0,a5
    0x84001be6    0x3ac    li a5,20
    0x84001be8    0x3ae    bltu a5,s2,ffffffff84001fe0 <create_initial_thread+0x7a6>
    0x84001bec    0x3b2    slli a4,s2,0x2
    0x84001bf0    0x3b6    auipc a3,0x16
    0x84001bf4    0x3ba    addi a3,a3,-1248 # ffffffff84017710 <ksDomScheduleLength+0x658>
    0x84001bf8    0x3be    add a4,a4,a3
    0x84001bfa    0x3c0    lw a5,0(a4)
    0x84001bfc    0x3c2    add a5,a5,a3
    0x84001bfe    0x3c4    jr a5
    0x84001c00    0x3c6    andi a5,a0,127
    0x84001c04    0x3ca    li a4,64
    0x84001c08    0x3ce    beq a5,a4,ffffffff8400212c <create_initial_thread+0x8f2>
    0x84001c0c    0x3d2    andi a1,a0,63
    0x84001c10    0x3d6    addiw a5,a1,1
    0x84001c14    0x3da    li a1,-1
    0x84001c16    0x3dc    sll a1,a1,a5
    0x84001c1a    0x3e0    and a1,a1,s4
    0x84001c1e    0x3e4    ld a2,152(sp)
    0x84001c20    0x3e6    ld a3,160(sp)
    0x84001c22    0x3e8    addi a1,a1,320
    0x84001c26    0x3ec    addi a0,sp,40
    0x84001c28    0x3ee    jal ra,ffffffff84011dae <deriveCap>
    0x84001c2c    0x3f2    ld a5,40(sp)
    0x84001c2e    0x3f4    bnez a5,ffffffff8400207e <create_initial_thread+0x844>
    0x84001c32    0x3f8    andi a2,s1,63
    0x84001c36    0x3fc    addiw a5,a2,1
    0x84001c3a    0x400    li a2,-1
    0x84001c3c    0x402    sll a2,a2,a5
    0x84001c40    0x406    and a2,a2,s4
    0x84001c44    0x40a    auipc a3,0x1
    0x84001c48    0x40e    ld a3,532(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001c4c    0x412    addi a2,a2,64
    0x84001c50    0x416    ld a0,16(sp)
    0x84001c52    0x418    ld a1,24(sp)
    0x84001c54    0x41a    jal ra,ffffffff84011286 <cteInsert>
    0x84001c58    0x41e    andi a5,s1,127
    0x84001c5c    0x422    li a4,64
    0x84001c60    0x426    beq a5,a4,ffffffff84001e3e <create_initial_thread+0x604>
    0x84001c64    0x42a    andi a2,s1,63
    0x84001c68    0x42e    addiw a5,a2,1
    0x84001c6c    0x432    li a2,-1
    0x84001c6e    0x434    sll a2,a2,a5
    0x84001c72    0x438    and a2,a2,s4
    0x84001c76    0x43c    auipc a3,0x1
    0x84001c7a    0x440    ld a3,482(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001c7e    0x444    addi a3,a3,32
    0x84001c82    0x448    addi a2,a2,96
    0x84001c86    0x44c    ld a0,0(sp)
    0x84001c88    0x44e    ld a1,8(sp)
    0x84001c8a    0x450    jal ra,ffffffff84011286 <cteInsert>
    0x84001c8e    0x454    andi a5,s1,127
    0x84001c92    0x458    li a4,64
    0x84001c96    0x45c    beq a5,a4,ffffffff84001edc <create_initial_thread+0x6a2>
    0x84001c9a    0x460    andi a2,s1,63
    0x84001c9e    0x464    addiw a5,a2,1
    0x84001ca2    0x468    li a2,-1
    0x84001ca4    0x46a    sll a2,a2,a5
    0x84001ca8    0x46e    and a2,a2,s4
    0x84001cac    0x472    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001cae    0x474    li a5,3
    0x84001cb0    0x476    beq s2,a5,ffffffff84001cdc <create_initial_thread+0x4a2>
    0x84001cb4    0x47a    li a5,13
    0x84001cb6    0x47c    beq s2,a5,ffffffff84001cf6 <create_initial_thread+0x4bc>
    0x84001cba    0x480    li a5,1
    0x84001cbc    0x482    li a1,0
    0x84001cbe    0x484    bne s2,a5,ffffffff84001d14 <create_initial_thread+0x4da>
    0x84001cc2    0x488    srli a5,s4,0x9
    0x84001cc6    0x48c    slli a1,a5,0x19
    0x84001cca    0x490    srli a1,a1,0x19
    0x84001ccc    0x492    slli a4,a5,0x19
    0x84001cd0    0x496    bgez a4,ffffffff84001d14 <create_initial_thread+0x4da>
    0x84001cd4    0x49a    li a5,-1
    0x84001cd6    0x49c    slli a5,a5,0x27
    0x84001cd8    0x49e    or a1,a1,a5
    0x84001cda    0x4a0    j ffffffff84001d14 <create_initial_thread+0x4da>
    0x84001cdc    0x4a2    srli a5,s4,0x9
    0x84001ce0    0x4a6    slli a1,a5,0x19
    0x84001ce4    0x4aa    srli a1,a1,0x19
    0x84001ce6    0x4ac    slli a4,a5,0x19
    0x84001cea    0x4b0    bgez a4,ffffffff84001d14 <create_initial_thread+0x4da>
    0x84001cee    0x4b4    li a5,-1
    0x84001cf0    0x4b6    slli a5,a5,0x27
    0x84001cf2    0x4b8    or a1,a1,a5
    0x84001cf4    0x4ba    j ffffffff84001d14 <create_initial_thread+0x4da>
    0x84001cf6    0x4bc    slli a5,s1,0x2
    0x84001cfa    0x4c0    lui a1,0xf8000
    0x84001cfe    0x4c4    srli a1,a1,0x19
    0x84001d00    0x4c6    and a1,a1,a5
    0x84001d02    0x4c8    slli a4,a5,0x19
    0x84001d06    0x4cc    bgez a4,ffffffff84001d14 <create_initial_thread+0x4da>
    0x84001d0a    0x4d0    li a5,-1
    0x84001d0c    0x4d2    slli a5,a5,0x27
    0x84001d0e    0x4d4    or a1,a1,a5
    0x84001d10    0x4d6    j ffffffff84001d14 <create_initial_thread+0x4da>
    0x84001d12    0x4d8    li a1,0
    0x84001d14    0x4da    ld a2,152(sp)         ; stack access
    0x84001d16    0x4dc    ld a3,160(sp)         ; stack access
    0x84001d18    0x4de    addi a1,a1,320 # fffffffff8000140 <ki_end+0x73fd1140>
    0x84001d1c    0x4e2    addi a0,sp,40
    0x84001d1e    0x4e4    jal ra,ffffffff84011dae <deriveCap>
    0x84001d22    0x4e8    ld a5,40(sp)          ; stack access
    0x84001d24    0x4ea    bnez a5,ffffffff84002082 <create_initial_thread+0x848>
    0x84001d28    0x4ee    li a5,20
    0x84001d2a    0x4f0    bltu a5,s2,ffffffff84001da8 <create_initial_thread+0x56e>
    0x84001d2e    0x4f4    slli a4,s2,0x2
    0x84001d32    0x4f8    auipc a3,0x16
    0x84001d36    0x4fc    addi a3,a3,-1486 # ffffffff84017764 <ksDomScheduleLength+0x6ac>
    0x84001d3a    0x500    add a4,a4,a3
    0x84001d3c    0x502    lw a5,0(a4)
    0x84001d3e    0x504    add a5,a5,a3
    0x84001d40    0x506    jr a5
    0x84001d42    0x508    slli a2,s1,0x19
    0x84001d46    0x50c    srli a2,a2,0x19
    0x84001d48    0x50e    slli a5,s1,0x19
    0x84001d4c    0x512    bltz a5,ffffffff840018ca <create_initial_thread+0x90>
    0x84001d50    0x516    j ffffffff840018d0 <create_initial_thread+0x96>
    0x84001d52    0x518    slli a2,s1,0x19
    0x84001d56    0x51c    srli a2,a2,0x19
    0x84001d58    0x51e    slli a5,s1,0x19
    0x84001d5c    0x522    bltz a5,ffffffff84001954 <create_initial_thread+0x11a>
    0x84001d60    0x526    j ffffffff8400195a <create_initial_thread+0x120>
    0x84001d62    0x528    slli a2,s1,0x19
    0x84001d66    0x52c    srli a2,a2,0x19
    0x84001d68    0x52e    slli a5,s1,0x19
    0x84001d6c    0x532    bltz a5,ffffffff840019de <create_initial_thread+0x1a4>
    0x84001d70    0x536    j ffffffff840019e4 <create_initial_thread+0x1aa>
    0x84001d72    0x538    slli a5,s1,0x1
    0x84001d76    0x53c    lui a2,0xfc000
    0x84001d7a    0x540    srli a2,a2,0x19
    0x84001d7c    0x542    and a2,a2,a5
    0x84001d7e    0x544    slli a4,a5,0x19
    0x84001d82    0x548    bltz a4,ffffffff84001a74 <create_initial_thread+0x23a>
    0x84001d86    0x54c    j ffffffff84001a7a <create_initial_thread+0x240>
    0x84001d88    0x54e    slli a2,s1,0x19
    0x84001d8c    0x552    srli a2,a2,0x19
    0x84001d8e    0x554    slli a5,s1,0x19
    0x84001d92    0x558    bltz a5,ffffffff84001b0e <create_initial_thread+0x2d4>
    0x84001d96    0x55c    j ffffffff84001b14 <create_initial_thread+0x2da>
    0x84001d98    0x55e    andi a5,s1,127
    0x84001d9c    0x562    li a4,64
    0x84001da0    0x566    bne a5,a4,ffffffff84001c32 <create_initial_thread+0x3f8>
    0x84001da4    0x56a    li a2,4
    0x84001da6    0x56c    j ffffffff84001c36 <create_initial_thread+0x3fc>
    0x84001da8    0x56e    li a5,3
    0x84001daa    0x570    beq s2,a5,ffffffff84001e04 <create_initial_thread+0x5ca>
    0x84001dae    0x574    li a5,13
    0x84001db0    0x576    beq s2,a5,ffffffff84001e1e <create_initial_thread+0x5e4>
    0x84001db4    0x57a    li a5,1
    0x84001db6    0x57c    li a2,0
    0x84001db8    0x57e    beq s2,a5,ffffffff84001dea <create_initial_thread+0x5b0>
    0x84001dbc    0x582    auipc a3,0x1
    0x84001dc0    0x586    ld a3,156(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001dc4    0x58a    addi a2,a2,64 # fffffffffc000040 <ki_end+0x77fd1040>
    0x84001dc8    0x58e    ld a0,16(sp)          ; stack access
    0x84001dca    0x590    ld a1,24(sp)          ; stack access
    0x84001dcc    0x592    jal ra,ffffffff84011286 <cteInsert>
    0x84001dd0    0x596    li a5,20
    0x84001dd2    0x598    bltu a5,s2,ffffffff84001e42 <create_initial_thread+0x608>
    0x84001dd6    0x59c    slli a4,s2,0x2
    0x84001dda    0x5a0    auipc a3,0x16
    0x84001dde    0x5a4    addi a3,a3,-1570 # ffffffff840177b8 <ksDomScheduleLength+0x700>
    0x84001de2    0x5a8    add a4,a4,a3
    0x84001de4    0x5aa    lw a5,0(a4)
    0x84001de6    0x5ac    add a5,a5,a3
    0x84001de8    0x5ae    jr a5
    0x84001dea    0x5b0    srli a5,s4,0x9
    0x84001dee    0x5b4    slli a2,a5,0x19
    0x84001df2    0x5b8    srli a2,a2,0x19
    0x84001df4    0x5ba    slli a4,a5,0x19
    0x84001df8    0x5be    bgez a4,ffffffff84001dbc <create_initial_thread+0x582>
    0x84001dfc    0x5c2    li a5,-1
    0x84001dfe    0x5c4    slli a5,a5,0x27
    0x84001e00    0x5c6    or a2,a2,a5
    0x84001e02    0x5c8    j ffffffff84001dbc <create_initial_thread+0x582>
    0x84001e04    0x5ca    srli a5,s4,0x9
    0x84001e08    0x5ce    slli a2,a5,0x19
    0x84001e0c    0x5d2    srli a2,a2,0x19
    0x84001e0e    0x5d4    slli a4,a5,0x19
    0x84001e12    0x5d8    bgez a4,ffffffff84001dbc <create_initial_thread+0x582>
    0x84001e16    0x5dc    li a5,-1
    0x84001e18    0x5de    slli a5,a5,0x27
    0x84001e1a    0x5e0    or a2,a2,a5
    0x84001e1c    0x5e2    j ffffffff84001dbc <create_initial_thread+0x582>
    0x84001e1e    0x5e4    slli a5,s1,0x2
    0x84001e22    0x5e8    lui a2,0xf8000
    0x84001e26    0x5ec    srli a2,a2,0x19
    0x84001e28    0x5ee    and a2,a2,a5
    0x84001e2a    0x5f0    slli a4,a5,0x19
    0x84001e2e    0x5f4    bgez a4,ffffffff84001dbc <create_initial_thread+0x582>
    0x84001e32    0x5f8    li a5,-1
    0x84001e34    0x5fa    slli a5,a5,0x27
    0x84001e36    0x5fc    or a2,a2,a5
    0x84001e38    0x5fe    j ffffffff84001dbc <create_initial_thread+0x582>
    0x84001e3a    0x600    li a2,0
    0x84001e3c    0x602    j ffffffff84001dbc <create_initial_thread+0x582>
    0x84001e3e    0x604    li a2,4
    0x84001e40    0x606    j ffffffff84001c68 <create_initial_thread+0x42e>
    0x84001e42    0x608    li a5,3
    0x84001e44    0x60a    beq s2,a5,ffffffff84001ea2 <create_initial_thread+0x668>
    0x84001e48    0x60e    li a5,13
    0x84001e4a    0x610    beq s2,a5,ffffffff84001ebc <create_initial_thread+0x682>
    0x84001e4e    0x614    li a5,1
    0x84001e50    0x616    li a2,0
    0x84001e52    0x618    beq s2,a5,ffffffff84001e88 <create_initial_thread+0x64e>
    0x84001e56    0x61c    auipc a3,0x1
    0x84001e5a    0x620    ld a3,2(a3) # ffffffff84002e58 <rootserver+0x30>
    0x84001e5e    0x624    addi a3,a3,32
    0x84001e62    0x628    addi a2,a2,96 # fffffffff8000060 <ki_end+0x73fd1060>
    0x84001e66    0x62c    ld a0,0(sp)           ; stack access
    0x84001e68    0x62e    ld a1,8(sp)           ; stack access
    0x84001e6a    0x630    jal ra,ffffffff84011286 <cteInsert>
    0x84001e6e    0x634    li a5,20
    0x84001e70    0x636    bltu a5,s2,ffffffff84001ee0 <create_initial_thread+0x6a6>
    0x84001e74    0x63a    slli a4,s2,0x2
    0x84001e78    0x63e    auipc a3,0x16
    0x84001e7c    0x642    addi a3,a3,-1644 # ffffffff8401780c <ksDomScheduleLength+0x754>
    0x84001e80    0x646    add a4,a4,a3
    0x84001e82    0x648    lw a5,0(a4)
    0x84001e84    0x64a    add a5,a5,a3
    0x84001e86    0x64c    jr a5
    0x84001e88    0x64e    srli a5,s4,0x9
    0x84001e8c    0x652    slli a2,a5,0x19
    0x84001e90    0x656    srli a2,a2,0x19
    0x84001e92    0x658    slli a4,a5,0x19
    0x84001e96    0x65c    bgez a4,ffffffff84001e56 <create_initial_thread+0x61c>
    0x84001e9a    0x660    li a5,-1
    0x84001e9c    0x662    slli a5,a5,0x27
    0x84001e9e    0x664    or a2,a2,a5
    0x84001ea0    0x666    j ffffffff84001e56 <create_initial_thread+0x61c>
    0x84001ea2    0x668    srli a5,s4,0x9
    0x84001ea6    0x66c    slli a2,a5,0x19
    0x84001eaa    0x670    srli a2,a2,0x19
    0x84001eac    0x672    slli a4,a5,0x19
    0x84001eb0    0x676    bgez a4,ffffffff84001e56 <create_initial_thread+0x61c>
    0x84001eb4    0x67a    li a5,-1
    0x84001eb6    0x67c    slli a5,a5,0x27
    0x84001eb8    0x67e    or a2,a2,a5
    0x84001eba    0x680    j ffffffff84001e56 <create_initial_thread+0x61c>
    0x84001ebc    0x682    slli a5,s1,0x2
    0x84001ec0    0x686    lui a2,0xf8000
    0x84001ec4    0x68a    srli a2,a2,0x19
    0x84001ec6    0x68c    and a2,a2,a5
    0x84001ec8    0x68e    slli a4,a5,0x19
    0x84001ecc    0x692    bgez a4,ffffffff84001e56 <create_initial_thread+0x61c>
    0x84001ed0    0x696    li a5,-1
    0x84001ed2    0x698    slli a5,a5,0x27
    0x84001ed4    0x69a    or a2,a2,a5
    0x84001ed6    0x69c    j ffffffff84001e56 <create_initial_thread+0x61c>
    0x84001ed8    0x69e    li a2,0
    0x84001eda    0x6a0    j ffffffff84001e56 <create_initial_thread+0x61c>
    0x84001edc    0x6a2    li a2,4
    0x84001ede    0x6a4    j ffffffff84001c9e <create_initial_thread+0x464>
    0x84001ee0    0x6a6    li a5,3
    0x84001ee2    0x6a8    beq s2,a5,ffffffff84001f0e <create_initial_thread+0x6d4>
    0x84001ee6    0x6ac    li a5,13
    0x84001ee8    0x6ae    beq s2,a5,ffffffff84001f28 <create_initial_thread+0x6ee>
    0x84001eec    0x6b2    li a5,1
    0x84001eee    0x6b4    li a2,0
    0x84001ef0    0x6b6    bne s2,a5,ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001ef4    0x6ba    srli a5,s4,0x9
    0x84001ef8    0x6be    slli a2,a5,0x19
    0x84001efc    0x6c2    srli a2,a2,0x19
    0x84001efe    0x6c4    slli a4,a5,0x19
    0x84001f02    0x6c8    bgez a4,ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001f06    0x6cc    li a5,-1
    0x84001f08    0x6ce    slli a5,a5,0x27
    0x84001f0a    0x6d0    or a2,a2,a5
    0x84001f0c    0x6d2    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001f0e    0x6d4    srli a5,s4,0x9
    0x84001f12    0x6d8    slli a2,a5,0x19
    0x84001f16    0x6dc    srli a2,a2,0x19
    0x84001f18    0x6de    slli a4,a5,0x19
    0x84001f1c    0x6e2    bgez a4,ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001f20    0x6e6    li a5,-1
    0x84001f22    0x6e8    slli a5,a5,0x27
    0x84001f24    0x6ea    or a2,a2,a5
    0x84001f26    0x6ec    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001f28    0x6ee    slli a5,s1,0x2
    0x84001f2c    0x6f2    lui a2,0xf8000
    0x84001f30    0x6f6    srli a2,a2,0x19
    0x84001f32    0x6f8    and a2,a2,a5
    0x84001f34    0x6fa    slli a4,a5,0x19
    0x84001f38    0x6fe    bgez a4,ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001f3c    0x702    li a5,-1
    0x84001f3e    0x704    slli a5,a5,0x27
    0x84001f40    0x706    or a2,a2,a5
    0x84001f42    0x708    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001f44    0x70a    li a2,0
    0x84001f46    0x70c    j ffffffff84001b74 <create_initial_thread+0x33a>
    0x84001f48    0x70e    slli a5,s1,0x19
    0x84001f4c    0x712    srli a5,a5,0x19
    0x84001f4e    0x714    slli a4,s1,0x19
    0x84001f52    0x718    bgez a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x84001f56    0x71c    li a4,-1
    0x84001f58    0x71e    slli a4,a4,0x27
    0x84001f5a    0x720    or a5,a5,a4
    0x84001f5c    0x722    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84001f5e    0x724    slli a5,s1,0x19
    0x84001f62    0x728    srli a5,a5,0x19
    0x84001f64    0x72a    slli a4,s1,0x19
    0x84001f68    0x72e    bgez a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x84001f6c    0x732    li a4,-1
    0x84001f6e    0x734    slli a4,a4,0x27
    0x84001f70    0x736    or a5,a5,a4
    0x84001f72    0x738    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84001f74    0x73a    slli a5,s1,0x19
    0x84001f78    0x73e    srli a5,a5,0x19
    0x84001f7a    0x740    slli a4,s1,0x19
    0x84001f7e    0x744    bgez a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x84001f82    0x748    li a4,-1
    0x84001f84    0x74a    slli a4,a4,0x27
    0x84001f86    0x74c    or a5,a5,a4
    0x84001f88    0x74e    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84001f8a    0x750    slli s1,s1,0x1
    0x84001f8c    0x752    lui a5,0xfc000
    0x84001f90    0x756    srli a5,a5,0x19
    0x84001f92    0x758    and a5,a5,s1
    0x84001f94    0x75a    slli a4,s1,0x19
    0x84001f98    0x75e    bgez a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x84001f9c    0x762    li a4,-1
    0x84001f9e    0x764    slli a4,a4,0x27
    0x84001fa0    0x766    or a5,a5,a4
    0x84001fa2    0x768    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84001fa4    0x76a    slli a5,s1,0x19
    0x84001fa8    0x76e    srli a5,a5,0x19
    0x84001faa    0x770    slli a4,s1,0x19
    0x84001fae    0x774    bgez a4,ffffffff84001fb8 <create_initial_thread+0x77e>
    0x84001fb2    0x778    li a4,-1
    0x84001fb4    0x77a    slli a4,a4,0x27
    0x84001fb6    0x77c    or a5,a5,a4
    0x84001fb8    0x77e    andi a5,a5,-1024
    0x84001fbc    0x782    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84001fbe    0x784    andi a5,s1,127
    0x84001fc2    0x788    li a4,64
    0x84001fc6    0x78c    beq a5,a4,ffffffff84001fdc <create_initial_thread+0x7a2>
    0x84001fca    0x790    andi s1,s1,63
    0x84001fce    0x794    addiw s1,s1,1
    0x84001fd0    0x796    li a5,-1
    0x84001fd2    0x798    sll a5,a5,s1
    0x84001fd6    0x79c    and a5,a5,s4
    0x84001fda    0x7a0    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84001fdc    0x7a2    li s1,4
    0x84001fde    0x7a4    j ffffffff84001fce <create_initial_thread+0x794>
    0x84001fe0    0x7a6    li a5,3
    0x84001fe2    0x7a8    beq s2,a5,ffffffff8400200e <create_initial_thread+0x7d4>
    0x84001fe6    0x7ac    li a5,13
    0x84001fe8    0x7ae    beq s2,a5,ffffffff84002028 <create_initial_thread+0x7ee>
    0x84001fec    0x7b2    li a4,1
    0x84001fee    0x7b4    li a5,0
    0x84001ff0    0x7b6    bne s2,a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x84001ff4    0x7ba    srli s4,s4,0x9
    0x84001ff8    0x7be    slli a5,s4,0x19
    0x84001ffc    0x7c2    srli a5,a5,0x19
    0x84001ffe    0x7c4    slli a4,s4,0x19
    0x84002002    0x7c8    bgez a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x84002006    0x7cc    li a4,-1
    0x84002008    0x7ce    slli a4,a4,0x27
    0x8400200a    0x7d0    or a5,a5,a4
    0x8400200c    0x7d2    j ffffffff84002044 <create_initial_thread+0x80a>
    0x8400200e    0x7d4    srli s4,s4,0x9
    0x84002012    0x7d8    slli a5,s4,0x19
    0x84002016    0x7dc    srli a5,a5,0x19
    0x84002018    0x7de    slli a4,s4,0x19
    0x8400201c    0x7e2    bgez a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x84002020    0x7e6    li a4,-1
    0x84002022    0x7e8    slli a4,a4,0x27
    0x84002024    0x7ea    or a5,a5,a4
    0x84002026    0x7ec    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84002028    0x7ee    slli s1,s1,0x2
    0x8400202a    0x7f0    lui a5,0xf8000
    0x8400202e    0x7f4    srli a5,a5,0x19
    0x84002030    0x7f6    and a5,a5,s1
    0x84002032    0x7f8    slli a4,s1,0x19
    0x84002036    0x7fc    bgez a4,ffffffff84002044 <create_initial_thread+0x80a>
    0x8400203a    0x800    li a4,-1
    0x8400203c    0x802    slli a4,a4,0x27
    0x8400203e    0x804    or a5,a5,a4
    0x84002040    0x806    j ffffffff84002044 <create_initial_thread+0x80a>
    0x84002042    0x808    li a5,0
    0x84002044    0x80a    sd s0,32(a5)
    0x84002046    0x80c    sd zero,40(a5) # fffffffff8000028 <ki_end+0x73fd1028>
    0x8400204a    0x810    sd zero,48(a5)
    0x8400204e    0x814    li a4,3
    0x84002050    0x816    sd a4,56(a5)
    0x84002052    0x818    mv a0,s3
    0x84002054    0x81a    ld ra,136(sp)         ; stack access
    0x84002056    0x81c    ld s0,128(sp)         ; stack access
    0x84002058    0x81e    ld s1,120(sp)         ; stack access
    0x8400205a    0x820    ld s2,112(sp)         ; stack access
    0x8400205c    0x822    ld s3,104(sp)         ; stack access
    0x8400205e    0x824    ld s4,96(sp)          ; stack access
    0x84002060    0x826    ld s5,88(sp)          ; stack access
    0x84002062    0x828    ld s6,80(sp)          ; stack access
    0x84002064    0x82a    ld s7,72(sp)          ; stack access
    0x84002066    0x82c    addi sp,sp,160
    0x84002068    0x82e    ret
    0x8400206a    0x830    li s3,0
    0x8400206c    0x832    j ffffffff84002052 <create_initial_thread+0x818>
    0x8400206e    0x834    li s3,0
    0x84002070    0x836    j ffffffff84002052 <create_initial_thread+0x818>
    0x84002072    0x838    li s3,0
    0x84002074    0x83a    j ffffffff84002052 <create_initial_thread+0x818>
    0x84002076    0x83c    li s3,0
    0x84002078    0x83e    j ffffffff84002052 <create_initial_thread+0x818>
    0x8400207a    0x840    li s3,0
    0x8400207c    0x842    j ffffffff84002052 <create_initial_thread+0x818>
    0x8400207e    0x844    li s3,0
    0x84002080    0x846    j ffffffff84002052 <create_initial_thread+0x818>
    0x84002082    0x848    li s3,0
    0x84002084    0x84a    j ffffffff84002052 <create_initial_thread+0x818>
    0x84002086    0x84c    li s3,0
    0x84002088    0x84e    j ffffffff84002052 <create_initial_thread+0x818>
    0x8400208a    0x850    ld a2,152(sp)
    0x8400208c    0x852    ld a3,160(sp)
    0x8400208e    0x854    addi a1,a1,320
    0x84002092    0x858    addi a0,sp,40
    0x84002094    0x85a    jal ra,ffffffff84011dae <deriveCap>
    0x84002098    0x85e    ld a5,40(sp)
    0x8400209a    0x860    slli a2,s1,0x19
    0x8400209e    0x864    srli a2,a2,0x19
    0x840020a0    0x866    beqz a5,ffffffff840018d0 <create_initial_thread+0x96>
    0x840020a4    0x86a    li s3,0
    0x840020a6    0x86c    j ffffffff84002052 <create_initial_thread+0x818>
    0x840020a8    0x86e    ld a2,152(sp)
    0x840020aa    0x870    ld a3,160(sp)
    0x840020ac    0x872    addi a1,a1,320
    0x840020b0    0x876    addi a0,sp,40
    0x840020b2    0x878    jal ra,ffffffff84011dae <deriveCap>
    0x840020b6    0x87c    ld a5,40(sp)
    0x840020b8    0x87e    slli a2,s1,0x19
    0x840020bc    0x882    srli a2,a2,0x19
    0x840020be    0x884    beqz a5,ffffffff8400195a <create_initial_thread+0x120>
    0x840020c2    0x888    li s3,0
    0x840020c4    0x88a    j ffffffff84002052 <create_initial_thread+0x818>
    0x840020c6    0x88c    ld a2,152(sp)
    0x840020c8    0x88e    ld a3,160(sp)
    0x840020ca    0x890    addi a1,a1,320
    0x840020ce    0x894    addi a0,sp,40
    0x840020d0    0x896    jal ra,ffffffff84011dae <deriveCap>
    0x840020d4    0x89a    ld a5,40(sp)
    0x840020d6    0x89c    slli a2,s1,0x19
    0x840020da    0x8a0    srli a2,a2,0x19
    0x840020dc    0x8a2    beqz a5,ffffffff840019e4 <create_initial_thread+0x1aa>
    0x840020e0    0x8a6    li s3,0
    0x840020e2    0x8a8    j ffffffff84002052 <create_initial_thread+0x818>
    0x840020e4    0x8aa    ld a2,152(sp)
    0x840020e6    0x8ac    ld a3,160(sp)
    0x840020e8    0x8ae    addi a1,a1,320
    0x840020ec    0x8b2    addi a0,sp,40
    0x840020ee    0x8b4    jal ra,ffffffff84011dae <deriveCap>
    0x840020f2    0x8b8    ld a5,40(sp)
    0x840020f4    0x8ba    bnez a5,ffffffff84002086 <create_initial_thread+0x84c>
    0x840020f6    0x8bc    slli a2,s1,0x1
    0x840020fa    0x8c0    lui a5,0xfc000
    0x840020fe    0x8c4    srli a5,a5,0x19
    0x84002100    0x8c6    and a2,a2,a5
    0x84002102    0x8c8    j ffffffff84001a7a <create_initial_thread+0x240>
    0x84002104    0x8ca    li a1,1
    0x84002106    0x8cc    slli a1,a1,0x27
    0x84002108    0x8ce    addi a1,a1,-1024
    0x8400210c    0x8d2    and a1,a1,a0
    0x8400210e    0x8d4    ld a2,152(sp)
    0x84002110    0x8d6    ld a3,160(sp)
    0x84002112    0x8d8    addi a1,a1,320
    0x84002116    0x8dc    addi a0,sp,40
    0x84002118    0x8de    jal ra,ffffffff84011dae <deriveCap>
    0x8400211c    0x8e2    ld a5,40(sp)
    0x8400211e    0x8e4    slli a2,s1,0x19
    0x84002122    0x8e8    srli a2,a2,0x19
    0x84002124    0x8ea    beqz a5,ffffffff84001b14 <create_initial_thread+0x2da>
    0x84002128    0x8ee    li s3,0
    0x8400212a    0x8f0    j ffffffff84002052 <create_initial_thread+0x818>
    0x8400212c    0x8f2    andi a1,a1,-32
    0x8400212e    0x8f4    ld a2,152(sp)
    0x84002130    0x8f6    ld a3,160(sp)
    0x84002132    0x8f8    addi a1,a1,320
    0x84002136    0x8fc    addi a0,sp,40
    0x84002138    0x8fe    jal ra,ffffffff84011dae <deriveCap>
    0x8400213c    0x902    ld a5,40(sp)
    0x8400213e    0x904    li a2,4
    0x84002140    0x906    beqz a5,ffffffff84001c36 <create_initial_thread+0x3fc>
    0x84002144    0x90a    li s3,0
    0x84002146    0x90c    j ffffffff84002052 <create_initial_thread+0x818>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
803 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 1124 nodes.

Section invokeTCB_ThreadControl (242 of 266)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControl` consists of 130 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `invokeTCB_ThreadControl`:

    0x840145da      0x0    addi sp,sp,-96
    0x840145dc      0x2    sd ra,88(sp)          ; stack access
    0x840145de      0x4    sd s0,80(sp)          ; stack access
    0x840145e0      0x6    sd s1,72(sp)          ; stack access
    0x840145e2      0x8    sd s2,64(sp)          ; stack access
    0x840145e4      0xa    sd s3,56(sp)          ; stack access
    0x840145e6      0xc    sd s4,48(sp)          ; stack access
    0x840145e8      0xe    sd s5,40(sp)          ; stack access
    0x840145ea     0x10    mv s0,a0
    0x840145ec     0x12    mv s2,a1
    0x840145ee     0x14    mv s3,a4
    0x840145f0     0x16    sd a5,0(sp)           ; stack access
    0x840145f2     0x18    sd a6,8(sp)           ; stack access
    0x840145f4     0x1a    mv s4,a7
    0x840145f6     0x1c    ld s1,152(sp)         ; stack access
    0x840145f8     0x1e    slli a5,a0,0x19
    0x840145fc     0x22    srli a5,a5,0x19
    0x840145fe     0x24    li a0,3
    0x84014600     0x26    slli a0,a0,0x3d
    0x84014602     0x28    or a5,a5,a0
    0x84014604     0x2a    sd a5,16(sp)          ; stack access
    0x84014606     0x2c    sd zero,24(sp)        ; stack access
    0x84014608     0x2e    andi a5,s1,4
    0x8401460c     0x32    beqz a5,ffffffff8401470a <invokeTCB_ThreadControl+0x130>
    0x84014610     0x36    sd a2,376(s0)
    0x84014614     0x3a    andi a4,s1,8
    0x84014618     0x3e    bnez a4,ffffffff8401468c <invokeTCB_ThreadControl+0xb2>
    0x8401461a     0x40    andi s5,s0,-1024
    0x8401461e     0x44    li a1,1
    0x84014620     0x46    mv a0,s5
    0x84014622     0x48    jal ra,ffffffff84012f7c <cteDelete>
    0x84014626     0x4c    bnez a0,ffffffff8401471c <invokeTCB_ThreadControl+0x142>
    0x8401462a     0x50    ld a2,0(s4)
    0x8401462e     0x54    ld a3,8(s4)
    0x84014632     0x58    ld a0,0(sp)           ; stack access
    0x84014634     0x5a    ld a1,8(sp)           ; stack access
    0x84014636     0x5c    jal ra,ffffffff84011e28 <sameObjectAs>
    0x8401463a     0x60    beqz a0,ffffffff8401464e <invokeTCB_ThreadControl+0x74>
    0x8401463c     0x62    ld a2,0(s2)
    0x84014640     0x66    ld a3,8(s2)
    0x84014644     0x6a    ld a0,16(sp)          ; stack access
    0x84014646     0x6c    ld a1,24(sp)          ; stack access
    0x84014648     0x6e    jal ra,ffffffff84011e28 <sameObjectAs>
    0x8401464c     0x72    bnez a0,ffffffff84014694 <invokeTCB_ThreadControl+0xba>
    0x8401464e     0x74    addi s5,s5,32
    0x84014652     0x78    li a1,1
    0x84014654     0x7a    mv a0,s5
    0x84014656     0x7c    jal ra,ffffffff84012f7c <cteDelete>
    0x8401465a     0x80    bnez a0,ffffffff8401471c <invokeTCB_ThreadControl+0x142>
    0x8401465c     0x82    ld a5,112(sp)         ; stack access
    0x8401465e     0x84    ld a2,0(a5)
    0x84014660     0x86    ld a3,8(a5)
    0x84014662     0x88    ld a0,96(sp)          ; stack access
    0x84014664     0x8a    ld a1,104(sp)         ; stack access
    0x84014666     0x8c    jal ra,ffffffff84011e28 <sameObjectAs>
    0x8401466a     0x90    beqz a0,ffffffff84014710 <invokeTCB_ThreadControl+0x136>
    0x8401466c     0x92    ld a2,0(s2)
    0x84014670     0x96    ld a3,8(s2)
    0x84014674     0x9a    ld a0,16(sp)          ; stack access
    0x84014676     0x9c    ld a1,24(sp)          ; stack access
    0x84014678     0x9e    jal ra,ffffffff84011e28 <sameObjectAs>
    0x8401467c     0xa2    beqz a0,ffffffff84014710 <invokeTCB_ThreadControl+0x136>
    0x8401467e     0xa4    mv a3,s5
    0x84014680     0xa6    ld a2,112(sp)         ; stack access
    0x84014682     0xa8    ld a0,96(sp)          ; stack access
    0x84014684     0xaa    ld a1,104(sp)         ; stack access
    0x84014686     0xac    jal ra,ffffffff84011286 <cteInsert>
    0x8401468a     0xb0    j ffffffff84014710 <invokeTCB_ThreadControl+0x136>
    0x8401468c     0xb2    sd a3,352(s0)
    0x84014690     0xb6    beqz a5,ffffffff84014710 <invokeTCB_ThreadControl+0x136>
    0x84014692     0xb8    j ffffffff8401461a <invokeTCB_ThreadControl+0x40>
    0x84014694     0xba    mv a3,s5
    0x84014696     0xbc    mv a2,s4
    0x84014698     0xbe    ld a0,0(sp)           ; stack access
    0x8401469a     0xc0    ld a1,8(sp)           ; stack access
    0x8401469c     0xc2    jal ra,ffffffff84011286 <cteInsert>
    0x840146a0     0xc6    j ffffffff8401464e <invokeTCB_ThreadControl+0x74>
    0x840146a2     0xc8    andi s4,s0,-1024
    0x840146a6     0xcc    addi s4,s4,128
    0x840146aa     0xd0    li a1,1
    0x840146ac     0xd2    mv a0,s4
    0x840146ae     0xd4    jal ra,ffffffff84012f7c <cteDelete>
    0x840146b2     0xd8    bnez a0,ffffffff8401471c <invokeTCB_ThreadControl+0x142>
    0x840146b4     0xda    ld a5,120(sp)         ; stack access
    0x840146b6     0xdc    sd a5,384(s0)
    0x840146ba     0xe0    ld a5,144(sp)         ; stack access
    0x840146bc     0xe2    beqz a5,ffffffff840146de <invokeTCB_ThreadControl+0x104>
    0x840146be     0xe4    ld a2,0(a5)
    0x840146c0     0xe6    ld a3,8(a5)
    0x840146c2     0xe8    ld a0,128(sp)         ; stack access
    0x840146c4     0xea    ld a1,136(sp)         ; stack access
    0x840146c6     0xec    jal ra,ffffffff84011e28 <sameObjectAs>
    0x840146ca     0xf0    beqz a0,ffffffff840146de <invokeTCB_ThreadControl+0x104>
    0x840146cc     0xf2    ld a2,0(s2)
    0x840146d0     0xf6    ld a3,8(s2)
    0x840146d4     0xfa    ld a0,16(sp)          ; stack access
    0x840146d6     0xfc    ld a1,24(sp)          ; stack access
    0x840146d8     0xfe    jal ra,ffffffff84011e28 <sameObjectAs>
    0x840146dc    0x102    bnez a0,ffffffff840146f0 <invokeTCB_ThreadControl+0x116>
    0x840146de    0x104    auipc a5,0x1a
    0x840146e2    0x108    ld a5,954(a5) # ffffffff8402ea98 <ksCurThread>
    0x840146e6    0x10c    bne a5,s0,ffffffff84014716 <invokeTCB_ThreadControl+0x13c>
    0x840146ea    0x110    jal ra,ffffffff84012272 <rescheduleRequired>
    0x840146ee    0x114    j ffffffff84014716 <invokeTCB_ThreadControl+0x13c>
    0x840146f0    0x116    mv a3,s4
    0x840146f2    0x118    ld a2,144(sp)         ; stack access
    0x840146f4    0x11a    ld a0,128(sp)         ; stack access
    0x840146f6    0x11c    ld a1,136(sp)         ; stack access
    0x840146f8    0x11e    jal ra,ffffffff84011286 <cteInsert>
    0x840146fc    0x122    j ffffffff840146de <invokeTCB_ThreadControl+0x104>
    0x840146fe    0x124    mv a1,s3
    0x84014700    0x126    mv a0,s0
    0x84014702    0x128    jal ra,ffffffff84012aa0 <setPriority>
    0x84014706    0x12c    li a0,0
    0x84014708    0x12e    j ffffffff8401471c <invokeTCB_ThreadControl+0x142>
    0x8401470a    0x130    andi a4,s1,8
    0x8401470e    0x134    bnez a4,ffffffff8401468c <invokeTCB_ThreadControl+0xb2>
    0x84014710    0x136    andi a5,s1,2
    0x84014714    0x13a    bnez a5,ffffffff840146a2 <invokeTCB_ThreadControl+0xc8>
    0x84014716    0x13c    andi a0,s1,1
    0x8401471a    0x140    bnez a0,ffffffff840146fe <invokeTCB_ThreadControl+0x124>
    0x8401471c    0x142    ld ra,88(sp)          ; stack access
    0x8401471e    0x144    ld s0,80(sp)          ; stack access
    0x84014720    0x146    ld s1,72(sp)          ; stack access
    0x84014722    0x148    ld s2,64(sp)          ; stack access
    0x84014724    0x14a    ld s3,56(sp)          ; stack access
    0x84014726    0x14c    ld s4,48(sp)          ; stack access
    0x84014728    0x14e    ld s5,40(sp)          ; stack access
    0x8401472a    0x150    addi sp,sp,96
    0x8401472c    0x152    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
130 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControl` has 237 nodes.

Section handleRecv (243 of 266)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 125 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `handleRecv`:

    0x8401439c      0x0    addi sp,sp,-64
    0x8401439e      0x2    sd ra,56(sp)          ; stack access
    0x840143a0      0x4    sd s0,48(sp)          ; stack access
    0x840143a2      0x6    sd s1,40(sp)          ; stack access
    0x840143a4      0x8    mv s0,a0
    0x840143a6      0xa    auipc a1,0x1a
    0x840143aa      0xe    ld a1,1778(a1) # ffffffff8402ea98 <ksCurThread>
    0x840143ae     0x12    ld s1,72(a1)
    0x840143b0     0x14    mv a2,s1
    0x840143b2     0x16    addi a0,sp,8
    0x840143b4     0x18    jal ra,ffffffff84011058 <lookupCap>
    0x840143b8     0x1c    ld a5,8(sp)           ; stack access
    0x840143ba     0x1e    bnez a5,ffffffff84014406 <handleRecv+0x6a>
    0x840143bc     0x20    ld a5,16(sp)          ; stack access
    0x840143be     0x22    srli a4,a5,0x3b
    0x840143c2     0x26    li a3,4
    0x840143c4     0x28    beq a4,a3,ffffffff84014426 <handleRecv+0x8a>
    0x840143c8     0x2c    li a3,6
    0x840143ca     0x2e    beq a4,a3,ffffffff8401447a <handleRecv+0xde>
    0x840143ce     0x32    auipc a5,0xa
    0x840143d2     0x36    addi a5,a5,-1950 # ffffffff8401dc30 <current_lookup_fault>
    0x840143d6     0x3a    li a4,1
    0x840143d8     0x3c    sd a4,0(a5)
    0x840143da     0x3e    sd zero,8(a5)
    0x840143de     0x42    auipc a4,0x8
    0x840143e2     0x46    addi a4,a4,1058 # ffffffff8401c800 <current_fault>
    0x840143e6     0x4a    li a5,-1
    0x840143e8     0x4c    slli a5,a5,0x3f
    0x840143ea     0x4e    addi a5,a5,1
    0x840143ec     0x50    sd a5,0(a4)
    0x840143ee     0x52    sd s1,8(a4)
    0x840143f0     0x54    auipc a0,0x1a
    0x840143f4     0x58    ld a0,1704(a0) # ffffffff8402ea98 <ksCurThread>
    0x840143f8     0x5c    jal ra,ffffffff840140f4 <handleFault>
    0x840143fc     0x60    ld ra,56(sp)          ; stack access
    0x840143fe     0x62    ld s0,48(sp)          ; stack access
    0x84014400     0x64    ld s1,40(sp)          ; stack access
    0x84014402     0x66    addi sp,sp,64
    0x84014404     0x68    ret
    0x84014406     0x6a    auipc a4,0x8
    0x8401440a     0x6e    addi a4,a4,1018 # ffffffff8401c800 <current_fault>
    0x8401440e     0x72    li a5,-1
    0x84014410     0x74    slli a5,a5,0x3f
    0x84014412     0x76    addi a5,a5,1
    0x84014414     0x78    sd a5,0(a4)
    0x84014416     0x7a    sd s1,8(a4)
    0x84014418     0x7c    auipc a0,0x1a
    0x8401441c     0x80    ld a0,1664(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014420     0x84    jal ra,ffffffff840140f4 <handleFault>
    0x84014424     0x88    j ffffffff840143fc <handleRecv+0x60>
    0x84014426     0x8a    slli a4,a5,0x7
    0x8401442a     0x8e    bgez a4,ffffffff8401444a <handleRecv+0xae>
    0x8401442e     0x92    auipc s1,0x1a
    0x84014432     0x96    addi s1,s1,1642 # ffffffff8402ea98 <ksCurThread>
    0x84014436     0x9a    ld a0,0(s1)
    0x84014438     0x9c    jal ra,ffffffff84013ac8 <deleteCallerCap>
    0x8401443c     0xa0    mv a3,s0
    0x8401443e     0xa2    ld a1,16(sp)          ; stack access
    0x84014440     0xa4    ld a2,24(sp)          ; stack access
    0x84014442     0xa6    ld a0,0(s1)
    0x84014444     0xa8    jal ra,ffffffff8401420a <receiveIPC>
    0x84014448     0xac    j ffffffff840143fc <handleRecv+0x60>
    0x8401444a     0xae    auipc a5,0x9
    0x8401444e     0xb2    addi a5,a5,2022 # ffffffff8401dc30 <current_lookup_fault>
    0x84014452     0xb6    li a4,1
    0x84014454     0xb8    sd a4,0(a5)
    0x84014456     0xba    sd zero,8(a5)
    0x8401445a     0xbe    auipc a4,0x8
    0x8401445e     0xc2    addi a4,a4,934 # ffffffff8401c800 <current_fault>
    0x84014462     0xc6    li a5,-1
    0x84014464     0xc8    slli a5,a5,0x3f
    0x84014466     0xca    addi a5,a5,1
    0x84014468     0xcc    sd a5,0(a4)
    0x8401446a     0xce    sd s1,8(a4)
    0x8401446c     0xd0    auipc a0,0x1a
    0x84014470     0xd4    ld a0,1580(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014474     0xd8    jal ra,ffffffff840140f4 <handleFault>
    0x84014478     0xdc    j ffffffff840143fc <handleRecv+0x60>
    0x8401447a     0xde    slli a4,a5,0x19
    0x8401447e     0xe2    srli a4,a4,0x19
    0x84014480     0xe4    slli a3,a5,0x19
    0x84014484     0xe8    bgez a3,ffffffff8401448e <handleRecv+0xf2>
    0x84014488     0xec    li a3,-1
    0x8401448a     0xee    slli a3,a3,0x27
    0x8401448c     0xf0    or a4,a4,a3
    0x8401448e     0xf2    ld a3,24(a4)
    0x84014490     0xf4    slli a4,a3,0x19
    0x84014494     0xf8    srli a4,a4,0x19
    0x84014496     0xfa    slli a2,a3,0x19
    0x8401449a     0xfe    bgez a2,ffffffff840144dc <handleRecv+0x140>
    0x8401449e    0x102    slli a3,a5,0x5
    0x840144a2    0x106    li a5,-1
    0x840144a4    0x108    slli a5,a5,0x27
    0x840144a6    0x10a    or a4,a4,a5
    0x840144a8    0x10c    bltz a3,ffffffff840144fa <handleRecv+0x15e>
    0x840144ac    0x110    auipc a5,0x9
    0x840144b0    0x114    addi a5,a5,1924 # ffffffff8401dc30 <current_lookup_fault>
    0x840144b4    0x118    li a4,1
    0x840144b6    0x11a    sd a4,0(a5)
    0x840144b8    0x11c    sd zero,8(a5)
    0x840144bc    0x120    auipc a4,0x8
    0x840144c0    0x124    addi a4,a4,836 # ffffffff8401c800 <current_fault>
    0x840144c4    0x128    li a5,-1
    0x840144c6    0x12a    slli a5,a5,0x3f
    0x840144c8    0x12c    addi a5,a5,1
    0x840144ca    0x12e    sd a5,0(a4)
    0x840144cc    0x130    sd s1,8(a4)
    0x840144ce    0x132    auipc a0,0x1a
    0x840144d2    0x136    ld a0,1482(a0) # ffffffff8402ea98 <ksCurThread>
    0x840144d6    0x13a    jal ra,ffffffff840140f4 <handleFault>
    0x840144da    0x13e    j ffffffff840143fc <handleRecv+0x60>
    0x840144dc    0x140    slli a3,a5,0x5
    0x840144e0    0x144    bgez a3,ffffffff840144ac <handleRecv+0x110>
    0x840144e4    0x148    bnez a4,ffffffff840144fa <handleRecv+0x15e>
    0x840144e6    0x14a    mv a3,s0
    0x840144e8    0x14c    ld a1,16(sp)          ; stack access
    0x840144ea    0x14e    ld a2,24(sp)          ; stack access
    0x840144ec    0x150    auipc a0,0x1a
    0x840144f0    0x154    ld a0,1452(a0) # ffffffff8402ea98 <ksCurThread>
    0x840144f4    0x158    jal ra,ffffffff840124be <receiveSignal>
    0x840144f8    0x15c    j ffffffff840143fc <handleRecv+0x60>
    0x840144fa    0x15e    auipc a5,0x1a
    0x840144fe    0x162    ld a5,1438(a5) # ffffffff8402ea98 <ksCurThread>
    0x84014502    0x166    beq a4,a5,ffffffff840144e6 <handleRecv+0x14a>
    0x84014506    0x16a    j ffffffff840144ac <handleRecv+0x110>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
125 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 191 nodes.

Section doReplyTransfer (244 of 266)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 46 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `doReplyTransfer`:

    0x84013dc6     0x0    addi sp,sp,-32
    0x84013dc8     0x2    sd ra,24(sp)          ; stack access
    0x84013dca     0x4    sd s0,16(sp)          ; stack access
    0x84013dcc     0x6    sd s1,8(sp)           ; stack access
    0x84013dce     0x8    sd s2,0(sp)           ; stack access
    0x84013dd0     0xa    mv s1,a0
    0x84013dd2     0xc    mv s0,a1
    0x84013dd4     0xe    mv s2,a2
    0x84013dd6    0x10    ld a5,312(a1)
    0x84013dda    0x14    andi a5,a5,15
    0x84013ddc    0x16    bnez a5,ffffffff84013e08 <doReplyTransfer+0x42>
    0x84013dde    0x18    mv a4,a1
    0x84013de0    0x1a    li a2,0
    0x84013de2    0x1c    li a1,0
    0x84013de4    0x1e    jal ra,ffffffff84013d60 <doIPCTransfer>
    0x84013de8    0x22    mv a0,s2
    0x84013dea    0x24    jal ra,ffffffff84013656 <cteDeleteOne>
    0x84013dee    0x28    li a1,1
    0x84013df0    0x2a    mv a0,s0
    0x84013df2    0x2c    jal ra,ffffffff840122d8 <setThreadState>
    0x84013df6    0x30    mv a0,s0
    0x84013df8    0x32    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x84013dfc    0x36    ld ra,24(sp)          ; stack access
    0x84013dfe    0x38    ld s0,16(sp)          ; stack access
    0x84013e00    0x3a    ld s1,8(sp)           ; stack access
    0x84013e02    0x3c    ld s2,0(sp)           ; stack access
    0x84013e04    0x3e    addi sp,sp,32
    0x84013e06    0x40    ret
    0x84013e08    0x42    mv a0,a2
    0x84013e0a    0x44    jal ra,ffffffff84013656 <cteDeleteOne>
    0x84013e0e    0x48    mv a1,s1
    0x84013e10    0x4a    mv a0,s0
    0x84013e12    0x4c    jal ra,ffffffff84010450 <handleFaultReply>
    0x84013e16    0x50    sd zero,312(s0)
    0x84013e1a    0x54    sd zero,320(s0)
    0x84013e1e    0x58    beqz a0,ffffffff84013e30 <doReplyTransfer+0x6a>
    0x84013e20    0x5a    li a1,2
    0x84013e22    0x5c    mv a0,s0
    0x84013e24    0x5e    jal ra,ffffffff840122d8 <setThreadState>
    0x84013e28    0x62    mv a0,s0
    0x84013e2a    0x64    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x84013e2e    0x68    j ffffffff84013dfc <doReplyTransfer+0x36>
    0x84013e30    0x6a    li a1,0
    0x84013e32    0x6c    mv a0,s0
    0x84013e34    0x6e    jal ra,ffffffff840122d8 <setThreadState>
    0x84013e38    0x72    j ffffffff84013dfc <doReplyTransfer+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 71 nodes.

Section doNormalTransfer (245 of 266)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 146 instructions.

SLLW.....

Stack analysis
---------------

40 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84013be2      0x0    addi sp,sp,-192
    0x84013be4      0x2    sd ra,184(sp)         ; stack access
    0x84013be6      0x4    sd s0,176(sp)         ; stack access
    0x84013be8      0x6    sd s1,168(sp)         ; stack access
    0x84013bea      0x8    sd s2,160(sp)         ; stack access
    0x84013bec      0xa    sd s3,152(sp)         ; stack access
    0x84013bee      0xc    sd s4,144(sp)         ; stack access
    0x84013bf0      0xe    sd s5,136(sp)         ; stack access
    0x84013bf2     0x10    sd s6,128(sp)         ; stack access
    0x84013bf4     0x12    sd s7,120(sp)         ; stack access
    0x84013bf6     0x14    sd s8,112(sp)         ; stack access
    0x84013bf8     0x16    sd s9,104(sp)         ; stack access
    0x84013bfa     0x18    sd s10,96(sp)         ; stack access
    0x84013bfc     0x1a    sd s11,88(sp)         ; stack access
    0x84013bfe     0x1c    mv s2,a0
    0x84013c00     0x1e    mv s6,a1
    0x84013c02     0x20    mv s5,a2
    0x84013c04     0x22    mv s4,a3
    0x84013c06     0x24    mv s1,a5
    0x84013c08     0x26    mv s3,a6
    0x84013c0a     0x28    ld s0,80(a0)
    0x84013c0c     0x2a    andi a3,s0,127
    0x84013c10     0x2e    li a5,120
    0x84013c14     0x32    bgeu a5,a3,ffffffff84013c20 <doNormalTransfer+0x3e>
    0x84013c18     0x36    andi s0,s0,-128
    0x84013c1c     0x3a    ori s0,s0,120
    0x84013c20     0x3e    bnez a4,ffffffff84013c7e <doNormalTransfer+0x9c>
    0x84013c22     0x40    auipc a5,0xa
    0x84013c26     0x44    sd zero,94(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84013c2a     0x48    andi a4,s0,127
    0x84013c2e     0x4c    mv a3,s3
    0x84013c30     0x4e    mv a2,s1
    0x84013c32     0x50    mv a1,s6
    0x84013c34     0x52    mv a0,s2
    0x84013c36     0x54    jal ra,ffffffff84013b72 <copyMRs>
    0x84013c3a     0x58    mv s2,a0
    0x84013c3c     0x5a    lui a5,0xfffff
    0x84013c3e     0x5c    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfd007f>
    0x84013c42     0x60    and s0,s0,a5
    0x84013c44     0x62    auipc a5,0xa
    0x84013c48     0x66    ld a5,60(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84013c4c     0x6a    bnez a5,ffffffff84013c94 <doNormalTransfer+0xb2>
    0x84013c4e     0x6c    andi s0,s0,-128
    0x84013c52     0x70    andi s2,s2,127
    0x84013c56     0x74    or s0,s0,s2
    0x84013c5a     0x78    sd s0,80(s1)
    0x84013c5c     0x7a    sd s4,72(s1)
    0x84013c60     0x7e    ld ra,184(sp)         ; stack access
    0x84013c62     0x80    ld s0,176(sp)         ; stack access
    0x84013c64     0x82    ld s1,168(sp)         ; stack access
    0x84013c66     0x84    ld s2,160(sp)         ; stack access
    0x84013c68     0x86    ld s3,152(sp)         ; stack access
    0x84013c6a     0x88    ld s4,144(sp)         ; stack access
    0x84013c6c     0x8a    ld s5,136(sp)         ; stack access
    0x84013c6e     0x8c    ld s6,128(sp)         ; stack access
    0x84013c70     0x8e    ld s7,120(sp)         ; stack access
    0x84013c72     0x90    ld s8,112(sp)         ; stack access
    0x84013c74     0x92    ld s9,104(sp)         ; stack access
    0x84013c76     0x94    ld s10,96(sp)         ; stack access
    0x84013c78     0x96    ld s11,88(sp)         ; stack access
    0x84013c7a     0x98    addi sp,sp,192
    0x84013c7c     0x9a    ret
    0x84013c7e     0x9c    mv a2,s0
    0x84013c80     0x9e    mv a1,s6
    0x84013c82     0xa0    mv a0,s2
    0x84013c84     0xa2    jal ra,ffffffff84013ade <lookupExtraCaps>
    0x84013c88     0xa6    beqz a0,ffffffff84013c2a <doNormalTransfer+0x48>
    0x84013c8a     0xa8    auipc a5,0xa
    0x84013c8e     0xac    sd zero,-10(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84013c92     0xb0    j ffffffff84013c2a <doNormalTransfer+0x48>
    0x84013c94     0xb2    beqz s3,ffffffff84013c4e <doNormalTransfer+0x6c>
    0x84013c98     0xb6    mv a1,s3
    0x84013c9a     0xb8    mv a0,s1
    0x84013c9c     0xba    jal ra,ffffffff840115fc <getReceiveSlots>
    0x84013ca0     0xbe    mv s8,a0
    0x84013ca2     0xc0    auipc s9,0xa
    0x84013ca6     0xc4    addi s9,s9,-34 # ffffffff8401dc80 <current_extra_caps>
    0x84013caa     0xc8    li s7,0
    0x84013cac     0xca    li s10,-1
    0x84013cae     0xcc    srli s11,s10,0x19
    0x84013cb2     0xd0    li a5,1
    0x84013cb4     0xd2    slli a5,a5,0x26
    0x84013cb6     0xd4    sd a5,8(sp)           ; stack access
    0x84013cb8     0xd6    lui a5,0x1
    0x84013cba     0xd8    addi a5,a5,-512 # e00 <KERNEL_OFFSET-0xfffffffefffff200>
    0x84013cbe     0xdc    sd a5,16(sp)          ; stack access
    0x84013cc0     0xde    lui a5,0xfffff
    0x84013cc2     0xe0    addi a5,a5,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84013cc6     0xe4    sd a5,24(sp)          ; stack access
    0x84013cc8     0xe6    j ffffffff84013cfc <doNormalTransfer+0x11a>
    0x84013cca     0xe8    beqz s8,ffffffff84013d54 <doNormalTransfer+0x172>
    0x84013cce     0xec    sd a2,40(sp)          ; stack access
    0x84013cd0     0xee    sd a3,48(sp)          ; stack access
    0x84013cd2     0xf0    mv a1,s6
    0x84013cd4     0xf2    addi a0,sp,56
    0x84013cd6     0xf4    jal ra,ffffffff84011dae <deriveCap>
    0x84013cda     0xf8    ld a5,56(sp)          ; stack access
    0x84013cdc     0xfa    bnez a5,ffffffff84013d54 <doNormalTransfer+0x172>
    0x84013cde     0xfc    ld a5,64(sp)          ; stack access
    0x84013ce0     0xfe    srli a5,a5,0x3b
    0x84013ce2    0x100    beqz a5,ffffffff84013d54 <doNormalTransfer+0x172>
    0x84013ce4    0x102    mv a3,s8
    0x84013ce6    0x104    mv a2,s6
    0x84013ce8    0x106    ld a0,64(sp)          ; stack access
    0x84013cea    0x108    ld a1,72(sp)          ; stack access
    0x84013cec    0x10a    jal ra,ffffffff84011286 <cteInsert>
    0x84013cf0    0x10e    li s8,0
    0x84013cf2    0x110    addi s7,s7,1
    0x84013cf4    0x112    addi s9,s9,8
    0x84013cf6    0x114    li a5,3
    0x84013cf8    0x116    beq s7,a5,ffffffff84013d54 <doNormalTransfer+0x172>
    0x84013cfc    0x11a    ld s6,0(s9)
    0x84013d00    0x11e    beqz s6,ffffffff84013d54 <doNormalTransfer+0x172>
    0x84013d04    0x122    ld a2,0(s6)
    0x84013d08    0x126    sd a2,40(sp)          ; stack access
    0x84013d0a    0x128    ld a3,8(s6)
    0x84013d0e    0x12c    sd a3,48(sp)          ; stack access
    0x84013d10    0x12e    srli a4,a2,0x3b
    0x84013d14    0x132    li a5,4
    0x84013d16    0x134    bne a4,a5,ffffffff84013cca <doNormalTransfer+0xe8>
    0x84013d1a    0x138    and a5,a2,s11
    0x84013d1e    0x13c    ld a4,8(sp)           ; stack access
    0x84013d20    0x13e    and a4,a4,a2
    0x84013d22    0x140    beqz a4,ffffffff84013d2a <doNormalTransfer+0x148>
    0x84013d24    0x142    slli a4,s10,0x27
    0x84013d28    0x146    or a5,a5,a4
    0x84013d2a    0x148    bne s5,a5,ffffffff84013cca <doNormalTransfer+0xe8>
    0x84013d2e    0x14c    slli a5,s7,0x3
    0x84013d32    0x150    add a5,a5,s3
    0x84013d34    0x152    sd a3,976(a5)
    0x84013d38    0x156    srli a5,s0,0x9
    0x84013d3c    0x15a    andi a5,a5,7
    0x84013d3e    0x15c    li a4,1
    0x84013d40    0x15e    sllw a4,a4,s7
    0x84013d44    0x162    or a5,a5,a4
    0x84013d46    0x164    slli a5,a5,0x9
    0x84013d48    0x166    ld a4,16(sp)          ; stack access
    0x84013d4a    0x168    and a5,a5,a4
    0x84013d4c    0x16a    ld a4,24(sp)          ; stack access
    0x84013d4e    0x16c    and s0,s0,a4
    0x84013d50    0x16e    or s0,s0,a5
    0x84013d52    0x170    j ffffffff84013cf2 <doNormalTransfer+0x110>
    0x84013d54    0x172    slli a5,s7,0x7
    0x84013d58    0x176    andi a5,a5,384
    0x84013d5c    0x17a    or s0,s0,a5
    0x84013d5e    0x17c    j ffffffff84013c4e <doNormalTransfer+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
146 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 228 nodes.

Section restart (246 of 266)
============================

Deriving specifications
-----------------------

Section `restart` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `restart`:

    0x840137c4     0x0    addi sp,sp,-16
    0x840137c6     0x2    sd ra,8(sp)           ; stack access
    0x840137c8     0x4    sd s0,0(sp)           ; stack access
    0x840137ca     0x6    mv s0,a0
    0x840137cc     0x8    ld a5,280(a0)
    0x840137d0     0xc    andi a5,a5,15
    0x840137d2     0xe    beqz a5,ffffffff840137dc <restart+0x18>
    0x840137d4    0x10    addi a5,a5,-3
    0x840137d6    0x12    li a4,3
    0x840137d8    0x14    bltu a4,a5,ffffffff840137fc <restart+0x38>
    0x840137dc    0x18    mv a0,s0
    0x840137de    0x1a    jal ra,ffffffff84012caa <cancelIPC>
    0x840137e2    0x1e    mv a0,s0
    0x840137e4    0x20    jal ra,ffffffff840115c8 <setupReplyMaster>
    0x840137e8    0x24    li a1,2
    0x840137ea    0x26    mv a0,s0
    0x840137ec    0x28    jal ra,ffffffff840122d8 <setThreadState>
    0x840137f0    0x2c    mv a0,s0
    0x840137f2    0x2e    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x840137f6    0x32    mv a0,s0
    0x840137f8    0x34    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x840137fc    0x38    ld ra,8(sp)           ; stack access
    0x840137fe    0x3a    ld s0,0(sp)           ; stack access
    0x84013800    0x3c    addi sp,sp,16
    0x84013802    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 40 nodes.

Section cancelBadgedSends (247 of 266)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 85 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x84012b36     0x0    addi sp,sp,-80
    0x84012b38     0x2    sd ra,72(sp)          ; stack access
    0x84012b3a     0x4    sd s0,64(sp)          ; stack access
    0x84012b3c     0x6    sd s1,56(sp)          ; stack access
    0x84012b3e     0x8    sd s2,48(sp)          ; stack access
    0x84012b40     0xa    sd s3,40(sp)          ; stack access
    0x84012b42     0xc    sd s4,32(sp)          ; stack access
    0x84012b44     0xe    sd s5,24(sp)          ; stack access
    0x84012b46    0x10    ld a5,0(a0)
    0x84012b48    0x12    andi a3,a5,3
    0x84012b4c    0x16    li a4,1
    0x84012b4e    0x18    beq a3,a4,ffffffff84012b5a <cancelBadgedSends+0x24>
    0x84012b52    0x1c    andi a5,a5,1
    0x84012b54    0x1e    beqz a5,ffffffff84012bfa <cancelBadgedSends+0xc4>
    0x84012b56    0x20    jal ra,ffffffff84010224 <halt>
    0x84012b5a    0x24    mv s3,a0
    0x84012b5c    0x26    mv s2,a1
    0x84012b5e    0x28    ld s1,8(a0)
    0x84012b60    0x2a    mv s0,s1
    0x84012b62    0x2c    lui a4,0xf8000
    0x84012b66    0x30    srli a4,a4,0x19
    0x84012b68    0x32    and a4,a4,a5
    0x84012b6a    0x34    slli a3,a5,0x19
    0x84012b6e    0x38    bgez a3,ffffffff84012b78 <cancelBadgedSends+0x42>
    0x84012b72    0x3c    li a3,-1
    0x84012b74    0x3e    slli a3,a3,0x27
    0x84012b76    0x40    or a4,a4,a3
    0x84012b78    0x42    mv s5,a4
    0x84012b7a    0x44    sd zero,8(s3) # 2008 <KERNEL_OFFSET-0xfffffffeffffdff8>
    0x84012b7e    0x48    srli a5,a5,0x27
    0x84012b80    0x4a    slli a5,a5,0x27
    0x84012b82    0x4c    sd a5,0(s3)
    0x84012b86    0x50    bnez s1,ffffffff84012bbe <cancelBadgedSends+0x88>
    0x84012b88    0x52    sd zero,8(s3)
    0x84012b8c    0x56    lui a3,0xf8000
    0x84012b90    0x5a    srli a3,a3,0x19
    0x84012b92    0x5c    and a4,a4,a3
    0x84012b94    0x5e    or a5,a5,a4
    0x84012b96    0x60    sd a5,0(s3)
    0x84012b9a    0x64    j ffffffff84012bf6 <cancelBadgedSends+0xc0>
    0x84012b9c    0x66    li a1,2
    0x84012b9e    0x68    mv a0,s4
    0x84012ba0    0x6a    jal ra,ffffffff840122d8 <setThreadState>
    0x84012ba4    0x6e    mv a0,s4
    0x84012ba6    0x70    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x84012baa    0x74    mv a1,s1
    0x84012bac    0x76    mv a2,s5
    0x84012bae    0x78    mv a0,s4
    0x84012bb0    0x7a    jal ra,ffffffff84012b00 <tcbEPDequeue>
    0x84012bb4    0x7e    mv s1,a0
    0x84012bb6    0x80    sd a0,0(sp)           ; stack access
    0x84012bb8    0x82    sd a1,8(sp)           ; stack access
    0x84012bba    0x84    mv s5,a1
    0x84012bbc    0x86    beqz s0,ffffffff84012bce <cancelBadgedSends+0x98>
    0x84012bbe    0x88    ld a5,296(s0)
    0x84012bc2    0x8c    mv s4,s0
    0x84012bc4    0x8e    ld s0,408(s0)
    0x84012bc8    0x92    bne s2,a5,ffffffff84012bbc <cancelBadgedSends+0x86>
    0x84012bcc    0x96    j ffffffff84012b9c <cancelBadgedSends+0x66>
    0x84012bce    0x98    sd s1,8(s3)
    0x84012bd2    0x9c    ld a1,0(s3)
    0x84012bd6    0xa0    li a5,-1
    0x84012bd8    0xa2    slli a5,a5,0x27
    0x84012bda    0xa4    addi a5,a5,3
    0x84012bdc    0xa6    and a5,a5,a1
    0x84012bde    0xa8    lui a1,0xf8000
    0x84012be2    0xac    srli a1,a1,0x19
    0x84012be4    0xae    and a1,s5,a1
    0x84012be8    0xb2    or a1,a1,a5
    0x84012bea    0xb4    beqz s1,ffffffff84012c0c <cancelBadgedSends+0xd6>
    0x84012bec    0xb6    andi a1,a1,-4
    0x84012bee    0xb8    ori a1,a1,1
    0x84012bf2    0xbc    sd a1,0(s3)
    0x84012bf6    0xc0    jal ra,ffffffff84012272 <rescheduleRequired>
    0x84012bfa    0xc4    ld ra,72(sp)          ; stack access
    0x84012bfc    0xc6    ld s0,64(sp)          ; stack access
    0x84012bfe    0xc8    ld s1,56(sp)          ; stack access
    0x84012c00    0xca    ld s2,48(sp)          ; stack access
    0x84012c02    0xcc    ld s3,40(sp)          ; stack access
    0x84012c04    0xce    ld s4,32(sp)          ; stack access
    0x84012c06    0xd0    ld s5,24(sp)          ; stack access
    0x84012c08    0xd2    addi sp,sp,80
    0x84012c0a    0xd4    ret
    0x84012c0c    0xd6    sd a1,0(s3)
    0x84012c10    0xda    j ffffffff84012bf6 <cancelBadgedSends+0xc0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
85 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 133 nodes.

Section schedule (248 of 266)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 95 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedule`:

    0x84012932      0x0    auipc a5,0xb
    0x84012936      0x4    ld a5,782(a5) # ffffffff8401dc40 <ksSchedulerAction>
    0x8401293a      0x8    beqz a5,ffffffff84012a50 <schedule+0x11e>
    0x8401293e      0xc    addi sp,sp,-48
    0x84012940      0xe    sd ra,40(sp)          ; stack access
    0x84012942     0x10    sd s0,32(sp)          ; stack access
    0x84012944     0x12    sd s1,24(sp)          ; stack access
    0x84012946     0x14    sd s2,16(sp)          ; stack access
    0x84012948     0x16    sd s3,8(sp)           ; stack access
    0x8401294a     0x18    sd s4,0(sp)           ; stack access
    0x8401294c     0x1a    auipc a0,0x1c
    0x84012950     0x1e    ld a0,332(a0) # ffffffff8402ea98 <ksCurThread>
    0x84012954     0x22    ld a5,280(a0)
    0x84012958     0x26    andi a5,a5,15
    0x8401295a     0x28    addi a5,a5,-1
    0x8401295c     0x2a    li a4,1
    0x8401295e     0x2c    li s3,0
    0x84012960     0x2e    bgeu a4,a5,ffffffff840129fe <schedule+0xcc>
    0x84012964     0x32    auipc s0,0xb
    0x84012968     0x36    ld s0,732(s0) # ffffffff8401dc40 <ksSchedulerAction>
    0x8401296c     0x3a    li a5,1
    0x8401296e     0x3c    beq s0,a5,ffffffff84012a06 <schedule+0xd4>
    0x84012972     0x40    auipc s4,0x1c
    0x84012976     0x44    ld s4,294(s4) # ffffffff8402ea98 <ksCurThread>
    0x8401297a     0x48    auipc a5,0xb
    0x8401297e     0x4c    ld a5,686(a5) # ffffffff8401dc28 <ksIdleThread>
    0x84012982     0x50    beq s4,a5,ffffffff84012992 <schedule+0x60>
    0x84012986     0x54    ld a4,360(s0)
    0x8401298a     0x58    ld a5,360(s4)
    0x8401298e     0x5c    bgeu a4,a5,ffffffff84012a0c <schedule+0xda>
    0x84012992     0x60    auipc s1,0x1c
    0x84012996     0x64    ld s1,-402(s1) # ffffffff8402e800 <ksCurDomain>
    0x8401299a     0x68    slli a4,s1,0x3
    0x8401299e     0x6c    auipc a5,0x1c
    0x840129a2     0x70    addi a5,a5,122 # ffffffff8402ea18 <ksReadyQueuesL1Bitmap>
    0x840129a6     0x74    add a5,a5,a4
    0x840129a8     0x76    ld a0,0(a5)
    0x840129aa     0x78    beqz a0,ffffffff84012a0c <schedule+0xda>
    0x840129ac     0x7a    jal ra,ffffffff84017074 <__clzdi2>
    0x840129b0     0x7e    sext.w s2,a0
    0x840129b4     0x82    slli s1,s1,0x2
    0x840129b6     0x84    addi a5,s2,-60
    0x840129ba     0x88    add s1,s1,a5
    0x840129bc     0x8a    slli s1,s1,0x3
    0x840129be     0x8c    auipc a5,0x1c
    0x840129c2     0x90    addi a5,a5,-430 # ffffffff8402e810 <ksReadyQueuesL2Bitmap>
    0x840129c6     0x94    add s1,s1,a5
    0x840129c8     0x96    ld a0,0(s1)
    0x840129ca     0x98    jal ra,ffffffff84017074 <__clzdi2>
    0x840129ce     0x9c    sext.w a0,a0
    0x840129d0     0x9e    li a5,63
    0x840129d4     0xa2    sub s2,a5,s2
    0x840129d8     0xa6    slli s2,s2,0x6
    0x840129da     0xa8    sub a5,a5,a0
    0x840129dc     0xaa    or s2,s2,a5
    0x840129e0     0xae    ld a5,360(s0)
    0x840129e4     0xb2    bgeu a5,s2,ffffffff84012a0c <schedule+0xda>
    0x840129e8     0xb6    mv a0,s0
    0x840129ea     0xb8    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x840129ee     0xbc    li a5,1
    0x840129f0     0xbe    auipc a4,0xb
    0x840129f4     0xc2    sd a5,592(a4) # ffffffff8401dc40 <ksSchedulerAction>
    0x840129f8     0xc6    jal ra,ffffffff840128c4 <scheduleChooseNewThread>
    0x840129fc     0xca    j ffffffff84012a22 <schedule+0xf0>
    0x840129fe     0xcc    jal ra,ffffffff840121e4 <tcbSchedEnqueue>
    0x84012a02     0xd0    li s3,1
    0x84012a04     0xd2    j ffffffff84012964 <schedule+0x32>
    0x84012a06     0xd4    jal ra,ffffffff840128c4 <scheduleChooseNewThread>
    0x84012a0a     0xd8    j ffffffff84012a22 <schedule+0xf0>
    0x84012a0c     0xda    beqz s3,ffffffff84012a1c <schedule+0xea>
    0x84012a10     0xde    ld a4,360(s0)
    0x84012a14     0xe2    ld a5,360(s4)
    0x84012a18     0xe6    beq a4,a5,ffffffff84012a3a <schedule+0x108>
    0x84012a1c     0xea    mv a0,s0
    0x84012a1e     0xec    jal ra,ffffffff84012826 <switchToThread>
    0x84012a22     0xf0    auipc a5,0xb
    0x84012a26     0xf4    sd zero,542(a5) # ffffffff8401dc40 <ksSchedulerAction>
    0x84012a2a     0xf8    ld ra,40(sp)          ; stack access
    0x84012a2c     0xfa    ld s0,32(sp)          ; stack access
    0x84012a2e     0xfc    ld s1,24(sp)          ; stack access
    0x84012a30     0xfe    ld s2,16(sp)          ; stack access
    0x84012a32    0x100    ld s3,8(sp)           ; stack access
    0x84012a34    0x102    ld s4,0(sp)           ; stack access
    0x84012a36    0x104    addi sp,sp,48
    0x84012a38    0x106    ret
    0x84012a3a    0x108    mv a0,s0
    0x84012a3c    0x10a    jal ra,ffffffff84012690 <tcbSchedAppend>
    0x84012a40    0x10e    li a5,1
    0x84012a42    0x110    auipc a4,0xb
    0x84012a46    0x114    sd a5,510(a4) # ffffffff8401dc40 <ksSchedulerAction>
    0x84012a4a    0x118    jal ra,ffffffff840128c4 <scheduleChooseNewThread>
    0x84012a4e    0x11c    j ffffffff84012a22 <schedule+0xf0>
    0x84012a50    0x11e    auipc a5,0xb
    0x84012a54    0x122    sd zero,496(a5) # ffffffff8401dc40 <ksSchedulerAction>
    0x84012a58    0x126    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
95 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 154 nodes.

Section Arch_decodeIRQControlInvocation (249 of 266)
====================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 73 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `Arch_decodeIRQControlInvocation`:

    0x840122f4     0x0    li a5,37
    0x840122f8     0x4    bne a0,a5,ffffffff840123aa <Arch_decodeIRQControlInvocation+0xb6>
    0x840122fc     0x8    addi sp,sp,-80
    0x840122fe     0xa    sd ra,72(sp)          ; stack access
    0x84012300     0xc    sd s0,64(sp)          ; stack access
    0x84012302     0xe    sd s1,56(sp)          ; stack access
    0x84012304    0x10    sd s2,48(sp)          ; stack access
    0x84012306    0x12    sd s3,40(sp)          ; stack access
    0x84012308    0x14    mv s0,a2
    0x8401230a    0x16    li a5,3
    0x8401230c    0x18    bgeu a5,a1,ffffffff8401235c <Arch_decodeIRQControlInvocation+0x68>
    0x84012310    0x1c    auipc a5,0xc
    0x84012314    0x20    ld a5,-1680(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84012318    0x24    beqz a5,ffffffff8401235c <Arch_decodeIRQControlInvocation+0x68>
    0x8401231a    0x26    auipc a4,0x1c
    0x8401231e    0x2a    ld a4,1918(a4) # ffffffff8402ea98 <ksCurThread>
    0x84012322    0x2e    ld s1,88(a4)
    0x84012324    0x30    ld s2,104(a4)
    0x84012328    0x34    ld s3,112(a4)
    0x8401232c    0x38    ld a4,0(a5)
    0x8401232e    0x3a    sd a4,0(sp)           ; stack access
    0x84012330    0x3c    ld a5,8(a5)
    0x84012332    0x3e    sd a5,8(sp)           ; stack access
    0x84012334    0x40    mv a0,s1
    0x84012336    0x42    jal ra,ffffffff84010a36 <Arch_checkIRQ>
    0x8401233a    0x46    bnez a0,ffffffff84012368 <Arch_decodeIRQControlInvocation+0x74>
    0x8401233c    0x48    slli a4,s1,0x3
    0x84012340    0x4c    auipc a5,0xc
    0x84012344    0x50    addi a5,a5,-1704 # ffffffff8401dc98 <intStateIRQTable>
    0x84012348    0x54    add a5,a5,a4
    0x8401234a    0x56    ld a5,0(a5)
    0x8401234c    0x58    beqz a5,ffffffff84012376 <Arch_decodeIRQControlInvocation+0x82>
    0x8401234e    0x5a    li a5,9
    0x84012350    0x5c    auipc a4,0xc
    0x84012354    0x60    sd a5,-1752(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84012358    0x64    li a0,3
    0x8401235a    0x66    j ffffffff84012368 <Arch_decodeIRQControlInvocation+0x74>
    0x8401235c    0x68    li a5,7
    0x8401235e    0x6a    auipc a4,0xc
    0x84012362    0x6e    sd a5,-1766(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84012366    0x72    li a0,3
    0x84012368    0x74    ld ra,72(sp)          ; stack access
    0x8401236a    0x76    ld s0,64(sp)          ; stack access
    0x8401236c    0x78    ld s1,56(sp)          ; stack access
    0x8401236e    0x7a    ld s2,48(sp)          ; stack access
    0x84012370    0x7c    ld s3,40(sp)          ; stack access
    0x84012372    0x7e    addi sp,sp,80
    0x84012374    0x80    ret
    0x84012376    0x82    mv a3,s3
    0x84012378    0x84    mv a2,s2
    0x8401237a    0x86    ld a0,0(sp)           ; stack access
    0x8401237c    0x88    ld a1,8(sp)           ; stack access
    0x8401237e    0x8a    jal ra,ffffffff840111b6 <lookupTargetSlot>
    0x84012382    0x8e    sd a1,24(sp)          ; stack access
    0x84012384    0x90    bnez a0,ffffffff84012368 <Arch_decodeIRQControlInvocation+0x74>
    0x84012386    0x92    mv s2,a1
    0x84012388    0x94    mv a0,a1
    0x8401238a    0x96    jal ra,ffffffff840115e6 <ensureEmptySlot>
    0x8401238e    0x9a    bnez a0,ffffffff84012368 <Arch_decodeIRQControlInvocation+0x74>
    0x84012390    0x9c    li a1,2
    0x84012392    0x9e    auipc a0,0x1c
    0x84012396    0xa2    ld a0,1798(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401239a    0xa6    jal ra,ffffffff840122d8 <setThreadState>
    0x8401239e    0xaa    mv a2,s0
    0x840123a0    0xac    mv a1,s2
    0x840123a2    0xae    mv a0,s1
    0x840123a4    0xb0    jal ra,ffffffff840116fc <invokeIRQControl>
    0x840123a8    0xb4    j ffffffff84012368 <Arch_decodeIRQControlInvocation+0x74>
    0x840123aa    0xb6    li a5,3
    0x840123ac    0xb8    auipc a4,0xc
    0x840123b0    0xbc    sd a5,-1844(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840123b4    0xc0    li a0,3
    0x840123b6    0xc2    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 121 nodes.

Section Arch_finaliseCap (250 of 266)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 98 instructions.


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84010b16      0x0    addi sp,sp,-80
    0x84010b18      0x2    sd ra,72(sp)          ; stack access
    0x84010b1a      0x4    sd s0,64(sp)          ; stack access
    0x84010b1c      0x6    sd s1,56(sp)          ; stack access
    0x84010b1e      0x8    sd s2,48(sp)          ; stack access
    0x84010b20      0xa    sd s3,40(sp)          ; stack access
    0x84010b22      0xc    mv s0,a0
    0x84010b24      0xe    mv s2,a2
    0x84010b26     0x10    mv s1,a1
    0x84010b28     0x12    srli a5,a1,0x3b
    0x84010b2c     0x16    li a4,3
    0x84010b2e     0x18    beq a5,a4,ffffffff84010b9c <Arch_finaliseCap+0x86>
    0x84010b32     0x1c    li a4,13
    0x84010b34     0x1e    beq a5,a4,ffffffff84010bfc <Arch_finaliseCap+0xe6>
    0x84010b38     0x22    li a4,1
    0x84010b3a     0x24    beq a5,a4,ffffffff84010b5e <Arch_finaliseCap+0x48>
    0x84010b3e     0x28    sd zero,0(s0)         ; stack access
    0x84010b42     0x2c    sd zero,8(s0)         ; stack access
    0x84010b46     0x30    sd zero,16(s0)        ; stack access
    0x84010b4a     0x34    sd zero,24(s0)        ; stack access
    0x84010b4e     0x38    mv a0,s0
    0x84010b50     0x3a    ld ra,72(sp)          ; stack access
    0x84010b52     0x3c    ld s0,64(sp)          ; stack access
    0x84010b54     0x3e    ld s1,56(sp)          ; stack access
    0x84010b56     0x40    ld s2,48(sp)          ; stack access
    0x84010b58     0x42    ld s3,40(sp)          ; stack access
    0x84010b5a     0x44    addi sp,sp,80
    0x84010b5c     0x46    ret
    0x84010b5e     0x48    srli a1,a2,0x30
    0x84010b62     0x4c    beqz a1,ffffffff84010b3e <Arch_finaliseCap+0x28>
    0x84010b64     0x4e    srli a0,s1,0x39
    0x84010b68     0x52    andi a0,a0,3
    0x84010b6a     0x54    slli a2,s1,0x19
    0x84010b6e     0x58    srli a2,a2,0x19
    0x84010b70     0x5a    slli a5,s1,0x19
    0x84010b74     0x5e    bgez a5,ffffffff84010b7e <Arch_finaliseCap+0x68>
    0x84010b78     0x62    li a5,-1
    0x84010b7a     0x64    slli a5,a5,0x27
    0x84010b7c     0x66    or a2,a2,a5
    0x84010b7e     0x68    srli s2,s2,0x9
    0x84010b82     0x6c    slli a3,s2,0x19
    0x84010b86     0x70    srli a3,a3,0x19
    0x84010b88     0x72    slli a5,s2,0x19
    0x84010b8c     0x76    bgez a5,ffffffff84010b96 <Arch_finaliseCap+0x80>
    0x84010b90     0x7a    li a5,-1
    0x84010b92     0x7c    slli a5,a5,0x27
    0x84010b94     0x7e    or a3,a3,a5
    0x84010b96     0x80    jal ra,ffffffff84010712 <unmapPage>
    0x84010b9a     0x84    j ffffffff84010b3e <Arch_finaliseCap+0x28>
    0x84010b9c     0x86    beqz a3,ffffffff84010b3e <Arch_finaliseCap+0x28>
    0x84010b9e     0x88    slli a5,a1,0x18
    0x84010ba2     0x8c    bgez a5,ffffffff84010b3e <Arch_finaliseCap+0x28>
    0x84010ba6     0x90    srli s3,a2,0x30
    0x84010baa     0x94    mv a0,s3
    0x84010bac     0x96    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010bb0     0x9a    sd a0,16(sp)          ; stack access
    0x84010bb2     0x9c    sd a1,24(sp)          ; stack access
    0x84010bb4     0x9e    srli s2,s2,0x9
    0x84010bb8     0xa2    slli a2,s2,0x19
    0x84010bbc     0xa6    srli a2,a2,0x19
    0x84010bbe     0xa8    slli a5,s2,0x19
    0x84010bc2     0xac    bgez a5,ffffffff84010bcc <Arch_finaliseCap+0xb6>
    0x84010bc6     0xb0    li a5,-1
    0x84010bc8     0xb2    slli a5,a5,0x27
    0x84010bca     0xb4    or a2,a2,a5
    0x84010bcc     0xb6    ld a5,16(sp)          ; stack access
    0x84010bce     0xb8    bnez a5,ffffffff84010bd6 <Arch_finaliseCap+0xc0>
    0x84010bd0     0xba    ld a5,24(sp)          ; stack access
    0x84010bd2     0xbc    beq a5,a2,ffffffff84010bf2 <Arch_finaliseCap+0xdc>
    0x84010bd6     0xc0    slli a1,s1,0x19
    0x84010bda     0xc4    srli a1,a1,0x19
    0x84010bdc     0xc6    slli a5,s1,0x19
    0x84010be0     0xca    bgez a5,ffffffff84010bea <Arch_finaliseCap+0xd4>
    0x84010be4     0xce    li a5,-1
    0x84010be6     0xd0    slli a5,a5,0x27
    0x84010be8     0xd2    or a1,a1,a5
    0x84010bea     0xd4    mv a0,s3
    0x84010bec     0xd6    jal ra,ffffffff84010668 <unmapPageTable>
    0x84010bf0     0xda    j ffffffff84010b3e <Arch_finaliseCap+0x28>
    0x84010bf2     0xdc    mv a1,a2
    0x84010bf4     0xde    mv a0,s3
    0x84010bf6     0xe0    jal ra,ffffffff840108c6 <deleteASID>
    0x84010bfa     0xe4    j ffffffff84010b3e <Arch_finaliseCap+0x28>
    0x84010bfc     0xe6    beqz a3,ffffffff84010b3e <Arch_finaliseCap+0x28>
    0x84010bfe     0xe8    srli a0,a1,0x2b
    0x84010c02     0xec    slli a0,a0,0x30
    0x84010c04     0xee    srli a0,a0,0x30
    0x84010c06     0xf0    slli s1,a1,0x2
    0x84010c0a     0xf4    lui a1,0xf8000
    0x84010c0e     0xf8    srli a1,a1,0x19
    0x84010c10     0xfa    and a1,a1,s1
    0x84010c12     0xfc    slli a5,s1,0x19
    0x84010c16    0x100    bgez a5,ffffffff84010c20 <Arch_finaliseCap+0x10a>
    0x84010c1a    0x104    li a5,-1
    0x84010c1c    0x106    slli a5,a5,0x27
    0x84010c1e    0x108    or a1,a1,a5
    0x84010c20    0x10a    jal ra,ffffffff84010888 <deleteASIDPool>
    0x84010c24    0x10e    j ffffffff84010b3e <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
98 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 150 nodes.

Section init_freemem (251 of 266)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 300 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `init_freemem`:

    0x840024ee      0x0    addi sp,sp,-192
    0x840024f0      0x2    sd ra,184(sp)         ; stack access
    0x840024f2      0x4    sd s0,176(sp)         ; stack access
    0x840024f4      0x6    sd s1,168(sp)         ; stack access
    0x840024f6      0x8    sd s2,160(sp)         ; stack access
    0x840024f8      0xa    sd s3,152(sp)         ; stack access
    0x840024fa      0xc    sd s4,144(sp)         ; stack access
    0x840024fc      0xe    sd s5,136(sp)         ; stack access
    0x840024fe     0x10    sd s6,128(sp)         ; stack access
    0x84002500     0x12    sd s7,120(sp)         ; stack access
    0x84002502     0x14    sd s8,112(sp)         ; stack access
    0x84002504     0x16    sd s9,104(sp)         ; stack access
    0x84002506     0x18    mv s3,a0
    0x84002508     0x1a    mv s4,a2
    0x8400250a     0x1c    mv s5,a3
    0x8400250c     0x1e    sd a4,0(sp)           ; stack access
    0x8400250e     0x20    sd a5,8(sp)           ; stack access
    0x84002510     0x22    mv s2,a6
    0x84002512     0x24    li a5,1
    0x84002514     0x26    bgeu a5,a2,ffffffff84002524 <init_freemem+0x36>
    0x84002518     0x2a    addi a4,a2,-1 # fffffffff7ffffff <ki_end+0x73fd0fff>
    0x8400251c     0x2e    li a5,0
    0x8400251e     0x30    addi a5,a5,1
    0x84002520     0x32    bne a5,a4,ffffffff8400251e <init_freemem+0x30>
    0x84002524     0x36    addi a4,s3,-1
    0x84002528     0x3a    beqz a4,ffffffff84002532 <init_freemem+0x44>
    0x8400252a     0x3c    li a5,0
    0x8400252c     0x3e    addi a5,a5,1
    0x8400252e     0x40    bne a5,a4,ffffffff8400252c <init_freemem+0x3e>
    0x84002532     0x44    auipc a5,0x0
    0x84002536     0x48    addi a5,a5,2014 # ffffffff84002d10 <ndks_boot+0x148>
    0x8400253a     0x4c    auipc a4,0x1
    0x8400253e     0x50    addi a4,a4,-1834 # ffffffff84002e10 <ndks_boot+0x248>
    0x84002542     0x54    sd zero,0(a5)
    0x84002546     0x58    sd zero,8(a5)
    0x8400254a     0x5c    addi a5,a5,16
    0x8400254c     0x5e    bne a5,a4,ffffffff84002542 <init_freemem+0x54>
    0x84002550     0x62    beqz s3,ffffffff840027fe <init_freemem+0x310>
    0x84002554     0x66    mv a6,a1
    0x84002556     0x68    auipc a4,0x1
    0x8400255a     0x6c    addi a4,a4,-1742 # ffffffff84002e88 <avail_reg+0x8>
    0x8400255e     0x70    slli t1,s3,0x4
    0x84002562     0x74    add t1,t1,a1
    0x84002564     0x76    li a7,-1
    0x84002566     0x78    slli a7,a7,0x26
    0x84002568     0x7a    li a0,127
    0x8400256c     0x7e    slli a0,a0,0x1f
    0x8400256e     0x80    lui t4,0x80000
    0x84002572     0x84    li t3,1
    0x84002574     0x86    slli t3,t3,0x26
    0x84002576     0x88    j ffffffff84002588 <init_freemem+0x9a>
    0x84002578     0x8a    mv a5,t4
    0x8400257a     0x8c    j ffffffff840025a2 <init_freemem+0xb4>
    0x8400257c     0x8e    sd a5,-8(a3)
    0x84002580     0x92    addi a6,a6,16
    0x84002582     0x94    addi a4,a4,16
    0x84002584     0x96    beq a6,t1,ffffffff84002814 <init_freemem+0x326>
    0x84002588     0x9a    ld a1,8(a6)
    0x8400258c     0x9e    add a5,a1,a7
    0x84002590     0xa2    mv a3,a4
    0x84002592     0xa4    ld a2,0(a6)
    0x84002596     0xa8    add a2,a2,a7
    0x84002598     0xaa    sd a2,-8(a4)
    0x8400259c     0xae    sd a5,0(a4)
    0x8400259e     0xb0    bltu a0,a1,ffffffff84002578 <init_freemem+0x8a>
    0x840025a2     0xb4    sd a5,0(a3)
    0x840025a4     0xb6    ld a5,-8(a3)
    0x840025a8     0xba    add a2,a5,t3
    0x840025ac     0xbe    bgeu a0,a2,ffffffff8400257c <init_freemem+0x8e>
    0x840025b0     0xc2    mv a5,t4
    0x840025b2     0xc4    j ffffffff8400257c <init_freemem+0x8e>
    0x840025b4     0xc6    addi s0,s0,1
    0x840025b6     0xc8    bgeu s1,s3,ffffffff84002802 <init_freemem+0x314>
    0x840025ba     0xcc    bgeu s0,s4,ffffffff8400282e <init_freemem+0x340>
    0x840025be     0xd0    slli s6,s0,0x4
    0x840025c2     0xd4    add s6,s6,s5
    0x840025c4     0xd6    ld a1,0(s6) # fffffffffe000000 <ki_end+0x79fd1000>
    0x840025c8     0xda    ld a4,8(s6)
    0x840025cc     0xde    beq a1,a4,ffffffff840025b4 <init_freemem+0xc6>
    0x840025d0     0xe2    slli a5,s1,0x4
    0x840025d4     0xe6    add a5,a5,s7
    0x840025d6     0xe8    ld a3,696(a5)
    0x840025da     0xec    ld a5,704(a5)
    0x840025de     0xf0    bltu a3,a5,ffffffff840025e6 <init_freemem+0xf8>
    0x840025e2     0xf4    addi s1,s1,1
    0x840025e4     0xf6    j ffffffff840025b6 <init_freemem+0xc8>
    0x840025e6     0xf8    bgeu a3,a4,ffffffff8400261a <init_freemem+0x12c>
    0x840025ea     0xfc    bgeu a1,a5,ffffffff8400262e <init_freemem+0x140>
    0x840025ee    0x100    bltu a3,a1,ffffffff84002644 <init_freemem+0x156>
    0x840025f2    0x104    slli a3,s1,0x4
    0x840025f6    0x108    add a3,a3,s7
    0x840025f8    0x10a    bgeu a5,a4,ffffffff840025fe <init_freemem+0x110>
    0x840025fc    0x10e    mv a4,a5
    0x840025fe    0x110    sd a4,696(a3)
    0x84002602    0x114    ld a1,8(s6)
    0x84002606    0x118    add a1,a1,s8
    0x84002608    0x11a    ld a0,0(s6)
    0x8400260c    0x11e    add a0,a0,s8
    0x8400260e    0x120    sd a0,48(sp)          ; stack access
    0x84002610    0x122    sd a1,56(sp)          ; stack access
    0x84002612    0x124    jal ra,ffffffff84000964 <reserve_region>
    0x84002616    0x128    addi s0,s0,1
    0x84002618    0x12a    j ffffffff840025b6 <init_freemem+0xc8>
    0x8400261a    0x12c    add a0,a1,s8
    0x8400261e    0x130    sd a0,32(sp)          ; stack access
    0x84002620    0x132    add a1,a4,s8
    0x84002624    0x136    sd a1,40(sp)          ; stack access
    0x84002626    0x138    jal ra,ffffffff84000964 <reserve_region>
    0x8400262a    0x13c    addi s0,s0,1
    0x8400262c    0x13e    j ffffffff840025b6 <init_freemem+0xc8>
    0x8400262e    0x140    slli a5,s1,0x4
    0x84002632    0x144    add a5,a5,s7
    0x84002634    0x146    ld a0,696(a5)
    0x84002638    0x14a    ld a1,704(a5)
    0x8400263c    0x14e    jal ra,ffffffff84000b3a <insert_region>
    0x84002640    0x152    addi s1,s1,1
    0x84002642    0x154    j ffffffff840025b6 <init_freemem+0xc8>
    0x84002644    0x156    slli s9,s1,0x4
    0x84002648    0x15a    add s9,s9,s7
    0x8400264a    0x15c    ld a0,696(s9)
    0x8400264e    0x160    sd a0,16(sp)          ; stack access
    0x84002650    0x162    sd a1,24(sp)          ; stack access
    0x84002652    0x164    jal ra,ffffffff84000b3a <insert_region>
    0x84002656    0x168    ld a5,8(s6)
    0x8400265a    0x16c    ld a4,704(s9)
    0x8400265e    0x170    bltu a5,a4,ffffffff84002666 <init_freemem+0x178>
    0x84002662    0x174    addi s1,s1,1
    0x84002664    0x176    j ffffffff840025b6 <init_freemem+0xc8>
    0x84002666    0x178    sd a5,696(s9)
    0x8400266a    0x17c    ld a0,0(s6)
    0x8400266e    0x180    add a0,a0,s8
    0x84002670    0x182    sd a0,64(sp)          ; stack access
    0x84002672    0x184    add a1,a5,s8
    0x84002676    0x188    sd a1,72(sp)          ; stack access
    0x84002678    0x18a    jal ra,ffffffff84000964 <reserve_region>
    0x8400267c    0x18e    addi s0,s0,1
    0x8400267e    0x190    j ffffffff840025b6 <init_freemem+0xc8>
    0x84002680    0x192    add a0,a0,s4
    0x84002682    0x194    sd a0,80(sp)          ; stack access
    0x84002684    0x196    add a1,a1,s4
    0x84002686    0x198    sd a1,88(sp)          ; stack access
    0x84002688    0x19a    jal ra,ffffffff84000964 <reserve_region>
    0x8400268c    0x19e    addi s0,s0,16
    0x8400268e    0x1a0    beq s0,s5,ffffffff8400282a <init_freemem+0x33c>
    0x84002692    0x1a4    ld a0,0(s0)
    0x84002694    0x1a6    ld a1,8(s0)
    0x84002696    0x1a8    bgeu a0,a1,ffffffff8400268c <init_freemem+0x19e>
    0x8400269a    0x1ac    j ffffffff84002680 <init_freemem+0x192>
    0x8400269c    0x1ae    slli a5,s1,0x4
    0x840026a0    0x1b2    add a5,a5,s4
    0x840026a2    0x1b4    ld a0,696(a5)
    0x840026a6    0x1b8    ld a1,704(a5)
    0x840026aa    0x1bc    jal ra,ffffffff84000b3a <insert_region>
    0x840026ae    0x1c0    addi s1,s1,1
    0x840026b0    0x1c2    addi s0,s0,16
    0x840026b2    0x1c4    beq s3,s1,ffffffff840026c0 <init_freemem+0x1d2>
    0x840026b6    0x1c8    ld a4,0(s0)
    0x840026b8    0x1ca    ld a5,8(s0)
    0x840026ba    0x1cc    bgeu a4,a5,ffffffff840026ae <init_freemem+0x1c0>
    0x840026be    0x1d0    j ffffffff8400269c <init_freemem+0x1ae>
    0x840026c0    0x1d2    auipc a5,0x0
    0x840026c4    0x1d6    addi a5,a5,1288 # ffffffff84002bc8 <ndks_boot>
    0x840026c8    0x1da    ld a3,568(a5)
    0x840026cc    0x1de    ld a4,576(a5)
    0x840026d0    0x1e2    auipc a5,0x0
    0x840026d4    0x1e6    addi a5,a5,1824 # ffffffff84002df0 <ndks_boot+0x228>
    0x840026d8    0x1ea    li s3,15
    0x840026da    0x1ec    bne a3,a4,ffffffff84002766 <init_freemem+0x278>
    0x840026de    0x1f0    mv s1,s3
    0x840026e0    0x1f2    addi s3,s3,-1
    0x840026e2    0x1f4    ld a3,0(a5)
    0x840026e4    0x1f6    addi a5,a5,-16
    0x840026e6    0x1f8    ld a4,24(a5)
    0x840026e8    0x1fa    beq a3,a4,ffffffff840026de <init_freemem+0x1f0>
    0x840026ec    0x1fe    ld a5,0(sp)           ; stack access
    0x840026ee    0x200    sd a5,16(sp)          ; stack access
    0x840026f0    0x202    ld a5,8(sp)           ; stack access
    0x840026f2    0x204    sd a5,24(sp)          ; stack access
    0x840026f4    0x206    mv s0,s2
    0x840026f6    0x208    beqz s2,ffffffff84002700 <init_freemem+0x212>
    0x840026fa    0x20c    li s0,1
    0x840026fc    0x20e    sll s0,s0,s2
    0x84002700    0x212    ld a0,16(sp)          ; stack access
    0x84002702    0x214    ld a1,24(sp)          ; stack access
    0x84002704    0x216    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84002708    0x21a    lui s4,0x1004
    0x8400270c    0x21e    addi s4,s4,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x84002710    0x222    add s0,s0,s4
    0x84002712    0x224    slli s4,a0,0xc
    0x84002716    0x228    add s4,s4,s0
    0x84002718    0x22a    mv a3,s2
    0x8400271a    0x22c    li a5,24
    0x8400271c    0x22e    bgeu s2,a5,ffffffff84002722 <init_freemem+0x234>
    0x84002720    0x232    li a3,24
    0x84002722    0x234    sext.w a4,a3
    0x84002726    0x238    addi a5,s3,20
    0x8400272a    0x23c    slli a2,a5,0x4
    0x8400272e    0x240    auipc a5,0x0
    0x84002732    0x244    addi a5,a5,1178 # ffffffff84002bc8 <ndks_boot>
    0x84002736    0x248    add a5,a5,a2
    0x84002738    0x24a    ld s0,16(a5)
    0x8400273a    0x24c    sub s0,s0,s4
    0x8400273e    0x250    srl s0,s0,a3
    0x84002742    0x254    sll s0,s0,a3
    0x84002746    0x258    ld a5,8(a5)
    0x84002748    0x25a    bgeu s0,a5,ffffffff8400276a <init_freemem+0x27c>
    0x8400274c    0x25e    slli a5,s3,0x4
    0x84002750    0x262    auipc a3,0x0
    0x84002754    0x266    addi a3,a3,1456 # ffffffff84002d00 <ndks_boot+0x138>
    0x84002758    0x26a    add a5,a5,a3
    0x8400275a    0x26c    li a2,15
    0x8400275c    0x26e    auipc a1,0x0
    0x84002760    0x272    addi a1,a1,1132 # ffffffff84002bc8 <ndks_boot>
    0x84002764    0x276    j ffffffff840027ea <init_freemem+0x2fc>
    0x84002766    0x278    jal ra,ffffffff84010224 <halt>
    0x8400276a    0x27c    mv s5,s3
    0x8400276c    0x27e    mv s3,s1
    0x8400276e    0x280    mv a3,s2
    0x84002770    0x282    ld a1,0(sp)           ; stack access
    0x84002772    0x284    ld a2,8(sp)           ; stack access
    0x84002774    0x286    mv a0,s0
    0x84002776    0x288    jal ra,ffffffff84002404 <create_rootserver_objects>
    0x8400277a    0x28c    li a5,15
    0x8400277c    0x28e    bltu a5,s5,ffffffff840027a0 <init_freemem+0x2b2>
    0x84002780    0x292    auipc a5,0x0
    0x84002784    0x296    addi a5,a5,1096 # ffffffff84002bc8 <ndks_boot>
    0x84002788    0x29a    addi a4,s5,20 # 300014 <KERNEL_OFFSET-0xfffffffeffcfffec>
    0x8400278c    0x29e    slli a4,a4,0x4
    0x8400278e    0x2a0    add a4,a4,a5
    0x84002790    0x2a2    ld a4,16(a4)
    0x84002792    0x2a4    addi s3,s3,20
    0x84002794    0x2a6    slli s3,s3,0x4
    0x84002796    0x2a8    add a5,a5,s3
    0x84002798    0x2aa    sd a4,16(a5)
    0x8400279a    0x2ac    add s4,s4,s0
    0x8400279c    0x2ae    sd s4,8(a5)
    0x840027a0    0x2b2    addi s5,s5,20
    0x840027a2    0x2b4    slli s5,s5,0x4
    0x840027a4    0x2b6    auipc a5,0x0
    0x840027a8    0x2ba    addi a5,a5,1060 # ffffffff84002bc8 <ndks_boot>
    0x840027ac    0x2be    add s5,s5,a5
    0x840027ae    0x2c0    sd s0,16(s5)
    0x840027b2    0x2c4    ld ra,184(sp)         ; stack access
    0x840027b4    0x2c6    ld s0,176(sp)         ; stack access
    0x840027b6    0x2c8    ld s1,168(sp)         ; stack access
    0x840027b8    0x2ca    ld s2,160(sp)         ; stack access
    0x840027ba    0x2cc    ld s3,152(sp)         ; stack access
    0x840027bc    0x2ce    ld s4,144(sp)         ; stack access
    0x840027be    0x2d0    ld s5,136(sp)         ; stack access
    0x840027c0    0x2d2    ld s6,128(sp)         ; stack access
    0x840027c2    0x2d4    ld s7,120(sp)         ; stack access
    0x840027c4    0x2d6    ld s8,112(sp)         ; stack access
    0x840027c6    0x2d8    ld s9,104(sp)         ; stack access
    0x840027c8    0x2da    addi sp,sp,192
    0x840027ca    0x2dc    ret
    0x840027cc    0x2de    addi s5,s3,-1
    0x840027d0    0x2e2    ld s0,8(a5)
    0x840027d2    0x2e4    sub s0,s0,s4
    0x840027d6    0x2e8    srl s0,s0,a4
    0x840027da    0x2ec    sll s0,s0,a4
    0x840027de    0x2f0    addi a5,a5,-16
    0x840027e0    0x2f2    mv s1,s3
    0x840027e2    0x2f4    ld a3,16(a5)
    0x840027e4    0x2f6    bgeu s0,a3,ffffffff8400276e <init_freemem+0x280>
    0x840027e8    0x2fa    mv s3,s5
    0x840027ea    0x2fc    bltu a2,s3,ffffffff840027cc <init_freemem+0x2de>
    0x840027ee    0x300    addi s1,s1,20
    0x840027f0    0x302    slli s1,s1,0x4
    0x840027f2    0x304    add s1,s1,a1
    0x840027f4    0x306    ld a3,16(a5)
    0x840027f6    0x308    sd a3,8(s1)
    0x840027f8    0x30a    ld a3,24(a5)
    0x840027fa    0x30c    sd a3,16(s1)
    0x840027fc    0x30e    j ffffffff840027cc <init_freemem+0x2de>
    0x840027fe    0x310    mv s1,s3
    0x84002800    0x312    mv s0,s3
    0x84002802    0x314    bgeu s0,s4,ffffffff840026c0 <init_freemem+0x1d2>
    0x84002806    0x318    slli s0,s0,0x4
    0x84002808    0x31a    add s0,s0,s5
    0x8400280a    0x31c    slli s4,s4,0x4
    0x8400280c    0x31e    add s5,s5,s4
    0x8400280e    0x320    li s4,1
    0x84002810    0x322    slli s4,s4,0x26
    0x84002812    0x324    j ffffffff84002692 <init_freemem+0x1a4>
    0x84002814    0x326    li s0,0
    0x84002816    0x328    li s1,0
    0x84002818    0x32a    auipc s7,0x0
    0x8400281c    0x32e    addi s7,s7,944 # ffffffff84002bc8 <ndks_boot>
    0x84002820    0x332    li s8,1
    0x84002822    0x334    slli s8,s8,0x26
    0x84002824    0x336    bnez s4,ffffffff840025be <init_freemem+0xd0>
    0x84002828    0x33a    mv s1,s4
    0x8400282a    0x33c    bgeu s1,s3,ffffffff840026c0 <init_freemem+0x1d2>
    0x8400282e    0x340    slli a5,s1,0x4
    0x84002832    0x344    auipc s0,0x0
    0x84002836    0x348    addi s0,s0,1614 # ffffffff84002e80 <avail_reg>
    0x8400283a    0x34c    add s0,s0,a5
    0x8400283c    0x34e    auipc s4,0x0
    0x84002840    0x352    addi s4,s4,908 # ffffffff84002bc8 <ndks_boot>
    0x84002844    0x356    j ffffffff840026b6 <init_freemem+0x1c8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
300 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 464 nodes.

Section decodeUntypedInvocation (252 of 266)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 256 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x8401614e      0x0    addi sp,sp,-176
    0x84016150      0x2    sd ra,168(sp)         ; stack access
    0x84016152      0x4    sd s0,160(sp)         ; stack access
    0x84016154      0x6    sd s1,152(sp)         ; stack access
    0x84016156      0x8    sd s2,144(sp)         ; stack access
    0x84016158      0xa    sd s3,136(sp)         ; stack access
    0x8401615a      0xc    sd s4,128(sp)         ; stack access
    0x8401615c      0xe    sd s5,120(sp)         ; stack access
    0x8401615e     0x10    sd s6,112(sp)         ; stack access
    0x84016160     0x12    sd s7,104(sp)         ; stack access
    0x84016162     0x14    sd s8,96(sp)          ; stack access
    0x84016164     0x16    sd s9,88(sp)          ; stack access
    0x84016166     0x18    sd s10,80(sp)         ; stack access
    0x84016168     0x1a    sd s11,72(sp)         ; stack access
    0x8401616a     0x1c    sd a3,16(sp)          ; stack access
    0x8401616c     0x1e    sd a4,24(sp)          ; stack access
    0x8401616e     0x20    li a5,1
    0x84016170     0x22    bne a0,a5,ffffffff840162e4 <decodeUntypedInvocation+0x196>
    0x84016174     0x26    mv s0,a0
    0x84016176     0x28    mv s1,a2
    0x84016178     0x2a    mv s5,a6
    0x8401617a     0x2c    li a5,5
    0x8401617c     0x2e    bgeu a5,a1,ffffffff8401630e <decodeUntypedInvocation+0x1c0>
    0x84016180     0x32    auipc s11,0x8
    0x84016184     0x36    ld s11,-1280(s11) # ffffffff8401dc80 <current_extra_caps>
    0x84016188     0x3a    beqz s11,ffffffff8401630e <decodeUntypedInvocation+0x1c0>
    0x8401618c     0x3e    auipc s8,0x19
    0x84016190     0x42    ld s8,-1780(s8) # ffffffff8402ea98 <ksCurThread>
    0x84016194     0x46    ld s2,88(s8)
    0x84016198     0x4a    li a5,8
    0x8401619a     0x4c    bltu a5,s2,ffffffff8401631c <decodeUntypedInvocation+0x1ce>
    0x8401619e     0x50    ld s6,96(s8)
    0x840161a2     0x54    mv a1,s6
    0x840161a4     0x56    mv a0,s2
    0x840161a6     0x58    jal ra,ffffffff84011838 <getObjectSize>
    0x840161aa     0x5c    mv s3,a0
    0x840161ac     0x5e    li a5,63
    0x840161b0     0x62    bltu a5,s6,ffffffff84016330 <decodeUntypedInvocation+0x1e2>
    0x840161b4     0x66    li a5,38
    0x840161b8     0x6a    bltu a5,a0,ffffffff84016330 <decodeUntypedInvocation+0x1e2>
    0x840161bc     0x6e    li a5,4
    0x840161be     0x70    beq s2,a5,ffffffff8401634a <decodeUntypedInvocation+0x1fc>
    0x840161c2     0x74    bnez s2,ffffffff840161cc <decodeUntypedInvocation+0x7e>
    0x840161c6     0x78    li a5,3
    0x840161c8     0x7a    bgeu a5,s6,ffffffff84016360 <decodeUntypedInvocation+0x212>
    0x840161cc     0x7e    ld s10,24(sp)         ; stack access
    0x840161ce     0x80    ld s4,112(s8)
    0x840161d2     0x84    ld s7,40(s5)
    0x840161d6     0x88    ld s9,48(s5)
    0x840161da     0x8c    bnez s4,ffffffff84016372 <decodeUntypedInvocation+0x224>
    0x840161de     0x90    ld a4,0(s11)
    0x840161e2     0x94    srli a5,a4,0x3b
    0x840161e6     0x98    li a3,10
    0x840161e8     0x9a    bne a5,a3,ffffffff84016392 <decodeUntypedInvocation+0x244>
    0x840161ec     0x9e    srli a5,a4,0x2f
    0x840161f0     0xa2    li a3,1
    0x840161f2     0xa4    sll a5,a3,a5
    0x840161f6     0xa8    addi a3,a5,-1 # fffffffffeffefff <ki_end+0x7afcffff>
    0x840161fa     0xac    bltu a3,s7,ffffffff840163c0 <decodeUntypedInvocation+0x272>
    0x840161fe     0xb0    addi a3,s9,-1
    0x84016202     0xb4    li a2,255
    0x84016206     0xb8    bltu a2,a3,ffffffff840163d6 <decodeUntypedInvocation+0x288>
    0x8401620a     0xbc    sub a5,a5,s7
    0x8401620e     0xc0    bltu a5,s9,ffffffff840163f0 <decodeUntypedInvocation+0x2a2>
    0x84016212     0xc4    slli a4,a4,0x1
    0x84016214     0xc6    lui s4,0xfc000
    0x84016218     0xca    srli s4,s4,0x19
    0x8401621c     0xce    and a5,a4,s4
    0x84016220     0xd2    slli a3,a4,0x19
    0x84016224     0xd6    bgez a3,ffffffff8401622e <decodeUntypedInvocation+0xe0>
    0x84016228     0xda    li a4,-1
    0x8401622a     0xdc    slli a4,a4,0x27
    0x8401622c     0xde    or a5,a5,a4
    0x8401622e     0xe0    mv s11,a5
    0x84016230     0xe2    add s8,s9,s7
    0x84016234     0xe6    bgeu s7,s8,ffffffff84016252 <decodeUntypedInvocation+0x104>
    0x84016238     0xea    slli s4,s7,0x5
    0x8401623c     0xee    add s4,s4,a5
    0x8401623e     0xf0    mv s5,s7
    0x84016240     0xf2    mv a0,s4
    0x84016242     0xf4    jal ra,ffffffff840115e6 <ensureEmptySlot>
    0x84016246     0xf8    bnez a0,ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x84016248     0xfa    addi s5,s5,1
    0x8401624a     0xfc    addi s4,s4,32 # fffffffffc000020 <ki_end+0x77fd1020>
    0x8401624e    0x100    bne s5,s8,ffffffff84016240 <decodeUntypedInvocation+0xf2>
    0x84016252    0x104    mv a0,s1
    0x84016254    0x106    jal ra,ffffffff84011d6e <ensureNoChildren>
    0x84016258    0x10a    beqz a0,ffffffff84016260 <decodeUntypedInvocation+0x112>
    0x8401625a    0x10c    srli a0,s10,0x19
    0x8401625e    0x110    li s0,0
    0x84016260    0x112    ld a5,16(sp)          ; stack access
    0x84016262    0x114    slli a4,a5,0x19
    0x84016266    0x118    srli a4,a4,0x19
    0x84016268    0x11a    slli a3,a5,0x19
    0x8401626c    0x11e    bgez a3,ffffffff84016276 <decodeUntypedInvocation+0x128>
    0x84016270    0x122    li a5,-1
    0x84016272    0x124    slli a5,a5,0x27
    0x84016274    0x126    or a4,a4,a5
    0x84016276    0x128    slli a0,a0,0x4
    0x84016278    0x12a    li a5,1
    0x8401627a    0x12c    sll a5,a5,s10
    0x8401627e    0x130    sub a5,a5,a0
    0x84016280    0x132    sext.w a3,s3
    0x84016284    0x136    srl s3,a5,s3
    0x84016288    0x13a    bltu s3,s9,ffffffff84016406 <decodeUntypedInvocation+0x2b8>
    0x8401628c    0x13e    srli s10,s10,0x6
    0x84016290    0x142    andi s10,s10,1
    0x84016294    0x146    beqz s10,ffffffff840162a6 <decodeUntypedInvocation+0x158>
    0x84016298    0x14a    addi a5,s2,-5
    0x8401629c    0x14e    li a2,2
    0x8401629e    0x150    bgeu a2,a5,ffffffff840162a6 <decodeUntypedInvocation+0x158>
    0x840162a2    0x154    bnez s2,ffffffff84016418 <decodeUntypedInvocation+0x2ca>
    0x840162a6    0x158    li a5,1
    0x840162a8    0x15a    sll a5,a5,a3
    0x840162ac    0x15e    addi s3,a5,-1
    0x840162b0    0x162    add a0,a0,s3
    0x840162b2    0x164    add s3,a0,a4
    0x840162b6    0x168    neg a5,a5
    0x840162ba    0x16c    and s3,s3,a5
    0x840162be    0x170    li a1,2
    0x840162c0    0x172    auipc a0,0x18
    0x840162c4    0x176    ld a0,2008(a0) # ffffffff8402ea98 <ksCurThread>
    0x840162c8    0x17a    jal ra,ffffffff840122d8 <setThreadState>
    0x840162cc    0x17e    sd s10,0(sp)          ; stack access
    0x840162ce    0x180    mv a7,s9
    0x840162d0    0x182    mv a6,s7
    0x840162d2    0x184    mv a5,s11
    0x840162d4    0x186    mv a4,s6
    0x840162d6    0x188    mv a3,s2
    0x840162d8    0x18a    mv a2,s3
    0x840162da    0x18c    mv a1,s0
    0x840162dc    0x18e    mv a0,s1
    0x840162de    0x190    jal ra,ffffffff84016040 <invokeUntyped_Retype>
    0x840162e2    0x194    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x840162e4    0x196    li a5,3
    0x840162e6    0x198    auipc a4,0x8
    0x840162ea    0x19c    sd a5,-1646(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840162ee    0x1a0    li a0,3
    0x840162f0    0x1a2    ld ra,168(sp)         ; stack access
    0x840162f2    0x1a4    ld s0,160(sp)         ; stack access
    0x840162f4    0x1a6    ld s1,152(sp)         ; stack access
    0x840162f6    0x1a8    ld s2,144(sp)         ; stack access
    0x840162f8    0x1aa    ld s3,136(sp)         ; stack access
    0x840162fa    0x1ac    ld s4,128(sp)         ; stack access
    0x840162fc    0x1ae    ld s5,120(sp)         ; stack access
    0x840162fe    0x1b0    ld s6,112(sp)         ; stack access
    0x84016300    0x1b2    ld s7,104(sp)         ; stack access
    0x84016302    0x1b4    ld s8,96(sp)          ; stack access
    0x84016304    0x1b6    ld s9,88(sp)          ; stack access
    0x84016306    0x1b8    ld s10,80(sp)         ; stack access
    0x84016308    0x1ba    ld s11,72(sp)         ; stack access
    0x8401630a    0x1bc    addi sp,sp,176
    0x8401630c    0x1be    ret
    0x8401630e    0x1c0    li a5,7
    0x84016310    0x1c2    auipc a4,0x8
    0x84016314    0x1c6    sd a5,-1688(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84016318    0x1ca    li a0,3
    0x8401631a    0x1cc    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x8401631c    0x1ce    auipc a5,0x8
    0x84016320    0x1d2    addi a5,a5,-1748 # ffffffff8401dc48 <current_syscall_error>
    0x84016324    0x1d6    li a4,1
    0x84016326    0x1d8    sd a4,48(a5)
    0x84016328    0x1da    sd zero,0(a5)
    0x8401632c    0x1de    li a0,3
    0x8401632e    0x1e0    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x84016330    0x1e2    auipc a5,0x8
    0x84016334    0x1e6    addi a5,a5,-1768 # ffffffff8401dc48 <current_syscall_error>
    0x84016338    0x1ea    li a4,4
    0x8401633a    0x1ec    sd a4,48(a5)
    0x8401633c    0x1ee    sd zero,16(a5)
    0x84016340    0x1f2    li a4,38
    0x84016344    0x1f6    sd a4,24(a5)
    0x84016346    0x1f8    li a0,3
    0x84016348    0x1fa    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x8401634a    0x1fc    bnez s6,ffffffff840161cc <decodeUntypedInvocation+0x7e>
    0x8401634e    0x200    auipc a5,0x8
    0x84016352    0x204    addi a5,a5,-1798 # ffffffff8401dc48 <current_syscall_error>
    0x84016356    0x208    li a4,1
    0x84016358    0x20a    sd a4,48(a5)
    0x8401635a    0x20c    sd a4,0(a5)
    0x8401635c    0x20e    li a0,3
    0x8401635e    0x210    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x84016360    0x212    auipc a5,0x8
    0x84016364    0x216    addi a5,a5,-1816 # ffffffff8401dc48 <current_syscall_error>
    0x84016368    0x21a    li a4,1
    0x8401636a    0x21c    sd a4,48(a5)
    0x8401636c    0x21e    sd a4,0(a5)
    0x8401636e    0x220    li a0,3
    0x84016370    0x222    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x84016372    0x224    ld a0,0(s11)
    0x84016376    0x228    sd a0,32(sp)          ; stack access
    0x84016378    0x22a    ld a1,8(s11)
    0x8401637c    0x22e    sd a1,40(sp)          ; stack access
    0x8401637e    0x230    mv a3,s4
    0x84016380    0x232    ld a2,104(s8)
    0x84016384    0x236    jal ra,ffffffff840111b6 <lookupTargetSlot>
    0x84016388    0x23a    sd a0,48(sp)          ; stack access
    0x8401638a    0x23c    sd a1,56(sp)          ; stack access
    0x8401638c    0x23e    bnez a0,ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x8401638e    0x240    ld a4,0(a1)
    0x84016390    0x242    j ffffffff840161e2 <decodeUntypedInvocation+0x94>
    0x84016392    0x244    auipc a5,0x8
    0x84016396    0x248    addi a5,a5,-1866 # ffffffff8401dc48 <current_syscall_error>
    0x8401639a    0x24c    li a4,6
    0x8401639c    0x24e    sd a4,48(a5)
    0x8401639e    0x250    sd zero,40(a5)
    0x840163a2    0x254    auipc a4,0x8
    0x840163a6    0x258    addi a4,a4,-1906 # ffffffff8401dc30 <current_lookup_fault>
    0x840163aa    0x25c    slli a5,s4,0x2
    0x840163ae    0x260    andi a5,a5,508
    0x840163b2    0x264    ori a5,a5,1
    0x840163b6    0x268    sd a5,0(a4)
    0x840163b8    0x26a    sd zero,8(a4)
    0x840163bc    0x26e    li a0,3
    0x840163be    0x270    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x840163c0    0x272    auipc a5,0x8
    0x840163c4    0x276    addi a5,a5,-1912 # ffffffff8401dc48 <current_syscall_error>
    0x840163c8    0x27a    li a4,4
    0x840163ca    0x27c    sd a4,48(a5)
    0x840163cc    0x27e    sd zero,16(a5)
    0x840163d0    0x282    sd a3,24(a5)
    0x840163d2    0x284    li a0,3
    0x840163d4    0x286    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x840163d6    0x288    auipc a5,0x8
    0x840163da    0x28c    addi a5,a5,-1934 # ffffffff8401dc48 <current_syscall_error>
    0x840163de    0x290    li a4,4
    0x840163e0    0x292    sd a4,48(a5)
    0x840163e2    0x294    li a4,1
    0x840163e4    0x296    sd a4,16(a5)
    0x840163e6    0x298    li a4,256
    0x840163ea    0x29c    sd a4,24(a5)
    0x840163ec    0x29e    li a0,3
    0x840163ee    0x2a0    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x840163f0    0x2a2    auipc a4,0x8
    0x840163f4    0x2a6    addi a4,a4,-1960 # ffffffff8401dc48 <current_syscall_error>
    0x840163f8    0x2aa    li a3,4
    0x840163fa    0x2ac    sd a3,48(a4)
    0x840163fc    0x2ae    li a3,1
    0x840163fe    0x2b0    sd a3,16(a4)
    0x84016400    0x2b2    sd a5,24(a4)
    0x84016402    0x2b4    li a0,3
    0x84016404    0x2b6    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x84016406    0x2b8    auipc a4,0x8
    0x8401640a    0x2bc    addi a4,a4,-1982 # ffffffff8401dc48 <current_syscall_error>
    0x8401640e    0x2c0    li a3,10
    0x84016410    0x2c2    sd a3,48(a4)
    0x84016412    0x2c4    sd a5,32(a4)
    0x84016414    0x2c6    li a0,3
    0x84016416    0x2c8    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>
    0x84016418    0x2ca    auipc a5,0x8
    0x8401641c    0x2ce    addi a5,a5,-2000 # ffffffff8401dc48 <current_syscall_error>
    0x84016420    0x2d2    li a4,1
    0x84016422    0x2d4    sd a4,48(a5)
    0x84016424    0x2d6    sd a4,0(a5)
    0x84016426    0x2d8    li a0,3
    0x84016428    0x2da    j ffffffff840162f0 <decodeUntypedInvocation+0x1a2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
256 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 391 nodes.

Section decodeSetSpace (253 of 266)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 151 instructions.

RVC_FTTFFFFTFFFT__FT.

Stack analysis
---------------

58 stack accesses found. Annotated code for `decodeSetSpace`:

    0x84014c42      0x0    addi sp,sp,-256
    0x84014c44      0x2    sd ra,248(sp)         ; stack access
    0x84014c46      0x4    sd s0,240(sp)         ; stack access
    0x84014c48      0x6    sd s1,232(sp)         ; stack access
    0x84014c4a      0x8    sd s2,224(sp)         ; stack access
    0x84014c4c      0xa    sd s3,216(sp)         ; stack access
    0x84014c4e      0xc    sd s4,208(sp)         ; stack access
    0x84014c50      0xe    sd s5,200(sp)         ; stack access
    0x84014c52     0x10    sd s6,192(sp)         ; stack access
    0x84014c54     0x12    sd s7,184(sp)         ; stack access
    0x84014c56     0x14    sd s8,176(sp)         ; stack access
    0x84014c58     0x16    sd s9,168(sp)         ; stack access
    0x84014c5a     0x18    sd a0,64(sp)          ; stack access
    0x84014c5c     0x1a    sd a1,72(sp)          ; stack access
    0x84014c5e     0x1c    li a5,2
    0x84014c60     0x1e    bgeu a5,a2,ffffffff84014d76 <decodeSetSpace+0x134>
    0x84014c64     0x22    mv s4,a3
    0x84014c66     0x24    auipc s1,0x9
    0x84014c6a     0x28    ld s1,26(s1) # ffffffff8401dc80 <current_extra_caps>
    0x84014c6e     0x2c    beqz s1,ffffffff84014d76 <decodeSetSpace+0x134>
    0x84014c72     0x30    auipc s2,0x9
    0x84014c76     0x34    ld s2,22(s2) # ffffffff8401dc88 <current_extra_caps+0x8>
    0x84014c7a     0x38    beqz s2,ffffffff84014d76 <decodeSetSpace+0x134>
    0x84014c7e     0x3c    auipc a5,0x1a
    0x84014c82     0x40    ld a5,-486(a5) # ffffffff8402ea98 <ksCurThread>
    0x84014c86     0x44    ld s6,88(a5)
    0x84014c8a     0x48    ld s5,96(a5)
    0x84014c8e     0x4c    ld s7,104(a5)
    0x84014c92     0x50    ld s3,0(s1)
    0x84014c96     0x54    sd s3,128(sp)         ; stack access
    0x84014c98     0x56    ld a5,8(s1)
    0x84014c9a     0x58    sd a5,136(sp)         ; stack access
    0x84014c9c     0x5a    mv s8,s3
    0x84014c9e     0x5c    ld a5,0(s2)
    0x84014ca2     0x60    sd a5,112(sp)         ; stack access
    0x84014ca4     0x62    ld a5,8(s2)
    0x84014ca8     0x66    sd a5,120(sp)         ; stack access
    0x84014caa     0x68    ld a5,64(sp)          ; stack access
    0x84014cac     0x6a    slli s0,a5,0x19
    0x84014cb0     0x6e    srli s0,s0,0x19
    0x84014cb2     0x70    slli a4,a5,0x19
    0x84014cb6     0x74    bgez a4,ffffffff84014cc0 <decodeSetSpace+0x7e>
    0x84014cba     0x78    li a5,-1
    0x84014cbc     0x7a    slli a5,a5,0x27
    0x84014cbe     0x7c    or s0,s0,a5
    0x84014cc0     0x7e    andi s9,s0,-1024
    0x84014cc4     0x82    mv a0,s9
    0x84014cc6     0x84    jal ra,ffffffff84011ed8 <slotCapLongRunningDelete>
    0x84014cca     0x88    bnez a0,ffffffff84014d9c <decodeSetSpace+0x15a>
    0x84014ccc     0x8a    addi a0,s9,32
    0x84014cd0     0x8e    jal ra,ffffffff84011ed8 <slotCapLongRunningDelete>
    0x84014cd4     0x92    bnez a0,ffffffff84014d9c <decodeSetSpace+0x15a>
    0x84014cd6     0x94    beqz s5,ffffffff84014cea <decodeSetSpace+0xa8>
    0x84014cda     0x98    mv a2,s3
    0x84014cdc     0x9a    ld a3,136(sp)         ; stack access
    0x84014cde     0x9c    mv a1,s5
    0x84014ce0     0x9e    li a0,0
    0x84014ce2     0xa0    jal ra,ffffffff84011f14 <updateCapData>
    0x84014ce6     0xa4    sd a1,136(sp)         ; stack access
    0x84014ce8     0xa6    mv s8,a0
    0x84014cea     0xa8    mv a2,s8
    0x84014cec     0xaa    ld a3,136(sp)         ; stack access
    0x84014cee     0xac    mv a1,s1
    0x84014cf0     0xae    addi a0,sp,88
    0x84014cf2     0xb0    jal ra,ffffffff84011dae <deriveCap>
    0x84014cf6     0xb4    ld a0,88(sp)          ; stack access
    0x84014cf8     0xb6    bnez a0,ffffffff84014d82 <decodeSetSpace+0x140>
    0x84014cfa     0xb8    ld s3,96(sp)          ; stack access
    0x84014cfc     0xba    ld a5,104(sp)         ; stack access
    0x84014cfe     0xbc    sd a5,136(sp)         ; stack access
    0x84014d00     0xbe    srli a4,s3,0x3b
    0x84014d04     0xc2    li a5,10
    0x84014d06     0xc4    bne a4,a5,ffffffff84014daa <decodeSetSpace+0x168>
    0x84014d0a     0xc8    beqz s7,ffffffff84014d1e <decodeSetSpace+0xdc>
    0x84014d0e     0xcc    ld a2,112(sp)         ; stack access
    0x84014d10     0xce    ld a3,120(sp)         ; stack access
    0x84014d12     0xd0    mv a1,s7
    0x84014d14     0xd2    li a0,0
    0x84014d16     0xd4    jal ra,ffffffff84011f14 <updateCapData>
    0x84014d1a     0xd8    sd a0,112(sp)         ; stack access
    0x84014d1c     0xda    sd a1,120(sp)         ; stack access
    0x84014d1e     0xdc    ld a2,112(sp)         ; stack access
    0x84014d20     0xde    ld a3,120(sp)         ; stack access
    0x84014d22     0xe0    mv a1,s2
    0x84014d24     0xe2    addi a0,sp,88
    0x84014d26     0xe4    jal ra,ffffffff84011dae <deriveCap>
    0x84014d2a     0xe8    ld a0,88(sp)          ; stack access
    0x84014d2c     0xea    bnez a0,ffffffff84014d82 <decodeSetSpace+0x140>
    0x84014d2e     0xec    ld a0,96(sp)          ; stack access
    0x84014d30     0xee    sd a0,112(sp)         ; stack access
    0x84014d32     0xf0    ld a1,104(sp)         ; stack access
    0x84014d34     0xf2    sd a1,120(sp)         ; stack access
    0x84014d36     0xf4    jal ra,ffffffff8401090a <isValidVTableRoot>
    0x84014d3a     0xf8    beqz a0,ffffffff84014db8 <decodeSetSpace+0x176>
    0x84014d3c     0xfa    li a1,2
    0x84014d3e     0xfc    auipc a0,0x1a
    0x84014d42    0x100    ld a0,-678(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014d46    0x104    jal ra,ffffffff840122d8 <setThreadState>
    0x84014d4a    0x108    li a5,4
    0x84014d4c    0x10a    sd a5,56(sp)          ; stack access
    0x84014d4e    0x10c    sd zero,48(sp)        ; stack access
    0x84014d50    0x10e    sd zero,32(sp)        ; stack access
    0x84014d52    0x110    sd zero,40(sp)        ; stack access
    0x84014d54    0x112    sd zero,24(sp)        ; stack access
    0x84014d56    0x114    sd s2,16(sp)          ; stack access
    0x84014d58    0x116    ld a5,112(sp)         ; stack access
    0x84014d5a    0x118    sd a5,0(sp)           ; stack access
    0x84014d5c    0x11a    ld a5,120(sp)         ; stack access
    0x84014d5e    0x11c    sd a5,8(sp)           ; stack access
    0x84014d60    0x11e    mv a7,s1
    0x84014d62    0x120    mv a5,s3
    0x84014d64    0x122    ld a6,136(sp)         ; stack access
    0x84014d66    0x124    li a4,0
    0x84014d68    0x126    li a3,0
    0x84014d6a    0x128    mv a2,s6
    0x84014d6c    0x12a    mv a1,s4
    0x84014d6e    0x12c    mv a0,s0
    0x84014d70    0x12e    jal ra,ffffffff840145da <invokeTCB_ThreadControl>
    0x84014d74    0x132    j ffffffff84014d82 <decodeSetSpace+0x140>
    0x84014d76    0x134    li a5,7
    0x84014d78    0x136    auipc a4,0x9
    0x84014d7c    0x13a    sd a5,-256(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014d80    0x13e    li a0,3
    0x84014d82    0x140    ld ra,248(sp)         ; stack access
    0x84014d84    0x142    ld s0,240(sp)         ; stack access
    0x84014d86    0x144    ld s1,232(sp)         ; stack access
    0x84014d88    0x146    ld s2,224(sp)         ; stack access
    0x84014d8a    0x148    ld s3,216(sp)         ; stack access
    0x84014d8c    0x14a    ld s4,208(sp)         ; stack access
    0x84014d8e    0x14c    ld s5,200(sp)         ; stack access
    0x84014d90    0x14e    ld s6,192(sp)         ; stack access
    0x84014d92    0x150    ld s7,184(sp)         ; stack access
    0x84014d94    0x152    ld s8,176(sp)         ; stack access
    0x84014d96    0x154    ld s9,168(sp)         ; stack access
    0x84014d98    0x156    addi sp,sp,256
    0x84014d9a    0x158    ret
    0x84014d9c    0x15a    li a5,3
    0x84014d9e    0x15c    auipc a4,0x9
    0x84014da2    0x160    sd a5,-294(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014da6    0x164    li a0,3
    0x84014da8    0x166    j ffffffff84014d82 <decodeSetSpace+0x140>
    0x84014daa    0x168    li a5,3
    0x84014dac    0x16a    auipc a4,0x9
    0x84014db0    0x16e    sd a5,-308(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014db4    0x172    li a0,3
    0x84014db6    0x174    j ffffffff84014d82 <decodeSetSpace+0x140>
    0x84014db8    0x176    li a5,3
    0x84014dba    0x178    auipc a4,0x9
    0x84014dbe    0x17c    sd a5,-322(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014dc2    0x180    li a0,3
    0x84014dc4    0x182    j ffffffff84014d82 <decodeSetSpace+0x140>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
151 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 258 nodes.

Section sendIPC (254 of 266)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 139 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `sendIPC`:

    0x84013e96      0x0    addi sp,sp,-80
    0x84013e98      0x2    sd ra,72(sp)          ; stack access
    0x84013e9a      0x4    sd s0,64(sp)          ; stack access
    0x84013e9c      0x6    sd s1,56(sp)          ; stack access
    0x84013e9e      0x8    sd s2,48(sp)          ; stack access
    0x84013ea0      0xa    sd s3,40(sp)          ; stack access
    0x84013ea2      0xc    sd s4,32(sp)          ; stack access
    0x84013ea4      0xe    sd s5,24(sp)          ; stack access
    0x84013ea6     0x10    sd s6,16(sp)          ; stack access
    0x84013ea8     0x12    mv s3,a1
    0x84013eaa     0x14    mv s5,a2
    0x84013eac     0x16    mv s2,a3
    0x84013eae     0x18    mv s4,a4
    0x84013eb0     0x1a    mv s1,a5
    0x84013eb2     0x1c    mv s0,a6
    0x84013eb4     0x1e    ld a5,0(a6)
    0x84013eb8     0x22    andi a4,a5,2
    0x84013ebc     0x26    beqz a4,ffffffff84013f46 <sendIPC+0xb0>
    0x84013ebe     0x28    andi a3,a5,3
    0x84013ec2     0x2c    li a4,2
    0x84013ec4     0x2e    bne a3,a4,ffffffff84013f48 <sendIPC+0xb2>
    0x84013ec8     0x32    ld s6,8(a6)
    0x84013ecc     0x36    lui a2,0xf8000
    0x84013ed0     0x3a    srli a2,a2,0x19
    0x84013ed2     0x3c    and a2,a2,a5
    0x84013ed4     0x3e    slli a4,a5,0x19
    0x84013ed8     0x42    bgez a4,ffffffff84013ee2 <sendIPC+0x4c>
    0x84013edc     0x46    li a5,-1
    0x84013ede     0x48    slli a5,a5,0x27
    0x84013ee0     0x4a    or a2,a2,a5
    0x84013ee2     0x4c    mv a1,s6
    0x84013ee4     0x4e    mv a0,s6
    0x84013ee6     0x50    jal ra,ffffffff84012b00 <tcbEPDequeue>
    0x84013eea     0x54    sd a0,0(sp)           ; stack access
    0x84013eec     0x56    sd a1,8(sp)           ; stack access
    0x84013eee     0x58    sd a0,8(s0)
    0x84013ef0     0x5a    ld a5,0(s0)
    0x84013ef2     0x5c    li a4,-1
    0x84013ef4     0x5e    slli a4,a4,0x27
    0x84013ef6     0x60    addi a4,a4,3
    0x84013ef8     0x62    and a5,a5,a4
    0x84013efa     0x64    lui a4,0xf8000
    0x84013efe     0x68    srli a4,a4,0x19
    0x84013f00     0x6a    and a1,a1,a4
    0x84013f02     0x6c    or a1,a1,a5
    0x84013f04     0x6e    beqz a0,ffffffff84013ffa <sendIPC+0x164>
    0x84013f08     0x72    sd a1,0(s0)
    0x84013f0a     0x74    mv a4,s6
    0x84013f0c     0x76    mv a3,s2
    0x84013f0e     0x78    mv a2,s5
    0x84013f10     0x7a    mv a1,s0
    0x84013f12     0x7c    mv a0,s1
    0x84013f14     0x7e    jal ra,ffffffff84013d60 <doIPCTransfer>
    0x84013f18     0x82    ld s0,288(s6)
    0x84013f1c     0x86    li a1,1
    0x84013f1e     0x88    mv a0,s6
    0x84013f20     0x8a    jal ra,ffffffff840122d8 <setThreadState>
    0x84013f24     0x8e    mv a0,s6
    0x84013f26     0x90    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x84013f2a     0x94    beqz s3,ffffffff84013f48 <sendIPC+0xb2>
    0x84013f2e     0x98    or s2,s2,s4
    0x84013f32     0x9c    beqz s2,ffffffff84014000 <sendIPC+0x16a>
    0x84013f36     0xa0    srli a2,s0,0x3
    0x84013f3a     0xa4    andi a2,a2,1
    0x84013f3c     0xa6    mv a1,s6
    0x84013f3e     0xa8    mv a0,s1
    0x84013f40     0xaa    jal ra,ffffffff84013a86 <setupCallerCap>
    0x84013f44     0xae    j ffffffff84013f48 <sendIPC+0xb2>
    0x84013f46     0xb0    bnez a0,ffffffff84013f5c <sendIPC+0xc6>
    0x84013f48     0xb2    ld ra,72(sp)          ; stack access
    0x84013f4a     0xb4    ld s0,64(sp)          ; stack access
    0x84013f4c     0xb6    ld s1,56(sp)          ; stack access
    0x84013f4e     0xb8    ld s2,48(sp)          ; stack access
    0x84013f50     0xba    ld s3,40(sp)          ; stack access
    0x84013f52     0xbc    ld s4,32(sp)          ; stack access
    0x84013f54     0xbe    ld s5,24(sp)          ; stack access
    0x84013f56     0xc0    ld s6,16(sp)          ; stack access
    0x84013f58     0xc2    addi sp,sp,80
    0x84013f5a     0xc4    ret
    0x84013f5c     0xc6    ld a5,280(s1)
    0x84013f60     0xca    srli a5,a5,0x27
    0x84013f62     0xcc    slli a5,a5,0x27
    0x84013f64     0xce    lui a4,0xe0000
    0x84013f68     0xd2    srli a4,a4,0x19
    0x84013f6a     0xd4    and a4,a6,a4
    0x84013f6e     0xd8    or a5,a5,a4
    0x84013f70     0xda    ori a5,a5,4
    0x84013f74     0xde    sd a5,280(s1)
    0x84013f78     0xe2    sd a2,296(s1)
    0x84013f7c     0xe6    ld a5,288(s1)
    0x84013f80     0xea    slli s2,a3,0x3
    0x84013f84     0xee    andi s2,s2,8
    0x84013f88     0xf2    andi a5,a5,-13
    0x84013f8a     0xf4    or a5,a5,s2
    0x84013f8e     0xf8    slli s4,s4,0x2
    0x84013f90     0xfa    andi s4,s4,4
    0x84013f94     0xfe    or a5,a5,s4
    0x84013f98    0x102    andi a5,a5,-3
    0x84013f9a    0x104    slli s3,a1,0x1
    0x84013f9e    0x108    andi s3,s3,2
    0x84013fa2    0x10c    or s3,a5,s3
    0x84013fa6    0x110    sd s3,288(s1)
    0x84013faa    0x114    mv a0,s1
    0x84013fac    0x116    jal ra,ffffffff840122a4 <scheduleTCB>
    0x84013fb0    0x11a    ld a2,8(s0)
    0x84013fb2    0x11c    ld a4,0(s0)
    0x84013fb4    0x11e    lui a5,0xf8000
    0x84013fb8    0x122    srli a5,a5,0x19
    0x84013fba    0x124    and a5,a5,a4
    0x84013fbc    0x126    slli a3,a4,0x19
    0x84013fc0    0x12a    bgez a3,ffffffff84013fca <sendIPC+0x134>
    0x84013fc4    0x12e    li a4,-1
    0x84013fc6    0x130    slli a4,a4,0x27
    0x84013fc8    0x132    or a5,a5,a4
    0x84013fca    0x134    mv a4,a5
    0x84013fcc    0x136    mv a3,s1
    0x84013fce    0x138    beqz a2,ffffffff84013fd6 <sendIPC+0x140>
    0x84013fd0    0x13a    mv a3,a2
    0x84013fd2    0x13c    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x84013fd6    0x140    sd a4,416(s1)
    0x84013fda    0x144    sd zero,408(s1)
    0x84013fde    0x148    ld a4,0(s0)
    0x84013fe0    0x14a    sd a3,8(s0)
    0x84013fe2    0x14c    lui a5,0xf8000
    0x84013fe6    0x150    srli a5,a5,0x19
    0x84013fe8    0x152    and s1,s1,a5
    0x84013fea    0x154    srli a5,a4,0x27
    0x84013fee    0x158    slli a5,a5,0x27
    0x84013ff0    0x15a    or s1,s1,a5
    0x84013ff2    0x15c    ori s1,s1,1
    0x84013ff6    0x160    sd s1,0(s0)
    0x84013ff8    0x162    j ffffffff84013f48 <sendIPC+0xb2>
    0x84013ffa    0x164    andi a1,a1,-4
    0x84013ffc    0x166    sd a1,0(s0)
    0x84013ffe    0x168    j ffffffff84013f0a <sendIPC+0x74>
    0x84014000    0x16a    li a1,0
    0x84014002    0x16c    mv a0,s1
    0x84014004    0x16e    jal ra,ffffffff840122d8 <setThreadState>
    0x84014008    0x172    j ffffffff84013f48 <sendIPC+0xb2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
139 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 203 nodes.

Section cteDelete (255 of 266)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 158 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `cteDelete`:

    0x84012f7c      0x0    addi sp,sp,-160
    0x84012f7e      0x2    sd ra,152(sp)         ; stack access
    0x84012f80      0x4    sd s0,144(sp)         ; stack access
    0x84012f82      0x6    sd s1,136(sp)         ; stack access
    0x84012f84      0x8    sd s2,128(sp)         ; stack access
    0x84012f86      0xa    sd s3,120(sp)         ; stack access
    0x84012f88      0xc    sd s4,112(sp)         ; stack access
    0x84012f8a      0xe    sd s5,104(sp)         ; stack access
    0x84012f8c     0x10    sd s6,96(sp)          ; stack access
    0x84012f8e     0x12    sd s7,88(sp)          ; stack access
    0x84012f90     0x14    sd s8,80(sp)          ; stack access
    0x84012f92     0x16    sd s9,72(sp)          ; stack access
    0x84012f94     0x18    mv s0,a0
    0x84012f96     0x1a    mv s3,a1
    0x84012f98     0x1c    li s4,18
    0x84012f9a     0x1e    li s2,64
    0x84012f9e     0x22    li s6,4
    0x84012fa0     0x24    li s5,-1
    0x84012fa2     0x26    li s1,1
    0x84012fa4     0x28    j ffffffff84012fdc <cteDelete+0x60>
    0x84012fa6     0x2a    mv a4,s6
    0x84012fa8     0x2c    j ffffffff84013014 <cteDelete+0x98>
    0x84012faa     0x2e    bnez a1,ffffffff84013042 <cteDelete+0xc6>
    0x84012fac     0x30    sd a5,0(s0)
    0x84012fae     0x32    sd a0,8(s0)
    0x84012fb0     0x34    bnez s3,ffffffff840130a8 <cteDelete+0x12c>
    0x84012fb4     0x38    beq a2,s4,ffffffff84013048 <cteDelete+0xcc>
    0x84012fb8     0x3c    andi a4,a5,127
    0x84012fbc     0x40    beq a4,s2,ffffffff84013130 <cteDelete+0x1b4>
    0x84012fc0     0x44    andi a5,a5,63
    0x84012fc4     0x48    addiw a5,a5,1
    0x84012fc6     0x4a    sll a5,s1,a5
    0x84012fca     0x4e    neg a5,a5
    0x84012fce     0x52    and a0,a0,a5
    0x84012fd0     0x54    mv a1,s0
    0x84012fd2     0x56    jal ra,ffffffff84011548 <capSwapForDelete>
    0x84012fd6     0x5a    jal ra,ffffffff84011250 <preemptionPoint>
    0x84012fda     0x5e    bnez a0,ffffffff84013080 <cteDelete+0x104>
    0x84012fdc     0x60    ld a5,0(s0)
    0x84012fde     0x62    srli a5,a5,0x3b
    0x84012fe0     0x64    beqz a5,ffffffff84013070 <cteDelete+0xf4>
    0x84012fe2     0x66    mv a0,s0
    0x84012fe4     0x68    jal ra,ffffffff84011e80 <isFinalCapability>
    0x84012fe8     0x6c    mv a3,a0
    0x84012fea     0x6e    li a4,0
    0x84012fec     0x70    ld a1,0(s0)
    0x84012fee     0x72    ld a2,8(s0)
    0x84012ff0     0x74    mv a0,sp
    0x84012ff2     0x76    jal ra,ffffffff84012dc6 <finaliseCap>
    0x84012ff6     0x7a    ld a5,0(sp)           ; stack access
    0x84012ff8     0x7c    ld a0,8(sp)           ; stack access
    0x84012ffa     0x7e    ld a7,16(sp)          ; stack access
    0x84012ffc     0x80    ld a6,24(sp)          ; stack access
    0x84012ffe     0x82    srli a2,a5,0x3b
    0x84013002     0x86    beqz a2,ffffffff84013042 <cteDelete+0xc6>
    0x84013004     0x88    bne a2,s4,ffffffff8401303e <cteDelete+0xc2>
    0x84013008     0x8c    andi a4,a5,127
    0x8401300c     0x90    beq a4,s2,ffffffff84012fa6 <cteDelete+0x2a>
    0x84013010     0x94    andi a4,a5,63
    0x84013014     0x98    addi a4,a4,1
    0x84013016     0x9a    sll a3,s5,a4
    0x8401301a     0x9e    not a3,a3
    0x8401301e     0xa2    and a3,a3,a0
    0x84013020     0xa4    mv a1,s1
    0x84013022     0xa6    beqz a3,ffffffff84012faa <cteDelete+0x2e>
    0x84013024     0xa8    li a1,0
    0x84013026     0xaa    bne a3,s1,ffffffff84012faa <cteDelete+0x2e>
    0x8401302a     0xae    sll a4,s1,a4
    0x8401302e     0xb2    neg a4,a4
    0x84013032     0xb6    and a4,a4,a0
    0x84013034     0xb8    sub a4,s0,a4
    0x84013038     0xbc    seqz a1,a4
    0x8401303c     0xc0    j ffffffff84012faa <cteDelete+0x2e>
    0x8401303e     0xc2    jal ra,ffffffff84010224 <halt>
    0x84013042     0xc6    sd a7,48(sp)          ; stack access
    0x84013044     0xc8    sd a6,56(sp)          ; stack access
    0x84013046     0xca    j ffffffff84013074 <cteDelete+0xf8>
    0x84013048     0xcc    andi a4,a5,127
    0x8401304c     0xd0    beq a4,s2,ffffffff84013128 <cteDelete+0x1ac>
    0x84013050     0xd4    andi a4,a5,63
    0x84013054     0xd8    addiw a4,a4,1
    0x84013056     0xda    sll a4,s1,a4
    0x8401305a     0xde    neg a4,a4
    0x8401305e     0xe2    and a4,a4,a0
    0x84013060     0xe4    bne s0,a4,ffffffff84012fb8 <cteDelete+0x3c>
    0x84013064     0xe8    mv a0,s3
    0x84013066     0xea    j ffffffff84013080 <cteDelete+0x104>
    0x84013068     0xec    mv a5,s6
    0x8401306a     0xee    j ffffffff840130fa <cteDelete+0x17e>
    0x8401306c     0xf0    jal ra,ffffffff84010224 <halt>
    0x84013070     0xf4    sd zero,48(sp)        ; stack access
    0x84013072     0xf6    sd zero,56(sp)        ; stack access
    0x84013074     0xf8    ld a1,48(sp)          ; stack access
    0x84013076     0xfa    ld a2,56(sp)          ; stack access
    0x84013078     0xfc    mv a0,s0
    0x8401307a     0xfe    jal ra,ffffffff84011746 <emptySlot>
    0x8401307e    0x102    li a0,0
    0x84013080    0x104    ld ra,152(sp)         ; stack access
    0x84013082    0x106    ld s0,144(sp)         ; stack access
    0x84013084    0x108    ld s1,136(sp)         ; stack access
    0x84013086    0x10a    ld s2,128(sp)         ; stack access
    0x84013088    0x10c    ld s3,120(sp)         ; stack access
    0x8401308a    0x10e    ld s4,112(sp)         ; stack access
    0x8401308c    0x110    ld s5,104(sp)         ; stack access
    0x8401308e    0x112    ld s6,96(sp)          ; stack access
    0x84013090    0x114    ld s7,88(sp)          ; stack access
    0x84013092    0x116    ld s8,80(sp)          ; stack access
    0x84013094    0x118    ld s9,72(sp)          ; stack access
    0x84013096    0x11a    addi sp,sp,160
    0x84013098    0x11c    ret
    0x8401309a    0x11e    mv a0,s3
    0x8401309c    0x120    j ffffffff84013080 <cteDelete+0x104>
    0x8401309e    0x122    andi s9,a0,-32
    0x840130a2    0x126    andi s7,a0,31
    0x840130a6    0x12a    j ffffffff840130ce <cteDelete+0x152>
    0x840130a8    0x12c    andi s8,a5,127
    0x840130ac    0x130    beq s8,s2,ffffffff8401309e <cteDelete+0x122>
    0x840130b0    0x134    andi a5,a5,63
    0x840130b4    0x138    addi a5,a5,1
    0x840130b6    0x13a    sll s9,s1,a5
    0x840130ba    0x13e    neg s9,s9
    0x840130be    0x142    and s9,s9,a0
    0x840130c2    0x146    sll s7,s5,a5
    0x840130c6    0x14a    not s7,s7
    0x840130ca    0x14e    and s7,s7,a0
    0x840130ce    0x152    slli a0,s7,0x5
    0x840130d2    0x156    addi a0,a0,-32
    0x840130d4    0x158    li a1,0
    0x840130d6    0x15a    add a0,a0,s9
    0x840130d8    0x15c    jal ra,ffffffff84012f7c <cteDelete>
    0x840130dc    0x160    bnez a0,ffffffff84013080 <cteDelete+0x104>
    0x840130de    0x162    ld a5,0(s0)
    0x840130e0    0x164    srli a4,a5,0x3b
    0x840130e4    0x168    beqz a4,ffffffff84012fd6 <cteDelete+0x5a>
    0x840130e8    0x16c    bne a4,s4,ffffffff8401306c <cteDelete+0xf0>
    0x840130ec    0x170    ld a3,8(s0)
    0x840130ee    0x172    andi a2,a5,127
    0x840130f2    0x176    beq a2,s2,ffffffff84013068 <cteDelete+0xec>
    0x840130f6    0x17a    andi a5,a5,63
    0x840130fa    0x17e    addi a5,a5,1
    0x840130fc    0x180    sll a4,s1,a5
    0x84013100    0x184    neg a4,a4
    0x84013104    0x188    and a4,a4,a3
    0x84013106    0x18a    bne s9,a4,ffffffff84012fd6 <cteDelete+0x5a>
    0x8401310a    0x18e    sll a5,s5,a5
    0x8401310e    0x192    not a5,a5
    0x84013112    0x196    and a3,a3,a5
    0x84013114    0x198    bne a3,s7,ffffffff84012fd6 <cteDelete+0x5a>
    0x84013118    0x19c    bne a2,s8,ffffffff84012fd6 <cteDelete+0x5a>
    0x8401311c    0x1a0    addi s7,s7,-1
    0x8401311e    0x1a2    and a5,s7,a5
    0x84013122    0x1a6    or a4,a4,a5
    0x84013124    0x1a8    sd a4,8(s0)
    0x84013126    0x1aa    j ffffffff84012fd6 <cteDelete+0x5a>
    0x84013128    0x1ac    andi a5,a0,-32
    0x8401312c    0x1b0    beq s0,a5,ffffffff8401309a <cteDelete+0x11e>
    0x84013130    0x1b4    andi a0,a0,-32
    0x84013132    0x1b6    j ffffffff84012fd0 <cteDelete+0x54>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
158 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 250 nodes.

Section decodeIRQControlInvocation (256 of 266)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 70 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeIRQControlInvocation`:

    0x84012404     0x0    addi sp,sp,-80
    0x84012406     0x2    sd ra,72(sp)          ; stack access
    0x84012408     0x4    sd s0,64(sp)          ; stack access
    0x8401240a     0x6    sd s1,56(sp)          ; stack access
    0x8401240c     0x8    sd s2,48(sp)          ; stack access
    0x8401240e     0xa    sd s3,40(sp)          ; stack access
    0x84012410     0xc    mv s0,a2
    0x84012412     0xe    li a5,25
    0x84012414    0x10    bne a0,a5,ffffffff840124b8 <decodeIRQControlInvocation+0xb4>
    0x84012418    0x14    li a5,2
    0x8401241a    0x16    bgeu a5,a1,ffffffff8401246a <decodeIRQControlInvocation+0x66>
    0x8401241e    0x1a    auipc a5,0xc
    0x84012422    0x1e    ld a5,-1950(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84012426    0x22    beqz a5,ffffffff8401246a <decodeIRQControlInvocation+0x66>
    0x84012428    0x24    auipc a4,0x1c
    0x8401242c    0x28    ld a4,1648(a4) # ffffffff8402ea98 <ksCurThread>
    0x84012430    0x2c    ld s1,88(a4)
    0x84012432    0x2e    ld s2,96(a4)
    0x84012436    0x32    ld s3,104(a4)
    0x8401243a    0x36    ld a4,0(a5)
    0x8401243c    0x38    sd a4,0(sp)           ; stack access
    0x8401243e    0x3a    ld a5,8(a5)
    0x84012440    0x3c    sd a5,8(sp)           ; stack access
    0x84012442    0x3e    mv a0,s1
    0x84012444    0x40    jal ra,ffffffff84010a36 <Arch_checkIRQ>
    0x84012448    0x44    bnez a0,ffffffff84012476 <decodeIRQControlInvocation+0x72>
    0x8401244a    0x46    slli a4,s1,0x3
    0x8401244e    0x4a    auipc a5,0xc
    0x84012452    0x4e    addi a5,a5,-1974 # ffffffff8401dc98 <intStateIRQTable>
    0x84012456    0x52    add a5,a5,a4
    0x84012458    0x54    ld a5,0(a5)
    0x8401245a    0x56    beqz a5,ffffffff84012484 <decodeIRQControlInvocation+0x80>
    0x8401245c    0x58    li a5,9
    0x8401245e    0x5a    auipc a4,0xc
    0x84012462    0x5e    sd a5,-2022(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84012466    0x62    li a0,3
    0x84012468    0x64    j ffffffff84012476 <decodeIRQControlInvocation+0x72>
    0x8401246a    0x66    li a5,7
    0x8401246c    0x68    auipc a4,0xc
    0x84012470    0x6c    sd a5,-2036(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84012474    0x70    li a0,3
    0x84012476    0x72    ld ra,72(sp)          ; stack access
    0x84012478    0x74    ld s0,64(sp)          ; stack access
    0x8401247a    0x76    ld s1,56(sp)          ; stack access
    0x8401247c    0x78    ld s2,48(sp)          ; stack access
    0x8401247e    0x7a    ld s3,40(sp)          ; stack access
    0x84012480    0x7c    addi sp,sp,80
    0x84012482    0x7e    ret
    0x84012484    0x80    mv a3,s3
    0x84012486    0x82    mv a2,s2
    0x84012488    0x84    ld a0,0(sp)           ; stack access
    0x8401248a    0x86    ld a1,8(sp)           ; stack access
    0x8401248c    0x88    jal ra,ffffffff840111b6 <lookupTargetSlot>
    0x84012490    0x8c    sd a1,24(sp)          ; stack access
    0x84012492    0x8e    bnez a0,ffffffff84012476 <decodeIRQControlInvocation+0x72>
    0x84012494    0x90    mv s2,a1
    0x84012496    0x92    mv a0,a1
    0x84012498    0x94    jal ra,ffffffff840115e6 <ensureEmptySlot>
    0x8401249c    0x98    bnez a0,ffffffff84012476 <decodeIRQControlInvocation+0x72>
    0x8401249e    0x9a    li a1,2
    0x840124a0    0x9c    auipc a0,0x1c
    0x840124a4    0xa0    ld a0,1528(a0) # ffffffff8402ea98 <ksCurThread>
    0x840124a8    0xa4    jal ra,ffffffff840122d8 <setThreadState>
    0x840124ac    0xa8    mv a2,s0
    0x840124ae    0xaa    mv a1,s2
    0x840124b0    0xac    mv a0,s1
    0x840124b2    0xae    jal ra,ffffffff840116fc <invokeIRQControl>
    0x840124b6    0xb2    j ffffffff84012476 <decodeIRQControlInvocation+0x72>
    0x840124b8    0xb4    jal ra,ffffffff840122f4 <Arch_decodeIRQControlInvocation>
    0x840124bc    0xb8    j ffffffff84012476 <decodeIRQControlInvocation+0x72>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
70 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 117 nodes.

Section handleInvocation (257 of 266)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 105 instructions.


Stack analysis
---------------

23 stack accesses found. Annotated code for `handleInvocation`:

    0x840165e2      0x0    addi sp,sp,-128
    0x840165e4      0x2    sd ra,120(sp)         ; stack access
    0x840165e6      0x4    sd s0,112(sp)         ; stack access
    0x840165e8      0x6    sd s1,104(sp)         ; stack access
    0x840165ea      0x8    sd s2,96(sp)          ; stack access
    0x840165ec      0xa    sd s3,88(sp)          ; stack access
    0x840165ee      0xc    sd s4,80(sp)          ; stack access
    0x840165f0      0xe    sd s5,72(sp)          ; stack access
    0x840165f2     0x10    sd s6,64(sp)          ; stack access
    0x840165f4     0x12    sd s7,56(sp)          ; stack access
    0x840165f6     0x14    mv s5,a0
    0x840165f8     0x16    mv s4,a1
    0x840165fa     0x18    auipc s0,0x18
    0x840165fe     0x1c    ld s0,1182(s0) # ffffffff8402ea98 <ksCurThread>
    0x84016602     0x20    ld s1,80(s0)
    0x84016604     0x22    andi a4,s1,127
    0x84016608     0x26    li a5,120
    0x8401660c     0x2a    bgeu a5,a4,ffffffff84016618 <handleInvocation+0x36>
    0x84016610     0x2e    andi s1,s1,-128
    0x84016614     0x32    ori s1,s1,120
    0x84016618     0x36    ld s6,72(s0)
    0x8401661c     0x3a    mv a2,s6
    0x8401661e     0x3c    mv a1,s0
    0x84016620     0x3e    addi a0,sp,16
    0x84016622     0x40    jal ra,ffffffff84011092 <lookupCapAndSlot>
    0x84016626     0x44    ld s7,16(sp)          ; stack access
    0x84016628     0x46    bnez s7,ffffffff84016694 <handleInvocation+0xb2>
    0x8401662c     0x4a    mv a1,s0
    0x8401662e     0x4c    li a0,0
    0x84016630     0x4e    jal ra,ffffffff840103be <lookupIPCBuffer>
    0x84016634     0x52    mv s3,a0
    0x84016636     0x54    mv a2,s1
    0x84016638     0x56    mv a1,a0
    0x8401663a     0x58    mv a0,s0
    0x8401663c     0x5a    jal ra,ffffffff84013ade <lookupExtraCaps>
    0x84016640     0x5e    mv s2,a0
    0x84016642     0x60    bnez a0,ffffffff840166b4 <handleInvocation+0xd2>
    0x84016644     0x62    andi a1,s1,127
    0x84016648     0x66    li a5,4
    0x8401664a     0x68    bltu a5,a1,ffffffff840166c4 <handleInvocation+0xe2>
    0x8401664e     0x6c    sd s3,0(sp)           ; stack access
    0x84016650     0x6e    mv a7,s5
    0x84016652     0x70    mv a6,s4
    0x84016654     0x72    ld a4,24(sp)          ; stack access
    0x84016656     0x74    ld a5,32(sp)          ; stack access
    0x84016658     0x76    ld a3,40(sp)          ; stack access
    0x8401665a     0x78    mv a2,s6
    0x8401665c     0x7a    srli a0,s1,0xc
    0x84016660     0x7e    jal ra,ffffffff8401642a <decodeInvocation>
    0x84016664     0x82    li a5,4
    0x84016666     0x84    beq a0,a5,ffffffff840166f4 <handleInvocation+0x112>
    0x8401666a     0x88    li a5,3
    0x8401666c     0x8a    beq a0,a5,ffffffff840166cc <handleInvocation+0xea>
    0x84016670     0x8e    ld a5,280(s0)
    0x84016674     0x92    andi a5,a5,15
    0x84016676     0x94    li a4,2
    0x84016678     0x96    beq a5,a4,ffffffff840166dc <handleInvocation+0xfa>
    0x8401667c     0x9a    mv a0,s2
    0x8401667e     0x9c    ld ra,120(sp)         ; stack access
    0x84016680     0x9e    ld s0,112(sp)         ; stack access
    0x84016682     0xa0    ld s1,104(sp)         ; stack access
    0x84016684     0xa2    ld s2,96(sp)          ; stack access
    0x84016686     0xa4    ld s3,88(sp)          ; stack access
    0x84016688     0xa6    ld s4,80(sp)          ; stack access
    0x8401668a     0xa8    ld s5,72(sp)          ; stack access
    0x8401668c     0xaa    ld s6,64(sp)          ; stack access
    0x8401668e     0xac    ld s7,56(sp)          ; stack access
    0x84016690     0xae    addi sp,sp,128
    0x84016692     0xb0    ret
    0x84016694     0xb2    auipc a5,0x6
    0x84016698     0xb6    addi a5,a5,364 # ffffffff8401c800 <current_fault>
    0x8401669c     0xba    li a4,1
    0x8401669e     0xbc    sd a4,0(a5)
    0x840166a0     0xbe    sd s6,8(a5)
    0x840166a4     0xc2    mv s2,s4
    0x840166a6     0xc4    beqz s4,ffffffff8401667c <handleInvocation+0x9a>
    0x840166aa     0xc8    mv a0,s0
    0x840166ac     0xca    jal ra,ffffffff840140f4 <handleFault>
    0x840166b0     0xce    li s2,0
    0x840166b2     0xd0    j ffffffff8401667c <handleInvocation+0x9a>
    0x840166b4     0xd2    mv s2,s4
    0x840166b6     0xd4    beqz s4,ffffffff8401667c <handleInvocation+0x9a>
    0x840166ba     0xd8    mv a0,s0
    0x840166bc     0xda    jal ra,ffffffff840140f4 <handleFault>
    0x840166c0     0xde    mv s2,s7
    0x840166c2     0xe0    j ffffffff8401667c <handleInvocation+0x9a>
    0x840166c4     0xe2    bnez s3,ffffffff8401664e <handleInvocation+0x6c>
    0x840166c8     0xe6    li a1,4
    0x840166ca     0xe8    j ffffffff8401664e <handleInvocation+0x6c>
    0x840166cc     0xea    bnez s5,ffffffff840166d4 <handleInvocation+0xf2>
    0x840166d0     0xee    mv s2,s5
    0x840166d2     0xf0    j ffffffff8401667c <handleInvocation+0x9a>
    0x840166d4     0xf2    mv a0,s0
    0x840166d6     0xf4    jal ra,ffffffff840155e2 <replyFromKernel_error>
    0x840166da     0xf8    j ffffffff8401667c <handleInvocation+0x9a>
    0x840166dc     0xfa    bnez s5,ffffffff840166ea <handleInvocation+0x108>
    0x840166e0     0xfe    li a1,1
    0x840166e2    0x100    mv a0,s0
    0x840166e4    0x102    jal ra,ffffffff840122d8 <setThreadState>
    0x840166e8    0x106    j ffffffff8401667c <handleInvocation+0x9a>
    0x840166ea    0x108    sd zero,72(s0)
    0x840166ee    0x10c    sd zero,80(s0)
    0x840166f2    0x110    j ffffffff840166e0 <handleInvocation+0xfe>
    0x840166f4    0x112    mv s2,a0
    0x840166f6    0x114    j ffffffff8401667c <handleInvocation+0x9a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
105 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 169 nodes.

Section decodeTCBConfigure (258 of 266)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 182 instructions.


Stack analysis
---------------

72 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x8401472e      0x0    addi sp,sp,-272
    0x84014730      0x2    sd ra,264(sp)         ; stack access
    0x84014732      0x4    sd s0,256(sp)         ; stack access
    0x84014734      0x6    sd s1,248(sp)         ; stack access
    0x84014736      0x8    sd s2,240(sp)         ; stack access
    0x84014738      0xa    sd s3,232(sp)         ; stack access
    0x8401473a      0xc    sd s4,224(sp)         ; stack access
    0x8401473c      0xe    sd s5,216(sp)         ; stack access
    0x8401473e     0x10    sd s6,208(sp)         ; stack access
    0x84014740     0x12    sd s7,200(sp)         ; stack access
    0x84014742     0x14    sd s8,192(sp)         ; stack access
    0x84014744     0x16    sd s9,184(sp)         ; stack access
    0x84014746     0x18    sd s10,176(sp)        ; stack access
    0x84014748     0x1a    sd s11,168(sp)        ; stack access
    0x8401474a     0x1c    sd a0,64(sp)          ; stack access
    0x8401474c     0x1e    sd a1,72(sp)          ; stack access
    0x8401474e     0x20    li a5,3
    0x84014750     0x22    bgeu a5,a2,ffffffff84014894 <decodeTCBConfigure+0x166>
    0x84014754     0x26    mv s0,a3
    0x84014756     0x28    auipc s1,0x9
    0x8401475a     0x2c    ld s1,1322(s1) # ffffffff8401dc80 <current_extra_caps>
    0x8401475e     0x30    beqz s1,ffffffff84014894 <decodeTCBConfigure+0x166>
    0x84014762     0x34    auipc s3,0x9
    0x84014766     0x38    ld s3,1318(s3) # ffffffff8401dc88 <current_extra_caps+0x8>
    0x8401476a     0x3c    beqz s3,ffffffff84014894 <decodeTCBConfigure+0x166>
    0x8401476e     0x40    auipc s2,0x9
    0x84014772     0x44    ld s2,1314(s2) # ffffffff8401dc90 <current_extra_caps+0x10>
    0x84014776     0x48    beqz s2,ffffffff84014894 <decodeTCBConfigure+0x166>
    0x8401477a     0x4c    auipc a5,0x1a
    0x8401477e     0x50    ld a5,798(a5) # ffffffff8402ea98 <ksCurThread>
    0x84014782     0x54    ld s8,88(a5)
    0x84014786     0x58    ld s6,96(a5)
    0x8401478a     0x5c    ld s7,104(a5)
    0x8401478e     0x60    ld s5,112(a5)
    0x84014792     0x64    ld s4,0(s1)
    0x84014796     0x68    sd s4,128(sp)         ; stack access
    0x84014798     0x6a    ld a5,8(s1)
    0x8401479a     0x6c    sd a5,136(sp)         ; stack access
    0x8401479c     0x6e    mv s9,s4
    0x8401479e     0x70    ld a5,0(s3)
    0x840147a2     0x74    sd a5,112(sp)         ; stack access
    0x840147a4     0x76    ld a5,8(s3)
    0x840147a8     0x7a    sd a5,120(sp)         ; stack access
    0x840147aa     0x7c    ld a5,0(s2)
    0x840147ae     0x80    sd a5,144(sp)         ; stack access
    0x840147b0     0x82    ld a5,8(s2)
    0x840147b4     0x86    sd a5,152(sp)         ; stack access
    0x840147b6     0x88    bnez s5,ffffffff840148be <decodeTCBConfigure+0x190>
    0x840147ba     0x8c    li s2,0
    0x840147bc     0x8e    ld a5,64(sp)          ; stack access
    0x840147be     0x90    slli s10,a5,0x19
    0x840147c2     0x94    srli s10,s10,0x19
    0x840147c6     0x98    slli a4,a5,0x19
    0x840147ca     0x9c    bgez a4,ffffffff840147d6 <decodeTCBConfigure+0xa8>
    0x840147ce     0xa0    li a5,-1
    0x840147d0     0xa2    slli a5,a5,0x27
    0x840147d2     0xa4    or s10,s10,a5
    0x840147d6     0xa8    andi s11,s10,-1024
    0x840147da     0xac    mv a0,s11
    0x840147dc     0xae    jal ra,ffffffff84011ed8 <slotCapLongRunningDelete>
    0x840147e0     0xb2    bnez a0,ffffffff840148e2 <decodeTCBConfigure+0x1b4>
    0x840147e4     0xb6    addi a0,s11,32 # 1020 <KERNEL_OFFSET-0xfffffffeffffefe0>
    0x840147e8     0xba    jal ra,ffffffff84011ed8 <slotCapLongRunningDelete>
    0x840147ec     0xbe    bnez a0,ffffffff840148e2 <decodeTCBConfigure+0x1b4>
    0x840147f0     0xc2    beqz s6,ffffffff84014804 <decodeTCBConfigure+0xd6>
    0x840147f4     0xc6    mv a2,s4
    0x840147f6     0xc8    ld a3,136(sp)         ; stack access
    0x840147f8     0xca    mv a1,s6
    0x840147fa     0xcc    li a0,0
    0x840147fc     0xce    jal ra,ffffffff84011f14 <updateCapData>
    0x84014800     0xd2    sd a1,136(sp)         ; stack access
    0x84014802     0xd4    mv s9,a0
    0x84014804     0xd6    mv a2,s9
    0x84014806     0xd8    ld a3,136(sp)         ; stack access
    0x84014808     0xda    mv a1,s1
    0x8401480a     0xdc    addi a0,sp,88
    0x8401480c     0xde    jal ra,ffffffff84011dae <deriveCap>
    0x84014810     0xe2    ld a0,88(sp)          ; stack access
    0x84014812     0xe4    bnez a0,ffffffff840148a0 <decodeTCBConfigure+0x172>
    0x84014814     0xe6    ld s4,96(sp)          ; stack access
    0x84014816     0xe8    ld a5,104(sp)         ; stack access
    0x84014818     0xea    sd a5,136(sp)         ; stack access
    0x8401481a     0xec    srli a4,s4,0x3b
    0x8401481e     0xf0    li a5,10
    0x84014820     0xf2    bne a4,a5,ffffffff840148f0 <decodeTCBConfigure+0x1c2>
    0x84014824     0xf6    beqz s7,ffffffff84014838 <decodeTCBConfigure+0x10a>
    0x84014828     0xfa    ld a2,112(sp)         ; stack access
    0x8401482a     0xfc    ld a3,120(sp)         ; stack access
    0x8401482c     0xfe    mv a1,s7
    0x8401482e    0x100    li a0,0
    0x84014830    0x102    jal ra,ffffffff84011f14 <updateCapData>
    0x84014834    0x106    sd a0,112(sp)         ; stack access
    0x84014836    0x108    sd a1,120(sp)         ; stack access
    0x84014838    0x10a    ld a2,112(sp)         ; stack access
    0x8401483a    0x10c    ld a3,120(sp)         ; stack access
    0x8401483c    0x10e    mv a1,s3
    0x8401483e    0x110    addi a0,sp,88
    0x84014840    0x112    jal ra,ffffffff84011dae <deriveCap>
    0x84014844    0x116    ld a0,88(sp)          ; stack access
    0x84014846    0x118    bnez a0,ffffffff840148a0 <decodeTCBConfigure+0x172>
    0x84014848    0x11a    ld a0,96(sp)          ; stack access
    0x8401484a    0x11c    sd a0,112(sp)         ; stack access
    0x8401484c    0x11e    ld a1,104(sp)         ; stack access
    0x8401484e    0x120    sd a1,120(sp)         ; stack access
    0x84014850    0x122    jal ra,ffffffff8401090a <isValidVTableRoot>
    0x84014854    0x126    beqz a0,ffffffff840148fe <decodeTCBConfigure+0x1d0>
    0x84014856    0x128    li a1,2
    0x84014858    0x12a    auipc a0,0x1a
    0x8401485c    0x12e    ld a0,576(a0) # ffffffff8402ea98 <ksCurThread>
    0x84014860    0x132    jal ra,ffffffff840122d8 <setThreadState>
    0x84014864    0x136    li a5,6
    0x84014866    0x138    sd a5,56(sp)          ; stack access
    0x84014868    0x13a    sd s2,48(sp)          ; stack access
    0x8401486a    0x13c    ld a5,144(sp)         ; stack access
    0x8401486c    0x13e    sd a5,32(sp)          ; stack access
    0x8401486e    0x140    ld a5,152(sp)         ; stack access
    0x84014870    0x142    sd a5,40(sp)          ; stack access
    0x84014872    0x144    sd s5,24(sp)          ; stack access
    0x84014874    0x146    sd s3,16(sp)          ; stack access
    0x84014876    0x148    ld a5,112(sp)         ; stack access
    0x84014878    0x14a    sd a5,0(sp)           ; stack access
    0x8401487a    0x14c    ld a5,120(sp)         ; stack access
    0x8401487c    0x14e    sd a5,8(sp)           ; stack access
    0x8401487e    0x150    mv a7,s1
    0x84014880    0x152    mv a5,s4
    0x84014882    0x154    ld a6,136(sp)         ; stack access
    0x84014884    0x156    li a4,0
    0x84014886    0x158    li a3,0
    0x84014888    0x15a    mv a2,s8
    0x8401488a    0x15c    mv a1,s0
    0x8401488c    0x15e    mv a0,s10
    0x8401488e    0x160    jal ra,ffffffff840145da <invokeTCB_ThreadControl>
    0x84014892    0x164    j ffffffff840148a0 <decodeTCBConfigure+0x172>
    0x84014894    0x166    li a5,7
    0x84014896    0x168    auipc a4,0x9
    0x8401489a    0x16c    sd a5,994(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x8401489e    0x170    li a0,3
    0x840148a0    0x172    ld ra,264(sp)         ; stack access
    0x840148a2    0x174    ld s0,256(sp)         ; stack access
    0x840148a4    0x176    ld s1,248(sp)         ; stack access
    0x840148a6    0x178    ld s2,240(sp)         ; stack access
    0x840148a8    0x17a    ld s3,232(sp)         ; stack access
    0x840148aa    0x17c    ld s4,224(sp)         ; stack access
    0x840148ac    0x17e    ld s5,216(sp)         ; stack access
    0x840148ae    0x180    ld s6,208(sp)         ; stack access
    0x840148b0    0x182    ld s7,200(sp)         ; stack access
    0x840148b2    0x184    ld s8,192(sp)         ; stack access
    0x840148b4    0x186    ld s9,184(sp)         ; stack access
    0x840148b6    0x188    ld s10,176(sp)        ; stack access
    0x840148b8    0x18a    ld s11,168(sp)        ; stack access
    0x840148ba    0x18c    addi sp,sp,272
    0x840148bc    0x18e    ret
    0x840148be    0x190    ld a2,144(sp)         ; stack access
    0x840148c0    0x192    mv a3,a5
    0x840148c2    0x194    mv a1,s2
    0x840148c4    0x196    addi a0,sp,88
    0x840148c6    0x198    jal ra,ffffffff84011dae <deriveCap>
    0x840148ca    0x19c    ld a0,88(sp)          ; stack access
    0x840148cc    0x19e    bnez a0,ffffffff840148a0 <decodeTCBConfigure+0x172>
    0x840148ce    0x1a0    ld a1,96(sp)          ; stack access
    0x840148d0    0x1a2    sd a1,144(sp)         ; stack access
    0x840148d2    0x1a4    ld a2,104(sp)         ; stack access
    0x840148d4    0x1a6    sd a2,152(sp)         ; stack access
    0x840148d6    0x1a8    mv a0,s5
    0x840148d8    0x1aa    jal ra,ffffffff84010920 <checkValidIPCBuffer>
    0x840148dc    0x1ae    beqz a0,ffffffff840147bc <decodeTCBConfigure+0x8e>
    0x840148e0    0x1b2    j ffffffff840148a0 <decodeTCBConfigure+0x172>
    0x840148e2    0x1b4    li a5,3
    0x840148e4    0x1b6    auipc a4,0x9
    0x840148e8    0x1ba    sd a5,916(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840148ec    0x1be    li a0,3
    0x840148ee    0x1c0    j ffffffff840148a0 <decodeTCBConfigure+0x172>
    0x840148f0    0x1c2    li a5,3
    0x840148f2    0x1c4    auipc a4,0x9
    0x840148f6    0x1c8    sd a5,902(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840148fa    0x1cc    li a0,3
    0x840148fc    0x1ce    j ffffffff840148a0 <decodeTCBConfigure+0x172>
    0x840148fe    0x1d0    li a5,3
    0x84014900    0x1d2    auipc a4,0x9
    0x84014904    0x1d6    sd a5,888(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84014908    0x1da    li a0,3
    0x8401490a    0x1dc    j ffffffff840148a0 <decodeTCBConfigure+0x172>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
182 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 317 nodes.

Section receiveIPC (259 of 266)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 153 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `receiveIPC`:

    0x8401420a      0x0    addi sp,sp,-96
    0x8401420c      0x2    sd ra,88(sp)          ; stack access
    0x8401420e      0x4    sd s0,80(sp)          ; stack access
    0x84014210      0x6    sd s1,72(sp)          ; stack access
    0x84014212      0x8    sd s2,64(sp)          ; stack access
    0x84014214      0xa    sd s3,56(sp)          ; stack access
    0x84014216      0xc    sd s4,48(sp)          ; stack access
    0x84014218      0xe    sd s5,40(sp)          ; stack access
    0x8401421a     0x10    mv s2,a0
    0x8401421c     0x12    sd a1,0(sp)           ; stack access
    0x8401421e     0x14    sd a2,8(sp)           ; stack access
    0x84014220     0x16    mv s0,a1
    0x84014222     0x18    slli a5,a1,0x19
    0x84014226     0x1c    srli a5,a5,0x19
    0x84014228     0x1e    slli a4,a1,0x19
    0x8401422c     0x22    bgez a4,ffffffff84014236 <receiveIPC+0x2c>
    0x84014230     0x26    li a4,-1
    0x84014232     0x28    slli a4,a4,0x27
    0x84014234     0x2a    or a5,a5,a4
    0x84014236     0x2c    mv s1,a5
    0x84014238     0x2e    ld a0,304(s2)
    0x8401423c     0x32    beqz a0,ffffffff84014248 <receiveIPC+0x3e>
    0x8401423e     0x34    ld a4,0(a0)
    0x84014240     0x36    andi a4,a4,3
    0x84014242     0x38    li a2,2
    0x84014244     0x3a    beq a4,a2,ffffffff8401426a <receiveIPC+0x60>
    0x84014248     0x3e    ld a4,0(s1)
    0x8401424a     0x40    andi a1,a4,3
    0x8401424e     0x44    li a2,1
    0x84014250     0x46    beq a1,a2,ffffffff840142f8 <receiveIPC+0xee>
    0x84014254     0x4a    andi a4,a4,1
    0x84014256     0x4c    beqz a4,ffffffff84014272 <receiveIPC+0x68>
    0x84014258     0x4e    ld ra,88(sp)          ; stack access
    0x8401425a     0x50    ld s0,80(sp)          ; stack access
    0x8401425c     0x52    ld s1,72(sp)          ; stack access
    0x8401425e     0x54    ld s2,64(sp)          ; stack access
    0x84014260     0x56    ld s3,56(sp)          ; stack access
    0x84014262     0x58    ld s4,48(sp)          ; stack access
    0x84014264     0x5a    ld s5,40(sp)          ; stack access
    0x84014266     0x5c    addi sp,sp,96
    0x84014268     0x5e    ret
    0x8401426a     0x60    mv a1,s2
    0x8401426c     0x62    jal ra,ffffffff840117c6 <completeSignal>
    0x84014270     0x66    j ffffffff84014258 <receiveIPC+0x4e>
    0x84014272     0x68    beqz a3,ffffffff840142f2 <receiveIPC+0xe8>
    0x84014274     0x6a    ld a4,280(s2)
    0x84014278     0x6e    srli a4,a4,0x27
    0x8401427a     0x70    slli a4,a4,0x27
    0x8401427c     0x72    lui a3,0xe0000
    0x84014280     0x76    srli a3,a3,0x19
    0x84014282     0x78    and a5,a5,a3
    0x84014284     0x7a    or a5,a5,a4
    0x84014286     0x7c    ori a5,a5,3
    0x8401428a     0x80    sd a5,280(s2)
    0x8401428e     0x84    srli s0,s0,0x36
    0x84014290     0x86    andi s0,s0,8
    0x84014292     0x88    ld a5,288(s2)
    0x84014296     0x8c    andi a5,a5,-9
    0x84014298     0x8e    or s0,s0,a5
    0x8401429a     0x90    sd s0,288(s2)
    0x8401429e     0x94    mv a0,s2
    0x840142a0     0x96    jal ra,ffffffff840122a4 <scheduleTCB>
    0x840142a4     0x9a    ld a3,8(s1)
    0x840142a6     0x9c    ld a4,0(s1)
    0x840142a8     0x9e    lui a5,0xf8000
    0x840142ac     0xa2    srli a5,a5,0x19
    0x840142ae     0xa4    and a5,a5,a4
    0x840142b0     0xa6    slli a2,a4,0x19
    0x840142b4     0xaa    bgez a2,ffffffff840142be <receiveIPC+0xb4>
    0x840142b8     0xae    li a4,-1
    0x840142ba     0xb0    slli a4,a4,0x27
    0x840142bc     0xb2    or a5,a5,a4
    0x840142be     0xb4    mv a2,a5
    0x840142c0     0xb6    mv a4,s2
    0x840142c2     0xb8    beqz a3,ffffffff840142ca <receiveIPC+0xc0>
    0x840142c4     0xba    mv a4,a3
    0x840142c6     0xbc    sd s2,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x840142ca     0xc0    sd a2,416(s2)
    0x840142ce     0xc4    sd zero,408(s2)
    0x840142d2     0xc8    ld a5,0(s1)
    0x840142d4     0xca    sd a4,8(s1)
    0x840142d6     0xcc    lui a0,0xf8000
    0x840142da     0xd0    srli a0,a0,0x19
    0x840142dc     0xd2    and s2,s2,a0
    0x840142e0     0xd6    srli a5,a5,0x27
    0x840142e2     0xd8    slli a5,a5,0x27
    0x840142e4     0xda    or s2,s2,a5
    0x840142e8     0xde    ori s2,s2,2
    0x840142ec     0xe2    sd s2,0(s1)
    0x840142f0     0xe6    j ffffffff84014258 <receiveIPC+0x4e>
    0x840142f2     0xe8    sd zero,72(s2)
    0x840142f6     0xec    j ffffffff84014258 <receiveIPC+0x4e>
    0x840142f8     0xee    ld s3,8(s1)
    0x840142fc     0xf2    lui a2,0xf8000
    0x84014300     0xf6    srli a2,a2,0x19
    0x84014302     0xf8    and a2,a2,a4
    0x84014304     0xfa    slli a5,a4,0x19
    0x84014308     0xfe    bgez a5,ffffffff84014312 <receiveIPC+0x108>
    0x8401430c    0x102    li a5,-1
    0x8401430e    0x104    slli a5,a5,0x27
    0x84014310    0x106    or a2,a2,a5
    0x84014312    0x108    mv a1,s3
    0x84014314    0x10a    mv a0,s3
    0x84014316    0x10c    jal ra,ffffffff84012b00 <tcbEPDequeue>
    0x8401431a    0x110    sd a0,16(sp)          ; stack access
    0x8401431c    0x112    sd a1,24(sp)          ; stack access
    0x8401431e    0x114    sd a0,8(s1)
    0x84014320    0x116    ld a5,0(s1)
    0x84014322    0x118    li a4,-1
    0x84014324    0x11a    slli a4,a4,0x27
    0x84014326    0x11c    addi a4,a4,3
    0x84014328    0x11e    and a5,a5,a4
    0x8401432a    0x120    lui a4,0xf8000
    0x8401432e    0x124    srli a4,a4,0x19
    0x84014330    0x126    and a1,a1,a4
    0x84014332    0x128    or a1,a1,a5
    0x84014334    0x12a    beqz a0,ffffffff8401437c <receiveIPC+0x172>
    0x84014336    0x12c    sd a1,0(s1)
    0x84014338    0x12e    ld s4,288(s3)
    0x8401433c    0x132    srli s5,s4,0x3
    0x84014340    0x136    mv a4,s2
    0x84014342    0x138    andi a3,s5,1
    0x84014346    0x13c    ld a2,296(s3)
    0x8401434a    0x140    mv a1,s1
    0x8401434c    0x142    mv a0,s3
    0x8401434e    0x144    jal ra,ffffffff84013d60 <doIPCTransfer>
    0x84014352    0x148    ld a5,288(s3)
    0x84014356    0x14c    srli a5,a5,0x1
    0x84014358    0x14e    andi a5,a5,1
    0x8401435a    0x150    beqz a5,ffffffff8401438c <receiveIPC+0x182>
    0x8401435c    0x152    srli s4,s4,0x2
    0x84014360    0x156    or s4,s4,s5
    0x84014364    0x15a    andi s4,s4,1
    0x84014368    0x15e    beqz s4,ffffffff84014382 <receiveIPC+0x178>
    0x8401436c    0x162    srli a2,s0,0x39
    0x84014370    0x166    andi a2,a2,1
    0x84014372    0x168    mv a1,s2
    0x84014374    0x16a    mv a0,s3
    0x84014376    0x16c    jal ra,ffffffff84013a86 <setupCallerCap>
    0x8401437a    0x170    j ffffffff84014258 <receiveIPC+0x4e>
    0x8401437c    0x172    andi a1,a1,-4
    0x8401437e    0x174    sd a1,0(s1)
    0x84014380    0x176    j ffffffff84014338 <receiveIPC+0x12e>
    0x84014382    0x178    li a1,0
    0x84014384    0x17a    mv a0,s3
    0x84014386    0x17c    jal ra,ffffffff840122d8 <setThreadState>
    0x8401438a    0x180    j ffffffff84014258 <receiveIPC+0x4e>
    0x8401438c    0x182    li a1,1
    0x8401438e    0x184    mv a0,s3
    0x84014390    0x186    jal ra,ffffffff840122d8 <setThreadState>
    0x84014394    0x18a    mv a0,s3
    0x84014396    0x18c    jal ra,ffffffff840125a2 <possibleSwitchTo>
    0x8401439a    0x190    j ffffffff84014258 <receiveIPC+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
153 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 228 nodes.

Section finaliseCap (260 of 266)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 149 instructions.

XOR.....
RVC_TFFFTT___FT___FT..

Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
31 stack accesses found. Annotated code for `finaliseCap`:

    0x84012dc6      0x0    addi sp,sp,-48
    0x84012dc8      0x2    sd ra,40(sp)          ; stack access
    0x84012dca      0x4    sd s0,32(sp)          ; stack access
    0x84012dcc      0x6    sd s1,24(sp)          ; stack access
    0x84012dce      0x8    sd s2,16(sp)          ; stack access
    0x84012dd0      0xa    mv s0,a0
    0x84012dd2      0xc    sd a1,0(sp)           ; stack access
    0x84012dd4      0xe    sd a2,8(sp)           ; stack access
    0x84012dd6     0x10    mv s1,a1
    0x84012dd8     0x12    slli a5,a1,0x4
    0x84012ddc     0x16    bltz a5,ffffffff84012dfc <finaliseCap+0x36>
    0x84012de0     0x1a    srli a1,a1,0x3b
    0x84012de2     0x1c    li a5,20
    0x84012de4     0x1e    bltu a5,a1,ffffffff84012e84 <finaliseCap+0xbe>
    0x84012de8     0x22    slli a2,a1,0x2
    0x84012dec     0x26    auipc a0,0x5
    0x84012df0     0x2a    addi a0,a0,-1420 # ffffffff84017860 <ksDomScheduleLength+0x7a8>
    0x84012df4     0x2e    add a2,a2,a0
    0x84012df6     0x30    lw a5,0(a2)
    0x84012df8     0x32    add a5,a5,a0
    0x84012dfa     0x34    jr a5
    0x84012dfc     0x36    jal ra,ffffffff84010b16 <Arch_finaliseCap>
    0x84012e00     0x3a    mv a0,s0
    0x84012e02     0x3c    ld ra,40(sp)          ; stack access
    0x84012e04     0x3e    ld s0,32(sp)          ; stack access
    0x84012e06     0x40    ld s1,24(sp)          ; stack access
    0x84012e08     0x42    ld s2,16(sp)          ; stack access
    0x84012e0a     0x44    addi sp,sp,48
    0x84012e0c     0x46    ret
    0x84012e0e     0x48    beqz a3,ffffffff84012e28 <finaliseCap+0x62>
    0x84012e10     0x4a    slli a0,s1,0x19
    0x84012e14     0x4e    srli a0,a0,0x19
    0x84012e16     0x50    slli a5,s1,0x19
    0x84012e1a     0x54    bgez a5,ffffffff84012e24 <finaliseCap+0x5e>
    0x84012e1e     0x58    li a5,-1
    0x84012e20     0x5a    slli a5,a5,0x27
    0x84012e22     0x5c    or a0,a0,a5
    0x84012e24     0x5e    jal ra,ffffffff840125e6 <cancelAllIPC>
    0x84012e28     0x62    sd zero,0(s0)
    0x84012e2c     0x66    sd zero,8(s0)
    0x84012e30     0x6a    sd zero,16(s0)
    0x84012e34     0x6e    sd zero,24(s0)
    0x84012e38     0x72    j ffffffff84012e00 <finaliseCap+0x3a>
    0x84012e3a     0x74    beqz a3,ffffffff84012e60 <finaliseCap+0x9a>
    0x84012e3c     0x76    slli s2,s1,0x19
    0x84012e40     0x7a    srli s2,s2,0x19
    0x84012e44     0x7e    slli a5,s1,0x19
    0x84012e48     0x82    bgez a5,ffffffff84012e54 <finaliseCap+0x8e>
    0x84012e4c     0x86    li a5,-1
    0x84012e4e     0x88    slli a5,a5,0x27
    0x84012e50     0x8a    or s2,s2,a5
    0x84012e54     0x8e    mv a0,s2
    0x84012e56     0x90    jal ra,ffffffff840117e6 <unbindMaybeNotification>
    0x84012e5a     0x94    mv a0,s2
    0x84012e5c     0x96    jal ra,ffffffff84012624 <cancelAllSignals>
    0x84012e60     0x9a    sd zero,0(s0)
    0x84012e64     0x9e    sd zero,8(s0)
    0x84012e68     0xa2    sd zero,16(s0)
    0x84012e6c     0xa6    sd zero,24(s0)
    0x84012e70     0xaa    j ffffffff84012e00 <finaliseCap+0x3a>
    0x84012e72     0xac    sd zero,0(s0)
    0x84012e76     0xb0    sd zero,8(s0)
    0x84012e7a     0xb4    sd zero,16(s0)
    0x84012e7e     0xb8    sd zero,24(s0)
    0x84012e82     0xbc    j ffffffff84012e00 <finaliseCap+0x3a>
    0x84012e84     0xbe    bnez a4,ffffffff84012ee2 <finaliseCap+0x11c>
    0x84012e86     0xc0    ld s2,8(sp)           ; stack access
    0x84012e88     0xc2    li a5,16
    0x84012e8a     0xc4    beq a1,a5,ffffffff84012f4e <finaliseCap+0x188>
    0x84012e8e     0xc8    bltu a5,a1,ffffffff84012ee6 <finaliseCap+0x120>
    0x84012e92     0xcc    li a5,10
    0x84012e94     0xce    beq a1,a5,ffffffff84012efc <finaliseCap+0x136>
    0x84012e98     0xd2    li a5,12
    0x84012e9a     0xd4    bne a1,a5,ffffffff84012f50 <finaliseCap+0x18a>
    0x84012e9e     0xd8    beqz a3,ffffffff84012f50 <finaliseCap+0x18a>
    0x84012ea0     0xda    slli s2,s1,0x19
    0x84012ea4     0xde    srli s2,s2,0x19
    0x84012ea8     0xe2    slli a5,s1,0x19
    0x84012eac     0xe6    bgez a5,ffffffff84012eb8 <finaliseCap+0xf2>
    0x84012eb0     0xea    li a5,-1
    0x84012eb2     0xec    slli a5,a5,0x27
    0x84012eb4     0xee    or s2,s2,a5
    0x84012eb8     0xf2    mv a0,s2
    0x84012eba     0xf4    jal ra,ffffffff8401180c <unbindNotification>
    0x84012ebe     0xf8    mv a0,s2
    0x84012ec0     0xfa    jal ra,ffffffff84012d8e <suspend>
    0x84012ec4     0xfe    li a5,-7
    0x84012ec6    0x100    slli a5,a5,0x3c
    0x84012ec8    0x102    addi a5,a5,64 # ffffffffe0000040 <ki_end+0x5bfd1040>
    0x84012ecc    0x106    sd a5,0(s0)           ; stack access
    0x84012ece    0x108    andi a5,s2,-1024
    0x84012ed2    0x10c    xori a5,a5,5
    0x84012ed6    0x110    sd a5,8(s0)           ; stack access
    0x84012ed8    0x112    sd zero,16(s0)        ; stack access
    0x84012edc    0x116    sd zero,24(s0)        ; stack access
    0x84012ee0    0x11a    j ffffffff84012e00 <finaliseCap+0x3a>
    0x84012ee2    0x11c    jal ra,ffffffff84010224 <halt>
    0x84012ee6    0x120    li a5,18
    0x84012ee8    0x122    bne a1,a5,ffffffff84012f50 <finaliseCap+0x18a>
    0x84012eec    0x126    sd s1,0(s0)           ; stack access
    0x84012eee    0x128    sd s2,8(s0)           ; stack access
    0x84012ef2    0x12c    sd zero,16(s0)        ; stack access
    0x84012ef6    0x130    sd zero,24(s0)        ; stack access
    0x84012efa    0x134    j ffffffff84012e00 <finaliseCap+0x3a>
    0x84012efc    0x136    beqz a3,ffffffff84012f50 <finaliseCap+0x18a>
    0x84012efe    0x138    srli a3,s1,0x2f
    0x84012f02    0x13c    andi a0,a3,63
    0x84012f06    0x140    mv a3,a0
    0x84012f08    0x142    li a2,1
    0x84012f0a    0x144    sll a1,a2,a0
    0x84012f0e    0x148    slli s1,s1,0x1
    0x84012f10    0x14a    lui a5,0xfc000
    0x84012f14    0x14e    srli a5,a5,0x19
    0x84012f16    0x150    and a4,s1,a5
    0x84012f1a    0x154    slli a2,a2,0x26
    0x84012f1c    0x156    and s1,s1,a2
    0x84012f1e    0x158    beqz s1,ffffffff84012f26 <finaliseCap+0x160>
    0x84012f20    0x15a    li a5,-1
    0x84012f22    0x15c    slli a5,a5,0x27
    0x84012f24    0x15e    or a4,a4,a5
    0x84012f26    0x160    li a5,-7
    0x84012f28    0x162    slli a5,a5,0x3c
    0x84012f2a    0x164    or a5,a5,a0
    0x84012f2c    0x166    sd a5,0(s0)           ; stack access
    0x84012f2e    0x168    addiw a3,a3,1
    0x84012f30    0x16a    li a5,-1
    0x84012f32    0x16c    sll a5,a5,a3
    0x84012f36    0x170    not a5,a5
    0x84012f3a    0x174    xor a3,a1,a4
    0x84012f3e    0x178    and a5,a5,a3
    0x84012f40    0x17a    xor a5,a5,a4
    0x84012f42    0x17c    sd a5,8(s0)           ; stack access
    0x84012f44    0x17e    sd zero,16(s0)        ; stack access
    0x84012f48    0x182    sd zero,24(s0)        ; stack access
    0x84012f4c    0x186    j ffffffff84012e00 <finaliseCap+0x3a>
    0x84012f4e    0x188    bnez a3,ffffffff84012f62 <finaliseCap+0x19c>
    0x84012f50    0x18a    sd zero,0(s0)         ; stack access
    0x84012f54    0x18e    sd zero,8(s0)         ; stack access
    0x84012f58    0x192    sd zero,16(s0)        ; stack access
    0x84012f5c    0x196    sd zero,24(s0)        ; stack access
    0x84012f60    0x19a    j ffffffff84012e00 <finaliseCap+0x3a>
    0x84012f62    0x19c    slli a0,s2,0x34
    0x84012f66    0x1a0    srli a0,a0,0x34
    0x84012f68    0x1a2    jal ra,ffffffff840137aa <deletingIRQHandler>
    0x84012f6c    0x1a6    sd zero,0(s0)         ; stack access
    0x84012f70    0x1aa    sd zero,8(s0)         ; stack access
    0x84012f74    0x1ae    sd s1,16(s0)          ; stack access
    0x84012f76    0x1b0    sd s2,24(s0)          ; stack access
    0x84012f7a    0x1b4    j ffffffff84012e00 <finaliseCap+0x3a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
149 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 237 nodes.

Section handleSyscall (261 of 266)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 103 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleSyscall`:

    0x840166f8      0x0    addi sp,sp,-16
    0x840166fa      0x2    sd ra,8(sp)           ; stack access
    0x840166fc      0x4    sd s0,0(sp)           ; stack access
    0x840166fe      0x6    addi a0,a0,8
    0x84016700      0x8    li a5,7
    0x84016702      0xa    bltu a5,a0,ffffffff8401683c <handleSyscall+0x144>
    0x84016706      0xe    slli a0,a0,0x2
    0x84016708     0x10    auipc a4,0x1
    0x8401670c     0x14    addi a4,a4,768 # ffffffff84017a08 <__global_pointer$+0x154>
    0x84016710     0x18    add a0,a0,a4
    0x84016712     0x1a    lw a5,0(a0)
    0x84016714     0x1c    add a5,a5,a4
    0x84016716     0x1e    jr a5
    0x84016718     0x20    li a1,1
    0x8401671a     0x22    li a0,0
    0x8401671c     0x24    jal ra,ffffffff840165e2 <handleInvocation>
    0x84016720     0x28    beqz a0,ffffffff840167f6 <handleSyscall+0xfe>
    0x84016722     0x2a    auipc a4,0x2
    0x84016726     0x2e    lw a4,-1306(a4) # ffffffff84018208 <active_irq>
    0x8401672a     0x32    addiw a3,a4,-1
    0x8401672e     0x36    li a5,53
    0x84016732     0x3a    bltu a5,a3,ffffffff84016742 <handleSyscall+0x4a>
    0x84016736     0x3e    slli a0,a4,0x20
    0x8401673a     0x42    srli a0,a0,0x20
    0x8401673c     0x44    jal ra,ffffffff84013900 <handleInterrupt>
    0x84016740     0x48    j ffffffff840167f6 <handleSyscall+0xfe>
    0x84016742     0x4a    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84016746     0x4e    sext.w a4,a0
    0x8401674a     0x52    auipc a5,0x2
    0x8401674e     0x56    sw a0,-1346(a5) # ffffffff84018208 <active_irq>
    0x84016752     0x5a    addiw a5,a0,-1
    0x84016756     0x5e    li a3,53
    0x8401675a     0x62    bltu a3,a5,ffffffff840167f6 <handleSyscall+0xfe>
    0x8401675e     0x66    j ffffffff84016736 <handleSyscall+0x3e>
    0x84016760     0x68    li a1,0
    0x84016762     0x6a    li a0,0
    0x84016764     0x6c    jal ra,ffffffff840165e2 <handleInvocation>
    0x84016768     0x70    beqz a0,ffffffff840167f6 <handleSyscall+0xfe>
    0x8401676a     0x72    auipc a4,0x2
    0x8401676e     0x76    lw a4,-1378(a4) # ffffffff84018208 <active_irq>
    0x84016772     0x7a    addiw a3,a4,-1
    0x84016776     0x7e    li a5,53
    0x8401677a     0x82    bltu a5,a3,ffffffff8401678a <handleSyscall+0x92>
    0x8401677e     0x86    slli a0,a4,0x20
    0x84016782     0x8a    srli a0,a0,0x20
    0x84016784     0x8c    jal ra,ffffffff84013900 <handleInterrupt>
    0x84016788     0x90    j ffffffff840167f6 <handleSyscall+0xfe>
    0x8401678a     0x92    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x8401678e     0x96    sext.w a4,a0
    0x84016792     0x9a    auipc a5,0x2
    0x84016796     0x9e    sw a0,-1418(a5) # ffffffff84018208 <active_irq>
    0x8401679a     0xa2    addiw a5,a0,-1
    0x8401679e     0xa6    li a3,53
    0x840167a2     0xaa    bltu a3,a5,ffffffff840167f6 <handleSyscall+0xfe>
    0x840167a6     0xae    j ffffffff8401677e <handleSyscall+0x86>
    0x840167a8     0xb0    li a1,1
    0x840167aa     0xb2    li a0,1
    0x840167ac     0xb4    jal ra,ffffffff840165e2 <handleInvocation>
    0x840167b0     0xb8    beqz a0,ffffffff840167f6 <handleSyscall+0xfe>
    0x840167b2     0xba    auipc a4,0x2
    0x840167b6     0xbe    lw a4,-1450(a4) # ffffffff84018208 <active_irq>
    0x840167ba     0xc2    addiw a3,a4,-1
    0x840167be     0xc6    li a5,53
    0x840167c2     0xca    bltu a5,a3,ffffffff840167d2 <handleSyscall+0xda>
    0x840167c6     0xce    slli a0,a4,0x20
    0x840167ca     0xd2    srli a0,a0,0x20
    0x840167cc     0xd4    jal ra,ffffffff84013900 <handleInterrupt>
    0x840167d0     0xd8    j ffffffff840167f6 <handleSyscall+0xfe>
    0x840167d2     0xda    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x840167d6     0xde    sext.w a4,a0
    0x840167da     0xe2    auipc a5,0x2
    0x840167de     0xe6    sw a0,-1490(a5) # ffffffff84018208 <active_irq>
    0x840167e2     0xea    addiw a5,a0,-1
    0x840167e6     0xee    li a3,53
    0x840167ea     0xf2    bltu a3,a5,ffffffff840167f6 <handleSyscall+0xfe>
    0x840167ee     0xf6    j ffffffff840167c6 <handleSyscall+0xce>
    0x840167f0     0xf8    li a0,1
    0x840167f2     0xfa    jal ra,ffffffff8401439c <handleRecv>
    0x840167f6     0xfe    jal ra,ffffffff84012932 <schedule>
    0x840167fa    0x102    jal ra,ffffffff840123c8 <activateThread>
    0x840167fe    0x106    li a0,0
    0x84016800    0x108    ld ra,8(sp)
    0x84016802    0x10a    ld s0,0(sp)
    0x84016804    0x10c    addi sp,sp,16
    0x84016806    0x10e    ret
    0x84016808    0x110    jal ra,ffffffff84013e3a <handleReply>
    0x8401680c    0x114    j ffffffff840167f6 <handleSyscall+0xfe>
    0x8401680e    0x116    jal ra,ffffffff84013e3a <handleReply>
    0x84016812    0x11a    li a0,1
    0x84016814    0x11c    jal ra,ffffffff8401439c <handleRecv>
    0x84016818    0x120    j ffffffff840167f6 <handleSyscall+0xfe>
    0x8401681a    0x122    li a0,0
    0x8401681c    0x124    jal ra,ffffffff8401439c <handleRecv>
    0x84016820    0x128    j ffffffff840167f6 <handleSyscall+0xfe>
    0x84016822    0x12a    auipc s0,0x18
    0x84016826    0x12e    addi s0,s0,630 # ffffffff8402ea98 <ksCurThread>
    0x8401682a    0x132    ld a0,0(s0)
    0x8401682c    0x134    jal ra,ffffffff84012770 <tcbSchedDequeue>
    0x84016830    0x138    ld a0,0(s0)
    0x84016832    0x13a    jal ra,ffffffff84012690 <tcbSchedAppend>
    0x84016836    0x13e    jal ra,ffffffff84012272 <rescheduleRequired>
    0x8401683a    0x142    j ffffffff840167f6 <handleSyscall+0xfe>
    0x8401683c    0x144    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 158 nodes.

Section decodeInvocation (262 of 266)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 164 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeInvocation`:

    0x8401642a      0x0    addi sp,sp,-96
    0x8401642c      0x2    sd ra,88(sp)          ; stack access
    0x8401642e      0x4    sd s0,80(sp)          ; stack access
    0x84016430      0x6    sd s1,72(sp)          ; stack access
    0x84016432      0x8    sd s2,64(sp)          ; stack access
    0x84016434      0xa    sd s3,56(sp)          ; stack access
    0x84016436      0xc    sd s4,48(sp)          ; stack access
    0x84016438      0xe    sd s5,40(sp)          ; stack access
    0x8401643a     0x10    mv s3,a3
    0x8401643c     0x12    sd a4,0(sp)           ; stack access
    0x8401643e     0x14    sd a5,8(sp)           ; stack access
    0x84016440     0x16    mv s1,a4
    0x84016442     0x18    mv s2,a5
    0x84016444     0x1a    srli t1,a4,0x3b
    0x84016448     0x1e    andi s0,t1,1
    0x8401644c     0x22    bnez s0,ffffffff8401646c <decodeInvocation+0x42>
    0x8401644e     0x24    mv s5,a6
    0x84016450     0x26    mv s4,a7
    0x84016452     0x28    li a5,20
    0x84016454     0x2a    bltu a5,t1,ffffffff840165de <decodeInvocation+0x1b4>
    0x84016458     0x2e    slli t1,t1,0x2
    0x8401645a     0x30    auipc a5,0x1
    0x8401645e     0x34    addi a5,a5,1370 # ffffffff840179b4 <__global_pointer$+0x100>
    0x84016462     0x38    add t1,t1,a5
    0x84016464     0x3a    lw a4,0(t1)
    0x84016468     0x3e    add a4,a4,a5
    0x8401646a     0x40    jr a4
    0x8401646c     0x42    ld a6,96(sp)          ; stack access
    0x8401646e     0x44    jal ra,ffffffff84015742 <decodeRISCVMMUInvocation>
    0x84016472     0x48    mv s0,a0
    0x84016474     0x4a    mv a0,s0
    0x84016476     0x4c    ld ra,88(sp)          ; stack access
    0x84016478     0x4e    ld s0,80(sp)          ; stack access
    0x8401647a     0x50    ld s1,72(sp)          ; stack access
    0x8401647c     0x52    ld s2,64(sp)          ; stack access
    0x8401647e     0x54    ld s3,56(sp)          ; stack access
    0x84016480     0x56    ld s4,48(sp)          ; stack access
    0x84016482     0x58    ld s5,40(sp)          ; stack access
    0x84016484     0x5a    addi sp,sp,96
    0x84016486     0x5c    ret
    0x84016488     0x5e    auipc a5,0x7
    0x8401648c     0x62    addi a5,a5,1984 # ffffffff8401dc48 <current_syscall_error>
    0x84016490     0x66    li a4,2
    0x84016492     0x68    sd a4,48(a5)
    0x84016494     0x6a    sd zero,8(a5)
    0x84016498     0x6e    li s0,3
    0x8401649a     0x70    j ffffffff84016474 <decodeInvocation+0x4a>
    0x8401649c     0x72    auipc a5,0x7
    0x840164a0     0x76    addi a5,a5,1964 # ffffffff8401dc48 <current_syscall_error>
    0x840164a4     0x7a    li a4,2
    0x840164a6     0x7c    sd a4,48(a5)
    0x840164a8     0x7e    sd zero,8(a5)
    0x840164ac     0x82    li s0,3
    0x840164ae     0x84    j ffffffff84016474 <decodeInvocation+0x4a>
    0x840164b0     0x86    slli a5,s1,0x8
    0x840164b4     0x8a    bgez a5,ffffffff840164f4 <decodeInvocation+0xca>
    0x840164b8     0x8e    li a1,2
    0x840164ba     0x90    auipc a0,0x18
    0x840164be     0x94    ld a0,1502(a0) # ffffffff8402ea98 <ksCurThread>
    0x840164c2     0x98    jal ra,ffffffff840122d8 <setThreadState>
    0x840164c6     0x9c    slli a0,s1,0x19
    0x840164ca     0xa0    srli a0,a0,0x19
    0x840164cc     0xa2    slli a5,s1,0x19
    0x840164d0     0xa6    bgez a5,ffffffff840164da <decodeInvocation+0xb0>
    0x840164d4     0xaa    li a5,-1
    0x840164d6     0xac    slli a5,a5,0x27
    0x840164d8     0xae    or a0,a0,a5
    0x840164da     0xb0    srli a3,s1,0x3a
    0x840164de     0xb4    srli a2,s1,0x39
    0x840164e2     0xb8    mv a5,s4
    0x840164e4     0xba    mv a4,s5
    0x840164e6     0xbc    andi a3,a3,1
    0x840164e8     0xbe    andi a2,a2,1
    0x840164ea     0xc0    mv a1,s2
    0x840164ec     0xc2    jal ra,ffffffff840141e4 <performInvocation_Endpoint>
    0x840164f0     0xc6    mv s0,a0
    0x840164f2     0xc8    j ffffffff84016474 <decodeInvocation+0x4a>
    0x840164f4     0xca    auipc a5,0x7
    0x840164f8     0xce    addi a5,a5,1876 # ffffffff8401dc48 <current_syscall_error>
    0x840164fc     0xd2    li a4,2
    0x840164fe     0xd4    sd a4,48(a5)
    0x84016500     0xd6    sd zero,8(a5)
    0x84016504     0xda    li s0,3
    0x84016506     0xdc    j ffffffff84016474 <decodeInvocation+0x4a>
    0x84016508     0xde    slli a5,s1,0x6
    0x8401650c     0xe2    bgez a5,ffffffff8401653a <decodeInvocation+0x110>
    0x84016510     0xe6    li a1,2
    0x84016512     0xe8    auipc a0,0x18
    0x84016516     0xec    ld a0,1414(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401651a     0xf0    jal ra,ffffffff840122d8 <setThreadState>
    0x8401651e     0xf4    slli a0,s1,0x19
    0x84016522     0xf8    srli a0,a0,0x19
    0x84016524     0xfa    slli a5,s1,0x19
    0x84016528     0xfe    bgez a5,ffffffff84016532 <decodeInvocation+0x108>
    0x8401652c    0x102    li a5,-1
    0x8401652e    0x104    slli a5,a5,0x27
    0x84016530    0x106    or a0,a0,a5
    0x84016532    0x108    mv a1,s2
    0x84016534    0x10a    jal ra,ffffffff84013804 <sendSignal>
    0x84016538    0x10e    j ffffffff84016474 <decodeInvocation+0x4a>
    0x8401653a    0x110    auipc a5,0x7
    0x8401653e    0x114    addi a5,a5,1806 # ffffffff8401dc48 <current_syscall_error>
    0x84016542    0x118    li a4,2
    0x84016544    0x11a    sd a4,48(a5)
    0x84016546    0x11c    sd zero,8(a5)
    0x8401654a    0x120    li s0,3
    0x8401654c    0x122    j ffffffff84016474 <decodeInvocation+0x4a>
    0x8401654e    0x124    andi a5,s1,1
    0x84016552    0x128    bnez a5,ffffffff84016574 <decodeInvocation+0x14a>
    0x84016554    0x12a    li a1,2
    0x84016556    0x12c    auipc a0,0x18
    0x8401655a    0x130    ld a0,1346(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401655e    0x134    jal ra,ffffffff840122d8 <setThreadState>
    0x84016562    0x138    srli a2,s1,0x1
    0x84016566    0x13c    andi a2,a2,1
    0x84016568    0x13e    mv a1,s3
    0x8401656a    0x140    mv a0,s2
    0x8401656c    0x142    jal ra,ffffffff84013e78 <performInvocation_Reply>
    0x84016570    0x146    mv s0,a0
    0x84016572    0x148    j ffffffff84016474 <decodeInvocation+0x4a>
    0x84016574    0x14a    auipc a5,0x7
    0x84016578    0x14e    addi a5,a5,1748 # ffffffff8401dc48 <current_syscall_error>
    0x8401657c    0x152    li a4,2
    0x8401657e    0x154    sd a4,48(a5)
    0x84016580    0x156    sd zero,8(a5)
    0x84016584    0x15a    li s0,3
    0x84016586    0x15c    j ffffffff84016474 <decodeInvocation+0x4a>
    0x84016588    0x15e    ld a6,96(sp)
    0x8401658a    0x160    mv a5,a7
    0x8401658c    0x162    mv a4,a3
    0x8401658e    0x164    ld a2,0(sp)
    0x84016590    0x166    ld a3,8(sp)
    0x84016592    0x168    jal ra,ffffffff8401537e <decodeTCBInvocation>
    0x84016596    0x16c    mv s0,a0
    0x84016598    0x16e    j ffffffff84016474 <decodeInvocation+0x4a>
    0x8401659a    0x170    ld a2,96(sp)
    0x8401659c    0x172    jal ra,ffffffff84014508 <decodeDomainInvocation>
    0x840165a0    0x176    mv s0,a0
    0x840165a2    0x178    j ffffffff84016474 <decodeInvocation+0x4a>
    0x840165a4    0x17a    ld a4,96(sp)
    0x840165a6    0x17c    ld a2,0(sp)
    0x840165a8    0x17e    ld a3,8(sp)
    0x840165aa    0x180    jal ra,ffffffff840131d6 <decodeCNodeInvocation>
    0x840165ae    0x184    mv s0,a0
    0x840165b0    0x186    j ffffffff84016474 <decodeInvocation+0x4a>
    0x840165b2    0x188    ld a6,96(sp)
    0x840165b4    0x18a    mv a5,a7
    0x840165b6    0x18c    ld a3,0(sp)
    0x840165b8    0x18e    ld a4,8(sp)
    0x840165ba    0x190    mv a2,s3
    0x840165bc    0x192    jal ra,ffffffff8401614e <decodeUntypedInvocation>
    0x840165c0    0x196    mv s0,a0
    0x840165c2    0x198    j ffffffff84016474 <decodeInvocation+0x4a>
    0x840165c4    0x19a    ld a3,96(sp)
    0x840165c6    0x19c    mv a2,s3
    0x840165c8    0x19e    jal ra,ffffffff84012404 <decodeIRQControlInvocation>
    0x840165cc    0x1a2    mv s0,a0
    0x840165ce    0x1a4    j ffffffff84016474 <decodeInvocation+0x4a>
    0x840165d0    0x1a6    slli a1,s2,0x34
    0x840165d4    0x1aa    srli a1,a1,0x34
    0x840165d6    0x1ac    jal ra,ffffffff840136da <decodeIRQHandlerInvocation>
    0x840165da    0x1b0    mv s0,a0
    0x840165dc    0x1b2    j ffffffff84016474 <decodeInvocation+0x4a>
    0x840165de    0x1b4    jal ra,ffffffff84010224 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
164 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 236 nodes.

Section decodeRISCVMMUInvocation (263 of 266)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 776 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

60 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x84015742      0x0    addi sp,sp,-208
    0x84015744      0x2    sd ra,200(sp)         ; stack access
    0x84015746      0x4    sd s0,192(sp)         ; stack access
    0x84015748      0x6    sd s1,184(sp)         ; stack access
    0x8401574a      0x8    sd s2,176(sp)         ; stack access
    0x8401574c      0xa    sd s3,168(sp)         ; stack access
    0x8401574e      0xc    sd s4,160(sp)         ; stack access
    0x84015750      0xe    sd s5,152(sp)         ; stack access
    0x84015752     0x10    sd s6,144(sp)         ; stack access
    0x84015754     0x12    sd s7,136(sp)         ; stack access
    0x84015756     0x14    sd s8,128(sp)         ; stack access
    0x84015758     0x16    sd s9,120(sp)         ; stack access
    0x8401575a     0x18    sd s10,112(sp)        ; stack access
    0x8401575c     0x1a    sd s11,104(sp)        ; stack access
    0x8401575e     0x1c    sd a4,0(sp)           ; stack access
    0x84015760     0x1e    sd a5,8(sp)           ; stack access
    0x84015762     0x20    srli s0,a4,0x3b
    0x84015766     0x24    li a5,11
    0x84015768     0x26    beq s0,a5,ffffffff84015d4e <decodeRISCVMMUInvocation+0x60c>
    0x8401576c     0x2a    mv s2,a3
    0x8401576e     0x2c    mv s1,a4
    0x84015770     0x2e    bltu a5,s0,ffffffff840158ac <decodeRISCVMMUInvocation+0x16a>
    0x84015774     0x32    li a5,1
    0x84015776     0x34    beq s0,a5,ffffffff84015a2e <decodeRISCVMMUInvocation+0x2ec>
    0x8401577a     0x38    li a5,3
    0x8401577c     0x3a    bne s0,a5,ffffffff84015fcc <decodeRISCVMMUInvocation+0x88a>
    0x84015780     0x3e    ld a5,0(sp)           ; stack access
    0x84015782     0x40    sd a5,16(sp)          ; stack access
    0x84015784     0x42    ld s3,8(sp)           ; stack access
    0x84015786     0x44    sd s3,24(sp)          ; stack access
    0x84015788     0x46    li a5,31
    0x8401578a     0x48    beq a0,a5,ffffffff84015936 <decodeRISCVMMUInvocation+0x1f4>
    0x8401578e     0x4c    li a5,30
    0x84015790     0x4e    bne a0,a5,ffffffff840159a8 <decodeRISCVMMUInvocation+0x266>
    0x84015794     0x52    li a5,1
    0x84015796     0x54    bgeu a5,a1,ffffffff840159b4 <decodeRISCVMMUInvocation+0x272>
    0x8401579a     0x58    auipc a5,0x8
    0x8401579e     0x5c    ld a5,1254(a5) # ffffffff8401dc80 <current_extra_caps>
    0x840157a2     0x60    beqz a5,ffffffff840159b4 <decodeRISCVMMUInvocation+0x272>
    0x840157a6     0x64    slli a4,a4,0x18
    0x840157a8     0x66    bltz a4,ffffffff840159c0 <decodeRISCVMMUInvocation+0x27e>
    0x840157ac     0x6a    ld a4,0(a5)
    0x840157ae     0x6c    srli s5,a4,0x3b
    0x840157b2     0x70    li a3,3
    0x840157b4     0x72    bne s5,a3,ffffffff840159d2 <decodeRISCVMMUInvocation+0x290>
    0x840157b8     0x76    slli a3,a4,0x18
    0x840157bc     0x7a    bgez a3,ffffffff840159d2 <decodeRISCVMMUInvocation+0x290>
    0x840157c0     0x7e    ld s9,8(a5)
    0x840157c4     0x82    srli a5,s9,0x9
    0x840157c8     0x86    slli a0,a5,0x19
    0x840157cc     0x8a    srli a0,a0,0x19
    0x840157ce     0x8c    slli a4,a5,0x19
    0x840157d2     0x90    bgez a4,ffffffff840157dc <decodeRISCVMMUInvocation+0x9a>
    0x840157d6     0x94    li a5,-1
    0x840157d8     0x96    slli a5,a5,0x27
    0x840157da     0x98    or a0,a0,a5
    0x840157dc     0x9a    auipc a5,0x19
    0x840157e0     0x9e    ld a5,700(a5) # ffffffff8402ea98 <ksCurThread>
    0x840157e4     0xa2    ld s8,88(a5)
    0x840157e8     0xa6    mv s0,a0
    0x840157ea     0xa8    srli a0,s9,0x30
    0x840157ee     0xac    lui a5,0xfefff
    0x840157f2     0xb0    slli a5,a5,0xe
    0x840157f4     0xb2    srli a5,a5,0x1a
    0x840157f6     0xb4    bltu a5,s8,ffffffff840159e4 <decodeRISCVMMUInvocation+0x2a2>
    0x840157fa     0xb8    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x840157fe     0xbc    sd a0,64(sp)          ; stack access
    0x84015800     0xbe    sd a1,72(sp)          ; stack access
    0x84015802     0xc0    bnez a0,ffffffff840159f8 <decodeRISCVMMUInvocation+0x2b6>
    0x84015806     0xc4    ld a5,72(sp)          ; stack access
    0x84015808     0xc6    bne s0,a5,ffffffff84015a0c <decodeRISCVMMUInvocation+0x2ca>
    0x8401580c     0xca    mv a1,s8
    0x8401580e     0xcc    mv a0,s0
    0x84015810     0xce    jal ra,ffffffff840105a0 <lookupPTSlot>
    0x84015814     0xd2    mv s6,a0
    0x84015816     0xd4    mv s4,a1
    0x84015818     0xd6    sd a0,48(sp)          ; stack access
    0x8401581a     0xd8    sd a1,56(sp)          ; stack access
    0x8401581c     0xda    li a5,12
    0x8401581e     0xdc    beq a1,a5,ffffffff84015a20 <decodeRISCVMMUInvocation+0x2de>
    0x84015822     0xe0    ld s0,0(a0)
    0x84015824     0xe2    andi s0,s0,1
    0x84015826     0xe4    bnez s0,ffffffff84015a20 <decodeRISCVMMUInvocation+0x2de>
    0x8401582a     0xe8    srli a5,s3,0x9
    0x8401582e     0xec    slli s5,a5,0x19
    0x84015832     0xf0    srli s5,s5,0x19
    0x84015836     0xf4    slli a4,a5,0x19
    0x8401583a     0xf8    bgez a4,ffffffff84015846 <decodeRISCVMMUInvocation+0x104>
    0x8401583e     0xfc    li a5,-1
    0x84015840     0xfe    slli a5,a5,0x27
    0x84015842    0x100    or s5,s5,a5
    0x84015846    0x104    li s7,-1
    0x84015848    0x106    srli a5,s7,0x10
    0x8401584c    0x10a    and s3,s3,a5
    0x84015850    0x10e    slli a5,s7,0x30
    0x84015854    0x112    and s9,s9,a5
    0x84015858    0x116    or s3,s3,s9
    0x8401585c    0x11a    li a1,2
    0x8401585e    0x11c    auipc a0,0x19
    0x84015862    0x120    ld a0,570(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015866    0x124    jal ra,ffffffff840122d8 <setThreadState>
    0x8401586a    0x128    li a4,1
    0x8401586c    0x12a    sll a5,a4,s4
    0x84015870    0x12e    neg a5,a5
    0x84015874    0x132    and a5,a5,s8
    0x84015878    0x136    slli s7,s7,0x28
    0x8401587a    0x138    and s1,s1,s7
    0x8401587e    0x13c    or a5,a5,s1
    0x84015880    0x13e    slli a3,a4,0x27
    0x84015884    0x142    or a5,a5,a3
    0x84015886    0x144    sd a5,0(s2)
    0x8401588a    0x148    sd s3,8(s2)
    0x8401588e    0x14c    slli a5,a4,0x26
    0x84015892    0x150    add a5,a5,s5
    0x84015894    0x152    srli a5,a5,0x2
    0x84015896    0x154    lui a4,0xfff00
    0x8401589a    0x158    srli a4,a4,0xa
    0x8401589c    0x15a    and a5,a5,a4
    0x8401589e    0x15c    ori a5,a5,193
    0x840158a2    0x160    sd a5,0(s6)
    0x840158a6    0x164    sfence.vma
    0x840158aa    0x168    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x840158ac    0x16a    li a5,13
    0x840158ae    0x16c    bne s0,a5,ffffffff84015fcc <decodeRISCVMMUInvocation+0x88a>
    0x840158b2    0x170    li a5,36
    0x840158b6    0x174    bne a0,a5,ffffffff84015ee8 <decodeRISCVMMUInvocation+0x7a6>
    0x840158ba    0x178    auipc s3,0x8
    0x840158be    0x17c    ld s3,966(s3) # ffffffff8401dc80 <current_extra_caps>
    0x840158c2    0x180    beqz s3,ffffffff84015ef6 <decodeRISCVMMUInvocation+0x7b4>
    0x840158c6    0x184    ld s2,0(s3)
    0x840158ca    0x188    srli s0,s2,0x3b
    0x840158ce    0x18c    li a5,3
    0x840158d0    0x18e    bne s0,a5,ffffffff84015f04 <decodeRISCVMMUInvocation+0x7c2>
    0x840158d4    0x192    srli s2,s2,0x27
    0x840158d8    0x196    andi s2,s2,1
    0x840158dc    0x19a    bnez s2,ffffffff84015f04 <decodeRISCVMMUInvocation+0x7c2>
    0x840158e0    0x19e    srli a3,a4,0x2b
    0x840158e4    0x1a2    slli a3,a3,0x30
    0x840158e6    0x1a4    srli a3,a3,0x30
    0x840158e8    0x1a6    srli a5,a3,0x9
    0x840158ec    0x1aa    slli a4,a5,0x3
    0x840158f0    0x1ae    auipc a5,0x7
    0x840158f4    0x1b2    addi a5,a5,-200 # ffffffff8401c828 <riscvKSASIDTable>
    0x840158f8    0x1b6    add a5,a5,a4
    0x840158fa    0x1b8    ld s4,0(a5)
    0x840158fe    0x1bc    beqz s4,ffffffff84015f18 <decodeRISCVMMUInvocation+0x7d6>
    0x84015902    0x1c0    slli s1,s1,0x2
    0x84015904    0x1c2    lui a1,0xf8000
    0x84015908    0x1c6    srli a1,a1,0x19
    0x8401590a    0x1c8    and a1,a1,s1
    0x8401590c    0x1ca    slli a5,s1,0x19
    0x84015910    0x1ce    bgez a5,ffffffff8401591a <decodeRISCVMMUInvocation+0x1d8>
    0x84015914    0x1d2    li a5,-1
    0x84015916    0x1d4    slli a5,a5,0x27
    0x84015918    0x1d6    or a1,a1,a5
    0x8401591a    0x1d8    mv a5,s2
    0x8401591c    0x1da    li a2,512
    0x84015920    0x1de    beq s4,a1,ffffffff84015f40 <decodeRISCVMMUInvocation+0x7fe>
    0x84015924    0x1e2    auipc a5,0x8
    0x84015928    0x1e6    addi a5,a5,804 # ffffffff8401dc48 <current_syscall_error>
    0x8401592c    0x1ea    li a4,2
    0x8401592e    0x1ec    sd a4,48(a5)
    0x84015930    0x1ee    sd zero,8(a5)
    0x84015934    0x1f2    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015936    0x1f4    mv a0,a3
    0x84015938    0x1f6    jal ra,ffffffff84011e80 <isFinalCapability>
    0x8401593c    0x1fa    beqz a0,ffffffff8401598a <decodeRISCVMMUInvocation+0x248>
    0x8401593e    0x1fc    slli a5,s1,0x18
    0x84015942    0x200    bgez a5,ffffffff8401596e <decodeRISCVMMUInvocation+0x22c>
    0x84015946    0x204    srli a0,s3,0x30
    0x8401594a    0x208    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x8401594e    0x20c    sd a0,64(sp)          ; stack access
    0x84015950    0x20e    sd a1,72(sp)          ; stack access
    0x84015952    0x210    srli a4,s3,0x9
    0x84015956    0x214    slli a5,a4,0x19
    0x8401595a    0x218    srli a5,a5,0x19
    0x8401595c    0x21a    slli a3,a4,0x19
    0x84015960    0x21e    bgez a3,ffffffff8401596a <decodeRISCVMMUInvocation+0x228>
    0x84015964    0x222    li a4,-1
    0x84015966    0x224    slli a4,a4,0x27
    0x84015968    0x226    or a5,a5,a4
    0x8401596a    0x228    ld a4,64(sp)          ; stack access
    0x8401596c    0x22a    beqz a4,ffffffff84015996 <decodeRISCVMMUInvocation+0x254>
    0x8401596e    0x22c    li a1,2
    0x84015970    0x22e    auipc a0,0x19
    0x84015974    0x232    ld a0,296(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015978    0x236    jal ra,ffffffff840122d8 <setThreadState>
    0x8401597c    0x23a    mv a2,s2
    0x8401597e    0x23c    mv a0,s1
    0x84015980    0x23e    mv a1,s3
    0x84015982    0x240    jal ra,ffffffff840156d2 <performPageTableInvocationUnmap>
    0x84015986    0x244    mv s0,a0
    0x84015988    0x246    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x8401598a    0x248    li a5,9
    0x8401598c    0x24a    auipc a4,0x8
    0x84015990    0x24e    sd a5,748(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015994    0x252    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015996    0x254    ld a4,72(sp)          ; stack access
    0x84015998    0x256    bne a4,a5,ffffffff8401596e <decodeRISCVMMUInvocation+0x22c>
    0x8401599c    0x25a    li a5,9
    0x8401599e    0x25c    auipc a4,0x8
    0x840159a2    0x260    sd a5,730(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840159a6    0x264    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x840159a8    0x266    li a5,3
    0x840159aa    0x268    auipc a4,0x8
    0x840159ae    0x26c    sd a5,718(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840159b2    0x270    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x840159b4    0x272    li a5,7
    0x840159b6    0x274    auipc a4,0x8
    0x840159ba    0x278    sd a5,706(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840159be    0x27c    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x840159c0    0x27e    auipc a5,0x8
    0x840159c4    0x282    addi a5,a5,648 # ffffffff8401dc48 <current_syscall_error>
    0x840159c8    0x286    li a4,2
    0x840159ca    0x288    sd a4,48(a5)
    0x840159cc    0x28a    sd zero,8(a5)
    0x840159d0    0x28e    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x840159d2    0x290    auipc a5,0x8
    0x840159d6    0x294    addi a5,a5,630 # ffffffff8401dc48 <current_syscall_error>
    0x840159da    0x298    li a4,2
    0x840159dc    0x29a    sd a4,48(a5)
    0x840159de    0x29c    li a4,1
    0x840159e0    0x29e    sd a4,8(a5)
    0x840159e2    0x2a0    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x840159e4    0x2a2    auipc a5,0x8
    0x840159e8    0x2a6    addi a5,a5,612 # ffffffff8401dc48 <current_syscall_error>
    0x840159ec    0x2aa    li a4,1
    0x840159ee    0x2ac    sd a4,48(a5)
    0x840159f0    0x2ae    sd zero,0(a5)
    0x840159f4    0x2b2    mv s0,s5
    0x840159f6    0x2b4    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x840159f8    0x2b6    auipc a5,0x8
    0x840159fc    0x2ba    addi a5,a5,592 # ffffffff8401dc48 <current_syscall_error>
    0x84015a00    0x2be    li a4,6
    0x84015a02    0x2c0    sd a4,48(a5)
    0x84015a04    0x2c2    sd zero,40(a5)
    0x84015a08    0x2c6    mv s0,s5
    0x84015a0a    0x2c8    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015a0c    0x2ca    auipc a5,0x8
    0x84015a10    0x2ce    addi a5,a5,572 # ffffffff8401dc48 <current_syscall_error>
    0x84015a14    0x2d2    li a4,2
    0x84015a16    0x2d4    sd a4,48(a5)
    0x84015a18    0x2d6    li a4,1
    0x84015a1a    0x2d8    sd a4,8(a5)
    0x84015a1c    0x2da    mv s0,s5
    0x84015a1e    0x2dc    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015a20    0x2de    li a5,8
    0x84015a22    0x2e0    auipc a4,0x8
    0x84015a26    0x2e4    sd a5,598(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015a2a    0x2e8    mv s0,s5
    0x84015a2c    0x2ea    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015a2e    0x2ec    ld a5,0(sp)           ; stack access
    0x84015a30    0x2ee    sd a5,32(sp)          ; stack access
    0x84015a32    0x2f0    ld s4,8(sp)           ; stack access
    0x84015a34    0x2f2    sd s4,40(sp)          ; stack access
    0x84015a36    0x2f4    li a5,33
    0x84015a3a    0x2f8    beq a0,a5,ffffffff84015cf4 <decodeRISCVMMUInvocation+0x5b2>
    0x84015a3e    0x2fc    li a5,34
    0x84015a42    0x300    beq a0,a5,ffffffff84015d10 <decodeRISCVMMUInvocation+0x5ce>
    0x84015a46    0x304    li a5,32
    0x84015a4a    0x308    beq a0,a5,ffffffff84015a5c <decodeRISCVMMUInvocation+0x31a>
    0x84015a4e    0x30c    li a5,3
    0x84015a50    0x30e    auipc a4,0x8
    0x84015a54    0x312    sd a5,552(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015a58    0x316    li s0,3
    0x84015a5a    0x318    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015a5c    0x31a    li a5,2
    0x84015a5e    0x31c    bgeu a5,a1,ffffffff84015ae4 <decodeRISCVMMUInvocation+0x3a2>
    0x84015a62    0x320    auipc a5,0x8
    0x84015a66    0x324    ld a5,542(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84015a6a    0x328    beqz a5,ffffffff84015ae4 <decodeRISCVMMUInvocation+0x3a2>
    0x84015a6c    0x32a    ld a4,0(a5)
    0x84015a6e    0x32c    srli s9,a4,0x3b
    0x84015a72    0x330    li a3,3
    0x84015a74    0x332    bne s9,a3,ffffffff84015af2 <decodeRISCVMMUInvocation+0x3b0>
    0x84015a78    0x336    slli a3,a4,0x18
    0x84015a7c    0x33a    bgez a3,ffffffff84015af2 <decodeRISCVMMUInvocation+0x3b0>
    0x84015a80    0x33e    ld s5,8(a5)
    0x84015a84    0x342    srli a5,s5,0x9
    0x84015a88    0x346    slli a0,a5,0x19
    0x84015a8c    0x34a    srli a0,a0,0x19
    0x84015a8e    0x34c    slli a4,a5,0x19
    0x84015a92    0x350    bgez a4,ffffffff84015a9c <decodeRISCVMMUInvocation+0x35a>
    0x84015a96    0x354    li a5,-1
    0x84015a98    0x356    slli a5,a5,0x27
    0x84015a9a    0x358    or a0,a0,a5
    0x84015a9c    0x35a    auipc a5,0x19
    0x84015aa0    0x35e    ld a5,-4(a5) # ffffffff8402ea98 <ksCurThread>
    0x84015aa4    0x362    ld s8,88(a5)
    0x84015aa8    0x366    ld s10,96(a5)
    0x84015aac    0x36a    ld s7,104(a5)
    0x84015ab0    0x36e    mv s3,a0
    0x84015ab2    0x370    srli s11,s5,0x30
    0x84015ab6    0x374    mv a0,s11
    0x84015ab8    0x376    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015abc    0x37a    mv s6,a0
    0x84015abe    0x37c    sd a0,48(sp)          ; stack access
    0x84015ac0    0x37e    sd a1,56(sp)          ; stack access
    0x84015ac2    0x380    mv s0,a0
    0x84015ac4    0x382    bnez a0,ffffffff84015b06 <decodeRISCVMMUInvocation+0x3c4>
    0x84015ac6    0x384    ld a5,56(sp)          ; stack access
    0x84015ac8    0x386    bne s3,a5,ffffffff84015b1a <decodeRISCVMMUInvocation+0x3d8>
    0x84015acc    0x38a    srli a5,s1,0x39
    0x84015ad0    0x38e    andi a5,a5,3
    0x84015ad2    0x390    li a4,1
    0x84015ad4    0x392    beq a5,a4,ffffffff84015fd0 <decodeRISCVMMUInvocation+0x88e>
    0x84015ad8    0x396    li a4,2
    0x84015ada    0x398    beq a5,a4,ffffffff84016000 <decodeRISCVMMUInvocation+0x8be>
    0x84015ade    0x39c    beqz a5,ffffffff84015b2e <decodeRISCVMMUInvocation+0x3ec>
    0x84015ae0    0x39e    jal ra,ffffffff84010224 <halt>
    0x84015ae4    0x3a2    li a5,7
    0x84015ae6    0x3a4    auipc a4,0x8
    0x84015aea    0x3a8    sd a5,402(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015aee    0x3ac    li s0,3
    0x84015af0    0x3ae    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015af2    0x3b0    auipc a5,0x8
    0x84015af6    0x3b4    addi a5,a5,342 # ffffffff8401dc48 <current_syscall_error>
    0x84015afa    0x3b8    li a4,2
    0x84015afc    0x3ba    sd a4,48(a5)
    0x84015afe    0x3bc    li a4,1
    0x84015b00    0x3be    sd a4,8(a5)
    0x84015b02    0x3c0    li s0,3
    0x84015b04    0x3c2    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015b06    0x3c4    auipc a5,0x8
    0x84015b0a    0x3c8    addi a5,a5,322 # ffffffff8401dc48 <current_syscall_error>
    0x84015b0e    0x3cc    li a4,6
    0x84015b10    0x3ce    sd a4,48(a5)
    0x84015b12    0x3d0    sd zero,40(a5)
    0x84015b16    0x3d4    mv s0,s9
    0x84015b18    0x3d6    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015b1a    0x3d8    auipc a5,0x8
    0x84015b1e    0x3dc    addi a5,a5,302 # ffffffff8401dc48 <current_syscall_error>
    0x84015b22    0x3e0    li a4,2
    0x84015b24    0x3e2    sd a4,48(a5)
    0x84015b26    0x3e4    li a4,1
    0x84015b28    0x3e6    sd a4,8(a5)
    0x84015b2a    0x3e8    mv s0,s9
    0x84015b2c    0x3ea    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015b2e    0x3ec    lui a4,0x1
    0x84015b30    0x3ee    addi a4,a4,-1
    0x84015b32    0x3f0    add a4,a4,s8
    0x84015b34    0x3f2    lui a5,0xfefff
    0x84015b38    0x3f6    slli a5,a5,0xe
    0x84015b3a    0x3f8    srli a5,a5,0x1a
    0x84015b3c    0x3fa    bltu a5,a4,ffffffff84015c1e <decodeRISCVMMUInvocation+0x4dc>
    0x84015b40    0x3fe    slli a5,s8,0x34
    0x84015b44    0x402    bnez a5,ffffffff84015c32 <decodeRISCVMMUInvocation+0x4f0>
    0x84015b46    0x404    mv a1,s8
    0x84015b48    0x406    mv a0,s3
    0x84015b4a    0x408    jal ra,ffffffff840105a0 <lookupPTSlot>
    0x84015b4e    0x40c    mv s3,a0
    0x84015b50    0x40e    mv a5,a1
    0x84015b52    0x410    sd a0,64(sp)          ; stack access
    0x84015b54    0x412    sd a1,72(sp)          ; stack access
    0x84015b56    0x414    li a4,12
    0x84015b58    0x416    bne a5,a4,ffffffff84015c40 <decodeRISCVMMUInvocation+0x4fe>
    0x84015b5c    0x41a    srli a5,s4,0x30
    0x84015b60    0x41e    bnez a5,ffffffff84015c6c <decodeRISCVMMUInvocation+0x52a>
    0x84015b64    0x422    ld a5,0(s3)
    0x84015b68    0x426    andi a5,a5,1
    0x84015b6a    0x428    bnez a5,ffffffff84015cde <decodeRISCVMMUInvocation+0x59c>
    0x84015b6e    0x42c    srli a0,s1,0x37
    0x84015b72    0x430    mv a1,s10
    0x84015b74    0x432    andi a0,a0,3
    0x84015b76    0x434    jal ra,ffffffff84010968 <maskVMRights>
    0x84015b7a    0x438    srli a4,s4,0x9
    0x84015b7e    0x43c    slli a5,a4,0x19
    0x84015b82    0x440    srli a5,a5,0x19
    0x84015b84    0x442    slli a3,a4,0x19
    0x84015b88    0x446    bgez a3,ffffffff84015b92 <decodeRISCVMMUInvocation+0x450>
    0x84015b8c    0x44a    li a4,-1
    0x84015b8e    0x44c    slli a4,a4,0x27
    0x84015b90    0x44e    or a5,a5,a4
    0x84015b92    0x450    li a4,1
    0x84015b94    0x452    slli a4,a4,0x26
    0x84015b96    0x454    add a5,a5,a4
    0x84015b98    0x456    li a4,-1
    0x84015b9a    0x458    srli a3,a4,0x10
    0x84015b9e    0x45c    and s4,s4,a3
    0x84015ba2    0x460    slli a3,a4,0x30
    0x84015ba6    0x464    and s5,s5,a3
    0x84015baa    0x468    or s4,s4,s5
    0x84015bae    0x46c    slli s5,a4,0x27
    0x84015bb2    0x470    and s1,s1,s5
    0x84015bb6    0x474    srli a4,a4,0x19
    0x84015bb8    0x476    and s8,s8,a4
    0x84015bbc    0x47a    or s8,s1,s8
    0x84015bc0    0x47e    andi s7,s7,1
    0x84015bc4    0x482    xori a1,s7,1
    0x84015bc8    0x486    addi a4,a0,-3
    0x84015bcc    0x48a    seqz a4,a4
    0x84015bd0    0x48e    addi a3,a0,-1
    0x84015bd4    0x492    snez a2,a3
    0x84015bd8    0x496    bnez a3,ffffffff84015bde <decodeRISCVMMUInvocation+0x49c>
    0x84015bda    0x498    beqz a4,ffffffff84015cec <decodeRISCVMMUInvocation+0x5aa>
    0x84015bde    0x49c    srli s1,a5,0x2
    0x84015be2    0x4a0    lui a5,0xfff00
    0x84015be6    0x4a4    srli a5,a5,0xa
    0x84015be8    0x4a6    and s1,s1,a5
    0x84015bea    0x4a8    slli a5,a1,0x3
    0x84015bee    0x4ac    or s1,s1,a5
    0x84015bf0    0x4ae    slli a4,a4,0x2
    0x84015bf2    0x4b0    or s1,s1,a4
    0x84015bf4    0x4b2    slli a5,a2,0x1
    0x84015bf8    0x4b6    or s1,s1,a5
    0x84015bfa    0x4b8    ori s1,s1,209
    0x84015bfe    0x4bc    li a1,2
    0x84015c00    0x4be    auipc a0,0x19
    0x84015c04    0x4c2    ld a0,-360(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015c08    0x4c6    jal ra,ffffffff840122d8 <setThreadState>
    0x84015c0c    0x4ca    sd s8,0(s2)
    0x84015c10    0x4ce    sd s4,8(s2)
    0x84015c14    0x4d2    sd s1,0(s3)
    0x84015c18    0x4d6    sfence.vma
    0x84015c1c    0x4da    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015c1e    0x4dc    auipc a5,0x8
    0x84015c22    0x4e0    addi a5,a5,42 # ffffffff8401dc48 <current_syscall_error>
    0x84015c26    0x4e4    li a4,1
    0x84015c28    0x4e6    sd a4,48(a5)
    0x84015c2a    0x4e8    sd zero,0(a5)
    0x84015c2e    0x4ec    mv s0,s9
    0x84015c30    0x4ee    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015c32    0x4f0    li a5,5
    0x84015c34    0x4f2    auipc a4,0x8
    0x84015c38    0x4f6    sd a5,68(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015c3c    0x4fa    mv s0,s9
    0x84015c3e    0x4fc    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015c40    0x4fe    auipc a4,0x8
    0x84015c44    0x502    addi a4,a4,-16 # ffffffff8401dc30 <current_lookup_fault>
    0x84015c48    0x506    slli a5,a5,0x2
    0x84015c4a    0x508    andi a5,a5,508
    0x84015c4e    0x50c    ori a5,a5,1
    0x84015c52    0x510    sd a5,0(a4)
    0x84015c54    0x512    sd zero,8(a4)
    0x84015c58    0x516    auipc a5,0x8
    0x84015c5c    0x51a    addi a5,a5,-16 # ffffffff8401dc48 <current_syscall_error>
    0x84015c60    0x51e    li a4,6
    0x84015c62    0x520    sd a4,48(a5)
    0x84015c64    0x522    sd zero,40(a5)
    0x84015c68    0x526    mv s0,s9
    0x84015c6a    0x528    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015c6c    0x52a    beq s11,a5,ffffffff84015c84 <decodeRISCVMMUInvocation+0x542>
    0x84015c70    0x52e    auipc a5,0x8
    0x84015c74    0x532    addi a5,a5,-40 # ffffffff8401dc48 <current_syscall_error>
    0x84015c78    0x536    li a4,2
    0x84015c7a    0x538    sd a4,48(a5)
    0x84015c7c    0x53a    li a4,1
    0x84015c7e    0x53c    sd a4,8(a5)
    0x84015c80    0x53e    mv s0,s9
    0x84015c82    0x540    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015c84    0x542    slli a5,s1,0x19
    0x84015c88    0x546    srli a5,a5,0x19
    0x84015c8a    0x548    slli a4,s1,0x19
    0x84015c8e    0x54c    bgez a4,ffffffff84015c98 <decodeRISCVMMUInvocation+0x556>
    0x84015c92    0x550    li a4,-1
    0x84015c94    0x552    slli a4,a4,0x27
    0x84015c96    0x554    or a5,a5,a4
    0x84015c98    0x556    bne s8,a5,ffffffff84015cca <decodeRISCVMMUInvocation+0x588>
    0x84015c9c    0x55a    ld a4,0(s3)
    0x84015ca0    0x55e    andi a5,a4,1
    0x84015ca4    0x562    beqz a5,ffffffff84015b6e <decodeRISCVMMUInvocation+0x42c>
    0x84015ca8    0x566    srli a5,a4,0x1
    0x84015cac    0x56a    srli a3,a4,0x2
    0x84015cb0    0x56e    or a5,a5,a3
    0x84015cb2    0x570    srli a4,a4,0x3
    0x84015cb4    0x572    or a5,a5,a4
    0x84015cb6    0x574    andi a5,a5,1
    0x84015cb8    0x576    bnez a5,ffffffff84015b6e <decodeRISCVMMUInvocation+0x42c>
    0x84015cbc    0x57a    li a5,8
    0x84015cbe    0x57c    auipc a4,0x8
    0x84015cc2    0x580    sd a5,-70(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015cc6    0x584    mv s0,s9
    0x84015cc8    0x586    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015cca    0x588    auipc a5,0x8
    0x84015cce    0x58c    addi a5,a5,-130 # ffffffff8401dc48 <current_syscall_error>
    0x84015cd2    0x590    li a4,1
    0x84015cd4    0x592    sd a4,48(a5)
    0x84015cd6    0x594    sd zero,0(a5)
    0x84015cda    0x598    mv s0,s9
    0x84015cdc    0x59a    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015cde    0x59c    li a5,8
    0x84015ce0    0x59e    auipc a4,0x8
    0x84015ce4    0x5a2    sd a5,-104(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015ce8    0x5a6    mv s0,s9
    0x84015cea    0x5a8    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015cec    0x5aa    beqz s7,ffffffff84015bde <decodeRISCVMMUInvocation+0x49c>
    0x84015cf0    0x5ae    mv s1,s6
    0x84015cf2    0x5b0    j ffffffff84015bfe <decodeRISCVMMUInvocation+0x4bc>
    0x84015cf4    0x5b2    li a1,2
    0x84015cf6    0x5b4    auipc a0,0x19
    0x84015cfa    0x5b8    ld a0,-606(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015cfe    0x5bc    jal ra,ffffffff840122d8 <setThreadState>
    0x84015d02    0x5c0    mv a2,s2
    0x84015d04    0x5c2    mv a0,s1
    0x84015d06    0x5c4    mv a1,s4
    0x84015d08    0x5c6    jal ra,ffffffff840109c0 <performPageInvocationUnmap>
    0x84015d0c    0x5ca    mv s0,a0
    0x84015d0e    0x5cc    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015d10    0x5ce    li a1,2
    0x84015d12    0x5d0    auipc a0,0x19
    0x84015d16    0x5d4    ld a0,-634(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015d1a    0x5d8    jal ra,ffffffff840122d8 <setThreadState>
    0x84015d1e    0x5dc    srli s4,s4,0x9
    0x84015d22    0x5e0    slli a5,s4,0x19
    0x84015d26    0x5e4    srli a5,a5,0x19
    0x84015d28    0x5e6    slli a4,s4,0x19
    0x84015d2c    0x5ea    bgez a4,ffffffff84015d36 <decodeRISCVMMUInvocation+0x5f4>
    0x84015d30    0x5ee    li a4,-1
    0x84015d32    0x5f0    slli a4,a4,0x27
    0x84015d34    0x5f2    or a5,a5,a4
    0x84015d36    0x5f4    auipc a4,0x19
    0x84015d3a    0x5f8    ld a4,-670(a4) # ffffffff8402ea98 <ksCurThread>
    0x84015d3e    0x5fc    li a3,1
    0x84015d40    0x5fe    slli a2,a3,0x26
    0x84015d44    0x602    add a5,a5,a2
    0x84015d46    0x604    sd a5,88(a4)
    0x84015d48    0x606    sd a3,80(a4)
    0x84015d4a    0x608    li s0,0
    0x84015d4c    0x60a    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015d4e    0x60c    li a5,35
    0x84015d52    0x610    beq a0,a5,ffffffff84015d82 <decodeRISCVMMUInvocation+0x640>
    0x84015d56    0x614    li a5,3
    0x84015d58    0x616    auipc a4,0x8
    0x84015d5c    0x61a    sd a5,-224(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015d60    0x61e    li s0,3
    0x84015d62    0x620    mv a0,s0
    0x84015d64    0x622    ld ra,200(sp)         ; stack access
    0x84015d66    0x624    ld s0,192(sp)         ; stack access
    0x84015d68    0x626    ld s1,184(sp)         ; stack access
    0x84015d6a    0x628    ld s2,176(sp)         ; stack access
    0x84015d6c    0x62a    ld s3,168(sp)         ; stack access
    0x84015d6e    0x62c    ld s4,160(sp)         ; stack access
    0x84015d70    0x62e    ld s5,152(sp)         ; stack access
    0x84015d72    0x630    ld s6,144(sp)         ; stack access
    0x84015d74    0x632    ld s7,136(sp)         ; stack access
    0x84015d76    0x634    ld s8,128(sp)         ; stack access
    0x84015d78    0x636    ld s9,120(sp)         ; stack access
    0x84015d7a    0x638    ld s10,112(sp)        ; stack access
    0x84015d7c    0x63a    ld s11,104(sp)        ; stack access
    0x84015d7e    0x63c    addi sp,sp,208
    0x84015d80    0x63e    ret
    0x84015d82    0x640    li a5,1
    0x84015d84    0x642    bgeu a5,a1,ffffffff84015de6 <decodeRISCVMMUInvocation+0x6a4>
    0x84015d88    0x646    auipc s2,0x8
    0x84015d8c    0x64a    ld s2,-264(s2) # ffffffff8401dc80 <current_extra_caps>
    0x84015d90    0x64e    beqz s2,ffffffff84015de6 <decodeRISCVMMUInvocation+0x6a4>
    0x84015d94    0x652    auipc a5,0x8
    0x84015d98    0x656    ld a5,-268(a5) # ffffffff8401dc88 <current_extra_caps+0x8>
    0x84015d9c    0x65a    beqz a5,ffffffff84015de6 <decodeRISCVMMUInvocation+0x6a4>
    0x84015d9e    0x65c    auipc a4,0x19
    0x84015da2    0x660    ld a4,-774(a4) # ffffffff8402ea98 <ksCurThread>
    0x84015da6    0x664    ld s4,88(a4)
    0x84015daa    0x668    ld s5,96(a4)
    0x84015dae    0x66c    ld s3,0(s2)
    0x84015db2    0x670    ld a2,8(s2)
    0x84015db6    0x674    ld a4,0(a5)
    0x84015db8    0x676    sd a4,48(sp)          ; stack access
    0x84015dba    0x678    ld a5,8(a5)
    0x84015dbc    0x67a    sd a5,56(sp)          ; stack access
    0x84015dbe    0x67c    auipc a5,0x7
    0x84015dc2    0x680    addi a5,a5,-1430 # ffffffff8401c828 <riscvKSASIDTable>
    0x84015dc6    0x684    li s1,0
    0x84015dc8    0x686    li a3,128
    0x84015dcc    0x68a    ld a4,0(a5)
    0x84015dce    0x68c    beqz a4,ffffffff84015df4 <decodeRISCVMMUInvocation+0x6b2>
    0x84015dd0    0x68e    addi s1,s1,1
    0x84015dd2    0x690    addi a5,a5,8
    0x84015dd4    0x692    bne s1,a3,ffffffff84015dcc <decodeRISCVMMUInvocation+0x68a>
    0x84015dd8    0x696    li a5,8
    0x84015dda    0x698    auipc a4,0x8
    0x84015dde    0x69c    sd a5,-354(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015de2    0x6a0    li s0,3
    0x84015de4    0x6a2    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015de6    0x6a4    li a5,7
    0x84015de8    0x6a6    auipc a4,0x8
    0x84015dec    0x6aa    sd a5,-368(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015df0    0x6ae    li s0,3
    0x84015df2    0x6b0    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015df4    0x6b2    li a5,128
    0x84015df8    0x6b6    beq s1,a5,ffffffff84015dd8 <decodeRISCVMMUInvocation+0x696>
    0x84015dfc    0x6ba    srli a5,s3,0x3b
    0x84015e00    0x6be    li a4,2
    0x84015e02    0x6c0    bne a5,a4,ffffffff84015e18 <decodeRISCVMMUInvocation+0x6d6>
    0x84015e06    0x6c4    andi a5,a2,63
    0x84015e0a    0x6c8    li a4,12
    0x84015e0c    0x6ca    bne a5,a4,ffffffff84015e18 <decodeRISCVMMUInvocation+0x6d6>
    0x84015e10    0x6ce    srli a5,a2,0x6
    0x84015e14    0x6d2    andi a5,a5,1
    0x84015e16    0x6d4    beqz a5,ffffffff84015e2c <decodeRISCVMMUInvocation+0x6ea>
    0x84015e18    0x6d6    auipc a5,0x8
    0x84015e1c    0x6da    addi a5,a5,-464 # ffffffff8401dc48 <current_syscall_error>
    0x84015e20    0x6de    li a4,2
    0x84015e22    0x6e0    sd a4,48(a5)
    0x84015e24    0x6e2    li a4,1
    0x84015e26    0x6e4    sd a4,8(a5)
    0x84015e28    0x6e6    li s0,3
    0x84015e2a    0x6e8    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015e2c    0x6ea    mv a0,s2
    0x84015e2e    0x6ec    jal ra,ffffffff84011d6e <ensureNoChildren>
    0x84015e32    0x6f0    mv s0,a0
    0x84015e34    0x6f2    bnez a0,ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015e36    0x6f4    slli s6,s3,0x19
    0x84015e3a    0x6f8    srli s6,s6,0x19
    0x84015e3e    0x6fc    slli a5,s3,0x19
    0x84015e42    0x700    bgez a5,ffffffff84015e4e <decodeRISCVMMUInvocation+0x70c>
    0x84015e46    0x704    li a5,-1
    0x84015e48    0x706    slli a5,a5,0x27
    0x84015e4a    0x708    or s6,s6,a5
    0x84015e4e    0x70c    mv a3,s5
    0x84015e50    0x70e    mv a2,s4
    0x84015e52    0x710    ld a0,48(sp)          ; stack access
    0x84015e54    0x712    ld a1,56(sp)          ; stack access
    0x84015e56    0x714    jal ra,ffffffff840111b6 <lookupTargetSlot>
    0x84015e5a    0x718    sd a0,64(sp)          ; stack access
    0x84015e5c    0x71a    sd a1,72(sp)          ; stack access
    0x84015e5e    0x71c    mv s0,a0
    0x84015e60    0x71e    bnez a0,ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015e64    0x722    mv s3,a1
    0x84015e66    0x724    mv a0,a1
    0x84015e68    0x726    jal ra,ffffffff840115e6 <ensureEmptySlot>
    0x84015e6c    0x72a    mv s0,a0
    0x84015e6e    0x72c    bnez a0,ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015e72    0x730    li a1,2
    0x84015e74    0x732    auipc a0,0x19
    0x84015e78    0x736    ld a0,-988(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015e7c    0x73a    jal ra,ffffffff840122d8 <setThreadState>
    0x84015e80    0x73e    ld a5,8(s2)
    0x84015e84    0x742    andi a4,a5,63
    0x84015e88    0x746    addiw a3,a4,-4
    0x84015e8c    0x74a    lui a4,0x2000
    0x84015e90    0x74e    sll a4,a4,a3
    0x84015e94    0x752    slli a5,a5,0x27
    0x84015e96    0x754    srli a5,a5,0x27
    0x84015e98    0x756    or a5,a5,a4
    0x84015e9a    0x758    sd a5,8(s2)
    0x84015e9e    0x75c    lui a1,0x1
    0x84015ea0    0x75e    mv a0,s6
    0x84015ea2    0x760    jal ra,ffffffff840156c0 <memzero>
    0x84015ea6    0x764    slli a5,s1,0x34
    0x84015eaa    0x768    lui a4,0xffff
    0x84015eae    0x76c    slli a4,a4,0x1f
    0x84015eb0    0x76e    and a5,a5,a4
    0x84015eb2    0x770    srli a4,s6,0x2
    0x84015eb6    0x774    li s4,-1
    0x84015eb8    0x776    srli a3,s4,0x1b
    0x84015ebc    0x77a    and a4,a4,a3
    0x84015ebe    0x77c    or a5,a5,a4
    0x84015ec0    0x77e    mv a3,s3
    0x84015ec2    0x780    mv a2,s2
    0x84015ec4    0x782    li a0,13
    0x84015ec6    0x784    slli a0,a0,0x3b
    0x84015ec8    0x786    or a0,a0,a5
    0x84015eca    0x788    li a1,0
    0x84015ecc    0x78a    jal ra,ffffffff84011286 <cteInsert>
    0x84015ed0    0x78e    srli a5,s4,0x9
    0x84015ed4    0x792    and a5,a5,s1
    0x84015ed6    0x794    slli a5,a5,0x3
    0x84015ed8    0x796    auipc a4,0x7
    0x84015edc    0x79a    addi a4,a4,-1712 # ffffffff8401c828 <riscvKSASIDTable>
    0x84015ee0    0x79e    add a5,a5,a4
    0x84015ee2    0x7a0    sd s6,0(a5)
    0x84015ee6    0x7a4    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015ee8    0x7a6    li a5,3
    0x84015eea    0x7a8    auipc a4,0x8
    0x84015eee    0x7ac    sd a5,-626(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015ef2    0x7b0    li s0,3
    0x84015ef4    0x7b2    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015ef6    0x7b4    li a5,7
    0x84015ef8    0x7b6    auipc a4,0x8
    0x84015efc    0x7ba    sd a5,-640(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015f00    0x7be    li s0,3
    0x84015f02    0x7c0    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015f04    0x7c2    auipc a5,0x8
    0x84015f08    0x7c6    addi a5,a5,-700 # ffffffff8401dc48 <current_syscall_error>
    0x84015f0c    0x7ca    li a4,2
    0x84015f0e    0x7cc    sd a4,48(a5)
    0x84015f10    0x7ce    li a4,1
    0x84015f12    0x7d0    sd a4,8(a5)
    0x84015f14    0x7d2    li s0,3
    0x84015f16    0x7d4    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015f18    0x7d6    auipc a5,0x8
    0x84015f1c    0x7da    addi a5,a5,-720 # ffffffff8401dc48 <current_syscall_error>
    0x84015f20    0x7de    li a4,6
    0x84015f22    0x7e0    sd a4,48(a5)
    0x84015f24    0x7e2    sd zero,40(a5)
    0x84015f28    0x7e6    auipc a5,0x8
    0x84015f2c    0x7ea    addi a5,a5,-760 # ffffffff8401dc30 <current_lookup_fault>
    0x84015f30    0x7ee    sd zero,0(a5)
    0x84015f34    0x7f2    sd zero,8(a5)
    0x84015f38    0x7f6    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015f3a    0x7f8    addi a5,a5,1
    0x84015f3c    0x7fa    beq a5,a2,ffffffff84015fc0 <decodeRISCVMMUInvocation+0x87e>
    0x84015f40    0x7fe    add a4,a5,a3
    0x84015f44    0x802    beqz a4,ffffffff84015f3a <decodeRISCVMMUInvocation+0x7f8>
    0x84015f46    0x804    slli a4,a5,0x3
    0x84015f4a    0x808    add a4,a4,s4
    0x84015f4c    0x80a    ld a4,0(a4)
    0x84015f4e    0x80c    bnez a4,ffffffff84015f3a <decodeRISCVMMUInvocation+0x7f8>
    0x84015f50    0x80e    li a4,512
    0x84015f54    0x812    beq a5,a4,ffffffff84015fc0 <decodeRISCVMMUInvocation+0x87e>
    0x84015f58    0x816    add s0,a5,a3
    0x84015f5c    0x81a    li a1,2
    0x84015f5e    0x81c    auipc a0,0x19
    0x84015f62    0x820    ld a0,-1222(a0) # ffffffff8402ea98 <ksCurThread>
    0x84015f66    0x824    jal ra,ffffffff840122d8 <setThreadState>
    0x84015f6a    0x828    ld a4,0(s3)
    0x84015f6e    0x82c    ld a5,8(s3)
    0x84015f72    0x830    srli a3,a5,0x9
    0x84015f76    0x834    slli s1,a3,0x19
    0x84015f7a    0x838    srli s1,s1,0x19
    0x84015f7c    0x83a    slli a2,a3,0x19
    0x84015f80    0x83e    bgez a2,ffffffff84015f8a <decodeRISCVMMUInvocation+0x848>
    0x84015f84    0x842    li a3,-1
    0x84015f86    0x844    slli a3,a3,0x27
    0x84015f88    0x846    or s1,s1,a3
    0x84015f8a    0x848    li a3,-1
    0x84015f8c    0x84a    slli a2,a3,0x28
    0x84015f90    0x84e    and a4,a4,a2
    0x84015f92    0x850    li a2,1
    0x84015f94    0x852    slli a2,a2,0x27
    0x84015f96    0x854    or a4,a4,a2
    0x84015f98    0x856    sd a4,0(s3)
    0x84015f9c    0x85a    srli a3,a3,0x10
    0x84015f9e    0x85c    and a5,a5,a3
    0x84015fa0    0x85e    slli a4,s0,0x30
    0x84015fa4    0x862    or a5,a5,a4
    0x84015fa6    0x864    sd a5,8(s3)
    0x84015faa    0x868    mv a0,s1
    0x84015fac    0x86a    jal ra,ffffffff84010398 <copyGlobalMappings>
    0x84015fb0    0x86e    andi a5,s0,511
    0x84015fb4    0x872    slli a5,a5,0x3
    0x84015fb6    0x874    add s4,s4,a5
    0x84015fb8    0x876    sd s1,0(s4)
    0x84015fbc    0x87a    mv s0,s2
    0x84015fbe    0x87c    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015fc0    0x87e    li a5,8
    0x84015fc2    0x880    auipc a4,0x8
    0x84015fc6    0x884    sd a5,-842(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84015fca    0x888    j ffffffff84015d62 <decodeRISCVMMUInvocation+0x620>
    0x84015fcc    0x88a    jal ra,ffffffff84010224 <halt>
    0x84015fd0    0x88e    lui a4,0x200
    0x84015fd4    0x892    addi a4,a4,-1
    0x84015fd6    0x894    add a4,a4,s8
    0x84015fd8    0x896    lui a5,0xfefff
    0x84015fdc    0x89a    slli a5,a5,0xe
    0x84015fde    0x89c    srli a5,a5,0x1a
    0x84015fe0    0x89e    bltu a5,a4,ffffffff84015c1e <decodeRISCVMMUInvocation+0x4dc>
    0x84015fe4    0x8a2    slli a5,s8,0x2b
    0x84015fe8    0x8a6    bnez a5,ffffffff84015c32 <decodeRISCVMMUInvocation+0x4f0>
    0x84015fec    0x8aa    mv a1,s8
    0x84015fee    0x8ac    mv a0,s3
    0x84015ff0    0x8ae    jal ra,ffffffff840105a0 <lookupPTSlot>
    0x84015ff4    0x8b2    mv s3,a0
    0x84015ff6    0x8b4    mv a5,a1
    0x84015ff8    0x8b6    sd a0,64(sp)          ; stack access
    0x84015ffa    0x8b8    sd a1,72(sp)          ; stack access
    0x84015ffc    0x8ba    li a4,21
    0x84015ffe    0x8bc    j ffffffff84015b58 <decodeRISCVMMUInvocation+0x416>
    0x84016000    0x8be    lui a4,0x40000
    0x84016004    0x8c2    addi a4,a4,-1
    0x84016006    0x8c4    add a4,a4,s8
    0x84016008    0x8c6    lui a5,0xfefff
    0x8401600c    0x8ca    slli a5,a5,0xe
    0x8401600e    0x8cc    srli a5,a5,0x1a
    0x84016010    0x8ce    bltu a5,a4,ffffffff84015c1e <decodeRISCVMMUInvocation+0x4dc>
    0x84016014    0x8d2    slli a5,s8,0x22
    0x84016018    0x8d6    bnez a5,ffffffff84015c32 <decodeRISCVMMUInvocation+0x4f0>
    0x8401601c    0x8da    mv a1,s8
    0x8401601e    0x8dc    mv a0,s3
    0x84016020    0x8de    jal ra,ffffffff840105a0 <lookupPTSlot>
    0x84016024    0x8e2    mv s3,a0
    0x84016026    0x8e4    mv a5,a1
    0x84016028    0x8e6    sd a0,64(sp)          ; stack access
    0x8401602a    0x8e8    sd a1,72(sp)          ; stack access
    0x8401602c    0x8ea    li a4,30
    0x8401602e    0x8ec    j ffffffff84015b58 <decodeRISCVMMUInvocation+0x416>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
776 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1134 nodes.

Section decodeTCBInvocation (264 of 266)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 143 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x8401537e      0x0    addi sp,sp,-48
    0x84015380      0x2    sd ra,40(sp)          ; stack access
    0x84015382      0x4    sd s0,32(sp)          ; stack access
    0x84015384      0x6    sd s1,24(sp)          ; stack access
    0x84015386      0x8    sd a2,0(sp)           ; stack access
    0x84015388      0xa    sd a3,8(sp)           ; stack access
    0x8401538a      0xc    mv a3,a4
    0x8401538c      0xe    li a4,15
    0x8401538e     0x10    bltu a4,a0,ffffffff840154e2 <decodeTCBInvocation+0x164>
    0x84015392     0x14    mv s0,a2
    0x84015394     0x16    slli a0,a0,0x2
    0x84015396     0x18    auipc a4,0x2
    0x8401539a     0x1c    addi a4,a4,1374 # ffffffff840178f4 <__global_pointer$+0x40>
    0x8401539e     0x20    add a0,a0,a4
    0x840153a0     0x22    lw a0,0(a0)
    0x840153a2     0x24    add a0,a0,a4
    0x840153a4     0x26    jr a0
    0x840153a6     0x28    mv a4,a6
    0x840153a8     0x2a    mv a3,a5
    0x840153aa     0x2c    mv a2,a1
    0x840153ac     0x2e    ld a0,0(sp)
    0x840153ae     0x30    ld a1,8(sp)
    0x840153b0     0x32    jal ra,ffffffff84015026 <decodeReadRegisters>
    0x840153b4     0x36    ld ra,40(sp)          ; stack access
    0x840153b6     0x38    ld s0,32(sp)          ; stack access
    0x840153b8     0x3a    ld s1,24(sp)          ; stack access
    0x840153ba     0x3c    addi sp,sp,48
    0x840153bc     0x3e    ret
    0x840153be     0x40    mv a3,a6
    0x840153c0     0x42    mv a2,a1
    0x840153c2     0x44    ld a0,0(sp)
    0x840153c4     0x46    ld a1,8(sp)
    0x840153c6     0x48    jal ra,ffffffff840151b0 <decodeWriteRegisters>
    0x840153ca     0x4c    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x840153cc     0x4e    mv a3,a6
    0x840153ce     0x50    mv a2,a1
    0x840153d0     0x52    ld a0,0(sp)
    0x840153d2     0x54    ld a1,8(sp)
    0x840153d4     0x56    jal ra,ffffffff84014e70 <decodeCopyRegisters>
    0x840153d8     0x5a    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x840153da     0x5c    li a1,2
    0x840153dc     0x5e    auipc a0,0x19
    0x840153e0     0x62    ld a0,1724(a0) # ffffffff8402ea98 <ksCurThread>
    0x840153e4     0x66    jal ra,ffffffff840122d8 <setThreadState>
    0x840153e8     0x6a    slli a0,s0,0x19
    0x840153ec     0x6e    srli a0,a0,0x19
    0x840153ee     0x70    slli a5,s0,0x19
    0x840153f2     0x74    bgez a5,ffffffff840153fc <decodeTCBInvocation+0x7e>
    0x840153f6     0x78    li a5,-1
    0x840153f8     0x7a    slli a5,a5,0x27
    0x840153fa     0x7c    or a0,a0,a5
    0x840153fc     0x7e    jal ra,ffffffff84012d8e <suspend>
    0x84015400     0x82    li a0,0
    0x84015402     0x84    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x84015404     0x86    li a1,2
    0x84015406     0x88    auipc a0,0x19
    0x8401540a     0x8c    ld a0,1682(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401540e     0x90    jal ra,ffffffff840122d8 <setThreadState>
    0x84015412     0x94    slli a0,s0,0x19
    0x84015416     0x98    srli a0,a0,0x19
    0x84015418     0x9a    slli a5,s0,0x19
    0x8401541c     0x9e    bgez a5,ffffffff84015426 <decodeTCBInvocation+0xa8>
    0x84015420     0xa2    li a5,-1
    0x84015422     0xa4    slli a5,a5,0x27
    0x84015424     0xa6    or a0,a0,a5
    0x84015426     0xa8    jal ra,ffffffff840137c4 <restart>
    0x8401542a     0xac    li a0,0
    0x8401542c     0xae    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x8401542e     0xb0    mv a4,a6
    0x84015430     0xb2    mv a2,a1
    0x84015432     0xb4    ld a0,0(sp)
    0x84015434     0xb6    ld a1,8(sp)
    0x84015436     0xb8    jal ra,ffffffff8401472e <decodeTCBConfigure>
    0x8401543a     0xbc    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x8401543c     0xbe    mv a3,a6
    0x8401543e     0xc0    mv a2,a1
    0x84015440     0xc2    ld a0,0(sp)
    0x84015442     0xc4    ld a1,8(sp)
    0x84015444     0xc6    jal ra,ffffffff8401490c <decodeSetPriority>
    0x84015448     0xca    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x8401544a     0xcc    mv a3,a6
    0x8401544c     0xce    mv a2,a1
    0x8401544e     0xd0    ld a0,0(sp)
    0x84015450     0xd2    ld a1,8(sp)
    0x84015452     0xd4    jal ra,ffffffff840149d4 <decodeSetMCPriority>
    0x84015456     0xd8    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x84015458     0xda    mv a3,a6
    0x8401545a     0xdc    mv a2,a1
    0x8401545c     0xde    ld a0,0(sp)
    0x8401545e     0xe0    ld a1,8(sp)
    0x84015460     0xe2    jal ra,ffffffff84014a9c <decodeSetSchedParams>
    0x84015464     0xe6    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x84015466     0xe8    mv a4,a6
    0x84015468     0xea    mv a2,a1
    0x8401546a     0xec    ld a0,0(sp)
    0x8401546c     0xee    ld a1,8(sp)
    0x8401546e     0xf0    jal ra,ffffffff84014b88 <decodeSetIPCBuffer>
    0x84015472     0xf4    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x84015474     0xf6    mv a4,a6
    0x84015476     0xf8    mv a2,a1
    0x84015478     0xfa    ld a0,0(sp)
    0x8401547a     0xfc    ld a1,8(sp)
    0x8401547c     0xfe    jal ra,ffffffff84014c42 <decodeSetSpace>
    0x84015480    0x102    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x84015482    0x104    ld a0,0(sp)
    0x84015484    0x106    ld a1,8(sp)
    0x84015486    0x108    jal ra,ffffffff8401525e <decodeBindNotification>
    0x8401548a    0x10c    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x8401548c    0x10e    ld a0,0(sp)
    0x8401548e    0x110    ld a1,8(sp)
    0x84015490    0x112    jal ra,ffffffff8401532e <decodeUnbindNotification>
    0x84015494    0x116    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x84015496    0x118    beqz a1,ffffffff840154d4 <decodeTCBInvocation+0x156>
    0x84015498    0x11a    auipc a0,0x19
    0x8401549c    0x11e    ld a0,1536(a0) # ffffffff8402ea98 <ksCurThread>
    0x840154a0    0x122    ld s1,88(a0)
    0x840154a2    0x124    li a1,2
    0x840154a4    0x126    jal ra,ffffffff840122d8 <setThreadState>
    0x840154a8    0x12a    slli a5,s0,0x19
    0x840154ac    0x12e    srli a5,a5,0x19
    0x840154ae    0x130    slli a4,s0,0x19
    0x840154b2    0x134    bgez a4,ffffffff840154bc <decodeTCBInvocation+0x13e>
    0x840154b6    0x138    li a4,-1
    0x840154b8    0x13a    slli a4,a4,0x27
    0x840154ba    0x13c    or a5,a5,a4
    0x840154bc    0x13e    sd s1,24(a5)
    0x840154be    0x140    auipc a4,0x19
    0x840154c2    0x144    ld a4,1498(a4) # ffffffff8402ea98 <ksCurThread>
    0x840154c6    0x148    li a0,0
    0x840154c8    0x14a    bne a5,a4,ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x840154cc    0x14e    jal ra,ffffffff84012272 <rescheduleRequired>
    0x840154d0    0x152    li a0,0
    0x840154d2    0x154    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x840154d4    0x156    li a5,7
    0x840154d6    0x158    auipc a4,0x8
    0x840154da    0x15c    sd a5,1954(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840154de    0x160    li a0,3
    0x840154e0    0x162    j ffffffff840153b4 <decodeTCBInvocation+0x36>
    0x840154e2    0x164    li a5,3
    0x840154e4    0x166    auipc a4,0x8
    0x840154e8    0x16a    sd a5,1940(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840154ec    0x16e    li a0,3
    0x840154ee    0x170    j ffffffff840153b4 <decodeTCBInvocation+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
143 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 213 nodes.

Section decodeCNodeInvocation (265 of 266)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 412 instructions.


Stack analysis
---------------

65 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x840131d6      0x0    addi sp,sp,-224
    0x840131d8      0x2    sd ra,216(sp)         ; stack access
    0x840131da      0x4    sd s0,208(sp)         ; stack access
    0x840131dc      0x6    sd s1,200(sp)         ; stack access
    0x840131de      0x8    sd s2,192(sp)         ; stack access
    0x840131e0      0xa    sd s3,184(sp)         ; stack access
    0x840131e2      0xc    sd s4,176(sp)         ; stack access
    0x840131e4      0xe    sd s5,168(sp)         ; stack access
    0x840131e6     0x10    sd s6,160(sp)         ; stack access
    0x840131e8     0x12    sd s7,152(sp)         ; stack access
    0x840131ea     0x14    sd a2,0(sp)           ; stack access
    0x840131ec     0x16    sd a3,8(sp)           ; stack access
    0x840131ee     0x18    addi a3,a0,-16 # fffffffff7fffff0 <ki_end+0x73fd0ff0>
    0x840131f2     0x1c    li a5,8
    0x840131f4     0x1e    bltu a5,a3,ffffffff840132a8 <decodeCNodeInvocation+0xd2>
    0x840131f8     0x22    mv s1,a0
    0x840131fa     0x24    mv s2,a1
    0x840131fc     0x26    mv s3,a4
    0x840131fe     0x28    li a5,1
    0x84013200     0x2a    bgeu a5,a1,ffffffff840132b6 <decodeCNodeInvocation+0xe0>
    0x84013204     0x2e    auipc a5,0x1c
    0x84013208     0x32    ld a5,-1900(a5) # ffffffff8402ea98 <ksCurThread>
    0x8401320c     0x36    ld a3,96(a5)
    0x8401320e     0x38    ld a2,88(a5)
    0x84013210     0x3a    ld a0,0(sp)           ; stack access
    0x84013212     0x3c    ld a1,8(sp)           ; stack access
    0x84013214     0x3e    jal ra,ffffffff840111b6 <lookupTargetSlot>
    0x84013218     0x42    sd a0,112(sp)         ; stack access
    0x8401321a     0x44    sd a1,120(sp)         ; stack access
    0x8401321c     0x46    mv s0,a0
    0x8401321e     0x48    bnez a0,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013220     0x4a    mv s4,a1
    0x84013222     0x4c    addi a5,s1,-19
    0x84013226     0x50    li a4,3
    0x84013228     0x52    bltu a4,a5,ffffffff8401340c <decodeCNodeInvocation+0x236>
    0x8401322c     0x56    li a5,3
    0x8401322e     0x58    bgeu a5,s2,ffffffff840132da <decodeCNodeInvocation+0x104>
    0x84013232     0x5c    auipc a5,0xb
    0x84013236     0x60    ld a5,-1458(a5) # ffffffff8401dc80 <current_extra_caps>
    0x8401323a     0x64    beqz a5,ffffffff840132da <decodeCNodeInvocation+0x104>
    0x8401323c     0x66    auipc a4,0x1c
    0x84013240     0x6a    ld a4,-1956(a4) # ffffffff8402ea98 <ksCurThread>
    0x84013244     0x6e    ld s6,104(a4)
    0x84013248     0x72    ld s5,112(a4)
    0x8401324c     0x76    ld a4,0(a5)
    0x8401324e     0x78    sd a4,24(sp)          ; stack access
    0x84013250     0x7a    ld a5,8(a5)
    0x84013252     0x7c    sd a5,32(sp)          ; stack access
    0x84013254     0x7e    mv a0,a1
    0x84013256     0x80    jal ra,ffffffff840115e6 <ensureEmptySlot>
    0x8401325a     0x84    mv s0,a0
    0x8401325c     0x86    bnez a0,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401325e     0x88    mv a3,s5
    0x84013260     0x8a    mv a2,s6
    0x84013262     0x8c    ld a0,24(sp)          ; stack access
    0x84013264     0x8e    ld a1,32(sp)          ; stack access
    0x84013266     0x90    jal ra,ffffffff8401119c <lookupSourceSlot>
    0x8401326a     0x94    sd a0,112(sp)         ; stack access
    0x8401326c     0x96    sd a1,120(sp)         ; stack access
    0x8401326e     0x98    mv s0,a0
    0x84013270     0x9a    bnez a0,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013272     0x9c    mv s6,a1
    0x84013274     0x9e    ld s7,0(a1) # ffffffffe0000000 <ki_end+0x5bfd1000>
    0x84013278     0xa2    srli a5,s7,0x3b
    0x8401327c     0xa6    beqz a5,ffffffff840132e8 <decodeCNodeInvocation+0x112>
    0x8401327e     0xa8    li a5,21
    0x84013280     0xaa    beq s1,a5,ffffffff840133a6 <decodeCNodeInvocation+0x1d0>
    0x84013284     0xae    bltu a5,s1,ffffffff840133ca <decodeCNodeInvocation+0x1f4>
    0x84013288     0xb2    li a5,19
    0x8401328a     0xb4    beq s1,a5,ffffffff84013316 <decodeCNodeInvocation+0x140>
    0x8401328e     0xb8    li a5,20
    0x84013290     0xba    bne s1,a5,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013294     0xbe    li a5,5
    0x84013296     0xc0    bltu a5,s2,ffffffff84013370 <decodeCNodeInvocation+0x19a>
    0x8401329a     0xc4    li a5,7
    0x8401329c     0xc6    auipc a4,0xb
    0x840132a0     0xca    sd a5,-1572(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840132a4     0xce    li s0,3
    0x840132a6     0xd0    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840132a8     0xd2    li a5,3
    0x840132aa     0xd4    auipc a4,0xb
    0x840132ae     0xd8    sd a5,-1586(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840132b2     0xdc    li s0,3
    0x840132b4     0xde    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840132b6     0xe0    li a5,7
    0x840132b8     0xe2    auipc a4,0xb
    0x840132bc     0xe6    sd a5,-1600(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840132c0     0xea    li s0,3
    0x840132c2     0xec    mv a0,s0
    0x840132c4     0xee    ld ra,216(sp)         ; stack access
    0x840132c6     0xf0    ld s0,208(sp)         ; stack access
    0x840132c8     0xf2    ld s1,200(sp)         ; stack access
    0x840132ca     0xf4    ld s2,192(sp)         ; stack access
    0x840132cc     0xf6    ld s3,184(sp)         ; stack access
    0x840132ce     0xf8    ld s4,176(sp)         ; stack access
    0x840132d0     0xfa    ld s5,168(sp)         ; stack access
    0x840132d2     0xfc    ld s6,160(sp)         ; stack access
    0x840132d4     0xfe    ld s7,152(sp)         ; stack access
    0x840132d6    0x100    addi sp,sp,224
    0x840132d8    0x102    ret
    0x840132da    0x104    li a5,7
    0x840132dc    0x106    auipc a4,0xb
    0x840132e0    0x10a    sd a5,-1636(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840132e4    0x10e    li s0,3
    0x840132e6    0x110    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840132e8    0x112    auipc a5,0xb
    0x840132ec    0x116    addi a5,a5,-1696 # ffffffff8401dc48 <current_syscall_error>
    0x840132f0    0x11a    li a4,6
    0x840132f2    0x11c    sd a4,48(a5)
    0x840132f4    0x11e    li a4,1
    0x840132f6    0x120    sd a4,40(a5)
    0x840132f8    0x122    auipc a4,0xb
    0x840132fc    0x126    addi a4,a4,-1736 # ffffffff8401dc30 <current_lookup_fault>
    0x84013300    0x12a    slli a5,s5,0x2
    0x84013304    0x12e    andi a5,a5,508
    0x84013308    0x132    ori a5,a5,1
    0x8401330c    0x136    sd a5,0(a4)
    0x8401330e    0x138    sd zero,8(a4)
    0x84013312    0x13c    li s0,3
    0x84013314    0x13e    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013316    0x140    li a5,4
    0x84013318    0x142    bltu a5,s2,ffffffff8401332a <decodeCNodeInvocation+0x154>
    0x8401331c    0x146    li a5,7
    0x8401331e    0x148    auipc a4,0xb
    0x84013322    0x14c    sd a5,-1702(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84013326    0x150    li s0,3
    0x84013328    0x152    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401332a    0x154    ld a1,0(a1)
    0x8401332c    0x156    ld a2,8(s6)
    0x84013330    0x15a    ld a0,40(s3)
    0x84013334    0x15e    jal ra,ffffffff84011fa6 <maskCapRights>
    0x84013338    0x162    mv a2,a0
    0x8401333a    0x164    mv a3,a1
    0x8401333c    0x166    mv a1,s6
    0x8401333e    0x168    addi a0,sp,88
    0x84013340    0x16a    jal ra,ffffffff84011dae <deriveCap>
    0x84013344    0x16e    ld a5,88(sp)          ; stack access
    0x84013346    0x170    bnez a5,ffffffff84013404 <decodeCNodeInvocation+0x22e>
    0x84013348    0x172    ld a5,104(sp)         ; stack access
    0x8401334a    0x174    sd a5,48(sp)          ; stack access
    0x8401334c    0x176    ld s1,96(sp)          ; stack access
    0x8401334e    0x178    srli a5,s1,0x3b
    0x84013352    0x17c    beqz a5,ffffffff840133e8 <decodeCNodeInvocation+0x212>
    0x84013354    0x17e    li a1,2
    0x84013356    0x180    auipc a0,0x1b
    0x8401335a    0x184    ld a0,1858(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401335e    0x188    jal ra,ffffffff840122d8 <setThreadState>
    0x84013362    0x18c    mv a3,s4
    0x84013364    0x18e    mv a2,s6
    0x84013366    0x190    mv a0,s1
    0x84013368    0x192    ld a1,48(sp)          ; stack access
    0x8401336a    0x194    jal ra,ffffffff84011286 <cteInsert>
    0x8401336e    0x198    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013370    0x19a    ld s1,48(s3)
    0x84013374    0x19e    ld a1,0(a1)
    0x84013376    0x1a0    ld a2,8(s6)
    0x8401337a    0x1a4    ld a0,40(s3)
    0x8401337e    0x1a8    jal ra,ffffffff84011fa6 <maskCapRights>
    0x84013382    0x1ac    mv a2,a0
    0x84013384    0x1ae    mv a3,a1
    0x84013386    0x1b0    mv a1,s1
    0x84013388    0x1b2    li a0,0
    0x8401338a    0x1b4    jal ra,ffffffff84011f14 <updateCapData>
    0x8401338e    0x1b8    mv a2,a0
    0x84013390    0x1ba    mv a3,a1
    0x84013392    0x1bc    mv a1,s6
    0x84013394    0x1be    addi a0,sp,88
    0x84013396    0x1c0    jal ra,ffffffff84011dae <deriveCap>
    0x8401339a    0x1c4    ld a5,88(sp)          ; stack access
    0x8401339c    0x1c6    bnez a5,ffffffff84013408 <decodeCNodeInvocation+0x232>
    0x8401339e    0x1c8    ld a5,104(sp)         ; stack access
    0x840133a0    0x1ca    sd a5,48(sp)          ; stack access
    0x840133a2    0x1cc    ld s1,96(sp)          ; stack access
    0x840133a4    0x1ce    j ffffffff8401334e <decodeCNodeInvocation+0x178>
    0x840133a6    0x1d0    ld a5,0(a1)
    0x840133a8    0x1d2    sd a5,40(sp)          ; stack access
    0x840133aa    0x1d4    ld a5,8(a1)
    0x840133ac    0x1d6    sd a5,48(sp)          ; stack access
    0x840133ae    0x1d8    li a1,2
    0x840133b0    0x1da    auipc a0,0x1b
    0x840133b4    0x1de    ld a0,1768(a0) # ffffffff8402ea98 <ksCurThread>
    0x840133b8    0x1e2    jal ra,ffffffff840122d8 <setThreadState>
    0x840133bc    0x1e6    mv a3,s4
    0x840133be    0x1e8    mv a2,s6
    0x840133c0    0x1ea    mv a0,s7
    0x840133c2    0x1ec    ld a1,48(sp)          ; stack access
    0x840133c4    0x1ee    jal ra,ffffffff840113c4 <cteMove>
    0x840133c8    0x1f2    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840133ca    0x1f4    li a5,4
    0x840133cc    0x1f6    bgeu a5,s2,ffffffff840133f6 <decodeCNodeInvocation+0x220>
    0x840133d0    0x1fa    ld a2,0(a1)
    0x840133d2    0x1fc    ld a3,8(a1)
    0x840133d4    0x1fe    ld a1,40(s3)
    0x840133d8    0x202    li a0,1
    0x840133da    0x204    jal ra,ffffffff84011f14 <updateCapData>
    0x840133de    0x208    sd a1,48(sp)          ; stack access
    0x840133e0    0x20a    mv s7,a0
    0x840133e2    0x20c    srli a0,a0,0x3b
    0x840133e4    0x20e    bnez a0,ffffffff84013646 <decodeCNodeInvocation+0x470>
    0x840133e8    0x212    li a5,3
    0x840133ea    0x214    auipc a4,0xb
    0x840133ee    0x218    sd a5,-1906(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840133f2    0x21c    li s0,3
    0x840133f4    0x21e    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840133f6    0x220    li a5,7
    0x840133f8    0x222    auipc a4,0xb
    0x840133fc    0x226    sd a5,-1920(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x84013400    0x22a    li s0,3
    0x84013402    0x22c    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013404    0x22e    mv s0,a5
    0x84013406    0x230    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013408    0x232    mv s0,a5
    0x8401340a    0x234    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401340c    0x236    li a5,16
    0x8401340e    0x238    beq s1,a5,ffffffff84013512 <decodeCNodeInvocation+0x33c>
    0x84013412    0x23c    li a5,17
    0x84013414    0x23e    beq s1,a5,ffffffff8401352a <decodeCNodeInvocation+0x354>
    0x84013418    0x242    li a5,24
    0x8401341a    0x244    beq s1,a5,ffffffff84013542 <decodeCNodeInvocation+0x36c>
    0x8401341e    0x248    li a5,18
    0x84013420    0x24a    beq s1,a5,ffffffff84013566 <decodeCNodeInvocation+0x390>
    0x84013424    0x24e    li a5,23
    0x84013426    0x250    bne s1,a5,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401342a    0x254    li a5,7
    0x8401342c    0x256    bgeu a5,s2,ffffffff8401359c <decodeCNodeInvocation+0x3c6>
    0x84013430    0x25a    auipc a5,0xb
    0x84013434    0x25e    ld a5,-1968(a5) # ffffffff8401dc80 <current_extra_caps>
    0x84013438    0x262    beqz a5,ffffffff8401359c <decodeCNodeInvocation+0x3c6>
    0x8401343c    0x266    auipc a4,0xb
    0x84013440    0x26a    ld a4,-1972(a4) # ffffffff8401dc88 <current_extra_caps+0x8>
    0x84013444    0x26e    beqz a4,ffffffff8401359c <decodeCNodeInvocation+0x3c6>
    0x84013448    0x272    auipc a3,0x1b
    0x8401344c    0x276    ld a3,1616(a3) # ffffffff8402ea98 <ksCurThread>
    0x84013450    0x27a    ld s5,104(a3)
    0x84013454    0x27e    ld s7,112(a3)
    0x84013458    0x282    ld s2,40(s3)
    0x8401345c    0x286    ld s6,48(s3)
    0x84013460    0x28a    ld s1,64(s3)
    0x84013464    0x28e    ld a3,0(a5)
    0x84013466    0x290    sd a3,40(sp)          ; stack access
    0x84013468    0x292    ld a5,8(a5)
    0x8401346a    0x294    sd a5,48(sp)          ; stack access
    0x8401346c    0x296    ld a0,0(a4)
    0x8401346e    0x298    sd a0,56(sp)          ; stack access
    0x84013470    0x29a    ld a1,8(a4)
    0x84013472    0x29c    sd a1,64(sp)          ; stack access
    0x84013474    0x29e    mv a3,s1
    0x84013476    0x2a0    ld a2,56(s3)
    0x8401347a    0x2a4    jal ra,ffffffff8401119c <lookupSourceSlot>
    0x8401347e    0x2a8    sd a1,120(sp)         ; stack access
    0x84013480    0x2aa    mv s0,a0
    0x84013482    0x2ac    bnez a0,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013486    0x2b0    mv s3,a1
    0x84013488    0x2b2    mv a3,s2
    0x8401348a    0x2b4    mv a2,s7
    0x8401348c    0x2b6    ld a0,40(sp)          ; stack access
    0x8401348e    0x2b8    ld a1,48(sp)          ; stack access
    0x84013490    0x2ba    jal ra,ffffffff840111d0 <lookupPivotSlot>
    0x84013494    0x2be    sd a0,112(sp)         ; stack access
    0x84013496    0x2c0    sd a1,120(sp)         ; stack access
    0x84013498    0x2c2    mv s0,a0
    0x8401349a    0x2c4    bnez a0,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401349e    0x2c8    mv s7,a1
    0x840134a0    0x2ca    beq a1,s3,ffffffff840135aa <decodeCNodeInvocation+0x3d4>
    0x840134a4    0x2ce    beq a1,s4,ffffffff840135aa <decodeCNodeInvocation+0x3d4>
    0x840134a8    0x2d2    beq s4,s3,ffffffff840134b8 <decodeCNodeInvocation+0x2e2>
    0x840134ac    0x2d6    mv a0,s4
    0x840134ae    0x2d8    jal ra,ffffffff840115e6 <ensureEmptySlot>
    0x840134b2    0x2dc    mv s0,a0
    0x840134b4    0x2de    bnez a0,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840134b8    0x2e2    ld a5,0(s3)
    0x840134bc    0x2e6    srli a5,a5,0x3b
    0x840134be    0x2e8    beqz a5,ffffffff840135b8 <decodeCNodeInvocation+0x3e2>
    0x840134c2    0x2ec    ld a5,0(s7)
    0x840134c6    0x2f0    srli a5,a5,0x3b
    0x840134c8    0x2f2    beqz a5,ffffffff840135e6 <decodeCNodeInvocation+0x410>
    0x840134cc    0x2f6    ld a2,0(s3)
    0x840134d0    0x2fa    ld a3,8(s3)
    0x840134d4    0x2fe    mv a1,s6
    0x840134d6    0x300    li a0,1
    0x840134d8    0x302    jal ra,ffffffff84011f14 <updateCapData>
    0x840134dc    0x306    mv s0,a0
    0x840134de    0x308    sd a0,72(sp)          ; stack access
    0x840134e0    0x30a    sd a1,80(sp)          ; stack access
    0x840134e2    0x30c    ld a2,0(s7)
    0x840134e6    0x310    ld a3,8(s7)
    0x840134ea    0x314    mv a1,s5
    0x840134ec    0x316    li a0,1
    0x840134ee    0x318    jal ra,ffffffff84011f14 <updateCapData>
    0x840134f2    0x31c    sd a0,88(sp)          ; stack access
    0x840134f4    0x31e    sd a1,96(sp)          ; stack access
    0x840134f6    0x320    srli s0,s0,0x3b
    0x840134f8    0x322    beqz s0,ffffffff84013614 <decodeCNodeInvocation+0x43e>
    0x840134fc    0x326    ld a5,88(sp)          ; stack access
    0x840134fe    0x328    srli a5,a5,0x3b
    0x84013500    0x32a    bnez a5,ffffffff84013622 <decodeCNodeInvocation+0x44c>
    0x84013504    0x32e    li a5,3
    0x84013506    0x330    auipc a4,0xa
    0x8401350a    0x334    sd a5,1906(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x8401350e    0x338    li s0,3
    0x84013510    0x33a    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013512    0x33c    li a1,2
    0x84013514    0x33e    auipc a0,0x1b
    0x84013518    0x342    ld a0,1412(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401351c    0x346    jal ra,ffffffff840122d8 <setThreadState>
    0x84013520    0x34a    mv a0,s4
    0x84013522    0x34c    jal ra,ffffffff84013144 <cteRevoke>
    0x84013526    0x350    mv s0,a0
    0x84013528    0x352    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401352a    0x354    li a1,2
    0x8401352c    0x356    auipc a0,0x1b
    0x84013530    0x35a    ld a0,1388(a0) # ffffffff8402ea98 <ksCurThread>
    0x84013534    0x35e    jal ra,ffffffff840122d8 <setThreadState>
    0x84013538    0x362    mv a0,s4
    0x8401353a    0x364    jal ra,ffffffff84013134 <invokeCNodeDelete>
    0x8401353e    0x368    mv s0,a0
    0x84013540    0x36a    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013542    0x36c    mv a0,a1
    0x84013544    0x36e    jal ra,ffffffff840115e6 <ensureEmptySlot>
    0x84013548    0x372    mv s0,a0
    0x8401354a    0x374    bnez a0,ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401354e    0x378    li a1,2
    0x84013550    0x37a    auipc a0,0x1b
    0x84013554    0x37e    ld a0,1352(a0) # ffffffff8402ea98 <ksCurThread>
    0x84013558    0x382    jal ra,ffffffff840122d8 <setThreadState>
    0x8401355c    0x386    mv a0,s4
    0x8401355e    0x388    jal ra,ffffffff8401142e <invokeCNodeSaveCaller>
    0x84013562    0x38c    mv s0,a0
    0x84013564    0x38e    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013566    0x390    ld a0,0(a1)
    0x84013568    0x392    sd a0,88(sp)          ; stack access
    0x8401356a    0x394    ld a1,8(a1)
    0x8401356c    0x396    sd a1,96(sp)          ; stack access
    0x8401356e    0x398    jal ra,ffffffff84011880 <hasCancelSendRights>
    0x84013572    0x39c    bnez a0,ffffffff84013582 <decodeCNodeInvocation+0x3ac>
    0x84013574    0x39e    li a5,3
    0x84013576    0x3a0    auipc a4,0xa
    0x8401357a    0x3a4    sd a5,1794(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x8401357e    0x3a8    li s0,3
    0x84013580    0x3aa    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013582    0x3ac    li a1,2
    0x84013584    0x3ae    auipc a0,0x1b
    0x84013588    0x3b2    ld a0,1300(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401358c    0x3b6    jal ra,ffffffff840122d8 <setThreadState>
    0x84013590    0x3ba    ld a0,88(sp)          ; stack access
    0x84013592    0x3bc    ld a1,96(sp)          ; stack access
    0x84013594    0x3be    jal ra,ffffffff84012c12 <invokeCNodeCancelBadgedSends>
    0x84013598    0x3c2    mv s0,a0
    0x8401359a    0x3c4    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x8401359c    0x3c6    li a5,7
    0x8401359e    0x3c8    auipc a4,0xa
    0x840135a2    0x3cc    sd a5,1754(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840135a6    0x3d0    li s0,3
    0x840135a8    0x3d2    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840135aa    0x3d4    li a5,3
    0x840135ac    0x3d6    auipc a4,0xa
    0x840135b0    0x3da    sd a5,1740(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x840135b4    0x3de    li s0,3
    0x840135b6    0x3e0    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840135b8    0x3e2    auipc a5,0xa
    0x840135bc    0x3e6    addi a5,a5,1680 # ffffffff8401dc48 <current_syscall_error>
    0x840135c0    0x3ea    li a4,6
    0x840135c2    0x3ec    sd a4,48(a5)
    0x840135c4    0x3ee    li a4,1
    0x840135c6    0x3f0    sd a4,40(a5)
    0x840135c8    0x3f2    auipc a4,0xa
    0x840135cc    0x3f6    addi a4,a4,1640 # ffffffff8401dc30 <current_lookup_fault>
    0x840135d0    0x3fa    slli a5,s1,0x2
    0x840135d4    0x3fe    andi a5,a5,508
    0x840135d8    0x402    ori a5,a5,1
    0x840135dc    0x406    sd a5,0(a4)
    0x840135de    0x408    sd zero,8(a4)
    0x840135e2    0x40c    li s0,3
    0x840135e4    0x40e    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x840135e6    0x410    auipc a5,0xa
    0x840135ea    0x414    addi a5,a5,1634 # ffffffff8401dc48 <current_syscall_error>
    0x840135ee    0x418    li a4,6
    0x840135f0    0x41a    sd a4,48(a5)
    0x840135f2    0x41c    sd zero,40(a5)
    0x840135f6    0x420    auipc a4,0xa
    0x840135fa    0x424    addi a4,a4,1594 # ffffffff8401dc30 <current_lookup_fault>
    0x840135fe    0x428    slli a5,s2,0x2
    0x84013602    0x42c    andi a5,a5,508
    0x84013606    0x430    ori a5,a5,1
    0x8401360a    0x434    sd a5,0(a4)
    0x8401360c    0x436    sd zero,8(a4)
    0x84013610    0x43a    li s0,3
    0x84013612    0x43c    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013614    0x43e    li a5,3
    0x84013616    0x440    auipc a4,0xa
    0x8401361a    0x444    sd a5,1634(a4) # ffffffff8401dc78 <current_syscall_error+0x30>
    0x8401361e    0x448    li s0,3
    0x84013620    0x44a    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013622    0x44c    li a1,2
    0x84013624    0x44e    auipc a0,0x1b
    0x84013628    0x452    ld a0,1140(a0) # ffffffff8402ea98 <ksCurThread>
    0x8401362c    0x456    jal ra,ffffffff840122d8 <setThreadState>
    0x84013630    0x45a    mv a6,s4
    0x84013632    0x45c    mv a5,s7
    0x84013634    0x45e    mv a4,s3
    0x84013636    0x460    ld a2,88(sp)          ; stack access
    0x84013638    0x462    ld a3,96(sp)          ; stack access
    0x8401363a    0x464    ld a0,72(sp)          ; stack access
    0x8401363c    0x466    ld a1,80(sp)          ; stack access
    0x8401363e    0x468    jal ra,ffffffff84011500 <invokeCNodeRotate>
    0x84013642    0x46c    mv s0,a0
    0x84013644    0x46e    j ffffffff840132c2 <decodeCNodeInvocation+0xec>
    0x84013646    0x470    li a1,2
    0x84013648    0x472    auipc a0,0x1b
    0x8401364c    0x476    ld a0,1104(a0) # ffffffff8402ea98 <ksCurThread>
    0x84013650    0x47a    jal ra,ffffffff840122d8 <setThreadState>
    0x84013654    0x47e    j ffffffff840133bc <decodeCNodeInvocation+0x1e6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
412 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 664 nodes.

Section init_kernel (266 of 266)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 321 instructions.

Skipping 10579073 csrw stvec,a5

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp


Stack analysis
---------------

78 stack accesses found. Annotated code for `init_kernel`:

    0x84002846      0x0    addi sp,sp,-272
    0x84002848      0x2    sd ra,264(sp)         ; stack access
    0x8400284a      0x4    sd s0,256(sp)         ; stack access
    0x8400284c      0x6    sd s1,248(sp)         ; stack access
    0x8400284e      0x8    sd s2,240(sp)         ; stack access
    0x84002850      0xa    sd s3,232(sp)         ; stack access
    0x84002852      0xc    sd s4,224(sp)         ; stack access
    0x84002854      0xe    sd s5,216(sp)         ; stack access
    0x84002856     0x10    sd s6,208(sp)         ; stack access
    0x84002858     0x12    sd s7,200(sp)         ; stack access
    0x8400285a     0x14    sd s8,192(sp)         ; stack access
    0x8400285c     0x16    sd s9,184(sp)         ; stack access
    0x8400285e     0x18    sd s10,176(sp)        ; stack access
    0x84002860     0x1a    mv s5,a3
    0x84002862     0x1c    li s1,-1
    0x84002864     0x1e    slli s1,s1,0x26
    0x84002866     0x20    add s6,a0,s1
    0x8400286a     0x24    add s1,s1,a1
    0x8400286c     0x26    sd s6,88(sp)          ; stack access
    0x8400286e     0x28    sd s1,96(sp)          ; stack access
    0x84002870     0x2a    slli s4,a2,0x20
    0x84002874     0x2e    srli s4,s4,0x20
    0x84002878     0x32    sub s0,a0,s4
    0x8400287c     0x36    sub s2,a1,s4
    0x84002880     0x3a    lui s3,0x2
    0x84002882     0x3c    add s3,s3,s2
    0x84002884     0x3e    jal ra,ffffffff84000a7c <map_kernel_window>
    0x84002888     0x42    jal ra,ffffffff84000138 <activate_kernel_vspace>
    0x8400288c     0x46    auipc a5,0xd
    0x84002890     0x4a    addi a5,a5,1908 # ffffffff84010000 <ki_boot_end>
    0x84002894     0x4e    csrw stvec,a5
    0x84002898     0x52    jal ra,ffffffff840008cc <initLocalIRQController>
    0x8400289c     0x56    jal ra,ffffffff840008b6 <initTimer>
    0x840028a0     0x5a    jal ra,ffffffff84000910 <initIRQController>
    0x840028a4     0x5e    sd s0,152(sp)         ; stack access
    0x840028a6     0x60    sd s3,160(sp)         ; stack access
    0x840028a8     0x62    auipc a5,0x0
    0x840028ac     0x66    addi a5,a5,800 # ffffffff84002bc8 <ndks_boot>
    0x840028b0     0x6a    li a4,-127
    0x840028b4     0x6e    slli a4,a4,0x1f
    0x840028b6     0x70    sd a4,952(a5)
    0x840028ba     0x74    auipc a4,0x2c
    0x840028be     0x78    addi a4,a4,1862 # ffffffff8402f000 <ki_end>
    0x840028c2     0x7c    li a3,-63
    0x840028c6     0x80    slli a3,a3,0x20
    0x840028c8     0x82    add a4,a4,a3
    0x840028ca     0x84    sd a4,960(a5)
    0x840028ce     0x88    sd s6,968(a5)
    0x840028d2     0x8c    sd s1,976(a5)
    0x840028d6     0x90    li a6,0
    0x840028d8     0x92    mv a4,s0
    0x840028da     0x94    mv a5,s3
    0x840028dc     0x96    auipc a3,0x0
    0x840028e0     0x9a    addi a3,a3,1700 # ffffffff84002f80 <res_reg>
    0x840028e4     0x9e    li a2,2
    0x840028e6     0xa0    auipc a1,0x0
    0x840028ea     0xa4    addi a1,a1,722 # ffffffff84002bb8 <avail_p_regs>
    0x840028ee     0xa8    li a0,1
    0x840028f0     0xaa    jal ra,ffffffff840024ee <init_freemem>
    0x840028f4     0xae    jal ra,ffffffff84000baa <create_root_cnode>
    0x840028f8     0xb2    sd a0,24(sp)          ; stack access
    0x840028fa     0xb4    sd a1,32(sp)          ; stack access
    0x840028fc     0xb6    srli s7,a0,0x3b
    0x84002900     0xba    bnez s7,ffffffff84002908 <init_kernel+0xc2>
    0x84002904     0xbe    jal ra,ffffffff84010224 <halt>
    0x84002908     0xc2    mv s1,a0
    0x8400290a     0xc4    jal ra,ffffffff84000be6 <create_domain_cap>
    0x8400290e     0xc8    ld s8,32(sp)          ; stack access
    0x84002910     0xca    li s9,1
    0x84002912     0xcc    li s6,0
    0x84002914     0xce    li s10,54
    0x84002918     0xd2    j ffffffff8400291e <init_kernel+0xd8>
    0x8400291a     0xd4    addi s6,s6,1
    0x8400291c     0xd6    addi s9,s9,1
    0x8400291e     0xd8    beqz s6,ffffffff8400291a <init_kernel+0xd4>
    0x84002922     0xdc    mv a1,s6
    0x84002924     0xde    li a0,0
    0x84002926     0xe0    jal ra,ffffffff84011696 <setIRQState>
    0x8400292a     0xe4    bgeu s10,s9,ffffffff8400291a <init_kernel+0xd4>
    0x8400292e     0xe8    li a1,54
    0x84002932     0xec    li a0,2
    0x84002934     0xee    jal ra,ffffffff84011696 <setIRQState>
    0x84002938     0xf2    sext.w s7,s7
    0x8400293a     0xf4    li a5,20
    0x8400293c     0xf6    bltu a5,s7,ffffffff840029ec <init_kernel+0x1a6>
    0x84002940     0xfa    slli a4,s7,0x2
    0x84002944     0xfe    auipc a3,0x15
    0x84002948    0x102    addi a3,a3,228 # ffffffff84017a28 <__global_pointer$+0x174>
    0x8400294c    0x106    add a4,a4,a3
    0x8400294e    0x108    lw a5,0(a4)
    0x84002950    0x10a    add a5,a5,a3
    0x84002952    0x10c    jr a5
    0x84002954    0x10e    slli a5,s1,0x19
    0x84002958    0x112    srli a5,a5,0x19
    0x8400295a    0x114    slli a4,s1,0x19
    0x8400295e    0x118    bgez a4,ffffffff84002a50 <init_kernel+0x20a>
    0x84002962    0x11c    li a4,-1
    0x84002964    0x11e    slli a4,a4,0x27
    0x84002966    0x120    or a5,a5,a4
    0x84002968    0x122    j ffffffff84002a50 <init_kernel+0x20a>
    0x8400296a    0x124    slli a5,s1,0x19
    0x8400296e    0x128    srli a5,a5,0x19
    0x84002970    0x12a    slli a4,s1,0x19
    0x84002974    0x12e    bgez a4,ffffffff84002a50 <init_kernel+0x20a>
    0x84002978    0x132    li a4,-1
    0x8400297a    0x134    slli a4,a4,0x27
    0x8400297c    0x136    or a5,a5,a4
    0x8400297e    0x138    j ffffffff84002a50 <init_kernel+0x20a>
    0x84002980    0x13a    slli a5,s1,0x19
    0x84002984    0x13e    srli a5,a5,0x19
    0x84002986    0x140    slli a4,s1,0x19
    0x8400298a    0x144    bgez a4,ffffffff84002a50 <init_kernel+0x20a>
    0x8400298e    0x148    li a4,-1
    0x84002990    0x14a    slli a4,a4,0x27
    0x84002992    0x14c    or a5,a5,a4
    0x84002994    0x14e    j ffffffff84002a50 <init_kernel+0x20a>
    0x84002996    0x150    slli s1,s1,0x1
    0x84002998    0x152    lui a5,0xfc000
    0x8400299c    0x156    srli a5,a5,0x19
    0x8400299e    0x158    and a5,a5,s1
    0x840029a0    0x15a    slli a4,s1,0x19
    0x840029a4    0x15e    bgez a4,ffffffff84002a50 <init_kernel+0x20a>
    0x840029a8    0x162    li a4,-1
    0x840029aa    0x164    slli a4,a4,0x27
    0x840029ac    0x166    or a5,a5,a4
    0x840029ae    0x168    j ffffffff84002a50 <init_kernel+0x20a>
    0x840029b0    0x16a    slli a5,s1,0x19
    0x840029b4    0x16e    srli a5,a5,0x19
    0x840029b6    0x170    slli a4,s1,0x19
    0x840029ba    0x174    bgez a4,ffffffff840029c4 <init_kernel+0x17e>
    0x840029be    0x178    li a4,-1
    0x840029c0    0x17a    slli a4,a4,0x27
    0x840029c2    0x17c    or a5,a5,a4
    0x840029c4    0x17e    andi a5,a5,-1024
    0x840029c8    0x182    j ffffffff84002a50 <init_kernel+0x20a>
    0x840029ca    0x184    andi a5,s1,127
    0x840029ce    0x188    li a4,64
    0x840029d2    0x18c    beq a5,a4,ffffffff840029e8 <init_kernel+0x1a2>
    0x840029d6    0x190    andi s1,s1,63
    0x840029da    0x194    addiw s1,s1,1
    0x840029dc    0x196    li a5,-1
    0x840029de    0x198    sll a5,a5,s1
    0x840029e2    0x19c    and a5,a5,s8
    0x840029e6    0x1a0    j ffffffff84002a50 <init_kernel+0x20a>
    0x840029e8    0x1a2    li s1,4
    0x840029ea    0x1a4    j ffffffff840029da <init_kernel+0x194>
    0x840029ec    0x1a6    li a5,3
    0x840029ee    0x1a8    beq s7,a5,ffffffff84002a1a <init_kernel+0x1d4>
    0x840029f2    0x1ac    li a5,13
    0x840029f4    0x1ae    beq s7,a5,ffffffff84002a34 <init_kernel+0x1ee>
    0x840029f8    0x1b2    li a4,1
    0x840029fa    0x1b4    li a5,0
    0x840029fc    0x1b6    bne s7,a4,ffffffff84002a50 <init_kernel+0x20a>
    0x84002a00    0x1ba    srli s8,s8,0x9
    0x84002a04    0x1be    slli a5,s8,0x19
    0x84002a08    0x1c2    srli a5,a5,0x19
    0x84002a0a    0x1c4    slli a4,s8,0x19
    0x84002a0e    0x1c8    bgez a4,ffffffff84002a50 <init_kernel+0x20a>
    0x84002a12    0x1cc    li a4,-1
    0x84002a14    0x1ce    slli a4,a4,0x27
    0x84002a16    0x1d0    or a5,a5,a4
    0x84002a18    0x1d2    j ffffffff84002a50 <init_kernel+0x20a>
    0x84002a1a    0x1d4    srli s8,s8,0x9
    0x84002a1e    0x1d8    slli a5,s8,0x19
    0x84002a22    0x1dc    srli a5,a5,0x19
    0x84002a24    0x1de    slli a4,s8,0x19
    0x84002a28    0x1e2    bgez a4,ffffffff84002a50 <init_kernel+0x20a>
    0x84002a2c    0x1e6    li a4,-1
    0x84002a2e    0x1e8    slli a4,a4,0x27
    0x84002a30    0x1ea    or a5,a5,a4
    0x84002a32    0x1ec    j ffffffff84002a50 <init_kernel+0x20a>
    0x84002a34    0x1ee    slli s1,s1,0x2
    0x84002a36    0x1f0    lui a5,0xf8000
    0x84002a3a    0x1f4    srli a5,a5,0x19
    0x84002a3c    0x1f6    and a5,a5,s1
    0x84002a3e    0x1f8    slli a4,s1,0x19
    0x84002a42    0x1fc    bgez a4,ffffffff84002a50 <init_kernel+0x20a>
    0x84002a46    0x200    li a4,-1
    0x84002a48    0x202    slli a4,a4,0x27
    0x84002a4a    0x204    or a5,a5,a4
    0x84002a4c    0x206    j ffffffff84002a50 <init_kernel+0x20a>
    0x84002a4e    0x208    li a5,0
    0x84002a50    0x20a    li a4,7
    0x84002a52    0x20c    slli a4,a4,0x3c
    0x84002a54    0x20e    sd a4,128(a5)
    0x84002a56    0x210    sd zero,136(a5) # fffffffff8000088 <ki_end+0x73fd1088>
    0x84002a5a    0x214    sd zero,144(a5)
    0x84002a5e    0x218    li a4,3
    0x84002a60    0x21a    sd a4,152(a5)
    0x84002a62    0x21c    li a3,0
    0x84002a64    0x21e    mv a2,s2
    0x84002a66    0x220    li a1,1
    0x84002a68    0x222    li a0,0
    0x84002a6a    0x224    jal ra,ffffffff8400230a <populate_bi_frame>
    0x84002a6e    0x228    mv a2,s0
    0x84002a70    0x22a    mv a3,s3
    0x84002a72    0x22c    ld a0,24(sp)          ; stack access
    0x84002a74    0x22e    ld a1,32(sp)          ; stack access
    0x84002a76    0x230    jal ra,ffffffff8400101a <create_it_address_space>
    0x84002a7a    0x234    sd a0,40(sp)          ; stack access
    0x84002a7c    0x236    sd a1,48(sp)          ; stack access
    0x84002a7e    0x238    srli a0,a0,0x3b
    0x84002a80    0x23a    beqz a0,ffffffff84002904 <init_kernel+0xbe>
    0x84002a84    0x23e    lui s0,0x1
    0x84002a86    0x240    add s0,s0,s2
    0x84002a88    0x242    mv a4,s0
    0x84002a8a    0x244    ld a2,40(sp)          ; stack access
    0x84002a8c    0x246    mv a3,a1
    0x84002a8e    0x248    ld a0,24(sp)          ; stack access
    0x84002a90    0x24a    ld a1,32(sp)          ; stack access
    0x84002a92    0x24c    jal ra,ffffffff84000d16 <create_bi_frame_cap>
    0x84002a96    0x250    mv a4,s2
    0x84002a98    0x252    ld a2,40(sp)          ; stack access
    0x84002a9a    0x254    ld a3,48(sp)          ; stack access
    0x84002a9c    0x256    ld a0,24(sp)          ; stack access
    0x84002a9e    0x258    ld a1,32(sp)          ; stack access
    0x84002aa0    0x25a    jal ra,ffffffff84002196 <create_ipcbuf_frame_cap>
    0x84002aa4    0x25e    sd a0,72(sp)          ; stack access
    0x84002aa6    0x260    sd a1,80(sp)          ; stack access
    0x84002aa8    0x262    srli a0,a0,0x3b
    0x84002aaa    0x264    beqz a0,ffffffff84002904 <init_kernel+0xbe>
    0x84002aae    0x268    sd s4,0(sp)           ; stack access
    0x84002ab0    0x26a    li a7,1
    0x84002ab2    0x26c    ld a5,88(sp)          ; stack access
    0x84002ab4    0x26e    ld a6,96(sp)          ; stack access
    0x84002ab6    0x270    ld a3,40(sp)          ; stack access
    0x84002ab8    0x272    ld a4,48(sp)          ; stack access
    0x84002aba    0x274    ld a1,24(sp)          ; stack access
    0x84002abc    0x276    ld a2,32(sp)          ; stack access
    0x84002abe    0x278    addi a0,sp,152
    0x84002ac0    0x27a    jal ra,ffffffff84001278 <create_frames_of_region>
    0x84002ac4    0x27e    ld a5,168(sp)         ; stack access
    0x84002ac6    0x280    beqz a5,ffffffff84002904 <init_kernel+0xbe>
    0x84002aca    0x284    auipc a5,0x0
    0x84002ace    0x288    ld a5,838(a5) # ffffffff84002e10 <ndks_boot+0x248>
    0x84002ad2    0x28c    ld a4,152(sp)         ; stack access
    0x84002ad4    0x28e    sd a4,72(a5)
    0x84002ad6    0x290    ld a4,160(sp)         ; stack access
    0x84002ad8    0x292    sd a4,80(a5)
    0x84002ada    0x294    ld a0,24(sp)          ; stack access
    0x84002adc    0x296    ld a1,32(sp)          ; stack access
    0x84002ade    0x298    jal ra,ffffffff84001346 <create_it_asid_pool>
    0x84002ae2    0x29c    sd a0,56(sp)          ; stack access
    0x84002ae4    0x29e    sd a1,64(sp)          ; stack access
    0x84002ae6    0x2a0    srli a0,a0,0x3b
    0x84002ae8    0x2a2    beqz a0,ffffffff84002904 <init_kernel+0xbe>
    0x84002aec    0x2a6    ld a2,40(sp)          ; stack access
    0x84002aee    0x2a8    ld a3,48(sp)          ; stack access
    0x84002af0    0x2aa    ld a0,56(sp)          ; stack access
    0x84002af2    0x2ac    jal ra,ffffffff8400015e <write_it_asid_pool>
    0x84002af6    0x2b0    jal ra,ffffffff84002176 <create_idle_thread>
    0x84002afa    0x2b4    beqz a0,ffffffff84002904 <init_kernel+0xbe>
    0x84002afe    0x2b8    ld a5,80(sp)          ; stack access
    0x84002b00    0x2ba    sd a5,0(sp)           ; stack access
    0x84002b02    0x2bc    ld a7,72(sp)          ; stack access
    0x84002b04    0x2be    mv a6,s2
    0x84002b06    0x2c0    mv a5,s0
    0x84002b08    0x2c2    mv a4,s5
    0x84002b0a    0x2c4    ld a2,40(sp)          ; stack access
    0x84002b0c    0x2c6    ld a3,48(sp)          ; stack access
    0x84002b0e    0x2c8    ld a0,24(sp)          ; stack access
    0x84002b10    0x2ca    ld a1,32(sp)          ; stack access
    0x84002b12    0x2cc    jal ra,ffffffff8400183a <create_initial_thread>
    0x84002b16    0x2d0    beqz a0,ffffffff84002904 <init_kernel+0xbe>
    0x84002b1a    0x2d4    jal ra,ffffffff840015f8 <init_core_state>
    0x84002b1e    0x2d8    ld a0,24(sp)          ; stack access
    0x84002b20    0x2da    sd a0,120(sp)         ; stack access
    0x84002b22    0x2dc    ld a1,32(sp)          ; stack access
    0x84002b24    0x2de    sd a1,128(sp)         ; stack access
    0x84002b26    0x2e0    lui a5,0xff021
    0x84002b2a    0x2e4    slli a5,a5,0xe
    0x84002b2c    0x2e6    sd a5,136(sp)         ; stack access
    0x84002b2e    0x2e8    auipc a5,0xd
    0x84002b32    0x2ec    addi a5,a5,1234 # ffffffff84010000 <ki_boot_end>
    0x84002b36    0x2f0    li a4,-63
    0x84002b3a    0x2f4    slli a4,a4,0x20
    0x84002b3c    0x2f6    add a5,a5,a4
    0x84002b3e    0x2f8    sd a5,144(sp)         ; stack access
    0x84002b40    0x2fa    auipc s1,0x0
    0x84002b44    0x2fe    addi s1,s1,136 # ffffffff84002bc8 <ndks_boot>
    0x84002b48    0x302    ld s0,592(s1)
    0x84002b4c    0x306    mv a2,s0
    0x84002b4e    0x308    jal ra,ffffffff84001728 <create_device_untypeds>
    0x84002b52    0x30c    mv a4,s0
    0x84002b54    0x30e    ld a2,136(sp)         ; stack access
    0x84002b56    0x310    ld a3,144(sp)         ; stack access
    0x84002b58    0x312    ld a0,120(sp)         ; stack access
    0x84002b5a    0x314    ld a1,128(sp)         ; stack access
    0x84002b5c    0x316    jal ra,ffffffff840017c2 <create_kernel_untypeds>
    0x84002b60    0x31a    ld a4,592(s1)
    0x84002b64    0x31e    ld a5,584(s1)
    0x84002b68    0x322    sd s0,152(a5)
    0x84002b6a    0x324    sd a4,160(a5)
    0x84002b6c    0x326    beqz a0,ffffffff84002904 <init_kernel+0xbe>
    0x84002b70    0x32a    auipc a5,0x0
    0x84002b74    0x32e    ld a5,672(a5) # ffffffff84002e10 <ndks_boot+0x248>
    0x84002b78    0x332    sd zero,56(a5)
    0x84002b7c    0x336    sd zero,64(a5)
    0x84002b80    0x33a    jal ra,ffffffff84001820 <bi_finalise>
    0x84002b84    0x33e    li a5,1
    0x84002b86    0x340    auipc a4,0x1b
    0x84002b8a    0x344    sd a5,714(a4) # ffffffff8401de50 <ksNumCPUs>
    0x84002b8e    0x348    jal ra,ffffffff84012932 <schedule>
    0x84002b92    0x34c    jal ra,ffffffff840123c8 <activateThread>
    0x84002b96    0x350    ld ra,264(sp)         ; stack access
    0x84002b98    0x352    ld s0,256(sp)         ; stack access
    0x84002b9a    0x354    ld s1,248(sp)         ; stack access
    0x84002b9c    0x356    ld s2,240(sp)         ; stack access
    0x84002b9e    0x358    ld s3,232(sp)         ; stack access
    0x84002ba0    0x35a    ld s4,224(sp)         ; stack access
    0x84002ba2    0x35c    ld s5,216(sp)         ; stack access
    0x84002ba4    0x35e    ld s6,208(sp)         ; stack access
    0x84002ba6    0x360    ld s7,200(sp)         ; stack access
    0x84002ba8    0x362    ld s8,192(sp)         ; stack access
    0x84002baa    0x364    ld s9,184(sp)         ; stack access
    0x84002bac    0x366    ld s10,176(sp)        ; stack access
    0x84002bae    0x368    addi sp,sp,272
    0x84002bb0    0x36a    ret
    0x84002bb2    0x36c    unimp
    0x84002bb4    0x36e    unimp
    0x84002bb6    0x370    unimp

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
321 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 498 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_840116E0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_840116EA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_84011276` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840109B6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840109A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_8401022C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_8401020C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_84010214` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84010208` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84010220` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_8401015E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_840100D4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_8400090A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840008C4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a0_840008B6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84000154` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_840108F0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_840107CA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_8401085A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_8401082A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840107CE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401085E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401082E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401070C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a3_stval_84010606` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400085E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840005D2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84016ECC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_84016ED4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_s6_84016E38` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84016EC8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84016EE0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84016E3C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84016AF6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_84016AFE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84016A60` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84016AF2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84016B0A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84016A64` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8401008C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8401007C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84010084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840100A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84010000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_840141B6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_840139FA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840139BA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_840139AA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a4_840139BE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010796` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84015C18` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840158A6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_84002894` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_84002BB4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_84002BB2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_84002BB6` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
No graph spec failures.
No export failures.
No call offset failures.
> 