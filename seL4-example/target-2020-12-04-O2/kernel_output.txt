
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Fri Dec 04 18:33:05 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/bre222/verify/bv/0/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/bre222/verify/bv/0/graph-refine/seL4-example/target/RISCV64-MCS-O2/kernel
  Poly/ML: 581
  HOL: Kananaskis 13 (stdknl) commit 9f4165c59
======================================================================
  Reading /home/bre222/verify/bv/0/graph-refine/seL4-example/target/RISCV64-MCS-O2/kernel.elf.txt, done.
  Reading /home/bre222/verify/bv/0/graph-refine/seL4-example/target/RISCV64-MCS-O2/kernel.elf.txt, done.
  Reading /home/bre222/verify/bv/0/graph-refine/seL4-example/target/RISCV64-MCS-O2/kernel.sigs, done.
No signature info for section: _start
No signature info for section: ki_boot_end
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 296 functions, 18600 RISC-V instructions
  Longest function: decodeRISCVMMUInvocation (744 instructions)
  0 deps: 106 functions (__ctzdi2, __clzdi2, str_to_long, ...)
  1 deps: 86 functions (Arch_switchToThread, invokeCNodeRevoke, ...)
  2 deps: 42 functions (fastpath_reply_recv, fastpath_call, ...)
  3 deps: 23 functions (c_handle_syscall, slowpath, ...)
  4 deps: 9 functions (handleRecv, cteRevoke, endTimeslice, ...)
  5 deps: 8 functions (handleInterruptEntry, ...)
  6 deps: 5 functions (handleUserLevelFault, ...)
  7 deps: 7 functions (handleVMFaultEvent, handleInvocation, ...)
  8 deps: 1 functions (doReplyTransfer)
  9 deps: 1 functions (decodeSchedContextInvocation)
  10 deps: 3 functions (handleSyscall, schedule, ...)
  11 deps: 1 functions (finaliseCap)
  12 deps: 1 functions (decodeCNodeInvocation)
  14 deps: 1 functions (decodeInvocation)
  16 deps: 1 functions (decodeTCBInvocation)
  17 deps: 1 functions (init_kernel)
======================================================================

Section __ctzdi2 (1 of 296)
===========================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 28 instructions.

SLLI..
RVC_TFF_FF________FT.
SLTIU..
RVC_TTT___________FT.
ADDIW..
RVC_FFT___________FT.
ANDI..
XORI..
RVC_TFF_TF________FT.
RVC_TFFTTT___FT___FT..
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x8400d6e8     0x0    slli a4,a0,0x20
    0x8400d6ec     0x4    srli a4,a4,0x20
    0x8400d6ee     0x6    seqz a3,a0
    0x8400d6f2     0xa    seqz a5,a0
    0x8400d6f6     0xe    bnez a4,ffffffff8400d6fe <__ctzdi2+0x16>
    0x8400d6f8    0x10    srli a0,a0,0x20
    0x8400d6fa    0x12    addiw a5,a3,32
    0x8400d6fe    0x16    slli a4,a0,0x30
    0x8400d702    0x1a    srli a4,a4,0x30
    0x8400d704    0x1c    bnez a4,ffffffff8400d70a <__ctzdi2+0x22>
    0x8400d706    0x1e    srli a0,a0,0x10
    0x8400d708    0x20    addiw a5,a5,16
    0x8400d70a    0x22    andi a4,a0,255
    0x8400d70e    0x26    bnez a4,ffffffff8400d714 <__ctzdi2+0x2c>
    0x8400d710    0x28    srli a0,a0,0x8
    0x8400d712    0x2a    addiw a5,a5,8
    0x8400d714    0x2c    andi a4,a0,15
    0x8400d718    0x30    bnez a4,ffffffff8400d71e <__ctzdi2+0x36>
    0x8400d71a    0x32    srli a0,a0,0x4
    0x8400d71c    0x34    addiw a5,a5,4
    0x8400d71e    0x36    andi a4,a0,3
    0x8400d722    0x3a    bnez a4,ffffffff8400d728 <__ctzdi2+0x40>
    0x8400d724    0x3c    srli a0,a0,0x2
    0x8400d726    0x3e    addiw a5,a5,2
    0x8400d728    0x40    not a0,a0
    0x8400d72c    0x44    andi a0,a0,1
    0x8400d72e    0x46    addw a0,a0,a5
    0x8400d730    0x48    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 39 nodes.

Section __clzdi2 (2 of 296)
===========================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 28 instructions.

RVC_FTF___________FT.
ADDI..
BGEU..
RVC_FTTFFT___T____FT.
BLTU..
RVC_TFFTTT___FF___FT..
SRL.....
SUBW.....

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x8400c4ac     0x0    li a4,-1
    0x8400c4ae     0x2    srli a4,a4,0x20
    0x8400c4b0     0x4    li a5,64
    0x8400c4b4     0x8    bgeu a4,a0,ffffffff8400c4be <__clzdi2+0x12>
    0x8400c4b8     0xc    srli a0,a0,0x20
    0x8400c4ba     0xe    li a5,32
    0x8400c4be    0x12    lui a4,0x10
    0x8400c4c0    0x14    bltu a0,a4,ffffffff8400c4c8 <__clzdi2+0x1c>
    0x8400c4c4    0x18    srli a0,a0,0x10
    0x8400c4c6    0x1a    addiw a5,a5,-16
    0x8400c4c8    0x1c    li a4,255
    0x8400c4cc    0x20    bgeu a4,a0,ffffffff8400c4d4 <__clzdi2+0x28>
    0x8400c4d0    0x24    srli a0,a0,0x8
    0x8400c4d2    0x26    addiw a5,a5,-8
    0x8400c4d4    0x28    li a4,15
    0x8400c4d6    0x2a    bgeu a4,a0,ffffffff8400c4de <__clzdi2+0x32>
    0x8400c4da    0x2e    srli a0,a0,0x4
    0x8400c4dc    0x30    addiw a5,a5,-4
    0x8400c4de    0x32    li a4,3
    0x8400c4e0    0x34    bgeu a4,a0,ffffffff8400c4e8 <__clzdi2+0x3c>
    0x8400c4e4    0x38    srli a0,a0,0x2
    0x8400c4e6    0x3a    addiw a5,a5,-2
    0x8400c4e8    0x3c    sltiu a4,a0,2
    0x8400c4ec    0x40    xori a4,a4,1
    0x8400c4f0    0x44    subw a5,a5,a4
    0x8400c4f2    0x46    srl a0,a0,a4
    0x8400c4f6    0x4a    subw a0,a5,a0
    0x8400c4fa    0x4e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 39 nodes.

Section str_to_long (3 of 296)
==============================

Deriving specifications
-----------------------

Section `str_to_long` consists of 42 instructions.

LBU..
RVC_TFFFFT___FT___TF..
BEQ..
RVC_TTF___________FT.
RVC_FFF___________TF.
SRLI..
BGE..
MUL.....
RVC_FFFFFT________FT.
RVC_TFFTFT___FT___TF..
RVC_TFT___________FT.
BLT..
BNE..

Stack analysis
---------------

No stack accesses found. Code for `str_to_long`:

    0x8400c424     0x0    lbu a5,0(a0)
    0x8400c428     0x4    li a4,48
    0x8400c42c     0x8    mv a1,a0
    0x8400c42e     0xa    li a7,10
    0x8400c430     0xc    beq a5,a4,ffffffff8400c490 <str_to_long+0x6c>
    0x8400c434    0x10    beqz a5,ffffffff8400c48c <str_to_long+0x68>
    0x8400c436    0x12    slli a7,a7,0x20
    0x8400c438    0x14    li a0,0
    0x8400c43a    0x16    li t3,9
    0x8400c43c    0x18    li t1,5
    0x8400c43e    0x1a    srli a7,a7,0x20
    0x8400c442    0x1e    addiw a2,a5,-48
    0x8400c446    0x22    addiw a4,a5,-65
    0x8400c44a    0x26    addiw a3,a5,-97
    0x8400c44e    0x2a    andi a6,a2,255
    0x8400c452    0x2e    andi a4,a4,255
    0x8400c456    0x32    andi a3,a3,255
    0x8400c45a    0x36    bgeu t3,a6,ffffffff8400c47e <str_to_long+0x5a>
    0x8400c45e    0x3a    bgeu t1,a4,ffffffff8400c484 <str_to_long+0x60>
    0x8400c462    0x3e    bltu t1,a3,ffffffff8400c48c <str_to_long+0x68>
    0x8400c466    0x42    addiw a4,a5,-87
    0x8400c46a    0x46    bge a4,a7,ffffffff8400c48c <str_to_long+0x68>
    0x8400c46e    0x4a    mul a0,a7,a0
    0x8400c472    0x4e    lbu a5,1(a1)
    0x8400c476    0x52    addi a1,a1,1
    0x8400c478    0x54    add a0,a0,a4
    0x8400c47a    0x56    bnez a5,ffffffff8400c442 <str_to_long+0x1e>
    0x8400c47c    0x58    ret
    0x8400c47e    0x5a    sext.w a4,a2
    0x8400c482    0x5e    j ffffffff8400c46e <str_to_long+0x4a>
    0x8400c484    0x60    addiw a4,a5,-55
    0x8400c488    0x64    blt a4,a7,ffffffff8400c46e <str_to_long+0x4a>
    0x8400c48c    0x68    li a0,-1
    0x8400c48e    0x6a    ret
    0x8400c490    0x6c    lbu a4,1(a0)
    0x8400c494    0x70    li a3,88
    0x8400c498    0x74    andi a4,a4,223
    0x8400c49c    0x78    bne a4,a3,ffffffff8400c436 <str_to_long+0x12>
    0x8400c4a0    0x7c    lbu a5,2(a0)
    0x8400c4a4    0x80    li a7,16
    0x8400c4a6    0x82    addi a1,a0,2
    0x8400c4aa    0x86    j ffffffff8400c434 <str_to_long+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 66 nodes.

Section char_to_long (4 of 296)
===============================

Deriving specifications
-----------------------

Section `char_to_long` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x8400c3e6     0x0    addiw a5,a0,-48
    0x8400c3ea     0x4    andi a3,a5,255
    0x8400c3ee     0x8    li a4,9
    0x8400c3f0     0xa    bgeu a4,a3,ffffffff8400c41a <char_to_long+0x34>
    0x8400c3f4     0xe    addiw a5,a0,-65
    0x8400c3f8    0x12    andi a5,a5,255
    0x8400c3fc    0x16    li a4,5
    0x8400c3fe    0x18    bgeu a4,a5,ffffffff8400c414 <char_to_long+0x2e>
    0x8400c402    0x1c    addiw a5,a0,-97
    0x8400c406    0x20    andi a5,a5,255
    0x8400c40a    0x24    bltu a4,a5,ffffffff8400c420 <char_to_long+0x3a>
    0x8400c40e    0x28    addiw a0,a0,-87
    0x8400c412    0x2c    ret
    0x8400c414    0x2e    addiw a0,a0,-55
    0x8400c418    0x32    ret
    0x8400c41a    0x34    sext.w a0,a5
    0x8400c41e    0x38    ret
    0x8400c420    0x3a    li a0,-1
    0x8400c422    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 29 nodes.

Section strncmp (5 of 296)
==========================

Deriving specifications
-----------------------

Section `strncmp` consists of 16 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x8400c3be     0x0    beqz a2,ffffffff8400c3e2 <strncmp+0x24>
    0x8400c3c0     0x2    mv a5,a0
    0x8400c3c2     0x4    add a2,a2,a0
    0x8400c3c4     0x6    j ffffffff8400c3cc <strncmp+0xe>
    0x8400c3c6     0x8    beqz a4,ffffffff8400c3de <strncmp+0x20>
    0x8400c3c8     0xa    beq a5,a2,ffffffff8400c3e0 <strncmp+0x22>
    0x8400c3cc     0xe    lbu a4,0(a5)
    0x8400c3d0    0x12    lbu a0,0(a1)
    0x8400c3d4    0x16    addi a5,a5,1
    0x8400c3d6    0x18    addi a1,a1,1
    0x8400c3d8    0x1a    subw a0,a4,a0
    0x8400c3dc    0x1e    beqz a0,ffffffff8400c3c6 <strncmp+0x8>
    0x8400c3de    0x20    ret
    0x8400c3e0    0x22    ret
    0x8400c3e2    0x24    li a0,0
    0x8400c3e4    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 29 nodes.

Section memcpy (6 of 296)
=========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x8400c3a6     0x0    beqz a2,ffffffff8400c3bc <memcpy+0x16>
    0x8400c3a8     0x2    add a2,a2,a0
    0x8400c3aa     0x4    mv a5,a0
    0x8400c3ac     0x6    lbu a4,0(a1)
    0x8400c3b0     0xa    addi a5,a5,1
    0x8400c3b2     0xc    addi a1,a1,1
    0x8400c3b4     0xe    sb a4,-1(a5)
    0x8400c3b8    0x12    bne a5,a2,ffffffff8400c3ac <memcpy+0x6>
    0x8400c3bc    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memset (7 of 296)
=========================

Deriving specifications
-----------------------

Section `memset` consists of 20 instructions.

OR.....
RVC_TFFFTT___TF___FT..
SD..
ADD.....

Stack analysis
---------------

No stack accesses found. Code for `memset`:

    0x8400c370     0x0    or a5,a0,a2
    0x8400c374     0x4    andi a5,a5,7
    0x8400c376     0x6    or a5,a5,a1
    0x8400c378     0x8    bnez a5,ffffffff8400c38c <memset+0x1c>
    0x8400c37a     0xa    beqz a2,ffffffff8400c3a2 <memset+0x32>
    0x8400c37c     0xc    mv a5,a0
    0x8400c37e     0xe    add a2,a2,a0
    0x8400c380    0x10    sd zero,0(a5)
    0x8400c384    0x14    addi a5,a5,8
    0x8400c386    0x16    bne a5,a2,ffffffff8400c380 <memset+0x10>
    0x8400c38a    0x1a    ret
    0x8400c38c    0x1c    andi a4,a1,255
    0x8400c390    0x20    add a3,a0,a2
    0x8400c394    0x24    mv a5,a0
    0x8400c396    0x26    beqz a2,ffffffff8400c3a4 <memset+0x34>
    0x8400c398    0x28    sb a4,0(a5)
    0x8400c39c    0x2c    addi a5,a5,1
    0x8400c39e    0x2e    bne a3,a5,ffffffff8400c398 <memset+0x28>
    0x8400c3a2    0x32    ret
    0x8400c3a4    0x34    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 35 nodes.

Section memzero (8 of 296)
==========================

Deriving specifications
-----------------------

Section `memzero` consists of 6 instructions.


Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x8400c360    0x0    beqz a1,ffffffff8400c36e <memzero+0xe>
    0x8400c362    0x2    add a1,a1,a0
    0x8400c364    0x4    sd zero,0(a0)
    0x8400c368    0x8    addi a0,a0,8
    0x8400c36a    0xa    bne a0,a1,ffffffff8400c364 <memzero+0x4>
    0x8400c36e    0xe    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 12 nodes.

Section strlcat (9 of 296)
==========================

Deriving specifications
-----------------------

Section `strlcat` consists of 35 instructions.

RVC_TFFFT____FT___TF.
RVC_TFFFTT___FF___FT..

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x8400c2fe     0x0    beqz a2,ffffffff8400c348 <strlcat+0x4a>
    0x8400c300     0x2    mv a5,a0
    0x8400c302     0x4    li a4,0
    0x8400c304     0x6    j ffffffff8400c30c <strlcat+0xe>
    0x8400c306     0x8    addi a5,a5,1
    0x8400c308     0xa    beq a4,a2,ffffffff8400c348 <strlcat+0x4a>
    0x8400c30c     0xe    lbu a7,0(a5)
    0x8400c310    0x12    mv a3,a4
    0x8400c312    0x14    mv a6,a5
    0x8400c314    0x16    addi a4,a4,1
    0x8400c316    0x18    bnez a7,ffffffff8400c306 <strlcat+0x8>
    0x8400c31a    0x1c    bgeu a4,a2,ffffffff8400c358 <strlcat+0x5a>
    0x8400c31e    0x20    sub a2,a2,a4
    0x8400c320    0x22    mv a5,a1
    0x8400c322    0x24    add a7,a1,a2
    0x8400c326    0x28    sub a4,a4,a1
    0x8400c328    0x2a    j ffffffff8400c332 <strlcat+0x34>
    0x8400c32a    0x2c    sb a1,0(a6)
    0x8400c32e    0x30    beq a5,a7,ffffffff8400c34c <strlcat+0x4e>
    0x8400c332    0x34    lbu a1,0(a5)
    0x8400c336    0x38    mv a2,a3
    0x8400c338    0x3a    add a6,a0,a3
    0x8400c33c    0x3e    add a3,a5,a4
    0x8400c340    0x42    addi a5,a5,1
    0x8400c342    0x44    bnez a1,ffffffff8400c32a <strlcat+0x2c>
    0x8400c344    0x46    sb zero,0(a6)
    0x8400c348    0x4a    mv a0,a2
    0x8400c34a    0x4c    ret
    0x8400c34c    0x4e    add a6,a0,a3
    0x8400c350    0x52    mv a2,a3
    0x8400c352    0x54    sb zero,0(a6)
    0x8400c356    0x58    j ffffffff8400c348 <strlcat+0x4a>
    0x8400c358    0x5a    mv a2,a3
    0x8400c35a    0x5c    sb zero,0(a6)
    0x8400c35e    0x60    j ffffffff8400c348 <strlcat+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 54 nodes.

Section strlcpy (10 of 296)
===========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 25 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x8400c2b8     0x0    li a5,1
    0x8400c2ba     0x2    mv a7,a0
    0x8400c2bc     0x4    bgeu a5,a2,ffffffff8400c2f8 <strlcpy+0x40>
    0x8400c2c0     0x8    mv a4,a0
    0x8400c2c2     0xa    addi a6,a2,-1
    0x8400c2c6     0xe    li a5,0
    0x8400c2c8    0x10    j ffffffff8400c2d6 <strlcpy+0x1e>
    0x8400c2ca    0x12    sb a3,0(a4)
    0x8400c2ce    0x16    addi a4,a2,1
    0x8400c2d2    0x1a    beq a5,a6,ffffffff8400c2ec <strlcpy+0x34>
    0x8400c2d6    0x1e    mv a0,a5
    0x8400c2d8    0x20    add a5,a5,a1
    0x8400c2da    0x22    lbu a3,0(a5)
    0x8400c2de    0x26    mv a2,a4
    0x8400c2e0    0x28    addi a5,a0,1
    0x8400c2e4    0x2c    bnez a3,ffffffff8400c2ca <strlcpy+0x12>
    0x8400c2e6    0x2e    sb zero,0(a2)
    0x8400c2ea    0x32    ret
    0x8400c2ec    0x34    add a2,a7,a5
    0x8400c2f0    0x38    mv a0,a5
    0x8400c2f2    0x3a    sb zero,0(a2)
    0x8400c2f6    0x3e    ret
    0x8400c2f8    0x40    mv a2,a0
    0x8400c2fa    0x42    li a0,0
    0x8400c2fc    0x44    j ffffffff8400c2e6 <strlcpy+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 37 nodes.

Section strnlen (11 of 296)
===========================

Deriving specifications
-----------------------

Section `strnlen` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x8400c29c     0x0    li a5,0
    0x8400c29e     0x2    bnez a1,ffffffff8400c2a8 <strnlen+0xc>
    0x8400c2a0     0x4    j ffffffff8400c2b4 <strnlen+0x18>
    0x8400c2a2     0x6    addi a5,a5,1
    0x8400c2a4     0x8    beq a1,a5,ffffffff8400c2b4 <strnlen+0x18>
    0x8400c2a8     0xc    add a4,a0,a5
    0x8400c2ac    0x10    lbu a4,0(a4)
    0x8400c2b0    0x14    bnez a4,ffffffff8400c2a2 <strnlen+0x6>
    0x8400c2b2    0x16    mv a1,a5
    0x8400c2b4    0x18    mv a0,a1
    0x8400c2b6    0x1a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 19 nodes.

Section invokeTCB_NotificationControl (12 of 296)
=================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 21 instructions.

RVC_FTT___________FF..
RVC_TFFFTT___TT___FT..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `invokeTCB_NotificationControl`:

    0x8400b95e     0x0    beqz a1,ffffffff8400b97a <invokeTCB_NotificationControl+0x1c>
    0x8400b960     0x2    ld a4,24(a1)
    0x8400b962     0x4    li a5,-1
    0x8400b964     0x6    slli a3,a5,0x27
    0x8400b968     0xa    srli a5,a5,0x19
    0x8400b96a     0xc    and a4,a4,a3
    0x8400b96c     0xe    and a5,a5,a0
    0x8400b96e    0x10    or a5,a5,a4
    0x8400b970    0x12    sd a5,24(a1)
    0x8400b972    0x14    sd a1,304(a0)
    0x8400b976    0x18    li a0,0
    0x8400b978    0x1a    ret
    0x8400b97a    0x1c    ld a4,304(a0)
    0x8400b97e    0x20    beqz a4,ffffffff8400b976 <invokeTCB_NotificationControl+0x18>
    0x8400b980    0x22    ld a5,24(a4)
    0x8400b982    0x24    srli a5,a5,0x27
    0x8400b984    0x26    slli a5,a5,0x27
    0x8400b986    0x28    sd a5,24(a4)
    0x8400b988    0x2a    sd zero,304(a0)
    0x8400b98c    0x2e    li a0,0
    0x8400b98e    0x30    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 34 nodes.

Section copyMRs (13 of 296)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 42 instructions.


Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x84008ae2     0x0    beqz a4,ffffffff84008b46 <copyMRs+0x64>
    0x84008ae4     0x2    ld a6,88(a0)
    0x84008ae8     0x6    li a5,1
    0x84008aea     0x8    sd a6,88(a2)
    0x84008aee     0xc    beq a4,a5,ffffffff84008b4a <copyMRs+0x68>
    0x84008af2    0x10    ld a6,96(a0)
    0x84008af6    0x14    li a5,2
    0x84008af8    0x16    sd a6,96(a2)
    0x84008afc    0x1a    beq a4,a5,ffffffff84008b4e <copyMRs+0x6c>
    0x84008b00    0x1e    ld a6,104(a0)
    0x84008b04    0x22    li a5,3
    0x84008b06    0x24    sd a6,104(a2)
    0x84008b0a    0x28    beq a4,a5,ffffffff84008b52 <copyMRs+0x70>
    0x84008b0e    0x2c    ld a0,112(a0)
    0x84008b10    0x2e    li a5,4
    0x84008b12    0x30    sd a0,112(a2)
    0x84008b14    0x32    beqz a3,ffffffff84008b40 <copyMRs+0x5e>
    0x84008b16    0x34    beqz a1,ffffffff84008b40 <copyMRs+0x5e>
    0x84008b18    0x36    bgeu a5,a4,ffffffff84008b40 <copyMRs+0x5e>
    0x84008b1c    0x3a    addi a5,a5,1
    0x84008b1e    0x3c    addi a0,a4,1
    0x84008b22    0x40    slli a5,a5,0x3
    0x84008b24    0x42    slli a0,a0,0x3
    0x84008b26    0x44    add a2,a1,a5
    0x84008b2a    0x48    ld a6,0(a2)
    0x84008b2e    0x4c    add a2,a3,a5
    0x84008b32    0x50    addi a5,a5,8
    0x84008b34    0x52    sd a6,0(a2)
    0x84008b38    0x56    bne a5,a0,ffffffff84008b26 <copyMRs+0x44>
    0x84008b3c    0x5a    mv a0,a4
    0x84008b3e    0x5c    ret
    0x84008b40    0x5e    mv a4,a5
    0x84008b42    0x60    mv a0,a4
    0x84008b44    0x62    ret
    0x84008b46    0x64    li a5,0
    0x84008b48    0x66    j ffffffff84008b14 <copyMRs+0x32>
    0x84008b4a    0x68    li a5,1
    0x84008b4c    0x6a    j ffffffff84008b14 <copyMRs+0x32>
    0x84008b4e    0x6c    li a5,2
    0x84008b50    0x6e    j ffffffff84008b14 <copyMRs+0x32>
    0x84008b52    0x70    li a5,3
    0x84008b54    0x72    j ffffffff84008b14 <copyMRs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 70 nodes.

Section setExtraBadge (14 of 296)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x84008a2c    0x0    addi a2,a2,122
    0x84008a30    0x4    slli a2,a2,0x3
    0x84008a32    0x6    add a2,a2,a0
    0x84008a34    0x8    sd a1,0(a2)
    0x84008a36    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (15 of 296)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x84008a20    0x0    addi a1,a1,122
    0x84008a24    0x4    slli a1,a1,0x3
    0x84008a26    0x6    add a1,a1,a0
    0x84008a28    0x8    ld a0,0(a1)
    0x84008a2a    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbReleaseDequeue (16 of 296)
=====================================

Deriving specifications
-----------------------

Section `tcbReleaseDequeue` consists of 15 instructions.

AUIPC.

Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseDequeue`:

    0x840089f0     0x0    auipc a4,0x19
    0x840089f4     0x4    addi a4,a4,-400 # ffffffff84021860 <ksReleaseHead>
    0x840089f8     0x8    ld a0,0(a4)
    0x840089fa     0xa    ld a5,392(a0)
    0x840089fe     0xe    sd a5,0(a4)
    0x84008a00    0x10    beqz a5,ffffffff84008a0a <tcbReleaseDequeue+0x1a>
    0x84008a02    0x12    sd zero,400(a5)
    0x84008a06    0x16    sd zero,392(a0)
    0x84008a0a    0x1a    ld a5,288(a0)
    0x84008a0e    0x1e    li a4,1
    0x84008a10    0x20    auipc a3,0x19
    0x84008a14    0x24    sd a4,-472(a3) # ffffffff84021838 <ksReprogram>
    0x84008a18    0x28    andi a5,a5,-2
    0x84008a1a    0x2a    sd a5,288(a0)
    0x84008a1e    0x2e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseDequeue` has 26 nodes.

Section tcbReleaseEnqueue (17 of 296)
=====================================

Deriving specifications
-----------------------

Section `tcbReleaseEnqueue` consists of 49 instructions.

ORI..

Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseEnqueue`:

    0x84007bb2     0x0    auipc a6,0x1a
    0x84007bb6     0x4    addi a6,a6,-850 # ffffffff84021860 <ksReleaseHead>
    0x84007bba     0x8    ld a4,0(a6)
    0x84007bbe     0xc    beqz a4,ffffffff84007c36 <tcbReleaseEnqueue+0x84>
    0x84007bc0     0xe    ld a5,368(a0)
    0x84007bc4    0x12    li a2,0
    0x84007bc6    0x14    ld a3,72(a5)
    0x84007bc8    0x16    slli a3,a3,0x4
    0x84007bca    0x18    add a5,a5,a3
    0x84007bcc    0x1a    ld a1,88(a5)
    0x84007bce    0x1c    j ffffffff84007bda <tcbReleaseEnqueue+0x28>
    0x84007bd0    0x1e    ld a5,392(a4)
    0x84007bd4    0x22    mv a2,a4
    0x84007bd6    0x24    beqz a5,ffffffff84007c1a <tcbReleaseEnqueue+0x68>
    0x84007bd8    0x26    mv a4,a5
    0x84007bda    0x28    ld a5,368(a4)
    0x84007bde    0x2c    ld a3,72(a5)
    0x84007be0    0x2e    slli a3,a3,0x4
    0x84007be2    0x30    add a5,a5,a3
    0x84007be4    0x32    ld a5,88(a5)
    0x84007be6    0x34    bgeu a1,a5,ffffffff84007bd0 <tcbReleaseEnqueue+0x1e>
    0x84007bea    0x38    bnez a2,ffffffff84007c14 <tcbReleaseEnqueue+0x62>
    0x84007bec    0x3a    li a5,1
    0x84007bee    0x3c    sd a0,0(a6)
    0x84007bf2    0x40    auipc a3,0x1a
    0x84007bf6    0x44    sd a5,-954(a3) # ffffffff84021838 <ksReprogram>
    0x84007bfa    0x48    sd a0,400(a4)
    0x84007bfe    0x4c    ld a5,288(a0)
    0x84007c02    0x50    sd a4,392(a0)
    0x84007c06    0x54    sd a2,400(a0)
    0x84007c0a    0x58    ori a5,a5,1
    0x84007c0e    0x5c    sd a5,288(a0)
    0x84007c12    0x60    ret
    0x84007c14    0x62    sd a0,392(a2)
    0x84007c18    0x66    j ffffffff84007bfa <tcbReleaseEnqueue+0x48>
    0x84007c1a    0x68    ld a5,288(a0)
    0x84007c1e    0x6c    sd a0,392(a4)
    0x84007c22    0x70    li a4,0
    0x84007c24    0x72    ori a5,a5,1
    0x84007c28    0x76    sd a4,392(a0)
    0x84007c2c    0x7a    sd a2,400(a0)
    0x84007c30    0x7e    sd a5,288(a0)
    0x84007c34    0x82    ret
    0x84007c36    0x84    li a5,1
    0x84007c38    0x86    sd a0,0(a6)
    0x84007c3c    0x8a    auipc a3,0x1a
    0x84007c40    0x8e    sd a5,-1028(a3) # ffffffff84021838 <ksReprogram>
    0x84007c44    0x92    li a2,0
    0x84007c46    0x94    j ffffffff84007bfe <tcbReleaseEnqueue+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseEnqueue` has 82 nodes.

Section tcbReleaseRemove (18 of 296)
====================================

Deriving specifications
-----------------------

Section `tcbReleaseRemove` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseRemove`:

    0x84007b70     0x0    ld a5,288(a0)
    0x84007b74     0x4    andi a4,a5,1
    0x84007b78     0x8    beqz a4,ffffffff84007b9c <tcbReleaseRemove+0x2c>
    0x84007b7a     0xa    ld a3,400(a0)
    0x84007b7e     0xe    ld a4,392(a0)
    0x84007b82    0x12    beqz a3,ffffffff84007b9e <tcbReleaseRemove+0x2e>
    0x84007b84    0x14    sd a4,392(a3)
    0x84007b88    0x18    beqz a4,ffffffff84007b8e <tcbReleaseRemove+0x1e>
    0x84007b8a    0x1a    sd a3,400(a4)
    0x84007b8e    0x1e    andi a5,a5,-2
    0x84007b90    0x20    sd zero,392(a0)
    0x84007b94    0x24    sd zero,400(a0)
    0x84007b98    0x28    sd a5,288(a0)
    0x84007b9c    0x2c    ret
    0x84007b9e    0x2e    auipc a2,0x1a
    0x84007ba2    0x32    sd a4,-830(a2) # ffffffff84021860 <ksReleaseHead>
    0x84007ba6    0x36    li a2,1
    0x84007ba8    0x38    auipc a1,0x1a
    0x84007bac    0x3c    sd a2,-880(a1) # ffffffff84021838 <ksReprogram>
    0x84007bb0    0x40    j ffffffff84007b88 <tcbReleaseRemove+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseRemove` has 37 nodes.

Section tcbEPDequeue (19 of 296)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 16 instructions.

RVC_FFFT__________FT.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `tcbEPDequeue`:

    0x84007b48     0x0    ld a5,408(a0)
    0x84007b4c     0x4    ld a4,416(a0)
    0x84007b50     0x8    addi sp,sp,-32
    0x84007b52     0xa    mv a0,a5
    0x84007b54     0xc    beqz a4,ffffffff84007b5c <tcbEPDequeue+0x14>
    0x84007b56     0xe    mv a0,a1
    0x84007b58    0x10    sd a5,408(a4)
    0x84007b5c    0x14    beqz a5,ffffffff84007b68 <tcbEPDequeue+0x20>
    0x84007b5e    0x16    sd a4,416(a5)
    0x84007b62    0x1a    mv a1,a2
    0x84007b64    0x1c    addi sp,sp,32
    0x84007b66    0x1e    ret
    0x84007b68    0x20    mv a2,a4
    0x84007b6a    0x22    mv a1,a2
    0x84007b6c    0x24    addi sp,sp,32
    0x84007b6e    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 26 nodes.

Section tcbSchedAppend (20 of 296)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 46 instructions.

RVC_TFFTFT___T____TF.
SUB.....
RVC_TFFTFT___FFT__TF.
RVC_TFFTFFT__FT___TF.
SLL.....

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x84007aa4     0x0    ld a4,288(a0)
    0x84007aa8     0x4    srli a5,a4,0x1
    0x84007aac     0x8    andi a5,a5,1
    0x84007aae     0xa    bnez a5,ffffffff84007af0 <tcbSchedAppend+0x4c>
    0x84007ab0     0xc    ld a2,344(a0)
    0x84007ab4    0x10    ld a7,360(a0)
    0x84007ab8    0x14    auipc a3,0x9
    0x84007abc    0x18    addi a3,a3,-696 # ffffffff84010800 <ksReadyQueues>
    0x84007ac0    0x1c    slli a5,a2,0x8
    0x84007ac4    0x20    add a5,a5,a7
    0x84007ac6    0x22    slli a5,a5,0x4
    0x84007ac8    0x24    add a6,a3,a5
    0x84007acc    0x28    ld a1,0(a6)
    0x84007ad0    0x2c    ld a6,8(a6)
    0x84007ad4    0x30    beqz a1,ffffffff84007af2 <tcbSchedAppend+0x4e>
    0x84007ad6    0x32    sd a0,392(a6)
    0x84007ada    0x36    sd a6,400(a0)
    0x84007ade    0x3a    sd zero,392(a0)
    0x84007ae2    0x3e    add a5,a5,a3
    0x84007ae4    0x40    sd a1,0(a5)
    0x84007ae6    0x42    sd a0,8(a5)
    0x84007ae8    0x44    ori a4,a4,2
    0x84007aec    0x48    sd a4,288(a0)
    0x84007af0    0x4c    ret
    0x84007af2    0x4e    srli t3,a7,0x6
    0x84007af6    0x52    li a1,3
    0x84007af8    0x54    sub t1,a1,t3
    0x84007afc    0x58    slli a1,a2,0x2
    0x84007b00    0x5c    add a1,a1,t1
    0x84007b02    0x5e    slli a1,a1,0x3
    0x84007b04    0x60    auipc t1,0x7
    0x84007b08    0x64    addi t1,t1,1276 # ffffffff8400f000 <riscvKSASIDTable>
    0x84007b0c    0x68    slli a2,a2,0x3
    0x84007b0e    0x6a    add a2,a2,t1
    0x84007b10    0x6c    add t1,t1,a1
    0x84007b12    0x6e    ld t4,1552(a2)
    0x84007b16    0x72    ld t5,1040(t1)
    0x84007b1a    0x76    li a1,1
    0x84007b1c    0x78    sll t3,a1,t3
    0x84007b20    0x7c    sll a1,a1,a7
    0x84007b24    0x80    or a1,a1,t5
    0x84007b28    0x84    or t3,t4,t3
    0x84007b2c    0x88    sd a1,1040(t1)
    0x84007b30    0x8c    sd t3,1552(a2)
    0x84007b34    0x90    mv a1,a0
    0x84007b36    0x92    j ffffffff84007ada <tcbSchedAppend+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 66 nodes.

Section schedContext_completeYieldTo (21 of 296)
================================================

Deriving specifications
-----------------------

Section `schedContext_completeYieldTo` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_completeYieldTo`:

    0x84007548     0x0    beqz a0,ffffffff8400756c <schedContext_completeYieldTo+0x24>
    0x8400754a     0x2    ld a5,376(a0)
    0x8400754e     0x6    beqz a5,ffffffff8400756c <schedContext_completeYieldTo+0x24>
    0x84007550     0x8    ld a3,8(a5)
    0x84007552     0xa    auipc a4,0x1a
    0x84007556     0xe    ld a4,774(a4) # ffffffff84021858 <ksCurThread>
    0x8400755a    0x12    sd zero,8(a5)
    0x8400755e    0x16    sd a3,88(a4)
    0x84007560    0x18    li a3,1
    0x84007562    0x1a    sd a3,80(a4)
    0x84007564    0x1c    sd zero,56(a5)
    0x84007568    0x20    sd zero,376(a0)
    0x8400756c    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_completeYieldTo` has 26 nodes.

Section schedContext_cancelYieldTo (22 of 296)
==============================================

Deriving specifications
-----------------------

Section `schedContext_cancelYieldTo` consists of 6 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_cancelYieldTo`:

    0x84007536     0x0    beqz a0,ffffffff84007546 <schedContext_cancelYieldTo+0x10>
    0x84007538     0x2    ld a5,376(a0)
    0x8400753c     0x6    beqz a5,ffffffff84007546 <schedContext_cancelYieldTo+0x10>
    0x8400753e     0x8    sd zero,56(a5)
    0x84007542     0xc    sd zero,376(a0)
    0x84007546    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_cancelYieldTo` has 14 nodes.

Section schedContext_updateConsumed (23 of 296)
===============================================

Deriving specifications
-----------------------

Section `schedContext_updateConsumed` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_updateConsumed`:

    0x8400752c    0x0    mv a5,a0
    0x8400752e    0x2    ld a0,8(a0)
    0x84007530    0x4    sd zero,8(a5)
    0x84007534    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_updateConsumed` has 7 nodes.

Section schedContext_unbindNtfn (24 of 296)
===========================================

Deriving specifications
-----------------------

Section `schedContext_unbindNtfn` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_unbindNtfn`:

    0x84007518     0x0    beqz a0,ffffffff8400752a <schedContext_unbindNtfn+0x12>
    0x8400751a     0x2    ld a4,40(a0)
    0x8400751c     0x4    beqz a4,ffffffff8400752a <schedContext_unbindNtfn+0x12>
    0x8400751e     0x6    ld a5,32(a4)
    0x84007520     0x8    srli a5,a5,0x27
    0x84007522     0xa    slli a5,a5,0x27
    0x84007524     0xc    sd a5,32(a4)
    0x84007526     0xe    sd zero,40(a0)
    0x8400752a    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindNtfn` has 18 nodes.

Section schedContext_bindNtfn (25 of 296)
=========================================

Deriving specifications
-----------------------

Section `schedContext_bindNtfn` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_bindNtfn`:

    0x84007502     0x0    ld a4,32(a1)
    0x84007504     0x2    li a5,-1
    0x84007506     0x4    slli a3,a5,0x27
    0x8400750a     0x8    srli a5,a5,0x19
    0x8400750c     0xa    and a4,a4,a3
    0x8400750e     0xc    and a5,a5,a0
    0x84007510     0xe    or a5,a5,a4
    0x84007512    0x10    sd a5,32(a1)
    0x84007514    0x12    sd a1,40(a0)
    0x84007516    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_bindNtfn` has 14 nodes.

Section updateCapData (26 of 296)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 47 instructions.

RVC_TTT___________TF..
RVC_FTT_FT________TF.

Stack analysis
---------------

12 stack accesses found. Annotated code for `updateCapData`:

    0x84006b76     0x0    srli a5,a2,0x3b
    0x84006b7a     0x4    andi a4,a5,1
    0x84006b7e     0x8    addi sp,sp,-32
    0x84006b80     0xa    bnez a4,ffffffff84006b94 <updateCapData+0x1e>
    0x84006b82     0xc    li a4,6
    0x84006b84     0xe    beq a5,a4,ffffffff84006ba0 <updateCapData+0x2a>
    0x84006b88    0x12    li a4,10
    0x84006b8a    0x14    beq a5,a4,ffffffff84006bb0 <updateCapData+0x3a>
    0x84006b8e    0x18    li a4,4
    0x84006b90    0x1a    beq a5,a4,ffffffff84006ba0 <updateCapData+0x2a>
    0x84006b94    0x1e    sd a2,16(sp)          ; stack access
    0x84006b96    0x20    sd a3,24(sp)          ; stack access
    0x84006b98    0x22    ld a0,16(sp)          ; stack access
    0x84006b9a    0x24    ld a1,24(sp)          ; stack access
    0x84006b9c    0x26    addi sp,sp,32
    0x84006b9e    0x28    ret
    0x84006ba0    0x2a    or a3,a3,a0
    0x84006ba2    0x2c    beqz a3,ffffffff84006be2 <updateCapData+0x6c>
    0x84006ba4    0x2e    sd zero,16(sp)        ; stack access
    0x84006ba6    0x30    sd zero,24(sp)        ; stack access
    0x84006ba8    0x32    ld a0,16(sp)          ; stack access
    0x84006baa    0x34    ld a1,24(sp)          ; stack access
    0x84006bac    0x36    addi sp,sp,32
    0x84006bae    0x38    ret
    0x84006bb0    0x3a    srli a5,a2,0x2f
    0x84006bb4    0x3e    andi a4,a1,63
    0x84006bb8    0x42    andi a5,a5,63
    0x84006bbc    0x46    add a5,a5,a4
    0x84006bbe    0x48    li a3,64
    0x84006bc2    0x4c    bltu a3,a5,ffffffff84006ba4 <updateCapData+0x2e>
    0x84006bc6    0x50    li a5,-63
    0x84006bca    0x54    li a3,-1
    0x84006bcc    0x56    slli a5,a5,0x35
    0x84006bce    0x58    sll a3,a3,a4
    0x84006bd2    0x5c    addi a5,a5,-1
    0x84006bd4    0x5e    and a2,a2,a5
    0x84006bd6    0x60    slli a4,a4,0x35
    0x84006bd8    0x62    not a5,a3
    0x84006bdc    0x66    srli a1,a1,0x6
    0x84006bde    0x68    or a2,a2,a4
    0x84006be0    0x6a    and a1,a1,a5
    0x84006be2    0x6c    sd a2,16(sp)          ; stack access
    0x84006be4    0x6e    sd a1,24(sp)          ; stack access
    0x84006be6    0x70    ld a0,16(sp)          ; stack access
    0x84006be8    0x72    ld a1,24(sp)          ; stack access
    0x84006bea    0x74    addi sp,sp,32
    0x84006bec    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 74 nodes.

Section hasCancelSendRights (27 of 296)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 19 instructions.

RVC_FFFFFFFT______FT.
AND.....

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x84005d50     0x0    srli a3,a0,0x3b
    0x84005d54     0x4    li a4,4
    0x84005d56     0x6    addi sp,sp,-16
    0x84005d58     0x8    beq a3,a4,ffffffff84005d62 <hasCancelSendRights+0x12>
    0x84005d5c     0xc    li a0,0
    0x84005d5e     0xe    addi sp,sp,16
    0x84005d60    0x10    ret
    0x84005d62    0x12    li a4,3
    0x84005d64    0x14    slli a4,a4,0x37
    0x84005d66    0x16    and a3,a0,a4
    0x84005d6a    0x1a    mv a5,a0
    0x84005d6c    0x1c    li a0,0
    0x84005d6e    0x1e    bne a3,a4,ffffffff84005d5e <hasCancelSendRights+0xe>
    0x84005d72    0x22    srli a4,a5,0x3a
    0x84005d76    0x26    li a3,8
    0x84005d78    0x28    beq a4,a3,ffffffff84005d5e <hasCancelSendRights+0xe>
    0x84005d7c    0x2c    srli a5,a5,0x39
    0x84005d7e    0x2e    andi a0,a5,1
    0x84005d82    0x32    j ffffffff84005d5e <hasCancelSendRights+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 26 nodes.

Section reorderNTFN (28 of 296)
===============================

Deriving specifications
-----------------------

Section `reorderNTFN` consists of 63 instructions.

RVC_TFFFFT___T____TF.
RVC_TFFFFFT__T____TF.
RVC_TFFFT____T____TF..

Stack analysis
---------------

No stack accesses found. Code for `reorderNTFN`:

    0x84005b86     0x0    ld a2,8(a0)
    0x84005b88     0x2    li a3,-1
    0x84005b8a     0x4    srli a5,a3,0x19
    0x84005b8e     0x8    srli a6,a2,0x26
    0x84005b92     0xc    andi a6,a6,1
    0x84005b96    0x10    ld a4,0(a0)
    0x84005b98    0x12    and a5,a5,a2
    0x84005b9a    0x14    beqz a6,ffffffff84005ba2 <reorderNTFN+0x1c>
    0x84005b9e    0x18    slli a3,a3,0x27
    0x84005ba0    0x1a    or a5,a5,a3
    0x84005ba2    0x1c    srli a6,a4,0x19
    0x84005ba6    0x20    bgez a4,ffffffff84005bb2 <reorderNTFN+0x2c>
    0x84005baa    0x24    li a3,-1
    0x84005bac    0x26    slli a3,a3,0x27
    0x84005bae    0x28    or a6,a6,a3
    0x84005bb2    0x2c    ld a3,416(a1) # 20001a0 <KERNEL_OFFSET-0xfffffffefdfffe60>
    0x84005bb6    0x30    ld a7,408(a1)
    0x84005bba    0x34    beqz a3,ffffffff84005c00 <reorderNTFN+0x7a>
    0x84005bbc    0x36    sd a7,408(a3)
    0x84005bc0    0x3a    beqz a7,ffffffff84005c08 <reorderNTFN+0x82>
    0x84005bc4    0x3e    sd a3,416(a7)
    0x84005bc8    0x42    mv a3,a6
    0x84005bca    0x44    bnez a6,ffffffff84005c08 <reorderNTFN+0x82>
    0x84005bce    0x48    mv a5,a1
    0x84005bd0    0x4a    mv a3,a1
    0x84005bd2    0x4c    li t1,0
    0x84005bd4    0x4e    li a7,0
    0x84005bd6    0x50    li a6,-1
    0x84005bd8    0x52    slli t3,a6,0x27
    0x84005bdc    0x56    slli a4,a4,0x27
    0x84005bde    0x58    srli a6,a6,0x19
    0x84005be2    0x5c    and a2,a2,t3
    0x84005be6    0x60    and a5,a5,a6
    0x84005bea    0x64    srli a4,a4,0x27
    0x84005bec    0x66    slli a3,a3,0x19
    0x84005bee    0x68    sd t1,408(a1)
    0x84005bf2    0x6c    sd a7,416(a1)
    0x84005bf6    0x70    or a5,a5,a2
    0x84005bf8    0x72    or a4,a4,a3
    0x84005bfa    0x74    sd a5,8(a0)
    0x84005bfc    0x76    sd a4,0(a0)
    0x84005bfe    0x78    ret
    0x84005c00    0x7a    beqz a7,ffffffff84005bce <reorderNTFN+0x48>
    0x84005c04    0x7e    mv a5,a7
    0x84005c06    0x80    j ffffffff84005bc4 <reorderNTFN+0x3e>
    0x84005c08    0x82    ld t3,360(a1)
    0x84005c0c    0x86    mv a7,a3
    0x84005c0e    0x88    li t1,0
    0x84005c10    0x8a    ld a6,360(a7)
    0x84005c14    0x8e    bltu a6,t3,ffffffff84005c24 <reorderNTFN+0x9e>
    0x84005c18    0x92    sd a1,408(a7)
    0x84005c1c    0x96    bnez t1,ffffffff84005c32 <reorderNTFN+0xac>
    0x84005c20    0x9a    mv a3,a1
    0x84005c22    0x9c    j ffffffff84005bd6 <reorderNTFN+0x50>
    0x84005c24    0x9e    ld a6,416(a7)
    0x84005c28    0xa2    mv t1,a7
    0x84005c2a    0xa4    bnez a6,ffffffff84005c38 <reorderNTFN+0xb2>
    0x84005c2e    0xa8    mv a5,a1
    0x84005c30    0xaa    li a7,0
    0x84005c32    0xac    sd a1,416(t1)
    0x84005c36    0xb0    j ffffffff84005bd6 <reorderNTFN+0x50>
    0x84005c38    0xb2    mv a7,a6
    0x84005c3a    0xb4    j ffffffff84005c10 <reorderNTFN+0x8a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reorderNTFN` has 97 nodes.

Section bindNotification (29 of 296)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84005b6e     0x0    ld a4,24(a1)
    0x84005b70     0x2    li a5,-1
    0x84005b72     0x4    slli a3,a5,0x27
    0x84005b76     0x8    srli a5,a5,0x19
    0x84005b78     0xa    and a4,a4,a3
    0x84005b7a     0xc    and a5,a5,a0
    0x84005b7c     0xe    or a5,a5,a4
    0x84005b7e    0x10    sd a5,24(a1)
    0x84005b80    0x12    sd a1,304(a0)
    0x84005b84    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (30 of 296)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x84005b5a     0x0    ld a4,304(a0)
    0x84005b5e     0x4    beqz a4,ffffffff84005b6c <unbindNotification+0x12>
    0x84005b60     0x6    ld a5,24(a4)
    0x84005b62     0x8    srli a5,a5,0x27
    0x84005b64     0xa    slli a5,a5,0x27
    0x84005b66     0xc    sd a5,24(a4)
    0x84005b68     0xe    sd zero,304(a0)
    0x84005b6c    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (31 of 296)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 16 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x84005b34     0x0    ld a4,24(a0)
    0x84005b36     0x2    li a3,-1
    0x84005b38     0x4    srli a5,a3,0x19
    0x84005b3c     0x8    srli a2,a4,0x26
    0x84005b40     0xc    andi a2,a2,1
    0x84005b42     0xe    and a5,a5,a4
    0x84005b44    0x10    beqz a2,ffffffff84005b56 <unbindMaybeNotification+0x22>
    0x84005b46    0x12    slli a3,a3,0x27
    0x84005b48    0x14    or a5,a5,a3
    0x84005b4a    0x16    srli a4,a4,0x27
    0x84005b4c    0x18    slli a4,a4,0x27
    0x84005b4e    0x1a    sd a4,24(a0)
    0x84005b50    0x1c    sd zero,304(a5)
    0x84005b54    0x20    ret
    0x84005b56    0x22    bnez a5,ffffffff84005b4a <unbindMaybeNotification+0x16>
    0x84005b58    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 25 nodes.

Section setIRQState (32 of 296)
===============================

Deriving specifications
-----------------------

Section `setIRQState` consists of 28 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5

LUI.
RVC_FTF___________FF..
SLLW.....
RVC_TTF___________FF..

Stack analysis
---------------

No stack accesses found. Code for `setIRQState`:

    0x8400599e     0x0    slli a4,a1,0x3
    0x840059a2     0x4    auipc a5,0x9
    0x840059a6     0x8    addi a5,a5,1630 # ffffffff8400f000 <riscvKSASIDTable>
    0x840059aa     0xc    add a5,a5,a4
    0x840059ac     0xe    sd a0,1736(a5)
    0x840059b0    0x12    li a5,54
    0x840059b4    0x16    bne a1,a5,ffffffff840059ca <setIRQState+0x2c>
    0x840059b8    0x1a    li a5,32
    0x840059bc    0x1e    bnez a0,ffffffff840059c4 <setIRQState+0x26>
    0x840059be    0x20    csrrc a5,sie,a5
    0x840059c2    0x24    ret
    0x840059c4    0x26    csrrs a5,sie,a5
    0x840059c8    0x2a    ret
    0x840059ca    0x2c    srli a5,a1,0x5
    0x840059ce    0x30    lui a4,0xc0002
    0x840059d2    0x34    addi a4,a4,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x840059d6    0x38    slli a5,a5,0x2
    0x840059d8    0x3a    add a5,a5,a4
    0x840059da    0x3c    lw a3,0(a5)
    0x840059dc    0x3e    li a4,1
    0x840059de    0x40    sllw a1,a4,a1
    0x840059e2    0x44    sext.w a4,a3
    0x840059e6    0x48    or a3,a1,a4
    0x840059ea    0x4c    bnez a0,ffffffff840059f4 <setIRQState+0x56>
    0x840059ec    0x4e    not a1,a1
    0x840059f0    0x52    and a3,a1,a4
    0x840059f4    0x56    sw a3,0(a5)
    0x840059f6    0x58    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 42 nodes.

Section isIRQActive (33 of 296)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 7 instructions.

SLTU.....

Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x84005986     0x0    slli a5,a0,0x3
    0x8400598a     0x4    auipc a0,0x9
    0x8400598e     0x8    addi a0,a0,1654 # ffffffff8400f000 <riscvKSASIDTable>
    0x84005992     0xc    add a0,a0,a5
    0x84005994     0xe    ld a0,1736(a0)
    0x84005998    0x12    snez a0,a0
    0x8400599c    0x16    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 9 nodes.

Section deletedIRQHandler (34 of 296)
=====================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 24 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `deletedIRQHandler`:

    0x8400593c     0x0    slli a4,a0,0x3
    0x84005940     0x4    auipc a5,0x9
    0x84005944     0x8    addi a5,a5,1728 # ffffffff8400f000 <riscvKSASIDTable>
    0x84005948     0xc    add a5,a5,a4
    0x8400594a     0xe    sd zero,1736(a5)
    0x8400594e    0x12    li a5,54
    0x84005952    0x16    bne a0,a5,ffffffff84005960 <deletedIRQHandler+0x24>
    0x84005956    0x1a    li a5,32
    0x8400595a    0x1e    csrrc a5,sie,a5
    0x8400595e    0x22    ret
    0x84005960    0x24    srli a4,a0,0x5
    0x84005964    0x28    lui a5,0xc0002
    0x84005968    0x2c    addi a5,a5,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x8400596c    0x30    slli a4,a4,0x2
    0x8400596e    0x32    add a4,a4,a5
    0x84005970    0x34    lw a3,0(a4)
    0x84005972    0x36    andi a0,a0,31
    0x84005974    0x38    li a5,1
    0x84005976    0x3a    sll a0,a5,a0
    0x8400597a    0x3e    not a0,a0
    0x8400597e    0x42    and a0,a0,a3
    0x84005980    0x44    sext.w a0,a0
    0x84005982    0x46    sw a0,0(a4)
    0x84005984    0x48    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 32 nodes.

Section invokeIRQHandler_AckIRQ (35 of 296)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x84005932    0x0    sext.w a0,a0
    0x84005934    0x2    lui a5,0xc0202
    0x84005938    0x6    sw a0,4(a5)
    0x8400593a    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 6 nodes.

Section invokeIRQControl (36 of 296)
====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 59 instructions.

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQControl`:

    0x8400563e     0x0    slli a5,a0,0x3
    0x84005642     0x4    auipc a4,0xa
    0x84005646     0x8    addi a4,a4,-1602 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400564a     0xc    add a4,a4,a5
    0x8400564c     0xe    li a5,1
    0x8400564e    0x10    sd a5,1736(a4)
    0x84005652    0x14    li a4,54
    0x84005656    0x18    bne a0,a4,ffffffff840056c2 <invokeIRQControl+0x84>
    0x8400565a    0x1c    li a5,32
    0x8400565e    0x20    csrrs a5,sie,a5
    0x84005662    0x24    ld a4,0(a2)
    0x84005664    0x26    ld a5,24(a2)
    0x84005666    0x28    li a3,-1
    0x84005668    0x2a    srli a4,a4,0x3b
    0x8400566a    0x2c    addi a4,a4,-14
    0x8400566c    0x2e    seqz a4,a4
    0x84005670    0x32    slli a6,a4,0x1
    0x84005674    0x36    andi a5,a5,-4
    0x84005676    0x38    or a5,a5,a6
    0x8400567a    0x3c    slli a0,a0,0x34
    0x8400567c    0x3e    or a5,a5,a4
    0x8400567e    0x40    srli a0,a0,0x34
    0x84005680    0x42    slli a4,a3,0x3f
    0x84005684    0x46    sd a0,8(a1)
    0x84005686    0x48    sd a5,24(a1)
    0x84005688    0x4a    sd a4,0(a1)
    0x8400568a    0x4c    sd a2,16(a1)
    0x8400568c    0x4e    ld a4,24(a2)
    0x8400568e    0x50    slli a3,a3,0x27
    0x84005690    0x52    lui a0,0xf8000
    0x84005694    0x56    srli a0,a0,0x19
    0x84005696    0x58    addi a6,a3,3 # fffffffff8000003 <ki_end+0x73fd9003>
    0x8400569a    0x5c    and a4,a4,a6
    0x8400569e    0x60    and a6,a1,a0
    0x840056a2    0x64    or a4,a4,a6
    0x840056a6    0x68    srli a6,a5,0x26
    0x840056aa    0x6c    sd a4,24(a2)
    0x840056ac    0x6e    andi a4,a6,1
    0x840056b0    0x72    and a5,a5,a0
    0x840056b2    0x74    beqz a4,ffffffff840056bc <invokeIRQControl+0x7e>
    0x840056b4    0x76    or a5,a5,a3
    0x840056b6    0x78    sd a1,16(a5)
    0x840056b8    0x7a    li a0,0
    0x840056ba    0x7c    ret
    0x840056bc    0x7e    bnez a5,ffffffff840056b6 <invokeIRQControl+0x78>
    0x840056be    0x80    li a0,0
    0x840056c0    0x82    ret
    0x840056c2    0x84    srli a4,a0,0x5
    0x840056c6    0x88    lui a3,0xc0002
    0x840056ca    0x8c    addi a3,a3,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x840056ce    0x90    slli a4,a4,0x2
    0x840056d0    0x92    add a4,a4,a3
    0x840056d2    0x94    lw a3,0(a4)
    0x840056d4    0x96    andi a6,a0,31
    0x840056d8    0x9a    sll a5,a5,a6
    0x840056dc    0x9e    or a5,a5,a3
    0x840056de    0xa0    sext.w a5,a5
    0x840056e0    0xa2    sw a5,0(a4)
    0x840056e2    0xa4    j ffffffff84005662 <invokeIRQControl+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
59 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 80 nodes.

Section reorderEP (37 of 296)
=============================

Deriving specifications
-----------------------

Section `reorderEP` consists of 57 instructions.


Stack analysis
---------------

No stack accesses found. Code for `reorderEP`:

    0x840055a8     0x0    ld a4,0(a0)
    0x840055aa     0x2    lui a3,0xf8000
    0x840055ae     0x6    srli a3,a3,0x19
    0x840055b0     0x8    srli a5,a4,0x26
    0x840055b4     0xc    andi a5,a5,1
    0x840055b6     0xe    and a3,a3,a4
    0x840055b8    0x10    beqz a5,ffffffff840055c0 <reorderEP+0x18>
    0x840055ba    0x12    li a5,-1
    0x840055bc    0x14    slli a5,a5,0x27
    0x840055be    0x16    or a3,a3,a5
    0x840055c0    0x18    ld a5,416(a1)
    0x840055c4    0x1c    ld a2,408(a1)
    0x840055c8    0x20    beqz a5,ffffffff84005606 <reorderEP+0x5e>
    0x840055ca    0x22    ld a7,8(a0)
    0x840055ce    0x26    sd a2,408(a5)
    0x840055d2    0x2a    beqz a2,ffffffff8400560c <reorderEP+0x64>
    0x840055d4    0x2c    sd a5,416(a2) # fffffffff80001a0 <ki_end+0x73fd91a0>
    0x840055d8    0x30    mv a5,a3
    0x840055da    0x32    bnez a3,ffffffff8400560c <reorderEP+0x64>
    0x840055dc    0x34    mv a7,a1
    0x840055de    0x36    mv a5,a1
    0x840055e0    0x38    li a6,0
    0x840055e2    0x3a    li a2,0
    0x840055e4    0x3c    li a3,-1
    0x840055e6    0x3e    slli a3,a3,0x27
    0x840055e8    0x40    addi a3,a3,3
    0x840055ea    0x42    and a4,a4,a3
    0x840055ec    0x44    lui a3,0xf8000
    0x840055f0    0x48    srli a3,a3,0x19
    0x840055f2    0x4a    and a5,a5,a3
    0x840055f4    0x4c    sd a6,408(a1)
    0x840055f8    0x50    sd a2,416(a1)
    0x840055fc    0x54    or a5,a5,a4
    0x840055fe    0x56    sd a7,8(a0)
    0x84005602    0x5a    sd a5,0(a0)
    0x84005604    0x5c    ret
    0x84005606    0x5e    beqz a2,ffffffff840055dc <reorderEP+0x34>
    0x84005608    0x60    mv a7,a2
    0x8400560a    0x62    j ffffffff840055d4 <reorderEP+0x2c>
    0x8400560c    0x64    ld t1,360(a1)
    0x84005610    0x68    mv a2,a5
    0x84005612    0x6a    li a6,0
    0x84005614    0x6c    ld a3,360(a2)
    0x84005618    0x70    bltu a3,t1,ffffffff84005628 <reorderEP+0x80>
    0x8400561c    0x74    sd a1,408(a2)
    0x84005620    0x78    bnez a6,ffffffff84005634 <reorderEP+0x8c>
    0x84005624    0x7c    mv a5,a1
    0x84005626    0x7e    j ffffffff840055e4 <reorderEP+0x3c>
    0x84005628    0x80    ld a3,416(a2)
    0x8400562c    0x84    mv a6,a2
    0x8400562e    0x86    bnez a3,ffffffff8400563a <reorderEP+0x92>
    0x84005630    0x88    mv a7,a1
    0x84005632    0x8a    li a2,0
    0x84005634    0x8c    sd a1,416(a6) # fffffffff80001a0 <ki_end+0x73fd91a0>
    0x84005638    0x90    j ffffffff840055e4 <reorderEP+0x3c>
    0x8400563a    0x92    mv a2,a3
    0x8400563c    0x94    j ffffffff84005614 <reorderEP+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reorderEP` has 89 nodes.

Section replyFromKernel_success_empty (38 of 296)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x840052e6    0x0    sd zero,72(a0) # 2000048 <KERNEL_OFFSET-0xfffffffefdffffb8>
    0x840052ea    0x4    sd zero,80(a0)
    0x840052ee    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (39 of 296)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x840052d2     0x0    ld a3,1008(a1)
    0x840052d6     0x4    ld a4,1016(a1)
    0x840052da     0x8    ld a2,1000(a1)
    0x840052de     0xc    sd a3,8(a0)           ; stack access
    0x840052e0     0xe    sd a4,16(a0)          ; stack access
    0x840052e2    0x10    sd a2,0(a0)           ; stack access
    0x840052e4    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (40 of 296)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x8400524c     0x0    ld a0,0(a0)
    0x8400524e     0x2    srli a0,a0,0x3b
    0x84005250     0x4    bnez a0,ffffffff84005254 <ensureEmptySlot+0x8>
    0x84005252     0x6    ret
    0x84005254     0x8    li a5,8
    0x84005256     0xa    auipc a4,0xa
    0x8400525a     0xe    sd a5,1130(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400525e    0x12    li a0,3
    0x84005260    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 15 nodes.

Section insertNewCap (41 of 296)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 35 instructions.


Stack analysis
---------------

No stack accesses found. Code for `insertNewCap`:

    0x840051f6     0x0    ld a5,24(a0)
    0x840051f8     0x2    lui a6,0xf8000
    0x840051fc     0x6    srli a6,a6,0x19
    0x84005200     0xa    srli a4,a5,0x26
    0x84005204     0xe    andi a4,a4,1
    0x84005206    0x10    and a5,a5,a6
    0x8400520a    0x14    addi sp,sp,-16
    0x8400520c    0x16    ori a6,a5,3
    0x84005210    0x1a    beqz a4,ffffffff8400523e <insertNewCap+0x48>
    0x84005212    0x1c    li a4,-1
    0x84005214    0x1e    slli a4,a4,0x27
    0x84005216    0x20    or a5,a5,a4
    0x84005218    0x22    sd a2,0(a1)
    0x8400521a    0x24    sd a3,8(a1)
    0x8400521c    0x26    sd a0,16(a1)
    0x8400521e    0x28    sd a6,24(a1) # fffffffff8000018 <ki_end+0x73fd9018>
    0x84005222    0x2c    sd a1,16(a5)
    0x84005224    0x2e    ld a5,24(a0)
    0x84005226    0x30    li a4,-1
    0x84005228    0x32    slli a4,a4,0x27
    0x8400522a    0x34    addi a4,a4,3
    0x8400522c    0x36    and a5,a5,a4
    0x8400522e    0x38    lui a4,0xf8000
    0x84005232    0x3c    srli a4,a4,0x19
    0x84005234    0x3e    and a1,a1,a4
    0x84005236    0x40    or a1,a1,a5
    0x84005238    0x42    sd a1,24(a0)
    0x8400523a    0x44    addi sp,sp,16
    0x8400523c    0x46    ret
    0x8400523e    0x48    sd a2,0(a1)
    0x84005240    0x4a    sd a3,8(a1)
    0x84005242    0x4c    sd a0,16(a1)
    0x84005244    0x4e    sd a6,24(a1)
    0x84005248    0x52    beqz a5,ffffffff84005224 <insertNewCap+0x2e>
    0x8400524a    0x54    j ffffffff84005222 <insertNewCap+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 52 nodes.

Section cteSwap (42 of 296)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 66 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x8400504c     0x0    sd a3,0(a2)
    0x8400504e     0x2    sd a4,8(a2)
    0x84005050     0x4    sd a0,0(a5)
    0x84005052     0x6    sd a1,8(a5)
    0x84005054     0x8    ld a6,16(a2) # fffffffff8000010 <ki_end+0x73fd9010>
    0x84005058     0xc    addi sp,sp,-32
    0x8400505a     0xe    sd a1,24(sp)          ; stack access
    0x8400505c    0x10    sd a0,16(sp)          ; stack access
    0x8400505e    0x12    sd a3,0(sp)           ; stack access
    0x84005060    0x14    sd a4,8(sp)           ; stack access
    0x84005062    0x16    ld a1,24(a2)
    0x84005064    0x18    beqz a6,ffffffff84005082 <cteSwap+0x36>
    0x84005068    0x1c    ld a4,24(a6)
    0x8400506c    0x20    li a3,-1
    0x8400506e    0x22    slli a3,a3,0x27
    0x84005070    0x24    addi a3,a3,3
    0x84005072    0x26    and a4,a4,a3
    0x84005074    0x28    lui a3,0xf8000
    0x84005078    0x2c    srli a3,a3,0x19
    0x8400507a    0x2e    and a3,a3,a5
    0x8400507c    0x30    or a4,a4,a3
    0x8400507e    0x32    sd a4,24(a6)
    0x84005082    0x36    srli a3,a1,0x26
    0x84005086    0x3a    lui a4,0xf8000
    0x8400508a    0x3e    srli a4,a4,0x19
    0x8400508c    0x40    andi a3,a3,1
    0x8400508e    0x42    and a4,a4,a1
    0x84005090    0x44    beqz a3,ffffffff840050e2 <cteSwap+0x96>
    0x84005092    0x46    li a3,-1
    0x84005094    0x48    slli a3,a3,0x27
    0x84005096    0x4a    or a4,a4,a3
    0x84005098    0x4c    sd a5,16(a4)
    0x8400509a    0x4e    ld a3,16(a5)
    0x8400509c    0x50    ld a4,24(a5)
    0x8400509e    0x52    sd a3,16(a2)
    0x840050a0    0x54    sd a4,24(a2)
    0x840050a2    0x56    sd a6,16(a5) # fffffffff8000010 <ki_end+0x73fd9010>
    0x840050a6    0x5a    sd a1,24(a5)
    0x840050a8    0x5c    beqz a3,ffffffff840050c0 <cteSwap+0x74>
    0x840050aa    0x5e    ld a5,24(a3)
    0x840050ac    0x60    li a1,-1
    0x840050ae    0x62    slli a1,a1,0x27
    0x840050b0    0x64    addi a1,a1,3
    0x840050b2    0x66    and a5,a5,a1
    0x840050b4    0x68    lui a1,0xf8000
    0x840050b8    0x6c    srli a1,a1,0x19
    0x840050ba    0x6e    and a1,a1,a2
    0x840050bc    0x70    or a5,a5,a1
    0x840050be    0x72    sd a5,24(a3)
    0x840050c0    0x74    srli a5,a4,0x26
    0x840050c4    0x78    lui a3,0xf8000
    0x840050c8    0x7c    srli a3,a3,0x19
    0x840050ca    0x7e    andi a5,a5,1
    0x840050cc    0x80    and a4,a4,a3
    0x840050ce    0x82    beqz a5,ffffffff840050dc <cteSwap+0x90>
    0x840050d0    0x84    li a5,-1
    0x840050d2    0x86    slli a5,a5,0x27
    0x840050d4    0x88    or a4,a4,a5
    0x840050d6    0x8a    sd a2,16(a4)
    0x840050d8    0x8c    addi sp,sp,32
    0x840050da    0x8e    ret
    0x840050dc    0x90    bnez a4,ffffffff840050d6 <cteSwap+0x8a>
    0x840050de    0x92    addi sp,sp,32
    0x840050e0    0x94    ret
    0x840050e2    0x96    beqz a4,ffffffff8400509a <cteSwap+0x4e>
    0x840050e4    0x98    j ffffffff84005098 <cteSwap+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 102 nodes.

Section cteMove (43 of 296)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 39 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x84004ff0     0x0    ld a4,16(a2)
    0x84004ff2     0x2    ld a5,24(a2)
    0x84004ff4     0x4    sd a0,0(a3)
    0x84004ff6     0x6    sd a1,8(a3)
    0x84004ff8     0x8    sd zero,0(a2)
    0x84004ffc     0xc    sd zero,8(a2)
    0x84005000    0x10    addi sp,sp,-16
    0x84005002    0x12    sd a4,16(a3)
    0x84005004    0x14    sd a5,24(a3)
    0x84005006    0x16    sd a0,0(sp)           ; stack access
    0x84005008    0x18    sd a1,8(sp)           ; stack access
    0x8400500a    0x1a    sd zero,16(a2)
    0x8400500e    0x1e    sd zero,24(a2)
    0x84005012    0x22    beqz a4,ffffffff8400502a <cteMove+0x3a>
    0x84005014    0x24    ld a2,24(a4)
    0x84005016    0x26    li a1,-1
    0x84005018    0x28    slli a1,a1,0x27
    0x8400501a    0x2a    addi a1,a1,3
    0x8400501c    0x2c    and a2,a2,a1
    0x8400501e    0x2e    lui a1,0xf8000
    0x84005022    0x32    srli a1,a1,0x19
    0x84005024    0x34    and a1,a1,a3
    0x84005026    0x36    or a2,a2,a1
    0x84005028    0x38    sd a2,24(a4)
    0x8400502a    0x3a    srli a4,a5,0x26
    0x8400502e    0x3e    lui a2,0xf8000
    0x84005032    0x42    srli a2,a2,0x19
    0x84005034    0x44    andi a4,a4,1
    0x84005036    0x46    and a5,a5,a2
    0x84005038    0x48    beqz a4,ffffffff84005046 <cteMove+0x56>
    0x8400503a    0x4a    li a4,-1
    0x8400503c    0x4c    slli a4,a4,0x27
    0x8400503e    0x4e    or a5,a5,a4
    0x84005040    0x50    sd a3,16(a5)
    0x84005042    0x52    addi sp,sp,16
    0x84005044    0x54    ret
    0x84005046    0x56    bnez a5,ffffffff84005040 <cteMove+0x50>
    0x84005048    0x58    addi sp,sp,16
    0x8400504a    0x5a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 62 nodes.

Section cteInsert (44 of 296)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 96 instructions.

RVC_FTT_T_________TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x84004ec2      0x0    ld t1,0(a2) # fffffffff8000000 <ki_end+0x73fd9000>
    0x84004ec6      0x4    addi sp,sp,-16
    0x84004ec8      0x6    srli a6,a0,0x3b
    0x84004ecc      0xa    sd a0,0(sp)           ; stack access
    0x84004ece      0xc    sd a1,8(sp)           ; stack access
    0x84004ed0      0xe    andi a4,a6,1
    0x84004ed4     0x12    ld a5,24(a2)
    0x84004ed6     0x14    ld t4,8(a2)
    0x84004eda     0x18    mv a7,a0
    0x84004edc     0x1a    srli t3,t1,0x3b
    0x84004ee0     0x1e    bnez a4,ffffffff84004fc6 <cteInsert+0x104>
    0x84004ee2     0x20    li a0,6
    0x84004ee4     0x22    beq a6,a0,ffffffff84004ef8 <cteInsert+0x36>
    0x84004ee8     0x26    bltu a0,a6,ffffffff84004f4c <cteInsert+0x8a>
    0x84004eec     0x2a    li a0,2
    0x84004eee     0x2c    beq a6,a0,ffffffff84004f66 <cteInsert+0xa4>
    0x84004ef2     0x30    li a0,4
    0x84004ef4     0x32    bne a6,a0,ffffffff84004fc2 <cteInsert+0x100>
    0x84004ef8     0x36    sub a1,a1,t4
    0x84004efc     0x3a    snez a4,a1
    0x84004f00     0x3e    slli a1,a4,0x1
    0x84004f04     0x42    andi a5,a5,-4
    0x84004f06     0x44    or a5,a5,a1
    0x84004f08     0x46    or a4,a4,a5
    0x84004f0a     0x48    ld a7,0(sp)           ; stack access
    0x84004f0c     0x4a    sd a2,16(a3)
    0x84004f0e     0x4c    sd a4,24(a3)
    0x84004f10     0x4e    ld a1,24(a2)
    0x84004f12     0x50    li a0,-1
    0x84004f14     0x52    sd a7,0(a3)
    0x84004f18     0x56    slli a0,a0,0x27
    0x84004f1a     0x58    ld a7,8(sp)           ; stack access
    0x84004f1c     0x5a    lui a5,0xf8000
    0x84004f20     0x5e    srli a5,a5,0x19
    0x84004f22     0x60    addi a6,a0,3
    0x84004f26     0x64    and a1,a1,a6
    0x84004f2a     0x68    and a6,a3,a5
    0x84004f2e     0x6c    or a1,a1,a6
    0x84004f32     0x70    sd a7,8(a3)
    0x84004f36     0x74    srli a6,a4,0x26
    0x84004f3a     0x78    sd a1,24(a2)
    0x84004f3c     0x7a    andi a2,a6,1
    0x84004f40     0x7e    and a5,a5,a4
    0x84004f42     0x80    beqz a2,ffffffff84004f60 <cteInsert+0x9e>
    0x84004f44     0x82    or a5,a5,a0
    0x84004f46     0x84    sd a3,16(a5)
    0x84004f48     0x86    addi sp,sp,16
    0x84004f4a     0x88    ret
    0x84004f4c     0x8a    li a1,16
    0x84004f4e     0x8c    bne a6,a1,ffffffff84004fc2 <cteInsert+0x100>
    0x84004f52     0x90    addi a1,t3,-14
    0x84004f56     0x94    seqz a4,a1
    0x84004f5a     0x98    slli a1,a4,0x1
    0x84004f5e     0x9c    j ffffffff84004f04 <cteInsert+0x42>
    0x84004f60     0x9e    bnez a5,ffffffff84004f46 <cteInsert+0x84>
    0x84004f62     0xa0    addi sp,sp,16
    0x84004f64     0xa2    ret
    0x84004f66     0xa4    ori a4,a5,3
    0x84004f6a     0xa8    bne t3,a6,ffffffff84004f0a <cteInsert+0x48>
    0x84004f6e     0xac    li a0,1
    0x84004f70     0xae    slli a0,a0,0x26
    0x84004f72     0xb0    li a6,-1
    0x84004f74     0xb2    srli a5,a6,0x19
    0x84004f78     0xb6    and t3,t1,a0
    0x84004f7c     0xba    and t1,t1,a5
    0x84004f80     0xbe    and a5,a7,a5
    0x84004f84     0xc2    and a7,a7,a0
    0x84004f88     0xc6    beqz t3,ffffffff84004fd6 <cteInsert+0x114>
    0x84004f8c     0xca    slli a6,a6,0x27
    0x84004f8e     0xcc    or t1,t1,a6
    0x84004f92     0xd0    beqz a7,ffffffff84004f0a <cteInsert+0x48>
    0x84004f96     0xd4    li a0,-1
    0x84004f98     0xd6    slli a0,a0,0x27
    0x84004f9a     0xd8    or a5,a5,a0
    0x84004f9c     0xda    bne a5,t1,ffffffff84004f0a <cteInsert+0x48>
    0x84004fa0     0xde    andi a0,t4,63
    0x84004fa4     0xe2    andi a5,a1,63
    0x84004fa8     0xe6    bne a5,a0,ffffffff84004f0a <cteInsert+0x48>
    0x84004fac     0xea    addiw a5,a5,-4
    0x84004fae     0xec    slli a1,t4,0x27
    0x84004fb2     0xf0    lui a0,0x2000
    0x84004fb6     0xf4    sll a5,a0,a5
    0x84004fba     0xf8    srli a1,a1,0x27
    0x84004fbc     0xfa    or a5,a5,a1
    0x84004fbe     0xfc    sd a5,8(a2)
    0x84004fc0     0xfe    j ffffffff84004f0a <cteInsert+0x48>
    0x84004fc2    0x100    li a1,0
    0x84004fc4    0x102    j ffffffff84004f04 <cteInsert+0x42>
    0x84004fc6    0x104    li a0,2
    0x84004fc8    0x106    andi a4,a5,-4
    0x84004fcc    0x10a    bne t3,a0,ffffffff84004f0a <cteInsert+0x48>
    0x84004fd0    0x10e    beq a6,t3,ffffffff84004f6e <cteInsert+0xac>
    0x84004fd4    0x112    j ffffffff84004f0a <cteInsert+0x48>
    0x84004fd6    0x114    bnez a7,ffffffff84004f96 <cteInsert+0xd4>
    0x84004fda    0x118    bne a5,t1,ffffffff84004f0a <cteInsert+0x48>
    0x84004fde    0x11c    j ffffffff84004fa0 <cteInsert+0xde>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
96 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 147 nodes.

Section invokeCNodeMove (45 of 296)
===================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 41 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x84004e62     0x0    ld a4,16(a2)
    0x84004e64     0x2    ld a5,24(a2)
    0x84004e66     0x4    sd a0,0(a3)
    0x84004e68     0x6    sd a1,8(a3)
    0x84004e6a     0x8    sd zero,0(a2)
    0x84004e6e     0xc    sd zero,8(a2)
    0x84004e72    0x10    addi sp,sp,-16
    0x84004e74    0x12    sd a4,16(a3)
    0x84004e76    0x14    sd a5,24(a3)
    0x84004e78    0x16    sd a0,0(sp)           ; stack access
    0x84004e7a    0x18    sd a1,8(sp)           ; stack access
    0x84004e7c    0x1a    sd zero,16(a2)
    0x84004e80    0x1e    sd zero,24(a2)
    0x84004e84    0x22    beqz a4,ffffffff84004e9c <invokeCNodeMove+0x3a>
    0x84004e86    0x24    ld a2,24(a4)
    0x84004e88    0x26    li a1,-1
    0x84004e8a    0x28    slli a1,a1,0x27
    0x84004e8c    0x2a    addi a1,a1,3
    0x84004e8e    0x2c    and a2,a2,a1
    0x84004e90    0x2e    lui a1,0xf8000
    0x84004e94    0x32    srli a1,a1,0x19
    0x84004e96    0x34    and a1,a1,a3
    0x84004e98    0x36    or a2,a2,a1
    0x84004e9a    0x38    sd a2,24(a4)
    0x84004e9c    0x3a    srli a4,a5,0x26
    0x84004ea0    0x3e    lui a2,0xf8000
    0x84004ea4    0x42    srli a2,a2,0x19
    0x84004ea6    0x44    andi a4,a4,1
    0x84004ea8    0x46    and a5,a5,a2
    0x84004eaa    0x48    beqz a4,ffffffff84004eba <invokeCNodeMove+0x58>
    0x84004eac    0x4a    li a4,-1
    0x84004eae    0x4c    slli a4,a4,0x27
    0x84004eb0    0x4e    or a5,a5,a4
    0x84004eb2    0x50    sd a3,16(a5)
    0x84004eb4    0x52    li a0,0
    0x84004eb6    0x54    addi sp,sp,16
    0x84004eb8    0x56    ret
    0x84004eba    0x58    bnez a5,ffffffff84004eb2 <invokeCNodeMove+0x50>
    0x84004ebc    0x5a    li a0,0
    0x84004ebe    0x5c    addi sp,sp,16
    0x84004ec0    0x5e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 64 nodes.

Section setNextInterrupt (46 of 296)
====================================

Deriving specifications
-----------------------

Section `setNextInterrupt` consists of 37 instructions.

Skipping 00000073 ecall

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `setNextInterrupt`:

    0x84004bb6     0x0    auipc a5,0x1d
    0x84004bba     0x4    ld a5,-862(a5) # ffffffff84021858 <ksCurThread>
    0x84004bbe     0x8    ld a4,368(a5)
    0x84004bc2     0xc    auipc a0,0x1d
    0x84004bc6    0x10    ld a0,-946(a0) # ffffffff84021810 <ksDomainTime>
    0x84004bca    0x14    auipc a5,0x1d
    0x84004bce    0x18    ld a5,-922(a5) # ffffffff84021830 <ksCurTime>
    0x84004bd2    0x1c    ld a3,72(a4)
    0x84004bd4    0x1e    add a0,a0,a5
    0x84004bd6    0x20    slli a3,a3,0x4
    0x84004bd8    0x22    add a4,a4,a3
    0x84004bda    0x24    ld a4,96(a4)
    0x84004bdc    0x26    add a5,a5,a4
    0x84004bde    0x28    bgeu a5,a0,ffffffff84004be4 <setNextInterrupt+0x2e>
    0x84004be2    0x2c    mv a0,a5
    0x84004be4    0x2e    auipc a5,0x1d
    0x84004be8    0x32    ld a5,-900(a5) # ffffffff84021860 <ksReleaseHead>
    0x84004bec    0x36    beqz a5,ffffffff84004bfe <setNextInterrupt+0x48>
    0x84004bee    0x38    ld a5,368(a5)
    0x84004bf2    0x3c    ld a4,72(a5)
    0x84004bf4    0x3e    slli a4,a4,0x4
    0x84004bf6    0x40    add a5,a5,a4
    0x84004bf8    0x42    ld a5,88(a5)
    0x84004bfa    0x44    bltu a5,a0,ffffffff84004c0c <setNextInterrupt+0x56>
    0x84004bfe    0x48    addi a0,a0,-1
    0x84004c00    0x4a    li a1,0
    0x84004c02    0x4c    li a2,0
    0x84004c04    0x4e    li a7,0
    0x84004c06    0x50    ecall
    0x84004c0a    0x54    ret
    0x84004c0c    0x56    mv a0,a5
    0x84004c0e    0x58    addi a0,a0,-1
    0x84004c10    0x5a    li a1,0
    0x84004c12    0x5c    li a2,0
    0x84004c14    0x5e    li a7,0
    0x84004c16    0x60    ecall
    0x84004c1a    0x64    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextInterrupt` has 57 nodes.

Section setMCPriority (47 of 296)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x84004bb0    0x0    sd a1,352(a0)
    0x84004bb4    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (48 of 296)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x84004b58    0x0    sd zero,72(a0)
    0x84004b5c    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section refill_split_check (49 of 296)
======================================

Deriving specifications
-----------------------

Section `refill_split_check` consists of 126 instructions.

RVC_FFFFT_________FT.
RVC_TFFFFT___FFT__TF.
RVC_TFFTFFT__T____TF.

Stack analysis
---------------

No stack accesses found. Code for `refill_split_check`:

    0x8400480a      0x0    auipc a2,0x1d
    0x8400480e      0x4    ld a2,30(a2) # ffffffff84021828 <ksCurSC>
    0x84004812      0x8    ld a5,72(a2)
    0x84004814      0xa    addi t1,a2,88
    0x84004818      0xe    ld a4,0(a2)
    0x8400481a     0x10    slli a3,a5,0x4
    0x8400481e     0x14    add t4,a3,t1
    0x84004822     0x18    ld a1,8(t4)
    0x84004826     0x1c    ld t3,0(t4)
    0x8400482a     0x20    ld a7,80(a2)
    0x8400482e     0x24    ld a6,64(a2)
    0x84004832     0x28    sub a1,a1,a0
    0x84004834     0x2a    add a4,a4,t3
    0x84004836     0x2c    bgeu a7,a5,ffffffff840048f2 <refill_split_check+0xe8>
    0x8400483a     0x30    add t3,a7,a6
    0x8400483e     0x34    addi t3,t3,1
    0x84004840     0x36    sub t3,t3,a5
    0x84004844     0x3a    beq t3,a6,ffffffff8400486c <refill_split_check+0x62>
    0x84004848     0x3e    li t3,19
    0x8400484a     0x40    bgeu t3,a1,ffffffff8400486c <refill_split_check+0x62>
    0x8400484e     0x44    slli t5,a7,0x4
    0x84004852     0x48    add a3,t5,t1
    0x84004856     0x4c    sd a1,8(t4)
    0x8400485a     0x50    ld a1,0(a3)
    0x8400485c     0x52    bgeu t3,a0,ffffffff84004940 <refill_split_check+0x136>
    0x84004860     0x56    bltu a1,a4,ffffffff8400495e <refill_split_check+0x154>
    0x84004864     0x5a    ld a5,8(a3)
    0x84004866     0x5c    add a0,a0,a5
    0x84004868     0x5e    sd a0,8(a3)
    0x8400486a     0x60    ret
    0x8400486c     0x62    addi t3,a6,-1
    0x84004870     0x66    beq a5,t3,ffffffff84004954 <refill_split_check+0x14a>
    0x84004874     0x6a    addi a3,a3,16
    0x84004876     0x6c    addi a5,a5,1
    0x84004878     0x6e    add a3,a3,t1
    0x8400487a     0x70    ld t4,8(a3)
    0x8400487e     0x74    slli t6,a7,0x4
    0x84004882     0x78    sd a5,72(a2)
    0x84004884     0x7a    add a1,a1,t4
    0x84004886     0x7c    add t5,t1,t6
    0x8400488a     0x80    sd a1,8(a3)
    0x8400488c     0x82    li t4,19
    0x8400488e     0x84    ld a1,0(t5)
    0x84004892     0x88    bltu t4,a0,ffffffff840048de <refill_split_check+0xd4>
    0x84004896     0x8c    beq a7,a5,ffffffff840048de <refill_split_check+0xd4>
    0x8400489a     0x90    ld t4,8(t5)
    0x8400489e     0x94    add a0,a0,t4
    0x840048a0     0x96    sd a0,8(t5)
    0x840048a4     0x9a    bgeu a4,a1,ffffffff840048aa <refill_split_check+0xa0>
    0x840048a8     0x9e    mv a4,a1
    0x840048aa     0xa0    sd a4,0(t5)
    0x840048ae     0xa4    addi t4,a7,1
    0x840048b2     0xa8    ld a3,8(a3)
    0x840048b4     0xaa    li a0,19
    0x840048b6     0xac    bgeu a0,a3,ffffffff840048c8 <refill_split_check+0xbe>
    0x840048ba     0xb0    sub a4,t4,a5
    0x840048be     0xb4    bgeu a7,a5,ffffffff840048c4 <refill_split_check+0xba>
    0x840048c2     0xb8    add a4,a4,a6
    0x840048c4     0xba    bne a6,a4,ffffffff8400490e <refill_split_check+0x104>
    0x840048c8     0xbe    beq a5,t3,ffffffff8400494e <refill_split_check+0x144>
    0x840048cc     0xc2    addi a5,a5,1
    0x840048ce     0xc4    slli a4,a5,0x4
    0x840048d2     0xc8    add a4,a4,t1
    0x840048d4     0xca    ld a1,8(a4)
    0x840048d6     0xcc    sd a5,72(a2)
    0x840048d8     0xce    add a3,a3,a1
    0x840048da     0xd0    sd a3,8(a4)
    0x840048dc     0xd2    j ffffffff840048b6 <refill_split_check+0xac>
    0x840048de     0xd4    bltu a1,a4,ffffffff84004910 <refill_split_check+0x106>
    0x840048e2     0xd8    ld a4,8(t5)
    0x840048e6     0xdc    addi t4,a7,1
    0x840048ea     0xe0    add a0,a0,a4
    0x840048ec     0xe2    sd a0,8(t5)
    0x840048f0     0xe6    j ffffffff840048b2 <refill_split_check+0xa8>
    0x840048f2     0xe8    addi t3,a7,1
    0x840048f6     0xec    sub t3,t3,a5
    0x840048fa     0xf0    beq t3,a6,ffffffff84004904 <refill_split_check+0xfa>
    0x840048fe     0xf4    li t3,19
    0x84004900     0xf6    bltu t3,a1,ffffffff8400492a <refill_split_check+0x120>
    0x84004904     0xfa    bne a7,a5,ffffffff8400486c <refill_split_check+0x62>
    0x84004908     0xfe    sd a4,0(t4)
    0x8400490c    0x102    ret
    0x8400490e    0x104    ret
    0x84004910    0x106    beq a7,t3,ffffffff8400497a <refill_split_check+0x170>
    0x84004914    0x10a    addi a1,t6,16
    0x84004918    0x10e    addi t4,a7,2
    0x8400491c    0x112    add a1,a1,t1
    0x8400491e    0x114    addi a7,a7,1
    0x84004920    0x116    sd a7,80(a2)
    0x84004924    0x11a    sd a4,0(a1)
    0x84004926    0x11c    sd a0,8(a1)
    0x84004928    0x11e    j ffffffff840048b2 <refill_split_check+0xa8>
    0x8400492a    0x120    slli t5,a7,0x4
    0x8400492e    0x124    add a3,t1,t5
    0x84004932    0x128    sd a1,8(t4)
    0x84004936    0x12c    ld a1,0(a3)
    0x84004938    0x12e    bltu t3,a0,ffffffff84004860 <refill_split_check+0x56>
    0x8400493c    0x132    beq a7,a5,ffffffff84004860 <refill_split_check+0x56>
    0x84004940    0x136    ld a5,8(a3)
    0x84004942    0x138    add a0,a0,a5
    0x84004944    0x13a    sd a0,8(a3)
    0x84004946    0x13c    bltu a4,a1,ffffffff8400495a <refill_split_check+0x150>
    0x8400494a    0x140    sd a4,0(a3)
    0x8400494c    0x142    ret
    0x8400494e    0x144    mv a4,t1
    0x84004950    0x146    li a5,0
    0x84004952    0x148    j ffffffff840048d4 <refill_split_check+0xca>
    0x84004954    0x14a    mv a3,t1
    0x84004956    0x14c    li a5,0
    0x84004958    0x14e    j ffffffff8400487a <refill_split_check+0x70>
    0x8400495a    0x150    mv a4,a1
    0x8400495c    0x152    j ffffffff8400494a <refill_split_check+0x140>
    0x8400495e    0x154    addi a6,a6,-1
    0x84004960    0x156    li a5,0
    0x84004962    0x158    beq a7,a6,ffffffff8400496e <refill_split_check+0x164>
    0x84004966    0x15c    addi t5,t5,16
    0x84004968    0x15e    addi a5,a7,1
    0x8400496c    0x162    add t1,t1,t5
    0x8400496e    0x164    sd a5,80(a2)
    0x84004970    0x166    sd a4,0(t1) # fffffffffff00000 <ki_end+0x7bed9000>
    0x84004974    0x16a    sd a0,8(t1)
    0x84004978    0x16e    ret
    0x8400497a    0x170    mv a1,t1
    0x8400497c    0x172    li t4,1
    0x8400497e    0x174    li a7,0
    0x84004980    0x176    j ffffffff84004920 <refill_split_check+0x116>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
126 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_split_check` has 211 nodes.

Section refill_update (50 of 296)
=================================

Deriving specifications
-----------------------

Section `refill_update` consists of 46 instructions.


Stack analysis
---------------

No stack accesses found. Code for `refill_update`:

    0x8400478a     0x0    ld a5,72(a0)
    0x8400478c     0x2    addi a4,a0,88
    0x84004790     0x6    addi sp,sp,-32
    0x84004792     0x8    slli a5,a5,0x4
    0x84004794     0xa    add a5,a5,a4
    0x84004796     0xc    ld a6,0(a5)
    0x8400479a    0x10    sd a6,88(a0)
    0x8400479e    0x14    ld a5,8(a5)
    0x840047a0    0x16    mv a7,a6
    0x840047a2    0x18    sd a5,8(a4)
    0x840047a4    0x1a    auipc a5,0x1d
    0x840047a8    0x1e    ld a5,140(a5) # ffffffff84021830 <ksCurTime>
    0x840047ac    0x22    sd zero,72(a0)
    0x840047b0    0x26    sd zero,80(a0)
    0x840047b4    0x2a    sd a3,64(a0)
    0x840047b6    0x2c    sd a1,0(a0)
    0x840047b8    0x2e    addi a6,a5,10
    0x840047bc    0x32    bltu a6,a7,ffffffff840047c2 <refill_update+0x38>
    0x840047c0    0x36    sd a5,88(a0)
    0x840047c2    0x38    ld a6,8(a4)
    0x840047c6    0x3c    bltu a6,a2,ffffffff840047ea <refill_update+0x60>
    0x840047ca    0x40    sd a2,8(a4)
    0x840047cc    0x42    beqz a1,ffffffff840047d2 <refill_update+0x48>
    0x840047ce    0x44    addi sp,sp,32
    0x840047d0    0x46    ret
    0x840047d2    0x48    addi a3,a3,-1
    0x840047d4    0x4a    snez a3,a3
    0x840047d8    0x4e    slli a2,a3,0x4
    0x840047dc    0x52    sd a3,80(a0)
    0x840047de    0x54    add a4,a4,a2
    0x840047e0    0x56    sd a5,0(a4)
    0x840047e2    0x58    sd zero,8(a4)
    0x840047e6    0x5c    addi sp,sp,32
    0x840047e8    0x5e    ret
    0x840047ea    0x60    ld a7,88(a0)
    0x840047ee    0x64    addi a3,a3,-1
    0x840047f0    0x66    snez a3,a3
    0x840047f4    0x6a    slli a5,a3,0x4
    0x840047f8    0x6e    sd a3,80(a0)
    0x840047fa    0x70    add a4,a4,a5
    0x840047fc    0x72    add a1,a1,a7
    0x840047fe    0x74    sub a2,a2,a6
    0x84004802    0x78    sd a1,0(a4)
    0x84004804    0x7a    sd a2,8(a4)
    0x84004806    0x7c    addi sp,sp,32
    0x84004808    0x7e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_update` has 75 nodes.

Section refill_new (51 of 296)
==============================

Deriving specifications
-----------------------

Section `refill_new` consists of 21 instructions.


Stack analysis
---------------

No stack accesses found. Code for `refill_new`:

    0x84004752     0x0    auipc a5,0x1d
    0x84004756     0x4    ld a5,222(a5) # ffffffff84021830 <ksCurTime>
    0x8400475a     0x8    sd zero,72(a0)
    0x8400475e     0xc    sd a3,0(a0)
    0x84004760     0xe    sd zero,80(a0)
    0x84004764    0x12    sd a1,64(a0)
    0x84004766    0x14    sd a2,96(a0)
    0x84004768    0x16    sd a5,88(a0)
    0x8400476a    0x18    addi sp,sp,-32
    0x8400476c    0x1a    beqz a3,ffffffff84004772 <refill_new+0x20>
    0x8400476e    0x1c    addi sp,sp,32
    0x84004770    0x1e    ret
    0x84004772    0x20    addi a1,a1,-1
    0x84004774    0x22    snez a1,a1
    0x84004778    0x26    slli a4,a1,0x4
    0x8400477c    0x2a    sd a1,80(a0)
    0x8400477e    0x2c    add a0,a0,a4
    0x84004780    0x2e    sd a5,88(a0)
    0x84004782    0x30    sd zero,96(a0)
    0x84004786    0x34    addi sp,sp,32
    0x84004788    0x36    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_new` has 35 nodes.

Section resolveAddressBits (52 of 296)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 102 instructions.

RVC_FTTTFFFTF_____FT.
RVC_TFFTT____FFT__TF.
RVC_TFFTT____FT___TF.
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
26 stack accesses found. Annotated code for `resolveAddressBits`:

    0x84004438      0x0    addi sp,sp,-48
    0x8400443a      0x2    sd s0,40(sp)          ; stack access
    0x8400443c      0x4    sd s1,32(sp)          ; stack access
    0x8400443e      0x6    sd s2,24(sp)          ; stack access
    0x84004440      0x8    sd a1,0(sp)           ; stack access
    0x84004442      0xa    sd a2,8(sp)           ; stack access
    0x84004444      0xc    srli a7,a1,0x3b
    0x84004448     0x10    li a6,10
    0x8400444a     0x12    bne a7,a6,ffffffff84004516 <resolveAddressBits+0xde>
    0x8400444e     0x16    li t5,-1
    0x84004450     0x18    lui t0,0xfc000
    0x84004454     0x1c    li t6,1
    0x84004456     0x1e    mv a5,a1
    0x84004458     0x20    srli t0,t0,0x19
    0x8400445c     0x24    mv a1,a4
    0x8400445e     0x26    slli t6,t6,0x26
    0x84004460     0x28    slli t2,t5,0x27
    0x84004464     0x2c    li s0,10
    0x84004466     0x2e    srli a7,a5,0x2f
    0x8400446a     0x32    srli t1,a5,0x35
    0x8400446e     0x36    andi a7,a7,63
    0x84004472     0x3a    andi t1,t1,63
    0x84004476     0x3e    sll a6,t5,a7
    0x8400447a     0x42    not s1,a6
    0x8400447e     0x46    add a7,a7,t1
    0x84004480     0x48    sext.w a6,a1
    0x84004484     0x4c    subw t3,a1,t1
    0x84004488     0x50    sll t4,t5,t1
    0x8400448c     0x54    subw a6,a6,a7
    0x84004490     0x58    slli a5,a5,0x1
    0x84004492     0x5a    srl t3,a3,t3
    0x84004496     0x5e    not t4,t4
    0x8400449a     0x62    srl a6,a3,a6
    0x8400449e     0x66    and s2,a5,t6
    0x840044a2     0x6a    and a6,a6,s1
    0x840044a6     0x6e    and t3,t3,t4
    0x840044aa     0x72    bltu a1,t1,ffffffff840044e0 <resolveAddressBits+0xa8>
    0x840044ae     0x76    bne a2,t3,ffffffff840044e0 <resolveAddressBits+0xa8>
    0x840044b2     0x7a    bltu a1,a7,ffffffff8400453a <resolveAddressBits+0x102>
    0x840044b6     0x7e    and a5,a5,t0
    0x840044ba     0x82    slli a6,a6,0x5
    0x840044bc     0x84    beqz s2,ffffffff840044c4 <resolveAddressBits+0x8c>
    0x840044c0     0x88    or a5,a5,t2
    0x840044c4     0x8c    add a6,a6,a5
    0x840044c6     0x8e    bne a1,a7,ffffffff84004550 <resolveAddressBits+0x118>
    0x840044ca     0x92    sd zero,0(a0) # fffffffff8000000 <ki_end+0x73fd9000>  ; stack access
    0x840044ce     0x96    sd a6,8(a0)           ; stack access
    0x840044d2     0x9a    sd zero,16(a0)        ; stack access
    0x840044d6     0x9e    ld s0,40(sp)          ; stack access
    0x840044d8     0xa0    ld s1,32(sp)          ; stack access
    0x840044da     0xa2    ld s2,24(sp)          ; stack access
    0x840044dc     0xa4    addi sp,sp,48
    0x840044de     0xa6    ret
    0x840044e0     0xa8    lui a5,0x10
    0x840044e2     0xaa    addi a5,a5,-1
    0x840044e4     0xac    slli a1,a1,0x9
    0x840044e6     0xae    and a1,a1,a5
    0x840044e8     0xb0    slli t1,t1,0x2
    0x840044ea     0xb2    or t1,a1,t1
    0x840044ee     0xb6    auipc a5,0xb
    0x840044f2     0xba    addi a5,a5,-1262 # ffffffff8400f000 <riscvKSASIDTable>
    0x840044f6     0xbe    ld s0,40(sp)          ; stack access
    0x840044f8     0xc0    ori t1,t1,3
    0x840044fc     0xc4    sd t1,1024(a5)
    0x84004500     0xc8    sd a2,1032(a5)
    0x84004504     0xcc    li a5,2
    0x84004506     0xce    sd a5,0(a0)           ; stack access
    0x84004508     0xd0    sd zero,8(a0)         ; stack access
    0x8400450c     0xd4    sd a4,16(a0)          ; stack access
    0x8400450e     0xd6    ld s1,32(sp)          ; stack access
    0x84004510     0xd8    ld s2,24(sp)          ; stack access
    0x84004512     0xda    addi sp,sp,48
    0x84004514     0xdc    ret
    0x84004516     0xde    auipc a5,0xb
    0x8400451a     0xe2    sd zero,-278(a5) # ffffffff8400f400 <current_lookup_fault>
    0x8400451e     0xe6    ld s0,40(sp)          ; stack access
    0x84004520     0xe8    auipc a5,0xb
    0x84004524     0xec    sd zero,-280(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x84004528     0xf0    li a5,2
    0x8400452a     0xf2    sd a5,0(a0)           ; stack access
    0x8400452c     0xf4    sd zero,8(a0)         ; stack access
    0x84004530     0xf8    sd a4,16(a0)          ; stack access
    0x84004532     0xfa    ld s1,32(sp)          ; stack access
    0x84004534     0xfc    ld s2,24(sp)          ; stack access
    0x84004536     0xfe    addi sp,sp,48
    0x84004538    0x100    ret
    0x8400453a    0x102    slli a7,a7,0x9
    0x8400453c    0x104    slli a1,a1,0x2
    0x8400453e    0x106    or a7,a7,a1
    0x84004542    0x10a    ori a7,a7,2
    0x84004546    0x10e    auipc a5,0xb
    0x8400454a    0x112    sd a7,-326(a5) # ffffffff8400f400 <current_lookup_fault>
    0x8400454e    0x116    j ffffffff8400451e <resolveAddressBits+0xe6>
    0x84004550    0x118    ld a5,0(a6)
    0x84004554    0x11c    sub a1,a1,a7
    0x84004558    0x120    ld a2,8(a6)
    0x8400455c    0x124    srli a7,a5,0x3b
    0x84004560    0x128    beq a7,s0,ffffffff84004466 <resolveAddressBits+0x2e>
    0x84004564    0x12c    sd zero,0(a0)         ; stack access
    0x84004568    0x130    sd a6,8(a0)           ; stack access
    0x8400456c    0x134    sd a1,16(a0)          ; stack access
    0x8400456e    0x136    j ffffffff840044d6 <resolveAddressBits+0x9e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
102 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 152 nodes.

Section Arch_performTransfer (53 of 296)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x84004434    0x0    li a0,0
    0x84004436    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (54 of 296)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x84004430    0x0    li a0,0
    0x84004432    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (55 of 296)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x84004428    0x0    addi a0,a0,-7
    0x8400442a    0x2    sltiu a0,a0,3
    0x8400442e    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (56 of 296)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x84004426    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_maskCapRights (57 of 296)
======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 47 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84004004     0x0    srli a5,a1,0x3b
    0x84004008     0x4    li a4,1
    0x8400400a     0x6    addi sp,sp,-32
    0x8400400c     0x8    beq a5,a4,ffffffff8400401c <Arch_maskCapRights+0x18>
    0x84004010     0xc    sd a1,16(sp)          ; stack access
    0x84004012     0xe    sd a2,24(sp)          ; stack access
    0x84004014    0x10    ld a0,16(sp)          ; stack access
    0x84004016    0x12    ld a1,24(sp)          ; stack access
    0x84004018    0x14    addi sp,sp,32
    0x8400401a    0x16    ret
    0x8400401c    0x18    srli a4,a1,0x37
    0x84004020    0x1c    andi a4,a4,3
    0x84004022    0x1e    li a3,2
    0x84004024    0x20    beq a4,a3,ffffffff84004058 <Arch_maskCapRights+0x54>
    0x84004028    0x24    li a3,3
    0x8400402a    0x26    slli a5,a5,0x37
    0x8400402c    0x28    beq a4,a3,ffffffff84004046 <Arch_maskCapRights+0x42>
    0x84004030    0x2c    li a4,-3
    0x84004032    0x2e    slli a4,a4,0x37
    0x84004034    0x30    addi a4,a4,-1
    0x84004036    0x32    and a1,a1,a4
    0x84004038    0x34    or a1,a1,a5
    0x8400403a    0x36    sd a1,16(sp)          ; stack access
    0x8400403c    0x38    sd a2,24(sp)          ; stack access
    0x8400403e    0x3a    ld a0,16(sp)          ; stack access
    0x84004040    0x3c    ld a1,24(sp)          ; stack access
    0x84004042    0x3e    addi sp,sp,32
    0x84004044    0x40    ret
    0x84004046    0x42    srli a4,a0,0x1
    0x8400404a    0x46    andi a4,a4,1
    0x8400404c    0x48    beqz a4,ffffffff84004030 <Arch_maskCapRights+0x2c>
    0x8400404e    0x4a    andi a0,a0,1
    0x84004050    0x4c    addi a0,a0,2
    0x84004052    0x4e    slli a5,a0,0x37
    0x84004056    0x52    j ffffffff84004030 <Arch_maskCapRights+0x2c>
    0x84004058    0x54    srli a0,a0,0x1
    0x8400405a    0x56    li a4,-3
    0x8400405c    0x58    andi a0,a0,1
    0x8400405e    0x5a    slli a4,a4,0x37
    0x84004060    0x5c    addi a0,a0,1
    0x84004062    0x5e    addi a4,a4,-1
    0x84004064    0x60    slli a5,a0,0x37
    0x84004068    0x64    and a1,a1,a4
    0x8400406a    0x66    or a1,a1,a5
    0x8400406c    0x68    sd a1,16(sp)          ; stack access
    0x8400406e    0x6a    sd a2,24(sp)          ; stack access
    0x84004070    0x6c    j ffffffff8400403e <Arch_maskCapRights+0x3a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 67 nodes.

Section Arch_updateCapData (58 of 296)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_updateCapData`:

    0x84003ffa    0x0    addi sp,sp,-32
    0x84003ffc    0x2    mv a0,a2
    0x84003ffe    0x4    mv a1,a3
    0x84004000    0x6    addi sp,sp,32
    0x84004002    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_checkIRQ (59 of 296)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84003f64     0x0    addi a0,a0,-1
    0x84003f66     0x2    li a5,53
    0x84003f6a     0x6    bltu a5,a0,ffffffff84003f72 <Arch_checkIRQ+0xe>
    0x84003f6e     0xa    li a0,0
    0x84003f70     0xc    ret
    0x84003f72     0xe    auipc a5,0xb
    0x84003f76    0x12    addi a5,a5,142 # ffffffff8400f000 <riscvKSASIDTable>
    0x84003f7a    0x16    li a4,4
    0x84003f7c    0x18    sd a4,1728(a5)
    0x84003f80    0x1c    li a4,1
    0x84003f82    0x1e    sd a4,1696(a5)
    0x84003f86    0x22    li a4,54
    0x84003f8a    0x26    sd a4,1704(a5)
    0x84003f8e    0x2a    li a0,3
    0x84003f90    0x2c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 22 nodes.

Section getNBSendRecvDest (60 of 296)
=====================================

Deriving specifications
-----------------------

Section `getNBSendRecvDest` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getNBSendRecvDest`:

    0x84003f58    0x0    auipc a5,0x1e
    0x84003f5c    0x4    ld a5,-1792(a5) # ffffffff84021858 <ksCurThread>
    0x84003f60    0x8    ld a0,32(a5)
    0x84003f62    0xa    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNBSendRecvDest` has 7 nodes.

Section plat_cleanInvalidateL2Range (61 of 296)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84003f56    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (62 of 296)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84003f54    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (63 of 296)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84003f52    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section setIRQTrigger (64 of 296)
=================================

Deriving specifications
-----------------------

Section `setIRQTrigger` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setIRQTrigger`:

    0x84003f50    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQTrigger` has 2 nodes.

Section setNextPC (65 of 296)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84003f4a    0x0    sd a1,272(a0)
    0x84003f4e    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (66 of 296)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84003f44    0x0    ld a0,264(a0)
    0x84003f48    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (67 of 296)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x84003eca     0x0    addi sp,sp,-16
    0x84003ecc     0x2    sd a0,0(a2)
    0x84003ece     0x4    sd a1,8(a2)
    0x84003ed0     0x6    sd a0,0(sp)           ; stack access
    0x84003ed2     0x8    sd a1,8(sp)           ; stack access
    0x84003ed4     0xa    sd a3,0(a4)
    0x84003ed6     0xc    sfence.vma
    0x84003eda    0x10    li a0,0
    0x84003edc    0x12    addi sp,sp,16
    0x84003ede    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (68 of 296)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84003e38     0x0    addi sp,sp,-16
    0x84003e3a     0x2    sd a0,0(a2)
    0x84003e3c     0x4    sd a1,8(a2)
    0x84003e3e     0x6    sd a0,0(sp)           ; stack access
    0x84003e40     0x8    sd a1,8(sp)           ; stack access
    0x84003e42     0xa    sd a3,0(a4)
    0x84003e44     0xc    sfence.vma
    0x84003e48    0x10    li a0,0
    0x84003e4a    0x12    addi sp,sp,16
    0x84003e4c    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (69 of 296)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x84003e0c     0x0    li a4,2
    0x84003e0e     0x2    mv a5,a0
    0x84003e10     0x4    beq a0,a4,ffffffff84003e2e <maskVMRights+0x22>
    0x84003e14     0x8    li a4,3
    0x84003e16     0xa    li a0,1
    0x84003e18     0xc    beq a5,a4,ffffffff84003e1e <maskVMRights+0x12>
    0x84003e1c    0x10    ret
    0x84003e1e    0x12    srli a5,a1,0x1
    0x84003e22    0x16    andi a5,a5,1
    0x84003e24    0x18    beqz a5,ffffffff84003e1c <maskVMRights+0x10>
    0x84003e26    0x1a    andi a1,a1,1
    0x84003e28    0x1c    addi a0,a1,2
    0x84003e2c    0x20    ret
    0x84003e2e    0x22    srli a1,a1,0x1
    0x84003e30    0x24    andi a1,a1,1
    0x84003e32    0x26    addi a0,a1,1
    0x84003e36    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 26 nodes.

Section checkValidIPCBuffer (70 of 296)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 22 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x84003dd2     0x0    srli a4,a1,0x3b
    0x84003dd6     0x4    li a5,1
    0x84003dd8     0x6    addi sp,sp,-16
    0x84003dda     0x8    bne a4,a5,ffffffff84003dee <checkValidIPCBuffer+0x1c>
    0x84003dde     0xc    srli a1,a1,0x36
    0x84003de0     0xe    andi a1,a1,1
    0x84003de2    0x10    bnez a1,ffffffff84003dee <checkValidIPCBuffer+0x1c>
    0x84003de4    0x12    andi a0,a0,1023
    0x84003de8    0x16    bnez a0,ffffffff84003dfe <checkValidIPCBuffer+0x2c>
    0x84003dea    0x18    addi sp,sp,16
    0x84003dec    0x1a    ret
    0x84003dee    0x1c    li a5,3
    0x84003df0    0x1e    auipc a4,0xc
    0x84003df4    0x22    sd a5,-1840(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84003df8    0x26    li a0,3
    0x84003dfa    0x28    addi sp,sp,16
    0x84003dfc    0x2a    ret
    0x84003dfe    0x2c    li a5,5
    0x84003e00    0x2e    auipc a4,0xc
    0x84003e04    0x32    sd a5,-1856(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84003e08    0x36    li a0,3
    0x84003e0a    0x38    j ffffffff84003dea <checkValidIPCBuffer+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 32 nodes.

Section isValidVTableRoot (71 of 296)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x84003dbc     0x0    srli a4,a0,0x3b
    0x84003dc0     0x4    li a5,3
    0x84003dc2     0x6    srli a0,a0,0x27
    0x84003dc4     0x8    addi sp,sp,-16
    0x84003dc6     0xa    andi a0,a0,1
    0x84003dc8     0xc    beq a4,a5,ffffffff84003dce <isValidVTableRoot+0x12>
    0x84003dcc    0x10    li a0,0
    0x84003dce    0x12    addi sp,sp,16
    0x84003dd0    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (72 of 296)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 39 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupPTSlot`:

    0x84003ab2     0x0    srli a5,a1,0x1e
    0x84003ab6     0x4    andi a5,a5,511
    0x84003aba     0x8    slli a5,a5,0x3
    0x84003abc     0xa    add a0,a0,a5
    0x84003abe     0xc    ld a5,0(a0)
    0x84003ac0     0xe    addi sp,sp,-16
    0x84003ac2    0x10    andi a4,a5,1
    0x84003ac6    0x14    bnez a4,ffffffff84003ace <lookupPTSlot+0x1c>
    0x84003ac8    0x16    li a1,30
    0x84003aca    0x18    addi sp,sp,16
    0x84003acc    0x1a    ret
    0x84003ace    0x1c    lui t1,0xfff00
    0x84003ad2    0x20    li a7,-1
    0x84003ad4    0x22    mv a6,a1
    0x84003ad6    0x24    li t3,12
    0x84003ad8    0x26    li a1,30
    0x84003ada    0x28    srli t1,t1,0x8
    0x84003ade    0x2c    slli a7,a7,0x26
    0x84003ae0    0x2e    srli a2,a5,0x1
    0x84003ae4    0x32    srli a3,a5,0x2
    0x84003ae8    0x36    srli a4,a5,0x3
    0x84003aec    0x3a    or a3,a3,a2
    0x84003aee    0x3c    or a4,a4,a3
    0x84003af0    0x3e    andi a4,a4,1
    0x84003af2    0x40    bnez a4,ffffffff84003aca <lookupPTSlot+0x18>
    0x84003af4    0x42    slli a5,a5,0x2
    0x84003af6    0x44    and a5,a5,t1
    0x84003afa    0x48    add a5,a5,a7
    0x84003afc    0x4a    beq a1,t3,ffffffff84003aca <lookupPTSlot+0x18>
    0x84003b00    0x4e    addi a1,a1,-9
    0x84003b02    0x50    srl a0,a6,a1
    0x84003b06    0x54    andi a0,a0,511
    0x84003b0a    0x58    slli a0,a0,0x3
    0x84003b0c    0x5a    add a0,a0,a5
    0x84003b0e    0x5c    ld a5,0(a0)
    0x84003b10    0x5e    andi a4,a5,1
    0x84003b14    0x62    bnez a4,ffffffff84003ae0 <lookupPTSlot+0x2e>
    0x84003b16    0x64    addi sp,sp,16
    0x84003b18    0x66    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 51 nodes.

Section copyGlobalMappings (73 of 296)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x84003830     0x0    lui a4,0x1
    0x84003832     0x2    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x84003836     0x6    auipc a5,0x22
    0x8400383a     0xa    addi a5,a5,-54 # ffffffff84025800 <kernel_root_pageTable+0x800>
    0x8400383e     0xe    add a4,a4,a0
    0x84003840    0x10    auipc a2,0x22
    0x84003844    0x14    addi a2,a2,1984 # ffffffff84026000 <kernel_root_pageTable+0x1000>
    0x84003848    0x18    ld a3,0(a5)
    0x8400384a    0x1a    addi a5,a5,8
    0x8400384c    0x1c    addi a4,a4,8
    0x8400384e    0x1e    sd a3,-8(a4)
    0x84003852    0x22    bne a5,a2,ffffffff84003848 <copyGlobalMappings+0x18>
    0x84003856    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (74 of 296)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x8400382e    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (75 of 296)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x8400382c    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (76 of 296)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x840036cc    0x0    li a0,0
    0x840036ce    0x2    li a1,0
    0x840036d0    0x4    li a2,0
    0x840036d2    0x6    li a7,8
    0x840036d4    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section restore_user_context (77 of 296)
========================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 42 instructions.

RVC_TFFFFFT__FT___TF.
Skipping 1802a02f sc.w zero,zero,(t0)

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

No stack accesses found. Code for `restore_user_context`:

    0x84003626     0x0    auipc a5,0x1e
    0x8400362a     0x4    ld a5,562(a5) # ffffffff84021858 <ksCurThread>
    0x8400362e     0x8    mv t0,a5
    0x84003630     0xa    ld ra,0(t0)
    0x84003634     0xe    ld sp,8(t0)
    0x84003638    0x12    ld gp,16(t0)
    0x8400363c    0x16    sc.w zero,zero,(t0)
    0x84003640    0x1a    ld t2,48(t0)
    0x84003644    0x1e    ld s0,56(t0)
    0x84003648    0x22    ld s1,64(t0)
    0x8400364c    0x26    ld a0,72(t0)
    0x84003650    0x2a    ld a1,80(t0)
    0x84003654    0x2e    ld a2,88(t0)
    0x84003658    0x32    ld a3,96(t0)
    0x8400365c    0x36    ld a4,104(t0)
    0x84003660    0x3a    ld a5,112(t0)
    0x84003664    0x3e    ld a6,120(t0)
    0x84003668    0x42    ld a7,128(t0)
    0x8400366c    0x46    ld s2,136(t0)
    0x84003670    0x4a    ld s3,144(t0)
    0x84003674    0x4e    ld s4,152(t0)
    0x84003678    0x52    ld s5,160(t0)
    0x8400367c    0x56    ld s6,168(t0)
    0x84003680    0x5a    ld s7,176(t0)
    0x84003684    0x5e    ld s8,184(t0)
    0x84003688    0x62    ld s9,192(t0)
    0x8400368c    0x66    ld s10,200(t0)
    0x84003690    0x6a    ld s11,208(t0)
    0x84003694    0x6e    ld t3,216(t0)
    0x84003698    0x72    ld t4,224(t0)
    0x8400369c    0x76    ld t5,232(t0)
    0x840036a0    0x7a    ld t6,240(t0)
    0x840036a4    0x7e    ld t1,24(t0)
    0x840036a8    0x82    add tp,t1,zero
    0x840036ac    0x86    ld t1,272(t0)
    0x840036b0    0x8a    csrw sepc,t1
    0x840036b4    0x8e    csrw sscratch,t0
    0x840036b8    0x92    ld t1,256(t0)
    0x840036bc    0x96    csrw sstatus,t1
    0x840036c0    0x9a    ld t1,40(t0)
    0x840036c4    0x9e    ld t0,32(t0)
    0x840036c8    0xa2    sret

Proving inst theorems
---------------------

42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 81 nodes.

Section setMRs_lookup_failure (78 of 296)
=========================================

Deriving specifications
-----------------------

Section `setMRs_lookup_failure` consists of 107 instructions.

RVC_TFFTT____T____TF..

Stack analysis
---------------

No stack accesses found. Code for `setMRs_lookup_failure`:

    0x840034fe      0x0    slli a5,a4,0x20
    0x84003502      0x4    auipc t3,0xa
    0x84003506      0x8    addi t3,t3,582 # ffffffff8400d748 <msgRegisters>
    0x8400350a      0xc    srli a5,a5,0x20
    0x8400350c      0xe    add a5,a5,t3
    0x8400350e     0x10    lbu a5,0(a5) # fffffffff8000000 <ki_end+0x73fd9000>
    0x84003512     0x14    andi a6,a2,3
    0x84003516     0x18    addi t1,a6,1
    0x8400351a     0x1c    slli a5,a5,0x3
    0x8400351c     0x1e    add a5,a5,a0
    0x8400351e     0x20    addiw a7,a4,1
    0x84003522     0x24    sd t1,0(a5)
    0x84003526     0x28    li a5,2
    0x84003528     0x2a    mv t4,a0
    0x8400352a     0x2c    addi sp,sp,-16
    0x8400352c     0x2e    sext.w a0,a7
    0x84003530     0x32    beq a6,a5,ffffffff84003544 <setMRs_lookup_failure+0x46>
    0x84003534     0x36    li a5,3
    0x84003536     0x38    beq a6,a5,ffffffff84003584 <setMRs_lookup_failure+0x86>
    0x8400353a     0x3c    li a5,1
    0x8400353c     0x3e    beq a6,a5,ffffffff8400356e <setMRs_lookup_failure+0x70>
    0x84003540     0x42    addi sp,sp,16
    0x84003542     0x44    ret
    0x84003544     0x46    srli a5,a2,0x2
    0x84003548     0x4a    li a3,4
    0x8400354a     0x4c    andi a5,a5,127
    0x8400354e     0x50    bne a0,a3,ffffffff840035e8 <setMRs_lookup_failure+0xea>
    0x84003552     0x54    beqz a1,ffffffff840035c8 <setMRs_lookup_failure+0xca>
    0x84003554     0x56    srli a2,a2,0x9
    0x84003556     0x58    sd a5,40(a1)
    0x84003558     0x5a    andi a2,a2,127
    0x8400355c     0x5e    addiw a0,a4,3
    0x84003560     0x62    slli a5,a0,0x20
    0x84003564     0x66    srli a5,a5,0x1d
    0x84003566     0x68    add a1,a1,a5
    0x84003568     0x6a    sd a2,0(a1)
    0x8400356a     0x6c    addi sp,sp,16
    0x8400356c     0x6e    ret
    0x8400356e     0x70    srli a2,a2,0x2
    0x84003570     0x72    li a5,4
    0x84003572     0x74    andi a2,a2,127
    0x84003576     0x78    bne a0,a5,ffffffff840035ce <setMRs_lookup_failure+0xd0>
    0x8400357a     0x7c    beqz a1,ffffffff840035c8 <setMRs_lookup_failure+0xca>
    0x8400357c     0x7e    sd a2,40(a1)
    0x8400357e     0x80    li a0,5
    0x84003580     0x82    addi sp,sp,16
    0x84003582     0x84    ret
    0x84003584     0x86    srli a5,a2,0x9
    0x84003588     0x8a    li a6,4
    0x8400358a     0x8c    andi a5,a5,127
    0x8400358e     0x90    bne a0,a6,ffffffff840035ae <setMRs_lookup_failure+0xb0>
    0x84003592     0x94    beqz a1,ffffffff840035c8 <setMRs_lookup_failure+0xca>
    0x84003594     0x96    sd a5,40(a1)
    0x84003596     0x98    addiw a5,a4,3
    0x8400359a     0x9c    slli a5,a5,0x20
    0x8400359c     0x9e    srli a5,a5,0x1d
    0x8400359e     0xa0    add a5,a5,a1
    0x840035a0     0xa2    srli a2,a2,0x2
    0x840035a2     0xa4    sd a3,0(a5)
    0x840035a4     0xa6    andi a2,a2,127
    0x840035a8     0xaa    addiw a0,a4,4
    0x840035ac     0xae    j ffffffff84003560 <setMRs_lookup_failure+0x62>
    0x840035ae     0xb0    slli a7,a7,0x20
    0x840035b0     0xb2    srli a7,a7,0x20
    0x840035b4     0xb6    add a7,a7,t3
    0x840035b6     0xb8    lbu a0,0(a7)
    0x840035ba     0xbc    li a6,1
    0x840035bc     0xbe    slli a0,a0,0x3
    0x840035be     0xc0    add a0,a0,t4
    0x840035c0     0xc2    sd a5,0(a0)
    0x840035c2     0xc4    beq a4,a6,ffffffff8400360c <setMRs_lookup_failure+0x10e>
    0x840035c6     0xc8    bnez a1,ffffffff84003596 <setMRs_lookup_failure+0x98>
    0x840035c8     0xca    li a0,4
    0x840035ca     0xcc    addi sp,sp,16
    0x840035cc     0xce    ret
    0x840035ce     0xd0    slli a7,a7,0x20
    0x840035d0     0xd2    srli a7,a7,0x20
    0x840035d4     0xd6    add a7,a7,t3
    0x840035d6     0xd8    lbu a5,0(a7)
    0x840035da     0xdc    addiw a0,a4,2
    0x840035de     0xe0    slli a5,a5,0x3
    0x840035e0     0xe2    add t4,t4,a5
    0x840035e2     0xe4    sd a2,0(t4) # fffffffffe000000 <ki_end+0x79fd9000>
    0x840035e6     0xe8    j ffffffff84003540 <setMRs_lookup_failure+0x42>
    0x840035e8     0xea    slli a7,a7,0x20
    0x840035ea     0xec    srli a7,a7,0x20
    0x840035ee     0xf0    add a7,a7,t3
    0x840035f0     0xf2    lbu a3,0(a7)
    0x840035f4     0xf6    srli a2,a2,0x9
    0x840035f6     0xf8    li a0,1
    0x840035f8     0xfa    slli a3,a3,0x3
    0x840035fa     0xfc    add a3,a3,t4
    0x840035fc     0xfe    sd a5,0(a3)
    0x840035fe    0x100    andi a2,a2,127
    0x84003602    0x104    beq a4,a0,ffffffff8400361e <setMRs_lookup_failure+0x120>
    0x84003606    0x108    bnez a1,ffffffff8400355c <setMRs_lookup_failure+0x5e>
    0x84003608    0x10a    li a0,4
    0x8400360a    0x10c    j ffffffff840035ca <setMRs_lookup_failure+0xcc>
    0x8400360c    0x10e    srli a2,a2,0x2
    0x8400360e    0x110    sd a3,112(t4)
    0x84003612    0x114    andi a2,a2,127
    0x84003616    0x118    beqz a1,ffffffff840035c8 <setMRs_lookup_failure+0xca>
    0x84003618    0x11a    addiw a0,a4,4
    0x8400361c    0x11e    j ffffffff84003560 <setMRs_lookup_failure+0x62>
    0x8400361e    0x120    sd a2,112(t4)
    0x84003622    0x124    li a0,4
    0x84003624    0x126    j ffffffff840035ca <setMRs_lookup_failure+0xcc>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
107 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_lookup_failure` has 154 nodes.

Section emptySlot (79 of 296)
=============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 88 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

5 stack accesses found. Annotated code for `emptySlot`:

    0x8400340c     0x0    ld a5,0(a0)
    0x8400340e     0x2    addi sp,sp,-16
    0x84003410     0x4    sd a1,0(sp)           ; stack access
    0x84003412     0x6    sd a2,8(sp)           ; stack access
    0x84003414     0x8    srli a5,a5,0x3b
    0x84003416     0xa    beqz a5,ffffffff84003462 <emptySlot+0x56>
    0x84003418     0xc    ld a2,24(a0)
    0x8400341a     0xe    lui a5,0xf8000
    0x8400341e    0x12    srli a5,a5,0x19
    0x84003420    0x14    srli a4,a2,0x26
    0x84003424    0x18    andi a4,a4,1
    0x84003426    0x1a    ld a3,16(a0)
    0x84003428    0x1c    and a5,a5,a2
    0x8400342a    0x1e    beqz a4,ffffffff840034d0 <emptySlot+0xc4>
    0x8400342c    0x20    li a4,-1
    0x8400342e    0x22    slli a4,a4,0x27
    0x84003430    0x24    or a4,a4,a5
    0x84003432    0x26    mv a7,a4
    0x84003434    0x28    beqz a3,ffffffff84003466 <emptySlot+0x5a>
    0x84003436    0x2a    ld a1,24(a3)
    0x84003438    0x2c    li a6,-1
    0x8400343a    0x2e    slli a6,a6,0x27
    0x8400343c    0x30    addi a6,a6,3
    0x8400343e    0x32    and a1,a1,a6
    0x84003442    0x36    or a5,a5,a1
    0x84003444    0x38    sd a5,24(a3)
    0x84003446    0x3a    bnez a4,ffffffff84003466 <emptySlot+0x5a>
    0x84003448    0x3c    ld a5,0(sp)           ; stack access
    0x8400344a    0x3e    sd zero,0(a0)
    0x8400344e    0x42    sd zero,8(a0)
    0x84003452    0x46    sd zero,16(a0)
    0x84003456    0x4a    sd zero,24(a0)
    0x8400345a    0x4e    srli a5,a5,0x3b
    0x8400345c    0x50    li a4,16
    0x8400345e    0x52    beq a5,a4,ffffffff84003496 <emptySlot+0x8a>
    0x84003462    0x56    addi sp,sp,16
    0x84003464    0x58    ret
    0x84003466    0x5a    ld a5,24(a7)
    0x8400346a    0x5e    sd a3,16(a7)
    0x8400346e    0x62    andi a4,a5,1
    0x84003472    0x66    beqz a4,ffffffff840034c2 <emptySlot+0xb6>
    0x84003474    0x68    andi a5,a5,-2
    0x84003476    0x6a    or a5,a5,a4
    0x84003478    0x6c    sd a5,24(a7)
    0x8400347c    0x70    ld a5,0(sp)           ; stack access
    0x8400347e    0x72    sd zero,0(a0)
    0x84003482    0x76    sd zero,8(a0)
    0x84003486    0x7a    sd zero,16(a0)
    0x8400348a    0x7e    sd zero,24(a0)
    0x8400348e    0x82    srli a5,a5,0x3b
    0x84003490    0x84    li a4,16
    0x84003492    0x86    bne a5,a4,ffffffff84003462 <emptySlot+0x56>
    0x84003496    0x8a    ld a4,8(sp)           ; stack access
    0x84003498    0x8c    auipc a3,0xc
    0x8400349c    0x90    addi a3,a3,-1176 # ffffffff8400f000 <riscvKSASIDTable>
    0x840034a0    0x94    li a2,54
    0x840034a4    0x98    slli a5,a4,0x34
    0x840034a8    0x9c    srli a1,a5,0x31
    0x840034ac    0xa0    add a3,a3,a1
    0x840034ae    0xa2    srli a5,a5,0x34
    0x840034b0    0xa4    sd zero,1736(a3)
    0x840034b4    0xa8    bne a5,a2,ffffffff840034d8 <emptySlot+0xcc>
    0x840034b8    0xac    li a5,32
    0x840034bc    0xb0    csrrc a5,sie,a5
    0x840034c0    0xb4    j ffffffff84003462 <emptySlot+0x56>
    0x840034c2    0xb6    andi a4,a2,1
    0x840034c6    0xba    andi a5,a5,-2
    0x840034c8    0xbc    or a5,a5,a4
    0x840034ca    0xbe    sd a5,24(a7)
    0x840034ce    0xc2    j ffffffff8400347c <emptySlot+0x70>
    0x840034d0    0xc4    mv a7,a5
    0x840034d2    0xc6    mv a4,a5
    0x840034d4    0xc8    bnez a3,ffffffff84003436 <emptySlot+0x2a>
    0x840034d6    0xca    j ffffffff84003446 <emptySlot+0x3a>
    0x840034d8    0xcc    srli a5,a5,0x5
    0x840034da    0xce    lui a3,0xc0002
    0x840034de    0xd2    addi a3,a3,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x840034e2    0xd6    slli a5,a5,0x2
    0x840034e4    0xd8    add a5,a5,a3
    0x840034e6    0xda    lw a2,0(a5)
    0x840034e8    0xdc    andi a3,a4,31
    0x840034ec    0xe0    li a4,1
    0x840034ee    0xe2    sll a4,a4,a3
    0x840034f2    0xe6    not a4,a4
    0x840034f6    0xea    and a4,a4,a2
    0x840034f8    0xec    sext.w a4,a4
    0x840034fa    0xee    sw a4,0(a5)
    0x840034fc    0xf0    j ffffffff84003462 <emptySlot+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 133 nodes.

Section refill_unblock_check_part_0 (80 of 296)
===============================================

Deriving specifications
-----------------------

Section `refill_unblock_check_part_0` consists of 35 instructions.


Stack analysis
---------------

No stack accesses found. Code for `refill_unblock_check_part_0`:

    0x840033a2     0x0    ld a4,72(a0)
    0x840033a4     0x2    addi a7,a0,88
    0x840033a8     0x6    auipc a1,0x1e
    0x840033ac     0xa    ld a1,1160(a1) # ffffffff84021830 <ksCurTime>
    0x840033b0     0xe    slli a5,a4,0x4
    0x840033b4    0x12    add a5,a5,a7
    0x840033b6    0x14    ld a2,0(a5)
    0x840033b8    0x16    addi a3,a1,10
    0x840033bc    0x1a    bltu a3,a2,ffffffff8400340a <refill_unblock_check.part.0+0x68>
    0x840033c0    0x1e    ld t1,64(a0)
    0x840033c4    0x22    ld t4,80(a0)
    0x840033c8    0x26    sd a1,0(a5)
    0x840033ca    0x28    ld a2,8(a5)
    0x840033cc    0x2a    li a5,1
    0x840033ce    0x2c    auipc a3,0x1e
    0x840033d2    0x30    sd a5,1130(a3) # ffffffff84021838 <ksReprogram>
    0x840033d6    0x34    addi t1,t1,-1
    0x840033d8    0x36    addi a3,a4,1
    0x840033dc    0x3a    slli a5,a3,0x4
    0x840033e0    0x3e    add a5,a5,a7
    0x840033e2    0x40    bne a4,t1,ffffffff840033ea <refill_unblock_check.part.0+0x48>
    0x840033e6    0x44    mv a5,a7
    0x840033e8    0x46    li a3,0
    0x840033ea    0x48    add a6,a1,a2
    0x840033ee    0x4c    beq a4,t4,ffffffff8400340a <refill_unblock_check.part.0+0x68>
    0x840033f2    0x50    ld t3,0(a5)
    0x840033f6    0x54    mv a4,a3
    0x840033f8    0x56    bltu a6,t3,ffffffff8400340a <refill_unblock_check.part.0+0x68>
    0x840033fc    0x5a    ld a6,8(a5)
    0x84003400    0x5e    sd a3,72(a0)
    0x84003402    0x60    sd a1,0(a5)
    0x84003404    0x62    add a2,a2,a6
    0x84003406    0x64    sd a2,8(a5)
    0x84003408    0x66    j ffffffff840033d8 <refill_unblock_check.part.0+0x36>
    0x8400340a    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_unblock_check_part_0` has 57 nodes.

Section tcbSchedEnqueue_part_0 (81 of 296)
==========================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue_part_0` consists of 43 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue_part_0`:

    0x8400331a     0x0    ld a3,344(a0)
    0x8400331e     0x4    ld a6,360(a0)
    0x84003322     0x8    auipc a4,0xd
    0x84003326     0xc    addi a4,a4,1246 # ffffffff84010800 <ksReadyQueues>
    0x8400332a    0x10    slli a5,a3,0x8
    0x8400332e    0x14    add a5,a5,a6
    0x84003330    0x16    slli a5,a5,0x4
    0x84003332    0x18    add a1,a4,a5
    0x84003336    0x1c    ld a2,8(a1)
    0x84003338    0x1e    ld a1,0(a1)
    0x8400333a    0x20    beqz a2,ffffffff8400335c <tcbSchedEnqueue.part.0+0x42>
    0x8400333c    0x22    sd a0,400(a1)
    0x84003340    0x26    ld a3,288(a0)
    0x84003344    0x2a    add a5,a5,a4
    0x84003346    0x2c    sd zero,400(a0)
    0x8400334a    0x30    sd a1,392(a0)
    0x8400334e    0x34    sd a0,0(a5)
    0x84003350    0x36    sd a2,8(a5)
    0x84003352    0x38    ori a5,a3,2
    0x84003356    0x3c    sd a5,288(a0)
    0x8400335a    0x40    ret
    0x8400335c    0x42    srli t1,a6,0x6
    0x84003360    0x46    li a2,3
    0x84003362    0x48    sub a7,a2,t1
    0x84003366    0x4c    slli a2,a3,0x2
    0x8400336a    0x50    add a2,a2,a7
    0x8400336c    0x52    slli a2,a2,0x3
    0x8400336e    0x54    auipc a7,0xc
    0x84003372    0x58    addi a7,a7,-878 # ffffffff8400f000 <riscvKSASIDTable>
    0x84003376    0x5c    slli a3,a3,0x3
    0x84003378    0x5e    add a3,a3,a7
    0x8400337a    0x60    add a7,a7,a2
    0x8400337c    0x62    ld t3,1552(a3)
    0x84003380    0x66    ld t4,1040(a7)
    0x84003384    0x6a    li a2,1
    0x84003386    0x6c    sll t1,a2,t1
    0x8400338a    0x70    sll a2,a2,a6
    0x8400338e    0x74    or a2,a2,t4
    0x84003392    0x78    or t1,t3,t1
    0x84003396    0x7c    sd a2,1040(a7)
    0x8400339a    0x80    sd t1,1552(a3)
    0x8400339e    0x84    mv a2,a0
    0x840033a0    0x86    j ffffffff84003340 <tcbSchedEnqueue.part.0+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue_part_0` has 61 nodes.

Section validFaultHandler_isra_0 (82 of 296)
============================================

Deriving specifications
-----------------------

Section `validFaultHandler_isra_0` consists of 23 instructions.


Stack analysis
---------------

No stack accesses found. Code for `validFaultHandler_isra_0`:

    0x840032dc     0x0    srli a5,a0,0x3b
    0x840032e0     0x4    beqz a5,ffffffff84003316 <validFaultHandler.isra.0+0x3a>
    0x840032e2     0x6    li a4,4
    0x840032e4     0x8    bne a5,a4,ffffffff84003308 <validFaultHandler.isra.0+0x2c>
    0x840032e8     0xc    srli a5,a0,0x37
    0x840032ec    0x10    andi a5,a5,1
    0x840032ee    0x12    beqz a5,ffffffff84003308 <validFaultHandler.isra.0+0x2c>
    0x840032f0    0x14    srli a4,a0,0x39
    0x840032f4    0x18    srli a5,a0,0x3a
    0x840032f8    0x1c    li a3,8
    0x840032fa    0x1e    andi a4,a4,1
    0x840032fc    0x20    li a0,1
    0x840032fe    0x22    beq a5,a3,ffffffff84003304 <validFaultHandler.isra.0+0x28>
    0x84003302    0x26    ret
    0x84003304    0x28    mv a0,a4
    0x84003306    0x2a    bnez a4,ffffffff84003302 <validFaultHandler.isra.0+0x26>
    0x84003308    0x2c    li a5,2
    0x8400330a    0x2e    auipc a4,0xc
    0x8400330e    0x32    sd a5,950(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84003312    0x36    li a0,0
    0x84003314    0x38    ret
    0x84003316    0x3a    li a0,1
    0x84003318    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `validFaultHandler_isra_0` has 37 nodes.

Section tcbSchedDequeue_part_0 (83 of 296)
==========================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue_part_0` consists of 61 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue_part_0`:

    0x8400321a     0x0    ld a7,344(a0) # fffffffff8000158 <ki_end+0x73fd9158>
    0x8400321e     0x4    ld a4,360(a0)
    0x84003222     0x8    ld a2,400(a0)
    0x84003226     0xc    slli a5,a7,0x8
    0x8400322a    0x10    add a5,a5,a4
    0x8400322c    0x12    auipc a1,0xd
    0x84003230    0x16    addi a1,a1,1492 # ffffffff84010800 <ksReadyQueues>
    0x84003234    0x1a    slli a5,a5,0x4
    0x84003236    0x1c    add a6,a1,a5
    0x8400323a    0x20    ld t1,8(a6)
    0x8400323e    0x24    ld a3,392(a0)
    0x84003242    0x28    beqz a2,ffffffff8400326a <tcbSchedDequeue.part.0+0x50>
    0x84003244    0x2a    ld a6,0(a6)
    0x84003248    0x2e    sd a3,392(a2)
    0x8400324c    0x32    beqz a3,ffffffff840032bc <tcbSchedDequeue.part.0+0xa2>
    0x8400324e    0x34    sd a2,400(a3)
    0x84003252    0x38    ld a4,288(a0)
    0x84003256    0x3c    add a5,a5,a1
    0x84003258    0x3e    sd a6,0(a5)
    0x8400325c    0x42    sd t1,8(a5)
    0x84003260    0x46    andi a5,a4,-3
    0x84003264    0x4a    sd a5,288(a0)
    0x84003268    0x4e    ret
    0x8400326a    0x50    bnez a3,ffffffff840032c0 <tcbSchedDequeue.part.0+0xa6>
    0x8400326c    0x52    srli t1,a4,0x6
    0x84003270    0x56    li a3,3
    0x84003272    0x58    sub a2,a3,t1
    0x84003276    0x5c    slli a3,a7,0x2
    0x8400327a    0x60    add a3,a3,a2
    0x8400327c    0x62    auipc a6,0xc
    0x84003280    0x66    addi a6,a6,-636 # ffffffff8400f000 <riscvKSASIDTable>
    0x84003284    0x6a    slli a3,a3,0x3
    0x84003286    0x6c    add a3,a3,a6
    0x84003288    0x6e    ld t3,1040(a3)
    0x8400328c    0x72    li a2,1
    0x8400328e    0x74    sll a4,a2,a4
    0x84003292    0x78    not a4,a4
    0x84003296    0x7c    and a4,a4,t3
    0x8400329a    0x80    sd a4,1040(a3)
    0x8400329e    0x84    beqz a4,ffffffff840032c4 <tcbSchedDequeue.part.0+0xaa>
    0x840032a0    0x86    ld a4,288(a0)
    0x840032a4    0x8a    add a5,a5,a1
    0x840032a6    0x8c    li a6,0
    0x840032a8    0x8e    li t1,0
    0x840032aa    0x90    sd a6,0(a5)
    0x840032ae    0x94    sd t1,8(a5)
    0x840032b2    0x98    andi a5,a4,-3
    0x840032b6    0x9c    sd a5,288(a0)
    0x840032ba    0xa0    ret
    0x840032bc    0xa2    mv t1,a2
    0x840032be    0xa4    j ffffffff84003252 <tcbSchedDequeue.part.0+0x38>
    0x840032c0    0xa6    mv a6,a3
    0x840032c2    0xa8    j ffffffff8400324e <tcbSchedDequeue.part.0+0x34>
    0x840032c4    0xaa    slli a7,a7,0x3
    0x840032c6    0xac    add a7,a7,a6
    0x840032c8    0xae    ld a3,1552(a7)
    0x840032cc    0xb2    sll a4,a2,t1
    0x840032d0    0xb6    not a4,a4
    0x840032d4    0xba    and a4,a4,a3
    0x840032d6    0xbc    sd a4,1552(a7)
    0x840032da    0xc0    j ffffffff840032a0 <tcbSchedDequeue.part.0+0x86>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue_part_0` has 91 nodes.

Section findVSpaceForASID (84 of 296)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 30 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x840031cc     0x0    srli a5,a0,0x9
    0x840031d0     0x4    slli a4,a5,0x3
    0x840031d4     0x8    auipc a5,0xc
    0x840031d8     0xc    addi a5,a5,-468 # ffffffff8400f000 <riscvKSASIDTable>
    0x840031dc    0x10    add a5,a5,a4
    0x840031de    0x12    ld a5,0(a5)
    0x840031e0    0x14    addi sp,sp,-16
    0x840031e2    0x16    beqz a5,ffffffff840031fc <findVSpaceForASID+0x30>
    0x840031e4    0x18    andi a0,a0,511
    0x840031e8    0x1c    slli a0,a0,0x3
    0x840031ea    0x1e    add a0,a0,a5
    0x840031ec    0x20    ld a5,0(a0)
    0x840031ee    0x22    beqz a5,ffffffff840031fc <findVSpaceForASID+0x30>
    0x840031f0    0x24    sd zero,0(sp)         ; stack access
    0x840031f2    0x26    sd a5,8(sp)           ; stack access
    0x840031f4    0x28    ld a0,0(sp)           ; stack access
    0x840031f6    0x2a    ld a1,8(sp)           ; stack access
    0x840031f8    0x2c    addi sp,sp,16
    0x840031fa    0x2e    ret
    0x840031fc    0x30    auipc a5,0xc
    0x84003200    0x34    sd zero,516(a5) # ffffffff8400f400 <current_lookup_fault>
    0x84003204    0x38    auipc a5,0xc
    0x84003208    0x3c    sd zero,516(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x8400320c    0x40    li a5,2
    0x8400320e    0x42    sd a5,0(sp)           ; stack access
    0x84003210    0x44    sd zero,8(sp)         ; stack access
    0x84003212    0x46    ld a0,0(sp)           ; stack access
    0x84003214    0x48    ld a1,8(sp)           ; stack access
    0x84003216    0x4a    addi sp,sp,16
    0x84003218    0x4c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 48 nodes.

Section cap_get_capPtr (85 of 296)
==================================

Deriving specifications
-----------------------

Section `cap_get_capPtr` consists of 97 instructions.

RVC_TFFFFT___FFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `cap_get_capPtr`:

    0x840030d2     0x0    srli a5,a0,0x3b
    0x840030d6     0x4    li a4,24
    0x840030d8     0x6    addi sp,sp,-16
    0x840030da     0x8    bltu a4,a5,ffffffff84003110 <cap_get_capPtr+0x3e>
    0x840030de     0xc    auipc a2,0xa
    0x840030e2    0x10    addi a2,a2,1650 # ffffffff8400d750 <msgRegisters+0x8>
    0x840030e6    0x14    slli a3,a5,0x2
    0x840030ea    0x18    add a3,a3,a2
    0x840030ec    0x1a    lw a4,0(a3)
    0x840030ee    0x1c    add a4,a4,a2
    0x840030f0    0x1e    jr a4
    0x840030f2    0x20    li a0,0
    0x840030f4    0x22    addi sp,sp,16
    0x840030f6    0x24    ret
    0x840030f8    0x26    srli a3,a0,0x26
    0x840030fc    0x2a    li a4,-1
    0x840030fe    0x2c    srli a5,a4,0x19
    0x84003102    0x30    andi a3,a3,1
    0x84003104    0x32    and a0,a0,a5
    0x84003106    0x34    beqz a3,ffffffff840030f4 <cap_get_capPtr+0x22>
    0x84003108    0x36    slli a4,a4,0x27
    0x8400310a    0x38    or a0,a0,a4
    0x8400310c    0x3a    addi sp,sp,16
    0x8400310e    0x3c    ret
    0x84003110    0x3e    li a4,3
    0x84003112    0x40    beq a5,a4,ffffffff840031c0 <cap_get_capPtr+0xee>
    0x84003116    0x44    li a4,13
    0x84003118    0x46    beq a5,a4,ffffffff840031a8 <cap_get_capPtr+0xd6>
    0x8400311c    0x4a    li a4,1
    0x8400311e    0x4c    li a0,0
    0x84003120    0x4e    bne a5,a4,ffffffff840030f4 <cap_get_capPtr+0x22>
    0x84003124    0x52    srli a1,a1,0x9
    0x84003126    0x54    li a4,-1
    0x84003128    0x56    slli a5,a5,0x26
    0x8400312a    0x58    srli a0,a4,0x19
    0x8400312e    0x5c    and a5,a5,a1
    0x84003130    0x5e    and a0,a0,a1
    0x84003132    0x60    bnez a5,ffffffff84003108 <cap_get_capPtr+0x36>
    0x84003134    0x62    j ffffffff840030f4 <cap_get_capPtr+0x22>
    0x84003136    0x64    srli a1,a1,0x10
    0x84003138    0x66    li a5,-1
    0x8400313a    0x68    srli a4,a1,0x26
    0x8400313e    0x6c    srli a0,a5,0x19
    0x84003142    0x70    andi a4,a4,1
    0x84003144    0x72    and a0,a0,a1
    0x84003146    0x74    beqz a4,ffffffff840030f4 <cap_get_capPtr+0x22>
    0x84003148    0x76    slli a5,a5,0x27
    0x8400314a    0x78    or a0,a0,a5
    0x8400314c    0x7a    addi sp,sp,16
    0x8400314e    0x7c    ret
    0x84003150    0x7e    andi a5,a0,127
    0x84003154    0x82    li a4,64
    0x84003158    0x86    beq a5,a4,ffffffff840031c4 <cap_get_capPtr+0xf2>
    0x8400315c    0x8a    andi a0,a0,63
    0x84003160    0x8e    addiw a0,a0,1
    0x84003162    0x90    li a5,-1
    0x84003164    0x92    sll a5,a5,a0
    0x84003168    0x96    and a0,a5,a1
    0x8400316c    0x9a    addi sp,sp,16
    0x8400316e    0x9c    ret
    0x84003170    0x9e    slli a0,a0,0x1
    0x84003172    0xa0    srli a5,a0,0x26
    0x84003176    0xa4    lui a4,0xfc000
    0x8400317a    0xa8    srli a4,a4,0x19
    0x8400317c    0xaa    andi a5,a5,1
    0x8400317e    0xac    and a0,a0,a4
    0x84003180    0xae    beqz a5,ffffffff840030f4 <cap_get_capPtr+0x22>
    0x84003182    0xb0    li a5,-1
    0x84003184    0xb2    j ffffffff84003148 <cap_get_capPtr+0x76>
    0x84003186    0xb4    srli a3,a0,0x26
    0x8400318a    0xb8    li a4,-1
    0x8400318c    0xba    srli a5,a4,0x19
    0x84003190    0xbe    andi a3,a3,1
    0x84003192    0xc0    and a0,a0,a5
    0x84003194    0xc2    beqz a3,ffffffff8400319a <cap_get_capPtr+0xc8>
    0x84003196    0xc4    slli a4,a4,0x27
    0x84003198    0xc6    or a0,a0,a4
    0x8400319a    0xc8    andi a0,a0,-1024
    0x8400319e    0xcc    addi sp,sp,16
    0x840031a0    0xce    ret
    0x840031a2    0xd0    mv a0,a1
    0x840031a4    0xd2    addi sp,sp,16
    0x840031a6    0xd4    ret
    0x840031a8    0xd6    slli a5,a0,0x2
    0x840031ac    0xda    srli a4,a5,0x26
    0x840031b0    0xde    lui a0,0xf8000
    0x840031b4    0xe2    srli a0,a0,0x19
    0x840031b6    0xe4    andi a4,a4,1
    0x840031b8    0xe6    and a0,a0,a5
    0x840031ba    0xe8    beqz a4,ffffffff840030f4 <cap_get_capPtr+0x22>
    0x840031bc    0xea    li a5,-1
    0x840031be    0xec    j ffffffff84003148 <cap_get_capPtr+0x76>
    0x840031c0    0xee    srli a1,a1,0x9
    0x840031c2    0xf0    j ffffffff84003138 <cap_get_capPtr+0x66>
    0x840031c4    0xf2    li a5,-32
    0x840031c6    0xf4    and a0,a5,a1
    0x840031ca    0xf8    j ffffffff8400316c <cap_get_capPtr+0x9a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cap_get_capPtr` has 127 nodes.

Section idle_thread (86 of 296)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x840030cc    0x0    wfi
    0x840030d0    0x4    j ffffffff840030cc <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section bi_finalise (87 of 296)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x84001368     0x0    auipc a5,0xd
    0x8400136c     0x4    addi a5,a5,152 # ffffffff8400e400 <ndks_boot>
    0x84001370     0x8    ld a3,1096(a5)
    0x84001374     0xc    ld a4,1080(a5)
    0x84001378    0x10    ld a5,1088(a5)
    0x8400137c    0x14    sd a3,48(a4)
    0x8400137e    0x16    sd a5,40(a4)
    0x84001380    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (88 of 296)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 20 instructions.

Skipping c01027f3 rdtime a5


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x8400131c     0x0    auipc a5,0x20
    0x84001320     0x4    ld a5,1332(a5) # ffffffff84021850 <ksIdleThread>
    0x84001324     0x8    ld a4,368(a5)
    0x84001328     0xc    auipc a3,0x20
    0x8400132c    0x10    sd a5,1328(a3) # ffffffff84021858 <ksCurThread>
    0x84001330    0x14    auipc a5,0x20
    0x84001334    0x18    sd zero,1296(a5) # ffffffff84021840 <ksConsumed>
    0x84001338    0x1c    auipc a5,0x20
    0x8400133c    0x20    sd a4,1264(a5) # ffffffff84021828 <ksCurSC>
    0x84001340    0x24    li a5,1
    0x84001342    0x26    auipc a4,0x20
    0x84001346    0x2a    sd a5,1270(a4) # ffffffff84021838 <ksReprogram>
    0x8400134a    0x2e    auipc a3,0x20
    0x8400134e    0x32    sd a0,1278(a3) # ffffffff84021848 <ksSchedulerAction>
    0x84001352    0x36    auipc a5,0x20
    0x84001356    0x3a    sd zero,1294(a5) # ffffffff84021860 <ksReleaseHead>
    0x8400135a    0x3e    rdtime a5
    0x8400135e    0x42    auipc a4,0x20
    0x84001362    0x46    sd a5,1234(a4) # ffffffff84021830 <ksCurTime>
    0x84001366    0x4a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 31 nodes.

Section init_sched_control (89 of 296)
======================================

Deriving specifications
-----------------------

Section `init_sched_control` consists of 158 instructions.

LW..
RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

18 stack accesses found. Annotated code for `init_sched_control`:

    0x84001172      0x0    addi sp,sp,-96
    0x84001174      0x2    sd s3,64(sp)          ; stack access
    0x84001176      0x4    auipc a7,0xd
    0x8400117a      0x8    addi a7,a7,650 # ffffffff8400e400 <ndks_boot>
    0x8400117e      0xc    sd s0,88(sp)          ; stack access
    0x84001180      0xe    sd s1,80(sp)          ; stack access
    0x84001182     0x10    sd s2,72(sp)          ; stack access
    0x84001184     0x12    sd s4,56(sp)          ; stack access
    0x84001186     0x14    sd s5,48(sp)          ; stack access
    0x84001188     0x16    sd s6,40(sp)          ; stack access
    0x8400118a     0x18    sd s7,32(sp)          ; stack access
    0x8400118c     0x1a    sd s8,24(sp)          ; stack access
    0x8400118e     0x1c    ld s3,1088(a7)
    0x84001192     0x20    beqz a2,ffffffff84001318 <init_sched_control+0x1a6>
    0x84001196     0x24    andi a4,a0,127
    0x8400119a     0x28    li a5,64
    0x8400119e     0x2c    ld a6,1096(a7)
    0x840011a2     0x30    add a2,a2,s3
    0x840011a4     0x32    srli t1,a0,0x3b
    0x840011a8     0x36    li s4,-32
    0x840011aa     0x38    beq a4,a5,ffffffff840011bc <init_sched_control+0x4a>
    0x840011ae     0x3c    andi s4,a0,63
    0x840011b2     0x40    addiw a5,s4,1
    0x840011b6     0x44    li s4,-1
    0x840011b8     0x46    sll s4,s4,a5
    0x840011bc     0x4a    srli a5,a1,0x10
    0x840011c0     0x4e    li t2,-1
    0x840011c2     0x50    srli a3,t2,0x19
    0x840011c6     0x54    srli a4,a5,0x26
    0x840011ca     0x58    slli t2,t2,0x27
    0x840011cc     0x5a    and a5,a5,a3
    0x840011ce     0x5c    andi a4,a4,1
    0x840011d0     0x5e    and s4,s4,a1
    0x840011d4     0x62    or t2,a5,t2
    0x840011d8     0x66    beqz a4,ffffffff840012fc <init_sched_control+0x18a>
    0x840011dc     0x6a    li t5,-1
    0x840011de     0x6c    srli a4,t5,0x19
    0x840011e2     0x70    srli a5,a0,0x26
    0x840011e6     0x74    and a4,a4,a0
    0x840011e8     0x76    slli t5,t5,0x27
    0x840011ea     0x78    andi a5,a5,1
    0x840011ec     0x7a    or t5,a4,t5
    0x840011f0     0x7e    beqz a5,ffffffff840012f8 <init_sched_control+0x186>
    0x840011f4     0x82    slli a5,a0,0x1
    0x840011f8     0x86    lui a3,0xfc000
    0x840011fc     0x8a    srli a4,a5,0x26
    0x84001200     0x8e    srli a3,a3,0x19
    0x84001202     0x90    li s2,-1
    0x84001204     0x92    and a5,a5,a3
    0x84001206     0x94    slli s2,s2,0x27
    0x84001208     0x96    andi a4,a4,1
    0x8400120a     0x98    andi s5,t5,-1024
    0x8400120e     0x9c    or s2,a5,s2
    0x84001212     0xa0    beqz a4,ffffffff840012f4 <init_sched_control+0x182>
    0x84001214     0xa2    srli a5,a1,0x9
    0x84001218     0xa6    li t0,-1
    0x8400121a     0xa8    srli a3,t0,0x19
    0x8400121e     0xac    srli a4,a5,0x26
    0x84001222     0xb0    slli t0,t0,0x27
    0x84001224     0xb2    and a5,a5,a3
    0x84001226     0xb4    andi a4,a4,1
    0x84001228     0xb6    or t0,a5,t0
    0x8400122c     0xba    beqz a4,ffffffff840012f0 <init_sched_control+0x17e>
    0x8400122e     0xbc    slli a0,a0,0x2
    0x84001230     0xbe    lui a4,0xf8000
    0x84001234     0xc2    srli a5,a0,0x26
    0x84001238     0xc6    srli a4,a4,0x19
    0x8400123a     0xc8    li s6,-1
    0x8400123c     0xca    and a0,a0,a4
    0x8400123e     0xcc    slli s6,s6,0x27
    0x84001240     0xce    andi a5,a5,1
    0x84001242     0xd0    or s6,a0,s6
    0x84001246     0xd4    beqz a5,ffffffff840012ec <init_sched_control+0x17a>
    0x84001248     0xd6    slli t3,t1,0x2
    0x8400124c     0xda    auipc s1,0xc
    0x84001250     0xde    addi s1,s1,1948 # ffffffff8400d9e8 <msgRegisters+0x2a0>
    0x84001254     0xe2    li t4,-1
    0x84001256     0xe4    mv a4,s3
    0x84001258     0xe6    li a3,0
    0x8400125a     0xe8    li s0,24
    0x8400125c     0xea    li t6,3
    0x8400125e     0xec    li s8,13
    0x84001260     0xee    li s7,1
    0x84001262     0xf0    add t3,t3,s1
    0x84001264     0xf2    slli t4,t4,0x3e
    0x84001266     0xf4    bgeu a4,a6,ffffffff840012e8 <init_sched_control+0x176>
    0x8400126a     0xf8    bltu s0,t1,ffffffff84001276 <init_sched_control+0x104>
    0x8400126e     0xfc    lw a5,0(t3)
    0x84001272    0x100    add a5,a5,s1
    0x84001274    0x102    jr a5
    0x84001276    0x104    mv a5,t0
    0x84001278    0x106    beq t1,t6,ffffffff8400128e <init_sched_control+0x11c>
    0x8400127c    0x10a    mv a5,s6
    0x8400127e    0x10c    beq t1,s8,ffffffff8400128e <init_sched_control+0x11c>
    0x84001282    0x110    li a5,0
    0x84001284    0x112    bne t1,s7,ffffffff8400128e <init_sched_control+0x11c>
    0x84001288    0x116    mv a5,t0
    0x8400128a    0x118    j ffffffff8400128e <init_sched_control+0x11c>
    0x8400128c    0x11a    li a5,0
    0x8400128e    0x11c    slli a0,a4,0x5
    0x84001292    0x120    add a5,a5,a0
    0x84001294    0x122    sd a3,8(a5)
    0x84001296    0x124    sd t4,0(a5) # fffffffff8000000 <ki_end+0x73fd9000>
    0x8400129a    0x128    sd zero,16(a5)
    0x8400129e    0x12c    sd t6,24(a5)
    0x840012a2    0x130    addi a4,a4,1
    0x840012a4    0x132    sd a4,1088(a7)
    0x840012a8    0x136    addi a3,a3,1
    0x840012aa    0x138    bne a4,a2,ffffffff84001266 <init_sched_control+0xf4>
    0x840012ae    0x13c    ld a5,1080(a7)
    0x840012b2    0x140    li a0,1
    0x840012b4    0x142    sd s3,152(a5)
    0x840012b8    0x146    sd a2,160(a5)
    0x840012ba    0x148    ld s0,88(sp)          ; stack access
    0x840012bc    0x14a    ld s1,80(sp)          ; stack access
    0x840012be    0x14c    ld s2,72(sp)          ; stack access
    0x840012c0    0x14e    ld s3,64(sp)          ; stack access
    0x840012c2    0x150    ld s4,56(sp)          ; stack access
    0x840012c4    0x152    ld s5,48(sp)          ; stack access
    0x840012c6    0x154    ld s6,40(sp)          ; stack access
    0x840012c8    0x156    ld s7,32(sp)          ; stack access
    0x840012ca    0x158    ld s8,24(sp)          ; stack access
    0x840012cc    0x15a    addi sp,sp,96
    0x840012ce    0x15c    ret
    0x840012d0    0x15e    mv a5,t5
    0x840012d2    0x160    j ffffffff8400128e <init_sched_control+0x11c>
    0x840012d4    0x162    mv a5,s5
    0x840012d6    0x164    j ffffffff8400128e <init_sched_control+0x11c>
    0x840012d8    0x166    mv a5,s2
    0x840012da    0x168    j ffffffff8400128e <init_sched_control+0x11c>
    0x840012dc    0x16a    mv a5,t2
    0x840012de    0x16c    j ffffffff8400128e <init_sched_control+0x11c>
    0x840012e0    0x16e    mv a5,a1
    0x840012e2    0x170    j ffffffff8400128e <init_sched_control+0x11c>
    0x840012e4    0x172    mv a5,s4
    0x840012e6    0x174    j ffffffff8400128e <init_sched_control+0x11c>
    0x840012e8    0x176    li a0,0
    0x840012ea    0x178    j ffffffff840012ba <init_sched_control+0x148>
    0x840012ec    0x17a    mv s6,a0
    0x840012ee    0x17c    j ffffffff84001248 <init_sched_control+0xd6>
    0x840012f0    0x17e    mv t0,a5
    0x840012f2    0x180    j ffffffff8400122e <init_sched_control+0xbc>
    0x840012f4    0x182    mv s2,a5
    0x840012f6    0x184    j ffffffff84001214 <init_sched_control+0xa2>
    0x840012f8    0x186    mv t5,a4
    0x840012fa    0x188    j ffffffff840011f4 <init_sched_control+0x82>
    0x840012fc    0x18a    li t5,-1
    0x840012fe    0x18c    srli a4,t5,0x19
    0x84001302    0x190    mv t2,a5
    0x84001304    0x192    srli a5,a0,0x26
    0x84001308    0x196    and a4,a4,a0
    0x8400130a    0x198    slli t5,t5,0x27
    0x8400130c    0x19a    andi a5,a5,1
    0x8400130e    0x19c    or t5,a4,t5
    0x84001312    0x1a0    bnez a5,ffffffff840011f4 <init_sched_control+0x82>
    0x84001316    0x1a4    j ffffffff840012f8 <init_sched_control+0x186>
    0x84001318    0x1a6    mv a2,s3
    0x8400131a    0x1a8    j ffffffff840012ae <init_sched_control+0x13c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
158 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_sched_control` has 217 nodes.

Section provide_cap (90 of 296)
===============================

Deriving specifications
-----------------------

Section `provide_cap` consists of 114 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `provide_cap`:

    0x84000da6      0x0    auipc a7,0xd
    0x84000daa      0x4    addi a7,a7,1626 # ffffffff8400e400 <ndks_boot>
    0x84000dae      0x8    ld a6,1088(a7)
    0x84000db2      0xc    ld a5,1096(a7)
    0x84000db6     0x10    addi sp,sp,-32
    0x84000db8     0x12    sd a2,0(sp)           ; stack access
    0x84000dba     0x14    sd a3,8(sp)           ; stack access
    0x84000dbc     0x16    bgeu a6,a5,ffffffff84000dde <provide_cap+0x38>
    0x84000dc0     0x1a    srli a4,a0,0x3b
    0x84000dc4     0x1e    li a5,24
    0x84000dc6     0x20    bltu a5,a4,ffffffff84000de4 <provide_cap+0x3e>
    0x84000dca     0x24    auipc a2,0xd
    0x84000dce     0x28    addi a2,a2,-1194 # ffffffff8400d920 <msgRegisters+0x1d8>
    0x84000dd2     0x2c    slli a3,a4,0x2
    0x84000dd6     0x30    add a3,a3,a2
    0x84000dd8     0x32    lw a5,0(a3)
    0x84000dda     0x34    add a5,a5,a2
    0x84000ddc     0x36    jr a5
    0x84000dde     0x38    li a0,0
    0x84000de0     0x3a    addi sp,sp,32
    0x84000de2     0x3c    ret
    0x84000de4     0x3e    li a5,3
    0x84000de6     0x40    beq a4,a5,ffffffff84000eca <provide_cap+0x124>
    0x84000dea     0x44    li a5,13
    0x84000dec     0x46    beq a4,a5,ffffffff84000eb4 <provide_cap+0x10e>
    0x84000df0     0x4a    li a3,1
    0x84000df2     0x4c    li a5,0
    0x84000df4     0x4e    bne a4,a3,ffffffff84000e0c <provide_cap+0x66>
    0x84000df8     0x52    srli a1,a1,0x9
    0x84000dfa     0x54    li a3,-1
    0x84000dfc     0x56    slli a4,a4,0x26
    0x84000dfe     0x58    srli a5,a3,0x19
    0x84000e02     0x5c    and a4,a4,a1
    0x84000e04     0x5e    and a5,a5,a1
    0x84000e06     0x60    bnez a4,ffffffff84000e40 <provide_cap+0x9a>
    0x84000e08     0x62    j ffffffff84000e0c <provide_cap+0x66>
    0x84000e0a     0x64    li a5,0
    0x84000e0c     0x66    slli a4,a6,0x5
    0x84000e10     0x6a    add a5,a5,a4
    0x84000e12     0x6c    ld a4,0(sp)           ; stack access
    0x84000e14     0x6e    sd zero,16(a5) # fffffffffe000010 <ki_end+0x79fd9010>
    0x84000e18     0x72    addi a6,a6,1
    0x84000e1a     0x74    sd a4,0(a5)
    0x84000e1c     0x76    ld a4,8(sp)           ; stack access
    0x84000e1e     0x78    li a0,1
    0x84000e20     0x7a    sd a4,8(a5)
    0x84000e22     0x7c    li a4,3
    0x84000e24     0x7e    sd a4,24(a5)
    0x84000e26     0x80    sd a6,1088(a7)
    0x84000e2a     0x84    addi sp,sp,32
    0x84000e2c     0x86    ret
    0x84000e2e     0x88    li a3,-1
    0x84000e30     0x8a    srli a2,a0,0x26
    0x84000e34     0x8e    srli a4,a3,0x19
    0x84000e38     0x92    andi a2,a2,1
    0x84000e3a     0x94    and a5,a0,a4
    0x84000e3e     0x98    beqz a2,ffffffff84000e0c <provide_cap+0x66>
    0x84000e40     0x9a    slli a3,a3,0x27
    0x84000e42     0x9c    or a5,a5,a3
    0x84000e44     0x9e    j ffffffff84000e0c <provide_cap+0x66>
    0x84000e46     0xa0    srli a1,a1,0x10
    0x84000e48     0xa2    li a4,-1
    0x84000e4a     0xa4    srli a3,a1,0x26
    0x84000e4e     0xa8    srli a5,a4,0x19
    0x84000e52     0xac    andi a3,a3,1
    0x84000e54     0xae    and a5,a5,a1
    0x84000e56     0xb0    beqz a3,ffffffff84000e0c <provide_cap+0x66>
    0x84000e58     0xb2    slli a4,a4,0x27
    0x84000e5a     0xb4    or a5,a5,a4
    0x84000e5c     0xb6    j ffffffff84000e0c <provide_cap+0x66>
    0x84000e5e     0xb8    andi a5,a0,127
    0x84000e62     0xbc    li a4,64
    0x84000e66     0xc0    beq a5,a4,ffffffff84000ece <provide_cap+0x128>
    0x84000e6a     0xc4    andi a5,a0,63
    0x84000e6e     0xc8    addiw a0,a5,1
    0x84000e72     0xcc    li a5,-1
    0x84000e74     0xce    sll a5,a5,a0
    0x84000e78     0xd2    and a5,a5,a1
    0x84000e7a     0xd4    j ffffffff84000e0c <provide_cap+0x66>
    0x84000e7c     0xd6    mv a5,a1
    0x84000e7e     0xd8    j ffffffff84000e0c <provide_cap+0x66>
    0x84000e80     0xda    slli a5,a0,0x1
    0x84000e84     0xde    srli a4,a5,0x26
    0x84000e88     0xe2    lui a3,0xfc000
    0x84000e8c     0xe6    srli a3,a3,0x19
    0x84000e8e     0xe8    andi a4,a4,1
    0x84000e90     0xea    and a5,a5,a3
    0x84000e92     0xec    beqz a4,ffffffff84000e0c <provide_cap+0x66>
    0x84000e94     0xee    li a4,-1
    0x84000e96     0xf0    j ffffffff84000e58 <provide_cap+0xb2>
    0x84000e98     0xf2    li a3,-1
    0x84000e9a     0xf4    srli a2,a0,0x26
    0x84000e9e     0xf8    srli a4,a3,0x19
    0x84000ea2     0xfc    andi a2,a2,1
    0x84000ea4     0xfe    and a5,a0,a4
    0x84000ea8    0x102    beqz a2,ffffffff84000eae <provide_cap+0x108>
    0x84000eaa    0x104    slli a3,a3,0x27
    0x84000eac    0x106    or a5,a5,a3
    0x84000eae    0x108    andi a5,a5,-1024
    0x84000eb2    0x10c    j ffffffff84000e0c <provide_cap+0x66>
    0x84000eb4    0x10e    slli a0,a0,0x2
    0x84000eb6    0x110    srli a4,a0,0x26
    0x84000eba    0x114    lui a5,0xf8000
    0x84000ebe    0x118    srli a5,a5,0x19
    0x84000ec0    0x11a    andi a4,a4,1
    0x84000ec2    0x11c    and a5,a5,a0
    0x84000ec4    0x11e    beqz a4,ffffffff84000e0c <provide_cap+0x66>
    0x84000ec6    0x120    li a4,-1
    0x84000ec8    0x122    j ffffffff84000e58 <provide_cap+0xb2>
    0x84000eca    0x124    srli a1,a1,0x9
    0x84000ecc    0x126    j ffffffff84000e48 <provide_cap+0xa2>
    0x84000ece    0x128    li a5,-32
    0x84000ed0    0x12a    and a5,a5,a1
    0x84000ed2    0x12c    j ffffffff84000e0c <provide_cap+0x66>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
114 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 153 nodes.

Section create_domain_cap (91 of 296)
=====================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 99 instructions.

RVC_TFFTFFFFFFFFFFTFdfn'EBREAK (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 9002 ebreak


Stack analysis
---------------

No stack accesses found. Code for `create_domain_cap`:

    0x84000bb8      0x0    srli a5,a0,0x3b
    0x84000bbc      0x4    li a4,24
    0x84000bbe      0x6    addi sp,sp,-16
    0x84000bc0      0x8    bltu a4,a5,ffffffff84000c06 <create_domain_cap+0x4e>
    0x84000bc4      0xc    auipc a2,0xd
    0x84000bc8     0x10    addi a2,a2,-776 # ffffffff8400d8bc <msgRegisters+0x174>
    0x84000bcc     0x14    slli a3,a5,0x2
    0x84000bd0     0x18    add a3,a3,a2
    0x84000bd2     0x1a    lw a4,0(a3)
    0x84000bd4     0x1c    add a4,a4,a2
    0x84000bd6     0x1e    jr a4
    0x84000bd8     0x20    srli a3,a0,0x26
    0x84000bdc     0x24    li a4,-1
    0x84000bde     0x26    srli a5,a4,0x19
    0x84000be2     0x2a    andi a3,a3,1
    0x84000be4     0x2c    and a0,a0,a5
    0x84000be6     0x2e    beqz a3,ffffffff84000bec <create_domain_cap+0x34>
    0x84000be8     0x30    slli a4,a4,0x27
    0x84000bea     0x32    or a0,a0,a4
    0x84000bec     0x34    li a5,-3
    0x84000bee     0x36    slli a5,a5,0x3d
    0x84000bf0     0x38    sd a5,352(a0)
    0x84000bf4     0x3c    li a5,3
    0x84000bf6     0x3e    sd zero,360(a0)
    0x84000bfa     0x42    sd zero,368(a0)
    0x84000bfe     0x46    sd a5,376(a0)
    0x84000c02     0x4a    addi sp,sp,16
    0x84000c04     0x4c    ret
    0x84000c06     0x4e    li a4,3
    0x84000c08     0x50    beq a5,a4,ffffffff84000cae <create_domain_cap+0xf6>
    0x84000c0c     0x54    li a4,13
    0x84000c0e     0x56    beq a5,a4,ffffffff84000c96 <create_domain_cap+0xde>
    0x84000c12     0x5a    li a4,1
    0x84000c14     0x5c    li a0,0
    0x84000c16     0x5e    bne a5,a4,ffffffff84000bec <create_domain_cap+0x34>
    0x84000c1a     0x62    srli a1,a1,0x9
    0x84000c1c     0x64    li a4,-1
    0x84000c1e     0x66    slli a5,a5,0x26
    0x84000c20     0x68    srli a0,a4,0x19
    0x84000c24     0x6c    and a5,a5,a1
    0x84000c26     0x6e    and a0,a0,a1
    0x84000c28     0x70    bnez a5,ffffffff84000be8 <create_domain_cap+0x30>
    0x84000c2a     0x72    j ffffffff84000bec <create_domain_cap+0x34>
    0x84000c2c     0x74    srli a1,a1,0x10
    0x84000c2e     0x76    li a5,-1
    0x84000c30     0x78    srli a4,a1,0x26
    0x84000c34     0x7c    srli a0,a5,0x19
    0x84000c38     0x80    andi a4,a4,1
    0x84000c3a     0x82    and a0,a0,a1
    0x84000c3c     0x84    beqz a4,ffffffff84000bec <create_domain_cap+0x34>
    0x84000c3e     0x86    slli a5,a5,0x27
    0x84000c40     0x88    or a0,a0,a5
    0x84000c42     0x8a    j ffffffff84000bec <create_domain_cap+0x34>
    0x84000c44     0x8c    andi a5,a0,127
    0x84000c48     0x90    li a4,64
    0x84000c4c     0x94    beq a5,a4,ffffffff84000cb2 <create_domain_cap+0xfa>
    0x84000c50     0x98    andi a0,a0,63
    0x84000c54     0x9c    addiw a0,a0,1
    0x84000c56     0x9e    li a5,-1
    0x84000c58     0xa0    sll a5,a5,a0
    0x84000c5c     0xa4    and a0,a1,a5
    0x84000c60     0xa8    j ffffffff84000bec <create_domain_cap+0x34>
    0x84000c62     0xaa    mv a0,a1
    0x84000c64     0xac    j ffffffff84000bec <create_domain_cap+0x34>
    0x84000c66     0xae    slli a0,a0,0x1
    0x84000c68     0xb0    srli a5,a0,0x26
    0x84000c6c     0xb4    lui a4,0xfc000
    0x84000c70     0xb8    srli a4,a4,0x19
    0x84000c72     0xba    andi a5,a5,1
    0x84000c74     0xbc    and a0,a0,a4
    0x84000c76     0xbe    beqz a5,ffffffff84000bec <create_domain_cap+0x34>
    0x84000c78     0xc0    li a5,-1
    0x84000c7a     0xc2    j ffffffff84000c3e <create_domain_cap+0x86>
    0x84000c7c     0xc4    srli a3,a0,0x26
    0x84000c80     0xc8    li a4,-1
    0x84000c82     0xca    srli a5,a4,0x19
    0x84000c86     0xce    andi a3,a3,1
    0x84000c88     0xd0    and a0,a0,a5
    0x84000c8a     0xd2    beqz a3,ffffffff84000c90 <create_domain_cap+0xd8>
    0x84000c8c     0xd4    slli a4,a4,0x27
    0x84000c8e     0xd6    or a0,a0,a4
    0x84000c90     0xd8    andi a0,a0,-1024
    0x84000c94     0xdc    j ffffffff84000bec <create_domain_cap+0x34>
    0x84000c96     0xde    slli a5,a0,0x2
    0x84000c9a     0xe2    srli a4,a5,0x26
    0x84000c9e     0xe6    lui a0,0xf8000
    0x84000ca2     0xea    srli a0,a0,0x19
    0x84000ca4     0xec    andi a4,a4,1
    0x84000ca6     0xee    and a0,a0,a5
    0x84000ca8     0xf0    beqz a4,ffffffff84000bec <create_domain_cap+0x34>
    0x84000caa     0xf2    li a5,-1
    0x84000cac     0xf4    j ffffffff84000c3e <create_domain_cap+0x86>
    0x84000cae     0xf6    srli a1,a1,0x9
    0x84000cb0     0xf8    j ffffffff84000c2e <create_domain_cap+0x76>
    0x84000cb2     0xfa    li a5,-32
    0x84000cb4     0xfc    and a0,a1,a5
    0x84000cb8    0x100    j ffffffff84000bec <create_domain_cap+0x34>
    0x84000cba    0x102    sd zero,352(zero) # 160 <KERNEL_OFFSET-0xfffffffefffffea0>
    0x84000cbe    0x106    ebreak

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
99 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 130 nodes.

Section create_root_cnode (92 of 296)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_root_cnode`:

    0x84000b7c     0x0    auipc a5,0xe
    0x84000b80     0x4    addi a5,a5,-1916 # ffffffff8400e400 <ndks_boot>
    0x84000b84     0x8    ld a4,1104(a5)
    0x84000b88     0xc    lui a3,0x80
    0x84000b8c    0x10    sd a3,1096(a5)
    0x84000b90    0x14    slli a0,a4,0x19
    0x84000b94    0x18    lui a5,0xab53
    0x84000b98    0x1c    slli a5,a5,0x23
    0x84000b9a    0x1e    srli a0,a0,0x1a
    0x84000b9c    0x20    or a0,a0,a5
    0x84000b9e    0x22    sd a0,64(a4)
    0x84000ba0    0x24    sd zero,72(a4)
    0x84000ba4    0x28    sd zero,80(a4)
    0x84000ba8    0x2c    addi a5,a4,64
    0x84000bac    0x30    li a4,3
    0x84000bae    0x32    addi sp,sp,-16
    0x84000bb0    0x34    sd a4,24(a5)
    0x84000bb2    0x36    li a1,0
    0x84000bb4    0x38    addi sp,sp,16
    0x84000bb6    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (93 of 296)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x84000b6a     0x0    li a5,3
    0x84000b6c     0x2    addi sp,sp,-16
    0x84000b6e     0x4    sd a1,0(a0)
    0x84000b70     0x6    sd a2,8(a0)
    0x84000b72     0x8    sd zero,16(a0)
    0x84000b76     0xc    sd a5,24(a0)
    0x84000b78     0xe    addi sp,sp,16
    0x84000b7a    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section create_rootserver_objects (94 of 296)
=============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 150 instructions.

RVC_TFFFT____FFT__TF.
RVC_FTTFFT___FFFT_FT.

Stack analysis
---------------

4 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x840009b8      0x0    addi sp,sp,-16
    0x840009ba      0x2    sd a1,0(sp)           ; stack access
    0x840009bc      0x4    sd a2,8(sp)           ; stack access
    0x840009be      0x6    li a5,24
    0x840009c0      0x8    li a7,24
    0x840009c2      0xa    bltu a3,a5,ffffffff840009c8 <create_rootserver_objects+0x10>
    0x840009c6      0xe    mv a7,a3
    0x840009c8     0x10    ld a4,0(sp)           ; stack access
    0x840009ca     0x12    ld a5,8(sp)           ; stack access
    0x840009cc     0x14    li t1,0
    0x840009ce     0x16    beqz a3,ffffffff840009d6 <create_rootserver_objects+0x1e>
    0x840009d0     0x18    li t1,1
    0x840009d2     0x1a    sll t1,t1,a3
    0x840009d6     0x1e    addi a5,a5,-1
    0x840009d8     0x20    srli a2,a5,0x1e
    0x840009dc     0x24    srli a5,a5,0x15
    0x840009de     0x26    lui a6,0xffe00
    0x840009e2     0x2a    addi a2,a2,1
    0x840009e4     0x2c    addi a5,a5,1
    0x840009e6     0x2e    lui a1,0xc0000
    0x840009ea     0x32    and a1,a1,a4
    0x840009ec     0x34    slli a2,a2,0x1e
    0x840009ee     0x36    and a4,a4,a6
    0x840009f2     0x3a    slli a5,a5,0x15
    0x840009f4     0x3c    sub a5,a5,a4
    0x840009f6     0x3e    sub a2,a2,a1
    0x840009f8     0x40    srli a5,a5,0x15
    0x840009fa     0x42    srli a2,a2,0x1e
    0x840009fc     0x44    add a2,a2,a5
    0x840009fe     0x46    slli a2,a2,0xc
    0x84000a00     0x48    lui a4,0x1004
    0x84000a04     0x4c    add a5,a0,a2
    0x84000a08     0x50    addi a4,a4,1280 # 1004500 <KERNEL_OFFSET-0xfffffffefeffbb00>
    0x84000a0c     0x54    add a5,a5,a4
    0x84000a0e     0x56    add a5,a5,t1
    0x84000a10     0x58    auipc a6,0xe
    0x84000a14     0x5c    addi a6,a6,-1552 # ffffffff8400e400 <ndks_boot>
    0x84000a18     0x60    sd a5,1192(a6)
    0x84000a1c     0x64    mv a5,a0
    0x84000a1e     0x66    bltu a3,a7,ffffffff84000a46 <create_rootserver_objects+0x8e>
    0x84000a22     0x6a    ld a4,1144(a6)
    0x84000a26     0x6e    bnez a4,ffffffff84000a46 <create_rootserver_objects+0x8e>
    0x84000a28     0x70    li a1,1
    0x84000a2a     0x72    sll a1,a1,a3
    0x84000a2e     0x76    add a4,a0,a1
    0x84000a32     0x7a    beqz a1,ffffffff84000a3e <create_rootserver_objects+0x86>
    0x84000a34     0x7c    sd zero,0(a5)
    0x84000a38     0x80    addi a5,a5,8
    0x84000a3a     0x82    bne a5,a4,ffffffff84000a34 <create_rootserver_objects+0x7c>
    0x84000a3e     0x86    sd a0,1144(a6)
    0x84000a42     0x8a    mv a5,a4
    0x84000a44     0x8c    mv a0,a4
    0x84000a46     0x8e    lui a4,0x1000
    0x84000a4a     0x92    add a7,a0,a4
    0x84000a4e     0x96    add a4,a4,a5
    0x84000a50     0x98    sd zero,0(a5)
    0x84000a54     0x9c    addi a5,a5,8
    0x84000a56     0x9e    bne a5,a4,ffffffff84000a50 <create_rootserver_objects+0x98>
    0x84000a5a     0xa2    sd a0,1104(a6)
    0x84000a5e     0xa6    li a4,11
    0x84000a60     0xa8    mv a5,a7
    0x84000a62     0xaa    bgeu a4,a3,ffffffff84000a92 <create_rootserver_objects+0xda>
    0x84000a66     0xae    ld a4,1144(a6)
    0x84000a6a     0xb2    bnez a4,ffffffff84000a92 <create_rootserver_objects+0xda>
    0x84000a6c     0xb4    li a1,1
    0x84000a6e     0xb6    sll a1,a1,a3
    0x84000a72     0xba    lui a4,0x1000
    0x84000a76     0xbe    add a4,a4,a1
    0x84000a78     0xc0    add t1,a7,a1
    0x84000a7c     0xc4    add a0,a0,a4
    0x84000a7e     0xc6    beqz a1,ffffffff84000a8a <create_rootserver_objects+0xd2>
    0x84000a80     0xc8    sd zero,0(a5)
    0x84000a84     0xcc    addi a5,a5,8
    0x84000a86     0xce    bne a5,a0,ffffffff84000a80 <create_rootserver_objects+0xc8>
    0x84000a8a     0xd2    sd a7,1144(a6)
    0x84000a8e     0xd6    mv a5,t1
    0x84000a90     0xd8    mv a7,t1
    0x84000a92     0xda    lui a1,0x1
    0x84000a94     0xdc    add a0,a7,a1
    0x84000a98     0xe0    add a1,a1,a5
    0x84000a9a     0xe2    sd zero,0(a5)
    0x84000a9e     0xe6    addi a5,a5,8
    0x84000aa0     0xe8    bne a1,a5,ffffffff84000a9a <create_rootserver_objects+0xe2>
    0x84000aa4     0xec    sd a7,1112(a6)
    0x84000aa8     0xf0    li a4,11
    0x84000aaa     0xf2    mv a5,a0
    0x84000aac     0xf4    bgeu a4,a3,ffffffff84000ada <create_rootserver_objects+0x122>
    0x84000ab0     0xf8    ld a4,1144(a6)
    0x84000ab4     0xfc    bnez a4,ffffffff84000ada <create_rootserver_objects+0x122>
    0x84000ab6     0xfe    li a4,1
    0x84000ab8    0x100    sll a3,a4,a3
    0x84000abc    0x104    lui a4,0x1
    0x84000abe    0x106    add a4,a4,a3
    0x84000ac0    0x108    add a1,a0,a3
    0x84000ac4    0x10c    add a7,a7,a4
    0x84000ac6    0x10e    beqz a3,ffffffff84000ad2 <create_rootserver_objects+0x11a>
    0x84000ac8    0x110    sd zero,0(a5)
    0x84000acc    0x114    addi a5,a5,8
    0x84000ace    0x116    bne a5,a7,ffffffff84000ac8 <create_rootserver_objects+0x110>
    0x84000ad2    0x11a    sd a0,1144(a6)
    0x84000ad6    0x11e    mv a5,a1
    0x84000ad8    0x120    mv a0,a1
    0x84000ada    0x122    lui a3,0x1
    0x84000adc    0x124    add a7,a0,a3
    0x84000ae0    0x128    add a3,a3,a5
    0x84000ae2    0x12a    sd zero,0(a5)
    0x84000ae6    0x12e    addi a5,a5,8
    0x84000ae8    0x130    bne a5,a3,ffffffff84000ae2 <create_rootserver_objects+0x12a>
    0x84000aec    0x134    lui a1,0x2
    0x84000aee    0x136    add a1,a1,a0
    0x84000af0    0x138    sd a0,1120(a6)
    0x84000af4    0x13c    mv a5,a7
    0x84000af6    0x13e    mv a4,a1
    0x84000af8    0x140    sd zero,0(a5)
    0x84000afc    0x144    addi a5,a5,8
    0x84000afe    0x146    bne a5,a1,ffffffff84000af8 <create_rootserver_objects+0x140>
    0x84000b02    0x14a    lui a3,0x3
    0x84000b04    0x14c    add a3,a3,a0
    0x84000b06    0x14e    sd a7,1128(a6)
    0x84000b0a    0x152    mv a5,a3
    0x84000b0c    0x154    sd zero,0(a4) # 1000 <KERNEL_OFFSET-0xfffffffefffff000>
    0x84000b10    0x158    addi a4,a4,8
    0x84000b12    0x15a    bne a4,a3,ffffffff84000b0c <create_rootserver_objects+0x154>
    0x84000b16    0x15e    lui a4,0x3
    0x84000b18    0x160    add a4,a4,a2
    0x84000b1a    0x162    sd a1,1136(a6)
    0x84000b1e    0x166    add a7,a2,a3
    0x84000b22    0x16a    add a4,a4,a0
    0x84000b24    0x16c    beqz a2,ffffffff84000b30 <create_rootserver_objects+0x178>
    0x84000b26    0x16e    sd zero,0(a5)
    0x84000b2a    0x172    addi a5,a5,8
    0x84000b2c    0x174    bne a5,a4,ffffffff84000b26 <create_rootserver_objects+0x16e>
    0x84000b30    0x178    add a2,a2,a3
    0x84000b32    0x17a    addi a1,a7,1024
    0x84000b36    0x17e    sd a3,1168(a6)
    0x84000b3a    0x182    sd a2,1176(a6)
    0x84000b3e    0x186    mv a4,a7
    0x84000b40    0x188    mv a5,a1
    0x84000b42    0x18a    sd zero,0(a4) # 3000 <KERNEL_OFFSET-0xfffffffeffffd000>
    0x84000b46    0x18e    addi a4,a4,8
    0x84000b48    0x190    bne a4,a1,ffffffff84000b42 <create_rootserver_objects+0x18a>
    0x84000b4c    0x194    addi a4,a7,1280
    0x84000b50    0x198    sd a7,1152(a6)
    0x84000b54    0x19c    sd a4,1184(a6)
    0x84000b58    0x1a0    sd zero,0(a5)
    0x84000b5c    0x1a4    addi a5,a5,8
    0x84000b5e    0x1a6    bne a5,a4,ffffffff84000b58 <create_rootserver_objects+0x1a0>
    0x84000b62    0x1aa    sd a1,1160(a6)
    0x84000b66    0x1ae    addi sp,sp,16
    0x84000b68    0x1b0    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
150 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 229 nodes.

Section initIRQController (95 of 296)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 27 instructions.

SW..

Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x840006b6     0x0    li a4,1
    0x840006b8     0x2    lui a0,0xc0001
    0x840006bc     0x6    lui a6,0xc0202
    0x840006c0     0xa    li a1,54
    0x840006c4     0xe    srli a5,a4,0x5
    0x840006c8    0x12    slli a5,a5,0x2
    0x840006ca    0x14    add a5,a5,a0
    0x840006cc    0x16    lw a5,0(a5)
    0x840006ce    0x18    andi a3,a4,31
    0x840006d2    0x1c    sext.w a2,a4
    0x840006d6    0x20    slli a5,a5,0x20
    0x840006d8    0x22    srli a5,a5,0x20
    0x840006da    0x24    srl a5,a5,a3
    0x840006de    0x28    andi a5,a5,1
    0x840006e0    0x2a    addi a4,a4,1
    0x840006e2    0x2c    beqz a5,ffffffff840006ec <initIRQController+0x36>
    0x840006e4    0x2e    lw a5,4(a6) # ffffffffc0202004 <ki_end+0x3c1db004>
    0x840006e8    0x32    sw a2,4(a6)
    0x840006ec    0x36    bne a4,a1,ffffffff840006c4 <initIRQController+0xe>
    0x840006f0    0x3a    lui a4,0xc0000
    0x840006f4    0x3e    addi a5,a4,4 # ffffffffc0000004 <ki_end+0x3bfd9004>
    0x840006f8    0x42    li a3,2
    0x840006fa    0x44    addi a4,a4,220
    0x840006fe    0x48    sw a3,0(a5)
    0x84000700    0x4a    addi a5,a5,4
    0x84000702    0x4c    bne a5,a4,ffffffff840006fe <initIRQController+0x48>
    0x84000706    0x50    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 38 nodes.

Section initLocalIRQController (96 of 296)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 22 instructions.

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x84000672     0x0    lui a1,0xc0002
    0x84000676     0x4    li a3,1
    0x84000678     0x6    addi a1,a1,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x8400067c     0xa    li a6,1
    0x8400067e     0xc    li a0,54
    0x84000682    0x10    srli a4,a3,0x5
    0x84000686    0x14    slli a4,a4,0x2
    0x84000688    0x16    add a4,a4,a1
    0x8400068a    0x18    lw a2,0(a4)
    0x8400068c    0x1a    andi a5,a3,31
    0x84000690    0x1e    sll a5,a6,a5
    0x84000694    0x22    not a5,a5
    0x84000698    0x26    and a5,a5,a2
    0x8400069a    0x28    sext.w a5,a5
    0x8400069c    0x2a    sw a5,0(a4)
    0x8400069e    0x2c    addi a3,a3,1
    0x840006a0    0x2e    bne a3,a0,ffffffff84000682 <initLocalIRQController+0x10>
    0x840006a4    0x32    lui a5,0xc0202
    0x840006a8    0x36    sw zero,0(a5) # ffffffffc0202000 <ki_end+0x3c1db000>
    0x840006ac    0x3a    li a5,544
    0x840006b0    0x3e    csrrs a5,sie,a5
    0x840006b4    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 29 nodes.

Section initL2Cache (97 of 296)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x84000670    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section get_avail_p_regs (98 of 296)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x84000666    0x0    auipc a0,0x2
    0x8400066a    0x4    addi a0,a0,-1110 # ffffffff84002210 <avail_p_regs>
    0x8400066e    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (99 of 296)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x84000662    0x0    li a0,1
    0x84000664    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section write_it_asid_pool (100 of 296)
=======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 218 instructions.

RVC_FTT_FFT_______TF.

Stack analysis
---------------

6 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x84000172      0x0    addi sp,sp,-32
    0x84000174      0x2    sd a2,0(sp)           ; stack access
    0x84000176      0x4    sd a3,8(sp)           ; stack access
    0x84000178      0x6    srli a5,a0,0x3b
    0x8400017c      0xa    li a4,24
    0x8400017e      0xc    bltu a4,a5,ffffffff8400023e <write_it_asid_pool+0xcc>
    0x84000182     0x10    auipc a2,0xd
    0x84000186     0x14    addi a2,a2,1586 # ffffffff8400d7b4 <msgRegisters+0x6c>
    0x8400018a     0x18    slli a3,a5,0x2
    0x8400018e     0x1c    add a3,a3,a2
    0x84000190     0x1e    lw a4,0(a3)
    0x84000192     0x20    add a4,a4,a2
    0x84000194     0x22    jr a4
    0x84000196     0x24    li a0,0
    0x84000198     0x26    ld t1,0(sp)           ; stack access
    0x8400019a     0x28    li a2,24
    0x8400019c     0x2a    ld a7,8(sp)           ; stack access
    0x8400019e     0x2c    srli a3,t1,0x3b
    0x840001a2     0x30    bltu a2,a3,ffffffff840001ec <write_it_asid_pool+0x7a>
    0x840001a6     0x34    auipc a6,0xd
    0x840001aa     0x38    addi a6,a6,1650 # ffffffff8400d818 <msgRegisters+0xd0>
    0x840001ae     0x3c    slli a1,a3,0x2
    0x840001b2     0x40    add a1,a1,a6
    0x840001b4     0x42    lw a2,0(a1)
    0x840001b6     0x44    add a2,a2,a6
    0x840001b8     0x46    jr a2
    0x840001ba     0x48    li a5,0
    0x840001bc     0x4a    sd a5,8(a0)
    0x840001be     0x4c    auipc a5,0xf
    0x840001c2     0x50    sd a0,-446(a5) # ffffffff8400f000 <riscvKSASIDTable>
    0x840001c6     0x54    addi sp,sp,32
    0x840001c8     0x56    ret
    0x840001ca     0x58    srli a3,a0,0x26
    0x840001ce     0x5c    li a4,-1
    0x840001d0     0x5e    srli a5,a4,0x19
    0x840001d4     0x62    andi a3,a3,1
    0x840001d6     0x64    and a0,a0,a5
    0x840001d8     0x66    beqz a3,ffffffff84000198 <write_it_asid_pool+0x26>
    0x840001da     0x68    ld t1,0(sp)           ; stack access
    0x840001dc     0x6a    slli a4,a4,0x27
    0x840001de     0x6c    li a2,24
    0x840001e0     0x6e    srli a3,t1,0x3b
    0x840001e4     0x72    ld a7,8(sp)           ; stack access
    0x840001e6     0x74    or a0,a0,a4
    0x840001e8     0x76    bgeu a2,a3,ffffffff840001a6 <write_it_asid_pool+0x34>
    0x840001ec     0x7a    li a5,3
    0x840001ee     0x7c    beq a3,a5,ffffffff840003a0 <write_it_asid_pool+0x22e>
    0x840001f2     0x80    li a5,13
    0x840001f4     0x82    beq a3,a5,ffffffff8400038a <write_it_asid_pool+0x218>
    0x840001f8     0x86    li a4,1
    0x840001fa     0x88    li a5,0
    0x840001fc     0x8a    bne a3,a4,ffffffff840001bc <write_it_asid_pool+0x4a>
    0x84000200     0x8e    srli a7,a7,0x9
    0x84000204     0x92    li a4,-1
    0x84000206     0x94    slli a3,a3,0x26
    0x84000208     0x96    srli a5,a4,0x19
    0x8400020c     0x9a    and a3,a7,a3
    0x84000210     0x9e    and a5,a7,a5
    0x84000214     0xa2    bnez a3,ffffffff8400033c <write_it_asid_pool+0x1ca>
    0x84000218     0xa6    j ffffffff840001bc <write_it_asid_pool+0x4a>
    0x8400021a     0xa8    li a3,-1
    0x8400021c     0xaa    srli a2,t1,0x26
    0x84000220     0xae    srli a4,a3,0x19
    0x84000224     0xb2    andi a2,a2,1
    0x84000226     0xb4    and a5,t1,a4
    0x8400022a     0xb8    beqz a2,ffffffff840001bc <write_it_asid_pool+0x4a>
    0x8400022c     0xba    slli a3,a3,0x27
    0x8400022e     0xbc    or a5,a5,a3
    0x84000230     0xbe    sd a5,8(a0)
    0x84000232     0xc0    auipc a5,0xf
    0x84000236     0xc4    sd a0,-562(a5) # ffffffff8400f000 <riscvKSASIDTable>
    0x8400023a     0xc8    addi sp,sp,32
    0x8400023c     0xca    ret
    0x8400023e     0xcc    li a4,3
    0x84000240     0xce    beq a5,a4,ffffffff840003be <write_it_asid_pool+0x24c>
    0x84000244     0xd2    li a4,13
    0x84000246     0xd4    beq a5,a4,ffffffff840003a6 <write_it_asid_pool+0x234>
    0x8400024a     0xd8    li a4,1
    0x8400024c     0xda    li a0,0
    0x8400024e     0xdc    bne a5,a4,ffffffff84000198 <write_it_asid_pool+0x26>
    0x84000252     0xe0    srli a1,a1,0x9
    0x84000254     0xe2    li a4,-1
    0x84000256     0xe4    slli a5,a5,0x26
    0x84000258     0xe6    srli a0,a4,0x19
    0x8400025c     0xea    and a5,a5,a1
    0x8400025e     0xec    and a0,a0,a1
    0x84000260     0xee    bnez a5,ffffffff840001da <write_it_asid_pool+0x68>
    0x84000262     0xf0    j ffffffff84000198 <write_it_asid_pool+0x26>
    0x84000264     0xf2    srli a1,a1,0x10
    0x84000266     0xf4    li a5,-1
    0x84000268     0xf6    srli a4,a1,0x26
    0x8400026c     0xfa    srli a0,a5,0x19
    0x84000270     0xfe    andi a4,a4,1
    0x84000272    0x100    and a0,a0,a1
    0x84000274    0x102    beqz a4,ffffffff84000198 <write_it_asid_pool+0x26>
    0x84000276    0x104    slli a5,a5,0x27
    0x84000278    0x106    or a0,a0,a5
    0x8400027a    0x108    j ffffffff84000198 <write_it_asid_pool+0x26>
    0x8400027c    0x10a    andi a5,t1,127
    0x84000280    0x10e    li a4,64
    0x84000284    0x112    beq a5,a4,ffffffff840003c8 <write_it_asid_pool+0x256>
    0x84000288    0x116    andi a5,t1,63
    0x8400028c    0x11a    addiw a4,a5,1
    0x84000290    0x11e    li a5,-1
    0x84000292    0x120    sll a5,a5,a4
    0x84000296    0x124    and a5,a5,a7
    0x8400029a    0x128    sd a5,8(a0)
    0x8400029c    0x12a    auipc a5,0xf
    0x840002a0    0x12e    sd a0,-668(a5) # ffffffff8400f000 <riscvKSASIDTable>
    0x840002a4    0x132    addi sp,sp,32
    0x840002a6    0x134    ret
    0x840002a8    0x136    li a3,-1
    0x840002aa    0x138    srli a2,t1,0x26
    0x840002ae    0x13c    srli a4,a3,0x19
    0x840002b2    0x140    andi a2,a2,1
    0x840002b4    0x142    and a5,t1,a4
    0x840002b8    0x146    beqz a2,ffffffff840002be <write_it_asid_pool+0x14c>
    0x840002ba    0x148    slli a3,a3,0x27
    0x840002bc    0x14a    or a5,a5,a3
    0x840002be    0x14c    andi a5,a5,-1024
    0x840002c2    0x150    sd a5,8(a0)
    0x840002c4    0x152    auipc a5,0xf
    0x840002c8    0x156    sd a0,-708(a5) # ffffffff8400f000 <riscvKSASIDTable>
    0x840002cc    0x15a    addi sp,sp,32
    0x840002ce    0x15c    ret
    0x840002d0    0x15e    andi a5,a0,127
    0x840002d4    0x162    li a4,64
    0x840002d8    0x166    beq a5,a4,ffffffff840003c2 <write_it_asid_pool+0x250>
    0x840002dc    0x16a    andi a0,a0,63
    0x840002e0    0x16e    addiw a5,a0,1
    0x840002e4    0x172    li a0,-1
    0x840002e6    0x174    sll a0,a0,a5
    0x840002ea    0x178    and a0,a0,a1
    0x840002ec    0x17a    j ffffffff84000198 <write_it_asid_pool+0x26>
    0x840002ee    0x17c    slli a0,a0,0x1
    0x840002f0    0x17e    srli a5,a0,0x26
    0x840002f4    0x182    lui a4,0xfc000
    0x840002f8    0x186    srli a4,a4,0x19
    0x840002fa    0x188    andi a5,a5,1
    0x840002fc    0x18a    and a0,a0,a4
    0x840002fe    0x18c    beqz a5,ffffffff84000198 <write_it_asid_pool+0x26>
    0x84000302    0x190    li a5,-1
    0x84000304    0x192    j ffffffff84000276 <write_it_asid_pool+0x104>
    0x84000306    0x194    srli a3,a0,0x26
    0x8400030a    0x198    li a4,-1
    0x8400030c    0x19a    srli a5,a4,0x19
    0x84000310    0x19e    andi a3,a3,1
    0x84000312    0x1a0    and a0,a0,a5
    0x84000314    0x1a2    beqz a3,ffffffff8400031a <write_it_asid_pool+0x1a8>
    0x84000316    0x1a4    slli a4,a4,0x27
    0x84000318    0x1a6    or a0,a0,a4
    0x8400031a    0x1a8    andi a0,a0,-1024
    0x8400031e    0x1ac    j ffffffff84000198 <write_it_asid_pool+0x26>
    0x84000320    0x1ae    mv a0,a1
    0x84000322    0x1b0    j ffffffff84000198 <write_it_asid_pool+0x26>
    0x84000324    0x1b2    slli a5,t1,0x1
    0x84000328    0x1b6    srli a4,a5,0x26
    0x8400032c    0x1ba    lui a3,0xfc000
    0x84000330    0x1be    srli a3,a3,0x19
    0x84000332    0x1c0    andi a4,a4,1
    0x84000334    0x1c2    and a5,a5,a3
    0x84000336    0x1c4    beqz a4,ffffffff840001bc <write_it_asid_pool+0x4a>
    0x8400033a    0x1c8    li a4,-1
    0x8400033c    0x1ca    slli a4,a4,0x27
    0x8400033e    0x1cc    or a5,a5,a4
    0x84000340    0x1ce    sd a5,8(a0)
    0x84000342    0x1d0    auipc a5,0xf
    0x84000346    0x1d4    sd a0,-834(a5) # ffffffff8400f000 <riscvKSASIDTable>
    0x8400034a    0x1d8    addi sp,sp,32
    0x8400034c    0x1da    ret
    0x8400034e    0x1dc    mv a5,a7
    0x84000350    0x1de    sd a5,8(a0)
    0x84000352    0x1e0    auipc a5,0xf
    0x84000356    0x1e4    sd a0,-850(a5) # ffffffff8400f000 <riscvKSASIDTable>
    0x8400035a    0x1e8    addi sp,sp,32
    0x8400035c    0x1ea    ret
    0x8400035e    0x1ec    srli a7,a7,0x10
    0x84000362    0x1f0    li a4,-1
    0x84000364    0x1f2    srli a3,a7,0x26
    0x84000368    0x1f6    srli a5,a4,0x19
    0x8400036c    0x1fa    andi a3,a3,1
    0x8400036e    0x1fc    and a5,a7,a5
    0x84000372    0x200    bnez a3,ffffffff8400033c <write_it_asid_pool+0x1ca>
    0x84000374    0x202    j ffffffff840001bc <write_it_asid_pool+0x4a>
    0x84000376    0x204    li a4,-1
    0x84000378    0x206    srli a3,t1,0x26
    0x8400037c    0x20a    srli a5,a4,0x19
    0x84000380    0x20e    andi a3,a3,1
    0x84000382    0x210    and a5,t1,a5
    0x84000386    0x214    bnez a3,ffffffff8400033c <write_it_asid_pool+0x1ca>
    0x84000388    0x216    j ffffffff840001bc <write_it_asid_pool+0x4a>
    0x8400038a    0x218    slli a4,t1,0x2
    0x8400038e    0x21c    srli a3,a4,0x26
    0x84000392    0x220    lui a5,0xf8000
    0x84000396    0x224    srli a5,a5,0x19
    0x84000398    0x226    andi a3,a3,1
    0x8400039a    0x228    and a5,a5,a4
    0x8400039c    0x22a    bnez a3,ffffffff8400033a <write_it_asid_pool+0x1c8>
    0x8400039e    0x22c    j ffffffff840001bc <write_it_asid_pool+0x4a>
    0x840003a0    0x22e    srli a7,a7,0x9
    0x840003a4    0x232    j ffffffff84000362 <write_it_asid_pool+0x1f0>
    0x840003a6    0x234    slli a0,a0,0x2
    0x840003a8    0x236    srli a5,a0,0x26
    0x840003ac    0x23a    lui a4,0xf8000
    0x840003b0    0x23e    srli a4,a4,0x19
    0x840003b2    0x240    andi a5,a5,1
    0x840003b4    0x242    and a0,a0,a4
    0x840003b6    0x244    beqz a5,ffffffff84000198 <write_it_asid_pool+0x26>
    0x840003ba    0x248    li a5,-1
    0x840003bc    0x24a    j ffffffff84000276 <write_it_asid_pool+0x104>
    0x840003be    0x24c    srli a1,a1,0x9
    0x840003c0    0x24e    j ffffffff84000266 <write_it_asid_pool+0xf4>
    0x840003c2    0x250    li a0,-32
    0x840003c4    0x252    and a0,a0,a1
    0x840003c6    0x254    j ffffffff84000198 <write_it_asid_pool+0x26>
    0x840003c8    0x256    li a5,-32
    0x840003ca    0x258    and a5,a5,a7
    0x840003ce    0x25c    j ffffffff8400029a <write_it_asid_pool+0x128>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
218 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 294 nodes.

Section activate_kernel_vspace (101 of 296)
===========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x8400014c     0x0    li a3,1
    0x8400014e     0x2    slli a3,a3,0x20
    0x84000150     0x4    auipc a5,0x25
    0x84000154     0x8    addi a5,a5,-336 # ffffffff84025000 <kernel_root_pageTable>
    0x84000158     0xc    li a4,-1
    0x8400015a     0xe    add a5,a5,a3
    0x8400015c    0x10    srli a5,a5,0xc
    0x8400015e    0x12    srli a3,a4,0x14
    0x84000162    0x16    and a5,a5,a3
    0x84000164    0x18    slli a4,a4,0x3f
    0x84000166    0x1a    or a5,a5,a4
    0x84000168    0x1c    csrw satp,a5
    0x8400016c    0x20    sfence.vma
    0x84000170    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (102 of 296)
======================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x8400011e     0x0    addi a1,a1,-1
    0x84000120     0x2    srli a5,a1,0x1e
    0x84000124     0x6    srli a1,a1,0x15
    0x84000126     0x8    addi a5,a5,1
    0x84000128     0xa    addi a1,a1,1
    0x8400012a     0xc    lui a3,0xc0000
    0x8400012e    0x10    lui a4,0xffe00
    0x84000132    0x14    and a4,a4,a0
    0x84000134    0x16    slli a5,a5,0x1e
    0x84000136    0x18    and a3,a3,a0
    0x84000138    0x1a    slli a1,a1,0x15
    0x8400013a    0x1c    sub a0,a5,a3
    0x8400013e    0x20    sub a1,a1,a4
    0x84000140    0x22    addi sp,sp,-16
    0x84000142    0x24    srli a0,a0,0x1e
    0x84000144    0x26    srli a1,a1,0x15
    0x84000146    0x28    add a0,a0,a1
    0x84000148    0x2a    addi sp,sp,16
    0x8400014a    0x2c    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (103 of 296)
=================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x84000108     0x0    lui a5,0xfe000
    0x8400010c     0x4    addi sp,sp,-16
    0x8400010e     0x6    slli a1,a0,0x9
    0x84000112     0xa    srli a5,a5,0x10
    0x84000114     0xc    li a0,1
    0x84000116     0xe    slli a0,a0,0x3b
    0x84000118    0x10    and a1,a1,a5
    0x8400011a    0x12    addi sp,sp,16
    0x8400011c    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section map_kernel_frame (104 of 296)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 29 instructions.


Stack analysis
---------------

No stack accesses found. Code for `map_kernel_frame`:

    0x840000b6     0x0    srli a0,a0,0xc
    0x840000b8     0x2    lui a5,0xc0000
    0x840000bc     0x6    slli a0,a0,0xa
    0x840000be     0x8    bltu a1,a5,ffffffff840000e4 <map_kernel_frame+0x2e>
    0x840000c2     0xc    srli a1,a1,0x15
    0x840000c4     0xe    lui a5,0xe0000
    0x840000c8    0x12    srli a5,a5,0xa
    0x840000ca    0x14    andi a1,a1,511
    0x840000ce    0x18    and a0,a0,a5
    0x840000d0    0x1a    slli a1,a1,0x3
    0x840000d2    0x1c    auipc a5,0x23
    0x840000d6    0x20    addi a5,a5,-210 # ffffffff84023000 <kernel_image_level2_dev_pt>
    0x840000da    0x24    add a1,a1,a5
    0x840000dc    0x26    ori a0,a0,239
    0x840000e0    0x2a    sd a0,0(a1)
    0x840000e2    0x2c    ret
    0x840000e4    0x2e    lui a5,0x4000
    0x840000e8    0x32    srli a1,a1,0x1e
    0x840000ea    0x34    addi a5,a5,-1
    0x840000ec    0x36    slli a5,a5,0x1c
    0x840000ee    0x38    andi a1,a1,511
    0x840000f2    0x3c    and a0,a0,a5
    0x840000f4    0x3e    slli a1,a1,0x3
    0x840000f6    0x40    auipc a5,0x25
    0x840000fa    0x44    addi a5,a5,-246 # ffffffff84025000 <kernel_root_pageTable>
    0x840000fe    0x48    add a1,a1,a5
    0x84000100    0x4a    ori a0,a0,239
    0x84000104    0x4e    sd a0,0(a1)
    0x84000106    0x50    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 35 nodes.

Section Arch_configureIdleThread (105 of 296)
=============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x84000096     0x0    auipc a5,0x3
    0x8400009a     0x4    addi a5,a5,54 # ffffffff840030cc <idle_thread>
    0x8400009e     0x8    sd a5,272(a0)
    0x840000a2     0xc    li a5,288
    0x840000a6    0x10    sd a5,256(a0)
    0x840000aa    0x14    auipc a5,0x21
    0x840000ae    0x18    addi a5,a5,1878 # ffffffff84021800 <tlbLockCount>
    0x840000b2    0x1c    sd a5,8(a0)
    0x840000b4    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (106 of 296)
==================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 34 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    auipc a2,0xe
    0x8400002a     0x4    addi a2,a2,986 # ffffffff8400e400 <ndks_boot>
    0x8400002e     0x8    ld a1,816(a2)
    0x84000032     0xc    li a3,1
    0x84000034     0xe    auipc t1,0xe
    0x84000038    0x12    addi t1,t1,956 # ffffffff8400e3f0 <ksIdleThreadTCB+0x3f0>
    0x8400003c    0x16    bgeu a3,a1,ffffffff84000068 <merge_regions+0x42>
    0x84000040    0x1a    addi a4,a3,-1
    0x84000044    0x1e    slli a4,a4,0x4
    0x84000046    0x20    slli a5,a3,0x4
    0x8400004a    0x24    add a4,a4,a2
    0x8400004c    0x26    add a5,a5,a2
    0x8400004e    0x28    ld a7,8(a4)
    0x84000052    0x2c    ld a6,0(a5)
    0x84000056    0x30    addi a0,a3,1
    0x8400005a    0x34    beq a7,a6,ffffffff8400006a <merge_regions+0x44>
    0x8400005e    0x38    ld a1,816(a2)
    0x84000062    0x3c    mv a3,a0
    0x84000064    0x3e    bltu a3,a1,ffffffff84000040 <merge_regions+0x1a>
    0x84000068    0x42    ret
    0x8400006a    0x44    ld a7,8(a5)
    0x8400006e    0x48    slli a6,a1,0x4
    0x84000072    0x4c    add a6,a6,t1
    0x84000074    0x4e    sd a7,8(a4)
    0x84000078    0x52    bgeu a0,a1,ffffffff8400008e <merge_regions+0x68>
    0x8400007c    0x56    ld a0,16(a5)
    0x8400007e    0x58    ld a4,24(a5)
    0x84000080    0x5a    addi a5,a5,16
    0x84000082    0x5c    sd a0,-16(a5)
    0x84000086    0x60    sd a4,-8(a5)
    0x8400008a    0x64    bne a5,a6,ffffffff8400007c <merge_regions+0x56>
    0x8400008e    0x68    addi a1,a1,-1
    0x84000090    0x6a    sd a1,816(a2)
    0x84000094    0x6e    j ffffffff8400003c <merge_regions+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 56 nodes.

Section Arch_switchToThread (107 of 296)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_switchToThread`:

    0x84003d54    0x0    j ffffffff84003c98 <setVMRoot>

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 2 nodes.

Section invokeCNodeRevoke (108 of 296)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeCNodeRevoke`:

    0x8400961c    0x0    j ffffffff84009588 <cteRevoke>

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 2 nodes.

Section isHighestPrio (109 of 296)
==================================

Deriving specifications
-----------------------

Section `isHighestPrio` consists of 47 instructions.

JAL.
RVC_FTT_FFFFT_____TF.

Stack analysis
---------------

15 stack accesses found. Annotated code for `isHighestPrio`:

    0x8400cf0e     0x0    addi sp,sp,-48
    0x8400cf10     0x2    slli a5,a0,0x3
    0x8400cf14     0x6    sd s3,8(sp)           ; stack access
    0x8400cf16     0x8    auipc s3,0x2
    0x8400cf1a     0xc    addi s3,s3,234 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400cf1e    0x10    add a5,a5,s3
    0x8400cf20    0x12    sd s1,24(sp)          ; stack access
    0x8400cf22    0x14    mv s1,a0
    0x8400cf24    0x16    ld a0,1552(a5) # ffffffffc0202610 <ki_end+0x3c1db610>
    0x8400cf28    0x1a    sd ra,40(sp)          ; stack access
    0x8400cf2a    0x1c    sd s0,32(sp)          ; stack access
    0x8400cf2c    0x1e    sd s2,16(sp)          ; stack access
    0x8400cf2e    0x20    beqz a0,ffffffff8400cf78 <isHighestPrio+0x6a>
    0x8400cf30    0x22    mv s0,a1
    0x8400cf32    0x24    jal ra,ffffffff8400c4ac <__clzdi2>
    0x8400cf36    0x28    mv s2,a0
    0x8400cf38    0x2a    slli s1,s1,0x2
    0x8400cf3a    0x2c    addi a0,a0,-60
    0x8400cf3e    0x30    add s1,s1,a0
    0x8400cf40    0x32    slli s1,s1,0x3
    0x8400cf42    0x34    add s1,s1,s3
    0x8400cf44    0x36    ld a0,1040(s1)
    0x8400cf48    0x3a    jal ra,ffffffff8400c4ac <__clzdi2>
    0x8400cf4c    0x3e    li a5,63
    0x8400cf50    0x42    sub s2,a5,s2
    0x8400cf54    0x46    slli s2,s2,0x6
    0x8400cf56    0x48    sub a0,a5,a0
    0x8400cf5a    0x4c    or a0,s2,a0
    0x8400cf5e    0x50    ld ra,40(sp)          ; stack access
    0x8400cf60    0x52    sltu a0,s0,a0
    0x8400cf64    0x56    ld s0,32(sp)          ; stack access
    0x8400cf66    0x58    xori a0,a0,1
    0x8400cf6a    0x5c    slli a0,a0,0x20
    0x8400cf6c    0x5e    ld s1,24(sp)          ; stack access
    0x8400cf6e    0x60    ld s2,16(sp)          ; stack access
    0x8400cf70    0x62    ld s3,8(sp)           ; stack access
    0x8400cf72    0x64    srli a0,a0,0x20
    0x8400cf74    0x66    addi sp,sp,48
    0x8400cf76    0x68    ret
    0x8400cf78    0x6a    ld ra,40(sp)          ; stack access
    0x8400cf7a    0x6c    ld s0,32(sp)          ; stack access
    0x8400cf7c    0x6e    ld s1,24(sp)          ; stack access
    0x8400cf7e    0x70    ld s2,16(sp)          ; stack access
    0x8400cf80    0x72    ld s3,8(sp)           ; stack access
    0x8400cf82    0x74    li a0,1
    0x8400cf84    0x76    addi sp,sp,48
    0x8400cf86    0x78    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isHighestPrio` has 70 nodes.

Section scheduleChooseNewThread (110 of 296)
============================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 34 instructions.

RVC_FTTFFT___FFT__FT.

Stack analysis
---------------

No stack accesses found. Code for `scheduleChooseNewThread`:

    0x8400c5ae     0x0    auipc a4,0x15
    0x8400c5b2     0x4    addi a4,a4,610 # ffffffff84021810 <ksDomainTime>
    0x8400c5b6     0x8    ld a5,0(a4)
    0x8400c5b8     0xa    beqz a5,ffffffff8400c5bc <scheduleChooseNewThread+0xe>
    0x8400c5ba     0xc    j ffffffff8400c4fc <chooseThread>
    0x8400c5bc     0xe    auipc a2,0x15
    0x8400c5c0    0x12    addi a2,a2,588 # ffffffff84021808 <ksDomScheduleIdx>
    0x8400c5c4    0x16    ld a3,0(a2)
    0x8400c5c6    0x18    li a1,2
    0x8400c5c8    0x1a    addi a3,a3,1
    0x8400c5ca    0x1c    sd a3,0(a2)
    0x8400c5cc    0x1e    bltu a1,a3,ffffffff8400c606 <scheduleChooseNewThread+0x58>
    0x8400c5d0    0x22    auipc a5,0x2
    0x8400c5d4    0x26    addi a5,a5,-2016 # ffffffff8400ddf0 <syscall_fault_message>
    0x8400c5d8    0x2a    slli a3,a3,0x4
    0x8400c5da    0x2c    add a3,a3,a5
    0x8400c5dc    0x2e    ld a2,88(a3)
    0x8400c5de    0x30    ld a5,80(a3)
    0x8400c5e0    0x32    li a3,1000
    0x8400c5e4    0x36    mul a3,a3,a2
    0x8400c5e8    0x3a    li a2,1
    0x8400c5ea    0x3c    auipc a1,0x15
    0x8400c5ee    0x40    sd a2,590(a1) # ffffffff84021838 <ksReprogram>
    0x8400c5f2    0x44    auipc a2,0x15
    0x8400c5f6    0x48    sd zero,558(a2) # ffffffff84021820 <ksWorkUnitsCompleted>
    0x8400c5fa    0x4c    auipc a2,0x15
    0x8400c5fe    0x50    sd a5,542(a2) # ffffffff84021818 <ksCurDomain>
    0x8400c602    0x54    sd a3,0(a4)
    0x8400c604    0x56    j ffffffff8400c4fc <chooseThread>
    0x8400c606    0x58    auipc a3,0x15
    0x8400c60a    0x5c    sd zero,514(a3) # ffffffff84021808 <ksDomScheduleIdx>
    0x8400c60e    0x60    lui a3,0x4
    0x8400c610    0x62    addi a3,a3,-1384 # 3a98 <KERNEL_OFFSET-0xfffffffeffffc568>
    0x8400c614    0x66    j ffffffff8400c5e8 <scheduleChooseNewThread+0x3a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 50 nodes.

Section invokeTCB_Resume (111 of 296)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x8400a87e     0x0    ld a5,280(a0)
    0x8400a882     0x4    andi a5,a5,15
    0x8400a884     0x6    beqz a5,ffffffff8400a88e <invokeTCB_Resume+0x10>
    0x8400a886     0x8    addi a5,a5,-3
    0x8400a888     0xa    li a4,3
    0x8400a88a     0xc    bltu a4,a5,ffffffff8400a89e <invokeTCB_Resume+0x20>
    0x8400a88e    0x10    addi sp,sp,-16
    0x8400a890    0x12    sd ra,8(sp)           ; stack access
    0x8400a892    0x14    jal ra,ffffffff84007cf2 <restart.part.0>
    0x8400a896    0x18    ld ra,8(sp)           ; stack access
    0x8400a898    0x1a    li a0,0
    0x8400a89a    0x1c    addi sp,sp,16
    0x8400a89c    0x1e    ret
    0x8400a89e    0x20    li a0,0
    0x8400a8a0    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 25 nodes.

Section invokeTCB_Suspend (112 of 296)
======================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x8400a86e    0x0    addi sp,sp,-16
    0x8400a870    0x2    sd ra,8(sp)           ; stack access
    0x8400a872    0x4    jal ra,ffffffff840070f4 <suspend>
    0x8400a876    0x8    ld ra,8(sp)           ; stack access
    0x8400a878    0xa    li a0,0
    0x8400a87a    0xc    addi sp,sp,16
    0x8400a87c    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section decodeUnbindNotification (113 of 296)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 57 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x8400a7d8     0x0    addi sp,sp,-32
    0x8400a7da     0x2    li a5,-1
    0x8400a7dc     0x4    srli a4,a0,0x26
    0x8400a7e0     0x8    sd s0,16(sp)          ; stack access
    0x8400a7e2     0xa    srli a3,a5,0x19
    0x8400a7e6     0xe    sd ra,24(sp)          ; stack access
    0x8400a7e8    0x10    sd a0,0(sp)           ; stack access
    0x8400a7ea    0x12    sd a1,8(sp)           ; stack access
    0x8400a7ec    0x14    andi a4,a4,1
    0x8400a7ee    0x16    and s0,a0,a3
    0x8400a7f2    0x1a    beqz a4,ffffffff8400a7f8 <decodeUnbindNotification+0x20>
    0x8400a7f4    0x1c    slli a5,a5,0x27
    0x8400a7f6    0x1e    or s0,s0,a5
    0x8400a7f8    0x20    ld a4,304(s0)
    0x8400a7fc    0x24    beqz a4,ffffffff8400a834 <decodeUnbindNotification+0x5c>
    0x8400a7fe    0x26    auipc a3,0x17
    0x8400a802    0x2a    ld a3,90(a3) # ffffffff84021858 <ksCurThread>
    0x8400a806    0x2e    ld a5,280(a3)
    0x8400a80a    0x32    auipc a2,0x17
    0x8400a80e    0x36    ld a2,62(a2) # ffffffff84021848 <ksSchedulerAction>
    0x8400a812    0x3a    andi a5,a5,-16
    0x8400a814    0x3c    ori a5,a5,2
    0x8400a818    0x40    sd a5,280(a3)
    0x8400a81c    0x44    beqz a2,ffffffff8400a848 <decodeUnbindNotification+0x70>
    0x8400a81e    0x46    ld a5,24(a4)
    0x8400a820    0x48    ld ra,24(sp)          ; stack access
    0x8400a822    0x4a    li a0,0
    0x8400a824    0x4c    srli a5,a5,0x27
    0x8400a826    0x4e    slli a5,a5,0x27
    0x8400a828    0x50    sd a5,24(a4)
    0x8400a82a    0x52    sd zero,304(s0)
    0x8400a82e    0x56    ld s0,16(sp)          ; stack access
    0x8400a830    0x58    addi sp,sp,32
    0x8400a832    0x5a    ret
    0x8400a834    0x5c    ld ra,24(sp)          ; stack access
    0x8400a836    0x5e    ld s0,16(sp)          ; stack access
    0x8400a838    0x60    li a5,3
    0x8400a83a    0x62    auipc a4,0x5
    0x8400a83e    0x66    sd a5,-378(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a842    0x6a    li a0,3
    0x8400a844    0x6c    addi sp,sp,32
    0x8400a846    0x6e    ret
    0x8400a848    0x70    ld a5,368(a3)
    0x8400a84c    0x74    beqz a5,ffffffff8400a85a <decodeUnbindNotification+0x82>
    0x8400a84e    0x76    ld a5,64(a5)
    0x8400a850    0x78    beqz a5,ffffffff8400a85a <decodeUnbindNotification+0x82>
    0x8400a852    0x7a    ld a5,288(a3)
    0x8400a856    0x7e    andi a5,a5,1
    0x8400a858    0x80    beqz a5,ffffffff8400a81e <decodeUnbindNotification+0x46>
    0x8400a85a    0x82    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400a85e    0x86    ld a4,304(s0)
    0x8400a862    0x8a    li a0,0
    0x8400a864    0x8c    bnez a4,ffffffff8400a81e <decodeUnbindNotification+0x46>
    0x8400a866    0x8e    ld ra,24(sp)          ; stack access
    0x8400a868    0x90    ld s0,16(sp)          ; stack access
    0x8400a86a    0x92    addi sp,sp,32
    0x8400a86c    0x94    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 98 nodes.

Section decodeBindNotification (114 of 296)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 87 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `decodeBindNotification`:

    0x8400a6de     0x0    addi sp,sp,-64
    0x8400a6e0     0x2    sd ra,56(sp)          ; stack access
    0x8400a6e2     0x4    sd s0,48(sp)          ; stack access
    0x8400a6e4     0x6    sd s1,40(sp)          ; stack access
    0x8400a6e6     0x8    sd s2,32(sp)          ; stack access
    0x8400a6e8     0xa    sd s3,24(sp)          ; stack access
    0x8400a6ea     0xc    sd s4,16(sp)          ; stack access
    0x8400a6ec     0xe    sd a0,0(sp)           ; stack access
    0x8400a6ee    0x10    sd a1,8(sp)           ; stack access
    0x8400a6f0    0x12    auipc a3,0x5
    0x8400a6f4    0x16    ld a3,784(a3) # ffffffff8400fa00 <current_extra_caps>
    0x8400a6f8    0x1a    beqz a3,ffffffff8400a7b2 <decodeBindNotification+0xd4>
    0x8400a6fa    0x1c    li a5,-1
    0x8400a6fc    0x1e    srli a4,a0,0x26
    0x8400a700    0x22    srli s0,a5,0x19
    0x8400a704    0x26    andi a4,a4,1
    0x8400a706    0x28    and s0,s0,a0
    0x8400a708    0x2a    beqz a4,ffffffff8400a70e <decodeBindNotification+0x30>
    0x8400a70a    0x2c    slli a5,a5,0x27
    0x8400a70c    0x2e    or s0,s0,a5
    0x8400a70e    0x30    ld a5,304(s0)
    0x8400a712    0x34    bnez a5,ffffffff8400a750 <decodeBindNotification+0x72>
    0x8400a714    0x36    ld a5,0(a3)
    0x8400a716    0x38    li a4,6
    0x8400a718    0x3a    srli a3,a5,0x3b
    0x8400a71c    0x3e    bne a3,a4,ffffffff8400a750 <decodeBindNotification+0x72>
    0x8400a720    0x42    li a3,-1
    0x8400a722    0x44    srli a4,a5,0x26
    0x8400a726    0x48    srli s2,a3,0x19
    0x8400a72a    0x4c    andi a4,a4,1
    0x8400a72c    0x4e    and s2,a5,s2
    0x8400a730    0x52    beqz a4,ffffffff8400a738 <decodeBindNotification+0x5a>
    0x8400a732    0x54    slli a3,a3,0x27
    0x8400a734    0x56    or s2,s2,a3
    0x8400a738    0x5a    srli a5,a5,0x3a
    0x8400a73a    0x5c    li a4,12
    0x8400a73c    0x5e    beq a5,a4,ffffffff8400a750 <decodeBindNotification+0x72>
    0x8400a740    0x62    ld a5,8(s2)
    0x8400a744    0x66    li s4,-1
    0x8400a746    0x68    srli s3,s4,0x19
    0x8400a74a    0x6c    and a5,a5,s3
    0x8400a74e    0x70    beqz a5,ffffffff8400a76e <decodeBindNotification+0x90>
    0x8400a750    0x72    li a5,3
    0x8400a752    0x74    auipc a4,0x5
    0x8400a756    0x78    sd a5,-146(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a75a    0x7c    li s1,3
    0x8400a75c    0x7e    ld ra,56(sp)          ; stack access
    0x8400a75e    0x80    ld s0,48(sp)          ; stack access
    0x8400a760    0x82    ld s2,32(sp)          ; stack access
    0x8400a762    0x84    ld s3,24(sp)          ; stack access
    0x8400a764    0x86    ld s4,16(sp)          ; stack access
    0x8400a766    0x88    mv a0,s1
    0x8400a768    0x8a    ld s1,40(sp)          ; stack access
    0x8400a76a    0x8c    addi sp,sp,64
    0x8400a76c    0x8e    ret
    0x8400a76e    0x90    ld s1,24(s2)
    0x8400a772    0x94    and s1,s1,s3
    0x8400a776    0x98    bnez s1,ffffffff8400a750 <decodeBindNotification+0x72>
    0x8400a778    0x9a    auipc a0,0x17
    0x8400a77c    0x9e    ld a0,224(a0) # ffffffff84021858 <ksCurThread>
    0x8400a780    0xa2    ld a5,280(a0)
    0x8400a784    0xa6    andi a5,a5,-16
    0x8400a786    0xa8    ori a5,a5,2
    0x8400a78a    0xac    sd a5,280(a0)
    0x8400a78e    0xb0    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400a792    0xb4    beqz s2,ffffffff8400a7c0 <decodeBindNotification+0xe2>
    0x8400a796    0xb8    ld a5,24(s2)
    0x8400a79a    0xbc    slli s4,s4,0x27
    0x8400a79c    0xbe    and s3,s0,s3
    0x8400a7a0    0xc2    and s4,a5,s4
    0x8400a7a4    0xc6    or s3,s4,s3
    0x8400a7a8    0xca    sd s3,24(s2)
    0x8400a7ac    0xce    sd s2,304(s0)
    0x8400a7b0    0xd2    j ffffffff8400a75c <decodeBindNotification+0x7e>
    0x8400a7b2    0xd4    li a5,7
    0x8400a7b4    0xd6    auipc a4,0x5
    0x8400a7b8    0xda    sd a5,-244(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a7bc    0xde    li s1,3
    0x8400a7be    0xe0    j ffffffff8400a75c <decodeBindNotification+0x7e>
    0x8400a7c0    0xe2    ld a5,304(s0)
    0x8400a7c4    0xe6    beqz a5,ffffffff8400a75c <decodeBindNotification+0x7e>
    0x8400a7c6    0xe8    ld a4,24(a5)
    0x8400a7c8    0xea    slli s4,s4,0x27
    0x8400a7ca    0xec    and s4,a4,s4
    0x8400a7ce    0xf0    sd s4,24(a5)
    0x8400a7d2    0xf4    sd zero,304(s0)
    0x8400a7d6    0xf8    j ffffffff8400a75c <decodeBindNotification+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
87 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 140 nodes.

Section decodeSetMCPriority (115 of 296)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 86 instructions.


Stack analysis
---------------

11 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x8400a23c     0x0    addi sp,sp,-32
    0x8400a23e     0x2    sd ra,24(sp)          ; stack access
    0x8400a240     0x4    sd s0,16(sp)          ; stack access
    0x8400a242     0x6    sd a0,0(sp)           ; stack access
    0x8400a244     0x8    sd a1,8(sp)           ; stack access
    0x8400a246     0xa    beqz a2,ffffffff8400a2de <decodeSetMCPriority+0xa2>
    0x8400a248     0xc    auipc a5,0x5
    0x8400a24c    0x10    ld a5,1976(a5) # ffffffff8400fa00 <current_extra_caps>
    0x8400a250    0x14    beqz a5,ffffffff8400a2de <decodeSetMCPriority+0xa2>
    0x8400a252    0x16    ld a5,0(a5)
    0x8400a254    0x18    li a4,12
    0x8400a256    0x1a    srli a3,a5,0x3b
    0x8400a25a    0x1e    bne a3,a4,ffffffff8400a2c0 <decodeSetMCPriority+0x84>
    0x8400a25e    0x22    srli a3,a5,0x26
    0x8400a262    0x26    li a4,-1
    0x8400a264    0x28    srli a2,a4,0x19
    0x8400a268    0x2c    andi a3,a3,1
    0x8400a26a    0x2e    and a5,a5,a2
    0x8400a26c    0x30    beqz a3,ffffffff8400a272 <decodeSetMCPriority+0x36>
    0x8400a26e    0x32    slli a4,a4,0x27
    0x8400a270    0x34    or a5,a5,a4
    0x8400a272    0x36    auipc a4,0x17
    0x8400a276    0x3a    ld a4,1510(a4) # ffffffff84021858 <ksCurThread>
    0x8400a27a    0x3e    ld s0,88(a4)
    0x8400a27c    0x40    ld a5,352(a5)
    0x8400a280    0x44    bltu a5,s0,ffffffff8400a2f2 <decodeSetMCPriority+0xb6>
    0x8400a284    0x48    ld a5,280(a4)
    0x8400a288    0x4c    auipc a3,0x17
    0x8400a28c    0x50    ld a3,1472(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400a290    0x54    andi a5,a5,-16
    0x8400a292    0x56    ori a5,a5,2
    0x8400a296    0x5a    sd a5,280(a4)
    0x8400a29a    0x5e    beqz a3,ffffffff8400a310 <decodeSetMCPriority+0xd4>
    0x8400a29c    0x60    ld a5,0(sp)           ; stack access
    0x8400a29e    0x62    li a4,-1
    0x8400a2a0    0x64    srli a2,a4,0x19
    0x8400a2a4    0x68    srli a3,a5,0x26
    0x8400a2a8    0x6c    andi a3,a3,1
    0x8400a2aa    0x6e    and a5,a5,a2
    0x8400a2ac    0x70    beqz a3,ffffffff8400a2b2 <decodeSetMCPriority+0x76>
    0x8400a2ae    0x72    slli a4,a4,0x27
    0x8400a2b0    0x74    or a5,a5,a4
    0x8400a2b2    0x76    sd s0,352(a5)
    0x8400a2b6    0x7a    li a0,0
    0x8400a2b8    0x7c    ld ra,24(sp)          ; stack access
    0x8400a2ba    0x7e    ld s0,16(sp)          ; stack access
    0x8400a2bc    0x80    addi sp,sp,32
    0x8400a2be    0x82    ret
    0x8400a2c0    0x84    ld ra,24(sp)          ; stack access
    0x8400a2c2    0x86    ld s0,16(sp)          ; stack access
    0x8400a2c4    0x88    auipc a5,0x5
    0x8400a2c8    0x8c    addi a5,a5,-708 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400a2cc    0x90    li a4,2
    0x8400a2ce    0x92    sd a4,1728(a5)
    0x8400a2d2    0x96    li a4,1
    0x8400a2d4    0x98    sd a4,1688(a5)
    0x8400a2d8    0x9c    li a0,3
    0x8400a2da    0x9e    addi sp,sp,32
    0x8400a2dc    0xa0    ret
    0x8400a2de    0xa2    ld ra,24(sp)          ; stack access
    0x8400a2e0    0xa4    ld s0,16(sp)          ; stack access
    0x8400a2e2    0xa6    li a5,7
    0x8400a2e4    0xa8    auipc a4,0x5
    0x8400a2e8    0xac    sd a5,988(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a2ec    0xb0    li a0,3
    0x8400a2ee    0xb2    addi sp,sp,32
    0x8400a2f0    0xb4    ret
    0x8400a2f2    0xb6    auipc a4,0x5
    0x8400a2f6    0xba    addi a4,a4,-754 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400a2fa    0xbe    li a3,4
    0x8400a2fc    0xc0    sd a3,1728(a4)
    0x8400a300    0xc4    sd a5,1704(a4)
    0x8400a304    0xc8    auipc a3,0x5
    0x8400a308    0xcc    sd zero,924(a3) # ffffffff8400f6a0 <current_syscall_error+0x10>
    0x8400a30c    0xd0    li a0,3
    0x8400a30e    0xd2    j ffffffff8400a2b8 <decodeSetMCPriority+0x7c>
    0x8400a310    0xd4    ld a5,368(a4)
    0x8400a314    0xd8    beqz a5,ffffffff8400a31a <decodeSetMCPriority+0xde>
    0x8400a316    0xda    ld a5,64(a5)
    0x8400a318    0xdc    bnez a5,ffffffff8400a320 <decodeSetMCPriority+0xe4>
    0x8400a31a    0xde    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400a31e    0xe2    j ffffffff8400a29c <decodeSetMCPriority+0x60>
    0x8400a320    0xe4    ld a5,288(a4)
    0x8400a324    0xe8    andi a5,a5,1
    0x8400a326    0xea    beqz a5,ffffffff8400a29c <decodeSetMCPriority+0x60>
    0x8400a328    0xec    j ffffffff8400a31a <decodeSetMCPriority+0xde>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
86 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 139 nodes.

Section performInvocation_Reply (116 of 296)
============================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x84009cf6    0x0    addi sp,sp,-16
    0x84009cf8    0x2    sd ra,8(sp)           ; stack access
    0x84009cfa    0x4    jal ra,ffffffff84009bba <doReplyTransfer>
    0x84009cfe    0x8    ld ra,8(sp)           ; stack access
    0x84009d00    0xa    li a0,0
    0x84009d02    0xc    addi sp,sp,16
    0x84009d04    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 11 nodes.

Section handleTimeout (117 of 296)
==================================

Deriving specifications
-----------------------

Section `handleTimeout` consists of 31 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `handleTimeout`:

    0x84009aca     0x0    andi a5,a0,-1024
    0x84009ace     0x4    ld a7,128(a5)
    0x84009ad2     0x8    li a4,4
    0x84009ad4     0xa    mv a6,a0
    0x84009ad6     0xc    srli a3,a7,0x3b
    0x84009ada    0x10    addi a5,a5,128
    0x84009ade    0x14    beq a3,a4,ffffffff84009ae4 <handleTimeout+0x1a>
    0x84009ae2    0x18    ret
    0x84009ae4    0x1a    auipc a4,0x6
    0x84009ae8    0x1e    addi a4,a4,1308 # ffffffff84010000 <intStateIRQNode>
    0x84009aec    0x22    ld t4,-1920(a4)
    0x84009af0    0x26    ld t3,-1912(a4)
    0x84009af4    0x2a    srli a0,a7,0x26
    0x84009af8    0x2e    li a1,-1
    0x84009afa    0x30    ld a2,8(a5)
    0x84009afc    0x32    srli a3,a7,0x39
    0x84009b00    0x36    srli a4,a7,0x3a
    0x84009b04    0x3a    srli t1,a1,0x19
    0x84009b08    0x3e    sd t4,312(a6)
    0x84009b0c    0x42    sd t3,320(a6)
    0x84009b10    0x46    andi a5,a0,1
    0x84009b14    0x4a    andi a3,a3,1
    0x84009b16    0x4c    andi a4,a4,1
    0x84009b18    0x4e    and a7,a7,t1
    0x84009b1c    0x52    beqz a5,ffffffff84009b24 <handleTimeout+0x5a>
    0x84009b1e    0x54    slli a1,a1,0x27
    0x84009b20    0x56    or a7,a7,a1
    0x84009b24    0x5a    li a5,0
    0x84009b26    0x5c    li a1,0
    0x84009b28    0x5e    li a0,1
    0x84009b2a    0x60    j ffffffff84008d4a <sendIPC>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleTimeout` has 43 nodes.

Section performInvocation_Endpoint (118 of 296)
===============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x84009aa2     0x0    mv t1,a1
    0x84009aa4     0x2    addi sp,sp,-16
    0x84009aa6     0x4    mv a7,a0
    0x84009aa8     0x6    mv a1,a5
    0x84009aaa     0x8    mv a0,a4
    0x84009aac     0xa    mv a5,a6
    0x84009aae     0xc    mv a4,a3
    0x84009ab0     0xe    auipc a6,0x18
    0x84009ab4    0x12    ld a6,-600(a6) # ffffffff84021858 <ksCurThread>
    0x84009ab8    0x16    mv a3,a2
    0x84009aba    0x18    mv a2,t1
    0x84009abc    0x1a    sd ra,8(sp)           ; stack access
    0x84009abe    0x1c    jal ra,ffffffff84008d4a <sendIPC>
    0x84009ac2    0x20    ld ra,8(sp)           ; stack access
    0x84009ac4    0x22    li a0,0
    0x84009ac6    0x24    addi sp,sp,16
    0x84009ac8    0x26    ret

Proving inst theorems
---------------------

17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 22 nodes.

Section sendFaultIPC (119 of 296)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 34 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `sendFaultIPC`:

    0x84008fbc     0x0    srli a7,a1,0x3b
    0x84008fc0     0x4    li a4,4
    0x84008fc2     0x6    beq a7,a4,ffffffff84008fca <sendFaultIPC+0xe>
    0x84008fc6     0xa    li a0,0
    0x84008fc8     0xc    ret
    0x84008fca     0xe    auipc a4,0x7
    0x84008fce    0x12    addi a4,a4,54 # ffffffff84010000 <intStateIRQNode>
    0x84008fd2    0x16    ld t4,-1920(a4)
    0x84008fd6    0x1a    ld t3,-1912(a4)
    0x84008fda    0x1e    addi sp,sp,-32
    0x84008fdc    0x20    mv a6,a0
    0x84008fde    0x22    sd ra,24(sp)          ; stack access
    0x84008fe0    0x24    li a0,-1
    0x84008fe2    0x26    srli t1,a1,0x26
    0x84008fe6    0x2a    mv a5,a3
    0x84008fe8    0x2c    srli a4,a1,0x3a
    0x84008fec    0x30    srli a3,a1,0x39
    0x84008ff0    0x34    srli a7,a0,0x19
    0x84008ff4    0x38    sd t4,312(a6) # fffffffff8000138 <ki_end+0x73fd9138>
    0x84008ff8    0x3c    sd t3,320(a6)
    0x84008ffc    0x40    andi t1,t1,1
    0x84009000    0x44    andi a3,a3,1
    0x84009002    0x46    andi a4,a4,1
    0x84009004    0x48    and a7,a1,a7
    0x84009008    0x4c    beqz t1,ffffffff84009012 <sendFaultIPC+0x56>
    0x8400900c    0x50    slli a0,a0,0x27
    0x8400900e    0x52    or a7,a7,a0
    0x84009012    0x56    li a0,1
    0x84009014    0x58    li a1,0
    0x84009016    0x5a    jal ra,ffffffff84008d4a <sendIPC>
    0x8400901a    0x5e    ld ra,24(sp)          ; stack access
    0x8400901c    0x60    li a0,1
    0x8400901e    0x62    addi sp,sp,32
    0x84009020    0x64    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 47 nodes.

Section lookupExtraCaps (120 of 296)
====================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 62 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84008a38     0x0    beqz a1,ffffffff84008ad2 <lookupExtraCaps+0x9a>
    0x84008a3a     0x2    addi sp,sp,-112
    0x84008a3c     0x4    srli a2,a2,0x7
    0x84008a3e     0x6    sd s5,56(sp)          ; stack access
    0x84008a40     0x8    sd ra,104(sp)         ; stack access
    0x84008a42     0xa    sd s0,96(sp)          ; stack access
    0x84008a44     0xc    sd s1,88(sp)          ; stack access
    0x84008a46     0xe    sd s2,80(sp)          ; stack access
    0x84008a48    0x10    sd s3,72(sp)          ; stack access
    0x84008a4a    0x12    sd s4,64(sp)          ; stack access
    0x84008a4c    0x14    andi s5,a2,3
    0x84008a50    0x18    beqz s5,ffffffff84008ade <lookupExtraCaps+0xa6>
    0x84008a54    0x1c    andi s3,a0,-1024
    0x84008a58    0x20    addi s0,a1,976
    0x84008a5c    0x24    auipc s2,0x7
    0x84008a60    0x28    addi s2,s2,-92 # ffffffff8400fa00 <current_extra_caps>
    0x84008a64    0x2c    li s1,0
    0x84008a66    0x2e    j ffffffff84008a74 <lookupExtraCaps+0x3c>
    0x84008a68    0x30    sd a5,0(s2)
    0x84008a6c    0x34    addi s0,s0,8
    0x84008a6e    0x36    addi s2,s2,8
    0x84008a70    0x38    beq s1,s5,ffffffff84008ab8 <lookupExtraCaps+0x80>
    0x84008a74    0x3c    ld s4,0(s0)
    0x84008a78    0x40    ld a1,0(s3)
    0x84008a7c    0x44    ld a2,8(s3)
    0x84008a80    0x48    addi a0,sp,24
    0x84008a82    0x4a    li a4,64
    0x84008a86    0x4e    mv a3,s4
    0x84008a88    0x50    jal ra,ffffffff84004438 <resolveAddressBits>
    0x84008a8c    0x54    ld a0,24(sp)          ; stack access
    0x84008a8e    0x56    ld a5,32(sp)          ; stack access
    0x84008a90    0x58    addi s1,s1,1
    0x84008a92    0x5a    beqz a0,ffffffff84008a68 <lookupExtraCaps+0x30>
    0x84008a94    0x5c    auipc a5,0x7
    0x84008a98    0x60    addi a5,a5,1388 # ffffffff84010000 <intStateIRQNode>
    0x84008a9c    0x64    li a4,1
    0x84008a9e    0x66    sd a4,-1920(a5)
    0x84008aa2    0x6a    sd s4,-1912(a5)
    0x84008aa6    0x6e    ld ra,104(sp)         ; stack access
    0x84008aa8    0x70    ld s0,96(sp)          ; stack access
    0x84008aaa    0x72    ld s1,88(sp)          ; stack access
    0x84008aac    0x74    ld s2,80(sp)          ; stack access
    0x84008aae    0x76    ld s3,72(sp)          ; stack access
    0x84008ab0    0x78    ld s4,64(sp)          ; stack access
    0x84008ab2    0x7a    ld s5,56(sp)          ; stack access
    0x84008ab4    0x7c    addi sp,sp,112
    0x84008ab6    0x7e    ret
    0x84008ab8    0x80    li a5,3
    0x84008aba    0x82    beq s1,a5,ffffffff84008aa6 <lookupExtraCaps+0x6e>
    0x84008abe    0x86    slli s1,s1,0x3
    0x84008ac0    0x88    auipc a5,0x7
    0x84008ac4    0x8c    addi a5,a5,1344 # ffffffff84010000 <intStateIRQNode>
    0x84008ac8    0x90    add s1,s1,a5
    0x84008aca    0x92    sd zero,-1536(s1)
    0x84008ace    0x96    li a0,0
    0x84008ad0    0x98    j ffffffff84008aa6 <lookupExtraCaps+0x6e>
    0x84008ad2    0x9a    auipc a5,0x7
    0x84008ad6    0x9e    sd zero,-210(a5) # ffffffff8400fa00 <current_extra_caps>
    0x84008ada    0xa2    li a0,0
    0x84008adc    0xa4    ret
    0x84008ade    0xa6    li s1,0
    0x84008ae0    0xa8    j ffffffff84008abe <lookupExtraCaps+0x86>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 99 nodes.

Section performInvocation_Notification (121 of 296)
===================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x84008606    0x0    addi sp,sp,-16
    0x84008608    0x2    sd ra,8(sp)           ; stack access
    0x8400860a    0x4    jal ra,ffffffff8400830a <sendSignal>
    0x8400860e    0x8    ld ra,8(sp)           ; stack access
    0x84008610    0xa    li a0,0
    0x84008612    0xc    addi sp,sp,16
    0x84008614    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section decodeSchedControlInvocation (122 of 296)
=================================================

Deriving specifications
-----------------------

Section `decodeSchedControlInvocation` consists of 14 instructions.


Stack analysis
---------------

No stack accesses found. Code for `decodeSchedControlInvocation`:

    0x840080da     0x0    li a5,30
    0x840080dc     0x2    addi sp,sp,-16
    0x840080de     0x4    beq a0,a5,ffffffff840080f2 <decodeSchedControlInvocation+0x18>
    0x840080e2     0x8    li a5,3
    0x840080e4     0xa    auipc a4,0x7
    0x840080e8     0xe    sd a5,1500(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840080ec    0x12    li a0,3
    0x840080ee    0x14    addi sp,sp,16
    0x840080f0    0x16    ret
    0x840080f2    0x18    mv a1,a2
    0x840080f4    0x1a    mv a2,a4
    0x840080f6    0x1c    mv a0,a3
    0x840080f8    0x1e    addi sp,sp,16
    0x840080fa    0x20    j ffffffff84007d8c <decodeSchedControl_Configure.isra.0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSchedControlInvocation` has 19 nodes.

Section restart (123 of 296)
============================

Deriving specifications
-----------------------

Section `restart` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `restart`:

    0x84007d78     0x0    ld a5,280(a0)
    0x84007d7c     0x4    andi a5,a5,15
    0x84007d7e     0x6    beqz a5,ffffffff84007d88 <restart+0x10>
    0x84007d80     0x8    addi a5,a5,-3
    0x84007d82     0xa    li a4,3
    0x84007d84     0xc    bltu a4,a5,ffffffff84007d8a <restart+0x12>
    0x84007d88    0x10    j ffffffff84007cf2 <restart.part.0>
    0x84007d8a    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 15 nodes.

Section schedContext_resume (124 of 296)
========================================

Deriving specifications
-----------------------

Section `schedContext_resume` consists of 16 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_resume`:

    0x84007cca     0x0    beqz a0,ffffffff84007cdc <schedContext_resume+0x12>
    0x84007ccc     0x2    ld a4,24(a0)
    0x84007cce     0x4    li a3,1
    0x84007cd0     0x6    ld a5,280(a4)
    0x84007cd4     0xa    andi a5,a5,15
    0x84007cd6     0xc    addi a5,a5,-1
    0x84007cd8     0xe    bgeu a3,a5,ffffffff84007cde <schedContext_resume+0x14>
    0x84007cdc    0x12    ret
    0x84007cde    0x14    ld a5,368(a4)
    0x84007ce2    0x18    beqz a5,ffffffff84007cdc <schedContext_resume+0x12>
    0x84007ce4    0x1a    ld a5,64(a5)
    0x84007ce6    0x1c    beqz a5,ffffffff84007cdc <schedContext_resume+0x12>
    0x84007ce8    0x1e    ld a5,288(a4)
    0x84007cec    0x22    andi a5,a5,1
    0x84007cee    0x24    bnez a5,ffffffff84007cdc <schedContext_resume+0x12>
    0x84007cf0    0x26    j ffffffff84007c78 <schedContext_resume.part.0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_resume` has 33 nodes.

Section tcbSchedDequeue (125 of 296)
====================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 6 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x84007b38    0x0    ld a5,288(a0)
    0x84007b3c    0x4    srli a5,a5,0x1
    0x84007b3e    0x6    andi a5,a5,1
    0x84007b40    0x8    beqz a5,ffffffff84007b46 <tcbSchedDequeue+0xe>
    0x84007b42    0xa    j ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84007b46    0xe    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 11 nodes.

Section tcbSchedEnqueue (126 of 296)
====================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 6 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x84007a94    0x0    ld a5,288(a0)
    0x84007a98    0x4    srli a5,a5,0x1
    0x84007a9a    0x6    andi a5,a5,1
    0x84007a9c    0x8    bnez a5,ffffffff84007aa2 <tcbSchedEnqueue+0xe>
    0x84007a9e    0xa    j ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x84007aa2    0xe    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 11 nodes.

Section invokeIRQHandler_ClearIRQHandler (127 of 296)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_ClearIRQHandler`:

    0x84007936     0x0    auipc a5,0x8
    0x8400793a     0x4    addi a5,a5,1738 # ffffffff84010000 <intStateIRQNode>
    0x8400793e     0x8    slli a0,a0,0x5
    0x84007940     0xa    add a0,a0,a5
    0x84007942     0xc    ld a5,0(a0)
    0x84007944     0xe    srli a5,a5,0x3b
    0x84007946    0x10    bnez a5,ffffffff8400794a <invokeIRQHandler_ClearIRQHandler+0x14>
    0x84007948    0x12    ret
    0x8400794a    0x14    j ffffffff840078a2 <cteDeleteOne.part.0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 14 nodes.

Section deletingIRQHandler (128 of 296)
=======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `deletingIRQHandler`:

    0x840078d6     0x0    auipc a5,0x8
    0x840078da     0x4    addi a5,a5,1834 # ffffffff84010000 <intStateIRQNode>
    0x840078de     0x8    slli a0,a0,0x5
    0x840078e0     0xa    add a0,a0,a5
    0x840078e2     0xc    ld a5,0(a0)
    0x840078e4     0xe    srli a5,a5,0x3b
    0x840078e6    0x10    bnez a5,ffffffff840078ea <deletingIRQHandler+0x14>
    0x840078e8    0x12    ret
    0x840078ea    0x14    j ffffffff840078a2 <cteDeleteOne.part.0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 14 nodes.

Section cteDeleteOne (129 of 296)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `cteDeleteOne`:

    0x840078cc    0x0    ld a5,0(a0)
    0x840078ce    0x2    srli a5,a5,0x3b
    0x840078d0    0x4    bnez a5,ffffffff840078d4 <cteDeleteOne+0x8>
    0x840078d2    0x6    ret
    0x840078d4    0x8    j ffffffff840078a2 <cteDeleteOne.part.0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 10 nodes.

Section reply_remove_tcb (130 of 296)
=====================================

Deriving specifications
-----------------------

Section `reply_remove_tcb` consists of 60 instructions.


Stack analysis
---------------

No stack accesses found. Code for `reply_remove_tcb`:

    0x84006f08     0x0    ld t3,288(a0)
    0x84006f0c     0x4    lui a2,0xe0000
    0x84006f10     0x8    srli a2,a2,0x19
    0x84006f12     0xa    srli a5,t3,0x1
    0x84006f16     0xe    srli a3,a5,0x26
    0x84006f1a    0x12    andi a3,a3,1
    0x84006f1c    0x14    and a5,a5,a2
    0x84006f1e    0x16    beqz a3,ffffffff84006f26 <reply_remove_tcb+0x1e>
    0x84006f20    0x18    li a3,-1
    0x84006f22    0x1a    slli a3,a3,0x27
    0x84006f24    0x1c    or a5,a5,a3
    0x84006f26    0x1e    ld a1,16(a5)
    0x84006f28    0x20    ld a6,8(a5)
    0x84006f2c    0x24    li a7,1
    0x84006f2e    0x26    slli a7,a7,0x26
    0x84006f30    0x28    li a2,-1
    0x84006f32    0x2a    srli a3,a2,0x19
    0x84006f36    0x2e    and a4,a1,a7
    0x84006f3a    0x32    and t1,a1,a3
    0x84006f3e    0x36    and a3,a6,a3
    0x84006f42    0x3a    and a6,a6,a7
    0x84006f46    0x3e    beqz a4,ffffffff84006fb6 <reply_remove_tcb+0xae>
    0x84006f48    0x40    slli a2,a2,0x27
    0x84006f4a    0x42    or t1,t1,a2
    0x84006f4e    0x46    beqz a6,ffffffff84006f54 <reply_remove_tcb+0x4c>
    0x84006f52    0x4a    or a3,a3,a2
    0x84006f54    0x4c    srli a1,a1,0x30
    0x84006f56    0x4e    andi a1,a1,1
    0x84006f58    0x50    beqz a1,ffffffff84006f94 <reply_remove_tcb+0x8c>
    0x84006f5a    0x52    sd zero,32(t1)
    0x84006f5e    0x56    bnez a3,ffffffff84006fb0 <reply_remove_tcb+0xa8>
    0x84006f60    0x58    li a4,-1
    0x84006f62    0x5a    slli a4,a4,0x28
    0x84006f64    0x5c    ld a3,280(a0)
    0x84006f68    0x60    addi a4,a4,31
    0x84006f6a    0x62    sd zero,8(a5)
    0x84006f6e    0x66    sd zero,16(a5)
    0x84006f72    0x6a    and a4,t3,a4
    0x84006f76    0x6e    sd a4,288(a0)
    0x84006f7a    0x72    sd zero,0(a5)
    0x84006f7e    0x76    andi a5,a3,-16
    0x84006f82    0x7a    sd a5,280(a0)
    0x84006f86    0x7e    auipc a5,0x1b
    0x84006f8a    0x82    ld a5,-1838(a5) # ffffffff84021858 <ksCurThread>
    0x84006f8e    0x86    beq a0,a5,ffffffff84006f9a <reply_remove_tcb+0x92>
    0x84006f92    0x8a    ret
    0x84006f94    0x8c    sd zero,8(t1)
    0x84006f98    0x90    j ffffffff84006f5e <reply_remove_tcb+0x56>
    0x84006f9a    0x92    auipc a5,0x1b
    0x84006f9e    0x96    ld a5,-1874(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84006fa2    0x9a    bnez a5,ffffffff84006f92 <reply_remove_tcb+0x8a>
    0x84006fa4    0x9c    j ffffffff84004c1c <rescheduleRequired>
    0x84006fa8    0xa0    slli a2,a2,0x27
    0x84006faa    0xa2    or a3,a3,a2
    0x84006fac    0xa4    bnez t1,ffffffff84006f54 <reply_remove_tcb+0x4c>
    0x84006fb0    0xa8    sd zero,16(a3)
    0x84006fb4    0xac    j ffffffff84006f60 <reply_remove_tcb+0x58>
    0x84006fb6    0xae    bnez a6,ffffffff84006fa8 <reply_remove_tcb+0xa0>
    0x84006fba    0xb2    beqz t1,ffffffff84006f5e <reply_remove_tcb+0x56>
    0x84006fbe    0xb6    j ffffffff84006f54 <reply_remove_tcb+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_remove_tcb` has 96 nodes.

Section createObject (131 of 296)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 119 instructions.

RVC_FTTFT____T____FT.

Stack analysis
---------------

No stack accesses found. Code for `createObject`:

    0x84006d06      0x0    li t1,6
    0x84006d08      0x2    bltu t1,a0,ffffffff84006d2a <createObject+0x24>
    0x84006d0c      0x6    mv a7,a3
    0x84006d0e      0x8    slli a4,a0,0x2
    0x84006d12      0xc    auipc a3,0x7
    0x84006d16     0x10    addi a3,a3,-282 # ffffffff8400dbf8 <msgRegisters+0x4b0>
    0x84006d1a     0x14    add a4,a4,a3
    0x84006d1c     0x16    lw a4,0(a4)
    0x84006d1e     0x18    mv a6,a2
    0x84006d20     0x1a    addi sp,sp,-16
    0x84006d22     0x1c    add a4,a4,a3
    0x84006d24     0x1e    mv a5,a1
    0x84006d26     0x20    mv a2,a1
    0x84006d28     0x22    jr a4
    0x84006d2a     0x24    j ffffffff840043b0 <Arch_createObject>
    0x84006d2e     0x28    li a4,17
    0x84006d30     0x2a    slli a4,a4,0x3a
    0x84006d32     0x2c    sd a4,0(sp)
    0x84006d34     0x2e    sd a1,8(sp)
    0x84006d36     0x30    sd zero,0(a1)
    0x84006d3a     0x34    sd zero,8(a1)
    0x84006d3e     0x38    sd zero,16(a1)
    0x84006d42     0x3c    sd zero,24(a1)
    0x84006d46     0x40    ld a0,0(sp)
    0x84006d48     0x42    ld a1,8(sp)
    0x84006d4a     0x44    addi sp,sp,16
    0x84006d4c     0x46    ret
    0x84006d4e     0x48    addi a5,a1,512
    0x84006d52     0x4c    slli a4,a5,0x19
    0x84006d56     0x50    li a3,3
    0x84006d58     0x52    slli a3,a3,0x3d
    0x84006d5a     0x54    srli a4,a4,0x19
    0x84006d5c     0x56    or a4,a4,a3
    0x84006d5e     0x58    li a3,32
    0x84006d62     0x5c    sd a3,256(a5)
    0x84006d66     0x60    auipc a3,0x1b
    0x84006d6a     0x64    ld a3,-1358(a3) # ffffffff84021818 <ksCurDomain>
    0x84006d6e     0x68    sd a4,0(sp)
    0x84006d70     0x6a    sd zero,8(sp)
    0x84006d72     0x6c    sd a3,344(a5)
    0x84006d76     0x70    ld a0,0(sp)
    0x84006d78     0x72    ld a1,8(sp)
    0x84006d7a     0x74    addi sp,sp,16
    0x84006d7c     0x76    ret
    0x84006d7e     0x78    slli a5,a1,0x19
    0x84006d82     0x7c    li a4,79
    0x84006d86     0x80    srli a5,a5,0x19
    0x84006d88     0x82    slli a4,a4,0x37
    0x84006d8a     0x84    or a5,a5,a4
    0x84006d8c     0x86    sd a5,0(sp)
    0x84006d8e     0x88    sd zero,8(sp)
    0x84006d90     0x8a    ld a0,0(sp)
    0x84006d92     0x8c    ld a1,8(sp)
    0x84006d94     0x8e    addi sp,sp,16
    0x84006d96     0x90    ret
    0x84006d98     0x92    slli a5,a1,0x19
    0x84006d9c     0x96    li a4,27
    0x84006d9e     0x98    srli a5,a5,0x19
    0x84006da0     0x9a    slli a4,a4,0x39
    0x84006da2     0x9c    or a5,a5,a4
    0x84006da4     0x9e    sd a5,0(sp)
    0x84006da6     0xa0    sd zero,8(sp)
    0x84006da8     0xa2    ld a0,0(sp)
    0x84006daa     0xa4    ld a1,8(sp)
    0x84006dac     0xa6    addi sp,sp,16
    0x84006dae     0xa8    ret
    0x84006db0     0xaa    slli a5,a1,0x19
    0x84006db4     0xae    andi a2,a6,63
    0x84006db8     0xb2    slli a2,a2,0x2f
    0x84006dba     0xb4    srli a5,a5,0x1a
    0x84006dbc     0xb6    li a4,5
    0x84006dbe     0xb8    or a5,a5,a2
    0x84006dc0     0xba    slli a4,a4,0x3c
    0x84006dc2     0xbc    or a5,a5,a4
    0x84006dc4     0xbe    sd a5,0(sp)
    0x84006dc6     0xc0    sd zero,8(sp)
    0x84006dc8     0xc2    ld a0,0(sp)
    0x84006dca     0xc4    ld a1,8(sp)
    0x84006dcc     0xc6    addi sp,sp,16
    0x84006dce     0xc8    ret
    0x84006dd0     0xca    li a3,1
    0x84006dd2     0xcc    sll a3,a3,a6
    0x84006dd6     0xd0    add a4,a1,a3
    0x84006dda     0xd4    beqz a3,ffffffff84006de6 <createObject+0xe0>
    0x84006ddc     0xd6    sd zero,0(a5)
    0x84006de0     0xda    addi a5,a5,8
    0x84006de2     0xdc    bne a5,a4,ffffffff84006ddc <createObject+0xd6>
    0x84006de6     0xe0    slli a5,a2,0x10
    0x84006dea     0xe4    lui a4,0xfe000
    0x84006dee     0xe8    slli a2,a6,0xa
    0x84006df2     0xec    lui a6,0x10
    0x84006df4     0xee    srli a4,a4,0x9
    0x84006df6     0xf0    addi a6,a6,-1
    0x84006df8     0xf2    and a5,a5,a4
    0x84006dfa     0xf4    and a2,a2,a6
    0x84006dfe     0xf8    or a2,a2,a5
    0x84006e00     0xfa    li a5,-5
    0x84006e02     0xfc    slli a5,a5,0x3c
    0x84006e04     0xfe    sd a5,0(sp)
    0x84006e06    0x100    sd a2,8(sp)
    0x84006e08    0x102    ld a0,0(sp)
    0x84006e0a    0x104    ld a1,8(sp)
    0x84006e0c    0x106    addi sp,sp,16
    0x84006e0e    0x108    ret
    0x84006e10    0x10a    slli a5,a1,0x19
    0x84006e14    0x10e    snez a3,a7
    0x84006e18    0x112    li a4,1
    0x84006e1a    0x114    srli a5,a5,0x19
    0x84006e1c    0x116    slli a3,a3,0x6
    0x84006e1e    0x118    andi a2,a6,63
    0x84006e22    0x11c    slli a4,a4,0x3c
    0x84006e24    0x11e    or a5,a5,a4
    0x84006e26    0x120    or a2,a2,a3
    0x84006e28    0x122    sd a5,0(sp)
    0x84006e2a    0x124    sd a2,8(sp)
    0x84006e2c    0x126    ld a0,0(sp)
    0x84006e2e    0x128    ld a1,8(sp)
    0x84006e30    0x12a    addi sp,sp,16
    0x84006e32    0x12c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
119 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 171 nodes.

Section Arch_decodeInvocation (132 of 296)
==========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeInvocation`:

    0x84006b6c    0x0    addi sp,sp,-16
    0x84006b6e    0x2    mv a6,a7
    0x84006b70    0x4    addi sp,sp,16
    0x84006b72    0x6    j ffffffff840062b8 <decodeRISCVMMUInvocation>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 5 nodes.

Section slotCapLongRunningDelete (133 of 296)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x8400627a     0x0    addi sp,sp,-16
    0x8400627c     0x2    sd s0,0(sp)           ; stack access
    0x8400627e     0x4    ld s0,0(a0)
    0x84006280     0x6    sd ra,8(sp)           ; stack access
    0x84006282     0x8    srli s0,s0,0x3b
    0x84006284     0xa    beqz s0,ffffffff840062a2 <slotCapLongRunningDelete+0x28>
    0x84006286     0xc    jal ra,ffffffff8400621a <isFinalCapability>
    0x8400628a    0x10    beqz a0,ffffffff840062ac <slotCapLongRunningDelete+0x32>
    0x8400628c    0x12    addi s0,s0,-10
    0x8400628e    0x14    li a5,8
    0x84006290    0x16    bltu a5,s0,ffffffff840062ac <slotCapLongRunningDelete+0x32>
    0x84006294    0x1a    li a5,1
    0x84006296    0x1c    sll s0,a5,s0
    0x8400629a    0x20    andi s0,s0,261
    0x8400629e    0x24    snez s0,s0
    0x840062a2    0x28    ld ra,8(sp)           ; stack access
    0x840062a4    0x2a    mv a0,s0
    0x840062a6    0x2c    ld s0,0(sp)           ; stack access
    0x840062a8    0x2e    addi sp,sp,16
    0x840062aa    0x30    ret
    0x840062ac    0x32    li s0,0
    0x840062ae    0x34    ld ra,8(sp)           ; stack access
    0x840062b0    0x36    mv a0,s0
    0x840062b2    0x38    ld s0,0(sp)           ; stack access
    0x840062b4    0x3a    addi sp,sp,16
    0x840062b6    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 42 nodes.

Section isFinalCapability (134 of 296)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 43 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `isFinalCapability`:

    0x8400621a     0x0    ld a5,16(a0)
    0x8400621c     0x2    addi sp,sp,-32
    0x8400621e     0x4    sd s0,16(sp)          ; stack access
    0x84006220     0x6    sd s1,8(sp)           ; stack access
    0x84006222     0x8    sd ra,24(sp)          ; stack access
    0x84006224     0xa    ld s1,24(a0)
    0x84006226     0xc    mv s0,a0
    0x84006228     0xe    beqz a5,ffffffff8400623c <isFinalCapability+0x22>
    0x8400622a    0x10    ld a2,0(a0)
    0x8400622c    0x12    ld a3,8(a0)
    0x8400622e    0x14    ld a1,8(a5)
    0x84006230    0x16    ld a0,0(a5)
    0x84006232    0x18    jal ra,ffffffff840061d4 <sameObjectAs>
    0x84006236    0x1c    mv a5,a0
    0x84006238    0x1e    li a0,0
    0x8400623a    0x20    bnez a5,ffffffff84006262 <isFinalCapability+0x48>
    0x8400623c    0x22    srli a4,s1,0x26
    0x84006240    0x26    lui a5,0xf8000
    0x84006244    0x2a    srli a5,a5,0x19
    0x84006246    0x2c    andi a4,a4,1
    0x84006248    0x2e    and a5,a5,s1
    0x8400624a    0x30    beqz a4,ffffffff8400626c <isFinalCapability+0x52>
    0x8400624c    0x32    li a4,-1
    0x8400624e    0x34    slli a4,a4,0x27
    0x84006250    0x36    or a5,a5,a4
    0x84006252    0x38    ld a2,0(a5)
    0x84006254    0x3a    ld a3,8(a5)
    0x84006256    0x3c    ld a0,0(s0)
    0x84006258    0x3e    ld a1,8(s0)
    0x8400625a    0x40    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400625e    0x44    seqz a0,a0
    0x84006262    0x48    ld ra,24(sp)          ; stack access
    0x84006264    0x4a    ld s0,16(sp)          ; stack access
    0x84006266    0x4c    ld s1,8(sp)           ; stack access
    0x84006268    0x4e    addi sp,sp,32
    0x8400626a    0x50    ret
    0x8400626c    0x52    li a0,1
    0x8400626e    0x54    bnez a5,ffffffff84006252 <isFinalCapability+0x38>
    0x84006270    0x56    ld ra,24(sp)          ; stack access
    0x84006272    0x58    ld s0,16(sp)          ; stack access
    0x84006274    0x5a    ld s1,8(sp)           ; stack access
    0x84006276    0x5c    addi sp,sp,32
    0x84006278    0x5e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 74 nodes.

Section ensureNoChildren (135 of 296)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 30 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `ensureNoChildren`:

    0x84006100     0x0    ld a1,24(a0)
    0x84006102     0x2    lui a4,0xf8000
    0x84006106     0x6    srli a4,a4,0x19
    0x84006108     0x8    srli a5,a1,0x26
    0x8400610c     0xc    andi a5,a5,1
    0x8400610e     0xe    and a1,a1,a4
    0x84006110    0x10    beqz a5,ffffffff8400612c <ensureNoChildren+0x2c>
    0x84006112    0x12    li a5,-1
    0x84006114    0x14    slli a5,a5,0x27
    0x84006116    0x16    or a1,a1,a5
    0x84006118    0x18    addi sp,sp,-16
    0x8400611a    0x1a    sd ra,8(sp)           ; stack access
    0x8400611c    0x1c    jal ra,ffffffff84006096 <isMDBParentOf>
    0x84006120    0x20    mv a1,a0
    0x84006122    0x22    bnez a0,ffffffff84006132 <ensureNoChildren+0x32>
    0x84006124    0x24    ld ra,8(sp)           ; stack access
    0x84006126    0x26    mv a0,a1
    0x84006128    0x28    addi sp,sp,16
    0x8400612a    0x2a    ret
    0x8400612c    0x2c    bnez a1,ffffffff84006118 <ensureNoChildren+0x18>
    0x8400612e    0x2e    mv a0,a1
    0x84006130    0x30    ret
    0x84006132    0x32    ld ra,8(sp)           ; stack access
    0x84006134    0x34    li a5,9
    0x84006136    0x36    auipc a4,0x9
    0x8400613a    0x3a    sd a5,1418(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400613e    0x3e    li a1,3
    0x84006140    0x40    mv a0,a1
    0x84006142    0x42    addi sp,sp,16
    0x84006144    0x44    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 45 nodes.

Section isMDBParentOf (136 of 296)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 46 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `isMDBParentOf`:

    0x84006096     0x0    addi sp,sp,-32
    0x84006098     0x2    sd s0,16(sp)          ; stack access
    0x8400609a     0x4    ld s0,24(a0)
    0x8400609c     0x6    sd ra,24(sp)          ; stack access
    0x8400609e     0x8    sd s1,8(sp)           ; stack access
    0x840060a0     0xa    srli s0,s0,0x1
    0x840060a2     0xc    sd s2,0(sp)           ; stack access
    0x840060a4     0xe    andi s0,s0,1
    0x840060a6    0x10    beqz s0,ffffffff840060e2 <isMDBParentOf+0x4c>
    0x840060a8    0x12    mv s1,a0
    0x840060aa    0x14    ld a2,0(a1)
    0x840060ac    0x16    ld a3,8(a1)
    0x840060ae    0x18    mv s2,a1
    0x840060b0    0x1a    ld a0,0(a0)
    0x840060b2    0x1c    ld a1,8(s1)
    0x840060b4    0x1e    jal ra,ffffffff84005d84 <sameRegionAs>
    0x840060b8    0x22    beqz a0,ffffffff840060f0 <isMDBParentOf+0x5a>
    0x840060ba    0x24    ld a5,0(s1)
    0x840060bc    0x26    li a4,4
    0x840060be    0x28    srli a5,a5,0x3b
    0x840060c0    0x2a    beq a5,a4,ffffffff840060ca <isMDBParentOf+0x34>
    0x840060c4    0x2e    li a4,6
    0x840060c6    0x30    bne a5,a4,ffffffff840060e2 <isMDBParentOf+0x4c>
    0x840060ca    0x34    ld a5,8(s1)
    0x840060cc    0x36    beqz a5,ffffffff840060e2 <isMDBParentOf+0x4c>
    0x840060ce    0x38    ld a4,8(s2)
    0x840060d2    0x3c    li s0,0
    0x840060d4    0x3e    bne a5,a4,ffffffff840060e2 <isMDBParentOf+0x4c>
    0x840060d8    0x42    ld s0,24(s2)
    0x840060dc    0x46    not s0,s0
    0x840060e0    0x4a    andi s0,s0,1
    0x840060e2    0x4c    ld ra,24(sp)          ; stack access
    0x840060e4    0x4e    mv a0,s0
    0x840060e6    0x50    ld s0,16(sp)          ; stack access
    0x840060e8    0x52    ld s1,8(sp)           ; stack access
    0x840060ea    0x54    ld s2,0(sp)           ; stack access
    0x840060ec    0x56    addi sp,sp,32
    0x840060ee    0x58    ret
    0x840060f0    0x5a    li s0,0
    0x840060f2    0x5c    ld ra,24(sp)          ; stack access
    0x840060f4    0x5e    mv a0,s0
    0x840060f6    0x60    ld s0,16(sp)          ; stack access
    0x840060f8    0x62    ld s1,8(sp)           ; stack access
    0x840060fa    0x64    ld s2,0(sp)           ; stack access
    0x840060fc    0x66    addi sp,sp,32
    0x840060fe    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 82 nodes.

Section getObjectSize (137 of 296)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 33 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `getObjectSize`:

    0x84005cfc     0x0    li a5,6
    0x84005cfe     0x2    bgeu a5,a0,ffffffff84005d1a <getObjectSize+0x1e>
    0x84005d02     0x6    addi a0,a0,-7
    0x84005d04     0x8    li a5,3
    0x84005d06     0xa    bltu a5,a0,ffffffff84005d48 <getObjectSize+0x4c>
    0x84005d0a     0xe    auipc a5,0x8
    0x84005d0e    0x12    addi a5,a5,230 # ffffffff8400ddf0 <syscall_fault_message>
    0x84005d12    0x16    slli a0,a0,0x3
    0x84005d14    0x18    add a0,a0,a5
    0x84005d16    0x1a    ld a0,48(a0)
    0x84005d18    0x1c    ret
    0x84005d1a    0x1e    auipc a4,0x8
    0x84005d1e    0x22    addi a4,a4,-718 # ffffffff8400da4c <msgRegisters+0x304>
    0x84005d22    0x26    slli a5,a0,0x2
    0x84005d26    0x2a    add a5,a5,a4
    0x84005d28    0x2c    lw a5,0(a5)
    0x84005d2a    0x2e    add a5,a5,a4
    0x84005d2c    0x30    jr a5
    0x84005d2e    0x32    li a0,10
    0x84005d30    0x34    ret
    0x84005d32    0x36    li a0,4
    0x84005d34    0x38    ret
    0x84005d36    0x3a    li a0,5
    0x84005d38    0x3c    ret
    0x84005d3a    0x3e    li a0,6
    0x84005d3c    0x40    ret
    0x84005d3e    0x42    addi a0,a1,5
    0x84005d42    0x46    ret
    0x84005d44    0x48    mv a0,a1
    0x84005d46    0x4a    ret
    0x84005d48    0x4c    addi sp,sp,-16
    0x84005d4a    0x4e    sd ra,8(sp)           ; stack access
    0x84005d4c    0x50    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
33 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 49 nodes.

Section cancelSignal (138 of 296)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 53 instructions.


Stack analysis
---------------

No stack accesses found. Code for `cancelSignal`:

    0x84005a96     0x0    ld a3,8(a1)
    0x84005a98     0x2    li a2,-1
    0x84005a9a     0x4    srli a4,a2,0x19
    0x84005a9e     0x8    srli a6,a3,0x26
    0x84005aa2     0xc    andi a6,a6,1
    0x84005aa6    0x10    ld a5,0(a1)
    0x84005aa8    0x12    and a4,a4,a3
    0x84005aaa    0x14    beqz a6,ffffffff84005ab2 <cancelSignal+0x1c>
    0x84005aae    0x18    slli a2,a2,0x27
    0x84005ab0    0x1a    or a4,a4,a2
    0x84005ab2    0x1c    srli a2,a5,0x19
    0x84005ab6    0x20    bgez a5,ffffffff84005ac2 <cancelSignal+0x2c>
    0x84005aba    0x24    li a6,-1
    0x84005abc    0x26    slli a6,a6,0x27
    0x84005abe    0x28    or a2,a2,a6
    0x84005ac2    0x2c    ld a7,416(a0)
    0x84005ac6    0x30    ld a6,408(a0)
    0x84005aca    0x34    beqz a7,ffffffff84005b2e <cancelSignal+0x98>
    0x84005ace    0x38    mv t1,a4
    0x84005ad0    0x3a    sd a6,408(a7)
    0x84005ad4    0x3e    beqz a6,ffffffff84005b2a <cancelSignal+0x94>
    0x84005ad8    0x42    sd a7,416(a6)
    0x84005adc    0x46    li a6,-1
    0x84005ade    0x48    slli a7,a6,0x27
    0x84005ae2    0x4c    srli a6,a6,0x19
    0x84005ae6    0x50    and a3,a3,a7
    0x84005aea    0x54    and a4,a4,a6
    0x84005aee    0x58    or a4,a4,a3
    0x84005af0    0x5a    slli a5,a5,0x27
    0x84005af2    0x5c    srli a5,a5,0x27
    0x84005af4    0x5e    slli a2,a2,0x19
    0x84005af6    0x60    sd a4,8(a1)
    0x84005af8    0x62    or a5,a5,a2
    0x84005afa    0x64    beqz t1,ffffffff84005b26 <cancelSignal+0x90>
    0x84005afe    0x68    sd a5,0(a1)
    0x84005b00    0x6a    ld a5,280(a0)
    0x84005b04    0x6e    auipc a4,0x1c
    0x84005b08    0x72    ld a4,-684(a4) # ffffffff84021858 <ksCurThread>
    0x84005b0c    0x76    andi a5,a5,-16
    0x84005b0e    0x78    sd a5,280(a0)
    0x84005b12    0x7c    beq a0,a4,ffffffff84005b18 <cancelSignal+0x82>
    0x84005b16    0x80    ret
    0x84005b18    0x82    auipc a5,0x1c
    0x84005b1c    0x86    ld a5,-720(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84005b20    0x8a    bnez a5,ffffffff84005b16 <cancelSignal+0x80>
    0x84005b22    0x8c    j ffffffff84004c1c <rescheduleRequired>
    0x84005b26    0x90    andi a5,a5,-4
    0x84005b28    0x92    j ffffffff84005afe <cancelSignal+0x68>
    0x84005b2a    0x94    mv a2,a7
    0x84005b2c    0x96    j ffffffff84005adc <cancelSignal+0x46>
    0x84005b2e    0x98    mv a4,a6
    0x84005b30    0x9a    mv t1,a6
    0x84005b32    0x9c    j ffffffff84005ad4 <cancelSignal+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
53 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 81 nodes.

Section Arch_decodeIRQControlInvocation (139 of 296)
====================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeIRQControlInvocation`:

    0x840057dc     0x0    li a4,43
    0x840057e0     0x4    mv a5,a1
    0x840057e2     0x6    mv a1,a2
    0x840057e4     0x8    bne a0,a4,ffffffff840057ec <Arch_decodeIRQControlInvocation+0x10>
    0x840057e8     0xc    mv a0,a5
    0x840057ea     0xe    j ffffffff840056e4 <Arch_decodeIRQControlInvocation.part.0>
    0x840057ec    0x10    li a5,3
    0x840057ee    0x12    auipc a4,0xa
    0x840057f2    0x16    sd a5,-302(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840057f6    0x1a    li a0,3
    0x840057f8    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 16 nodes.

Section invokeCNodeCancelBadgedSends (140 of 296)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 18 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x8400557e     0x0    beqz a1,ffffffff840055a4 <invokeCNodeCancelBadgedSends+0x26>
    0x84005580     0x2    srli a4,a0,0x26
    0x84005584     0x6    addi sp,sp,-32
    0x84005586     0x8    li a5,-1
    0x84005588     0xa    srli a3,a5,0x19
    0x8400558c     0xe    sd ra,24(sp)          ; stack access
    0x8400558e    0x10    andi a4,a4,1
    0x84005590    0x12    and a0,a0,a3
    0x84005592    0x14    beqz a4,ffffffff84005598 <invokeCNodeCancelBadgedSends+0x1a>
    0x84005594    0x16    slli a5,a5,0x27
    0x84005596    0x18    or a0,a0,a5
    0x84005598    0x1a    jal ra,ffffffff84005414 <cancelBadgedSends>
    0x8400559c    0x1e    ld ra,24(sp)          ; stack access
    0x8400559e    0x20    li a0,0
    0x840055a0    0x22    addi sp,sp,32
    0x840055a2    0x24    ret
    0x840055a4    0x26    li a0,0
    0x840055a6    0x28    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 27 nodes.

Section capSwapForDelete (141 of 296)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 12 instructions.


Stack analysis
---------------

No stack accesses found. Code for `capSwapForDelete`:

    0x840051dc     0x0    addi sp,sp,-32
    0x840051de     0x2    beq a0,a1,ffffffff840051f2 <capSwapForDelete+0x16>
    0x840051e2     0x6    mv a2,a0
    0x840051e4     0x8    ld a3,0(a1)
    0x840051e6     0xa    ld a4,8(a1)
    0x840051e8     0xc    ld a0,0(a0)
    0x840051ea     0xe    mv a5,a1
    0x840051ec    0x10    ld a1,8(a2)
    0x840051ee    0x12    addi sp,sp,32
    0x840051f0    0x14    j ffffffff8400504c <cteSwap>
    0x840051f2    0x16    addi sp,sp,32
    0x840051f4    0x18    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 20 nodes.

Section invokeCNodeRotate (142 of 296)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 93 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x840050e6     0x0    addi sp,sp,-48
    0x840050e8     0x2    sd ra,40(sp)          ; stack access
    0x840050ea     0x4    sd a0,16(sp)          ; stack access
    0x840050ec     0x6    sd a1,24(sp)          ; stack access
    0x840050ee     0x8    sd a2,0(sp)           ; stack access
    0x840050f0     0xa    sd a3,8(sp)           ; stack access
    0x840050f2     0xc    mv t1,a4
    0x840050f4     0xe    beq a4,a6,ffffffff840051ca <invokeCNodeRotate+0xe4>
    0x840050f8    0x12    ld a4,16(a5)
    0x840050fa    0x14    mv a7,a5
    0x840050fc    0x16    ld a5,24(a5)
    0x840050fe    0x18    sd a2,0(a6)
    0x84005102    0x1c    sd a3,8(a6)
    0x84005106    0x20    sd zero,0(a7)
    0x8400510a    0x24    sd zero,8(a7)
    0x8400510e    0x28    sd a4,16(a6)
    0x84005112    0x2c    sd a5,24(a6)
    0x84005116    0x30    sd zero,16(a7)
    0x8400511a    0x34    sd zero,24(a7)
    0x8400511e    0x38    bnez a4,ffffffff840051a2 <invokeCNodeRotate+0xbc>
    0x84005120    0x3a    srli a4,a5,0x26
    0x84005124    0x3e    lui a3,0xf8000
    0x84005128    0x42    srli a3,a3,0x19
    0x8400512a    0x44    andi a4,a4,1
    0x8400512c    0x46    and a5,a5,a3
    0x8400512e    0x48    beqz a4,ffffffff840051c6 <invokeCNodeRotate+0xe0>
    0x84005130    0x4a    li a4,-1
    0x84005132    0x4c    slli a4,a4,0x27
    0x84005134    0x4e    or a5,a5,a4
    0x84005136    0x50    sd a6,16(a5)
    0x8400513a    0x54    ld a3,16(sp)          ; stack access
    0x8400513c    0x56    ld a4,16(t1)
    0x84005140    0x5a    ld a5,24(t1)
    0x84005144    0x5e    sd a3,0(a7)
    0x84005148    0x62    ld a3,24(sp)          ; stack access
    0x8400514a    0x64    sd a3,8(a7)
    0x8400514e    0x68    sd zero,0(t1)
    0x84005152    0x6c    sd zero,8(t1)
    0x84005156    0x70    sd a4,16(a7)
    0x8400515a    0x74    sd a5,24(a7)
    0x8400515e    0x78    sd zero,16(t1)
    0x84005162    0x7c    sd zero,24(t1)
    0x84005166    0x80    beqz a4,ffffffff84005180 <invokeCNodeRotate+0x9a>
    0x84005168    0x82    ld a3,24(a4)
    0x8400516a    0x84    li a2,-1
    0x8400516c    0x86    slli a2,a2,0x27
    0x8400516e    0x88    addi a2,a2,3
    0x84005170    0x8a    and a3,a3,a2
    0x84005172    0x8c    lui a2,0xf8000
    0x84005176    0x90    srli a2,a2,0x19
    0x84005178    0x92    and a2,a7,a2
    0x8400517c    0x96    or a3,a3,a2
    0x8400517e    0x98    sd a3,24(a4)
    0x84005180    0x9a    srli a4,a5,0x26
    0x84005184    0x9e    lui a3,0xf8000
    0x84005188    0xa2    srli a3,a3,0x19
    0x8400518a    0xa4    andi a4,a4,1
    0x8400518c    0xa6    and a5,a5,a3
    0x8400518e    0xa8    beqz a4,ffffffff840051bc <invokeCNodeRotate+0xd6>
    0x84005190    0xaa    li a4,-1
    0x84005192    0xac    slli a4,a4,0x27
    0x84005194    0xae    or a5,a5,a4
    0x84005196    0xb0    ld ra,40(sp)          ; stack access
    0x84005198    0xb2    sd a7,16(a5)
    0x8400519c    0xb6    li a0,0
    0x8400519e    0xb8    addi sp,sp,48
    0x840051a0    0xba    ret
    0x840051a2    0xbc    ld a3,24(a4)
    0x840051a4    0xbe    li a2,-1
    0x840051a6    0xc0    slli a2,a2,0x27
    0x840051a8    0xc2    addi a2,a2,3
    0x840051aa    0xc4    and a3,a3,a2
    0x840051ac    0xc6    lui a2,0xf8000
    0x840051b0    0xca    srli a2,a2,0x19
    0x840051b2    0xcc    and a2,a6,a2
    0x840051b6    0xd0    or a3,a3,a2
    0x840051b8    0xd2    sd a3,24(a4)
    0x840051ba    0xd4    j ffffffff84005120 <invokeCNodeRotate+0x3a>
    0x840051bc    0xd6    bnez a5,ffffffff84005196 <invokeCNodeRotate+0xb0>
    0x840051be    0xd8    ld ra,40(sp)          ; stack access
    0x840051c0    0xda    li a0,0
    0x840051c2    0xdc    addi sp,sp,48
    0x840051c4    0xde    ret
    0x840051c6    0xe0    beqz a5,ffffffff8400513a <invokeCNodeRotate+0x54>
    0x840051c8    0xe2    j ffffffff84005136 <invokeCNodeRotate+0x50>
    0x840051ca    0xe4    mv a4,a3
    0x840051cc    0xe6    mv a3,a2
    0x840051ce    0xe8    mv a2,t1
    0x840051d0    0xea    jal ra,ffffffff8400504c <cteSwap>
    0x840051d4    0xee    ld ra,40(sp)          ; stack access
    0x840051d6    0xf0    li a0,0
    0x840051d8    0xf2    addi sp,sp,48
    0x840051da    0xf4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
93 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 147 nodes.

Section invokeCNodeInsert (143 of 296)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x84004fe0    0x0    addi sp,sp,-32
    0x84004fe2    0x2    sd ra,24(sp)          ; stack access
    0x84004fe4    0x4    jal ra,ffffffff84004ec2 <cteInsert>
    0x84004fe8    0x8    ld ra,24(sp)          ; stack access
    0x84004fea    0xa    li a0,0
    0x84004fec    0xc    addi sp,sp,32
    0x84004fee    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section awaken (144 of 296)
===========================

Deriving specifications
-----------------------

Section `awaken` consists of 45 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `awaken`:

    0x84004de8     0x0    addi sp,sp,-48
    0x84004dea     0x2    sd s0,32(sp)          ; stack access
    0x84004dec     0x4    auipc s0,0x1d
    0x84004df0     0x8    addi s0,s0,-1420 # ffffffff84021860 <ksReleaseHead>
    0x84004df4     0xc    ld a5,0(s0)
    0x84004df6     0xe    sd s1,24(sp)          ; stack access
    0x84004df8    0x10    sd s2,16(sp)          ; stack access
    0x84004dfa    0x12    sd s3,8(sp)           ; stack access
    0x84004dfc    0x14    sd ra,40(sp)          ; stack access
    0x84004dfe    0x16    auipc s1,0x1d
    0x84004e02    0x1a    addi s1,s1,-1486 # ffffffff84021830 <ksCurTime>
    0x84004e06    0x1e    auipc s3,0x1d
    0x84004e0a    0x22    addi s3,s3,-1486 # ffffffff84021838 <ksReprogram>
    0x84004e0e    0x26    li s2,1
    0x84004e10    0x28    bnez a5,ffffffff84004e4c <awaken+0x64>
    0x84004e12    0x2a    ld ra,40(sp)          ; stack access
    0x84004e14    0x2c    ld s0,32(sp)          ; stack access
    0x84004e16    0x2e    ld s1,24(sp)          ; stack access
    0x84004e18    0x30    ld s2,16(sp)          ; stack access
    0x84004e1a    0x32    ld s3,8(sp)           ; stack access
    0x84004e1c    0x34    addi sp,sp,48
    0x84004e1e    0x36    ret
    0x84004e20    0x38    ld a4,392(a5)
    0x84004e24    0x3c    mv a0,a5
    0x84004e26    0x3e    sd a4,0(s0)
    0x84004e28    0x40    beqz a4,ffffffff84004e32 <awaken+0x4a>
    0x84004e2a    0x42    sd zero,400(a4)
    0x84004e2e    0x46    sd zero,392(a5)
    0x84004e32    0x4a    ld a4,288(a5)
    0x84004e36    0x4e    sd s2,0(s3)
    0x84004e3a    0x52    andi a4,a4,-2
    0x84004e3c    0x54    sd a4,288(a5)
    0x84004e40    0x58    jal ra,ffffffff84004ca6 <possibleSwitchTo>
    0x84004e44    0x5c    ld a5,0(s0)
    0x84004e46    0x5e    sd s2,0(s3)
    0x84004e4a    0x62    beqz a5,ffffffff84004e12 <awaken+0x2a>
    0x84004e4c    0x64    ld a4,368(a5)
    0x84004e50    0x68    ld a3,0(s1)
    0x84004e52    0x6a    ld a2,72(a4)
    0x84004e54    0x6c    addi a3,a3,10
    0x84004e56    0x6e    slli a2,a2,0x4
    0x84004e58    0x70    add a4,a4,a2
    0x84004e5a    0x72    ld a4,88(a4)
    0x84004e5c    0x74    bltu a3,a4,ffffffff84004e12 <awaken+0x2a>
    0x84004e60    0x78    j ffffffff84004e20 <awaken+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `awaken` has 79 nodes.

Section setThreadState (145 of 296)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 25 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setThreadState`:

    0x84004da2     0x0    ld a5,280(a0)
    0x84004da6     0x4    andi a1,a1,15
    0x84004da8     0x6    andi a5,a5,-16
    0x84004daa     0x8    or a1,a1,a5
    0x84004dac     0xa    sd a1,280(a0)
    0x84004db0     0xe    auipc a5,0x1d
    0x84004db4    0x12    ld a5,-1368(a5) # ffffffff84021858 <ksCurThread>
    0x84004db8    0x16    beq a0,a5,ffffffff84004dbe <setThreadState+0x1c>
    0x84004dbc    0x1a    ret
    0x84004dbe    0x1c    auipc a5,0x1d
    0x84004dc2    0x20    ld a5,-1398(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84004dc6    0x24    bnez a5,ffffffff84004dbc <setThreadState+0x1a>
    0x84004dc8    0x26    andi a1,a1,15
    0x84004dca    0x28    addi a1,a1,-1
    0x84004dcc    0x2a    li a5,1
    0x84004dce    0x2c    bgeu a5,a1,ffffffff84004dd4 <setThreadState+0x32>
    0x84004dd2    0x30    j ffffffff84004c1c <rescheduleRequired>
    0x84004dd4    0x32    ld a5,368(a0)
    0x84004dd8    0x36    beqz a5,ffffffff84004dd2 <setThreadState+0x30>
    0x84004dda    0x38    ld a5,64(a5)
    0x84004ddc    0x3a    beqz a5,ffffffff84004dd2 <setThreadState+0x30>
    0x84004dde    0x3c    ld a5,288(a0)
    0x84004de2    0x40    andi a5,a5,1
    0x84004de4    0x42    bnez a5,ffffffff84004dd2 <setThreadState+0x30>
    0x84004de6    0x44    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 47 nodes.

Section handleNoFaultHandler (146 of 296)
=========================================

Deriving specifications
-----------------------

Section `handleNoFaultHandler` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `handleNoFaultHandler`:

    0x84004d7e     0x0    ld a5,280(a0)
    0x84004d82     0x4    auipc a4,0x1d
    0x84004d86     0x8    ld a4,-1322(a4) # ffffffff84021858 <ksCurThread>
    0x84004d8a     0xc    andi a5,a5,-16
    0x84004d8c     0xe    sd a5,280(a0)
    0x84004d90    0x12    beq a0,a4,ffffffff84004d96 <handleNoFaultHandler+0x18>
    0x84004d94    0x16    ret
    0x84004d96    0x18    auipc a5,0x1d
    0x84004d9a    0x1c    ld a5,-1358(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84004d9e    0x20    bnez a5,ffffffff84004d94 <handleNoFaultHandler+0x16>
    0x84004da0    0x22    j ffffffff84004c1c <rescheduleRequired>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleNoFaultHandler` has 21 nodes.

Section scheduleTCB (147 of 296)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 21 instructions.


Stack analysis
---------------

No stack accesses found. Code for `scheduleTCB`:

    0x84004c6a     0x0    auipc a5,0x1d
    0x84004c6e     0x4    ld a5,-1042(a5) # ffffffff84021858 <ksCurThread>
    0x84004c72     0x8    beq a5,a0,ffffffff84004c78 <scheduleTCB+0xe>
    0x84004c76     0xc    ret
    0x84004c78     0xe    auipc a4,0x1d
    0x84004c7c    0x12    ld a4,-1072(a4) # ffffffff84021848 <ksSchedulerAction>
    0x84004c80    0x16    bnez a4,ffffffff84004c76 <scheduleTCB+0xc>
    0x84004c82    0x18    ld a4,280(a5)
    0x84004c86    0x1c    li a3,1
    0x84004c88    0x1e    andi a4,a4,15
    0x84004c8a    0x20    addi a4,a4,-1
    0x84004c8c    0x22    bgeu a3,a4,ffffffff84004c92 <scheduleTCB+0x28>
    0x84004c90    0x26    j ffffffff84004c1c <rescheduleRequired>
    0x84004c92    0x28    ld a4,368(a5)
    0x84004c96    0x2c    beqz a4,ffffffff84004c90 <scheduleTCB+0x26>
    0x84004c98    0x2e    ld a4,64(a4)
    0x84004c9a    0x30    beqz a4,ffffffff84004c90 <scheduleTCB+0x26>
    0x84004c9c    0x32    ld a5,288(a5)
    0x84004ca0    0x36    andi a5,a5,1
    0x84004ca2    0x38    bnez a5,ffffffff84004c90 <scheduleTCB+0x26>
    0x84004ca4    0x3a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 42 nodes.

Section rescheduleRequired (148 of 296)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 30 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `rescheduleRequired`:

    0x84004c1c     0x0    addi sp,sp,-16
    0x84004c1e     0x2    sd s0,0(sp)           ; stack access
    0x84004c20     0x4    auipc s0,0x1d
    0x84004c24     0x8    addi s0,s0,-984 # ffffffff84021848 <ksSchedulerAction>
    0x84004c28     0xc    ld a0,0(s0)
    0x84004c2a     0xe    sd ra,8(sp)           ; stack access
    0x84004c2c    0x10    li a4,1
    0x84004c2e    0x12    bgeu a4,a0,ffffffff84004c3e <rescheduleRequired+0x22>
    0x84004c32    0x16    ld a5,280(a0)
    0x84004c36    0x1a    andi a5,a5,15
    0x84004c38    0x1c    addi a5,a5,-1
    0x84004c3a    0x1e    bgeu a4,a5,ffffffff84004c4a <rescheduleRequired+0x2e>
    0x84004c3e    0x22    li a5,1
    0x84004c40    0x24    ld ra,8(sp)           ; stack access
    0x84004c42    0x26    sd a5,0(s0)
    0x84004c44    0x28    ld s0,0(sp)           ; stack access
    0x84004c46    0x2a    addi sp,sp,16
    0x84004c48    0x2c    ret
    0x84004c4a    0x2e    ld a5,368(a0)
    0x84004c4e    0x32    beqz a5,ffffffff84004c3e <rescheduleRequired+0x22>
    0x84004c50    0x34    ld a5,64(a5)
    0x84004c52    0x36    beqz a5,ffffffff84004c3e <rescheduleRequired+0x22>
    0x84004c54    0x38    ld a5,288(a0)
    0x84004c58    0x3c    andi a4,a5,1
    0x84004c5c    0x40    bnez a4,ffffffff84004c3e <rescheduleRequired+0x22>
    0x84004c5e    0x42    srli a5,a5,0x1
    0x84004c60    0x44    andi a5,a5,1
    0x84004c62    0x46    bnez a5,ffffffff84004c3e <rescheduleRequired+0x22>
    0x84004c64    0x48    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x84004c68    0x4c    j ffffffff84004c3e <rescheduleRequired+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 54 nodes.

Section switchToIdleThread (149 of 296)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 14 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToIdleThread`:

    0x84004b8a     0x0    addi sp,sp,-16
    0x84004b8c     0x2    sd s0,0(sp)           ; stack access
    0x84004b8e     0x4    auipc s0,0x1d
    0x84004b92     0x8    addi s0,s0,-830 # ffffffff84021850 <ksIdleThread>
    0x84004b96     0xc    ld a0,0(s0)
    0x84004b98     0xe    sd ra,8(sp)           ; stack access
    0x84004b9a    0x10    jal ra,ffffffff84003c98 <setVMRoot>
    0x84004b9e    0x14    ld a5,0(s0)
    0x84004ba0    0x16    ld ra,8(sp)           ; stack access
    0x84004ba2    0x18    ld s0,0(sp)           ; stack access
    0x84004ba4    0x1a    auipc a4,0x1d
    0x84004ba8    0x1e    sd a5,-844(a4) # ffffffff84021858 <ksCurThread>
    0x84004bac    0x22    addi sp,sp,16
    0x84004bae    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 23 nodes.

Section doFaultTransfer (150 of 296)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x84004b1c     0x0    addi sp,sp,-32
    0x84004b1e     0x2    sd s0,16(sp)          ; stack access
    0x84004b20     0x4    sd s1,8(sp)           ; stack access
    0x84004b22     0x6    mv s0,a2
    0x84004b24     0x8    mv s1,a1
    0x84004b26     0xa    sd s2,0(sp)           ; stack access
    0x84004b28     0xc    mv a1,s0
    0x84004b2a     0xe    mv s2,a0
    0x84004b2c    0x10    mv a2,a3
    0x84004b2e    0x12    mv a0,s1
    0x84004b30    0x14    sd ra,24(sp)          ; stack access
    0x84004b32    0x16    jal ra,ffffffff8400371a <setMRs_fault>
    0x84004b36    0x1a    ld a5,312(s1)
    0x84004b3a    0x1e    lui a4,0xf
    0x84004b3c    0x20    andi a0,a0,127
    0x84004b40    0x24    slli a5,a5,0xc
    0x84004b42    0x26    and a5,a5,a4
    0x84004b44    0x28    or a5,a5,a0
    0x84004b46    0x2a    sd s2,72(s0)
    0x84004b4a    0x2e    ld ra,24(sp)          ; stack access
    0x84004b4c    0x30    sd a5,80(s0)
    0x84004b4e    0x32    ld s0,16(sp)          ; stack access
    0x84004b50    0x34    ld s1,8(sp)           ; stack access
    0x84004b52    0x36    ld s2,0(sp)           ; stack access
    0x84004b54    0x38    addi sp,sp,32
    0x84004b56    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section refill_unblock_check (151 of 296)
=========================================

Deriving specifications
-----------------------

Section `refill_unblock_check` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `refill_unblock_check`:

    0x84004b12    0x0    ld a5,0(a0)
    0x84004b14    0x2    beqz a5,ffffffff84004b1a <refill_unblock_check+0x8>
    0x84004b16    0x4    j ffffffff840033a2 <refill_unblock_check.part.0>
    0x84004b1a    0x8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_unblock_check` has 9 nodes.

Section refill_budget_check (152 of 296)
========================================

Deriving specifications
-----------------------

Section `refill_budget_check` consists of 138 instructions.

RVC_FFFFFFT_______FT.

Stack analysis
---------------

6 stack accesses found. Annotated code for `refill_budget_check`:

    0x84004982      0x0    addi sp,sp,-32
    0x84004984      0x2    sd s0,16(sp)          ; stack access
    0x84004986      0x4    auipc s0,0x1d
    0x8400498a      0x8    ld s0,-350(s0) # ffffffff84021828 <ksCurSC>
    0x8400498e      0xc    ld a5,72(s0)
    0x84004990      0xe    sd s1,8(sp)           ; stack access
    0x84004992     0x10    addi s1,s0,88
    0x84004996     0x14    slli a3,a5,0x4
    0x8400499a     0x18    add a3,a3,s1
    0x8400499c     0x1a    ld a4,8(a3)
    0x8400499e     0x1c    sd ra,24(sp)          ; stack access
    0x840049a0     0x1e    bgeu a0,a4,ffffffff84004a12 <refill_budget_check+0x90>
    0x840049a4     0x22    ld a4,0(a3)
    0x840049a6     0x24    auipc a5,0x1d
    0x840049aa     0x28    ld a5,-374(a5) # ffffffff84021830 <ksCurTime>
    0x840049ae     0x2c    addi a5,a5,10
    0x840049b0     0x2e    bgeu a5,a4,ffffffff84004afc <refill_budget_check+0x17a>
    0x840049b4     0x32    ld a5,72(s0)
    0x840049b6     0x34    ld t1,80(s0)
    0x840049ba     0x38    ld a1,64(s0)
    0x840049bc     0x3a    slli a4,a5,0x4
    0x840049c0     0x3e    add a4,a4,s1
    0x840049c2     0x40    ld a4,8(a4)
    0x840049c4     0x42    addi a6,a1,1
    0x840049c8     0x46    li a0,19
    0x840049ca     0x48    add a6,a6,t1
    0x840049cc     0x4a    addi t3,t1,1
    0x840049d0     0x4e    addi a7,a1,-1
    0x840049d4     0x52    bgeu a0,a4,ffffffff840049e4 <refill_budget_check+0x62>
    0x840049d8     0x56    sub a3,a6,a5
    0x840049dc     0x5a    bgeu t1,a5,ffffffff840049fa <refill_budget_check+0x78>
    0x840049e0     0x5e    bne a3,a1,ffffffff84004a02 <refill_budget_check+0x80>
    0x840049e4     0x62    beq a7,a5,ffffffff84004a0c <refill_budget_check+0x8a>
    0x840049e8     0x66    addi a5,a5,1
    0x840049ea     0x68    slli a3,a5,0x4
    0x840049ee     0x6c    add a3,a3,s1
    0x840049f0     0x6e    ld a2,8(a3)
    0x840049f2     0x70    sd a5,72(s0)
    0x840049f4     0x72    add a4,a4,a2
    0x840049f6     0x74    sd a4,8(a3)
    0x840049f8     0x76    j ffffffff840049d4 <refill_budget_check+0x52>
    0x840049fa     0x78    sub a3,t3,a5
    0x840049fe     0x7c    beq a3,a1,ffffffff840049e4 <refill_budget_check+0x62>
    0x84004a02     0x80    ld ra,24(sp)          ; stack access
    0x84004a04     0x82    ld s0,16(sp)          ; stack access
    0x84004a06     0x84    ld s1,8(sp)           ; stack access
    0x84004a08     0x86    addi sp,sp,32
    0x84004a0a     0x88    ret
    0x84004a0c     0x8a    mv a3,s1
    0x84004a0e     0x8c    li a5,0
    0x84004a10     0x8e    j ffffffff840049f0 <refill_budget_check+0x6e>
    0x84004a12     0x90    ld t3,0(s0)
    0x84004a16     0x94    li t5,19
    0x84004a18     0x96    j ffffffff84004a2a <refill_budget_check+0xa8>
    0x84004a1a     0x98    ld a5,72(s0)
    0x84004a1c     0x9a    sd a2,0(a3)
    0x84004a1e     0x9c    slli a3,a5,0x4
    0x84004a22     0xa0    add a3,a3,s1
    0x84004a24     0xa2    ld a4,8(a3)
    0x84004a26     0xa4    bltu a0,a4,ffffffff84004a78 <refill_budget_check+0xf6>
    0x84004a2a     0xa8    ld a2,0(a3)
    0x84004a2c     0xaa    ld a6,80(s0)
    0x84004a30     0xae    sub a0,a0,a4
    0x84004a32     0xb0    add a2,a2,t3
    0x84004a34     0xb2    beq a6,a5,ffffffff84004a1a <refill_budget_check+0x98>
    0x84004a38     0xb6    ld a1,64(s0)
    0x84004a3a     0xb8    addi a1,a1,-1
    0x84004a3c     0xba    beq a1,a5,ffffffff84004ac0 <refill_budget_check+0x13e>
    0x84004a40     0xbe    addi a5,a5,1
    0x84004a42     0xc0    slli a3,a5,0x4
    0x84004a46     0xc4    add a3,a3,s1
    0x84004a48     0xc6    slli t1,a6,0x4
    0x84004a4c     0xca    add a7,s1,t1
    0x84004a50     0xce    sd a5,72(s0)
    0x84004a52     0xd0    ld t4,0(a7)
    0x84004a56     0xd4    bltu t5,a4,ffffffff84004ab0 <refill_budget_check+0x12e>
    0x84004a5a     0xd8    beq a6,a5,ffffffff84004ab0 <refill_budget_check+0x12e>
    0x84004a5e     0xdc    ld a1,8(a7)
    0x84004a62     0xe0    add a4,a4,a1
    0x84004a64     0xe2    sd a4,8(a7)
    0x84004a68     0xe6    bgeu a2,t4,ffffffff84004a6e <refill_budget_check+0xec>
    0x84004a6c     0xea    mv a2,t4
    0x84004a6e     0xec    ld a4,8(a3)
    0x84004a70     0xee    sd a2,0(a7)
    0x84004a74     0xf2    bgeu a0,a4,ffffffff84004a2a <refill_budget_check+0xa8>
    0x84004a78     0xf6    beqz a0,ffffffff84004af6 <refill_budget_check+0x174>
    0x84004a7a     0xf8    ld a2,0(a3)
    0x84004a7c     0xfa    ld t1,80(s0)
    0x84004a80     0xfe    add a2,a2,a0
    0x84004a82    0x100    sd a2,0(a3)
    0x84004a84    0x102    beq t1,a5,ffffffff84004aa8 <refill_budget_check+0x126>
    0x84004a88    0x106    ld a1,64(s0)
    0x84004a8a    0x108    add t4,a4,a2
    0x84004a8e    0x10c    addi a6,a1,-1
    0x84004a92    0x110    beq a6,a5,ffffffff84004b08 <refill_budget_check+0x186>
    0x84004a96    0x114    addi a7,a5,1
    0x84004a9a    0x118    slli a6,a7,0x4
    0x84004a9e    0x11c    add a6,a6,s1
    0x84004aa0    0x11e    ld t3,0(a6)
    0x84004aa4    0x122    bgeu t4,t3,ffffffff84004ade <refill_budget_check+0x15c>
    0x84004aa8    0x126    bgeu a4,a0,ffffffff840049a4 <refill_budget_check+0x22>
    0x84004aac    0x12a    ld a1,64(s0)
    0x84004aae    0x12c    j ffffffff840049c4 <refill_budget_check+0x42>
    0x84004ab0    0x12e    bltu t4,a2,ffffffff84004ac6 <refill_budget_check+0x144>
    0x84004ab4    0x132    ld a2,8(a7)
    0x84004ab8    0x136    add a4,a4,a2
    0x84004aba    0x138    sd a4,8(a7)
    0x84004abe    0x13c    j ffffffff84004a24 <refill_budget_check+0xa2>
    0x84004ac0    0x13e    mv a3,s1
    0x84004ac2    0x140    li a5,0
    0x84004ac4    0x142    j ffffffff84004a48 <refill_budget_check+0xc6>
    0x84004ac6    0x144    beq a6,a1,ffffffff84004b02 <refill_budget_check+0x180>
    0x84004aca    0x148    addi t1,t1,16
    0x84004acc    0x14a    addi a6,a6,1
    0x84004ace    0x14c    add t1,t1,s1
    0x84004ad0    0x14e    sd a6,80(s0)
    0x84004ad4    0x152    sd a2,0(t1)
    0x84004ad8    0x156    sd a4,8(t1)
    0x84004adc    0x15a    j ffffffff84004a24 <refill_budget_check+0xa2>
    0x84004ade    0x15c    ld a5,8(a6)
    0x84004ae2    0x160    sd a7,72(s0)
    0x84004ae6    0x164    sd a2,0(a6)
    0x84004aea    0x168    add a4,a4,a5
    0x84004aec    0x16a    sd a4,8(a6)
    0x84004af0    0x16e    bltu a4,a0,ffffffff84004b0e <refill_budget_check+0x18c>
    0x84004af4    0x172    mv a3,a6
    0x84004af6    0x174    beq a0,a4,ffffffff840049b4 <refill_budget_check+0x32>
    0x84004afa    0x178    j ffffffff840049a4 <refill_budget_check+0x22>
    0x84004afc    0x17a    jal ra,ffffffff8400480a <refill_split_check>
    0x84004b00    0x17e    j ffffffff840049b4 <refill_budget_check+0x32>
    0x84004b02    0x180    mv t1,s1
    0x84004b04    0x182    li a6,0
    0x84004b06    0x184    j ffffffff84004ad0 <refill_budget_check+0x14e>
    0x84004b08    0x186    mv a6,s1
    0x84004b0a    0x188    li a7,0
    0x84004b0c    0x18a    j ffffffff84004aa0 <refill_budget_check+0x11e>
    0x84004b0e    0x18c    mv a5,a7
    0x84004b10    0x18e    j ffffffff840049c4 <refill_budget_check+0x42>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_budget_check` has 232 nodes.

Section lookupCapAndSlot (153 of 296)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 37 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x840046fa     0x0    andi a5,a1,-1024
    0x840046fe     0x4    ld a1,0(a5)
    0x84004700     0x6    ld a5,8(a5)
    0x84004702     0x8    addi sp,sp,-64
    0x84004704     0xa    sd s0,48(sp)          ; stack access
    0x84004706     0xc    mv a3,a2
    0x84004708     0xe    li a4,64
    0x8400470c    0x12    mv a2,a5
    0x8400470e    0x14    mv s0,a0
    0x84004710    0x16    addi a0,sp,24
    0x84004712    0x18    sd a5,16(sp)          ; stack access
    0x84004714    0x1a    sd ra,56(sp)          ; stack access
    0x84004716    0x1c    sd a1,8(sp)           ; stack access
    0x84004718    0x1e    jal ra,ffffffff84004438 <resolveAddressBits>
    0x8400471c    0x22    ld a4,24(sp)          ; stack access
    0x8400471e    0x24    ld a5,32(sp)          ; stack access
    0x84004720    0x26    bnez a4,ffffffff8400473a <lookupCapAndSlot+0x40>
    0x84004722    0x28    ld a3,0(a5)
    0x84004724    0x2a    ld a4,8(a5)
    0x84004726    0x2c    ld ra,56(sp)          ; stack access
    0x84004728    0x2e    sd zero,0(s0)         ; stack access
    0x8400472c    0x32    sd a3,8(s0)           ; stack access
    0x8400472e    0x34    sd a4,16(s0)          ; stack access
    0x84004730    0x36    sd a5,24(s0)          ; stack access
    0x84004732    0x38    mv a0,s0
    0x84004734    0x3a    ld s0,48(sp)          ; stack access
    0x84004736    0x3c    addi sp,sp,64
    0x84004738    0x3e    ret
    0x8400473a    0x40    ld ra,56(sp)          ; stack access
    0x8400473c    0x42    sd a4,0(s0)           ; stack access
    0x8400473e    0x44    sd zero,8(s0)         ; stack access
    0x84004742    0x48    sd zero,16(s0)        ; stack access
    0x84004746    0x4c    sd zero,24(s0)        ; stack access
    0x8400474a    0x50    mv a0,s0
    0x8400474c    0x52    ld s0,48(sp)          ; stack access
    0x8400474e    0x54    addi sp,sp,64
    0x84004750    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 64 nodes.

Section lookupCap (154 of 296)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 35 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `lookupCap`:

    0x840046a8     0x0    andi a5,a1,-1024
    0x840046ac     0x4    ld a1,0(a5)
    0x840046ae     0x6    ld a5,8(a5)
    0x840046b0     0x8    addi sp,sp,-64
    0x840046b2     0xa    sd s0,48(sp)          ; stack access
    0x840046b4     0xc    mv a3,a2
    0x840046b6     0xe    li a4,64
    0x840046ba    0x12    mv a2,a5
    0x840046bc    0x14    mv s0,a0
    0x840046be    0x16    addi a0,sp,24
    0x840046c0    0x18    sd a5,16(sp)          ; stack access
    0x840046c2    0x1a    sd ra,56(sp)          ; stack access
    0x840046c4    0x1c    sd a1,8(sp)           ; stack access
    0x840046c6    0x1e    jal ra,ffffffff84004438 <resolveAddressBits>
    0x840046ca    0x22    ld a4,24(sp)          ; stack access
    0x840046cc    0x24    ld a5,32(sp)          ; stack access
    0x840046ce    0x26    bnez a4,ffffffff840046e6 <lookupCap+0x3e>
    0x840046d0    0x28    ld a4,0(a5)
    0x840046d2    0x2a    ld a5,8(a5)
    0x840046d4    0x2c    ld ra,56(sp)          ; stack access
    0x840046d6    0x2e    sd zero,0(s0)         ; stack access
    0x840046da    0x32    sd a4,8(s0)           ; stack access
    0x840046dc    0x34    sd a5,16(s0)          ; stack access
    0x840046de    0x36    mv a0,s0
    0x840046e0    0x38    ld s0,48(sp)          ; stack access
    0x840046e2    0x3a    addi sp,sp,64
    0x840046e4    0x3c    ret
    0x840046e6    0x3e    ld ra,56(sp)          ; stack access
    0x840046e8    0x40    sd a4,0(s0)           ; stack access
    0x840046ea    0x42    sd zero,8(s0)         ; stack access
    0x840046ee    0x46    sd zero,16(s0)        ; stack access
    0x840046f2    0x4a    mv a0,s0
    0x840046f4    0x4c    ld s0,48(sp)          ; stack access
    0x840046f6    0x4e    addi sp,sp,64
    0x840046f8    0x50    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 60 nodes.

Section lookupPivotSlot (155 of 296)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupPivotSlot`:

    0x84004696     0x0    addi sp,sp,-64
    0x84004698     0x2    mv a5,a1
    0x8400469a     0x4    mv a4,a3
    0x8400469c     0x6    mv a1,a0
    0x8400469e     0x8    mv a3,a2
    0x840046a0     0xa    mv a2,a5
    0x840046a2     0xc    li a0,1
    0x840046a4     0xe    addi sp,sp,64
    0x840046a6    0x10    j ffffffff84004592 <lookupSlotForCNodeOp>

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 10 nodes.

Section lookupTargetSlot (156 of 296)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupTargetSlot`:

    0x84004684     0x0    addi sp,sp,-32
    0x84004686     0x2    mv a5,a1
    0x84004688     0x4    mv a4,a3
    0x8400468a     0x6    mv a1,a0
    0x8400468c     0x8    mv a3,a2
    0x8400468e     0xa    mv a2,a5
    0x84004690     0xc    li a0,0
    0x84004692     0xe    addi sp,sp,32
    0x84004694    0x10    j ffffffff84004592 <lookupSlotForCNodeOp>

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 10 nodes.

Section lookupSourceSlot (157 of 296)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupSourceSlot`:

    0x84004672     0x0    addi sp,sp,-32
    0x84004674     0x2    mv a5,a1
    0x84004676     0x4    mv a4,a3
    0x84004678     0x6    mv a1,a0
    0x8400467a     0x8    mv a3,a2
    0x8400467c     0xa    mv a2,a5
    0x8400467e     0xc    li a0,1
    0x84004680     0xe    addi sp,sp,32
    0x84004682    0x10    j ffffffff84004592 <lookupSlotForCNodeOp>

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 10 nodes.

Section lookupSlotForCNodeOp (158 of 296)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 79 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

23 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x84004592     0x0    addi sp,sp,-80
    0x84004594     0x2    sd s0,64(sp)          ; stack access
    0x84004596     0x4    sd ra,72(sp)          ; stack access
    0x84004598     0x6    srli a6,a1,0x3b
    0x8400459c     0xa    li a7,10
    0x8400459e     0xc    mv s0,a0
    0x840045a0     0xe    bne a6,a7,ffffffff840045d0 <lookupSlotForCNodeOp+0x3e>
    0x840045a4    0x12    addi a5,a4,-1
    0x840045a8    0x16    li a0,63
    0x840045ac    0x1a    bltu a0,a5,ffffffff84004604 <lookupSlotForCNodeOp+0x72>
    0x840045b0    0x1e    addi a0,sp,40
    0x840045b2    0x20    jal ra,ffffffff84004438 <resolveAddressBits>
    0x840045b6    0x24    ld a4,40(sp)          ; stack access
    0x840045b8    0x26    ld a5,56(sp)          ; stack access
    0x840045ba    0x28    bnez a4,ffffffff84004628 <lookupSlotForCNodeOp+0x96>
    0x840045bc    0x2a    bnez a5,ffffffff84004642 <lookupSlotForCNodeOp+0xb0>
    0x840045be    0x2c    ld a5,48(sp)          ; stack access
    0x840045c0    0x2e    sd zero,24(sp)        ; stack access
    0x840045c2    0x30    sd a5,32(sp)          ; stack access
    0x840045c4    0x32    ld ra,72(sp)          ; stack access
    0x840045c6    0x34    ld s0,64(sp)          ; stack access
    0x840045c8    0x36    ld a0,24(sp)          ; stack access
    0x840045ca    0x38    ld a1,32(sp)          ; stack access
    0x840045cc    0x3a    addi sp,sp,80
    0x840045ce    0x3c    ret
    0x840045d0    0x3e    auipc a5,0xb
    0x840045d4    0x42    addi a5,a5,-1488 # ffffffff8400f000 <riscvKSASIDTable>
    0x840045d8    0x46    li a4,6
    0x840045da    0x48    sd a0,1720(a5)
    0x840045de    0x4c    sd a4,1728(a5)
    0x840045e2    0x50    ld ra,72(sp)          ; stack access
    0x840045e4    0x52    ld s0,64(sp)          ; stack access
    0x840045e6    0x54    auipc a5,0xb
    0x840045ea    0x58    sd zero,-486(a5) # ffffffff8400f400 <current_lookup_fault>
    0x840045ee    0x5c    auipc a5,0xb
    0x840045f2    0x60    sd zero,-486(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x840045f6    0x64    li a5,3
    0x840045f8    0x66    sd a5,24(sp)          ; stack access
    0x840045fa    0x68    sd zero,32(sp)        ; stack access
    0x840045fc    0x6a    ld a0,24(sp)          ; stack access
    0x840045fe    0x6c    ld a1,32(sp)          ; stack access
    0x84004600    0x6e    addi sp,sp,80
    0x84004602    0x70    ret
    0x84004604    0x72    auipc a5,0xb
    0x84004608    0x76    addi a5,a5,-1540 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400460c    0x7a    li a4,4
    0x8400460e    0x7c    sd a4,1728(a5)
    0x84004612    0x80    li a4,1
    0x84004614    0x82    sd a4,1696(a5)
    0x84004618    0x86    li a4,64
    0x8400461c    0x8a    sd a4,1704(a5)
    0x84004620    0x8e    li a5,3
    0x84004622    0x90    sd a5,24(sp)          ; stack access
    0x84004624    0x92    sd zero,32(sp)        ; stack access
    0x84004626    0x94    j ffffffff840045c4 <lookupSlotForCNodeOp+0x32>
    0x84004628    0x96    auipc a5,0xb
    0x8400462c    0x9a    addi a5,a5,-1576 # ffffffff8400f000 <riscvKSASIDTable>
    0x84004630    0x9e    li a4,6
    0x84004632    0xa0    sd a4,1728(a5)
    0x84004636    0xa4    sd s0,1720(a5)
    0x8400463a    0xa8    li a5,3
    0x8400463c    0xaa    sd a5,24(sp)          ; stack access
    0x8400463e    0xac    sd zero,32(sp)        ; stack access
    0x84004640    0xae    j ffffffff840045c4 <lookupSlotForCNodeOp+0x32>
    0x84004642    0xb0    slli a5,a5,0x2
    0x84004644    0xb2    andi a5,a5,508
    0x84004648    0xb6    auipc a4,0xb
    0x8400464c    0xba    addi a4,a4,-1608 # ffffffff8400f000 <riscvKSASIDTable>
    0x84004650    0xbe    ori a5,a5,2
    0x84004654    0xc2    sd a5,1024(a4)
    0x84004658    0xc6    auipc a5,0xb
    0x8400465c    0xca    sd zero,-592(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x84004660    0xce    li a3,6
    0x84004662    0xd0    li a5,3
    0x84004664    0xd2    sd a3,1728(a4)
    0x84004668    0xd6    sd s0,1720(a4)
    0x8400466c    0xda    sd a5,24(sp)          ; stack access
    0x8400466e    0xdc    sd zero,32(sp)        ; stack access
    0x84004670    0xde    j ffffffff840045c4 <lookupSlotForCNodeOp+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 126 nodes.

Section lookupSlot (159 of 296)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `lookupSlot`:

    0x84004570     0x0    andi a0,a0,-1024
    0x84004574     0x4    ld a2,8(a0)
    0x84004576     0x6    mv a3,a1
    0x84004578     0x8    ld a1,0(a0)
    0x8400457a     0xa    addi sp,sp,-80
    0x8400457c     0xc    addi a0,sp,40
    0x8400457e     0xe    li a4,64
    0x84004582    0x12    sd ra,72(sp)          ; stack access
    0x84004584    0x14    jal ra,ffffffff84004438 <resolveAddressBits>
    0x84004588    0x18    ld ra,72(sp)          ; stack access
    0x8400458a    0x1a    ld a0,40(sp)          ; stack access
    0x8400458c    0x1c    ld a1,48(sp)          ; stack access
    0x8400458e    0x1e    addi sp,sp,80
    0x84004590    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (160 of 296)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 51 instructions.


Stack analysis
---------------

11 stack accesses found. Annotated code for `Arch_createObject`:

    0x840043b0     0x0    addi sp,sp,-32
    0x840043b2     0x2    sd ra,24(sp)          ; stack access
    0x840043b4     0x4    li a5,9
    0x840043b6     0x6    beq a0,a5,ffffffff8400440e <Arch_createObject+0x5e>
    0x840043ba     0xa    bltu a5,a0,ffffffff840043ec <Arch_createObject+0x3c>
    0x840043be     0xe    li a5,7
    0x840043c0    0x10    beq a0,a5,ffffffff84004418 <Arch_createObject+0x68>
    0x840043c4    0x14    li a5,8
    0x840043c6    0x16    bne a0,a5,ffffffff84004422 <Arch_createObject+0x72>
    0x840043ca    0x1a    andi a3,a3,1
    0x840043cc    0x1c    slli a3,a3,0x36
    0x840043ce    0x1e    slli a1,a1,0x9
    0x840043d0    0x20    li a5,19
    0x840043d2    0x22    slli a5,a5,0x37
    0x840043d4    0x24    or a3,a3,a5
    0x840043d6    0x26    lui a5,0xfe000
    0x840043da    0x2a    ld ra,24(sp)          ; stack access
    0x840043dc    0x2c    srli a5,a5,0x10
    0x840043de    0x2e    and a1,a1,a5
    0x840043e0    0x30    sd a3,0(sp)           ; stack access
    0x840043e2    0x32    sd a1,8(sp)           ; stack access
    0x840043e4    0x34    ld a0,0(sp)           ; stack access
    0x840043e6    0x36    ld a1,8(sp)           ; stack access
    0x840043e8    0x38    addi sp,sp,32
    0x840043ea    0x3a    ret
    0x840043ec    0x3c    li a5,10
    0x840043ee    0x3e    bne a0,a5,ffffffff84004422 <Arch_createObject+0x72>
    0x840043f2    0x42    lui a5,0xfe000
    0x840043f6    0x46    srli a5,a5,0x10
    0x840043f8    0x48    slli a1,a1,0x9
    0x840043fa    0x4a    and a1,a1,a5
    0x840043fc    0x4c    ld ra,24(sp)          ; stack access
    0x840043fe    0x4e    li a5,3
    0x84004400    0x50    slli a5,a5,0x3b
    0x84004402    0x52    sd a5,0(sp)           ; stack access
    0x84004404    0x54    sd a1,8(sp)           ; stack access
    0x84004406    0x56    ld a0,0(sp)           ; stack access
    0x84004408    0x58    ld a1,8(sp)           ; stack access
    0x8400440a    0x5a    addi sp,sp,32
    0x8400440c    0x5c    ret
    0x8400440e    0x5e    andi a3,a3,1
    0x84004410    0x60    slli a3,a3,0x36
    0x84004412    0x62    slli a1,a1,0x9
    0x84004414    0x64    li a5,23
    0x84004416    0x66    j ffffffff840043d2 <Arch_createObject+0x22>
    0x84004418    0x68    andi a3,a3,1
    0x8400441a    0x6a    slli a3,a3,0x36
    0x8400441c    0x6c    slli a1,a1,0x9
    0x8400441e    0x6e    li a5,27
    0x84004420    0x70    j ffffffff840043d2 <Arch_createObject+0x22>
    0x84004422    0x72    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 75 nodes.

Section Arch_getObjectSize (161 of 296)
=======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 12 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_getObjectSize`:

    0x84004390     0x0    addi a0,a0,-7
    0x84004392     0x2    li a5,3
    0x84004394     0x4    bltu a5,a0,ffffffff840043a8 <Arch_getObjectSize+0x18>
    0x84004398     0x8    auipc a5,0xa
    0x8400439c     0xc    addi a5,a5,-1448 # ffffffff8400ddf0 <syscall_fault_message>
    0x840043a0    0x10    slli a0,a0,0x3
    0x840043a2    0x12    add a0,a0,a5
    0x840043a4    0x14    ld a0,48(a0)
    0x840043a6    0x16    ret
    0x840043a8    0x18    addi sp,sp,-16
    0x840043aa    0x1a    sd ra,8(sp)           ; stack access
    0x840043ac    0x1c    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 18 nodes.

Section Arch_sameObjectAs (162 of 296)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 49 instructions.

RVC_TFFFTT___FT___FT..

Stack analysis
---------------

8 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84004312     0x0    addi sp,sp,-32
    0x84004314     0x2    mv a5,a0
    0x84004316     0x4    sd a0,16(sp)          ; stack access
    0x84004318     0x6    srli a4,a0,0x3b
    0x8400431c     0xa    sd a1,24(sp)          ; stack access
    0x8400431e     0xc    sd a2,0(sp)           ; stack access
    0x84004320     0xe    sd a3,8(sp)           ; stack access
    0x84004322    0x10    li a0,1
    0x84004324    0x12    beq a4,a0,ffffffff84004334 <Arch_sameObjectAs+0x22>
    0x84004328    0x16    ld a2,0(sp)           ; stack access
    0x8400432a    0x18    ld a3,8(sp)           ; stack access
    0x8400432c    0x1a    ld a0,16(sp)          ; stack access
    0x8400432e    0x1c    ld a1,24(sp)          ; stack access
    0x84004330    0x1e    addi sp,sp,32
    0x84004332    0x20    j ffffffff840041d2 <Arch_sameRegionAs>
    0x84004334    0x22    srli a0,a2,0x3b
    0x84004338    0x26    bne a0,a4,ffffffff84004328 <Arch_sameObjectAs+0x16>
    0x8400433c    0x2a    srli a1,a1,0x9
    0x8400433e    0x2c    slli a0,a0,0x26
    0x84004340    0x2e    li a6,-1
    0x84004342    0x30    srli a4,a6,0x19
    0x84004346    0x34    srli a3,a3,0x9
    0x84004348    0x36    and a7,a1,a0
    0x8400434c    0x3a    and a1,a1,a4
    0x8400434e    0x3c    and a0,a0,a3
    0x84004350    0x3e    and a4,a4,a3
    0x84004352    0x40    beqz a7,ffffffff8400438c <Arch_sameObjectAs+0x7a>
    0x84004356    0x44    slli a6,a6,0x27
    0x84004358    0x46    or a1,a1,a6
    0x8400435c    0x4a    beqz a0,ffffffff8400436a <Arch_sameObjectAs+0x58>
    0x8400435e    0x4c    li a3,-1
    0x84004360    0x4e    slli a3,a3,0x27
    0x84004362    0x50    or a4,a4,a3
    0x84004364    0x52    li a0,0
    0x84004366    0x54    beq a4,a1,ffffffff8400436e <Arch_sameObjectAs+0x5c>
    0x8400436a    0x58    addi sp,sp,32
    0x8400436c    0x5a    ret
    0x8400436e    0x5c    srli a3,a2,0x39
    0x84004372    0x60    srli a4,a5,0x39
    0x84004376    0x64    andi a3,a3,3
    0x84004378    0x66    andi a4,a4,3
    0x8400437a    0x68    bne a3,a4,ffffffff8400436a <Arch_sameObjectAs+0x58>
    0x8400437e    0x6c    xor a5,a5,a2
    0x84004380    0x6e    srli a5,a5,0x36
    0x84004382    0x70    not a5,a5
    0x84004386    0x74    andi a0,a5,1
    0x8400438a    0x78    j ffffffff8400436a <Arch_sameObjectAs+0x58>
    0x8400438c    0x7a    bnez a0,ffffffff8400435e <Arch_sameObjectAs+0x4c>
    0x8400438e    0x7c    j ffffffff84004364 <Arch_sameObjectAs+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 73 nodes.

Section Arch_sameRegionAs (163 of 296)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 120 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x840041d2      0x0    srli a5,a0,0x3b
    0x840041d6      0x4    li a4,11
    0x840041d8      0x6    beq a5,a4,ffffffff840042cc <Arch_sameRegionAs+0xfa>
    0x840041dc      0xa    mv a6,a0
    0x840041de      0xc    bltu a4,a5,ffffffff840041f8 <Arch_sameRegionAs+0x26>
    0x840041e2     0x10    li a4,1
    0x840041e4     0x12    beq a5,a4,ffffffff84004248 <Arch_sameRegionAs+0x76>
    0x840041e8     0x16    li a0,3
    0x840041ea     0x18    bne a5,a0,ffffffff84004244 <Arch_sameRegionAs+0x72>
    0x840041ee     0x1c    srli a2,a2,0x3b
    0x840041f0     0x1e    li a0,0
    0x840041f2     0x20    beq a2,a5,ffffffff840042d8 <Arch_sameRegionAs+0x106>
    0x840041f6     0x24    ret
    0x840041f8     0x26    li a4,13
    0x840041fa     0x28    bne a5,a4,ffffffff84004244 <Arch_sameRegionAs+0x72>
    0x840041fe     0x2c    srli a4,a2,0x3b
    0x84004202     0x30    li a0,0
    0x84004204     0x32    bne a4,a5,ffffffff840041f6 <Arch_sameRegionAs+0x24>
    0x84004208     0x36    slli a5,a6,0x2
    0x8400420c     0x3a    srli a4,a5,0x26
    0x84004210     0x3e    lui a0,0xf8000
    0x84004214     0x42    srli a0,a0,0x19
    0x84004216     0x44    andi a4,a4,1
    0x84004218     0x46    and a5,a5,a0
    0x8400421a     0x48    beqz a4,ffffffff84004222 <Arch_sameRegionAs+0x50>
    0x8400421c     0x4a    li a4,-1
    0x8400421e     0x4c    slli a4,a4,0x27
    0x84004220     0x4e    or a5,a5,a4
    0x84004222     0x50    slli a3,a2,0x2
    0x84004226     0x54    srli a4,a3,0x26
    0x8400422a     0x58    lui a0,0xf8000
    0x8400422e     0x5c    srli a0,a0,0x19
    0x84004230     0x5e    andi a4,a4,1
    0x84004232     0x60    and a3,a3,a0
    0x84004234     0x62    beqz a4,ffffffff8400423c <Arch_sameRegionAs+0x6a>
    0x84004236     0x64    li a4,-1
    0x84004238     0x66    slli a4,a4,0x27
    0x8400423a     0x68    or a3,a3,a4
    0x8400423c     0x6a    sub a3,a3,a5
    0x8400423e     0x6c    seqz a0,a3
    0x84004242     0x70    ret
    0x84004244     0x72    li a0,0
    0x84004246     0x74    ret
    0x84004248     0x76    srli a4,a2,0x3b
    0x8400424c     0x7a    li a0,0
    0x8400424e     0x7c    bne a4,a5,ffffffff840041f6 <Arch_sameRegionAs+0x24>
    0x84004252     0x80    srli a1,a1,0x9
    0x84004254     0x82    li a5,-1
    0x84004256     0x84    slli a4,a4,0x26
    0x84004258     0x86    srli a0,a5,0x19
    0x8400425c     0x8a    and a4,a4,a1
    0x8400425e     0x8c    and a1,a1,a0
    0x84004260     0x8e    beqz a4,ffffffff84004266 <Arch_sameRegionAs+0x94>
    0x84004262     0x90    slli a5,a5,0x27
    0x84004264     0x92    or a1,a1,a5
    0x84004266     0x94    srli a3,a3,0x9
    0x84004268     0x96    srli a4,a3,0x26
    0x8400426c     0x9a    li a5,-1
    0x8400426e     0x9c    srli a0,a5,0x19
    0x84004272     0xa0    andi a4,a4,1
    0x84004274     0xa2    and a3,a3,a0
    0x84004276     0xa4    beqz a4,ffffffff8400427c <Arch_sameRegionAs+0xaa>
    0x84004278     0xa6    slli a5,a5,0x27
    0x8400427a     0xa8    or a3,a3,a5
    0x8400427c     0xaa    srli a4,a6,0x39
    0x84004280     0xae    andi a4,a4,3
    0x84004282     0xb0    li a5,3
    0x84004284     0xb2    beq a4,a5,ffffffff8400430a <Arch_sameRegionAs+0x138>
    0x84004288     0xb6    srli a2,a2,0x39
    0x8400428a     0xb8    andi a2,a2,3
    0x8400428c     0xba    beq a2,a5,ffffffff8400430a <Arch_sameRegionAs+0x138>
    0x84004290     0xbe    li a0,0
    0x84004292     0xc0    bltu a3,a1,ffffffff840041f6 <Arch_sameRegionAs+0x24>
    0x84004296     0xc4    slli a5,a2,0x3
    0x8400429a     0xc8    slli a6,a4,0x3
    0x8400429e     0xcc    add a5,a5,a2
    0x840042a0     0xce    add a4,a4,a6
    0x840042a2     0xd0    li a2,1
    0x840042a4     0xd2    addi a5,a5,12
    0x840042a6     0xd4    addi a4,a4,12
    0x840042a8     0xd6    sll a5,a2,a5
    0x840042ac     0xda    sll a2,a2,a4
    0x840042b0     0xde    addi a5,a5,-1
    0x840042b2     0xe0    addi a2,a2,-1
    0x840042b4     0xe2    add a5,a5,a3
    0x840042b6     0xe4    add a1,a1,a2
    0x840042b8     0xe6    bltu a1,a5,ffffffff840041f6 <Arch_sameRegionAs+0x24>
    0x840042bc     0xea    sltu a3,a5,a3
    0x840042c0     0xee    xori a3,a3,1
    0x840042c4     0xf2    slli a0,a3,0x20
    0x840042c8     0xf6    srli a0,a0,0x20
    0x840042ca     0xf8    ret
    0x840042cc     0xfa    srli a3,a2,0x3b
    0x840042d0     0xfe    addi a3,a3,-11
    0x840042d2    0x100    seqz a0,a3
    0x840042d6    0x104    ret
    0x840042d8    0x106    srli a1,a1,0x9
    0x840042da    0x108    li a5,-1
    0x840042dc    0x10a    slli a4,a4,0x26
    0x840042de    0x10c    srli a2,a5,0x19
    0x840042e2    0x110    and a4,a4,a1
    0x840042e4    0x112    and a1,a1,a2
    0x840042e6    0x114    beqz a4,ffffffff840042ec <Arch_sameRegionAs+0x11a>
    0x840042e8    0x116    slli a5,a5,0x27
    0x840042ea    0x118    or a1,a1,a5
    0x840042ec    0x11a    srli a3,a3,0x9
    0x840042ee    0x11c    srli a4,a3,0x26
    0x840042f2    0x120    li a5,-1
    0x840042f4    0x122    srli a2,a5,0x19
    0x840042f8    0x126    andi a4,a4,1
    0x840042fa    0x128    and a3,a3,a2
    0x840042fc    0x12a    beqz a4,ffffffff84004302 <Arch_sameRegionAs+0x130>
    0x840042fe    0x12c    slli a5,a5,0x27
    0x84004300    0x12e    or a3,a3,a5
    0x84004302    0x130    sub a3,a3,a1
    0x84004304    0x132    seqz a0,a3
    0x84004308    0x136    ret
    0x8400430a    0x138    addi sp,sp,-48
    0x8400430c    0x13a    sd ra,40(sp)          ; stack access
    0x8400430e    0x13c    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
120 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 164 nodes.

Section Arch_deriveCap (164 of 296)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 41 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
13 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84003f92     0x0    srli a5,a2,0x3b
    0x84003f96     0x4    li a4,3
    0x84003f98     0x6    beq a5,a4,ffffffff84003fca <Arch_deriveCap+0x38>
    0x84003f9c     0xa    bgeu a4,a5,ffffffff84003fae <Arch_deriveCap+0x1c>
    0x84003fa0     0xe    addi a5,a5,-11
    0x84003fa2    0x10    andi a5,a5,-3
    0x84003fa4    0x12    beqz a5,ffffffff84003fe6 <Arch_deriveCap+0x54>
    0x84003fa6    0x14    addi sp,sp,-32
    0x84003fa8    0x16    sd ra,24(sp)          ; stack access
    0x84003faa    0x18    jal ra,ffffffff840036cc <halt>
    0x84003fae    0x1c    li a4,1
    0x84003fb0    0x1e    bne a5,a4,ffffffff84003fa6 <Arch_deriveCap+0x14>
    0x84003fb4    0x22    li a5,-1
    0x84003fb6    0x24    slli a4,a5,0x27
    0x84003fba    0x28    srli a5,a5,0x10
    0x84003fbc    0x2a    and a2,a2,a4
    0x84003fbe    0x2c    and a3,a3,a5
    0x84003fc0    0x2e    sd zero,0(a0)         ; stack access
    0x84003fc4    0x32    sd a2,8(a0)           ; stack access
    0x84003fc6    0x34    sd a3,16(a0)          ; stack access
    0x84003fc8    0x36    ret
    0x84003fca    0x38    srli a4,a2,0x27
    0x84003fce    0x3c    andi a4,a4,1
    0x84003fd0    0x3e    bnez a4,ffffffff84003ff0 <Arch_deriveCap+0x5e>
    0x84003fd2    0x40    li a3,0
    0x84003fd4    0x42    li a2,0
    0x84003fd6    0x44    auipc a4,0xb
    0x84003fda    0x48    sd a5,1770(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84003fde    0x4c    sd a5,0(a0)           ; stack access
    0x84003fe0    0x4e    sd a2,8(a0)           ; stack access
    0x84003fe2    0x50    sd a3,16(a0)          ; stack access
    0x84003fe4    0x52    ret
    0x84003fe6    0x54    sd zero,0(a0)         ; stack access
    0x84003fea    0x58    sd a2,8(a0)           ; stack access
    0x84003fec    0x5a    sd a3,16(a0)          ; stack access
    0x84003fee    0x5c    ret
    0x84003ff0    0x5e    li a5,0
    0x84003ff2    0x60    sd a5,0(a0)           ; stack access
    0x84003ff4    0x62    sd a2,8(a0)           ; stack access
    0x84003ff6    0x64    sd a3,16(a0)          ; stack access
    0x84003ff8    0x66    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 70 nodes.

Section performPageInvocationUnmap (165 of 296)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 42 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x84003ee0     0x0    addi sp,sp,-32
    0x84003ee2     0x2    sd s0,16(sp)          ; stack access
    0x84003ee4     0x4    mv a3,a1
    0x84003ee6     0x6    sd ra,24(sp)          ; stack access
    0x84003ee8     0x8    srli a1,a1,0x30
    0x84003eea     0xa    mv s0,a2
    0x84003eec     0xc    beqz a1,ffffffff84003f26 <performPageInvocationUnmap+0x46>
    0x84003eee     0xe    srli a4,a0,0x26
    0x84003ef2    0x12    li a5,-1
    0x84003ef4    0x14    mv a2,a0
    0x84003ef6    0x16    srli a6,a5,0x19
    0x84003efa    0x1a    srli a0,a0,0x39
    0x84003efc    0x1c    andi a4,a4,1
    0x84003efe    0x1e    andi a0,a0,3
    0x84003f00    0x20    and a2,a2,a6
    0x84003f04    0x24    beqz a4,ffffffff84003f0a <performPageInvocationUnmap+0x2a>
    0x84003f06    0x26    slli a5,a5,0x27
    0x84003f08    0x28    or a2,a2,a5
    0x84003f0a    0x2a    srli a3,a3,0x9
    0x84003f0c    0x2c    srli a4,a3,0x26
    0x84003f10    0x30    li a5,-1
    0x84003f12    0x32    srli a6,a5,0x19
    0x84003f16    0x36    andi a4,a4,1
    0x84003f18    0x38    and a3,a3,a6
    0x84003f1c    0x3c    beqz a4,ffffffff84003f22 <performPageInvocationUnmap+0x42>
    0x84003f1e    0x3e    slli a5,a5,0x27
    0x84003f20    0x40    or a3,a3,a5
    0x84003f22    0x42    jal ra,ffffffff84003c14 <unmapPage>
    0x84003f26    0x46    ld a4,8(s0)
    0x84003f28    0x48    ld a3,0(s0)
    0x84003f2a    0x4a    li a5,-1
    0x84003f2c    0x4c    srli a2,a5,0x10
    0x84003f30    0x50    slli a5,a5,0x27
    0x84003f32    0x52    and a4,a4,a2
    0x84003f34    0x54    and a5,a5,a3
    0x84003f36    0x56    ld ra,24(sp)          ; stack access
    0x84003f38    0x58    sd a5,0(s0)
    0x84003f3a    0x5a    sd a4,8(s0)
    0x84003f3c    0x5c    ld s0,16(sp)          ; stack access
    0x84003f3e    0x5e    li a0,0
    0x84003f40    0x60    addi sp,sp,32
    0x84003f42    0x62    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 58 nodes.

Section performPageTableInvocationUnmap (166 of 296)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x84003e4e     0x0    addi sp,sp,-48
    0x84003e50     0x2    srli a5,a0,0x27
    0x84003e54     0x6    sd s2,16(sp)          ; stack access
    0x84003e56     0x8    sd ra,40(sp)          ; stack access
    0x84003e58     0xa    sd s0,32(sp)          ; stack access
    0x84003e5a     0xc    sd s1,24(sp)          ; stack access
    0x84003e5c     0xe    andi a5,a5,1
    0x84003e5e    0x10    mv s2,a2
    0x84003e60    0x12    beqz a5,ffffffff84003eac <performPageTableInvocationUnmap+0x5e>
    0x84003e62    0x14    srli a5,a1,0x9
    0x84003e66    0x18    li a3,-1
    0x84003e68    0x1a    srli a2,a5,0x26
    0x84003e6c    0x1e    srli s1,a3,0x19
    0x84003e70    0x22    andi a2,a2,1
    0x84003e72    0x24    mv a4,a0
    0x84003e74    0x26    and s1,s1,a5
    0x84003e76    0x28    beqz a2,ffffffff84003e7c <performPageTableInvocationUnmap+0x2e>
    0x84003e78    0x2a    slli a3,a3,0x27
    0x84003e7a    0x2c    or s1,s1,a3
    0x84003e7c    0x2e    li a5,-1
    0x84003e7e    0x30    srli a3,a4,0x26
    0x84003e82    0x34    srli a2,a5,0x19
    0x84003e86    0x38    andi a3,a3,1
    0x84003e88    0x3a    srli a0,a1,0x30
    0x84003e8c    0x3e    mv s0,s1
    0x84003e8e    0x40    and a1,a4,a2
    0x84003e92    0x44    beqz a3,ffffffff84003e98 <performPageTableInvocationUnmap+0x4a>
    0x84003e94    0x46    slli a5,a5,0x27
    0x84003e96    0x48    or a1,a1,a5
    0x84003e98    0x4a    mv a2,s1
    0x84003e9a    0x4c    jal ra,ffffffff84003b8c <unmapPageTable>
    0x84003e9e    0x50    lui a5,0x1
    0x84003ea0    0x52    add a5,a5,s1
    0x84003ea2    0x54    sd zero,0(s0)
    0x84003ea6    0x58    addi s0,s0,8
    0x84003ea8    0x5a    bne s0,a5,ffffffff84003ea2 <performPageTableInvocationUnmap+0x54>
    0x84003eac    0x5e    ld a4,0(s2)
    0x84003eb0    0x62    li a5,-1
    0x84003eb2    0x64    slli a5,a5,0x27
    0x84003eb4    0x66    ld ra,40(sp)          ; stack access
    0x84003eb6    0x68    ld s0,32(sp)          ; stack access
    0x84003eb8    0x6a    addi a5,a5,-1
    0x84003eba    0x6c    and a5,a5,a4
    0x84003ebc    0x6e    sd a5,0(s2)
    0x84003ec0    0x72    ld s1,24(sp)          ; stack access
    0x84003ec2    0x74    ld s2,16(sp)          ; stack access
    0x84003ec4    0x76    li a0,0
    0x84003ec6    0x78    addi sp,sp,48
    0x84003ec8    0x7a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 70 nodes.

Section deleteASID (167 of 296)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 18 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

No stack accesses found. Code for `deleteASID`:

    0x84003d84     0x0    srli a5,a0,0x9
    0x84003d88     0x4    slli a4,a5,0x3
    0x84003d8c     0x8    auipc a5,0xb
    0x84003d90     0xc    addi a5,a5,628 # ffffffff8400f000 <riscvKSASIDTable>
    0x84003d94    0x10    add a5,a5,a4
    0x84003d96    0x12    ld a5,0(a5)
    0x84003d98    0x14    beqz a5,ffffffff84003da8 <deleteASID+0x24>
    0x84003d9a    0x16    andi a4,a0,511
    0x84003d9e    0x1a    slli a4,a4,0x3
    0x84003da0    0x1c    add a5,a5,a4
    0x84003da2    0x1e    ld a4,0(a5)
    0x84003da4    0x20    beq a4,a1,ffffffff84003daa <deleteASID+0x26>
    0x84003da8    0x24    ret
    0x84003daa    0x26    sfence.vma zero,a0
    0x84003dae    0x2a    auipc a0,0x1e
    0x84003db2    0x2e    ld a0,-1366(a0) # ffffffff84021858 <ksCurThread>
    0x84003db6    0x32    sd zero,0(a5)
    0x84003dba    0x36    j ffffffff84003c98 <setVMRoot>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 29 nodes.

Section deleteASIDPool (168 of 296)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 12 instructions.


Stack analysis
---------------

No stack accesses found. Code for `deleteASIDPool`:

    0x84003d60     0x0    srli a0,a0,0x9
    0x84003d62     0x2    slli a0,a0,0x3
    0x84003d64     0x4    auipc a5,0xb
    0x84003d68     0x8    addi a5,a5,668 # ffffffff8400f000 <riscvKSASIDTable>
    0x84003d6c     0xc    add a5,a5,a0
    0x84003d6e     0xe    ld a4,0(a5)
    0x84003d70    0x10    beq a4,a1,ffffffff84003d76 <deleteASIDPool+0x16>
    0x84003d74    0x14    ret
    0x84003d76    0x16    auipc a0,0x1e
    0x84003d7a    0x1a    ld a0,-1310(a0) # ffffffff84021858 <ksCurThread>
    0x84003d7e    0x1e    sd zero,0(a5)
    0x84003d82    0x22    j ffffffff84003c98 <setVMRoot>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 19 nodes.

Section Arch_switchToIdleThread (169 of 296)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_switchToIdleThread`:

    0x84003d56    0x0    auipc a0,0x1e
    0x84003d5a    0x4    ld a0,-1286(a0) # ffffffff84021850 <ksIdleThread>
    0x84003d5e    0x8    j ffffffff84003c98 <setVMRoot>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 5 nodes.

Section setVMRoot (170 of 296)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 72 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `setVMRoot`:

    0x84003c98     0x0    andi a0,a0,-1024
    0x84003c9c     0x4    ld a5,32(a0)
    0x84003c9e     0x6    li a4,3
    0x84003ca0     0x8    srli a5,a5,0x3b
    0x84003ca2     0xa    beq a5,a4,ffffffff84003ccc <setVMRoot+0x34>
    0x84003ca6     0xe    li a3,1
    0x84003ca8    0x10    slli a3,a3,0x20
    0x84003caa    0x12    auipc a5,0x21
    0x84003cae    0x16    addi a5,a5,854 # ffffffff84025000 <kernel_root_pageTable>
    0x84003cb2    0x1a    li a4,-1
    0x84003cb4    0x1c    add a5,a5,a3
    0x84003cb6    0x1e    srli a5,a5,0xc
    0x84003cb8    0x20    srli a3,a4,0x14
    0x84003cbc    0x24    and a5,a5,a3
    0x84003cbe    0x26    slli a4,a4,0x3f
    0x84003cc0    0x28    or a5,a5,a4
    0x84003cc2    0x2a    csrw satp,a5
    0x84003cc6    0x2e    sfence.vma
    0x84003cca    0x32    ret
    0x84003ccc    0x34    ld a5,40(a0)
    0x84003cce    0x36    addi sp,sp,-48
    0x84003cd0    0x38    sd s0,32(sp)          ; stack access
    0x84003cd2    0x3a    srli s0,a5,0x9
    0x84003cd6    0x3e    srli a3,s0,0x26
    0x84003cda    0x42    li a4,-1
    0x84003cdc    0x44    srli a2,a4,0x19
    0x84003ce0    0x48    sd ra,40(sp)          ; stack access
    0x84003ce2    0x4a    sd s1,24(sp)          ; stack access
    0x84003ce4    0x4c    andi a3,a3,1
    0x84003ce6    0x4e    addi a0,a0,32
    0x84003cea    0x52    and s0,s0,a2
    0x84003cec    0x54    beqz a3,ffffffff84003cf2 <setVMRoot+0x5a>
    0x84003cee    0x56    slli a4,a4,0x27
    0x84003cf0    0x58    or s0,s0,a4
    0x84003cf2    0x5a    srli s1,a5,0x30
    0x84003cf6    0x5e    mv a0,s1
    0x84003cf8    0x60    jal ra,ffffffff840031cc <findVSpaceForASID>
    0x84003cfc    0x64    sd a0,0(sp)           ; stack access
    0x84003cfe    0x66    sd a1,8(sp)           ; stack access
    0x84003d00    0x68    li a4,-1
    0x84003d02    0x6a    bnez a0,ffffffff84003d30 <setVMRoot+0x98>
    0x84003d04    0x6c    bne a1,s0,ffffffff84003d30 <setVMRoot+0x98>
    0x84003d08    0x70    li a5,1
    0x84003d0a    0x72    slli a5,a5,0x26
    0x84003d0c    0x74    add a5,a5,s0
    0x84003d0e    0x76    srli a5,a5,0xc
    0x84003d10    0x78    srli s0,a4,0x14
    0x84003d14    0x7c    and a5,a5,s0
    0x84003d16    0x7e    slli s1,s1,0x2c
    0x84003d18    0x80    or a5,a5,s1
    0x84003d1a    0x82    slli a4,a4,0x3f
    0x84003d1c    0x84    or a5,a5,a4
    0x84003d1e    0x86    csrw satp,a5
    0x84003d22    0x8a    sfence.vma
    0x84003d26    0x8e    ld ra,40(sp)          ; stack access
    0x84003d28    0x90    ld s0,32(sp)          ; stack access
    0x84003d2a    0x92    ld s1,24(sp)          ; stack access
    0x84003d2c    0x94    addi sp,sp,48
    0x84003d2e    0x96    ret
    0x84003d30    0x98    li a3,1
    0x84003d32    0x9a    slli a3,a3,0x20
    0x84003d34    0x9c    auipc a5,0x21
    0x84003d38    0xa0    addi a5,a5,716 # ffffffff84025000 <kernel_root_pageTable>
    0x84003d3c    0xa4    add a5,a5,a3
    0x84003d3e    0xa6    srli a5,a5,0xc
    0x84003d40    0xa8    srli a3,a4,0x14
    0x84003d44    0xac    and a5,a5,a3
    0x84003d46    0xae    slli a4,a4,0x3f
    0x84003d48    0xb0    or a5,a5,a4
    0x84003d4a    0xb2    csrw satp,a5
    0x84003d4e    0xb6    sfence.vma
    0x84003d52    0xba    j ffffffff84003d26 <setVMRoot+0x8e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
72 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 99 nodes.

Section unmapPageTable (171 of 296)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 51 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

11 stack accesses found. Annotated code for `unmapPageTable`:

    0x84003b8c     0x0    addi sp,sp,-48
    0x84003b8e     0x2    sd s0,32(sp)          ; stack access
    0x84003b90     0x4    sd s1,24(sp)          ; stack access
    0x84003b92     0x6    sd ra,40(sp)          ; stack access
    0x84003b94     0x8    mv s1,a1
    0x84003b96     0xa    mv s0,a2
    0x84003b98     0xc    jal ra,ffffffff840031cc <findVSpaceForASID>
    0x84003b9c    0x10    sd a0,0(sp)           ; stack access
    0x84003b9e    0x12    sd a1,8(sp)           ; stack access
    0x84003ba0    0x14    bnez a0,ffffffff84003be8 <unmapPageTable+0x5c>
    0x84003ba2    0x16    mv a5,a1
    0x84003ba4    0x18    lui a0,0xfff00
    0x84003ba8    0x1c    li a1,-1
    0x84003baa    0x1e    li a3,30
    0x84003bac    0x20    li a2,0
    0x84003bae    0x22    srli a0,a0,0x8
    0x84003bb0    0x24    slli a1,a1,0x26
    0x84003bb2    0x26    li a7,12
    0x84003bb4    0x28    srl a4,s1,a3
    0x84003bb8    0x2c    andi a4,a4,511
    0x84003bbc    0x30    slli a4,a4,0x3
    0x84003bbe    0x32    beq s0,a5,ffffffff84003c02 <unmapPageTable+0x76>
    0x84003bc2    0x36    add a2,a5,a4
    0x84003bc6    0x3a    ld a5,0(a2)
    0x84003bc8    0x3c    srli a6,a5,0x2
    0x84003bcc    0x40    srli a4,a5,0x1
    0x84003bd0    0x44    or a4,a4,a6
    0x84003bd4    0x48    srli a6,a5,0x3
    0x84003bd8    0x4c    or a4,a4,a6
    0x84003bdc    0x50    andi a6,a5,1
    0x84003be0    0x54    andi a4,a4,1
    0x84003be2    0x56    beqz a6,ffffffff84003be8 <unmapPageTable+0x5c>
    0x84003be6    0x5a    beqz a4,ffffffff84003bf2 <unmapPageTable+0x66>
    0x84003be8    0x5c    ld ra,40(sp)          ; stack access
    0x84003bea    0x5e    ld s0,32(sp)          ; stack access
    0x84003bec    0x60    ld s1,24(sp)          ; stack access
    0x84003bee    0x62    addi sp,sp,48
    0x84003bf0    0x64    ret
    0x84003bf2    0x66    slli a5,a5,0x2
    0x84003bf4    0x68    and a5,a5,a0
    0x84003bf6    0x6a    addiw a3,a3,-9
    0x84003bf8    0x6c    add a5,a5,a1
    0x84003bfa    0x6e    bne a3,a7,ffffffff84003bb4 <unmapPageTable+0x28>
    0x84003bfe    0x72    bne s0,a5,ffffffff84003be8 <unmapPageTable+0x5c>
    0x84003c02    0x76    sd zero,0(a2)
    0x84003c06    0x7a    sfence.vma
    0x84003c0a    0x7e    ld ra,40(sp)          ; stack access
    0x84003c0c    0x80    ld s0,32(sp)          ; stack access
    0x84003c0e    0x82    ld s1,24(sp)          ; stack access
    0x84003c10    0x84    addi sp,sp,48
    0x84003c12    0x86    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 80 nodes.

Section handleVMFault (172 of 296)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 37 instructions.

Skipping 143026f3 csrr a3,stval


Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x84003b1a     0x0    csrr a3,stval
    0x84003b1e     0x4    li a5,15
    0x84003b20     0x6    bltu a5,a1,ffffffff84003b84 <handleVMFault+0x6a>
    0x84003b24     0xa    auipc a4,0xa
    0x84003b28     0xe    addi a4,a4,-680 # ffffffff8400d87c <msgRegisters+0x134>
    0x84003b2c    0x12    slli a1,a1,0x2
    0x84003b2e    0x14    add a1,a1,a4
    0x84003b30    0x16    lw a5,0(a1)
    0x84003b32    0x18    add a5,a5,a4
    0x84003b34    0x1a    jr a5
    0x84003b36    0x1c    lui a5,0x38000
    0x84003b3a    0x20    auipc a4,0xc
    0x84003b3e    0x24    addi a4,a4,1222 # ffffffff84010000 <intStateIRQNode>
    0x84003b42    0x28    addi a5,a5,6
    0x84003b44    0x2a    sd a5,-1920(a4)
    0x84003b48    0x2e    sd a3,-1912(a4)
    0x84003b4c    0x32    li a0,1
    0x84003b4e    0x34    ret
    0x84003b50    0x36    lui a5,0x28000
    0x84003b54    0x3a    auipc a4,0xc
    0x84003b58    0x3e    addi a4,a4,1196 # ffffffff84010000 <intStateIRQNode>
    0x84003b5c    0x42    addi a5,a5,6
    0x84003b5e    0x44    sd a5,-1920(a4)
    0x84003b62    0x48    sd a3,-1912(a4)
    0x84003b66    0x4c    li a0,1
    0x84003b68    0x4e    ret
    0x84003b6a    0x50    lui a5,0x8080
    0x84003b6e    0x54    auipc a4,0xc
    0x84003b72    0x58    addi a4,a4,1170 # ffffffff84010000 <intStateIRQNode>
    0x84003b76    0x5c    addi a5,a5,6
    0x84003b78    0x5e    sd a5,-1920(a4)
    0x84003b7c    0x62    sd a3,-1912(a4)
    0x84003b80    0x66    li a0,1
    0x84003b82    0x68    ret
    0x84003b84    0x6a    addi sp,sp,-16
    0x84003b86    0x6c    sd ra,8(sp)           ; stack access
    0x84003b88    0x6e    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 53 nodes.

Section lookupIPCBuffer (173 of 296)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 45 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x84003858     0x0    andi a4,a1,-1024
    0x8400385c     0x4    ld a5,64(a4)
    0x8400385e     0x6    li a3,1
    0x84003860     0x8    srli a2,a5,0x3b
    0x84003864     0xc    bne a2,a3,ffffffff840038c6 <lookupIPCBuffer+0x6e>
    0x84003868    0x10    srli a3,a5,0x36
    0x8400386c    0x14    andi a3,a3,1
    0x8400386e    0x16    bnez a3,ffffffff840038c6 <lookupIPCBuffer+0x6e>
    0x84003870    0x18    srli a3,a5,0x37
    0x84003874    0x1c    andi a3,a3,3
    0x84003876    0x1e    li a2,3
    0x84003878    0x20    addi a4,a4,64
    0x8400387c    0x24    bne a3,a2,ffffffff840038be <lookupIPCBuffer+0x66>
    0x84003880    0x28    ld a0,8(a4)
    0x84003882    0x2a    li a3,-1
    0x84003884    0x2c    srli a4,a3,0x19
    0x84003888    0x30    srli a0,a0,0x9
    0x8400388a    0x32    srli a2,a0,0x26
    0x8400388e    0x36    andi a2,a2,1
    0x84003890    0x38    and a4,a4,a0
    0x84003892    0x3a    beqz a2,ffffffff84003898 <lookupIPCBuffer+0x40>
    0x84003894    0x3c    slli a3,a3,0x27
    0x84003896    0x3e    or a4,a4,a3
    0x84003898    0x40    srli a5,a5,0x39
    0x8400389a    0x42    andi a5,a5,3
    0x8400389c    0x44    li a2,3
    0x8400389e    0x46    ld a3,384(a1)
    0x840038a2    0x4a    beq a5,a2,ffffffff840038ca <lookupIPCBuffer+0x72>
    0x840038a6    0x4e    slli a0,a5,0x3
    0x840038aa    0x52    add a5,a5,a0
    0x840038ac    0x54    addi a5,a5,12
    0x840038ae    0x56    li a0,-1
    0x840038b0    0x58    sll a0,a0,a5
    0x840038b4    0x5c    not a0,a0
    0x840038b8    0x60    and a0,a0,a3
    0x840038ba    0x62    add a0,a0,a4
    0x840038bc    0x64    ret
    0x840038be    0x66    bnez a0,ffffffff840038c6 <lookupIPCBuffer+0x6e>
    0x840038c0    0x68    li a2,2
    0x840038c2    0x6a    beq a3,a2,ffffffff84003880 <lookupIPCBuffer+0x28>
    0x840038c6    0x6e    li a0,0
    0x840038c8    0x70    ret
    0x840038ca    0x72    addi sp,sp,-16
    0x840038cc    0x74    sd ra,8(sp)           ; stack access
    0x840038ce    0x76    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 66 nodes.

Section Arch_setMRs_fault (174 of 296)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 17 instructions.

SRLIW..

Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x840036ea     0x0    li a5,6
    0x840036ec     0x2    bne a3,a5,ffffffff84003712 <Arch_setMRs_fault+0x28>
    0x840036f0     0x6    ld a5,312(a0)
    0x840036f4     0xa    ld a2,264(a0)
    0x840036f8     0xe    ld a3,320(a0)
    0x840036fc    0x12    srli a4,a5,0x13
    0x84003700    0x16    andi a4,a4,1
    0x84003702    0x18    srliw a5,a5,0x1b
    0x84003706    0x1c    sd a2,88(a1)
    0x84003708    0x1e    sd a3,96(a1)
    0x8400370a    0x20    sd a4,104(a1)
    0x8400370c    0x22    sd a5,112(a1)
    0x8400370e    0x24    li a0,4
    0x84003710    0x26    ret
    0x84003712    0x28    addi sp,sp,-16
    0x84003714    0x2a    sd ra,8(sp)           ; stack access
    0x84003716    0x2c    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 29 nodes.

Section Arch_handleFaultReply (175 of 296)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x840036d8    0x0    li a5,6
    0x840036da    0x2    bne a2,a5,ffffffff840036e2 <Arch_handleFaultReply+0xa>
    0x840036de    0x6    li a0,1
    0x840036e0    0x8    ret
    0x840036e2    0xa    addi sp,sp,-16
    0x840036e4    0xc    sd ra,8(sp)           ; stack access
    0x840036e6    0xe    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section interrupt (176 of 296)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840030c4    0x0    sd ra,272(t0)
    0x840030c8    0x4    j ffffffff8400c9c0 <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (177 of 296)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840030bc    0x0    sd ra,272(t0)
    0x840030c0    0x4    j ffffffff8400cc9e <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (178 of 296)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840030b2    0x0    addi ra,ra,4
    0x840030b4    0x2    sd ra,272(t0)
    0x840030b8    0x6    j ffffffff8400d6c8 <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section create_kernel_untypeds (179 of 296)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 44 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x84001c38     0x0    addi sp,sp,-80
    0x84001c3a     0x2    sd s1,56(sp)          ; stack access
    0x84001c3c     0x4    mv s1,a4
    0x84001c3e     0x6    mv a5,s1
    0x84001c40     0x8    mv a4,a3
    0x84001c42     0xa    mv a3,a2
    0x84001c44     0xc    li a2,0
    0x84001c46     0xe    sd ra,72(sp)          ; stack access
    0x84001c48    0x10    sd s0,64(sp)          ; stack access
    0x84001c4a    0x12    sd s2,48(sp)          ; stack access
    0x84001c4c    0x14    sd a0,16(sp)          ; stack access
    0x84001c4e    0x16    sd a1,24(sp)          ; stack access
    0x84001c50    0x18    jal ra,ffffffff84001a54 <create_untypeds_for_region>
    0x84001c54    0x1c    beqz a0,ffffffff84001c94 <create_kernel_untypeds+0x5c>
    0x84001c56    0x1e    auipc s0,0xd
    0x84001c5a    0x22    addi s0,s0,-1310 # ffffffff8400e738 <ndks_boot+0x338>
    0x84001c5e    0x26    auipc s2,0xd
    0x84001c62    0x2a    addi s2,s2,-1062 # ffffffff8400e838 <ndks_boot+0x438>
    0x84001c66    0x2e    ld a3,0(s0)
    0x84001c68    0x30    ld a4,8(s0)
    0x84001c6a    0x32    ld a0,16(sp)          ; stack access
    0x84001c6c    0x34    ld a1,24(sp)          ; stack access
    0x84001c6e    0x36    mv a5,s1
    0x84001c70    0x38    li a2,0
    0x84001c72    0x3a    sd zero,0(s0)
    0x84001c76    0x3e    sd zero,8(s0)
    0x84001c7a    0x42    jal ra,ffffffff84001a54 <create_untypeds_for_region>
    0x84001c7e    0x46    addi s0,s0,16
    0x84001c80    0x48    beqz a0,ffffffff84001c94 <create_kernel_untypeds+0x5c>
    0x84001c82    0x4a    bne s0,s2,ffffffff84001c66 <create_kernel_untypeds+0x2e>
    0x84001c86    0x4e    ld ra,72(sp)          ; stack access
    0x84001c88    0x50    ld s0,64(sp)          ; stack access
    0x84001c8a    0x52    ld s1,56(sp)          ; stack access
    0x84001c8c    0x54    ld s2,48(sp)          ; stack access
    0x84001c8e    0x56    li a0,1
    0x84001c90    0x58    addi sp,sp,80
    0x84001c92    0x5a    ret
    0x84001c94    0x5c    ld ra,72(sp)          ; stack access
    0x84001c96    0x5e    ld s0,64(sp)          ; stack access
    0x84001c98    0x60    ld s1,56(sp)          ; stack access
    0x84001c9a    0x62    ld s2,48(sp)          ; stack access
    0x84001c9c    0x64    li a0,0
    0x84001c9e    0x66    addi sp,sp,80
    0x84001ca0    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 74 nodes.

Section create_device_untypeds (180 of 296)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 74 instructions.


Stack analysis
---------------

28 stack accesses found. Annotated code for `create_device_untypeds`:

    0x84001b90     0x0    addi sp,sp,-80
    0x84001b92     0x2    sd s2,48(sp)          ; stack access
    0x84001b94     0x4    auipc s2,0xd
    0x84001b98     0x8    addi s2,s2,-1940 # ffffffff8400e400 <ndks_boot>
    0x84001b9c     0xc    ld a5,816(s2)
    0x84001ba0    0x10    sd s3,40(sp)          ; stack access
    0x84001ba2    0x12    sd ra,72(sp)          ; stack access
    0x84001ba4    0x14    sd s0,64(sp)          ; stack access
    0x84001ba6    0x16    sd s1,56(sp)          ; stack access
    0x84001ba8    0x18    sd s4,32(sp)          ; stack access
    0x84001baa    0x1a    sd a0,0(sp)           ; stack access
    0x84001bac    0x1c    sd a1,8(sp)           ; stack access
    0x84001bae    0x1e    mv s3,a2
    0x84001bb0    0x20    beqz a5,ffffffff84001c32 <create_device_untypeds+0xa2>
    0x84001bb2    0x22    li s4,-1
    0x84001bb4    0x24    mv s0,s2
    0x84001bb6    0x26    li s1,0
    0x84001bb8    0x28    li a3,0
    0x84001bba    0x2a    slli s4,s4,0x26
    0x84001bbc    0x2c    j ffffffff84001bca <create_device_untypeds+0x3a>
    0x84001bbe    0x2e    ld a4,816(s2)
    0x84001bc2    0x32    ld a3,8(s0)
    0x84001bc4    0x34    addi s0,s0,16
    0x84001bc6    0x36    bgeu s1,a4,ffffffff84001bf8 <create_device_untypeds+0x68>
    0x84001bca    0x3a    ld a4,0(s0)
    0x84001bcc    0x3c    addi s1,s1,1
    0x84001bce    0x3e    bgeu a3,a4,ffffffff84001bbe <create_device_untypeds+0x2e>
    0x84001bd2    0x42    ld a0,0(sp)           ; stack access
    0x84001bd4    0x44    ld a1,8(sp)           ; stack access
    0x84001bd6    0x46    add a3,a3,s4
    0x84001bd8    0x48    add a4,a4,s4
    0x84001bda    0x4a    mv a5,s3
    0x84001bdc    0x4c    li a2,1
    0x84001bde    0x4e    sd a3,16(sp)          ; stack access
    0x84001be0    0x50    sd a4,24(sp)          ; stack access
    0x84001be2    0x52    jal ra,ffffffff84001a54 <create_untypeds_for_region>
    0x84001be6    0x56    bnez a0,ffffffff84001bbe <create_device_untypeds+0x2e>
    0x84001be8    0x58    ld ra,72(sp)          ; stack access
    0x84001bea    0x5a    ld s0,64(sp)          ; stack access
    0x84001bec    0x5c    ld s1,56(sp)          ; stack access
    0x84001bee    0x5e    ld s2,48(sp)          ; stack access
    0x84001bf0    0x60    ld s3,40(sp)          ; stack access
    0x84001bf2    0x62    ld s4,32(sp)          ; stack access
    0x84001bf4    0x64    addi sp,sp,80
    0x84001bf6    0x66    ret
    0x84001bf8    0x68    lui a5,0xfc000
    0x84001bfc    0x6c    srli a5,a5,0x19
    0x84001bfe    0x6e    li a0,1
    0x84001c00    0x70    bltu a5,a3,ffffffff84001be8 <create_device_untypeds+0x58>
    0x84001c04    0x74    li a5,-1
    0x84001c06    0x76    slli a5,a5,0x26
    0x84001c08    0x78    add a3,a3,a5
    0x84001c0a    0x7a    ld a0,0(sp)           ; stack access
    0x84001c0c    0x7c    ld a1,8(sp)           ; stack access
    0x84001c0e    0x7e    li a4,-1
    0x84001c10    0x80    srli a4,a4,0x1a
    0x84001c12    0x82    mv a5,s3
    0x84001c14    0x84    li a2,1
    0x84001c16    0x86    sd a3,16(sp)          ; stack access
    0x84001c18    0x88    sd a4,24(sp)          ; stack access
    0x84001c1a    0x8a    jal ra,ffffffff84001a54 <create_untypeds_for_region>
    0x84001c1e    0x8e    beqz a0,ffffffff84001be8 <create_device_untypeds+0x58>
    0x84001c20    0x90    ld ra,72(sp)          ; stack access
    0x84001c22    0x92    ld s0,64(sp)          ; stack access
    0x84001c24    0x94    ld s1,56(sp)          ; stack access
    0x84001c26    0x96    ld s2,48(sp)          ; stack access
    0x84001c28    0x98    ld s3,40(sp)          ; stack access
    0x84001c2a    0x9a    ld s4,32(sp)          ; stack access
    0x84001c2c    0x9c    li a0,1
    0x84001c2e    0x9e    addi sp,sp,80
    0x84001c30    0xa0    ret
    0x84001c32    0xa2    li a3,-1
    0x84001c34    0xa4    slli a3,a3,0x26
    0x84001c36    0xa6    j ffffffff84001c0a <create_device_untypeds+0x7a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 122 nodes.

Section populate_bi_frame (181 of 296)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 67 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `populate_bi_frame`:

    0x84001998     0x0    addi sp,sp,-48
    0x8400199a     0x2    sd s1,24(sp)          ; stack access
    0x8400199c     0x4    auipc s1,0xd
    0x840019a0     0x8    addi s1,s1,-1436 # ffffffff8400e400 <ndks_boot>
    0x840019a4     0xc    ld a5,1136(s1)
    0x840019a8    0x10    lui a4,0x1
    0x840019aa    0x12    sd s0,32(sp)          ; stack access
    0x840019ac    0x14    sd s2,16(sp)          ; stack access
    0x840019ae    0x16    sd s3,8(sp)           ; stack access
    0x840019b0    0x18    sd s4,0(sp)           ; stack access
    0x840019b2    0x1a    sd ra,40(sp)          ; stack access
    0x840019b4    0x1c    mv s2,a0
    0x840019b6    0x1e    mv s3,a1
    0x840019b8    0x20    mv s4,a2
    0x840019ba    0x22    mv s0,a3
    0x840019bc    0x24    add a4,a4,a5
    0x840019be    0x26    sd zero,0(a5) # 2000 <KERNEL_OFFSET-0xfffffffeffffe000>
    0x840019c2    0x2a    addi a5,a5,8
    0x840019c4    0x2c    bne a4,a5,ffffffff840019be <populate_bi_frame+0x26>
    0x840019c8    0x30    beqz s0,ffffffff84001a06 <populate_bi_frame+0x6e>
    0x840019ca    0x32    addi a0,s0,-1
    0x840019ce    0x36    srli a0,a0,0xc
    0x840019d0    0x38    addi a0,a0,1
    0x840019d2    0x3a    slli a0,a0,0xc
    0x840019d4    0x3c    jal ra,ffffffff8400c4ac <__clzdi2>
    0x840019d8    0x40    ld a4,1144(s1)
    0x840019dc    0x44    li a3,63
    0x840019e0    0x48    sub a3,a3,a0
    0x840019e2    0x4a    li a2,1
    0x840019e4    0x4c    sll a3,a2,a3
    0x840019e8    0x50    mv a5,a4
    0x840019ea    0x52    bgeu a3,s0,ffffffff840019f8 <populate_bi_frame+0x60>
    0x840019ee    0x56    li a3,64
    0x840019f2    0x5a    sub a3,a3,a0
    0x840019f4    0x5c    sll a3,a2,a3
    0x840019f8    0x60    beqz a3,ffffffff84001a06 <populate_bi_frame+0x6e>
    0x840019fa    0x62    add a4,a4,a3
    0x840019fc    0x64    sd zero,0(a5)
    0x84001a00    0x68    addi a5,a5,8
    0x84001a02    0x6a    bne a5,a4,ffffffff840019fc <populate_bi_frame+0x64>
    0x84001a06    0x6e    ld a5,1136(s1)
    0x84001a0a    0x72    auipc a4,0x20
    0x84001a0e    0x76    ld a4,-514(a4) # ffffffff84021808 <ksDomScheduleIdx>
    0x84001a12    0x7a    slli a3,a4,0x4
    0x84001a16    0x7e    auipc a4,0xc
    0x84001a1a    0x82    addi a4,a4,986 # ffffffff8400ddf0 <syscall_fault_message>
    0x84001a1e    0x86    add a4,a4,a3
    0x84001a20    0x88    li a3,15
    0x84001a22    0x8a    sd a3,1088(s1)
    0x84001a26    0x8e    sd a5,1080(s1)
    0x84001a2a    0x92    ld a4,80(a4)
    0x84001a2c    0x94    ld ra,40(sp)          ; stack access
    0x84001a2e    0x96    sd s0,0(a5)
    0x84001a30    0x98    ld s0,32(sp)          ; stack access
    0x84001a32    0x9a    li a3,19
    0x84001a34    0x9c    sd s2,8(a5)
    0x84001a38    0xa0    sd s3,16(a5)
    0x84001a3c    0xa4    sd s4,32(a5)
    0x84001a40    0xa8    sd zero,24(a5)
    0x84001a44    0xac    sd a3,136(a5)
    0x84001a46    0xae    sd a4,144(a5)
    0x84001a48    0xb0    ld s1,24(sp)          ; stack access
    0x84001a4a    0xb2    ld s2,16(sp)          ; stack access
    0x84001a4c    0xb4    ld s3,8(sp)           ; stack access
    0x84001a4e    0xb6    ld s4,0(sp)           ; stack access
    0x84001a50    0xb8    addi sp,sp,48
    0x84001a52    0xba    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
67 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 107 nodes.

Section calculate_extra_bi_size_bits (182 of 296)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 24 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x8400195a     0x0    beqz a0,ffffffff84001994 <calculate_extra_bi_size_bits+0x3a>
    0x8400195c     0x2    addi sp,sp,-16
    0x8400195e     0x4    sd s0,0(sp)           ; stack access
    0x84001960     0x6    mv s0,a0
    0x84001962     0x8    addi a0,a0,-1
    0x84001964     0xa    srli a0,a0,0xc
    0x84001966     0xc    addi a0,a0,1
    0x84001968     0xe    slli a0,a0,0xc
    0x8400196a    0x10    sd ra,8(sp)           ; stack access
    0x8400196c    0x12    jal ra,ffffffff8400c4ac <__clzdi2>
    0x84001970    0x16    li a5,63
    0x84001974    0x1a    mv a4,a0
    0x84001976    0x1c    sub a0,a5,a0
    0x8400197a    0x20    li a5,1
    0x8400197c    0x22    sll a5,a5,a0
    0x84001980    0x26    bgeu a5,s0,ffffffff8400198c <calculate_extra_bi_size_bits+0x32>
    0x84001984    0x2a    li a5,64
    0x84001988    0x2e    sub a0,a5,a4
    0x8400198c    0x32    ld ra,8(sp)           ; stack access
    0x8400198e    0x34    ld s0,0(sp)           ; stack access
    0x84001990    0x36    addi sp,sp,16
    0x84001992    0x38    ret
    0x84001994    0x3a    li a0,0
    0x84001996    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 35 nodes.

Section create_idle_thread (183 of 296)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 59 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `create_idle_thread`:

    0x840016d0     0x0    auipc a5,0xd
    0x840016d4     0x4    addi a5,a5,-1232 # ffffffff8400e200 <ksIdleThreadTCB+0x200>
    0x840016d8     0x8    ld a4,280(a5)
    0x840016dc     0xc    addi sp,sp,-48
    0x840016de     0xe    sd s0,32(sp)          ; stack access
    0x840016e0    0x10    sd ra,40(sp)          ; stack access
    0x840016e2    0x12    auipc a3,0x2
    0x840016e6    0x16    addi a3,a3,-1558 # ffffffff840030cc <idle_thread>
    0x840016ea    0x1a    andi a4,a4,-16
    0x840016ec    0x1c    sd a3,272(a5)
    0x840016f0    0x20    li a3,288
    0x840016f4    0x24    ori a4,a4,7
    0x840016f8    0x28    auipc s0,0x20
    0x840016fc    0x2c    addi s0,s0,344 # ffffffff84021850 <ksIdleThread>
    0x84001700    0x30    sd a3,256(a5)
    0x84001704    0x34    auipc a3,0x20
    0x84001708    0x38    addi a3,a3,252 # ffffffff84021800 <tlbLockCount>
    0x8400170c    0x3c    sd a4,280(a5)
    0x84001710    0x40    sd a5,0(s0)
    0x84001712    0x42    sd a3,8(a5)
    0x84001714    0x44    auipc a4,0x20
    0x84001718    0x48    ld a4,324(a4) # ffffffff84021858 <ksCurThread>
    0x8400171c    0x4c    beq a5,a4,ffffffff84001782 <create_idle_thread+0xb2>
    0x84001720    0x50    auipc a3,0xe
    0x84001724    0x54    sd zero,552(a3) # ffffffff8400f948 <ksIdleThreadSC+0x48>
    0x84001728    0x58    auipc a3,0xe
    0x8400172c    0x5c    sd zero,472(a3) # ffffffff8400f900 <ksIdleThreadSC>
    0x84001730    0x60    auipc a4,0xf
    0x84001734    0x64    addi a4,a4,-1840 # ffffffff84010000 <intStateIRQNode>
    0x84001738    0x68    li a3,2
    0x8400173a    0x6a    sd a3,-1728(a4)
    0x8400173e    0x6e    auipc a2,0xe
    0x84001742    0x72    addi a2,a2,450 # ffffffff8400f900 <ksIdleThreadSC>
    0x84001746    0x76    lui a3,0x1
    0x84001748    0x78    sd a2,368(a5)
    0x8400174c    0x7c    auipc a0,0xe
    0x84001750    0x80    addi a0,a0,524 # ffffffff8400f958 <ksIdleThreadSC+0x58>
    0x84001754    0x84    auipc a1,0x20
    0x84001758    0x88    ld a1,220(a1) # ffffffff84021830 <ksCurTime>
    0x8400175c    0x8c    addi a3,a3,904 # 1388 <KERNEL_OFFSET-0xfffffffeffffec78>
    0x84001760    0x90    sd a3,8(a0)
    0x84001762    0x92    sd a1,0(a0)
    0x84001764    0x94    li a3,1
    0x84001766    0x96    sd a3,-1712(a4)
    0x8400176a    0x9a    sd a1,104(a2)
    0x8400176c    0x9c    ld ra,40(sp)          ; stack access
    0x8400176e    0x9e    ld s0,32(sp)          ; stack access
    0x84001770    0xa0    auipc a3,0xe
    0x84001774    0xa4    sd zero,512(a3) # ffffffff8400f970 <ksIdleThreadSC+0x70>
    0x84001778    0xa8    sd a5,-1768(a4)
    0x8400177c    0xac    li a0,1
    0x8400177e    0xae    addi sp,sp,48
    0x84001780    0xb0    ret
    0x84001782    0xb2    auipc a4,0x20
    0x84001786    0xb6    ld a4,198(a4) # ffffffff84021848 <ksSchedulerAction>
    0x8400178a    0xba    bnez a4,ffffffff84001720 <create_idle_thread+0x50>
    0x8400178c    0xbc    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84001790    0xc0    ld a5,0(s0)
    0x84001792    0xc2    j ffffffff84001720 <create_idle_thread+0x50>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
59 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 89 nodes.

Section configureIdleThread (184 of 296)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `configureIdleThread`:

    0x84001688     0x0    ld a5,280(a0) # ffffffffc0000118 <ki_end+0x3bfd9118>
    0x8400168c     0x4    auipc a4,0x2
    0x84001690     0x8    addi a4,a4,-1472 # ffffffff840030cc <idle_thread>
    0x84001694     0xc    sd a4,272(a0)
    0x84001698    0x10    andi a5,a5,-16
    0x8400169a    0x12    li a4,288
    0x8400169e    0x16    ori a5,a5,7
    0x840016a2    0x1a    sd a4,256(a0)
    0x840016a6    0x1e    auipc a4,0x20
    0x840016aa    0x22    addi a4,a4,346 # ffffffff84021800 <tlbLockCount>
    0x840016ae    0x26    sd a5,280(a0)
    0x840016b2    0x2a    sd a4,8(a0)
    0x840016b4    0x2c    auipc a5,0x20
    0x840016b8    0x30    ld a5,420(a5) # ffffffff84021858 <ksCurThread>
    0x840016bc    0x34    beq a0,a5,ffffffff840016c2 <configureIdleThread+0x3a>
    0x840016c0    0x38    ret
    0x840016c2    0x3a    auipc a5,0x20
    0x840016c6    0x3e    ld a5,390(a5) # ffffffff84021848 <ksSchedulerAction>
    0x840016ca    0x42    bnez a5,ffffffff840016c0 <configureIdleThread+0x38>
    0x840016cc    0x44    j ffffffff84004c1c <rescheduleRequired>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 33 nodes.

Section create_it_asid_pool (185 of 296)
========================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 39 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x84001110     0x0    addi sp,sp,-80
    0x84001112     0x2    sd s0,64(sp)          ; stack access
    0x84001114     0x4    auipc s0,0xd
    0x84001118     0x8    ld s0,1868(s0) # ffffffff8400e860 <rootserver+0x10>
    0x8400111c     0xc    slli s0,s0,0x19
    0x8400111e     0xe    li a5,13
    0x84001120    0x10    slli a5,a5,0x3b
    0x84001122    0x12    srli s0,s0,0x1b
    0x84001124    0x14    sd ra,72(sp)          ; stack access
    0x84001126    0x16    sd s1,56(sp)          ; stack access
    0x84001128    0x18    sd s2,48(sp)          ; stack access
    0x8400112a    0x1a    sd s3,40(sp)          ; stack access
    0x8400112c    0x1c    or s0,s0,a5
    0x8400112e    0x1e    mv s1,a0
    0x84001130    0x20    mv s2,a1
    0x84001132    0x22    li s3,3
    0x84001134    0x24    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84001138    0x28    mv a1,s2
    0x8400113a    0x2a    sd s0,192(a0)
    0x8400113c    0x2c    sd s3,216(a0)
    0x84001140    0x30    sd zero,200(a0)
    0x84001144    0x34    sd zero,208(a0)
    0x84001148    0x38    mv a0,s1
    0x8400114a    0x3a    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x8400114e    0x3e    li a5,11
    0x84001150    0x40    slli a5,a5,0x3b
    0x84001152    0x42    sd s3,184(a0)
    0x84001156    0x46    ld ra,72(sp)          ; stack access
    0x84001158    0x48    sd a5,160(a0)
    0x8400115a    0x4a    sd zero,168(a0)
    0x8400115e    0x4e    sd zero,176(a0)
    0x84001162    0x52    mv a0,s0
    0x84001164    0x54    ld s0,64(sp)          ; stack access
    0x84001166    0x56    ld s1,56(sp)          ; stack access
    0x84001168    0x58    ld s2,48(sp)          ; stack access
    0x8400116a    0x5a    ld s3,40(sp)          ; stack access
    0x8400116c    0x5c    li a1,0
    0x8400116e    0x5e    addi sp,sp,80
    0x84001170    0x60    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 61 nodes.

Section create_frames_of_region (186 of 296)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 212 instructions.


Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
58 stack accesses found. Annotated code for `create_frames_of_region`:

    0x84000ed4      0x0    addi sp,sp,-272
    0x84000ed6      0x2    auipc t1,0xd
    0x84000eda      0x6    addi t1,t1,1322 # ffffffff8400e400 <ndks_boot>
    0x84000ede      0xa    sd a4,104(sp)         ; stack access
    0x84000ee0      0xc    ld a4,1088(t1)
    0x84000ee4     0x10    sd s10,176(sp)        ; stack access
    0x84000ee6     0x12    sd ra,264(sp)         ; stack access
    0x84000ee8     0x14    sd s0,256(sp)         ; stack access
    0x84000eea     0x16    sd s1,248(sp)         ; stack access
    0x84000eec     0x18    sd s2,240(sp)         ; stack access
    0x84000eee     0x1a    sd s3,232(sp)         ; stack access
    0x84000ef0     0x1c    sd s4,224(sp)         ; stack access
    0x84000ef2     0x1e    sd s5,216(sp)         ; stack access
    0x84000ef4     0x20    sd s6,208(sp)         ; stack access
    0x84000ef6     0x22    sd s7,200(sp)         ; stack access
    0x84000ef8     0x24    sd s8,192(sp)         ; stack access
    0x84000efa     0x26    sd s9,184(sp)         ; stack access
    0x84000efc     0x28    sd s11,168(sp)        ; stack access
    0x84000efe     0x2a    sd a3,96(sp)          ; stack access
    0x84000f00     0x2c    sd a4,56(sp)          ; stack access
    0x84000f02     0x2e    mv s10,a0
    0x84000f04     0x30    bgeu a5,a6,ffffffff8400110c <create_frames_of_region+0x238>
    0x84000f08     0x34    andi a3,a1,127
    0x84000f0c     0x38    li a4,64
    0x84000f10     0x3c    sd a2,24(sp)          ; stack access
    0x84000f12     0x3e    srli s4,a1,0x3b
    0x84000f16     0x42    li s8,-32
    0x84000f18     0x44    beq a3,a4,ffffffff84000f2a <create_frames_of_region+0x56>
    0x84000f1c     0x48    andi s8,a1,63
    0x84000f20     0x4c    addiw a4,s8,1
    0x84000f24     0x50    li s8,-1
    0x84000f26     0x52    sll s8,s8,a4
    0x84000f2a     0x56    ld a0,24(sp)          ; stack access
    0x84000f2c     0x58    li s3,-1
    0x84000f2e     0x5a    srli a2,s3,0x19
    0x84000f32     0x5e    srli a4,a0,0x10
    0x84000f36     0x62    srli a3,a4,0x26
    0x84000f3a     0x66    slli s3,s3,0x27
    0x84000f3c     0x68    and a4,a4,a2
    0x84000f3e     0x6a    and a2,s8,a0
    0x84000f42     0x6e    sd a2,72(sp)          ; stack access
    0x84000f44     0x70    or a2,a4,s3
    0x84000f48     0x74    andi a3,a3,1
    0x84000f4a     0x76    sd a2,32(sp)          ; stack access
    0x84000f4c     0x78    beqz a3,ffffffff840010f2 <create_frames_of_region+0x21e>
    0x84000f50     0x7c    li s1,-1
    0x84000f52     0x7e    srli a3,s1,0x19
    0x84000f56     0x82    srli a4,a1,0x26
    0x84000f5a     0x86    and a3,a3,a1
    0x84000f5c     0x88    slli s1,s1,0x27
    0x84000f5e     0x8a    andi a4,a4,1
    0x84000f60     0x8c    or s1,s1,a3
    0x84000f62     0x8e    beqz a4,ffffffff840010ee <create_frames_of_region+0x21a>
    0x84000f66     0x92    lui a2,0xfc000
    0x84000f6a     0x96    slli a4,a1,0x1
    0x84000f6e     0x9a    srli a2,a2,0x19
    0x84000f70     0x9c    li s5,-1
    0x84000f72     0x9e    srli a3,a4,0x26
    0x84000f76     0xa2    slli s5,s5,0x27
    0x84000f78     0xa4    and a4,a4,a2
    0x84000f7a     0xa6    andi a2,s1,-1024
    0x84000f7e     0xaa    sd a2,64(sp)          ; stack access
    0x84000f80     0xac    or a2,a4,s5
    0x84000f84     0xb0    andi a3,a3,1
    0x84000f86     0xb2    sd a2,40(sp)          ; stack access
    0x84000f88     0xb4    beqz a3,ffffffff840010ea <create_frames_of_region+0x216>
    0x84000f8c     0xb8    ld a4,24(sp)          ; stack access
    0x84000f8e     0xba    li s2,-1
    0x84000f90     0xbc    srli a2,s2,0x19
    0x84000f94     0xc0    srli a4,a4,0x9
    0x84000f96     0xc2    srli a3,a4,0x26
    0x84000f9a     0xc6    slli s2,s2,0x27
    0x84000f9c     0xc8    and a4,a4,a2
    0x84000f9e     0xca    andi a3,a3,1
    0x84000fa0     0xcc    or s2,a4,s2
    0x84000fa4     0xd0    beqz a3,ffffffff840010e6 <create_frames_of_region+0x212>
    0x84000fa8     0xd4    lui a3,0xf8000
    0x84000fac     0xd8    slli a1,a1,0x2
    0x84000fae     0xda    srli a3,a3,0x19
    0x84000fb0     0xdc    li s6,-1
    0x84000fb2     0xde    srli a4,a1,0x26
    0x84000fb6     0xe2    slli s6,s6,0x27
    0x84000fb8     0xe4    and a1,a1,a3
    0x84000fba     0xe6    or a3,a1,s6
    0x84000fbe     0xea    andi a4,a4,1
    0x84000fc0     0xec    sd a3,48(sp)          ; stack access
    0x84000fc2     0xee    beqz a4,ffffffff840010e2 <create_frames_of_region+0x20e>
    0x84000fc6     0xf2    ld a4,272(sp)         ; stack access
    0x84000fc8     0xf4    li s3,1
    0x84000fca     0xf6    slli s7,s3,0x26
    0x84000fce     0xfa    slli s0,s4,0x2
    0x84000fd2     0xfe    auipc s9,0xd
    0x84000fd6    0x102    addi s9,s9,-1614 # ffffffff8400d984 <msgRegisters+0x23c>
    0x84000fda    0x106    lui t4,0xfe000
    0x84000fde    0x10a    srli s5,t4,0x10
    0x84000fe2    0x10e    slli s8,s3,0x3b
    0x84000fe6    0x112    sub s7,s7,a4
    0x84000fea    0x116    add s0,s0,s9
    0x84000fec    0x118    slli s11,a5,0x9
    0x84000ff0    0x11c    and s11,s11,s5
    0x84000ff4    0x120    mv s6,s8
    0x84000ff6    0x122    bnez a7,ffffffff840010a8 <create_frames_of_region+0x1d4>
    0x84000ffa    0x126    ld a3,1088(t1)
    0x84000ffe    0x12a    ld a4,1096(t1)
    0x84001002    0x12e    bgeu a3,a4,ffffffff8400109a <create_frames_of_region+0x1c6>
    0x84001006    0x132    li a4,24
    0x84001008    0x134    bltu a4,s4,ffffffff84001012 <create_frames_of_region+0x13e>
    0x8400100c    0x138    lw a4,0(s0)
    0x8400100e    0x13a    add a4,a4,s9
    0x84001010    0x13c    jr a4
    0x84001012    0x13e    li a1,3
    0x84001014    0x140    mv a4,s2
    0x84001016    0x142    beq s4,a1,ffffffff8400102e <create_frames_of_region+0x15a>
    0x8400101a    0x146    li a1,13
    0x8400101c    0x148    ld a4,48(sp)          ; stack access
    0x8400101e    0x14a    beq s4,a1,ffffffff8400102e <create_frames_of_region+0x15a>
    0x84001022    0x14e    li a4,0
    0x84001024    0x150    bne s4,s3,ffffffff8400102e <create_frames_of_region+0x15a>
    0x84001028    0x154    mv a4,s2
    0x8400102a    0x156    j ffffffff8400102e <create_frames_of_region+0x15a>
    0x8400102c    0x158    li a4,0
    0x8400102e    0x15a    slli a1,a3,0x5
    0x84001032    0x15e    add a4,a4,a1
    0x84001034    0x160    li a2,3
    0x84001036    0x162    sd s6,0(a4) # fffffffffc000000 <ki_end+0x77fd9000>
    0x8400103a    0x166    sd s11,8(a4)
    0x8400103e    0x16a    sd zero,16(a4)
    0x84001042    0x16e    sd a2,24(a4)
    0x84001044    0x170    addi a3,a3,1
    0x84001046    0x172    lui a4,0x1
    0x84001048    0x174    sd a3,1088(t1)
    0x8400104c    0x178    add a5,a5,a4
    0x8400104e    0x17a    bltu a5,a6,ffffffff84000fec <create_frames_of_region+0x118>
    0x84001052    0x17e    ld a5,56(sp)          ; stack access
    0x84001054    0x180    sd a3,8(s10)          ; stack access
    0x84001058    0x184    sd a5,0(s10)          ; stack access
    0x8400105c    0x188    li a5,1
    0x8400105e    0x18a    sd a5,16(s10)         ; stack access
    0x84001062    0x18e    ld ra,264(sp)         ; stack access
    0x84001064    0x190    ld s0,256(sp)         ; stack access
    0x84001066    0x192    ld s1,248(sp)         ; stack access
    0x84001068    0x194    ld s2,240(sp)         ; stack access
    0x8400106a    0x196    ld s3,232(sp)         ; stack access
    0x8400106c    0x198    ld s4,224(sp)         ; stack access
    0x8400106e    0x19a    ld s5,216(sp)         ; stack access
    0x84001070    0x19c    ld s6,208(sp)         ; stack access
    0x84001072    0x19e    ld s7,200(sp)         ; stack access
    0x84001074    0x1a0    ld s8,192(sp)         ; stack access
    0x84001076    0x1a2    ld s9,184(sp)         ; stack access
    0x84001078    0x1a4    ld s11,168(sp)        ; stack access
    0x8400107a    0x1a6    mv a0,s10
    0x8400107c    0x1a8    ld s10,176(sp)        ; stack access
    0x8400107e    0x1aa    addi sp,sp,272
    0x84001080    0x1ac    ret
    0x84001082    0x1ae    mv a4,s1
    0x84001084    0x1b0    j ffffffff8400102e <create_frames_of_region+0x15a>
    0x84001086    0x1b2    ld a4,32(sp)
    0x84001088    0x1b4    j ffffffff8400102e <create_frames_of_region+0x15a>
    0x8400108a    0x1b6    ld a4,24(sp)
    0x8400108c    0x1b8    j ffffffff8400102e <create_frames_of_region+0x15a>
    0x8400108e    0x1ba    ld a4,72(sp)
    0x84001090    0x1bc    j ffffffff8400102e <create_frames_of_region+0x15a>
    0x84001092    0x1be    ld a4,64(sp)
    0x84001094    0x1c0    j ffffffff8400102e <create_frames_of_region+0x15a>
    0x84001096    0x1c2    ld a4,40(sp)
    0x84001098    0x1c4    j ffffffff8400102e <create_frames_of_region+0x15a>
    0x8400109a    0x1c6    sd zero,0(s10)        ; stack access
    0x8400109e    0x1ca    sd zero,8(s10)        ; stack access
    0x840010a2    0x1ce    sd zero,16(s10)       ; stack access
    0x840010a6    0x1d2    j ffffffff84001062 <create_frames_of_region+0x18e>
    0x840010a8    0x1d4    add a2,s7,a5
    0x840010ac    0x1d8    slli a2,a2,0x19
    0x840010ae    0x1da    li a4,19
    0x840010b0    0x1dc    srli a2,a2,0x19
    0x840010b2    0x1de    slli a3,s3,0x30
    0x840010b6    0x1e2    slli a4,a4,0x37
    0x840010b8    0x1e4    ld a0,96(sp)          ; stack access
    0x840010ba    0x1e6    ld a1,104(sp)         ; stack access
    0x840010bc    0x1e8    or s6,a2,a4
    0x840010c0    0x1ec    or s11,s11,a3
    0x840010c4    0x1f0    mv a2,s6
    0x840010c6    0x1f2    mv a3,s11
    0x840010c8    0x1f4    sd a7,16(sp)          ; stack access
    0x840010ca    0x1f6    sd a6,8(sp)           ; stack access
    0x840010cc    0x1f8    sd a5,0(sp)           ; stack access
    0x840010ce    0x1fa    jal ra,ffffffff840005b6 <map_it_frame_cap>
    0x840010d2    0x1fe    ld a7,16(sp)          ; stack access
    0x840010d4    0x200    ld a6,8(sp)           ; stack access
    0x840010d6    0x202    ld a5,0(sp)           ; stack access
    0x840010d8    0x204    auipc t1,0xd
    0x840010dc    0x208    addi t1,t1,808 # ffffffff8400e400 <ndks_boot>
    0x840010e0    0x20c    j ffffffff84000ffa <create_frames_of_region+0x126>
    0x840010e2    0x20e    sd a1,48(sp)          ; stack access
    0x840010e4    0x210    j ffffffff84000fc6 <create_frames_of_region+0xf2>
    0x840010e6    0x212    mv s2,a4
    0x840010e8    0x214    j ffffffff84000fa8 <create_frames_of_region+0xd4>
    0x840010ea    0x216    sd a4,40(sp)          ; stack access
    0x840010ec    0x218    j ffffffff84000f8c <create_frames_of_region+0xb8>
    0x840010ee    0x21a    mv s1,a3
    0x840010f0    0x21c    j ffffffff84000f66 <create_frames_of_region+0x92>
    0x840010f2    0x21e    li s1,-1
    0x840010f4    0x220    srli a3,s1,0x19
    0x840010f8    0x224    sd a4,32(sp)          ; stack access
    0x840010fa    0x226    srli a4,a1,0x26
    0x840010fe    0x22a    and a3,a3,a1
    0x84001100    0x22c    slli s1,s1,0x27
    0x84001102    0x22e    andi a4,a4,1
    0x84001104    0x230    or s1,s1,a3
    0x84001106    0x232    bnez a4,ffffffff84000f66 <create_frames_of_region+0x92>
    0x8400110a    0x236    j ffffffff840010ee <create_frames_of_region+0x21a>
    0x8400110c    0x238    ld a3,56(sp)          ; stack access
    0x8400110e    0x23a    j ffffffff84001052 <create_frames_of_region+0x17e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
212 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 317 nodes.

Section insert_region (187 of 296)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 45 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `insert_region`:

    0x8400094c     0x0    addi sp,sp,-48
    0x8400094e     0x2    sd ra,40(sp)          ; stack access
    0x84000950     0x4    sd s0,32(sp)          ; stack access
    0x84000952     0x6    sd a0,0(sp)           ; stack access
    0x84000954     0x8    sd a1,8(sp)           ; stack access
    0x84000956     0xa    beq a1,a0,ffffffff840009ae <insert_region+0x62>
    0x8400095a     0xe    auipc a5,0xe
    0x8400095e    0x12    addi a5,a5,-546 # ffffffff8400e738 <ndks_boot+0x338>
    0x84000962    0x16    li s0,0
    0x84000964    0x18    li a2,16
    0x84000966    0x1a    ld a3,0(a5)
    0x84000968    0x1c    ld a4,8(a5)
    0x8400096a    0x1e    addi a5,a5,16
    0x8400096c    0x20    beq a3,a4,ffffffff84000980 <insert_region+0x34>
    0x84000970    0x24    addi s0,s0,1
    0x84000972    0x26    bne s0,a2,ffffffff84000966 <insert_region+0x1a>
    0x84000976    0x2a    ld ra,40(sp)          ; stack access
    0x84000978    0x2c    ld s0,32(sp)          ; stack access
    0x8400097a    0x2e    li a0,0
    0x8400097c    0x30    addi sp,sp,48
    0x8400097e    0x32    ret
    0x84000980    0x34    li a5,1
    0x84000982    0x36    slli a5,a5,0x26
    0x84000984    0x38    add a0,a0,a5
    0x84000986    0x3a    add a1,a1,a5
    0x84000988    0x3c    jal ra,ffffffff84000708 <reserve_region>
    0x8400098c    0x40    addi s0,s0,51
    0x84000990    0x44    auipc a5,0xe
    0x84000994    0x48    addi a5,a5,-1424 # ffffffff8400e400 <ndks_boot>
    0x84000998    0x4c    slli s0,s0,0x4
    0x8400099a    0x4e    add s0,s0,a5
    0x8400099c    0x50    ld a5,0(sp)           ; stack access
    0x8400099e    0x52    ld ra,40(sp)          ; stack access
    0x840009a0    0x54    li a0,1
    0x840009a2    0x56    sd a5,8(s0)
    0x840009a4    0x58    ld a5,8(sp)           ; stack access
    0x840009a6    0x5a    sd a5,16(s0)
    0x840009a8    0x5c    ld s0,32(sp)          ; stack access
    0x840009aa    0x5e    addi sp,sp,48
    0x840009ac    0x60    ret
    0x840009ae    0x62    ld ra,40(sp)          ; stack access
    0x840009b0    0x64    ld s0,32(sp)          ; stack access
    0x840009b2    0x66    li a0,1
    0x840009b4    0x68    addi sp,sp,48
    0x840009b6    0x6a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 71 nodes.

Section map_kernel_window (188 of 296)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 55 instructions.


Stack analysis
---------------

No stack accesses found. Code for `map_kernel_window`:

    0x840008a4     0x0    li a2,1
    0x840008a6     0x2    li a3,-1
    0x840008a8     0x4    slli a3,a3,0x26
    0x840008aa     0x6    auipc a7,0x24
    0x840008ae     0xa    addi a7,a7,1878 # ffffffff84025000 <kernel_root_pageTable>
    0x840008b2     0xe    slli a6,a2,0x26
    0x840008b6    0x12    lui a0,0x40000
    0x840008ba    0x16    lui a1,0x80000
    0x840008be    0x1a    srli a5,a3,0x1e
    0x840008c2    0x1e    add a4,a3,a6
    0x840008c6    0x22    andi a5,a5,511
    0x840008ca    0x26    srli a4,a4,0xc
    0x840008cc    0x28    slli a5,a5,0x3
    0x840008ce    0x2a    slli a4,a4,0xa
    0x840008d0    0x2c    add a5,a5,a7
    0x840008d2    0x2e    ori a4,a4,239
    0x840008d6    0x32    sd a4,0(a5)
    0x840008d8    0x34    add a3,a3,a0
    0x840008da    0x36    bne a3,a1,ffffffff840008be <map_kernel_window+0x1a>
    0x840008de    0x3a    slli a5,a2,0x20
    0x840008e2    0x3e    auipc a3,0x23
    0x840008e6    0x42    addi a3,a3,1822 # ffffffff84024000 <kernel_image_level2_pt>
    0x840008ea    0x46    add a5,a5,a3
    0x840008ec    0x48    lui a4,0xfff00
    0x840008f0    0x4c    srli a4,a4,0xa
    0x840008f2    0x4e    srli a5,a5,0x2
    0x840008f4    0x50    and a5,a5,a4
    0x840008f6    0x52    ori a5,a5,225
    0x840008fa    0x56    auipc a0,0x25
    0x840008fe    0x5a    addi a0,a0,1798 # ffffffff84026000 <kernel_root_pageTable+0x1000>
    0x84000902    0x5e    slli a4,a2,0x1f
    0x84000906    0x62    li a2,3
    0x84000908    0x64    sd a5,-2032(a0)
    0x8400090c    0x68    sd a5,-16(a0)
    0x84000910    0x6c    lui a1,0x200
    0x84000914    0x70    slli a2,a2,0x1e
    0x84000916    0x72    srli a5,a4,0xc
    0x8400091a    0x76    slli a5,a5,0xa
    0x8400091c    0x78    ori a5,a5,239
    0x84000920    0x7c    sd a5,0(a3)
    0x84000922    0x7e    add a4,a4,a1
    0x84000924    0x80    addi a3,a3,8
    0x84000926    0x82    bne a4,a2,ffffffff84000916 <map_kernel_window+0x72>
    0x8400092a    0x86    li a4,1
    0x8400092c    0x88    slli a4,a4,0x20
    0x8400092e    0x8a    auipc a5,0x22
    0x84000932    0x8e    addi a5,a5,1746 # ffffffff84023000 <kernel_image_level2_dev_pt>
    0x84000936    0x92    add a5,a5,a4
    0x84000938    0x94    lui a4,0xfff00
    0x8400093c    0x98    srli a5,a5,0x2
    0x8400093e    0x9a    srli a4,a4,0xa
    0x84000940    0x9c    and a5,a5,a4
    0x84000942    0x9e    ori a5,a5,225
    0x84000946    0xa2    sd a5,-8(a0)
    0x8400094a    0xa6    j ffffffff840007e4 <map_kernel_devices>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 65 nodes.

Section map_kernel_devices (189 of 296)
=======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 66 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_devices`:

    0x840007e4     0x0    addi sp,sp,-80
    0x840007e6     0x2    sd s1,56(sp)          ; stack access
    0x840007e8     0x4    lui s1,0x4000
    0x840007ec     0x8    sd s2,48(sp)          ; stack access
    0x840007ee     0xa    addi s1,s1,-1
    0x840007f0     0xc    lui s2,0xe0000
    0x840007f4    0x10    sd s0,64(sp)          ; stack access
    0x840007f6    0x12    sd s3,40(sp)          ; stack access
    0x840007f8    0x14    sd s4,32(sp)          ; stack access
    0x840007fa    0x16    sd s5,24(sp)          ; stack access
    0x840007fc    0x18    sd s6,16(sp)          ; stack access
    0x840007fe    0x1a    sd ra,72(sp)          ; stack access
    0x84000800    0x1c    auipc s0,0x2
    0x84000804    0x20    addi s0,s0,-1480 # ffffffff84002238 <kernel_devices+0x18>
    0x84000808    0x24    auipc s6,0x2
    0x8400080c    0x28    addi s6,s6,-744 # ffffffff84002520 <avail_reg>
    0x84000810    0x2c    li a6,0
    0x84000812    0x2e    lui a2,0xc0000
    0x84000816    0x32    lui a0,0xc000
    0x8400081a    0x36    lui s5,0xc0000
    0x8400081e    0x3a    auipc s4,0x24
    0x84000822    0x3e    addi s4,s4,2018 # ffffffff84025000 <kernel_root_pageTable>
    0x84000826    0x42    slli s1,s1,0x1c
    0x84000828    0x44    auipc s3,0x22
    0x8400082c    0x48    addi s3,s3,2008 # ffffffff84023000 <kernel_image_level2_dev_pt>
    0x84000830    0x4c    srli s2,s2,0xa
    0x84000834    0x50    srli a4,a2,0x1e
    0x84000838    0x54    srli a3,a2,0x15
    0x8400083c    0x58    srli a5,a0,0xc
    0x84000840    0x5c    slli a5,a5,0xa
    0x84000842    0x5e    andi a3,a3,511
    0x84000846    0x62    andi a4,a4,511
    0x8400084a    0x66    and a1,a5,s2
    0x8400084e    0x6a    slli a3,a3,0x3
    0x84000850    0x6c    slli a4,a4,0x3
    0x84000852    0x6e    and a5,a5,s1
    0x84000854    0x70    add a3,a3,s3
    0x84000856    0x72    add a4,a4,s4
    0x84000858    0x74    ori a1,a1,239
    0x8400085c    0x78    ori a5,a5,239
    0x84000860    0x7c    bltu a2,s5,ffffffff8400089c <map_kernel_devices+0xb8>
    0x84000864    0x80    sd a1,0(a3)
    0x84000866    0x82    beqz a6,ffffffff8400087a <map_kernel_devices+0x96>
    0x8400086a    0x86    beq s6,s0,ffffffff84000888 <map_kernel_devices+0xa4>
    0x8400086e    0x8a    ld a0,0(s0)
    0x84000870    0x8c    ld a2,8(s0)
    0x84000872    0x8e    lw a6,16(s0)
    0x84000876    0x92    addi s0,s0,24
    0x84000878    0x94    j ffffffff84000834 <map_kernel_devices+0x50>
    0x8400087a    0x96    lui a1,0x200
    0x8400087e    0x9a    add a1,a1,a0
    0x84000880    0x9c    jal ra,ffffffff84000708 <reserve_region>
    0x84000884    0xa0    bne s6,s0,ffffffff8400086e <map_kernel_devices+0x8a>
    0x84000888    0xa4    ld ra,72(sp)          ; stack access
    0x8400088a    0xa6    ld s0,64(sp)          ; stack access
    0x8400088c    0xa8    ld s1,56(sp)          ; stack access
    0x8400088e    0xaa    ld s2,48(sp)          ; stack access
    0x84000890    0xac    ld s3,40(sp)          ; stack access
    0x84000892    0xae    ld s4,32(sp)          ; stack access
    0x84000894    0xb0    ld s5,24(sp)          ; stack access
    0x84000896    0xb2    ld s6,16(sp)          ; stack access
    0x84000898    0xb4    addi sp,sp,80
    0x8400089a    0xb6    ret
    0x8400089c    0xb8    sd a5,0(a4)
    0x8400089e    0xba    bnez a6,ffffffff8400086a <map_kernel_devices+0x86>
    0x840008a2    0xbe    j ffffffff8400087a <map_kernel_devices+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 99 nodes.

Section reserve_region (190 of 296)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 80 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `reserve_region`:

    0x84000708     0x0    beq a0,a1,ffffffff84000764 <reserve_region+0x5c>
    0x8400070c     0x4    auipc t1,0xe
    0x84000710     0x8    addi t1,t1,-780 # ffffffff8400e400 <ndks_boot>
    0x84000714     0xc    ld a2,816(t1)
    0x84000718    0x10    mv a7,a0
    0x8400071a    0x12    beqz a2,ffffffff84000754 <reserve_region+0x4c>
    0x8400071c    0x14    addi sp,sp,-32
    0x8400071e    0x16    sd ra,24(sp)          ; stack access
    0x84000720    0x18    mv a5,t1
    0x84000722    0x1a    li a4,0
    0x84000724    0x1c    j ffffffff8400073a <reserve_region+0x32>
    0x84000726    0x1e    ld a6,8(a5)
    0x8400072a    0x22    addi a5,a5,16
    0x8400072c    0x24    beq a6,a7,ffffffff84000768 <reserve_region+0x60>
    0x84000730    0x28    bltu a1,a3,ffffffff8400077a <reserve_region+0x72>
    0x84000734    0x2c    addi a4,a4,1
    0x84000736    0x2e    beq a2,a4,ffffffff840007bc <reserve_region+0xb4>
    0x8400073a    0x32    ld a3,0(a5)
    0x8400073c    0x34    bne a3,a1,ffffffff84000726 <reserve_region+0x1e>
    0x84000740    0x38    slli a4,a4,0x4
    0x84000742    0x3a    add a4,a4,t1
    0x84000744    0x3c    sd a7,0(a4)
    0x84000748    0x40    jal ra,ffffffff84000026 <merge_regions>
    0x8400074c    0x44    li a0,1
    0x8400074e    0x46    ld ra,24(sp)          ; stack access
    0x84000750    0x48    addi sp,sp,32
    0x84000752    0x4a    ret
    0x84000754    0x4c    li a4,0
    0x84000756    0x4e    slli a4,a4,0x4
    0x84000758    0x50    add a4,a4,t1
    0x8400075a    0x52    li a5,1
    0x8400075c    0x54    sd a0,0(a4)
    0x8400075e    0x56    sd a1,8(a4)
    0x84000760    0x58    sd a5,816(t1)
    0x84000764    0x5c    li a0,1
    0x84000766    0x5e    ret
    0x84000768    0x60    slli a4,a4,0x4
    0x8400076a    0x62    add a4,a4,t1
    0x8400076c    0x64    sd a1,8(a4)
    0x8400076e    0x66    jal ra,ffffffff84000026 <merge_regions>
    0x84000772    0x6a    ld ra,24(sp)          ; stack access
    0x84000774    0x6c    li a0,1
    0x84000776    0x6e    addi sp,sp,32
    0x84000778    0x70    ret
    0x8400077a    0x72    addi a6,a2,1
    0x8400077e    0x76    li a5,50
    0x84000782    0x7a    li a0,0
    0x84000784    0x7c    bltu a5,a6,ffffffff8400074e <reserve_region+0x46>
    0x84000788    0x80    bgeu a4,a2,ffffffff840007e0 <reserve_region+0xd8>
    0x8400078c    0x84    slli a5,a2,0x4
    0x84000790    0x88    slli a4,a4,0x4
    0x84000792    0x8a    add a5,a5,t1
    0x84000794    0x8c    add a0,t1,a4
    0x84000798    0x90    ld a2,-16(a5)
    0x8400079c    0x94    ld a3,-8(a5)
    0x840007a0    0x98    addi a5,a5,-16
    0x840007a2    0x9a    sd a2,16(a5)
    0x840007a4    0x9c    sd a3,24(a5)
    0x840007a6    0x9e    bne a5,a0,ffffffff84000798 <reserve_region+0x90>
    0x840007aa    0xa2    add a5,t1,a4
    0x840007ae    0xa6    sd a7,0(a5)
    0x840007b2    0xaa    sd a1,8(a5)
    0x840007b4    0xac    sd a6,816(t1)
    0x840007b8    0xb0    li a0,1
    0x840007ba    0xb2    j ffffffff8400074e <reserve_region+0x46>
    0x840007bc    0xb4    li a5,50
    0x840007c0    0xb8    li a0,0
    0x840007c2    0xba    beq a4,a5,ffffffff8400074e <reserve_region+0x46>
    0x840007c6    0xbe    ld ra,24(sp)          ; stack access
    0x840007c8    0xc0    addi a5,a4,1
    0x840007cc    0xc4    slli a4,a4,0x4
    0x840007ce    0xc6    add a4,a4,t1
    0x840007d0    0xc8    sd a7,0(a4)
    0x840007d4    0xcc    sd a1,8(a4)
    0x840007d6    0xce    sd a5,816(t1)
    0x840007da    0xd2    li a0,1
    0x840007dc    0xd4    addi sp,sp,32
    0x840007de    0xd6    ret
    0x840007e0    0xd8    slli a4,a4,0x4
    0x840007e2    0xda    j ffffffff840007aa <reserve_region+0xa2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 128 nodes.

Section create_mapped_it_frame_cap (191 of 296)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x84000624     0x0    addi sp,sp,-80
    0x84000626     0x2    sd s1,56(sp)          ; stack access
    0x84000628     0x4    snez a5,a5
    0x8400062c     0x8    slli a3,a3,0x19
    0x8400062e     0xa    lui s1,0xfe000
    0x84000632     0xe    sd s0,64(sp)          ; stack access
    0x84000634    0x10    srli a3,a3,0x19
    0x84000636    0x12    slli a2,a2,0x9
    0x84000638    0x14    slli a5,a5,0x39
    0x8400063a    0x16    srli s1,s1,0x10
    0x8400063c    0x18    li s0,19
    0x8400063e    0x1a    or a5,a5,a3
    0x84000640    0x1c    and s1,s1,a2
    0x84000642    0x1e    slli a4,a4,0x30
    0x84000644    0x20    slli s0,s0,0x37
    0x84000646    0x22    or s0,s0,a5
    0x84000648    0x24    or s1,s1,a4
    0x8400064a    0x26    mv a2,s0
    0x8400064c    0x28    mv a3,s1
    0x8400064e    0x2a    sd ra,72(sp)          ; stack access
    0x84000650    0x2c    jal ra,ffffffff840005b6 <map_it_frame_cap>
    0x84000654    0x30    ld ra,72(sp)          ; stack access
    0x84000656    0x32    mv a0,s0
    0x84000658    0x34    ld s0,64(sp)          ; stack access
    0x8400065a    0x36    mv a1,s1
    0x8400065c    0x38    ld s1,56(sp)          ; stack access
    0x8400065e    0x3a    addi sp,sp,80
    0x84000660    0x3c    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section _start (192 of 296)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0xe
    0x84000008     0x8    addi gp,gp,-210 # ffffffff8400df32 <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x21
    0x84000010    0x10    addi sp,sp,2036 # ffffffff84021800 <tlbLockCount>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff84001ca2 <init_kernel>
    0x8400001c    0x1c    auipc ra,0x3
    0x84000020    0x20    addi ra,ra,1546 # ffffffff84003626 <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section fastpath_reply_recv (193 of 296)
========================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 333 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

RVC_FTTTFT________FT.
Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

13 stack accesses found. Annotated code for `fastpath_reply_recv`:

    0x8400d29a      0x0    addi sp,sp,-112
    0x8400d29c      0x2    sd s3,72(sp)          ; stack access
    0x8400d29e      0x4    auipc s3,0x14
    0x8400d2a2      0x8    addi s3,s3,1466 # ffffffff84021858 <ksCurThread>
    0x8400d2a6      0xc    sd s1,88(sp)          ; stack access
    0x8400d2a8      0xe    ld s1,0(s3)
    0x8400d2ac     0x12    sd ra,104(sp)         ; stack access
    0x8400d2ae     0x14    sd s0,96(sp)          ; stack access
    0x8400d2b0     0x16    sd s2,80(sp)          ; stack access
    0x8400d2b2     0x18    sd s4,64(sp)          ; stack access
    0x8400d2b4     0x1a    sd s5,56(sp)          ; stack access
    0x8400d2b6     0x1c    sd s6,48(sp)          ; stack access
    0x8400d2b8     0x1e    sd s7,40(sp)          ; stack access
    0x8400d2ba     0x20    sd s8,32(sp)          ; stack access
    0x8400d2bc     0x22    sd s9,24(sp)          ; stack access
    0x8400d2be     0x24    sd s10,16(sp)         ; stack access
    0x8400d2c0     0x26    sd s11,8(sp)          ; stack access
    0x8400d2c2     0x28    andi a4,a1,511
    0x8400d2c6     0x2c    li a5,4
    0x8400d2c8     0x2e    ld a3,312(s1)
    0x8400d2cc     0x32    bltu a5,a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d2d0     0x36    andi a3,a3,15
    0x8400d2d2     0x38    bnez a3,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d2d6     0x3c    andi a5,s1,-1024
    0x8400d2da     0x40    mv s2,a1
    0x8400d2dc     0x42    ld a1,0(a5)
    0x8400d2de     0x44    ld s4,8(a5)
    0x8400d2e2     0x48    li a4,10
    0x8400d2e4     0x4a    srli a5,a1,0x3b
    0x8400d2e8     0x4e    mv s0,s1
    0x8400d2ea     0x50    bne a5,a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d2ee     0x54    lui t3,0xfc000
    0x8400d2f2     0x58    li t1,1
    0x8400d2f4     0x5a    li t4,-1
    0x8400d2f6     0x5c    mv s5,s4
    0x8400d2f8     0x5e    mv a5,a1
    0x8400d2fa     0x60    li t5,64
    0x8400d2fe     0x64    srli t3,t3,0x19
    0x8400d302     0x68    slli t1,t1,0x26
    0x8400d304     0x6a    slli t4,t4,0x27
    0x8400d306     0x6c    li t6,63
    0x8400d30a     0x70    li t0,10
    0x8400d30c     0x72    srli a7,a5,0x35
    0x8400d310     0x76    srli a6,a5,0x2f
    0x8400d314     0x7a    andi t2,a7,63
    0x8400d318     0x7e    andi a6,a6,63
    0x8400d31c     0x82    sll a4,a0,a3
    0x8400d320     0x86    mv a7,t2
    0x8400d322     0x88    beqz t2,ffffffff8400d332 <fastpath_reply_recv+0x98>
    0x8400d326     0x8c    subw ra,t5,t2
    0x8400d32a     0x90    srl ra,a4,ra
    0x8400d32e     0x94    bne ra,s5,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d332     0x98    slli a5,a5,0x1
    0x8400d334     0x9a    sll a4,a4,a7
    0x8400d338     0x9e    subw a7,t5,a6
    0x8400d33c     0xa2    srl a4,a4,a7
    0x8400d340     0xa6    and a7,a5,t1
    0x8400d344     0xaa    slli a4,a4,0x5
    0x8400d346     0xac    and a5,a5,t3
    0x8400d34a     0xb0    beqz a7,ffffffff8400d352 <fastpath_reply_recv+0xb8>
    0x8400d34e     0xb4    or a5,a5,t4
    0x8400d352     0xb8    add a6,a6,t2
    0x8400d354     0xba    add a4,a4,a5
    0x8400d356     0xbc    add a3,a3,a6
    0x8400d358     0xbe    ld a5,0(a4)
    0x8400d35a     0xc0    ld s5,8(a4)
    0x8400d35e     0xc4    bgeu t6,a3,ffffffff8400d69c <fastpath_reply_recv+0x402>
    0x8400d362     0xc8    li a4,64
    0x8400d366     0xcc    bne a3,a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d36a     0xd0    srli a6,a5,0x3b
    0x8400d36e     0xd4    li a4,4
    0x8400d370     0xd6    bne a6,a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d374     0xda    srli a4,a5,0x38
    0x8400d378     0xde    not a4,a4
    0x8400d37c     0xe2    andi a4,a4,1
    0x8400d37e     0xe4    bnez a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d382     0xe8    lui t1,0xfc000
    0x8400d386     0xec    li a7,1
    0x8400d388     0xee    li t3,-1
    0x8400d38a     0xf0    li t4,64
    0x8400d38e     0xf4    srli t1,t1,0x19
    0x8400d392     0xf8    slli a7,a7,0x26
    0x8400d394     0xfa    slli t3,t3,0x27
    0x8400d396     0xfc    li t5,63
    0x8400d39a    0x100    li t6,10
    0x8400d39c    0x102    srli a6,a1,0x35
    0x8400d3a0    0x106    srli a0,a1,0x2f
    0x8400d3a4    0x10a    andi t2,a6,63
    0x8400d3a8    0x10e    andi a0,a0,63
    0x8400d3ac    0x112    sll a3,a2,a4
    0x8400d3b0    0x116    mv a6,t2
    0x8400d3b2    0x118    beqz t2,ffffffff8400d3c2 <fastpath_reply_recv+0x128>
    0x8400d3b6    0x11c    subw t0,t4,t2
    0x8400d3ba    0x120    srl t0,a3,t0
    0x8400d3be    0x124    bne s4,t0,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d3c2    0x128    slli a1,a1,0x1
    0x8400d3c4    0x12a    sll a3,a3,a6
    0x8400d3c8    0x12e    subw a6,t4,a0
    0x8400d3cc    0x132    srl a3,a3,a6
    0x8400d3d0    0x136    and a6,a1,a7
    0x8400d3d4    0x13a    slli a3,a3,0x5
    0x8400d3d6    0x13c    and a1,a1,t1
    0x8400d3da    0x140    beqz a6,ffffffff8400d3e2 <fastpath_reply_recv+0x148>
    0x8400d3de    0x144    or a1,a1,t3
    0x8400d3e2    0x148    add a0,a0,t2
    0x8400d3e4    0x14a    add a3,a3,a1
    0x8400d3e6    0x14c    add a4,a4,a0
    0x8400d3e8    0x14e    ld a1,0(a3)
    0x8400d3ea    0x150    ld s4,8(a3)
    0x8400d3ee    0x154    bgeu t5,a4,ffffffff8400d692 <fastpath_reply_recv+0x3f8>
    0x8400d3f2    0x158    li a3,64
    0x8400d3f6    0x15c    bne a4,a3,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d3fa    0x160    srli a3,a1,0x3b
    0x8400d3fe    0x164    li a4,8
    0x8400d400    0x166    bne a3,a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d404    0x16a    ld a4,304(s1)
    0x8400d408    0x16e    bnez a4,ffffffff8400d6a6 <fastpath_reply_recv+0x40c>
    0x8400d40c    0x172    li a4,-1
    0x8400d40e    0x174    srli a3,a5,0x26
    0x8400d412    0x178    srli s6,a4,0x19
    0x8400d416    0x17c    andi a3,a3,1
    0x8400d418    0x17e    and s6,a5,s6
    0x8400d41c    0x182    beqz a3,ffffffff8400d424 <fastpath_reply_recv+0x18a>
    0x8400d41e    0x184    slli a4,a4,0x27
    0x8400d420    0x186    or s6,s6,a4
    0x8400d424    0x18a    ld s7,0(s6)
    0x8400d428    0x18e    li a3,1
    0x8400d42a    0x190    andi a5,s7,3
    0x8400d42e    0x194    beq a5,a3,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d432    0x198    ld s5,0(s4)
    0x8400d436    0x19c    beqz s5,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d43a    0x1a0    ld a4,16(s4)
    0x8400d43e    0x1a4    srli a5,a4,0x30
    0x8400d442    0x1a8    andi a5,a5,1
    0x8400d444    0x1aa    beqz a5,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d446    0x1ac    li a5,-1
    0x8400d448    0x1ae    slli a3,a3,0x26
    0x8400d44a    0x1b0    srli a2,a5,0x19
    0x8400d44e    0x1b4    and a3,a3,a4
    0x8400d450    0x1b6    and a4,a4,a2
    0x8400d452    0x1b8    beqz a3,ffffffff8400d458 <fastpath_reply_recv+0x1be>
    0x8400d454    0x1ba    slli a5,a5,0x27
    0x8400d456    0x1bc    or a4,a4,a5
    0x8400d458    0x1be    ld s10,368(s1)
    0x8400d45c    0x1c2    bne s10,a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d460    0x1c6    ld a5,312(s5)
    0x8400d464    0x1ca    andi a5,a5,15
    0x8400d466    0x1cc    bnez a5,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d468    0x1ce    andi a4,s5,-1024
    0x8400d46c    0x1d2    ld s8,40(a4)
    0x8400d470    0x1d6    li a3,-1
    0x8400d472    0x1d8    srli s9,a3,0x19
    0x8400d476    0x1dc    srli a5,s8,0x9
    0x8400d47a    0x1e0    srli a2,a5,0x26
    0x8400d47e    0x1e4    andi a2,a2,1
    0x8400d480    0x1e6    ld a4,32(a4)
    0x8400d482    0x1e8    and s9,a5,s9
    0x8400d486    0x1ec    beqz a2,ffffffff8400d48e <fastpath_reply_recv+0x1f4>
    0x8400d488    0x1ee    slli a3,a3,0x27
    0x8400d48a    0x1f0    or s9,s9,a3
    0x8400d48e    0x1f4    srli a5,a4,0x3b
    0x8400d492    0x1f8    li a3,3
    0x8400d494    0x1fa    beq a5,a3,ffffffff8400d49e <fastpath_reply_recv+0x204>
    0x8400d498    0x1fe    li a0,-2
    0x8400d49a    0x200    jal ra,ffffffff8400cef6 <slowpath>
    0x8400d49e    0x204    srli a4,a4,0x27
    0x8400d4a0    0x206    andi a4,a4,1
    0x8400d4a2    0x208    beqz a4,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d4a4    0x20a    ld a1,360(s5)
    0x8400d4a8    0x20e    auipc s11,0x14
    0x8400d4ac    0x212    ld s11,880(s11) # ffffffff84021818 <ksCurDomain>
    0x8400d4b0    0x216    mv a0,s11
    0x8400d4b2    0x218    jal ra,ffffffff8400cf0e <isHighestPrio>
    0x8400d4b6    0x21c    beqz a0,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d4b8    0x21e    ld a5,344(s5)
    0x8400d4bc    0x222    bne a5,s11,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d4c0    0x226    ld a0,368(s5)
    0x8400d4c4    0x22a    bnez a0,ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d4c6    0x22c    ld a5,288(s5)
    0x8400d4ca    0x230    li a1,-1
    0x8400d4cc    0x232    slli a3,a1,0x28
    0x8400d4d0    0x236    addi a2,a3,31
    0x8400d4d4    0x23a    ori a4,s6,3
    0x8400d4d8    0x23e    sd a4,280(s1)
    0x8400d4dc    0x242    and a5,a5,a2
    0x8400d4de    0x244    sd a5,288(s5)
    0x8400d4e2    0x248    ld a3,288(s1)
    0x8400d4e6    0x24c    lui a4,0xe0000
    0x8400d4ea    0x250    srli a4,a4,0x18
    0x8400d4ec    0x252    slli a5,s4,0x1
    0x8400d4f0    0x256    and a5,a5,a4
    0x8400d4f2    0x258    and a3,a3,a2
    0x8400d4f4    0x25a    or a5,a5,a3
    0x8400d4f6    0x25c    sd a5,288(s1)
    0x8400d4fa    0x260    lui a4,0xf8000
    0x8400d4fe    0x264    srli a5,s7,0x26
    0x8400d502    0x268    srli a4,a4,0x19
    0x8400d504    0x26a    sd s1,0(s4)
    0x8400d508    0x26e    andi a5,a5,1
    0x8400d50a    0x270    and a4,s7,a4
    0x8400d50e    0x274    beqz a5,ffffffff8400d548 <fastpath_reply_recv+0x2ae>
    0x8400d510    0x276    slli a1,a1,0x27
    0x8400d512    0x278    or a4,a4,a1
    0x8400d514    0x27a    ld a3,8(s6)
    0x8400d518    0x27e    ld a1,360(s1)
    0x8400d51c    0x282    mv a5,a4
    0x8400d51e    0x284    ld a2,360(a5)
    0x8400d522    0x288    bltu a2,a1,ffffffff8400d6b2 <fastpath_reply_recv+0x418>
    0x8400d526    0x28c    sd s1,408(a5)
    0x8400d52a    0x290    mv a2,a5
    0x8400d52c    0x292    bnez a0,ffffffff8400d6bc <fastpath_reply_recv+0x422>
    0x8400d530    0x296    mv a4,s1
    0x8400d532    0x298    sd a0,408(s1)
    0x8400d536    0x29c    sd a5,416(s1)
    0x8400d53a    0x2a0    ori a4,a4,2
    0x8400d53e    0x2a4    sd a3,8(s6)
    0x8400d542    0x2a8    sd a4,0(s6)
    0x8400d546    0x2ac    j ffffffff8400d55e <fastpath_reply_recv+0x2c4>
    0x8400d548    0x2ae    bnez a4,ffffffff8400d514 <fastpath_reply_recv+0x27a>
    0x8400d54a    0x2b0    sd zero,416(s1)
    0x8400d54e    0x2b4    sd zero,408(s1)
    0x8400d552    0x2b8    ori a5,s1,2
    0x8400d556    0x2bc    sd s1,8(s6)
    0x8400d55a    0x2c0    sd a5,0(s6)
    0x8400d55e    0x2c4    ld a3,8(s4)
    0x8400d562    0x2c8    li a5,-1
    0x8400d564    0x2ca    srli a4,a5,0x19
    0x8400d568    0x2ce    srli a2,a3,0x26
    0x8400d56c    0x2d2    andi a2,a2,1
    0x8400d56e    0x2d4    sd zero,368(s1)
    0x8400d572    0x2d8    and a4,a4,a3
    0x8400d574    0x2da    beqz a2,ffffffff8400d682 <fastpath_reply_recv+0x3e8>
    0x8400d578    0x2de    slli a5,a5,0x27
    0x8400d57a    0x2e0    sd s10,368(s5)
    0x8400d57e    0x2e4    or a4,a4,a5
    0x8400d580    0x2e6    sd s5,24(s10)
    0x8400d584    0x2ea    sd a4,32(s10)
    0x8400d588    0x2ee    ld a5,16(s4)
    0x8400d58c    0x2f2    sd a5,16(a4)
    0x8400d58e    0x2f4    andi a5,s2,127
    0x8400d592    0x2f8    sd zero,8(s4)
    0x8400d596    0x2fc    sd zero,16(s4)
    0x8400d59a    0x300    beqz a5,ffffffff8400d5b4 <fastpath_reply_recv+0x31a>
    0x8400d59c    0x302    slli a4,a5,0x3
    0x8400d5a0    0x306    add s1,s1,a4
    0x8400d5a2    0x308    addi a5,s5,88
    0x8400d5a6    0x30c    ld a4,88(s0)
    0x8400d5a8    0x30e    addi s0,s0,8
    0x8400d5aa    0x310    addi a5,a5,8
    0x8400d5ac    0x312    sd a4,-8(a5)
    0x8400d5b0    0x316    bne s1,s0,ffffffff8400d5a6 <fastpath_reply_recv+0x30c>
    0x8400d5b4    0x31a    li a3,1
    0x8400d5b6    0x31c    slli a5,a3,0x26
    0x8400d5ba    0x320    li a4,-1
    0x8400d5bc    0x322    add a5,a5,s9
    0x8400d5be    0x324    srli a2,a4,0x14
    0x8400d5c2    0x328    srli a5,a5,0xc
    0x8400d5c4    0x32a    srli s8,s8,0x30
    0x8400d5c8    0x32e    and a5,a5,a2
    0x8400d5ca    0x330    slli s8,s8,0x2c
    0x8400d5cc    0x332    or a5,a5,s8
    0x8400d5d0    0x336    slli a4,a4,0x3f
    0x8400d5d2    0x338    sd a3,280(s5)
    0x8400d5d6    0x33c    or a5,a5,a4
    0x8400d5d8    0x33e    csrw satp,a5
    0x8400d5dc    0x342    sfence.vma
    0x8400d5e0    0x346    lui a1,0xfffff
    0x8400d5e2    0x348    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd81ff>
    0x8400d5e6    0x34c    sd s5,0(s3)
    0x8400d5ea    0x350    li a0,0
    0x8400d5ec    0x352    and a1,s2,a1
    0x8400d5f0    0x356    mv t0,s5
    0x8400d5f2    0x358    ld ra,0(t0)
    0x8400d5f6    0x35c    ld sp,8(t0)
    0x8400d5fa    0x360    ld gp,16(t0)
    0x8400d5fe    0x364    ld t2,48(t0)
    0x8400d602    0x368    ld s0,56(t0)
    0x8400d606    0x36c    ld s1,64(t0)
    0x8400d60a    0x370    ld a2,88(t0)
    0x8400d60e    0x374    ld a3,96(t0)
    0x8400d612    0x378    ld a4,104(t0)
    0x8400d616    0x37c    ld a5,112(t0)
    0x8400d61a    0x380    ld a6,120(t0)
    0x8400d61e    0x384    ld a7,128(t0)
    0x8400d622    0x388    ld s2,136(t0)
    0x8400d626    0x38c    ld s3,144(t0)
    0x8400d62a    0x390    ld s4,152(t0)
    0x8400d62e    0x394    ld s5,160(t0)
    0x8400d632    0x398    ld s6,168(t0)
    0x8400d636    0x39c    ld s7,176(t0)
    0x8400d63a    0x3a0    ld s8,184(t0)
    0x8400d63e    0x3a4    ld s9,192(t0)
    0x8400d642    0x3a8    ld s10,200(t0)
    0x8400d646    0x3ac    ld s11,208(t0)
    0x8400d64a    0x3b0    ld t3,216(t0)
    0x8400d64e    0x3b4    ld t4,224(t0)
    0x8400d652    0x3b8    ld t5,232(t0)
    0x8400d656    0x3bc    ld t6,240(t0)
    0x8400d65a    0x3c0    ld t1,24(t0)
    0x8400d65e    0x3c4    add tp,t1,zero
    0x8400d662    0x3c8    ld t1,272(t0)
    0x8400d666    0x3cc    csrw sepc,t1
    0x8400d66a    0x3d0    csrw sscratch,t0
    0x8400d66e    0x3d4    ld t1,256(t0)
    0x8400d672    0x3d8    csrw sstatus,t1
    0x8400d676    0x3dc    ld t1,40(t0)
    0x8400d67a    0x3e0    ld t0,32(t0)
    0x8400d67e    0x3e4    sret
    0x8400d682    0x3e8    sd s10,368(s5)
    0x8400d686    0x3ec    sd s5,24(s10)
    0x8400d68a    0x3f0    sd a4,32(s10)
    0x8400d68e    0x3f4    beqz a4,ffffffff8400d58e <fastpath_reply_recv+0x2f4>
    0x8400d690    0x3f6    j ffffffff8400d588 <fastpath_reply_recv+0x2ee>
    0x8400d692    0x3f8    srli a3,a1,0x3b
    0x8400d696    0x3fc    bne a3,t6,ffffffff8400d3fe <fastpath_reply_recv+0x164>
    0x8400d69a    0x400    j ffffffff8400d39c <fastpath_reply_recv+0x102>
    0x8400d69c    0x402    srli a6,a5,0x3b
    0x8400d6a0    0x406    bne a6,t0,ffffffff8400d36e <fastpath_reply_recv+0xd4>
    0x8400d6a4    0x40a    j ffffffff8400d30c <fastpath_reply_recv+0x72>
    0x8400d6a6    0x40c    ld a4,0(a4)
    0x8400d6a8    0x40e    li a3,2
    0x8400d6aa    0x410    andi a4,a4,3
    0x8400d6ac    0x412    bne a4,a3,ffffffff8400d40c <fastpath_reply_recv+0x172>
    0x8400d6b0    0x416    j ffffffff8400d498 <fastpath_reply_recv+0x1fe>
    0x8400d6b2    0x418    ld a2,416(a5)
    0x8400d6b6    0x41c    mv a0,a5
    0x8400d6b8    0x41e    bnez a2,ffffffff8400d6c4 <fastpath_reply_recv+0x42a>
    0x8400d6ba    0x420    mv a3,s1
    0x8400d6bc    0x422    sd s1,416(a0) # ffffffffe00001a0 <ki_end+0x5bfd91a0>
    0x8400d6c0    0x426    mv a5,a2
    0x8400d6c2    0x428    j ffffffff8400d532 <fastpath_reply_recv+0x298>
    0x8400d6c4    0x42a    mv a5,a2
    0x8400d6c6    0x42c    j ffffffff8400d51e <fastpath_reply_recv+0x284>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
333 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 526 nodes.

Section fastpath_call (194 of 296)
==================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 249 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

13 stack accesses found. Annotated code for `fastpath_call`:

    0x8400cf88      0x0    addi sp,sp,-112
    0x8400cf8a      0x2    sd s4,64(sp)          ; stack access
    0x8400cf8c      0x4    auipc s4,0x15
    0x8400cf90      0x8    addi s4,s4,-1844 # ffffffff84021858 <ksCurThread>
    0x8400cf94      0xc    sd s6,48(sp)          ; stack access
    0x8400cf96      0xe    ld s6,0(s4)
    0x8400cf9a     0x12    sd ra,104(sp)         ; stack access
    0x8400cf9c     0x14    sd s0,96(sp)          ; stack access
    0x8400cf9e     0x16    sd s1,88(sp)          ; stack access
    0x8400cfa0     0x18    sd s2,80(sp)          ; stack access
    0x8400cfa2     0x1a    sd s3,72(sp)          ; stack access
    0x8400cfa4     0x1c    sd s5,56(sp)          ; stack access
    0x8400cfa6     0x1e    sd s7,40(sp)          ; stack access
    0x8400cfa8     0x20    sd s8,32(sp)          ; stack access
    0x8400cfaa     0x22    sd s9,24(sp)          ; stack access
    0x8400cfac     0x24    andi a4,a1,511
    0x8400cfb0     0x28    li a5,4
    0x8400cfb2     0x2a    ld a3,312(s6)
    0x8400cfb6     0x2e    bltu a5,a4,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400cfba     0x32    andi a3,a3,15
    0x8400cfbc     0x34    bnez a3,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400cfbe     0x36    andi a5,s6,-1024
    0x8400cfc2     0x3a    ld s1,0(a5)
    0x8400cfc4     0x3c    ld s5,8(a5)
    0x8400cfc8     0x40    li a4,10
    0x8400cfca     0x42    srli a5,s1,0x3b
    0x8400cfce     0x46    mv s0,s6
    0x8400cfd0     0x48    bne a5,a4,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400cfd4     0x4c    mv s3,a1
    0x8400cfd6     0x4e    li a5,1
    0x8400cfd8     0x50    lui a1,0xfc000
    0x8400cfdc     0x54    li a7,-1
    0x8400cfde     0x56    li t1,64
    0x8400cfe2     0x5a    srli a1,a1,0x19
    0x8400cfe4     0x5c    slli a5,a5,0x26
    0x8400cfe6     0x5e    slli a7,a7,0x27
    0x8400cfe8     0x60    li t3,63
    0x8400cfec     0x64    li t4,10
    0x8400cfee     0x66    srli a6,s1,0x35
    0x8400cff2     0x6a    srli a2,s1,0x2f
    0x8400cff6     0x6e    andi t6,a6,63
    0x8400cffa     0x72    andi a2,a2,63
    0x8400cffe     0x76    sll a4,a0,a3
    0x8400d002     0x7a    mv a6,t6
    0x8400d004     0x7c    beqz t6,ffffffff8400d014 <fastpath_call+0x8c>
    0x8400d008     0x80    subw t5,t1,t6
    0x8400d00c     0x84    srl t5,a4,t5
    0x8400d010     0x88    bne s5,t5,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d014     0x8c    slli s1,s1,0x1
    0x8400d016     0x8e    sll a4,a4,a6
    0x8400d01a     0x92    subw a6,t1,a2
    0x8400d01e     0x96    srl a4,a4,a6
    0x8400d022     0x9a    and a6,s1,a5
    0x8400d026     0x9e    slli a4,a4,0x5
    0x8400d028     0xa0    and s1,s1,a1
    0x8400d02a     0xa2    beqz a6,ffffffff8400d032 <fastpath_call+0xaa>
    0x8400d02e     0xa6    or s1,s1,a7
    0x8400d032     0xaa    add a2,a2,t6
    0x8400d034     0xac    add a4,a4,s1
    0x8400d036     0xae    add a3,a3,a2
    0x8400d038     0xb0    ld s1,0(a4)
    0x8400d03a     0xb2    ld s5,8(a4)
    0x8400d03e     0xb6    bgeu t3,a3,ffffffff8400d27e <fastpath_call+0x2f6>
    0x8400d042     0xba    li a5,64
    0x8400d046     0xbe    bne a3,a5,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d04a     0xc2    srli a4,s1,0x3b
    0x8400d04e     0xc6    li a5,4
    0x8400d050     0xc8    bne a4,a5,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d054     0xcc    srli a5,s1,0x37
    0x8400d058     0xd0    andi a5,a5,1
    0x8400d05a     0xd2    beqz a5,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d05c     0xd4    li a4,-1
    0x8400d05e     0xd6    srli a5,s1,0x26
    0x8400d062     0xda    srli s2,a4,0x19
    0x8400d066     0xde    andi a5,a5,1
    0x8400d068     0xe0    and s2,s1,s2
    0x8400d06c     0xe4    beqz a5,ffffffff8400d074 <fastpath_call+0xec>
    0x8400d06e     0xe6    slli a4,a4,0x27
    0x8400d070     0xe8    or s2,s2,a4
    0x8400d074     0xec    ld a5,0(s2)
    0x8400d078     0xf0    li a4,2
    0x8400d07a     0xf2    ld t0,8(s2)
    0x8400d07e     0xf6    andi a5,a5,3
    0x8400d080     0xf8    bne a5,a4,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d084     0xfc    andi a4,t0,-1024
    0x8400d088    0x100    ld s8,40(a4)
    0x8400d08c    0x104    li a3,-1
    0x8400d08e    0x106    srli s7,a3,0x19
    0x8400d092    0x10a    srli a5,s8,0x9
    0x8400d096    0x10e    srli a2,a5,0x26
    0x8400d09a    0x112    andi a2,a2,1
    0x8400d09c    0x114    ld a4,32(a4)
    0x8400d09e    0x116    and s7,a5,s7
    0x8400d0a2    0x11a    beqz a2,ffffffff8400d0aa <fastpath_call+0x122>
    0x8400d0a4    0x11c    slli a3,a3,0x27
    0x8400d0a6    0x11e    or s7,s7,a3
    0x8400d0aa    0x122    srli a5,a4,0x3b
    0x8400d0ae    0x126    li a3,3
    0x8400d0b0    0x128    beq a5,a3,ffffffff8400d0ba <fastpath_call+0x132>
    0x8400d0b4    0x12c    li a0,-1
    0x8400d0b6    0x12e    jal ra,ffffffff8400cef6 <slowpath>
    0x8400d0ba    0x132    srli a4,a4,0x27
    0x8400d0bc    0x134    andi a4,a4,1
    0x8400d0be    0x136    beqz a4,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d0c0    0x138    ld a1,360(t0) # fffffffffc000168 <ki_end+0x77fd9168>
    0x8400d0c4    0x13c    ld a5,360(s6)
    0x8400d0c8    0x140    auipc s9,0x14
    0x8400d0cc    0x144    ld s9,1872(s9) # ffffffff84021818 <ksCurDomain>
    0x8400d0d0    0x148    bltu a1,a5,ffffffff8400d264 <fastpath_call+0x2dc>
    0x8400d0d4    0x14c    srli a5,s1,0x39
    0x8400d0d8    0x150    andi a5,a5,1
    0x8400d0da    0x152    beqz a5,ffffffff8400d274 <fastpath_call+0x2ec>
    0x8400d0de    0x156    ld a5,344(t0)
    0x8400d0e2    0x15a    bne a5,s9,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d0e6    0x15e    ld a5,368(t0)
    0x8400d0ea    0x162    bnez a5,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d0ec    0x164    ld a3,288(t0)
    0x8400d0f0    0x168    lui a4,0xe0000
    0x8400d0f4    0x16c    srli a4,a4,0x19
    0x8400d0f6    0x16e    srli a2,a3,0x1
    0x8400d0fa    0x172    srli a5,a2,0x26
    0x8400d0fe    0x176    andi a5,a5,1
    0x8400d100    0x178    and a4,a4,a2
    0x8400d102    0x17a    beqz a5,ffffffff8400d288 <fastpath_call+0x300>
    0x8400d106    0x17e    li a5,-1
    0x8400d108    0x180    slli a5,a5,0x27
    0x8400d10a    0x182    or a4,a4,a5
    0x8400d10c    0x184    ld a5,408(t0)
    0x8400d110    0x188    sd a5,8(s2)
    0x8400d114    0x18c    bnez a5,ffffffff8400d28e <fastpath_call+0x306>
    0x8400d118    0x190    sd zero,0(s2)
    0x8400d11c    0x194    li a1,-1
    0x8400d11e    0x196    slli a2,a1,0x28
    0x8400d122    0x19a    addi a0,a2,31
    0x8400d126    0x19e    li a5,5
    0x8400d128    0x1a0    sd a5,280(s6)
    0x8400d12c    0x1a4    and a3,a3,a0
    0x8400d12e    0x1a6    sd a3,288(t0)
    0x8400d132    0x1aa    ld a2,288(s6)
    0x8400d136    0x1ae    slli a5,a4,0x1
    0x8400d13a    0x1b2    ld a3,368(s6)
    0x8400d13e    0x1b6    and a2,a2,a0
    0x8400d140    0x1b8    lui a0,0xe0000
    0x8400d144    0x1bc    srli a0,a0,0x18
    0x8400d146    0x1be    and a5,a5,a0
    0x8400d148    0x1c0    or a5,a5,a2
    0x8400d14a    0x1c2    sd a5,288(s6)
    0x8400d14e    0x1c6    sd s6,0(a4) # ffffffffe0000000 <ki_end+0x5bfd9000>
    0x8400d152    0x1ca    ld a5,32(a3)
    0x8400d154    0x1cc    sd t0,24(a3)
    0x8400d158    0x1d0    sd a3,368(t0)
    0x8400d15c    0x1d4    srli a1,a1,0x19
    0x8400d15e    0x1d6    sd zero,368(s6)
    0x8400d162    0x1da    and a2,a5,a1
    0x8400d166    0x1de    sd a2,8(a4)
    0x8400d168    0x1e0    bnez a5,ffffffff8400d294 <fastpath_call+0x30c>
    0x8400d16c    0x1e4    slli a5,a3,0x19
    0x8400d170    0x1e8    li a2,1
    0x8400d172    0x1ea    srli a5,a5,0x19
    0x8400d174    0x1ec    slli a2,a2,0x30
    0x8400d176    0x1ee    or a5,a5,a2
    0x8400d178    0x1f0    sd a5,16(a4)
    0x8400d17a    0x1f2    sd a4,32(a3)
    0x8400d17c    0x1f4    andi a5,s3,127
    0x8400d180    0x1f8    beqz a5,ffffffff8400d198 <fastpath_call+0x210>
    0x8400d182    0x1fa    slli a5,a5,0x3
    0x8400d184    0x1fc    addi a4,t0,88
    0x8400d188    0x200    add a5,a5,s6
    0x8400d18a    0x202    ld a3,88(s0)
    0x8400d18c    0x204    addi s0,s0,8
    0x8400d18e    0x206    addi a4,a4,8
    0x8400d190    0x208    sd a3,-8(a4)
    0x8400d194    0x20c    bne a5,s0,ffffffff8400d18a <fastpath_call+0x202>
    0x8400d198    0x210    li a3,1
    0x8400d19a    0x212    slli a5,a3,0x26
    0x8400d19e    0x216    li a4,-1
    0x8400d1a0    0x218    add a5,a5,s7
    0x8400d1a2    0x21a    srli a2,a4,0x14
    0x8400d1a6    0x21e    srli a5,a5,0xc
    0x8400d1a8    0x220    srli s8,s8,0x30
    0x8400d1ac    0x224    and a5,a5,a2
    0x8400d1ae    0x226    slli s8,s8,0x2c
    0x8400d1b0    0x228    or a5,a5,s8
    0x8400d1b4    0x22c    slli a4,a4,0x3f
    0x8400d1b6    0x22e    sd a3,280(t0)
    0x8400d1ba    0x232    or a5,a5,a4
    0x8400d1bc    0x234    csrw satp,a5
    0x8400d1c0    0x238    sfence.vma
    0x8400d1c4    0x23c    lui a1,0xfffff
    0x8400d1c6    0x23e    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd81ff>
    0x8400d1ca    0x242    sd t0,0(s4)
    0x8400d1ce    0x246    mv a0,s5
    0x8400d1d0    0x248    and a1,s3,a1
    0x8400d1d4    0x24c    ld ra,0(t0)
    0x8400d1d8    0x250    ld sp,8(t0)
    0x8400d1dc    0x254    ld gp,16(t0)
    0x8400d1e0    0x258    ld t2,48(t0)
    0x8400d1e4    0x25c    ld s0,56(t0)
    0x8400d1e8    0x260    ld s1,64(t0)
    0x8400d1ec    0x264    ld a2,88(t0)
    0x8400d1f0    0x268    ld a3,96(t0)
    0x8400d1f4    0x26c    ld a4,104(t0)
    0x8400d1f8    0x270    ld a5,112(t0)
    0x8400d1fc    0x274    ld a6,120(t0)
    0x8400d200    0x278    ld a7,128(t0)
    0x8400d204    0x27c    ld s2,136(t0)
    0x8400d208    0x280    ld s3,144(t0)
    0x8400d20c    0x284    ld s4,152(t0)
    0x8400d210    0x288    ld s5,160(t0)
    0x8400d214    0x28c    ld s6,168(t0)
    0x8400d218    0x290    ld s7,176(t0)
    0x8400d21c    0x294    ld s8,184(t0)
    0x8400d220    0x298    ld s9,192(t0)
    0x8400d224    0x29c    ld s10,200(t0)
    0x8400d228    0x2a0    ld s11,208(t0)
    0x8400d22c    0x2a4    ld t3,216(t0)
    0x8400d230    0x2a8    ld t4,224(t0)
    0x8400d234    0x2ac    ld t5,232(t0)
    0x8400d238    0x2b0    ld t6,240(t0)
    0x8400d23c    0x2b4    ld t1,24(t0)
    0x8400d240    0x2b8    add tp,t1,zero
    0x8400d244    0x2bc    ld t1,272(t0)
    0x8400d248    0x2c0    csrw sepc,t1
    0x8400d24c    0x2c4    csrw sscratch,t0
    0x8400d250    0x2c8    ld t1,256(t0)
    0x8400d254    0x2cc    csrw sstatus,t1
    0x8400d258    0x2d0    ld t1,40(t0)
    0x8400d25c    0x2d4    ld t0,32(t0)
    0x8400d260    0x2d8    sret
    0x8400d264    0x2dc    mv a0,s9
    0x8400d266    0x2de    sd t0,8(sp)           ; stack access
    0x8400d268    0x2e0    jal ra,ffffffff8400cf0e <isHighestPrio>
    0x8400d26c    0x2e4    ld t0,8(sp)           ; stack access
    0x8400d26e    0x2e6    bnez a0,ffffffff8400d0d4 <fastpath_call+0x14c>
    0x8400d272    0x2ea    j ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d274    0x2ec    srli s1,s1,0x3a
    0x8400d276    0x2ee    li a5,9
    0x8400d278    0x2f0    beq s1,a5,ffffffff8400d0de <fastpath_call+0x156>
    0x8400d27c    0x2f4    j ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d27e    0x2f6    srli a4,s1,0x3b
    0x8400d282    0x2fa    bne a4,t4,ffffffff8400d04e <fastpath_call+0xc6>
    0x8400d286    0x2fe    j ffffffff8400cfee <fastpath_call+0x66>
    0x8400d288    0x300    beqz a4,ffffffff8400d0b4 <fastpath_call+0x12c>
    0x8400d28c    0x304    j ffffffff8400d10c <fastpath_call+0x184>
    0x8400d28e    0x306    sd zero,416(a5)
    0x8400d292    0x30a    j ffffffff8400d11c <fastpath_call+0x194>
    0x8400d294    0x30c    and a1,a1,a4
    0x8400d296    0x30e    sd a1,16(a5)
    0x8400d298    0x310    j ffffffff8400d16c <fastpath_call+0x1e4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
249 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 395 nodes.

Section c_handle_interrupt (195 of 296)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x8400c9c0    0x0    addi sp,sp,-16
    0x8400c9c2    0x2    sd ra,8(sp)           ; stack access
    0x8400c9c4    0x4    jal ra,ffffffff8400c8ae <handleInterruptEntry>
    0x8400c9c8    0x8    jal ra,ffffffff84003626 <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section replyFromKernel_error (196 of 296)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x8400ba32     0x0    addi sp,sp,-16
    0x8400ba34     0x2    sd s0,0(sp)           ; stack access
    0x8400ba36     0x4    mv a1,a0
    0x8400ba38     0x6    mv s0,a0
    0x8400ba3a     0x8    li a0,1
    0x8400ba3c     0xa    sd ra,8(sp)           ; stack access
    0x8400ba3e     0xc    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x8400ba42    0x10    mv a1,a0
    0x8400ba44    0x12    sd zero,72(s0)
    0x8400ba48    0x16    mv a0,s0
    0x8400ba4a    0x18    jal ra,ffffffff8400b990 <setMRs_syscall_error>
    0x8400ba4e    0x1c    auipc a5,0x4
    0x8400ba52    0x20    ld a5,-910(a5) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400ba56    0x24    slli a5,a5,0xc
    0x8400ba58    0x26    andi a0,a0,127
    0x8400ba5c    0x2a    or a5,a5,a0
    0x8400ba5e    0x2c    ld ra,8(sp)           ; stack access
    0x8400ba60    0x2e    sd a5,80(s0)
    0x8400ba62    0x30    ld s0,0(sp)           ; stack access
    0x8400ba64    0x32    addi sp,sp,16
    0x8400ba66    0x34    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 31 nodes.

Section setMRs_syscall_error (197 of 296)
=========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 62 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x8400b990     0x0    auipc a6,0x3
    0x8400b994     0x4    addi a6,a6,1648 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400b998     0x8    ld a5,1728(a6)
    0x8400b99c     0xc    addi sp,sp,-16
    0x8400b99e     0xe    sd ra,8(sp)           ; stack access
    0x8400b9a0    0x10    li a4,10
    0x8400b9a2    0x12    bltu a4,a5,ffffffff8400ba2e <setMRs_syscall_error+0x9e>
    0x8400b9a6    0x16    auipc a2,0x2
    0x8400b9aa    0x1a    addi a2,a2,846 # ffffffff8400dcf4 <msgRegisters+0x5ac>
    0x8400b9ae    0x1e    slli a3,a5,0x2
    0x8400b9b2    0x22    add a3,a3,a2
    0x8400b9b4    0x24    lw a4,0(a3)
    0x8400b9b6    0x26    add a4,a4,a2
    0x8400b9b8    0x28    jr a4
    0x8400b9ba    0x2a    ld ra,8(sp)
    0x8400b9bc    0x2c    li a5,0
    0x8400b9be    0x2e    mv a0,a5
    0x8400b9c0    0x30    addi sp,sp,16
    0x8400b9c2    0x32    ret
    0x8400b9c4    0x34    ld a4,1712(a6)
    0x8400b9c8    0x38    ld ra,8(sp)
    0x8400b9ca    0x3a    li a5,1
    0x8400b9cc    0x3c    sd a4,88(a0)
    0x8400b9ce    0x3e    mv a0,a5
    0x8400b9d0    0x40    addi sp,sp,16
    0x8400b9d2    0x42    ret
    0x8400b9d4    0x44    ld a4,1680(a6)
    0x8400b9d8    0x48    ld ra,8(sp)
    0x8400b9da    0x4a    sd a4,88(a0)
    0x8400b9dc    0x4c    mv a0,a5
    0x8400b9de    0x4e    addi sp,sp,16
    0x8400b9e0    0x50    ret
    0x8400b9e2    0x52    ld a4,1688(a6)
    0x8400b9e6    0x56    ld ra,8(sp)
    0x8400b9e8    0x58    li a5,1
    0x8400b9ea    0x5a    sd a4,88(a0)
    0x8400b9ec    0x5c    mv a0,a5
    0x8400b9ee    0x5e    addi sp,sp,16
    0x8400b9f0    0x60    ret
    0x8400b9f2    0x62    ld a3,1696(a6)
    0x8400b9f6    0x66    ld a4,1704(a6)
    0x8400b9fa    0x6a    ld ra,8(sp)
    0x8400b9fc    0x6c    sd a3,88(a0)
    0x8400b9fe    0x6e    sd a4,96(a0)
    0x8400ba00    0x70    li a5,2
    0x8400ba02    0x72    mv a0,a5
    0x8400ba04    0x74    addi sp,sp,16
    0x8400ba06    0x76    ret
    0x8400ba08    0x78    ld a5,1720(a6)
    0x8400ba0c    0x7c    ld a2,1024(a6)
    0x8400ba10    0x80    ld a3,1032(a6)
    0x8400ba14    0x84    snez a5,a5
    0x8400ba18    0x88    sd a5,88(a0)
    0x8400ba1a    0x8a    li a4,1
    0x8400ba1c    0x8c    jal ra,ffffffff840034fe <setMRs_lookup_failure>
    0x8400ba20    0x90    ld ra,8(sp)
    0x8400ba22    0x92    slli a5,a0,0x20
    0x8400ba26    0x96    srli a5,a5,0x20
    0x8400ba28    0x98    mv a0,a5
    0x8400ba2a    0x9a    addi sp,sp,16
    0x8400ba2c    0x9c    ret
    0x8400ba2e    0x9e    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 96 nodes.

Section decodeWriteRegisters (198 of 296)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 69 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x8400b6a8     0x0    addi sp,sp,-64
    0x8400b6aa     0x2    sd a1,40(sp)          ; stack access
    0x8400b6ac     0x4    sd ra,56(sp)          ; stack access
    0x8400b6ae     0x6    sd s0,48(sp)          ; stack access
    0x8400b6b0     0x8    sd a0,32(sp)          ; stack access
    0x8400b6b2     0xa    li a1,1
    0x8400b6b4     0xc    bgeu a1,a2,ffffffff8400b70e <decodeWriteRegisters+0x66>
    0x8400b6b8    0x10    auipc a6,0x16
    0x8400b6bc    0x14    ld a6,416(a6) # ffffffff84021858 <ksCurThread>
    0x8400b6c0    0x18    mv a5,a2
    0x8400b6c2    0x1a    ld a2,96(a6)
    0x8400b6c6    0x1e    addi a5,a5,-2
    0x8400b6c8    0x20    bltu a5,a2,ffffffff8400b70e <decodeWriteRegisters+0x66>
    0x8400b6cc    0x24    li a5,-1
    0x8400b6ce    0x26    slli a1,a1,0x26
    0x8400b6d0    0x28    mv a4,a3
    0x8400b6d2    0x2a    and a1,a1,a0
    0x8400b6d4    0x2c    srli a3,a5,0x19
    0x8400b6d8    0x30    and a0,a0,a3
    0x8400b6da    0x32    beqz a1,ffffffff8400b6e0 <decodeWriteRegisters+0x38>
    0x8400b6dc    0x34    slli a5,a5,0x27
    0x8400b6de    0x36    or a0,a0,a5
    0x8400b6e0    0x38    beq a0,a6,ffffffff8400b722 <decodeWriteRegisters+0x7a>
    0x8400b6e4    0x3c    ld a5,280(a6)
    0x8400b6e8    0x40    auipc a3,0x16
    0x8400b6ec    0x44    ld a3,352(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400b6f0    0x48    ld s0,88(a6)
    0x8400b6f4    0x4c    andi a5,a5,-16
    0x8400b6f6    0x4e    ori a5,a5,2
    0x8400b6fa    0x52    sd a5,280(a6)
    0x8400b6fe    0x56    beqz a3,ffffffff8400b736 <decodeWriteRegisters+0x8e>
    0x8400b700    0x58    andi a1,s0,1
    0x8400b704    0x5c    ld s0,48(sp)          ; stack access
    0x8400b706    0x5e    ld ra,56(sp)          ; stack access
    0x8400b708    0x60    li a3,0
    0x8400b70a    0x62    addi sp,sp,64
    0x8400b70c    0x64    j ffffffff8400b5ac <invokeTCB_WriteRegisters>
    0x8400b70e    0x66    ld ra,56(sp)          ; stack access
    0x8400b710    0x68    ld s0,48(sp)          ; stack access
    0x8400b712    0x6a    li a5,7
    0x8400b714    0x6c    auipc a4,0x4
    0x8400b718    0x70    sd a5,-84(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b71c    0x74    li a0,3
    0x8400b71e    0x76    addi sp,sp,64
    0x8400b720    0x78    ret
    0x8400b722    0x7a    ld ra,56(sp)          ; stack access
    0x8400b724    0x7c    ld s0,48(sp)          ; stack access
    0x8400b726    0x7e    li a5,3
    0x8400b728    0x80    auipc a4,0x4
    0x8400b72c    0x84    sd a5,-104(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b730    0x88    li a0,3
    0x8400b732    0x8a    addi sp,sp,64
    0x8400b734    0x8c    ret
    0x8400b736    0x8e    ld a5,368(a6)
    0x8400b73a    0x92    beqz a5,ffffffff8400b740 <decodeWriteRegisters+0x98>
    0x8400b73c    0x94    ld a5,64(a5)
    0x8400b73e    0x96    bnez a5,ffffffff8400b752 <decodeWriteRegisters+0xaa>
    0x8400b740    0x98    sd a4,24(sp)          ; stack access
    0x8400b742    0x9a    sd a0,16(sp)          ; stack access
    0x8400b744    0x9c    sd a2,8(sp)           ; stack access
    0x8400b746    0x9e    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400b74a    0xa2    ld a4,24(sp)          ; stack access
    0x8400b74c    0xa4    ld a0,16(sp)          ; stack access
    0x8400b74e    0xa6    ld a2,8(sp)           ; stack access
    0x8400b750    0xa8    j ffffffff8400b700 <decodeWriteRegisters+0x58>
    0x8400b752    0xaa    ld a5,288(a6)
    0x8400b756    0xae    andi a5,a5,1
    0x8400b758    0xb0    beqz a5,ffffffff8400b700 <decodeWriteRegisters+0x58>
    0x8400b75a    0xb2    j ffffffff8400b740 <decodeWriteRegisters+0x98>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 116 nodes.

Section invokeTCB_WriteRegisters (199 of 296)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 85 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x8400b5ac     0x0    addi sp,sp,-32
    0x8400b5ae     0x2    sd s0,16(sp)          ; stack access
    0x8400b5b0     0x4    sd ra,24(sp)          ; stack access
    0x8400b5b2     0x6    sd s1,8(sp)           ; stack access
    0x8400b5b4     0x8    li a5,32
    0x8400b5b8     0xc    mv s0,a0
    0x8400b5ba     0xe    bgeu a5,a2,ffffffff8400b5c2 <invokeTCB_WriteRegisters+0x16>
    0x8400b5be    0x12    li a2,32
    0x8400b5c2    0x16    auipc s1,0x16
    0x8400b5c6    0x1a    addi s1,s1,662 # ffffffff84021858 <ksCurThread>
    0x8400b5ca    0x1e    ld t1,0(s1)
    0x8400b5ce    0x22    addi a0,a4,24
    0x8400b5d2    0x26    auipc a6,0x3
    0x8400b5d6    0x2a    addi a6,a6,-1890 # ffffffff8400de70 <frameRegisters>
    0x8400b5da    0x2e    li a5,0
    0x8400b5dc    0x30    li t3,3
    0x8400b5de    0x32    li t4,16
    0x8400b5e0    0x34    auipc t5,0x2
    0x8400b5e4    0x38    addi t5,t5,360 # ffffffff8400d748 <msgRegisters>
    0x8400b5e8    0x3c    j ffffffff8400b5fe <invokeTCB_WriteRegisters+0x52>
    0x8400b5ea    0x3e    ld a7,0(a0)
    0x8400b5ee    0x42    slli a3,a3,0x3
    0x8400b5f0    0x44    add a3,a3,s0
    0x8400b5f2    0x46    sd a7,0(a3)
    0x8400b5f6    0x4a    beq a5,t4,ffffffff8400b62a <invokeTCB_WriteRegisters+0x7e>
    0x8400b5fa    0x4e    addi a0,a0,8
    0x8400b5fc    0x50    addi a6,a6,1
    0x8400b5fe    0x52    addi a7,a5,2
    0x8400b602    0x56    beq a2,a5,ffffffff8400b62a <invokeTCB_WriteRegisters+0x7e>
    0x8400b606    0x5a    lbu a3,0(a6)
    0x8400b60a    0x5e    addi a5,a5,1
    0x8400b60c    0x60    bltu t3,a7,ffffffff8400b5ea <invokeTCB_WriteRegisters+0x3e>
    0x8400b610    0x64    add a7,a5,t5
    0x8400b614    0x68    lbu a7,1(a7)
    0x8400b618    0x6c    slli a3,a3,0x3
    0x8400b61a    0x6e    add a3,a3,s0
    0x8400b61c    0x70    slli a7,a7,0x3
    0x8400b61e    0x72    add a7,a7,t1
    0x8400b620    0x74    ld a7,0(a7)
    0x8400b624    0x78    sd a7,0(a3)
    0x8400b628    0x7c    j ffffffff8400b5fa <invokeTCB_WriteRegisters+0x4e>
    0x8400b62a    0x7e    auipc a3,0x3
    0x8400b62e    0x82    addi a3,a3,-1962 # ffffffff8400de80 <gpRegisters>
    0x8400b632    0x86    li a6,16
    0x8400b634    0x88    addi a4,a4,152
    0x8400b638    0x8c    auipc a7,0x3
    0x8400b63c    0x90    addi a7,a7,-1960 # ffffffff8400de90 <gpRegisters+0x10>
    0x8400b640    0x94    sub a6,a6,a3
    0x8400b644    0x98    add a5,a6,a3
    0x8400b648    0x9c    bgeu a5,a2,ffffffff8400b660 <invokeTCB_WriteRegisters+0xb4>
    0x8400b64c    0xa0    lbu a5,0(a3)
    0x8400b650    0xa4    ld a0,0(a4)
    0x8400b652    0xa6    addi a3,a3,1
    0x8400b654    0xa8    slli a5,a5,0x3
    0x8400b656    0xaa    add a5,a5,s0
    0x8400b658    0xac    sd a0,0(a5)
    0x8400b65a    0xae    addi a4,a4,8
    0x8400b65c    0xb0    bne a3,a7,ffffffff8400b644 <invokeTCB_WriteRegisters+0x98>
    0x8400b660    0xb4    ld a5,264(s0)
    0x8400b664    0xb8    sd a5,272(s0)
    0x8400b668    0xbc    bnez a1,ffffffff8400b67a <invokeTCB_WriteRegisters+0xce>
    0x8400b66a    0xbe    beq s0,t1,ffffffff8400b698 <invokeTCB_WriteRegisters+0xec>
    0x8400b66e    0xc2    ld ra,24(sp)          ; stack access
    0x8400b670    0xc4    ld s0,16(sp)          ; stack access
    0x8400b672    0xc6    ld s1,8(sp)           ; stack access
    0x8400b674    0xc8    li a0,0
    0x8400b676    0xca    addi sp,sp,32
    0x8400b678    0xcc    ret
    0x8400b67a    0xce    ld a5,280(s0)
    0x8400b67e    0xd2    andi a5,a5,15
    0x8400b680    0xd4    beqz a5,ffffffff8400b68a <invokeTCB_WriteRegisters+0xde>
    0x8400b682    0xd6    addi a5,a5,-3
    0x8400b684    0xd8    li a4,3
    0x8400b686    0xda    bltu a4,a5,ffffffff8400b66a <invokeTCB_WriteRegisters+0xbe>
    0x8400b68a    0xde    mv a0,s0
    0x8400b68c    0xe0    jal ra,ffffffff84007cf2 <restart.part.0>
    0x8400b690    0xe4    ld t1,0(s1)
    0x8400b694    0xe8    bne s0,t1,ffffffff8400b66e <invokeTCB_WriteRegisters+0xc2>
    0x8400b698    0xec    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400b69c    0xf0    ld ra,24(sp)          ; stack access
    0x8400b69e    0xf2    ld s0,16(sp)          ; stack access
    0x8400b6a0    0xf4    ld s1,8(sp)           ; stack access
    0x8400b6a2    0xf6    li a0,0
    0x8400b6a4    0xf8    addi sp,sp,32
    0x8400b6a6    0xfa    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
85 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 134 nodes.

Section decodeReadRegisters (200 of 296)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 81 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x8400b4d2     0x0    addi sp,sp,-64
    0x8400b4d4     0x2    sd ra,56(sp)          ; stack access
    0x8400b4d6     0x4    sd s0,48(sp)          ; stack access
    0x8400b4d8     0x6    sd a0,32(sp)          ; stack access
    0x8400b4da     0x8    sd a1,40(sp)          ; stack access
    0x8400b4dc     0xa    li a5,1
    0x8400b4de     0xc    bgeu a5,a2,ffffffff8400b55e <decodeReadRegisters+0x8c>
    0x8400b4e2    0x10    auipc a6,0x16
    0x8400b4e6    0x14    ld a6,886(a6) # ffffffff84021858 <ksCurThread>
    0x8400b4ea    0x18    ld a2,96(a6)
    0x8400b4ee    0x1c    mv a4,a3
    0x8400b4f0    0x1e    li a3,31
    0x8400b4f2    0x20    addi a1,a2,-1
    0x8400b4f6    0x24    bltu a3,a1,ffffffff8400b53a <decodeReadRegisters+0x68>
    0x8400b4fa    0x28    li a3,-1
    0x8400b4fc    0x2a    slli a5,a5,0x26
    0x8400b4fe    0x2c    srli a1,a3,0x19
    0x8400b502    0x30    and a5,a5,a0
    0x8400b504    0x32    and a0,a0,a1
    0x8400b506    0x34    beqz a5,ffffffff8400b50c <decodeReadRegisters+0x3a>
    0x8400b508    0x36    slli a3,a3,0x27
    0x8400b50a    0x38    or a0,a0,a3
    0x8400b50c    0x3a    beq a0,a6,ffffffff8400b572 <decodeReadRegisters+0xa0>
    0x8400b510    0x3e    ld a5,280(a6)
    0x8400b514    0x42    auipc a3,0x16
    0x8400b518    0x46    ld a3,820(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400b51c    0x4a    ld s0,88(a6)
    0x8400b520    0x4e    andi a5,a5,-16
    0x8400b522    0x50    ori a5,a5,2
    0x8400b526    0x54    sd a5,280(a6)
    0x8400b52a    0x58    beqz a3,ffffffff8400b586 <decodeReadRegisters+0xb4>
    0x8400b52c    0x5a    andi a1,s0,1
    0x8400b530    0x5e    ld s0,48(sp)          ; stack access
    0x8400b532    0x60    ld ra,56(sp)          ; stack access
    0x8400b534    0x62    li a3,0
    0x8400b536    0x64    addi sp,sp,64
    0x8400b538    0x66    j ffffffff8400b356 <invokeTCB_ReadRegisters>
    0x8400b53a    0x68    auipc a4,0x4
    0x8400b53e    0x6c    addi a4,a4,-1338 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400b542    0x70    ld ra,56(sp)          ; stack access
    0x8400b544    0x72    ld s0,48(sp)          ; stack access
    0x8400b546    0x74    sd a5,1696(a4)
    0x8400b54a    0x78    li a3,4
    0x8400b54c    0x7a    li a5,32
    0x8400b550    0x7e    sd a3,1728(a4)
    0x8400b554    0x82    sd a5,1704(a4)
    0x8400b558    0x86    li a0,3
    0x8400b55a    0x88    addi sp,sp,64
    0x8400b55c    0x8a    ret
    0x8400b55e    0x8c    ld ra,56(sp)          ; stack access
    0x8400b560    0x8e    ld s0,48(sp)          ; stack access
    0x8400b562    0x90    li a5,7
    0x8400b564    0x92    auipc a4,0x4
    0x8400b568    0x96    sd a5,348(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b56c    0x9a    li a0,3
    0x8400b56e    0x9c    addi sp,sp,64
    0x8400b570    0x9e    ret
    0x8400b572    0xa0    ld ra,56(sp)          ; stack access
    0x8400b574    0xa2    ld s0,48(sp)          ; stack access
    0x8400b576    0xa4    li a5,3
    0x8400b578    0xa6    auipc a4,0x4
    0x8400b57c    0xaa    sd a5,328(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b580    0xae    li a0,3
    0x8400b582    0xb0    addi sp,sp,64
    0x8400b584    0xb2    ret
    0x8400b586    0xb4    ld a5,368(a6)
    0x8400b58a    0xb8    beqz a5,ffffffff8400b590 <decodeReadRegisters+0xbe>
    0x8400b58c    0xba    ld a5,64(a5)
    0x8400b58e    0xbc    bnez a5,ffffffff8400b5a2 <decodeReadRegisters+0xd0>
    0x8400b590    0xbe    sd a4,24(sp)          ; stack access
    0x8400b592    0xc0    sd a0,16(sp)          ; stack access
    0x8400b594    0xc2    sd a2,8(sp)           ; stack access
    0x8400b596    0xc4    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400b59a    0xc8    ld a4,24(sp)          ; stack access
    0x8400b59c    0xca    ld a0,16(sp)          ; stack access
    0x8400b59e    0xcc    ld a2,8(sp)           ; stack access
    0x8400b5a0    0xce    j ffffffff8400b52c <decodeReadRegisters+0x5a>
    0x8400b5a2    0xd0    ld a5,288(a6)
    0x8400b5a6    0xd4    andi a5,a5,1
    0x8400b5a8    0xd6    beqz a5,ffffffff8400b52c <decodeReadRegisters+0x5a>
    0x8400b5aa    0xd8    j ffffffff8400b590 <decodeReadRegisters+0xbe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
81 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 134 nodes.

Section decodeCopyRegisters (201 of 296)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 80 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x8400b27e     0x0    addi sp,sp,-48
    0x8400b280     0x2    sd ra,40(sp)          ; stack access
    0x8400b282     0x4    sd s0,32(sp)          ; stack access
    0x8400b284     0x6    sd a0,16(sp)          ; stack access
    0x8400b286     0x8    sd a1,24(sp)          ; stack access
    0x8400b288     0xa    beqz a2,ffffffff8400b324 <decodeCopyRegisters+0xa6>
    0x8400b28a     0xc    auipc a5,0x4
    0x8400b28e    0x10    ld a5,1910(a5) # ffffffff8400fa00 <current_extra_caps>
    0x8400b292    0x14    beqz a5,ffffffff8400b324 <decodeCopyRegisters+0xa6>
    0x8400b294    0x16    ld a1,0(a5)
    0x8400b296    0x18    li a5,12
    0x8400b298    0x1a    srli a4,a1,0x3b
    0x8400b29c    0x1e    bne a4,a5,ffffffff8400b306 <decodeCopyRegisters+0x88>
    0x8400b2a0    0x22    srli a4,a1,0x26
    0x8400b2a4    0x26    li a5,-1
    0x8400b2a6    0x28    srli a3,a5,0x19
    0x8400b2aa    0x2c    andi a4,a4,1
    0x8400b2ac    0x2e    and a1,a1,a3
    0x8400b2ae    0x30    beqz a4,ffffffff8400b2b4 <decodeCopyRegisters+0x36>
    0x8400b2b0    0x32    slli a5,a5,0x27
    0x8400b2b2    0x34    or a1,a1,a5
    0x8400b2b4    0x36    auipc a4,0x16
    0x8400b2b8    0x3a    ld a4,1444(a4) # ffffffff84021858 <ksCurThread>
    0x8400b2bc    0x3e    ld a5,280(a4)
    0x8400b2c0    0x42    auipc a3,0x16
    0x8400b2c4    0x46    ld a3,1416(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400b2c8    0x4a    ld s0,88(a4)
    0x8400b2ca    0x4c    andi a5,a5,-16
    0x8400b2cc    0x4e    ori a5,a5,2
    0x8400b2d0    0x52    sd a5,280(a4)
    0x8400b2d4    0x56    beqz a3,ffffffff8400b338 <decodeCopyRegisters+0xba>
    0x8400b2d6    0x58    ld a0,16(sp)          ; stack access
    0x8400b2d8    0x5a    li a5,-1
    0x8400b2da    0x5c    srli a3,a5,0x19
    0x8400b2de    0x60    srli a4,a0,0x26
    0x8400b2e2    0x64    andi a4,a4,1
    0x8400b2e4    0x66    and a0,a0,a3
    0x8400b2e6    0x68    beqz a4,ffffffff8400b2ec <decodeCopyRegisters+0x6e>
    0x8400b2e8    0x6a    slli a5,a5,0x27
    0x8400b2ea    0x6c    or a0,a0,a5
    0x8400b2ec    0x6e    andi a5,s0,8
    0x8400b2f0    0x72    andi a4,s0,4
    0x8400b2f4    0x76    andi a3,s0,2
    0x8400b2f8    0x7a    andi a2,s0,1
    0x8400b2fc    0x7e    ld s0,32(sp)          ; stack access
    0x8400b2fe    0x80    ld ra,40(sp)          ; stack access
    0x8400b300    0x82    li a6,0
    0x8400b302    0x84    addi sp,sp,48
    0x8400b304    0x86    j ffffffff8400b1b2 <invokeTCB_CopyRegisters>
    0x8400b306    0x88    ld ra,40(sp)          ; stack access
    0x8400b308    0x8a    ld s0,32(sp)          ; stack access
    0x8400b30a    0x8c    auipc a5,0x4
    0x8400b30e    0x90    addi a5,a5,-778 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400b312    0x94    li a4,2
    0x8400b314    0x96    sd a4,1728(a5)
    0x8400b318    0x9a    li a4,1
    0x8400b31a    0x9c    sd a4,1688(a5)
    0x8400b31e    0xa0    li a0,3
    0x8400b320    0xa2    addi sp,sp,48
    0x8400b322    0xa4    ret
    0x8400b324    0xa6    ld ra,40(sp)          ; stack access
    0x8400b326    0xa8    ld s0,32(sp)          ; stack access
    0x8400b328    0xaa    li a5,7
    0x8400b32a    0xac    auipc a4,0x4
    0x8400b32e    0xb0    sd a5,918(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b332    0xb4    li a0,3
    0x8400b334    0xb6    addi sp,sp,48
    0x8400b336    0xb8    ret
    0x8400b338    0xba    ld a5,368(a4)
    0x8400b33c    0xbe    beqz a5,ffffffff8400b342 <decodeCopyRegisters+0xc4>
    0x8400b33e    0xc0    ld a5,64(a5)
    0x8400b340    0xc2    bnez a5,ffffffff8400b34c <decodeCopyRegisters+0xce>
    0x8400b342    0xc4    sd a1,8(sp)           ; stack access
    0x8400b344    0xc6    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400b348    0xca    ld a1,8(sp)           ; stack access
    0x8400b34a    0xcc    j ffffffff8400b2d6 <decodeCopyRegisters+0x58>
    0x8400b34c    0xce    ld a5,288(a4)
    0x8400b350    0xd2    andi a5,a5,1
    0x8400b352    0xd4    beqz a5,ffffffff8400b2d6 <decodeCopyRegisters+0x58>
    0x8400b354    0xd6    j ffffffff8400b342 <decodeCopyRegisters+0xc4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 128 nodes.

Section decodeSetPriority (202 of 296)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 84 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeSetPriority`:

    0x8400a152     0x0    addi sp,sp,-48
    0x8400a154     0x2    sd ra,40(sp)          ; stack access
    0x8400a156     0x4    sd a0,16(sp)          ; stack access
    0x8400a158     0x6    sd a1,24(sp)          ; stack access
    0x8400a15a     0x8    beqz a2,ffffffff8400a1ee <decodeSetPriority+0x9c>
    0x8400a15c     0xa    auipc a5,0x6
    0x8400a160     0xe    ld a5,-1884(a5) # ffffffff8400fa00 <current_extra_caps>
    0x8400a164    0x12    beqz a5,ffffffff8400a1ee <decodeSetPriority+0x9c>
    0x8400a166    0x14    ld a5,0(a5)
    0x8400a168    0x16    li a4,12
    0x8400a16a    0x18    srli a3,a5,0x3b
    0x8400a16e    0x1c    bne a3,a4,ffffffff8400a1d2 <decodeSetPriority+0x80>
    0x8400a172    0x20    srli a3,a5,0x26
    0x8400a176    0x24    li a4,-1
    0x8400a178    0x26    srli a2,a4,0x19
    0x8400a17c    0x2a    andi a3,a3,1
    0x8400a17e    0x2c    and a5,a5,a2
    0x8400a180    0x2e    beqz a3,ffffffff8400a186 <decodeSetPriority+0x34>
    0x8400a182    0x30    slli a4,a4,0x27
    0x8400a184    0x32    or a5,a5,a4
    0x8400a186    0x34    auipc a4,0x17
    0x8400a18a    0x38    ld a4,1746(a4) # ffffffff84021858 <ksCurThread>
    0x8400a18e    0x3c    ld a1,88(a4)
    0x8400a190    0x3e    ld a5,352(a5)
    0x8400a194    0x42    bltu a5,a1,ffffffff8400a200 <decodeSetPriority+0xae>
    0x8400a198    0x46    ld a5,280(a4)
    0x8400a19c    0x4a    auipc a3,0x17
    0x8400a1a0    0x4e    ld a3,1708(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400a1a4    0x52    andi a5,a5,-16
    0x8400a1a6    0x54    ori a5,a5,2
    0x8400a1aa    0x58    sd a5,280(a4)
    0x8400a1ae    0x5c    beqz a3,ffffffff8400a21e <decodeSetPriority+0xcc>
    0x8400a1b0    0x5e    ld a0,16(sp)          ; stack access
    0x8400a1b2    0x60    li a5,-1
    0x8400a1b4    0x62    srli a3,a5,0x19
    0x8400a1b8    0x66    srli a4,a0,0x26
    0x8400a1bc    0x6a    andi a4,a4,1
    0x8400a1be    0x6c    and a0,a0,a3
    0x8400a1c0    0x6e    beqz a4,ffffffff8400a1c6 <decodeSetPriority+0x74>
    0x8400a1c2    0x70    slli a5,a5,0x27
    0x8400a1c4    0x72    or a0,a0,a5
    0x8400a1c6    0x74    jal ra,ffffffff84005c3c <setPriority>
    0x8400a1ca    0x78    li a0,0
    0x8400a1cc    0x7a    ld ra,40(sp)          ; stack access
    0x8400a1ce    0x7c    addi sp,sp,48
    0x8400a1d0    0x7e    ret
    0x8400a1d2    0x80    ld ra,40(sp)          ; stack access
    0x8400a1d4    0x82    auipc a5,0x5
    0x8400a1d8    0x86    addi a5,a5,-468 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400a1dc    0x8a    li a4,2
    0x8400a1de    0x8c    sd a4,1728(a5)
    0x8400a1e2    0x90    li a4,1
    0x8400a1e4    0x92    sd a4,1688(a5)
    0x8400a1e8    0x96    li a0,3
    0x8400a1ea    0x98    addi sp,sp,48
    0x8400a1ec    0x9a    ret
    0x8400a1ee    0x9c    ld ra,40(sp)          ; stack access
    0x8400a1f0    0x9e    li a5,7
    0x8400a1f2    0xa0    auipc a4,0x5
    0x8400a1f6    0xa4    sd a5,1230(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a1fa    0xa8    li a0,3
    0x8400a1fc    0xaa    addi sp,sp,48
    0x8400a1fe    0xac    ret
    0x8400a200    0xae    auipc a4,0x5
    0x8400a204    0xb2    addi a4,a4,-512 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400a208    0xb6    li a3,4
    0x8400a20a    0xb8    sd a3,1728(a4)
    0x8400a20e    0xbc    sd a5,1704(a4)
    0x8400a212    0xc0    auipc a3,0x5
    0x8400a216    0xc4    sd zero,1166(a3) # ffffffff8400f6a0 <current_syscall_error+0x10>
    0x8400a21a    0xc8    li a0,3
    0x8400a21c    0xca    j ffffffff8400a1cc <decodeSetPriority+0x7a>
    0x8400a21e    0xcc    ld a5,368(a4)
    0x8400a222    0xd0    beqz a5,ffffffff8400a228 <decodeSetPriority+0xd6>
    0x8400a224    0xd2    ld a5,64(a5)
    0x8400a226    0xd4    bnez a5,ffffffff8400a232 <decodeSetPriority+0xe0>
    0x8400a228    0xd6    sd a1,8(sp)           ; stack access
    0x8400a22a    0xd8    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400a22e    0xdc    ld a1,8(sp)           ; stack access
    0x8400a230    0xde    j ffffffff8400a1b0 <decodeSetPriority+0x5e>
    0x8400a232    0xe0    ld a5,288(a4)
    0x8400a236    0xe4    andi a5,a5,1
    0x8400a238    0xe6    beqz a5,ffffffff8400a1b0 <decodeSetPriority+0x5e>
    0x8400a23a    0xe8    j ffffffff8400a228 <decodeSetPriority+0xd6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
84 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 135 nodes.

Section handleFault (203 of 296)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 42 instructions.


Stack analysis
---------------

No stack accesses found. Code for `handleFault`:

    0x84009b2e     0x0    andi a5,a0,-1024
    0x84009b32     0x4    ld a7,96(a5)
    0x84009b36     0x8    li a4,4
    0x84009b38     0xa    mv a6,a0
    0x84009b3a     0xc    srli a3,a7,0x3b
    0x84009b3e    0x10    addi a5,a5,96
    0x84009b42    0x14    beq a3,a4,ffffffff84009b5e <handleFault+0x30>
    0x84009b46    0x18    ld a5,280(a0)
    0x84009b4a    0x1c    auipc a4,0x18
    0x84009b4e    0x20    ld a4,-754(a4) # ffffffff84021858 <ksCurThread>
    0x84009b52    0x24    andi a5,a5,-16
    0x84009b54    0x26    sd a5,280(a0)
    0x84009b58    0x2a    beq a0,a4,ffffffff84009bac <handleFault+0x7e>
    0x84009b5c    0x2e    ret
    0x84009b5e    0x30    auipc a4,0x6
    0x84009b62    0x34    addi a4,a4,1186 # ffffffff84010000 <intStateIRQNode>
    0x84009b66    0x38    ld t4,-1920(a4)
    0x84009b6a    0x3c    ld t3,-1912(a4)
    0x84009b6e    0x40    srli a0,a7,0x26
    0x84009b72    0x44    li a1,-1
    0x84009b74    0x46    ld a2,8(a5)
    0x84009b76    0x48    srli a3,a7,0x39
    0x84009b7a    0x4c    srli a4,a7,0x3a
    0x84009b7e    0x50    srli t1,a1,0x19
    0x84009b82    0x54    sd t4,312(a6)
    0x84009b86    0x58    sd t3,320(a6)
    0x84009b8a    0x5c    andi a0,a0,1
    0x84009b8c    0x5e    ld a5,368(a6)
    0x84009b90    0x62    andi a3,a3,1
    0x84009b92    0x64    andi a4,a4,1
    0x84009b94    0x66    and a7,a7,t1
    0x84009b98    0x6a    beqz a0,ffffffff84009ba0 <handleFault+0x72>
    0x84009b9a    0x6c    slli a1,a1,0x27
    0x84009b9c    0x6e    or a7,a7,a1
    0x84009ba0    0x72    snez a5,a5
    0x84009ba4    0x76    li a1,0
    0x84009ba6    0x78    li a0,1
    0x84009ba8    0x7a    j ffffffff84008d4a <sendIPC>
    0x84009bac    0x7e    auipc a5,0x18
    0x84009bb0    0x82    ld a5,-868(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84009bb4    0x86    bnez a5,ffffffff84009b5c <handleFault+0x2e>
    0x84009bb6    0x88    j ffffffff84004c1c <rescheduleRequired>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 64 nodes.

Section invokeCNodeDelete (204 of 296)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 21 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

9 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x8400955a     0x0    addi sp,sp,-64
    0x8400955c     0x2    sd s0,48(sp)          ; stack access
    0x8400955e     0x4    mv a1,a0
    0x84009560     0x6    mv s0,a0
    0x84009562     0x8    li a2,1
    0x84009564     0xa    mv a0,sp
    0x84009566     0xc    sd s1,40(sp)          ; stack access
    0x84009568     0xe    sd ra,56(sp)          ; stack access
    0x8400956a    0x10    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400956e    0x14    ld s1,0(sp)           ; stack access
    0x84009570    0x16    bnez s1,ffffffff8400957c <invokeCNodeDelete+0x22>
    0x84009572    0x18    ld a1,16(sp)          ; stack access
    0x84009574    0x1a    ld a2,24(sp)          ; stack access
    0x84009576    0x1c    mv a0,s0
    0x84009578    0x1e    jal ra,ffffffff8400340c <emptySlot>
    0x8400957c    0x22    ld ra,56(sp)          ; stack access
    0x8400957e    0x24    ld s0,48(sp)          ; stack access
    0x84009580    0x26    mv a0,s1
    0x84009582    0x28    ld s1,40(sp)          ; stack access
    0x84009584    0x2a    addi sp,sp,64
    0x84009586    0x2c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 35 nodes.

Section cteDelete (205 of 296)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 27 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `cteDelete`:

    0x8400951e     0x0    addi sp,sp,-64
    0x84009520     0x2    sd s0,48(sp)          ; stack access
    0x84009522     0x4    sd s1,40(sp)          ; stack access
    0x84009524     0x6    mv a2,a1
    0x84009526     0x8    mv s1,a0
    0x84009528     0xa    mv s0,a1
    0x8400952a     0xc    mv a1,a0
    0x8400952c     0xe    mv a0,sp
    0x8400952e    0x10    sd s2,32(sp)          ; stack access
    0x84009530    0x12    sd ra,56(sp)          ; stack access
    0x84009532    0x14    jal ra,ffffffff84009308 <finaliseSlot>
    0x84009536    0x18    ld s2,0(sp)           ; stack access
    0x84009538    0x1a    bnez s2,ffffffff8400954c <cteDelete+0x2e>
    0x8400953c    0x1e    ld a2,8(sp)           ; stack access
    0x8400953e    0x20    or s0,s0,a2
    0x84009540    0x22    beqz s0,ffffffff8400954c <cteDelete+0x2e>
    0x84009542    0x24    ld a1,16(sp)          ; stack access
    0x84009544    0x26    ld a2,24(sp)          ; stack access
    0x84009546    0x28    mv a0,s1
    0x84009548    0x2a    jal ra,ffffffff8400340c <emptySlot>
    0x8400954c    0x2e    ld ra,56(sp)          ; stack access
    0x8400954e    0x30    ld s0,48(sp)          ; stack access
    0x84009550    0x32    ld s1,40(sp)          ; stack access
    0x84009552    0x34    mv a0,s2
    0x84009554    0x36    ld s2,32(sp)          ; stack access
    0x84009556    0x38    addi sp,sp,64
    0x84009558    0x3a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 46 nodes.

Section preemptionPoint (206 of 296)
====================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 67 instructions.

Skipping 144027f3 csrr a5,sip

Skipping c01025f3 rdtime a1


Stack analysis
---------------

2 stack accesses found. Annotated code for `preemptionPoint`:

    0x84009244     0x0    auipc a4,0x18
    0x84009248     0x4    addi a4,a4,1500 # ffffffff84021820 <ksWorkUnitsCompleted>
    0x8400924c     0x8    ld a5,0(a4)
    0x8400924e     0xa    li a3,99
    0x84009252     0xe    addi a5,a5,1
    0x84009254    0x10    bgeu a3,a5,ffffffff840092ce <preemptionPoint+0x8a>
    0x84009258    0x14    auipc a5,0x18
    0x8400925c    0x18    sd zero,1480(a5) # ffffffff84021820 <ksWorkUnitsCompleted>
    0x84009260    0x1c    csrr a5,sip
    0x84009264    0x20    andi a5,a5,544
    0x84009268    0x24    li a0,4
    0x8400926a    0x26    bnez a5,ffffffff840092d2 <preemptionPoint+0x8e>
    0x8400926c    0x28    addi sp,sp,-16
    0x8400926e    0x2a    auipc a2,0x18
    0x84009272    0x2e    addi a2,a2,1474 # ffffffff84021830 <ksCurTime>
    0x84009276    0x32    ld a7,0(a2)
    0x8400927a    0x36    sd ra,8(sp)           ; stack access
    0x8400927c    0x38    rdtime a1
    0x84009280    0x3c    auipc a4,0x18
    0x84009284    0x40    ld a4,1448(a4) # ffffffff84021828 <ksCurSC>
    0x84009288    0x44    ld a6,72(a4)
    0x8400928c    0x48    auipc a3,0x18
    0x84009290    0x4c    addi a3,a3,1460 # ffffffff84021840 <ksConsumed>
    0x84009294    0x50    ld a0,0(a3)
    0x84009296    0x52    slli a5,a6,0x4
    0x8400929a    0x56    add a5,a5,a4
    0x8400929c    0x58    sub a0,a0,a7
    0x840092a0    0x5c    ld a5,96(a5)
    0x840092a2    0x5e    add a0,a0,a1
    0x840092a4    0x60    sd a1,0(a2)
    0x840092a6    0x62    sd a0,0(a3)
    0x840092a8    0x64    bltu a5,a0,ffffffff840092e8 <preemptionPoint+0xa4>
    0x840092ac    0x68    sub a5,a5,a0
    0x840092ae    0x6a    li a3,19
    0x840092b0    0x6c    bgeu a3,a5,ffffffff840092e8 <preemptionPoint+0xa4>
    0x840092b4    0x70    ld a5,0(a4)
    0x840092b6    0x72    bnez a5,ffffffff840092d4 <preemptionPoint+0x90>
    0x840092b8    0x74    addi a0,a0,20
    0x840092ba    0x76    auipc a5,0x18
    0x840092be    0x7a    ld a5,1366(a5) # ffffffff84021810 <ksDomainTime>
    0x840092c2    0x7e    bltu a5,a0,ffffffff840092f6 <preemptionPoint+0xb2>
    0x840092c6    0x82    li a0,0
    0x840092c8    0x84    ld ra,8(sp)           ; stack access
    0x840092ca    0x86    addi sp,sp,16
    0x840092cc    0x88    ret
    0x840092ce    0x8a    sd a5,0(a4)
    0x840092d0    0x8c    li a0,0
    0x840092d2    0x8e    ret
    0x840092d4    0x90    ld a5,80(a4)
    0x840092d6    0x92    ld a4,64(a4)
    0x840092d8    0x94    bgeu a5,a6,ffffffff840092de <preemptionPoint+0x9a>
    0x840092dc    0x98    add a5,a5,a4
    0x840092de    0x9a    addi a5,a5,1
    0x840092e0    0x9c    sub a6,a5,a6
    0x840092e4    0xa0    bne a4,a6,ffffffff840092b8 <preemptionPoint+0x74>
    0x840092e8    0xa4    li a3,1
    0x840092ea    0xa6    li a2,0
    0x840092ec    0xa8    li a1,1
    0x840092ee    0xaa    jal ra,ffffffff840090cc <chargeBudget>
    0x840092f2    0xae    li a0,4
    0x840092f4    0xb0    j ffffffff840092c8 <preemptionPoint+0x84>
    0x840092f6    0xb2    li a5,1
    0x840092f8    0xb4    auipc a4,0x18
    0x840092fc    0xb8    sd a5,1344(a4) # ffffffff84021838 <ksReprogram>
    0x84009300    0xbc    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84009304    0xc0    li a0,4
    0x84009306    0xc2    j ffffffff840092c8 <preemptionPoint+0x84>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
67 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 106 nodes.

Section mcsIRQ (207 of 296)
===========================

Deriving specifications
-----------------------

Section `mcsIRQ` consists of 69 instructions.

Skipping c01026f3 rdtime a3


Stack analysis
---------------

No stack accesses found. Code for `mcsIRQ`:

    0x8400917c     0x0    li a5,54
    0x84009180     0x4    bne a0,a5,ffffffff840091a4 <mcsIRQ+0x28>
    0x84009184     0x8    auipc a2,0x18
    0x84009188     0xc    addi a2,a2,1708 # ffffffff84021830 <ksCurTime>
    0x8400918c    0x10    ld a1,0(a2)
    0x8400918e    0x12    rdtime a3
    0x84009192    0x16    auipc a4,0x18
    0x84009196    0x1a    addi a4,a4,1710 # ffffffff84021840 <ksConsumed>
    0x8400919a    0x1e    ld a5,0(a4)
    0x8400919c    0x20    sd a3,0(a2)
    0x8400919e    0x22    sub a5,a5,a1
    0x840091a0    0x24    add a5,a5,a3
    0x840091a2    0x26    sd a5,0(a4)
    0x840091a4    0x28    auipc a4,0x18
    0x840091a8    0x2c    ld a4,1716(a4) # ffffffff84021858 <ksCurThread>
    0x840091ac    0x30    ld a5,280(a4)
    0x840091b0    0x34    li a2,1
    0x840091b2    0x36    auipc a3,0x18
    0x840091b6    0x3a    ld a3,1654(a3) # ffffffff84021828 <ksCurSC>
    0x840091ba    0x3e    andi a5,a5,15
    0x840091bc    0x40    addi a5,a5,-1
    0x840091be    0x42    bgeu a2,a5,ffffffff840091d8 <mcsIRQ+0x5c>
    0x840091c2    0x46    ld a5,64(a3)
    0x840091c4    0x48    bnez a5,ffffffff840091c8 <mcsIRQ+0x4c>
    0x840091c6    0x4a    ret
    0x840091c8    0x4c    li a3,1
    0x840091ca    0x4e    li a2,0
    0x840091cc    0x50    li a1,0
    0x840091ce    0x52    auipc a0,0x18
    0x840091d2    0x56    ld a0,1650(a0) # ffffffff84021840 <ksConsumed>
    0x840091d6    0x5a    j ffffffff840090cc <chargeBudget>
    0x840091d8    0x5c    ld a5,368(a4)
    0x840091dc    0x60    beqz a5,ffffffff840091c2 <mcsIRQ+0x46>
    0x840091de    0x62    ld a5,64(a5)
    0x840091e0    0x64    beqz a5,ffffffff840091c2 <mcsIRQ+0x46>
    0x840091e2    0x66    ld a5,288(a4)
    0x840091e6    0x6a    andi a5,a5,1
    0x840091e8    0x6c    bnez a5,ffffffff840091c2 <mcsIRQ+0x46>
    0x840091ea    0x6e    ld a4,72(a3)
    0x840091ec    0x70    auipc a0,0x18
    0x840091f0    0x74    ld a0,1620(a0) # ffffffff84021840 <ksConsumed>
    0x840091f4    0x78    slli a5,a4,0x4
    0x840091f8    0x7c    add a5,a5,a3
    0x840091fa    0x7e    ld a5,96(a5)
    0x840091fc    0x80    bltu a5,a0,ffffffff8400923c <mcsIRQ+0xc0>
    0x84009200    0x84    sub a5,a5,a0
    0x84009202    0x86    li a2,19
    0x84009204    0x88    bgeu a2,a5,ffffffff8400923c <mcsIRQ+0xc0>
    0x84009208    0x8c    ld a5,0(a3)
    0x8400920a    0x8e    bnez a5,ffffffff84009228 <mcsIRQ+0xac>
    0x8400920c    0x90    addi a0,a0,20
    0x8400920e    0x92    auipc a5,0x18
    0x84009212    0x96    ld a5,1538(a5) # ffffffff84021810 <ksDomainTime>
    0x84009216    0x9a    bgeu a5,a0,ffffffff840091c6 <mcsIRQ+0x4a>
    0x8400921a    0x9e    li a5,1
    0x8400921c    0xa0    auipc a4,0x18
    0x84009220    0xa4    sd a5,1564(a4) # ffffffff84021838 <ksReprogram>
    0x84009224    0xa8    j ffffffff84004c1c <rescheduleRequired>
    0x84009228    0xac    ld a5,80(a3)
    0x8400922a    0xae    ld a3,64(a3)
    0x8400922c    0xb0    bgeu a5,a4,ffffffff84009232 <mcsIRQ+0xb6>
    0x84009230    0xb4    add a5,a5,a3
    0x84009232    0xb6    addi a5,a5,1
    0x84009234    0xb8    sub a4,a5,a4
    0x84009238    0xbc    bne a3,a4,ffffffff8400920c <mcsIRQ+0x90>
    0x8400923c    0xc0    li a3,1
    0x8400923e    0xc2    li a2,0
    0x84009240    0xc4    li a1,1
    0x84009242    0xc6    j ffffffff840090cc <chargeBudget>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `mcsIRQ` has 118 nodes.

Section handleInterrupt (208 of 296)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 91 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleInterrupt`:

    0x840084fa      0x0    li a3,54
    0x840084fe      0x4    bltu a3,a0,ffffffff840085d4 <handleInterrupt+0xda>
    0x84008502      0x8    slli a4,a0,0x3
    0x84008506      0xc    auipc a5,0x7
    0x8400850a     0x10    addi a5,a5,-1286 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400850e     0x14    add a5,a5,a4
    0x84008510     0x16    ld a5,1736(a5)
    0x84008514     0x1a    li a4,2
    0x84008516     0x1c    beq a5,a4,ffffffff8400858e <handleInterrupt+0x94>
    0x8400851a     0x20    addi sp,sp,-16
    0x8400851c     0x22    sd ra,8(sp)           ; stack access
    0x8400851e     0x24    bltu a4,a5,ffffffff84008560 <handleInterrupt+0x66>
    0x84008522     0x28    beqz a5,ffffffff84008574 <handleInterrupt+0x7a>
    0x84008524     0x2a    slli a0,a0,0x5
    0x84008526     0x2c    auipc a5,0x8
    0x8400852a     0x30    addi a5,a5,-1318 # ffffffff84010000 <intStateIRQNode>
    0x8400852e     0x34    add a5,a5,a0
    0x84008530     0x36    ld a0,0(a5)
    0x84008532     0x38    li a4,6
    0x84008534     0x3a    srli a3,a0,0x3b
    0x84008538     0x3e    bne a3,a4,ffffffff84008566 <handleInterrupt+0x6c>
    0x8400853c     0x42    srli a4,a0,0x39
    0x84008540     0x46    andi a4,a4,1
    0x84008542     0x48    beqz a4,ffffffff84008566 <handleInterrupt+0x6c>
    0x84008544     0x4a    srli a3,a0,0x26
    0x84008548     0x4e    li a4,-1
    0x8400854a     0x50    srli a2,a4,0x19
    0x8400854e     0x54    andi a3,a3,1
    0x84008550     0x56    and a0,a0,a2
    0x84008552     0x58    beqz a3,ffffffff84008558 <handleInterrupt+0x5e>
    0x84008554     0x5a    slli a4,a4,0x27
    0x84008556     0x5c    or a0,a0,a4
    0x84008558     0x5e    ld a1,8(a5)
    0x8400855a     0x60    jal ra,ffffffff8400830a <sendSignal>
    0x8400855e     0x64    j ffffffff84008566 <handleInterrupt+0x6c>
    0x84008560     0x66    li a4,3
    0x84008562     0x68    bne a5,a4,ffffffff84008602 <handleInterrupt+0x108>
    0x84008566     0x6c    ld ra,8(sp)           ; stack access
    0x84008568     0x6e    auipc a5,0x19
    0x8400856c     0x72    sw zero,776(a5) # ffffffff84021870 <active_irq>
    0x84008570     0x76    addi sp,sp,16
    0x84008572     0x78    ret
    0x84008574     0x7a    bne a0,a3,ffffffff840085a2 <handleInterrupt+0xa8>
    0x84008578     0x7e    li a5,32
    0x8400857c     0x82    csrrc a5,sie,a5
    0x84008580     0x86    ld ra,8(sp)           ; stack access
    0x84008582     0x88    auipc a5,0x19
    0x84008586     0x8c    sw zero,750(a5) # ffffffff84021870 <active_irq>
    0x8400858a     0x90    addi sp,sp,16
    0x8400858c     0x92    ret
    0x8400858e     0x94    li a5,1
    0x84008590     0x96    auipc a4,0x19
    0x84008594     0x9a    sd a5,680(a4) # ffffffff84021838 <ksReprogram>
    0x84008598     0x9e    auipc a5,0x19
    0x8400859c     0xa2    sw zero,728(a5) # ffffffff84021870 <active_irq>
    0x840085a0     0xa6    ret
    0x840085a2     0xa8    srli a4,a0,0x5
    0x840085a6     0xac    lui a5,0xc0002
    0x840085aa     0xb0    addi a5,a5,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x840085ae     0xb4    slli a4,a4,0x2
    0x840085b0     0xb6    add a4,a4,a5
    0x840085b2     0xb8    lw a3,0(a4)
    0x840085b4     0xba    li a5,1
    0x840085b6     0xbc    andi a0,a0,31
    0x840085b8     0xbe    sll a0,a5,a0
    0x840085bc     0xc2    not a5,a0
    0x840085c0     0xc6    ld ra,8(sp)           ; stack access
    0x840085c2     0xc8    and a5,a5,a3
    0x840085c4     0xca    sext.w a5,a5
    0x840085c6     0xcc    sw a5,0(a4)
    0x840085c8     0xce    auipc a5,0x19
    0x840085cc     0xd2    sw zero,680(a5) # ffffffff84021870 <active_irq>
    0x840085d0     0xd6    addi sp,sp,16
    0x840085d2     0xd8    ret
    0x840085d4     0xda    srli a4,a0,0x5
    0x840085d8     0xde    lui a5,0xc0002
    0x840085dc     0xe2    addi a5,a5,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x840085e0     0xe6    slli a4,a4,0x2
    0x840085e2     0xe8    add a4,a4,a5
    0x840085e4     0xea    lw a3,0(a4)
    0x840085e6     0xec    li a5,1
    0x840085e8     0xee    andi a0,a0,31
    0x840085ea     0xf0    sll a0,a5,a0
    0x840085ee     0xf4    not a5,a0
    0x840085f2     0xf8    and a5,a5,a3
    0x840085f4     0xfa    sext.w a5,a5
    0x840085f6     0xfc    sw a5,0(a4)
    0x840085f8     0xfe    auipc a5,0x19
    0x840085fc    0x102    sw zero,632(a5) # ffffffff84021870 <active_irq>
    0x84008600    0x106    ret
    0x84008602    0x108    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
91 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 134 nodes.

Section schedContext_resume_part_0 (209 of 296)
===============================================

Deriving specifications
-----------------------

Section `schedContext_resume_part_0` consists of 31 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_resume_part_0`:

    0x84007c78     0x0    ld a5,72(a0)
    0x84007c7a     0x2    addi a4,a0,88
    0x84007c7e     0x6    addi sp,sp,-16
    0x84007c80     0x8    slli a5,a5,0x4
    0x84007c82     0xa    add a5,a5,a4
    0x84007c84     0xc    ld a3,0(a5)
    0x84007c86     0xe    auipc a4,0x1a
    0x84007c8a    0x12    ld a4,-1110(a4) # ffffffff84021830 <ksCurTime>
    0x84007c8e    0x16    sd s0,0(sp)           ; stack access
    0x84007c90    0x18    sd ra,8(sp)           ; stack access
    0x84007c92    0x1a    addi a4,a4,10
    0x84007c94    0x1c    mv s0,a0
    0x84007c96    0x1e    bltu a4,a3,ffffffff84007ca2 <schedContext_resume.part.0+0x2a>
    0x84007c9a    0x22    ld a4,8(a5)
    0x84007c9c    0x24    li a5,19
    0x84007c9e    0x26    bltu a5,a4,ffffffff84007cc2 <schedContext_resume.part.0+0x4a>
    0x84007ca2    0x2a    ld a0,24(s0)
    0x84007ca4    0x2c    ld a5,288(a0)
    0x84007ca8    0x30    srli a5,a5,0x1
    0x84007caa    0x32    andi a5,a5,1
    0x84007cac    0x34    beqz a5,ffffffff84007cb4 <schedContext_resume.part.0+0x3c>
    0x84007cae    0x36    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84007cb2    0x3a    ld a0,24(s0)
    0x84007cb4    0x3c    jal ra,ffffffff84007bb2 <tcbReleaseEnqueue>
    0x84007cb8    0x40    li a5,1
    0x84007cba    0x42    auipc a4,0x1a
    0x84007cbe    0x46    sd a5,-1154(a4) # ffffffff84021838 <ksReprogram>
    0x84007cc2    0x4a    ld ra,8(sp)           ; stack access
    0x84007cc4    0x4c    ld s0,0(sp)           ; stack access
    0x84007cc6    0x4e    addi sp,sp,16
    0x84007cc8    0x50    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_resume_part_0` has 52 nodes.

Section postpone (210 of 296)
=============================

Deriving specifications
-----------------------

Section `postpone` consists of 19 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `postpone`:

    0x84007c48     0x0    addi sp,sp,-16
    0x84007c4a     0x2    sd s0,0(sp)           ; stack access
    0x84007c4c     0x4    mv s0,a0
    0x84007c4e     0x6    ld a0,24(a0)
    0x84007c50     0x8    sd ra,8(sp)           ; stack access
    0x84007c52     0xa    ld a5,288(a0)
    0x84007c56     0xe    srli a5,a5,0x1
    0x84007c58    0x10    andi a5,a5,1
    0x84007c5a    0x12    beqz a5,ffffffff84007c62 <postpone+0x1a>
    0x84007c5c    0x14    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84007c60    0x18    ld a0,24(s0)
    0x84007c62    0x1a    jal ra,ffffffff84007bb2 <tcbReleaseEnqueue>
    0x84007c66    0x1e    ld ra,8(sp)           ; stack access
    0x84007c68    0x20    ld s0,0(sp)           ; stack access
    0x84007c6a    0x22    li a5,1
    0x84007c6c    0x24    auipc a4,0x1a
    0x84007c70    0x28    sd a5,-1076(a4) # ffffffff84021838 <ksReprogram>
    0x84007c74    0x2c    addi sp,sp,16
    0x84007c76    0x2e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `postpone` has 32 nodes.

Section invokeIRQHandler_SetIRQHandler (211 of 296)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 31 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x840078ec     0x0    addi sp,sp,-48
    0x840078ee     0x2    sd s0,32(sp)          ; stack access
    0x840078f0     0x4    slli s0,a0,0x5
    0x840078f4     0x8    auipc a0,0x8
    0x840078f8     0xc    addi a0,a0,1804 # ffffffff84010000 <intStateIRQNode>
    0x840078fc    0x10    add s0,s0,a0
    0x840078fe    0x12    ld a5,0(s0)
    0x84007900    0x14    sd a2,24(sp)          ; stack access
    0x84007902    0x16    sd ra,40(sp)          ; stack access
    0x84007904    0x18    sd a1,16(sp)          ; stack access
    0x84007906    0x1a    srli a5,a5,0x3b
    0x84007908    0x1c    mv a2,a3
    0x8400790a    0x1e    bnez a5,ffffffff8400791c <invokeIRQHandler_SetIRQHandler+0x30>
    0x8400790c    0x20    mv a3,s0
    0x8400790e    0x22    ld s0,32(sp)          ; stack access
    0x84007910    0x24    ld a0,16(sp)          ; stack access
    0x84007912    0x26    ld a1,24(sp)          ; stack access
    0x84007914    0x28    ld ra,40(sp)          ; stack access
    0x84007916    0x2a    addi sp,sp,48
    0x84007918    0x2c    j ffffffff84004ec2 <cteInsert>
    0x8400791c    0x30    mv a0,s0
    0x8400791e    0x32    sd a3,8(sp)           ; stack access
    0x84007920    0x34    jal ra,ffffffff840078a2 <cteDeleteOne.part.0>
    0x84007924    0x38    mv a3,s0
    0x84007926    0x3a    ld s0,32(sp)          ; stack access
    0x84007928    0x3c    ld a2,8(sp)           ; stack access
    0x8400792a    0x3e    ld a0,16(sp)          ; stack access
    0x8400792c    0x40    ld a1,24(sp)          ; stack access
    0x8400792e    0x42    ld ra,40(sp)          ; stack access
    0x84007930    0x44    addi sp,sp,48
    0x84007932    0x46    j ffffffff84004ec2 <cteInsert>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 51 nodes.

Section reply_remove (212 of 296)
=================================

Deriving specifications
-----------------------

Section `reply_remove` consists of 60 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `reply_remove`:

    0x84007464     0x0    ld a5,16(a0)
    0x84007466     0x2    ld a4,8(a0)
    0x84007468     0x4    li a3,1
    0x8400746a     0x6    addi sp,sp,-32
    0x8400746c     0x8    slli a3,a3,0x26
    0x8400746e     0xa    li a2,-1
    0x84007470     0xc    sd s0,16(sp)          ; stack access
    0x84007472     0xe    sd s1,8(sp)           ; stack access
    0x84007474    0x10    mv s0,a0
    0x84007476    0x12    srli s1,a2,0x19
    0x8400747a    0x16    sd ra,24(sp)          ; stack access
    0x8400747c    0x18    and a0,a5,a3
    0x84007480    0x1c    and a6,a5,s1
    0x84007484    0x20    and s1,s1,a4
    0x84007486    0x22    and a4,a4,a3
    0x84007488    0x24    beqz a0,ffffffff840074ae <reply_remove+0x4a>
    0x8400748a    0x26    slli a2,a2,0x27
    0x8400748c    0x28    or a6,a6,a2
    0x84007490    0x2c    beqz a4,ffffffff8400749c <reply_remove+0x38>
    0x84007492    0x2e    li a4,-1
    0x84007494    0x30    slli a4,a4,0x27
    0x84007496    0x32    or s1,s1,a4
    0x84007498    0x34    beqz a6,ffffffff840074b4 <reply_remove+0x50>
    0x8400749c    0x38    srli a5,a5,0x30
    0x8400749e    0x3a    andi a5,a5,1
    0x840074a0    0x3c    beqz a5,ffffffff840074f2 <reply_remove+0x8e>
    0x840074a2    0x3e    mv a0,s0
    0x840074a4    0x40    ld s0,16(sp)          ; stack access
    0x840074a6    0x42    ld ra,24(sp)          ; stack access
    0x840074a8    0x44    ld s1,8(sp)           ; stack access
    0x840074aa    0x46    addi sp,sp,32
    0x840074ac    0x48    j ffffffff840073b8 <reply_pop>
    0x840074ae    0x4a    bnez a4,ffffffff84007492 <reply_remove+0x2e>
    0x840074b0    0x4c    bnez a6,ffffffff8400749c <reply_remove+0x38>
    0x840074b4    0x50    ld a3,288(a1)
    0x840074b8    0x54    ld a4,280(a1)
    0x840074bc    0x58    li a5,-1
    0x840074be    0x5a    slli a5,a5,0x28
    0x840074c0    0x5c    addi a5,a5,31
    0x840074c2    0x5e    and a5,a5,a3
    0x840074c4    0x60    sd a5,288(a1)
    0x840074c8    0x64    sd zero,0(s0)
    0x840074cc    0x68    andi a5,a4,-16
    0x840074d0    0x6c    sd a5,280(a1)
    0x840074d4    0x70    mv a0,a1
    0x840074d6    0x72    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840074da    0x76    beqz s1,ffffffff840074e0 <reply_remove+0x7c>
    0x840074dc    0x78    sd zero,16(s1)
    0x840074e0    0x7c    ld ra,24(sp)          ; stack access
    0x840074e2    0x7e    sd zero,8(s0)
    0x840074e6    0x82    sd zero,16(s0)
    0x840074ea    0x86    ld s0,16(sp)          ; stack access
    0x840074ec    0x88    ld s1,8(sp)           ; stack access
    0x840074ee    0x8a    addi sp,sp,32
    0x840074f0    0x8c    ret
    0x840074f2    0x8e    ld a3,288(a1)
    0x840074f6    0x92    ld a4,280(a1)
    0x840074fa    0x96    li a5,-1
    0x840074fc    0x98    sd zero,8(a6) # 10008 <KERNEL_OFFSET-0xfffffffefffefff8>
    0x84007500    0x9c    j ffffffff840074be <reply_remove+0x5a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_remove` has 99 nodes.

Section reply_pop (213 of 296)
==============================

Deriving specifications
-----------------------

Section `reply_pop` consists of 64 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `reply_pop`:

    0x840073b8     0x0    ld a3,288(a1)
    0x840073bc     0x4    li a5,-1
    0x840073be     0x6    slli a5,a5,0x28
    0x840073c0     0x8    addi sp,sp,-48
    0x840073c2     0xa    ld a4,280(a1)
    0x840073c6     0xe    addi a5,a5,31
    0x840073c8    0x10    sd s0,32(sp)          ; stack access
    0x840073ca    0x12    sd ra,40(sp)          ; stack access
    0x840073cc    0x14    sd s1,24(sp)          ; stack access
    0x840073ce    0x16    sd s2,16(sp)          ; stack access
    0x840073d0    0x18    and a5,a5,a3
    0x840073d2    0x1a    sd a5,288(a1)
    0x840073d6    0x1e    sd zero,0(a0)
    0x840073da    0x22    andi a4,a4,-16
    0x840073dc    0x24    sd a4,280(a1)
    0x840073e0    0x28    auipc a5,0x1a
    0x840073e4    0x2c    ld a5,1144(a5) # ffffffff84021858 <ksCurThread>
    0x840073e8    0x30    mv s0,a0
    0x840073ea    0x32    beq a1,a5,ffffffff84007444 <reply_pop+0x8c>
    0x840073ee    0x36    ld s2,16(s0)
    0x840073f2    0x3a    ld a5,8(s0)
    0x840073f4    0x3c    li a4,1
    0x840073f6    0x3e    slli a4,a4,0x26
    0x840073f8    0x40    li a3,-1
    0x840073fa    0x42    srli s1,a3,0x19
    0x840073fe    0x46    and a2,s2,a4
    0x84007402    0x4a    and s2,s2,s1
    0x84007406    0x4e    and s1,s1,a5
    0x84007408    0x50    and a5,a5,a4
    0x8400740a    0x52    beqz a2,ffffffff84007460 <reply_pop+0xa8>
    0x8400740c    0x54    slli a3,a3,0x27
    0x8400740e    0x56    or s2,s2,a3
    0x84007412    0x5a    beqz a5,ffffffff8400741e <reply_pop+0x66>
    0x84007414    0x5c    li a5,-1
    0x84007416    0x5e    slli a5,a5,0x27
    0x84007418    0x60    or s1,s1,a5
    0x8400741a    0x62    beqz s2,ffffffff84007432 <reply_pop+0x7a>
    0x8400741e    0x66    ld a5,368(a1)
    0x84007422    0x6a    beqz a5,ffffffff84007458 <reply_pop+0xa0>
    0x84007424    0x6c    sd s1,32(s2)
    0x84007428    0x70    bnez s1,ffffffff8400743e <reply_pop+0x86>
    0x8400742a    0x72    sd zero,8(s0)
    0x8400742e    0x76    sd zero,16(s0)
    0x84007432    0x7a    ld ra,40(sp)          ; stack access
    0x84007434    0x7c    ld s0,32(sp)          ; stack access
    0x84007436    0x7e    ld s1,24(sp)          ; stack access
    0x84007438    0x80    ld s2,16(sp)          ; stack access
    0x8400743a    0x82    addi sp,sp,48
    0x8400743c    0x84    ret
    0x8400743e    0x86    ld a5,16(s0)
    0x84007440    0x88    sd a5,16(s1)
    0x84007442    0x8a    j ffffffff8400742a <reply_pop+0x72>
    0x84007444    0x8c    auipc a5,0x1a
    0x84007448    0x90    ld a5,1028(a5) # ffffffff84021848 <ksSchedulerAction>
    0x8400744c    0x94    bnez a5,ffffffff840073ee <reply_pop+0x36>
    0x8400744e    0x96    sd a1,8(sp)           ; stack access
    0x84007450    0x98    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84007454    0x9c    ld a1,8(sp)           ; stack access
    0x84007456    0x9e    j ffffffff840073ee <reply_pop+0x36>
    0x84007458    0xa0    mv a0,s2
    0x8400745a    0xa2    jal ra,ffffffff840072a0 <schedContext_donate>
    0x8400745e    0xa6    j ffffffff84007424 <reply_pop+0x6c>
    0x84007460    0xa8    bnez a5,ffffffff84007414 <reply_pop+0x5c>
    0x84007462    0xaa    j ffffffff8400741a <reply_pop+0x62>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_pop` has 108 nodes.

Section reply_push (214 of 296)
===============================

Deriving specifications
-----------------------

Section `reply_push` consists of 65 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `reply_push`:

    0x8400730a     0x0    ld a4,288(a1)
    0x8400730e     0x4    li a5,-1
    0x84007310     0x6    slli a5,a5,0x28
    0x84007312     0x8    addi a5,a5,31
    0x84007314     0xa    addi sp,sp,-48
    0x84007316     0xc    sd s0,32(sp)          ; stack access
    0x84007318     0xe    sd ra,40(sp)          ; stack access
    0x8400731a    0x10    and a4,a4,a5
    0x8400731c    0x12    ld s0,368(a0)
    0x84007320    0x16    sd a4,288(a1)
    0x84007324    0x1a    ld a6,288(a0)
    0x84007328    0x1e    ld a4,280(a0)
    0x8400732c    0x22    slli a7,a2,0x1
    0x84007330    0x26    and a6,a6,a5
    0x84007334    0x2a    lui a5,0xe0000
    0x84007338    0x2e    srli a5,a5,0x18
    0x8400733a    0x30    and a5,a7,a5
    0x8400733e    0x34    andi a4,a4,-16
    0x84007340    0x36    sd a0,0(a2)
    0x84007342    0x38    or a6,a6,a5
    0x84007346    0x3c    ori a4,a4,5
    0x8400734a    0x40    sd a6,288(a0)
    0x8400734e    0x44    sd a4,280(a0)
    0x84007352    0x48    auipc a5,0x1a
    0x84007356    0x4c    ld a5,1286(a5) # ffffffff84021858 <ksCurThread>
    0x8400735a    0x50    beq a0,a5,ffffffff8400736e <reply_push+0x64>
    0x8400735e    0x54    beqz s0,ffffffff84007366 <reply_push+0x5c>
    0x84007360    0x56    ld a5,368(a1)
    0x84007364    0x5a    beqz a5,ffffffff8400738a <reply_push+0x80>
    0x84007366    0x5c    ld ra,40(sp)          ; stack access
    0x84007368    0x5e    ld s0,32(sp)          ; stack access
    0x8400736a    0x60    addi sp,sp,48
    0x8400736c    0x62    ret
    0x8400736e    0x64    auipc a5,0x1a
    0x84007372    0x68    ld a5,1242(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84007376    0x6c    bnez a5,ffffffff8400735e <reply_push+0x54>
    0x84007378    0x6e    sd a3,24(sp)          ; stack access
    0x8400737a    0x70    sd a2,16(sp)          ; stack access
    0x8400737c    0x72    sd a1,8(sp)           ; stack access
    0x8400737e    0x74    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84007382    0x78    ld a3,24(sp)          ; stack access
    0x84007384    0x7a    ld a2,16(sp)          ; stack access
    0x84007386    0x7c    ld a1,8(sp)           ; stack access
    0x84007388    0x7e    j ffffffff8400735e <reply_push+0x54>
    0x8400738a    0x80    beqz a3,ffffffff84007366 <reply_push+0x5c>
    0x8400738c    0x82    ld a4,32(s0)
    0x8400738e    0x84    li a5,-1
    0x84007390    0x86    srli a5,a5,0x19
    0x84007392    0x88    and a3,a4,a5
    0x84007396    0x8c    sd a3,8(a2)
    0x84007398    0x8e    beqz a4,ffffffff8400739e <reply_push+0x94>
    0x8400739a    0x90    and a5,a5,a2
    0x8400739c    0x92    sd a5,16(a4)
    0x8400739e    0x94    slli a5,s0,0x19
    0x840073a2    0x98    li a4,1
    0x840073a4    0x9a    srli a5,a5,0x19
    0x840073a6    0x9c    slli a4,a4,0x30
    0x840073a8    0x9e    or a5,a5,a4
    0x840073aa    0xa0    sd a5,16(a2)
    0x840073ac    0xa2    sd a2,32(s0)
    0x840073ae    0xa4    mv a0,s0
    0x840073b0    0xa6    ld s0,32(sp)          ; stack access
    0x840073b2    0xa8    ld ra,40(sp)          ; stack access
    0x840073b4    0xaa    addi sp,sp,48
    0x840073b6    0xac    j ffffffff840072a0 <schedContext_donate>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_push` has 108 nodes.

Section schedContext_donate (215 of 296)
========================================

Deriving specifications
-----------------------

Section `schedContext_donate` consists of 39 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedContext_donate`:

    0x840072a0     0x0    addi sp,sp,-32
    0x840072a2     0x2    sd s2,0(sp)           ; stack access
    0x840072a4     0x4    ld s2,24(a0)
    0x840072a8     0x8    sd s0,16(sp)          ; stack access
    0x840072aa     0xa    sd s1,8(sp)           ; stack access
    0x840072ac     0xc    sd ra,24(sp)          ; stack access
    0x840072ae     0xe    mv s0,a0
    0x840072b0    0x10    mv s1,a1
    0x840072b2    0x12    beqz s2,ffffffff840072e2 <schedContext_donate+0x42>
    0x840072b6    0x16    ld a5,288(s2)
    0x840072ba    0x1a    srli a5,a5,0x1
    0x840072bc    0x1c    andi a5,a5,1
    0x840072be    0x1e    beqz a5,ffffffff840072c6 <schedContext_donate+0x26>
    0x840072c0    0x20    mv a0,s2
    0x840072c2    0x22    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x840072c6    0x26    sd zero,368(s2)
    0x840072ca    0x2a    auipc a5,0x1a
    0x840072ce    0x2e    ld a5,1422(a5) # ffffffff84021858 <ksCurThread>
    0x840072d2    0x32    beq a5,s2,ffffffff840072f4 <schedContext_donate+0x54>
    0x840072d6    0x36    auipc a5,0x1a
    0x840072da    0x3a    ld a5,1394(a5) # ffffffff84021848 <ksSchedulerAction>
    0x840072de    0x3e    beq a5,s2,ffffffff840072f4 <schedContext_donate+0x54>
    0x840072e2    0x42    sd s1,24(s0)
    0x840072e4    0x44    sd s0,368(s1)
    0x840072e8    0x48    ld ra,24(sp)          ; stack access
    0x840072ea    0x4a    ld s0,16(sp)          ; stack access
    0x840072ec    0x4c    ld s1,8(sp)           ; stack access
    0x840072ee    0x4e    ld s2,0(sp)           ; stack access
    0x840072f0    0x50    addi sp,sp,32
    0x840072f2    0x52    ret
    0x840072f4    0x54    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x840072f8    0x58    sd s1,24(s0)
    0x840072fa    0x5a    sd s0,368(s1)
    0x840072fe    0x5e    ld ra,24(sp)          ; stack access
    0x84007300    0x60    ld s0,16(sp)          ; stack access
    0x84007302    0x62    ld s1,8(sp)           ; stack access
    0x84007304    0x64    ld s2,0(sp)           ; stack access
    0x84007306    0x66    addi sp,sp,32
    0x84007308    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_donate` has 72 nodes.

Section schedContext_unbindAllTCBs (216 of 296)
===============================================

Deriving specifications
-----------------------

Section `schedContext_unbindAllTCBs` consists of 43 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_unbindAllTCBs`:

    0x8400721e     0x0    addi sp,sp,-16
    0x84007220     0x2    sd s0,0(sp)           ; stack access
    0x84007222     0x4    mv s0,a0
    0x84007224     0x6    ld a0,24(a0)
    0x84007226     0x8    sd ra,8(sp)           ; stack access
    0x84007228     0xa    beqz a0,ffffffff8400727c <schedContext_unbindAllTCBs+0x5e>
    0x8400722a     0xc    auipc a5,0x1a
    0x8400722e    0x10    ld a5,1582(a5) # ffffffff84021858 <ksCurThread>
    0x84007232    0x14    beq a0,a5,ffffffff84007284 <schedContext_unbindAllTCBs+0x66>
    0x84007236    0x18    ld a5,288(a0)
    0x8400723a    0x1c    srli a4,a5,0x1
    0x8400723e    0x20    andi a4,a4,1
    0x84007240    0x22    beqz a4,ffffffff8400724c <schedContext_unbindAllTCBs+0x2e>
    0x84007242    0x24    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84007246    0x28    ld a0,24(s0)
    0x84007248    0x2a    ld a5,288(a0)
    0x8400724c    0x2e    andi a4,a5,1
    0x84007250    0x32    beqz a4,ffffffff84007274 <schedContext_unbindAllTCBs+0x56>
    0x84007252    0x34    ld a3,400(a0)
    0x84007256    0x38    ld a4,392(a0)
    0x8400725a    0x3c    beqz a3,ffffffff8400728c <schedContext_unbindAllTCBs+0x6e>
    0x8400725c    0x3e    sd a4,392(a3)
    0x84007260    0x42    beqz a4,ffffffff84007266 <schedContext_unbindAllTCBs+0x48>
    0x84007262    0x44    sd a3,400(a4)
    0x84007266    0x48    andi a5,a5,-2
    0x84007268    0x4a    sd zero,392(a0)
    0x8400726c    0x4e    sd zero,400(a0)
    0x84007270    0x52    sd a5,288(a0)
    0x84007274    0x56    sd zero,368(a0)
    0x84007278    0x5a    sd zero,24(s0)
    0x8400727c    0x5e    ld ra,8(sp)           ; stack access
    0x8400727e    0x60    ld s0,0(sp)           ; stack access
    0x84007280    0x62    addi sp,sp,16
    0x84007282    0x64    ret
    0x84007284    0x66    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84007288    0x6a    ld a0,24(s0)
    0x8400728a    0x6c    j ffffffff84007236 <schedContext_unbindAllTCBs+0x18>
    0x8400728c    0x6e    auipc a2,0x1a
    0x84007290    0x72    sd a4,1492(a2) # ffffffff84021860 <ksReleaseHead>
    0x84007294    0x76    li a2,1
    0x84007296    0x78    auipc a1,0x1a
    0x8400729a    0x7c    sd a2,1442(a1) # ffffffff84021838 <ksReprogram>
    0x8400729e    0x80    j ffffffff84007260 <schedContext_unbindAllTCBs+0x42>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindAllTCBs` has 79 nodes.

Section schedContext_unbindTCB (217 of 296)
===========================================

Deriving specifications
-----------------------

Section `schedContext_unbindTCB` consists of 41 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_unbindTCB`:

    0x840071a0     0x0    addi sp,sp,-16
    0x840071a2     0x2    sd s0,0(sp)           ; stack access
    0x840071a4     0x4    sd ra,8(sp)           ; stack access
    0x840071a6     0x6    auipc a5,0x1a
    0x840071aa     0xa    ld a5,1714(a5) # ffffffff84021858 <ksCurThread>
    0x840071ae     0xe    mv s0,a0
    0x840071b0    0x10    beq a5,a1,ffffffff84007218 <schedContext_unbindTCB+0x78>
    0x840071b4    0x14    ld a0,24(s0)
    0x840071b6    0x16    ld a5,288(a0)
    0x840071ba    0x1a    srli a4,a5,0x1
    0x840071be    0x1e    andi a4,a4,1
    0x840071c0    0x20    beqz a4,ffffffff840071cc <schedContext_unbindTCB+0x2c>
    0x840071c2    0x22    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x840071c6    0x26    ld a0,24(s0)
    0x840071c8    0x28    ld a5,288(a0)
    0x840071cc    0x2c    andi a4,a5,1
    0x840071d0    0x30    beqz a4,ffffffff840071f4 <schedContext_unbindTCB+0x54>
    0x840071d2    0x32    ld a3,400(a0)
    0x840071d6    0x36    ld a4,392(a0)
    0x840071da    0x3a    beqz a3,ffffffff84007204 <schedContext_unbindTCB+0x64>
    0x840071dc    0x3c    sd a4,392(a3)
    0x840071e0    0x40    beqz a4,ffffffff840071e6 <schedContext_unbindTCB+0x46>
    0x840071e2    0x42    sd a3,400(a4)
    0x840071e6    0x46    andi a5,a5,-2
    0x840071e8    0x48    sd zero,392(a0)
    0x840071ec    0x4c    sd zero,400(a0)
    0x840071f0    0x50    sd a5,288(a0)
    0x840071f4    0x54    sd zero,368(a0)
    0x840071f8    0x58    ld ra,8(sp)           ; stack access
    0x840071fa    0x5a    sd zero,24(s0)
    0x840071fe    0x5e    ld s0,0(sp)           ; stack access
    0x84007200    0x60    addi sp,sp,16
    0x84007202    0x62    ret
    0x84007204    0x64    auipc a2,0x1a
    0x84007208    0x68    sd a4,1628(a2) # ffffffff84021860 <ksReleaseHead>
    0x8400720c    0x6c    li a2,1
    0x8400720e    0x6e    auipc a1,0x1a
    0x84007212    0x72    sd a2,1578(a1) # ffffffff84021838 <ksReprogram>
    0x84007216    0x76    j ffffffff840071e0 <schedContext_unbindTCB+0x40>
    0x84007218    0x78    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400721c    0x7c    j ffffffff840071b4 <schedContext_unbindTCB+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindTCB` has 74 nodes.

Section createNewObjects (218 of 296)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 85 instructions.

RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

26 stack accesses found. Annotated code for `createNewObjects`:

    0x84006e34     0x0    addi sp,sp,-128
    0x84006e36     0x2    sd s7,56(sp)          ; stack access
    0x84006e38     0x4    mv s7,a3
    0x84006e3a     0x6    sd s0,112(sp)         ; stack access
    0x84006e3c     0x8    sd s1,104(sp)         ; stack access
    0x84006e3e     0xa    sd s10,32(sp)         ; stack access
    0x84006e40     0xc    mv s0,a2
    0x84006e42     0xe    mv s10,a1
    0x84006e44    0x10    mv s1,a4
    0x84006e46    0x12    mv a1,a6
    0x84006e48    0x14    slli s7,s7,0x5
    0x84006e4a    0x16    sd s2,96(sp)          ; stack access
    0x84006e4c    0x18    sd s4,80(sp)          ; stack access
    0x84006e4e    0x1a    sd s5,72(sp)          ; stack access
    0x84006e50    0x1c    sd s6,64(sp)          ; stack access
    0x84006e52    0x1e    sd ra,120(sp)         ; stack access
    0x84006e54    0x20    sd s3,88(sp)          ; stack access
    0x84006e56    0x22    sd s8,48(sp)          ; stack access
    0x84006e58    0x24    sd s9,40(sp)          ; stack access
    0x84006e5a    0x26    sd s11,24(sp)         ; stack access
    0x84006e5c    0x28    mv s2,a6
    0x84006e5e    0x2a    mv s4,a0
    0x84006e60    0x2c    mv s5,a5
    0x84006e62    0x2e    mv s6,a7
    0x84006e64    0x30    add s0,s0,s7
    0x84006e66    0x32    jal ra,ffffffff84005cfc <getObjectSize>
    0x84006e6a    0x36    beqz s1,ffffffff84006ed6 <createNewObjects+0xa2>
    0x84006e6c    0x38    li s7,-1
    0x84006e6e    0x3a    lui a4,0xf8000
    0x84006e72    0x3e    li s8,1
    0x84006e74    0x40    sext.w s3,a0
    0x84006e78    0x44    li s11,0
    0x84006e7a    0x46    slli s7,s7,0x27
    0x84006e7c    0x48    srli s9,a4,0x19
    0x84006e80    0x4c    slli s8,s8,0x26
    0x84006e82    0x4e    sll a1,s11,s3
    0x84006e86    0x52    mv a3,s6
    0x84006e88    0x54    mv a2,s2
    0x84006e8a    0x56    add a1,a1,s5
    0x84006e8c    0x58    mv a0,s4
    0x84006e8e    0x5a    jal ra,ffffffff84006d06 <createObject>
    0x84006e92    0x5e    ld t1,24(s10)
    0x84006e96    0x62    and a5,t1,s8
    0x84006e9a    0x66    and t1,t1,s9
    0x84006e9e    0x6a    ori a3,t1,3
    0x84006ea2    0x6e    beqz a5,ffffffff84006ef4 <createNewObjects+0xc0>
    0x84006ea4    0x70    or t1,t1,s7
    0x84006ea8    0x74    sd a0,0(s0)
    0x84006eaa    0x76    sd a1,8(s0)
    0x84006eac    0x78    sd s10,16(s0)
    0x84006eb0    0x7c    sd a3,24(s0)
    0x84006eb2    0x7e    sd s0,16(t1)
    0x84006eb6    0x82    ld a5,24(s10)
    0x84006eba    0x86    li a4,-1
    0x84006ebc    0x88    slli a4,a4,0x27
    0x84006ebe    0x8a    addi a4,a4,3
    0x84006ec0    0x8c    and a3,s0,s9
    0x84006ec4    0x90    and a5,a5,a4
    0x84006ec6    0x92    or a5,a5,a3
    0x84006ec8    0x94    addi s11,s11,1
    0x84006eca    0x96    sd a5,24(s10)
    0x84006ece    0x9a    addi s0,s0,32
    0x84006ed2    0x9e    bne s1,s11,ffffffff84006e82 <createNewObjects+0x4e>
    0x84006ed6    0xa2    ld ra,120(sp)         ; stack access
    0x84006ed8    0xa4    ld s0,112(sp)         ; stack access
    0x84006eda    0xa6    ld s1,104(sp)         ; stack access
    0x84006edc    0xa8    ld s2,96(sp)          ; stack access
    0x84006ede    0xaa    ld s3,88(sp)          ; stack access
    0x84006ee0    0xac    ld s4,80(sp)          ; stack access
    0x84006ee2    0xae    ld s5,72(sp)          ; stack access
    0x84006ee4    0xb0    ld s6,64(sp)          ; stack access
    0x84006ee6    0xb2    ld s7,56(sp)          ; stack access
    0x84006ee8    0xb4    ld s8,48(sp)          ; stack access
    0x84006eea    0xb6    ld s9,40(sp)          ; stack access
    0x84006eec    0xb8    ld s10,32(sp)         ; stack access
    0x84006eee    0xba    ld s11,24(sp)         ; stack access
    0x84006ef0    0xbc    addi sp,sp,128
    0x84006ef2    0xbe    ret
    0x84006ef4    0xc0    ori a5,t1,3
    0x84006ef8    0xc4    sd a0,0(s0)
    0x84006efa    0xc6    sd a1,8(s0)
    0x84006efc    0xc8    sd s10,16(s0)
    0x84006f00    0xcc    sd a5,24(s0)
    0x84006f02    0xce    beqz t1,ffffffff84006eb6 <createNewObjects+0x82>
    0x84006f06    0xd2    j ffffffff84006eb2 <createNewObjects+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
85 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 134 nodes.

Section maskCapRights (219 of 296)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 103 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `maskCapRights`:

    0x84006bee      0x0    srli a4,a1,0x3b
    0x84006bf2      0x4    andi a6,a4,1
    0x84006bf6      0x8    bnez a6,ffffffff84006c1a <maskCapRights+0x2c>
    0x84006bfa      0xc    addi sp,sp,-48
    0x84006bfc      0xe    mv a3,a1
    0x84006bfe     0x10    sd ra,40(sp)          ; stack access
    0x84006c00     0x12    li a1,24
    0x84006c02     0x14    bltu a1,a4,ffffffff84006d02 <maskCapRights+0x114>
    0x84006c06     0x18    auipc a1,0x7
    0x84006c0a     0x1c    addi a1,a1,-114 # ffffffff8400db94 <msgRegisters+0x44c>
    0x84006c0e     0x20    slli a4,a4,0x2
    0x84006c10     0x22    add a4,a4,a1
    0x84006c12     0x24    lw a4,0(a4)
    0x84006c14     0x26    mv a5,a0
    0x84006c16     0x28    add a4,a4,a1
    0x84006c18     0x2a    jr a4
    0x84006c1a     0x2c    j ffffffff84004004 <Arch_maskCapRights>
    0x84006c1e     0x30    ld ra,40(sp)
    0x84006c20     0x32    sd a3,16(sp)
    0x84006c22     0x34    sd a2,24(sp)
    0x84006c24     0x36    ld a0,16(sp)
    0x84006c26     0x38    ld a1,24(sp)
    0x84006c28     0x3a    addi sp,sp,48
    0x84006c2a     0x3c    ret
    0x84006c2c     0x3e    srli a5,a0,0x2
    0x84006c30     0x42    srli a1,a3,0x3a
    0x84006c34     0x46    and a5,a5,a1
    0x84006c36     0x48    li a1,-1
    0x84006c38     0x4a    slli a1,a1,0x3a
    0x84006c3a     0x4c    andi a5,a5,1
    0x84006c3c     0x4e    addi a1,a1,-1
    0x84006c3e     0x50    ld ra,40(sp)
    0x84006c40     0x52    slli a5,a5,0x3a
    0x84006c42     0x54    and a1,a1,a3
    0x84006c44     0x56    or a1,a1,a5
    0x84006c46     0x58    sd a1,16(sp)
    0x84006c48     0x5a    sd a2,24(sp)
    0x84006c4a     0x5c    ld a0,16(sp)
    0x84006c4c     0x5e    ld a1,24(sp)
    0x84006c4e     0x60    addi sp,sp,48
    0x84006c50     0x62    ret
    0x84006c52     0x64    li a7,-1
    0x84006c54     0x66    srli a4,a3,0x37
    0x84006c58     0x6a    li a6,1
    0x84006c5a     0x6c    and a4,a4,a0
    0x84006c5c     0x6e    slli a0,a7,0x37
    0x84006c60     0x72    srli t3,a3,0x38
    0x84006c64     0x76    and a4,a6,a4
    0x84006c68     0x7a    srli a1,a5,0x1
    0x84006c6c     0x7e    addi a0,a0,-1
    0x84006c6e     0x80    and a0,a0,a3
    0x84006c70     0x82    slli t1,a7,0x38
    0x84006c74     0x86    and a1,a1,t3
    0x84006c78     0x8a    slli a4,a4,0x37
    0x84006c7a     0x8c    or a4,a4,a0
    0x84006c7c     0x8e    and a1,a6,a1
    0x84006c80     0x92    addi a0,t1,-1
    0x84006c84     0x96    srli t4,a3,0x39
    0x84006c88     0x9a    srli t1,a5,0x2
    0x84006c8c     0x9e    and a4,a4,a0
    0x84006c8e     0xa0    slli t3,a7,0x39
    0x84006c92     0xa4    slli a1,a1,0x38
    0x84006c94     0xa6    and t1,t1,t4
    0x84006c98     0xaa    and t1,a6,t1
    0x84006c9c     0xae    srli a0,a5,0x3
    0x84006ca0     0xb2    or a4,a4,a1
    0x84006ca2     0xb4    addi t3,t3,-1
    0x84006ca4     0xb6    srli a3,a3,0x3a
    0x84006ca6     0xb8    and a4,a4,t3
    0x84006caa     0xbc    slli a5,t1,0x39
    0x84006cae     0xc0    slli a7,a7,0x3a
    0x84006cb0     0xc2    and a3,a3,a0
    0x84006cb2     0xc4    or a5,a5,a4
    0x84006cb4     0xc6    addi a7,a7,-1
    0x84006cb6     0xc8    and a6,a6,a3
    0x84006cba     0xcc    ld ra,40(sp)
    0x84006cbc     0xce    and a5,a5,a7
    0x84006cc0     0xd2    slli a6,a6,0x3a
    0x84006cc2     0xd4    or a5,a5,a6
    0x84006cc6     0xd8    sd a5,16(sp)
    0x84006cc8     0xda    sd a2,24(sp)
    0x84006cca     0xdc    ld a0,16(sp)
    0x84006ccc     0xde    ld a1,24(sp)
    0x84006cce     0xe0    addi sp,sp,48
    0x84006cd0     0xe2    ret
    0x84006cd2     0xe4    li a7,-1
    0x84006cd4     0xe6    srli a4,a3,0x39
    0x84006cd8     0xea    li a6,1
    0x84006cda     0xec    and a4,a4,a0
    0x84006cdc     0xee    slli a1,a7,0x39
    0x84006ce0     0xf2    srli a5,a0,0x1
    0x84006ce4     0xf6    and a4,a6,a4
    0x84006ce8     0xfa    addi a1,a1,-1
    0x84006cea     0xfc    srli a0,a3,0x3a
    0x84006cee    0x100    and a0,a0,a5
    0x84006cf0    0x102    slli a4,a4,0x39
    0x84006cf2    0x104    and a1,a1,a3
    0x84006cf4    0x106    slli a7,a7,0x3a
    0x84006cf6    0x108    or a5,a4,a1
    0x84006cfa    0x10c    addi a7,a7,-1
    0x84006cfc    0x10e    and a6,a6,a0
    0x84006d00    0x112    j ffffffff84006cba <maskCapRights+0xcc>
    0x84006d02    0x114    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 130 nodes.

Section sameObjectAs (220 of 296)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 29 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `sameObjectAs`:

    0x840061d4     0x0    addi sp,sp,-32
    0x840061d6     0x2    sd a0,16(sp)          ; stack access
    0x840061d8     0x4    sd a1,24(sp)          ; stack access
    0x840061da     0x6    sd a2,0(sp)           ; stack access
    0x840061dc     0x8    sd a3,8(sp)           ; stack access
    0x840061de     0xa    srli a5,a0,0x3b
    0x840061e2     0xe    li a4,2
    0x840061e4    0x10    beq a5,a4,ffffffff8400620e <sameObjectAs+0x3a>
    0x840061e8    0x14    li a6,14
    0x840061ea    0x16    beq a5,a6,ffffffff84006206 <sameObjectAs+0x32>
    0x840061ee    0x1a    andi a5,a5,1
    0x840061f0    0x1c    beqz a5,ffffffff840061fa <sameObjectAs+0x26>
    0x840061f2    0x1e    srli a4,a2,0x3b
    0x840061f6    0x22    andi a4,a4,1
    0x840061f8    0x24    bnez a4,ffffffff84006214 <sameObjectAs+0x40>
    0x840061fa    0x26    ld a2,0(sp)           ; stack access
    0x840061fc    0x28    ld a3,8(sp)           ; stack access
    0x840061fe    0x2a    ld a0,16(sp)          ; stack access
    0x84006200    0x2c    ld a1,24(sp)          ; stack access
    0x84006202    0x2e    addi sp,sp,32
    0x84006204    0x30    j ffffffff84005d84 <sameRegionAs>
    0x84006206    0x32    srli a2,a2,0x3b
    0x84006208    0x34    li a5,16
    0x8400620a    0x36    bne a2,a5,ffffffff840061fa <sameObjectAs+0x26>
    0x8400620e    0x3a    li a0,0
    0x84006210    0x3c    addi sp,sp,32
    0x84006212    0x3e    ret
    0x84006214    0x40    addi sp,sp,32
    0x84006216    0x42    j ffffffff84004312 <Arch_sameObjectAs>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 50 nodes.

Section deriveCap (221 of 296)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 59 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `deriveCap`:

    0x84006146     0x0    addi sp,sp,-64
    0x84006148     0x2    srli a4,a2,0x3b
    0x8400614c     0x6    sd s0,48(sp)          ; stack access
    0x8400614e     0x8    sd ra,56(sp)          ; stack access
    0x84006150     0xa    sd s1,40(sp)          ; stack access
    0x84006152     0xc    andi a7,a4,1
    0x84006156    0x10    mv s0,a0
    0x84006158    0x12    bnez a7,ffffffff840061ba <deriveCap+0x74>
    0x8400615c    0x16    addi a5,a4,-14
    0x84006160    0x1a    andi a5,a5,-5
    0x84006162    0x1c    beqz a5,ffffffff840061ce <deriveCap+0x88>
    0x84006164    0x1e    li a5,2
    0x84006166    0x20    mv s1,a2
    0x84006168    0x22    beq a4,a5,ffffffff84006180 <deriveCap+0x3a>
    0x8400616c    0x26    sd s1,8(s0)           ; stack access
    0x8400616e    0x28    ld ra,56(sp)          ; stack access
    0x84006170    0x2a    sd a7,0(s0)           ; stack access
    0x84006174    0x2e    sd a3,16(s0)          ; stack access
    0x84006176    0x30    mv a0,s0
    0x84006178    0x32    ld s0,48(sp)          ; stack access
    0x8400617a    0x34    ld s1,40(sp)          ; stack access
    0x8400617c    0x36    addi sp,sp,64
    0x8400617e    0x38    ret
    0x84006180    0x3a    mv a6,a1
    0x84006182    0x3c    ld a1,24(a1)
    0x84006184    0x3e    lui a4,0xf8000
    0x84006188    0x42    srli a4,a4,0x19
    0x8400618a    0x44    srli a5,a1,0x26
    0x8400618e    0x48    andi a5,a5,1
    0x84006190    0x4a    and a1,a1,a4
    0x84006192    0x4c    beqz a5,ffffffff840061ca <deriveCap+0x84>
    0x84006194    0x4e    li a5,-1
    0x84006196    0x50    slli a5,a5,0x27
    0x84006198    0x52    or a1,a1,a5
    0x8400619a    0x54    mv a0,a6
    0x8400619c    0x56    sd a3,8(sp)           ; stack access
    0x8400619e    0x58    jal ra,ffffffff84006096 <isMDBParentOf>
    0x840061a2    0x5c    ld a3,8(sp)           ; stack access
    0x840061a4    0x5e    li a7,0
    0x840061a6    0x60    beqz a0,ffffffff8400616c <deriveCap+0x26>
    0x840061a8    0x62    li a5,9
    0x840061aa    0x64    auipc a4,0x9
    0x840061ae    0x68    sd a5,1302(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840061b2    0x6c    li a3,0
    0x840061b4    0x6e    li s1,0
    0x840061b6    0x70    li a7,3
    0x840061b8    0x72    j ffffffff8400616c <deriveCap+0x26>
    0x840061ba    0x74    jal ra,ffffffff84003f92 <Arch_deriveCap>
    0x840061be    0x78    ld ra,56(sp)          ; stack access
    0x840061c0    0x7a    mv a0,s0
    0x840061c2    0x7c    ld s0,48(sp)          ; stack access
    0x840061c4    0x7e    ld s1,40(sp)          ; stack access
    0x840061c6    0x80    addi sp,sp,64
    0x840061c8    0x82    ret
    0x840061ca    0x84    beqz a1,ffffffff8400616c <deriveCap+0x26>
    0x840061cc    0x86    j ffffffff8400619a <deriveCap+0x54>
    0x840061ce    0x88    li a3,0
    0x840061d0    0x8a    li s1,0
    0x840061d2    0x8c    j ffffffff8400616c <deriveCap+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
59 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 91 nodes.

Section cancelAllSignals (222 of 296)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 60 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelAllSignals`:

    0x840059f8     0x0    ld a4,0(a0)
    0x840059fa     0x2    li a3,1
    0x840059fc     0x4    andi a5,a4,3
    0x84005a00     0x8    beq a5,a3,ffffffff84005a06 <cancelAllSignals+0xe>
    0x84005a04     0xc    ret
    0x84005a06     0xe    ld a3,8(a0)
    0x84005a08    0x10    addi sp,sp,-32
    0x84005a0a    0x12    li a2,-1
    0x84005a0c    0x14    slli a5,a5,0x26
    0x84005a0e    0x16    lui a1,0x2000
    0x84005a12    0x1a    sd s0,16(sp)          ; stack access
    0x84005a14    0x1c    and a5,a5,a3
    0x84005a16    0x1e    srli s0,a2,0x19
    0x84005a1a    0x22    addi a1,a1,-4
    0x84005a1c    0x24    slli a2,a2,0x27
    0x84005a1e    0x26    sd ra,24(sp)          ; stack access
    0x84005a20    0x28    sd s1,8(sp)           ; stack access
    0x84005a22    0x2a    sd s2,0(sp)           ; stack access
    0x84005a24    0x2c    and s0,s0,a3
    0x84005a26    0x2e    and a4,a4,a1
    0x84005a28    0x30    and a3,a3,a2
    0x84005a2a    0x32    beqz a5,ffffffff84005a82 <cancelAllSignals+0x8a>
    0x84005a2c    0x34    or s0,s0,a2
    0x84005a2e    0x36    sd a3,8(a0)
    0x84005a30    0x38    sd a4,0(a0)
    0x84005a32    0x3a    auipc s1,0x1c
    0x84005a36    0x3e    addi s1,s1,-474 # ffffffff84021858 <ksCurThread>
    0x84005a3a    0x42    auipc s2,0x1c
    0x84005a3e    0x46    addi s2,s2,-498 # ffffffff84021848 <ksSchedulerAction>
    0x84005a42    0x4a    j ffffffff84005a50 <cancelAllSignals+0x58>
    0x84005a44    0x4c    mv a0,s0
    0x84005a46    0x4e    jal ra,ffffffff84004ca6 <possibleSwitchTo>
    0x84005a4a    0x52    ld s0,408(s0)
    0x84005a4e    0x56    beqz s0,ffffffff84005a88 <cancelAllSignals+0x90>
    0x84005a50    0x58    ld a5,280(s0)
    0x84005a54    0x5c    ld a4,0(s1)
    0x84005a56    0x5e    andi a5,a5,-16
    0x84005a58    0x60    ori a5,a5,2
    0x84005a5c    0x64    sd a5,280(s0)
    0x84005a60    0x68    bne s0,a4,ffffffff84005a44 <cancelAllSignals+0x4c>
    0x84005a64    0x6c    ld a5,0(s2)
    0x84005a68    0x70    bnez a5,ffffffff84005a44 <cancelAllSignals+0x4c>
    0x84005a6a    0x72    ld a5,368(s0)
    0x84005a6e    0x76    beqz a5,ffffffff84005a7c <cancelAllSignals+0x84>
    0x84005a70    0x78    ld a5,64(a5)
    0x84005a72    0x7a    beqz a5,ffffffff84005a7c <cancelAllSignals+0x84>
    0x84005a74    0x7c    ld a5,288(s0)
    0x84005a78    0x80    andi a5,a5,1
    0x84005a7a    0x82    beqz a5,ffffffff84005a44 <cancelAllSignals+0x4c>
    0x84005a7c    0x84    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84005a80    0x88    j ffffffff84005a44 <cancelAllSignals+0x4c>
    0x84005a82    0x8a    sd a3,8(a0)
    0x84005a84    0x8c    sd a4,0(a0)
    0x84005a86    0x8e    bnez s0,ffffffff84005a32 <cancelAllSignals+0x3a>
    0x84005a88    0x90    ld s0,16(sp)          ; stack access
    0x84005a8a    0x92    ld ra,24(sp)          ; stack access
    0x84005a8c    0x94    ld s1,8(sp)           ; stack access
    0x84005a8e    0x96    ld s2,0(sp)           ; stack access
    0x84005a90    0x98    addi sp,sp,32
    0x84005a92    0x9a    j ffffffff84004c1c <rescheduleRequired>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 104 nodes.

Section cancelAllIPC (223 of 296)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 101 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `cancelAllIPC`:

    0x840052f0      0x0    ld a5,0(a0)
    0x840052f2      0x2    andi a4,a5,3
    0x840052f6      0x6    beqz a4,ffffffff840053c6 <cancelAllIPC+0xd6>
    0x840052f8      0x8    addi sp,sp,-64
    0x840052fa      0xa    sd s5,8(sp)           ; stack access
    0x840052fc      0xc    li s5,-1
    0x840052fe      0xe    sd s0,48(sp)          ; stack access
    0x84005300     0x10    sd s4,16(sp)          ; stack access
    0x84005302     0x12    ld s0,8(a0)
    0x84005304     0x14    slli s4,s5,0x27
    0x84005308     0x18    sd s3,24(sp)          ; stack access
    0x8400530a     0x1a    sd ra,56(sp)          ; stack access
    0x8400530c     0x1c    sd s1,40(sp)          ; stack access
    0x8400530e     0x1e    sd s2,32(sp)          ; stack access
    0x84005310     0x20    sd s6,0(sp)           ; stack access
    0x84005312     0x22    and a5,a5,s4
    0x84005316     0x26    sd zero,8(a0)
    0x8400531a     0x2a    sd a5,0(a0)
    0x8400531c     0x2c    auipc s3,0x1c
    0x84005320     0x30    addi s3,s3,1340 # ffffffff84021858 <ksCurThread>
    0x84005324     0x34    beqz s0,ffffffff840053b2 <cancelAllIPC+0xc2>
    0x84005326     0x36    slli s5,s5,0x28
    0x84005328     0x38    lui s2,0xe0000
    0x8400532c     0x3c    li s1,1
    0x8400532e     0x3e    srli s2,s2,0x19
    0x84005332     0x42    slli s1,s1,0x26
    0x84005334     0x44    auipc s6,0x1c
    0x84005338     0x48    addi s6,s6,1300 # ffffffff84021848 <ksSchedulerAction>
    0x8400533c     0x4c    addi s5,s5,31
    0x8400533e     0x4e    j ffffffff8400534c <cancelAllIPC+0x5c>
    0x84005340     0x50    mv a0,s0
    0x84005342     0x52    jal ra,ffffffff84004ca6 <possibleSwitchTo>
    0x84005346     0x56    ld s0,408(s0)
    0x8400534a     0x5a    beqz s0,ffffffff840053b2 <cancelAllIPC+0xc2>
    0x8400534c     0x5c    ld a3,288(s0)
    0x84005350     0x60    ld a4,280(s0)
    0x84005354     0x64    ld a2,0(s3)
    0x84005358     0x68    srli a5,a3,0x1
    0x8400535c     0x6c    and a1,a5,s1
    0x84005360     0x70    andi a4,a4,-16
    0x84005362     0x72    and a5,a5,s2
    0x84005366     0x76    beqz a1,ffffffff840053c8 <cancelAllIPC+0xd8>
    0x84005368     0x78    or a5,a5,s4
    0x8400536c     0x7c    and a3,a3,s5
    0x84005370     0x80    sd a3,288(s0)
    0x84005374     0x84    sd zero,0(a5)
    0x84005378     0x88    sd a4,280(s0)
    0x8400537c     0x8c    beq s0,a2,ffffffff840053e6 <cancelAllIPC+0xf6>
    0x84005380     0x90    ld a5,312(s0)
    0x84005384     0x94    andi a5,a5,15
    0x84005386     0x96    bnez a5,ffffffff84005346 <cancelAllIPC+0x56>
    0x84005388     0x98    ori a4,a4,2
    0x8400538c     0x9c    sd a4,280(s0)
    0x84005390     0xa0    bne s0,a2,ffffffff84005340 <cancelAllIPC+0x50>
    0x84005394     0xa4    ld a5,0(s6)
    0x84005398     0xa8    bnez a5,ffffffff84005340 <cancelAllIPC+0x50>
    0x8400539a     0xaa    ld a5,368(s0)
    0x8400539e     0xae    beqz a5,ffffffff840053ac <cancelAllIPC+0xbc>
    0x840053a0     0xb0    ld a5,64(a5)
    0x840053a2     0xb2    beqz a5,ffffffff840053ac <cancelAllIPC+0xbc>
    0x840053a4     0xb4    ld a5,288(s0)
    0x840053a8     0xb8    andi a5,a5,1
    0x840053aa     0xba    beqz a5,ffffffff84005340 <cancelAllIPC+0x50>
    0x840053ac     0xbc    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x840053b0     0xc0    j ffffffff84005340 <cancelAllIPC+0x50>
    0x840053b2     0xc2    ld s0,48(sp)          ; stack access
    0x840053b4     0xc4    ld ra,56(sp)          ; stack access
    0x840053b6     0xc6    ld s1,40(sp)          ; stack access
    0x840053b8     0xc8    ld s2,32(sp)          ; stack access
    0x840053ba     0xca    ld s3,24(sp)          ; stack access
    0x840053bc     0xcc    ld s4,16(sp)          ; stack access
    0x840053be     0xce    ld s5,8(sp)           ; stack access
    0x840053c0     0xd0    ld s6,0(sp)           ; stack access
    0x840053c2     0xd2    addi sp,sp,64
    0x840053c4     0xd4    j ffffffff84004c1c <rescheduleRequired>
    0x840053c6     0xd6    ret
    0x840053c8     0xd8    bnez a5,ffffffff8400536c <cancelAllIPC+0x7c>
    0x840053ca     0xda    ld a5,312(s0)
    0x840053ce     0xde    andi a5,a5,15
    0x840053d0     0xe0    beqz a5,ffffffff84005388 <cancelAllIPC+0x98>
    0x840053d2     0xe2    sd a4,280(s0)
    0x840053d6     0xe6    bne s0,a2,ffffffff84005346 <cancelAllIPC+0x56>
    0x840053da     0xea    ld a5,0(s6)
    0x840053de     0xee    bnez a5,ffffffff84005346 <cancelAllIPC+0x56>
    0x840053e0     0xf0    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x840053e4     0xf4    j ffffffff84005346 <cancelAllIPC+0x56>
    0x840053e6     0xf6    ld a5,0(s6)
    0x840053ea     0xfa    beqz a5,ffffffff84005404 <cancelAllIPC+0x114>
    0x840053ec     0xfc    ld a5,312(s0)
    0x840053f0    0x100    andi a5,a5,15
    0x840053f2    0x102    bnez a5,ffffffff840053da <cancelAllIPC+0xea>
    0x840053f4    0x104    ld a5,0(s6)
    0x840053f8    0x108    ori a4,a4,2
    0x840053fc    0x10c    sd a4,280(s0)
    0x84005400    0x110    bnez a5,ffffffff84005340 <cancelAllIPC+0x50>
    0x84005402    0x112    j ffffffff8400539a <cancelAllIPC+0xaa>
    0x84005404    0x114    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84005408    0x118    ld a4,280(s0)
    0x8400540c    0x11c    ld a2,0(s3)
    0x84005410    0x120    andi a4,a4,-16
    0x84005412    0x122    j ffffffff840053ca <cancelAllIPC+0xda>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 185 nodes.

Section getReceiveSlots (224 of 296)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 49 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `getReceiveSlots`:

    0x84005262     0x0    beqz a1,ffffffff840052ce <getReceiveSlots+0x6c>
    0x84005264     0x2    mv a5,a1
    0x84005266     0x4    andi a0,a0,-1024
    0x8400526a     0x8    ld a1,0(a0)
    0x8400526c     0xa    ld a2,8(a0)
    0x8400526e     0xc    ld a3,1000(a5)
    0x84005272    0x10    addi sp,sp,-80
    0x84005274    0x12    li a4,64
    0x84005278    0x16    addi a0,sp,24
    0x8400527a    0x18    sd s0,64(sp)          ; stack access
    0x8400527c    0x1a    sd s1,56(sp)          ; stack access
    0x8400527e    0x1c    ld s0,1008(a5)
    0x84005282    0x20    ld s1,1016(a5)
    0x84005286    0x24    sd ra,72(sp)          ; stack access
    0x84005288    0x26    sd a1,8(sp)           ; stack access
    0x8400528a    0x28    sd a2,16(sp)          ; stack access
    0x8400528c    0x2a    jal ra,ffffffff84004438 <resolveAddressBits>
    0x84005290    0x2e    ld a4,24(sp)          ; stack access
    0x84005292    0x30    ld a5,32(sp)          ; stack access
    0x84005294    0x32    bnez a4,ffffffff840052c2 <getReceiveSlots+0x60>
    0x84005296    0x34    ld a2,8(a5)
    0x84005298    0x36    ld a1,0(a5)
    0x8400529a    0x38    mv a4,s1
    0x8400529c    0x3a    mv a3,s0
    0x8400529e    0x3c    li a0,0
    0x840052a0    0x3e    sd a1,8(sp)           ; stack access
    0x840052a2    0x40    sd a2,16(sp)          ; stack access
    0x840052a4    0x42    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x840052a8    0x46    mv a5,a0
    0x840052aa    0x48    sd a0,24(sp)          ; stack access
    0x840052ac    0x4a    sd a1,32(sp)          ; stack access
    0x840052ae    0x4c    mv a0,a1
    0x840052b0    0x4e    bnez a5,ffffffff840052c2 <getReceiveSlots+0x60>
    0x840052b2    0x50    ld a5,0(a1)
    0x840052b4    0x52    srli a5,a5,0x3b
    0x840052b6    0x54    bnez a5,ffffffff840052c2 <getReceiveSlots+0x60>
    0x840052b8    0x56    ld ra,72(sp)          ; stack access
    0x840052ba    0x58    ld s0,64(sp)          ; stack access
    0x840052bc    0x5a    ld s1,56(sp)          ; stack access
    0x840052be    0x5c    addi sp,sp,80
    0x840052c0    0x5e    ret
    0x840052c2    0x60    ld ra,72(sp)          ; stack access
    0x840052c4    0x62    ld s0,64(sp)          ; stack access
    0x840052c6    0x64    ld s1,56(sp)          ; stack access
    0x840052c8    0x66    li a0,0
    0x840052ca    0x68    addi sp,sp,80
    0x840052cc    0x6a    ret
    0x840052ce    0x6c    li a0,0
    0x840052d0    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 87 nodes.

Section possibleSwitchTo (225 of 296)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 35 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x84004ca6     0x0    ld a5,368(a0)
    0x84004caa     0x4    beqz a5,ffffffff84004cf0 <possibleSwitchTo+0x4a>
    0x84004cac     0x6    ld a5,288(a0)
    0x84004cb0     0xa    andi a4,a5,1
    0x84004cb4     0xe    bnez a4,ffffffff84004cf0 <possibleSwitchTo+0x4a>
    0x84004cb6    0x10    ld a3,344(a0)
    0x84004cba    0x14    auipc a4,0x1d
    0x84004cbe    0x18    ld a4,-1186(a4) # ffffffff84021818 <ksCurDomain>
    0x84004cc2    0x1c    bne a3,a4,ffffffff84004cf2 <possibleSwitchTo+0x4c>
    0x84004cc6    0x20    auipc a5,0x1d
    0x84004cca    0x24    addi a5,a5,-1150 # ffffffff84021848 <ksSchedulerAction>
    0x84004cce    0x28    ld a4,0(a5)
    0x84004cd0    0x2a    beqz a4,ffffffff84004d02 <possibleSwitchTo+0x5c>
    0x84004cd2    0x2c    addi sp,sp,-32
    0x84004cd4    0x2e    sd a0,8(sp)           ; stack access
    0x84004cd6    0x30    sd ra,24(sp)          ; stack access
    0x84004cd8    0x32    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84004cdc    0x36    ld a0,8(sp)           ; stack access
    0x84004cde    0x38    ld a5,288(a0)
    0x84004ce2    0x3c    srli a5,a5,0x1
    0x84004ce4    0x3e    andi a5,a5,1
    0x84004ce6    0x40    bnez a5,ffffffff84004cfc <possibleSwitchTo+0x56>
    0x84004ce8    0x42    ld ra,24(sp)          ; stack access
    0x84004cea    0x44    addi sp,sp,32
    0x84004cec    0x46    j ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x84004cf0    0x4a    ret
    0x84004cf2    0x4c    srli a5,a5,0x1
    0x84004cf4    0x4e    andi a5,a5,1
    0x84004cf6    0x50    bnez a5,ffffffff84004cf0 <possibleSwitchTo+0x4a>
    0x84004cf8    0x52    j ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x84004cfc    0x56    ld ra,24(sp)          ; stack access
    0x84004cfe    0x58    addi sp,sp,32
    0x84004d00    0x5a    ret
    0x84004d02    0x5c    sd a0,0(a5)
    0x84004d04    0x5e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 65 nodes.

Section switchToThread (226 of 296)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 17 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x84004b5e     0x0    addi sp,sp,-16
    0x84004b60     0x2    sd s0,0(sp)           ; stack access
    0x84004b62     0x4    sd ra,8(sp)           ; stack access
    0x84004b64     0x6    mv s0,a0
    0x84004b66     0x8    jal ra,ffffffff84003c98 <setVMRoot>
    0x84004b6a     0xc    ld a5,288(s0)
    0x84004b6e    0x10    srli a5,a5,0x1
    0x84004b70    0x12    andi a5,a5,1
    0x84004b72    0x14    beqz a5,ffffffff84004b7a <switchToThread+0x1c>
    0x84004b74    0x16    mv a0,s0
    0x84004b76    0x18    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84004b7a    0x1c    ld ra,8(sp)           ; stack access
    0x84004b7c    0x1e    auipc a5,0x1d
    0x84004b80    0x22    sd s0,-804(a5) # ffffffff84021858 <ksCurThread>
    0x84004b84    0x26    ld s0,0(sp)           ; stack access
    0x84004b86    0x28    addi sp,sp,16
    0x84004b88    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 28 nodes.

Section handleFaultReply (227 of 296)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 179 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `handleFaultReply`:

    0x840038d2      0x0    ld a4,80(a1)
    0x840038d4      0x2    addi sp,sp,-48
    0x840038d6      0x4    sd s0,32(sp)          ; stack access
    0x840038d8      0x6    sd ra,40(sp)          ; stack access
    0x840038da      0x8    sd s1,24(sp)          ; stack access
    0x840038dc      0xa    sd s2,16(sp)          ; stack access
    0x840038de      0xc    sd s3,8(sp)           ; stack access
    0x840038e0      0xe    sd s4,0(sp)           ; stack access
    0x840038e2     0x10    li a5,120
    0x840038e6     0x14    andi a3,a4,127
    0x840038ea     0x18    mv s0,a0
    0x840038ec     0x1a    bgeu a5,a3,ffffffff840039d6 <handleFaultReply+0x104>
    0x840038f0     0x1e    ld a5,312(a0)
    0x840038f4     0x22    li a2,3
    0x840038f6     0x24    srli s1,a4,0xc
    0x840038fa     0x28    andi a0,a5,15
    0x840038fe     0x2c    li a3,120
    0x84003902     0x30    beq a0,a2,ffffffff840039b8 <handleFaultReply+0xe6>
    0x84003906     0x34    li a5,3
    0x84003908     0x36    bltu a5,a0,ffffffff84003964 <handleFaultReply+0x92>
    0x8400390c     0x3a    li a5,1
    0x8400390e     0x3c    beq a0,a5,ffffffff840039c6 <handleFaultReply+0xf4>
    0x84003912     0x40    li a5,2
    0x84003914     0x42    bne a0,a5,ffffffff84003aae <handleFaultReply+0x1dc>
    0x84003918     0x46    li a5,10
    0x8400391a     0x48    mv s3,a3
    0x8400391c     0x4a    bltu a5,a3,ffffffff84003a2e <handleFaultReply+0x15c>
    0x84003920     0x4e    li a5,4
    0x84003922     0x50    mv a7,s3
    0x84003924     0x52    bltu a5,s3,ffffffff84003a28 <handleFaultReply+0x156>
    0x84003928     0x56    beqz a3,ffffffff840039c2 <handleFaultReply+0xf0>
    0x8400392a     0x58    auipc s2,0xa
    0x8400392e     0x5c    addi s2,s2,1222 # ffffffff8400ddf0 <syscall_fault_message>
    0x84003932     0x60    mv a6,s2
    0x84003934     0x62    auipc a0,0xa
    0x84003938     0x66    addi a0,a0,-492 # ffffffff8400d748 <msgRegisters>
    0x8400393c     0x6a    li a4,11
    0x8400393e     0x6c    li a5,33
    0x84003942     0x70    li a2,0
    0x84003944     0x72    slli a4,a4,0x3
    0x84003946     0x74    add a4,a4,a1
    0x84003948     0x76    ld a4,0(a4)
    0x8400394a     0x78    slli a5,a5,0x3
    0x8400394c     0x7a    add a5,a5,s0
    0x8400394e     0x7c    sd a4,0(a5)
    0x84003950     0x7e    addi a2,a2,1
    0x84003952     0x80    addi a6,a6,1
    0x84003954     0x82    addi a0,a0,1
    0x84003956     0x84    bgeu a2,a7,ffffffff84003a74 <handleFaultReply+0x1a2>
    0x8400395a     0x88    lbu a5,0(a6)
    0x8400395e     0x8c    lbu a4,0(a0)
    0x84003962     0x90    j ffffffff84003944 <handleFaultReply+0x72>
    0x84003964     0x92    li a5,5
    0x84003966     0x94    bne a0,a5,ffffffff840039fc <handleFaultReply+0x12a>
    0x8400396a     0x98    li a5,32
    0x8400396e     0x9c    mv s3,a3
    0x84003970     0x9e    bltu a5,a3,ffffffff84003a1a <handleFaultReply+0x148>
    0x84003974     0xa2    li a5,4
    0x84003976     0xa4    mv a7,s3
    0x84003978     0xa6    bltu a5,s3,ffffffff84003a14 <handleFaultReply+0x142>
    0x8400397c     0xaa    beqz a3,ffffffff840039c2 <handleFaultReply+0xf0>
    0x8400397e     0xac    auipc s2,0xa
    0x84003982     0xb0    addi s2,s2,1154 # ffffffff8400de00 <timeout_fault_message>
    0x84003986     0xb4    mv a6,s2
    0x84003988     0xb6    auipc a0,0xa
    0x8400398c     0xba    addi a0,a0,-576 # ffffffff8400d748 <msgRegisters>
    0x84003990     0xbe    li a4,11
    0x84003992     0xc0    li a5,33
    0x84003996     0xc4    li a2,0
    0x84003998     0xc6    slli a4,a4,0x3
    0x8400399a     0xc8    add a4,a4,a1
    0x8400399c     0xca    ld a4,0(a4)
    0x8400399e     0xcc    slli a5,a5,0x3
    0x840039a0     0xce    add a5,a5,s0
    0x840039a2     0xd0    sd a4,0(a5)
    0x840039a4     0xd2    addi a2,a2,1
    0x840039a6     0xd4    addi a6,a6,1
    0x840039a8     0xd6    addi a0,a0,1
    0x840039aa     0xd8    bgeu a2,a7,ffffffff84003a3a <handleFaultReply+0x168>
    0x840039ae     0xdc    lbu a5,0(a6)
    0x840039b2     0xe0    lbu a4,0(a0)
    0x840039b6     0xe4    j ffffffff84003998 <handleFaultReply+0xc6>
    0x840039b8     0xe6    ld a5,88(a1)
    0x840039ba     0xe8    sd a5,264(s0) # 1108 <KERNEL_OFFSET-0xfffffffeffffeef8>
    0x840039be     0xec    ld a5,96(a1)
    0x840039c0     0xee    sd a5,8(s0)
    0x840039c2     0xf0    seqz a0,s1
    0x840039c6     0xf4    ld ra,40(sp)          ; stack access
    0x840039c8     0xf6    ld s0,32(sp)          ; stack access
    0x840039ca     0xf8    ld s1,24(sp)          ; stack access
    0x840039cc     0xfa    ld s2,16(sp)          ; stack access
    0x840039ce     0xfc    ld s3,8(sp)           ; stack access
    0x840039d0     0xfe    ld s4,0(sp)           ; stack access
    0x840039d2    0x100    addi sp,sp,48
    0x840039d4    0x102    ret
    0x840039d6    0x104    ld a5,312(a0)
    0x840039da    0x108    li a2,3
    0x840039dc    0x10a    srli s1,a4,0xc
    0x840039e0    0x10e    andi a0,a5,15
    0x840039e4    0x112    bne a0,a2,ffffffff84003906 <handleFaultReply+0x34>
    0x840039e8    0x116    beqz a3,ffffffff840039c2 <handleFaultReply+0xf0>
    0x840039ea    0x118    ld a5,88(a1)
    0x840039ec    0x11a    andi a4,a4,126
    0x840039f0    0x11e    sd a5,264(s0)
    0x840039f4    0x122    bnez a4,ffffffff840039be <handleFaultReply+0xec>
    0x840039f6    0x124    seqz a0,s1
    0x840039fa    0x128    j ffffffff840039c6 <handleFaultReply+0xf4>
    0x840039fc    0x12a    li a5,6
    0x840039fe    0x12c    bne a0,a5,ffffffff84003aae <handleFaultReply+0x1dc>
    0x84003a02    0x130    ld ra,40(sp)          ; stack access
    0x84003a04    0x132    ld s0,32(sp)          ; stack access
    0x84003a06    0x134    ld s1,24(sp)          ; stack access
    0x84003a08    0x136    ld s2,16(sp)          ; stack access
    0x84003a0a    0x138    ld s3,8(sp)           ; stack access
    0x84003a0c    0x13a    ld s4,0(sp)           ; stack access
    0x84003a0e    0x13c    li a0,1
    0x84003a10    0x13e    addi sp,sp,48
    0x84003a12    0x140    ret
    0x84003a14    0x142    li a7,4
    0x84003a16    0x144    bnez a3,ffffffff8400397e <handleFaultReply+0xac>
    0x84003a18    0x146    j ffffffff840039c2 <handleFaultReply+0xf0>
    0x84003a1a    0x148    li s3,32
    0x84003a1e    0x14c    li a5,4
    0x84003a20    0x14e    mv a7,s3
    0x84003a22    0x150    bgeu a5,s3,ffffffff8400397c <handleFaultReply+0xaa>
    0x84003a26    0x154    j ffffffff84003a14 <handleFaultReply+0x142>
    0x84003a28    0x156    li a7,4
    0x84003a2a    0x158    bnez a3,ffffffff8400392a <handleFaultReply+0x58>
    0x84003a2c    0x15a    j ffffffff840039c2 <handleFaultReply+0xf0>
    0x84003a2e    0x15c    li s3,10
    0x84003a30    0x15e    li a5,4
    0x84003a32    0x160    mv a7,s3
    0x84003a34    0x162    bgeu a5,s3,ffffffff84003928 <handleFaultReply+0x56>
    0x84003a38    0x166    j ffffffff84003a28 <handleFaultReply+0x156>
    0x84003a3a    0x168    li s4,1
    0x84003a3c    0x16a    beqz a3,ffffffff84003a40 <handleFaultReply+0x16e>
    0x84003a3e    0x16c    mv s4,a7
    0x84003a40    0x16e    bgeu s4,s3,ffffffff840039c2 <handleFaultReply+0xf0>
    0x84003a44    0x172    li a0,0
    0x84003a46    0x174    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x84003a4a    0x178    beqz a0,ffffffff840039c2 <handleFaultReply+0xf0>
    0x84003a4c    0x17a    slli a4,s4,0x3
    0x84003a50    0x17e    slli s3,s3,0x3
    0x84003a52    0x180    add a4,a4,a0
    0x84003a54    0x182    add a3,s2,s4
    0x84003a58    0x186    add a0,a0,s3
    0x84003a5a    0x188    lbu a5,0(a3)
    0x84003a5e    0x18c    ld a2,8(a4)
    0x84003a60    0x18e    addi a4,a4,8
    0x84003a62    0x190    slli a5,a5,0x3
    0x84003a64    0x192    add a5,a5,s0
    0x84003a66    0x194    sd a2,0(a5)
    0x84003a68    0x196    addi a3,a3,1
    0x84003a6a    0x198    bne a4,a0,ffffffff84003a5a <handleFaultReply+0x188>
    0x84003a6e    0x19c    seqz a0,s1
    0x84003a72    0x1a0    j ffffffff840039c6 <handleFaultReply+0xf4>
    0x84003a74    0x1a2    li s4,1
    0x84003a76    0x1a4    beqz a3,ffffffff84003a7a <handleFaultReply+0x1a8>
    0x84003a78    0x1a6    mv s4,a7
    0x84003a7a    0x1a8    bgeu s4,s3,ffffffff840039c2 <handleFaultReply+0xf0>
    0x84003a7e    0x1ac    li a0,0
    0x84003a80    0x1ae    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x84003a84    0x1b2    beqz a0,ffffffff840039c2 <handleFaultReply+0xf0>
    0x84003a86    0x1b4    slli a4,s4,0x3
    0x84003a8a    0x1b8    slli s3,s3,0x3
    0x84003a8c    0x1ba    add a4,a4,a0
    0x84003a8e    0x1bc    add a3,s2,s4
    0x84003a92    0x1c0    add a0,a0,s3
    0x84003a94    0x1c2    lbu a5,0(a3)
    0x84003a98    0x1c6    ld a2,8(a4)
    0x84003a9a    0x1c8    addi a4,a4,8
    0x84003a9c    0x1ca    slli a5,a5,0x3
    0x84003a9e    0x1cc    add a5,a5,s0
    0x84003aa0    0x1ce    sd a2,0(a5)
    0x84003aa2    0x1d0    addi a3,a3,1
    0x84003aa4    0x1d2    bne a0,a4,ffffffff84003a94 <handleFaultReply+0x1c2>
    0x84003aa8    0x1d6    seqz a0,s1
    0x84003aac    0x1da    j ffffffff840039c6 <handleFaultReply+0xf4>
    0x84003aae    0x1dc    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
179 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 285 nodes.

Section setMRs_fault (228 of 296)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 97 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `setMRs_fault`:

    0x8400371a      0x0    ld a5,312(a0)
    0x8400371e      0x4    li a3,3
    0x84003720      0x6    mv a6,a1
    0x84003722      0x8    andi a4,a5,15
    0x84003726      0xc    beq a4,a3,ffffffff8400380e <setMRs_fault+0xf4>
    0x8400372a     0x10    addi sp,sp,-16
    0x8400372c     0x12    sd ra,8(sp)           ; stack access
    0x8400372e     0x14    andi a3,a5,12
    0x84003732     0x18    bnez a3,ffffffff84003792 <setMRs_fault+0x78>
    0x84003734     0x1a    li a3,1
    0x84003736     0x1c    mv a1,a2
    0x84003738     0x1e    beq a4,a3,ffffffff840037de <setMRs_fault+0xc4>
    0x8400373c     0x22    li a5,2
    0x8400373e     0x24    bne a4,a5,ffffffff84003828 <setMRs_fault+0x10e>
    0x84003742     0x28    ld a2,264(a0)
    0x84003746     0x2c    ld a3,8(a0)
    0x84003748     0x2e    ld a4,0(a0)
    0x8400374a     0x30    ld a5,72(a0)
    0x8400374c     0x32    sd a2,88(a6)
    0x84003750     0x36    sd a3,96(a6)
    0x84003754     0x3a    sd a4,104(a6)
    0x84003758     0x3e    sd a5,112(a6)
    0x8400375c     0x42    beqz a1,ffffffff840037d6 <setMRs_fault+0xbc>
    0x8400375e     0x44    auipc a3,0xa
    0x84003762     0x48    addi a3,a3,1682 # ffffffff8400ddf0 <syscall_fault_message>
    0x84003766     0x4c    addi a4,a1,40
    0x8400376a     0x50    addi a2,a1,88
    0x8400376e     0x54    lbu a5,4(a3)
    0x84003772     0x58    addi a4,a4,8
    0x84003774     0x5a    addi a3,a3,1
    0x84003776     0x5c    slli a5,a5,0x3
    0x84003778     0x5e    add a5,a5,a0
    0x8400377a     0x60    ld a5,0(a5)
    0x8400377c     0x62    sd a5,-8(a4)
    0x84003780     0x66    bne a2,a4,ffffffff8400376e <setMRs_fault+0x54>
    0x84003784     0x6a    ld a5,320(a0)
    0x84003788     0x6e    li a0,11
    0x8400378a     0x70    sd a5,88(a1)
    0x8400378c     0x72    ld ra,8(sp)           ; stack access
    0x8400378e     0x74    addi sp,sp,16
    0x84003790     0x76    ret
    0x84003792     0x78    li a3,5
    0x84003794     0x7a    bne a4,a3,ffffffff840037b6 <setMRs_fault+0x9c>
    0x84003798     0x7e    ld a4,320(a0)
    0x8400379c     0x82    ld a5,368(a0)
    0x840037a0     0x86    li a0,1
    0x840037a2     0x88    sd a4,88(a1)
    0x840037a4     0x8a    beqz a5,ffffffff8400378c <setMRs_fault+0x72>
    0x840037a6     0x8c    ld a4,8(a5)
    0x840037a8     0x8e    ld ra,8(sp)           ; stack access
    0x840037aa     0x90    sd zero,8(a5)
    0x840037ae     0x94    sd a4,96(a1)
    0x840037b0     0x96    li a0,2
    0x840037b2     0x98    addi sp,sp,16
    0x840037b4     0x9a    ret
    0x840037b6     0x9c    li a3,6
    0x840037b8     0x9e    bne a4,a3,ffffffff84003828 <setMRs_fault+0x10e>
    0x840037bc     0xa2    ld a2,264(a0)
    0x840037c0     0xa6    ld a3,320(a0)
    0x840037c4     0xaa    srli a4,a5,0x13
    0x840037c8     0xae    andi a4,a4,1
    0x840037ca     0xb0    srliw a5,a5,0x1b
    0x840037ce     0xb4    sd a2,88(a1)
    0x840037d0     0xb6    sd a3,96(a1)
    0x840037d2     0xb8    sd a4,104(a1)
    0x840037d4     0xba    sd a5,112(a1)
    0x840037d6     0xbc    ld ra,8(sp)           ; stack access
    0x840037d8     0xbe    li a0,4
    0x840037da     0xc0    addi sp,sp,16
    0x840037dc     0xc2    ret
    0x840037de     0xc4    ld a4,320(a0)
    0x840037e2     0xc8    ld a7,264(a0)
    0x840037e6     0xcc    ld a2,328(a0)
    0x840037ea     0xd0    ld a3,336(a0)
    0x840037ee     0xd4    srli a5,a5,0x3f
    0x840037f0     0xd6    sd a4,96(a6)
    0x840037f4     0xda    sd a7,88(a6)
    0x840037f8     0xde    sd a5,104(a6)
    0x840037fc     0xe2    li a4,3
    0x840037fe     0xe4    mv a0,a6
    0x84003800     0xe6    jal ra,ffffffff840034fe <setMRs_lookup_failure>
    0x84003804     0xea    ld ra,8(sp)           ; stack access
    0x84003806     0xec    slli a0,a0,0x20
    0x84003808     0xee    srli a0,a0,0x20
    0x8400380a     0xf0    addi sp,sp,16
    0x8400380c     0xf2    ret
    0x8400380e     0xf4    ld a2,264(a0)
    0x84003812     0xf8    ld a3,8(a0)
    0x84003814     0xfa    srli a4,a5,0x20
    0x84003818     0xfe    srliw a5,a5,0x4
    0x8400381c    0x102    sd a2,88(a1)
    0x8400381e    0x104    sd a3,96(a1)
    0x84003820    0x106    sd a4,104(a1)
    0x84003822    0x108    sd a5,112(a1)
    0x84003824    0x10a    li a0,4
    0x84003826    0x10c    ret
    0x84003828    0x10e    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 166 nodes.

Section ki_boot_end (229 of 296)
================================

Deriving specifications
-----------------------

Section `ki_boot_end` consists of 45 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc


Stack analysis
---------------

No stack accesses found. Code for `ki_boot_end`:

    0x84003000     0x0    csrrw t0,sscratch,t0
    0x84003004     0x4    sd ra,0(t0)
    0x84003008     0x8    sd sp,8(t0)
    0x8400300c     0xc    sd gp,16(t0)
    0x84003010    0x10    sd tp,24(t0)
    0x84003014    0x14    sd t1,40(t0)
    0x84003018    0x18    sd t2,48(t0)
    0x8400301c    0x1c    sd s0,56(t0)
    0x84003020    0x20    sd s1,64(t0)
    0x84003024    0x24    sd a0,72(t0)
    0x84003028    0x28    sd a1,80(t0)
    0x8400302c    0x2c    sd a2,88(t0)
    0x84003030    0x30    sd a3,96(t0)
    0x84003034    0x34    sd a4,104(t0)
    0x84003038    0x38    sd a5,112(t0)
    0x8400303c    0x3c    sd a6,120(t0)
    0x84003040    0x40    sd a7,128(t0)
    0x84003044    0x44    sd s2,136(t0)
    0x84003048    0x48    sd s3,144(t0)
    0x8400304c    0x4c    sd s4,152(t0)
    0x84003050    0x50    sd s5,160(t0)
    0x84003054    0x54    sd s6,168(t0)
    0x84003058    0x58    sd s7,176(t0)
    0x8400305c    0x5c    sd s8,184(t0)
    0x84003060    0x60    sd s9,192(t0)
    0x84003064    0x64    sd s10,200(t0)
    0x84003068    0x68    sd s11,208(t0)
    0x8400306c    0x6c    sd t3,216(t0)
    0x84003070    0x70    sd t4,224(t0)
    0x84003074    0x74    sd t5,232(t0)
    0x84003078    0x78    sd t6,240(t0)
    0x8400307c    0x7c    csrr ra,sscratch
    0x84003080    0x80    sd ra,32(t0)
    0x84003084    0x84    csrr ra,sstatus
    0x84003088    0x88    sd ra,256(t0)
    0x8400308c    0x8c    csrr s0,scause
    0x84003090    0x90    sd s0,248(t0)
    0x84003094    0x94    mv gp,gp
    0x84003098    0x98    auipc sp,0x1e
    0x8400309c    0x9c    addi sp,sp,1896 # ffffffff84021800 <tlbLockCount>
    0x840030a0    0xa0    csrr ra,sepc
    0x840030a4    0xa4    sd ra,264(t0)
    0x840030a8    0xa8    bltz s0,ffffffff840030c4 <interrupt>
    0x840030ac    0xac    li s4,8
    0x840030ae    0xae    bne s0,s4,ffffffff840030bc <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ki_boot_end` has 92 nodes.

Section create_bi_frame_cap (230 of 296)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 40 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x84000d42     0x0    addi sp,sp,-96
    0x84000d44     0x2    sd s0,80(sp)          ; stack access
    0x84000d46     0x4    lui a5,0xfe000
    0x84000d4a     0x8    auipc s0,0xe
    0x84000d4e     0xc    ld s0,-1242(s0) # ffffffff8400e870 <rootserver+0x20>
    0x84000d52    0x10    srli a5,a5,0x10
    0x84000d54    0x12    slli s0,s0,0x9
    0x84000d56    0x14    sd s1,72(sp)          ; stack access
    0x84000d58    0x16    and s0,s0,a5
    0x84000d5a    0x18    slli s1,a4,0x19
    0x84000d5e    0x1c    li a5,1
    0x84000d60    0x1e    li a4,19
    0x84000d62    0x20    slli a4,a4,0x37
    0x84000d64    0x22    slli a5,a5,0x30
    0x84000d66    0x24    srli s1,s1,0x19
    0x84000d68    0x26    or s1,s1,a4
    0x84000d6a    0x28    or s0,s0,a5
    0x84000d6c    0x2a    mv a4,a2
    0x84000d6e    0x2c    mv a5,a3
    0x84000d70    0x2e    sd a0,16(sp)          ; stack access
    0x84000d72    0x30    sd a1,24(sp)          ; stack access
    0x84000d74    0x32    mv a2,s1
    0x84000d76    0x34    mv a1,a5
    0x84000d78    0x36    mv a3,s0
    0x84000d7a    0x38    mv a0,a4
    0x84000d7c    0x3a    sd ra,88(sp)          ; stack access
    0x84000d7e    0x3c    jal ra,ffffffff840005b6 <map_it_frame_cap>
    0x84000d82    0x40    ld a0,16(sp)          ; stack access
    0x84000d84    0x42    ld a1,24(sp)          ; stack access
    0x84000d86    0x44    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84000d8a    0x48    ld ra,88(sp)          ; stack access
    0x84000d8c    0x4a    sd s0,296(a0)
    0x84000d90    0x4e    ld s0,80(sp)          ; stack access
    0x84000d92    0x50    li a5,3
    0x84000d94    0x52    sd s1,288(a0)
    0x84000d98    0x56    sd zero,304(a0)
    0x84000d9c    0x5a    sd a5,312(a0)
    0x84000da0    0x5e    ld s1,72(sp)          ; stack access
    0x84000da2    0x60    addi sp,sp,96
    0x84000da4    0x62    ret

Proving inst theorems
---------------------

40 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 58 nodes.

Section create_ipcbuf_frame_cap (231 of 296)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 51 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84000cc0     0x0    auipc a6,0xd
    0x84000cc4     0x4    addi a6,a6,1856 # ffffffff8400e400 <ndks_boot>
    0x84000cc8     0x8    ld a5,1128(a6)
    0x84000ccc     0xc    addi sp,sp,-96
    0x84000cce     0xe    sd a3,8(sp)           ; stack access
    0x84000cd0    0x10    lui a3,0x1
    0x84000cd2    0x12    sd ra,88(sp)          ; stack access
    0x84000cd4    0x14    sd s0,80(sp)          ; stack access
    0x84000cd6    0x16    sd s1,72(sp)          ; stack access
    0x84000cd8    0x18    sd a0,16(sp)          ; stack access
    0x84000cda    0x1a    sd a1,24(sp)          ; stack access
    0x84000cdc    0x1c    sd a2,0(sp)           ; stack access
    0x84000cde    0x1e    add a3,a3,a5
    0x84000ce0    0x20    sd zero,0(a5) # ab53000 <KERNEL_OFFSET-0xfffffffef54ad000>
    0x84000ce4    0x24    addi a5,a5,8
    0x84000ce6    0x26    bne a5,a3,ffffffff84000ce0 <create_ipcbuf_frame_cap+0x20>
    0x84000cea    0x2a    ld s1,1128(a6)
    0x84000cee    0x2e    lui a3,0xfe000
    0x84000cf2    0x32    srli a3,a3,0x10
    0x84000cf4    0x34    slli s1,s1,0x9
    0x84000cf6    0x36    slli s0,a4,0x19
    0x84000cfa    0x3a    and s1,s1,a3
    0x84000cfc    0x3c    li a2,19
    0x84000cfe    0x3e    li a3,1
    0x84000d00    0x40    ld a0,0(sp)           ; stack access
    0x84000d02    0x42    ld a1,8(sp)           ; stack access
    0x84000d04    0x44    slli a2,a2,0x37
    0x84000d06    0x46    slli a3,a3,0x30
    0x84000d08    0x48    srli s0,s0,0x19
    0x84000d0a    0x4a    or s0,s0,a2
    0x84000d0c    0x4c    or s1,s1,a3
    0x84000d0e    0x4e    mv a2,s0
    0x84000d10    0x50    mv a3,s1
    0x84000d12    0x52    sd a0,32(sp)          ; stack access
    0x84000d14    0x54    sd a1,40(sp)          ; stack access
    0x84000d16    0x56    jal ra,ffffffff840005b6 <map_it_frame_cap>
    0x84000d1a    0x5a    ld a1,24(sp)          ; stack access
    0x84000d1c    0x5c    ld a0,16(sp)          ; stack access
    0x84000d1e    0x5e    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84000d22    0x62    li a5,3
    0x84000d24    0x64    sd s0,320(a0) # fffffffff8000140 <ki_end+0x73fd9140>
    0x84000d28    0x68    sd s1,328(a0)
    0x84000d2c    0x6c    ld ra,88(sp)          ; stack access
    0x84000d2e    0x6e    sd zero,336(a0)
    0x84000d32    0x72    sd a5,344(a0)
    0x84000d36    0x76    mv a0,s0
    0x84000d38    0x78    ld s0,80(sp)          ; stack access
    0x84000d3a    0x7a    mv a1,s1
    0x84000d3c    0x7c    ld s1,72(sp)          ; stack access
    0x84000d3e    0x7e    addi sp,sp,96
    0x84000d40    0x80    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 79 nodes.

Section map_it_frame_cap (232 of 296)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 46 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

14 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x840005b6     0x0    addi sp,sp,-80
    0x840005b8     0x2    sd ra,72(sp)          ; stack access
    0x840005ba     0x4    sd s0,64(sp)          ; stack access
    0x840005bc     0x6    sd s1,56(sp)          ; stack access
    0x840005be     0x8    sd s2,48(sp)          ; stack access
    0x840005c0     0xa    mv s1,a2
    0x840005c2     0xc    mv s2,a3
    0x840005c4     0xe    sd a1,24(sp)          ; stack access
    0x840005c6    0x10    sd a2,0(sp)           ; stack access
    0x840005c8    0x12    sd a3,8(sp)           ; stack access
    0x840005ca    0x14    sd a0,16(sp)          ; stack access
    0x840005cc    0x16    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840005d0    0x1a    mv a5,a0
    0x840005d2    0x1c    mv a1,s2
    0x840005d4    0x1e    mv a0,s1
    0x840005d6    0x20    mv s2,a5
    0x840005d8    0x22    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840005dc    0x26    srli s0,s1,0x26
    0x840005e0    0x2a    li a4,-1
    0x840005e2    0x2c    srli a1,a4,0x19
    0x840005e6    0x30    andi a5,s0,1
    0x840005ea    0x34    and a1,a1,s1
    0x840005ec    0x36    mv s0,a0
    0x840005ee    0x38    beqz a5,ffffffff840005f4 <map_it_frame_cap+0x3e>
    0x840005f0    0x3a    slli a4,a4,0x27
    0x840005f2    0x3c    or a1,a1,a4
    0x840005f4    0x3e    mv a0,s2
    0x840005f6    0x40    jal ra,ffffffff84003ab2 <lookupPTSlot>
    0x840005fa    0x44    li a5,1
    0x840005fc    0x46    slli a5,a5,0x26
    0x840005fe    0x48    add s0,s0,a5
    0x84000600    0x4a    lui a5,0xfff00
    0x84000604    0x4e    srli a5,a5,0xa
    0x84000606    0x50    srli s0,s0,0x2
    0x84000608    0x52    and s0,s0,a5
    0x8400060a    0x54    ori s0,s0,223
    0x8400060e    0x58    sd a0,32(sp)          ; stack access
    0x84000610    0x5a    sd a1,40(sp)          ; stack access
    0x84000612    0x5c    sd s0,0(a0)
    0x84000614    0x5e    sfence.vma
    0x84000618    0x62    ld ra,72(sp)          ; stack access
    0x8400061a    0x64    ld s0,64(sp)          ; stack access
    0x8400061c    0x66    ld s1,56(sp)          ; stack access
    0x8400061e    0x68    ld s2,48(sp)          ; stack access
    0x84000620    0x6a    addi sp,sp,80
    0x84000622    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 68 nodes.

Section create_it_address_space (233 of 296)
============================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 138 instructions.


Stack analysis
---------------

52 stack accesses found. Annotated code for `create_it_address_space`:

    0x8400043e      0x0    addi sp,sp,-208
    0x84000440      0x2    sd s11,104(sp)        ; stack access
    0x84000442      0x4    auipc s11,0xe
    0x84000446      0x8    addi s11,s11,-66 # ffffffff8400e400 <ndks_boot>
    0x8400044a      0xc    ld a7,1112(s11)
    0x8400044e     0x10    sd a2,32(sp)          ; stack access
    0x84000450     0x12    auipc a2,0x25
    0x84000454     0x16    addi a2,a2,-1104 # ffffffff84025000 <kernel_root_pageTable>
    0x84000458     0x1a    sd s5,152(sp)         ; stack access
    0x8400045a     0x1c    sd a1,56(sp)          ; stack access
    0x8400045c     0x1e    sd ra,200(sp)         ; stack access
    0x8400045e     0x20    sd s0,192(sp)         ; stack access
    0x84000460     0x22    sd s1,184(sp)         ; stack access
    0x84000462     0x24    sd s2,176(sp)         ; stack access
    0x84000464     0x26    sd s3,168(sp)         ; stack access
    0x84000466     0x28    sd s4,160(sp)         ; stack access
    0x84000468     0x2a    sd s6,144(sp)         ; stack access
    0x8400046a     0x2c    sd s7,136(sp)         ; stack access
    0x8400046c     0x2e    sd s8,128(sp)         ; stack access
    0x8400046e     0x30    sd s9,120(sp)         ; stack access
    0x84000470     0x32    sd s10,112(sp)        ; stack access
    0x84000472     0x34    sd a0,48(sp)          ; stack access
    0x84000474     0x36    mv s5,a3
    0x84000476     0x38    auipc a5,0x25
    0x8400047a     0x3c    addi a5,a5,906 # ffffffff84025800 <kernel_root_pageTable+0x800>
    0x8400047e     0x40    auipc a1,0x26
    0x84000482     0x44    addi a1,a1,-1150 # ffffffff84026000 <kernel_root_pageTable+0x1000>
    0x84000486     0x48    sub a2,a7,a2
    0x8400048a     0x4c    ld a3,0(a5)
    0x8400048c     0x4e    add a4,a2,a5
    0x84000490     0x52    addi a5,a5,8
    0x84000492     0x54    sd a3,0(a4)
    0x84000494     0x56    bne a1,a5,ffffffff8400048a <create_it_address_space+0x4c>
    0x84000498     0x5a    ld a0,48(sp)          ; stack access
    0x8400049a     0x5c    ld a1,56(sp)          ; stack access
    0x8400049c     0x5e    li s4,-1
    0x8400049e     0x60    lui s2,0x300
    0x840004a2     0x64    lui s3,0xfe000
    0x840004a6     0x68    slli s1,a7,0x9
    0x840004aa     0x6c    srli s4,s4,0x19
    0x840004ae     0x70    srli s3,s3,0x10
    0x840004b2     0x74    addi s2,s2,1
    0x840004b4     0x76    li a5,1
    0x840004b6     0x78    slli a5,a5,0x30
    0x840004b8     0x7a    and a7,a7,s4
    0x840004bc     0x7e    slli s2,s2,0x27
    0x840004be     0x80    and s1,s1,s3
    0x840004c2     0x84    or s1,s1,a5
    0x840004c4     0x86    or s0,a7,s2
    0x840004c8     0x8a    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840004cc     0x8e    ld a5,32(sp)          ; stack access
    0x840004ce     0x90    sd a5,16(sp)          ; stack access
    0x840004d0     0x92    ld a5,1088(s11)
    0x840004d4     0x96    sd s0,96(a0)
    0x840004d6     0x98    sd s1,104(a0)
    0x840004d8     0x9a    sd a5,24(sp)          ; stack access
    0x840004da     0x9c    li a5,30
    0x840004dc     0x9e    sd a5,8(sp)           ; stack access
    0x840004de     0xa0    li a5,3
    0x840004e0     0xa2    sd zero,112(a0)
    0x840004e4     0xa6    sd a5,120(a0)
    0x840004e6     0xa8    ld a5,8(sp)           ; stack access
    0x840004e8     0xaa    ld a4,16(sp)          ; stack access
    0x840004ea     0xac    srl a4,a4,a5
    0x840004ee     0xb0    sll s10,a4,a5
    0x840004f2     0xb4    li a4,1
    0x840004f4     0xb6    sll s8,a4,a5
    0x840004f8     0xba    slli a5,a4,0x30
    0x840004fc     0xbe    sd a5,0(sp)           ; stack access
    0x840004fe     0xc0    bltu s10,s5,ffffffff8400052a <create_it_address_space+0xec>
    0x84000502     0xc4    j ffffffff84000594 <create_it_address_space+0x156>
    0x84000504     0xc6    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84000508     0xca    slli a1,s9,0x5
    0x8400050c     0xce    add a0,a0,a1
    0x8400050e     0xd0    li a5,3
    0x84000510     0xd2    sd a5,24(a0)
    0x84000512     0xd4    sd s7,0(a0)
    0x84000516     0xd8    sd s6,8(a0)
    0x8400051a     0xdc    sd zero,16(a0)
    0x8400051e     0xe0    addi a5,s9,1
    0x84000522     0xe4    sd a5,1088(s11)
    0x84000526     0xe8    bgeu s10,s5,ffffffff84000594 <create_it_address_space+0x156>
    0x8400052a     0xec    ld a5,1168(s11)
    0x8400052e     0xf0    ld a4,0(sp)           ; stack access
    0x84000530     0xf2    and a2,s10,s4
    0x84000534     0xf6    slli a3,a5,0x9
    0x84000538     0xfa    and a3,a3,s3
    0x8400053c     0xfe    or s6,a3,a4
    0x84000540    0x102    or s7,a2,s2
    0x84000544    0x106    lui a4,0x1
    0x84000546    0x108    add a5,a5,a4
    0x84000548    0x10a    mv a0,s0
    0x8400054a    0x10c    mv a1,s1
    0x8400054c    0x10e    mv a2,s7
    0x8400054e    0x110    mv a3,s6
    0x84000550    0x112    sd a5,1168(s11)
    0x84000554    0x116    sd s0,64(sp)          ; stack access
    0x84000556    0x118    sd s1,72(sp)          ; stack access
    0x84000558    0x11a    jal ra,ffffffff840003d0 <map_it_pt_cap>
    0x8400055c    0x11e    ld a7,1096(s11)
    0x84000560    0x122    ld s9,1088(s11)
    0x84000564    0x126    ld a0,48(sp)          ; stack access
    0x84000566    0x128    ld a1,56(sp)          ; stack access
    0x84000568    0x12a    add s10,s10,s8
    0x8400056a    0x12c    bltu s9,a7,ffffffff84000504 <create_it_address_space+0xc6>
    0x8400056e    0x130    sd zero,64(sp)        ; stack access
    0x84000570    0x132    sd zero,72(sp)        ; stack access
    0x84000572    0x134    ld ra,200(sp)         ; stack access
    0x84000574    0x136    ld s0,192(sp)         ; stack access
    0x84000576    0x138    ld a0,64(sp)          ; stack access
    0x84000578    0x13a    ld a1,72(sp)          ; stack access
    0x8400057a    0x13c    ld s1,184(sp)         ; stack access
    0x8400057c    0x13e    ld s2,176(sp)         ; stack access
    0x8400057e    0x140    ld s3,168(sp)         ; stack access
    0x84000580    0x142    ld s4,160(sp)         ; stack access
    0x84000582    0x144    ld s5,152(sp)         ; stack access
    0x84000584    0x146    ld s6,144(sp)         ; stack access
    0x84000586    0x148    ld s7,136(sp)         ; stack access
    0x84000588    0x14a    ld s8,128(sp)         ; stack access
    0x8400058a    0x14c    ld s9,120(sp)         ; stack access
    0x8400058c    0x14e    ld s10,112(sp)        ; stack access
    0x8400058e    0x150    ld s11,104(sp)        ; stack access
    0x84000590    0x152    addi sp,sp,208
    0x84000592    0x154    ret
    0x84000594    0x156    ld a5,8(sp)           ; stack access
    0x84000596    0x158    addiw a5,a5,-9
    0x84000598    0x15a    mv a4,a5
    0x8400059a    0x15c    sd a5,8(sp)           ; stack access
    0x8400059c    0x15e    li a5,12
    0x8400059e    0x160    bne a4,a5,ffffffff840004e6 <create_it_address_space+0xa8>
    0x840005a2    0x164    ld a4,1088(s11)
    0x840005a6    0x168    ld a5,1080(s11)
    0x840005aa    0x16c    ld a3,24(sp)          ; stack access
    0x840005ac    0x16e    sd s0,64(sp)          ; stack access
    0x840005ae    0x170    sd s1,72(sp)          ; stack access
    0x840005b0    0x172    sd a3,88(a5)
    0x840005b2    0x174    sd a4,96(a5)
    0x840005b4    0x176    j ffffffff84000572 <create_it_address_space+0x134>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 225 nodes.

Section map_it_pt_cap (234 of 296)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 46 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

18 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x840003d0     0x0    addi sp,sp,-80
    0x840003d2     0x2    li a5,-1
    0x840003d4     0x4    srli a4,a2,0x26
    0x840003d8     0x8    sd s1,56(sp)          ; stack access
    0x840003da     0xa    srli a6,a5,0x19
    0x840003de     0xe    sd ra,72(sp)          ; stack access
    0x840003e0    0x10    sd s0,64(sp)          ; stack access
    0x840003e2    0x12    sd s2,48(sp)          ; stack access
    0x840003e4    0x14    sd a0,16(sp)          ; stack access
    0x840003e6    0x16    sd a1,24(sp)          ; stack access
    0x840003e8    0x18    sd a2,0(sp)           ; stack access
    0x840003ea    0x1a    sd a3,8(sp)           ; stack access
    0x840003ec    0x1c    andi a4,a4,1
    0x840003ee    0x1e    and s1,a2,a6
    0x840003f2    0x22    beqz a4,ffffffff840003f8 <map_it_pt_cap+0x28>
    0x840003f4    0x24    slli a5,a5,0x27
    0x840003f6    0x26    or s1,s1,a5
    0x840003f8    0x28    ld a1,24(sp)          ; stack access
    0x840003fa    0x2a    ld a0,16(sp)          ; stack access
    0x840003fc    0x2c    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84000400    0x30    ld a1,8(sp)           ; stack access
    0x84000402    0x32    mv s2,a0
    0x84000404    0x34    ld a0,0(sp)           ; stack access
    0x84000406    0x36    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x8400040a    0x3a    mv s0,a0
    0x8400040c    0x3c    mv a1,s1
    0x8400040e    0x3e    mv a0,s2
    0x84000410    0x40    jal ra,ffffffff84003ab2 <lookupPTSlot>
    0x84000414    0x44    li a5,1
    0x84000416    0x46    slli a5,a5,0x26
    0x84000418    0x48    add s0,s0,a5
    0x8400041a    0x4a    lui a5,0xfff00
    0x8400041e    0x4e    srli a5,a5,0xa
    0x84000420    0x50    srli s0,s0,0x2
    0x84000422    0x52    and s0,s0,a5
    0x84000424    0x54    ori s0,s0,193
    0x84000428    0x58    sd a0,32(sp)          ; stack access
    0x8400042a    0x5a    sd a1,40(sp)          ; stack access
    0x8400042c    0x5c    sd s0,0(a0)
    0x8400042e    0x5e    sfence.vma
    0x84000432    0x62    ld ra,72(sp)          ; stack access
    0x84000434    0x64    ld s0,64(sp)          ; stack access
    0x84000436    0x66    ld s1,56(sp)          ; stack access
    0x84000438    0x68    ld s2,48(sp)          ; stack access
    0x8400043a    0x6a    addi sp,sp,80
    0x8400043c    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 72 nodes.

Section c_handle_syscall (235 of 296)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 11 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x8400d6c8     0x0    addi sp,sp,-16
    0x8400d6ca     0x2    sd ra,8(sp)           ; stack access
    0x8400d6cc     0x4    li a5,-1
    0x8400d6ce     0x6    beq a7,a5,ffffffff8400d6e4 <c_handle_syscall+0x1c>
    0x8400d6d2     0xa    li a5,-2
    0x8400d6d4     0xc    beq a7,a5,ffffffff8400d6de <c_handle_syscall+0x16>
    0x8400d6d8    0x10    mv a0,a7
    0x8400d6da    0x12    jal ra,ffffffff8400cef6 <slowpath>
    0x8400d6de    0x16    mv a2,a6
    0x8400d6e0    0x18    jal ra,ffffffff8400d29a <fastpath_reply_recv>
    0x8400d6e4    0x1c    jal ra,ffffffff8400cf88 <fastpath_call>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 19 nodes.

Section slowpath (236 of 296)
=============================

Deriving specifications
-----------------------

Section `slowpath` consists of 8 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `slowpath`:

    0x8400cef6     0x0    addi sp,sp,-16
    0x8400cef8     0x2    sd ra,8(sp)           ; stack access
    0x8400cefa     0x4    li a5,-12
    0x8400cefc     0x6    bgeu a5,a0,ffffffff8400cf08 <slowpath+0x12>
    0x8400cf00     0xa    jal ra,ffffffff8400ccd0 <handleSyscall>
    0x8400cf04     0xe    jal ra,ffffffff84003626 <restore_user_context>
    0x8400cf08    0x12    jal ra,ffffffff8400c9cc <handleUnknownSyscall>
    0x8400cf0c    0x16    j ffffffff8400cf04 <slowpath+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 14 nodes.

Section c_handle_exception (237 of 296)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 17 instructions.

Skipping 14202573 csrr a0,scause


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x8400cc9e     0x0    addi sp,sp,-16
    0x8400cca0     0x2    sd ra,8(sp)           ; stack access
    0x8400cca2     0x4    csrr a0,scause
    0x8400cca6     0x8    li a5,15
    0x8400cca8     0xa    bltu a5,a0,ffffffff8400ccc8 <c_handle_exception+0x2a>
    0x8400ccac     0xe    auipc a3,0x1
    0x8400ccb0    0x12    addi a3,a3,216 # ffffffff8400dd84 <msgRegisters+0x63c>
    0x8400ccb4    0x16    slli a4,a0,0x2
    0x8400ccb8    0x1a    add a4,a4,a3
    0x8400ccba    0x1c    lw a5,0(a4)
    0x8400ccbc    0x1e    add a5,a5,a3
    0x8400ccbe    0x20    jr a5
    0x8400ccc0    0x22    jal ra,ffffffff8400cbbc <handleVMFaultEvent>
    0x8400ccc4    0x26    jal ra,ffffffff84003626 <restore_user_context>
    0x8400ccc8    0x2a    li a1,0
    0x8400ccca    0x2c    jal ra,ffffffff8400cabe <handleUserLevelFault>
    0x8400ccce    0x30    j ffffffff8400ccc4 <c_handle_exception+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 26 nodes.

Section chooseThread (238 of 296)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 64 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `chooseThread`:

    0x8400c4fc     0x0    addi sp,sp,-32
    0x8400c4fe     0x2    sd s1,8(sp)           ; stack access
    0x8400c500     0x4    auipc s1,0x15
    0x8400c504     0x8    ld s1,792(s1) # ffffffff84021818 <ksCurDomain>
    0x8400c508     0xc    sd s2,0(sp)           ; stack access
    0x8400c50a     0xe    slli a5,s1,0x3
    0x8400c50e    0x12    auipc s2,0x3
    0x8400c512    0x16    addi s2,s2,-1294 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400c516    0x1a    add a5,a5,s2
    0x8400c518    0x1c    ld a0,1552(a5)
    0x8400c51c    0x20    sd ra,24(sp)          ; stack access
    0x8400c51e    0x22    sd s0,16(sp)          ; stack access
    0x8400c520    0x24    beqz a0,ffffffff8400c58a <chooseThread+0x8e>
    0x8400c522    0x26    jal ra,ffffffff8400c4ac <__clzdi2>
    0x8400c526    0x2a    addi a4,a0,-60
    0x8400c52a    0x2e    slli a5,s1,0x2
    0x8400c52e    0x32    add a5,a5,a4
    0x8400c530    0x34    slli a5,a5,0x3
    0x8400c532    0x36    add a5,a5,s2
    0x8400c534    0x38    mv s0,a0
    0x8400c536    0x3a    ld a0,1040(a5)
    0x8400c53a    0x3e    slli s1,s1,0x8
    0x8400c53c    0x40    jal ra,ffffffff8400c4ac <__clzdi2>
    0x8400c540    0x44    li a5,63
    0x8400c544    0x48    sub s0,a5,s0
    0x8400c548    0x4c    slli s0,s0,0x6
    0x8400c54a    0x4e    sub a5,a5,a0
    0x8400c54c    0x50    or s0,s0,a5
    0x8400c54e    0x52    add s0,s0,s1
    0x8400c550    0x54    slli s0,s0,0x4
    0x8400c552    0x56    auipc s1,0x4
    0x8400c556    0x5a    addi s1,s1,686 # ffffffff84010800 <ksReadyQueues>
    0x8400c55a    0x5e    add s0,s0,s1
    0x8400c55c    0x60    ld s0,0(s0)
    0x8400c55e    0x62    mv a0,s0
    0x8400c560    0x64    jal ra,ffffffff84003c98 <setVMRoot>
    0x8400c564    0x68    ld a5,288(s0)
    0x8400c568    0x6c    srli a5,a5,0x1
    0x8400c56a    0x6e    andi a5,a5,1
    0x8400c56c    0x70    bnez a5,ffffffff8400c582 <chooseThread+0x86>
    0x8400c56e    0x72    ld ra,24(sp)          ; stack access
    0x8400c570    0x74    auipc a5,0x15
    0x8400c574    0x78    sd s0,744(a5) # ffffffff84021858 <ksCurThread>
    0x8400c578    0x7c    ld s0,16(sp)          ; stack access
    0x8400c57a    0x7e    ld s1,8(sp)           ; stack access
    0x8400c57c    0x80    ld s2,0(sp)           ; stack access
    0x8400c57e    0x82    addi sp,sp,32
    0x8400c580    0x84    ret
    0x8400c582    0x86    mv a0,s0
    0x8400c584    0x88    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x8400c588    0x8c    j ffffffff8400c56e <chooseThread+0x72>
    0x8400c58a    0x8e    auipc s0,0x15
    0x8400c58e    0x92    addi s0,s0,710 # ffffffff84021850 <ksIdleThread>
    0x8400c592    0x96    ld a0,0(s0)
    0x8400c594    0x98    jal ra,ffffffff84003c98 <setVMRoot>
    0x8400c598    0x9c    ld a5,0(s0)
    0x8400c59a    0x9e    ld ra,24(sp)          ; stack access
    0x8400c59c    0xa0    ld s0,16(sp)          ; stack access
    0x8400c59e    0xa2    auipc a4,0x15
    0x8400c5a2    0xa6    sd a5,698(a4) # ffffffff84021858 <ksCurThread>
    0x8400c5a6    0xaa    ld s1,8(sp)           ; stack access
    0x8400c5a8    0xac    ld s2,0(sp)           ; stack access
    0x8400c5aa    0xae    addi sp,sp,32
    0x8400c5ac    0xb0    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 96 nodes.

Section invokeUntyped_Retype (239 of 296)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 113 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x8400ba68      0x0    addi sp,sp,-112
    0x8400ba6a      0x2    sd s10,16(sp)         ; stack access
    0x8400ba6c      0x4    ld s10,0(a0)
    0x8400ba70      0x8    sd s0,96(sp)          ; stack access
    0x8400ba72      0xa    li t3,-1
    0x8400ba74      0xc    mv s0,a0
    0x8400ba76      0xe    srli a0,s10,0x26
    0x8400ba7a     0x12    sd s1,88(sp)          ; stack access
    0x8400ba7c     0x14    sd s2,80(sp)          ; stack access
    0x8400ba7e     0x16    sd s3,72(sp)          ; stack access
    0x8400ba80     0x18    sd s4,64(sp)          ; stack access
    0x8400ba82     0x1a    sd s5,56(sp)          ; stack access
    0x8400ba84     0x1c    sd s8,32(sp)          ; stack access
    0x8400ba86     0x1e    sd s9,24(sp)          ; stack access
    0x8400ba88     0x20    srli s1,t3,0x19
    0x8400ba8c     0x24    sd ra,104(sp)         ; stack access
    0x8400ba8e     0x26    sd s6,48(sp)          ; stack access
    0x8400ba90     0x28    sd s7,40(sp)          ; stack access
    0x8400ba92     0x2a    sd s11,8(sp)          ; stack access
    0x8400ba94     0x2c    andi a0,a0,1
    0x8400ba96     0x2e    mv s8,a2
    0x8400ba98     0x30    mv s4,a3
    0x8400ba9a     0x32    mv s9,a4
    0x8400ba9c     0x34    mv s2,a5
    0x8400ba9e     0x36    mv s3,a6
    0x8400baa0     0x38    mv s5,a7
    0x8400baa2     0x3a    and s1,s10,s1
    0x8400baa6     0x3e    beqz a0,ffffffff8400bb0e <invokeUntyped_Retype+0xa6>
    0x8400baa8     0x40    slli t3,t3,0x27
    0x8400baaa     0x42    or s1,s1,t3
    0x8400baae     0x46    bnez a1,ffffffff8400bb10 <invokeUntyped_Retype+0xa8>
    0x8400bab0     0x48    mv a1,s9
    0x8400bab2     0x4a    mv a0,s4
    0x8400bab4     0x4c    jal ra,ffffffff84005cfc <getObjectSize>
    0x8400bab8     0x50    ld t3,8(s0)
    0x8400babc     0x54    sll t1,s5,a0
    0x8400bac0     0x58    sub s1,s8,s1
    0x8400bac4     0x5c    add t1,t1,s1
    0x8400bac6     0x5e    srli t1,t1,0x4
    0x8400baca     0x62    slli t3,t3,0x27
    0x8400bacc     0x64    srli t3,t3,0x27
    0x8400bad0     0x68    ld a7,112(sp)         ; stack access
    0x8400bad2     0x6a    slli t1,t1,0x19
    0x8400bad4     0x6c    or t1,t1,t3
    0x8400bad8     0x70    mv a0,s4
    0x8400bada     0x72    sd t1,8(s0)
    0x8400bade     0x76    mv a6,s9
    0x8400bae0     0x78    mv a5,s8
    0x8400bae2     0x7a    mv a4,s5
    0x8400bae4     0x7c    mv a3,s3
    0x8400bae6     0x7e    mv a2,s2
    0x8400bae8     0x80    mv a1,s0
    0x8400baea     0x82    jal ra,ffffffff84006e34 <createNewObjects>
    0x8400baee     0x86    li a0,0
    0x8400baf0     0x88    ld ra,104(sp)         ; stack access
    0x8400baf2     0x8a    ld s0,96(sp)          ; stack access
    0x8400baf4     0x8c    ld s1,88(sp)          ; stack access
    0x8400baf6     0x8e    ld s2,80(sp)          ; stack access
    0x8400baf8     0x90    ld s3,72(sp)          ; stack access
    0x8400bafa     0x92    ld s4,64(sp)          ; stack access
    0x8400bafc     0x94    ld s5,56(sp)          ; stack access
    0x8400bafe     0x96    ld s6,48(sp)          ; stack access
    0x8400bb00     0x98    ld s7,40(sp)          ; stack access
    0x8400bb02     0x9a    ld s8,32(sp)          ; stack access
    0x8400bb04     0x9c    ld s9,24(sp)          ; stack access
    0x8400bb06     0x9e    ld s10,16(sp)         ; stack access
    0x8400bb08     0xa0    ld s11,8(sp)          ; stack access
    0x8400bb0a     0xa2    addi sp,sp,112
    0x8400bb0c     0xa4    ret
    0x8400bb0e     0xa6    beqz a1,ffffffff8400bab0 <invokeUntyped_Retype+0x48>
    0x8400bb10     0xa8    ld a4,8(s0)
    0x8400bb12     0xaa    srli a3,a4,0x19
    0x8400bb16     0xae    andi a2,a4,63
    0x8400bb1a     0xb2    slli a5,a3,0x4
    0x8400bb1e     0xb6    beqz a3,ffffffff8400bab0 <invokeUntyped_Retype+0x48>
    0x8400bb20     0xb8    srli a3,a4,0x6
    0x8400bb24     0xbc    slli s6,a4,0x27
    0x8400bb28     0xc0    andi a3,a3,1
    0x8400bb2a     0xc2    srli s6,s6,0x27
    0x8400bb2e     0xc6    bnez a3,ffffffff8400bb8e <invokeUntyped_Retype+0x126>
    0x8400bb30     0xc8    andi a4,a4,56
    0x8400bb34     0xcc    beqz a4,ffffffff8400bb7a <invokeUntyped_Retype+0x112>
    0x8400bb36     0xce    addi a5,a5,-1
    0x8400bb38     0xd0    andi s11,a5,-256
    0x8400bb3c     0xd4    addi a4,s1,256
    0x8400bb40     0xd8    add s7,a4,s11
    0x8400bb44     0xdc    mv t3,s7
    0x8400bb46     0xde    addi s7,s7,-256
    0x8400bb4a     0xe2    mv t1,s7
    0x8400bb4c     0xe4    sd zero,0(t1)
    0x8400bb50     0xe8    addi t1,t1,8
    0x8400bb52     0xea    bne t1,t3,ffffffff8400bb4c <invokeUntyped_Retype+0xe4>
    0x8400bb56     0xee    srli a5,s11,0x4
    0x8400bb5a     0xf2    slli a5,a5,0x19
    0x8400bb5c     0xf4    or a5,a5,s6
    0x8400bb60     0xf8    sd s10,0(s0)
    0x8400bb64     0xfc    sd a5,8(s0)
    0x8400bb66     0xfe    jal ra,ffffffff84009244 <preemptionPoint>
    0x8400bb6a    0x102    bnez a0,ffffffff8400baf0 <invokeUntyped_Retype+0x88>
    0x8400bb6c    0x104    addi s11,s11,-256
    0x8400bb70    0x108    li a5,-256
    0x8400bb74    0x10c    bne s11,a5,ffffffff8400bb44 <invokeUntyped_Retype+0xdc>
    0x8400bb78    0x110    j ffffffff8400bab0 <invokeUntyped_Retype+0x48>
    0x8400bb7a    0x112    li a4,1
    0x8400bb7c    0x114    sll a4,a4,a2
    0x8400bb80    0x118    mv a5,s1
    0x8400bb82    0x11a    add a4,a4,s1
    0x8400bb84    0x11c    sd zero,0(a5)
    0x8400bb88    0x120    addi a5,a5,8
    0x8400bb8a    0x122    bne a5,a4,ffffffff8400bb84 <invokeUntyped_Retype+0x11c>
    0x8400bb8e    0x126    sd s10,0(s0)
    0x8400bb92    0x12a    sd s6,8(s0)
    0x8400bb96    0x12e    j ffffffff8400bab0 <invokeUntyped_Retype+0x48>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
113 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 174 nodes.

Section invokeTCB_ReadRegisters (240 of 296)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 137 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x8400b356      0x0    addi sp,sp,-48
    0x8400b358      0x2    sd s0,32(sp)          ; stack access
    0x8400b35a      0x4    sd s1,24(sp)          ; stack access
    0x8400b35c      0x6    sd s2,16(sp)          ; stack access
    0x8400b35e      0x8    sd s3,8(sp)           ; stack access
    0x8400b360      0xa    sd s4,0(sp)           ; stack access
    0x8400b362      0xc    auipc s2,0x16
    0x8400b366     0x10    addi s2,s2,1270 # ffffffff84021858 <ksCurThread>
    0x8400b36a     0x14    sd ra,40(sp)          ; stack access
    0x8400b36c     0x16    ld s3,0(s2)
    0x8400b370     0x1a    mv s4,a0
    0x8400b372     0x1c    mv s0,a2
    0x8400b374     0x1e    mv s1,a4
    0x8400b376     0x20    bnez a1,ffffffff8400b482 <invokeTCB_ReadRegisters+0x12c>
    0x8400b37a     0x24    mv s2,s3
    0x8400b37c     0x26    beqz a4,ffffffff8400b458 <invokeTCB_ReadRegisters+0x102>
    0x8400b37e     0x28    mv a1,s3
    0x8400b380     0x2a    li a0,1
    0x8400b382     0x2c    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x8400b386     0x30    sd zero,72(s3)
    0x8400b38a     0x34    beqz s0,ffffffff8400b49c <invokeTCB_ReadRegisters+0x146>
    0x8400b38e     0x38    ld a4,264(s4)
    0x8400b392     0x3c    li a5,1
    0x8400b394     0x3e    sd a4,88(s3)
    0x8400b398     0x42    beq s0,a5,ffffffff8400b4c0 <invokeTCB_ReadRegisters+0x16a>
    0x8400b39c     0x46    ld a4,0(s4)
    0x8400b3a0     0x4a    li a5,2
    0x8400b3a2     0x4c    sd a4,96(s3)
    0x8400b3a6     0x50    beq s0,a5,ffffffff8400b4c6 <invokeTCB_ReadRegisters+0x170>
    0x8400b3aa     0x54    ld a4,8(s4)
    0x8400b3ae     0x58    li a5,3
    0x8400b3b0     0x5a    sd a4,104(s3)
    0x8400b3b4     0x5e    beq s0,a5,ffffffff8400b4cc <invokeTCB_ReadRegisters+0x176>
    0x8400b3b8     0x62    ld a4,16(s4)
    0x8400b3bc     0x66    li a5,4
    0x8400b3be     0x68    sd a4,112(s3)
    0x8400b3c2     0x6c    li a4,4
    0x8400b3c4     0x6e    beq s0,a5,ffffffff8400b49e <invokeTCB_ReadRegisters+0x148>
    0x8400b3c8     0x72    beqz a0,ffffffff8400b440 <invokeTCB_ReadRegisters+0xea>
    0x8400b3ca     0x74    li a5,7
    0x8400b3cc     0x76    slli a5,a5,0x3
    0x8400b3ce     0x78    add a5,a5,s4
    0x8400b3d0     0x7a    ld a5,0(a5)
    0x8400b3d2     0x7c    addi a3,a0,40
    0x8400b3d6     0x80    addi a4,a4,1
    0x8400b3d8     0x82    sd a5,0(a3)
    0x8400b3da     0x84    addi a3,a3,8
    0x8400b3dc     0x86    auipc a2,0x3
    0x8400b3e0     0x8a    addi a2,a2,-1383 # ffffffff8400de75 <frameRegisters+0x5>
    0x8400b3e4     0x8e    li a1,16
    0x8400b3e6     0x90    beq a4,s0,ffffffff8400b406 <invokeTCB_ReadRegisters+0xb0>
    0x8400b3ea     0x94    beq a4,a1,ffffffff8400b406 <invokeTCB_ReadRegisters+0xb0>
    0x8400b3ee     0x98    lbu a5,0(a2)
    0x8400b3f2     0x9c    addi a3,a3,8
    0x8400b3f4     0x9e    addi a4,a4,1
    0x8400b3f6     0xa0    slli a5,a5,0x3
    0x8400b3f8     0xa2    add a5,a5,s4
    0x8400b3fa     0xa4    ld a5,0(a5)
    0x8400b3fc     0xa6    addi a2,a2,1
    0x8400b3fe     0xa8    sd a5,-8(a3)
    0x8400b402     0xac    bne a4,s0,ffffffff8400b3ea <invokeTCB_ReadRegisters+0x94>
    0x8400b406     0xb0    li a5,16
    0x8400b408     0xb2    bgeu a5,s0,ffffffff8400b440 <invokeTCB_ReadRegisters+0xea>
    0x8400b40c     0xb6    addi a3,a0,136
    0x8400b410     0xba    auipc a7,0x3
    0x8400b414     0xbe    addi a7,a7,-1423 # ffffffff8400de81 <gpRegisters+0x1>
    0x8400b418     0xc2    addi s0,s0,-16
    0x8400b41a     0xc4    li a5,9
    0x8400b41c     0xc6    li a6,0
    0x8400b41e     0xc8    li a1,16
    0x8400b420     0xca    j ffffffff8400b42c <invokeTCB_ReadRegisters+0xd6>
    0x8400b422     0xcc    beq a6,s0,ffffffff8400b4a2 <invokeTCB_ReadRegisters+0x14c>
    0x8400b426     0xd0    lbu a5,0(a7)
    0x8400b42a     0xd4    addi a7,a7,1
    0x8400b42c     0xd6    slli a5,a5,0x3
    0x8400b42e     0xd8    add a5,a5,s4
    0x8400b430     0xda    ld a5,0(a5)
    0x8400b432     0xdc    addi a6,a6,1
    0x8400b434     0xde    addi a3,a3,8
    0x8400b436     0xe0    sd a5,-8(a3)
    0x8400b43a     0xe4    bne a6,a1,ffffffff8400b422 <invokeTCB_ReadRegisters+0xcc>
    0x8400b43e     0xe8    addi a4,a4,16
    0x8400b440     0xea    sd a4,80(s3)
    0x8400b444     0xee    ld a5,280(s3)
    0x8400b448     0xf2    andi a5,a5,-16
    0x8400b44a     0xf4    ori a5,a5,1
    0x8400b44e     0xf8    sd a5,280(s3)
    0x8400b452     0xfc    bne s3,s2,ffffffff8400b470 <invokeTCB_ReadRegisters+0x11a>
    0x8400b456    0x100    j ffffffff8400b466 <invokeTCB_ReadRegisters+0x110>
    0x8400b458    0x102    ld a5,280(s3)
    0x8400b45c    0x106    andi a5,a5,-16
    0x8400b45e    0x108    ori a5,a5,1
    0x8400b462    0x10c    sd a5,280(s3)
    0x8400b466    0x110    auipc a5,0x16
    0x8400b46a    0x114    ld a5,994(a5) # ffffffff84021848 <ksSchedulerAction>
    0x8400b46e    0x118    beqz a5,ffffffff8400b4a6 <invokeTCB_ReadRegisters+0x150>
    0x8400b470    0x11a    ld ra,40(sp)          ; stack access
    0x8400b472    0x11c    ld s0,32(sp)          ; stack access
    0x8400b474    0x11e    ld s1,24(sp)          ; stack access
    0x8400b476    0x120    ld s2,16(sp)          ; stack access
    0x8400b478    0x122    ld s3,8(sp)           ; stack access
    0x8400b47a    0x124    ld s4,0(sp)           ; stack access
    0x8400b47c    0x126    li a0,0
    0x8400b47e    0x128    addi sp,sp,48
    0x8400b480    0x12a    ret
    0x8400b482    0x12c    jal ra,ffffffff840070f4 <suspend>
    0x8400b486    0x130    ld s2,0(s2)
    0x8400b48a    0x134    beqz s1,ffffffff8400b444 <invokeTCB_ReadRegisters+0xee>
    0x8400b48c    0x136    mv a1,s3
    0x8400b48e    0x138    li a0,1
    0x8400b490    0x13a    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x8400b494    0x13e    sd zero,72(s3)
    0x8400b498    0x142    bnez s0,ffffffff8400b38e <invokeTCB_ReadRegisters+0x38>
    0x8400b49c    0x146    li a4,0
    0x8400b49e    0x148    bnez a0,ffffffff8400b406 <invokeTCB_ReadRegisters+0xb0>
    0x8400b4a0    0x14a    j ffffffff8400b440 <invokeTCB_ReadRegisters+0xea>
    0x8400b4a2    0x14c    add a4,a4,a6
    0x8400b4a4    0x14e    j ffffffff8400b440 <invokeTCB_ReadRegisters+0xea>
    0x8400b4a6    0x150    ld a5,368(s3)
    0x8400b4aa    0x154    beqz a5,ffffffff8400b4b0 <invokeTCB_ReadRegisters+0x15a>
    0x8400b4ac    0x156    ld a5,64(a5)
    0x8400b4ae    0x158    bnez a5,ffffffff8400b4b6 <invokeTCB_ReadRegisters+0x160>
    0x8400b4b0    0x15a    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400b4b4    0x15e    j ffffffff8400b470 <invokeTCB_ReadRegisters+0x11a>
    0x8400b4b6    0x160    ld a5,288(s3)
    0x8400b4ba    0x164    andi a5,a5,1
    0x8400b4bc    0x166    beqz a5,ffffffff8400b470 <invokeTCB_ReadRegisters+0x11a>
    0x8400b4be    0x168    j ffffffff8400b4b0 <invokeTCB_ReadRegisters+0x15a>
    0x8400b4c0    0x16a    li a4,1
    0x8400b4c2    0x16c    bnez a0,ffffffff8400b406 <invokeTCB_ReadRegisters+0xb0>
    0x8400b4c4    0x16e    j ffffffff8400b440 <invokeTCB_ReadRegisters+0xea>
    0x8400b4c6    0x170    li a4,2
    0x8400b4c8    0x172    bnez a0,ffffffff8400b406 <invokeTCB_ReadRegisters+0xb0>
    0x8400b4ca    0x174    j ffffffff8400b440 <invokeTCB_ReadRegisters+0xea>
    0x8400b4cc    0x176    li a4,3
    0x8400b4ce    0x178    bnez a0,ffffffff8400b406 <invokeTCB_ReadRegisters+0xb0>
    0x8400b4d0    0x17a    j ffffffff8400b440 <invokeTCB_ReadRegisters+0xea>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
137 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 233 nodes.

Section invokeTCB_CopyRegisters (241 of 296)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 73 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x8400b1b2     0x0    addi sp,sp,-48
    0x8400b1b4     0x2    sd s0,32(sp)          ; stack access
    0x8400b1b6     0x4    sd s1,24(sp)          ; stack access
    0x8400b1b8     0x6    sd s2,16(sp)          ; stack access
    0x8400b1ba     0x8    sd s3,8(sp)           ; stack access
    0x8400b1bc     0xa    sd s4,0(sp)           ; stack access
    0x8400b1be     0xc    sd ra,40(sp)          ; stack access
    0x8400b1c0     0xe    mv s0,a0
    0x8400b1c2    0x10    mv s1,a1
    0x8400b1c4    0x12    mv s4,a3
    0x8400b1c6    0x14    mv s3,a4
    0x8400b1c8    0x16    mv s2,a5
    0x8400b1ca    0x18    bnez a2,ffffffff8400b26c <invokeTCB_CopyRegisters+0xba>
    0x8400b1cc    0x1a    bnez s4,ffffffff8400b254 <invokeTCB_CopyRegisters+0xa2>
    0x8400b1d0    0x1e    beqz s3,ffffffff8400b208 <invokeTCB_CopyRegisters+0x56>
    0x8400b1d4    0x22    auipc a3,0x3
    0x8400b1d8    0x26    addi a3,a3,-867 # ffffffff8400de71 <frameRegisters+0x1>
    0x8400b1dc    0x2a    auipc a1,0x3
    0x8400b1e0    0x2e    addi a1,a1,-860 # ffffffff8400de80 <gpRegisters>
    0x8400b1e4    0x32    li a4,33
    0x8400b1e8    0x36    j ffffffff8400b1f0 <invokeTCB_CopyRegisters+0x3e>
    0x8400b1ea    0x38    lbu a4,0(a3)
    0x8400b1ee    0x3c    addi a3,a3,1
    0x8400b1f0    0x3e    slli a4,a4,0x3
    0x8400b1f2    0x40    add a2,s1,a4
    0x8400b1f6    0x44    ld a2,0(a2)
    0x8400b1f8    0x46    add a4,a4,s0
    0x8400b1fa    0x48    sd a2,0(a4)
    0x8400b1fc    0x4a    bne a3,a1,ffffffff8400b1ea <invokeTCB_CopyRegisters+0x38>
    0x8400b200    0x4e    ld a5,264(s0)
    0x8400b204    0x52    sd a5,272(s0)
    0x8400b208    0x56    beqz s2,ffffffff8400b236 <invokeTCB_CopyRegisters+0x84>
    0x8400b20c    0x5a    auipc a4,0x3
    0x8400b210    0x5e    addi a4,a4,-907 # ffffffff8400de81 <gpRegisters+0x1>
    0x8400b214    0x62    auipc a2,0x3
    0x8400b218    0x66    addi a2,a2,-900 # ffffffff8400de90 <gpRegisters+0x10>
    0x8400b21c    0x6a    li a5,9
    0x8400b21e    0x6c    j ffffffff8400b226 <invokeTCB_CopyRegisters+0x74>
    0x8400b220    0x6e    lbu a5,0(a4)
    0x8400b224    0x72    addi a4,a4,1
    0x8400b226    0x74    slli a5,a5,0x3
    0x8400b228    0x76    add a3,s1,a5
    0x8400b22c    0x7a    ld a3,0(a3)
    0x8400b22e    0x7c    add a5,a5,s0
    0x8400b230    0x7e    sd a3,0(a5)
    0x8400b232    0x80    bne a2,a4,ffffffff8400b220 <invokeTCB_CopyRegisters+0x6e>
    0x8400b236    0x84    auipc a5,0x16
    0x8400b23a    0x88    ld a5,1570(a5) # ffffffff84021858 <ksCurThread>
    0x8400b23e    0x8c    beq a5,s0,ffffffff8400b278 <invokeTCB_CopyRegisters+0xc6>
    0x8400b242    0x90    ld ra,40(sp)          ; stack access
    0x8400b244    0x92    ld s0,32(sp)          ; stack access
    0x8400b246    0x94    ld s1,24(sp)          ; stack access
    0x8400b248    0x96    ld s2,16(sp)          ; stack access
    0x8400b24a    0x98    ld s3,8(sp)           ; stack access
    0x8400b24c    0x9a    ld s4,0(sp)           ; stack access
    0x8400b24e    0x9c    li a0,0
    0x8400b250    0x9e    addi sp,sp,48
    0x8400b252    0xa0    ret
    0x8400b254    0xa2    ld a5,280(s0)
    0x8400b258    0xa6    andi a5,a5,15
    0x8400b25a    0xa8    beqz a5,ffffffff8400b264 <invokeTCB_CopyRegisters+0xb2>
    0x8400b25c    0xaa    addi a5,a5,-3
    0x8400b25e    0xac    li a4,3
    0x8400b260    0xae    bltu a4,a5,ffffffff8400b1d0 <invokeTCB_CopyRegisters+0x1e>
    0x8400b264    0xb2    mv a0,s0
    0x8400b266    0xb4    jal ra,ffffffff84007cf2 <restart.part.0>
    0x8400b26a    0xb8    j ffffffff8400b1d0 <invokeTCB_CopyRegisters+0x1e>
    0x8400b26c    0xba    mv a0,a1
    0x8400b26e    0xbc    jal ra,ffffffff840070f4 <suspend>
    0x8400b272    0xc0    beqz s4,ffffffff8400b1d0 <invokeTCB_CopyRegisters+0x1e>
    0x8400b276    0xc4    j ffffffff8400b254 <invokeTCB_CopyRegisters+0xa2>
    0x8400b278    0xc6    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400b27c    0xca    j ffffffff8400b242 <invokeTCB_CopyRegisters+0x90>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 119 nodes.

Section decodeSetSchedParams (242 of 296)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 151 instructions.


Stack analysis
---------------

25 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x8400b00a      0x0    addi sp,sp,-128
    0x8400b00c      0x2    sd a0,16(sp)          ; stack access
    0x8400b00e      0x4    sd ra,120(sp)         ; stack access
    0x8400b010      0x6    sd s0,112(sp)         ; stack access
    0x8400b012      0x8    sd s1,104(sp)         ; stack access
    0x8400b014      0xa    sd s2,96(sp)          ; stack access
    0x8400b016      0xc    sd s3,88(sp)          ; stack access
    0x8400b018      0xe    sd s4,80(sp)          ; stack access
    0x8400b01a     0x10    sd s5,72(sp)          ; stack access
    0x8400b01c     0x12    sd s6,64(sp)          ; stack access
    0x8400b01e     0x14    sd s7,56(sp)          ; stack access
    0x8400b020     0x16    sd a1,24(sp)          ; stack access
    0x8400b022     0x18    li a0,1
    0x8400b024     0x1a    bgeu a0,a2,ffffffff8400b116 <decodeSetSchedParams+0x10c>
    0x8400b028     0x1e    auipc a5,0x5
    0x8400b02c     0x22    addi a5,a5,-40 # ffffffff84010000 <intStateIRQNode>
    0x8400b030     0x26    ld a2,-1536(a5)
    0x8400b034     0x2a    beqz a2,ffffffff8400b116 <decodeSetSchedParams+0x10c>
    0x8400b036     0x2c    ld a4,-1528(a5)
    0x8400b03a     0x30    beqz a4,ffffffff8400b116 <decodeSetSchedParams+0x10c>
    0x8400b03c     0x32    ld s0,-1520(a5)
    0x8400b040     0x36    beqz s0,ffffffff8400b116 <decodeSetSchedParams+0x10c>
    0x8400b042     0x38    ld a1,0(s0)
    0x8400b044     0x3a    ld a2,0(a2)
    0x8400b046     0x3c    ld a5,8(s0)
    0x8400b048     0x3e    auipc s4,0x17
    0x8400b04c     0x42    addi s4,s4,-2032 # ffffffff84021858 <ksCurThread>
    0x8400b050     0x46    mv s1,a3
    0x8400b052     0x48    ld a3,0(s4)
    0x8400b056     0x4c    sd a1,32(sp)          ; stack access
    0x8400b058     0x4e    sd a5,40(sp)          ; stack access
    0x8400b05a     0x50    srli t1,a2,0x3b
    0x8400b05e     0x54    li a7,12
    0x8400b060     0x56    ld s5,88(a3)
    0x8400b064     0x5a    ld s6,96(a3)
    0x8400b068     0x5e    ld a1,0(a4)
    0x8400b06a     0x60    ld a6,8(a4)
    0x8400b06e     0x64    bne t1,a7,ffffffff8400b0ec <decodeSetSchedParams+0xe2>
    0x8400b072     0x68    li a4,-1
    0x8400b074     0x6a    slli a0,a0,0x26
    0x8400b076     0x6c    srli a5,a4,0x19
    0x8400b07a     0x70    and a0,a0,a2
    0x8400b07c     0x72    and a2,a2,a5
    0x8400b07e     0x74    beqz a0,ffffffff8400b084 <decodeSetSchedParams+0x7a>
    0x8400b080     0x76    slli a4,a4,0x27
    0x8400b082     0x78    or a2,a2,a4
    0x8400b084     0x7a    ld a4,352(a2)
    0x8400b088     0x7e    bltu a4,s5,ffffffff8400b17c <decodeSetSchedParams+0x172>
    0x8400b08c     0x82    bltu a4,s6,ffffffff8400b17c <decodeSetSchedParams+0x172>
    0x8400b090     0x86    ld s2,16(sp)          ; stack access
    0x8400b092     0x88    li a4,-1
    0x8400b094     0x8a    srli a2,a4,0x19
    0x8400b098     0x8e    srli a5,s2,0x26
    0x8400b09c     0x92    andi a5,a5,1
    0x8400b09e     0x94    and s2,s2,a2
    0x8400b0a2     0x98    beqz a5,ffffffff8400b0aa <decodeSetSchedParams+0xa0>
    0x8400b0a4     0x9a    slli a4,a4,0x27
    0x8400b0a6     0x9c    or s2,s2,a4
    0x8400b0aa     0xa0    srli a1,a1,0x3b
    0x8400b0ac     0xa2    beqz a1,ffffffff8400b13a <decodeSetSchedParams+0x130>
    0x8400b0ae     0xa4    li a5,22
    0x8400b0b0     0xa6    bne a1,a5,ffffffff8400b124 <decodeSetSchedParams+0x11a>
    0x8400b0b4     0xaa    srli a7,a6,0x10
    0x8400b0b8     0xae    srli a4,a7,0x26
    0x8400b0bc     0xb2    li a5,-1
    0x8400b0be     0xb4    srli a3,a5,0x19
    0x8400b0c2     0xb8    andi a4,a4,1
    0x8400b0c4     0xba    and a7,a7,a3
    0x8400b0c8     0xbe    beqz a4,ffffffff8400b0d0 <decodeSetSchedParams+0xc6>
    0x8400b0ca     0xc0    slli a5,a5,0x27
    0x8400b0cc     0xc2    or a7,a7,a5
    0x8400b0d0     0xc6    ld a5,368(s2)
    0x8400b0d4     0xca    bnez a5,ffffffff8400b0de <decodeSetSchedParams+0xd4>
    0x8400b0d6     0xcc    ld a5,24(a7)
    0x8400b0da     0xd0    mv s3,a7
    0x8400b0dc     0xd2    beqz a5,ffffffff8400b140 <decodeSetSchedParams+0x136>
    0x8400b0de     0xd4    li a5,3
    0x8400b0e0     0xd6    auipc a4,0x4
    0x8400b0e4     0xda    sd a5,1504(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b0e8     0xde    li a0,3
    0x8400b0ea     0xe0    j ffffffff8400b100 <decodeSetSchedParams+0xf6>
    0x8400b0ec     0xe2    auipc a5,0x4
    0x8400b0f0     0xe6    addi a5,a5,-236 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400b0f4     0xea    li a4,2
    0x8400b0f6     0xec    sd a0,1688(a5)
    0x8400b0fa     0xf0    sd a4,1728(a5)
    0x8400b0fe     0xf4    li a0,3
    0x8400b100     0xf6    ld ra,120(sp)         ; stack access
    0x8400b102     0xf8    ld s0,112(sp)         ; stack access
    0x8400b104     0xfa    ld s1,104(sp)         ; stack access
    0x8400b106     0xfc    ld s2,96(sp)          ; stack access
    0x8400b108     0xfe    ld s3,88(sp)          ; stack access
    0x8400b10a    0x100    ld s4,80(sp)          ; stack access
    0x8400b10c    0x102    ld s5,72(sp)          ; stack access
    0x8400b10e    0x104    ld s6,64(sp)          ; stack access
    0x8400b110    0x106    ld s7,56(sp)          ; stack access
    0x8400b112    0x108    addi sp,sp,128
    0x8400b114    0x10a    ret
    0x8400b116    0x10c    li a5,7
    0x8400b118    0x10e    auipc a4,0x4
    0x8400b11c    0x112    sd a5,1448(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b120    0x116    li a0,3
    0x8400b122    0x118    j ffffffff8400b100 <decodeSetSchedParams+0xf6>
    0x8400b124    0x11a    auipc a5,0x4
    0x8400b128    0x11e    addi a5,a5,-292 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400b12c    0x122    li a4,2
    0x8400b12e    0x124    sd a4,1728(a5)
    0x8400b132    0x128    sd a4,1688(a5)
    0x8400b136    0x12c    li a0,3
    0x8400b138    0x12e    j ffffffff8400b100 <decodeSetSchedParams+0xf6>
    0x8400b13a    0x130    beq a3,s2,ffffffff8400b0de <decodeSetSchedParams+0xd4>
    0x8400b13e    0x134    li s3,0
    0x8400b140    0x136    ld s7,0(s0)
    0x8400b144    0x13a    mv a0,s7
    0x8400b146    0x13c    jal ra,ffffffff840032dc <validFaultHandler.isra.0>
    0x8400b14a    0x140    beqz a0,ffffffff8400b19a <decodeSetSchedParams+0x190>
    0x8400b14c    0x142    ld a0,0(s4)
    0x8400b150    0x146    ld a5,280(a0)
    0x8400b154    0x14a    andi a5,a5,-16
    0x8400b156    0x14c    ori a5,a5,2
    0x8400b15a    0x150    sd a5,280(a0)
    0x8400b15e    0x154    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400b162    0x158    ld a3,40(sp)          ; stack access
    0x8400b164    0x15a    li a5,15
    0x8400b166    0x15c    sd a5,0(sp)           ; stack access
    0x8400b168    0x15e    mv a7,s3
    0x8400b16a    0x160    mv a6,s6
    0x8400b16c    0x162    mv a5,s5
    0x8400b16e    0x164    mv a4,s0
    0x8400b170    0x166    mv a2,s7
    0x8400b172    0x168    mv a1,s1
    0x8400b174    0x16a    mv a0,s2
    0x8400b176    0x16c    jal ra,ffffffff8400af12 <invokeTCB_ThreadControlSched>
    0x8400b17a    0x170    j ffffffff8400b100 <decodeSetSchedParams+0xf6>
    0x8400b17c    0x172    auipc a5,0x4
    0x8400b180    0x176    addi a5,a5,-380 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400b184    0x17a    li a3,4
    0x8400b186    0x17c    sd a3,1728(a5)
    0x8400b18a    0x180    sd a4,1704(a5)
    0x8400b18e    0x184    auipc a3,0x4
    0x8400b192    0x188    sd zero,1298(a3) # ffffffff8400f6a0 <current_syscall_error+0x10>
    0x8400b196    0x18c    li a0,3
    0x8400b198    0x18e    j ffffffff8400b100 <decodeSetSchedParams+0xf6>
    0x8400b19a    0x190    auipc a5,0x4
    0x8400b19e    0x194    addi a5,a5,-410 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400b1a2    0x198    li a4,2
    0x8400b1a4    0x19a    sd a4,1728(a5)
    0x8400b1a8    0x19e    li a4,3
    0x8400b1aa    0x1a0    sd a4,1688(a5)
    0x8400b1ae    0x1a4    li a0,3
    0x8400b1b0    0x1a6    j ffffffff8400b100 <decodeSetSchedParams+0xf6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
151 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 241 nodes.

Section decodeDomainInvocation (243 of 296)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 123 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x8400a58e      0x0    li a5,29
    0x8400a590      0x2    bne a0,a5,ffffffff8400a692 <decodeDomainInvocation+0x104>
    0x8400a594      0x6    beqz a1,ffffffff8400a6d0 <decodeDomainInvocation+0x142>
    0x8400a598      0xa    addi sp,sp,-48
    0x8400a59a      0xc    sd s1,24(sp)          ; stack access
    0x8400a59c      0xe    auipc s1,0x17
    0x8400a5a0     0x12    addi s1,s1,700 # ffffffff84021858 <ksCurThread>
    0x8400a5a4     0x16    ld a4,0(s1)
    0x8400a5a6     0x18    sd s2,16(sp)          ; stack access
    0x8400a5a8     0x1a    sd ra,40(sp)          ; stack access
    0x8400a5aa     0x1c    ld s2,88(a4)
    0x8400a5ae     0x20    sd s0,32(sp)          ; stack access
    0x8400a5b0     0x22    li a5,15
    0x8400a5b2     0x24    bltu a5,s2,ffffffff8400a65a <decodeDomainInvocation+0xcc>
    0x8400a5b6     0x28    auipc a5,0x5
    0x8400a5ba     0x2c    ld a5,1098(a5) # ffffffff8400fa00 <current_extra_caps>
    0x8400a5be     0x30    beqz a5,ffffffff8400a67a <decodeDomainInvocation+0xec>
    0x8400a5c0     0x32    ld s0,0(a5)
    0x8400a5c2     0x34    li a5,12
    0x8400a5c4     0x36    srli a3,s0,0x3b
    0x8400a5c8     0x3a    bne a3,a5,ffffffff8400a6a0 <decodeDomainInvocation+0x112>
    0x8400a5cc     0x3e    ld a5,280(a4)
    0x8400a5d0     0x42    auipc a3,0x17
    0x8400a5d4     0x46    ld a3,632(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400a5d8     0x4a    andi a5,a5,-16
    0x8400a5da     0x4c    ori a5,a5,2
    0x8400a5de     0x50    sd a5,280(a4)
    0x8400a5e2     0x54    beqz a3,ffffffff8400a6b6 <decodeDomainInvocation+0x128>
    0x8400a5e4     0x56    srli a4,s0,0x26
    0x8400a5e8     0x5a    li a5,-1
    0x8400a5ea     0x5c    srli a0,a5,0x19
    0x8400a5ee     0x60    andi a4,a4,1
    0x8400a5f0     0x62    and s0,s0,a0
    0x8400a5f2     0x64    beqz a4,ffffffff8400a5f8 <decodeDomainInvocation+0x6a>
    0x8400a5f4     0x66    slli a5,a5,0x27
    0x8400a5f6     0x68    or s0,s0,a5
    0x8400a5f8     0x6a    ld a5,288(s0)
    0x8400a5fc     0x6e    srli a5,a5,0x1
    0x8400a5fe     0x70    andi a5,a5,1
    0x8400a600     0x72    beqz a5,ffffffff8400a608 <decodeDomainInvocation+0x7a>
    0x8400a602     0x74    mv a0,s0
    0x8400a604     0x76    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x8400a608     0x7a    ld a5,280(s0)
    0x8400a60c     0x7e    sd s2,344(s0)
    0x8400a610     0x82    li a4,1
    0x8400a612     0x84    andi a5,a5,15
    0x8400a614     0x86    addi a5,a5,-1
    0x8400a616     0x88    bgeu a4,a5,ffffffff8400a62e <decodeDomainInvocation+0xa0>
    0x8400a61a     0x8c    ld a5,0(s1)
    0x8400a61c     0x8e    li a0,0
    0x8400a61e     0x90    beq a5,s0,ffffffff8400a650 <decodeDomainInvocation+0xc2>
    0x8400a622     0x94    ld ra,40(sp)          ; stack access
    0x8400a624     0x96    ld s0,32(sp)          ; stack access
    0x8400a626     0x98    ld s1,24(sp)          ; stack access
    0x8400a628     0x9a    ld s2,16(sp)          ; stack access
    0x8400a62a     0x9c    addi sp,sp,48
    0x8400a62c     0x9e    ret
    0x8400a62e     0xa0    ld a5,368(s0)
    0x8400a632     0xa4    beqz a5,ffffffff8400a61a <decodeDomainInvocation+0x8c>
    0x8400a634     0xa6    ld a5,64(a5)
    0x8400a636     0xa8    beqz a5,ffffffff8400a61a <decodeDomainInvocation+0x8c>
    0x8400a638     0xaa    ld a5,288(s0)
    0x8400a63c     0xae    andi a4,a5,1
    0x8400a640     0xb2    bnez a4,ffffffff8400a61a <decodeDomainInvocation+0x8c>
    0x8400a642     0xb4    srli a5,a5,0x1
    0x8400a644     0xb6    andi a5,a5,1
    0x8400a646     0xb8    bnez a5,ffffffff8400a61a <decodeDomainInvocation+0x8c>
    0x8400a648     0xba    mv a0,s0
    0x8400a64a     0xbc    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x8400a64e     0xc0    j ffffffff8400a61a <decodeDomainInvocation+0x8c>
    0x8400a650     0xc2    sd a0,8(sp)           ; stack access
    0x8400a652     0xc4    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400a656     0xc8    ld a0,8(sp)           ; stack access
    0x8400a658     0xca    j ffffffff8400a622 <decodeDomainInvocation+0x94>
    0x8400a65a     0xcc    ld ra,40(sp)          ; stack access
    0x8400a65c     0xce    ld s0,32(sp)          ; stack access
    0x8400a65e     0xd0    li a5,1
    0x8400a660     0xd2    auipc a4,0x5
    0x8400a664     0xd6    sd a5,96(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a668     0xda    auipc a5,0x5
    0x8400a66c     0xde    sd zero,40(a5) # ffffffff8400f690 <current_syscall_error>
    0x8400a670     0xe2    ld s1,24(sp)          ; stack access
    0x8400a672     0xe4    ld s2,16(sp)          ; stack access
    0x8400a674     0xe6    li a0,3
    0x8400a676     0xe8    addi sp,sp,48
    0x8400a678     0xea    ret
    0x8400a67a     0xec    ld ra,40(sp)          ; stack access
    0x8400a67c     0xee    ld s0,32(sp)          ; stack access
    0x8400a67e     0xf0    li a5,7
    0x8400a680     0xf2    auipc a4,0x5
    0x8400a684     0xf6    sd a5,64(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a688     0xfa    ld s1,24(sp)          ; stack access
    0x8400a68a     0xfc    ld s2,16(sp)          ; stack access
    0x8400a68c     0xfe    li a0,3
    0x8400a68e    0x100    addi sp,sp,48
    0x8400a690    0x102    ret
    0x8400a692    0x104    li a5,3
    0x8400a694    0x106    auipc a4,0x5
    0x8400a698    0x10a    sd a5,44(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a69c    0x10e    li a0,3
    0x8400a69e    0x110    ret
    0x8400a6a0    0x112    auipc a5,0x5
    0x8400a6a4    0x116    addi a5,a5,-1696 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400a6a8    0x11a    li a4,1
    0x8400a6aa    0x11c    sd a4,1728(a5)
    0x8400a6ae    0x120    sd a4,1680(a5)
    0x8400a6b2    0x124    li a0,3
    0x8400a6b4    0x126    j ffffffff8400a622 <decodeDomainInvocation+0x94>
    0x8400a6b6    0x128    ld a5,368(a4)
    0x8400a6ba    0x12c    beqz a5,ffffffff8400a6c0 <decodeDomainInvocation+0x132>
    0x8400a6bc    0x12e    ld a5,64(a5)
    0x8400a6be    0x130    bnez a5,ffffffff8400a6c6 <decodeDomainInvocation+0x138>
    0x8400a6c0    0x132    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400a6c4    0x136    j ffffffff8400a5e4 <decodeDomainInvocation+0x56>
    0x8400a6c6    0x138    ld a5,288(a4)
    0x8400a6ca    0x13c    andi a5,a5,1
    0x8400a6cc    0x13e    beqz a5,ffffffff8400a5e4 <decodeDomainInvocation+0x56>
    0x8400a6ce    0x140    j ffffffff8400a6c0 <decodeDomainInvocation+0x132>
    0x8400a6d0    0x142    li a5,7
    0x8400a6d2    0x144    auipc a4,0x5
    0x8400a6d6    0x148    sd a5,-18(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a6da    0x14c    li a0,3
    0x8400a6dc    0x14e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
123 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 208 nodes.

Section chargeBudget (244 of 296)
=================================

Deriving specifications
-----------------------

Section `chargeBudget` consists of 68 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `chargeBudget`:

    0x840090cc     0x0    addi sp,sp,-48
    0x840090ce     0x2    sd s2,16(sp)          ; stack access
    0x840090d0     0x4    auipc s2,0x18
    0x840090d4     0x8    addi s2,s2,1880 # ffffffff84021828 <ksCurSC>
    0x840090d8     0xc    ld a5,0(s2)
    0x840090dc    0x10    sd s0,32(sp)          ; stack access
    0x840090de    0x12    sd s1,24(sp)          ; stack access
    0x840090e0    0x14    ld a4,0(a5)
    0x840090e2    0x16    sd s3,8(sp)           ; stack access
    0x840090e4    0x18    sd ra,40(sp)          ; stack access
    0x840090e6    0x1a    mv s1,a0
    0x840090e8    0x1c    mv s3,a1
    0x840090ea    0x1e    mv s0,a3
    0x840090ec    0x20    bnez a4,ffffffff84009172 <chargeBudget+0xa6>
    0x840090ee    0x22    ld a4,80(a5)
    0x840090f0    0x24    ld a6,72(a5)
    0x840090f4    0x28    addi a2,a5,88
    0x840090f8    0x2c    slli a4,a4,0x4
    0x840090fa    0x2e    slli a6,a6,0x4
    0x840090fc    0x30    add a4,a4,a2
    0x840090fe    0x32    add a2,a2,a6
    0x84009100    0x34    ld a3,8(a2)
    0x84009102    0x36    ld a1,8(a4)
    0x84009104    0x38    add a3,a3,a1
    0x84009106    0x3a    sd a3,8(a2)
    0x84009108    0x3c    sd zero,8(a4)
    0x8400910c    0x40    ld a4,8(a5)
    0x8400910e    0x42    auipc a3,0x18
    0x84009112    0x46    sd zero,1842(a3) # ffffffff84021840 <ksConsumed>
    0x84009116    0x4a    add a4,a4,s1
    0x84009118    0x4c    sd a4,8(a5)
    0x8400911a    0x4e    beqz s0,ffffffff84009132 <chargeBudget+0x66>
    0x8400911c    0x50    auipc a4,0x18
    0x84009120    0x54    ld a4,1852(a4) # ffffffff84021858 <ksCurThread>
    0x84009124    0x58    ld a5,280(a4)
    0x84009128    0x5c    li s0,1
    0x8400912a    0x5e    andi a5,a5,15
    0x8400912c    0x60    addi a5,a5,-1
    0x8400912e    0x62    bgeu s0,a5,ffffffff84009140 <chargeBudget+0x74>
    0x84009132    0x66    ld ra,40(sp)          ; stack access
    0x84009134    0x68    ld s0,32(sp)          ; stack access
    0x84009136    0x6a    ld s1,24(sp)          ; stack access
    0x84009138    0x6c    ld s2,16(sp)          ; stack access
    0x8400913a    0x6e    ld s3,8(sp)           ; stack access
    0x8400913c    0x70    addi sp,sp,48
    0x8400913e    0x72    ret
    0x84009140    0x74    ld a5,368(a4)
    0x84009144    0x78    beqz a5,ffffffff84009132 <chargeBudget+0x66>
    0x84009146    0x7a    ld a5,64(a5)
    0x84009148    0x7c    beqz a5,ffffffff84009132 <chargeBudget+0x66>
    0x8400914a    0x7e    ld a5,288(a4)
    0x8400914e    0x82    andi a5,a5,1
    0x84009150    0x84    bnez a5,ffffffff84009132 <chargeBudget+0x66>
    0x84009152    0x86    mv a0,s3
    0x84009154    0x88    jal ra,ffffffff84009022 <endTimeslice>
    0x84009158    0x8c    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400915c    0x90    ld ra,40(sp)          ; stack access
    0x8400915e    0x92    auipc a5,0x18
    0x84009162    0x96    sd s0,1754(a5) # ffffffff84021838 <ksReprogram>
    0x84009166    0x9a    ld s0,32(sp)          ; stack access
    0x84009168    0x9c    ld s1,24(sp)          ; stack access
    0x8400916a    0x9e    ld s2,16(sp)          ; stack access
    0x8400916c    0xa0    ld s3,8(sp)           ; stack access
    0x8400916e    0xa2    addi sp,sp,48
    0x84009170    0xa4    ret
    0x84009172    0xa6    jal ra,ffffffff84004982 <refill_budget_check>
    0x84009176    0xaa    ld a5,0(s2)
    0x8400917a    0xae    j ffffffff8400910c <chargeBudget+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chargeBudget` has 118 nodes.

Section doIPCTransfer (245 of 296)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 60 instructions.


Stack analysis
---------------

21 stack accesses found. Annotated code for `doIPCTransfer`:

    0x84008cc4     0x0    addi sp,sp,-64
    0x84008cc6     0x2    sd s0,48(sp)          ; stack access
    0x84008cc8     0x4    sd s4,16(sp)          ; stack access
    0x84008cca     0x6    mv s0,a0
    0x84008ccc     0x8    mv s4,a1
    0x84008cce     0xa    li a0,1
    0x84008cd0     0xc    mv a1,a4
    0x84008cd2     0xe    sd s1,40(sp)          ; stack access
    0x84008cd4    0x10    sd s2,32(sp)          ; stack access
    0x84008cd6    0x12    sd s3,24(sp)          ; stack access
    0x84008cd8    0x14    sd s5,8(sp)           ; stack access
    0x84008cda    0x16    sd ra,56(sp)          ; stack access
    0x84008cdc    0x18    mv s1,a4
    0x84008cde    0x1a    mv s2,a2
    0x84008ce0    0x1c    mv s5,a3
    0x84008ce2    0x1e    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x84008ce6    0x22    ld a5,312(s0)
    0x84008cea    0x26    mv s3,a0
    0x84008cec    0x28    andi a5,a5,15
    0x84008cee    0x2a    bnez a5,ffffffff84008d18 <doIPCTransfer+0x54>
    0x84008cf0    0x2c    mv a1,s0
    0x84008cf2    0x2e    li a0,0
    0x84008cf4    0x30    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x84008cf8    0x34    mv a1,a0
    0x84008cfa    0x36    mv a0,s0
    0x84008cfc    0x38    ld s0,48(sp)          ; stack access
    0x84008cfe    0x3a    ld ra,56(sp)          ; stack access
    0x84008d00    0x3c    mv a6,s3
    0x84008d02    0x3e    mv a5,s1
    0x84008d04    0x40    ld s3,24(sp)          ; stack access
    0x84008d06    0x42    ld s1,40(sp)          ; stack access
    0x84008d08    0x44    mv a4,s5
    0x84008d0a    0x46    mv a3,s2
    0x84008d0c    0x48    ld s5,8(sp)           ; stack access
    0x84008d0e    0x4a    ld s2,32(sp)          ; stack access
    0x84008d10    0x4c    mv a2,s4
    0x84008d12    0x4e    ld s4,16(sp)          ; stack access
    0x84008d14    0x50    addi sp,sp,64
    0x84008d16    0x52    j ffffffff84008b56 <doNormalTransfer>
    0x84008d18    0x54    mv a2,a0
    0x84008d1a    0x56    mv a1,s1
    0x84008d1c    0x58    mv a0,s0
    0x84008d1e    0x5a    jal ra,ffffffff8400371a <setMRs_fault>
    0x84008d22    0x5e    ld a5,312(s0)
    0x84008d26    0x62    lui a4,0xf
    0x84008d28    0x64    ld ra,56(sp)          ; stack access
    0x84008d2a    0x66    slli a5,a5,0xc
    0x84008d2c    0x68    ld s0,48(sp)          ; stack access
    0x84008d2e    0x6a    andi a0,a0,127
    0x84008d32    0x6e    and a5,a5,a4
    0x84008d34    0x70    or a5,a5,a0
    0x84008d36    0x72    sd s2,72(s1)
    0x84008d3a    0x76    sd a5,80(s1)
    0x84008d3c    0x78    ld s2,32(sp)          ; stack access
    0x84008d3e    0x7a    ld s1,40(sp)          ; stack access
    0x84008d40    0x7c    ld s3,24(sp)          ; stack access
    0x84008d42    0x7e    ld s4,16(sp)          ; stack access
    0x84008d44    0x80    ld s5,8(sp)           ; stack access
    0x84008d46    0x82    addi sp,sp,64
    0x84008d48    0x84    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 92 nodes.

Section schedContext_bindTCB (246 of 296)
=========================================

Deriving specifications
-----------------------

Section `schedContext_bindTCB` consists of 45 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `schedContext_bindTCB`:

    0x84008616     0x0    ld a4,280(a1)
    0x8400861a     0x4    addi sp,sp,-32
    0x8400861c     0x6    sd s0,16(sp)          ; stack access
    0x8400861e     0x8    sd s1,8(sp)           ; stack access
    0x84008620     0xa    sd ra,24(sp)          ; stack access
    0x84008622     0xc    sd a0,368(a1)
    0x84008626    0x10    andi a4,a4,15
    0x84008628    0x12    sd a1,24(a0)
    0x8400862a    0x14    addi a4,a4,-1
    0x8400862c    0x16    li s1,1
    0x8400862e    0x18    mv s0,a1
    0x84008630    0x1a    mv a5,a0
    0x84008632    0x1c    bgeu s1,a4,ffffffff84008640 <schedContext_bindTCB+0x2a>
    0x84008636    0x20    ld ra,24(sp)          ; stack access
    0x84008638    0x22    ld s0,16(sp)          ; stack access
    0x8400863a    0x24    ld s1,8(sp)           ; stack access
    0x8400863c    0x26    addi sp,sp,32
    0x8400863e    0x28    ret
    0x84008640    0x2a    ld a4,64(a0)
    0x84008642    0x2c    beqz a4,ffffffff84008662 <schedContext_bindTCB+0x4c>
    0x84008644    0x2e    ld a4,288(a1)
    0x84008648    0x32    andi a4,a4,1
    0x8400864a    0x34    bnez a4,ffffffff84008662 <schedContext_bindTCB+0x4c>
    0x8400864c    0x36    jal ra,ffffffff84007c78 <schedContext_resume.part.0>
    0x84008650    0x3a    ld a5,280(s0)
    0x84008654    0x3e    andi a5,a5,15
    0x84008656    0x40    addi a5,a5,-1
    0x84008658    0x42    bltu s1,a5,ffffffff84008636 <schedContext_bindTCB+0x20>
    0x8400865c    0x46    ld a5,368(s0)
    0x84008660    0x4a    beqz a5,ffffffff84008636 <schedContext_bindTCB+0x20>
    0x84008662    0x4c    ld a5,64(a5)
    0x84008664    0x4e    beqz a5,ffffffff84008636 <schedContext_bindTCB+0x20>
    0x84008666    0x50    ld a5,288(s0)
    0x8400866a    0x54    andi a4,a5,1
    0x8400866e    0x58    bnez a4,ffffffff84008636 <schedContext_bindTCB+0x20>
    0x84008670    0x5a    srli a5,a5,0x1
    0x84008672    0x5c    andi a5,a5,1
    0x84008674    0x5e    bnez a5,ffffffff8400867c <schedContext_bindTCB+0x66>
    0x84008676    0x60    mv a0,s0
    0x84008678    0x62    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x8400867c    0x66    ld s0,16(sp)          ; stack access
    0x8400867e    0x68    ld ra,24(sp)          ; stack access
    0x84008680    0x6a    ld s1,8(sp)           ; stack access
    0x84008682    0x6c    addi sp,sp,32
    0x84008684    0x6e    j ffffffff84004c1c <rescheduleRequired>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_bindTCB` has 83 nodes.

Section decodeIRQHandlerInvocation (247 of 296)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 116 instructions.


Stack analysis
---------------

26 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x8400794c      0x0    addi sp,sp,-80
    0x8400794e      0x2    sd s0,64(sp)          ; stack access
    0x84007950      0x4    sd ra,72(sp)          ; stack access
    0x84007952      0x6    sd s1,56(sp)          ; stack access
    0x84007954      0x8    sd s2,48(sp)          ; stack access
    0x84007956      0xa    sd s3,40(sp)          ; stack access
    0x84007958      0xc    li a5,27
    0x8400795a      0xe    mv s0,a1
    0x8400795c     0x10    beq a0,a5,ffffffff84007986 <decodeIRQHandlerInvocation+0x3a>
    0x84007960     0x14    li a5,28
    0x84007962     0x16    beq a0,a5,ffffffff84007a20 <decodeIRQHandlerInvocation+0xd4>
    0x84007966     0x1a    li a5,26
    0x84007968     0x1c    beq a0,a5,ffffffff840079ec <decodeIRQHandlerInvocation+0xa0>
    0x8400796c     0x20    li a5,3
    0x8400796e     0x22    auipc a4,0x8
    0x84007972     0x26    sd a5,-686(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84007976     0x2a    li a0,3
    0x84007978     0x2c    ld ra,72(sp)          ; stack access
    0x8400797a     0x2e    ld s0,64(sp)          ; stack access
    0x8400797c     0x30    ld s1,56(sp)          ; stack access
    0x8400797e     0x32    ld s2,48(sp)          ; stack access
    0x84007980     0x34    ld s3,40(sp)          ; stack access
    0x84007982     0x36    addi sp,sp,80
    0x84007984     0x38    ret
    0x84007986     0x3a    auipc s1,0x8
    0x8400798a     0x3e    ld s1,122(s1) # ffffffff8400fa00 <current_extra_caps>
    0x8400798e     0x42    beqz s1,ffffffff84007a86 <decodeIRQHandlerInvocation+0x13a>
    0x84007992     0x46    ld s2,0(s1)
    0x84007996     0x4a    li a5,6
    0x84007998     0x4c    srli a4,s2,0x3b
    0x8400799c     0x50    bne a4,a5,ffffffff84007a58 <decodeIRQHandlerInvocation+0x10c>
    0x840079a0     0x54    srli a5,s2,0x39
    0x840079a4     0x58    andi a5,a5,1
    0x840079a6     0x5a    beqz a5,ffffffff84007a58 <decodeIRQHandlerInvocation+0x10c>
    0x840079a8     0x5c    auipc a0,0x1a
    0x840079ac     0x60    ld a0,-336(a0) # ffffffff84021858 <ksCurThread>
    0x840079b0     0x64    ld a5,280(a0)
    0x840079b4     0x68    ld s3,8(s1)
    0x840079b8     0x6c    andi a5,a5,-16
    0x840079ba     0x6e    ori a5,a5,2
    0x840079be     0x72    sd a5,280(a0)
    0x840079c2     0x76    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840079c6     0x7a    slli a1,s0,0x5
    0x840079ca     0x7e    auipc a3,0x8
    0x840079ce     0x82    addi a3,a3,1590 # ffffffff84010000 <intStateIRQNode>
    0x840079d2     0x86    add a3,a3,a1
    0x840079d4     0x88    ld a5,0(a3)
    0x840079d6     0x8a    sd s2,16(sp)          ; stack access
    0x840079d8     0x8c    sd s3,24(sp)          ; stack access
    0x840079da     0x8e    srli a5,a5,0x3b
    0x840079dc     0x90    bnez a5,ffffffff84007a7a <decodeIRQHandlerInvocation+0x12e>
    0x840079de     0x92    ld a0,16(sp)          ; stack access
    0x840079e0     0x94    ld a1,24(sp)          ; stack access
    0x840079e2     0x96    mv a2,s1
    0x840079e4     0x98    jal ra,ffffffff84004ec2 <cteInsert>
    0x840079e8     0x9c    li a0,0
    0x840079ea     0x9e    j ffffffff84007978 <decodeIRQHandlerInvocation+0x2c>
    0x840079ec     0xa0    auipc a0,0x1a
    0x840079f0     0xa4    ld a0,-404(a0) # ffffffff84021858 <ksCurThread>
    0x840079f4     0xa8    ld a5,280(a0)
    0x840079f8     0xac    andi a5,a5,-16
    0x840079fa     0xae    ori a5,a5,2
    0x840079fe     0xb2    sd a5,280(a0)
    0x84007a02     0xb6    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84007a06     0xba    ld ra,72(sp)          ; stack access
    0x84007a08     0xbc    sext.w a1,s0
    0x84007a0c     0xc0    ld s0,64(sp)          ; stack access
    0x84007a0e     0xc2    lui a5,0xc0202
    0x84007a12     0xc6    sw a1,4(a5)
    0x84007a14     0xc8    ld s1,56(sp)          ; stack access
    0x84007a16     0xca    ld s2,48(sp)          ; stack access
    0x84007a18     0xcc    ld s3,40(sp)          ; stack access
    0x84007a1a     0xce    li a0,0
    0x84007a1c     0xd0    addi sp,sp,80
    0x84007a1e     0xd2    ret
    0x84007a20     0xd4    auipc a0,0x1a
    0x84007a24     0xd8    ld a0,-456(a0) # ffffffff84021858 <ksCurThread>
    0x84007a28     0xdc    ld a5,280(a0)
    0x84007a2c     0xe0    andi a5,a5,-16
    0x84007a2e     0xe2    ori a5,a5,2
    0x84007a32     0xe6    sd a5,280(a0)
    0x84007a36     0xea    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84007a3a     0xee    slli a1,s0,0x5
    0x84007a3e     0xf2    auipc s0,0x8
    0x84007a42     0xf6    addi s0,s0,1474 # ffffffff84010000 <intStateIRQNode>
    0x84007a46     0xfa    add a1,a1,s0
    0x84007a48     0xfc    ld a0,0(a1)
    0x84007a4a     0xfe    srli a0,a0,0x3b
    0x84007a4c    0x100    beqz a0,ffffffff84007978 <decodeIRQHandlerInvocation+0x2c>
    0x84007a4e    0x102    mv a0,a1
    0x84007a50    0x104    jal ra,ffffffff840078a2 <cteDeleteOne.part.0>
    0x84007a54    0x108    li a0,0
    0x84007a56    0x10a    j ffffffff84007978 <decodeIRQHandlerInvocation+0x2c>
    0x84007a58    0x10c    ld ra,72(sp)          ; stack access
    0x84007a5a    0x10e    ld s0,64(sp)          ; stack access
    0x84007a5c    0x110    li a5,2
    0x84007a5e    0x112    auipc a4,0x8
    0x84007a62    0x116    sd a5,-926(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84007a66    0x11a    auipc a5,0x8
    0x84007a6a    0x11e    sd zero,-974(a5) # ffffffff8400f698 <current_syscall_error+0x8>
    0x84007a6e    0x122    ld s1,56(sp)          ; stack access
    0x84007a70    0x124    ld s2,48(sp)          ; stack access
    0x84007a72    0x126    ld s3,40(sp)          ; stack access
    0x84007a74    0x128    li a0,3
    0x84007a76    0x12a    addi sp,sp,80
    0x84007a78    0x12c    ret
    0x84007a7a    0x12e    mv a0,a3
    0x84007a7c    0x130    sd a3,8(sp)           ; stack access
    0x84007a7e    0x132    jal ra,ffffffff840078a2 <cteDeleteOne.part.0>
    0x84007a82    0x136    ld a3,8(sp)           ; stack access
    0x84007a84    0x138    j ffffffff840079de <decodeIRQHandlerInvocation+0x92>
    0x84007a86    0x13a    li a5,7
    0x84007a88    0x13c    auipc a4,0x8
    0x84007a8c    0x140    sd a5,-968(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84007a90    0x144    li a0,3
    0x84007a92    0x146    j ffffffff84007978 <decodeIRQHandlerInvocation+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
116 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 186 nodes.

Section cteDeleteOne_part_0 (248 of 296)
========================================

Deriving specifications
-----------------------

Section `cteDeleteOne_part_0` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteDeleteOne_part_0`:

    0x840078a2     0x0    addi sp,sp,-64
    0x840078a4     0x2    sd ra,56(sp)          ; stack access
    0x840078a6     0x4    sd s0,48(sp)          ; stack access
    0x840078a8     0x6    mv s0,a0
    0x840078aa     0x8    jal ra,ffffffff8400621a <isFinalCapability>
    0x840078ae     0xc    ld a1,0(s0)
    0x840078b0     0xe    ld a2,8(s0)
    0x840078b2    0x10    mv a3,a0
    0x840078b4    0x12    li a4,1
    0x840078b6    0x14    addi a0,sp,16
    0x840078b8    0x16    jal ra,ffffffff840075ec <finaliseCap>
    0x840078bc    0x1a    mv a0,s0
    0x840078be    0x1c    ld s0,48(sp)          ; stack access
    0x840078c0    0x1e    ld ra,56(sp)          ; stack access
    0x840078c2    0x20    li a1,0
    0x840078c4    0x22    li a2,0
    0x840078c6    0x24    addi sp,sp,64
    0x840078c8    0x26    j ffffffff8400340c <emptySlot>

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne_part_0` has 27 nodes.

Section activateThread (249 of 296)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 44 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `activateThread`:

    0x8400756e     0x0    addi sp,sp,-16
    0x84007570     0x2    sd s0,0(sp)           ; stack access
    0x84007572     0x4    auipc s0,0x1a
    0x84007576     0x8    addi s0,s0,742 # ffffffff84021858 <ksCurThread>
    0x8400757a     0xc    ld a0,0(s0)
    0x8400757c     0xe    sd ra,8(sp)           ; stack access
    0x8400757e    0x10    ld a5,376(a0)
    0x84007582    0x14    bnez a5,ffffffff840075c6 <activateThread+0x58>
    0x84007584    0x16    ld a5,280(a0)
    0x84007588    0x1a    li a3,2
    0x8400758a    0x1c    andi a4,a5,15
    0x8400758e    0x20    beq a4,a3,ffffffff840075a2 <activateThread+0x34>
    0x84007592    0x24    li a5,7
    0x84007594    0x26    beq a4,a5,ffffffff840075be <activateThread+0x50>
    0x84007598    0x2a    li a5,1
    0x8400759a    0x2c    beq a4,a5,ffffffff840075be <activateThread+0x50>
    0x8400759e    0x30    jal ra,ffffffff840036cc <halt>
    0x840075a2    0x34    ld a4,264(a0)
    0x840075a6    0x38    andi a5,a5,-16
    0x840075a8    0x3a    ori a5,a5,1
    0x840075ac    0x3e    sd a5,280(a0)
    0x840075b0    0x42    sd a4,272(a0)
    0x840075b4    0x46    auipc a5,0x1a
    0x840075b8    0x4a    ld a5,660(a5) # ffffffff84021848 <ksSchedulerAction>
    0x840075bc    0x4e    beqz a5,ffffffff840075ce <activateThread+0x60>
    0x840075be    0x50    ld ra,8(sp)           ; stack access
    0x840075c0    0x52    ld s0,0(sp)           ; stack access
    0x840075c2    0x54    addi sp,sp,16
    0x840075c4    0x56    ret
    0x840075c6    0x58    jal ra,ffffffff84007548 <schedContext_completeYieldTo>
    0x840075ca    0x5c    ld a0,0(s0)
    0x840075cc    0x5e    j ffffffff84007584 <activateThread+0x16>
    0x840075ce    0x60    ld a5,368(a0)
    0x840075d2    0x64    beqz a5,ffffffff840075d8 <activateThread+0x6a>
    0x840075d4    0x66    ld a5,64(a5)
    0x840075d6    0x68    bnez a5,ffffffff840075e2 <activateThread+0x74>
    0x840075d8    0x6a    ld s0,0(sp)           ; stack access
    0x840075da    0x6c    ld ra,8(sp)           ; stack access
    0x840075dc    0x6e    addi sp,sp,16
    0x840075de    0x70    j ffffffff84004c1c <rescheduleRequired>
    0x840075e2    0x74    ld a5,288(a0)
    0x840075e6    0x78    andi a5,a5,1
    0x840075e8    0x7a    beqz a5,ffffffff840075be <activateThread+0x50>
    0x840075ea    0x7c    j ffffffff840075d8 <activateThread+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 81 nodes.

Section suspend (250 of 296)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 54 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x840070f4     0x0    addi sp,sp,-16
    0x840070f6     0x2    sd s0,0(sp)           ; stack access
    0x840070f8     0x4    sd ra,8(sp)           ; stack access
    0x840070fa     0x6    mv s0,a0
    0x840070fc     0x8    jal ra,ffffffff84006fc0 <cancelIPC>
    0x84007100     0xc    ld a5,280(s0)
    0x84007104    0x10    li a4,1
    0x84007106    0x12    andi a3,a5,15
    0x8400710a    0x16    bne a3,a4,ffffffff84007116 <suspend+0x22>
    0x8400710e    0x1a    ld a4,272(s0)
    0x84007112    0x1e    sd a4,264(s0)
    0x84007116    0x22    andi a5,a5,-16
    0x84007118    0x24    sd a5,280(s0)
    0x8400711c    0x28    auipc a5,0x1a
    0x84007120    0x2c    ld a5,1852(a5) # ffffffff84021858 <ksCurThread>
    0x84007124    0x30    beq s0,a5,ffffffff8400717c <suspend+0x88>
    0x84007128    0x34    ld a5,288(s0)
    0x8400712c    0x38    srli a4,a5,0x1
    0x84007130    0x3c    andi a4,a4,1
    0x84007132    0x3e    beqz a4,ffffffff8400713e <suspend+0x4a>
    0x84007134    0x40    mv a0,s0
    0x84007136    0x42    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x8400713a    0x46    ld a5,288(s0)
    0x8400713e    0x4a    andi a4,a5,1
    0x84007142    0x4e    beqz a4,ffffffff84007166 <suspend+0x72>
    0x84007144    0x50    ld a3,400(s0)
    0x84007148    0x54    ld a4,392(s0)
    0x8400714c    0x58    beqz a3,ffffffff8400718c <suspend+0x98>
    0x8400714e    0x5a    sd a4,392(a3) # ffffffffe0000188 <ki_end+0x5bfd9188>
    0x84007152    0x5e    beqz a4,ffffffff84007158 <suspend+0x64>
    0x84007154    0x60    sd a3,400(a4) # ffffffffe0000190 <ki_end+0x5bfd9190>
    0x84007158    0x64    andi a5,a5,-2
    0x8400715a    0x66    sd zero,392(s0)
    0x8400715e    0x6a    sd zero,400(s0)
    0x84007162    0x6e    sd a5,288(s0)
    0x84007166    0x72    ld a5,376(s0)
    0x8400716a    0x76    beqz a5,ffffffff84007174 <suspend+0x80>
    0x8400716c    0x78    sd zero,56(a5)
    0x84007170    0x7c    sd zero,376(s0)
    0x84007174    0x80    ld ra,8(sp)           ; stack access
    0x84007176    0x82    ld s0,0(sp)           ; stack access
    0x84007178    0x84    addi sp,sp,16
    0x8400717a    0x86    ret
    0x8400717c    0x88    auipc a5,0x1a
    0x84007180    0x8c    ld a5,1740(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84007184    0x90    bnez a5,ffffffff84007128 <suspend+0x34>
    0x84007186    0x92    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400718a    0x96    j ffffffff84007128 <suspend+0x34>
    0x8400718c    0x98    auipc a2,0x1a
    0x84007190    0x9c    sd a4,1748(a2) # ffffffff84021860 <ksReleaseHead>
    0x84007194    0xa0    li a2,1
    0x84007196    0xa2    auipc a1,0x1a
    0x8400719a    0xa6    sd a2,1698(a1) # ffffffff84021838 <ksReprogram>
    0x8400719e    0xaa    j ffffffff84007152 <suspend+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 98 nodes.

Section cancelIPC (251 of 296)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 118 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `cancelIPC`:

    0x84006fc0      0x0    ld a1,280(a0)
    0x84006fc4      0x4    sd zero,312(a0)
    0x84006fc8      0x8    sd zero,320(a0)
    0x84006fcc      0xc    andi a5,a1,15
    0x84006fd0     0x10    li a4,5
    0x84006fd2     0x12    beq a5,a4,ffffffff840070d0 <cancelIPC+0x110>
    0x84006fd6     0x16    addi sp,sp,-16
    0x84006fd8     0x18    sd s0,0(sp)           ; stack access
    0x84006fda     0x1a    sd ra,8(sp)           ; stack access
    0x84006fdc     0x1c    mv s0,a0
    0x84006fde     0x1e    bltu a4,a5,ffffffff840070a0 <cancelIPC+0xe0>
    0x84006fe2     0x22    addi a5,a5,-3
    0x84006fe4     0x24    li a4,1
    0x84006fe6     0x26    bltu a4,a5,ffffffff840070c8 <cancelIPC+0x108>
    0x84006fea     0x2a    slli a4,a4,0x26
    0x84006fec     0x2c    lui a5,0xe0000
    0x84006ff0     0x30    srli a5,a5,0x19
    0x84006ff2     0x32    and a4,a4,a1
    0x84006ff4     0x34    and a5,a5,a1
    0x84006ff6     0x36    beqz a4,ffffffff84006ffe <cancelIPC+0x3e>
    0x84006ff8     0x38    li a4,-1
    0x84006ffa     0x3a    slli a4,a4,0x27
    0x84006ffc     0x3c    or a5,a5,a4
    0x84006ffe     0x3e    ld a3,0(a5)
    0x84007000     0x40    lui a4,0xf8000
    0x84007004     0x44    srli a4,a4,0x19
    0x84007006     0x46    srli a2,a3,0x26
    0x8400700a     0x4a    andi a2,a2,1
    0x8400700c     0x4c    and a4,a4,a3
    0x8400700e     0x4e    beqz a2,ffffffff84007016 <cancelIPC+0x56>
    0x84007010     0x50    li a2,-1
    0x84007012     0x52    slli a2,a2,0x27
    0x84007014     0x54    or a4,a4,a2
    0x84007016     0x56    ld a0,416(s0)
    0x8400701a     0x5a    ld a2,408(s0)
    0x8400701e     0x5e    beqz a0,ffffffff840070d2 <cancelIPC+0x112>
    0x84007020     0x60    ld a6,8(a5) # ffffffffe0000008 <ki_end+0x5bfd9008>
    0x84007024     0x64    sd a2,408(a0)
    0x84007028     0x68    ld a2,408(s0)
    0x8400702c     0x6c    mv a7,a6
    0x8400702e     0x6e    beqz a2,ffffffff840070f0 <cancelIPC+0x130>
    0x84007030     0x70    sd a0,416(a2) # ffffffffe00001a0 <ki_end+0x5bfd91a0>
    0x84007034     0x74    li a2,-1
    0x84007036     0x76    slli a2,a2,0x27
    0x84007038     0x78    addi a2,a2,3
    0x8400703a     0x7a    and a3,a3,a2
    0x8400703c     0x7c    lui a2,0xf8000
    0x84007040     0x80    srli a2,a2,0x19
    0x84007042     0x82    and a4,a4,a2
    0x84007044     0x84    sd a6,8(a5)
    0x84007048     0x88    or a4,a4,a3
    0x8400704a     0x8a    beqz a7,ffffffff840070ec <cancelIPC+0x12c>
    0x8400704e     0x8e    ld a2,288(s0)
    0x84007052     0x92    sd a4,0(a5)
    0x84007054     0x94    lui a3,0xe0000
    0x84007058     0x98    srli a5,a2,0x1
    0x8400705c     0x9c    srli a4,a5,0x26
    0x84007060     0xa0    srli a3,a3,0x19
    0x84007062     0xa2    andi a4,a4,1
    0x84007064     0xa4    and a5,a5,a3
    0x84007066     0xa6    beqz a4,ffffffff840070d8 <cancelIPC+0x118>
    0x84007068     0xa8    li a4,-1
    0x8400706a     0xaa    slli a4,a4,0x27
    0x8400706c     0xac    or a5,a5,a4
    0x8400706e     0xae    li a4,-1
    0x84007070     0xb0    slli a4,a4,0x28
    0x84007072     0xb2    addi a4,a4,31
    0x84007074     0xb4    and a2,a2,a4
    0x84007076     0xb6    sd a2,288(s0)
    0x8400707a     0xba    andi a1,a1,-16
    0x8400707c     0xbc    sd zero,0(a5)
    0x84007080     0xc0    sd a1,280(s0)
    0x84007084     0xc4    mv a0,s0
    0x84007086     0xc6    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400708a     0xca    ld a1,280(s0)
    0x8400708e     0xce    mv a0,s0
    0x84007090     0xd0    ld ra,8(sp)           ; stack access
    0x84007092     0xd2    andi a1,a1,-16
    0x84007094     0xd4    sd a1,280(s0)
    0x84007098     0xd8    ld s0,0(sp)           ; stack access
    0x8400709a     0xda    addi sp,sp,16
    0x8400709c     0xdc    j ffffffff84004c6a <scheduleTCB>
    0x840070a0     0xe0    li a4,6
    0x840070a2     0xe2    bne a5,a4,ffffffff840070c8 <cancelIPC+0x108>
    0x840070a6     0xe6    srli a5,a1,0x26
    0x840070aa     0xea    lui a4,0xe0000
    0x840070ae     0xee    srli a4,a4,0x19
    0x840070b0     0xf0    andi a5,a5,1
    0x840070b2     0xf2    and a1,a1,a4
    0x840070b4     0xf4    beqz a5,ffffffff840070bc <cancelIPC+0xfc>
    0x840070b6     0xf6    li a5,-1
    0x840070b8     0xf8    slli a5,a5,0x27
    0x840070ba     0xfa    or a1,a1,a5
    0x840070bc     0xfc    mv a0,s0
    0x840070be     0xfe    ld s0,0(sp)           ; stack access
    0x840070c0    0x100    ld ra,8(sp)           ; stack access
    0x840070c2    0x102    addi sp,sp,16
    0x840070c4    0x104    j ffffffff84005a96 <cancelSignal>
    0x840070c8    0x108    ld ra,8(sp)           ; stack access
    0x840070ca    0x10a    ld s0,0(sp)           ; stack access
    0x840070cc    0x10c    addi sp,sp,16
    0x840070ce    0x10e    ret
    0x840070d0    0x110    j ffffffff84006f08 <reply_remove_tcb>
    0x840070d2    0x112    mv a6,a2
    0x840070d4    0x114    mv a7,a2
    0x840070d6    0x116    j ffffffff8400702e <cancelIPC+0x6e>
    0x840070d8    0x118    bnez a5,ffffffff8400706e <cancelIPC+0xae>
    0x840070da    0x11a    andi a1,a1,-16
    0x840070dc    0x11c    sd a1,280(s0)
    0x840070e0    0x120    mv a0,s0
    0x840070e2    0x122    ld s0,0(sp)           ; stack access
    0x840070e4    0x124    ld ra,8(sp)           ; stack access
    0x840070e6    0x126    addi sp,sp,16
    0x840070e8    0x128    j ffffffff84004c6a <scheduleTCB>
    0x840070ec    0x12c    andi a4,a4,-4
    0x840070ee    0x12e    j ffffffff8400704e <cancelIPC+0x8e>
    0x840070f0    0x130    mv a4,a0
    0x840070f2    0x132    j ffffffff84007034 <cancelIPC+0x74>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
118 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 177 nodes.

Section sameRegionAs (252 of 296)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 285 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `sameRegionAs`:

    0x84005d84      0x0    addi sp,sp,-80
    0x84005d86      0x2    sd ra,72(sp)          ; stack access
    0x84005d88      0x4    sd s0,64(sp)          ; stack access
    0x84005d8a      0x6    sd s1,56(sp)          ; stack access
    0x84005d8c      0x8    sd s2,48(sp)          ; stack access
    0x84005d8e      0xa    sd a0,32(sp)          ; stack access
    0x84005d90      0xc    sd a1,40(sp)          ; stack access
    0x84005d92      0xe    sd a2,16(sp)          ; stack access
    0x84005d94     0x10    sd a3,24(sp)          ; stack access
    0x84005d96     0x12    srli a6,a0,0x3b
    0x84005d9a     0x16    li a4,24
    0x84005d9c     0x18    bltu a4,a6,ffffffff84005db8 <sameRegionAs+0x34>
    0x84005da0     0x1c    auipc a7,0x8
    0x84005da4     0x20    addi a7,a7,-824 # ffffffff8400da68 <msgRegisters+0x320>
    0x84005da8     0x24    slli a4,a6,0x2
    0x84005dac     0x28    add a4,a4,a7
    0x84005dae     0x2a    lw a5,0(a4)
    0x84005db0     0x2c    mv t1,a0
    0x84005db2     0x2e    mv s0,a1
    0x84005db4     0x30    add a5,a5,a7
    0x84005db6     0x32    jr a5
    0x84005db8     0x34    andi a0,a6,1
    0x84005dbc     0x38    beqz a0,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005dbe     0x3a    srli a0,a2,0x3b
    0x84005dc2     0x3e    andi a0,a0,1
    0x84005dc4     0x40    beqz a0,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005dc6     0x42    ld s0,64(sp)          ; stack access
    0x84005dc8     0x44    ld a2,16(sp)          ; stack access
    0x84005dca     0x46    ld a3,24(sp)          ; stack access
    0x84005dcc     0x48    ld a0,32(sp)          ; stack access
    0x84005dce     0x4a    ld a1,40(sp)          ; stack access
    0x84005dd0     0x4c    ld ra,72(sp)          ; stack access
    0x84005dd2     0x4e    ld s1,56(sp)          ; stack access
    0x84005dd4     0x50    ld s2,48(sp)          ; stack access
    0x84005dd6     0x52    addi sp,sp,80
    0x84005dd8     0x54    j ffffffff840041d2 <Arch_sameRegionAs>
    0x84005ddc     0x58    srli a0,a2,0x3b
    0x84005de0     0x5c    addi a0,a0,-20
    0x84005de2     0x5e    seqz a0,a0
    0x84005de6     0x62    ld ra,72(sp)          ; stack access
    0x84005de8     0x64    ld s0,64(sp)          ; stack access
    0x84005dea     0x66    ld s1,56(sp)          ; stack access
    0x84005dec     0x68    ld s2,48(sp)          ; stack access
    0x84005dee     0x6a    addi sp,sp,80
    0x84005df0     0x6c    ret
    0x84005df2     0x6e    srli s1,a2,0x3b
    0x84005df6     0x72    li a5,24
    0x84005df8     0x74    bltu a5,s1,ffffffff84005f72 <sameRegionAs+0x1ee>
    0x84005dfc     0x78    auipc a1,0x8
    0x84005e00     0x7c    addi a1,a1,-816 # ffffffff8400dacc <msgRegisters+0x384>
    0x84005e04     0x80    slli a4,s1,0x2
    0x84005e08     0x84    add a4,a4,a1
    0x84005e0a     0x86    lw a5,0(a4)
    0x84005e0c     0x88    add a5,a5,a1
    0x84005e0e     0x8a    jr a5
    0x84005e10     0x8c    srli a5,a2,0x3b
    0x84005e14     0x90    li a4,4
    0x84005e16     0x92    li a0,0
    0x84005e18     0x94    bne a5,a4,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005e1c     0x98    li a4,-1
    0x84005e1e     0x9a    srli a3,t1,0x26
    0x84005e22     0x9e    srli a0,a4,0x19
    0x84005e26     0xa2    andi a3,a3,1
    0x84005e28     0xa4    and a5,t1,a0
    0x84005e2c     0xa8    beqz a3,ffffffff84005e32 <sameRegionAs+0xae>
    0x84005e2e     0xaa    slli a4,a4,0x27
    0x84005e30     0xac    or a5,a5,a4
    0x84005e32     0xae    li a4,-1
    0x84005e34     0xb0    srli a3,a2,0x26
    0x84005e38     0xb4    srli a0,a4,0x19
    0x84005e3c     0xb8    andi a3,a3,1
    0x84005e3e     0xba    and a0,a0,a2
    0x84005e40     0xbc    beqz a3,ffffffff84005e46 <sameRegionAs+0xc2>
    0x84005e42     0xbe    slli a4,a4,0x27
    0x84005e44     0xc0    or a0,a0,a4
    0x84005e46     0xc2    sub a0,a0,a5
    0x84005e48     0xc4    seqz a0,a0
    0x84005e4c     0xc8    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84005e4e     0xca    srli a5,a2,0x3b
    0x84005e52     0xce    li a4,6
    0x84005e54     0xd0    li a0,0
    0x84005e56     0xd2    bne a5,a4,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005e5a     0xd6    j ffffffff84005e1c <sameRegionAs+0x98>
    0x84005e5c     0xd8    srli a2,a2,0x3b
    0x84005e5e     0xda    li a5,8
    0x84005e60     0xdc    li a0,0
    0x84005e62     0xde    bne a2,a5,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005e66     0xe2    sub a5,a3,a1
    0x84005e6a     0xe6    seqz a0,a5
    0x84005e6e     0xea    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84005e70     0xec    srli a5,a2,0x3b
    0x84005e74     0xf0    li a4,10
    0x84005e76     0xf2    li a0,0
    0x84005e78     0xf4    bne a5,a4,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005e7c     0xf8    li a0,1
    0x84005e7e     0xfa    slli a3,a0,0x26
    0x84005e82     0xfe    slli a5,t1,0x1
    0x84005e86    0x102    lui a4,0xfc000
    0x84005e8a    0x106    srli a4,a4,0x19
    0x84005e8c    0x108    slli a0,a2,0x1
    0x84005e90    0x10c    and a1,a5,a3
    0x84005e94    0x110    and a5,a5,a4
    0x84005e96    0x112    and a4,a4,a0
    0x84005e98    0x114    and a0,a0,a3
    0x84005e9a    0x116    beqz a1,ffffffff84006084 <sameRegionAs+0x300>
    0x84005e9e    0x11a    li a3,-1
    0x84005ea0    0x11c    slli a3,a3,0x27
    0x84005ea2    0x11e    or a5,a5,a3
    0x84005ea4    0x120    beqz a0,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005ea6    0x122    li a3,-1
    0x84005ea8    0x124    slli a3,a3,0x27
    0x84005eaa    0x126    or a4,a4,a3
    0x84005eac    0x128    li a0,0
    0x84005eae    0x12a    bne a4,a5,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005eb2    0x12e    srli a0,a2,0x2f
    0x84005eb6    0x132    srli a5,t1,0x2f
    0x84005eba    0x136    andi a0,a0,63
    0x84005ebe    0x13a    andi a5,a5,63
    0x84005ec2    0x13e    j ffffffff84005e46 <sameRegionAs+0xc2>
    0x84005ec4    0x140    srli a5,a2,0x3b
    0x84005ec8    0x144    li a4,12
    0x84005eca    0x146    li a0,0
    0x84005ecc    0x148    bne a5,a4,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005ed0    0x14c    li a4,-1
    0x84005ed2    0x14e    srli a3,t1,0x26
    0x84005ed6    0x152    srli a5,a4,0x19
    0x84005eda    0x156    andi a3,a3,1
    0x84005edc    0x158    and a5,t1,a5
    0x84005ee0    0x15c    bnez a3,ffffffff84005e2e <sameRegionAs+0xaa>
    0x84005ee2    0x15e    j ffffffff84005e32 <sameRegionAs+0xae>
    0x84005ee4    0x160    srli a0,a2,0x3b
    0x84005ee8    0x164    addi a0,a0,-14
    0x84005eea    0x166    andi a0,a0,-3
    0x84005eec    0x168    seqz a0,a0
    0x84005ef0    0x16c    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84005ef2    0x16e    srli a2,a2,0x3b
    0x84005ef4    0x170    li a5,16
    0x84005ef6    0x172    li a0,0
    0x84005ef8    0x174    bne a2,a5,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005efc    0x178    lui a4,0x1
    0x84005efe    0x17a    addi a4,a4,-1
    0x84005f00    0x17c    and a0,a3,a4
    0x84005f04    0x180    and a1,a1,a4
    0x84005f06    0x182    sub a0,a0,a1
    0x84005f08    0x184    seqz a0,a0
    0x84005f0c    0x188    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84005f0e    0x18a    srli a2,a2,0x3b
    0x84005f10    0x18c    li a5,22
    0x84005f12    0x18e    li a0,0
    0x84005f14    0x190    bne a2,a5,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005f18    0x194    li a0,1
    0x84005f1a    0x196    srli a5,a1,0x10
    0x84005f1e    0x19a    slli a2,a0,0x26
    0x84005f22    0x19e    li a1,-1
    0x84005f24    0x1a0    srli a4,a1,0x19
    0x84005f28    0x1a4    srli a0,a3,0x10
    0x84005f2c    0x1a8    and a6,a5,a2
    0x84005f30    0x1ac    and a5,a5,a4
    0x84005f32    0x1ae    and a4,a4,a0
    0x84005f34    0x1b0    and a0,a0,a2
    0x84005f36    0x1b2    beqz a6,ffffffff8400607e <sameRegionAs+0x2fa>
    0x84005f3a    0x1b6    slli a1,a1,0x27
    0x84005f3c    0x1b8    or a5,a5,a1
    0x84005f3e    0x1ba    beqz a0,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005f42    0x1be    li a2,-1
    0x84005f44    0x1c0    slli a2,a2,0x27
    0x84005f46    0x1c2    or a4,a4,a2
    0x84005f48    0x1c4    li a0,0
    0x84005f4a    0x1c6    bne a4,a5,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005f4e    0x1ca    srli a0,a3,0xa
    0x84005f52    0x1ce    srli a5,s0,0xa
    0x84005f56    0x1d2    andi a0,a0,63
    0x84005f5a    0x1d6    andi a5,a5,63
    0x84005f5e    0x1da    sub a0,a0,a5
    0x84005f60    0x1dc    seqz a0,a0
    0x84005f64    0x1e0    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84005f66    0x1e2    srli a0,a2,0x3b
    0x84005f6a    0x1e6    addi a0,a0,-24
    0x84005f6c    0x1e8    seqz a0,a0
    0x84005f70    0x1ec    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84005f72    0x1ee    li a5,13
    0x84005f74    0x1f0    bltu a5,s1,ffffffff84005fcc <sameRegionAs+0x248>
    0x84005f78    0x1f4    li a0,1
    0x84005f7a    0x1f6    lui a5,0x2
    0x84005f7c    0x1f8    sll a0,a0,s1
    0x84005f80    0x1fc    addi a5,a5,10
    0x84005f82    0x1fe    and a0,a0,a5
    0x84005f84    0x200    beqz a0,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005f88    0x204    li a4,-1
    0x84005f8a    0x206    srli a1,t1,0x26
    0x84005f8e    0x20a    srli s2,a4,0x19
    0x84005f92    0x20e    andi a1,a1,1
    0x84005f94    0x210    and s2,t1,s2
    0x84005f98    0x214    beqz a1,ffffffff84005fa0 <sameRegionAs+0x21c>
    0x84005f9a    0x216    slli a4,a4,0x27
    0x84005f9c    0x218    or s2,s2,a4
    0x84005fa0    0x21c    ld a0,16(sp)
    0x84005fa2    0x21e    ld a1,24(sp)
    0x84005fa4    0x220    sd a2,0(sp)
    0x84005fa6    0x222    sd a3,8(sp)
    0x84005fa8    0x224    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84005fac    0x228    li a5,24
    0x84005fae    0x22a    ld a2,0(sp)
    0x84005fb0    0x22c    mv a4,a0
    0x84005fb2    0x22e    bltu a5,s1,ffffffff84005fd0 <sameRegionAs+0x24c>
    0x84005fb6    0x232    auipc a0,0x8
    0x84005fba    0x236    addi a0,a0,-1158 # ffffffff8400db30 <msgRegisters+0x3e8>
    0x84005fbe    0x23a    slli a1,s1,0x2
    0x84005fc2    0x23e    add a1,a1,a0
    0x84005fc4    0x240    lw a5,0(a1)
    0x84005fc6    0x242    ld a3,8(sp)
    0x84005fc8    0x244    add a5,a5,a0
    0x84005fca    0x246    jr a5
    0x84005fcc    0x248    li a0,0
    0x84005fce    0x24a    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84005fd0    0x24c    li a5,3
    0x84005fd2    0x24e    beq s1,a5,ffffffff8400608a <sameRegionAs+0x306>
    0x84005fd6    0x252    li a3,13
    0x84005fd8    0x254    beq s1,a3,ffffffff8400608a <sameRegionAs+0x306>
    0x84005fdc    0x258    li a3,1
    0x84005fde    0x25a    beq s1,a3,ffffffff84006062 <sameRegionAs+0x2de>
    0x84005fe2    0x25e    mv a5,a4
    0x84005fe4    0x260    li a0,0
    0x84005fe6    0x262    bltu a4,s2,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005fea    0x266    li t1,1
    0x84005fec    0x268    sll t1,t1,s0
    0x84005ff0    0x26c    addi t1,t1,-1
    0x84005ff2    0x26e    add t1,t1,s2
    0x84005ff4    0x270    bltu t1,a5,ffffffff84005de6 <sameRegionAs+0x62>
    0x84005ff8    0x274    sltu a0,a5,a4
    0x84005ffc    0x278    xori a0,a0,1
    0x84006000    0x27c    slli a0,a0,0x20
    0x84006002    0x27e    srli a0,a0,0x20
    0x84006004    0x280    j ffffffff84005de6 <sameRegionAs+0x62>
    0x84006006    0x282    srli a0,a2,0x2f
    0x8400600a    0x286    andi a5,a0,63
    0x8400600e    0x28a    addi a3,a5,5 # 2005 <KERNEL_OFFSET-0xfffffffeffffdffb>
    0x84006012    0x28e    li a5,1
    0x84006014    0x290    sll a5,a5,a3
    0x84006018    0x294    addi a5,a5,-1
    0x8400601a    0x296    add a5,a5,a4
    0x8400601c    0x298    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x8400601e    0x29a    addi a5,a4,1023 # 13ff <KERNEL_OFFSET-0xfffffffeffffec01>
    0x84006022    0x29e    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x84006024    0x2a0    addi a5,a4,15
    0x84006028    0x2a4    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x8400602a    0x2a6    addi a5,a4,31
    0x8400602e    0x2aa    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x84006030    0x2ac    addi a5,a4,63
    0x84006034    0x2b0    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x84006036    0x2b2    srli a3,a3,0xa
    0x84006038    0x2b4    li a5,1
    0x8400603a    0x2b6    sll a5,a5,a3
    0x8400603e    0x2ba    addi a5,a5,-1
    0x84006040    0x2bc    add a5,a5,a4
    0x84006042    0x2be    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x84006044    0x2c0    andi a5,a2,127
    0x84006048    0x2c4    li a3,64
    0x8400604c    0x2c8    beq a5,a3,ffffffff8400601e <sameRegionAs+0x29a>
    0x84006050    0x2cc    andi a0,a2,63
    0x84006054    0x2d0    addi a0,a0,5
    0x84006056    0x2d2    li a5,1
    0x84006058    0x2d4    sll a5,a5,a0
    0x8400605c    0x2d8    addi a5,a5,-1
    0x8400605e    0x2da    add a5,a5,a4
    0x84006060    0x2dc    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x84006062    0x2de    srli a0,a2,0x39
    0x84006066    0x2e2    andi a0,a0,3
    0x84006068    0x2e4    beq a0,a5,ffffffff84006092 <sameRegionAs+0x30e>
    0x8400606c    0x2e8    li a5,9
    0x8400606e    0x2ea    mul a5,a0,a5
    0x84006072    0x2ee    addi a5,a5,12
    0x84006074    0x2f0    sll a5,s1,a5
    0x84006078    0x2f4    addi a5,a5,-1
    0x8400607a    0x2f6    add a5,a5,a4
    0x8400607c    0x2f8    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x8400607e    0x2fa    bnez a0,ffffffff84005f42 <sameRegionAs+0x1be>
    0x84006082    0x2fe    j ffffffff84005f48 <sameRegionAs+0x1c4>
    0x84006084    0x300    bnez a0,ffffffff84005ea6 <sameRegionAs+0x122>
    0x84006088    0x304    j ffffffff84005eac <sameRegionAs+0x128>
    0x8400608a    0x306    lui a5,0x1
    0x8400608c    0x308    addi a5,a5,-1
    0x8400608e    0x30a    add a5,a5,a4
    0x84006090    0x30c    j ffffffff84005fe4 <sameRegionAs+0x260>
    0x84006092    0x30e    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
285 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 387 nodes.

Section Arch_decodeIRQControlInvocation_part_0 (253 of 296)
===========================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation_part_0` consists of 95 instructions.


Stack analysis
---------------

28 stack accesses found. Annotated code for `Arch_decodeIRQControlInvocation_part_0`:

    0x840056e4     0x0    li a5,3
    0x840056e6     0x2    bgeu a5,a0,ffffffff84005796 <Arch_decodeIRQControlInvocation.part.0+0xb2>
    0x840056ea     0x6    auipc a4,0xa
    0x840056ee     0xa    ld a4,790(a4) # ffffffff8400fa00 <current_extra_caps>
    0x840056f2     0xe    beqz a4,ffffffff84005796 <Arch_decodeIRQControlInvocation.part.0+0xb2>
    0x840056f4    0x10    addi sp,sp,-80
    0x840056f6    0x12    sd s3,40(sp)          ; stack access
    0x840056f8    0x14    auipc s3,0x1c
    0x840056fc    0x18    addi s3,s3,352 # ffffffff84021858 <ksCurThread>
    0x84005700    0x1c    ld a3,0(s3)
    0x84005704    0x20    sd s0,64(sp)          ; stack access
    0x84005706    0x22    sd ra,72(sp)          ; stack access
    0x84005708    0x24    ld s0,88(a3)
    0x8400570a    0x26    sd s1,56(sp)          ; stack access
    0x8400570c    0x28    sd s2,48(sp)          ; stack access
    0x8400570e    0x2a    sd s4,32(sp)          ; stack access
    0x84005710    0x2c    li a5,53
    0x84005714    0x30    addi a2,s0,-1
    0x84005718    0x34    bltu a5,a2,ffffffff840057a4 <Arch_decodeIRQControlInvocation.part.0+0xc0>
    0x8400571c    0x38    auipc s4,0xa
    0x84005720    0x3c    addi s4,s4,-1820 # ffffffff8400f000 <riscvKSASIDTable>
    0x84005724    0x40    slli a5,s0,0x3
    0x84005728    0x44    add a5,a5,s4
    0x8400572a    0x46    ld a5,1736(a5)
    0x8400572e    0x4a    bnez a5,ffffffff8400577e <Arch_decodeIRQControlInvocation.part.0+0x9a>
    0x84005730    0x4c    ld a2,8(a4)
    0x84005732    0x4e    mv s2,a1
    0x84005734    0x50    ld a1,0(a4)
    0x84005736    0x52    ld a4,112(a3)
    0x84005738    0x54    ld a3,104(a3)
    0x8400573a    0x56    li a0,0
    0x8400573c    0x58    sd a1,0(sp)           ; stack access
    0x8400573e    0x5a    sd a2,8(sp)           ; stack access
    0x84005740    0x5c    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x84005744    0x60    sd a0,16(sp)          ; stack access
    0x84005746    0x62    sd a1,24(sp)          ; stack access
    0x84005748    0x64    mv s1,a1
    0x8400574a    0x66    bnez a0,ffffffff84005786 <Arch_decodeIRQControlInvocation.part.0+0xa2>
    0x8400574c    0x68    ld a5,0(a1)
    0x8400574e    0x6a    srli a5,a5,0x3b
    0x84005750    0x6c    bnez a5,ffffffff840057d2 <Arch_decodeIRQControlInvocation.part.0+0xee>
    0x84005752    0x6e    ld a0,0(s3)
    0x84005756    0x72    ld a5,280(a0) # fffffffff8000118 <ki_end+0x73fd9118>
    0x8400575a    0x76    andi a5,a5,-16
    0x8400575c    0x78    ori a5,a5,2
    0x84005760    0x7c    sd a5,280(a0)
    0x84005764    0x80    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84005768    0x84    mv a0,s0
    0x8400576a    0x86    ld s0,64(sp)          ; stack access
    0x8400576c    0x88    ld ra,72(sp)          ; stack access
    0x8400576e    0x8a    ld s3,40(sp)          ; stack access
    0x84005770    0x8c    ld s4,32(sp)          ; stack access
    0x84005772    0x8e    mv a2,s2
    0x84005774    0x90    mv a1,s1
    0x84005776    0x92    ld s2,48(sp)          ; stack access
    0x84005778    0x94    ld s1,56(sp)          ; stack access
    0x8400577a    0x96    addi sp,sp,80
    0x8400577c    0x98    j ffffffff8400563e <invokeIRQControl>
    0x8400577e    0x9a    li a5,9
    0x84005780    0x9c    sd a5,1728(s4)
    0x84005784    0xa0    li a0,3
    0x84005786    0xa2    ld ra,72(sp)          ; stack access
    0x84005788    0xa4    ld s0,64(sp)          ; stack access
    0x8400578a    0xa6    ld s1,56(sp)          ; stack access
    0x8400578c    0xa8    ld s2,48(sp)          ; stack access
    0x8400578e    0xaa    ld s3,40(sp)          ; stack access
    0x84005790    0xac    ld s4,32(sp)          ; stack access
    0x84005792    0xae    addi sp,sp,80
    0x84005794    0xb0    ret
    0x84005796    0xb2    li a5,7
    0x84005798    0xb4    auipc a4,0xa
    0x8400579c    0xb8    sd a5,-216(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840057a0    0xbc    li a0,3
    0x840057a2    0xbe    ret
    0x840057a4    0xc0    auipc a5,0xa
    0x840057a8    0xc4    addi a5,a5,-1956 # ffffffff8400f000 <riscvKSASIDTable>
    0x840057ac    0xc8    li a4,4
    0x840057ae    0xca    ld ra,72(sp)          ; stack access
    0x840057b0    0xcc    ld s0,64(sp)          ; stack access
    0x840057b2    0xce    sd a4,1728(a5)
    0x840057b6    0xd2    li a4,1
    0x840057b8    0xd4    sd a4,1696(a5)
    0x840057bc    0xd8    li a4,54
    0x840057c0    0xdc    sd a4,1704(a5)
    0x840057c4    0xe0    ld s1,56(sp)          ; stack access
    0x840057c6    0xe2    ld s2,48(sp)          ; stack access
    0x840057c8    0xe4    ld s3,40(sp)          ; stack access
    0x840057ca    0xe6    ld s4,32(sp)          ; stack access
    0x840057cc    0xe8    li a0,3
    0x840057ce    0xea    addi sp,sp,80
    0x840057d0    0xec    ret
    0x840057d2    0xee    li a5,8
    0x840057d4    0xf0    sd a5,1728(s4)
    0x840057d8    0xf4    li a0,3
    0x840057da    0xf6    j ffffffff84005786 <Arch_decodeIRQControlInvocation.part.0+0xa2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
95 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation_part_0` has 159 nodes.

Section cancelBadgedSends (254 of 296)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 133 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x84005414      0x0    ld a5,0(a0)
    0x84005416      0x2    addi sp,sp,-80
    0x84005418      0x4    sd ra,72(sp)          ; stack access
    0x8400541a      0x6    sd s0,64(sp)          ; stack access
    0x8400541c      0x8    sd s1,56(sp)          ; stack access
    0x8400541e      0xa    sd s2,48(sp)          ; stack access
    0x84005420      0xc    sd s3,40(sp)          ; stack access
    0x84005422      0xe    sd s4,32(sp)          ; stack access
    0x84005424     0x10    sd s5,24(sp)          ; stack access
    0x84005426     0x12    sd s6,16(sp)          ; stack access
    0x84005428     0x14    sd s7,8(sp)           ; stack access
    0x8400542a     0x16    li a3,1
    0x8400542c     0x18    andi a4,a5,3
    0x84005430     0x1c    beq a4,a3,ffffffff8400543e <cancelBadgedSends+0x2a>
    0x84005434     0x20    andi a5,a5,1
    0x84005436     0x22    beqz a5,ffffffff8400552e <cancelBadgedSends+0x11a>
    0x8400543a     0x26    jal ra,ffffffff840036cc <halt>
    0x8400543e     0x2a    ld a2,8(a0)
    0x84005440     0x2c    slli a4,a4,0x26
    0x84005442     0x2e    lui a3,0xf8000
    0x84005446     0x32    srli a3,a3,0x19
    0x84005448     0x34    and a4,a4,a5
    0x8400544a     0x36    mv s3,a0
    0x8400544c     0x38    mv s2,a1
    0x8400544e     0x3a    mv s0,a2
    0x84005450     0x3c    and a3,a3,a5
    0x84005452     0x3e    beqz a4,ffffffff8400545a <cancelBadgedSends+0x46>
    0x84005454     0x40    li a4,-1
    0x84005456     0x42    slli a4,a4,0x27
    0x84005458     0x44    or a3,a3,a4
    0x8400545a     0x46    srli a5,a5,0x27
    0x8400545c     0x48    slli a5,a5,0x27
    0x8400545e     0x4a    sd zero,8(s3)
    0x84005462     0x4e    sd a5,0(s3)
    0x84005466     0x52    mv s4,a3
    0x84005468     0x54    beqz a2,ffffffff84005564 <cancelBadgedSends+0x150>
    0x8400546c     0x58    mv s6,a2
    0x8400546e     0x5a    auipc s7,0x1c
    0x84005472     0x5e    addi s7,s7,1002 # ffffffff84021858 <ksCurThread>
    0x84005476     0x62    auipc s5,0x1c
    0x8400547a     0x66    addi s5,s5,978 # ffffffff84021848 <ksSchedulerAction>
    0x8400547e     0x6a    ld a5,296(s0)
    0x84005482     0x6e    mv s1,s0
    0x84005484     0x70    ld s0,408(s0)
    0x84005488     0x74    beq s2,a5,ffffffff840054d4 <cancelBadgedSends+0xc0>
    0x8400548c     0x78    bnez s0,ffffffff8400547e <cancelBadgedSends+0x6a>
    0x8400548e     0x7a    ld a5,0(s3)
    0x84005492     0x7e    li a4,-1
    0x84005494     0x80    slli a4,a4,0x27
    0x84005496     0x82    addi a4,a4,3
    0x84005498     0x84    and a5,a5,a4
    0x8400549a     0x86    lui a4,0xf8000
    0x8400549e     0x8a    srli a4,a4,0x19
    0x840054a0     0x8c    and s4,s4,a4
    0x840054a4     0x90    sd s6,8(s3)
    0x840054a8     0x94    or s4,a5,s4
    0x840054ac     0x98    beqz s6,ffffffff840054b8 <cancelBadgedSends+0xa4>
    0x840054b0     0x9c    andi s4,s4,-4
    0x840054b4     0xa0    ori s4,s4,1
    0x840054b8     0xa4    sd s4,0(s3)
    0x840054bc     0xa8    ld s0,64(sp)          ; stack access
    0x840054be     0xaa    ld ra,72(sp)          ; stack access
    0x840054c0     0xac    ld s1,56(sp)          ; stack access
    0x840054c2     0xae    ld s2,48(sp)          ; stack access
    0x840054c4     0xb0    ld s3,40(sp)          ; stack access
    0x840054c6     0xb2    ld s4,32(sp)          ; stack access
    0x840054c8     0xb4    ld s5,24(sp)          ; stack access
    0x840054ca     0xb6    ld s6,16(sp)          ; stack access
    0x840054cc     0xb8    ld s7,8(sp)           ; stack access
    0x840054ce     0xba    addi sp,sp,80
    0x840054d0     0xbc    j ffffffff84004c1c <rescheduleRequired>
    0x840054d4     0xc0    ld a4,312(s1)
    0x840054d8     0xc4    ld a5,280(s1)
    0x840054dc     0xc8    ld a3,0(s7)
    0x840054e0     0xcc    andi a4,a4,15
    0x840054e2     0xce    andi a5,a5,-16
    0x840054e4     0xd0    bnez a4,ffffffff84005514 <cancelBadgedSends+0x100>
    0x840054e6     0xd2    ori a5,a5,2
    0x840054ea     0xd6    sd a5,280(s1)
    0x840054ee     0xda    beq a3,s1,ffffffff8400554e <cancelBadgedSends+0x13a>
    0x840054f2     0xde    mv a0,s1
    0x840054f4     0xe0    jal ra,ffffffff84004ca6 <possibleSwitchTo>
    0x840054f8     0xe4    ld a5,408(s1)
    0x840054fc     0xe8    ld a4,416(s1)
    0x84005500     0xec    beqz a4,ffffffff8400554a <cancelBadgedSends+0x136>
    0x84005502     0xee    sd a5,408(a4) # fffffffff8000198 <ki_end+0x73fd9198>
    0x84005506     0xf2    ld a5,408(s1)
    0x8400550a     0xf6    beqz a5,ffffffff84005544 <cancelBadgedSends+0x130>
    0x8400550c     0xf8    sd a4,416(a5)
    0x84005510     0xfc    bnez s0,ffffffff8400547e <cancelBadgedSends+0x6a>
    0x84005512     0xfe    j ffffffff8400548e <cancelBadgedSends+0x7a>
    0x84005514    0x100    sd a5,280(s1)
    0x84005518    0x104    mv a5,s0
    0x8400551a    0x106    bne a3,s1,ffffffff840054fc <cancelBadgedSends+0xe8>
    0x8400551e    0x10a    ld a4,0(s5)
    0x84005522    0x10e    bnez a4,ffffffff840054fc <cancelBadgedSends+0xe8>
    0x84005524    0x110    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84005528    0x114    ld a5,408(s1)
    0x8400552c    0x118    j ffffffff840054fc <cancelBadgedSends+0xe8>
    0x8400552e    0x11a    ld ra,72(sp)          ; stack access
    0x84005530    0x11c    ld s0,64(sp)          ; stack access
    0x84005532    0x11e    ld s1,56(sp)          ; stack access
    0x84005534    0x120    ld s2,48(sp)          ; stack access
    0x84005536    0x122    ld s3,40(sp)          ; stack access
    0x84005538    0x124    ld s4,32(sp)          ; stack access
    0x8400553a    0x126    ld s5,24(sp)          ; stack access
    0x8400553c    0x128    ld s6,16(sp)          ; stack access
    0x8400553e    0x12a    ld s7,8(sp)           ; stack access
    0x84005540    0x12c    addi sp,sp,80
    0x84005542    0x12e    ret
    0x84005544    0x130    mv s4,a4
    0x84005546    0x132    bnez s0,ffffffff8400547e <cancelBadgedSends+0x6a>
    0x84005548    0x134    j ffffffff8400548e <cancelBadgedSends+0x7a>
    0x8400554a    0x136    mv s6,a5
    0x8400554c    0x138    j ffffffff8400550a <cancelBadgedSends+0xf6>
    0x8400554e    0x13a    ld a5,0(s5)
    0x84005552    0x13e    bnez a5,ffffffff840054f2 <cancelBadgedSends+0xde>
    0x84005554    0x140    ld a5,368(s1)
    0x84005558    0x144    beqz a5,ffffffff8400555e <cancelBadgedSends+0x14a>
    0x8400555a    0x146    ld a5,64(a5)
    0x8400555c    0x148    bnez a5,ffffffff84005574 <cancelBadgedSends+0x160>
    0x8400555e    0x14a    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84005562    0x14e    j ffffffff840054f2 <cancelBadgedSends+0xde>
    0x84005564    0x150    lui a4,0xf8000
    0x84005568    0x154    srli a4,a4,0x19
    0x8400556a    0x156    and a3,a3,a4
    0x8400556c    0x158    or a5,a5,a3
    0x8400556e    0x15a    sd a5,0(s3)
    0x84005572    0x15e    j ffffffff840054bc <cancelBadgedSends+0xa8>
    0x84005574    0x160    ld a5,288(s1)
    0x84005578    0x164    andi a5,a5,1
    0x8400557a    0x166    beqz a5,ffffffff840054f2 <cancelBadgedSends+0xde>
    0x8400557c    0x168    j ffffffff8400555e <cancelBadgedSends+0x14a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
133 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 230 nodes.

Section setDomain (255 of 296)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 45 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `setDomain`:

    0x84004d06     0x0    ld a5,288(a0)
    0x84004d0a     0x4    addi sp,sp,-32
    0x84004d0c     0x6    sd s0,16(sp)          ; stack access
    0x84004d0e     0x8    srli a5,a5,0x1
    0x84004d10     0xa    sd s1,8(sp)           ; stack access
    0x84004d12     0xc    sd ra,24(sp)          ; stack access
    0x84004d14     0xe    andi a5,a5,1
    0x84004d16    0x10    mv s0,a0
    0x84004d18    0x12    mv s1,a1
    0x84004d1a    0x14    beqz a5,ffffffff84004d20 <setDomain+0x1a>
    0x84004d1c    0x16    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84004d20    0x1a    ld a5,280(s0)
    0x84004d24    0x1e    sd s1,344(s0)
    0x84004d28    0x22    li a4,1
    0x84004d2a    0x24    andi a5,a5,15
    0x84004d2c    0x26    addi a5,a5,-1
    0x84004d2e    0x28    bgeu a4,a5,ffffffff84004d48 <setDomain+0x42>
    0x84004d32    0x2c    auipc a5,0x1d
    0x84004d36    0x30    ld a5,-1242(a5) # ffffffff84021858 <ksCurThread>
    0x84004d3a    0x34    beq a5,s0,ffffffff84004d74 <setDomain+0x6e>
    0x84004d3e    0x38    ld ra,24(sp)          ; stack access
    0x84004d40    0x3a    ld s0,16(sp)          ; stack access
    0x84004d42    0x3c    ld s1,8(sp)           ; stack access
    0x84004d44    0x3e    addi sp,sp,32
    0x84004d46    0x40    ret
    0x84004d48    0x42    ld a5,368(s0)
    0x84004d4c    0x46    beqz a5,ffffffff84004d32 <setDomain+0x2c>
    0x84004d4e    0x48    ld a5,64(a5)
    0x84004d50    0x4a    beqz a5,ffffffff84004d32 <setDomain+0x2c>
    0x84004d52    0x4c    ld a5,288(s0)
    0x84004d56    0x50    andi a4,a5,1
    0x84004d5a    0x54    bnez a4,ffffffff84004d32 <setDomain+0x2c>
    0x84004d5c    0x56    srli a5,a5,0x1
    0x84004d5e    0x58    andi a5,a5,1
    0x84004d60    0x5a    bnez a5,ffffffff84004d32 <setDomain+0x2c>
    0x84004d62    0x5c    mv a0,s0
    0x84004d64    0x5e    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x84004d68    0x62    auipc a5,0x1d
    0x84004d6c    0x66    ld a5,-1296(a5) # ffffffff84021858 <ksCurThread>
    0x84004d70    0x6a    bne a5,s0,ffffffff84004d3e <setDomain+0x38>
    0x84004d74    0x6e    ld s0,16(sp)          ; stack access
    0x84004d76    0x70    ld ra,24(sp)          ; stack access
    0x84004d78    0x72    ld s1,8(sp)           ; stack access
    0x84004d7a    0x74    addi sp,sp,32
    0x84004d7c    0x76    j ffffffff84004c1c <rescheduleRequired>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 82 nodes.

Section unmapPage (256 of 296)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 52 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

12 stack accesses found. Annotated code for `unmapPage`:

    0x84003c14     0x0    addi sp,sp,-64
    0x84003c16     0x2    sd s0,48(sp)          ; stack access
    0x84003c18     0x4    mv s0,a0
    0x84003c1a     0x6    mv a0,a1
    0x84003c1c     0x8    sd s1,40(sp)          ; stack access
    0x84003c1e     0xa    sd s2,32(sp)          ; stack access
    0x84003c20     0xc    sd ra,56(sp)          ; stack access
    0x84003c22     0xe    mv s2,a2
    0x84003c24    0x10    mv s1,a3
    0x84003c26    0x12    jal ra,ffffffff840031cc <findVSpaceForASID>
    0x84003c2a    0x16    sd a0,0(sp)           ; stack access
    0x84003c2c    0x18    sd a1,8(sp)           ; stack access
    0x84003c2e    0x1a    beqz a0,ffffffff84003c3c <unmapPage+0x28>
    0x84003c30    0x1c    ld ra,56(sp)          ; stack access
    0x84003c32    0x1e    ld s0,48(sp)          ; stack access
    0x84003c34    0x20    ld s1,40(sp)          ; stack access
    0x84003c36    0x22    ld s2,32(sp)          ; stack access
    0x84003c38    0x24    addi sp,sp,64
    0x84003c3a    0x26    ret
    0x84003c3c    0x28    mv a0,a1
    0x84003c3e    0x2a    mv a1,s2
    0x84003c40    0x2c    jal ra,ffffffff84003ab2 <lookupPTSlot>
    0x84003c44    0x30    sd a0,16(sp)          ; stack access
    0x84003c46    0x32    sd a1,24(sp)          ; stack access
    0x84003c48    0x34    li a5,2
    0x84003c4a    0x36    bltu a5,s0,ffffffff84003c94 <unmapPage+0x80>
    0x84003c4e    0x3a    slli a5,s0,0x3
    0x84003c52    0x3e    add s0,s0,a5
    0x84003c54    0x40    addi s0,s0,12
    0x84003c56    0x42    bne a1,s0,ffffffff84003c30 <unmapPage+0x1c>
    0x84003c5a    0x46    ld a5,0(a0)
    0x84003c5c    0x48    andi a4,a5,1
    0x84003c60    0x4c    beqz a4,ffffffff84003c30 <unmapPage+0x1c>
    0x84003c62    0x4e    srli a3,a5,0x2
    0x84003c66    0x52    srli a4,a5,0x1
    0x84003c6a    0x56    or a4,a4,a3
    0x84003c6c    0x58    srli a3,a5,0x3
    0x84003c70    0x5c    or a4,a4,a3
    0x84003c72    0x5e    andi a4,a4,1
    0x84003c74    0x60    beqz a4,ffffffff84003c30 <unmapPage+0x1c>
    0x84003c76    0x62    lui a4,0xfff00
    0x84003c7a    0x66    li a3,1
    0x84003c7c    0x68    slli a5,a5,0x2
    0x84003c7e    0x6a    srli a4,a4,0x8
    0x84003c80    0x6c    slli a3,a3,0x26
    0x84003c82    0x6e    and a5,a5,a4
    0x84003c84    0x70    add s1,s1,a3
    0x84003c86    0x72    bne a5,s1,ffffffff84003c30 <unmapPage+0x1c>
    0x84003c8a    0x76    sd zero,0(a0) # fffffffffff00000 <ki_end+0x7bed9000>
    0x84003c8e    0x7a    sfence.vma
    0x84003c92    0x7e    j ffffffff84003c30 <unmapPage+0x1c>
    0x84003c94    0x80    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 83 nodes.

Section create_untypeds_for_region (257 of 296)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 110 instructions.


Stack analysis
---------------

36 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x84001a54      0x0    addi sp,sp,-192
    0x84001a56      0x2    sd s9,104(sp)         ; stack access
    0x84001a58      0x4    slli s9,a2,0x6
    0x84001a5c      0x8    sd s5,136(sp)         ; stack access
    0x84001a5e      0xa    mv s5,a5
    0x84001a60      0xc    andi a5,s9,64
    0x84001a64     0x10    sd ra,184(sp)         ; stack access
    0x84001a66     0x12    sd s0,176(sp)         ; stack access
    0x84001a68     0x14    sd s1,168(sp)         ; stack access
    0x84001a6a     0x16    sd s2,160(sp)         ; stack access
    0x84001a6c     0x18    sd s3,152(sp)         ; stack access
    0x84001a6e     0x1a    sd s4,144(sp)         ; stack access
    0x84001a70     0x1c    sd s6,128(sp)         ; stack access
    0x84001a72     0x1e    sd s7,120(sp)         ; stack access
    0x84001a74     0x20    sd s8,112(sp)         ; stack access
    0x84001a76     0x22    sd s10,96(sp)         ; stack access
    0x84001a78     0x24    sd s11,88(sp)         ; stack access
    0x84001a7a     0x26    sd a2,8(sp)           ; stack access
    0x84001a7c     0x28    sd a0,48(sp)          ; stack access
    0x84001a7e     0x2a    sd a1,56(sp)          ; stack access
    0x84001a80     0x2c    sd a5,16(sp)          ; stack access
    0x84001a82     0x2e    beq a3,a4,ffffffff84001ae8 <create_untypeds_for_region+0x94>
    0x84001a86     0x32    li s10,-1
    0x84001a88     0x34    srli a5,s10,0x19
    0x84001a8c     0x38    mv s11,a3
    0x84001a8e     0x3a    mv s0,a4
    0x84001a90     0x3c    li s1,1
    0x84001a92     0x3e    li s4,63
    0x84001a96     0x42    li s3,38
    0x84001a9a     0x46    auipc s2,0xd
    0x84001a9e     0x4a    addi s2,s2,-1690 # ffffffff8400e400 <ndks_boot>
    0x84001aa2     0x4e    li s7,49
    0x84001aa6     0x52    sd a5,24(sp)          ; stack access
    0x84001aa8     0x54    li s6,3
    0x84001aaa     0x56    sub a0,s0,s11
    0x84001aae     0x5a    jal ra,ffffffff8400c4ac <__clzdi2>
    0x84001ab2     0x5e    sub s8,s4,a0
    0x84001ab6     0x62    beqz s11,ffffffff84001ac6 <create_untypeds_for_region+0x72>
    0x84001aba     0x66    mv a0,s11
    0x84001abc     0x68    jal ra,ffffffff8400d6e8 <__ctzdi2>
    0x84001ac0     0x6c    bgeu a0,s8,ffffffff84001ac6 <create_untypeds_for_region+0x72>
    0x84001ac4     0x70    mv s8,a0
    0x84001ac6     0x72    bltu s3,s8,ffffffff84001b08 <create_untypeds_for_region+0xb4>
    0x84001aca     0x76    sext.w s10,s8
    0x84001ace     0x7a    bgeu s6,s8,ffffffff84001ade <create_untypeds_for_region+0x8a>
    0x84001ad2     0x7e    ld s9,1088(s2)
    0x84001ad6     0x82    sub a1,s9,s5
    0x84001ada     0x86    bgeu s7,a1,ffffffff84001b1c <create_untypeds_for_region+0xc8>
    0x84001ade     0x8a    sll a5,s1,s10
    0x84001ae2     0x8e    add s11,s11,a5
    0x84001ae4     0x90    bne s11,s0,ffffffff84001aaa <create_untypeds_for_region+0x56>
    0x84001ae8     0x94    li a0,1
    0x84001aea     0x96    ld ra,184(sp)         ; stack access
    0x84001aec     0x98    ld s0,176(sp)         ; stack access
    0x84001aee     0x9a    ld s1,168(sp)         ; stack access
    0x84001af0     0x9c    ld s2,160(sp)         ; stack access
    0x84001af2     0x9e    ld s3,152(sp)         ; stack access
    0x84001af4     0xa0    ld s4,144(sp)         ; stack access
    0x84001af6     0xa2    ld s5,136(sp)         ; stack access
    0x84001af8     0xa4    ld s6,128(sp)         ; stack access
    0x84001afa     0xa6    ld s7,120(sp)         ; stack access
    0x84001afc     0xa8    ld s8,112(sp)         ; stack access
    0x84001afe     0xaa    ld s9,104(sp)         ; stack access
    0x84001b00     0xac    ld s10,96(sp)         ; stack access
    0x84001b02     0xae    ld s11,88(sp)         ; stack access
    0x84001b04     0xb0    addi sp,sp,192
    0x84001b06     0xb2    ret
    0x84001b08     0xb4    ld s9,1088(s2)
    0x84001b0c     0xb8    li s10,38
    0x84001b10     0xbc    li s8,38
    0x84001b14     0xc0    sub a1,s9,s5
    0x84001b18     0xc4    bltu s7,a1,ffffffff84001ade <create_untypeds_for_region+0x8a>
    0x84001b1c     0xc8    ld a0,1080(s2)
    0x84001b20     0xcc    li a5,1
    0x84001b22     0xce    slli a3,a5,0x26
    0x84001b26     0xd2    slli a1,a1,0x4
    0x84001b28     0xd4    add a1,a1,a0
    0x84001b2a     0xd6    add a0,s11,a3
    0x84001b2e     0xda    ld a3,8(sp)           ; stack access
    0x84001b30     0xdc    ld a6,1096(s2)
    0x84001b34     0xe0    sd zero,192(a1)
    0x84001b38     0xe4    sd a0,184(a1)
    0x84001b3a     0xe6    sb s8,192(a1)
    0x84001b3e     0xea    sb a3,193(a1)
    0x84001b42     0xee    ld a0,48(sp)          ; stack access
    0x84001b44     0xf0    ld a1,56(sp)          ; stack access
    0x84001b46     0xf2    bgeu s9,a6,ffffffff84001b8c <create_untypeds_for_region+0x138>
    0x84001b4a     0xf6    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84001b4e     0xfa    ld a3,24(sp)          ; stack access
    0x84001b50     0xfc    addiw a1,s10,-4
    0x84001b54    0x100    sll a1,s1,a1
    0x84001b58    0x104    and a6,s11,a3
    0x84001b5c    0x108    ld a3,16(sp)          ; stack access
    0x84001b5e    0x10a    li a4,1
    0x84001b60    0x10c    slli a4,a4,0x3c
    0x84001b62    0x10e    slli a7,s9,0x5
    0x84001b66    0x112    slli a1,a1,0x19
    0x84001b68    0x114    or a5,s8,a3
    0x84001b6c    0x118    add a0,a0,a7
    0x84001b6e    0x11a    or a6,a6,a4
    0x84001b72    0x11e    or a5,a5,a1
    0x84001b74    0x120    sd a6,0(a0)
    0x84001b78    0x124    sd a5,8(a0)
    0x84001b7a    0x126    sd zero,16(a0)
    0x84001b7e    0x12a    sd s6,24(a0)
    0x84001b82    0x12e    addi a4,s9,1
    0x84001b86    0x132    sd a4,1088(s2)
    0x84001b8a    0x136    j ffffffff84001ade <create_untypeds_for_region+0x8a>
    0x84001b8c    0x138    li a0,0
    0x84001b8e    0x13a    j ffffffff84001aea <create_untypeds_for_region+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
110 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 181 nodes.

Section handleRecv (258 of 296)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 128 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `handleRecv`:

    0x8400a012      0x0    addi sp,sp,-128
    0x8400a014      0x2    sd s1,104(sp)         ; stack access
    0x8400a016      0x4    auipc s1,0x18
    0x8400a01a      0x8    addi s1,s1,-1982 # ffffffff84021858 <ksCurThread>
    0x8400a01e      0xc    ld a4,0(s1)
    0x8400a020      0xe    sd s2,96(sp)          ; stack access
    0x8400a022     0x10    sd s0,112(sp)         ; stack access
    0x8400a024     0x12    ld s2,72(a4) # fffffffff8000048 <ki_end+0x73fd9048>
    0x8400a028     0x16    sd s3,88(sp)          ; stack access
    0x8400a02a     0x18    mv s0,a1
    0x8400a02c     0x1a    mv s3,a0
    0x8400a02e     0x1c    mv a1,a4
    0x8400a030     0x1e    addi a0,sp,32
    0x8400a032     0x20    mv a2,s2
    0x8400a034     0x22    sd ra,120(sp)         ; stack access
    0x8400a036     0x24    jal ra,ffffffff840046a8 <lookupCap>
    0x8400a03a     0x28    ld a4,32(sp)          ; stack access
    0x8400a03c     0x2a    ld a5,40(sp)          ; stack access
    0x8400a03e     0x2c    bnez a4,ffffffff8400a10c <handleRecv+0xfa>
    0x8400a040     0x2e    srli a4,a5,0x3b
    0x8400a044     0x32    li a3,4
    0x8400a046     0x34    ld a0,0(s1)
    0x8400a048     0x36    beq a4,a3,ffffffff8400a0bc <handleRecv+0xaa>
    0x8400a04c     0x3a    li a3,6
    0x8400a04e     0x3c    bne a4,a3,ffffffff8400a086 <handleRecv+0x74>
    0x8400a052     0x40    li a2,-1
    0x8400a054     0x42    srli a4,a5,0x26
    0x8400a058     0x46    srli a3,a2,0x19
    0x8400a05c     0x4a    andi a4,a4,1
    0x8400a05e     0x4c    and a3,a3,a5
    0x8400a060     0x4e    beqz a4,ffffffff8400a066 <handleRecv+0x54>
    0x8400a062     0x50    slli a2,a2,0x27
    0x8400a064     0x52    or a3,a3,a2
    0x8400a066     0x54    ld a4,24(a3)
    0x8400a068     0x56    li a2,-1
    0x8400a06a     0x58    srli a5,a5,0x3a
    0x8400a06c     0x5a    srli a3,a4,0x26
    0x8400a070     0x5e    srli a1,a2,0x19
    0x8400a074     0x62    not a5,a5
    0x8400a078     0x66    andi a3,a3,1
    0x8400a07a     0x68    and a4,a4,a1
    0x8400a07c     0x6a    andi a5,a5,1
    0x8400a07e     0x6c    beqz a3,ffffffff8400a11a <handleRecv+0x108>
    0x8400a080     0x6e    slli a2,a2,0x27
    0x8400a082     0x70    or a4,a4,a2
    0x8400a084     0x72    beqz a5,ffffffff8400a11e <handleRecv+0x10c>
    0x8400a086     0x74    li a3,1
    0x8400a088     0x76    auipc a2,0x5
    0x8400a08c     0x7a    sd a3,888(a2) # ffffffff8400f400 <current_lookup_fault>
    0x8400a090     0x7e    li a5,-1
    0x8400a092     0x80    auipc a4,0x6
    0x8400a096     0x84    addi a4,a4,-146 # ffffffff84010000 <intStateIRQNode>
    0x8400a09a     0x88    auipc a3,0x5
    0x8400a09e     0x8c    sd zero,878(a3) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x8400a0a2     0x90    slli a5,a5,0x3f
    0x8400a0a4     0x92    addi a5,a5,1
    0x8400a0a6     0x94    sd a5,-1920(a4)
    0x8400a0aa     0x98    sd s2,-1912(a4)
    0x8400a0ae     0x9c    ld s0,112(sp)         ; stack access
    0x8400a0b0     0x9e    ld ra,120(sp)         ; stack access
    0x8400a0b2     0xa0    ld s1,104(sp)         ; stack access
    0x8400a0b4     0xa2    ld s2,96(sp)          ; stack access
    0x8400a0b6     0xa4    ld s3,88(sp)          ; stack access
    0x8400a0b8     0xa6    addi sp,sp,128
    0x8400a0ba     0xa8    j ffffffff84009b2e <handleFault>
    0x8400a0bc     0xaa    srli a4,a5,0x38
    0x8400a0c0     0xae    andi a4,a4,1
    0x8400a0c2     0xb0    beqz a4,ffffffff8400a086 <handleRecv+0x74>
    0x8400a0c4     0xb2    sd a5,0(sp)           ; stack access
    0x8400a0c6     0xb4    ld a5,48(sp)          ; stack access
    0x8400a0c8     0xb6    sd zero,16(sp)        ; stack access
    0x8400a0ca     0xb8    sd zero,24(sp)        ; stack access
    0x8400a0cc     0xba    sd a5,8(sp)           ; stack access
    0x8400a0ce     0xbc    beqz s0,ffffffff8400a0f4 <handleRecv+0xe2>
    0x8400a0d0     0xbe    ld s0,120(a0)
    0x8400a0d2     0xc0    mv a1,a0
    0x8400a0d4     0xc2    addi a0,sp,56
    0x8400a0d6     0xc4    mv a2,s0
    0x8400a0d8     0xc6    jal ra,ffffffff840046a8 <lookupCap>
    0x8400a0dc     0xca    ld a5,56(sp)          ; stack access
    0x8400a0de     0xcc    bnez a5,ffffffff8400a138 <handleRecv+0x126>
    0x8400a0e0     0xce    ld a5,64(sp)          ; stack access
    0x8400a0e2     0xd0    li a4,8
    0x8400a0e4     0xd2    ld a0,0(s1)
    0x8400a0e6     0xd4    srli a3,a5,0x3b
    0x8400a0ea     0xd8    bne a3,a4,ffffffff8400a13a <handleRecv+0x128>
    0x8400a0ee     0xdc    sd a5,16(sp)          ; stack access
    0x8400a0f0     0xde    ld a5,72(sp)          ; stack access
    0x8400a0f2     0xe0    sd a5,24(sp)          ; stack access
    0x8400a0f4     0xe2    ld s0,112(sp)         ; stack access
    0x8400a0f6     0xe4    ld a4,16(sp)          ; stack access
    0x8400a0f8     0xe6    ld a5,24(sp)          ; stack access
    0x8400a0fa     0xe8    ld a1,0(sp)           ; stack access
    0x8400a0fc     0xea    ld a2,8(sp)           ; stack access
    0x8400a0fe     0xec    ld ra,120(sp)         ; stack access
    0x8400a100     0xee    ld s1,104(sp)         ; stack access
    0x8400a102     0xf0    ld s2,96(sp)          ; stack access
    0x8400a104     0xf2    mv a3,s3
    0x8400a106     0xf4    ld s3,88(sp)          ; stack access
    0x8400a108     0xf6    addi sp,sp,128
    0x8400a10a     0xf8    j ffffffff84009d06 <receiveIPC>
    0x8400a10c     0xfa    ld a0,0(s1)
    0x8400a10e     0xfc    li a5,-1
    0x8400a110     0xfe    auipc a4,0x6
    0x8400a114    0x102    addi a4,a4,-272 # ffffffff84010000 <intStateIRQNode>
    0x8400a118    0x106    j ffffffff8400a0a2 <handleRecv+0x90>
    0x8400a11a    0x108    bnez a5,ffffffff8400a086 <handleRecv+0x74>
    0x8400a11c    0x10a    beqz a4,ffffffff8400a122 <handleRecv+0x110>
    0x8400a11e    0x10c    bne a0,a4,ffffffff8400a086 <handleRecv+0x74>
    0x8400a122    0x110    ld s0,112(sp)         ; stack access
    0x8400a124    0x112    ld a1,40(sp)          ; stack access
    0x8400a126    0x114    ld a2,48(sp)          ; stack access
    0x8400a128    0x116    ld ra,120(sp)         ; stack access
    0x8400a12a    0x118    ld s1,104(sp)         ; stack access
    0x8400a12c    0x11a    ld s2,96(sp)          ; stack access
    0x8400a12e    0x11c    mv a3,s3
    0x8400a130    0x11e    ld s3,88(sp)          ; stack access
    0x8400a132    0x120    addi sp,sp,128
    0x8400a134    0x122    j ffffffff84008170 <receiveSignal>
    0x8400a138    0x126    ld a0,0(s1)
    0x8400a13a    0x128    li a5,-1
    0x8400a13c    0x12a    slli a5,a5,0x3f
    0x8400a13e    0x12c    auipc a4,0x6
    0x8400a142    0x130    addi a4,a4,-318 # ffffffff84010000 <intStateIRQNode>
    0x8400a146    0x134    addi a5,a5,1
    0x8400a148    0x136    sd a5,-1920(a4)
    0x8400a14c    0x13a    sd s0,-1912(a4)
    0x8400a150    0x13e    j ffffffff8400a0ae <handleRecv+0x9c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
128 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 211 nodes.

Section cteRevoke (259 of 296)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 63 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `cteRevoke`:

    0x84009588     0x0    addi sp,sp,-80
    0x8400958a     0x2    sd s0,64(sp)          ; stack access
    0x8400958c     0x4    ld s0,24(a0)
    0x8400958e     0x6    lui a4,0xf8000
    0x84009592     0xa    sd s1,56(sp)          ; stack access
    0x84009594     0xc    srli a5,s0,0x26
    0x84009598    0x10    srli a4,a4,0x19
    0x8400959a    0x12    sd ra,72(sp)          ; stack access
    0x8400959c    0x14    sd s2,48(sp)          ; stack access
    0x8400959e    0x16    sd s3,40(sp)          ; stack access
    0x840095a0    0x18    sd s4,32(sp)          ; stack access
    0x840095a2    0x1a    andi a5,a5,1
    0x840095a4    0x1c    mv s1,a0
    0x840095a6    0x1e    and s0,s0,a4
    0x840095a8    0x20    beqz a5,ffffffff84009616 <cteRevoke+0x8e>
    0x840095aa    0x22    li a5,-1
    0x840095ac    0x24    slli a5,a5,0x27
    0x840095ae    0x26    or s0,s0,a5
    0x840095b0    0x28    lui s3,0xf8000
    0x840095b4    0x2c    li s2,1
    0x840095b6    0x2e    li s4,-1
    0x840095b8    0x30    srli s3,s3,0x19
    0x840095bc    0x34    slli s2,s2,0x26
    0x840095be    0x36    slli s4,s4,0x27
    0x840095c0    0x38    j ffffffff840095e2 <cteRevoke+0x5a>
    0x840095c2    0x3a    ld a1,16(sp)          ; stack access
    0x840095c4    0x3c    ld a2,24(sp)          ; stack access
    0x840095c6    0x3e    jal ra,ffffffff8400340c <emptySlot>
    0x840095ca    0x42    jal ra,ffffffff84009244 <preemptionPoint>
    0x840095ce    0x46    mv a5,a0
    0x840095d0    0x48    bnez a0,ffffffff840095fe <cteRevoke+0x76>
    0x840095d2    0x4a    ld s0,24(s1)
    0x840095d4    0x4c    and a5,s0,s2
    0x840095d8    0x50    and s0,s0,s3
    0x840095dc    0x54    beqz a5,ffffffff84009610 <cteRevoke+0x88>
    0x840095de    0x56    or s0,s0,s4
    0x840095e2    0x5a    mv a1,s0
    0x840095e4    0x5c    mv a0,s1
    0x840095e6    0x5e    jal ra,ffffffff84006096 <isMDBParentOf>
    0x840095ea    0x62    mv a5,a0
    0x840095ec    0x64    mv a1,s0
    0x840095ee    0x66    mv a0,sp
    0x840095f0    0x68    li a2,1
    0x840095f2    0x6a    beqz a5,ffffffff84009612 <cteRevoke+0x8a>
    0x840095f4    0x6c    jal ra,ffffffff84009308 <finaliseSlot>
    0x840095f8    0x70    ld a5,0(sp)           ; stack access
    0x840095fa    0x72    mv a0,s0
    0x840095fc    0x74    beqz a5,ffffffff840095c2 <cteRevoke+0x3a>
    0x840095fe    0x76    ld ra,72(sp)          ; stack access
    0x84009600    0x78    ld s0,64(sp)          ; stack access
    0x84009602    0x7a    ld s1,56(sp)          ; stack access
    0x84009604    0x7c    ld s2,48(sp)          ; stack access
    0x84009606    0x7e    ld s3,40(sp)          ; stack access
    0x84009608    0x80    ld s4,32(sp)          ; stack access
    0x8400960a    0x82    mv a0,a5
    0x8400960c    0x84    addi sp,sp,80
    0x8400960e    0x86    ret
    0x84009610    0x88    bnez s0,ffffffff840095e2 <cteRevoke+0x5a>
    0x84009612    0x8a    li a5,0
    0x84009614    0x8c    j ffffffff840095fe <cteRevoke+0x76>
    0x84009616    0x8e    bnez s0,ffffffff840095b0 <cteRevoke+0x28>
    0x84009618    0x90    li a5,0
    0x8400961a    0x92    j ffffffff840095fe <cteRevoke+0x76>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 99 nodes.

Section endTimeslice (260 of 296)
=================================

Deriving specifications
-----------------------

Section `endTimeslice` consists of 61 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `endTimeslice`:

    0x84009022     0x0    addi sp,sp,-16
    0x84009024     0x2    sd s0,0(sp)           ; stack access
    0x84009026     0x4    sd ra,8(sp)           ; stack access
    0x84009028     0x6    auipc s0,0x19
    0x8400902c     0xa    ld s0,-2048(s0) # ffffffff84021828 <ksCurSC>
    0x84009030     0xe    beqz a0,ffffffff84009036 <endTimeslice+0x14>
    0x84009032    0x10    ld a5,0(s0)
    0x84009034    0x12    bnez a5,ffffffff84009080 <endTimeslice+0x5e>
    0x84009036    0x14    ld a4,72(s0)
    0x84009038    0x16    addi a5,s0,88
    0x8400903c    0x1a    slli a4,a4,0x4
    0x8400903e    0x1c    add a5,a5,a4
    0x84009040    0x1e    ld a3,0(a5)
    0x84009042    0x20    auipc a4,0x18
    0x84009046    0x24    ld a4,2030(a4) # ffffffff84021830 <ksCurTime>
    0x8400904a    0x28    addi a4,a4,10
    0x8400904c    0x2a    bltu a4,a3,ffffffff84009058 <endTimeslice+0x36>
    0x84009050    0x2e    ld a4,8(a5)
    0x84009052    0x30    li a5,19
    0x84009054    0x32    bltu a5,a4,ffffffff840090ba <endTimeslice+0x98>
    0x84009058    0x36    ld a0,24(s0)
    0x8400905a    0x38    ld a5,288(a0) # ffffffffe0000120 <ki_end+0x5bfd9120>
    0x8400905e    0x3c    srli a5,a5,0x1
    0x84009060    0x3e    andi a5,a5,1
    0x84009062    0x40    beqz a5,ffffffff8400906a <endTimeslice+0x48>
    0x84009064    0x42    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84009068    0x46    ld a0,24(s0)
    0x8400906a    0x48    jal ra,ffffffff84007bb2 <tcbReleaseEnqueue>
    0x8400906e    0x4c    ld ra,8(sp)           ; stack access
    0x84009070    0x4e    ld s0,0(sp)           ; stack access
    0x84009072    0x50    li a5,1
    0x84009074    0x52    auipc a4,0x18
    0x84009078    0x56    sd a5,1988(a4) # ffffffff84021838 <ksReprogram>
    0x8400907c    0x5a    addi sp,sp,16
    0x8400907e    0x5c    ret
    0x84009080    0x5e    auipc a0,0x18
    0x84009084    0x62    ld a0,2008(a0) # ffffffff84021858 <ksCurThread>
    0x84009088    0x66    andi a4,a0,-1024
    0x8400908c    0x6a    ld a5,128(a4)
    0x8400908e    0x6c    li a3,4
    0x84009090    0x6e    srli a5,a5,0x3b
    0x84009092    0x70    bne a5,a3,ffffffff84009036 <endTimeslice+0x14>
    0x84009096    0x74    ld a6,48(s0)
    0x8400909a    0x78    ld s0,0(sp)           ; stack access
    0x8400909c    0x7a    ld a1,128(a4)
    0x8400909e    0x7c    ld a2,136(a4)
    0x840090a0    0x7e    ld ra,8(sp)           ; stack access
    0x840090a2    0x80    auipc a5,0x7
    0x840090a6    0x84    addi a5,a5,-162 # ffffffff84010000 <intStateIRQNode>
    0x840090aa    0x88    li a4,5
    0x840090ac    0x8a    sd a4,-1920(a5)
    0x840090b0    0x8e    sd a6,-1912(a5)
    0x840090b4    0x92    li a3,0
    0x840090b6    0x94    addi sp,sp,16
    0x840090b8    0x96    j ffffffff84008fbc <sendFaultIPC>
    0x840090ba    0x98    ld s0,0(sp)           ; stack access
    0x840090bc    0x9a    ld ra,8(sp)           ; stack access
    0x840090be    0x9c    auipc a0,0x18
    0x840090c2    0xa0    ld a0,1946(a0) # ffffffff84021858 <ksCurThread>
    0x840090c6    0xa4    addi sp,sp,16
    0x840090c8    0xa6    j ffffffff84007aa4 <tcbSchedAppend>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `endTimeslice` has 104 nodes.

Section completeSignal (261 of 296)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 47 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `completeSignal`:

    0x840080fc     0x0    addi sp,sp,-16
    0x840080fe     0x2    sd ra,8(sp)           ; stack access
    0x84008100     0x4    sd s0,0(sp)           ; stack access
    0x84008102     0x6    beqz a1,ffffffff84008166 <completeSignal+0x6a>
    0x84008104     0x8    ld a5,0(a0)
    0x84008106     0xa    li a4,2
    0x84008108     0xc    andi a3,a5,3
    0x8400810c    0x10    bne a3,a4,ffffffff84008166 <completeSignal+0x6a>
    0x84008110    0x14    ld a3,16(a0)
    0x84008112    0x16    ld a4,368(a1)
    0x84008116    0x1a    andi a5,a5,-4
    0x84008118    0x1c    sd a3,72(a1)
    0x8400811a    0x1e    sd a5,0(a0)
    0x8400811c    0x20    beqz a4,ffffffff84008126 <completeSignal+0x2a>
    0x8400811e    0x22    ld ra,8(sp)           ; stack access
    0x84008120    0x24    ld s0,0(sp)           ; stack access
    0x84008122    0x26    addi sp,sp,16
    0x84008124    0x28    ret
    0x84008126    0x2a    ld a0,32(a0)
    0x84008128    0x2c    li s0,-1
    0x8400812a    0x2e    srli a4,s0,0x19
    0x8400812e    0x32    srli a5,a0,0x26
    0x84008132    0x36    andi a5,a5,1
    0x84008134    0x38    and a0,a0,a4
    0x84008136    0x3a    beqz a5,ffffffff8400816a <completeSignal+0x6e>
    0x84008138    0x3c    slli s0,s0,0x27
    0x8400813a    0x3e    or s0,s0,a0
    0x8400813c    0x40    ld a5,24(s0)
    0x8400813e    0x42    bnez a5,ffffffff8400811e <completeSignal+0x22>
    0x84008140    0x44    mv a0,s0
    0x84008142    0x46    jal ra,ffffffff840072a0 <schedContext_donate>
    0x84008146    0x4a    auipc a5,0x19
    0x8400814a    0x4e    ld a5,1762(a5) # ffffffff84021828 <ksCurSC>
    0x8400814e    0x52    beq a5,s0,ffffffff8400815c <completeSignal+0x60>
    0x84008152    0x56    ld a5,0(s0)
    0x84008154    0x58    beqz a5,ffffffff8400815c <completeSignal+0x60>
    0x84008156    0x5a    mv a0,s0
    0x84008158    0x5c    jal ra,ffffffff840033a2 <refill_unblock_check.part.0>
    0x8400815c    0x60    mv a0,s0
    0x8400815e    0x62    ld s0,0(sp)           ; stack access
    0x84008160    0x64    ld ra,8(sp)           ; stack access
    0x84008162    0x66    addi sp,sp,16
    0x84008164    0x68    j ffffffff84007cca <schedContext_resume>
    0x84008166    0x6a    jal ra,ffffffff840036cc <halt>
    0x8400816a    0x6e    beqz a0,ffffffff8400811e <completeSignal+0x22>
    0x8400816c    0x70    mv s0,a0
    0x8400816e    0x72    j ffffffff8400813c <completeSignal+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 83 nodes.

Section restart_part_0 (262 of 296)
===================================

Deriving specifications
-----------------------

Section `restart_part_0` consists of 48 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `restart_part_0`:

    0x84007cf2     0x0    addi sp,sp,-16
    0x84007cf4     0x2    sd s0,0(sp)           ; stack access
    0x84007cf6     0x4    sd ra,8(sp)           ; stack access
    0x84007cf8     0x6    mv s0,a0
    0x84007cfa     0x8    jal ra,ffffffff84006fc0 <cancelIPC>
    0x84007cfe     0xc    ld a5,280(s0)
    0x84007d02    0x10    auipc a4,0x1a
    0x84007d06    0x14    ld a4,-1194(a4) # ffffffff84021858 <ksCurThread>
    0x84007d0a    0x18    andi a5,a5,-16
    0x84007d0c    0x1a    ori a5,a5,2
    0x84007d10    0x1e    sd a5,280(s0)
    0x84007d14    0x22    beq s0,a4,ffffffff84007d36 <restart.part.0+0x44>
    0x84007d18    0x26    ld a0,368(s0)
    0x84007d1c    0x2a    jal ra,ffffffff84007cca <schedContext_resume>
    0x84007d20    0x2e    ld a5,280(s0)
    0x84007d24    0x32    li a4,1
    0x84007d26    0x34    andi a5,a5,15
    0x84007d28    0x36    addi a5,a5,-1
    0x84007d2a    0x38    bgeu a4,a5,ffffffff84007d50 <restart.part.0+0x5e>
    0x84007d2e    0x3c    ld ra,8(sp)           ; stack access
    0x84007d30    0x3e    ld s0,0(sp)           ; stack access
    0x84007d32    0x40    addi sp,sp,16
    0x84007d34    0x42    ret
    0x84007d36    0x44    auipc a5,0x1a
    0x84007d3a    0x48    ld a5,-1262(a5) # ffffffff84021848 <ksSchedulerAction>
    0x84007d3e    0x4c    ld a0,368(s0)
    0x84007d42    0x50    bnez a5,ffffffff84007d1c <restart.part.0+0x2a>
    0x84007d44    0x52    beqz a0,ffffffff84007d4a <restart.part.0+0x58>
    0x84007d46    0x54    ld a5,64(a0)
    0x84007d48    0x56    bnez a5,ffffffff84007d6e <restart.part.0+0x7c>
    0x84007d4a    0x58    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84007d4e    0x5c    j ffffffff84007d18 <restart.part.0+0x26>
    0x84007d50    0x5e    ld a5,368(s0)
    0x84007d54    0x62    beqz a5,ffffffff84007d2e <restart.part.0+0x3c>
    0x84007d56    0x64    ld a5,64(a5)
    0x84007d58    0x66    beqz a5,ffffffff84007d2e <restart.part.0+0x3c>
    0x84007d5a    0x68    ld a5,288(s0)
    0x84007d5e    0x6c    andi a5,a5,1
    0x84007d60    0x6e    bnez a5,ffffffff84007d2e <restart.part.0+0x3c>
    0x84007d62    0x70    mv a0,s0
    0x84007d64    0x72    ld s0,0(sp)           ; stack access
    0x84007d66    0x74    ld ra,8(sp)           ; stack access
    0x84007d68    0x76    addi sp,sp,16
    0x84007d6a    0x78    j ffffffff84004ca6 <possibleSwitchTo>
    0x84007d6e    0x7c    ld a5,288(s0)
    0x84007d72    0x80    andi a5,a5,1
    0x84007d74    0x82    beqz a5,ffffffff84007d1c <restart.part.0+0x2a>
    0x84007d76    0x84    j ffffffff84007d4a <restart.part.0+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart_part_0` has 89 nodes.

Section decodeIRQControlInvocation (263 of 296)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 122 instructions.


Stack analysis
---------------

40 stack accesses found. Annotated code for `decodeIRQControlInvocation`:

    0x840057fa      0x0    addi sp,sp,-80
    0x840057fc      0x2    sd s0,64(sp)          ; stack access
    0x840057fe      0x4    mv a5,a0
    0x84005800      0x6    sd ra,72(sp)          ; stack access
    0x84005802      0x8    sd s1,56(sp)          ; stack access
    0x84005804      0xa    sd s2,48(sp)          ; stack access
    0x84005806      0xc    sd s3,40(sp)          ; stack access
    0x84005808      0xe    sd s4,32(sp)          ; stack access
    0x8400580a     0x10    li a4,25
    0x8400580c     0x12    mv a0,a1
    0x8400580e     0x14    mv s0,a2
    0x84005810     0x16    bne a5,a4,ffffffff840058ba <decodeIRQControlInvocation+0xc0>
    0x84005814     0x1a    li a5,2
    0x84005816     0x1c    bgeu a5,a1,ffffffff840058d4 <decodeIRQControlInvocation+0xda>
    0x8400581a     0x20    auipc a4,0xa
    0x8400581e     0x24    ld a4,486(a4) # ffffffff8400fa00 <current_extra_caps>
    0x84005822     0x28    beqz a4,ffffffff840058d4 <decodeIRQControlInvocation+0xda>
    0x84005824     0x2a    auipc s3,0x1c
    0x84005828     0x2e    addi s3,s3,52 # ffffffff84021858 <ksCurThread>
    0x8400582c     0x32    ld a3,0(s3)
    0x84005830     0x36    li a5,53
    0x84005834     0x3a    ld s1,88(a3)
    0x84005836     0x3c    addi a2,s1,-1
    0x8400583a     0x40    bltu a5,a2,ffffffff84005908 <decodeIRQControlInvocation+0x10e>
    0x8400583e     0x44    auipc s4,0x9
    0x84005842     0x48    addi s4,s4,1986 # ffffffff8400f000 <riscvKSASIDTable>
    0x84005846     0x4c    slli a5,s1,0x3
    0x8400584a     0x50    add a5,a5,s4
    0x8400584c     0x52    ld a5,1736(a5)
    0x84005850     0x56    bnez a5,ffffffff840058f0 <decodeIRQControlInvocation+0xf6>
    0x84005852     0x58    ld a2,8(a4)
    0x84005854     0x5a    ld a1,0(a4)
    0x84005856     0x5c    ld a4,104(a3)
    0x84005858     0x5e    ld a3,96(a3)
    0x8400585a     0x60    li a0,0
    0x8400585c     0x62    sd a1,0(sp)           ; stack access
    0x8400585e     0x64    sd a2,8(sp)           ; stack access
    0x84005860     0x66    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x84005864     0x6a    sd a0,16(sp)          ; stack access
    0x84005866     0x6c    sd a1,24(sp)          ; stack access
    0x84005868     0x6e    mv s2,a1
    0x8400586a     0x70    bnez a0,ffffffff840058aa <decodeIRQControlInvocation+0xb0>
    0x8400586c     0x72    ld a5,0(a1)
    0x8400586e     0x74    srli a5,a5,0x3b
    0x84005870     0x76    bnez a5,ffffffff84005928 <decodeIRQControlInvocation+0x12e>
    0x84005872     0x78    ld a0,0(s3)
    0x84005876     0x7c    ld a5,280(a0)
    0x8400587a     0x80    andi a5,a5,-16
    0x8400587c     0x82    ori a5,a5,2
    0x84005880     0x86    sd a5,280(a0)
    0x84005884     0x8a    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84005888     0x8e    mv a2,s0
    0x8400588a     0x90    ld s0,64(sp)          ; stack access
    0x8400588c     0x92    ld ra,72(sp)          ; stack access
    0x8400588e     0x94    ld s3,40(sp)          ; stack access
    0x84005890     0x96    ld s4,32(sp)          ; stack access
    0x84005892     0x98    mv a1,s2
    0x84005894     0x9a    mv a0,s1
    0x84005896     0x9c    ld s2,48(sp)          ; stack access
    0x84005898     0x9e    ld s1,56(sp)          ; stack access
    0x8400589a     0xa0    addi sp,sp,80
    0x8400589c     0xa2    j ffffffff8400563e <invokeIRQControl>
    0x8400589e     0xa4    li a5,3
    0x840058a0     0xa6    auipc a4,0xa
    0x840058a4     0xaa    sd a5,-480(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840058a8     0xae    li a0,3
    0x840058aa     0xb0    ld ra,72(sp)          ; stack access
    0x840058ac     0xb2    ld s0,64(sp)          ; stack access
    0x840058ae     0xb4    ld s1,56(sp)          ; stack access
    0x840058b0     0xb6    ld s2,48(sp)          ; stack access
    0x840058b2     0xb8    ld s3,40(sp)          ; stack access
    0x840058b4     0xba    ld s4,32(sp)          ; stack access
    0x840058b6     0xbc    addi sp,sp,80
    0x840058b8     0xbe    ret
    0x840058ba     0xc0    li a4,43
    0x840058be     0xc4    bne a5,a4,ffffffff8400589e <decodeIRQControlInvocation+0xa4>
    0x840058c2     0xc8    ld s0,64(sp)          ; stack access
    0x840058c4     0xca    ld ra,72(sp)          ; stack access
    0x840058c6     0xcc    ld s1,56(sp)          ; stack access
    0x840058c8     0xce    ld s2,48(sp)          ; stack access
    0x840058ca     0xd0    ld s3,40(sp)          ; stack access
    0x840058cc     0xd2    ld s4,32(sp)          ; stack access
    0x840058ce     0xd4    mv a1,a2
    0x840058d0     0xd6    addi sp,sp,80
    0x840058d2     0xd8    j ffffffff840056e4 <Arch_decodeIRQControlInvocation.part.0>
    0x840058d4     0xda    ld ra,72(sp)          ; stack access
    0x840058d6     0xdc    ld s0,64(sp)          ; stack access
    0x840058d8     0xde    li a5,7
    0x840058da     0xe0    auipc a4,0xa
    0x840058de     0xe4    sd a5,-538(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840058e2     0xe8    ld s1,56(sp)          ; stack access
    0x840058e4     0xea    ld s2,48(sp)          ; stack access
    0x840058e6     0xec    ld s3,40(sp)          ; stack access
    0x840058e8     0xee    ld s4,32(sp)          ; stack access
    0x840058ea     0xf0    li a0,3
    0x840058ec     0xf2    addi sp,sp,80
    0x840058ee     0xf4    ret
    0x840058f0     0xf6    ld ra,72(sp)          ; stack access
    0x840058f2     0xf8    ld s0,64(sp)          ; stack access
    0x840058f4     0xfa    li a5,9
    0x840058f6     0xfc    sd a5,1728(s4)
    0x840058fa    0x100    ld s1,56(sp)          ; stack access
    0x840058fc    0x102    ld s2,48(sp)          ; stack access
    0x840058fe    0x104    ld s3,40(sp)          ; stack access
    0x84005900    0x106    ld s4,32(sp)          ; stack access
    0x84005902    0x108    li a0,3
    0x84005904    0x10a    addi sp,sp,80
    0x84005906    0x10c    ret
    0x84005908    0x10e    auipc a5,0x9
    0x8400590c    0x112    addi a5,a5,1784 # ffffffff8400f000 <riscvKSASIDTable>
    0x84005910    0x116    li a4,4
    0x84005912    0x118    sd a4,1728(a5)
    0x84005916    0x11c    li a4,1
    0x84005918    0x11e    sd a4,1696(a5)
    0x8400591c    0x122    li a4,54
    0x84005920    0x126    sd a4,1704(a5)
    0x84005924    0x12a    li a0,3
    0x84005926    0x12c    j ffffffff840058aa <decodeIRQControlInvocation+0xb0>
    0x84005928    0x12e    li a5,8
    0x8400592a    0x130    sd a5,1728(s4)
    0x8400592e    0x134    li a0,3
    0x84005930    0x136    j ffffffff840058aa <decodeIRQControlInvocation+0xb0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
122 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 204 nodes.

Section Arch_finaliseCap (264 of 296)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 128 instructions.

Skipping 13200073 sfence.vma zero,s2


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
20 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84004072      0x0    addi sp,sp,-80
    0x84004074      0x2    sd s0,64(sp)          ; stack access
    0x84004076      0x4    sd s1,56(sp)          ; stack access
    0x84004078      0x6    sd ra,72(sp)          ; stack access
    0x8400407a      0x8    sd s2,48(sp)          ; stack access
    0x8400407c      0xa    sd a1,16(sp)          ; stack access
    0x8400407e      0xc    sd a2,24(sp)          ; stack access
    0x84004080      0xe    srli a5,a1,0x3b
    0x84004084     0x12    li a4,3
    0x84004086     0x14    mv s1,a1
    0x84004088     0x16    mv s0,a0
    0x8400408a     0x18    beq a5,a4,ffffffff840040b8 <Arch_finaliseCap+0x46>
    0x8400408e     0x1c    li a4,13
    0x84004090     0x1e    beq a5,a4,ffffffff84004154 <Arch_finaliseCap+0xe2>
    0x84004094     0x22    li a4,1
    0x84004096     0x24    beq a5,a4,ffffffff84004116 <Arch_finaliseCap+0xa4>
    0x8400409a     0x28    ld ra,72(sp)          ; stack access
    0x8400409c     0x2a    sd zero,0(s0)         ; stack access
    0x840040a0     0x2e    sd zero,8(s0)         ; stack access
    0x840040a4     0x32    sd zero,16(s0)        ; stack access
    0x840040a8     0x36    sd zero,24(s0)        ; stack access
    0x840040ac     0x3a    mv a0,s0
    0x840040ae     0x3c    ld s0,64(sp)          ; stack access
    0x840040b0     0x3e    ld s1,56(sp)          ; stack access
    0x840040b2     0x40    ld s2,48(sp)          ; stack access
    0x840040b4     0x42    addi sp,sp,80
    0x840040b6     0x44    ret
    0x840040b8     0x46    beqz a3,ffffffff8400409a <Arch_finaliseCap+0x28>
    0x840040ba     0x48    srli a5,a1,0x27
    0x840040be     0x4c    andi a5,a5,1
    0x840040c0     0x4e    beqz a5,ffffffff8400409a <Arch_finaliseCap+0x28>
    0x840040c2     0x50    srli s2,a2,0x30
    0x840040c6     0x54    mv a0,s2
    0x840040c8     0x56    sd a2,8(sp)           ; stack access
    0x840040ca     0x58    jal ra,ffffffff840031cc <findVSpaceForASID>
    0x840040ce     0x5c    ld a2,8(sp)           ; stack access
    0x840040d0     0x5e    li a5,-1
    0x840040d2     0x60    srli a6,a5,0x19
    0x840040d6     0x64    srli a4,a2,0x9
    0x840040da     0x68    srli a3,a4,0x26
    0x840040de     0x6c    sd a0,32(sp)          ; stack access
    0x840040e0     0x6e    sd a1,40(sp)          ; stack access
    0x840040e2     0x70    andi a3,a3,1
    0x840040e4     0x72    and a4,a4,a6
    0x840040e8     0x76    beqz a3,ffffffff840040ee <Arch_finaliseCap+0x7c>
    0x840040ea     0x78    slli a5,a5,0x27
    0x840040ec     0x7a    or a4,a4,a5
    0x840040ee     0x7c    ld a5,32(sp)          ; stack access
    0x840040f0     0x7e    bnez a5,ffffffff840040f8 <Arch_finaliseCap+0x86>
    0x840040f2     0x80    ld a5,40(sp)          ; stack access
    0x840040f4     0x82    beq a5,a4,ffffffff84004198 <Arch_finaliseCap+0x126>
    0x840040f8     0x86    li a5,-1
    0x840040fa     0x88    srli a3,s1,0x26
    0x840040fe     0x8c    srli a1,a5,0x19
    0x84004102     0x90    andi a3,a3,1
    0x84004104     0x92    and a1,a1,s1
    0x84004106     0x94    beqz a3,ffffffff8400410c <Arch_finaliseCap+0x9a>
    0x84004108     0x96    slli a5,a5,0x27
    0x8400410a     0x98    or a1,a1,a5
    0x8400410c     0x9a    mv a2,a4
    0x8400410e     0x9c    mv a0,s2
    0x84004110     0x9e    jal ra,ffffffff84003b8c <unmapPageTable>
    0x84004114     0xa2    j ffffffff8400409a <Arch_finaliseCap+0x28>
    0x84004116     0xa4    srli a1,a2,0x30
    0x8400411a     0xa8    beqz a1,ffffffff8400409a <Arch_finaliseCap+0x28>
    0x8400411c     0xaa    li a3,-1
    0x8400411e     0xac    slli a5,a5,0x26
    0x84004120     0xae    srli a0,s1,0x39
    0x84004124     0xb2    srli a4,a3,0x19
    0x84004128     0xb6    and a5,a5,s1
    0x8400412a     0xb8    andi a0,a0,3
    0x8400412c     0xba    and s1,s1,a4
    0x8400412e     0xbc    beqz a5,ffffffff84004134 <Arch_finaliseCap+0xc2>
    0x84004130     0xbe    slli a3,a3,0x27
    0x84004132     0xc0    or s1,s1,a3
    0x84004134     0xc2    srli a3,a2,0x9
    0x84004138     0xc6    srli a4,a3,0x26
    0x8400413c     0xca    li a5,-1
    0x8400413e     0xcc    srli a2,a5,0x19
    0x84004142     0xd0    andi a4,a4,1
    0x84004144     0xd2    and a3,a3,a2
    0x84004146     0xd4    beqz a4,ffffffff8400414c <Arch_finaliseCap+0xda>
    0x84004148     0xd6    slli a5,a5,0x27
    0x8400414a     0xd8    or a3,a3,a5
    0x8400414c     0xda    mv a2,s1
    0x8400414e     0xdc    jal ra,ffffffff84003c14 <unmapPage>
    0x84004152     0xe0    j ffffffff8400409a <Arch_finaliseCap+0x28>
    0x84004154     0xe2    beqz a3,ffffffff8400409a <Arch_finaliseCap+0x28>
    0x84004156     0xe4    slli a5,a1,0x2
    0x8400415a     0xe8    srli a4,a5,0x26
    0x8400415e     0xec    lui a3,0xf8000
    0x84004162     0xf0    srli a3,a3,0x19
    0x84004164     0xf2    andi a4,a4,1
    0x84004166     0xf4    and a5,a5,a3
    0x84004168     0xf6    beqz a4,ffffffff84004170 <Arch_finaliseCap+0xfe>
    0x8400416a     0xf8    li a4,-1
    0x8400416c     0xfa    slli a4,a4,0x27
    0x8400416e     0xfc    or a5,a5,a4
    0x84004170     0xfe    srli s1,s1,0x31
    0x84004172    0x100    auipc a4,0xb
    0x84004176    0x104    addi a4,a4,-370 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400417a    0x108    andi s1,s1,1016
    0x8400417e    0x10c    add s1,s1,a4
    0x84004180    0x10e    ld a4,0(s1)
    0x84004182    0x110    bne a4,a5,ffffffff8400409a <Arch_finaliseCap+0x28>
    0x84004186    0x114    auipc a0,0x1d
    0x8400418a    0x118    ld a0,1746(a0) # ffffffff84021858 <ksCurThread>
    0x8400418e    0x11c    sd zero,0(s1)
    0x84004192    0x120    jal ra,ffffffff84003c98 <setVMRoot>
    0x84004196    0x124    j ffffffff8400409a <Arch_finaliseCap+0x28>
    0x84004198    0x126    srli a5,a2,0x39
    0x8400419c    0x12a    slli a5,a5,0x3
    0x8400419e    0x12c    auipc a3,0xb
    0x840041a2    0x130    addi a3,a3,-414 # ffffffff8400f000 <riscvKSASIDTable>
    0x840041a6    0x134    add a5,a5,a3
    0x840041a8    0x136    ld a5,0(a5)
    0x840041aa    0x138    beqz a5,ffffffff8400409a <Arch_finaliseCap+0x28>
    0x840041ae    0x13c    andi a3,s2,511
    0x840041b2    0x140    slli a3,a3,0x3
    0x840041b4    0x142    add a5,a5,a3
    0x840041b6    0x144    ld a3,0(a5)
    0x840041b8    0x146    bne a4,a3,ffffffff8400409a <Arch_finaliseCap+0x28>
    0x840041bc    0x14a    sfence.vma zero,s2
    0x840041c0    0x14e    auipc a0,0x1d
    0x840041c4    0x152    ld a0,1688(a0) # ffffffff84021858 <ksCurThread>
    0x840041c8    0x156    sd zero,0(a5)
    0x840041cc    0x15a    jal ra,ffffffff84003c98 <setVMRoot>
    0x840041d0    0x15e    j ffffffff8400409a <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
128 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 196 nodes.

Section create_initial_thread (265 of 296)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 158 instructions.

RVC_FFFFFFFFT_____FF.

Stack analysis
---------------

45 stack accesses found. Annotated code for `create_initial_thread`:

    0x84001794      0x0    addi sp,sp,-192
    0x84001796      0x2    sd s2,144(sp)         ; stack access
    0x84001798      0x4    auipc s2,0xd
    0x8400179c      0x8    addi s2,s2,-920 # ffffffff8400e400 <ndks_boot>
    0x840017a0      0xc    sd s0,160(sp)         ; stack access
    0x840017a2      0xe    ld s0,1152(s2)
    0x840017a6     0x12    sd ra,168(sp)         ; stack access
    0x840017a8     0x14    sd s1,152(sp)         ; stack access
    0x840017aa     0x16    sd s3,136(sp)         ; stack access
    0x840017ac     0x18    sd s5,120(sp)         ; stack access
    0x840017ae     0x1a    sd s6,112(sp)         ; stack access
    0x840017b0     0x1c    mv s1,a7
    0x840017b2     0x1e    sd s4,128(sp)         ; stack access
    0x840017b4     0x20    li a7,32
    0x840017b8     0x24    sd s7,104(sp)         ; stack access
    0x840017ba     0x26    sd a7,768(s0)
    0x840017be     0x2a    mv s5,a5
    0x840017c0     0x2c    sd a1,24(sp)          ; stack access
    0x840017c2     0x2e    sd a3,8(sp)           ; stack access
    0x840017c4     0x30    sd a2,0(sp)           ; stack access
    0x840017c6     0x32    mv s3,a4
    0x840017c8     0x34    mv s6,a6
    0x840017ca     0x36    sd s1,184(sp)         ; stack access
    0x840017cc     0x38    sd a0,16(sp)          ; stack access
    0x840017ce     0x3a    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840017d2     0x3e    ld a3,192(sp)         ; stack access
    0x840017d4     0x40    addi a1,a0,320
    0x840017d8     0x44    mv a2,s1
    0x840017da     0x46    addi a0,sp,72
    0x840017dc     0x48    jal ra,ffffffff84006146 <deriveCap>
    0x840017e0     0x4c    ld a5,72(sp)          ; stack access
    0x840017e2     0x4e    bnez a5,ffffffff84001956 <create_initial_thread+0x1c2>
    0x840017e6     0x52    ld a1,24(sp)          ; stack access
    0x840017e8     0x54    ld a0,16(sp)          ; stack access
    0x840017ea     0x56    addi s0,s0,512
    0x840017ee     0x5a    auipc s7,0x20
    0x840017f2     0x5e    addi s7,s7,26 # ffffffff84021808 <ksDomScheduleIdx>
    0x840017f6     0x62    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840017fa     0x66    ld a3,1152(s2)
    0x840017fe     0x6a    ld a1,24(sp)          ; stack access
    0x84001800     0x6c    mv a2,a0
    0x84001802     0x6e    ld a0,16(sp)          ; stack access
    0x84001804     0x70    addi a2,a2,64
    0x84001808     0x74    auipc s1,0xc
    0x8400180c     0x78    addi s1,s1,1512 # ffffffff8400ddf0 <syscall_fault_message>
    0x84001810     0x7c    jal ra,ffffffff84004ec2 <cteInsert>
    0x84001814     0x80    ld a1,24(sp)          ; stack access
    0x84001816     0x82    ld a0,16(sp)          ; stack access
    0x84001818     0x84    li s4,3
    0x8400181a     0x86    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x8400181e     0x8a    ld a3,1152(s2)
    0x84001822     0x8e    ld a1,8(sp)           ; stack access
    0x84001824     0x90    mv a2,a0
    0x84001826     0x92    ld a0,0(sp)           ; stack access
    0x84001828     0x94    addi a3,a3,32
    0x8400182c     0x98    addi a2,a2,96
    0x84001830     0x9c    jal ra,ffffffff84004ec2 <cteInsert>
    0x84001834     0xa0    ld a1,24(sp)          ; stack access
    0x84001836     0xa2    ld a0,16(sp)          ; stack access
    0x84001838     0xa4    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x8400183c     0xa8    ld a3,1152(s2)
    0x84001840     0xac    ld a1,88(sp)          ; stack access
    0x84001842     0xae    mv a2,a0
    0x84001844     0xb0    ld a0,80(sp)          ; stack access
    0x84001846     0xb2    addi a3,a3,64
    0x8400184a     0xb6    addi a2,a2,320
    0x8400184e     0xba    jal ra,ffffffff84004ec2 <cteInsert>
    0x84001852     0xbe    ld a2,280(s0)
    0x84001856     0xc2    ld a3,1160(s2)
    0x8400185a     0xc6    ld a1,0(s7)
    0x8400185e     0xca    sd s6,384(s0)
    0x84001862     0xce    sd a3,368(s0)
    0x84001866     0xd2    sd s5,72(s0)
    0x8400186a     0xd6    sd s3,272(s0)
    0x8400186e     0xda    andi a5,a2,-16
    0x84001872     0xde    slli a1,a1,0x4
    0x84001874     0xe0    li a2,2
    0x84001876     0xe2    sd a2,64(a3)
    0x84001878     0xe4    add a1,a1,s1
    0x8400187a     0xe6    lui a2,0x1
    0x8400187c     0xe8    ld a1,80(a1)
    0x8400187e     0xea    addi a2,a2,904 # 1388 <KERNEL_OFFSET-0xfffffffeffffec78>
    0x84001882     0xee    auipc a4,0x20
    0x84001886     0xf2    ld a4,-82(a4) # ffffffff84021830 <ksCurTime>
    0x8400188a     0xf6    sd a2,96(a3)
    0x8400188c     0xf8    li a2,1
    0x8400188e     0xfa    sd a2,80(a3)
    0x84001890     0xfc    sd a4,88(a3)
    0x84001892     0xfe    sd a4,104(a3)
    0x84001894    0x100    sd zero,0(a3)
    0x84001898    0x104    sd zero,72(a3)
    0x8400189c    0x108    sd zero,112(a3)
    0x840018a0    0x10c    sd s0,24(a3)
    0x840018a2    0x10e    ori a5,a5,1
    0x840018a6    0x112    li a3,255
    0x840018aa    0x116    mv a0,s0
    0x840018ac    0x118    sd a3,360(s0)
    0x840018b0    0x11c    sd a3,352(s0)
    0x840018b4    0x120    sd a1,344(s0)
    0x840018b8    0x124    sd a5,280(s0)
    0x840018bc    0x128    sd a4,40(sp)          ; stack access
    0x840018be    0x12a    sd a4,56(sp)          ; stack access
    0x840018c0    0x12c    sd zero,48(sp)        ; stack access
    0x840018c2    0x12e    sd zero,64(sp)        ; stack access
    0x840018c4    0x130    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840018c8    0x134    ld a5,0(s7)
    0x840018cc    0x138    li a3,1000
    0x840018d0    0x13c    ld a1,24(sp)          ; stack access
    0x840018d2    0x13e    slli a5,a5,0x4
    0x840018d4    0x140    add s1,s1,a5
    0x840018d6    0x142    ld a5,88(s1)
    0x840018d8    0x144    ld a4,80(s1)
    0x840018da    0x146    ld a0,16(sp)          ; stack access
    0x840018dc    0x148    mul a5,a5,a3
    0x840018e0    0x14c    auipc a3,0x20
    0x840018e4    0x150    sd a4,-200(a3) # ffffffff84021818 <ksCurDomain>
    0x840018e8    0x154    auipc a4,0x20
    0x840018ec    0x158    sd a5,-216(a4) # ffffffff84021810 <ksDomainTime>
    0x840018f0    0x15c    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840018f4    0x160    slli a4,s0,0x19
    0x840018f8    0x164    ld s1,368(s0)
    0x840018fc    0x168    slli a3,s4,0x3d
    0x84001900    0x16c    srli a4,a4,0x19
    0x84001902    0x16e    mv a5,a0
    0x84001904    0x170    or a4,a4,a3
    0x84001906    0x172    ld a0,16(sp)          ; stack access
    0x84001908    0x174    ld a1,24(sp)          ; stack access
    0x8400190a    0x176    lui a3,0xfe000
    0x8400190e    0x17a    srli a3,a3,0x9
    0x84001910    0x17c    slli s1,s1,0x10
    0x84001912    0x17e    and s1,s1,a3
    0x84001914    0x180    sd a4,32(a5)
    0x84001916    0x182    sd zero,40(a5)
    0x8400191a    0x186    sd zero,48(a5)
    0x8400191e    0x18a    sd s4,56(a5)
    0x84001922    0x18e    lui a5,0x2
    0x84001924    0x190    or s1,s1,a5
    0x84001926    0x192    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x8400192a    0x196    li a5,-5
    0x8400192c    0x198    slli a5,a5,0x3c
    0x8400192e    0x19a    sd a5,448(a0)
    0x84001932    0x19e    sd s1,456(a0)
    0x84001936    0x1a2    sd zero,464(a0)
    0x8400193a    0x1a6    sd s4,472(a0)
    0x8400193e    0x1aa    ld ra,168(sp)         ; stack access
    0x84001940    0x1ac    mv a0,s0
    0x84001942    0x1ae    ld s0,160(sp)         ; stack access
    0x84001944    0x1b0    ld s1,152(sp)         ; stack access
    0x84001946    0x1b2    ld s2,144(sp)         ; stack access
    0x84001948    0x1b4    ld s3,136(sp)         ; stack access
    0x8400194a    0x1b6    ld s4,128(sp)         ; stack access
    0x8400194c    0x1b8    ld s5,120(sp)         ; stack access
    0x8400194e    0x1ba    ld s6,112(sp)         ; stack access
    0x84001950    0x1bc    ld s7,104(sp)         ; stack access
    0x84001952    0x1be    addi sp,sp,192
    0x84001954    0x1c0    ret
    0x84001956    0x1c2    li s0,0
    0x84001958    0x1c4    j ffffffff8400193e <create_initial_thread+0x1aa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
158 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 258 nodes.

Section init_freemem (266 of 296)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 278 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `init_freemem`:

    0x84001382      0x0    addi sp,sp,-176
    0x84001384      0x2    sd s1,152(sp)         ; stack access
    0x84001386      0x4    sd s3,136(sp)         ; stack access
    0x84001388      0x6    sd s4,128(sp)         ; stack access
    0x8400138a      0x8    sd s6,112(sp)         ; stack access
    0x8400138c      0xa    sd a4,0(sp)           ; stack access
    0x8400138e      0xc    sd a5,8(sp)           ; stack access
    0x84001390      0xe    sd ra,168(sp)         ; stack access
    0x84001392     0x10    sd s0,160(sp)         ; stack access
    0x84001394     0x12    sd s2,144(sp)         ; stack access
    0x84001396     0x14    sd s5,120(sp)         ; stack access
    0x84001398     0x16    sd s7,104(sp)         ; stack access
    0x8400139a     0x18    sd s8,96(sp)          ; stack access
    0x8400139c     0x1a    sd s9,88(sp)          ; stack access
    0x8400139e     0x1c    mv s3,a0
    0x840013a0     0x1e    mv s4,a2
    0x840013a2     0x20    mv s6,a3
    0x840013a4     0x22    mv s1,a6
    0x840013a6     0x24    auipc a5,0xd
    0x840013aa     0x28    addi a5,a5,914 # ffffffff8400e738 <ndks_boot+0x338>
    0x840013ae     0x2c    auipc a4,0xd
    0x840013b2     0x30    addi a4,a4,1162 # ffffffff8400e838 <ndks_boot+0x438>
    0x840013b6     0x34    sd zero,0(a5)
    0x840013ba     0x38    sd zero,8(a5)
    0x840013be     0x3c    addi a5,a5,16
    0x840013c0     0x3e    bne a5,a4,ffffffff840013b6 <init_freemem+0x34>
    0x840013c4     0x42    beqz s3,ffffffff84001670 <init_freemem+0x2ee>
    0x840013c8     0x46    slli a7,s3,0x4
    0x840013cc     0x4a    li a6,-1
    0x840013ce     0x4c    li a0,127
    0x840013d2     0x50    li t1,1
    0x840013d4     0x52    auipc a5,0x1
    0x840013d8     0x56    addi a5,a5,340 # ffffffff84002528 <avail_reg+0x8>
    0x840013dc     0x5a    add a7,a7,a1
    0x840013de     0x5c    slli a6,a6,0x26
    0x840013e0     0x5e    slli a0,a0,0x1f
    0x840013e2     0x60    slli t1,t1,0x26
    0x840013e4     0x62    ld a4,0(a1)
    0x840013e6     0x64    ld a2,8(a1)
    0x840013e8     0x66    add a4,a4,a6
    0x840013ea     0x68    sd a4,-8(a5)
    0x840013ee     0x6c    add a3,a2,a6
    0x840013f2     0x70    bgeu a0,a2,ffffffff840013fa <init_freemem+0x78>
    0x840013f6     0x74    lui a3,0x80000
    0x840013fa     0x78    ld a4,-8(a5)
    0x840013fe     0x7c    sd a3,0(a5)
    0x84001400     0x7e    add a3,a4,t1
    0x84001404     0x82    bgeu a0,a3,ffffffff8400140c <init_freemem+0x8a>
    0x84001408     0x86    lui a4,0x80000
    0x8400140c     0x8a    sd a4,-8(a5)
    0x84001410     0x8e    addi a1,a1,16
    0x84001412     0x90    addi a5,a5,16
    0x84001414     0x92    bne a1,a7,ffffffff840013e4 <init_freemem+0x62>
    0x84001418     0x96    li s5,1
    0x8400141a     0x98    li s7,0
    0x8400141c     0x9a    li s8,0
    0x8400141e     0x9c    auipc s9,0x1
    0x84001422     0xa0    addi s9,s9,258 # ffffffff84002520 <avail_reg>
    0x84001426     0xa4    slli s5,s5,0x26
    0x84001428     0xa6    beqz s4,ffffffff8400147c <init_freemem+0xfa>
    0x8400142c     0xaa    slli s0,s7,0x4
    0x84001430     0xae    add s0,s0,s6
    0x84001432     0xb0    ld a4,0(s0)
    0x84001434     0xb2    ld a5,8(s0)
    0x84001436     0xb4    beq a4,a5,ffffffff840015dc <init_freemem+0x25a>
    0x8400143a     0xb8    slli s2,s8,0x4
    0x8400143e     0xbc    add s2,s2,s9
    0x84001440     0xbe    ld a0,0(s2) # ffffffffe0000000 <ki_end+0x5bfd9000>
    0x84001444     0xc2    ld a1,8(s2)
    0x84001448     0xc6    bgeu a0,a1,ffffffff84001594 <init_freemem+0x212>
    0x8400144c     0xca    bgeu a0,a5,ffffffff84001634 <init_freemem+0x2b2>
    0x84001450     0xce    bgeu a4,a1,ffffffff84001648 <init_freemem+0x2c6>
    0x84001454     0xd2    bltu a0,a4,ffffffff84001580 <init_freemem+0x1fe>
    0x84001458     0xd6    mv a4,a5
    0x8400145a     0xd8    bltu a1,a5,ffffffff84001654 <init_freemem+0x2d2>
    0x8400145e     0xdc    sd a4,0(s2)
    0x84001462     0xe0    ld a0,0(s0)
    0x84001464     0xe2    add a1,a5,s5
    0x84001468     0xe6    sd a1,40(sp)          ; stack access
    0x8400146a     0xe8    add a0,a0,s5
    0x8400146c     0xea    sd a0,32(sp)          ; stack access
    0x8400146e     0xec    addi s7,s7,1
    0x84001470     0xee    jal ra,ffffffff84000708 <reserve_region>
    0x84001474     0xf2    bgeu s8,s3,ffffffff8400159a <init_freemem+0x218>
    0x84001478     0xf6    bltu s7,s4,ffffffff8400142c <init_freemem+0xaa>
    0x8400147c     0xfa    auipc s2,0x1
    0x84001480     0xfe    addi s2,s2,164 # ffffffff84002520 <avail_reg>
    0x84001484    0x102    slli s0,s8,0x4
    0x84001488    0x106    add s0,s0,s2
    0x8400148a    0x108    j ffffffff84001494 <init_freemem+0x112>
    0x8400148c    0x10a    addi s8,s8,1
    0x8400148e    0x10c    addi s0,s0,16
    0x84001490    0x10e    bgeu s8,s3,ffffffff840014b2 <init_freemem+0x130>
    0x84001494    0x112    ld a4,0(s0)
    0x84001496    0x114    ld a5,8(s0)
    0x84001498    0x116    bgeu a4,a5,ffffffff8400148c <init_freemem+0x10a>
    0x8400149c    0x11a    slli a5,s8,0x4
    0x840014a0    0x11e    add a5,a5,s2
    0x840014a2    0x120    ld a0,0(a5)
    0x840014a4    0x122    ld a1,8(a5)
    0x840014a6    0x124    addi s8,s8,1
    0x840014a8    0x126    addi s0,s0,16
    0x840014aa    0x128    jal ra,ffffffff8400094c <insert_region>
    0x840014ae    0x12c    bltu s8,s3,ffffffff84001494 <init_freemem+0x112>
    0x840014b2    0x130    auipc s3,0xd
    0x840014b6    0x134    addi s3,s3,-178 # ffffffff8400e400 <ndks_boot>
    0x840014ba    0x138    ld a4,1064(s3)
    0x840014be    0x13c    ld a5,1072(s3)
    0x840014c2    0x140    bne a4,a5,ffffffff84001684 <init_freemem+0x302>
    0x840014c6    0x144    auipc a4,0xd
    0x840014ca    0x148    addi a4,a4,850 # ffffffff8400e818 <ndks_boot+0x418>
    0x840014ce    0x14c    li s2,15
    0x840014d0    0x14e    ld a1,0(a4)
    0x840014d2    0x150    mv a3,s2
    0x840014d4    0x152    addi a4,a4,-16
    0x840014d6    0x154    ld a5,24(a4)
    0x840014d8    0x156    addi s2,s2,-1
    0x840014da    0x158    beq a1,a5,ffffffff840014d0 <init_freemem+0x14e>
    0x840014de    0x15c    ld a2,0(sp)           ; stack access
    0x840014e0    0x15e    ld a4,8(sp)           ; stack access
    0x840014e2    0x160    li a6,0
    0x840014e4    0x162    beqz s1,ffffffff840014ec <init_freemem+0x16a>
    0x840014e6    0x164    li s4,1
    0x840014e8    0x166    sll a6,s4,s1
    0x840014ec    0x16a    addi a4,a4,-1
    0x840014ee    0x16c    srli s4,a4,0x1e
    0x840014f2    0x170    srli a4,a4,0x15
    0x840014f4    0x172    addi s4,s4,1
    0x840014f6    0x174    addi a4,a4,1
    0x840014f8    0x176    lui a0,0xc0000
    0x840014fc    0x17a    lui a7,0xffe00
    0x84001500    0x17e    and a0,a0,a2
    0x84001502    0x180    slli s4,s4,0x1e
    0x84001504    0x182    and a2,a2,a7
    0x84001508    0x186    slli a4,a4,0x15
    0x8400150a    0x188    sub a4,a4,a2
    0x8400150c    0x18a    sub s4,s4,a0
    0x84001510    0x18e    srli a4,a4,0x15
    0x84001512    0x190    srli s4,s4,0x1e
    0x84001516    0x194    add s4,s4,a4
    0x84001518    0x196    lui a4,0x1004
    0x8400151c    0x19a    addi a4,a4,1280 # 1004500 <KERNEL_OFFSET-0xfffffffefeffbb00>
    0x84001520    0x19e    slli s4,s4,0xc
    0x84001522    0x1a0    add s4,s4,a4
    0x84001524    0x1a2    li a4,24
    0x84001526    0x1a4    add s4,s4,a6
    0x84001528    0x1a6    mv a2,s1
    0x8400152a    0x1a8    bltu s1,a4,ffffffff84001650 <init_freemem+0x2ce>
    0x8400152e    0x1ac    sub s0,a5,s4
    0x84001532    0x1b0    srl s0,s0,a2
    0x84001536    0x1b4    slli a4,s2,0x4
    0x8400153a    0x1b8    addi a4,a4,808
    0x8400153e    0x1bc    sll s0,s0,a2
    0x84001542    0x1c0    add a4,a4,s3
    0x84001544    0x1c2    sext.w a2,a2
    0x84001546    0x1c4    li a0,15
    0x84001548    0x1c6    bgeu s0,a1,ffffffff840015e0 <init_freemem+0x25e>
    0x8400154c    0x1ca    bltu a0,s2,ffffffff84001560 <init_freemem+0x1de>
    0x84001550    0x1ce    ld a5,16(a4)
    0x84001552    0x1d0    addi a3,a3,51 # ffffffff80000033 <KERNEL_OFFSET+0x80000033>
    0x84001556    0x1d4    slli a3,a3,0x4
    0x84001558    0x1d6    add a3,a3,s3
    0x8400155a    0x1d8    sd a5,8(a3)
    0x8400155c    0x1da    ld a5,24(a4)
    0x8400155e    0x1dc    sd a5,16(a3)
    0x84001560    0x1de    ld s0,8(a4)
    0x84001562    0x1e0    addi s5,s2,-1
    0x84001566    0x1e4    addi a4,a4,-16
    0x84001568    0x1e6    sub s0,s0,s4
    0x8400156c    0x1ea    ld a5,16(a4)
    0x8400156e    0x1ec    srl s0,s0,a2
    0x84001572    0x1f0    sll s0,s0,a2
    0x84001576    0x1f4    mv a3,s2
    0x84001578    0x1f6    bgeu s0,a5,ffffffff840015e4 <init_freemem+0x262>
    0x8400157c    0x1fa    mv s2,s5
    0x8400157e    0x1fc    j ffffffff8400154c <init_freemem+0x1ca>
    0x84001580    0x1fe    mv a1,a4
    0x84001582    0x200    sd a4,72(sp)          ; stack access
    0x84001584    0x202    sd a0,64(sp)          ; stack access
    0x84001586    0x204    jal ra,ffffffff8400094c <insert_region>
    0x8400158a    0x208    ld a5,8(s0)
    0x8400158c    0x20a    ld a4,8(s2)
    0x84001590    0x20e    bltu a5,a4,ffffffff84001658 <init_freemem+0x2d6>
    0x84001594    0x212    addi s8,s8,1
    0x84001596    0x214    bltu s8,s3,ffffffff84001478 <init_freemem+0xf6>
    0x8400159a    0x218    slli s0,s7,0x4
    0x8400159e    0x21c    li s2,1
    0x840015a0    0x21e    add s0,s0,s6
    0x840015a2    0x220    slli s2,s2,0x26
    0x840015a4    0x222    bgeu s7,s4,ffffffff840014b2 <init_freemem+0x130>
    0x840015a8    0x226    ld a5,0(s0)
    0x840015aa    0x228    ld a1,8(s0)
    0x840015ac    0x22a    bltu a5,a1,ffffffff840015c0 <init_freemem+0x23e>
    0x840015b0    0x22e    addi s7,s7,1
    0x840015b2    0x230    addi s0,s0,16
    0x840015b4    0x232    beq s4,s7,ffffffff840015d6 <init_freemem+0x254>
    0x840015b8    0x236    ld a5,0(s0)
    0x840015ba    0x238    ld a1,8(s0)
    0x840015bc    0x23a    bgeu a5,a1,ffffffff840015b0 <init_freemem+0x22e>
    0x840015c0    0x23e    add a0,a5,s2
    0x840015c4    0x242    add a1,a1,s2
    0x840015c6    0x244    addi s7,s7,1
    0x840015c8    0x246    sd a0,64(sp)          ; stack access
    0x840015ca    0x248    sd a1,72(sp)          ; stack access
    0x840015cc    0x24a    addi s0,s0,16
    0x840015ce    0x24c    jal ra,ffffffff84000708 <reserve_region>
    0x840015d2    0x250    bne s4,s7,ffffffff840015b8 <init_freemem+0x236>
    0x840015d6    0x254    bltu s8,s3,ffffffff8400147c <init_freemem+0xfa>
    0x840015da    0x258    j ffffffff840014b2 <init_freemem+0x130>
    0x840015dc    0x25a    addi s7,s7,1
    0x840015de    0x25c    j ffffffff84001474 <init_freemem+0xf2>
    0x840015e0    0x25e    mv s5,s2
    0x840015e2    0x260    mv s2,a3
    0x840015e4    0x262    ld a1,0(sp)           ; stack access
    0x840015e6    0x264    ld a2,8(sp)           ; stack access
    0x840015e8    0x266    mv a3,s1
    0x840015ea    0x268    mv a0,s0
    0x840015ec    0x26a    jal ra,ffffffff840009b8 <create_rootserver_objects>
    0x840015f0    0x26e    li a5,15
    0x840015f2    0x270    addi a4,s5,51 # ffffffffc0000033 <ki_end+0x3bfd9033>
    0x840015f6    0x274    bltu a5,s5,ffffffff84001612 <init_freemem+0x290>
    0x840015fa    0x278    slli a5,a4,0x4
    0x840015fe    0x27c    add a5,a5,s3
    0x84001600    0x27e    ld a3,16(a5)
    0x84001602    0x280    addi a5,s2,51
    0x84001606    0x284    slli a5,a5,0x4
    0x84001608    0x286    add a5,a5,s3
    0x8400160a    0x288    add s4,s4,s0
    0x8400160c    0x28a    sd a3,16(a5)
    0x8400160e    0x28c    sd s4,8(a5)
    0x84001612    0x290    slli a4,a4,0x4
    0x84001614    0x292    add s3,s3,a4
    0x84001616    0x294    sd s0,16(s3)
    0x8400161a    0x298    ld ra,168(sp)         ; stack access
    0x8400161c    0x29a    ld s0,160(sp)         ; stack access
    0x8400161e    0x29c    ld s1,152(sp)         ; stack access
    0x84001620    0x29e    ld s2,144(sp)         ; stack access
    0x84001622    0x2a0    ld s3,136(sp)         ; stack access
    0x84001624    0x2a2    ld s4,128(sp)         ; stack access
    0x84001626    0x2a4    ld s5,120(sp)         ; stack access
    0x84001628    0x2a6    ld s6,112(sp)         ; stack access
    0x8400162a    0x2a8    ld s7,104(sp)         ; stack access
    0x8400162c    0x2aa    ld s8,96(sp)          ; stack access
    0x8400162e    0x2ac    ld s9,88(sp)          ; stack access
    0x84001630    0x2ae    addi sp,sp,176
    0x84001632    0x2b0    ret
    0x84001634    0x2b2    add a0,a4,s5
    0x84001638    0x2b6    add a1,a5,s5
    0x8400163c    0x2ba    sd a0,16(sp)          ; stack access
    0x8400163e    0x2bc    sd a1,24(sp)          ; stack access
    0x84001640    0x2be    addi s7,s7,1
    0x84001642    0x2c0    jal ra,ffffffff84000708 <reserve_region>
    0x84001646    0x2c4    j ffffffff84001474 <init_freemem+0xf2>
    0x84001648    0x2c6    jal ra,ffffffff8400094c <insert_region>
    0x8400164c    0x2ca    addi s8,s8,1
    0x8400164e    0x2cc    j ffffffff84001474 <init_freemem+0xf2>
    0x84001650    0x2ce    li a2,24
    0x84001652    0x2d0    j ffffffff8400152e <init_freemem+0x1ac>
    0x84001654    0x2d2    mv a4,a1
    0x84001656    0x2d4    j ffffffff8400145e <init_freemem+0xdc>
    0x84001658    0x2d6    sd a5,0(s2)
    0x8400165c    0x2da    ld a0,0(s0)
    0x8400165e    0x2dc    add a1,a5,s5
    0x84001662    0x2e0    sd a1,56(sp)          ; stack access
    0x84001664    0x2e2    add a0,a0,s5
    0x84001666    0x2e4    sd a0,48(sp)          ; stack access
    0x84001668    0x2e6    addi s7,s7,1
    0x8400166a    0x2e8    jal ra,ffffffff84000708 <reserve_region>
    0x8400166e    0x2ec    j ffffffff84001474 <init_freemem+0xf2>
    0x84001670    0x2ee    li s7,0
    0x84001672    0x2f0    slli s0,s7,0x4
    0x84001676    0x2f4    li s2,1
    0x84001678    0x2f6    li s8,0
    0x8400167a    0x2f8    add s0,s0,s6
    0x8400167c    0x2fa    slli s2,s2,0x26
    0x8400167e    0x2fc    bltu s7,s4,ffffffff840015a8 <init_freemem+0x226>
    0x84001682    0x300    j ffffffff840014b2 <init_freemem+0x130>
    0x84001684    0x302    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
278 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 434 nodes.

Section handleInterruptEntry (267 of 296)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 93 instructions.

Skipping 144024f3 csrr s1,sip

Skipping c01025f3 rdtime a1


Stack analysis
---------------

6 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x8400c8ae      0x0    addi sp,sp,-32
    0x8400c8b0      0x2    auipc a5,0x15
    0x8400c8b4      0x6    addi a5,a5,-64 # ffffffff84021870 <active_irq>
    0x8400c8b8      0xa    sd s0,16(sp)          ; stack access
    0x8400c8ba      0xc    lw s0,0(a5)
    0x8400c8bc      0xe    sd ra,24(sp)          ; stack access
    0x8400c8be     0x10    sd s1,8(sp)           ; stack access
    0x8400c8c0     0x12    li a4,53
    0x8400c8c4     0x16    addiw a3,s0,-1
    0x8400c8c8     0x1a    bgeu a4,a3,ffffffff8400c8e8 <handleInterruptEntry+0x3a>
    0x8400c8cc     0x1e    csrr s1,sip
    0x8400c8d0     0x22    andi a3,s1,512
    0x8400c8d4     0x26    bnez a3,ffffffff8400c962 <handleInterruptEntry+0xb4>
    0x8400c8d6     0x28    andi s1,s1,32
    0x8400c8da     0x2c    bnez s1,ffffffff8400c9b0 <handleInterruptEntry+0x102>
    0x8400c8dc     0x2e    auipc a5,0x15
    0x8400c8e0     0x32    sw zero,-108(a5) # ffffffff84021870 <active_irq>
    0x8400c8e4     0x36    li s0,0
    0x8400c8e6     0x38    j ffffffff8400c8ee <handleInterruptEntry+0x40>
    0x8400c8e8     0x3a    slli s1,s0,0x20
    0x8400c8ec     0x3e    srli s1,s1,0x20
    0x8400c8ee     0x40    auipc a2,0x15
    0x8400c8f2     0x44    addi a2,a2,-190 # ffffffff84021830 <ksCurTime>
    0x8400c8f6     0x48    ld a7,0(a2)
    0x8400c8fa     0x4c    rdtime a1
    0x8400c8fe     0x50    auipc a4,0x15
    0x8400c902     0x54    ld a4,-214(a4) # ffffffff84021828 <ksCurSC>
    0x8400c906     0x58    ld a6,72(a4)
    0x8400c90a     0x5c    auipc a3,0x15
    0x8400c90e     0x60    addi a3,a3,-202 # ffffffff84021840 <ksConsumed>
    0x8400c912     0x64    ld a0,0(a3)
    0x8400c914     0x66    slli a5,a6,0x4
    0x8400c918     0x6a    add a5,a5,a4
    0x8400c91a     0x6c    sub a0,a0,a7
    0x8400c91e     0x70    ld a5,96(a5)
    0x8400c920     0x72    add a0,a0,a1
    0x8400c922     0x74    sd a1,0(a2)
    0x8400c924     0x76    sd a0,0(a3)
    0x8400c926     0x78    bltu a5,a0,ffffffff8400c9a4 <handleInterruptEntry+0xf6>
    0x8400c92a     0x7c    sub a5,a5,a0
    0x8400c92c     0x7e    li a3,19
    0x8400c92e     0x80    bgeu a3,a5,ffffffff8400c9a4 <handleInterruptEntry+0xf6>
    0x8400c932     0x84    ld a5,0(a4)
    0x8400c934     0x86    bnez a5,ffffffff8400c990 <handleInterruptEntry+0xe2>
    0x8400c936     0x88    addi a0,a0,20
    0x8400c938     0x8a    auipc a5,0x15
    0x8400c93c     0x8e    ld a5,-296(a5) # ffffffff84021810 <ksDomainTime>
    0x8400c940     0x92    bltu a5,a0,ffffffff8400c980 <handleInterruptEntry+0xd2>
    0x8400c944     0x96    bnez s0,ffffffff8400c95a <handleInterruptEntry+0xac>
    0x8400c946     0x98    jal ra,ffffffff8400c616 <schedule>
    0x8400c94a     0x9c    jal ra,ffffffff8400756e <activateThread>
    0x8400c94e     0xa0    ld ra,24(sp)          ; stack access
    0x8400c950     0xa2    ld s0,16(sp)          ; stack access
    0x8400c952     0xa4    ld s1,8(sp)           ; stack access
    0x8400c954     0xa6    li a0,0
    0x8400c956     0xa8    addi sp,sp,32
    0x8400c958     0xaa    ret
    0x8400c95a     0xac    mv a0,s1
    0x8400c95c     0xae    jal ra,ffffffff840084fa <handleInterrupt>
    0x8400c960     0xb2    j ffffffff8400c946 <handleInterruptEntry+0x98>
    0x8400c962     0xb4    lui a3,0xc0202
    0x8400c966     0xb8    lw s1,4(a3)
    0x8400c968     0xba    sext.w s0,s1
    0x8400c96c     0xbe    sw s0,0(a5)
    0x8400c96e     0xc0    slli s1,s1,0x20
    0x8400c970     0xc2    addiw a5,s0,-1
    0x8400c974     0xc6    srli s1,s1,0x20
    0x8400c976     0xc8    bgeu a4,a5,ffffffff8400c8ee <handleInterruptEntry+0x40>
    0x8400c97a     0xcc    li s1,0
    0x8400c97c     0xce    li s0,0
    0x8400c97e     0xd0    j ffffffff8400c8ee <handleInterruptEntry+0x40>
    0x8400c980     0xd2    li a5,1
    0x8400c982     0xd4    auipc a4,0x15
    0x8400c986     0xd8    sd a5,-330(a4) # ffffffff84021838 <ksReprogram>
    0x8400c98a     0xdc    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400c98e     0xe0    j ffffffff8400c944 <handleInterruptEntry+0x96>
    0x8400c990     0xe2    ld a5,80(a4)
    0x8400c992     0xe4    ld a4,64(a4)
    0x8400c994     0xe6    bgeu a5,a6,ffffffff8400c99a <handleInterruptEntry+0xec>
    0x8400c998     0xea    add a5,a5,a4
    0x8400c99a     0xec    addi a5,a5,1
    0x8400c99c     0xee    sub a6,a5,a6
    0x8400c9a0     0xf2    bne a4,a6,ffffffff8400c936 <handleInterruptEntry+0x88>
    0x8400c9a4     0xf6    li a3,1
    0x8400c9a6     0xf8    li a2,0
    0x8400c9a8     0xfa    li a1,1
    0x8400c9aa     0xfc    jal ra,ffffffff840090cc <chargeBudget>
    0x8400c9ae    0x100    j ffffffff8400c944 <handleInterruptEntry+0x96>
    0x8400c9b0    0x102    li a4,54
    0x8400c9b4    0x106    sw a4,0(a5)
    0x8400c9b6    0x108    li s1,54
    0x8400c9ba    0x10c    li s0,54
    0x8400c9be    0x110    j ffffffff8400c8ee <handleInterruptEntry+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
93 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 146 nodes.

Section decodeUntypedInvocation (268 of 296)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 275 instructions.


Stack analysis
---------------

41 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x8400bb98      0x0    addi sp,sp,-192
    0x8400bb9a      0x2    sd ra,184(sp)         ; stack access
    0x8400bb9c      0x4    sd s0,176(sp)         ; stack access
    0x8400bb9e      0x6    sd s1,168(sp)         ; stack access
    0x8400bba0      0x8    sd s2,160(sp)         ; stack access
    0x8400bba2      0xa    sd s3,152(sp)         ; stack access
    0x8400bba4      0xc    sd s4,144(sp)         ; stack access
    0x8400bba6      0xe    sd s5,136(sp)         ; stack access
    0x8400bba8     0x10    sd s6,128(sp)         ; stack access
    0x8400bbaa     0x12    sd s7,120(sp)         ; stack access
    0x8400bbac     0x14    sd s8,112(sp)         ; stack access
    0x8400bbae     0x16    sd s9,104(sp)         ; stack access
    0x8400bbb0     0x18    sd s10,96(sp)         ; stack access
    0x8400bbb2     0x1a    sd s11,88(sp)         ; stack access
    0x8400bbb4     0x1c    sd a3,32(sp)          ; stack access
    0x8400bbb6     0x1e    sd a4,40(sp)          ; stack access
    0x8400bbb8     0x20    li a5,1
    0x8400bbba     0x22    bne a0,a5,ffffffff8400bd5c <decodeUntypedInvocation+0x1c4>
    0x8400bbbe     0x26    li s5,5
    0x8400bbc0     0x28    bgeu s5,a1,ffffffff8400bd86 <decodeUntypedInvocation+0x1ee>
    0x8400bbc4     0x2c    auipc s6,0x4
    0x8400bbc8     0x30    ld s6,-452(s6) # ffffffff8400fa00 <current_extra_caps>
    0x8400bbcc     0x34    beqz s6,ffffffff8400bd86 <decodeUntypedInvocation+0x1ee>
    0x8400bbd0     0x38    auipc s8,0x16
    0x8400bbd4     0x3c    addi s8,s8,-888 # ffffffff84021858 <ksCurThread>
    0x8400bbd8     0x40    ld s4,0(s8)
    0x8400bbdc     0x44    li a5,10
    0x8400bbde     0x46    mv s0,a0
    0x8400bbe0     0x48    ld s3,88(s4)
    0x8400bbe4     0x4c    bltu a5,s3,ffffffff8400bdb6 <decodeUntypedInvocation+0x21e>
    0x8400bbe8     0x50    ld s7,96(s4)
    0x8400bbec     0x54    mv a0,s3
    0x8400bbee     0x56    mv s2,a2
    0x8400bbf0     0x58    mv a1,s7
    0x8400bbf2     0x5a    mv s1,a6
    0x8400bbf4     0x5c    jal ra,ffffffff84005cfc <getObjectSize>
    0x8400bbf8     0x60    li a5,63
    0x8400bbfc     0x64    mv s9,a0
    0x8400bbfe     0x66    bltu a5,s7,ffffffff8400bd94 <decodeUntypedInvocation+0x1fc>
    0x8400bc02     0x6a    li a5,38
    0x8400bc06     0x6e    bltu a5,a0,ffffffff8400bd94 <decodeUntypedInvocation+0x1fc>
    0x8400bc0a     0x72    li a5,4
    0x8400bc0c     0x74    beq s3,a5,ffffffff8400bdca <decodeUntypedInvocation+0x232>
    0x8400bc10     0x78    bnez s3,ffffffff8400bde4 <decodeUntypedInvocation+0x24c>
    0x8400bc14     0x7c    li a5,3
    0x8400bc16     0x7e    bgeu a5,s7,ffffffff8400bdce <decodeUntypedInvocation+0x236>
    0x8400bc1a     0x82    ld s5,112(s4)
    0x8400bc1e     0x86    ld s11,40(sp)         ; stack access
    0x8400bc20     0x88    ld s10,40(s1)
    0x8400bc24     0x8c    ld a7,48(s1)
    0x8400bc28     0x90    ld a1,0(s6)
    0x8400bc2c     0x94    bnez s5,ffffffff8400be0e <decodeUntypedInvocation+0x276>
    0x8400bc30     0x98    srli a5,a1,0x3b
    0x8400bc34     0x9c    li a4,10
    0x8400bc36     0x9e    bne a5,a4,ffffffff8400be30 <decodeUntypedInvocation+0x298>
    0x8400bc3a     0xa2    srli a5,a1,0x2f
    0x8400bc3e     0xa6    li a4,1
    0x8400bc40     0xa8    sll a5,a4,a5
    0x8400bc44     0xac    addi a3,a5,-1
    0x8400bc48     0xb0    bltu a3,s10,ffffffff8400be70 <decodeUntypedInvocation+0x2d8>
    0x8400bc4c     0xb4    addi a3,a7,-1
    0x8400bc50     0xb8    li a2,255
    0x8400bc54     0xbc    bltu a2,a3,ffffffff8400bdf0 <decodeUntypedInvocation+0x258>
    0x8400bc58     0xc0    sub a5,a5,s10
    0x8400bc5c     0xc4    bltu a5,a7,ffffffff8400be8e <decodeUntypedInvocation+0x2f6>
    0x8400bc60     0xc8    slli a1,a1,0x1
    0x8400bc62     0xca    slli a4,a4,0x26
    0x8400bc64     0xcc    lui s1,0xfc000
    0x8400bc68     0xd0    srli s1,s1,0x19
    0x8400bc6a     0xd2    and a4,a4,a1
    0x8400bc6c     0xd4    and s1,s1,a1
    0x8400bc6e     0xd6    beqz a4,ffffffff8400bc76 <decodeUntypedInvocation+0xde>
    0x8400bc70     0xd8    li a5,-1
    0x8400bc72     0xda    slli a5,a5,0x27
    0x8400bc74     0xdc    or s1,s1,a5
    0x8400bc76     0xde    add a2,a7,s10
    0x8400bc7a     0xe2    bgeu s10,a2,ffffffff8400bc98 <decodeUntypedInvocation+0x100>
    0x8400bc7e     0xe6    slli a4,s10,0x5
    0x8400bc82     0xea    add a4,a4,s1
    0x8400bc84     0xec    mv a3,s10
    0x8400bc86     0xee    ld a5,0(a4)
    0x8400bc88     0xf0    addi a3,a3,1
    0x8400bc8a     0xf2    addi a4,a4,32
    0x8400bc8e     0xf6    srli a5,a5,0x3b
    0x8400bc90     0xf8    bnez a5,ffffffff8400be62 <decodeUntypedInvocation+0x2ca>
    0x8400bc94     0xfc    bne a3,a2,ffffffff8400bc86 <decodeUntypedInvocation+0xee>
    0x8400bc98    0x100    ld a1,24(s2)
    0x8400bc9c    0x104    lui a4,0xf8000
    0x8400bca0    0x108    srli a4,a4,0x19
    0x8400bca2    0x10a    srli a5,a1,0x26
    0x8400bca6    0x10e    andi a5,a5,1
    0x8400bca8    0x110    and a1,a1,a4
    0x8400bcaa    0x112    beqz a5,ffffffff8400bea8 <decodeUntypedInvocation+0x310>
    0x8400bcae    0x116    li a5,-1
    0x8400bcb0    0x118    slli a5,a5,0x27
    0x8400bcb2    0x11a    or a1,a1,a5
    0x8400bcb4    0x11c    mv a0,s2
    0x8400bcb6    0x11e    sd a7,24(sp)          ; stack access
    0x8400bcb8    0x120    jal ra,ffffffff84006096 <isMDBParentOf>
    0x8400bcbc    0x124    ld a7,24(sp)          ; stack access
    0x8400bcbe    0x126    mv a1,a0
    0x8400bcc0    0x128    beqz a0,ffffffff8400bcd4 <decodeUntypedInvocation+0x13c>
    0x8400bcc2    0x12a    srli a1,s11,0x19
    0x8400bcc6    0x12e    li a5,9
    0x8400bcc8    0x130    auipc a4,0x4
    0x8400bccc    0x134    sd a5,-1544(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400bcd0    0x138    slli a1,a1,0x4
    0x8400bcd2    0x13a    li s0,0
    0x8400bcd4    0x13c    ld a5,32(sp)          ; stack access
    0x8400bcd6    0x13e    li a4,-1
    0x8400bcd8    0x140    srli a2,a4,0x19
    0x8400bcdc    0x144    srli a3,a5,0x26
    0x8400bce0    0x148    andi a3,a3,1
    0x8400bce2    0x14a    and a5,a5,a2
    0x8400bce4    0x14c    beqz a3,ffffffff8400bcea <decodeUntypedInvocation+0x152>
    0x8400bce6    0x14e    slli a4,a4,0x27
    0x8400bce8    0x150    or a5,a5,a4
    0x8400bcea    0x152    li a4,1
    0x8400bcec    0x154    sll a4,a4,s11
    0x8400bcf0    0x158    sub a4,a4,a1
    0x8400bcf2    0x15a    srl a3,a4,s9
    0x8400bcf6    0x15e    sext.w s9,s9
    0x8400bcf8    0x160    bltu a3,a7,ffffffff8400beae <decodeUntypedInvocation+0x316>
    0x8400bcfc    0x164    srli s4,s11,0x6
    0x8400bd00    0x168    andi s4,s4,1
    0x8400bd04    0x16c    beqz s4,ffffffff8400bd16 <decodeUntypedInvocation+0x17e>
    0x8400bd08    0x170    addi a4,s3,-7
    0x8400bd0c    0x174    li a3,2
    0x8400bd0e    0x176    bgeu a3,a4,ffffffff8400bd16 <decodeUntypedInvocation+0x17e>
    0x8400bd12    0x17a    bnez s3,ffffffff8400bdce <decodeUntypedInvocation+0x236>
    0x8400bd16    0x17e    ld a0,0(s8)
    0x8400bd1a    0x182    li a4,1
    0x8400bd1c    0x184    sll s9,a4,s9
    0x8400bd20    0x188    ld a3,280(a0)
    0x8400bd24    0x18c    addi a4,s9,-1
    0x8400bd28    0x190    add a4,a4,a1
    0x8400bd2a    0x192    andi a3,a3,-16
    0x8400bd2c    0x194    ori a3,a3,2
    0x8400bd30    0x198    add a5,a5,a4
    0x8400bd32    0x19a    sd a3,280(a0)
    0x8400bd36    0x19e    neg s9,s9
    0x8400bd3a    0x1a2    and s9,a5,s9
    0x8400bd3e    0x1a6    sd a7,24(sp)          ; stack access
    0x8400bd40    0x1a8    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400bd44    0x1ac    ld a7,24(sp)          ; stack access
    0x8400bd46    0x1ae    sd s4,0(sp)           ; stack access
    0x8400bd48    0x1b0    mv a6,s10
    0x8400bd4a    0x1b2    mv a5,s1
    0x8400bd4c    0x1b4    mv a4,s7
    0x8400bd4e    0x1b6    mv a3,s3
    0x8400bd50    0x1b8    mv a2,s9
    0x8400bd52    0x1ba    mv a1,s0
    0x8400bd54    0x1bc    mv a0,s2
    0x8400bd56    0x1be    jal ra,ffffffff8400ba68 <invokeUntyped_Retype>
    0x8400bd5a    0x1c2    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400bd5c    0x1c4    li a5,3
    0x8400bd5e    0x1c6    auipc a4,0x4
    0x8400bd62    0x1ca    sd a5,-1694(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400bd66    0x1ce    li a0,3
    0x8400bd68    0x1d0    ld ra,184(sp)         ; stack access
    0x8400bd6a    0x1d2    ld s0,176(sp)         ; stack access
    0x8400bd6c    0x1d4    ld s1,168(sp)         ; stack access
    0x8400bd6e    0x1d6    ld s2,160(sp)         ; stack access
    0x8400bd70    0x1d8    ld s3,152(sp)         ; stack access
    0x8400bd72    0x1da    ld s4,144(sp)         ; stack access
    0x8400bd74    0x1dc    ld s5,136(sp)         ; stack access
    0x8400bd76    0x1de    ld s6,128(sp)         ; stack access
    0x8400bd78    0x1e0    ld s7,120(sp)         ; stack access
    0x8400bd7a    0x1e2    ld s8,112(sp)         ; stack access
    0x8400bd7c    0x1e4    ld s9,104(sp)         ; stack access
    0x8400bd7e    0x1e6    ld s10,96(sp)         ; stack access
    0x8400bd80    0x1e8    ld s11,88(sp)         ; stack access
    0x8400bd82    0x1ea    addi sp,sp,192
    0x8400bd84    0x1ec    ret
    0x8400bd86    0x1ee    li a5,7
    0x8400bd88    0x1f0    auipc a4,0x4
    0x8400bd8c    0x1f4    sd a5,-1736(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400bd90    0x1f8    li a0,3
    0x8400bd92    0x1fa    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400bd94    0x1fc    li a4,4
    0x8400bd96    0x1fe    auipc a5,0x3
    0x8400bd9a    0x202    addi a5,a5,618 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400bd9e    0x206    sd a4,1728(a5)
    0x8400bda2    0x20a    auipc a4,0x4
    0x8400bda6    0x20e    sd zero,-1794(a4) # ffffffff8400f6a0 <current_syscall_error+0x10>
    0x8400bdaa    0x212    li a4,38
    0x8400bdae    0x216    sd a4,1704(a5)
    0x8400bdb2    0x21a    li a0,3
    0x8400bdb4    0x21c    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400bdb6    0x21e    auipc a5,0x4
    0x8400bdba    0x222    sd a0,-1782(a5) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400bdbe    0x226    auipc a5,0x4
    0x8400bdc2    0x22a    sd zero,-1838(a5) # ffffffff8400f690 <current_syscall_error>
    0x8400bdc6    0x22e    li a0,3
    0x8400bdc8    0x230    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400bdca    0x232    bnez s7,ffffffff8400bc1a <decodeUntypedInvocation+0x82>
    0x8400bdce    0x236    auipc a5,0x3
    0x8400bdd2    0x23a    addi a5,a5,562 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400bdd6    0x23e    li a4,1
    0x8400bdd8    0x240    sd a4,1728(a5)
    0x8400bddc    0x244    sd a4,1680(a5)
    0x8400bde0    0x248    li a0,3
    0x8400bde2    0x24a    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400bde4    0x24c    bne s3,s5,ffffffff8400bc1a <decodeUntypedInvocation+0x82>
    0x8400bde8    0x250    li a5,7
    0x8400bdea    0x252    bltu a5,s7,ffffffff8400bc1a <decodeUntypedInvocation+0x82>
    0x8400bdee    0x256    j ffffffff8400bdce <decodeUntypedInvocation+0x236>
    0x8400bdf0    0x258    auipc a5,0x3
    0x8400bdf4    0x25c    addi a5,a5,528 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400bdf8    0x260    li a3,4
    0x8400bdfa    0x262    sd a4,1696(a5)
    0x8400bdfe    0x266    li a4,256
    0x8400be02    0x26a    sd a3,1728(a5)
    0x8400be06    0x26e    sd a4,1704(a5)
    0x8400be0a    0x272    li a0,3
    0x8400be0c    0x274    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400be0e    0x276    ld a2,8(s6)
    0x8400be12    0x27a    ld a3,104(s4)
    0x8400be16    0x27e    mv a4,s5
    0x8400be18    0x280    li a0,0
    0x8400be1a    0x282    sd a7,24(sp)          ; stack access
    0x8400be1c    0x284    sd a1,48(sp)          ; stack access
    0x8400be1e    0x286    sd a2,56(sp)          ; stack access
    0x8400be20    0x288    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x8400be24    0x28c    sd a0,64(sp)          ; stack access
    0x8400be26    0x28e    sd a1,72(sp)          ; stack access
    0x8400be28    0x290    bnez a0,ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400be2a    0x292    ld a1,0(a1)
    0x8400be2c    0x294    ld a7,24(sp)          ; stack access
    0x8400be2e    0x296    j ffffffff8400bc30 <decodeUntypedInvocation+0x98>
    0x8400be30    0x298    slli a5,s5,0x2
    0x8400be34    0x29c    andi a5,a5,508
    0x8400be38    0x2a0    auipc a4,0x3
    0x8400be3c    0x2a4    addi a4,a4,456 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400be40    0x2a8    ori a5,a5,1
    0x8400be44    0x2ac    li a3,6
    0x8400be46    0x2ae    sd a3,1728(a4)
    0x8400be4a    0x2b2    sd a5,1024(a4)
    0x8400be4e    0x2b6    auipc a3,0x4
    0x8400be52    0x2ba    sd zero,-1942(a3) # ffffffff8400f6b8 <current_syscall_error+0x28>
    0x8400be56    0x2be    auipc a5,0x3
    0x8400be5a    0x2c2    sd zero,1458(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x8400be5e    0x2c6    li a0,3
    0x8400be60    0x2c8    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400be62    0x2ca    li a5,8
    0x8400be64    0x2cc    auipc a4,0x4
    0x8400be68    0x2d0    sd a5,-1956(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400be6c    0x2d4    li a0,3
    0x8400be6e    0x2d6    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400be70    0x2d8    auipc a5,0x3
    0x8400be74    0x2dc    addi a5,a5,400 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400be78    0x2e0    li a4,4
    0x8400be7a    0x2e2    sd a4,1728(a5)
    0x8400be7e    0x2e6    sd a3,1704(a5)
    0x8400be82    0x2ea    auipc a4,0x4
    0x8400be86    0x2ee    sd zero,-2018(a4) # ffffffff8400f6a0 <current_syscall_error+0x10>
    0x8400be8a    0x2f2    li a0,3
    0x8400be8c    0x2f4    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400be8e    0x2f6    auipc a3,0x3
    0x8400be92    0x2fa    addi a3,a3,370 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400be96    0x2fe    li a2,4
    0x8400be98    0x300    sd a2,1728(a3)
    0x8400be9c    0x304    sd a4,1696(a3)
    0x8400bea0    0x308    sd a5,1704(a3)
    0x8400bea4    0x30c    li a0,3
    0x8400bea6    0x30e    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>
    0x8400bea8    0x310    beqz a1,ffffffff8400bcd4 <decodeUntypedInvocation+0x13c>
    0x8400beac    0x314    j ffffffff8400bcb4 <decodeUntypedInvocation+0x11c>
    0x8400beae    0x316    auipc a5,0x3
    0x8400beb2    0x31a    addi a5,a5,338 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400beb6    0x31e    li a3,10
    0x8400beb8    0x320    sd a3,1728(a5)
    0x8400bebc    0x324    sd a4,1712(a5)
    0x8400bec0    0x328    li a0,3
    0x8400bec2    0x32a    j ffffffff8400bd68 <decodeUntypedInvocation+0x1d0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
275 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 424 nodes.

Section decodeTCBConfigure (269 of 296)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 217 instructions.


Stack analysis
---------------

81 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x8400aaee      0x0    addi sp,sp,-352
    0x8400aaf0      0x2    sd ra,344(sp)         ; stack access
    0x8400aaf2      0x4    sd s0,336(sp)         ; stack access
    0x8400aaf4      0x6    sd s1,328(sp)         ; stack access
    0x8400aaf6      0x8    sd s2,320(sp)         ; stack access
    0x8400aaf8      0xa    sd s3,312(sp)         ; stack access
    0x8400aafa      0xc    sd s4,304(sp)         ; stack access
    0x8400aafc      0xe    sd s5,296(sp)         ; stack access
    0x8400aafe     0x10    sd s6,288(sp)         ; stack access
    0x8400ab00     0x12    sd s7,280(sp)         ; stack access
    0x8400ab02     0x14    sd s8,272(sp)         ; stack access
    0x8400ab04     0x16    sd s9,264(sp)         ; stack access
    0x8400ab06     0x18    sd s10,256(sp)        ; stack access
    0x8400ab08     0x1a    sd s11,248(sp)        ; stack access
    0x8400ab0a     0x1c    sd a0,128(sp)         ; stack access
    0x8400ab0c     0x1e    sd a1,136(sp)         ; stack access
    0x8400ab0e     0x20    li a5,2
    0x8400ab10     0x22    bgeu a5,a2,ffffffff8400acd0 <decodeTCBConfigure+0x1e2>
    0x8400ab14     0x26    auipc a5,0x5
    0x8400ab18     0x2a    addi a5,a5,1260 # ffffffff84010000 <intStateIRQNode>
    0x8400ab1c     0x2e    ld s2,-1536(a5)
    0x8400ab20     0x32    beqz s2,ffffffff8400acd0 <decodeTCBConfigure+0x1e2>
    0x8400ab24     0x36    ld s10,-1528(a5)
    0x8400ab28     0x3a    beqz s10,ffffffff8400acd0 <decodeTCBConfigure+0x1e2>
    0x8400ab2c     0x3e    ld s11,-1520(a5)
    0x8400ab30     0x42    beqz s11,ffffffff8400acd0 <decodeTCBConfigure+0x1e2>
    0x8400ab34     0x46    auipc s6,0x17
    0x8400ab38     0x4a    addi s6,s6,-732 # ffffffff84021858 <ksCurThread>
    0x8400ab3c     0x4e    ld a5,0(s6)
    0x8400ab40     0x52    ld s9,0(s2)
    0x8400ab44     0x56    ld s3,0(s10)
    0x8400ab48     0x5a    ld a2,0(s11)
    0x8400ab4c     0x5e    ld a0,8(s2)
    0x8400ab50     0x62    ld a1,8(s10)
    0x8400ab54     0x66    ld s4,104(a5)
    0x8400ab58     0x6a    ld s8,88(a5)
    0x8400ab5c     0x6e    mv s0,a3
    0x8400ab5e     0x70    ld a5,96(a5)
    0x8400ab60     0x72    ld a3,8(s11)
    0x8400ab64     0x76    sd s9,168(sp)         ; stack access
    0x8400ab66     0x78    sd a0,176(sp)         ; stack access
    0x8400ab68     0x7a    sd s3,184(sp)         ; stack access
    0x8400ab6a     0x7c    sd a1,192(sp)         ; stack access
    0x8400ab6c     0x7e    sd a2,152(sp)         ; stack access
    0x8400ab6e     0x80    sd a3,160(sp)         ; stack access
    0x8400ab70     0x82    sd a5,104(sp)         ; stack access
    0x8400ab72     0x84    sd s3,96(sp)          ; stack access
    0x8400ab74     0x86    mv s5,s9
    0x8400ab76     0x88    mv s7,a2
    0x8400ab78     0x8a    bnez s4,ffffffff8400acde <decodeTCBConfigure+0x1f0>
    0x8400ab7c     0x8e    li s11,0
    0x8400ab7e     0x90    ld s1,128(sp)         ; stack access
    0x8400ab80     0x92    li a5,-1
    0x8400ab82     0x94    srli a2,a5,0x19
    0x8400ab86     0x98    srli a3,s1,0x26
    0x8400ab8a     0x9c    andi a3,a3,1
    0x8400ab8c     0x9e    and s1,s1,a2
    0x8400ab8e     0xa0    beqz a3,ffffffff8400ab94 <decodeTCBConfigure+0xa6>
    0x8400ab90     0xa2    slli a5,a5,0x27
    0x8400ab92     0xa4    or s1,s1,a5
    0x8400ab94     0xa6    andi a3,s1,-1024
    0x8400ab98     0xaa    ld a5,0(a3)
    0x8400ab9a     0xac    srli a5,a5,0x3b
    0x8400ab9c     0xae    sd a5,112(sp)         ; stack access
    0x8400ab9e     0xb0    beqz a5,ffffffff8400abec <decodeTCBConfigure+0xfe>
    0x8400aba0     0xb2    mv a0,a3
    0x8400aba2     0xb4    sd a3,120(sp)         ; stack access
    0x8400aba4     0xb6    jal ra,ffffffff8400621a <isFinalCapability>
    0x8400aba8     0xba    ld a3,120(sp)         ; stack access
    0x8400abaa     0xbc    beqz a0,ffffffff8400abec <decodeTCBConfigure+0xfe>
    0x8400abac     0xbe    ld a5,112(sp)         ; stack access
    0x8400abae     0xc0    li a2,8
    0x8400abb0     0xc2    addi a5,a5,-10
    0x8400abb2     0xc4    bltu a2,a5,ffffffff8400abec <decodeTCBConfigure+0xfe>
    0x8400abb6     0xc8    li a2,1
    0x8400abb8     0xca    sll a5,a2,a5
    0x8400abbc     0xce    andi a5,a5,261
    0x8400abc0     0xd2    beqz a5,ffffffff8400abec <decodeTCBConfigure+0xfe>
    0x8400abc2     0xd4    li a5,3
    0x8400abc4     0xd6    auipc a4,0x5
    0x8400abc8     0xda    sd a5,-1284(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400abcc     0xde    li a0,3
    0x8400abce     0xe0    ld ra,344(sp)         ; stack access
    0x8400abd0     0xe2    ld s0,336(sp)         ; stack access
    0x8400abd2     0xe4    ld s1,328(sp)         ; stack access
    0x8400abd4     0xe6    ld s2,320(sp)         ; stack access
    0x8400abd6     0xe8    ld s3,312(sp)         ; stack access
    0x8400abd8     0xea    ld s4,304(sp)         ; stack access
    0x8400abda     0xec    ld s5,296(sp)         ; stack access
    0x8400abdc     0xee    ld s6,288(sp)         ; stack access
    0x8400abde     0xf0    ld s7,280(sp)         ; stack access
    0x8400abe0     0xf2    ld s8,272(sp)         ; stack access
    0x8400abe2     0xf4    ld s9,264(sp)         ; stack access
    0x8400abe4     0xf6    ld s10,256(sp)        ; stack access
    0x8400abe6     0xf8    ld s11,248(sp)        ; stack access
    0x8400abe8     0xfa    addi sp,sp,352
    0x8400abea     0xfc    ret
    0x8400abec     0xfe    ld a5,32(a3)
    0x8400abee    0x100    addi a0,a3,32
    0x8400abf2    0x104    srli a5,a5,0x3b
    0x8400abf4    0x106    sd a5,112(sp)         ; stack access
    0x8400abf6    0x108    beqz a5,ffffffff8400ac14 <decodeTCBConfigure+0x126>
    0x8400abf8    0x10a    jal ra,ffffffff8400621a <isFinalCapability>
    0x8400abfc    0x10e    beqz a0,ffffffff8400ac14 <decodeTCBConfigure+0x126>
    0x8400abfe    0x110    ld a5,112(sp)         ; stack access
    0x8400ac00    0x112    li a3,8
    0x8400ac02    0x114    addi a5,a5,-10
    0x8400ac04    0x116    bltu a3,a5,ffffffff8400ac14 <decodeTCBConfigure+0x126>
    0x8400ac08    0x11a    li a3,1
    0x8400ac0a    0x11c    sll a5,a3,a5
    0x8400ac0e    0x120    andi a5,a5,261
    0x8400ac12    0x124    bnez a5,ffffffff8400abc2 <decodeTCBConfigure+0xd4>
    0x8400ac14    0x126    beqz s8,ffffffff8400ac28 <decodeTCBConfigure+0x13a>
    0x8400ac18    0x12a    ld a3,176(sp)         ; stack access
    0x8400ac1a    0x12c    mv a2,s9
    0x8400ac1c    0x12e    mv a1,s8
    0x8400ac1e    0x130    li a0,0
    0x8400ac20    0x132    jal ra,ffffffff84006b76 <updateCapData>
    0x8400ac24    0x136    sd a1,176(sp)         ; stack access
    0x8400ac26    0x138    mv s5,a0
    0x8400ac28    0x13a    ld a3,176(sp)         ; stack access
    0x8400ac2a    0x13c    addi a0,sp,216
    0x8400ac2c    0x13e    mv a2,s5
    0x8400ac2e    0x140    mv a1,s2
    0x8400ac30    0x142    jal ra,ffffffff84006146 <deriveCap>
    0x8400ac34    0x146    ld a0,216(sp)         ; stack access
    0x8400ac36    0x148    bnez a0,ffffffff8400abce <decodeTCBConfigure+0xe0>
    0x8400ac38    0x14a    ld s5,224(sp)         ; stack access
    0x8400ac3a    0x14c    ld a3,232(sp)         ; stack access
    0x8400ac3c    0x14e    li a5,10
    0x8400ac3e    0x150    sd s5,168(sp)         ; stack access
    0x8400ac40    0x152    sd a3,176(sp)         ; stack access
    0x8400ac42    0x154    srli a3,s5,0x3b
    0x8400ac46    0x158    bne a3,a5,ffffffff8400abc2 <decodeTCBConfigure+0xd4>
    0x8400ac4a    0x15c    ld a5,104(sp)         ; stack access
    0x8400ac4c    0x15e    beqz a5,ffffffff8400ac5e <decodeTCBConfigure+0x170>
    0x8400ac4e    0x160    ld a3,192(sp)         ; stack access
    0x8400ac50    0x162    mv a2,s3
    0x8400ac52    0x164    mv a1,a5
    0x8400ac54    0x166    li a0,0
    0x8400ac56    0x168    jal ra,ffffffff84006b76 <updateCapData>
    0x8400ac5a    0x16c    sd a1,192(sp)         ; stack access
    0x8400ac5c    0x16e    sd a0,96(sp)          ; stack access
    0x8400ac5e    0x170    ld a3,192(sp)         ; stack access
    0x8400ac60    0x172    ld a2,96(sp)          ; stack access
    0x8400ac62    0x174    addi a0,sp,216
    0x8400ac64    0x176    mv a1,s10
    0x8400ac66    0x178    jal ra,ffffffff84006146 <deriveCap>
    0x8400ac6a    0x17c    ld a0,216(sp)         ; stack access
    0x8400ac6c    0x17e    bnez a0,ffffffff8400abce <decodeTCBConfigure+0xe0>
    0x8400ac6e    0x180    ld s3,224(sp)         ; stack access
    0x8400ac70    0x182    ld a3,232(sp)         ; stack access
    0x8400ac72    0x184    li a5,3
    0x8400ac74    0x186    sd s3,184(sp)         ; stack access
    0x8400ac76    0x188    sd a3,192(sp)         ; stack access
    0x8400ac78    0x18a    srli s8,s3,0x3b
    0x8400ac7c    0x18e    bne s8,a5,ffffffff8400abc2 <decodeTCBConfigure+0xd4>
    0x8400ac80    0x192    srli a5,s3,0x27
    0x8400ac84    0x196    andi a5,a5,1
    0x8400ac86    0x198    beqz a5,ffffffff8400abc2 <decodeTCBConfigure+0xd4>
    0x8400ac88    0x19a    ld a0,0(s6)
    0x8400ac8c    0x19e    ld a5,280(a0)
    0x8400ac90    0x1a2    andi a5,a5,-16
    0x8400ac92    0x1a4    ori a5,a5,2
    0x8400ac96    0x1a8    sd a5,280(a0)
    0x8400ac9a    0x1ac    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400ac9e    0x1b0    ld a5,160(sp)         ; stack access
    0x8400aca0    0x1b2    sd s8,80(sp)          ; stack access
    0x8400aca2    0x1b4    sd s11,72(sp)         ; stack access
    0x8400aca4    0x1b6    sd a5,64(sp)          ; stack access
    0x8400aca6    0x1b8    ld a5,192(sp)         ; stack access
    0x8400aca8    0x1ba    sd s7,56(sp)          ; stack access
    0x8400acaa    0x1bc    sd s4,48(sp)          ; stack access
    0x8400acac    0x1be    sd a5,32(sp)          ; stack access
    0x8400acae    0x1c0    ld a5,176(sp)         ; stack access
    0x8400acb0    0x1c2    sd s10,40(sp)         ; stack access
    0x8400acb2    0x1c4    sd s3,24(sp)          ; stack access
    0x8400acb4    0x1c6    sd a5,8(sp)           ; stack access
    0x8400acb6    0x1c8    sd s2,16(sp)          ; stack access
    0x8400acb8    0x1ca    sd s5,0(sp)           ; stack access
    0x8400acba    0x1cc    li a7,0
    0x8400acbc    0x1ce    li a5,0
    0x8400acbe    0x1d0    li a6,0
    0x8400acc0    0x1d2    li a4,0
    0x8400acc2    0x1d4    li a2,0
    0x8400acc4    0x1d6    li a3,0
    0x8400acc6    0x1d8    mv a1,s0
    0x8400acc8    0x1da    mv a0,s1
    0x8400acca    0x1dc    jal ra,ffffffff8400a8a2 <invokeTCB_ThreadControlCaps>
    0x8400acce    0x1e0    j ffffffff8400abce <decodeTCBConfigure+0xe0>
    0x8400acd0    0x1e2    li a5,7
    0x8400acd2    0x1e4    auipc a4,0x5
    0x8400acd6    0x1e8    sd a5,-1554(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400acda    0x1ec    li a0,3
    0x8400acdc    0x1ee    j ffffffff8400abce <decodeTCBConfigure+0xe0>
    0x8400acde    0x1f0    addi a0,sp,216
    0x8400ace0    0x1f2    mv a1,s11
    0x8400ace2    0x1f4    jal ra,ffffffff84006146 <deriveCap>
    0x8400ace6    0x1f8    ld a0,216(sp)         ; stack access
    0x8400ace8    0x1fa    bnez a0,ffffffff8400abce <decodeTCBConfigure+0xe0>
    0x8400acec    0x1fe    ld s7,224(sp)         ; stack access
    0x8400acee    0x200    ld a3,232(sp)         ; stack access
    0x8400acf0    0x202    li a5,1
    0x8400acf2    0x204    sd s7,152(sp)         ; stack access
    0x8400acf4    0x206    sd a3,160(sp)         ; stack access
    0x8400acf6    0x208    srli a3,s7,0x3b
    0x8400acfa    0x20c    bne a3,a5,ffffffff8400abc2 <decodeTCBConfigure+0xd4>
    0x8400acfe    0x210    srli a5,s7,0x36
    0x8400ad02    0x214    andi a5,a5,1
    0x8400ad04    0x216    bnez a5,ffffffff8400abc2 <decodeTCBConfigure+0xd4>
    0x8400ad08    0x21a    andi a5,s4,1023
    0x8400ad0c    0x21e    beqz a5,ffffffff8400ab7e <decodeTCBConfigure+0x90>
    0x8400ad10    0x222    li a5,5
    0x8400ad12    0x224    auipc a4,0x5
    0x8400ad16    0x228    sd a5,-1618(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400ad1a    0x22c    li a0,3
    0x8400ad1c    0x22e    j ffffffff8400abce <decodeTCBConfigure+0xe0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
217 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 379 nodes.

Section invokeTCB_ThreadControlCaps (270 of 296)
================================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControlCaps` consists of 226 instructions.


Stack analysis
---------------

95 stack accesses found. Annotated code for `invokeTCB_ThreadControlCaps`:

    0x8400a8a2      0x0    addi sp,sp,-176
    0x8400a8a4      0x2    sd s1,152(sp)         ; stack access
    0x8400a8a6      0x4    ld s1,256(sp)         ; stack access
    0x8400a8a8      0x6    sd s0,160(sp)         ; stack access
    0x8400a8aa      0x8    sd a5,0(sp)           ; stack access
    0x8400a8ac      0xa    slli s0,a0,0x19
    0x8400a8b0      0xe    li a5,3
    0x8400a8b2     0x10    sd s2,144(sp)         ; stack access
    0x8400a8b4     0x12    sd s4,128(sp)         ; stack access
    0x8400a8b6     0x14    sd s5,120(sp)         ; stack access
    0x8400a8b8     0x16    mv s2,a0
    0x8400a8ba     0x18    srli s0,s0,0x19
    0x8400a8bc     0x1a    slli a5,a5,0x3d
    0x8400a8be     0x1c    sd ra,168(sp)         ; stack access
    0x8400a8c0     0x1e    sd s3,136(sp)         ; stack access
    0x8400a8c2     0x20    sd s6,112(sp)         ; stack access
    0x8400a8c4     0x22    sd s7,104(sp)         ; stack access
    0x8400a8c6     0x24    sd a6,8(sp)           ; stack access
    0x8400a8c8     0x26    andi a0,s1,4
    0x8400a8cc     0x2a    mv s4,a1
    0x8400a8ce     0x2c    mv s5,a7
    0x8400a8d0     0x2e    or s0,s0,a5
    0x8400a8d2     0x30    bnez a0,ffffffff8400a970 <invokeTCB_ThreadControlCaps+0xce>
    0x8400a8d4     0x32    andi a5,s1,8
    0x8400a8d8     0x36    bnez a5,ffffffff8400a9d2 <invokeTCB_ThreadControlCaps+0x130>
    0x8400a8dc     0x3a    andi a5,s1,2
    0x8400a8e0     0x3e    bnez a5,ffffffff8400aa36 <invokeTCB_ThreadControlCaps+0x194>
    0x8400a8e4     0x42    andi s1,s1,1
    0x8400a8e6     0x44    bnez s1,ffffffff8400a902 <invokeTCB_ThreadControlCaps+0x60>
    0x8400a8e8     0x46    li s3,0
    0x8400a8ea     0x48    ld ra,168(sp)         ; stack access
    0x8400a8ec     0x4a    ld s0,160(sp)         ; stack access
    0x8400a8ee     0x4c    ld s1,152(sp)         ; stack access
    0x8400a8f0     0x4e    ld s2,144(sp)         ; stack access
    0x8400a8f2     0x50    ld s4,128(sp)         ; stack access
    0x8400a8f4     0x52    ld s5,120(sp)         ; stack access
    0x8400a8f6     0x54    ld s6,112(sp)         ; stack access
    0x8400a8f8     0x56    ld s7,104(sp)         ; stack access
    0x8400a8fa     0x58    mv a0,s3
    0x8400a8fc     0x5a    ld s3,136(sp)         ; stack access
    0x8400a8fe     0x5c    addi sp,sp,176
    0x8400a900     0x5e    ret
    0x8400a902     0x60    andi s1,s2,-1024
    0x8400a906     0x64    addi s1,s1,64
    0x8400a90a     0x68    li a2,1
    0x8400a90c     0x6a    mv a1,s1
    0x8400a90e     0x6c    addi a0,sp,64
    0x8400a910     0x6e    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400a914     0x72    ld s3,64(sp)          ; stack access
    0x8400a916     0x74    bnez s3,ffffffff8400a8ea <invokeTCB_ThreadControlCaps+0x48>
    0x8400a91a     0x78    ld a1,80(sp)          ; stack access
    0x8400a91c     0x7a    ld a2,88(sp)          ; stack access
    0x8400a91e     0x7c    mv a0,s1
    0x8400a920     0x7e    jal ra,ffffffff8400340c <emptySlot>
    0x8400a924     0x82    ld a5,224(sp)         ; stack access
    0x8400a926     0x84    sd a5,384(s2)
    0x8400a92a     0x88    ld a5,248(sp)         ; stack access
    0x8400a92c     0x8a    beqz a5,ffffffff8400a95e <invokeTCB_ThreadControlCaps+0xbc>
    0x8400a92e     0x8c    ld a2,0(a5)
    0x8400a930     0x8e    ld a3,8(a5)
    0x8400a932     0x90    ld a0,232(sp)         ; stack access
    0x8400a934     0x92    ld a1,240(sp)         ; stack access
    0x8400a936     0x94    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a93a     0x98    beqz a0,ffffffff8400a95e <invokeTCB_ThreadControlCaps+0xbc>
    0x8400a93c     0x9a    ld a2,0(s4)
    0x8400a940     0x9e    ld a3,8(s4)
    0x8400a944     0xa2    mv a0,s0
    0x8400a946     0xa4    li a1,0
    0x8400a948     0xa6    sd s0,64(sp)          ; stack access
    0x8400a94a     0xa8    sd zero,72(sp)        ; stack access
    0x8400a94c     0xaa    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a950     0xae    beqz a0,ffffffff8400a95e <invokeTCB_ThreadControlCaps+0xbc>
    0x8400a952     0xb0    ld a0,232(sp)         ; stack access
    0x8400a954     0xb2    ld a1,240(sp)         ; stack access
    0x8400a956     0xb4    ld a2,248(sp)         ; stack access
    0x8400a958     0xb6    mv a3,s1
    0x8400a95a     0xb8    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400a95e     0xbc    auipc a5,0x17
    0x8400a962     0xc0    ld a5,-262(a5) # ffffffff84021858 <ksCurThread>
    0x8400a966     0xc4    bne a5,s2,ffffffff8400a8e8 <invokeTCB_ThreadControlCaps+0x46>
    0x8400a96a     0xc8    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400a96e     0xcc    j ffffffff8400a8ea <invokeTCB_ThreadControlCaps+0x48>
    0x8400a970     0xce    andi s7,s2,-1024
    0x8400a974     0xd2    addi s7,s7,96
    0x8400a978     0xd6    mv a5,a2
    0x8400a97a     0xd8    mv a1,s7
    0x8400a97c     0xda    li a2,1
    0x8400a97e     0xdc    addi a0,sp,64
    0x8400a980     0xde    mv s6,a4
    0x8400a982     0xe0    sd s0,32(sp)          ; stack access
    0x8400a984     0xe2    sd zero,40(sp)        ; stack access
    0x8400a986     0xe4    sd a5,48(sp)          ; stack access
    0x8400a988     0xe6    sd a3,56(sp)          ; stack access
    0x8400a98a     0xe8    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400a98e     0xec    ld s3,64(sp)          ; stack access
    0x8400a990     0xee    bnez s3,ffffffff8400a8ea <invokeTCB_ThreadControlCaps+0x48>
    0x8400a994     0xf2    ld a1,80(sp)          ; stack access
    0x8400a996     0xf4    ld a2,88(sp)          ; stack access
    0x8400a998     0xf6    mv a0,s7
    0x8400a99a     0xf8    jal ra,ffffffff8400340c <emptySlot>
    0x8400a99e     0xfc    ld a2,0(s6)
    0x8400a9a2    0x100    ld a3,8(s6)
    0x8400a9a6    0x104    ld a0,48(sp)          ; stack access
    0x8400a9a8    0x106    ld a1,56(sp)          ; stack access
    0x8400a9aa    0x108    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a9ae    0x10c    beqz a0,ffffffff8400a8d4 <invokeTCB_ThreadControlCaps+0x32>
    0x8400a9b0    0x10e    ld a2,0(s4)
    0x8400a9b4    0x112    ld a3,8(s4)
    0x8400a9b8    0x116    ld a0,32(sp)          ; stack access
    0x8400a9ba    0x118    ld a1,40(sp)          ; stack access
    0x8400a9bc    0x11a    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a9c0    0x11e    beqz a0,ffffffff8400a8d4 <invokeTCB_ThreadControlCaps+0x32>
    0x8400a9c4    0x122    ld a0,48(sp)          ; stack access
    0x8400a9c6    0x124    ld a1,56(sp)          ; stack access
    0x8400a9c8    0x126    mv a3,s7
    0x8400a9ca    0x128    mv a2,s6
    0x8400a9cc    0x12a    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400a9d0    0x12e    j ffffffff8400a8d4 <invokeTCB_ThreadControlCaps+0x32>
    0x8400a9d2    0x130    ld a5,0(sp)           ; stack access
    0x8400a9d4    0x132    andi s6,s2,-1024
    0x8400a9d8    0x136    addi s6,s6,128
    0x8400a9dc    0x13a    sd a5,48(sp)          ; stack access
    0x8400a9de    0x13c    ld a5,8(sp)           ; stack access
    0x8400a9e0    0x13e    li a2,1
    0x8400a9e2    0x140    mv a1,s6
    0x8400a9e4    0x142    addi a0,sp,64
    0x8400a9e6    0x144    sd s0,32(sp)          ; stack access
    0x8400a9e8    0x146    sd zero,40(sp)        ; stack access
    0x8400a9ea    0x148    sd a5,56(sp)          ; stack access
    0x8400a9ec    0x14a    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400a9f0    0x14e    ld s3,64(sp)          ; stack access
    0x8400a9f2    0x150    bnez s3,ffffffff8400a8ea <invokeTCB_ThreadControlCaps+0x48>
    0x8400a9f6    0x154    ld a1,80(sp)          ; stack access
    0x8400a9f8    0x156    ld a2,88(sp)          ; stack access
    0x8400a9fa    0x158    mv a0,s6
    0x8400a9fc    0x15a    jal ra,ffffffff8400340c <emptySlot>
    0x8400aa00    0x15e    ld a2,0(s5)
    0x8400aa04    0x162    ld a3,8(s5)
    0x8400aa08    0x166    ld a0,48(sp)          ; stack access
    0x8400aa0a    0x168    ld a1,56(sp)          ; stack access
    0x8400aa0c    0x16a    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400aa10    0x16e    beqz a0,ffffffff8400a8dc <invokeTCB_ThreadControlCaps+0x3a>
    0x8400aa14    0x172    ld a2,0(s4)
    0x8400aa18    0x176    ld a3,8(s4)
    0x8400aa1c    0x17a    ld a0,32(sp)          ; stack access
    0x8400aa1e    0x17c    ld a1,40(sp)          ; stack access
    0x8400aa20    0x17e    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400aa24    0x182    beqz a0,ffffffff8400a8dc <invokeTCB_ThreadControlCaps+0x3a>
    0x8400aa28    0x186    ld a0,48(sp)          ; stack access
    0x8400aa2a    0x188    ld a1,56(sp)          ; stack access
    0x8400aa2c    0x18a    mv a3,s6
    0x8400aa2e    0x18c    mv a2,s5
    0x8400aa30    0x18e    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400aa34    0x192    j ffffffff8400a8dc <invokeTCB_ThreadControlCaps+0x3a>
    0x8400aa36    0x194    ld a5,176(sp)         ; stack access
    0x8400aa38    0x196    andi s5,s2,-1024
    0x8400aa3c    0x19a    li a2,1
    0x8400aa3e    0x19c    sd a5,48(sp)          ; stack access
    0x8400aa40    0x19e    ld a5,184(sp)         ; stack access
    0x8400aa42    0x1a0    mv a1,s5
    0x8400aa44    0x1a2    addi a0,sp,64
    0x8400aa46    0x1a4    sd s0,32(sp)          ; stack access
    0x8400aa48    0x1a6    sd zero,40(sp)        ; stack access
    0x8400aa4a    0x1a8    sd a5,56(sp)          ; stack access
    0x8400aa4c    0x1aa    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400aa50    0x1ae    ld s3,64(sp)          ; stack access
    0x8400aa52    0x1b0    bnez s3,ffffffff8400a8ea <invokeTCB_ThreadControlCaps+0x48>
    0x8400aa56    0x1b4    ld a1,80(sp)          ; stack access
    0x8400aa58    0x1b6    ld a2,88(sp)          ; stack access
    0x8400aa5a    0x1b8    mv a0,s5
    0x8400aa5c    0x1ba    jal ra,ffffffff8400340c <emptySlot>
    0x8400aa60    0x1be    ld a5,192(sp)         ; stack access
    0x8400aa62    0x1c0    ld a0,48(sp)          ; stack access
    0x8400aa64    0x1c2    ld a1,56(sp)          ; stack access
    0x8400aa66    0x1c4    ld a2,0(a5)
    0x8400aa68    0x1c6    ld a3,8(a5)
    0x8400aa6a    0x1c8    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400aa6e    0x1cc    beqz a0,ffffffff8400aa82 <invokeTCB_ThreadControlCaps+0x1e0>
    0x8400aa70    0x1ce    ld a2,0(s4)
    0x8400aa74    0x1d2    ld a3,8(s4)
    0x8400aa78    0x1d6    ld a0,32(sp)          ; stack access
    0x8400aa7a    0x1d8    ld a1,40(sp)          ; stack access
    0x8400aa7c    0x1da    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400aa80    0x1de    bnez a0,ffffffff8400aae0 <invokeTCB_ThreadControlCaps+0x23e>
    0x8400aa82    0x1e0    ld a5,200(sp)         ; stack access
    0x8400aa84    0x1e2    addi s5,s5,32
    0x8400aa88    0x1e6    li a2,1
    0x8400aa8a    0x1e8    sd a5,48(sp)          ; stack access
    0x8400aa8c    0x1ea    ld a5,208(sp)         ; stack access
    0x8400aa8e    0x1ec    mv a1,s5
    0x8400aa90    0x1ee    addi a0,sp,64
    0x8400aa92    0x1f0    sd s0,32(sp)          ; stack access
    0x8400aa94    0x1f2    sd zero,40(sp)        ; stack access
    0x8400aa96    0x1f4    sd a5,56(sp)          ; stack access
    0x8400aa98    0x1f6    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400aa9c    0x1fa    ld s3,64(sp)          ; stack access
    0x8400aa9e    0x1fc    bnez s3,ffffffff8400a8ea <invokeTCB_ThreadControlCaps+0x48>
    0x8400aaa2    0x200    ld a1,80(sp)          ; stack access
    0x8400aaa4    0x202    ld a2,88(sp)          ; stack access
    0x8400aaa6    0x204    mv a0,s5
    0x8400aaa8    0x206    jal ra,ffffffff8400340c <emptySlot>
    0x8400aaac    0x20a    ld a5,216(sp)         ; stack access
    0x8400aaae    0x20c    ld a0,48(sp)          ; stack access
    0x8400aab0    0x20e    ld a1,56(sp)          ; stack access
    0x8400aab2    0x210    ld a2,0(a5)
    0x8400aab4    0x212    ld a3,8(a5)
    0x8400aab6    0x214    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400aaba    0x218    beqz a0,ffffffff8400a8e4 <invokeTCB_ThreadControlCaps+0x42>
    0x8400aabe    0x21c    ld a2,0(s4)
    0x8400aac2    0x220    ld a3,8(s4)
    0x8400aac6    0x224    ld a0,32(sp)          ; stack access
    0x8400aac8    0x226    ld a1,40(sp)          ; stack access
    0x8400aaca    0x228    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400aace    0x22c    beqz a0,ffffffff8400a8e4 <invokeTCB_ThreadControlCaps+0x42>
    0x8400aad2    0x230    ld a0,48(sp)          ; stack access
    0x8400aad4    0x232    ld a1,56(sp)          ; stack access
    0x8400aad6    0x234    ld a2,216(sp)         ; stack access
    0x8400aad8    0x236    mv a3,s5
    0x8400aada    0x238    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400aade    0x23c    j ffffffff8400a8e4 <invokeTCB_ThreadControlCaps+0x42>
    0x8400aae0    0x23e    ld a0,48(sp)          ; stack access
    0x8400aae2    0x240    ld a1,56(sp)          ; stack access
    0x8400aae4    0x242    ld a2,192(sp)         ; stack access
    0x8400aae6    0x244    mv a3,s5
    0x8400aae8    0x246    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400aaec    0x24a    j ffffffff8400aa82 <invokeTCB_ThreadControlCaps+0x1e0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
226 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControlCaps` has 412 nodes.

Section sendIPC (271 of 296)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 219 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `sendIPC`:

    0x84008d4a      0x0    ld t1,0(a7)
    0x84008d4e      0x4    addi sp,sp,-64
    0x84008d50      0x6    sd s0,48(sp)          ; stack access
    0x84008d52      0x8    sd s1,40(sp)          ; stack access
    0x84008d54      0xa    sd s3,24(sp)          ; stack access
    0x84008d56      0xc    sd s4,16(sp)          ; stack access
    0x84008d58      0xe    sd s5,8(sp)           ; stack access
    0x84008d5a     0x10    mv s0,a7
    0x84008d5c     0x12    sd ra,56(sp)          ; stack access
    0x84008d5e     0x14    sd s2,32(sp)          ; stack access
    0x84008d60     0x16    sd s6,0(sp)           ; stack access
    0x84008d62     0x18    andi a7,t1,2
    0x84008d66     0x1c    mv s4,a1
    0x84008d68     0x1e    mv s5,a3
    0x84008d6a     0x20    mv s3,a4
    0x84008d6c     0x22    mv s1,a6
    0x84008d6e     0x24    beqz a7,ffffffff84008e6c <sendIPC+0x122>
    0x84008d72     0x28    andi a6,t1,3
    0x84008d76     0x2c    li a0,2
    0x84008d78     0x2e    bne a6,a0,ffffffff84008e6e <sendIPC+0x124>
    0x84008d7c     0x32    mv s6,a5
    0x84008d7e     0x34    ld a5,8(s0)
    0x84008d80     0x36    srli a4,t1,0x26
    0x84008d84     0x3a    lui a6,0xf8000
    0x84008d88     0x3e    srli a6,a6,0x19
    0x84008d8c     0x42    andi a4,a4,1
    0x84008d8e     0x44    mv s2,a5
    0x84008d90     0x46    and a6,t1,a6
    0x84008d94     0x4a    beqz a4,ffffffff84008d9e <sendIPC+0x54>
    0x84008d96     0x4c    li a4,-1
    0x84008d98     0x4e    slli a4,a4,0x27
    0x84008d9a     0x50    or a6,a6,a4
    0x84008d9e     0x54    li a0,-1
    0x84008da0     0x56    ld a4,416(a5)
    0x84008da4     0x5a    slli a0,a0,0x27
    0x84008da6     0x5c    addi a3,a0,3
    0x84008daa     0x60    ld a1,408(a5)
    0x84008dae     0x64    and a3,t1,a3
    0x84008db2     0x68    beqz a4,ffffffff84008f48 <sendIPC+0x1fe>
    0x84008db6     0x6c    sd a1,408(a4) # f198 <KERNEL_OFFSET-0xfffffffeffff0e68>
    0x84008dba     0x70    beqz a1,ffffffff84008f08 <sendIPC+0x1be>
    0x84008dbe     0x74    lui a0,0xf8000
    0x84008dc2     0x78    srli a0,a0,0x19
    0x84008dc4     0x7a    and a6,a6,a0
    0x84008dc8     0x7e    sd a4,416(a1)
    0x84008dcc     0x82    or a6,a6,a3
    0x84008dd0     0x86    sd a5,8(s0)
    0x84008dd2     0x88    sd a6,0(s0)
    0x84008dd6     0x8c    mv a4,s2
    0x84008dd8     0x8e    mv a3,s5
    0x84008dda     0x90    mv a1,s0
    0x84008ddc     0x92    mv a0,s1
    0x84008dde     0x94    jal ra,ffffffff84008cc4 <doIPCTransfer>
    0x84008de2     0x98    ld a3,288(s2)
    0x84008de6     0x9c    lui a4,0xe0000
    0x84008dea     0xa0    srli a4,a4,0x19
    0x84008dec     0xa2    srli a2,a3,0x1
    0x84008df0     0xa6    srli a5,a2,0x26
    0x84008df4     0xaa    andi a5,a5,1
    0x84008df6     0xac    and a2,a2,a4
    0x84008df8     0xae    beqz a5,ffffffff84008f20 <sendIPC+0x1d6>
    0x84008dfc     0xb2    li s0,-1
    0x84008dfe     0xb4    slli s0,s0,0x27
    0x84008e00     0xb6    or s0,s0,a2
    0x84008e02     0xb8    li a5,-1
    0x84008e04     0xba    slli a5,a5,0x28
    0x84008e06     0xbc    ld a4,280(s2)
    0x84008e0a     0xc0    addi a5,a5,31
    0x84008e0c     0xc2    and a3,a3,a5
    0x84008e0e     0xc4    sd a3,288(s2)
    0x84008e12     0xc8    sd zero,0(s0)
    0x84008e16     0xcc    andi a5,a4,-16
    0x84008e1a     0xd0    sd a5,280(s2)
    0x84008e1e     0xd4    mv a0,s2
    0x84008e20     0xd6    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008e24     0xda    beqz s4,ffffffff84008f92 <sendIPC+0x248>
    0x84008e28     0xde    or a3,s5,s3
    0x84008e2c     0xe2    bnez a3,ffffffff84008f84 <sendIPC+0x23a>
    0x84008e30     0xe6    ld a5,280(s1)
    0x84008e34     0xea    mv a0,s1
    0x84008e36     0xec    andi a5,a5,-16
    0x84008e38     0xee    sd a5,280(s1)
    0x84008e3c     0xf2    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008e40     0xf6    ld a5,280(s2)
    0x84008e44     0xfa    mv a0,s2
    0x84008e46     0xfc    andi a5,a5,-16
    0x84008e48     0xfe    ori a5,a5,1
    0x84008e4c    0x102    sd a5,280(s2)
    0x84008e50    0x106    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008e54    0x10a    ld s0,48(sp)          ; stack access
    0x84008e56    0x10c    ld ra,56(sp)          ; stack access
    0x84008e58    0x10e    ld s1,40(sp)          ; stack access
    0x84008e5a    0x110    ld s3,24(sp)          ; stack access
    0x84008e5c    0x112    ld s4,16(sp)          ; stack access
    0x84008e5e    0x114    ld s5,8(sp)           ; stack access
    0x84008e60    0x116    ld s6,0(sp)           ; stack access
    0x84008e62    0x118    mv a0,s2
    0x84008e64    0x11a    ld s2,32(sp)          ; stack access
    0x84008e66    0x11c    addi sp,sp,64
    0x84008e68    0x11e    j ffffffff84004ca6 <possibleSwitchTo>
    0x84008e6c    0x122    bnez a0,ffffffff84008e82 <sendIPC+0x138>
    0x84008e6e    0x124    ld ra,56(sp)          ; stack access
    0x84008e70    0x126    ld s0,48(sp)          ; stack access
    0x84008e72    0x128    ld s1,40(sp)          ; stack access
    0x84008e74    0x12a    ld s2,32(sp)          ; stack access
    0x84008e76    0x12c    ld s3,24(sp)          ; stack access
    0x84008e78    0x12e    ld s4,16(sp)          ; stack access
    0x84008e7a    0x130    ld s5,8(sp)           ; stack access
    0x84008e7c    0x132    ld s6,0(sp)           ; stack access
    0x84008e7e    0x134    addi sp,sp,64
    0x84008e80    0x136    ret
    0x84008e82    0x138    ld a5,288(a6) # fffffffff8000120 <ki_end+0x73fd9120>
    0x84008e86    0x13c    ld a1,280(a6)
    0x84008e8a    0x140    slli a3,a3,0x4
    0x84008e8c    0x142    andi s5,a3,16
    0x84008e90    0x146    slli a4,a4,0x3
    0x84008e92    0x148    andi a3,a5,-25
    0x84008e96    0x14c    lui a0,0xe0000
    0x84008e9a    0x150    li a5,-1
    0x84008e9c    0x152    slli s2,a5,0x27
    0x84008ea0    0x156    or a3,a3,s5
    0x84008ea4    0x15a    andi a4,a4,8
    0x84008ea6    0x15c    srli a0,a0,0x19
    0x84008ea8    0x15e    and a1,a1,s2
    0x84008eac    0x162    and a0,a0,s0
    0x84008eae    0x164    or a4,a4,a3
    0x84008eb0    0x166    slli s4,s4,0x2
    0x84008eb2    0x168    or a3,a1,a0
    0x84008eb6    0x16c    andi a4,a4,-5
    0x84008eb8    0x16e    andi s4,s4,4
    0x84008ebc    0x172    ori a3,a3,4
    0x84008ec0    0x176    or s4,a4,s4
    0x84008ec4    0x17a    sd a3,280(a6)
    0x84008ec8    0x17e    mv a0,a6
    0x84008eca    0x180    sd a2,296(a6)
    0x84008ece    0x184    sd s4,288(a6)
    0x84008ed2    0x188    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008ed6    0x18c    ld a4,0(s0)
    0x84008ed8    0x18e    lui a5,0xf8000
    0x84008edc    0x192    srli a5,a5,0x19
    0x84008ede    0x194    srli a3,a4,0x26
    0x84008ee2    0x198    andi a3,a3,1
    0x84008ee4    0x19a    ld a0,8(s0)
    0x84008ee6    0x19c    and a5,a5,a4
    0x84008ee8    0x19e    beqz a3,ffffffff84008f5a <sendIPC+0x210>
    0x84008eea    0x1a0    or a5,a5,s2
    0x84008eee    0x1a4    ld a3,360(s1)
    0x84008ef2    0x1a8    mv a2,a5
    0x84008ef4    0x1aa    li a1,0
    0x84008ef6    0x1ac    ld a6,360(a2)
    0x84008efa    0x1b0    bltu a6,a3,ffffffff84008f9e <sendIPC+0x254>
    0x84008efe    0x1b4    sd s1,408(a2)
    0x84008f02    0x1b8    bnez a1,ffffffff84008fac <sendIPC+0x262>
    0x84008f04    0x1ba    mv a5,s1
    0x84008f06    0x1bc    j ffffffff84008f64 <sendIPC+0x21a>
    0x84008f08    0x1be    lui a6,0xf8000
    0x84008f0c    0x1c2    srli a6,a6,0x19
    0x84008f10    0x1c6    and a4,a4,a6
    0x84008f14    0x1ca    or a6,a4,a3
    0x84008f18    0x1ce    sd a5,8(s0)
    0x84008f1a    0x1d0    sd a6,0(s0)
    0x84008f1e    0x1d4    j ffffffff84008dd6 <sendIPC+0x8c>
    0x84008f20    0x1d6    bnez a2,ffffffff84008fb8 <sendIPC+0x26e>
    0x84008f22    0x1d8    bnez s4,ffffffff84008e30 <sendIPC+0xe6>
    0x84008f26    0x1dc    ld a5,312(s1)
    0x84008f2a    0x1e0    andi a5,a5,15
    0x84008f2c    0x1e2    bnez a5,ffffffff84008e30 <sendIPC+0xe6>
    0x84008f30    0x1e6    beqz s6,ffffffff84008e40 <sendIPC+0xf6>
    0x84008f34    0x1ea    ld a5,368(s2)
    0x84008f38    0x1ee    bnez a5,ffffffff84008e40 <sendIPC+0xf6>
    0x84008f3c    0x1f2    ld a0,368(s1)
    0x84008f40    0x1f6    mv a1,s2
    0x84008f42    0x1f8    jal ra,ffffffff840072a0 <schedContext_donate>
    0x84008f46    0x1fc    j ffffffff84008e40 <sendIPC+0xf6>
    0x84008f48    0x1fe    mv a5,a1
    0x84008f4a    0x200    bnez a1,ffffffff84008dbe <sendIPC+0x74>
    0x84008f4e    0x204    and a0,t1,a0
    0x84008f52    0x208    sd zero,8(s0)
    0x84008f56    0x20c    sd a0,0(s0)
    0x84008f58    0x20e    j ffffffff84008dd6 <sendIPC+0x8c>
    0x84008f5a    0x210    bnez a5,ffffffff84008eee <sendIPC+0x1a4>
    0x84008f5c    0x212    mv a0,s1
    0x84008f5e    0x214    mv a5,s1
    0x84008f60    0x216    li a2,0
    0x84008f62    0x218    li a1,0
    0x84008f64    0x21a    lui a3,0xf8000
    0x84008f68    0x21e    srli a4,a4,0x27
    0x84008f6a    0x220    srli a3,a3,0x19
    0x84008f6c    0x222    slli a4,a4,0x27
    0x84008f6e    0x224    and a5,a5,a3
    0x84008f70    0x226    or a5,a5,a4
    0x84008f72    0x228    sd a1,408(s1)
    0x84008f76    0x22c    sd a2,416(s1)
    0x84008f7a    0x230    ori a5,a5,1
    0x84008f7e    0x234    sd a0,8(s0)
    0x84008f80    0x236    sd a5,0(s0)
    0x84008f82    0x238    j ffffffff84008e6e <sendIPC+0x124>
    0x84008f84    0x23a    mv a3,s6
    0x84008f86    0x23c    mv a2,s0
    0x84008f88    0x23e    mv a1,s2
    0x84008f8a    0x240    mv a0,s1
    0x84008f8c    0x242    jal ra,ffffffff8400730a <reply_push>
    0x84008f90    0x246    j ffffffff84008e40 <sendIPC+0xf6>
    0x84008f92    0x248    ld a5,312(s1)
    0x84008f96    0x24c    andi a5,a5,15
    0x84008f98    0x24e    bnez a5,ffffffff84008e28 <sendIPC+0xde>
    0x84008f9c    0x252    j ffffffff84008f30 <sendIPC+0x1e6>
    0x84008f9e    0x254    ld a6,416(a2)
    0x84008fa2    0x258    bnez a6,ffffffff84008fb2 <sendIPC+0x268>
    0x84008fa6    0x25c    mv a1,a2
    0x84008fa8    0x25e    mv a0,s1
    0x84008faa    0x260    li a2,0
    0x84008fac    0x262    sd s1,416(a1)
    0x84008fb0    0x266    j ffffffff84008f64 <sendIPC+0x21a>
    0x84008fb2    0x268    mv a1,a2
    0x84008fb4    0x26a    mv a2,a6
    0x84008fb6    0x26c    j ffffffff84008ef6 <sendIPC+0x1ac>
    0x84008fb8    0x26e    mv s0,a2
    0x84008fba    0x270    j ffffffff84008e02 <sendIPC+0xb8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
219 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 335 nodes.

Section doNormalTransfer (272 of 296)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 138 instructions.

RVC_FTTTT_________FT.

Stack analysis
---------------

37 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84008b56      0x0    addi sp,sp,-176
    0x84008b58      0x2    sd s0,160(sp)         ; stack access
    0x84008b5a      0x4    ld s0,80(a0)
    0x84008b5c      0x6    sd s1,152(sp)         ; stack access
    0x84008b5e      0x8    sd s2,144(sp)         ; stack access
    0x84008b60      0xa    sd s3,136(sp)         ; stack access
    0x84008b62      0xc    sd s4,128(sp)         ; stack access
    0x84008b64      0xe    sd s5,120(sp)         ; stack access
    0x84008b66     0x10    sd s6,112(sp)         ; stack access
    0x84008b68     0x12    mv s1,a0
    0x84008b6a     0x14    sd ra,168(sp)         ; stack access
    0x84008b6c     0x16    sd s7,104(sp)         ; stack access
    0x84008b6e     0x18    sd s8,96(sp)          ; stack access
    0x84008b70     0x1a    sd s9,88(sp)          ; stack access
    0x84008b72     0x1c    sd s10,80(sp)         ; stack access
    0x84008b74     0x1e    sd s11,72(sp)         ; stack access
    0x84008b76     0x20    andi s4,s0,127
    0x84008b7a     0x24    li a0,120
    0x84008b7e     0x28    mv s3,a3
    0x84008b80     0x2a    mv s5,a2
    0x84008b82     0x2c    mv a3,a4
    0x84008b84     0x2e    mv s6,a5
    0x84008b86     0x30    mv s2,a6
    0x84008b88     0x32    bgeu a0,s4,ffffffff84008b98 <doNormalTransfer+0x42>
    0x84008b8c     0x36    andi s0,s0,-128
    0x84008b90     0x3a    ori s0,s0,120
    0x84008b94     0x3e    li s4,120
    0x84008b98     0x42    bnez a3,ffffffff84008bf2 <doNormalTransfer+0x9c>
    0x84008b9a     0x44    auipc a5,0x7
    0x84008b9e     0x48    sd zero,-410(a5) # ffffffff8400fa00 <current_extra_caps>
    0x84008ba2     0x4c    mv a4,s4
    0x84008ba4     0x4e    mv a3,s2
    0x84008ba6     0x50    mv a0,s1
    0x84008ba8     0x52    mv a2,s6
    0x84008baa     0x54    jal ra,ffffffff84008ae2 <copyMRs>
    0x84008bae     0x58    lui s10,0xfffff
    0x84008bb0     0x5a    addi a3,s10,127 # fffffffffffff07f <ki_end+0x7bfd807f>
    0x84008bb4     0x5e    auipc a4,0x7
    0x84008bb8     0x62    ld a4,-436(a4) # ffffffff8400fa00 <current_extra_caps>
    0x84008bbc     0x66    mv s1,a0
    0x84008bbe     0x68    and s0,s0,a3
    0x84008bc0     0x6a    bnez a4,ffffffff84008c02 <doNormalTransfer+0xac>
    0x84008bc2     0x6c    andi a0,s1,127
    0x84008bc6     0x70    andi s0,s0,-128
    0x84008bca     0x74    or s0,s0,a0
    0x84008bcc     0x76    sd s0,80(s6)
    0x84008bd0     0x7a    ld ra,168(sp)         ; stack access
    0x84008bd2     0x7c    ld s0,160(sp)         ; stack access
    0x84008bd4     0x7e    sd s3,72(s6)
    0x84008bd8     0x82    ld s1,152(sp)         ; stack access
    0x84008bda     0x84    ld s2,144(sp)         ; stack access
    0x84008bdc     0x86    ld s3,136(sp)         ; stack access
    0x84008bde     0x88    ld s4,128(sp)         ; stack access
    0x84008be0     0x8a    ld s5,120(sp)         ; stack access
    0x84008be2     0x8c    ld s6,112(sp)         ; stack access
    0x84008be4     0x8e    ld s7,104(sp)         ; stack access
    0x84008be6     0x90    ld s8,96(sp)          ; stack access
    0x84008be8     0x92    ld s9,88(sp)          ; stack access
    0x84008bea     0x94    ld s10,80(sp)         ; stack access
    0x84008bec     0x96    ld s11,72(sp)         ; stack access
    0x84008bee     0x98    addi sp,sp,176
    0x84008bf0     0x9a    ret
    0x84008bf2     0x9c    mv a2,s0
    0x84008bf4     0x9e    mv a0,s1
    0x84008bf6     0xa0    sd a1,8(sp)           ; stack access
    0x84008bf8     0xa2    jal ra,ffffffff84008a38 <lookupExtraCaps>
    0x84008bfc     0xa6    ld a1,8(sp)           ; stack access
    0x84008bfe     0xa8    beqz a0,ffffffff84008ba2 <doNormalTransfer+0x4c>
    0x84008c00     0xaa    j ffffffff84008b9a <doNormalTransfer+0x44>
    0x84008c02     0xac    beqz s2,ffffffff84008bc2 <doNormalTransfer+0x6c>
    0x84008c06     0xb0    mv a1,s2
    0x84008c08     0xb2    mv a0,s6
    0x84008c0a     0xb4    jal ra,ffffffff84005262 <getReceiveSlots>
    0x84008c0e     0xb8    li a5,1
    0x84008c10     0xba    li s7,-1
    0x84008c12     0xbc    slli a5,a5,0x26
    0x84008c14     0xbe    mv s8,a0
    0x84008c16     0xc0    auipc s9,0x7
    0x84008c1a     0xc4    addi s9,s9,-534 # ffffffff8400fa00 <current_extra_caps>
    0x84008c1e     0xc8    addi s2,s2,976
    0x84008c22     0xcc    li s11,0
    0x84008c24     0xce    sd a5,8(sp)           ; stack access
    0x84008c26     0xd0    addi s10,s10,511
    0x84008c2a     0xd4    slli s7,s7,0x27
    0x84008c2c     0xd6    ld s4,0(s9)
    0x84008c30     0xda    beqz s4,ffffffff84008cbc <doNormalTransfer+0x166>
    0x84008c34     0xde    ld a2,0(s4)
    0x84008c38     0xe2    ld a3,8(s4)
    0x84008c3c     0xe6    li a1,4
    0x84008c3e     0xe8    sd a2,24(sp)          ; stack access
    0x84008c40     0xea    sd a3,32(sp)          ; stack access
    0x84008c42     0xec    srli a0,a2,0x3b
    0x84008c46     0xf0    beq a0,a1,ffffffff84008c88 <doNormalTransfer+0x132>
    0x84008c4a     0xf4    beqz s8,ffffffff84008cbc <doNormalTransfer+0x166>
    0x84008c4e     0xf8    mv a1,s4
    0x84008c50     0xfa    addi a0,sp,40
    0x84008c52     0xfc    sd a3,32(sp)          ; stack access
    0x84008c54     0xfe    sd a2,24(sp)          ; stack access
    0x84008c56    0x100    jal ra,ffffffff84006146 <deriveCap>
    0x84008c5a    0x104    ld a3,40(sp)          ; stack access
    0x84008c5c    0x106    bnez a3,ffffffff84008cbc <doNormalTransfer+0x166>
    0x84008c5e    0x108    ld a0,48(sp)          ; stack access
    0x84008c60    0x10a    srli a3,a0,0x3b
    0x84008c64    0x10e    beqz a3,ffffffff84008cbc <doNormalTransfer+0x166>
    0x84008c66    0x110    ld a1,56(sp)          ; stack access
    0x84008c68    0x112    mv a3,s8
    0x84008c6a    0x114    mv a2,s4
    0x84008c6c    0x116    jal ra,ffffffff84004ec2 <cteInsert>
    0x84008c70    0x11a    li s8,0
    0x84008c72    0x11c    addi s11,s11,1
    0x84008c74    0x11e    li a3,3
    0x84008c76    0x120    addi s9,s9,8
    0x84008c78    0x122    addi s2,s2,8
    0x84008c7a    0x124    bne s11,a3,ffffffff84008c2c <doNormalTransfer+0xd6>
    0x84008c7e    0x128    li s11,384
    0x84008c82    0x12c    or s0,s0,s11
    0x84008c86    0x130    j ffffffff84008bc2 <doNormalTransfer+0x6c>
    0x84008c88    0x132    ld a5,8(sp)           ; stack access
    0x84008c8a    0x134    and a1,a2,a5
    0x84008c8e    0x138    li a5,-1
    0x84008c90    0x13a    srli a5,a5,0x19
    0x84008c92    0x13c    and a0,a2,a5
    0x84008c96    0x140    beqz a1,ffffffff84008c9c <doNormalTransfer+0x146>
    0x84008c98    0x142    or a0,a0,s7
    0x84008c9c    0x146    bne s5,a0,ffffffff84008c4a <doNormalTransfer+0xf4>
    0x84008ca0    0x14a    srli a2,s0,0x9
    0x84008ca4    0x14e    li a1,1
    0x84008ca6    0x150    andi a2,a2,7
    0x84008ca8    0x152    sllw a1,a1,s11
    0x84008cac    0x156    or a2,a2,a1
    0x84008cae    0x158    slli a2,a2,0x9
    0x84008cb0    0x15a    and s0,s0,s10
    0x84008cb4    0x15e    sd a3,0(s2)
    0x84008cb8    0x162    or s0,s0,a2
    0x84008cba    0x164    j ffffffff84008c72 <doNormalTransfer+0x11c>
    0x84008cbc    0x166    slli s11,s11,0x7
    0x84008cbe    0x168    or s0,s0,s11
    0x84008cc2    0x16c    j ffffffff84008bc2 <doNormalTransfer+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 216 nodes.

Section receiveSignal (273 of 296)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 154 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `receiveSignal`:

    0x84008170      0x0    addi sp,sp,-48
    0x84008172      0x2    li a5,-1
    0x84008174      0x4    srli a4,a1,0x26
    0x84008178      0x8    sd s0,32(sp)          ; stack access
    0x8400817a      0xa    srli a6,a5,0x19
    0x8400817e      0xe    sd ra,40(sp)          ; stack access
    0x84008180     0x10    sd a1,16(sp)          ; stack access
    0x84008182     0x12    sd a2,24(sp)          ; stack access
    0x84008184     0x14    andi a4,a4,1
    0x84008186     0x16    and s0,a1,a6
    0x8400818a     0x1a    beqz a4,ffffffff84008190 <receiveSignal+0x20>
    0x8400818c     0x1c    slli a5,a5,0x27
    0x8400818e     0x1e    or s0,s0,a5
    0x84008190     0x20    ld a5,0(s0)
    0x84008192     0x22    andi a4,a5,2
    0x84008196     0x26    andi a2,a5,3
    0x8400819a     0x2a    beqz a4,ffffffff840081b8 <receiveSignal+0x48>
    0x8400819c     0x2c    li a4,2
    0x8400819e     0x2e    bne a2,a4,ffffffff840081b0 <receiveSignal+0x40>
    0x840081a2     0x32    ld a3,16(s0)
    0x840081a4     0x34    ld a4,368(a0)
    0x840081a8     0x38    andi a5,a5,-4
    0x840081aa     0x3a    sd a3,72(a0)
    0x840081ac     0x3c    sd a5,0(s0)
    0x840081ae     0x3e    beqz a4,ffffffff840081c6 <receiveSignal+0x56>
    0x840081b0     0x40    ld ra,40(sp)          ; stack access
    0x840081b2     0x42    ld s0,32(sp)          ; stack access
    0x840081b4     0x44    addi sp,sp,48
    0x840081b6     0x46    ret
    0x840081b8     0x48    bnez a3,ffffffff8400820a <receiveSignal+0x9a>
    0x840081ba     0x4a    ld ra,40(sp)          ; stack access
    0x840081bc     0x4c    ld s0,32(sp)          ; stack access
    0x840081be     0x4e    sd zero,72(a0)
    0x840081c2     0x52    addi sp,sp,48
    0x840081c4     0x54    ret
    0x840081c6     0x56    ld a5,32(s0)
    0x840081c8     0x58    li s0,-1
    0x840081ca     0x5a    srli a3,s0,0x19
    0x840081ce     0x5e    srli a4,a5,0x26
    0x840081d2     0x62    andi a4,a4,1
    0x840081d4     0x64    and a5,a5,a3
    0x840081d6     0x66    beqz a4,ffffffff840082ca <receiveSignal+0x15a>
    0x840081da     0x6a    slli s0,s0,0x27
    0x840081dc     0x6c    or s0,s0,a5
    0x840081de     0x6e    ld a5,24(s0)
    0x840081e0     0x70    bnez a5,ffffffff840081b0 <receiveSignal+0x40>
    0x840081e2     0x72    mv a1,a0
    0x840081e4     0x74    mv a0,s0
    0x840081e6     0x76    jal ra,ffffffff840072a0 <schedContext_donate>
    0x840081ea     0x7a    auipc a5,0x19
    0x840081ee     0x7e    ld a5,1598(a5) # ffffffff84021828 <ksCurSC>
    0x840081f2     0x82    beq a5,s0,ffffffff84008200 <receiveSignal+0x90>
    0x840081f6     0x86    ld a5,0(s0)
    0x840081f8     0x88    beqz a5,ffffffff84008200 <receiveSignal+0x90>
    0x840081fa     0x8a    mv a0,s0
    0x840081fc     0x8c    jal ra,ffffffff840033a2 <refill_unblock_check.part.0>
    0x84008200     0x90    mv a0,s0
    0x84008202     0x92    ld s0,32(sp)          ; stack access
    0x84008204     0x94    ld ra,40(sp)          ; stack access
    0x84008206     0x96    addi sp,sp,48
    0x84008208     0x98    j ffffffff84007cca <schedContext_resume>
    0x8400820a     0x9a    ld a5,280(a0)
    0x8400820e     0x9e    li a3,-1
    0x84008210     0xa0    lui a4,0xe0000
    0x84008214     0xa4    slli a2,a3,0x27
    0x84008218     0xa8    srli a4,a4,0x19
    0x8400821a     0xaa    and a4,a4,s0
    0x8400821c     0xac    and a5,a5,a2
    0x8400821e     0xae    or a5,a5,a4
    0x84008220     0xb0    ori a5,a5,6
    0x84008224     0xb4    sd a5,280(a0)
    0x84008228     0xb8    ld a5,32(s0)
    0x8400822a     0xba    srli a3,a3,0x19
    0x8400822c     0xbc    srli a4,a5,0x26
    0x84008230     0xc0    andi a4,a4,1
    0x84008232     0xc2    and a5,a5,a3
    0x84008234     0xc4    beqz a4,ffffffff84008238 <receiveSignal+0xc8>
    0x84008236     0xc6    or a5,a5,a2
    0x84008238     0xc8    ld a4,368(a0)
    0x8400823c     0xcc    beq a5,a4,ffffffff840082d2 <receiveSignal+0x162>
    0x84008240     0xd0    sd a0,8(sp)           ; stack access
    0x84008242     0xd2    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008246     0xd6    ld a3,8(s0)
    0x84008248     0xd8    li a5,-1
    0x8400824a     0xda    srli a4,a5,0x19
    0x8400824e     0xde    srli a1,a3,0x26
    0x84008252     0xe2    andi a1,a1,1
    0x84008254     0xe4    ld a2,0(s0)
    0x84008256     0xe6    ld a0,8(sp)           ; stack access
    0x84008258     0xe8    and a4,a4,a3
    0x8400825a     0xea    beqz a1,ffffffff84008260 <receiveSignal+0xf0>
    0x8400825c     0xec    slli a5,a5,0x27
    0x8400825e     0xee    or a4,a4,a5
    0x84008260     0xf0    srli a5,a2,0x19
    0x84008264     0xf4    bgez a2,ffffffff8400828a <receiveSignal+0x11a>
    0x84008268     0xf8    li a1,-1
    0x8400826a     0xfa    slli a1,a1,0x27
    0x8400826c     0xfc    or a5,a5,a1
    0x8400826e     0xfe    ld a1,360(a0)
    0x84008272    0x102    mv a7,a5
    0x84008274    0x104    li t1,0
    0x84008276    0x106    ld a6,360(a7)
    0x8400827a    0x10a    bltu a6,a1,ffffffff840082f0 <receiveSignal+0x180>
    0x8400827e    0x10e    sd a0,408(a7)
    0x84008282    0x112    bnez t1,ffffffff840082fe <receiveSignal+0x18e>
    0x84008286    0x116    mv a5,a0
    0x84008288    0x118    j ffffffff84008294 <receiveSignal+0x124>
    0x8400828a    0x11a    bnez a5,ffffffff8400826e <receiveSignal+0xfe>
    0x8400828c    0x11c    mv a4,a0
    0x8400828e    0x11e    mv a5,a0
    0x84008290    0x120    li a7,0
    0x84008292    0x122    li t1,0
    0x84008294    0x124    lui a6,0x2000
    0x84008298    0x128    li a1,-1
    0x8400829a    0x12a    addi a6,a6,-4
    0x8400829c    0x12c    slli t3,a1,0x27
    0x840082a0    0x130    slli a5,a5,0x19
    0x840082a2    0x132    srli a1,a1,0x19
    0x840082a4    0x134    and a2,a2,a6
    0x840082a8    0x138    and a3,a3,t3
    0x840082ac    0x13c    and a4,a4,a1
    0x840082ae    0x13e    or a5,a5,a2
    0x840082b0    0x140    sd t1,408(a0)
    0x840082b4    0x144    sd a7,416(a0)
    0x840082b8    0x148    or a4,a4,a3
    0x840082ba    0x14a    ori a5,a5,1
    0x840082be    0x14e    ld ra,40(sp)          ; stack access
    0x840082c0    0x150    sd a4,8(s0)
    0x840082c2    0x152    sd a5,0(s0)
    0x840082c4    0x154    ld s0,32(sp)          ; stack access
    0x840082c6    0x156    addi sp,sp,48
    0x840082c8    0x158    ret
    0x840082ca    0x15a    beqz a5,ffffffff840081b0 <receiveSignal+0x40>
    0x840082ce    0x15e    mv s0,a5
    0x840082d0    0x160    j ffffffff840081de <receiveSignal+0x6e>
    0x840082d2    0x162    sd zero,368(a0)
    0x840082d6    0x166    sd zero,24(a5)
    0x840082da    0x16a    auipc a5,0x19
    0x840082de    0x16e    ld a5,1406(a5) # ffffffff84021858 <ksCurThread>
    0x840082e2    0x172    bne a0,a5,ffffffff84008240 <receiveSignal+0xd0>
    0x840082e6    0x176    sd a0,8(sp)           ; stack access
    0x840082e8    0x178    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x840082ec    0x17c    ld a0,8(sp)           ; stack access
    0x840082ee    0x17e    j ffffffff84008240 <receiveSignal+0xd0>
    0x840082f0    0x180    ld a6,416(a7)
    0x840082f4    0x184    bnez a6,ffffffff84008304 <receiveSignal+0x194>
    0x840082f8    0x188    mv t1,a7
    0x840082fa    0x18a    mv a4,a0
    0x840082fc    0x18c    li a7,0
    0x840082fe    0x18e    sd a0,416(t1)
    0x84008302    0x192    j ffffffff84008294 <receiveSignal+0x124>
    0x84008304    0x194    mv t1,a7
    0x84008306    0x196    mv a7,a6
    0x84008308    0x198    j ffffffff84008276 <receiveSignal+0x106>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
154 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 244 nodes.

Section setPriority (274 of 296)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 73 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `setPriority`:

    0x84005c3c     0x0    ld a4,280(a0)
    0x84005c40     0x4    addi sp,sp,-32
    0x84005c42     0x6    sd s0,16(sp)          ; stack access
    0x84005c44     0x8    sd ra,24(sp)          ; stack access
    0x84005c46     0xa    li a3,4
    0x84005c48     0xc    andi a5,a4,15
    0x84005c4c    0x10    mv s0,a0
    0x84005c4e    0x12    bltu a3,a5,ffffffff84005c8a <setPriority+0x4e>
    0x84005c52    0x16    li a3,2
    0x84005c54    0x18    bltu a3,a5,ffffffff84005cc0 <setPriority+0x84>
    0x84005c58    0x1c    addi a5,a5,-1
    0x84005c5a    0x1e    li a4,1
    0x84005c5c    0x20    bltu a4,a5,ffffffff84005cb4 <setPriority+0x78>
    0x84005c60    0x24    ld a5,288(a0)
    0x84005c64    0x28    srli a5,a5,0x1
    0x84005c66    0x2a    andi a5,a5,1
    0x84005c68    0x2c    bnez a5,ffffffff84005ce4 <setPriority+0xa8>
    0x84005c6a    0x2e    auipc a5,0x1c
    0x84005c6e    0x32    ld a5,-1042(a5) # ffffffff84021858 <ksCurThread>
    0x84005c72    0x36    bne a5,a0,ffffffff84005cb4 <setPriority+0x78>
    0x84005c76    0x3a    sd a1,360(a0)
    0x84005c7a    0x3e    mv a0,s0
    0x84005c7c    0x40    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x84005c80    0x44    ld s0,16(sp)          ; stack access
    0x84005c82    0x46    ld ra,24(sp)          ; stack access
    0x84005c84    0x48    addi sp,sp,32
    0x84005c86    0x4a    j ffffffff84004c1c <rescheduleRequired>
    0x84005c8a    0x4e    li a3,6
    0x84005c8c    0x50    bne a5,a3,ffffffff84005cb4 <setPriority+0x78>
    0x84005c90    0x54    srli a5,a4,0x26
    0x84005c94    0x58    sd a1,360(a0)
    0x84005c98    0x5c    lui a0,0xe0000
    0x84005c9c    0x60    srli a0,a0,0x19
    0x84005c9e    0x62    andi a5,a5,1
    0x84005ca0    0x64    and a0,a0,a4
    0x84005ca2    0x66    beqz a5,ffffffff84005caa <setPriority+0x6e>
    0x84005ca4    0x68    li a5,-1
    0x84005ca6    0x6a    slli a5,a5,0x27
    0x84005ca8    0x6c    or a0,a0,a5
    0x84005caa    0x6e    mv a1,s0
    0x84005cac    0x70    ld s0,16(sp)          ; stack access
    0x84005cae    0x72    ld ra,24(sp)          ; stack access
    0x84005cb0    0x74    addi sp,sp,32
    0x84005cb2    0x76    j ffffffff84005b86 <reorderNTFN>
    0x84005cb4    0x78    ld ra,24(sp)          ; stack access
    0x84005cb6    0x7a    sd a1,360(s0)
    0x84005cba    0x7e    ld s0,16(sp)          ; stack access
    0x84005cbc    0x80    addi sp,sp,32
    0x84005cbe    0x82    ret
    0x84005cc0    0x84    srli a5,a4,0x26
    0x84005cc4    0x88    sd a1,360(a0) # ffffffffe0000168 <ki_end+0x5bfd9168>
    0x84005cc8    0x8c    lui a0,0xe0000
    0x84005ccc    0x90    srli a0,a0,0x19
    0x84005cce    0x92    andi a5,a5,1
    0x84005cd0    0x94    and a0,a0,a4
    0x84005cd2    0x96    beqz a5,ffffffff84005cda <setPriority+0x9e>
    0x84005cd4    0x98    li a5,-1
    0x84005cd6    0x9a    slli a5,a5,0x27
    0x84005cd8    0x9c    or a0,a0,a5
    0x84005cda    0x9e    mv a1,s0
    0x84005cdc    0xa0    ld s0,16(sp)          ; stack access
    0x84005cde    0xa2    ld ra,24(sp)          ; stack access
    0x84005ce0    0xa4    addi sp,sp,32
    0x84005ce2    0xa6    j ffffffff840055a8 <reorderEP>
    0x84005ce4    0xa8    sd a1,8(sp)           ; stack access
    0x84005ce6    0xaa    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84005cea    0xae    ld a5,288(s0)
    0x84005cee    0xb2    ld a1,8(sp)           ; stack access
    0x84005cf0    0xb4    srli a5,a5,0x1
    0x84005cf2    0xb6    sd a1,360(s0)
    0x84005cf6    0xba    andi a5,a5,1
    0x84005cf8    0xbc    bnez a5,ffffffff84005c80 <setPriority+0x44>
    0x84005cfa    0xbe    j ffffffff84005c7a <setPriority+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 118 nodes.

Section handleUserLevelFault (275 of 296)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 83 instructions.

Skipping c01028f3 rdtime a7


Stack analysis
---------------

3 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x8400cabe     0x0    addi sp,sp,-16
    0x8400cac0     0x2    auipc a6,0x15
    0x8400cac4     0x6    addi a6,a6,-656 # ffffffff84021830 <ksCurTime>
    0x8400cac8     0xa    ld t3,0(a6)
    0x8400cacc     0xe    sd ra,8(sp)           ; stack access
    0x8400cace    0x10    rdtime a7
    0x8400cad2    0x14    auipc a3,0x15
    0x8400cad6    0x18    ld a3,-682(a3) # ffffffff84021828 <ksCurSC>
    0x8400cada    0x1c    ld t1,72(a3)
    0x8400cade    0x20    auipc a2,0x15
    0x8400cae2    0x24    addi a2,a2,-670 # ffffffff84021840 <ksConsumed>
    0x8400cae6    0x28    ld a5,0(a2)
    0x8400cae8    0x2a    slli a4,t1,0x4
    0x8400caec    0x2e    add a4,a4,a3
    0x8400caee    0x30    sub a5,a5,t3
    0x8400caf2    0x34    ld a4,96(a4)
    0x8400caf4    0x36    add a5,a5,a7
    0x8400caf6    0x38    sd a7,0(a6)
    0x8400cafa    0x3c    sd a5,0(a2)
    0x8400cafc    0x3e    bltu a4,a5,ffffffff8400cb6a <handleUserLevelFault+0xac>
    0x8400cb00    0x42    sub a4,a4,a5
    0x8400cb02    0x44    li a2,19
    0x8400cb04    0x46    bgeu a2,a4,ffffffff8400cb6a <handleUserLevelFault+0xac>
    0x8400cb08    0x4a    ld a4,0(a3)
    0x8400cb0a    0x4c    bnez a4,ffffffff8400cb56 <handleUserLevelFault+0x98>
    0x8400cb0c    0x4e    addi a5,a5,20
    0x8400cb0e    0x50    auipc a4,0x15
    0x8400cb12    0x54    ld a4,-766(a4) # ffffffff84021810 <ksDomainTime>
    0x8400cb16    0x58    bltu a4,a5,ffffffff8400cbac <handleUserLevelFault+0xee>
    0x8400cb1a    0x5c    li a5,-1
    0x8400cb1c    0x5e    srli a5,a5,0x20
    0x8400cb1e    0x60    slli a1,a1,0x4
    0x8400cb20    0x62    and a1,a1,a5
    0x8400cb22    0x64    slli a0,a0,0x20
    0x8400cb24    0x66    or a1,a1,a0
    0x8400cb26    0x68    ori a1,a1,3
    0x8400cb2a    0x6c    auipc a0,0x15
    0x8400cb2e    0x70    ld a0,-722(a0) # ffffffff84021858 <ksCurThread>
    0x8400cb32    0x74    auipc a5,0x3
    0x8400cb36    0x78    sd a1,-690(a5) # ffffffff8400f880 <current_fault>
    0x8400cb3a    0x7c    auipc a5,0x3
    0x8400cb3e    0x80    sd zero,-690(a5) # ffffffff8400f888 <current_fault+0x8>
    0x8400cb42    0x84    jal ra,ffffffff84009b2e <handleFault>
    0x8400cb46    0x88    jal ra,ffffffff8400c616 <schedule>
    0x8400cb4a    0x8c    jal ra,ffffffff8400756e <activateThread>
    0x8400cb4e    0x90    ld ra,8(sp)           ; stack access
    0x8400cb50    0x92    li a0,0
    0x8400cb52    0x94    addi sp,sp,16
    0x8400cb54    0x96    ret
    0x8400cb56    0x98    ld a4,80(a3)
    0x8400cb58    0x9a    ld a3,64(a3)
    0x8400cb5a    0x9c    bgeu a4,t1,ffffffff8400cb60 <handleUserLevelFault+0xa2>
    0x8400cb5e    0xa0    add a4,a4,a3
    0x8400cb60    0xa2    addi a4,a4,1
    0x8400cb62    0xa4    sub t1,a4,t1
    0x8400cb66    0xa8    bne a3,t1,ffffffff8400cb0c <handleUserLevelFault+0x4e>
    0x8400cb6a    0xac    li a3,1
    0x8400cb6c    0xae    li a2,0
    0x8400cb6e    0xb0    li a1,1
    0x8400cb70    0xb2    mv a0,a5
    0x8400cb72    0xb4    jal ra,ffffffff840090cc <chargeBudget>
    0x8400cb76    0xb8    auipc a0,0x15
    0x8400cb7a    0xbc    ld a0,-798(a0) # ffffffff84021858 <ksCurThread>
    0x8400cb7e    0xc0    ld a5,280(a0)
    0x8400cb82    0xc4    li a3,1
    0x8400cb84    0xc6    andi a4,a5,15
    0x8400cb88    0xca    addi a4,a4,-1
    0x8400cb8a    0xcc    bltu a3,a4,ffffffff8400cb46 <handleUserLevelFault+0x88>
    0x8400cb8e    0xd0    andi a5,a5,-16
    0x8400cb90    0xd2    ori a5,a5,2
    0x8400cb94    0xd6    sd a5,280(a0)
    0x8400cb98    0xda    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400cb9c    0xde    jal ra,ffffffff8400c616 <schedule>
    0x8400cba0    0xe2    jal ra,ffffffff8400756e <activateThread>
    0x8400cba4    0xe6    ld ra,8(sp)           ; stack access
    0x8400cba6    0xe8    li a0,0
    0x8400cba8    0xea    addi sp,sp,16
    0x8400cbaa    0xec    ret
    0x8400cbac    0xee    li a5,1
    0x8400cbae    0xf0    auipc a4,0x15
    0x8400cbb2    0xf4    sd a5,-886(a4) # ffffffff84021838 <ksReprogram>
    0x8400cbb6    0xf8    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400cbba    0xfc    j ffffffff8400cb76 <handleUserLevelFault+0xb8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 129 nodes.

Section handleUnknownSyscall (276 of 296)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 78 instructions.

Skipping c01028f3 rdtime a7


Stack analysis
---------------

3 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x8400c9cc     0x0    addi sp,sp,-16
    0x8400c9ce     0x2    auipc a6,0x15
    0x8400c9d2     0x6    addi a6,a6,-414 # ffffffff84021830 <ksCurTime>
    0x8400c9d6     0xa    ld t3,0(a6)
    0x8400c9da     0xe    sd ra,8(sp)           ; stack access
    0x8400c9dc    0x10    rdtime a7
    0x8400c9e0    0x14    auipc a3,0x15
    0x8400c9e4    0x18    ld a3,-440(a3) # ffffffff84021828 <ksCurSC>
    0x8400c9e8    0x1c    ld t1,72(a3)
    0x8400c9ec    0x20    auipc a1,0x15
    0x8400c9f0    0x24    addi a1,a1,-428 # ffffffff84021840 <ksConsumed>
    0x8400c9f4    0x28    ld a5,0(a1)
    0x8400c9f6    0x2a    slli a4,t1,0x4
    0x8400c9fa    0x2e    add a4,a4,a3
    0x8400c9fc    0x30    sub a5,a5,t3
    0x8400ca00    0x34    ld a4,96(a4)
    0x8400ca02    0x36    add a5,a5,a7
    0x8400ca04    0x38    sd a7,0(a6)
    0x8400ca08    0x3c    sd a5,0(a1)
    0x8400ca0a    0x3e    bltu a4,a5,ffffffff8400ca6c <handleUnknownSyscall+0xa0>
    0x8400ca0e    0x42    sub a4,a4,a5
    0x8400ca10    0x44    li a1,19
    0x8400ca12    0x46    bgeu a1,a4,ffffffff8400ca6c <handleUnknownSyscall+0xa0>
    0x8400ca16    0x4a    ld a4,0(a3)
    0x8400ca18    0x4c    mv a2,a0
    0x8400ca1a    0x4e    bnez a4,ffffffff8400ca58 <handleUnknownSyscall+0x8c>
    0x8400ca1c    0x50    addi a5,a5,20
    0x8400ca1e    0x52    auipc a4,0x15
    0x8400ca22    0x56    ld a4,-526(a4) # ffffffff84021810 <ksDomainTime>
    0x8400ca26    0x5a    bltu a4,a5,ffffffff8400caae <handleUnknownSyscall+0xe2>
    0x8400ca2a    0x5e    auipc a5,0x3
    0x8400ca2e    0x62    addi a5,a5,1494 # ffffffff84010000 <intStateIRQNode>
    0x8400ca32    0x66    li a4,2
    0x8400ca34    0x68    auipc a0,0x15
    0x8400ca38    0x6c    ld a0,-476(a0) # ffffffff84021858 <ksCurThread>
    0x8400ca3c    0x70    sd a4,-1920(a5)
    0x8400ca40    0x74    sd a2,-1912(a5)
    0x8400ca44    0x78    jal ra,ffffffff84009b2e <handleFault>
    0x8400ca48    0x7c    jal ra,ffffffff8400c616 <schedule>
    0x8400ca4c    0x80    jal ra,ffffffff8400756e <activateThread>
    0x8400ca50    0x84    ld ra,8(sp)           ; stack access
    0x8400ca52    0x86    li a0,0
    0x8400ca54    0x88    addi sp,sp,16
    0x8400ca56    0x8a    ret
    0x8400ca58    0x8c    ld a4,80(a3)
    0x8400ca5a    0x8e    ld a3,64(a3)
    0x8400ca5c    0x90    bgeu a4,t1,ffffffff8400ca62 <handleUnknownSyscall+0x96>
    0x8400ca60    0x94    add a4,a4,a3
    0x8400ca62    0x96    addi a4,a4,1
    0x8400ca64    0x98    sub t1,a4,t1
    0x8400ca68    0x9c    bne a3,t1,ffffffff8400ca1c <handleUnknownSyscall+0x50>
    0x8400ca6c    0xa0    li a3,1
    0x8400ca6e    0xa2    li a2,0
    0x8400ca70    0xa4    li a1,1
    0x8400ca72    0xa6    mv a0,a5
    0x8400ca74    0xa8    jal ra,ffffffff840090cc <chargeBudget>
    0x8400ca78    0xac    auipc a0,0x15
    0x8400ca7c    0xb0    ld a0,-544(a0) # ffffffff84021858 <ksCurThread>
    0x8400ca80    0xb4    ld a5,280(a0)
    0x8400ca84    0xb8    li a3,1
    0x8400ca86    0xba    andi a4,a5,15
    0x8400ca8a    0xbe    addi a4,a4,-1
    0x8400ca8c    0xc0    bltu a3,a4,ffffffff8400ca48 <handleUnknownSyscall+0x7c>
    0x8400ca90    0xc4    andi a5,a5,-16
    0x8400ca92    0xc6    ori a5,a5,2
    0x8400ca96    0xca    sd a5,280(a0)
    0x8400ca9a    0xce    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400ca9e    0xd2    jal ra,ffffffff8400c616 <schedule>
    0x8400caa2    0xd6    jal ra,ffffffff8400756e <activateThread>
    0x8400caa6    0xda    ld ra,8(sp)           ; stack access
    0x8400caa8    0xdc    li a0,0
    0x8400caaa    0xde    addi sp,sp,16
    0x8400caac    0xe0    ret
    0x8400caae    0xe2    li a5,1
    0x8400cab0    0xe4    auipc a4,0x15
    0x8400cab4    0xe8    sd a5,-632(a4) # ffffffff84021838 <ksReprogram>
    0x8400cab8    0xec    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400cabc    0xf0    j ffffffff8400ca78 <handleUnknownSyscall+0xac>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 124 nodes.

Section decodeSetSpace (277 of 296)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 194 instructions.

RVC_FFFFFFFT______FF.

Stack analysis
---------------

66 stack accesses found. Annotated code for `decodeSetSpace`:

    0x8400ad1e      0x0    addi sp,sp,-336
    0x8400ad20      0x2    sd ra,328(sp)         ; stack access
    0x8400ad22      0x4    sd s0,320(sp)         ; stack access
    0x8400ad24      0x6    sd s1,312(sp)         ; stack access
    0x8400ad26      0x8    sd s2,304(sp)         ; stack access
    0x8400ad28      0xa    sd s3,296(sp)         ; stack access
    0x8400ad2a      0xc    sd s4,288(sp)         ; stack access
    0x8400ad2c      0xe    sd s5,280(sp)         ; stack access
    0x8400ad2e     0x10    sd s6,272(sp)         ; stack access
    0x8400ad30     0x12    sd s7,264(sp)         ; stack access
    0x8400ad32     0x14    sd s8,256(sp)         ; stack access
    0x8400ad34     0x16    sd s9,248(sp)         ; stack access
    0x8400ad36     0x18    sd s10,240(sp)        ; stack access
    0x8400ad38     0x1a    sd s11,232(sp)        ; stack access
    0x8400ad3a     0x1c    sd a0,112(sp)         ; stack access
    0x8400ad3c     0x1e    sd a1,120(sp)         ; stack access
    0x8400ad3e     0x20    li a5,1
    0x8400ad40     0x22    bgeu a5,a2,ffffffff8400ae8c <decodeSetSpace+0x16e>
    0x8400ad44     0x26    mv s3,a3
    0x8400ad46     0x28    auipc a3,0x5
    0x8400ad4a     0x2c    addi a3,a3,698 # ffffffff84010000 <intStateIRQNode>
    0x8400ad4e     0x30    ld s11,-1536(a3)
    0x8400ad52     0x34    beqz s11,ffffffff8400ae8c <decodeSetSpace+0x16e>
    0x8400ad56     0x38    ld s9,-1528(a3)
    0x8400ad5a     0x3c    beqz s9,ffffffff8400ae8c <decodeSetSpace+0x16e>
    0x8400ad5e     0x40    ld s10,-1520(a3)
    0x8400ad62     0x44    beqz s10,ffffffff8400ae8c <decodeSetSpace+0x16e>
    0x8400ad66     0x48    auipc s5,0x17
    0x8400ad6a     0x4c    addi s5,s5,-1294 # ffffffff84021858 <ksCurThread>
    0x8400ad6e     0x50    ld a3,0(s5)
    0x8400ad72     0x54    ld s6,0(s9)
    0x8400ad76     0x58    ld s4,0(s11)
    0x8400ad7a     0x5c    ld t1,8(s11)
    0x8400ad7e     0x60    ld a7,8(s9)
    0x8400ad82     0x64    ld a6,0(s10)
    0x8400ad86     0x68    ld a1,8(s10)
    0x8400ad8a     0x6c    ld s7,88(a3)
    0x8400ad8e     0x70    ld a3,96(a3)
    0x8400ad90     0x72    li a4,-1
    0x8400ad92     0x74    slli a5,a5,0x26
    0x8400ad94     0x76    srli s0,a4,0x19
    0x8400ad98     0x7a    sd s4,168(sp)         ; stack access
    0x8400ad9a     0x7c    sd t1,176(sp)         ; stack access
    0x8400ad9c     0x7e    sd s6,136(sp)         ; stack access
    0x8400ad9e     0x80    sd a7,144(sp)         ; stack access
    0x8400ada0     0x82    sd a6,152(sp)         ; stack access
    0x8400ada2     0x84    sd a1,160(sp)         ; stack access
    0x8400ada4     0x86    and a5,a5,a0
    0x8400ada6     0x88    sd a3,104(sp)         ; stack access
    0x8400ada8     0x8a    mv s8,s6
    0x8400adaa     0x8c    and s0,s0,a0
    0x8400adac     0x8e    beqz a5,ffffffff8400adb2 <decodeSetSpace+0x94>
    0x8400adae     0x90    slli a4,a4,0x27
    0x8400adb0     0x92    or s0,s0,a4
    0x8400adb2     0x94    andi s2,s0,-1024
    0x8400adb6     0x98    ld s1,0(s2)
    0x8400adba     0x9c    srli s1,s1,0x3b
    0x8400adbc     0x9e    beqz s1,ffffffff8400adda <decodeSetSpace+0xbc>
    0x8400adbe     0xa0    mv a0,s2
    0x8400adc0     0xa2    jal ra,ffffffff8400621a <isFinalCapability>
    0x8400adc4     0xa6    beqz a0,ffffffff8400adda <decodeSetSpace+0xbc>
    0x8400adc6     0xa8    addi s1,s1,-10
    0x8400adc8     0xaa    li a5,8
    0x8400adca     0xac    bltu a5,s1,ffffffff8400adda <decodeSetSpace+0xbc>
    0x8400adce     0xb0    li a5,1
    0x8400add0     0xb2    sll s1,a5,s1
    0x8400add4     0xb6    andi s1,s1,261
    0x8400add8     0xba    bnez s1,ffffffff8400ae60 <decodeSetSpace+0x142>
    0x8400adda     0xbc    ld s1,32(s2)
    0x8400adde     0xc0    addi a0,s2,32
    0x8400ade2     0xc4    srli s1,s1,0x3b
    0x8400ade4     0xc6    beqz s1,ffffffff8400ae00 <decodeSetSpace+0xe2>
    0x8400ade6     0xc8    jal ra,ffffffff8400621a <isFinalCapability>
    0x8400adea     0xcc    beqz a0,ffffffff8400ae00 <decodeSetSpace+0xe2>
    0x8400adec     0xce    addi s1,s1,-10
    0x8400adee     0xd0    li a5,8
    0x8400adf0     0xd2    bltu a5,s1,ffffffff8400ae00 <decodeSetSpace+0xe2>
    0x8400adf4     0xd6    li a5,1
    0x8400adf6     0xd8    sll s1,a5,s1
    0x8400adfa     0xdc    andi s1,s1,261
    0x8400adfe     0xe0    bnez s1,ffffffff8400ae60 <decodeSetSpace+0x142>
    0x8400ae00     0xe2    ld s2,0(s10)
    0x8400ae04     0xe6    bnez s7,ffffffff8400ae9a <decodeSetSpace+0x17c>
    0x8400ae08     0xea    ld a3,144(sp)         ; stack access
    0x8400ae0a     0xec    mv a2,s8
    0x8400ae0c     0xee    mv a1,s9
    0x8400ae0e     0xf0    addi a0,sp,200
    0x8400ae10     0xf2    jal ra,ffffffff84006146 <deriveCap>
    0x8400ae14     0xf6    ld s1,200(sp)         ; stack access
    0x8400ae16     0xf8    bnez s1,ffffffff8400ae6c <decodeSetSpace+0x14e>
    0x8400ae18     0xfa    ld s7,208(sp)         ; stack access
    0x8400ae1a     0xfc    ld a4,216(sp)         ; stack access
    0x8400ae1c     0xfe    li a5,10
    0x8400ae1e    0x100    sd s7,136(sp)         ; stack access
    0x8400ae20    0x102    sd a4,144(sp)         ; stack access
    0x8400ae22    0x104    srli a4,s7,0x3b
    0x8400ae26    0x108    bne a4,a5,ffffffff8400ae60 <decodeSetSpace+0x142>
    0x8400ae2a    0x10c    ld a5,104(sp)         ; stack access
    0x8400ae2c    0x10e    beqz a5,ffffffff8400ae3e <decodeSetSpace+0x120>
    0x8400ae2e    0x110    ld a3,160(sp)         ; stack access
    0x8400ae30    0x112    mv a2,s2
    0x8400ae32    0x114    mv a1,a5
    0x8400ae34    0x116    li a0,0
    0x8400ae36    0x118    jal ra,ffffffff84006b76 <updateCapData>
    0x8400ae3a    0x11c    sd a1,160(sp)         ; stack access
    0x8400ae3c    0x11e    mv s2,a0
    0x8400ae3e    0x120    ld a3,160(sp)         ; stack access
    0x8400ae40    0x122    mv a2,s2
    0x8400ae42    0x124    mv a1,s10
    0x8400ae44    0x126    addi a0,sp,200
    0x8400ae46    0x128    jal ra,ffffffff84006146 <deriveCap>
    0x8400ae4a    0x12c    ld s1,200(sp)         ; stack access
    0x8400ae4c    0x12e    bnez s1,ffffffff8400ae6c <decodeSetSpace+0x14e>
    0x8400ae4e    0x130    ld s2,208(sp)         ; stack access
    0x8400ae50    0x132    ld a4,216(sp)         ; stack access
    0x8400ae52    0x134    li a5,3
    0x8400ae54    0x136    sd s2,152(sp)         ; stack access
    0x8400ae56    0x138    sd a4,160(sp)         ; stack access
    0x8400ae58    0x13a    srli s1,s2,0x3b
    0x8400ae5c    0x13e    beq s1,a5,ffffffff8400aeac <decodeSetSpace+0x18e>
    0x8400ae60    0x142    li a5,3
    0x8400ae62    0x144    auipc a4,0x5
    0x8400ae66    0x148    sd a5,-1954(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400ae6a    0x14c    li s1,3
    0x8400ae6c    0x14e    ld ra,328(sp)         ; stack access
    0x8400ae6e    0x150    ld s0,320(sp)         ; stack access
    0x8400ae70    0x152    ld s2,304(sp)         ; stack access
    0x8400ae72    0x154    ld s3,296(sp)         ; stack access
    0x8400ae74    0x156    ld s4,288(sp)         ; stack access
    0x8400ae76    0x158    ld s5,280(sp)         ; stack access
    0x8400ae78    0x15a    ld s6,272(sp)         ; stack access
    0x8400ae7a    0x15c    ld s7,264(sp)         ; stack access
    0x8400ae7c    0x15e    ld s8,256(sp)         ; stack access
    0x8400ae7e    0x160    ld s9,248(sp)         ; stack access
    0x8400ae80    0x162    ld s10,240(sp)        ; stack access
    0x8400ae82    0x164    ld s11,232(sp)        ; stack access
    0x8400ae84    0x166    mv a0,s1
    0x8400ae86    0x168    ld s1,312(sp)         ; stack access
    0x8400ae88    0x16a    addi sp,sp,336
    0x8400ae8a    0x16c    ret
    0x8400ae8c    0x16e    li a5,7
    0x8400ae8e    0x170    auipc a4,0x5
    0x8400ae92    0x174    sd a5,-1998(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400ae96    0x178    li s1,3
    0x8400ae98    0x17a    j ffffffff8400ae6c <decodeSetSpace+0x14e>
    0x8400ae9a    0x17c    ld a3,144(sp)         ; stack access
    0x8400ae9c    0x17e    mv a2,s6
    0x8400ae9e    0x180    mv a1,s7
    0x8400aea0    0x182    li a0,0
    0x8400aea2    0x184    jal ra,ffffffff84006b76 <updateCapData>
    0x8400aea6    0x188    sd a1,144(sp)         ; stack access
    0x8400aea8    0x18a    mv s8,a0
    0x8400aeaa    0x18c    j ffffffff8400ae08 <decodeSetSpace+0xea>
    0x8400aeac    0x18e    srli a5,s2,0x27
    0x8400aeb0    0x192    andi a5,a5,1
    0x8400aeb2    0x194    beqz a5,ffffffff8400ae60 <decodeSetSpace+0x142>
    0x8400aeb4    0x196    mv a0,s4
    0x8400aeb6    0x198    jal ra,ffffffff840032dc <validFaultHandler.isra.0>
    0x8400aeba    0x19c    beqz a0,ffffffff8400af06 <decodeSetSpace+0x1e8>
    0x8400aebc    0x19e    ld a0,0(s5)
    0x8400aec0    0x1a2    ld a5,280(a0)
    0x8400aec4    0x1a6    andi a5,a5,-16
    0x8400aec6    0x1a8    ori a5,a5,2
    0x8400aeca    0x1ac    sd a5,280(a0)
    0x8400aece    0x1b0    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400aed2    0x1b4    li a5,6
    0x8400aed4    0x1b6    sd a5,80(sp)          ; stack access
    0x8400aed6    0x1b8    ld a5,160(sp)         ; stack access
    0x8400aed8    0x1ba    ld a3,176(sp)         ; stack access
    0x8400aeda    0x1bc    sd zero,72(sp)        ; stack access
    0x8400aedc    0x1be    sd a5,32(sp)          ; stack access
    0x8400aede    0x1c0    ld a5,144(sp)         ; stack access
    0x8400aee0    0x1c2    sd zero,56(sp)        ; stack access
    0x8400aee2    0x1c4    sd zero,64(sp)        ; stack access
    0x8400aee4    0x1c6    sd a5,8(sp)           ; stack access
    0x8400aee6    0x1c8    sd zero,48(sp)        ; stack access
    0x8400aee8    0x1ca    sd s10,40(sp)         ; stack access
    0x8400aeea    0x1cc    sd s2,24(sp)          ; stack access
    0x8400aeec    0x1ce    sd s9,16(sp)          ; stack access
    0x8400aeee    0x1d0    sd s7,0(sp)           ; stack access
    0x8400aef0    0x1d2    li a7,0
    0x8400aef2    0x1d4    li a5,0
    0x8400aef4    0x1d6    li a6,0
    0x8400aef6    0x1d8    mv a4,s11
    0x8400aef8    0x1da    mv a2,s4
    0x8400aefa    0x1dc    mv a1,s3
    0x8400aefc    0x1de    mv a0,s0
    0x8400aefe    0x1e0    jal ra,ffffffff8400a8a2 <invokeTCB_ThreadControlCaps>
    0x8400af02    0x1e4    mv s1,a0
    0x8400af04    0x1e6    j ffffffff8400ae6c <decodeSetSpace+0x14e>
    0x8400af06    0x1e8    li a5,1
    0x8400af08    0x1ea    auipc a4,0x4
    0x8400af0c    0x1ee    sd a5,1936(a4) # ffffffff8400f698 <current_syscall_error+0x8>
    0x8400af10    0x1f2    j ffffffff8400ae6c <decodeSetSpace+0x14e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
194 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 333 nodes.

Section decodeSetTimeoutEndpoint (278 of 296)
=============================================

Deriving specifications
-----------------------

Section `decodeSetTimeoutEndpoint` consists of 102 instructions.


Stack analysis
---------------

40 stack accesses found. Annotated code for `decodeSetTimeoutEndpoint`:

    0x8400a32a     0x0    addi sp,sp,-128
    0x8400a32c     0x2    sd s1,104(sp)         ; stack access
    0x8400a32e     0x4    sd ra,120(sp)         ; stack access
    0x8400a330     0x6    sd s0,112(sp)         ; stack access
    0x8400a332     0x8    sd s2,96(sp)          ; stack access
    0x8400a334     0xa    sd s3,88(sp)          ; stack access
    0x8400a336     0xc    sd s4,80(sp)          ; stack access
    0x8400a338     0xe    sd a0,0(sp)           ; stack access
    0x8400a33a    0x10    sd a1,8(sp)           ; stack access
    0x8400a33c    0x12    auipc s1,0x5
    0x8400a340    0x16    ld s1,1732(s1) # ffffffff8400fa00 <current_extra_caps>
    0x8400a344    0x1a    beqz s1,ffffffff8400a416 <decodeSetTimeoutEndpoint+0xec>
    0x8400a346    0x1c    ld s3,0(s1)
    0x8400a34a    0x20    ld s4,8(s1)
    0x8400a34e    0x24    mv s2,a2
    0x8400a350    0x26    mv a0,s3
    0x8400a352    0x28    jal ra,ffffffff840032dc <validFaultHandler.isra.0>
    0x8400a356    0x2c    beqz a0,ffffffff8400a3f6 <decodeSetTimeoutEndpoint+0xcc>
    0x8400a358    0x2e    auipc a0,0x17
    0x8400a35c    0x32    ld a0,1280(a0) # ffffffff84021858 <ksCurThread>
    0x8400a360    0x36    ld a5,280(a0)
    0x8400a364    0x3a    andi a5,a5,-16
    0x8400a366    0x3c    ori a5,a5,2
    0x8400a36a    0x40    sd a5,280(a0)
    0x8400a36e    0x44    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400a372    0x48    ld a4,0(sp)           ; stack access
    0x8400a374    0x4a    li a5,-1
    0x8400a376    0x4c    srli a2,a5,0x19
    0x8400a37a    0x50    srli a3,a4,0x26
    0x8400a37e    0x54    andi a3,a3,1
    0x8400a380    0x56    and a4,a4,a2
    0x8400a382    0x58    beqz a3,ffffffff8400a412 <decodeSetTimeoutEndpoint+0xe8>
    0x8400a384    0x5a    slli s0,a5,0x27
    0x8400a388    0x5e    or s0,s0,a4
    0x8400a38a    0x60    andi s0,s0,-1024
    0x8400a38e    0x64    li a5,3
    0x8400a390    0x66    slli a5,a5,0x3d
    0x8400a392    0x68    addi s0,s0,128
    0x8400a396    0x6c    or a4,a4,a5
    0x8400a398    0x6e    addi a0,sp,48
    0x8400a39a    0x70    li a2,1
    0x8400a39c    0x72    mv a1,s0
    0x8400a39e    0x74    sd a4,16(sp)          ; stack access
    0x8400a3a0    0x76    sd zero,24(sp)        ; stack access
    0x8400a3a2    0x78    sd s3,32(sp)          ; stack access
    0x8400a3a4    0x7a    sd s4,40(sp)          ; stack access
    0x8400a3a6    0x7c    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400a3aa    0x80    ld a0,48(sp)          ; stack access
    0x8400a3ac    0x82    bnez a0,ffffffff8400a3e6 <decodeSetTimeoutEndpoint+0xbc>
    0x8400a3ae    0x84    ld a1,64(sp)          ; stack access
    0x8400a3b0    0x86    ld a2,72(sp)          ; stack access
    0x8400a3b2    0x88    mv a0,s0
    0x8400a3b4    0x8a    jal ra,ffffffff8400340c <emptySlot>
    0x8400a3b8    0x8e    ld a2,0(s1)
    0x8400a3ba    0x90    ld a3,8(s1)
    0x8400a3bc    0x92    ld a0,32(sp)          ; stack access
    0x8400a3be    0x94    ld a1,40(sp)          ; stack access
    0x8400a3c0    0x96    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a3c4    0x9a    beqz a0,ffffffff8400a3e6 <decodeSetTimeoutEndpoint+0xbc>
    0x8400a3c6    0x9c    ld a2,0(s2)
    0x8400a3ca    0xa0    ld a3,8(s2)
    0x8400a3ce    0xa4    ld a0,16(sp)          ; stack access
    0x8400a3d0    0xa6    ld a1,24(sp)          ; stack access
    0x8400a3d2    0xa8    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a3d6    0xac    beqz a0,ffffffff8400a3e6 <decodeSetTimeoutEndpoint+0xbc>
    0x8400a3d8    0xae    ld a0,32(sp)          ; stack access
    0x8400a3da    0xb0    ld a1,40(sp)          ; stack access
    0x8400a3dc    0xb2    mv a3,s0
    0x8400a3de    0xb4    mv a2,s1
    0x8400a3e0    0xb6    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400a3e4    0xba    li a0,0
    0x8400a3e6    0xbc    ld ra,120(sp)         ; stack access
    0x8400a3e8    0xbe    ld s0,112(sp)         ; stack access
    0x8400a3ea    0xc0    ld s1,104(sp)         ; stack access
    0x8400a3ec    0xc2    ld s2,96(sp)          ; stack access
    0x8400a3ee    0xc4    ld s3,88(sp)          ; stack access
    0x8400a3f0    0xc6    ld s4,80(sp)          ; stack access
    0x8400a3f2    0xc8    addi sp,sp,128
    0x8400a3f4    0xca    ret
    0x8400a3f6    0xcc    ld ra,120(sp)         ; stack access
    0x8400a3f8    0xce    ld s0,112(sp)         ; stack access
    0x8400a3fa    0xd0    li a5,1
    0x8400a3fc    0xd2    auipc a4,0x5
    0x8400a400    0xd6    sd a5,668(a4) # ffffffff8400f698 <current_syscall_error+0x8>
    0x8400a404    0xda    ld s1,104(sp)         ; stack access
    0x8400a406    0xdc    ld s2,96(sp)          ; stack access
    0x8400a408    0xde    ld s3,88(sp)          ; stack access
    0x8400a40a    0xe0    ld s4,80(sp)          ; stack access
    0x8400a40c    0xe2    li a0,3
    0x8400a40e    0xe4    addi sp,sp,128
    0x8400a410    0xe6    ret
    0x8400a412    0xe8    mv s0,a4
    0x8400a414    0xea    j ffffffff8400a38a <decodeSetTimeoutEndpoint+0x60>
    0x8400a416    0xec    ld ra,120(sp)         ; stack access
    0x8400a418    0xee    ld s0,112(sp)         ; stack access
    0x8400a41a    0xf0    ld s1,104(sp)         ; stack access
    0x8400a41c    0xf2    ld s2,96(sp)          ; stack access
    0x8400a41e    0xf4    ld s3,88(sp)          ; stack access
    0x8400a420    0xf6    ld s4,80(sp)          ; stack access
    0x8400a422    0xf8    li a0,3
    0x8400a424    0xfa    addi sp,sp,128
    0x8400a426    0xfc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
102 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetTimeoutEndpoint` has 175 nodes.

Section sendSignal (279 of 296)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 187 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `sendSignal`:

    0x8400830a      0x0    ld a4,0(a0)
    0x8400830c      0x2    addi sp,sp,-32
    0x8400830e      0x4    sd s0,16(sp)          ; stack access
    0x84008310      0x6    sd s2,0(sp)           ; stack access
    0x84008312      0x8    sd ra,24(sp)          ; stack access
    0x84008314      0xa    sd s1,8(sp)           ; stack access
    0x84008316      0xc    li a3,1
    0x84008318      0xe    andi a5,a4,3
    0x8400831c     0x12    mv s0,a0
    0x8400831e     0x14    mv s2,a1
    0x84008320     0x16    beq a5,a3,ffffffff84008338 <sendSignal+0x2e>
    0x84008324     0x1a    li a2,2
    0x84008326     0x1c    beq a5,a2,ffffffff84008412 <sendSignal+0x108>
    0x8400832a     0x20    beqz a5,ffffffff840083da <sendSignal+0xd0>
    0x8400832c     0x22    ld ra,24(sp)          ; stack access
    0x8400832e     0x24    ld s0,16(sp)          ; stack access
    0x84008330     0x26    ld s1,8(sp)           ; stack access
    0x84008332     0x28    ld s2,0(sp)           ; stack access
    0x84008334     0x2a    addi sp,sp,32
    0x84008336     0x2c    ret
    0x84008338     0x2e    ld a3,8(a0)
    0x8400833a     0x30    li a2,-1
    0x8400833c     0x32    slli a5,a5,0x26
    0x8400833e     0x34    srli s1,a2,0x19
    0x84008342     0x38    and a5,a5,a3
    0x84008344     0x3a    and s1,s1,a3
    0x84008346     0x3c    beqz a5,ffffffff8400834c <sendSignal+0x42>
    0x84008348     0x3e    slli a2,a2,0x27
    0x8400834a     0x40    or s1,s1,a2
    0x8400834c     0x42    srli a2,a4,0x19
    0x84008350     0x46    bgez a4,ffffffff8400835a <sendSignal+0x50>
    0x84008354     0x4a    li a5,-1
    0x84008356     0x4c    slli a5,a5,0x27
    0x84008358     0x4e    or a2,a2,a5
    0x8400835a     0x50    ld a1,416(s1)
    0x8400835e     0x54    lui a7,0x2000
    0x84008362     0x58    li a5,-1
    0x84008364     0x5a    addi a0,a7,-1 # 1ffffff <KERNEL_OFFSET-0xfffffffefe000001>
    0x84008368     0x5e    slli t1,a5,0x27
    0x8400836c     0x62    ld a6,408(s1)
    0x84008370     0x66    and a0,a0,a4
    0x84008372     0x68    and a3,a3,t1
    0x84008376     0x6c    beqz a1,ffffffff84008426 <sendSignal+0x11c>
    0x84008378     0x6e    srli a5,a5,0x19
    0x8400837a     0x70    and a5,a5,s1
    0x8400837c     0x72    sd a6,408(a1)
    0x84008380     0x76    or a3,a3,a5
    0x84008382     0x78    beqz a6,ffffffff8400849e <sendSignal+0x194>
    0x84008386     0x7c    slli a2,a2,0x19
    0x84008388     0x7e    sd a1,416(a6) # 20001a0 <KERNEL_OFFSET-0xfffffffefdfffe60>
    0x8400838c     0x82    or a2,a2,a0
    0x8400838e     0x84    sd a3,8(s0)
    0x84008390     0x86    sd a2,0(s0)
    0x84008392     0x88    ld a5,280(s1)
    0x84008396     0x8c    mv a0,s1
    0x84008398     0x8e    andi a5,a5,-16
    0x8400839a     0x90    ori a5,a5,1
    0x8400839e     0x94    sd a5,280(s1)
    0x840083a2     0x98    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840083a6     0x9c    ld a4,368(s1)
    0x840083aa     0xa0    sd s2,72(s1)
    0x840083ae     0xa4    beqz a4,ffffffff84008446 <sendSignal+0x13c>
    0x840083b0     0xa6    ld a5,280(s1)
    0x840083b4     0xaa    li a3,1
    0x840083b6     0xac    andi a5,a5,15
    0x840083b8     0xae    addi a5,a5,-1
    0x840083ba     0xb0    bltu a3,a5,ffffffff8400832c <sendSignal+0x22>
    0x840083be     0xb4    ld a5,64(a4)
    0x840083c0     0xb6    beqz a5,ffffffff8400832c <sendSignal+0x22>
    0x840083c2     0xb8    ld a5,288(s1)
    0x840083c6     0xbc    andi a5,a5,1
    0x840083c8     0xbe    bnez a5,ffffffff8400832c <sendSignal+0x22>
    0x840083ca     0xc0    ld s0,16(sp)          ; stack access
    0x840083cc     0xc2    ld ra,24(sp)          ; stack access
    0x840083ce     0xc4    ld s2,0(sp)           ; stack access
    0x840083d0     0xc6    mv a0,s1
    0x840083d2     0xc8    ld s1,8(sp)           ; stack access
    0x840083d4     0xca    addi sp,sp,32
    0x840083d6     0xcc    j ffffffff84004ca6 <possibleSwitchTo>
    0x840083da     0xd0    ld a1,24(a0)
    0x840083dc     0xd2    li s1,-1
    0x840083de     0xd4    slli a3,a3,0x26
    0x840083e0     0xd6    srli a5,s1,0x19
    0x840083e4     0xda    and a3,a3,a1
    0x840083e6     0xdc    and a1,a1,a5
    0x840083e8     0xde    beqz a3,ffffffff84008434 <sendSignal+0x12a>
    0x840083ea     0xe0    slli s1,s1,0x27
    0x840083ec     0xe2    or s1,s1,a1
    0x840083ee     0xe4    ld a5,280(s1)
    0x840083f2     0xe8    li a3,3
    0x840083f4     0xea    andi a5,a5,15
    0x840083f6     0xec    beq a5,a3,ffffffff840084aa <sendSignal+0x1a0>
    0x840083fa     0xf0    andi a4,a4,-4
    0x840083fc     0xf2    ori a4,a4,2
    0x84008400     0xf6    sd s2,16(s0)
    0x84008404     0xfa    ld ra,24(sp)          ; stack access
    0x84008406     0xfc    sd a4,0(s0)
    0x84008408     0xfe    ld s0,16(sp)          ; stack access
    0x8400840a    0x100    ld s1,8(sp)           ; stack access
    0x8400840c    0x102    ld s2,0(sp)           ; stack access
    0x8400840e    0x104    addi sp,sp,32
    0x84008410    0x106    ret
    0x84008412    0x108    ld a1,16(a0)
    0x84008414    0x10a    ld ra,24(sp)          ; stack access
    0x84008416    0x10c    ld s0,16(sp)          ; stack access
    0x84008418    0x10e    or a1,a1,s2
    0x8400841c    0x112    sd a1,16(a0)
    0x8400841e    0x114    ld s1,8(sp)           ; stack access
    0x84008420    0x116    ld s2,0(sp)           ; stack access
    0x84008422    0x118    addi sp,sp,32
    0x84008424    0x11a    ret
    0x84008426    0x11c    beqz a6,ffffffff8400843a <sendSignal+0x130>
    0x8400842a    0x120    srli a5,a5,0x19
    0x8400842c    0x122    and a5,a6,a5
    0x84008430    0x126    or a3,a3,a5
    0x84008432    0x128    j ffffffff84008386 <sendSignal+0x7c>
    0x84008434    0x12a    beqz a1,ffffffff840083fa <sendSignal+0xf0>
    0x84008436    0x12c    mv s1,a1
    0x84008438    0x12e    j ffffffff840083ee <sendSignal+0xe4>
    0x8400843a    0x130    addi a7,a7,-4
    0x8400843c    0x132    and a4,a4,a7
    0x84008440    0x136    sd a3,8(s0)
    0x84008442    0x138    sd a4,0(s0)
    0x84008444    0x13a    j ffffffff84008392 <sendSignal+0x88>
    0x84008446    0x13c    ld a0,32(s0)
    0x84008448    0x13e    li s0,-1
    0x8400844a    0x140    srli a4,s0,0x19
    0x8400844e    0x144    srli a5,a0,0x26
    0x84008452    0x148    andi a5,a5,1
    0x84008454    0x14a    and a0,a0,a4
    0x84008456    0x14c    beqz a5,ffffffff840084ea <sendSignal+0x1e0>
    0x84008458    0x14e    slli s0,s0,0x27
    0x8400845a    0x150    or s0,s0,a0
    0x8400845c    0x152    ld a5,24(s0)
    0x8400845e    0x154    bnez a5,ffffffff8400832c <sendSignal+0x22>
    0x84008462    0x158    mv a1,s1
    0x84008464    0x15a    mv a0,s0
    0x84008466    0x15c    jal ra,ffffffff840072a0 <schedContext_donate>
    0x8400846a    0x160    auipc a5,0x19
    0x8400846e    0x164    ld a5,958(a5) # ffffffff84021828 <ksCurSC>
    0x84008472    0x168    beq a5,s0,ffffffff84008480 <sendSignal+0x176>
    0x84008476    0x16c    ld a5,0(s0)
    0x84008478    0x16e    beqz a5,ffffffff84008480 <sendSignal+0x176>
    0x8400847a    0x170    mv a0,s0
    0x8400847c    0x172    jal ra,ffffffff840033a2 <refill_unblock_check.part.0>
    0x84008480    0x176    mv a0,s0
    0x84008482    0x178    jal ra,ffffffff84007cca <schedContext_resume>
    0x84008486    0x17c    ld a5,280(s1)
    0x8400848a    0x180    li a4,1
    0x8400848c    0x182    andi a5,a5,15
    0x8400848e    0x184    addi a5,a5,-1
    0x84008490    0x186    bltu a4,a5,ffffffff8400832c <sendSignal+0x22>
    0x84008494    0x18a    ld a4,368(s1)
    0x84008498    0x18e    beqz a4,ffffffff8400832c <sendSignal+0x22>
    0x8400849c    0x192    j ffffffff840083be <sendSignal+0xb4>
    0x8400849e    0x194    slli a1,a1,0x19
    0x840084a0    0x196    or a2,a1,a0
    0x840084a4    0x19a    sd a3,8(s0)
    0x840084a6    0x19c    sd a2,0(s0)
    0x840084a8    0x19e    j ffffffff84008392 <sendSignal+0x88>
    0x840084aa    0x1a0    mv a0,s1
    0x840084ac    0x1a2    jal ra,ffffffff84006fc0 <cancelIPC>
    0x840084b0    0x1a6    ld a5,280(s1)
    0x840084b4    0x1aa    mv a0,s1
    0x840084b6    0x1ac    andi a5,a5,-16
    0x840084b8    0x1ae    ori a5,a5,1
    0x840084bc    0x1b2    sd a5,280(s1)
    0x840084c0    0x1b6    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840084c4    0x1ba    ld a4,368(s1)
    0x840084c8    0x1be    sd s2,72(s1)
    0x840084cc    0x1c2    bnez a4,ffffffff840083b0 <sendSignal+0xa6>
    0x840084d0    0x1c6    ld a5,32(s0)
    0x840084d2    0x1c8    li a4,-1
    0x840084d4    0x1ca    srli a2,a4,0x19
    0x840084d8    0x1ce    srli a3,a5,0x26
    0x840084dc    0x1d2    andi a3,a3,1
    0x840084de    0x1d4    and a5,a5,a2
    0x840084e0    0x1d6    beqz a3,ffffffff840084f2 <sendSignal+0x1e8>
    0x840084e2    0x1d8    slli a4,a4,0x27
    0x840084e4    0x1da    or s0,a5,a4
    0x840084e8    0x1de    j ffffffff8400845c <sendSignal+0x152>
    0x840084ea    0x1e0    beqz a0,ffffffff8400832c <sendSignal+0x22>
    0x840084ee    0x1e4    mv s0,a0
    0x840084f0    0x1e6    j ffffffff8400845c <sendSignal+0x152>
    0x840084f2    0x1e8    mv s0,a5
    0x840084f4    0x1ea    beqz a5,ffffffff8400832c <sendSignal+0x22>
    0x840084f8    0x1ee    j ffffffff8400845c <sendSignal+0x152>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
187 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 303 nodes.

Section handleVMFaultEvent (280 of 296)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 75 instructions.

Skipping c01028f3 rdtime a7


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x8400cbbc     0x0    addi sp,sp,-16
    0x8400cbbe     0x2    auipc a6,0x15
    0x8400cbc2     0x6    addi a6,a6,-910 # ffffffff84021830 <ksCurTime>
    0x8400cbc6     0xa    ld t3,0(a6)
    0x8400cbca     0xe    sd ra,8(sp)           ; stack access
    0x8400cbcc    0x10    sd s0,0(sp)           ; stack access
    0x8400cbce    0x12    rdtime a7
    0x8400cbd2    0x16    auipc a3,0x15
    0x8400cbd6    0x1a    ld a3,-938(a3) # ffffffff84021828 <ksCurSC>
    0x8400cbda    0x1e    ld t1,72(a3)
    0x8400cbde    0x22    auipc a2,0x15
    0x8400cbe2    0x26    addi a2,a2,-926 # ffffffff84021840 <ksConsumed>
    0x8400cbe6    0x2a    ld a5,0(a2)
    0x8400cbe8    0x2c    slli a4,t1,0x4
    0x8400cbec    0x30    add a4,a4,a3
    0x8400cbee    0x32    sub a5,a5,t3
    0x8400cbf2    0x36    ld a4,96(a4)
    0x8400cbf4    0x38    add a5,a5,a7
    0x8400cbf6    0x3a    sd a7,0(a6)
    0x8400cbfa    0x3e    sd a5,0(a2)
    0x8400cbfc    0x40    bltu a4,a5,ffffffff8400cc5a <handleVMFaultEvent+0x9e>
    0x8400cc00    0x44    sub a4,a4,a5
    0x8400cc02    0x46    li a2,19
    0x8400cc04    0x48    bgeu a2,a4,ffffffff8400cc5a <handleVMFaultEvent+0x9e>
    0x8400cc08    0x4c    ld a4,0(a3)
    0x8400cc0a    0x4e    mv a1,a0
    0x8400cc0c    0x50    bnez a4,ffffffff8400cc46 <handleVMFaultEvent+0x8a>
    0x8400cc0e    0x52    addi a5,a5,20
    0x8400cc10    0x54    auipc a4,0x15
    0x8400cc14    0x58    ld a4,-1024(a4) # ffffffff84021810 <ksDomainTime>
    0x8400cc18    0x5c    bltu a4,a5,ffffffff8400cc8e <handleVMFaultEvent+0xd2>
    0x8400cc1c    0x60    auipc s0,0x15
    0x8400cc20    0x64    addi s0,s0,-964 # ffffffff84021858 <ksCurThread>
    0x8400cc24    0x68    ld a0,0(s0)
    0x8400cc26    0x6a    jal ra,ffffffff84003b1a <handleVMFault>
    0x8400cc2a    0x6e    bnez a0,ffffffff8400cc3e <handleVMFaultEvent+0x82>
    0x8400cc2c    0x70    jal ra,ffffffff8400c616 <schedule>
    0x8400cc30    0x74    jal ra,ffffffff8400756e <activateThread>
    0x8400cc34    0x78    ld ra,8(sp)           ; stack access
    0x8400cc36    0x7a    ld s0,0(sp)           ; stack access
    0x8400cc38    0x7c    li a0,0
    0x8400cc3a    0x7e    addi sp,sp,16
    0x8400cc3c    0x80    ret
    0x8400cc3e    0x82    ld a0,0(s0)
    0x8400cc40    0x84    jal ra,ffffffff84009b2e <handleFault>
    0x8400cc44    0x88    j ffffffff8400cc2c <handleVMFaultEvent+0x70>
    0x8400cc46    0x8a    ld a4,80(a3)
    0x8400cc48    0x8c    ld a3,64(a3)
    0x8400cc4a    0x8e    bgeu a4,t1,ffffffff8400cc50 <handleVMFaultEvent+0x94>
    0x8400cc4e    0x92    add a4,a4,a3
    0x8400cc50    0x94    addi a4,a4,1
    0x8400cc52    0x96    sub t1,a4,t1
    0x8400cc56    0x9a    bne a3,t1,ffffffff8400cc0e <handleVMFaultEvent+0x52>
    0x8400cc5a    0x9e    li a3,1
    0x8400cc5c    0xa0    li a2,0
    0x8400cc5e    0xa2    li a1,1
    0x8400cc60    0xa4    mv a0,a5
    0x8400cc62    0xa6    jal ra,ffffffff840090cc <chargeBudget>
    0x8400cc66    0xaa    auipc a0,0x15
    0x8400cc6a    0xae    ld a0,-1038(a0) # ffffffff84021858 <ksCurThread>
    0x8400cc6e    0xb2    ld a5,280(a0)
    0x8400cc72    0xb6    li a3,1
    0x8400cc74    0xb8    andi a4,a5,15
    0x8400cc78    0xbc    addi a4,a4,-1
    0x8400cc7a    0xbe    bltu a3,a4,ffffffff8400cc2c <handleVMFaultEvent+0x70>
    0x8400cc7e    0xc2    andi a5,a5,-16
    0x8400cc80    0xc4    ori a5,a5,2
    0x8400cc84    0xc8    sd a5,280(a0)
    0x8400cc88    0xcc    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400cc8c    0xd0    j ffffffff8400cc2c <handleVMFaultEvent+0x70>
    0x8400cc8e    0xd2    li a5,1
    0x8400cc90    0xd4    auipc a4,0x15
    0x8400cc94    0xd8    sd a5,-1112(a4) # ffffffff84021838 <ksReprogram>
    0x8400cc98    0xdc    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400cc9c    0xe0    j ffffffff8400cc66 <handleVMFaultEvent+0xaa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 121 nodes.

Section handleInvocation (281 of 296)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 130 instructions.


Stack analysis
---------------

33 stack accesses found. Annotated code for `handleInvocation`:

    0x8400c13a      0x0    addi sp,sp,-176
    0x8400c13c      0x2    sd s2,144(sp)         ; stack access
    0x8400c13e      0x4    auipc s2,0x15
    0x8400c142      0x8    ld s2,1818(s2) # ffffffff84021858 <ksCurThread>
    0x8400c146      0xc    sd s1,152(sp)         ; stack access
    0x8400c148      0xe    ld s1,80(s2)
    0x8400c14c     0x12    sd s3,136(sp)         ; stack access
    0x8400c14e     0x14    sd s5,120(sp)         ; stack access
    0x8400c150     0x16    sd s6,112(sp)         ; stack access
    0x8400c152     0x18    sd s7,104(sp)         ; stack access
    0x8400c154     0x1a    sd s8,96(sp)          ; stack access
    0x8400c156     0x1c    sd ra,168(sp)         ; stack access
    0x8400c158     0x1e    sd s0,160(sp)         ; stack access
    0x8400c15a     0x20    sd s4,128(sp)         ; stack access
    0x8400c15c     0x22    sd s9,88(sp)          ; stack access
    0x8400c15e     0x24    andi a6,s1,127
    0x8400c162     0x28    li a5,120
    0x8400c166     0x2c    mv s6,a0
    0x8400c168     0x2e    mv s5,a1
    0x8400c16a     0x30    mv s7,a2
    0x8400c16c     0x32    mv s8,a3
    0x8400c16e     0x34    mv s3,a4
    0x8400c170     0x36    bgeu a5,a6,ffffffff8400c17c <handleInvocation+0x42>
    0x8400c174     0x3a    andi s1,s1,-128
    0x8400c178     0x3e    ori s1,s1,120
    0x8400c17c     0x42    andi a5,s2,-1024
    0x8400c180     0x46    ld a1,0(a5)
    0x8400c182     0x48    ld a2,8(a5)
    0x8400c184     0x4a    li a4,64
    0x8400c188     0x4e    mv a3,s3
    0x8400c18a     0x50    addi a0,sp,48
    0x8400c18c     0x52    sd a1,32(sp)          ; stack access
    0x8400c18e     0x54    sd a2,40(sp)          ; stack access
    0x8400c190     0x56    jal ra,ffffffff84004438 <resolveAddressBits>
    0x8400c194     0x5a    ld s0,48(sp)          ; stack access
    0x8400c196     0x5c    ld s9,56(sp)          ; stack access
    0x8400c198     0x5e    bnez s0,ffffffff8400c238 <handleInvocation+0xfe>
    0x8400c19a     0x60    ld a5,8(s9)
    0x8400c19e     0x64    ld a4,0(s9)
    0x8400c1a2     0x68    mv a1,s2
    0x8400c1a4     0x6a    li a0,0
    0x8400c1a6     0x6c    sd a4,56(sp)          ; stack access
    0x8400c1a8     0x6e    sd a5,64(sp)          ; stack access
    0x8400c1aa     0x70    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x8400c1ae     0x74    mv s4,a0
    0x8400c1b0     0x76    mv a1,a0
    0x8400c1b2     0x78    mv a2,s1
    0x8400c1b4     0x7a    mv a0,s2
    0x8400c1b6     0x7c    jal ra,ffffffff84008a38 <lookupExtraCaps>
    0x8400c1ba     0x80    bnez a0,ffffffff8400c258 <handleInvocation+0x11e>
    0x8400c1bc     0x82    andi a1,s1,127
    0x8400c1c0     0x86    li a5,4
    0x8400c1c2     0x88    bltu a5,a1,ffffffff8400c264 <handleInvocation+0x12a>
    0x8400c1c6     0x8c    ld a5,64(sp)          ; stack access
    0x8400c1c8     0x8e    ld a4,56(sp)          ; stack access
    0x8400c1ca     0x90    sd s4,16(sp)          ; stack access
    0x8400c1cc     0x92    sd s8,8(sp)           ; stack access
    0x8400c1ce     0x94    sd s7,0(sp)           ; stack access
    0x8400c1d0     0x96    mv a7,s6
    0x8400c1d2     0x98    mv a6,s5
    0x8400c1d4     0x9a    mv a3,s9
    0x8400c1d6     0x9c    mv a2,s3
    0x8400c1d8     0x9e    srli a0,s1,0xc
    0x8400c1dc     0xa2    jal ra,ffffffff8400bec4 <decodeInvocation>
    0x8400c1e0     0xa6    li a5,4
    0x8400c1e2     0xa8    mv s0,a0
    0x8400c1e4     0xaa    beq a0,a5,ffffffff8400c1fe <handleInvocation+0xc4>
    0x8400c1e8     0xae    li a5,3
    0x8400c1ea     0xb0    beq a0,a5,ffffffff8400c26c <handleInvocation+0x132>
    0x8400c1ee     0xb4    ld a5,280(s2)
    0x8400c1f2     0xb8    li a4,2
    0x8400c1f4     0xba    andi a3,a5,15
    0x8400c1f8     0xbe    beq a3,a4,ffffffff8400c21a <handleInvocation+0xe0>
    0x8400c1fc     0xc2    li s0,0
    0x8400c1fe     0xc4    ld ra,168(sp)         ; stack access
    0x8400c200     0xc6    mv a0,s0
    0x8400c202     0xc8    ld s0,160(sp)         ; stack access
    0x8400c204     0xca    ld s1,152(sp)         ; stack access
    0x8400c206     0xcc    ld s2,144(sp)         ; stack access
    0x8400c208     0xce    ld s3,136(sp)         ; stack access
    0x8400c20a     0xd0    ld s4,128(sp)         ; stack access
    0x8400c20c     0xd2    ld s5,120(sp)         ; stack access
    0x8400c20e     0xd4    ld s6,112(sp)         ; stack access
    0x8400c210     0xd6    ld s7,104(sp)         ; stack access
    0x8400c212     0xd8    ld s8,96(sp)          ; stack access
    0x8400c214     0xda    ld s9,88(sp)          ; stack access
    0x8400c216     0xdc    addi sp,sp,176
    0x8400c218     0xde    ret
    0x8400c21a     0xe0    beqz s6,ffffffff8400c226 <handleInvocation+0xec>
    0x8400c21e     0xe4    sd zero,72(s2)
    0x8400c222     0xe8    sd zero,80(s2)
    0x8400c226     0xec    andi a5,a5,-16
    0x8400c228     0xee    ori a5,a5,1
    0x8400c22c     0xf2    sd a5,280(s2)
    0x8400c230     0xf6    mv a0,s2
    0x8400c232     0xf8    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400c236     0xfc    j ffffffff8400c1fc <handleInvocation+0xc2>
    0x8400c238     0xfe    auipc a5,0x4
    0x8400c23c    0x102    addi a5,a5,-568 # ffffffff84010000 <intStateIRQNode>
    0x8400c240    0x106    li a4,1
    0x8400c242    0x108    sd a4,-1920(a5)
    0x8400c246    0x10c    sd s3,-1912(a5)
    0x8400c24a    0x110    beqz s5,ffffffff8400c1fc <handleInvocation+0xc2>
    0x8400c24e    0x114    mv a0,s2
    0x8400c250    0x116    jal ra,ffffffff84009b2e <handleFault>
    0x8400c254    0x11a    li s0,0
    0x8400c256    0x11c    j ffffffff8400c1fe <handleInvocation+0xc4>
    0x8400c258    0x11e    beqz s5,ffffffff8400c1fc <handleInvocation+0xc2>
    0x8400c25c    0x122    mv a0,s2
    0x8400c25e    0x124    jal ra,ffffffff84009b2e <handleFault>
    0x8400c262    0x128    j ffffffff8400c1fe <handleInvocation+0xc4>
    0x8400c264    0x12a    bnez s4,ffffffff8400c1c6 <handleInvocation+0x8c>
    0x8400c268    0x12e    li a1,4
    0x8400c26a    0x130    j ffffffff8400c1c6 <handleInvocation+0x8c>
    0x8400c26c    0x132    beqz s6,ffffffff8400c1fc <handleInvocation+0xc2>
    0x8400c270    0x136    mv a1,s2
    0x8400c272    0x138    li a0,1
    0x8400c274    0x13a    jal ra,ffffffff84003858 <lookupIPCBuffer>
    0x8400c278    0x13e    mv a1,a0
    0x8400c27a    0x140    sd zero,72(s2)
    0x8400c27e    0x144    mv a0,s2
    0x8400c280    0x146    jal ra,ffffffff8400b990 <setMRs_syscall_error>
    0x8400c284    0x14a    auipc a5,0x3
    0x8400c288    0x14e    ld a5,1084(a5) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400c28c    0x152    slli a5,a5,0xc
    0x8400c28e    0x154    andi a0,a0,127
    0x8400c292    0x158    or a5,a5,a0
    0x8400c294    0x15a    sd a5,80(s2)
    0x8400c298    0x15e    li s0,0
    0x8400c29a    0x160    j ffffffff8400c1fe <handleInvocation+0xc4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
130 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 212 nodes.

Section invokeTCB_ThreadControlSched (282 of 296)
=================================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControlSched` consists of 97 instructions.


Stack analysis
---------------

34 stack accesses found. Annotated code for `invokeTCB_ThreadControlSched`:

    0x8400af12     0x0    addi sp,sp,-160
    0x8400af14     0x2    sd s7,88(sp)          ; stack access
    0x8400af16     0x4    ld s7,160(sp)         ; stack access
    0x8400af18     0x6    sd s0,144(sp)         ; stack access
    0x8400af1a     0x8    sd s2,128(sp)         ; stack access
    0x8400af1c     0xa    sd s4,112(sp)         ; stack access
    0x8400af1e     0xc    sd s5,104(sp)         ; stack access
    0x8400af20     0xe    sd ra,152(sp)         ; stack access
    0x8400af22    0x10    sd s1,136(sp)         ; stack access
    0x8400af24    0x12    sd s3,120(sp)         ; stack access
    0x8400af26    0x14    sd s6,96(sp)          ; stack access
    0x8400af28    0x16    sd s8,80(sp)          ; stack access
    0x8400af2a    0x18    andi t1,s7,8
    0x8400af2e    0x1c    mv s0,a0
    0x8400af30    0x1e    mv s5,a5
    0x8400af32    0x20    mv s4,a6
    0x8400af34    0x22    mv s2,a7
    0x8400af36    0x24    bnez t1,ffffffff8400af90 <invokeTCB_ThreadControlSched+0x7e>
    0x8400af3a    0x28    andi a5,s7,2
    0x8400af3e    0x2c    bnez a5,ffffffff8400af7c <invokeTCB_ThreadControlSched+0x6a>
    0x8400af40    0x2e    andi a5,s7,1
    0x8400af44    0x32    bnez a5,ffffffff8400af86 <invokeTCB_ThreadControlSched+0x74>
    0x8400af46    0x34    andi s1,s7,4
    0x8400af4a    0x38    beqz s1,ffffffff8400af62 <invokeTCB_ThreadControlSched+0x50>
    0x8400af4c    0x3a    ld a0,368(s0)
    0x8400af50    0x3e    li s1,0
    0x8400af52    0x40    beqz s2,ffffffff8400b000 <invokeTCB_ThreadControlSched+0xee>
    0x8400af56    0x44    beq s2,a0,ffffffff8400af62 <invokeTCB_ThreadControlSched+0x50>
    0x8400af5a    0x48    mv a1,s0
    0x8400af5c    0x4a    mv a0,s2
    0x8400af5e    0x4c    jal ra,ffffffff84008616 <schedContext_bindTCB>
    0x8400af62    0x50    ld ra,152(sp)         ; stack access
    0x8400af64    0x52    ld s0,144(sp)         ; stack access
    0x8400af66    0x54    ld s2,128(sp)         ; stack access
    0x8400af68    0x56    ld s3,120(sp)         ; stack access
    0x8400af6a    0x58    ld s4,112(sp)         ; stack access
    0x8400af6c    0x5a    ld s5,104(sp)         ; stack access
    0x8400af6e    0x5c    ld s6,96(sp)          ; stack access
    0x8400af70    0x5e    ld s7,88(sp)          ; stack access
    0x8400af72    0x60    ld s8,80(sp)          ; stack access
    0x8400af74    0x62    mv a0,s1
    0x8400af76    0x64    ld s1,136(sp)         ; stack access
    0x8400af78    0x66    addi sp,sp,160
    0x8400af7a    0x68    ret
    0x8400af7c    0x6a    sd s5,352(s0)
    0x8400af80    0x6e    andi a5,s7,1
    0x8400af84    0x72    beqz a5,ffffffff8400af46 <invokeTCB_ThreadControlSched+0x34>
    0x8400af86    0x74    mv a1,s4
    0x8400af88    0x76    mv a0,s0
    0x8400af8a    0x78    jal ra,ffffffff84005c3c <setPriority>
    0x8400af8e    0x7c    j ffffffff8400af46 <invokeTCB_ThreadControlSched+0x34>
    0x8400af90    0x7e    slli t1,a0,0x19
    0x8400af94    0x82    andi s8,a0,-1024
    0x8400af98    0x86    li a5,3
    0x8400af9a    0x88    slli a5,a5,0x3d
    0x8400af9c    0x8a    srli t1,t1,0x19
    0x8400afa0    0x8e    addi s8,s8,96
    0x8400afa4    0x92    or t1,t1,a5
    0x8400afa8    0x96    mv s6,a1
    0x8400afaa    0x98    mv a5,a2
    0x8400afac    0x9a    mv a1,s8
    0x8400afae    0x9c    li a2,1
    0x8400afb0    0x9e    addi a0,sp,48
    0x8400afb2    0xa0    mv s3,a4
    0x8400afb4    0xa2    sd t1,16(sp)          ; stack access
    0x8400afb6    0xa4    sd zero,24(sp)        ; stack access
    0x8400afb8    0xa6    sd a5,32(sp)          ; stack access
    0x8400afba    0xa8    sd a3,40(sp)          ; stack access
    0x8400afbc    0xaa    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400afc0    0xae    ld s1,48(sp)          ; stack access
    0x8400afc2    0xb0    bnez s1,ffffffff8400af62 <invokeTCB_ThreadControlSched+0x50>
    0x8400afc4    0xb2    ld a1,64(sp)          ; stack access
    0x8400afc6    0xb4    ld a2,72(sp)          ; stack access
    0x8400afc8    0xb6    mv a0,s8
    0x8400afca    0xb8    jal ra,ffffffff8400340c <emptySlot>
    0x8400afce    0xbc    ld a2,0(s3)
    0x8400afd2    0xc0    ld a3,8(s3)
    0x8400afd6    0xc4    ld a0,32(sp)          ; stack access
    0x8400afd8    0xc6    ld a1,40(sp)          ; stack access
    0x8400afda    0xc8    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400afde    0xcc    beqz a0,ffffffff8400af3a <invokeTCB_ThreadControlSched+0x28>
    0x8400afe0    0xce    ld a2,0(s6)
    0x8400afe4    0xd2    ld a3,8(s6)
    0x8400afe8    0xd6    ld a0,16(sp)          ; stack access
    0x8400afea    0xd8    ld a1,24(sp)          ; stack access
    0x8400afec    0xda    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400aff0    0xde    beqz a0,ffffffff8400af3a <invokeTCB_ThreadControlSched+0x28>
    0x8400aff2    0xe0    ld a0,32(sp)          ; stack access
    0x8400aff4    0xe2    ld a1,40(sp)          ; stack access
    0x8400aff6    0xe4    mv a3,s8
    0x8400aff8    0xe6    mv a2,s3
    0x8400affa    0xe8    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400affe    0xec    j ffffffff8400af3a <invokeTCB_ThreadControlSched+0x28>
    0x8400b000    0xee    beqz a0,ffffffff8400af62 <invokeTCB_ThreadControlSched+0x50>
    0x8400b002    0xf0    mv a1,s0
    0x8400b004    0xf2    jal ra,ffffffff840071a0 <schedContext_unbindTCB>
    0x8400b008    0xf6    j ffffffff8400af62 <invokeTCB_ThreadControlSched+0x50>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControlSched` has 168 nodes.

Section decodeSetIPCBuffer (283 of 296)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 137 instructions.


Stack analysis
---------------

43 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x8400a428      0x0    addi sp,sp,-176
    0x8400a42a      0x2    sd ra,168(sp)         ; stack access
    0x8400a42c      0x4    sd s0,160(sp)         ; stack access
    0x8400a42e      0x6    sd s1,152(sp)         ; stack access
    0x8400a430      0x8    sd s2,144(sp)         ; stack access
    0x8400a432      0xa    sd s3,136(sp)         ; stack access
    0x8400a434      0xc    sd s4,128(sp)         ; stack access
    0x8400a436      0xe    sd s5,120(sp)         ; stack access
    0x8400a438     0x10    sd s6,112(sp)         ; stack access
    0x8400a43a     0x12    sd s7,104(sp)         ; stack access
    0x8400a43c     0x14    sd a0,0(sp)           ; stack access
    0x8400a43e     0x16    sd a1,8(sp)           ; stack access
    0x8400a440     0x18    beqz a2,ffffffff8400a55a <decodeSetIPCBuffer+0x132>
    0x8400a444     0x1c    auipc s0,0x5
    0x8400a448     0x20    ld s0,1468(s0) # ffffffff8400fa00 <current_extra_caps>
    0x8400a44c     0x24    beqz s0,ffffffff8400a55a <decodeSetIPCBuffer+0x132>
    0x8400a450     0x28    auipc s4,0x17
    0x8400a454     0x2c    addi s4,s4,1032 # ffffffff84021858 <ksCurThread>
    0x8400a458     0x30    ld a0,0(s4)
    0x8400a45c     0x34    ld a2,0(s0)
    0x8400a45e     0x36    mv s1,a3
    0x8400a460     0x38    ld a3,8(s0)
    0x8400a462     0x3a    ld s3,88(a0)
    0x8400a466     0x3e    sd a2,16(sp)          ; stack access
    0x8400a468     0x40    sd a3,24(sp)          ; stack access
    0x8400a46a     0x42    mv s2,a2
    0x8400a46c     0x44    bnez s3,ffffffff8400a522 <decodeSetIPCBuffer+0xfa>
    0x8400a470     0x48    li s0,0
    0x8400a472     0x4a    addi s7,sp,64
    0x8400a476     0x4e    ld a5,280(a0)
    0x8400a47a     0x52    andi a5,a5,-16
    0x8400a47c     0x54    ori a5,a5,2
    0x8400a480     0x58    sd a5,280(a0)
    0x8400a484     0x5c    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400a488     0x60    ld a5,0(sp)           ; stack access
    0x8400a48a     0x62    li a4,-1
    0x8400a48c     0x64    srli a2,a4,0x19
    0x8400a490     0x68    srli a3,a5,0x26
    0x8400a494     0x6c    andi a3,a3,1
    0x8400a496     0x6e    and a5,a5,a2
    0x8400a498     0x70    beqz a3,ffffffff8400a56e <decodeSetIPCBuffer+0x146>
    0x8400a49a     0x72    slli a4,a4,0x27
    0x8400a49c     0x74    or s5,a5,a4
    0x8400a4a0     0x78    li a4,3
    0x8400a4a2     0x7a    slli a4,a4,0x3d
    0x8400a4a4     0x7c    or a5,a5,a4
    0x8400a4a6     0x7e    andi s6,s5,-1024
    0x8400a4aa     0x82    ld a4,24(sp)          ; stack access
    0x8400a4ac     0x84    addi s6,s6,64
    0x8400a4b0     0x88    li a2,1
    0x8400a4b2     0x8a    mv a1,s6
    0x8400a4b4     0x8c    mv a0,s7
    0x8400a4b6     0x8e    sd s2,16(sp)          ; stack access
    0x8400a4b8     0x90    sd s2,32(sp)          ; stack access
    0x8400a4ba     0x92    sd a4,40(sp)          ; stack access
    0x8400a4bc     0x94    sd a5,48(sp)          ; stack access
    0x8400a4be     0x96    sd zero,56(sp)        ; stack access
    0x8400a4c0     0x98    jal ra,ffffffff84009308 <finaliseSlot>
    0x8400a4c4     0x9c    ld s2,64(sp)          ; stack access
    0x8400a4c6     0x9e    bnez s2,ffffffff8400a50a <decodeSetIPCBuffer+0xe2>
    0x8400a4ca     0xa2    ld a1,80(sp)          ; stack access
    0x8400a4cc     0xa4    ld a2,88(sp)          ; stack access
    0x8400a4ce     0xa6    mv a0,s6
    0x8400a4d0     0xa8    jal ra,ffffffff8400340c <emptySlot>
    0x8400a4d4     0xac    sd s3,384(s5)
    0x8400a4d8     0xb0    beqz s0,ffffffff8400a502 <decodeSetIPCBuffer+0xda>
    0x8400a4da     0xb2    ld a2,0(s0)
    0x8400a4dc     0xb4    ld a3,8(s0)
    0x8400a4de     0xb6    ld a0,32(sp)          ; stack access
    0x8400a4e0     0xb8    ld a1,40(sp)          ; stack access
    0x8400a4e2     0xba    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a4e6     0xbe    beqz a0,ffffffff8400a502 <decodeSetIPCBuffer+0xda>
    0x8400a4e8     0xc0    ld a2,0(s1)
    0x8400a4ea     0xc2    ld a3,8(s1)
    0x8400a4ec     0xc4    ld a0,48(sp)          ; stack access
    0x8400a4ee     0xc6    ld a1,56(sp)          ; stack access
    0x8400a4f0     0xc8    jal ra,ffffffff840061d4 <sameObjectAs>
    0x8400a4f4     0xcc    beqz a0,ffffffff8400a502 <decodeSetIPCBuffer+0xda>
    0x8400a4f6     0xce    ld a0,32(sp)          ; stack access
    0x8400a4f8     0xd0    ld a1,40(sp)          ; stack access
    0x8400a4fa     0xd2    mv a3,s6
    0x8400a4fc     0xd4    mv a2,s0
    0x8400a4fe     0xd6    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400a502     0xda    ld a5,0(s4)
    0x8400a506     0xde    beq a5,s5,ffffffff8400a568 <decodeSetIPCBuffer+0x140>
    0x8400a50a     0xe2    ld ra,168(sp)         ; stack access
    0x8400a50c     0xe4    ld s0,160(sp)         ; stack access
    0x8400a50e     0xe6    ld s1,152(sp)         ; stack access
    0x8400a510     0xe8    ld s3,136(sp)         ; stack access
    0x8400a512     0xea    ld s4,128(sp)         ; stack access
    0x8400a514     0xec    ld s5,120(sp)         ; stack access
    0x8400a516     0xee    ld s6,112(sp)         ; stack access
    0x8400a518     0xf0    ld s7,104(sp)         ; stack access
    0x8400a51a     0xf2    mv a0,s2
    0x8400a51c     0xf4    ld s2,144(sp)         ; stack access
    0x8400a51e     0xf6    addi sp,sp,176
    0x8400a520     0xf8    ret
    0x8400a522     0xfa    addi s7,sp,64
    0x8400a526     0xfe    mv a1,s0
    0x8400a528    0x100    mv a0,s7
    0x8400a52a    0x102    jal ra,ffffffff84006146 <deriveCap>
    0x8400a52e    0x106    ld s2,64(sp)          ; stack access
    0x8400a530    0x108    bnez s2,ffffffff8400a50a <decodeSetIPCBuffer+0xe2>
    0x8400a534    0x10c    ld a5,72(sp)          ; stack access
    0x8400a536    0x10e    ld a3,80(sp)          ; stack access
    0x8400a538    0x110    li a4,1
    0x8400a53a    0x112    sd a5,16(sp)          ; stack access
    0x8400a53c    0x114    sd a3,24(sp)          ; stack access
    0x8400a53e    0x116    srli a3,a5,0x3b
    0x8400a542    0x11a    mv s2,a5
    0x8400a544    0x11c    bne a3,a4,ffffffff8400a572 <decodeSetIPCBuffer+0x14a>
    0x8400a548    0x120    srli a5,a5,0x36
    0x8400a54a    0x122    andi a5,a5,1
    0x8400a54c    0x124    bnez a5,ffffffff8400a572 <decodeSetIPCBuffer+0x14a>
    0x8400a54e    0x126    andi a5,s3,1023
    0x8400a552    0x12a    bnez a5,ffffffff8400a580 <decodeSetIPCBuffer+0x158>
    0x8400a554    0x12c    ld a0,0(s4)
    0x8400a558    0x130    j ffffffff8400a476 <decodeSetIPCBuffer+0x4e>
    0x8400a55a    0x132    li a5,7
    0x8400a55c    0x134    auipc a4,0x5
    0x8400a560    0x138    sd a5,356(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a564    0x13c    li s2,3
    0x8400a566    0x13e    j ffffffff8400a50a <decodeSetIPCBuffer+0xe2>
    0x8400a568    0x140    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400a56c    0x144    j ffffffff8400a50a <decodeSetIPCBuffer+0xe2>
    0x8400a56e    0x146    mv s5,a5
    0x8400a570    0x148    j ffffffff8400a4a0 <decodeSetIPCBuffer+0x78>
    0x8400a572    0x14a    li a5,3
    0x8400a574    0x14c    auipc a4,0x5
    0x8400a578    0x150    sd a5,332(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a57c    0x154    li s2,3
    0x8400a57e    0x156    j ffffffff8400a50a <decodeSetIPCBuffer+0xe2>
    0x8400a580    0x158    li a5,5
    0x8400a582    0x15a    auipc a4,0x5
    0x8400a586    0x15e    sd a5,318(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400a58a    0x162    li s2,3
    0x8400a58c    0x164    j ffffffff8400a50a <decodeSetIPCBuffer+0xe2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
137 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 232 nodes.

Section receiveIPC (284 of 296)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 293 instructions.


Stack analysis
---------------

62 stack accesses found. Annotated code for `receiveIPC`:

    0x84009d06      0x0    addi sp,sp,-96
    0x84009d08      0x2    li a6,-1
    0x84009d0a      0x4    srli a7,a1,0x26
    0x84009d0e      0x8    sd s0,80(sp)          ; stack access
    0x84009d10      0xa    sd s1,72(sp)          ; stack access
    0x84009d12      0xc    srli t1,a6,0x19
    0x84009d16     0x10    sd ra,88(sp)          ; stack access
    0x84009d18     0x12    sd s2,64(sp)          ; stack access
    0x84009d1a     0x14    sd s3,56(sp)          ; stack access
    0x84009d1c     0x16    sd s4,48(sp)          ; stack access
    0x84009d1e     0x18    sd a1,32(sp)          ; stack access
    0x84009d20     0x1a    sd a2,40(sp)          ; stack access
    0x84009d22     0x1c    sd a4,16(sp)          ; stack access
    0x84009d24     0x1e    sd a5,24(sp)          ; stack access
    0x84009d26     0x20    andi a7,a7,1
    0x84009d2a     0x24    mv s1,a0
    0x84009d2c     0x26    and s0,a1,t1
    0x84009d30     0x2a    beqz a7,ffffffff84009d3a <receiveIPC+0x34>
    0x84009d34     0x2e    slli a6,a6,0x27
    0x84009d36     0x30    or s0,s0,a6
    0x84009d3a     0x34    ld a5,16(sp)          ; stack access
    0x84009d3c     0x36    li a4,8
    0x84009d3e     0x38    li s3,0
    0x84009d40     0x3a    srli a5,a5,0x3b
    0x84009d42     0x3c    beq a5,a4,ffffffff84009d7c <receiveIPC+0x76>
    0x84009d46     0x40    ld a0,304(s1)
    0x84009d4a     0x44    beqz a0,ffffffff84009d92 <receiveIPC+0x8c>
    0x84009d4c     0x46    ld a5,0(a0)
    0x84009d4e     0x48    li a4,2
    0x84009d50     0x4a    andi a5,a5,3
    0x84009d52     0x4c    beq a5,a4,ffffffff84009f3c <receiveIPC+0x236>
    0x84009d56     0x50    bnez a3,ffffffff84009ed8 <receiveIPC+0x1d2>
    0x84009d5a     0x54    ld a5,0(s0)
    0x84009d5c     0x56    li a4,1
    0x84009d5e     0x58    andi a3,a5,3
    0x84009d62     0x5c    beq a3,a4,ffffffff84009d9e <receiveIPC+0x98>
    0x84009d66     0x60    andi a5,a5,1
    0x84009d68     0x62    beqz a5,ffffffff84009f28 <receiveIPC+0x222>
    0x84009d6c     0x66    ld ra,88(sp)          ; stack access
    0x84009d6e     0x68    ld s0,80(sp)          ; stack access
    0x84009d70     0x6a    ld s1,72(sp)          ; stack access
    0x84009d72     0x6c    ld s2,64(sp)          ; stack access
    0x84009d74     0x6e    ld s3,56(sp)          ; stack access
    0x84009d76     0x70    ld s4,48(sp)          ; stack access
    0x84009d78     0x72    addi sp,sp,96
    0x84009d7a     0x74    ret
    0x84009d7c     0x76    ld s3,24(sp)          ; stack access
    0x84009d7e     0x78    ld a0,0(s3)
    0x84009d82     0x7c    beqz a0,ffffffff84009d46 <receiveIPC+0x40>
    0x84009d84     0x7e    beq a0,s1,ffffffff84009d46 <receiveIPC+0x40>
    0x84009d88     0x82    sd a3,8(sp)           ; stack access
    0x84009d8a     0x84    jal ra,ffffffff84006fc0 <cancelIPC>
    0x84009d8e     0x88    ld a3,8(sp)           ; stack access
    0x84009d90     0x8a    j ffffffff84009d46 <receiveIPC+0x40>
    0x84009d92     0x8c    ld a5,0(s0)
    0x84009d94     0x8e    li a4,1
    0x84009d96     0x90    andi a2,a5,3
    0x84009d9a     0x94    bne a2,a4,ffffffff84009e54 <receiveIPC+0x14e>
    0x84009d9e     0x98    ld a3,8(s0)
    0x84009da0     0x9a    srli a2,a5,0x26
    0x84009da4     0x9e    lui a4,0xf8000
    0x84009da8     0xa2    srli a4,a4,0x19
    0x84009daa     0xa4    andi a2,a2,1
    0x84009dac     0xa6    mv s2,a3
    0x84009dae     0xa8    and a4,a4,a5
    0x84009db0     0xaa    beqz a2,ffffffff84009db8 <receiveIPC+0xb2>
    0x84009db2     0xac    li a2,-1
    0x84009db4     0xae    slli a2,a2,0x27
    0x84009db6     0xb0    or a4,a4,a2
    0x84009db8     0xb2    li a2,-1
    0x84009dba     0xb4    ld a1,416(a3)
    0x84009dbe     0xb8    slli a2,a2,0x27
    0x84009dc0     0xba    addi a0,a2,3
    0x84009dc4     0xbe    ld a6,408(a3)
    0x84009dc8     0xc2    and a0,a0,a5
    0x84009dca     0xc4    beqz a1,ffffffff84009fa6 <receiveIPC+0x2a0>
    0x84009dce     0xc8    sd a6,408(a1)
    0x84009dd2     0xcc    beqz a6,ffffffff84009f16 <receiveIPC+0x210>
    0x84009dd6     0xd0    lui a5,0xf8000
    0x84009dda     0xd4    srli a5,a5,0x19
    0x84009ddc     0xd6    and a4,a4,a5
    0x84009dde     0xd8    sd a1,416(a6)
    0x84009de2     0xdc    or a4,a4,a0
    0x84009de4     0xde    sd a3,8(s0)
    0x84009de6     0xe0    sd a4,0(s0)
    0x84009de8     0xe2    ld a5,288(s2)
    0x84009dec     0xe6    ld a2,296(s2)
    0x84009df0     0xea    mv a4,s1
    0x84009df2     0xec    srli s4,a5,0x4
    0x84009df6     0xf0    mv a1,s0
    0x84009df8     0xf2    andi a3,s4,1
    0x84009dfc     0xf6    mv a0,s2
    0x84009dfe     0xf8    srli s0,a5,0x3
    0x84009e02     0xfc    jal ra,ffffffff84008cc4 <doIPCTransfer>
    0x84009e06    0x100    ld a4,288(s2)
    0x84009e0a    0x104    srli a4,a4,0x2
    0x84009e0c    0x106    andi a4,a4,1
    0x84009e0e    0x108    bnez a4,ffffffff84009e1a <receiveIPC+0x114>
    0x84009e10    0x10a    ld a5,312(s2)
    0x84009e14    0x10e    andi a5,a5,15
    0x84009e16    0x110    beqz a5,ffffffff84009fd0 <receiveIPC+0x2ca>
    0x84009e1a    0x114    or a5,s0,s4
    0x84009e1e    0x118    andi a5,a5,1
    0x84009e20    0x11a    beqz a5,ffffffff84009f88 <receiveIPC+0x282>
    0x84009e24    0x11e    beqz s3,ffffffff84009f88 <receiveIPC+0x282>
    0x84009e28    0x122    ld a5,368(s2)
    0x84009e2c    0x126    li a3,0
    0x84009e2e    0x128    beqz a5,ffffffff84009e3c <receiveIPC+0x136>
    0x84009e30    0x12a    ld a3,312(s2)
    0x84009e34    0x12e    andi a3,a3,15
    0x84009e36    0x130    addi a3,a3,-5
    0x84009e38    0x132    snez a3,a3
    0x84009e3c    0x136    ld s0,80(sp)          ; stack access
    0x84009e3e    0x138    ld ra,88(sp)          ; stack access
    0x84009e40    0x13a    ld s4,48(sp)          ; stack access
    0x84009e42    0x13c    mv a2,s3
    0x84009e44    0x13e    mv a1,s1
    0x84009e46    0x140    ld s3,56(sp)          ; stack access
    0x84009e48    0x142    ld s1,72(sp)          ; stack access
    0x84009e4a    0x144    mv a0,s2
    0x84009e4c    0x146    ld s2,64(sp)          ; stack access
    0x84009e4e    0x148    addi sp,sp,96
    0x84009e50    0x14a    j ffffffff8400730a <reply_push>
    0x84009e54    0x14e    andi a5,a5,1
    0x84009e56    0x150    bnez a5,ffffffff84009d6c <receiveIPC+0x66>
    0x84009e58    0x152    beqz a3,ffffffff84009f28 <receiveIPC+0x222>
    0x84009e5a    0x154    ld a5,280(s1)
    0x84009e5e    0x158    ld a3,288(s1)
    0x84009e62    0x15c    li a4,-1
    0x84009e64    0x15e    lui a1,0xe0000
    0x84009e68    0x162    slli a2,a4,0x27
    0x84009e6c    0x166    srli a0,a1,0x19
    0x84009e70    0x16a    slli a4,a4,0x28
    0x84009e72    0x16c    and a5,a5,a2
    0x84009e74    0x16e    and a0,a0,s0
    0x84009e76    0x170    addi a4,a4,31
    0x84009e78    0x172    slli a2,s3,0x1
    0x84009e7c    0x176    srli a1,a1,0x18
    0x84009e7e    0x178    and a4,a4,a3
    0x84009e80    0x17a    or a5,a5,a0
    0x84009e82    0x17c    and a3,a2,a1
    0x84009e86    0x180    ori a5,a5,3
    0x84009e8a    0x184    or a4,a4,a3
    0x84009e8c    0x186    sd a5,280(s1)
    0x84009e90    0x18a    sd a4,288(s1)
    0x84009e94    0x18e    beqz s3,ffffffff84009e9c <receiveIPC+0x196>
    0x84009e98    0x192    sd s1,0(s3)
    0x84009e9c    0x196    mv a0,s1
    0x84009e9e    0x198    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009ea2    0x19c    ld a4,0(s0)
    0x84009ea4    0x19e    lui a5,0xf8000
    0x84009ea8    0x1a2    srli a5,a5,0x19
    0x84009eaa    0x1a4    srli a3,a4,0x26
    0x84009eae    0x1a8    andi a3,a3,1
    0x84009eb0    0x1aa    ld a0,8(s0)
    0x84009eb2    0x1ac    and a5,a5,a4
    0x84009eb4    0x1ae    beqz a3,ffffffff84009f50 <receiveIPC+0x24a>
    0x84009eb6    0x1b0    li a3,-1
    0x84009eb8    0x1b2    slli a3,a3,0x27
    0x84009eba    0x1b4    or a5,a5,a3
    0x84009ebc    0x1b6    ld a3,360(s1)
    0x84009ec0    0x1ba    mv a2,a5
    0x84009ec2    0x1bc    li a1,0
    0x84009ec4    0x1be    ld a6,360(a2)
    0x84009ec8    0x1c2    bltu a6,a3,ffffffff84009ff8 <receiveIPC+0x2f2>
    0x84009ecc    0x1c6    sd s1,408(a2)
    0x84009ed0    0x1ca    bnez a1,ffffffff8400a006 <receiveIPC+0x300>
    0x84009ed4    0x1ce    mv a5,s1
    0x84009ed6    0x1d0    j ffffffff84009f5a <receiveIPC+0x254>
    0x84009ed8    0x1d2    ld a5,32(a0)
    0x84009eda    0x1d4    li a4,-1
    0x84009edc    0x1d6    srli a2,a4,0x19
    0x84009ee0    0x1da    srli a3,a5,0x26
    0x84009ee4    0x1de    andi a3,a3,1
    0x84009ee6    0x1e0    and a5,a5,a2
    0x84009ee8    0x1e2    beqz a3,ffffffff84009eee <receiveIPC+0x1e8>
    0x84009eea    0x1e4    slli a4,a4,0x27
    0x84009eec    0x1e6    or a5,a5,a4
    0x84009eee    0x1e8    ld a4,368(s1)
    0x84009ef2    0x1ec    beq a5,a4,ffffffff84009fb6 <receiveIPC+0x2b0>
    0x84009ef6    0x1f0    ld a5,0(s0)
    0x84009ef8    0x1f2    li a4,1
    0x84009efa    0x1f4    andi a3,a5,3
    0x84009efe    0x1f8    beq a3,a4,ffffffff84009d9e <receiveIPC+0x98>
    0x84009f02    0x1fc    andi a5,a5,1
    0x84009f04    0x1fe    beqz a5,ffffffff84009e5a <receiveIPC+0x154>
    0x84009f06    0x200    ld ra,88(sp)          ; stack access
    0x84009f08    0x202    ld s0,80(sp)          ; stack access
    0x84009f0a    0x204    ld s1,72(sp)          ; stack access
    0x84009f0c    0x206    ld s2,64(sp)          ; stack access
    0x84009f0e    0x208    ld s3,56(sp)          ; stack access
    0x84009f10    0x20a    ld s4,48(sp)          ; stack access
    0x84009f12    0x20c    addi sp,sp,96
    0x84009f14    0x20e    ret
    0x84009f16    0x210    lui a4,0xf8000
    0x84009f1a    0x214    srli a4,a4,0x19
    0x84009f1c    0x216    and a1,a1,a4
    0x84009f1e    0x218    or a4,a1,a0
    0x84009f22    0x21c    sd a3,8(s0)
    0x84009f24    0x21e    sd a4,0(s0)
    0x84009f26    0x220    j ffffffff84009de8 <receiveIPC+0xe2>
    0x84009f28    0x222    ld ra,88(sp)          ; stack access
    0x84009f2a    0x224    ld s0,80(sp)          ; stack access
    0x84009f2c    0x226    sd zero,72(s1)
    0x84009f30    0x22a    ld s2,64(sp)          ; stack access
    0x84009f32    0x22c    ld s1,72(sp)          ; stack access
    0x84009f34    0x22e    ld s3,56(sp)          ; stack access
    0x84009f36    0x230    ld s4,48(sp)          ; stack access
    0x84009f38    0x232    addi sp,sp,96
    0x84009f3a    0x234    ret
    0x84009f3c    0x236    ld s0,80(sp)          ; stack access
    0x84009f3e    0x238    ld ra,88(sp)          ; stack access
    0x84009f40    0x23a    ld s2,64(sp)          ; stack access
    0x84009f42    0x23c    ld s3,56(sp)          ; stack access
    0x84009f44    0x23e    ld s4,48(sp)          ; stack access
    0x84009f46    0x240    mv a1,s1
    0x84009f48    0x242    ld s1,72(sp)          ; stack access
    0x84009f4a    0x244    addi sp,sp,96
    0x84009f4c    0x246    j ffffffff840080fc <completeSignal>
    0x84009f50    0x24a    bnez a5,ffffffff84009ebc <receiveIPC+0x1b6>
    0x84009f52    0x24c    mv a0,s1
    0x84009f54    0x24e    mv a5,s1
    0x84009f56    0x250    li a2,0
    0x84009f58    0x252    li a1,0
    0x84009f5a    0x254    lui a3,0xf8000
    0x84009f5e    0x258    srli a4,a4,0x27
    0x84009f60    0x25a    srli a3,a3,0x19
    0x84009f62    0x25c    slli a4,a4,0x27
    0x84009f64    0x25e    and a5,a5,a3
    0x84009f66    0x260    or a5,a5,a4
    0x84009f68    0x262    sd a1,408(s1)
    0x84009f6c    0x266    sd a2,416(s1)
    0x84009f70    0x26a    ori a5,a5,2
    0x84009f74    0x26e    ld ra,88(sp)          ; stack access
    0x84009f76    0x270    sd a0,8(s0)
    0x84009f78    0x272    sd a5,0(s0)
    0x84009f7a    0x274    ld s0,80(sp)          ; stack access
    0x84009f7c    0x276    ld s1,72(sp)          ; stack access
    0x84009f7e    0x278    ld s2,64(sp)          ; stack access
    0x84009f80    0x27a    ld s3,56(sp)          ; stack access
    0x84009f82    0x27c    ld s4,48(sp)          ; stack access
    0x84009f84    0x27e    addi sp,sp,96
    0x84009f86    0x280    ret
    0x84009f88    0x282    ld a5,280(s2)
    0x84009f8c    0x286    ld s0,80(sp)          ; stack access
    0x84009f8e    0x288    ld ra,88(sp)          ; stack access
    0x84009f90    0x28a    andi a5,a5,-16
    0x84009f92    0x28c    ld s1,72(sp)          ; stack access
    0x84009f94    0x28e    ld s3,56(sp)          ; stack access
    0x84009f96    0x290    ld s4,48(sp)          ; stack access
    0x84009f98    0x292    sd a5,280(s2)
    0x84009f9c    0x296    mv a0,s2
    0x84009f9e    0x298    ld s2,64(sp)          ; stack access
    0x84009fa0    0x29a    addi sp,sp,96
    0x84009fa2    0x29c    j ffffffff84004c6a <scheduleTCB>
    0x84009fa6    0x2a0    mv a3,a6
    0x84009fa8    0x2a2    bnez a6,ffffffff84009dd6 <receiveIPC+0xd0>
    0x84009fac    0x2a6    and a5,a5,a2
    0x84009fae    0x2a8    sd zero,8(s0)
    0x84009fb2    0x2ac    sd a5,0(s0)
    0x84009fb4    0x2ae    j ffffffff84009de8 <receiveIPC+0xe2>
    0x84009fb6    0x2b0    sd zero,368(s1)
    0x84009fba    0x2b4    sd zero,24(a5) # fffffffff8000018 <ki_end+0x73fd9018>
    0x84009fbe    0x2b8    auipc a5,0x18
    0x84009fc2    0x2bc    ld a5,-1894(a5) # ffffffff84021858 <ksCurThread>
    0x84009fc6    0x2c0    bne s1,a5,ffffffff84009ef6 <receiveIPC+0x1f0>
    0x84009fca    0x2c4    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84009fce    0x2c8    j ffffffff84009ef6 <receiveIPC+0x1f0>
    0x84009fd0    0x2ca    ld a5,280(s2)
    0x84009fd4    0x2ce    mv a0,s2
    0x84009fd6    0x2d0    andi a5,a5,-16
    0x84009fd8    0x2d2    ori a5,a5,1
    0x84009fdc    0x2d6    sd a5,280(s2)
    0x84009fe0    0x2da    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009fe4    0x2de    ld s0,80(sp)          ; stack access
    0x84009fe6    0x2e0    ld ra,88(sp)          ; stack access
    0x84009fe8    0x2e2    ld s1,72(sp)          ; stack access
    0x84009fea    0x2e4    ld s3,56(sp)          ; stack access
    0x84009fec    0x2e6    ld s4,48(sp)          ; stack access
    0x84009fee    0x2e8    mv a0,s2
    0x84009ff0    0x2ea    ld s2,64(sp)          ; stack access
    0x84009ff2    0x2ec    addi sp,sp,96
    0x84009ff4    0x2ee    j ffffffff84004ca6 <possibleSwitchTo>
    0x84009ff8    0x2f2    ld a6,416(a2)
    0x84009ffc    0x2f6    bnez a6,ffffffff8400a00c <receiveIPC+0x306>
    0x8400a000    0x2fa    mv a1,a2
    0x8400a002    0x2fc    mv a0,s1
    0x8400a004    0x2fe    li a2,0
    0x8400a006    0x300    sd s1,416(a1) # ffffffffe00001a0 <ki_end+0x5bfd91a0>
    0x8400a00a    0x304    j ffffffff84009f5a <receiveIPC+0x254>
    0x8400a00c    0x306    mv a1,a2
    0x8400a00e    0x308    mv a2,a6
    0x8400a010    0x30a    j ffffffff84009ec4 <receiveIPC+0x1be>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
293 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 481 nodes.

Section finaliseSlot (285 of 296)
=================================

Deriving specifications
-----------------------

Section `finaliseSlot` consists of 180 instructions.


Stack analysis
---------------

Section `finaliseSlot` expects pointer to stack in a0.
58 stack accesses found. Annotated code for `finaliseSlot`:

    0x84009308      0x0    addi sp,sp,-176
    0x8400930a      0x2    sd s0,160(sp)         ; stack access
    0x8400930c      0x4    sd s1,152(sp)         ; stack access
    0x8400930e      0x6    sd s2,144(sp)         ; stack access
    0x84009310      0x8    sd s3,136(sp)         ; stack access
    0x84009312      0xa    sd s4,128(sp)         ; stack access
    0x84009314      0xc    sd s5,120(sp)         ; stack access
    0x84009316      0xe    sd s6,112(sp)         ; stack access
    0x84009318     0x10    sd ra,168(sp)         ; stack access
    0x8400931a     0x12    sd s7,104(sp)         ; stack access
    0x8400931c     0x14    sd s8,96(sp)          ; stack access
    0x8400931e     0x16    sd s9,88(sp)          ; stack access
    0x84009320     0x18    sd s10,80(sp)         ; stack access
    0x84009322     0x1a    mv s4,a0
    0x84009324     0x1c    mv s6,a1
    0x84009326     0x1e    mv s3,a2
    0x84009328     0x20    li s2,18
    0x8400932a     0x22    li s1,64
    0x8400932e     0x26    li s5,-1
    0x84009330     0x28    li s0,1
    0x84009332     0x2a    ld s7,0(s6)
    0x84009336     0x2e    srli a5,s7,0x3b
    0x8400933a     0x32    beqz a5,ffffffff840094ee <finaliseSlot+0x1e6>
    0x8400933e     0x36    mv a0,s6
    0x84009340     0x38    jal ra,ffffffff8400621a <isFinalCapability>
    0x84009344     0x3c    ld a2,8(s6)
    0x84009348     0x40    mv a3,a0
    0x8400934a     0x42    li a4,0
    0x8400934c     0x44    mv a1,s7
    0x8400934e     0x46    addi a0,sp,16
    0x84009350     0x48    jal ra,ffffffff840075ec <finaliseCap>
    0x84009354     0x4c    ld a4,16(sp)          ; stack access
    0x84009356     0x4e    ld a0,32(sp)          ; stack access
    0x84009358     0x50    ld a1,40(sp)          ; stack access
    0x8400935a     0x52    srli a5,a4,0x3b
    0x8400935e     0x56    bnez a5,ffffffff84009390 <finaliseSlot+0x88>
    0x84009360     0x58    li a5,1
    0x84009362     0x5a    sd zero,0(s4)         ; stack access
    0x84009366     0x5e    sd a5,8(s4)           ; stack access
    0x8400936a     0x62    sd a0,16(s4)          ; stack access
    0x8400936e     0x66    sd a1,24(s4)          ; stack access
    0x84009372     0x6a    ld ra,168(sp)         ; stack access
    0x84009374     0x6c    ld s0,160(sp)         ; stack access
    0x84009376     0x6e    ld s1,152(sp)         ; stack access
    0x84009378     0x70    ld s2,144(sp)         ; stack access
    0x8400937a     0x72    ld s3,136(sp)         ; stack access
    0x8400937c     0x74    ld s5,120(sp)         ; stack access
    0x8400937e     0x76    ld s6,112(sp)         ; stack access
    0x84009380     0x78    ld s7,104(sp)         ; stack access
    0x84009382     0x7a    ld s8,96(sp)          ; stack access
    0x84009384     0x7c    ld s9,88(sp)          ; stack access
    0x84009386     0x7e    ld s10,80(sp)         ; stack access
    0x84009388     0x80    mv a0,s4
    0x8400938a     0x82    ld s4,128(sp)         ; stack access
    0x8400938c     0x84    addi sp,sp,176
    0x8400938e     0x86    ret
    0x84009390     0x88    bne a5,s2,ffffffff8400951a <finaliseSlot+0x212>
    0x84009394     0x8c    andi s8,a4,127
    0x84009398     0x90    beq s8,s1,ffffffff840094de <finaliseSlot+0x1d6>
    0x8400939c     0x94    andi a5,a4,63
    0x840093a0     0x98    addi a5,a5,1
    0x840093a2     0x9a    sll a2,s5,a5
    0x840093a6     0x9e    sll a5,s0,a5
    0x840093aa     0xa2    not a2,a2
    0x840093ae     0xa6    neg a5,a5
    0x840093b2     0xaa    ld a3,24(sp)          ; stack access
    0x840093b4     0xac    and a2,a2,a3
    0x840093b6     0xae    beqz a2,ffffffff84009360 <finaliseSlot+0x58>
    0x840093b8     0xb0    and a5,a5,a3
    0x840093ba     0xb2    beq a2,s0,ffffffff8400941a <finaliseSlot+0x112>
    0x840093be     0xb6    ld a2,16(sp)          ; stack access
    0x840093c0     0xb8    sd a3,8(s6)
    0x840093c4     0xbc    sd a2,0(s6)
    0x840093c8     0xc0    bnez s3,ffffffff8400942c <finaliseSlot+0x124>
    0x840093cc     0xc4    beq s6,a5,ffffffff84009502 <finaliseSlot+0x1fa>
    0x840093d0     0xc8    beq s8,s1,ffffffff840094d8 <finaliseSlot+0x1d0>
    0x840093d4     0xcc    andi a2,a4,63
    0x840093d8     0xd0    addiw a2,a2,1
    0x840093da     0xd2    sll a2,s0,a2
    0x840093de     0xd6    neg a2,a2
    0x840093e2     0xda    and a2,a2,a3
    0x840093e4     0xdc    beq s6,a2,ffffffff84009402 <finaliseSlot+0xfa>
    0x840093e8     0xe0    ld a0,0(a2)
    0x840093ea     0xe2    ld a1,8(a2)
    0x840093ec     0xe4    ld a3,0(s6)
    0x840093f0     0xe8    ld a4,8(s6)
    0x840093f4     0xec    mv a5,s6
    0x840093f6     0xee    sd a0,0(sp)           ; stack access
    0x840093f8     0xf0    sd a1,8(sp)           ; stack access
    0x840093fa     0xf2    sd a3,48(sp)          ; stack access
    0x840093fc     0xf4    sd a4,56(sp)          ; stack access
    0x840093fe     0xf6    jal ra,ffffffff8400504c <cteSwap>
    0x84009402     0xfa    jal ra,ffffffff84009244 <preemptionPoint>
    0x84009406     0xfe    beqz a0,ffffffff84009332 <finaliseSlot+0x2a>
    0x84009408    0x100    sd a0,0(s4)           ; stack access
    0x8400940c    0x104    sd zero,8(s4)         ; stack access
    0x84009410    0x108    sd zero,16(s4)        ; stack access
    0x84009414    0x10c    sd zero,24(s4)        ; stack access
    0x84009418    0x110    j ffffffff84009372 <finaliseSlot+0x6a>
    0x8400941a    0x112    beq s6,a5,ffffffff84009360 <finaliseSlot+0x58>
    0x8400941e    0x116    ld a5,16(sp)          ; stack access
    0x84009420    0x118    sd a3,8(s6)
    0x84009424    0x11c    sd a5,0(s6)
    0x84009428    0x120    beqz s3,ffffffff840093d0 <finaliseSlot+0xc8>
    0x8400942c    0x124    beq s8,s1,ffffffff840094e4 <finaliseSlot+0x1dc>
    0x84009430    0x128    andi a4,a4,63
    0x84009434    0x12c    addi a4,a4,1
    0x84009436    0x12e    sll s9,s0,a4
    0x8400943a    0x132    sll a4,s5,a4
    0x8400943e    0x136    neg s9,s9
    0x84009442    0x13a    not a4,a4
    0x84009446    0x13e    and s9,s9,a3
    0x8400944a    0x142    and s7,a4,a3
    0x8400944e    0x146    slli s10,s7,0x5
    0x84009452    0x14a    addi s10,s10,-32
    0x84009454    0x14c    add s10,s10,s9
    0x84009456    0x14e    li a2,0
    0x84009458    0x150    mv a1,s10
    0x8400945a    0x152    addi a0,sp,48
    0x8400945c    0x154    jal ra,ffffffff84009308 <finaliseSlot>
    0x84009460    0x158    ld a5,48(sp)          ; stack access
    0x84009462    0x15a    bnez a5,ffffffff840094c6 <finaliseSlot+0x1be>
    0x84009464    0x15c    ld a5,56(sp)          ; stack access
    0x84009466    0x15e    beqz a5,ffffffff84009472 <finaliseSlot+0x16a>
    0x84009468    0x160    ld a1,64(sp)          ; stack access
    0x8400946a    0x162    ld a2,72(sp)          ; stack access
    0x8400946c    0x164    mv a0,s10
    0x8400946e    0x166    jal ra,ffffffff8400340c <emptySlot>
    0x84009472    0x16a    ld a2,0(s6)
    0x84009476    0x16e    srli a5,a2,0x3b
    0x8400947a    0x172    beqz a5,ffffffff84009402 <finaliseSlot+0xfa>
    0x8400947c    0x174    bne a5,s2,ffffffff8400951a <finaliseSlot+0x212>
    0x84009480    0x178    andi a1,a2,127
    0x84009484    0x17c    ld a3,8(s6)
    0x84009488    0x180    beq a1,s1,ffffffff84009514 <finaliseSlot+0x20c>
    0x8400948c    0x184    andi a4,a2,63
    0x84009490    0x188    addi a4,a4,1
    0x84009492    0x18a    sll a5,s0,a4
    0x84009496    0x18e    neg a5,a5
    0x8400949a    0x192    and a5,a5,a3
    0x8400949c    0x194    bne s9,a5,ffffffff84009402 <finaliseSlot+0xfa>
    0x840094a0    0x198    sll a4,s5,a4
    0x840094a4    0x19c    not a5,a4
    0x840094a8    0x1a0    and a3,a3,a5
    0x840094aa    0x1a2    bne a3,s7,ffffffff84009402 <finaliseSlot+0xfa>
    0x840094ae    0x1a6    bne s8,a1,ffffffff84009402 <finaliseSlot+0xfa>
    0x840094b2    0x1aa    addi a4,s7,-1
    0x840094b6    0x1ae    and a5,a5,a4
    0x840094b8    0x1b0    or s9,a5,s9
    0x840094bc    0x1b4    sd a2,0(s6)
    0x840094c0    0x1b8    sd s9,8(s6)
    0x840094c4    0x1bc    j ffffffff84009402 <finaliseSlot+0xfa>
    0x840094c6    0x1be    sd a5,0(s4)           ; stack access
    0x840094ca    0x1c2    sd zero,8(s4)         ; stack access
    0x840094ce    0x1c6    sd zero,16(s4)        ; stack access
    0x840094d2    0x1ca    sd zero,24(s4)        ; stack access
    0x840094d6    0x1ce    j ffffffff84009372 <finaliseSlot+0x6a>
    0x840094d8    0x1d0    andi a2,a3,-32
    0x840094dc    0x1d4    j ffffffff840093e4 <finaliseSlot+0xdc>
    0x840094de    0x1d6    li a5,-32
    0x840094e0    0x1d8    li a2,31
    0x840094e2    0x1da    j ffffffff840093b2 <finaliseSlot+0xaa>
    0x840094e4    0x1dc    andi s9,a3,-32
    0x840094e8    0x1e0    andi s7,a3,31
    0x840094ec    0x1e4    j ffffffff8400944e <finaliseSlot+0x146>
    0x840094ee    0x1e6    li a5,1
    0x840094f0    0x1e8    sd zero,0(s4)         ; stack access
    0x840094f4    0x1ec    sd a5,8(s4)           ; stack access
    0x840094f8    0x1f0    sd zero,16(s4)        ; stack access
    0x840094fc    0x1f4    sd zero,24(s4)        ; stack access
    0x84009500    0x1f8    j ffffffff84009372 <finaliseSlot+0x6a>
    0x84009502    0x1fa    sd zero,0(s4)         ; stack access
    0x84009506    0x1fe    sd zero,8(s4)         ; stack access
    0x8400950a    0x202    sd a0,16(s4)          ; stack access
    0x8400950e    0x206    sd a1,24(s4)          ; stack access
    0x84009512    0x20a    j ffffffff84009372 <finaliseSlot+0x6a>
    0x84009514    0x20c    li a5,-32
    0x84009516    0x20e    li a4,5
    0x84009518    0x210    j ffffffff8400949a <finaliseSlot+0x192>
    0x8400951a    0x212    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
180 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseSlot` has 304 nodes.

Section decodeSchedControl_Configure_isra_0 (286 of 296)
========================================================

Deriving specifications
-----------------------

Section `decodeSchedControl_Configure_isra_0` consists of 284 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `decodeSchedControl_Configure_isra_0`:

    0x84007d8c      0x0    auipc a4,0x8
    0x84007d90      0x4    ld a4,-908(a4) # ffffffff8400fa00 <current_extra_caps>
    0x84007d94      0x8    beqz a4,ffffffff84007f0a <decodeSchedControl_Configure.isra.0+0x17e>
    0x84007d98      0xc    li a5,3
    0x84007d9a      0xe    bgeu a5,a0,ffffffff84007f0a <decodeSchedControl_Configure.isra.0+0x17e>
    0x84007d9e     0x12    ld a5,0(a4)
    0x84007da0     0x14    li a3,22
    0x84007da2     0x16    srli a5,a5,0x3b
    0x84007da4     0x18    bne a5,a3,ffffffff84007f34 <decodeSchedControl_Configure.isra.0+0x1a8>
    0x84007da8     0x1c    addi sp,sp,-112
    0x84007daa     0x1e    sd s4,64(sp)          ; stack access
    0x84007dac     0x20    auipc s4,0x1a
    0x84007db0     0x24    addi s4,s4,-1364 # ffffffff84021858 <ksCurThread>
    0x84007db4     0x28    ld a0,0(s4)
    0x84007db8     0x2c    sd s2,80(sp)          ; stack access
    0x84007dba     0x2e    lui a5,0x6b49d
    0x84007dbe     0x32    ld s2,88(a0)
    0x84007dc2     0x36    slli a5,a5,0x1
    0x84007dc4     0x38    sd ra,104(sp)         ; stack access
    0x84007dc6     0x3a    sd s0,96(sp)          ; stack access
    0x84007dc8     0x3c    sd s1,88(sp)          ; stack access
    0x84007dca     0x3e    sd s3,72(sp)          ; stack access
    0x84007dcc     0x40    sd s5,56(sp)          ; stack access
    0x84007dce     0x42    sd s6,48(sp)          ; stack access
    0x84007dd0     0x44    sd s7,40(sp)          ; stack access
    0x84007dd2     0x46    addi a5,a5,1004 # 6b49d3ec <KERNEL_OFFSET-0xfffffffe94b62c14>
    0x84007dd6     0x4a    addi a3,s2,-20
    0x84007dda     0x4e    bltu a5,a3,ffffffff84007ed0 <decodeSchedControl_Configure.isra.0+0x144>
    0x84007dde     0x52    ld s3,96(a0)
    0x84007de2     0x56    addi a3,s3,-20
    0x84007de6     0x5a    bltu a5,a3,ffffffff84007ed0 <decodeSchedControl_Configure.isra.0+0x144>
    0x84007dea     0x5e    bltu s3,s2,ffffffff84007f18 <decodeSchedControl_Configure.isra.0+0x18c>
    0x84007dee     0x62    ld s0,8(a4)
    0x84007df0     0x64    ld s5,104(a0)
    0x84007df4     0x68    li s1,1
    0x84007df6     0x6a    srli a5,s0,0xa
    0x84007dfa     0x6e    sll a5,s1,a5
    0x84007dfe     0x72    addi a5,a5,-88
    0x84007e02     0x76    addi s5,s5,2
    0x84007e04     0x78    srli a5,a5,0x4
    0x84007e06     0x7a    bltu a5,s5,ffffffff84007f4c <decodeSchedControl_Configure.isra.0+0x1c0>
    0x84007e0a     0x7e    ld a5,280(a0)
    0x84007e0e     0x82    ld s6,112(a0)
    0x84007e12     0x86    srli s0,s0,0x10
    0x84007e14     0x88    andi a5,a5,-16
    0x84007e16     0x8a    ori a5,a5,2
    0x84007e1a     0x8e    sd a5,280(a0)
    0x84007e1e     0x92    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84007e22     0x96    li a5,-1
    0x84007e24     0x98    slli s1,s1,0x26
    0x84007e26     0x9a    srli a4,a5,0x19
    0x84007e2a     0x9e    and s1,s1,s0
    0x84007e2c     0xa0    and s0,s0,a4
    0x84007e2e     0xa2    beqz s1,ffffffff84007e34 <decodeSchedControl_Configure.isra.0+0xa8>
    0x84007e30     0xa4    slli a5,a5,0x27
    0x84007e32     0xa6    or s0,s0,a5
    0x84007e34     0xa8    ld a0,24(s0)
    0x84007e36     0xaa    sd s6,48(s0)
    0x84007e3a     0xae    beqz a0,ffffffff84007e86 <decodeSchedControl_Configure.isra.0+0xfa>
    0x84007e3c     0xb0    ld a5,288(a0)
    0x84007e40     0xb4    andi a4,a5,1
    0x84007e44     0xb8    beqz a4,ffffffff84007e6e <decodeSchedControl_Configure.isra.0+0xe2>
    0x84007e46     0xba    ld a3,400(a0)
    0x84007e4a     0xbe    ld a4,392(a0)
    0x84007e4e     0xc2    beqz a3,ffffffff84007fd0 <decodeSchedControl_Configure.isra.0+0x244>
    0x84007e52     0xc6    sd a4,392(a3)
    0x84007e56     0xca    ld a4,392(a0)
    0x84007e5a     0xce    beqz a4,ffffffff84007e60 <decodeSchedControl_Configure.isra.0+0xd4>
    0x84007e5c     0xd0    sd a3,400(a4)
    0x84007e60     0xd4    andi a5,a5,-2
    0x84007e62     0xd6    sd zero,392(a0)
    0x84007e66     0xda    sd zero,400(a0)
    0x84007e6a     0xde    sd a5,288(a0)
    0x84007e6e     0xe2    srli a5,a5,0x1
    0x84007e70     0xe4    andi a5,a5,1
    0x84007e72     0xe6    bnez a5,ffffffff84007f6c <decodeSchedControl_Configure.isra.0+0x1e0>
    0x84007e74     0xe8    auipc s6,0x1a
    0x84007e78     0xec    addi s6,s6,-1612 # ffffffff84021828 <ksCurSC>
    0x84007e7c     0xf0    ld s1,0(s6)
    0x84007e80     0xf4    beq s1,s0,ffffffff8400806a <decodeSchedControl_Configure.isra.0+0x2de>
    0x84007e84     0xf8    ld a0,24(s0)
    0x84007e86     0xfa    ld a5,64(s0)
    0x84007e88     0xfc    beq s3,s2,ffffffff84007fe4 <decodeSchedControl_Configure.isra.0+0x258>
    0x84007e8c    0x100    beqz a5,ffffffff84007f98 <decodeSchedControl_Configure.isra.0+0x20c>
    0x84007e90    0x104    beqz a0,ffffffff84007fec <decodeSchedControl_Configure.isra.0+0x260>
    0x84007e94    0x108    ld a5,280(a0)
    0x84007e98    0x10c    li a4,1
    0x84007e9a    0x10e    andi a5,a5,15
    0x84007e9c    0x110    addi a5,a5,-1
    0x84007e9e    0x112    bgeu a4,a5,ffffffff84007fbc <decodeSchedControl_Configure.isra.0+0x230>
    0x84007ea2    0x116    auipc a5,0x1a
    0x84007ea6    0x11a    ld a5,-1650(a5) # ffffffff84021830 <ksCurTime>
    0x84007eaa    0x11e    sd s3,0(s0)
    0x84007eae    0x122    sd zero,72(s0)
    0x84007eb2    0x126    sd zero,80(s0)
    0x84007eb6    0x12a    sd s5,64(s0)
    0x84007eba    0x12e    sd s2,96(s0)
    0x84007ebe    0x132    sd a5,88(s0)
    0x84007ec0    0x134    addi a3,s0,88
    0x84007ec4    0x138    beqz s3,ffffffff84008012 <decodeSchedControl_Configure.isra.0+0x286>
    0x84007ec8    0x13c    ld a5,64(s0)
    0x84007eca    0x13e    bnez a5,ffffffff84007f72 <decodeSchedControl_Configure.isra.0+0x1e6>
    0x84007ecc    0x140    li a0,0
    0x84007ece    0x142    j ffffffff84007ef4 <decodeSchedControl_Configure.isra.0+0x168>
    0x84007ed0    0x144    lui a5,0x6b49d
    0x84007ed4    0x148    auipc a4,0x7
    0x84007ed8    0x14c    addi a4,a4,300 # ffffffff8400f000 <riscvKSASIDTable>
    0x84007edc    0x150    li a3,4
    0x84007ede    0x152    slli a5,a5,0x1
    0x84007ee0    0x154    sd a3,1728(a4)
    0x84007ee4    0x158    addi a5,a5,1024 # 6b49d400 <KERNEL_OFFSET-0xfffffffe94b62c00>
    0x84007ee8    0x15c    li a3,20
    0x84007eea    0x15e    sd a3,1696(a4)
    0x84007eee    0x162    sd a5,1704(a4)
    0x84007ef2    0x166    li a0,3
    0x84007ef4    0x168    ld ra,104(sp)         ; stack access
    0x84007ef6    0x16a    ld s0,96(sp)          ; stack access
    0x84007ef8    0x16c    ld s1,88(sp)          ; stack access
    0x84007efa    0x16e    ld s2,80(sp)          ; stack access
    0x84007efc    0x170    ld s3,72(sp)          ; stack access
    0x84007efe    0x172    ld s4,64(sp)          ; stack access
    0x84007f00    0x174    ld s5,56(sp)          ; stack access
    0x84007f02    0x176    ld s6,48(sp)          ; stack access
    0x84007f04    0x178    ld s7,40(sp)          ; stack access
    0x84007f06    0x17a    addi sp,sp,112
    0x84007f08    0x17c    ret
    0x84007f0a    0x17e    li a5,7
    0x84007f0c    0x180    auipc a4,0x7
    0x84007f10    0x184    sd a5,1972(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84007f14    0x188    li a0,3
    0x84007f16    0x18a    ret
    0x84007f18    0x18c    auipc a5,0x7
    0x84007f1c    0x190    addi a5,a5,232 # ffffffff8400f000 <riscvKSASIDTable>
    0x84007f20    0x194    li a4,4
    0x84007f22    0x196    sd a4,1728(a5)
    0x84007f26    0x19a    li a4,20
    0x84007f28    0x19c    sd a4,1696(a5)
    0x84007f2c    0x1a0    sd s3,1704(a5)
    0x84007f30    0x1a4    li a0,3
    0x84007f32    0x1a6    j ffffffff84007ef4 <decodeSchedControl_Configure.isra.0+0x168>
    0x84007f34    0x1a8    auipc a5,0x7
    0x84007f38    0x1ac    addi a5,a5,204 # ffffffff8400f000 <riscvKSASIDTable>
    0x84007f3c    0x1b0    li a4,2
    0x84007f3e    0x1b2    sd a4,1728(a5)
    0x84007f42    0x1b6    li a4,1
    0x84007f44    0x1b8    sd a4,1688(a5)
    0x84007f48    0x1bc    li a0,3
    0x84007f4a    0x1be    ret
    0x84007f4c    0x1c0    auipc a4,0x7
    0x84007f50    0x1c4    addi a4,a4,180 # ffffffff8400f000 <riscvKSASIDTable>
    0x84007f54    0x1c8    li a3,4
    0x84007f56    0x1ca    addi a5,a5,-2
    0x84007f58    0x1cc    sd a3,1728(a4)
    0x84007f5c    0x1d0    sd a5,1704(a4)
    0x84007f60    0x1d4    auipc a3,0x7
    0x84007f64    0x1d8    sd zero,1856(a3) # ffffffff8400f6a0 <current_syscall_error+0x10>
    0x84007f68    0x1dc    li a0,3
    0x84007f6a    0x1de    j ffffffff84007ef4 <decodeSchedControl_Configure.isra.0+0x168>
    0x84007f6c    0x1e0    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84007f70    0x1e4    j ffffffff84007e74 <decodeSchedControl_Configure.isra.0+0xe8>
    0x84007f72    0x1e6    mv a0,s0
    0x84007f74    0x1e8    jal ra,ffffffff84007cca <schedContext_resume>
    0x84007f78    0x1ec    ld a0,24(s0)
    0x84007f7a    0x1ee    li a4,1
    0x84007f7c    0x1f0    ld a5,280(a0)
    0x84007f80    0x1f4    andi a5,a5,15
    0x84007f82    0x1f6    addi a5,a5,-1
    0x84007f84    0x1f8    bgeu a4,a5,ffffffff8400805a <decodeSchedControl_Configure.isra.0+0x2ce>
    0x84007f88    0x1fc    ld a5,0(s4)
    0x84007f8c    0x200    bne a5,a0,ffffffff84007ecc <decodeSchedControl_Configure.isra.0+0x140>
    0x84007f90    0x204    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x84007f94    0x208    li a0,0
    0x84007f96    0x20a    j ffffffff84007ef4 <decodeSchedControl_Configure.isra.0+0x168>
    0x84007f98    0x20c    auipc a5,0x1a
    0x84007f9c    0x210    ld a5,-1896(a5) # ffffffff84021830 <ksCurTime>
    0x84007fa0    0x214    sd zero,72(s0)
    0x84007fa4    0x218    sd s3,0(s0)
    0x84007fa8    0x21c    sd zero,80(s0)
    0x84007fac    0x220    sd s5,64(s0)
    0x84007fb0    0x224    sd s2,96(s0)
    0x84007fb4    0x228    sd a5,88(s0)
    0x84007fb6    0x22a    bnez a0,ffffffff84007ec8 <decodeSchedControl_Configure.isra.0+0x13c>
    0x84007fb8    0x22c    li a0,0
    0x84007fba    0x22e    j ffffffff84007ef4 <decodeSchedControl_Configure.isra.0+0x168>
    0x84007fbc    0x230    mv a0,s0
    0x84007fbe    0x232    mv a3,s5
    0x84007fc0    0x234    mv a2,s2
    0x84007fc2    0x236    mv a1,s3
    0x84007fc4    0x238    jal ra,ffffffff8400478a <refill_update>
    0x84007fc8    0x23c    ld a0,24(s0)
    0x84007fca    0x23e    bnez a0,ffffffff84007ec8 <decodeSchedControl_Configure.isra.0+0x13c>
    0x84007fce    0x242    j ffffffff84007fb8 <decodeSchedControl_Configure.isra.0+0x22c>
    0x84007fd0    0x244    auipc a2,0x1a
    0x84007fd4    0x248    sd a4,-1904(a2) # ffffffff84021860 <ksReleaseHead>
    0x84007fd8    0x24c    li a2,1
    0x84007fda    0x24e    auipc a1,0x1a
    0x84007fde    0x252    sd a2,-1954(a1) # ffffffff84021838 <ksReprogram>
    0x84007fe2    0x256    j ffffffff84007e5a <decodeSchedControl_Configure.isra.0+0xce>
    0x84007fe4    0x258    beqz a5,ffffffff84008036 <decodeSchedControl_Configure.isra.0+0x2aa>
    0x84007fe6    0x25a    li s5,2
    0x84007fe8    0x25c    li s3,0
    0x84007fea    0x25e    j ffffffff84007e90 <decodeSchedControl_Configure.isra.0+0x104>
    0x84007fec    0x260    auipc a5,0x1a
    0x84007ff0    0x264    ld a5,-1980(a5) # ffffffff84021830 <ksCurTime>
    0x84007ff4    0x268    sd s3,0(s0)
    0x84007ff8    0x26c    sd zero,72(s0)
    0x84007ffc    0x270    sd zero,80(s0)
    0x84008000    0x274    sd s5,64(s0)
    0x84008004    0x278    sd s2,96(s0)
    0x84008008    0x27c    sd a5,88(s0)
    0x8400800a    0x27e    addi a3,s0,88
    0x8400800e    0x282    bnez s3,ffffffff84007ecc <decodeSchedControl_Configure.isra.0+0x140>
    0x84008012    0x286    addi s5,s5,-1
    0x84008014    0x288    snez s5,s5
    0x84008018    0x28c    slli a4,s5,0x4
    0x8400801c    0x290    sd s5,80(s0)
    0x84008020    0x294    add a4,a4,a3
    0x84008022    0x296    sd zero,8(sp)         ; stack access
    0x84008024    0x298    sd a5,0(sp)           ; stack access
    0x84008026    0x29a    sd a5,16(sp)          ; stack access
    0x84008028    0x29c    sd zero,24(sp)        ; stack access
    0x8400802a    0x29e    sd a5,0(a4)
    0x8400802c    0x2a0    sd zero,8(a4)
    0x84008030    0x2a4    bnez a0,ffffffff84007ec8 <decodeSchedControl_Configure.isra.0+0x13c>
    0x84008034    0x2a8    j ffffffff84007fb8 <decodeSchedControl_Configure.isra.0+0x22c>
    0x84008036    0x2aa    li a5,2
    0x84008038    0x2ac    sd a5,64(s0)
    0x8400803a    0x2ae    auipc a5,0x19
    0x8400803e    0x2b2    ld a5,2038(a5) # ffffffff84021830 <ksCurTime>
    0x84008042    0x2b6    sd zero,0(s0)
    0x84008046    0x2ba    sd zero,72(s0)
    0x8400804a    0x2be    sd s3,96(s0)
    0x8400804e    0x2c2    addi a3,s0,88
    0x84008052    0x2c6    sd a5,88(s0)
    0x84008054    0x2c8    li s5,1
    0x84008056    0x2ca    li a4,16
    0x84008058    0x2cc    j ffffffff8400801c <decodeSchedControl_Configure.isra.0+0x290>
    0x8400805a    0x2ce    ld a5,0(s4)
    0x8400805e    0x2d2    beq a0,a5,ffffffff84007f90 <decodeSchedControl_Configure.isra.0+0x204>
    0x84008062    0x2d6    jal ra,ffffffff84004ca6 <possibleSwitchTo>
    0x84008066    0x2da    ld a0,24(s0)
    0x84008068    0x2dc    j ffffffff84007f88 <decodeSchedControl_Configure.isra.0+0x1fc>
    0x8400806a    0x2de    ld a5,64(s0)
    0x8400806c    0x2e0    auipc s7,0x19
    0x84008070    0x2e4    addi s7,s7,2004 # ffffffff84021840 <ksConsumed>
    0x84008074    0x2e8    ld a0,0(s7)
    0x84008078    0x2ec    beqz a5,ffffffff840080a6 <decodeSchedControl_Configure.isra.0+0x31a>
    0x8400807a    0x2ee    beqz a0,ffffffff840080d6 <decodeSchedControl_Configure.isra.0+0x34a>
    0x8400807c    0x2f0    ld a5,0(s0)
    0x8400807e    0x2f2    bnez a5,ffffffff840080c8 <decodeSchedControl_Configure.isra.0+0x33c>
    0x84008080    0x2f4    ld a4,72(s0)
    0x84008082    0x2f6    addi a3,s0,88
    0x84008086    0x2fa    ld a5,80(s0)
    0x84008088    0x2fc    slli a4,a4,0x4
    0x8400808a    0x2fe    add a4,a4,a3
    0x8400808c    0x300    ld a2,8(a4)
    0x8400808e    0x302    slli a5,a5,0x4
    0x84008090    0x304    add a5,a5,a3
    0x84008092    0x306    sub a3,a2,a0
    0x84008096    0x30a    sd a3,8(a4)
    0x84008098    0x30c    ld a3,8(a5)
    0x8400809a    0x30e    mv a4,s0
    0x8400809c    0x310    add a3,a3,a0
    0x8400809e    0x312    sd a3,8(a5)
    0x840080a0    0x314    ld a5,8(a4)
    0x840080a2    0x316    add a5,a5,a0
    0x840080a4    0x318    sd a5,8(a4)
    0x840080a6    0x31a    auipc a5,0x19
    0x840080aa    0x31e    addi a5,a5,1898 # ffffffff84021810 <ksDomainTime>
    0x840080ae    0x322    ld a3,0(a5)
    0x840080b0    0x324    li a4,0
    0x840080b2    0x326    bgeu a0,a3,ffffffff840080ba <decodeSchedControl_Configure.isra.0+0x32e>
    0x840080b6    0x32a    sub a4,a3,a0
    0x840080ba    0x32e    sd a4,0(a5)
    0x840080bc    0x330    ld a0,24(s1)
    0x840080be    0x332    auipc a5,0x19
    0x840080c2    0x336    sd zero,1922(a5) # ffffffff84021840 <ksConsumed>
    0x840080c6    0x33a    j ffffffff84007e86 <decodeSchedControl_Configure.isra.0+0xfa>
    0x840080c8    0x33c    jal ra,ffffffff8400480a <refill_split_check>
    0x840080cc    0x340    ld a4,0(s6)
    0x840080d0    0x344    ld a0,0(s7)
    0x840080d4    0x348    j ffffffff840080a0 <decodeSchedControl_Configure.isra.0+0x314>
    0x840080d6    0x34a    mv a4,s0
    0x840080d8    0x34c    j ffffffff840080a0 <decodeSchedControl_Configure.isra.0+0x314>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
284 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSchedControl_Configure_isra_0` has 473 nodes.

Section doReplyTransfer (287 of 296)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 117 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `doReplyTransfer`:

    0x84009bba      0x0    addi sp,sp,-48
    0x84009bbc      0x2    sd s0,32(sp)          ; stack access
    0x84009bbe      0x4    ld s0,0(a1)
    0x84009bc0      0x6    sd ra,40(sp)          ; stack access
    0x84009bc2      0x8    sd s1,24(sp)          ; stack access
    0x84009bc4      0xa    sd s2,16(sp)          ; stack access
    0x84009bc6      0xc    sd s3,8(sp)           ; stack access
    0x84009bc8      0xe    beqz s0,ffffffff84009bd6 <doReplyTransfer+0x1c>
    0x84009bca     0x10    ld a4,280(s0)
    0x84009bce     0x14    li a3,5
    0x84009bd0     0x16    andi a4,a4,15
    0x84009bd2     0x18    beq a4,a3,ffffffff84009be4 <doReplyTransfer+0x2a>
    0x84009bd6     0x1c    ld ra,40(sp)          ; stack access
    0x84009bd8     0x1e    ld s0,32(sp)          ; stack access
    0x84009bda     0x20    ld s1,24(sp)          ; stack access
    0x84009bdc     0x22    ld s2,16(sp)          ; stack access
    0x84009bde     0x24    ld s3,8(sp)           ; stack access
    0x84009be0     0x26    addi sp,sp,48
    0x84009be2     0x28    ret
    0x84009be4     0x2a    mv a5,a1
    0x84009be6     0x2c    mv s1,a0
    0x84009be8     0x2e    mv a1,s0
    0x84009bea     0x30    mv a0,a5
    0x84009bec     0x32    mv s2,a2
    0x84009bee     0x34    jal ra,ffffffff84007464 <reply_remove>
    0x84009bf2     0x38    ld s3,312(s0)
    0x84009bf6     0x3c    andi s3,s3,15
    0x84009bfa     0x40    bnez s3,ffffffff84009cc0 <doReplyTransfer+0x106>
    0x84009bfe     0x44    mv a0,s1
    0x84009c00     0x46    mv a4,s0
    0x84009c02     0x48    mv a3,s2
    0x84009c04     0x4a    li a2,0
    0x84009c06     0x4c    li a1,0
    0x84009c08     0x4e    jal ra,ffffffff84008cc4 <doIPCTransfer>
    0x84009c0c     0x52    ld a5,280(s0)
    0x84009c10     0x56    mv a0,s0
    0x84009c12     0x58    andi a5,a5,-16
    0x84009c14     0x5a    ori a5,a5,1
    0x84009c18     0x5e    sd a5,280(s0)
    0x84009c1c     0x62    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009c20     0x66    ld s1,368(s0)
    0x84009c24     0x6a    beqz s1,ffffffff84009bd6 <doReplyTransfer+0x1c>
    0x84009c26     0x6c    ld a5,280(s0)
    0x84009c2a     0x70    li a4,1
    0x84009c2c     0x72    andi a5,a5,15
    0x84009c2e     0x74    addi a5,a5,-1
    0x84009c30     0x76    bltu a4,a5,ffffffff84009bd6 <doReplyTransfer+0x1c>
    0x84009c34     0x7a    ld a4,72(s1)
    0x84009c36     0x7c    addi a5,s1,88
    0x84009c3a     0x80    slli a4,a4,0x4
    0x84009c3c     0x82    add a5,a5,a4
    0x84009c3e     0x84    ld a3,0(a5)
    0x84009c40     0x86    auipc a4,0x18
    0x84009c44     0x8a    ld a4,-1040(a4) # ffffffff84021830 <ksCurTime>
    0x84009c48     0x8e    addi a4,a4,10
    0x84009c4a     0x90    bltu a4,a3,ffffffff84009c68 <doReplyTransfer+0xae>
    0x84009c4e     0x94    ld a4,8(a5)
    0x84009c50     0x96    li a5,19
    0x84009c52     0x98    bgeu a5,a4,ffffffff84009c68 <doReplyTransfer+0xae>
    0x84009c56     0x9c    mv a0,s0
    0x84009c58     0x9e    ld s0,32(sp)          ; stack access
    0x84009c5a     0xa0    ld ra,40(sp)          ; stack access
    0x84009c5c     0xa2    ld s1,24(sp)          ; stack access
    0x84009c5e     0xa4    ld s2,16(sp)          ; stack access
    0x84009c60     0xa6    ld s3,8(sp)           ; stack access
    0x84009c62     0xa8    addi sp,sp,48
    0x84009c64     0xaa    j ffffffff84004ca6 <possibleSwitchTo>
    0x84009c68     0xae    andi a5,s0,-1024
    0x84009c6c     0xb2    ld a5,128(a5)
    0x84009c6e     0xb4    li a4,4
    0x84009c70     0xb6    srli a5,a5,0x3b
    0x84009c72     0xb8    bne a5,a4,ffffffff84009c9e <doReplyTransfer+0xe4>
    0x84009c76     0xbc    li a5,5
    0x84009c78     0xbe    beq s3,a5,ffffffff84009c9e <doReplyTransfer+0xe4>
    0x84009c7c     0xc2    ld a3,48(s1)
    0x84009c7e     0xc4    mv a0,s0
    0x84009c80     0xc6    ld s0,32(sp)          ; stack access
    0x84009c82     0xc8    ld ra,40(sp)          ; stack access
    0x84009c84     0xca    ld s1,24(sp)          ; stack access
    0x84009c86     0xcc    ld s2,16(sp)          ; stack access
    0x84009c88     0xce    ld s3,8(sp)           ; stack access
    0x84009c8a     0xd0    auipc a4,0x6
    0x84009c8e     0xd4    addi a4,a4,886 # ffffffff84010000 <intStateIRQNode>
    0x84009c92     0xd8    sd a5,-1920(a4)
    0x84009c96     0xdc    sd a3,-1912(a4)
    0x84009c9a     0xe0    addi sp,sp,48
    0x84009c9c     0xe2    j ffffffff84009aca <handleTimeout>
    0x84009c9e     0xe4    ld a0,24(s1)
    0x84009ca0     0xe6    ld a5,288(a0)
    0x84009ca4     0xea    srli a5,a5,0x1
    0x84009ca6     0xec    andi a5,a5,1
    0x84009ca8     0xee    beqz a5,ffffffff84009cb0 <doReplyTransfer+0xf6>
    0x84009caa     0xf0    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x84009cae     0xf4    ld a0,24(s1)
    0x84009cb0     0xf6    jal ra,ffffffff84007bb2 <tcbReleaseEnqueue>
    0x84009cb4     0xfa    li a5,1
    0x84009cb6     0xfc    auipc a4,0x18
    0x84009cba    0x100    sd a5,-1150(a4) # ffffffff84021838 <ksReprogram>
    0x84009cbe    0x104    j ffffffff84009bd6 <doReplyTransfer+0x1c>
    0x84009cc0    0x106    mv a1,s1
    0x84009cc2    0x108    mv a0,s0
    0x84009cc4    0x10a    jal ra,ffffffff840038d2 <handleFaultReply>
    0x84009cc8    0x10e    sd zero,312(s0)
    0x84009ccc    0x112    sd zero,320(s0)
    0x84009cd0    0x116    ld a5,280(s0)
    0x84009cd4    0x11a    beqz a0,ffffffff84009ce8 <doReplyTransfer+0x12e>
    0x84009cd6    0x11c    andi a5,a5,-16
    0x84009cd8    0x11e    ori a5,a5,2
    0x84009cdc    0x122    mv a0,s0
    0x84009cde    0x124    sd a5,280(s0)
    0x84009ce2    0x128    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009ce6    0x12c    j ffffffff84009c20 <doReplyTransfer+0x66>
    0x84009ce8    0x12e    andi a5,a5,-16
    0x84009cea    0x130    mv a0,s0
    0x84009cec    0x132    sd a5,280(s0)
    0x84009cf0    0x136    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009cf4    0x13a    j ffffffff84009c20 <doReplyTransfer+0x66>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
117 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 194 nodes.

Section decodeSchedContextInvocation (288 of 296)
=================================================

Deriving specifications
-----------------------

Section `decodeSchedContextInvocation` consists of 307 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `decodeSchedContextInvocation`:

    0x84008688      0x0    addi sp,sp,-48
    0x8400868a      0x2    sd s0,32(sp)          ; stack access
    0x8400868c      0x4    srli s0,a2,0x10
    0x84008690      0x8    srli a4,s0,0x26
    0x84008694      0xc    li a5,-1
    0x84008696      0xe    srli a3,a5,0x19
    0x8400869a     0x12    sd ra,40(sp)          ; stack access
    0x8400869c     0x14    sd s1,24(sp)          ; stack access
    0x8400869e     0x16    sd a1,0(sp)           ; stack access
    0x840086a0     0x18    sd a2,8(sp)           ; stack access
    0x840086a2     0x1a    andi a4,a4,1
    0x840086a4     0x1c    and s0,s0,a3
    0x840086a6     0x1e    beqz a4,ffffffff840086ac <decodeSchedContextInvocation+0x24>
    0x840086a8     0x20    slli a5,a5,0x27
    0x840086aa     0x22    or s0,s0,a5
    0x840086ac     0x24    addi a0,a0,-31
    0x840086ae     0x26    li a5,4
    0x840086b0     0x28    bltu a5,a0,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x840086b4     0x2c    auipc a4,0x5
    0x840086b8     0x30    addi a4,a4,1512 # ffffffff8400dc9c <msgRegisters+0x554>
    0x840086bc     0x34    slli a0,a0,0x2
    0x840086be     0x36    add a0,a0,a4
    0x840086c0     0x38    lw a5,0(a0)
    0x840086c2     0x3a    add a5,a5,a4
    0x840086c4     0x3c    jr a5
    0x840086c6     0x3e    mv s1,a5
    0x840086c8     0x40    ld a5,32(a5)
    0x840086ca     0x42    and a5,a5,a3
    0x840086cc     0x44    beqz a5,ffffffff84008912 <decodeSchedContextInvocation+0x28a>
    0x840086d0     0x48    li a5,3
    0x840086d2     0x4a    auipc a4,0x7
    0x840086d6     0x4e    sd a5,-18(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840086da     0x52    li s0,3
    0x840086dc     0x54    ld ra,40(sp)          ; stack access
    0x840086de     0x56    mv a0,s0
    0x840086e0     0x58    ld s0,32(sp)          ; stack access
    0x840086e2     0x5a    ld s1,24(sp)          ; stack access
    0x840086e4     0x5c    addi sp,sp,48
    0x840086e6     0x5e    ret
    0x840086e8     0x60    auipc s1,0x19
    0x840086ec     0x64    addi s1,s1,368 # ffffffff84021858 <ksCurThread>
    0x840086f0     0x68    ld a0,0(s1)
    0x840086f2     0x6a    ld a5,280(a0)
    0x840086f6     0x6e    andi a5,a5,-16
    0x840086f8     0x70    ori a5,a5,2
    0x840086fc     0x74    sd a5,280(a0)
    0x84008700     0x78    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008704     0x7c    ld a4,8(s0)
    0x84008706     0x7e    ld a5,0(s1)
    0x84008708     0x80    sd zero,8(s0)
    0x8400870c     0x84    li s0,0
    0x8400870e     0x86    ld ra,40(sp)
    0x84008710     0x88    mv a0,s0
    0x84008712     0x8a    ld s0,32(sp)
    0x84008714     0x8c    sd a4,88(a5)
    0x84008716     0x8e    li a4,1
    0x84008718     0x90    sd a4,80(a5)
    0x8400871a     0x92    ld s1,24(sp)
    0x8400871c     0x94    addi sp,sp,48
    0x8400871e     0x96    ret
    0x84008720     0x98    auipc s1,0x19
    0x84008724     0x9c    addi s1,s1,312 # ffffffff84021858 <ksCurThread>
    0x84008728     0xa0    ld a5,24(s0)
    0x8400872a     0xa2    ld a0,0(s1)
    0x8400872c     0xa4    beq a5,a0,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x84008730     0xa8    beqz a5,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x84008732     0xaa    ld a4,360(a5)
    0x84008736     0xae    ld a5,352(a0)
    0x8400873a     0xb2    bltu a5,a4,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x8400873e     0xb6    ld a5,280(a0)
    0x84008742     0xba    andi a5,a5,-16
    0x84008744     0xbc    ori a5,a5,2
    0x84008748     0xc0    sd a5,280(a0)
    0x8400874c     0xc4    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008750     0xc8    ld a0,56(s0)
    0x84008752     0xca    beqz a0,ffffffff84008758 <decodeSchedContextInvocation+0xd0>
    0x84008754     0xcc    jal ra,ffffffff84007548 <schedContext_completeYieldTo>
    0x84008758     0xd0    mv a0,s0
    0x8400875a     0xd2    jal ra,ffffffff84007cca <schedContext_resume>
    0x8400875e     0xd6    ld a0,24(s0)
    0x84008760     0xd8    li a4,1
    0x84008762     0xda    ld a5,280(a0)
    0x84008766     0xde    andi a5,a5,15
    0x84008768     0xe0    addi a5,a5,-1
    0x8400876a     0xe2    bltu a4,a5,ffffffff84008704 <decodeSchedContextInvocation+0x7c>
    0x8400876e     0xe6    ld a5,368(a0)
    0x84008772     0xea    beqz a5,ffffffff84008704 <decodeSchedContextInvocation+0x7c>
    0x84008774     0xec    ld a5,64(a5)
    0x84008776     0xee    beqz a5,ffffffff84008704 <decodeSchedContextInvocation+0x7c>
    0x84008778     0xf0    ld a5,288(a0)
    0x8400877c     0xf4    andi a4,a5,1
    0x84008780     0xf8    bnez a4,ffffffff84008704 <decodeSchedContextInvocation+0x7c>
    0x84008782     0xfa    ld a4,0(s0)
    0x84008784     0xfc    beqz a4,ffffffff84008792 <decodeSchedContextInvocation+0x10a>
    0x84008786     0xfe    mv a0,s0
    0x84008788    0x100    jal ra,ffffffff840033a2 <refill_unblock_check.part.0>
    0x8400878c    0x104    ld a0,24(s0)
    0x8400878e    0x106    ld a5,288(a0)
    0x84008792    0x10a    ld a4,0(s1)
    0x84008794    0x10c    ld a2,360(a0)
    0x84008798    0x110    srli a5,a5,0x1
    0x8400879a    0x112    ld a3,360(a4)
    0x8400879e    0x116    andi a5,a5,1
    0x840087a0    0x118    bgeu a2,a3,ffffffff840089a2 <decodeSchedContextInvocation+0x31a>
    0x840087a4    0x11c    beqz a5,ffffffff840087b6 <decodeSchedContextInvocation+0x12e>
    0x840087a6    0x11e    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x840087aa    0x122    ld a0,24(s0)
    0x840087ac    0x124    ld a5,288(a0)
    0x840087b0    0x128    srli a5,a5,0x1
    0x840087b2    0x12a    andi a5,a5,1
    0x840087b4    0x12c    bnez a5,ffffffff84008704 <decodeSchedContextInvocation+0x7c>
    0x840087b6    0x12e    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x840087ba    0x132    j ffffffff84008704 <decodeSchedContextInvocation+0x7c>
    0x840087bc    0x134    auipc a5,0x7
    0x840087c0    0x138    ld a5,580(a5) # ffffffff8400fa00 <current_extra_caps>
    0x840087c4    0x13c    beqz a5,ffffffff84008994 <decodeSchedContextInvocation+0x30c>
    0x840087c8    0x140    ld a4,24(s0)
    0x840087ca    0x142    bnez a4,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x840087ce    0x146    ld a4,40(s0)
    0x840087d0    0x148    bnez a4,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x840087d4    0x14c    ld a5,0(a5)
    0x840087d6    0x14e    li a3,6
    0x840087d8    0x150    srli a4,a5,0x3b
    0x840087dc    0x154    beq a4,a3,ffffffff840088f4 <decodeSchedContextInvocation+0x26c>
    0x840087e0    0x158    li a3,12
    0x840087e2    0x15a    bne a4,a3,ffffffff840088dc <decodeSchedContextInvocation+0x254>
    0x840087e6    0x15e    srli a3,a5,0x26
    0x840087ea    0x162    li a4,-1
    0x840087ec    0x164    srli s1,a4,0x19
    0x840087f0    0x168    andi a3,a3,1
    0x840087f2    0x16a    and a5,a5,s1
    0x840087f4    0x16c    beqz a3,ffffffff840089e4 <decodeSchedContextInvocation+0x35c>
    0x840087f8    0x170    slli s1,a4,0x27
    0x840087fc    0x174    or s1,s1,a5
    0x840087fe    0x176    ld a5,368(s1)
    0x84008802    0x17a    bnez a5,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x84008806    0x17e    auipc a0,0x19
    0x8400880a    0x182    ld a0,82(a0) # ffffffff84021858 <ksCurThread>
    0x8400880e    0x186    ld a5,280(a0)
    0x84008812    0x18a    andi a5,a5,-16
    0x84008814    0x18c    ori a5,a5,2
    0x84008818    0x190    sd a5,280(a0)
    0x8400881c    0x194    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008820    0x198    mv a0,s0
    0x84008822    0x19a    mv a1,s1
    0x84008824    0x19c    jal ra,ffffffff84008616 <schedContext_bindTCB>
    0x84008828    0x1a0    li s0,0
    0x8400882a    0x1a2    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x8400882c    0x1a4    ld a5,24(s0)
    0x8400882e    0x1a6    auipc a0,0x19
    0x84008832    0x1aa    ld a0,42(a0) # ffffffff84021858 <ksCurThread>
    0x84008836    0x1ae    beq a5,a0,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x8400883a    0x1b2    ld a5,280(a0)
    0x8400883e    0x1b6    andi a5,a5,-16
    0x84008840    0x1b8    ori a5,a5,2
    0x84008844    0x1bc    sd a5,280(a0)
    0x84008848    0x1c0    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400884c    0x1c4    ld a1,24(s0)
    0x8400884e    0x1c6    beqz a1,ffffffff84008856 <decodeSchedContextInvocation+0x1ce>
    0x84008850    0x1c8    mv a0,s0
    0x84008852    0x1ca    jal ra,ffffffff840071a0 <schedContext_unbindTCB>
    0x84008856    0x1ce    beqz s0,ffffffff84008868 <decodeSchedContextInvocation+0x1e0>
    0x84008858    0x1d0    ld a4,40(s0)
    0x8400885a    0x1d2    beqz a4,ffffffff84008868 <decodeSchedContextInvocation+0x1e0>
    0x8400885c    0x1d4    ld a5,32(a4)
    0x8400885e    0x1d6    srli a5,a5,0x27
    0x84008860    0x1d8    slli a5,a5,0x27
    0x84008862    0x1da    sd a5,32(a4)
    0x84008864    0x1dc    sd zero,40(s0)
    0x84008868    0x1e0    ld a5,32(s0)
    0x8400886a    0x1e2    beqz a5,ffffffff84008990 <decodeSchedContextInvocation+0x308>
    0x8400886e    0x1e6    sd zero,16(a5)
    0x84008872    0x1ea    sd zero,32(s0)
    0x84008876    0x1ee    li s0,0
    0x84008878    0x1f0    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x8400887a    0x1f2    auipc a5,0x7
    0x8400887e    0x1f6    ld a5,390(a5) # ffffffff8400fa00 <current_extra_caps>
    0x84008882    0x1fa    beqz a5,ffffffff84008994 <decodeSchedContextInvocation+0x30c>
    0x84008886    0x1fe    ld a5,0(a5)
    0x84008888    0x200    li a3,6
    0x8400888a    0x202    srli a4,a5,0x3b
    0x8400888e    0x206    beq a4,a3,ffffffff84008944 <decodeSchedContextInvocation+0x2bc>
    0x84008892    0x20a    li a3,12
    0x84008894    0x20c    bne a4,a3,ffffffff840088dc <decodeSchedContextInvocation+0x254>
    0x84008898    0x210    srli a3,a5,0x26
    0x8400889c    0x214    li a4,-1
    0x8400889e    0x216    srli a1,a4,0x19
    0x840088a2    0x21a    andi a3,a3,1
    0x840088a4    0x21c    ld a2,24(s0)
    0x840088a6    0x21e    and a5,a5,a1
    0x840088a8    0x220    beqz a3,ffffffff840088ae <decodeSchedContextInvocation+0x226>
    0x840088aa    0x222    slli a4,a4,0x27
    0x840088ac    0x224    or a5,a5,a4
    0x840088ae    0x226    bne a2,a5,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x840088b2    0x22a    auipc a0,0x19
    0x840088b6    0x22e    ld a0,-90(a0) # ffffffff84021858 <ksCurThread>
    0x840088ba    0x232    beq a2,a0,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x840088be    0x236    ld a5,280(a0)
    0x840088c2    0x23a    andi a5,a5,-16
    0x840088c4    0x23c    ori a5,a5,2
    0x840088c8    0x240    sd a5,280(a0)
    0x840088cc    0x244    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840088d0    0x248    ld a1,24(s0)
    0x840088d2    0x24a    mv a0,s0
    0x840088d4    0x24c    li s0,0
    0x840088d6    0x24e    jal ra,ffffffff840071a0 <schedContext_unbindTCB>
    0x840088da    0x252    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x840088dc    0x254    auipc a5,0x6
    0x840088e0    0x258    addi a5,a5,1828 # ffffffff8400f000 <riscvKSASIDTable>
    0x840088e4    0x25c    li a4,2
    0x840088e6    0x25e    sd a4,1728(a5)
    0x840088ea    0x262    li a4,1
    0x840088ec    0x264    sd a4,1688(a5)
    0x840088f0    0x268    li s0,3
    0x840088f2    0x26a    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x840088f4    0x26c    srli a4,a5,0x26
    0x840088f8    0x270    li s1,-1
    0x840088fa    0x272    srli a3,s1,0x19
    0x840088fe    0x276    andi a4,a4,1
    0x84008900    0x278    and a5,a5,a3
    0x84008902    0x27a    beqz a4,ffffffff840086c6 <decodeSchedContextInvocation+0x3e>
    0x84008906    0x27e    slli s1,s1,0x27
    0x84008908    0x280    or s1,s1,a5
    0x8400890a    0x282    ld a5,32(s1)
    0x8400890c    0x284    and a5,a5,a3
    0x8400890e    0x286    bnez a5,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x84008912    0x28a    auipc a0,0x19
    0x84008916    0x28e    ld a0,-186(a0) # ffffffff84021858 <ksCurThread>
    0x8400891a    0x292    ld a5,280(a0)
    0x8400891e    0x296    andi a5,a5,-16
    0x84008920    0x298    ori a5,a5,2
    0x84008924    0x29c    sd a5,280(a0)
    0x84008928    0x2a0    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400892c    0x2a4    ld a4,32(s1)
    0x8400892e    0x2a6    li a5,-1
    0x84008930    0x2a8    slli a3,a5,0x27
    0x84008934    0x2ac    srli a5,a5,0x19
    0x84008936    0x2ae    and a5,a5,s0
    0x84008938    0x2b0    and a4,a4,a3
    0x8400893a    0x2b2    or a5,a5,a4
    0x8400893c    0x2b4    sd a5,32(s1)
    0x8400893e    0x2b6    sd s1,40(s0)
    0x84008940    0x2b8    li s0,0
    0x84008942    0x2ba    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x84008944    0x2bc    srli a3,a5,0x26
    0x84008948    0x2c0    li a4,-1
    0x8400894a    0x2c2    srli a1,a4,0x19
    0x8400894e    0x2c6    andi a3,a3,1
    0x84008950    0x2c8    ld a2,40(s0)
    0x84008952    0x2ca    and a5,a5,a1
    0x84008954    0x2cc    beqz a3,ffffffff8400895a <decodeSchedContextInvocation+0x2d2>
    0x84008956    0x2ce    slli a4,a4,0x27
    0x84008958    0x2d0    or a5,a5,a4
    0x8400895a    0x2d2    bne a2,a5,ffffffff840086d0 <decodeSchedContextInvocation+0x48>
    0x8400895e    0x2d6    auipc a0,0x19
    0x84008962    0x2da    ld a0,-262(a0) # ffffffff84021858 <ksCurThread>
    0x84008966    0x2de    ld a5,280(a0)
    0x8400896a    0x2e2    andi a5,a5,-16
    0x8400896c    0x2e4    ori a5,a5,2
    0x84008970    0x2e8    sd a5,280(a0)
    0x84008974    0x2ec    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84008978    0x2f0    beqz s0,ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x8400897c    0x2f4    ld a4,40(s0)
    0x8400897e    0x2f6    beqz a4,ffffffff84008990 <decodeSchedContextInvocation+0x308>
    0x84008980    0x2f8    ld a5,32(a4)
    0x84008982    0x2fa    srli a5,a5,0x27
    0x84008984    0x2fc    slli a5,a5,0x27
    0x84008986    0x2fe    sd a5,32(a4)
    0x84008988    0x300    sd zero,40(s0)
    0x8400898c    0x304    li s0,0
    0x8400898e    0x306    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x84008990    0x308    li s0,0
    0x84008992    0x30a    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x84008994    0x30c    li a5,7
    0x84008996    0x30e    auipc a4,0x7
    0x8400899a    0x312    sd a5,-726(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400899e    0x316    li s0,3
    0x840089a0    0x318    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x840089a2    0x31a    sd s0,376(a4)
    0x840089a6    0x31e    sd a4,56(s0)
    0x840089a8    0x320    beqz a5,ffffffff840089d4 <decodeSchedContextInvocation+0x34c>
    0x840089aa    0x322    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x840089ae    0x326    ld a4,0(s1)
    0x840089b0    0x328    ld a5,288(a4)
    0x840089b4    0x32c    srli a5,a5,0x1
    0x840089b6    0x32e    andi a5,a5,1
    0x840089b8    0x330    bnez a5,ffffffff840089c0 <decodeSchedContextInvocation+0x338>
    0x840089ba    0x332    mv a0,a4
    0x840089bc    0x334    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x840089c0    0x338    ld a0,24(s0)
    0x840089c2    0x33a    ld a5,288(a0)
    0x840089c6    0x33e    srli a5,a5,0x1
    0x840089c8    0x340    andi a5,a5,1
    0x840089ca    0x342    beqz a5,ffffffff840089de <decodeSchedContextInvocation+0x356>
    0x840089cc    0x344    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x840089d0    0x348    li s0,0
    0x840089d2    0x34a    j ffffffff840086dc <decodeSchedContextInvocation+0x54>
    0x840089d4    0x34c    ld a5,288(a4)
    0x840089d8    0x350    srli a5,a5,0x1
    0x840089da    0x352    andi a5,a5,1
    0x840089dc    0x354    beqz a5,ffffffff840089ba <decodeSchedContextInvocation+0x332>
    0x840089de    0x356    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x840089e2    0x35a    j ffffffff840089cc <decodeSchedContextInvocation+0x344>
    0x840089e4    0x35c    mv s1,a5
    0x840089e6    0x35e    ld a5,368(a5)
    0x840089ea    0x362    beqz a5,ffffffff84008806 <decodeSchedContextInvocation+0x17e>
    0x840089ee    0x366    j ffffffff840086d0 <decodeSchedContextInvocation+0x48>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
307 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSchedContextInvocation` has 512 nodes.

Section handleSyscall (289 of 296)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 191 instructions.

Skipping c01025f3 rdtime a1

Skipping 144027f3 csrr a5,sip


Stack analysis
---------------

6 stack accesses found. Annotated code for `handleSyscall`:

    0x8400ccd0      0x0    addi sp,sp,-32
    0x8400ccd2      0x2    auipc a5,0x15
    0x8400ccd6      0x6    addi a5,a5,-1186 # ffffffff84021830 <ksCurTime>
    0x8400ccda      0xa    ld a6,0(a5)
    0x8400ccde      0xe    sd ra,24(sp)          ; stack access
    0x8400cce0     0x10    sd s0,16(sp)          ; stack access
    0x8400cce2     0x12    sd s1,8(sp)           ; stack access
    0x8400cce4     0x14    rdtime a1
    0x8400cce8     0x18    auipc s1,0x15
    0x8400ccec     0x1c    addi s1,s1,-1216 # ffffffff84021828 <ksCurSC>
    0x8400ccf0     0x20    ld a3,0(s1)
    0x8400ccf2     0x22    auipc a2,0x15
    0x8400ccf6     0x26    addi a2,a2,-1202 # ffffffff84021840 <ksConsumed>
    0x8400ccfa     0x2a    ld a4,0(a2)
    0x8400ccfc     0x2c    ld a7,72(a3)
    0x8400cd00     0x30    sd a1,0(a5)
    0x8400cd02     0x32    sub a4,a4,a6
    0x8400cd06     0x36    slli a5,a7,0x4
    0x8400cd0a     0x3a    add a5,a5,a3
    0x8400cd0c     0x3c    ld a6,96(a5)
    0x8400cd10     0x40    add a4,a4,a1
    0x8400cd12     0x42    sd a4,0(a2)
    0x8400cd14     0x44    bltu a6,a4,ffffffff8400ce80 <handleSyscall+0x1b0>
    0x8400cd18     0x48    sub a5,a6,a4
    0x8400cd1c     0x4c    li a2,19
    0x8400cd1e     0x4e    bgeu a2,a5,ffffffff8400ce80 <handleSyscall+0x1b0>
    0x8400cd22     0x52    ld a5,0(a3)
    0x8400cd24     0x54    bnez a5,ffffffff8400ce6c <handleSyscall+0x19c>
    0x8400cd28     0x58    addi a5,a4,20
    0x8400cd2c     0x5c    auipc a2,0x15
    0x8400cd30     0x60    ld a2,-1308(a2) # ffffffff84021810 <ksDomainTime>
    0x8400cd34     0x64    bltu a2,a5,ffffffff8400ceb4 <handleSyscall+0x1e4>
    0x8400cd38     0x68    addi a5,a0,11
    0x8400cd3c     0x6c    li a2,10
    0x8400cd3e     0x6e    bltu a2,a5,ffffffff8400cef2 <handleSyscall+0x222>
    0x8400cd42     0x72    auipc a2,0x1
    0x8400cd46     0x76    addi a2,a2,130 # ffffffff8400ddc4 <msgRegisters+0x67c>
    0x8400cd4a     0x7a    slli a5,a5,0x2
    0x8400cd4c     0x7c    add a5,a5,a2
    0x8400cd4e     0x7e    lw a5,0(a5)
    0x8400cd50     0x80    add a5,a5,a2
    0x8400cd52     0x82    jr a5
    0x8400cd54     0x84    auipc a5,0x15
    0x8400cd58     0x88    ld a5,-1276(a5) # ffffffff84021858 <ksCurThread>
    0x8400cd5c     0x8c    ld a4,120(a5)
    0x8400cd5e     0x8e    li a3,1
    0x8400cd60     0x90    li a2,1
    0x8400cd62     0x92    li a1,0
    0x8400cd64     0x94    li a0,0
    0x8400cd66     0x96    jal ra,ffffffff8400c13a <handleInvocation>
    0x8400cd6a     0x9a    li a1,1
    0x8400cd6c     0x9c    li a0,1
    0x8400cd6e     0x9e    jal ra,ffffffff8400a012 <handleRecv>
    0x8400cd72     0xa2    jal ra,ffffffff8400c616 <schedule>
    0x8400cd76     0xa6    jal ra,ffffffff8400756e <activateThread>
    0x8400cd7a     0xaa    ld ra,24(sp)          ; stack access
    0x8400cd7c     0xac    ld s0,16(sp)          ; stack access
    0x8400cd7e     0xae    ld s1,8(sp)           ; stack access
    0x8400cd80     0xb0    li a0,0
    0x8400cd82     0xb2    addi sp,sp,32
    0x8400cd84     0xb4    ret
    0x8400cd86     0xb6    auipc a5,0x15
    0x8400cd8a     0xba    ld a5,-1326(a5) # ffffffff84021858 <ksCurThread>
    0x8400cd8e     0xbe    ld a4,120(a5)
    0x8400cd90     0xc0    li a3,1
    0x8400cd92     0xc2    li a2,1
    0x8400cd94     0xc4    li a1,0
    0x8400cd96     0xc6    li a0,0
    0x8400cd98     0xc8    jal ra,ffffffff8400c13a <handleInvocation>
    0x8400cd9c     0xcc    bnez a0,ffffffff8400cdc0 <handleSyscall+0xf0>
    0x8400cd9e     0xce    li a1,0
    0x8400cda0     0xd0    li a0,1
    0x8400cda2     0xd2    jal ra,ffffffff8400a012 <handleRecv>
    0x8400cda6     0xd6    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400cda8     0xd8    auipc a5,0x15
    0x8400cdac     0xdc    ld a5,-1360(a5) # ffffffff84021858 <ksCurThread>
    0x8400cdb0     0xe0    ld a4,72(a5)
    0x8400cdb2     0xe2    li a3,0
    0x8400cdb4     0xe4    li a2,0
    0x8400cdb6     0xe6    li a1,0
    0x8400cdb8     0xe8    li a0,0
    0x8400cdba     0xea    jal ra,ffffffff8400c13a <handleInvocation>
    0x8400cdbe     0xee    beqz a0,ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400cdc0     0xf0    auipc a4,0x15
    0x8400cdc4     0xf4    addi a4,a4,-1360 # ffffffff84021870 <active_irq>
    0x8400cdc8     0xf8    lw a5,0(a4)
    0x8400cdca     0xfa    li a3,53
    0x8400cdce     0xfe    addiw a2,a5,-1
    0x8400cdd2    0x102    bgeu a3,a2,ffffffff8400ceca <handleSyscall+0x1fa>
    0x8400cdd6    0x106    csrr a5,sip
    0x8400cdda    0x10a    andi a2,a5,512
    0x8400cdde    0x10e    bnez a2,ffffffff8400cede <handleSyscall+0x20e>
    0x8400cde2    0x112    andi a5,a5,32
    0x8400cde6    0x116    bnez a5,ffffffff8400cec4 <handleSyscall+0x1f4>
    0x8400cdea    0x11a    auipc a5,0x15
    0x8400cdee    0x11e    sw zero,-1402(a5) # ffffffff84021870 <active_irq>
    0x8400cdf2    0x122    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400cdf4    0x124    auipc a5,0x15
    0x8400cdf8    0x128    ld a5,-1436(a5) # ffffffff84021858 <ksCurThread>
    0x8400cdfc    0x12c    ld a4,72(a5)
    0x8400cdfe    0x12e    li a3,0
    0x8400ce00    0x130    li a2,0
    0x8400ce02    0x132    li a1,1
    0x8400ce04    0x134    li a0,0
    0x8400ce06    0x136    jal ra,ffffffff8400c13a <handleInvocation>
    0x8400ce0a    0x13a    beqz a0,ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400ce0c    0x13c    j ffffffff8400cdc0 <handleSyscall+0xf0>
    0x8400ce0e    0x13e    auipc a5,0x15
    0x8400ce12    0x142    ld a5,-1462(a5) # ffffffff84021858 <ksCurThread>
    0x8400ce16    0x146    ld a4,32(a5)
    0x8400ce18    0x148    li a3,1
    0x8400ce1a    0x14a    li a2,1
    0x8400ce1c    0x14c    li a1,0
    0x8400ce1e    0x14e    li a0,0
    0x8400ce20    0x150    jal ra,ffffffff8400c13a <handleInvocation>
    0x8400ce24    0x154    beqz a0,ffffffff8400cd6a <handleSyscall+0x9a>
    0x8400ce26    0x156    j ffffffff8400cdc0 <handleSyscall+0xf0>
    0x8400ce28    0x158    auipc a5,0x15
    0x8400ce2c    0x15c    ld a5,-1488(a5) # ffffffff84021858 <ksCurThread>
    0x8400ce30    0x160    ld a4,72(a5)
    0x8400ce32    0x162    li a3,0
    0x8400ce34    0x164    li a2,1
    0x8400ce36    0x166    li a1,1
    0x8400ce38    0x168    li a0,1
    0x8400ce3a    0x16a    jal ra,ffffffff8400c13a <handleInvocation>
    0x8400ce3e    0x16e    beqz a0,ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400ce40    0x170    j ffffffff8400cdc0 <handleSyscall+0xf0>
    0x8400ce42    0x172    ld s0,8(a3)
    0x8400ce44    0x174    li a2,0
    0x8400ce46    0x176    li a3,1
    0x8400ce48    0x178    li a1,0
    0x8400ce4a    0x17a    mv a0,a6
    0x8400ce4c    0x17c    add s0,s0,a4
    0x8400ce4e    0x17e    jal ra,ffffffff840090cc <chargeBudget>
    0x8400ce52    0x182    ld a5,0(s1)
    0x8400ce54    0x184    sd s0,8(a5)
    0x8400ce56    0x186    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400ce58    0x188    li a1,0
    0x8400ce5a    0x18a    li a0,0
    0x8400ce5c    0x18c    jal ra,ffffffff8400a012 <handleRecv>
    0x8400ce60    0x190    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400ce62    0x192    li a1,1
    0x8400ce64    0x194    li a0,0
    0x8400ce66    0x196    jal ra,ffffffff8400a012 <handleRecv>
    0x8400ce6a    0x19a    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400ce6c    0x19c    ld a5,80(a3)
    0x8400ce6e    0x19e    ld a2,64(a3)
    0x8400ce70    0x1a0    bgeu a5,a7,ffffffff8400ce76 <handleSyscall+0x1a6>
    0x8400ce74    0x1a4    add a5,a5,a2
    0x8400ce76    0x1a6    addi a5,a5,1
    0x8400ce78    0x1a8    sub a7,a5,a7
    0x8400ce7c    0x1ac    bne a7,a2,ffffffff8400cd28 <handleSyscall+0x58>
    0x8400ce80    0x1b0    li a3,1
    0x8400ce82    0x1b2    li a2,0
    0x8400ce84    0x1b4    li a1,1
    0x8400ce86    0x1b6    mv a0,a4
    0x8400ce88    0x1b8    jal ra,ffffffff840090cc <chargeBudget>
    0x8400ce8c    0x1bc    auipc a0,0x15
    0x8400ce90    0x1c0    ld a0,-1588(a0) # ffffffff84021858 <ksCurThread>
    0x8400ce94    0x1c4    ld a5,280(a0)
    0x8400ce98    0x1c8    li a3,1
    0x8400ce9a    0x1ca    andi a4,a5,15
    0x8400ce9e    0x1ce    addi a4,a4,-1
    0x8400cea0    0x1d0    bltu a3,a4,ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400cea4    0x1d4    andi a5,a5,-16
    0x8400cea6    0x1d6    ori a5,a5,2
    0x8400ceaa    0x1da    sd a5,280(a0)
    0x8400ceae    0x1de    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400ceb2    0x1e2    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400ceb4    0x1e4    li a5,1
    0x8400ceb6    0x1e6    auipc a4,0x15
    0x8400ceba    0x1ea    sd a5,-1662(a4) # ffffffff84021838 <ksReprogram>
    0x8400cebe    0x1ee    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400cec2    0x1f2    j ffffffff8400ce8c <handleSyscall+0x1bc>
    0x8400cec4    0x1f4    li a5,54
    0x8400cec8    0x1f8    sw a5,0(a4)
    0x8400ceca    0x1fa    slli s0,a5,0x20
    0x8400cece    0x1fe    srli s0,s0,0x20
    0x8400ced0    0x200    mv a0,s0
    0x8400ced2    0x202    jal ra,ffffffff8400917c <mcsIRQ>
    0x8400ced6    0x206    mv a0,s0
    0x8400ced8    0x208    jal ra,ffffffff840084fa <handleInterrupt>
    0x8400cedc    0x20c    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400cede    0x20e    lui a5,0xc0202
    0x8400cee2    0x212    lw a5,4(a5)
    0x8400cee4    0x214    sext.w a5,a5
    0x8400cee6    0x216    sw a5,0(a4)
    0x8400cee8    0x218    addiw a4,a5,-1
    0x8400ceec    0x21c    bgeu a3,a4,ffffffff8400ceca <handleSyscall+0x1fa>
    0x8400cef0    0x220    j ffffffff8400cd72 <handleSyscall+0xa2>
    0x8400cef2    0x222    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
191 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 290 nodes.

Section schedule (290 of 296)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 217 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `schedule`:

    0x8400c616      0x0    addi sp,sp,-80
    0x8400c618      0x2    sd s3,40(sp)          ; stack access
    0x8400c61a      0x4    auipc s3,0x15
    0x8400c61e      0x8    addi s3,s3,558 # ffffffff84021848 <ksSchedulerAction>
    0x8400c622      0xc    sd s0,64(sp)          ; stack access
    0x8400c624      0xe    sd s1,56(sp)          ; stack access
    0x8400c626     0x10    sd ra,72(sp)          ; stack access
    0x8400c628     0x12    sd s2,48(sp)          ; stack access
    0x8400c62a     0x14    sd s4,32(sp)          ; stack access
    0x8400c62c     0x16    sd s5,24(sp)          ; stack access
    0x8400c62e     0x18    sd s6,16(sp)          ; stack access
    0x8400c630     0x1a    sd s7,8(sp)           ; stack access
    0x8400c632     0x1c    sd s8,0(sp)           ; stack access
    0x8400c634     0x1e    jal ra,ffffffff84004de8 <awaken>
    0x8400c638     0x22    ld s0,0(s3)
    0x8400c63c     0x26    auipc s1,0x15
    0x8400c640     0x2a    addi s1,s1,540 # ffffffff84021858 <ksCurThread>
    0x8400c644     0x2e    beqz s0,ffffffff8400c75c <schedule+0x146>
    0x8400c648     0x32    ld a0,0(s1)
    0x8400c64a     0x34    li a4,1
    0x8400c64c     0x36    li s2,0
    0x8400c64e     0x38    ld a5,280(a0)
    0x8400c652     0x3c    andi a5,a5,15
    0x8400c654     0x3e    addi a5,a5,-1
    0x8400c656     0x40    bgeu a4,a5,ffffffff8400c71e <schedule+0x108>
    0x8400c65a     0x44    li a5,1
    0x8400c65c     0x46    beq s0,a5,ffffffff8400c758 <schedule+0x142>
    0x8400c660     0x4a    ld s6,0(s1)
    0x8400c664     0x4e    auipc a5,0x15
    0x8400c668     0x52    ld a5,492(a5) # ffffffff84021850 <ksIdleThread>
    0x8400c66c     0x56    ld s7,360(s0)
    0x8400c670     0x5a    beq s6,a5,ffffffff8400c67c <schedule+0x66>
    0x8400c674     0x5e    ld a5,360(s6)
    0x8400c678     0x62    bgeu s7,a5,ffffffff8400c760 <schedule+0x14a>
    0x8400c67c     0x66    auipc s4,0x15
    0x8400c680     0x6a    ld s4,412(s4) # ffffffff84021818 <ksCurDomain>
    0x8400c684     0x6e    auipc s8,0x3
    0x8400c688     0x72    addi s8,s8,-1668 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400c68c     0x76    slli a5,s4,0x3
    0x8400c690     0x7a    add a5,a5,s8
    0x8400c692     0x7c    ld a0,1552(a5)
    0x8400c696     0x80    beqz a0,ffffffff8400c760 <schedule+0x14a>
    0x8400c698     0x82    jal ra,ffffffff8400c4ac <__clzdi2>
    0x8400c69c     0x86    addi a5,a0,-60
    0x8400c6a0     0x8a    slli s4,s4,0x2
    0x8400c6a2     0x8c    add s4,s4,a5
    0x8400c6a4     0x8e    slli s4,s4,0x3
    0x8400c6a6     0x90    add s4,s4,s8
    0x8400c6a8     0x92    mv s5,a0
    0x8400c6aa     0x94    ld a0,1040(s4)
    0x8400c6ae     0x98    jal ra,ffffffff8400c4ac <__clzdi2>
    0x8400c6b2     0x9c    li a5,63
    0x8400c6b6     0xa0    sub s5,a5,s5
    0x8400c6ba     0xa4    slli s5,s5,0x6
    0x8400c6bc     0xa6    sub a5,a5,a0
    0x8400c6be     0xa8    or s5,s5,a5
    0x8400c6c2     0xac    bgeu s7,s5,ffffffff8400c760 <schedule+0x14a>
    0x8400c6c6     0xb0    ld a5,288(s0)
    0x8400c6ca     0xb4    srli a5,a5,0x1
    0x8400c6cc     0xb6    andi a5,a5,1
    0x8400c6ce     0xb8    bnez a5,ffffffff8400c6d6 <schedule+0xc0>
    0x8400c6d0     0xba    mv a0,s0
    0x8400c6d2     0xbc    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x8400c6d6     0xc0    li a5,1
    0x8400c6d8     0xc2    sd a5,0(s3)
    0x8400c6dc     0xc6    jal ra,ffffffff8400c5ae <scheduleChooseNewThread>
    0x8400c6e0     0xca    ld s0,0(s1)
    0x8400c6e2     0xcc    auipc s2,0x15
    0x8400c6e6     0xd0    addi s2,s2,326 # ffffffff84021828 <ksCurSC>
    0x8400c6ea     0xd4    ld a4,0(s2)
    0x8400c6ee     0xd8    ld a5,368(s0)
    0x8400c6f2     0xdc    auipc a3,0x15
    0x8400c6f6     0xe0    sd zero,342(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400c6fa     0xe4    auipc s0,0x15
    0x8400c6fe     0xe8    addi s0,s0,318 # ffffffff84021838 <ksReprogram>
    0x8400c702     0xec    beq a5,a4,ffffffff8400c7a2 <schedule+0x18c>
    0x8400c706     0xf0    ld a3,64(a4)
    0x8400c708     0xf2    beqz a3,ffffffff8400c86c <schedule+0x256>
    0x8400c70c     0xf6    ld a3,0(a5)
    0x8400c70e     0xf8    li a2,1
    0x8400c710     0xfa    sd a2,0(s0)
    0x8400c712     0xfc    beqz a3,ffffffff8400c820 <schedule+0x20a>
    0x8400c716    0x100    mv a0,a5
    0x8400c718    0x102    jal ra,ffffffff840033a2 <refill_unblock_check.part.0>
    0x8400c71c    0x106    j ffffffff8400c7a2 <schedule+0x18c>
    0x8400c71e    0x108    ld a5,368(a0)
    0x8400c722    0x10c    beqz a5,ffffffff8400c65a <schedule+0x44>
    0x8400c724    0x10e    ld s2,64(a5)
    0x8400c728    0x112    beqz s2,ffffffff8400c65a <schedule+0x44>
    0x8400c72c    0x116    ld s2,288(a0)
    0x8400c730    0x11a    not s4,s2
    0x8400c734    0x11e    andi s4,s4,1
    0x8400c738    0x122    beqz s4,ffffffff8400c8aa <schedule+0x294>
    0x8400c73c    0x126    srli s2,s2,0x1
    0x8400c740    0x12a    andi s2,s2,1
    0x8400c744    0x12e    bnez s2,ffffffff8400c65a <schedule+0x44>
    0x8400c748    0x132    jal ra,ffffffff8400331a <tcbSchedEnqueue.part.0>
    0x8400c74c    0x136    ld s0,0(s3)
    0x8400c750    0x13a    li a5,1
    0x8400c752    0x13c    mv s2,s4
    0x8400c754    0x13e    bne s0,a5,ffffffff8400c660 <schedule+0x4a>
    0x8400c758    0x142    jal ra,ffffffff8400c5ae <scheduleChooseNewThread>
    0x8400c75c    0x146    ld s0,0(s1)
    0x8400c75e    0x148    j ffffffff8400c77e <schedule+0x168>
    0x8400c760    0x14a    mv a0,s0
    0x8400c762    0x14c    beqz s2,ffffffff8400c76e <schedule+0x158>
    0x8400c766    0x150    ld a5,360(s6)
    0x8400c76a    0x154    beq a5,s7,ffffffff8400c866 <schedule+0x250>
    0x8400c76e    0x158    jal ra,ffffffff84003c98 <setVMRoot>
    0x8400c772    0x15c    ld a5,288(s0)
    0x8400c776    0x160    srli a5,a5,0x1
    0x8400c778    0x162    andi a5,a5,1
    0x8400c77a    0x164    bnez a5,ffffffff8400c812 <schedule+0x1fc>
    0x8400c77c    0x166    sd s0,0(s1)
    0x8400c77e    0x168    auipc s2,0x15
    0x8400c782    0x16c    addi s2,s2,170 # ffffffff84021828 <ksCurSC>
    0x8400c786    0x170    ld a5,368(s0)
    0x8400c78a    0x174    ld a4,0(s2)
    0x8400c78e    0x178    auipc a3,0x15
    0x8400c792    0x17c    sd zero,186(a3) # ffffffff84021848 <ksSchedulerAction>
    0x8400c796    0x180    auipc s0,0x15
    0x8400c79a    0x184    addi s0,s0,162 # ffffffff84021838 <ksReprogram>
    0x8400c79e    0x188    bne a5,a4,ffffffff8400c706 <schedule+0xf0>
    0x8400c7a2    0x18c    ld a5,0(s0)
    0x8400c7a4    0x18e    bnez a5,ffffffff8400c7c8 <schedule+0x1b2>
    0x8400c7a6    0x190    ld a5,0(s1)
    0x8400c7a8    0x192    ld a5,368(a5)
    0x8400c7ac    0x196    sd a5,0(s2)
    0x8400c7b0    0x19a    ld ra,72(sp)          ; stack access
    0x8400c7b2    0x19c    ld s0,64(sp)          ; stack access
    0x8400c7b4    0x19e    ld s1,56(sp)          ; stack access
    0x8400c7b6    0x1a0    ld s2,48(sp)          ; stack access
    0x8400c7b8    0x1a2    ld s3,40(sp)          ; stack access
    0x8400c7ba    0x1a4    ld s4,32(sp)          ; stack access
    0x8400c7bc    0x1a6    ld s5,24(sp)          ; stack access
    0x8400c7be    0x1a8    ld s6,16(sp)          ; stack access
    0x8400c7c0    0x1aa    ld s7,8(sp)           ; stack access
    0x8400c7c2    0x1ac    ld s8,0(sp)           ; stack access
    0x8400c7c4    0x1ae    addi sp,sp,80
    0x8400c7c6    0x1b0    ret
    0x8400c7c8    0x1b2    ld a4,0(s2)
    0x8400c7cc    0x1b6    auipc s3,0x15
    0x8400c7d0    0x1ba    addi s3,s3,116 # ffffffff84021840 <ksConsumed>
    0x8400c7d4    0x1be    ld a0,0(s3)
    0x8400c7d8    0x1c2    ld a3,64(a4)
    0x8400c7da    0x1c4    bnez a3,ffffffff8400c82c <schedule+0x216>
    0x8400c7dc    0x1c6    ld a4,0(s1)
    0x8400c7de    0x1c8    mv a3,a5
    0x8400c7e0    0x1ca    ld a5,368(a4)
    0x8400c7e4    0x1ce    auipc a4,0x15
    0x8400c7e8    0x1d2    addi a4,a4,44 # ffffffff84021810 <ksDomainTime>
    0x8400c7ec    0x1d6    ld a2,0(a4)
    0x8400c7ee    0x1d8    li a1,0
    0x8400c7f0    0x1da    bltu a0,a2,ffffffff8400c81a <schedule+0x204>
    0x8400c7f4    0x1de    sd a1,0(a4)
    0x8400c7f6    0x1e0    sd a5,0(s2)
    0x8400c7fa    0x1e4    auipc a4,0x15
    0x8400c7fe    0x1e8    sd zero,70(a4) # ffffffff84021840 <ksConsumed>
    0x8400c802    0x1ec    beqz a3,ffffffff8400c7b0 <schedule+0x19a>
    0x8400c804    0x1ee    jal ra,ffffffff84004bb6 <setNextInterrupt>
    0x8400c808    0x1f2    auipc a5,0x15
    0x8400c80c    0x1f6    sd zero,48(a5) # ffffffff84021838 <ksReprogram>
    0x8400c810    0x1fa    j ffffffff8400c7b0 <schedule+0x19a>
    0x8400c812    0x1fc    mv a0,s0
    0x8400c814    0x1fe    jal ra,ffffffff8400321a <tcbSchedDequeue.part.0>
    0x8400c818    0x202    j ffffffff8400c77c <schedule+0x166>
    0x8400c81a    0x204    sub a1,a2,a0
    0x8400c81e    0x208    j ffffffff8400c7f4 <schedule+0x1de>
    0x8400c820    0x20a    auipc s3,0x15
    0x8400c824    0x20e    addi s3,s3,32 # ffffffff84021840 <ksConsumed>
    0x8400c828    0x212    ld a0,0(s3)
    0x8400c82c    0x216    beqz a0,ffffffff8400c856 <schedule+0x240>
    0x8400c82e    0x218    ld a5,0(a4)
    0x8400c830    0x21a    bnez a5,ffffffff8400c89c <schedule+0x286>
    0x8400c832    0x21c    ld a2,72(a4)
    0x8400c834    0x21e    addi a5,a4,88
    0x8400c838    0x222    ld a3,80(a4)
    0x8400c83a    0x224    slli a2,a2,0x4
    0x8400c83c    0x226    add a2,a2,a5
    0x8400c83e    0x228    ld a6,8(a2)
    0x8400c842    0x22c    mv a1,a5
    0x8400c844    0x22e    slli a5,a3,0x4
    0x8400c848    0x232    sub a3,a6,a0
    0x8400c84c    0x236    add a5,a5,a1
    0x8400c84e    0x238    sd a3,8(a2)
    0x8400c850    0x23a    ld a3,8(a5)
    0x8400c852    0x23c    add a3,a3,a0
    0x8400c854    0x23e    sd a3,8(a5)
    0x8400c856    0x240    ld a2,8(a4)
    0x8400c858    0x242    ld a5,0(s1)
    0x8400c85a    0x244    ld a3,0(s0)
    0x8400c85c    0x246    add a2,a2,a0
    0x8400c85e    0x248    ld a5,368(a5)
    0x8400c862    0x24c    sd a2,8(a4)
    0x8400c864    0x24e    j ffffffff8400c7e4 <schedule+0x1ce>
    0x8400c866    0x250    jal ra,ffffffff84007aa4 <tcbSchedAppend>
    0x8400c86a    0x254    j ffffffff8400c6d6 <schedule+0xc0>
    0x8400c86c    0x256    ld a3,0(s0)
    0x8400c86e    0x258    beqz a3,ffffffff8400c7ac <schedule+0x196>
    0x8400c870    0x25a    auipc a4,0x15
    0x8400c874    0x25e    addi a4,a4,-96 # ffffffff84021810 <ksDomainTime>
    0x8400c878    0x262    ld a2,0(a4)
    0x8400c87a    0x264    auipc a0,0x15
    0x8400c87e    0x268    ld a0,-58(a0) # ffffffff84021840 <ksConsumed>
    0x8400c882    0x26c    bltu a0,a2,ffffffff8400c81a <schedule+0x204>
    0x8400c886    0x270    auipc a4,0x15
    0x8400c88a    0x274    sd zero,-118(a4) # ffffffff84021810 <ksDomainTime>
    0x8400c88e    0x278    auipc a4,0x15
    0x8400c892    0x27c    sd zero,-78(a4) # ffffffff84021840 <ksConsumed>
    0x8400c896    0x280    sd a5,0(s2)
    0x8400c89a    0x284    j ffffffff8400c804 <schedule+0x1ee>
    0x8400c89c    0x286    jal ra,ffffffff8400480a <refill_split_check>
    0x8400c8a0    0x28a    ld a4,0(s2)
    0x8400c8a4    0x28e    ld a0,0(s3)
    0x8400c8a8    0x292    j ffffffff8400c856 <schedule+0x240>
    0x8400c8aa    0x294    li s2,0
    0x8400c8ac    0x296    j ffffffff8400c65a <schedule+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
217 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 372 nodes.

Section decodeRISCVMMUInvocation (291 of 296)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 744 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

83 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x840062b8      0x0    addi sp,sp,-208
    0x840062ba      0x2    sd s0,192(sp)         ; stack access
    0x840062bc      0x4    sd s1,184(sp)         ; stack access
    0x840062be      0x6    sd a4,16(sp)          ; stack access
    0x840062c0      0x8    mv s1,a4
    0x840062c2      0xa    srli s0,a4,0x3b
    0x840062c6      0xe    sd ra,200(sp)         ; stack access
    0x840062c8     0x10    sd s2,176(sp)         ; stack access
    0x840062ca     0x12    sd s3,168(sp)         ; stack access
    0x840062cc     0x14    sd s4,160(sp)         ; stack access
    0x840062ce     0x16    sd s5,152(sp)         ; stack access
    0x840062d0     0x18    sd s6,144(sp)         ; stack access
    0x840062d2     0x1a    sd s7,136(sp)         ; stack access
    0x840062d4     0x1c    sd s8,128(sp)         ; stack access
    0x840062d6     0x1e    sd s9,120(sp)         ; stack access
    0x840062d8     0x20    sd s10,112(sp)        ; stack access
    0x840062da     0x22    sd s11,104(sp)        ; stack access
    0x840062dc     0x24    sd a5,24(sp)          ; stack access
    0x840062de     0x26    li a4,11
    0x840062e0     0x28    beq s0,a4,ffffffff8400650c <decodeRISCVMMUInvocation+0x254>
    0x840062e4     0x2c    bltu a4,s0,ffffffff8400642e <decodeRISCVMMUInvocation+0x176>
    0x840062e8     0x30    li s2,1
    0x840062ea     0x32    mv s3,a3
    0x840062ec     0x34    beq s0,s2,ffffffff840064c2 <decodeRISCVMMUInvocation+0x20a>
    0x840062f0     0x38    li a4,3
    0x840062f2     0x3a    bne s0,a4,ffffffff84006b68 <decodeRISCVMMUInvocation+0x8b0>
    0x840062f6     0x3e    mv s4,a5
    0x840062f8     0x40    sd a5,72(sp)          ; stack access
    0x840062fa     0x42    sd s1,64(sp)          ; stack access
    0x840062fc     0x44    li a5,37
    0x84006300     0x48    beq a0,a5,ffffffff84006650 <decodeRISCVMMUInvocation+0x398>
    0x84006304     0x4c    li a5,36
    0x84006308     0x50    bne a0,a5,ffffffff84006a0c <decodeRISCVMMUInvocation+0x754>
    0x8400630c     0x54    bgeu s2,a1,ffffffff840069ea <decodeRISCVMMUInvocation+0x732>
    0x84006310     0x58    auipc a4,0x9
    0x84006314     0x5c    ld a4,1776(a4) # ffffffff8400fa00 <current_extra_caps>
    0x84006318     0x60    beqz a4,ffffffff840069ea <decodeRISCVMMUInvocation+0x732>
    0x8400631c     0x64    srli a5,s1,0x27
    0x84006320     0x68    andi a5,a5,1
    0x84006322     0x6a    bnez a5,ffffffff84006a3c <decodeRISCVMMUInvocation+0x784>
    0x84006326     0x6e    ld a5,0(a4)
    0x84006328     0x70    srli s6,a5,0x3b
    0x8400632c     0x74    bne s6,s0,ffffffff840069f6 <decodeRISCVMMUInvocation+0x73e>
    0x84006330     0x78    srli a5,a5,0x27
    0x84006332     0x7a    andi a5,a5,1
    0x84006334     0x7c    beqz a5,ffffffff840069f6 <decodeRISCVMMUInvocation+0x73e>
    0x84006338     0x80    ld s9,8(a4)
    0x8400633c     0x84    li a5,-1
    0x8400633e     0x86    srli a3,a5,0x19
    0x84006342     0x8a    srli s2,s9,0x9
    0x84006346     0x8e    srli a4,s2,0x26
    0x8400634a     0x92    andi a4,a4,1
    0x8400634c     0x94    and s2,s2,a3
    0x84006350     0x98    beqz a4,ffffffff84006358 <decodeRISCVMMUInvocation+0xa0>
    0x84006352     0x9a    slli a5,a5,0x27
    0x84006354     0x9c    or s2,s2,a5
    0x84006358     0xa0    auipc s8,0x1b
    0x8400635c     0xa4    addi s8,s8,1280 # ffffffff84021858 <ksCurThread>
    0x84006360     0xa8    ld a4,0(s8)
    0x84006364     0xac    lui a5,0xfefff
    0x84006368     0xb0    slli a5,a5,0xe
    0x8400636a     0xb2    ld s7,88(a4)
    0x8400636e     0xb6    srli a5,a5,0x1a
    0x84006370     0xb8    srli a0,s9,0x30
    0x84006374     0xbc    bltu a5,s7,ffffffff84006a62 <decodeRISCVMMUInvocation+0x7aa>
    0x84006378     0xc0    jal ra,ffffffff840031cc <findVSpaceForASID>
    0x8400637c     0xc4    sd a0,80(sp)          ; stack access
    0x8400637e     0xc6    sd a1,88(sp)          ; stack access
    0x84006380     0xc8    bnez a0,ffffffff84006a78 <decodeRISCVMMUInvocation+0x7c0>
    0x84006384     0xcc    bne s2,a1,ffffffff840069f6 <decodeRISCVMMUInvocation+0x73e>
    0x84006388     0xd0    mv a1,s7
    0x8400638a     0xd2    mv a0,s2
    0x8400638c     0xd4    jal ra,ffffffff84003ab2 <lookupPTSlot>
    0x84006390     0xd8    sd a0,48(sp)          ; stack access
    0x84006392     0xda    sd a1,56(sp)          ; stack access
    0x84006394     0xdc    li a5,12
    0x84006396     0xde    mv s10,a0
    0x84006398     0xe0    mv s5,a1
    0x8400639a     0xe2    beq a1,a5,ffffffff8400691a <decodeRISCVMMUInvocation+0x662>
    0x8400639e     0xe6    ld s0,0(a0)
    0x840063a0     0xe8    andi s0,s0,1
    0x840063a2     0xea    bnez s0,ffffffff8400691a <decodeRISCVMMUInvocation+0x662>
    0x840063a6     0xee    srli s6,s4,0x9
    0x840063aa     0xf2    srli a4,s6,0x26
    0x840063ae     0xf6    li a5,-1
    0x840063b0     0xf8    srli a3,a5,0x19
    0x840063b4     0xfc    andi a4,a4,1
    0x840063b6     0xfe    and s6,s6,a3
    0x840063ba    0x102    beqz a4,ffffffff840063c2 <decodeRISCVMMUInvocation+0x10a>
    0x840063bc    0x104    slli a5,a5,0x27
    0x840063be    0x106    or s6,s6,a5
    0x840063c2    0x10a    ld a0,0(s8)
    0x840063c6    0x10e    li s8,-1
    0x840063c8    0x110    slli a4,s8,0x30
    0x840063cc    0x114    ld a5,280(a0)
    0x840063d0    0x118    and s9,s9,a4
    0x840063d4    0x11c    srli s2,s8,0x10
    0x840063d8    0x120    andi a5,a5,-16
    0x840063da    0x122    ori a5,a5,2
    0x840063de    0x126    sd a5,280(a0)
    0x840063e2    0x12a    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840063e6    0x12e    li a3,1
    0x840063e8    0x130    sll a5,a3,s5
    0x840063ec    0x134    slli s8,s8,0x28
    0x840063ee    0x136    neg a5,a5
    0x840063f2    0x13a    and a5,a5,s7
    0x840063f6    0x13e    and s1,s1,s8
    0x840063fa    0x142    slli a4,a3,0x26
    0x840063fe    0x146    or a5,a5,s1
    0x84006400    0x148    slli a3,a3,0x27
    0x84006402    0x14a    or a5,a5,a3
    0x84006404    0x14c    add a4,a4,s6
    0x84006406    0x14e    lui a3,0xfff00
    0x8400640a    0x152    and s2,s4,s2
    0x8400640e    0x156    srli a3,a3,0xa
    0x84006410    0x158    srli a4,a4,0x2
    0x84006412    0x15a    or s2,s2,s9
    0x84006416    0x15e    and a4,a4,a3
    0x84006418    0x160    sd a5,0(s3)
    0x8400641c    0x164    sd s2,8(s3)
    0x84006420    0x168    ori a4,a4,193
    0x84006424    0x16c    sd a4,0(s10)
    0x84006428    0x170    sfence.vma
    0x8400642c    0x174    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x8400642e    0x176    li a5,13
    0x84006430    0x178    bne s0,a5,ffffffff84006b68 <decodeRISCVMMUInvocation+0x8b0>
    0x84006434    0x17c    li a5,42
    0x84006438    0x180    bne a0,a5,ffffffff840064e0 <decodeRISCVMMUInvocation+0x228>
    0x8400643c    0x184    auipc s4,0x9
    0x84006440    0x188    ld s4,1476(s4) # ffffffff8400fa00 <current_extra_caps>
    0x84006444    0x18c    beqz s4,ffffffff8400690c <decodeRISCVMMUInvocation+0x654>
    0x84006448    0x190    ld a5,0(s4)
    0x8400644c    0x194    li a4,3
    0x8400644e    0x196    srli s0,a5,0x3b
    0x84006452    0x19a    bne s0,a4,ffffffff840068f4 <decodeRISCVMMUInvocation+0x63c>
    0x84006456    0x19e    srli a5,a5,0x27
    0x84006458    0x1a0    andi a5,a5,1
    0x8400645a    0x1a2    bnez a5,ffffffff840068f4 <decodeRISCVMMUInvocation+0x63c>
    0x8400645e    0x1a6    srli s2,s1,0x2b
    0x84006462    0x1aa    slli s2,s2,0x30
    0x84006464    0x1ac    srli s2,s2,0x30
    0x84006468    0x1b0    srli a5,s2,0x9
    0x8400646c    0x1b4    auipc s3,0x9
    0x84006470    0x1b8    addi s3,s3,-1132 # ffffffff8400f000 <riscvKSASIDTable>
    0x84006474    0x1bc    slli a5,a5,0x3
    0x84006476    0x1be    add a5,a5,s3
    0x84006478    0x1c0    ld s5,0(a5) # fffffffffefff000 <ki_end+0x7afd8000>
    0x8400647c    0x1c4    beqz s5,ffffffff84006a1c <decodeRISCVMMUInvocation+0x764>
    0x84006480    0x1c8    slli s1,s1,0x2
    0x84006482    0x1ca    srli a5,s1,0x26
    0x84006486    0x1ce    lui a4,0xf8000
    0x8400648a    0x1d2    srli a4,a4,0x19
    0x8400648c    0x1d4    andi a5,a5,1
    0x8400648e    0x1d6    and s1,s1,a4
    0x84006490    0x1d8    beqz a5,ffffffff84006498 <decodeRISCVMMUInvocation+0x1e0>
    0x84006492    0x1da    li a5,-1
    0x84006494    0x1dc    slli a5,a5,0x27
    0x84006496    0x1de    or s1,s1,a5
    0x84006498    0x1e0    bne s5,s1,ffffffff840069da <decodeRISCVMMUInvocation+0x722>
    0x8400649c    0x1e4    mv a5,s5
    0x8400649e    0x1e6    addi a3,s2,512
    0x840064a2    0x1ea    bnez s2,ffffffff840064aa <decodeRISCVMMUInvocation+0x1f2>
    0x840064a6    0x1ee    addi a5,a5,8
    0x840064a8    0x1f0    li s2,1
    0x840064aa    0x1f2    ld a4,0(a5)
    0x840064ac    0x1f4    beqz a4,ffffffff84006940 <decodeRISCVMMUInvocation+0x688>
    0x840064b0    0x1f8    addi s2,s2,1
    0x840064b2    0x1fa    addi a5,a5,8
    0x840064b4    0x1fc    bne a3,s2,ffffffff840064a2 <decodeRISCVMMUInvocation+0x1ea>
    0x840064b8    0x200    li a5,8
    0x840064ba    0x202    sd a5,1728(s3)
    0x840064be    0x206    li s0,3
    0x840064c0    0x208    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x840064c2    0x20a    mv s2,a5
    0x840064c4    0x20c    sd a5,56(sp)          ; stack access
    0x840064c6    0x20e    sd s1,48(sp)          ; stack access
    0x840064c8    0x210    li a5,39
    0x840064cc    0x214    beq a0,a5,ffffffff840068b4 <decodeRISCVMMUInvocation+0x5fc>
    0x840064d0    0x218    li a5,40
    0x840064d4    0x21c    beq a0,a5,ffffffff8400686a <decodeRISCVMMUInvocation+0x5b2>
    0x840064d8    0x220    li a5,38
    0x840064dc    0x224    beq a0,a5,ffffffff840066d2 <decodeRISCVMMUInvocation+0x41a>
    0x840064e0    0x228    li a5,3
    0x840064e2    0x22a    auipc a4,0x9
    0x840064e6    0x22e    sd a5,478(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840064ea    0x232    li s0,3
    0x840064ec    0x234    ld ra,200(sp)         ; stack access
    0x840064ee    0x236    mv a0,s0
    0x840064f0    0x238    ld s0,192(sp)         ; stack access
    0x840064f2    0x23a    ld s1,184(sp)         ; stack access
    0x840064f4    0x23c    ld s2,176(sp)         ; stack access
    0x840064f6    0x23e    ld s3,168(sp)         ; stack access
    0x840064f8    0x240    ld s4,160(sp)         ; stack access
    0x840064fa    0x242    ld s5,152(sp)         ; stack access
    0x840064fc    0x244    ld s6,144(sp)         ; stack access
    0x840064fe    0x246    ld s7,136(sp)         ; stack access
    0x84006500    0x248    ld s8,128(sp)         ; stack access
    0x84006502    0x24a    ld s9,120(sp)         ; stack access
    0x84006504    0x24c    ld s10,112(sp)        ; stack access
    0x84006506    0x24e    ld s11,104(sp)        ; stack access
    0x84006508    0x250    addi sp,sp,208
    0x8400650a    0x252    ret
    0x8400650c    0x254    li a5,41
    0x84006510    0x258    bne a0,a5,ffffffff840064e0 <decodeRISCVMMUInvocation+0x228>
    0x84006514    0x25c    li a5,1
    0x84006516    0x25e    bgeu a5,a1,ffffffff8400690c <decodeRISCVMMUInvocation+0x654>
    0x8400651a    0x262    auipc a5,0xa
    0x8400651e    0x266    addi a5,a5,-1306 # ffffffff84010000 <intStateIRQNode>
    0x84006522    0x26a    ld s2,-1536(a5)
    0x84006526    0x26e    beqz s2,ffffffff8400690c <decodeRISCVMMUInvocation+0x654>
    0x8400652a    0x272    ld s0,-1528(a5)
    0x8400652e    0x276    beqz s0,ffffffff8400690c <decodeRISCVMMUInvocation+0x654>
    0x84006532    0x27a    auipc s3,0x9
    0x84006536    0x27e    addi s3,s3,-1330 # ffffffff8400f000 <riscvKSASIDTable>
    0x8400653a    0x282    ld s4,0(s2)
    0x8400653e    0x286    mv a5,s3
    0x84006540    0x288    li s1,0
    0x84006542    0x28a    li a3,128
    0x84006546    0x28e    j ffffffff84006550 <decodeRISCVMMUInvocation+0x298>
    0x84006548    0x290    addi s1,s1,1
    0x8400654a    0x292    addi a5,a5,8
    0x8400654c    0x294    beq s1,a3,ffffffff840064b8 <decodeRISCVMMUInvocation+0x200>
    0x84006550    0x298    ld a4,0(a5)
    0x84006552    0x29a    bnez a4,ffffffff84006548 <decodeRISCVMMUInvocation+0x290>
    0x84006554    0x29c    srli a5,s4,0x3b
    0x84006558    0x2a0    li a4,2
    0x8400655a    0x2a2    bne a5,a4,ffffffff840068fc <decodeRISCVMMUInvocation+0x644>
    0x8400655e    0x2a6    ld a5,8(s2)
    0x84006562    0x2aa    li a4,12
    0x84006564    0x2ac    andi a3,a5,63
    0x84006568    0x2b0    bne a3,a4,ffffffff840068fc <decodeRISCVMMUInvocation+0x644>
    0x8400656c    0x2b4    srli a5,a5,0x6
    0x8400656e    0x2b6    andi a5,a5,1
    0x84006570    0x2b8    bnez a5,ffffffff840068fc <decodeRISCVMMUInvocation+0x644>
    0x84006574    0x2bc    ld a1,24(s2)
    0x84006578    0x2c0    lui a4,0xf8000
    0x8400657c    0x2c4    srli a4,a4,0x19
    0x8400657e    0x2c6    srli a5,a1,0x26
    0x84006582    0x2ca    andi a5,a5,1
    0x84006584    0x2cc    and a1,a1,a4
    0x84006586    0x2ce    beqz a5,ffffffff84006a16 <decodeRISCVMMUInvocation+0x75e>
    0x8400658a    0x2d2    li a5,-1
    0x8400658c    0x2d4    slli a5,a5,0x27
    0x8400658e    0x2d6    or a1,a1,a5
    0x84006590    0x2d8    mv a0,s2
    0x84006592    0x2da    jal ra,ffffffff84006096 <isMDBParentOf>
    0x84006596    0x2de    bnez a0,ffffffff84006ad0 <decodeRISCVMMUInvocation+0x818>
    0x8400659a    0x2e2    srli a4,s4,0x26
    0x8400659e    0x2e6    li a5,-1
    0x840065a0    0x2e8    srli a3,a5,0x19
    0x840065a4    0x2ec    andi a4,a4,1
    0x840065a6    0x2ee    and s4,s4,a3
    0x840065aa    0x2f2    beqz a4,ffffffff840065b2 <decodeRISCVMMUInvocation+0x2fa>
    0x840065ac    0x2f4    slli a5,a5,0x27
    0x840065ae    0x2f6    or s4,s4,a5
    0x840065b2    0x2fa    auipc s6,0x1b
    0x840065b6    0x2fe    addi s6,s6,678 # ffffffff84021858 <ksCurThread>
    0x840065ba    0x302    ld a5,0(s6)
    0x840065be    0x306    ld a2,8(s0)
    0x840065c0    0x308    ld a1,0(s0)
    0x840065c2    0x30a    ld a4,96(a5)
    0x840065c4    0x30c    ld a3,88(a5)
    0x840065c6    0x30e    li a0,0
    0x840065c8    0x310    sd a1,80(sp)          ; stack access
    0x840065ca    0x312    sd a2,88(sp)          ; stack access
    0x840065cc    0x314    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x840065d0    0x318    sd a0,32(sp)          ; stack access
    0x840065d2    0x31a    sd a1,40(sp)          ; stack access
    0x840065d4    0x31c    mv s0,a0
    0x840065d6    0x31e    mv s5,a1
    0x840065d8    0x320    bnez a0,ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x840065da    0x322    ld s0,0(a1)
    0x840065dc    0x324    srli s0,s0,0x3b
    0x840065de    0x326    bnez s0,ffffffff840064b8 <decodeRISCVMMUInvocation+0x200>
    0x840065e2    0x32a    ld a0,0(s6)
    0x840065e6    0x32e    ld a5,280(a0)
    0x840065ea    0x332    andi a5,a5,-16
    0x840065ec    0x334    ori a5,a5,2
    0x840065f0    0x338    sd a5,280(a0)
    0x840065f4    0x33c    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840065f8    0x340    ld a5,8(s2)
    0x840065fc    0x344    andi a4,a5,63
    0x84006600    0x348    addiw a3,a4,-4
    0x84006604    0x34c    slli a5,a5,0x27
    0x84006606    0x34e    lui a4,0x2000
    0x8400660a    0x352    sll a4,a4,a3
    0x8400660e    0x356    srli a5,a5,0x27
    0x84006610    0x358    or a5,a5,a4
    0x84006612    0x35a    lui a4,0x1
    0x84006614    0x35c    sd a5,8(s2)
    0x84006618    0x360    add a4,a4,s4
    0x8400661a    0x362    mv a5,s4
    0x8400661c    0x364    sd zero,0(a5)
    0x84006620    0x368    addi a5,a5,8
    0x84006622    0x36a    bne a4,a5,ffffffff8400661c <decodeRISCVMMUInvocation+0x364>
    0x84006626    0x36e    slli a0,s4,0x19
    0x8400662a    0x372    slli a5,s1,0x34
    0x8400662e    0x376    srli a0,a0,0x1b
    0x84006630    0x378    or a0,a0,a5
    0x84006632    0x37a    li a5,13
    0x84006634    0x37c    slli a5,a5,0x3b
    0x84006636    0x37e    slli s1,s1,0x3
    0x84006638    0x380    or a0,a0,a5
    0x8400663a    0x382    mv a3,s5
    0x8400663c    0x384    mv a2,s2
    0x8400663e    0x386    li a1,0
    0x84006640    0x388    add s3,s3,s1
    0x84006642    0x38a    sd a0,80(sp)          ; stack access
    0x84006644    0x38c    sd zero,88(sp)        ; stack access
    0x84006646    0x38e    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400664a    0x392    sd s4,0(s3)
    0x8400664e    0x396    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006650    0x398    mv a0,a3
    0x84006652    0x39a    jal ra,ffffffff8400621a <isFinalCapability>
    0x84006656    0x39e    beqz a0,ffffffff84006a56 <decodeRISCVMMUInvocation+0x79e>
    0x8400665a    0x3a2    srli a5,s1,0x27
    0x8400665e    0x3a6    andi a5,a5,1
    0x84006660    0x3a8    beqz a5,ffffffff84006692 <decodeRISCVMMUInvocation+0x3da>
    0x84006662    0x3aa    srli a0,s4,0x30
    0x84006666    0x3ae    jal ra,ffffffff840031cc <findVSpaceForASID>
    0x8400666a    0x3b2    srli s4,s4,0x9
    0x8400666e    0x3b6    li a5,-1
    0x84006670    0x3b8    slli s2,s2,0x26
    0x84006672    0x3ba    srli a4,a5,0x19
    0x84006676    0x3be    and s2,s4,s2
    0x8400667a    0x3c2    sd a0,80(sp)          ; stack access
    0x8400667c    0x3c4    sd a1,88(sp)          ; stack access
    0x8400667e    0x3c6    and s4,s4,a4
    0x84006682    0x3ca    beqz s2,ffffffff8400668c <decodeRISCVMMUInvocation+0x3d4>
    0x84006686    0x3ce    slli a5,a5,0x27
    0x84006688    0x3d0    or s4,s4,a5
    0x8400668c    0x3d4    ld a5,80(sp)          ; stack access
    0x8400668e    0x3d6    beqz a5,ffffffff84006a50 <decodeRISCVMMUInvocation+0x798>
    0x84006692    0x3da    auipc a0,0x1b
    0x84006696    0x3de    ld a0,454(a0) # ffffffff84021858 <ksCurThread>
    0x8400669a    0x3e2    ld a5,280(a0)
    0x8400669e    0x3e6    andi a5,a5,-16
    0x840066a0    0x3e8    ori a5,a5,2
    0x840066a4    0x3ec    sd a5,280(a0)
    0x840066a8    0x3f0    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840066ac    0x3f4    ld s0,192(sp)         ; stack access
    0x840066ae    0x3f6    ld a0,64(sp)          ; stack access
    0x840066b0    0x3f8    ld a1,72(sp)          ; stack access
    0x840066b2    0x3fa    ld ra,200(sp)         ; stack access
    0x840066b4    0x3fc    ld s1,184(sp)         ; stack access
    0x840066b6    0x3fe    ld s2,176(sp)         ; stack access
    0x840066b8    0x400    ld s4,160(sp)         ; stack access
    0x840066ba    0x402    ld s5,152(sp)         ; stack access
    0x840066bc    0x404    ld s6,144(sp)         ; stack access
    0x840066be    0x406    ld s7,136(sp)         ; stack access
    0x840066c0    0x408    ld s8,128(sp)         ; stack access
    0x840066c2    0x40a    ld s9,120(sp)         ; stack access
    0x840066c4    0x40c    ld s10,112(sp)        ; stack access
    0x840066c6    0x40e    ld s11,104(sp)        ; stack access
    0x840066c8    0x410    mv a2,s3
    0x840066ca    0x412    ld s3,168(sp)         ; stack access
    0x840066cc    0x414    addi sp,sp,208
    0x840066ce    0x416    j ffffffff84003e4e <performPageTableInvocationUnmap>
    0x840066d2    0x41a    li a5,2
    0x840066d4    0x41c    bgeu a5,a1,ffffffff8400690c <decodeRISCVMMUInvocation+0x654>
    0x840066d8    0x420    auipc a4,0x9
    0x840066dc    0x424    ld a4,808(a4) # ffffffff8400fa00 <current_extra_caps>
    0x840066e0    0x428    beqz a4,ffffffff8400690c <decodeRISCVMMUInvocation+0x654>
    0x840066e4    0x42c    ld a5,0(a4)
    0x840066e6    0x42e    li a3,3
    0x840066e8    0x430    srli s5,a5,0x3b
    0x840066ec    0x434    bne s5,a3,ffffffff84006928 <decodeRISCVMMUInvocation+0x670>
    0x840066f0    0x438    srli a5,a5,0x27
    0x840066f2    0x43a    andi a5,a5,1
    0x840066f4    0x43c    beqz a5,ffffffff84006928 <decodeRISCVMMUInvocation+0x670>
    0x840066f8    0x440    ld s7,8(a4)
    0x840066fc    0x444    li a5,-1
    0x840066fe    0x446    srli a2,a5,0x19
    0x84006702    0x44a    srli s10,s7,0x9
    0x84006706    0x44e    srli a4,s10,0x26
    0x8400670a    0x452    andi a4,a4,1
    0x8400670c    0x454    and s10,s10,a2
    0x84006710    0x458    beqz a4,ffffffff84006718 <decodeRISCVMMUInvocation+0x460>
    0x84006712    0x45a    slli a5,a5,0x27
    0x84006714    0x45c    or s10,s10,a5
    0x84006718    0x460    auipc s8,0x1b
    0x8400671c    0x464    addi s8,s8,320 # ffffffff84021858 <ksCurThread>
    0x84006720    0x468    ld a5,0(s8)
    0x84006724    0x46c    srli s6,s7,0x30
    0x84006728    0x470    mv a0,s6
    0x8400672a    0x472    ld a4,96(a5)
    0x8400672c    0x474    ld s11,88(a5)
    0x84006730    0x478    ld s4,104(a5)
    0x84006734    0x47c    sd a4,8(sp)           ; stack access
    0x84006736    0x47e    jal ra,ffffffff840031cc <findVSpaceForASID>
    0x8400673a    0x482    sd a0,80(sp)          ; stack access
    0x8400673c    0x484    sd a1,88(sp)          ; stack access
    0x8400673e    0x486    bnez a0,ffffffff84006aa4 <decodeRISCVMMUInvocation+0x7ec>
    0x84006742    0x48a    bne s10,a1,ffffffff84006928 <decodeRISCVMMUInvocation+0x670>
    0x84006746    0x48e    srli a5,s1,0x39
    0x8400674a    0x492    andi a5,a5,3
    0x8400674c    0x494    li a4,3
    0x8400674e    0x496    beq a5,a4,ffffffff84006b68 <decodeRISCVMMUInvocation+0x8b0>
    0x84006752    0x49a    slli a4,a5,0x3
    0x84006756    0x49e    add a4,a4,a5
    0x84006758    0x4a0    addi a5,a4,12
    0x8400675c    0x4a4    li a6,1
    0x8400675e    0x4a6    lui a2,0xfefff
    0x84006762    0x4aa    addi a1,s11,-1
    0x84006766    0x4ae    sll a0,a6,a5
    0x8400676a    0x4b2    slli a2,a2,0xe
    0x8400676c    0x4b4    add a1,a1,a0
    0x8400676e    0x4b6    srli a2,a2,0x1a
    0x84006770    0x4b8    mv s9,a5
    0x84006772    0x4ba    bltu a2,a1,ffffffff84006aba <decodeRISCVMMUInvocation+0x802>
    0x84006776    0x4be    li a4,-1
    0x84006778    0x4c0    sll a5,a4,a5
    0x8400677c    0x4c4    not a5,a5
    0x84006780    0x4c8    and a5,a5,s11
    0x84006784    0x4cc    bnez a5,ffffffff84006ada <decodeRISCVMMUInvocation+0x822>
    0x84006788    0x4d0    mv a0,s10
    0x8400678a    0x4d2    mv a1,s11
    0x8400678c    0x4d4    jal ra,ffffffff84003ab2 <lookupPTSlot>
    0x84006790    0x4d8    sd a0,64(sp)          ; stack access
    0x84006792    0x4da    sd a1,72(sp)          ; stack access
    0x84006794    0x4dc    mv s10,a0
    0x84006796    0x4de    li a6,1
    0x84006798    0x4e0    li a4,-1
    0x8400679a    0x4e2    bne s9,a1,ffffffff84006ae8 <decodeRISCVMMUInvocation+0x830>
    0x8400679e    0x4e6    srli a5,s2,0x30
    0x840067a2    0x4ea    bnez a5,ffffffff84006b1a <decodeRISCVMMUInvocation+0x862>
    0x840067a6    0x4ee    ld a5,0(a0)
    0x840067a8    0x4f0    andi a5,a5,1
    0x840067aa    0x4f2    bnez a5,ffffffff84006b54 <decodeRISCVMMUInvocation+0x89c>
    0x840067ae    0x4f6    srli a5,s1,0x37
    0x840067b2    0x4fa    andi a5,a5,3
    0x840067b4    0x4fc    li a4,2
    0x840067b6    0x4fe    beq a5,a4,ffffffff84006a94 <decodeRISCVMMUInvocation+0x7dc>
    0x840067ba    0x502    li a4,3
    0x840067bc    0x504    bne a5,a4,ffffffff84006a8e <decodeRISCVMMUInvocation+0x7d6>
    0x840067c0    0x508    ld a5,8(sp)           ; stack access
    0x840067c2    0x50a    li a1,0
    0x840067c4    0x50c    srli a2,a5,0x1
    0x840067c8    0x510    andi a2,a2,1
    0x840067ca    0x512    beqz a2,ffffffff840067d4 <decodeRISCVMMUInvocation+0x51c>
    0x840067cc    0x514    andi a1,a5,1
    0x840067d0    0x518    addi s0,a1,2
    0x840067d4    0x51c    srli a5,s2,0x9
    0x840067d8    0x520    srli a0,a5,0x26
    0x840067dc    0x524    li a4,-1
    0x840067de    0x526    srli a6,a4,0x19
    0x840067e2    0x52a    andi a0,a0,1
    0x840067e4    0x52c    and a5,a5,a6
    0x840067e8    0x530    beqz a0,ffffffff840067ee <decodeRISCVMMUInvocation+0x536>
    0x840067ea    0x532    slli a4,a4,0x27
    0x840067ec    0x534    or a5,a5,a4
    0x840067ee    0x536    li a4,-1
    0x840067f0    0x538    srli a6,a4,0x10
    0x840067f4    0x53c    slli t3,a4,0x30
    0x840067f8    0x540    slli a0,a4,0x27
    0x840067fc    0x544    li a7,1
    0x840067fe    0x546    srli a4,a4,0x19
    0x84006800    0x548    and a0,a0,s1
    0x84006802    0x54a    slli t1,a7,0x26
    0x84006806    0x54e    and s2,s2,a6
    0x8400680a    0x552    and a3,s7,t3
    0x8400680e    0x556    and s11,s11,a4
    0x84006812    0x55a    not s1,s4
    0x84006816    0x55e    add a5,a5,t1
    0x84006818    0x560    or s2,s2,a3
    0x8400681c    0x564    or s11,a0,s11
    0x84006820    0x568    andi s1,s1,1
    0x84006822    0x56a    beq s0,a7,ffffffff84006b62 <decodeRISCVMMUInvocation+0x8aa>
    0x84006826    0x56e    lui a4,0xfff00
    0x8400682a    0x572    srli a5,a5,0x2
    0x8400682c    0x574    srli a4,a4,0xa
    0x8400682e    0x576    slli s1,s1,0x3
    0x84006830    0x578    and a5,a5,a4
    0x84006832    0x57a    or a5,a5,s1
    0x84006834    0x57c    slli a1,a1,0x2
    0x84006836    0x57e    or a5,a5,a1
    0x84006838    0x580    slli a2,a2,0x1
    0x8400683a    0x582    or a5,a5,a2
    0x8400683c    0x584    ori s1,a5,209
    0x84006840    0x588    ld a0,0(s8)
    0x84006844    0x58c    ld a5,280(a0)
    0x84006848    0x590    andi a5,a5,-16
    0x8400684a    0x592    ori a5,a5,2
    0x8400684e    0x596    sd a5,280(a0)
    0x84006852    0x59a    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84006856    0x59e    sd s11,0(s3)
    0x8400685a    0x5a2    sd s2,8(s3)
    0x8400685e    0x5a6    sd s1,0(s10)
    0x84006862    0x5aa    sfence.vma
    0x84006866    0x5ae    li s0,0
    0x84006868    0x5b0    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x8400686a    0x5b2    auipc s8,0x1b
    0x8400686e    0x5b6    addi s8,s8,-18 # ffffffff84021858 <ksCurThread>
    0x84006872    0x5ba    ld a0,0(s8)
    0x84006876    0x5be    ld a5,280(a0)
    0x8400687a    0x5c2    andi a5,a5,-16
    0x8400687c    0x5c4    ori a5,a5,2
    0x84006880    0x5c8    sd a5,280(a0)
    0x84006884    0x5cc    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84006888    0x5d0    srli a5,s2,0x9
    0x8400688c    0x5d4    li a4,-1
    0x8400688e    0x5d6    slli a3,s0,0x26
    0x84006892    0x5da    srli a2,a4,0x19
    0x84006896    0x5de    and a3,a3,a5
    0x84006898    0x5e0    and a5,a5,a2
    0x8400689a    0x5e2    beqz a3,ffffffff840068a0 <decodeRISCVMMUInvocation+0x5e8>
    0x8400689c    0x5e4    slli a4,a4,0x27
    0x8400689e    0x5e6    or a5,a5,a4
    0x840068a0    0x5e8    ld a4,0(s8)
    0x840068a4    0x5ec    li a3,1
    0x840068a6    0x5ee    slli a2,a3,0x26
    0x840068aa    0x5f2    add a5,a5,a2
    0x840068ac    0x5f4    sd a5,88(a4)
    0x840068ae    0x5f6    sd a3,80(a4)
    0x840068b0    0x5f8    li s0,0
    0x840068b2    0x5fa    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x840068b4    0x5fc    auipc a0,0x1b
    0x840068b8    0x600    ld a0,-92(a0) # ffffffff84021858 <ksCurThread>
    0x840068bc    0x604    ld a5,280(a0)
    0x840068c0    0x608    andi a5,a5,-16
    0x840068c2    0x60a    ori a5,a5,2
    0x840068c6    0x60e    sd a5,280(a0)
    0x840068ca    0x612    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840068ce    0x616    ld s0,192(sp)         ; stack access
    0x840068d0    0x618    ld a0,48(sp)          ; stack access
    0x840068d2    0x61a    ld a1,56(sp)          ; stack access
    0x840068d4    0x61c    ld ra,200(sp)         ; stack access
    0x840068d6    0x61e    ld s1,184(sp)         ; stack access
    0x840068d8    0x620    ld s2,176(sp)         ; stack access
    0x840068da    0x622    ld s4,160(sp)         ; stack access
    0x840068dc    0x624    ld s5,152(sp)         ; stack access
    0x840068de    0x626    ld s6,144(sp)         ; stack access
    0x840068e0    0x628    ld s7,136(sp)         ; stack access
    0x840068e2    0x62a    ld s8,128(sp)         ; stack access
    0x840068e4    0x62c    ld s9,120(sp)         ; stack access
    0x840068e6    0x62e    ld s10,112(sp)        ; stack access
    0x840068e8    0x630    ld s11,104(sp)        ; stack access
    0x840068ea    0x632    mv a2,s3
    0x840068ec    0x634    ld s3,168(sp)         ; stack access
    0x840068ee    0x636    addi sp,sp,208
    0x840068f0    0x638    j ffffffff84003ee0 <performPageInvocationUnmap>
    0x840068f4    0x63c    auipc s3,0x8
    0x840068f8    0x640    addi s3,s3,1804 # ffffffff8400f000 <riscvKSASIDTable>
    0x840068fc    0x644    li a5,2
    0x840068fe    0x646    sd a5,1728(s3)
    0x84006902    0x64a    li a5,1
    0x84006904    0x64c    sd a5,1688(s3)
    0x84006908    0x650    li s0,3
    0x8400690a    0x652    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x8400690c    0x654    li a5,7
    0x8400690e    0x656    auipc a4,0x9
    0x84006912    0x65a    sd a5,-590(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006916    0x65e    li s0,3
    0x84006918    0x660    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x8400691a    0x662    li a5,8
    0x8400691c    0x664    auipc a4,0x9
    0x84006920    0x668    sd a5,-604(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006924    0x66c    mv s0,s6
    0x84006926    0x66e    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006928    0x670    auipc a5,0x8
    0x8400692c    0x674    addi a5,a5,1752 # ffffffff8400f000 <riscvKSASIDTable>
    0x84006930    0x678    li a4,2
    0x84006932    0x67a    sd a4,1728(a5)
    0x84006936    0x67e    li a4,1
    0x84006938    0x680    sd a4,1688(a5)
    0x8400693c    0x684    li s0,3
    0x8400693e    0x686    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006940    0x688    auipc a0,0x1b
    0x84006944    0x68c    ld a0,-232(a0) # ffffffff84021858 <ksCurThread>
    0x84006948    0x690    ld a5,280(a0)
    0x8400694c    0x694    andi a5,a5,-16
    0x8400694e    0x696    ori a5,a5,2
    0x84006952    0x69a    sd a5,280(a0)
    0x84006956    0x69e    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400695a    0x6a2    ld a5,8(s4)
    0x8400695e    0x6a6    li a3,-1
    0x84006960    0x6a8    srli a1,a3,0x19
    0x84006964    0x6ac    srli a0,a5,0x9
    0x84006968    0x6b0    srli a2,a0,0x26
    0x8400696c    0x6b4    andi a2,a2,1
    0x8400696e    0x6b6    ld a4,0(s4)
    0x84006972    0x6ba    and a0,a0,a1
    0x84006974    0x6bc    beqz a2,ffffffff8400697a <decodeRISCVMMUInvocation+0x6c2>
    0x84006976    0x6be    slli a3,a3,0x27
    0x84006978    0x6c0    or a0,a0,a3
    0x8400697a    0x6c2    li a3,-1
    0x8400697c    0x6c4    srli a2,a3,0x10
    0x84006980    0x6c8    slli a1,a3,0x28
    0x84006984    0x6cc    and a3,a4,a1
    0x84006988    0x6d0    and a4,a5,a2
    0x8400698c    0x6d4    li a2,1
    0x8400698e    0x6d6    slli a2,a2,0x27
    0x84006990    0x6d8    slli a5,s2,0x30
    0x84006994    0x6dc    or a3,a3,a2
    0x84006996    0x6de    or a5,a5,a4
    0x84006998    0x6e0    auipc a2,0x1e
    0x8400699c    0x6e4    addi a2,a2,1640 # ffffffff84025000 <kernel_root_pageTable>
    0x840069a0    0x6e8    sd a5,8(s4)
    0x840069a4    0x6ec    sd a3,0(s4)
    0x840069a8    0x6f0    auipc a5,0x1f
    0x840069ac    0x6f4    addi a5,a5,-424 # ffffffff84025800 <kernel_root_pageTable+0x800>
    0x840069b0    0x6f8    auipc a1,0x1f
    0x840069b4    0x6fc    addi a1,a1,1616 # ffffffff84026000 <kernel_root_pageTable+0x1000>
    0x840069b8    0x700    sub a2,a0,a2
    0x840069bc    0x704    ld a3,0(a5)
    0x840069be    0x706    add a4,a2,a5
    0x840069c2    0x70a    addi a5,a5,8
    0x840069c4    0x70c    sd a3,0(a4)
    0x840069c6    0x70e    bne a5,a1,ffffffff840069bc <decodeRISCVMMUInvocation+0x704>
    0x840069ca    0x712    andi a5,s2,511
    0x840069ce    0x716    slli a5,a5,0x3
    0x840069d0    0x718    add s5,s5,a5
    0x840069d2    0x71a    sd a0,0(s5)
    0x840069d6    0x71e    li s0,0
    0x840069d8    0x720    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x840069da    0x722    li a5,2
    0x840069dc    0x724    sd a5,1728(s3)
    0x840069e0    0x728    auipc a5,0x9
    0x840069e4    0x72c    sd zero,-840(a5) # ffffffff8400f698 <current_syscall_error+0x8>
    0x840069e8    0x730    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x840069ea    0x732    li a5,7
    0x840069ec    0x734    auipc a4,0x9
    0x840069f0    0x738    sd a5,-812(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840069f4    0x73c    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x840069f6    0x73e    auipc a5,0x8
    0x840069fa    0x742    addi a5,a5,1546 # ffffffff8400f000 <riscvKSASIDTable>
    0x840069fe    0x746    li a4,2
    0x84006a00    0x748    sd a4,1728(a5)
    0x84006a04    0x74c    li a4,1
    0x84006a06    0x74e    sd a4,1688(a5)
    0x84006a0a    0x752    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006a0c    0x754    auipc a5,0x9
    0x84006a10    0x758    sd s0,-844(a5) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006a14    0x75c    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006a16    0x75e    beqz a1,ffffffff8400659a <decodeRISCVMMUInvocation+0x2e2>
    0x84006a1a    0x762    j ffffffff84006590 <decodeRISCVMMUInvocation+0x2d8>
    0x84006a1c    0x764    li a5,6
    0x84006a1e    0x766    sd a5,1728(s3)
    0x84006a22    0x76a    auipc a5,0x9
    0x84006a26    0x76e    sd zero,-874(a5) # ffffffff8400f6b8 <current_syscall_error+0x28>
    0x84006a2a    0x772    auipc a5,0x9
    0x84006a2e    0x776    sd zero,-1578(a5) # ffffffff8400f400 <current_lookup_fault>
    0x84006a32    0x77a    auipc a5,0x9
    0x84006a36    0x77e    sd zero,-1578(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x84006a3a    0x782    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006a3c    0x784    li a5,2
    0x84006a3e    0x786    auipc a4,0x9
    0x84006a42    0x78a    sd a5,-894(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006a46    0x78e    auipc a5,0x9
    0x84006a4a    0x792    sd zero,-942(a5) # ffffffff8400f698 <current_syscall_error+0x8>
    0x84006a4e    0x796    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006a50    0x798    ld a5,88(sp)          ; stack access
    0x84006a52    0x79a    bne a5,s4,ffffffff84006692 <decodeRISCVMMUInvocation+0x3da>
    0x84006a56    0x79e    li a5,9
    0x84006a58    0x7a0    auipc a4,0x9
    0x84006a5c    0x7a4    sd a5,-920(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006a60    0x7a8    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006a62    0x7aa    li a5,1
    0x84006a64    0x7ac    auipc a4,0x9
    0x84006a68    0x7b0    sd a5,-932(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006a6c    0x7b4    mv s0,s6
    0x84006a6e    0x7b6    auipc a5,0x9
    0x84006a72    0x7ba    sd zero,-990(a5) # ffffffff8400f690 <current_syscall_error>
    0x84006a76    0x7be    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006a78    0x7c0    li a5,6
    0x84006a7a    0x7c2    auipc a4,0x9
    0x84006a7e    0x7c6    sd a5,-954(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006a82    0x7ca    mv s0,s6
    0x84006a84    0x7cc    auipc a5,0x9
    0x84006a88    0x7d0    sd zero,-972(a5) # ffffffff8400f6b8 <current_syscall_error+0x28>
    0x84006a8c    0x7d4    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006a8e    0x7d6    li a2,0
    0x84006a90    0x7d8    li a1,0
    0x84006a92    0x7da    j ffffffff840067d4 <decodeRISCVMMUInvocation+0x51c>
    0x84006a94    0x7dc    ld a5,8(sp)           ; stack access
    0x84006a96    0x7de    li a1,0
    0x84006a98    0x7e0    srli a2,a5,0x1
    0x84006a9c    0x7e4    andi a2,a2,1
    0x84006a9e    0x7e6    addi s0,a2,1
    0x84006aa2    0x7ea    j ffffffff840067d4 <decodeRISCVMMUInvocation+0x51c>
    0x84006aa4    0x7ec    li a5,6
    0x84006aa6    0x7ee    auipc a4,0x9
    0x84006aaa    0x7f2    sd a5,-998(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006aae    0x7f6    mv s0,s5
    0x84006ab0    0x7f8    auipc a5,0x9
    0x84006ab4    0x7fc    sd zero,-1016(a5) # ffffffff8400f6b8 <current_syscall_error+0x28>
    0x84006ab8    0x800    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006aba    0x802    li a5,1
    0x84006abc    0x804    auipc a4,0x9
    0x84006ac0    0x808    sd a5,-1020(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006ac4    0x80c    mv s0,s5
    0x84006ac6    0x80e    auipc a5,0x9
    0x84006aca    0x812    sd zero,-1078(a5) # ffffffff8400f690 <current_syscall_error>
    0x84006ace    0x816    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006ad0    0x818    li a5,9
    0x84006ad2    0x81a    sd a5,1728(s3)
    0x84006ad6    0x81e    li s0,3
    0x84006ad8    0x820    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006ada    0x822    li a5,5
    0x84006adc    0x824    auipc a4,0x9
    0x84006ae0    0x828    sd a5,-1052(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006ae4    0x82c    mv s0,s5
    0x84006ae6    0x82e    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006ae8    0x830    slli a5,a1,0x2
    0x84006aec    0x834    andi a5,a5,508
    0x84006af0    0x838    ori a5,a5,1
    0x84006af4    0x83c    auipc a4,0x8
    0x84006af8    0x840    addi a4,a4,1292 # ffffffff8400f000 <riscvKSASIDTable>
    0x84006afc    0x844    sd a5,1024(a4)
    0x84006b00    0x848    auipc a5,0x9
    0x84006b04    0x84c    sd zero,-1784(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x84006b08    0x850    li a5,6
    0x84006b0a    0x852    sd a5,1728(a4)
    0x84006b0e    0x856    mv s0,s5
    0x84006b10    0x858    auipc a5,0x9
    0x84006b14    0x85c    sd zero,-1112(a5) # ffffffff8400f6b8 <current_syscall_error+0x28>
    0x84006b18    0x860    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006b1a    0x862    bne s6,a5,ffffffff84006928 <decodeRISCVMMUInvocation+0x670>
    0x84006b1e    0x866    slli a5,a6,0x26
    0x84006b22    0x86a    srli a2,a4,0x19
    0x84006b26    0x86e    and a5,a5,s1
    0x84006b28    0x870    and a2,a2,s1
    0x84006b2a    0x872    beqz a5,ffffffff84006b30 <decodeRISCVMMUInvocation+0x878>
    0x84006b2c    0x874    slli a4,a4,0x27
    0x84006b2e    0x876    or a2,a2,a4
    0x84006b30    0x878    bne s11,a2,ffffffff84006aba <decodeRISCVMMUInvocation+0x802>
    0x84006b34    0x87c    ld a4,0(s10)
    0x84006b38    0x880    andi a5,a4,1
    0x84006b3c    0x884    beqz a5,ffffffff840067ae <decodeRISCVMMUInvocation+0x4f6>
    0x84006b40    0x888    srli a5,a4,0x1
    0x84006b44    0x88c    srli a2,a4,0x2
    0x84006b48    0x890    or a5,a5,a2
    0x84006b4a    0x892    srli a4,a4,0x3
    0x84006b4c    0x894    or a5,a5,a4
    0x84006b4e    0x896    andi a5,a5,1
    0x84006b50    0x898    bnez a5,ffffffff840067ae <decodeRISCVMMUInvocation+0x4f6>
    0x84006b54    0x89c    li a5,8
    0x84006b56    0x89e    auipc a4,0x9
    0x84006b5a    0x8a2    sd a5,-1174(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84006b5e    0x8a6    mv s0,s5
    0x84006b60    0x8a8    j ffffffff840064ec <decodeRISCVMMUInvocation+0x234>
    0x84006b62    0x8aa    bnez s1,ffffffff84006826 <decodeRISCVMMUInvocation+0x56e>
    0x84006b66    0x8ae    j ffffffff84006840 <decodeRISCVMMUInvocation+0x588>
    0x84006b68    0x8b0    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
744 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1117 nodes.

Section finaliseCap (292 of 296)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 253 instructions.


Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `finaliseCap`:

    0x840075ec      0x0    addi sp,sp,-64
    0x840075ee      0x2    srli a5,a1,0x3b
    0x840075f2      0x6    sd s0,48(sp)          ; stack access
    0x840075f4      0x8    sd ra,56(sp)          ; stack access
    0x840075f6      0xa    sd s1,40(sp)          ; stack access
    0x840075f8      0xc    sd s2,32(sp)          ; stack access
    0x840075fa      0xe    sd a1,16(sp)          ; stack access
    0x840075fc     0x10    sd a2,24(sp)          ; stack access
    0x840075fe     0x12    andi a7,a5,1
    0x84007602     0x16    mv s0,a0
    0x84007604     0x18    bnez a7,ffffffff84007660 <finaliseCap+0x74>
    0x84007608     0x1c    mv a6,a3
    0x8400760a     0x1e    li a3,20
    0x8400760c     0x20    mv s1,a1
    0x8400760e     0x22    bltu a3,a5,ffffffff84007672 <finaliseCap+0x86>
    0x84007612     0x26    auipc a0,0x6
    0x84007616     0x2a    addi a0,a0,1538 # ffffffff8400dc14 <msgRegisters+0x4cc>
    0x8400761a     0x2e    slli a1,a5,0x2
    0x8400761e     0x32    add a1,a1,a0
    0x84007620     0x34    lw a3,0(a1)
    0x84007622     0x36    add a3,a3,a0
    0x84007624     0x38    jr a3
    0x84007626     0x3a    beqz a6,ffffffff84007642 <finaliseCap+0x56>
    0x8400762a     0x3e    li a5,-1
    0x8400762c     0x40    srli a4,s1,0x26
    0x84007630     0x44    srli a0,a5,0x19
    0x84007634     0x48    andi a4,a4,1
    0x84007636     0x4a    and a0,a0,s1
    0x84007638     0x4c    beqz a4,ffffffff8400763e <finaliseCap+0x52>
    0x8400763a     0x4e    slli a5,a5,0x27
    0x8400763c     0x50    or a0,a0,a5
    0x8400763e     0x52    jal ra,ffffffff840052f0 <cancelAllIPC>
    0x84007642     0x56    sd zero,0(s0)         ; stack access
    0x84007646     0x5a    sd zero,8(s0)         ; stack access
    0x8400764a     0x5e    sd zero,16(s0)        ; stack access
    0x8400764e     0x62    sd zero,24(s0)        ; stack access
    0x84007652     0x66    ld ra,56(sp)          ; stack access
    0x84007654     0x68    mv a0,s0
    0x84007656     0x6a    ld s0,48(sp)          ; stack access
    0x84007658     0x6c    ld s1,40(sp)          ; stack access
    0x8400765a     0x6e    ld s2,32(sp)          ; stack access
    0x8400765c     0x70    addi sp,sp,64
    0x8400765e     0x72    ret
    0x84007660     0x74    jal ra,ffffffff84004072 <Arch_finaliseCap>
    0x84007664     0x78    ld ra,56(sp)          ; stack access
    0x84007666     0x7a    mv a0,s0
    0x84007668     0x7c    ld s0,48(sp)          ; stack access
    0x8400766a     0x7e    ld s1,40(sp)          ; stack access
    0x8400766c     0x80    ld s2,32(sp)          ; stack access
    0x8400766e     0x82    addi sp,sp,64
    0x84007670     0x84    ret
    0x84007672     0x86    bnez a4,ffffffff8400789e <finaliseCap+0x2b2>
    0x84007676     0x8a    addi a5,a5,-10
    0x84007678     0x8c    li a4,12
    0x8400767a     0x8e    bltu a4,a5,ffffffff84007642 <finaliseCap+0x56>
    0x8400767e     0x92    auipc a4,0x6
    0x84007682     0x96    addi a4,a4,1514 # ffffffff8400dc68 <msgRegisters+0x520>
    0x84007686     0x9a    slli a5,a5,0x2
    0x84007688     0x9c    add a5,a5,a4
    0x8400768a     0x9e    lw a5,0(a5)
    0x8400768c     0xa0    add a5,a5,a4
    0x8400768e     0xa2    jr a5
    0x84007690     0xa4    beqz a6,ffffffff84007642 <finaliseCap+0x56>
    0x84007694     0xa8    beqz a2,ffffffff84007642 <finaliseCap+0x56>
    0x84007696     0xaa    ld a1,0(a2)
    0x84007698     0xac    beqz a1,ffffffff84007642 <finaliseCap+0x56>
    0x8400769a     0xae    ld a5,280(a1)
    0x8400769e     0xb2    li a3,3
    0x840076a0     0xb4    andi a4,a5,15
    0x840076a4     0xb8    bne a4,a3,ffffffff84007874 <finaliseCap+0x288>
    0x840076a8     0xbc    ld a3,288(a1)
    0x840076ac     0xc0    li a4,-1
    0x840076ae     0xc2    slli a4,a4,0x28
    0x840076b0     0xc4    addi a4,a4,31
    0x840076b2     0xc6    and a4,a4,a3
    0x840076b4     0xc8    sd a4,288(a1)
    0x840076b8     0xcc    sd zero,0(a2)
    0x840076bc     0xd0    andi a5,a5,-16
    0x840076be     0xd2    sd a5,280(a1)
    0x840076c2     0xd6    mv a0,a1
    0x840076c4     0xd8    jal ra,ffffffff84004c6a <scheduleTCB>
    0x840076c8     0xdc    j ffffffff84007642 <finaliseCap+0x56>
    0x840076ca     0xde    beqz a6,ffffffff84007642 <finaliseCap+0x56>
    0x840076ce     0xe2    li a5,-1
    0x840076d0     0xe4    srli a4,s1,0x26
    0x840076d4     0xe8    srli a0,a5,0x19
    0x840076d8     0xec    andi a4,a4,1
    0x840076da     0xee    and a0,a0,s1
    0x840076dc     0xf0    beqz a4,ffffffff840076e2 <finaliseCap+0xf6>
    0x840076de     0xf2    slli a5,a5,0x27
    0x840076e0     0xf4    or a0,a0,a5
    0x840076e2     0xf6    ld a5,32(a0)
    0x840076e4     0xf8    li a4,-1
    0x840076e6     0xfa    srli a2,a4,0x19
    0x840076ea     0xfe    srli a3,a5,0x26
    0x840076ee    0x102    andi a3,a3,1
    0x840076f0    0x104    and a5,a5,a2
    0x840076f2    0x106    beqz a3,ffffffff84007882 <finaliseCap+0x296>
    0x840076f6    0x10a    slli a4,a4,0x27
    0x840076f8    0x10c    or a5,a5,a4
    0x840076fa    0x10e    ld a3,40(a5)
    0x840076fc    0x110    beqz a3,ffffffff8400770a <finaliseCap+0x11e>
    0x840076fe    0x112    ld a4,32(a3)
    0x84007700    0x114    srli a4,a4,0x27
    0x84007702    0x116    slli a4,a4,0x27
    0x84007704    0x118    sd a4,32(a3)
    0x84007706    0x11a    sd zero,40(a5)
    0x8400770a    0x11e    ld a4,24(a0)
    0x8400770c    0x120    li a3,-1
    0x8400770e    0x122    srli a5,a3,0x19
    0x84007712    0x126    srli a2,a4,0x26
    0x84007716    0x12a    andi a2,a2,1
    0x84007718    0x12c    and a5,a5,a4
    0x8400771a    0x12e    beqz a2,ffffffff8400786e <finaliseCap+0x282>
    0x8400771e    0x132    slli a3,a3,0x27
    0x84007720    0x134    or a5,a5,a3
    0x84007722    0x136    srli a4,a4,0x27
    0x84007724    0x138    slli a4,a4,0x27
    0x84007726    0x13a    sd a4,24(a0)
    0x84007728    0x13c    sd zero,304(a5)
    0x8400772c    0x140    jal ra,ffffffff840059f8 <cancelAllSignals>
    0x84007730    0x144    j ffffffff84007642 <finaliseCap+0x56>
    0x84007732    0x146    beqz a6,ffffffff84007642 <finaliseCap+0x56>
    0x84007736    0x14a    srli a2,a2,0x10
    0x84007738    0x14c    li a5,-1
    0x8400773a    0x14e    srli a4,a2,0x26
    0x8400773e    0x152    srli s1,a5,0x19
    0x84007742    0x156    andi a4,a4,1
    0x84007744    0x158    and s1,s1,a2
    0x84007746    0x15a    beqz a4,ffffffff84007888 <finaliseCap+0x29c>
    0x8400774a    0x15e    slli a5,a5,0x27
    0x8400774c    0x160    or s1,s1,a5
    0x8400774e    0x162    mv a0,s1
    0x84007750    0x164    jal ra,ffffffff8400721e <schedContext_unbindAllTCBs>
    0x84007754    0x168    ld a4,40(s1)
    0x84007756    0x16a    beqz a4,ffffffff84007764 <finaliseCap+0x178>
    0x84007758    0x16c    ld a5,32(a4)
    0x8400775a    0x16e    srli a5,a5,0x27
    0x8400775c    0x170    slli a5,a5,0x27
    0x8400775e    0x172    sd a5,32(a4)
    0x84007760    0x174    sd zero,40(s1)
    0x84007764    0x178    ld a5,32(s1)
    0x84007766    0x17a    beqz a5,ffffffff84007770 <finaliseCap+0x184>
    0x84007768    0x17c    sd zero,16(a5)
    0x8400776c    0x180    sd zero,32(s1)
    0x84007770    0x184    ld a0,56(s1)
    0x84007772    0x186    beqz a0,ffffffff84007778 <finaliseCap+0x18c>
    0x84007774    0x188    jal ra,ffffffff84007548 <schedContext_completeYieldTo>
    0x84007778    0x18c    sd zero,64(s1)
    0x8400777c    0x190    j ffffffff84007642 <finaliseCap+0x56>
    0x8400777e    0x192    sd s1,0(s0)
    0x84007780    0x194    sd a2,8(s0)
    0x84007782    0x196    sd zero,16(s0)
    0x84007786    0x19a    sd zero,24(s0)
    0x8400778a    0x19e    j ffffffff84007652 <finaliseCap+0x66>
    0x8400778c    0x1a0    beqz a6,ffffffff84007642 <finaliseCap+0x56>
    0x84007790    0x1a4    srli a3,s1,0x26
    0x84007794    0x1a8    li a4,-1
    0x84007796    0x1aa    srli a5,a4,0x19
    0x8400779a    0x1ae    andi a3,a3,1
    0x8400779c    0x1b0    and s1,s1,a5
    0x8400779e    0x1b2    beqz a3,ffffffff840077a4 <finaliseCap+0x1b8>
    0x840077a0    0x1b4    slli a4,a4,0x27
    0x840077a2    0x1b6    or s1,s1,a4
    0x840077a4    0x1b8    ld a4,304(s1)
    0x840077a8    0x1bc    andi s2,s1,-1024
    0x840077ac    0x1c0    beqz a4,ffffffff840077ba <finaliseCap+0x1ce>
    0x840077ae    0x1c2    ld a5,24(a4)
    0x840077b0    0x1c4    srli a5,a5,0x27
    0x840077b2    0x1c6    slli a5,a5,0x27
    0x840077b4    0x1c8    sd a5,24(a4)
    0x840077b6    0x1ca    sd zero,304(s1)
    0x840077ba    0x1ce    ld a5,368(s1)
    0x840077be    0x1d2    beqz a5,ffffffff840077d0 <finaliseCap+0x1e4>
    0x840077c0    0x1d4    ld a0,56(a5)
    0x840077c2    0x1d6    jal ra,ffffffff84007548 <schedContext_completeYieldTo>
    0x840077c6    0x1da    ld a0,368(s1)
    0x840077ca    0x1de    mv a1,s1
    0x840077cc    0x1e0    jal ra,ffffffff840071a0 <schedContext_unbindTCB>
    0x840077d0    0x1e4    mv a0,s1
    0x840077d2    0x1e6    jal ra,ffffffff840070f4 <suspend>
    0x840077d6    0x1ea    li a5,-7
    0x840077d8    0x1ec    slli a5,a5,0x3c
    0x840077da    0x1ee    xori s2,s2,5
    0x840077de    0x1f2    addi a5,a5,64
    0x840077e2    0x1f6    sd a5,0(s0)
    0x840077e4    0x1f8    sd s2,8(s0)
    0x840077e8    0x1fc    sd zero,16(s0)
    0x840077ec    0x200    sd zero,24(s0)
    0x840077f0    0x204    j ffffffff84007652 <finaliseCap+0x66>
    0x840077f2    0x206    beqz a6,ffffffff84007642 <finaliseCap+0x56>
    0x840077f6    0x20a    li a2,1
    0x840077f8    0x20c    srli a4,s1,0x2f
    0x840077fc    0x210    andi a1,a4,63
    0x84007800    0x214    slli a5,s1,0x1
    0x84007804    0x218    slli a0,a2,0x26
    0x84007808    0x21c    lui a4,0xfc000
    0x8400780c    0x220    srli a4,a4,0x19
    0x8400780e    0x222    and a0,a0,a5
    0x84007810    0x224    mv a3,a1
    0x84007812    0x226    sll a2,a2,a1
    0x84007816    0x22a    and a4,a4,a5
    0x84007818    0x22c    beqz a0,ffffffff84007820 <finaliseCap+0x234>
    0x8400781a    0x22e    li a5,-1
    0x8400781c    0x230    slli a5,a5,0x27
    0x8400781e    0x232    or a4,a4,a5
    0x84007820    0x234    addiw a1,a1,1
    0x84007822    0x236    li a5,-1
    0x84007824    0x238    sll a5,a5,a1
    0x84007828    0x23c    xor a2,a2,a4
    0x8400782a    0x23e    not a5,a5
    0x8400782e    0x242    and a5,a5,a2
    0x84007830    0x244    li a2,-7
    0x84007832    0x246    slli a2,a2,0x3c
    0x84007834    0x248    or a3,a3,a2
    0x84007836    0x24a    xor a5,a5,a4
    0x84007838    0x24c    sd a3,0(s0)
    0x8400783a    0x24e    sd a5,8(s0)
    0x8400783c    0x250    sd zero,16(s0)
    0x84007840    0x254    sd zero,24(s0)
    0x84007844    0x258    j ffffffff84007652 <finaliseCap+0x66>
    0x84007846    0x25a    beqz a6,ffffffff84007642 <finaliseCap+0x56>
    0x8400784a    0x25e    slli a0,a2,0x34
    0x8400784e    0x262    auipc a5,0x8
    0x84007852    0x266    addi a5,a5,1970 # ffffffff84010000 <intStateIRQNode>
    0x84007856    0x26a    srli a0,a0,0x2f
    0x84007858    0x26c    add a0,a0,a5
    0x8400785a    0x26e    ld a5,0(a0)
    0x8400785c    0x270    srli a5,a5,0x3b
    0x8400785e    0x272    bnez a5,ffffffff84007894 <finaliseCap+0x2a8>
    0x84007860    0x274    sd zero,0(s0)
    0x84007864    0x278    sd zero,8(s0)
    0x84007868    0x27c    sd s1,16(s0)
    0x8400786a    0x27e    sd a2,24(s0)
    0x8400786c    0x280    j ffffffff84007652 <finaliseCap+0x66>
    0x8400786e    0x282    beqz a5,ffffffff8400772c <finaliseCap+0x140>
    0x84007872    0x286    j ffffffff84007722 <finaliseCap+0x136>
    0x84007874    0x288    li a5,5
    0x84007876    0x28a    bne a4,a5,ffffffff8400789e <finaliseCap+0x2b2>
    0x8400787a    0x28e    mv a0,a2
    0x8400787c    0x290    jal ra,ffffffff84007464 <reply_remove>
    0x84007880    0x294    j ffffffff84007642 <finaliseCap+0x56>
    0x84007882    0x296    beqz a5,ffffffff8400770a <finaliseCap+0x11e>
    0x84007886    0x29a    j ffffffff840076fa <finaliseCap+0x10e>
    0x84007888    0x29c    mv a0,s1
    0x8400788a    0x29e    jal ra,ffffffff8400721e <schedContext_unbindAllTCBs>
    0x8400788e    0x2a2    beqz s1,ffffffff84007764 <finaliseCap+0x178>
    0x84007892    0x2a6    j ffffffff84007754 <finaliseCap+0x168>
    0x84007894    0x2a8    sd a2,8(sp)
    0x84007896    0x2aa    jal ra,ffffffff840078a2 <cteDeleteOne.part.0>
    0x8400789a    0x2ae    ld a2,8(sp)
    0x8400789c    0x2b0    j ffffffff84007860 <finaliseCap+0x274>
    0x8400789e    0x2b2    jal ra,ffffffff840036cc <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
253 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 403 nodes.

Section decodeCNodeInvocation (293 of 296)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 416 instructions.


Stack analysis
---------------

99 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x8400961e      0x0    addi sp,sp,-240
    0x84009620      0x2    sd s2,208(sp)         ; stack access
    0x84009622      0x4    sd ra,232(sp)         ; stack access
    0x84009624      0x6    sd s0,224(sp)         ; stack access
    0x84009626      0x8    sd s1,216(sp)         ; stack access
    0x84009628      0xa    sd s3,200(sp)         ; stack access
    0x8400962a      0xc    sd s4,192(sp)         ; stack access
    0x8400962c      0xe    sd s5,184(sp)         ; stack access
    0x8400962e     0x10    sd s6,176(sp)         ; stack access
    0x84009630     0x12    sd s7,168(sp)         ; stack access
    0x84009632     0x14    sd s8,160(sp)         ; stack access
    0x84009634     0x16    sd s9,152(sp)         ; stack access
    0x84009636     0x18    sd s10,144(sp)        ; stack access
    0x84009638     0x1a    sd a2,0(sp)           ; stack access
    0x8400963a     0x1c    sd a3,8(sp)           ; stack access
    0x8400963c     0x1e    addi a5,a0,-17
    0x84009640     0x22    li s2,7
    0x84009642     0x24    bltu s2,a5,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x84009646     0x28    li s6,1
    0x84009648     0x2a    mv s4,a1
    0x8400964a     0x2c    bgeu s6,a1,ffffffff84009766 <decodeCNodeInvocation+0x148>
    0x8400964e     0x30    auipc s5,0x18
    0x84009652     0x34    addi s5,s5,522 # ffffffff84021858 <ksCurThread>
    0x84009656     0x38    ld a1,0(s5)
    0x8400965a     0x3c    mv a5,a3
    0x8400965c     0x3e    mv s1,a4
    0x8400965e     0x40    ld a3,88(a1)
    0x84009660     0x42    ld a4,96(a1)
    0x84009662     0x44    mv s3,a0
    0x84009664     0x46    mv a1,a2
    0x84009666     0x48    li a0,0
    0x84009668     0x4a    mv a2,a5
    0x8400966a     0x4c    sd a1,112(sp)         ; stack access
    0x8400966c     0x4e    sd a5,120(sp)         ; stack access
    0x8400966e     0x50    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x84009672     0x54    sd a0,48(sp)          ; stack access
    0x84009674     0x56    sd a1,56(sp)          ; stack access
    0x84009676     0x58    mv s0,a0
    0x84009678     0x5a    mv s7,a1
    0x8400967a     0x5c    bnez a0,ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x8400967c     0x5e    addi a5,s3,-20 # fffffffff7ffffec <ki_end+0x73fd8fec>
    0x84009680     0x62    li a4,3
    0x84009682     0x64    bltu a4,a5,ffffffff84009772 <decodeCNodeInvocation+0x154>
    0x84009686     0x68    bgeu a4,s4,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x8400968a     0x6c    auipc a5,0x6
    0x8400968e     0x70    ld a5,886(a5) # ffffffff8400fa00 <current_extra_caps>
    0x84009692     0x74    beqz a5,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x84009696     0x78    ld a4,0(a1)
    0x84009698     0x7a    srli a4,a4,0x3b
    0x8400969a     0x7c    bnez a4,ffffffff8400993e <decodeCNodeInvocation+0x320>
    0x8400969e     0x80    ld a4,0(s5)
    0x840096a2     0x84    ld a2,8(a5)
    0x840096a4     0x86    ld a1,0(a5)
    0x840096a6     0x88    ld s8,112(a4) # fffffffff8000070 <ki_end+0x73fd9070>
    0x840096aa     0x8c    ld a3,104(a4)
    0x840096ac     0x8e    li a0,1
    0x840096ae     0x90    mv a4,s8
    0x840096b0     0x92    sd a1,112(sp)         ; stack access
    0x840096b2     0x94    sd a2,120(sp)         ; stack access
    0x840096b4     0x96    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x840096b8     0x9a    sd a0,64(sp)          ; stack access
    0x840096ba     0x9c    sd a1,72(sp)          ; stack access
    0x840096bc     0x9e    mv s0,a0
    0x840096be     0xa0    mv s2,a1
    0x840096c0     0xa2    bnez a0,ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840096c2     0xa4    ld s9,0(a1)
    0x840096c6     0xa8    srli a5,s9,0x3b
    0x840096ca     0xac    beqz a5,ffffffff840098ac <decodeCNodeInvocation+0x28e>
    0x840096ce     0xb0    li a5,22
    0x840096d0     0xb2    beq s3,a5,ffffffff84009a36 <decodeCNodeInvocation+0x418>
    0x840096d4     0xb6    li a5,23
    0x840096d6     0xb8    beq s3,a5,ffffffff840099ee <decodeCNodeInvocation+0x3d0>
    0x840096da     0xbc    li a5,21
    0x840096dc     0xbe    beq s3,a5,ffffffff840099b2 <decodeCNodeInvocation+0x394>
    0x840096e0     0xc2    li a5,4
    0x840096e2     0xc4    beq s4,a5,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x840096e6     0xc8    ld a2,8(a1)
    0x840096e8     0xca    ld a0,40(s1)
    0x840096ea     0xcc    ld a1,0(a1)
    0x840096ec     0xce    jal ra,ffffffff84006bee <maskCapRights>
    0x840096f0     0xd2    mv a2,a0
    0x840096f2     0xd4    mv a3,a1
    0x840096f4     0xd6    addi a0,sp,112
    0x840096f6     0xd8    mv a1,s2
    0x840096f8     0xda    sd a2,80(sp)          ; stack access
    0x840096fa     0xdc    sd a3,88(sp)          ; stack access
    0x840096fc     0xde    jal ra,ffffffff84006146 <deriveCap>
    0x84009700     0xe2    ld a5,112(sp)         ; stack access
    0x84009702     0xe4    bnez a5,ffffffff840099ea <decodeCNodeInvocation+0x3cc>
    0x84009706     0xe8    ld s1,120(sp)         ; stack access
    0x84009708     0xea    ld a5,128(sp)         ; stack access
    0x8400970a     0xec    sd s1,16(sp)          ; stack access
    0x8400970c     0xee    sd a5,24(sp)          ; stack access
    0x8400970e     0xf0    srli a5,s1,0x3b
    0x84009712     0xf4    beqz a5,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x84009714     0xf6    ld a0,0(s5)
    0x84009718     0xfa    ld a5,280(a0)
    0x8400971c     0xfe    andi a5,a5,-16
    0x8400971e    0x100    ori a5,a5,2
    0x84009722    0x104    sd a5,280(a0)
    0x84009726    0x108    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400972a    0x10c    ld a1,24(sp)          ; stack access
    0x8400972c    0x10e    mv a3,s7
    0x8400972e    0x110    mv a2,s2
    0x84009730    0x112    mv a0,s1
    0x84009732    0x114    sd s1,96(sp)          ; stack access
    0x84009734    0x116    sd a1,104(sp)         ; stack access
    0x84009736    0x118    jal ra,ffffffff84004ec2 <cteInsert>
    0x8400973a    0x11c    ld ra,232(sp)         ; stack access
    0x8400973c    0x11e    mv a0,s0
    0x8400973e    0x120    ld s0,224(sp)         ; stack access
    0x84009740    0x122    ld s1,216(sp)         ; stack access
    0x84009742    0x124    ld s2,208(sp)         ; stack access
    0x84009744    0x126    ld s3,200(sp)         ; stack access
    0x84009746    0x128    ld s4,192(sp)         ; stack access
    0x84009748    0x12a    ld s5,184(sp)         ; stack access
    0x8400974a    0x12c    ld s6,176(sp)         ; stack access
    0x8400974c    0x12e    ld s7,168(sp)         ; stack access
    0x8400974e    0x130    ld s8,160(sp)         ; stack access
    0x84009750    0x132    ld s9,152(sp)         ; stack access
    0x84009752    0x134    ld s10,144(sp)        ; stack access
    0x84009754    0x136    addi sp,sp,240
    0x84009756    0x138    ret
    0x84009758    0x13a    li a5,3
    0x8400975a    0x13c    auipc a4,0x6
    0x8400975e    0x140    sd a5,-154(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84009762    0x144    li s0,3
    0x84009764    0x146    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x84009766    0x148    auipc a5,0x6
    0x8400976a    0x14c    sd s2,-166(a5) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400976e    0x150    li s0,3
    0x84009770    0x152    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x84009772    0x154    li a5,17
    0x84009774    0x156    beq s3,a5,ffffffff8400994c <decodeCNodeInvocation+0x32e>
    0x84009778    0x15a    li a5,18
    0x8400977a    0x15c    beq s3,a5,ffffffff84009980 <decodeCNodeInvocation+0x362>
    0x8400977e    0x160    li a5,19
    0x84009780    0x162    beq s3,a5,ffffffff840098da <decodeCNodeInvocation+0x2bc>
    0x84009784    0x166    li a5,24
    0x84009786    0x168    bne s3,a5,ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x8400978a    0x16c    bgeu s2,s4,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x8400978e    0x170    auipc a4,0x7
    0x84009792    0x174    addi a4,a4,-1934 # ffffffff84010000 <intStateIRQNode>
    0x84009796    0x178    ld a5,-1536(a4)
    0x8400979a    0x17c    beqz a5,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x8400979e    0x180    ld a4,-1528(a4)
    0x840097a2    0x184    beqz a4,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x840097a6    0x188    ld s2,64(s1)
    0x840097aa    0x18c    ld a2,8(a4)
    0x840097ac    0x18e    ld a1,0(a4)
    0x840097ae    0x190    ld a6,0(s5)
    0x840097b2    0x194    ld a3,56(s1)
    0x840097b4    0x196    mv a4,s2
    0x840097b6    0x198    li a0,1
    0x840097b8    0x19a    ld s3,40(s1)
    0x840097bc    0x19e    ld s8,48(s1)
    0x840097c0    0x1a2    ld s6,104(a6)
    0x840097c4    0x1a6    ld s4,112(a6)
    0x840097c8    0x1aa    ld s10,0(a5)
    0x840097cc    0x1ae    ld s9,8(a5)
    0x840097d0    0x1b2    sd a1,112(sp)         ; stack access
    0x840097d2    0x1b4    sd a2,120(sp)         ; stack access
    0x840097d4    0x1b6    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x840097d8    0x1ba    sd a0,80(sp)          ; stack access
    0x840097da    0x1bc    sd a1,88(sp)          ; stack access
    0x840097dc    0x1be    mv s0,a0
    0x840097de    0x1c0    mv s1,a1
    0x840097e0    0x1c2    bnez a0,ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840097e2    0x1c4    mv a3,s4
    0x840097e4    0x1c6    mv a4,s3
    0x840097e6    0x1c8    mv a1,s10
    0x840097e8    0x1ca    mv a2,s9
    0x840097ea    0x1cc    li a0,1
    0x840097ec    0x1ce    sd s10,96(sp)         ; stack access
    0x840097ee    0x1d0    sd s9,104(sp)         ; stack access
    0x840097f0    0x1d2    jal ra,ffffffff84004592 <lookupSlotForCNodeOp>
    0x840097f4    0x1d6    sd a0,112(sp)         ; stack access
    0x840097f6    0x1d8    sd a1,120(sp)         ; stack access
    0x840097f8    0x1da    mv s0,a0
    0x840097fa    0x1dc    mv s4,a1
    0x840097fc    0x1de    bnez a0,ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840097fe    0x1e0    beq a1,s1,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x84009802    0x1e4    beq a1,s7,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x84009806    0x1e8    beq s7,s1,ffffffff84009814 <decodeCNodeInvocation+0x1f6>
    0x8400980a    0x1ec    ld a5,0(s7)
    0x8400980e    0x1f0    srli a5,a5,0x3b
    0x84009810    0x1f2    bnez a5,ffffffff8400993e <decodeCNodeInvocation+0x320>
    0x84009814    0x1f6    ld a2,0(s1)
    0x84009816    0x1f8    srli a5,a2,0x3b
    0x8400981a    0x1fc    beqz a5,ffffffff84009a40 <decodeCNodeInvocation+0x422>
    0x8400981e    0x200    ld s2,0(s4)
    0x84009822    0x204    srli a5,s2,0x3b
    0x84009826    0x208    beqz a5,ffffffff84009a70 <decodeCNodeInvocation+0x452>
    0x8400982a    0x20c    ld a3,8(s1)
    0x8400982c    0x20e    mv a1,s8
    0x8400982e    0x210    li a0,1
    0x84009830    0x212    jal ra,ffffffff84006b76 <updateCapData>
    0x84009834    0x216    ld a3,8(s4)
    0x84009838    0x21a    mv s0,a0
    0x8400983a    0x21c    mv a5,a1
    0x8400983c    0x21e    mv a2,s2
    0x8400983e    0x220    mv a1,s6
    0x84009840    0x222    li a0,1
    0x84009842    0x224    sd s0,64(sp)          ; stack access
    0x84009844    0x226    sd a5,72(sp)          ; stack access
    0x84009846    0x228    jal ra,ffffffff84006b76 <updateCapData>
    0x8400984a    0x22c    sd a0,96(sp)          ; stack access
    0x8400984c    0x22e    sd a1,104(sp)         ; stack access
    0x8400984e    0x230    srli s0,s0,0x3b
    0x84009850    0x232    beqz s0,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x84009854    0x236    srli a5,a0,0x3b
    0x84009858    0x23a    beqz a5,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x8400985c    0x23e    ld a0,0(s5)
    0x84009860    0x242    ld a5,280(a0)
    0x84009864    0x246    andi a5,a5,-16
    0x84009866    0x248    ori a5,a5,2
    0x8400986a    0x24c    sd a5,280(a0)
    0x8400986e    0x250    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009872    0x254    ld s0,224(sp)         ; stack access
    0x84009874    0x256    ld a2,96(sp)          ; stack access
    0x84009876    0x258    ld a3,104(sp)         ; stack access
    0x84009878    0x25a    ld a0,64(sp)          ; stack access
    0x8400987a    0x25c    ld a1,72(sp)          ; stack access
    0x8400987c    0x25e    ld ra,232(sp)         ; stack access
    0x8400987e    0x260    ld s2,208(sp)         ; stack access
    0x84009880    0x262    ld s3,200(sp)         ; stack access
    0x84009882    0x264    ld s5,184(sp)         ; stack access
    0x84009884    0x266    ld s6,176(sp)         ; stack access
    0x84009886    0x268    ld s8,160(sp)         ; stack access
    0x84009888    0x26a    ld s9,152(sp)         ; stack access
    0x8400988a    0x26c    ld s10,144(sp)        ; stack access
    0x8400988c    0x26e    mv a6,s7
    0x8400988e    0x270    mv a5,s4
    0x84009890    0x272    ld s7,168(sp)         ; stack access
    0x84009892    0x274    ld s4,192(sp)         ; stack access
    0x84009894    0x276    mv a4,s1
    0x84009896    0x278    ld s1,216(sp)         ; stack access
    0x84009898    0x27a    addi sp,sp,240
    0x8400989a    0x27c    j ffffffff840050e6 <invokeCNodeRotate>
    0x8400989e    0x280    li a5,7
    0x840098a0    0x282    auipc a4,0x6
    0x840098a4    0x286    sd a5,-480(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x840098a8    0x28a    li s0,3
    0x840098aa    0x28c    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840098ac    0x28e    slli a5,s8,0x2
    0x840098b0    0x292    andi a5,a5,508
    0x840098b4    0x296    auipc a4,0x5
    0x840098b8    0x29a    addi a4,a4,1868 # ffffffff8400f000 <riscvKSASIDTable>
    0x840098bc    0x29e    ori a5,a5,1
    0x840098c0    0x2a2    li a3,6
    0x840098c2    0x2a4    sd a5,1024(a4)
    0x840098c6    0x2a8    sd a3,1728(a4)
    0x840098ca    0x2ac    sd s6,1720(a4)
    0x840098ce    0x2b0    auipc a5,0x6
    0x840098d2    0x2b4    sd zero,-1222(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x840098d6    0x2b8    li s0,3
    0x840098d8    0x2ba    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840098da    0x2bc    ld s1,0(a1)
    0x840098dc    0x2be    li a5,4
    0x840098de    0x2c0    srli a3,s1,0x3b
    0x840098e2    0x2c4    bne a3,a5,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x840098e6    0x2c8    slli a4,a4,0x37
    0x840098e8    0x2ca    and a5,s1,a4
    0x840098ec    0x2ce    bne a5,a4,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x840098f0    0x2d2    srli a5,s1,0x3a
    0x840098f4    0x2d6    li a4,8
    0x840098f6    0x2d8    beq a5,a4,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x840098fa    0x2dc    srli a5,s1,0x39
    0x840098fe    0x2e0    andi a5,a5,1
    0x84009900    0x2e2    ld s2,8(a1)
    0x84009904    0x2e6    beqz a5,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x84009908    0x2ea    ld a0,0(s5)
    0x8400990c    0x2ee    ld a5,280(a0)
    0x84009910    0x2f2    andi a5,a5,-16
    0x84009912    0x2f4    ori a5,a5,2
    0x84009916    0x2f8    sd a5,280(a0)
    0x8400991a    0x2fc    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400991e    0x300    beqz s2,ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x84009922    0x304    li a5,-1
    0x84009924    0x306    srli a4,s1,0x26
    0x84009928    0x30a    srli a0,a5,0x19
    0x8400992c    0x30e    andi a4,a4,1
    0x8400992e    0x310    and a0,a0,s1
    0x84009930    0x312    beqz a4,ffffffff84009936 <decodeCNodeInvocation+0x318>
    0x84009932    0x314    slli a5,a5,0x27
    0x84009934    0x316    or a0,a0,a5
    0x84009936    0x318    mv a1,s2
    0x84009938    0x31a    jal ra,ffffffff84005414 <cancelBadgedSends>
    0x8400993c    0x31e    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x8400993e    0x320    li a5,8
    0x84009940    0x322    auipc a4,0x6
    0x84009944    0x326    sd a5,-640(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x84009948    0x32a    li s0,3
    0x8400994a    0x32c    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x8400994c    0x32e    ld a0,0(s5)
    0x84009950    0x332    ld a5,280(a0)
    0x84009954    0x336    andi a5,a5,-16
    0x84009956    0x338    ori a5,a5,2
    0x8400995a    0x33c    sd a5,280(a0)
    0x8400995e    0x340    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009962    0x344    ld s0,224(sp)         ; stack access
    0x84009964    0x346    ld ra,232(sp)         ; stack access
    0x84009966    0x348    ld s1,216(sp)         ; stack access
    0x84009968    0x34a    ld s2,208(sp)         ; stack access
    0x8400996a    0x34c    ld s3,200(sp)         ; stack access
    0x8400996c    0x34e    ld s4,192(sp)         ; stack access
    0x8400996e    0x350    ld s5,184(sp)         ; stack access
    0x84009970    0x352    ld s6,176(sp)         ; stack access
    0x84009972    0x354    ld s8,160(sp)         ; stack access
    0x84009974    0x356    ld s9,152(sp)         ; stack access
    0x84009976    0x358    ld s10,144(sp)        ; stack access
    0x84009978    0x35a    mv a0,s7
    0x8400997a    0x35c    ld s7,168(sp)         ; stack access
    0x8400997c    0x35e    addi sp,sp,240
    0x8400997e    0x360    j ffffffff84009588 <cteRevoke>
    0x84009980    0x362    ld a0,0(s5)
    0x84009984    0x366    ld a5,280(a0)
    0x84009988    0x36a    andi a5,a5,-16
    0x8400998a    0x36c    ori a5,a5,2
    0x8400998e    0x370    sd a5,280(a0)
    0x84009992    0x374    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009996    0x378    li a2,1
    0x84009998    0x37a    mv a1,s7
    0x8400999a    0x37c    addi a0,sp,112
    0x8400999c    0x37e    jal ra,ffffffff84009308 <finaliseSlot>
    0x840099a0    0x382    ld s0,112(sp)         ; stack access
    0x840099a2    0x384    bnez s0,ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840099a6    0x388    ld a1,128(sp)         ; stack access
    0x840099a8    0x38a    ld a2,136(sp)         ; stack access
    0x840099aa    0x38c    mv a0,s7
    0x840099ac    0x38e    jal ra,ffffffff8400340c <emptySlot>
    0x840099b0    0x392    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840099b2    0x394    li a5,5
    0x840099b4    0x396    bgeu a5,s4,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x840099b8    0x39a    ld a2,8(a1)
    0x840099ba    0x39c    ld a0,40(s1)
    0x840099bc    0x39e    ld a1,0(a1)
    0x840099be    0x3a0    ld s1,48(s1)
    0x840099c0    0x3a2    jal ra,ffffffff84006bee <maskCapRights>
    0x840099c4    0x3a6    mv a2,a0
    0x840099c6    0x3a8    mv a3,a1
    0x840099c8    0x3aa    li a0,0
    0x840099ca    0x3ac    mv a1,s1
    0x840099cc    0x3ae    sd a2,80(sp)          ; stack access
    0x840099ce    0x3b0    sd a3,88(sp)          ; stack access
    0x840099d0    0x3b2    jal ra,ffffffff84006b76 <updateCapData>
    0x840099d4    0x3b6    mv a2,a0
    0x840099d6    0x3b8    mv a3,a1
    0x840099d8    0x3ba    addi a0,sp,112
    0x840099da    0x3bc    mv a1,s2
    0x840099dc    0x3be    sd a2,32(sp)          ; stack access
    0x840099de    0x3c0    sd a3,40(sp)          ; stack access
    0x840099e0    0x3c2    jal ra,ffffffff84006146 <deriveCap>
    0x840099e4    0x3c6    ld a5,112(sp)         ; stack access
    0x840099e6    0x3c8    beqz a5,ffffffff84009706 <decodeCNodeInvocation+0xe8>
    0x840099ea    0x3cc    mv s0,a5
    0x840099ec    0x3ce    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x840099ee    0x3d0    li a5,4
    0x840099f0    0x3d2    beq s4,a5,ffffffff8400989e <decodeCNodeInvocation+0x280>
    0x840099f4    0x3d6    ld a2,0(a1)
    0x840099f6    0x3d8    ld a3,8(a1)
    0x840099f8    0x3da    ld a1,40(s1)
    0x840099fa    0x3dc    li a0,1
    0x840099fc    0x3de    jal ra,ffffffff84006b76 <updateCapData>
    0x84009a00    0x3e2    sd a0,16(sp)          ; stack access
    0x84009a02    0x3e4    sd a1,24(sp)          ; stack access
    0x84009a04    0x3e6    srli a5,a0,0x3b
    0x84009a08    0x3ea    mv s9,a0
    0x84009a0a    0x3ec    beqz a5,ffffffff84009758 <decodeCNodeInvocation+0x13a>
    0x84009a0e    0x3f0    ld a0,0(s5)
    0x84009a12    0x3f4    ld a5,280(a0)
    0x84009a16    0x3f8    andi a5,a5,-16
    0x84009a18    0x3fa    ori a5,a5,2
    0x84009a1c    0x3fe    sd a5,280(a0)
    0x84009a20    0x402    jal ra,ffffffff84004c6a <scheduleTCB>
    0x84009a24    0x406    ld a1,24(sp)          ; stack access
    0x84009a26    0x408    mv a3,s7
    0x84009a28    0x40a    mv a2,s2
    0x84009a2a    0x40c    mv a0,s9
    0x84009a2c    0x40e    sd s9,112(sp)         ; stack access
    0x84009a2e    0x410    sd a1,120(sp)         ; stack access
    0x84009a30    0x412    jal ra,ffffffff84004ff0 <cteMove>
    0x84009a34    0x416    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x84009a36    0x418    ld a4,0(a1)
    0x84009a38    0x41a    ld a5,8(a1)
    0x84009a3a    0x41c    sd a4,16(sp)          ; stack access
    0x84009a3c    0x41e    sd a5,24(sp)          ; stack access
    0x84009a3e    0x420    j ffffffff84009a0e <decodeCNodeInvocation+0x3f0>
    0x84009a40    0x422    slli a5,s2,0x2
    0x84009a44    0x426    auipc a4,0x5
    0x84009a48    0x42a    addi a4,a4,1468 # ffffffff8400f000 <riscvKSASIDTable>
    0x84009a4c    0x42e    li a3,6
    0x84009a4e    0x430    andi a5,a5,508
    0x84009a52    0x434    ori a5,a5,1
    0x84009a56    0x438    sd a3,1728(a4)
    0x84009a5a    0x43c    li a3,1
    0x84009a5c    0x43e    sd a5,1024(a4)
    0x84009a60    0x442    sd a3,1720(a4)
    0x84009a64    0x446    auipc a5,0x6
    0x84009a68    0x44a    sd zero,-1628(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x84009a6c    0x44e    li s0,3
    0x84009a6e    0x450    j ffffffff8400973a <decodeCNodeInvocation+0x11c>
    0x84009a70    0x452    slli a5,s3,0x2
    0x84009a74    0x456    andi a5,a5,508
    0x84009a78    0x45a    auipc a4,0x5
    0x84009a7c    0x45e    addi a4,a4,1416 # ffffffff8400f000 <riscvKSASIDTable>
    0x84009a80    0x462    ori a5,a5,1
    0x84009a84    0x466    li a3,6
    0x84009a86    0x468    sd a3,1728(a4)
    0x84009a8a    0x46c    sd a5,1024(a4)
    0x84009a8e    0x470    auipc a3,0x6
    0x84009a92    0x474    sd zero,-982(a3) # ffffffff8400f6b8 <current_syscall_error+0x28>
    0x84009a96    0x478    auipc a5,0x6
    0x84009a9a    0x47c    sd zero,-1678(a5) # ffffffff8400f408 <current_lookup_fault+0x8>
    0x84009a9e    0x480    li s0,3
    0x84009aa0    0x482    j ffffffff8400973a <decodeCNodeInvocation+0x11c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
416 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 704 nodes.

Section decodeInvocation (294 of 296)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 244 instructions.

RVC_TFFFFFT__FFFFFTF.

Stack analysis
---------------

29 stack accesses found. Annotated code for `decodeInvocation`:

    0x8400bec4      0x0    addi sp,sp,-96
    0x8400bec6      0x2    srli t1,a4,0x3b
    0x8400beca      0x6    sd s2,64(sp)          ; stack access
    0x8400becc      0x8    sd s5,40(sp)          ; stack access
    0x8400bece      0xa    sd ra,88(sp)          ; stack access
    0x8400bed0      0xc    sd s0,80(sp)          ; stack access
    0x8400bed2      0xe    sd s1,72(sp)          ; stack access
    0x8400bed4     0x10    sd s3,56(sp)          ; stack access
    0x8400bed6     0x12    sd s4,48(sp)          ; stack access
    0x8400bed8     0x14    sd s6,32(sp)          ; stack access
    0x8400beda     0x16    sd a4,0(sp)           ; stack access
    0x8400bedc     0x18    sd a5,8(sp)           ; stack access
    0x8400bede     0x1a    andi s2,t1,1
    0x8400bee2     0x1e    ld s5,96(sp)          ; stack access
    0x8400bee4     0x20    ld t0,104(sp)         ; stack access
    0x8400bee6     0x22    ld t6,112(sp)         ; stack access
    0x8400bee8     0x24    bnez s2,ffffffff8400bf10 <decodeInvocation+0x4c>
    0x8400beec     0x28    mv s1,a5
    0x8400beee     0x2a    li a5,24
    0x8400bef0     0x2c    bltu a5,t1,ffffffff8400c11a <decodeInvocation+0x256>
    0x8400bef4     0x30    auipc a5,0x2
    0x8400bef8     0x34    addi a5,a5,-468 # ffffffff8400dd20 <msgRegisters+0x5d8>
    0x8400befc     0x38    slli t1,t1,0x2
    0x8400befe     0x3a    add t1,t1,a5
    0x8400bf00     0x3c    lw t1,0(t1)
    0x8400bf04     0x40    mv s0,a4
    0x8400bf06     0x42    mv t5,a1
    0x8400bf08     0x44    add t1,t1,a5
    0x8400bf0a     0x46    mv t4,a3
    0x8400bf0c     0x48    mv s3,a7
    0x8400bf0e     0x4a    jr t1
    0x8400bf10     0x4c    ld s0,80(sp)          ; stack access
    0x8400bf12     0x4e    ld ra,88(sp)          ; stack access
    0x8400bf14     0x50    ld s1,72(sp)          ; stack access
    0x8400bf16     0x52    ld s2,64(sp)          ; stack access
    0x8400bf18     0x54    ld s3,56(sp)          ; stack access
    0x8400bf1a     0x56    ld s4,48(sp)          ; stack access
    0x8400bf1c     0x58    ld s5,40(sp)          ; stack access
    0x8400bf1e     0x5a    ld s6,32(sp)          ; stack access
    0x8400bf20     0x5c    mv a6,t6
    0x8400bf22     0x5e    addi sp,sp,96
    0x8400bf24     0x60    j ffffffff840062b8 <decodeRISCVMMUInvocation>
    0x8400bf28     0x64    li a5,2
    0x8400bf2a     0x66    auipc a4,0x3
    0x8400bf2e     0x6a    sd a5,1942(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400bf32     0x6e    li s2,3
    0x8400bf34     0x70    auipc a5,0x3
    0x8400bf38     0x74    sd zero,1892(a5) # ffffffff8400f698 <current_syscall_error+0x8>
    0x8400bf3c     0x78    ld ra,88(sp)
    0x8400bf3e     0x7a    ld s0,80(sp)
    0x8400bf40     0x7c    ld s1,72(sp)
    0x8400bf42     0x7e    ld s3,56(sp)
    0x8400bf44     0x80    ld s4,48(sp)
    0x8400bf46     0x82    ld s5,40(sp)
    0x8400bf48     0x84    ld s6,32(sp)
    0x8400bf4a     0x86    mv a0,s2
    0x8400bf4c     0x88    ld s2,64(sp)
    0x8400bf4e     0x8a    addi sp,sp,96
    0x8400bf50     0x8c    ret
    0x8400bf52     0x8e    bnez t0,ffffffff8400bf28 <decodeInvocation+0x64>
    0x8400bf56     0x92    li a5,30
    0x8400bf58     0x94    beq a0,a5,ffffffff8400c11e <decodeInvocation+0x25a>
    0x8400bf5c     0x98    li a5,3
    0x8400bf5e     0x9a    auipc a4,0x3
    0x8400bf62     0x9e    sd a5,1890(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400bf66     0xa2    li s2,3
    0x8400bf68     0xa4    j ffffffff8400bf3c <decodeInvocation+0x78>
    0x8400bf6a     0xa6    bnez t0,ffffffff8400bf28 <decodeInvocation+0x64>
    0x8400bf6e     0xaa    ld s0,80(sp)
    0x8400bf70     0xac    ld ra,88(sp)
    0x8400bf72     0xae    ld s1,72(sp)
    0x8400bf74     0xb0    ld s2,64(sp)
    0x8400bf76     0xb2    ld s3,56(sp)
    0x8400bf78     0xb4    ld s4,48(sp)
    0x8400bf7a     0xb6    ld s5,40(sp)
    0x8400bf7c     0xb8    ld s6,32(sp)
    0x8400bf7e     0xba    mv a2,t6
    0x8400bf80     0xbc    addi sp,sp,96
    0x8400bf82     0xbe    j ffffffff8400a58e <decodeDomainInvocation>
    0x8400bf86     0xc2    bnez t0,ffffffff8400bf28 <decodeInvocation+0x64>
    0x8400bf8a     0xc6    ld s0,80(sp)
    0x8400bf8c     0xc8    ld a1,0(sp)
    0x8400bf8e     0xca    ld a2,8(sp)
    0x8400bf90     0xcc    ld ra,88(sp)
    0x8400bf92     0xce    ld s1,72(sp)
    0x8400bf94     0xd0    ld s2,64(sp)
    0x8400bf96     0xd2    ld s3,56(sp)
    0x8400bf98     0xd4    ld s4,48(sp)
    0x8400bf9a     0xd6    ld s5,40(sp)
    0x8400bf9c     0xd8    ld s6,32(sp)
    0x8400bf9e     0xda    mv a3,t6
    0x8400bfa0     0xdc    addi sp,sp,96
    0x8400bfa2     0xde    j ffffffff84008688 <decodeSchedContextInvocation>
    0x8400bfa6     0xe2    auipc s3,0x16
    0x8400bfaa     0xe6    addi s3,s3,-1870 # ffffffff84021858 <ksCurThread>
    0x8400bfae     0xea    ld a0,0(s3)
    0x8400bfb2     0xee    srli s0,s0,0x3a
    0x8400bfb4     0xf0    ld a5,280(a0)
    0x8400bfb8     0xf4    andi a5,a5,-16
    0x8400bfba     0xf6    ori a5,a5,2
    0x8400bfbe     0xfa    sd a5,280(a0)
    0x8400bfc2     0xfe    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400bfc6    0x102    ld a0,0(s3)
    0x8400bfca    0x106    andi a2,s0,1
    0x8400bfce    0x10a    mv a1,s1
    0x8400bfd0    0x10c    jal ra,ffffffff84009bba <doReplyTransfer>
    0x8400bfd4    0x110    j ffffffff8400bf3c <decodeInvocation+0x78>
    0x8400bfd6    0x112    bnez t0,ffffffff8400bf28 <decodeInvocation+0x64>
    0x8400bfda    0x116    ld s0,80(sp)
    0x8400bfdc    0x118    ld a2,0(sp)
    0x8400bfde    0x11a    ld a3,8(sp)
    0x8400bfe0    0x11c    ld ra,88(sp)
    0x8400bfe2    0x11e    ld s1,72(sp)
    0x8400bfe4    0x120    ld s2,64(sp)
    0x8400bfe6    0x122    ld s3,56(sp)
    0x8400bfe8    0x124    ld s4,48(sp)
    0x8400bfea    0x126    ld s5,40(sp)
    0x8400bfec    0x128    ld s6,32(sp)
    0x8400bfee    0x12a    mv a4,t6
    0x8400bff0    0x12c    addi sp,sp,96
    0x8400bff2    0x12e    j ffffffff8400961e <decodeCNodeInvocation>
    0x8400bff6    0x132    bnez t0,ffffffff8400bf28 <decodeInvocation+0x64>
    0x8400bffa    0x136    ld s0,80(sp)
    0x8400bffc    0x138    ld a2,0(sp)
    0x8400bffe    0x13a    ld a3,8(sp)
    0x8400c000    0x13c    ld ra,88(sp)
    0x8400c002    0x13e    ld s1,72(sp)
    0x8400c004    0x140    ld s2,64(sp)
    0x8400c006    0x142    ld s3,56(sp)
    0x8400c008    0x144    ld s4,48(sp)
    0x8400c00a    0x146    ld s5,40(sp)
    0x8400c00c    0x148    ld s6,32(sp)
    0x8400c00e    0x14a    mv a6,t6
    0x8400c010    0x14c    mv a5,a7
    0x8400c012    0x14e    mv a4,t4
    0x8400c014    0x150    addi sp,sp,96
    0x8400c016    0x152    j ffffffff8400b75c <decodeTCBInvocation>
    0x8400c01a    0x156    ld s0,80(sp)
    0x8400c01c    0x158    ld ra,88(sp)
    0x8400c01e    0x15a    ld s1,72(sp)
    0x8400c020    0x15c    ld s2,64(sp)
    0x8400c022    0x15e    ld s3,56(sp)
    0x8400c024    0x160    ld s4,48(sp)
    0x8400c026    0x162    ld s5,40(sp)
    0x8400c028    0x164    ld s6,32(sp)
    0x8400c02a    0x166    mv a3,t6
    0x8400c02c    0x168    mv a2,t4
    0x8400c02e    0x16a    addi sp,sp,96
    0x8400c030    0x16c    j ffffffff840057fa <decodeIRQControlInvocation>
    0x8400c034    0x170    srli s2,a4,0x37
    0x8400c038    0x174    not s2,s2
    0x8400c03c    0x178    andi s2,s2,1
    0x8400c040    0x17c    bnez s2,ffffffff8400bf28 <decodeInvocation+0x64>
    0x8400c044    0x180    auipc s6,0x16
    0x8400c048    0x184    addi s6,s6,-2028 # ffffffff84021858 <ksCurThread>
    0x8400c04c    0x188    ld a0,0(s6)
    0x8400c050    0x18c    mv s4,a6
    0x8400c052    0x18e    ld a5,280(a0)
    0x8400c056    0x192    andi a5,a5,-16
    0x8400c058    0x194    ori a5,a5,2
    0x8400c05c    0x198    sd a5,280(a0)
    0x8400c060    0x19c    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400c064    0x1a0    li a4,-1
    0x8400c066    0x1a2    srli a5,s0,0x26
    0x8400c06a    0x1a6    srli a7,a4,0x19
    0x8400c06e    0x1aa    andi a5,a5,1
    0x8400c070    0x1ac    and a7,s0,a7
    0x8400c074    0x1b0    beqz a5,ffffffff8400c07c <decodeInvocation+0x1b8>
    0x8400c076    0x1b2    slli a4,a4,0x27
    0x8400c078    0x1b4    or a7,a7,a4
    0x8400c07c    0x1b8    ld a6,0(s6)
    0x8400c080    0x1bc    srli a4,s0,0x3a
    0x8400c084    0x1c0    srli a3,s0,0x39
    0x8400c088    0x1c4    mv a5,s5
    0x8400c08a    0x1c6    andi a4,a4,1
    0x8400c08c    0x1c8    andi a3,a3,1
    0x8400c08e    0x1ca    mv a2,s1
    0x8400c090    0x1cc    mv a1,s3
    0x8400c092    0x1ce    mv a0,s4
    0x8400c094    0x1d0    jal ra,ffffffff84008d4a <sendIPC>
    0x8400c098    0x1d4    j ffffffff8400bf3c <decodeInvocation+0x78>
    0x8400c09a    0x1d6    srli s2,a4,0x39
    0x8400c09e    0x1da    not s2,s2
    0x8400c0a2    0x1de    andi s2,s2,1
    0x8400c0a6    0x1e2    bnez s2,ffffffff8400bf28 <decodeInvocation+0x64>
    0x8400c0aa    0x1e6    auipc a0,0x15
    0x8400c0ae    0x1ea    ld a0,1966(a0) # ffffffff84021858 <ksCurThread>
    0x8400c0b2    0x1ee    ld a5,280(a0)
    0x8400c0b6    0x1f2    andi a5,a5,-16
    0x8400c0b8    0x1f4    ori a5,a5,2
    0x8400c0bc    0x1f8    sd a5,280(a0)
    0x8400c0c0    0x1fc    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400c0c4    0x200    li a5,-1
    0x8400c0c6    0x202    srli a4,s0,0x26
    0x8400c0ca    0x206    srli a0,a5,0x19
    0x8400c0ce    0x20a    andi a4,a4,1
    0x8400c0d0    0x20c    and a0,a0,s0
    0x8400c0d2    0x20e    beqz a4,ffffffff8400c0d8 <decodeInvocation+0x214>
    0x8400c0d4    0x210    slli a5,a5,0x27
    0x8400c0d6    0x212    or a0,a0,a5
    0x8400c0d8    0x214    mv a1,s1
    0x8400c0da    0x216    jal ra,ffffffff8400830a <sendSignal>
    0x8400c0de    0x21a    j ffffffff8400bf3c <decodeInvocation+0x78>
    0x8400c0e0    0x21c    ld s0,80(sp)
    0x8400c0e2    0x21e    ld a3,0(sp)
    0x8400c0e4    0x220    ld a4,8(sp)
    0x8400c0e6    0x222    ld ra,88(sp)
    0x8400c0e8    0x224    ld s1,72(sp)
    0x8400c0ea    0x226    ld s2,64(sp)
    0x8400c0ec    0x228    ld s3,56(sp)
    0x8400c0ee    0x22a    ld s4,48(sp)
    0x8400c0f0    0x22c    ld s5,40(sp)
    0x8400c0f2    0x22e    ld s6,32(sp)
    0x8400c0f4    0x230    mv a6,t6
    0x8400c0f6    0x232    mv a5,a7
    0x8400c0f8    0x234    mv a2,t4
    0x8400c0fa    0x236    addi sp,sp,96
    0x8400c0fc    0x238    j ffffffff8400bb98 <decodeUntypedInvocation>
    0x8400c0fe    0x23a    ld s0,80(sp)
    0x8400c100    0x23c    ld ra,88(sp)
    0x8400c102    0x23e    ld s2,64(sp)
    0x8400c104    0x240    ld s3,56(sp)
    0x8400c106    0x242    ld s4,48(sp)
    0x8400c108    0x244    ld s5,40(sp)
    0x8400c10a    0x246    ld s6,32(sp)
    0x8400c10c    0x248    slli a1,s1,0x34
    0x8400c110    0x24c    ld s1,72(sp)
    0x8400c112    0x24e    srli a1,a1,0x34
    0x8400c114    0x250    addi sp,sp,96
    0x8400c116    0x252    j ffffffff8400794c <decodeIRQHandlerInvocation>
    0x8400c11a    0x256    jal ra,ffffffff840036cc <halt>
    0x8400c11e    0x25a    ld s0,80(sp)          ; stack access
    0x8400c120    0x25c    ld ra,88(sp)          ; stack access
    0x8400c122    0x25e    ld s2,64(sp)          ; stack access
    0x8400c124    0x260    ld s3,56(sp)          ; stack access
    0x8400c126    0x262    ld s4,48(sp)          ; stack access
    0x8400c128    0x264    ld s5,40(sp)          ; stack access
    0x8400c12a    0x266    ld s6,32(sp)          ; stack access
    0x8400c12c    0x268    mv a1,s1
    0x8400c12e    0x26a    ld s1,72(sp)          ; stack access
    0x8400c130    0x26c    mv a2,t6
    0x8400c132    0x26e    mv a0,t5
    0x8400c134    0x270    addi sp,sp,96
    0x8400c136    0x272    j ffffffff84007d8c <decodeSchedControl_Configure.isra.0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
244 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 402 nodes.

Section decodeTCBInvocation (295 of 296)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 203 instructions.

RVC_TFFFT____FFFFFTF.

Stack analysis
---------------

8 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x8400b75c      0x0    addi sp,sp,-64
    0x8400b75e      0x2    sd ra,56(sp)          ; stack access
    0x8400b760      0x4    sd s0,48(sp)          ; stack access
    0x8400b762      0x6    sd s1,40(sp)          ; stack access
    0x8400b764      0x8    sd a2,16(sp)          ; stack access
    0x8400b766      0xa    sd a3,24(sp)          ; stack access
    0x8400b768      0xc    li a7,16
    0x8400b76a      0xe    bltu a7,a0,ffffffff8400b942 <decodeTCBInvocation+0x1e6>
    0x8400b76e     0x12    mv a3,a4
    0x8400b770     0x14    slli a0,a0,0x2
    0x8400b772     0x16    auipc a4,0x2
    0x8400b776     0x1a    addi a4,a4,1342 # ffffffff8400dcb0 <msgRegisters+0x568>
    0x8400b77a     0x1e    add a0,a0,a4
    0x8400b77c     0x20    lw a7,0(a0)
    0x8400b780     0x24    mv t1,a2
    0x8400b782     0x26    mv a2,a1
    0x8400b784     0x28    add a7,a7,a4
    0x8400b786     0x2a    jr a7
    0x8400b788     0x2c    beqz a1,ffffffff8400b950 <decodeTCBInvocation+0x1f4>
    0x8400b78c     0x30    auipc s0,0x16
    0x8400b790     0x34    addi s0,s0,204 # ffffffff84021858 <ksCurThread>
    0x8400b794     0x38    ld a0,0(s0)
    0x8400b796     0x3a    sd t1,8(sp)
    0x8400b798     0x3c    ld a5,280(a0)
    0x8400b79c     0x40    ld s1,88(a0)
    0x8400b79e     0x42    andi a5,a5,-16
    0x8400b7a0     0x44    ori a5,a5,2
    0x8400b7a4     0x48    sd a5,280(a0)
    0x8400b7a8     0x4c    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400b7ac     0x50    ld t1,8(sp)
    0x8400b7ae     0x52    li a5,-1
    0x8400b7b0     0x54    srli a3,a5,0x19
    0x8400b7b4     0x58    srli a4,t1,0x26
    0x8400b7b8     0x5c    andi a4,a4,1
    0x8400b7ba     0x5e    and t1,t1,a3
    0x8400b7be     0x62    beqz a4,ffffffff8400b7c6 <decodeTCBInvocation+0x6a>
    0x8400b7c0     0x64    slli a5,a5,0x27
    0x8400b7c2     0x66    or t1,t1,a5
    0x8400b7c6     0x6a    ld a5,0(s0)
    0x8400b7c8     0x6c    sd s1,24(t1)
    0x8400b7cc     0x70    li a0,0
    0x8400b7ce     0x72    bne t1,a5,ffffffff8400b8c6 <decodeTCBInvocation+0x16a>
    0x8400b7d2     0x76    sd a0,8(sp)
    0x8400b7d4     0x78    jal ra,ffffffff84004c1c <rescheduleRequired>
    0x8400b7d8     0x7c    ld a0,8(sp)
    0x8400b7da     0x7e    j ffffffff8400b8c6 <decodeTCBInvocation+0x16a>
    0x8400b7dc     0x80    ld s0,48(sp)
    0x8400b7de     0x82    ld a0,16(sp)
    0x8400b7e0     0x84    ld a1,24(sp)
    0x8400b7e2     0x86    ld ra,56(sp)
    0x8400b7e4     0x88    ld s1,40(sp)
    0x8400b7e6     0x8a    mv a4,a6
    0x8400b7e8     0x8c    mv a3,a5
    0x8400b7ea     0x8e    addi sp,sp,64
    0x8400b7ec     0x90    j ffffffff8400b4d2 <decodeReadRegisters>
    0x8400b7ee     0x92    ld s0,48(sp)
    0x8400b7f0     0x94    ld a0,16(sp)
    0x8400b7f2     0x96    ld a1,24(sp)
    0x8400b7f4     0x98    ld ra,56(sp)
    0x8400b7f6     0x9a    ld s1,40(sp)
    0x8400b7f8     0x9c    mv a3,a6
    0x8400b7fa     0x9e    addi sp,sp,64
    0x8400b7fc     0xa0    j ffffffff8400b6a8 <decodeWriteRegisters>
    0x8400b7fe     0xa2    ld s0,48(sp)
    0x8400b800     0xa4    ld a0,16(sp)
    0x8400b802     0xa6    ld a1,24(sp)
    0x8400b804     0xa8    ld ra,56(sp)
    0x8400b806     0xaa    ld s1,40(sp)
    0x8400b808     0xac    mv a3,a6
    0x8400b80a     0xae    addi sp,sp,64
    0x8400b80c     0xb0    j ffffffff8400b27e <decodeCopyRegisters>
    0x8400b80e     0xb2    ld s0,48(sp)
    0x8400b810     0xb4    ld a0,16(sp)
    0x8400b812     0xb6    ld a1,24(sp)
    0x8400b814     0xb8    ld ra,56(sp)
    0x8400b816     0xba    ld s1,40(sp)
    0x8400b818     0xbc    mv a4,a6
    0x8400b81a     0xbe    addi sp,sp,64
    0x8400b81c     0xc0    j ffffffff8400aaee <decodeTCBConfigure>
    0x8400b820     0xc4    ld s0,48(sp)
    0x8400b822     0xc6    ld a0,16(sp)
    0x8400b824     0xc8    ld a1,24(sp)
    0x8400b826     0xca    ld ra,56(sp)
    0x8400b828     0xcc    ld s1,40(sp)
    0x8400b82a     0xce    mv a3,a6
    0x8400b82c     0xd0    addi sp,sp,64
    0x8400b82e     0xd2    j ffffffff8400a152 <decodeSetPriority>
    0x8400b832     0xd6    ld s0,48(sp)
    0x8400b834     0xd8    ld a0,16(sp)
    0x8400b836     0xda    ld a1,24(sp)
    0x8400b838     0xdc    ld ra,56(sp)
    0x8400b83a     0xde    ld s1,40(sp)
    0x8400b83c     0xe0    mv a3,a6
    0x8400b83e     0xe2    addi sp,sp,64
    0x8400b840     0xe4    j ffffffff8400a23c <decodeSetMCPriority>
    0x8400b844     0xe8    ld s0,48(sp)
    0x8400b846     0xea    ld a0,16(sp)
    0x8400b848     0xec    ld a1,24(sp)
    0x8400b84a     0xee    ld ra,56(sp)
    0x8400b84c     0xf0    ld s1,40(sp)
    0x8400b84e     0xf2    mv a4,a6
    0x8400b850     0xf4    addi sp,sp,64
    0x8400b852     0xf6    j ffffffff8400b00a <decodeSetSchedParams>
    0x8400b856     0xfa    ld s0,48(sp)
    0x8400b858     0xfc    ld a0,16(sp)
    0x8400b85a     0xfe    ld a1,24(sp)
    0x8400b85c    0x100    ld ra,56(sp)
    0x8400b85e    0x102    ld s1,40(sp)
    0x8400b860    0x104    mv a2,a3
    0x8400b862    0x106    addi sp,sp,64
    0x8400b864    0x108    j ffffffff8400a32a <decodeSetTimeoutEndpoint>
    0x8400b868    0x10c    ld s0,48(sp)
    0x8400b86a    0x10e    ld a0,16(sp)
    0x8400b86c    0x110    ld a1,24(sp)
    0x8400b86e    0x112    ld ra,56(sp)
    0x8400b870    0x114    ld s1,40(sp)
    0x8400b872    0x116    mv a4,a6
    0x8400b874    0x118    addi sp,sp,64
    0x8400b876    0x11a    j ffffffff8400a428 <decodeSetIPCBuffer>
    0x8400b87a    0x11e    ld s0,48(sp)
    0x8400b87c    0x120    ld a0,16(sp)
    0x8400b87e    0x122    ld a1,24(sp)
    0x8400b880    0x124    ld ra,56(sp)
    0x8400b882    0x126    ld s1,40(sp)
    0x8400b884    0x128    mv a4,a6
    0x8400b886    0x12a    addi sp,sp,64
    0x8400b888    0x12c    j ffffffff8400ad1e <decodeSetSpace>
    0x8400b88c    0x130    auipc a0,0x16
    0x8400b890    0x134    ld a0,-52(a0) # ffffffff84021858 <ksCurThread>
    0x8400b894    0x138    ld a5,280(a0)
    0x8400b898    0x13c    sd t1,8(sp)
    0x8400b89a    0x13e    andi a5,a5,-16
    0x8400b89c    0x140    ori a5,a5,2
    0x8400b8a0    0x144    sd a5,280(a0)
    0x8400b8a4    0x148    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400b8a8    0x14c    ld t1,8(sp)
    0x8400b8aa    0x14e    li a5,-1
    0x8400b8ac    0x150    srli a0,a5,0x19
    0x8400b8b0    0x154    srli a4,t1,0x26
    0x8400b8b4    0x158    andi a4,a4,1
    0x8400b8b6    0x15a    and a0,t1,a0
    0x8400b8ba    0x15e    beqz a4,ffffffff8400b8c0 <decodeTCBInvocation+0x164>
    0x8400b8bc    0x160    slli a5,a5,0x27
    0x8400b8be    0x162    or a0,a0,a5
    0x8400b8c0    0x164    jal ra,ffffffff840070f4 <suspend>
    0x8400b8c4    0x168    li a0,0
    0x8400b8c6    0x16a    ld ra,56(sp)          ; stack access
    0x8400b8c8    0x16c    ld s0,48(sp)          ; stack access
    0x8400b8ca    0x16e    ld s1,40(sp)          ; stack access
    0x8400b8cc    0x170    addi sp,sp,64
    0x8400b8ce    0x172    ret
    0x8400b8d0    0x174    auipc a0,0x16
    0x8400b8d4    0x178    ld a0,-120(a0) # ffffffff84021858 <ksCurThread>
    0x8400b8d8    0x17c    ld a5,280(a0)
    0x8400b8dc    0x180    sd t1,8(sp)
    0x8400b8de    0x182    andi a5,a5,-16
    0x8400b8e0    0x184    ori a5,a5,2
    0x8400b8e4    0x188    sd a5,280(a0)
    0x8400b8e8    0x18c    jal ra,ffffffff84004c6a <scheduleTCB>
    0x8400b8ec    0x190    ld t1,8(sp)
    0x8400b8ee    0x192    li a5,-1
    0x8400b8f0    0x194    srli a0,a5,0x19
    0x8400b8f4    0x198    srli a4,t1,0x26
    0x8400b8f8    0x19c    andi a4,a4,1
    0x8400b8fa    0x19e    and t1,t1,a0
    0x8400b8fe    0x1a2    beqz a4,ffffffff8400b906 <decodeTCBInvocation+0x1aa>
    0x8400b900    0x1a4    slli a5,a5,0x27
    0x8400b902    0x1a6    or t1,t1,a5
    0x8400b906    0x1aa    ld a5,280(t1)
    0x8400b90a    0x1ae    andi a5,a5,15
    0x8400b90c    0x1b0    beqz a5,ffffffff8400b918 <decodeTCBInvocation+0x1bc>
    0x8400b90e    0x1b2    addi a5,a5,-3
    0x8400b910    0x1b4    li a4,3
    0x8400b912    0x1b6    li a0,0
    0x8400b914    0x1b8    bltu a4,a5,ffffffff8400b8c6 <decodeTCBInvocation+0x16a>
    0x8400b918    0x1bc    mv a0,t1
    0x8400b91a    0x1be    jal ra,ffffffff84007cf2 <restart.part.0>
    0x8400b91e    0x1c2    li a0,0
    0x8400b920    0x1c4    j ffffffff8400b8c6 <decodeTCBInvocation+0x16a>
    0x8400b922    0x1c6    ld s0,48(sp)
    0x8400b924    0x1c8    ld a0,16(sp)
    0x8400b926    0x1ca    ld a1,24(sp)
    0x8400b928    0x1cc    ld ra,56(sp)
    0x8400b92a    0x1ce    ld s1,40(sp)
    0x8400b92c    0x1d0    addi sp,sp,64
    0x8400b92e    0x1d2    j ffffffff8400a6de <decodeBindNotification>
    0x8400b932    0x1d6    ld s0,48(sp)
    0x8400b934    0x1d8    ld a0,16(sp)
    0x8400b936    0x1da    ld a1,24(sp)
    0x8400b938    0x1dc    ld ra,56(sp)
    0x8400b93a    0x1de    ld s1,40(sp)
    0x8400b93c    0x1e0    addi sp,sp,64
    0x8400b93e    0x1e2    j ffffffff8400a7d8 <decodeUnbindNotification>
    0x8400b942    0x1e6    li a5,3
    0x8400b944    0x1e8    auipc a4,0x4
    0x8400b948    0x1ec    sd a5,-644(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b94c    0x1f0    li a0,3
    0x8400b94e    0x1f2    j ffffffff8400b8c6 <decodeTCBInvocation+0x16a>
    0x8400b950    0x1f4    li a5,7
    0x8400b952    0x1f6    auipc a4,0x4
    0x8400b956    0x1fa    sd a5,-658(a4) # ffffffff8400f6c0 <current_syscall_error+0x30>
    0x8400b95a    0x1fe    li a0,3
    0x8400b95c    0x200    j ffffffff8400b8c6 <decodeTCBInvocation+0x16a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
203 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 331 nodes.

Section init_kernel (296 of 296)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 479 instructions.

RVC_FTTFT____FFFT_FT.
Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 10579073 csrw stvec,a5

Skipping 1047a7f3 csrrs a5,sie,a5

Skipping 1007b073 csrc sstatus,a5

Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5

Skipping c01027f3 rdtime a5

Skipping c01027f3 rdtime a5

Skipping c01027f3 rdtime a5


Stack analysis
---------------

97 stack accesses found. Annotated code for `init_kernel`:

    0x84001ca2      0x0    addi sp,sp,-320
    0x84001ca4      0x2    sd s11,216(sp)        ; stack access
    0x84001ca6      0x4    sd ra,312(sp)         ; stack access
    0x84001ca8      0x6    sd s0,304(sp)         ; stack access
    0x84001caa      0x8    sd s1,296(sp)         ; stack access
    0x84001cac      0xa    sd s2,288(sp)         ; stack access
    0x84001cae      0xc    sd s3,280(sp)         ; stack access
    0x84001cb0      0xe    sd s4,272(sp)         ; stack access
    0x84001cb2     0x10    sd s5,264(sp)         ; stack access
    0x84001cb4     0x12    sd s6,256(sp)         ; stack access
    0x84001cb6     0x14    sd s7,248(sp)         ; stack access
    0x84001cb8     0x16    sd s8,240(sp)         ; stack access
    0x84001cba     0x18    sd s9,232(sp)         ; stack access
    0x84001cbc     0x1a    sd s10,224(sp)        ; stack access
    0x84001cbe     0x1c    sd a3,24(sp)          ; stack access
    0x84001cc0     0x1e    mv s11,a4
    0x84001cc2     0x20    beqz a4,ffffffff84001f86 <init_kernel+0x2e4>
    0x84001cc6     0x24    slli a5,a5,0x20
    0x84001cc8     0x26    srli a5,a5,0x20
    0x84001cca     0x28    add s1,a5,a4
    0x84001cce     0x2c    addi s1,s1,-1
    0x84001cd0     0x2e    srli s1,s1,0xc
    0x84001cd2     0x30    addi s1,s1,1
    0x84001cd4     0x32    slli s1,s1,0xc
    0x84001cd6     0x34    slli s4,a2,0x20
    0x84001cda     0x38    srli s4,s4,0x20
    0x84001cde     0x3c    sub s6,s1,a4
    0x84001ce2     0x40    li a5,-1
    0x84001ce4     0x42    slli a5,a5,0x26
    0x84001ce6     0x44    sub s9,a1,s4
    0x84001cea     0x48    lui s7,0x2
    0x84001cec     0x4a    addi s6,s6,16
    0x84001cee     0x4c    add s10,a0,a5
    0x84001cf2     0x50    add s3,a1,a5
    0x84001cf6     0x54    sub s2,a0,s4
    0x84001cfa     0x58    add s7,s7,s9
    0x84001cfc     0x5a    add s0,a4,a5
    0x84001d00     0x5e    add s1,s1,a5
    0x84001d02     0x60    beqz s6,ffffffff84002204 <init_kernel+0x562>
    0x84001d06     0x64    addi a0,s6,-1
    0x84001d0a     0x68    srli a0,a0,0xc
    0x84001d0c     0x6a    addi a0,a0,1
    0x84001d0e     0x6c    slli a0,a0,0xc
    0x84001d10     0x6e    jal ra,ffffffff8400c4ac <__clzdi2>
    0x84001d14     0x72    li s11,63
    0x84001d18     0x76    sub s11,s11,a0
    0x84001d1c     0x7a    li a5,1
    0x84001d1e     0x7c    sll s5,a5,s11
    0x84001d22     0x80    bltu s5,s6,ffffffff84001fae <init_kernel+0x30c>
    0x84001d26     0x84    jal ra,ffffffff840008a4 <map_kernel_window>
    0x84001d2a     0x88    li a3,1
    0x84001d2c     0x8a    slli a3,a3,0x20
    0x84001d2e     0x8c    auipc a5,0x23
    0x84001d32     0x90    addi a5,a5,722 # ffffffff84025000 <kernel_root_pageTable>
    0x84001d36     0x94    li a4,-1
    0x84001d38     0x96    add a5,a5,a3
    0x84001d3a     0x98    srli a5,a5,0xc
    0x84001d3c     0x9a    srli a3,a4,0x14
    0x84001d40     0x9e    and a5,a5,a3
    0x84001d42     0xa0    slli a4,a4,0x3f
    0x84001d44     0xa2    add s5,s5,s7
    0x84001d46     0xa4    or a5,a5,a4
    0x84001d48     0xa6    csrw satp,a5
    0x84001d4c     0xaa    sfence.vma
    0x84001d50     0xae    auipc a5,0x1
    0x84001d54     0xb2    addi a5,a5,688 # ffffffff84003000 <ki_boot_end>
    0x84001d58     0xb6    csrw stvec,a5
    0x84001d5c     0xba    lui a1,0xc0002
    0x84001d60     0xbe    li a4,1
    0x84001d62     0xc0    addi a1,a1,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x84001d66     0xc4    li a6,1
    0x84001d68     0xc6    li a0,54
    0x84001d6c     0xca    srli a3,a4,0x5
    0x84001d70     0xce    slli a3,a3,0x2
    0x84001d72     0xd0    add a3,a3,a1
    0x84001d74     0xd2    lw a2,0(a3)
    0x84001d76     0xd4    andi a5,a4,31
    0x84001d7a     0xd8    sll a5,a6,a5
    0x84001d7e     0xdc    not a5,a5
    0x84001d82     0xe0    and a5,a5,a2
    0x84001d84     0xe2    sext.w a5,a5
    0x84001d86     0xe4    sw a5,0(a3)
    0x84001d88     0xe6    addi a4,a4,1
    0x84001d8a     0xe8    bne a4,a0,ffffffff84001d6c <init_kernel+0xca>
    0x84001d8e     0xec    lui a5,0xc0202
    0x84001d92     0xf0    sw zero,0(a5) # ffffffffc0202000 <ki_end+0x3c1db000>
    0x84001d96     0xf4    li a5,544
    0x84001d9a     0xf8    csrrs a5,sie,a5
    0x84001d9e     0xfc    lui a5,0x6
    0x84001da0     0xfe    csrc sstatus,a5
    0x84001da4    0x102    li a2,1
    0x84001da6    0x104    lui a0,0xc0001
    0x84001daa    0x108    lui a6,0xc0202
    0x84001dae    0x10c    li a1,54
    0x84001db2    0x110    srli a5,a2,0x5
    0x84001db6    0x114    slli a5,a5,0x2
    0x84001db8    0x116    add a5,a5,a0
    0x84001dba    0x118    lw a3,0(a5)
    0x84001dbc    0x11a    andi a5,a2,31
    0x84001dc0    0x11e    sext.w a4,a2
    0x84001dc4    0x122    slli a3,a3,0x20
    0x84001dc6    0x124    srli a3,a3,0x20
    0x84001dc8    0x126    srl a5,a3,a5
    0x84001dcc    0x12a    andi a5,a5,1
    0x84001dce    0x12c    beqz a5,ffffffff84001dd8 <init_kernel+0x136>
    0x84001dd0    0x12e    lw a5,4(a6) # ffffffffc0202004 <ki_end+0x3c1db004>
    0x84001dd4    0x132    sw a4,4(a6)
    0x84001dd8    0x136    addi a2,a2,1
    0x84001dda    0x138    bne a2,a1,ffffffff84001db2 <init_kernel+0x110>
    0x84001dde    0x13c    lui a4,0xc0000
    0x84001de2    0x140    addi a5,a4,4 # ffffffffc0000004 <ki_end+0x3bfd9004>
    0x84001de6    0x144    li a3,2
    0x84001de8    0x146    addi a4,a4,220
    0x84001dec    0x14a    sw a3,0(a5)
    0x84001dee    0x14c    addi a5,a5,4
    0x84001df0    0x14e    bne a5,a4,ffffffff84001dec <init_kernel+0x14a>
    0x84001df4    0x152    lui a5,0xff021
    0x84001df8    0x156    auipc a3,0x0
    0x84001dfc    0x15a    addi a3,a3,1832 # ffffffff84002520 <avail_reg>
    0x84001e00    0x15e    slli a5,a5,0xe
    0x84001e02    0x160    li a4,-63
    0x84001e06    0x164    sd a5,256(a3)
    0x84001e0a    0x168    slli a4,a4,0x20
    0x84001e0c    0x16a    auipc a5,0x25
    0x84001e10    0x16e    addi a5,a5,500 # ffffffff84027000 <ki_end>
    0x84001e14    0x172    add a5,a5,a4
    0x84001e16    0x174    sd s2,184(sp)         ; stack access
    0x84001e18    0x176    sd s5,192(sp)         ; stack access
    0x84001e1a    0x178    sd a5,264(a3)
    0x84001e1e    0x17c    beqz s0,ffffffff84001f80 <init_kernel+0x2de>
    0x84001e22    0x180    sd s0,272(a3)
    0x84001e26    0x184    sd s1,280(a3)
    0x84001e2a    0x188    li a2,3
    0x84001e2c    0x18a    li a7,2
    0x84001e2e    0x18c    ld a4,184(sp)         ; stack access
    0x84001e30    0x18e    ld a5,192(sp)         ; stack access
    0x84001e32    0x190    slli a7,a7,0x4
    0x84001e34    0x192    add a7,a7,a3
    0x84001e36    0x194    mv a6,s11
    0x84001e38    0x196    sd s10,256(a7) # ffffffffffe00100 <ki_end+0x7bdd9100>
    0x84001e3c    0x19a    sd s3,264(a7)
    0x84001e40    0x19e    auipc a3,0x0
    0x84001e44    0x1a2    addi a3,a3,2016 # ffffffff84002620 <res_reg>
    0x84001e48    0x1a6    auipc a1,0x0
    0x84001e4c    0x1aa    addi a1,a1,968 # ffffffff84002210 <avail_p_regs>
    0x84001e50    0x1ae    li a0,1
    0x84001e52    0x1b0    jal ra,ffffffff84001382 <init_freemem>
    0x84001e56    0x1b4    auipc s8,0xc
    0x84001e5a    0x1b8    addi s8,s8,1450 # ffffffff8400e400 <ndks_boot>
    0x84001e5e    0x1bc    ld a4,1104(s8)
    0x84001e62    0x1c0    lui a5,0x80
    0x84001e66    0x1c4    sd a5,1096(s8)
    0x84001e6a    0x1c8    slli s11,a4,0x19
    0x84001e6e    0x1cc    lui a5,0xab53
    0x84001e72    0x1d0    slli a5,a5,0x23
    0x84001e74    0x1d2    srli s11,s11,0x1a
    0x84001e78    0x1d6    or s11,s11,a5
    0x84001e7c    0x1da    sd s11,64(a4)
    0x84001e80    0x1de    addi a5,a4,64
    0x84001e84    0x1e2    li a4,3
    0x84001e86    0x1e4    sd a4,24(a5)
    0x84001e88    0x1e6    li a1,0
    0x84001e8a    0x1e8    sd zero,8(a5) # ab53008 <KERNEL_OFFSET-0xfffffffef54acff8>
    0x84001e8e    0x1ec    sd zero,16(a5)
    0x84001e92    0x1f0    mv a0,s11
    0x84001e94    0x1f2    sd s11,184(sp)        ; stack access
    0x84001e96    0x1f4    sd zero,192(sp)       ; stack access
    0x84001e98    0x1f6    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84001e9c    0x1fa    li a5,-3
    0x84001e9e    0x1fc    li a4,3
    0x84001ea0    0x1fe    slli a5,a5,0x3d
    0x84001ea2    0x200    lui a6,0xc0002
    0x84001ea6    0x204    sd a4,376(a0) # ffffffffc0001178 <ki_end+0x3bfda178>
    0x84001eaa    0x208    sd a5,352(a0)
    0x84001eae    0x20c    sd zero,360(a0)
    0x84001eb2    0x210    sd zero,368(a0)
    0x84001eb6    0x214    auipc a2,0xe
    0x84001eba    0x218    addi a2,a2,-2030 # ffffffff8400f6c8 <intStateIRQTable>
    0x84001ebe    0x21c    li a4,0
    0x84001ec0    0x21e    li a1,1
    0x84001ec2    0x220    li a0,54
    0x84001ec6    0x224    addi a6,a6,256 # ffffffffc0002100 <ki_end+0x3bfdb100>
    0x84001eca    0x228    li t3,1
    0x84001ecc    0x22a    li a7,55
    0x84001ed0    0x22e    sd zero,8(a2)
    0x84001ed4    0x232    addi a4,a4,1
    0x84001ed6    0x234    addi a2,a2,8
    0x84001ed8    0x236    addi a1,a1,1
    0x84001eda    0x238    bne a4,a0,ffffffff84001f5a <init_kernel+0x2b8>
    0x84001ede    0x23c    li a5,32
    0x84001ee2    0x240    csrrc a5,sie,a5
    0x84001ee6    0x244    li a5,2
    0x84001ee8    0x246    auipc a4,0xe
    0x84001eec    0x24a    sd a5,-1648(a4) # ffffffff8400f878 <intStateIRQTable+0x1b0>
    0x84001ef0    0x24e    li a5,32
    0x84001ef4    0x252    csrrs a5,sie,a5
    0x84001ef8    0x256    ld a1,192(sp)         ; stack access
    0x84001efa    0x258    ld a0,184(sp)         ; stack access
    0x84001efc    0x25a    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84001f00    0x25e    li a5,7
    0x84001f02    0x260    slli a5,a5,0x3c
    0x84001f04    0x262    sd a5,128(a0)
    0x84001f06    0x264    li a5,3
    0x84001f08    0x266    sd zero,136(a0)
    0x84001f0c    0x26a    sd zero,144(a0)
    0x84001f10    0x26e    sd a5,152(a0)
    0x84001f12    0x270    mv a3,s6
    0x84001f14    0x272    mv a2,s9
    0x84001f16    0x274    li a1,1
    0x84001f18    0x276    li a0,0
    0x84001f1a    0x278    jal ra,ffffffff84001998 <populate_bi_frame>
    0x84001f1e    0x27c    bnez s0,ffffffff84001fbc <init_kernel+0x31a>
    0x84001f20    0x27e    bgeu s0,s6,ffffffff84001f34 <init_kernel+0x292>
    0x84001f24    0x282    ld a5,1144(s8)
    0x84001f28    0x286    sub a4,s6,s0
    0x84001f2c    0x28a    add s0,s0,a5
    0x84001f2e    0x28c    sd zero,0(s0)
    0x84001f32    0x290    sd a4,8(s0)
    0x84001f34    0x292    mv a2,s2
    0x84001f36    0x294    mv a3,s5
    0x84001f38    0x296    mv a0,s11
    0x84001f3a    0x298    li a1,0
    0x84001f3c    0x29a    sd s11,32(sp)         ; stack access
    0x84001f3e    0x29c    sd zero,40(sp)        ; stack access
    0x84001f40    0x29e    sd s2,112(sp)         ; stack access
    0x84001f42    0x2a0    sd s5,120(sp)         ; stack access
    0x84001f44    0x2a2    jal ra,ffffffff8400043e <create_it_address_space>
    0x84001f48    0x2a6    sd a0,48(sp)          ; stack access
    0x84001f4a    0x2a8    sd a1,56(sp)          ; stack access
    0x84001f4c    0x2aa    srli a5,a0,0x3b
    0x84001f50    0x2ae    mv a2,a0
    0x84001f52    0x2b0    mv a3,a1
    0x84001f54    0x2b2    bnez a5,ffffffff84001fee <init_kernel+0x34c>
    0x84001f56    0x2b4    jal ra,ffffffff840036cc <halt>
    0x84001f5a    0x2b8    srli a3,a4,0x5
    0x84001f5e    0x2bc    slli a3,a3,0x2
    0x84001f60    0x2be    add a3,a3,a6
    0x84001f62    0x2c0    lw t4,0(a3)
    0x84001f66    0x2c4    andi a5,a4,31
    0x84001f6a    0x2c8    sll a5,t3,a5
    0x84001f6e    0x2cc    not a5,a5
    0x84001f72    0x2d0    and a5,a5,t4
    0x84001f76    0x2d4    sext.w a5,a5
    0x84001f78    0x2d6    sw a5,0(a3)
    0x84001f7a    0x2d8    bne a1,a7,ffffffff84001ed0 <init_kernel+0x22e>
    0x84001f7e    0x2dc    j ffffffff84001ee6 <init_kernel+0x244>
    0x84001f80    0x2de    li a2,2
    0x84001f82    0x2e0    li a7,1
    0x84001f84    0x2e2    j ffffffff84001e2e <init_kernel+0x18c>
    0x84001f86    0x2e4    slli s4,a2,0x20
    0x84001f8a    0x2e8    srli s4,s4,0x20
    0x84001f8e    0x2ec    li s3,-1
    0x84001f90    0x2ee    slli s3,s3,0x26
    0x84001f92    0x2f0    sub s9,a1,s4
    0x84001f96    0x2f4    lui s7,0x2
    0x84001f98    0x2f6    add s10,a0,s3
    0x84001f9c    0x2fa    sub s2,a0,s4
    0x84001fa0    0x2fe    add s3,s3,a1
    0x84001fa2    0x300    add s7,s7,s9
    0x84001fa4    0x302    li s1,0
    0x84001fa6    0x304    li s0,0
    0x84001fa8    0x306    li s6,0
    0x84001faa    0x308    li s5,1
    0x84001fac    0x30a    j ffffffff84001d26 <init_kernel+0x84>
    0x84001fae    0x30c    li s11,64
    0x84001fb2    0x310    sub s11,s11,a0
    0x84001fb6    0x314    sll s5,a5,s11
    0x84001fba    0x318    j ffffffff84001d26 <init_kernel+0x84>
    0x84001fbc    0x31a    ld a5,1144(s8)
    0x84001fc0    0x31e    li a4,6
    0x84001fc2    0x320    sub a2,s1,s0
    0x84001fc6    0x324    addi a3,a5,16
    0x84001fca    0x328    sd a4,0(a5)
    0x84001fcc    0x32a    sd s6,8(a5)
    0x84001fd0    0x32e    sub a3,a3,s0
    0x84001fd2    0x330    beq s0,s1,ffffffff84001fe8 <init_kernel+0x346>
    0x84001fd6    0x334    lbu a4,0(s0)
    0x84001fda    0x338    add a5,s0,a3
    0x84001fde    0x33c    addi s0,s0,1
    0x84001fe0    0x33e    sb a4,0(a5)
    0x84001fe4    0x342    bne s0,s1,ffffffff84001fd6 <init_kernel+0x334>
    0x84001fe8    0x346    addi s0,a2,16
    0x84001fec    0x34a    j ffffffff84001f20 <init_kernel+0x27e>
    0x84001fee    0x34c    lui s0,0x1
    0x84001ff0    0x34e    ld a0,32(sp)          ; stack access
    0x84001ff2    0x350    ld a1,40(sp)          ; stack access
    0x84001ff4    0x352    add s0,s0,s9
    0x84001ff6    0x354    mv a4,s0
    0x84001ff8    0x356    jal ra,ffffffff84000d42 <create_bi_frame_cap>
    0x84001ffc    0x35a    bnez s6,ffffffff840021c8 <init_kernel+0x526>
    0x84002000    0x35e    ld s1,1088(s8)
    0x84002004    0x362    ld a5,1096(s8)
    0x84002008    0x366    sd s11,160(sp)        ; stack access
    0x8400200a    0x368    sd zero,168(sp)       ; stack access
    0x8400200c    0x36a    bgeu s1,a5,ffffffff84002040 <init_kernel+0x39e>
    0x84002010    0x36e    mv a0,s11
    0x84002012    0x370    li a1,0
    0x84002014    0x372    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x84002018    0x376    slli a5,s1,0x5
    0x8400201c    0x37a    add a0,a0,a5
    0x8400201e    0x37c    li a5,-1
    0x84002020    0x37e    slli a5,a5,0x3e
    0x84002022    0x380    ld a4,1080(s8)
    0x84002026    0x384    sd a5,0(a0)
    0x84002028    0x386    li a5,3
    0x8400202a    0x388    sd a5,24(a0)
    0x8400202c    0x38a    sd zero,8(a0)
    0x84002030    0x38e    sd zero,16(a0)
    0x84002034    0x392    addi a5,s1,1
    0x84002038    0x396    sd a5,1088(s8)
    0x8400203c    0x39a    sd s1,152(a4)
    0x8400203e    0x39c    sd a5,160(a4)
    0x84002040    0x39e    ld a2,48(sp)          ; stack access
    0x84002042    0x3a0    ld a3,56(sp)          ; stack access
    0x84002044    0x3a2    ld a0,32(sp)          ; stack access
    0x84002046    0x3a4    ld a1,40(sp)          ; stack access
    0x84002048    0x3a6    mv a4,s9
    0x8400204a    0x3a8    jal ra,ffffffff84000cc0 <create_ipcbuf_frame_cap>
    0x8400204e    0x3ac    sd a0,80(sp)          ; stack access
    0x84002050    0x3ae    sd a1,88(sp)          ; stack access
    0x84002052    0x3b0    srli a0,a0,0x3b
    0x84002054    0x3b2    beqz a0,ffffffff84001f56 <init_kernel+0x2b4>
    0x84002058    0x3b6    ld a3,48(sp)          ; stack access
    0x8400205a    0x3b8    ld a4,56(sp)          ; stack access
    0x8400205c    0x3ba    ld a1,32(sp)          ; stack access
    0x8400205e    0x3bc    ld a2,40(sp)          ; stack access
    0x84002060    0x3be    mv a5,s10
    0x84002062    0x3c0    sd s4,0(sp)           ; stack access
    0x84002064    0x3c2    li a7,1
    0x84002066    0x3c4    mv a6,s3
    0x84002068    0x3c6    addi a0,sp,160
    0x8400206a    0x3c8    sd s10,96(sp)         ; stack access
    0x8400206c    0x3ca    sd s3,104(sp)         ; stack access
    0x8400206e    0x3cc    jal ra,ffffffff84000ed4 <create_frames_of_region>
    0x84002072    0x3d0    ld a5,176(sp)         ; stack access
    0x84002074    0x3d2    beqz a5,ffffffff84001f56 <init_kernel+0x2b4>
    0x84002078    0x3d6    ld a5,1080(s8)
    0x8400207c    0x3da    ld a4,160(sp)         ; stack access
    0x8400207e    0x3dc    ld a0,32(sp)          ; stack access
    0x84002080    0x3de    ld a1,40(sp)          ; stack access
    0x84002082    0x3e0    sd a4,72(a5)
    0x84002084    0x3e2    ld a4,168(sp)         ; stack access
    0x84002086    0x3e4    sd a4,80(a5)
    0x84002088    0x3e6    jal ra,ffffffff84001110 <create_it_asid_pool>
    0x8400208c    0x3ea    sd a0,64(sp)          ; stack access
    0x8400208e    0x3ec    sd a1,72(sp)          ; stack access
    0x84002090    0x3ee    srli a3,a0,0x3b
    0x84002094    0x3f2    beqz a3,ffffffff84001f56 <init_kernel+0x2b4>
    0x84002098    0x3f6    ld s2,48(sp)          ; stack access
    0x8400209a    0x3f8    ld s3,56(sp)          ; stack access
    0x8400209c    0x3fa    sd a1,136(sp)         ; stack access
    0x8400209e    0x3fc    sd a0,128(sp)         ; stack access
    0x840020a0    0x3fe    sd s2,144(sp)         ; stack access
    0x840020a2    0x400    sd s3,152(sp)         ; stack access
    0x840020a4    0x402    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840020a8    0x406    mv s1,a0
    0x840020aa    0x408    mv a1,s3
    0x840020ac    0x40a    mv a0,s2
    0x840020ae    0x40c    jal ra,ffffffff840030d2 <cap_get_capPtr>
    0x840020b2    0x410    sd a0,8(s1)
    0x840020b4    0x412    auipc a5,0xd
    0x840020b8    0x416    sd s1,-180(a5) # ffffffff8400f000 <riscvKSASIDTable>
    0x840020bc    0x41a    rdtime a5
    0x840020c0    0x41e    auipc s1,0x1f
    0x840020c4    0x422    addi s1,s1,1904 # ffffffff84021830 <ksCurTime>
    0x840020c8    0x426    sd a5,0(s1)
    0x840020ca    0x428    jal ra,ffffffff840016d0 <create_idle_thread>
    0x840020ce    0x42c    beqz a0,ffffffff84001f56 <init_kernel+0x2b4>
    0x840020d2    0x430    ld a5,88(sp)          ; stack access
    0x840020d4    0x432    ld a7,80(sp)          ; stack access
    0x840020d6    0x434    ld a2,48(sp)          ; stack access
    0x840020d8    0x436    ld a3,56(sp)          ; stack access
    0x840020da    0x438    ld a0,32(sp)          ; stack access
    0x840020dc    0x43a    ld a1,40(sp)          ; stack access
    0x840020de    0x43c    ld a4,24(sp)          ; stack access
    0x840020e0    0x43e    sd a5,0(sp)           ; stack access
    0x840020e2    0x440    mv a6,s9
    0x840020e4    0x442    mv a5,s0
    0x840020e6    0x444    jal ra,ffffffff84001794 <create_initial_thread>
    0x840020ea    0x448    beqz a0,ffffffff84001f56 <init_kernel+0x2b4>
    0x840020ee    0x44c    auipc a4,0x1f
    0x840020f2    0x450    ld a4,1890(a4) # ffffffff84021850 <ksIdleThread>
    0x840020f6    0x454    ld a3,368(a4)
    0x840020fa    0x458    li s0,1
    0x840020fc    0x45a    auipc a2,0x1f
    0x84002100    0x45e    sd a0,1868(a2) # ffffffff84021848 <ksSchedulerAction>
    0x84002104    0x462    auipc a5,0x1f
    0x84002108    0x466    sd a4,1876(a5) # ffffffff84021858 <ksCurThread>
    0x8400210c    0x46a    auipc a5,0x1f
    0x84002110    0x46e    sd a3,1820(a5) # ffffffff84021828 <ksCurSC>
    0x84002114    0x472    auipc a5,0x1f
    0x84002118    0x476    sd zero,1836(a5) # ffffffff84021840 <ksConsumed>
    0x8400211c    0x47a    auipc a5,0x1f
    0x84002120    0x47e    sd s0,1820(a5) # ffffffff84021838 <ksReprogram>
    0x84002124    0x482    auipc a5,0x1f
    0x84002128    0x486    sd zero,1852(a5) # ffffffff84021860 <ksReleaseHead>
    0x8400212c    0x48a    rdtime a5
    0x84002130    0x48e    ld s2,1088(s8)
    0x84002134    0x492    sd a5,0(s1)
    0x84002136    0x494    lui a5,0xff021
    0x8400213a    0x498    slli a5,a5,0xe
    0x8400213c    0x49a    li a4,-63
    0x84002140    0x49e    slli a4,a4,0x20
    0x84002142    0x4a0    sd a5,144(sp)         ; stack access
    0x84002144    0x4a2    auipc a5,0x1
    0x84002148    0x4a6    addi a5,a5,-324 # ffffffff84003000 <ki_boot_end>
    0x8400214c    0x4aa    add a5,a5,a4
    0x8400214e    0x4ac    mv a2,s2
    0x84002150    0x4ae    li a1,0
    0x84002152    0x4b0    mv a0,s11
    0x84002154    0x4b2    sd a5,152(sp)         ; stack access
    0x84002156    0x4b4    sd s11,128(sp)        ; stack access
    0x84002158    0x4b6    sd zero,136(sp)       ; stack access
    0x8400215a    0x4b8    jal ra,ffffffff84001b90 <create_device_untypeds>
    0x8400215e    0x4bc    ld a3,152(sp)         ; stack access
    0x84002160    0x4be    ld a2,144(sp)         ; stack access
    0x84002162    0x4c0    ld a0,128(sp)         ; stack access
    0x84002164    0x4c2    ld a1,136(sp)         ; stack access
    0x84002166    0x4c4    mv a4,s2
    0x84002168    0x4c6    jal ra,ffffffff84001c38 <create_kernel_untypeds>
    0x8400216c    0x4ca    ld a3,1088(s8)
    0x84002170    0x4ce    ld a5,1080(s8)
    0x84002174    0x4d2    sd s2,168(a5)
    0x84002178    0x4d6    sd a3,176(a5)
    0x8400217a    0x4d8    beqz a0,ffffffff84001f56 <init_kernel+0x2b4>
    0x8400217e    0x4dc    ld a4,1096(s8)
    0x84002182    0x4e0    sd zero,56(a5)
    0x84002186    0x4e4    sd zero,64(a5)
    0x8400218a    0x4e8    sd a3,40(a5)
    0x8400218c    0x4ea    sd a4,48(a5)
    0x8400218e    0x4ec    auipc a5,0x1f
    0x84002192    0x4f0    sd s0,1754(a5) # ffffffff84021868 <ksNumCPUs>
    0x84002196    0x4f4    rdtime a5
    0x8400219a    0x4f8    auipc a4,0x1f
    0x8400219e    0x4fc    sd zero,1702(a4) # ffffffff84021840 <ksConsumed>
    0x840021a2    0x500    sd a5,0(s1)
    0x840021a4    0x502    jal ra,ffffffff8400c616 <schedule>
    0x840021a8    0x506    ld s0,304(sp)         ; stack access
    0x840021aa    0x508    ld ra,312(sp)         ; stack access
    0x840021ac    0x50a    ld s1,296(sp)         ; stack access
    0x840021ae    0x50c    ld s2,288(sp)         ; stack access
    0x840021b0    0x50e    ld s3,280(sp)         ; stack access
    0x840021b2    0x510    ld s4,272(sp)         ; stack access
    0x840021b4    0x512    ld s5,264(sp)         ; stack access
    0x840021b6    0x514    ld s6,256(sp)         ; stack access
    0x840021b8    0x516    ld s7,248(sp)         ; stack access
    0x840021ba    0x518    ld s8,240(sp)         ; stack access
    0x840021bc    0x51a    ld s9,232(sp)         ; stack access
    0x840021be    0x51c    ld s10,224(sp)        ; stack access
    0x840021c0    0x51e    ld s11,216(sp)        ; stack access
    0x840021c2    0x520    addi sp,sp,320
    0x840021c4    0x522    j ffffffff8400756e <activateThread>
    0x840021c8    0x526    ld a5,1144(s8)
    0x840021cc    0x52a    li a0,1
    0x840021ce    0x52c    slli a0,a0,0x26
    0x840021d0    0x52e    add a0,a0,a5
    0x840021d2    0x530    ld a3,48(sp)          ; stack access
    0x840021d4    0x532    ld a4,56(sp)          ; stack access
    0x840021d6    0x534    ld a1,32(sp)          ; stack access
    0x840021d8    0x536    ld a2,40(sp)          ; stack access
    0x840021da    0x538    sub s7,a0,s7
    0x840021de    0x53c    add a6,a5,s6
    0x840021e2    0x540    sd s7,0(sp)           ; stack access
    0x840021e4    0x542    li a7,1
    0x840021e6    0x544    addi a0,sp,184
    0x840021e8    0x546    sd a5,160(sp)         ; stack access
    0x840021ea    0x548    sd a6,168(sp)         ; stack access
    0x840021ec    0x54a    jal ra,ffffffff84000ed4 <create_frames_of_region>
    0x840021f0    0x54e    ld a5,200(sp)         ; stack access
    0x840021f2    0x550    beqz a5,ffffffff84001f56 <init_kernel+0x2b4>
    0x840021f6    0x554    ld a5,1080(s8)
    0x840021fa    0x558    ld a4,184(sp)         ; stack access
    0x840021fc    0x55a    sd a4,120(a5)
    0x840021fe    0x55c    ld a4,192(sp)         ; stack access
    0x84002200    0x55e    sd a4,128(a5)
    0x84002202    0x560    j ffffffff84002000 <init_kernel+0x35e>
    0x84002204    0x562    li s11,0
    0x84002206    0x564    li s5,1
    0x84002208    0x566    j ffffffff84001d26 <init_kernel+0x84>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
479 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 737 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_840059BE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_840059C4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_8400595A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_8400565E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84004C16` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84004C06` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84003ED6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84003E44` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840036D4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_840036B4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_840036BC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_840036B0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sc_w_zero_zero_t0_8400363C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_840036C8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_840034BC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_840030CC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_8400135A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ebreak_84000CBE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_840006B0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84000168` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400016C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_84003DAA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84003CC2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84003D1E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84003D4A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84003CC6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84003D4E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84003D22` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84003C06` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a3_stval_84003B1A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_8400D66A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_8400D672` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_8400D5D8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_8400D666` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_8400D67E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400D5DC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_8400D24C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_8400D254` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_8400D1BC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_8400D248` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_8400D260` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400D1C0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a5_sip_84009260` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a1_8400927C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_8400918E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_8400857C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8400308C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8400307C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84003084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840030A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84003000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000614` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8400042E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_8400CCA2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84003C8E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_s2_840041BC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s1_sip_8400C8CC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a1_8400C8FA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a7_8400CACE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a7_8400C9DC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a7_8400CBCE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a5_sip_8400CDD6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a1_8400CCE4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84006862` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84006428` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84001D48` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_84001D58` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrc_sstatus_a5_84001DA0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84001EE2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84001EF4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84001D9A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84001D4C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_84002196` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_8400212C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_840020BC` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
No graph spec failures.
No export failures.
No call offset failures.
> 