Struct Kernel_C.finaliseSlot_ret_C 32 8
StructField status_C Word 64 0
StructField success_C Word 64 8
StructField cleanupInfo_C Struct Kernel_C.cap_C 16

Struct Kernel_C.resolve_ret_C 24 8
StructField frameBase_C Word 64 0
StructField frameSize_C Word 64 8
StructField valid_C Word 64 16

Struct Kernel_C.AnonStruct1' 72 8
StructField cnode_C Word 64 0
StructField vspace_C Word 64 8
StructField asid_pool_C Word 64 16
StructField ipc_buf_C Word 64 24
StructField boot_info_C Word 64 32
StructField extra_bi_C Word 64 40
StructField tcb_C Word 64 48
StructField paging_C Struct Kernel_C.region_C 56

Struct Kernel_C.create_frames_of_region_ret_C 24 8
StructField region_C Struct Kernel_C.seL4_SlotRegion_C 0
StructField success_C Word 64 16

Struct Kernel_C.ndks_boot_C 608 8
StructField reserved_C Array (Struct Kernel_C.p_region_C) 20 0
StructField resv_count_C Word 64 320
StructField freemem_C Array (Struct Kernel_C.region_C) 16 328
StructField bi_frame_C Word 64 584
StructField slot_pos_cur_C Word 64 592
StructField slot_pos_max_C Word 64 600

Struct Kernel_C.seL4_BootInfoHeader_C 16 8
StructField id_C Word 64 0
StructField len_C Word 64 8

Struct Kernel_C.seL4_BootInfo_C 968 8
StructField extraLen_C Word 64 0
StructField nodeID_C Word 64 8
StructField numNodes_C Word 64 16
StructField numIOPTLevels_C Word 64 24
StructField ipcBuffer_C Word 64 32
StructField empty_C Struct Kernel_C.seL4_SlotRegion_C 40
StructField sharedFrames_C Struct Kernel_C.seL4_SlotRegion_C 56
StructField userImageFrames_C Struct Kernel_C.seL4_SlotRegion_C 72
StructField userImagePaging_C Struct Kernel_C.seL4_SlotRegion_C 88
StructField ioSpaceCaps_C Struct Kernel_C.seL4_SlotRegion_C 104
StructField extraBIPages_C Struct Kernel_C.seL4_SlotRegion_C 120
StructField initThreadCNodeSizeBits_C Word 64 136
StructField initThreadDomain_C Word 64 144
StructField untyped_C Struct Kernel_C.seL4_SlotRegion_C 152
StructField untypedList_C Array (Struct Kernel_C.seL4_UntypedDesc_C) 50 168

Struct Kernel_C.seL4_UntypedDesc_C 16 8
StructField paddr_C Word 64 0
StructField sizeBits_C Word 8 8
StructField isDevice_C Word 8 9
StructField padding_C Array (Word 8) 6 10

Struct Kernel_C.seL4_SlotRegion_C 16 8
StructField start_C Word 64 0
StructField end_C Word 64 8

Struct Kernel_C.resolveAddressBits_ret_C 24 8
StructField status_C Word 64 0
StructField slot_C Word 64 8
StructField bitsRemaining_C Word 64 16

Struct Kernel_C.lookupSlot_ret_C 16 8
StructField status_C Word 64 0
StructField slot_C Word 64 8

Struct Kernel_C.lookupSlot_raw_ret_C 16 8
StructField status_C Word 64 0
StructField slot_C Word 64 8

Struct Kernel_C.lookupCapAndSlot_ret_C 32 8
StructField status_C Word 64 0
StructField cap_C Struct Kernel_C.cap_C 8
StructField slot_C Word 64 24

Struct Kernel_C.lookupCap_ret_C 24 8
StructField status_C Word 64 0
StructField cap_C Struct Kernel_C.cap_C 8

Struct Kernel_C.finaliseCap_ret_C 32 8
StructField remainder_C Struct Kernel_C.cap_C 0
StructField cleanupInfo_C Struct Kernel_C.cap_C 16

Struct Kernel_C.deriveCap_ret_C 24 8
StructField status_C Word 64 0
StructField cap_C Struct Kernel_C.cap_C 8

Struct Kernel_C.findVSpaceForASID_ret_C 16 8
StructField status_C Word 64 0
StructField vspace_root_C Word 64 8

Struct Kernel_C.lookupPTSlot_ret_C 16 8
StructField ptSlot_C Word 64 0
StructField ptBitsLeft_C Word 64 8

Struct Kernel_C.tcb_queue_C 16 8
StructField head_C Word 64 0
StructField end_C Word 64 8

Struct Kernel_C.syscall_error_C 56 8
StructField invalidArgumentNumber_C Word 64 0
StructField invalidCapNumber_C Word 64 8
StructField rangeErrorMin_C Word 64 16
StructField rangeErrorMax_C Word 64 24
StructField memoryLeft_C Word 64 32
StructField failedLookupWasSource_C Word 64 40
StructField type_C Word 64 48

Struct Kernel_C.extra_caps_C 24 8
StructField excaprefs_C Array (Word 64) 3 0

Struct Kernel_C.pte_range_C 16 8
StructField base_C Word 64 0
StructField length_C Word 64 8

Struct Kernel_C.pde_range_C 16 8
StructField base_C Word 64 0
StructField length_C Word 64 8

Struct Kernel_C.tcb_C 424 8
StructField tcbArch_C Struct Kernel_C.arch_tcb_C 0
StructField tcbState_C Struct Kernel_C.thread_state_C 280
StructField tcbBoundNotification_C Word 64 304
StructField tcbFault_C Struct Kernel_C.seL4_Fault_C 312
StructField tcbLookupFailure_C Struct Kernel_C.lookup_fault_C 328
StructField tcbDomain_C Word 64 344
StructField tcbMCP_C Word 64 352
StructField tcbPriority_C Word 64 360
StructField tcbTimeSlice_C Word 64 368
StructField tcbFaultHandler_C Word 64 376
StructField tcbIPCBuffer_C Word 64 384
StructField tcbSchedNext_C Word 64 392
StructField tcbSchedPrev_C Word 64 400
StructField tcbEPNext_C Word 64 408
StructField tcbEPPrev_C Word 64 416

Struct Kernel_C.user_data_device_C 4096 8
StructField words_C Array (Word 64) 512 0

Struct Kernel_C.user_data_C 4096 8
StructField words_C Array (Word 64) 512 0

Struct Kernel_C.arch_tcb_C 280 8
StructField tcbContext_C Struct Kernel_C.user_context_C 0

Struct Kernel_C.asid_pool_C 4096 8
StructField array_C Array (Word 64) 512 0

Struct Kernel_C.user_context_C 280 8
StructField registers_C Array (Word 64) 35 0

Struct Kernel_C.cte_C 32 8
StructField cap_C Struct Kernel_C.cap_C 0
StructField cteMDBNode_C Struct Kernel_C.mdb_node_C 16

Struct Kernel_C.dschedule_C 16 8
StructField domain_C Word 64 0
StructField length_C Word 64 8

Struct Kernel_C.seL4_Fault_C 16 8
StructField words_C Array (Word 64) 2 0

Struct Kernel_C.lookup_fault_C 16 8
StructField words_C Array (Word 64) 2 0

Struct Kernel_C.cap_C 16 8
StructField words_C Array (Word 64) 2 0

Struct Kernel_C.vm_attributes_C 8 8
StructField words_C Array (Word 64) 1 0

Struct Kernel_C.thread_state_C 24 8
StructField words_C Array (Word 64) 3 0

Struct Kernel_C.satp_C 8 8
StructField words_C Array (Word 64) 1 0

Struct Kernel_C.pte_C 8 8
StructField words_C Array (Word 64) 1 0

Struct Kernel_C.notification_C 32 8
StructField words_C Array (Word 64) 4 0

Struct Kernel_C.mdb_node_C 16 8
StructField words_C Array (Word 64) 2 0

Struct Kernel_C.endpoint_C 16 8
StructField words_C Array (Word 64) 2 0

Struct Kernel_C.cap_transfer_C 24 8
StructField ctReceiveRoot_C Word 64 0
StructField ctReceiveIndex_C Word 64 8
StructField ctReceiveDepth_C Word 64 16

Struct Kernel_C.seL4_IPCBuffer__C 1024 8
StructField tag_C Struct Kernel_C.seL4_MessageInfo_C 0
StructField msg_C Array (Word 64) 120 8
StructField userData_C Word 64 968
StructField caps_or_badges_C Array (Word 64) 3 976
StructField receiveCNode_C Word 64 1000
StructField receiveIndex_C Word 64 1008
StructField receiveDepth_C Word 64 1016

Struct Kernel_C.seL4_MessageInfo_C 8 8
StructField words_C Array (Word 64) 1 0

Struct Kernel_C.seL4_CapRights_C 8 8
StructField words_C Array (Word 64) 1 0

Struct Kernel_C.seL4_CNode_CapData_C 8 8
StructField words_C Array (Word 64) 1 0

Struct Kernel_C.v_region_C 16 8
StructField start_C Word 64 0
StructField end_C Word 64 8

Struct Kernel_C.p_region_C 16 8
StructField start_C Word 64 0
StructField end_C Word 64 8

Struct Kernel_C.region_C 16 8
StructField start_C Word 64 0
StructField end_C Word 64 8

Struct Kernel_C.kernel_frame_C 24 8
StructField paddr_C Word 64 0
StructField pptr_C Word 64 8
StructField userAvailable_C Word 32 16

Function Kernel_C.clzl(x___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__long#v : Word 64)
1 Basic Ret { }
2 Basic 1 {
    var ret__long#v : Word 64 = WordCast(CountLeadingZeroes(x___unsigned_long#v : Word 64))
}
3 Cond 2 Err !((x___unsigned_long#v : Word 64) == 0)
EntryPoint 3

Function Kernel_C.ctzl(x___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__long#v : Word 64)
1 Basic Ret { }
2 Basic 1 {
    var ret__long#v : Word 64 = WordCast(CountTrailingZeroes(x___unsigned_long#v : Word 64))
}
3 Cond 2 Err !((x___unsigned_long#v : Word 64) == 0)
EntryPoint 3

Function Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: ()

Function Kernel_C.clzll(x___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.readl(addr___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned#v : Word 32 = (Mem : Mem) -MemAcc-> WordCast(addr___unsigned_longlong#v : Word 64)
}
4 Cond 3 Err PValid(HTD : HTD, Word 32, WordCast(addr___unsigned_longlong#v : Word 64))
EntryPoint 4

Function Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, offset___unsigned#v : Word 32, reg___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned#v : Word 32 = (offset___unsigned#v : Word 32) + WordCastSigned(1)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64) + (WordCast((offset___unsigned#v : Word 32) + 1) * 8), reg___unsigned_long#v : Word 64)
}
5 Cond 4 Err (((offset___unsigned#v : Word 32) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCast((offset___unsigned#v : Word 32) + WordCastSigned(1))) && PValid(HTD : HTD, Word 64, (receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64) + (WordCast((offset___unsigned#v : Word 32) + 1) * 8)) && (((offset___unsigned#v : Word 32) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCast((offset___unsigned#v : Word 32) + WordCastSigned(1) + 1))
6 Basic 1 {
    var ret__unsigned#v : Word 32 = WordCastSigned(4)
}
7 Cond 5 6 !((receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64) == 0)
8 Basic 1 {
    var ret__unsigned#v : Word 32 = (offset___unsigned#v : Word 32) + WordCastSigned(1)
}
9 Call 8 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * WordCast(offset___unsigned#v : Word 32))), reg___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err (offset___unsigned#v : Word 32) < WordCastSigned(4)
11 Cond 7 10 WordCastSigned(4) <= (offset___unsigned#v : Word 32)
EntryPoint 11

Function Kernel_C.memcpy(ptr_dst___ptr_to_void#v : Word 64, ptr_src___ptr_to_void#v : Word 64, n___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_void#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = ptr_dst___ptr_to_void#v : Word 64
}
8 Basic 4 {
    var q___ptr_to_unsigned_char#v : Word 64 = (q___ptr_to_unsigned_char#v : Word 64) + 1
}
9 Cond 8 Err true
10 Basic 9 {
    var p___ptr_to_unsigned_char#v : Word 64 = (p___ptr_to_unsigned_char#v : Word 64) + 1
}
11 Cond 10 Err true
12 Basic 11 {
    var n___unsigned_long#v : Word 64 = (n___unsigned_long#v : Word 64) - WordCastSigned(1)
}
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, p___ptr_to_unsigned_char#v : Word 64, (Mem : Mem) -MemAcc-> (q___ptr_to_unsigned_char#v : Word 64))
}
14 Cond 13 Err PWeakValid(HTD : HTD, Word 8, p___ptr_to_unsigned_char#v : Word 64) && (Word 8) PAlignValid (p___ptr_to_unsigned_char#v : Word 64) && PWeakValid(HTD : HTD, Word 8, q___ptr_to_unsigned_char#v : Word 64) && (Word 8) PAlignValid (q___ptr_to_unsigned_char#v : Word 64)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 14 3 !((n___unsigned_long#v : Word 64) == 0)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
15 Basic 7 {
    var q___ptr_to_unsigned_char#v : Word 64 = ptr_src___ptr_to_void#v : Word 64
}
16 Basic 15 {
    var p___ptr_to_unsigned_char#v : Word 64 = ptr_dst___ptr_to_void#v : Word 64
}
EntryPoint 16

Function Kernel_C.memset(s___ptr_to_void#v : Word 64, c___unsigned_long#v : Word 64, n___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_void#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = s___ptr_to_void#v : Word 64
}
4 Call 3 Kernel_C.memzero(s___ptr_to_void#v : Word 64, n___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Basic 5 {
    var p___ptr_to_unsigned_char#v : Word 64 = (p___ptr_to_unsigned_char#v : Word 64) + 1
}
10 Cond 9 Err true
11 Basic 10 {
    var n___unsigned_long#v : Word 64 = (n___unsigned_long#v : Word 64) - WordCastSigned(1)
}
12 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, p___ptr_to_unsigned_char#v : Word 64, WordCast(c___unsigned_long#v : Word 64))
}
13 Cond 12 Err PWeakValid(HTD : HTD, Word 8, p___ptr_to_unsigned_char#v : Word 64) && (Word 8) PAlignValid (p___ptr_to_unsigned_char#v : Word 64)
5 Basic 6 {
    var loop#5#count : Word 64 = (loop#5#count : Word 64) + 1
}
6 Cond 7 Err true
7 Cond 13 3 WordCastSigned(0) < (n___unsigned_long#v : Word 64)
8 Basic 6 {
    var loop#5#count : Word 64 = 0
}
14 Basic 8 {
    var p___ptr_to_unsigned_char#v : Word 64 = s___ptr_to_void#v : Word 64
}
15 Cond 4 14 !(!(!((ret__int#v : Word 32) == 0)))
16 Basic 15 {
    var ret__int#v : Word 32 = IfThenElse(((n___unsigned_long#v : Word 64) % WordCast(8)) == WordCastSigned(0), 1, 0)
}
17 Cond 16 Err !(8 == 0)
18 Cond 17 15 !((ret__int#v : Word 32) == 0)
19 Basic 18 {
    var ret__int#v : Word 32 = IfThenElse(((s___ptr_to_void#v : Word 64) % WordCast(8)) == WordCastSigned(0), 1, 0)
}
20 Cond 19 Err !(8 == 0)
21 Cond 20 18 !((ret__int#v : Word 32) == 0)
22 Basic 21 {
    var ret__int#v : Word 32 = IfThenElse((c___unsigned_long#v : Word 64) == WordCastSigned(0), 1, 0)
}
EntryPoint 22

Function Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'sfence.vma(Mem : Mem, PMS : PMS) -- updates (Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.writel(val___unsigned#v : Word 32, addr___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, WordCast(addr___unsigned_longlong#v : Word 64), val___unsigned#v : Word 32)
}
3 Cond 2 Err PValid(HTD : HTD, Word 32, WordCast(addr___unsigned_longlong#v : Word 64))
EntryPoint 3

Function Kernel_C.alignUp(baseValue___unsigned_long#v : Word 64, alignment___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = ((baseValue___unsigned_long#v : Word 64) + 1 << (alignment___unsigned_long#v : Word 64) - WordCastSigned(1)) & ~(1 << (alignment___unsigned_long#v : Word 64) - 1)
}
4 Cond 3 Err ((alignment___unsigned_long#v : Word 64) < WordCastSigned(64)) && ((alignment___unsigned_long#v : Word 64) < WordCastSigned(64))
EntryPoint 4

Function Kernel_C.copyMRs(sender___ptr_to_struct_tcb_C#v : Word 64, sendBuf___ptr_to_unsigned_long#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, recvBuf___ptr_to_unsigned_long#v : Word 64, n___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = i___unsigned_long#v : Word 64
}
8 Basic 4 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (recvBuf___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8), (Mem : Mem) -MemAcc-> ((sendBuf___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8)))
}
10 Cond 9 Err (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, recvBuf___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1)) && PValid(HTD : HTD, Word 64, (recvBuf___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, sendBuf___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1)) && PValid(HTD : HTD, Word 64, (sendBuf___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, recvBuf___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1) + 1) && (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, sendBuf___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1) + 1)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 10 3 (i___unsigned_long#v : Word 64) < (n___unsigned_long#v : Word 64)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = i___unsigned_long#v : Word 64
}
12 Cond 11 7 !(!((recvBuf___ptr_to_unsigned_long#v : Word 64) == 0)) || !(!((sendBuf___ptr_to_unsigned_long#v : Word 64) == 0))
17 Basic 13 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
18 Call 17 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Cond 18 Err (i___unsigned_long#v : Word 64) < WordCastSigned(4)
20 Basic 19 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.getRegister(sender___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Cond 21 Err (i___unsigned_long#v : Word 64) < WordCastSigned(4)
13 Basic 14 {
    var loop#13#count : Word 64 = (loop#13#count : Word 64) + 1
}
14 Cond 15 Err true
15 Cond 22 12 ((i___unsigned_long#v : Word 64) < (n___unsigned_long#v : Word 64)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(4))
16 Basic 14 {
    var loop#13#count : Word 64 = 0
}
23 Basic 16 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 23

Function Kernel_C.cteMove(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.mdb_node_ptr_set_mdbPrev((next_ptr___unsigned_long#v : Word 64) + 16, WordCast(destSlot___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, next_ptr___unsigned_long#v : Word 64)
4 Cond 3 1 !((next_ptr___unsigned_long#v : Word 64) == 0)
5 Basic 4 {
    var next_ptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.mdb_node_get_mdbNext(mdb___struct_mdb_node_C#v.words_C.0 : Word 64, mdb___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Call 7 Kernel_C.mdb_node_ptr_set_mdbNext((prev_ptr___unsigned_long#v : Word 64) + 16, WordCast(destSlot___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, prev_ptr___unsigned_long#v : Word 64)
10 Cond 9 7 !((prev_ptr___unsigned_long#v : Word 64) == 0)
11 Basic 10 {
    var prev_ptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.mdb_node_get_mdbPrev(mdb___struct_mdb_node_C#v.words_C.0 : Word 64, mdb___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Basic 13 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, ret__struct_mdb_node_C#v.words_C.0 : Word 64), (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
}
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
16 Basic 15 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
17 Call 16 Kernel_C.mdb_node_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
18 Basic 17 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (destSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, mdb___struct_mdb_node_C#v.words_C.0 : Word 64), (destSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, mdb___struct_mdb_node_C#v.words_C.1 : Word 64)
}
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, destSlot___ptr_to_struct_cte_C#v : Word 64)
20 Basic 19 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
22 Basic 21 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
23 Call 22 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
24 Basic 23 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (destSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, newCap___struct_cap_C#v.words_C.0 : Word 64), (destSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, newCap___struct_cap_C#v.words_C.1 : Word 64)
}
25 Cond 24 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, destSlot___ptr_to_struct_cte_C#v : Word 64)
26 Basic 25 {
    var mdb___struct_mdb_node_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0))
    var mdb___struct_mdb_node_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))
}
27 Cond 26 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 27

Function Kernel_C.cteSwap(cap1___struct_cap_C#v.words_C.0 : Word 64, cap1___struct_cap_C#v.words_C.1 : Word 64, slot1___ptr_to_struct_cte_C#v : Word 64, cap2___struct_cap_C#v.words_C.0 : Word 64, cap2___struct_cap_C#v.words_C.1 : Word 64, slot2___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.mdb_node_ptr_set_mdbPrev((next_ptr___unsigned_long#v : Word 64) + 16, WordCast(slot1___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, next_ptr___unsigned_long#v : Word 64)
4 Cond 3 1 !((next_ptr___unsigned_long#v : Word 64) == 0)
5 Basic 4 {
    var next_ptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.mdb_node_get_mdbNext(mdb2___struct_mdb_node_C#v.words_C.0 : Word 64, mdb2___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Call 7 Kernel_C.mdb_node_ptr_set_mdbNext((prev_ptr___unsigned_long#v : Word 64) + 16, WordCast(slot1___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, prev_ptr___unsigned_long#v : Word 64)
10 Cond 9 7 !((prev_ptr___unsigned_long#v : Word 64) == 0)
11 Basic 10 {
    var prev_ptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.mdb_node_get_mdbPrev(mdb2___struct_mdb_node_C#v.words_C.0 : Word 64, mdb2___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Basic 13 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot2___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, mdb1___struct_mdb_node_C#v.words_C.0 : Word 64), (slot2___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, mdb1___struct_mdb_node_C#v.words_C.1 : Word 64)
}
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot2___ptr_to_struct_cte_C#v : Word 64)
16 Basic 15 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot1___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, mdb2___struct_mdb_node_C#v.words_C.0 : Word 64), (slot1___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, mdb2___struct_mdb_node_C#v.words_C.1 : Word 64)
}
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot1___ptr_to_struct_cte_C#v : Word 64)
18 Basic 17 {
    var mdb2___struct_mdb_node_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot2___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0))
    var mdb2___struct_mdb_node_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot2___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))
}
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot2___ptr_to_struct_cte_C#v : Word 64)
20 Call 19 Kernel_C.mdb_node_ptr_set_mdbPrev((next_ptr___unsigned_long#v : Word 64) + 16, WordCast(slot2___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, next_ptr___unsigned_long#v : Word 64)
22 Cond 21 19 !((next_ptr___unsigned_long#v : Word 64) == 0)
23 Basic 22 {
    var next_ptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.mdb_node_get_mdbNext(mdb1___struct_mdb_node_C#v.words_C.0 : Word 64, mdb1___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Call 25 Kernel_C.mdb_node_ptr_set_mdbNext((prev_ptr___unsigned_long#v : Word 64) + 16, WordCast(slot2___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Cond 26 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, prev_ptr___unsigned_long#v : Word 64)
28 Cond 27 25 !((prev_ptr___unsigned_long#v : Word 64) == 0)
29 Basic 28 {
    var prev_ptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
30 Basic 29 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
31 Call 30 Kernel_C.mdb_node_get_mdbPrev(mdb1___struct_mdb_node_C#v.words_C.0 : Word 64, mdb1___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
32 Basic 31 {
    var mdb1___struct_mdb_node_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot1___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0))
    var mdb1___struct_mdb_node_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot1___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))
}
33 Cond 32 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot1___ptr_to_struct_cte_C#v : Word 64)
34 Basic 33 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot2___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, cap1___struct_cap_C#v.words_C.0 : Word 64), (slot2___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, cap1___struct_cap_C#v.words_C.1 : Word 64)
}
35 Cond 34 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot2___ptr_to_struct_cte_C#v : Word 64)
36 Basic 35 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot1___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, cap2___struct_cap_C#v.words_C.0 : Word 64), (slot1___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, cap2___struct_cap_C#v.words_C.1 : Word 64)
}
37 Cond 36 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot1___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 37

Function Kernel_C.memzero(s___ptr_to_void#v : Word 64, n___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var n___unsigned_long#v : Word 64 = (n___unsigned_long#v : Word 64) - WordCast(8)
}
7 Basic 6 {
    var p___ptr_to_unsigned_char#v : Word 64 = (p___ptr_to_unsigned_char#v : Word 64) + 8
}
8 Cond 7 Err true
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, p___ptr_to_unsigned_char#v : Word 64, WordCastSigned(0))
}
10 Cond 9 Err PWeakValid(HTD : HTD, Word 64, p___ptr_to_unsigned_char#v : Word 64) && (Word 64) PAlignValid (p___ptr_to_unsigned_char#v : Word 64)
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 10 1 !((n___unsigned_long#v : Word 64) == WordCastSigned(0))
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
11 Basic 5 { }
12 Cond 11 Err ((GhostAssertions : WordArray 50 64) -WordArrayAccess-> 280 == 0) || ((n___unsigned_long#v : Word 64) <= (GhostAssertions : WordArray 50 64) -WordArrayAccess-> 280)
13 Basic 12 {
    var p___ptr_to_unsigned_char#v : Word 64 = s___ptr_to_void#v : Word 64
}
EntryPoint 13

Function Kernel_C.pte_new(ppn___unsigned_longlong#v : Word 64, sw___unsigned_longlong#v : Word 64, dirty___unsigned_longlong#v : Word 64, accessed___unsigned_longlong#v : Word 64, global___unsigned_longlong#v : Word 64, user___unsigned_longlong#v : Word 64, execute___unsigned_longlong#v : Word 64, write___unsigned_longlong#v : Word 64, read___unsigned_longlong#v : Word 64, valid___unsigned_longlong#v : Word 64) -- updates: (ret__struct_pte_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = pte___struct_pte_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var pte___struct_pte_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((ppn___unsigned_longlong#v : Word 64) & 17592186044415 << WordCast(10)) | ((sw___unsigned_longlong#v : Word 64) & 3 << WordCast(8)) | ((dirty___unsigned_longlong#v : Word 64) & 1 << WordCast(7)) | ((accessed___unsigned_longlong#v : Word 64) & 1 << WordCast(6)) | ((global___unsigned_longlong#v : Word 64) & 1 << WordCast(5)) | ((user___unsigned_longlong#v : Word 64) & 1 << WordCast(4)) | ((execute___unsigned_longlong#v : Word 64) & 1 << WordCast(3)) | ((write___unsigned_longlong#v : Word 64) & 1 << WordCast(2)) | ((read___unsigned_longlong#v : Word 64) & 1 << WordCast(1)) | ((valid___unsigned_longlong#v : Word 64) & 1 << WordCast(0))
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 1) && (1 <s 64) && (0 <=s 2) && (2 <s 64) && (0 <=s 3) && (3 <s 64) && (0 <=s 4) && (4 <s 64) && (0 <=s 5) && (5 <s 64) && (0 <=s 6) && (6 <s 64) && (0 <=s 7) && (7 <s 64) && (0 <=s 8) && (8 <s 64) && (0 <=s 10) && (10 <s 64)
EntryPoint 5

Function Kernel_C.restart(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.possibleSwitchTo(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.tcbSchedEnqueue(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.setThreadState(target___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.setupReplyMaster(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.cancelIPC(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 1 !((ret__unsigned_long#v : Word 64) == 0)
8 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.isStopped(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 9

Function Kernel_C.sendIPC(blocking___unsigned_long#v : Word 64, do_call___unsigned_long#v : Word 64, badge___unsigned_long#v : Word 64, canGrant___unsigned_long#v : Word 64, canGrantReply___unsigned_long#v : Word 64, thread___ptr_to_struct_tcb_C#v : Word 64, epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.ep_ptr_set_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 3 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
5 Call 4 Kernel_C.tcbEPAppend(thread___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
7 Call 6 Kernel_C.ep_ptr_get_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
8 Call 7 Kernel_C.scheduleTCB(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Call 8 Kernel_C.thread_state_ptr_set_blockingIPCIsCall((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(do_call___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.thread_state_ptr_set_blockingIPCCanGrantReply((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(canGrantReply___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
13 Call 12 Kernel_C.thread_state_ptr_set_blockingIPCCanGrant((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(canGrant___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Cond 13 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
15 Call 14 Kernel_C.thread_state_ptr_set_blockingIPCBadge((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(badge___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
17 Call 16 Kernel_C.thread_state_ptr_set_blockingObject((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(epptr___ptr_to_struct_endpoint_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Cond 17 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
19 Call 18 Kernel_C.thread_state_ptr_set_tsType((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(4), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Cond 19 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
21 Cond 20 1 !((blocking___unsigned_long#v : Word 64) == 0)
22 Call 1 Kernel_C.setupCallerCap(thread___ptr_to_struct_tcb_C#v : Word 64, dest___ptr_to_struct_tcb_C#v : Word 64, replyCanGrant___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Call 1 Kernel_C.setThreadState(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Cond 22 23 !((canGrant___unsigned_long#v : Word 64) == 0) || !((canGrantReply___unsigned_long#v : Word 64) == 0)
25 Cond 24 1 !((do_call___unsigned_long#v : Word 64) == 0)
26 Call 25 Kernel_C.possibleSwitchTo(dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Call 26 Kernel_C.setThreadState(dest___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
28 Basic 27 {
    var replyCanGrant___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.thread_state_ptr_get_blockingIPCCanGrant((dest___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Cond 30 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
32 Call 31 Kernel_C.doIPCTransfer(thread___ptr_to_struct_tcb_C#v : Word 64, epptr___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, canGrant___unsigned_long#v : Word 64, dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
33 Call 32 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
34 Cond 33 32 !(!((queue___struct_tcb_queue_C#v.head_C : Word 64) == 0))
35 Call 34 Kernel_C.ep_ptr_set_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
36 Basic 35 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
37 Call 36 Kernel_C.tcbEPDequeue(dest___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
38 Basic 37 {
    var dest___ptr_to_struct_tcb_C#v : Word 64 = queue___struct_tcb_queue_C#v.head_C : Word 64
}
39 Basic 38 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
40 Call 39 Kernel_C.ep_ptr_get_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
41 Cond 1 1 true
42 Cond 40 41 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
43 Cond 21 42 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
44 Basic 43 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
45 Call 44 Kernel_C.endpoint_ptr_get_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 45

Function Kernel_C.strlcat(dest___ptr_to_char#v : Word 64, src___ptr_to_char#v : Word 64, size___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = len___unsigned_long#v : Word 64
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64), WordCastSigned(0))
}
5 Cond 4 Err true && PValid(HTD : HTD, Word 8, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
10 Basic 6 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> (src___ptr_to_char#v : Word 64) == 0), 1, 0)
}
11 Cond 10 Err PValid(HTD : HTD, Word 8, src___ptr_to_char#v : Word 64)
12 Cond 11 6 !((ret__int#v : Word 32) == 0)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse(((len___unsigned_long#v : Word 64) + WordCastSigned(1)) < (size___unsigned_long#v : Word 64), 1, 0)
}
14 Basic 13 {
    var src___ptr_to_char#v : Word 64 = (src___ptr_to_char#v : Word 64) + 1
}
15 Cond 14 Err true
16 Basic 15 {
    var len___unsigned_long#v : Word 64 = (len___unsigned_long#v : Word 64) + WordCastSigned(1)
}
17 Basic 16 {
    var Mem : Mem = MemUpdate(Mem : Mem, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64), (Mem : Mem) -MemAcc-> (src___ptr_to_char#v : Word 64))
}
18 Cond 17 Err true && PValid(HTD : HTD, Word 8, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && PValid(HTD : HTD, Word 8, src___ptr_to_char#v : Word 64) && true
6 Basic 7 {
    var loop#6#count : Word 64 = (loop#6#count : Word 64) + 1
}
7 Cond 8 Err true
8 Cond 18 5 !((ret__int#v : Word 32) == 0)
9 Basic 7 {
    var loop#6#count : Word 64 = 0
}
19 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> (src___ptr_to_char#v : Word 64) == 0), 1, 0)
}
20 Cond 19 Err PValid(HTD : HTD, Word 8, src___ptr_to_char#v : Word 64)
21 Cond 20 9 !((ret__int#v : Word 32) == 0)
22 Basic 21 {
    var ret__int#v : Word 32 = IfThenElse(((len___unsigned_long#v : Word 64) + WordCastSigned(1)) < (size___unsigned_long#v : Word 64), 1, 0)
}
23 Cond 22 3 (len___unsigned_long#v : Word 64) < (size___unsigned_long#v : Word 64)
28 Basic 24 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) == 0), 1, 0)
}
29 Cond 28 Err true && PValid(HTD : HTD, Word 8, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
30 Cond 29 24 !((ret__int#v : Word 32) == 0)
31 Basic 30 {
    var ret__int#v : Word 32 = IfThenElse((len___unsigned_long#v : Word 64) < (size___unsigned_long#v : Word 64), 1, 0)
}
32 Basic 31 {
    var len___unsigned_long#v : Word 64 = (len___unsigned_long#v : Word 64) + WordCastSigned(1)
}
24 Basic 25 {
    var loop#24#count : Word 64 = (loop#24#count : Word 64) + 1
}
25 Cond 26 Err true
26 Cond 32 23 !((ret__int#v : Word 32) == 0)
27 Basic 25 {
    var loop#24#count : Word 64 = 0
}
33 Basic 27 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) == 0), 1, 0)
}
34 Cond 33 Err true && PValid(HTD : HTD, Word 8, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
35 Cond 34 27 !((ret__int#v : Word 32) == 0)
36 Basic 35 {
    var ret__int#v : Word 32 = IfThenElse((len___unsigned_long#v : Word 64) < (size___unsigned_long#v : Word 64), 1, 0)
}
37 Basic 36 {
    var len___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 37

Function Kernel_C.strlcpy(dest___ptr_to_char#v : Word 64, src___ptr_to_char#v : Word 64, size___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = len___unsigned_long#v : Word 64
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64), WordCastSigned(0))
}
5 Cond 4 Err true && PValid(HTD : HTD, Word 8, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
10 Basic 6 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((src___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) == 0), 1, 0)
}
11 Cond 10 Err true && PValid(HTD : HTD, Word 8, (src___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
12 Cond 11 6 !((ret__int#v : Word 32) == 0)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse(((len___unsigned_long#v : Word 64) + WordCastSigned(1)) < (size___unsigned_long#v : Word 64), 1, 0)
}
14 Basic 13 {
    var len___unsigned_long#v : Word 64 = (len___unsigned_long#v : Word 64) + WordCastSigned(1)
}
15 Basic 14 {
    var Mem : Mem = MemUpdate(Mem : Mem, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64), (Mem : Mem) -MemAcc-> ((src___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)))
}
16 Cond 15 Err true && PValid(HTD : HTD, Word 8, (dest___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true && PValid(HTD : HTD, Word 8, (src___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true && true
6 Basic 7 {
    var loop#6#count : Word 64 = (loop#6#count : Word 64) + 1
}
7 Cond 8 Err true
8 Cond 16 5 !((ret__int#v : Word 32) == 0)
9 Basic 7 {
    var loop#6#count : Word 64 = 0
}
17 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((src___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) == 0), 1, 0)
}
18 Cond 17 Err true && PValid(HTD : HTD, Word 8, (src___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
19 Cond 18 9 !((ret__int#v : Word 32) == 0)
20 Basic 19 {
    var ret__int#v : Word 32 = IfThenElse(((len___unsigned_long#v : Word 64) + WordCastSigned(1)) < (size___unsigned_long#v : Word 64), 1, 0)
}
21 Basic 20 {
    var len___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 21

Function Kernel_C.strncmp(s1___ptr_to_char#v : Word 64, s2___ptr_to_char#v : Word 64, n___int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__int#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__int#v : Word 32 = 0
}
8 Basic 4 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
9 Basic 1 {
    var ret__int#v : Word 32 = diff___int#v : Word 32
}
10 Cond 9 8 !((ret__int#v : Word 32) == 0)
11 Basic 10 {
    var ret__int#v : Word 32 = IfThenElse(WordCast((Mem : Mem) -MemAcc-> ((s1___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64))) == 0, 1, 0)
}
12 Cond 11 Err true && PValid(HTD : HTD, Word 8, (s1___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64)) && true
13 Cond 10 12 !((ret__int#v : Word 32) == 0)
14 Basic 13 {
    var ret__int#v : Word 32 = IfThenElse(!((diff___int#v : Word 32) == 0), 1, 0)
}
15 Basic 14 {
    var diff___int#v : Word 32 = WordCast((Mem : Mem) -MemAcc-> ((s1___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64))) - WordCast((Mem : Mem) -MemAcc-> ((s2___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64)))
}
16 Cond 15 Err true && true && true && true && ((0 <=s (WordCast((Mem : Mem) -MemAcc-> ((s1___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64))) - WordCast((Mem : Mem) -MemAcc-> ((s2___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64))))) == (WordCast((Mem : Mem) -MemAcc-> ((s2___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64))) <=s WordCast((Mem : Mem) -MemAcc-> ((s1___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64))))) && true && PValid(HTD : HTD, Word 8, (s2___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64)) && true && PValid(HTD : HTD, Word 8, (s1___ptr_to_char#v : Word 64) + (i___unsigned_long#v : Word 64)) && true && true
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 16 3 (i___unsigned_long#v : Word 64) < WordCastSigned(n___int#v : Word 32)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
17 Basic 7 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 17

Function Kernel_C.strnlen(s___ptr_to_char#v : Word 64, maxlen___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = len___unsigned_long#v : Word 64
}
8 Basic 4 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((s___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) == 0), 1, 0)
}
9 Cond 8 Err true && PValid(HTD : HTD, Word 8, (s___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
10 Cond 9 4 !((ret__int#v : Word 32) == 0)
11 Basic 10 {
    var ret__int#v : Word 32 = IfThenElse((len___unsigned_long#v : Word 64) < (maxlen___unsigned_long#v : Word 64), 1, 0)
}
12 Basic 11 {
    var len___unsigned_long#v : Word 64 = (len___unsigned_long#v : Word 64) + WordCastSigned(1)
}
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 12 3 !((ret__int#v : Word 32) == 0)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
13 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((s___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) == 0), 1, 0)
}
14 Cond 13 Err true && PValid(HTD : HTD, Word 8, (s___ptr_to_char#v : Word 64) + (len___unsigned_long#v : Word 64)) && true
15 Cond 14 7 !((ret__int#v : Word 32) == 0)
16 Basic 15 {
    var ret__int#v : Word 32 = IfThenElse((len___unsigned_long#v : Word 64) < (maxlen___unsigned_long#v : Word 64), 1, 0)
}
17 Basic 16 {
    var len___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 17

Function Kernel_C.suspend(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.tcbSchedDequeue(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.setThreadState(target___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.updateRestartPC(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.thread_state_get_tsType((Mem : Mem) -MemAcc-> ((target___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((target___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((target___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, target___ptr_to_struct_tcb_C#v : Word 64)
9 Call 8 Kernel_C.cancelIPC(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 9

Function Kernel_C.init_cpu(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.set_fs_off(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.initTimer(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.initLocalIRQController(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.write_stvec(trap_entry : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err PValid(HTD : HTD, Array (Word 8) 1, trap_entry : Word 64)
7 Call 6 Kernel_C.activate_kernel_vspace(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 7

Function Kernel_C.pte_next(phys_addr___unsigned_long#v : Word 64, is_leaf___unsigned_long#v : Word 64) -- updates: (ret__struct_pte_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
5 Call 4 Kernel_C.pte_new(WordCast(ppn___unsigned_long#v : Word 64), WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCastSigned(1), WordCastSigned(0), WordCast(exec___unsigned_char#v : Word 8), WordCast(write___unsigned_char#v : Word 8), WordCast(read___unsigned_char#v : Word 8), WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
6 Basic 5 {
    var exec___unsigned_char#v : Word 8 = read___unsigned_char#v : Word 8
}
7 Basic 6 {
    var write___unsigned_char#v : Word 8 = read___unsigned_char#v : Word 8
}
8 Basic 7 {
    var read___unsigned_char#v : Word 8 = WordCastSigned(IfThenElse(!((is_leaf___unsigned_long#v : Word 64) == 0), 1, 0))
}
9 Basic 8 {
    var ppn___unsigned_long#v : Word 64 = (phys_addr___unsigned_long#v : Word 64) >> WordCast(12)
}
10 Cond 9 Err (0 <=s 12) && (12 <s 64)
EntryPoint 10

Function Kernel_C.read_sie(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = temp___unsigned_long#v : Word 64
}
4 Call 3 asm_instruction'csrr_%0,_sie(Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 4

Function Kernel_C.read_sip(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = temp___unsigned_long#v : Word 64
}
4 Call 3 asm_instruction'csrr_%0,_sip(Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 4

Function Kernel_C.satp_new(mode___unsigned_longlong#v : Word 64, asid___unsigned_longlong#v : Word 64, ppn___unsigned_longlong#v : Word 64) -- updates: (ret__struct_satp_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_satp_C#v.words_C.0 : Word 64 = satp___struct_satp_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var satp___struct_satp_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((mode___unsigned_longlong#v : Word 64) & 15 << WordCast(60)) | ((asid___unsigned_longlong#v : Word 64) & 65535 << WordCast(44)) | ((ppn___unsigned_longlong#v : Word 64) & 17592186044415 << WordCast(0))
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 44) && (44 <s 64) && (0 <=s 60) && (60 <s 64)
EntryPoint 5

Function Kernel_C.sbi_call(cmd___unsigned_long#v : Word 64, arg_0___unsigned_long#v : Word 64, arg_1___unsigned_long#v : Word 64, arg_2___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = result___unsigned_long#v : Word 64
}
4 Call 3 asm_instruction'ecall(a0___unsigned_long#v : Word 64, a1___unsigned_long#v : Word 64, a2___unsigned_long#v : Word 64, a7___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS) -- updates (result___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
5 Basic 4 {
    var a7___unsigned_long#v : Word 64 = cmd___unsigned_long#v : Word 64
}
6 Basic 5 {
    var a2___unsigned_long#v : Word 64 = arg_2___unsigned_long#v : Word 64
}
7 Basic 6 {
    var a1___unsigned_long#v : Word 64 = arg_1___unsigned_long#v : Word 64
}
8 Basic 7 {
    var a0___unsigned_long#v : Word 64 = arg_0___unsigned_long#v : Word 64
}
EntryPoint 8

Function Kernel_C.schedule(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksSchedulerAction : Word 64, WordCastSigned(0))
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
4 Call 3 Kernel_C.scheduleChooseNewThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 3 Kernel_C.scheduleChooseNewThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksSchedulerAction : Word 64, WordCastSigned(1))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
8 Call 7 Kernel_C.tcbSchedEnqueue(candidate___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Call 3 Kernel_C.scheduleChooseNewThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksSchedulerAction : Word 64, WordCastSigned(1))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
12 Call 11 Kernel_C.tcbSchedAppend(candidate___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Call 3 Kernel_C.switchToThread(candidate___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Cond 12 13 !((ret__int#v : Word 32) == 0)
15 Basic 14 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((candidate___ptr_to_struct_tcb_C#v : Word 64) + 360) == (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 360), 1, 0)
}
16 Cond 15 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, candidate___ptr_to_struct_tcb_C#v : Word 64)
18 Cond 17 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
19 Cond 18 14 !((ret__int#v : Word 32) == 0)
20 Basic 19 {
    var ret__int#v : Word 32 = IfThenElse(!((was_runnable___unsigned_long#v : Word 64) == 0), 1, 0)
}
21 Cond 8 20 !((ret__int#v : Word 32) == 0)
22 Basic 21 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_long#v : Word 64) == 0)), 1, 0)
}
23 Basic 22 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.isHighestPrio((Mem : Mem) -MemAcc-> (ksCurDomain : Word 64), (Mem : Mem) -MemAcc-> ((candidate___ptr_to_struct_tcb_C#v : Word 64) + 360), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
25 Cond 24 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
26 Cond 25 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, candidate___ptr_to_struct_tcb_C#v : Word 64)
27 Cond 26 21 !((ret__int#v : Word 32) == 0)
28 Basic 27 {
    var ret__int#v : Word 32 = IfThenElse(!((fastfail___unsigned_long#v : Word 64) == 0), 1, 0)
}
29 Basic 28 {
    var fastfail___unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
30 Basic 29 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((candidate___ptr_to_struct_tcb_C#v : Word 64) + 360) < (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 360), 1, 0)
}
31 Cond 30 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
32 Cond 31 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, candidate___ptr_to_struct_tcb_C#v : Word 64)
33 Cond 32 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
34 Cond 29 33 !((ret__int#v : Word 32) == 0)
35 Basic 34 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) == (Mem : Mem) -MemAcc-> (ksIdleThread : Word 64), 1, 0)
}
36 Cond 35 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64) && PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksIdleThread : Word 64)
37 Basic 36 {
    var candidate___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64)
}
38 Cond 37 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
39 Cond 4 38 (Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64) == WordCastSigned(1)
40 Cond 39 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
41 Call 40 Kernel_C.tcbSchedEnqueue((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
42 Cond 41 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
43 Basic 42 {
    var was_runnable___unsigned_long#v : Word 64 = WordCastSigned(1)
}
44 Basic 40 {
    var was_runnable___unsigned_long#v : Word 64 = WordCastSigned(0)
}
45 Cond 43 44 !((ret__unsigned_long#v : Word 64) == 0)
46 Basic 45 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
47 Call 46 Kernel_C.isRunnable((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
48 Cond 47 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
49 Cond 48 3 !((Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64) == WordCastSigned(0))
50 Cond 49 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
EntryPoint 50

Function Kernel_C.slowpath(syscall___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.StrictC'__builtin_unreachable(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
3 Call 2 Kernel_C.restore_user_context(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.handleUnknownSyscall(syscall___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 3 Kernel_C.handleSyscall(syscall___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 4 5 !(!(((syscall___unsigned_long#v : Word 64) < WordCastSigned(0 - 8)) || (WordCastSigned(0 - 1) < (syscall___unsigned_long#v : Word 64))))
7 Cond 6 Err ((0 <=s (0 - 1)) == (1 <=s 0)) && ((0 <=s (0 - 8)) == (8 <=s 0))
EntryPoint 7

Function Kernel_C.cancelIPC(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setThreadState(tptr___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 2 !(!((queue___struct_tcb_queue_C#v.head_C : Word 64) == 0))
5 Call 4 Kernel_C.ep_ptr_set_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
7 Call 6 Kernel_C.tcbEPDequeue(tptr___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
9 Call 8 Kernel_C.ep_ptr_get_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
10 Basic 9 {
    var epptr___ptr_to_struct_endpoint_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.thread_state_ptr_get_blockingObject(state___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Call 1 Kernel_C.cancelSignal(tptr___ptr_to_struct_tcb_C#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.thread_state_ptr_get_blockingObject(state___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Call 1 Kernel_C.cteDeleteOne(callerCap___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Basic 16 {
    var GhostAssertions : WordArray 50 64 = WordArrayUpdate(GhostAssertions : WordArray 50 64, 502, WordCast(8))
}
18 Cond 17 Err true
19 Cond 18 1 !((callerCap___ptr_to_struct_cte_C#v : Word 64) == 0)
20 Basic 19 {
    var callerCap___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.mdb_node_get_mdbNext((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
24 Basic 23 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = (tptr___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32)
}
25 Cond 24 Err (0 <=s 10) && (10 <s 64) && (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tptr___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tptr___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(2)))
26 Basic 25 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (tptr___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + 0, ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (tptr___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + 8, ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
27 Cond 26 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
28 Basic 27 {
    var ret__struct_seL4_Fault_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64
    var ret__struct_seL4_Fault_C#v.words_C.1 : Word 64 = rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64
}
29 Call 28 Kernel_C.seL4_Fault_NullFault_new() -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
30 Cond 1 1 true
31 Cond 29 30 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(5)) || false
32 Cond 15 31 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
33 Cond 12 32 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
34 Basic 33 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
35 Call 34 Kernel_C.thread_state_ptr_get_tsType(state___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
36 Basic 35 {
    var state___ptr_to_struct_thread_state_C#v : Word 64 = (tptr___ptr_to_struct_tcb_C#v : Word 64) + 280
}
37 Cond 36 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 37

Function Kernel_C.checkPrio(prio___unsigned_long#v : Word 64, auth___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, mcp___unsigned_long#v : Word 64)
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
7 Basic 6 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(0))
}
8 Cond 7 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
11 Cond 10 3 (mcp___unsigned_long#v : Word 64) < (prio___unsigned_long#v : Word 64)
12 Basic 11 {
    var mcp___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((auth___ptr_to_struct_tcb_C#v : Word 64) + 352)
}
13 Cond 12 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, auth___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 13

Function Kernel_C.cteDelete(slot___ptr_to_struct_cte_C#v : Word 64, exposed___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.emptySlot(slot___ptr_to_struct_cte_C#v : Word 64, fs_ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, fs_ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 3 !((exposed___unsigned_long#v : Word 64) == 0) || !((fs_ret___struct_finaliseSlot_ret_C#v.success_C : Word 64) == 0)
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = fs_ret___struct_finaliseSlot_ret_C#v.status_C : Word 64
}
7 Cond 6 5 !((fs_ret___struct_finaliseSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
8 Basic 7 {
    var fs_ret___struct_finaliseSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_finaliseSlot_ret_C#v.status_C : Word 64
    var fs_ret___struct_finaliseSlot_ret_C#v.success_C : Word 64 = rv#space#ret__struct_finaliseSlot_ret_C#v.success_C : Word 64
    var fs_ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var fs_ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
9 Call 8 Kernel_C.finaliseSlot(slot___ptr_to_struct_cte_C#v : Word 64, exposed___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_finaliseSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_finaliseSlot_ret_C#v.success_C : Word 64, rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, rv#space#ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 9

Function Kernel_C.cteInsert(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.mdb_node_ptr_set_mdbPrev(WordCast(ret__unsigned_longlong#v : Word 64) + 16, WordCast(destSlot___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64))
4 Basic 3 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.mdb_node_get_mdbNext(newMDB___struct_mdb_node_C#v.words_C.0 : Word 64, newMDB___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Cond 5 1 !((ret__unsigned_longlong#v : Word 64) == 0)
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.mdb_node_get_mdbNext(newMDB___struct_mdb_node_C#v.words_C.0 : Word 64, newMDB___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Call 8 Kernel_C.mdb_node_ptr_set_mdbNext((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 16, WordCast(destSlot___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
11 Basic 10 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (destSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, newMDB___struct_mdb_node_C#v.words_C.0 : Word 64), (destSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, newMDB___struct_mdb_node_C#v.words_C.1 : Word 64)
}
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, destSlot___ptr_to_struct_cte_C#v : Word 64)
13 Basic 12 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (destSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, newCap___struct_cap_C#v.words_C.0 : Word 64), (destSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, newCap___struct_cap_C#v.words_C.1 : Word 64)
}
14 Cond 13 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, destSlot___ptr_to_struct_cte_C#v : Word 64)
15 Call 14 Kernel_C.setUntypedCapAsFull(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64, newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Basic 15 {
    var newMDB___struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var newMDB___struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
17 Call 16 Kernel_C.mdb_node_set_mdbFirstBadged(newMDB___struct_mdb_node_C#v.words_C.0 : Word 64, newMDB___struct_mdb_node_C#v.words_C.1 : Word 64, WordCast(newCapIsRevocable___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
18 Basic 17 {
    var newMDB___struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var newMDB___struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
19 Call 18 Kernel_C.mdb_node_set_mdbRevocable(newMDB___struct_mdb_node_C#v.words_C.0 : Word 64, newMDB___struct_mdb_node_C#v.words_C.1 : Word 64, WordCast(newCapIsRevocable___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
20 Basic 19 {
    var newMDB___struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var newMDB___struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
21 Call 20 Kernel_C.mdb_node_set_mdbPrev(srcMDB___struct_mdb_node_C#v.words_C.0 : Word 64, srcMDB___struct_mdb_node_C#v.words_C.1 : Word 64, WordCast(srcSlot___ptr_to_struct_cte_C#v : Word 64)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
22 Basic 21 {
    var newCapIsRevocable___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
23 Call 22 Kernel_C.isCapRevocable(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64, srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
24 Basic 23 {
    var srcCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var srcCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
25 Cond 24 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
26 Basic 25 {
    var srcMDB___struct_mdb_node_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0))
    var srcMDB___struct_mdb_node_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))
}
27 Cond 26 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 27

Function Kernel_C.cteRevoke(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
8 Basic 4 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
9 Basic 8 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
10 Call 9 Kernel_C.isMDBParentOf(slot___ptr_to_struct_cte_C#v : Word 64, nextPtr___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
11 Cond 10 4 !((ret__int#v : Word 32) == 0)
12 Basic 11 {
    var ret__int#v : Word 32 = IfThenElse(!((nextPtr___ptr_to_struct_cte_C#v : Word 64) == 0), 1, 0)
}
13 Basic 12 {
    var nextPtr___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.mdb_node_get_mdbNext((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Cond 15 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
18 Cond 17 16 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
19 Basic 18 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
20 Call 19 Kernel_C.preemptionPoint(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
22 Cond 21 20 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
23 Basic 22 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.cteDelete(nextPtr___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 24 3 !((ret__int#v : Word 32) == 0)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
25 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
26 Basic 25 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.isMDBParentOf(slot___ptr_to_struct_cte_C#v : Word 64, nextPtr___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
28 Cond 27 7 !((ret__int#v : Word 32) == 0)
29 Basic 28 {
    var ret__int#v : Word 32 = IfThenElse(!((nextPtr___ptr_to_struct_cte_C#v : Word 64) == 0), 1, 0)
}
30 Basic 29 {
    var nextPtr___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
31 Basic 30 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
32 Call 31 Kernel_C.mdb_node_get_mdbNext((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
33 Cond 32 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 33

Function Kernel_C.deriveCap(slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_deriveCap_ret_C#v.status_C : Word 64, ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_deriveCap_ret_C#v.status_C : Word 64 = ret___struct_deriveCap_ret_C#v.status_C : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
4 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Basic 4 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
8 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Basic 8 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
10 Call 9 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
11 Basic 10 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
12 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
13 Basic 12 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
14 Call 13 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
15 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
16 Cond 14 15 !((ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
17 Basic 16 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = ret__unsigned_long#v : Word 64
}
18 Basic 17 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.ensureNoChildren(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
21 Basic 20 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
22 Call 21 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
23 Basic 22 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
24 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
25 Basic 24 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
26 Cond 25 3 true
27 Cond 23 26 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)) || false
28 Cond 19 27 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
29 Cond 11 28 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(14)) || false
30 Cond 7 29 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)) || false
31 Basic 30 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
32 Call 31 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
33 Basic 1 { }
34 Basic 33 {
    var ret__struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
35 Call 34 Kernel_C.Arch_deriveCap(slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
36 Cond 35 32 !((ret__unsigned_long#v : Word 64) == 0)
37 Basic 36 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
38 Call 37 Kernel_C.isArchCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 38

Function Kernel_C.emptySlot(slot___ptr_to_struct_cte_C#v : Word 64, cleanupInfo___struct_cap_C#v.words_C.0 : Word 64, cleanupInfo___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.postCapDeletion(cleanupInfo___struct_cap_C#v.words_C.0 : Word 64, cleanupInfo___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, ret__struct_mdb_node_C#v.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
}
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
5 Basic 4 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.mdb_node_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
9 Basic 8 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
10 Call 9 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
11 Call 10 Kernel_C.mdb_node_ptr_set_mdbFirstBadged((next___ptr_to_struct_cte_C#v : Word 64) + 16, WordCastSigned(ret__int#v : Word 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, next___ptr_to_struct_cte_C#v : Word 64)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.mdb_node_get_mdbFirstBadged(mdbNode___struct_mdb_node_C#v.words_C.0 : Word 64, mdbNode___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Cond 12 15 !((ret__int#v : Word 32) == 0)
17 Basic 16 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.mdb_node_get_mdbFirstBadged((Mem : Mem) -MemAcc-> ((next___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((next___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Cond 19 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, next___ptr_to_struct_cte_C#v : Word 64)
21 Cond 20 10 !((next___ptr_to_struct_cte_C#v : Word 64) == 0)
22 Call 21 Kernel_C.mdb_node_ptr_set_mdbPrev((next___ptr_to_struct_cte_C#v : Word 64) + 16, WordCast(prev___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, next___ptr_to_struct_cte_C#v : Word 64)
24 Cond 23 21 !((next___ptr_to_struct_cte_C#v : Word 64) == 0)
25 Call 24 Kernel_C.mdb_node_ptr_set_mdbNext((prev___ptr_to_struct_cte_C#v : Word 64) + 16, WordCast(next___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
26 Cond 25 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, prev___ptr_to_struct_cte_C#v : Word 64)
27 Cond 26 24 !((prev___ptr_to_struct_cte_C#v : Word 64) == 0)
28 Basic 27 {
    var next___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.mdb_node_get_mdbNext(mdbNode___struct_mdb_node_C#v.words_C.0 : Word 64, mdbNode___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Basic 30 {
    var prev___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.mdb_node_get_mdbPrev(mdbNode___struct_mdb_node_C#v.words_C.0 : Word 64, mdbNode___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Basic 33 {
    var mdbNode___struct_mdb_node_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0))
    var mdbNode___struct_mdb_node_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))
}
35 Cond 34 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
36 Cond 35 1 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0))
37 Basic 36 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Cond 38 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 39

Function Kernel_C.initTimer(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.init_irqs(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err (4 == 0) || ((4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (4 * 32), WordCast(0 - 4))) || (!(4 == 0) && !(4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(4)))
3 Call 2 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (4 * 32), ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 Err (4 == 0) || ((4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (4 * 32), WordCast(0 - 4))) || (!(4 == 0) && !(4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(4)))
5 Basic 4 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_irq_control_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
8 Call 7 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
9 Call 8 Kernel_C.setIRQState(WordCastSigned(2), WordCastSigned(54), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Basic 10 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
15 Call 14 Kernel_C.setIRQState(WordCastSigned(0), i___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 14 !((i___unsigned_long#v : Word 64) == WordCastSigned(0))
10 Basic 11 {
    var loop#10#count : Word 64 = (loop#10#count : Word 64) + 1
}
11 Cond 12 Err true
12 Cond 16 9 (i___unsigned_long#v : Word 64) <= WordCastSigned(54)
13 Basic 11 {
    var loop#10#count : Word 64 = 0
}
17 Basic 13 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 17

Function Kernel_C.init_plat(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.initIRQController(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.isArchCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast((ret__unsigned_longlong#v : Word 64) % WordCastSigned(2))
}
4 Cond 3 Err !(2 == 0)
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 6

Function Kernel_C.isBlocked(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
5 Cond 4 2 true
6 Cond 3 5 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(5)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || false
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.thread_state_get_tsType((Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 9

Function Kernel_C.isStopped(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
5 Cond 4 2 true
6 Cond 3 5 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(5)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.thread_state_get_tsType((Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 9

Function Kernel_C.lookupCap(thread___ptr_to_struct_tcb_C#v : Word 64, cPtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupCap_ret_C#v.status_C : Word 64, ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookupCap_ret_C#v.status_C : Word 64 = ret___struct_lookupCap_ret_C#v.status_C : Word 64
    var ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64
}
4 Basic 3 {
    var ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64) + 0 + (8 * 0))
    var ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64) + 0 + (8 * 1))
}
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64)
6 Basic 5 {
    var ret___struct_lookupCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
7 Basic 1 {
    var ret__struct_lookupCap_ret_C#v.status_C : Word 64 = ret___struct_lookupCap_ret_C#v.status_C : Word 64
    var ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64
}
8 Basic 7 {
    var ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Basic 8 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
10 Call 9 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
11 Basic 10 {
    var ret___struct_lookupCap_ret_C#v.status_C : Word 64 = lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64
}
12 Cond 11 6 !(!(!((lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
13 Basic 12 {
    var lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64
}
14 Call 13 Kernel_C.lookupSlot(thread___ptr_to_struct_tcb_C#v : Word 64, cPtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 14

Function Kernel_C.lookup_fp(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, cptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 1 { }
5 Basic 4 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Cond 6 3 !(!((1 << WordCast(6)) < (bits___unsigned_long#v : Word 64)))
8 Cond 7 Err (0 <=s 6) && (6 <s 64)
13 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__int#v : Word 32) == 0), 1, 0)
}
14 Basic 13 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
15 Call 14 Kernel_C.cap_capType_equals(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(10)) -- updates (rv#space#ret__int#v : Word 32)
16 Cond 15 9 !((ret__int#v : Word 32) == 0)
17 Basic 16 {
    var ret__int#v : Word 32 = IfThenElse((bits___unsigned_long#v : Word 64) < (1 << WordCast(6)), 1, 0)
}
18 Cond 17 Err (0 <=s 6) && (6 <s 64)
19 Basic 18 {
    var bits___unsigned_long#v : Word 64 = (bits___unsigned_long#v : Word 64) + (guardBits___unsigned_long#v : Word 64) + (radixBits___unsigned_long#v : Word 64)
}
20 Basic 19 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
22 Basic 21 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64) + ((radix___unsigned_long#v : Word 64) * 32)
}
23 Cond 22 Err ((radix___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64), radix___unsigned_long#v : Word 64)
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.cap_cnode_cap_get_capCNodePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Basic 25 {
    var radix___unsigned_long#v : Word 64 = (cptr2___unsigned_long#v : Word 64) << (guardBits___unsigned_long#v : Word 64) >> (1 << WordCast(6) - (radixBits___unsigned_long#v : Word 64))
}
27 Cond 26 Err ((1 << WordCast(6) - (radixBits___unsigned_long#v : Word 64)) < WordCastSigned(64)) && (0 <=s 6) && (6 <s 64) && ((guardBits___unsigned_long#v : Word 64) < WordCastSigned(64))
28 Basic 1 { }
29 Basic 28 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
30 Call 29 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
31 Cond 30 27 !((ret__int#v : Word 32) == 0)
32 Basic 31 {
    var ret__int#v : Word 32 = IfThenElse(!(!(!(((cptr2___unsigned_long#v : Word 64) >> (1 << WordCast(6) - (guardBits___unsigned_long#v : Word 64))) == (capGuard___unsigned_long#v : Word 64)))), 1, 0)
}
33 Cond 32 Err ((1 << WordCast(6) - (guardBits___unsigned_long#v : Word 64)) < WordCastSigned(64)) && (0 <=s 6) && (6 <s 64)
34 Cond 33 31 !((ret__int#v : Word 32) == 0)
35 Basic 34 {
    var ret__int#v : Word 32 = IfThenElse(!(!(!((guardBits___unsigned_long#v : Word 64) == 0))), 1, 0)
}
36 Basic 35 {
    var capGuard___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
37 Basic 36 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.cap_cnode_cap_get_capCNodeGuard(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Basic 38 {
    var cptr2___unsigned_long#v : Word 64 = (cptr___unsigned_long#v : Word 64) << (bits___unsigned_long#v : Word 64)
}
40 Cond 39 Err (bits___unsigned_long#v : Word 64) < WordCastSigned(64)
41 Basic 40 {
    var radixBits___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
42 Basic 41 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
43 Call 42 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
44 Basic 43 {
    var guardBits___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
45 Basic 44 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
46 Call 45 Kernel_C.cap_cnode_cap_get_capCNodeGuardSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 10 {
    var loop#9#count : Word 64 = (loop#9#count : Word 64) + 1
}
10 Cond 11 Err true
11 Cond 46 8 !(!(!((ret__int#v : Word 32) == 0)))
12 Basic 10 {
    var loop#9#count : Word 64 = 0
}
47 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__int#v : Word 32) == 0), 1, 0)
}
48 Basic 47 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
49 Call 48 Kernel_C.cap_capType_equals(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(10)) -- updates (rv#space#ret__int#v : Word 32)
50 Cond 49 12 !((ret__int#v : Word 32) == 0)
51 Basic 50 {
    var ret__int#v : Word 32 = IfThenElse((bits___unsigned_long#v : Word 64) < (1 << WordCast(6)), 1, 0)
}
52 Cond 51 Err (0 <=s 6) && (6 <s 64)
53 Basic 52 {
    var bits___unsigned_long#v : Word 64 = (bits___unsigned_long#v : Word 64) + (guardBits___unsigned_long#v : Word 64) + (radixBits___unsigned_long#v : Word 64)
}
54 Basic 53 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
55 Cond 54 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
56 Basic 55 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64) + ((radix___unsigned_long#v : Word 64) * 32)
}
57 Cond 56 Err ((radix___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64), radix___unsigned_long#v : Word 64)
58 Basic 57 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
59 Call 58 Kernel_C.cap_cnode_cap_get_capCNodePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
60 Basic 59 {
    var radix___unsigned_long#v : Word 64 = (cptr2___unsigned_long#v : Word 64) << (guardBits___unsigned_long#v : Word 64) >> (1 << WordCast(6) - (radixBits___unsigned_long#v : Word 64))
}
61 Cond 60 Err ((1 << WordCast(6) - (radixBits___unsigned_long#v : Word 64)) < WordCastSigned(64)) && (0 <=s 6) && (6 <s 64) && ((guardBits___unsigned_long#v : Word 64) < WordCastSigned(64))
62 Basic 1 { }
63 Basic 62 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
64 Call 63 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
65 Cond 64 61 !((ret__int#v : Word 32) == 0)
66 Basic 65 {
    var ret__int#v : Word 32 = IfThenElse(!(!(!(((cptr2___unsigned_long#v : Word 64) >> (1 << WordCast(6) - (guardBits___unsigned_long#v : Word 64))) == (capGuard___unsigned_long#v : Word 64)))), 1, 0)
}
67 Cond 66 Err ((1 << WordCast(6) - (guardBits___unsigned_long#v : Word 64)) < WordCastSigned(64)) && (0 <=s 6) && (6 <s 64)
68 Cond 67 65 !((ret__int#v : Word 32) == 0)
69 Basic 68 {
    var ret__int#v : Word 32 = IfThenElse(!(!(!((guardBits___unsigned_long#v : Word 64) == 0))), 1, 0)
}
70 Basic 69 {
    var capGuard___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
71 Basic 70 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
72 Call 71 Kernel_C.cap_cnode_cap_get_capCNodeGuard(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
73 Basic 72 {
    var cptr2___unsigned_long#v : Word 64 = (cptr___unsigned_long#v : Word 64) << (bits___unsigned_long#v : Word 64)
}
74 Cond 73 Err (bits___unsigned_long#v : Word 64) < WordCastSigned(64)
75 Basic 74 {
    var radixBits___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
76 Basic 75 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
77 Call 76 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
78 Basic 77 {
    var guardBits___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
79 Basic 78 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
80 Call 79 Kernel_C.cap_cnode_cap_get_capCNodeGuardSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
81 Basic 1 { }
82 Basic 81 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
83 Call 82 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
84 Cond 83 80 !(!(!(!((ret__int#v : Word 32) == 0))))
85 Basic 84 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
86 Call 85 Kernel_C.cap_capType_equals(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(10)) -- updates (rv#space#ret__int#v : Word 32)
87 Basic 86 {
    var bits___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 87

Function Kernel_C.popcountl(mask___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.read_sepc(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = temp___unsigned_long#v : Word 64
}
4 Call 3 asm_instruction'csrr_%0,_sepc(Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 4

Function Kernel_C.setDomain(tptr___ptr_to_struct_tcb_C#v : Word 64, dom___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 1 (tptr___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
4 Cond 3 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
5 Call 4 Kernel_C.tcbSchedEnqueue(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 4 !((ret__unsigned_long#v : Word 64) == 0)
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.isRunnable(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tptr___ptr_to_struct_tcb_C#v : Word 64) + 344, dom___unsigned_long#v : Word 64)
}
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.tcbSchedDequeue(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 11

Function Kernel_C.setNextPC(thread___ptr_to_struct_tcb_C#v : Word 64, v___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(34), v___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.setVMRoot(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setVSpaceRoot(ret__unsigned_long#v : Word 64, asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.addrFromPPtr(lvl1pt___ptr_to_struct_pte_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
5 Call 1 Kernel_C.setVSpaceRoot(ret__unsigned_long#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.kpptr_to_paddr(kernel_root_pageTable : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64)
9 Cond 8 4 !(!(!((find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64) == WordCastSigned(0)) || !((find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64) == (lvl1pt___ptr_to_struct_pte_C#v : Word 64))))
10 Basic 9 {
    var find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
11 Call 10 Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Basic 11 {
    var asid___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_page_table_cap_get_capPTMappedASID(threadRoot___struct_cap_C#v.words_C.0 : Word 64, threadRoot___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 14 {
    var lvl1pt___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_page_table_cap_get_capPTBasePtr(threadRoot___struct_cap_C#v.words_C.0 : Word 64, threadRoot___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
18 Call 1 Kernel_C.setVSpaceRoot(ret__unsigned_long#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Basic 18 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
20 Call 19 Kernel_C.kpptr_to_paddr(kernel_root_pageTable : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
21 Cond 20 Err PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64)
22 Cond 21 17 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3))
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.cap_get_capType(threadRoot___struct_cap_C#v.words_C.0 : Word 64, threadRoot___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Basic 24 {
    var threadRoot___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32) + 0 + (8 * 0))
    var threadRoot___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32) + 0 + (8 * 1))
}
26 Cond 25 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1))) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32)) && (0 <=s 10) && (10 <s 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
EntryPoint 26

Function Kernel_C.timerTick(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 1 (Mem : Mem) -MemAcc-> (ksDomainTime : Word 64) == WordCastSigned(0)
4 Cond 3 Err PGlobalValid(HTD : HTD, Word 64, ksDomainTime : Word 64)
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksDomainTime : Word 64, (Mem : Mem) -MemAcc-> (ksDomainTime : Word 64) - WordCastSigned(1))
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Word 64, ksDomainTime : Word 64)
7 Cond 6 1 1 <s 16
8 Basic 7 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 368, (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 368) - WordCastSigned(1))
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
11 Cond 10 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
12 Call 7 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Call 12 Kernel_C.tcbSchedAppend((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Cond 13 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
15 Basic 14 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 368, WordCastSigned(5))
}
16 Cond 15 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
18 Cond 17 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
19 Cond 11 18 WordCastSigned(1) < (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 368)
20 Cond 19 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
22 Cond 21 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
23 Cond 22 7 !(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)))
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.thread_state_get_tsType((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Cond 25 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
27 Cond 26 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
28 Cond 27 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 28

Function Kernel_C.unmapPage(page_size___unsigned_long#v : Word 64, asid___unsigned_long#v : Word 64, vptr___unsigned_long#v : Word 64, pptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var Mem : Mem = MemUpdate(Mem : Mem, (lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64) + (0 * 8) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
4 Cond 3 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, (lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64) + (0 * 8), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, WordCast(0))) && PValid(HTD : HTD, Struct Kernel_C.pte_C, (lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64) + (0 * 8)) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, (lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64) + (0 * 8), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, WordCast(0 + 1)))
5 Basic 4 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
6 Call 5 Kernel_C.pte_pte_invalid_new() -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
7 Cond 1 6 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse(!(((ret__unsigned_longlong#v : Word 64) << WordCast(12)) == WordCast(ret__unsigned_long#v : Word 64)), 1, 0)
}
9 Cond 8 Err (0 <=s 12) && (12 <s 64)
10 Basic 9 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.addrFromPPtr(pptr___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.pte_ptr_get_ppn(lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Cond 7 13 !((ret__int#v : Word 32) == 0)
15 Basic 14 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
16 Basic 15 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.isPTEPageTable(lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
18 Cond 14 17 !((ret__int#v : Word 32) == 0)
19 Basic 18 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.pte_ptr_get_valid(lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Cond 1 21 !(!(!((lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) == (ret__unsigned_long#v : Word 64))))
23 Basic 22 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.pageBitsForSize(page_size___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
25 Basic 24 {
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64
}
26 Call 25 Kernel_C.lookupPTSlot(find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)
27 Cond 1 26 !((find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64) == WordCastSigned(0))
28 Basic 27 {
    var find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
29 Call 28 Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 29

Function Kernel_C.updatePTE(pte___struct_pte_C#v.words_C.0 : Word 64, base___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (base___ptr_to_struct_pte_C#v : Word 64) + 0 + 0, pte___struct_pte_C#v.words_C.0 : Word 64)
}
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.pte_C, base___ptr_to_struct_pte_C#v : Word 64)
EntryPoint 6

Function Kernel_C.write_sie(value___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'csrw_sie,__%0(value___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS) -- updates (Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.Zombie_new(number___unsigned_long#v : Word 64, type___unsigned_long#v : Word 64, ptr___unsigned_long#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Call 4 Kernel_C.cap_zombie_cap_new(WordCast(((ptr___unsigned_long#v : Word 64) & ~(mask___unsigned_long#v : Word 64)) | ((number___unsigned_long#v : Word 64) & (mask___unsigned_long#v : Word 64))), WordCast(type___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
6 Basic 5 {
    var mask___unsigned_long#v : Word 64 = 1 << WordCast(4 + 1) - 1
}
7 Cond 6 Err (0 <=s (4 + 1)) && ((4 + 1) <s 64) && ((4 <=s (4 + 1)) == (0 <=s 1))
8 Basic 5 {
    var mask___unsigned_long#v : Word 64 = 1 << ((type___unsigned_long#v : Word 64) + WordCastSigned(1)) - 1
}
9 Cond 8 Err ((type___unsigned_long#v : Word 64) + WordCastSigned(1)) < WordCastSigned(64)
10 Cond 7 9 (type___unsigned_long#v : Word 64) == (1 << WordCast(6))
11 Cond 10 Err (0 <=s 6) && (6 <s 64)
EntryPoint 11

Function Kernel_C.deleteASID(asid___unsigned_long#v : Word 64, vspace___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setVMRoot((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) + (8 * (asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1)), WordCastSigned(0))
}
5 Cond 4 Err ((asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Struct Kernel_C.asid_pool_C, poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) && (0 <=s 9) && (9 <s 64)
6 Call 5 Kernel_C.hwASIDFlush(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 1 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) + (8 * (asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1))) == (vspace___ptr_to_struct_pte_C#v : Word 64), 1, 0)
}
9 Cond 8 Err ((asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Struct Kernel_C.asid_pool_C, poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) && (0 <=s 9) && (9 <s 64)
10 Cond 9 7 !((ret__int#v : Word 32) == 0)
11 Basic 10 {
    var ret__int#v : Word 32 = IfThenElse(!((poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) == WordCastSigned(0)), 1, 0)
}
12 Basic 11 {
    var poolPtr___ptr_to_struct_asid_pool_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((riscvKSASIDTable : Word 64) + (8 * (asid___unsigned_long#v : Word 64) >> WordCast(9)))
}
13 Cond 12 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
14 Cond 13 Err (((asid___unsigned_long#v : Word 64) >> WordCast(9)) < WordCastSigned(128)) && (0 <=s 9) && (9 <s 64)
EntryPoint 14

Function Kernel_C.handleRecv(isBlocking___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.receiveIPC((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64, isBlocking___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Call 3 Kernel_C.deleteCallerCap((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
6 Call 1 Kernel_C.handleFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 7 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
10 Call 9 Kernel_C.seL4_Fault_CapFault_new(WordCast(epCPtr___unsigned_long#v : Word 64), WordCastSigned(1)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
11 Basic 10 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
12 Cond 11 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
13 Call 12 Kernel_C.lookup_fault_missing_capability_new(WordCastSigned(0)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
14 Cond 13 5 !(!(!(!((ret__unsigned_longlong#v : Word 64) == 0))))
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_endpoint_cap_get_capCanReceive(lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Call 1 Kernel_C.receiveSignal((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64, isBlocking___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Cond 17 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
19 Call 1 Kernel_C.handleFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Cond 19 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
21 Basic 20 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
22 Cond 21 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
23 Call 22 Kernel_C.seL4_Fault_CapFault_new(WordCast(epCPtr___unsigned_long#v : Word 64), WordCastSigned(1)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
24 Basic 23 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
26 Call 25 Kernel_C.lookup_fault_missing_capability_new(WordCastSigned(0)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
27 Cond 26 18 !(!(!(!((ret__unsigned_longlong#v : Word 64) == 0)) || (!((boundTCB___ptr_to_struct_tcb_C#v : Word 64) == 0) && !((boundTCB___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)))))
28 Cond 27 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.cap_notification_cap_get_capNtfnCanReceive(lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Basic 30 {
    var boundTCB___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.notification_ptr_get_ntfnBoundTCB(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Basic 33 {
    var ntfnPtr___ptr_to_struct_notification_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
35 Basic 34 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
36 Call 35 Kernel_C.cap_notification_cap_get_capNtfnPtr(lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
37 Call 1 Kernel_C.handleFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
38 Cond 37 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
39 Basic 38 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
40 Cond 39 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
41 Call 40 Kernel_C.seL4_Fault_CapFault_new(WordCast(epCPtr___unsigned_long#v : Word 64), WordCastSigned(1)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
42 Basic 41 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
43 Cond 42 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
44 Call 43 Kernel_C.lookup_fault_missing_capability_new(WordCastSigned(0)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
45 Cond 44 1 true
46 Cond 36 45 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
47 Cond 16 46 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
48 Basic 47 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
49 Call 48 Kernel_C.cap_get_capType(lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
50 Call 1 Kernel_C.handleFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
51 Cond 50 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
52 Basic 51 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
53 Cond 52 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
54 Call 53 Kernel_C.seL4_Fault_CapFault_new(WordCast(epCPtr___unsigned_long#v : Word 64), WordCastSigned(1)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
55 Cond 54 49 !(!(!((lu_ret___struct_lookupCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
56 Basic 55 {
    var lu_ret___struct_lookupCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64
    var lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64
}
57 Call 56 Kernel_C.lookupCap((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), epCPtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
58 Cond 57 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
59 Basic 58 {
    var epCPtr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
60 Call 59 Kernel_C.getRegister((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(9), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
61 Cond 60 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 61

Function Kernel_C.isRunnable(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
5 Cond 4 2 true
6 Cond 3 5 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.thread_state_get_tsType((Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 9

Function Kernel_C.lookupSlot(thread___ptr_to_struct_tcb_C#v : Word 64, capptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64, ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64 = ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64 = ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64
}
4 Basic 3 {
    var ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64 = res_ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
}
5 Basic 4 {
    var ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64 = res_ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64
}
6 Basic 5 {
    var res_ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = rv#space#ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var res_ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var res_ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = rv#space#ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
7 Call 6 Kernel_C.resolveAddressBits(threadRoot___struct_cap_C#v.words_C.0 : Word 64, threadRoot___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, 1 << WordCast(6), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64, rv#space#ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64, rv#space#ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 7 Err (0 <=s 6) && (6 <s 64)
9 Basic 8 {
    var threadRoot___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32) + 0 + (8 * 0))
    var threadRoot___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32) + 0 + (8 * 1))
}
10 Cond 9 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0))) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32)) && (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
EntryPoint 10

Function Kernel_C.nextDomain(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksDomainTime : Word 64, (Mem : Mem) -MemAcc-> ((ksDomSchedule : Word 64) + (16 * (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64)) + 8))
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Word 64, ksDomainTime : Word 64) && PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
4 Cond 3 Err (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64) < WordCastSigned(3)
5 Cond 4 Err PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksCurDomain : Word 64, (Mem : Mem) -MemAcc-> ((ksDomSchedule : Word 64) + (16 * (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64)) + 0))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64) && PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
8 Cond 7 Err (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64) < WordCastSigned(3)
9 Cond 8 Err PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksWorkUnitsCompleted : Word 64, WordCastSigned(0))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Word 64, ksWorkUnitsCompleted : Word 64)
12 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksDomScheduleIdx : Word 64, WordCastSigned(0))
}
13 Cond 12 Err PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
14 Cond 13 11 WordCast(48 / 16) <= (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64)
15 Cond 14 Err PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
16 Basic 15 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksDomScheduleIdx : Word 64, (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64) + WordCastSigned(1))
}
17 Cond 16 Err PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
EntryPoint 17

Function Kernel_C.receiveIPC(thread___ptr_to_struct_tcb_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, isBlocking___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.completeSignal(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 1 Kernel_C.ep_ptr_set_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
6 Call 5 Kernel_C.tcbEPAppend(thread___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Basic 6 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
8 Call 7 Kernel_C.ep_ptr_get_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
9 Call 8 Kernel_C.scheduleTCB(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Call 9 Kernel_C.thread_state_ptr_set_blockingIPCCanGrant((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.cap_endpoint_cap_get_capCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Call 13 Kernel_C.thread_state_ptr_set_blockingObject((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(epptr___ptr_to_struct_endpoint_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
16 Call 15 Kernel_C.thread_state_ptr_set_tsType((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(3), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
18 Call 1 Kernel_C.doNBRecvFailedTransfer(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Cond 17 18 !((isBlocking___unsigned_long#v : Word 64) == 0)
20 Call 1 Kernel_C.setupCallerCap(sender___ptr_to_struct_tcb_C#v : Word 64, thread___ptr_to_struct_tcb_C#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.cap_endpoint_cap_get_capCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Call 1 Kernel_C.setThreadState(sender___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Cond 22 23 !((canGrant___unsigned_long#v : Word 64) == 0) || !((canGrantReply___unsigned_long#v : Word 64) == 0)
25 Call 1 Kernel_C.possibleSwitchTo(sender___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
26 Call 25 Kernel_C.setThreadState(sender___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Cond 24 26 !((do_call___unsigned_long#v : Word 64) == 0)
28 Basic 27 {
    var do_call___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.thread_state_ptr_get_blockingIPCIsCall((sender___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Cond 30 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
32 Call 31 Kernel_C.doIPCTransfer(sender___ptr_to_struct_tcb_C#v : Word 64, epptr___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, canGrant___unsigned_long#v : Word 64, thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
33 Basic 32 {
    var canGrantReply___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
34 Basic 33 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
35 Call 34 Kernel_C.thread_state_ptr_get_blockingIPCCanGrantReply((sender___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
36 Cond 35 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
37 Basic 36 {
    var canGrant___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
38 Basic 37 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
39 Call 38 Kernel_C.thread_state_ptr_get_blockingIPCCanGrant((sender___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
40 Cond 39 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
41 Basic 40 {
    var badge___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
42 Basic 41 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
43 Call 42 Kernel_C.thread_state_ptr_get_blockingIPCBadge((sender___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
44 Cond 43 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
45 Call 44 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
46 Cond 45 44 !(!((queue___struct_tcb_queue_C#v.head_C : Word 64) == 0))
47 Call 46 Kernel_C.ep_ptr_set_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
48 Basic 47 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
49 Call 48 Kernel_C.tcbEPDequeue(sender___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
50 Basic 49 {
    var sender___ptr_to_struct_tcb_C#v : Word 64 = queue___struct_tcb_queue_C#v.head_C : Word 64
}
51 Basic 50 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
52 Call 51 Kernel_C.ep_ptr_get_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
53 Cond 1 1 true
54 Cond 52 53 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
55 Cond 19 54 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
56 Basic 55 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
57 Call 56 Kernel_C.endpoint_ptr_get_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
58 Cond 2 57 !((ret__int#v : Word 32) == 0)
59 Basic 58 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2), 1, 0)
}
60 Basic 59 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
61 Call 60 Kernel_C.notification_ptr_get_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
62 Cond 61 58 !((ret__int#v : Word 32) == 0)
63 Basic 62 {
    var ret__int#v : Word 32 = IfThenElse(!((ntfnPtr___ptr_to_struct_notification_C#v : Word 64) == 0), 1, 0)
}
64 Basic 63 {
    var ntfnPtr___ptr_to_struct_notification_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 304)
}
65 Cond 64 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
66 Basic 65 {
    var epptr___ptr_to_struct_endpoint_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
67 Basic 66 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
68 Call 67 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 68

Function Kernel_C.resetTimer(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.riscv_read_time(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Call 7 Kernel_C.sbi_set_timer(target___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Basic 8 {
    var target___unsigned_longlong#v : Word 64 = (ret__unsigned_longlong#v : Word 64) + (1000000 / 1000 * WordCastSigned(2))
}
10 Cond 9 Err !(1000 == 0)
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.riscv_read_time(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 12 1 (target___unsigned_longlong#v : Word 64) < (ret__unsigned_longlong#v : Word 64)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
13 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.riscv_read_time(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Call 14 Kernel_C.sbi_set_timer(target___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Basic 15 {
    var target___unsigned_longlong#v : Word 64 = (ret__unsigned_longlong#v : Word 64) + (1000000 / 1000 * WordCastSigned(2))
}
17 Cond 16 Err !(1000 == 0)
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.riscv_read_time(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 19

Function Kernel_C.sendSignal(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.possibleSwitchTo(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.setRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.setThreadState(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.cancelIPC(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 1 Kernel_C.ntfn_set_active(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 5 6 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.thread_state_ptr_get_tsType((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
11 Call 1 Kernel_C.ntfn_set_active(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 10 11 !((tcb___ptr_to_struct_tcb_C#v : Word 64) == 0)
13 Basic 12 {
    var tcb___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.notification_ptr_get_ntfnBoundTCB(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Call 1 Kernel_C.possibleSwitchTo(dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Call 16 Kernel_C.setRegister(dest___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Call 17 Kernel_C.setThreadState(dest___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Call 18 Kernel_C.notification_ptr_set_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Cond 19 18 !(!((ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64) == 0))
21 Call 20 Kernel_C.ntfn_ptr_set_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64, ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
22 Basic 21 {
    var ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
23 Call 22 Kernel_C.tcbEPDequeue(dest___ptr_to_struct_tcb_C#v : Word 64, ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64, ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Basic 23 {
    var dest___ptr_to_struct_tcb_C#v : Word 64 = ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64
}
25 Basic 24 {
    var ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
26 Call 25 Kernel_C.ntfn_ptr_get_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
27 Call 1 Kernel_C.notification_ptr_set_ntfnMsgIdentifier(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCast(badge2___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
28 Basic 27 {
    var badge2___unsigned_long#v : Word 64 = (badge2___unsigned_long#v : Word 64) | (badge___unsigned_long#v : Word 64)
}
29 Basic 28 {
    var badge2___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
30 Basic 29 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
31 Call 30 Kernel_C.notification_ptr_get_ntfnMsgIdentifier(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
32 Cond 1 1 true
33 Cond 31 32 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
34 Cond 26 33 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
35 Cond 15 34 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
36 Basic 35 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
37 Call 36 Kernel_C.notification_ptr_get_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 37

Function Kernel_C.set_fs_off(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'csrc_sstatus,_%0(WordCastSigned(24576), Mem : Mem, PMS : PMS) -- updates (Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.write_satp(value___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'csrw_satp,_%0(value___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS) -- updates (Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.write_slot(slot_ptr___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.mdb_node_ptr_set_mdbFirstBadged((slot_ptr___ptr_to_struct_cte_C#v : Word 64) + 16, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot_ptr___ptr_to_struct_cte_C#v : Word 64)
4 Call 3 Kernel_C.mdb_node_ptr_set_mdbRevocable((slot_ptr___ptr_to_struct_cte_C#v : Word 64) + 16, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot_ptr___ptr_to_struct_cte_C#v : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot_ptr___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, ret__struct_mdb_node_C#v.words_C.0 : Word 64), (slot_ptr___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
}
7 Cond 6 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot_ptr___ptr_to_struct_cte_C#v : Word 64)
8 Basic 7 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.mdb_node_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot_ptr___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, cap___struct_cap_C#v.words_C.0 : Word 64), (slot_ptr___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, cap___struct_cap_C#v.words_C.1 : Word 64)
}
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot_ptr___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 11

Function Kernel_C.addToBitmap(cpu___unsigned_long#v : Word 64, dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ksReadyQueuesL2Bitmap : Word 64) + (32 * (dom___unsigned_long#v : Word 64)) + (8 * (l1index_inverted___unsigned_long#v : Word 64)), (Mem : Mem) -MemAcc-> ((ksReadyQueuesL2Bitmap : Word 64) + (32 * (dom___unsigned_long#v : Word 64)) + (8 * (l1index_inverted___unsigned_long#v : Word 64))) | (1 << (prio___unsigned_long#v : Word 64) & (1 << WordCast(6) - 1)))
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Array (Array (Word 64) 4) 16, ksReadyQueuesL2Bitmap : Word 64)
4 Cond 3 Err ((l1index_inverted___unsigned_long#v : Word 64) < WordCastSigned(4)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((prio___unsigned_long#v : Word 64) & (1 << WordCast(6) - 1) < WordCastSigned(64)) && (0 <=s 6) && (6 <s 64) && ((l1index_inverted___unsigned_long#v : Word 64) < WordCastSigned(4)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16))
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ksReadyQueuesL1Bitmap : Word 64) + (8 * (dom___unsigned_long#v : Word 64)), (Mem : Mem) -MemAcc-> ((ksReadyQueuesL1Bitmap : Word 64) + (8 * (dom___unsigned_long#v : Word 64))) | (1 << (l1index___unsigned_long#v : Word 64)))
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Array (Word 64) 16, ksReadyQueuesL1Bitmap : Word 64)
7 Cond 6 Err ((dom___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((l1index___unsigned_long#v : Word 64) < WordCastSigned(64)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16))
8 Basic 7 {
    var l1index_inverted___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.invert_l1index(l1index___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var l1index___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.prio_to_l1index(prio___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 11

Function Kernel_C.bi_finalise(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 40 + 0, slot_pos_start___unsigned_long#v : Word 64), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 40 + 8, slot_pos_end___unsigned_long#v : Word 64)
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584))
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
6 Basic 5 {
    var slot_pos_end___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 600)
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
8 Basic 7 {
    var slot_pos_start___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
EntryPoint 9

Function Kernel_C.c_exit_hook() -- updates: ()
1 Basic Ret { }
2 Call 1 Kernel_C.arch_c_exit_hook() -- updates ()
EntryPoint 2

Function Kernel_C.clearMemory(ptr___ptr_to_void#v : Word 64, bits___unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.memzero(ptr___ptr_to_void#v : Word 64, 1 << WordCast(bits___unsigned#v : Word 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err (bits___unsigned#v : Word 32) < WordCastSigned(64)
EntryPoint 3

Function Kernel_C.finaliseCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, final___unsigned_long#v : Word 64, exposed___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64, ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64, ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
4 Basic 3 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Basic 4 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Basic 7 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
11 Basic 10 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
12 Basic 11 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
13 Call 12 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
14 Basic 13 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
15 Basic 14 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
16 Call 15 Kernel_C.Zombie_new(1 << (ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), WordCast(unsigned_longlong_eret_3#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
17 Cond 16 Err (ret__unsigned_longlong#v : Word 64) < WordCastSigned(64)
18 Basic 17 {
    var unsigned_longlong_eret_3#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.cap_cnode_cap_get_capCNodePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Basic 19 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Cond 23 9 !((final___unsigned_long#v : Word 64) == 0)
25 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
26 Basic 25 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
27 Basic 26 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
28 Call 27 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
29 Basic 28 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
30 Basic 29 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
31 Call 30 Kernel_C.Zombie_new(WordCastSigned(5), 1 << WordCast(6), cte_ptr___ptr_to_struct_cte_C#v : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
32 Cond 31 Err (0 <=s 6) && (6 <s 64)
33 Call 32 Kernel_C.Arch_prepareThreadDelete(tcb___ptr_to_struct_tcb_C#v : Word 64) -- updates ()
34 Call 33 Kernel_C.suspend(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
35 Call 34 Kernel_C.unbindNotification(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
36 Basic 35 {
    var cte_ptr___ptr_to_struct_cte_C#v : Word 64 = (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32)
}
37 Cond 36 Err (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (tcb___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
38 Basic 37 {
    var tcb___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
39 Basic 38 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
40 Call 39 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
41 Cond 40 9 !((final___unsigned_long#v : Word 64) == 0)
42 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
43 Basic 42 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
44 Basic 43 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
45 Call 44 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
46 Basic 45 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
47 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
48 Basic 47 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
49 Basic 48 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
50 Basic 49 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
51 Call 50 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
52 Call 51 Kernel_C.deletingIRQHandler(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
53 Basic 52 {
    var irq___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
54 Basic 53 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
55 Call 54 Kernel_C.cap_irq_handler_cap_get_capIRQ(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
56 Cond 55 9 !((final___unsigned_long#v : Word 64) == 0)
57 Cond 9 9 true
58 Cond 56 57 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(16)) || false
59 Cond 46 58 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)) || false
60 Cond 41 59 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)) || false
61 Cond 24 60 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10)) || false
62 Basic 61 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
63 Call 62 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
64 Cond 63 Err false
65 Call 64 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
66 Cond 65 Err false
67 Cond 66 63 !((exposed___unsigned_long#v : Word 64) == 0)
68 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
69 Basic 68 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
70 Basic 69 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
71 Call 70 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
72 Basic 71 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
73 Basic 72 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
74 Call 73 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
75 Call 74 Kernel_C.cancelAllIPC(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
76 Basic 75 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
77 Call 76 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
78 Cond 77 74 !((final___unsigned_long#v : Word 64) == 0)
79 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
80 Basic 79 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
81 Basic 80 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
82 Call 81 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
83 Basic 82 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
84 Basic 83 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
85 Call 84 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
86 Call 85 Kernel_C.cancelAllSignals(ntfn___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
87 Call 86 Kernel_C.unbindMaybeNotification(ntfn___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
88 Basic 87 {
    var ntfn___ptr_to_struct_notification_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
89 Basic 88 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
90 Call 89 Kernel_C.cap_notification_cap_get_capNtfnPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
91 Cond 90 85 !((final___unsigned_long#v : Word 64) == 0)
92 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
93 Basic 92 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
94 Basic 93 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
95 Call 94 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
96 Basic 95 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
97 Basic 96 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
98 Call 97 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
99 Cond 67 67 true
100 Cond 98 99 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(20)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)) || false
101 Cond 91 100 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
102 Cond 78 101 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
103 Basic 102 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
104 Call 103 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
105 Basic 1 { }
106 Basic 105 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
107 Call 106 Kernel_C.Arch_finaliseCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, final___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
108 Cond 107 104 !((ret__unsigned_long#v : Word 64) == 0)
109 Basic 108 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
110 Call 109 Kernel_C.isArchCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 110

Function Kernel_C.getRegister(thread___ptr_to_struct_tcb_C#v : Word 64, reg___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + (8 * (reg___unsigned_long#v : Word 64)))
}
4 Cond 3 Err ((reg___unsigned_long#v : Word 64) < WordCastSigned(35)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 4

Function Kernel_C.get_hart_id() -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
EntryPoint 3

Function Kernel_C.handleFault(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.handleDoubleFault(tptr___ptr_to_struct_tcb_C#v : Word 64, fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, fault___struct_seL4_Fault_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 1 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
4 Basic 3 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.sendFaultIPC(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var fault___struct_seL4_Fault_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((current_fault : Word 64) + 0 + (8 * 0))
    var fault___struct_seL4_Fault_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((current_fault : Word 64) + 0 + (8 * 1))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
EntryPoint 7

Function Kernel_C.handleReply(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Call 2 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
4 Cond 3 Err false
5 Call 1 Kernel_C.doReplyTransfer((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), caller___ptr_to_struct_tcb_C#v : Word 64, callerSlot___ptr_to_struct_cte_C#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_reply_cap_get_capReplyCanGrant(callerCap___struct_cap_C#v.words_C.0 : Word 64, callerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 8 {
    var caller___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_reply_cap_get_capTCBPtr(callerCap___struct_cap_C#v.words_C.0 : Word 64, callerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 4 11 !((ret__unsigned_longlong#v : Word 64) == 0)
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_reply_cap_get_capReplyMaster(callerCap___struct_cap_C#v.words_C.0 : Word 64, callerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Cond 4 4 true
16 Cond 1 15 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
17 Cond 14 16 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)) || false
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.cap_get_capType(callerCap___struct_cap_C#v.words_C.0 : Word 64, callerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Basic 19 {
    var callerCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var callerCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
22 Basic 21 {
    var callerSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32)
}
23 Cond 22 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
24 Cond 23 Err (0 <=s 10) && (10 <s 64) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(3)))
25 Cond 24 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 25

Function Kernel_C.handleYield(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.tcbSchedAppend((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
5 Call 4 Kernel_C.tcbSchedDequeue((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 6

Function Kernel_C.hwASIDFlush(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'sfence.vma_x0,_%0(asid___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS) -- updates (Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.idle_thread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Call 2 asm_instruction'wfi(Mem : Mem, PMS : PMS) -- updates (Mem : Mem, PMS : PMS)
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 6 1 !(1 == 0)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
EntryPoint 5

Function Kernel_C.initL2Cache() -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.init_kernel(ui_p_reg_start___unsigned_long#v : Word 64, ui_p_reg_end___unsigned_long#v : Word 64, pv_offset___long#v : Word 64, v_entry___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.activateThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.schedule(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 Err false
5 Call 4 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
6 Cond 5 Err false
7 Cond 6 3 !(!((result___unsigned_long#v : Word 64) == 0))
8 Basic 7 {
    var result___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.try_init_kernel(ui_p_reg_start___unsigned_long#v : Word 64, ui_p_reg_end___unsigned_long#v : Word 64, WordCastSigned(pv_offset___long#v : Word 64), v_entry___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 9

Function Kernel_C.isIRQActive(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(!((Mem : Mem) -MemAcc-> ((intStateIRQTable : Word 64) + (8 * (irq___unsigned_long#v : Word 64))) == WordCastSigned(0)), 1, 0))
}
4 Cond 3 Err PGlobalValid(HTD : HTD, Array (Word 64) 55, intStateIRQTable : Word 64)
5 Cond 4 Err (irq___unsigned_long#v : Word 64) < WordCastSigned(55)
EntryPoint 5

Function Kernel_C.makeUserPTE(paddr___unsigned_long#v : Word 64, executable___unsigned_long#v : Word 64, vm_rights___unsigned_long#v : Word 64) -- updates: (ret__struct_pte_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
5 Call 4 Kernel_C.pte_pte_invalid_new() -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
6 Basic 1 { }
7 Basic 6 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
8 Call 7 Kernel_C.pte_new(WordCast((paddr___unsigned_long#v : Word 64) >> WordCast(12)), WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCastSigned(0), WordCastSigned(1), WordCast(executable___unsigned_long#v : Word 64), WordCast(ret__unsigned_long#v : Word 64), WordCast(unsigned_long_eret_2#v : Word 64), WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
9 Cond 8 Err (0 <=s 12) && (12 <s 64)
10 Basic 9 {
    var unsigned_long_eret_2#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.RISCVGetReadFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
12 Basic 11 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
13 Call 12 Kernel_C.RISCVGetWriteFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
14 Cond 5 13 !(!(!(!((read___unsigned_long#v : Word 64) == 0)) && !(!((write___unsigned_long#v : Word 64) == 0)) && !(!((executable___unsigned_long#v : Word 64) == 0))))
15 Basic 14 {
    var read___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
16 Call 15 Kernel_C.RISCVGetReadFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
17 Basic 16 {
    var write___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.RISCVGetWriteFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 18

Function Kernel_C.provide_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 592, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592) + WordCastSigned(1))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
6 Cond 5 Err ((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592))
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
8 Call 7 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + ((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592) * 32), cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
10 Cond 9 Err ((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592))
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
12 Basic 11 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
13 Call 12 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
14 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
15 Cond 14 13 (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 600) <= (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
16 Cond 15 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
EntryPoint 16

Function Kernel_C.read_scause(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = temp___unsigned_long#v : Word 64
}
4 Call 3 asm_instruction'csrr_%0,_scause(Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 4

Function Kernel_C.scheduleTCB(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 1 !((ret__int#v : Word 32) == 0)
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_long#v : Word 64) == 0)), 1, 0)
}
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.isRunnable(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
7 Cond 6 3 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64) == WordCastSigned(0), 1, 0)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
10 Cond 9 7 !((ret__int#v : Word 32) == 0)
11 Basic 10 {
    var ret__int#v : Word 32 = IfThenElse((tptr___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), 1, 0)
}
12 Cond 11 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 12

Function Kernel_C.setIRQState(irqState___unsigned_long#v : Word 64, irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.maskInterrupt(WordCastSigned(IfThenElse((irqState___unsigned_long#v : Word 64) == WordCastSigned(0), 1, 0)), irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var Mem : Mem = MemUpdate(Mem : Mem, (intStateIRQTable : Word 64) + (8 * (irq___unsigned_long#v : Word 64)), irqState___unsigned_long#v : Word 64)
}
4 Cond 3 Err PGlobalValid(HTD : HTD, Array (Word 64) 55, intStateIRQTable : Word 64)
5 Cond 4 Err (irq___unsigned_long#v : Word 64) < WordCastSigned(55)
EntryPoint 5

Function Kernel_C.setPriority(tptr___ptr_to_struct_tcb_C#v : Word 64, prio___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 1 Kernel_C.possibleSwitchTo(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 2 3 (tptr___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
6 Cond 5 1 !((ret__unsigned_long#v : Word 64) == 0)
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.isRunnable(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tptr___ptr_to_struct_tcb_C#v : Word 64) + 360, prio___unsigned_long#v : Word 64)
}
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.tcbSchedDequeue(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 11

Function Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, reg___unsigned_long#v : Word 64, w___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread___ptr_to_struct_tcb_C#v : Word 64) + (8 * (reg___unsigned_long#v : Word 64)), w___unsigned_long#v : Word 64)
}
3 Cond 2 Err ((reg___unsigned_long#v : Word 64) < WordCastSigned(35)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 3

Function Kernel_C.str_to_long(str___ptr_to_char#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__long#v : Word 64 = val___long#v : Word 64
}
8 Basic 4 {
    var c___char#v : Word 8 = (Mem : Mem) -MemAcc-> (str___ptr_to_char#v : Word 64)
}
9 Cond 8 Err PValid(HTD : HTD, Word 8, str___ptr_to_char#v : Word 64)
10 Basic 9 {
    var str___ptr_to_char#v : Word 64 = (str___ptr_to_char#v : Word 64) + 1
}
11 Cond 10 Err true
12 Basic 11 {
    var val___long#v : Word 64 = ((val___long#v : Word 64) * WordCast(base___unsigned#v : Word 32)) + (res___long#v : Word 64)
}
13 Cond 12 Err ((((val___long#v : Word 64) * WordCast(base___unsigned#v : Word 32)) <=s (((val___long#v : Word 64) * WordCast(base___unsigned#v : Word 32)) + (res___long#v : Word 64))) == (0 <=s (res___long#v : Word 64))) && ((WordCastSigned(val___long#v : Word 64) * WordCastSigned(WordCast(base___unsigned#v : Word 32))) == WordCastSigned((val___long#v : Word 64) * WordCast(base___unsigned#v : Word 32)))
14 Basic 1 {
    var ret__long#v : Word 64 = WordCastSigned(0 - 1)
}
15 Cond 14 Err (0 <=s (0 - 1)) == (1 <=s 0)
16 Cond 15 13 ((res___long#v : Word 64) == WordCastSigned(0 - 1)) || (WordCast(base___unsigned#v : Word 32) <=s (res___long#v : Word 64))
17 Cond 16 Err (0 <=s (0 - 1)) == (1 <=s 0)
18 Basic 17 {
    var res___long#v : Word 64 = rv#space#ret__long#v : Word 64
}
19 Call 18 Kernel_C.char_to_long(c___char#v : Word 8) -- updates (rv#space#ret__long#v : Word 64)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 19 3 !(WordCast(c___char#v : Word 8) == 0)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
20 Basic 7 {
    var c___char#v : Word 8 = (Mem : Mem) -MemAcc-> (str___ptr_to_char#v : Word 64)
}
21 Cond 20 Err PValid(HTD : HTD, Word 8, str___ptr_to_char#v : Word 64)
22 Basic 1 {
    var ret__long#v : Word 64 = WordCastSigned(0 - 1)
}
23 Cond 22 Err (0 <=s (0 - 1)) == (1 <=s 0)
24 Cond 23 21 !(!((Mem : Mem) -MemAcc-> (str___ptr_to_char#v : Word 64) == 0))
25 Cond 24 Err PValid(HTD : HTD, Word 8, str___ptr_to_char#v : Word 64)
26 Basic 25 {
    var str___ptr_to_char#v : Word 64 = (str___ptr_to_char#v : Word 64) + 2
}
27 Cond 26 Err true
28 Basic 27 {
    var base___unsigned#v : Word 32 = WordCastSigned(16)
}
29 Basic 25 {
    var base___unsigned#v : Word 32 = WordCastSigned(10)
}
30 Cond 28 29 !((ret__int#v : Word 32) == 0)
31 Basic 30 {
    var ret__int#v : Word 32 = IfThenElse(WordCast((Mem : Mem) -MemAcc-> ((str___ptr_to_char#v : Word 64) + 1)) == 88, 1, 0)
}
32 Cond 31 Err true && PValid(HTD : HTD, Word 8, (str___ptr_to_char#v : Word 64) + 1) && true
33 Cond 30 32 !((ret__int#v : Word 32) == 0)
34 Basic 33 {
    var ret__int#v : Word 32 = IfThenElse(WordCast((Mem : Mem) -MemAcc-> ((str___ptr_to_char#v : Word 64) + 1)) == 120, 1, 0)
}
35 Cond 34 Err true && PValid(HTD : HTD, Word 8, (str___ptr_to_char#v : Word 64) + 1) && true
36 Cond 35 30 !((ret__int#v : Word 32) == 0)
37 Basic 36 {
    var ret__int#v : Word 32 = IfThenElse(WordCast((Mem : Mem) -MemAcc-> (str___ptr_to_char#v : Word 64)) == 48, 1, 0)
}
38 Cond 37 Err PValid(HTD : HTD, Word 8, str___ptr_to_char#v : Word 64)
39 Basic 38 {
    var val___long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 39

Function Kernel_C.tcbEPAppend(tcb___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_tcb_queue_C#v.head_C : Word 64, ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_tcb_queue_C#v.head_C : Word 64 = queue___struct_tcb_queue_C#v.head_C : Word 64
    var ret__struct_tcb_queue_C#v.end_C : Word 64 = queue___struct_tcb_queue_C#v.end_C : Word 64
}
4 Basic 3 {
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = tcb___ptr_to_struct_tcb_C#v : Word 64
}
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 408, WordCastSigned(0))
}
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
7 Basic 6 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 416, queue___struct_tcb_queue_C#v.end_C : Word 64)
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
9 Basic 8 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = tcb___ptr_to_struct_tcb_C#v : Word 64
}
10 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (queue___struct_tcb_queue_C#v.end_C : Word 64) + 408, tcb___ptr_to_struct_tcb_C#v : Word 64)
}
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, queue___struct_tcb_queue_C#v.end_C : Word 64)
12 Cond 9 11 !(!((queue___struct_tcb_queue_C#v.head_C : Word 64) == 0))
EntryPoint 12

Function Kernel_C.write_stvec(value___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'csrw_stvec,_%0(value___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS) -- updates (Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.ackInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 1 (irq___unsigned_long#v : Word 64) == WordCastSigned(54)
3 Basic 2 {
    var Mem : Mem = MemUpdate(Mem : Mem, (active_irq : Word 64) + (4 * WordCast(0)), WordCastSigned(0))
}
4 Cond 3 Err PGlobalValid(HTD : HTD, Array (Word 32) 1, active_irq : Word 64)
5 Cond 4 Err (0 <s 1) && (0 <=s 0)
EntryPoint 5

Function Kernel_C.addrFromPPtr(pptr___ptr_to_void#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (pptr___ptr_to_void#v : Word 64) - -274877906944 - 0
}
EntryPoint 3

Function Kernel_C.c_entry_hook() -- updates: ()
1 Basic Ret { }
2 Call 1 Kernel_C.arch_c_entry_hook() -- updates ()
EntryPoint 2

Function Kernel_C.cancelAllIPC(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Basic 3 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 408)
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
9 Call 8 Kernel_C.tcbSchedEnqueue(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Call 9 Kernel_C.setThreadState(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 4 {
    var loop#3#count : Word 64 = (loop#3#count : Word 64) + 1
}
4 Cond 5 Err true
5 Cond 10 2 !((thread___ptr_to_struct_tcb_C#v : Word 64) == 0)
6 Basic 4 {
    var loop#3#count : Word 64 = 0
}
11 Call 6 Kernel_C.endpoint_ptr_set_epQueue_tail(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Call 11 Kernel_C.endpoint_ptr_set_epQueue_head(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Call 12 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Basic 13 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.endpoint_ptr_get_epQueue_head(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Cond 16 1 true
18 Cond 1 17 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.endpoint_ptr_get_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 20

Function Kernel_C.cancelSignal(threadPtr___ptr_to_struct_tcb_C#v : Word 64, ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setThreadState(threadPtr___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.notification_ptr_set_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 2 !(!((ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64) == 0))
5 Call 4 Kernel_C.ntfn_ptr_set_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64, ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
7 Call 6 Kernel_C.tcbEPDequeue(threadPtr___ptr_to_struct_tcb_C#v : Word 64, ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64, ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
9 Call 8 Kernel_C.ntfn_ptr_get_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
EntryPoint 9

Function Kernel_C.capRemovable(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(((n___unsigned_long#v : Word 64) == WordCastSigned(0)) || (((n___unsigned_long#v : Word 64) == WordCastSigned(1)) && ((slot___ptr_to_struct_cte_C#v : Word 64) == (z_slot___ptr_to_struct_cte_C#v : Word 64))), 1, 0))
}
5 Basic 4 {
    var z_slot___ptr_to_struct_cte_C#v : Word 64 = ret__unsigned_long#v : Word 64
}
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.cap_zombie_cap_get_capZombiePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Basic 7 {
    var n___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.cap_zombie_cap_get_capZombieNumber(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Cond 2 Err false
11 Call 10 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
12 Cond 11 Err false
13 Cond 12 2 true
14 Cond 9 13 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)) || false
15 Cond 3 14 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 17

Function Kernel_C.char_to_long(c___char#v : Word 8) -- updates: (ret__long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__long#v : Word 64 = WordCastSigned(0 - 1)
}
4 Cond 3 Err (0 <=s (0 - 1)) == (1 <=s 0)
5 Basic 1 {
    var ret__long#v : Word 64 = WordCastSigned(WordCast(c___char#v : Word 8) - 48)
}
6 Cond 5 Err (0 <=s (WordCast(c___char#v : Word 8) - 48)) == (48 <=s WordCast(c___char#v : Word 8))
7 Basic 1 {
    var ret__long#v : Word 64 = WordCastSigned(WordCast(c___char#v : Word 8) - 65 + 10)
}
8 Cond 7 Err (((WordCast(c___char#v : Word 8) - 65) <=s (WordCast(c___char#v : Word 8) - 65 + 10)) == (0 <=s 10)) && ((0 <=s (WordCast(c___char#v : Word 8) - 65)) == (65 <=s WordCast(c___char#v : Word 8)))
9 Basic 1 {
    var ret__long#v : Word 64 = WordCastSigned(WordCast(c___char#v : Word 8) - 97 + 10)
}
10 Cond 9 Err (((WordCast(c___char#v : Word 8) - 97) <=s (WordCast(c___char#v : Word 8) - 97 + 10)) == (0 <=s 10)) && ((0 <=s (WordCast(c___char#v : Word 8) - 97)) == (97 <=s WordCast(c___char#v : Word 8)))
11 Cond 10 4 (97 <=s WordCast(c___char#v : Word 8)) && (WordCast(c___char#v : Word 8) <=s 102)
12 Cond 8 11 (65 <=s WordCast(c___char#v : Word 8)) && (WordCast(c___char#v : Word 8) <=s 70)
13 Cond 6 12 (48 <=s WordCast(c___char#v : Word 8)) && (WordCast(c___char#v : Word 8) <=s 57)
EntryPoint 13

Function Kernel_C.chooseThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.switchToThread(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((ksReadyQueues : Word 64) + (16 * (ret__unsigned_long#v : Word 64)) + 0)
}
4 Cond 3 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.tcb_queue_C) 4096, ksReadyQueues : Word 64)
5 Cond 4 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(4096)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.ready_queues_index(dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Basic 7 {
    var prio___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.getHighestPrio(dom___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Call 1 Kernel_C.switchToIdleThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 9 10 !(!(!((Mem : Mem) -MemAcc-> ((ksReadyQueuesL1Bitmap : Word 64) + (8 * (dom___unsigned_long#v : Word 64))) == 0)))
12 Cond 11 Err PGlobalValid(HTD : HTD, Array (Word 64) 16, ksReadyQueuesL1Bitmap : Word 64)
13 Cond 12 Err (dom___unsigned_long#v : Word 64) < WordCastSigned(16)
14 Basic 13 {
    var dom___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> (ksCurDomain : Word 64)
}
15 Cond 14 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
16 Basic 13 {
    var dom___unsigned_long#v : Word 64 = WordCastSigned(0)
}
17 Cond 15 16 1 <s 16
EntryPoint 17

Function Kernel_C.copyMRsFault(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, id___anonymous_enum#v : Word 32, length___unsigned_long#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
7 Basic 6 {
    var Mem : Mem = MemUpdate(Mem : Mem, (receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8), ret__unsigned_long#v : Word 64)
}
8 Cond 7 Err (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1)) && PValid(HTD : HTD, Word 64, (receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1) + 1)
9 Basic 8 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
10 Call 9 Kernel_C.getRegister(sender___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((fault_messages : Word 64) + (80 * WordCast(id___anonymous_enum#v : Word 32)) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
11 Cond 10 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(10)) && ((id___anonymous_enum#v : Word 32) <s 2) && (0 <=s (id___anonymous_enum#v : Word 32))
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 11 1 (i___unsigned_long#v : Word 64) < (length___unsigned_long#v : Word 64)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
12 Cond 5 1 !((receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64) == 0)
17 Basic 13 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
18 Call 17 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Cond 18 Err (i___unsigned_long#v : Word 64) < WordCastSigned(4)
20 Basic 19 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.getRegister(sender___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((fault_messages : Word 64) + (80 * WordCast(id___anonymous_enum#v : Word 32)) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Cond 21 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(10)) && ((id___anonymous_enum#v : Word 32) <s 2) && (0 <=s (id___anonymous_enum#v : Word 32))
13 Basic 14 {
    var loop#13#count : Word 64 = (loop#13#count : Word 64) + 1
}
14 Cond 15 Err true
15 Cond 22 12 (i___unsigned_long#v : Word 64) < IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(4), length___unsigned_long#v : Word 64, WordCastSigned(4))
16 Basic 14 {
    var loop#13#count : Word 64 = 0
}
23 Basic 16 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 23

Function Kernel_C.createObject(t___unsigned_long#v : Word 64, regionBase___ptr_to_void#v : Word 64, userSize___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Call 4 Kernel_C.cap_thread_cap_new(WordCast(tcb___ptr_to_struct_tcb_C#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 344, (Mem : Mem) -MemAcc-> (ksCurDomain : Word 64))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 368, WordCastSigned(5))
}
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.Arch_initContext(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
13 Basic 12 {
    var HTD : HTD = HTDUpdate(Array (Struct Kernel_C.cte_C) 5, 1, (tcb___ptr_to_struct_tcb_C#v : Word 64) - 512, 1, HTDUpdate(Struct Kernel_C.tcb_C, 1, tcb___ptr_to_struct_tcb_C#v : Word 64, 1, HTD : HTD))
}
14 Cond 13 Err true && true && true
15 Basic 14 {
    var tcb___ptr_to_struct_tcb_C#v : Word 64 = (regionBase___ptr_to_void#v : Word 64) + 1 << WordCast(10 - 1)
}
16 Cond 15 Err (0 <=s (10 - 1)) && ((10 - 1) <s 64) && ((0 <=s (10 - 1)) == (1 <=s 10))
17 Basic 1 { }
18 Basic 17 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
19 Call 18 Kernel_C.cap_endpoint_cap_new(WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCastSigned(1), WordCastSigned(1), WordCast(regionBase___ptr_to_void#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
20 Basic 19 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.endpoint_C, 1, regionBase___ptr_to_void#v : Word 64, 1, HTD : HTD)
}
21 Cond 20 Err true && true && true
22 Basic 1 { }
23 Basic 22 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
24 Call 23 Kernel_C.cap_notification_cap_new(WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCast(regionBase___ptr_to_void#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
25 Basic 24 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.notification_C, 1, regionBase___ptr_to_void#v : Word 64, 1, HTD : HTD)
}
26 Cond 25 Err true && true && true
27 Basic 1 { }
28 Basic 27 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
29 Call 28 Kernel_C.cap_cnode_cap_new(WordCast(userSize___unsigned_long#v : Word 64), WordCastSigned(0), WordCastSigned(0), WordCast(regionBase___ptr_to_void#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
30 Basic 29 { }
31 Cond 30 Err true
32 Basic 31 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.cte_C, 5, regionBase___ptr_to_void#v : Word 64, userSize___unsigned_long#v : Word 64, HTD : HTD)
}
33 Cond 32 Err true && true && true
34 Basic 1 { }
35 Basic 34 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
36 Call 35 Kernel_C.cap_untyped_cap_new(WordCastSigned(0), WordCastSigned(IfThenElse(!(!(!((deviceMemory___unsigned_long#v : Word 64) == 0))), 1, 0)), WordCast(userSize___unsigned_long#v : Word 64), WordCast(regionBase___ptr_to_void#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
37 Cond 2 Err false
38 Call 37 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
39 Cond 38 Err false
40 Cond 39 2 true
41 Cond 36 40 ((t___unsigned_long#v : Word 64) == WordCastSigned(0)) || false
42 Cond 33 41 ((t___unsigned_long#v : Word 64) == WordCastSigned(4)) || false
43 Cond 26 42 ((t___unsigned_long#v : Word 64) == WordCastSigned(3)) || false
44 Cond 21 43 ((t___unsigned_long#v : Word 64) == WordCastSigned(2)) || false
45 Cond 16 44 ((t___unsigned_long#v : Word 64) == WordCastSigned(1)) || false
46 Basic 1 { }
47 Basic 46 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
48 Call 47 Kernel_C.Arch_createObject(t___unsigned_long#v : Word 64, regionBase___ptr_to_void#v : Word 64, userSize___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
49 Cond 48 45 WordCastSigned(5) <= (t___unsigned_long#v : Word 64)
EntryPoint 49

Function Kernel_C.cteDeleteOne(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.emptySlot(slot___ptr_to_struct_cte_C#v : Word 64, ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
4 Call 3 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
5 Basic 4 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
6 Call 5 Kernel_C.finaliseCap((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), final___unsigned_long#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
8 Basic 7 {
    var final___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.isFinalCapability(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 { }
11 Cond 10 Err ((GhostAssertions : WordArray 50 64) -WordArrayAccess-> 502 == (0 - 1)) || ((GhostAssertions : WordArray 50 64) -WordArrayAccess-> 502 == (cap_type___unsigned_long#v : Word 64))
12 Cond 11 1 !((cap_type___unsigned_long#v : Word 64) == WordCastSigned(0))
13 Basic 12 {
    var cap_type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Cond 15 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 16

Function Kernel_C.finaliseSlot(slot___ptr_to_struct_cte_C#v : Word 64, immediate___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_finaliseSlot_ret_C#v.status_C : Word 64, ret__struct_finaliseSlot_ret_C#v.success_C : Word 64, ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_finaliseSlot_ret_C#v.status_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.status_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.success_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.success_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
4 Basic 3 {
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Basic 4 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var ret___struct_finaliseSlot_ret_C#v.success_C : Word 64 = WordCastSigned(1)
}
8 Basic 7 {
    var ret___struct_finaliseSlot_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
13 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
16 Basic 1 {
    var ret__struct_finaliseSlot_ret_C#v.status_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.status_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.success_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.success_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
17 Basic 16 {
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
18 Basic 17 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
19 Call 18 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
20 Basic 19 {
    var ret___struct_finaliseSlot_ret_C#v.success_C : Word 64 = WordCastSigned(0)
}
21 Basic 20 {
    var ret___struct_finaliseSlot_ret_C#v.status_C : Word 64 = status___unsigned_long#v : Word 64
}
22 Cond 21 15 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
23 Basic 22 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.preemptionPoint(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Basic 1 {
    var ret__struct_finaliseSlot_ret_C#v.status_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.status_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.success_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.success_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
26 Basic 25 {
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
27 Basic 26 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
28 Call 27 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
29 Basic 28 {
    var ret___struct_finaliseSlot_ret_C#v.success_C : Word 64 = WordCastSigned(0)
}
30 Basic 29 {
    var ret___struct_finaliseSlot_ret_C#v.status_C : Word 64 = status___unsigned_long#v : Word 64
}
31 Cond 30 24 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
32 Basic 31 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
33 Call 32 Kernel_C.reduceZombie(slot___ptr_to_struct_cte_C#v : Word 64, immediate___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
34 Basic 1 {
    var ret__struct_finaliseSlot_ret_C#v.status_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.status_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.success_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.success_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
35 Basic 34 {
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
36 Basic 35 {
    var ret___struct_finaliseSlot_ret_C#v.success_C : Word 64 = WordCastSigned(0)
}
37 Basic 36 {
    var ret___struct_finaliseSlot_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
38 Cond 37 33 !((ret__int#v : Word 32) == 0)
39 Basic 38 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
40 Basic 39 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
41 Call 40 Kernel_C.capCyclicZombie(fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64, fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
42 Cond 41 38 !((ret__int#v : Word 32) == 0)
43 Basic 42 {
    var ret__int#v : Word 32 = IfThenElse(!(!((immediate___unsigned_long#v : Word 64) == 0)), 1, 0)
}
44 Basic 43 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64)
}
45 Cond 44 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
46 Basic 1 {
    var ret__struct_finaliseSlot_ret_C#v.status_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.status_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.success_C : Word 64 = ret___struct_finaliseSlot_ret_C#v.success_C : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
47 Basic 46 {
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret___struct_finaliseSlot_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
48 Basic 47 {
    var ret___struct_finaliseSlot_ret_C#v.success_C : Word 64 = WordCastSigned(1)
}
49 Basic 48 {
    var ret___struct_finaliseSlot_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
50 Cond 49 45 !((ret__unsigned_long#v : Word 64) == 0)
51 Basic 50 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
52 Call 51 Kernel_C.capRemovable(fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64, fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
53 Basic 52 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
54 Call 53 Kernel_C.finaliseCap((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), final___unsigned_long#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, rv#space#ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
55 Cond 54 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
56 Basic 55 {
    var final___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
57 Call 56 Kernel_C.isFinalCapability(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 10 {
    var loop#9#count : Word 64 = (loop#9#count : Word 64) + 1
}
10 Cond 11 Err true
11 Cond 57 8 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0))
12 Basic 10 {
    var loop#9#count : Word 64 = 0
}
58 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
59 Call 58 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
60 Cond 59 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 60

Function Kernel_C.getActiveIRQ(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(irq___unsigned#v : Word 32)
}
4 Basic 3 {
    var irq___unsigned#v : Word 32 = (Mem : Mem) -MemAcc-> ((active_irq : Word 64) + (4 * 0))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Array (Word 32) 1, active_irq : Word 64)
6 Cond 5 Err (0 <s 1) && (0 <=s 0)
7 Basic 3 {
    var irq___unsigned#v : Word 32 = WordCastSigned(0)
}
8 Cond 6 7 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((active_irq : Word 64) + (4 * 0)) == WordCastSigned(0)), 1, 0)
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Array (Word 32) 1, active_irq : Word 64)
11 Cond 10 Err (0 <s 1) && (0 <=s 0)
12 Cond 11 8 !((ret__int#v : Word 32) == 0)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((active_irq : Word 64) + (4 * 0)) <= WordCastSigned(54), 1, 0)
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Array (Word 32) 1, active_irq : Word 64)
15 Cond 14 Err (0 <s 1) && (0 <=s 0)
16 Basic 15 {
    var Mem : Mem = MemUpdate(Mem : Mem, (active_irq : Word 64) + (4 * WordCast(0)), WordCast(ret__unsigned_long#v : Word 64))
}
17 Cond 16 Err PGlobalValid(HTD : HTD, Array (Word 32) 1, active_irq : Word 64)
18 Cond 17 Err (0 <s 1) && (0 <=s 0)
19 Basic 18 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
20 Call 19 Kernel_C.getNewActiveIRQ(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Cond 20 15 !(!((ret__int#v : Word 32) == 0))
22 Basic 21 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((active_irq : Word 64) + (4 * 0)) == WordCastSigned(0)), 1, 0)
}
23 Cond 22 Err PGlobalValid(HTD : HTD, Array (Word 32) 1, active_irq : Word 64)
24 Cond 23 Err (0 <s 1) && (0 <=s 0)
25 Cond 24 21 !((ret__int#v : Word 32) == 0)
26 Basic 25 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((active_irq : Word 64) + (4 * 0)) <= WordCastSigned(54), 1, 0)
}
27 Cond 26 Err PGlobalValid(HTD : HTD, Array (Word 32) 1, active_irq : Word 64)
28 Cond 27 Err (0 <s 1) && (0 <=s 0)
EntryPoint 28

Function Kernel_C.getExtraCPtr(bufferPtr___ptr_to_unsigned_long#v : Word 64, i___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((bufferPtr___ptr_to_unsigned_long#v : Word 64) + (WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64) * 8))
}
4 Cond 3 Err ((WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64)) == 0) || PArrayValid(HTD : HTD, Word 64, bufferPtr___ptr_to_unsigned_long#v : Word 64, WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64)) && PValid(HTD : HTD, Word 64, (bufferPtr___ptr_to_unsigned_long#v : Word 64) + (WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64) * 8)) && ((120 <=s (120 + 2)) == (0 <=s 2)) && ((WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64)) == 0) || PArrayValid(HTD : HTD, Word 64, bufferPtr___ptr_to_unsigned_long#v : Word 64, WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64) + 1)
EntryPoint 4

Function Kernel_C.getRestartPC(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.getRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(33), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 5

Function Kernel_C.get_n_paging(v_reg___struct_v_region_C#v.start_C : Word 64, v_reg___struct_v_region_C#v.end_C : Word 64, bits___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (end___unsigned_long#v : Word 64) - (start___unsigned_long#v : Word 64) / 1 << (bits___unsigned_long#v : Word 64)
}
4 Cond 3 Err !((1 << (bits___unsigned_long#v : Word 64)) == 0) && ((bits___unsigned_long#v : Word 64) < WordCastSigned(64))
5 Basic 4 {
    var end___unsigned_long#v : Word 64 = (((v_reg___struct_v_region_C#v.end_C : Word 64) - 1) >> (bits___unsigned_long#v : Word 64) + 1) << (bits___unsigned_long#v : Word 64)
}
6 Cond 5 Err ((bits___unsigned_long#v : Word 64) < WordCastSigned(64)) && ((bits___unsigned_long#v : Word 64) < WordCastSigned(64))
7 Basic 6 {
    var start___unsigned_long#v : Word 64 = (v_reg___struct_v_region_C#v.start_C : Word 64) >> (bits___unsigned_long#v : Word 64) << (bits___unsigned_long#v : Word 64)
}
8 Cond 7 Err ((bits___unsigned_long#v : Word 64) < WordCastSigned(64)) && ((bits___unsigned_long#v : Word 64) < WordCastSigned(64))
EntryPoint 8

Function Kernel_C.init_freemem(n_available___unsigned_long#v : Word 64, available___ptr_to_struct_p_region_C#v : Word 64, n_reserved___unsigned_long#v : Word 64, reserved___ptr_to_struct_region_C#v : Word 64, it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) - WordCastSigned(1)
}
7 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8, start___unsigned_long#v : Word 64)
}
8 Cond 7 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
9 Cond 8 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 328 + (16 * (next___unsigned_long#v : Word 64)) + 0, (start___unsigned_long#v : Word 64) + (size___unsigned_long#v : Word 64))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
12 Cond 11 Err (next___unsigned_long#v : Word 64) < WordCastSigned(16)
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 328 + (16 * (next___unsigned_long#v : Word 64)) + 8, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8))
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
15 Cond 14 Err ((next___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(16))
16 Cond 15 9 (i___unsigned_long#v : Word 64) < WordCastSigned(16)
17 Call 16 Kernel_C.create_rootserver_objects(start___unsigned_long#v : Word 64, it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Basic 6 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 328 + (16 * (next___unsigned_long#v : Word 64)) + 0, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0)), (ndks_boot : Word 64) + 328 + (16 * (next___unsigned_long#v : Word 64)) + 8, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8))
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
20 Cond 19 Err ((next___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(16))
21 Cond 20 6 (i___unsigned_long#v : Word 64) < WordCastSigned(16)
22 Cond 17 21 (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0) <= (start___unsigned_long#v : Word 64)
23 Cond 22 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
24 Cond 23 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
25 Basic 24 {
    var start___unsigned_long#v : Word 64 = ((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8) - (size___unsigned_long#v : Word 64)) >> (max___unsigned_long#v : Word 64) << (max___unsigned_long#v : Word 64)
}
26 Cond 25 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
27 Cond 26 Err ((max___unsigned_long#v : Word 64) < WordCastSigned(64)) && ((max___unsigned_long#v : Word 64) < WordCastSigned(64)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(16))
28 Basic 27 {
    var next___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 28 1 WordCastSigned(0) <= (i___unsigned_long#v : Word 64)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
29 Basic 5 {
    var max___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
30 Call 29 Kernel_C.rootserver_max_size_bits(extra_bi_size_bits___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
31 Basic 30 {
    var size___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
32 Call 31 Kernel_C.calculate_rootserver_size(it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
37 Basic 33 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
38 Call 37 Kernel_C.is_reg_empty((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
39 Cond 38 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
40 Cond 39 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
41 Basic 40 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) - WordCastSigned(1)
}
33 Basic 34 {
    var loop#33#count : Word 64 = (loop#33#count : Word 64) + 1
}
34 Cond 35 Err true
35 Cond 41 32 !((ret__unsigned_long#v : Word 64) == 0) && (WordCastSigned(0) <= (i___unsigned_long#v : Word 64))
36 Basic 34 {
    var loop#33#count : Word 64 = 0
}
42 Basic 36 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
43 Call 42 Kernel_C.is_reg_empty((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
44 Cond 43 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
45 Cond 44 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
46 Cond 45 Err false
47 Call 46 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
48 Cond 47 Err false
49 Cond 48 45 !(!((ret__unsigned_long#v : Word 64) == 0))
50 Basic 49 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
51 Call 50 Kernel_C.is_reg_empty((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
52 Cond 51 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
53 Cond 52 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
54 Basic 53 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(16 - 1)
}
55 Cond 54 Err (0 <=s (16 - 1)) == (1 <=s 16)
60 Basic 56 {
    var a___unsigned_long#v : Word 64 = (a___unsigned_long#v : Word 64) + WordCastSigned(1)
}
61 Call 60 Kernel_C.insert_region((Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0), (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
62 Cond 61 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
63 Cond 62 Err (a___unsigned_long#v : Word 64) < WordCastSigned(16)
64 Cond 63 60 (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0) < (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8)
65 Cond 64 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
66 Cond 65 Err ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((a___unsigned_long#v : Word 64) < WordCastSigned(16))
56 Basic 57 {
    var loop#56#count : Word 64 = (loop#56#count : Word 64) + 1
}
57 Cond 58 Err true
58 Cond 66 55 (a___unsigned_long#v : Word 64) < (n_available___unsigned_long#v : Word 64)
59 Basic 57 {
    var loop#56#count : Word 64 = 0
}
71 Basic 67 {
    var r___unsigned_long#v : Word 64 = (r___unsigned_long#v : Word 64) + WordCastSigned(1)
}
72 Call 71 Kernel_C.reserve_region(ret__struct_p_region_C#v.start_C : Word 64, ret__struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
73 Cond 72 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
74 Basic 73 {
    var ret__struct_p_region_C#v.start_C : Word 64 = rv#space#ret__struct_p_region_C#v.start_C : Word 64
    var ret__struct_p_region_C#v.end_C : Word 64 = rv#space#ret__struct_p_region_C#v.end_C : Word 64
}
75 Call 74 Kernel_C.pptr_to_paddr_reg((Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 0), (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)) -- updates (rv#space#ret__struct_p_region_C#v.start_C : Word 64, rv#space#ret__struct_p_region_C#v.end_C : Word 64)
76 Cond 75 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
77 Cond 76 71 (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) < (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)
78 Cond 77 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
67 Basic 68 {
    var loop#67#count : Word 64 = (loop#67#count : Word 64) + 1
}
68 Cond 69 Err true
69 Cond 78 59 (r___unsigned_long#v : Word 64) < (n_reserved___unsigned_long#v : Word 64)
70 Basic 68 {
    var loop#67#count : Word 64 = 0
}
83 Basic 79 {
    var r___unsigned_long#v : Word 64 = (r___unsigned_long#v : Word 64) + WordCastSigned(1)
}
84 Basic 79 {
    var a___unsigned_long#v : Word 64 = (a___unsigned_long#v : Word 64) + WordCastSigned(1)
}
85 Basic 79 {
    var r___unsigned_long#v : Word 64 = (r___unsigned_long#v : Word 64) + WordCastSigned(1)
}
86 Call 85 Kernel_C.reserve_region(ret__struct_p_region_C#v.start_C : Word 64, ret__struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
87 Cond 86 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
88 Basic 87 {
    var ret__struct_p_region_C#v.start_C : Word 64 = rv#space#ret__struct_p_region_C#v.start_C : Word 64
    var ret__struct_p_region_C#v.end_C : Word 64 = rv#space#ret__struct_p_region_C#v.end_C : Word 64
}
89 Call 88 Kernel_C.pptr_to_paddr_reg((Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 0), (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)) -- updates (rv#space#ret__struct_p_region_C#v.start_C : Word 64, rv#space#ret__struct_p_region_C#v.end_C : Word 64)
90 Cond 89 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
91 Basic 79 {
    var a___unsigned_long#v : Word 64 = (a___unsigned_long#v : Word 64) + WordCastSigned(1)
}
92 Call 91 Kernel_C.insert_region((Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0), (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
93 Cond 92 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
94 Cond 93 Err (a___unsigned_long#v : Word 64) < WordCastSigned(16)
95 Basic 79 {
    var r___unsigned_long#v : Word 64 = (r___unsigned_long#v : Word 64) + WordCastSigned(1)
}
96 Call 95 Kernel_C.reserve_region(ret__struct_p_region_C#v.start_C : Word 64, ret__struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
97 Cond 96 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
98 Basic 97 {
    var ret__struct_p_region_C#v.start_C : Word 64 = rv#space#ret__struct_p_region_C#v.start_C : Word 64
    var ret__struct_p_region_C#v.end_C : Word 64 = rv#space#ret__struct_p_region_C#v.end_C : Word 64
}
99 Call 98 Kernel_C.pptr_to_paddr_reg((Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 0), (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)) -- updates (rv#space#ret__struct_p_region_C#v.start_C : Word 64, rv#space#ret__struct_p_region_C#v.end_C : Word 64)
100 Cond 99 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
101 Basic 100 {
    var Mem : Mem = MemUpdate(Mem : Mem, (avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0, ret__unsigned_long#v : Word 64)
}
102 Cond 101 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
103 Cond 102 Err (a___unsigned_long#v : Word 64) < WordCastSigned(16)
104 Basic 103 {
    var ret__unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8)
}
105 Cond 104 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
106 Cond 105 Err (a___unsigned_long#v : Word 64) < WordCastSigned(16)
107 Basic 103 {
    var ret__unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)
}
108 Cond 107 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
109 Cond 106 108 (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8) < (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)
110 Cond 109 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
111 Cond 110 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
112 Basic 79 {
    var r___unsigned_long#v : Word 64 = (r___unsigned_long#v : Word 64) + WordCastSigned(1)
}
113 Call 112 Kernel_C.reserve_region(ret__struct_p_region_C#v.start_C : Word 64, ret__struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
114 Cond 113 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
115 Basic 114 {
    var ret__struct_p_region_C#v.start_C : Word 64 = rv#space#ret__struct_p_region_C#v.start_C : Word 64
    var ret__struct_p_region_C#v.end_C : Word 64 = rv#space#ret__struct_p_region_C#v.end_C : Word 64
}
116 Call 115 Kernel_C.pptr_to_paddr_reg((Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 0), (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)) -- updates (rv#space#ret__struct_p_region_C#v.start_C : Word 64, rv#space#ret__struct_p_region_C#v.end_C : Word 64)
117 Cond 116 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, (r___unsigned_long#v : Word 64) + 1)
118 Basic 117 {
    var Mem : Mem = MemUpdate(Mem : Mem, (avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0, (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8))
}
119 Cond 118 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
120 Cond 119 Err ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
121 Basic 79 {
    var a___unsigned_long#v : Word 64 = (a___unsigned_long#v : Word 64) + WordCastSigned(1)
}
122 Cond 120 121 (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8) < (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8)
123 Cond 122 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
124 Cond 123 Err ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
125 Call 124 Kernel_C.insert_region(m___struct_region_C#v.start_C : Word 64, m___struct_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
126 Basic 125 {
    var m___struct_region_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16))
}
127 Cond 126 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
128 Basic 127 {
    var m___struct_region_C#v.start_C : Word 64 = (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0)
    var m___struct_region_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8)
}
129 Cond 128 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
130 Cond 129 Err (a___unsigned_long#v : Word 64) < WordCastSigned(16)
131 Cond 111 130 (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) <= (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0)
132 Cond 131 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
133 Cond 132 Err ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
134 Cond 94 133 (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8) <= (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16))
135 Cond 134 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
136 Cond 135 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
137 Cond 90 136 (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8) <= (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0)
138 Cond 137 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
139 Cond 138 Err ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
140 Cond 84 139 (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 8) <= (Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (a___unsigned_long#v : Word 64)) + 0)
141 Cond 140 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
142 Cond 141 Err ((a___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((a___unsigned_long#v : Word 64) < WordCastSigned(16))
143 Cond 83 142 (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) == (Mem : Mem) -MemAcc-> ((reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16) + 8)
144 Cond 143 Err ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.region_C, (reserved___ptr_to_struct_region_C#v : Word 64) + ((r___unsigned_long#v : Word 64) * 16)) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64) && ((r___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.region_C, reserved___ptr_to_struct_region_C#v : Word 64, r___unsigned_long#v : Word 64)
79 Basic 80 {
    var loop#79#count : Word 64 = (loop#79#count : Word 64) + 1
}
80 Cond 81 Err true
81 Cond 144 70 ((a___unsigned_long#v : Word 64) < (n_available___unsigned_long#v : Word 64)) && ((r___unsigned_long#v : Word 64) < (n_reserved___unsigned_long#v : Word 64))
82 Basic 80 {
    var loop#79#count : Word 64 = 0
}
145 Basic 82 {
    var r___unsigned_long#v : Word 64 = WordCastSigned(0)
}
146 Basic 145 {
    var a___unsigned_long#v : Word 64 = WordCastSigned(0)
}
151 Basic 147 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
152 Basic 151 {
    var Mem : Mem = MemUpdate(Mem : Mem, (avail_reg : Word 64) + (16 * (i___unsigned_long#v : Word 64)) + 0, ret__unsigned_long#v : Word 64)
}
153 Cond 152 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
154 Cond 153 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
155 Basic 154 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
156 Call 155 Kernel_C.ceiling_kernel_window((Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (i___unsigned_long#v : Word 64)) + 0)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
157 Cond 156 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
158 Cond 157 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
159 Basic 158 {
    var Mem : Mem = MemUpdate(Mem : Mem, (avail_reg : Word 64) + (16 * (i___unsigned_long#v : Word 64)) + 8, ret__unsigned_long#v : Word 64)
}
160 Cond 159 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
161 Cond 160 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
162 Basic 161 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
163 Call 162 Kernel_C.ceiling_kernel_window((Mem : Mem) -MemAcc-> ((avail_reg : Word 64) + (16 * (i___unsigned_long#v : Word 64)) + 8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
164 Cond 163 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
165 Cond 164 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
166 Basic 165 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (avail_reg : Word 64) + (16 * (i___unsigned_long#v : Word 64)) + 0, ret__struct_region_C#v.start_C : Word 64), (avail_reg : Word 64) + (16 * (i___unsigned_long#v : Word 64)) + 8, ret__struct_region_C#v.end_C : Word 64)
}
167 Cond 166 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.region_C) 16, avail_reg : Word 64)
168 Cond 167 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
169 Cond 168 Err ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.p_region_C, available___ptr_to_struct_p_region_C#v : Word 64, (i___unsigned_long#v : Word 64) + 1)
170 Basic 169 {
    var ret__struct_region_C#v.start_C : Word 64 = rv#space#ret__struct_region_C#v.start_C : Word 64
    var ret__struct_region_C#v.end_C : Word 64 = rv#space#ret__struct_region_C#v.end_C : Word 64
}
171 Call 170 Kernel_C.paddr_to_pptr_reg((Mem : Mem) -MemAcc-> ((available___ptr_to_struct_p_region_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 16) + 0), (Mem : Mem) -MemAcc-> ((available___ptr_to_struct_p_region_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 16) + 8)) -- updates (rv#space#ret__struct_region_C#v.start_C : Word 64, rv#space#ret__struct_region_C#v.end_C : Word 64)
172 Cond 171 Err ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.p_region_C, available___ptr_to_struct_p_region_C#v : Word 64, i___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.p_region_C, (available___ptr_to_struct_p_region_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 16)) && ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.p_region_C, available___ptr_to_struct_p_region_C#v : Word 64, (i___unsigned_long#v : Word 64) + 1)
147 Basic 148 {
    var loop#147#count : Word 64 = (loop#147#count : Word 64) + 1
}
148 Cond 149 Err true
149 Cond 172 146 (i___unsigned_long#v : Word 64) < (n_available___unsigned_long#v : Word 64)
150 Basic 148 {
    var loop#147#count : Word 64 = 0
}
173 Basic 150 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
178 Basic 174 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
179 Basic 178 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0, WordCastSigned(0)), (ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8, WordCastSigned(0))
}
180 Cond 179 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
181 Cond 180 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
174 Basic 175 {
    var loop#174#count : Word 64 = (loop#174#count : Word 64) + 1
}
175 Cond 176 Err true
176 Cond 181 173 (i___unsigned_long#v : Word 64) < WordCastSigned(16)
177 Basic 175 {
    var loop#174#count : Word 64 = 0
}
182 Basic 177 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
187 Basic 183 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
183 Basic 184 {
    var loop#183#count : Word 64 = (loop#183#count : Word 64) + 1
}
184 Cond 185 Err true
185 Cond 187 182 (i___unsigned_long#v : Word 64) < ((n_available___unsigned_long#v : Word 64) - WordCastSigned(1))
186 Basic 184 {
    var loop#183#count : Word 64 = 0
}
188 Basic 186 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
193 Basic 189 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
189 Basic 190 {
    var loop#189#count : Word 64 = (loop#189#count : Word 64) + 1
}
190 Cond 191 Err true
191 Cond 193 188 (WordCastSigned(0) < (n_reserved___unsigned_long#v : Word 64)) && ((i___unsigned_long#v : Word 64) < ((n_reserved___unsigned_long#v : Word 64) - WordCastSigned(1)))
192 Basic 190 {
    var loop#189#count : Word 64 = 0
}
194 Basic 192 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 194

Function Kernel_C.insertNewCap(parent___ptr_to_struct_cte_C#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.mdb_node_ptr_set_mdbNext((parent___ptr_to_struct_cte_C#v : Word 64) + 16, WordCast(slot___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, parent___ptr_to_struct_cte_C#v : Word 64)
4 Call 3 Kernel_C.mdb_node_ptr_set_mdbPrev((next___ptr_to_struct_cte_C#v : Word 64) + 16, WordCast(slot___ptr_to_struct_cte_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, next___ptr_to_struct_cte_C#v : Word 64)
6 Cond 5 3 !((next___ptr_to_struct_cte_C#v : Word 64) == 0)
7 Basic 6 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, ret__struct_mdb_node_C#v.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
9 Basic 8 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
10 Call 9 Kernel_C.mdb_node_new(WordCast(next___ptr_to_struct_cte_C#v : Word 64), WordCastSigned(1), WordCastSigned(1), WordCast(parent___ptr_to_struct_cte_C#v : Word 64)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
11 Basic 10 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, cap___struct_cap_C#v.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, cap___struct_cap_C#v.words_C.1 : Word 64)
}
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
13 Basic 12 {
    var next___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.mdb_node_get_mdbNext((Mem : Mem) -MemAcc-> ((parent___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((parent___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Cond 15 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, parent___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 16

Function Kernel_C.isIRQPending(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (sip___unsigned_long#v : Word 64) & (1 << WordCast(5)) | (1 << WordCast(9))
}
4 Cond 3 Err (0 <=s 9) && (9 <s 64) && (0 <=s 5) && (5 <s 64)
5 Basic 4 {
    var sip___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.read_sip(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 6

Function Kernel_C.is_reg_empty(reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((reg___struct_region_C#v.start_C : Word 64) == (reg___struct_region_C#v.end_C : Word 64), 1, 0))
}
EntryPoint 3

Function Kernel_C.lookupPTSlot(lvl1pt___ptr_to_struct_pte_C#v : Word 64, vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
    var ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64
}
8 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.isPTEPageTable(ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = (pt___ptr_to_struct_pte_C#v : Word 64) + (((vptr___unsigned_long#v : Word 64) >> (ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)) & (1 << WordCast(9) - 1) * 8)
}
11 Cond 10 Err (0 <=s 9) && (9 <s 64) && ((ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) < WordCastSigned(64)) && (((vptr___unsigned_long#v : Word 64) >> (ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)) & (1 << WordCast(9) - 1) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, pt___ptr_to_struct_pte_C#v : Word 64, ((vptr___unsigned_long#v : Word 64) >> (ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)) & (1 << WordCast(9) - 1))
12 Basic 11 {
    var pt___ptr_to_struct_pte_C#v : Word 64 = rv#space#ret__ptr_to_struct_pte_C#v : Word 64
}
13 Call 12 Kernel_C.getPPtrFromHWPTE(ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_struct_pte_C#v : Word 64)
14 Basic 13 {
    var ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = (ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) - WordCastSigned(9)
}
15 Basic 14 {
    var level___unsigned_long#v : Word 64 = (level___unsigned_long#v : Word 64) - WordCastSigned(1)
}
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 15 3 !((ret__unsigned_long#v : Word 64) == 0) && !(!(WordCastSigned(0) < (level___unsigned_long#v : Word 64)))
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
16 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.isPTEPageTable(ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
18 Basic 17 {
    var ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = (pt___ptr_to_struct_pte_C#v : Word 64) + (((vptr___unsigned_long#v : Word 64) >> (ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)) & (1 << WordCast(9) - 1) * 8)
}
19 Cond 18 Err (0 <=s 9) && (9 <s 64) && ((ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) < WordCastSigned(64)) && (((vptr___unsigned_long#v : Word 64) >> (ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)) & (1 << WordCast(9) - 1) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, pt___ptr_to_struct_pte_C#v : Word 64, ((vptr___unsigned_long#v : Word 64) >> (ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)) & (1 << WordCast(9) - 1))
20 Basic 19 {
    var ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = (WordCastSigned(9) * (level___unsigned_long#v : Word 64)) + WordCastSigned(12)
}
21 Basic 20 {
    var pt___ptr_to_struct_pte_C#v : Word 64 = lvl1pt___ptr_to_struct_pte_C#v : Word 64
}
22 Basic 21 {
    var level___unsigned_long#v : Word 64 = WordCastSigned(3 - 1)
}
23 Cond 22 Err (0 <=s (3 - 1)) == (1 <=s 3)
EntryPoint 23

Function Kernel_C.maskVMRights(vm_rights___unsigned_long#v : Word 64, cap_rights_mask___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(2)
}
5 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
6 Cond 4 5 !(!((ret__unsigned_longlong#v : Word 64) == 0))
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.seL4_CapRights_get_capAllowWrite(cap_rights_mask___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Cond 8 3 !((ret__int#v : Word 32) == 0)
10 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.seL4_CapRights_get_capAllowRead(cap_rights_mask___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Cond 12 9 !((ret__int#v : Word 32) == 0)
14 Basic 13 {
    var ret__int#v : Word 32 = IfThenElse((vm_rights___unsigned_long#v : Word 64) == WordCastSigned(3), 1, 0)
}
15 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(2)
}
16 Cond 15 14 !((ret__int#v : Word 32) == 0)
17 Basic 16 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.seL4_CapRights_get_capAllowRead(cap_rights_mask___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Cond 19 16 !((ret__int#v : Word 32) == 0)
21 Basic 20 {
    var ret__int#v : Word 32 = IfThenElse((vm_rights___unsigned_long#v : Word 64) == WordCastSigned(2), 1, 0)
}
EntryPoint 21

Function Kernel_C.mdb_node_new(mdbNext___unsigned_longlong#v : Word 64, mdbRevocable___unsigned_longlong#v : Word 64, mdbFirstBadged___unsigned_longlong#v : Word 64, mdbPrev___unsigned_longlong#v : Word 64) -- updates: (ret__struct_mdb_node_C#v.words_C.0 : Word 64, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((mdbNext___unsigned_longlong#v : Word 64) & 549755813884 >> WordCast(0)) | ((mdbRevocable___unsigned_longlong#v : Word 64) & 1 << WordCast(1)) | ((mdbFirstBadged___unsigned_longlong#v : Word 64) & 1 << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64) && (0 <=s 1) && (1 <s 64) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((mdbPrev___unsigned_longlong#v : Word 64) << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64)
EntryPoint 7

Function Kernel_C.ptrFromPAddr(paddr___unsigned_long#v : Word 64) -- updates: (ret__ptr_to_void#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = (paddr___unsigned_long#v : Word 64) + -274877906944 - 0
}
EntryPoint 3

Function Kernel_C.read_sstatus(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = temp___unsigned_long#v : Word 64
}
4 Call 3 asm_instruction'csrr_%0,_sstatus(Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 4

Function Kernel_C.reduceZombie(slot___ptr_to_struct_cte_C#v : Word 64, immediate___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
6 Basic 5 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_zombie_cap_set_capZombieNumber((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), (n___unsigned_long#v : Word 64) - WordCastSigned(1)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
9 Cond 8 3 !((ret__int#v : Word 32) == 0)
10 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCast(type___unsigned_long#v : Word 64), 1, 0)
}
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.cap_zombie_cap_get_capZombieType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Cond 12 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
14 Cond 13 9 !((ret__int#v : Word 32) == 0)
15 Basic 14 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_long#v : Word 64) == (n___unsigned_long#v : Word 64), 1, 0)
}
16 Basic 15 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.cap_zombie_cap_get_capZombieNumber((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_long#v : Word 64)
18 Cond 17 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
19 Cond 18 14 !((ret__int#v : Word 32) == 0)
20 Basic 19 {
    var ret__int#v : Word 32 = IfThenElse((ptr___ptr_to_struct_cte_C#v : Word 64) == (ptr2___ptr_to_struct_cte_C#v : Word 64), 1, 0)
}
21 Basic 20 {
    var ptr2___ptr_to_struct_cte_C#v : Word 64 = ret__unsigned_long#v : Word 64
}
22 Basic 21 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
23 Call 22 Kernel_C.cap_zombie_cap_get_capZombiePtr((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_long#v : Word 64)
24 Cond 23 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
25 Cond 3 Err false
26 Call 25 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
27 Cond 26 Err false
28 Cond 27 3 true
29 Cond 24 28 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)) || false
30 Cond 3 29 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
31 Basic 30 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
32 Call 31 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
33 Cond 32 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
34 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
35 Cond 34 33 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
36 Basic 35 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
37 Call 36 Kernel_C.cteDelete(endSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
38 Basic 37 {
    var endSlot___ptr_to_struct_cte_C#v : Word 64 = (ptr___ptr_to_struct_cte_C#v : Word 64) + ((n___unsigned_long#v : Word 64) - WordCastSigned(1) * 32)
}
39 Cond 38 Err (((n___unsigned_long#v : Word 64) - WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ptr___ptr_to_struct_cte_C#v : Word 64, (n___unsigned_long#v : Word 64) - WordCastSigned(1)) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (ptr___ptr_to_struct_cte_C#v : Word 64) + ((n___unsigned_long#v : Word 64) - WordCastSigned(1) * 32)) && (((n___unsigned_long#v : Word 64) - WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ptr___ptr_to_struct_cte_C#v : Word 64, (n___unsigned_long#v : Word 64) - WordCastSigned(1))
40 Call 3 Kernel_C.capSwapForDelete(ptr___ptr_to_struct_cte_C#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
41 Cond 40 40 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)
42 Basic 41 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
43 Call 42 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((ptr___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((ptr___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
44 Cond 43 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, ptr___ptr_to_struct_cte_C#v : Word 64)
45 Cond 39 44 !((immediate___unsigned_long#v : Word 64) == 0)
46 Basic 45 {
    var type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
47 Basic 46 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
48 Call 47 Kernel_C.cap_zombie_cap_get_capZombieType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
49 Cond 48 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
50 Basic 49 {
    var n___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
51 Call 50 Kernel_C.cap_zombie_cap_get_capZombieNumber((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_long#v : Word 64)
52 Cond 51 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
53 Basic 52 {
    var ptr___ptr_to_struct_cte_C#v : Word 64 = ret__unsigned_long#v : Word 64
}
54 Basic 53 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
55 Call 54 Kernel_C.cap_zombie_cap_get_capZombiePtr((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_long#v : Word 64)
56 Cond 55 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 56

Function Kernel_C.sameObjectAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.sameRegionAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 1 { }
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.Arch_sameObjectAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Cond 8 5 !((ret__int#v : Word 32) == 0)
10 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
11 Basic 10 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.isArchCap(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
13 Cond 12 9 !((ret__int#v : Word 32) == 0)
14 Basic 13 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
15 Basic 14 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
16 Call 15 Kernel_C.isArchCap(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
18 Cond 17 16 !((ret__int#v : Word 32) == 0)
19 Basic 18 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(16), 1, 0)
}
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Cond 21 18 !((ret__int#v : Word 32) == 0)
23 Basic 22 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(14), 1, 0)
}
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.cap_get_capType(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
27 Cond 26 25 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.cap_get_capType(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 29

Function Kernel_C.sameRegionAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(((aBase___unsigned_long#v : Word 64) <= (bBase___unsigned_long#v : Word 64)) && ((bTop___unsigned_long#v : Word 64) <= (aTop___unsigned_long#v : Word 64)) && ((bBase___unsigned_long#v : Word 64) <= (bTop___unsigned_long#v : Word 64)), 1, 0))
}
5 Basic 4 {
    var bTop___unsigned_long#v : Word 64 = (bBase___unsigned_long#v : Word 64) + 1 << (ret__unsigned_long#v : Word 64) - 1
}
6 Cond 5 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(64)
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.cap_get_capSizeBits(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 8 {
    var aTop___unsigned_long#v : Word 64 = (aBase___unsigned_long#v : Word 64) + 1 << (ret__unsigned_longlong#v : Word 64) - 1
}
10 Cond 9 Err (ret__unsigned_longlong#v : Word 64) < WordCastSigned(64)
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.cap_untyped_cap_get_capBlockSize(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Basic 12 {
    var bBase___unsigned_long#v : Word 64 = ret__ptr_to_void#v : Word 64
}
14 Basic 13 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capPtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
16 Basic 15 {
    var aBase___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.cap_untyped_cap_get_capPtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Cond 18 3 !((ret__unsigned_long#v : Word 64) == 0)
20 Basic 19 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.cap_get_capIsPhysical(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0))
}
23 Basic 22 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Basic 24 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
26 Call 25 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
27 Cond 26 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0))
}
31 Basic 30 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
32 Call 31 Kernel_C.cap_notification_cap_get_capNtfnPtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
33 Basic 32 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
34 Call 33 Kernel_C.cap_notification_cap_get_capNtfnPtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
35 Cond 34 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)
36 Basic 35 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
37 Call 36 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
38 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
39 Basic 38 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0)
}
40 Basic 39 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
41 Call 40 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
42 Basic 41 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
43 Call 42 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
44 Cond 43 38 !((ret__int#v : Word 32) == 0)
45 Basic 44 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0)
}
46 Basic 45 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
47 Call 46 Kernel_C.cap_cnode_cap_get_capCNodePtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
48 Basic 47 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
49 Call 48 Kernel_C.cap_cnode_cap_get_capCNodePtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
50 Cond 49 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(10)
51 Basic 50 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
52 Call 51 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
53 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0))
}
54 Basic 53 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
55 Call 54 Kernel_C.cap_thread_cap_get_capTCBPtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
56 Basic 55 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
57 Call 56 Kernel_C.cap_thread_cap_get_capTCBPtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
58 Cond 57 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)
59 Basic 58 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
60 Call 59 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
61 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0))
}
62 Basic 61 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
63 Call 62 Kernel_C.cap_reply_cap_get_capTCBPtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
64 Basic 63 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
65 Call 64 Kernel_C.cap_reply_cap_get_capTCBPtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
66 Cond 65 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)
67 Basic 66 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
68 Call 67 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
69 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
70 Cond 69 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(20)
71 Basic 70 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
72 Call 71 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
73 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
74 Cond 73 3 !((ret__int#v : Word 32) == 0)
75 Basic 74 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(16), 1, 0)
}
76 Basic 75 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
77 Call 76 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
78 Cond 74 77 !((ret__int#v : Word 32) == 0)
79 Basic 78 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(14), 1, 0)
}
80 Basic 79 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
81 Call 80 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
82 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(WordCast(ret__unsigned_longlong#v : Word 64) == WordCast(unsigned_longlong_eret_2#v : Word 64), 1, 0))
}
83 Basic 82 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
84 Call 83 Kernel_C.cap_irq_handler_cap_get_capIRQ(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
85 Basic 84 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
86 Call 85 Kernel_C.cap_irq_handler_cap_get_capIRQ(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
87 Cond 86 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(16)
88 Basic 87 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
89 Call 88 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
90 Basic 1 { }
91 Basic 90 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
92 Call 91 Kernel_C.Arch_sameRegionAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
93 Cond 92 3 !((ret__int#v : Word 32) == 0)
94 Basic 93 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
95 Basic 94 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
96 Call 95 Kernel_C.isArchCap(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
97 Cond 96 93 !((ret__int#v : Word 32) == 0)
98 Basic 97 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
99 Basic 98 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
100 Call 99 Kernel_C.isArchCap(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
101 Cond 100 3 true
102 Cond 89 101 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(16)) || false
103 Cond 81 102 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(14)) || false
104 Cond 72 103 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(20)) || false
105 Cond 68 104 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)) || false
106 Cond 60 105 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)) || false
107 Cond 52 106 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10)) || false
108 Cond 37 107 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
109 Cond 29 108 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
110 Cond 21 109 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
111 Basic 110 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
112 Call 111 Kernel_C.cap_get_capType(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 112

Function Kernel_C.sbi_send_ipi(hart_mask___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(4), hart_mask___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.sbi_shutdown(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(8), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.sendFaultIPC(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.sendIPC(WordCastSigned(1), WordCastSigned(1), WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), WordCastSigned(1), tptr___ptr_to_struct_tcb_C#v : Word 64, WordCast(unsigned_longlong_eret_3#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var unsigned_longlong_eret_3#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_endpoint_cap_get_capEPPtr(handlerCap___struct_cap_C#v.words_C.0 : Word 64, handlerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Basic 6 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_endpoint_cap_get_capCanGrant(handlerCap___struct_cap_C#v.words_C.0 : Word 64, handlerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_endpoint_cap_get_capEPBadge(handlerCap___struct_cap_C#v.words_C.0 : Word 64, handlerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
11 Basic 10 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (tptr___ptr_to_struct_tcb_C#v : Word 64) + 328 + 0 + 0, original_lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64), (tptr___ptr_to_struct_tcb_C#v : Word 64) + 328 + 0 + 8, original_lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64)
}
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
13 Cond 12 10 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((current_fault : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((current_fault : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Cond 15 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
17 Basic 16 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (tptr___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + 0, (Mem : Mem) -MemAcc-> ((current_fault : Word 64) + 0 + (8 * 0))), (tptr___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + 8, (Mem : Mem) -MemAcc-> ((current_fault : Word 64) + 0 + (8 * 1)))
}
18 Cond 17 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
20 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
21 Basic 20 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
22 Cond 21 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
23 Call 22 Kernel_C.lookup_fault_missing_capability_new(WordCastSigned(0)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
24 Basic 23 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
26 Call 25 Kernel_C.seL4_Fault_CapFault_new(WordCast(handlerCPtr___unsigned_long#v : Word 64), WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
27 Cond 19 26 !((ret__int#v : Word 32) == 0)
28 Basic 27 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.cap_endpoint_cap_get_capCanGrantReply(handlerCap___struct_cap_C#v.words_C.0 : Word 64, handlerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Cond 27 30 !((ret__int#v : Word 32) == 0)
32 Basic 31 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
33 Basic 32 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
34 Call 33 Kernel_C.cap_endpoint_cap_get_capCanGrant(handlerCap___struct_cap_C#v.words_C.0 : Word 64, handlerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
35 Cond 34 27 !((ret__int#v : Word 32) == 0)
36 Basic 35 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
37 Basic 36 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.cap_endpoint_cap_get_capCanSend(handlerCap___struct_cap_C#v.words_C.0 : Word 64, handlerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Cond 38 35 !((ret__int#v : Word 32) == 0)
40 Basic 39 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4), 1, 0)
}
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_get_capType(handlerCap___struct_cap_C#v.words_C.0 : Word 64, handlerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
43 Basic 42 {
    var handlerCap___struct_cap_C#v.words_C.0 : Word 64 = lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64
    var handlerCap___struct_cap_C#v.words_C.1 : Word 64 = lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64
}
44 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
45 Basic 44 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
46 Cond 45 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
47 Call 46 Kernel_C.seL4_Fault_CapFault_new(WordCast(handlerCPtr___unsigned_long#v : Word 64), WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
48 Cond 47 43 !((lu_ret___struct_lookupCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
49 Basic 48 {
    var lu_ret___struct_lookupCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64
    var lu_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64
}
50 Call 49 Kernel_C.lookupCap(tptr___ptr_to_struct_tcb_C#v : Word 64, handlerCPtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
51 Basic 50 {
    var handlerCPtr___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((tptr___ptr_to_struct_tcb_C#v : Word 64) + 376)
}
52 Cond 51 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
53 Basic 52 {
    var original_lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((current_lookup_fault : Word 64) + 0 + (8 * 0))
    var original_lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((current_lookup_fault : Word 64) + 0 + (8 * 1))
}
54 Cond 53 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
EntryPoint 54

Function Kernel_C.setMRs_fault(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
4 Basic 3 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
5 Call 4 Kernel_C.setMRs_lookup_failure(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 328 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 328 + 0 + (8 * 1)), WordCastSigned(3), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
7 Call 6 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(2), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.seL4_Fault_CapFault_get_inReceivePhase((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(1), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.seL4_Fault_CapFault_get_address((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Cond 13 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
15 Call 14 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Basic 15 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.getRestartPC(sender___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
18 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
19 Basic 18 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
20 Call 19 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(10), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.seL4_Fault_UnknownSyscall_get_syscallNumber((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
24 Call 23 Kernel_C.copyMRsFault(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), WordCastSigned(10), receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
26 Basic 25 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
27 Call 26 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(2) + 1, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.seL4_Fault_UserException_get_code((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Cond 29 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
31 Call 30 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(2), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.seL4_Fault_UserException_get_number((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Cond 33 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
35 Call 34 Kernel_C.copyMRsFault(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), WordCastSigned(2), receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
36 Basic 1 { }
37 Basic 36 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
38 Call 37 Kernel_C.Arch_setMRs_fault(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
39 Basic 38 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
40 Call 39 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
41 Cond 40 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
42 Cond 41 2 true
43 Cond 35 42 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || false
44 Cond 24 43 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
45 Cond 17 44 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
46 Basic 45 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
47 Call 46 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
48 Cond 47 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 48

Function Kernel_C.set_sie_mask(mask_high___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'csrrs_%0,_sie,_%1(mask_high___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.tcbEPDequeue(tcb___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_tcb_queue_C#v.head_C : Word 64, ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_tcb_queue_C#v.head_C : Word 64 = queue___struct_tcb_queue_C#v.head_C : Word 64
    var ret__struct_tcb_queue_C#v.end_C : Word 64 = queue___struct_tcb_queue_C#v.end_C : Word 64
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 408) + 416, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 416))
}
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 408)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
6 Basic 3 {
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 416)
}
7 Cond 6 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
8 Cond 5 7 !((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 408) == 0)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 416) + 408, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 408))
}
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 416)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
12 Basic 9 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 408)
}
13 Cond 12 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
14 Cond 11 13 !((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 416) == 0)
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 15

Function Kernel_C.transferCaps(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, endpoint___ptr_to_struct_endpoint_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
5 Call 4 Kernel_C.seL4_MessageInfo_set_extraCaps(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, WordCast(i___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
10 Basic 6 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * (i___unsigned_long#v : Word 64))) == WordCastSigned(0)), 1, 0)
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
12 Cond 11 Err (i___unsigned_long#v : Word 64) < WordCastSigned(3)
13 Cond 12 6 !((ret__int#v : Word 32) == 0)
14 Basic 13 {
    var ret__int#v : Word 32 = IfThenElse((i___unsigned_long#v : Word 64) < (1 << WordCast(2) - WordCastSigned(1)), 1, 0)
}
15 Cond 14 Err (0 <=s 2) && (2 <s 64)
16 Basic 15 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
17 Basic 16 {
    var info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
18 Call 17 Kernel_C.seL4_MessageInfo_set_capsUnwrapped(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, (ret__unsigned_longlong#v : Word 64) | WordCastSigned(1 << WordCast(i___unsigned_long#v : Word 64))) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
19 Cond 18 Err (1 == 0) || (1 < (1 << 31 >> WordCast(i___unsigned_long#v : Word 64))) && (0 <=s 1)
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.seL4_MessageInfo_get_capsUnwrapped(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Call 21 Kernel_C.setExtraBadge(receiveBuffer___ptr_to_unsigned_long#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), i___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.cap_endpoint_cap_get_capEPBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Basic 16 {
    var destSlot___ptr_to_struct_cte_C#v : Word 64 = WordCastSigned(0)
}
26 Call 25 Kernel_C.cteInsert(dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Cond 5 26 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.cap_get_capType(dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Cond 5 29 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
31 Basic 30 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
32 Call 31 Kernel_C.deriveCap(slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
33 Cond 5 32 !(!((destSlot___ptr_to_struct_cte_C#v : Word 64) == 0))
34 Cond 24 33 !((ret__int#v : Word 32) == 0)
35 Basic 34 {
    var ret__int#v : Word 32 = IfThenElse(WordCast(ret__unsigned_longlong#v : Word 64) == (endpoint___ptr_to_struct_endpoint_C#v : Word 64), 1, 0)
}
36 Basic 35 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
37 Call 36 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
38 Cond 37 34 !((ret__int#v : Word 32) == 0)
39 Basic 38 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4), 1, 0)
}
40 Basic 39 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
41 Call 40 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
42 Basic 41 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
43 Cond 42 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
44 Basic 43 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * (i___unsigned_long#v : Word 64)))
}
45 Cond 44 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
46 Cond 45 Err (i___unsigned_long#v : Word 64) < WordCastSigned(3)
6 Basic 7 {
    var loop#6#count : Word 64 = (loop#6#count : Word 64) + 1
}
7 Cond 8 Err true
8 Cond 46 5 !((ret__int#v : Word 32) == 0)
9 Basic 7 {
    var loop#6#count : Word 64 = 0
}
47 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * (i___unsigned_long#v : Word 64))) == WordCastSigned(0)), 1, 0)
}
48 Cond 47 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
49 Cond 48 Err (i___unsigned_long#v : Word 64) < WordCastSigned(3)
50 Cond 49 9 !((ret__int#v : Word 32) == 0)
51 Basic 50 {
    var ret__int#v : Word 32 = IfThenElse((i___unsigned_long#v : Word 64) < (1 << WordCast(2) - WordCastSigned(1)), 1, 0)
}
52 Cond 51 Err (0 <=s 2) && (2 <s 64)
53 Basic 52 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
54 Basic 53 {
    var destSlot___ptr_to_struct_cte_C#v : Word 64 = rv#space#ret__ptr_to_struct_cte_C#v : Word 64
}
55 Call 54 Kernel_C.getReceiveSlots(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
56 Basic 1 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
57 Cond 56 55 !(!(!(!((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == 0)) || !(!((receiveBuffer___ptr_to_unsigned_long#v : Word 64) == 0))))
58 Cond 57 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
59 Cond 58 Err (0 <s 3) && (0 <=s 0)
60 Basic 59 {
    var info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
61 Call 60 Kernel_C.seL4_MessageInfo_set_capsUnwrapped(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
62 Basic 61 {
    var info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
63 Call 62 Kernel_C.seL4_MessageInfo_set_extraCaps(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
EntryPoint 63

Function Kernel_C.Arch_checkIRQ(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, WordCastSigned(54))
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
7 Basic 6 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(1))
}
8 Cond 7 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
11 Cond 10 3 (WordCastSigned(54) < (irq___unsigned_long#v : Word 64)) || ((irq___unsigned_long#v : Word 64) == WordCastSigned(0))
EntryPoint 11

Function Kernel_C.doIPCTransfer(sender___ptr_to_struct_tcb_C#v : Word 64, endpoint___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, grant___unsigned_long#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.doNormalTransfer(sender___ptr_to_struct_tcb_C#v : Word 64, sendBuffer___ptr_to_void#v : Word 64, endpoint___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, grant___unsigned_long#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveBuffer___ptr_to_void#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var sendBuffer___ptr_to_void#v : Word 64 = ret__ptr_to_unsigned_long#v : Word 64
}
4 Basic 3 {
    var ret__ptr_to_unsigned_long#v : Word 64 = rv#space#ret__ptr_to_unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.lookupIPCBuffer(WordCastSigned(0), sender___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_unsigned_long#v : Word 64)
6 Call 1 Kernel_C.doFaultTransfer(badge___unsigned_long#v : Word 64, sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveBuffer___ptr_to_void#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 5 6 !(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)))
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
11 Basic 10 {
    var receiveBuffer___ptr_to_void#v : Word 64 = ret__ptr_to_unsigned_long#v : Word 64
}
12 Basic 11 {
    var ret__ptr_to_unsigned_long#v : Word 64 = rv#space#ret__ptr_to_unsigned_long#v : Word 64
}
13 Call 12 Kernel_C.lookupIPCBuffer(WordCastSigned(1), receiver___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_unsigned_long#v : Word 64)
EntryPoint 13

Function Kernel_C.fastpath_call(cptr___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.fastpath_restore(badge___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Basic 3 {
    var msgInfo___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.wordFromMessageInfo(ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 5 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
7 Call 6 Kernel_C.seL4_MessageInfo_set_capsUnwrapped(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
8 Call 7 Kernel_C.switchToThread_fp(dest___ptr_to_struct_tcb_C#v : Word 64, cap_pd___ptr_to_struct_pte_C#v : Word 64, stored_hw_asid___struct_pte_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Call 8 Kernel_C.thread_state_ptr_set_tsType_np((dest___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.fastpath_copy_mrs(length___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 11 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
13 Call 12 Kernel_C.mdb_node_ptr_mset_mdbNext_mdbRevocable_mdbFirstBadged((replySlot___ptr_to_struct_cte_C#v : Word 64) + 16, callerSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(1), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Cond 13 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, replySlot___ptr_to_struct_cte_C#v : Word 64)
15 Call 14 Kernel_C.mdb_node_ptr_set_mdbPrev_np((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 16, replySlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
17 Call 16 Kernel_C.cap_reply_cap_ptr_new_np(callerSlot___ptr_to_struct_cte_C#v : Word 64, replyCanGrant___unsigned_long#v : Word 64, WordCastSigned(0), (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Cond 17 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
20 Basic 19 {
    var replyCanGrant___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.thread_state_ptr_get_blockingIPCCanGrant((dest___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
24 Basic 23 {
    var callerSlot___ptr_to_struct_cte_C#v : Word 64 = (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32)
}
25 Cond 24 Err (0 <=s 10) && (10 <s 64) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(3)))
26 Basic 25 {
    var replySlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32)
}
27 Cond 26 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
28 Cond 27 Err (0 <=s 10) && (10 <s 64) && (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(2)))
29 Cond 28 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
30 Call 29 Kernel_C.thread_state_ptr_set_tsType_np((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280, WordCastSigned(5), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
31 Cond 30 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
32 Cond 31 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
33 Cond 32 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
34 Basic 33 {
    var badge___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
35 Basic 34 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
36 Call 35 Kernel_C.cap_endpoint_cap_get_capEPBadge(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
37 Basic 36 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) + 408) + 416, WordCastSigned(0))
}
38 Cond 37 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) + 408)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
39 Call 36 Kernel_C.endpoint_ptr_mset_epQueue_tail_state(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
40 Cond 38 39 !(!(!((Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) + 408) == 0)))
41 Cond 40 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
42 Call 41 Kernel_C.endpoint_ptr_set_epQueue_head_np(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, (Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) + 408), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
43 Cond 42 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
44 Call 43 Kernel_C.slowpath(WordCastSigned(0 - 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
45 Cond 44 43 !(!(!((Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) + 344) == (Mem : Mem) -MemAcc-> (ksCurDomain : Word 64)) && !(15 == 0)))
46 Cond 45 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
47 Cond 46 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
48 Call 47 Kernel_C.slowpath(WordCastSigned(0 - 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
49 Cond 48 47 !(!(!((ret__int#v : Word 32) == 0)))
50 Basic 49 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
51 Basic 50 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
52 Call 51 Kernel_C.cap_endpoint_cap_get_capCanGrantReply(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
53 Cond 52 49 !((ret__int#v : Word 32) == 0)
54 Basic 53 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
55 Basic 54 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
56 Call 55 Kernel_C.cap_endpoint_cap_get_capCanGrant(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
57 Call 56 Kernel_C.slowpath(WordCastSigned(0 - 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
58 Cond 57 56 !(!(!((ret__int#v : Word 32) == 0)))
59 Basic 58 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_long#v : Word 64) == 0)), 1, 0)
}
60 Basic 59 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
61 Call 60 Kernel_C.isHighestPrio(dom___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) + 360), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
62 Cond 61 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
63 Cond 62 58 !((ret__int#v : Word 32) == 0)
64 Basic 63 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) + 360) < (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 360), 1, 0)
}
65 Cond 64 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
66 Cond 65 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, dest___ptr_to_struct_tcb_C#v : Word 64)
67 Cond 66 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
68 Basic 67 {
    var dom___unsigned_long#v : Word 64 = IfThenElse(!(15 == 0), (Mem : Mem) -MemAcc-> (ksCurDomain : Word 64), WordCastSigned(0))
}
69 Cond 68 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
70 Basic 69 {
    var stored_hw_asid___struct_pte_C#v.words_C.0 : Word 64 = ret__unsigned_longlong#v : Word 64
}
71 Cond 70 Err (0 <s 1) && (0 <=s 0)
72 Basic 71 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
73 Call 72 Kernel_C.cap_page_table_cap_get_capPTMappedASID(newVTable___struct_cap_C#v.words_C.0 : Word 64, newVTable___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
74 Call 73 Kernel_C.slowpath(WordCastSigned(0 - 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
75 Cond 74 73 !(!(!(!((ret__unsigned_long#v : Word 64) == 0))))
76 Basic 75 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
77 Call 76 Kernel_C.isValidVTableRoot_fp(newVTable___struct_cap_C#v.words_C.0 : Word 64, newVTable___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
78 Basic 77 {
    var cap_pd___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
79 Basic 78 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
80 Call 79 Kernel_C.cap_page_table_cap_get_capPTBasePtr(newVTable___struct_cap_C#v.words_C.0 : Word 64, newVTable___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
81 Basic 80 {
    var newVTable___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32) + 0 + (8 * 0))
    var newVTable___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32) + 0 + (8 * 1))
}
82 Cond 81 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1))) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32)) && (0 <=s 10) && (10 <s 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (dest___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
83 Call 82 Kernel_C.slowpath(WordCastSigned(0 - 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
84 Cond 83 82 !(!(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2))))
85 Basic 84 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
86 Call 85 Kernel_C.endpoint_ptr_get_state(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
87 Basic 86 {
    var dest___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
88 Basic 87 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
89 Call 88 Kernel_C.endpoint_ptr_get_epQueue_head(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
90 Basic 89 {
    var ep_ptr___ptr_to_struct_endpoint_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
91 Basic 90 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
92 Call 91 Kernel_C.cap_endpoint_cap_get_capEPPtr(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
93 Call 92 Kernel_C.slowpath(WordCastSigned(0 - 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
94 Cond 93 92 !(!(!((ret__int#v : Word 32) == 0)))
95 Basic 94 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
96 Basic 95 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
97 Call 96 Kernel_C.cap_endpoint_cap_get_capCanSend(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
98 Cond 94 97 !((ret__int#v : Word 32) == 0)
99 Basic 98 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__int#v : Word 32) == 0)), 1, 0)
}
100 Basic 99 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
101 Call 100 Kernel_C.cap_capType_equals(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(4)) -- updates (rv#space#ret__int#v : Word 32)
102 Cond 101 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
103 Cond 102 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
104 Basic 103 {
    var ep_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ep_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
105 Call 104 Kernel_C.lookup_fp((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32) + 0 + (8 * 1)), cptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
106 Cond 105 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
107 Cond 106 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0))) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32)) && (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
108 Cond 107 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
109 Call 108 Kernel_C.slowpath(WordCastSigned(0 - 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
110 Cond 109 108 !(!(!((ret__int#v : Word 32) == 0) || !((fault_type___unsigned_long#v : Word 64) == WordCastSigned(0))))
111 Basic 110 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
112 Call 111 Kernel_C.fastpath_mi_check(msgInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__int#v : Word 32)
113 Basic 112 {
    var fault_type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
114 Basic 113 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
115 Call 114 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
116 Cond 115 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
117 Cond 116 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
118 Cond 117 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
119 Basic 118 {
    var length___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
120 Basic 119 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
121 Call 120 Kernel_C.seL4_MessageInfo_get_length(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
122 Basic 121 {
    var info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
123 Call 122 Kernel_C.messageInfoFromWord_raw(msgInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
EntryPoint 123

Function Kernel_C.getObjectSize(t___unsigned_long#v : Word 64, userObjSize___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.Arch_getObjectSize(t___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(10)
}
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(4)
}
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(5)
}
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(5) + (userObjSize___unsigned_long#v : Word 64)
}
10 Basic 1 {
    var ret__unsigned_long#v : Word 64 = userObjSize___unsigned_long#v : Word 64
}
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
12 Cond 11 Err false
13 Call 12 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
14 Cond 13 Err false
15 Cond 14 2 true
16 Cond 10 15 ((t___unsigned_long#v : Word 64) == WordCastSigned(0)) || false
17 Cond 9 16 ((t___unsigned_long#v : Word 64) == WordCastSigned(4)) || false
18 Cond 8 17 ((t___unsigned_long#v : Word 64) == WordCastSigned(3)) || false
19 Cond 7 18 ((t___unsigned_long#v : Word 64) == WordCastSigned(2)) || false
20 Cond 6 19 ((t___unsigned_long#v : Word 64) == WordCastSigned(1)) || false
21 Cond 5 20 WordCastSigned(5) <= (t___unsigned_long#v : Word 64)
EntryPoint 21

Function Kernel_C.getSyscallArg(i___unsigned_long#v : Word 64, ipc_buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ipc_buffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8))
}
4 Cond 3 Err (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, ipc_buffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1)) && PValid(HTD : HTD, Word 64, (ipc_buffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, ipc_buffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1) + 1)
5 Basic 1 { }
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.getRegister((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
9 Cond 8 Err (i___unsigned_long#v : Word 64) < WordCastSigned(4)
10 Cond 9 4 (i___unsigned_long#v : Word 64) < WordCastSigned(4)
EntryPoint 10

Function Kernel_C.get_dev_p_reg(i___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_p_region_C#v.start_C : Word 64, ret__struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.handleSyscall(syscall___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.activateThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.schedule(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.Arch_finaliseInterrupt() -- updates ()
7 Call 6 Kernel_C.handleInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 7 5 !((irq___unsigned_long#v : Word 64) == WordCastSigned(0))
9 Basic 8 {
    var irq___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
10 Call 9 Kernel_C.getActiveIRQ(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 10 5 !(!(!((ret___unsigned_long#v : Word 64) == WordCastSigned(0))))
12 Basic 11 {
    var ret___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
13 Call 12 Kernel_C.handleInvocation(WordCastSigned(0), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Call 5 Kernel_C.Arch_finaliseInterrupt() -- updates ()
15 Call 14 Kernel_C.handleInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 5 !((irq___unsigned_long#v : Word 64) == WordCastSigned(0))
17 Basic 16 {
    var irq___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.getActiveIRQ(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Cond 18 5 !(!(!((ret___unsigned_long#v : Word 64) == WordCastSigned(0))))
20 Basic 19 {
    var ret___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.handleInvocation(WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
22 Call 5 Kernel_C.Arch_finaliseInterrupt() -- updates ()
23 Call 22 Kernel_C.handleInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Cond 23 5 !((irq___unsigned_long#v : Word 64) == WordCastSigned(0))
25 Basic 24 {
    var irq___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
26 Call 25 Kernel_C.getActiveIRQ(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Cond 26 5 !(!(!((ret___unsigned_long#v : Word 64) == WordCastSigned(0))))
28 Basic 27 {
    var ret___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
29 Call 28 Kernel_C.handleInvocation(WordCastSigned(1), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
30 Call 5 Kernel_C.handleRecv(WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
31 Call 5 Kernel_C.handleReply(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Call 5 Kernel_C.handleRecv(WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
33 Call 32 Kernel_C.handleReply(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
34 Call 5 Kernel_C.handleRecv(WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
35 Call 5 Kernel_C.handleYield(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
36 Cond 5 Err false
37 Call 36 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
38 Cond 37 Err false
39 Cond 38 5 true
40 Cond 35 39 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 7)) || false
41 Cond 34 40 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 8)) || false
42 Cond 33 41 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 2)) || false
43 Cond 31 42 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 6)) || false
44 Cond 30 43 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 5)) || false
45 Cond 29 44 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 1)) || false
46 Cond 21 45 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 4)) || false
47 Cond 13 46 ((syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 3)) || false
EntryPoint 47

Function Kernel_C.handleVMFault(thread___ptr_to_struct_tcb_C#v : Word 64, vm_faultType___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
6 Call 5 Kernel_C.seL4_Fault_VMFault_new(addr___unsigned_longlong#v : Word 64, WordCastSigned(5), WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
8 Basic 7 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
10 Call 9 Kernel_C.seL4_Fault_VMFault_new(addr___unsigned_longlong#v : Word 64, WordCastSigned(7), WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
12 Basic 11 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
13 Cond 12 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
14 Call 13 Kernel_C.seL4_Fault_VMFault_new(addr___unsigned_longlong#v : Word 64, WordCastSigned(1), WordCastSigned(1)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
15 Cond 2 Err false
16 Call 15 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
17 Cond 16 Err false
18 Cond 17 2 true
19 Cond 14 18 ((vm_faultType___unsigned_long#v : Word 64) == WordCastSigned(1)) || ((vm_faultType___unsigned_long#v : Word 64) == WordCastSigned(12)) || false
20 Cond 10 19 ((vm_faultType___unsigned_long#v : Word 64) == WordCastSigned(7)) || ((vm_faultType___unsigned_long#v : Word 64) == WordCastSigned(15)) || false
21 Cond 6 20 ((vm_faultType___unsigned_long#v : Word 64) == WordCastSigned(5)) || ((vm_faultType___unsigned_long#v : Word 64) == WordCastSigned(13)) || false
22 Basic 21 {
    var addr___unsigned_longlong#v : Word 64 = WordCast(ret__unsigned_long#v : Word 64)
}
23 Basic 22 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.read_sbadaddr(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 24

Function Kernel_C.insert_region(reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
8 Basic 4 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
10 Basic 9 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0, reg___struct_region_C#v.start_C : Word 64), (ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8, reg___struct_region_C#v.end_C : Word 64)
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
12 Cond 11 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
13 Call 12 Kernel_C.reserve_region(ret__struct_p_region_C#v.start_C : Word 64, ret__struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Basic 13 {
    var ret__struct_p_region_C#v.start_C : Word 64 = rv#space#ret__struct_p_region_C#v.start_C : Word 64
    var ret__struct_p_region_C#v.end_C : Word 64 = rv#space#ret__struct_p_region_C#v.end_C : Word 64
}
15 Call 14 Kernel_C.pptr_to_paddr_reg(reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64) -- updates (rv#space#ret__struct_p_region_C#v.start_C : Word 64, rv#space#ret__struct_p_region_C#v.end_C : Word 64)
16 Cond 15 8 !((ret__unsigned_long#v : Word 64) == 0)
17 Basic 16 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.is_reg_empty((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
20 Cond 19 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 20 3 (i___unsigned_long#v : Word 64) < WordCastSigned(16)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
21 Basic 7 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
22 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
23 Cond 22 21 !((ret__unsigned_long#v : Word 64) == 0)
24 Basic 23 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
25 Call 24 Kernel_C.is_reg_empty(reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 25

Function Kernel_C.isHighestPrio(dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_long#v : Word 64) <= (prio___unsigned_long#v : Word 64), 1, 0)
}
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.getHighestPrio(dom___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
7 Cond 3 6 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((ksReadyQueuesL1Bitmap : Word 64) + (8 * (dom___unsigned_long#v : Word 64))) == WordCastSigned(0), 1, 0)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Array (Word 64) 16, ksReadyQueuesL1Bitmap : Word 64)
10 Cond 9 Err (dom___unsigned_long#v : Word 64) < WordCastSigned(16)
EntryPoint 10

Function Kernel_C.isMDBParentOf(cte_a___ptr_to_struct_cte_C#v : Word 64, cte_b___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.mdb_node_get_mdbFirstBadged((Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Cond 6 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_b___ptr_to_struct_cte_C#v : Word 64)
8 Cond 7 3 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(WordCast(badge___unsigned_long#v : Word 64) == (ret__unsigned_longlong#v : Word 64), 1, 0)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_endpoint_cap_get_capEPBadge((Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_b___ptr_to_struct_cte_C#v : Word 64)
13 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
14 Cond 13 12 (badge___unsigned_long#v : Word 64) == WordCastSigned(0)
15 Basic 14 {
    var badge___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_endpoint_cap_get_capEPBadge((Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
18 Cond 17 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_a___ptr_to_struct_cte_C#v : Word 64)
19 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
20 Basic 19 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.mdb_node_get_mdbFirstBadged((Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_b___ptr_to_struct_cte_C#v : Word 64)
24 Cond 23 19 !((ret__int#v : Word 32) == 0)
25 Basic 24 {
    var ret__int#v : Word 32 = IfThenElse(WordCast(badge___unsigned_long#v : Word 64) == (ret__unsigned_longlong#v : Word 64), 1, 0)
}
26 Basic 25 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
27 Call 26 Kernel_C.cap_notification_cap_get_capNtfnBadge((Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
28 Cond 27 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_b___ptr_to_struct_cte_C#v : Word 64)
29 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
30 Cond 29 28 (badge___unsigned_long#v : Word 64) == WordCastSigned(0)
31 Basic 30 {
    var badge___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.cap_notification_cap_get_capNtfnBadge((Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Cond 33 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_a___ptr_to_struct_cte_C#v : Word 64)
35 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
36 Cond 35 2 true
37 Cond 34 36 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
38 Cond 18 37 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
39 Basic 38 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
40 Call 39 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
41 Cond 40 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_a___ptr_to_struct_cte_C#v : Word 64)
42 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
43 Cond 42 41 !(!((ret__unsigned_long#v : Word 64) == 0))
44 Basic 43 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
45 Call 44 Kernel_C.sameRegionAs((Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_b___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
46 Cond 45 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_a___ptr_to_struct_cte_C#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_b___ptr_to_struct_cte_C#v : Word 64)
47 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
48 Cond 47 46 !(!((ret__unsigned_longlong#v : Word 64) == 0))
49 Basic 48 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
50 Call 49 Kernel_C.mdb_node_get_mdbRevocable((Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte_a___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
51 Cond 50 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte_a___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 51

Function Kernel_C.map_it_pt_cap(vspace_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_cap___struct_cap_C#v.words_C.1 : Word 64, pt_cap___struct_cap_C#v.words_C.0 : Word 64, pt_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var Mem : Mem = MemUpdate(Mem : Mem, (targetSlot___ptr_to_struct_pte_C#v : Word 64) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.pte_C, targetSlot___ptr_to_struct_pte_C#v : Word 64)
5 Basic 4 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
6 Call 5 Kernel_C.pte_new(WordCast((ret__unsigned_long#v : Word 64) >> WordCast(12)), WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
7 Cond 6 Err (0 <=s 12) && (12 <s 64)
8 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.addrFromPPtr(pt___ptr_to_struct_pte_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var targetSlot___ptr_to_struct_pte_C#v : Word 64 = pt_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
}
11 Basic 10 {
    var pt_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
    var pt_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64
}
12 Call 11 Kernel_C.lookupPTSlot(lvl1pt___ptr_to_struct_pte_C#v : Word 64, vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)
13 Basic 12 {
    var pt___ptr_to_struct_pte_C#v : Word 64 = ret__ptr_to_void#v : Word 64
}
14 Basic 13 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capPtr(pt_cap___struct_cap_C#v.words_C.0 : Word 64, pt_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
16 Basic 15 {
    var lvl1pt___ptr_to_struct_pte_C#v : Word 64 = ret__ptr_to_void#v : Word 64
}
17 Basic 16 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
18 Call 17 Kernel_C.cap_get_capPtr(vspace_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
19 Basic 18 {
    var vptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_page_table_cap_get_capPTMappedAddress(pt_cap___struct_cap_C#v.words_C.0 : Word 64, pt_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 21

Function Kernel_C.maskCapRights(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = new_cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = new_cap___struct_cap_C#v.words_C.1 : Word 64
}
5 Basic 4 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_endpoint_cap_set_capCanGrantReply(new_cap___struct_cap_C#v.words_C.0 : Word 64, new_cap___struct_cap_C#v.words_C.1 : Word 64, (ret__unsigned_longlong#v : Word 64) & (unsigned_longlong_eret_2#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.seL4_CapRights_get_capAllowGrantReply(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_endpoint_cap_get_capCanGrantReply(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
11 Basic 10 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
12 Call 11 Kernel_C.cap_endpoint_cap_set_capCanGrant(new_cap___struct_cap_C#v.words_C.0 : Word 64, new_cap___struct_cap_C#v.words_C.1 : Word 64, (ret__unsigned_longlong#v : Word 64) & (unsigned_longlong_eret_2#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
13 Basic 12 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.seL4_CapRights_get_capAllowGrant(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_endpoint_cap_get_capCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 16 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
18 Call 17 Kernel_C.cap_endpoint_cap_set_capCanReceive(new_cap___struct_cap_C#v.words_C.0 : Word 64, new_cap___struct_cap_C#v.words_C.1 : Word 64, (ret__unsigned_longlong#v : Word 64) & (unsigned_longlong_eret_2#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
19 Basic 18 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.seL4_CapRights_get_capAllowRead(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.cap_endpoint_cap_get_capCanReceive(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Basic 22 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
24 Call 23 Kernel_C.cap_endpoint_cap_set_capCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, (ret__unsigned_longlong#v : Word 64) & (unsigned_longlong_eret_2#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
25 Basic 24 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
26 Call 25 Kernel_C.seL4_CapRights_get_capAllowWrite(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
27 Basic 26 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
28 Call 27 Kernel_C.cap_endpoint_cap_get_capCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
29 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = new_cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = new_cap___struct_cap_C#v.words_C.1 : Word 64
}
30 Basic 29 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
31 Call 30 Kernel_C.cap_notification_cap_set_capNtfnCanReceive(new_cap___struct_cap_C#v.words_C.0 : Word 64, new_cap___struct_cap_C#v.words_C.1 : Word 64, (ret__unsigned_longlong#v : Word 64) & (unsigned_longlong_eret_2#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
32 Basic 31 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.seL4_CapRights_get_capAllowRead(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Basic 33 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
35 Call 34 Kernel_C.cap_notification_cap_get_capNtfnCanReceive(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
36 Basic 35 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
37 Call 36 Kernel_C.cap_notification_cap_set_capNtfnCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, (ret__unsigned_longlong#v : Word 64) & (unsigned_longlong_eret_2#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
38 Basic 37 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
39 Call 38 Kernel_C.seL4_CapRights_get_capAllowWrite(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
40 Basic 39 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
41 Call 40 Kernel_C.cap_notification_cap_get_capNtfnCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
42 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = new_cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = new_cap___struct_cap_C#v.words_C.1 : Word 64
}
43 Basic 42 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
44 Call 43 Kernel_C.cap_reply_cap_set_capReplyCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, (ret__unsigned_longlong#v : Word 64) & (unsigned_longlong_eret_2#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
45 Basic 44 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
46 Call 45 Kernel_C.seL4_CapRights_get_capAllowGrant(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
47 Basic 46 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
48 Call 47 Kernel_C.cap_reply_cap_get_capReplyCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
49 Cond 2 Err false
50 Call 49 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
51 Cond 50 Err false
52 Cond 51 2 true
53 Cond 48 52 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)) || false
54 Cond 41 53 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
55 Cond 28 54 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
56 Cond 3 55 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(16)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(14)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(20)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
57 Basic 56 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
58 Call 57 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
59 Basic 1 { }
60 Basic 59 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
61 Call 60 Kernel_C.Arch_maskCapRights(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
62 Cond 61 58 !((ret__unsigned_long#v : Word 64) == 0)
63 Basic 62 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
64 Call 63 Kernel_C.isArchCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 64

Function Kernel_C.maskInterrupt(disable___unsigned_long#v : Word 64, irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.clear_sie_mask(1 << WordCast(5), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err (0 <=s 5) && (5 <s 64)
4 Call 1 Kernel_C.set_sie_mask(1 << WordCast(5), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err (0 <=s 5) && (5 <s 64)
6 Cond 3 5 !((disable___unsigned_long#v : Word 64) == 0)
7 Call 1 Kernel_C.plic_mask_irq(disable___unsigned_long#v : Word 64, irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 6 7 (irq___unsigned_long#v : Word 64) == WordCastSigned(54)
EntryPoint 8

Function Kernel_C.merge_regions(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 320, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320) - WordCastSigned(1))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
12 Basic 8 {
    var j___unsigned_long#v : Word 64 = (j___unsigned_long#v : Word 64) + WordCastSigned(1)
}
13 Basic 12 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64) - WordCastSigned(1)) + 0, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64)) + 0)), (ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64) - WordCastSigned(1)) + 8, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64)) + 8))
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
15 Cond 14 Err (((j___unsigned_long#v : Word 64) - WordCastSigned(1)) < WordCastSigned(20)) && ((j___unsigned_long#v : Word 64) < WordCastSigned(20))
8 Basic 9 {
    var loop#8#count : Word 64 = (loop#8#count : Word 64) + 1
}
9 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
10 Cond 15 7 (j___unsigned_long#v : Word 64) < (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320)
11 Basic 9 {
    var loop#8#count : Word 64 = 0
}
16 Basic 11 {
    var j___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
17 Basic 16 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64) - WordCastSigned(1)) + 8, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 8))
}
18 Cond 17 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
19 Cond 18 Err (((i___unsigned_long#v : Word 64) - WordCastSigned(1)) < WordCastSigned(20)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(20))
20 Basic 2 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
21 Cond 19 20 (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64) - WordCastSigned(1)) + 8) == (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0)
22 Cond 21 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
23 Cond 22 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(20)) && (((i___unsigned_long#v : Word 64) - WordCastSigned(1)) < WordCastSigned(20))
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
4 Cond 23 1 (i___unsigned_long#v : Word 64) < (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
24 Basic 5 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(1)
}
EntryPoint 24

Function Kernel_C.plic_mask_irq(disable___unsigned_long#v : Word 64, irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.writel(val___unsigned#v : Word 32, addr___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var val___unsigned#v : Word 32 = WordCast(WordCast(val___unsigned#v : Word 32) & ~(1 << WordCast(bit___unsigned#v : Word 32)))
}
4 Cond 3 Err (bit___unsigned#v : Word 32) < WordCastSigned(64)
5 Basic 2 {
    var val___unsigned#v : Word 32 = WordCast(WordCast(val___unsigned#v : Word 32) | (1 << WordCast(bit___unsigned#v : Word 32)))
}
6 Cond 5 Err (bit___unsigned#v : Word 32) < WordCastSigned(64)
7 Cond 4 6 !((disable___unsigned_long#v : Word 64) == 0)
8 Basic 7 {
    var val___unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
9 Call 8 Kernel_C.readl(addr___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32)
10 Basic 9 {
    var bit___unsigned#v : Word 32 = WordCast((irq___unsigned_long#v : Word 64) % WordCastSigned(32))
}
11 Cond 10 Err !(32 == 0)
12 Basic 11 {
    var addr___unsigned_longlong#v : Word 64 = WordCast(-1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + (ret__unsigned_long#v : Word 64) + ((irq___unsigned_long#v : Word 64) / WordCastSigned(32) * WordCastSigned(4)))
}
13 Cond 12 Err !(32 == 0)
14 Basic 13 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
15 Call 14 Kernel_C.plic_enable_offset(hart_id___unsigned_long#v : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
16 Basic 15 {
    var hart_id___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.get_hart_id() -- updates (rv#space#ret__unsigned_long#v : Word 64)
18 Basic 17 {
    var bit___unsigned#v : Word 32 = WordCastSigned(0)
}
19 Basic 18 {
    var val___unsigned#v : Word 32 = WordCastSigned(0)
}
20 Basic 19 {
    var addr___unsigned_longlong#v : Word 64 = WordCastSigned(0)
}
EntryPoint 20

Function Kernel_C.read_sbadaddr(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = temp___unsigned_long#v : Word 64
}
4 Call 3 asm_instruction'csrr_%0,_sbadaddr(Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 4

Function Kernel_C.receiveSignal(thread___ptr_to_struct_tcb_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, isBlocking___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.ntfn_ptr_set_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64, ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.notification_ptr_set_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 3 {
    var ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
5 Call 4 Kernel_C.tcbEPAppend(thread___ptr_to_struct_tcb_C#v : Word 64, ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64, ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
7 Call 6 Kernel_C.ntfn_ptr_get_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
8 Call 7 Kernel_C.scheduleTCB(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Call 8 Kernel_C.thread_state_ptr_set_blockingObject((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(ntfnPtr___ptr_to_struct_notification_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.thread_state_ptr_set_tsType((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(6), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
13 Call 1 Kernel_C.doNBRecvFailedTransfer(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Cond 12 13 !((isBlocking___unsigned_long#v : Word 64) == 0)
15 Call 1 Kernel_C.notification_ptr_set_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Call 15 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.notification_ptr_get_ntfnMsgIdentifier(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Cond 1 1 true
20 Cond 18 19 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
21 Cond 14 20 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.notification_ptr_get_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Basic 23 {
    var ntfnPtr___ptr_to_struct_notification_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
25 Basic 24 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
26 Call 25 Kernel_C.cap_notification_cap_get_capNtfnPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 26

Function Kernel_C.sbi_clear_ipi(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(3), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.sbi_set_timer(stime_value___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(0), WordCast(stime_value___unsigned_longlong#v : Word 64), WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.setExtraBadge(bufferPtr___ptr_to_unsigned_long#v : Word 64, badge___unsigned_long#v : Word 64, i___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (bufferPtr___ptr_to_unsigned_long#v : Word 64) + (WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64) * 8), badge___unsigned_long#v : Word 64)
}
3 Cond 2 Err ((WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64)) == 0) || PArrayValid(HTD : HTD, Word 64, bufferPtr___ptr_to_unsigned_long#v : Word 64, WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64)) && PValid(HTD : HTD, Word 64, (bufferPtr___ptr_to_unsigned_long#v : Word 64) + (WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64) * 8)) && ((120 <=s (120 + 2)) == (0 <=s 2)) && ((WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64)) == 0) || PArrayValid(HTD : HTD, Word 64, bufferPtr___ptr_to_unsigned_long#v : Word 64, WordCastSigned(120 + 2) + (i___unsigned_long#v : Word 64) + 1)
EntryPoint 3

Function Kernel_C.setIRQTrigger(irq___unsigned_long#v : Word 64, edge_triggered___unsigned_long#v : Word 64) -- updates: ()
1 Basic Ret { }
2 Call 1 Kernel_C.plic_irq_set_trigger(irq___unsigned_long#v : Word 64, edge_triggered___unsigned_long#v : Word 64) -- updates ()
EntryPoint 2

Function Kernel_C.setMCPriority(tptr___ptr_to_struct_tcb_C#v : Word 64, mcp___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tptr___ptr_to_struct_tcb_C#v : Word 64) + 352, mcp___unsigned_long#v : Word 64)
}
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 3

Function Kernel_C.setVSpaceRoot(addr___unsigned_long#v : Word 64, asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.write_satp(WordCast(satp___struct_satp_C#v.words_C.0 : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 Err (0 <s 1) && (0 <=s 0)
5 Basic 4 {
    var satp___struct_satp_C#v.words_C.0 : Word 64 = rv#space#ret__struct_satp_C#v.words_C.0 : Word 64
}
6 Call 5 Kernel_C.satp_new(WordCastSigned(8), WordCast(asid___unsigned_long#v : Word 64), WordCast((addr___unsigned_long#v : Word 64) >> WordCast(12))) -- updates (rv#space#ret__struct_satp_C#v.words_C.0 : Word 64)
7 Cond 6 Err (0 <=s 12) && (12 <s 64)
EntryPoint 7

Function Kernel_C.updateCapData(preserve___unsigned_long#v : Word 64, newData___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Call 4 Kernel_C.cap_endpoint_cap_set_capEPBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(newData___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
6 Basic 1 { }
7 Basic 6 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Call 7 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
9 Cond 5 8 !((ret__int#v : Word 32) == 0)
10 Basic 9 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0), 1, 0)
}
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.cap_endpoint_cap_get_capEPBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Cond 12 9 !((ret__int#v : Word 32) == 0)
14 Basic 13 {
    var ret__int#v : Word 32 = IfThenElse(!(!((preserve___unsigned_long#v : Word 64) == 0)), 1, 0)
}
15 Basic 1 { }
16 Basic 15 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
17 Call 16 Kernel_C.cap_notification_cap_set_capNtfnBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(newData___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
18 Basic 1 { }
19 Basic 18 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
20 Call 19 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
21 Cond 17 20 !((ret__int#v : Word 32) == 0)
22 Basic 21 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0), 1, 0)
}
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.cap_notification_cap_get_capNtfnBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Cond 24 21 !((ret__int#v : Word 32) == 0)
26 Basic 25 {
    var ret__int#v : Word 32 = IfThenElse(!(!((preserve___unsigned_long#v : Word 64) == 0)), 1, 0)
}
27 Basic 1 { }
28 Basic 27 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
29 Call 28 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
30 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = new_cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = new_cap___struct_cap_C#v.words_C.1 : Word 64
}
31 Basic 30 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
32 Call 31 Kernel_C.cap_cnode_cap_set_capCNodeGuardSize(new_cap___struct_cap_C#v.words_C.0 : Word 64, new_cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(guardSize___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
33 Basic 32 {
    var new_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var new_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
34 Call 33 Kernel_C.cap_cnode_cap_set_capCNodeGuard(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(guard___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
35 Basic 34 {
    var guard___unsigned_long#v : Word 64 = WordCast((ret__unsigned_longlong#v : Word 64) & WordCast(1 << (guardSize___unsigned_long#v : Word 64) - 1))
}
36 Cond 35 Err (guardSize___unsigned_long#v : Word 64) < WordCastSigned(64)
37 Basic 36 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.seL4_CNode_CapData_get_guard(w___struct_seL4_CNode_CapData_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Cond 29 38 WordCast(1 << WordCast(6)) < (WordCast(guardSize___unsigned_long#v : Word 64) + (ret__unsigned_longlong#v : Word 64))
40 Cond 39 Err (0 <=s 6) && (6 <s 64)
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
43 Basic 42 {
    var guardSize___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
44 Basic 43 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
45 Call 44 Kernel_C.seL4_CNode_CapData_get_guardSize(w___struct_seL4_CNode_CapData_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
46 Basic 45 {
    var w___struct_seL4_CNode_CapData_C#v.words_C.0 : Word 64 = WordCast(newData___unsigned_long#v : Word 64)
}
47 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
48 Cond 47 2 true
49 Cond 46 48 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10)) || false
50 Cond 26 49 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
51 Cond 14 50 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
52 Basic 51 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
53 Call 52 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
54 Basic 1 { }
55 Basic 54 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
56 Call 55 Kernel_C.Arch_updateCapData(preserve___unsigned_long#v : Word 64, newData___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
57 Cond 56 53 !((ret__unsigned_long#v : Word 64) == 0)
58 Basic 57 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
59 Call 58 Kernel_C.isArchCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 59

Function Kernel_C.Arch_deriveCap(slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_deriveCap_ret_C#v.status_C : Word 64, ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_deriveCap_ret_C#v.status_C : Word 64 = ret___struct_deriveCap_ret_C#v.status_C : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
4 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
5 Basic 4 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
6 Basic 3 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(3)
}
7 Basic 6 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Basic 7 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
12 Cond 5 11 !((ret__unsigned_longlong#v : Word 64) == 0)
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_page_table_cap_get_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 1 {
    var ret__struct_deriveCap_ret_C#v.status_C : Word 64 = ret___struct_deriveCap_ret_C#v.status_C : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
16 Basic 15 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
17 Basic 16 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
18 Basic 17 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
19 Call 18 Kernel_C.cap_frame_cap_set_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
20 Basic 19 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
21 Call 20 Kernel_C.cap_frame_cap_set_capFMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
22 Basic 1 {
    var ret__struct_deriveCap_ret_C#v.status_C : Word 64 = ret___struct_deriveCap_ret_C#v.status_C : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
23 Basic 22 {
    var ret___struct_deriveCap_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
24 Basic 23 {
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
25 Cond 2 Err false
26 Call 25 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
27 Cond 26 Err false
28 Cond 27 2 true
29 Cond 24 28 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(13)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(11)) || false
30 Cond 21 29 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
31 Cond 14 30 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || false
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 33

Function Kernel_C.activateThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Call 3 Kernel_C.setNextPC((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), pc___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
6 Basic 5 {
    var pc___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.getRestartPC((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
9 Call 1 Kernel_C.Arch_activateIdleThread((Mem : Mem) -MemAcc-> (ksCurThread : Word 64)) -- updates ()
10 Cond 9 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
11 Cond 1 Err false
12 Call 11 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
13 Cond 12 Err false
14 Cond 13 1 true
15 Cond 10 14 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(7)) || false
16 Cond 8 15 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
17 Cond 1 16 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.thread_state_get_tsType((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Cond 19 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
22 Cond 21 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 22

Function Kernel_C.cap_get_capPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_void#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
4 Basic 3 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.cap_untyped_cap_get_capPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_notification_cap_get_capNtfnPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_cnode_cap_get_capCNodePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32)
}
16 Cond 15 Err (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = ret__unsigned_long#v : Word 64
}
20 Basic 19 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.cap_zombie_cap_get_capZombiePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCastSigned(0)
}
23 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCastSigned(0)
}
24 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCastSigned(0)
}
25 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCastSigned(0)
}
26 Basic 1 { }
27 Basic 26 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
28 Call 27 Kernel_C.cap_get_archCapPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
29 Cond 28 2 true
30 Cond 25 29 ((ctag___enum_cap_tag#v : Word 32) == 16) || false
31 Cond 24 30 ((ctag___enum_cap_tag#v : Word 32) == 14) || false
32 Cond 23 31 ((ctag___enum_cap_tag#v : Word 32) == 8) || false
33 Cond 22 32 ((ctag___enum_cap_tag#v : Word 32) == 20) || false
34 Cond 21 33 ((ctag___enum_cap_tag#v : Word 32) == 18) || false
35 Cond 18 34 ((ctag___enum_cap_tag#v : Word 32) == 12) || false
36 Cond 14 35 ((ctag___enum_cap_tag#v : Word 32) == 10) || false
37 Cond 11 36 ((ctag___enum_cap_tag#v : Word 32) == 6) || false
38 Cond 8 37 ((ctag___enum_cap_tag#v : Word 32) == 4) || false
39 Cond 5 38 ((ctag___enum_cap_tag#v : Word 32) == 2) || false
40 Basic 39 {
    var ctag___enum_cap_tag#v : Word 32 = WordCast(ret__unsigned_longlong#v : Word 64)
}
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 42

Function Kernel_C.clear_sie_mask(mask_low___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 asm_instruction'csrrc_%0,_sie,_%1(mask_low___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS) -- updates (temp___unsigned_long#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 2

Function Kernel_C.completeSignal(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.notification_ptr_set_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.setRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 3 {
    var badge___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.notification_ptr_get_ntfnMsgIdentifier(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Cond 1 Err false
8 Call 7 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
9 Cond 8 Err false
10 Cond 6 9 !(!(!((ret__int#v : Word 32) == 0)))
11 Basic 10 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2), 1, 0)
}
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.notification_ptr_get_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Cond 13 10 !((ret__int#v : Word 32) == 0)
15 Basic 14 {
    var ret__int#v : Word 32 = IfThenElse(!((tcb___ptr_to_struct_tcb_C#v : Word 64) == 0), 1, 0)
}
EntryPoint 15

Function Kernel_C.decodeSetSpace(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_ThreadControl(WordCast(ret__unsigned_longlong#v : Word 64), slot___ptr_to_struct_cte_C#v : Word 64, faultEP___unsigned_long#v : Word 64, WordCastSigned(0), WordCastSigned(0), cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64, cRootSlot___ptr_to_struct_cte_C#v : Word 64, vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64, vRootSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(0), ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0), WordCastSigned(4), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Call 9 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 10 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
12 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
15 Cond 14 11 !(!((ret__unsigned_long#v : Word 64) == 0))
16 Basic 15 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.isValidVTableRoot(vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
18 Basic 17 {
    var vRootCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var vRootCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
19 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
20 Cond 19 18 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
21 Basic 20 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
22 Call 21 Kernel_C.deriveCap(vRootSlot___ptr_to_struct_cte_C#v : Word 64, vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Basic 22 {
    var vRootCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var vRootCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
24 Call 23 Kernel_C.updateCapData(WordCastSigned(0), vRootData___unsigned_long#v : Word 64, vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
25 Cond 24 22 !((vRootData___unsigned_long#v : Word 64) == WordCastSigned(0))
26 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
27 Basic 26 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
29 Cond 28 25 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10))
30 Basic 29 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
31 Call 30 Kernel_C.cap_get_capType(cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
32 Basic 31 {
    var cRootCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var cRootCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
33 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
34 Cond 33 32 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
35 Basic 34 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
36 Call 35 Kernel_C.deriveCap(cRootSlot___ptr_to_struct_cte_C#v : Word 64, cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
37 Basic 36 {
    var cRootCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cRootCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
38 Call 37 Kernel_C.updateCapData(WordCastSigned(0), cRootData___unsigned_long#v : Word 64, cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
39 Cond 38 36 !((cRootData___unsigned_long#v : Word 64) == WordCastSigned(0))
40 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
41 Basic 40 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
43 Cond 42 39 !((ret__int#v : Word 32) == 0)
44 Basic 43 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
45 Cond 44 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
46 Basic 45 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
47 Call 46 Kernel_C.slotCapLongRunningDelete(WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
48 Cond 47 Err (0 <=s 10) && (10 <s 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
49 Basic 48 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
50 Call 49 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
51 Cond 43 50 !((ret__int#v : Word 32) == 0)
52 Basic 51 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
53 Cond 52 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
54 Basic 53 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
55 Call 54 Kernel_C.slotCapLongRunningDelete(WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
56 Cond 55 Err (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
57 Basic 56 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
58 Call 57 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
59 Basic 58 {
    var vRootCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 0))
    var vRootCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 1))
}
60 Cond 59 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
61 Cond 60 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1))) && (1 <s 3) && (0 <=s 1)
62 Cond 61 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
63 Basic 62 {
    var vRootSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1))
}
64 Cond 63 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
65 Cond 64 Err (1 <s 3) && (0 <=s 1)
66 Basic 65 {
    var cRootCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var cRootCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
67 Cond 66 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
68 Cond 67 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
69 Cond 68 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
70 Basic 69 {
    var cRootSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))
}
71 Cond 70 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
72 Cond 71 Err (0 <s 3) && (0 <=s 0)
73 Basic 72 {
    var vRootData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
74 Call 73 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
75 Basic 74 {
    var cRootData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
76 Call 75 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
77 Basic 76 {
    var faultEP___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
78 Call 77 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
79 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
80 Basic 79 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
81 Cond 80 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
82 Cond 81 78 !((ret__int#v : Word 32) == 0)
83 Basic 82 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) == WordCastSigned(0), 1, 0)
}
84 Cond 83 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
85 Cond 84 Err (1 <s 3) && (0 <=s 1)
86 Cond 82 85 !((ret__int#v : Word 32) == 0)
87 Basic 86 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
88 Cond 87 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
89 Cond 88 Err (0 <s 3) && (0 <=s 0)
90 Cond 86 89 !((ret__int#v : Word 32) == 0)
91 Basic 90 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(3), 1, 0)
}
EntryPoint 91

Function Kernel_C.deleteASIDPool(asid_base___unsigned_long#v : Word 64, pool___ptr_to_struct_asid_pool_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setVMRoot((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (riscvKSASIDTable : Word 64) + (8 * (asid_base___unsigned_long#v : Word 64) >> WordCast(9)), WordCastSigned(0))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
6 Cond 5 Err (((asid_base___unsigned_long#v : Word 64) >> WordCast(9)) < WordCastSigned(128)) && (0 <=s 9) && (9 <s 64)
7 Cond 6 1 (Mem : Mem) -MemAcc-> ((riscvKSASIDTable : Word 64) + (8 * (asid_base___unsigned_long#v : Word 64) >> WordCast(9))) == (pool___ptr_to_struct_asid_pool_C#v : Word 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
9 Cond 8 Err (((asid_base___unsigned_long#v : Word 64) >> WordCast(9)) < WordCastSigned(128)) && (0 <=s 9) && (9 <s 64)
EntryPoint 9

Function Kernel_C.getHighestPrio(dom___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (ret__unsigned_long#v : Word 64) | (l2index___unsigned_long#v : Word 64)
}
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.l1index_to_prio(l1index___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 5 {
    var l2index___unsigned_long#v : Word 64 = 1 << WordCast(6) - WordCastSigned(1) - WordCastSigned(ret__long#v : Word 64)
}
7 Cond 6 Err (0 <=s 6) && (6 <s 64)
8 Basic 7 {
    var ret__long#v : Word 64 = rv#space#ret__long#v : Word 64
}
9 Call 8 Kernel_C.clzl((Mem : Mem) -MemAcc-> ((ksReadyQueuesL2Bitmap : Word 64) + (32 * (dom___unsigned_long#v : Word 64)) + (8 * (l1index_inverted___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__long#v : Word 64)
10 Cond 9 Err PGlobalValid(HTD : HTD, Array (Array (Word 64) 4) 16, ksReadyQueuesL2Bitmap : Word 64)
11 Cond 10 Err ((l1index_inverted___unsigned_long#v : Word 64) < WordCastSigned(4)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16))
12 Basic 11 {
    var l1index_inverted___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
13 Call 12 Kernel_C.invert_l1index(l1index___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
14 Basic 13 {
    var l1index___unsigned_long#v : Word 64 = 1 << WordCast(6) - WordCastSigned(1) - WordCastSigned(ret__long#v : Word 64)
}
15 Cond 14 Err (0 <=s 6) && (6 <s 64)
16 Basic 15 {
    var ret__long#v : Word 64 = rv#space#ret__long#v : Word 64
}
17 Call 16 Kernel_C.clzl((Mem : Mem) -MemAcc-> ((ksReadyQueuesL1Bitmap : Word 64) + (8 * (dom___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__long#v : Word 64)
18 Cond 17 Err PGlobalValid(HTD : HTD, Array (Word 64) 16, ksReadyQueuesL1Bitmap : Word 64)
19 Cond 18 Err (dom___unsigned_long#v : Word 64) < WordCastSigned(16)
EntryPoint 19

Function Kernel_C.invert_l1index(l1index___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = inverted___unsigned_long#v : Word 64
}
4 Basic 3 {
    var inverted___unsigned_long#v : Word 64 = (WordCastSigned(256) + 1 << WordCast(6) - WordCastSigned(1) / 1 << WordCast(6)) - WordCastSigned(1) - (l1index___unsigned_long#v : Word 64)
}
5 Cond 4 Err !((1 << WordCast(6)) == 0) && (0 <=s 6) && (6 <s 64) && (0 <=s 6) && (6 <s 64)
EntryPoint 5

Function Kernel_C.isCapRevocable(derivedCap___struct_cap_C#v.words_C.0 : Word 64, derivedCap___struct_cap_C#v.words_C.1 : Word 64, srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(!((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64)), 1, 0))
}
4 Basic 3 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.cap_endpoint_cap_get_capEPBadge(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_endpoint_cap_get_capEPBadge(derivedCap___struct_cap_C#v.words_C.0 : Word 64, derivedCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(!((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64)), 1, 0))
}
9 Basic 8 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_notification_cap_get_capNtfnBadge(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.cap_notification_cap_get_capNtfnBadge(derivedCap___struct_cap_C#v.words_C.0 : Word 64, derivedCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(14), 1, 0))
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capType(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
18 Cond 17 2 true
19 Cond 16 18 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
20 Cond 15 19 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(16)) || false
21 Cond 12 20 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
22 Cond 7 21 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.cap_get_capType(derivedCap___struct_cap_C#v.words_C.0 : Word 64, derivedCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Basic 1 { }
26 Basic 25 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.Arch_isCapRevocable(derivedCap___struct_cap_C#v.words_C.0 : Word 64, derivedCap___struct_cap_C#v.words_C.1 : Word 64, srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
28 Cond 27 24 !((ret__unsigned_long#v : Word 64) == 0)
29 Basic 28 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
30 Call 29 Kernel_C.isArchCap(derivedCap___struct_cap_C#v.words_C.0 : Word 64, derivedCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 30

Function Kernel_C.isPTEPageTable(pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__int#v : Word 32) == 0)), 1, 0)
}
5 Basic 4 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.pte_ptr_get_execute(pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Cond 4 7 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.pte_ptr_get_write(pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 8 11 !((ret__int#v : Word 32) == 0)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.pte_ptr_get_read(pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Cond 15 3 !((ret__int#v : Word 32) == 0)
17 Basic 16 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.pte_ptr_get_valid(pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 19

Function Kernel_C.kpptr_to_paddr(pptr___ptr_to_void#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (pptr___ptr_to_void#v : Word 64) - -2147483648 + (WordCast(2147483648) + 67108864) & (1 << WordCast(30) - 1) - WordCast(2147483648) + 67108864
}
4 Cond 3 Err (0 <=s 30) && (30 <s 64)
EntryPoint 4

Function Kernel_C.paddr_to_kpptr(paddr___unsigned_long#v : Word 64) -- updates: (ret__ptr_to_void#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = (paddr___unsigned_long#v : Word 64) + -2147483648 + (WordCast(2147483648) + 67108864) & (1 << WordCast(30) - 1) - WordCast(2147483648) + 67108864
}
4 Cond 3 Err (0 <=s 30) && (30 <s 64)
EntryPoint 4

Function Kernel_C.plic_get_claim(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
4 Basic 3 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
5 Call 4 Kernel_C.readl(WordCast(-1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + (ret__unsigned_long#v : Word 64)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.plic_claim_offset(hart_id___unsigned_long#v : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Basic 7 {
    var hart_id___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.get_hart_id() -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 9

Function Kernel_C.plic_init_hart(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.writel(WordCastSigned(0), WordCast(-1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + (ret__unsigned_long#v : Word 64)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.plic_thres_offset(hart_id___unsigned_long#v : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 5 {
    var i___int#v : Word 32 = (i___int#v : Word 32) + 1
}
10 Cond 9 Err ((i___int#v : Word 32) <=s ((i___int#v : Word 32) + 1)) == (0 <=s 1)
11 Call 10 Kernel_C.plic_mask_irq(WordCastSigned(1), WordCastSigned(i___int#v : Word 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 6 {
    var loop#5#count : Word 64 = (loop#5#count : Word 64) + 1
}
6 Cond 7 Err true
7 Cond 11 4 (i___int#v : Word 32) <=s 53
8 Basic 6 {
    var loop#5#count : Word 64 = 0
}
12 Basic 8 {
    var i___int#v : Word 32 = 1
}
13 Basic 12 {
    var hart_id___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.get_hart_id() -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 14

Function Kernel_C.reserve_region(reg___struct_p_region_C#v.start_C : Word 64, reg___struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 320, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320) + WordCastSigned(1))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0, reg___struct_p_region_C#v.start_C : Word 64), (ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 8, reg___struct_p_region_C#v.end_C : Word 64)
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
8 Cond 7 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
10 Cond 9 8 ((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == WordCast(WordCastSigned(16) + (24 / 24) + WordCastSigned(0) + WordCastSigned(3))
11 Cond 10 Err !(24 == 0)
16 Basic 12 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
18 Basic 17 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 320, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320) + WordCastSigned(1))
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
20 Basic 19 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0, reg___struct_p_region_C#v.start_C : Word 64), (ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 8, reg___struct_p_region_C#v.end_C : Word 64)
}
21 Cond 20 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
22 Cond 21 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
27 Basic 23 {
    var j___unsigned_long#v : Word 64 = (j___unsigned_long#v : Word 64) - WordCastSigned(1)
}
28 Basic 27 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64)) + 0, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64) - WordCastSigned(1)) + 0)), (ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64)) + 8, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (j___unsigned_long#v : Word 64) - WordCastSigned(1)) + 8))
}
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
30 Cond 29 Err ((j___unsigned_long#v : Word 64) < WordCastSigned(20)) && (((j___unsigned_long#v : Word 64) - WordCastSigned(1)) < WordCastSigned(20))
23 Basic 24 {
    var loop#23#count : Word 64 = (loop#23#count : Word 64) + 1
}
24 Cond 25 Err true
25 Cond 30 22 (i___unsigned_long#v : Word 64) < (j___unsigned_long#v : Word 64)
26 Basic 24 {
    var loop#23#count : Word 64 = 0
}
31 Basic 26 {
    var j___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320)
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
33 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
34 Cond 33 32 WordCast(WordCastSigned(16) + (24 / 24) + WordCastSigned(0) + WordCastSigned(3)) <= ((Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320) + WordCastSigned(1))
35 Cond 34 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
36 Cond 35 Err !(24 == 0)
37 Cond 36 16 (reg___struct_p_region_C#v.end_C : Word 64) < (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0)
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
39 Cond 38 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
40 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
41 Call 40 Kernel_C.merge_regions(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
42 Basic 41 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 8, reg___struct_p_region_C#v.end_C : Word 64)
}
43 Cond 42 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
44 Cond 43 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
45 Cond 44 39 (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 8) == (reg___struct_p_region_C#v.start_C : Word 64)
46 Cond 45 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
47 Cond 46 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
48 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
49 Call 48 Kernel_C.merge_regions(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
50 Basic 49 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0, reg___struct_p_region_C#v.start_C : Word 64)
}
51 Cond 50 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
52 Cond 51 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
53 Cond 52 47 (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0) == (reg___struct_p_region_C#v.end_C : Word 64)
54 Cond 53 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
55 Cond 54 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
12 Basic 13 {
    var loop#12#count : Word 64 = (loop#12#count : Word 64) + 1
}
13 Cond 14 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
14 Cond 55 11 (i___unsigned_long#v : Word 64) < (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320)
15 Basic 13 {
    var loop#12#count : Word 64 = 0
}
56 Basic 15 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
57 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
58 Cond 57 56 (reg___struct_p_region_C#v.start_C : Word 64) == (reg___struct_p_region_C#v.end_C : Word 64)
EntryPoint 58

Function Kernel_C.rightsFromWord(w___unsigned_long#v : Word 64) -- updates: (ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64 = seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64 = WordCast(w___unsigned_long#v : Word 64)
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0)
EntryPoint 5

Function Kernel_C.setThreadState(tptr___ptr_to_struct_tcb_C#v : Word 64, ts___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.scheduleTCB(tptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.thread_state_ptr_set_tsType((tptr___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCast(ts___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tptr___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 4

Function Kernel_C.setupCallerCap(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, canGrant___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.cteInsert(ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, replySlot___ptr_to_struct_cte_C#v : Word 64, callerSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
4 Call 3 Kernel_C.cap_reply_cap_new(WordCast(canGrant___unsigned_long#v : Word 64), WordCastSigned(0), WordCast(sender___ptr_to_struct_tcb_C#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
5 Basic 4 {
    var callerCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var callerCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
7 Basic 6 {
    var callerSlot___ptr_to_struct_cte_C#v : Word 64 = (receiver___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32)
}
8 Cond 7 Err (0 <=s 10) && (10 <s 64) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (receiver___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (receiver___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(3)))
9 Basic 8 {
    var masterCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((replySlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var masterCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((replySlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, replySlot___ptr_to_struct_cte_C#v : Word 64)
11 Basic 10 {
    var replySlot___ptr_to_struct_cte_C#v : Word 64 = (sender___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32)
}
12 Cond 11 Err (0 <=s 10) && (10 <s 64) && (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (sender___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (sender___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(2)))
13 Call 12 Kernel_C.setThreadState(sender___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(5), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 13

Function Kernel_C.switchToThread(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksCurThread : Word 64, thread___ptr_to_struct_tcb_C#v : Word 64)
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Call 3 Kernel_C.tcbSchedDequeue(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.Arch_switchToThread(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.tcbSchedAppend(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.thread_state_ptr_set_tcbQueued((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 0, queue___struct_tcb_queue_C#v.head_C : Word 64), (ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 8, queue___struct_tcb_queue_C#v.end_C : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.tcb_queue_C) 4096, ksReadyQueues : Word 64)
6 Cond 5 Err (idx___unsigned_long#v : Word 64) < WordCastSigned(4096)
7 Basic 6 {
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = tcb___ptr_to_struct_tcb_C#v : Word 64
}
8 Basic 7 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 392, WordCastSigned(0))
}
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 400, queue___struct_tcb_queue_C#v.end_C : Word 64)
}
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
12 Call 11 Kernel_C.addToBitmap(WordCastSigned(0), dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Basic 12 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = tcb___ptr_to_struct_tcb_C#v : Word 64
}
14 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, (queue___struct_tcb_queue_C#v.end_C : Word 64) + 392, tcb___ptr_to_struct_tcb_C#v : Word 64)
}
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, queue___struct_tcb_queue_C#v.end_C : Word 64)
16 Cond 13 15 !(!((queue___struct_tcb_queue_C#v.head_C : Word 64) == 0))
17 Basic 16 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = (Mem : Mem) -MemAcc-> ((ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 0)
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 8)
}
18 Cond 17 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.tcb_queue_C) 4096, ksReadyQueues : Word 64)
19 Cond 18 Err (idx___unsigned_long#v : Word 64) < WordCastSigned(4096)
20 Basic 19 {
    var idx___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.ready_queues_index(dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Basic 21 {
    var prio___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 360)
}
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
24 Basic 23 {
    var dom___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 344)
}
25 Cond 24 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
26 Cond 25 1 !(!((ret__unsigned_longlong#v : Word 64) == 0))
27 Basic 26 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
28 Call 27 Kernel_C.thread_state_get_tcbQueued((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
29 Cond 28 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 29

Function Kernel_C.unmapPageTable(asid___unsigned_long#v : Word 64, vptr___unsigned_long#v : Word 64, target_pt___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ptSlot___ptr_to_struct_pte_C#v : Word 64) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.pte_C, ptSlot___ptr_to_struct_pte_C#v : Word 64)
5 Basic 4 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
6 Call 5 Kernel_C.pte_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
7 Cond 1 6 !((pt___ptr_to_struct_pte_C#v : Word 64) == (target_pt___ptr_to_struct_pte_C#v : Word 64))
12 Cond 8 Err (0 <=s (3 - 1)) == (1 <=s 3)
13 Basic 12 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
14 Basic 13 {
    var pt___ptr_to_struct_pte_C#v : Word 64 = rv#space#ret__ptr_to_struct_pte_C#v : Word 64
}
15 Call 14 Kernel_C.getPPtrFromHWPTE(ptSlot___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_struct_pte_C#v : Word 64)
16 Cond 1 15 !(!(!(!((ret__unsigned_long#v : Word 64) == 0))))
17 Basic 16 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.isPTEPageTable(ptSlot___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Basic 18 {
    var ptSlot___ptr_to_struct_pte_C#v : Word 64 = (pt___ptr_to_struct_pte_C#v : Word 64) + (((vptr___unsigned_long#v : Word 64) >> ((WordCastSigned(9) * WordCastSigned(3 - 1) - (i___unsigned_long#v : Word 64)) + WordCastSigned(12))) & (1 << WordCast(9) - 1) * 8)
}
20 Cond 19 Err (0 <=s 9) && (9 <s 64) && (((WordCastSigned(9) * WordCastSigned(3 - 1) - (i___unsigned_long#v : Word 64)) + WordCastSigned(12)) < WordCastSigned(64)) && ((0 <=s (3 - 1)) == (1 <=s 3)) && (((vptr___unsigned_long#v : Word 64) >> ((WordCastSigned(9) * WordCastSigned(3 - 1) - (i___unsigned_long#v : Word 64)) + WordCastSigned(12))) & (1 << WordCast(9) - 1) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, pt___ptr_to_struct_pte_C#v : Word 64, ((vptr___unsigned_long#v : Word 64) >> ((WordCastSigned(9) * WordCastSigned(3 - 1) - (i___unsigned_long#v : Word 64)) + WordCastSigned(12))) & (1 << WordCast(9) - 1))
8 Basic 9 {
    var loop#8#count : Word 64 = (loop#8#count : Word 64) + 1
}
9 Cond 10 Err true
10 Cond 20 7 ((i___unsigned_long#v : Word 64) < WordCastSigned(3 - 1)) && !((pt___ptr_to_struct_pte_C#v : Word 64) == (target_pt___ptr_to_struct_pte_C#v : Word 64))
11 Basic 9 {
    var loop#8#count : Word 64 = 0
}
21 Cond 11 Err (0 <=s (3 - 1)) == (1 <=s 3)
22 Basic 21 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
23 Basic 22 {
    var pt___ptr_to_struct_pte_C#v : Word 64 = find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
24 Basic 23 {
    var ptSlot___ptr_to_struct_pte_C#v : Word 64 = WordCastSigned(0)
}
25 Cond 1 24 !(!(!((find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
26 Basic 25 {
    var find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
27 Call 26 Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 27

Function Kernel_C.wordFromRights(seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast((seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) & WordCast(1 << WordCast(4) - 1))
}
4 Cond 3 Err (0 <=s 4) && (4 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 4

Function Kernel_C.capCyclicZombie(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_long#v : Word 64) == (slot___ptr_to_struct_cte_C#v : Word 64), 1, 0)
}
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.cap_zombie_cap_get_capZombiePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
7 Cond 6 3 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18), 1, 0)
}
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 10

Function Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ((cap___struct_cap_C#v.words_C.0 : Word 64) >> WordCast(59)) & 31
}
4 Cond 3 Err (0 <=s 59) && (59 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 4

Function Kernel_C.create_untypeds(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, boot_mem_reuse_reg___struct_region_C#v.start_C : Word 64, boot_mem_reuse_reg___struct_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = res___unsigned_long#v : Word 64
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 152 + 0, slot_pos_before___unsigned_long#v : Word 64), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 152 + 8, slot_pos_after___unsigned_long#v : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584))
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
8 Basic 7 {
    var slot_pos_after___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
10 Basic 9 {
    var res___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.create_kernel_untypeds(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, boot_mem_reuse_reg___struct_region_C#v.start_C : Word 64, boot_mem_reuse_reg___struct_region_C#v.end_C : Word 64, slot_pos_before___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Call 11 Kernel_C.create_device_untypeds(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, slot_pos_before___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Basic 12 {
    var slot_pos_before___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
EntryPoint 14

Function Kernel_C.deleteCallerCap(receiver___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.cteDeleteOne(callerSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var GhostAssertions : WordArray 50 64 = WordArrayUpdate(GhostAssertions : WordArray 50 64, 502, WordCast(8))
}
4 Cond 3 Err true
5 Basic 4 {
    var callerSlot___ptr_to_struct_cte_C#v : Word 64 = (receiver___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32)
}
6 Cond 5 Err (0 <=s 10) && (10 <s 64) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (receiver___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (receiver___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(3)))
EntryPoint 6

Function Kernel_C.doFaultTransfer(badge___unsigned_long#v : Word 64, sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiverIPCBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.wordFromMessageInfo(msgInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 5 {
    var msgInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
7 Call 6 Kernel_C.seL4_MessageInfo_new(ret__unsigned_longlong#v : Word 64, WordCastSigned(0), WordCastSigned(0), WordCast(sent___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
11 Basic 10 {
    var sent___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.setMRs_fault(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiverIPCBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 12

Function Kernel_C.doReplyTransfer(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, grant___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.possibleSwitchTo(receiver___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.setThreadState(receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.cteDeleteOne(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var GhostAssertions : WordArray 50 64 = WordArrayUpdate(GhostAssertions : WordArray 50 64, 502, WordCast(8))
}
6 Cond 5 Err true
7 Call 6 Kernel_C.doIPCTransfer(sender___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), WordCastSigned(0), grant___unsigned_long#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Call 1 Kernel_C.possibleSwitchTo(receiver___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Call 8 Kernel_C.setThreadState(receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Call 1 Kernel_C.setThreadState(receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 9 10 !((restart___unsigned_long#v : Word 64) == 0)
12 Basic 11 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (receiver___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + 0, ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (receiver___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + 8, ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
13 Cond 12 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, receiver___ptr_to_struct_tcb_C#v : Word 64)
14 Basic 13 {
    var ret__struct_seL4_Fault_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64
    var ret__struct_seL4_Fault_C#v.words_C.1 : Word 64 = rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64
}
15 Call 14 Kernel_C.seL4_Fault_NullFault_new() -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
16 Basic 15 {
    var restart___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.handleFaultReply(receiver___ptr_to_struct_tcb_C#v : Word 64, sender___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Call 17 Kernel_C.cteDeleteOne(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Basic 18 {
    var GhostAssertions : WordArray 50 64 = WordArrayUpdate(GhostAssertions : WordArray 50 64, 502, WordCast(8))
}
20 Cond 19 Err true
21 Cond 7 20 !(!((fault_type___unsigned_long#v : Word 64) == WordCastSigned(0)))
22 Basic 21 {
    var fault_type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((receiver___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((receiver___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Cond 24 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, receiver___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 25

Function Kernel_C.ensureEmptySlot(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(8))
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
7 Cond 6 3 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0))
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 10

Function Kernel_C.getNewActiveIRQ(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 { }
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.plic_get_claim(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(54)
}
8 Cond 7 3 !((sip___unsigned_longlong#v : Word 64) & WordCast(1 << WordCast(5)) == 0)
9 Cond 8 Err (0 <=s 5) && (5 <s 64)
10 Cond 6 9 !((sip___unsigned_longlong#v : Word 64) & WordCast(1 << WordCast(9)) == 0)
11 Cond 10 Err (0 <=s 9) && (9 <s 64)
12 Basic 11 {
    var sip___unsigned_longlong#v : Word 64 = WordCast(ret__unsigned_long#v : Word 64)
}
13 Basic 12 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.read_sip(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 14

Function Kernel_C.getReceiveSlots(thread___ptr_to_struct_tcb_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_struct_cte_C#v : Word 64 = slot___ptr_to_struct_cte_C#v : Word 64
}
4 Basic 1 {
    var ret__ptr_to_struct_cte_C#v : Word 64 = WordCastSigned(0)
}
5 Cond 4 3 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0))
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
9 Basic 8 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = lus_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
10 Basic 1 {
    var ret__ptr_to_struct_cte_C#v : Word 64 = WordCastSigned(0)
}
11 Cond 10 9 !((lus_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
12 Basic 11 {
    var lus_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lus_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
13 Call 12 Kernel_C.lookupTargetSlot(cnode___struct_cap_C#v.words_C.0 : Word 64, cnode___struct_cap_C#v.words_C.1 : Word 64, ct___struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64, ct___struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Basic 13 {
    var cnode___struct_cap_C#v.words_C.0 : Word 64 = luc_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64
    var cnode___struct_cap_C#v.words_C.1 : Word 64 = luc_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64
}
15 Basic 1 {
    var ret__ptr_to_struct_cte_C#v : Word 64 = WordCastSigned(0)
}
16 Cond 15 14 !((luc_ret___struct_lookupCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
17 Basic 16 {
    var luc_ret___struct_lookupCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.status_C : Word 64
    var luc_ret___struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64
    var luc_ret___struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64
}
18 Call 17 Kernel_C.lookupCap(thread___ptr_to_struct_tcb_C#v : Word 64, cptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_lookupCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Basic 18 {
    var cptr___unsigned_long#v : Word 64 = ct___struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64
}
20 Basic 19 {
    var ct___struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64 = rv#space#ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64
    var ct___struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64 = rv#space#ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64
    var ct___struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64 = rv#space#ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64
}
21 Call 20 Kernel_C.loadCapTransfer(buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64, rv#space#ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64, rv#space#ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64)
22 Basic 1 {
    var ret__ptr_to_struct_cte_C#v : Word 64 = WordCastSigned(0)
}
23 Cond 22 21 !(!((buffer___ptr_to_unsigned_long#v : Word 64) == 0))
EntryPoint 23

Function Kernel_C.handleInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.ackInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.sendSignal(WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 3 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.cap_notification_cap_get_capNtfnBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_notification_cap_get_capNtfnPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Cond 7 2 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_notification_cap_get_capNtfnCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 11 8 !((ret__int#v : Word 32) == 0)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6), 1, 0)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Basic 15 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((intStateIRQNode : Word 64) + ((irq___unsigned_long#v : Word 64) * 32) + 0 + (8 * 0))
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((intStateIRQNode : Word 64) + ((irq___unsigned_long#v : Word 64) * 32) + 0 + (8 * 1))
}
17 Cond 16 Err ((irq___unsigned_long#v : Word 64) < WordCastSigned(64)) && PValid(HTD : HTD, Array (Struct Kernel_C.cte_C) 64, intStateIRQNode : Word 64) && ((irq___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, intStateIRQNode : Word 64, irq___unsigned_long#v : Word 64)
18 Call 2 Kernel_C.resetTimer(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Call 18 Kernel_C.timerTick(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Call 2 Kernel_C.handleReservedIRQ(irq___unsigned_long#v : Word 64) -- updates ()
21 Call 2 Kernel_C.maskInterrupt(WordCastSigned(1), irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
22 Cond 2 Err false
23 Call 22 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
24 Cond 23 Err false
25 Cond 24 2 true
26 Cond 25 Err PGlobalValid(HTD : HTD, Array (Word 64) 55, intStateIRQTable : Word 64)
27 Cond 21 26 ((Mem : Mem) -MemAcc-> ((intStateIRQTable : Word 64) + (8 * (irq___unsigned_long#v : Word 64))) == WordCastSigned(0)) || false
28 Cond 27 Err PGlobalValid(HTD : HTD, Array (Word 64) 55, intStateIRQTable : Word 64)
29 Cond 20 28 ((Mem : Mem) -MemAcc-> ((intStateIRQTable : Word 64) + (8 * (irq___unsigned_long#v : Word 64))) == WordCastSigned(3)) || false
30 Cond 29 Err PGlobalValid(HTD : HTD, Array (Word 64) 55, intStateIRQTable : Word 64)
31 Cond 19 30 ((Mem : Mem) -MemAcc-> ((intStateIRQTable : Word 64) + (8 * (irq___unsigned_long#v : Word 64))) == WordCastSigned(2)) || false
32 Cond 31 Err PGlobalValid(HTD : HTD, Array (Word 64) 55, intStateIRQTable : Word 64)
33 Cond 17 32 ((Mem : Mem) -MemAcc-> ((intStateIRQTable : Word 64) + (8 * (irq___unsigned_long#v : Word 64))) == WordCastSigned(1)) || false
34 Cond 33 Err PGlobalValid(HTD : HTD, Array (Word 64) 55, intStateIRQTable : Word 64)
35 Cond 34 Err (irq___unsigned_long#v : Word 64) < WordCastSigned(55)
36 Call 1 Kernel_C.ackInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
37 Call 36 Kernel_C.maskInterrupt(WordCastSigned(1), irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
38 Cond 37 35 !(!(WordCastSigned(54) < (irq___unsigned_long#v : Word 64)))
EntryPoint 38

Function Kernel_C.init_core_state(scheduler_action___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksCurThread : Word 64, (Mem : Mem) -MemAcc-> (ksIdleThread : Word 64))
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64) && PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksIdleThread : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksSchedulerAction : Word 64, scheduler_action___ptr_to_struct_tcb_C#v : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
EntryPoint 5

Function Kernel_C.invokeCNodeMove(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.cteMove(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.it_alloc_paging(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = allocated___unsigned_long#v : Word 64
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 56 + 0, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 56 + 0) + 1 << WordCast(12))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
6 Cond 5 Err (0 <=s 12) && (12 <s 64)
7 Basic 6 {
    var allocated___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 56 + 0)
}
8 Cond 7 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
EntryPoint 8

Function Kernel_C.l1index_to_prio(l1index___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (l1index___unsigned_long#v : Word 64) << WordCast(6)
}
4 Cond 3 Err (0 <=s 6) && (6 <s 64)
EntryPoint 4

Function Kernel_C.loadCapTransfer(buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64, ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64, ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Cond 3 Err ((offset___int#v : Word 32) == 0) || (((offset___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Word 64, (buffer___ptr_to_unsigned_long#v : Word 64) + (WordCastSigned(offset___int#v : Word 32) * 8), WordCast(0 - (offset___int#v : Word 32)))) || (!((offset___int#v : Word 32) == 0) && !((offset___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Word 64, buffer___ptr_to_unsigned_long#v : Word 64, WordCast(offset___int#v : Word 32)))
5 Basic 4 {
    var ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64 = rv#space#ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64
    var ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64 = rv#space#ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64
    var ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64 = rv#space#ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64
}
6 Call 5 Kernel_C.capTransferFromWords((buffer___ptr_to_unsigned_long#v : Word 64) + (WordCastSigned(offset___int#v : Word 32) * 8), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64, rv#space#ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64, rv#space#ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64)
7 Cond 6 Err ((offset___int#v : Word 32) == 0) || (((offset___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Word 64, (buffer___ptr_to_unsigned_long#v : Word 64) + (WordCastSigned(offset___int#v : Word 32) * 8), WordCast(0 - (offset___int#v : Word 32)))) || (!((offset___int#v : Word 32) == 0) && !((offset___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Word 64, buffer___ptr_to_unsigned_long#v : Word 64, WordCast(offset___int#v : Word 32)))
8 Basic 7 {
    var offset___int#v : Word 32 = WordCast(WordCastSigned(120) + 1 << WordCast(2) - WordCastSigned(1) + WordCastSigned(2))
}
9 Cond 8 Err (0 <=s 2) && (2 <s 64)
EntryPoint 9

Function Kernel_C.lookupExtraCaps(thread___ptr_to_struct_tcb_C#v : Word 64, bufferPtr___ptr_to_unsigned_long#v : Word 64, info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_extra_caps : Word 64) + 0 + (8 * (i___unsigned_long#v : Word 64)), WordCastSigned(0))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
6 Cond 5 Err (i___unsigned_long#v : Word 64) < WordCastSigned(3)
7 Cond 6 3 (i___unsigned_long#v : Word 64) < (1 << WordCast(2) - WordCastSigned(1))
8 Cond 7 Err (0 <=s 2) && (2 <s 64)
13 Basic 9 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
14 Basic 13 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_extra_caps : Word 64) + 0 + (8 * (i___unsigned_long#v : Word 64)), lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64)
}
15 Cond 14 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
16 Cond 15 Err (i___unsigned_long#v : Word 64) < WordCastSigned(3)
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64
}
18 Basic 17 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
20 Call 19 Kernel_C.seL4_Fault_CapFault_new(WordCast(cptr___unsigned_long#v : Word 64), WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
21 Cond 20 16 !((lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64) == WordCastSigned(0))
22 Basic 21 {
    var lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64
}
23 Call 22 Kernel_C.lookupSlot(thread___ptr_to_struct_tcb_C#v : Word 64, cptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Basic 23 {
    var cptr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
25 Call 24 Kernel_C.getExtraCPtr(bufferPtr___ptr_to_unsigned_long#v : Word 64, i___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 10 {
    var loop#9#count : Word 64 = (loop#9#count : Word 64) + 1
}
10 Cond 11 Err true
11 Cond 25 8 (i___unsigned_long#v : Word 64) < (length___unsigned_long#v : Word 64)
12 Basic 10 {
    var loop#9#count : Word 64 = 0
}
26 Basic 12 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
27 Basic 26 {
    var length___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.seL4_MessageInfo_get_extraCaps(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
31 Basic 30 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_extra_caps : Word 64) + 0 + (8 * WordCast(0)), WordCastSigned(0))
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
33 Cond 32 Err (0 <s 3) && (0 <=s 0)
34 Cond 33 29 !(!((bufferPtr___ptr_to_unsigned_long#v : Word 64) == 0))
EntryPoint 34

Function Kernel_C.lookupIPCBuffer(isReceiver___unsigned_long#v : Word 64, thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_unsigned_long#v : Word 64 = (basePtr___unsigned_long#v : Word 64) + (w_bufferPtr___unsigned_long#v : Word 64) & (1 << (pageBits___unsigned_long#v : Word 64) - 1)
}
4 Cond 3 Err (pageBits___unsigned_long#v : Word 64) < WordCastSigned(64)
5 Basic 4 {
    var pageBits___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.pageBitsForSize(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_frame_cap_get_capFSize(bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 8 {
    var basePtr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_frame_cap_get_capFBasePtr(bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Basic 1 {
    var ret__ptr_to_unsigned_long#v : Word 64 = WordCastSigned(0)
}
13 Cond 11 12 !(!(((vm_rights___unsigned_long#v : Word 64) == WordCastSigned(3)) || (!(!((isReceiver___unsigned_long#v : Word 64) == 0)) && ((vm_rights___unsigned_long#v : Word 64) == WordCastSigned(2)))))
14 Basic 13 {
    var vm_rights___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_frame_cap_get_capFVMRights(bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 1 {
    var ret__ptr_to_unsigned_long#v : Word 64 = WordCastSigned(0)
}
18 Cond 17 16 !(!(!((ret__unsigned_longlong#v : Word 64) == 0)))
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.cap_frame_cap_get_capFIsDevice(bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
21 Basic 1 {
    var ret__ptr_to_unsigned_long#v : Word 64 = WordCastSigned(0)
}
22 Cond 21 20 !(!(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1))))
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.cap_get_capType(bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Basic 24 {
    var bufferCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (4 * 32) + 0 + (8 * 0))
    var bufferCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (4 * 32) + 0 + (8 * 1))
}
26 Cond 25 Err (4 == 0) || ((4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (4 * 32), WordCast(0 - 4))) || (!(4 == 0) && !(4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(4))) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (4 * 32)) && (0 <=s 10) && (10 <s 64) && (4 == 0) || ((4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (4 * 32), WordCast(0 - 4))) || (!(4 == 0) && !(4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(4)))
27 Basic 26 {
    var w_bufferPtr___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 384)
}
28 Cond 27 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 28

Function Kernel_C.lookupPivotSlot(root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupSlot_ret_C#v.status_C : Word 64, ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
5 Call 4 Kernel_C.lookupSlotForCNodeOp(WordCastSigned(1), root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.ntfn_set_active(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.notification_ptr_set_ntfnMsgIdentifier(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCast(badge___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.notification_ptr_set_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 3

Function Kernel_C.pageBitsForSize(pagesize___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(12)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(21)
}
5 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(30)
}
6 Cond 2 Err false
7 Call 6 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
8 Cond 7 Err false
9 Cond 8 2 true
10 Cond 5 9 ((pagesize___unsigned_long#v : Word 64) == WordCastSigned(2)) || false
11 Cond 4 10 ((pagesize___unsigned_long#v : Word 64) == WordCastSigned(1)) || false
12 Cond 3 11 ((pagesize___unsigned_long#v : Word 64) == WordCastSigned(0)) || false
EntryPoint 12

Function Kernel_C.postCapDeletion(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.deletedIRQHandler(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var irq___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
4 Basic 3 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.cap_irq_handler_cap_get_capIRQ(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Call 1 Kernel_C.Arch_postCapDeletion(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates ()
7 Cond 6 1 !((ret__unsigned_long#v : Word 64) == 0)
8 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.isArchCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Cond 5 9 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(16)
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 12

Function Kernel_C.preemptionPoint(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(4)
}
5 Cond 4 3 !((ret__unsigned_long#v : Word 64) == 0)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.isIRQPending(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksWorkUnitsCompleted : Word 64, WordCastSigned(0))
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Word 64, ksWorkUnitsCompleted : Word 64)
10 Cond 9 3 WordCastSigned(100) <= (Mem : Mem) -MemAcc-> (ksWorkUnitsCompleted : Word 64)
11 Cond 10 Err PGlobalValid(HTD : HTD, Word 64, ksWorkUnitsCompleted : Word 64)
12 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksWorkUnitsCompleted : Word 64, (Mem : Mem) -MemAcc-> (ksWorkUnitsCompleted : Word 64) + WordCastSigned(1))
}
13 Cond 12 Err PGlobalValid(HTD : HTD, Word 64, ksWorkUnitsCompleted : Word 64)
EntryPoint 13

Function Kernel_C.prio_to_l1index(prio___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (prio___unsigned_long#v : Word 64) >> WordCast(6)
}
4 Cond 3 Err (0 <=s 6) && (6 <s 64)
EntryPoint 4

Function Kernel_C.pte_ptr_get_ppn(pte_ptr___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((pte_ptr___ptr_to_struct_pte_C#v : Word 64) + (8 * 0)) & 18014398509480960 >> WordCast(10)
}
11 Cond 10 Err (0 <=s 10) && (10 <s 64) && (0 <s 1) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.pte_C, pte_ptr___ptr_to_struct_pte_C#v : Word 64)
EntryPoint 11

Function Kernel_C.resetUntypedCap(srcSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
6 Basic 5 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_untyped_cap_set_capFreeIndex(prev_cap___struct_cap_C#v.words_C.0 : Word 64, prev_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Call 7 Kernel_C.clearMemory(regionBase___ptr_to_void#v : Word 64, WordCast(block_size___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 7 !(!((deviceMemory___unsigned_long#v : Word 64) == 0))
14 Cond 10 Err (0 <=s (chunk___int#v : Word 32)) && ((chunk___int#v : Word 32) <s 64)
15 Basic 14 {
    var offset___unsigned_long#v : Word 64 = (offset___unsigned_long#v : Word 64) - 1 << WordCast(chunk___int#v : Word 32)
}
16 Cond 15 Err (0 <=s (chunk___int#v : Word 32)) && ((chunk___int#v : Word 32) <s 64)
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
18 Cond 17 16 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
19 Basic 18 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
20 Call 19 Kernel_C.preemptionPoint(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Basic 20 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
22 Cond 21 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
23 Basic 22 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
24 Call 23 Kernel_C.cap_untyped_cap_set_capFreeIndex(prev_cap___struct_cap_C#v.words_C.0 : Word 64, prev_cap___struct_cap_C#v.words_C.1 : Word 64, WordCast((offset___unsigned_long#v : Word 64) >> WordCast(4))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
25 Cond 24 Err (0 <=s 4) && (4 <s 64)
26 Call 25 Kernel_C.clearMemory((regionBase___ptr_to_void#v : Word 64) + (offset___unsigned_long#v : Word 64), WordCastSigned(chunk___int#v : Word 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Basic 11 {
    var loop#10#count : Word 64 = (loop#10#count : Word 64) + 1
}
11 Cond 12 Err true
12 Cond 26 3 !((offset___unsigned_long#v : Word 64) == (0 - 1 << WordCast(chunk___int#v : Word 32)))
13 Basic 11 {
    var loop#10#count : Word 64 = 0
}
27 Cond 13 Err (0 <=s (chunk___int#v : Word 32)) && ((chunk___int#v : Word 32) <s 64)
28 Basic 27 {
    var offset___unsigned_long#v : Word 64 = ((offset___unsigned_long#v : Word 64) - WordCastSigned(1)) >> WordCast(chunk___int#v : Word 32) << WordCast(chunk___int#v : Word 32)
}
29 Cond 28 Err (0 <=s (chunk___int#v : Word 32)) && ((chunk___int#v : Word 32) <s 64) && (0 <=s (chunk___int#v : Word 32)) && ((chunk___int#v : Word 32) <s 64)
30 Cond 9 29 !((deviceMemory___unsigned_long#v : Word 64) == 0) || ((block_size___unsigned_long#v : Word 64) < WordCastSigned(chunk___int#v : Word 32))
31 Basic 30 { }
32 Cond 31 Err true
33 Basic 32 {
    var HTD : HTD = HTDUpdate(Word 64, 2, regionBase___ptr_to_void#v : Word 64, block_size___unsigned_long#v : Word 64, HTD : HTD)
}
34 Cond 33 Err true && true && true
35 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
36 Cond 35 34 (offset___unsigned_long#v : Word 64) == WordCastSigned(0)
37 Basic 36 {
    var deviceMemory___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
38 Basic 37 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
39 Call 38 Kernel_C.cap_untyped_cap_get_capIsDevice(prev_cap___struct_cap_C#v.words_C.0 : Word 64, prev_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
40 Basic 39 {
    var offset___unsigned_long#v : Word 64 = WordCast((ret__unsigned_longlong#v : Word 64) << WordCast(4))
}
41 Cond 40 Err (0 <=s 4) && (4 <s 64)
42 Basic 41 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
43 Call 42 Kernel_C.cap_untyped_cap_get_capFreeIndex(prev_cap___struct_cap_C#v.words_C.0 : Word 64, prev_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
44 Basic 43 {
    var chunk___int#v : Word 32 = 8
}
45 Basic 44 {
    var regionBase___ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
46 Basic 45 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
47 Call 46 Kernel_C.cap_untyped_cap_get_capPtr(prev_cap___struct_cap_C#v.words_C.0 : Word 64, prev_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
48 Basic 47 {
    var block_size___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
49 Basic 48 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
50 Call 49 Kernel_C.cap_untyped_cap_get_capBlockSize(prev_cap___struct_cap_C#v.words_C.0 : Word 64, prev_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
51 Basic 50 {
    var prev_cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var prev_cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
52 Cond 51 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 52

Function Kernel_C.riscv_read_time(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = n___unsigned_longlong#v : Word 64
}
4 Call 3 asm_instruction'rdtime_%0(Mem : Mem, PMS : PMS) -- updates (n___unsigned_longlong#v : Word 64, Mem : Mem, PMS : PMS)
EntryPoint 4

Function Kernel_C.tcbSchedDequeue(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.thread_state_ptr_set_tcbQueued((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 0, queue___struct_tcb_queue_C#v.head_C : Word 64), (ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 8, queue___struct_tcb_queue_C#v.end_C : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.tcb_queue_C) 4096, ksReadyQueues : Word 64)
6 Cond 5 Err (idx___unsigned_long#v : Word 64) < WordCastSigned(4096)
7 Basic 6 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 392) + 400, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 400))
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 392)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
9 Basic 6 {
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 400)
}
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
11 Cond 8 10 !((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 392) == 0)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 400) + 392, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 392))
}
14 Cond 13 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 400)) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
15 Call 12 Kernel_C.removeFromBitmap(WordCastSigned(0), dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 12 !(!(!(!((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 392) == 0))))
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
18 Basic 17 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 392)
}
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
20 Cond 14 19 !((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 400) == 0)
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
22 Basic 21 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = (Mem : Mem) -MemAcc-> ((ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 0)
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 8)
}
23 Cond 22 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.tcb_queue_C) 4096, ksReadyQueues : Word 64)
24 Cond 23 Err (idx___unsigned_long#v : Word 64) < WordCastSigned(4096)
25 Basic 24 {
    var idx___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
26 Call 25 Kernel_C.ready_queues_index(dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
27 Basic 26 {
    var prio___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 360)
}
28 Cond 27 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
29 Basic 28 {
    var dom___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 344)
}
30 Cond 29 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
31 Cond 30 1 !((ret__unsigned_longlong#v : Word 64) == 0)
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.thread_state_get_tcbQueued((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Cond 33 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 34

Function Kernel_C.tcbSchedEnqueue(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.thread_state_ptr_set_tcbQueued((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 0, queue___struct_tcb_queue_C#v.head_C : Word 64), (ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 8, queue___struct_tcb_queue_C#v.end_C : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.tcb_queue_C) 4096, ksReadyQueues : Word 64)
6 Cond 5 Err (idx___unsigned_long#v : Word 64) < WordCastSigned(4096)
7 Basic 6 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = tcb___ptr_to_struct_tcb_C#v : Word 64
}
8 Basic 7 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 392, queue___struct_tcb_queue_C#v.head_C : Word 64)
}
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 400, WordCastSigned(0))
}
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
12 Call 11 Kernel_C.addToBitmap(WordCastSigned(0), dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Basic 12 {
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = tcb___ptr_to_struct_tcb_C#v : Word 64
}
14 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, (queue___struct_tcb_queue_C#v.head_C : Word 64) + 400, tcb___ptr_to_struct_tcb_C#v : Word 64)
}
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, queue___struct_tcb_queue_C#v.head_C : Word 64)
16 Cond 13 15 !(!((queue___struct_tcb_queue_C#v.end_C : Word 64) == 0))
17 Basic 16 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = (Mem : Mem) -MemAcc-> ((ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 0)
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((ksReadyQueues : Word 64) + (16 * (idx___unsigned_long#v : Word 64)) + 8)
}
18 Cond 17 Err PGlobalValid(HTD : HTD, Array (Struct Kernel_C.tcb_queue_C) 4096, ksReadyQueues : Word 64)
19 Cond 18 Err (idx___unsigned_long#v : Word 64) < WordCastSigned(4096)
20 Basic 19 {
    var idx___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.ready_queues_index(dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Basic 21 {
    var prio___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 360)
}
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
24 Basic 23 {
    var dom___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 344)
}
25 Cond 24 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
26 Cond 25 1 !(!((ret__unsigned_longlong#v : Word 64) == 0))
27 Basic 26 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
28 Call 27 Kernel_C.thread_state_get_tcbQueued((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
29 Cond 28 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 29

Function Kernel_C.try_init_kernel(ui_p_reg_start___unsigned_long#v : Word 64, ui_p_reg_end___unsigned_long#v : Word 64, pv_offset___unsigned#v : Word 32, v_entry___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksNumCPUs : Word 64, WordCastSigned(1))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Word 64, ksNumCPUs : Word 64)
6 Call 5 Kernel_C.bi_finalise(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Basic 6 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 56 + 0, WordCastSigned(0)), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 56 + 8, WordCastSigned(0))
}
8 Cond 7 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584))
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
12 Cond 11 10 !(!((ret__unsigned_long#v : Word 64) == 0))
13 Basic 12 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.create_untypeds(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, boot_mem_reuse_reg___struct_region_C#v.start_C : Word 64, boot_mem_reuse_reg___struct_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Call 14 Kernel_C.init_core_state(initial___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
17 Cond 16 15 (initial___ptr_to_struct_tcb_C#v : Word 64) == WordCastSigned(0)
18 Basic 17 {
    var initial___ptr_to_struct_tcb_C#v : Word 64 = rv#space#ret__ptr_to_struct_tcb_C#v : Word 64
}
19 Call 18 Kernel_C.create_initial_thread(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, v_entry___unsigned_long#v : Word 64, bi_frame_vptr___unsigned_long#v : Word 64, ipcbuf_vptr___unsigned_long#v : Word 64, ipcbuf_cap___struct_cap_C#v.words_C.0 : Word 64, ipcbuf_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
21 Cond 20 19 !(!((ret__unsigned_long#v : Word 64) == 0))
22 Basic 21 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
23 Call 22 Kernel_C.create_idle_thread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Call 23 Kernel_C.write_it_asid_pool(it_ap_cap___struct_cap_C#v.words_C.0 : Word 64, it_ap_cap___struct_cap_C#v.words_C.1 : Word 64, it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
26 Cond 25 24 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
27 Basic 26 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
28 Call 27 Kernel_C.cap_get_capType(it_ap_cap___struct_cap_C#v.words_C.0 : Word 64, it_ap_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
29 Basic 28 {
    var it_ap_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var it_ap_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
30 Call 29 Kernel_C.create_it_asid_pool(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
31 Basic 30 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 72 + 0, create_frames_ret___struct_create_frames_of_region_ret_C#v.region_C.start_C : Word 64), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 72 + 8, create_frames_ret___struct_create_frames_of_region_ret_C#v.region_C.end_C : Word 64)
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
33 Cond 32 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584))
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
35 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
36 Cond 35 34 !(!((create_frames_ret___struct_create_frames_of_region_ret_C#v.success_C : Word 64) == 0))
37 Basic 36 {
    var create_frames_ret___struct_create_frames_of_region_ret_C#v.region_C.start_C : Word 64 = rv#space#ret__struct_create_frames_of_region_ret_C#v.region_C.start_C : Word 64
    var create_frames_ret___struct_create_frames_of_region_ret_C#v.region_C.end_C : Word 64 = rv#space#ret__struct_create_frames_of_region_ret_C#v.region_C.end_C : Word 64
    var create_frames_ret___struct_create_frames_of_region_ret_C#v.success_C : Word 64 = rv#space#ret__struct_create_frames_of_region_ret_C#v.success_C : Word 64
}
38 Call 37 Kernel_C.create_frames_of_region(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, ui_reg___struct_region_C#v.start_C : Word 64, ui_reg___struct_region_C#v.end_C : Word 64, WordCastSigned(1), WordCast(pv_offset___unsigned#v : Word 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_create_frames_of_region_ret_C#v.region_C.start_C : Word 64, rv#space#ret__struct_create_frames_of_region_ret_C#v.region_C.end_C : Word 64, rv#space#ret__struct_create_frames_of_region_ret_C#v.success_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
39 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
40 Cond 39 38 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_get_capType(ipcbuf_cap___struct_cap_C#v.words_C.0 : Word 64, ipcbuf_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
43 Basic 42 {
    var ipcbuf_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ipcbuf_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
44 Call 43 Kernel_C.create_ipcbuf_frame_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, ipcbuf_vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
45 Call 44 Kernel_C.create_bi_frame_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, bi_frame_vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
46 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
47 Cond 46 45 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
48 Basic 47 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
49 Call 48 Kernel_C.cap_get_capType(it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
50 Basic 49 {
    var it_pd_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var it_pd_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
51 Call 50 Kernel_C.create_it_address_space(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
52 Call 51 Kernel_C.populate_bi_frame(WordCastSigned(0), WordCastSigned(1), ipcbuf_vptr___unsigned_long#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
53 Call 52 Kernel_C.init_irqs(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
54 Call 53 Kernel_C.create_domain_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
55 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
56 Cond 55 54 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
57 Basic 56 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
58 Call 57 Kernel_C.cap_get_capType(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
59 Basic 58 {
    var root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
60 Call 59 Kernel_C.create_root_cnode(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
61 Call 60 Kernel_C.arch_init_freemem(ui_reg___struct_region_C#v.start_C : Word 64, ui_reg___struct_region_C#v.end_C : Word 64, it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
62 Call 61 Kernel_C.init_plat(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
63 Call 62 Kernel_C.init_cpu(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
64 Call 63 Kernel_C.map_kernel_window(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
65 Basic 64 {
    var it_v_reg___struct_v_region_C#v.end_C : Word 64 = (bi_frame_vptr___unsigned_long#v : Word 64) + 1 << WordCast(12)
}
66 Cond 65 Err (0 <=s 12) && (12 <s 64)
67 Basic 66 {
    var it_v_reg___struct_v_region_C#v.start_C : Word 64 = ui_v_reg___struct_v_region_C#v.start_C : Word 64
}
68 Basic 67 {
    var bi_frame_vptr___unsigned_long#v : Word 64 = (ipcbuf_vptr___unsigned_long#v : Word 64) + 1 << WordCast(12)
}
69 Cond 68 Err (0 <=s 12) && (12 <s 64)
70 Basic 69 {
    var ipcbuf_vptr___unsigned_long#v : Word 64 = ui_v_reg___struct_v_region_C#v.end_C : Word 64
}
71 Basic 70 {
    var ui_v_reg___struct_v_region_C#v.end_C : Word 64 = (ui_p_reg_end___unsigned_long#v : Word 64) - WordCast(pv_offset___unsigned#v : Word 32)
}
72 Basic 71 {
    var ui_v_reg___struct_v_region_C#v.start_C : Word 64 = (ui_p_reg_start___unsigned_long#v : Word 64) - WordCast(pv_offset___unsigned#v : Word 32)
}
73 Basic 72 {
    var ui_reg___struct_region_C#v.start_C : Word 64 = rv#space#ret__struct_region_C#v.start_C : Word 64
    var ui_reg___struct_region_C#v.end_C : Word 64 = rv#space#ret__struct_region_C#v.end_C : Word 64
}
74 Call 73 Kernel_C.paddr_to_pptr_reg(ui_p_reg_start___unsigned_long#v : Word 64, ui_p_reg_end___unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_region_C#v.start_C : Word 64, rv#space#ret__struct_region_C#v.end_C : Word 64)
75 Basic 74 {
    var boot_mem_reuse_reg___struct_region_C#v.start_C : Word 64 = rv#space#ret__struct_region_C#v.start_C : Word 64
    var boot_mem_reuse_reg___struct_region_C#v.end_C : Word 64 = rv#space#ret__struct_region_C#v.end_C : Word 64
}
76 Call 75 Kernel_C.paddr_to_pptr_reg(boot_mem_reuse_p_reg___struct_p_region_C#v.start_C : Word 64, boot_mem_reuse_p_reg___struct_p_region_C#v.end_C : Word 64) -- updates (rv#space#ret__struct_region_C#v.start_C : Word 64, rv#space#ret__struct_region_C#v.end_C : Word 64)
77 Basic 76 {
    var boot_mem_reuse_p_reg___struct_p_region_C#v.start_C : Word 64 = ret__unsigned_long#v : Word 64
    var boot_mem_reuse_p_reg___struct_p_region_C#v.end_C : Word 64 = unsigned_long_eret_2#v : Word 64
}
78 Basic 77 {
    var unsigned_long_eret_2#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
79 Call 78 Kernel_C.kpptr_to_paddr(ki_boot_end : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
80 Cond 79 Err PValid(HTD : HTD, Array (Word 8) 1, ki_boot_end : Word 64)
81 Basic 80 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
82 Call 81 Kernel_C.kpptr_to_paddr(-2147483648 + (WordCast(2147483648) + 67108864) & (1 << WordCast(30) - 1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
83 Cond 82 Err (0 <=s 30) && (30 <s 64)
EntryPoint 83

Function Kernel_C.updateRestartPC(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(33), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.getRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(34), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 4

Function Kernel_C.write_it_pd_pts(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.Arch_finaliseCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, final___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64, ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64, ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64, ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64
    var ret__struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64
}
4 Basic 3 {
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.cleanupInfo_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Basic 4 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var fc_ret___struct_finaliseCap_ret_C#v.remainder_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Basic 7 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Call 9 Kernel_C.unmapPage(WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), WordCast(unsigned_longlong_eret_3#v : Word 64), WordCast(unsigned_longlong_eret_4#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Basic 10 {
    var unsigned_longlong_eret_4#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.cap_frame_cap_get_capFBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Basic 12 {
    var unsigned_longlong_eret_3#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_frame_cap_get_capFMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 14 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_frame_cap_get_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.cap_frame_cap_get_capFSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Cond 18 9 !((ret__unsigned_longlong#v : Word 64) == 0)
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_frame_cap_get_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Call 9 Kernel_C.deleteASID(asid___unsigned_long#v : Word 64, pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Call 9 Kernel_C.unmapPageTable(asid___unsigned_long#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.cap_page_table_cap_get_capPTMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Cond 22 25 ((find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64) == WordCastSigned(0)) && ((find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64) == (pte___ptr_to_struct_pte_C#v : Word 64))
27 Basic 26 {
    var pte___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Basic 29 {
    var find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
31 Call 30 Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Basic 31 {
    var asid___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
33 Basic 32 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
34 Call 33 Kernel_C.cap_page_table_cap_get_capPTMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
35 Cond 34 9 !((ret__int#v : Word 32) == 0)
36 Basic 35 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
37 Basic 36 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.cap_page_table_cap_get_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Cond 38 35 !((ret__int#v : Word 32) == 0)
40 Basic 39 {
    var ret__int#v : Word 32 = IfThenElse(!((final___unsigned_long#v : Word 64) == 0), 1, 0)
}
41 Call 9 Kernel_C.deleteASIDPool(WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
42 Basic 41 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
43 Call 42 Kernel_C.cap_asid_pool_cap_get_capASIDPool(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
44 Basic 43 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
45 Call 44 Kernel_C.cap_asid_pool_cap_get_capASIDBase(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
46 Cond 45 9 !((final___unsigned_long#v : Word 64) == 0)
47 Cond 9 9 true
48 Cond 9 47 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(11)) || false
49 Cond 46 48 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(13)) || false
50 Cond 40 49 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || false
51 Cond 21 50 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
52 Basic 51 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
53 Call 52 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 53

Function Kernel_C.Arch_initContext(context___ptr_to_struct_user_context_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (context___ptr_to_struct_user_context_C#v : Word 64) + (8 * WordCast(32)), WordCastSigned(32))
}
3 Cond 2 Err (32 <s 35) && (0 <=s 32) && PValid(HTD : HTD, Struct Kernel_C.user_context_C, context___ptr_to_struct_user_context_C#v : Word 64)
EntryPoint 3

Function Kernel_C.Arch_isFrameType(type___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
5 Cond 4 2 true
6 Cond 3 5 ((type___unsigned_long#v : Word 64) == WordCastSigned(6)) || ((type___unsigned_long#v : Word 64) == WordCastSigned(7)) || ((type___unsigned_long#v : Word 64) == WordCastSigned(5)) || false
EntryPoint 6

Function Kernel_C.StrictC'__clzdi2(x___unsigned_longlong#v : Word 64) -- updates: (ret__unsigned#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned#v : Word 32 = count___unsigned#v : Word 32
}
8 Basic 4 {
    var count___unsigned#v : Word 32 = (count___unsigned#v : Word 32) + WordCastSigned(1)
}
9 Basic 8 {
    var x___unsigned_longlong#v : Word 64 = (x___unsigned_longlong#v : Word 64) << WordCast(1)
}
10 Cond 9 Err (0 <=s 1) && (1 <s 64)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 10 3 !(!((x___unsigned_longlong#v : Word 64) & WordCast(-9223372036854775808) == 0)) && ((count___unsigned#v : Word 32) < WordCastSigned(65))
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
11 Basic 7 {
    var count___unsigned#v : Word 32 = WordCastSigned(0)
}
EntryPoint 11

Function Kernel_C.StrictC'__clzsi2(x___unsigned#v : Word 32) -- updates: (ret__unsigned#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned#v : Word 32 = count___unsigned#v : Word 32
}
8 Basic 4 {
    var count___unsigned#v : Word 32 = (count___unsigned#v : Word 32) + WordCastSigned(1)
}
9 Basic 8 {
    var x___unsigned#v : Word 32 = (x___unsigned#v : Word 32) << WordCast(1)
}
10 Cond 9 Err (0 <=s 1) && (1 <s 32)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 10 3 !(!((x___unsigned#v : Word 32) & 2147483648 == 0)) && ((count___unsigned#v : Word 32) < WordCastSigned(34))
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
11 Basic 7 {
    var count___unsigned#v : Word 32 = WordCastSigned(0)
}
EntryPoint 11

Function Kernel_C.StrictC'__ctzdi2(x___unsigned_longlong#v : Word 64) -- updates: (ret__unsigned#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned#v : Word 32 = count___unsigned#v : Word 32
}
8 Basic 4 {
    var count___unsigned#v : Word 32 = (count___unsigned#v : Word 32) + WordCastSigned(1)
}
9 Basic 8 {
    var x___unsigned_longlong#v : Word 64 = (x___unsigned_longlong#v : Word 64) >> WordCast(1)
}
10 Cond 9 Err (0 <=s 1) && (1 <s 64)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 10 3 !(!((x___unsigned_longlong#v : Word 64) & WordCastSigned(1) == 0)) && ((count___unsigned#v : Word 32) <= WordCastSigned(64))
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
11 Basic 7 {
    var count___unsigned#v : Word 32 = WordCastSigned(0)
}
EntryPoint 11

Function Kernel_C.StrictC'__ctzsi2(x___unsigned#v : Word 32) -- updates: (ret__unsigned#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned#v : Word 32 = count___unsigned#v : Word 32
}
8 Basic 4 {
    var count___unsigned#v : Word 32 = (count___unsigned#v : Word 32) + WordCastSigned(1)
}
9 Basic 8 {
    var x___unsigned#v : Word 32 = (x___unsigned#v : Word 32) >> WordCast(1)
}
10 Cond 9 Err (0 <=s 1) && (1 <s 32)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 10 3 !(!((x___unsigned#v : Word 32) & WordCastSigned(1) == 0)) && ((count___unsigned#v : Word 32) <= WordCastSigned(32))
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
11 Basic 7 {
    var count___unsigned#v : Word 32 = WordCastSigned(0)
}
EntryPoint 11

Function Kernel_C.arch_c_exit_hook() -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.bindNotification(tcb___ptr_to_struct_tcb_C#v : Word 64, ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 304, ntfnPtr___ptr_to_struct_notification_C#v : Word 64)
}
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
4 Call 3 Kernel_C.notification_ptr_set_ntfnBoundTCB(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCast(tcb___ptr_to_struct_tcb_C#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.c_handle_syscall(cptr___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, unused1___unsigned_long#v : Word 64, unused2___unsigned_long#v : Word 64, unused3___unsigned_long#v : Word 64, unused4___unsigned_long#v : Word 64, reply___unsigned_long#v : Word 64, syscall___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.StrictC'__builtin_unreachable(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
3 Call 2 Kernel_C.slowpath(syscall___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.StrictC'__builtin_unreachable(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
5 Call 4 Kernel_C.fastpath_call(cptr___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 3 Kernel_C.StrictC'__builtin_unreachable(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
7 Call 6 Kernel_C.fastpath_reply_recv(cptr___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 7 3 (syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 2)
9 Cond 5 8 (syscall___unsigned_long#v : Word 64) == WordCastSigned(0 - 1)
10 Call 9 Kernel_C.c_entry_hook() -- updates ()
11 Basic 12 {
    var loop#11#count : Word 64 = (loop#11#count : Word 64) + 1
}
12 Cond 13 Err true
13 Cond 11 10 !(0 == 0)
14 Basic 12 {
    var loop#11#count : Word 64 = 0
}
EntryPoint 14

Function Kernel_C.cancelAllSignals(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Basic 3 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 408)
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
9 Call 8 Kernel_C.tcbSchedEnqueue(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Call 9 Kernel_C.setThreadState(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 4 {
    var loop#3#count : Word 64 = (loop#3#count : Word 64) + 1
}
4 Cond 5 Err true
5 Cond 10 2 !((thread___ptr_to_struct_tcb_C#v : Word 64) == 0)
6 Basic 4 {
    var loop#3#count : Word 64 = 0
}
11 Call 6 Kernel_C.notification_ptr_set_ntfnQueue_tail(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Call 11 Kernel_C.notification_ptr_set_ntfnQueue_head(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Call 12 Kernel_C.notification_ptr_set_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Basic 13 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.notification_ptr_get_ntfnQueue_head(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Cond 16 1 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.notification_ptr_get_state(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 19

Function Kernel_C.capSwapForDelete(slot1___ptr_to_struct_cte_C#v : Word 64, slot2___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.cteSwap(cap1___struct_cap_C#v.words_C.0 : Word 64, cap1___struct_cap_C#v.words_C.1 : Word 64, slot1___ptr_to_struct_cte_C#v : Word 64, cap2___struct_cap_C#v.words_C.0 : Word 64, cap2___struct_cap_C#v.words_C.1 : Word 64, slot2___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var cap2___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot2___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var cap2___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot2___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot2___ptr_to_struct_cte_C#v : Word 64)
5 Basic 4 {
    var cap1___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot1___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var cap1___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot1___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot1___ptr_to_struct_cte_C#v : Word 64)
7 Cond 1 6 (slot1___ptr_to_struct_cte_C#v : Word 64) == (slot2___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 7

Function Kernel_C.cap_null_cap_new() -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(0) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.checkVPAlignment(sz___unsigned_long#v : Word 64, w___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((w___unsigned_long#v : Word 64) & (1 << (ret__unsigned_long#v : Word 64) - 1) == WordCastSigned(0), 1, 0))
}
4 Cond 3 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(64)
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.pageBitsForSize(sz___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 6

Function Kernel_C.createNewObjects(t___unsigned_long#v : Word 64, parent___ptr_to_struct_cte_C#v : Word 64, destCNode___ptr_to_struct_cte_C#v : Word 64, destOffset___unsigned_long#v : Word 64, destLength___unsigned_long#v : Word 64, regionBase___ptr_to_void#v : Word 64, userSize___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
7 Cond 6 Err (((destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64)) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, destCNode___ptr_to_struct_cte_C#v : Word 64, (destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64))
8 Call 7 Kernel_C.insertNewCap(parent___ptr_to_struct_cte_C#v : Word 64, (destCNode___ptr_to_struct_cte_C#v : Word 64) + ((destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64) * 32), cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 Err (((destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64)) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, destCNode___ptr_to_struct_cte_C#v : Word 64, (destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64)) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (destCNode___ptr_to_struct_cte_C#v : Word 64) + ((destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64) * 32)) && (((destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64)) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, destCNode___ptr_to_struct_cte_C#v : Word 64, (destOffset___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64))
10 Basic 9 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
11 Call 10 Kernel_C.createObject(t___unsigned_long#v : Word 64, (nextFreeArea___ptr_to_void#v : Word 64) + (i___unsigned_long#v : Word 64) << (objectSize___unsigned_long#v : Word 64), userSize___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 11 Err (objectSize___unsigned_long#v : Word 64) < WordCastSigned(64)
13 Basic 12 {
    var HTD : HTD = HTDUpdate(Word 64, 2, (nextFreeArea___ptr_to_void#v : Word 64) + (i___unsigned_long#v : Word 64) << (objectSize___unsigned_long#v : Word 64), objectSize___unsigned_long#v : Word 64, HTD : HTD)
}
14 Cond 13 Err true && true && true
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 14 1 (i___unsigned_long#v : Word 64) < (destLength___unsigned_long#v : Word 64)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
15 Basic 5 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
16 Basic 15 {
    var nextFreeArea___ptr_to_void#v : Word 64 = regionBase___ptr_to_void#v : Word 64
}
17 Basic 16 { }
18 Cond 17 Err ((GhostAssertions : WordArray 50 64) -WordArrayAccess-> 280 == 0) || ((totalObjectSize___unsigned_long#v : Word 64) <= (GhostAssertions : WordArray 50 64) -WordArrayAccess-> 280)
19 Basic 18 {
    var totalObjectSize___unsigned_long#v : Word 64 = (destLength___unsigned_long#v : Word 64) << (objectSize___unsigned_long#v : Word 64)
}
20 Cond 19 Err (objectSize___unsigned_long#v : Word 64) < WordCastSigned(64)
21 Basic 20 {
    var objectSize___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
22 Call 21 Kernel_C.getObjectSize(t___unsigned_long#v : Word 64, userSize___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 22

Function Kernel_C.create_it_pd_pts(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, ui_v_reg___struct_v_region_C#v.start_C : Word 64, ui_v_reg___struct_v_region_C#v.end_C : Word 64, ipcbuf_vptr___unsigned_long#v : Word 64, bi_frame_vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.create_it_pt_cap(vspace_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_cap___struct_cap_C#v.words_C.1 : Word 64, pptr___unsigned_long#v : Word 64, vptr___unsigned_long#v : Word 64, asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Call 3 Kernel_C.map_it_pt_cap(vspace_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_cap___struct_cap_C#v.words_C.1 : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_page_table_cap_new(WordCast(asid___unsigned_long#v : Word 64), WordCast(pptr___unsigned_long#v : Word 64), WordCastSigned(1), WordCast(vptr___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
EntryPoint 6

Function Kernel_C.decodeInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, capIndex___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, block___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
11 Basic 10 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
12 Cond 11 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
13 Basic 1 { }
14 Basic 13 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
15 Call 14 Kernel_C.performInvocation_Endpoint(WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), WordCast(unsigned_longlong_eret_3#v : Word 64), WordCast(unsigned_longlong_eret_4#v : Word 64), block___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Basic 15 {
    var unsigned_longlong_eret_4#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_endpoint_cap_get_capCanGrantReply(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
18 Basic 17 {
    var unsigned_longlong_eret_3#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.cap_endpoint_cap_get_capCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Basic 19 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_endpoint_cap_get_capEPBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Call 23 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Cond 24 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
26 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
27 Basic 26 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
29 Basic 28 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
31 Cond 30 25 !(!(!(!((ret__unsigned_longlong#v : Word 64) == 0))))
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.cap_endpoint_cap_get_capCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Basic 1 { }
35 Basic 34 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
36 Call 35 Kernel_C.performInvocation_Notification(WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
37 Basic 36 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.cap_notification_cap_get_capNtfnBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Basic 38 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
40 Call 39 Kernel_C.cap_notification_cap_get_capNtfnPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
41 Call 40 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
42 Cond 41 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
43 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
44 Basic 43 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
45 Cond 44 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
46 Basic 45 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
47 Cond 46 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
48 Cond 47 42 !(!(!(!((ret__unsigned_longlong#v : Word 64) == 0))))
49 Basic 48 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
50 Call 49 Kernel_C.cap_notification_cap_get_capNtfnCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
51 Basic 1 { }
52 Basic 51 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
53 Call 52 Kernel_C.performInvocation_Reply(WordCast(ret__unsigned_longlong#v : Word 64), slot___ptr_to_struct_cte_C#v : Word 64, WordCast(unsigned_longlong_eret_2#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
54 Basic 53 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
55 Call 54 Kernel_C.cap_reply_cap_get_capReplyCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
56 Basic 55 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
57 Call 56 Kernel_C.cap_reply_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
58 Call 57 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
59 Cond 58 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
60 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
61 Basic 60 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
62 Cond 61 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
63 Basic 62 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
64 Cond 63 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
65 Cond 64 59 !(!(!((ret__unsigned_longlong#v : Word 64) == 0)))
66 Basic 65 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
67 Call 66 Kernel_C.cap_reply_cap_get_capReplyMaster(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
68 Basic 1 { }
69 Basic 68 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
70 Call 69 Kernel_C.decodeTCBInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
71 Basic 1 { }
72 Basic 71 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
73 Call 72 Kernel_C.decodeDomainInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
74 Basic 1 { }
75 Basic 74 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
76 Call 75 Kernel_C.decodeCNodeInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
77 Basic 1 { }
78 Basic 77 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
79 Call 78 Kernel_C.decodeUntypedInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
80 Basic 1 { }
81 Basic 80 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
82 Call 81 Kernel_C.decodeIRQControlInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
83 Basic 1 { }
84 Basic 83 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
85 Call 84 Kernel_C.decodeIRQHandlerInvocation(invLabel___unsigned_long#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
86 Basic 85 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
87 Call 86 Kernel_C.cap_irq_handler_cap_get_capIRQ(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
88 Cond 2 Err false
89 Call 88 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
90 Cond 89 Err false
91 Cond 90 2 true
92 Cond 87 91 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(16)) || false
93 Cond 82 92 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(14)) || false
94 Cond 79 93 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
95 Cond 76 94 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10)) || false
96 Cond 73 95 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(20)) || false
97 Cond 70 96 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)) || false
98 Cond 67 97 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)) || false
99 Cond 50 98 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)) || false
100 Cond 33 99 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
101 Cond 12 100 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)) || false
102 Cond 7 101 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
103 Basic 102 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
104 Call 103 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
105 Basic 1 { }
106 Basic 105 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
107 Call 106 Kernel_C.Arch_decodeInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, capIndex___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
108 Cond 107 104 !((ret__unsigned_long#v : Word 64) == 0)
109 Basic 108 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
110 Call 109 Kernel_C.isArchCap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 110

Function Kernel_C.decodeSetTLSBase(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeSetTLSBase(WordCast(ret__unsigned_longlong#v : Word 64), tls_base___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Call 7 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
10 Basic 9 {
    var tls_base___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
12 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
15 Cond 14 11 (length___unsigned_long#v : Word 64) < WordCastSigned(1)
EntryPoint 15

Function Kernel_C.doNormalTransfer(sender___ptr_to_struct_tcb_C#v : Word 64, sendBuffer___ptr_to_unsigned_long#v : Word 64, endpoint___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, canGrant___unsigned_long#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.wordFromMessageInfo(tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 5 {
    var tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
7 Call 6 Kernel_C.seL4_MessageInfo_set_length(tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, WordCast(msgTransferred___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
8 Basic 7 {
    var tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
9 Call 8 Kernel_C.transferCaps(tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, endpoint___ptr_to_struct_endpoint_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Basic 9 {
    var msgTransferred___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.copyMRs(sender___ptr_to_struct_tcb_C#v : Word 64, sendBuffer___ptr_to_unsigned_long#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveBuffer___ptr_to_unsigned_long#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.seL4_MessageInfo_get_length(tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Basic 13 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_extra_caps : Word 64) + 0 + (8 * WordCast(0)), WordCastSigned(0))
}
15 Cond 14 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
16 Cond 15 Err (0 <s 3) && (0 <=s 0)
17 Cond 16 13 !(!(!((status___unsigned_long#v : Word 64) == WordCastSigned(0))))
18 Basic 17 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.lookupExtraCaps(sender___ptr_to_struct_tcb_C#v : Word 64, sendBuffer___ptr_to_unsigned_long#v : Word 64, tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 13 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_extra_caps : Word 64) + 0 + (8 * WordCast(0)), WordCastSigned(0))
}
21 Cond 20 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
22 Cond 21 Err (0 <s 3) && (0 <=s 0)
23 Cond 19 22 !((canGrant___unsigned_long#v : Word 64) == 0)
24 Basic 23 {
    var tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
25 Call 24 Kernel_C.messageInfoFromWord(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
26 Basic 25 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.getRegister(sender___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 27

Function Kernel_C.ensureNoChildren(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(9))
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
7 Cond 6 3 !((ret__unsigned_long#v : Word 64) == 0)
8 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.isMDBParentOf(slot___ptr_to_struct_cte_C#v : Word 64, next___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var next___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.mdb_node_get_mdbNext((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Cond 12 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
14 Cond 13 3 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0))
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.mdb_node_get_mdbNext((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 17

Function Kernel_C.ep_ptr_get_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_tcb_queue_C#v.head_C : Word 64, ret__struct_tcb_queue_C#v.end_C : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_tcb_queue_C#v.head_C : Word 64 = queue___struct_tcb_queue_C#v.head_C : Word 64
    var ret__struct_tcb_queue_C#v.end_C : Word 64 = queue___struct_tcb_queue_C#v.end_C : Word 64
}
4 Basic 3 {
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.endpoint_ptr_get_epQueue_tail(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Basic 6 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.endpoint_ptr_get_epQueue_head(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 9

Function Kernel_C.ep_ptr_set_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.endpoint_ptr_set_epQueue_tail(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCast(queue___struct_tcb_queue_C#v.end_C : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.endpoint_ptr_set_epQueue_head(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCast(queue___struct_tcb_queue_C#v.head_C : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 3

Function Kernel_C.fastpath_restore(badge___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, cur_thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.getPPtrFromHWPTE(pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_struct_pte_C#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_struct_pte_C#v : Word 64 = ret__ptr_to_void#v : Word 64
}
4 Basic 3 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
5 Call 4 Kernel_C.ptrFromPAddr(WordCast((ret__unsigned_longlong#v : Word 64) << WordCast(12))) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
6 Cond 5 Err (0 <=s 12) && (12 <s 64)
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.pte_ptr_get_ppn(pte___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 8

Function Kernel_C.get_avail_p_regs(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_struct_p_region_C#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_struct_p_region_C#v : Word 64 = avail_p_regs : Word 64
}
4 Cond 3 Err PValid(HTD : HTD, Array (Struct Kernel_C.p_region_C) 1, avail_p_regs : Word 64)
EntryPoint 4

Function Kernel_C.handleFaultReply(receiver___ptr_to_struct_tcb_C#v : Word 64, sender___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((label___unsigned_long#v : Word 64) == WordCastSigned(0), 1, 0))
}
5 Call 4 Kernel_C.copyMRsFaultReply(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(10), length___unsigned_long#v : Word 64, WordCastSigned(10)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((label___unsigned_long#v : Word 64) == WordCastSigned(0), 1, 0))
}
7 Call 6 Kernel_C.copyMRsFaultReply(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(2), length___unsigned_long#v : Word 64, WordCastSigned(2)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 1 { }
9 Basic 8 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
10 Call 9 Kernel_C.Arch_handleFaultReply(receiver___ptr_to_struct_tcb_C#v : Word 64, sender___ptr_to_struct_tcb_C#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.seL4_Fault_get_seL4_FaultType(fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Cond 12 2 true
14 Cond 7 13 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || false
15 Cond 5 14 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || false
16 Cond 3 15 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.seL4_Fault_get_seL4_FaultType(fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Basic 18 {
    var fault___struct_seL4_Fault_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((receiver___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0))
    var fault___struct_seL4_Fault_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((receiver___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))
}
20 Cond 19 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, receiver___ptr_to_struct_tcb_C#v : Word 64)
21 Basic 20 {
    var length___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.seL4_MessageInfo_get_length(tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Basic 23 {
    var label___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
25 Basic 24 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
26 Call 25 Kernel_C.seL4_MessageInfo_get_label(tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
27 Basic 26 {
    var tag___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
28 Call 27 Kernel_C.messageInfoFromWord(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
29 Basic 28 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
30 Call 29 Kernel_C.getRegister(sender___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 30

Function Kernel_C.handleInvocation(isCall___unsigned_long#v : Word 64, isBlocking___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.setThreadState(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.replyFromKernel_success_empty(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 4 !((isCall___unsigned_long#v : Word 64) == 0)
7 Cond 6 3 !(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)))
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.thread_state_get_tsType((Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 280 + 0 + (8 * 2))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
12 Call 11 Kernel_C.replyFromKernel_error(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Cond 12 11 !((isCall___unsigned_long#v : Word 64) == 0)
14 Cond 13 10 !(!((status___unsigned_long#v : Word 64) == WordCastSigned(3)))
15 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
16 Cond 15 14 !(!((status___unsigned_long#v : Word 64) == WordCastSigned(4)))
17 Basic 16 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.decodeInvocation(WordCast(ret__unsigned_longlong#v : Word 64), length___unsigned_long#v : Word 64, cptr___unsigned_long#v : Word 64, lu_ret___struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64, lu_ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64, lu_ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64, isBlocking___unsigned_long#v : Word 64, isCall___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.seL4_MessageInfo_get_label(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
21 Basic 20 {
    var length___unsigned_long#v : Word 64 = WordCastSigned(4)
}
22 Cond 21 20 !(!((WordCastSigned(4) < (length___unsigned_long#v : Word 64)) && !(!((buffer___ptr_to_unsigned_long#v : Word 64) == 0))))
23 Basic 22 {
    var length___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.seL4_MessageInfo_get_length(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
27 Call 26 Kernel_C.handleFault(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
28 Cond 27 26 !((isBlocking___unsigned_long#v : Word 64) == 0)
29 Cond 28 25 !(!(!((status___unsigned_long#v : Word 64) == WordCastSigned(0))))
30 Basic 29 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
31 Call 30 Kernel_C.lookupExtraCaps(thread___ptr_to_struct_tcb_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Basic 31 {
    var buffer___ptr_to_unsigned_long#v : Word 64 = rv#space#ret__ptr_to_unsigned_long#v : Word 64
}
33 Call 32 Kernel_C.lookupIPCBuffer(WordCastSigned(0), thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_unsigned_long#v : Word 64)
34 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
35 Call 34 Kernel_C.handleFault(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
36 Cond 35 34 !((isBlocking___unsigned_long#v : Word 64) == 0)
37 Basic 36 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
39 Call 38 Kernel_C.seL4_Fault_CapFault_new(WordCast(cptr___unsigned_long#v : Word 64), WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
40 Cond 39 33 !(!(!((lu_ret___struct_lookupCapAndSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
41 Basic 40 {
    var lu_ret___struct_lookupCapAndSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupCapAndSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64
    var lu_ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64
    var lu_ret___struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64
}
42 Call 41 Kernel_C.lookupCapAndSlot(thread___ptr_to_struct_tcb_C#v : Word 64, cptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupCapAndSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64, rv#space#ret__struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
43 Basic 42 {
    var cptr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
44 Call 43 Kernel_C.getRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
45 Basic 44 {
    var info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
46 Call 45 Kernel_C.messageInfoFromWord(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
47 Basic 46 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
48 Call 47 Kernel_C.getRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
49 Basic 48 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
}
50 Cond 49 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 50

Function Kernel_C.handle_exception(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.invokeIRQControl(irq___unsigned_long#v : Word 64, handlerSlot___ptr_to_struct_cte_C#v : Word 64, controlSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.cteInsert(ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, controlSlot___ptr_to_struct_cte_C#v : Word 64, handlerSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_irq_handler_cap_new(WordCast(irq___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Call 6 Kernel_C.setIRQState(WordCastSigned(1), irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 7

Function Kernel_C.invokeSetTLSBase(thread___ptr_to_struct_tcb_C#v : Word 64, tls_base___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 3 (thread___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
6 Cond 5 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
7 Call 6 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(3), tls_base___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 7

Function Kernel_C.invokeTCB_Resume(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.restart(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.lookupCapAndSlot(thread___ptr_to_struct_tcb_C#v : Word 64, cPtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupCapAndSlot_ret_C#v.status_C : Word 64, ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64, ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64, ret__struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookupCapAndSlot_ret_C#v.status_C : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64
    var ret__struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64
}
4 Basic 3 {
    var ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64) + 0 + (8 * 0))
    var ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64) + 0 + (8 * 1))
}
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64)
6 Basic 5 {
    var ret___struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64 = lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64
}
7 Basic 6 {
    var ret___struct_lookupCapAndSlot_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
8 Basic 1 {
    var ret__struct_lookupCapAndSlot_ret_C#v.status_C : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64
    var ret__struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64
    var ret__struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64 = ret___struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64
}
9 Basic 8 {
    var ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.0 : Word 64 = ret__struct_cap_C#v.words_C.0 : Word 64
    var ret___struct_lookupCapAndSlot_ret_C#v.cap_C.words_C.1 : Word 64 = ret__struct_cap_C#v.words_C.1 : Word 64
}
10 Basic 9 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
11 Call 10 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
12 Basic 11 {
    var ret___struct_lookupCapAndSlot_ret_C#v.slot_C : Word 64 = WordCastSigned(0)
}
13 Basic 12 {
    var ret___struct_lookupCapAndSlot_ret_C#v.status_C : Word 64 = lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64
}
14 Cond 13 7 !(!(!((lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
15 Basic 14 {
    var lu_ret___struct_lookupSlot_raw_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_raw_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64
}
16 Call 15 Kernel_C.lookupSlot(thread___ptr_to_struct_tcb_C#v : Word 64, cPtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_raw_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_raw_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 16

Function Kernel_C.lookupSourceSlot(root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupSlot_ret_C#v.status_C : Word 64, ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
5 Call 4 Kernel_C.lookupSlotForCNodeOp(WordCastSigned(1), root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.lookupTargetSlot(root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupSlot_ret_C#v.status_C : Word 64, ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
5 Call 4 Kernel_C.lookupSlotForCNodeOp(WordCastSigned(0), root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.map_it_frame_cap(vspace_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_cap___struct_cap_C#v.words_C.1 : Word 64, frame_cap___struct_cap_C#v.words_C.0 : Word 64, frame_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var Mem : Mem = MemUpdate(Mem : Mem, (targetSlot___ptr_to_struct_pte_C#v : Word 64) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.pte_C, targetSlot___ptr_to_struct_pte_C#v : Word 64)
5 Basic 4 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
6 Call 5 Kernel_C.pte_new(WordCast((ret__unsigned_long#v : Word 64) >> WordCast(12)), WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCastSigned(1), WordCastSigned(1), WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
7 Cond 6 Err (0 <=s 12) && (12 <s 64)
8 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.addrFromPPtr(frame_pptr___ptr_to_struct_pte_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var targetSlot___ptr_to_struct_pte_C#v : Word 64 = lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
}
11 Basic 10 {
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64
}
12 Call 11 Kernel_C.lookupPTSlot(lvl1pt___ptr_to_struct_pte_C#v : Word 64, frame_vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)
13 Basic 12 {
    var frame_vptr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_frame_cap_get_capFMappedAddress(frame_cap___struct_cap_C#v.words_C.0 : Word 64, frame_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Basic 15 {
    var frame_pptr___ptr_to_struct_pte_C#v : Word 64 = ret__ptr_to_void#v : Word 64
}
17 Basic 16 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
18 Call 17 Kernel_C.cap_get_capPtr(frame_cap___struct_cap_C#v.words_C.0 : Word 64, frame_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
19 Basic 18 {
    var lvl1pt___ptr_to_struct_pte_C#v : Word 64 = ret__ptr_to_void#v : Word 64
}
20 Basic 19 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
21 Call 20 Kernel_C.cap_get_capPtr(vspace_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
EntryPoint 21

Function Kernel_C.map_kernel_frame(paddr___unsigned_long#v : Word 64, vaddr___unsigned_long#v : Word 64, vm_rights___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (kernel_root_pageTable : Word 64) + (8 * ((vaddr___unsigned_long#v : Word 64) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1)) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
3 Cond 2 Err (((vaddr___unsigned_long#v : Word 64) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64) && (0 <=s 9) && (9 <s 64) && (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
4 Basic 3 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
5 Call 4 Kernel_C.pte_next(paddr___unsigned_long#v : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
6 Basic 5 {
    var paddr___unsigned_long#v : Word 64 = (paddr___unsigned_long#v : Word 64) >> WordCast((9 * 3 - 1 - 0) + 12) << WordCast((9 * 3 - 1 - 0) + 12)
}
7 Cond 6 Err (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3)) && (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
EntryPoint 7

Function Kernel_C.possibleSwitchTo(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.tcbSchedEnqueue(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 1 Kernel_C.tcbSchedEnqueue(target___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksSchedulerAction : Word 64, target___ptr_to_struct_tcb_C#v : Word 64)
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
7 Cond 4 6 !((Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64) == WordCastSigned(0))
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
9 Cond 2 8 !((Mem : Mem) -MemAcc-> (ksCurDomain : Word 64) == (Mem : Mem) -MemAcc-> ((target___ptr_to_struct_tcb_C#v : Word 64) + 344))
10 Cond 9 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, target___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 11

Function Kernel_C.pte_ptr_get_read(pte_ptr___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((pte_ptr___ptr_to_struct_pte_C#v : Word 64) + (8 * 0)) & 2 >> WordCast(1)
}
11 Cond 10 Err (0 <=s 1) && (1 <s 64) && (0 <s 1) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.pte_C, pte_ptr___ptr_to_struct_pte_C#v : Word 64)
EntryPoint 11

Function Kernel_C.removeFromBitmap(cpu___unsigned_long#v : Word 64, dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ksReadyQueuesL1Bitmap : Word 64) + (8 * (dom___unsigned_long#v : Word 64)), (Mem : Mem) -MemAcc-> ((ksReadyQueuesL1Bitmap : Word 64) + (8 * (dom___unsigned_long#v : Word 64))) & ~(1 << (l1index___unsigned_long#v : Word 64)))
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Array (Word 64) 16, ksReadyQueuesL1Bitmap : Word 64)
4 Cond 3 Err ((dom___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((l1index___unsigned_long#v : Word 64) < WordCastSigned(64)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16))
5 Cond 4 1 !(!(!(!((Mem : Mem) -MemAcc-> ((ksReadyQueuesL2Bitmap : Word 64) + (32 * (dom___unsigned_long#v : Word 64)) + (8 * (l1index_inverted___unsigned_long#v : Word 64))) == 0))))
6 Cond 5 Err PGlobalValid(HTD : HTD, Array (Array (Word 64) 4) 16, ksReadyQueuesL2Bitmap : Word 64)
7 Cond 6 Err ((l1index_inverted___unsigned_long#v : Word 64) < WordCastSigned(4)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16))
8 Basic 7 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ksReadyQueuesL2Bitmap : Word 64) + (32 * (dom___unsigned_long#v : Word 64)) + (8 * (l1index_inverted___unsigned_long#v : Word 64)), (Mem : Mem) -MemAcc-> ((ksReadyQueuesL2Bitmap : Word 64) + (32 * (dom___unsigned_long#v : Word 64)) + (8 * (l1index_inverted___unsigned_long#v : Word 64))) & ~(1 << (prio___unsigned_long#v : Word 64) & (1 << WordCast(6) - 1)))
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Array (Array (Word 64) 4) 16, ksReadyQueuesL2Bitmap : Word 64)
10 Cond 9 Err ((l1index_inverted___unsigned_long#v : Word 64) < WordCastSigned(4)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((prio___unsigned_long#v : Word 64) & (1 << WordCast(6) - 1) < WordCastSigned(64)) && (0 <=s 6) && (6 <s 64) && ((l1index_inverted___unsigned_long#v : Word 64) < WordCastSigned(4)) && ((dom___unsigned_long#v : Word 64) < WordCastSigned(16))
11 Basic 10 {
    var l1index_inverted___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.invert_l1index(l1index___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
13 Basic 12 {
    var l1index___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.prio_to_l1index(prio___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 14

Function Kernel_C.sanitiseRegister(reg___unsigned_long#v : Word 64, v___unsigned_long#v : Word 64, archInfo___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = v___unsigned_long#v : Word 64
}
EntryPoint 3

Function Kernel_C.setInterruptMode(irq___unsigned_long#v : Word 64, levelTrigger___unsigned_long#v : Word 64, polarityLow___unsigned_long#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.setupReplyMaster(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.mdb_node_ptr_set_mdbFirstBadged((slot___ptr_to_struct_cte_C#v : Word 64) + 16, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
4 Call 3 Kernel_C.mdb_node_ptr_set_mdbRevocable((slot___ptr_to_struct_cte_C#v : Word 64) + 16, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, ret__struct_mdb_node_C#v.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
}
7 Cond 6 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
8 Basic 7 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.mdb_node_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (slot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
12 Basic 11 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
13 Call 12 Kernel_C.cap_reply_cap_new(WordCastSigned(1), WordCastSigned(1), WordCast(thread___ptr_to_struct_tcb_C#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
14 Cond 13 1 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
18 Basic 17 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32)
}
19 Cond 18 Err (0 <=s 10) && (10 <s 64) && (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (thread___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(2)))
EntryPoint 19

Function Kernel_C.vmRightsFromWord(w___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = w___unsigned_long#v : Word 64
}
EntryPoint 3

Function Kernel_C.wordFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = vm_rights___unsigned_long#v : Word 64
}
EntryPoint 3

Function Kernel_C.Arch_createObject(t___unsigned_long#v : Word 64, regionBase___ptr_to_void#v : Word 64, userSize___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Call 4 Kernel_C.cap_frame_cap_new(WordCastSigned(0), WordCast(regionBase___ptr_to_void#v : Word 64), WordCastSigned(0), WordCast(ret__unsigned_long#v : Word 64), WordCast(deviceMemory___unsigned_long#v : Word 64), WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.wordFromVMRights(WordCastSigned(3)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Basic 7 { }
9 Cond 8 Err true
10 Basic 9 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.user_data_device_C, 1, regionBase___ptr_to_void#v : Word 64, 1, HTD : HTD)
}
11 Cond 10 Err true && true && true
12 Basic 7 { }
13 Cond 12 Err true
14 Basic 13 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.user_data_C, 1, regionBase___ptr_to_void#v : Word 64, 1, HTD : HTD)
}
15 Cond 14 Err true && true && true
16 Cond 11 15 !((deviceMemory___unsigned_long#v : Word 64) == 0)
17 Basic 1 { }
18 Basic 17 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
19 Call 18 Kernel_C.cap_frame_cap_new(WordCastSigned(0), WordCast(regionBase___ptr_to_void#v : Word 64), WordCastSigned(1), WordCast(ret__unsigned_long#v : Word 64), WordCast(deviceMemory___unsigned_long#v : Word 64), WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
20 Basic 19 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.wordFromVMRights(WordCastSigned(3)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Basic 21 { }
23 Cond 22 Err true
24 Basic 23 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.user_data_device_C, 1, regionBase___ptr_to_void#v : Word 64, 512, HTD : HTD)
}
25 Cond 24 Err true && true && true
26 Basic 21 { }
27 Cond 26 Err true
28 Basic 27 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.user_data_C, 1, regionBase___ptr_to_void#v : Word 64, 512, HTD : HTD)
}
29 Cond 28 Err true && true && true
30 Cond 25 29 !((deviceMemory___unsigned_long#v : Word 64) == 0)
31 Basic 1 { }
32 Basic 31 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
33 Call 32 Kernel_C.cap_frame_cap_new(WordCastSigned(0), WordCast(regionBase___ptr_to_void#v : Word 64), WordCastSigned(2), WordCast(ret__unsigned_long#v : Word 64), WordCast(deviceMemory___unsigned_long#v : Word 64), WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
34 Basic 33 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
35 Call 34 Kernel_C.wordFromVMRights(WordCastSigned(3)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
36 Basic 35 { }
37 Cond 36 Err true
38 Basic 37 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.user_data_device_C, 1, regionBase___ptr_to_void#v : Word 64, 262144, HTD : HTD)
}
39 Cond 38 Err true && true && true
40 Basic 35 { }
41 Cond 40 Err true
42 Basic 41 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.user_data_C, 1, regionBase___ptr_to_void#v : Word 64, 262144, HTD : HTD)
}
43 Cond 42 Err true && true && true
44 Cond 39 43 !((deviceMemory___unsigned_long#v : Word 64) == 0)
45 Basic 1 { }
46 Basic 45 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
47 Call 46 Kernel_C.cap_page_table_cap_new(WordCastSigned(0), WordCast(regionBase___ptr_to_void#v : Word 64), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
48 Basic 47 {
    var HTD : HTD = HTDUpdate(Array (Struct Kernel_C.pte_C) 512, 1, regionBase___ptr_to_void#v : Word 64, 1, HTD : HTD)
}
49 Cond 48 Err true && true && true
50 Cond 2 Err false
51 Call 50 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
52 Cond 51 Err false
53 Cond 52 2 true
54 Cond 49 53 ((t___unsigned_long#v : Word 64) == WordCastSigned(8)) || false
55 Cond 44 54 ((t___unsigned_long#v : Word 64) == WordCastSigned(5)) || false
56 Cond 30 55 ((t___unsigned_long#v : Word 64) == WordCastSigned(7)) || false
57 Cond 16 56 ((t___unsigned_long#v : Word 64) == WordCastSigned(6)) || false
EntryPoint 57

Function Kernel_C.Arch_sameObjectAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.Arch_sameRegionAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
7 Basic 6 {
    var ret__int#v : Word 32 = IfThenElse(IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0), 1, 0) == IfThenElse((unsigned_longlong_eret_2#v : Word 64) == WordCastSigned(0), 1, 0), 1, 0)
}
8 Basic 7 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.cap_frame_cap_get_capFIsDevice(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_frame_cap_get_capFIsDevice(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 11 6 !((ret__int#v : Word 32) == 0)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0)
}
14 Basic 13 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_frame_cap_get_capFSize(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_frame_cap_get_capFSize(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
18 Cond 17 12 !((ret__int#v : Word 32) == 0)
19 Basic 18 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0)
}
20 Basic 19 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_frame_cap_get_capFBasePtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_frame_cap_get_capFBasePtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Cond 23 5 !((ret__int#v : Word 32) == 0)
25 Basic 24 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1), 1, 0)
}
26 Basic 25 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
27 Call 26 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
28 Cond 27 24 !((ret__int#v : Word 32) == 0)
29 Basic 28 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1), 1, 0)
}
30 Basic 29 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
31 Call 30 Kernel_C.cap_get_capType(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 31

Function Kernel_C.Arch_sameRegionAs(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64, cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(((botA___unsigned_long#v : Word 64) <= (botB___unsigned_long#v : Word 64)) && ((topB___unsigned_long#v : Word 64) <= (topA___unsigned_long#v : Word 64)) && ((botB___unsigned_long#v : Word 64) <= (topB___unsigned_long#v : Word 64)), 1, 0))
}
5 Basic 4 {
    var topB___unsigned_long#v : Word 64 = (botB___unsigned_long#v : Word 64) + 1 << (ret__unsigned_long#v : Word 64) - 1
}
6 Cond 5 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(64)
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.pageBitsForSize(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_frame_cap_get_capFSize(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
11 Basic 10 {
    var topA___unsigned_long#v : Word 64 = (botA___unsigned_long#v : Word 64) + 1 << (ret__unsigned_long#v : Word 64) - 1
}
12 Cond 11 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(64)
13 Basic 12 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.pageBitsForSize(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_frame_cap_get_capFSize(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 16 {
    var botB___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.cap_frame_cap_get_capFBasePtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Basic 19 {
    var botA___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.cap_frame_cap_get_capFBasePtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Cond 22 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0))
}
27 Basic 26 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
28 Call 27 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Cond 30 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
35 Cond 34 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(11)
36 Basic 35 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
37 Call 36 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
38 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0))
}
39 Basic 38 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
40 Call 39 Kernel_C.cap_asid_pool_cap_get_capASIDPool(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_asid_pool_cap_get_capASIDPool(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
43 Cond 42 3 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(13)
44 Basic 43 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
45 Call 44 Kernel_C.cap_get_capType(cap_b___struct_cap_C#v.words_C.0 : Word 64, cap_b___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
46 Cond 3 3 true
47 Cond 45 46 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(13)) || false
48 Cond 37 47 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(11)) || false
49 Cond 33 48 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || false
50 Cond 25 49 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
51 Basic 50 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
52 Call 51 Kernel_C.cap_get_capType(cap_a___struct_cap_C#v.words_C.0 : Word 64, cap_a___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 52

Function Kernel_C.Arch_setMRs_fault(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, faultType___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
4 Basic 3 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
5 Call 4 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(3), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.seL4_Fault_VMFault_get_FSR((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
9 Call 8 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(2), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.seL4_Fault_VMFault_get_instructionFault((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
13 Call 12 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(1), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.seL4_Fault_VMFault_get_address((Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((sender___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Cond 15 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, sender___ptr_to_struct_tcb_C#v : Word 64)
17 Call 16 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Basic 17 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.getRestartPC(sender___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
20 Cond 2 Err false
21 Call 20 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
22 Cond 21 Err false
23 Cond 22 2 true
24 Cond 19 23 ((faultType___unsigned_long#v : Word 64) == WordCastSigned(5)) || false
EntryPoint 24

Function Kernel_C.arch_c_entry_hook() -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.arch_get_n_paging(it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = n___unsigned_long#v : Word 64
}
8 Cond 4 Err (0 <=s (3 - 1)) == (1 <=s 3)
9 Basic 8 {
    var i___int#v : Word 32 = (i___int#v : Word 32) + 1
}
10 Cond 9 Err ((i___int#v : Word 32) <=s ((i___int#v : Word 32) + 1)) == (0 <=s 1)
11 Basic 10 {
    var n___unsigned_long#v : Word 64 = (n___unsigned_long#v : Word 64) + (ret__unsigned_long#v : Word 64)
}
12 Basic 11 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
13 Call 12 Kernel_C.get_n_paging(it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64, WordCastSigned((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
14 Cond 13 Err (((9 * 3 - 1 - (i___int#v : Word 32)) <=s ((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - (i___int#v : Word 32))) == WordCastSigned(9 * 3 - 1 - (i___int#v : Word 32))) && ((0 <=s (3 - 1 - (i___int#v : Word 32))) == ((i___int#v : Word 32) <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 14 3 (i___int#v : Word 32) <s (3 - 1)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
15 Cond 7 Err (0 <=s (3 - 1)) == (1 <=s 3)
16 Basic 15 {
    var i___int#v : Word 32 = 0
}
17 Basic 16 {
    var n___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 17

Function Kernel_C.arch_init_freemem(ui_reg___struct_region_C#v.start_C : Word 64, ui_reg___struct_region_C#v.end_C : Word 64, ui_v_reg___struct_v_region_C#v.start_C : Word 64, ui_v_reg___struct_v_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.init_freemem(WordCastSigned(ret__int#v : Word 32), ret__ptr_to_struct_p_region_C#v : Word 64, WordCastSigned(2), res_reg : Word 64, ui_v_reg___struct_v_region_C#v.start_C : Word 64, ui_v_reg___struct_v_region_C#v.end_C : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Array (Struct Kernel_C.region_C) 2, res_reg : Word 64)
4 Basic 3 {
    var ret__ptr_to_struct_p_region_C#v : Word 64 = rv#space#ret__ptr_to_struct_p_region_C#v : Word 64
}
5 Call 4 Kernel_C.get_avail_p_regs(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_struct_p_region_C#v : Word 64)
6 Basic 5 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
7 Call 6 Kernel_C.get_num_avail_p_regs() -- updates (rv#space#ret__int#v : Word 32)
8 Basic 7 {
    var Mem : Mem = MemUpdate(Mem : Mem, (res_reg : Word 64) + (1 * 16) + 8, ui_reg___struct_region_C#v.end_C : Word 64)
}
9 Cond 8 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Array (Struct Kernel_C.region_C) 2, res_reg : Word 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, (res_reg : Word 64) + (1 * 16), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, res_reg : Word 64, WordCast(1)))
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (res_reg : Word 64) + (1 * 16), ui_reg___struct_region_C#v.start_C : Word 64)
}
11 Cond 10 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Array (Struct Kernel_C.region_C) 2, res_reg : Word 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, (res_reg : Word 64) + (1 * 16), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, res_reg : Word 64, WordCast(1)))
12 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, (res_reg : Word 64) + (0 * 16) + 8, ret__ptr_to_void#v : Word 64)
}
13 Cond 12 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Array (Struct Kernel_C.region_C) 2, res_reg : Word 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, (res_reg : Word 64) + (0 * 16), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, res_reg : Word 64, WordCast(0)))
14 Basic 13 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
15 Call 14 Kernel_C.ptrFromPAddr(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
16 Basic 15 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.kpptr_to_paddr(ki_end : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
18 Cond 17 Err PValid(HTD : HTD, Array (Word 8) 1, ki_end : Word 64)
19 Basic 18 {
    var Mem : Mem = MemUpdate(Mem : Mem, (res_reg : Word 64) + (0 * 16), ret__ptr_to_void#v : Word 64)
}
20 Cond 19 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Array (Struct Kernel_C.region_C) 2, res_reg : Word 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, (res_reg : Word 64) + (0 * 16), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.region_C, res_reg : Word 64, WordCast(0)))
21 Basic 20 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
22 Call 21 Kernel_C.ptrFromPAddr(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
23 Basic 22 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.kpptr_to_paddr(-2147483648 + (WordCast(2147483648) + 67108864) & (1 << WordCast(30) - 1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
25 Cond 24 Err (0 <=s 30) && (30 <s 64)
EntryPoint 25

Function Kernel_C.cancelBadgedSends(epptr___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 2 !((queue___struct_tcb_queue_C#v.head_C : Word 64) == 0)
5 Call 4 Kernel_C.ep_ptr_set_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Basic 6 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = next___ptr_to_struct_tcb_C#v : Word 64
}
11 Basic 10 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
12 Call 11 Kernel_C.tcbEPDequeue(thread___ptr_to_struct_tcb_C#v : Word 64, queue___struct_tcb_queue_C#v.head_C : Word 64, queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Call 12 Kernel_C.tcbSchedEnqueue(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
14 Call 13 Kernel_C.setThreadState(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Cond 14 10 (b___unsigned_long#v : Word 64) == (badge___unsigned_long#v : Word 64)
16 Basic 15 {
    var next___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread___ptr_to_struct_tcb_C#v : Word 64) + 408)
}
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
18 Basic 17 {
    var b___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.thread_state_ptr_get_blockingIPCBadge((thread___ptr_to_struct_tcb_C#v : Word 64) + 280, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
21 Cond 20 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, thread___ptr_to_struct_tcb_C#v : Word 64)
6 Basic 7 {
    var loop#6#count : Word 64 = (loop#6#count : Word 64) + 1
}
7 Cond 8 Err true
8 Cond 21 5 !((thread___ptr_to_struct_tcb_C#v : Word 64) == 0)
9 Basic 7 {
    var loop#6#count : Word 64 = 0
}
22 Basic 9 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = queue___struct_tcb_queue_C#v.head_C : Word 64
}
23 Call 22 Kernel_C.endpoint_ptr_set_epQueue_tail(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Call 23 Kernel_C.endpoint_ptr_set_epQueue_head(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Call 24 Kernel_C.endpoint_ptr_set_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
26 Basic 25 {
    var queue___struct_tcb_queue_C#v.head_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64
    var queue___struct_tcb_queue_C#v.end_C : Word 64 = rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64
}
27 Call 26 Kernel_C.ep_ptr_get_queue(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_tcb_queue_C#v.head_C : Word 64, rv#space#ret__struct_tcb_queue_C#v.end_C : Word 64)
28 Cond 1 Err false
29 Call 28 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
30 Cond 29 Err false
31 Cond 30 1 true
32 Cond 27 31 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
33 Cond 1 32 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
34 Basic 33 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
35 Call 34 Kernel_C.endpoint_ptr_get_state(epptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 35

Function Kernel_C.cap_cnode_cap_new(capCNodeRadix___unsigned_longlong#v : Word 64, capCNodeGuardSize___unsigned_longlong#v : Word 64, capCNodeGuard___unsigned_longlong#v : Word 64, capCNodePtr___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capCNodeGuard___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((capCNodeRadix___unsigned_longlong#v : Word 64) & 63 << WordCast(47)) | ((capCNodeGuardSize___unsigned_longlong#v : Word 64) & 63 << WordCast(53)) | ((capCNodePtr___unsigned_longlong#v : Word 64) & 549755813886 >> WordCast(1)) | (WordCastSigned(10) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64) && (0 <=s 1) && (1 <s 64) && (0 <=s 53) && (53 <s 64) && (0 <=s 47) && (47 <s 64)
EntryPoint 7

Function Kernel_C.cap_frame_cap_new(capFMappedASID___unsigned_longlong#v : Word 64, capFBasePtr___unsigned_longlong#v : Word 64, capFSize___unsigned_longlong#v : Word 64, capFVMRights___unsigned_longlong#v : Word 64, capFIsDevice___unsigned_longlong#v : Word 64, capFMappedAddress___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capFMappedASID___unsigned_longlong#v : Word 64) & 65535 << WordCast(48)) | ((capFBasePtr___unsigned_longlong#v : Word 64) & 549755813887 << WordCast(9))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 9) && (9 <s 64) && (0 <=s 48) && (48 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(1) & 31 << WordCast(59)) | ((capFSize___unsigned_longlong#v : Word 64) & 3 << WordCast(57)) | ((capFVMRights___unsigned_longlong#v : Word 64) & 3 << WordCast(55)) | ((capFIsDevice___unsigned_longlong#v : Word 64) & 1 << WordCast(54)) | ((capFMappedAddress___unsigned_longlong#v : Word 64) & 549755813887 >> WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 54) && (54 <s 64) && (0 <=s 55) && (55 <s 64) && (0 <=s 57) && (57 <s 64) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.cap_reply_cap_new(capReplyCanGrant___unsigned_longlong#v : Word 64, capReplyMaster___unsigned_longlong#v : Word 64, capTCBPtr___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capTCBPtr___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((capReplyCanGrant___unsigned_longlong#v : Word 64) & 1 << WordCast(1)) | ((capReplyMaster___unsigned_longlong#v : Word 64) & 1 << WordCast(0)) | (WordCastSigned(8) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64) && (0 <=s 0) && (0 <s 64) && (0 <=s 1) && (1 <s 64)
EntryPoint 7

Function Kernel_C.copyMRsFaultReply(sender___ptr_to_struct_tcb_C#v : Word 64, receiver___ptr_to_struct_tcb_C#v : Word 64, id___anonymous_enum#v : Word 32, length___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
7 Call 6 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, r___unsigned_long#v : Word 64, ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.sanitiseRegister(r___unsigned_long#v : Word 64, v___unsigned_long#v : Word 64, archInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var v___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((sendBuf___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8))
}
11 Cond 10 Err (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, sendBuf___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1)) && PValid(HTD : HTD, Word 64, (sendBuf___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, sendBuf___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1) + 1)
12 Basic 11 {
    var r___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((fault_messages : Word 64) + (80 * WordCast(id___anonymous_enum#v : Word 32)) + (8 * (i___unsigned_long#v : Word 64)))
}
13 Cond 12 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(10)) && ((id___anonymous_enum#v : Word 32) <s 2) && (0 <=s (id___anonymous_enum#v : Word 32))
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 13 1 (i___unsigned_long#v : Word 64) < (length___unsigned_long#v : Word 64)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
14 Cond 5 1 !((sendBuf___ptr_to_unsigned_long#v : Word 64) == 0)
15 Basic 14 {
    var sendBuf___ptr_to_unsigned_long#v : Word 64 = rv#space#ret__ptr_to_unsigned_long#v : Word 64
}
16 Call 15 Kernel_C.lookupIPCBuffer(WordCastSigned(0), sender___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_unsigned_long#v : Word 64)
17 Cond 16 1 (i___unsigned_long#v : Word 64) < (length___unsigned_long#v : Word 64)
22 Basic 18 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
23 Call 22 Kernel_C.setRegister(receiver___ptr_to_struct_tcb_C#v : Word 64, r___unsigned_long#v : Word 64, ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Basic 23 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
25 Call 24 Kernel_C.sanitiseRegister(r___unsigned_long#v : Word 64, v___unsigned_long#v : Word 64, archInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
26 Basic 25 {
    var v___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.getRegister(sender___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
28 Cond 27 Err (i___unsigned_long#v : Word 64) < WordCastSigned(4)
29 Basic 28 {
    var r___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((fault_messages : Word 64) + (80 * WordCast(id___anonymous_enum#v : Word 32)) + (8 * (i___unsigned_long#v : Word 64)))
}
30 Cond 29 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(10)) && ((id___anonymous_enum#v : Word 32) <s 2) && (0 <=s (id___anonymous_enum#v : Word 32))
18 Basic 19 {
    var loop#18#count : Word 64 = (loop#18#count : Word 64) + 1
}
19 Cond 20 Err true
20 Cond 30 17 (i___unsigned_long#v : Word 64) < IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(4), length___unsigned_long#v : Word 64, WordCastSigned(4))
21 Basic 19 {
    var loop#18#count : Word 64 = 0
}
31 Basic 21 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
32 Basic 31 {
    var archInfo___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
33 Call 32 Kernel_C.Arch_getSanitiseRegisterInfo(receiver___ptr_to_struct_tcb_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 33

Function Kernel_C.create_domain_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err (11 == 0) || ((11 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (11 * 32), WordCast(0 - 11))) || (!(11 == 0) && !(11 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(11)))
3 Call 2 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (11 * 32), cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 Err (11 == 0) || ((11 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (11 * 32), WordCast(0 - 11))) || (!(11 == 0) && !(11 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(11)))
5 Basic 4 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
6 Call 5 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
7 Basic 6 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Call 7 Kernel_C.cap_domain_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
13 Basic 9 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
9 Basic 10 {
    var loop#9#count : Word 64 = (loop#9#count : Word 64) + 1
}
10 Cond 11 Err true
11 Cond 13 8 (i___unsigned_long#v : Word 64) < WordCast(48 / 16)
12 Basic 10 {
    var loop#9#count : Word 64 = 0
}
14 Basic 12 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 14

Function Kernel_C.create_root_cnode(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Cond 3 Err (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 0) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 0), WordCast(2)))
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
6 Call 5 Kernel_C.write_slot((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 0) + (2 * 32), cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
8 Cond 7 Err (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 0) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 0), WordCast(2)))
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
10 Basic 9 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
11 Call 10 Kernel_C.cap_cnode_cap_new(WordCastSigned(19), WordCast(1 << WordCast(6) - WordCastSigned(19)), WordCastSigned(0), WordCast((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 0))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
12 Cond 11 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
13 Cond 12 Err (0 <=s 6) && (6 <s 64)
14 Basic 13 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 600, 1 << WordCast(19))
}
15 Cond 14 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
16 Cond 15 Err (0 <=s 19) && (19 <s 64)
EntryPoint 16

Function Kernel_C.decodeSetPriority(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_ThreadControl(WordCast(ret__unsigned_longlong#v : Word 64), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), newPrio___unsigned_long#v : Word 64, ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0), struct_cap_C_eret_2#v.words_C.0 : Word 64, struct_cap_C_eret_2#v.words_C.1 : Word 64, WordCastSigned(0), WordCastSigned(0), struct_cap_C_eret_3#v.words_C.0 : Word 64, struct_cap_C_eret_3#v.words_C.1 : Word 64, WordCastSigned(0), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var struct_cap_C_eret_3#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var struct_cap_C_eret_3#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Basic 7 {
    var struct_cap_C_eret_2#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var struct_cap_C_eret_2#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
11 Call 10 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Call 13 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Cond 14 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
16 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
17 Cond 16 15 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
18 Basic 17 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.checkPrio(newPrio___unsigned_long#v : Word 64, authTCB___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 19 {
    var authTCB___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.cap_thread_cap_get_capTCBPtr(authCap___struct_cap_C#v.words_C.0 : Word 64, authCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
24 Basic 23 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
26 Basic 25 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
27 Cond 26 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
28 Cond 27 22 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12))
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.cap_get_capType(authCap___struct_cap_C#v.words_C.0 : Word 64, authCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Basic 30 {
    var authCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var authCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
33 Cond 32 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
35 Basic 34 {
    var newPrio___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
36 Call 35 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
37 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
38 Basic 37 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
39 Cond 38 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
40 Cond 39 36 !((ret__int#v : Word 32) == 0)
41 Basic 40 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
43 Cond 42 Err (0 <s 3) && (0 <=s 0)
44 Cond 40 43 !((ret__int#v : Word 32) == 0)
45 Basic 44 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(1), 1, 0)
}
EntryPoint 45

Function Kernel_C.deletedIRQHandler(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setIRQState(WordCastSigned(0), irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.fastpath_copy_mrs(length___unsigned_long#v : Word 64, src___ptr_to_struct_tcb_C#v : Word 64, dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Basic 2 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
7 Call 6 Kernel_C.setRegister(dest___ptr_to_struct_tcb_C#v : Word 64, reg___unsigned_long#v : Word 64, ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.getRegister(src___ptr_to_struct_tcb_C#v : Word 64, reg___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var reg___unsigned_long#v : Word 64 = WordCastSigned(11) + (i___unsigned_long#v : Word 64)
}
11 Cond 10 Err (0 <s 4) && (0 <=s 0)
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 11 1 (i___unsigned_long#v : Word 64) < (length___unsigned_long#v : Word 64)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
12 Basic 5 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 12

Function Kernel_C.fastpath_mi_check(msgInfo___unsigned_long#v : Word 64) -- updates: (ret__int#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__int#v : Word 32 = IfThenElse(WordCastSigned(4) < (msgInfo___unsigned_long#v : Word 64) & (1 << WordCast(7 + 2) - 1), 1, 0)
}
4 Cond 3 Err (0 <=s (7 + 2)) && ((7 + 2) <s 64) && ((7 <=s (7 + 2)) == (0 <=s 2))
EntryPoint 4

Function Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
4 Basic 3 {
    var ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
5 Basic 4 {
    var ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = vspace_root___ptr_to_struct_pte_C#v : Word 64
}
6 Basic 1 {
    var ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
7 Basic 6 {
    var ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = WordCastSigned(2)
}
8 Basic 7 {
    var ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = WordCastSigned(0)
}
9 Basic 8 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
11 Call 10 Kernel_C.lookup_fault_invalid_root_new() -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
12 Cond 11 5 !(!((vspace_root___ptr_to_struct_pte_C#v : Word 64) == 0))
13 Basic 12 {
    var vspace_root___ptr_to_struct_pte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) + (8 * (asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1)))
}
14 Cond 13 Err ((asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Struct Kernel_C.asid_pool_C, poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) && (0 <=s 9) && (9 <s 64)
15 Basic 1 {
    var ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
16 Basic 15 {
    var ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = WordCastSigned(2)
}
17 Basic 16 {
    var ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = WordCastSigned(0)
}
18 Basic 17 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
20 Call 19 Kernel_C.lookup_fault_invalid_root_new() -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
21 Cond 20 14 !(!((poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) == 0))
22 Basic 21 {
    var poolPtr___ptr_to_struct_asid_pool_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((riscvKSASIDTable : Word 64) + (8 * (asid___unsigned_long#v : Word 64) >> WordCast(9)))
}
23 Cond 22 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
24 Cond 23 Err (((asid___unsigned_long#v : Word 64) >> WordCast(9)) < WordCastSigned(128)) && (0 <=s 9) && (9 <s 64)
EntryPoint 24

Function Kernel_C.handleDoubleFault(tptr___ptr_to_struct_tcb_C#v : Word 64, ex1___struct_seL4_Fault_C#v.words_C.0 : Word 64, ex1___struct_seL4_Fault_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setThreadState(tptr___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.handleReservedIRQ(irq___unsigned_long#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.handleSpuriousIRQ() -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.initIRQController(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.plic_init_controller(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.invokeCNodeDelete(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.cteDelete(destSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.invokeCNodeInsert(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.cteInsert(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.invokeCNodeRevoke(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.cteRevoke(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.invokeCNodeRotate(cap1___struct_cap_C#v.words_C.0 : Word 64, cap1___struct_cap_C#v.words_C.1 : Word 64, cap2___struct_cap_C#v.words_C.0 : Word 64, cap2___struct_cap_C#v.words_C.1 : Word 64, slot1___ptr_to_struct_cte_C#v : Word 64, slot2___ptr_to_struct_cte_C#v : Word 64, slot3___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.cteSwap(cap1___struct_cap_C#v.words_C.0 : Word 64, cap1___struct_cap_C#v.words_C.1 : Word 64, slot1___ptr_to_struct_cte_C#v : Word 64, cap2___struct_cap_C#v.words_C.0 : Word 64, cap2___struct_cap_C#v.words_C.1 : Word 64, slot2___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 3 Kernel_C.cteMove(cap1___struct_cap_C#v.words_C.0 : Word 64, cap1___struct_cap_C#v.words_C.1 : Word 64, slot1___ptr_to_struct_cte_C#v : Word 64, slot2___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.cteMove(cap2___struct_cap_C#v.words_C.0 : Word 64, cap2___struct_cap_C#v.words_C.1 : Word 64, slot2___ptr_to_struct_cte_C#v : Word 64, slot3___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 4 6 (slot1___ptr_to_struct_cte_C#v : Word 64) == (slot3___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 7

Function Kernel_C.invokeTCB_Suspend(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.suspend(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.isFinalCapability(cte___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
5 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(!(!((ret__unsigned_long#v : Word 64) == 0)), 1, 0))
}
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.sameObjectAs((Mem : Mem) -MemAcc-> ((cte___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((next___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((next___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte___ptr_to_struct_cte_C#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.cte_C, next___ptr_to_struct_cte_C#v : Word 64)
9 Basic 8 {
    var next___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.mdb_node_get_mdbNext(mdb___struct_mdb_node_C#v.words_C.0 : Word 64, mdb___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 4 11 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.mdb_node_get_mdbNext(mdb___struct_mdb_node_C#v.words_C.0 : Word 64, mdb___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Cond 3 14 !((prevIsSameObject___unsigned_long#v : Word 64) == 0)
16 Basic 15 {
    var prevIsSameObject___unsigned_long#v : Word 64 = WordCastSigned(0)
}
17 Basic 15 {
    var prevIsSameObject___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.sameObjectAs((Mem : Mem) -MemAcc-> ((prev___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((prev___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), (Mem : Mem) -MemAcc-> ((cte___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cte___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, prev___ptr_to_struct_cte_C#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.cte_C, cte___ptr_to_struct_cte_C#v : Word 64)
20 Basic 19 {
    var prev___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.mdb_node_get_mdbPrev(mdb___struct_mdb_node_C#v.words_C.0 : Word 64, mdb___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Cond 16 22 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.mdb_node_get_mdbPrev(mdb___struct_mdb_node_C#v.words_C.0 : Word 64, mdb___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Basic 25 {
    var mdb___struct_mdb_node_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((cte___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0))
    var mdb___struct_mdb_node_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((cte___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))
}
27 Cond 26 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cte___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 27

Function Kernel_C.isValidVTableRoot(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_page_table_cap_get_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Cond 6 3 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3), 1, 0)
}
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 10

Function Kernel_C.map_kernel_window(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.map_kernel_devices(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 3 Err (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
8 Basic 7 {
    var paddr___unsigned_long#v : Word 64 = (paddr___unsigned_long#v : Word 64) + 1 << WordCast((9 * 3 - 1 - 1) + 12)
}
9 Cond 8 Err (0 <=s ((9 * 3 - 1 - 1) + 12)) && (((9 * 3 - 1 - 1) + 12) <s 64) && (((9 * 3 - 1 - 1) <=s ((9 * 3 - 1 - 1) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 1)) == WordCastSigned(9 * 3 - 1 - 1)) && ((0 <=s (3 - 1 - 1)) == (1 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
10 Basic 9 {
    var pptr___unsigned_long#v : Word 64 = (pptr___unsigned_long#v : Word 64) + 1 << WordCast((9 * 3 - 1 - 1) + 12)
}
11 Cond 10 Err (0 <=s ((9 * 3 - 1 - 1) + 12)) && (((9 * 3 - 1 - 1) + 12) <s 64) && (((9 * 3 - 1 - 1) <=s ((9 * 3 - 1 - 1) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 1)) == WordCastSigned(9 * 3 - 1 - 1)) && ((0 <=s (3 - 1 - 1)) == (1 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
12 Basic 11 {
    var index___unsigned_long#v : Word 64 = (index___unsigned_long#v : Word 64) + WordCastSigned(1)
}
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, (kernel_image_level2_pt : Word 64) + (8 * (index___unsigned_long#v : Word 64)) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
14 Cond 13 Err ((index___unsigned_long#v : Word 64) < WordCastSigned(512)) && PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_image_level2_pt : Word 64)
15 Basic 14 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
16 Call 15 Kernel_C.pte_next(paddr___unsigned_long#v : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
3 Basic 4 {
    var loop#3#count : Word 64 = (loop#3#count : Word 64) + 1
}
4 Cond 5 Err true
5 Cond 16 2 (pptr___unsigned_long#v : Word 64) < (-2147483648 + 1 << WordCast((9 * 3 - 1 - 0) + 12))
6 Basic 4 {
    var loop#3#count : Word 64 = 0
}
17 Cond 6 Err (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
18 Basic 17 {
    var Mem : Mem = MemUpdate(Mem : Mem, (kernel_root_pageTable : Word 64) + (8 * ((pptr___unsigned_long#v : Word 64) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1)) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
19 Cond 18 Err (((pptr___unsigned_long#v : Word 64) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64) && (0 <=s 9) && (9 <s 64) && (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
20 Basic 19 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
21 Call 20 Kernel_C.pte_next(ret__unsigned_long#v : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
22 Basic 21 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
23 Call 22 Kernel_C.kpptr_to_paddr(kernel_image_level2_pt : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
24 Cond 23 Err PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_image_level2_pt : Word 64)
25 Basic 24 {
    var Mem : Mem = MemUpdate(Mem : Mem, (kernel_root_pageTable : Word 64) + (8 * ((WordCast(2147483648) + 67108864 + -274877906944 - 0) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1)) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
26 Cond 25 Err (((WordCast(2147483648) + 67108864 + -274877906944 - 0) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64) && (0 <=s 9) && (9 <s 64) && (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
27 Basic 26 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
28 Call 27 Kernel_C.pte_next(ret__unsigned_long#v : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
29 Basic 28 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
30 Call 29 Kernel_C.kpptr_to_paddr(kernel_image_level2_pt : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
31 Cond 30 Err PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_image_level2_pt : Word 64)
32 Basic 31 {
    var index___unsigned_long#v : Word 64 = WordCastSigned(0)
}
33 Basic 32 {
    var paddr___unsigned_long#v : Word 64 = (WordCast(2147483648) + 67108864) >> WordCast((9 * 3 - 1 - 0) + 12) << WordCast((9 * 3 - 1 - 0) + 12)
}
34 Cond 33 Err (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3)) && (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
39 Basic 35 {
    var paddr___unsigned_long#v : Word 64 = (paddr___unsigned_long#v : Word 64) + 1 << WordCast((9 * 3 - 1 - 0) + 12)
}
40 Cond 39 Err (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
41 Basic 40 {
    var pptr___unsigned_long#v : Word 64 = (pptr___unsigned_long#v : Word 64) + 1 << WordCast((9 * 3 - 1 - 0) + 12)
}
42 Cond 41 Err (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
43 Basic 42 {
    var Mem : Mem = MemUpdate(Mem : Mem, (kernel_root_pageTable : Word 64) + (8 * ((pptr___unsigned_long#v : Word 64) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1)) + 0 + 0, ret__struct_pte_C#v.words_C.0 : Word 64)
}
44 Cond 43 Err (((pptr___unsigned_long#v : Word 64) >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64) && (0 <=s 9) && (9 <s 64) && (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
45 Basic 44 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
46 Call 45 Kernel_C.pte_next(paddr___unsigned_long#v : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
35 Basic 36 {
    var loop#35#count : Word 64 = (loop#35#count : Word 64) + 1
}
36 Cond 37 Err true
37 Cond 46 34 (pptr___unsigned_long#v : Word 64) < -2147483648
38 Basic 36 {
    var loop#35#count : Word 64 = 0
}
47 Basic 38 {
    var paddr___unsigned_long#v : Word 64 = 0
}
48 Basic 47 {
    var pptr___unsigned_long#v : Word 64 = -274877906944
}
EntryPoint 48

Function Kernel_C.paddr_to_pptr_reg(p_reg___struct_p_region_C#v.start_C : Word 64, p_reg___struct_p_region_C#v.end_C : Word 64) -- updates: (ret__struct_region_C#v.start_C : Word 64, ret__struct_region_C#v.end_C : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_region_C#v.start_C : Word 64 = (p_reg___struct_p_region_C#v.start_C : Word 64) + -274877906944 - 0
    var ret__struct_region_C#v.end_C : Word 64 = (p_reg___struct_p_region_C#v.end_C : Word 64) + -274877906944 - 0
}
EntryPoint 3

Function Kernel_C.plat_cleanL2Range(start___unsigned_long#v : Word 64, end___unsigned_long#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.plic_claim_offset(hart_id___unsigned_long#v : Word 64, context_id___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = addr___unsigned_long#v : Word 64
}
4 Basic 3 {
    var addr___unsigned_long#v : Word 64 = (ret__unsigned_long#v : Word 64) + WordCastSigned(4)
}
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.plic_thres_offset(hart_id___unsigned_long#v : Word 64, context_id___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 6

Function Kernel_C.plic_thres_offset(hart_id___unsigned_long#v : Word 64, context_id___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = addr___unsigned_long#v : Word 64
}
4 Basic 3 {
    var addr___unsigned_long#v : Word 64 = WordCastSigned(2097152) + ((hart_id___unsigned_long#v : Word 64) * WordCastSigned(8192)) + ((context_id___unsigned_long#v : Word 64) * WordCastSigned(4096)) - WordCastSigned(4096)
}
EntryPoint 4

Function Kernel_C.populate_bi_frame(node_id___unsigned_long#v : Word 64, num_nodes___unsigned_long#v : Word 64, ipcbuf_vptr___unsigned_long#v : Word 64, extra_bi_size___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32), extra_bi_size___unsigned_long#v : Word 64)
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
4 Cond 3 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32))
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32) + 144, (Mem : Mem) -MemAcc-> ((ksDomSchedule : Word 64) + (16 * (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64)) + 0))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64) && PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32)) && ((Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64) < WordCastSigned(3))
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64) && PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32) + 136, WordCastSigned(19))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32))
13 Cond 12 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
14 Basic 13 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32) + 32, ipcbuf_vptr___unsigned_long#v : Word 64)
}
15 Cond 14 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
16 Cond 15 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32))
17 Cond 16 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
18 Basic 17 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32) + 24, WordCastSigned(0))
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
20 Cond 19 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32))
21 Cond 20 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
22 Basic 21 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32) + 16, num_nodes___unsigned_long#v : Word 64)
}
23 Cond 22 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
24 Cond 23 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32))
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
26 Basic 25 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32) + 8, node_id___unsigned_long#v : Word 64)
}
27 Cond 26 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
28 Cond 27 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32))
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
30 Basic 29 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 592, WordCastSigned(12))
}
31 Cond 30 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
32 Basic 31 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 584, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32))
}
33 Cond 32 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64) && PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
34 Call 33 Kernel_C.clearMemory((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 40), WordCast(ret__unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
35 Cond 34 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
36 Basic 35 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
37 Call 36 Kernel_C.calculate_extra_bi_size_bits(extra_bi_size___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
38 Cond 37 33 !((extra_bi_size___unsigned_long#v : Word 64) == 0)
39 Call 38 Kernel_C.clearMemory((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32), WordCastSigned(12), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
40 Cond 39 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
EntryPoint 40

Function Kernel_C.pptr_to_paddr_reg(reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64) -- updates: (ret__struct_p_region_C#v.start_C : Word 64, ret__struct_p_region_C#v.end_C : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_p_region_C#v.start_C : Word 64 = (reg___struct_region_C#v.start_C : Word 64) - -274877906944 - 0
    var ret__struct_p_region_C#v.end_C : Word 64 = (reg___struct_region_C#v.end_C : Word 64) - -274877906944 - 0
}
EntryPoint 3

Function Kernel_C.pte_ptr_get_valid(pte_ptr___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((pte_ptr___ptr_to_struct_pte_C#v : Word 64) + (8 * 0)) & 1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 1) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.pte_C, pte_ptr___ptr_to_struct_pte_C#v : Word 64)
EntryPoint 11

Function Kernel_C.pte_ptr_get_write(pte_ptr___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((pte_ptr___ptr_to_struct_pte_C#v : Word 64) + (8 * 0)) & 4 >> WordCast(2)
}
11 Cond 10 Err (0 <=s 2) && (2 <s 64) && (0 <s 1) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.pte_C, pte_ptr___ptr_to_struct_pte_C#v : Word 64)
EntryPoint 11

Function Kernel_C.switchToThread_fp(thread___ptr_to_struct_tcb_C#v : Word 64, vroot___ptr_to_struct_pte_C#v : Word 64, stored_hw_asid___struct_pte_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksCurThread : Word 64, thread___ptr_to_struct_tcb_C#v : Word 64)
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Call 3 Kernel_C.setVSpaceRoot(ret__unsigned_long#v : Word 64, asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.addrFromPPtr(vroot___ptr_to_struct_pte_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
7 Basic 6 {
    var asid___unsigned_long#v : Word 64 = WordCast(stored_hw_asid___struct_pte_C#v.words_C.0 : Word 64)
}
8 Cond 7 Err (0 <s 1) && (0 <=s 0)
EntryPoint 8

Function Kernel_C.Arch_getObjectSize(t___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(12)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(21)
}
5 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(30)
}
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
7 Cond 6 Err false
8 Call 7 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
9 Cond 8 Err false
10 Cond 9 2 true
11 Cond 5 10 ((t___unsigned_long#v : Word 64) == WordCastSigned(5)) || false
12 Cond 4 11 ((t___unsigned_long#v : Word 64) == WordCastSigned(7)) || false
13 Cond 3 12 ((t___unsigned_long#v : Word 64) == WordCastSigned(8)) || ((t___unsigned_long#v : Word 64) == WordCastSigned(6)) || false
EntryPoint 13

Function Kernel_C.Arch_maskCapRights(cap_rights_mask___struct_seL4_CapRights_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Call 4 Kernel_C.cap_frame_cap_set_capFVMRights(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(ret__unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.wordFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Basic 7 {
    var vm_rights___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.maskVMRights(vm_rights___unsigned_long#v : Word 64, cap_rights_mask___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var vm_rights___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.vmRightsFromWord(WordCast(ret__unsigned_longlong#v : Word 64)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.cap_frame_cap_get_capFVMRights(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
15 Cond 13 14 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 17

Function Kernel_C.Arch_updateCapData(preserve___unsigned_long#v : Word 64, data___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
EntryPoint 3

Function Kernel_C.c_handle_exception(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.StrictC'__builtin_unreachable(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
3 Call 2 Kernel_C.restore_user_context(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.handleVMFaultEvent(scause___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 3 Kernel_C.handleUserLevelFault(scause___unsigned_long#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 3 true
7 Cond 4 6 ((scause___unsigned_long#v : Word 64) == WordCastSigned(12)) || ((scause___unsigned_long#v : Word 64) == WordCastSigned(15)) || ((scause___unsigned_long#v : Word 64) == WordCastSigned(13)) || ((scause___unsigned_long#v : Word 64) == WordCastSigned(7)) || ((scause___unsigned_long#v : Word 64) == WordCastSigned(5)) || ((scause___unsigned_long#v : Word 64) == WordCastSigned(1)) || false
8 Basic 7 {
    var scause___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.read_scause(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Call 9 Kernel_C.c_entry_hook() -- updates ()
11 Basic 12 {
    var loop#11#count : Word 64 = (loop#11#count : Word 64) + 1
}
12 Cond 13 Err true
13 Cond 11 10 !(0 == 0)
14 Basic 12 {
    var loop#11#count : Word 64 = 0
}
EntryPoint 14

Function Kernel_C.c_handle_interrupt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.StrictC'__builtin_unreachable(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
3 Call 2 Kernel_C.restore_user_context(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Call 3 Kernel_C.handleInterruptEntry(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.c_entry_hook() -- updates ()
6 Basic 7 {
    var loop#6#count : Word 64 = (loop#6#count : Word 64) + 1
}
7 Cond 8 Err true
8 Cond 6 5 !(0 == 0)
9 Basic 7 {
    var loop#6#count : Word 64 = 0
}
EntryPoint 9

Function Kernel_C.cap_capType_equals(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, cap_type_tag___unsigned_longlong#v : Word 64) -- updates: (ret__int#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__int#v : Word 32 = IfThenElse(((cap___struct_cap_C#v.words_C.0 : Word 64) >> WordCast(59)) & 31 == (cap_type_tag___unsigned_longlong#v : Word 64), 1, 0)
}
4 Cond 3 Err (0 <=s 59) && (59 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 4

Function Kernel_C.cap_domain_cap_new() -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(20) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.cap_get_archCapPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__ptr_to_void#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
4 Basic 3 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.cap_frame_cap_get_capFBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCastSigned(0)
}
10 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.cap_asid_pool_cap_get_capASIDPool(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Basic 1 {
    var ret__ptr_to_void#v : Word 64 = WordCastSigned(0)
}
14 Cond 13 2 true
15 Cond 12 14 ((ctag___enum_cap_tag#v : Word 32) == 13) || false
16 Cond 9 15 ((ctag___enum_cap_tag#v : Word 32) == 11) || false
17 Cond 8 16 ((ctag___enum_cap_tag#v : Word 32) == 3) || false
18 Cond 5 17 ((ctag___enum_cap_tag#v : Word 32) == 1) || false
19 Basic 18 {
    var ctag___enum_cap_tag#v : Word 32 = WordCast(ret__unsigned_longlong#v : Word 64)
}
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 21

Function Kernel_C.cap_thread_cap_new(capTCBPtr___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(12) & 31 << WordCast(59)) | ((capTCBPtr___unsigned_longlong#v : Word 64) & 549755813887 >> WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.cap_zombie_cap_new(capZombieID___unsigned_longlong#v : Word 64, capZombieType___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capZombieID___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(18) & 31 << WordCast(59)) | ((capZombieType___unsigned_longlong#v : Word 64) & 127 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.copyGlobalMappings(newLvl1pt___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Cond 2 Err (0 <=s 9) && (9 <s 64)
7 Basic 6 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
8 Basic 7 {
    var Mem : Mem = MemUpdate(Mem : Mem, (newLvl1pt___ptr_to_struct_pte_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 8) + 0 + 0, (Mem : Mem) -MemAcc-> ((global_kernel_vspace___ptr_to_struct_pte_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 8) + 0 + (8 * 0)))
}
9 Cond 8 Err ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, newLvl1pt___ptr_to_struct_pte_C#v : Word 64, i___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.pte_C, (newLvl1pt___ptr_to_struct_pte_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 8)) && ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, global_kernel_vspace___ptr_to_struct_pte_C#v : Word 64, i___unsigned_long#v : Word 64) && PValid(HTD : HTD, Struct Kernel_C.pte_C, (global_kernel_vspace___ptr_to_struct_pte_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 8)) && ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, newLvl1pt___ptr_to_struct_pte_C#v : Word 64, (i___unsigned_long#v : Word 64) + 1) && ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.pte_C, global_kernel_vspace___ptr_to_struct_pte_C#v : Word 64, (i___unsigned_long#v : Word 64) + 1)
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 9 1 (i___unsigned_long#v : Word 64) < (1 << WordCast(9))
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
10 Cond 5 Err (0 <=s 9) && (9 <s 64)
11 Basic 10 {
    var i___unsigned_long#v : Word 64 = (-274877906944 >> WordCast((9 * 3 - 1 - 0) + 12)) & (1 << WordCast(9) - 1)
}
12 Cond 11 Err (0 <=s 9) && (9 <s 64) && (0 <=s ((9 * 3 - 1 - 0) + 12)) && (((9 * 3 - 1 - 0) + 12) <s 64) && (((9 * 3 - 1 - 0) <=s ((9 * 3 - 1 - 0) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - 0)) == WordCastSigned(9 * 3 - 1 - 0)) && ((0 <=s (3 - 1 - 0)) == (0 <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
13 Basic 12 {
    var global_kernel_vspace___ptr_to_struct_pte_C#v : Word 64 = kernel_root_pageTable : Word 64
}
14 Cond 13 Err PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64)
EntryPoint 14

Function Kernel_C.create_idle_thread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Call 3 Kernel_C.configureIdleThread((Mem : Mem) -MemAcc-> (ksIdleThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksIdleThread : Word 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksIdleThread : Word 64, (pptr___unsigned_long#v : Word 64) + 1 << WordCast(10 - 1))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksIdleThread : Word 64)
8 Cond 7 Err (0 <=s (10 - 1)) && ((10 - 1) <s 64) && ((0 <=s (10 - 1)) == (1 <=s 10))
9 Basic 8 {
    var pptr___unsigned_long#v : Word 64 = (ksIdleThreadTCB : Word 64) + (0 * 1024)
}
10 Cond 9 Err (0 <s 1) && (0 <=s 0) && PValid(HTD : HTD, Array (Array (Word 8) 1024) 1, ksIdleThreadTCB : Word 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Array (Word 8) 1024, (ksIdleThreadTCB : Word 64) + (0 * 1024), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Array (Word 8) 1024, ksIdleThreadTCB : Word 64, WordCast(0)))
EntryPoint 10

Function Kernel_C.decodeSetIPCBuffer(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_ThreadControl(WordCast(ret__unsigned_longlong#v : Word 64), slot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0), struct_cap_C_eret_2#v.words_C.0 : Word 64, struct_cap_C_eret_2#v.words_C.1 : Word 64, WordCastSigned(0), cptr_bufferPtr___unsigned_long#v : Word 64, bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, bufferSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var struct_cap_C_eret_2#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var struct_cap_C_eret_2#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Basic 7 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Call 11 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Cond 12 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
14 Basic 13 {
    var bufferSlot___ptr_to_struct_cte_C#v : Word 64 = WordCastSigned(0)
}
15 Basic 1 {
    var ret__unsigned_long#v : Word 64 = e___unsigned_long#v : Word 64
}
16 Cond 15 13 !((e___unsigned_long#v : Word 64) == WordCastSigned(0))
17 Basic 16 {
    var e___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.checkValidIPCBuffer(cptr_bufferPtr___unsigned_long#v : Word 64, bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Basic 18 {
    var bufferCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var bufferCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
20 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
21 Cond 20 19 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
22 Basic 21 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
23 Call 22 Kernel_C.deriveCap(bufferSlot___ptr_to_struct_cte_C#v : Word 64, bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Cond 14 23 (cptr_bufferPtr___unsigned_long#v : Word 64) == WordCastSigned(0)
25 Basic 24 {
    var bufferCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var bufferCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
26 Cond 25 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
27 Cond 26 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
29 Basic 28 {
    var bufferSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))
}
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
31 Cond 30 Err (0 <s 3) && (0 <=s 0)
32 Basic 31 {
    var cptr_bufferPtr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
33 Call 32 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
34 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
35 Basic 34 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
36 Cond 35 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
37 Cond 36 33 !((ret__int#v : Word 32) == 0)
38 Basic 37 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
39 Cond 38 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
40 Cond 39 Err (0 <s 3) && (0 <=s 0)
41 Cond 37 40 !((ret__int#v : Word 32) == 0)
42 Basic 41 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(1), 1, 0)
}
EntryPoint 42

Function Kernel_C.decodeTCBConfigure(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_ThreadControl(WordCast(ret__unsigned_longlong#v : Word 64), slot___ptr_to_struct_cte_C#v : Word 64, faultEP___unsigned_long#v : Word 64, WordCastSigned(0), WordCastSigned(0), cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64, cRootSlot___ptr_to_struct_cte_C#v : Word 64, vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64, vRootSlot___ptr_to_struct_cte_C#v : Word 64, bufferAddr___unsigned_long#v : Word 64, bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, bufferSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(4 | 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Call 7 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
10 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
11 Basic 10 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
12 Cond 11 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
13 Cond 12 9 !(!((ret__unsigned_long#v : Word 64) == 0))
14 Basic 13 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
15 Call 14 Kernel_C.isValidVTableRoot(vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
16 Basic 15 {
    var vRootCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var vRootCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
18 Cond 17 16 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
19 Basic 18 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
20 Call 19 Kernel_C.deriveCap(vRootSlot___ptr_to_struct_cte_C#v : Word 64, vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Basic 20 {
    var vRootCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var vRootCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
22 Call 21 Kernel_C.updateCapData(WordCastSigned(0), vRootData___unsigned_long#v : Word 64, vRootCap___struct_cap_C#v.words_C.0 : Word 64, vRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
23 Cond 22 20 !((vRootData___unsigned_long#v : Word 64) == WordCastSigned(0))
24 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
25 Basic 24 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
26 Cond 25 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
27 Cond 26 23 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10))
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.cap_get_capType(cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Basic 29 {
    var cRootCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var cRootCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
31 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
32 Cond 31 30 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
33 Basic 32 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
34 Call 33 Kernel_C.deriveCap(cRootSlot___ptr_to_struct_cte_C#v : Word 64, cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
35 Basic 34 {
    var cRootCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cRootCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
36 Call 35 Kernel_C.updateCapData(WordCastSigned(0), cRootData___unsigned_long#v : Word 64, cRootCap___struct_cap_C#v.words_C.0 : Word 64, cRootCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
37 Cond 36 34 !((cRootData___unsigned_long#v : Word 64) == WordCastSigned(0))
38 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
39 Basic 38 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
40 Cond 39 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
41 Cond 40 37 !((ret__int#v : Word 32) == 0)
42 Basic 41 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
43 Cond 42 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
44 Basic 43 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
45 Call 44 Kernel_C.slotCapLongRunningDelete(WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
46 Cond 45 Err (0 <=s 10) && (10 <s 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
47 Basic 46 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
48 Call 47 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
49 Cond 41 48 !((ret__int#v : Word 32) == 0)
50 Basic 49 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
51 Cond 50 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
52 Basic 51 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
53 Call 52 Kernel_C.slotCapLongRunningDelete(WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
54 Cond 53 Err (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
55 Basic 54 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
56 Call 55 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
57 Basic 56 {
    var bufferSlot___ptr_to_struct_cte_C#v : Word 64 = WordCastSigned(0)
}
58 Basic 1 {
    var ret__unsigned_long#v : Word 64 = e___unsigned_long#v : Word 64
}
59 Cond 58 56 !((e___unsigned_long#v : Word 64) == WordCastSigned(0))
60 Basic 59 {
    var e___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
61 Call 60 Kernel_C.checkValidIPCBuffer(bufferAddr___unsigned_long#v : Word 64, bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
62 Basic 61 {
    var bufferCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var bufferCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
63 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
64 Cond 63 62 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
65 Basic 64 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
66 Call 65 Kernel_C.deriveCap(bufferSlot___ptr_to_struct_cte_C#v : Word 64, bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
67 Cond 57 66 (bufferAddr___unsigned_long#v : Word 64) == WordCastSigned(0)
68 Basic 67 {
    var bufferCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 2)) + 0 + (8 * 0))
    var bufferCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 2)) + 0 + (8 * 1))
}
69 Cond 68 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
70 Cond 69 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 2))) && (2 <s 3) && (0 <=s 2)
71 Cond 70 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
72 Basic 71 {
    var bufferSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 2))
}
73 Cond 72 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
74 Cond 73 Err (2 <s 3) && (0 <=s 2)
75 Basic 74 {
    var vRootCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 0))
    var vRootCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 1))
}
76 Cond 75 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
77 Cond 76 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1))) && (1 <s 3) && (0 <=s 1)
78 Cond 77 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
79 Basic 78 {
    var vRootSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1))
}
80 Cond 79 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
81 Cond 80 Err (1 <s 3) && (0 <=s 1)
82 Basic 81 {
    var cRootCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var cRootCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
83 Cond 82 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
84 Cond 83 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
85 Cond 84 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
86 Basic 85 {
    var cRootSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))
}
87 Cond 86 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
88 Cond 87 Err (0 <s 3) && (0 <=s 0)
89 Basic 88 {
    var bufferAddr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
90 Call 89 Kernel_C.getSyscallArg(WordCastSigned(3), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
91 Basic 90 {
    var vRootData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
92 Call 91 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
93 Basic 92 {
    var cRootData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
94 Call 93 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
95 Basic 94 {
    var faultEP___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
96 Call 95 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
97 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
98 Basic 97 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
99 Cond 98 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
100 Cond 99 96 !((ret__int#v : Word 32) == 0)
101 Basic 100 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 2)) == WordCastSigned(0), 1, 0)
}
102 Cond 101 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
103 Cond 102 Err (2 <s 3) && (0 <=s 2)
104 Cond 100 103 !((ret__int#v : Word 32) == 0)
105 Basic 104 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) == WordCastSigned(0), 1, 0)
}
106 Cond 105 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
107 Cond 106 Err (1 <s 3) && (0 <=s 1)
108 Cond 104 107 !((ret__int#v : Word 32) == 0)
109 Basic 108 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
110 Cond 109 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
111 Cond 110 Err (0 <s 3) && (0 <=s 0)
112 Cond 108 111 !((ret__int#v : Word 32) == 0)
113 Basic 112 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(4), 1, 0)
}
EntryPoint 113

Function Kernel_C.deletingIRQHandler(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.cteDeleteOne(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var GhostAssertions : WordArray 50 64 = WordArrayUpdate(GhostAssertions : WordArray 50 64, 502, WordCast(6))
}
4 Cond 3 Err true
5 Basic 4 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = (intStateIRQNode : Word 64) + ((irq___unsigned_long#v : Word 64) * 32)
}
6 Cond 5 Err PValid(HTD : HTD, Array (Struct Kernel_C.cte_C) 64, intStateIRQNode : Word 64) && ((irq___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, intStateIRQNode : Word 64, irq___unsigned_long#v : Word 64)
EntryPoint 6

Function Kernel_C.get_num_dev_p_regs(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.handleVMFaultEvent(vm_faultType___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.activateThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.schedule(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.handleFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Cond 7 5 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
9 Basic 8 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
10 Call 9 Kernel_C.handleVMFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), vm_faultType___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 10 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 11

Function Kernel_C.map_kernel_devices(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Cond 2 Err !(24 == 0)
7 Basic 6 {
    var i___int#v : Word 32 = (i___int#v : Word 32) + 1
}
8 Cond 7 Err ((i___int#v : Word 32) <=s ((i___int#v : Word 32) + 1)) == (0 <=s 1)
9 Call 8 Kernel_C.reserve_region(reg___struct_p_region_C#v.start_C : Word 64, reg___struct_p_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Basic 9 {
    var reg___struct_p_region_C#v.start_C : Word 64 = (Mem : Mem) -MemAcc-> ((kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24))
    var reg___struct_p_region_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24)) + WordCastSigned(1 << 12)
}
11 Cond 10 Err (0 <=s 12) && (1 == 0) || (1 < (1 << 31 >> 12)) && (0 <=s 1) && ((i___int#v : Word 32) <s 1) && (0 <=s (i___int#v : Word 32)) && PValid(HTD : HTD, Array (Struct Kernel_C.kernel_frame_C) 1, kernel_devices : Word 64) && ((i___int#v : Word 32) <s 1) && (0 <=s (i___int#v : Word 32)) && PValid(HTD : HTD, Array (Struct Kernel_C.kernel_frame_C) 1, kernel_devices : Word 64) && ((i___int#v : Word 32) == 0) || (((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, (kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24), WordCast(0 - (i___int#v : Word 32)))) || (!((i___int#v : Word 32) == 0) && !((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, kernel_devices : Word 64, WordCast(i___int#v : Word 32))) && ((i___int#v : Word 32) == 0) || (((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, (kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24), WordCast(0 - (i___int#v : Word 32)))) || (!((i___int#v : Word 32) == 0) && !((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, kernel_devices : Word 64, WordCast(i___int#v : Word 32)))
12 Cond 11 8 !(!((Mem : Mem) -MemAcc-> ((kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24) + 16) == 0))
13 Cond 12 Err ((i___int#v : Word 32) <s 1) && (0 <=s (i___int#v : Word 32)) && PValid(HTD : HTD, Array (Struct Kernel_C.kernel_frame_C) 1, kernel_devices : Word 64) && ((i___int#v : Word 32) == 0) || (((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, (kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24), WordCast(0 - (i___int#v : Word 32)))) || (!((i___int#v : Word 32) == 0) && !((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, kernel_devices : Word 64, WordCast(i___int#v : Word 32)))
14 Cond 13 Err ((i___int#v : Word 32) == 0) || (((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, (kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24), WordCast(0 - (i___int#v : Word 32)))) || (!((i___int#v : Word 32) == 0) && !((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, kernel_devices : Word 64, WordCast(i___int#v : Word 32)))
15 Call 14 Kernel_C.map_kernel_frame((Mem : Mem) -MemAcc-> ((kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24)), -1073741824, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 Err ((i___int#v : Word 32) <s 1) && (0 <=s (i___int#v : Word 32)) && PValid(HTD : HTD, Array (Struct Kernel_C.kernel_frame_C) 1, kernel_devices : Word 64) && ((i___int#v : Word 32) == 0) || (((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, (kernel_devices : Word 64) + (WordCastSigned(i___int#v : Word 32) * 24), WordCast(0 - (i___int#v : Word 32)))) || (!((i___int#v : Word 32) == 0) && !((i___int#v : Word 32) <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.kernel_frame_C, kernel_devices : Word 64, WordCast(i___int#v : Word 32)))
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 16 1 WordCastSigned(i___int#v : Word 32) < (24 / 24)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
17 Cond 5 Err !(24 == 0)
18 Basic 17 {
    var i___int#v : Word 32 = 0
}
19 Cond 1 18 (kernel_devices : Word 64) == WordCastSigned(0)
20 Cond 19 Err PValid(HTD : HTD, Array (Struct Kernel_C.kernel_frame_C) 1, kernel_devices : Word 64)
EntryPoint 20

Function Kernel_C.ntfn_ptr_get_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_tcb_queue_C#v.head_C : Word 64, ret__struct_tcb_queue_C#v.end_C : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_tcb_queue_C#v.head_C : Word 64 = ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64
    var ret__struct_tcb_queue_C#v.end_C : Word 64 = ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64
}
4 Basic 3 {
    var ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.notification_ptr_get_ntfnQueue_tail(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Basic 6 {
    var ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.notification_ptr_get_ntfnQueue_head(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 9

Function Kernel_C.ntfn_ptr_set_queue(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64, ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.notification_ptr_set_ntfnQueue_tail(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCast(ntfn_queue___struct_tcb_queue_C#v.end_C : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.notification_ptr_set_ntfnQueue_head(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCast(ntfn_queue___struct_tcb_queue_C#v.head_C : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 3

Function Kernel_C.plic_enable_offset(hart_id___unsigned_long#v : Word 64, context_id___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = addr___unsigned_long#v : Word 64
}
4 Basic 3 {
    var addr___unsigned_long#v : Word 64 = WordCastSigned(8192) + ((hart_id___unsigned_long#v : Word 64) * WordCastSigned(256)) + ((context_id___unsigned_long#v : Word 64) * WordCastSigned(128)) - WordCastSigned(128)
}
EntryPoint 4

Function Kernel_C.read_current_timer(timer_val___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__int#v : Word 32 = 0
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, timer_val___ptr_to_unsigned_long#v : Word 64, WordCast(ret__unsigned_longlong#v : Word 64))
}
5 Cond 4 Err PValid(HTD : HTD, Word 64, timer_val___ptr_to_unsigned_long#v : Word 64)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.riscv_read_time(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 7

Function Kernel_C.ready_queues_index(dom___unsigned_long#v : Word 64, prio___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = ((dom___unsigned_long#v : Word 64) * WordCastSigned(256)) + (prio___unsigned_long#v : Word 64)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = prio___unsigned_long#v : Word 64
}
5 Cond 3 4 1 <s 16
EntryPoint 5

Function Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksSchedulerAction : Word 64, WordCastSigned(1))
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
4 Call 3 Kernel_C.tcbSchedEnqueue((Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
6 Cond 5 3 !((Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64) == WordCastSigned(0)) && !((Mem : Mem) -MemAcc-> (ksSchedulerAction : Word 64) == WordCastSigned(1))
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksSchedulerAction : Word 64)
EntryPoint 7

Function Kernel_C.resolveAddressBits(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, n_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64, ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64, ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
4 Basic 3 {
    var ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
9 Basic 1 {
    var ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
10 Basic 9 {
    var ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = n_bits___unsigned_long#v : Word 64
}
11 Basic 10 {
    var ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = slot___ptr_to_struct_cte_C#v : Word 64
}
12 Basic 11 {
    var ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
13 Cond 12 5 !(!(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10))))
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capType(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Basic 15 {
    var nodeCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var nodeCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
18 Basic 17 {
    var n_bits___unsigned_long#v : Word 64 = (n_bits___unsigned_long#v : Word 64) - (levelBits___unsigned_long#v : Word 64)
}
19 Basic 18 { }
20 Cond 19 Err 0 < (levelBits___unsigned_long#v : Word 64)
21 Basic 1 {
    var ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
22 Basic 21 {
    var ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = WordCastSigned(0)
}
23 Basic 22 {
    var ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = slot___ptr_to_struct_cte_C#v : Word 64
}
24 Basic 23 {
    var ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
25 Cond 24 20 !(!((n_bits___unsigned_long#v : Word 64) <= (levelBits___unsigned_long#v : Word 64)))
26 Basic 25 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64) + ((offset___unsigned_long#v : Word 64) * 32)
}
27 Cond 26 Err ((offset___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64), offset___unsigned_long#v : Word 64)
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.cap_cnode_cap_get_capCNodePtr(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Basic 29 {
    var offset___unsigned_long#v : Word 64 = ((capptr___unsigned_long#v : Word 64) >> ((n_bits___unsigned_long#v : Word 64) - (levelBits___unsigned_long#v : Word 64))) & (1 << (radixBits___unsigned_long#v : Word 64) - 1)
}
31 Cond 30 Err ((radixBits___unsigned_long#v : Word 64) < WordCastSigned(64)) && (((n_bits___unsigned_long#v : Word 64) - (levelBits___unsigned_long#v : Word 64)) < WordCastSigned(64))
32 Basic 1 {
    var ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
33 Basic 32 {
    var ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = WordCastSigned(2)
}
34 Basic 33 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
35 Cond 34 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
36 Call 35 Kernel_C.lookup_fault_depth_mismatch_new(WordCast(levelBits___unsigned_long#v : Word 64), WordCast(n_bits___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
37 Cond 36 31 !(!((n_bits___unsigned_long#v : Word 64) < (levelBits___unsigned_long#v : Word 64)))
38 Basic 1 {
    var ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
39 Basic 38 {
    var ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = WordCastSigned(2)
}
40 Basic 39 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
41 Cond 40 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
42 Call 41 Kernel_C.lookup_fault_guard_mismatch_new(WordCast(capGuard___unsigned_long#v : Word 64), WordCast(n_bits___unsigned_long#v : Word 64), WordCast(guardBits___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
43 Cond 42 37 !(!(((n_bits___unsigned_long#v : Word 64) < (guardBits___unsigned_long#v : Word 64)) || !((guard___unsigned_long#v : Word 64) == (capGuard___unsigned_long#v : Word 64))))
44 Basic 43 {
    var guard___unsigned_long#v : Word 64 = ((capptr___unsigned_long#v : Word 64) >> ((n_bits___unsigned_long#v : Word 64) - (guardBits___unsigned_long#v : Word 64)) & (1 << WordCast(6) - 1)) & (1 << (guardBits___unsigned_long#v : Word 64) - 1)
}
45 Cond 44 Err ((guardBits___unsigned_long#v : Word 64) < WordCastSigned(64)) && (((n_bits___unsigned_long#v : Word 64) - (guardBits___unsigned_long#v : Word 64)) & (1 << WordCast(6) - 1) < WordCastSigned(64)) && (0 <=s 6) && (6 <s 64)
46 Basic 45 {
    var capGuard___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
47 Basic 46 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
48 Call 47 Kernel_C.cap_cnode_cap_get_capCNodeGuard(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
49 Basic 48 {
    var levelBits___unsigned_long#v : Word 64 = (radixBits___unsigned_long#v : Word 64) + (guardBits___unsigned_long#v : Word 64)
}
50 Basic 49 {
    var guardBits___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
51 Basic 50 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
52 Call 51 Kernel_C.cap_cnode_cap_get_capCNodeGuardSize(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
53 Basic 52 {
    var radixBits___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
54 Basic 53 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
55 Call 54 Kernel_C.cap_cnode_cap_get_capCNodeRadix(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
5 Basic 6 {
    var loop#5#count : Word 64 = (loop#5#count : Word 64) + 1
}
6 Cond 7 Err true
7 Cond 55 4 !(1 == 0)
8 Basic 6 {
    var loop#5#count : Word 64 = 0
}
56 Basic 1 {
    var ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
57 Basic 56 {
    var ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = WordCastSigned(2)
}
58 Basic 57 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
59 Cond 58 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
60 Call 59 Kernel_C.lookup_fault_invalid_root_new() -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
61 Cond 60 8 !(!(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10))))
62 Basic 61 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
63 Call 62 Kernel_C.cap_get_capType(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
64 Basic 63 {
    var ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = WordCastSigned(0)
}
65 Basic 64 {
    var ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = n_bits___unsigned_long#v : Word 64
}
EntryPoint 65

Function Kernel_C.sbi_remote_fence_i(hart_mask___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(5), hart_mask___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.switchToIdleThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksCurThread : Word 64, (Mem : Mem) -MemAcc-> (ksIdleThread : Word 64))
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64) && PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksIdleThread : Word 64)
4 Call 3 Kernel_C.Arch_switchToIdleThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.unbindNotification(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.doUnbindNotification(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 1 !((ntfnPtr___ptr_to_struct_notification_C#v : Word 64) == 0)
4 Basic 3 {
    var ntfnPtr___ptr_to_struct_notification_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 304)
}
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
EntryPoint 5

Function Kernel_C.write_it_asid_pool(it_ap_cap___struct_cap_C#v.words_C.0 : Word 64, it_ap_cap___struct_cap_C#v.words_C.1 : Word 64, it_lvl1pt_cap___struct_cap_C#v.words_C.0 : Word 64, it_lvl1pt_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (riscvKSASIDTable : Word 64) + (8 * WordCast(1 >> 9)), ap___ptr_to_struct_asid_pool_C#v : Word 64)
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
4 Cond 3 Err ((1 >> 9) <s 128) && (0 <=s (1 >> 9)) && (0 <=s 1) && (0 <=s 9) && (9 <s 32)
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ap___ptr_to_struct_asid_pool_C#v : Word 64) + (8 * WordCast(1)), ret__ptr_to_void#v : Word 64)
}
6 Cond 5 Err (1 <s 512) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.asid_pool_C, ap___ptr_to_struct_asid_pool_C#v : Word 64)
7 Basic 6 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
8 Call 7 Kernel_C.cap_get_capPtr(it_lvl1pt_cap___struct_cap_C#v.words_C.0 : Word 64, it_lvl1pt_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
9 Basic 8 {
    var ap___ptr_to_struct_asid_pool_C#v : Word 64 = ret__ptr_to_void#v : Word 64
}
10 Basic 9 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
11 Call 10 Kernel_C.cap_get_capPtr(it_ap_cap___struct_cap_C#v.words_C.0 : Word 64, it_ap_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
EntryPoint 11

Function Kernel_C.Arch_decodeTransfer(flags___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 3

Function Kernel_C.Arch_isCapRevocable(derivedCap___struct_cap_C#v.words_C.0 : Word 64, derivedCap___struct_cap_C#v.words_C.1 : Word 64, srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 3

Function Kernel_C.Arch_setTLSRegister(tls_base___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(3), tls_base___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 3

Function Kernel_C.Arch_switchToThread(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setVMRoot(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.cap_get_capSizeBits(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
4 Basic 3 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.cap_untyped_cap_get_capBlockSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(4)
}
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(5)
}
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast((ret__unsigned_longlong#v : Word 64) + WordCastSigned(5))
}
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(10)
}
12 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (type___unsigned_long#v : Word 64) & (1 << WordCast(6) - 1) + WordCastSigned(5)
}
13 Cond 12 Err (0 <=s 6) && (6 <s 64)
14 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(10)
}
15 Cond 14 13 (type___unsigned_long#v : Word 64) == (1 << WordCast(6))
16 Cond 15 Err (0 <=s 6) && (6 <s 64)
17 Basic 16 {
    var type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.cap_zombie_cap_get_capZombieType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
21 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
22 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
23 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
24 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
25 Basic 1 { }
26 Basic 25 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.cap_get_archCapSizeBits(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
28 Cond 27 2 true
29 Cond 24 28 ((ctag___enum_cap_tag#v : Word 32) == 16) || false
30 Cond 23 29 ((ctag___enum_cap_tag#v : Word 32) == 14) || false
31 Cond 22 30 ((ctag___enum_cap_tag#v : Word 32) == 8) || false
32 Cond 21 31 ((ctag___enum_cap_tag#v : Word 32) == 20) || false
33 Cond 20 32 ((ctag___enum_cap_tag#v : Word 32) == 0) || false
34 Cond 19 33 ((ctag___enum_cap_tag#v : Word 32) == 18) || false
35 Cond 11 34 ((ctag___enum_cap_tag#v : Word 32) == 12) || false
36 Cond 10 35 ((ctag___enum_cap_tag#v : Word 32) == 10) || false
37 Cond 7 36 ((ctag___enum_cap_tag#v : Word 32) == 6) || false
38 Cond 6 37 ((ctag___enum_cap_tag#v : Word 32) == 4) || false
39 Cond 5 38 ((ctag___enum_cap_tag#v : Word 32) == 2) || false
40 Basic 39 {
    var ctag___enum_cap_tag#v : Word 32 = WordCast(ret__unsigned_longlong#v : Word 64)
}
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 42

Function Kernel_C.cap_untyped_cap_new(capFreeIndex___unsigned_longlong#v : Word 64, capIsDevice___unsigned_longlong#v : Word 64, capBlockSize___unsigned_longlong#v : Word 64, capPtr___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capFreeIndex___unsigned_longlong#v : Word 64) & 549755813887 << WordCast(25)) | ((capIsDevice___unsigned_longlong#v : Word 64) & 1 << WordCast(6)) | ((capBlockSize___unsigned_longlong#v : Word 64) & 63 << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64) && (0 <=s 6) && (6 <s 64) && (0 <=s 25) && (25 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(2) & 31 << WordCast(59)) | ((capPtr___unsigned_longlong#v : Word 64) & 549755813887 >> WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.checkValidIPCBuffer(vptr___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(5))
}
6 Cond 5 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
7 Cond 6 3 !(!(!(!(!((vptr___unsigned_long#v : Word 64) & (1 << WordCast(10) - 1) == 0)))))
8 Cond 7 Err (0 <=s 10) && (10 <s 64)
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
12 Cond 11 8 !(!(!((ret__unsigned_longlong#v : Word 64) == 0)))
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_frame_cap_get_capFIsDevice(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
16 Basic 15 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
17 Cond 16 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
18 Cond 17 14 !(!(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1))))
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 20

Function Kernel_C.configureIdleThread(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setThreadState(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(7), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.Arch_configureIdleThread(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 3

Function Kernel_C.create_bi_frame_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err (9 == 0) || ((9 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (9 * 32), WordCast(0 - 9))) || (!(9 == 0) && !(9 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(9)))
3 Call 2 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (9 * 32), cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 Err (9 == 0) || ((9 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (9 * 32), WordCast(0 - 9))) || (!(9 == 0) && !(9 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(9)))
5 Basic 4 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
6 Call 5 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
7 Basic 6 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Call 7 Kernel_C.create_mapped_it_frame_cap(pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 32), vptr___unsigned_long#v : Word 64, WordCastSigned(1), WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
EntryPoint 9

Function Kernel_C.create_it_asid_pool(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = ap_cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = ap_cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Cond 3 Err (5 == 0) || ((5 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (5 * 32), WordCast(0 - 5))) || (!(5 == 0) && !(5 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(5)))
5 Call 4 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (5 * 32), ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err (5 == 0) || ((5 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (5 * 32), WordCast(0 - 5))) || (!(5 == 0) && !(5 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(5)))
7 Basic 6 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Call 7 Kernel_C.cap_asid_control_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
9 Basic 8 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
10 Call 9 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
11 Cond 10 Err (6 == 0) || ((6 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (6 * 32), WordCast(0 - 6))) || (!(6 == 0) && !(6 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(6)))
12 Call 11 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (6 * 32), ap_cap___struct_cap_C#v.words_C.0 : Word 64, ap_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Cond 12 Err (6 == 0) || ((6 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (6 * 32), WordCast(0 - 6))) || (!(6 == 0) && !(6 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(6)))
14 Basic 13 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
16 Basic 15 {
    var ap_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ap_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
17 Call 16 Kernel_C.cap_asid_pool_cap_new(WordCastSigned(1 >> 9), WordCast((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 16))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
18 Cond 17 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
19 Cond 18 Err (0 <=s 1) && (0 <=s 9) && (9 <s 32)
EntryPoint 19

Function Kernel_C.decodeCopyRegisters(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_CopyRegisters(WordCast(ret__unsigned_longlong#v : Word 64), srcTCB___ptr_to_struct_tcb_C#v : Word 64, (flags___unsigned_long#v : Word 64) & (1 << WordCast(0)), (flags___unsigned_long#v : Word 64) & (1 << WordCast(1)), (flags___unsigned_long#v : Word 64) & (1 << WordCast(2)), (flags___unsigned_long#v : Word 64) & (1 << WordCast(3)), transferArch___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err (0 <=s 0) && (0 <s 64) && (0 <=s 1) && (1 <s 64) && (0 <=s 2) && (2 <s 64) && (0 <=s 3) && (3 <s 64)
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Call 8 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
11 Basic 10 {
    var srcTCB___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.cap_thread_cap_get_capTCBPtr(source_cap___struct_cap_C#v.words_C.0 : Word 64, source_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
15 Basic 14 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
16 Cond 15 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
17 Basic 16 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
18 Cond 17 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
19 Cond 13 18 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_get_capType(source_cap___struct_cap_C#v.words_C.0 : Word 64, source_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Basic 21 {
    var source_cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var source_cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
23 Cond 22 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
24 Cond 23 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
26 Basic 25 {
    var transferArch___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.Arch_decodeTransfer((flags___unsigned_long#v : Word 64) >> WordCast(8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
28 Cond 27 Err (0 <=s 8) && (8 <s 64)
29 Basic 28 {
    var flags___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
30 Call 29 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
31 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
32 Basic 31 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
33 Cond 32 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
34 Cond 33 30 !((ret__int#v : Word 32) == 0)
35 Basic 34 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
36 Cond 35 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
37 Cond 36 Err (0 <s 3) && (0 <=s 0)
38 Cond 34 37 !((ret__int#v : Word 32) == 0)
39 Basic 38 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(1), 1, 0)
}
EntryPoint 39

Function Kernel_C.decodeReadRegisters(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_ReadRegisters(WordCast(ret__unsigned_longlong#v : Word 64), (flags___unsigned_long#v : Word 64) & (1 << WordCast(0)), n___unsigned_long#v : Word 64, transferArch___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err (0 <=s 0) && (0 <s 64)
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Call 8 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
12 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
13 Cond 12 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
14 Cond 13 10 (thread___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
15 Cond 14 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
16 Basic 15 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Basic 18 {
    var transferArch___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
20 Call 19 Kernel_C.Arch_decodeTransfer((flags___unsigned_long#v : Word 64) >> WordCast(8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
21 Cond 20 Err (0 <=s 8) && (8 <s 64)
22 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
23 Basic 22 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, WordCastSigned(16 + 16))
}
24 Cond 23 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
25 Cond 24 Err (16 <=s (16 + 16)) == (0 <=s 16)
26 Basic 25 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(1))
}
27 Cond 26 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
28 Basic 27 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
30 Cond 29 21 ((n___unsigned_long#v : Word 64) < WordCastSigned(1)) || (WordCastSigned(16 + 16) < (n___unsigned_long#v : Word 64))
31 Cond 30 Err (16 <=s (16 + 16)) == (0 <=s 16)
32 Basic 31 {
    var n___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
33 Call 32 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
34 Basic 33 {
    var flags___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
35 Call 34 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
36 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
37 Basic 36 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
39 Cond 38 35 (length___unsigned_long#v : Word 64) < WordCastSigned(2)
EntryPoint 39

Function Kernel_C.decodeSetMCPriority(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_ThreadControl(WordCast(ret__unsigned_longlong#v : Word 64), WordCastSigned(0), WordCastSigned(0), newMcp___unsigned_long#v : Word 64, WordCastSigned(0), ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0), struct_cap_C_eret_2#v.words_C.0 : Word 64, struct_cap_C_eret_2#v.words_C.1 : Word 64, WordCastSigned(0), WordCastSigned(0), struct_cap_C_eret_3#v.words_C.0 : Word 64, struct_cap_C_eret_3#v.words_C.1 : Word 64, WordCastSigned(0), WordCastSigned(8), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var struct_cap_C_eret_3#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var struct_cap_C_eret_3#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Basic 7 {
    var struct_cap_C_eret_2#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var struct_cap_C_eret_2#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
11 Call 10 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Call 13 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Cond 14 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
16 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
17 Cond 16 15 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
18 Basic 17 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.checkPrio(newMcp___unsigned_long#v : Word 64, authTCB___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 19 {
    var authTCB___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.cap_thread_cap_get_capTCBPtr(authCap___struct_cap_C#v.words_C.0 : Word 64, authCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
24 Basic 23 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
26 Basic 25 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
27 Cond 26 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
28 Cond 27 22 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12))
29 Basic 28 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
30 Call 29 Kernel_C.cap_get_capType(authCap___struct_cap_C#v.words_C.0 : Word 64, authCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
31 Basic 30 {
    var authCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var authCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
33 Cond 32 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
35 Basic 34 {
    var newMcp___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
36 Call 35 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
37 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
38 Basic 37 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
39 Cond 38 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
40 Cond 39 36 !((ret__int#v : Word 32) == 0)
41 Basic 40 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
43 Cond 42 Err (0 <s 3) && (0 <=s 0)
44 Cond 40 43 !((ret__int#v : Word 32) == 0)
45 Basic 44 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(1), 1, 0)
}
EntryPoint 45

Function Kernel_C.decodeTCBInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.decodeReadRegisters(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 1 { }
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.decodeWriteRegisters(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Basic 1 { }
10 Basic 9 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.decodeCopyRegisters(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Basic 1 { }
13 Basic 12 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.invokeTCB_Suspend(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Call 16 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Cond 17 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
19 Basic 1 { }
20 Basic 19 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.invokeTCB_Resume(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Call 23 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Cond 24 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
26 Basic 1 { }
27 Basic 26 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
28 Call 27 Kernel_C.decodeTCBConfigure(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
29 Basic 1 { }
30 Basic 29 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
31 Call 30 Kernel_C.decodeSetPriority(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Basic 1 { }
33 Basic 32 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
34 Call 33 Kernel_C.decodeSetMCPriority(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
35 Basic 1 { }
36 Basic 35 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
37 Call 36 Kernel_C.decodeSetSchedParams(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
38 Basic 1 { }
39 Basic 38 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
40 Call 39 Kernel_C.decodeSetIPCBuffer(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
41 Basic 1 { }
42 Basic 41 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
43 Call 42 Kernel_C.decodeSetSpace(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
44 Basic 1 { }
45 Basic 44 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
46 Call 45 Kernel_C.decodeBindNotification(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
47 Basic 1 { }
48 Basic 47 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
49 Call 48 Kernel_C.decodeUnbindNotification(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
50 Basic 1 { }
51 Basic 50 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
52 Call 51 Kernel_C.decodeSetTLSBase(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
53 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
54 Basic 53 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
55 Cond 54 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
56 Cond 55 2 true
57 Cond 52 56 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(15)) || false
58 Cond 49 57 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(14)) || false
59 Cond 46 58 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(13)) || false
60 Cond 43 59 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(10)) || false
61 Cond 40 60 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(9)) || false
62 Cond 37 61 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(8)) || false
63 Cond 34 62 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(7)) || false
64 Cond 31 63 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(6)) || false
65 Cond 28 64 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(5)) || false
66 Cond 25 65 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(12)) || false
67 Cond 18 66 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(11)) || false
68 Cond 11 67 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(4)) || false
69 Cond 8 68 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(3)) || false
70 Cond 5 69 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(2)) || false
EntryPoint 70

Function Kernel_C.fastpath_reply_recv(cptr___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.fastpath_restore(badge___unsigned_long#v : Word 64, msgInfo___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
4 Basic 3 {
    var msgInfo___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.wordFromMessageInfo(ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 5 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
7 Call 6 Kernel_C.seL4_MessageInfo_set_capsUnwrapped(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
8 Call 7 Kernel_C.switchToThread_fp(caller___ptr_to_struct_tcb_C#v : Word 64, cap_pd___ptr_to_struct_pte_C#v : Word 64, stored_hw_asid___struct_pte_C#v.words_C.0 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Call 8 Kernel_C.thread_state_ptr_set_tsType_np((caller___ptr_to_struct_tcb_C#v : Word 64) + 280, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, caller___ptr_to_struct_tcb_C#v : Word 64)
11 Call 10 Kernel_C.fastpath_copy_mrs(length___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), caller___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Cond 11 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
13 Basic 12 {
    var badge___unsigned_long#v : Word 64 = WordCastSigned(0)
}
14 Basic 13 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (callerSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 0, ret__struct_mdb_node_C#v.words_C.0 : Word 64), (callerSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + 8, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
}
15 Cond 14 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
16 Basic 15 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64
}
17 Call 16 Kernel_C.mdb_node_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_mdb_node_C#v.words_C.0 : Word 64, rv#space#ret__struct_mdb_node_C#v.words_C.1 : Word 64)
18 Basic 17 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
20 Basic 19 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
21 Call 20 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
22 Call 21 Kernel_C.mdb_node_ptr_mset_mdbNext_mdbRevocable_mdbFirstBadged(WordCast(ret__unsigned_longlong#v : Word 64) + 16, WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, WordCast(ret__unsigned_longlong#v : Word 64))
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.mdb_node_get_mdbPrev((Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 16 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Cond 25 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
27 Call 26 Kernel_C.endpoint_ptr_mset_epQueue_tail_state(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
28 Cond 27 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
29 Call 28 Kernel_C.endpoint_ptr_set_epQueue_head_np(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
30 Cond 29 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
31 Basic 30 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 408, WordCastSigned(0))
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
33 Cond 32 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
34 Cond 33 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
35 Basic 34 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 416, WordCastSigned(0))
}
36 Cond 35 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
37 Cond 36 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
38 Cond 37 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
39 Call 26 Kernel_C.endpoint_ptr_mset_epQueue_tail_state(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
40 Cond 39 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
41 Basic 40 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 408, WordCastSigned(0))
}
42 Cond 41 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
43 Cond 42 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
44 Cond 43 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
45 Basic 44 {
    var Mem : Mem = MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 416, endpointTail___ptr_to_struct_tcb_C#v : Word 64)
}
46 Cond 45 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
47 Cond 46 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
48 Cond 47 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
49 Basic 48 {
    var Mem : Mem = MemUpdate(Mem : Mem, (endpointTail___ptr_to_struct_tcb_C#v : Word 64) + 408, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
}
50 Cond 49 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
51 Cond 50 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, endpointTail___ptr_to_struct_tcb_C#v : Word 64)
52 Cond 38 51 !(!(!(!((endpointTail___ptr_to_struct_tcb_C#v : Word 64) == 0))))
53 Basic 52 {
    var endpointTail___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
54 Basic 53 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
55 Call 54 Kernel_C.endpoint_ptr_get_epQueue_tail(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
56 Call 55 Kernel_C.thread_state_ptr_set_blockingIPCCanGrant((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280, ret__unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
57 Cond 56 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
58 Cond 57 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
59 Cond 58 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
60 Basic 59 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
61 Call 60 Kernel_C.cap_endpoint_cap_get_capCanGrant(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
62 Call 61 Kernel_C.thread_state_ptr_mset_blockingObject_tsType((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 280, ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, WordCastSigned(3), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
63 Cond 62 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
64 Cond 63 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
65 Cond 64 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
66 Call 65 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
67 Cond 66 65 !(!(!((Mem : Mem) -MemAcc-> ((caller___ptr_to_struct_tcb_C#v : Word 64) + 344) == (Mem : Mem) -MemAcc-> (ksCurDomain : Word 64)) && !(15 == 0)))
68 Cond 67 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
69 Cond 68 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, caller___ptr_to_struct_tcb_C#v : Word 64)
70 Call 69 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
71 Cond 70 69 !(!(!(!((ret__unsigned_long#v : Word 64) == 0))))
72 Basic 71 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
73 Call 72 Kernel_C.isHighestPrio(dom___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((caller___ptr_to_struct_tcb_C#v : Word 64) + 360), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
74 Cond 73 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, caller___ptr_to_struct_tcb_C#v : Word 64)
75 Basic 74 {
    var dom___unsigned_long#v : Word 64 = IfThenElse(!(15 == 0), (Mem : Mem) -MemAcc-> (ksCurDomain : Word 64), WordCastSigned(0))
}
76 Cond 75 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64)
77 Basic 76 {
    var stored_hw_asid___struct_pte_C#v.words_C.0 : Word 64 = ret__unsigned_longlong#v : Word 64
}
78 Cond 77 Err (0 <s 1) && (0 <=s 0)
79 Basic 78 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
80 Call 79 Kernel_C.cap_page_table_cap_get_capPTMappedASID(newVTable___struct_cap_C#v.words_C.0 : Word 64, newVTable___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
81 Call 80 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
82 Cond 81 80 !(!(!(!((ret__unsigned_long#v : Word 64) == 0))))
83 Basic 82 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
84 Call 83 Kernel_C.isValidVTableRoot_fp(newVTable___struct_cap_C#v.words_C.0 : Word 64, newVTable___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
85 Basic 84 {
    var cap_pd___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
86 Basic 85 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
87 Call 86 Kernel_C.cap_page_table_cap_get_capPTBasePtr(newVTable___struct_cap_C#v.words_C.0 : Word 64, newVTable___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
88 Basic 87 {
    var newVTable___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((caller___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32) + 0 + (8 * 0))
    var newVTable___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((caller___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32) + 0 + (8 * 1))
}
89 Cond 88 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (caller___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (caller___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1))) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (caller___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32)) && (0 <=s 10) && (10 <s 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (caller___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (caller___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
90 Call 89 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
91 Cond 90 89 !(!(!((fault_type___unsigned_long#v : Word 64) == WordCastSigned(0))))
92 Basic 91 {
    var fault_type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
93 Basic 92 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
94 Call 93 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((caller___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((caller___ptr_to_struct_tcb_C#v : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
95 Cond 94 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, caller___ptr_to_struct_tcb_C#v : Word 64)
96 Basic 95 {
    var caller___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
97 Basic 96 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
98 Call 97 Kernel_C.cap_reply_cap_get_capTCBPtr(callerCap___struct_cap_C#v.words_C.0 : Word 64, callerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
99 Call 98 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
100 Cond 99 98 !(!(!(!((ret__int#v : Word 32) == 0))))
101 Basic 100 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
102 Call 101 Kernel_C.fastpath_reply_cap_check(callerCap___struct_cap_C#v.words_C.0 : Word 64, callerCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__int#v : Word 32)
103 Basic 102 {
    var callerCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var callerCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((callerSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
104 Cond 103 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, callerSlot___ptr_to_struct_cte_C#v : Word 64)
105 Basic 104 {
    var callerSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32)
}
106 Cond 105 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
107 Cond 106 Err (0 <=s 10) && (10 <s 64) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(3)))
108 Cond 107 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
109 Call 108 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
110 Cond 109 108 !(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)))
111 Basic 110 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
112 Call 111 Kernel_C.endpoint_ptr_get_state(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
113 Basic 112 {
    var ep_ptr___ptr_to_struct_endpoint_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
114 Basic 113 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
115 Call 114 Kernel_C.cap_endpoint_cap_get_capEPPtr(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
116 Call 115 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
117 Cond 116 115 !(!(!((ret__int#v : Word 32) == 0)))
118 Basic 117 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2), 1, 0)
}
119 Basic 118 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
120 Call 119 Kernel_C.notification_ptr_get_state((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 304), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
121 Cond 120 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
122 Cond 121 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
123 Cond 122 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
124 Cond 123 117 !((ret__int#v : Word 32) == 0)
125 Basic 124 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 304) == 0), 1, 0)
}
126 Cond 125 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
127 Cond 126 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
128 Cond 127 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
129 Call 128 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
130 Cond 129 128 !(!(!((ret__int#v : Word 32) == 0)))
131 Basic 130 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
132 Basic 131 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
133 Call 132 Kernel_C.cap_endpoint_cap_get_capCanReceive(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
134 Cond 130 133 !((ret__int#v : Word 32) == 0)
135 Basic 134 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__int#v : Word 32) == 0)), 1, 0)
}
136 Basic 135 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
137 Call 136 Kernel_C.cap_capType_equals(ep_cap___struct_cap_C#v.words_C.0 : Word 64, ep_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(4)) -- updates (rv#space#ret__int#v : Word 32)
138 Cond 137 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
139 Cond 138 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
140 Basic 139 {
    var ep_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ep_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
141 Call 140 Kernel_C.lookup_fp((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32) + 0 + (8 * 1)), cptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
142 Cond 141 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
143 Cond 142 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0))) && PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32)) && (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
144 Cond 143 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
145 Call 144 Kernel_C.slowpath(WordCastSigned(0 - 2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
146 Cond 145 144 !(!(!((ret__int#v : Word 32) == 0) || !((fault_type___unsigned_long#v : Word 64) == WordCastSigned(0))))
147 Basic 146 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
148 Call 147 Kernel_C.fastpath_mi_check(msgInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__int#v : Word 32)
149 Basic 148 {
    var fault_type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
150 Basic 149 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
151 Call 150 Kernel_C.seL4_Fault_get_seL4_FaultType((Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 312 + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> (ksCurThread : Word 64) + 312 + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
152 Cond 151 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
153 Cond 152 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64))
154 Cond 153 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
155 Basic 154 {
    var length___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
156 Basic 155 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
157 Call 156 Kernel_C.seL4_MessageInfo_get_length(info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
158 Basic 157 {
    var info___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
159 Call 158 Kernel_C.messageInfoFromWord_raw(msgInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
EntryPoint 159

Function Kernel_C.hasCancelSendRights(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_endpoint_cap_get_capCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Cond 6 3 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_endpoint_cap_get_capCanGrantReply(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
11 Cond 10 7 !((ret__int#v : Word 32) == 0)
12 Basic 11 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_endpoint_cap_get_capCanReceive(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Cond 14 11 !((ret__int#v : Word 32) == 0)
16 Basic 15 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.cap_endpoint_cap_get_capCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
20 Cond 19 2 true
21 Cond 18 20 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(4)) || false
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 23

Function Kernel_C.messageInfoFromWord(w___unsigned_long#v : Word 64) -- updates: (ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
5 Call 4 Kernel_C.seL4_MessageInfo_set_length(mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, WordCastSigned(120)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
6 Cond 5 3 WordCastSigned(120) < (len___unsigned_long#v : Word 64)
7 Basic 6 {
    var len___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
8 Basic 7 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.seL4_MessageInfo_get_length(mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Basic 9 {
    var mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = WordCast(w___unsigned_long#v : Word 64)
}
11 Cond 10 Err (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.plic_complete_claim(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.writel(WordCast(irq___unsigned_long#v : Word 64), WordCast(-1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + (ret__unsigned_long#v : Word 64)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.plic_claim_offset(hart_id___unsigned_long#v : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
5 Basic 4 {
    var hart_id___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.get_hart_id() -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 6

Function Kernel_C.provide_untyped_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, device_memory___unsigned_long#v : Word 64, pptr___unsigned_long#v : Word 64, size_bits___unsigned_long#v : Word 64, first_untyped_slot___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = ret___unsigned_long#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.provide_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, ut_cap___struct_cap_C#v.words_C.0 : Word 64, ut_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ut_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ut_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_untyped_cap_new(WordCast(1 << ((size_bits___unsigned_long#v : Word 64) - WordCastSigned(4))), WordCast(device_memory___unsigned_long#v : Word 64), WordCast(size_bits___unsigned_long#v : Word 64), WordCast(pptr___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Cond 7 Err ((size_bits___unsigned_long#v : Word 64) - WordCastSigned(4)) < WordCastSigned(64)
9 Basic 8 {
    var Mem : Mem = MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 0, ret__unsigned_long#v : Word 64), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 8, WordCast(size_bits___unsigned_long#v : Word 64)), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 9, WordCast(device_memory___unsigned_long#v : Word 64)), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 10 + 0, WordCastSigned(0)), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 10 + 1, 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 10 + 2, 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 10 + 3, 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 10 + 4, 0), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 168 + (16 * (i___unsigned_long#v : Word 64)) + 10 + 5, 0)
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
11 Cond 10 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(50)) && PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584))
12 Cond 11 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
13 Basic 12 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.addrFromPPtr(pptr___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
15 Basic 3 {
    var ret___unsigned_long#v : Word 64 = WordCastSigned(1)
}
16 Cond 14 15 (i___unsigned_long#v : Word 64) < WordCastSigned(50)
17 Basic 16 {
    var i___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592) - (first_untyped_slot___unsigned_long#v : Word 64)
}
18 Cond 17 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
EntryPoint 18

Function Kernel_C.pte_pte_invalid_new() -- updates: (ret__struct_pte_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_pte_C#v.words_C.0 : Word 64 = WordCastSigned(0)
}
EntryPoint 3

Function Kernel_C.pte_ptr_get_execute(pte_ptr___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((pte_ptr___ptr_to_struct_pte_C#v : Word 64) + (8 * 0)) & 8 >> WordCast(3)
}
11 Cond 10 Err (0 <=s 3) && (3 <s 64) && (0 <s 1) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.pte_C, pte_ptr___ptr_to_struct_pte_C#v : Word 64)
EntryPoint 11

Function Kernel_C.sbi_console_getchar(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__int#v : Word 32 = WordCast(ret__unsigned_long#v : Word 64)
}
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.sbi_call(WordCastSigned(2), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.sbi_console_putchar(ch___int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(1), WordCastSigned(ch___int#v : Word 32), WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.setUntypedCapAsFull(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64, newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.cap_untyped_cap_ptr_set_capFreeIndex(srcSlot___ptr_to_struct_cte_C#v : Word 64, WordCast(1 << ((ret__unsigned_longlong#v : Word 64) - WordCastSigned(4))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64) && (((ret__unsigned_longlong#v : Word 64) - WordCastSigned(4)) < WordCastSigned(64))
4 Basic 3 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
5 Call 4 Kernel_C.cap_untyped_cap_get_capBlockSize(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
6 Cond 5 1 !((ret__int#v : Word 32) == 0)
7 Basic 6 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0)
}
8 Basic 7 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.cap_untyped_cap_get_capBlockSize(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_untyped_cap_get_capBlockSize(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Cond 11 6 !((ret__int#v : Word 32) == 0)
13 Basic 12 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == (unsigned_longlong_eret_2#v : Word 64), 1, 0)
}
14 Basic 13 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_untyped_cap_get_capPtr(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_untyped_cap_get_capPtr(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
18 Cond 17 1 !((ret__int#v : Word 32) == 0)
19 Basic 18 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2), 1, 0)
}
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_get_capType(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Cond 21 18 !((ret__int#v : Word 32) == 0)
23 Basic 22 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2), 1, 0)
}
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.cap_get_capType(srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 25

Function Kernel_C.wordFromMessageInfo(mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
}
4 Cond 3 Err (0 <s 1) && (0 <=s 0)
EntryPoint 4

Function Kernel_C.Arch_performTransfer(arch___unsigned_long#v : Word 64, tcb_src___ptr_to_struct_tcb_C#v : Word 64, tcb_dest___ptr_to_struct_tcb_C#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 3

Function Kernel_C.Arch_postCapDeletion(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.alloc_rootserver_obj(size_bits___unsigned_long#v : Word 64, n___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = allocated___unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.memzero(allocated___unsigned_long#v : Word 64, (n___unsigned_long#v : Word 64) * 1 << (size_bits___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err (size_bits___unsigned_long#v : Word 64) < WordCastSigned(64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver_mem : Word 64) + 0, (Mem : Mem) -MemAcc-> ((rootserver_mem : Word 64) + 0) + ((n___unsigned_long#v : Word 64) * 1 << (size_bits___unsigned_long#v : Word 64)))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.region_C, rootserver_mem : Word 64)
8 Cond 7 Err (size_bits___unsigned_long#v : Word 64) < WordCastSigned(64)
9 Basic 8 {
    var allocated___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((rootserver_mem : Word 64) + 0)
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.region_C, rootserver_mem : Word 64)
EntryPoint 10

Function Kernel_C.capTransferFromWords(wptr___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64, ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64, ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64 = transfer___struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64
    var ret__struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64 = transfer___struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64
    var ret__struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64 = transfer___struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64
}
4 Basic 3 {
    var transfer___struct_cap_transfer_C#v.ctReceiveDepth_C : Word 64 = (Mem : Mem) -MemAcc-> ((wptr___ptr_to_unsigned_long#v : Word 64) + (2 * 8))
}
5 Cond 4 Err (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (2 * 8), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Word 64, wptr___ptr_to_unsigned_long#v : Word 64, WordCast(2))) && PValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (2 * 8)) && (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (2 * 8), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Word 64, wptr___ptr_to_unsigned_long#v : Word 64, WordCast(2 + 1)))
6 Basic 5 {
    var transfer___struct_cap_transfer_C#v.ctReceiveIndex_C : Word 64 = (Mem : Mem) -MemAcc-> ((wptr___ptr_to_unsigned_long#v : Word 64) + (1 * 8))
}
7 Cond 6 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (1 * 8), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Word 64, wptr___ptr_to_unsigned_long#v : Word 64, WordCast(1))) && PValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (1 * 8)) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (1 * 8), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Word 64, wptr___ptr_to_unsigned_long#v : Word 64, WordCast(1 + 1)))
8 Basic 7 {
    var transfer___struct_cap_transfer_C#v.ctReceiveRoot_C : Word 64 = (Mem : Mem) -MemAcc-> ((wptr___ptr_to_unsigned_long#v : Word 64) + (0 * 8))
}
9 Cond 8 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (0 * 8), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Word 64, wptr___ptr_to_unsigned_long#v : Word 64, WordCast(0))) && PValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (0 * 8)) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Word 64, (wptr___ptr_to_unsigned_long#v : Word 64) + (0 * 8), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Word 64, wptr___ptr_to_unsigned_long#v : Word 64, WordCast(0 + 1)))
EntryPoint 9

Function Kernel_C.cap_endpoint_cap_new(capEPBadge___unsigned_longlong#v : Word 64, capCanGrantReply___unsigned_longlong#v : Word 64, capCanGrant___unsigned_longlong#v : Word 64, capCanSend___unsigned_longlong#v : Word 64, capCanReceive___unsigned_longlong#v : Word 64, capEPPtr___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capEPBadge___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((capCanGrantReply___unsigned_longlong#v : Word 64) & 1 << WordCast(58)) | ((capCanGrant___unsigned_longlong#v : Word 64) & 1 << WordCast(57)) | ((capCanSend___unsigned_longlong#v : Word 64) & 1 << WordCast(55)) | ((capCanReceive___unsigned_longlong#v : Word 64) & 1 << WordCast(56)) | ((capEPPtr___unsigned_longlong#v : Word 64) & 549755813887 >> WordCast(0)) | (WordCastSigned(4) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64) && (0 <=s 0) && (0 <s 64) && (0 <=s 56) && (56 <s 64) && (0 <=s 55) && (55 <s 64) && (0 <=s 57) && (57 <s 64) && (0 <=s 58) && (58 <s 64)
EntryPoint 7

Function Kernel_C.decodeSetSchedParams(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_ThreadControl(WordCast(ret__unsigned_longlong#v : Word 64), WordCastSigned(0), WordCastSigned(0), newMcp___unsigned_long#v : Word 64, newPrio___unsigned_long#v : Word 64, ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0), struct_cap_C_eret_2#v.words_C.0 : Word 64, struct_cap_C_eret_2#v.words_C.1 : Word 64, WordCastSigned(0), WordCastSigned(0), struct_cap_C_eret_3#v.words_C.0 : Word 64, struct_cap_C_eret_3#v.words_C.1 : Word 64, WordCastSigned(0), WordCastSigned(8 | 1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var struct_cap_C_eret_3#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var struct_cap_C_eret_3#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Basic 7 {
    var struct_cap_C_eret_2#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var struct_cap_C_eret_2#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
11 Call 10 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Call 13 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Cond 14 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
16 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
17 Cond 16 15 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
18 Basic 17 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.checkPrio(newPrio___unsigned_long#v : Word 64, authTCB___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
21 Cond 20 19 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
22 Basic 21 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
23 Call 22 Kernel_C.checkPrio(newMcp___unsigned_long#v : Word 64, authTCB___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Basic 23 {
    var authTCB___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
25 Basic 24 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
26 Call 25 Kernel_C.cap_thread_cap_get_capTCBPtr(authCap___struct_cap_C#v.words_C.0 : Word 64, authCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
27 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
28 Basic 27 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
30 Basic 29 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
31 Cond 30 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
32 Cond 31 26 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12))
33 Basic 32 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
34 Call 33 Kernel_C.cap_get_capType(authCap___struct_cap_C#v.words_C.0 : Word 64, authCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
35 Basic 34 {
    var authCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var authCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
36 Cond 35 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
37 Cond 36 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
39 Basic 38 {
    var newPrio___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
40 Call 39 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
41 Basic 40 {
    var newMcp___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
42 Call 41 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
43 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
44 Basic 43 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
45 Cond 44 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
46 Cond 45 42 !((ret__int#v : Word 32) == 0)
47 Basic 46 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
48 Cond 47 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
49 Cond 48 Err (0 <s 3) && (0 <=s 0)
50 Cond 46 49 !((ret__int#v : Word 32) == 0)
51 Basic 50 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(2), 1, 0)
}
EntryPoint 51

Function Kernel_C.decodeWriteRegisters(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_WriteRegisters(thread___ptr_to_struct_tcb_C#v : Word 64, (flags___unsigned_long#v : Word 64) & (1 << WordCast(0)), w___unsigned_long#v : Word 64, transferArch___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err (0 <=s 0) && (0 <s 64)
7 Call 6 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
12 Cond 11 8 (thread___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
13 Cond 12 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
14 Basic 13 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 16 {
    var transferArch___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.Arch_decodeTransfer((flags___unsigned_long#v : Word 64) >> WordCast(8)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Cond 18 Err (0 <=s 8) && (8 <s 64)
20 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
21 Basic 20 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
22 Cond 21 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
23 Cond 22 19 ((length___unsigned_long#v : Word 64) - WordCastSigned(2)) < (w___unsigned_long#v : Word 64)
24 Basic 23 {
    var w___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
25 Call 24 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
26 Basic 25 {
    var flags___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
28 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
29 Basic 28 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
31 Cond 30 27 (length___unsigned_long#v : Word 64) < WordCastSigned(2)
EntryPoint 31

Function Kernel_C.doUnbindNotification(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, tcbptr___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcbptr___ptr_to_struct_tcb_C#v : Word 64) + 304, WordCastSigned(0))
}
3 Cond 2 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcbptr___ptr_to_struct_tcb_C#v : Word 64)
4 Call 3 Kernel_C.notification_ptr_set_ntfnBoundTCB(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, WordCast(WordCastSigned(0)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.get_num_avail_p_regs() -- updates: (ret__int#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__int#v : Word 32 = WordCast(16 / 16)
}
4 Cond 3 Err !(16 == 0)
EntryPoint 4

Function Kernel_C.handleInterruptEntry(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.activateThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.schedule(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.Arch_finaliseInterrupt() -- updates ()
7 Call 6 Kernel_C.handleInterrupt(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Call 5 Kernel_C.handleSpuriousIRQ() -- updates ()
9 Cond 7 8 !((irq___unsigned_long#v : Word 64) == WordCastSigned(0))
10 Basic 9 {
    var irq___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.getActiveIRQ(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 11

Function Kernel_C.handleUnknownSyscall(w___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.activateThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.schedule(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.handleFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 7 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
10 Call 9 Kernel_C.seL4_Fault_UnknownSyscall_new(WordCast(w___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
EntryPoint 10

Function Kernel_C.handleUserLevelFault(w_a___unsigned_long#v : Word 64, w_b___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.activateThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.schedule(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.handleFault((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 7 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_fault : Word 64) + 0 + 0, rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64), (current_fault : Word 64) + 0 + 8, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.seL4_Fault_C, current_fault : Word 64)
10 Call 9 Kernel_C.seL4_Fault_UserException_new(WordCast(w_a___unsigned_long#v : Word 64), WordCast(w_b___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
EntryPoint 10

Function Kernel_C.invokeUntyped_Retype(srcSlot___ptr_to_struct_cte_C#v : Word 64, reset___unsigned_long#v : Word 64, retypeBase___ptr_to_void#v : Word 64, newType___unsigned_long#v : Word 64, userSize___unsigned_long#v : Word 64, destCNode___ptr_to_struct_cte_C#v : Word 64, destOffset___unsigned_long#v : Word 64, destLength___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.createNewObjects(newType___unsigned_long#v : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destCNode___ptr_to_struct_cte_C#v : Word 64, destOffset___unsigned_long#v : Word 64, destLength___unsigned_long#v : Word 64, retypeBase___ptr_to_void#v : Word 64, userSize___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, ret__struct_cap_C#v.words_C.0 : Word 64), (srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, ret__struct_cap_C#v.words_C.1 : Word 64)
}
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
7 Basic 6 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
8 Call 7 Kernel_C.cap_untyped_cap_set_capFreeIndex((Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), WordCast(((freeRef___unsigned_long#v : Word 64) - (regionBase___ptr_to_void#v : Word 64)) >> WordCast(4))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64) && (0 <=s 4) && (4 <s 64)
10 Basic 9 {
    var freeRef___unsigned_long#v : Word 64 = (retypeBase___ptr_to_void#v : Word 64) + (totalObjectSize___unsigned_long#v : Word 64)
}
11 Basic 10 {
    var totalObjectSize___unsigned_long#v : Word 64 = (destLength___unsigned_long#v : Word 64) << (ret__unsigned_long#v : Word 64)
}
12 Cond 11 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(64)
13 Basic 12 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.getObjectSize(newType___unsigned_long#v : Word 64, userSize___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
15 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
16 Cond 15 14 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
17 Basic 16 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.resetUntypedCap(srcSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Cond 18 14 !((reset___unsigned_long#v : Word 64) == 0)
20 Basic 19 {
    var freeRef___unsigned_long#v : Word 64 = WordCast(WordCast(regionBase___ptr_to_void#v : Word 64) + (ret__unsigned_longlong#v : Word 64) << WordCast(4))
}
21 Cond 20 Err (0 <=s 4) && (4 <s 64)
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_untyped_cap_get_capFreeIndex((Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Cond 23 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
25 Basic 24 {
    var regionBase___ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
26 Basic 25 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
27 Call 26 Kernel_C.cap_untyped_cap_get_capPtr((Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
28 Cond 27 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 28

Function Kernel_C.isValidVTableRoot_fp(vspace_root_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_root_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(ret__int#v : Word 32)
}
4 Basic 3 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_page_table_cap_get_capPTIsMapped(vspace_root_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_root_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Cond 6 3 !((ret__int#v : Word 32) == 0)
8 Basic 7 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__int#v : Word 32) == 0), 1, 0)
}
9 Basic 8 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
10 Call 9 Kernel_C.cap_capType_equals(vspace_root_cap___struct_cap_C#v.words_C.0 : Word 64, vspace_root_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(3)) -- updates (rv#space#ret__int#v : Word 32)
EntryPoint 10

Function Kernel_C.lookupSlotForCNodeOp(isSource___unsigned_long#v : Word 64, root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_lookupSlot_ret_C#v.status_C : Word 64, ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = ret___struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
4 Basic 3 {
    var ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = WordCastSigned(0)
}
5 Basic 4 {
    var ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = res_ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64
}
6 Basic 1 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = ret___struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
7 Basic 6 {
    var ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = WordCastSigned(3)
}
8 Basic 7 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
10 Call 9 Kernel_C.lookup_fault_depth_mismatch_new(WordCastSigned(0), WordCast(res_ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
11 Basic 10 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, isSource___unsigned_long#v : Word 64)
}
12 Cond 11 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
15 Cond 14 5 !(!(!((res_ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64) == WordCastSigned(0))))
16 Basic 1 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = ret___struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
17 Basic 16 {
    var ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = WordCastSigned(3)
}
18 Basic 17 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, isSource___unsigned_long#v : Word 64)
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
20 Basic 19 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
21 Cond 20 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
22 Cond 21 15 !(!(!((res_ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
23 Basic 22 {
    var res_ret___struct_resolveAddressBits_ret_C#v.status_C : Word 64 = rv#space#ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64
    var res_ret___struct_resolveAddressBits_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64
    var res_ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64 = rv#space#ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64
}
24 Call 23 Kernel_C.resolveAddressBits(root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, capptr___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_resolveAddressBits_ret_C#v.status_C : Word 64, rv#space#ret__struct_resolveAddressBits_ret_C#v.slot_C : Word 64, rv#space#ret__struct_resolveAddressBits_ret_C#v.bitsRemaining_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Basic 1 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = ret___struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
26 Basic 25 {
    var ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = WordCastSigned(3)
}
27 Basic 26 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, 1 << WordCast(6))
}
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
29 Cond 28 Err (0 <=s 6) && (6 <s 64)
30 Basic 29 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(1))
}
31 Cond 30 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
32 Basic 31 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
33 Cond 32 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
34 Cond 33 24 !(!(!((ret__int#v : Word 32) == 0)))
35 Basic 34 {
    var ret__int#v : Word 32 = IfThenElse((1 << WordCast(6)) < (depth___unsigned_long#v : Word 64), 1, 0)
}
36 Cond 35 Err (0 <=s 6) && (6 <s 64)
37 Cond 34 36 !((ret__int#v : Word 32) == 0)
38 Basic 37 {
    var ret__int#v : Word 32 = IfThenElse((depth___unsigned_long#v : Word 64) < WordCastSigned(1), 1, 0)
}
39 Basic 1 {
    var ret__struct_lookupSlot_ret_C#v.status_C : Word 64 = ret___struct_lookupSlot_ret_C#v.status_C : Word 64
    var ret__struct_lookupSlot_ret_C#v.slot_C : Word 64 = ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
40 Basic 39 {
    var ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = WordCastSigned(3)
}
41 Basic 40 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
43 Call 42 Kernel_C.lookup_fault_invalid_root_new() -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
44 Basic 43 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, isSource___unsigned_long#v : Word 64)
}
45 Cond 44 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
46 Basic 45 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
47 Cond 46 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
48 Cond 47 38 !(!(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10))))
49 Basic 48 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
50 Call 49 Kernel_C.cap_get_capType(root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
51 Basic 50 {
    var ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = WordCastSigned(0)
}
EntryPoint 51

Function Kernel_C.maybe_alloc_extra_bi(cmp_size_bits___unsigned_long#v : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 40, ret__unsigned_long#v : Word 64)
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.alloc_rootserver_obj(extra_bi_size_bits___unsigned_long#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 1 ((cmp_size_bits___unsigned_long#v : Word 64) <= (extra_bi_size_bits___unsigned_long#v : Word 64)) && ((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 40) == WordCastSigned(0))
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
EntryPoint 7

Function Kernel_C.mdb_node_get_mdbNext(mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64, mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) & 549755813884 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.mdb_node_get_mdbPrev(mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64, mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.mdb_node_set_mdbPrev(mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64, mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_mdb_node_C#v.words_C.0 : Word 64, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & -1)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64) & ~(-1)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.plic_init_controller(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
6 Cond 2 Err (53 <=s (53 + 1)) == (0 <=s 1)
7 Basic 6 {
    var i___int#v : Word 32 = (i___int#v : Word 32) + 1
}
8 Cond 7 Err ((i___int#v : Word 32) <=s ((i___int#v : Word 32) + 1)) == (0 <=s 1)
9 Call 8 Kernel_C.writel(WordCastSigned(2), WordCast(-1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + WordCastSigned(0) + WordCastSigned(4 * (i___int#v : Word 32))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err (WordCastSigned(4) * WordCastSigned(i___int#v : Word 32)) == WordCastSigned(4 * (i___int#v : Word 32))
2 Basic 3 {
    var loop#2#count : Word 64 = (loop#2#count : Word 64) + 1
}
3 Cond 4 Err true
4 Cond 10 1 (i___int#v : Word 32) <=s (53 + 1)
5 Basic 3 {
    var loop#2#count : Word 64 = 0
}
11 Cond 5 Err (53 <=s (53 + 1)) == (0 <=s 1)
12 Basic 11 {
    var i___int#v : Word 32 = 1
}
17 Basic 13 {
    var i___int#v : Word 32 = (i___int#v : Word 32) + 1
}
18 Cond 17 Err ((i___int#v : Word 32) <=s ((i___int#v : Word 32) + 1)) == (0 <=s 1)
19 Call 18 Kernel_C.writel(WordCastSigned(i___int#v : Word 32), WordCast(-1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + (ret__unsigned_long#v : Word 64)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 19 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.plic_claim_offset(WordCastSigned(1), WordCastSigned(1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Call 21 Kernel_C.readl(WordCast(-1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + (ret__unsigned_long#v : Word 64)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32)
23 Basic 22 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.plic_claim_offset(WordCastSigned(1), WordCastSigned(1)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
25 Cond 24 18 !((ret__unsigned_long#v : Word 64) == 0)
26 Basic 25 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.plic_pending_interrupt(WordCastSigned(i___int#v : Word 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
13 Basic 14 {
    var loop#13#count : Word 64 = (loop#13#count : Word 64) + 1
}
14 Cond 15 Err true
15 Cond 27 12 (i___int#v : Word 32) <=s 53
16 Basic 14 {
    var loop#13#count : Word 64 = 0
}
28 Basic 16 {
    var i___int#v : Word 32 = 1
}
EntryPoint 28

Function Kernel_C.plic_irq_set_trigger(irq___unsigned_long#v : Word 64, edge_triggered___unsigned_long#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.restore_user_context(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.seL4_MessageInfo_new(label___unsigned_longlong#v : Word 64, capsUnwrapped___unsigned_longlong#v : Word 64, extraCaps___unsigned_longlong#v : Word 64, length___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((label___unsigned_longlong#v : Word 64) & 4503599627370495 << WordCast(12)) | ((capsUnwrapped___unsigned_longlong#v : Word 64) & 7 << WordCast(9)) | ((extraCaps___unsigned_longlong#v : Word 64) & 3 << WordCast(7)) | ((length___unsigned_longlong#v : Word 64) & 127 << WordCast(0))
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 7) && (7 <s 64) && (0 <=s 9) && (9 <s 64) && (0 <=s 12) && (12 <s 64)
EntryPoint 5

Function Kernel_C.setMRs_syscall_error(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
4 Basic 3 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
5 Call 4 Kernel_C.setMR(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), (Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
8 Basic 7 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
9 Call 8 Kernel_C.setMR(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), (Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 8), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
12 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
13 Basic 12 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
14 Call 13 Kernel_C.setMR(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(1), (Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 24), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Cond 14 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
16 Call 15 Kernel_C.setMR(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), (Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 16), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Cond 16 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
18 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
19 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
20 Basic 19 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
21 Call 20 Kernel_C.setMRs_lookup_failure(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((current_lookup_fault : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((current_lookup_fault : Word 64) + 0 + (8 * 1)), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
22 Cond 21 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
23 Call 22 Kernel_C.setMR(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), WordCastSigned(IfThenElse(!((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 40) == 0), 1, 0)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
24 Cond 23 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
25 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
26 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
27 Basic 26 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
28 Call 27 Kernel_C.setMR(thread___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), (Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
30 Cond 2 Err false
31 Call 30 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
32 Cond 31 Err false
33 Cond 32 2 true
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
35 Cond 29 34 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(10)) || false
36 Cond 35 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
37 Cond 25 36 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(9)) || ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(8)) || ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(7)) || false
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
39 Cond 24 38 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(6)) || false
40 Cond 39 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
41 Cond 18 40 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(5)) || false
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
43 Cond 17 42 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(4)) || false
44 Cond 43 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
45 Cond 11 44 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(3)) || false
46 Cond 45 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
47 Cond 10 46 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(2)) || false
48 Cond 47 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
49 Cond 6 48 ((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48) == WordCastSigned(1)) || false
50 Cond 49 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
EntryPoint 50

Function Kernel_C.vmAttributesFromWord(w___unsigned_long#v : Word 64) -- updates: (ret__struct_vm_attributes_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_vm_attributes_C#v.words_C.0 : Word 64 = attr___struct_vm_attributes_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var attr___struct_vm_attributes_C#v.words_C.0 : Word 64 = WordCast(w___unsigned_long#v : Word 64)
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0)
EntryPoint 5

Function Kernel_C.Arch_decodeInvocation(label___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cptr___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.decodeRISCVMMUInvocation(label___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cptr___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.Arch_handleFaultReply(receiver___ptr_to_struct_tcb_C#v : Word 64, sender___ptr_to_struct_tcb_C#v : Word 64, faultType___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Cond 2 Err false
5 Call 4 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
6 Cond 5 Err false
7 Cond 6 2 true
8 Cond 3 7 ((faultType___unsigned_long#v : Word 64) == WordCastSigned(5)) || false
EntryPoint 8

Function Kernel_C.Arch_invokeIRQControl(irq___unsigned_long#v : Word 64, handlerSlot___ptr_to_struct_cte_C#v : Word 64, controlSlot___ptr_to_struct_cte_C#v : Word 64, trigger___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeIRQControl(irq___unsigned_long#v : Word 64, handlerSlot___ptr_to_struct_cte_C#v : Word 64, controlSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setIRQTrigger(irq___unsigned_long#v : Word 64, trigger___unsigned_long#v : Word 64) -- updates ()
EntryPoint 6

Function Kernel_C.cap_asid_pool_cap_new(capASIDBase___unsigned_longlong#v : Word 64, capASIDPool___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(13) & 31 << WordCast(59)) | ((capASIDBase___unsigned_longlong#v : Word 64) & 65535 << WordCast(43)) | ((capASIDPool___unsigned_longlong#v : Word 64) & 549755813884 >> WordCast(2))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 2) && (2 <s 64) && (0 <=s 43) && (43 <s 64) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.cap_get_capIsPhysical(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
5 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
10 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
12 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
13 Basic 1 { }
14 Basic 13 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
15 Call 14 Kernel_C.cap_get_archCapIsPhysical(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
16 Cond 15 2 true
17 Cond 12 16 ((ctag___enum_cap_tag#v : Word 32) == 16) || false
18 Cond 11 17 ((ctag___enum_cap_tag#v : Word 32) == 14) || false
19 Cond 10 18 ((ctag___enum_cap_tag#v : Word 32) == 8) || false
20 Cond 9 19 ((ctag___enum_cap_tag#v : Word 32) == 20) || false
21 Cond 8 20 ((ctag___enum_cap_tag#v : Word 32) == 18) || false
22 Cond 7 21 ((ctag___enum_cap_tag#v : Word 32) == 12) || false
23 Cond 6 22 ((ctag___enum_cap_tag#v : Word 32) == 10) || false
24 Cond 5 23 ((ctag___enum_cap_tag#v : Word 32) == 6) || false
25 Cond 4 24 ((ctag___enum_cap_tag#v : Word 32) == 4) || false
26 Cond 3 25 ((ctag___enum_cap_tag#v : Word 32) == 2) || false
27 Basic 26 {
    var ctag___enum_cap_tag#v : Word 32 = WordCast(ret__unsigned_longlong#v : Word 64)
}
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 29

Function Kernel_C.ceiling_kernel_window(p___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = p___unsigned_long#v : Word 64
}
4 Basic 3 {
    var p___unsigned_long#v : Word 64 = -2147483648
}
5 Cond 4 3 (-2147483648 - -274877906944 - 0) < (ret__unsigned_long#v : Word 64)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.addrFromPPtr(p___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 7

Function Kernel_C.create_initial_thread(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, ui_v_entry___unsigned_long#v : Word 64, bi_frame_vptr___unsigned_long#v : Word 64, ipcbuf_vptr___unsigned_long#v : Word 64, ipcbuf_cap___struct_cap_C#v.words_C.0 : Word 64, ipcbuf_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__ptr_to_struct_tcb_C#v : Word 64 = tcb___ptr_to_struct_tcb_C#v : Word 64
}
4 Cond 3 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(1)))
5 Call 4 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (1 * 32), cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(1)))
7 Basic 6 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
8 Call 7 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
9 Basic 8 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
10 Call 9 Kernel_C.cap_thread_cap_new(WordCast(tcb___ptr_to_struct_tcb_C#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
11 Basic 10 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksDomainTime : Word 64, (Mem : Mem) -MemAcc-> ((ksDomSchedule : Word 64) + (16 * (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64)) + 8))
}
12 Cond 11 Err PGlobalValid(HTD : HTD, Word 64, ksDomainTime : Word 64) && PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
13 Cond 12 Err (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64) < WordCastSigned(3)
14 Cond 13 Err PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
15 Basic 14 {
    var Mem : Mem = MemUpdate(Mem : Mem, ksCurDomain : Word 64, (Mem : Mem) -MemAcc-> ((ksDomSchedule : Word 64) + (16 * (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64)) + 0))
}
16 Cond 15 Err PGlobalValid(HTD : HTD, Word 64, ksCurDomain : Word 64) && PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
17 Cond 16 Err (Mem : Mem) -MemAcc-> (ksDomScheduleIdx : Word 64) < WordCastSigned(3)
18 Cond 17 Err PGlobalValid(HTD : HTD, Word 64, ksDomScheduleIdx : Word 64)
19 Call 18 Kernel_C.setThreadState(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Call 19 Kernel_C.setupReplyMaster(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
21 Basic 20 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 352, WordCastSigned(255))
}
22 Cond 21 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
23 Basic 22 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 360, WordCastSigned(255))
}
24 Cond 23 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
25 Call 24 Kernel_C.setNextPC(tcb___ptr_to_struct_tcb_C#v : Word 64, ui_v_entry___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
26 Call 25 Kernel_C.setRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), bi_frame_vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Basic 26 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 384, ipcbuf_vptr___unsigned_long#v : Word 64)
}
28 Cond 27 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
29 Cond 28 Err (4 == 0) || ((4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (4 * 32), WordCast(0 - 4))) || (!(4 == 0) && !(4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48), WordCast(4))) && (10 == 0) || ((10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (10 * 32), WordCast(0 - 10))) || (!(10 == 0) && !(10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(10)))
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
31 Call 30 Kernel_C.cteInsert(dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, (ret__ptr_to_void#v : Word 64) + (10 * 32), (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (4 * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
33 Cond 32 Err (4 == 0) || ((4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (4 * 32), WordCast(0 - 4))) || (!(4 == 0) && !(4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48), WordCast(4))) && (10 == 0) || ((10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (10 * 32), WordCast(0 - 10))) || (!(10 == 0) && !(10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(10)))
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
35 Basic 34 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
36 Call 35 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
37 Cond 36 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48), WordCast(1))) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(3)))
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
39 Call 38 Kernel_C.cteInsert(it_pd_cap___struct_cap_C#v.words_C.0 : Word 64, it_pd_cap___struct_cap_C#v.words_C.1 : Word 64, (ret__ptr_to_void#v : Word 64) + (3 * 32), (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (1 * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
40 Cond 39 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
41 Cond 40 Err (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48), WordCast(1))) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(3)))
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
43 Basic 42 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
44 Call 43 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
45 Cond 44 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48), WordCast(0))) && (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(2)))
46 Cond 45 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
47 Call 46 Kernel_C.cteInsert(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, (ret__ptr_to_void#v : Word 64) + (2 * 32), (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (0 * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
48 Cond 47 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
49 Cond 48 Err (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48), WordCast(0))) && (2 == 0) || ((2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (2 * 32), WordCast(0 - 2))) || (!(2 == 0) && !(2 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(2)))
50 Cond 49 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
51 Basic 50 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
52 Call 51 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
53 Basic 1 {
    var ret__ptr_to_struct_tcb_C#v : Word 64 = WordCastSigned(0)
}
54 Cond 53 52 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
55 Cond 54 Err (10 == 0) || ((10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (10 * 32), WordCast(0 - 10))) || (!(10 == 0) && !(10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(10)))
56 Basic 55 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
57 Call 56 Kernel_C.deriveCap((ret__ptr_to_void#v : Word 64) + (10 * 32), ipcbuf_cap___struct_cap_C#v.words_C.0 : Word 64, ipcbuf_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
58 Cond 57 Err (10 == 0) || ((10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (10 * 32), WordCast(0 - 10))) || (!(10 == 0) && !(10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(10)))
59 Basic 58 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
60 Call 59 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
61 Call 60 Kernel_C.Arch_initContext(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
62 Cond 61 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
63 Basic 62 {
    var Mem : Mem = MemUpdate(Mem : Mem, (tcb___ptr_to_struct_tcb_C#v : Word 64) + 368, WordCastSigned(5))
}
64 Cond 63 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
65 Basic 64 {
    var tcb___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 48) + 1 << WordCast(10 - 1)
}
66 Cond 65 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
67 Cond 66 Err (0 <=s (10 - 1)) && ((10 - 1) <s 64) && ((0 <=s (10 - 1)) == (1 <=s 10))
EntryPoint 67

Function Kernel_C.decodeCNodeInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 1 { }
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.invokeCNodeRotate(newSrcCap___struct_cap_C#v.words_C.0 : Word 64, newSrcCap___struct_cap_C#v.words_C.1 : Word 64, newPivotCap___struct_cap_C#v.words_C.0 : Word 64, newPivotCap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, pivotSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Call 6 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
12 Cond 11 8 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_get_capType(newPivotCap___struct_cap_C#v.words_C.0 : Word 64, newPivotCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
16 Basic 15 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
17 Cond 16 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
18 Cond 17 14 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.cap_get_capType(newSrcCap___struct_cap_C#v.words_C.0 : Word 64, newSrcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
21 Basic 20 {
    var newPivotCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var newPivotCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
22 Call 21 Kernel_C.updateCapData(WordCastSigned(1), pivotNewData___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((pivotSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((pivotSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, pivotSlot___ptr_to_struct_cte_C#v : Word 64)
24 Basic 23 {
    var newSrcCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var newSrcCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
25 Call 24 Kernel_C.updateCapData(WordCastSigned(1), srcNewData___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
26 Cond 25 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
27 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
28 Basic 27 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
30 Call 29 Kernel_C.lookup_fault_missing_capability_new(WordCast(pivotDepth___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
31 Basic 30 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(0))
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
33 Basic 32 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
35 Cond 34 26 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
36 Basic 35 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
37 Call 36 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((pivotSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((pivotSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
38 Cond 37 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, pivotSlot___ptr_to_struct_cte_C#v : Word 64)
39 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
40 Basic 39 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
41 Cond 40 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
42 Call 41 Kernel_C.lookup_fault_missing_capability_new(WordCast(srcDepth___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
43 Basic 42 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(1))
}
44 Cond 43 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
45 Basic 44 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
46 Cond 45 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
47 Cond 46 38 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
48 Basic 47 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
49 Call 48 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
50 Cond 49 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
51 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
52 Cond 51 50 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
53 Basic 52 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
54 Call 53 Kernel_C.ensureEmptySlot(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
55 Cond 54 50 !((srcSlot___ptr_to_struct_cte_C#v : Word 64) == (destSlot___ptr_to_struct_cte_C#v : Word 64))
56 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
57 Basic 56 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
58 Cond 57 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
59 Cond 58 55 ((pivotSlot___ptr_to_struct_cte_C#v : Word 64) == (srcSlot___ptr_to_struct_cte_C#v : Word 64)) || ((pivotSlot___ptr_to_struct_cte_C#v : Word 64) == (destSlot___ptr_to_struct_cte_C#v : Word 64))
60 Basic 59 {
    var pivotSlot___ptr_to_struct_cte_C#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
61 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
62 Cond 61 60 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
63 Basic 62 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
64 Call 63 Kernel_C.lookupPivotSlot(pivotRoot___struct_cap_C#v.words_C.0 : Word 64, pivotRoot___struct_cap_C#v.words_C.1 : Word 64, pivotIndex___unsigned_long#v : Word 64, pivotDepth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
65 Basic 64 {
    var srcSlot___ptr_to_struct_cte_C#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
66 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
67 Cond 66 65 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
68 Basic 67 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
69 Call 68 Kernel_C.lookupSourceSlot(srcRoot___struct_cap_C#v.words_C.0 : Word 64, srcRoot___struct_cap_C#v.words_C.1 : Word 64, srcIndex___unsigned_long#v : Word 64, srcDepth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
70 Basic 69 {
    var srcRoot___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 0))
    var srcRoot___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 1))
}
71 Cond 70 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
72 Cond 71 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1))) && (1 <s 3) && (0 <=s 1)
73 Cond 72 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
74 Basic 73 {
    var pivotRoot___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var pivotRoot___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
75 Cond 74 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
76 Cond 75 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
77 Cond 76 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
78 Basic 77 {
    var srcDepth___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
79 Call 78 Kernel_C.getSyscallArg(WordCastSigned(7), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
80 Basic 79 {
    var srcIndex___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
81 Call 80 Kernel_C.getSyscallArg(WordCastSigned(6), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
82 Basic 81 {
    var srcNewData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
83 Call 82 Kernel_C.getSyscallArg(WordCastSigned(5), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
84 Basic 83 {
    var pivotDepth___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
85 Call 84 Kernel_C.getSyscallArg(WordCastSigned(4), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
86 Basic 85 {
    var pivotIndex___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
87 Call 86 Kernel_C.getSyscallArg(WordCastSigned(3), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
88 Basic 87 {
    var pivotNewData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
89 Call 88 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
90 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
91 Basic 90 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
92 Cond 91 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
93 Cond 92 89 !((ret__int#v : Word 32) == 0)
94 Basic 93 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) == WordCastSigned(0), 1, 0)
}
95 Cond 94 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
96 Cond 95 Err (1 <s 3) && (0 <=s 1)
97 Cond 93 96 !((ret__int#v : Word 32) == 0)
98 Basic 97 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
99 Cond 98 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
100 Cond 99 Err (0 <s 3) && (0 <=s 0)
101 Cond 97 100 !((ret__int#v : Word 32) == 0)
102 Basic 101 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(8), 1, 0)
}
103 Cond 102 3 (invLabel___unsigned_long#v : Word 64) == WordCastSigned(23)
104 Basic 1 { }
105 Basic 104 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
106 Call 105 Kernel_C.invokeCNodeCancelBadgedSends(destCap___struct_cap_C#v.words_C.0 : Word 64, destCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
107 Call 106 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
108 Cond 107 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
109 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
110 Basic 109 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
111 Cond 110 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
112 Cond 111 108 !(!((ret__unsigned_long#v : Word 64) == 0))
113 Basic 112 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
114 Call 113 Kernel_C.hasCancelSendRights(destCap___struct_cap_C#v.words_C.0 : Word 64, destCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
115 Basic 114 {
    var destCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((destSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var destCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((destSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
116 Cond 115 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, destSlot___ptr_to_struct_cte_C#v : Word 64)
117 Cond 116 103 (invLabel___unsigned_long#v : Word 64) == WordCastSigned(18)
118 Basic 1 { }
119 Basic 118 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
120 Call 119 Kernel_C.invokeCNodeSaveCaller(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
121 Call 120 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
122 Cond 121 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
123 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
124 Cond 123 122 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
125 Basic 124 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
126 Call 125 Kernel_C.ensureEmptySlot(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
127 Cond 126 117 (invLabel___unsigned_long#v : Word 64) == WordCastSigned(24)
128 Basic 1 { }
129 Basic 128 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
130 Call 129 Kernel_C.invokeCNodeDelete(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
131 Call 130 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
132 Cond 131 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
133 Cond 132 127 (invLabel___unsigned_long#v : Word 64) == WordCastSigned(17)
134 Basic 1 { }
135 Basic 134 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
136 Call 135 Kernel_C.invokeCNodeRevoke(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
137 Call 136 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
138 Cond 137 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
139 Cond 138 133 (invLabel___unsigned_long#v : Word 64) == WordCastSigned(16)
140 Basic 1 { }
141 Basic 140 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
142 Call 141 Kernel_C.invokeCNodeMove(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
143 Basic 1 { }
144 Basic 143 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
145 Call 144 Kernel_C.invokeCNodeInsert(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
146 Cond 142 145 !((isMove___unsigned_long#v : Word 64) == 0)
147 Call 146 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
148 Cond 147 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
149 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
150 Basic 149 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
151 Cond 150 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
152 Cond 151 148 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
153 Basic 152 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
154 Call 153 Kernel_C.cap_get_capType(newCap___struct_cap_C#v.words_C.0 : Word 64, newCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
155 Basic 154 {
    var isMove___unsigned_long#v : Word 64 = WordCastSigned(0)
}
156 Basic 155 {
    var newCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var newCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
157 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
158 Cond 157 156 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
159 Basic 158 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
160 Call 159 Kernel_C.deriveCap(srcSlot___ptr_to_struct_cte_C#v : Word 64, srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
161 Basic 160 {
    var srcCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var srcCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
162 Call 161 Kernel_C.maskCapRights(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64, (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
163 Cond 162 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
164 Basic 163 {
    var cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64
}
165 Call 164 Kernel_C.rightsFromWord(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64)
166 Basic 165 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
167 Call 166 Kernel_C.getSyscallArg(WordCastSigned(4), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
168 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
169 Basic 168 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
170 Cond 169 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
171 Cond 170 167 (length___unsigned_long#v : Word 64) < WordCastSigned(5)
172 Basic 154 {
    var isMove___unsigned_long#v : Word 64 = WordCastSigned(0)
}
173 Basic 172 {
    var newCap___struct_cap_C#v.words_C.0 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var newCap___struct_cap_C#v.words_C.1 : Word 64 = dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
174 Basic 1 {
    var ret__unsigned_long#v : Word 64 = dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64
}
175 Cond 174 173 !((dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64) == WordCastSigned(0))
176 Basic 175 {
    var dc_ret___struct_deriveCap_ret_C#v.status_C : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64
    var dc_ret___struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64 = rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64
}
177 Call 176 Kernel_C.deriveCap(srcSlot___ptr_to_struct_cte_C#v : Word 64, ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_deriveCap_ret_C#v.status_C : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.0 : Word 64, rv#space#ret__struct_deriveCap_ret_C#v.cap_C.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
178 Basic 177 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
179 Call 178 Kernel_C.updateCapData(WordCastSigned(0), capData___unsigned_long#v : Word 64, srcCap___struct_cap_C#v.words_C.0 : Word 64, srcCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
180 Basic 179 {
    var srcCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var srcCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
181 Call 180 Kernel_C.maskCapRights(cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64, (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
182 Cond 181 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
183 Basic 182 {
    var capData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
184 Call 183 Kernel_C.getSyscallArg(WordCastSigned(5), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
185 Basic 184 {
    var cap_rights___struct_seL4_CapRights_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64
}
186 Call 185 Kernel_C.rightsFromWord(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64)
187 Basic 186 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
188 Call 187 Kernel_C.getSyscallArg(WordCastSigned(4), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
189 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
190 Basic 189 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
191 Cond 190 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
192 Cond 191 188 (length___unsigned_long#v : Word 64) < WordCastSigned(6)
193 Basic 154 {
    var isMove___unsigned_long#v : Word 64 = WordCastSigned(1)
}
194 Basic 193 {
    var newCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var newCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
195 Cond 194 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
196 Basic 154 {
    var isMove___unsigned_long#v : Word 64 = WordCastSigned(1)
}
197 Basic 196 {
    var newCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var newCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
198 Call 197 Kernel_C.updateCapData(WordCastSigned(1), capData___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
199 Cond 198 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
200 Basic 199 {
    var capData___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
201 Call 200 Kernel_C.getSyscallArg(WordCastSigned(4), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
202 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
203 Basic 202 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
204 Cond 203 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
205 Cond 204 201 (length___unsigned_long#v : Word 64) < WordCastSigned(5)
206 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
207 Cond 206 154 true
208 Cond 205 207 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(22)) || false
209 Cond 195 208 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(21)) || false
210 Cond 192 209 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(20)) || false
211 Cond 171 210 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(19)) || false
212 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
213 Basic 212 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
214 Cond 213 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
215 Call 214 Kernel_C.lookup_fault_missing_capability_new(WordCast(srcDepth___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
216 Basic 215 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(1))
}
217 Cond 216 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
218 Basic 217 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
219 Cond 218 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
220 Cond 219 211 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
221 Basic 220 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
222 Call 221 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
223 Cond 222 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
224 Basic 223 {
    var srcSlot___ptr_to_struct_cte_C#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
225 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
226 Cond 225 224 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
227 Basic 226 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
228 Call 227 Kernel_C.lookupSourceSlot(srcRoot___struct_cap_C#v.words_C.0 : Word 64, srcRoot___struct_cap_C#v.words_C.1 : Word 64, srcIndex___unsigned_long#v : Word 64, srcDepth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
229 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
230 Cond 229 228 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
231 Basic 230 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
232 Call 231 Kernel_C.ensureEmptySlot(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
233 Basic 232 {
    var srcRoot___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var srcRoot___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
234 Cond 233 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
235 Cond 234 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
236 Cond 235 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
237 Basic 236 {
    var srcDepth___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
238 Call 237 Kernel_C.getSyscallArg(WordCastSigned(3), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
239 Basic 238 {
    var srcIndex___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
240 Call 239 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
241 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
242 Basic 241 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
243 Cond 242 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
244 Cond 243 240 !((ret__int#v : Word 32) == 0)
245 Basic 244 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
246 Cond 245 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
247 Cond 246 Err (0 <s 3) && (0 <=s 0)
248 Cond 244 247 !((ret__int#v : Word 32) == 0)
249 Basic 248 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(4), 1, 0)
}
250 Cond 249 139 (WordCastSigned(19) <= (invLabel___unsigned_long#v : Word 64)) && ((invLabel___unsigned_long#v : Word 64) <= WordCastSigned(22))
251 Basic 250 {
    var destSlot___ptr_to_struct_cte_C#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
252 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
253 Cond 252 251 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
254 Basic 253 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
255 Call 254 Kernel_C.lookupTargetSlot(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, index___unsigned_long#v : Word 64, w_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
256 Basic 255 {
    var w_bits___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
257 Call 256 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
258 Basic 257 {
    var index___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
259 Call 258 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
260 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
261 Basic 260 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
262 Cond 261 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
263 Cond 262 259 (length___unsigned_long#v : Word 64) < WordCastSigned(2)
264 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
265 Basic 264 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
266 Cond 265 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
267 Cond 266 263 ((invLabel___unsigned_long#v : Word 64) < WordCastSigned(16)) || (WordCastSigned(24) < (invLabel___unsigned_long#v : Word 64))
EntryPoint 267

Function Kernel_C.invokeCNodeSaveCaller(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.cteMove(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 3 !(!((ret__unsigned_longlong#v : Word 64) == 0))
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_reply_cap_get_capReplyMaster(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Cond 3 Err false
9 Call 8 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
10 Cond 9 Err false
11 Cond 10 3 true
12 Cond 7 11 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(8)) || false
13 Cond 3 12 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)) || false
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
16 Basic 15 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, srcSlot___ptr_to_struct_cte_C#v : Word 64)
18 Basic 17 {
    var srcSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32)
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
20 Cond 19 Err (0 <=s 10) && (10 <s 64) && (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64) & ~(1 << WordCast(10) - 1), WordCast(3)))
21 Cond 20 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 21

Function Kernel_C.performPageGetAddress(vbase_ptr___ptr_to_void#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.setRegister((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(10), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.wordFromMessageInfo(ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Basic 7 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
9 Call 8 Kernel_C.seL4_MessageInfo_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(1)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
10 Call 9 Kernel_C.setRegister((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(11), capFBasePtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 10 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
12 Cond 11 Err (0 <s 4) && (0 <=s 0)
13 Basic 12 {
    var capFBasePtr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.addrFromPPtr(vbase_ptr___ptr_to_void#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 14

Function Kernel_C.replyFromKernel_error(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.wordFromMessageInfo(ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
5 Basic 4 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
6 Call 5 Kernel_C.seL4_MessageInfo_new(WordCast((Mem : Mem) -MemAcc-> ((current_syscall_error : Word 64) + 48)), WordCastSigned(0), WordCastSigned(0), WordCast(len___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
8 Basic 7 {
    var len___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.setMRs_syscall_error(thread___ptr_to_struct_tcb_C#v : Word 64, ipcBuffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Call 9 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Basic 10 {
    var ipcBuffer___ptr_to_unsigned_long#v : Word 64 = rv#space#ret__ptr_to_unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.lookupIPCBuffer(WordCastSigned(1), thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_unsigned_long#v : Word 64)
EntryPoint 12

Function Kernel_C.sbi_remote_sfence_vma(hart_mask___ptr_to_unsigned_long#v : Word 64, start___unsigned_long#v : Word 64, size___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(6), hart_mask___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.setMRs_lookup_failure(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64, offset___unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned#v : Word 32 = WordCast(i___unsigned_long#v : Word 64)
}
4 Basic 1 { }
5 Basic 4 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
6 Call 5 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (offset___unsigned#v : Word 32) + WordCastSigned(1), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.lookup_fault_missing_capability_get_bitsLeft(luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Basic 1 { }
10 Basic 9 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
11 Call 10 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (offset___unsigned#v : Word 32) + WordCastSigned(2), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Basic 11 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
13 Call 12 Kernel_C.lookup_fault_depth_mismatch_get_bitsFound(luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
14 Call 13 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (offset___unsigned#v : Word 32) + WordCastSigned(1), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.lookup_fault_depth_mismatch_get_bitsLeft(luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 1 { }
18 Basic 17 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
19 Call 18 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (offset___unsigned#v : Word 32) + WordCastSigned(3), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.lookup_fault_guard_mismatch_get_bitsFound(luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Call 21 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (offset___unsigned#v : Word 32) + WordCastSigned(2), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.lookup_fault_guard_mismatch_get_guardFound(luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Call 24 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, (offset___unsigned#v : Word 32) + WordCastSigned(1), WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
26 Basic 25 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
27 Call 26 Kernel_C.lookup_fault_guard_mismatch_get_bitsLeft(luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
28 Cond 2 Err false
29 Call 28 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
30 Cond 29 Err false
31 Cond 30 2 true
32 Cond 27 31 ((lufType___unsigned_long#v : Word 64) == WordCastSigned(3)) || false
33 Cond 16 32 ((lufType___unsigned_long#v : Word 64) == WordCastSigned(2)) || false
34 Cond 8 33 ((lufType___unsigned_long#v : Word 64) == WordCastSigned(1)) || false
35 Cond 3 34 ((lufType___unsigned_long#v : Word 64) == WordCastSigned(0)) || false
36 Cond 35 35 (offset___unsigned#v : Word 32) == WordCastSigned(3)
37 Basic 36 {
    var i___unsigned_long#v : Word 64 = WordCast(ret__unsigned#v : Word 32)
}
38 Basic 37 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
39 Call 38 Kernel_C.setMR(receiver___ptr_to_struct_tcb_C#v : Word 64, receiveIPCBuffer___ptr_to_unsigned_long#v : Word 64, offset___unsigned#v : Word 32, (lufType___unsigned_long#v : Word 64) + WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
40 Basic 39 {
    var lufType___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.lookup_fault_get_lufType(luf___struct_lookup_fault_C#v.words_C.0 : Word 64, luf___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 42

Function Kernel_C.Arch_finaliseInterrupt() -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.StrictC'__builtin_clzl(x___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.StrictC'__builtin_ctzl(x___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.activate_kernel_vspace(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setVSpaceRoot(ret__unsigned_long#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.kpptr_to_paddr(kernel_root_pageTable : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
5 Cond 4 Err PValid(HTD : HTD, Array (Struct Kernel_C.pte_C) 512, kernel_root_pageTable : Word 64)
EntryPoint 5

Function Kernel_C.cap_page_table_cap_new(capPTMappedASID___unsigned_longlong#v : Word 64, capPTBasePtr___unsigned_longlong#v : Word 64, capPTIsMapped___unsigned_longlong#v : Word 64, capPTMappedAddress___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capPTMappedASID___unsigned_longlong#v : Word 64) & 65535 << WordCast(48)) | ((capPTBasePtr___unsigned_longlong#v : Word 64) & 549755813887 << WordCast(9))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 9) && (9 <s 64) && (0 <=s 48) && (48 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(3) & 31 << WordCast(59)) | ((capPTIsMapped___unsigned_longlong#v : Word 64) & 1 << WordCast(39)) | ((capPTMappedAddress___unsigned_longlong#v : Word 64) & 549755813887 >> WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 39) && (39 <s 64) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.create_device_untypeds(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, slot_pos_before___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
5 Cond 4 3 !(!((ret__unsigned_long#v : Word 64) == 0))
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.create_untypeds_for_region(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(1), reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64, slot_pos_before___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var reg___struct_region_C#v.end_C : Word 64 = -2147483648
}
9 Cond 8 7 -2147483648 < (reg___struct_region_C#v.end_C : Word 64)
10 Basic 9 {
    var reg___struct_region_C#v.start_C : Word 64 = rv#space#ret__struct_region_C#v.start_C : Word 64
    var reg___struct_region_C#v.end_C : Word 64 = rv#space#ret__struct_region_C#v.end_C : Word 64
}
11 Call 10 Kernel_C.paddr_to_pptr_reg(start___unsigned_long#v : Word 64, WordCastSigned(549755813887)) -- updates (rv#space#ret__struct_region_C#v.start_C : Word 64, rv#space#ret__struct_region_C#v.end_C : Word 64)
12 Cond 11 3 (start___unsigned_long#v : Word 64) < WordCastSigned(549755813887)
17 Basic 13 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
18 Basic 17 {
    var start___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 8)
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
20 Cond 19 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
21 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
22 Cond 21 20 !(!((ret__unsigned_long#v : Word 64) == 0))
23 Basic 22 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.create_untypeds_for_region(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(1), reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64, slot_pos_before___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
25 Basic 24 {
    var reg___struct_region_C#v.start_C : Word 64 = rv#space#ret__struct_region_C#v.start_C : Word 64
    var reg___struct_region_C#v.end_C : Word 64 = rv#space#ret__struct_region_C#v.end_C : Word 64
}
26 Call 25 Kernel_C.paddr_to_pptr_reg(start___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0)) -- updates (rv#space#ret__struct_region_C#v.start_C : Word 64, rv#space#ret__struct_region_C#v.end_C : Word 64)
27 Cond 26 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
28 Cond 27 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
29 Cond 28 20 (start___unsigned_long#v : Word 64) < (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 0 + (16 * (i___unsigned_long#v : Word 64)) + 0)
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
31 Cond 30 Err (i___unsigned_long#v : Word 64) < WordCastSigned(20)
13 Basic 14 {
    var loop#13#count : Word 64 = (loop#13#count : Word 64) + 1
}
14 Cond 15 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
15 Cond 31 12 (i___unsigned_long#v : Word 64) < (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 320)
16 Basic 14 {
    var loop#13#count : Word 64 = 0
}
32 Basic 16 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
33 Basic 32 {
    var start___unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 33

Function Kernel_C.create_kernel_untypeds(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, boot_mem_reuse_reg___struct_region_C#v.start_C : Word 64, boot_mem_reuse_reg___struct_region_C#v.end_C : Word 64, first_untyped_slot___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
8 Basic 4 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
10 Cond 9 8 !(!((ret__unsigned_long#v : Word 64) == 0))
11 Basic 10 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.create_untypeds_for_region(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0), reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64, first_untyped_slot___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Basic 12 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0, WordCastSigned(0)), (ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8, WordCastSigned(0))
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
15 Cond 14 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
16 Basic 15 {
    var reg___struct_region_C#v.start_C : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 0)
    var reg___struct_region_C#v.end_C : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 328 + (16 * (i___unsigned_long#v : Word 64)) + 8)
}
17 Cond 16 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
18 Cond 17 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 18 3 (i___unsigned_long#v : Word 64) < WordCastSigned(16)
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
19 Basic 7 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
20 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
21 Cond 20 19 !(!((ret__unsigned_long#v : Word 64) == 0))
22 Basic 21 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
23 Call 22 Kernel_C.create_untypeds_for_region(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0), boot_mem_reuse_reg___struct_region_C#v.start_C : Word 64, boot_mem_reuse_reg___struct_region_C#v.end_C : Word 64, first_untyped_slot___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 23

Function Kernel_C.decodeBindNotification(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_NotificationControl(tcb___ptr_to_struct_tcb_C#v : Word 64, ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
11 Cond 10 7 !((ret__int#v : Word 32) == 0)
12 Basic 11 {
    var ret__int#v : Word 32 = IfThenElse(!(WordCast(ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.notification_ptr_get_ntfnBoundTCB(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Cond 11 14 !((ret__int#v : Word 32) == 0)
16 Basic 15 {
    var ret__int#v : Word 32 = IfThenElse(!(WordCast(ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.notification_ptr_get_ntfnQueue_head(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
20 Basic 19 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
21 Cond 20 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
22 Cond 21 18 !(!((ret__unsigned_longlong#v : Word 64) == 0))
23 Basic 22 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
24 Call 23 Kernel_C.cap_notification_cap_get_capNtfnCanReceive(ntfn_cap___struct_cap_C#v.words_C.0 : Word 64, ntfn_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
25 Basic 24 {
    var ntfnPtr___ptr_to_struct_notification_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
26 Basic 25 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
27 Call 26 Kernel_C.cap_notification_cap_get_capNtfnPtr(ntfn_cap___struct_cap_C#v.words_C.0 : Word 64, ntfn_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
28 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
29 Basic 28 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
31 Cond 27 30 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)
32 Basic 31 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
33 Call 32 Kernel_C.cap_get_capType(ntfn_cap___struct_cap_C#v.words_C.0 : Word 64, ntfn_cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
34 Basic 33 {
    var ntfn_cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var ntfn_cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
35 Cond 34 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
36 Cond 35 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
37 Cond 36 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
38 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
39 Basic 38 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
40 Cond 39 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
41 Cond 40 37 !((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 304) == 0)
42 Cond 41 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
43 Basic 42 {
    var tcb___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
44 Basic 43 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
45 Call 44 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
46 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
47 Basic 46 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
48 Cond 47 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
49 Cond 48 45 (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0)
50 Cond 49 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
51 Cond 50 Err (0 <s 3) && (0 <=s 0)
EntryPoint 51

Function Kernel_C.decodeDomainInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.setDomain(WordCast(ret__unsigned_longlong#v : Word 64), domain___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_thread_cap_get_capTCBPtr(tcap___struct_cap_C#v.words_C.0 : Word 64, tcap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Call 6 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
10 Basic 9 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(1))
}
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
12 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
13 Cond 12 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
14 Cond 13 8 !(!(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12))))
15 Basic 14 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_get_capType(tcap___struct_cap_C#v.words_C.0 : Word 64, tcap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 16 {
    var tcap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var tcap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
18 Cond 17 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
20 Cond 19 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
21 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
22 Basic 21 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
23 Cond 22 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
24 Cond 23 20 !(!((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0)))
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
26 Cond 25 Err (0 <s 3) && (0 <=s 0)
27 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
28 Basic 27 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
30 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
31 Basic 30 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(0))
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
33 Basic 32 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
35 Cond 34 26 WordCastSigned(16) <= (domain___unsigned_long#v : Word 64)
36 Basic 35 {
    var domain___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
37 Call 36 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
38 Cond 29 37 !(!((length___unsigned_long#v : Word 64) == WordCastSigned(0)))
39 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
40 Basic 39 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
41 Cond 40 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
42 Cond 41 38 !(!(!((invLabel___unsigned_long#v : Word 64) == WordCastSigned(29))))
EntryPoint 42

Function Kernel_C.doNBRecvFailedTransfer(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.endpoint_ptr_get_state(endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 0)) & 3 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 11

Function Kernel_C.endpoint_ptr_set_state(endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCastSigned(3)))
}
3 Cond 2 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 0)) & ~(3))
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 5

Function Kernel_C.initLocalIRQController(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.set_sie_mask(sie___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var sie___unsigned_long#v : Word 64 = (sie___unsigned_long#v : Word 64) | (1 << WordCast(5))
}
4 Cond 3 Err (0 <=s 5) && (5 <s 64)
5 Basic 4 {
    var sie___unsigned_long#v : Word 64 = (sie___unsigned_long#v : Word 64) | (1 << WordCast(9))
}
6 Cond 5 Err (0 <=s 9) && (9 <s 64)
7 Basic 6 {
    var sie___unsigned_long#v : Word 64 = WordCastSigned(0)
}
8 Call 7 Kernel_C.plic_init_hart(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 8

Function Kernel_C.plat_invalidateL2Range(start___unsigned_long#v : Word 64, end___unsigned_long#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.plic_pending_interrupt(interrupt___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
5 Cond 3 4 !(WordCast(ret__unsigned#v : Word 32) & (1 << (bit___unsigned_long#v : Word 64)) == 0)
6 Cond 5 Err (bit___unsigned_long#v : Word 64) < WordCastSigned(64)
7 Basic 6 {
    var ret__unsigned#v : Word 32 = rv#space#ret__unsigned#v : Word 32
}
8 Call 7 Kernel_C.readl(WordCast(addr___unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned#v : Word 32)
9 Basic 8 {
    var bit___unsigned_long#v : Word 64 = (interrupt___unsigned_long#v : Word 64) % WordCastSigned(32)
}
10 Cond 9 Err !(32 == 0)
11 Basic 10 {
    var addr___unsigned_long#v : Word 64 = -1073741824 + WordCastSigned(0) + WordCastSigned(201326592) + WordCastSigned(4096) + ((interrupt___unsigned_long#v : Word 64) / WordCastSigned(32) * WordCastSigned(4))
}
12 Cond 11 Err !(32 == 0)
EntryPoint 12

Function Kernel_C.seL4_Fault_VMFault_new(address___unsigned_longlong#v : Word 64, FSR___unsigned_longlong#v : Word 64, instructionFault___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_Fault_C#v.words_C.0 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64
    var ret__struct_seL4_Fault_C#v.words_C.1 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((address___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((FSR___unsigned_longlong#v : Word 64) & 31 << WordCast(27)) | ((instructionFault___unsigned_longlong#v : Word 64) & 1 << WordCast(19)) | (WordCastSigned(5) & 15 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 19) && (19 <s 64) && (0 <=s 27) && (27 <s 64)
EntryPoint 7

Function Kernel_C.Arch_activateIdleThread(tcb___ptr_to_struct_tcb_C#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.Arch_switchToIdleThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setVMRoot(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var tcb___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksIdleThread : Word 64)
}
4 Cond 3 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksIdleThread : Word 64)
EntryPoint 4

Function Kernel_C.cap_get_archCapSizeBits(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.pageBitsForSize(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_frame_cap_get_capFSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(12)
}
9 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
10 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(12)
}
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
12 Cond 11 2 true
13 Cond 10 12 ((ctag___enum_cap_tag#v : Word 32) == 13) || false
14 Cond 9 13 ((ctag___enum_cap_tag#v : Word 32) == 11) || false
15 Cond 8 14 ((ctag___enum_cap_tag#v : Word 32) == 3) || false
16 Cond 7 15 ((ctag___enum_cap_tag#v : Word 32) == 1) || false
17 Basic 16 {
    var ctag___enum_cap_tag#v : Word 32 = WordCast(ret__unsigned_longlong#v : Word 64)
}
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 19

Function Kernel_C.cap_irq_control_cap_new() -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(14) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.cap_irq_handler_cap_new(capIRQ___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capIRQ___unsigned_longlong#v : Word 64) & 4095 << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(16) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.create_frames_of_region(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64, do_map___unsigned_long#v : Word 64, pv_offset___long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_create_frames_of_region_ret_C#v.region_C.start_C : Word 64, ret__struct_create_frames_of_region_ret_C#v.region_C.end_C : Word 64, ret__struct_create_frames_of_region_ret_C#v.success_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_create_frames_of_region_ret_C#v.region_C.start_C : Word 64 = slot_pos_before___unsigned_long#v : Word 64
    var ret__struct_create_frames_of_region_ret_C#v.region_C.end_C : Word 64 = slot_pos_after___unsigned_long#v : Word 64
    var ret__struct_create_frames_of_region_ret_C#v.success_C : Word 64 = WordCastSigned(1)
}
4 Basic 3 {
    var slot_pos_after___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
10 Basic 6 {
    var f___unsigned_long#v : Word 64 = (f___unsigned_long#v : Word 64) + 1 << WordCast(12)
}
11 Cond 10 Err (0 <=s 12) && (12 <s 64)
12 Basic 1 {
    var ret__struct_create_frames_of_region_ret_C#v.region_C.start_C : Word 64 = WordCastSigned(0)
    var ret__struct_create_frames_of_region_ret_C#v.region_C.end_C : Word 64 = WordCastSigned(0)
    var ret__struct_create_frames_of_region_ret_C#v.success_C : Word 64 = WordCastSigned(0)
}
13 Cond 12 11 !(!((ret__unsigned_long#v : Word 64) == 0))
14 Basic 13 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
15 Call 14 Kernel_C.provide_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, frame_cap___struct_cap_C#v.words_C.0 : Word 64, frame_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Basic 15 {
    var frame_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var frame_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
17 Call 16 Kernel_C.create_mapped_it_frame_cap(pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, f___unsigned_long#v : Word 64, ret__unsigned_long#v : Word 64, WordCastSigned(1), WordCastSigned(0), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Basic 17 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.addrFromPPtr((f___unsigned_long#v : Word 64) - WordCastSigned(pv_offset___long#v : Word 64)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
20 Basic 15 {
    var frame_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var frame_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
21 Call 20 Kernel_C.create_unmapped_it_frame_cap(f___unsigned_long#v : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
22 Cond 19 21 !((do_map___unsigned_long#v : Word 64) == 0)
6 Basic 7 {
    var loop#6#count : Word 64 = (loop#6#count : Word 64) + 1
}
7 Cond 8 Err true
8 Cond 22 5 (f___unsigned_long#v : Word 64) < (reg___struct_region_C#v.end_C : Word 64)
9 Basic 7 {
    var loop#6#count : Word 64 = 0
}
23 Basic 9 {
    var f___unsigned_long#v : Word 64 = reg___struct_region_C#v.start_C : Word 64
}
24 Basic 23 {
    var slot_pos_before___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
}
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
EntryPoint 25

Function Kernel_C.create_ipcbuf_frame_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, vptr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Cond 3 Err (10 == 0) || ((10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (10 * 32), WordCast(0 - 10))) || (!(10 == 0) && !(10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(10)))
5 Call 4 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (10 * 32), cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err (10 == 0) || ((10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (10 * 32), WordCast(0 - 10))) || (!(10 == 0) && !(10 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(10)))
7 Basic 6 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
8 Call 7 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
9 Basic 8 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
10 Call 9 Kernel_C.create_mapped_it_frame_cap(pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 24), vptr___unsigned_long#v : Word 64, WordCastSigned(1), WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Cond 10 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
12 Call 11 Kernel_C.clearMemory((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 24), WordCastSigned(12), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Cond 12 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
EntryPoint 13

Function Kernel_C.create_it_address_space(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, it_v_reg___struct_v_region_C#v.start_C : Word 64, it_v_reg___struct_v_region_C#v.end_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = lvl1pt_cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = lvl1pt_cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 88 + 0, slot_pos_before___unsigned_long#v : Word 64), (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584) + 88 + 8, slot_pos_after___unsigned_long#v : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.seL4_BootInfo_C, (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 584))
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
8 Basic 7 {
    var slot_pos_after___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
}
9 Cond 8 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
14 Cond 10 Err (0 <=s (3 - 1)) == (1 <=s 3)
15 Basic 14 {
    var i___int#v : Word 32 = (i___int#v : Word 32) + 1
}
16 Cond 15 Err ((i___int#v : Word 32) <=s ((i___int#v : Word 32) + 1)) == (0 <=s 1)
21 Basic 17 {
    var pt_vptr___unsigned_long#v : Word 64 = (pt_vptr___unsigned_long#v : Word 64) + 1 << WordCast((9 * 3 - 1 - (i___int#v : Word 32)) + 12)
}
22 Cond 21 Err (0 <=s ((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) && (((9 * 3 - 1 - (i___int#v : Word 32)) + 12) <s 64) && (((9 * 3 - 1 - (i___int#v : Word 32)) <=s ((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - (i___int#v : Word 32))) == WordCastSigned(9 * 3 - 1 - (i___int#v : Word 32))) && ((0 <=s (3 - 1 - (i___int#v : Word 32))) == ((i___int#v : Word 32) <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
23 Basic 1 { }
24 Basic 23 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
25 Call 24 Kernel_C.cap_null_cap_new() -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
26 Cond 25 22 !(!((unsigned_long_eret_2#v : Word 64) == 0))
27 Basic 26 {
    var unsigned_long_eret_2#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
28 Call 27 Kernel_C.provide_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
29 Basic 28 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
30 Call 29 Kernel_C.create_it_pt_cap(lvl1pt_cap___struct_cap_C#v.words_C.0 : Word 64, lvl1pt_cap___struct_cap_C#v.words_C.1 : Word 64, ret__unsigned_long#v : Word 64, pt_vptr___unsigned_long#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
31 Basic 30 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
32 Call 31 Kernel_C.it_alloc_paging(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Basic 18 {
    var loop#17#count : Word 64 = (loop#17#count : Word 64) + 1
}
18 Cond 19 Err true
19 Cond 32 16 (pt_vptr___unsigned_long#v : Word 64) < (it_v_reg___struct_v_region_C#v.end_C : Word 64)
20 Basic 18 {
    var loop#17#count : Word 64 = 0
}
33 Basic 20 {
    var pt_vptr___unsigned_long#v : Word 64 = (it_v_reg___struct_v_region_C#v.start_C : Word 64) >> WordCast((9 * 3 - 1 - (i___int#v : Word 32)) + 12) << WordCast((9 * 3 - 1 - (i___int#v : Word 32)) + 12)
}
34 Cond 33 Err (0 <=s ((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) && (((9 * 3 - 1 - (i___int#v : Word 32)) + 12) <s 64) && (((9 * 3 - 1 - (i___int#v : Word 32)) <=s ((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - (i___int#v : Word 32))) == WordCastSigned(9 * 3 - 1 - (i___int#v : Word 32))) && ((0 <=s (3 - 1 - (i___int#v : Word 32))) == ((i___int#v : Word 32) <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3)) && (0 <=s ((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) && (((9 * 3 - 1 - (i___int#v : Word 32)) + 12) <s 64) && (((9 * 3 - 1 - (i___int#v : Word 32)) <=s ((9 * 3 - 1 - (i___int#v : Word 32)) + 12)) == (0 <=s 12)) && ((WordCastSigned(9) * WordCastSigned(3 - 1 - (i___int#v : Word 32))) == WordCastSigned(9 * 3 - 1 - (i___int#v : Word 32))) && ((0 <=s (3 - 1 - (i___int#v : Word 32))) == ((i___int#v : Word 32) <=s (3 - 1))) && ((0 <=s (3 - 1)) == (1 <=s 3))
10 Basic 11 {
    var loop#10#count : Word 64 = (loop#10#count : Word 64) + 1
}
11 Cond 12 Err true
12 Cond 34 9 (i___int#v : Word 32) <s (3 - 1)
13 Basic 11 {
    var loop#10#count : Word 64 = 0
}
35 Cond 13 Err (0 <=s (3 - 1)) == (1 <=s 3)
36 Basic 35 {
    var i___int#v : Word 32 = 0
}
37 Cond 36 Err (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(3)))
38 Call 37 Kernel_C.write_slot((ret__ptr_to_void#v : Word 64) + (3 * 32), lvl1pt_cap___struct_cap_C#v.words_C.0 : Word 64, lvl1pt_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
39 Cond 38 Err (3 == 0) || ((3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (ret__ptr_to_void#v : Word 64) + (3 * 32), WordCast(0 - 3))) || (!(3 == 0) && !(3 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, ret__ptr_to_void#v : Word 64, WordCast(3)))
40 Basic 39 {
    var ret__ptr_to_void#v : Word 64 = rv#space#ret__ptr_to_void#v : Word 64
}
41 Call 40 Kernel_C.cap_get_capPtr(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_void#v : Word 64)
42 Basic 41 {
    var slot_pos_before___unsigned_long#v : Word 64 = (Mem : Mem) -MemAcc-> ((ndks_boot : Word 64) + 592)
}
43 Cond 42 Err PGlobalValid(HTD : HTD, Struct Kernel_C.ndks_boot_C, ndks_boot : Word 64)
44 Basic 43 {
    var lvl1pt_cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var lvl1pt_cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
45 Call 44 Kernel_C.cap_page_table_cap_new(WordCastSigned(1), WordCast((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 8)), WordCastSigned(1), WordCast((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 8))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
46 Cond 45 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
47 Call 46 Kernel_C.copyGlobalMappings((Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 8), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
48 Cond 47 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
EntryPoint 48

Function Kernel_C.decodeUntypedInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, call___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeUntyped_Retype(slot___ptr_to_struct_cte_C#v : Word 64, reset___unsigned_long#v : Word 64, alignedFreeRef___unsigned_long#v : Word 64, newType___unsigned_long#v : Word 64, userObjSize___unsigned_long#v : Word 64, destCNode___ptr_to_struct_cte_C#v : Word 64, nodeOffset___unsigned_long#v : Word 64, nodeWindow___unsigned_long#v : Word 64, deviceMemory___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 7 {
    var alignedFreeRef___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.alignUp(freeRef___unsigned_long#v : Word 64, objectSize___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
11 Basic 10 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(1))
}
12 Cond 11 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
13 Basic 12 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
14 Cond 13 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
15 Cond 14 9 !((ret__int#v : Word 32) == 0) && !((newType___unsigned_long#v : Word 64) == WordCastSigned(0))
16 Basic 15 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_long#v : Word 64) == 0)), 1, 0)
}
17 Basic 16 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.Arch_isFrameType(newType___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Cond 18 15 !((ret__int#v : Word 32) == 0)
20 Basic 19 {
    var ret__int#v : Word 32 = IfThenElse(!((deviceMemory___unsigned_long#v : Word 64) == 0), 1, 0)
}
21 Basic 20 {
    var deviceMemory___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_untyped_cap_get_capIsDevice(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
24 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
25 Basic 24 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 32, untypedFreeBytes___unsigned_long#v : Word 64)
}
26 Cond 25 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
27 Basic 26 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(10))
}
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
29 Cond 28 23 ((untypedFreeBytes___unsigned_long#v : Word 64) >> (objectSize___unsigned_long#v : Word 64)) < (nodeWindow___unsigned_long#v : Word 64)
30 Cond 29 Err (objectSize___unsigned_long#v : Word 64) < WordCastSigned(64)
31 Basic 30 {
    var untypedFreeBytes___unsigned_long#v : Word 64 = 1 << (ret__unsigned_longlong#v : Word 64) - (freeIndex___unsigned_long#v : Word 64) << WordCast(4)
}
32 Cond 31 Err (0 <=s 4) && (4 <s 64) && ((ret__unsigned_longlong#v : Word 64) < WordCastSigned(64))
33 Basic 32 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
34 Call 33 Kernel_C.cap_untyped_cap_get_capBlockSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
35 Basic 34 {
    var freeRef___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64) + (freeIndex___unsigned_long#v : Word 64) << WordCast(4)
}
36 Cond 35 Err (0 <=s 4) && (4 <s 64)
37 Basic 36 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.cap_untyped_cap_get_capPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Basic 38 {
    var reset___unsigned_long#v : Word 64 = WordCastSigned(0)
}
40 Basic 39 {
    var freeIndex___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_untyped_cap_get_capFreeIndex(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
43 Basic 38 {
    var reset___unsigned_long#v : Word 64 = WordCastSigned(1)
}
44 Basic 43 {
    var freeIndex___unsigned_long#v : Word 64 = WordCastSigned(0)
}
45 Cond 42 44 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
46 Basic 45 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
47 Call 46 Kernel_C.ensureNoChildren(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
52 Basic 48 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
53 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
54 Cond 53 52 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
55 Cond 54 Err ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, destCNode___ptr_to_struct_cte_C#v : Word 64, i___unsigned_long#v : Word 64)
56 Basic 55 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
57 Call 56 Kernel_C.ensureEmptySlot((destCNode___ptr_to_struct_cte_C#v : Word 64) + ((i___unsigned_long#v : Word 64) * 32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
58 Cond 57 Err ((i___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, destCNode___ptr_to_struct_cte_C#v : Word 64, i___unsigned_long#v : Word 64)
48 Basic 49 {
    var loop#48#count : Word 64 = (loop#48#count : Word 64) + 1
}
49 Cond 50 Err true
50 Cond 58 47 (i___unsigned_long#v : Word 64) < ((nodeOffset___unsigned_long#v : Word 64) + (nodeWindow___unsigned_long#v : Word 64))
51 Basic 49 {
    var loop#48#count : Word 64 = 0
}
59 Basic 51 {
    var i___unsigned_long#v : Word 64 = nodeOffset___unsigned_long#v : Word 64
}
60 Basic 59 {
    var destCNode___ptr_to_struct_cte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
61 Basic 60 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
62 Call 61 Kernel_C.cap_cnode_cap_get_capCNodePtr(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
63 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
64 Basic 63 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, (nodeSize___unsigned_long#v : Word 64) - (nodeOffset___unsigned_long#v : Word 64))
}
65 Cond 64 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
66 Basic 65 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(1))
}
67 Cond 66 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
68 Basic 67 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
69 Cond 68 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
70 Cond 69 62 ((nodeSize___unsigned_long#v : Word 64) - (nodeOffset___unsigned_long#v : Word 64)) < (nodeWindow___unsigned_long#v : Word 64)
71 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
72 Basic 71 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, WordCastSigned(256))
}
73 Cond 72 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
74 Basic 73 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(1))
}
75 Cond 74 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
76 Basic 75 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
77 Cond 76 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
78 Cond 77 70 ((nodeWindow___unsigned_long#v : Word 64) < WordCastSigned(1)) || (WordCastSigned(256) < (nodeWindow___unsigned_long#v : Word 64))
79 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
80 Basic 79 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, (nodeSize___unsigned_long#v : Word 64) - WordCastSigned(1))
}
81 Cond 80 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
82 Basic 81 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(0))
}
83 Cond 82 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
84 Basic 83 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
85 Cond 84 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
86 Cond 85 78 ((nodeSize___unsigned_long#v : Word 64) - WordCastSigned(1)) < (nodeOffset___unsigned_long#v : Word 64)
87 Basic 86 {
    var nodeSize___unsigned_long#v : Word 64 = 1 << (ret__unsigned_longlong#v : Word 64)
}
88 Cond 87 Err (ret__unsigned_longlong#v : Word 64) < WordCastSigned(64)
89 Basic 88 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
90 Call 89 Kernel_C.cap_cnode_cap_get_capCNodeRadix(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
91 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
92 Basic 91 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
93 Cond 92 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
94 Call 93 Kernel_C.lookup_fault_missing_capability_new(WordCast(nodeDepth___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
95 Basic 94 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(0))
}
96 Cond 95 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
97 Basic 96 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
98 Cond 97 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
99 Cond 98 90 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10))
100 Basic 99 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
101 Call 100 Kernel_C.cap_get_capType(nodeCap___struct_cap_C#v.words_C.0 : Word 64, nodeCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
102 Basic 101 {
    var nodeCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var nodeCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
103 Cond 102 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
104 Cond 103 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
105 Cond 104 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
106 Basic 101 {
    var nodeCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64) + 0 + (8 * 0))
    var nodeCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64) + 0 + (8 * 1))
}
107 Cond 106 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64)
108 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
109 Cond 108 107 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
110 Basic 109 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
111 Call 110 Kernel_C.lookupTargetSlot(rootCap___struct_cap_C#v.words_C.0 : Word 64, rootCap___struct_cap_C#v.words_C.1 : Word 64, nodeIndex___unsigned_long#v : Word 64, nodeDepth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
112 Basic 111 {
    var rootCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var rootCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
113 Cond 112 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
114 Cond 113 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
115 Cond 114 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
116 Cond 105 115 (nodeDepth___unsigned_long#v : Word 64) == WordCastSigned(0)
117 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
118 Basic 117 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(1))
}
119 Cond 118 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
120 Basic 119 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
121 Cond 120 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
122 Cond 121 116 ((newType___unsigned_long#v : Word 64) == WordCastSigned(0)) && ((userObjSize___unsigned_long#v : Word 64) < WordCastSigned(4))
123 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
124 Basic 123 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(1))
}
125 Cond 124 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
126 Basic 125 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
127 Cond 126 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
128 Cond 127 122 ((newType___unsigned_long#v : Word 64) == WordCastSigned(4)) && ((userObjSize___unsigned_long#v : Word 64) == WordCastSigned(0))
129 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
130 Basic 129 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 24, WordCastSigned(38))
}
131 Cond 130 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
132 Basic 131 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 16, WordCastSigned(0))
}
133 Cond 132 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
134 Basic 133 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(4))
}
135 Cond 134 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
136 Cond 135 128 ((1 << WordCast(6)) <= (userObjSize___unsigned_long#v : Word 64)) || (WordCastSigned(38) < (objectSize___unsigned_long#v : Word 64))
137 Cond 136 Err (0 <=s 6) && (6 <s 64)
138 Basic 137 {
    var objectSize___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
139 Call 138 Kernel_C.getObjectSize(newType___unsigned_long#v : Word 64, userObjSize___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
140 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
141 Basic 140 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(0))
}
142 Cond 141 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
143 Basic 142 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
144 Cond 143 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
145 Cond 144 139 WordCastSigned(9) <= (newType___unsigned_long#v : Word 64)
146 Basic 145 {
    var rootSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))
}
147 Cond 146 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
148 Cond 147 Err (0 <s 3) && (0 <=s 0)
149 Basic 148 {
    var nodeWindow___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
150 Call 149 Kernel_C.getSyscallArg(WordCastSigned(5), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
151 Basic 150 {
    var nodeOffset___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
152 Call 151 Kernel_C.getSyscallArg(WordCastSigned(4), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
153 Basic 152 {
    var nodeDepth___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
154 Call 153 Kernel_C.getSyscallArg(WordCastSigned(3), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
155 Basic 154 {
    var nodeIndex___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
156 Call 155 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
157 Basic 156 {
    var userObjSize___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
158 Call 157 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
159 Basic 158 {
    var newType___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
160 Call 159 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
161 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
162 Basic 161 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
163 Cond 162 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
164 Cond 163 160 !((ret__int#v : Word 32) == 0)
165 Basic 164 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
166 Cond 165 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
167 Cond 166 Err (0 <s 3) && (0 <=s 0)
168 Cond 164 167 !((ret__int#v : Word 32) == 0)
169 Basic 168 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(6), 1, 0)
}
170 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
171 Basic 170 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
172 Cond 171 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
173 Cond 172 169 !((invLabel___unsigned_long#v : Word 64) == WordCastSigned(1))
EntryPoint 173

Function Kernel_C.invokeIRQHandler_AckIRQ(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.plic_complete_claim(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.invokeTCB_CopyRegisters(dest___ptr_to_struct_tcb_C#v : Word 64, tcb_src___ptr_to_struct_tcb_C#v : Word 64, suspendSource___unsigned_long#v : Word 64, resumeTarget___unsigned_long#v : Word 64, transferFrame___unsigned_long#v : Word 64, transferInteger___unsigned_long#v : Word 64, transferArch___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.Arch_performTransfer(transferArch___unsigned_long#v : Word 64, tcb_src___ptr_to_struct_tcb_C#v : Word 64, dest___ptr_to_struct_tcb_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
6 Call 5 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 5 (dest___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
9 Call 8 Kernel_C.Arch_postModifyRegisters(dest___ptr_to_struct_tcb_C#v : Word 64) -- updates ()
14 Basic 10 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
15 Call 14 Kernel_C.setRegister(dest___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((gpRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), v___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
17 Basic 16 {
    var v___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.getRegister(tcb_src___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((gpRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Cond 18 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
10 Basic 11 {
    var loop#10#count : Word 64 = (loop#10#count : Word 64) + 1
}
11 Cond 12 Err true
12 Cond 19 9 (i___unsigned_long#v : Word 64) < WordCastSigned(16)
13 Basic 11 {
    var loop#10#count : Word 64 = 0
}
20 Basic 13 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
21 Cond 20 9 !((transferInteger___unsigned_long#v : Word 64) == 0)
22 Call 21 Kernel_C.setNextPC(dest___ptr_to_struct_tcb_C#v : Word 64, pc___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Basic 22 {
    var pc___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.getRestartPC(dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
29 Basic 25 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
30 Call 29 Kernel_C.setRegister(dest___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((frameRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), v___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
31 Cond 30 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
32 Basic 31 {
    var v___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
33 Call 32 Kernel_C.getRegister(tcb_src___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((frameRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
34 Cond 33 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
25 Basic 26 {
    var loop#25#count : Word 64 = (loop#25#count : Word 64) + 1
}
26 Cond 27 Err true
27 Cond 34 24 (i___unsigned_long#v : Word 64) < WordCastSigned(16)
28 Basic 26 {
    var loop#25#count : Word 64 = 0
}
35 Basic 28 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
36 Cond 35 21 !((transferFrame___unsigned_long#v : Word 64) == 0)
37 Call 36 Kernel_C.restart(dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
38 Cond 37 36 !((resumeTarget___unsigned_long#v : Word 64) == 0)
39 Call 38 Kernel_C.suspend(tcb_src___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
40 Cond 39 38 !((suspendSource___unsigned_long#v : Word 64) == 0)
EntryPoint 40

Function Kernel_C.invokeTCB_ReadRegisters(tcb_src___ptr_to_struct_tcb_C#v : Word 64, suspendSource___unsigned_long#v : Word 64, n___unsigned_long#v : Word 64, arch___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.setThreadState(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
7 Call 6 Kernel_C.wordFromMessageInfo(ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
8 Basic 7 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
9 Call 8 Kernel_C.seL4_MessageInfo_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCast((i___unsigned_long#v : Word 64) + (j___unsigned_long#v : Word 64))) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
14 Basic 10 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
15 Basic 14 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ipcBuffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(16) + WordCastSigned(1) * 8), ret__unsigned_long#v : Word 64)
}
16 Cond 15 Err (((i___unsigned_long#v : Word 64) + WordCastSigned(16) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, ipcBuffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(16) + WordCastSigned(1)) && PValid(HTD : HTD, Word 64, (ipcBuffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(16) + WordCastSigned(1) * 8)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(16) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, ipcBuffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(16) + WordCastSigned(1) + 1)
17 Basic 16 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.getRegister(tcb_src___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((gpRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Cond 18 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
10 Basic 11 {
    var loop#10#count : Word 64 = (loop#10#count : Word 64) + 1
}
11 Cond 12 Err true
12 Cond 19 9 ((i___unsigned_long#v : Word 64) < WordCastSigned(16)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(16)) < (n___unsigned_long#v : Word 64))
13 Basic 11 {
    var loop#10#count : Word 64 = 0
}
20 Cond 13 9 !((ipcBuffer___ptr_to_unsigned_long#v : Word 64) == WordCastSigned(0)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(16)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(16)) < (n___unsigned_long#v : Word 64))
25 Basic 21 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
26 Call 25 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64) + WordCastSigned(16))), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Cond 26 Err ((i___unsigned_long#v : Word 64) + WordCastSigned(16)) < WordCastSigned(4)
28 Basic 27 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
29 Call 28 Kernel_C.getRegister(tcb_src___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((gpRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
30 Cond 29 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
21 Basic 22 {
    var loop#21#count : Word 64 = (loop#21#count : Word 64) + 1
}
22 Cond 23 Err true
23 Cond 30 20 ((i___unsigned_long#v : Word 64) < WordCastSigned(16)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(16)) < (n___unsigned_long#v : Word 64)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(16)) < WordCastSigned(4))
24 Basic 22 {
    var loop#21#count : Word 64 = 0
}
31 Basic 24 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
32 Basic 31 {
    var j___unsigned_long#v : Word 64 = i___unsigned_long#v : Word 64
}
37 Basic 33 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
38 Basic 37 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ipcBuffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8), ret__unsigned_long#v : Word 64)
}
39 Cond 38 Err (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, ipcBuffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1)) && PValid(HTD : HTD, Word 64, (ipcBuffer___ptr_to_unsigned_long#v : Word 64) + ((i___unsigned_long#v : Word 64) + WordCastSigned(1) * 8)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(1)) == 0) || PArrayValid(HTD : HTD, Word 64, ipcBuffer___ptr_to_unsigned_long#v : Word 64, (i___unsigned_long#v : Word 64) + WordCastSigned(1) + 1)
40 Basic 39 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
41 Call 40 Kernel_C.getRegister(tcb_src___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((frameRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
42 Cond 41 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
33 Basic 34 {
    var loop#33#count : Word 64 = (loop#33#count : Word 64) + 1
}
34 Cond 35 Err true
35 Cond 42 32 ((i___unsigned_long#v : Word 64) < (n___unsigned_long#v : Word 64)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(16))
36 Basic 34 {
    var loop#33#count : Word 64 = 0
}
43 Cond 36 32 !((ipcBuffer___ptr_to_unsigned_long#v : Word 64) == WordCastSigned(0)) && ((i___unsigned_long#v : Word 64) < (n___unsigned_long#v : Word 64)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(16))
48 Basic 44 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
49 Call 48 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((msgRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
50 Cond 49 Err (i___unsigned_long#v : Word 64) < WordCastSigned(4)
51 Basic 50 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
52 Call 51 Kernel_C.getRegister(tcb_src___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((frameRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
53 Cond 52 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
44 Basic 45 {
    var loop#44#count : Word 64 = (loop#44#count : Word 64) + 1
}
45 Cond 46 Err true
46 Cond 53 43 ((i___unsigned_long#v : Word 64) < (n___unsigned_long#v : Word 64)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((i___unsigned_long#v : Word 64) < WordCastSigned(4))
47 Basic 45 {
    var loop#44#count : Word 64 = 0
}
54 Basic 47 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
55 Call 54 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
56 Basic 55 {
    var ipcBuffer___ptr_to_unsigned_long#v : Word 64 = rv#space#ret__ptr_to_unsigned_long#v : Word 64
}
57 Call 56 Kernel_C.lookupIPCBuffer(WordCastSigned(1), thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__ptr_to_unsigned_long#v : Word 64)
58 Cond 57 4 !((call___unsigned_long#v : Word 64) == 0)
59 Basic 1 {
    var ret__unsigned_long#v : Word 64 = e___unsigned_long#v : Word 64
}
60 Cond 59 58 !((e___unsigned_long#v : Word 64) == WordCastSigned(0))
61 Basic 60 {
    var e___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
62 Call 61 Kernel_C.Arch_performTransfer(arch___unsigned_long#v : Word 64, tcb_src___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
63 Cond 62 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
64 Call 63 Kernel_C.suspend(tcb_src___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
65 Cond 64 63 !((suspendSource___unsigned_long#v : Word 64) == 0)
66 Basic 65 {
    var thread___ptr_to_struct_tcb_C#v : Word 64 = (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
}
67 Cond 66 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 67

Function Kernel_C.invokeTCB_ThreadControl(target___ptr_to_struct_tcb_C#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, faultep___unsigned_long#v : Word 64, mcp___unsigned_long#v : Word 64, priority___unsigned_long#v : Word 64, cRoot_newCap___struct_cap_C#v.words_C.0 : Word 64, cRoot_newCap___struct_cap_C#v.words_C.1 : Word 64, cRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64, vRoot_newCap___struct_cap_C#v.words_C.0 : Word 64, vRoot_newCap___struct_cap_C#v.words_C.1 : Word 64, vRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64, bufferAddr___unsigned_long#v : Word 64, bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, bufferSrcSlot___ptr_to_struct_cte_C#v : Word 64, updateFlags___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.setPriority(target___ptr_to_struct_tcb_C#v : Word 64, priority___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 3 !((updateFlags___unsigned_long#v : Word 64) & WordCastSigned(1) == 0)
6 Call 5 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 5 (target___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
8 Cond 7 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
9 Call 8 Kernel_C.cteInsert(bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, bufferSrcSlot___ptr_to_struct_cte_C#v : Word 64, bufferSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 8 !((ret__int#v : Word 32) == 0)
11 Basic 10 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
12 Basic 11 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
13 Call 12 Kernel_C.sameObjectAs(tCap___struct_cap_C#v.words_C.0 : Word 64, tCap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
14 Cond 13 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
15 Cond 14 10 !((ret__int#v : Word 32) == 0)
16 Basic 15 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
17 Basic 16 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.sameObjectAs(bufferCap___struct_cap_C#v.words_C.0 : Word 64, bufferCap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((bufferSrcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((bufferSrcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, bufferSrcSlot___ptr_to_struct_cte_C#v : Word 64)
20 Cond 19 15 !((ret__int#v : Word 32) == 0)
21 Basic 20 {
    var ret__int#v : Word 32 = IfThenElse(!((bufferSrcSlot___ptr_to_struct_cte_C#v : Word 64) == 0), 1, 0)
}
22 Basic 21 {
    var Mem : Mem = MemUpdate(Mem : Mem, (target___ptr_to_struct_tcb_C#v : Word 64) + 384, bufferAddr___unsigned_long#v : Word 64)
}
23 Cond 22 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, target___ptr_to_struct_tcb_C#v : Word 64)
24 Basic 1 {
    var ret__unsigned_long#v : Word 64 = e___unsigned_long#v : Word 64
}
25 Cond 24 23 !((e___unsigned_long#v : Word 64) == WordCastSigned(0))
26 Basic 25 {
    var e___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
27 Call 26 Kernel_C.cteDelete(bufferSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
28 Basic 27 {
    var bufferSlot___ptr_to_struct_cte_C#v : Word 64 = (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (4 * 32)
}
29 Cond 28 Err (0 <=s 10) && (10 <s 64) && (4 == 0) || ((4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (4 * 32), WordCast(0 - 4))) || (!(4 == 0) && !(4 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(4)))
30 Cond 29 5 !((updateFlags___unsigned_long#v : Word 64) & WordCastSigned(2) == 0)
31 Call 30 Kernel_C.cteInsert(vRoot_newCap___struct_cap_C#v.words_C.0 : Word 64, vRoot_newCap___struct_cap_C#v.words_C.1 : Word 64, vRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64, rootSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Cond 31 30 !((ret__int#v : Word 32) == 0)
33 Basic 32 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
34 Basic 33 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
35 Call 34 Kernel_C.sameObjectAs(tCap___struct_cap_C#v.words_C.0 : Word 64, tCap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
36 Cond 35 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
37 Cond 36 32 !((ret__int#v : Word 32) == 0)
38 Basic 37 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
39 Basic 38 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
40 Call 39 Kernel_C.sameObjectAs(vRoot_newCap___struct_cap_C#v.words_C.0 : Word 64, vRoot_newCap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((vRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((vRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
41 Cond 40 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, vRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64)
42 Basic 1 {
    var ret__unsigned_long#v : Word 64 = e___unsigned_long#v : Word 64
}
43 Cond 42 41 !((e___unsigned_long#v : Word 64) == WordCastSigned(0))
44 Basic 43 {
    var e___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
45 Call 44 Kernel_C.cteDelete(rootSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
46 Basic 45 {
    var rootSlot___ptr_to_struct_cte_C#v : Word 64 = (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32)
}
47 Cond 46 Err (0 <=s 10) && (10 <s 64) && (1 == 0) || ((1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (1 * 32), WordCast(0 - 1))) || (!(1 == 0) && !(1 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(1)))
48 Cond 47 30 !((updateFlags___unsigned_long#v : Word 64) & WordCastSigned(4) == 0)
49 Call 48 Kernel_C.cteInsert(cRoot_newCap___struct_cap_C#v.words_C.0 : Word 64, cRoot_newCap___struct_cap_C#v.words_C.1 : Word 64, cRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64, rootSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
50 Cond 49 48 !((ret__int#v : Word 32) == 0)
51 Basic 50 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
52 Basic 51 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
53 Call 52 Kernel_C.sameObjectAs(tCap___struct_cap_C#v.words_C.0 : Word 64, tCap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
54 Cond 53 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
55 Cond 54 50 !((ret__int#v : Word 32) == 0)
56 Basic 55 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_long#v : Word 64) == 0), 1, 0)
}
57 Basic 56 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
58 Call 57 Kernel_C.sameObjectAs(cRoot_newCap___struct_cap_C#v.words_C.0 : Word 64, cRoot_newCap___struct_cap_C#v.words_C.1 : Word 64, (Mem : Mem) -MemAcc-> ((cRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((cRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1)), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
59 Cond 58 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, cRoot_srcSlot___ptr_to_struct_cte_C#v : Word 64)
60 Basic 1 {
    var ret__unsigned_long#v : Word 64 = e___unsigned_long#v : Word 64
}
61 Cond 60 59 !((e___unsigned_long#v : Word 64) == WordCastSigned(0))
62 Basic 61 {
    var e___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
63 Call 62 Kernel_C.cteDelete(rootSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
64 Basic 63 {
    var rootSlot___ptr_to_struct_cte_C#v : Word 64 = (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32)
}
65 Cond 64 Err (0 <=s 10) && (10 <s 64) && (0 == 0) || ((0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1) + (0 * 32), WordCast(0 - 0))) || (!(0 == 0) && !(0 <s 0) && PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, (target___ptr_to_struct_tcb_C#v : Word 64) & ~(1 << WordCast(10) - 1), WordCast(0)))
66 Cond 65 48 !((updateFlags___unsigned_long#v : Word 64) & WordCastSigned(4) == 0)
67 Call 66 Kernel_C.setMCPriority(target___ptr_to_struct_tcb_C#v : Word 64, mcp___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
68 Cond 67 66 !((updateFlags___unsigned_long#v : Word 64) & WordCastSigned(8) == 0)
69 Basic 68 {
    var Mem : Mem = MemUpdate(Mem : Mem, (target___ptr_to_struct_tcb_C#v : Word 64) + 376, faultep___unsigned_long#v : Word 64)
}
70 Cond 69 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, target___ptr_to_struct_tcb_C#v : Word 64)
71 Cond 70 68 !((updateFlags___unsigned_long#v : Word 64) & WordCastSigned(4) == 0)
72 Basic 71 {
    var tCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var tCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
73 Call 72 Kernel_C.cap_thread_cap_new(WordCast(target___ptr_to_struct_tcb_C#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
EntryPoint 73

Function Kernel_C.messageInfoFromWord_raw(w___unsigned_long#v : Word 64) -- updates: (ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var mi___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = WordCast(w___unsigned_long#v : Word 64)
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0)
EntryPoint 5

Function Kernel_C.performInvocation_Reply(thread___ptr_to_struct_tcb_C#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, canGrant___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.doReplyTransfer((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), thread___ptr_to_struct_tcb_C#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, canGrant___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 5

Function Kernel_C.scheduleChooseNewThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.chooseThread(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.nextDomain(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Cond 3 2 (Mem : Mem) -MemAcc-> (ksDomainTime : Word 64) == WordCastSigned(0)
5 Cond 4 Err PGlobalValid(HTD : HTD, Word 64, ksDomainTime : Word 64)
EntryPoint 5

Function Kernel_C.seL4_Fault_CapFault_new(address___unsigned_longlong#v : Word 64, inReceivePhase___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_Fault_C#v.words_C.0 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64
    var ret__struct_seL4_Fault_C#v.words_C.1 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((address___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((inReceivePhase___unsigned_longlong#v : Word 64) & 1 << WordCast(63)) | (WordCastSigned(1) & 15 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 63) && (63 <s 64)
EntryPoint 7

Function Kernel_C.thread_state_get_tsType(thread_state___struct_thread_state_C#v.words_C.0 : Word 64, thread_state___struct_thread_state_C#v.words_C.1 : Word 64, thread_state___struct_thread_state_C#v.words_C.2 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (thread_state___struct_thread_state_C#v.words_C.0 : Word 64) & 15 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 3) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.unbindMaybeNotification(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.doUnbindNotification(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, boundTCB___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 1 !((boundTCB___ptr_to_struct_tcb_C#v : Word 64) == 0)
4 Basic 3 {
    var boundTCB___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.notification_ptr_get_ntfnBoundTCB(ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 6

Function Kernel_C.Arch_configureIdleThread(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(1), (kernel_stack_alloc : Word 64) + 1 << WordCast(12), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Cond 2 Err (0 <=s 12) && (12 <s 64) && PValid(HTD : HTD, Array (Array (Word 8) 4096) 1, kernel_stack_alloc : Word 64)
4 Call 3 Kernel_C.setRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(32), WordCastSigned(256) | WordCastSigned(32), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.setRegister(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(34), idle_thread : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 5

Function Kernel_C.Arch_postModifyRegisters(tptr___ptr_to_struct_tcb_C#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.Arch_prepareThreadDelete(thread___ptr_to_struct_tcb_C#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.RISCVGetReadFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(!((vm_rights___unsigned_long#v : Word 64) == WordCastSigned(1)), 1, 0))
}
EntryPoint 3

Function Kernel_C.cap_asid_control_cap_new() -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(11) & 31 << WordCast(59))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.cap_notification_cap_new(capNtfnBadge___unsigned_longlong#v : Word 64, capNtfnCanReceive___unsigned_longlong#v : Word 64, capNtfnCanSend___unsigned_longlong#v : Word 64, capNtfnPtr___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((capNtfnBadge___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(6) & 31 << WordCast(59)) | ((capNtfnCanReceive___unsigned_longlong#v : Word 64) & 1 << WordCast(58)) | ((capNtfnCanSend___unsigned_longlong#v : Word 64) & 1 << WordCast(57)) | ((capNtfnPtr___unsigned_longlong#v : Word 64) & 549755813887 >> WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 57) && (57 <s 64) && (0 <=s 58) && (58 <s 64) && (0 <=s 59) && (59 <s 64)
EntryPoint 7

Function Kernel_C.cap_reply_cap_ptr_new_np(cap_ptr___ptr_to_struct_cap_C#v : Word 64, capReplyCanGrant___unsigned_long#v : Word 64, capReplyMaster___unsigned_long#v : Word 64, capTCBPtr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * WordCast(0)), WordCast((capReplyMaster___unsigned_long#v : Word 64) | ((capReplyCanGrant___unsigned_long#v : Word 64) << WordCast(1)) | (WordCastSigned(8) << WordCast(59))))
}
3 Cond 2 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64) && (0 <=s 59) && (59 <s 64) && (0 <=s 1) && (1 <s 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * WordCast(1)), WordCast(capTCBPtr___unsigned_long#v : Word 64))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64)
EntryPoint 5

Function Kernel_C.decodeRISCVMMUInvocation(label___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cptr___unsigned_long#v : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.decodeRISCVPageTableInvocation(label___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 1 { }
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.decodeRISCVFrameInvocation(label___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Basic 1 { }
10 Basic 9 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.performASIDControlInvocation(frame___ptr_to_void#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, parentSlot___ptr_to_struct_cte_C#v : Word 64, asid_base___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Call 11 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Cond 12 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
14 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
15 Cond 14 13 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
16 Basic 15 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
17 Call 16 Kernel_C.ensureEmptySlot(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
18 Basic 17 {
    var destSlot___ptr_to_struct_cte_C#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
19 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
20 Cond 19 18 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
21 Basic 20 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
22 Call 21 Kernel_C.lookupTargetSlot(root___struct_cap_C#v.words_C.0 : Word 64, root___struct_cap_C#v.words_C.1 : Word 64, index___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Basic 22 {
    var frame___ptr_to_void#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
24 Basic 23 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
25 Call 24 Kernel_C.cap_untyped_cap_get_capPtr(untyped___struct_cap_C#v.words_C.0 : Word 64, untyped___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
26 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
27 Cond 26 25 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
28 Basic 27 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
29 Call 28 Kernel_C.ensureNoChildren(parentSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
30 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
31 Basic 30 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
32 Cond 31 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
33 Basic 32 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
35 Cond 34 29 !((ret__int#v : Word 32) == 0)
36 Basic 35 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
37 Basic 36 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
38 Call 37 Kernel_C.cap_untyped_cap_get_capIsDevice(untyped___struct_cap_C#v.words_C.0 : Word 64, untyped___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
39 Cond 35 38 !((ret__int#v : Word 32) == 0)
40 Basic 39 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)), 1, 0)
}
41 Basic 40 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
42 Call 41 Kernel_C.cap_untyped_cap_get_capBlockSize(untyped___struct_cap_C#v.words_C.0 : Word 64, untyped___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
43 Cond 39 42 !((ret__int#v : Word 32) == 0)
44 Basic 43 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(2)), 1, 0)
}
45 Basic 44 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
46 Call 45 Kernel_C.cap_get_capType(untyped___struct_cap_C#v.words_C.0 : Word 64, untyped___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
47 Basic 46 {
    var asid_base___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) << WordCast(9)
}
48 Cond 47 Err (0 <=s 9) && (9 <s 64)
49 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
50 Basic 49 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(8))
}
51 Cond 50 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
52 Cond 51 48 (i___unsigned_long#v : Word 64) == (1 << WordCast(7))
53 Cond 52 Err (0 <=s 7) && (7 <s 64)
58 Basic 54 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((riscvKSASIDTable : Word 64) + (8 * (i___unsigned_long#v : Word 64))) == 0), 1, 0)
}
59 Cond 58 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
60 Cond 59 Err (i___unsigned_long#v : Word 64) < WordCastSigned(128)
61 Cond 60 54 !((ret__int#v : Word 32) == 0)
62 Basic 61 {
    var ret__int#v : Word 32 = IfThenElse((i___unsigned_long#v : Word 64) < (1 << WordCast(7)), 1, 0)
}
63 Cond 62 Err (0 <=s 7) && (7 <s 64)
64 Basic 63 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
54 Basic 55 {
    var loop#54#count : Word 64 = (loop#54#count : Word 64) + 1
}
55 Cond 56 Err true
56 Cond 64 53 !((ret__int#v : Word 32) == 0)
57 Basic 55 {
    var loop#54#count : Word 64 = 0
}
65 Basic 57 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((riscvKSASIDTable : Word 64) + (8 * (i___unsigned_long#v : Word 64))) == 0), 1, 0)
}
66 Cond 65 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
67 Cond 66 Err (i___unsigned_long#v : Word 64) < WordCastSigned(128)
68 Cond 67 57 !((ret__int#v : Word 32) == 0)
69 Basic 68 {
    var ret__int#v : Word 32 = IfThenElse((i___unsigned_long#v : Word 64) < (1 << WordCast(7)), 1, 0)
}
70 Cond 69 Err (0 <=s 7) && (7 <s 64)
71 Basic 70 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
72 Basic 71 {
    var root___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 0))
    var root___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) + 0 + (8 * 1))
}
73 Cond 72 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
74 Cond 73 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1))) && (1 <s 3) && (0 <=s 1)
75 Cond 74 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
76 Basic 75 {
    var untyped___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((parentSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var untyped___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((parentSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
77 Cond 76 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, parentSlot___ptr_to_struct_cte_C#v : Word 64)
78 Basic 77 {
    var parentSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))
}
79 Cond 78 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
80 Cond 79 Err (0 <s 3) && (0 <=s 0)
81 Basic 80 {
    var depth___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
82 Call 81 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
83 Basic 82 {
    var index___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
84 Call 83 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
85 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
86 Basic 85 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
87 Cond 86 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
88 Cond 87 84 !((ret__int#v : Word 32) == 0)
89 Basic 88 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 1)) == WordCastSigned(0), 1, 0)
}
90 Cond 89 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
91 Cond 90 Err (1 <s 3) && (0 <=s 1)
92 Cond 88 91 !((ret__int#v : Word 32) == 0)
93 Basic 92 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
94 Cond 93 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
95 Cond 94 Err (0 <s 3) && (0 <=s 0)
96 Cond 92 95 !((ret__int#v : Word 32) == 0)
97 Basic 96 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(2), 1, 0)
}
98 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
99 Basic 98 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
100 Cond 99 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
101 Cond 100 97 !((label___unsigned_long#v : Word 64) == WordCastSigned(35))
102 Basic 1 { }
103 Basic 102 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
104 Call 103 Kernel_C.performASIDPoolInvocation(asid___unsigned_long#v : Word 64, pool___ptr_to_struct_asid_pool_C#v : Word 64, vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
105 Call 104 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
106 Cond 105 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
107 Basic 106 {
    var asid___unsigned_long#v : Word 64 = (asid___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64)
}
108 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
109 Basic 108 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(8))
}
110 Cond 109 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
111 Cond 110 107 (i___unsigned_long#v : Word 64) == (1 << WordCast(9))
112 Cond 111 Err (0 <=s 9) && (9 <s 64)
117 Basic 113 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((pool___ptr_to_struct_asid_pool_C#v : Word 64) + (8 * (i___unsigned_long#v : Word 64))) == 0), 1, 0)
}
118 Cond 117 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(512)) && PValid(HTD : HTD, Struct Kernel_C.asid_pool_C, pool___ptr_to_struct_asid_pool_C#v : Word 64)
119 Cond 113 118 !((ret__int#v : Word 32) == 0)
120 Basic 119 {
    var ret__int#v : Word 32 = IfThenElse(((asid___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64)) == WordCastSigned(0), 1, 0)
}
121 Cond 120 113 !((ret__int#v : Word 32) == 0)
122 Basic 121 {
    var ret__int#v : Word 32 = IfThenElse((i___unsigned_long#v : Word 64) < (1 << WordCast(9)), 1, 0)
}
123 Cond 122 Err (0 <=s 9) && (9 <s 64)
124 Basic 123 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
113 Basic 114 {
    var loop#113#count : Word 64 = (loop#113#count : Word 64) + 1
}
114 Cond 115 Err true
115 Cond 124 112 !((ret__int#v : Word 32) == 0)
116 Basic 114 {
    var loop#113#count : Word 64 = 0
}
125 Basic 116 {
    var ret__int#v : Word 32 = IfThenElse(!((Mem : Mem) -MemAcc-> ((pool___ptr_to_struct_asid_pool_C#v : Word 64) + (8 * (i___unsigned_long#v : Word 64))) == 0), 1, 0)
}
126 Cond 125 Err ((i___unsigned_long#v : Word 64) < WordCastSigned(512)) && PValid(HTD : HTD, Struct Kernel_C.asid_pool_C, pool___ptr_to_struct_asid_pool_C#v : Word 64)
127 Cond 116 126 !((ret__int#v : Word 32) == 0)
128 Basic 127 {
    var ret__int#v : Word 32 = IfThenElse(((asid___unsigned_long#v : Word 64) + (i___unsigned_long#v : Word 64)) == WordCastSigned(0), 1, 0)
}
129 Cond 128 116 !((ret__int#v : Word 32) == 0)
130 Basic 129 {
    var ret__int#v : Word 32 = IfThenElse((i___unsigned_long#v : Word 64) < (1 << WordCast(9)), 1, 0)
}
131 Cond 130 Err (0 <=s 9) && (9 <s 64)
132 Basic 131 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
133 Basic 132 {
    var asid___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
134 Basic 133 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
135 Call 134 Kernel_C.cap_asid_pool_cap_get_capASIDBase(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
136 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
137 Basic 136 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
138 Cond 137 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
139 Basic 138 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
140 Cond 139 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
141 Cond 140 135 !((pool___ptr_to_struct_asid_pool_C#v : Word 64) == WordCast(ret__unsigned_longlong#v : Word 64))
142 Basic 141 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
143 Call 142 Kernel_C.cap_asid_pool_cap_get_capASIDPool(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
144 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
145 Basic 144 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
146 Cond 145 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
147 Call 146 Kernel_C.lookup_fault_invalid_root_new() -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
148 Basic 147 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(0))
}
149 Cond 148 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
150 Basic 149 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
151 Cond 150 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
152 Cond 151 143 !(!((pool___ptr_to_struct_asid_pool_C#v : Word 64) == 0))
153 Basic 152 {
    var pool___ptr_to_struct_asid_pool_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((riscvKSASIDTable : Word 64) + (8 * (ret__unsigned_longlong#v : Word 64) >> WordCast(9)))
}
154 Cond 153 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
155 Cond 154 Err (((ret__unsigned_longlong#v : Word 64) >> WordCast(9)) < WordCastSigned(128)) && (0 <=s 9) && (9 <s 64)
156 Basic 155 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
157 Call 156 Kernel_C.cap_asid_pool_cap_get_capASIDBase(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
158 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
159 Basic 158 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
160 Cond 159 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
161 Basic 160 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
162 Cond 161 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
163 Cond 162 157 !(!(!((ret__int#v : Word 32) == 0)))
164 Basic 163 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
165 Basic 164 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
166 Call 165 Kernel_C.cap_page_table_cap_get_capPTIsMapped(vspaceCap___struct_cap_C#v.words_C.0 : Word 64, vspaceCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
167 Cond 163 166 !((ret__int#v : Word 32) == 0)
168 Basic 167 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)), 1, 0)
}
169 Basic 168 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
170 Call 169 Kernel_C.cap_get_capType(vspaceCap___struct_cap_C#v.words_C.0 : Word 64, vspaceCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
171 Basic 170 {
    var vspaceCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var vspaceCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
172 Cond 171 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64)
173 Basic 172 {
    var vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))
}
174 Cond 173 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
175 Cond 174 Err (0 <s 3) && (0 <=s 0)
176 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
177 Basic 176 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
178 Cond 177 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
179 Cond 178 175 (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0)
180 Cond 179 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
181 Cond 180 Err (0 <s 3) && (0 <=s 0)
182 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
183 Basic 182 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
184 Cond 183 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
185 Cond 184 181 !((label___unsigned_long#v : Word 64) == WordCastSigned(36))
186 Cond 2 Err false
187 Call 186 Kernel_C.halt(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates ()
188 Cond 187 Err false
189 Cond 188 2 true
190 Cond 185 189 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(13)) || false
191 Cond 101 190 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(11)) || false
192 Cond 8 191 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(1)) || false
193 Cond 5 192 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)) || false
194 Basic 193 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
195 Call 194 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 195

Function Kernel_C.decodeUnbindNotification(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeTCB_NotificationControl(tcb___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
11 Cond 10 7 !(!((Mem : Mem) -MemAcc-> ((tcb___ptr_to_struct_tcb_C#v : Word 64) + 304) == 0))
12 Cond 11 Err PValid(HTD : HTD, Struct Kernel_C.tcb_C, tcb___ptr_to_struct_tcb_C#v : Word 64)
13 Basic 12 {
    var tcb___ptr_to_struct_tcb_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 15

Function Kernel_C.fastpath_reply_cap_check(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__int#v : Word 32)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__int#v : Word 32 = rv#space#ret__int#v : Word 32
}
5 Call 4 Kernel_C.cap_capType_equals(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(8)) -- updates (rv#space#ret__int#v : Word 32)
EntryPoint 5

Function Kernel_C.invokeTCB_WriteRegisters(dest___ptr_to_struct_tcb_C#v : Word 64, resumeTarget___unsigned_long#v : Word 64, n___unsigned_long#v : Word 64, arch___unsigned_long#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.rescheduleRequired(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 3 (dest___ptr_to_struct_tcb_C#v : Word 64) == (Mem : Mem) -MemAcc-> (ksCurThread : Word 64)
6 Cond 5 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
7 Call 6 Kernel_C.restart(dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Cond 7 6 !((resumeTarget___unsigned_long#v : Word 64) == 0)
9 Call 8 Kernel_C.Arch_postModifyRegisters(dest___ptr_to_struct_tcb_C#v : Word 64) -- updates ()
10 Call 9 Kernel_C.setNextPC(dest___ptr_to_struct_tcb_C#v : Word 64, pc___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
11 Basic 10 {
    var pc___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.getRestartPC(dest___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
17 Basic 13 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
18 Call 17 Kernel_C.setRegister(dest___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((gpRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), unsigned_long_eret_2#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Cond 18 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
20 Basic 19 {
    var unsigned_long_eret_2#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
21 Call 20 Kernel_C.sanitiseRegister((Mem : Mem) -MemAcc-> ((gpRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), ret__unsigned_long#v : Word 64, archInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
22 Cond 21 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
23 Basic 22 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
24 Call 23 Kernel_C.getSyscallArg((i___unsigned_long#v : Word 64) + WordCastSigned(16) + WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
13 Basic 14 {
    var loop#13#count : Word 64 = (loop#13#count : Word 64) + 1
}
14 Cond 15 Err true
15 Cond 24 12 ((i___unsigned_long#v : Word 64) < WordCastSigned(16)) && (((i___unsigned_long#v : Word 64) + WordCastSigned(16)) < (n___unsigned_long#v : Word 64))
16 Basic 14 {
    var loop#13#count : Word 64 = 0
}
25 Basic 16 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
30 Basic 26 {
    var i___unsigned_long#v : Word 64 = (i___unsigned_long#v : Word 64) + WordCastSigned(1)
}
31 Call 30 Kernel_C.setRegister(dest___ptr_to_struct_tcb_C#v : Word 64, (Mem : Mem) -MemAcc-> ((frameRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), unsigned_long_eret_2#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Cond 31 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
33 Basic 32 {
    var unsigned_long_eret_2#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
34 Call 33 Kernel_C.sanitiseRegister((Mem : Mem) -MemAcc-> ((frameRegisters : Word 64) + (8 * (i___unsigned_long#v : Word 64))), ret__unsigned_long#v : Word 64, archInfo___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
35 Cond 34 Err (i___unsigned_long#v : Word 64) < WordCastSigned(16)
36 Basic 35 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
37 Call 36 Kernel_C.getSyscallArg((i___unsigned_long#v : Word 64) + WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
26 Basic 27 {
    var loop#26#count : Word 64 = (loop#26#count : Word 64) + 1
}
27 Cond 28 Err true
28 Cond 37 25 ((i___unsigned_long#v : Word 64) < WordCastSigned(16)) && ((i___unsigned_long#v : Word 64) < (n___unsigned_long#v : Word 64))
29 Basic 27 {
    var loop#26#count : Word 64 = 0
}
38 Basic 29 {
    var i___unsigned_long#v : Word 64 = WordCastSigned(0)
}
39 Basic 38 {
    var archInfo___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
40 Call 39 Kernel_C.Arch_getSanitiseRegisterInfo(dest___ptr_to_struct_tcb_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
41 Basic 40 {
    var n___unsigned_long#v : Word 64 = WordCastSigned(16 + 16)
}
42 Cond 41 Err (16 <=s (16 + 16)) == (0 <=s 16)
43 Cond 42 40 WordCastSigned(16 + 16) < (n___unsigned_long#v : Word 64)
44 Cond 43 Err (16 <=s (16 + 16)) == (0 <=s 16)
45 Basic 1 {
    var ret__unsigned_long#v : Word 64 = e___unsigned_long#v : Word 64
}
46 Cond 45 44 !((e___unsigned_long#v : Word 64) == WordCastSigned(0))
47 Basic 46 {
    var e___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
48 Call 47 Kernel_C.Arch_performTransfer(arch___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), dest___ptr_to_struct_tcb_C#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
49 Cond 48 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 49

Function Kernel_C.lookup_fault_get_lufType(lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64, lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ((lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64) >> WordCast(0)) & 3
}
4 Cond 3 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 4

Function Kernel_C.mdb_node_ptr_set_mdbNext(mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) >> WordCast(0)) & WordCastSigned(549755813884)))
}
3 Cond 2 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 1)) & ~(549755813884))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
EntryPoint 5

Function Kernel_C.mdb_node_ptr_set_mdbPrev(mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCast(-1)))
}
3 Cond 2 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 0)) & ~(-1))
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
EntryPoint 5

Function Kernel_C.rootserver_max_size_bits(extra_bi_size_bits___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = IfThenElse((extra_bi_size_bits___unsigned_long#v : Word 64) < (max___unsigned_long#v : Word 64), max___unsigned_long#v : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64)
}
4 Basic 3 {
    var max___unsigned_long#v : Word 64 = IfThenElse(WordCastSigned(12) < (cnode_size_bits___unsigned_long#v : Word 64), cnode_size_bits___unsigned_long#v : Word 64, WordCastSigned(12))
}
5 Basic 4 {
    var cnode_size_bits___unsigned_long#v : Word 64 = WordCastSigned(19 + 5)
}
6 Cond 5 Err (19 <=s (19 + 5)) == (0 <=s 5)
EntryPoint 6

Function Kernel_C.seL4_Fault_NullFault_new() -- updates: (ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_Fault_C#v.words_C.0 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64
    var ret__struct_seL4_Fault_C#v.words_C.1 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(0) & 15 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64)
EntryPoint 7

Function Kernel_C.slotCapLongRunningDelete(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
5 Cond 4 2 true
6 Cond 3 5 ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(10)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(18)) || ((ret__unsigned_longlong#v : Word 64) == WordCastSigned(12)) || false
7 Basic 6 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
8 Call 7 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
9 Cond 8 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
10 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
12 Cond 11 9 !(!((ret__unsigned_long#v : Word 64) == 0))
13 Basic 12 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.isFinalCapability(slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
15 Cond 10 14 (ret__unsigned_longlong#v : Word 64) == WordCastSigned(0)
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_get_capType((Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((slot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
18 Cond 17 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, slot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 18

Function Kernel_C.RISCVGetWriteFromVMRights(vm_rights___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(IfThenElse((vm_rights___unsigned_long#v : Word 64) == WordCastSigned(3), 1, 0))
}
EntryPoint 3

Function Kernel_C.calculate_rootserver_size(v_reg___struct_v_region_C#v.start_C : Word 64, v_reg___struct_v_region_C#v.end_C : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (size___unsigned_long#v : Word 64) + ((ret__unsigned_long#v : Word 64) * 1 << WordCast(12))
}
4 Cond 3 Err (0 <=s 12) && (12 <s 64)
5 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
6 Call 5 Kernel_C.arch_get_n_paging(v_reg___struct_v_region_C#v.start_C : Word 64, v_reg___struct_v_region_C#v.end_C : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
7 Basic 6 {
    var size___unsigned_long#v : Word 64 = (size___unsigned_long#v : Word 64) + 1 << WordCast(12)
}
8 Cond 7 Err (0 <=s 12) && (12 <s 64)
9 Basic 8 {
    var size___unsigned_long#v : Word 64 = (size___unsigned_long#v : Word 64) + (ret__unsigned_long#v : Word 64)
}
10 Basic 9 {
    var ret__unsigned_long#v : Word 64 = 1 << (extra_bi_size_bits___unsigned_long#v : Word 64)
}
11 Cond 10 Err (extra_bi_size_bits___unsigned_long#v : Word 64) < WordCastSigned(64)
12 Basic 9 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
13 Cond 11 12 WordCastSigned(0) < (extra_bi_size_bits___unsigned_long#v : Word 64)
14 Basic 13 {
    var size___unsigned_long#v : Word 64 = (size___unsigned_long#v : Word 64) + 1 << WordCast(12)
}
15 Cond 14 Err (0 <=s 12) && (12 <s 64)
16 Basic 15 {
    var size___unsigned_long#v : Word 64 = (size___unsigned_long#v : Word 64) + (WordCastSigned(2) * 1 << WordCast(12))
}
17 Cond 16 Err (0 <=s 12) && (12 <s 64)
18 Basic 17 {
    var size___unsigned_long#v : Word 64 = (size___unsigned_long#v : Word 64) + 1 << WordCast(10)
}
19 Cond 18 Err (0 <=s 10) && (10 <s 64)
20 Basic 19 {
    var size___unsigned_long#v : Word 64 = 1 << WordCast(19 + 5)
}
21 Cond 20 Err (0 <=s (19 + 5)) && ((19 + 5) <s 64) && ((19 <=s (19 + 5)) == (0 <=s 5))
EntryPoint 21

Function Kernel_C.cap_get_archCapIsPhysical(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
4 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
5 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
6 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
8 Cond 7 2 true
9 Cond 6 8 ((ctag___enum_cap_tag#v : Word 32) == 13) || false
10 Cond 5 9 ((ctag___enum_cap_tag#v : Word 32) == 11) || false
11 Cond 4 10 ((ctag___enum_cap_tag#v : Word 32) == 3) || false
12 Cond 3 11 ((ctag___enum_cap_tag#v : Word 32) == 1) || false
13 Basic 12 {
    var ctag___enum_cap_tag#v : Word 32 = WordCast(ret__unsigned_longlong#v : Word 64)
}
14 Basic 13 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
15 Call 14 Kernel_C.cap_get_capType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 15

Function Kernel_C.create_rootserver_objects(start___unsigned_long#v : Word 64, v_reg___struct_v_region_C#v.start_C : Word 64, v_reg___struct_v_region_C#v.end_C : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 48, ret__unsigned_long#v : Word 64)
}
3 Cond 2 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.alloc_rootserver_obj(WordCastSigned(10), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 56 + 8, (Mem : Mem) -MemAcc-> ((rootserver : Word 64) + 56 + 0) + ((n___unsigned_long#v : Word 64) * 1 << WordCast(12)))
}
7 Cond 6 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
8 Cond 7 Err (0 <=s 12) && (12 <s 64)
9 Basic 8 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 56 + 0, ret__unsigned_long#v : Word 64)
}
10 Cond 9 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
11 Basic 10 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.alloc_rootserver_obj(WordCastSigned(12), n___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Basic 12 {
    var n___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
14 Call 13 Kernel_C.arch_get_n_paging(v_reg___struct_v_region_C#v.start_C : Word 64, v_reg___struct_v_region_C#v.end_C : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
15 Basic 14 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 32, ret__unsigned_long#v : Word 64)
}
16 Cond 15 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
17 Basic 16 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.alloc_rootserver_obj(WordCastSigned(12), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
19 Basic 18 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 24, ret__unsigned_long#v : Word 64)
}
20 Cond 19 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
21 Basic 20 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
22 Call 21 Kernel_C.alloc_rootserver_obj(WordCastSigned(12), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
23 Basic 22 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 16, ret__unsigned_long#v : Word 64)
}
24 Cond 23 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
25 Basic 24 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
26 Call 25 Kernel_C.alloc_rootserver_obj(WordCastSigned(12), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Call 26 Kernel_C.maybe_alloc_extra_bi(WordCastSigned(12), extra_bi_size_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
28 Basic 27 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 8, ret__unsigned_long#v : Word 64)
}
29 Cond 28 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
30 Basic 29 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
31 Call 30 Kernel_C.alloc_rootserver_obj(WordCastSigned(12), WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
32 Call 31 Kernel_C.maybe_alloc_extra_bi(WordCastSigned(12), extra_bi_size_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
33 Basic 32 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver : Word 64) + 0, ret__unsigned_long#v : Word 64)
}
34 Cond 33 Err PGlobalValid(HTD : HTD, Struct Kernel_C.AnonStruct1', rootserver : Word 64)
35 Basic 34 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
36 Call 35 Kernel_C.alloc_rootserver_obj(cnode_size_bits___unsigned_long#v : Word 64, WordCastSigned(1), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
37 Call 36 Kernel_C.maybe_alloc_extra_bi(max___unsigned_long#v : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
38 Basic 37 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver_mem : Word 64) + 8, (start___unsigned_long#v : Word 64) + (size___unsigned_long#v : Word 64))
}
39 Cond 38 Err PGlobalValid(HTD : HTD, Struct Kernel_C.region_C, rootserver_mem : Word 64)
40 Basic 39 {
    var Mem : Mem = MemUpdate(Mem : Mem, (rootserver_mem : Word 64) + 0, start___unsigned_long#v : Word 64)
}
41 Cond 40 Err PGlobalValid(HTD : HTD, Struct Kernel_C.region_C, rootserver_mem : Word 64)
42 Basic 41 {
    var size___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
43 Call 42 Kernel_C.calculate_rootserver_size(v_reg___struct_v_region_C#v.start_C : Word 64, v_reg___struct_v_region_C#v.end_C : Word 64, extra_bi_size_bits___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
44 Basic 43 {
    var max___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
45 Call 44 Kernel_C.rootserver_max_size_bits(extra_bi_size_bits___unsigned_long#v : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
46 Basic 45 {
    var cnode_size_bits___unsigned_long#v : Word 64 = WordCastSigned(19 + 5)
}
47 Cond 46 Err (19 <=s (19 + 5)) == (0 <=s 5)
EntryPoint 47

Function Kernel_C.mdb_node_get_mdbRevocable(mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64, mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) & 2 >> WordCast(1)
}
11 Cond 10 Err (0 <=s 1) && (1 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.mdb_node_set_mdbRevocable(mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64, mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_mdb_node_C#v.words_C.0 : Word 64, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(1)) & 2)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 1) && (1 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) & ~(2)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.performASIDPoolInvocation(asid___unsigned_long#v : Word 64, poolPtr___ptr_to_struct_asid_pool_C#v : Word 64, vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) + (8 * (asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1)), regionBase___ptr_to_struct_pte_C#v : Word 64)
}
5 Cond 4 Err ((asid___unsigned_long#v : Word 64) & (1 << WordCast(9) - 1) < WordCastSigned(512)) && PValid(HTD : HTD, Struct Kernel_C.asid_pool_C, poolPtr___ptr_to_struct_asid_pool_C#v : Word 64) && (0 <=s 9) && (9 <s 64)
6 Call 5 Kernel_C.copyGlobalMappings(regionBase___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Basic 6 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, cap___struct_cap_C#v.words_C.0 : Word 64), (vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, cap___struct_cap_C#v.words_C.1 : Word 64)
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64)
9 Basic 8 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
10 Call 9 Kernel_C.cap_page_table_cap_set_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
11 Basic 10 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
12 Call 11 Kernel_C.cap_page_table_cap_set_capPTMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
13 Basic 12 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
14 Call 13 Kernel_C.cap_page_table_cap_set_capPTMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(asid___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
15 Basic 14 {
    var regionBase___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
18 Basic 17 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
19 Cond 18 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, vspaceCapSlot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 19

Function Kernel_C.cap_frame_cap_get_capFSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 432345564227567616 >> WordCast(57)
}
11 Cond 10 Err (0 <=s 57) && (57 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_untyped_cap_get_capPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.create_mapped_it_frame_cap(pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, pptr___unsigned_long#v : Word 64, vptr___unsigned_long#v : Word 64, asid___unsigned_long#v : Word 64, use_large___unsigned_long#v : Word 64, executable___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Call 3 Kernel_C.map_it_frame_cap(pd_cap___struct_cap_C#v.words_C.0 : Word 64, pd_cap___struct_cap_C#v.words_C.1 : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
6 Call 5 Kernel_C.cap_frame_cap_new(WordCast(asid___unsigned_long#v : Word 64), WordCast(pptr___unsigned_long#v : Word 64), WordCast(frame_size___unsigned_long#v : Word 64), WordCast(ret__unsigned_long#v : Word 64), WordCastSigned(0), WordCast(vptr___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
7 Basic 6 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.wordFromVMRights(WordCastSigned(3)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
9 Basic 8 {
    var frame_size___unsigned_long#v : Word 64 = WordCastSigned(1)
}
10 Basic 8 {
    var frame_size___unsigned_long#v : Word 64 = WordCastSigned(0)
}
11 Cond 9 10 !((use_large___unsigned_long#v : Word 64) == 0)
EntryPoint 11

Function Kernel_C.create_untypeds_for_region(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, device_memory___unsigned_long#v : Word 64, reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64, first_untyped_slot___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(1)
}
8 Basic 4 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
9 Call 8 Kernel_C.is_reg_empty(reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
10 Basic 9 {
    var reg___struct_region_C#v.start_C : Word 64 = (reg___struct_region_C#v.start_C : Word 64) + 1 << (size_bits___unsigned_long#v : Word 64)
}
11 Cond 10 Err (size_bits___unsigned_long#v : Word 64) < WordCastSigned(64)
12 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
13 Cond 12 11 !(!((ret__unsigned_long#v : Word 64) == 0))
14 Basic 13 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
15 Call 14 Kernel_C.provide_untyped_cap(root_cnode_cap___struct_cap_C#v.words_C.0 : Word 64, root_cnode_cap___struct_cap_C#v.words_C.1 : Word 64, device_memory___unsigned_long#v : Word 64, reg___struct_region_C#v.start_C : Word 64, size_bits___unsigned_long#v : Word 64, first_untyped_slot___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
16 Cond 15 11 WordCastSigned(4) <= (size_bits___unsigned_long#v : Word 64)
17 Basic 16 {
    var size_bits___unsigned_long#v : Word 64 = WordCastSigned(38)
}
18 Cond 17 16 WordCastSigned(38) < (size_bits___unsigned_long#v : Word 64)
19 Basic 18 {
    var size_bits___unsigned_long#v : Word 64 = align_bits___unsigned_long#v : Word 64
}
20 Cond 19 18 (align_bits___unsigned_long#v : Word 64) < (size_bits___unsigned_long#v : Word 64)
21 Basic 20 {
    var align_bits___unsigned_long#v : Word 64 = WordCastSigned(ret__long#v : Word 64)
}
22 Basic 21 {
    var ret__long#v : Word 64 = rv#space#ret__long#v : Word 64
}
23 Call 22 Kernel_C.ctzl(reg___struct_region_C#v.start_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__long#v : Word 64)
24 Basic 20 {
    var align_bits___unsigned_long#v : Word 64 = size_bits___unsigned_long#v : Word 64
}
25 Cond 23 24 !((reg___struct_region_C#v.start_C : Word 64) == WordCastSigned(0))
26 Basic 25 {
    var size_bits___unsigned_long#v : Word 64 = WordCastSigned(WordCastSigned(64 - 1) - (ret__long#v : Word 64))
}
27 Cond 26 Err ((0 <=s (WordCastSigned(64 - 1) - (ret__long#v : Word 64))) == ((ret__long#v : Word 64) <=s WordCastSigned(64 - 1))) && ((0 <=s (64 - 1)) == (1 <=s 64))
28 Basic 27 {
    var ret__long#v : Word 64 = rv#space#ret__long#v : Word 64
}
29 Call 28 Kernel_C.clzl((reg___struct_region_C#v.end_C : Word 64) - (reg___struct_region_C#v.start_C : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__long#v : Word 64)
4 Basic 5 {
    var loop#4#count : Word 64 = (loop#4#count : Word 64) + 1
}
5 Cond 6 Err true
6 Cond 29 3 !(!((ret__unsigned_long#v : Word 64) == 0))
7 Basic 5 {
    var loop#4#count : Word 64 = 0
}
30 Basic 7 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
31 Call 30 Kernel_C.is_reg_empty(reg___struct_region_C#v.start_C : Word 64, reg___struct_region_C#v.end_C : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 31

Function Kernel_C.decodeIRQControlInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.invokeIRQControl(irq___unsigned_long#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
9 Cond 8 7 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
10 Basic 9 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.ensureEmptySlot(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Basic 11 {
    var destSlot___ptr_to_struct_cte_C#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
13 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
14 Cond 13 12 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
15 Basic 14 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
16 Call 15 Kernel_C.lookupTargetSlot(cnodeCap___struct_cap_C#v.words_C.0 : Word 64, cnodeCap___struct_cap_C#v.words_C.1 : Word 64, index___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
18 Basic 17 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(9))
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
20 Cond 19 16 !((ret__unsigned_long#v : Word 64) == 0)
21 Basic 20 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
22 Call 21 Kernel_C.isIRQActive(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
23 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
24 Cond 23 22 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
25 Basic 24 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
26 Call 25 Kernel_C.Arch_checkIRQ(irq_w___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Basic 26 {
    var cnodeCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var cnodeCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
29 Cond 28 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
31 Basic 30 {
    var depth___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
32 Call 31 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
33 Basic 32 {
    var index___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
34 Call 33 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
35 Basic 34 {
    var irq___unsigned_long#v : Word 64 = irq_w___unsigned_long#v : Word 64
}
36 Basic 35 {
    var irq_w___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
37 Call 36 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
38 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
39 Basic 38 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
40 Cond 39 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
41 Cond 40 37 !((ret__int#v : Word 32) == 0)
42 Basic 41 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
43 Cond 42 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
44 Cond 43 Err (0 <s 3) && (0 <=s 0)
45 Cond 41 44 !((ret__int#v : Word 32) == 0)
46 Basic 45 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(3), 1, 0)
}
47 Basic 1 { }
48 Basic 47 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
49 Call 48 Kernel_C.Arch_decodeIRQControlInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
50 Cond 46 49 (invLabel___unsigned_long#v : Word 64) == WordCastSigned(25)
EntryPoint 50

Function Kernel_C.decodeIRQHandlerInvocation(invLabel___unsigned_long#v : Word 64, irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.invokeIRQHandler_AckIRQ(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 4 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 5 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
7 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
8 Call 7 Kernel_C.invokeIRQHandler_SetIRQHandler(irq___unsigned_long#v : Word 64, ntfnCap___struct_cap_C#v.words_C.0 : Word 64, ntfnCap___struct_cap_C#v.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
9 Call 8 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
10 Cond 9 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
11 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
12 Basic 11 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
13 Cond 12 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
14 Basic 13 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
15 Cond 14 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
16 Cond 15 15 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6))
17 Basic 16 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.cap_get_capType(ntfnCap___struct_cap_C#v.words_C.0 : Word 64, ntfnCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Cond 18 10 !((ret__int#v : Word 32) == 0)
20 Basic 19 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
21 Basic 20 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
22 Call 21 Kernel_C.cap_notification_cap_get_capNtfnCanSend(ntfnCap___struct_cap_C#v.words_C.0 : Word 64, ntfnCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
23 Cond 19 22 !((ret__int#v : Word 32) == 0)
24 Basic 23 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(6)), 1, 0)
}
25 Basic 24 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
26 Call 25 Kernel_C.cap_get_capType(ntfnCap___struct_cap_C#v.words_C.0 : Word 64, ntfnCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
27 Basic 26 {
    var slot___ptr_to_struct_cte_C#v : Word 64 = (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))
}
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
29 Cond 28 Err (0 <s 3) && (0 <=s 0)
30 Basic 29 {
    var ntfnCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var ntfnCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
31 Cond 30 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
32 Cond 31 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
33 Cond 32 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
34 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
35 Basic 34 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
36 Cond 35 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
37 Cond 36 33 (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0)
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
39 Cond 38 Err (0 <s 3) && (0 <=s 0)
40 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
41 Call 40 Kernel_C.invokeIRQHandler_ClearIRQHandler(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
42 Call 41 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
43 Cond 42 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
44 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
45 Basic 44 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
46 Cond 45 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
47 Cond 46 2 true
48 Cond 43 47 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(28)) || false
49 Cond 39 48 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(27)) || false
50 Cond 6 49 ((invLabel___unsigned_long#v : Word 64) == WordCastSigned(26)) || false
EntryPoint 50

Function Kernel_C.decodeRISCVFrameInvocation(label___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.performPageInvocationMapPTE(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, pte___struct_pte_C#v.words_C.0 : Word 64, lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 7 {
    var pte___struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
9 Call 8 Kernel_C.makeUserPTE(frame_paddr___unsigned_long#v : Word 64, executable___unsigned_long#v : Word 64, vmRights___unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
10 Basic 9 {
    var executable___unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0))
}
11 Basic 10 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
12 Call 11 Kernel_C.vm_attributes_get_riscvExecuteNever(attr___struct_vm_attributes_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
13 Basic 12 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
14 Call 13 Kernel_C.cap_frame_cap_set_capFMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(vaddr___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
15 Basic 14 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
16 Call 15 Kernel_C.cap_frame_cap_set_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(asid___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
17 Basic 16 {
    var frame_paddr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
18 Call 17 Kernel_C.addrFromPPtr(WordCast(ret__unsigned_longlong#v : Word 64)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.cap_frame_cap_get_capFBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
21 Basic 20 {
    var vmRights___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
22 Call 21 Kernel_C.maskVMRights(capVMRights___unsigned_long#v : Word 64, ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
23 Basic 22 {
    var ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64
}
24 Call 23 Kernel_C.rightsFromWord(w_rightsMask___unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_seL4_CapRights_C#v.words_C.0 : Word 64)
25 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
26 Basic 25 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(8))
}
27 Cond 26 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
28 Cond 27 24 !(!(!((ret__unsigned_long#v : Word 64) == 0)))
29 Basic 28 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
30 Call 29 Kernel_C.isPTEPageTable(lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
31 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
32 Basic 31 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(0))
}
33 Cond 32 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
34 Basic 33 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
35 Cond 34 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
36 Cond 35 30 !(!(!((mapped_vaddr___unsigned_long#v : Word 64) == (vaddr___unsigned_long#v : Word 64))))
37 Basic 36 {
    var mapped_vaddr___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
38 Basic 37 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
39 Call 38 Kernel_C.cap_frame_cap_get_capFMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
40 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
41 Basic 40 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
43 Basic 42 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
44 Cond 43 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
45 Cond 44 39 !((frame_asid___unsigned_long#v : Word 64) == (asid___unsigned_long#v : Word 64))
46 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
47 Basic 46 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(8))
}
48 Cond 47 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
49 Cond 48 24 !(!(!((ret__unsigned_longlong#v : Word 64) == 0)))
50 Basic 49 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
51 Call 50 Kernel_C.pte_ptr_get_valid(lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
52 Cond 45 51 !(!(!((frame_asid___unsigned_long#v : Word 64) == WordCastSigned(0))))
53 Basic 52 {
    var frame_asid___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
54 Basic 53 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
55 Call 54 Kernel_C.cap_frame_cap_get_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
56 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
57 Basic 56 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(0))
}
58 Cond 57 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
59 Basic 58 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
60 Cond 59 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
61 Basic 60 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (current_lookup_fault : Word 64) + 0 + 0, rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64), (current_lookup_fault : Word 64) + 0 + 8, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
}
62 Cond 61 Err PGlobalValid(HTD : HTD, Struct Kernel_C.lookup_fault_C, current_lookup_fault : Word 64)
63 Call 62 Kernel_C.lookup_fault_missing_capability_new(WordCast(lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)) -- updates (rv#space#ret__struct_lookup_fault_C#v.words_C.0 : Word 64, rv#space#ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
64 Cond 63 55 !(!(!((lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) == (ret__unsigned_long#v : Word 64))))
65 Basic 64 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
66 Call 65 Kernel_C.pageBitsForSize(frameSize___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
67 Basic 66 {
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64
}
68 Call 67 Kernel_C.lookupPTSlot(lvl1pt___ptr_to_struct_pte_C#v : Word 64, vaddr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)
69 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
70 Basic 69 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(5))
}
71 Cond 70 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
72 Cond 71 68 !(!(!(!((ret__unsigned_long#v : Word 64) == 0))))
73 Basic 72 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
74 Call 73 Kernel_C.checkVPAlignment(frameSize___unsigned_long#v : Word 64, vaddr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
75 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
76 Basic 75 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(0))
}
77 Cond 76 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
78 Basic 77 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
79 Cond 78 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
80 Cond 79 74 !(!(WordCastSigned(274877902848) <= (vtop___unsigned_long#v : Word 64)))
81 Basic 80 {
    var vtop___unsigned_long#v : Word 64 = (vaddr___unsigned_long#v : Word 64) + 1 << (ret__unsigned_long#v : Word 64) - WordCastSigned(1)
}
82 Cond 81 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(64)
83 Basic 82 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
84 Call 83 Kernel_C.pageBitsForSize(frameSize___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
85 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
86 Basic 85 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
87 Cond 86 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
88 Basic 87 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
89 Cond 88 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
90 Cond 89 84 !(!(!((find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64) == (lvl1pt___ptr_to_struct_pte_C#v : Word 64))))
91 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
92 Basic 91 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(0))
}
93 Cond 92 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
94 Basic 93 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
95 Cond 94 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
96 Cond 95 90 !(!(!((find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
97 Basic 96 {
    var find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
98 Call 97 Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
99 Basic 98 {
    var asid___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
100 Basic 99 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
101 Call 100 Kernel_C.cap_page_table_cap_get_capPTMappedASID(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
102 Basic 101 {
    var lvl1pt___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
103 Basic 102 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
104 Call 103 Kernel_C.cap_page_table_cap_get_capPTBasePtr(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
105 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
106 Basic 105 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
107 Cond 106 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
108 Basic 107 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
109 Cond 108 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
110 Cond 109 104 !(!(!((ret__int#v : Word 32) == 0)))
111 Basic 110 {
    var ret__int#v : Word 32 = IfThenElse(!(!((ret__unsigned_longlong#v : Word 64) == 0)), 1, 0)
}
112 Basic 111 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
113 Call 112 Kernel_C.cap_page_table_cap_get_capPTIsMapped(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
114 Cond 110 113 !((ret__int#v : Word 32) == 0)
115 Basic 114 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)), 1, 0)
}
116 Basic 115 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
117 Call 116 Kernel_C.cap_get_capType(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
118 Basic 117 {
    var capVMRights___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
119 Basic 118 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
120 Call 119 Kernel_C.cap_frame_cap_get_capFVMRights(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
121 Basic 120 {
    var frameSize___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
122 Basic 121 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
123 Call 122 Kernel_C.cap_frame_cap_get_capFSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
124 Basic 123 {
    var lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
125 Cond 124 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
126 Cond 125 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
127 Cond 126 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
128 Basic 127 {
    var attr___struct_vm_attributes_C#v.words_C.0 : Word 64 = rv#space#ret__struct_vm_attributes_C#v.words_C.0 : Word 64
}
129 Call 128 Kernel_C.vmAttributesFromWord(ret__unsigned_long#v : Word 64) -- updates (rv#space#ret__struct_vm_attributes_C#v.words_C.0 : Word 64)
130 Basic 129 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
131 Call 130 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
132 Basic 131 {
    var w_rightsMask___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
133 Call 132 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
134 Basic 133 {
    var vaddr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
135 Call 134 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
136 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
137 Basic 136 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
138 Cond 137 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
139 Cond 138 135 !(!(!((ret__int#v : Word 32) == 0)))
140 Basic 139 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
141 Cond 140 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
142 Cond 141 Err (0 <s 3) && (0 <=s 0)
143 Cond 139 142 !((ret__int#v : Word 32) == 0)
144 Basic 143 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(3), 1, 0)
}
145 Basic 1 { }
146 Basic 145 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
147 Call 146 Kernel_C.performPageInvocationUnmap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
148 Call 147 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
149 Cond 148 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
150 Basic 1 { }
151 Basic 150 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
152 Call 151 Kernel_C.performPageGetAddress(WordCast(ret__unsigned_longlong#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
153 Basic 152 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
154 Call 153 Kernel_C.cap_frame_cap_get_capFBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
155 Call 154 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
156 Cond 155 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
157 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
158 Basic 157 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
159 Cond 158 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
160 Cond 159 2 true
161 Cond 156 160 ((label___unsigned_long#v : Word 64) == WordCastSigned(34)) || false
162 Cond 149 161 ((label___unsigned_long#v : Word 64) == WordCastSigned(33)) || false
163 Cond 144 162 ((label___unsigned_long#v : Word 64) == WordCastSigned(32)) || false
EntryPoint 163

Function Kernel_C.notification_ptr_get_state(notification_ptr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 0)) & 3 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 11

Function Kernel_C.notification_ptr_set_state(notification_ptr___ptr_to_struct_notification_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCastSigned(3)))
}
3 Cond 2 Err (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 0)) & ~(3))
}
5 Cond 4 Err (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 5

Function Kernel_C.performInvocation_Endpoint(ep___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, canGrant___unsigned_long#v : Word 64, canGrantReply___unsigned_long#v : Word 64, block___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.sendIPC(block___unsigned_long#v : Word 64, call___unsigned_long#v : Word 64, badge___unsigned_long#v : Word 64, canGrant___unsigned_long#v : Word 64, canGrantReply___unsigned_long#v : Word 64, (Mem : Mem) -MemAcc-> (ksCurThread : Word 64), ep___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
EntryPoint 5

Function Kernel_C.performPageInvocationUnmap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, ctSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, slotCap___struct_cap_C#v.words_C.0 : Word 64), (ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, slotCap___struct_cap_C#v.words_C.1 : Word 64)
}
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, ctSlot___ptr_to_struct_cte_C#v : Word 64)
6 Basic 5 {
    var slotCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var slotCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
7 Call 6 Kernel_C.cap_frame_cap_set_capFMappedASID(slotCap___struct_cap_C#v.words_C.0 : Word 64, slotCap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
8 Basic 7 {
    var slotCap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var slotCap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_frame_cap_set_capFMappedAddress(slotCap___struct_cap_C#v.words_C.0 : Word 64, slotCap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var slotCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0))
    var slotCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))
}
11 Cond 10 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, ctSlot___ptr_to_struct_cte_C#v : Word 64)
12 Call 11 Kernel_C.unmapPage(WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), WordCast(unsigned_longlong_eret_3#v : Word 64), WordCast(unsigned_longlong_eret_4#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Basic 12 {
    var unsigned_longlong_eret_4#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_frame_cap_get_capFBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Basic 14 {
    var unsigned_longlong_eret_3#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
16 Call 15 Kernel_C.cap_frame_cap_get_capFMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
17 Basic 16 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
18 Call 17 Kernel_C.cap_frame_cap_get_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
19 Basic 18 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
20 Call 19 Kernel_C.cap_frame_cap_get_capFSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
21 Cond 20 11 !((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0))
22 Basic 21 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
23 Call 22 Kernel_C.cap_frame_cap_get_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 23

Function Kernel_C.sbi_remote_sfence_vma_asid(hart_mask___ptr_to_unsigned_long#v : Word 64, start___unsigned_long#v : Word 64, size___unsigned_long#v : Word 64, asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.sbi_call(WordCastSigned(7), hart_mask___ptr_to_unsigned_long#v : Word 64, WordCastSigned(0), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 2

Function Kernel_C.seL4_Fault_VMFault_get_FSR(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64) & 4160749568 >> WordCast(27)
}
11 Cond 10 Err (0 <=s 27) && (27 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_MessageInfo_get_label(seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) & -4096 >> WordCast(12)
}
11 Cond 10 Err (0 <=s 12) && (12 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.thread_state_get_tcbQueued(thread_state___struct_thread_state_C#v.words_C.0 : Word 64, thread_state___struct_thread_state_C#v.words_C.1 : Word 64, thread_state___struct_thread_state_C#v.words_C.2 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (thread_state___struct_thread_state_C#v.words_C.1 : Word 64) & 1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 3) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.StrictC'__builtin_popcountl(x___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__int#v : Word 32, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)

Function Kernel_C.cap_reply_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.mdb_node_get_mdbFirstBadged(mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64, mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) & 1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.mdb_node_ptr_set_mdbPrev_np(node_ptr___ptr_to_struct_mdb_node_C#v : Word 64, mdbPrev___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(0)), WordCast(mdbPrev___unsigned_long#v : Word 64))
}
3 Cond 2 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
EntryPoint 3

Function Kernel_C.mdb_node_set_mdbFirstBadged(mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64, mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_mdb_node_C#v.words_C.0 : Word 64, ret__struct_mdb_node_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_mdb_node_C#v.words_C.0 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.0 : Word 64
    var ret__struct_mdb_node_C#v.words_C.1 : Word 64 = mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & 1)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64 = (mdb_node___struct_mdb_node_C#v.words_C.1 : Word 64) & ~(1)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.performPageInvocationMapPTE(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, ctSlot___ptr_to_struct_cte_C#v : Word 64, pte___struct_pte_C#v.words_C.0 : Word 64, base___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.updatePTE(pte___struct_pte_C#v.words_C.0 : Word 64, base___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Basic 5 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, cap___struct_cap_C#v.words_C.0 : Word 64), (ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, cap___struct_cap_C#v.words_C.1 : Word 64)
}
7 Cond 6 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, ctSlot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 7

Function Kernel_C.plat_cleanInvalidateL2Range(start___unsigned_long#v : Word 64, end___unsigned_long#v : Word 64) -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.seL4_MessageInfo_get_length(seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) & 127 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_MessageInfo_set_length(seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & 127)
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <s 1) && (0 <=s 0)
6 Basic 5 {
    var seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) & ~(127)
}
7 Cond 6 Err (0 <s 1) && (0 <=s 0) && (0 <s 1) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.thread_state_ptr_get_tsType(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 0)) & 15 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 11

Function Kernel_C.thread_state_ptr_set_tsType(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCastSigned(15)))
}
3 Cond 2 Err (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 0)) & ~(15))
}
5 Cond 4 Err (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 5

Function Kernel_C.Arch_getSanitiseRegisterInfo(thread___ptr_to_struct_tcb_C#v : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
EntryPoint 3

Function Kernel_C.arch_clean_invalidate_caches() -- updates: ()
1 Basic Ret { }
EntryPoint 1

Function Kernel_C.calculate_extra_bi_size_bits(extra_size___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = msb___unsigned_long#v : Word 64
}
4 Basic 3 {
    var msb___unsigned_long#v : Word 64 = (msb___unsigned_long#v : Word 64) + WordCastSigned(1)
}
5 Cond 4 3 (1 << (msb___unsigned_long#v : Word 64)) < (extra_size___unsigned_long#v : Word 64)
6 Cond 5 Err (msb___unsigned_long#v : Word 64) < WordCastSigned(64)
7 Basic 6 {
    var msb___unsigned_long#v : Word 64 = WordCastSigned(64 - 1) - (clzl_ret___unsigned_long#v : Word 64)
}
8 Cond 7 Err (0 <=s (64 - 1)) == (1 <=s 64)
9 Basic 8 {
    var clzl_ret___unsigned_long#v : Word 64 = WordCastSigned(ret__long#v : Word 64)
}
10 Basic 9 {
    var ret__long#v : Word 64 = rv#space#ret__long#v : Word 64
}
11 Call 10 Kernel_C.clzl((((extra_size___unsigned_long#v : Word 64) - 1) >> WordCast(12) + 1) << WordCast(12), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__long#v : Word 64)
12 Cond 11 Err (0 <=s 12) && (12 <s 64) && (0 <=s 12) && (12 <s 64)
13 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
14 Cond 13 12 (extra_size___unsigned_long#v : Word 64) == WordCastSigned(0)
EntryPoint 14

Function Kernel_C.cap_thread_cap_get_capTCBPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.create_unmapped_it_frame_cap(pptr___unsigned_long#v : Word 64, use_large___unsigned_long#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Call 4 Kernel_C.cap_frame_cap_new(WordCastSigned(0), WordCast(pptr___unsigned_long#v : Word 64), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
EntryPoint 5

Function Kernel_C.invokeCNodeCancelBadgedSends(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.cancelBadgedSends(ep___ptr_to_struct_endpoint_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var ep___ptr_to_struct_endpoint_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
6 Basic 5 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
7 Call 6 Kernel_C.cap_endpoint_cap_get_capEPPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
8 Cond 7 3 !((badge___unsigned_long#v : Word 64) == 0)
9 Basic 8 {
    var badge___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_endpoint_cap_get_capEPBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 11

Function Kernel_C.performASIDControlInvocation(frame___ptr_to_void#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, parent___ptr_to_struct_cte_C#v : Word 64, asid_base___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (riscvKSASIDTable : Word 64) + (8 * (asid_base___unsigned_long#v : Word 64) >> WordCast(9)), frame___ptr_to_void#v : Word 64)
}
5 Cond 4 Err PGlobalValid(HTD : HTD, Array (Pointer (Struct Kernel_C.asid_pool_C)) 128, riscvKSASIDTable : Word 64)
6 Cond 5 Err (((asid_base___unsigned_long#v : Word 64) >> WordCast(9)) < WordCastSigned(128)) && (0 <=s 9) && (9 <s 64)
7 Call 6 Kernel_C.cteInsert(ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64, parent___ptr_to_struct_cte_C#v : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_asid_pool_cap_new(WordCast(asid_base___unsigned_long#v : Word 64), WordCast(frame___ptr_to_void#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Basic 9 {
    var HTD : HTD = HTDUpdate(Struct Kernel_C.asid_pool_C, 1, frame___ptr_to_void#v : Word 64, 1, HTD : HTD)
}
11 Cond 10 Err true && true && true
12 Call 11 Kernel_C.memzero(frame___ptr_to_void#v : Word 64, 1 << (ret__unsigned_long#v : Word 64), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
13 Cond 12 Err (ret__unsigned_long#v : Word 64) < WordCastSigned(64)
14 Basic 13 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
15 Call 14 Kernel_C.pageBitsForSize(WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
16 Call 15 Kernel_C.cap_untyped_cap_ptr_set_capFreeIndex(parent___ptr_to_struct_cte_C#v : Word 64, WordCast(1 << ((ret__unsigned_longlong#v : Word 64) - WordCastSigned(4))), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Cond 16 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, parent___ptr_to_struct_cte_C#v : Word 64) && (((ret__unsigned_longlong#v : Word 64) - WordCastSigned(4)) < WordCastSigned(64))
18 Basic 17 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
19 Call 18 Kernel_C.cap_untyped_cap_get_capBlockSize((Mem : Mem) -MemAcc-> ((parent___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 0)), (Mem : Mem) -MemAcc-> ((parent___ptr_to_struct_cte_C#v : Word 64) + 0 + (8 * 1))) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
20 Cond 19 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, parent___ptr_to_struct_cte_C#v : Word 64)
21 Basic 20 { }
22 Cond 21 Err true
23 Basic 22 {
    var HTD : HTD = HTDUpdate(Word 64, 2, frame___ptr_to_void#v : Word 64, 12, HTD : HTD)
}
24 Cond 23 Err true && true && true
EntryPoint 24

Function Kernel_C.seL4_CNode_CapData_get_guard(seL4_CNode_CapData___struct_seL4_CNode_CapData_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_CNode_CapData___struct_seL4_CNode_CapData_C#v.words_C.0 : Word 64) & -64 >> WordCast(6)
}
11 Cond 10 Err (0 <=s 6) && (6 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_Fault_UserException_new(number___unsigned_longlong#v : Word 64, code___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_Fault_C#v.words_C.0 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64
    var ret__struct_seL4_Fault_C#v.words_C.1 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((number___unsigned_longlong#v : Word 64) & 4294967295 << WordCast(32)) | ((code___unsigned_longlong#v : Word 64) & 268435455 << WordCast(4)) | (WordCastSigned(3) & 15 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 4) && (4 <s 64) && (0 <=s 32) && (32 <s 64)
EntryPoint 7

Function Kernel_C.StrictC'__builtin_unreachable(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: ()

Function Kernel_C.cap_cnode_cap_get_capCNodePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 274877906943 << WordCast(1)
}
11 Cond 10 Err (0 <=s 1) && (1 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_get_capEPPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_frame_cap_get_capFBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & 281474976710144 >> WordCast(9)
}
11 Cond 10 Err (0 <=s 9) && (9 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.endpoint_ptr_get_epQueue_head(endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 1)) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 11

Function Kernel_C.endpoint_ptr_get_epQueue_tail(endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 0)) & 549755813884 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 11

Function Kernel_C.endpoint_ptr_set_epQueue_head(endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCast(-1)))
}
3 Cond 2 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 1)) & ~(-1))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 5

Function Kernel_C.endpoint_ptr_set_epQueue_tail(endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) >> WordCast(0)) & WordCastSigned(549755813884)))
}
3 Cond 2 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * 0)) & ~(549755813884))
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, endpoint_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 5

Function Kernel_C.invokeTCB_NotificationControl(tcb___ptr_to_struct_tcb_C#v : Word 64, ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.bindNotification(tcb___ptr_to_struct_tcb_C#v : Word 64, ntfnPtr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Call 3 Kernel_C.unbindNotification(tcb___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Cond 4 5 !((ntfnPtr___ptr_to_struct_notification_C#v : Word 64) == 0)
EntryPoint 6

Function Kernel_C.lookup_fault_invalid_root_new() -- updates: (ret__struct_lookup_fault_C#v.words_C.0 : Word 64, ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookup_fault_C#v.words_C.0 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64
    var ret__struct_lookup_fault_C#v.words_C.1 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(0) & 3 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64)
EntryPoint 7

Function Kernel_C.mdb_node_ptr_set_mdbRevocable(mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(1)) & WordCastSigned(2)))
}
3 Cond 2 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (0 <=s 1) && (1 <s 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 1)) & ~(2))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
EntryPoint 5

Function Kernel_C.performPageTableInvocationMap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, ctSlot___ptr_to_struct_cte_C#v : Word 64, pte___struct_pte_C#v.words_C.0 : Word 64, ptSlot___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.sfence(Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Basic 4 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ptSlot___ptr_to_struct_pte_C#v : Word 64) + 0 + 0, pte___struct_pte_C#v.words_C.0 : Word 64)
}
6 Cond 5 Err PValid(HTD : HTD, Struct Kernel_C.pte_C, ptSlot___ptr_to_struct_pte_C#v : Word 64)
7 Basic 6 {
    var Mem : Mem = MemUpdate(MemUpdate(Mem : Mem, (ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 0, cap___struct_cap_C#v.words_C.0 : Word 64), (ctSlot___ptr_to_struct_cte_C#v : Word 64) + 0 + 8, cap___struct_cap_C#v.words_C.1 : Word 64)
}
8 Cond 7 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, ctSlot___ptr_to_struct_cte_C#v : Word 64)
EntryPoint 8

Function Kernel_C.replyFromKernel_success_empty(thread___ptr_to_struct_tcb_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(10), ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
4 Call 3 Kernel_C.wordFromMessageInfo(ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
5 Basic 4 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
6 Call 5 Kernel_C.seL4_MessageInfo_new(WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0)) -- updates (rv#space#ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
7 Call 6 Kernel_C.setRegister(thread___ptr_to_struct_tcb_C#v : Word 64, WordCastSigned(9), WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 7

Function Kernel_C.seL4_Fault_UnknownSyscall_new(syscallNumber___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_Fault_C#v.words_C.0 : Word 64, ret__struct_seL4_Fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_Fault_C#v.words_C.0 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64
    var ret__struct_seL4_Fault_C#v.words_C.1 : Word 64 = seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((syscallNumber___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | (WordCastSigned(2) & 15 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64)
EntryPoint 7

Function Kernel_C.seL4_Fault_get_seL4_FaultType(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ((seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64) >> WordCast(0)) & 15
}
4 Cond 3 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 4

Function Kernel_C.cap_frame_cap_get_capFIsDevice(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 18014398509481984 >> WordCast(54)
}
11 Cond 10 Err (0 <=s 54) && (54 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_frame_cap_get_capFVMRights(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 108086391056891904 >> WordCast(55)
}
11 Cond 10 Err (0 <=s 55) && (55 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_frame_cap_set_capFVMRights(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(55)) & 108086391056891904)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 55) && (55 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(108086391056891904)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_irq_handler_cap_get_capIRQ(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & 4095 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_zombie_cap_get_capZombieID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_zombie_cap_set_capZombieID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & -1)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & ~(-1)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.decodeRISCVPageTableInvocation(label___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.performPageTableInvocationMap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, pte___struct_pte_C#v.words_C.0 : Word 64, ptSlot___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 7 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
9 Call 8 Kernel_C.cap_page_table_cap_set_capPTMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast((vaddr___unsigned_long#v : Word 64) & ~(1 << (lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) - 1))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
10 Cond 9 Err (lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) < WordCastSigned(64)
11 Basic 10 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
12 Call 11 Kernel_C.cap_page_table_cap_set_capPTMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast(asid___unsigned_long#v : Word 64)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
13 Basic 12 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var cap___struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
14 Call 13 Kernel_C.cap_page_table_cap_set_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCastSigned(1)) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
15 Basic 14 {
    var pte___struct_pte_C#v.words_C.0 : Word 64 = rv#space#ret__struct_pte_C#v.words_C.0 : Word 64
}
16 Call 15 Kernel_C.pte_new(WordCast((paddr___unsigned_long#v : Word 64) >> WordCast(12)), WordCastSigned(0), WordCastSigned(1), WordCastSigned(1), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(0), WordCastSigned(1)) -- updates (rv#space#ret__struct_pte_C#v.words_C.0 : Word 64)
17 Cond 16 Err (0 <=s 12) && (12 <s 64)
18 Basic 17 {
    var paddr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
19 Call 18 Kernel_C.addrFromPPtr(WordCast(ret__unsigned_longlong#v : Word 64)) -- updates (rv#space#ret__unsigned_long#v : Word 64)
20 Basic 19 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
21 Call 20 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
22 Basic 21 {
    var ptSlot___ptr_to_struct_pte_C#v : Word 64 = lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
}
23 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
24 Basic 23 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(8))
}
25 Cond 24 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
26 Cond 25 22 !((ret__int#v : Word 32) == 0)
27 Basic 26 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == 0), 1, 0)
}
28 Basic 27 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
29 Call 28 Kernel_C.pte_ptr_get_valid(lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
30 Cond 26 29 !((ret__int#v : Word 32) == 0)
31 Basic 30 {
    var ret__int#v : Word 32 = IfThenElse((lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64) == WordCastSigned(12), 1, 0)
}
32 Basic 31 {
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64
    var lu_ret___struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64 = rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64
}
33 Call 32 Kernel_C.lookupPTSlot(lvl1pt___ptr_to_struct_pte_C#v : Word 64, vaddr___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupPTSlot_ret_C#v.ptSlot_C : Word 64, rv#space#ret__struct_lookupPTSlot_ret_C#v.ptBitsLeft_C : Word 64)
34 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
35 Basic 34 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
36 Cond 35 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
37 Basic 36 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
38 Cond 37 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
39 Cond 38 33 !(!(!((find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64) == (lvl1pt___ptr_to_struct_pte_C#v : Word 64))))
40 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
41 Basic 40 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 40, WordCastSigned(0))
}
42 Cond 41 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
43 Basic 42 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(6))
}
44 Cond 43 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
45 Cond 44 39 !(!(!((find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64) == WordCastSigned(0))))
46 Basic 45 {
    var find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
47 Call 46 Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
48 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
49 Basic 48 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 0, WordCastSigned(0))
}
50 Cond 49 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
51 Basic 50 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(1))
}
52 Cond 51 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
53 Cond 52 47 !(!(WordCastSigned(274877902848) <= (vaddr___unsigned_long#v : Word 64)))
54 Basic 53 {
    var asid___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
55 Basic 54 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
56 Call 55 Kernel_C.cap_page_table_cap_get_capPTMappedASID(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
57 Basic 56 {
    var lvl1pt___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
58 Basic 57 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
59 Call 58 Kernel_C.cap_page_table_cap_get_capPTBasePtr(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
60 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
61 Basic 60 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(1))
}
62 Cond 61 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
63 Basic 62 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
64 Cond 63 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
65 Cond 64 59 !(!(!((ret__int#v : Word 32) == 0)))
66 Basic 65 {
    var ret__int#v : Word 32 = IfThenElse((ret__unsigned_longlong#v : Word 64) == WordCastSigned(0), 1, 0)
}
67 Basic 66 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
68 Call 67 Kernel_C.cap_page_table_cap_get_capPTIsMapped(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
69 Cond 65 68 !((ret__int#v : Word 32) == 0)
70 Basic 69 {
    var ret__int#v : Word 32 = IfThenElse(!((ret__unsigned_longlong#v : Word 64) == WordCastSigned(3)), 1, 0)
}
71 Basic 70 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
72 Call 71 Kernel_C.cap_get_capType(lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64, lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
73 Basic 72 {
    var lvl1ptCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var lvl1ptCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
74 Cond 73 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
75 Cond 74 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
76 Cond 75 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
77 Basic 76 {
    var vaddr___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
78 Call 77 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
79 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
80 Basic 79 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 8, WordCastSigned(0))
}
81 Cond 80 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
82 Basic 81 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(2))
}
83 Cond 82 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
84 Cond 83 78 !(!(!((ret__unsigned_longlong#v : Word 64) == 0)))
85 Basic 84 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
86 Call 85 Kernel_C.cap_page_table_cap_get_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
87 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
88 Basic 87 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
89 Cond 88 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
90 Cond 89 86 !(!(!((ret__int#v : Word 32) == 0)))
91 Basic 90 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
92 Cond 91 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
93 Cond 92 Err (0 <s 3) && (0 <=s 0)
94 Cond 90 93 !((ret__int#v : Word 32) == 0)
95 Basic 94 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(2), 1, 0)
}
96 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
97 Basic 96 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
98 Cond 97 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
99 Cond 98 95 !(!(!((label___unsigned_long#v : Word 64) == WordCastSigned(30))))
100 Basic 1 { }
101 Basic 100 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
102 Call 101 Kernel_C.performPageTableInvocationUnmap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, cte___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
103 Call 102 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
104 Cond 103 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
105 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
106 Basic 105 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(9))
}
107 Cond 106 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
108 Cond 107 104 !(!(((find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64) == WordCastSigned(0)) && ((find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64) == (pte___ptr_to_struct_pte_C#v : Word 64))))
109 Basic 108 {
    var pte___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
110 Basic 109 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
111 Call 110 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
112 Basic 111 {
    var find_ret___struct_findVSpaceForASID_ret_C#v.status_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64
    var find_ret___struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64 = rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64
}
113 Call 112 Kernel_C.findVSpaceForASID(asid___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_findVSpaceForASID_ret_C#v.status_C : Word 64, rv#space#ret__struct_findVSpaceForASID_ret_C#v.vspace_root_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
114 Basic 113 {
    var asid___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
115 Basic 114 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
116 Call 115 Kernel_C.cap_page_table_cap_get_capPTMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
117 Cond 116 104 !(!(!((ret__unsigned_longlong#v : Word 64) == 0)))
118 Basic 117 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
119 Call 118 Kernel_C.cap_page_table_cap_get_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
120 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
121 Basic 120 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(9))
}
122 Cond 121 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
123 Cond 122 119 !(!(!(!((ret__unsigned_long#v : Word 64) == 0))))
124 Basic 123 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
125 Call 124 Kernel_C.isFinalCapability(cte___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
126 Cond 125 99 (label___unsigned_long#v : Word 64) == WordCastSigned(31)
EntryPoint 126

Function Kernel_C.invokeIRQHandler_SetIRQHandler(irq___unsigned_long#v : Word 64, cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.cteInsert(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, slot___ptr_to_struct_cte_C#v : Word 64, irqSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Call 2 Kernel_C.cteDeleteOne(irqSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
4 Basic 3 {
    var GhostAssertions : WordArray 50 64 = WordArrayUpdate(GhostAssertions : WordArray 50 64, 502, 0 - 1)
}
5 Cond 4 Err true
6 Basic 5 {
    var irqSlot___ptr_to_struct_cte_C#v : Word 64 = (intStateIRQNode : Word 64) + ((irq___unsigned_long#v : Word 64) * 32)
}
7 Cond 6 Err PValid(HTD : HTD, Array (Struct Kernel_C.cte_C) 64, intStateIRQNode : Word 64) && ((irq___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, intStateIRQNode : Word 64, irq___unsigned_long#v : Word 64)
EntryPoint 7

Function Kernel_C.performInvocation_Notification(ntfn___ptr_to_struct_notification_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.sendSignal(ntfn___ptr_to_struct_notification_C#v : Word 64, badge___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
EntryPoint 4

Function Kernel_C.seL4_Fault_VMFault_get_address(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.seL4_MessageInfo_get_extraCaps(seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) & 384 >> WordCast(7)
}
11 Cond 10 Err (0 <=s 7) && (7 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_MessageInfo_set_extraCaps(seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(7)) & 384)
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0) && (0 <=s 7) && (7 <s 64) && (0 <s 1) && (0 <=s 0)
6 Basic 5 {
    var seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) & ~(384)
}
7 Cond 6 Err (0 <s 1) && (0 <=s 0) && (0 <s 1) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.thread_state_ptr_set_tcbQueued(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCastSigned(1)))
}
3 Cond 2 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) & ~(1))
}
5 Cond 4 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 5

Function Kernel_C.thread_state_ptr_set_tsType_np(ts_ptr___ptr_to_struct_thread_state_C#v : Word 64, tsType___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ts_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(0)), WordCast(tsType___unsigned_long#v : Word 64))
}
3 Cond 2 Err (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, ts_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 3

Function Kernel_C.Arch_decodeIRQControlInvocation(invLabel___unsigned_long#v : Word 64, length___unsigned_long#v : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
5 Call 4 Kernel_C.Arch_invokeIRQControl(irq___unsigned_long#v : Word 64, destSlot___ptr_to_struct_cte_C#v : Word 64, srcSlot___ptr_to_struct_cte_C#v : Word 64, trigger___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
6 Call 5 Kernel_C.setThreadState((Mem : Mem) -MemAcc-> (ksCurThread : Word 64), WordCastSigned(2), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Cond 6 Err PGlobalValid(HTD : HTD, Pointer (Struct Kernel_C.tcb_C), ksCurThread : Word 64)
8 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
9 Cond 8 7 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
10 Basic 9 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
11 Call 10 Kernel_C.ensureEmptySlot(destSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
12 Basic 11 {
    var destSlot___ptr_to_struct_cte_C#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64
}
13 Basic 1 {
    var ret__unsigned_long#v : Word 64 = lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64
}
14 Cond 13 12 !((lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64) == WordCastSigned(0))
15 Basic 14 {
    var lu_ret___struct_lookupSlot_ret_C#v.status_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64
    var lu_ret___struct_lookupSlot_ret_C#v.slot_C : Word 64 = rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64
}
16 Call 15 Kernel_C.lookupTargetSlot(cnodeCap___struct_cap_C#v.words_C.0 : Word 64, cnodeCap___struct_cap_C#v.words_C.1 : Word 64, index___unsigned_long#v : Word 64, depth___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__struct_lookupSlot_ret_C#v.status_C : Word 64, rv#space#ret__struct_lookupSlot_ret_C#v.slot_C : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
17 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
18 Basic 17 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(9))
}
19 Cond 18 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
20 Cond 19 16 !((ret__unsigned_long#v : Word 64) == 0)
21 Basic 20 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
22 Call 21 Kernel_C.isIRQActive(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
23 Basic 1 {
    var ret__unsigned_long#v : Word 64 = status___unsigned_long#v : Word 64
}
24 Cond 23 22 !((status___unsigned_long#v : Word 64) == WordCastSigned(0))
25 Basic 24 {
    var status___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
26 Call 25 Kernel_C.Arch_checkIRQ(irq_w___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
27 Basic 26 {
    var cnodeCap___struct_cap_C#v.words_C.0 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 0))
    var cnodeCap___struct_cap_C#v.words_C.1 : Word 64 = (Mem : Mem) -MemAcc-> ((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) + 0 + (8 * 1))
}
28 Cond 27 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
29 Cond 28 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, (Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0))) && (0 <s 3) && (0 <=s 0)
30 Cond 29 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
31 Basic 30 {
    var depth___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
32 Call 31 Kernel_C.getSyscallArg(WordCastSigned(3), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
33 Basic 32 {
    var index___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
34 Call 33 Kernel_C.getSyscallArg(WordCastSigned(2), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
35 Basic 34 {
    var trigger___unsigned_long#v : Word 64 = WordCastSigned(IfThenElse(!(!(!((ret__unsigned_long#v : Word 64) == 0))), 1, 0))
}
36 Basic 35 {
    var ret__unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
37 Call 36 Kernel_C.getSyscallArg(WordCastSigned(1), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
38 Basic 37 {
    var irq___unsigned_long#v : Word 64 = irq_w___unsigned_long#v : Word 64
}
39 Basic 38 {
    var irq_w___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
40 Call 39 Kernel_C.getSyscallArg(WordCastSigned(0), buffer___ptr_to_unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
41 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
42 Basic 41 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
43 Cond 42 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
44 Cond 43 40 !(!(1 == 0))
45 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
46 Basic 45 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(7))
}
47 Cond 46 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
48 Cond 47 44 !((ret__int#v : Word 32) == 0)
49 Basic 48 {
    var ret__int#v : Word 32 = IfThenElse((Mem : Mem) -MemAcc-> ((current_extra_caps : Word 64) + 0 + (8 * 0)) == WordCastSigned(0), 1, 0)
}
50 Cond 49 Err PGlobalValid(HTD : HTD, Struct Kernel_C.extra_caps_C, current_extra_caps : Word 64)
51 Cond 50 Err (0 <s 3) && (0 <=s 0)
52 Cond 48 51 !((ret__int#v : Word 32) == 0)
53 Basic 52 {
    var ret__int#v : Word 32 = IfThenElse((length___unsigned_long#v : Word 64) < WordCastSigned(4), 1, 0)
}
54 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(3)
}
55 Basic 54 {
    var Mem : Mem = MemUpdate(Mem : Mem, (current_syscall_error : Word 64) + 48, WordCastSigned(3))
}
56 Cond 55 Err PGlobalValid(HTD : HTD, Struct Kernel_C.syscall_error_C, current_syscall_error : Word 64)
57 Cond 53 56 (invLabel___unsigned_long#v : Word 64) == WordCastSigned(37)
EntryPoint 57

Function Kernel_C.cap_cnode_cap_get_capCNodeGuard(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_cnode_cap_get_capCNodeRadix(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 8866461766385664 >> WordCast(47)
}
11 Cond 10 Err (0 <=s 47) && (47 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_cnode_cap_set_capCNodeGuard(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & -1)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & ~(-1)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.cap_endpoint_cap_get_capCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 36028797018963968 >> WordCast(55)
}
11 Cond 10 Err (0 <=s 55) && (55 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_get_capEPBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_set_capCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(55)) & 36028797018963968)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 55) && (55 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(36028797018963968)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_endpoint_cap_set_capEPBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & -1)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & ~(-1)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.cap_untyped_cap_get_capIsDevice(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & 64 >> WordCast(6)
}
11 Cond 10 Err (0 <=s 6) && (6 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_zombie_cap_get_capZombiePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast((ret__unsigned_longlong#v : Word 64) & WordCast(~(1 << ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) - 1)))
}
4 Cond 3 Err ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) < WordCastSigned(64)
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_zombie_cap_get_capZombieID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Basic 6 {
    var radix___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.cap_zombie_cap_get_capZombieBits(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 8

Function Kernel_C.lookup_fault_depth_mismatch_new(bitsFound___unsigned_longlong#v : Word 64, bitsLeft___unsigned_longlong#v : Word 64) -- updates: (ret__struct_lookup_fault_C#v.words_C.0 : Word 64, ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookup_fault_C#v.words_C.0 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64
    var ret__struct_lookup_fault_C#v.words_C.1 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((bitsFound___unsigned_longlong#v : Word 64) & 127 << WordCast(9)) | ((bitsLeft___unsigned_longlong#v : Word 64) & 127 << WordCast(2)) | (WordCastSigned(2) & 3 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 2) && (2 <s 64) && (0 <=s 9) && (9 <s 64)
EntryPoint 7

Function Kernel_C.lookup_fault_guard_mismatch_new(guardFound___unsigned_longlong#v : Word 64, bitsLeft___unsigned_longlong#v : Word 64, bitsFound___unsigned_longlong#v : Word 64) -- updates: (ret__struct_lookup_fault_C#v.words_C.0 : Word 64, ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookup_fault_C#v.words_C.0 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64
    var ret__struct_lookup_fault_C#v.words_C.1 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64 = WordCastSigned(0) | ((guardFound___unsigned_longlong#v : Word 64) << WordCast(0))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64)
6 Basic 5 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((bitsLeft___unsigned_longlong#v : Word 64) & 127 << WordCast(9)) | ((bitsFound___unsigned_longlong#v : Word 64) & 127 << WordCast(2)) | (WordCastSigned(3) & 3 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 2) && (2 <s 64) && (0 <=s 9) && (9 <s 64)
EntryPoint 7

Function Kernel_C.mdb_node_ptr_set_mdbFirstBadged(mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCastSigned(1)))
}
3 Cond 2 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * 1)) & ~(1))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, mdb_node_ptr___ptr_to_struct_mdb_node_C#v : Word 64)
EntryPoint 5

Function Kernel_C.performPageTableInvocationUnmap(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, ctSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(0)
}
4 Call 3 Kernel_C.cap_page_table_cap_ptr_set_capPTIsMapped(ctSlot___ptr_to_struct_cte_C#v : Word 64, WordCastSigned(0), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
5 Cond 4 Err PValid(HTD : HTD, Struct Kernel_C.cte_C, ctSlot___ptr_to_struct_cte_C#v : Word 64)
6 Call 5 Kernel_C.clearMemory(pt___ptr_to_struct_pte_C#v : Word 64, WordCastSigned(12), Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
7 Call 6 Kernel_C.unmapPageTable(WordCast(ret__unsigned_longlong#v : Word 64), WordCast(unsigned_longlong_eret_2#v : Word 64), pt___ptr_to_struct_pte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
8 Basic 7 {
    var unsigned_longlong_eret_2#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
9 Call 8 Kernel_C.cap_page_table_cap_get_capPTMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
10 Basic 9 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
11 Call 10 Kernel_C.cap_page_table_cap_get_capPTMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
12 Basic 11 {
    var pt___ptr_to_struct_pte_C#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
13 Basic 12 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
14 Call 13 Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
15 Cond 14 5 !((ret__unsigned_longlong#v : Word 64) == 0)
16 Basic 15 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
17 Call 16 Kernel_C.cap_page_table_cap_get_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 17

Function Kernel_C.seL4_CapRights_get_capAllowRead(seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) & 2 >> WordCast(1)
}
11 Cond 10 Err (0 <=s 1) && (1 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_Fault_CapFault_get_address(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_get_capCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 144115188075855872 >> WordCast(57)
}
11 Cond 10 Err (0 <=s 57) && (57 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_set_capCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(57)) & 144115188075855872)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 57) && (57 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(144115188075855872)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_frame_cap_get_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -281474976710656 >> WordCast(48)
}
11 Cond 10 Err (0 <=s 48) && (48 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_frame_cap_set_capFMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(48)) & -281474976710656)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 48) && (48 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & ~(-281474976710656)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.cap_reply_cap_get_capReplyMaster(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_untyped_cap_get_capBlockSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & 63 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_untyped_cap_get_capFreeIndex(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -33554432 >> WordCast(25)
}
11 Cond 10 Err (0 <=s 25) && (25 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_untyped_cap_set_capFreeIndex(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(25)) & -33554432)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 25) && (25 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & ~(-33554432)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.cap_zombie_cap_get_capZombieBits(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = (type___unsigned_long#v : Word 64) & (1 << WordCast(6) - 1)
}
4 Cond 3 Err (0 <=s 6) && (6 <s 64)
5 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCastSigned(4)
}
6 Cond 5 4 (type___unsigned_long#v : Word 64) == (1 << WordCast(6))
7 Cond 6 Err (0 <=s 6) && (6 <s 64)
8 Basic 7 {
    var type___unsigned_long#v : Word 64 = WordCast(ret__unsigned_longlong#v : Word 64)
}
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_zombie_cap_get_capZombieType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
EntryPoint 10

Function Kernel_C.cap_zombie_cap_get_capZombieType(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 127 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.endpoint_ptr_set_epQueue_head_np(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, epQueue_head___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ep_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(1)), WordCast(epQueue_head___unsigned_long#v : Word 64))
}
3 Cond 2 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, ep_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 3

Function Kernel_C.invokeIRQHandler_ClearIRQHandler(irq___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Call 1 Kernel_C.cteDeleteOne(irqSlot___ptr_to_struct_cte_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
3 Basic 2 {
    var GhostAssertions : WordArray 50 64 = WordArrayUpdate(GhostAssertions : WordArray 50 64, 502, 0 - 1)
}
4 Cond 3 Err true
5 Basic 4 {
    var irqSlot___ptr_to_struct_cte_C#v : Word 64 = (intStateIRQNode : Word 64) + ((irq___unsigned_long#v : Word 64) * 32)
}
6 Cond 5 Err PValid(HTD : HTD, Array (Struct Kernel_C.cte_C) 64, intStateIRQNode : Word 64) && ((irq___unsigned_long#v : Word 64) == 0) || PArrayValid(HTD : HTD, Struct Kernel_C.cte_C, intStateIRQNode : Word 64, irq___unsigned_long#v : Word 64)
EntryPoint 6

Function Kernel_C.seL4_CNode_CapData_get_guardSize(seL4_CNode_CapData___struct_seL4_CNode_CapData_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_CNode_CapData___struct_seL4_CNode_CapData_C#v.words_C.0 : Word 64) & 63 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_CapRights_get_capAllowGrant(seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) & 4 >> WordCast(2)
}
11 Cond 10 Err (0 <=s 2) && (2 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_CapRights_get_capAllowWrite(seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) & 1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_asid_pool_cap_get_capASIDBase(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 576451956210401280 >> WordCast(43)
}
11 Cond 10 Err (0 <=s 43) && (43 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_asid_pool_cap_get_capASIDPool(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 137438953471 << WordCast(2)
}
11 Cond 10 Err (0 <=s 2) && (2 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.notification_ptr_get_ntfnBoundTCB(notification_ptr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 3)) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (3 <s 4) && (0 <=s 3) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 11

Function Kernel_C.notification_ptr_set_ntfnBoundTCB(notification_ptr___ptr_to_struct_notification_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(3)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 3)) | (((v64___unsigned_longlong#v : Word 64) >> WordCast(0)) & WordCastSigned(549755813887)))
}
3 Cond 2 Err (3 <s 4) && (0 <=s 3) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (3 <s 4) && (0 <=s 3) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(3)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 3)) & ~(549755813887))
}
5 Cond 4 Err (3 <s 4) && (0 <=s 3) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (3 <s 4) && (0 <=s 3) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 5

Function Kernel_C.seL4_Fault_UserException_get_code(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64) & 4294967280 >> WordCast(4)
}
11 Cond 10 Err (0 <=s 4) && (4 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_get_capCanReceive(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 72057594037927936 >> WordCast(56)
}
11 Cond 10 Err (0 <=s 56) && (56 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_set_capCanReceive(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(56)) & 72057594037927936)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 56) && (56 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(72057594037927936)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_reply_cap_get_capReplyCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 2 >> WordCast(1)
}
11 Cond 10 Err (0 <=s 1) && (1 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_reply_cap_set_capReplyCanGrant(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(1)) & 2)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 1) && (1 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(2)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_zombie_cap_get_capZombieNumber(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_long#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_long#v : Word 64 = WordCast((ret__unsigned_longlong#v : Word 64) & WordCast(1 << ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) - 1))
}
4 Cond 3 Err ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) < WordCastSigned(64)
5 Basic 4 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
6 Call 5 Kernel_C.cap_zombie_cap_get_capZombieID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
7 Basic 6 {
    var radix___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
8 Call 7 Kernel_C.cap_zombie_cap_get_capZombieBits(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 8

Function Kernel_C.cap_zombie_cap_set_capZombieNumber(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, n___unsigned_long#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 { }
4 Basic 3 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = rv#space#ret__struct_cap_C#v.words_C.1 : Word 64
}
5 Call 4 Kernel_C.cap_zombie_cap_set_capZombieID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, WordCast((ptr___unsigned_long#v : Word 64) | ((n___unsigned_long#v : Word 64) & (1 << ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) - 1)))) -- updates (rv#space#ret__struct_cap_C#v.words_C.0 : Word 64, rv#space#ret__struct_cap_C#v.words_C.1 : Word 64)
6 Cond 5 Err ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) < WordCastSigned(64)
7 Basic 6 {
    var ptr___unsigned_long#v : Word 64 = WordCast((ret__unsigned_longlong#v : Word 64) & WordCast(~(1 << ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) - 1)))
}
8 Cond 7 Err ((radix___unsigned_long#v : Word 64) + WordCastSigned(1)) < WordCastSigned(64)
9 Basic 8 {
    var ret__unsigned_longlong#v : Word 64 = rv#space#ret__unsigned_longlong#v : Word 64
}
10 Call 9 Kernel_C.cap_zombie_cap_get_capZombieID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_longlong#v : Word 64)
11 Basic 10 {
    var radix___unsigned_long#v : Word 64 = rv#space#ret__unsigned_long#v : Word 64
}
12 Call 11 Kernel_C.cap_zombie_cap_get_capZombieBits(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates (rv#space#ret__unsigned_long#v : Word 64)
EntryPoint 12

Function Kernel_C.seL4_MessageInfo_get_capsUnwrapped(seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) & 3584 >> WordCast(9)
}
11 Cond 10 Err (0 <=s 9) && (9 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.seL4_MessageInfo_set_capsUnwrapped(seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64
}
4 Basic 3 {
    var seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(9)) & 3584)
}
5 Cond 4 Err (0 <s 1) && (0 <=s 0) && (0 <=s 9) && (9 <s 64) && (0 <s 1) && (0 <=s 0)
6 Basic 5 {
    var seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64 = (seL4_MessageInfo___struct_seL4_MessageInfo_C#v.words_C.0 : Word 64) & ~(3584)
}
7 Cond 6 Err (0 <s 1) && (0 <=s 0) && (0 <s 1) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_cnode_cap_get_capCNodeGuardSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 567453553048682496 >> WordCast(53)
}
11 Cond 10 Err (0 <=s 53) && (53 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_cnode_cap_set_capCNodeGuardSize(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(53)) & 567453553048682496)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 53) && (53 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(567453553048682496)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_frame_cap_get_capFMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_frame_cap_set_capFMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) >> WordCast(0)) & 549755813887)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(549755813887)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_notification_cap_get_capNtfnPtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_page_table_cap_get_capPTBasePtr(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & 281474976710144 >> WordCast(9)
}
11 Cond 10 Err (0 <=s 9) && (9 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.lookup_fault_missing_capability_new(bitsLeft___unsigned_longlong#v : Word 64) -- updates: (ret__struct_lookup_fault_C#v.words_C.0 : Word 64, ret__struct_lookup_fault_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_lookup_fault_C#v.words_C.0 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64
    var ret__struct_lookup_fault_C#v.words_C.1 : Word 64 = lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64 = WordCastSigned(0)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64 = WordCastSigned(0) | ((bitsLeft___unsigned_longlong#v : Word 64) & 127 << WordCast(2)) | (WordCastSigned(1) & 3 << WordCast(0))
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <=s 2) && (2 <s 64)
EntryPoint 7

Function Kernel_C.notification_ptr_get_ntfnQueue_head(notification_ptr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 1)) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 4) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 11

Function Kernel_C.notification_ptr_get_ntfnQueue_tail(notification_ptr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 0)) & -33554432 >> WordCast(25)
}
11 Cond 10 Err (0 <=s 25) && (25 <s 64) && (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 11

Function Kernel_C.notification_ptr_set_ntfnQueue_head(notification_ptr___ptr_to_struct_notification_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) >> WordCast(0)) & WordCastSigned(549755813887)))
}
3 Cond 2 Err (1 <s 4) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (1 <s 4) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 1)) & ~(549755813887))
}
5 Cond 4 Err (1 <s 4) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (1 <s 4) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 5

Function Kernel_C.notification_ptr_set_ntfnQueue_tail(notification_ptr___ptr_to_struct_notification_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(25)) & WordCast(-33554432)))
}
3 Cond 2 Err (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (0 <=s 25) && (25 <s 64) && (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 0)) & ~(-33554432))
}
5 Cond 4 Err (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (0 <s 4) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 5

Function Kernel_C.seL4_Fault_UserException_get_number(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64) & -4294967296 >> WordCast(32)
}
11 Cond 10 Err (0 <=s 32) && (32 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.thread_state_ptr_get_blockingObject(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 0)) & 549755813872 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 11

Function Kernel_C.thread_state_ptr_set_blockingObject(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) >> WordCast(0)) & WordCastSigned(549755813872)))
}
3 Cond 2 Err (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 0)) & ~(549755813872))
}
5 Cond 4 Err (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 5

Function Kernel_C.vm_attributes_get_riscvExecuteNever(vm_attributes___struct_vm_attributes_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (vm_attributes___struct_vm_attributes_C#v.words_C.0 : Word 64) & 1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_page_table_cap_get_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 549755813888 >> WordCast(39)
}
11 Cond 10 Err (0 <=s 39) && (39 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_page_table_cap_set_capPTIsMapped(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(39)) & 549755813888)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 39) && (39 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(549755813888)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_untyped_cap_ptr_set_capFreeIndex(cap_ptr___ptr_to_struct_cap_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(25)) & -33554432))
}
3 Cond 2 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64) && (0 <=s 25) && (25 <s 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * 1)) & ~(-33554432))
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64) && (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64)
EntryPoint 5

Function Kernel_C.endpoint_ptr_mset_epQueue_tail_state(ep_ptr___ptr_to_struct_endpoint_C#v : Word 64, epQueue_tail___unsigned_long#v : Word 64, state___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ep_ptr___ptr_to_struct_endpoint_C#v : Word 64) + (8 * WordCast(0)), WordCast((epQueue_tail___unsigned_long#v : Word 64) | (state___unsigned_long#v : Word 64)))
}
3 Cond 2 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.endpoint_C, ep_ptr___ptr_to_struct_endpoint_C#v : Word 64)
EntryPoint 3

Function Kernel_C.cap_endpoint_cap_get_capCanGrantReply(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 288230376151711744 >> WordCast(58)
}
11 Cond 10 Err (0 <=s 58) && (58 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_endpoint_cap_set_capCanGrantReply(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(58)) & 288230376151711744)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 58) && (58 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(288230376151711744)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.cap_notification_cap_get_capNtfnBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_notification_cap_set_capNtfnBadge(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & -1)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & ~(-1)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.seL4_CapRights_get_capAllowGrantReply(seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(63)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 63) && (63 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_CapRights___struct_seL4_CapRights_C#v.words_C.0 : Word 64) & 8 >> WordCast(3)
}
11 Cond 10 Err (0 <=s 3) && (3 <s 64) && (0 <s 1) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.thread_state_ptr_get_blockingIPCBadge(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 2)) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (2 <s 3) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 11

Function Kernel_C.thread_state_ptr_set_blockingIPCBadge(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(2)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 2)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCast(-1)))
}
3 Cond 2 Err (2 <s 3) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (2 <s 3) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(2)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 2)) & ~(-1))
}
5 Cond 4 Err (2 <s 3) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (2 <s 3) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 5

Function Kernel_C.cap_page_table_cap_get_capPTMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & -281474976710656 >> WordCast(48)
}
11 Cond 10 Err (0 <=s 48) && (48 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.cap_page_table_cap_set_capPTMappedASID(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(48)) & -281474976710656)
}
5 Cond 4 Err (1 <s 2) && (0 <=s 1) && (0 <=s 48) && (48 <s 64) && (1 <s 2) && (0 <=s 1)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.1 : Word 64 = (cap___struct_cap_C#v.words_C.1 : Word 64) & ~(-281474976710656)
}
7 Cond 6 Err (1 <s 2) && (0 <=s 1) && (1 <s 2) && (0 <=s 1)
EntryPoint 7

Function Kernel_C.notification_ptr_get_ntfnMsgIdentifier(notification_ptr___ptr_to_struct_notification_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 2)) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (2 <s 4) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 11

Function Kernel_C.notification_ptr_set_ntfnMsgIdentifier(notification_ptr___ptr_to_struct_notification_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(2)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 2)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(0)) & WordCast(-1)))
}
3 Cond 2 Err (2 <s 4) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (0 <=s 0) && (0 <s 64) && (2 <s 4) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * WordCast(2)), (Mem : Mem) -MemAcc-> ((notification_ptr___ptr_to_struct_notification_C#v : Word 64) + (8 * 2)) & ~(-1))
}
5 Cond 4 Err (2 <s 4) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64) && (2 <s 4) && (0 <=s 2) && PValid(HTD : HTD, Struct Kernel_C.notification_C, notification_ptr___ptr_to_struct_notification_C#v : Word 64)
EntryPoint 5

Function Kernel_C.seL4_Fault_CapFault_get_inReceivePhase(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64) & -9223372036854775808 >> WordCast(63)
}
11 Cond 10 Err (0 <=s 63) && (63 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.thread_state_ptr_get_blockingIPCIsCall(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) & 2 >> WordCast(1)
}
11 Cond 10 Err (0 <=s 1) && (1 <s 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 11

Function Kernel_C.thread_state_ptr_set_blockingIPCIsCall(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(1)) & WordCastSigned(2)))
}
3 Cond 2 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <=s 1) && (1 <s 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) & ~(2))
}
5 Cond 4 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 5

Function Kernel_C.cap_notification_cap_get_capNtfnCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 144115188075855872 >> WordCast(57)
}
11 Cond 10 Err (0 <=s 57) && (57 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_notification_cap_set_capNtfnCanSend(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(57)) & 144115188075855872)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 57) && (57 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(144115188075855872)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.seL4_Fault_VMFault_get_instructionFault(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64) & 524288 >> WordCast(19)
}
11 Cond 10 Err (0 <=s 19) && (19 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_page_table_cap_ptr_set_capPTIsMapped(cap_ptr___ptr_to_struct_cap_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * 0)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(39)) & 549755813888))
}
3 Cond 2 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64) && (0 <=s 39) && (39 <s 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * WordCast(0)), (Mem : Mem) -MemAcc-> ((cap_ptr___ptr_to_struct_cap_C#v : Word 64) + (8 * 0)) & ~(549755813888))
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64) && (0 <s 2) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.cap_C, cap_ptr___ptr_to_struct_cap_C#v : Word 64)
EntryPoint 5

Function Kernel_C.lookup_fault_depth_mismatch_get_bitsLeft(lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64, lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64) & 508 >> WordCast(2)
}
11 Cond 10 Err (0 <=s 2) && (2 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.lookup_fault_guard_mismatch_get_bitsLeft(lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64, lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64) & 65024 >> WordCast(9)
}
11 Cond 10 Err (0 <=s 9) && (9 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.thread_state_ptr_get_blockingIPCCanGrant(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) & 8 >> WordCast(3)
}
11 Cond 10 Err (0 <=s 3) && (3 <s 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 11

Function Kernel_C.thread_state_ptr_set_blockingIPCCanGrant(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(3)) & WordCastSigned(8)))
}
3 Cond 2 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <=s 3) && (3 <s 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) & ~(8))
}
5 Cond 4 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 5

Function Kernel_C.cap_page_table_cap_get_capPTMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCast(-549755813888)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(1 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 549755813887 << WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_page_table_cap_set_capPTMappedAddress(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) >> WordCast(0)) & 549755813887)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 0) && (0 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(549755813887)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.lookup_fault_depth_mismatch_get_bitsFound(lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64, lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64) & 65024 >> WordCast(9)
}
11 Cond 10 Err (0 <=s 9) && (9 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.lookup_fault_guard_mismatch_get_bitsFound(lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64, lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64) & 508 >> WordCast(2)
}
11 Cond 10 Err (0 <=s 2) && (2 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_notification_cap_get_capNtfnCanReceive(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & 288230376151711744 >> WordCast(58)
}
11 Cond 10 Err (0 <=s 58) && (58 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.cap_notification_cap_set_capNtfnCanReceive(cap___struct_cap_C#v.words_C.0 : Word 64, cap___struct_cap_C#v.words_C.1 : Word 64, v64___unsigned_longlong#v : Word 64) -- updates: (ret__struct_cap_C#v.words_C.0 : Word 64, ret__struct_cap_C#v.words_C.1 : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__struct_cap_C#v.words_C.0 : Word 64 = cap___struct_cap_C#v.words_C.0 : Word 64
    var ret__struct_cap_C#v.words_C.1 : Word 64 = cap___struct_cap_C#v.words_C.1 : Word 64
}
4 Basic 3 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) | (((v64___unsigned_longlong#v : Word 64) << WordCast(58)) & 288230376151711744)
}
5 Cond 4 Err (0 <s 2) && (0 <=s 0) && (0 <=s 58) && (58 <s 64) && (0 <s 2) && (0 <=s 0)
6 Basic 5 {
    var cap___struct_cap_C#v.words_C.0 : Word 64 = (cap___struct_cap_C#v.words_C.0 : Word 64) & ~(288230376151711744)
}
7 Cond 6 Err (0 <s 2) && (0 <=s 0) && (0 <s 2) && (0 <=s 0)
EntryPoint 7

Function Kernel_C.lookup_fault_guard_mismatch_get_guardFound(lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64, lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.seL4_Fault_UnknownSyscall_get_syscallNumber(seL4_Fault___struct_seL4_Fault_C#v.words_C.0 : Word 64, seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (seL4_Fault___struct_seL4_Fault_C#v.words_C.1 : Word 64) & -1 >> WordCast(0)
}
11 Cond 10 Err (0 <=s 0) && (0 <s 64) && (1 <s 2) && (0 <=s 1)
EntryPoint 11

Function Kernel_C.thread_state_ptr_mset_blockingObject_tsType(ts_ptr___ptr_to_struct_thread_state_C#v : Word 64, ep_ref___unsigned_long#v : Word 64, tsType___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (ts_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(0)), WordCast((ep_ref___unsigned_long#v : Word 64) | (tsType___unsigned_long#v : Word 64)))
}
3 Cond 2 Err (0 <s 3) && (0 <=s 0) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, ts_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 3

Function Kernel_C.lookup_fault_missing_capability_get_bitsLeft(lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64, lookup_fault___struct_lookup_fault_C#v.words_C.1 : Word 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (lookup_fault___struct_lookup_fault_C#v.words_C.0 : Word 64) & 508 >> WordCast(2)
}
11 Cond 10 Err (0 <=s 2) && (2 <s 64) && (0 <s 2) && (0 <=s 0)
EntryPoint 11

Function Kernel_C.thread_state_ptr_get_blockingIPCCanGrantReply(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (ret__unsigned_longlong#v : Word 64)
1 Basic Ret { }
2 Cond 1 Err false
3 Basic 1 {
    var ret__unsigned_longlong#v : Word 64 = ret___unsigned_longlong#v : Word 64
}
4 Basic 3 {
    var ret___unsigned_longlong#v : Word 64 = (ret___unsigned_longlong#v : Word 64) | WordCastSigned(0)
}
5 Cond 4 3 !(!(!((ret__int#v : Word 32) == 0)))
6 Basic 5 {
    var ret__int#v : Word 32 = IfThenElse(!((ret___unsigned_longlong#v : Word 64) & (1 << WordCast(38)) == 0), 1, 0)
}
7 Cond 6 Err (0 <=s 38) && (38 <s 64)
8 Cond 7 5 !((ret__int#v : Word 32) == 0)
9 Basic 8 {
    var ret__int#v : Word 32 = IfThenElse(!(0 == 0), 1, 0)
}
10 Basic 9 {
    var ret___unsigned_longlong#v : Word 64 = (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) & 4 >> WordCast(2)
}
11 Cond 10 Err (0 <=s 2) && (2 <s 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 11

Function Kernel_C.thread_state_ptr_set_blockingIPCCanGrantReply(thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64, v64___unsigned_longlong#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) | (((v64___unsigned_longlong#v : Word 64) << WordCast(2)) & WordCastSigned(4)))
}
3 Cond 2 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (0 <=s 2) && (2 <s 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
4 Basic 3 {
    var Mem : Mem = MemUpdate(Mem : Mem, (thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * WordCast(1)), (Mem : Mem) -MemAcc-> ((thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) + (8 * 1)) & ~(4))
}
5 Cond 4 Err (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64) && (1 <s 3) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.thread_state_C, thread_state_ptr___ptr_to_struct_thread_state_C#v : Word 64)
EntryPoint 5

Function Kernel_C.mdb_node_ptr_mset_mdbNext_mdbRevocable_mdbFirstBadged(node_ptr___ptr_to_struct_mdb_node_C#v : Word 64, mdbNext___unsigned_long#v : Word 64, mdbRevocable___unsigned_long#v : Word 64, mdbFirstBadged___unsigned_long#v : Word 64, Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64) -- updates: (Mem : Mem, HTD : HTD, PMS : PMS, GhostAssertions : WordArray 50 64)
1 Basic Ret { }
2 Basic 1 {
    var Mem : Mem = MemUpdate(Mem : Mem, (node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) + (8 * WordCast(1)), WordCast((mdbNext___unsigned_long#v : Word 64) | ((mdbRevocable___unsigned_long#v : Word 64) << WordCast(1)) | (mdbFirstBadged___unsigned_long#v : Word 64)))
}
3 Cond 2 Err (1 <s 2) && (0 <=s 1) && PValid(HTD : HTD, Struct Kernel_C.mdb_node_C, node_ptr___ptr_to_struct_mdb_node_C#v : Word 64) && (0 <=s 1) && (1 <s 64)
EntryPoint 3

Function asm_instruction'wfi(Mem : Mem, PMS : PMS) -- updates: (Mem : Mem, PMS : PMS)

Function asm_instruction'ecall(arg1 : Word 64, arg2 : Word 64, arg3 : Word 64, arg4 : Word 64, Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'rdtime_%0(Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'sfence.vma(Mem : Mem, PMS : PMS) -- updates: (Mem : Mem, PMS : PMS)

Function asm_instruction'csrr_%0,_sie(Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'csrr_%0,_sip(Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'csrr_%0,_sepc(Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'csrw_satp,_%0(arg1 : Word 64, Mem : Mem, PMS : PMS) -- updates: (Mem : Mem, PMS : PMS)

Function asm_instruction'csrw_sie,__%0(arg1 : Word 64, Mem : Mem, PMS : PMS) -- updates: (Mem : Mem, PMS : PMS)

Function asm_instruction'csrw_stvec,_%0(arg1 : Word 64, Mem : Mem, PMS : PMS) -- updates: (Mem : Mem, PMS : PMS)

Function asm_instruction'csrr_%0,_scause(Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'csrc_sstatus,_%0(arg1 : Word 64, Mem : Mem, PMS : PMS) -- updates: (Mem : Mem, PMS : PMS)

Function asm_instruction'csrr_%0,_sstatus(Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'csrr_%0,_sbadaddr(Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'csrrc_%0,_sie,_%1(arg1 : Word 64, Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'csrrs_%0,_sie,_%1(arg1 : Word 64, Mem : Mem, PMS : PMS) -- updates: (ret1 : Word 64, Mem : Mem, PMS : PMS)

Function asm_instruction'sfence.vma_x0,_%0(arg1 : Word 64, Mem : Mem, PMS : PMS) -- updates: (Mem : Mem, PMS : PMS)