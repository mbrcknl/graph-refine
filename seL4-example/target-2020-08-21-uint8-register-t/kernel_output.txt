
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Fri Aug 21 16:49:47 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/matthewb/verification/master/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/matthewb/verification/master/graph-refine/seL4-example/target/RISCV64-MCS-O1/kernel
  Poly/ML: 581
  HOL: Kananaskis 13 (stdknl) commit 9a8a210af
======================================================================
  Reading /home/matthewb/verification/master/graph-refine/seL4-example/target/RISCV64-MCS-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/master/graph-refine/seL4-example/target/RISCV64-MCS-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/master/graph-refine/seL4-example/target/RISCV64-MCS-O1/kernel.sigs, done.
No signature info for section: _start
No signature info for section: avail_p_regs
No signature info for section: ndks_boot
No signature info for section: rootserver
No signature info for section: rootserver_mem
No signature info for section: avail_reg
No signature info for section: res_reg
No signature info for section: trap_entry
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzsi2
No signature info for section: __ctzsi2
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 301 functions, 16680 RISC-V instructions
  Longest function: decodeRISCVMMUInvocation (768 instructions)
  0 deps: 101 functions (avail_p_regs, ndks_boot, rootserver, ...)
  1 deps: 81 functions (str_to_long, memset, ...)
  2 deps: 41 functions (fastpath_reply_recv, fastpath_call, ...)
  3 deps: 33 functions (c_handle_syscall, slowpath, ...)
  4 deps: 10 functions (invokeUntyped_Retype, ...)
  5 deps: 9 functions (decodeSetIPCBuffer, doNormalTransfer, ...)
  6 deps: 6 functions (invokeTCB_ThreadControlSched, cteDelete, ...)
  7 deps: 7 functions (handleInvocation, decodeUntypedInvocation, ...)
  8 deps: 2 functions (decodeSetSpace, decodeTCBConfigure)
  9 deps: 2 functions (receiveIPC, schedule)
  10 deps: 1 functions (decodeSchedControlInvocation)
  11 deps: 1 functions (handleSyscall)
  14 deps: 3 functions (decodeInvocation, ...)
  15 deps: 1 functions (decodeRISCVMMUInvocation)
  16 deps: 1 functions (decodeCNodeInvocation)
  17 deps: 1 functions (decodeTCBInvocation)
  26 deps: 1 functions (init_kernel)
======================================================================

Section avail_p_regs (1 of 301)
===============================

Deriving specifications
-----------------------

Section `avail_p_regs` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_p_regs` has 0 nodes.

Section ndks_boot (2 of 301)
============================

Deriving specifications
-----------------------

Section `ndks_boot` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ndks_boot` has 0 nodes.

Section rootserver (3 of 301)
=============================

Deriving specifications
-----------------------

Section `rootserver` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver` has 0 nodes.

Section rootserver_mem (4 of 301)
=================================

Deriving specifications
-----------------------

Section `rootserver_mem` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver_mem` has 0 nodes.

Section avail_reg (5 of 301)
============================

Deriving specifications
-----------------------

Section `avail_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_reg` has 0 nodes.

Section res_reg (6 of 301)
==========================

Deriving specifications
-----------------------

Section `res_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `res_reg` has 0 nodes.

Section __ctzdi2 (7 of 301)
===========================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 13 instructions.

RVC_TFFFFT___FT___TF..
ANDI..
RVC_TTT___________FT.
RVC_FTF___________FT.
ADDI..
RVC_TFF_FF________FT.
RVC_FFT___________FT.
BNE..
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x84019a18     0x0    mv a5,a0
    0x84019a1a     0x2    andi a4,a0,1
    0x84019a1e     0x6    bnez a4,ffffffff84019a36 <__ctzdi2+0x1e>
    0x84019a20     0x8    li a0,0
    0x84019a22     0xa    li a3,65
    0x84019a26     0xe    srli a5,a5,0x1
    0x84019a28    0x10    addiw a0,a0,1
    0x84019a2a    0x12    andi a4,a5,1
    0x84019a2e    0x16    bnez a4,ffffffff84019a38 <__ctzdi2+0x20>
    0x84019a30    0x18    bne a0,a3,ffffffff84019a26 <__ctzdi2+0xe>
    0x84019a34    0x1c    ret
    0x84019a36    0x1e    li a0,0
    0x84019a38    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 21 nodes.

Section __clzdi2 (8 of 301)
===========================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 11 instructions.

BLT..
RVC_FFF___________TF.

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x840199fa     0x0    mv a5,a0
    0x840199fc     0x2    bltz a0,ffffffff84019a14 <__clzdi2+0x1a>
    0x84019a00     0x6    li a0,0
    0x84019a02     0x8    li a4,65
    0x84019a06     0xc    slli a5,a5,0x1
    0x84019a08     0xe    addiw a0,a0,1
    0x84019a0a    0x10    bltz a5,ffffffff84019a16 <__clzdi2+0x1c>
    0x84019a0e    0x14    bne a0,a4,ffffffff84019a06 <__clzdi2+0xc>
    0x84019a12    0x18    ret
    0x84019a14    0x1a    li a0,0
    0x84019a16    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 19 nodes.

Section __ctzsi2 (9 of 301)
===========================

Deriving specifications
-----------------------

Section `__ctzsi2` consists of 13 instructions.

RVC_TFF_TF________FT.
SRLIW..
ADDIW..

Stack analysis
---------------

No stack accesses found. Code for `__ctzsi2`:

    0x840199d8     0x0    mv a4,a0
    0x840199da     0x2    andi a0,a0,1
    0x840199dc     0x4    bnez a0,ffffffff840199f6 <__ctzsi2+0x1e>
    0x840199de     0x6    li a3,33
    0x840199e2     0xa    srliw a5,a4,0x1
    0x840199e6     0xe    sext.w a4,a5
    0x840199ea    0x12    addiw a0,a0,1
    0x840199ec    0x14    andi a5,a5,1
    0x840199ee    0x16    bnez a5,ffffffff840199f8 <__ctzsi2+0x20>
    0x840199f0    0x18    bne a0,a3,ffffffff840199e2 <__ctzsi2+0xa>
    0x840199f4    0x1c    ret
    0x840199f6    0x1e    li a0,0
    0x840199f8    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzsi2` has 21 nodes.

Section __clzsi2 (10 of 301)
============================

Deriving specifications
-----------------------

Section `__clzsi2` consists of 12 instructions.

SLLIW..

Stack analysis
---------------

No stack accesses found. Code for `__clzsi2`:

    0x840199b4     0x0    mv a4,a0
    0x840199b6     0x2    bltz a0,ffffffff840199d4 <__clzsi2+0x20>
    0x840199ba     0x6    li a0,0
    0x840199bc     0x8    li a3,34
    0x840199c0     0xc    slliw a5,a4,0x1
    0x840199c4    0x10    sext.w a4,a5
    0x840199c8    0x14    addiw a0,a0,1
    0x840199ca    0x16    bltz a4,ffffffff840199d6 <__clzsi2+0x22>
    0x840199ce    0x1a    bne a0,a3,ffffffff840199c0 <__clzsi2+0xc>
    0x840199d2    0x1e    ret
    0x840199d4    0x20    li a0,0
    0x840199d6    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzsi2` has 20 nodes.

Section char_to_long (11 of 301)
================================

Deriving specifications
-----------------------

Section `char_to_long` consists of 20 instructions.

BGEU..
BLTU..

Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x84019900     0x0    addiw a5,a0,-48
    0x84019904     0x4    andi a5,a5,255
    0x84019908     0x8    li a4,9
    0x8401990a     0xa    bgeu a4,a5,ffffffff84019930 <char_to_long+0x30>
    0x8401990e     0xe    addiw a5,a0,-65
    0x84019912    0x12    andi a5,a5,255
    0x84019916    0x16    li a4,5
    0x84019918    0x18    bgeu a4,a5,ffffffff84019936 <char_to_long+0x36>
    0x8401991c    0x1c    addiw a5,a0,-97
    0x84019920    0x20    andi a5,a5,255
    0x84019924    0x24    li a4,5
    0x84019926    0x26    bltu a4,a5,ffffffff8401993c <char_to_long+0x3c>
    0x8401992a    0x2a    addiw a0,a0,-87
    0x8401992e    0x2e    ret
    0x84019930    0x30    addiw a0,a0,-48
    0x84019934    0x34    ret
    0x84019936    0x36    addiw a0,a0,-55
    0x8401993a    0x3a    ret
    0x8401993c    0x3c    li a0,-1
    0x8401993e    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 30 nodes.

Section strncmp (12 of 301)
===========================

Deriving specifications
-----------------------

Section `strncmp` consists of 14 instructions.

RVC_TTF___________FT.
RVC_TFFTFT___FT___TF..
LBU..
SUBW.....
RVC_FFFFFT________FT.

Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x840198dc     0x0    beqz a2,ffffffff840198fc <strncmp+0x20>
    0x840198de     0x2    mv a5,a0
    0x840198e0     0x4    add a2,a2,a0
    0x840198e2     0x6    lbu a4,0(a5)
    0x840198e6     0xa    lbu a0,0(a1)
    0x840198ea     0xe    subw a0,a4,a0
    0x840198ee    0x12    bnez a0,ffffffff840198fe <strncmp+0x22>
    0x840198f0    0x14    beqz a4,ffffffff840198fe <strncmp+0x22>
    0x840198f2    0x16    addi a5,a5,1
    0x840198f4    0x18    addi a1,a1,1
    0x840198f6    0x1a    bne a5,a2,ffffffff840198e2 <strncmp+0x6>
    0x840198fa    0x1e    ret
    0x840198fc    0x20    li a0,0
    0x840198fe    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 26 nodes.

Section memcpy (13 of 301)
==========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x840198c4     0x0    beqz a2,ffffffff840198da <memcpy+0x16>
    0x840198c6     0x2    add a2,a2,a0
    0x840198c8     0x4    mv a5,a0
    0x840198ca     0x6    lbu a4,0(a1)
    0x840198ce     0xa    sb a4,0(a5)
    0x840198d2     0xe    addi a5,a5,1
    0x840198d4    0x10    addi a1,a1,1
    0x840198d6    0x12    bne a2,a5,ffffffff840198ca <memcpy+0x6>
    0x840198da    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memzero (14 of 301)
===========================

Deriving specifications
-----------------------

Section `memzero` consists of 7 instructions.

SD..

Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x84017ae8     0x0    beqz a1,ffffffff84017af8 <memzero+0x10>
    0x84017aea     0x2    mv a5,a0
    0x84017aec     0x4    add a1,a1,a0
    0x84017aee     0x6    sd zero,0(a5)
    0x84017af2     0xa    addi a5,a5,8
    0x84017af4     0xc    bne a5,a1,ffffffff84017aee <memzero+0x6>
    0x84017af8    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 13 nodes.

Section strlcat (15 of 301)
===========================

Deriving specifications
-----------------------

Section `strlcat` consists of 31 instructions.

ADD.....
RVC_TFT___________FT.
SUB.....
RVC_TFFFFT___T____TF.

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x84017a8e     0x0    mv a3,a0
    0x84017a90     0x2    li a0,0
    0x84017a92     0x4    beqz a2,ffffffff84017aa6 <strlcat+0x18>
    0x84017a94     0x6    add a5,a3,a0
    0x84017a98     0xa    lbu a5,0(a5)
    0x84017a9c     0xe    beqz a5,ffffffff84017aaa <strlcat+0x1c>
    0x84017a9e    0x10    addi a0,a0,1
    0x84017aa0    0x12    bne a2,a0,ffffffff84017a94 <strlcat+0x6>
    0x84017aa4    0x16    j ffffffff84017ae2 <strlcat+0x54>
    0x84017aa6    0x18    mv a0,a2
    0x84017aa8    0x1a    ret
    0x84017aaa    0x1c    bgeu a0,a2,ffffffff84017ae2 <strlcat+0x54>
    0x84017aae    0x20    addi a5,a0,1
    0x84017ab2    0x24    bgeu a5,a2,ffffffff84017adc <strlcat+0x4e>
    0x84017ab6    0x28    addi a6,a5,-1
    0x84017aba    0x2c    sub a4,a5,a0
    0x84017abe    0x30    add a4,a4,a1
    0x84017ac0    0x32    lbu a4,-1(a4)
    0x84017ac4    0x36    beqz a4,ffffffff84017ada <strlcat+0x4c>
    0x84017ac6    0x38    add a6,a3,a5
    0x84017aca    0x3c    sb a4,-1(a6)
    0x84017ace    0x40    addi a4,a5,1
    0x84017ad2    0x44    bgeu a4,a2,ffffffff84017ae4 <strlcat+0x56>
    0x84017ad6    0x48    mv a5,a4
    0x84017ad8    0x4a    j ffffffff84017ab6 <strlcat+0x28>
    0x84017ada    0x4c    mv a0,a6
    0x84017adc    0x4e    add a3,a3,a0
    0x84017ade    0x50    sb zero,0(a3)
    0x84017ae2    0x54    ret
    0x84017ae4    0x56    mv a0,a5
    0x84017ae6    0x58    j ffffffff84017adc <strlcat+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 51 nodes.

Section strlcpy (16 of 301)
===========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 19 instructions.

RVC_FFFT__________FT.

Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x84017a5c     0x0    mv a3,a0
    0x84017a5e     0x2    li a5,1
    0x84017a60     0x4    bgeu a5,a2,ffffffff84017a8a <strlcpy+0x2e>
    0x84017a64     0x8    addi a2,a2,-1
    0x84017a66     0xa    li a5,0
    0x84017a68     0xc    mv a0,a5
    0x84017a6a     0xe    addi a5,a5,1
    0x84017a6c    0x10    add a4,a1,a0
    0x84017a70    0x14    lbu a4,0(a4)
    0x84017a74    0x18    beqz a4,ffffffff84017a82 <strlcpy+0x26>
    0x84017a76    0x1a    add a0,a0,a3
    0x84017a78    0x1c    sb a4,0(a0)
    0x84017a7c    0x20    bne a5,a2,ffffffff84017a68 <strlcpy+0xc>
    0x84017a80    0x24    mv a0,a5
    0x84017a82    0x26    add a3,a3,a0
    0x84017a84    0x28    sb zero,0(a3)
    0x84017a88    0x2c    ret
    0x84017a8a    0x2e    li a0,0
    0x84017a8c    0x30    j ffffffff84017a82 <strlcpy+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 29 nodes.

Section strnlen (17 of 301)
===========================

Deriving specifications
-----------------------

Section `strnlen` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x84017a40     0x0    mv a4,a0
    0x84017a42     0x2    li a0,0
    0x84017a44     0x4    beqz a1,ffffffff84017a58 <strnlen+0x18>
    0x84017a46     0x6    add a5,a4,a0
    0x84017a4a     0xa    lbu a5,0(a5)
    0x84017a4e     0xe    beqz a5,ffffffff84017a56 <strnlen+0x16>
    0x84017a50    0x10    addi a0,a0,1
    0x84017a52    0x12    bne a1,a0,ffffffff84017a46 <strnlen+0x6>
    0x84017a56    0x16    ret
    0x84017a58    0x18    mv a0,a1
    0x84017a5a    0x1a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 20 nodes.

Section copyMRs (18 of 301)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 46 instructions.

RVC_FTT___________FF..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x84014ca2     0x0    mv a5,a0
    0x84014ca4     0x2    mv a0,a4
    0x84014ca6     0x4    beqz a4,ffffffff84014d02 <copyMRs+0x60>
    0x84014ca8     0x6    ld a4,88(a5)
    0x84014caa     0x8    sd a4,88(a2)
    0x84014cac     0xa    li a4,1
    0x84014cae     0xc    bgeu a4,a0,ffffffff84014cf6 <copyMRs+0x54>
    0x84014cb2    0x10    ld a4,96(a5)
    0x84014cb4    0x12    sd a4,96(a2)
    0x84014cb6    0x14    li a4,2
    0x84014cb8    0x16    bgeu a4,a0,ffffffff84014cfa <copyMRs+0x58>
    0x84014cbc    0x1a    ld a4,104(a5)
    0x84014cbe    0x1c    sd a4,104(a2)
    0x84014cc0    0x1e    li a4,3
    0x84014cc2    0x20    bgeu a4,a0,ffffffff84014cfe <copyMRs+0x5c>
    0x84014cc6    0x24    ld a5,112(a5)
    0x84014cc8    0x26    sd a5,112(a2)
    0x84014cca    0x28    li a5,4
    0x84014ccc    0x2a    beqz a3,ffffffff84014d06 <copyMRs+0x64>
    0x84014cce    0x2c    beqz a1,ffffffff84014d0a <copyMRs+0x68>
    0x84014cd0    0x2e    bgeu a5,a0,ffffffff84014d0e <copyMRs+0x6c>
    0x84014cd4    0x32    addi a5,a5,1
    0x84014cd6    0x34    slli a5,a5,0x3
    0x84014cd8    0x36    addi a4,a0,1
    0x84014cdc    0x3a    slli a4,a4,0x3
    0x84014cde    0x3c    add a2,a1,a5
    0x84014ce2    0x40    ld a6,0(a2)
    0x84014ce6    0x44    add a2,a3,a5
    0x84014cea    0x48    sd a6,0(a2)
    0x84014cee    0x4c    addi a5,a5,8
    0x84014cf0    0x4e    bne a5,a4,ffffffff84014cde <copyMRs+0x3c>
    0x84014cf4    0x52    ret
    0x84014cf6    0x54    li a5,1
    0x84014cf8    0x56    j ffffffff84014ccc <copyMRs+0x2a>
    0x84014cfa    0x58    li a5,2
    0x84014cfc    0x5a    j ffffffff84014ccc <copyMRs+0x2a>
    0x84014cfe    0x5c    li a5,3
    0x84014d00    0x5e    j ffffffff84014ccc <copyMRs+0x2a>
    0x84014d02    0x60    mv a5,a4
    0x84014d04    0x62    j ffffffff84014ccc <copyMRs+0x2a>
    0x84014d06    0x64    mv a0,a5
    0x84014d08    0x66    ret
    0x84014d0a    0x68    mv a0,a5
    0x84014d0c    0x6a    ret
    0x84014d0e    0x6c    mv a0,a5
    0x84014d10    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 76 nodes.

Section setExtraBadge (19 of 301)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x84014c00    0x0    addi a2,a2,122
    0x84014c04    0x4    slli a2,a2,0x3
    0x84014c06    0x6    add a0,a0,a2
    0x84014c08    0x8    sd a1,0(a0)
    0x84014c0a    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (20 of 301)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x84014bf4    0x0    addi a1,a1,122
    0x84014bf8    0x4    slli a1,a1,0x3
    0x84014bfa    0x6    add a0,a0,a1
    0x84014bfc    0x8    ld a0,0(a0)
    0x84014bfe    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbReleaseDequeue (21 of 301)
=====================================

Deriving specifications
-----------------------

Section `tcbReleaseDequeue` consists of 18 instructions.

AUIPC.

Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseDequeue`:

    0x84014940     0x0    auipc a4,0x18
    0x84014944     0x4    addi a4,a4,1824 # ffffffff8402d060 <ksReleaseHead>
    0x84014948     0x8    ld a0,0(a4)
    0x8401494a     0xa    ld a5,392(a0)
    0x8401494e     0xe    sd a5,0(a4)
    0x84014950    0x10    beqz a5,ffffffff84014964 <tcbReleaseDequeue+0x24>
    0x84014952    0x12    sd zero,400(a5)
    0x84014956    0x16    ld a5,392(a0)
    0x8401495a    0x1a    beqz a5,ffffffff84014964 <tcbReleaseDequeue+0x24>
    0x8401495c    0x1c    sd zero,400(a5)
    0x84014960    0x20    sd zero,392(a0)
    0x84014964    0x24    ld a5,288(a0)
    0x84014968    0x28    andi a5,a5,-2
    0x8401496a    0x2a    sd a5,288(a0)
    0x8401496e    0x2e    li a5,1
    0x84014970    0x30    auipc a4,0x18
    0x84014974    0x34    sd a5,1736(a4) # ffffffff8402d038 <ksReprogram>
    0x84014978    0x38    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseDequeue` has 33 nodes.

Section tcbReleaseEnqueue (22 of 301)
=====================================

Deriving specifications
-----------------------

Section `tcbReleaseEnqueue` consists of 42 instructions.

ORI..

Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseEnqueue`:

    0x84013c6e     0x0    auipc a4,0x19
    0x84013c72     0x4    ld a4,1010(a4) # ffffffff8402d060 <ksReleaseHead>
    0x84013c76     0x8    beqz a4,ffffffff84013cbc <tcbReleaseEnqueue+0x4e>
    0x84013c78     0xa    ld a5,368(a0)
    0x84013c7c     0xe    ld a3,72(a5)
    0x84013c7e    0x10    slli a3,a3,0x4
    0x84013c80    0x12    add a5,a5,a3
    0x84013c82    0x14    ld a1,88(a5)
    0x84013c84    0x16    li a2,0
    0x84013c86    0x18    ld a5,368(a4)
    0x84013c8a    0x1c    ld a3,72(a5)
    0x84013c8c    0x1e    slli a3,a3,0x4
    0x84013c8e    0x20    add a5,a5,a3
    0x84013c90    0x22    ld a5,88(a5)
    0x84013c92    0x24    bltu a1,a5,ffffffff84013ca2 <tcbReleaseEnqueue+0x34>
    0x84013c96    0x28    ld a5,392(a4)
    0x84013c9a    0x2c    mv a2,a4
    0x84013c9c    0x2e    beqz a5,ffffffff84013cc4 <tcbReleaseEnqueue+0x56>
    0x84013c9e    0x30    mv a4,a5
    0x84013ca0    0x32    j ffffffff84013c86 <tcbReleaseEnqueue+0x18>
    0x84013ca2    0x34    bnez a2,ffffffff84013cc0 <tcbReleaseEnqueue+0x52>
    0x84013ca4    0x36    auipc a5,0x19
    0x84013ca8    0x3a    sd a0,956(a5) # ffffffff8402d060 <ksReleaseHead>
    0x84013cac    0x3e    li a5,1
    0x84013cae    0x40    auipc a3,0x19
    0x84013cb2    0x44    sd a5,906(a3) # ffffffff8402d038 <ksReprogram>
    0x84013cb6    0x48    mv a5,a4
    0x84013cb8    0x4a    mv a4,a2
    0x84013cba    0x4c    j ffffffff84013cc8 <tcbReleaseEnqueue+0x5a>
    0x84013cbc    0x4e    mv a2,a4
    0x84013cbe    0x50    j ffffffff84013ca4 <tcbReleaseEnqueue+0x36>
    0x84013cc0    0x52    mv a5,a4
    0x84013cc2    0x54    mv a4,a2
    0x84013cc4    0x56    sd a0,392(a4)
    0x84013cc8    0x5a    beqz a5,ffffffff84013cce <tcbReleaseEnqueue+0x60>
    0x84013cca    0x5c    sd a0,400(a5)
    0x84013cce    0x60    sd a5,392(a0)
    0x84013cd2    0x64    sd a4,400(a0)
    0x84013cd6    0x68    ld a5,288(a0)
    0x84013cda    0x6c    ori a5,a5,1
    0x84013cde    0x70    sd a5,288(a0)
    0x84013ce2    0x74    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseEnqueue` has 69 nodes.

Section tcbReleaseRemove (23 of 301)
====================================

Deriving specifications
-----------------------

Section `tcbReleaseRemove` consists of 24 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbReleaseRemove`:

    0x84013794     0x0    ld a5,288(a0) # ffffffffe0000120 <ki_end+0x5bfce120>
    0x84013798     0x4    andi a5,a5,1
    0x8401379a     0x6    beqz a5,ffffffff840137ca <tcbReleaseRemove+0x36>
    0x8401379c     0x8    ld a5,400(a0)
    0x840137a0     0xc    beqz a5,ffffffff840137cc <tcbReleaseRemove+0x38>
    0x840137a2     0xe    ld a4,392(a0)
    0x840137a6    0x12    sd a4,392(a5)
    0x840137aa    0x16    ld a5,392(a0)
    0x840137ae    0x1a    beqz a5,ffffffff840137b8 <tcbReleaseRemove+0x24>
    0x840137b0    0x1c    ld a4,400(a0)
    0x840137b4    0x20    sd a4,400(a5)
    0x840137b8    0x24    sd zero,392(a0)
    0x840137bc    0x28    sd zero,400(a0)
    0x840137c0    0x2c    ld a5,288(a0)
    0x840137c4    0x30    andi a5,a5,-2
    0x840137c6    0x32    sd a5,288(a0)
    0x840137ca    0x36    ret
    0x840137cc    0x38    ld a5,392(a0)
    0x840137d0    0x3c    auipc a4,0x1a
    0x840137d4    0x40    sd a5,-1904(a4) # ffffffff8402d060 <ksReleaseHead>
    0x840137d8    0x44    li a5,1
    0x840137da    0x46    auipc a4,0x1a
    0x840137de    0x4a    sd a5,-1954(a4) # ffffffff8402d038 <ksReprogram>
    0x840137e2    0x4e    j ffffffff840137aa <tcbReleaseRemove+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbReleaseRemove` has 45 nodes.

Section tcbEPDequeue (24 of 301)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 19 instructions.

RVC_TTT___________TF..
RVC_FTT_FT________TF.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

2 stack accesses found. Annotated code for `tcbEPDequeue`:

    0x840132f0     0x0    addi sp,sp,-32
    0x840132f2     0x2    mv a5,a0
    0x840132f4     0x4    sd a1,0(sp)           ; stack access
    0x840132f6     0x6    mv a1,a2
    0x840132f8     0x8    ld a4,416(a0)
    0x840132fc     0xc    beqz a4,ffffffff8401331a <tcbEPDequeue+0x2a>
    0x840132fe     0xe    ld a0,0(sp)           ; stack access
    0x84013300    0x10    ld a3,408(a5)
    0x84013304    0x14    sd a3,408(a4)
    0x84013308    0x18    ld a4,408(a5)
    0x8401330c    0x1c    beqz a4,ffffffff84013320 <tcbEPDequeue+0x30>
    0x8401330e    0x1e    ld a5,416(a5)
    0x84013312    0x22    sd a5,416(a4)
    0x84013316    0x26    addi sp,sp,32
    0x84013318    0x28    ret
    0x8401331a    0x2a    ld a0,408(a0)
    0x8401331e    0x2e    j ffffffff84013308 <tcbEPDequeue+0x18>
    0x84013320    0x30    ld a1,416(a5)
    0x84013324    0x34    j ffffffff84013316 <tcbEPDequeue+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 34 nodes.

Section tcbSchedDequeue (25 of 301)
===================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 69 instructions.

SLLI..
SRLI..
SLL.....
XORI..
RVC_TFFFTT___TT___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x84012e6e     0x0    ld a5,288(a0)
    0x84012e72     0x4    srli a5,a5,0x1
    0x84012e74     0x6    andi a5,a5,1
    0x84012e76     0x8    beqz a5,ffffffff84012ee4 <tcbSchedDequeue+0x76>
    0x84012e78     0xa    ld a1,344(a0)
    0x84012e7c     0xe    ld a2,360(a0)
    0x84012e80    0x12    slli a5,a1,0x8
    0x84012e84    0x16    add a5,a5,a2
    0x84012e86    0x18    slli a3,a5,0x4
    0x84012e8a    0x1c    auipc a4,0x9
    0x84012e8e    0x20    addi a4,a4,374 # ffffffff8401c000 <ksReadyQueues>
    0x84012e92    0x24    add a4,a4,a3
    0x84012e94    0x26    ld a7,8(a4)
    0x84012e98    0x2a    ld a3,400(a0)
    0x84012e9c    0x2e    beqz a3,ffffffff84012ee6 <tcbSchedDequeue+0x78>
    0x84012e9e    0x30    slli a2,a5,0x4
    0x84012ea2    0x34    auipc a4,0x9
    0x84012ea6    0x38    addi a4,a4,350 # ffffffff8401c000 <ksReadyQueues>
    0x84012eaa    0x3c    add a4,a4,a2
    0x84012eac    0x3e    ld a6,0(a4)
    0x84012eb0    0x42    ld a4,392(a0)
    0x84012eb4    0x46    sd a4,392(a3)
    0x84012eb8    0x4a    ld a4,392(a0)
    0x84012ebc    0x4e    beqz a4,ffffffff84012f46 <tcbSchedDequeue+0xd8>
    0x84012ebe    0x50    ld a3,400(a0)
    0x84012ec2    0x54    sd a3,400(a4)
    0x84012ec6    0x58    slli a5,a5,0x4
    0x84012ec8    0x5a    auipc a4,0x9
    0x84012ecc    0x5e    addi a4,a4,312 # ffffffff8401c000 <ksReadyQueues>
    0x84012ed0    0x62    add a5,a5,a4
    0x84012ed2    0x64    sd a6,0(a5)
    0x84012ed6    0x68    sd a7,8(a5)
    0x84012eda    0x6c    ld a5,288(a0)
    0x84012ede    0x70    andi a5,a5,-3
    0x84012ee0    0x72    sd a5,288(a0)
    0x84012ee4    0x76    ret
    0x84012ee6    0x78    ld a6,392(a0)
    0x84012eea    0x7c    bnez a6,ffffffff84012f42 <tcbSchedDequeue+0xd4>
    0x84012eee    0x80    srli t1,a2,0x6
    0x84012ef2    0x84    li a4,3
    0x84012ef4    0x86    sub a3,a4,t1
    0x84012ef8    0x8a    li a4,1
    0x84012efa    0x8c    sll a2,a4,a2
    0x84012efe    0x90    not a2,a2
    0x84012f02    0x94    slli a4,a1,0x2
    0x84012f06    0x98    add a4,a4,a3
    0x84012f08    0x9a    slli a4,a4,0x3
    0x84012f0a    0x9c    auipc a3,0x8
    0x84012f0e    0xa0    addi a3,a3,-1802 # ffffffff8401a800 <riscvKSASIDTable>
    0x84012f12    0xa4    add a4,a4,a3
    0x84012f14    0xa6    ld a3,1224(a4)
    0x84012f18    0xaa    and a2,a2,a3
    0x84012f1a    0xac    sd a2,1224(a4)
    0x84012f1e    0xb0    bnez a2,ffffffff84012eb8 <tcbSchedDequeue+0x4a>
    0x84012f20    0xb2    slli a1,a1,0x3
    0x84012f22    0xb4    auipc a4,0x8
    0x84012f26    0xb8    addi a4,a4,-1826 # ffffffff8401a800 <riscvKSASIDTable>
    0x84012f2a    0xbc    add a1,a1,a4
    0x84012f2c    0xbe    li a4,1
    0x84012f2e    0xc0    sll a4,a4,t1
    0x84012f32    0xc4    not a4,a4
    0x84012f36    0xc8    ld a3,1096(a1)
    0x84012f3a    0xcc    and a4,a4,a3
    0x84012f3c    0xce    sd a4,1096(a1)
    0x84012f40    0xd2    j ffffffff84012eb8 <tcbSchedDequeue+0x4a>
    0x84012f42    0xd4    mv a4,a6
    0x84012f44    0xd6    j ffffffff84012ebe <tcbSchedDequeue+0x50>
    0x84012f46    0xd8    ld a7,400(a0)
    0x84012f4a    0xdc    j ffffffff84012ec6 <tcbSchedDequeue+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 101 nodes.

Section tcbSchedAppend (26 of 301)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 50 instructions.

RVC_TFFTT____T____TF..
OR.....
RVC_TFFTFT___T____TF.
RVC_TFFFTT___TF___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x84012dd4     0x0    ld a5,288(a0)
    0x84012dd8     0x4    srli a5,a5,0x1
    0x84012dda     0x6    andi a5,a5,1
    0x84012ddc     0x8    bnez a5,ffffffff84012e28 <tcbSchedAppend+0x54>
    0x84012dde     0xa    ld a3,344(a0)
    0x84012de2     0xe    ld a1,360(a0)
    0x84012de6    0x12    slli a5,a3,0x8
    0x84012dea    0x16    add a5,a5,a1
    0x84012dec    0x18    slli a2,a5,0x4
    0x84012df0    0x1c    auipc a4,0x9
    0x84012df4    0x20    addi a4,a4,528 # ffffffff8401c000 <ksReadyQueues>
    0x84012df8    0x24    add a4,a4,a2
    0x84012dfa    0x26    ld a2,0(a4)
    0x84012dfc    0x28    ld a4,8(a4)
    0x84012dfe    0x2a    beqz a2,ffffffff84012e2a <tcbSchedAppend+0x56>
    0x84012e00    0x2c    sd a0,392(a4)
    0x84012e04    0x30    sd a4,400(a0)
    0x84012e08    0x34    sd zero,392(a0)
    0x84012e0c    0x38    slli a5,a5,0x4
    0x84012e0e    0x3a    auipc a4,0x9
    0x84012e12    0x3e    addi a4,a4,498 # ffffffff8401c000 <ksReadyQueues>
    0x84012e16    0x42    add a5,a5,a4
    0x84012e18    0x44    sd a2,0(a5)
    0x84012e1a    0x46    sd a0,8(a5)
    0x84012e1c    0x48    ld a5,288(a0)
    0x84012e20    0x4c    ori a5,a5,2
    0x84012e24    0x50    sd a5,288(a0)
    0x84012e28    0x54    ret
    0x84012e2a    0x56    srli t1,a1,0x6
    0x84012e2e    0x5a    li t3,3
    0x84012e30    0x5c    sub t3,t3,t1
    0x84012e34    0x60    auipc a6,0x8
    0x84012e38    0x64    addi a6,a6,-1588 # ffffffff8401a800 <riscvKSASIDTable>
    0x84012e3c    0x68    slli a7,a3,0x3
    0x84012e40    0x6c    add a7,a7,a6
    0x84012e42    0x6e    li a2,1
    0x84012e44    0x70    sll t1,a2,t1
    0x84012e48    0x74    ld t4,1096(a7)
    0x84012e4c    0x78    or t1,t4,t1
    0x84012e50    0x7c    sd t1,1096(a7)
    0x84012e54    0x80    slli a3,a3,0x2
    0x84012e56    0x82    add a3,a3,t3
    0x84012e58    0x84    slli a3,a3,0x3
    0x84012e5a    0x86    add a3,a3,a6
    0x84012e5c    0x88    sll a2,a2,a1
    0x84012e60    0x8c    ld a1,1224(a3)
    0x84012e64    0x90    or a2,a2,a1
    0x84012e66    0x92    sd a2,1224(a3)
    0x84012e6a    0x96    mv a2,a0
    0x84012e6c    0x98    j ffffffff84012e04 <tcbSchedAppend+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
50 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 71 nodes.

Section tcbSchedEnqueue (27 of 301)
===================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 50 instructions.

RVC_TFFTT____FT___TF.

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x84012860     0x0    ld a5,288(a0)
    0x84012864     0x4    srli a5,a5,0x1
    0x84012866     0x6    andi a5,a5,1
    0x84012868     0x8    bnez a5,ffffffff840128b4 <tcbSchedEnqueue+0x54>
    0x8401286a     0xa    ld a3,344(a0)
    0x8401286e     0xe    ld a6,360(a0)
    0x84012872    0x12    slli a5,a3,0x8
    0x84012876    0x16    add a5,a5,a6
    0x84012878    0x18    slli a2,a5,0x4
    0x8401287c    0x1c    auipc a4,0x9
    0x84012880    0x20    addi a4,a4,1924 # ffffffff8401c000 <ksReadyQueues>
    0x84012884    0x24    add a4,a4,a2
    0x84012886    0x26    ld a1,0(a4)
    0x84012888    0x28    ld a2,8(a4)
    0x8401288a    0x2a    beqz a2,ffffffff840128b6 <tcbSchedEnqueue+0x56>
    0x8401288c    0x2c    sd a0,400(a1) # fffffffff8000190 <ki_end+0x73fce190>
    0x84012890    0x30    sd zero,400(a0)
    0x84012894    0x34    sd a1,392(a0)
    0x84012898    0x38    slli a5,a5,0x4
    0x8401289a    0x3a    auipc a4,0x9
    0x8401289e    0x3e    addi a4,a4,1894 # ffffffff8401c000 <ksReadyQueues>
    0x840128a2    0x42    add a5,a5,a4
    0x840128a4    0x44    sd a0,0(a5)
    0x840128a6    0x46    sd a2,8(a5)
    0x840128a8    0x48    ld a5,288(a0)
    0x840128ac    0x4c    ori a5,a5,2
    0x840128b0    0x50    sd a5,288(a0)
    0x840128b4    0x54    ret
    0x840128b6    0x56    srli t1,a6,0x6
    0x840128ba    0x5a    li t3,3
    0x840128bc    0x5c    sub t3,t3,t1
    0x840128c0    0x60    auipc a2,0x8
    0x840128c4    0x64    addi a2,a2,-192 # ffffffff8401a800 <riscvKSASIDTable>
    0x840128c8    0x68    slli a7,a3,0x3
    0x840128cc    0x6c    add a7,a7,a2
    0x840128ce    0x6e    li a4,1
    0x840128d0    0x70    sll t1,a4,t1
    0x840128d4    0x74    ld t4,1096(a7)
    0x840128d8    0x78    or t1,t4,t1
    0x840128dc    0x7c    sd t1,1096(a7)
    0x840128e0    0x80    slli a3,a3,0x2
    0x840128e2    0x82    add a3,a3,t3
    0x840128e4    0x84    slli a3,a3,0x3
    0x840128e6    0x86    add a3,a3,a2
    0x840128e8    0x88    sll a4,a4,a6
    0x840128ec    0x8c    ld a6,1224(a3)
    0x840128f0    0x90    or a4,a4,a6
    0x840128f4    0x94    sd a4,1224(a3)
    0x840128f8    0x98    mv a2,a0
    0x840128fa    0x9a    j ffffffff84012890 <tcbSchedEnqueue+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
50 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 71 nodes.

Section schedContext_cancelYieldTo (28 of 301)
==============================================

Deriving specifications
-----------------------

Section `schedContext_cancelYieldTo` consists of 6 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_cancelYieldTo`:

    0x840127fa     0x0    beqz a0,ffffffff8401280a <schedContext_cancelYieldTo+0x10>
    0x840127fc     0x2    ld a5,376(a0)
    0x84012800     0x6    beqz a5,ffffffff8401280a <schedContext_cancelYieldTo+0x10>
    0x84012802     0x8    sd zero,56(a5)
    0x84012806     0xc    sd zero,376(a0)
    0x8401280a    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_cancelYieldTo` has 14 nodes.

Section schedContext_updateConsumed (29 of 301)
===============================================

Deriving specifications
-----------------------

Section `schedContext_updateConsumed` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_updateConsumed`:

    0x840125da    0x0    mv a5,a0
    0x840125dc    0x2    ld a0,8(a0)
    0x840125de    0x4    sd zero,8(a5) # fffffffff8000008 <ki_end+0x73fce008>
    0x840125e2    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_updateConsumed` has 7 nodes.

Section schedContext_unbindNtfn (30 of 301)
===========================================

Deriving specifications
-----------------------

Section `schedContext_unbindNtfn` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_unbindNtfn`:

    0x840125c6     0x0    beqz a0,ffffffff840125d8 <schedContext_unbindNtfn+0x12>
    0x840125c8     0x2    ld a4,40(a0)
    0x840125ca     0x4    beqz a4,ffffffff840125d8 <schedContext_unbindNtfn+0x12>
    0x840125cc     0x6    ld a5,32(a4)
    0x840125ce     0x8    srli a5,a5,0x27
    0x840125d0     0xa    slli a5,a5,0x27
    0x840125d2     0xc    sd a5,32(a4)
    0x840125d4     0xe    sd zero,40(a0) # 1028 <KERNEL_OFFSET-0xfffffffeffffefd8>
    0x840125d8    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindNtfn` has 18 nodes.

Section schedContext_bindNtfn (31 of 301)
=========================================

Deriving specifications
-----------------------

Section `schedContext_bindNtfn` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `schedContext_bindNtfn`:

    0x840125b0     0x0    ld a4,32(a1)
    0x840125b2     0x2    li a5,-1
    0x840125b4     0x4    slli a3,a5,0x27
    0x840125b8     0x8    and a4,a4,a3
    0x840125ba     0xa    srli a5,a5,0x19
    0x840125bc     0xc    and a5,a5,a0
    0x840125be     0xe    or a5,a5,a4
    0x840125c0    0x10    sd a5,32(a1)
    0x840125c2    0x12    sd a1,40(a0)
    0x840125c4    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_bindNtfn` has 14 nodes.

Section updateCapData (32 of 301)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 58 instructions.

BEQ..

Stack analysis
---------------

18 stack accesses found. Annotated code for `updateCapData`:

    0x84012412     0x0    addi sp,sp,-32
    0x84012414     0x2    srli a5,a2,0x3b
    0x84012418     0x6    andi a4,a5,1
    0x8401241c     0xa    bnez a4,ffffffff84012436 <updateCapData+0x24>
    0x8401241e     0xc    li a4,6
    0x84012420     0xe    beq a5,a4,ffffffff84012452 <updateCapData+0x40>
    0x84012424    0x12    li a4,10
    0x84012426    0x14    beq a5,a4,ffffffff84012462 <updateCapData+0x50>
    0x8401242a    0x18    li a4,4
    0x8401242c    0x1a    beq a5,a4,ffffffff84012442 <updateCapData+0x30>
    0x84012430    0x1e    sd a2,16(sp)          ; stack access
    0x84012432    0x20    sd a3,24(sp)          ; stack access
    0x84012434    0x22    j ffffffff8401243a <updateCapData+0x28>
    0x84012436    0x24    sd a2,16(sp)          ; stack access
    0x84012438    0x26    sd a3,24(sp)          ; stack access
    0x8401243a    0x28    ld a0,16(sp)          ; stack access
    0x8401243c    0x2a    ld a1,24(sp)          ; stack access
    0x8401243e    0x2c    addi sp,sp,32
    0x84012440    0x2e    ret
    0x84012442    0x30    or a3,a3,a0
    0x84012444    0x32    bnez a3,ffffffff8401244c <updateCapData+0x3a>
    0x84012446    0x34    sd a2,16(sp)          ; stack access
    0x84012448    0x36    sd a1,24(sp)          ; stack access
    0x8401244a    0x38    j ffffffff8401243a <updateCapData+0x28>
    0x8401244c    0x3a    sd zero,16(sp)        ; stack access
    0x8401244e    0x3c    sd zero,24(sp)        ; stack access
    0x84012450    0x3e    j ffffffff8401243a <updateCapData+0x28>
    0x84012452    0x40    or a3,a3,a0
    0x84012454    0x42    bnez a3,ffffffff8401245c <updateCapData+0x4a>
    0x84012456    0x44    sd a2,16(sp)          ; stack access
    0x84012458    0x46    sd a1,24(sp)          ; stack access
    0x8401245a    0x48    j ffffffff8401243a <updateCapData+0x28>
    0x8401245c    0x4a    sd zero,16(sp)        ; stack access
    0x8401245e    0x4c    sd zero,24(sp)        ; stack access
    0x84012460    0x4e    j ffffffff8401243a <updateCapData+0x28>
    0x84012462    0x50    andi a4,a1,63
    0x84012466    0x54    srli a5,a2,0x2f
    0x8401246a    0x58    andi a5,a5,63
    0x8401246e    0x5c    add a5,a5,a4
    0x84012470    0x5e    li a3,64
    0x84012474    0x62    bgeu a3,a5,ffffffff8401247e <updateCapData+0x6c>
    0x84012478    0x66    sd zero,16(sp)        ; stack access
    0x8401247a    0x68    sd zero,24(sp)        ; stack access
    0x8401247c    0x6a    j ffffffff8401243a <updateCapData+0x28>
    0x8401247e    0x6c    li a5,-63
    0x84012482    0x70    slli a5,a5,0x35
    0x84012484    0x72    addi a5,a5,-1
    0x84012486    0x74    and a2,a2,a5
    0x84012488    0x76    slli a5,a4,0x35
    0x8401248c    0x7a    or a2,a2,a5
    0x8401248e    0x7c    sd a2,16(sp)          ; stack access
    0x84012490    0x7e    li a5,-1
    0x84012492    0x80    sll a5,a5,a4
    0x84012496    0x84    not a5,a5
    0x8401249a    0x88    srli a1,a1,0x6
    0x8401249c    0x8a    and a1,a1,a5
    0x8401249e    0x8c    sd a1,24(sp)          ; stack access
    0x840124a0    0x8e    j ffffffff8401243a <updateCapData+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 91 nodes.

Section hasCancelSendRights (33 of 301)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 20 instructions.

RVC_FFFFFFFT______FT.
AND.....
RVC_TFFFTT___FF___FT..
SLTIU..

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x84011e4e     0x0    addi sp,sp,-16
    0x84011e50     0x2    srli a4,a0,0x3b
    0x84011e54     0x6    li a5,4
    0x84011e56     0x8    beq a4,a5,ffffffff84011e60 <hasCancelSendRights+0x12>
    0x84011e5a     0xc    li a0,0
    0x84011e5c     0xe    addi sp,sp,16
    0x84011e5e    0x10    ret
    0x84011e60    0x12    li a4,3
    0x84011e62    0x14    slli a4,a4,0x37
    0x84011e64    0x16    and a3,a0,a4
    0x84011e68    0x1a    li a5,0
    0x84011e6a    0x1c    beq a3,a4,ffffffff84011e72 <hasCancelSendRights+0x24>
    0x84011e6e    0x20    mv a0,a5
    0x84011e70    0x22    j ffffffff84011e5c <hasCancelSendRights+0xe>
    0x84011e72    0x24    li a5,3
    0x84011e74    0x26    slli a5,a5,0x39
    0x84011e76    0x28    and a0,a0,a5
    0x84011e78    0x2a    sub a0,a0,a5
    0x84011e7a    0x2c    seqz a5,a0
    0x84011e7e    0x30    j ffffffff84011e6e <hasCancelSendRights+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 25 nodes.

Section bindNotification (34 of 301)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84011de6     0x0    ld a4,24(a1)
    0x84011de8     0x2    li a5,-1
    0x84011dea     0x4    slli a3,a5,0x27
    0x84011dee     0x8    and a4,a4,a3
    0x84011df0     0xa    srli a5,a5,0x19
    0x84011df2     0xc    and a5,a5,a0
    0x84011df4     0xe    or a5,a5,a4
    0x84011df6    0x10    sd a5,24(a1)
    0x84011df8    0x12    sd a1,304(a0)
    0x84011dfc    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (35 of 301)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x84011dd2     0x0    ld a4,304(a0)
    0x84011dd6     0x4    beqz a4,ffffffff84011de4 <unbindNotification+0x12>
    0x84011dd8     0x6    ld a5,24(a4)
    0x84011dda     0x8    srli a5,a5,0x27
    0x84011ddc     0xa    slli a5,a5,0x27
    0x84011dde     0xc    sd a5,24(a4)
    0x84011de0     0xe    sd zero,304(a0)
    0x84011de4    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (36 of 301)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 16 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x84011dac     0x0    ld a4,24(a0)
    0x84011dae     0x2    slli a5,a4,0x19
    0x84011db2     0x6    srli a5,a5,0x19
    0x84011db4     0x8    srli a3,a4,0x26
    0x84011db8     0xc    andi a3,a3,1
    0x84011dba     0xe    beqz a3,ffffffff84011dce <unbindMaybeNotification+0x22>
    0x84011dbc    0x10    li a3,-1
    0x84011dbe    0x12    slli a3,a3,0x27
    0x84011dc0    0x14    or a5,a5,a3
    0x84011dc2    0x16    srli a4,a4,0x27
    0x84011dc4    0x18    slli a4,a4,0x27
    0x84011dc6    0x1a    sd a4,24(a0)
    0x84011dc8    0x1c    sd zero,304(a5) # fffffffff8000130 <ki_end+0x73fce130>
    0x84011dcc    0x20    ret
    0x84011dce    0x22    beqz a5,ffffffff84011dcc <unbindMaybeNotification+0x20>
    0x84011dd0    0x24    j ffffffff84011dc2 <unbindMaybeNotification+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 24 nodes.

Section setIRQState (37 of 301)
===============================

Deriving specifications
-----------------------

Section `setIRQState` consists of 35 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5

LUI.
RVC_FTF___________FF..
RVC_TTF___________FF..

Stack analysis
---------------

No stack accesses found. Code for `setIRQState`:

    0x84011c7a     0x0    slli a4,a1,0x3
    0x84011c7e     0x4    auipc a5,0x9
    0x84011c82     0x8    addi a5,a5,-1150 # ffffffff8401a800 <riscvKSASIDTable>
    0x84011c86     0xc    add a5,a5,a4
    0x84011c88     0xe    sd a0,1752(a5)
    0x84011c8c    0x12    li a5,54
    0x84011c90    0x16    bne a1,a5,ffffffff84011caa <setIRQState+0x30>
    0x84011c94    0x1a    bnez a0,ffffffff84011ca0 <setIRQState+0x26>
    0x84011c96    0x1c    li a5,32
    0x84011c9a    0x20    csrrc a5,sie,a5
    0x84011c9e    0x24    ret
    0x84011ca0    0x26    li a5,32
    0x84011ca4    0x2a    csrrs a5,sie,a5
    0x84011ca8    0x2e    ret
    0x84011caa    0x30    andi a3,a1,31
    0x84011cae    0x34    srli a1,a1,0x5
    0x84011cb0    0x36    slli a1,a1,0x2
    0x84011cb2    0x38    lui a4,0xcc002
    0x84011cb6    0x3c    addi a4,a4,256 # ffffffffcc002100 <ki_end+0x47fd0100>
    0x84011cba    0x40    add a1,a1,a4
    0x84011cbc    0x42    lw a5,0(a1)
    0x84011cbe    0x44    sext.w a4,a5
    0x84011cc2    0x48    bnez a0,ffffffff84011cd6 <setIRQState+0x5c>
    0x84011cc4    0x4a    li a5,1
    0x84011cc6    0x4c    sll a5,a5,a3
    0x84011cca    0x50    not a5,a5
    0x84011cce    0x54    and a5,a5,a4
    0x84011cd0    0x56    sext.w a5,a5
    0x84011cd2    0x58    sw a5,0(a1)
    0x84011cd4    0x5a    ret
    0x84011cd6    0x5c    li a5,1
    0x84011cd8    0x5e    sll a5,a5,a3
    0x84011cdc    0x62    or a5,a5,a4
    0x84011cde    0x64    sext.w a5,a5
    0x84011ce0    0x66    j ffffffff84011cd2 <setIRQState+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 49 nodes.

Section isIRQActive (38 of 301)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 7 instructions.

SLTU.....

Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x84011c62     0x0    slli a5,a0,0x3
    0x84011c66     0x4    auipc a0,0x9
    0x84011c6a     0x8    addi a0,a0,-1126 # ffffffff8401a800 <riscvKSASIDTable>
    0x84011c6e     0xc    add a0,a0,a5
    0x84011c70     0xe    ld a0,1752(a0)
    0x84011c74    0x12    snez a0,a0
    0x84011c78    0x16    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 9 nodes.

Section invokeIRQHandler_AckIRQ (39 of 301)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x84011c58    0x0    sext.w a0,a0
    0x84011c5a    0x2    lui a5,0xcc202
    0x84011c5e    0x6    sw a0,4(a5)
    0x84011c60    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 6 nodes.

Section replyFromKernel_success_empty (40 of 301)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x84011c4e    0x0    sd zero,72(a0)
    0x84011c52    0x4    sd zero,80(a0)
    0x84011c56    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (41 of 301)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x84011c3a     0x0    ld a3,1008(a1)
    0x84011c3e     0x4    ld a4,1016(a1)
    0x84011c42     0x8    ld a2,1000(a1)
    0x84011c46     0xc    sd a2,0(a0)           ; stack access
    0x84011c48     0xe    sd a3,8(a0)           ; stack access
    0x84011c4a    0x10    sd a4,16(a0)          ; stack access
    0x84011c4c    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (42 of 301)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x84011bc8     0x0    ld a0,0(a0)
    0x84011bca     0x2    srli a0,a0,0x3b
    0x84011bcc     0x4    bnez a0,ffffffff84011bd0 <ensureEmptySlot+0x8>
    0x84011bce     0x6    ret
    0x84011bd0     0x8    li a5,8
    0x84011bd2     0xa    auipc a4,0x9
    0x84011bd6     0xe    sd a5,110(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84011bda    0x12    li a0,3
    0x84011bdc    0x14    j ffffffff84011bce <ensureEmptySlot+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 14 nodes.

Section insertNewCap (43 of 301)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 42 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `insertNewCap`:

    0x84011b6c     0x0    addi sp,sp,-16
    0x84011b6e     0x2    sd a2,0(sp)           ; stack access
    0x84011b70     0x4    sd a3,8(sp)           ; stack access
    0x84011b72     0x6    ld a4,24(a0)
    0x84011b74     0x8    lui a5,0xf8000
    0x84011b78     0xc    srli a5,a5,0x19
    0x84011b7a     0xe    and a5,a5,a4
    0x84011b7c    0x10    srli a4,a4,0x26
    0x84011b7e    0x12    andi a4,a4,1
    0x84011b80    0x14    beqz a4,ffffffff84011bb2 <insertNewCap+0x46>
    0x84011b82    0x16    li a4,-1
    0x84011b84    0x18    slli a4,a4,0x27
    0x84011b86    0x1a    or a4,a4,a5
    0x84011b88    0x1c    sd a2,0(a1)
    0x84011b8a    0x1e    ld a3,8(sp)           ; stack access
    0x84011b8c    0x20    sd a3,8(a1)
    0x84011b8e    0x22    sd a0,16(a1)
    0x84011b90    0x24    ori a5,a5,3
    0x84011b94    0x28    sd a5,24(a1)
    0x84011b96    0x2a    sd a1,16(a4)
    0x84011b98    0x2c    ld a5,24(a0)
    0x84011b9a    0x2e    li a4,-1
    0x84011b9c    0x30    slli a4,a4,0x27
    0x84011b9e    0x32    addi a4,a4,3
    0x84011ba0    0x34    and a5,a5,a4
    0x84011ba2    0x36    lui a4,0xf8000
    0x84011ba6    0x3a    srli a4,a4,0x19
    0x84011ba8    0x3c    and a1,a1,a4
    0x84011baa    0x3e    or a1,a1,a5
    0x84011bac    0x40    sd a1,24(a0)
    0x84011bae    0x42    addi sp,sp,16
    0x84011bb0    0x44    ret
    0x84011bb2    0x46    ld a4,0(sp)           ; stack access
    0x84011bb4    0x48    sd a4,0(a1)
    0x84011bb6    0x4a    ld a4,8(sp)           ; stack access
    0x84011bb8    0x4c    sd a4,8(a1)
    0x84011bba    0x4e    sd a0,16(a1)
    0x84011bbc    0x50    ori a4,a5,3
    0x84011bc0    0x54    sd a4,24(a1)
    0x84011bc2    0x56    beqz a5,ffffffff84011b98 <insertNewCap+0x2c>
    0x84011bc4    0x58    mv a4,a5
    0x84011bc6    0x5a    j ffffffff84011b96 <insertNewCap+0x2a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 64 nodes.

Section cteSwap (44 of 301)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 65 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x84011a78     0x0    addi sp,sp,-32
    0x84011a7a     0x2    sd a0,16(sp)          ; stack access
    0x84011a7c     0x4    sd a1,24(sp)          ; stack access
    0x84011a7e     0x6    sd a3,0(sp)           ; stack access
    0x84011a80     0x8    sd a4,8(sp)           ; stack access
    0x84011a82     0xa    sd a3,0(a2)
    0x84011a84     0xc    sd a4,8(a2)
    0x84011a86     0xe    sd a0,0(a5)
    0x84011a88    0x10    sd a1,8(a5)
    0x84011a8a    0x12    ld a0,16(a2)
    0x84011a8c    0x14    ld a1,24(a2)
    0x84011a8e    0x16    beqz a0,ffffffff84011aa6 <cteSwap+0x2e>
    0x84011a90    0x18    ld a4,24(a0)
    0x84011a92    0x1a    li a3,-1
    0x84011a94    0x1c    slli a3,a3,0x27
    0x84011a96    0x1e    addi a3,a3,3
    0x84011a98    0x20    and a4,a4,a3
    0x84011a9a    0x22    lui a3,0xf8000
    0x84011a9e    0x26    srli a3,a3,0x19
    0x84011aa0    0x28    and a3,a3,a5
    0x84011aa2    0x2a    or a4,a4,a3
    0x84011aa4    0x2c    sd a4,24(a0)
    0x84011aa6    0x2e    lui a4,0xf8000
    0x84011aaa    0x32    srli a4,a4,0x19
    0x84011aac    0x34    and a4,a4,a1
    0x84011aae    0x36    srli a3,a1,0x26
    0x84011ab2    0x3a    andi a3,a3,1
    0x84011ab4    0x3c    beqz a3,ffffffff84011afc <cteSwap+0x84>
    0x84011ab6    0x3e    li a3,-1
    0x84011ab8    0x40    slli a3,a3,0x27
    0x84011aba    0x42    or a4,a4,a3
    0x84011abc    0x44    sd a5,16(a4)
    0x84011abe    0x46    ld a3,16(a5)
    0x84011ac0    0x48    ld a4,24(a5)
    0x84011ac2    0x4a    sd a3,16(a2)
    0x84011ac4    0x4c    sd a4,24(a2)
    0x84011ac6    0x4e    sd a0,16(a5)
    0x84011ac8    0x50    sd a1,24(a5)
    0x84011aca    0x52    beqz a3,ffffffff84011ae2 <cteSwap+0x6a>
    0x84011acc    0x54    ld a5,24(a3)
    0x84011ace    0x56    li a1,-1
    0x84011ad0    0x58    slli a1,a1,0x27
    0x84011ad2    0x5a    addi a1,a1,3
    0x84011ad4    0x5c    and a5,a5,a1
    0x84011ad6    0x5e    lui a1,0xf8000
    0x84011ada    0x62    srli a1,a1,0x19
    0x84011adc    0x64    and a1,a1,a2
    0x84011ade    0x66    or a5,a5,a1
    0x84011ae0    0x68    sd a5,24(a3)
    0x84011ae2    0x6a    lui a5,0xf8000
    0x84011ae6    0x6e    srli a5,a5,0x19
    0x84011ae8    0x70    and a5,a5,a4
    0x84011aea    0x72    srli a4,a4,0x26
    0x84011aec    0x74    andi a4,a4,1
    0x84011aee    0x76    beqz a4,ffffffff84011b00 <cteSwap+0x88>
    0x84011af0    0x78    li a4,-1
    0x84011af2    0x7a    slli a4,a4,0x27
    0x84011af4    0x7c    or a5,a5,a4
    0x84011af6    0x7e    sd a2,16(a5)
    0x84011af8    0x80    addi sp,sp,32
    0x84011afa    0x82    ret
    0x84011afc    0x84    beqz a4,ffffffff84011abe <cteSwap+0x46>
    0x84011afe    0x86    j ffffffff84011abc <cteSwap+0x44>
    0x84011b00    0x88    beqz a5,ffffffff84011af8 <cteSwap+0x80>
    0x84011b02    0x8a    j ffffffff84011af6 <cteSwap+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 100 nodes.

Section cteMove (45 of 301)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 38 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x84011a10     0x0    addi sp,sp,-16
    0x84011a12     0x2    sd a0,0(sp)           ; stack access
    0x84011a14     0x4    sd a1,8(sp)           ; stack access
    0x84011a16     0x6    ld a4,16(a2)
    0x84011a18     0x8    ld a5,24(a2)
    0x84011a1a     0xa    sd a0,0(a3)
    0x84011a1c     0xc    sd a1,8(a3)
    0x84011a1e     0xe    sd zero,0(a2)
    0x84011a22    0x12    sd zero,8(a2)
    0x84011a26    0x16    sd a4,16(a3)
    0x84011a28    0x18    sd a5,24(a3)
    0x84011a2a    0x1a    sd zero,16(a2)
    0x84011a2e    0x1e    sd zero,24(a2)
    0x84011a32    0x22    beqz a4,ffffffff84011a4a <cteMove+0x3a>
    0x84011a34    0x24    ld a2,24(a4)
    0x84011a36    0x26    li a1,-1
    0x84011a38    0x28    slli a1,a1,0x27
    0x84011a3a    0x2a    addi a1,a1,3
    0x84011a3c    0x2c    and a2,a2,a1
    0x84011a3e    0x2e    lui a1,0xf8000
    0x84011a42    0x32    srli a1,a1,0x19
    0x84011a44    0x34    and a1,a1,a3
    0x84011a46    0x36    or a2,a2,a1
    0x84011a48    0x38    sd a2,24(a4)
    0x84011a4a    0x3a    lui a4,0xf8000
    0x84011a4e    0x3e    srli a4,a4,0x19
    0x84011a50    0x40    and a4,a4,a5
    0x84011a52    0x42    srli a5,a5,0x26
    0x84011a54    0x44    andi a5,a5,1
    0x84011a56    0x46    beqz a5,ffffffff84011a64 <cteMove+0x54>
    0x84011a58    0x48    li a5,-1
    0x84011a5a    0x4a    slli a5,a5,0x27
    0x84011a5c    0x4c    or a4,a4,a5
    0x84011a5e    0x4e    sd a3,16(a4)
    0x84011a60    0x50    addi sp,sp,16
    0x84011a62    0x52    ret
    0x84011a64    0x54    beqz a4,ffffffff84011a60 <cteMove+0x50>
    0x84011a66    0x56    j ffffffff84011a5e <cteMove+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 60 nodes.

Section cteInsert (46 of 301)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 108 instructions.

RVC_TFFFFFT__FT___TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x840118d4      0x0    addi sp,sp,-16
    0x840118d6      0x2    sd a0,0(sp)           ; stack access
    0x840118d8      0x4    sd a1,8(sp)           ; stack access
    0x840118da      0x6    ld a5,24(a2)
    0x840118dc      0x8    ld a7,0(a2)
    0x840118e0      0xc    ld t3,8(a2)
    0x840118e4     0x10    srli a4,a0,0x3b
    0x840118e8     0x14    andi a6,a4,1
    0x840118ec     0x18    bnez a6,ffffffff84011972 <cteInsert+0x9e>
    0x840118f0     0x1c    li t1,6
    0x840118f2     0x1e    beq a4,t1,ffffffff84011968 <cteInsert+0x94>
    0x840118f6     0x22    bltu t1,a4,ffffffff84011956 <cteInsert+0x82>
    0x840118fa     0x26    li t1,2
    0x840118fc     0x28    beq a4,t1,ffffffff8401199a <cteInsert+0xc6>
    0x84011900     0x2c    li a0,4
    0x84011902     0x2e    bne a4,a0,ffffffff8401190e <cteInsert+0x3a>
    0x84011906     0x32    sub a6,t3,a1
    0x8401190a     0x36    snez a6,a6
    0x8401190e     0x3a    mv t1,a2
    0x84011910     0x3c    slli a4,a6,0x1
    0x84011914     0x40    andi a5,a5,-4
    0x84011916     0x42    or a5,a5,a4
    0x84011918     0x44    or a5,a5,a6
    0x8401191c     0x48    ld a4,0(sp)           ; stack access
    0x8401191e     0x4a    sd a4,0(a3)
    0x84011920     0x4c    ld a4,8(sp)           ; stack access
    0x84011922     0x4e    sd a4,8(a3)
    0x84011924     0x50    sd t1,16(a3)
    0x84011928     0x54    sd a5,24(a3)
    0x8401192a     0x56    ld a1,24(a2)
    0x8401192c     0x58    li a4,-1
    0x8401192e     0x5a    slli a4,a4,0x27
    0x84011930     0x5c    addi a4,a4,3
    0x84011932     0x5e    and a1,a1,a4
    0x84011934     0x60    lui a4,0xf8000
    0x84011938     0x64    srli a4,a4,0x19
    0x8401193a     0x66    and a0,a3,a4
    0x8401193e     0x6a    or a1,a1,a0
    0x84011940     0x6c    sd a1,24(a2)
    0x84011942     0x6e    and a4,a4,a5
    0x84011944     0x70    srli a5,a5,0x26
    0x84011946     0x72    andi a5,a5,1
    0x84011948     0x74    beqz a5,ffffffff84011996 <cteInsert+0xc2>
    0x8401194a     0x76    li a5,-1
    0x8401194c     0x78    slli a5,a5,0x27
    0x8401194e     0x7a    or a4,a4,a5
    0x84011950     0x7c    sd a3,16(a4)
    0x84011952     0x7e    addi sp,sp,16
    0x84011954     0x80    ret
    0x84011956     0x82    li a1,16
    0x84011958     0x84    bne a4,a1,ffffffff8401190e <cteInsert+0x3a>
    0x8401195c     0x88    srli a6,a7,0x3b
    0x84011960     0x8c    addi a6,a6,-14
    0x84011962     0x8e    seqz a6,a6
    0x84011966     0x92    j ffffffff8401190e <cteInsert+0x3a>
    0x84011968     0x94    sub a6,t3,a1
    0x8401196c     0x98    snez a6,a6
    0x84011970     0x9c    j ffffffff8401190e <cteInsert+0x3a>
    0x84011972     0x9e    mv t1,a2
    0x84011974     0xa0    andi a5,a5,-4
    0x84011976     0xa2    srli a6,a7,0x3b
    0x8401197a     0xa6    li t4,2
    0x8401197c     0xa8    bne a6,t4,ffffffff8401191c <cteInsert+0x48>
    0x84011980     0xac    li a6,2
    0x84011982     0xae    beq a4,a6,ffffffff840119aa <cteInsert+0xd6>
    0x84011986     0xb2    j ffffffff8401191c <cteInsert+0x48>
    0x84011988     0xb4    slli a4,a0,0x19
    0x8401198c     0xb8    srli a4,a4,0x19
    0x8401198e     0xba    srli a0,a0,0x26
    0x84011990     0xbc    andi a0,a0,1
    0x84011992     0xbe    bnez a0,ffffffff840119d2 <cteInsert+0xfe>
    0x84011994     0xc0    j ffffffff840119d8 <cteInsert+0x104>
    0x84011996     0xc2    beqz a4,ffffffff84011952 <cteInsert+0x7e>
    0x84011998     0xc4    j ffffffff84011950 <cteInsert+0x7c>
    0x8401199a     0xc6    mv t1,a2
    0x8401199c     0xc8    ori a5,a5,3
    0x840119a0     0xcc    srli a4,a7,0x3b
    0x840119a4     0xd0    li a6,2
    0x840119a6     0xd2    bne a4,a6,ffffffff8401191c <cteInsert+0x48>
    0x840119aa     0xd6    slli t4,a7,0x19
    0x840119ae     0xda    srli t4,t4,0x19
    0x840119b2     0xde    srli a6,a7,0x26
    0x840119b6     0xe2    andi a6,a6,1
    0x840119ba     0xe6    beqz a6,ffffffff84011988 <cteInsert+0xb4>
    0x840119be     0xea    li a4,-1
    0x840119c0     0xec    slli a6,a4,0x27
    0x840119c4     0xf0    or t4,t4,a6
    0x840119c8     0xf4    srli a4,a4,0x19
    0x840119ca     0xf6    and a4,a4,a0
    0x840119cc     0xf8    srli a0,a0,0x26
    0x840119ce     0xfa    andi a0,a0,1
    0x840119d0     0xfc    beqz a0,ffffffff8401191c <cteInsert+0x48>
    0x840119d2     0xfe    li a0,-1
    0x840119d4    0x100    slli a0,a0,0x27
    0x840119d6    0x102    or a4,a4,a0
    0x840119d8    0x104    bne a4,t4,ffffffff8401191c <cteInsert+0x48>
    0x840119dc    0x108    andi t3,t3,63
    0x840119e0    0x10c    andi a6,a1,63
    0x840119e4    0x110    bne a6,t3,ffffffff8401191c <cteInsert+0x48>
    0x840119e8    0x114    addiw t3,t3,-4
    0x840119ea    0x116    lui a4,0x2000
    0x840119ee    0x11a    sll t3,a4,t3
    0x840119f2    0x11e    ld a4,8(a2)
    0x840119f4    0x120    slli a4,a4,0x27
    0x840119f6    0x122    srli a4,a4,0x27
    0x840119f8    0x124    or a4,t3,a4
    0x840119fc    0x128    sd a4,8(a2)
    0x840119fe    0x12a    j ffffffff8401191c <cteInsert+0x48>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
108 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 157 nodes.

Section setNextInterrupt (47 of 301)
====================================

Deriving specifications
-----------------------

Section `setNextInterrupt` consists of 31 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `setNextInterrupt`:

    0x8401187c     0x0    auipc a5,0x1b
    0x84011880     0x4    ld a5,2012(a5) # ffffffff8402d058 <ksCurThread>
    0x84011884     0x8    ld a5,368(a5)
    0x84011888     0xc    auipc a0,0x1b
    0x8401188c    0x10    ld a0,1960(a0) # ffffffff8402d030 <ksCurTime>
    0x84011890    0x14    ld a4,72(a5)
    0x84011892    0x16    slli a4,a4,0x4
    0x84011894    0x18    add a5,a5,a4
    0x84011896    0x1a    ld a5,96(a5)
    0x84011898    0x1c    add a5,a5,a0
    0x8401189a    0x1e    auipc a4,0x1b
    0x8401189e    0x22    ld a4,1910(a4) # ffffffff8402d010 <ksDomainTime>
    0x840118a2    0x26    add a0,a0,a4
    0x840118a4    0x28    bgeu a5,a0,ffffffff840118aa <setNextInterrupt+0x2e>
    0x840118a8    0x2c    mv a0,a5
    0x840118aa    0x2e    auipc a5,0x1b
    0x840118ae    0x32    ld a5,1974(a5) # ffffffff8402d060 <ksReleaseHead>
    0x840118b2    0x36    beqz a5,ffffffff840118c6 <setNextInterrupt+0x4a>
    0x840118b4    0x38    ld a5,368(a5)
    0x840118b8    0x3c    ld a4,72(a5)
    0x840118ba    0x3e    slli a4,a4,0x4
    0x840118bc    0x40    add a5,a5,a4
    0x840118be    0x42    ld a5,88(a5)
    0x840118c0    0x44    bgeu a5,a0,ffffffff840118c6 <setNextInterrupt+0x4a>
    0x840118c4    0x48    mv a0,a5
    0x840118c6    0x4a    addi a0,a0,-1
    0x840118c8    0x4c    li a1,0
    0x840118ca    0x4e    li a2,0
    0x840118cc    0x50    li a7,0
    0x840118ce    0x52    ecall
    0x840118d2    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextInterrupt` has 49 nodes.

Section setMCPriority (48 of 301)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x84011876    0x0    sd a1,352(a0)
    0x8401187a    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (49 of 301)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x84011852    0x0    sd zero,72(a0)
    0x84011856    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section refill_unblock_check (50 of 301)
========================================

Deriving specifications
-----------------------

Section `refill_unblock_check` consists of 45 instructions.

RVC_TFFFFT___FFT__TF.

Stack analysis
---------------

No stack accesses found. Code for `refill_unblock_check`:

    0x840117d6     0x0    ld a5,0(a0)
    0x840117d8     0x2    beqz a5,ffffffff84011850 <refill_unblock_check+0x7a>
    0x840117da     0x4    addi a2,a0,88
    0x840117de     0x8    ld a5,72(a0)
    0x840117e0     0xa    slli a5,a5,0x4
    0x840117e2     0xc    add a5,a5,a2
    0x840117e4     0xe    auipc a4,0x1c
    0x840117e8    0x12    ld a4,-1972(a4) # ffffffff8402d030 <ksCurTime>
    0x840117ec    0x16    addi a3,a4,10
    0x840117f0    0x1a    ld a1,0(a5)
    0x840117f2    0x1c    bltu a3,a1,ffffffff84011850 <refill_unblock_check+0x7a>
    0x840117f6    0x20    sd a4,0(a5)
    0x840117f8    0x22    li a5,1
    0x840117fa    0x24    auipc a4,0x1c
    0x840117fe    0x28    sd a5,-1986(a4) # ffffffff8402d038 <ksReprogram>
    0x84011802    0x2c    li t1,0
    0x84011804    0x2e    auipc t3,0x1c
    0x84011808    0x32    addi t3,t3,-2004 # ffffffff8402d030 <ksCurTime>
    0x8401180c    0x36    j ffffffff8401181e <refill_unblock_check+0x48>
    0x8401180e    0x38    sd a3,72(a0)
    0x84011810    0x3a    ld a4,8(a5)
    0x84011812    0x3c    add a4,a4,a6
    0x84011814    0x3e    sd a4,8(a5)
    0x84011816    0x40    ld a5,72(a0)
    0x84011818    0x42    slli a5,a5,0x4
    0x8401181a    0x44    add a5,a5,a2
    0x8401181c    0x46    sd a1,0(a5)
    0x8401181e    0x48    ld a5,72(a0)
    0x84011820    0x4a    ld a4,64(a0)
    0x84011822    0x4c    addi a4,a4,-1
    0x84011824    0x4e    mv a3,t1
    0x84011826    0x50    beq a5,a4,ffffffff8401182e <refill_unblock_check+0x58>
    0x8401182a    0x54    addi a3,a5,1
    0x8401182e    0x58    ld a4,80(a0)
    0x84011830    0x5a    beq a5,a4,ffffffff84011850 <refill_unblock_check+0x7a>
    0x84011834    0x5e    slli a5,a5,0x4
    0x84011836    0x60    add a5,a5,a2
    0x84011838    0x62    ld a6,8(a5)
    0x8401183c    0x66    ld a1,0(t3)
    0x84011840    0x6a    slli a5,a3,0x4
    0x84011844    0x6e    add a5,a5,a2
    0x84011846    0x70    add a7,a6,a1
    0x8401184a    0x74    ld a4,0(a5)
    0x8401184c    0x76    bgeu a7,a4,ffffffff8401180e <refill_unblock_check+0x38>
    0x84011850    0x7a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_unblock_check` has 73 nodes.

Section refill_split_check (51 of 301)
======================================

Deriving specifications
-----------------------

Section `refill_split_check` consists of 148 instructions.

RVC_TFFTFT___FFT__TF.
RVC_TFFFFFT__T____TF.

Stack analysis
---------------

No stack accesses found. Code for `refill_split_check`:

    0x840114ec      0x0    auipc a4,0x1c
    0x840114f0      0x4    ld a4,-1220(a4) # ffffffff8402d028 <ksCurSC>
    0x840114f4      0x8    ld a2,72(a4)
    0x840114f6      0xa    addi a6,a4,88
    0x840114fa      0xe    slli a3,a2,0x4
    0x840114fe     0x12    add a3,a3,a6
    0x84011500     0x14    ld a1,8(a3)
    0x84011502     0x16    sub a1,a1,a0
    0x84011504     0x18    ld a7,0(a3)
    0x84011508     0x1c    ld a5,0(a4)
    0x8401150a     0x1e    add a7,a7,a5
    0x8401150c     0x20    ld a5,80(a4)
    0x8401150e     0x22    bgeu a5,a2,ffffffff84011556 <refill_split_check+0x6a>
    0x84011512     0x26    ld t1,64(a4)
    0x84011516     0x2a    add a5,a5,t1
    0x84011518     0x2c    addi a5,a5,1
    0x8401151a     0x2e    sub a5,a5,a2
    0x8401151c     0x30    beq t1,a5,ffffffff8401157a <refill_split_check+0x8e>
    0x84011520     0x34    li a5,19
    0x84011522     0x36    bgeu a5,a1,ffffffff8401157a <refill_split_check+0x8e>
    0x84011526     0x3a    sd a1,8(a3)
    0x84011528     0x3c    li a5,19
    0x8401152a     0x3e    bltu a5,a0,ffffffff84011636 <refill_split_check+0x14a>
    0x8401152e     0x42    ld a5,80(a4)
    0x84011530     0x44    ld a3,72(a4)
    0x84011532     0x46    beq a3,a5,ffffffff84011636 <refill_split_check+0x14a>
    0x84011536     0x4a    slli a5,a5,0x4
    0x84011538     0x4c    add a5,a5,a6
    0x8401153a     0x4e    ld a3,8(a5)
    0x8401153c     0x50    add a0,a0,a3
    0x8401153e     0x52    sd a0,8(a5)
    0x84011540     0x54    ld a5,80(a4)
    0x84011542     0x56    slli a5,a5,0x4
    0x84011544     0x58    add a6,a6,a5
    0x84011546     0x5a    ld a5,0(a6)
    0x8401154a     0x5e    bgeu a5,a7,ffffffff84011550 <refill_split_check+0x64>
    0x8401154e     0x62    mv a5,a7
    0x84011550     0x64    sd a5,0(a6)
    0x84011554     0x68    ret
    0x84011556     0x6a    addi t3,a5,1
    0x8401155a     0x6e    sub t3,t3,a2
    0x8401155e     0x72    ld t1,64(a4)
    0x84011562     0x76    beq t1,t3,ffffffff84011576 <refill_split_check+0x8a>
    0x84011566     0x7a    li t3,19
    0x84011568     0x7c    bltu t3,a1,ffffffff84011526 <refill_split_check+0x3a>
    0x8401156c     0x80    bne a2,a5,ffffffff8401157a <refill_split_check+0x8e>
    0x84011570     0x84    sd a7,0(a3)
    0x84011574     0x88    ret
    0x84011576     0x8a    mv t1,t3
    0x84011578     0x8c    j ffffffff8401156c <refill_split_check+0x80>
    0x8401157a     0x8e    addi t1,t1,-1
    0x8401157c     0x90    li a5,0
    0x8401157e     0x92    beq a2,t1,ffffffff84011586 <refill_split_check+0x9a>
    0x84011582     0x96    addi a5,a2,1
    0x84011586     0x9a    sd a5,72(a4)
    0x84011588     0x9c    slli a5,a5,0x4
    0x8401158a     0x9e    add a5,a5,a6
    0x8401158c     0xa0    ld a3,8(a5)
    0x8401158e     0xa2    add a1,a1,a3
    0x84011590     0xa4    sd a1,8(a5)
    0x84011592     0xa6    li a5,19
    0x84011594     0xa8    bltu a5,a0,ffffffff840115bc <refill_split_check+0xd0>
    0x84011598     0xac    ld a5,80(a4)
    0x8401159a     0xae    ld a3,72(a4)
    0x8401159c     0xb0    beq a3,a5,ffffffff840115bc <refill_split_check+0xd0>
    0x840115a0     0xb4    slli a5,a5,0x4
    0x840115a2     0xb6    add a5,a5,a6
    0x840115a4     0xb8    ld a3,8(a5)
    0x840115a6     0xba    add a0,a0,a3
    0x840115a8     0xbc    sd a0,8(a5)
    0x840115aa     0xbe    ld a5,80(a4)
    0x840115ac     0xc0    slli a5,a5,0x4
    0x840115ae     0xc2    add a5,a5,a6
    0x840115b0     0xc4    ld a3,0(a5)
    0x840115b2     0xc6    bgeu a3,a7,ffffffff840115b8 <refill_split_check+0xcc>
    0x840115b6     0xca    mv a3,a7
    0x840115b8     0xcc    sd a3,0(a5)
    0x840115ba     0xce    j ffffffff840115d0 <refill_split_check+0xe4>
    0x840115bc     0xd0    ld a3,80(a4)
    0x840115be     0xd2    slli a5,a3,0x4
    0x840115c2     0xd6    add a5,a5,a6
    0x840115c4     0xd8    ld a2,0(a5)
    0x840115c6     0xda    bltu a2,a7,ffffffff840115d6 <refill_split_check+0xea>
    0x840115ca     0xde    ld a3,8(a5)
    0x840115cc     0xe0    add a0,a0,a3
    0x840115ce     0xe2    sd a0,8(a5)
    0x840115d0     0xe4    li a0,19
    0x840115d2     0xe6    li a7,0
    0x840115d4     0xe8    j ffffffff84011616 <refill_split_check+0x12a>
    0x840115d6     0xea    ld a2,64(a4)
    0x840115d8     0xec    addi a2,a2,-1
    0x840115da     0xee    li a5,0
    0x840115dc     0xf0    beq a3,a2,ffffffff840115e4 <refill_split_check+0xf8>
    0x840115e0     0xf4    addi a5,a3,1
    0x840115e4     0xf8    sd a5,80(a4)
    0x840115e6     0xfa    slli a5,a5,0x4
    0x840115e8     0xfc    add a5,a5,a6
    0x840115ea     0xfe    sd a7,0(a5)
    0x840115ee    0x102    sd a0,8(a5)
    0x840115f0    0x104    j ffffffff840115d0 <refill_split_check+0xe4>
    0x840115f2    0x106    addi a5,a5,1
    0x840115f4    0x108    sub a5,a5,a3
    0x840115f6    0x10a    ld a2,64(a4)
    0x840115f8    0x10c    bne a2,a5,ffffffff84011634 <refill_split_check+0x148>
    0x840115fc    0x110    ld a2,64(a4)
    0x840115fe    0x112    addi a2,a2,-1
    0x84011600    0x114    mv a5,a7
    0x84011602    0x116    beq a3,a2,ffffffff8401160a <refill_split_check+0x11e>
    0x84011606    0x11a    addi a5,a3,1
    0x8401160a    0x11e    sd a5,72(a4)
    0x8401160c    0x120    slli a5,a5,0x4
    0x8401160e    0x122    add a5,a5,a6
    0x84011610    0x124    ld a3,8(a5)
    0x84011612    0x126    add a3,a3,a1
    0x84011614    0x128    sd a3,8(a5)
    0x84011616    0x12a    ld a3,72(a4)
    0x84011618    0x12c    slli a5,a3,0x4
    0x8401161c    0x130    add a5,a5,a6
    0x8401161e    0x132    ld a1,8(a5)
    0x84011620    0x134    bgeu a0,a1,ffffffff840115fc <refill_split_check+0x110>
    0x84011624    0x138    ld a5,80(a4)
    0x84011626    0x13a    bgeu a5,a3,ffffffff840115f2 <refill_split_check+0x106>
    0x8401162a    0x13e    ld a2,64(a4)
    0x8401162c    0x140    add a5,a5,a2
    0x8401162e    0x142    addi a5,a5,1
    0x84011630    0x144    sub a5,a5,a3
    0x84011632    0x146    j ffffffff840115f6 <refill_split_check+0x10a>
    0x84011634    0x148    ret
    0x84011636    0x14a    ld a3,80(a4)
    0x84011638    0x14c    slli a5,a3,0x4
    0x8401163c    0x150    add a5,a5,a6
    0x8401163e    0x152    ld a2,0(a5)
    0x84011640    0x154    bltu a2,a7,ffffffff8401164c <refill_split_check+0x160>
    0x84011644    0x158    ld a4,8(a5)
    0x84011646    0x15a    add a0,a0,a4
    0x84011648    0x15c    sd a0,8(a5)
    0x8401164a    0x15e    ret
    0x8401164c    0x160    ld a2,64(a4)
    0x8401164e    0x162    addi a2,a2,-1
    0x84011650    0x164    li a5,0
    0x84011652    0x166    beq a3,a2,ffffffff8401165a <refill_split_check+0x16e>
    0x84011656    0x16a    addi a5,a3,1
    0x8401165a    0x16e    sd a5,80(a4)
    0x8401165c    0x170    slli a5,a5,0x4
    0x8401165e    0x172    add a6,a6,a5
    0x84011660    0x174    sd a7,0(a6)
    0x84011664    0x178    sd a0,8(a6)
    0x84011668    0x17c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
148 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_split_check` has 247 nodes.

Section refill_update (52 of 301)
=================================

Deriving specifications
-----------------------

Section `refill_update` consists of 59 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `refill_update`:

    0x84011452     0x0    addi a4,a0,88
    0x84011456     0x4    ld a5,72(a0)
    0x84011458     0x6    slli a5,a5,0x4
    0x8401145a     0x8    add a5,a5,a4
    0x8401145c     0xa    ld a6,0(a5)
    0x84011460     0xe    sd a6,88(a0)
    0x84011464    0x12    ld a5,8(a5)
    0x84011466    0x14    sd a5,8(a4)
    0x84011468    0x16    sd zero,72(a0)
    0x8401146c    0x1a    sd zero,80(a0)
    0x84011470    0x1e    sd a3,64(a0)
    0x84011472    0x20    sd a1,0(a0)
    0x84011474    0x22    auipc a5,0x1c
    0x84011478    0x26    ld a5,-1092(a5) # ffffffff8402d030 <ksCurTime>
    0x8401147c    0x2a    addi a3,a5,10
    0x84011480    0x2e    ld a6,88(a0)
    0x84011484    0x32    bltu a3,a6,ffffffff8401148a <refill_update+0x38>
    0x84011488    0x36    sd a5,88(a0)
    0x8401148a    0x38    ld a5,72(a0)
    0x8401148c    0x3a    slli a5,a5,0x4
    0x8401148e    0x3c    add a5,a5,a4
    0x84011490    0x3e    ld a3,8(a5)
    0x84011492    0x40    bltu a3,a2,ffffffff840114c8 <refill_update+0x76>
    0x84011496    0x44    sd a2,8(a5)
    0x84011498    0x46    ld a5,0(a0)
    0x8401149a    0x48    beqz a5,ffffffff8401149e <refill_update+0x4c>
    0x8401149c    0x4a    ret
    0x8401149e    0x4c    addi sp,sp,-32
    0x840114a0    0x4e    auipc a1,0x1c
    0x840114a4    0x52    ld a1,-1136(a1) # ffffffff8402d030 <ksCurTime>
    0x840114a8    0x56    sd zero,24(sp)        ; stack access
    0x840114aa    0x58    ld a2,80(a0)
    0x840114ac    0x5a    ld a3,64(a0)
    0x840114ae    0x5c    addi a3,a3,-1
    0x840114b0    0x5e    beq a2,a3,ffffffff840114b8 <refill_update+0x66>
    0x840114b4    0x62    addi a5,a2,1
    0x840114b8    0x66    sd a5,80(a0)
    0x840114ba    0x68    slli a5,a5,0x4
    0x840114bc    0x6a    add a4,a4,a5
    0x840114be    0x6c    sd a1,0(a4)
    0x840114c0    0x6e    ld a5,24(sp)          ; stack access
    0x840114c2    0x70    sd a5,8(a4)
    0x840114c4    0x72    addi sp,sp,32
    0x840114c6    0x74    ret
    0x840114c8    0x76    ld a5,0(a5)
    0x840114ca    0x78    add a1,a1,a5
    0x840114cc    0x7a    sub a2,a2,a3
    0x840114ce    0x7c    ld a6,80(a0)
    0x840114d2    0x80    ld a3,64(a0)
    0x840114d4    0x82    addi a3,a3,-1
    0x840114d6    0x84    li a5,0
    0x840114d8    0x86    beq a6,a3,ffffffff840114e0 <refill_update+0x8e>
    0x840114dc    0x8a    addi a5,a6,1 # fffffffffff00001 <ki_end+0x7bece001>
    0x840114e0    0x8e    sd a5,80(a0)
    0x840114e2    0x90    slli a5,a5,0x4
    0x840114e4    0x92    add a4,a4,a5
    0x840114e6    0x94    sd a1,0(a4)
    0x840114e8    0x96    sd a2,8(a4)
    0x840114ea    0x98    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
59 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_update` has 102 nodes.

Section refill_new (53 of 301)
==============================

Deriving specifications
-----------------------

Section `refill_new` consists of 29 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `refill_new`:

    0x84011406     0x0    sd a3,0(a0)
    0x84011408     0x2    sd zero,72(a0)
    0x8401140c     0x6    sd zero,80(a0)
    0x84011410     0xa    sd a1,64(a0)
    0x84011412     0xc    addi a4,a0,88
    0x84011416    0x10    sd a2,8(a4)
    0x84011418    0x12    auipc a5,0x1c
    0x8401141c    0x16    ld a5,-1000(a5) # ffffffff8402d030 <ksCurTime>
    0x84011420    0x1a    sd a5,0(a4)
    0x84011422    0x1c    ld a5,0(a0)
    0x84011424    0x1e    beqz a5,ffffffff84011428 <refill_new+0x22>
    0x84011426    0x20    ret
    0x84011428    0x22    addi sp,sp,-32
    0x8401142a    0x24    auipc a1,0x1c
    0x8401142e    0x28    ld a1,-1018(a1) # ffffffff8402d030 <ksCurTime>
    0x84011432    0x2c    sd zero,24(sp)        ; stack access
    0x84011434    0x2e    ld a2,80(a0)
    0x84011436    0x30    ld a3,64(a0)
    0x84011438    0x32    addi a3,a3,-1
    0x8401143a    0x34    beq a2,a3,ffffffff84011442 <refill_new+0x3c>
    0x8401143e    0x38    addi a5,a2,1
    0x84011442    0x3c    sd a5,80(a0)
    0x84011444    0x3e    slli a5,a5,0x4
    0x84011446    0x40    add a5,a5,a4
    0x84011448    0x42    sd a1,0(a5)
    0x8401144a    0x44    ld a4,24(sp)          ; stack access
    0x8401144c    0x46    sd a4,8(a5)
    0x8401144e    0x48    addi sp,sp,32
    0x84011450    0x4a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_new` has 51 nodes.

Section resolveAddressBits (54 of 301)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 97 instructions.

RVC_TFFFT____FT___TF.
SRL.....
RVC_TFFTTT___FF___FT..
RVC_FTTFFT___T____FT.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
21 stack accesses found. Annotated code for `resolveAddressBits`:

    0x84011120      0x0    addi sp,sp,-32
    0x84011122      0x2    sd s0,24(sp)          ; stack access
    0x84011124      0x4    sd s1,16(sp)          ; stack access
    0x84011126      0x6    sd a1,0(sp)           ; stack access
    0x84011128      0x8    sd a2,8(sp)           ; stack access
    0x8401112a      0xa    srli a7,a1,0x3b
    0x8401112e      0xe    li a5,10
    0x84011130     0x10    bne a7,a5,ffffffff840111be <resolveAddressBits+0x9e>
    0x84011134     0x14    mv a6,a4
    0x84011136     0x16    li t5,-1
    0x84011138     0x18    lui t0,0xfc000
    0x8401113c     0x1c    srli t0,t0,0x19
    0x84011140     0x20    li t6,1
    0x84011142     0x22    slli t6,t6,0x26
    0x84011144     0x24    slli t2,t5,0x27
    0x84011148     0x28    li s0,10
    0x8401114a     0x2a    srli a7,a1,0x2f
    0x8401114e     0x2e    andi a7,a7,63
    0x84011152     0x32    srli t1,a1,0x35
    0x84011156     0x36    andi t1,t1,63
    0x8401115a     0x3a    add s1,t1,a7
    0x8401115e     0x3e    sext.w a5,a6
    0x84011162     0x42    subw t3,a6,t1
    0x84011166     0x46    srl t3,a3,t3
    0x8401116a     0x4a    sll t4,t5,t1
    0x8401116e     0x4e    not t4,t4
    0x84011172     0x52    and t3,t3,t4
    0x84011176     0x56    bltu a6,t1,ffffffff840111da <resolveAddressBits+0xba>
    0x8401117a     0x5a    bne a2,t3,ffffffff840111da <resolveAddressBits+0xba>
    0x8401117e     0x5e    bltu a6,s1,ffffffff8401120a <resolveAddressBits+0xea>
    0x84011182     0x62    subw a5,a5,s1
    0x84011184     0x64    srl a5,a3,a5
    0x84011188     0x68    sll a7,t5,a7
    0x8401118c     0x6c    not a7,a7
    0x84011190     0x70    and a5,a5,a7
    0x84011194     0x74    slli a5,a5,0x5
    0x84011196     0x76    slli a1,a1,0x1
    0x84011198     0x78    and a2,a1,t0
    0x8401119c     0x7c    and a1,a1,t6
    0x840111a0     0x80    beqz a1,ffffffff840111a6 <resolveAddressBits+0x86>
    0x840111a2     0x82    or a2,a2,t2
    0x840111a6     0x86    add a5,a5,a2
    0x840111a8     0x88    bne a6,s1,ffffffff84011232 <resolveAddressBits+0x112>
    0x840111ac     0x8c    sd zero,0(a0) # fffffffff8000000 <ki_end+0x73fce000>  ; stack access
    0x840111b0     0x90    sd a5,8(a0)           ; stack access
    0x840111b2     0x92    sd zero,16(a0)        ; stack access
    0x840111b6     0x96    ld s0,24(sp)          ; stack access
    0x840111b8     0x98    ld s1,16(sp)          ; stack access
    0x840111ba     0x9a    addi sp,sp,32
    0x840111bc     0x9c    ret
    0x840111be     0x9e    auipc a5,0x9
    0x840111c2     0xa2    addi a5,a5,1602 # ffffffff8401a800 <riscvKSASIDTable>
    0x840111c6     0xa6    sd zero,1024(a5)
    0x840111ca     0xaa    sd zero,1032(a5)
    0x840111ce     0xae    li a5,2
    0x840111d0     0xb0    sd a5,0(a0)           ; stack access
    0x840111d2     0xb2    sd zero,8(a0)         ; stack access
    0x840111d6     0xb6    sd a4,16(a0)          ; stack access
    0x840111d8     0xb8    j ffffffff840111b6 <resolveAddressBits+0x96>
    0x840111da     0xba    auipc a3,0x9
    0x840111de     0xbe    addi a3,a3,1574 # ffffffff8401a800 <riscvKSASIDTable>
    0x840111e2     0xc2    slli a6,a6,0x9
    0x840111e4     0xc4    lui a5,0x10
    0x840111e6     0xc6    addi a5,a5,-1
    0x840111e8     0xc8    and a6,a6,a5
    0x840111ec     0xcc    slli t1,t1,0x2
    0x840111ee     0xce    or t1,a6,t1
    0x840111f2     0xd2    ori t1,t1,3
    0x840111f6     0xd6    sd t1,1024(a3)
    0x840111fa     0xda    sd a2,1032(a3)
    0x840111fe     0xde    li a5,2
    0x84011200     0xe0    sd a5,0(a0)           ; stack access
    0x84011202     0xe2    sd zero,8(a0)         ; stack access
    0x84011206     0xe6    sd a4,16(a0)          ; stack access
    0x84011208     0xe8    j ffffffff840111b6 <resolveAddressBits+0x96>
    0x8401120a     0xea    auipc a5,0x9
    0x8401120e     0xee    addi a5,a5,1526 # ffffffff8401a800 <riscvKSASIDTable>
    0x84011212     0xf2    slli s1,s1,0x9
    0x84011214     0xf4    slli a6,a6,0x2
    0x84011216     0xf6    or a6,s1,a6
    0x8401121a     0xfa    ori a6,a6,2
    0x8401121e     0xfe    sd a6,1024(a5)
    0x84011222    0x102    sd zero,1032(a5)
    0x84011226    0x106    li a5,2
    0x84011228    0x108    sd a5,0(a0)           ; stack access
    0x8401122a    0x10a    sd zero,8(a0)         ; stack access
    0x8401122e    0x10e    sd a4,16(a0)          ; stack access
    0x84011230    0x110    j ffffffff840111b6 <resolveAddressBits+0x96>
    0x84011232    0x112    sub a6,a6,s1
    0x84011236    0x116    ld a1,0(a5)
    0x84011238    0x118    ld a2,8(a5)
    0x8401123a    0x11a    srli a7,a1,0x3b
    0x8401123e    0x11e    beq a7,s0,ffffffff8401114a <resolveAddressBits+0x2a>
    0x84011242    0x122    sd zero,0(a0)         ; stack access
    0x84011246    0x126    sd a5,8(a0)           ; stack access
    0x84011248    0x128    sd a6,16(a0)          ; stack access
    0x8401124c    0x12c    j ffffffff840111b6 <resolveAddressBits+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 141 nodes.

Section Arch_performTransfer (55 of 301)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x8401111c    0x0    li a0,0
    0x8401111e    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (56 of 301)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x84011118    0x0    li a0,0
    0x8401111a    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (57 of 301)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x84011110    0x0    addi a0,a0,-7
    0x84011112    0x2    sltiu a0,a0,3
    0x84011116    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (58 of 301)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x8401110e    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_updateCapData (59 of 301)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_updateCapData`:

    0x84010cea    0x0    addi sp,sp,-32
    0x84010cec    0x2    mv a0,a2
    0x84010cee    0x4    mv a1,a3
    0x84010cf0    0x6    addi sp,sp,32
    0x84010cf2    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_checkIRQ (60 of 301)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84010c58     0x0    addi a0,a0,-1
    0x84010c5a     0x2    li a5,53
    0x84010c5e     0x6    bltu a5,a0,ffffffff84010c66 <Arch_checkIRQ+0xe>
    0x84010c62     0xa    li a0,0
    0x84010c64     0xc    ret
    0x84010c66     0xe    auipc a5,0xa
    0x84010c6a    0x12    addi a5,a5,-1126 # ffffffff8401a800 <riscvKSASIDTable>
    0x84010c6e    0x16    li a4,4
    0x84010c70    0x18    sd a4,1088(a5)
    0x84010c74    0x1c    li a4,1
    0x84010c76    0x1e    sd a4,1056(a5)
    0x84010c7a    0x22    li a4,54
    0x84010c7e    0x26    sd a4,1064(a5)
    0x84010c82    0x2a    li a0,3
    0x84010c84    0x2c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 22 nodes.

Section getNBSendRecvDest (61 of 301)
=====================================

Deriving specifications
-----------------------

Section `getNBSendRecvDest` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getNBSendRecvDest`:

    0x84010c4c    0x0    auipc a5,0x1c
    0x84010c50    0x4    ld a5,1036(a5) # ffffffff8402d058 <ksCurThread>
    0x84010c54    0x8    ld a0,32(a5)
    0x84010c56    0xa    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNBSendRecvDest` has 7 nodes.

Section plat_cleanInvalidateL2Range (62 of 301)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84010c4a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (63 of 301)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84010c48    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (64 of 301)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84010c46    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section setIRQTrigger (65 of 301)
=================================

Deriving specifications
-----------------------

Section `setIRQTrigger` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setIRQTrigger`:

    0x84010c44    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQTrigger` has 2 nodes.

Section setNextPC (66 of 301)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84010c3e    0x0    sd a1,272(a0)
    0x84010c42    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (67 of 301)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84010c38    0x0    ld a0,264(a0)
    0x84010c3c    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (68 of 301)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x84010bc4     0x0    addi sp,sp,-16
    0x84010bc6     0x2    sd a0,0(sp)           ; stack access
    0x84010bc8     0x4    sd a1,8(sp)           ; stack access
    0x84010bca     0x6    sd a0,0(a2)
    0x84010bcc     0x8    sd a1,8(a2)
    0x84010bce     0xa    sd a3,0(a4)
    0x84010bd0     0xc    sfence.vma
    0x84010bd4    0x10    li a0,0
    0x84010bd6    0x12    addi sp,sp,16
    0x84010bd8    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (69 of 301)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84010bae     0x0    addi sp,sp,-16
    0x84010bb0     0x2    sd a0,0(sp)           ; stack access
    0x84010bb2     0x4    sd a1,8(sp)           ; stack access
    0x84010bb4     0x6    sd a0,0(a2)
    0x84010bb6     0x8    sd a1,8(a2)
    0x84010bb8     0xa    sd a3,0(a4)
    0x84010bba     0xc    sfence.vma
    0x84010bbe    0x10    li a0,0
    0x84010bc0    0x12    addi sp,sp,16
    0x84010bc2    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (70 of 301)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x84010b82     0x0    mv a5,a0
    0x84010b84     0x2    li a4,2
    0x84010b86     0x4    beq a0,a4,ffffffff84010b94 <maskVMRights+0x12>
    0x84010b8a     0x8    li a4,3
    0x84010b8c     0xa    li a0,1
    0x84010b8e     0xc    beq a5,a4,ffffffff84010b9e <maskVMRights+0x1c>
    0x84010b92    0x10    ret
    0x84010b94    0x12    srli a1,a1,0x1
    0x84010b96    0x14    andi a1,a1,1
    0x84010b98    0x16    addi a0,a1,1
    0x84010b9c    0x1a    ret
    0x84010b9e    0x1c    srli a5,a1,0x1
    0x84010ba2    0x20    andi a5,a5,1
    0x84010ba4    0x22    beqz a5,ffffffff84010b92 <maskVMRights+0x10>
    0x84010ba6    0x24    andi a1,a1,1
    0x84010ba8    0x26    addi a0,a1,2
    0x84010bac    0x2a    j ffffffff84010b92 <maskVMRights+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 25 nodes.

Section checkValidIPCBuffer (71 of 301)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 26 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x84010b3c     0x0    addi sp,sp,-16
    0x84010b3e     0x2    srli a4,a1,0x3b
    0x84010b42     0x6    li a5,1
    0x84010b44     0x8    bne a4,a5,ffffffff84010b58 <checkValidIPCBuffer+0x1c>
    0x84010b48     0xc    srli a1,a1,0x36
    0x84010b4a     0xe    andi a1,a1,1
    0x84010b4c    0x10    bnez a1,ffffffff84010b66 <checkValidIPCBuffer+0x2a>
    0x84010b4e    0x12    andi a0,a0,1023
    0x84010b52    0x16    bnez a0,ffffffff84010b74 <checkValidIPCBuffer+0x38>
    0x84010b54    0x18    addi sp,sp,16
    0x84010b56    0x1a    ret
    0x84010b58    0x1c    li a5,3
    0x84010b5a    0x1e    auipc a4,0xa
    0x84010b5e    0x22    sd a5,230(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84010b62    0x26    li a0,3
    0x84010b64    0x28    j ffffffff84010b54 <checkValidIPCBuffer+0x18>
    0x84010b66    0x2a    li a5,3
    0x84010b68    0x2c    auipc a4,0xa
    0x84010b6c    0x30    sd a5,216(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84010b70    0x34    li a0,3
    0x84010b72    0x36    j ffffffff84010b54 <checkValidIPCBuffer+0x18>
    0x84010b74    0x38    li a5,5
    0x84010b76    0x3a    auipc a4,0xa
    0x84010b7a    0x3e    sd a5,202(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84010b7e    0x42    li a0,3
    0x84010b80    0x44    j ffffffff84010b54 <checkValidIPCBuffer+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 36 nodes.

Section isValidVTableRoot (72 of 301)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x84010b26     0x0    addi sp,sp,-16
    0x84010b28     0x2    srli a4,a0,0x3b
    0x84010b2c     0x6    li a5,3
    0x84010b2e     0x8    srli a0,a0,0x27
    0x84010b30     0xa    andi a0,a0,1
    0x84010b32     0xc    beq a4,a5,ffffffff84010b38 <isValidVTableRoot+0x12>
    0x84010b36    0x10    li a0,0
    0x84010b38    0x12    addi sp,sp,16
    0x84010b3a    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (73 of 301)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 36 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupPTSlot`:

    0x840107b2     0x0    addi sp,sp,-16
    0x840107b4     0x2    mv a3,a1
    0x840107b6     0x4    srli a5,a1,0x1e
    0x840107ba     0x8    andi a5,a5,511
    0x840107be     0xc    slli a5,a5,0x3
    0x840107c0     0xe    add a0,a0,a5
    0x840107c2    0x10    li a1,30
    0x840107c4    0x12    li a7,3
    0x840107c6    0x14    lui a6,0xfff00
    0x840107ca    0x18    srli a6,a6,0x8
    0x840107ce    0x1c    li a2,-1
    0x840107d0    0x1e    slli a2,a2,0x26
    0x840107d2    0x20    j ffffffff840107f0 <lookupPTSlot+0x3e>
    0x840107d4    0x22    addi a1,a1,-9
    0x840107d6    0x24    beq a1,a7,ffffffff84010814 <lookupPTSlot+0x62>
    0x840107da    0x28    slli a0,a5,0x2
    0x840107de    0x2c    and a0,a0,a6
    0x840107e2    0x30    add a0,a0,a2
    0x840107e4    0x32    srl a5,a3,a1
    0x840107e8    0x36    andi a5,a5,511
    0x840107ec    0x3a    slli a5,a5,0x3
    0x840107ee    0x3c    add a0,a0,a5
    0x840107f0    0x3e    ld a5,0(a0)
    0x840107f2    0x40    andi a4,a5,1
    0x840107f6    0x44    beqz a4,ffffffff84010810 <lookupPTSlot+0x5e>
    0x840107f8    0x46    srli a4,a5,0x1
    0x840107fc    0x4a    srli t1,a5,0x2
    0x84010800    0x4e    or a4,a4,t1
    0x84010804    0x52    srli t1,a5,0x3
    0x84010808    0x56    or a4,a4,t1
    0x8401080c    0x5a    andi a4,a4,1
    0x8401080e    0x5c    beqz a4,ffffffff840107d4 <lookupPTSlot+0x22>
    0x84010810    0x5e    addi sp,sp,16
    0x84010812    0x60    ret
    0x84010814    0x62    li a1,12
    0x84010816    0x64    j ffffffff84010810 <lookupPTSlot+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 44 nodes.

Section copyGlobalMappings (74 of 301)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x8401051c     0x0    auipc a5,0x20
    0x84010520     0x4    addi a5,a5,740 # ffffffff84030800 <kernel_root_pageTable+0x800>
    0x84010524     0x8    lui a4,0x1
    0x84010526     0xa    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x8401052a     0xe    add a4,a4,a0
    0x8401052c    0x10    auipc a2,0x21
    0x84010530    0x14    addi a2,a2,-1324 # ffffffff84031000 <kernel_root_pageTable+0x1000>
    0x84010534    0x18    ld a3,0(a5)
    0x84010536    0x1a    sd a3,0(a4)
    0x84010538    0x1c    addi a5,a5,8
    0x8401053a    0x1e    addi a4,a4,8
    0x8401053c    0x20    bne a5,a2,ffffffff84010534 <copyGlobalMappings+0x18>
    0x84010540    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (75 of 301)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x8401051a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (76 of 301)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x84010518    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (77 of 301)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x84010490    0x0    li a0,0
    0x84010492    0x2    li a1,0
    0x84010494    0x4    li a2,0
    0x84010496    0x6    li a7,8
    0x84010498    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section restore_user_context (78 of 301)
========================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 41 instructions.

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

No stack accesses found. Code for `restore_user_context`:

    0x840103ee     0x0    auipc a5,0x1d
    0x840103f2     0x4    ld a5,-918(a5) # ffffffff8402d058 <ksCurThread>
    0x840103f6     0x8    mv t0,a5
    0x840103f8     0xa    ld ra,0(t0)
    0x840103fc     0xe    ld sp,8(t0)
    0x84010400    0x12    ld gp,16(t0)
    0x84010404    0x16    ld t2,48(t0)
    0x84010408    0x1a    ld s0,56(t0)
    0x8401040c    0x1e    ld s1,64(t0)
    0x84010410    0x22    ld a0,72(t0)
    0x84010414    0x26    ld a1,80(t0)
    0x84010418    0x2a    ld a2,88(t0)
    0x8401041c    0x2e    ld a3,96(t0)
    0x84010420    0x32    ld a4,104(t0)
    0x84010424    0x36    ld a5,112(t0)
    0x84010428    0x3a    ld a6,120(t0)
    0x8401042c    0x3e    ld a7,128(t0)
    0x84010430    0x42    ld s2,136(t0)
    0x84010434    0x46    ld s3,144(t0)
    0x84010438    0x4a    ld s4,152(t0)
    0x8401043c    0x4e    ld s5,160(t0)
    0x84010440    0x52    ld s6,168(t0)
    0x84010444    0x56    ld s7,176(t0)
    0x84010448    0x5a    ld s8,184(t0)
    0x8401044c    0x5e    ld s9,192(t0)
    0x84010450    0x62    ld s10,200(t0)
    0x84010454    0x66    ld s11,208(t0)
    0x84010458    0x6a    ld t3,216(t0)
    0x8401045c    0x6e    ld t4,224(t0)
    0x84010460    0x72    ld t5,232(t0)
    0x84010464    0x76    ld t6,240(t0)
    0x84010468    0x7a    ld t1,24(t0)
    0x8401046c    0x7e    add tp,t1,zero
    0x84010470    0x82    ld t1,272(t0)
    0x84010474    0x86    csrw sepc,t1
    0x84010478    0x8a    csrw sscratch,t0
    0x8401047c    0x8e    ld t1,256(t0)
    0x84010480    0x92    csrw sstatus,t1
    0x84010484    0x96    ld t1,40(t0)
    0x84010488    0x9a    ld t0,32(t0)
    0x8401048c    0x9e    sret

Proving inst theorems
---------------------

41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 79 nodes.

Section cap_get_capPtr (79 of 301)
==================================

Deriving specifications
-----------------------

Section `cap_get_capPtr` consists of 126 instructions.
Switch found.

RVC_TFFFFT___FFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `cap_get_capPtr`:

    0x8401024a      0x0    addi sp,sp,-16
    0x8401024c      0x2    srli a5,a0,0x3b
    0x84010250      0x6    li a4,24
    0x84010252      0x8    bltu a4,a5,ffffffff8401031e <cap_get_capPtr+0xd4>
    0x84010256      0xc    slli a3,a5,0x2
    0x8401025a     0x10    auipc a2,0x9
    0x8401025e     0x14    addi a2,a2,2038 # ffffffff84019a50 <msgRegisters+0x8>
    0x84010262     0x18    add a3,a3,a2
    0x84010264     0x1a    lw a4,0(a3)
    0x84010266     0x1c    add a4,a4,a2
    0x84010268     0x1e    jr a4
    0x8401026a     0x20    slli a4,a0,0x19
    0x8401026e     0x24    srli a4,a4,0x19
    0x84010270     0x26    srli a5,a0,0x26
    0x84010274     0x2a    andi a5,a5,1
    0x84010276     0x2c    beqz a5,ffffffff8401027e <cap_get_capPtr+0x34>
    0x84010278     0x2e    li a5,-1
    0x8401027a     0x30    slli a5,a5,0x27
    0x8401027c     0x32    or a4,a4,a5
    0x8401027e     0x34    mv a0,a4
    0x84010280     0x36    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010282     0x38    slli a4,a0,0x19
    0x84010286     0x3c    srli a4,a4,0x19
    0x84010288     0x3e    srli a5,a0,0x26
    0x8401028c     0x42    andi a5,a5,1
    0x8401028e     0x44    beqz a5,ffffffff84010296 <cap_get_capPtr+0x4c>
    0x84010290     0x46    li a5,-1
    0x84010292     0x48    slli a5,a5,0x27
    0x84010294     0x4a    or a4,a4,a5
    0x84010296     0x4c    mv a0,a4
    0x84010298     0x4e    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x8401029a     0x50    slli a4,a0,0x19
    0x8401029e     0x54    srli a4,a4,0x19
    0x840102a0     0x56    srli a5,a0,0x26
    0x840102a4     0x5a    andi a5,a5,1
    0x840102a6     0x5c    beqz a5,ffffffff840102ae <cap_get_capPtr+0x64>
    0x840102a8     0x5e    li a5,-1
    0x840102aa     0x60    slli a5,a5,0x27
    0x840102ac     0x62    or a4,a4,a5
    0x840102ae     0x64    mv a0,a4
    0x840102b0     0x66    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x840102b2     0x68    slli a5,a0,0x1
    0x840102b6     0x6c    lui a0,0xfc000
    0x840102ba     0x70    srli a0,a0,0x19
    0x840102bc     0x72    and a0,a0,a5
    0x840102be     0x74    srli a5,a5,0x26
    0x840102c0     0x76    andi a5,a5,1
    0x840102c2     0x78    beqz a5,ffffffff8401037a <cap_get_capPtr+0x130>
    0x840102c4     0x7a    li a5,-1
    0x840102c6     0x7c    slli a5,a5,0x27
    0x840102c8     0x7e    or a0,a0,a5
    0x840102ca     0x80    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x840102cc     0x82    slli a5,a0,0x19
    0x840102d0     0x86    srli a5,a5,0x19
    0x840102d2     0x88    srli a0,a0,0x26
    0x840102d4     0x8a    andi a0,a0,1
    0x840102d6     0x8c    beqz a0,ffffffff840102de <cap_get_capPtr+0x94>
    0x840102d8     0x8e    li a4,-1
    0x840102da     0x90    slli a4,a4,0x27
    0x840102dc     0x92    or a5,a5,a4
    0x840102de     0x94    andi a0,a5,-1024
    0x840102e2     0x98    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x840102e4     0x9a    andi a5,a0,127
    0x840102e8     0x9e    li a4,64
    0x840102ec     0xa2    beq a5,a4,ffffffff84010300 <cap_get_capPtr+0xb6>
    0x840102f0     0xa6    andi a0,a0,63
    0x840102f4     0xaa    addiw a0,a0,1
    0x840102f6     0xac    li a5,-1
    0x840102f8     0xae    sll a0,a5,a0
    0x840102fc     0xb2    and a0,a0,a1
    0x840102fe     0xb4    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010300     0xb6    li a0,4
    0x84010302     0xb8    j ffffffff840102f4 <cap_get_capPtr+0xaa>
    0x84010304     0xba    mv a0,a1
    0x84010306     0xbc    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010308     0xbe    srli a1,a1,0x10
    0x8401030a     0xc0    slli a0,a1,0x19
    0x8401030e     0xc4    srli a0,a0,0x19
    0x84010310     0xc6    srli a1,a1,0x26
    0x84010312     0xc8    andi a1,a1,1
    0x84010314     0xca    beqz a1,ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010316     0xcc    li a5,-1
    0x84010318     0xce    slli a5,a5,0x27
    0x8401031a     0xd0    or a0,a0,a5
    0x8401031c     0xd2    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x8401031e     0xd4    li a4,3
    0x84010320     0xd6    beq a5,a4,ffffffff84010348 <cap_get_capPtr+0xfe>
    0x84010324     0xda    li a4,13
    0x84010326     0xdc    beq a5,a4,ffffffff8401035e <cap_get_capPtr+0x114>
    0x8401032a     0xe0    li a4,1
    0x8401032c     0xe2    li a0,0
    0x8401032e     0xe4    bne a5,a4,ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010332     0xe8    srli a1,a1,0x9
    0x84010334     0xea    slli a0,a1,0x19
    0x84010338     0xee    srli a0,a0,0x19
    0x8401033a     0xf0    srli a1,a1,0x26
    0x8401033c     0xf2    andi a1,a1,1
    0x8401033e     0xf4    beqz a1,ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010340     0xf6    li a5,-1
    0x84010342     0xf8    slli a5,a5,0x27
    0x84010344     0xfa    or a0,a0,a5
    0x84010346     0xfc    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010348     0xfe    srli a1,a1,0x9
    0x8401034a    0x100    slli a0,a1,0x19
    0x8401034e    0x104    srli a0,a0,0x19
    0x84010350    0x106    srli a1,a1,0x26
    0x84010352    0x108    andi a1,a1,1
    0x84010354    0x10a    beqz a1,ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010356    0x10c    li a5,-1
    0x84010358    0x10e    slli a5,a5,0x27
    0x8401035a    0x110    or a0,a0,a5
    0x8401035c    0x112    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x8401035e    0x114    slli a5,a0,0x2
    0x84010362    0x118    lui a0,0xf8000
    0x84010366    0x11c    srli a0,a0,0x19
    0x84010368    0x11e    and a0,a0,a5
    0x8401036a    0x120    srli a5,a5,0x26
    0x8401036c    0x122    andi a5,a5,1
    0x8401036e    0x124    beqz a5,ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010370    0x126    li a5,-1
    0x84010372    0x128    slli a5,a5,0x27
    0x84010374    0x12a    or a0,a0,a5
    0x84010376    0x12c    j ffffffff8401037a <cap_get_capPtr+0x130>
    0x84010378    0x12e    li a0,0
    0x8401037a    0x130    addi sp,sp,16
    0x8401037c    0x132    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
120 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cap_get_capPtr` has 222 nodes.

Section validFaultHandler (80 of 301)
=====================================

Deriving specifications
-----------------------

Section `validFaultHandler` consists of 26 instructions.


Stack analysis
---------------

No stack accesses found. Code for `validFaultHandler`:

    0x84010206     0x0    addi sp,sp,-16
    0x84010208     0x2    srli a5,a0,0x3b
    0x8401020c     0x6    beqz a5,ffffffff84010246 <validFaultHandler+0x40>
    0x8401020e     0x8    li a4,4
    0x84010210     0xa    bne a5,a4,ffffffff84010236 <validFaultHandler+0x30>
    0x84010214     0xe    srli a5,a0,0x37
    0x84010218    0x12    andi a5,a5,1
    0x8401021a    0x14    beqz a5,ffffffff84010228 <validFaultHandler+0x22>
    0x8401021c    0x16    srli a5,a0,0x39
    0x84010220    0x1a    srli a0,a0,0x3a
    0x84010222    0x1c    or a0,a0,a5
    0x84010224    0x1e    andi a0,a0,1
    0x84010226    0x20    bnez a0,ffffffff84010242 <validFaultHandler+0x3c>
    0x84010228    0x22    li a5,2
    0x8401022a    0x24    auipc a4,0xb
    0x8401022e    0x28    sd a5,-1514(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84010232    0x2c    li a0,0
    0x84010234    0x2e    j ffffffff84010242 <validFaultHandler+0x3c>
    0x84010236    0x30    li a5,2
    0x84010238    0x32    auipc a4,0xb
    0x8401023c    0x36    sd a5,-1528(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84010240    0x3a    li a0,0
    0x84010242    0x3c    addi sp,sp,16
    0x84010244    0x3e    ret
    0x84010246    0x40    li a0,1
    0x84010248    0x42    j ffffffff84010242 <validFaultHandler+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `validFaultHandler` has 37 nodes.

Section getNewActiveIRQ (81 of 301)
===================================

Deriving specifications
-----------------------

Section `getNewActiveIRQ` consists of 13 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `getNewActiveIRQ`:

    0x840101e2     0x0    csrr a0,sip
    0x840101e6     0x4    andi a5,a0,512
    0x840101ea     0x8    bnez a5,ffffffff840101f4 <getNewActiveIRQ+0x12>
    0x840101ec     0xa    andi a0,a0,32
    0x840101f0     0xe    bnez a0,ffffffff84010200 <getNewActiveIRQ+0x1e>
    0x840101f2    0x10    ret
    0x840101f4    0x12    lui a5,0xcc202
    0x840101f8    0x16    lw a0,4(a5)
    0x840101fa    0x18    slli a0,a0,0x20
    0x840101fc    0x1a    srli a0,a0,0x20
    0x840101fe    0x1c    ret
    0x84010200    0x1e    li a0,54
    0x84010204    0x22    j ffffffff840101f2 <getNewActiveIRQ+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNewActiveIRQ` has 21 nodes.

Section findVSpaceForASID (82 of 301)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 35 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x84010182     0x0    addi sp,sp,-16
    0x84010184     0x2    srli a5,a0,0x9
    0x84010188     0x6    slli a4,a5,0x3
    0x8401018c     0xa    auipc a5,0xa
    0x84010190     0xe    addi a5,a5,1652 # ffffffff8401a800 <riscvKSASIDTable>
    0x84010194    0x12    add a5,a5,a4
    0x84010196    0x14    ld a5,0(a5)
    0x84010198    0x16    beqz a5,ffffffff840101b2 <findVSpaceForASID+0x30>
    0x8401019a    0x18    andi a0,a0,511
    0x8401019e    0x1c    slli a0,a0,0x3
    0x840101a0    0x1e    add a0,a0,a5
    0x840101a2    0x20    ld a5,0(a0)
    0x840101a4    0x22    beqz a5,ffffffff840101ca <findVSpaceForASID+0x48>
    0x840101a6    0x24    sd zero,0(sp)         ; stack access
    0x840101a8    0x26    sd a5,8(sp)           ; stack access
    0x840101aa    0x28    ld a0,0(sp)           ; stack access
    0x840101ac    0x2a    ld a1,8(sp)           ; stack access
    0x840101ae    0x2c    addi sp,sp,16
    0x840101b0    0x2e    ret
    0x840101b2    0x30    auipc a5,0xa
    0x840101b6    0x34    addi a5,a5,1614 # ffffffff8401a800 <riscvKSASIDTable>
    0x840101ba    0x38    sd zero,1024(a5)
    0x840101be    0x3c    sd zero,1032(a5)
    0x840101c2    0x40    li a5,2
    0x840101c4    0x42    sd a5,0(sp)           ; stack access
    0x840101c6    0x44    sd zero,8(sp)         ; stack access
    0x840101c8    0x46    j ffffffff840101aa <findVSpaceForASID+0x28>
    0x840101ca    0x48    auipc a5,0xa
    0x840101ce    0x4c    addi a5,a5,1590 # ffffffff8401a800 <riscvKSASIDTable>
    0x840101d2    0x50    sd zero,1024(a5)
    0x840101d6    0x54    sd zero,1032(a5)
    0x840101da    0x58    li a5,2
    0x840101dc    0x5a    sd a5,0(sp)           ; stack access
    0x840101de    0x5c    sd zero,8(sp)         ; stack access
    0x840101e0    0x5e    j ffffffff840101aa <findVSpaceForASID+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 54 nodes.

Section pte_next (83 of 301)
============================

Deriving specifications
-----------------------

Section `pte_next` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `pte_next`:

    0x8401015e     0x0    snez a1,a1
    0x84010162     0x4    srli a0,a0,0x2
    0x84010164     0x6    lui a5,0xfff00
    0x84010168     0xa    srli a5,a5,0xa
    0x8401016a     0xc    and a0,a0,a5
    0x8401016c     0xe    slli a5,a1,0x3
    0x84010170    0x12    slli a4,a1,0x2
    0x84010174    0x16    or a5,a5,a4
    0x84010176    0x18    or a0,a0,a5
    0x84010178    0x1a    slli a1,a1,0x1
    0x8401017a    0x1c    or a0,a0,a1
    0x8401017c    0x1e    ori a0,a0,225
    0x84010180    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `pte_next` has 14 nodes.

Section idle_thread (84 of 301)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x84010158    0x0    wfi
    0x8401015c    0x4    j ffffffff84010158 <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section getSyscallArg (85 of 301)
=================================

Deriving specifications
-----------------------

Section `getSyscallArg` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getSyscallArg`:

    0x84010128     0x0    li a5,3
    0x8401012a     0x2    bgeu a5,a0,ffffffff84010138 <getSyscallArg+0x10>
    0x8401012e     0x6    addi a0,a0,1
    0x84010130     0x8    slli a0,a0,0x3
    0x84010132     0xa    add a1,a1,a0
    0x84010134     0xc    ld a0,0(a1)
    0x84010136     0xe    ret
    0x84010138    0x10    auipc a5,0xa
    0x8401013c    0x14    addi a5,a5,-1776 # ffffffff84019a48 <msgRegisters>
    0x84010140    0x18    add a0,a0,a5
    0x84010142    0x1a    lbu a5,0(a0)
    0x84010146    0x1e    slli a4,a5,0x3
    0x8401014a    0x22    auipc a5,0x1d
    0x8401014e    0x26    ld a5,-242(a5) # ffffffff8402d058 <ksCurThread>
    0x84010152    0x2a    add a5,a5,a4
    0x84010154    0x2c    ld a0,0(a5)
    0x84010156    0x2e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getSyscallArg` has 25 nodes.

Section setMR (86 of 301)
=========================

Deriving specifications
-----------------------

Section `setMR` consists of 24 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMR`:

    0x840100ea     0x0    li a5,3
    0x840100ec     0x2    bgeu a5,a2,ffffffff84010104 <setMR+0x1a>
    0x840100f0     0x6    beqz a1,ffffffff84010124 <setMR+0x3a>
    0x840100f2     0x8    addiw a2,a2,1
    0x840100f4     0xa    sext.w a0,a2
    0x840100f8     0xe    slli a2,a2,0x20
    0x840100fa    0x10    srli a2,a2,0x20
    0x840100fc    0x12    slli a2,a2,0x3
    0x840100fe    0x14    add a1,a1,a2
    0x84010100    0x16    sd a3,0(a1)
    0x84010102    0x18    ret
    0x84010104    0x1a    slli a4,a2,0x20
    0x84010108    0x1e    srli a4,a4,0x20
    0x8401010a    0x20    auipc a5,0xa
    0x8401010e    0x24    addi a5,a5,-1730 # ffffffff84019a48 <msgRegisters>
    0x84010112    0x28    add a5,a5,a4
    0x84010114    0x2a    lbu a5,0(a5)
    0x84010118    0x2e    slli a5,a5,0x3
    0x8401011a    0x30    add a0,a0,a5
    0x8401011c    0x32    sd a3,0(a0)
    0x8401011e    0x34    addiw a0,a2,1
    0x84010122    0x38    ret
    0x84010124    0x3a    li a0,4
    0x84010126    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMR` has 34 nodes.

Section clzl (87 of 301)
========================

Deriving specifications
-----------------------

Section `clzl` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `clzl`:

    0x840100cc     0x0    mv a5,a0
    0x840100ce     0x2    bltz a0,ffffffff840100e6 <clzl+0x1a>
    0x840100d2     0x6    li a0,0
    0x840100d4     0x8    li a4,65
    0x840100d8     0xc    slli a5,a5,0x1
    0x840100da     0xe    addi a0,a0,1
    0x840100dc    0x10    bltz a5,ffffffff840100e8 <clzl+0x1c>
    0x840100e0    0x14    bne a0,a4,ffffffff840100d8 <clzl+0xc>
    0x840100e4    0x18    ret
    0x840100e6    0x1a    li a0,0
    0x840100e8    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `clzl` has 19 nodes.

Section bi_finalise (88 of 301)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x84000c04     0x0    auipc a5,0x1
    0x84000c08     0x4    addi a5,a5,-1460 # ffffffff84001650 <ndks_boot>
    0x84000c0c     0x8    ld a3,592(a5)
    0x84000c10     0xc    ld a4,600(a5)
    0x84000c14    0x10    ld a5,584(a5)
    0x84000c18    0x14    sd a3,40(a5)
    0x84000c1a    0x16    sd a4,48(a5)
    0x84000c1c    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (89 of 301)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 20 instructions.

Skipping c01027f3 rdtime a5


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x840009a8     0x0    auipc a5,0x2c
    0x840009ac     0x4    sd a0,1696(a5) # ffffffff8402d048 <ksSchedulerAction>
    0x840009b0     0x8    auipc a5,0x2c
    0x840009b4     0xc    ld a5,1696(a5) # ffffffff8402d050 <ksIdleThread>
    0x840009b8    0x10    auipc a4,0x2c
    0x840009bc    0x14    sd a5,1696(a4) # ffffffff8402d058 <ksCurThread>
    0x840009c0    0x18    ld a5,368(a5)
    0x840009c4    0x1c    auipc a4,0x2c
    0x840009c8    0x20    sd a5,1636(a4) # ffffffff8402d028 <ksCurSC>
    0x840009cc    0x24    auipc a5,0x2c
    0x840009d0    0x28    sd zero,1652(a5) # ffffffff8402d040 <ksConsumed>
    0x840009d4    0x2c    li a5,1
    0x840009d6    0x2e    auipc a4,0x2c
    0x840009da    0x32    sd a5,1634(a4) # ffffffff8402d038 <ksReprogram>
    0x840009de    0x36    auipc a5,0x2c
    0x840009e2    0x3a    sd zero,1666(a5) # ffffffff8402d060 <ksReleaseHead>
    0x840009e6    0x3e    rdtime a5
    0x840009ea    0x42    auipc a4,0x2c
    0x840009ee    0x46    sd a5,1606(a4) # ffffffff8402d030 <ksCurTime>
    0x840009f2    0x4a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 31 nodes.

Section create_root_cnode (90 of 301)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_root_cnode`:

    0x8400058e     0x0    addi sp,sp,-16
    0x84000590     0x2    auipc a5,0x1
    0x84000594     0x6    addi a5,a5,192 # ffffffff84001650 <ndks_boot>
    0x84000598     0xa    lui a4,0x80
    0x8400059c     0xe    sd a4,600(a5)
    0x840005a0    0x12    ld a4,608(a5)
    0x840005a4    0x16    slli a0,a4,0x19
    0x840005a8    0x1a    srli a0,a0,0x1a
    0x840005aa    0x1c    lui a5,0xab53
    0x840005ae    0x20    slli a5,a5,0x23
    0x840005b0    0x22    or a0,a0,a5
    0x840005b2    0x24    addi a5,a4,64 # 80040 <KERNEL_OFFSET-0xfffffffefff7ffc0>
    0x840005b6    0x28    sd a0,64(a4)
    0x840005b8    0x2a    sd zero,72(a4)
    0x840005bc    0x2e    sd zero,80(a4)
    0x840005c0    0x32    li a4,3
    0x840005c2    0x34    sd a4,24(a5)
    0x840005c4    0x36    li a1,0
    0x840005c6    0x38    addi sp,sp,16
    0x840005c8    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (91 of 301)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x8400057c     0x0    addi sp,sp,-16
    0x8400057e     0x2    sd a1,0(a0)
    0x84000580     0x4    sd a2,8(a0)
    0x84000582     0x6    sd zero,16(a0) # c000010 <KERNEL_OFFSET-0xfffffffef3fffff0>
    0x84000586     0xa    li a5,3
    0x84000588     0xc    sd a5,24(a0)
    0x8400058a     0xe    addi sp,sp,16
    0x8400058c    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section initIRQController (92 of 301)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 30 instructions.

LW..
SW..

Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x840002fa     0x0    li a4,1
    0x840002fc     0x2    lui a0,0xcc001
    0x84000300     0x6    lui a6,0xcc202
    0x84000304     0xa    li a1,54
    0x84000308     0xe    j ffffffff84000310 <initIRQController+0x16>
    0x8400030a    0x10    addi a4,a4,1
    0x8400030c    0x12    beq a4,a1,ffffffff84000338 <initIRQController+0x3e>
    0x84000310    0x16    sext.w a2,a4
    0x84000314    0x1a    srli a5,a4,0x5
    0x84000318    0x1e    slli a5,a5,0x2
    0x8400031a    0x20    add a5,a5,a0
    0x8400031c    0x22    lw a5,0(a5)
    0x8400031e    0x24    slli a5,a5,0x20
    0x84000320    0x26    srli a5,a5,0x20
    0x84000322    0x28    andi a3,a4,31
    0x84000326    0x2c    srl a5,a5,a3
    0x8400032a    0x30    andi a5,a5,1
    0x8400032c    0x32    beqz a5,ffffffff8400030a <initIRQController+0x10>
    0x8400032e    0x34    lw a5,4(a6) # ffffffffcc202004 <ki_end+0x481d0004>
    0x84000332    0x38    sw a2,4(a6)
    0x84000336    0x3c    j ffffffff8400030a <initIRQController+0x10>
    0x84000338    0x3e    lui a5,0xcc000
    0x8400033c    0x42    addi a5,a5,4
    0x8400033e    0x44    li a3,2
    0x84000340    0x46    lui a4,0xcc000
    0x84000344    0x4a    addi a4,a4,220 # ffffffffcc0000dc <ki_end+0x47fce0dc>
    0x84000348    0x4e    sw a3,0(a5)
    0x8400034a    0x50    addi a5,a5,4
    0x8400034c    0x52    bne a5,a4,ffffffff84000348 <initIRQController+0x4e>
    0x84000350    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 41 nodes.

Section initLocalIRQController (93 of 301)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 22 instructions.

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x840002b6     0x0    li a3,1
    0x840002b8     0x2    lui a1,0xcc002
    0x840002bc     0x6    addi a1,a1,256 # ffffffffcc002100 <ki_end+0x47fd0100>
    0x840002c0     0xa    li a6,1
    0x840002c2     0xc    li a0,54
    0x840002c6    0x10    srli a4,a3,0x5
    0x840002ca    0x14    slli a4,a4,0x2
    0x840002cc    0x16    add a4,a4,a1
    0x840002ce    0x18    lw a2,0(a4)
    0x840002d0    0x1a    andi a5,a3,31
    0x840002d4    0x1e    sll a5,a6,a5
    0x840002d8    0x22    not a5,a5
    0x840002dc    0x26    and a5,a5,a2
    0x840002de    0x28    sext.w a5,a5
    0x840002e0    0x2a    sw a5,0(a4)
    0x840002e2    0x2c    addi a3,a3,1
    0x840002e4    0x2e    bne a3,a0,ffffffff840002c6 <initLocalIRQController+0x10>
    0x840002e8    0x32    lui a5,0xcc202
    0x840002ec    0x36    sw zero,0(a5) # ffffffffcc202000 <ki_end+0x481d0000>
    0x840002f0    0x3a    li a5,544
    0x840002f4    0x3e    csrrs a5,sie,a5
    0x840002f8    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 29 nodes.

Section initL2Cache (94 of 301)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x840002b4    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section get_avail_p_regs (95 of 301)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x840002aa    0x0    auipc a0,0x1
    0x840002ae    0x4    addi a0,a0,918 # ffffffff84001640 <avail_p_regs>
    0x840002b2    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (96 of 301)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x840002a6    0x0    li a0,1
    0x840002a8    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section activate_kernel_vspace (97 of 301)
==========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x84000138     0x0    auipc a5,0x30
    0x8400013c     0x4    addi a5,a5,-312 # ffffffff84030000 <kernel_root_pageTable>
    0x84000140     0x8    li a4,1
    0x84000142     0xa    slli a4,a4,0x20
    0x84000144     0xc    add a5,a5,a4
    0x84000146     0xe    srli a5,a5,0xc
    0x84000148    0x10    li a4,-1
    0x8400014a    0x12    srli a3,a4,0x14
    0x8400014e    0x16    and a5,a5,a3
    0x84000150    0x18    slli a4,a4,0x3f
    0x84000152    0x1a    or a5,a5,a4
    0x84000154    0x1c    csrw satp,a5
    0x84000158    0x20    sfence.vma
    0x8400015c    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (98 of 301)
=====================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x84000108     0x0    addi sp,sp,-16
    0x8400010a     0x2    addi a1,a1,-1
    0x8400010c     0x4    srli a4,a1,0x15
    0x84000110     0x8    addi a4,a4,1
    0x84000112     0xa    slli a4,a4,0x15
    0x84000114     0xc    lui a5,0xffe00
    0x84000118    0x10    and a5,a5,a0
    0x8400011a    0x12    sub a4,a4,a5
    0x8400011c    0x14    srli a4,a4,0x15
    0x8400011e    0x16    srli a5,a1,0x1e
    0x84000122    0x1a    addi a5,a5,1
    0x84000124    0x1c    slli a5,a5,0x1e
    0x84000126    0x1e    lui a3,0xc0000
    0x8400012a    0x22    and a0,a0,a3
    0x8400012c    0x24    sub a5,a5,a0
    0x8400012e    0x26    srli a5,a5,0x1e
    0x84000130    0x28    add a0,a4,a5
    0x84000134    0x2c    addi sp,sp,16
    0x84000136    0x2e    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (99 of 301)
================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x840000f2     0x0    addi sp,sp,-16
    0x840000f4     0x2    slli a1,a0,0x9
    0x840000f8     0x6    li a0,1
    0x840000fa     0x8    slli a0,a0,0x3b
    0x840000fc     0xa    lui a5,0xfe000
    0x84000100     0xe    srli a5,a5,0x10
    0x84000102    0x10    and a1,a1,a5
    0x84000104    0x12    addi sp,sp,16
    0x84000106    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section Arch_configureIdleThread (100 of 301)
=============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x840000a4     0x0    auipc a5,0x10
    0x840000a8     0x4    addi a5,a5,180 # ffffffff84010158 <idle_thread>
    0x840000ac     0x8    sd a5,272(a0)
    0x840000b0     0xc    li a5,288
    0x840000b4    0x10    sd a5,256(a0)
    0x840000b8    0x14    auipc a5,0x2d
    0x840000bc    0x18    addi a5,a5,-184 # ffffffff8402d000 <tlbLockCount>
    0x840000c0    0x1c    sd a5,8(a0)
    0x840000c2    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (101 of 301)
==================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 43 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    auipc a1,0x1
    0x8400002a     0x4    ld a1,1898(a1) # ffffffff84001790 <ndks_boot+0x140>
    0x8400002e     0x8    li a5,1
    0x84000030     0xa    bgeu a5,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000034     0xe    li a4,1
    0x84000036    0x10    auipc a2,0x1
    0x8400003a    0x14    addi a2,a2,1562 # ffffffff84001650 <ndks_boot>
    0x8400003e    0x18    auipc a6,0x1
    0x84000042    0x1c    addi a6,a6,1538 # ffffffff84001640 <avail_p_regs>
    0x84000046    0x20    j ffffffff84000086 <merge_regions+0x60>
    0x84000048    0x22    slli a5,a4,0x4
    0x8400004c    0x26    add a5,a5,a2
    0x8400004e    0x28    ld a5,8(a5)
    0x84000050    0x2a    slli a0,a0,0x4
    0x84000052    0x2c    add a0,a0,a2
    0x84000054    0x2e    sd a5,8(a0)
    0x84000056    0x30    addi a5,a4,1
    0x8400005a    0x34    bgeu a5,a1,ffffffff84000078 <merge_regions+0x52>
    0x8400005e    0x38    slli a5,a4,0x4
    0x84000062    0x3c    add a5,a5,a2
    0x84000064    0x3e    slli a0,a1,0x4
    0x84000068    0x42    add a0,a0,a6
    0x8400006a    0x44    ld a3,16(a5)
    0x8400006c    0x46    sd a3,0(a5)
    0x8400006e    0x48    ld a3,24(a5)
    0x84000070    0x4a    sd a3,8(a5)
    0x84000072    0x4c    addi a5,a5,16
    0x84000074    0x4e    bne a5,a0,ffffffff8400006a <merge_regions+0x44>
    0x84000078    0x52    addi a1,a1,-1
    0x8400007a    0x54    sd a1,320(a2)
    0x8400007e    0x58    ld a1,320(a2)
    0x84000082    0x5c    bgeu a4,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000086    0x60    addi a0,a4,-1
    0x8400008a    0x64    slli a3,a0,0x4
    0x8400008e    0x68    add a3,a3,a2
    0x84000090    0x6a    slli a5,a4,0x4
    0x84000094    0x6e    add a5,a5,a2
    0x84000096    0x70    ld a3,8(a3)
    0x84000098    0x72    ld a5,0(a5)
    0x8400009a    0x74    beq a3,a5,ffffffff84000048 <merge_regions+0x22>
    0x8400009e    0x78    addi a4,a4,1
    0x840000a0    0x7a    j ffffffff8400007e <merge_regions+0x58>
    0x840000a2    0x7c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 65 nodes.

Section str_to_long (102 of 301)
================================

Deriving specifications
-----------------------

Section `str_to_long` consists of 44 instructions.

RVC_FTTTFFFTF_____FT.
JAL.
BGE..
MUL.....
RVC_FTT_FFFFT_____TF.
RVC_FTT_T_________TF.
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `str_to_long`:

    0x84019940     0x0    addi sp,sp,-48
    0x84019942     0x2    sd ra,40(sp)          ; stack access
    0x84019944     0x4    sd s0,32(sp)          ; stack access
    0x84019946     0x6    sd s1,24(sp)          ; stack access
    0x84019948     0x8    sd s2,16(sp)          ; stack access
    0x8401994a     0xa    sd s3,8(sp)           ; stack access
    0x8401994c     0xc    mv s1,a0
    0x8401994e     0xe    lbu a0,0(a0)
    0x84019952    0x12    li a5,48
    0x84019956    0x16    li s2,10
    0x84019958    0x18    beq a0,a5,ffffffff8401998a <str_to_long+0x4a>
    0x8401995c    0x1c    lbu a0,0(s1)
    0x84019960    0x20    beqz a0,ffffffff840199a0 <str_to_long+0x60>
    0x84019962    0x22    li s0,0
    0x84019964    0x24    li s3,-1
    0x84019966    0x26    slli s2,s2,0x20
    0x84019968    0x28    srli s2,s2,0x20
    0x8401996c    0x2c    jal ra,ffffffff84019900 <char_to_long>
    0x84019970    0x30    beq a0,s3,ffffffff840199a6 <str_to_long+0x66>
    0x84019974    0x34    bge a0,s2,ffffffff840199a4 <str_to_long+0x64>
    0x84019978    0x38    mul s0,s2,s0
    0x8401997c    0x3c    add s0,s0,a0
    0x8401997e    0x3e    addi s1,s1,1
    0x84019980    0x40    lbu a0,0(s1)
    0x84019984    0x44    bnez a0,ffffffff8401996c <str_to_long+0x2c>
    0x84019986    0x46    mv a0,s0
    0x84019988    0x48    j ffffffff840199a6 <str_to_long+0x66>
    0x8401998a    0x4a    lbu a5,1(s1)
    0x8401998e    0x4e    andi a5,a5,223
    0x84019992    0x52    li a4,88
    0x84019996    0x56    bne a5,a4,ffffffff84019962 <str_to_long+0x22>
    0x8401999a    0x5a    addi s1,s1,2
    0x8401999c    0x5c    li s2,16
    0x8401999e    0x5e    j ffffffff8401995c <str_to_long+0x1c>
    0x840199a0    0x60    li a0,-1
    0x840199a2    0x62    j ffffffff840199a6 <str_to_long+0x66>
    0x840199a4    0x64    li a0,-1
    0x840199a6    0x66    ld ra,40(sp)          ; stack access
    0x840199a8    0x68    ld s0,32(sp)          ; stack access
    0x840199aa    0x6a    ld s1,24(sp)          ; stack access
    0x840199ac    0x6c    ld s2,16(sp)          ; stack access
    0x840199ae    0x6e    ld s3,8(sp)           ; stack access
    0x840199b0    0x70    addi sp,sp,48
    0x840199b2    0x72    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 72 nodes.

Section memset (103 of 301)
===========================

Deriving specifications
-----------------------

Section `memset` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `memset`:

    0x8401988c     0x0    addi sp,sp,-16
    0x8401988e     0x2    sd ra,8(sp)           ; stack access
    0x84019890     0x4    sd s0,0(sp)           ; stack access
    0x84019892     0x6    mv s0,a0
    0x84019894     0x8    mv a4,a1
    0x84019896     0xa    mv a1,a2
    0x84019898     0xc    or a5,a0,a2
    0x8401989c    0x10    andi a5,a5,7
    0x8401989e    0x12    or a5,a5,a4
    0x840198a0    0x14    bnez a5,ffffffff840198b0 <memset+0x24>
    0x840198a2    0x16    jal ra,ffffffff84017ae8 <memzero>
    0x840198a6    0x1a    mv a0,s0
    0x840198a8    0x1c    ld ra,8(sp)           ; stack access
    0x840198aa    0x1e    ld s0,0(sp)           ; stack access
    0x840198ac    0x20    addi sp,sp,16
    0x840198ae    0x22    ret
    0x840198b0    0x24    add a3,a0,a2
    0x840198b4    0x28    mv a5,a0
    0x840198b6    0x2a    beqz a2,ffffffff840198a6 <memset+0x1a>
    0x840198b8    0x2c    sb a4,0(a5)
    0x840198bc    0x30    addi a5,a5,1
    0x840198be    0x32    bne a3,a5,ffffffff840198b8 <memset+0x2c>
    0x840198c2    0x36    j ffffffff840198a6 <memset+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 36 nodes.

Section Arch_decodeInvocation (104 of 301)
==========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 7 instructions.

RVC_TFFFT____T____TF..

Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_decodeInvocation`:

    0x84018434    0x0    addi sp,sp,-32
    0x84018436    0x2    sd ra,24(sp)          ; stack access
    0x84018438    0x4    mv a6,a7
    0x8401843a    0x6    jal ra,ffffffff84017b66 <decodeRISCVMMUInvocation>
    0x8401843e    0xa    ld ra,24(sp)          ; stack access
    0x84018440    0xc    addi sp,sp,32
    0x84018442    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 11 nodes.

Section invokeTCB_Resume (105 of 301)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x840165c8    0x0    addi sp,sp,-16
    0x840165ca    0x2    sd ra,8(sp)           ; stack access
    0x840165cc    0x4    jal ra,ffffffff84013d60 <restart>
    0x840165d0    0x8    li a0,0
    0x840165d2    0xa    ld ra,8(sp)           ; stack access
    0x840165d4    0xc    addi sp,sp,16
    0x840165d6    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 11 nodes.

Section invokeTCB_Suspend (106 of 301)
======================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x840165b8    0x0    addi sp,sp,-16
    0x840165ba    0x2    sd ra,8(sp)           ; stack access
    0x840165bc    0x4    jal ra,ffffffff840137e4 <suspend>
    0x840165c0    0x8    li a0,0
    0x840165c2    0xa    ld ra,8(sp)           ; stack access
    0x840165c4    0xc    addi sp,sp,16
    0x840165c6    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section performInvocation_Reply (107 of 301)
============================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x84016086    0x0    addi sp,sp,-16
    0x84016088    0x2    sd ra,8(sp)           ; stack access
    0x8401608a    0x4    jal ra,ffffffff84015f96 <doReplyTransfer>
    0x8401608e    0x8    li a0,0
    0x84016090    0xa    ld ra,8(sp)           ; stack access
    0x84016092    0xc    addi sp,sp,16
    0x84016094    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 11 nodes.

Section performInvocation_Endpoint (108 of 301)
===============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x84015f6e     0x0    addi sp,sp,-16
    0x84015f70     0x2    sd ra,8(sp)           ; stack access
    0x84015f72     0x4    mv a7,a0
    0x84015f74     0x6    mv t1,a1
    0x84015f76     0x8    mv a0,a4
    0x84015f78     0xa    mv a1,a5
    0x84015f7a     0xc    mv a5,a6
    0x84015f7c     0xe    auipc a6,0x17
    0x84015f80    0x12    ld a6,220(a6) # ffffffff8402d058 <ksCurThread>
    0x84015f84    0x16    mv a4,a3
    0x84015f86    0x18    mv a3,a2
    0x84015f88    0x1a    mv a2,t1
    0x84015f8a    0x1c    jal ra,ffffffff84014ef6 <sendIPC>
    0x84015f8e    0x20    li a0,0
    0x84015f90    0x22    ld ra,8(sp)           ; stack access
    0x84015f92    0x24    addi sp,sp,16
    0x84015f94    0x26    ret

Proving inst theorems
---------------------

17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 22 nodes.

Section invokeCNodeRevoke (109 of 301)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeRevoke`:

    0x84015aae    0x0    addi sp,sp,-16
    0x84015ab0    0x2    sd ra,8(sp)           ; stack access
    0x84015ab2    0x4    jal ra,ffffffff84015a2a <cteRevoke>
    0x84015ab6    0x8    ld ra,8(sp)           ; stack access
    0x84015ab8    0xa    addi sp,sp,16
    0x84015aba    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 10 nodes.

Section invokeCNodeDelete (110 of 301)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x84015a1a    0x0    addi sp,sp,-16
    0x84015a1c    0x2    sd ra,8(sp)           ; stack access
    0x84015a1e    0x4    li a1,1
    0x84015a20    0x6    jal ra,ffffffff8401585a <cteDelete>
    0x84015a24    0xa    ld ra,8(sp)           ; stack access
    0x84015a26    0xc    addi sp,sp,16
    0x84015a28    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 11 nodes.

Section handleTimeout (111 of 301)
==================================

Deriving specifications
-----------------------

Section `handleTimeout` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleTimeout`:

    0x840151a0     0x0    addi sp,sp,-16
    0x840151a2     0x2    sd ra,8(sp)           ; stack access
    0x840151a4     0x4    andi a5,a0,-1024
    0x840151a8     0x8    li a3,0
    0x840151aa     0xa    ld a1,128(a5)
    0x840151ac     0xc    ld a2,136(a5)
    0x840151ae     0xe    jal ra,ffffffff84015110 <sendFaultIPC>
    0x840151b2    0x12    ld ra,8(sp)           ; stack access
    0x840151b4    0x14    addi sp,sp,16
    0x840151b6    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleTimeout` has 16 nodes.

Section sendFaultIPC (112 of 301)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 35 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `sendFaultIPC`:

    0x84015110     0x0    addi sp,sp,-32
    0x84015112     0x2    sd ra,24(sp)          ; stack access
    0x84015114     0x4    sd a2,8(sp)           ; stack access
    0x84015116     0x6    mv a5,a3
    0x84015118     0x8    srli a3,a1,0x3b
    0x8401511c     0xc    li a4,4
    0x8401511e     0xe    beq a3,a4,ffffffff8401512a <sendFaultIPC+0x1a>
    0x84015122    0x12    li a0,0
    0x84015124    0x14    ld ra,24(sp)          ; stack access
    0x84015126    0x16    addi sp,sp,32
    0x84015128    0x18    ret
    0x8401512a    0x1a    auipc a4,0x5
    0x8401512e    0x1e    addi a4,a4,1750 # ffffffff8401a800 <riscvKSASIDTable>
    0x84015132    0x22    ld a3,1736(a4)
    0x84015136    0x26    sd a3,312(a0)
    0x8401513a    0x2a    ld a4,1744(a4)
    0x8401513e    0x2e    sd a4,320(a0)
    0x84015142    0x32    srli a3,a1,0x39
    0x84015146    0x36    andi a3,a3,1
    0x84015148    0x38    srli a4,a1,0x3a
    0x8401514c    0x3c    andi a4,a4,1
    0x8401514e    0x3e    slli a7,a1,0x19
    0x84015152    0x42    srli a7,a7,0x19
    0x84015156    0x46    srli a1,a1,0x26
    0x84015158    0x48    andi a1,a1,1
    0x8401515a    0x4a    beqz a1,ffffffff84015164 <sendFaultIPC+0x54>
    0x8401515c    0x4c    li a1,-1
    0x8401515e    0x4e    slli a1,a1,0x27
    0x84015160    0x50    or a7,a7,a1
    0x84015164    0x54    mv a6,a0
    0x84015166    0x56    li a1,0
    0x84015168    0x58    li a0,1
    0x8401516a    0x5a    jal ra,ffffffff84014ef6 <sendIPC>
    0x8401516e    0x5e    li a0,1
    0x84015170    0x60    j ffffffff84015124 <sendFaultIPC+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 48 nodes.

Section lookupExtraCaps (113 of 301)
====================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 56 instructions.

RVC_FFFFT_________FT.

Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84014c0c     0x0    beqz a1,ffffffff84014c72 <lookupExtraCaps+0x66>
    0x84014c0e     0x2    addi sp,sp,-80
    0x84014c10     0x4    sd ra,72(sp)          ; stack access
    0x84014c12     0x6    sd s0,64(sp)          ; stack access
    0x84014c14     0x8    sd s1,56(sp)          ; stack access
    0x84014c16     0xa    sd s2,48(sp)          ; stack access
    0x84014c18     0xc    sd s3,40(sp)          ; stack access
    0x84014c1a     0xe    sd s4,32(sp)          ; stack access
    0x84014c1c    0x10    sd s5,24(sp)          ; stack access
    0x84014c1e    0x12    mv s4,a0
    0x84014c20    0x14    srli a2,a2,0x7
    0x84014c22    0x16    andi s3,a2,3
    0x84014c26    0x1a    beqz s3,ffffffff84014c5e <lookupExtraCaps+0x52>
    0x84014c2a    0x1e    addi s0,a1,976
    0x84014c2e    0x22    auipc s2,0x6
    0x84014c32    0x26    addi s2,s2,1122 # ffffffff8401b090 <current_extra_caps>
    0x84014c36    0x2a    li s1,0
    0x84014c38    0x2c    ld s5,0(s0)
    0x84014c3c    0x30    mv a1,s5
    0x84014c3e    0x32    mv a0,s4
    0x84014c40    0x34    jal ra,ffffffff8401124e <lookupSlot>
    0x84014c44    0x38    sd a1,8(sp)           ; stack access
    0x84014c46    0x3a    bnez a0,ffffffff84014c7e <lookupExtraCaps+0x72>
    0x84014c48    0x3c    ld a5,8(sp)           ; stack access
    0x84014c4a    0x3e    sd a5,0(s2)
    0x84014c4e    0x42    addi s1,s1,1
    0x84014c50    0x44    addi s0,s0,8
    0x84014c52    0x46    addi s2,s2,8
    0x84014c54    0x48    bne s1,s3,ffffffff84014c38 <lookupExtraCaps+0x2c>
    0x84014c58    0x4c    li a5,2
    0x84014c5a    0x4e    bltu a5,s3,ffffffff84014c90 <lookupExtraCaps+0x84>
    0x84014c5e    0x52    slli s3,s3,0x3
    0x84014c60    0x54    auipc a5,0x7
    0x84014c64    0x58    addi a5,a5,-1120 # ffffffff8401b800 <intStateIRQNode>
    0x84014c68    0x5c    add s3,s3,a5
    0x84014c6a    0x5e    sd zero,-1904(s3)
    0x84014c6e    0x62    li a0,0
    0x84014c70    0x64    j ffffffff84014c90 <lookupExtraCaps+0x84>
    0x84014c72    0x66    auipc a5,0x6
    0x84014c76    0x6a    sd zero,1054(a5) # ffffffff8401b090 <current_extra_caps>
    0x84014c7a    0x6e    li a0,0
    0x84014c7c    0x70    ret
    0x84014c7e    0x72    auipc a5,0x6
    0x84014c82    0x76    addi a5,a5,-1150 # ffffffff8401a800 <riscvKSASIDTable>
    0x84014c86    0x7a    li a4,1
    0x84014c88    0x7c    sd a4,1736(a5)
    0x84014c8c    0x80    sd s5,1744(a5)
    0x84014c90    0x84    ld ra,72(sp)          ; stack access
    0x84014c92    0x86    ld s0,64(sp)          ; stack access
    0x84014c94    0x88    ld s1,56(sp)          ; stack access
    0x84014c96    0x8a    ld s2,48(sp)          ; stack access
    0x84014c98    0x8c    ld s3,40(sp)          ; stack access
    0x84014c9a    0x8e    ld s4,32(sp)          ; stack access
    0x84014c9c    0x90    ld s5,24(sp)          ; stack access
    0x84014c9e    0x92    addi sp,sp,80
    0x84014ca0    0x94    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 91 nodes.

Section performInvocation_Notification (114 of 301)
===================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x84014930    0x0    addi sp,sp,-16
    0x84014932    0x2    sd ra,8(sp)           ; stack access
    0x84014934    0x4    jal ra,ffffffff84014648 <sendSignal>
    0x84014938    0x8    li a0,0
    0x8401493a    0xa    ld ra,8(sp)           ; stack access
    0x8401493c    0xc    addi sp,sp,16
    0x8401493e    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section schedContext_resume (115 of 301)
========================================

Deriving specifications
-----------------------

Section `schedContext_resume` consists of 33 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `schedContext_resume`:

    0x84013d0a     0x0    beqz a0,ffffffff84013d1c <schedContext_resume+0x12>
    0x84013d0c     0x2    ld a4,24(a0)
    0x84013d0e     0x4    ld a5,280(a4)
    0x84013d12     0x8    andi a5,a5,15
    0x84013d14     0xa    addi a5,a5,-1
    0x84013d16     0xc    li a3,1
    0x84013d18     0xe    bgeu a3,a5,ffffffff84013d1e <schedContext_resume+0x14>
    0x84013d1c    0x12    ret
    0x84013d1e    0x14    ld a5,368(a4)
    0x84013d22    0x18    beqz a5,ffffffff84013d1c <schedContext_resume+0x12>
    0x84013d24    0x1a    ld a5,64(a5)
    0x84013d26    0x1c    beqz a5,ffffffff84013d1c <schedContext_resume+0x12>
    0x84013d28    0x1e    ld a5,288(a4)
    0x84013d2c    0x22    andi a5,a5,1
    0x84013d2e    0x24    bnez a5,ffffffff84013d1c <schedContext_resume+0x12>
    0x84013d30    0x26    ld a5,72(a0)
    0x84013d32    0x28    slli a5,a5,0x4
    0x84013d34    0x2a    addi a4,a0,88
    0x84013d38    0x2e    add a5,a5,a4
    0x84013d3a    0x30    auipc a4,0x19
    0x84013d3e    0x34    ld a4,758(a4) # ffffffff8402d030 <ksCurTime>
    0x84013d42    0x38    addi a4,a4,10
    0x84013d44    0x3a    ld a3,0(a5)
    0x84013d46    0x3c    bltu a4,a3,ffffffff84013d52 <schedContext_resume+0x48>
    0x84013d4a    0x40    ld a4,8(a5)
    0x84013d4c    0x42    li a5,19
    0x84013d4e    0x44    bltu a5,a4,ffffffff84013d1c <schedContext_resume+0x12>
    0x84013d52    0x48    addi sp,sp,-16
    0x84013d54    0x4a    sd ra,8(sp)           ; stack access
    0x84013d56    0x4c    jal ra,ffffffff84013ce4 <postpone>
    0x84013d5a    0x50    ld ra,8(sp)           ; stack access
    0x84013d5c    0x52    addi sp,sp,16
    0x84013d5e    0x54    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
33 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_resume` has 61 nodes.

Section deletingIRQHandler (116 of 301)
=======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletingIRQHandler`:

    0x84013c54     0x0    addi sp,sp,-16
    0x84013c56     0x2    sd ra,8(sp)           ; stack access
    0x84013c58     0x4    slli a0,a0,0x5
    0x84013c5a     0x6    auipc a5,0x8
    0x84013c5e     0xa    addi a5,a5,-1114 # ffffffff8401b800 <intStateIRQNode>
    0x84013c62     0xe    add a0,a0,a5
    0x84013c64    0x10    jal ra,ffffffff84013b06 <cteDeleteOne>
    0x84013c68    0x14    ld ra,8(sp)           ; stack access
    0x84013c6a    0x16    addi sp,sp,16
    0x84013c6c    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 14 nodes.

Section invokeIRQHandler_ClearIRQHandler (117 of 301)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeIRQHandler_ClearIRQHandler`:

    0x84013b70     0x0    addi sp,sp,-16
    0x84013b72     0x2    sd ra,8(sp)           ; stack access
    0x84013b74     0x4    slli a0,a0,0x5
    0x84013b76     0x6    auipc a5,0x8
    0x84013b7a     0xa    addi a5,a5,-886 # ffffffff8401b800 <intStateIRQNode>
    0x84013b7e     0xe    add a0,a0,a5
    0x84013b80    0x10    jal ra,ffffffff84013b06 <cteDeleteOne>
    0x84013b84    0x14    ld ra,8(sp)           ; stack access
    0x84013b86    0x16    addi sp,sp,16
    0x84013b88    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 14 nodes.

Section schedContext_unbindAllTCBs (118 of 301)
===============================================

Deriving specifications
-----------------------

Section `schedContext_unbindAllTCBs` consists of 9 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `schedContext_unbindAllTCBs`:

    0x84013860     0x0    ld a1,24(a0)
    0x84013862     0x2    beqz a1,ffffffff84013872 <schedContext_unbindAllTCBs+0x12>
    0x84013864     0x4    addi sp,sp,-16
    0x84013866     0x6    sd ra,8(sp)           ; stack access
    0x84013868     0x8    jal ra,ffffffff84013828 <schedContext_unbindTCB>
    0x8401386c     0xc    ld ra,8(sp)           ; stack access
    0x8401386e     0xe    addi sp,sp,16
    0x84013870    0x10    ret
    0x84013872    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindAllTCBs` has 17 nodes.

Section reorderNTFN (119 of 301)
================================

Deriving specifications
-----------------------

Section `reorderNTFN` consists of 73 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `reorderNTFN`:

    0x8401363a     0x0    addi sp,sp,-48
    0x8401363c     0x2    sd ra,40(sp)          ; stack access
    0x8401363e     0x4    sd s0,32(sp)          ; stack access
    0x84013640     0x6    sd s1,24(sp)          ; stack access
    0x84013642     0x8    mv s1,a0
    0x84013644     0xa    mv s0,a1
    0x84013646     0xc    ld a5,8(a0)
    0x84013648     0xe    slli a1,a5,0x19
    0x8401364c    0x12    srli a1,a1,0x19
    0x8401364e    0x14    srli a5,a5,0x26
    0x84013650    0x16    andi a5,a5,1
    0x84013652    0x18    beqz a5,ffffffff8401365a <reorderNTFN+0x20>
    0x84013654    0x1a    li a5,-1
    0x84013656    0x1c    slli a5,a5,0x27
    0x84013658    0x1e    or a1,a1,a5
    0x8401365a    0x20    ld a5,0(s1)
    0x8401365c    0x22    srli a2,a5,0x19
    0x84013660    0x26    bgez a5,ffffffff8401366a <reorderNTFN+0x30>
    0x84013664    0x2a    li a5,-1
    0x84013666    0x2c    slli a5,a5,0x27
    0x84013668    0x2e    or a2,a2,a5
    0x8401366a    0x30    mv a0,s0
    0x8401366c    0x32    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x84013670    0x36    sd a0,0(sp)           ; stack access
    0x84013672    0x38    sd a1,8(sp)           ; stack access
    0x84013674    0x3a    mv a5,a1
    0x84013676    0x3c    bnez a1,ffffffff840136ae <reorderNTFN+0x74>
    0x84013678    0x3e    mv a4,a1
    0x8401367a    0x40    mv a0,s0
    0x8401367c    0x42    mv a2,s0
    0x8401367e    0x44    sd a4,408(s0)
    0x84013682    0x48    sd a5,416(s0)
    0x84013686    0x4c    ld a4,8(s1)
    0x84013688    0x4e    li a3,-1
    0x8401368a    0x50    slli a5,a3,0x27
    0x8401368e    0x54    and a4,a4,a5
    0x84013690    0x56    srli a3,a3,0x19
    0x84013692    0x58    and a0,a0,a3
    0x84013694    0x5a    or a0,a0,a4
    0x84013696    0x5c    sd a0,8(s1)
    0x84013698    0x5e    ld a5,0(s1)
    0x8401369a    0x60    slli a5,a5,0x27
    0x8401369c    0x62    srli a5,a5,0x27
    0x8401369e    0x64    slli a2,a2,0x19
    0x840136a0    0x66    or a5,a5,a2
    0x840136a2    0x68    sd a5,0(s1)
    0x840136a4    0x6a    ld ra,40(sp)          ; stack access
    0x840136a6    0x6c    ld s0,32(sp)          ; stack access
    0x840136a8    0x6e    ld s1,24(sp)          ; stack access
    0x840136aa    0x70    addi sp,sp,48
    0x840136ac    0x72    ret
    0x840136ae    0x74    ld a2,360(s0)
    0x840136b2    0x78    mv a3,a1
    0x840136b4    0x7a    li a4,0
    0x840136b6    0x7c    ld a5,360(a3) # fffffffff8000168 <ki_end+0x73fce168>
    0x840136ba    0x80    bltu a5,a2,ffffffff840136d2 <reorderNTFN+0x98>
    0x840136be    0x84    sd s0,408(a3)
    0x840136c2    0x88    mv a5,a3
    0x840136c4    0x8a    mv a2,s0
    0x840136c6    0x8c    beqz a4,ffffffff8401367e <reorderNTFN+0x44>
    0x840136c8    0x8e    sd s0,416(a4)
    0x840136cc    0x92    mv a2,a1
    0x840136ce    0x94    mv a5,a3
    0x840136d0    0x96    j ffffffff8401367e <reorderNTFN+0x44>
    0x840136d2    0x98    ld a5,416(a3)
    0x840136d6    0x9c    bnez a5,ffffffff840136e0 <reorderNTFN+0xa6>
    0x840136d8    0x9e    mv a4,a3
    0x840136da    0xa0    mv a3,a5
    0x840136dc    0xa2    mv a0,s0
    0x840136de    0xa4    j ffffffff840136c8 <reorderNTFN+0x8e>
    0x840136e0    0xa6    mv a4,a3
    0x840136e2    0xa8    mv a3,a5
    0x840136e4    0xaa    j ffffffff840136b6 <reorderNTFN+0x7c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reorderNTFN` has 108 nodes.

Section reorderEP (120 of 301)
==============================

Deriving specifications
-----------------------

Section `reorderEP` consists of 66 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `reorderEP`:

    0x8401343a     0x0    addi sp,sp,-48
    0x8401343c     0x2    sd ra,40(sp)          ; stack access
    0x8401343e     0x4    sd s0,32(sp)          ; stack access
    0x84013440     0x6    sd s1,24(sp)          ; stack access
    0x84013442     0x8    mv s1,a0
    0x84013444     0xa    mv s0,a1
    0x84013446     0xc    ld a1,8(a0)
    0x84013448     0xe    ld a5,0(a0)
    0x8401344a    0x10    lui a2,0xf8000
    0x8401344e    0x14    srli a2,a2,0x19
    0x84013450    0x16    and a2,a2,a5
    0x84013452    0x18    srli a5,a5,0x26
    0x84013454    0x1a    andi a5,a5,1
    0x84013456    0x1c    beqz a5,ffffffff8401345e <reorderEP+0x24>
    0x84013458    0x1e    li a5,-1
    0x8401345a    0x20    slli a5,a5,0x27
    0x8401345c    0x22    or a2,a2,a5
    0x8401345e    0x24    mv a0,s0
    0x84013460    0x26    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x84013464    0x2a    sd a0,0(sp)           ; stack access
    0x84013466    0x2c    sd a1,8(sp)           ; stack access
    0x84013468    0x2e    mv a5,a1
    0x8401346a    0x30    bnez a1,ffffffff8401349c <reorderEP+0x62>
    0x8401346c    0x32    mv a4,a1
    0x8401346e    0x34    mv a0,s0
    0x84013470    0x36    mv a3,s0
    0x84013472    0x38    sd a5,408(s0)
    0x84013476    0x3c    sd a4,416(s0)
    0x8401347a    0x40    sd a0,8(s1)
    0x8401347c    0x42    ld a5,0(s1)
    0x8401347e    0x44    li a4,-1
    0x84013480    0x46    slli a4,a4,0x27
    0x84013482    0x48    addi a4,a4,3
    0x84013484    0x4a    and a5,a5,a4
    0x84013486    0x4c    lui a4,0xf8000
    0x8401348a    0x50    srli a4,a4,0x19
    0x8401348c    0x52    and a3,a3,a4
    0x8401348e    0x54    or a5,a5,a3
    0x84013490    0x56    sd a5,0(s1)
    0x84013492    0x58    ld ra,40(sp)          ; stack access
    0x84013494    0x5a    ld s0,32(sp)          ; stack access
    0x84013496    0x5c    ld s1,24(sp)          ; stack access
    0x84013498    0x5e    addi sp,sp,48
    0x8401349a    0x60    ret
    0x8401349c    0x62    ld a3,360(s0)
    0x840134a0    0x66    mv a4,a1
    0x840134a2    0x68    li a2,0
    0x840134a4    0x6a    ld a5,360(a4) # fffffffff8000168 <ki_end+0x73fce168>
    0x840134a8    0x6e    bltu a5,a3,ffffffff840134c0 <reorderEP+0x86>
    0x840134ac    0x72    sd s0,408(a4)
    0x840134b0    0x76    mv a5,a2
    0x840134b2    0x78    mv a3,s0
    0x840134b4    0x7a    beqz a2,ffffffff84013472 <reorderEP+0x38>
    0x840134b6    0x7c    sd s0,416(a2) # fffffffff80001a0 <ki_end+0x73fce1a0>
    0x840134ba    0x80    mv a3,a1
    0x840134bc    0x82    mv a5,a2
    0x840134be    0x84    j ffffffff84013472 <reorderEP+0x38>
    0x840134c0    0x86    ld a5,416(a4)
    0x840134c4    0x8a    bnez a5,ffffffff840134ce <reorderEP+0x94>
    0x840134c6    0x8c    mv a0,s0
    0x840134c8    0x8e    mv a2,a4
    0x840134ca    0x90    mv a4,a5
    0x840134cc    0x92    j ffffffff840134b6 <reorderEP+0x7c>
    0x840134ce    0x94    mv a2,a4
    0x840134d0    0x96    mv a4,a5
    0x840134d2    0x98    j ffffffff840134a4 <reorderEP+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reorderEP` has 98 nodes.

Section invokeCNodeCancelBadgedSends (121 of 301)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 18 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x84013414     0x0    addi sp,sp,-32
    0x84013416     0x2    sd ra,24(sp)          ; stack access
    0x84013418     0x4    sd a0,0(sp)           ; stack access
    0x8401341a     0x6    beqz a1,ffffffff84013432 <invokeCNodeCancelBadgedSends+0x1e>
    0x8401341c     0x8    mv a5,a0
    0x8401341e     0xa    slli a0,a0,0x19
    0x84013420     0xc    srli a0,a0,0x19
    0x84013422     0xe    srli a5,a5,0x26
    0x84013424    0x10    andi a5,a5,1
    0x84013426    0x12    beqz a5,ffffffff8401342e <invokeCNodeCancelBadgedSends+0x1a>
    0x84013428    0x14    li a5,-1
    0x8401342a    0x16    slli a5,a5,0x27
    0x8401342c    0x18    or a0,a0,a5
    0x8401342e    0x1a    jal ra,ffffffff84013326 <cancelBadgedSends>
    0x84013432    0x1e    li a0,0
    0x84013434    0x20    ld ra,24(sp)          ; stack access
    0x84013436    0x22    addi sp,sp,32
    0x84013438    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 27 nodes.

Section scheduleChooseNewThread (122 of 301)
============================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 39 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleChooseNewThread`:

    0x84012fea     0x0    addi sp,sp,-16
    0x84012fec     0x2    sd ra,8(sp)           ; stack access
    0x84012fee     0x4    auipc a5,0x1a
    0x84012ff2     0x8    ld a5,34(a5) # ffffffff8402d010 <ksDomainTime>
    0x84012ff6     0xc    beqz a5,ffffffff84013002 <scheduleChooseNewThread+0x18>
    0x84012ff8     0xe    jal ra,ffffffff84012f6e <chooseThread>
    0x84012ffc    0x12    ld ra,8(sp)           ; stack access
    0x84012ffe    0x14    addi sp,sp,16
    0x84013000    0x16    ret
    0x84013002    0x18    auipc a5,0x1a
    0x84013006    0x1c    ld a5,6(a5) # ffffffff8402d008 <ksDomScheduleIdx>
    0x8401300a    0x20    addi a5,a5,1
    0x8401300c    0x22    li a4,2
    0x8401300e    0x24    bltu a4,a5,ffffffff84013060 <scheduleChooseNewThread+0x76>
    0x84013012    0x28    auipc a4,0x1a
    0x84013016    0x2c    sd a5,-10(a4) # ffffffff8402d008 <ksDomScheduleIdx>
    0x8401301a    0x30    li a5,1
    0x8401301c    0x32    auipc a4,0x1a
    0x84013020    0x36    sd a5,28(a4) # ffffffff8402d038 <ksReprogram>
    0x84013024    0x3a    auipc a5,0x1a
    0x84013028    0x3e    sd zero,-4(a5) # ffffffff8402d020 <ksWorkUnitsCompleted>
    0x8401302c    0x42    auipc a5,0x1a
    0x84013030    0x46    ld a5,-36(a5) # ffffffff8402d008 <ksDomScheduleIdx>
    0x84013034    0x4a    slli a4,a5,0x4
    0x84013038    0x4e    auipc a5,0x7
    0x8401303c    0x52    addi a5,a5,-416 # ffffffff84019e98 <fault_messages>
    0x84013040    0x56    add a5,a5,a4
    0x84013042    0x58    ld a4,96(a5)
    0x84013044    0x5a    auipc a3,0x1a
    0x84013048    0x5e    sd a4,-44(a3) # ffffffff8402d018 <ksCurDomain>
    0x8401304c    0x62    ld a5,104(a5)
    0x8401304e    0x64    li a4,1000
    0x84013052    0x68    mul a5,a5,a4
    0x84013056    0x6c    auipc a4,0x1a
    0x8401305a    0x70    sd a5,-70(a4) # ffffffff8402d010 <ksDomainTime>
    0x8401305e    0x74    j ffffffff84012ff8 <scheduleChooseNewThread+0xe>
    0x84013060    0x76    auipc a5,0x1a
    0x84013064    0x7a    sd zero,-88(a5) # ffffffff8402d008 <ksDomScheduleIdx>
    0x84013068    0x7e    j ffffffff8401301a <scheduleChooseNewThread+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 58 nodes.

Section reply_remove_tcb (123 of 301)
=====================================

Deriving specifications
-----------------------

Section `reply_remove_tcb` consists of 68 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `reply_remove_tcb`:

    0x84012bc4     0x0    addi sp,sp,-16
    0x84012bc6     0x2    sd ra,8(sp)           ; stack access
    0x84012bc8     0x4    ld a4,288(a0)
    0x84012bcc     0x8    srli a4,a4,0x1
    0x84012bce     0xa    lui a5,0xe0000
    0x84012bd2     0xe    srli a5,a5,0x19
    0x84012bd4    0x10    and a5,a5,a4
    0x84012bd6    0x12    srli a4,a4,0x26
    0x84012bd8    0x14    andi a4,a4,1
    0x84012bda    0x16    beqz a4,ffffffff84012be2 <reply_remove_tcb+0x1e>
    0x84012bdc    0x18    li a4,-1
    0x84012bde    0x1a    slli a4,a4,0x27
    0x84012be0    0x1c    or a5,a5,a4
    0x84012be2    0x1e    mv a6,a5
    0x84012be4    0x20    ld a1,16(a5)
    0x84012be6    0x22    slli a2,a1,0x19
    0x84012bea    0x26    srli a2,a2,0x19
    0x84012bec    0x28    srli a4,a1,0x26
    0x84012bf0    0x2c    andi a4,a4,1
    0x84012bf2    0x2e    beqz a4,ffffffff84012c1e <reply_remove_tcb+0x5a>
    0x84012bf4    0x30    li a4,-1
    0x84012bf6    0x32    slli a3,a4,0x27
    0x84012bfa    0x36    or a2,a2,a3
    0x84012bfc    0x38    ld a3,8(a5)
    0x84012bfe    0x3a    srli a5,a4,0x19
    0x84012c02    0x3e    and a5,a5,a3
    0x84012c04    0x40    srli a3,a3,0x26
    0x84012c06    0x42    andi a3,a3,1
    0x84012c08    0x44    beqz a3,ffffffff84012c10 <reply_remove_tcb+0x4c>
    0x84012c0a    0x46    li a4,-1
    0x84012c0c    0x48    slli a4,a4,0x27
    0x84012c0e    0x4a    or a5,a5,a4
    0x84012c10    0x4c    srli a1,a1,0x30
    0x84012c12    0x4e    andi a1,a1,1
    0x84012c14    0x50    beqz a1,ffffffff84012c68 <reply_remove_tcb+0xa4>
    0x84012c16    0x52    sd zero,32(a2)
    0x84012c1a    0x56    beqz a5,ffffffff84012c3c <reply_remove_tcb+0x78>
    0x84012c1c    0x58    j ffffffff84012c38 <reply_remove_tcb+0x74>
    0x84012c1e    0x5a    ld a4,8(a5)
    0x84012c20    0x5c    slli a5,a4,0x19
    0x84012c24    0x60    srli a5,a5,0x19
    0x84012c26    0x62    srli a4,a4,0x26
    0x84012c28    0x64    andi a4,a4,1
    0x84012c2a    0x66    bnez a4,ffffffff84012c30 <reply_remove_tcb+0x6c>
    0x84012c2c    0x68    beqz a2,ffffffff84012c1a <reply_remove_tcb+0x56>
    0x84012c2e    0x6a    j ffffffff84012c10 <reply_remove_tcb+0x4c>
    0x84012c30    0x6c    li a4,-1
    0x84012c32    0x6e    slli a4,a4,0x27
    0x84012c34    0x70    or a5,a5,a4
    0x84012c36    0x72    bnez a2,ffffffff84012c10 <reply_remove_tcb+0x4c>
    0x84012c38    0x74    sd zero,16(a5) # ffffffffe0000010 <ki_end+0x5bfce010>
    0x84012c3c    0x78    sd zero,8(a6)
    0x84012c40    0x7c    sd zero,16(a6)
    0x84012c44    0x80    ld a0,0(a6)
    0x84012c48    0x84    ld a4,288(a0)
    0x84012c4c    0x88    li a5,-1
    0x84012c4e    0x8a    slli a5,a5,0x28
    0x84012c50    0x8c    addi a5,a5,31
    0x84012c52    0x8e    and a5,a5,a4
    0x84012c54    0x90    sd a5,288(a0)
    0x84012c58    0x94    sd zero,0(a6)
    0x84012c5c    0x98    li a1,0
    0x84012c5e    0x9a    jal ra,ffffffff84012996 <setThreadState>
    0x84012c62    0x9e    ld ra,8(sp)           ; stack access
    0x84012c64    0xa0    addi sp,sp,16
    0x84012c66    0xa2    ret
    0x84012c68    0xa4    sd zero,8(a2)
    0x84012c6c    0xa8    j ffffffff84012c1a <reply_remove_tcb+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_remove_tcb` has 101 nodes.

Section handleNoFaultHandler (124 of 301)
=========================================

Deriving specifications
-----------------------

Section `handleNoFaultHandler` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleNoFaultHandler`:

    0x84012a90    0x0    addi sp,sp,-16
    0x84012a92    0x2    sd ra,8(sp)           ; stack access
    0x84012a94    0x4    li a1,0
    0x84012a96    0x6    jal ra,ffffffff84012996 <setThreadState>
    0x84012a9a    0xa    ld ra,8(sp)           ; stack access
    0x84012a9c    0xc    addi sp,sp,16
    0x84012a9e    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleNoFaultHandler` has 11 nodes.

Section setThreadState (125 of 301)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setThreadState`:

    0x84012996     0x0    addi sp,sp,-16
    0x84012998     0x2    sd ra,8(sp)           ; stack access
    0x8401299a     0x4    ld a5,280(a0)
    0x8401299e     0x8    andi a5,a5,-16
    0x840129a0     0xa    andi a1,a1,15
    0x840129a2     0xc    or a5,a5,a1
    0x840129a4     0xe    sd a5,280(a0)
    0x840129a8    0x12    jal ra,ffffffff8401294e <scheduleTCB>
    0x840129ac    0x16    ld ra,8(sp)           ; stack access
    0x840129ae    0x18    addi sp,sp,16
    0x840129b0    0x1a    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 17 nodes.

Section scheduleTCB (126 of 301)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 26 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleTCB`:

    0x8401294e     0x0    auipc a5,0x1a
    0x84012952     0x4    ld a5,1802(a5) # ffffffff8402d058 <ksCurThread>
    0x84012956     0x8    beq a5,a0,ffffffff8401295c <scheduleTCB+0xe>
    0x8401295a     0xc    ret
    0x8401295c     0xe    auipc a5,0x1a
    0x84012960    0x12    ld a5,1772(a5) # ffffffff8402d048 <ksSchedulerAction>
    0x84012964    0x16    bnez a5,ffffffff8401295a <scheduleTCB+0xc>
    0x84012966    0x18    ld a5,280(a0)
    0x8401296a    0x1c    andi a5,a5,15
    0x8401296c    0x1e    addi a5,a5,-1
    0x8401296e    0x20    li a4,1
    0x84012970    0x22    bgeu a4,a5,ffffffff84012982 <scheduleTCB+0x34>
    0x84012974    0x26    addi sp,sp,-16
    0x84012976    0x28    sd ra,8(sp)           ; stack access
    0x84012978    0x2a    jal ra,ffffffff840128fc <rescheduleRequired>
    0x8401297c    0x2e    ld ra,8(sp)           ; stack access
    0x8401297e    0x30    addi sp,sp,16
    0x84012980    0x32    ret
    0x84012982    0x34    ld a5,368(a0)
    0x84012986    0x38    beqz a5,ffffffff84012974 <scheduleTCB+0x26>
    0x84012988    0x3a    ld a5,64(a5)
    0x8401298a    0x3c    beqz a5,ffffffff84012974 <scheduleTCB+0x26>
    0x8401298c    0x3e    ld a5,288(a0)
    0x84012990    0x42    andi a5,a5,1
    0x84012992    0x44    beqz a5,ffffffff8401295a <scheduleTCB+0xc>
    0x84012994    0x46    j ffffffff84012974 <scheduleTCB+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 49 nodes.

Section rescheduleRequired (127 of 301)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 29 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `rescheduleRequired`:

    0x840128fc     0x0    auipc a0,0x1a
    0x84012900     0x4    ld a0,1868(a0) # ffffffff8402d048 <ksSchedulerAction>
    0x84012904     0x8    li a5,1
    0x84012906     0xa    bgeu a5,a0,ffffffff84012918 <rescheduleRequired+0x1c>
    0x8401290a     0xe    ld a5,280(a0)
    0x8401290e    0x12    andi a5,a5,15
    0x84012910    0x14    addi a5,a5,-1
    0x84012912    0x16    li a4,1
    0x84012914    0x18    bgeu a4,a5,ffffffff84012924 <rescheduleRequired+0x28>
    0x84012918    0x1c    li a5,1
    0x8401291a    0x1e    auipc a4,0x1a
    0x8401291e    0x22    sd a5,1838(a4) # ffffffff8402d048 <ksSchedulerAction>
    0x84012922    0x26    ret
    0x84012924    0x28    ld a5,368(a0)
    0x84012928    0x2c    beqz a5,ffffffff84012918 <rescheduleRequired+0x1c>
    0x8401292a    0x2e    ld a5,64(a5)
    0x8401292c    0x30    beqz a5,ffffffff84012918 <rescheduleRequired+0x1c>
    0x8401292e    0x32    ld a5,288(a0)
    0x84012932    0x36    andi a5,a5,1
    0x84012934    0x38    bnez a5,ffffffff84012918 <rescheduleRequired+0x1c>
    0x84012936    0x3a    addi sp,sp,-16
    0x84012938    0x3c    sd ra,8(sp)           ; stack access
    0x8401293a    0x3e    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x8401293e    0x42    li a5,1
    0x84012940    0x44    auipc a4,0x1a
    0x84012944    0x48    sd a5,1800(a4) # ffffffff8402d048 <ksSchedulerAction>
    0x84012948    0x4c    ld ra,8(sp)           ; stack access
    0x8401294a    0x4e    addi sp,sp,16
    0x8401294c    0x50    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 51 nodes.

Section doFaultTransfer (128 of 301)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x840127be     0x0    addi sp,sp,-32
    0x840127c0     0x2    sd ra,24(sp)          ; stack access
    0x840127c2     0x4    sd s0,16(sp)          ; stack access
    0x840127c4     0x6    sd s1,8(sp)           ; stack access
    0x840127c6     0x8    sd s2,0(sp)           ; stack access
    0x840127c8     0xa    mv s2,a0
    0x840127ca     0xc    mv s1,a1
    0x840127cc     0xe    mv s0,a2
    0x840127ce    0x10    mv a2,a3
    0x840127d0    0x12    mv a1,s0
    0x840127d2    0x14    mv a0,s1
    0x840127d4    0x16    jal ra,ffffffff840125e4 <setMRs_fault>
    0x840127d8    0x1a    ld a5,312(s1)
    0x840127dc    0x1e    slli a5,a5,0xc
    0x840127de    0x20    lui a4,0xf
    0x840127e0    0x22    and a5,a5,a4
    0x840127e2    0x24    andi a0,a0,127
    0x840127e6    0x28    or a5,a5,a0
    0x840127e8    0x2a    sd a5,80(s0)
    0x840127ea    0x2c    sd s2,72(s0)
    0x840127ee    0x30    ld ra,24(sp)          ; stack access
    0x840127f0    0x32    ld s0,16(sp)          ; stack access
    0x840127f2    0x34    ld s1,8(sp)           ; stack access
    0x840127f4    0x36    ld s2,0(sp)           ; stack access
    0x840127f6    0x38    addi sp,sp,32
    0x840127f8    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section slotCapLongRunningDelete (129 of 301)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 24 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x840123d8     0x0    addi sp,sp,-16
    0x840123da     0x2    sd ra,8(sp)           ; stack access
    0x840123dc     0x4    sd s0,0(sp)           ; stack access
    0x840123de     0x6    ld s0,0(a0)
    0x840123e0     0x8    srli s0,s0,0x3b
    0x840123e2     0xa    beqz s0,ffffffff84012400 <slotCapLongRunningDelete+0x28>
    0x840123e4     0xc    jal ra,ffffffff84012382 <isFinalCapability>
    0x840123e8    0x10    beqz a0,ffffffff8401240a <slotCapLongRunningDelete+0x32>
    0x840123ea    0x12    addi s0,s0,-10
    0x840123ec    0x14    li a5,8
    0x840123ee    0x16    bltu a5,s0,ffffffff8401240e <slotCapLongRunningDelete+0x36>
    0x840123f2    0x1a    li a5,1
    0x840123f4    0x1c    sll s0,a5,s0
    0x840123f8    0x20    andi s0,s0,261
    0x840123fc    0x24    snez s0,s0
    0x84012400    0x28    mv a0,s0
    0x84012402    0x2a    ld ra,8(sp)           ; stack access
    0x84012404    0x2c    ld s0,0(sp)           ; stack access
    0x84012406    0x2e    addi sp,sp,16
    0x84012408    0x30    ret
    0x8401240a    0x32    mv s0,a0
    0x8401240c    0x34    j ffffffff84012400 <slotCapLongRunningDelete+0x28>
    0x8401240e    0x36    li s0,0
    0x84012410    0x38    j ffffffff84012400 <slotCapLongRunningDelete+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 37 nodes.

Section isFinalCapability (130 of 301)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 39 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `isFinalCapability`:

    0x84012382     0x0    addi sp,sp,-32
    0x84012384     0x2    sd ra,24(sp)          ; stack access
    0x84012386     0x4    sd s0,16(sp)          ; stack access
    0x84012388     0x6    sd s1,8(sp)           ; stack access
    0x8401238a     0x8    mv s0,a0
    0x8401238c     0xa    ld a5,16(a0)
    0x8401238e     0xc    ld s1,24(a0)
    0x84012390     0xe    beqz a5,ffffffff840123a4 <isFinalCapability+0x22>
    0x84012392    0x10    ld a2,0(a0)
    0x84012394    0x12    ld a3,8(a0)
    0x84012396    0x14    ld a0,0(a5)
    0x84012398    0x16    ld a1,8(a5)
    0x8401239a    0x18    jal ra,ffffffff8401232a <sameObjectAs>
    0x8401239e    0x1c    mv a5,a0
    0x840123a0    0x1e    li a0,0
    0x840123a2    0x20    bnez a5,ffffffff840123ce <isFinalCapability+0x4c>
    0x840123a4    0x22    lui a5,0xf8000
    0x840123a8    0x26    srli a5,a5,0x19
    0x840123aa    0x28    and a5,a5,s1
    0x840123ac    0x2a    srli s1,s1,0x26
    0x840123ae    0x2c    andi s1,s1,1
    0x840123b0    0x2e    beqz s1,ffffffff840123ca <isFinalCapability+0x48>
    0x840123b2    0x30    li a4,-1
    0x840123b4    0x32    slli a4,a4,0x27
    0x840123b6    0x34    or a5,a5,a4
    0x840123b8    0x36    ld a2,0(a5)
    0x840123ba    0x38    ld a3,8(a5)
    0x840123bc    0x3a    ld a0,0(s0)
    0x840123be    0x3c    ld a1,8(s0)
    0x840123c0    0x3e    jal ra,ffffffff8401232a <sameObjectAs>
    0x840123c4    0x42    seqz a0,a0
    0x840123c8    0x46    j ffffffff840123ce <isFinalCapability+0x4c>
    0x840123ca    0x48    li a0,1
    0x840123cc    0x4a    bnez a5,ffffffff840123b8 <isFinalCapability+0x36>
    0x840123ce    0x4c    ld ra,24(sp)          ; stack access
    0x840123d0    0x4e    ld s0,16(sp)          ; stack access
    0x840123d2    0x50    ld s1,8(sp)           ; stack access
    0x840123d4    0x52    addi sp,sp,32
    0x840123d6    0x54    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 66 nodes.

Section ensureNoChildren (131 of 301)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 27 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `ensureNoChildren`:

    0x84012280     0x0    ld a5,24(a0)
    0x84012282     0x2    lui a1,0xf8000
    0x84012286     0x6    srli a1,a1,0x19
    0x84012288     0x8    and a1,a1,a5
    0x8401228a     0xa    srli a5,a5,0x26
    0x8401228c     0xc    andi a5,a5,1
    0x8401228e     0xe    beqz a5,ffffffff840122aa <ensureNoChildren+0x2a>
    0x84012290    0x10    li a5,-1
    0x84012292    0x12    slli a5,a5,0x27
    0x84012294    0x14    or a1,a1,a5
    0x84012296    0x16    addi sp,sp,-16
    0x84012298    0x18    sd ra,8(sp)           ; stack access
    0x8401229a    0x1a    jal ra,ffffffff84012208 <isMDBParentOf>
    0x8401229e    0x1e    mv a1,a0
    0x840122a0    0x20    bnez a0,ffffffff840122b0 <ensureNoChildren+0x30>
    0x840122a2    0x22    mv a0,a1
    0x840122a4    0x24    ld ra,8(sp)           ; stack access
    0x840122a6    0x26    addi sp,sp,16
    0x840122a8    0x28    ret
    0x840122aa    0x2a    bnez a1,ffffffff84012296 <ensureNoChildren+0x16>
    0x840122ac    0x2c    mv a0,a1
    0x840122ae    0x2e    ret
    0x840122b0    0x30    li a5,9
    0x840122b2    0x32    auipc a4,0x9
    0x840122b6    0x36    sd a5,-1650(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840122ba    0x3a    li a1,3
    0x840122bc    0x3c    j ffffffff840122a2 <ensureNoChildren+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 40 nodes.

Section isMDBParentOf (132 of 301)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isMDBParentOf`:

    0x84012208     0x0    addi sp,sp,-32
    0x8401220a     0x2    sd ra,24(sp)          ; stack access
    0x8401220c     0x4    sd s0,16(sp)          ; stack access
    0x8401220e     0x6    sd s1,8(sp)           ; stack access
    0x84012210     0x8    sd s2,0(sp)           ; stack access
    0x84012212     0xa    ld s0,24(a0)
    0x84012214     0xc    srli s0,s0,0x1
    0x84012216     0xe    andi s0,s0,1
    0x84012218    0x10    beqz s0,ffffffff84012272 <isMDBParentOf+0x6a>
    0x8401221a    0x12    mv s1,a0
    0x8401221c    0x14    mv s2,a1
    0x8401221e    0x16    ld a2,0(a1)
    0x84012220    0x18    ld a3,8(a1)
    0x84012222    0x1a    ld a0,0(a0)
    0x84012224    0x1c    ld a1,8(s1)
    0x84012226    0x1e    jal ra,ffffffff84011e80 <sameRegionAs>
    0x8401222a    0x22    beqz a0,ffffffff84012270 <isMDBParentOf+0x68>
    0x8401222c    0x24    ld a5,0(s1)
    0x8401222e    0x26    srli a5,a5,0x3b
    0x84012230    0x28    li a4,4
    0x84012232    0x2a    beq a5,a4,ffffffff84012256 <isMDBParentOf+0x4e>
    0x84012236    0x2e    li a4,6
    0x84012238    0x30    bne a5,a4,ffffffff84012272 <isMDBParentOf+0x6a>
    0x8401223c    0x34    ld a5,8(s1)
    0x8401223e    0x36    beqz a5,ffffffff84012272 <isMDBParentOf+0x6a>
    0x84012240    0x38    ld a4,8(s2)
    0x84012244    0x3c    li s0,0
    0x84012246    0x3e    bne a5,a4,ffffffff84012272 <isMDBParentOf+0x6a>
    0x8401224a    0x42    ld s0,24(s2)
    0x8401224e    0x46    xori s0,s0,1
    0x84012252    0x4a    andi s0,s0,1
    0x84012254    0x4c    j ffffffff84012272 <isMDBParentOf+0x6a>
    0x84012256    0x4e    ld a5,8(s1)
    0x84012258    0x50    beqz a5,ffffffff84012272 <isMDBParentOf+0x6a>
    0x8401225a    0x52    ld a4,8(s2)
    0x8401225e    0x56    li s0,0
    0x84012260    0x58    bne a4,a5,ffffffff84012272 <isMDBParentOf+0x6a>
    0x84012264    0x5c    ld s0,24(s2)
    0x84012268    0x60    xori s0,s0,1
    0x8401226c    0x64    andi s0,s0,1
    0x8401226e    0x66    j ffffffff84012272 <isMDBParentOf+0x6a>
    0x84012270    0x68    mv s0,a0
    0x84012272    0x6a    mv a0,s0
    0x84012274    0x6c    ld ra,24(sp)          ; stack access
    0x84012276    0x6e    ld s0,16(sp)          ; stack access
    0x84012278    0x70    ld s1,8(sp)           ; stack access
    0x8401227a    0x72    ld s2,0(sp)           ; stack access
    0x8401227c    0x74    addi sp,sp,32
    0x8401227e    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 87 nodes.

Section emptySlot (133 of 301)
==============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 55 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `emptySlot`:

    0x84011d2c     0x0    addi sp,sp,-32
    0x84011d2e     0x2    sd ra,24(sp)          ; stack access
    0x84011d30     0x4    sd a1,0(sp)           ; stack access
    0x84011d32     0x6    sd a2,8(sp)           ; stack access
    0x84011d34     0x8    ld a5,0(a0)
    0x84011d36     0xa    srli a5,a5,0x3b
    0x84011d38     0xc    beqz a5,ffffffff84011d7e <emptySlot+0x52>
    0x84011d3a     0xe    ld a2,16(a0)
    0x84011d3c    0x10    ld a4,24(a0)
    0x84011d3e    0x12    lui a5,0xf8000
    0x84011d42    0x16    srli a5,a5,0x19
    0x84011d44    0x18    and a5,a5,a4
    0x84011d46    0x1a    srli a3,a4,0x26
    0x84011d4a    0x1e    andi a3,a3,1
    0x84011d4c    0x20    beqz a3,ffffffff84011d84 <emptySlot+0x58>
    0x84011d4e    0x22    li a3,-1
    0x84011d50    0x24    slli a3,a3,0x27
    0x84011d52    0x26    or a5,a5,a3
    0x84011d54    0x28    bnez a2,ffffffff84011d86 <emptySlot+0x5a>
    0x84011d56    0x2a    sd a2,16(a5)
    0x84011d58    0x2c    ld a3,24(a5)
    0x84011d5a    0x2e    or a4,a4,a3
    0x84011d5c    0x30    andi a4,a4,1
    0x84011d5e    0x32    andi a3,a3,-2
    0x84011d60    0x34    or a4,a4,a3
    0x84011d62    0x36    sd a4,24(a5)
    0x84011d64    0x38    sd zero,0(a0)
    0x84011d68    0x3c    sd zero,8(a0)
    0x84011d6c    0x40    sd zero,16(a0)
    0x84011d70    0x44    sd zero,24(a0)
    0x84011d74    0x48    ld a5,0(sp)           ; stack access
    0x84011d76    0x4a    srli a5,a5,0x3b
    0x84011d78    0x4c    li a4,16
    0x84011d7a    0x4e    beq a5,a4,ffffffff84011da0 <emptySlot+0x74>
    0x84011d7e    0x52    ld ra,24(sp)          ; stack access
    0x84011d80    0x54    addi sp,sp,32
    0x84011d82    0x56    ret
    0x84011d84    0x58    beqz a2,ffffffff84011d9c <emptySlot+0x70>
    0x84011d86    0x5a    ld a3,24(a2)
    0x84011d88    0x5c    li a1,-1
    0x84011d8a    0x5e    slli a1,a1,0x27
    0x84011d8c    0x60    addi a1,a1,3
    0x84011d8e    0x62    and a3,a3,a1
    0x84011d90    0x64    lui a1,0xf8000
    0x84011d94    0x68    srli a1,a1,0x19
    0x84011d96    0x6a    and a1,a1,a5
    0x84011d98    0x6c    or a3,a3,a1
    0x84011d9a    0x6e    sd a3,24(a2)
    0x84011d9c    0x70    beqz a5,ffffffff84011d64 <emptySlot+0x38>
    0x84011d9e    0x72    j ffffffff84011d56 <emptySlot+0x2a>
    0x84011da0    0x74    ld a0,8(sp)           ; stack access
    0x84011da2    0x76    slli a0,a0,0x34
    0x84011da4    0x78    srli a0,a0,0x34
    0x84011da6    0x7a    jal ra,ffffffff84011d1a <deletedIRQHandler>
    0x84011daa    0x7e    j ffffffff84011d7e <emptySlot+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 87 nodes.

Section deletedIRQHandler (134 of 301)
======================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletedIRQHandler`:

    0x84011d1a     0x0    addi sp,sp,-16
    0x84011d1c     0x2    sd ra,8(sp)           ; stack access
    0x84011d1e     0x4    mv a1,a0
    0x84011d20     0x6    li a0,0
    0x84011d22     0x8    jal ra,ffffffff84011c7a <setIRQState>
    0x84011d26     0xc    ld ra,8(sp)           ; stack access
    0x84011d28     0xe    addi sp,sp,16
    0x84011d2a    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 12 nodes.

Section capSwapForDelete (135 of 301)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 14 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `capSwapForDelete`:

    0x84011b4c     0x0    beq a0,a1,ffffffff84011b6a <capSwapForDelete+0x1e>
    0x84011b50     0x4    addi sp,sp,-48
    0x84011b52     0x6    sd ra,40(sp)          ; stack access
    0x84011b54     0x8    mv a2,a0
    0x84011b56     0xa    mv a5,a1
    0x84011b58     0xc    ld a3,0(a1)
    0x84011b5a     0xe    ld a4,8(a1)
    0x84011b5c    0x10    ld a0,0(a0)
    0x84011b5e    0x12    ld a1,8(a2)
    0x84011b60    0x14    jal ra,ffffffff84011a78 <cteSwap>
    0x84011b64    0x18    ld ra,40(sp)          ; stack access
    0x84011b66    0x1a    addi sp,sp,48
    0x84011b68    0x1c    ret
    0x84011b6a    0x1e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 25 nodes.

Section invokeCNodeMove (136 of 301)
====================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x84011a68    0x0    addi sp,sp,-32
    0x84011a6a    0x2    sd ra,24(sp)          ; stack access
    0x84011a6c    0x4    jal ra,ffffffff84011a10 <cteMove>
    0x84011a70    0x8    li a0,0
    0x84011a72    0xa    ld ra,24(sp)          ; stack access
    0x84011a74    0xc    addi sp,sp,32
    0x84011a76    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 11 nodes.

Section invokeCNodeInsert (137 of 301)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x84011a00    0x0    addi sp,sp,-32
    0x84011a02    0x2    sd ra,24(sp)          ; stack access
    0x84011a04    0x4    jal ra,ffffffff840118d4 <cteInsert>
    0x84011a08    0x8    li a0,0
    0x84011a0a    0xa    ld ra,24(sp)          ; stack access
    0x84011a0c    0xc    addi sp,sp,32
    0x84011a0e    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section switchToIdleThread (138 of 301)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `switchToIdleThread`:

    0x84011858     0x0    addi sp,sp,-16
    0x8401185a     0x2    sd ra,8(sp)           ; stack access
    0x8401185c     0x4    jal ra,ffffffff84010a8e <Arch_switchToIdleThread>
    0x84011860     0x8    auipc a5,0x1b
    0x84011864     0xc    ld a5,2032(a5) # ffffffff8402d050 <ksIdleThread>
    0x84011868    0x10    auipc a4,0x1b
    0x8401186c    0x14    sd a5,2032(a4) # ffffffff8402d058 <ksCurThread>
    0x84011870    0x18    ld ra,8(sp)           ; stack access
    0x84011872    0x1a    addi sp,sp,16
    0x84011874    0x1c    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 16 nodes.

Section refill_budget_check (139 of 301)
========================================

Deriving specifications
-----------------------

Section `refill_budget_check` consists of 145 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `refill_budget_check`:

    0x8401166a      0x0    addi sp,sp,-32
    0x8401166c      0x2    sd ra,24(sp)          ; stack access
    0x8401166e      0x4    sd s0,16(sp)          ; stack access
    0x84011670      0x6    sd s1,8(sp)           ; stack access
    0x84011672      0x8    auipc s0,0x1c
    0x84011676      0xc    ld s0,-1610(s0) # ffffffff8402d028 <ksCurSC>
    0x8401167a     0x10    ld a3,72(s0)
    0x8401167c     0x12    addi s1,s0,88
    0x84011680     0x16    slli a5,a3,0x4
    0x84011684     0x1a    add a5,a5,s1
    0x84011686     0x1c    ld a4,8(a5)
    0x84011688     0x1e    bltu a0,a4,ffffffff84011774 <refill_budget_check+0x10a>
    0x8401168c     0x22    li a7,0
    0x8401168e     0x24    li t1,19
    0x84011690     0x26    j ffffffff840116f0 <refill_budget_check+0x86>
    0x84011692     0x28    ld a5,0(a5)
    0x84011694     0x2a    ld a1,64(s0)
    0x84011696     0x2c    addi a1,a1,-1
    0x84011698     0x2e    mv a6,a7
    0x8401169a     0x30    beq a1,a3,ffffffff840116a2 <refill_budget_check+0x38>
    0x8401169e     0x34    addi a6,a3,1
    0x840116a2     0x38    sd a6,72(s0)
    0x840116a6     0x3c    ld a3,0(s0)
    0x840116a8     0x3e    add a5,a5,a3
    0x840116aa     0x40    bltu t1,a4,ffffffff840116ce <refill_budget_check+0x64>
    0x840116ae     0x44    beq a2,a6,ffffffff840116ce <refill_budget_check+0x64>
    0x840116b2     0x48    slli a2,a2,0x4
    0x840116b4     0x4a    add a2,a2,s1
    0x840116b6     0x4c    ld a3,8(a2)
    0x840116b8     0x4e    add a4,a4,a3
    0x840116ba     0x50    sd a4,8(a2)
    0x840116bc     0x52    ld a4,80(s0)
    0x840116be     0x54    slli a4,a4,0x4
    0x840116c0     0x56    add a4,a4,s1
    0x840116c2     0x58    ld a3,0(a4)
    0x840116c4     0x5a    bgeu a3,a5,ffffffff840116ca <refill_budget_check+0x60>
    0x840116c8     0x5e    mv a3,a5
    0x840116ca     0x60    sd a3,0(a4)
    0x840116cc     0x62    j ffffffff840116e2 <refill_budget_check+0x78>
    0x840116ce     0x64    slli a3,a2,0x4
    0x840116d2     0x68    add a3,a3,s1
    0x840116d4     0x6a    ld a6,0(a3)
    0x840116d8     0x6e    bltu a6,a5,ffffffff84011702 <refill_budget_check+0x98>
    0x840116dc     0x72    ld a5,8(a3)
    0x840116de     0x74    add a4,a4,a5
    0x840116e0     0x76    sd a4,8(a3)
    0x840116e2     0x78    ld a3,72(s0)
    0x840116e4     0x7a    slli a5,a3,0x4
    0x840116e8     0x7e    add a5,a5,s1
    0x840116ea     0x80    ld a4,8(a5)
    0x840116ec     0x82    bltu a0,a4,ffffffff84011718 <refill_budget_check+0xae>
    0x840116f0     0x86    sub a0,a0,a4
    0x840116f2     0x88    ld a2,80(s0)
    0x840116f4     0x8a    bne a2,a3,ffffffff84011692 <refill_budget_check+0x28>
    0x840116f8     0x8e    ld a4,0(a5)
    0x840116fa     0x90    ld a3,0(s0)
    0x840116fc     0x92    add a4,a4,a3
    0x840116fe     0x94    sd a4,0(a5)
    0x84011700     0x96    j ffffffff840116e2 <refill_budget_check+0x78>
    0x84011702     0x98    mv a3,a7
    0x84011704     0x9a    beq a2,a1,ffffffff8401170c <refill_budget_check+0xa2>
    0x84011708     0x9e    addi a3,a2,1
    0x8401170c     0xa2    sd a3,80(s0)
    0x8401170e     0xa4    slli a3,a3,0x4
    0x84011710     0xa6    add a3,a3,s1
    0x84011712     0xa8    sd a5,0(a3)
    0x84011714     0xaa    sd a4,8(a3)
    0x84011716     0xac    j ffffffff840116e2 <refill_budget_check+0x78>
    0x84011718     0xae    beqz a0,ffffffff84011750 <refill_budget_check+0xe6>
    0x8401171a     0xb0    ld a4,0(a5)
    0x8401171c     0xb2    add a4,a4,a0
    0x8401171e     0xb4    sd a4,0(a5)
    0x84011720     0xb6    ld a5,72(s0)
    0x84011722     0xb8    ld a4,80(s0)
    0x84011724     0xba    beq a5,a4,ffffffff84011750 <refill_budget_check+0xe6>
    0x84011728     0xbe    slli a4,a5,0x4
    0x8401172c     0xc2    add a4,a4,s1
    0x8401172e     0xc4    ld a2,0(a4)
    0x84011730     0xc6    ld a1,8(a4)
    0x84011732     0xc8    add a6,a2,a1
    0x84011736     0xcc    ld a4,64(s0)
    0x84011738     0xce    addi a4,a4,-1
    0x8401173a     0xd0    li a3,0
    0x8401173c     0xd2    beq a5,a4,ffffffff84011744 <refill_budget_check+0xda>
    0x84011740     0xd6    addi a3,a5,1
    0x84011744     0xda    slli a5,a3,0x4
    0x84011748     0xde    add a5,a5,s1
    0x8401174a     0xe0    ld a4,0(a5)
    0x8401174c     0xe2    bgeu a6,a4,ffffffff84011762 <refill_budget_check+0xf8>
    0x84011750     0xe6    ld a5,72(s0)
    0x84011752     0xe8    slli a5,a5,0x4
    0x84011754     0xea    add a5,a5,s1
    0x84011756     0xec    ld a4,8(a5)
    0x84011758     0xee    bltu a0,a4,ffffffff84011774 <refill_budget_check+0x10a>
    0x8401175c     0xf2    li a1,19
    0x8401175e     0xf4    li a0,0
    0x84011760     0xf6    j ffffffff840117ae <refill_budget_check+0x144>
    0x84011762     0xf8    sd a3,72(s0)
    0x84011764     0xfa    ld a4,8(a5)
    0x84011766     0xfc    add a1,a1,a4
    0x84011768     0xfe    sd a1,8(a5)
    0x8401176a    0x100    ld a5,72(s0)
    0x8401176c    0x102    slli a5,a5,0x4
    0x8401176e    0x104    add a5,a5,s1
    0x84011770    0x106    sd a2,0(a5)
    0x84011772    0x108    j ffffffff84011750 <refill_budget_check+0xe6>
    0x84011774    0x10a    auipc a4,0x1c
    0x84011778    0x10e    ld a4,-1860(a4) # ffffffff8402d030 <ksCurTime>
    0x8401177c    0x112    addi a4,a4,10
    0x8401177e    0x114    ld a5,0(a5)
    0x84011780    0x116    bltu a4,a5,ffffffff8401175c <refill_budget_check+0xf2>
    0x84011784    0x11a    jal ra,ffffffff840114ec <refill_split_check>
    0x84011788    0x11e    j ffffffff8401175c <refill_budget_check+0xf2>
    0x8401178a    0x120    addi a5,a5,1
    0x8401178c    0x122    sub a5,a5,a4
    0x8401178e    0x124    ld a3,64(s0)
    0x84011790    0x126    bne a3,a5,ffffffff840117cc <refill_budget_check+0x162>
    0x84011794    0x12a    ld a3,64(s0)
    0x84011796    0x12c    addi a3,a3,-1
    0x84011798    0x12e    mv a5,a0
    0x8401179a    0x130    beq a4,a3,ffffffff840117a2 <refill_budget_check+0x138>
    0x8401179e    0x134    addi a5,a4,1
    0x840117a2    0x138    sd a5,72(s0)
    0x840117a4    0x13a    slli a5,a5,0x4
    0x840117a6    0x13c    add a5,a5,s1
    0x840117a8    0x13e    ld a4,8(a5)
    0x840117aa    0x140    add a4,a4,a2
    0x840117ac    0x142    sd a4,8(a5)
    0x840117ae    0x144    ld a4,72(s0)
    0x840117b0    0x146    slli a5,a4,0x4
    0x840117b4    0x14a    add a5,a5,s1
    0x840117b6    0x14c    ld a2,8(a5)
    0x840117b8    0x14e    bgeu a1,a2,ffffffff84011794 <refill_budget_check+0x12a>
    0x840117bc    0x152    ld a5,80(s0)
    0x840117be    0x154    bgeu a5,a4,ffffffff8401178a <refill_budget_check+0x120>
    0x840117c2    0x158    ld a3,64(s0)
    0x840117c4    0x15a    add a5,a5,a3
    0x840117c6    0x15c    addi a5,a5,1
    0x840117c8    0x15e    sub a5,a5,a4
    0x840117ca    0x160    j ffffffff8401178e <refill_budget_check+0x124>
    0x840117cc    0x162    ld ra,24(sp)          ; stack access
    0x840117ce    0x164    ld s0,16(sp)          ; stack access
    0x840117d0    0x166    ld s1,8(sp)           ; stack access
    0x840117d2    0x168    addi sp,sp,32
    0x840117d4    0x16a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
145 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `refill_budget_check` has 241 nodes.

Section lookupPivotSlot (140 of 301)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupPivotSlot`:

    0x840113ec     0x0    addi sp,sp,-48
    0x840113ee     0x2    sd ra,40(sp)          ; stack access
    0x840113f0     0x4    mv a5,a1
    0x840113f2     0x6    mv a4,a3
    0x840113f4     0x8    mv a3,a2
    0x840113f6     0xa    mv a1,a0
    0x840113f8     0xc    mv a2,a5
    0x840113fa     0xe    li a0,1
    0x840113fc    0x10    jal ra,ffffffff840112e8 <lookupSlotForCNodeOp>
    0x84011400    0x14    ld ra,40(sp)          ; stack access
    0x84011402    0x16    addi sp,sp,48
    0x84011404    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 16 nodes.

Section lookupTargetSlot (141 of 301)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupTargetSlot`:

    0x840113d2     0x0    addi sp,sp,-48
    0x840113d4     0x2    sd ra,40(sp)          ; stack access
    0x840113d6     0x4    mv a5,a1
    0x840113d8     0x6    mv a4,a3
    0x840113da     0x8    mv a3,a2
    0x840113dc     0xa    mv a1,a0
    0x840113de     0xc    mv a2,a5
    0x840113e0     0xe    li a0,0
    0x840113e2    0x10    jal ra,ffffffff840112e8 <lookupSlotForCNodeOp>
    0x840113e6    0x14    ld ra,40(sp)          ; stack access
    0x840113e8    0x16    addi sp,sp,48
    0x840113ea    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 16 nodes.

Section lookupSourceSlot (142 of 301)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupSourceSlot`:

    0x840113b8     0x0    addi sp,sp,-48
    0x840113ba     0x2    sd ra,40(sp)          ; stack access
    0x840113bc     0x4    mv a5,a1
    0x840113be     0x6    mv a4,a3
    0x840113c0     0x8    mv a3,a2
    0x840113c2     0xa    mv a1,a0
    0x840113c4     0xc    mv a2,a5
    0x840113c6     0xe    li a0,1
    0x840113c8    0x10    jal ra,ffffffff840112e8 <lookupSlotForCNodeOp>
    0x840113cc    0x14    ld ra,40(sp)          ; stack access
    0x840113ce    0x16    addi sp,sp,48
    0x840113d0    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 16 nodes.

Section lookupSlotForCNodeOp (143 of 301)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 75 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

23 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x840112e8     0x0    addi sp,sp,-80
    0x840112ea     0x2    sd ra,72(sp)          ; stack access
    0x840112ec     0x4    sd s0,64(sp)          ; stack access
    0x840112ee     0x6    mv s0,a0
    0x840112f0     0x8    sd a1,0(sp)           ; stack access
    0x840112f2     0xa    sd a2,8(sp)           ; stack access
    0x840112f4     0xc    srli a1,a1,0x3b
    0x840112f6     0xe    li a5,10
    0x840112f8    0x10    bne a1,a5,ffffffff8401132c <lookupSlotForCNodeOp+0x44>
    0x840112fc    0x14    addi a5,a4,-1
    0x84011300    0x18    li a2,63
    0x84011304    0x1c    bltu a2,a5,ffffffff8401134e <lookupSlotForCNodeOp+0x66>
    0x84011308    0x20    ld a1,0(sp)           ; stack access
    0x8401130a    0x22    ld a2,8(sp)           ; stack access
    0x8401130c    0x24    addi a0,sp,24
    0x8401130e    0x26    jal ra,ffffffff84011120 <resolveAddressBits>
    0x84011312    0x2a    ld a5,40(sp)          ; stack access
    0x84011314    0x2c    ld a4,24(sp)          ; stack access
    0x84011316    0x2e    bnez a4,ffffffff84011372 <lookupSlotForCNodeOp+0x8a>
    0x84011318    0x30    bnez a5,ffffffff8401138c <lookupSlotForCNodeOp+0xa4>
    0x8401131a    0x32    sd zero,48(sp)        ; stack access
    0x8401131c    0x34    ld a5,32(sp)          ; stack access
    0x8401131e    0x36    sd a5,56(sp)          ; stack access
    0x84011320    0x38    ld a0,48(sp)          ; stack access
    0x84011322    0x3a    ld a1,56(sp)          ; stack access
    0x84011324    0x3c    ld ra,72(sp)          ; stack access
    0x84011326    0x3e    ld s0,64(sp)          ; stack access
    0x84011328    0x40    addi sp,sp,80
    0x8401132a    0x42    ret
    0x8401132c    0x44    auipc a5,0x9
    0x84011330    0x48    addi a5,a5,1236 # ffffffff8401a800 <riscvKSASIDTable>
    0x84011334    0x4c    li a4,6
    0x84011336    0x4e    sd a4,1088(a5)
    0x8401133a    0x52    sd a0,1080(a5)
    0x8401133e    0x56    sd zero,1024(a5)
    0x84011342    0x5a    sd zero,1032(a5)
    0x84011346    0x5e    li a5,3
    0x84011348    0x60    sd a5,48(sp)          ; stack access
    0x8401134a    0x62    sd zero,56(sp)        ; stack access
    0x8401134c    0x64    j ffffffff84011320 <lookupSlotForCNodeOp+0x38>
    0x8401134e    0x66    auipc a5,0x9
    0x84011352    0x6a    addi a5,a5,1202 # ffffffff8401a800 <riscvKSASIDTable>
    0x84011356    0x6e    li a4,4
    0x84011358    0x70    sd a4,1088(a5)
    0x8401135c    0x74    li a4,1
    0x8401135e    0x76    sd a4,1056(a5)
    0x84011362    0x7a    li a4,64
    0x84011366    0x7e    sd a4,1064(a5)
    0x8401136a    0x82    li a5,3
    0x8401136c    0x84    sd a5,48(sp)          ; stack access
    0x8401136e    0x86    sd zero,56(sp)        ; stack access
    0x84011370    0x88    j ffffffff84011320 <lookupSlotForCNodeOp+0x38>
    0x84011372    0x8a    auipc a5,0x9
    0x84011376    0x8e    addi a5,a5,1166 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401137a    0x92    li a4,6
    0x8401137c    0x94    sd a4,1088(a5)
    0x84011380    0x98    sd s0,1080(a5)
    0x84011384    0x9c    li a5,3
    0x84011386    0x9e    sd a5,48(sp)          ; stack access
    0x84011388    0xa0    sd zero,56(sp)        ; stack access
    0x8401138a    0xa2    j ffffffff84011320 <lookupSlotForCNodeOp+0x38>
    0x8401138c    0xa4    auipc a4,0x9
    0x84011390    0xa8    addi a4,a4,1140 # ffffffff8401a800 <riscvKSASIDTable>
    0x84011394    0xac    li a3,6
    0x84011396    0xae    sd a3,1088(a4)
    0x8401139a    0xb2    sd s0,1080(a4)
    0x8401139e    0xb6    slli a5,a5,0x2
    0x840113a0    0xb8    andi a5,a5,508
    0x840113a4    0xbc    ori a5,a5,2
    0x840113a8    0xc0    sd a5,1024(a4)
    0x840113ac    0xc4    sd zero,1032(a4)
    0x840113b0    0xc8    li a5,3
    0x840113b2    0xca    sd a5,48(sp)          ; stack access
    0x840113b4    0xcc    sd zero,56(sp)        ; stack access
    0x840113b6    0xce    j ffffffff84011320 <lookupSlotForCNodeOp+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 121 nodes.

Section lookupCapAndSlot (144 of 301)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 26 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x840112aa     0x0    addi sp,sp,-32
    0x840112ac     0x2    sd ra,24(sp)          ; stack access
    0x840112ae     0x4    sd s0,16(sp)          ; stack access
    0x840112b0     0x6    mv s0,a0
    0x840112b2     0x8    mv a0,a1
    0x840112b4     0xa    mv a1,a2
    0x840112b6     0xc    jal ra,ffffffff8401124e <lookupSlot>
    0x840112ba    0x10    sd a0,0(sp)           ; stack access
    0x840112bc    0x12    sd a1,8(sp)           ; stack access
    0x840112be    0x14    bnez a0,ffffffff840112d8 <lookupCapAndSlot+0x2e>
    0x840112c0    0x16    ld a4,0(a1)
    0x840112c2    0x18    ld a5,8(a1)
    0x840112c4    0x1a    sd zero,0(s0)         ; stack access
    0x840112c8    0x1e    sd a4,8(s0)           ; stack access
    0x840112ca    0x20    sd a5,16(s0)          ; stack access
    0x840112cc    0x22    sd a1,24(s0)          ; stack access
    0x840112ce    0x24    mv a0,s0
    0x840112d0    0x26    ld ra,24(sp)          ; stack access
    0x840112d2    0x28    ld s0,16(sp)          ; stack access
    0x840112d4    0x2a    addi sp,sp,32
    0x840112d6    0x2c    ret
    0x840112d8    0x2e    sd a0,0(s0)           ; stack access
    0x840112da    0x30    sd zero,8(s0)         ; stack access
    0x840112de    0x34    sd zero,16(s0)        ; stack access
    0x840112e2    0x38    sd zero,24(s0)        ; stack access
    0x840112e6    0x3c    j ffffffff840112ce <lookupCapAndSlot+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 46 nodes.

Section lookupCap (145 of 301)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 25 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
13 stack accesses found. Annotated code for `lookupCap`:

    0x84011270     0x0    addi sp,sp,-32
    0x84011272     0x2    sd ra,24(sp)          ; stack access
    0x84011274     0x4    sd s0,16(sp)          ; stack access
    0x84011276     0x6    mv s0,a0
    0x84011278     0x8    mv a0,a1
    0x8401127a     0xa    mv a1,a2
    0x8401127c     0xc    jal ra,ffffffff8401124e <lookupSlot>
    0x84011280    0x10    sd a0,0(sp)           ; stack access
    0x84011282    0x12    sd a1,8(sp)           ; stack access
    0x84011284    0x14    bnez a0,ffffffff8401129e <lookupCap+0x2e>
    0x84011286    0x16    ld a5,8(sp)           ; stack access
    0x84011288    0x18    ld a4,0(a5)
    0x8401128a    0x1a    ld a5,8(a5)
    0x8401128c    0x1c    sd zero,0(s0)         ; stack access
    0x84011290    0x20    sd a4,8(s0)           ; stack access
    0x84011292    0x22    sd a5,16(s0)          ; stack access
    0x84011294    0x24    mv a0,s0
    0x84011296    0x26    ld ra,24(sp)          ; stack access
    0x84011298    0x28    ld s0,16(sp)          ; stack access
    0x8401129a    0x2a    addi sp,sp,32
    0x8401129c    0x2c    ret
    0x8401129e    0x2e    sd a0,0(s0)           ; stack access
    0x840112a0    0x30    sd zero,8(s0)         ; stack access
    0x840112a4    0x34    sd zero,16(s0)        ; stack access
    0x840112a8    0x38    j ffffffff84011294 <lookupCap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 44 nodes.

Section lookupSlot (146 of 301)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.

RVC_FFFFFFFFFFT___FF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `lookupSlot`:

    0x8401124e     0x0    addi sp,sp,-80
    0x84011250     0x2    sd ra,72(sp)          ; stack access
    0x84011252     0x4    mv a3,a1
    0x84011254     0x6    andi a0,a0,-1024
    0x84011258     0xa    li a4,64
    0x8401125c     0xe    ld a1,0(a0)
    0x8401125e    0x10    ld a2,8(a0)
    0x84011260    0x12    addi a0,sp,8
    0x84011262    0x14    jal ra,ffffffff84011120 <resolveAddressBits>
    0x84011266    0x18    ld a0,8(sp)           ; stack access
    0x84011268    0x1a    ld a1,16(sp)          ; stack access
    0x8401126a    0x1c    ld ra,72(sp)          ; stack access
    0x8401126c    0x1e    addi sp,sp,80
    0x8401126e    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (147 of 301)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 61 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_createObject`:

    0x84011080     0x0    addi sp,sp,-32
    0x84011082     0x2    sd ra,24(sp)          ; stack access
    0x84011084     0x4    li a5,9
    0x84011086     0x6    beq a0,a5,ffffffff840110d6 <Arch_createObject+0x56>
    0x8401108a     0xa    bltu a5,a0,ffffffff840110bc <Arch_createObject+0x3c>
    0x8401108e     0xe    li a5,7
    0x84011090    0x10    beq a0,a5,ffffffff840110f0 <Arch_createObject+0x70>
    0x84011094    0x14    li a5,8
    0x84011096    0x16    bne a0,a5,ffffffff8401110a <Arch_createObject+0x8a>
    0x8401109a    0x1a    andi a3,a3,1
    0x8401109c    0x1c    slli a3,a3,0x36
    0x8401109e    0x1e    li a5,19
    0x840110a0    0x20    slli a5,a5,0x37
    0x840110a2    0x22    or a3,a3,a5
    0x840110a4    0x24    sd a3,0(sp)           ; stack access
    0x840110a6    0x26    slli a1,a1,0x9
    0x840110a8    0x28    lui a5,0xfe000
    0x840110ac    0x2c    srli a5,a5,0x10
    0x840110ae    0x2e    and a1,a1,a5
    0x840110b0    0x30    sd a1,8(sp)           ; stack access
    0x840110b2    0x32    ld a0,0(sp)           ; stack access
    0x840110b4    0x34    ld a1,8(sp)           ; stack access
    0x840110b6    0x36    ld ra,24(sp)          ; stack access
    0x840110b8    0x38    addi sp,sp,32
    0x840110ba    0x3a    ret
    0x840110bc    0x3c    li a5,10
    0x840110be    0x3e    bne a0,a5,ffffffff8401110a <Arch_createObject+0x8a>
    0x840110c2    0x42    li a5,3
    0x840110c4    0x44    slli a5,a5,0x3b
    0x840110c6    0x46    sd a5,0(sp)           ; stack access
    0x840110c8    0x48    slli a1,a1,0x9
    0x840110ca    0x4a    lui a5,0xfe000
    0x840110ce    0x4e    srli a5,a5,0x10
    0x840110d0    0x50    and a1,a1,a5
    0x840110d2    0x52    sd a1,8(sp)           ; stack access
    0x840110d4    0x54    j ffffffff840110b2 <Arch_createObject+0x32>
    0x840110d6    0x56    andi a3,a3,1
    0x840110d8    0x58    slli a3,a3,0x36
    0x840110da    0x5a    li a5,23
    0x840110dc    0x5c    slli a5,a5,0x37
    0x840110de    0x5e    or a3,a3,a5
    0x840110e0    0x60    sd a3,0(sp)           ; stack access
    0x840110e2    0x62    slli a1,a1,0x9
    0x840110e4    0x64    lui a5,0xfe000
    0x840110e8    0x68    srli a5,a5,0x10
    0x840110ea    0x6a    and a1,a1,a5
    0x840110ec    0x6c    sd a1,8(sp)           ; stack access
    0x840110ee    0x6e    j ffffffff840110b2 <Arch_createObject+0x32>
    0x840110f0    0x70    andi a3,a3,1
    0x840110f2    0x72    slli a3,a3,0x36
    0x840110f4    0x74    li a5,27
    0x840110f6    0x76    slli a5,a5,0x37
    0x840110f8    0x78    or a3,a3,a5
    0x840110fa    0x7a    sd a3,0(sp)           ; stack access
    0x840110fc    0x7c    slli a1,a1,0x9
    0x840110fe    0x7e    lui a5,0xfe000
    0x84011102    0x82    srli a5,a5,0x10
    0x84011104    0x84    and a1,a1,a5
    0x84011106    0x86    sd a1,8(sp)           ; stack access
    0x84011108    0x88    j ffffffff840110b2 <Arch_createObject+0x32>
    0x8401110a    0x8a    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 85 nodes.

Section Arch_getObjectSize (148 of 301)
=======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 19 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_getObjectSize`:

    0x8401104e     0x0    li a4,9
    0x84011050     0x2    beq a0,a4,ffffffff8401107c <Arch_getObjectSize+0x2e>
    0x84011054     0x6    mv a5,a0
    0x84011056     0x8    bltu a4,a0,ffffffff8401106c <Arch_getObjectSize+0x1e>
    0x8401105a     0xc    li a4,7
    0x8401105c     0xe    li a0,30
    0x8401105e    0x10    beq a5,a4,ffffffff8401106a <Arch_getObjectSize+0x1c>
    0x84011062    0x14    li a4,8
    0x84011064    0x16    li a0,12
    0x84011066    0x18    bne a5,a4,ffffffff84011074 <Arch_getObjectSize+0x26>
    0x8401106a    0x1c    ret
    0x8401106c    0x1e    li a4,10
    0x8401106e    0x20    li a0,12
    0x84011070    0x22    beq a5,a4,ffffffff8401106a <Arch_getObjectSize+0x1c>
    0x84011074    0x26    addi sp,sp,-16
    0x84011076    0x28    sd ra,8(sp)           ; stack access
    0x84011078    0x2a    jal ra,ffffffff84010490 <halt>
    0x8401107c    0x2e    li a0,21
    0x8401107e    0x30    j ffffffff8401106a <Arch_getObjectSize+0x1c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 32 nodes.

Section Arch_sameObjectAs (149 of 301)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 64 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84010fae     0x0    addi sp,sp,-48
    0x84010fb0     0x2    sd ra,40(sp)          ; stack access
    0x84010fb2     0x4    sd a0,16(sp)          ; stack access
    0x84010fb4     0x6    sd a1,24(sp)          ; stack access
    0x84010fb6     0x8    sd a2,0(sp)           ; stack access
    0x84010fb8     0xa    sd a3,8(sp)           ; stack access
    0x84010fba     0xc    srli a4,a0,0x3b
    0x84010fbe    0x10    li a5,1
    0x84010fc0    0x12    beq a4,a5,ffffffff84010fd6 <Arch_sameObjectAs+0x28>
    0x84010fc4    0x16    ld a2,0(sp)           ; stack access
    0x84010fc6    0x18    ld a3,8(sp)           ; stack access
    0x84010fc8    0x1a    ld a0,16(sp)          ; stack access
    0x84010fca    0x1c    ld a1,24(sp)          ; stack access
    0x84010fcc    0x1e    jal ra,ffffffff84010e50 <Arch_sameRegionAs>
    0x84010fd0    0x22    ld ra,40(sp)          ; stack access
    0x84010fd2    0x24    addi sp,sp,48
    0x84010fd4    0x26    ret
    0x84010fd6    0x28    mv a4,a2
    0x84010fd8    0x2a    srli a3,a2,0x3b
    0x84010fdc    0x2e    bne a3,a5,ffffffff84010fc4 <Arch_sameObjectAs+0x16>
    0x84010fe0    0x32    srli a5,a1,0x9
    0x84010fe4    0x36    slli a2,a5,0x19
    0x84010fe8    0x3a    srli a2,a2,0x19
    0x84010fea    0x3c    srli a5,a5,0x26
    0x84010fec    0x3e    andi a5,a5,1
    0x84010fee    0x40    beqz a5,ffffffff84011016 <Arch_sameObjectAs+0x68>
    0x84010ff0    0x42    li a3,-1
    0x84010ff2    0x44    slli a5,a3,0x27
    0x84010ff6    0x48    or a2,a2,a5
    0x84010ff8    0x4a    ld a5,8(sp)           ; stack access
    0x84010ffa    0x4c    srli a5,a5,0x9
    0x84010ffc    0x4e    srli a3,a3,0x19
    0x84010ffe    0x50    and a3,a3,a5
    0x84011000    0x52    srli a5,a5,0x26
    0x84011002    0x54    andi a5,a5,1
    0x84011004    0x56    beqz a5,ffffffff84011012 <Arch_sameObjectAs+0x64>
    0x84011006    0x58    li a5,-1
    0x84011008    0x5a    slli a5,a5,0x27
    0x8401100a    0x5c    or a3,a3,a5
    0x8401100c    0x5e    li a5,0
    0x8401100e    0x60    beq a3,a2,ffffffff84011028 <Arch_sameObjectAs+0x7a>
    0x84011012    0x64    mv a0,a5
    0x84011014    0x66    j ffffffff84010fd0 <Arch_sameObjectAs+0x22>
    0x84011016    0x68    ld a5,8(sp)           ; stack access
    0x84011018    0x6a    srli a5,a5,0x9
    0x8401101a    0x6c    slli a3,a5,0x19
    0x8401101e    0x70    srli a3,a3,0x19
    0x84011020    0x72    srli a5,a5,0x26
    0x84011022    0x74    andi a5,a5,1
    0x84011024    0x76    bnez a5,ffffffff84011006 <Arch_sameObjectAs+0x58>
    0x84011026    0x78    j ffffffff8401100c <Arch_sameObjectAs+0x5e>
    0x84011028    0x7a    srli a2,a4,0x39
    0x8401102c    0x7e    andi a2,a2,3
    0x8401102e    0x80    srli a3,a0,0x39
    0x84011032    0x84    andi a3,a3,3
    0x84011034    0x86    bne a2,a3,ffffffff84011012 <Arch_sameObjectAs+0x64>
    0x84011038    0x8a    srli a5,a0,0x36
    0x8401103c    0x8e    srli a4,a4,0x36
    0x8401103e    0x90    xori a4,a4,1
    0x84011042    0x94    andi a5,a5,1
    0x84011044    0x96    andi a4,a4,1
    0x84011046    0x98    sub a5,a5,a4
    0x84011048    0x9a    snez a5,a5
    0x8401104c    0x9e    j ffffffff84011012 <Arch_sameObjectAs+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 92 nodes.

Section Arch_sameRegionAs (150 of 301)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 138 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x84010e50      0x0    srli a5,a0,0x3b
    0x84010e54      0x4    li a6,11
    0x84010e56      0x6    beq a5,a6,ffffffff84010fa2 <Arch_sameRegionAs+0x152>
    0x84010e5a      0xa    mv a4,a0
    0x84010e5c      0xc    bltu a6,a5,ffffffff84010eac <Arch_sameRegionAs+0x5c>
    0x84010e60     0x10    li a6,1
    0x84010e62     0x12    beq a5,a6,ffffffff84010efa <Arch_sameRegionAs+0xaa>
    0x84010e66     0x16    li a6,3
    0x84010e68     0x18    bne a5,a6,ffffffff84010ea8 <Arch_sameRegionAs+0x58>
    0x84010e6c     0x1c    srli a2,a2,0x3b
    0x84010e6e     0x1e    li a5,3
    0x84010e70     0x20    li a0,0
    0x84010e72     0x22    bne a2,a5,ffffffff84010f06 <Arch_sameRegionAs+0xb6>
    0x84010e76     0x26    srli a1,a1,0x9
    0x84010e78     0x28    slli a0,a1,0x19
    0x84010e7c     0x2c    srli a5,a0,0x19
    0x84010e80     0x30    srli a1,a1,0x26
    0x84010e82     0x32    andi a1,a1,1
    0x84010e84     0x34    beqz a1,ffffffff84010e8c <Arch_sameRegionAs+0x3c>
    0x84010e86     0x36    li a4,-1
    0x84010e88     0x38    slli a4,a4,0x27
    0x84010e8a     0x3a    or a5,a5,a4
    0x84010e8c     0x3c    srli a3,a3,0x9
    0x84010e8e     0x3e    slli a0,a3,0x19
    0x84010e92     0x42    srli a0,a0,0x19
    0x84010e94     0x44    srli a3,a3,0x26
    0x84010e96     0x46    andi a3,a3,1
    0x84010e98     0x48    beqz a3,ffffffff84010ea0 <Arch_sameRegionAs+0x50>
    0x84010e9a     0x4a    li a4,-1
    0x84010e9c     0x4c    slli a4,a4,0x27
    0x84010e9e     0x4e    or a0,a0,a4
    0x84010ea0     0x50    sub a0,a0,a5
    0x84010ea2     0x52    seqz a0,a0
    0x84010ea6     0x56    ret
    0x84010ea8     0x58    li a0,0
    0x84010eaa     0x5a    ret
    0x84010eac     0x5c    li a3,13
    0x84010eae     0x5e    bne a5,a3,ffffffff84010ef6 <Arch_sameRegionAs+0xa6>
    0x84010eb2     0x62    srli a5,a2,0x3b
    0x84010eb6     0x66    li a3,13
    0x84010eb8     0x68    li a0,0
    0x84010eba     0x6a    bne a5,a3,ffffffff84010f06 <Arch_sameRegionAs+0xb6>
    0x84010ebe     0x6e    slli a4,a4,0x2
    0x84010ec0     0x70    lui a0,0xf8000
    0x84010ec4     0x74    srli a0,a0,0x19
    0x84010ec6     0x76    and a0,a0,a4
    0x84010ec8     0x78    srli a4,a4,0x26
    0x84010eca     0x7a    andi a4,a4,1
    0x84010ecc     0x7c    beqz a4,ffffffff84010ed4 <Arch_sameRegionAs+0x84>
    0x84010ece     0x7e    li a5,-1
    0x84010ed0     0x80    slli a5,a5,0x27
    0x84010ed2     0x82    or a0,a0,a5
    0x84010ed4     0x84    slli a4,a2,0x2
    0x84010ed8     0x88    lui a5,0xf8000
    0x84010edc     0x8c    srli a5,a5,0x19
    0x84010ede     0x8e    and a5,a5,a4
    0x84010ee0     0x90    srli a4,a4,0x26
    0x84010ee2     0x92    andi a4,a4,1
    0x84010ee4     0x94    beqz a4,ffffffff84010eec <Arch_sameRegionAs+0x9c>
    0x84010ee6     0x96    li a4,-1
    0x84010ee8     0x98    slli a4,a4,0x27
    0x84010eea     0x9a    or a5,a5,a4
    0x84010eec     0x9c    sub a0,a5,a0
    0x84010ef0     0xa0    seqz a0,a0
    0x84010ef4     0xa4    ret
    0x84010ef6     0xa6    li a0,0
    0x84010ef8     0xa8    ret
    0x84010efa     0xaa    srli a5,a2,0x3b
    0x84010efe     0xae    li a6,1
    0x84010f00     0xb0    li a0,0
    0x84010f02     0xb2    beq a5,a6,ffffffff84010f08 <Arch_sameRegionAs+0xb8>
    0x84010f06     0xb6    ret
    0x84010f08     0xb8    addi sp,sp,-48
    0x84010f0a     0xba    sd ra,40(sp)          ; stack access
    0x84010f0c     0xbc    srli a1,a1,0x9
    0x84010f0e     0xbe    slli a5,a1,0x19
    0x84010f12     0xc2    srli a5,a5,0x19
    0x84010f14     0xc4    srli a1,a1,0x26
    0x84010f16     0xc6    andi a1,a1,1
    0x84010f18     0xc8    beqz a1,ffffffff84010f20 <Arch_sameRegionAs+0xd0>
    0x84010f1a     0xca    li a1,-1
    0x84010f1c     0xcc    slli a1,a1,0x27
    0x84010f1e     0xce    or a5,a5,a1
    0x84010f20     0xd0    srli a3,a3,0x9
    0x84010f22     0xd2    slli a1,a3,0x19
    0x84010f26     0xd6    srli a1,a1,0x19
    0x84010f28     0xd8    srli a3,a3,0x26
    0x84010f2a     0xda    andi a3,a3,1
    0x84010f2c     0xdc    beqz a3,ffffffff84010f34 <Arch_sameRegionAs+0xe4>
    0x84010f2e     0xde    li a3,-1
    0x84010f30     0xe0    slli a3,a3,0x27
    0x84010f32     0xe2    or a1,a1,a3
    0x84010f34     0xe4    srli a4,a4,0x39
    0x84010f36     0xe6    andi a4,a4,3
    0x84010f38     0xe8    li a3,1
    0x84010f3a     0xea    beq a4,a3,ffffffff84010f4a <Arch_sameRegionAs+0xfa>
    0x84010f3e     0xee    li a3,2
    0x84010f40     0xf0    beq a4,a3,ffffffff84010f4e <Arch_sameRegionAs+0xfe>
    0x84010f44     0xf4    beqz a4,ffffffff84010f66 <Arch_sameRegionAs+0x116>
    0x84010f46     0xf6    jal ra,ffffffff84010490 <halt>
    0x84010f4a     0xfa    li a6,21
    0x84010f4c     0xfc    j ffffffff84010f50 <Arch_sameRegionAs+0x100>
    0x84010f4e     0xfe    li a6,30
    0x84010f50    0x100    srli a2,a2,0x39
    0x84010f52    0x102    andi a2,a2,3
    0x84010f54    0x104    li a4,1
    0x84010f56    0x106    beq a2,a4,ffffffff84010f6a <Arch_sameRegionAs+0x11a>
    0x84010f5a    0x10a    li a4,2
    0x84010f5c    0x10c    beq a2,a4,ffffffff84010f6e <Arch_sameRegionAs+0x11e>
    0x84010f60    0x110    beqz a2,ffffffff84010f9e <Arch_sameRegionAs+0x14e>
    0x84010f62    0x112    jal ra,ffffffff84010490 <halt>
    0x84010f66    0x116    li a6,12
    0x84010f68    0x118    j ffffffff84010f50 <Arch_sameRegionAs+0x100>
    0x84010f6a    0x11a    li a4,21
    0x84010f6c    0x11c    j ffffffff84010f70 <Arch_sameRegionAs+0x120>
    0x84010f6e    0x11e    li a4,30
    0x84010f70    0x120    li a0,0
    0x84010f72    0x122    bltu a1,a5,ffffffff84010f98 <Arch_sameRegionAs+0x148>
    0x84010f76    0x126    li a3,1
    0x84010f78    0x128    sll a4,a3,a4
    0x84010f7c    0x12c    addi a2,a1,-1 # fffffffff7ffffff <ki_end+0x73fcdfff>
    0x84010f80    0x130    add a4,a4,a2
    0x84010f82    0x132    sll a3,a3,a6
    0x84010f86    0x136    addi a5,a5,-1
    0x84010f88    0x138    add a5,a5,a3
    0x84010f8a    0x13a    bltu a5,a4,ffffffff84010f98 <Arch_sameRegionAs+0x148>
    0x84010f8e    0x13e    sltu a0,a4,a1
    0x84010f92    0x142    xori a0,a0,1
    0x84010f96    0x146    sext.w a0,a0
    0x84010f98    0x148    ld ra,40(sp)          ; stack access
    0x84010f9a    0x14a    addi sp,sp,48
    0x84010f9c    0x14c    ret
    0x84010f9e    0x14e    li a4,12
    0x84010fa0    0x150    j ffffffff84010f70 <Arch_sameRegionAs+0x120>
    0x84010fa2    0x152    srli a0,a2,0x3b
    0x84010fa6    0x156    addi a0,a0,-11
    0x84010fa8    0x158    seqz a0,a0
    0x84010fac    0x15c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 193 nodes.

Section Arch_maskCapRights (151 of 301)
=======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 32 instructions.

RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84010cf4     0x0    addi sp,sp,-64
    0x84010cf6     0x2    sd ra,56(sp)          ; stack access
    0x84010cf8     0x4    sd s0,48(sp)          ; stack access
    0x84010cfa     0x6    sd s1,40(sp)          ; stack access
    0x84010cfc     0x8    mv s0,a1
    0x84010cfe     0xa    mv s1,a2
    0x84010d00     0xc    srli a4,a1,0x3b
    0x84010d04    0x10    li a5,1
    0x84010d06    0x12    beq a4,a5,ffffffff84010d1c <Arch_maskCapRights+0x28>
    0x84010d0a    0x16    sd a1,16(sp)          ; stack access
    0x84010d0c    0x18    sd a2,24(sp)          ; stack access
    0x84010d0e    0x1a    ld a0,16(sp)          ; stack access
    0x84010d10    0x1c    ld a1,24(sp)          ; stack access
    0x84010d12    0x1e    ld ra,56(sp)          ; stack access
    0x84010d14    0x20    ld s0,48(sp)          ; stack access
    0x84010d16    0x22    ld s1,40(sp)          ; stack access
    0x84010d18    0x24    addi sp,sp,64
    0x84010d1a    0x26    ret
    0x84010d1c    0x28    srli a5,a1,0x37
    0x84010d20    0x2c    mv a1,a0
    0x84010d22    0x2e    andi a0,a5,3
    0x84010d26    0x32    jal ra,ffffffff84010b82 <maskVMRights>
    0x84010d2a    0x36    andi a0,a0,3
    0x84010d2c    0x38    slli a0,a0,0x37
    0x84010d2e    0x3a    li a1,-3
    0x84010d30    0x3c    slli a1,a1,0x37
    0x84010d32    0x3e    addi a1,a1,-1
    0x84010d34    0x40    and s0,s0,a1
    0x84010d36    0x42    or s0,s0,a0
    0x84010d38    0x44    sd s0,16(sp)          ; stack access
    0x84010d3a    0x46    sd s1,24(sp)          ; stack access
    0x84010d3c    0x48    j ffffffff84010d0e <Arch_maskCapRights+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 48 nodes.

Section Arch_deriveCap (152 of 301)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 39 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84010c86     0x0    srli a5,a2,0x3b
    0x84010c8a     0x4    li a4,3
    0x84010c8c     0x6    beq a5,a4,ffffffff84010cbe <Arch_deriveCap+0x38>
    0x84010c90     0xa    bgeu a4,a5,ffffffff84010ca2 <Arch_deriveCap+0x1c>
    0x84010c94     0xe    addi a5,a5,-11
    0x84010c96    0x10    andi a5,a5,-3
    0x84010c98    0x12    beqz a5,ffffffff84010ce0 <Arch_deriveCap+0x5a>
    0x84010c9a    0x14    addi sp,sp,-32
    0x84010c9c    0x16    sd ra,24(sp)          ; stack access
    0x84010c9e    0x18    jal ra,ffffffff84010490 <halt>
    0x84010ca2    0x1c    li a4,1
    0x84010ca4    0x1e    bne a5,a4,ffffffff84010c9a <Arch_deriveCap+0x14>
    0x84010ca8    0x22    sd zero,0(a0)         ; stack access
    0x84010cac    0x26    li a5,-1
    0x84010cae    0x28    slli a4,a5,0x27
    0x84010cb2    0x2c    and a2,a2,a4
    0x84010cb4    0x2e    sd a2,8(a0)           ; stack access
    0x84010cb6    0x30    srli a5,a5,0x10
    0x84010cb8    0x32    and a3,a3,a5
    0x84010cba    0x34    sd a3,16(a0)          ; stack access
    0x84010cbc    0x36    ret
    0x84010cbe    0x38    srli a4,a2,0x27
    0x84010cc2    0x3c    andi a4,a4,1
    0x84010cc4    0x3e    bnez a4,ffffffff84010cdc <Arch_deriveCap+0x56>
    0x84010cc6    0x40    li a3,3
    0x84010cc8    0x42    auipc a2,0xa
    0x84010ccc    0x46    sd a3,-136(a2) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84010cd0    0x4a    mv a3,a4
    0x84010cd2    0x4c    mv a2,a4
    0x84010cd4    0x4e    sd a5,0(a0)           ; stack access
    0x84010cd6    0x50    sd a2,8(a0)           ; stack access
    0x84010cd8    0x52    sd a3,16(a0)          ; stack access
    0x84010cda    0x54    ret
    0x84010cdc    0x56    li a5,0
    0x84010cde    0x58    j ffffffff84010cd4 <Arch_deriveCap+0x4e>
    0x84010ce0    0x5a    sd zero,0(a0)         ; stack access
    0x84010ce4    0x5e    sd a2,8(a0)           ; stack access
    0x84010ce6    0x60    sd a3,16(a0)          ; stack access
    0x84010ce8    0x62    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 64 nodes.

Section performPageInvocationUnmap (153 of 301)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 43 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x84010bda     0x0    addi sp,sp,-32
    0x84010bdc     0x2    sd ra,24(sp)          ; stack access
    0x84010bde     0x4    sd s0,16(sp)          ; stack access
    0x84010be0     0x6    sd a0,0(sp)           ; stack access
    0x84010be2     0x8    mv s0,a2
    0x84010be4     0xa    mv a5,a1
    0x84010be6     0xc    srli a1,a1,0x30
    0x84010be8     0xe    beqz a1,ffffffff84010c1a <performPageInvocationUnmap+0x40>
    0x84010bea    0x10    mv a4,a0
    0x84010bec    0x12    srli a0,a0,0x39
    0x84010bee    0x14    andi a0,a0,3
    0x84010bf0    0x16    slli a2,a4,0x19
    0x84010bf4    0x1a    srli a2,a2,0x19
    0x84010bf6    0x1c    srli a4,a4,0x26
    0x84010bf8    0x1e    andi a4,a4,1
    0x84010bfa    0x20    beqz a4,ffffffff84010c02 <performPageInvocationUnmap+0x28>
    0x84010bfc    0x22    li a4,-1
    0x84010bfe    0x24    slli a4,a4,0x27
    0x84010c00    0x26    or a2,a2,a4
    0x84010c02    0x28    srli a5,a5,0x9
    0x84010c04    0x2a    slli a3,a5,0x19
    0x84010c08    0x2e    srli a3,a3,0x19
    0x84010c0a    0x30    srli a5,a5,0x26
    0x84010c0c    0x32    andi a5,a5,1
    0x84010c0e    0x34    beqz a5,ffffffff84010c16 <performPageInvocationUnmap+0x3c>
    0x84010c10    0x36    li a5,-1
    0x84010c12    0x38    slli a5,a5,0x27
    0x84010c14    0x3a    or a3,a3,a5
    0x84010c16    0x3c    jal ra,ffffffff84010930 <unmapPage>
    0x84010c1a    0x40    ld a4,8(s0)
    0x84010c1c    0x42    li a5,-1
    0x84010c1e    0x44    srli a3,a5,0x10
    0x84010c22    0x48    and a4,a4,a3
    0x84010c24    0x4a    ld a3,0(s0)
    0x84010c26    0x4c    slli a5,a5,0x27
    0x84010c28    0x4e    and a5,a5,a3
    0x84010c2a    0x50    sd a5,0(s0)
    0x84010c2c    0x52    sd a4,8(s0)
    0x84010c2e    0x54    li a0,0
    0x84010c30    0x56    ld ra,24(sp)          ; stack access
    0x84010c32    0x58    ld s0,16(sp)          ; stack access
    0x84010c34    0x5a    addi sp,sp,32
    0x84010c36    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 60 nodes.

Section deleteASID (154 of 301)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 23 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASID`:

    0x84010ae2     0x0    srli a5,a0,0x9
    0x84010ae6     0x4    slli a4,a5,0x3
    0x84010aea     0x8    auipc a5,0xa
    0x84010aee     0xc    addi a5,a5,-746 # ffffffff8401a800 <riscvKSASIDTable>
    0x84010af2    0x10    add a5,a5,a4
    0x84010af4    0x12    ld a5,0(a5)
    0x84010af6    0x14    beqz a5,ffffffff84010b06 <deleteASID+0x24>
    0x84010af8    0x16    andi a4,a0,511
    0x84010afc    0x1a    slli a4,a4,0x3
    0x84010afe    0x1c    add a5,a5,a4
    0x84010b00    0x1e    ld a4,0(a5)
    0x84010b02    0x20    beq a4,a1,ffffffff84010b08 <deleteASID+0x26>
    0x84010b06    0x24    ret
    0x84010b08    0x26    addi sp,sp,-16
    0x84010b0a    0x28    sd ra,8(sp)           ; stack access
    0x84010b0c    0x2a    sfence.vma zero,a0
    0x84010b10    0x2e    sd zero,0(a5)
    0x84010b14    0x32    auipc a0,0x1c
    0x84010b18    0x36    ld a0,1348(a0) # ffffffff8402d058 <ksCurThread>
    0x84010b1c    0x3a    jal ra,ffffffff840109be <setVMRoot>
    0x84010b20    0x3e    ld ra,8(sp)           ; stack access
    0x84010b22    0x40    addi sp,sp,16
    0x84010b24    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 37 nodes.

Section deleteASIDPool (155 of 301)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASIDPool`:

    0x84010aa4     0x0    srli a0,a0,0x9
    0x84010aa6     0x2    slli a4,a0,0x3
    0x84010aaa     0x6    auipc a5,0xa
    0x84010aae     0xa    addi a5,a5,-682 # ffffffff8401a800 <riscvKSASIDTable>
    0x84010ab2     0xe    add a5,a5,a4
    0x84010ab4    0x10    ld a5,0(a5)
    0x84010ab6    0x12    beq a5,a1,ffffffff84010abc <deleteASIDPool+0x18>
    0x84010aba    0x16    ret
    0x84010abc    0x18    addi sp,sp,-16
    0x84010abe    0x1a    sd ra,8(sp)           ; stack access
    0x84010ac0    0x1c    auipc a5,0xa
    0x84010ac4    0x20    addi a5,a5,-704 # ffffffff8401a800 <riscvKSASIDTable>
    0x84010ac8    0x24    add a0,a5,a4
    0x84010acc    0x28    sd zero,0(a0)
    0x84010ad0    0x2c    auipc a0,0x1c
    0x84010ad4    0x30    ld a0,1416(a0) # ffffffff8402d058 <ksCurThread>
    0x84010ad8    0x34    jal ra,ffffffff840109be <setVMRoot>
    0x84010adc    0x38    ld ra,8(sp)           ; stack access
    0x84010ade    0x3a    addi sp,sp,16
    0x84010ae0    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 30 nodes.

Section Arch_switchToIdleThread (156 of 301)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToIdleThread`:

    0x84010a8e     0x0    addi sp,sp,-16
    0x84010a90     0x2    sd ra,8(sp)           ; stack access
    0x84010a92     0x4    auipc a0,0x1c
    0x84010a96     0x8    ld a0,1470(a0) # ffffffff8402d050 <ksIdleThread>
    0x84010a9a     0xc    jal ra,ffffffff840109be <setVMRoot>
    0x84010a9e    0x10    ld ra,8(sp)           ; stack access
    0x84010aa0    0x12    addi sp,sp,16
    0x84010aa2    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 13 nodes.

Section Arch_switchToThread (157 of 301)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToThread`:

    0x84010a80    0x0    addi sp,sp,-16
    0x84010a82    0x2    sd ra,8(sp)           ; stack access
    0x84010a84    0x4    jal ra,ffffffff840109be <setVMRoot>
    0x84010a88    0x8    ld ra,8(sp)           ; stack access
    0x84010a8a    0xa    addi sp,sp,16
    0x84010a8c    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 10 nodes.

Section setVMRoot (158 of 301)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 75 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `setVMRoot`:

    0x840109be     0x0    andi a0,a0,-1024
    0x840109c2     0x4    ld a5,32(a0)
    0x840109c4     0x6    srli a5,a5,0x3b
    0x840109c6     0x8    li a4,3
    0x840109c8     0xa    beq a5,a4,ffffffff840109f2 <setVMRoot+0x34>
    0x840109cc     0xe    auipc a5,0x1f
    0x840109d0    0x12    addi a5,a5,1588 # ffffffff84030000 <kernel_root_pageTable>
    0x840109d4    0x16    li a4,1
    0x840109d6    0x18    slli a4,a4,0x20
    0x840109d8    0x1a    add a5,a5,a4
    0x840109da    0x1c    srli a5,a5,0xc
    0x840109dc    0x1e    li a4,-1
    0x840109de    0x20    srli a3,a4,0x14
    0x840109e2    0x24    and a5,a5,a3
    0x840109e4    0x26    slli a4,a4,0x3f
    0x840109e6    0x28    or a5,a5,a4
    0x840109e8    0x2a    csrw satp,a5
    0x840109ec    0x2e    sfence.vma
    0x840109f0    0x32    ret
    0x840109f2    0x34    addi sp,sp,-48
    0x840109f4    0x36    sd ra,40(sp)          ; stack access
    0x840109f6    0x38    sd s0,32(sp)          ; stack access
    0x840109f8    0x3a    sd s1,24(sp)          ; stack access
    0x840109fa    0x3c    sd s2,16(sp)          ; stack access
    0x840109fc    0x3e    addi a3,a0,32
    0x84010a00    0x42    ld a5,8(a3)
    0x84010a02    0x44    srli a4,a5,0x9
    0x84010a06    0x48    slli s0,a4,0x19
    0x84010a0a    0x4c    srli s0,s0,0x19
    0x84010a0c    0x4e    srli a4,a4,0x26
    0x84010a0e    0x50    andi a4,a4,1
    0x84010a10    0x52    beqz a4,ffffffff84010a18 <setVMRoot+0x5a>
    0x84010a12    0x54    li a4,-1
    0x84010a14    0x56    slli a4,a4,0x27
    0x84010a16    0x58    or s0,s0,a4
    0x84010a18    0x5a    srli s1,a5,0x30
    0x84010a1c    0x5e    mv a0,s1
    0x84010a1e    0x60    jal ra,ffffffff84010182 <findVSpaceForASID>
    0x84010a22    0x64    sd a0,0(sp)           ; stack access
    0x84010a24    0x66    sd a1,8(sp)           ; stack access
    0x84010a26    0x68    bnez a0,ffffffff84010a5a <setVMRoot+0x9c>
    0x84010a28    0x6a    bne a1,s0,ffffffff84010a5a <setVMRoot+0x9c>
    0x84010a2c    0x6e    li a5,1
    0x84010a2e    0x70    slli a5,a5,0x26
    0x84010a30    0x72    add a5,a5,s0
    0x84010a32    0x74    srli a5,a5,0xc
    0x84010a34    0x76    li a4,-1
    0x84010a36    0x78    srli s0,a4,0x14
    0x84010a3a    0x7c    and a5,a5,s0
    0x84010a3c    0x7e    slli a0,s1,0x2c
    0x84010a40    0x82    or a5,a5,a0
    0x84010a42    0x84    slli a4,a4,0x3f
    0x84010a44    0x86    or a5,a5,a4
    0x84010a46    0x88    csrw satp,a5
    0x84010a4a    0x8c    sfence.vma
    0x84010a4e    0x90    ld ra,40(sp)          ; stack access
    0x84010a50    0x92    ld s0,32(sp)          ; stack access
    0x84010a52    0x94    ld s1,24(sp)          ; stack access
    0x84010a54    0x96    ld s2,16(sp)          ; stack access
    0x84010a56    0x98    addi sp,sp,48
    0x84010a58    0x9a    ret
    0x84010a5a    0x9c    auipc a5,0x1f
    0x84010a5e    0xa0    addi a5,a5,1446 # ffffffff84030000 <kernel_root_pageTable>
    0x84010a62    0xa4    li a4,1
    0x84010a64    0xa6    slli a4,a4,0x20
    0x84010a66    0xa8    add a5,a5,a4
    0x84010a68    0xaa    srli a5,a5,0xc
    0x84010a6a    0xac    li a4,-1
    0x84010a6c    0xae    srli a3,a4,0x14
    0x84010a70    0xb2    and a5,a5,a3
    0x84010a72    0xb4    slli a4,a4,0x3f
    0x84010a74    0xb6    or a5,a5,a4
    0x84010a76    0xb8    csrw satp,a5
    0x84010a7a    0xbc    sfence.vma
    0x84010a7e    0xc0    j ffffffff84010a4e <setVMRoot+0x90>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 104 nodes.

Section unmapPageTable (159 of 301)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 64 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `unmapPageTable`:

    0x84010886     0x0    addi sp,sp,-48
    0x84010888     0x2    sd ra,40(sp)          ; stack access
    0x8401088a     0x4    sd s0,32(sp)          ; stack access
    0x8401088c     0x6    sd s1,24(sp)          ; stack access
    0x8401088e     0x8    mv s0,a1
    0x84010890     0xa    mv s1,a2
    0x84010892     0xc    jal ra,ffffffff84010182 <findVSpaceForASID>
    0x84010896    0x10    sd a0,0(sp)           ; stack access
    0x84010898    0x12    sd a1,8(sp)           ; stack access
    0x8401089a    0x14    bnez a0,ffffffff8401091a <unmapPageTable+0x94>
    0x8401089c    0x16    beq a1,s1,ffffffff84010924 <unmapPageTable+0x9e>
    0x840108a0    0x1a    srli a5,s0,0x1e
    0x840108a4    0x1e    andi a5,a5,511
    0x840108a8    0x22    slli a5,a5,0x3
    0x840108aa    0x24    add a4,a1,a5
    0x840108ae    0x28    ld a5,0(a4)
    0x840108b0    0x2a    andi a3,a5,1
    0x840108b4    0x2e    beqz a3,ffffffff8401091a <unmapPageTable+0x94>
    0x840108b6    0x30    srli a3,a5,0x1
    0x840108ba    0x34    srli a2,a5,0x2
    0x840108be    0x38    or a3,a3,a2
    0x840108c0    0x3a    srli a2,a5,0x3
    0x840108c4    0x3e    or a3,a3,a2
    0x840108c6    0x40    andi a3,a3,1
    0x840108c8    0x42    bnez a3,ffffffff8401091a <unmapPageTable+0x94>
    0x840108ca    0x44    slli a5,a5,0x2
    0x840108cc    0x46    lui a3,0xfff00
    0x840108d0    0x4a    srli a3,a3,0x8
    0x840108d2    0x4c    and a5,a5,a3
    0x840108d4    0x4e    li a3,-1
    0x840108d6    0x50    slli a3,a3,0x26
    0x840108d8    0x52    add a5,a5,a3
    0x840108da    0x54    beq s1,a5,ffffffff84010926 <unmapPageTable+0xa0>
    0x840108de    0x58    srli s0,s0,0x15
    0x840108e0    0x5a    andi s0,s0,511
    0x840108e4    0x5e    slli s0,s0,0x3
    0x840108e6    0x60    add a4,a5,s0
    0x840108ea    0x64    ld a5,0(a4)
    0x840108ec    0x66    andi a3,a5,1
    0x840108f0    0x6a    beqz a3,ffffffff8401091a <unmapPageTable+0x94>
    0x840108f2    0x6c    srli a3,a5,0x1
    0x840108f6    0x70    srli a2,a5,0x2
    0x840108fa    0x74    or a3,a3,a2
    0x840108fc    0x76    srli a2,a5,0x3
    0x84010900    0x7a    or a3,a3,a2
    0x84010902    0x7c    andi a3,a3,1
    0x84010904    0x7e    bnez a3,ffffffff8401091a <unmapPageTable+0x94>
    0x84010906    0x80    slli a5,a5,0x2
    0x84010908    0x82    lui a3,0xfff00
    0x8401090c    0x86    srli a3,a3,0x8
    0x8401090e    0x88    and a5,a5,a3
    0x84010910    0x8a    li a3,-1
    0x84010912    0x8c    slli a3,a3,0x26
    0x84010914    0x8e    add a5,a5,a3
    0x84010916    0x90    beq s1,a5,ffffffff84010926 <unmapPageTable+0xa0>
    0x8401091a    0x94    ld ra,40(sp)          ; stack access
    0x8401091c    0x96    ld s0,32(sp)          ; stack access
    0x8401091e    0x98    ld s1,24(sp)          ; stack access
    0x84010920    0x9a    addi sp,sp,48
    0x84010922    0x9c    ret
    0x84010924    0x9e    li a4,0
    0x84010926    0xa0    sd zero,0(a4)
    0x8401092a    0xa4    sfence.vma
    0x8401092e    0xa8    j ffffffff8401091a <unmapPageTable+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 94 nodes.

Section handleVMFault (160 of 301)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 35 instructions.

Skipping 143026f3 csrr a3,stval
Switch found.


Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x84010818     0x0    csrr a3,stval
    0x8401081c     0x4    li a5,15
    0x8401081e     0x6    bltu a5,a1,ffffffff8401087e <handleVMFault+0x66>
    0x84010822     0xa    slli a1,a1,0x2
    0x84010824     0xc    auipc a4,0x9
    0x84010828    0x10    addi a4,a4,656 # ffffffff84019ab4 <msgRegisters+0x6c>
    0x8401082c    0x14    add a1,a1,a4
    0x8401082e    0x16    lw a5,0(a1)
    0x84010830    0x18    add a5,a5,a4
    0x84010832    0x1a    jr a5
    0x84010834    0x1c    auipc a4,0xa
    0x84010838    0x20    addi a4,a4,-52 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401083c    0x24    lui a5,0x28000
    0x84010840    0x28    addi a5,a5,6
    0x84010842    0x2a    sd a5,1736(a4)
    0x84010846    0x2e    sd a3,1744(a4)
    0x8401084a    0x32    li a0,1
    0x8401084c    0x34    ret
    0x8401084e    0x36    auipc a4,0xa
    0x84010852    0x3a    addi a4,a4,-78 # ffffffff8401a800 <riscvKSASIDTable>
    0x84010856    0x3e    lui a5,0x38000
    0x8401085a    0x42    addi a5,a5,6
    0x8401085c    0x44    sd a5,1736(a4)
    0x84010860    0x48    sd a3,1744(a4)
    0x84010864    0x4c    j ffffffff8401084a <handleVMFault+0x32>
    0x84010866    0x4e    auipc a4,0xa
    0x8401086a    0x52    addi a4,a4,-102 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401086e    0x56    lui a5,0x8080
    0x84010872    0x5a    addi a5,a5,6
    0x84010874    0x5c    sd a5,1736(a4)
    0x84010878    0x60    sd a3,1744(a4)
    0x8401087c    0x64    j ffffffff8401084a <handleVMFault+0x32>
    0x8401087e    0x66    addi sp,sp,-16
    0x84010880    0x68    sd ra,8(sp)           ; stack access
    0x84010882    0x6a    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 87 nodes.

Section lookupIPCBuffer (161 of 301)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 56 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x84010542     0x0    andi a5,a1,-1024
    0x84010546     0x4    addi a2,a5,64
    0x8401054a     0x8    ld a5,64(a5)
    0x8401054c     0xa    srli a3,a5,0x3b
    0x84010550     0xe    li a4,1
    0x84010552    0x10    bne a3,a4,ffffffff840105c6 <lookupIPCBuffer+0x84>
    0x84010556    0x14    srli a4,a5,0x36
    0x8401055a    0x18    andi a4,a4,1
    0x8401055c    0x1a    bnez a4,ffffffff840105ca <lookupIPCBuffer+0x88>
    0x8401055e    0x1c    srli a4,a5,0x37
    0x84010562    0x20    andi a4,a4,3
    0x84010564    0x22    li a3,3
    0x84010566    0x24    bne a4,a3,ffffffff840105a0 <lookupIPCBuffer+0x5e>
    0x8401056a    0x28    ld a4,8(a2)
    0x8401056c    0x2a    srli a4,a4,0x9
    0x8401056e    0x2c    slli a0,a4,0x19
    0x84010572    0x30    srli a3,a0,0x19
    0x84010576    0x34    srli a4,a4,0x26
    0x84010578    0x36    andi a4,a4,1
    0x8401057a    0x38    beqz a4,ffffffff84010582 <lookupIPCBuffer+0x40>
    0x8401057c    0x3a    li a4,-1
    0x8401057e    0x3c    slli a4,a4,0x27
    0x84010580    0x3e    or a3,a3,a4
    0x84010582    0x40    ld a4,384(a1)
    0x84010586    0x44    srli a5,a5,0x39
    0x84010588    0x46    andi a5,a5,3
    0x8401058a    0x48    li a2,1
    0x8401058c    0x4a    beq a5,a2,ffffffff840105ac <lookupIPCBuffer+0x6a>
    0x84010590    0x4e    li a2,2
    0x84010592    0x50    beq a5,a2,ffffffff840105b0 <lookupIPCBuffer+0x6e>
    0x84010596    0x54    beqz a5,ffffffff840105c2 <lookupIPCBuffer+0x80>
    0x84010598    0x56    addi sp,sp,-16
    0x8401059a    0x58    sd ra,8(sp)           ; stack access
    0x8401059c    0x5a    jal ra,ffffffff84010490 <halt>
    0x840105a0    0x5e    bnez a0,ffffffff840105ce <lookupIPCBuffer+0x8c>
    0x840105a2    0x60    li a3,2
    0x840105a4    0x62    beq a4,a3,ffffffff8401056a <lookupIPCBuffer+0x28>
    0x840105a8    0x66    li a0,0
    0x840105aa    0x68    ret
    0x840105ac    0x6a    li a5,21
    0x840105ae    0x6c    j ffffffff840105b2 <lookupIPCBuffer+0x70>
    0x840105b0    0x6e    li a5,30
    0x840105b2    0x70    li a0,-1
    0x840105b4    0x72    sll a0,a0,a5
    0x840105b8    0x76    not a0,a0
    0x840105bc    0x7a    and a0,a0,a4
    0x840105be    0x7c    add a0,a0,a3
    0x840105c0    0x7e    ret
    0x840105c2    0x80    li a5,12
    0x840105c4    0x82    j ffffffff840105b2 <lookupIPCBuffer+0x70>
    0x840105c6    0x84    li a0,0
    0x840105c8    0x86    ret
    0x840105ca    0x88    li a0,0
    0x840105cc    0x8a    ret
    0x840105ce    0x8c    li a0,0
    0x840105d0    0x8e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 84 nodes.

Section Arch_handleFaultReply (162 of 301)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x8401049c    0x0    li a5,6
    0x8401049e    0x2    bne a2,a5,ffffffff840104a6 <Arch_handleFaultReply+0xa>
    0x840104a2    0x6    li a0,1
    0x840104a4    0x8    ret
    0x840104a6    0xa    addi sp,sp,-16
    0x840104a8    0xc    sd ra,8(sp)           ; stack access
    0x840104aa    0xe    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section isHighestPrio (163 of 301)
==================================

Deriving specifications
-----------------------

Section `isHighestPrio` consists of 40 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isHighestPrio`:

    0x8401037e     0x0    addi sp,sp,-32
    0x84010380     0x2    sd ra,24(sp)          ; stack access
    0x84010382     0x4    sd s0,16(sp)          ; stack access
    0x84010384     0x6    sd s1,8(sp)           ; stack access
    0x84010386     0x8    sd s2,0(sp)           ; stack access
    0x84010388     0xa    mv s0,a0
    0x8401038a     0xc    slli a4,a0,0x3
    0x8401038e    0x10    auipc a5,0xa
    0x84010392    0x14    addi a5,a5,1138 # ffffffff8401a800 <riscvKSASIDTable>
    0x84010396    0x18    add a5,a5,a4
    0x84010398    0x1a    ld a0,1096(a5)
    0x8401039c    0x1e    beqz a0,ffffffff840103ea <isHighestPrio+0x6c>
    0x8401039e    0x20    mv s1,a1
    0x840103a0    0x22    jal ra,ffffffff840100cc <clzl>
    0x840103a4    0x26    mv s2,a0
    0x840103a6    0x28    slli s0,s0,0x2
    0x840103a8    0x2a    addi a0,a0,-60 # fffffffff7ffffc4 <ki_end+0x73fcdfc4>
    0x840103ac    0x2e    add s0,s0,a0
    0x840103ae    0x30    slli s0,s0,0x3
    0x840103b0    0x32    auipc a5,0xa
    0x840103b4    0x36    addi a5,a5,1104 # ffffffff8401a800 <riscvKSASIDTable>
    0x840103b8    0x3a    add s0,s0,a5
    0x840103ba    0x3c    ld a0,1224(s0) # 14c8 <KERNEL_OFFSET-0xfffffffeffffeb38>
    0x840103be    0x40    jal ra,ffffffff840100cc <clzl>
    0x840103c2    0x44    li a5,63
    0x840103c6    0x48    sub s2,a5,s2
    0x840103ca    0x4c    slli s2,s2,0x6
    0x840103cc    0x4e    sub a0,a5,a0
    0x840103d0    0x52    or a0,s2,a0
    0x840103d4    0x56    sltu a0,s1,a0
    0x840103d8    0x5a    xori a0,a0,1
    0x840103dc    0x5e    sext.w a0,a0
    0x840103de    0x60    ld ra,24(sp)          ; stack access
    0x840103e0    0x62    ld s0,16(sp)          ; stack access
    0x840103e2    0x64    ld s1,8(sp)           ; stack access
    0x840103e4    0x66    ld s2,0(sp)           ; stack access
    0x840103e6    0x68    addi sp,sp,32
    0x840103e8    0x6a    ret
    0x840103ea    0x6c    li a0,1
    0x840103ec    0x6e    j ffffffff840103de <isHighestPrio+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
40 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isHighestPrio` has 55 nodes.

Section interrupt (164 of 301)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840100c4    0x0    sd ra,272(t0)
    0x840100c8    0x4    j ffffffff8401558c <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (165 of 301)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840100bc    0x0    sd ra,272(t0)
    0x840100c0    0x4    j ffffffff8401575c <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (166 of 301)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840100b2    0x0    addi ra,ra,4
    0x840100b4    0x2    sd ra,272(t0)
    0x840100b8    0x6    j ffffffff8401986c <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section maybe_alloc_extra_bi (167 of 301)
=========================================

Deriving specifications
-----------------------

Section `maybe_alloc_extra_bi` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `maybe_alloc_extra_bi`:

    0x84000f44     0x0    bltu a1,a0,ffffffff84000f54 <maybe_alloc_extra_bi+0x10>
    0x84000f48     0x4    mv a5,a1
    0x84000f4a     0x6    auipc a4,0x1
    0x84000f4e     0xa    ld a4,-1650(a4) # ffffffff840018d8 <rootserver+0x28>
    0x84000f52     0xe    beqz a4,ffffffff84000f56 <maybe_alloc_extra_bi+0x12>
    0x84000f54    0x10    ret
    0x84000f56    0x12    addi sp,sp,-16
    0x84000f58    0x14    sd ra,8(sp)           ; stack access
    0x84000f5a    0x16    li a1,1
    0x84000f5c    0x18    mv a0,a5
    0x84000f5e    0x1a    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84000f62    0x1e    auipc a5,0x1
    0x84000f66    0x22    sd a0,-1674(a5) # ffffffff840018d8 <rootserver+0x28>
    0x84000f6a    0x26    ld ra,8(sp)           ; stack access
    0x84000f6c    0x28    addi sp,sp,16
    0x84000f6e    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maybe_alloc_extra_bi` has 27 nodes.

Section alloc_rootserver_obj (168 of 301)
=========================================

Deriving specifications
-----------------------

Section `alloc_rootserver_obj` consists of 16 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `alloc_rootserver_obj`:

    0x84000f16     0x0    addi sp,sp,-16
    0x84000f18     0x2    sd ra,8(sp)           ; stack access
    0x84000f1a     0x4    sd s0,0(sp)           ; stack access
    0x84000f1c     0x6    auipc a5,0x0
    0x84000f20     0xa    addi a5,a5,1844 # ffffffff84001650 <ndks_boot>
    0x84000f24     0xe    ld s0,688(a5)
    0x84000f28    0x12    sll a1,a1,a0
    0x84000f2c    0x16    add a4,a1,s0
    0x84000f30    0x1a    sd a4,688(a5)
    0x84000f34    0x1e    mv a0,s0
    0x84000f36    0x20    jal ra,ffffffff84017ae8 <memzero>
    0x84000f3a    0x24    mv a0,s0
    0x84000f3c    0x26    ld ra,8(sp)           ; stack access
    0x84000f3e    0x28    ld s0,0(sp)           ; stack access
    0x84000f40    0x2a    addi sp,sp,16
    0x84000f42    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `alloc_rootserver_obj` has 24 nodes.

Section configureIdleThread (169 of 301)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `configureIdleThread`:

    0x84000d9c     0x0    addi sp,sp,-16
    0x84000d9e     0x2    sd ra,8(sp)           ; stack access
    0x84000da0     0x4    auipc a4,0xf
    0x84000da4     0x8    addi a4,a4,952 # ffffffff84010158 <idle_thread>
    0x84000da8     0xc    sd a4,272(a0)
    0x84000dac    0x10    li a4,288
    0x84000db0    0x14    sd a4,256(a0)
    0x84000db4    0x18    auipc a4,0x2c
    0x84000db8    0x1c    addi a4,a4,588 # ffffffff8402d000 <tlbLockCount>
    0x84000dbc    0x20    sd a4,8(a0)
    0x84000dbe    0x22    li a1,7
    0x84000dc0    0x24    jal ra,ffffffff84012996 <setThreadState>
    0x84000dc4    0x28    ld ra,8(sp)           ; stack access
    0x84000dc6    0x2a    addi sp,sp,16
    0x84000dc8    0x2c    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 22 nodes.

Section create_kernel_untypeds (170 of 301)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 38 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x84000ba6     0x0    addi sp,sp,-80
    0x84000ba8     0x2    sd ra,72(sp)          ; stack access
    0x84000baa     0x4    sd s0,64(sp)          ; stack access
    0x84000bac     0x6    sd s1,56(sp)          ; stack access
    0x84000bae     0x8    sd s2,48(sp)          ; stack access
    0x84000bb0     0xa    sd a0,16(sp)          ; stack access
    0x84000bb2     0xc    sd a1,24(sp)          ; stack access
    0x84000bb4     0xe    mv a6,a3
    0x84000bb6    0x10    mv s1,a4
    0x84000bb8    0x12    mv a5,a4
    0x84000bba    0x14    mv a3,a2
    0x84000bbc    0x16    mv a4,a6
    0x84000bbe    0x18    li a2,0
    0x84000bc0    0x1a    jal ra,ffffffff840009f4 <create_untypeds_for_region>
    0x84000bc4    0x1e    beqz a0,ffffffff84000bf8 <create_kernel_untypeds+0x52>
    0x84000bc6    0x20    auipc s0,0x1
    0x84000bca    0x24    addi s0,s0,-1070 # ffffffff84001798 <ndks_boot+0x148>
    0x84000bce    0x28    auipc s2,0x1
    0x84000bd2    0x2c    addi s2,s2,-822 # ffffffff84001898 <ndks_boot+0x248>
    0x84000bd6    0x30    ld a3,0(s0)
    0x84000bd8    0x32    ld a4,8(s0)
    0x84000bda    0x34    sd zero,0(s0)
    0x84000bde    0x38    sd zero,8(s0)
    0x84000be2    0x3c    mv a5,s1
    0x84000be4    0x3e    li a2,0
    0x84000be6    0x40    ld a0,16(sp)          ; stack access
    0x84000be8    0x42    ld a1,24(sp)          ; stack access
    0x84000bea    0x44    jal ra,ffffffff840009f4 <create_untypeds_for_region>
    0x84000bee    0x48    beqz a0,ffffffff84000bf8 <create_kernel_untypeds+0x52>
    0x84000bf0    0x4a    addi s0,s0,16
    0x84000bf2    0x4c    bne s0,s2,ffffffff84000bd6 <create_kernel_untypeds+0x30>
    0x84000bf6    0x50    li a0,1
    0x84000bf8    0x52    ld ra,72(sp)          ; stack access
    0x84000bfa    0x54    ld s0,64(sp)          ; stack access
    0x84000bfc    0x56    ld s1,56(sp)          ; stack access
    0x84000bfe    0x58    ld s2,48(sp)          ; stack access
    0x84000c00    0x5a    addi sp,sp,80
    0x84000c02    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 63 nodes.

Section create_device_untypeds (171 of 301)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 68 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `create_device_untypeds`:

    0x84000b04     0x0    addi sp,sp,-96
    0x84000b06     0x2    sd ra,88(sp)          ; stack access
    0x84000b08     0x4    sd s0,80(sp)          ; stack access
    0x84000b0a     0x6    sd s1,72(sp)          ; stack access
    0x84000b0c     0x8    sd s2,64(sp)          ; stack access
    0x84000b0e     0xa    sd s3,56(sp)          ; stack access
    0x84000b10     0xc    sd s4,48(sp)          ; stack access
    0x84000b12     0xe    sd s5,40(sp)          ; stack access
    0x84000b14    0x10    sd a0,0(sp)           ; stack access
    0x84000b16    0x12    sd a1,8(sp)           ; stack access
    0x84000b18    0x14    mv s4,a2
    0x84000b1a    0x16    auipc a3,0x1
    0x84000b1e    0x1a    ld a3,-906(a3) # ffffffff84001790 <ndks_boot+0x140>
    0x84000b22    0x1e    beqz a3,ffffffff84000b86 <create_device_untypeds+0x82>
    0x84000b24    0x20    auipc s0,0x1
    0x84000b28    0x24    addi s0,s0,-1236 # ffffffff84001650 <ndks_boot>
    0x84000b2c    0x28    li s1,0
    0x84000b2e    0x2a    li a3,0
    0x84000b30    0x2c    li s5,-1
    0x84000b32    0x2e    slli s5,s5,0x26
    0x84000b34    0x30    mv s3,s0
    0x84000b36    0x32    j ffffffff84000b48 <create_device_untypeds+0x44>
    0x84000b38    0x34    ld a3,8(s2)
    0x84000b3c    0x38    addi s1,s1,1
    0x84000b3e    0x3a    addi s0,s0,16
    0x84000b40    0x3c    ld a4,320(s3)
    0x84000b44    0x40    bgeu s1,a4,ffffffff84000b68 <create_device_untypeds+0x64>
    0x84000b48    0x44    mv s2,s0
    0x84000b4a    0x46    ld a4,0(s0)
    0x84000b4c    0x48    bgeu a3,a4,ffffffff84000b38 <create_device_untypeds+0x34>
    0x84000b50    0x4c    add a3,a3,s5
    0x84000b52    0x4e    sd a3,16(sp)          ; stack access
    0x84000b54    0x50    add a4,a4,s5
    0x84000b56    0x52    sd a4,24(sp)          ; stack access
    0x84000b58    0x54    mv a5,s4
    0x84000b5a    0x56    li a2,1
    0x84000b5c    0x58    ld a0,0(sp)           ; stack access
    0x84000b5e    0x5a    ld a1,8(sp)           ; stack access
    0x84000b60    0x5c    jal ra,ffffffff840009f4 <create_untypeds_for_region>
    0x84000b64    0x60    bnez a0,ffffffff84000b38 <create_device_untypeds+0x34>
    0x84000b66    0x62    j ffffffff84000b74 <create_device_untypeds+0x70>
    0x84000b68    0x64    lui a5,0xfc000
    0x84000b6c    0x68    srli a5,a5,0x19
    0x84000b6e    0x6a    li a0,1
    0x84000b70    0x6c    bgeu a5,a3,ffffffff84000b86 <create_device_untypeds+0x82>
    0x84000b74    0x70    ld ra,88(sp)          ; stack access
    0x84000b76    0x72    ld s0,80(sp)          ; stack access
    0x84000b78    0x74    ld s1,72(sp)          ; stack access
    0x84000b7a    0x76    ld s2,64(sp)          ; stack access
    0x84000b7c    0x78    ld s3,56(sp)          ; stack access
    0x84000b7e    0x7a    ld s4,48(sp)          ; stack access
    0x84000b80    0x7c    ld s5,40(sp)          ; stack access
    0x84000b82    0x7e    addi sp,sp,96
    0x84000b84    0x80    ret
    0x84000b86    0x82    li a4,-1
    0x84000b88    0x84    slli a5,a4,0x26
    0x84000b8c    0x88    add a3,a3,a5
    0x84000b8e    0x8a    sd a3,16(sp)          ; stack access
    0x84000b90    0x8c    srli a4,a4,0x1a
    0x84000b92    0x8e    sd a4,24(sp)          ; stack access
    0x84000b94    0x90    mv a5,s4
    0x84000b96    0x92    li a2,1
    0x84000b98    0x94    ld a0,0(sp)           ; stack access
    0x84000b9a    0x96    ld a1,8(sp)           ; stack access
    0x84000b9c    0x98    jal ra,ffffffff840009f4 <create_untypeds_for_region>
    0x84000ba0    0x9c    beqz a0,ffffffff84000b74 <create_device_untypeds+0x70>
    0x84000ba2    0x9e    li a0,1
    0x84000ba4    0xa0    j ffffffff84000b74 <create_device_untypeds+0x70>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 111 nodes.

Section init_sched_control (172 of 301)
=======================================

Deriving specifications
-----------------------

Section `init_sched_control` consists of 39 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `init_sched_control`:

    0x84000946     0x0    addi sp,sp,-80
    0x84000948     0x2    sd ra,72(sp)          ; stack access
    0x8400094a     0x4    sd s0,64(sp)          ; stack access
    0x8400094c     0x6    sd s1,56(sp)          ; stack access
    0x8400094e     0x8    sd s2,48(sp)          ; stack access
    0x84000950     0xa    sd s3,40(sp)          ; stack access
    0x84000952     0xc    sd a0,0(sp)           ; stack access
    0x84000954     0xe    sd a1,8(sp)           ; stack access
    0x84000956    0x10    auipc s3,0x1
    0x8400095a    0x14    ld s3,-182(s3) # ffffffff840018a0 <ndks_boot+0x250>
    0x8400095e    0x18    beqz a2,ffffffff84000982 <init_sched_control+0x3c>
    0x84000960    0x1a    addi s1,a2,-1
    0x84000964    0x1e    li s0,0
    0x84000966    0x20    li s2,-1
    0x84000968    0x22    slli s2,s2,0x3e
    0x8400096a    0x24    mv a2,s2
    0x8400096c    0x26    mv a3,s0
    0x8400096e    0x28    ld a0,0(sp)           ; stack access
    0x84000970    0x2a    ld a1,8(sp)           ; stack access
    0x84000972    0x2c    jal ra,ffffffff84000674 <provide_cap>
    0x84000976    0x30    beq s1,s0,ffffffff84000980 <init_sched_control+0x3a>
    0x8400097a    0x34    addi s0,s0,1
    0x8400097c    0x36    bnez a0,ffffffff8400096a <init_sched_control+0x24>
    0x8400097e    0x38    j ffffffff8400099a <init_sched_control+0x54>
    0x84000980    0x3a    beqz a0,ffffffff8400099a <init_sched_control+0x54>
    0x84000982    0x3c    auipc a4,0x1
    0x84000986    0x40    addi a4,a4,-818 # ffffffff84001650 <ndks_boot>
    0x8400098a    0x44    ld a5,584(a4)
    0x8400098e    0x48    ld a4,592(a4)
    0x84000992    0x4c    sd s3,152(a5)
    0x84000996    0x50    sd a4,160(a5)
    0x84000998    0x52    li a0,1
    0x8400099a    0x54    ld ra,72(sp)          ; stack access
    0x8400099c    0x56    ld s0,64(sp)          ; stack access
    0x8400099e    0x58    ld s1,56(sp)          ; stack access
    0x840009a0    0x5a    ld s2,48(sp)          ; stack access
    0x840009a2    0x5c    ld s3,40(sp)          ; stack access
    0x840009a4    0x5e    addi sp,sp,80
    0x840009a6    0x60    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_sched_control` has 68 nodes.

Section create_it_asid_pool (173 of 301)
========================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 39 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x840008e4     0x0    addi sp,sp,-80
    0x840008e6     0x2    sd ra,72(sp)          ; stack access
    0x840008e8     0x4    sd s0,64(sp)          ; stack access
    0x840008ea     0x6    sd s1,56(sp)          ; stack access
    0x840008ec     0x8    sd s2,48(sp)          ; stack access
    0x840008ee     0xa    sd s3,40(sp)          ; stack access
    0x840008f0     0xc    mv s2,a0
    0x840008f2     0xe    mv s1,a1
    0x840008f4    0x10    auipc s0,0x1
    0x840008f8    0x14    ld s0,-52(s0) # ffffffff840018c0 <rootserver+0x10>
    0x840008fc    0x18    slli s0,s0,0x19
    0x840008fe    0x1a    srli s0,s0,0x1b
    0x84000900    0x1c    li a5,13
    0x84000902    0x1e    slli a5,a5,0x3b
    0x84000904    0x20    or s0,s0,a5
    0x84000906    0x22    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x8400090a    0x26    sd s0,192(a0)
    0x8400090c    0x28    sd zero,200(a0)
    0x84000910    0x2c    sd zero,208(a0)
    0x84000914    0x30    li s3,3
    0x84000916    0x32    sd s3,216(a0)
    0x8400091a    0x36    mv a0,s2
    0x8400091c    0x38    mv a1,s1
    0x8400091e    0x3a    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000922    0x3e    li a5,11
    0x84000924    0x40    slli a5,a5,0x3b
    0x84000926    0x42    sd a5,160(a0)
    0x84000928    0x44    sd zero,168(a0)
    0x8400092c    0x48    sd zero,176(a0)
    0x84000930    0x4c    sd s3,184(a0)
    0x84000934    0x50    mv a0,s0
    0x84000936    0x52    li a1,0
    0x84000938    0x54    ld ra,72(sp)          ; stack access
    0x8400093a    0x56    ld s0,64(sp)          ; stack access
    0x8400093c    0x58    ld s1,56(sp)          ; stack access
    0x8400093e    0x5a    ld s2,48(sp)          ; stack access
    0x84000940    0x5c    ld s3,40(sp)          ; stack access
    0x84000942    0x5e    addi sp,sp,80
    0x84000944    0x60    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 61 nodes.

Section provide_cap (174 of 301)
================================

Deriving specifications
-----------------------

Section `provide_cap` consists of 34 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `provide_cap`:

    0x84000674     0x0    addi sp,sp,-48
    0x84000676     0x2    sd ra,40(sp)          ; stack access
    0x84000678     0x4    sd s0,32(sp)          ; stack access
    0x8400067a     0x6    sd a0,16(sp)          ; stack access
    0x8400067c     0x8    sd a1,24(sp)          ; stack access
    0x8400067e     0xa    sd a2,0(sp)           ; stack access
    0x84000680     0xc    sd a3,8(sp)           ; stack access
    0x84000682     0xe    auipc a5,0x1
    0x84000686    0x12    addi a5,a5,-50 # ffffffff84001650 <ndks_boot>
    0x8400068a    0x16    ld s0,592(a5)
    0x8400068e    0x1a    ld a5,600(a5)
    0x84000692    0x1e    bltu s0,a5,ffffffff840006a0 <provide_cap+0x2c>
    0x84000696    0x22    li a0,0
    0x84000698    0x24    ld ra,40(sp)          ; stack access
    0x8400069a    0x26    ld s0,32(sp)          ; stack access
    0x8400069c    0x28    addi sp,sp,48
    0x8400069e    0x2a    ret
    0x840006a0    0x2c    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x840006a4    0x30    slli s0,s0,0x5
    0x840006a6    0x32    add s0,s0,a0
    0x840006a8    0x34    ld a5,0(sp)           ; stack access
    0x840006aa    0x36    sd a5,0(s0)
    0x840006ac    0x38    ld a5,8(sp)           ; stack access
    0x840006ae    0x3a    sd a5,8(s0)
    0x840006b0    0x3c    sd zero,16(s0)
    0x840006b4    0x40    li a5,3
    0x840006b6    0x42    sd a5,24(s0)
    0x840006b8    0x44    auipc a4,0x1
    0x840006bc    0x48    addi a4,a4,-104 # ffffffff84001650 <ndks_boot>
    0x840006c0    0x4c    ld a5,592(a4)
    0x840006c4    0x50    addi a5,a5,1
    0x840006c6    0x52    sd a5,592(a4)
    0x840006ca    0x56    li a0,1
    0x840006cc    0x58    j ffffffff84000698 <provide_cap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 56 nodes.

Section calculate_extra_bi_size_bits (175 of 301)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x8400063a     0x0    addi sp,sp,-16
    0x8400063c     0x2    sd ra,8(sp)           ; stack access
    0x8400063e     0x4    sd s0,0(sp)           ; stack access
    0x84000640     0x6    mv s0,a0
    0x84000642     0x8    beqz a0,ffffffff8400066c <calculate_extra_bi_size_bits+0x32>
    0x84000644     0xa    addi a0,a0,-1
    0x84000646     0xc    srli a0,a0,0xc
    0x84000648     0xe    addi a0,a0,1
    0x8400064a    0x10    slli a0,a0,0xc
    0x8400064c    0x12    jal ra,ffffffff840100cc <clzl>
    0x84000650    0x16    mv a4,a0
    0x84000652    0x18    li a5,63
    0x84000656    0x1c    sub a0,a5,a0
    0x8400065a    0x20    li a5,1
    0x8400065c    0x22    sll a5,a5,a0
    0x84000660    0x26    bgeu a5,s0,ffffffff8400066c <calculate_extra_bi_size_bits+0x32>
    0x84000664    0x2a    li a5,64
    0x84000668    0x2e    sub a0,a5,a4
    0x8400066c    0x32    ld ra,8(sp)           ; stack access
    0x8400066e    0x34    ld s0,0(sp)           ; stack access
    0x84000670    0x36    addi sp,sp,16
    0x84000672    0x38    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 32 nodes.

Section create_domain_cap (176 of 301)
======================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 13 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_domain_cap`:

    0x840005ca     0x0    addi sp,sp,-32
    0x840005cc     0x2    sd ra,24(sp)          ; stack access
    0x840005ce     0x4    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x840005d2     0x8    li a5,-3
    0x840005d4     0xa    slli a5,a5,0x3d
    0x840005d6     0xc    sd a5,352(a0)
    0x840005da    0x10    sd zero,360(a0)
    0x840005de    0x14    sd zero,368(a0)
    0x840005e2    0x18    li a5,3
    0x840005e4    0x1a    sd a5,376(a0)
    0x840005e8    0x1e    ld ra,24(sp)          ; stack access
    0x840005ea    0x20    addi sp,sp,32
    0x840005ec    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 21 nodes.

Section insert_region (177 of 301)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 39 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `insert_region`:

    0x8400051e     0x0    addi sp,sp,-48
    0x84000520     0x2    sd ra,40(sp)          ; stack access
    0x84000522     0x4    sd s0,32(sp)          ; stack access
    0x84000524     0x6    sd a0,0(sp)           ; stack access
    0x84000526     0x8    sd a1,8(sp)           ; stack access
    0x84000528     0xa    beq a1,a0,ffffffff84000578 <insert_region+0x5a>
    0x8400052c     0xe    auipc a5,0x1
    0x84000530    0x12    addi a5,a5,620 # ffffffff84001798 <ndks_boot+0x148>
    0x84000534    0x16    li s0,0
    0x84000536    0x18    li a2,16
    0x84000538    0x1a    ld a3,0(a5)
    0x8400053a    0x1c    ld a4,8(a5)
    0x8400053c    0x1e    beq a3,a4,ffffffff84000552 <insert_region+0x34>
    0x84000540    0x22    addi s0,s0,1
    0x84000542    0x24    addi a5,a5,16
    0x84000544    0x26    bne s0,a2,ffffffff84000538 <insert_region+0x1a>
    0x84000548    0x2a    li a0,0
    0x8400054a    0x2c    ld ra,40(sp)          ; stack access
    0x8400054c    0x2e    ld s0,32(sp)          ; stack access
    0x8400054e    0x30    addi sp,sp,48
    0x84000550    0x32    ret
    0x84000552    0x34    li a5,1
    0x84000554    0x36    slli a5,a5,0x26
    0x84000556    0x38    add a0,a0,a5
    0x84000558    0x3a    add a1,a1,a5
    0x8400055a    0x3c    jal ra,ffffffff84000352 <reserve_region>
    0x8400055e    0x40    addi s0,s0,20
    0x84000560    0x42    slli s0,s0,0x4
    0x84000562    0x44    auipc a5,0x1
    0x84000566    0x48    addi a5,a5,238 # ffffffff84001650 <ndks_boot>
    0x8400056a    0x4c    add s0,s0,a5
    0x8400056c    0x4e    ld a5,0(sp)           ; stack access
    0x8400056e    0x50    sd a5,8(s0)
    0x84000570    0x52    ld a5,8(sp)           ; stack access
    0x84000572    0x54    sd a5,16(s0)
    0x84000574    0x56    li a0,1
    0x84000576    0x58    j ffffffff8400054a <insert_region+0x2c>
    0x84000578    0x5a    li a0,1
    0x8400057a    0x5c    j ffffffff8400054a <insert_region+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 59 nodes.

Section reserve_region (178 of 301)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 78 instructions.

RVC_TFFTFFT__FT___TF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `reserve_region`:

    0x84000352     0x0    beq a0,a1,ffffffff84000438 <reserve_region+0xe6>
    0x84000356     0x4    addi sp,sp,-32
    0x84000358     0x6    sd ra,24(sp)          ; stack access
    0x8400035a     0x8    mv a7,a0
    0x8400035c     0xa    auipc a6,0x1
    0x84000360     0xe    ld a6,1076(a6) # ffffffff84001790 <ndks_boot+0x140>
    0x84000364    0x12    beqz a6,ffffffff84000394 <reserve_region+0x42>
    0x84000368    0x16    auipc t1,0x1
    0x8400036c    0x1a    addi t1,t1,744 # ffffffff84001650 <ndks_boot>
    0x84000370    0x1e    mv a5,t1
    0x84000372    0x20    li a4,0
    0x84000374    0x22    ld a3,0(a5)
    0x84000376    0x24    beq a3,a1,ffffffff840003b2 <reserve_region+0x60>
    0x8400037a    0x28    ld a2,8(a5)
    0x8400037c    0x2a    beq a2,a7,ffffffff840003ce <reserve_region+0x7c>
    0x84000380    0x2e    bltu a1,a3,ffffffff840003e4 <reserve_region+0x92>
    0x84000384    0x32    addi a4,a4,1
    0x84000386    0x34    addi a5,a5,16
    0x84000388    0x36    bne a4,a6,ffffffff84000374 <reserve_region+0x22>
    0x8400038c    0x3a    li a5,19
    0x8400038e    0x3c    li a0,0
    0x84000390    0x3e    beq a6,a5,ffffffff840003c8 <reserve_region+0x76>
    0x84000394    0x42    auipc a4,0x1
    0x84000398    0x46    addi a4,a4,700 # ffffffff84001650 <ndks_boot>
    0x8400039c    0x4a    slli a5,a6,0x4
    0x840003a0    0x4e    add a5,a5,a4
    0x840003a2    0x50    sd a7,0(a5) # ffffffffcc000000 <ki_end+0x47fce000>
    0x840003a6    0x54    sd a1,8(a5)
    0x840003a8    0x56    addi a6,a6,1
    0x840003aa    0x58    sd a6,320(a4)
    0x840003ae    0x5c    li a0,1
    0x840003b0    0x5e    j ffffffff840003c8 <reserve_region+0x76>
    0x840003b2    0x60    slli a4,a4,0x4
    0x840003b4    0x62    auipc a5,0x1
    0x840003b8    0x66    addi a5,a5,668 # ffffffff84001650 <ndks_boot>
    0x840003bc    0x6a    add a4,a4,a5
    0x840003be    0x6c    sd a7,0(a4)
    0x840003c2    0x70    jal ra,ffffffff84000026 <merge_regions>
    0x840003c6    0x74    li a0,1
    0x840003c8    0x76    ld ra,24(sp)          ; stack access
    0x840003ca    0x78    addi sp,sp,32
    0x840003cc    0x7a    ret
    0x840003ce    0x7c    slli a4,a4,0x4
    0x840003d0    0x7e    auipc a5,0x1
    0x840003d4    0x82    addi a5,a5,640 # ffffffff84001650 <ndks_boot>
    0x840003d8    0x86    add a4,a4,a5
    0x840003da    0x88    sd a1,8(a4)
    0x840003dc    0x8a    jal ra,ffffffff84000026 <merge_regions>
    0x840003e0    0x8e    li a0,1
    0x840003e2    0x90    j ffffffff840003c8 <reserve_region+0x76>
    0x840003e4    0x92    addi a3,a6,1
    0x840003e8    0x96    li a5,19
    0x840003ea    0x98    li a0,0
    0x840003ec    0x9a    bltu a5,a3,ffffffff840003c8 <reserve_region+0x76>
    0x840003f0    0x9e    bgeu a4,a6,ffffffff8400041c <reserve_region+0xca>
    0x840003f4    0xa2    slli a6,a6,0x4
    0x840003f6    0xa4    auipc a5,0x1
    0x840003fa    0xa8    addi a5,a5,602 # ffffffff84001650 <ndks_boot>
    0x840003fe    0xac    add a6,a6,a5
    0x84000400    0xae    slli a5,a4,0x4
    0x84000404    0xb2    add t1,t1,a5
    0x84000406    0xb4    ld a5,-16(a6)
    0x8400040a    0xb8    sd a5,0(a6)
    0x8400040e    0xbc    ld a5,-8(a6)
    0x84000412    0xc0    sd a5,8(a6)
    0x84000416    0xc4    addi a6,a6,-16
    0x84000418    0xc6    bne a6,t1,ffffffff84000406 <reserve_region+0xb4>
    0x8400041c    0xca    auipc a2,0x1
    0x84000420    0xce    addi a2,a2,564 # ffffffff84001650 <ndks_boot>
    0x84000424    0xd2    slli a5,a4,0x4
    0x84000428    0xd6    add a5,a5,a2
    0x8400042a    0xd8    sd a7,0(a5)
    0x8400042e    0xdc    sd a1,8(a5)
    0x84000430    0xde    sd a3,320(a2)
    0x84000434    0xe2    li a0,1
    0x84000436    0xe4    j ffffffff840003c8 <reserve_region+0x76>
    0x84000438    0xe6    li a0,1
    0x8400043a    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 119 nodes.

Section create_mapped_it_frame_cap (179 of 301)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x84000268     0x0    addi sp,sp,-80
    0x8400026a     0x2    sd ra,72(sp)          ; stack access
    0x8400026c     0x4    sd s0,64(sp)          ; stack access
    0x8400026e     0x6    sd s1,56(sp)          ; stack access
    0x84000270     0x8    snez s0,a5
    0x84000274     0xc    slli s0,s0,0x39
    0x84000276     0xe    slli a3,a3,0x19
    0x84000278    0x10    srli a3,a3,0x19
    0x8400027a    0x12    or s0,s0,a3
    0x8400027c    0x14    li a5,19
    0x8400027e    0x16    slli a5,a5,0x37
    0x84000280    0x18    or s0,s0,a5
    0x84000282    0x1a    slli a2,a2,0x9
    0x84000284    0x1c    lui s1,0xfe000
    0x84000288    0x20    srli s1,s1,0x10
    0x8400028a    0x22    and s1,s1,a2
    0x8400028c    0x24    slli a4,a4,0x30
    0x8400028e    0x26    or s1,s1,a4
    0x84000290    0x28    mv a2,s0
    0x84000292    0x2a    mv a3,s1
    0x84000294    0x2c    jal ra,ffffffff840001fa <map_it_frame_cap>
    0x84000298    0x30    mv a0,s0
    0x8400029a    0x32    mv a1,s1
    0x8400029c    0x34    ld ra,72(sp)          ; stack access
    0x8400029e    0x36    ld s0,64(sp)          ; stack access
    0x840002a0    0x38    ld s1,56(sp)          ; stack access
    0x840002a2    0x3a    addi sp,sp,80
    0x840002a4    0x3c    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section write_it_asid_pool (180 of 301)
=======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 21 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x8400015e     0x0    addi sp,sp,-64
    0x84000160     0x2    sd ra,56(sp)          ; stack access
    0x84000162     0x4    sd s0,48(sp)          ; stack access
    0x84000164     0x6    sd s1,40(sp)          ; stack access
    0x84000166     0x8    sd s2,32(sp)          ; stack access
    0x84000168     0xa    mv s2,a2
    0x8400016a     0xc    mv s1,a3
    0x8400016c     0xe    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000170    0x12    mv s0,a0
    0x84000172    0x14    mv a0,s2
    0x84000174    0x16    mv a1,s1
    0x84000176    0x18    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x8400017a    0x1c    sd a0,8(s0)
    0x8400017c    0x1e    auipc a5,0x1a
    0x84000180    0x22    sd s0,1668(a5) # ffffffff8401a800 <riscvKSASIDTable>
    0x84000184    0x26    ld ra,56(sp)          ; stack access
    0x84000186    0x28    ld s0,48(sp)          ; stack access
    0x84000188    0x2a    ld s1,40(sp)          ; stack access
    0x8400018a    0x2c    ld s2,32(sp)          ; stack access
    0x8400018c    0x2e    addi sp,sp,64
    0x8400018e    0x30    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 34 nodes.

Section map_kernel_frame (181 of 301)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `map_kernel_frame`:

    0x840000c4     0x0    addi sp,sp,-16
    0x840000c6     0x2    sd ra,8(sp)           ; stack access
    0x840000c8     0x4    sd s0,0(sp)           ; stack access
    0x840000ca     0x6    srli a1,a1,0x1e
    0x840000cc     0x8    andi a1,a1,511
    0x840000d0     0xc    slli a1,a1,0x3
    0x840000d2     0xe    auipc s0,0x30
    0x840000d6    0x12    addi s0,s0,-210 # ffffffff84030000 <kernel_root_pageTable>
    0x840000da    0x16    add s0,s0,a1
    0x840000dc    0x18    li a1,1
    0x840000de    0x1a    lui a5,0xc0000
    0x840000e2    0x1e    and a0,a0,a5
    0x840000e4    0x20    jal ra,ffffffff8401015e <pte_next>
    0x840000e8    0x24    sd a0,0(s0)
    0x840000ea    0x26    ld ra,8(sp)           ; stack access
    0x840000ec    0x28    ld s0,0(sp)           ; stack access
    0x840000ee    0x2a    addi sp,sp,16
    0x840000f0    0x2c    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 25 nodes.

Section _start (182 of 301)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0x1a
    0x84000008     0x8    addi gp,gp,566 # ffffffff8401a23a <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x2d
    0x84000010    0x10    addi sp,sp,-12 # ffffffff8402d000 <tlbLockCount>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff840013c6 <init_kernel>
    0x8400001c    0x1c    auipc ra,0x10
    0x84000020    0x20    addi ra,ra,978 # ffffffff840103ee <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section fastpath_reply_recv (183 of 301)
========================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 367 instructions.

RVC_TFFTFFT__T____TF.
Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

RVC_FTTTFT________FT.
Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

11 stack accesses found. Annotated code for `fastpath_reply_recv`:

    0x840193fc      0x0    addi sp,sp,-96
    0x840193fe      0x2    sd ra,88(sp)          ; stack access
    0x84019400      0x4    sd s0,80(sp)          ; stack access
    0x84019402      0x6    sd s1,72(sp)          ; stack access
    0x84019404      0x8    sd s2,64(sp)          ; stack access
    0x84019406      0xa    sd s3,56(sp)          ; stack access
    0x84019408      0xc    sd s4,48(sp)          ; stack access
    0x8401940a      0xe    sd s5,40(sp)          ; stack access
    0x8401940c     0x10    sd s6,32(sp)          ; stack access
    0x8401940e     0x12    sd s7,24(sp)          ; stack access
    0x84019410     0x14    sd s8,16(sp)          ; stack access
    0x84019412     0x16    sd s9,8(sp)           ; stack access
    0x84019414     0x18    mv s1,a1
    0x84019416     0x1a    auipc s2,0x14
    0x8401941a     0x1e    ld s2,-958(s2) # ffffffff8402d058 <ksCurThread>
    0x8401941e     0x22    ld a1,312(s2)
    0x84019422     0x26    andi a4,s1,511
    0x84019426     0x2a    li a5,4
    0x84019428     0x2c    bltu a5,a4,ffffffff840195e2 <fastpath_reply_recv+0x1e6>
    0x8401942c     0x30    andi a1,a1,15
    0x8401942e     0x32    bnez a1,ffffffff840195e2 <fastpath_reply_recv+0x1e6>
    0x84019432     0x36    andi a5,s2,-1024
    0x84019436     0x3a    ld a4,0(a5)
    0x84019438     0x3c    ld s0,8(a5)
    0x8401943a     0x3e    srli a3,a4,0x3b
    0x8401943e     0x42    li a5,10
    0x84019440     0x44    bne a3,a5,ffffffff840195f2 <fastpath_reply_recv+0x1f6>
    0x84019444     0x48    mv s4,s0
    0x84019446     0x4a    mv a5,a4
    0x84019448     0x4c    mv t1,a1
    0x8401944a     0x4e    li t0,64
    0x8401944e     0x52    lui t4,0xfc000
    0x84019452     0x56    srli t4,t4,0x19
    0x84019456     0x5a    li t3,1
    0x84019458     0x5c    slli t3,t3,0x26
    0x8401945a     0x5e    li t5,-1
    0x8401945c     0x60    slli t5,t5,0x27
    0x8401945e     0x62    li t2,63
    0x84019462     0x66    li s3,10
    0x84019464     0x68    srli a6,a5,0x35
    0x84019468     0x6c    andi a6,a6,63
    0x8401946c     0x70    srli a7,a5,0x2f
    0x84019470     0x74    andi a7,a7,63
    0x84019474     0x78    sll a3,a0,t1
    0x84019478     0x7c    beqz a6,ffffffff84019488 <fastpath_reply_recv+0x8c>
    0x8401947c     0x80    subw t6,t0,a6
    0x84019480     0x84    srl t6,a3,t6
    0x84019484     0x88    bne t6,s4,ffffffff840195f2 <fastpath_reply_recv+0x1f6>
    0x84019488     0x8c    sll a3,a3,a6
    0x8401948c     0x90    subw t6,t0,a7
    0x84019490     0x94    srl a3,a3,t6
    0x84019494     0x98    slli a3,a3,0x5
    0x84019496     0x9a    slli a5,a5,0x1
    0x84019498     0x9c    and t6,a5,t4
    0x8401949c     0xa0    and a5,a5,t3
    0x840194a0     0xa4    beqz a5,ffffffff840194a6 <fastpath_reply_recv+0xaa>
    0x840194a2     0xa6    or t6,t6,t5
    0x840194a6     0xaa    add a3,a3,t6
    0x840194a8     0xac    ld a5,0(a3)
    0x840194aa     0xae    ld s4,8(a3)
    0x840194ae     0xb2    add a6,a6,a7
    0x840194b0     0xb4    add t1,t1,a6
    0x840194b2     0xb6    bgeu t2,t1,ffffffff840195e8 <fastpath_reply_recv+0x1ec>
    0x840194b6     0xba    li a3,64
    0x840194ba     0xbe    bltu a3,t1,ffffffff840195f2 <fastpath_reply_recv+0x1f6>
    0x840194be     0xc2    srli a3,a5,0x3b
    0x840194c2     0xc6    li a0,4
    0x840194c4     0xc8    bne a3,a0,ffffffff840195f2 <fastpath_reply_recv+0x1f6>
    0x840194c8     0xcc    srli a3,a5,0x38
    0x840194cc     0xd0    andi a3,a3,1
    0x840194ce     0xd2    beqz a3,ffffffff840195f2 <fastpath_reply_recv+0x1f6>
    0x840194d2     0xd6    li t4,64
    0x840194d6     0xda    lui a3,0xfc000
    0x840194da     0xde    srli t5,a3,0x19
    0x840194de     0xe2    li a3,1
    0x840194e0     0xe4    slli t3,a3,0x26
    0x840194e4     0xe8    li a3,-1
    0x840194e6     0xea    slli t1,a3,0x27
    0x840194ea     0xee    li t6,63
    0x840194ee     0xf2    li t0,10
    0x840194f0     0xf4    srli a0,a4,0x35
    0x840194f4     0xf8    andi a0,a0,63
    0x840194f8     0xfc    srli a6,a4,0x2f
    0x840194fc    0x100    andi a6,a6,63
    0x84019500    0x104    sll a3,a2,a1
    0x84019504    0x108    beqz a0,ffffffff84019512 <fastpath_reply_recv+0x116>
    0x84019506    0x10a    subw a7,t4,a0
    0x8401950a    0x10e    srl a7,a3,a7
    0x8401950e    0x112    bne s0,a7,ffffffff84019602 <fastpath_reply_recv+0x206>
    0x84019512    0x116    sll a3,a3,a0
    0x84019516    0x11a    subw a7,t4,a6
    0x8401951a    0x11e    srl a3,a3,a7
    0x8401951e    0x122    slli a3,a3,0x5
    0x84019520    0x124    slli a4,a4,0x1
    0x84019522    0x126    and a7,a4,t5
    0x84019526    0x12a    and a4,a4,t3
    0x8401952a    0x12e    beqz a4,ffffffff84019530 <fastpath_reply_recv+0x134>
    0x8401952c    0x130    or a7,a7,t1
    0x84019530    0x134    add a3,a3,a7
    0x84019532    0x136    ld a4,0(a3)
    0x84019534    0x138    ld s0,8(a3)
    0x84019536    0x13a    add a0,a0,a6
    0x84019538    0x13c    add a1,a1,a0
    0x8401953a    0x13e    bgeu t6,a1,ffffffff840195f8 <fastpath_reply_recv+0x1fc>
    0x8401953e    0x142    li a3,64
    0x84019542    0x146    bltu a3,a1,ffffffff84019602 <fastpath_reply_recv+0x206>
    0x84019546    0x14a    srli a4,a4,0x3b
    0x84019548    0x14c    li a3,8
    0x8401954a    0x14e    bne a4,a3,ffffffff84019602 <fastpath_reply_recv+0x206>
    0x8401954e    0x152    ld a4,304(s2)
    0x84019552    0x156    bnez a4,ffffffff84019608 <fastpath_reply_recv+0x20c>
    0x84019554    0x158    slli s4,a5,0x19
    0x84019558    0x15c    srli s4,s4,0x19
    0x8401955c    0x160    srli a5,a5,0x26
    0x8401955e    0x162    andi a5,a5,1
    0x84019560    0x164    beqz a5,ffffffff8401956a <fastpath_reply_recv+0x16e>
    0x84019562    0x166    li a5,-1
    0x84019564    0x168    slli a5,a5,0x27
    0x84019566    0x16a    or s4,s4,a5
    0x8401956a    0x16e    mv s8,s4
    0x8401956c    0x170    ld a5,0(s4)
    0x84019570    0x174    andi a5,a5,3
    0x84019572    0x176    li a4,1
    0x84019574    0x178    beq a5,a4,ffffffff84019618 <fastpath_reply_recv+0x21c>
    0x84019578    0x17c    mv s7,s0
    0x8401957a    0x17e    ld s3,0(s0)
    0x8401957e    0x182    beqz s3,ffffffff8401961e <fastpath_reply_recv+0x222>
    0x84019582    0x186    ld a5,16(s0)
    0x84019584    0x188    srli a4,a5,0x30
    0x84019588    0x18c    andi a4,a4,1
    0x8401958a    0x18e    beqz a4,ffffffff8401961e <fastpath_reply_recv+0x222>
    0x8401958c    0x190    slli a4,a5,0x19
    0x84019590    0x194    srli a4,a4,0x19
    0x84019592    0x196    srli a5,a5,0x26
    0x84019594    0x198    andi a5,a5,1
    0x84019596    0x19a    beqz a5,ffffffff8401959e <fastpath_reply_recv+0x1a2>
    0x84019598    0x19c    li a5,-1
    0x8401959a    0x19e    slli a5,a5,0x27
    0x8401959c    0x1a0    or a4,a4,a5
    0x8401959e    0x1a2    ld a5,368(s2)
    0x840195a2    0x1a6    bne a5,a4,ffffffff8401961e <fastpath_reply_recv+0x222>
    0x840195a6    0x1aa    ld a5,312(s3)
    0x840195aa    0x1ae    andi a5,a5,15
    0x840195ac    0x1b0    bnez a5,ffffffff84019624 <fastpath_reply_recv+0x228>
    0x840195ae    0x1b2    andi a5,s3,-1024
    0x840195b2    0x1b6    ld a4,32(a5)
    0x840195b4    0x1b8    ld s6,40(a5)
    0x840195b8    0x1bc    srli a5,s6,0x9
    0x840195bc    0x1c0    slli s5,a5,0x19
    0x840195c0    0x1c4    srli s5,s5,0x19
    0x840195c4    0x1c8    srli a5,a5,0x26
    0x840195c6    0x1ca    andi a5,a5,1
    0x840195c8    0x1cc    beqz a5,ffffffff840195d2 <fastpath_reply_recv+0x1d6>
    0x840195ca    0x1ce    li a5,-1
    0x840195cc    0x1d0    slli a5,a5,0x27
    0x840195ce    0x1d2    or s5,s5,a5
    0x840195d2    0x1d6    srli a5,a4,0x3b
    0x840195d6    0x1da    li a3,3
    0x840195d8    0x1dc    beq a5,a3,ffffffff8401962a <fastpath_reply_recv+0x22e>
    0x840195dc    0x1e0    li a0,-2
    0x840195de    0x1e2    jal ra,ffffffff840190a2 <slowpath>
    0x840195e2    0x1e6    li a0,-2
    0x840195e4    0x1e8    jal ra,ffffffff840190a2 <slowpath>
    0x840195e8    0x1ec    srli a3,a5,0x3b
    0x840195ec    0x1f0    bne a3,s3,ffffffff840194be <fastpath_reply_recv+0xc2>
    0x840195f0    0x1f4    j ffffffff84019464 <fastpath_reply_recv+0x68>
    0x840195f2    0x1f6    li a0,-2
    0x840195f4    0x1f8    jal ra,ffffffff840190a2 <slowpath>
    0x840195f8    0x1fc    srli a3,a4,0x3b
    0x840195fc    0x200    bne a3,t0,ffffffff84019546 <fastpath_reply_recv+0x14a>
    0x84019600    0x204    j ffffffff840194f0 <fastpath_reply_recv+0xf4>
    0x84019602    0x206    li a0,-2
    0x84019604    0x208    jal ra,ffffffff840190a2 <slowpath>
    0x84019608    0x20c    ld a4,0(a4)
    0x8401960a    0x20e    andi a4,a4,3
    0x8401960c    0x210    li a3,2
    0x8401960e    0x212    bne a4,a3,ffffffff84019554 <fastpath_reply_recv+0x158>
    0x84019612    0x216    li a0,-2
    0x84019614    0x218    jal ra,ffffffff840190a2 <slowpath>
    0x84019618    0x21c    li a0,-2
    0x8401961a    0x21e    jal ra,ffffffff840190a2 <slowpath>
    0x8401961e    0x222    li a0,-2
    0x84019620    0x224    jal ra,ffffffff840190a2 <slowpath>
    0x84019624    0x228    li a0,-2
    0x84019626    0x22a    jal ra,ffffffff840190a2 <slowpath>
    0x8401962a    0x22e    srli a4,a4,0x27
    0x8401962c    0x230    andi a4,a4,1
    0x8401962e    0x232    beqz a4,ffffffff840195dc <fastpath_reply_recv+0x1e0>
    0x84019630    0x234    auipc s9,0x14
    0x84019634    0x238    ld s9,-1560(s9) # ffffffff8402d018 <ksCurDomain>
    0x84019638    0x23c    ld a1,360(s3)
    0x8401963c    0x240    mv a0,s9
    0x8401963e    0x242    jal ra,ffffffff8401037e <isHighestPrio>
    0x84019642    0x246    beqz a0,ffffffff840196d4 <fastpath_reply_recv+0x2d8>
    0x84019644    0x248    ld a5,344(s3)
    0x84019648    0x24c    bne a5,s9,ffffffff840196da <fastpath_reply_recv+0x2de>
    0x8401964c    0x250    ld a3,368(s3)
    0x84019650    0x254    bnez a3,ffffffff840196e0 <fastpath_reply_recv+0x2e4>
    0x84019652    0x256    ori s4,s4,3
    0x84019656    0x25a    sd s4,280(s2)
    0x8401965a    0x25e    ld a4,288(s3)
    0x8401965e    0x262    li a5,-1
    0x84019660    0x264    slli a5,a5,0x28
    0x84019662    0x266    addi a5,a5,31
    0x84019664    0x268    and a4,a4,a5
    0x84019666    0x26a    sd a4,288(s3)
    0x8401966a    0x26e    ld a4,288(s2)
    0x8401966e    0x272    and a5,a5,a4
    0x84019670    0x274    slli s0,s0,0x1
    0x84019672    0x276    lui a4,0xe0000
    0x84019676    0x27a    srli a4,a4,0x18
    0x84019678    0x27c    and s0,s0,a4
    0x8401967a    0x27e    or s0,s0,a5
    0x8401967c    0x280    sd s0,288(s2)
    0x84019680    0x284    sd s2,0(s7)
    0x84019684    0x288    ld a4,0(s8)
    0x84019688    0x28c    lui a5,0xf8000
    0x8401968c    0x290    srli a5,a5,0x19
    0x8401968e    0x292    and a5,a5,a4
    0x84019690    0x294    srli a4,a4,0x26
    0x84019692    0x296    andi a4,a4,1
    0x84019694    0x298    beqz a4,ffffffff840196e6 <fastpath_reply_recv+0x2ea>
    0x84019696    0x29a    li a4,-1
    0x84019698    0x29c    slli a4,a4,0x27
    0x8401969a    0x29e    or a5,a5,a4
    0x8401969c    0x2a0    auipc a4,0x14
    0x840196a0    0x2a4    ld a4,-1604(a4) # ffffffff8402d058 <ksCurThread>
    0x840196a4    0x2a8    ld a1,8(s8)
    0x840196a8    0x2ac    ld a6,360(a4)
    0x840196ac    0x2b0    mv a2,a5
    0x840196ae    0x2b2    ld a0,360(a2)
    0x840196b2    0x2b6    bltu a0,a6,ffffffff8401973c <fastpath_reply_recv+0x340>
    0x840196b6    0x2ba    sd a4,408(a2)
    0x840196ba    0x2be    bnez a3,ffffffff84019754 <fastpath_reply_recv+0x358>
    0x840196bc    0x2c0    mv a5,a4
    0x840196be    0x2c2    sd a3,408(a4)
    0x840196c2    0x2c6    sd a2,416(a4)
    0x840196c6    0x2ca    sd a1,8(s8)
    0x840196ca    0x2ce    ori a5,a5,2
    0x840196ce    0x2d2    sd a5,0(s8)
    0x840196d2    0x2d6    j ffffffff84019704 <fastpath_reply_recv+0x308>
    0x840196d4    0x2d8    li a0,-2
    0x840196d6    0x2da    jal ra,ffffffff840190a2 <slowpath>
    0x840196da    0x2de    li a0,-2
    0x840196dc    0x2e0    jal ra,ffffffff840190a2 <slowpath>
    0x840196e0    0x2e4    li a0,-2
    0x840196e2    0x2e6    jal ra,ffffffff840190a2 <slowpath>
    0x840196e6    0x2ea    bnez a5,ffffffff8401969c <fastpath_reply_recv+0x2a0>
    0x840196e8    0x2ec    auipc a5,0x14
    0x840196ec    0x2f0    ld a5,-1680(a5) # ffffffff8402d058 <ksCurThread>
    0x840196f0    0x2f4    sd zero,416(a5)
    0x840196f4    0x2f8    sd zero,408(a5)
    0x840196f8    0x2fc    sd a5,8(s8)
    0x840196fc    0x300    ori a5,a5,2
    0x84019700    0x304    sd a5,0(s8)
    0x84019704    0x308    ld a5,8(s7)
    0x84019708    0x30c    slli a4,a5,0x19
    0x8401970c    0x310    srli a4,a4,0x19
    0x8401970e    0x312    srli a5,a5,0x26
    0x84019710    0x314    andi a5,a5,1
    0x84019712    0x316    beqz a5,ffffffff8401975a <fastpath_reply_recv+0x35e>
    0x84019714    0x318    auipc a2,0x14
    0x84019718    0x31c    ld a2,-1724(a2) # ffffffff8402d058 <ksCurThread>
    0x8401971c    0x320    ld a3,368(a2)
    0x84019720    0x324    sd zero,368(a2)
    0x84019724    0x328    sd a3,368(s3)
    0x84019728    0x32c    sd s3,24(a3) # fffffffffc000018 <ki_end+0x77fce018>
    0x8401972c    0x330    li a5,-1
    0x8401972e    0x332    slli a5,a5,0x27
    0x84019730    0x334    or a5,a5,a4
    0x84019732    0x336    sd a5,32(a3)
    0x84019734    0x338    ld a4,16(s7)
    0x84019738    0x33c    sd a4,16(a5)
    0x8401973a    0x33e    j ffffffff84019778 <fastpath_reply_recv+0x37c>
    0x8401973c    0x340    ld a0,416(a2)
    0x84019740    0x344    mv a3,a2
    0x84019742    0x346    bnez a0,ffffffff84019750 <fastpath_reply_recv+0x354>
    0x84019744    0x348    mv a1,a4
    0x84019746    0x34a    sd a4,416(a2)
    0x8401974a    0x34e    mv a3,a2
    0x8401974c    0x350    mv a2,a0
    0x8401974e    0x352    j ffffffff840196be <fastpath_reply_recv+0x2c2>
    0x84019750    0x354    mv a2,a0
    0x84019752    0x356    j ffffffff840196ae <fastpath_reply_recv+0x2b2>
    0x84019754    0x358    mv a0,a2
    0x84019756    0x35a    mv a2,a3
    0x84019758    0x35c    j ffffffff84019746 <fastpath_reply_recv+0x34a>
    0x8401975a    0x35e    auipc a2,0x14
    0x8401975e    0x362    ld a2,-1794(a2) # ffffffff8402d058 <ksCurThread>
    0x84019762    0x366    ld a3,368(a2)
    0x84019766    0x36a    sd zero,368(a2)
    0x8401976a    0x36e    sd a3,368(s3)
    0x8401976e    0x372    sd s3,24(a3)
    0x84019772    0x376    mv a5,a4
    0x84019774    0x378    sd a4,32(a3)
    0x84019776    0x37a    bnez a4,ffffffff84019734 <fastpath_reply_recv+0x338>
    0x84019778    0x37c    andi a3,s1,127
    0x8401977c    0x380    sd zero,8(s7)
    0x84019780    0x384    sd zero,16(s7)
    0x84019784    0x388    beqz a3,ffffffff8401979c <fastpath_reply_recv+0x3a0>
    0x84019786    0x38a    mv a5,a2
    0x84019788    0x38c    addi a4,s3,88
    0x8401978c    0x390    slli a3,a3,0x3
    0x8401978e    0x392    add a2,a2,a3
    0x84019790    0x394    ld a3,88(a5)
    0x84019792    0x396    sd a3,0(a4)
    0x84019794    0x398    addi a5,a5,8
    0x84019796    0x39a    addi a4,a4,8
    0x84019798    0x39c    bne a5,a2,ffffffff84019790 <fastpath_reply_recv+0x394>
    0x8401979c    0x3a0    li a5,1
    0x8401979e    0x3a2    sd a5,280(s3)
    0x840197a2    0x3a6    slli a5,a5,0x26
    0x840197a4    0x3a8    add a5,a5,s5
    0x840197a6    0x3aa    srli a5,a5,0xc
    0x840197a8    0x3ac    li a4,-1
    0x840197aa    0x3ae    srli s5,a4,0x14
    0x840197ae    0x3b2    and a5,a5,s5
    0x840197b2    0x3b6    srli s6,s6,0x30
    0x840197b6    0x3ba    slli s6,s6,0x2c
    0x840197b8    0x3bc    or a5,a5,s6
    0x840197bc    0x3c0    slli a4,a4,0x3f
    0x840197be    0x3c2    or a5,a5,a4
    0x840197c0    0x3c4    csrw satp,a5
    0x840197c4    0x3c8    sfence.vma
    0x840197c8    0x3cc    auipc a5,0x14
    0x840197cc    0x3d0    sd s3,-1904(a5) # ffffffff8402d058 <ksCurThread>
    0x840197d0    0x3d4    li a0,0
    0x840197d2    0x3d6    lui a1,0xfffff
    0x840197d4    0x3d8    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfcd1ff>
    0x840197d8    0x3dc    and a1,a1,s1
    0x840197da    0x3de    mv t0,s3
    0x840197dc    0x3e0    ld ra,0(t0)
    0x840197e0    0x3e4    ld sp,8(t0)
    0x840197e4    0x3e8    ld gp,16(t0)
    0x840197e8    0x3ec    ld t2,48(t0)
    0x840197ec    0x3f0    ld s0,56(t0)
    0x840197f0    0x3f4    ld s1,64(t0)
    0x840197f4    0x3f8    ld a2,88(t0)
    0x840197f8    0x3fc    ld a3,96(t0)
    0x840197fc    0x400    ld a4,104(t0)
    0x84019800    0x404    ld a5,112(t0)
    0x84019804    0x408    ld a6,120(t0)
    0x84019808    0x40c    ld a7,128(t0)
    0x8401980c    0x410    ld s2,136(t0)
    0x84019810    0x414    ld s3,144(t0)
    0x84019814    0x418    ld s4,152(t0)
    0x84019818    0x41c    ld s5,160(t0)
    0x8401981c    0x420    ld s6,168(t0)
    0x84019820    0x424    ld s7,176(t0)
    0x84019824    0x428    ld s8,184(t0)
    0x84019828    0x42c    ld s9,192(t0)
    0x8401982c    0x430    ld s10,200(t0)
    0x84019830    0x434    ld s11,208(t0)
    0x84019834    0x438    ld t3,216(t0)
    0x84019838    0x43c    ld t4,224(t0)
    0x8401983c    0x440    ld t5,232(t0)
    0x84019840    0x444    ld t6,240(t0)
    0x84019844    0x448    ld t1,24(t0)
    0x84019848    0x44c    add tp,t1,zero
    0x8401984c    0x450    ld t1,272(t0)
    0x84019850    0x454    csrw sepc,t1
    0x84019854    0x458    csrw sscratch,t0
    0x84019858    0x45c    ld t1,256(t0)
    0x8401985c    0x460    csrw sstatus,t1
    0x84019860    0x464    ld t1,40(t0)
    0x84019864    0x468    ld t0,32(t0)
    0x84019868    0x46c    sret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
367 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 576 nodes.

Section fastpath_call (184 of 301)
==================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 269 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

9 stack accesses found. Annotated code for `fastpath_call`:

    0x840190ba      0x0    addi sp,sp,-80
    0x840190bc      0x2    sd ra,72(sp)          ; stack access
    0x840190be      0x4    sd s0,64(sp)          ; stack access
    0x840190c0      0x6    sd s1,56(sp)          ; stack access
    0x840190c2      0x8    sd s2,48(sp)          ; stack access
    0x840190c4      0xa    sd s3,40(sp)          ; stack access
    0x840190c6      0xc    sd s4,32(sp)          ; stack access
    0x840190c8      0xe    sd s5,24(sp)          ; stack access
    0x840190ca     0x10    sd s6,16(sp)          ; stack access
    0x840190cc     0x12    sd s7,8(sp)           ; stack access
    0x840190ce     0x14    auipc a6,0x14
    0x840190d2     0x18    ld a6,-118(a6) # ffffffff8402d058 <ksCurThread>
    0x840190d6     0x1c    ld a4,312(a6)
    0x840190da     0x20    andi a3,a1,511
    0x840190de     0x24    li a5,4
    0x840190e0     0x26    bltu a5,a3,ffffffff840191da <fastpath_call+0x120>
    0x840190e4     0x2a    mv s2,a1
    0x840190e6     0x2c    andi a4,a4,15
    0x840190e8     0x2e    bnez a4,ffffffff840191da <fastpath_call+0x120>
    0x840190ea     0x30    andi a5,a6,-1024
    0x840190ee     0x34    ld s0,0(a5)
    0x840190f0     0x36    ld s3,8(a5)
    0x840190f4     0x3a    srli a3,s0,0x3b
    0x840190f8     0x3e    li a5,10
    0x840190fa     0x40    bne a3,a5,ffffffff840191ea <fastpath_call+0x130>
    0x840190fe     0x44    li t4,64
    0x84019102     0x48    lui a5,0xfc000
    0x84019106     0x4c    srli t3,a5,0x19
    0x8401910a     0x50    li a5,1
    0x8401910c     0x52    slli t1,a5,0x26
    0x84019110     0x56    li a5,-1
    0x84019112     0x58    slli a7,a5,0x27
    0x84019116     0x5c    li t5,63
    0x8401911a     0x60    li t6,10
    0x8401911c     0x62    srli a3,s0,0x35
    0x84019120     0x66    andi a3,a3,63
    0x84019124     0x6a    srli a2,s0,0x2f
    0x84019128     0x6e    andi a2,a2,63
    0x8401912c     0x72    sll a5,a0,a4
    0x84019130     0x76    beqz a3,ffffffff8401913e <fastpath_call+0x84>
    0x84019132     0x78    subw a1,t4,a3
    0x84019136     0x7c    srl a1,a5,a1
    0x8401913a     0x80    bne s3,a1,ffffffff840191ea <fastpath_call+0x130>
    0x8401913e     0x84    sll a5,a5,a3
    0x84019142     0x88    subw a1,t4,a2
    0x84019146     0x8c    srl a5,a5,a1
    0x8401914a     0x90    slli a5,a5,0x5
    0x8401914c     0x92    slli s0,s0,0x1
    0x8401914e     0x94    and a1,s0,t3
    0x84019152     0x98    and s0,s0,t1
    0x84019156     0x9c    beqz s0,ffffffff8401915c <fastpath_call+0xa2>
    0x84019158     0x9e    or a1,a1,a7
    0x8401915c     0xa2    add a5,a5,a1
    0x8401915e     0xa4    ld s0,0(a5)
    0x84019160     0xa6    ld s3,8(a5) # fffffffffc000008 <ki_end+0x77fce008>
    0x84019164     0xaa    add a3,a3,a2
    0x84019166     0xac    add a4,a4,a3
    0x84019168     0xae    bgeu t5,a4,ffffffff840191e0 <fastpath_call+0x126>
    0x8401916c     0xb2    li a5,64
    0x84019170     0xb6    bltu a5,a4,ffffffff840191ea <fastpath_call+0x130>
    0x84019174     0xba    srli a5,s0,0x3b
    0x84019178     0xbe    li a4,4
    0x8401917a     0xc0    bne a5,a4,ffffffff840191ea <fastpath_call+0x130>
    0x8401917e     0xc4    srli a5,s0,0x37
    0x84019182     0xc8    andi a5,a5,1
    0x84019184     0xca    beqz a5,ffffffff840191ea <fastpath_call+0x130>
    0x84019186     0xcc    slli a5,s0,0x19
    0x8401918a     0xd0    srli a5,a5,0x19
    0x8401918c     0xd2    srli a4,s0,0x26
    0x84019190     0xd6    andi a4,a4,1
    0x84019192     0xd8    beqz a4,ffffffff8401919a <fastpath_call+0xe0>
    0x84019194     0xda    li a4,-1
    0x84019196     0xdc    slli a4,a4,0x27
    0x84019198     0xde    or a5,a5,a4
    0x8401919a     0xe0    mv s6,a5
    0x8401919c     0xe2    ld s4,8(a5)
    0x840191a0     0xe6    ld a5,0(a5)
    0x840191a2     0xe8    andi a5,a5,3
    0x840191a4     0xea    li a4,2
    0x840191a6     0xec    bne a5,a4,ffffffff840191f0 <fastpath_call+0x136>
    0x840191aa     0xf0    andi a5,s4,-1024
    0x840191ae     0xf4    ld a4,32(a5)
    0x840191b0     0xf6    ld s5,40(a5)
    0x840191b4     0xfa    srli a5,s5,0x9
    0x840191b8     0xfe    slli s1,a5,0x19
    0x840191bc    0x102    srli s1,s1,0x19
    0x840191be    0x104    srli a5,a5,0x26
    0x840191c0    0x106    andi a5,a5,1
    0x840191c2    0x108    beqz a5,ffffffff840191ca <fastpath_call+0x110>
    0x840191c4    0x10a    li a5,-1
    0x840191c6    0x10c    slli a5,a5,0x27
    0x840191c8    0x10e    or s1,s1,a5
    0x840191ca    0x110    srli a5,a4,0x3b
    0x840191ce    0x114    li a3,3
    0x840191d0    0x116    beq a5,a3,ffffffff840191f6 <fastpath_call+0x13c>
    0x840191d4    0x11a    li a0,-1
    0x840191d6    0x11c    jal ra,ffffffff840190a2 <slowpath>
    0x840191da    0x120    li a0,-1
    0x840191dc    0x122    jal ra,ffffffff840190a2 <slowpath>
    0x840191e0    0x126    srli a5,s0,0x3b
    0x840191e4    0x12a    bne a5,t6,ffffffff84019174 <fastpath_call+0xba>
    0x840191e8    0x12e    j ffffffff8401911c <fastpath_call+0x62>
    0x840191ea    0x130    li a0,-1
    0x840191ec    0x132    jal ra,ffffffff840190a2 <slowpath>
    0x840191f0    0x136    li a0,-1
    0x840191f2    0x138    jal ra,ffffffff840190a2 <slowpath>
    0x840191f6    0x13c    srli a4,a4,0x27
    0x840191f8    0x13e    andi a4,a4,1
    0x840191fa    0x140    beqz a4,ffffffff840191d4 <fastpath_call+0x11a>
    0x840191fc    0x142    auipc s7,0x14
    0x84019200    0x146    ld s7,-484(s7) # ffffffff8402d018 <ksCurDomain>
    0x84019204    0x14a    ld a1,360(s4)
    0x84019208    0x14e    ld a5,360(a6)
    0x8401920c    0x152    bltu a1,a5,ffffffff840193be <fastpath_call+0x304>
    0x84019210    0x156    srli a5,s0,0x39
    0x84019214    0x15a    srli s0,s0,0x3a
    0x84019216    0x15c    or s0,s0,a5
    0x84019218    0x15e    andi s0,s0,1
    0x8401921a    0x160    beqz s0,ffffffff840193ce <fastpath_call+0x314>
    0x8401921e    0x164    ld a5,344(s4)
    0x84019222    0x168    bne a5,s7,ffffffff840193d4 <fastpath_call+0x31a>
    0x84019226    0x16c    ld a5,368(s4)
    0x8401922a    0x170    bnez a5,ffffffff840193da <fastpath_call+0x320>
    0x8401922e    0x174    ld a5,288(s4)
    0x84019232    0x178    srli a5,a5,0x1
    0x84019234    0x17a    lui a1,0xe0000
    0x84019238    0x17e    srli a1,a1,0x19
    0x8401923a    0x180    and a1,a1,a5
    0x8401923c    0x182    srli a5,a5,0x26
    0x8401923e    0x184    andi a5,a5,1
    0x84019240    0x186    beqz a5,ffffffff840193e0 <fastpath_call+0x326>
    0x84019244    0x18a    li a5,-1
    0x84019246    0x18c    slli a5,a5,0x27
    0x84019248    0x18e    or a1,a1,a5
    0x8401924a    0x190    mv a0,a1
    0x8401924c    0x192    ld a5,408(s4)
    0x84019250    0x196    sd a5,8(s6)
    0x84019254    0x19a    ld a5,408(s4)
    0x84019258    0x19e    bnez a5,ffffffff840193ec <fastpath_call+0x332>
    0x8401925c    0x1a2    sd zero,0(s6)
    0x84019260    0x1a6    auipc a7,0x14
    0x84019264    0x1aa    addi a7,a7,-520 # ffffffff8402d058 <ksCurThread>
    0x84019268    0x1ae    ld a2,0(a7)
    0x8401926c    0x1b2    li a5,5
    0x8401926e    0x1b4    sd a5,280(a2)
    0x84019272    0x1b8    ld a4,288(s4)
    0x84019276    0x1bc    li a5,-1
    0x84019278    0x1be    slli a3,a5,0x28
    0x8401927c    0x1c2    addi a3,a3,31
    0x8401927e    0x1c4    and a4,a4,a3
    0x84019280    0x1c6    sd a4,288(s4)
    0x84019284    0x1ca    ld a4,288(a2)
    0x84019288    0x1ce    and a3,a3,a4
    0x8401928a    0x1d0    slli a4,a1,0x1
    0x8401928e    0x1d4    lui a6,0xe0000
    0x84019292    0x1d8    srli a6,a6,0x18
    0x84019296    0x1dc    and a4,a4,a6
    0x8401929a    0x1e0    or a4,a4,a3
    0x8401929c    0x1e2    sd a4,288(a2)
    0x840192a0    0x1e6    sd a2,0(a0)
    0x840192a2    0x1e8    ld a2,0(a7)
    0x840192a6    0x1ec    ld a4,368(a2)
    0x840192aa    0x1f0    sd s4,24(a4)
    0x840192ae    0x1f4    sd a4,368(s4)
    0x840192b2    0x1f8    sd zero,368(a2)
    0x840192b6    0x1fc    ld a3,32(a4)
    0x840192b8    0x1fe    srli a5,a5,0x19
    0x840192ba    0x200    and a5,a5,a3
    0x840192bc    0x202    sd a5,8(a0)
    0x840192be    0x204    bnez a3,ffffffff840193f2 <fastpath_call+0x338>
    0x840192c2    0x208    andi a3,s2,127
    0x840192c6    0x20c    slli a5,a4,0x19
    0x840192ca    0x210    srli a5,a5,0x19
    0x840192cc    0x212    li a1,1
    0x840192ce    0x214    slli a1,a1,0x30
    0x840192d0    0x216    or a5,a5,a1
    0x840192d2    0x218    sd a5,16(a0)
    0x840192d4    0x21a    sd a0,32(a4)
    0x840192d6    0x21c    beqz a3,ffffffff840192ee <fastpath_call+0x234>
    0x840192d8    0x21e    mv a5,a2
    0x840192da    0x220    addi a4,s4,88
    0x840192de    0x224    slli a3,a3,0x3
    0x840192e0    0x226    add a2,a2,a3
    0x840192e2    0x228    ld a3,88(a5)
    0x840192e4    0x22a    sd a3,0(a4)
    0x840192e6    0x22c    addi a5,a5,8
    0x840192e8    0x22e    addi a4,a4,8
    0x840192ea    0x230    bne a2,a5,ffffffff840192e2 <fastpath_call+0x228>
    0x840192ee    0x234    li a5,1
    0x840192f0    0x236    sd a5,280(s4)
    0x840192f4    0x23a    slli a5,a5,0x26
    0x840192f6    0x23c    add a5,a5,s1
    0x840192f8    0x23e    srli a5,a5,0xc
    0x840192fa    0x240    li a4,-1
    0x840192fc    0x242    srli s1,a4,0x14
    0x84019300    0x246    and a5,a5,s1
    0x84019302    0x248    srli s5,s5,0x30
    0x84019306    0x24c    slli s5,s5,0x2c
    0x84019308    0x24e    or a5,a5,s5
    0x8401930c    0x252    slli a4,a4,0x3f
    0x8401930e    0x254    or a5,a5,a4
    0x84019310    0x256    csrw satp,a5
    0x84019314    0x25a    sfence.vma
    0x84019318    0x25e    auipc a5,0x14
    0x8401931c    0x262    sd s4,-704(a5) # ffffffff8402d058 <ksCurThread>
    0x84019320    0x266    mv a0,s3
    0x84019322    0x268    lui a1,0xfffff
    0x84019324    0x26a    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfcd1ff>
    0x84019328    0x26e    and a1,s2,a1
    0x8401932c    0x272    mv t0,s4
    0x8401932e    0x274    ld ra,0(t0) # fffffffffc000000 <ki_end+0x77fce000>
    0x84019332    0x278    ld sp,8(t0)
    0x84019336    0x27c    ld gp,16(t0)
    0x8401933a    0x280    ld t2,48(t0)
    0x8401933e    0x284    ld s0,56(t0)
    0x84019342    0x288    ld s1,64(t0)
    0x84019346    0x28c    ld a2,88(t0)
    0x8401934a    0x290    ld a3,96(t0)
    0x8401934e    0x294    ld a4,104(t0)
    0x84019352    0x298    ld a5,112(t0)
    0x84019356    0x29c    ld a6,120(t0)
    0x8401935a    0x2a0    ld a7,128(t0)
    0x8401935e    0x2a4    ld s2,136(t0)
    0x84019362    0x2a8    ld s3,144(t0)
    0x84019366    0x2ac    ld s4,152(t0)
    0x8401936a    0x2b0    ld s5,160(t0)
    0x8401936e    0x2b4    ld s6,168(t0)
    0x84019372    0x2b8    ld s7,176(t0)
    0x84019376    0x2bc    ld s8,184(t0)
    0x8401937a    0x2c0    ld s9,192(t0)
    0x8401937e    0x2c4    ld s10,200(t0)
    0x84019382    0x2c8    ld s11,208(t0)
    0x84019386    0x2cc    ld t3,216(t0)
    0x8401938a    0x2d0    ld t4,224(t0)
    0x8401938e    0x2d4    ld t5,232(t0)
    0x84019392    0x2d8    ld t6,240(t0)
    0x84019396    0x2dc    ld t1,24(t0)
    0x8401939a    0x2e0    add tp,t1,zero
    0x8401939e    0x2e4    ld t1,272(t0)
    0x840193a2    0x2e8    csrw sepc,t1
    0x840193a6    0x2ec    csrw sscratch,t0
    0x840193aa    0x2f0    ld t1,256(t0)
    0x840193ae    0x2f4    csrw sstatus,t1
    0x840193b2    0x2f8    ld t1,40(t0)
    0x840193b6    0x2fc    ld t0,32(t0)
    0x840193ba    0x300    sret
    0x840193be    0x304    mv a0,s7
    0x840193c0    0x306    jal ra,ffffffff8401037e <isHighestPrio>
    0x840193c4    0x30a    bnez a0,ffffffff84019210 <fastpath_call+0x156>
    0x840193c8    0x30e    li a0,-1
    0x840193ca    0x310    jal ra,ffffffff840190a2 <slowpath>
    0x840193ce    0x314    li a0,-1
    0x840193d0    0x316    jal ra,ffffffff840190a2 <slowpath>
    0x840193d4    0x31a    li a0,-1
    0x840193d6    0x31c    jal ra,ffffffff840190a2 <slowpath>
    0x840193da    0x320    li a0,-1
    0x840193dc    0x322    jal ra,ffffffff840190a2 <slowpath>
    0x840193e0    0x326    bnez a1,ffffffff840193e8 <fastpath_call+0x32e>
    0x840193e2    0x328    li a0,-1
    0x840193e4    0x32a    jal ra,ffffffff840190a2 <slowpath>
    0x840193e8    0x32e    mv a0,a1
    0x840193ea    0x330    j ffffffff8401924c <fastpath_call+0x192>
    0x840193ec    0x332    sd zero,416(a5)
    0x840193f0    0x336    j ffffffff84019260 <fastpath_call+0x1a6>
    0x840193f2    0x338    li a5,-1
    0x840193f4    0x33a    srli a5,a5,0x19
    0x840193f6    0x33c    and a5,a5,a1
    0x840193f8    0x33e    sd a5,16(a3)
    0x840193fa    0x340    j ffffffff840192c2 <fastpath_call+0x208>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
269 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 421 nodes.

Section performPageTableInvocationUnmap (185 of 301)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 47 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x84017afa     0x0    addi sp,sp,-48
    0x84017afc     0x2    sd ra,40(sp)          ; stack access
    0x84017afe     0x4    sd s0,32(sp)          ; stack access
    0x84017b00     0x6    sd s1,24(sp)          ; stack access
    0x84017b02     0x8    sd a1,8(sp)           ; stack access
    0x84017b04     0xa    mv s0,a2
    0x84017b06     0xc    srli a4,a0,0x27
    0x84017b0a    0x10    andi a4,a4,1
    0x84017b0c    0x12    beqz a4,ffffffff84017b4e <performPageTableInvocationUnmap+0x54>
    0x84017b0e    0x14    mv a5,a0
    0x84017b10    0x16    mv a3,a1
    0x84017b12    0x18    srli a4,a1,0x9
    0x84017b16    0x1c    slli a0,a4,0x19
    0x84017b1a    0x20    srli a0,a0,0x19
    0x84017b1c    0x22    srli a4,a4,0x26
    0x84017b1e    0x24    andi a4,a4,1
    0x84017b20    0x26    beqz a4,ffffffff84017b28 <performPageTableInvocationUnmap+0x2e>
    0x84017b22    0x28    li a4,-1
    0x84017b24    0x2a    slli a4,a4,0x27
    0x84017b26    0x2c    or a0,a0,a4
    0x84017b28    0x2e    mv s1,a0
    0x84017b2a    0x30    srli a0,a3,0x30
    0x84017b2e    0x34    slli a1,a5,0x19
    0x84017b32    0x38    srli a1,a1,0x19
    0x84017b34    0x3a    srli a5,a5,0x26
    0x84017b36    0x3c    andi a5,a5,1
    0x84017b38    0x3e    beqz a5,ffffffff84017b40 <performPageTableInvocationUnmap+0x46>
    0x84017b3a    0x40    li a5,-1
    0x84017b3c    0x42    slli a5,a5,0x27
    0x84017b3e    0x44    or a1,a1,a5
    0x84017b40    0x46    mv a2,s1
    0x84017b42    0x48    jal ra,ffffffff84010886 <unmapPageTable>
    0x84017b46    0x4c    lui a1,0x1
    0x84017b48    0x4e    mv a0,s1
    0x84017b4a    0x50    jal ra,ffffffff84017ae8 <memzero>
    0x84017b4e    0x54    ld a4,0(s0)
    0x84017b50    0x56    li a5,-1
    0x84017b52    0x58    slli a5,a5,0x27
    0x84017b54    0x5a    addi a5,a5,-1
    0x84017b56    0x5c    and a5,a5,a4
    0x84017b58    0x5e    sd a5,0(s0)
    0x84017b5a    0x60    li a0,0
    0x84017b5c    0x62    ld ra,40(sp)          ; stack access
    0x84017b5e    0x64    ld s0,32(sp)          ; stack access
    0x84017b60    0x66    ld s1,24(sp)          ; stack access
    0x84017b62    0x68    addi sp,sp,48
    0x84017b64    0x6a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 65 nodes.

Section replyFromKernel_error (186 of 301)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x84017a0a     0x0    addi sp,sp,-16
    0x84017a0c     0x2    sd ra,8(sp)           ; stack access
    0x84017a0e     0x4    sd s0,0(sp)           ; stack access
    0x84017a10     0x6    mv s0,a0
    0x84017a12     0x8    mv a1,a0
    0x84017a14     0xa    li a0,1
    0x84017a16     0xc    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84017a1a    0x10    mv a1,a0
    0x84017a1c    0x12    sd zero,72(s0)
    0x84017a20    0x16    mv a0,s0
    0x84017a22    0x18    jal ra,ffffffff84017890 <setMRs_syscall_error>
    0x84017a26    0x1c    auipc a5,0x3
    0x84017a2a    0x20    ld a5,538(a5) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017a2e    0x24    slli a5,a5,0xc
    0x84017a30    0x26    andi a0,a0,127
    0x84017a34    0x2a    or a5,a5,a0
    0x84017a36    0x2c    sd a5,80(s0)
    0x84017a38    0x2e    ld ra,8(sp)           ; stack access
    0x84017a3a    0x30    ld s0,0(sp)           ; stack access
    0x84017a3c    0x32    addi sp,sp,16
    0x84017a3e    0x34    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 31 nodes.

Section setMRs_syscall_error (187 of 301)
=========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 130 instructions.
Switch found.


Stack analysis
---------------

12 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x84017890      0x0    addi sp,sp,-48
    0x84017892      0x2    sd ra,40(sp)          ; stack access
    0x84017894      0x4    sd s0,32(sp)          ; stack access
    0x84017896      0x6    sd s1,24(sp)          ; stack access
    0x84017898      0x8    sd s2,16(sp)          ; stack access
    0x8401789a      0xa    sd s3,8(sp)           ; stack access
    0x8401789c      0xc    sd s4,0(sp)           ; stack access
    0x8401789e      0xe    auipc a5,0x3
    0x840178a2     0x12    addi a5,a5,-158 # ffffffff8401a800 <riscvKSASIDTable>
    0x840178a6     0x16    ld a3,1088(a5)
    0x840178aa     0x1a    li a4,10
    0x840178ac     0x1c    bltu a4,a3,ffffffff840179f4 <setMRs_syscall_error+0x164>
    0x840178b0     0x20    mv s0,a0
    0x840178b2     0x22    mv s1,a1
    0x840178b4     0x24    slli a5,a3,0x2
    0x840178b8     0x28    auipc a4,0x2
    0x840178bc     0x2c    addi a4,a4,1288 # ffffffff84019dc0 <msgRegisters+0x378>
    0x840178c0     0x30    add a5,a5,a4
    0x840178c2     0x32    lw a5,0(a5)
    0x840178c4     0x34    add a5,a5,a4
    0x840178c6     0x36    jr a5
    0x840178c8     0x38    auipc a3,0x3
    0x840178cc     0x3c    ld a3,840(a3) # ffffffff8401ac10 <current_syscall_error>
    0x840178d0     0x40    li a2,0
    0x840178d2     0x42    jal ra,ffffffff840100ea <setMR>
    0x840178d6     0x46    slli a0,a0,0x20
    0x840178d8     0x48    srli a0,a0,0x20
    0x840178da     0x4a    j ffffffff840179fa <setMRs_syscall_error+0x16a>
    0x840178dc     0x4c    auipc a3,0x3
    0x840178e0     0x50    ld a3,828(a3) # ffffffff8401ac18 <current_syscall_error+0x8>
    0x840178e4     0x54    li a2,0
    0x840178e6     0x56    jal ra,ffffffff840100ea <setMR>
    0x840178ea     0x5a    slli a0,a0,0x20
    0x840178ec     0x5c    srli a0,a0,0x20
    0x840178ee     0x5e    j ffffffff840179fa <setMRs_syscall_error+0x16a>
    0x840178f0     0x60    auipc s2,0x3
    0x840178f4     0x64    addi s2,s2,-240 # ffffffff8401a800 <riscvKSASIDTable>
    0x840178f8     0x68    ld a3,1056(s2)
    0x840178fc     0x6c    li a2,0
    0x840178fe     0x6e    jal ra,ffffffff840100ea <setMR>
    0x84017902     0x72    ld a3,1064(s2)
    0x84017906     0x76    li a2,1
    0x84017908     0x78    mv a1,s1
    0x8401790a     0x7a    mv a0,s0
    0x8401790c     0x7c    jal ra,ffffffff840100ea <setMR>
    0x84017910     0x80    slli a0,a0,0x20
    0x84017912     0x82    srli a0,a0,0x20
    0x84017914     0x84    j ffffffff840179fa <setMRs_syscall_error+0x16a>
    0x84017916     0x86    auipc s2,0x3
    0x8401791a     0x8a    addi s2,s2,-278 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401791e     0x8e    ld a3,1080(s2)
    0x84017922     0x92    snez a3,a3
    0x84017926     0x96    li a2,0
    0x84017928     0x98    jal ra,ffffffff840100ea <setMR>
    0x8401792c     0x9c    ld s3,1024(s2)
    0x84017930     0xa0    ld s4,1032(s2)
    0x84017934     0xa4    andi s2,s3,3
    0x84017938     0xa8    addi a3,s2,1
    0x8401793c     0xac    li a2,1
    0x8401793e     0xae    mv a1,s1
    0x84017940     0xb0    mv a0,s0
    0x84017942     0xb2    jal ra,ffffffff840100ea <setMR>
    0x84017946     0xb6    sext.w a5,a0
    0x8401794a     0xba    li a4,2
    0x8401794c     0xbc    beq s2,a4,ffffffff8401797c <setMRs_syscall_error+0xec>
    0x84017950     0xc0    bltu a4,s2,ffffffff840179a6 <setMRs_syscall_error+0x116>
    0x84017954     0xc4    beqz s2,ffffffff84017974 <setMRs_syscall_error+0xe4>
    0x84017958     0xc8    li a5,1
    0x8401795a     0xca    bne s2,a5,ffffffff840179dc <setMRs_syscall_error+0x14c>
    0x8401795e     0xce    srli a3,s3,0x2
    0x84017962     0xd2    andi a3,a3,127
    0x84017966     0xd6    li a2,2
    0x84017968     0xd8    mv a1,s1
    0x8401796a     0xda    mv a0,s0
    0x8401796c     0xdc    jal ra,ffffffff840100ea <setMR>
    0x84017970     0xe0    sext.w a5,a0
    0x84017974     0xe4    slli a0,a5,0x20
    0x84017978     0xe8    srli a0,a0,0x20
    0x8401797a     0xea    j ffffffff840179fa <setMRs_syscall_error+0x16a>
    0x8401797c     0xec    srli a3,s3,0x2
    0x84017980     0xf0    andi a3,a3,127
    0x84017984     0xf4    li a2,2
    0x84017986     0xf6    mv a1,s1
    0x84017988     0xf8    mv a0,s0
    0x8401798a     0xfa    jal ra,ffffffff840100ea <setMR>
    0x8401798e     0xfe    srli a3,s3,0x9
    0x84017992    0x102    andi a3,a3,127
    0x84017996    0x106    li a2,3
    0x84017998    0x108    mv a1,s1
    0x8401799a    0x10a    mv a0,s0
    0x8401799c    0x10c    jal ra,ffffffff840100ea <setMR>
    0x840179a0    0x110    sext.w a5,a0
    0x840179a4    0x114    j ffffffff84017974 <setMRs_syscall_error+0xe4>
    0x840179a6    0x116    srli a3,s3,0x9
    0x840179aa    0x11a    andi a3,a3,127
    0x840179ae    0x11e    li a2,2
    0x840179b0    0x120    mv a1,s1
    0x840179b2    0x122    mv a0,s0
    0x840179b4    0x124    jal ra,ffffffff840100ea <setMR>
    0x840179b8    0x128    mv a3,s4
    0x840179ba    0x12a    li a2,3
    0x840179bc    0x12c    mv a1,s1
    0x840179be    0x12e    mv a0,s0
    0x840179c0    0x130    jal ra,ffffffff840100ea <setMR>
    0x840179c4    0x134    srli a3,s3,0x2
    0x840179c8    0x138    andi a3,a3,127
    0x840179cc    0x13c    li a2,4
    0x840179ce    0x13e    mv a1,s1
    0x840179d0    0x140    mv a0,s0
    0x840179d2    0x142    jal ra,ffffffff840100ea <setMR>
    0x840179d6    0x146    sext.w a5,a0
    0x840179da    0x14a    j ffffffff84017974 <setMRs_syscall_error+0xe4>
    0x840179dc    0x14c    jal ra,ffffffff84010490 <halt>
    0x840179e0    0x150    auipc a3,0x3
    0x840179e4    0x154    ld a3,592(a3) # ffffffff8401ac30 <current_syscall_error+0x20>
    0x840179e8    0x158    li a2,0
    0x840179ea    0x15a    jal ra,ffffffff840100ea <setMR>
    0x840179ee    0x15e    slli a0,a0,0x20
    0x840179f0    0x160    srli a0,a0,0x20
    0x840179f2    0x162    j ffffffff840179fa <setMRs_syscall_error+0x16a>
    0x840179f4    0x164    jal ra,ffffffff84010490 <halt>
    0x840179f8    0x168    li a0,0
    0x840179fa    0x16a    ld ra,40(sp)          ; stack access
    0x840179fc    0x16c    ld s0,32(sp)          ; stack access
    0x840179fe    0x16e    ld s1,24(sp)          ; stack access
    0x84017a00    0x170    ld s2,16(sp)          ; stack access
    0x84017a02    0x172    ld s3,8(sp)           ; stack access
    0x84017a04    0x174    ld s4,0(sp)           ; stack access
    0x84017a06    0x176    addi sp,sp,48
    0x84017a08    0x178    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
124 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 202 nodes.

Section decodeUnbindNotification (188 of 301)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 31 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x840176bc     0x0    addi sp,sp,-32
    0x840176be     0x2    sd ra,24(sp)          ; stack access
    0x840176c0     0x4    sd s0,16(sp)          ; stack access
    0x840176c2     0x6    sd a0,0(sp)           ; stack access
    0x840176c4     0x8    sd a1,8(sp)           ; stack access
    0x840176c6     0xa    slli s0,a0,0x19
    0x840176ca     0xe    srli s0,s0,0x19
    0x840176cc    0x10    srli a0,a0,0x26
    0x840176ce    0x12    andi a0,a0,1
    0x840176d0    0x14    beqz a0,ffffffff840176d8 <decodeUnbindNotification+0x1c>
    0x840176d2    0x16    li a5,-1
    0x840176d4    0x18    slli a5,a5,0x27
    0x840176d6    0x1a    or s0,s0,a5
    0x840176d8    0x1c    ld a5,304(s0)
    0x840176dc    0x20    beqz a5,ffffffff840176fc <decodeUnbindNotification+0x40>
    0x840176de    0x22    li a1,2
    0x840176e0    0x24    auipc a0,0x16
    0x840176e4    0x28    ld a0,-1672(a0) # ffffffff8402d058 <ksCurThread>
    0x840176e8    0x2c    jal ra,ffffffff84012996 <setThreadState>
    0x840176ec    0x30    li a1,0
    0x840176ee    0x32    mv a0,s0
    0x840176f0    0x34    jal ra,ffffffff840175d8 <invokeTCB_NotificationControl>
    0x840176f4    0x38    ld ra,24(sp)          ; stack access
    0x840176f6    0x3a    ld s0,16(sp)          ; stack access
    0x840176f8    0x3c    addi sp,sp,32
    0x840176fa    0x3e    ret
    0x840176fc    0x40    li a5,3
    0x840176fe    0x42    auipc a4,0x3
    0x84017702    0x46    sd a5,1346(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017706    0x4a    li a0,3
    0x84017708    0x4c    j ffffffff840176f4 <decodeUnbindNotification+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 47 nodes.

Section decodeBindNotification (189 of 301)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 80 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeBindNotification`:

    0x840175f0     0x0    addi sp,sp,-48
    0x840175f2     0x2    sd ra,40(sp)          ; stack access
    0x840175f4     0x4    sd s0,32(sp)          ; stack access
    0x840175f6     0x6    sd s1,24(sp)          ; stack access
    0x840175f8     0x8    sd a0,0(sp)           ; stack access
    0x840175fa     0xa    sd a1,8(sp)           ; stack access
    0x840175fc     0xc    auipc a3,0x4
    0x84017600    0x10    ld a3,-1388(a3) # ffffffff8401b090 <current_extra_caps>
    0x84017604    0x14    beqz a3,ffffffff8401765e <decodeBindNotification+0x6e>
    0x84017606    0x16    ld a5,0(sp)           ; stack access
    0x84017608    0x18    slli a4,a5,0x19
    0x8401760c    0x1c    srli a4,a4,0x19
    0x8401760e    0x1e    srli a5,a5,0x26
    0x84017610    0x20    andi a5,a5,1
    0x84017612    0x22    beqz a5,ffffffff8401761a <decodeBindNotification+0x2a>
    0x84017614    0x24    li a5,-1
    0x84017616    0x26    slli a5,a5,0x27
    0x84017618    0x28    or a4,a4,a5
    0x8401761a    0x2a    mv s0,a4
    0x8401761c    0x2c    ld a5,304(a4)
    0x84017620    0x30    bnez a5,ffffffff8401766c <decodeBindNotification+0x7c>
    0x84017622    0x32    ld a5,0(a3)
    0x84017624    0x34    srli a3,a5,0x3b
    0x84017628    0x38    li a4,6
    0x8401762a    0x3a    bne a3,a4,ffffffff84017682 <decodeBindNotification+0x92>
    0x8401762e    0x3e    slli a4,a5,0x19
    0x84017632    0x42    srli a4,a4,0x19
    0x84017634    0x44    srli a3,a5,0x26
    0x84017638    0x48    andi a3,a3,1
    0x8401763a    0x4a    beqz a3,ffffffff84017642 <decodeBindNotification+0x52>
    0x8401763c    0x4c    li a3,-1
    0x8401763e    0x4e    slli a3,a3,0x27
    0x84017640    0x50    or a4,a4,a3
    0x84017642    0x52    mv s1,a4
    0x84017644    0x54    srli a5,a5,0x3a
    0x84017646    0x56    andi a5,a5,1
    0x84017648    0x58    beqz a5,ffffffff84017690 <decodeBindNotification+0xa0>
    0x8401764a    0x5a    ld a5,8(a4)
    0x8401764c    0x5c    slli a5,a5,0x19
    0x8401764e    0x5e    beqz a5,ffffffff8401769e <decodeBindNotification+0xae>
    0x84017650    0x60    li a5,3
    0x84017652    0x62    auipc a4,0x3
    0x84017656    0x66    sd a5,1518(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401765a    0x6a    li a0,3
    0x8401765c    0x6c    j ffffffff84017678 <decodeBindNotification+0x88>
    0x8401765e    0x6e    li a5,7
    0x84017660    0x70    auipc a4,0x3
    0x84017664    0x74    sd a5,1504(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017668    0x78    li a0,3
    0x8401766a    0x7a    j ffffffff84017678 <decodeBindNotification+0x88>
    0x8401766c    0x7c    li a5,3
    0x8401766e    0x7e    auipc a4,0x3
    0x84017672    0x82    sd a5,1490(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017676    0x86    li a0,3
    0x84017678    0x88    ld ra,40(sp)          ; stack access
    0x8401767a    0x8a    ld s0,32(sp)          ; stack access
    0x8401767c    0x8c    ld s1,24(sp)          ; stack access
    0x8401767e    0x8e    addi sp,sp,48
    0x84017680    0x90    ret
    0x84017682    0x92    li a5,3
    0x84017684    0x94    auipc a4,0x3
    0x84017688    0x98    sd a5,1468(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401768c    0x9c    li a0,3
    0x8401768e    0x9e    j ffffffff84017678 <decodeBindNotification+0x88>
    0x84017690    0xa0    li a5,3
    0x84017692    0xa2    auipc a4,0x3
    0x84017696    0xa6    sd a5,1454(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401769a    0xaa    li a0,3
    0x8401769c    0xac    j ffffffff84017678 <decodeBindNotification+0x88>
    0x8401769e    0xae    ld a5,24(a4)
    0x840176a0    0xb0    slli a5,a5,0x19
    0x840176a2    0xb2    bnez a5,ffffffff84017650 <decodeBindNotification+0x60>
    0x840176a4    0xb4    li a1,2
    0x840176a6    0xb6    auipc a0,0x16
    0x840176aa    0xba    ld a0,-1614(a0) # ffffffff8402d058 <ksCurThread>
    0x840176ae    0xbe    jal ra,ffffffff84012996 <setThreadState>
    0x840176b2    0xc2    mv a1,s1
    0x840176b4    0xc4    mv a0,s0
    0x840176b6    0xc6    jal ra,ffffffff840175d8 <invokeTCB_NotificationControl>
    0x840176ba    0xca    j ffffffff84017678 <decodeBindNotification+0x88>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 119 nodes.

Section invokeTCB_NotificationControl (190 of 301)
==================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_NotificationControl`:

    0x840175d8     0x0    addi sp,sp,-16
    0x840175da     0x2    sd ra,8(sp)           ; stack access
    0x840175dc     0x4    beqz a1,ffffffff840175ea <invokeTCB_NotificationControl+0x12>
    0x840175de     0x6    jal ra,ffffffff84011de6 <bindNotification>
    0x840175e2     0xa    li a0,0
    0x840175e4     0xc    ld ra,8(sp)           ; stack access
    0x840175e6     0xe    addi sp,sp,16
    0x840175e8    0x10    ret
    0x840175ea    0x12    jal ra,ffffffff84011dd2 <unbindNotification>
    0x840175ee    0x16    j ffffffff840175e2 <invokeTCB_NotificationControl+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 17 nodes.

Section preemptionPoint (191 of 301)
====================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 71 instructions.

Skipping 14402573 csrr a0,sip

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `preemptionPoint`:

    0x8401578e     0x0    auipc a5,0x18
    0x84015792     0x4    ld a5,-1902(a5) # ffffffff8402d020 <ksWorkUnitsCompleted>
    0x84015796     0x8    addi a5,a5,1
    0x84015798     0xa    li a4,99
    0x8401579c     0xe    bgeu a4,a5,ffffffff8401584a <preemptionPoint+0xbc>
    0x840157a0    0x12    auipc a5,0x18
    0x840157a4    0x16    sd zero,-1920(a5) # ffffffff8402d020 <ksWorkUnitsCompleted>
    0x840157a8    0x1a    csrr a0,sip
    0x840157ac    0x1e    andi a0,a0,544
    0x840157b0    0x22    bnez a0,ffffffff84015856 <preemptionPoint+0xc8>
    0x840157b2    0x24    addi sp,sp,-16
    0x840157b4    0x26    sd ra,8(sp)           ; stack access
    0x840157b6    0x28    auipc a4,0x18
    0x840157ba    0x2c    addi a4,a4,-1926 # ffffffff8402d030 <ksCurTime>
    0x840157be    0x30    ld a2,0(a4)
    0x840157c0    0x32    rdtime a3
    0x840157c4    0x36    sd a3,0(a4)
    0x840157c6    0x38    auipc a4,0x18
    0x840157ca    0x3c    addi a4,a4,-1926 # ffffffff8402d040 <ksConsumed>
    0x840157ce    0x40    ld a5,0(a4)
    0x840157d0    0x42    sub a5,a5,a2
    0x840157d2    0x44    add a5,a5,a3
    0x840157d4    0x46    sd a5,0(a4)
    0x840157d6    0x48    auipc a3,0x18
    0x840157da    0x4c    ld a3,-1966(a3) # ffffffff8402d028 <ksCurSC>
    0x840157de    0x50    ld a2,72(a3)
    0x840157e0    0x52    slli a4,a2,0x4
    0x840157e4    0x56    add a4,a4,a3
    0x840157e6    0x58    ld a4,96(a4)
    0x840157e8    0x5a    bltu a4,a5,ffffffff84015822 <preemptionPoint+0x94>
    0x840157ec    0x5e    sub a4,a4,a5
    0x840157ee    0x60    li a1,19
    0x840157f0    0x62    bgeu a1,a4,ffffffff84015822 <preemptionPoint+0x94>
    0x840157f4    0x66    ld a4,0(a3)
    0x840157f6    0x68    bnez a4,ffffffff8401580c <preemptionPoint+0x7e>
    0x840157f8    0x6a    addi a5,a5,20
    0x840157fa    0x6c    auipc a4,0x18
    0x840157fe    0x70    ld a4,-2026(a4) # ffffffff8402d010 <ksDomainTime>
    0x84015802    0x74    bltu a4,a5,ffffffff8401583a <preemptionPoint+0xac>
    0x84015806    0x78    ld ra,8(sp)           ; stack access
    0x84015808    0x7a    addi sp,sp,16
    0x8401580a    0x7c    ret
    0x8401580c    0x7e    ld a4,80(a3)
    0x8401580e    0x80    bgeu a4,a2,ffffffff84015832 <preemptionPoint+0xa4>
    0x84015812    0x84    ld a1,64(a3)
    0x84015814    0x86    add a4,a4,a1
    0x84015816    0x88    addi a4,a4,1
    0x84015818    0x8a    sub a2,a4,a2
    0x8401581c    0x8e    ld a4,64(a3)
    0x8401581e    0x90    bne a4,a2,ffffffff840157f8 <preemptionPoint+0x6a>
    0x84015822    0x94    li a3,1
    0x84015824    0x96    li a2,0
    0x84015826    0x98    li a1,1
    0x84015828    0x9a    mv a0,a5
    0x8401582a    0x9c    jal ra,ffffffff8401523c <chargeBudget>
    0x8401582e    0xa0    li a0,4
    0x84015830    0xa2    j ffffffff84015806 <preemptionPoint+0x78>
    0x84015832    0xa4    addi a4,a4,1
    0x84015834    0xa6    sub a2,a4,a2
    0x84015838    0xaa    j ffffffff8401581c <preemptionPoint+0x8e>
    0x8401583a    0xac    li a5,1
    0x8401583c    0xae    auipc a4,0x17
    0x84015840    0xb2    sd a5,2044(a4) # ffffffff8402d038 <ksReprogram>
    0x84015844    0xb6    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84015848    0xba    j ffffffff8401582e <preemptionPoint+0xa0>
    0x8401584a    0xbc    auipc a4,0x17
    0x8401584e    0xc0    sd a5,2006(a4) # ffffffff8402d020 <ksWorkUnitsCompleted>
    0x84015852    0xc4    li a0,0
    0x84015854    0xc6    ret
    0x84015856    0xc8    li a0,4
    0x84015858    0xca    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
71 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 112 nodes.

Section c_handle_interrupt (192 of 301)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x8401558c    0x0    addi sp,sp,-16
    0x8401558e    0x2    sd ra,8(sp)           ; stack access
    0x84015590    0x4    jal ra,ffffffff840154a8 <handleInterruptEntry>
    0x84015594    0x8    jal ra,ffffffff840103ee <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section mcsIRQ (193 of 301)
===========================

Deriving specifications
-----------------------

Section `mcsIRQ` consists of 83 instructions.

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `mcsIRQ`:

    0x840152e0     0x0    addi sp,sp,-16
    0x840152e2     0x2    sd ra,8(sp)           ; stack access
    0x840152e4     0x4    li a5,54
    0x840152e8     0x8    beq a0,a5,ffffffff84015314 <mcsIRQ+0x34>
    0x840152ec     0xc    auipc a4,0x18
    0x840152f0    0x10    ld a4,-660(a4) # ffffffff8402d058 <ksCurThread>
    0x840152f4    0x14    ld a5,280(a4)
    0x840152f8    0x18    andi a5,a5,15
    0x840152fa    0x1a    addi a5,a5,-1
    0x840152fc    0x1c    li a3,1
    0x840152fe    0x1e    bgeu a3,a5,ffffffff84015336 <mcsIRQ+0x56>
    0x84015302    0x22    auipc a5,0x18
    0x84015306    0x26    ld a5,-730(a5) # ffffffff8402d028 <ksCurSC>
    0x8401530a    0x2a    ld a5,64(a5)
    0x8401530c    0x2c    bnez a5,ffffffff840153ba <mcsIRQ+0xda>
    0x8401530e    0x2e    ld ra,8(sp)           ; stack access
    0x84015310    0x30    addi sp,sp,16
    0x84015312    0x32    ret
    0x84015314    0x34    auipc a4,0x18
    0x84015318    0x38    addi a4,a4,-740 # ffffffff8402d030 <ksCurTime>
    0x8401531c    0x3c    ld a2,0(a4)
    0x8401531e    0x3e    rdtime a3
    0x84015322    0x42    sd a3,0(a4)
    0x84015324    0x44    auipc a4,0x18
    0x84015328    0x48    addi a4,a4,-740 # ffffffff8402d040 <ksConsumed>
    0x8401532c    0x4c    ld a5,0(a4)
    0x8401532e    0x4e    sub a5,a5,a2
    0x84015330    0x50    add a5,a5,a3
    0x84015332    0x52    sd a5,0(a4)
    0x84015334    0x54    j ffffffff840152ec <mcsIRQ+0xc>
    0x84015336    0x56    ld a5,368(a4)
    0x8401533a    0x5a    beqz a5,ffffffff84015302 <mcsIRQ+0x22>
    0x8401533c    0x5c    ld a5,64(a5)
    0x8401533e    0x5e    beqz a5,ffffffff84015302 <mcsIRQ+0x22>
    0x84015340    0x60    ld a5,288(a4)
    0x84015344    0x64    andi a5,a5,1
    0x84015346    0x66    bnez a5,ffffffff84015302 <mcsIRQ+0x22>
    0x84015348    0x68    auipc a4,0x18
    0x8401534c    0x6c    ld a4,-800(a4) # ffffffff8402d028 <ksCurSC>
    0x84015350    0x70    auipc a0,0x18
    0x84015354    0x74    ld a0,-784(a0) # ffffffff8402d040 <ksConsumed>
    0x84015358    0x78    ld a3,72(a4)
    0x8401535a    0x7a    slli a5,a3,0x4
    0x8401535e    0x7e    add a5,a5,a4
    0x84015360    0x80    ld a5,96(a5)
    0x84015362    0x82    bltu a5,a0,ffffffff840153a6 <mcsIRQ+0xc6>
    0x84015366    0x86    sub a5,a5,a0
    0x84015368    0x88    li a2,19
    0x8401536a    0x8a    bgeu a2,a5,ffffffff840153a6 <mcsIRQ+0xc6>
    0x8401536e    0x8e    ld a5,0(a4)
    0x84015370    0x90    bnez a5,ffffffff84015390 <mcsIRQ+0xb0>
    0x84015372    0x92    addi a0,a0,20
    0x84015374    0x94    auipc a5,0x18
    0x84015378    0x98    ld a5,-868(a5) # ffffffff8402d010 <ksDomainTime>
    0x8401537c    0x9c    bgeu a5,a0,ffffffff8401530e <mcsIRQ+0x2e>
    0x84015380    0xa0    li a5,1
    0x84015382    0xa2    auipc a4,0x18
    0x84015386    0xa6    sd a5,-842(a4) # ffffffff8402d038 <ksReprogram>
    0x8401538a    0xaa    jal ra,ffffffff840128fc <rescheduleRequired>
    0x8401538e    0xae    j ffffffff8401530e <mcsIRQ+0x2e>
    0x84015390    0xb0    ld a5,80(a4)
    0x84015392    0xb2    bgeu a5,a3,ffffffff840153b2 <mcsIRQ+0xd2>
    0x84015396    0xb6    ld a2,64(a4)
    0x84015398    0xb8    add a5,a5,a2
    0x8401539a    0xba    addi a5,a5,1
    0x8401539c    0xbc    sub a3,a5,a3
    0x840153a0    0xc0    ld a5,64(a4)
    0x840153a2    0xc2    bne a5,a3,ffffffff84015372 <mcsIRQ+0x92>
    0x840153a6    0xc6    li a3,1
    0x840153a8    0xc8    li a2,0
    0x840153aa    0xca    li a1,1
    0x840153ac    0xcc    jal ra,ffffffff8401523c <chargeBudget>
    0x840153b0    0xd0    j ffffffff8401530e <mcsIRQ+0x2e>
    0x840153b2    0xd2    addi a5,a5,1
    0x840153b4    0xd4    sub a3,a5,a3
    0x840153b8    0xd8    j ffffffff840153a0 <mcsIRQ+0xc0>
    0x840153ba    0xda    li a3,1
    0x840153bc    0xdc    li a2,0
    0x840153be    0xde    li a1,0
    0x840153c0    0xe0    auipc a0,0x18
    0x840153c4    0xe4    ld a0,-896(a0) # ffffffff8402d040 <ksConsumed>
    0x840153c8    0xe8    jal ra,ffffffff8401523c <chargeBudget>
    0x840153cc    0xec    j ffffffff8401530e <mcsIRQ+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `mcsIRQ` has 136 nodes.

Section handleFault (194 of 301)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleFault`:

    0x84015172     0x0    addi sp,sp,-16
    0x84015174     0x2    sd ra,8(sp)           ; stack access
    0x84015176     0x4    sd s0,0(sp)           ; stack access
    0x84015178     0x6    mv s0,a0
    0x8401517a     0x8    ld a3,368(a0)
    0x8401517e     0xc    andi a5,a0,-1024
    0x84015182    0x10    snez a3,a3
    0x84015186    0x14    ld a1,96(a5)
    0x84015188    0x16    ld a2,104(a5)
    0x8401518a    0x18    jal ra,ffffffff84015110 <sendFaultIPC>
    0x8401518e    0x1c    beqz a0,ffffffff84015198 <handleFault+0x26>
    0x84015190    0x1e    ld ra,8(sp)           ; stack access
    0x84015192    0x20    ld s0,0(sp)           ; stack access
    0x84015194    0x22    addi sp,sp,16
    0x84015196    0x24    ret
    0x84015198    0x26    mv a0,s0
    0x8401519a    0x28    jal ra,ffffffff84012a90 <handleNoFaultHandler>
    0x8401519e    0x2c    j ffffffff84015190 <handleFault+0x1e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 30 nodes.

Section awaken (195 of 301)
===========================

Deriving specifications
-----------------------

Section `awaken` consists of 38 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `awaken`:

    0x8401497a     0x0    auipc a5,0x18
    0x8401497e     0x4    ld a5,1766(a5) # ffffffff8402d060 <ksReleaseHead>
    0x84014982     0x8    bnez a5,ffffffff84014986 <awaken+0xc>
    0x84014984     0xa    ret
    0x84014986     0xc    addi sp,sp,-48
    0x84014988     0xe    sd ra,40(sp)          ; stack access
    0x8401498a    0x10    sd s0,32(sp)          ; stack access
    0x8401498c    0x12    sd s1,24(sp)          ; stack access
    0x8401498e    0x14    sd s2,16(sp)          ; stack access
    0x84014990    0x16    sd s3,8(sp)           ; stack access
    0x84014992    0x18    auipc s0,0x18
    0x84014996    0x1c    addi s0,s0,1694 # ffffffff8402d030 <ksCurTime>
    0x8401499a    0x20    auipc s3,0x18
    0x8401499e    0x24    addi s3,s3,1694 # ffffffff8402d038 <ksReprogram>
    0x840149a2    0x28    li s2,1
    0x840149a4    0x2a    auipc s1,0x18
    0x840149a8    0x2e    addi s1,s1,1724 # ffffffff8402d060 <ksReleaseHead>
    0x840149ac    0x32    ld a5,368(a5)
    0x840149b0    0x36    ld a4,72(a5)
    0x840149b2    0x38    slli a4,a4,0x4
    0x840149b4    0x3a    add a5,a5,a4
    0x840149b6    0x3c    ld a4,0(s0)
    0x840149b8    0x3e    addi a4,a4,10
    0x840149ba    0x40    ld a5,88(a5)
    0x840149bc    0x42    bgeu a4,a5,ffffffff840149ce <awaken+0x54>
    0x840149c0    0x46    ld ra,40(sp)          ; stack access
    0x840149c2    0x48    ld s0,32(sp)          ; stack access
    0x840149c4    0x4a    ld s1,24(sp)          ; stack access
    0x840149c6    0x4c    ld s2,16(sp)          ; stack access
    0x840149c8    0x4e    ld s3,8(sp)           ; stack access
    0x840149ca    0x50    addi sp,sp,48
    0x840149cc    0x52    ret
    0x840149ce    0x54    jal ra,ffffffff84014940 <tcbReleaseDequeue>
    0x840149d2    0x58    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x840149d6    0x5c    sd s2,0(s3)
    0x840149da    0x60    ld a5,0(s1)
    0x840149dc    0x62    beqz a5,ffffffff840149c0 <awaken+0x46>
    0x840149de    0x64    j ffffffff840149ac <awaken+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `awaken` has 65 nodes.

Section handleInterrupt (196 of 301)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 84 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterrupt`:

    0x8401483a     0x0    li a5,54
    0x8401483e     0x4    bltu a5,a0,ffffffff8401489e <handleInterrupt+0x64>
    0x84014842     0x8    slli a4,a0,0x3
    0x84014846     0xc    auipc a5,0x6
    0x8401484a    0x10    addi a5,a5,-70 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401484e    0x14    add a5,a5,a4
    0x84014850    0x16    ld a5,1752(a5)
    0x84014854    0x1a    li a4,2
    0x84014856    0x1c    beq a5,a4,ffffffff840148e0 <handleInterrupt+0xa6>
    0x8401485a    0x20    addi sp,sp,-16
    0x8401485c    0x22    sd ra,8(sp)           ; stack access
    0x8401485e    0x24    bltu a4,a5,ffffffff840148cc <handleInterrupt+0x92>
    0x84014862    0x28    beqz a5,ffffffff840148f4 <handleInterrupt+0xba>
    0x84014864    0x2a    slli a0,a0,0x5
    0x84014866    0x2c    auipc a5,0x7
    0x8401486a    0x30    addi a5,a5,-102 # ffffffff8401b800 <intStateIRQNode>
    0x8401486e    0x34    add a5,a5,a0
    0x84014870    0x36    ld a4,0(a5)
    0x84014872    0x38    srli a2,a4,0x3b
    0x84014876    0x3c    li a3,6
    0x84014878    0x3e    bne a2,a3,ffffffff840148d2 <handleInterrupt+0x98>
    0x8401487c    0x42    srli a3,a4,0x39
    0x84014880    0x46    andi a3,a3,1
    0x84014882    0x48    beqz a3,ffffffff840148d2 <handleInterrupt+0x98>
    0x84014884    0x4a    slli a0,a4,0x19
    0x84014888    0x4e    srli a0,a0,0x19
    0x8401488a    0x50    srli a4,a4,0x26
    0x8401488c    0x52    andi a4,a4,1
    0x8401488e    0x54    beqz a4,ffffffff84014896 <handleInterrupt+0x5c>
    0x84014890    0x56    li a4,-1
    0x84014892    0x58    slli a4,a4,0x27
    0x84014894    0x5a    or a0,a0,a4
    0x84014896    0x5c    ld a1,8(a5)
    0x84014898    0x5e    jal ra,ffffffff84014648 <sendSignal>
    0x8401489c    0x62    j ffffffff840148d2 <handleInterrupt+0x98>
    0x8401489e    0x64    srli a4,a0,0x5
    0x840148a2    0x68    slli a4,a4,0x2
    0x840148a4    0x6a    lui a5,0xcc002
    0x840148a8    0x6e    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd0100>
    0x840148ac    0x72    add a4,a4,a5
    0x840148ae    0x74    lw a3,0(a4)
    0x840148b0    0x76    andi a0,a0,31
    0x840148b2    0x78    li a5,1
    0x840148b4    0x7a    sll a0,a5,a0
    0x840148b8    0x7e    not a5,a0
    0x840148bc    0x82    and a5,a5,a3
    0x840148be    0x84    sext.w a5,a5
    0x840148c0    0x86    sw a5,0(a4)
    0x840148c2    0x88    auipc a5,0x18
    0x840148c6    0x8c    sw zero,1966(a5) # ffffffff8402d070 <active_irq>
    0x840148ca    0x90    ret
    0x840148cc    0x92    li a4,3
    0x840148ce    0x94    bne a5,a4,ffffffff8401492c <handleInterrupt+0xf2>
    0x840148d2    0x98    auipc a5,0x18
    0x840148d6    0x9c    sw zero,1950(a5) # ffffffff8402d070 <active_irq>
    0x840148da    0xa0    ld ra,8(sp)           ; stack access
    0x840148dc    0xa2    addi sp,sp,16
    0x840148de    0xa4    ret
    0x840148e0    0xa6    li a5,1
    0x840148e2    0xa8    auipc a4,0x18
    0x840148e6    0xac    sd a5,1878(a4) # ffffffff8402d038 <ksReprogram>
    0x840148ea    0xb0    auipc a5,0x18
    0x840148ee    0xb4    sw zero,1926(a5) # ffffffff8402d070 <active_irq>
    0x840148f2    0xb8    ret
    0x840148f4    0xba    li a5,54
    0x840148f8    0xbe    bne a0,a5,ffffffff84014906 <handleInterrupt+0xcc>
    0x840148fc    0xc2    li a5,32
    0x84014900    0xc6    csrrc a5,sie,a5
    0x84014904    0xca    j ffffffff840148d2 <handleInterrupt+0x98>
    0x84014906    0xcc    srli a4,a0,0x5
    0x8401490a    0xd0    slli a4,a4,0x2
    0x8401490c    0xd2    lui a5,0xcc002
    0x84014910    0xd6    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd0100>
    0x84014914    0xda    add a4,a4,a5
    0x84014916    0xdc    lw a3,0(a4)
    0x84014918    0xde    andi a0,a0,31
    0x8401491a    0xe0    li a5,1
    0x8401491c    0xe2    sll a0,a5,a0
    0x84014920    0xe6    not a5,a0
    0x84014924    0xea    and a5,a5,a3
    0x84014926    0xec    sext.w a5,a5
    0x84014928    0xee    sw a5,0(a4)
    0x8401492a    0xf0    j ffffffff840148d2 <handleInterrupt+0x98>
    0x8401492c    0xf2    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
84 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 121 nodes.

Section postpone (197 of 301)
=============================

Deriving specifications
-----------------------

Section `postpone` consists of 15 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `postpone`:

    0x84013ce4     0x0    addi sp,sp,-16
    0x84013ce6     0x2    sd ra,8(sp)           ; stack access
    0x84013ce8     0x4    sd s0,0(sp)           ; stack access
    0x84013cea     0x6    mv s0,a0
    0x84013cec     0x8    ld a0,24(a0)
    0x84013cee     0xa    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x84013cf2     0xe    ld a0,24(s0)
    0x84013cf4    0x10    jal ra,ffffffff84013c6e <tcbReleaseEnqueue>
    0x84013cf8    0x14    li a5,1
    0x84013cfa    0x16    auipc a4,0x19
    0x84013cfe    0x1a    sd a5,830(a4) # ffffffff8402d038 <ksReprogram>
    0x84013d02    0x1e    ld ra,8(sp)           ; stack access
    0x84013d04    0x20    ld s0,0(sp)           ; stack access
    0x84013d06    0x22    addi sp,sp,16
    0x84013d08    0x24    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `postpone` has 25 nodes.

Section invokeIRQHandler_SetIRQHandler (198 of 301)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 23 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x84013b3a     0x0    addi sp,sp,-48
    0x84013b3c     0x2    sd ra,40(sp)          ; stack access
    0x84013b3e     0x4    sd s0,32(sp)          ; stack access
    0x84013b40     0x6    sd s1,24(sp)          ; stack access
    0x84013b42     0x8    sd a1,0(sp)           ; stack access
    0x84013b44     0xa    sd a2,8(sp)           ; stack access
    0x84013b46     0xc    mv s1,a3
    0x84013b48     0xe    slli a0,a0,0x5
    0x84013b4a    0x10    auipc s0,0x8
    0x84013b4e    0x14    addi s0,s0,-842 # ffffffff8401b800 <intStateIRQNode>
    0x84013b52    0x18    add s0,s0,a0
    0x84013b54    0x1a    mv a0,s0
    0x84013b56    0x1c    jal ra,ffffffff84013b06 <cteDeleteOne>
    0x84013b5a    0x20    mv a3,s0
    0x84013b5c    0x22    mv a2,s1
    0x84013b5e    0x24    ld a0,0(sp)           ; stack access
    0x84013b60    0x26    ld a1,8(sp)           ; stack access
    0x84013b62    0x28    jal ra,ffffffff840118d4 <cteInsert>
    0x84013b66    0x2c    ld ra,40(sp)          ; stack access
    0x84013b68    0x2e    ld s0,32(sp)          ; stack access
    0x84013b6a    0x30    ld s1,24(sp)          ; stack access
    0x84013b6c    0x32    addi sp,sp,48
    0x84013b6e    0x34    ret

Proving inst theorems
---------------------

23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 36 nodes.

Section cancelSignal (199 of 301)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 49 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `cancelSignal`:

    0x840134d4     0x0    addi sp,sp,-48
    0x840134d6     0x2    sd ra,40(sp)          ; stack access
    0x840134d8     0x4    sd s0,32(sp)          ; stack access
    0x840134da     0x6    sd s1,24(sp)          ; stack access
    0x840134dc     0x8    mv s1,a0
    0x840134de     0xa    mv s0,a1
    0x840134e0     0xc    ld a5,8(a1)
    0x840134e2     0xe    slli a1,a5,0x19
    0x840134e6    0x12    srli a1,a1,0x19
    0x840134e8    0x14    srli a5,a5,0x26
    0x840134ea    0x16    andi a5,a5,1
    0x840134ec    0x18    beqz a5,ffffffff840134f4 <cancelSignal+0x20>
    0x840134ee    0x1a    li a5,-1
    0x840134f0    0x1c    slli a5,a5,0x27
    0x840134f2    0x1e    or a1,a1,a5
    0x840134f4    0x20    ld a5,0(s0)
    0x840134f6    0x22    srli a2,a5,0x19
    0x840134fa    0x26    bgez a5,ffffffff84013504 <cancelSignal+0x30>
    0x840134fe    0x2a    li a5,-1
    0x84013500    0x2c    slli a5,a5,0x27
    0x84013502    0x2e    or a2,a2,a5
    0x84013504    0x30    mv a0,s1
    0x84013506    0x32    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x8401350a    0x36    ld a3,8(s0)
    0x8401350c    0x38    li a4,-1
    0x8401350e    0x3a    slli a5,a4,0x27
    0x84013512    0x3e    and a3,a3,a5
    0x84013514    0x40    srli a4,a4,0x19
    0x84013516    0x42    and a4,a4,a0
    0x84013518    0x44    or a4,a4,a3
    0x8401351a    0x46    sd a4,8(s0)
    0x8401351c    0x48    ld a5,0(s0)
    0x8401351e    0x4a    slli a5,a5,0x27
    0x84013520    0x4c    srli a5,a5,0x27
    0x84013522    0x4e    slli a1,a1,0x19
    0x84013524    0x50    or a5,a5,a1
    0x84013526    0x52    beqz a0,ffffffff8401353c <cancelSignal+0x68>
    0x84013528    0x54    sd a5,0(s0)
    0x8401352a    0x56    li a1,0
    0x8401352c    0x58    mv a0,s1
    0x8401352e    0x5a    jal ra,ffffffff84012996 <setThreadState>
    0x84013532    0x5e    ld ra,40(sp)          ; stack access
    0x84013534    0x60    ld s0,32(sp)          ; stack access
    0x84013536    0x62    ld s1,24(sp)          ; stack access
    0x84013538    0x64    addi sp,sp,48
    0x8401353a    0x66    ret
    0x8401353c    0x68    andi a5,a5,-4
    0x8401353e    0x6a    sd a5,0(s0)
    0x84013540    0x6c    j ffffffff8401352a <cancelSignal+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 71 nodes.

Section reply_remove (200 of 301)
=================================

Deriving specifications
-----------------------

Section `reply_remove` consists of 69 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `reply_remove`:

    0x84013244     0x0    addi sp,sp,-32
    0x84013246     0x2    sd ra,24(sp)          ; stack access
    0x84013248     0x4    sd s0,16(sp)          ; stack access
    0x8401324a     0x6    sd s1,8(sp)           ; stack access
    0x8401324c     0x8    mv s1,a0
    0x8401324e     0xa    ld a5,16(a0)
    0x84013250     0xc    slli a3,a5,0x19
    0x84013254    0x10    srli a3,a3,0x19
    0x84013256    0x12    srli a4,a5,0x26
    0x8401325a    0x16    andi a4,a4,1
    0x8401325c    0x18    beqz a4,ffffffff84013290 <reply_remove+0x4c>
    0x8401325e    0x1a    li s0,-1
    0x84013260    0x1c    slli a4,s0,0x27
    0x84013264    0x20    or a3,a3,a4
    0x84013266    0x22    ld a4,8(a0)
    0x84013268    0x24    srli s0,s0,0x19
    0x8401326a    0x26    and s0,s0,a4
    0x8401326c    0x28    srli a4,a4,0x26
    0x8401326e    0x2a    andi a4,a4,1
    0x84013270    0x2c    beqz a4,ffffffff8401327a <reply_remove+0x36>
    0x84013272    0x2e    li a4,-1
    0x84013274    0x30    slli a4,a4,0x27
    0x84013276    0x32    or s0,s0,a4
    0x84013278    0x34    beqz a3,ffffffff840132d0 <reply_remove+0x8c>
    0x8401327a    0x36    srli a5,a5,0x30
    0x8401327c    0x38    andi a5,a5,1
    0x8401327e    0x3a    beqz a5,ffffffff840132a0 <reply_remove+0x5c>
    0x84013280    0x3c    mv a0,s1
    0x84013282    0x3e    jal ra,ffffffff840131a6 <reply_pop>
    0x84013286    0x42    ld ra,24(sp)          ; stack access
    0x84013288    0x44    ld s0,16(sp)          ; stack access
    0x8401328a    0x46    ld s1,8(sp)           ; stack access
    0x8401328c    0x48    addi sp,sp,32
    0x8401328e    0x4a    ret
    0x84013290    0x4c    ld a4,8(a0)
    0x84013292    0x4e    slli s0,a4,0x19
    0x84013296    0x52    srli s0,s0,0x19
    0x84013298    0x54    srli a4,a4,0x26
    0x8401329a    0x56    andi a4,a4,1
    0x8401329c    0x58    bnez a4,ffffffff84013272 <reply_remove+0x2e>
    0x8401329e    0x5a    j ffffffff84013278 <reply_remove+0x34>
    0x840132a0    0x5c    sd zero,8(a3) # ffffffffe0000008 <ki_end+0x5bfce008>
    0x840132a4    0x60    ld a0,0(s1)
    0x840132a6    0x62    ld a4,288(a0)
    0x840132aa    0x66    li a5,-1
    0x840132ac    0x68    slli a5,a5,0x28
    0x840132ae    0x6a    addi a5,a5,31
    0x840132b0    0x6c    and a5,a5,a4
    0x840132b2    0x6e    sd a5,288(a0)
    0x840132b6    0x72    sd zero,0(s1)
    0x840132ba    0x76    li a1,0
    0x840132bc    0x78    jal ra,ffffffff84012996 <setThreadState>
    0x840132c0    0x7c    beqz s0,ffffffff840132c6 <reply_remove+0x82>
    0x840132c2    0x7e    sd zero,16(s0)
    0x840132c6    0x82    sd zero,8(s1)
    0x840132ca    0x86    sd zero,16(s1)
    0x840132ce    0x8a    j ffffffff84013286 <reply_remove+0x42>
    0x840132d0    0x8c    ld a0,0(s1)
    0x840132d2    0x8e    beqz a0,ffffffff840132c0 <reply_remove+0x7c>
    0x840132d4    0x90    ld a4,288(a0)
    0x840132d8    0x94    li a5,-1
    0x840132da    0x96    slli a5,a5,0x28
    0x840132dc    0x98    addi a5,a5,31
    0x840132de    0x9a    and a5,a5,a4
    0x840132e0    0x9c    sd a5,288(a0)
    0x840132e4    0xa0    sd zero,0(s1)
    0x840132e8    0xa4    li a1,0
    0x840132ea    0xa6    jal ra,ffffffff84012996 <setThreadState>
    0x840132ee    0xaa    j ffffffff840132c0 <reply_remove+0x7c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_remove` has 108 nodes.

Section reply_pop (201 of 301)
==============================

Deriving specifications
-----------------------

Section `reply_pop` consists of 63 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `reply_pop`:

    0x840131a6     0x0    addi sp,sp,-48
    0x840131a8     0x2    sd ra,40(sp)          ; stack access
    0x840131aa     0x4    sd s0,32(sp)          ; stack access
    0x840131ac     0x6    sd s1,24(sp)          ; stack access
    0x840131ae     0x8    sd s2,16(sp)          ; stack access
    0x840131b0     0xa    sd s3,8(sp)           ; stack access
    0x840131b2     0xc    mv s2,a0
    0x840131b4     0xe    ld s3,0(a0)
    0x840131b8    0x12    ld a5,288(s3)
    0x840131bc    0x16    li s0,-1
    0x840131be    0x18    slli a4,s0,0x28
    0x840131c2    0x1c    addi a4,a4,31
    0x840131c4    0x1e    and a5,a5,a4
    0x840131c6    0x20    sd a5,288(s3)
    0x840131ca    0x24    sd zero,0(a0)
    0x840131ce    0x28    li a1,0
    0x840131d0    0x2a    mv a0,s3
    0x840131d2    0x2c    jal ra,ffffffff84012996 <setThreadState>
    0x840131d6    0x30    ld a5,16(s2)
    0x840131da    0x34    srli s0,s0,0x19
    0x840131dc    0x36    and s0,s0,a5
    0x840131de    0x38    srli a5,a5,0x26
    0x840131e0    0x3a    andi a5,a5,1
    0x840131e2    0x3c    beqz a5,ffffffff84013228 <reply_pop+0x82>
    0x840131e4    0x3e    li s1,-1
    0x840131e6    0x40    slli a5,s1,0x27
    0x840131ea    0x44    or s0,s0,a5
    0x840131ec    0x46    ld a5,8(s2)
    0x840131f0    0x4a    srli s1,s1,0x19
    0x840131f2    0x4c    and s1,s1,a5
    0x840131f4    0x4e    srli a5,a5,0x26
    0x840131f6    0x50    andi a5,a5,1
    0x840131f8    0x52    beqz a5,ffffffff84013202 <reply_pop+0x5c>
    0x840131fa    0x54    li a5,-1
    0x840131fc    0x56    slli a5,a5,0x27
    0x840131fe    0x58    or s1,s1,a5
    0x84013200    0x5a    beqz s0,ffffffff8401321a <reply_pop+0x74>
    0x84013202    0x5c    ld a5,368(s3)
    0x84013206    0x60    beqz a5,ffffffff8401323a <reply_pop+0x94>
    0x84013208    0x62    sd s1,32(s0)
    0x8401320a    0x64    beqz s1,ffffffff84013212 <reply_pop+0x6c>
    0x8401320c    0x66    ld a5,16(s2)
    0x84013210    0x6a    sd a5,16(s1)
    0x84013212    0x6c    sd zero,8(s2)
    0x84013216    0x70    sd zero,16(s2)
    0x8401321a    0x74    ld ra,40(sp)          ; stack access
    0x8401321c    0x76    ld s0,32(sp)          ; stack access
    0x8401321e    0x78    ld s1,24(sp)          ; stack access
    0x84013220    0x7a    ld s2,16(sp)          ; stack access
    0x84013222    0x7c    ld s3,8(sp)           ; stack access
    0x84013224    0x7e    addi sp,sp,48
    0x84013226    0x80    ret
    0x84013228    0x82    ld a5,8(s2)
    0x8401322c    0x86    slli s1,a5,0x19
    0x84013230    0x8a    srli s1,s1,0x19
    0x84013232    0x8c    srli a5,a5,0x26
    0x84013234    0x8e    andi a5,a5,1
    0x84013236    0x90    bnez a5,ffffffff840131fa <reply_pop+0x54>
    0x84013238    0x92    j ffffffff84013200 <reply_pop+0x5a>
    0x8401323a    0x94    mv a1,s3
    0x8401323c    0x96    mv a0,s0
    0x8401323e    0x98    jal ra,ffffffff840130c2 <schedContext_donate>
    0x84013242    0x9c    j ffffffff84013208 <reply_pop+0x62>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_pop` has 101 nodes.

Section reply_push (202 of 301)
===============================

Deriving specifications
-----------------------

Section `reply_push` consists of 57 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `reply_push`:

    0x84013112     0x0    addi sp,sp,-48
    0x84013114     0x2    sd ra,40(sp)          ; stack access
    0x84013116     0x4    sd s0,32(sp)          ; stack access
    0x84013118     0x6    sd s1,24(sp)          ; stack access
    0x8401311a     0x8    sd s2,16(sp)          ; stack access
    0x8401311c     0xa    sd s3,8(sp)           ; stack access
    0x8401311e     0xc    mv s0,a1
    0x84013120     0xe    mv s1,a2
    0x84013122    0x10    mv s2,a3
    0x84013124    0x12    ld s3,368(a0)
    0x84013128    0x16    ld a3,288(a1)
    0x8401312c    0x1a    li a4,-1
    0x8401312e    0x1c    slli a4,a4,0x28
    0x84013130    0x1e    addi a4,a4,31
    0x84013132    0x20    and a3,a3,a4
    0x84013134    0x22    sd a3,288(a1)
    0x84013138    0x26    sd a0,0(a2)
    0x8401313a    0x28    ld a6,288(a0)
    0x8401313e    0x2c    and a4,a6,a4
    0x84013142    0x30    slli a2,a2,0x1
    0x84013144    0x32    lui a3,0xe0000
    0x84013148    0x36    srli a3,a3,0x18
    0x8401314a    0x38    and a2,a2,a3
    0x8401314c    0x3a    or a4,a4,a2
    0x8401314e    0x3c    sd a4,288(a0)
    0x84013152    0x40    li a1,5
    0x84013154    0x42    jal ra,ffffffff84012996 <setThreadState>
    0x84013158    0x46    beqz s3,ffffffff84013162 <reply_push+0x50>
    0x8401315c    0x4a    ld a5,368(s0)
    0x84013160    0x4e    beqz a5,ffffffff84013170 <reply_push+0x5e>
    0x84013162    0x50    ld ra,40(sp)          ; stack access
    0x84013164    0x52    ld s0,32(sp)          ; stack access
    0x84013166    0x54    ld s1,24(sp)          ; stack access
    0x84013168    0x56    ld s2,16(sp)          ; stack access
    0x8401316a    0x58    ld s3,8(sp)           ; stack access
    0x8401316c    0x5a    addi sp,sp,48
    0x8401316e    0x5c    ret
    0x84013170    0x5e    beqz s2,ffffffff84013162 <reply_push+0x50>
    0x84013174    0x62    ld a4,32(s3) # ffffffffe0000020 <ki_end+0x5bfce020>
    0x84013178    0x66    slli a5,a4,0x19
    0x8401317c    0x6a    srli a5,a5,0x19
    0x8401317e    0x6c    sd a5,8(s1)
    0x84013180    0x6e    beqz a4,ffffffff8401318a <reply_push+0x78>
    0x84013182    0x70    slli a5,s1,0x19
    0x84013186    0x74    srli a5,a5,0x19
    0x84013188    0x76    sd a5,16(a4)
    0x8401318a    0x78    slli a5,s3,0x19
    0x8401318e    0x7c    srli a5,a5,0x19
    0x84013190    0x7e    li a4,1
    0x84013192    0x80    slli a4,a4,0x30
    0x84013194    0x82    or a5,a5,a4
    0x84013196    0x84    sd a5,16(s1)
    0x84013198    0x86    sd s1,32(s3)
    0x8401319c    0x8a    mv a1,s0
    0x8401319e    0x8c    mv a0,s3
    0x840131a0    0x8e    jal ra,ffffffff840130c2 <schedContext_donate>
    0x840131a4    0x92    j ffffffff84013162 <reply_push+0x50>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reply_push` has 90 nodes.

Section schedContext_donate (203 of 301)
========================================

Deriving specifications
-----------------------

Section `schedContext_donate` consists of 28 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `schedContext_donate`:

    0x840130c2     0x0    addi sp,sp,-32
    0x840130c4     0x2    sd ra,24(sp)          ; stack access
    0x840130c6     0x4    sd s0,16(sp)          ; stack access
    0x840130c8     0x6    sd s1,8(sp)           ; stack access
    0x840130ca     0x8    sd s2,0(sp)           ; stack access
    0x840130cc     0xa    mv s0,a0
    0x840130ce     0xc    mv s1,a1
    0x840130d0     0xe    ld s2,24(a0)
    0x840130d4    0x12    beqz s2,ffffffff840130fa <schedContext_donate+0x38>
    0x840130d8    0x16    mv a0,s2
    0x840130da    0x18    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x840130de    0x1c    sd zero,368(s2)
    0x840130e2    0x20    auipc a5,0x1a
    0x840130e6    0x24    ld a5,-138(a5) # ffffffff8402d058 <ksCurThread>
    0x840130ea    0x28    beq a5,s2,ffffffff8401310c <schedContext_donate+0x4a>
    0x840130ee    0x2c    auipc a5,0x1a
    0x840130f2    0x30    ld a5,-166(a5) # ffffffff8402d048 <ksSchedulerAction>
    0x840130f6    0x34    beq a5,s2,ffffffff8401310c <schedContext_donate+0x4a>
    0x840130fa    0x38    sd s1,24(s0)
    0x840130fc    0x3a    sd s0,368(s1)
    0x84013100    0x3e    ld ra,24(sp)          ; stack access
    0x84013102    0x40    ld s0,16(sp)          ; stack access
    0x84013104    0x42    ld s1,8(sp)           ; stack access
    0x84013106    0x44    ld s2,0(sp)           ; stack access
    0x84013108    0x46    addi sp,sp,32
    0x8401310a    0x48    ret
    0x8401310c    0x4a    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84013110    0x4e    j ffffffff840130fa <schedContext_donate+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_donate` has 51 nodes.

Section switchToThread (204 of 301)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 13 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x84012f4c     0x0    addi sp,sp,-16
    0x84012f4e     0x2    sd ra,8(sp)           ; stack access
    0x84012f50     0x4    sd s0,0(sp)           ; stack access
    0x84012f52     0x6    mv s0,a0
    0x84012f54     0x8    jal ra,ffffffff840109be <setVMRoot>
    0x84012f58     0xc    mv a0,s0
    0x84012f5a     0xe    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x84012f5e    0x12    auipc a5,0x1a
    0x84012f62    0x16    sd s0,250(a5) # ffffffff8402d058 <ksCurThread>
    0x84012f66    0x1a    ld ra,8(sp)           ; stack access
    0x84012f68    0x1c    ld s0,0(sp)           ; stack access
    0x84012f6a    0x1e    addi sp,sp,16
    0x84012f6c    0x20    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 21 nodes.

Section possibleSwitchTo (205 of 301)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 29 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x84012c6e     0x0    ld a5,368(a0)
    0x84012c72     0x4    beqz a5,ffffffff84012cc0 <possibleSwitchTo+0x52>
    0x84012c74     0x6    addi sp,sp,-16
    0x84012c76     0x8    sd ra,8(sp)           ; stack access
    0x84012c78     0xa    sd s0,0(sp)           ; stack access
    0x84012c7a     0xc    mv s0,a0
    0x84012c7c     0xe    ld a5,288(a0)
    0x84012c80    0x12    andi a5,a5,1
    0x84012c82    0x14    bnez a5,ffffffff84012cae <possibleSwitchTo+0x40>
    0x84012c84    0x16    ld a4,344(a0)
    0x84012c88    0x1a    auipc a5,0x1a
    0x84012c8c    0x1e    ld a5,912(a5) # ffffffff8402d018 <ksCurDomain>
    0x84012c90    0x22    bne a4,a5,ffffffff84012caa <possibleSwitchTo+0x3c>
    0x84012c94    0x26    auipc a5,0x1a
    0x84012c98    0x2a    ld a5,948(a5) # ffffffff8402d048 <ksSchedulerAction>
    0x84012c9c    0x2e    beqz a5,ffffffff84012cb6 <possibleSwitchTo+0x48>
    0x84012c9e    0x30    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84012ca2    0x34    mv a0,s0
    0x84012ca4    0x36    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84012ca8    0x3a    j ffffffff84012cae <possibleSwitchTo+0x40>
    0x84012caa    0x3c    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84012cae    0x40    ld ra,8(sp)           ; stack access
    0x84012cb0    0x42    ld s0,0(sp)           ; stack access
    0x84012cb2    0x44    addi sp,sp,16
    0x84012cb4    0x46    ret
    0x84012cb6    0x48    auipc a5,0x1a
    0x84012cba    0x4c    sd a0,914(a5) # ffffffff8402d048 <ksSchedulerAction>
    0x84012cbe    0x50    j ffffffff84012cae <possibleSwitchTo+0x40>
    0x84012cc0    0x52    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
29 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 52 nodes.

Section maskCapRights (206 of 301)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 104 instructions.
Switch found.


Stack analysis
---------------

17 stack accesses found. Annotated code for `maskCapRights`:

    0x840124a2      0x0    addi sp,sp,-48
    0x840124a4      0x2    sd ra,40(sp)          ; stack access
    0x840124a6      0x4    sd a1,0(sp)           ; stack access
    0x840124a8      0x6    sd a2,8(sp)           ; stack access
    0x840124aa      0x8    srli a5,a1,0x3b
    0x840124ae      0xc    andi a4,a5,1
    0x840124b2     0x10    bnez a4,ffffffff840124ce <maskCapRights+0x2c>
    0x840124b4     0x12    ld a4,8(sp)           ; stack access
    0x840124b6     0x14    li a3,24
    0x840124b8     0x16    bltu a3,a5,ffffffff840125ac <maskCapRights+0x10a>
    0x840124bc     0x1a    slli a5,a5,0x2
    0x840124be     0x1c    auipc a3,0x7
    0x840124c2     0x20    addi a3,a3,1918 # ffffffff84019c3c <msgRegisters+0x1f4>
    0x840124c6     0x24    add a5,a5,a3
    0x840124c8     0x26    lw a5,0(a5)
    0x840124ca     0x28    add a5,a5,a3
    0x840124cc     0x2a    jr a5
    0x840124ce     0x2c    jal ra,ffffffff84010cf4 <Arch_maskCapRights>
    0x840124d2     0x30    sd a0,16(sp)          ; stack access
    0x840124d4     0x32    sd a1,24(sp)          ; stack access
    0x840124d6     0x34    ld a0,16(sp)          ; stack access
    0x840124d8     0x36    ld a1,24(sp)          ; stack access
    0x840124da     0x38    ld ra,40(sp)          ; stack access
    0x840124dc     0x3a    addi sp,sp,48
    0x840124de     0x3c    ret
    0x840124e0     0x3e    sd a1,16(sp)          ; stack access
    0x840124e2     0x40    sd a4,24(sp)          ; stack access
    0x840124e4     0x42    j ffffffff840124d6 <maskCapRights+0x34>
    0x840124e6     0x44    srli a5,a1,0x37
    0x840124ea     0x48    and a5,a5,a0
    0x840124ec     0x4a    li a3,1
    0x840124ee     0x4c    and a5,a5,a3
    0x840124f0     0x4e    slli a5,a5,0x37
    0x840124f2     0x50    li a2,-1
    0x840124f4     0x52    slli a6,a2,0x37
    0x840124f8     0x56    addi a6,a6,-1
    0x840124fa     0x58    and a6,a1,a6
    0x840124fe     0x5c    or a5,a5,a6
    0x84012502     0x60    slli a6,a2,0x38
    0x84012506     0x64    addi a6,a6,-1
    0x84012508     0x66    and a5,a5,a6
    0x8401250c     0x6a    srli a6,a0,0x1
    0x84012510     0x6e    srli a7,a1,0x38
    0x84012514     0x72    and a6,a6,a7
    0x84012518     0x76    and a6,a3,a6
    0x8401251c     0x7a    slli a6,a6,0x38
    0x8401251e     0x7c    or a5,a5,a6
    0x84012522     0x80    slli a6,a2,0x39
    0x84012526     0x84    addi a6,a6,-1
    0x84012528     0x86    and a5,a5,a6
    0x8401252c     0x8a    srli a6,a0,0x2
    0x84012530     0x8e    srli a7,a1,0x39
    0x84012534     0x92    and a6,a6,a7
    0x84012538     0x96    and a6,a3,a6
    0x8401253c     0x9a    slli a6,a6,0x39
    0x8401253e     0x9c    or a5,a5,a6
    0x84012542     0xa0    slli a2,a2,0x3a
    0x84012544     0xa2    addi a2,a2,-1
    0x84012546     0xa4    and a5,a5,a2
    0x84012548     0xa6    srli a0,a0,0x3
    0x8401254a     0xa8    srli a1,a1,0x3a
    0x8401254c     0xaa    and a1,a1,a0
    0x8401254e     0xac    and a3,a3,a1
    0x84012550     0xae    slli a3,a3,0x3a
    0x84012552     0xb0    or a5,a5,a3
    0x84012554     0xb2    sd a5,16(sp)          ; stack access
    0x84012556     0xb4    sd a4,24(sp)          ; stack access
    0x84012558     0xb6    j ffffffff840124d6 <maskCapRights+0x34>
    0x8401255a     0xb8    srli a5,a1,0x39
    0x8401255e     0xbc    and a5,a5,a0
    0x84012560     0xbe    li a3,1
    0x84012562     0xc0    and a5,a5,a3
    0x84012564     0xc2    slli a5,a5,0x39
    0x84012566     0xc4    li a2,-1
    0x84012568     0xc6    slli a6,a2,0x39
    0x8401256c     0xca    addi a6,a6,-1
    0x8401256e     0xcc    and a6,a1,a6
    0x84012572     0xd0    or a5,a5,a6
    0x84012576     0xd4    slli a2,a2,0x3a
    0x84012578     0xd6    addi a2,a2,-1
    0x8401257a     0xd8    and a5,a5,a2
    0x8401257c     0xda    srli a0,a0,0x1
    0x8401257e     0xdc    srli a1,a1,0x3a
    0x84012580     0xde    and a1,a1,a0
    0x84012582     0xe0    and a3,a3,a1
    0x84012584     0xe2    slli a3,a3,0x3a
    0x84012586     0xe4    or a5,a5,a3
    0x84012588     0xe6    sd a5,16(sp)          ; stack access
    0x8401258a     0xe8    sd a4,24(sp)          ; stack access
    0x8401258c     0xea    j ffffffff840124d6 <maskCapRights+0x34>
    0x8401258e     0xec    srli a5,a0,0x2
    0x84012592     0xf0    srli a0,a1,0x3a
    0x84012596     0xf4    and a5,a5,a0
    0x84012598     0xf6    andi a5,a5,1
    0x8401259a     0xf8    slli a5,a5,0x3a
    0x8401259c     0xfa    li a3,-1
    0x8401259e     0xfc    slli a3,a3,0x3a
    0x840125a0     0xfe    addi a3,a3,-1
    0x840125a2    0x100    and a1,a1,a3
    0x840125a4    0x102    or a1,a1,a5
    0x840125a6    0x104    sd a1,16(sp)          ; stack access
    0x840125a8    0x106    sd a4,24(sp)          ; stack access
    0x840125aa    0x108    j ffffffff840124d6 <maskCapRights+0x34>
    0x840125ac    0x10a    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
98 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 195 nodes.

Section sameObjectAs (207 of 301)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 37 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `sameObjectAs`:

    0x8401232a     0x0    addi sp,sp,-48
    0x8401232c     0x2    sd ra,40(sp)          ; stack access
    0x8401232e     0x4    sd a0,16(sp)          ; stack access
    0x84012330     0x6    sd a1,24(sp)          ; stack access
    0x84012332     0x8    sd a2,0(sp)           ; stack access
    0x84012334     0xa    sd a3,8(sp)           ; stack access
    0x84012336     0xc    srli a0,a0,0x3b
    0x84012338     0xe    li a5,2
    0x8401233a    0x10    beq a0,a5,ffffffff8401237e <sameObjectAs+0x54>
    0x8401233e    0x14    li a4,14
    0x84012340    0x16    beq a0,a4,ffffffff84012362 <sameObjectAs+0x38>
    0x84012344    0x1a    andi a0,a0,1
    0x84012346    0x1c    beqz a0,ffffffff84012350 <sameObjectAs+0x26>
    0x84012348    0x1e    srli a5,a2,0x3b
    0x8401234c    0x22    andi a5,a5,1
    0x8401234e    0x24    bnez a5,ffffffff84012370 <sameObjectAs+0x46>
    0x84012350    0x26    ld a2,0(sp)           ; stack access
    0x84012352    0x28    ld a3,8(sp)           ; stack access
    0x84012354    0x2a    ld a0,16(sp)          ; stack access
    0x84012356    0x2c    ld a1,24(sp)          ; stack access
    0x84012358    0x2e    jal ra,ffffffff84011e80 <sameRegionAs>
    0x8401235c    0x32    ld ra,40(sp)          ; stack access
    0x8401235e    0x34    addi sp,sp,48
    0x84012360    0x36    ret
    0x84012362    0x38    srli a5,a2,0x3b
    0x84012366    0x3c    li a4,16
    0x84012368    0x3e    li a0,0
    0x8401236a    0x40    bne a5,a4,ffffffff84012350 <sameObjectAs+0x26>
    0x8401236e    0x44    j ffffffff8401235c <sameObjectAs+0x32>
    0x84012370    0x46    ld a2,0(sp)           ; stack access
    0x84012372    0x48    ld a3,8(sp)           ; stack access
    0x84012374    0x4a    ld a0,16(sp)          ; stack access
    0x84012376    0x4c    ld a1,24(sp)          ; stack access
    0x84012378    0x4e    jal ra,ffffffff84010fae <Arch_sameObjectAs>
    0x8401237c    0x52    j ffffffff8401235c <sameObjectAs+0x32>
    0x8401237e    0x54    li a0,0
    0x84012380    0x56    j ffffffff8401235c <sameObjectAs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 64 nodes.

Section deriveCap (208 of 301)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 45 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `deriveCap`:

    0x840122be     0x0    addi sp,sp,-64
    0x840122c0     0x2    sd ra,56(sp)          ; stack access
    0x840122c2     0x4    sd s0,48(sp)          ; stack access
    0x840122c4     0x6    sd s1,40(sp)          ; stack access
    0x840122c6     0x8    sd s2,32(sp)          ; stack access
    0x840122c8     0xa    sd s3,24(sp)          ; stack access
    0x840122ca     0xc    mv s0,a0
    0x840122cc     0xe    sd a2,0(sp)           ; stack access
    0x840122ce    0x10    sd a3,8(sp)           ; stack access
    0x840122d0    0x12    mv s1,a2
    0x840122d2    0x14    srli a5,a2,0x3b
    0x840122d6    0x18    andi s2,a5,1
    0x840122da    0x1c    bnez s2,ffffffff84012308 <deriveCap+0x4a>
    0x840122de    0x20    ld s3,8(sp)           ; stack access
    0x840122e0    0x22    addi a4,a5,-14
    0x840122e4    0x26    andi a4,a4,-5
    0x840122e6    0x28    beqz a4,ffffffff8401231a <deriveCap+0x5c>
    0x840122e8    0x2a    li a4,2
    0x840122ea    0x2c    beq a5,a4,ffffffff8401230e <deriveCap+0x50>
    0x840122ee    0x30    sd s2,0(s0)           ; stack access
    0x840122f2    0x34    sd s1,8(s0)           ; stack access
    0x840122f4    0x36    sd s3,16(s0)          ; stack access
    0x840122f8    0x3a    mv a0,s0
    0x840122fa    0x3c    ld ra,56(sp)          ; stack access
    0x840122fc    0x3e    ld s0,48(sp)          ; stack access
    0x840122fe    0x40    ld s1,40(sp)          ; stack access
    0x84012300    0x42    ld s2,32(sp)          ; stack access
    0x84012302    0x44    ld s3,24(sp)          ; stack access
    0x84012304    0x46    addi sp,sp,64
    0x84012306    0x48    ret
    0x84012308    0x4a    jal ra,ffffffff84010c86 <Arch_deriveCap>
    0x8401230c    0x4e    j ffffffff840122f8 <deriveCap+0x3a>
    0x8401230e    0x50    mv a0,a1
    0x84012310    0x52    jal ra,ffffffff84012280 <ensureNoChildren>
    0x84012314    0x56    bnez a0,ffffffff84012322 <deriveCap+0x64>
    0x84012316    0x58    mv s2,a0
    0x84012318    0x5a    j ffffffff840122ee <deriveCap+0x30>
    0x8401231a    0x5c    mv s3,a4
    0x8401231c    0x5e    mv s1,a4
    0x8401231e    0x60    mv s2,a4
    0x84012320    0x62    j ffffffff840122ee <deriveCap+0x30>
    0x84012322    0x64    mv s3,s2
    0x84012324    0x66    mv s1,s2
    0x84012326    0x68    mv s2,a0
    0x84012328    0x6a    j ffffffff840122ee <deriveCap+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 72 nodes.

Section getObjectSize (209 of 301)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 32 instructions.
Switch found.


Stack analysis
---------------

2 stack accesses found. Annotated code for `getObjectSize`:

    0x84011dfe     0x0    addi sp,sp,-16
    0x84011e00     0x2    sd ra,8(sp)           ; stack access
    0x84011e02     0x4    li a5,6
    0x84011e04     0x6    bltu a5,a0,ffffffff84011e22 <getObjectSize+0x24>
    0x84011e08     0xa    li a5,6
    0x84011e0a     0xc    bltu a5,a0,ffffffff84011e42 <getObjectSize+0x44>
    0x84011e0e    0x10    slli a0,a0,0x2
    0x84011e10    0x12    auipc a4,0x8
    0x84011e14    0x16    addi a4,a4,-796 # ffffffff84019af4 <msgRegisters+0xac>
    0x84011e18    0x1a    add a5,a0,a4
    0x84011e1c    0x1e    lw a5,0(a5)
    0x84011e1e    0x20    add a5,a5,a4
    0x84011e20    0x22    jr a5
    0x84011e22    0x24    jal ra,ffffffff8401104e <Arch_getObjectSize>
    0x84011e26    0x28    ld ra,8(sp)           ; stack access
    0x84011e28    0x2a    addi sp,sp,16
    0x84011e2a    0x2c    ret
    0x84011e2c    0x2e    li a0,4
    0x84011e2e    0x30    j ffffffff84011e26 <getObjectSize+0x28>
    0x84011e30    0x32    addi a0,a1,5 # fffffffff8000005 <ki_end+0x73fce005>
    0x84011e34    0x36    j ffffffff84011e26 <getObjectSize+0x28>
    0x84011e36    0x38    mv a0,a1
    0x84011e38    0x3a    j ffffffff84011e26 <getObjectSize+0x28>
    0x84011e3a    0x3c    mv a0,a1
    0x84011e3c    0x3e    j ffffffff84011e26 <getObjectSize+0x28>
    0x84011e3e    0x40    li a0,5
    0x84011e40    0x42    j ffffffff84011e26 <getObjectSize+0x28>
    0x84011e42    0x44    jal ra,ffffffff84010490 <halt>
    0x84011e46    0x48    li a0,10
    0x84011e48    0x4a    j ffffffff84011e26 <getObjectSize+0x28>
    0x84011e4a    0x4c    li a0,6
    0x84011e4c    0x4e    j ffffffff84011e26 <getObjectSize+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 54 nodes.

Section invokeIRQControl (210 of 301)
=====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 25 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `invokeIRQControl`:

    0x84011ce2     0x0    addi sp,sp,-48
    0x84011ce4     0x2    sd ra,40(sp)          ; stack access
    0x84011ce6     0x4    sd s0,32(sp)          ; stack access
    0x84011ce8     0x6    sd s1,24(sp)          ; stack access
    0x84011cea     0x8    sd s2,16(sp)          ; stack access
    0x84011cec     0xa    mv s0,a0
    0x84011cee     0xc    mv s2,a1
    0x84011cf0     0xe    mv s1,a2
    0x84011cf2    0x10    mv a1,a0
    0x84011cf4    0x12    li a0,1
    0x84011cf6    0x14    jal ra,ffffffff84011c7a <setIRQState>
    0x84011cfa    0x18    slli s0,s0,0x34
    0x84011cfc    0x1a    mv a3,s2
    0x84011cfe    0x1c    mv a2,s1
    0x84011d00    0x1e    li a0,-1
    0x84011d02    0x20    slli a0,a0,0x3f
    0x84011d04    0x22    srli a1,s0,0x34
    0x84011d08    0x26    jal ra,ffffffff840118d4 <cteInsert>
    0x84011d0c    0x2a    li a0,0
    0x84011d0e    0x2c    ld ra,40(sp)          ; stack access
    0x84011d10    0x2e    ld s0,32(sp)          ; stack access
    0x84011d12    0x30    ld s1,24(sp)          ; stack access
    0x84011d14    0x32    ld s2,16(sp)          ; stack access
    0x84011d16    0x34    addi sp,sp,48
    0x84011d18    0x36    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 36 nodes.

Section getReceiveSlots (211 of 301)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 38 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

13 stack accesses found. Annotated code for `getReceiveSlots`:

    0x84011bde     0x0    beqz a1,ffffffff84011c32 <getReceiveSlots+0x54>
    0x84011be0     0x2    addi sp,sp,-96
    0x84011be2     0x4    sd ra,88(sp)          ; stack access
    0x84011be4     0x6    sd s0,80(sp)          ; stack access
    0x84011be6     0x8    sd s1,72(sp)          ; stack access
    0x84011be8     0xa    ld s0,1008(a1) # fffffffff80003f0 <ki_end+0x73fce3f0>
    0x84011bec     0xe    ld s1,1016(a1)
    0x84011bf0    0x12    ld a2,1000(a1)
    0x84011bf4    0x16    mv a1,a0
    0x84011bf6    0x18    addi a0,sp,40
    0x84011bf8    0x1a    jal ra,ffffffff84011270 <lookupCap>
    0x84011bfc    0x1e    ld a5,40(sp)          ; stack access
    0x84011bfe    0x20    li a0,0
    0x84011c00    0x22    bnez a5,ffffffff84011c28 <getReceiveSlots+0x4a>
    0x84011c02    0x24    ld a0,48(sp)          ; stack access
    0x84011c04    0x26    sd a0,8(sp)           ; stack access
    0x84011c06    0x28    ld a1,56(sp)          ; stack access
    0x84011c08    0x2a    sd a1,16(sp)          ; stack access
    0x84011c0a    0x2c    mv a3,s1
    0x84011c0c    0x2e    mv a2,s0
    0x84011c0e    0x30    jal ra,ffffffff840113d2 <lookupTargetSlot>
    0x84011c12    0x34    sd a0,24(sp)          ; stack access
    0x84011c14    0x36    sd a1,32(sp)          ; stack access
    0x84011c16    0x38    bnez a0,ffffffff84011c36 <getReceiveSlots+0x58>
    0x84011c18    0x3a    ld a5,0(a1)
    0x84011c1a    0x3c    srli a5,a5,0x3b
    0x84011c1c    0x3e    seqz a5,a5
    0x84011c20    0x42    neg a5,a5
    0x84011c24    0x46    and a0,a1,a5
    0x84011c28    0x4a    ld ra,88(sp)          ; stack access
    0x84011c2a    0x4c    ld s0,80(sp)          ; stack access
    0x84011c2c    0x4e    ld s1,72(sp)          ; stack access
    0x84011c2e    0x50    addi sp,sp,96
    0x84011c30    0x52    ret
    0x84011c32    0x54    mv a0,a1
    0x84011c34    0x56    ret
    0x84011c36    0x58    li a0,0
    0x84011c38    0x5a    j ffffffff84011c28 <getReceiveSlots+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 65 nodes.

Section invokeCNodeRotate (212 of 301)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 32 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x84011b04     0x0    addi sp,sp,-64
    0x84011b06     0x2    sd ra,56(sp)          ; stack access
    0x84011b08     0x4    sd s0,48(sp)          ; stack access
    0x84011b0a     0x6    sd s1,40(sp)          ; stack access
    0x84011b0c     0x8    sd a0,16(sp)          ; stack access
    0x84011b0e     0xa    sd a1,24(sp)          ; stack access
    0x84011b10     0xc    sd a2,0(sp)           ; stack access
    0x84011b12     0xe    sd a3,8(sp)           ; stack access
    0x84011b14    0x10    mv s0,a4
    0x84011b16    0x12    mv s1,a5
    0x84011b18    0x14    beq a4,a6,ffffffff84011b40 <invokeCNodeRotate+0x3c>
    0x84011b1c    0x18    mv a3,a6
    0x84011b1e    0x1a    mv a2,a5
    0x84011b20    0x1c    ld a0,0(sp)           ; stack access
    0x84011b22    0x1e    ld a1,8(sp)           ; stack access
    0x84011b24    0x20    jal ra,ffffffff84011a10 <cteMove>
    0x84011b28    0x24    mv a3,s1
    0x84011b2a    0x26    mv a2,s0
    0x84011b2c    0x28    ld a0,16(sp)          ; stack access
    0x84011b2e    0x2a    ld a1,24(sp)          ; stack access
    0x84011b30    0x2c    jal ra,ffffffff84011a10 <cteMove>
    0x84011b34    0x30    li a0,0
    0x84011b36    0x32    ld ra,56(sp)          ; stack access
    0x84011b38    0x34    ld s0,48(sp)          ; stack access
    0x84011b3a    0x36    ld s1,40(sp)          ; stack access
    0x84011b3c    0x38    addi sp,sp,64
    0x84011b3e    0x3a    ret
    0x84011b40    0x3c    mv a3,a2
    0x84011b42    0x3e    ld a4,8(sp)           ; stack access
    0x84011b44    0x40    mv a2,s0
    0x84011b46    0x42    jal ra,ffffffff84011a78 <cteSwap>
    0x84011b4a    0x46    j ffffffff84011b34 <invokeCNodeRotate+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 53 nodes.

Section handleFaultReply (213 of 301)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 173 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `handleFaultReply`:

    0x840105d2      0x0    addi sp,sp,-48
    0x840105d4      0x2    sd ra,40(sp)          ; stack access
    0x840105d6      0x4    sd s0,32(sp)          ; stack access
    0x840105d8      0x6    sd s1,24(sp)          ; stack access
    0x840105da      0x8    sd s2,16(sp)          ; stack access
    0x840105dc      0xa    sd s3,8(sp)           ; stack access
    0x840105de      0xc    mv s0,a0
    0x840105e0      0xe    ld a4,80(a1)
    0x840105e2     0x10    andi a3,a4,127
    0x840105e6     0x14    li a5,120
    0x840105ea     0x18    bgeu a5,a3,ffffffff840105f6 <handleFaultReply+0x24>
    0x840105ee     0x1c    andi a4,a4,-128
    0x840105f2     0x20    ori a4,a4,120
    0x840105f6     0x24    srli s1,a4,0xc
    0x840105fa     0x28    andi a3,a4,127
    0x840105fe     0x2c    ld a5,312(s0)
    0x84010602     0x30    andi a0,a5,15
    0x84010606     0x34    li a2,3
    0x84010608     0x36    beq a0,a2,ffffffff84010742 <handleFaultReply+0x170>
    0x8401060c     0x3a    andi a5,a5,12
    0x8401060e     0x3c    bnez a5,ffffffff840106b0 <handleFaultReply+0xde>
    0x84010610     0x3e    li a4,1
    0x84010612     0x40    beq a0,a4,ffffffff840106a2 <handleFaultReply+0xd0>
    0x84010616     0x44    li a4,2
    0x84010618     0x46    bne a0,a4,ffffffff840107ae <handleFaultReply+0x1dc>
    0x8401061c     0x4a    mv s2,a3
    0x8401061e     0x4c    li a4,10
    0x84010620     0x4e    bgeu a4,a3,ffffffff84010626 <handleFaultReply+0x54>
    0x84010624     0x52    li s2,10
    0x84010626     0x54    mv a7,s2
    0x84010628     0x56    li a4,4
    0x8401062a     0x58    bgeu a4,s2,ffffffff84010630 <handleFaultReply+0x5e>
    0x8401062e     0x5c    li a7,4
    0x84010630     0x5e    beqz a3,ffffffff8401069e <handleFaultReply+0xcc>
    0x84010632     0x60    auipc a0,0xa
    0x84010636     0x64    addi a0,a0,-1946 # ffffffff84019e98 <fault_messages>
    0x8401063a     0x68    auipc a2,0x9
    0x8401063e     0x6c    addi a2,a2,1038 # ffffffff84019a48 <msgRegisters>
    0x84010642     0x70    lbu a4,0(a2)
    0x84010646     0x74    slli a4,a4,0x3
    0x84010648     0x76    add a4,a4,a1
    0x8401064a     0x78    ld a6,0(a4)
    0x8401064e     0x7c    lbu a4,0(a0)
    0x84010652     0x80    slli a4,a4,0x3
    0x84010654     0x82    add a4,a4,s0
    0x84010656     0x84    sd a6,0(a4)
    0x8401065a     0x88    addi a5,a5,1
    0x8401065c     0x8a    addi a0,a0,1
    0x8401065e     0x8c    addi a2,a2,1
    0x84010660     0x8e    bltu a5,a7,ffffffff84010642 <handleFaultReply+0x70>
    0x84010664     0x92    li s3,1
    0x84010666     0x94    beqz a3,ffffffff8401066a <handleFaultReply+0x98>
    0x84010668     0x96    mv s3,a7
    0x8401066a     0x98    bgeu s3,s2,ffffffff8401069e <handleFaultReply+0xcc>
    0x8401066e     0x9c    li a0,0
    0x84010670     0x9e    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84010674     0xa2    beqz a0,ffffffff8401069e <handleFaultReply+0xcc>
    0x84010676     0xa4    auipc a3,0xa
    0x8401067a     0xa8    addi a3,a3,-2014 # ffffffff84019e98 <fault_messages>
    0x8401067e     0xac    add a3,a3,s3
    0x84010680     0xae    slli a4,s3,0x3
    0x84010684     0xb2    add a4,a4,a0
    0x84010686     0xb4    slli s2,s2,0x3
    0x84010688     0xb6    add s2,s2,a0
    0x8401068a     0xb8    ld a2,8(a4)
    0x8401068c     0xba    lbu a5,0(a3)
    0x84010690     0xbe    slli a5,a5,0x3
    0x84010692     0xc0    add a5,a5,s0
    0x84010694     0xc2    sd a2,0(a5)
    0x84010696     0xc4    addi a3,a3,1
    0x84010698     0xc6    addi a4,a4,8
    0x8401069a     0xc8    bne s2,a4,ffffffff8401068a <handleFaultReply+0xb8>
    0x8401069e     0xcc    seqz a0,s1
    0x840106a2     0xd0    ld ra,40(sp)          ; stack access
    0x840106a4     0xd2    ld s0,32(sp)          ; stack access
    0x840106a6     0xd4    ld s1,24(sp)          ; stack access
    0x840106a8     0xd6    ld s2,16(sp)          ; stack access
    0x840106aa     0xd8    ld s3,8(sp)           ; stack access
    0x840106ac     0xda    addi sp,sp,48
    0x840106ae     0xdc    ret
    0x840106b0     0xde    li a5,5
    0x840106b2     0xe0    bne a0,a5,ffffffff840107a4 <handleFaultReply+0x1d2>
    0x840106b6     0xe4    mv s2,a3
    0x840106b8     0xe6    li a5,32
    0x840106bc     0xea    bgeu a5,a3,ffffffff840106c4 <handleFaultReply+0xf2>
    0x840106c0     0xee    li s2,32
    0x840106c4     0xf2    mv a6,s2
    0x840106c6     0xf4    li a5,4
    0x840106c8     0xf6    bgeu a5,s2,ffffffff840106ce <handleFaultReply+0xfc>
    0x840106cc     0xfa    li a6,4
    0x840106ce     0xfc    beqz a3,ffffffff8401073c <handleFaultReply+0x16a>
    0x840106d0     0xfe    auipc a2,0x9
    0x840106d4    0x102    addi a2,a2,888 # ffffffff84019a48 <msgRegisters>
    0x840106d8    0x106    li a4,0
    0x840106da    0x108    auipc a7,0x9
    0x840106de    0x10c    addi a7,a7,1982 # ffffffff84019e98 <fault_messages>
    0x840106e2    0x110    lbu a5,0(a2)
    0x840106e6    0x114    slli a5,a5,0x3
    0x840106e8    0x116    add a5,a5,a1
    0x840106ea    0x118    ld a0,0(a5)
    0x840106ec    0x11a    add a5,a7,a4
    0x840106f0    0x11e    lbu a5,64(a5)
    0x840106f4    0x122    slli a5,a5,0x3
    0x840106f6    0x124    add a5,a5,s0
    0x840106f8    0x126    sd a0,0(a5)
    0x840106fa    0x128    addi a4,a4,1
    0x840106fc    0x12a    addi a2,a2,1
    0x840106fe    0x12c    bltu a4,a6,ffffffff840106e2 <handleFaultReply+0x110>
    0x84010702    0x130    li s3,1
    0x84010704    0x132    beqz a3,ffffffff84010708 <handleFaultReply+0x136>
    0x84010706    0x134    mv s3,a6
    0x84010708    0x136    bgeu s3,s2,ffffffff8401073c <handleFaultReply+0x16a>
    0x8401070c    0x13a    li a0,0
    0x8401070e    0x13c    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84010712    0x140    beqz a0,ffffffff8401073c <handleFaultReply+0x16a>
    0x84010714    0x142    auipc a3,0x9
    0x84010718    0x146    addi a3,a3,1924 # ffffffff84019e98 <fault_messages>
    0x8401071c    0x14a    add a3,a3,s3
    0x8401071e    0x14c    slli a4,s3,0x3
    0x84010722    0x150    add a4,a4,a0
    0x84010724    0x152    slli s2,s2,0x3
    0x84010726    0x154    add s2,s2,a0
    0x84010728    0x156    ld a2,8(a4)
    0x8401072a    0x158    lbu a5,64(a3)
    0x8401072e    0x15c    slli a5,a5,0x3
    0x84010730    0x15e    add a5,a5,s0
    0x84010732    0x160    sd a2,0(a5)
    0x84010734    0x162    addi a3,a3,1
    0x84010736    0x164    addi a4,a4,8
    0x84010738    0x166    bne a4,s2,ffffffff84010728 <handleFaultReply+0x156>
    0x8401073c    0x16a    seqz a0,s1
    0x84010740    0x16e    j ffffffff840106a2 <handleFaultReply+0xd0>
    0x84010742    0x170    mv s3,a3
    0x84010744    0x172    li a5,2
    0x84010746    0x174    bgeu a5,a3,ffffffff8401074c <handleFaultReply+0x17a>
    0x8401074a    0x178    li s3,2
    0x8401074c    0x17a    mv a2,s3
    0x8401074e    0x17c    li a5,4
    0x84010750    0x17e    bgeu a5,s3,ffffffff84010756 <handleFaultReply+0x184>
    0x84010754    0x182    li a2,4
    0x84010756    0x184    beqz a3,ffffffff8401079e <handleFaultReply+0x1cc>
    0x84010758    0x186    ld a5,88(a1)
    0x8401075a    0x188    sd a5,264(s0)
    0x8401075e    0x18c    andi a4,a4,126
    0x84010762    0x190    beqz a4,ffffffff84010768 <handleFaultReply+0x196>
    0x84010764    0x192    ld a5,96(a1)
    0x84010766    0x194    sd a5,8(s0)
    0x84010768    0x196    li s2,1
    0x8401076a    0x198    beqz a3,ffffffff8401076e <handleFaultReply+0x19c>
    0x8401076c    0x19a    mv s2,a2
    0x8401076e    0x19c    bgeu s2,s3,ffffffff8401079e <handleFaultReply+0x1cc>
    0x84010772    0x1a0    li a0,0
    0x84010774    0x1a2    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84010778    0x1a6    beqz a0,ffffffff8401079e <handleFaultReply+0x1cc>
    0x8401077a    0x1a8    auipc a2,0x9
    0x8401077e    0x1ac    addi a2,a2,1822 # ffffffff84019e98 <fault_messages>
    0x84010782    0x1b0    add a3,a2,s2
    0x84010786    0x1b4    addi s2,s2,1
    0x84010788    0x1b6    slli a5,s2,0x3
    0x8401078c    0x1ba    add a5,a5,a0
    0x8401078e    0x1bc    ld a4,0(a5)
    0x84010790    0x1be    lbu a5,32(a3)
    0x84010794    0x1c2    slli a5,a5,0x3
    0x84010796    0x1c4    add a5,a5,s0
    0x84010798    0x1c6    sd a4,0(a5)
    0x8401079a    0x1c8    bne s3,s2,ffffffff84010782 <handleFaultReply+0x1b0>
    0x8401079e    0x1cc    seqz a0,s1
    0x840107a2    0x1d0    j ffffffff840106a2 <handleFaultReply+0xd0>
    0x840107a4    0x1d2    li a5,6
    0x840107a6    0x1d4    bne a0,a5,ffffffff840107ae <handleFaultReply+0x1dc>
    0x840107aa    0x1d8    li a0,1
    0x840107ac    0x1da    j ffffffff840106a2 <handleFaultReply+0xd0>
    0x840107ae    0x1dc    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
173 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 273 nodes.

Section Arch_setMRs_fault (214 of 301)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 42 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x840104ae     0x0    addi sp,sp,-32
    0x840104b0     0x2    sd ra,24(sp)          ; stack access
    0x840104b2     0x4    sd s0,16(sp)          ; stack access
    0x840104b4     0x6    sd s1,8(sp)           ; stack access
    0x840104b6     0x8    sd s2,0(sp)           ; stack access
    0x840104b8     0xa    li a5,6
    0x840104ba     0xc    bne a3,a5,ffffffff84010514 <Arch_setMRs_fault+0x66>
    0x840104be    0x10    mv s2,a0
    0x840104c0    0x12    mv s0,a1
    0x840104c2    0x14    mv s1,a2
    0x840104c4    0x16    ld a3,264(a0)
    0x840104c8    0x1a    li a2,0
    0x840104ca    0x1c    mv a1,s1
    0x840104cc    0x1e    mv a0,s0
    0x840104ce    0x20    jal ra,ffffffff840100ea <setMR>
    0x840104d2    0x24    ld a3,320(s2)
    0x840104d6    0x28    li a2,1
    0x840104d8    0x2a    mv a1,s1
    0x840104da    0x2c    mv a0,s0
    0x840104dc    0x2e    jal ra,ffffffff840100ea <setMR>
    0x840104e0    0x32    ld a3,312(s2)
    0x840104e4    0x36    srli a3,a3,0x13
    0x840104e6    0x38    andi a3,a3,1
    0x840104e8    0x3a    li a2,2
    0x840104ea    0x3c    mv a1,s1
    0x840104ec    0x3e    mv a0,s0
    0x840104ee    0x40    jal ra,ffffffff840100ea <setMR>
    0x840104f2    0x44    ld a3,312(s2)
    0x840104f6    0x48    srliw a3,a3,0x1b
    0x840104fa    0x4c    li a2,3
    0x840104fc    0x4e    mv a1,s1
    0x840104fe    0x50    mv a0,s0
    0x84010500    0x52    jal ra,ffffffff840100ea <setMR>
    0x84010504    0x56    slli a0,a0,0x20
    0x84010506    0x58    srli a0,a0,0x20
    0x84010508    0x5a    ld ra,24(sp)          ; stack access
    0x8401050a    0x5c    ld s0,16(sp)          ; stack access
    0x8401050c    0x5e    ld s1,8(sp)           ; stack access
    0x8401050e    0x60    ld s2,0(sp)           ; stack access
    0x84010510    0x62    addi sp,sp,32
    0x84010512    0x64    ret
    0x84010514    0x66    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 62 nodes.

Section trap_entry (215 of 301)
===============================

Deriving specifications
-----------------------

Section `trap_entry` consists of 45 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc


Stack analysis
---------------

No stack accesses found. Code for `trap_entry`:

    0x84010000     0x0    csrrw t0,sscratch,t0
    0x84010004     0x4    sd ra,0(t0)
    0x84010008     0x8    sd sp,8(t0)
    0x8401000c     0xc    sd gp,16(t0)
    0x84010010    0x10    sd tp,24(t0)
    0x84010014    0x14    sd t1,40(t0)
    0x84010018    0x18    sd t2,48(t0)
    0x8401001c    0x1c    sd s0,56(t0)
    0x84010020    0x20    sd s1,64(t0)
    0x84010024    0x24    sd a0,72(t0)
    0x84010028    0x28    sd a1,80(t0)
    0x8401002c    0x2c    sd a2,88(t0)
    0x84010030    0x30    sd a3,96(t0)
    0x84010034    0x34    sd a4,104(t0)
    0x84010038    0x38    sd a5,112(t0)
    0x8401003c    0x3c    sd a6,120(t0)
    0x84010040    0x40    sd a7,128(t0)
    0x84010044    0x44    sd s2,136(t0)
    0x84010048    0x48    sd s3,144(t0)
    0x8401004c    0x4c    sd s4,152(t0)
    0x84010050    0x50    sd s5,160(t0)
    0x84010054    0x54    sd s6,168(t0)
    0x84010058    0x58    sd s7,176(t0)
    0x8401005c    0x5c    sd s8,184(t0)
    0x84010060    0x60    sd s9,192(t0)
    0x84010064    0x64    sd s10,200(t0)
    0x84010068    0x68    sd s11,208(t0)
    0x8401006c    0x6c    sd t3,216(t0)
    0x84010070    0x70    sd t4,224(t0)
    0x84010074    0x74    sd t5,232(t0)
    0x84010078    0x78    sd t6,240(t0)
    0x8401007c    0x7c    csrr ra,sscratch
    0x84010080    0x80    sd ra,32(t0)
    0x84010084    0x84    csrr ra,sstatus
    0x84010088    0x88    sd ra,256(t0)
    0x8401008c    0x8c    csrr s0,scause
    0x84010090    0x90    sd s0,248(t0)
    0x84010094    0x94    mv gp,gp
    0x84010098    0x98    auipc sp,0x1d
    0x8401009c    0x9c    addi sp,sp,-152 # ffffffff8402d000 <tlbLockCount>
    0x840100a0    0xa0    csrr ra,sepc
    0x840100a4    0xa4    sd ra,264(t0)
    0x840100a8    0xa8    bltz s0,ffffffff840100c4 <interrupt>
    0x840100ac    0xac    li s4,8
    0x840100ae    0xae    bne s0,s4,ffffffff840100bc <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
Graph spec failed in trap_entry for pos 0x840100a8.
<<HOL message: inventing new type variable names: 'a>>
Graph spec failed in trap_entry for pos 0x840100ae.
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `trap_entry` has 82 nodes.

Section populate_bi_frame (216 of 301)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 55 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `populate_bi_frame`:

    0x84000e76     0x0    addi sp,sp,-48
    0x84000e78     0x2    sd ra,40(sp)          ; stack access
    0x84000e7a     0x4    sd s0,32(sp)          ; stack access
    0x84000e7c     0x6    sd s1,24(sp)          ; stack access
    0x84000e7e     0x8    sd s2,16(sp)          ; stack access
    0x84000e80     0xa    sd s3,8(sp)           ; stack access
    0x84000e82     0xc    mv s3,a0
    0x84000e84     0xe    mv s2,a1
    0x84000e86    0x10    mv s1,a2
    0x84000e88    0x12    mv s0,a3
    0x84000e8a    0x14    lui a1,0x1
    0x84000e8c    0x16    auipc a0,0x1
    0x84000e90    0x1a    ld a0,-1468(a0) # ffffffff840018d0 <rootserver+0x20>
    0x84000e94    0x1e    jal ra,ffffffff84017ae8 <memzero>
    0x84000e98    0x22    bnez s0,ffffffff84000efc <populate_bi_frame+0x86>
    0x84000e9a    0x24    auipc a5,0x0
    0x84000e9e    0x28    addi a5,a5,1974 # ffffffff84001650 <ndks_boot>
    0x84000ea2    0x2c    ld a4,640(a5)
    0x84000ea6    0x30    sd a4,584(a5)
    0x84000eaa    0x34    li a3,13
    0x84000eac    0x36    sd a3,592(a5)
    0x84000eb0    0x3a    sd s3,8(a4)
    0x84000eb4    0x3e    ld a4,640(a5)
    0x84000eb8    0x42    sd s2,16(a4)
    0x84000ebc    0x46    ld a4,640(a5)
    0x84000ec0    0x4a    sd zero,24(a4)
    0x84000ec4    0x4e    ld a4,640(a5)
    0x84000ec8    0x52    sd s1,32(a4)
    0x84000eca    0x54    ld a5,640(a5)
    0x84000ece    0x58    li a4,19
    0x84000ed0    0x5a    sd a4,136(a5)
    0x84000ed2    0x5c    auipc a4,0x2c
    0x84000ed6    0x60    ld a4,310(a4) # ffffffff8402d008 <ksDomScheduleIdx>
    0x84000eda    0x64    slli a3,a4,0x4
    0x84000ede    0x68    auipc a4,0x19
    0x84000ee2    0x6c    addi a4,a4,-70 # ffffffff84019e98 <fault_messages>
    0x84000ee6    0x70    add a4,a4,a3
    0x84000ee8    0x72    ld a4,96(a4)
    0x84000eea    0x74    sd a4,144(a5)
    0x84000eec    0x76    sd s0,0(a5)
    0x84000eee    0x78    ld ra,40(sp)          ; stack access
    0x84000ef0    0x7a    ld s0,32(sp)          ; stack access
    0x84000ef2    0x7c    ld s1,24(sp)          ; stack access
    0x84000ef4    0x7e    ld s2,16(sp)          ; stack access
    0x84000ef6    0x80    ld s3,8(sp)           ; stack access
    0x84000ef8    0x82    addi sp,sp,48
    0x84000efa    0x84    ret
    0x84000efc    0x86    mv a0,s0
    0x84000efe    0x88    jal ra,ffffffff8400063a <calculate_extra_bi_size_bits>
    0x84000f02    0x8c    li a1,1
    0x84000f04    0x8e    sll a1,a1,a0
    0x84000f08    0x92    auipc a0,0x1
    0x84000f0c    0x96    ld a0,-1584(a0) # ffffffff840018d8 <rootserver+0x28>
    0x84000f10    0x9a    jal ra,ffffffff84017ae8 <memzero>
    0x84000f14    0x9e    j ffffffff84000e9a <populate_bi_frame+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 89 nodes.

Section create_idle_thread (217 of 301)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `create_idle_thread`:

    0x84000dca     0x0    addi sp,sp,-16
    0x84000dcc     0x2    sd ra,8(sp)           ; stack access
    0x84000dce     0x4    sd s0,0(sp)           ; stack access
    0x84000dd0     0x6    auipc a0,0x19
    0x84000dd4     0xa    addi a0,a0,1072 # ffffffff8401a200 <ksIdleThreadTCB+0x200>
    0x84000dd8     0xe    auipc s0,0x2c
    0x84000ddc    0x12    addi s0,s0,632 # ffffffff8402d050 <ksIdleThread>
    0x84000de0    0x16    sd a0,0(s0)
    0x84000de2    0x18    jal ra,ffffffff84000d9c <configureIdleThread>
    0x84000de6    0x1c    ld s0,0(s0)
    0x84000de8    0x1e    auipc a0,0x1a
    0x84000dec    0x22    addi a0,a0,792 # ffffffff8401b100 <ksIdleThreadSC>
    0x84000df0    0x26    sd a0,368(s0)
    0x84000df4    0x2a    li a3,0
    0x84000df6    0x2c    lui a2,0x1
    0x84000df8    0x2e    addi a2,a2,904 # 1388 <KERNEL_OFFSET-0xfffffffeffffec78>
    0x84000dfc    0x32    li a1,2
    0x84000dfe    0x34    jal ra,ffffffff84011406 <refill_new>
    0x84000e02    0x38    ld a5,368(s0)
    0x84000e06    0x3c    sd s0,24(a5)
    0x84000e08    0x3e    li a0,1
    0x84000e0a    0x40    ld ra,8(sp)           ; stack access
    0x84000e0c    0x42    ld s0,0(sp)           ; stack access
    0x84000e0e    0x44    addi sp,sp,16
    0x84000e10    0x46    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 37 nodes.

Section create_frames_of_region (218 of 301)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 80 instructions.

RVC_FTTFT____FFFFTFT.
RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
43 stack accesses found. Annotated code for `create_frames_of_region`:

    0x84000816     0x0    addi sp,sp,-160
    0x84000818     0x2    sd ra,152(sp)         ; stack access
    0x8400081a     0x4    sd s0,144(sp)         ; stack access
    0x8400081c     0x6    sd s1,136(sp)         ; stack access
    0x8400081e     0x8    sd s2,128(sp)         ; stack access
    0x84000820     0xa    sd s3,120(sp)         ; stack access
    0x84000822     0xc    sd s4,112(sp)         ; stack access
    0x84000824     0xe    sd s5,104(sp)         ; stack access
    0x84000826    0x10    sd s6,96(sp)          ; stack access
    0x84000828    0x12    sd s7,88(sp)          ; stack access
    0x8400082a    0x14    sd s8,80(sp)          ; stack access
    0x8400082c    0x16    sd s9,72(sp)          ; stack access
    0x8400082e    0x18    mv s7,a0
    0x84000830    0x1a    sd a1,32(sp)          ; stack access
    0x84000832    0x1c    sd a2,40(sp)          ; stack access
    0x84000834    0x1e    sd a3,16(sp)          ; stack access
    0x84000836    0x20    sd a4,24(sp)          ; stack access
    0x84000838    0x22    auipc s9,0x1
    0x8400083c    0x26    ld s9,104(s9) # ffffffff840018a0 <ndks_boot+0x250>
    0x84000840    0x2a    bgeu a5,a6,ffffffff840008b2 <create_frames_of_region+0x9c>
    0x84000844    0x2e    mv s2,a7
    0x84000846    0x30    mv s1,a6
    0x84000848    0x32    mv s0,a5
    0x8400084a    0x34    li s3,1
    0x8400084c    0x36    slli s8,s3,0x3b
    0x84000850    0x3a    lui s6,0xfe000
    0x84000854    0x3e    srli s6,s6,0x10
    0x84000858    0x42    slli s5,s3,0x26
    0x8400085c    0x46    ld a5,160(sp)         ; stack access
    0x8400085e    0x48    sub s5,s5,a5
    0x84000862    0x4c    lui s4,0x1
    0x84000864    0x4e    j ffffffff84000886 <create_frames_of_region+0x70>
    0x84000866    0x50    sd s8,48(sp)          ; stack access
    0x84000868    0x52    slli a5,s0,0x9
    0x8400086c    0x56    and a5,a5,s6
    0x84000870    0x5a    sd a5,56(sp)          ; stack access
    0x84000872    0x5c    ld a2,48(sp)          ; stack access
    0x84000874    0x5e    ld a3,56(sp)          ; stack access
    0x84000876    0x60    ld a0,32(sp)          ; stack access
    0x84000878    0x62    ld a1,40(sp)          ; stack access
    0x8400087a    0x64    jal ra,ffffffff84000674 <provide_cap>
    0x8400087e    0x68    beqz a0,ffffffff840008a4 <create_frames_of_region+0x8e>
    0x84000880    0x6a    add s0,s0,s4
    0x84000882    0x6c    bgeu s0,s1,ffffffff840008b2 <create_frames_of_region+0x9c>
    0x84000886    0x70    beqz s2,ffffffff84000866 <create_frames_of_region+0x50>
    0x8400088a    0x74    mv a6,s3
    0x8400088c    0x76    li a5,0
    0x8400088e    0x78    mv a4,s3
    0x84000890    0x7a    add a3,s5,s0
    0x84000894    0x7e    mv a2,s0
    0x84000896    0x80    ld a0,16(sp)          ; stack access
    0x84000898    0x82    ld a1,24(sp)          ; stack access
    0x8400089a    0x84    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x8400089e    0x88    sd a0,48(sp)          ; stack access
    0x840008a0    0x8a    sd a1,56(sp)          ; stack access
    0x840008a2    0x8c    j ffffffff84000872 <create_frames_of_region+0x5c>
    0x840008a4    0x8e    sd zero,0(s7) # fffffffffe000000 <ki_end+0x79fce000>  ; stack access
    0x840008a8    0x92    sd zero,8(s7)         ; stack access
    0x840008ac    0x96    sd zero,16(s7)        ; stack access
    0x840008b0    0x9a    j ffffffff840008c8 <create_frames_of_region+0xb2>
    0x840008b2    0x9c    sd s9,0(s7)           ; stack access
    0x840008b6    0xa0    auipc a5,0x1
    0x840008ba    0xa4    ld a5,-22(a5) # ffffffff840018a0 <ndks_boot+0x250>
    0x840008be    0xa8    sd a5,8(s7)           ; stack access
    0x840008c2    0xac    li a5,1
    0x840008c4    0xae    sd a5,16(s7)          ; stack access
    0x840008c8    0xb2    mv a0,s7
    0x840008ca    0xb4    ld ra,152(sp)         ; stack access
    0x840008cc    0xb6    ld s0,144(sp)         ; stack access
    0x840008ce    0xb8    ld s1,136(sp)         ; stack access
    0x840008d0    0xba    ld s2,128(sp)         ; stack access
    0x840008d2    0xbc    ld s3,120(sp)         ; stack access
    0x840008d4    0xbe    ld s4,112(sp)         ; stack access
    0x840008d6    0xc0    ld s5,104(sp)         ; stack access
    0x840008d8    0xc2    ld s6,96(sp)          ; stack access
    0x840008da    0xc4    ld s7,88(sp)          ; stack access
    0x840008dc    0xc6    ld s8,80(sp)          ; stack access
    0x840008de    0xc8    ld s9,72(sp)          ; stack access
    0x840008e0    0xca    addi sp,sp,160
    0x840008e2    0xcc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 136 nodes.

Section create_bi_frame_cap (219 of 301)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 30 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x840005ee     0x0    addi sp,sp,-80
    0x840005f0     0x2    sd ra,72(sp)          ; stack access
    0x840005f2     0x4    sd s0,64(sp)          ; stack access
    0x840005f4     0x6    sd s1,56(sp)          ; stack access
    0x840005f6     0x8    sd a0,16(sp)          ; stack access
    0x840005f8     0xa    sd a1,24(sp)          ; stack access
    0x840005fa     0xc    mv a0,a2
    0x840005fc     0xe    mv a1,a3
    0x840005fe    0x10    mv a3,a4
    0x84000600    0x12    li a6,0
    0x84000602    0x14    li a5,0
    0x84000604    0x16    li a4,1
    0x84000606    0x18    auipc a2,0x1
    0x8400060a    0x1c    ld a2,714(a2) # ffffffff840018d0 <rootserver+0x20>
    0x8400060e    0x20    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x84000612    0x24    mv s1,a0
    0x84000614    0x26    mv s0,a1
    0x84000616    0x28    ld a0,16(sp)          ; stack access
    0x84000618    0x2a    ld a1,24(sp)          ; stack access
    0x8400061a    0x2c    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x8400061e    0x30    sd s1,288(a0)
    0x84000622    0x34    sd s0,296(a0)
    0x84000626    0x38    sd zero,304(a0)
    0x8400062a    0x3c    li a5,3
    0x8400062c    0x3e    sd a5,312(a0)
    0x84000630    0x42    ld ra,72(sp)          ; stack access
    0x84000632    0x44    ld s0,64(sp)          ; stack access
    0x84000634    0x46    ld s1,56(sp)          ; stack access
    0x84000636    0x48    addi sp,sp,80
    0x84000638    0x4a    ret

Proving inst theorems
---------------------

30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 48 nodes.

Section map_kernel_window (220 of 301)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 69 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_window`:

    0x84000460     0x0    addi sp,sp,-64
    0x84000462     0x2    sd ra,56(sp)          ; stack access
    0x84000464     0x4    sd s0,48(sp)          ; stack access
    0x84000466     0x6    sd s1,40(sp)          ; stack access
    0x84000468     0x8    sd s2,32(sp)          ; stack access
    0x8400046a     0xa    sd s3,24(sp)          ; stack access
    0x8400046c     0xc    sd s4,16(sp)          ; stack access
    0x8400046e     0xe    sd s5,8(sp)           ; stack access
    0x84000470    0x10    sd s6,0(sp)           ; stack access
    0x84000472    0x12    li s1,-1
    0x84000474    0x14    slli s1,s1,0x26
    0x84000476    0x16    auipc s6,0x30
    0x8400047a    0x1a    addi s6,s6,-1142 # ffffffff84030000 <kernel_root_pageTable>
    0x8400047e    0x1e    li s2,1
    0x84000480    0x20    slli s5,s2,0x26
    0x84000484    0x24    lui s4,0x40000
    0x84000488    0x28    lui s3,0x80000
    0x8400048c    0x2c    srli s0,s1,0x1e
    0x84000490    0x30    andi s0,s0,511
    0x84000494    0x34    slli s0,s0,0x3
    0x84000496    0x36    add s0,s0,s6
    0x84000498    0x38    mv a1,s2
    0x8400049a    0x3a    add a0,s1,s5
    0x8400049e    0x3e    jal ra,ffffffff8401015e <pte_next>
    0x840004a2    0x42    sd a0,0(s0)
    0x840004a4    0x44    add s1,s1,s4
    0x840004a6    0x46    bne s1,s3,ffffffff8400048c <map_kernel_window+0x2c>
    0x840004aa    0x4a    li s0,1
    0x840004ac    0x4c    slli a5,s0,0x20
    0x840004b0    0x50    auipc s1,0x2f
    0x840004b4    0x54    addi s1,s1,-1200 # ffffffff8402f000 <kernel_image_level2_pt>
    0x840004b8    0x58    add s1,s1,a5
    0x840004ba    0x5a    auipc s2,0x31
    0x840004be    0x5e    addi s2,s2,-1210 # ffffffff84031000 <kernel_root_pageTable+0x1000>
    0x840004c2    0x62    li a1,0
    0x840004c4    0x64    mv a0,s1
    0x840004c6    0x66    jal ra,ffffffff8401015e <pte_next>
    0x840004ca    0x6a    sd a0,-2032(s2)
    0x840004ce    0x6e    li a1,0
    0x840004d0    0x70    mv a0,s1
    0x840004d2    0x72    jal ra,ffffffff8401015e <pte_next>
    0x840004d6    0x76    sd a0,-16(s2)
    0x840004da    0x7a    li s2,0
    0x840004dc    0x7c    slli s0,s0,0x1f
    0x840004de    0x7e    auipc s5,0x2f
    0x840004e2    0x82    addi s5,s5,-1246 # ffffffff8402f000 <kernel_image_level2_pt>
    0x840004e6    0x86    lui s4,0x200
    0x840004ea    0x8a    li s3,3
    0x840004ec    0x8c    slli s3,s3,0x1e
    0x840004ee    0x8e    slli s1,s2,0x3
    0x840004f2    0x92    add s1,s1,s5
    0x840004f4    0x94    li a1,1
    0x840004f6    0x96    mv a0,s0
    0x840004f8    0x98    jal ra,ffffffff8401015e <pte_next>
    0x840004fc    0x9c    sd a0,0(s1)
    0x840004fe    0x9e    addi s2,s2,1
    0x84000500    0xa0    add s0,s0,s4
    0x84000502    0xa2    bne s0,s3,ffffffff840004ee <map_kernel_window+0x8e>
    0x84000506    0xa6    jal ra,ffffffff8400043c <map_kernel_devices>
    0x8400050a    0xaa    ld ra,56(sp)          ; stack access
    0x8400050c    0xac    ld s0,48(sp)          ; stack access
    0x8400050e    0xae    ld s1,40(sp)          ; stack access
    0x84000510    0xb0    ld s2,32(sp)          ; stack access
    0x84000512    0xb2    ld s3,24(sp)          ; stack access
    0x84000514    0xb4    ld s4,16(sp)          ; stack access
    0x84000516    0xb6    ld s5,8(sp)           ; stack access
    0x84000518    0xb8    ld s6,0(sp)           ; stack access
    0x8400051a    0xba    addi sp,sp,64
    0x8400051c    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 99 nodes.

Section map_kernel_devices (221 of 301)
=======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `map_kernel_devices`:

    0x8400043c     0x0    addi sp,sp,-32
    0x8400043e     0x2    sd ra,24(sp)          ; stack access
    0x84000440     0x4    li a2,1
    0x84000442     0x6    lui a1,0xc0000
    0x84000446     0xa    lui a0,0xc000
    0x8400044a     0xe    jal ra,ffffffff840000c4 <map_kernel_frame>
    0x8400044e    0x12    lui a0,0xc000
    0x84000452    0x16    lui a1,0xc001
    0x84000456    0x1a    jal ra,ffffffff84000352 <reserve_region>
    0x8400045a    0x1e    ld ra,24(sp)          ; stack access
    0x8400045c    0x20    addi sp,sp,32
    0x8400045e    0x22    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 17 nodes.

Section map_it_frame_cap (222 of 301)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 47 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x840001fa     0x0    addi sp,sp,-96
    0x840001fc     0x2    sd ra,88(sp)          ; stack access
    0x840001fe     0x4    sd s0,80(sp)          ; stack access
    0x84000200     0x6    sd s1,72(sp)          ; stack access
    0x84000202     0x8    sd s2,64(sp)          ; stack access
    0x84000204     0xa    sd s3,56(sp)          ; stack access
    0x84000206     0xc    sd a0,16(sp)          ; stack access
    0x84000208     0xe    sd a1,24(sp)          ; stack access
    0x8400020a    0x10    mv s3,a2
    0x8400020c    0x12    sd a2,0(sp)           ; stack access
    0x8400020e    0x14    mv s0,a3
    0x84000210    0x16    sd a3,8(sp)           ; stack access
    0x84000212    0x18    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000216    0x1c    mv s2,a0
    0x84000218    0x1e    mv a0,s3
    0x8400021a    0x20    mv a1,s0
    0x8400021c    0x22    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000220    0x26    mv s0,a0
    0x84000222    0x28    slli a1,s3,0x19
    0x84000226    0x2c    srli a1,a1,0x19
    0x84000228    0x2e    srli s1,s3,0x26
    0x8400022c    0x32    andi s1,s1,1
    0x8400022e    0x34    beqz s1,ffffffff84000236 <map_it_frame_cap+0x3c>
    0x84000230    0x36    li a5,-1
    0x84000232    0x38    slli a5,a5,0x27
    0x84000234    0x3a    or a1,a1,a5
    0x84000236    0x3c    mv a0,s2
    0x84000238    0x3e    jal ra,ffffffff840107b2 <lookupPTSlot>
    0x8400023c    0x42    sd a0,32(sp)          ; stack access
    0x8400023e    0x44    sd a1,40(sp)          ; stack access
    0x84000240    0x46    li a5,1
    0x84000242    0x48    slli a5,a5,0x26
    0x84000244    0x4a    add s0,s0,a5
    0x84000246    0x4c    srli s0,s0,0x2
    0x84000248    0x4e    lui a5,0xfff00
    0x8400024c    0x52    srli a5,a5,0xa
    0x8400024e    0x54    and s0,s0,a5
    0x84000250    0x56    ori s0,s0,223
    0x84000254    0x5a    sd s0,0(a0)
    0x84000256    0x5c    sfence.vma
    0x8400025a    0x60    ld ra,88(sp)          ; stack access
    0x8400025c    0x62    ld s0,80(sp)          ; stack access
    0x8400025e    0x64    ld s1,72(sp)          ; stack access
    0x84000260    0x66    ld s2,64(sp)          ; stack access
    0x84000262    0x68    ld s3,56(sp)          ; stack access
    0x84000264    0x6a    addi sp,sp,96
    0x84000266    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 71 nodes.

Section map_it_pt_cap (223 of 301)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 46 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

18 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x84000190     0x0    addi sp,sp,-80
    0x84000192     0x2    sd ra,72(sp)          ; stack access
    0x84000194     0x4    sd s0,64(sp)          ; stack access
    0x84000196     0x6    sd s1,56(sp)          ; stack access
    0x84000198     0x8    sd s2,48(sp)          ; stack access
    0x8400019a     0xa    sd a0,16(sp)          ; stack access
    0x8400019c     0xc    sd a1,24(sp)          ; stack access
    0x8400019e     0xe    sd a2,0(sp)           ; stack access
    0x840001a0    0x10    sd a3,8(sp)           ; stack access
    0x840001a2    0x12    slli s1,a2,0x19
    0x840001a6    0x16    srli s1,s1,0x19
    0x840001a8    0x18    srli a2,a2,0x26
    0x840001aa    0x1a    andi a2,a2,1
    0x840001ac    0x1c    beqz a2,ffffffff840001b4 <map_it_pt_cap+0x24>
    0x840001ae    0x1e    li a5,-1
    0x840001b0    0x20    slli a5,a5,0x27
    0x840001b2    0x22    or s1,s1,a5
    0x840001b4    0x24    ld a0,16(sp)          ; stack access
    0x840001b6    0x26    ld a1,24(sp)          ; stack access
    0x840001b8    0x28    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x840001bc    0x2c    mv s2,a0
    0x840001be    0x2e    ld a0,0(sp)           ; stack access
    0x840001c0    0x30    ld a1,8(sp)           ; stack access
    0x840001c2    0x32    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x840001c6    0x36    mv s0,a0
    0x840001c8    0x38    mv a1,s1
    0x840001ca    0x3a    mv a0,s2
    0x840001cc    0x3c    jal ra,ffffffff840107b2 <lookupPTSlot>
    0x840001d0    0x40    sd a0,32(sp)          ; stack access
    0x840001d2    0x42    sd a1,40(sp)          ; stack access
    0x840001d4    0x44    li a5,1
    0x840001d6    0x46    slli a5,a5,0x26
    0x840001d8    0x48    add s0,s0,a5
    0x840001da    0x4a    srli s0,s0,0x2
    0x840001dc    0x4c    lui a5,0xfff00
    0x840001e0    0x50    srli a5,a5,0xa
    0x840001e2    0x52    and s0,s0,a5
    0x840001e4    0x54    ori s0,s0,193
    0x840001e8    0x58    sd s0,0(a0)
    0x840001ea    0x5a    sfence.vma
    0x840001ee    0x5e    ld ra,72(sp)          ; stack access
    0x840001f0    0x60    ld s0,64(sp)          ; stack access
    0x840001f2    0x62    ld s1,56(sp)          ; stack access
    0x840001f4    0x64    ld s2,48(sp)          ; stack access
    0x840001f6    0x66    addi sp,sp,80
    0x840001f8    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 72 nodes.

Section c_handle_syscall (224 of 301)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 11 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x8401986c     0x0    addi sp,sp,-16
    0x8401986e     0x2    sd ra,8(sp)           ; stack access
    0x84019870     0x4    li a5,-1
    0x84019872     0x6    beq a7,a5,ffffffff84019882 <c_handle_syscall+0x16>
    0x84019876     0xa    li a5,-2
    0x84019878     0xc    beq a7,a5,ffffffff84019886 <c_handle_syscall+0x1a>
    0x8401987c    0x10    mv a0,a7
    0x8401987e    0x12    jal ra,ffffffff840190a2 <slowpath>
    0x84019882    0x16    jal ra,ffffffff840190ba <fastpath_call>
    0x84019886    0x1a    mv a2,a6
    0x84019888    0x1c    jal ra,ffffffff840193fc <fastpath_reply_recv>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 19 nodes.

Section slowpath (225 of 301)
=============================

Deriving specifications
-----------------------

Section `slowpath` consists of 8 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `slowpath`:

    0x840190a2     0x0    addi sp,sp,-16
    0x840190a4     0x2    sd ra,8(sp)           ; stack access
    0x840190a6     0x4    li a5,-12
    0x840190a8     0x6    bgeu a5,a0,ffffffff840190b4 <slowpath+0x12>
    0x840190ac     0xa    jal ra,ffffffff84018d76 <handleSyscall>
    0x840190b0     0xe    jal ra,ffffffff840103ee <restore_user_context>
    0x840190b4    0x12    jal ra,ffffffff840153ce <handleUnknownSyscall>
    0x840190b8    0x16    j ffffffff840190b0 <slowpath+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 14 nodes.

Section createNewObjects (226 of 301)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 52 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `createNewObjects`:

    0x8401854c     0x0    addi sp,sp,-96
    0x8401854e     0x2    sd ra,88(sp)          ; stack access
    0x84018550     0x4    sd s0,80(sp)          ; stack access
    0x84018552     0x6    sd s1,72(sp)          ; stack access
    0x84018554     0x8    sd s2,64(sp)          ; stack access
    0x84018556     0xa    sd s3,56(sp)          ; stack access
    0x84018558     0xc    sd s4,48(sp)          ; stack access
    0x8401855a     0xe    sd s5,40(sp)          ; stack access
    0x8401855c    0x10    sd s6,32(sp)          ; stack access
    0x8401855e    0x12    sd s7,24(sp)          ; stack access
    0x84018560    0x14    sd s8,16(sp)          ; stack access
    0x84018562    0x16    mv s5,a0
    0x84018564    0x18    mv s6,a1
    0x84018566    0x1a    mv s1,a2
    0x84018568    0x1c    mv s0,a3
    0x8401856a    0x1e    mv s2,a4
    0x8401856c    0x20    mv s7,a5
    0x8401856e    0x22    mv s3,a6
    0x84018570    0x24    mv s8,a7
    0x84018572    0x26    mv a1,a6
    0x84018574    0x28    jal ra,ffffffff84011dfe <getObjectSize>
    0x84018578    0x2c    beqz s2,ffffffff840185ac <createNewObjects+0x60>
    0x8401857c    0x30    sext.w s4,a0
    0x84018580    0x34    slli s0,s0,0x5
    0x84018582    0x36    add s1,s1,s0
    0x84018584    0x38    li s0,0
    0x84018586    0x3a    sll a1,s0,s4
    0x8401858a    0x3e    mv a3,s8
    0x8401858c    0x40    mv a2,s3
    0x8401858e    0x42    add a1,a1,s7
    0x84018590    0x44    mv a0,s5
    0x84018592    0x46    jal ra,ffffffff84018444 <createObject>
    0x84018596    0x4a    mv a2,a0
    0x84018598    0x4c    mv a3,a1
    0x8401859a    0x4e    mv a1,s1
    0x8401859c    0x50    mv a0,s6
    0x8401859e    0x52    jal ra,ffffffff84011b6c <insertNewCap>
    0x840185a2    0x56    addi s0,s0,1
    0x840185a4    0x58    addi s1,s1,32
    0x840185a8    0x5c    bne s2,s0,ffffffff84018586 <createNewObjects+0x3a>
    0x840185ac    0x60    ld ra,88(sp)          ; stack access
    0x840185ae    0x62    ld s0,80(sp)          ; stack access
    0x840185b0    0x64    ld s1,72(sp)          ; stack access
    0x840185b2    0x66    ld s2,64(sp)          ; stack access
    0x840185b4    0x68    ld s3,56(sp)          ; stack access
    0x840185b6    0x6a    ld s4,48(sp)          ; stack access
    0x840185b8    0x6c    ld s5,40(sp)          ; stack access
    0x840185ba    0x6e    ld s6,32(sp)          ; stack access
    0x840185bc    0x70    ld s7,24(sp)          ; stack access
    0x840185be    0x72    ld s8,16(sp)          ; stack access
    0x840185c0    0x74    addi sp,sp,96
    0x840185c2    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 80 nodes.

Section createObject (227 of 301)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 107 instructions.
Switch found.


Stack analysis
---------------

24 stack accesses found. Annotated code for `createObject`:

    0x84018444      0x0    addi sp,sp,-48
    0x84018446      0x2    sd ra,40(sp)          ; stack access
    0x84018448      0x4    sd s0,32(sp)          ; stack access
    0x8401844a      0x6    sd s1,24(sp)          ; stack access
    0x8401844c      0x8    mv s0,a1
    0x8401844e      0xa    mv s1,a2
    0x84018450      0xc    li a5,6
    0x84018452      0xe    bltu a5,a0,ffffffff8401846e <createObject+0x2a>
    0x84018456     0x12    li a5,6
    0x84018458     0x14    bltu a5,a0,ffffffff84018548 <createObject+0x104>
    0x8401845c     0x18    slli a0,a0,0x2
    0x8401845e     0x1a    auipc a4,0x2
    0x84018462     0x1e    addi a4,a4,-1650 # ffffffff84019dec <msgRegisters+0x3a4>
    0x84018466     0x22    add a0,a0,a4
    0x84018468     0x24    lw a5,0(a0)
    0x8401846a     0x26    add a5,a5,a4
    0x8401846c     0x28    jr a5
    0x8401846e     0x2a    jal ra,ffffffff84011080 <Arch_createObject>
    0x84018472     0x2e    sd a0,0(sp)           ; stack access
    0x84018474     0x30    sd a1,8(sp)           ; stack access
    0x84018476     0x32    ld a0,0(sp)           ; stack access
    0x84018478     0x34    ld a1,8(sp)           ; stack access
    0x8401847a     0x36    ld ra,40(sp)          ; stack access
    0x8401847c     0x38    ld s0,32(sp)          ; stack access
    0x8401847e     0x3a    ld s1,24(sp)          ; stack access
    0x84018480     0x3c    addi sp,sp,48
    0x84018482     0x3e    ret
    0x84018484     0x40    li a5,32
    0x84018488     0x44    sd a5,768(a1) # 1300 <KERNEL_OFFSET-0xfffffffeffffed00>
    0x8401848c     0x48    auipc a5,0x15
    0x84018490     0x4c    ld a5,-1140(a5) # ffffffff8402d018 <ksCurDomain>
    0x84018494     0x50    sd a5,856(a1)
    0x84018498     0x54    addi s0,a1,512
    0x8401849c     0x58    slli s0,s0,0x19
    0x8401849e     0x5a    srli s0,s0,0x19
    0x840184a0     0x5c    li a5,3
    0x840184a2     0x5e    slli a5,a5,0x3d
    0x840184a4     0x60    or s0,s0,a5
    0x840184a6     0x62    sd s0,0(sp)           ; stack access
    0x840184a8     0x64    sd zero,8(sp)         ; stack access
    0x840184aa     0x66    j ffffffff84018476 <createObject+0x32>
    0x840184ac     0x68    slli s0,a1,0x19
    0x840184b0     0x6c    srli s0,s0,0x19
    0x840184b2     0x6e    li a5,79
    0x840184b6     0x72    slli a5,a5,0x37
    0x840184b8     0x74    or s0,s0,a5
    0x840184ba     0x76    sd s0,0(sp)           ; stack access
    0x840184bc     0x78    sd zero,8(sp)         ; stack access
    0x840184be     0x7a    j ffffffff84018476 <createObject+0x32>
    0x840184c0     0x7c    slli s0,a1,0x19
    0x840184c4     0x80    srli s0,s0,0x19
    0x840184c6     0x82    li a5,27
    0x840184c8     0x84    slli a5,a5,0x39
    0x840184ca     0x86    or s0,s0,a5
    0x840184cc     0x88    sd s0,0(sp)           ; stack access
    0x840184ce     0x8a    sd zero,8(sp)         ; stack access
    0x840184d0     0x8c    j ffffffff84018476 <createObject+0x32>
    0x840184d2     0x8e    andi a5,a2,63
    0x840184d6     0x92    slli a5,a5,0x2f
    0x840184d8     0x94    slli s0,a1,0x19
    0x840184dc     0x98    srli s0,s0,0x1a
    0x840184de     0x9a    or a5,a5,s0
    0x840184e0     0x9c    li a4,5
    0x840184e2     0x9e    slli a4,a4,0x3c
    0x840184e4     0xa0    or a5,a5,a4
    0x840184e6     0xa2    sd a5,0(sp)           ; stack access
    0x840184e8     0xa4    sd zero,8(sp)         ; stack access
    0x840184ea     0xa6    j ffffffff84018476 <createObject+0x32>
    0x840184ec     0xa8    slli s0,a1,0x19
    0x840184f0     0xac    srli s0,s0,0x19
    0x840184f2     0xae    li a5,1
    0x840184f4     0xb0    slli a5,a5,0x3c
    0x840184f6     0xb2    or s0,s0,a5
    0x840184f8     0xb4    sd s0,0(sp)           ; stack access
    0x840184fa     0xb6    snez a3,a3
    0x840184fe     0xba    slli a3,a3,0x6
    0x84018500     0xbc    andi s1,a2,63
    0x84018504     0xc0    or s1,s1,a3
    0x84018506     0xc2    sd s1,8(sp)           ; stack access
    0x84018508     0xc4    j ffffffff84018476 <createObject+0x32>
    0x8401850a     0xc6    li a1,1
    0x8401850c     0xc8    sll a1,a1,a2
    0x84018510     0xcc    mv a0,s0
    0x84018512     0xce    jal ra,ffffffff84017ae8 <memzero>
    0x84018516     0xd2    li a5,-5
    0x84018518     0xd4    slli a5,a5,0x3c
    0x8401851a     0xd6    sd a5,0(sp)           ; stack access
    0x8401851c     0xd8    slli s0,s0,0x10
    0x8401851e     0xda    lui a5,0xfe000
    0x84018522     0xde    srli a5,a5,0x9
    0x84018524     0xe0    and s0,s0,a5
    0x84018526     0xe2    slli s1,s1,0xa
    0x84018528     0xe4    lui a5,0x10
    0x8401852a     0xe6    addi a5,a5,-1
    0x8401852c     0xe8    and s1,s1,a5
    0x8401852e     0xea    or s1,s1,s0
    0x84018530     0xec    sd s1,8(sp)           ; stack access
    0x84018532     0xee    j ffffffff84018476 <createObject+0x32>
    0x84018534     0xf0    li a1,32
    0x84018538     0xf4    mv a0,s0
    0x8401853a     0xf6    jal ra,ffffffff84017ae8 <memzero>
    0x8401853e     0xfa    li a5,17
    0x84018540     0xfc    slli a5,a5,0x3a
    0x84018542     0xfe    sd a5,0(sp)           ; stack access
    0x84018544    0x100    sd s0,8(sp)           ; stack access
    0x84018546    0x102    j ffffffff84018476 <createObject+0x32>
    0x84018548    0x104    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 156 nodes.

Section decodeWriteRegisters (228 of 301)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 66 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x84017532     0x0    addi sp,sp,-64
    0x84017534     0x2    sd ra,56(sp)          ; stack access
    0x84017536     0x4    sd s0,48(sp)          ; stack access
    0x84017538     0x6    sd s1,40(sp)          ; stack access
    0x8401753a     0x8    sd s2,32(sp)          ; stack access
    0x8401753c     0xa    sd s3,24(sp)          ; stack access
    0x8401753e     0xc    sd s4,16(sp)          ; stack access
    0x84017540     0xe    sd a0,0(sp)           ; stack access
    0x84017542    0x10    li a5,1
    0x84017544    0x12    bgeu a5,a2,ffffffff840175ae <decodeWriteRegisters+0x7c>
    0x84017548    0x16    mv s0,a2
    0x8401754a    0x18    mv s1,a3
    0x8401754c    0x1a    mv a1,a3
    0x8401754e    0x1c    li a0,1
    0x84017550    0x1e    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017554    0x22    mv s2,a0
    0x84017556    0x24    addi s0,s0,-2
    0x84017558    0x26    bltu s0,a0,ffffffff840175bc <decodeWriteRegisters+0x8a>
    0x8401755c    0x2a    ld a5,0(sp)           ; stack access
    0x8401755e    0x2c    slli s0,a5,0x19
    0x84017562    0x30    srli s0,s0,0x19
    0x84017564    0x32    srli a5,a5,0x26
    0x84017566    0x34    andi a5,a5,1
    0x84017568    0x36    beqz a5,ffffffff84017570 <decodeWriteRegisters+0x3e>
    0x8401756a    0x38    li a5,-1
    0x8401756c    0x3a    slli a5,a5,0x27
    0x8401756e    0x3c    or s0,s0,a5
    0x84017570    0x3e    auipc s4,0x16
    0x84017574    0x42    ld s4,-1304(s4) # ffffffff8402d058 <ksCurThread>
    0x84017578    0x46    beq s4,s0,ffffffff840175ca <decodeWriteRegisters+0x98>
    0x8401757c    0x4a    mv a1,s1
    0x8401757e    0x4c    li a0,0
    0x84017580    0x4e    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017584    0x52    mv s3,a0
    0x84017586    0x54    li a1,2
    0x84017588    0x56    mv a0,s4
    0x8401758a    0x58    jal ra,ffffffff84012996 <setThreadState>
    0x8401758e    0x5c    mv a4,s1
    0x84017590    0x5e    li a3,0
    0x84017592    0x60    mv a2,s2
    0x84017594    0x62    andi a1,s3,1
    0x84017598    0x66    mv a0,s0
    0x8401759a    0x68    jal ra,ffffffff8401744e <invokeTCB_WriteRegisters>
    0x8401759e    0x6c    ld ra,56(sp)          ; stack access
    0x840175a0    0x6e    ld s0,48(sp)          ; stack access
    0x840175a2    0x70    ld s1,40(sp)          ; stack access
    0x840175a4    0x72    ld s2,32(sp)          ; stack access
    0x840175a6    0x74    ld s3,24(sp)          ; stack access
    0x840175a8    0x76    ld s4,16(sp)          ; stack access
    0x840175aa    0x78    addi sp,sp,64
    0x840175ac    0x7a    ret
    0x840175ae    0x7c    li a5,7
    0x840175b0    0x7e    auipc a4,0x3
    0x840175b4    0x82    sd a5,1680(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840175b8    0x86    li a0,3
    0x840175ba    0x88    j ffffffff8401759e <decodeWriteRegisters+0x6c>
    0x840175bc    0x8a    li a5,7
    0x840175be    0x8c    auipc a4,0x3
    0x840175c2    0x90    sd a5,1666(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840175c6    0x94    li a0,3
    0x840175c8    0x96    j ffffffff8401759e <decodeWriteRegisters+0x6c>
    0x840175ca    0x98    li a5,3
    0x840175cc    0x9a    auipc a4,0x3
    0x840175d0    0x9e    sd a5,1652(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840175d4    0xa2    li a0,3
    0x840175d6    0xa4    j ffffffff8401759e <decodeWriteRegisters+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 97 nodes.

Section invokeTCB_WriteRegisters (229 of 301)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 82 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x8401744e     0x0    addi sp,sp,-80
    0x84017450     0x2    sd ra,72(sp)          ; stack access
    0x84017452     0x4    sd s0,64(sp)          ; stack access
    0x84017454     0x6    sd s1,56(sp)          ; stack access
    0x84017456     0x8    sd s2,48(sp)          ; stack access
    0x84017458     0xa    sd s3,40(sp)          ; stack access
    0x8401745a     0xc    sd s4,32(sp)          ; stack access
    0x8401745c     0xe    sd s5,24(sp)          ; stack access
    0x8401745e    0x10    sd s6,16(sp)          ; stack access
    0x84017460    0x12    sd s7,8(sp)           ; stack access
    0x84017462    0x14    mv s1,a0
    0x84017464    0x16    mv s4,a1
    0x84017466    0x18    mv s6,a2
    0x84017468    0x1a    mv s2,a4
    0x8401746a    0x1c    mv s3,a2
    0x8401746c    0x1e    li a5,32
    0x84017470    0x22    bgeu a5,a2,ffffffff84017478 <invokeTCB_WriteRegisters+0x2a>
    0x84017474    0x26    li s3,32
    0x84017478    0x2a    beqz s6,ffffffff840174f4 <invokeTCB_WriteRegisters+0xa6>
    0x8401747c    0x2e    mv a1,s2
    0x8401747e    0x30    li a0,2
    0x84017480    0x32    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017484    0x36    sd a0,264(s1)
    0x84017488    0x3a    auipc s5,0x3
    0x8401748c    0x3e    addi s5,s5,-1375 # ffffffff84019f29 <frameRegisters+0x1>
    0x84017490    0x42    li s0,1
    0x84017492    0x44    li s7,16
    0x84017494    0x46    bgeu s0,s3,ffffffff840174b4 <invokeTCB_WriteRegisters+0x66>
    0x84017498    0x4a    mv a1,s2
    0x8401749a    0x4c    addi a0,s0,2
    0x8401749e    0x50    jal ra,ffffffff84010128 <getSyscallArg>
    0x840174a2    0x54    lbu a5,0(s5)
    0x840174a6    0x58    slli a5,a5,0x3
    0x840174a8    0x5a    add a5,a5,s1
    0x840174aa    0x5c    sd a0,0(a5)
    0x840174ac    0x5e    addi s0,s0,1
    0x840174ae    0x60    addi s5,s5,1
    0x840174b0    0x62    bne s0,s7,ffffffff84017494 <invokeTCB_WriteRegisters+0x46>
    0x840174b4    0x66    li a5,16
    0x840174b6    0x68    bgeu a5,s6,ffffffff840174f4 <invokeTCB_WriteRegisters+0xa6>
    0x840174ba    0x6c    mv a1,s2
    0x840174bc    0x6e    li a0,18
    0x840174be    0x70    jal ra,ffffffff84010128 <getSyscallArg>
    0x840174c2    0x74    sd a0,72(s1)
    0x840174c4    0x76    li s0,17
    0x840174c6    0x78    auipc s6,0x3
    0x840174ca    0x7c    addi s6,s6,-1422 # ffffffff84019f38 <gpRegisters>
    0x840174ce    0x80    li s5,32
    0x840174d2    0x84    bgeu s0,s3,ffffffff840174f4 <invokeTCB_WriteRegisters+0xa6>
    0x840174d6    0x88    mv a1,s2
    0x840174d8    0x8a    addi a0,s0,2
    0x840174dc    0x8e    jal ra,ffffffff84010128 <getSyscallArg>
    0x840174e0    0x92    add a5,s6,s0
    0x840174e4    0x96    lbu a5,-16(a5)
    0x840174e8    0x9a    slli a5,a5,0x3
    0x840174ea    0x9c    add a5,a5,s1
    0x840174ec    0x9e    sd a0,0(a5)
    0x840174ee    0xa0    addi s0,s0,1
    0x840174f0    0xa2    bne s0,s5,ffffffff840174d2 <invokeTCB_WriteRegisters+0x84>
    0x840174f4    0xa6    ld a5,264(s1)
    0x840174f8    0xaa    sd a5,272(s1)
    0x840174fc    0xae    bnez s4,ffffffff84017524 <invokeTCB_WriteRegisters+0xd6>
    0x84017500    0xb2    auipc a5,0x16
    0x84017504    0xb6    ld a5,-1192(a5) # ffffffff8402d058 <ksCurThread>
    0x84017508    0xba    beq a5,s1,ffffffff8401752c <invokeTCB_WriteRegisters+0xde>
    0x8401750c    0xbe    li a0,0
    0x8401750e    0xc0    ld ra,72(sp)          ; stack access
    0x84017510    0xc2    ld s0,64(sp)          ; stack access
    0x84017512    0xc4    ld s1,56(sp)          ; stack access
    0x84017514    0xc6    ld s2,48(sp)          ; stack access
    0x84017516    0xc8    ld s3,40(sp)          ; stack access
    0x84017518    0xca    ld s4,32(sp)          ; stack access
    0x8401751a    0xcc    ld s5,24(sp)          ; stack access
    0x8401751c    0xce    ld s6,16(sp)          ; stack access
    0x8401751e    0xd0    ld s7,8(sp)           ; stack access
    0x84017520    0xd2    addi sp,sp,80
    0x84017522    0xd4    ret
    0x84017524    0xd6    mv a0,s1
    0x84017526    0xd8    jal ra,ffffffff84013d60 <restart>
    0x8401752a    0xdc    j ffffffff84017500 <invokeTCB_WriteRegisters+0xb2>
    0x8401752c    0xde    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84017530    0xe2    j ffffffff8401750c <invokeTCB_WriteRegisters+0xbe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
82 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 134 nodes.

Section decodeReadRegisters (230 of 301)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 72 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x84017392     0x0    addi sp,sp,-64
    0x84017394     0x2    sd ra,56(sp)          ; stack access
    0x84017396     0x4    sd s0,48(sp)          ; stack access
    0x84017398     0x6    sd s1,40(sp)          ; stack access
    0x8401739a     0x8    sd s2,32(sp)          ; stack access
    0x8401739c     0xa    sd s3,24(sp)          ; stack access
    0x8401739e     0xc    sd s4,16(sp)          ; stack access
    0x840173a0     0xe    sd a0,0(sp)           ; stack access
    0x840173a2    0x10    li a5,1
    0x840173a4    0x12    bgeu a5,a2,ffffffff84017412 <decodeReadRegisters+0x80>
    0x840173a8    0x16    mv s3,a3
    0x840173aa    0x18    mv s0,a4
    0x840173ac    0x1a    mv a1,a4
    0x840173ae    0x1c    li a0,1
    0x840173b0    0x1e    jal ra,ffffffff84010128 <getSyscallArg>
    0x840173b4    0x22    mv s2,a0
    0x840173b6    0x24    addi a4,a0,-1
    0x840173ba    0x28    li a5,31
    0x840173bc    0x2a    bltu a5,a4,ffffffff84017420 <decodeReadRegisters+0x8e>
    0x840173c0    0x2e    ld a5,0(sp)           ; stack access
    0x840173c2    0x30    slli s1,a5,0x19
    0x840173c6    0x34    srli s1,s1,0x19
    0x840173c8    0x36    srli a5,a5,0x26
    0x840173ca    0x38    andi a5,a5,1
    0x840173cc    0x3a    beqz a5,ffffffff840173d4 <decodeReadRegisters+0x42>
    0x840173ce    0x3c    li a5,-1
    0x840173d0    0x3e    slli a5,a5,0x27
    0x840173d2    0x40    or s1,s1,a5
    0x840173d4    0x42    auipc s4,0x16
    0x840173d8    0x46    ld s4,-892(s4) # ffffffff8402d058 <ksCurThread>
    0x840173dc    0x4a    beq s4,s1,ffffffff84017440 <decodeReadRegisters+0xae>
    0x840173e0    0x4e    mv a1,s0
    0x840173e2    0x50    li a0,0
    0x840173e4    0x52    jal ra,ffffffff84010128 <getSyscallArg>
    0x840173e8    0x56    mv s0,a0
    0x840173ea    0x58    li a1,2
    0x840173ec    0x5a    mv a0,s4
    0x840173ee    0x5c    jal ra,ffffffff84012996 <setThreadState>
    0x840173f2    0x60    mv a4,s3
    0x840173f4    0x62    li a3,0
    0x840173f6    0x64    mv a2,s2
    0x840173f8    0x66    andi a1,s0,1
    0x840173fc    0x6a    mv a0,s1
    0x840173fe    0x6c    jal ra,ffffffff8401727c <invokeTCB_ReadRegisters>
    0x84017402    0x70    ld ra,56(sp)          ; stack access
    0x84017404    0x72    ld s0,48(sp)          ; stack access
    0x84017406    0x74    ld s1,40(sp)          ; stack access
    0x84017408    0x76    ld s2,32(sp)          ; stack access
    0x8401740a    0x78    ld s3,24(sp)          ; stack access
    0x8401740c    0x7a    ld s4,16(sp)          ; stack access
    0x8401740e    0x7c    addi sp,sp,64
    0x84017410    0x7e    ret
    0x84017412    0x80    li a5,7
    0x84017414    0x82    auipc a4,0x4
    0x84017418    0x86    sd a5,-2004(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401741c    0x8a    li a0,3
    0x8401741e    0x8c    j ffffffff84017402 <decodeReadRegisters+0x70>
    0x84017420    0x8e    auipc a5,0x3
    0x84017424    0x92    addi a5,a5,992 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017428    0x96    li a4,4
    0x8401742a    0x98    sd a4,1088(a5)
    0x8401742e    0x9c    li a4,1
    0x84017430    0x9e    sd a4,1056(a5)
    0x84017434    0xa2    li a4,32
    0x84017438    0xa6    sd a4,1064(a5)
    0x8401743c    0xaa    li a0,3
    0x8401743e    0xac    j ffffffff84017402 <decodeReadRegisters+0x70>
    0x84017440    0xae    li a5,3
    0x84017442    0xb0    auipc a4,0x3
    0x84017446    0xb4    sd a5,2046(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401744a    0xb8    li a0,3
    0x8401744c    0xba    j ffffffff84017402 <decodeReadRegisters+0x70>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
72 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 105 nodes.

Section invokeTCB_ReadRegisters (231 of 301)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 106 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x8401727c      0x0    addi sp,sp,-48
    0x8401727e      0x2    sd ra,40(sp)          ; stack access
    0x84017280      0x4    sd s0,32(sp)          ; stack access
    0x84017282      0x6    sd s1,24(sp)          ; stack access
    0x84017284      0x8    sd s2,16(sp)          ; stack access
    0x84017286      0xa    sd s3,8(sp)           ; stack access
    0x84017288      0xc    mv s1,a0
    0x8401728a      0xe    mv s0,a2
    0x8401728c     0x10    mv s3,a4
    0x8401728e     0x12    auipc s2,0x16
    0x84017292     0x16    ld s2,-566(s2) # ffffffff8402d058 <ksCurThread>
    0x84017296     0x1a    bnez a1,ffffffff84017314 <invokeTCB_ReadRegisters+0x98>
    0x84017298     0x1c    beqz s3,ffffffff84017334 <invokeTCB_ReadRegisters+0xb8>
    0x8401729c     0x20    mv a1,s2
    0x8401729e     0x22    li a0,1
    0x840172a0     0x24    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x840172a4     0x28    sd zero,72(s2)
    0x840172a8     0x2c    beqz s0,ffffffff8401738a <invokeTCB_ReadRegisters+0x10e>
    0x840172aa     0x2e    ld a5,264(s1)
    0x840172ae     0x32    sd a5,88(s2)
    0x840172b2     0x36    li a5,1
    0x840172b4     0x38    bgeu a5,s0,ffffffff8401731a <invokeTCB_ReadRegisters+0x9e>
    0x840172b8     0x3c    ld a5,0(s1)
    0x840172ba     0x3e    sd a5,96(s2)
    0x840172be     0x42    li a5,2
    0x840172c0     0x44    bgeu a5,s0,ffffffff8401734c <invokeTCB_ReadRegisters+0xd0>
    0x840172c4     0x48    ld a5,8(s1)
    0x840172c6     0x4a    sd a5,104(s2)
    0x840172ca     0x4e    li a5,3
    0x840172cc     0x50    bgeu a5,s0,ffffffff84017350 <invokeTCB_ReadRegisters+0xd4>
    0x840172d0     0x54    ld a5,16(s1)
    0x840172d2     0x56    sd a5,112(s2)
    0x840172d6     0x5a    li a5,4
    0x840172d8     0x5c    li a3,4
    0x840172da     0x5e    bgeu a5,s0,ffffffff8401731c <invokeTCB_ReadRegisters+0xa0>
    0x840172de     0x62    li a3,4
    0x840172e0     0x64    beqz a0,ffffffff8401738e <invokeTCB_ReadRegisters+0x112>
    0x840172e2     0x66    bgeu a3,s0,ffffffff84017322 <invokeTCB_ReadRegisters+0xa6>
    0x840172e6     0x6a    auipc a2,0x3
    0x840172ea     0x6e    addi a2,a2,-958 # ffffffff84019f28 <frameRegisters>
    0x840172ee     0x72    add a2,a2,a3
    0x840172f0     0x74    slli a4,a3,0x3
    0x840172f4     0x78    add a4,a4,a0
    0x840172f6     0x7a    li a1,16
    0x840172f8     0x7c    addi a3,a3,1
    0x840172fa     0x7e    lbu a5,0(a2)
    0x840172fe     0x82    slli a5,a5,0x3
    0x84017300     0x84    add a5,a5,s1
    0x84017302     0x86    ld a5,0(a5)
    0x84017304     0x88    sd a5,8(a4)
    0x84017306     0x8a    bgeu a3,s0,ffffffff84017322 <invokeTCB_ReadRegisters+0xa6>
    0x8401730a     0x8e    addi a2,a2,1
    0x8401730c     0x90    addi a4,a4,8
    0x8401730e     0x92    bne a3,a1,ffffffff840172f8 <invokeTCB_ReadRegisters+0x7c>
    0x84017312     0x96    j ffffffff84017322 <invokeTCB_ReadRegisters+0xa6>
    0x84017314     0x98    jal ra,ffffffff840137e4 <suspend>
    0x84017318     0x9c    j ffffffff84017298 <invokeTCB_ReadRegisters+0x1c>
    0x8401731a     0x9e    li a3,1
    0x8401731c     0xa0    beqz a0,ffffffff8401738e <invokeTCB_ReadRegisters+0x112>
    0x8401731e     0xa2    bltu a3,s0,ffffffff840172e2 <invokeTCB_ReadRegisters+0x66>
    0x84017322     0xa6    li a5,16
    0x84017324     0xa8    bltu a5,s0,ffffffff84017358 <invokeTCB_ReadRegisters+0xdc>
    0x84017328     0xac    li a5,0
    0x8401732a     0xae    add a5,a5,a3
    0x8401732c     0xb0    andi a5,a5,127
    0x84017330     0xb4    sd a5,80(s2)
    0x84017334     0xb8    li a1,1
    0x84017336     0xba    mv a0,s2
    0x84017338     0xbc    jal ra,ffffffff84012996 <setThreadState>
    0x8401733c     0xc0    li a0,0
    0x8401733e     0xc2    ld ra,40(sp)          ; stack access
    0x84017340     0xc4    ld s0,32(sp)          ; stack access
    0x84017342     0xc6    ld s1,24(sp)          ; stack access
    0x84017344     0xc8    ld s2,16(sp)          ; stack access
    0x84017346     0xca    ld s3,8(sp)           ; stack access
    0x84017348     0xcc    addi sp,sp,48
    0x8401734a     0xce    ret
    0x8401734c     0xd0    li a3,2
    0x8401734e     0xd2    j ffffffff8401731c <invokeTCB_ReadRegisters+0xa0>
    0x84017350     0xd4    li a3,3
    0x84017352     0xd6    j ffffffff8401731c <invokeTCB_ReadRegisters+0xa0>
    0x84017354     0xd8    mv a5,s0
    0x84017356     0xda    j ffffffff8401732a <invokeTCB_ReadRegisters+0xae>
    0x84017358     0xdc    ld a5,72(s1)
    0x8401735a     0xde    sd a5,136(a0)
    0x8401735c     0xe0    auipc a1,0x3
    0x84017360     0xe4    addi a1,a1,-1059 # ffffffff84019f39 <gpRegisters+0x1>
    0x84017364     0xe8    addi a0,a0,144
    0x84017368     0xec    addi s0,s0,-16
    0x8401736a     0xee    li a5,1
    0x8401736c     0xf0    li a2,16
    0x8401736e     0xf2    beq a5,s0,ffffffff84017354 <invokeTCB_ReadRegisters+0xd8>
    0x84017372     0xf6    lbu a4,0(a1)
    0x84017376     0xfa    slli a4,a4,0x3
    0x84017378     0xfc    add a4,a4,s1
    0x8401737a     0xfe    ld a4,0(a4)
    0x8401737c    0x100    sd a4,0(a0)
    0x8401737e    0x102    addi a5,a5,1
    0x84017380    0x104    addi a1,a1,1
    0x84017382    0x106    addi a0,a0,8
    0x84017384    0x108    bne a5,a2,ffffffff8401736e <invokeTCB_ReadRegisters+0xf2>
    0x84017388    0x10c    j ffffffff8401732a <invokeTCB_ReadRegisters+0xae>
    0x8401738a    0x10e    mv a3,s0
    0x8401738c    0x110    bnez a0,ffffffff84017322 <invokeTCB_ReadRegisters+0xa6>
    0x8401738e    0x112    li a5,0
    0x84017390    0x114    j ffffffff8401732a <invokeTCB_ReadRegisters+0xae>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
106 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 173 nodes.

Section decodeCopyRegisters (232 of 301)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 64 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x840171d2     0x0    addi sp,sp,-48
    0x840171d4     0x2    sd ra,40(sp)          ; stack access
    0x840171d6     0x4    sd s0,32(sp)          ; stack access
    0x840171d8     0x6    sd s1,24(sp)          ; stack access
    0x840171da     0x8    sd a0,0(sp)           ; stack access
    0x840171dc     0xa    sd a1,8(sp)           ; stack access
    0x840171de     0xc    beqz a2,ffffffff84017256 <decodeCopyRegisters+0x84>
    0x840171e0     0xe    auipc a5,0x4
    0x840171e4    0x12    ld a5,-336(a5) # ffffffff8401b090 <current_extra_caps>
    0x840171e8    0x16    beqz a5,ffffffff84017256 <decodeCopyRegisters+0x84>
    0x840171ea    0x18    ld a5,0(a5)
    0x840171ec    0x1a    srli a2,a5,0x3b
    0x840171f0    0x1e    li a4,12
    0x840171f2    0x20    bne a2,a4,ffffffff84017264 <decodeCopyRegisters+0x92>
    0x840171f6    0x24    slli s0,a5,0x19
    0x840171fa    0x28    srli s0,s0,0x19
    0x840171fc    0x2a    srli a5,a5,0x26
    0x840171fe    0x2c    andi a5,a5,1
    0x84017200    0x2e    beqz a5,ffffffff84017208 <decodeCopyRegisters+0x36>
    0x84017202    0x30    li a5,-1
    0x84017204    0x32    slli a5,a5,0x27
    0x84017206    0x34    or s0,s0,a5
    0x84017208    0x36    mv a1,a3
    0x8401720a    0x38    li a0,0
    0x8401720c    0x3a    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017210    0x3e    mv s1,a0
    0x84017212    0x40    li a1,2
    0x84017214    0x42    auipc a0,0x16
    0x84017218    0x46    ld a0,-444(a0) # ffffffff8402d058 <ksCurThread>
    0x8401721c    0x4a    jal ra,ffffffff84012996 <setThreadState>
    0x84017220    0x4e    ld a5,0(sp)           ; stack access
    0x84017222    0x50    slli a0,a5,0x19
    0x84017226    0x54    srli a0,a0,0x19
    0x84017228    0x56    srli a5,a5,0x26
    0x8401722a    0x58    andi a5,a5,1
    0x8401722c    0x5a    beqz a5,ffffffff84017234 <decodeCopyRegisters+0x62>
    0x8401722e    0x5c    li a5,-1
    0x84017230    0x5e    slli a5,a5,0x27
    0x84017232    0x60    or a0,a0,a5
    0x84017234    0x62    li a6,0
    0x84017236    0x64    andi a5,s1,8
    0x8401723a    0x68    andi a4,s1,4
    0x8401723e    0x6c    andi a3,s1,2
    0x84017242    0x70    andi a2,s1,1
    0x84017246    0x74    mv a1,s0
    0x84017248    0x76    jal ra,ffffffff84017124 <invokeTCB_CopyRegisters>
    0x8401724c    0x7a    ld ra,40(sp)          ; stack access
    0x8401724e    0x7c    ld s0,32(sp)          ; stack access
    0x84017250    0x7e    ld s1,24(sp)          ; stack access
    0x84017252    0x80    addi sp,sp,48
    0x84017254    0x82    ret
    0x84017256    0x84    li a5,7
    0x84017258    0x86    auipc a4,0x4
    0x8401725c    0x8a    sd a5,-1560(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017260    0x8e    li a0,3
    0x84017262    0x90    j ffffffff8401724c <decodeCopyRegisters+0x7a>
    0x84017264    0x92    auipc a5,0x3
    0x84017268    0x96    addi a5,a5,1436 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401726c    0x9a    li a4,2
    0x8401726e    0x9c    sd a4,1088(a5)
    0x84017272    0xa0    li a4,1
    0x84017274    0xa2    sd a4,1048(a5)
    0x84017278    0xa6    li a0,3
    0x8401727a    0xa8    j ffffffff8401724c <decodeCopyRegisters+0x7a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 93 nodes.

Section invokeTCB_CopyRegisters (233 of 301)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x84017124     0x0    addi sp,sp,-48
    0x84017126     0x2    sd ra,40(sp)          ; stack access
    0x84017128     0x4    sd s0,32(sp)          ; stack access
    0x8401712a     0x6    sd s1,24(sp)          ; stack access
    0x8401712c     0x8    sd s2,16(sp)          ; stack access
    0x8401712e     0xa    sd s3,8(sp)           ; stack access
    0x84017130     0xc    sd s4,0(sp)           ; stack access
    0x84017132     0xe    mv s0,a0
    0x84017134    0x10    mv s1,a1
    0x84017136    0x12    mv s4,a3
    0x84017138    0x14    mv s3,a4
    0x8401713a    0x16    mv s2,a5
    0x8401713c    0x18    bnez a2,ffffffff840171bc <invokeTCB_CopyRegisters+0x98>
    0x8401713e    0x1a    bnez s4,ffffffff840171c4 <invokeTCB_CopyRegisters+0xa0>
    0x84017142    0x1e    beqz s3,ffffffff84017174 <invokeTCB_CopyRegisters+0x50>
    0x84017146    0x22    auipc a3,0x3
    0x8401714a    0x26    addi a3,a3,-542 # ffffffff84019f28 <frameRegisters>
    0x8401714e    0x2a    auipc a1,0x3
    0x84017152    0x2e    addi a1,a1,-534 # ffffffff84019f38 <gpRegisters>
    0x84017156    0x32    lbu a4,0(a3)
    0x8401715a    0x36    slli a4,a4,0x3
    0x8401715c    0x38    add a2,s1,a4
    0x84017160    0x3c    ld a2,0(a2)
    0x84017162    0x3e    add a4,a4,s0
    0x84017164    0x40    sd a2,0(a4)
    0x84017166    0x42    addi a3,a3,1
    0x84017168    0x44    bne a3,a1,ffffffff84017156 <invokeTCB_CopyRegisters+0x32>
    0x8401716c    0x48    ld a5,264(s0)
    0x84017170    0x4c    sd a5,272(s0)
    0x84017174    0x50    beqz s2,ffffffff8401719e <invokeTCB_CopyRegisters+0x7a>
    0x84017178    0x54    auipc a4,0x3
    0x8401717c    0x58    addi a4,a4,-576 # ffffffff84019f38 <gpRegisters>
    0x84017180    0x5c    auipc a2,0x3
    0x84017184    0x60    addi a2,a2,-568 # ffffffff84019f48 <gpRegisters+0x10>
    0x84017188    0x64    lbu a5,0(a4)
    0x8401718c    0x68    slli a5,a5,0x3
    0x8401718e    0x6a    add a3,s1,a5
    0x84017192    0x6e    ld a3,0(a3)
    0x84017194    0x70    add a5,a5,s0
    0x84017196    0x72    sd a3,0(a5)
    0x84017198    0x74    addi a4,a4,1
    0x8401719a    0x76    bne a4,a2,ffffffff84017188 <invokeTCB_CopyRegisters+0x64>
    0x8401719e    0x7a    auipc a5,0x16
    0x840171a2    0x7e    ld a5,-326(a5) # ffffffff8402d058 <ksCurThread>
    0x840171a6    0x82    beq a5,s0,ffffffff840171cc <invokeTCB_CopyRegisters+0xa8>
    0x840171aa    0x86    li a0,0
    0x840171ac    0x88    ld ra,40(sp)          ; stack access
    0x840171ae    0x8a    ld s0,32(sp)          ; stack access
    0x840171b0    0x8c    ld s1,24(sp)          ; stack access
    0x840171b2    0x8e    ld s2,16(sp)          ; stack access
    0x840171b4    0x90    ld s3,8(sp)           ; stack access
    0x840171b6    0x92    ld s4,0(sp)           ; stack access
    0x840171b8    0x94    addi sp,sp,48
    0x840171ba    0x96    ret
    0x840171bc    0x98    mv a0,a1
    0x840171be    0x9a    jal ra,ffffffff840137e4 <suspend>
    0x840171c2    0x9e    j ffffffff8401713e <invokeTCB_CopyRegisters+0x1a>
    0x840171c4    0xa0    mv a0,s0
    0x840171c6    0xa2    jal ra,ffffffff84013d60 <restart>
    0x840171ca    0xa6    j ffffffff84017142 <invokeTCB_CopyRegisters+0x1e>
    0x840171cc    0xa8    jal ra,ffffffff840128fc <rescheduleRequired>
    0x840171d0    0xac    j ffffffff840171aa <invokeTCB_CopyRegisters+0x86>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 101 nodes.

Section decodeSetMCPriority (234 of 301)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 77 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x84016e82     0x0    addi sp,sp,-80
    0x84016e84     0x2    sd ra,72(sp)          ; stack access
    0x84016e86     0x4    sd s0,64(sp)          ; stack access
    0x84016e88     0x6    sd s1,56(sp)          ; stack access
    0x84016e8a     0x8    sd a0,16(sp)          ; stack access
    0x84016e8c     0xa    sd a1,24(sp)          ; stack access
    0x84016e8e     0xc    beqz a2,ffffffff84016f04 <decodeSetMCPriority+0x82>
    0x84016e90     0xe    auipc a5,0x4
    0x84016e94    0x12    ld a5,512(a5) # ffffffff8401b090 <current_extra_caps>
    0x84016e98    0x16    beqz a5,ffffffff84016f04 <decodeSetMCPriority+0x82>
    0x84016e9a    0x18    ld a5,0(a5)
    0x84016e9c    0x1a    srli a2,a5,0x3b
    0x84016ea0    0x1e    li a4,12
    0x84016ea2    0x20    bne a2,a4,ffffffff84016f1a <decodeSetMCPriority+0x98>
    0x84016ea6    0x24    slli s0,a5,0x19
    0x84016eaa    0x28    srli s0,s0,0x19
    0x84016eac    0x2a    srli a5,a5,0x26
    0x84016eae    0x2c    andi a5,a5,1
    0x84016eb0    0x2e    beqz a5,ffffffff84016eb8 <decodeSetMCPriority+0x36>
    0x84016eb2    0x30    li a5,-1
    0x84016eb4    0x32    slli a5,a5,0x27
    0x84016eb6    0x34    or s0,s0,a5
    0x84016eb8    0x36    mv a1,a3
    0x84016eba    0x38    li a0,0
    0x84016ebc    0x3a    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016ec0    0x3e    mv s1,a0
    0x84016ec2    0x40    ld a5,352(s0)
    0x84016ec6    0x44    bltu a5,a0,ffffffff84016f32 <decodeSetMCPriority+0xb0>
    0x84016eca    0x48    li a1,2
    0x84016ecc    0x4a    auipc a0,0x16
    0x84016ed0    0x4e    ld a0,396(a0) # ffffffff8402d058 <ksCurThread>
    0x84016ed4    0x52    jal ra,ffffffff84012996 <setThreadState>
    0x84016ed8    0x56    ld a5,16(sp)          ; stack access
    0x84016eda    0x58    slli a0,a5,0x19
    0x84016ede    0x5c    srli a0,a0,0x19
    0x84016ee0    0x5e    srli a5,a5,0x26
    0x84016ee2    0x60    andi a5,a5,1
    0x84016ee4    0x62    beqz a5,ffffffff84016eec <decodeSetMCPriority+0x6a>
    0x84016ee6    0x64    li a5,-1
    0x84016ee8    0x66    slli a5,a5,0x27
    0x84016eea    0x68    or a0,a0,a5
    0x84016eec    0x6a    li a5,2
    0x84016eee    0x6c    sd a5,0(sp)           ; stack access
    0x84016ef0    0x6e    li a7,0
    0x84016ef2    0x70    li a6,0
    0x84016ef4    0x72    mv a5,s1
    0x84016ef6    0x74    li a4,0
    0x84016ef8    0x76    li a2,0
    0x84016efa    0x78    li a3,0
    0x84016efc    0x7a    li a1,0
    0x84016efe    0x7c    jal ra,ffffffff84016cce <invokeTCB_ThreadControlSched>
    0x84016f02    0x80    j ffffffff84016f10 <decodeSetMCPriority+0x8e>
    0x84016f04    0x82    li a5,7
    0x84016f06    0x84    auipc a4,0x4
    0x84016f0a    0x88    sd a5,-710(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016f0e    0x8c    li a0,3
    0x84016f10    0x8e    ld ra,72(sp)          ; stack access
    0x84016f12    0x90    ld s0,64(sp)          ; stack access
    0x84016f14    0x92    ld s1,56(sp)          ; stack access
    0x84016f16    0x94    addi sp,sp,80
    0x84016f18    0x96    ret
    0x84016f1a    0x98    auipc a5,0x4
    0x84016f1e    0x9c    addi a5,a5,-1818 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016f22    0xa0    li a4,2
    0x84016f24    0xa2    sd a4,1088(a5)
    0x84016f28    0xa6    li a4,1
    0x84016f2a    0xa8    sd a4,1048(a5)
    0x84016f2e    0xac    li a0,3
    0x84016f30    0xae    j ffffffff84016f10 <decodeSetMCPriority+0x8e>
    0x84016f32    0xb0    auipc a4,0x4
    0x84016f36    0xb4    addi a4,a4,-1842 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016f3a    0xb8    li a3,4
    0x84016f3c    0xba    sd a3,1088(a4)
    0x84016f40    0xbe    sd zero,1056(a4)
    0x84016f44    0xc2    sd a5,1064(a4)
    0x84016f48    0xc6    li a0,3
    0x84016f4a    0xc8    j ffffffff84016f10 <decodeSetMCPriority+0x8e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 113 nodes.

Section decodeSetPriority (235 of 301)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 77 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeSetPriority`:

    0x84016db8     0x0    addi sp,sp,-80
    0x84016dba     0x2    sd ra,72(sp)          ; stack access
    0x84016dbc     0x4    sd s0,64(sp)          ; stack access
    0x84016dbe     0x6    sd s1,56(sp)          ; stack access
    0x84016dc0     0x8    sd a0,16(sp)          ; stack access
    0x84016dc2     0xa    sd a1,24(sp)          ; stack access
    0x84016dc4     0xc    beqz a2,ffffffff84016e3a <decodeSetPriority+0x82>
    0x84016dc6     0xe    auipc a5,0x4
    0x84016dca    0x12    ld a5,714(a5) # ffffffff8401b090 <current_extra_caps>
    0x84016dce    0x16    beqz a5,ffffffff84016e3a <decodeSetPriority+0x82>
    0x84016dd0    0x18    ld a5,0(a5)
    0x84016dd2    0x1a    srli a2,a5,0x3b
    0x84016dd6    0x1e    li a4,12
    0x84016dd8    0x20    bne a2,a4,ffffffff84016e50 <decodeSetPriority+0x98>
    0x84016ddc    0x24    slli s0,a5,0x19
    0x84016de0    0x28    srli s0,s0,0x19
    0x84016de2    0x2a    srli a5,a5,0x26
    0x84016de4    0x2c    andi a5,a5,1
    0x84016de6    0x2e    beqz a5,ffffffff84016dee <decodeSetPriority+0x36>
    0x84016de8    0x30    li a5,-1
    0x84016dea    0x32    slli a5,a5,0x27
    0x84016dec    0x34    or s0,s0,a5
    0x84016dee    0x36    mv a1,a3
    0x84016df0    0x38    li a0,0
    0x84016df2    0x3a    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016df6    0x3e    mv s1,a0
    0x84016df8    0x40    ld a5,352(s0)
    0x84016dfc    0x44    bltu a5,a0,ffffffff84016e68 <decodeSetPriority+0xb0>
    0x84016e00    0x48    li a1,2
    0x84016e02    0x4a    auipc a0,0x16
    0x84016e06    0x4e    ld a0,598(a0) # ffffffff8402d058 <ksCurThread>
    0x84016e0a    0x52    jal ra,ffffffff84012996 <setThreadState>
    0x84016e0e    0x56    ld a5,16(sp)          ; stack access
    0x84016e10    0x58    slli a0,a5,0x19
    0x84016e14    0x5c    srli a0,a0,0x19
    0x84016e16    0x5e    srli a5,a5,0x26
    0x84016e18    0x60    andi a5,a5,1
    0x84016e1a    0x62    beqz a5,ffffffff84016e22 <decodeSetPriority+0x6a>
    0x84016e1c    0x64    li a5,-1
    0x84016e1e    0x66    slli a5,a5,0x27
    0x84016e20    0x68    or a0,a0,a5
    0x84016e22    0x6a    li a5,1
    0x84016e24    0x6c    sd a5,0(sp)           ; stack access
    0x84016e26    0x6e    li a7,0
    0x84016e28    0x70    mv a6,s1
    0x84016e2a    0x72    li a5,0
    0x84016e2c    0x74    li a4,0
    0x84016e2e    0x76    li a2,0
    0x84016e30    0x78    li a3,0
    0x84016e32    0x7a    li a1,0
    0x84016e34    0x7c    jal ra,ffffffff84016cce <invokeTCB_ThreadControlSched>
    0x84016e38    0x80    j ffffffff84016e46 <decodeSetPriority+0x8e>
    0x84016e3a    0x82    li a5,7
    0x84016e3c    0x84    auipc a4,0x4
    0x84016e40    0x88    sd a5,-508(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016e44    0x8c    li a0,3
    0x84016e46    0x8e    ld ra,72(sp)          ; stack access
    0x84016e48    0x90    ld s0,64(sp)          ; stack access
    0x84016e4a    0x92    ld s1,56(sp)          ; stack access
    0x84016e4c    0x94    addi sp,sp,80
    0x84016e4e    0x96    ret
    0x84016e50    0x98    auipc a5,0x4
    0x84016e54    0x9c    addi a5,a5,-1616 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016e58    0xa0    li a4,2
    0x84016e5a    0xa2    sd a4,1088(a5)
    0x84016e5e    0xa6    li a4,1
    0x84016e60    0xa8    sd a4,1048(a5)
    0x84016e64    0xac    li a0,3
    0x84016e66    0xae    j ffffffff84016e46 <decodeSetPriority+0x8e>
    0x84016e68    0xb0    auipc a4,0x4
    0x84016e6c    0xb4    addi a4,a4,-1640 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016e70    0xb8    li a3,4
    0x84016e72    0xba    sd a3,1088(a4)
    0x84016e76    0xbe    sd zero,1056(a4)
    0x84016e7a    0xc2    sd a5,1064(a4)
    0x84016e7e    0xc6    li a0,3
    0x84016e80    0xc8    j ffffffff84016e46 <decodeSetPriority+0x8e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 113 nodes.

Section decodeSetTimeoutEndpoint (236 of 301)
=============================================

Deriving specifications
-----------------------

Section `decodeSetTimeoutEndpoint` consists of 61 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `decodeSetTimeoutEndpoint`:

    0x840169c4     0x0    addi sp,sp,-176
    0x840169c6     0x2    sd ra,168(sp)         ; stack access
    0x840169c8     0x4    sd s0,160(sp)         ; stack access
    0x840169ca     0x6    sd s1,152(sp)         ; stack access
    0x840169cc     0x8    sd a0,96(sp)          ; stack access
    0x840169ce     0xa    sd a1,104(sp)         ; stack access
    0x840169d0     0xc    auipc s0,0x4
    0x840169d4    0x10    ld s0,1728(s0) # ffffffff8401b090 <current_extra_caps>
    0x840169d8    0x14    beqz s0,ffffffff84016a4e <decodeSetTimeoutEndpoint+0x8a>
    0x840169da    0x16    mv s1,a2
    0x840169dc    0x18    ld a0,0(s0)
    0x840169de    0x1a    sd a0,112(sp)         ; stack access
    0x840169e0    0x1c    ld a1,8(s0)
    0x840169e2    0x1e    sd a1,120(sp)         ; stack access
    0x840169e4    0x20    jal ra,ffffffff84010206 <validFaultHandler>
    0x840169e8    0x24    beqz a0,ffffffff84016a40 <decodeSetTimeoutEndpoint+0x7c>
    0x840169ea    0x26    li a1,2
    0x840169ec    0x28    auipc a0,0x16
    0x840169f0    0x2c    ld a0,1644(a0) # ffffffff8402d058 <ksCurThread>
    0x840169f4    0x30    jal ra,ffffffff84012996 <setThreadState>
    0x840169f8    0x34    ld a5,96(sp)          ; stack access
    0x840169fa    0x36    slli a0,a5,0x19
    0x840169fe    0x3a    srli a0,a0,0x19
    0x84016a00    0x3c    srli a5,a5,0x26
    0x84016a02    0x3e    andi a5,a5,1
    0x84016a04    0x40    beqz a5,ffffffff84016a0c <decodeSetTimeoutEndpoint+0x48>
    0x84016a06    0x42    li a5,-1
    0x84016a08    0x44    slli a5,a5,0x27
    0x84016a0a    0x46    or a0,a0,a5
    0x84016a0c    0x48    li a5,8
    0x84016a0e    0x4a    sd a5,80(sp)          ; stack access
    0x84016a10    0x4c    sd zero,72(sp)        ; stack access
    0x84016a12    0x4e    sd zero,56(sp)        ; stack access
    0x84016a14    0x50    sd zero,64(sp)        ; stack access
    0x84016a16    0x52    sd zero,48(sp)        ; stack access
    0x84016a18    0x54    sd zero,40(sp)        ; stack access
    0x84016a1a    0x56    sd zero,24(sp)        ; stack access
    0x84016a1c    0x58    sd zero,32(sp)        ; stack access
    0x84016a1e    0x5a    sd zero,16(sp)        ; stack access
    0x84016a20    0x5c    sd zero,0(sp)         ; stack access
    0x84016a22    0x5e    sd zero,8(sp)         ; stack access
    0x84016a24    0x60    mv a7,s0
    0x84016a26    0x62    ld a5,112(sp)         ; stack access
    0x84016a28    0x64    ld a6,120(sp)         ; stack access
    0x84016a2a    0x66    li a4,0
    0x84016a2c    0x68    li a2,0
    0x84016a2e    0x6a    li a3,0
    0x84016a30    0x6c    mv a1,s1
    0x84016a32    0x6e    jal ra,ffffffff840165d8 <invokeTCB_ThreadControlCaps>
    0x84016a36    0x72    ld ra,168(sp)         ; stack access
    0x84016a38    0x74    ld s0,160(sp)         ; stack access
    0x84016a3a    0x76    ld s1,152(sp)         ; stack access
    0x84016a3c    0x78    addi sp,sp,176
    0x84016a3e    0x7a    ret
    0x84016a40    0x7c    li a5,1
    0x84016a42    0x7e    auipc a4,0x4
    0x84016a46    0x82    sd a5,470(a4) # ffffffff8401ac18 <current_syscall_error+0x8>
    0x84016a4a    0x86    li a0,3
    0x84016a4c    0x88    j ffffffff84016a36 <decodeSetTimeoutEndpoint+0x72>
    0x84016a4e    0x8a    li a0,3
    0x84016a50    0x8c    j ffffffff84016a36 <decodeSetTimeoutEndpoint+0x72>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetTimeoutEndpoint` has 100 nodes.

Section decodeDomainInvocation (237 of 301)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 70 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x840164f8     0x0    li a4,29
    0x840164fa     0x2    bne a0,a4,ffffffff84016562 <decodeDomainInvocation+0x6a>
    0x840164fe     0x6    mv a5,a1
    0x84016500     0x8    mv a1,a2
    0x84016502     0xa    beqz a5,ffffffff84016570 <decodeDomainInvocation+0x78>
    0x84016504     0xc    addi sp,sp,-32
    0x84016506     0xe    sd ra,24(sp)          ; stack access
    0x84016508    0x10    sd s0,16(sp)          ; stack access
    0x8401650a    0x12    sd s1,8(sp)           ; stack access
    0x8401650c    0x14    li a0,0
    0x8401650e    0x16    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016512    0x1a    mv s1,a0
    0x84016514    0x1c    li a5,15
    0x84016516    0x1e    bltu a5,a0,ffffffff8401657e <decodeDomainInvocation+0x86>
    0x8401651a    0x22    auipc a5,0x5
    0x8401651e    0x26    ld a5,-1162(a5) # ffffffff8401b090 <current_extra_caps>
    0x84016522    0x2a    beqz a5,ffffffff84016594 <decodeDomainInvocation+0x9c>
    0x84016524    0x2c    ld s0,0(a5)
    0x84016526    0x2e    srli a4,s0,0x3b
    0x8401652a    0x32    li a5,12
    0x8401652c    0x34    bne a4,a5,ffffffff840165a2 <decodeDomainInvocation+0xaa>
    0x84016530    0x38    li a1,2
    0x84016532    0x3a    auipc a0,0x17
    0x84016536    0x3e    ld a0,-1242(a0) # ffffffff8402d058 <ksCurThread>
    0x8401653a    0x42    jal ra,ffffffff84012996 <setThreadState>
    0x8401653e    0x46    slli a0,s0,0x19
    0x84016542    0x4a    srli a0,a0,0x19
    0x84016544    0x4c    srli s0,s0,0x26
    0x84016546    0x4e    andi s0,s0,1
    0x84016548    0x50    beqz s0,ffffffff84016550 <decodeDomainInvocation+0x58>
    0x8401654a    0x52    li a5,-1
    0x8401654c    0x54    slli a5,a5,0x27
    0x8401654e    0x56    or a0,a0,a5
    0x84016550    0x58    mv a1,s1
    0x84016552    0x5a    jal ra,ffffffff8401306a <setDomain>
    0x84016556    0x5e    li a0,0
    0x84016558    0x60    ld ra,24(sp)          ; stack access
    0x8401655a    0x62    ld s0,16(sp)          ; stack access
    0x8401655c    0x64    ld s1,8(sp)           ; stack access
    0x8401655e    0x66    addi sp,sp,32
    0x84016560    0x68    ret
    0x84016562    0x6a    li a5,3
    0x84016564    0x6c    auipc a4,0x4
    0x84016568    0x70    sd a5,1756(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401656c    0x74    li a0,3
    0x8401656e    0x76    ret
    0x84016570    0x78    li a5,7
    0x84016572    0x7a    auipc a4,0x4
    0x84016576    0x7e    sd a5,1742(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401657a    0x82    li a0,3
    0x8401657c    0x84    ret
    0x8401657e    0x86    auipc a5,0x4
    0x84016582    0x8a    addi a5,a5,642 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016586    0x8e    li a4,1
    0x84016588    0x90    sd a4,1088(a5)
    0x8401658c    0x94    sd zero,1040(a5)
    0x84016590    0x98    li a0,3
    0x84016592    0x9a    j ffffffff84016558 <decodeDomainInvocation+0x60>
    0x84016594    0x9c    li a5,7
    0x84016596    0x9e    auipc a4,0x4
    0x8401659a    0xa2    sd a5,1706(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401659e    0xa6    li a0,3
    0x840165a0    0xa8    j ffffffff84016558 <decodeDomainInvocation+0x60>
    0x840165a2    0xaa    auipc a5,0x4
    0x840165a6    0xae    addi a5,a5,606 # ffffffff8401a800 <riscvKSASIDTable>
    0x840165aa    0xb2    li a4,1
    0x840165ac    0xb4    sd a4,1088(a5)
    0x840165b0    0xb8    sd a4,1040(a5)
    0x840165b4    0xbc    li a0,3
    0x840165b6    0xbe    j ffffffff84016558 <decodeDomainInvocation+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
70 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 104 nodes.

Section cteRevoke (238 of 301)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 55 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cteRevoke`:

    0x84015a2a     0x0    addi sp,sp,-64
    0x84015a2c     0x2    sd ra,56(sp)          ; stack access
    0x84015a2e     0x4    sd s0,48(sp)          ; stack access
    0x84015a30     0x6    sd s1,40(sp)          ; stack access
    0x84015a32     0x8    sd s2,32(sp)          ; stack access
    0x84015a34     0xa    sd s3,24(sp)          ; stack access
    0x84015a36     0xc    sd s4,16(sp)          ; stack access
    0x84015a38     0xe    sd s5,8(sp)           ; stack access
    0x84015a3a    0x10    mv s1,a0
    0x84015a3c    0x12    ld a4,24(a0)
    0x84015a3e    0x14    lui a5,0xf8000
    0x84015a42    0x18    srli a5,a5,0x19
    0x84015a44    0x1a    and a0,a4,a5
    0x84015a48    0x1e    srli a4,a4,0x26
    0x84015a4a    0x20    andi a4,a4,1
    0x84015a4c    0x22    beqz a4,ffffffff84015a92 <cteRevoke+0x68>
    0x84015a4e    0x24    li s0,-1
    0x84015a50    0x26    slli s0,s0,0x27
    0x84015a52    0x28    or s0,s0,a0
    0x84015a54    0x2a    li s3,1
    0x84015a56    0x2c    lui s2,0xf8000
    0x84015a5a    0x30    srli s2,s2,0x19
    0x84015a5e    0x34    slli s5,s3,0x26
    0x84015a62    0x38    li s4,-1
    0x84015a64    0x3a    slli s4,s4,0x27
    0x84015a66    0x3c    mv a1,s0
    0x84015a68    0x3e    mv a0,s1
    0x84015a6a    0x40    jal ra,ffffffff84012208 <isMDBParentOf>
    0x84015a6e    0x44    beqz a0,ffffffff84015a96 <cteRevoke+0x6c>
    0x84015a70    0x46    mv a1,s3
    0x84015a72    0x48    mv a0,s0
    0x84015a74    0x4a    jal ra,ffffffff8401585a <cteDelete>
    0x84015a78    0x4e    bnez a0,ffffffff84015a96 <cteRevoke+0x6c>
    0x84015a7a    0x50    jal ra,ffffffff8401578e <preemptionPoint>
    0x84015a7e    0x54    bnez a0,ffffffff84015a96 <cteRevoke+0x6c>
    0x84015a80    0x56    ld a5,24(s1)
    0x84015a82    0x58    and a0,a5,s2
    0x84015a86    0x5c    and a5,a5,s5
    0x84015a8a    0x60    beqz a5,ffffffff84015aa8 <cteRevoke+0x7e>
    0x84015a8c    0x62    or s0,a0,s4
    0x84015a90    0x66    j ffffffff84015a66 <cteRevoke+0x3c>
    0x84015a92    0x68    mv s0,a0
    0x84015a94    0x6a    bnez a0,ffffffff84015a54 <cteRevoke+0x2a>
    0x84015a96    0x6c    ld ra,56(sp)          ; stack access
    0x84015a98    0x6e    ld s0,48(sp)          ; stack access
    0x84015a9a    0x70    ld s1,40(sp)          ; stack access
    0x84015a9c    0x72    ld s2,32(sp)          ; stack access
    0x84015a9e    0x74    ld s3,24(sp)          ; stack access
    0x84015aa0    0x76    ld s4,16(sp)          ; stack access
    0x84015aa2    0x78    ld s5,8(sp)           ; stack access
    0x84015aa4    0x7a    addi sp,sp,64
    0x84015aa6    0x7c    ret
    0x84015aa8    0x7e    beqz a0,ffffffff84015a96 <cteRevoke+0x6c>
    0x84015aaa    0x80    mv s0,a0
    0x84015aac    0x82    j ffffffff84015a66 <cteRevoke+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 89 nodes.

Section c_handle_exception (239 of 301)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 17 instructions.

Skipping 14202573 csrr a0,scause
Switch found.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x8401575c     0x0    addi sp,sp,-16
    0x8401575e     0x2    sd ra,8(sp)           ; stack access
    0x84015760     0x4    csrr a0,scause
    0x84015764     0x8    li a5,15
    0x84015766     0xa    bltu a5,a0,ffffffff84015786 <c_handle_exception+0x2a>
    0x8401576a     0xe    slli a4,a0,0x2
    0x8401576e    0x12    auipc a3,0x4
    0x84015772    0x16    addi a3,a3,1486 # ffffffff84019d3c <msgRegisters+0x2f4>
    0x84015776    0x1a    add a4,a4,a3
    0x84015778    0x1c    lw a5,0(a4)
    0x8401577a    0x1e    add a5,a5,a3
    0x8401577c    0x20    jr a5
    0x8401577e    0x22    jal ra,ffffffff84015598 <handleVMFaultEvent>
    0x84015782    0x26    jal ra,ffffffff840103ee <restore_user_context>
    0x84015786    0x2a    li a1,0
    0x84015788    0x2c    jal ra,ffffffff84015672 <handleUserLevelFault>
    0x8401578c    0x30    j ffffffff84015782 <c_handle_exception+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 64 nodes.

Section chargeBudget (240 of 301)
=================================

Deriving specifications
-----------------------

Section `chargeBudget` consists of 63 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `chargeBudget`:

    0x8401523c     0x0    addi sp,sp,-32
    0x8401523e     0x2    sd ra,24(sp)          ; stack access
    0x84015240     0x4    sd s0,16(sp)          ; stack access
    0x84015242     0x6    sd s1,8(sp)           ; stack access
    0x84015244     0x8    sd s2,0(sp)           ; stack access
    0x84015246     0xa    mv s0,a0
    0x84015248     0xc    mv s2,a1
    0x8401524a     0xe    mv s1,a3
    0x8401524c    0x10    auipc a4,0x18
    0x84015250    0x14    ld a4,-548(a4) # ffffffff8402d028 <ksCurSC>
    0x84015254    0x18    ld a5,0(a4)
    0x84015256    0x1a    bnez a5,ffffffff840152da <chargeBudget+0x9e>
    0x84015258    0x1c    addi a3,a4,88
    0x8401525c    0x20    ld a5,72(a4)
    0x8401525e    0x22    slli a5,a5,0x4
    0x84015260    0x24    add a5,a5,a3
    0x84015262    0x26    ld a2,80(a4)
    0x84015264    0x28    slli a2,a2,0x4
    0x84015266    0x2a    add a2,a2,a3
    0x84015268    0x2c    ld a1,8(a5)
    0x8401526a    0x2e    ld a2,8(a2)
    0x8401526c    0x30    add a2,a2,a1
    0x8401526e    0x32    sd a2,8(a5)
    0x84015270    0x34    ld a5,80(a4)
    0x84015272    0x36    slli a5,a5,0x4
    0x84015274    0x38    add a5,a5,a3
    0x84015276    0x3a    sd zero,8(a5)
    0x8401527a    0x3e    auipc a5,0x18
    0x8401527e    0x42    ld a5,-594(a5) # ffffffff8402d028 <ksCurSC>
    0x84015282    0x46    ld a0,8(a5)
    0x84015284    0x48    add s0,s0,a0
    0x84015286    0x4a    sd s0,8(a5)
    0x84015288    0x4c    auipc a5,0x18
    0x8401528c    0x50    sd zero,-584(a5) # ffffffff8402d040 <ksConsumed>
    0x84015290    0x54    beqz s1,ffffffff840152ce <chargeBudget+0x92>
    0x84015292    0x56    auipc a4,0x18
    0x84015296    0x5a    ld a4,-570(a4) # ffffffff8402d058 <ksCurThread>
    0x8401529a    0x5e    ld a5,280(a4)
    0x8401529e    0x62    andi a5,a5,15
    0x840152a0    0x64    addi a5,a5,-1
    0x840152a2    0x66    li a3,1
    0x840152a4    0x68    bltu a3,a5,ffffffff840152ce <chargeBudget+0x92>
    0x840152a8    0x6c    ld a5,368(a4)
    0x840152ac    0x70    beqz a5,ffffffff840152ce <chargeBudget+0x92>
    0x840152ae    0x72    ld a5,64(a5)
    0x840152b0    0x74    beqz a5,ffffffff840152ce <chargeBudget+0x92>
    0x840152b2    0x76    ld a5,288(a4)
    0x840152b6    0x7a    andi a5,a5,1
    0x840152b8    0x7c    bnez a5,ffffffff840152ce <chargeBudget+0x92>
    0x840152ba    0x7e    mv a0,s2
    0x840152bc    0x80    jal ra,ffffffff840151b8 <endTimeslice>
    0x840152c0    0x84    jal ra,ffffffff840128fc <rescheduleRequired>
    0x840152c4    0x88    li a5,1
    0x840152c6    0x8a    auipc a4,0x18
    0x840152ca    0x8e    sd a5,-654(a4) # ffffffff8402d038 <ksReprogram>
    0x840152ce    0x92    ld ra,24(sp)          ; stack access
    0x840152d0    0x94    ld s0,16(sp)          ; stack access
    0x840152d2    0x96    ld s1,8(sp)           ; stack access
    0x840152d4    0x98    ld s2,0(sp)           ; stack access
    0x840152d6    0x9a    addi sp,sp,32
    0x840152d8    0x9c    ret
    0x840152da    0x9e    jal ra,ffffffff8401166a <refill_budget_check>
    0x840152de    0xa2    j ffffffff8401527a <chargeBudget+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chargeBudget` has 106 nodes.

Section endTimeslice (241 of 301)
=================================

Deriving specifications
-----------------------

Section `endTimeslice` consists of 44 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `endTimeslice`:

    0x840151b8     0x0    addi sp,sp,-16
    0x840151ba     0x2    sd ra,8(sp)           ; stack access
    0x840151bc     0x4    beqz a0,ffffffff840151e0 <endTimeslice+0x28>
    0x840151be     0x6    auipc a5,0x18
    0x840151c2     0xa    ld a5,-406(a5) # ffffffff8402d028 <ksCurSC>
    0x840151c6     0xe    ld a4,0(a5)
    0x840151c8    0x10    beqz a4,ffffffff840151e0 <endTimeslice+0x28>
    0x840151ca    0x12    auipc a0,0x18
    0x840151ce    0x16    ld a0,-370(a0) # ffffffff8402d058 <ksCurThread>
    0x840151d2    0x1a    andi a4,a0,-1024
    0x840151d6    0x1e    ld a4,128(a4)
    0x840151d8    0x20    srli a4,a4,0x3b
    0x840151da    0x22    li a3,4
    0x840151dc    0x24    beq a4,a3,ffffffff84015214 <endTimeslice+0x5c>
    0x840151e0    0x28    auipc a0,0x18
    0x840151e4    0x2c    ld a0,-440(a0) # ffffffff8402d028 <ksCurSC>
    0x840151e8    0x30    ld a5,72(a0)
    0x840151ea    0x32    slli a5,a5,0x4
    0x840151ec    0x34    addi a4,a0,88
    0x840151f0    0x38    add a5,a5,a4
    0x840151f2    0x3a    auipc a4,0x18
    0x840151f6    0x3e    ld a4,-450(a4) # ffffffff8402d030 <ksCurTime>
    0x840151fa    0x42    addi a4,a4,10
    0x840151fc    0x44    ld a3,0(a5)
    0x840151fe    0x46    bltu a4,a3,ffffffff8401520a <endTimeslice+0x52>
    0x84015202    0x4a    ld a4,8(a5)
    0x84015204    0x4c    li a5,19
    0x84015206    0x4e    bltu a5,a4,ffffffff8401522e <endTimeslice+0x76>
    0x8401520a    0x52    jal ra,ffffffff84013ce4 <postpone>
    0x8401520e    0x56    ld ra,8(sp)           ; stack access
    0x84015210    0x58    addi sp,sp,16
    0x84015212    0x5a    ret
    0x84015214    0x5c    ld a4,48(a5)
    0x84015216    0x5e    auipc a5,0x5
    0x8401521a    0x62    addi a5,a5,1514 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401521e    0x66    li a3,5
    0x84015220    0x68    sd a3,1736(a5)
    0x84015224    0x6c    sd a4,1744(a5)
    0x84015228    0x70    jal ra,ffffffff840151a0 <handleTimeout>
    0x8401522c    0x74    j ffffffff8401520e <endTimeslice+0x56>
    0x8401522e    0x76    auipc a0,0x18
    0x84015232    0x7a    ld a0,-470(a0) # ffffffff8402d058 <ksCurThread>
    0x84015236    0x7e    jal ra,ffffffff84012dd4 <tcbSchedAppend>
    0x8401523a    0x82    j ffffffff8401520e <endTimeslice+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `endTimeslice` has 73 nodes.

Section doIPCTransfer (242 of 301)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 46 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `doIPCTransfer`:

    0x84014e90     0x0    addi sp,sp,-64
    0x84014e92     0x2    sd ra,56(sp)          ; stack access
    0x84014e94     0x4    sd s0,48(sp)          ; stack access
    0x84014e96     0x6    sd s1,40(sp)          ; stack access
    0x84014e98     0x8    sd s2,32(sp)          ; stack access
    0x84014e9a     0xa    sd s3,24(sp)          ; stack access
    0x84014e9c     0xc    sd s4,16(sp)          ; stack access
    0x84014e9e     0xe    sd s5,8(sp)           ; stack access
    0x84014ea0    0x10    mv s0,a0
    0x84014ea2    0x12    mv s5,a1
    0x84014ea4    0x14    mv s2,a2
    0x84014ea6    0x16    mv s4,a3
    0x84014ea8    0x18    mv s1,a4
    0x84014eaa    0x1a    mv a1,a4
    0x84014eac    0x1c    li a0,1
    0x84014eae    0x1e    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84014eb2    0x22    mv s3,a0
    0x84014eb4    0x24    ld a5,312(s0)
    0x84014eb8    0x28    andi a5,a5,15
    0x84014eba    0x2a    bnez a5,ffffffff84014ee8 <doIPCTransfer+0x58>
    0x84014ebc    0x2c    mv a1,s0
    0x84014ebe    0x2e    li a0,0
    0x84014ec0    0x30    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84014ec4    0x34    mv a1,a0
    0x84014ec6    0x36    mv a6,s3
    0x84014ec8    0x38    mv a5,s1
    0x84014eca    0x3a    mv a4,s4
    0x84014ecc    0x3c    mv a3,s2
    0x84014ece    0x3e    mv a2,s5
    0x84014ed0    0x40    mv a0,s0
    0x84014ed2    0x42    jal ra,ffffffff84014d12 <doNormalTransfer>
    0x84014ed6    0x46    ld ra,56(sp)          ; stack access
    0x84014ed8    0x48    ld s0,48(sp)          ; stack access
    0x84014eda    0x4a    ld s1,40(sp)          ; stack access
    0x84014edc    0x4c    ld s2,32(sp)          ; stack access
    0x84014ede    0x4e    ld s3,24(sp)          ; stack access
    0x84014ee0    0x50    ld s4,16(sp)          ; stack access
    0x84014ee2    0x52    ld s5,8(sp)           ; stack access
    0x84014ee4    0x54    addi sp,sp,64
    0x84014ee6    0x56    ret
    0x84014ee8    0x58    mv a3,a0
    0x84014eea    0x5a    mv a2,s1
    0x84014eec    0x5c    mv a1,s0
    0x84014eee    0x5e    mv a0,s2
    0x84014ef0    0x60    jal ra,ffffffff840127be <doFaultTransfer>
    0x84014ef4    0x64    j ffffffff84014ed6 <doIPCTransfer+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 68 nodes.

Section schedContext_bindTCB (243 of 301)
=========================================

Deriving specifications
-----------------------

Section `schedContext_bindTCB` consists of 27 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_bindTCB`:

    0x84013dbe     0x0    addi sp,sp,-16
    0x84013dc0     0x2    sd ra,8(sp)           ; stack access
    0x84013dc2     0x4    sd s0,0(sp)           ; stack access
    0x84013dc4     0x6    mv s0,a1
    0x84013dc6     0x8    sd a0,368(a1) # ffffffffe0000170 <ki_end+0x5bfce170>
    0x84013dca     0xc    sd a1,24(a0)
    0x84013dcc     0xe    jal ra,ffffffff84013d0a <schedContext_resume>
    0x84013dd0    0x12    ld a5,280(s0)
    0x84013dd4    0x16    andi a5,a5,15
    0x84013dd6    0x18    addi a5,a5,-1
    0x84013dd8    0x1a    li a4,1
    0x84013dda    0x1c    bgeu a4,a5,ffffffff84013de6 <schedContext_bindTCB+0x28>
    0x84013dde    0x20    ld ra,8(sp)           ; stack access
    0x84013de0    0x22    ld s0,0(sp)           ; stack access
    0x84013de2    0x24    addi sp,sp,16
    0x84013de4    0x26    ret
    0x84013de6    0x28    ld a5,368(s0)
    0x84013dea    0x2c    beqz a5,ffffffff84013dde <schedContext_bindTCB+0x20>
    0x84013dec    0x2e    ld a5,64(a5)
    0x84013dee    0x30    beqz a5,ffffffff84013dde <schedContext_bindTCB+0x20>
    0x84013df0    0x32    ld a5,288(s0)
    0x84013df4    0x36    andi a5,a5,1
    0x84013df6    0x38    bnez a5,ffffffff84013dde <schedContext_bindTCB+0x20>
    0x84013df8    0x3a    mv a0,s0
    0x84013dfa    0x3c    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84013dfe    0x40    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84013e02    0x44    j ffffffff84013dde <schedContext_bindTCB+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_bindTCB` has 49 nodes.

Section decodeIRQHandlerInvocation (244 of 301)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 73 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x84013b8a     0x0    addi sp,sp,-48
    0x84013b8c     0x2    sd ra,40(sp)          ; stack access
    0x84013b8e     0x4    sd s0,32(sp)          ; stack access
    0x84013b90     0x6    sd s1,24(sp)          ; stack access
    0x84013b92     0x8    mv s0,a1
    0x84013b94     0xa    li a5,27
    0x84013b96     0xc    beq a0,a5,ffffffff84013bd8 <decodeIRQHandlerInvocation+0x4e>
    0x84013b9a    0x10    li a5,28
    0x84013b9c    0x12    beq a0,a5,ffffffff84013c3c <decodeIRQHandlerInvocation+0xb2>
    0x84013ba0    0x16    li a5,26
    0x84013ba2    0x18    beq a0,a5,ffffffff84013bb4 <decodeIRQHandlerInvocation+0x2a>
    0x84013ba6    0x1c    li a5,3
    0x84013ba8    0x1e    auipc a4,0x7
    0x84013bac    0x22    sd a5,152(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013bb0    0x26    li a0,3
    0x84013bb2    0x28    j ffffffff84013bce <decodeIRQHandlerInvocation+0x44>
    0x84013bb4    0x2a    li a1,2
    0x84013bb6    0x2c    auipc a0,0x19
    0x84013bba    0x30    ld a0,1186(a0) # ffffffff8402d058 <ksCurThread>
    0x84013bbe    0x34    jal ra,ffffffff84012996 <setThreadState>
    0x84013bc2    0x38    sext.w a1,s0
    0x84013bc6    0x3c    lui a5,0xcc202
    0x84013bca    0x40    sw a1,4(a5)
    0x84013bcc    0x42    li a0,0
    0x84013bce    0x44    ld ra,40(sp)          ; stack access
    0x84013bd0    0x46    ld s0,32(sp)          ; stack access
    0x84013bd2    0x48    ld s1,24(sp)          ; stack access
    0x84013bd4    0x4a    addi sp,sp,48
    0x84013bd6    0x4c    ret
    0x84013bd8    0x4e    auipc s1,0x7
    0x84013bdc    0x52    ld s1,1208(s1) # ffffffff8401b090 <current_extra_caps>
    0x84013be0    0x56    beqz s1,ffffffff84013c10 <decodeIRQHandlerInvocation+0x86>
    0x84013be2    0x58    ld a5,0(s1)
    0x84013be4    0x5a    sd a5,0(sp)           ; stack access
    0x84013be6    0x5c    ld a4,8(s1)
    0x84013be8    0x5e    sd a4,8(sp)           ; stack access
    0x84013bea    0x60    srli a3,a5,0x3b
    0x84013bee    0x64    li a4,6
    0x84013bf0    0x66    bne a3,a4,ffffffff84013bfa <decodeIRQHandlerInvocation+0x70>
    0x84013bf4    0x6a    srli a5,a5,0x39
    0x84013bf6    0x6c    andi a5,a5,1
    0x84013bf8    0x6e    bnez a5,ffffffff84013c1e <decodeIRQHandlerInvocation+0x94>
    0x84013bfa    0x70    auipc a5,0x7
    0x84013bfe    0x74    addi a5,a5,-1018 # ffffffff8401a800 <riscvKSASIDTable>
    0x84013c02    0x78    li a4,2
    0x84013c04    0x7a    sd a4,1088(a5)
    0x84013c08    0x7e    sd zero,1048(a5)
    0x84013c0c    0x82    li a0,3
    0x84013c0e    0x84    j ffffffff84013bce <decodeIRQHandlerInvocation+0x44>
    0x84013c10    0x86    li a5,7
    0x84013c12    0x88    auipc a4,0x7
    0x84013c16    0x8c    sd a5,46(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013c1a    0x90    li a0,3
    0x84013c1c    0x92    j ffffffff84013bce <decodeIRQHandlerInvocation+0x44>
    0x84013c1e    0x94    li a1,2
    0x84013c20    0x96    auipc a0,0x19
    0x84013c24    0x9a    ld a0,1080(a0) # ffffffff8402d058 <ksCurThread>
    0x84013c28    0x9e    jal ra,ffffffff84012996 <setThreadState>
    0x84013c2c    0xa2    mv a3,s1
    0x84013c2e    0xa4    ld a1,0(sp)           ; stack access
    0x84013c30    0xa6    ld a2,8(sp)           ; stack access
    0x84013c32    0xa8    mv a0,s0
    0x84013c34    0xaa    jal ra,ffffffff84013b3a <invokeIRQHandler_SetIRQHandler>
    0x84013c38    0xae    li a0,0
    0x84013c3a    0xb0    j ffffffff84013bce <decodeIRQHandlerInvocation+0x44>
    0x84013c3c    0xb2    li a1,2
    0x84013c3e    0xb4    auipc a0,0x19
    0x84013c42    0xb8    ld a0,1050(a0) # ffffffff8402d058 <ksCurThread>
    0x84013c46    0xbc    jal ra,ffffffff84012996 <setThreadState>
    0x84013c4a    0xc0    mv a0,s0
    0x84013c4c    0xc2    jal ra,ffffffff84013b70 <invokeIRQHandler_ClearIRQHandler>
    0x84013c50    0xc6    li a0,0
    0x84013c52    0xc8    j ffffffff84013bce <decodeIRQHandlerInvocation+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 112 nodes.

Section cteDeleteOne (245 of 301)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 23 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteDeleteOne`:

    0x84013b06     0x0    ld a5,0(a0)
    0x84013b08     0x2    srli a5,a5,0x3b
    0x84013b0a     0x4    bnez a5,ffffffff84013b0e <cteDeleteOne+0x8>
    0x84013b0c     0x6    ret
    0x84013b0e     0x8    addi sp,sp,-64
    0x84013b10     0xa    sd ra,56(sp)          ; stack access
    0x84013b12     0xc    sd s0,48(sp)          ; stack access
    0x84013b14     0xe    mv s0,a0
    0x84013b16    0x10    jal ra,ffffffff84012382 <isFinalCapability>
    0x84013b1a    0x14    mv a3,a0
    0x84013b1c    0x16    li a4,1
    0x84013b1e    0x18    ld a1,0(s0)
    0x84013b20    0x1a    ld a2,8(s0)
    0x84013b22    0x1c    mv a0,sp
    0x84013b24    0x1e    jal ra,ffffffff84013874 <finaliseCap>
    0x84013b28    0x22    li a1,0
    0x84013b2a    0x24    li a2,0
    0x84013b2c    0x26    mv a0,s0
    0x84013b2e    0x28    jal ra,ffffffff84011d2c <emptySlot>
    0x84013b32    0x2c    ld ra,56(sp)          ; stack access
    0x84013b34    0x2e    ld s0,48(sp)          ; stack access
    0x84013b36    0x30    addi sp,sp,64
    0x84013b38    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 37 nodes.

Section schedContext_unbindTCB (246 of 301)
===========================================

Deriving specifications
-----------------------

Section `schedContext_unbindTCB` consists of 20 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `schedContext_unbindTCB`:

    0x84013828     0x0    addi sp,sp,-16
    0x8401382a     0x2    sd ra,8(sp)           ; stack access
    0x8401382c     0x4    sd s0,0(sp)           ; stack access
    0x8401382e     0x6    mv s0,a0
    0x84013830     0x8    auipc a5,0x1a
    0x84013834     0xc    ld a5,-2008(a5) # ffffffff8402d058 <ksCurThread>
    0x84013838    0x10    beq a5,a1,ffffffff8401385a <schedContext_unbindTCB+0x32>
    0x8401383c    0x14    ld a0,24(s0)
    0x8401383e    0x16    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x84013842    0x1a    ld a0,24(s0)
    0x84013844    0x1c    jal ra,ffffffff84013794 <tcbReleaseRemove>
    0x84013848    0x20    ld a5,24(s0)
    0x8401384a    0x22    sd zero,368(a5)
    0x8401384e    0x26    sd zero,24(s0)
    0x84013852    0x2a    ld ra,8(sp)           ; stack access
    0x84013854    0x2c    ld s0,0(sp)           ; stack access
    0x84013856    0x2e    addi sp,sp,16
    0x84013858    0x30    ret
    0x8401385a    0x32    jal ra,ffffffff840128fc <rescheduleRequired>
    0x8401385e    0x36    j ffffffff8401383c <schedContext_unbindTCB+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_unbindTCB` has 36 nodes.

Section setDomain (247 of 301)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 33 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setDomain`:

    0x8401306a     0x0    addi sp,sp,-32
    0x8401306c     0x2    sd ra,24(sp)          ; stack access
    0x8401306e     0x4    sd s0,16(sp)          ; stack access
    0x84013070     0x6    sd s1,8(sp)           ; stack access
    0x84013072     0x8    mv s0,a0
    0x84013074     0xa    mv s1,a1
    0x84013076     0xc    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x8401307a    0x10    sd s1,344(s0)
    0x8401307e    0x14    ld a5,280(s0)
    0x84013082    0x18    andi a5,a5,15
    0x84013084    0x1a    addi a5,a5,-1
    0x84013086    0x1c    li a4,1
    0x84013088    0x1e    bgeu a4,a5,ffffffff840130a2 <setDomain+0x38>
    0x8401308c    0x22    auipc a5,0x1a
    0x84013090    0x26    ld a5,-52(a5) # ffffffff8402d058 <ksCurThread>
    0x84013094    0x2a    beq a5,s0,ffffffff840130bc <setDomain+0x52>
    0x84013098    0x2e    ld ra,24(sp)          ; stack access
    0x8401309a    0x30    ld s0,16(sp)          ; stack access
    0x8401309c    0x32    ld s1,8(sp)           ; stack access
    0x8401309e    0x34    addi sp,sp,32
    0x840130a0    0x36    ret
    0x840130a2    0x38    ld a5,368(s0)
    0x840130a6    0x3c    beqz a5,ffffffff8401308c <setDomain+0x22>
    0x840130a8    0x3e    ld a5,64(a5)
    0x840130aa    0x40    beqz a5,ffffffff8401308c <setDomain+0x22>
    0x840130ac    0x42    ld a5,288(s0)
    0x840130b0    0x46    andi a5,a5,1
    0x840130b2    0x48    bnez a5,ffffffff8401308c <setDomain+0x22>
    0x840130b4    0x4a    mv a0,s0
    0x840130b6    0x4c    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x840130ba    0x50    j ffffffff8401308c <setDomain+0x22>
    0x840130bc    0x52    jal ra,ffffffff840128fc <rescheduleRequired>
    0x840130c0    0x56    j ffffffff84013098 <setDomain+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
33 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 59 nodes.

Section chooseThread (248 of 301)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 43 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `chooseThread`:

    0x84012f6e     0x0    addi sp,sp,-32
    0x84012f70     0x2    sd ra,24(sp)          ; stack access
    0x84012f72     0x4    sd s0,16(sp)          ; stack access
    0x84012f74     0x6    sd s1,8(sp)           ; stack access
    0x84012f76     0x8    auipc s1,0x1a
    0x84012f7a     0xc    ld s1,162(s1) # ffffffff8402d018 <ksCurDomain>
    0x84012f7e    0x10    slli a4,s1,0x3
    0x84012f82    0x14    auipc a5,0x8
    0x84012f86    0x18    addi a5,a5,-1922 # ffffffff8401a800 <riscvKSASIDTable>
    0x84012f8a    0x1c    add a5,a5,a4
    0x84012f8c    0x1e    ld a0,1096(a5)
    0x84012f90    0x22    beqz a0,ffffffff84012fe4 <chooseThread+0x76>
    0x84012f92    0x24    jal ra,ffffffff840100cc <clzl>
    0x84012f96    0x28    mv s0,a0
    0x84012f98    0x2a    slli a5,s1,0x2
    0x84012f9c    0x2e    addi a4,a0,-60
    0x84012fa0    0x32    add a5,a5,a4
    0x84012fa2    0x34    slli a5,a5,0x3
    0x84012fa4    0x36    auipc a4,0x8
    0x84012fa8    0x3a    addi a4,a4,-1956 # ffffffff8401a800 <riscvKSASIDTable>
    0x84012fac    0x3e    add a5,a5,a4
    0x84012fae    0x40    ld a0,1224(a5)
    0x84012fb2    0x44    jal ra,ffffffff840100cc <clzl>
    0x84012fb6    0x48    li a5,63
    0x84012fba    0x4c    sub s0,a5,s0
    0x84012fbe    0x50    slli s0,s0,0x6
    0x84012fc0    0x52    sub a5,a5,a0
    0x84012fc2    0x54    or s0,s0,a5
    0x84012fc4    0x56    slli s1,s1,0x8
    0x84012fc6    0x58    add s0,s0,s1
    0x84012fc8    0x5a    slli s0,s0,0x4
    0x84012fca    0x5c    auipc s1,0x9
    0x84012fce    0x60    addi s1,s1,54 # ffffffff8401c000 <ksReadyQueues>
    0x84012fd2    0x64    add s0,s0,s1
    0x84012fd4    0x66    ld a0,0(s0)
    0x84012fd6    0x68    jal ra,ffffffff84012f4c <switchToThread>
    0x84012fda    0x6c    ld ra,24(sp)          ; stack access
    0x84012fdc    0x6e    ld s0,16(sp)          ; stack access
    0x84012fde    0x70    ld s1,8(sp)           ; stack access
    0x84012fe0    0x72    addi sp,sp,32
    0x84012fe2    0x74    ret
    0x84012fe4    0x76    jal ra,ffffffff84011858 <switchToIdleThread>
    0x84012fe8    0x7a    j ffffffff84012fda <chooseThread+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 60 nodes.

Section cancelAllSignals (249 of 301)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 44 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllSignals`:

    0x84012d68     0x0    ld a5,0(a0)
    0x84012d6a     0x2    andi a3,a5,3
    0x84012d6e     0x6    li a4,1
    0x84012d70     0x8    beq a3,a4,ffffffff84012d76 <cancelAllSignals+0xe>
    0x84012d74     0xc    ret
    0x84012d76     0xe    addi sp,sp,-16
    0x84012d78    0x10    sd ra,8(sp)           ; stack access
    0x84012d7a    0x12    sd s0,0(sp)           ; stack access
    0x84012d7c    0x14    ld a4,8(a0)
    0x84012d7e    0x16    slli s0,a4,0x19
    0x84012d82    0x1a    srli s0,s0,0x19
    0x84012d84    0x1c    srli a3,a4,0x26
    0x84012d88    0x20    andi a3,a3,1
    0x84012d8a    0x22    beqz a3,ffffffff84012dc0 <cancelAllSignals+0x58>
    0x84012d8c    0x24    li a3,-1
    0x84012d8e    0x26    slli a3,a3,0x27
    0x84012d90    0x28    or s0,s0,a3
    0x84012d92    0x2a    and a4,a4,a3
    0x84012d94    0x2c    sd a4,8(a0)
    0x84012d96    0x2e    lui a4,0x2000
    0x84012d9a    0x32    addi a4,a4,-4
    0x84012d9c    0x34    and a5,a5,a4
    0x84012d9e    0x36    sd a5,0(a0)
    0x84012da0    0x38    li a1,2
    0x84012da2    0x3a    mv a0,s0
    0x84012da4    0x3c    jal ra,ffffffff84012996 <setThreadState>
    0x84012da8    0x40    mv a0,s0
    0x84012daa    0x42    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x84012dae    0x46    ld s0,408(s0)
    0x84012db2    0x4a    bnez s0,ffffffff84012da0 <cancelAllSignals+0x38>
    0x84012db4    0x4c    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84012db8    0x50    ld ra,8(sp)           ; stack access
    0x84012dba    0x52    ld s0,0(sp)           ; stack access
    0x84012dbc    0x54    addi sp,sp,16
    0x84012dbe    0x56    ret
    0x84012dc0    0x58    srli a4,a4,0x27
    0x84012dc2    0x5a    slli a4,a4,0x27
    0x84012dc4    0x5c    sd a4,8(a0)
    0x84012dc6    0x5e    lui a4,0x2000
    0x84012dca    0x62    addi a4,a4,-4
    0x84012dcc    0x64    and a5,a5,a4
    0x84012dce    0x66    sd a5,0(a0)
    0x84012dd0    0x68    beqz s0,ffffffff84012db4 <cancelAllSignals+0x4c>
    0x84012dd2    0x6a    j ffffffff84012da0 <cancelAllSignals+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 68 nodes.

Section cancelAllIPC (250 of 301)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 64 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `cancelAllIPC`:

    0x84012cc2     0x0    ld a5,0(a0)
    0x84012cc4     0x2    andi a4,a5,3
    0x84012cc8     0x6    beqz a4,ffffffff84012d66 <cancelAllIPC+0xa4>
    0x84012cca     0x8    addi sp,sp,-48
    0x84012ccc     0xa    sd ra,40(sp)          ; stack access
    0x84012cce     0xc    sd s0,32(sp)          ; stack access
    0x84012cd0     0xe    sd s1,24(sp)          ; stack access
    0x84012cd2    0x10    sd s2,16(sp)          ; stack access
    0x84012cd4    0x12    sd s3,8(sp)           ; stack access
    0x84012cd6    0x14    sd s4,0(sp)           ; stack access
    0x84012cd8    0x16    ld s0,8(a0)
    0x84012cda    0x18    sd zero,8(a0)
    0x84012cde    0x1c    srli a5,a5,0x27
    0x84012ce0    0x1e    slli a5,a5,0x27
    0x84012ce2    0x20    sd a5,0(a0)
    0x84012ce4    0x22    beqz s0,ffffffff84012d52 <cancelAllIPC+0x90>
    0x84012ce6    0x24    lui s3,0xe0000
    0x84012cea    0x28    srli s3,s3,0x19
    0x84012cee    0x2c    li s2,1
    0x84012cf0    0x2e    slli s2,s2,0x26
    0x84012cf2    0x30    li s1,-1
    0x84012cf4    0x32    slli s4,s1,0x28
    0x84012cf8    0x36    addi s4,s4,31
    0x84012cfa    0x38    slli s1,s1,0x27
    0x84012cfc    0x3a    j ffffffff84012d1c <cancelAllIPC+0x5a>
    0x84012cfe    0x3c    bnez a4,ffffffff84012d2e <cancelAllIPC+0x6c>
    0x84012d00    0x3e    ld a5,312(s0)
    0x84012d04    0x42    andi a5,a5,15
    0x84012d06    0x44    bnez a5,ffffffff84012d48 <cancelAllIPC+0x86>
    0x84012d08    0x46    li a1,2
    0x84012d0a    0x48    mv a0,s0
    0x84012d0c    0x4a    jal ra,ffffffff84012996 <setThreadState>
    0x84012d10    0x4e    mv a0,s0
    0x84012d12    0x50    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x84012d16    0x54    ld s0,408(s0)
    0x84012d1a    0x58    beqz s0,ffffffff84012d52 <cancelAllIPC+0x90>
    0x84012d1c    0x5a    ld a5,288(s0)
    0x84012d20    0x5e    srli a5,a5,0x1
    0x84012d22    0x60    and a4,a5,s3
    0x84012d26    0x64    and a5,a5,s2
    0x84012d2a    0x68    beqz a5,ffffffff84012cfe <cancelAllIPC+0x3c>
    0x84012d2c    0x6a    or a4,a4,s1
    0x84012d2e    0x6c    ld a0,0(a4)
    0x84012d30    0x6e    ld a5,288(a0)
    0x84012d34    0x72    and a5,a5,s4
    0x84012d38    0x76    sd a5,288(a0)
    0x84012d3c    0x7a    sd zero,0(a4)
    0x84012d40    0x7e    li a1,0
    0x84012d42    0x80    jal ra,ffffffff84012996 <setThreadState>
    0x84012d46    0x84    j ffffffff84012d00 <cancelAllIPC+0x3e>
    0x84012d48    0x86    li a1,0
    0x84012d4a    0x88    mv a0,s0
    0x84012d4c    0x8a    jal ra,ffffffff84012996 <setThreadState>
    0x84012d50    0x8e    j ffffffff84012d16 <cancelAllIPC+0x54>
    0x84012d52    0x90    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84012d56    0x94    ld ra,40(sp)          ; stack access
    0x84012d58    0x96    ld s0,32(sp)          ; stack access
    0x84012d5a    0x98    ld s1,24(sp)          ; stack access
    0x84012d5c    0x9a    ld s2,16(sp)          ; stack access
    0x84012d5e    0x9c    ld s3,8(sp)           ; stack access
    0x84012d60    0x9e    ld s4,0(sp)           ; stack access
    0x84012d62    0xa0    addi sp,sp,48
    0x84012d64    0xa2    ret
    0x84012d66    0xa4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 106 nodes.

Section activateThread (251 of 301)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 26 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `activateThread`:

    0x84012aa0     0x0    addi sp,sp,-16
    0x84012aa2     0x2    sd ra,8(sp)           ; stack access
    0x84012aa4     0x4    auipc a0,0x1a
    0x84012aa8     0x8    ld a0,1460(a0) # ffffffff8402d058 <ksCurThread>
    0x84012aac     0xc    ld a5,376(a0)
    0x84012ab0    0x10    bnez a5,ffffffff84012ad6 <activateThread+0x36>
    0x84012ab2    0x12    auipc a0,0x1a
    0x84012ab6    0x16    ld a0,1446(a0) # ffffffff8402d058 <ksCurThread>
    0x84012aba    0x1a    ld a5,280(a0)
    0x84012abe    0x1e    andi a5,a5,15
    0x84012ac0    0x20    li a4,2
    0x84012ac2    0x22    beq a5,a4,ffffffff84012adc <activateThread+0x3c>
    0x84012ac6    0x26    li a4,7
    0x84012ac8    0x28    beq a5,a4,ffffffff84012aea <activateThread+0x4a>
    0x84012acc    0x2c    li a4,1
    0x84012ace    0x2e    beq a5,a4,ffffffff84012aea <activateThread+0x4a>
    0x84012ad2    0x32    jal ra,ffffffff84010490 <halt>
    0x84012ad6    0x36    jal ra,ffffffff8401280c <schedContext_completeYieldTo>
    0x84012ada    0x3a    j ffffffff84012ab2 <activateThread+0x12>
    0x84012adc    0x3c    ld a5,264(a0)
    0x84012ae0    0x40    sd a5,272(a0)
    0x84012ae4    0x44    li a1,1
    0x84012ae6    0x46    jal ra,ffffffff84012996 <setThreadState>
    0x84012aea    0x4a    ld ra,8(sp)           ; stack access
    0x84012aec    0x4c    addi sp,sp,16
    0x84012aee    0x4e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 46 nodes.

Section sameRegionAs (252 of 301)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 340 instructions.
Switch found.
Switch found.

RVC_FTTFFT___FFFT_FT.Switch found.


Stack analysis
---------------

22 stack accesses found. Annotated code for `sameRegionAs`:

    0x84011e80      0x0    addi sp,sp,-80
    0x84011e82      0x2    sd ra,72(sp)          ; stack access
    0x84011e84      0x4    sd s0,64(sp)          ; stack access
    0x84011e86      0x6    sd s1,56(sp)          ; stack access
    0x84011e88      0x8    sd s2,48(sp)          ; stack access
    0x84011e8a      0xa    sd s3,40(sp)          ; stack access
    0x84011e8c      0xc    sd s4,32(sp)          ; stack access
    0x84011e8e      0xe    sd a0,16(sp)          ; stack access
    0x84011e90     0x10    sd a1,24(sp)          ; stack access
    0x84011e92     0x12    sd a2,0(sp)           ; stack access
    0x84011e94     0x14    sd a3,8(sp)           ; stack access
    0x84011e96     0x16    mv s0,a2
    0x84011e98     0x18    srli a5,a0,0x3b
    0x84011e9c     0x1c    li a4,24
    0x84011e9e     0x1e    bltu a4,a5,ffffffff840121e8 <sameRegionAs+0x368>
    0x84011ea2     0x22    mv s2,a1
    0x84011ea4     0x24    mv s1,a3
    0x84011ea6     0x26    mv a2,a0
    0x84011ea8     0x28    slli a3,a5,0x2
    0x84011eac     0x2c    auipc a1,0x8
    0x84011eb0     0x30    addi a1,a1,-924 # ffffffff84019b10 <msgRegisters+0xc8>
    0x84011eb4     0x34    add a3,a3,a1
    0x84011eb6     0x36    lw a4,0(a3)
    0x84011eb8     0x38    add a4,a4,a1
    0x84011eba     0x3a    jr a4
    0x84011ebc     0x3c    srli s3,s0,0x3b
    0x84011ec0     0x40    li a5,24
    0x84011ec2     0x42    bltu a5,s3,ffffffff84011eda <sameRegionAs+0x5a>
    0x84011ec6     0x46    slli a4,s3,0x2
    0x84011eca     0x4a    auipc a3,0x8
    0x84011ece     0x4e    addi a3,a3,-854 # ffffffff84019b74 <msgRegisters+0x12c>
    0x84011ed2     0x52    add a4,a4,a3
    0x84011ed4     0x54    lw a5,0(a4)
    0x84011ed6     0x56    add a5,a5,a3
    0x84011ed8     0x58    jr a5
    0x84011eda     0x5a    li a5,13
    0x84011edc     0x5c    bltu a5,s3,ffffffff84011ef2 <sameRegionAs+0x72>
    0x84011ee0     0x60    li a4,1
    0x84011ee2     0x62    sll a4,a4,s3
    0x84011ee6     0x66    lui a0,0x2
    0x84011ee8     0x68    addi a0,a0,10
    0x84011eea     0x6a    and a4,a4,a0
    0x84011eec     0x6c    snez a0,a4
    0x84011ef0     0x70    j ffffffff84011ef8 <sameRegionAs+0x78>
    0x84011ef2     0x72    li a0,0
    0x84011ef4     0x74    j ffffffff84011ef8 <sameRegionAs+0x78>
    0x84011ef6     0x76    li a0,1
    0x84011ef8     0x78    beqz a0,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84011efc     0x7c    slli s4,a2,0x19
    0x84011f00     0x80    srli s4,s4,0x19
    0x84011f04     0x84    srli a2,a2,0x26
    0x84011f06     0x86    andi a2,a2,1
    0x84011f08     0x88    beqz a2,ffffffff84011f12 <sameRegionAs+0x92>
    0x84011f0a     0x8a    li a5,-1
    0x84011f0c     0x8c    slli a5,a5,0x27
    0x84011f0e     0x8e    or s4,s4,a5
    0x84011f12     0x92    ld a0,0(sp)           ; stack access
    0x84011f14     0x94    ld a1,8(sp)           ; stack access
    0x84011f16     0x96    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84011f1a     0x9a    mv a4,a0
    0x84011f1c     0x9c    li a5,24
    0x84011f1e     0x9e    bltu a5,s3,ffffffff84011fac <sameRegionAs+0x12c>
    0x84011f22     0xa2    slli a3,s3,0x2
    0x84011f26     0xa6    auipc a2,0x8
    0x84011f2a     0xaa    addi a2,a2,-846 # ffffffff84019bd8 <msgRegisters+0x190>
    0x84011f2e     0xae    add a3,a3,a2
    0x84011f30     0xb0    lw a5,0(a3)
    0x84011f32     0xb2    add a5,a5,a2
    0x84011f34     0xb4    jr a5
    0x84011f36     0xb6    li a5,6
    0x84011f38     0xb8    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f3a     0xba    andi a5,s1,63
    0x84011f3e     0xbe    li a0,0
    0x84011f40     0xc0    bltu a4,s4,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84011f44     0xc4    li a3,1
    0x84011f46     0xc6    sll a5,a3,a5
    0x84011f4a     0xca    addi a2,a4,-1
    0x84011f4e     0xce    add a2,a2,a5
    0x84011f50     0xd0    sll a5,a3,s2
    0x84011f54     0xd4    addi a5,a5,-1
    0x84011f56     0xd6    add s4,s4,a5
    0x84011f58     0xd8    bltu s4,a2,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84011f5c     0xdc    sltu a0,a2,a4
    0x84011f60     0xe0    xori a0,a0,1
    0x84011f64     0xe4    sext.w a0,a0
    0x84011f66     0xe6    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x84011f68     0xe8    srli a0,s0,0x2f
    0x84011f6c     0xec    andi a5,a0,63
    0x84011f70     0xf0    addi a5,a5,5
    0x84011f72     0xf2    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f74     0xf4    li a5,10
    0x84011f76     0xf6    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f78     0xf8    andi a5,s0,127
    0x84011f7c     0xfc    li a3,64
    0x84011f80    0x100    beq a5,a3,ffffffff84011ff0 <sameRegionAs+0x170>
    0x84011f84    0x104    andi a0,s0,63
    0x84011f88    0x108    addi a5,a0,5 # 2005 <KERNEL_OFFSET-0xfffffffeffffdffb>
    0x84011f8c    0x10c    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f8e    0x10e    li a5,0
    0x84011f90    0x110    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f92    0x112    li a5,0
    0x84011f94    0x114    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f96    0x116    li a5,5
    0x84011f98    0x118    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f9a    0x11a    li a5,0
    0x84011f9c    0x11c    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011f9e    0x11e    li a5,0
    0x84011fa0    0x120    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fa2    0x122    srli a5,s1,0xa
    0x84011fa6    0x126    andi a5,a5,63
    0x84011faa    0x12a    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fac    0x12c    li a5,3
    0x84011fae    0x12e    beq s3,a5,ffffffff84011fd8 <sameRegionAs+0x158>
    0x84011fb2    0x132    li a5,13
    0x84011fb4    0x134    beq s3,a5,ffffffff84011fdc <sameRegionAs+0x15c>
    0x84011fb8    0x138    li a3,1
    0x84011fba    0x13a    li a5,0
    0x84011fbc    0x13c    bne s3,a3,ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fc0    0x140    srli a0,s0,0x39
    0x84011fc4    0x144    andi a5,a0,3
    0x84011fc8    0x148    beq a5,a3,ffffffff84011fe0 <sameRegionAs+0x160>
    0x84011fcc    0x14c    li a3,2
    0x84011fce    0x14e    beq a5,a3,ffffffff84011fe4 <sameRegionAs+0x164>
    0x84011fd2    0x152    beqz a5,ffffffff84011fe8 <sameRegionAs+0x168>
    0x84011fd4    0x154    jal ra,ffffffff84010490 <halt>
    0x84011fd8    0x158    li a5,12
    0x84011fda    0x15a    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fdc    0x15c    li a5,12
    0x84011fde    0x15e    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fe0    0x160    li a5,21
    0x84011fe2    0x162    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fe4    0x164    li a5,30
    0x84011fe6    0x166    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fe8    0x168    li a5,12
    0x84011fea    0x16a    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011fec    0x16c    li a5,4
    0x84011fee    0x16e    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011ff0    0x170    li a5,10
    0x84011ff2    0x172    j ffffffff84011f3e <sameRegionAs+0xbe>
    0x84011ff4    0x174    srli a5,s0,0x3b
    0x84011ff8    0x178    li a4,4
    0x84011ffa    0x17a    li a0,0
    0x84011ffc    0x17c    bne a5,a4,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012000    0x180    slli a5,a2,0x19
    0x84012004    0x184    srli a4,a5,0x19
    0x84012008    0x188    srli a2,a2,0x26
    0x8401200a    0x18a    andi a2,a2,1
    0x8401200c    0x18c    beqz a2,ffffffff84012014 <sameRegionAs+0x194>
    0x8401200e    0x18e    li a5,-1
    0x84012010    0x190    slli a5,a5,0x27
    0x84012012    0x192    or a4,a4,a5
    0x84012014    0x194    slli a5,s0,0x19
    0x84012018    0x198    srli a5,a5,0x19
    0x8401201a    0x19a    srli a0,s0,0x26
    0x8401201e    0x19e    andi a0,a0,1
    0x84012020    0x1a0    beqz a0,ffffffff84012028 <sameRegionAs+0x1a8>
    0x84012022    0x1a2    li a3,-1
    0x84012024    0x1a4    slli a3,a3,0x27
    0x84012026    0x1a6    or a5,a5,a3
    0x84012028    0x1a8    sub a5,a5,a4
    0x8401202a    0x1aa    seqz a0,a5
    0x8401202e    0x1ae    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012030    0x1b0    srli a5,s0,0x3b
    0x84012034    0x1b4    li a4,6
    0x84012036    0x1b6    li a0,0
    0x84012038    0x1b8    bne a5,a4,ffffffff84012138 <sameRegionAs+0x2b8>
    0x8401203c    0x1bc    slli a5,a2,0x19
    0x84012040    0x1c0    srli a4,a5,0x19
    0x84012044    0x1c4    srli a2,a2,0x26
    0x84012046    0x1c6    andi a2,a2,1
    0x84012048    0x1c8    beqz a2,ffffffff84012050 <sameRegionAs+0x1d0>
    0x8401204a    0x1ca    li a5,-1
    0x8401204c    0x1cc    slli a5,a5,0x27
    0x8401204e    0x1ce    or a4,a4,a5
    0x84012050    0x1d0    slli a5,s0,0x19
    0x84012054    0x1d4    srli a5,a5,0x19
    0x84012056    0x1d6    srli a0,s0,0x26
    0x8401205a    0x1da    andi a0,a0,1
    0x8401205c    0x1dc    beqz a0,ffffffff84012064 <sameRegionAs+0x1e4>
    0x8401205e    0x1de    li a3,-1
    0x84012060    0x1e0    slli a3,a3,0x27
    0x84012062    0x1e2    or a5,a5,a3
    0x84012064    0x1e4    sub a5,a5,a4
    0x84012066    0x1e6    seqz a0,a5
    0x8401206a    0x1ea    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x8401206c    0x1ec    srli a5,s0,0x3b
    0x84012070    0x1f0    li a4,10
    0x84012072    0x1f2    li a0,0
    0x84012074    0x1f4    bne a5,a4,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012078    0x1f8    slli a5,a2,0x1
    0x8401207c    0x1fc    lui a4,0xfc000
    0x84012080    0x200    srli a4,a4,0x19
    0x84012082    0x202    and a4,a4,a5
    0x84012084    0x204    srli a5,a5,0x26
    0x84012086    0x206    andi a5,a5,1
    0x84012088    0x208    beqz a5,ffffffff840120b2 <sameRegionAs+0x232>
    0x8401208a    0x20a    li a5,-1
    0x8401208c    0x20c    slli a5,a5,0x27
    0x8401208e    0x20e    or a4,a4,a5
    0x84012090    0x210    slli a5,s0,0x1
    0x84012094    0x214    lui a3,0xfc000
    0x84012098    0x218    srli a3,a3,0x19
    0x8401209a    0x21a    and a3,a3,a5
    0x8401209c    0x21c    srli a5,a5,0x26
    0x8401209e    0x21e    andi a5,a5,1
    0x840120a0    0x220    beqz a5,ffffffff840120ae <sameRegionAs+0x22e>
    0x840120a2    0x222    li a5,-1
    0x840120a4    0x224    slli a5,a5,0x27
    0x840120a6    0x226    or a3,a3,a5
    0x840120a8    0x228    li a5,0
    0x840120aa    0x22a    beq a3,a4,ffffffff840120c6 <sameRegionAs+0x246>
    0x840120ae    0x22e    mv a0,a5
    0x840120b0    0x230    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x840120b2    0x232    slli a5,s0,0x1
    0x840120b6    0x236    lui a3,0xfc000
    0x840120ba    0x23a    srli a3,a3,0x19
    0x840120bc    0x23c    and a3,a3,a5
    0x840120be    0x23e    srli a5,a5,0x26
    0x840120c0    0x240    andi a5,a5,1
    0x840120c2    0x242    bnez a5,ffffffff840120a2 <sameRegionAs+0x222>
    0x840120c4    0x244    j ffffffff840120a8 <sameRegionAs+0x228>
    0x840120c6    0x246    srli a5,s0,0x2f
    0x840120ca    0x24a    andi a5,a5,63
    0x840120ce    0x24e    srli a4,a2,0x2f
    0x840120d2    0x252    andi a4,a4,63
    0x840120d6    0x256    sub a5,a5,a4
    0x840120d8    0x258    seqz a5,a5
    0x840120dc    0x25c    j ffffffff840120ae <sameRegionAs+0x22e>
    0x840120de    0x25e    srli a5,s0,0x3b
    0x840120e2    0x262    li a4,12
    0x840120e4    0x264    li a0,0
    0x840120e6    0x266    bne a5,a4,ffffffff84012138 <sameRegionAs+0x2b8>
    0x840120ea    0x26a    slli a5,a2,0x19
    0x840120ee    0x26e    srli a4,a5,0x19
    0x840120f2    0x272    srli a2,a2,0x26
    0x840120f4    0x274    andi a2,a2,1
    0x840120f6    0x276    beqz a2,ffffffff840120fe <sameRegionAs+0x27e>
    0x840120f8    0x278    li a5,-1
    0x840120fa    0x27a    slli a5,a5,0x27
    0x840120fc    0x27c    or a4,a4,a5
    0x840120fe    0x27e    slli a5,s0,0x19
    0x84012102    0x282    srli a5,a5,0x19
    0x84012104    0x284    srli a0,s0,0x26
    0x84012108    0x288    andi a0,a0,1
    0x8401210a    0x28a    beqz a0,ffffffff84012112 <sameRegionAs+0x292>
    0x8401210c    0x28c    li a3,-1
    0x8401210e    0x28e    slli a3,a3,0x27
    0x84012110    0x290    or a5,a5,a3
    0x84012112    0x292    sub a5,a5,a4
    0x84012114    0x294    seqz a0,a5
    0x84012118    0x298    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x8401211a    0x29a    srli s0,s0,0x3b
    0x8401211c    0x29c    li a5,8
    0x8401211e    0x29e    li a0,0
    0x84012120    0x2a0    bne s0,a5,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012124    0x2a4    sub a0,s1,s2
    0x84012128    0x2a8    seqz a0,a0
    0x8401212c    0x2ac    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x8401212e    0x2ae    srli a0,s0,0x3b
    0x84012132    0x2b2    addi a0,a0,-20
    0x84012134    0x2b4    seqz a0,a0
    0x84012138    0x2b8    ld ra,72(sp)          ; stack access
    0x8401213a    0x2ba    ld s0,64(sp)          ; stack access
    0x8401213c    0x2bc    ld s1,56(sp)          ; stack access
    0x8401213e    0x2be    ld s2,48(sp)          ; stack access
    0x84012140    0x2c0    ld s3,40(sp)          ; stack access
    0x84012142    0x2c2    ld s4,32(sp)          ; stack access
    0x84012144    0x2c4    addi sp,sp,80
    0x84012146    0x2c6    ret
    0x84012148    0x2c8    srli a0,s0,0x3b
    0x8401214c    0x2cc    addi a0,a0,-14
    0x8401214e    0x2ce    andi a0,a0,-3
    0x84012150    0x2d0    seqz a0,a0
    0x84012154    0x2d4    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012156    0x2d6    srli s0,s0,0x3b
    0x84012158    0x2d8    li a5,16
    0x8401215a    0x2da    li a0,0
    0x8401215c    0x2dc    bne s0,a5,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012160    0x2e0    lui a0,0x1
    0x84012162    0x2e2    addi a0,a0,-1
    0x84012164    0x2e4    and a5,s1,a0
    0x84012168    0x2e8    and a0,s2,a0
    0x8401216c    0x2ec    sub a0,a5,a0
    0x84012170    0x2f0    seqz a0,a0
    0x84012174    0x2f4    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012176    0x2f6    srli s0,s0,0x3b
    0x84012178    0x2f8    li a5,22
    0x8401217a    0x2fa    li a0,0
    0x8401217c    0x2fc    bne s0,a5,ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012180    0x300    srli a5,s2,0x10
    0x84012184    0x304    slli a3,a5,0x19
    0x84012188    0x308    srli a3,a3,0x19
    0x8401218a    0x30a    srli a5,a5,0x26
    0x8401218c    0x30c    andi a5,a5,1
    0x8401218e    0x30e    beqz a5,ffffffff840121ca <sameRegionAs+0x34a>
    0x84012190    0x310    li a5,-1
    0x84012192    0x312    slli a4,a5,0x27
    0x84012196    0x316    or a3,a3,a4
    0x84012198    0x318    srli a4,s1,0x10
    0x8401219c    0x31c    srli a5,a5,0x19
    0x8401219e    0x31e    and a5,a5,a4
    0x840121a0    0x320    srli a4,a4,0x26
    0x840121a2    0x322    andi a4,a4,1
    0x840121a4    0x324    beqz a4,ffffffff84012138 <sameRegionAs+0x2b8>
    0x840121a6    0x326    li a4,-1
    0x840121a8    0x328    slli a4,a4,0x27
    0x840121aa    0x32a    or a5,a5,a4
    0x840121ac    0x32c    li a0,0
    0x840121ae    0x32e    bne a3,a5,ffffffff84012138 <sameRegionAs+0x2b8>
    0x840121b2    0x332    srli a0,s1,0xa
    0x840121b6    0x336    andi a0,a0,63
    0x840121ba    0x33a    srli a5,s2,0xa
    0x840121be    0x33e    andi a5,a5,63
    0x840121c2    0x342    sub a0,a0,a5
    0x840121c4    0x344    seqz a0,a0
    0x840121c8    0x348    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x840121ca    0x34a    srli a4,s1,0x10
    0x840121ce    0x34e    slli a5,a4,0x19
    0x840121d2    0x352    srli a5,a5,0x19
    0x840121d4    0x354    srli a4,a4,0x26
    0x840121d6    0x356    andi a4,a4,1
    0x840121d8    0x358    bnez a4,ffffffff840121a6 <sameRegionAs+0x326>
    0x840121da    0x35a    j ffffffff840121ac <sameRegionAs+0x32c>
    0x840121dc    0x35c    srli a0,s0,0x3b
    0x840121e0    0x360    addi a0,a0,-24
    0x840121e2    0x362    seqz a0,a0
    0x840121e6    0x366    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x840121e8    0x368    andi a0,a5,1
    0x840121ec    0x36c    beqz a0,ffffffff84012138 <sameRegionAs+0x2b8>
    0x840121ee    0x36e    srli a0,s0,0x3b
    0x840121f2    0x372    andi a0,a0,1
    0x840121f4    0x374    beqz a0,ffffffff84012138 <sameRegionAs+0x2b8>
    0x840121f6    0x376    ld a2,0(sp)           ; stack access
    0x840121f8    0x378    ld a3,8(sp)           ; stack access
    0x840121fa    0x37a    ld a0,16(sp)          ; stack access
    0x840121fc    0x37c    ld a1,24(sp)          ; stack access
    0x840121fe    0x37e    jal ra,ffffffff84010e50 <Arch_sameRegionAs>
    0x84012202    0x382    j ffffffff84012138 <sameRegionAs+0x2b8>
    0x84012204    0x384    li a0,0
    0x84012206    0x386    j ffffffff84012138 <sameRegionAs+0x2b8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
322 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 646 nodes.

Section unmapPage (253 of 301)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 57 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `unmapPage`:

    0x84010930     0x0    addi sp,sp,-64
    0x84010932     0x2    sd ra,56(sp)          ; stack access
    0x84010934     0x4    sd s0,48(sp)          ; stack access
    0x84010936     0x6    sd s1,40(sp)          ; stack access
    0x84010938     0x8    sd s2,32(sp)          ; stack access
    0x8401093a     0xa    mv s0,a0
    0x8401093c     0xc    mv s2,a2
    0x8401093e     0xe    mv s1,a3
    0x84010940    0x10    mv a0,a1
    0x84010942    0x12    jal ra,ffffffff84010182 <findVSpaceForASID>
    0x84010946    0x16    sd a0,16(sp)          ; stack access
    0x84010948    0x18    sd a1,24(sp)          ; stack access
    0x8401094a    0x1a    beqz a0,ffffffff84010958 <unmapPage+0x28>
    0x8401094c    0x1c    ld ra,56(sp)          ; stack access
    0x8401094e    0x1e    ld s0,48(sp)          ; stack access
    0x84010950    0x20    ld s1,40(sp)          ; stack access
    0x84010952    0x22    ld s2,32(sp)          ; stack access
    0x84010954    0x24    addi sp,sp,64
    0x84010956    0x26    ret
    0x84010958    0x28    mv a1,s2
    0x8401095a    0x2a    ld a0,24(sp)          ; stack access
    0x8401095c    0x2c    jal ra,ffffffff840107b2 <lookupPTSlot>
    0x84010960    0x30    sd a0,0(sp)           ; stack access
    0x84010962    0x32    sd a1,8(sp)           ; stack access
    0x84010964    0x34    li a5,1
    0x84010966    0x36    beq s0,a5,ffffffff84010976 <unmapPage+0x46>
    0x8401096a    0x3a    li a5,2
    0x8401096c    0x3c    beq s0,a5,ffffffff8401097a <unmapPage+0x4a>
    0x84010970    0x40    beqz s0,ffffffff840109ba <unmapPage+0x8a>
    0x84010972    0x42    jal ra,ffffffff84010490 <halt>
    0x84010976    0x46    li a5,21
    0x84010978    0x48    j ffffffff8401097c <unmapPage+0x4c>
    0x8401097a    0x4a    li a5,30
    0x8401097c    0x4c    bne a1,a5,ffffffff8401094c <unmapPage+0x1c>
    0x84010980    0x50    ld a4,0(a0)
    0x84010982    0x52    andi a5,a4,1
    0x84010986    0x56    beqz a5,ffffffff8401094c <unmapPage+0x1c>
    0x84010988    0x58    srli a5,a4,0x1
    0x8401098c    0x5c    srli a3,a4,0x2
    0x84010990    0x60    or a5,a5,a3
    0x84010992    0x62    srli a3,a4,0x3
    0x84010996    0x66    or a5,a5,a3
    0x84010998    0x68    andi a5,a5,1
    0x8401099a    0x6a    beqz a5,ffffffff8401094c <unmapPage+0x1c>
    0x8401099c    0x6c    slli a4,a4,0x2
    0x8401099e    0x6e    lui a5,0xfff00
    0x840109a2    0x72    srli a5,a5,0x8
    0x840109a4    0x74    and a4,a4,a5
    0x840109a6    0x76    li a3,1
    0x840109a8    0x78    slli a3,a3,0x26
    0x840109aa    0x7a    add s1,s1,a3
    0x840109ac    0x7c    bne a4,s1,ffffffff8401094c <unmapPage+0x1c>
    0x840109b0    0x80    sd zero,0(a0)
    0x840109b4    0x84    sfence.vma
    0x840109b8    0x88    j ffffffff8401094c <unmapPage+0x1c>
    0x840109ba    0x8a    li a5,12
    0x840109bc    0x8c    j ffffffff8401097c <unmapPage+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 93 nodes.

Section create_rootserver_objects (254 of 301)
==============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 92 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x84000f70     0x0    addi sp,sp,-80
    0x84000f72     0x2    sd ra,72(sp)          ; stack access
    0x84000f74     0x4    sd s0,64(sp)          ; stack access
    0x84000f76     0x6    sd s1,56(sp)          ; stack access
    0x84000f78     0x8    sd s2,48(sp)          ; stack access
    0x84000f7a     0xa    sd s3,40(sp)          ; stack access
    0x84000f7c     0xc    sd s4,32(sp)          ; stack access
    0x84000f7e     0xe    mv s1,a0
    0x84000f80    0x10    sd a1,0(sp)           ; stack access
    0x84000f82    0x12    sd a2,8(sp)           ; stack access
    0x84000f84    0x14    mv s2,a3
    0x84000f86    0x16    mv s4,a3
    0x84000f88    0x18    li a5,24
    0x84000f8a    0x1a    bgeu a3,a5,ffffffff84000f90 <create_rootserver_objects+0x20>
    0x84000f8e    0x1e    li s4,24
    0x84000f90    0x20    ld a5,0(sp)           ; stack access
    0x84000f92    0x22    sd a5,16(sp)          ; stack access
    0x84000f94    0x24    ld a5,8(sp)           ; stack access
    0x84000f96    0x26    sd a5,24(sp)          ; stack access
    0x84000f98    0x28    mv s3,s2
    0x84000f9a    0x2a    beqz s2,ffffffff84000fa4 <create_rootserver_objects+0x34>
    0x84000f9e    0x2e    li s3,1
    0x84000fa0    0x30    sll s3,s3,s2
    0x84000fa4    0x34    ld a0,16(sp)          ; stack access
    0x84000fa6    0x36    ld a1,24(sp)          ; stack access
    0x84000fa8    0x38    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000fac    0x3c    auipc s0,0x0
    0x84000fb0    0x40    addi s0,s0,1700 # ffffffff84001650 <ndks_boot>
    0x84000fb4    0x44    sd s1,688(s0)
    0x84000fb8    0x48    lui a5,0x1004
    0x84000fbc    0x4c    addi a5,a5,1280 # 1004500 <KERNEL_OFFSET-0xfffffffefeffbb00>
    0x84000fc0    0x50    add s1,s1,a5
    0x84000fc2    0x52    add s1,s1,s3
    0x84000fc4    0x54    slli a0,a0,0xc
    0x84000fc6    0x56    add s1,s1,a0
    0x84000fc8    0x58    sd s1,696(s0)
    0x84000fcc    0x5c    mv a1,s2
    0x84000fce    0x5e    mv a0,s4
    0x84000fd0    0x60    jal ra,ffffffff84000f44 <maybe_alloc_extra_bi>
    0x84000fd4    0x64    li a1,1
    0x84000fd6    0x66    li a0,24
    0x84000fd8    0x68    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84000fdc    0x6c    sd a0,608(s0)
    0x84000fe0    0x70    mv a1,s2
    0x84000fe2    0x72    li a0,12
    0x84000fe4    0x74    jal ra,ffffffff84000f44 <maybe_alloc_extra_bi>
    0x84000fe8    0x78    li a1,1
    0x84000fea    0x7a    li a0,12
    0x84000fec    0x7c    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84000ff0    0x80    sd a0,616(s0)
    0x84000ff4    0x84    mv a1,s2
    0x84000ff6    0x86    li a0,12
    0x84000ff8    0x88    jal ra,ffffffff84000f44 <maybe_alloc_extra_bi>
    0x84000ffc    0x8c    li a1,1
    0x84000ffe    0x8e    li a0,12
    0x84001000    0x90    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84001004    0x94    sd a0,624(s0)
    0x84001008    0x98    li a1,1
    0x8400100a    0x9a    li a0,12
    0x8400100c    0x9c    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84001010    0xa0    sd a0,632(s0)
    0x84001014    0xa4    li a1,1
    0x84001016    0xa6    li a0,12
    0x84001018    0xa8    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x8400101c    0xac    sd a0,640(s0)
    0x84001020    0xb0    ld a0,0(sp)           ; stack access
    0x84001022    0xb2    ld a1,8(sp)           ; stack access
    0x84001024    0xb4    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84001028    0xb8    mv s1,a0
    0x8400102a    0xba    mv a1,a0
    0x8400102c    0xbc    li a0,12
    0x8400102e    0xbe    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84001032    0xc2    sd a0,672(s0)
    0x84001036    0xc6    slli s1,s1,0xc
    0x84001038    0xc8    add s1,s1,a0
    0x8400103a    0xca    sd s1,680(s0)
    0x8400103e    0xce    li a1,1
    0x84001040    0xd0    li a0,10
    0x84001042    0xd2    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84001046    0xd6    sd a0,656(s0)
    0x8400104a    0xda    li a1,1
    0x8400104c    0xdc    li a0,8
    0x8400104e    0xde    jal ra,ffffffff84000f16 <alloc_rootserver_obj>
    0x84001052    0xe2    sd a0,664(s0)
    0x84001056    0xe6    ld ra,72(sp)          ; stack access
    0x84001058    0xe8    ld s0,64(sp)          ; stack access
    0x8400105a    0xea    ld s1,56(sp)          ; stack access
    0x8400105c    0xec    ld s2,48(sp)          ; stack access
    0x8400105e    0xee    ld s3,40(sp)          ; stack access
    0x84001060    0xf0    ld s4,32(sp)          ; stack access
    0x84001062    0xf2    addi sp,sp,80
    0x84001064    0xf4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
92 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 143 nodes.

Section create_ipcbuf_frame_cap (255 of 301)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 39 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84000e12     0x0    addi sp,sp,-96
    0x84000e14     0x2    sd ra,88(sp)          ; stack access
    0x84000e16     0x4    sd s0,80(sp)          ; stack access
    0x84000e18     0x6    sd s1,72(sp)          ; stack access
    0x84000e1a     0x8    sd a0,16(sp)          ; stack access
    0x84000e1c     0xa    sd a1,24(sp)          ; stack access
    0x84000e1e     0xc    sd a2,0(sp)           ; stack access
    0x84000e20     0xe    sd a3,8(sp)           ; stack access
    0x84000e22    0x10    mv s0,a4
    0x84000e24    0x12    auipc s1,0x1
    0x84000e28    0x16    addi s1,s1,-2004 # ffffffff84001650 <ndks_boot>
    0x84000e2c    0x1a    lui a1,0x1
    0x84000e2e    0x1c    ld a0,632(s1)
    0x84000e32    0x20    jal ra,ffffffff84017ae8 <memzero>
    0x84000e36    0x24    li a6,0
    0x84000e38    0x26    li a5,0
    0x84000e3a    0x28    li a4,1
    0x84000e3c    0x2a    mv a3,s0
    0x84000e3e    0x2c    ld a2,632(s1)
    0x84000e42    0x30    ld a0,0(sp)           ; stack access
    0x84000e44    0x32    ld a1,8(sp)           ; stack access
    0x84000e46    0x34    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x84000e4a    0x38    mv s1,a0
    0x84000e4c    0x3a    mv s0,a1
    0x84000e4e    0x3c    ld a0,16(sp)          ; stack access
    0x84000e50    0x3e    ld a1,24(sp)          ; stack access
    0x84000e52    0x40    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000e56    0x44    sd s1,320(a0)
    0x84000e5a    0x48    sd s0,328(a0)
    0x84000e5e    0x4c    sd zero,336(a0)
    0x84000e62    0x50    li a5,3
    0x84000e64    0x52    sd a5,344(a0)
    0x84000e68    0x56    mv a0,s1
    0x84000e6a    0x58    mv a1,s0
    0x84000e6c    0x5a    ld ra,88(sp)          ; stack access
    0x84000e6e    0x5c    ld s0,80(sp)          ; stack access
    0x84000e70    0x5e    ld s1,72(sp)          ; stack access
    0x84000e72    0x60    addi sp,sp,96
    0x84000e74    0x62    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 63 nodes.

Section create_untypeds_for_region (256 of 301)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 102 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x840009f4      0x0    addi sp,sp,-192
    0x840009f6      0x2    sd ra,184(sp)         ; stack access
    0x840009f8      0x4    sd s0,176(sp)         ; stack access
    0x840009fa      0x6    sd s1,168(sp)         ; stack access
    0x840009fc      0x8    sd s2,160(sp)         ; stack access
    0x840009fe      0xa    sd s3,152(sp)         ; stack access
    0x84000a00      0xc    sd s4,144(sp)         ; stack access
    0x84000a02      0xe    sd s5,136(sp)         ; stack access
    0x84000a04     0x10    sd s6,128(sp)         ; stack access
    0x84000a06     0x12    sd s7,120(sp)         ; stack access
    0x84000a08     0x14    sd s8,112(sp)         ; stack access
    0x84000a0a     0x16    sd s9,104(sp)         ; stack access
    0x84000a0c     0x18    sd s10,96(sp)         ; stack access
    0x84000a0e     0x1a    sd s11,88(sp)         ; stack access
    0x84000a10     0x1c    sd a0,32(sp)          ; stack access
    0x84000a12     0x1e    sd a1,40(sp)          ; stack access
    0x84000a14     0x20    beq a4,a3,ffffffff84000b00 <create_untypeds_for_region+0x10c>
    0x84000a18     0x24    mv s9,a2
    0x84000a1a     0x26    mv s8,a5
    0x84000a1c     0x28    mv s1,a3
    0x84000a1e     0x2a    mv s3,a4
    0x84000a20     0x2c    slli s10,a2,0x6
    0x84000a24     0x30    andi s10,s10,64
    0x84000a28     0x34    li s6,63
    0x84000a2c     0x38    li s5,38
    0x84000a30     0x3c    auipc s7,0x1
    0x84000a34     0x40    addi s7,s7,-992 # ffffffff84001650 <ndks_boot>
    0x84000a38     0x44    li s4,1
    0x84000a3a     0x46    slli s11,s4,0x26
    0x84000a3e     0x4a    li a5,-1
    0x84000a40     0x4c    srli a5,a5,0x19
    0x84000a42     0x4e    sd a5,0(sp)           ; stack access
    0x84000a44     0x50    slli a5,s4,0x3c
    0x84000a48     0x54    sd a5,8(sp)           ; stack access
    0x84000a4a     0x56    j ffffffff84000a70 <create_untypeds_for_region+0x7c>
    0x84000a4c     0x58    mv s0,s5
    0x84000a4e     0x5a    ld a5,32(sp)          ; stack access
    0x84000a50     0x5c    sd a5,48(sp)          ; stack access
    0x84000a52     0x5e    ld a5,40(sp)          ; stack access
    0x84000a54     0x60    sd a5,56(sp)          ; stack access
    0x84000a56     0x62    ld a5,592(s7)
    0x84000a5a     0x66    sub a5,a5,s8
    0x84000a5e     0x6a    li a4,49
    0x84000a62     0x6e    bgeu a4,a5,ffffffff84000a9c <create_untypeds_for_region+0xa8>
    0x84000a66     0x72    sll s0,s4,s0
    0x84000a6a     0x76    add s1,s1,s0
    0x84000a6c     0x78    beq s3,s1,ffffffff84000ae0 <create_untypeds_for_region+0xec>
    0x84000a70     0x7c    sub a0,s3,s1
    0x84000a74     0x80    jal ra,ffffffff840100cc <clzl>
    0x84000a78     0x84    sub s2,s6,a0
    0x84000a7c     0x88    mv s0,s2
    0x84000a7e     0x8a    beqz s1,ffffffff84000a8a <create_untypeds_for_region+0x96>
    0x84000a80     0x8c    mv a0,s1
    0x84000a82     0x8e    jal ra,ffffffff84019a18 <__ctzdi2>
    0x84000a86     0x92    sext.w s0,a0
    0x84000a8a     0x96    bgeu s2,s0,ffffffff84000a90 <create_untypeds_for_region+0x9c>
    0x84000a8e     0x9a    mv s0,s2
    0x84000a90     0x9c    bltu s5,s0,ffffffff84000a4c <create_untypeds_for_region+0x58>
    0x84000a94     0xa0    li a5,3
    0x84000a96     0xa2    bgeu a5,s0,ffffffff84000a66 <create_untypeds_for_region+0x72>
    0x84000a9a     0xa6    j ffffffff84000a4e <create_untypeds_for_region+0x5a>
    0x84000a9c     0xa8    slli a5,a5,0x4
    0x84000a9e     0xaa    ld a4,584(s7)
    0x84000aa2     0xae    add a5,a5,a4
    0x84000aa4     0xb0    sd zero,192(a5)
    0x84000aa8     0xb4    add a4,s1,s11
    0x84000aac     0xb8    sd a4,184(a5)
    0x84000aae     0xba    sb s0,192(a5)
    0x84000ab2     0xbe    sb s9,193(a5)
    0x84000ab6     0xc2    ld a5,0(sp)           ; stack access
    0x84000ab8     0xc4    and a2,s1,a5
    0x84000abc     0xc8    addiw a5,s0,-4
    0x84000ac0     0xcc    sll a5,s4,a5
    0x84000ac4     0xd0    slli a5,a5,0x19
    0x84000ac6     0xd2    andi a3,s0,63
    0x84000aca     0xd6    or a3,a3,s10
    0x84000ace     0xda    ld a4,8(sp)           ; stack access
    0x84000ad0     0xdc    or a2,a2,a4
    0x84000ad2     0xde    or a3,a3,a5
    0x84000ad4     0xe0    ld a0,48(sp)          ; stack access
    0x84000ad6     0xe2    ld a1,56(sp)          ; stack access
    0x84000ad8     0xe4    jal ra,ffffffff84000674 <provide_cap>
    0x84000adc     0xe8    bnez a0,ffffffff84000a66 <create_untypeds_for_region+0x72>
    0x84000ade     0xea    j ffffffff84000ae2 <create_untypeds_for_region+0xee>
    0x84000ae0     0xec    li a0,1
    0x84000ae2     0xee    ld ra,184(sp)         ; stack access
    0x84000ae4     0xf0    ld s0,176(sp)         ; stack access
    0x84000ae6     0xf2    ld s1,168(sp)         ; stack access
    0x84000ae8     0xf4    ld s2,160(sp)         ; stack access
    0x84000aea     0xf6    ld s3,152(sp)         ; stack access
    0x84000aec     0xf8    ld s4,144(sp)         ; stack access
    0x84000aee     0xfa    ld s5,136(sp)         ; stack access
    0x84000af0     0xfc    ld s6,128(sp)         ; stack access
    0x84000af2     0xfe    ld s7,120(sp)         ; stack access
    0x84000af4    0x100    ld s8,112(sp)         ; stack access
    0x84000af6    0x102    ld s9,104(sp)         ; stack access
    0x84000af8    0x104    ld s10,96(sp)         ; stack access
    0x84000afa    0x106    ld s11,88(sp)         ; stack access
    0x84000afc    0x108    addi sp,sp,192
    0x84000afe    0x10a    ret
    0x84000b00    0x10c    li a0,1
    0x84000b02    0x10e    j ffffffff84000ae2 <create_untypeds_for_region+0xee>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
102 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 166 nodes.

Section invokeUntyped_Retype (257 of 301)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 104 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x840185c4      0x0    addi sp,sp,-112
    0x840185c6      0x2    sd ra,104(sp)         ; stack access
    0x840185c8      0x4    sd s0,96(sp)          ; stack access
    0x840185ca      0x6    sd s1,88(sp)          ; stack access
    0x840185cc      0x8    sd s2,80(sp)          ; stack access
    0x840185ce      0xa    sd s3,72(sp)          ; stack access
    0x840185d0      0xc    sd s4,64(sp)          ; stack access
    0x840185d2      0xe    sd s5,56(sp)          ; stack access
    0x840185d4     0x10    sd s6,48(sp)          ; stack access
    0x840185d6     0x12    sd s7,40(sp)          ; stack access
    0x840185d8     0x14    sd s8,32(sp)          ; stack access
    0x840185da     0x16    sd s9,24(sp)          ; stack access
    0x840185dc     0x18    sd s10,16(sp)         ; stack access
    0x840185de     0x1a    sd s11,8(sp)          ; stack access
    0x840185e0     0x1c    mv s0,a0
    0x840185e2     0x1e    mv s3,a2
    0x840185e4     0x20    mv s1,a3
    0x840185e6     0x22    mv s4,a4
    0x840185e8     0x24    mv s5,a5
    0x840185ea     0x26    mv s6,a6
    0x840185ec     0x28    mv s2,a7
    0x840185ee     0x2a    ld s9,0(a0)
    0x840185f2     0x2e    slli s7,s9,0x19
    0x840185f6     0x32    srli s7,s7,0x19
    0x840185fa     0x36    srli a5,s9,0x26
    0x840185fe     0x3a    andi a5,a5,1
    0x84018600     0x3c    beqz a5,ffffffff8401860a <invokeUntyped_Retype+0x46>
    0x84018602     0x3e    li a5,-1
    0x84018604     0x40    slli a5,a5,0x27
    0x84018606     0x42    or s7,s7,a5
    0x8401860a     0x46    beqz a1,ffffffff84018642 <invokeUntyped_Retype+0x7e>
    0x8401860c     0x48    ld s10,8(s0)
    0x84018610     0x4c    srli a5,s10,0x19
    0x84018614     0x50    slli s8,a5,0x4
    0x84018618     0x54    beqz a5,ffffffff84018642 <invokeUntyped_Retype+0x7e>
    0x8401861a     0x56    srli a5,s10,0x6
    0x8401861e     0x5a    andi a5,a5,1
    0x84018620     0x5c    bnez a5,ffffffff84018634 <invokeUntyped_Retype+0x70>
    0x84018622     0x5e    andi a5,s10,56
    0x84018626     0x62    bnez a5,ffffffff8401869c <invokeUntyped_Retype+0xd8>
    0x84018628     0x64    li a1,1
    0x8401862a     0x66    sll a1,a1,s10
    0x8401862e     0x6a    mv a0,s7
    0x84018630     0x6c    jal ra,ffffffff84017ae8 <memzero>
    0x84018634     0x70    sd s9,0(s0)
    0x84018638     0x74    slli s10,s10,0x27
    0x8401863a     0x76    srli s10,s10,0x27
    0x8401863e     0x7a    sd s10,8(s0)
    0x84018642     0x7e    mv a1,s4
    0x84018644     0x80    mv a0,s1
    0x84018646     0x82    jal ra,ffffffff84011dfe <getObjectSize>
    0x8401864a     0x86    sll t1,s2,a0
    0x8401864e     0x8a    sub s7,s3,s7
    0x84018652     0x8e    add t1,t1,s7
    0x84018654     0x90    srli t1,t1,0x4
    0x84018658     0x94    slli t1,t1,0x19
    0x8401865a     0x96    ld a5,8(s0)
    0x8401865c     0x98    slli a5,a5,0x27
    0x8401865e     0x9a    srli a5,a5,0x27
    0x84018660     0x9c    or t1,t1,a5
    0x84018664     0xa0    sd t1,8(s0)
    0x84018668     0xa4    ld a7,112(sp)         ; stack access
    0x8401866a     0xa6    mv a6,s4
    0x8401866c     0xa8    mv a5,s3
    0x8401866e     0xaa    mv a4,s2
    0x84018670     0xac    mv a3,s6
    0x84018672     0xae    mv a2,s5
    0x84018674     0xb0    mv a1,s0
    0x84018676     0xb2    mv a0,s1
    0x84018678     0xb4    jal ra,ffffffff8401854c <createNewObjects>
    0x8401867c     0xb8    li a0,0
    0x8401867e     0xba    ld ra,104(sp)         ; stack access
    0x84018680     0xbc    ld s0,96(sp)          ; stack access
    0x84018682     0xbe    ld s1,88(sp)          ; stack access
    0x84018684     0xc0    ld s2,80(sp)          ; stack access
    0x84018686     0xc2    ld s3,72(sp)          ; stack access
    0x84018688     0xc4    ld s4,64(sp)          ; stack access
    0x8401868a     0xc6    ld s5,56(sp)          ; stack access
    0x8401868c     0xc8    ld s6,48(sp)          ; stack access
    0x8401868e     0xca    ld s7,40(sp)          ; stack access
    0x84018690     0xcc    ld s8,32(sp)          ; stack access
    0x84018692     0xce    ld s9,24(sp)          ; stack access
    0x84018694     0xd0    ld s10,16(sp)         ; stack access
    0x84018696     0xd2    ld s11,8(sp)          ; stack access
    0x84018698     0xd4    addi sp,sp,112
    0x8401869a     0xd6    ret
    0x8401869c     0xd8    addi s8,s8,-1
    0x8401869e     0xda    andi s8,s8,-256
    0x840186a2     0xde    slli s10,s10,0x27
    0x840186a4     0xe0    srli s10,s10,0x27
    0x840186a8     0xe4    li s11,-256
    0x840186ac     0xe8    li a1,256
    0x840186b0     0xec    add a0,s7,s8
    0x840186b4     0xf0    jal ra,ffffffff84017ae8 <memzero>
    0x840186b8     0xf4    sd s9,0(s0)
    0x840186bc     0xf8    srli a5,s8,0x4
    0x840186c0     0xfc    slli a5,a5,0x19
    0x840186c2     0xfe    or a5,a5,s10
    0x840186c6    0x102    sd a5,8(s0)
    0x840186c8    0x104    jal ra,ffffffff8401578e <preemptionPoint>
    0x840186cc    0x108    bnez a0,ffffffff8401867e <invokeUntyped_Retype+0xba>
    0x840186ce    0x10a    addi s8,s8,-256
    0x840186d2    0x10e    bne s8,s11,ffffffff840186ac <invokeUntyped_Retype+0xe8>
    0x840186d6    0x112    j ffffffff84018642 <invokeUntyped_Retype+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 159 nodes.

Section decodeSetSchedParams (258 of 301)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 171 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x84016f4c      0x0    addi sp,sp,-112
    0x84016f4e      0x2    sd ra,104(sp)         ; stack access
    0x84016f50      0x4    sd s0,96(sp)          ; stack access
    0x84016f52      0x6    sd s1,88(sp)          ; stack access
    0x84016f54      0x8    sd s2,80(sp)          ; stack access
    0x84016f56      0xa    sd s3,72(sp)          ; stack access
    0x84016f58      0xc    sd s4,64(sp)          ; stack access
    0x84016f5a      0xe    sd s5,56(sp)          ; stack access
    0x84016f5c     0x10    sd a0,16(sp)          ; stack access
    0x84016f5e     0x12    sd a1,24(sp)          ; stack access
    0x84016f60     0x14    li a5,1
    0x84016f62     0x16    bgeu a5,a2,ffffffff84017030 <decodeSetSchedParams+0xe4>
    0x84016f66     0x1a    mv s1,a3
    0x84016f68     0x1c    mv s0,a4
    0x84016f6a     0x1e    auipc s4,0x4
    0x84016f6e     0x22    ld s4,294(s4) # ffffffff8401b090 <current_extra_caps>
    0x84016f72     0x26    beqz s4,ffffffff84017030 <decodeSetSchedParams+0xe4>
    0x84016f76     0x2a    auipc s2,0x4
    0x84016f7a     0x2e    ld s2,290(s2) # ffffffff8401b098 <current_extra_caps+0x8>
    0x84016f7e     0x32    beqz s2,ffffffff84017030 <decodeSetSchedParams+0xe4>
    0x84016f82     0x36    auipc s3,0x4
    0x84016f86     0x3a    ld s3,286(s3) # ffffffff8401b0a0 <current_extra_caps+0x10>
    0x84016f8a     0x3e    beqz s3,ffffffff84017030 <decodeSetSchedParams+0xe4>
    0x84016f8e     0x42    mv a1,a4
    0x84016f90     0x44    li a0,0
    0x84016f92     0x46    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016f96     0x4a    mv s5,a0
    0x84016f98     0x4c    mv a1,s0
    0x84016f9a     0x4e    li a0,1
    0x84016f9c     0x50    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016fa0     0x54    mv s0,a0
    0x84016fa2     0x56    ld a4,0(s4)
    0x84016fa6     0x5a    ld a2,0(s2)
    0x84016faa     0x5e    ld a1,8(s2)
    0x84016fae     0x62    ld a5,0(s3)
    0x84016fb2     0x66    sd a5,32(sp)          ; stack access
    0x84016fb4     0x68    ld a5,8(s3)
    0x84016fb8     0x6c    sd a5,40(sp)          ; stack access
    0x84016fba     0x6e    srli a3,a4,0x3b
    0x84016fbe     0x72    li a5,12
    0x84016fc0     0x74    bne a3,a5,ffffffff8401704e <decodeSetSchedParams+0x102>
    0x84016fc4     0x78    slli a3,a4,0x19
    0x84016fc8     0x7c    srli a3,a3,0x19
    0x84016fca     0x7e    srli a4,a4,0x26
    0x84016fcc     0x80    andi a4,a4,1
    0x84016fce     0x82    beqz a4,ffffffff84016fd6 <decodeSetSchedParams+0x8a>
    0x84016fd0     0x84    li a5,-1
    0x84016fd2     0x86    slli a5,a5,0x27
    0x84016fd4     0x88    or a3,a3,a5
    0x84016fd6     0x8a    ld a5,352(a3)
    0x84016fda     0x8e    bltu a5,s5,ffffffff84017066 <decodeSetSchedParams+0x11a>
    0x84016fde     0x92    bltu a5,s0,ffffffff84017080 <decodeSetSchedParams+0x134>
    0x84016fe2     0x96    ld a5,16(sp)          ; stack access
    0x84016fe4     0x98    slli a0,a5,0x19
    0x84016fe8     0x9c    srli a0,a0,0x19
    0x84016fea     0x9e    srli a5,a5,0x26
    0x84016fec     0xa0    andi a5,a5,1
    0x84016fee     0xa2    beqz a5,ffffffff84016ff6 <decodeSetSchedParams+0xaa>
    0x84016ff0     0xa4    li a5,-1
    0x84016ff2     0xa6    slli a5,a5,0x27
    0x84016ff4     0xa8    or a0,a0,a5
    0x84016ff6     0xaa    mv s2,a0
    0x84016ff8     0xac    srli a2,a2,0x3b
    0x84016ffa     0xae    beqz a2,ffffffff840170a8 <decodeSetSchedParams+0x15c>
    0x84016ffc     0xb0    li a5,22
    0x84016ffe     0xb2    bne a2,a5,ffffffff840170f6 <decodeSetSchedParams+0x1aa>
    0x84017002     0xb6    srli a1,a1,0x10
    0x84017004     0xb8    slli a5,a1,0x19
    0x84017008     0xbc    srli a5,a5,0x19
    0x8401700a     0xbe    srli a1,a1,0x26
    0x8401700c     0xc0    andi a1,a1,1
    0x8401700e     0xc2    beqz a1,ffffffff84017016 <decodeSetSchedParams+0xca>
    0x84017010     0xc4    li a4,-1
    0x84017012     0xc6    slli a4,a4,0x27
    0x84017014     0xc8    or a5,a5,a4
    0x84017016     0xca    ld a4,368(s2)
    0x8401701a     0xce    bnez a4,ffffffff8401709a <decodeSetSchedParams+0x14e>
    0x8401701c     0xd0    mv s4,a5
    0x8401701e     0xd2    ld a5,24(a5)
    0x84017020     0xd4    beqz a5,ffffffff840170b6 <decodeSetSchedParams+0x16a>
    0x84017022     0xd6    li a5,3
    0x84017024     0xd8    auipc a4,0x4
    0x84017028     0xdc    sd a5,-996(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401702c     0xe0    li a0,3
    0x8401702e     0xe2    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x84017030     0xe4    li a5,7
    0x84017032     0xe6    auipc a4,0x4
    0x84017036     0xea    sd a5,-1010(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401703a     0xee    li a0,3
    0x8401703c     0xf0    ld ra,104(sp)         ; stack access
    0x8401703e     0xf2    ld s0,96(sp)          ; stack access
    0x84017040     0xf4    ld s1,88(sp)          ; stack access
    0x84017042     0xf6    ld s2,80(sp)          ; stack access
    0x84017044     0xf8    ld s3,72(sp)          ; stack access
    0x84017046     0xfa    ld s4,64(sp)          ; stack access
    0x84017048     0xfc    ld s5,56(sp)          ; stack access
    0x8401704a     0xfe    addi sp,sp,112
    0x8401704c    0x100    ret
    0x8401704e    0x102    auipc a5,0x3
    0x84017052    0x106    addi a5,a5,1970 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017056    0x10a    li a4,2
    0x84017058    0x10c    sd a4,1088(a5)
    0x8401705c    0x110    li a4,1
    0x8401705e    0x112    sd a4,1048(a5)
    0x84017062    0x116    li a0,3
    0x84017064    0x118    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x84017066    0x11a    auipc a4,0x3
    0x8401706a    0x11e    addi a4,a4,1946 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401706e    0x122    li a3,4
    0x84017070    0x124    sd a3,1088(a4)
    0x84017074    0x128    sd zero,1056(a4)
    0x84017078    0x12c    sd a5,1064(a4)
    0x8401707c    0x130    li a0,3
    0x8401707e    0x132    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x84017080    0x134    auipc a4,0x3
    0x84017084    0x138    addi a4,a4,1920 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017088    0x13c    li a3,4
    0x8401708a    0x13e    sd a3,1088(a4)
    0x8401708e    0x142    sd zero,1056(a4)
    0x84017092    0x146    sd a5,1064(a4)
    0x84017096    0x14a    li a0,3
    0x84017098    0x14c    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x8401709a    0x14e    li a5,3
    0x8401709c    0x150    auipc a4,0x4
    0x840170a0    0x154    sd a5,-1116(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840170a4    0x158    li a0,3
    0x840170a6    0x15a    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x840170a8    0x15c    auipc a5,0x16
    0x840170ac    0x160    ld a5,-80(a5) # ffffffff8402d058 <ksCurThread>
    0x840170b0    0x164    li s4,0
    0x840170b2    0x166    beq a5,a0,ffffffff840170e8 <decodeSetSchedParams+0x19c>
    0x840170b6    0x16a    ld a0,32(sp)          ; stack access
    0x840170b8    0x16c    ld a1,40(sp)          ; stack access
    0x840170ba    0x16e    jal ra,ffffffff84010206 <validFaultHandler>
    0x840170be    0x172    beqz a0,ffffffff8401710c <decodeSetSchedParams+0x1c0>
    0x840170c0    0x174    li a1,2
    0x840170c2    0x176    auipc a0,0x16
    0x840170c6    0x17a    ld a0,-106(a0) # ffffffff8402d058 <ksCurThread>
    0x840170ca    0x17e    jal ra,ffffffff84012996 <setThreadState>
    0x840170ce    0x182    li a5,15
    0x840170d0    0x184    sd a5,0(sp)           ; stack access
    0x840170d2    0x186    mv a7,s4
    0x840170d4    0x188    mv a6,s0
    0x840170d6    0x18a    mv a5,s5
    0x840170d8    0x18c    mv a4,s3
    0x840170da    0x18e    ld a2,32(sp)          ; stack access
    0x840170dc    0x190    ld a3,40(sp)          ; stack access
    0x840170de    0x192    mv a1,s1
    0x840170e0    0x194    mv a0,s2
    0x840170e2    0x196    jal ra,ffffffff84016cce <invokeTCB_ThreadControlSched>
    0x840170e6    0x19a    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x840170e8    0x19c    li a5,3
    0x840170ea    0x19e    auipc a4,0x4
    0x840170ee    0x1a2    sd a5,-1194(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840170f2    0x1a6    li a0,3
    0x840170f4    0x1a8    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x840170f6    0x1aa    auipc a5,0x3
    0x840170fa    0x1ae    addi a5,a5,1802 # ffffffff8401a800 <riscvKSASIDTable>
    0x840170fe    0x1b2    li a4,2
    0x84017100    0x1b4    sd a4,1088(a5)
    0x84017104    0x1b8    sd a4,1048(a5)
    0x84017108    0x1bc    li a0,3
    0x8401710a    0x1be    j ffffffff8401703c <decodeSetSchedParams+0xf0>
    0x8401710c    0x1c0    auipc a5,0x3
    0x84017110    0x1c4    addi a5,a5,1780 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017114    0x1c8    li a4,2
    0x84017116    0x1ca    sd a4,1088(a5)
    0x8401711a    0x1ce    li a4,3
    0x8401711c    0x1d0    sd a4,1048(a5)
    0x84017120    0x1d4    li a0,3
    0x84017122    0x1d6    j ffffffff8401703c <decodeSetSchedParams+0xf0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
171 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 262 nodes.

Section invokeTCB_ThreadControlCaps (259 of 301)
================================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControlCaps` consists of 200 instructions.


Stack analysis
---------------

80 stack accesses found. Annotated code for `invokeTCB_ThreadControlCaps`:

    0x840165d8      0x0    addi sp,sp,-160
    0x840165da      0x2    sd ra,152(sp)         ; stack access
    0x840165dc      0x4    sd s0,144(sp)         ; stack access
    0x840165de      0x6    sd s1,136(sp)         ; stack access
    0x840165e0      0x8    sd s2,128(sp)         ; stack access
    0x840165e2      0xa    sd s3,120(sp)         ; stack access
    0x840165e4      0xc    sd s4,112(sp)         ; stack access
    0x840165e6      0xe    sd s5,104(sp)         ; stack access
    0x840165e8     0x10    sd s6,96(sp)          ; stack access
    0x840165ea     0x12    sd s7,88(sp)          ; stack access
    0x840165ec     0x14    mv s2,a0
    0x840165ee     0x16    mv s4,a1
    0x840165f0     0x18    sd a2,16(sp)          ; stack access
    0x840165f2     0x1a    sd a3,24(sp)          ; stack access
    0x840165f4     0x1c    sd a5,0(sp)           ; stack access
    0x840165f6     0x1e    sd a6,8(sp)           ; stack access
    0x840165f8     0x20    mv s6,a7
    0x840165fa     0x22    ld s3,240(sp)         ; stack access
    0x840165fc     0x24    slli s1,a0,0x19
    0x84016600     0x28    srli s1,s1,0x19
    0x84016602     0x2a    li a5,3
    0x84016604     0x2c    slli a5,a5,0x3d
    0x84016606     0x2e    or s1,s1,a5
    0x84016608     0x30    andi a5,s3,4
    0x8401660c     0x34    bnez a5,ffffffff8401663a <invokeTCB_ThreadControlCaps+0x62>
    0x8401660e     0x36    andi a5,s3,8
    0x84016612     0x3a    bnez a5,ffffffff8401668a <invokeTCB_ThreadControlCaps+0xb2>
    0x84016614     0x3c    andi a5,s3,2
    0x84016618     0x40    bnez a5,ffffffff840166dc <invokeTCB_ThreadControlCaps+0x104>
    0x8401661a     0x42    andi s0,s3,1
    0x8401661e     0x46    bnez s0,ffffffff8401677a <invokeTCB_ThreadControlCaps+0x1a2>
    0x84016622     0x4a    mv a0,s0
    0x84016624     0x4c    ld ra,152(sp)         ; stack access
    0x84016626     0x4e    ld s0,144(sp)         ; stack access
    0x84016628     0x50    ld s1,136(sp)         ; stack access
    0x8401662a     0x52    ld s2,128(sp)         ; stack access
    0x8401662c     0x54    ld s3,120(sp)         ; stack access
    0x8401662e     0x56    ld s4,112(sp)         ; stack access
    0x84016630     0x58    ld s5,104(sp)         ; stack access
    0x84016632     0x5a    ld s6,96(sp)          ; stack access
    0x84016634     0x5c    ld s7,88(sp)          ; stack access
    0x84016636     0x5e    addi sp,sp,160
    0x84016638     0x60    ret
    0x8401663a     0x62    mv s5,a4
    0x8401663c     0x64    sd s1,32(sp)          ; stack access
    0x8401663e     0x66    sd zero,40(sp)        ; stack access
    0x84016640     0x68    sd a2,48(sp)          ; stack access
    0x84016642     0x6a    sd a3,56(sp)          ; stack access
    0x84016644     0x6c    andi s7,a0,-1024
    0x84016648     0x70    addi s7,s7,96
    0x8401664c     0x74    li a1,1
    0x8401664e     0x76    mv a0,s7
    0x84016650     0x78    jal ra,ffffffff8401585a <cteDelete>
    0x84016654     0x7c    mv s0,a0
    0x84016656     0x7e    bnez a0,ffffffff84016622 <invokeTCB_ThreadControlCaps+0x4a>
    0x84016658     0x80    ld a2,0(s5)
    0x8401665c     0x84    ld a3,8(s5)
    0x84016660     0x88    ld a0,48(sp)          ; stack access
    0x84016662     0x8a    ld a1,56(sp)          ; stack access
    0x84016664     0x8c    jal ra,ffffffff8401232a <sameObjectAs>
    0x84016668     0x90    beqz a0,ffffffff8401660e <invokeTCB_ThreadControlCaps+0x36>
    0x8401666a     0x92    ld a2,0(s4)
    0x8401666e     0x96    ld a3,8(s4)
    0x84016672     0x9a    ld a0,32(sp)          ; stack access
    0x84016674     0x9c    ld a1,40(sp)          ; stack access
    0x84016676     0x9e    jal ra,ffffffff8401232a <sameObjectAs>
    0x8401667a     0xa2    beqz a0,ffffffff8401660e <invokeTCB_ThreadControlCaps+0x36>
    0x8401667c     0xa4    mv a3,s7
    0x8401667e     0xa6    mv a2,s5
    0x84016680     0xa8    ld a0,48(sp)          ; stack access
    0x84016682     0xaa    ld a1,56(sp)          ; stack access
    0x84016684     0xac    jal ra,ffffffff840118d4 <cteInsert>
    0x84016688     0xb0    j ffffffff8401660e <invokeTCB_ThreadControlCaps+0x36>
    0x8401668a     0xb2    sd s1,32(sp)          ; stack access
    0x8401668c     0xb4    sd zero,40(sp)        ; stack access
    0x8401668e     0xb6    ld a5,0(sp)           ; stack access
    0x84016690     0xb8    sd a5,48(sp)          ; stack access
    0x84016692     0xba    ld a5,8(sp)           ; stack access
    0x84016694     0xbc    sd a5,56(sp)          ; stack access
    0x84016696     0xbe    andi s5,s2,-1024
    0x8401669a     0xc2    addi s5,s5,128
    0x8401669e     0xc6    li a1,1
    0x840166a0     0xc8    mv a0,s5
    0x840166a2     0xca    jal ra,ffffffff8401585a <cteDelete>
    0x840166a6     0xce    mv s0,a0
    0x840166a8     0xd0    bnez a0,ffffffff84016622 <invokeTCB_ThreadControlCaps+0x4a>
    0x840166aa     0xd2    ld a2,0(s6)
    0x840166ae     0xd6    ld a3,8(s6)
    0x840166b2     0xda    ld a0,48(sp)          ; stack access
    0x840166b4     0xdc    ld a1,56(sp)          ; stack access
    0x840166b6     0xde    jal ra,ffffffff8401232a <sameObjectAs>
    0x840166ba     0xe2    beqz a0,ffffffff84016614 <invokeTCB_ThreadControlCaps+0x3c>
    0x840166bc     0xe4    ld a2,0(s4)
    0x840166c0     0xe8    ld a3,8(s4)
    0x840166c4     0xec    ld a0,32(sp)          ; stack access
    0x840166c6     0xee    ld a1,40(sp)          ; stack access
    0x840166c8     0xf0    jal ra,ffffffff8401232a <sameObjectAs>
    0x840166cc     0xf4    beqz a0,ffffffff84016614 <invokeTCB_ThreadControlCaps+0x3c>
    0x840166ce     0xf6    mv a3,s5
    0x840166d0     0xf8    mv a2,s6
    0x840166d2     0xfa    ld a0,48(sp)          ; stack access
    0x840166d4     0xfc    ld a1,56(sp)          ; stack access
    0x840166d6     0xfe    jal ra,ffffffff840118d4 <cteInsert>
    0x840166da    0x102    j ffffffff84016614 <invokeTCB_ThreadControlCaps+0x3c>
    0x840166dc    0x104    sd s1,32(sp)          ; stack access
    0x840166de    0x106    sd zero,40(sp)        ; stack access
    0x840166e0    0x108    ld a5,160(sp)         ; stack access
    0x840166e2    0x10a    sd a5,48(sp)          ; stack access
    0x840166e4    0x10c    ld a5,168(sp)         ; stack access
    0x840166e6    0x10e    sd a5,56(sp)          ; stack access
    0x840166e8    0x110    andi s5,s2,-1024
    0x840166ec    0x114    li a1,1
    0x840166ee    0x116    mv a0,s5
    0x840166f0    0x118    jal ra,ffffffff8401585a <cteDelete>
    0x840166f4    0x11c    mv s0,a0
    0x840166f6    0x11e    bnez a0,ffffffff84016622 <invokeTCB_ThreadControlCaps+0x4a>
    0x840166f8    0x120    ld a5,176(sp)         ; stack access
    0x840166fa    0x122    ld a2,0(a5)
    0x840166fc    0x124    ld a3,8(a5)
    0x840166fe    0x126    ld a0,48(sp)          ; stack access
    0x84016700    0x128    ld a1,56(sp)          ; stack access
    0x84016702    0x12a    jal ra,ffffffff8401232a <sameObjectAs>
    0x84016706    0x12e    beqz a0,ffffffff8401671a <invokeTCB_ThreadControlCaps+0x142>
    0x84016708    0x130    ld a2,0(s4)
    0x8401670c    0x134    ld a3,8(s4)
    0x84016710    0x138    ld a0,32(sp)          ; stack access
    0x84016712    0x13a    ld a1,40(sp)          ; stack access
    0x84016714    0x13c    jal ra,ffffffff8401232a <sameObjectAs>
    0x84016718    0x140    bnez a0,ffffffff8401676c <invokeTCB_ThreadControlCaps+0x194>
    0x8401671a    0x142    sd s1,32(sp)          ; stack access
    0x8401671c    0x144    sd zero,40(sp)        ; stack access
    0x8401671e    0x146    ld a5,184(sp)         ; stack access
    0x84016720    0x148    sd a5,48(sp)          ; stack access
    0x84016722    0x14a    ld a5,192(sp)         ; stack access
    0x84016724    0x14c    sd a5,56(sp)          ; stack access
    0x84016726    0x14e    addi s5,s5,32
    0x8401672a    0x152    li a1,1
    0x8401672c    0x154    mv a0,s5
    0x8401672e    0x156    jal ra,ffffffff8401585a <cteDelete>
    0x84016732    0x15a    mv s0,a0
    0x84016734    0x15c    bnez a0,ffffffff84016622 <invokeTCB_ThreadControlCaps+0x4a>
    0x84016738    0x160    ld a5,200(sp)         ; stack access
    0x8401673a    0x162    ld a2,0(a5)
    0x8401673c    0x164    ld a3,8(a5)
    0x8401673e    0x166    ld a0,48(sp)          ; stack access
    0x84016740    0x168    ld a1,56(sp)          ; stack access
    0x84016742    0x16a    jal ra,ffffffff8401232a <sameObjectAs>
    0x84016746    0x16e    beqz a0,ffffffff8401661a <invokeTCB_ThreadControlCaps+0x42>
    0x8401674a    0x172    ld a2,0(s4)
    0x8401674e    0x176    ld a3,8(s4)
    0x84016752    0x17a    ld a0,32(sp)          ; stack access
    0x84016754    0x17c    ld a1,40(sp)          ; stack access
    0x84016756    0x17e    jal ra,ffffffff8401232a <sameObjectAs>
    0x8401675a    0x182    beqz a0,ffffffff8401661a <invokeTCB_ThreadControlCaps+0x42>
    0x8401675e    0x186    mv a3,s5
    0x84016760    0x188    ld a2,200(sp)         ; stack access
    0x84016762    0x18a    ld a0,48(sp)          ; stack access
    0x84016764    0x18c    ld a1,56(sp)          ; stack access
    0x84016766    0x18e    jal ra,ffffffff840118d4 <cteInsert>
    0x8401676a    0x192    j ffffffff8401661a <invokeTCB_ThreadControlCaps+0x42>
    0x8401676c    0x194    mv a3,s5
    0x8401676e    0x196    ld a2,176(sp)         ; stack access
    0x84016770    0x198    ld a0,48(sp)          ; stack access
    0x84016772    0x19a    ld a1,56(sp)          ; stack access
    0x84016774    0x19c    jal ra,ffffffff840118d4 <cteInsert>
    0x84016778    0x1a0    j ffffffff8401671a <invokeTCB_ThreadControlCaps+0x142>
    0x8401677a    0x1a2    andi s3,s2,-1024
    0x8401677e    0x1a6    addi s3,s3,64
    0x84016782    0x1aa    li a1,1
    0x84016784    0x1ac    mv a0,s3
    0x84016786    0x1ae    jal ra,ffffffff8401585a <cteDelete>
    0x8401678a    0x1b2    mv s0,a0
    0x8401678c    0x1b4    bnez a0,ffffffff84016622 <invokeTCB_ThreadControlCaps+0x4a>
    0x84016790    0x1b8    ld a5,208(sp)         ; stack access
    0x84016792    0x1ba    sd a5,384(s2)
    0x84016796    0x1be    ld a5,232(sp)         ; stack access
    0x84016798    0x1c0    beqz a5,ffffffff840167ba <invokeTCB_ThreadControlCaps+0x1e2>
    0x8401679a    0x1c2    ld a2,0(a5)
    0x8401679c    0x1c4    ld a3,8(a5)
    0x8401679e    0x1c6    ld a0,216(sp)         ; stack access
    0x840167a0    0x1c8    ld a1,224(sp)         ; stack access
    0x840167a2    0x1ca    jal ra,ffffffff8401232a <sameObjectAs>
    0x840167a6    0x1ce    beqz a0,ffffffff840167ba <invokeTCB_ThreadControlCaps+0x1e2>
    0x840167a8    0x1d0    ld a2,0(s4)
    0x840167ac    0x1d4    ld a3,8(s4)
    0x840167b0    0x1d8    mv a0,s1
    0x840167b2    0x1da    li a1,0
    0x840167b4    0x1dc    jal ra,ffffffff8401232a <sameObjectAs>
    0x840167b8    0x1e0    bnez a0,ffffffff840167cc <invokeTCB_ThreadControlCaps+0x1f4>
    0x840167ba    0x1e2    auipc a5,0x17
    0x840167be    0x1e6    ld a5,-1890(a5) # ffffffff8402d058 <ksCurThread>
    0x840167c2    0x1ea    bne a5,s2,ffffffff84016622 <invokeTCB_ThreadControlCaps+0x4a>
    0x840167c6    0x1ee    jal ra,ffffffff840128fc <rescheduleRequired>
    0x840167ca    0x1f2    j ffffffff84016622 <invokeTCB_ThreadControlCaps+0x4a>
    0x840167cc    0x1f4    mv a3,s3
    0x840167ce    0x1f6    ld a2,232(sp)         ; stack access
    0x840167d0    0x1f8    ld a0,216(sp)         ; stack access
    0x840167d2    0x1fa    ld a1,224(sp)         ; stack access
    0x840167d4    0x1fc    jal ra,ffffffff840118d4 <cteInsert>
    0x840167d8    0x200    j ffffffff840167ba <invokeTCB_ThreadControlCaps+0x1e2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
200 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControlCaps` has 366 nodes.

Section handleRecv (260 of 301)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 169 instructions.


Stack analysis
---------------

26 stack accesses found. Annotated code for `handleRecv`:

    0x84016314      0x0    addi sp,sp,-112
    0x84016316      0x2    sd ra,104(sp)         ; stack access
    0x84016318      0x4    sd s0,96(sp)          ; stack access
    0x8401631a      0x6    sd s1,88(sp)          ; stack access
    0x8401631c      0x8    sd s2,80(sp)          ; stack access
    0x8401631e      0xa    mv s0,a0
    0x84016320      0xc    mv s1,a1
    0x84016322      0xe    auipc a1,0x17
    0x84016326     0x12    ld a1,-714(a1) # ffffffff8402d058 <ksCurThread>
    0x8401632a     0x16    ld s2,72(a1)
    0x8401632e     0x1a    mv a2,s2
    0x84016330     0x1c    addi a0,sp,56
    0x84016332     0x1e    jal ra,ffffffff84011270 <lookupCap>
    0x84016336     0x22    ld a5,64(sp)          ; stack access
    0x84016338     0x24    ld a4,56(sp)          ; stack access
    0x8401633a     0x26    bnez a4,ffffffff84016384 <handleRecv+0x70>
    0x8401633c     0x28    srli a4,a5,0x3b
    0x84016340     0x2c    li a3,4
    0x84016342     0x2e    beq a4,a3,ffffffff840163a8 <handleRecv+0x94>
    0x84016346     0x32    li a3,6
    0x84016348     0x34    beq a4,a3,ffffffff84016472 <handleRecv+0x15e>
    0x8401634c     0x38    auipc a4,0x4
    0x84016350     0x3c    addi a4,a4,1204 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016354     0x40    li a5,1
    0x84016356     0x42    sd a5,1024(a4)
    0x8401635a     0x46    sd zero,1032(a4)
    0x8401635e     0x4a    li a5,-1
    0x84016360     0x4c    slli a5,a5,0x3f
    0x84016362     0x4e    addi a5,a5,1
    0x84016364     0x50    sd a5,1736(a4)
    0x84016368     0x54    sd s2,1744(a4)
    0x8401636c     0x58    auipc a0,0x17
    0x84016370     0x5c    ld a0,-788(a0) # ffffffff8402d058 <ksCurThread>
    0x84016374     0x60    jal ra,ffffffff84015172 <handleFault>
    0x84016378     0x64    ld ra,104(sp)         ; stack access
    0x8401637a     0x66    ld s0,96(sp)          ; stack access
    0x8401637c     0x68    ld s1,88(sp)          ; stack access
    0x8401637e     0x6a    ld s2,80(sp)          ; stack access
    0x84016380     0x6c    addi sp,sp,112
    0x84016382     0x6e    ret
    0x84016384     0x70    auipc a4,0x4
    0x84016388     0x74    addi a4,a4,1148 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401638c     0x78    li a5,-1
    0x8401638e     0x7a    slli a5,a5,0x3f
    0x84016390     0x7c    addi a5,a5,1
    0x84016392     0x7e    sd a5,1736(a4)
    0x84016396     0x82    sd s2,1744(a4)
    0x8401639a     0x86    auipc a0,0x17
    0x8401639e     0x8a    ld a0,-834(a0) # ffffffff8402d058 <ksCurThread>
    0x840163a2     0x8e    jal ra,ffffffff84015172 <handleFault>
    0x840163a6     0x92    j ffffffff84016378 <handleRecv+0x64>
    0x840163a8     0x94    srli a4,a5,0x38
    0x840163ac     0x98    andi a4,a4,1
    0x840163ae     0x9a    beqz a4,ffffffff840163fc <handleRecv+0xe8>
    0x840163b0     0x9c    sd a5,0(sp)           ; stack access
    0x840163b2     0x9e    ld a5,72(sp)          ; stack access
    0x840163b4     0xa0    sd a5,8(sp)           ; stack access
    0x840163b6     0xa2    sd zero,16(sp)        ; stack access
    0x840163b8     0xa4    sd zero,24(sp)        ; stack access
    0x840163ba     0xa6    beqz s1,ffffffff840163e4 <handleRecv+0xd0>
    0x840163bc     0xa8    auipc a1,0x17
    0x840163c0     0xac    ld a1,-868(a1) # ffffffff8402d058 <ksCurThread>
    0x840163c4     0xb0    ld s1,120(a1)
    0x840163c6     0xb2    mv a2,s1
    0x840163c8     0xb4    addi a0,sp,32
    0x840163ca     0xb6    jal ra,ffffffff84011270 <lookupCap>
    0x840163ce     0xba    ld a5,32(sp)          ; stack access
    0x840163d0     0xbc    bnez a5,ffffffff8401642a <handleRecv+0x116>
    0x840163d2     0xbe    ld a5,40(sp)          ; stack access
    0x840163d4     0xc0    srli a3,a5,0x3b
    0x840163d8     0xc4    li a4,8
    0x840163da     0xc6    bne a3,a4,ffffffff8401644e <handleRecv+0x13a>
    0x840163de     0xca    sd a5,16(sp)          ; stack access
    0x840163e0     0xcc    ld a5,48(sp)          ; stack access
    0x840163e2     0xce    sd a5,24(sp)          ; stack access
    0x840163e4     0xd0    ld a4,16(sp)          ; stack access
    0x840163e6     0xd2    ld a5,24(sp)          ; stack access
    0x840163e8     0xd4    mv a3,s0
    0x840163ea     0xd6    ld a1,0(sp)           ; stack access
    0x840163ec     0xd8    ld a2,8(sp)           ; stack access
    0x840163ee     0xda    auipc a0,0x17
    0x840163f2     0xde    ld a0,-918(a0) # ffffffff8402d058 <ksCurThread>
    0x840163f6     0xe2    jal ra,ffffffff84016096 <receiveIPC>
    0x840163fa     0xe6    j ffffffff84016378 <handleRecv+0x64>
    0x840163fc     0xe8    auipc a4,0x4
    0x84016400     0xec    addi a4,a4,1028 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016404     0xf0    li a5,1
    0x84016406     0xf2    sd a5,1024(a4)
    0x8401640a     0xf6    sd zero,1032(a4)
    0x8401640e     0xfa    li a5,-1
    0x84016410     0xfc    slli a5,a5,0x3f
    0x84016412     0xfe    addi a5,a5,1
    0x84016414    0x100    sd a5,1736(a4)
    0x84016418    0x104    sd s2,1744(a4)
    0x8401641c    0x108    auipc a0,0x17
    0x84016420    0x10c    ld a0,-964(a0) # ffffffff8402d058 <ksCurThread>
    0x84016424    0x110    jal ra,ffffffff84015172 <handleFault>
    0x84016428    0x114    j ffffffff84016378 <handleRecv+0x64>
    0x8401642a    0x116    auipc a4,0x4
    0x8401642e    0x11a    addi a4,a4,982 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016432    0x11e    li a5,-1
    0x84016434    0x120    slli a5,a5,0x3f
    0x84016436    0x122    addi a5,a5,1
    0x84016438    0x124    sd a5,1736(a4)
    0x8401643c    0x128    sd s1,1744(a4)
    0x84016440    0x12c    auipc a0,0x17
    0x84016444    0x130    ld a0,-1000(a0) # ffffffff8402d058 <ksCurThread>
    0x84016448    0x134    jal ra,ffffffff84015172 <handleFault>
    0x8401644c    0x138    j ffffffff84016378 <handleRecv+0x64>
    0x8401644e    0x13a    auipc a4,0x4
    0x84016452    0x13e    addi a4,a4,946 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016456    0x142    li a5,-1
    0x84016458    0x144    slli a5,a5,0x3f
    0x8401645a    0x146    addi a5,a5,1
    0x8401645c    0x148    sd a5,1736(a4)
    0x84016460    0x14c    sd s1,1744(a4)
    0x84016464    0x150    auipc a0,0x17
    0x84016468    0x154    ld a0,-1036(a0) # ffffffff8402d058 <ksCurThread>
    0x8401646c    0x158    jal ra,ffffffff84015172 <handleFault>
    0x84016470    0x15c    j ffffffff84016378 <handleRecv+0x64>
    0x84016472    0x15e    slli a4,a5,0x19
    0x84016476    0x162    srli a4,a4,0x19
    0x84016478    0x164    srli a3,a5,0x26
    0x8401647c    0x168    andi a3,a3,1
    0x8401647e    0x16a    beqz a3,ffffffff84016486 <handleRecv+0x172>
    0x84016480    0x16c    li a3,-1
    0x84016482    0x16e    slli a3,a3,0x27
    0x84016484    0x170    or a4,a4,a3
    0x84016486    0x172    ld a4,24(a4)
    0x84016488    0x174    slli a3,a4,0x19
    0x8401648c    0x178    srli a3,a3,0x19
    0x8401648e    0x17a    srli a4,a4,0x26
    0x84016490    0x17c    andi a4,a4,1
    0x84016492    0x17e    beqz a4,ffffffff840164dc <handleRecv+0x1c8>
    0x84016494    0x180    srli a5,a5,0x3a
    0x84016496    0x182    andi a5,a5,1
    0x84016498    0x184    bnez a5,ffffffff840164c8 <handleRecv+0x1b4>
    0x8401649a    0x186    auipc a4,0x4
    0x8401649e    0x18a    addi a4,a4,870 # ffffffff8401a800 <riscvKSASIDTable>
    0x840164a2    0x18e    li a5,1
    0x840164a4    0x190    sd a5,1024(a4)
    0x840164a8    0x194    sd zero,1032(a4)
    0x840164ac    0x198    li a5,-1
    0x840164ae    0x19a    slli a5,a5,0x3f
    0x840164b0    0x19c    addi a5,a5,1
    0x840164b2    0x19e    sd a5,1736(a4)
    0x840164b6    0x1a2    sd s2,1744(a4)
    0x840164ba    0x1a6    auipc a0,0x17
    0x840164be    0x1aa    ld a0,-1122(a0) # ffffffff8402d058 <ksCurThread>
    0x840164c2    0x1ae    jal ra,ffffffff84015172 <handleFault>
    0x840164c6    0x1b2    j ffffffff84016378 <handleRecv+0x64>
    0x840164c8    0x1b4    li a5,-1
    0x840164ca    0x1b6    slli a5,a5,0x27
    0x840164cc    0x1b8    or a3,a3,a5
    0x840164ce    0x1ba    auipc a5,0x17
    0x840164d2    0x1be    ld a5,-1142(a5) # ffffffff8402d058 <ksCurThread>
    0x840164d6    0x1c2    beq a5,a3,ffffffff840164e4 <handleRecv+0x1d0>
    0x840164da    0x1c6    j ffffffff8401649a <handleRecv+0x186>
    0x840164dc    0x1c8    srli a5,a5,0x3a
    0x840164de    0x1ca    andi a5,a5,1
    0x840164e0    0x1cc    beqz a5,ffffffff8401649a <handleRecv+0x186>
    0x840164e2    0x1ce    bnez a3,ffffffff840164ce <handleRecv+0x1ba>
    0x840164e4    0x1d0    mv a3,s0
    0x840164e6    0x1d2    ld a1,64(sp)          ; stack access
    0x840164e8    0x1d4    ld a2,72(sp)          ; stack access
    0x840164ea    0x1d6    auipc a0,0x17
    0x840164ee    0x1da    ld a0,-1170(a0) # ffffffff8402d058 <ksCurThread>
    0x840164f2    0x1de    jal ra,ffffffff840144c6 <receiveSignal>
    0x840164f6    0x1e2    j ffffffff84016378 <handleRecv+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
169 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 264 nodes.

Section completeSignal (261 of 301)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 44 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `completeSignal`:

    0x8401445a     0x0    addi sp,sp,-16
    0x8401445c     0x2    sd ra,8(sp)           ; stack access
    0x8401445e     0x4    sd s0,0(sp)           ; stack access
    0x84014460     0x6    beqz a1,ffffffff840144c2 <completeSignal+0x68>
    0x84014462     0x8    ld a5,0(a0)
    0x84014464     0xa    andi a5,a5,3
    0x84014466     0xc    li a4,2
    0x84014468     0xe    bne a5,a4,ffffffff840144c2 <completeSignal+0x68>
    0x8401446c    0x12    ld a5,16(a0)
    0x8401446e    0x14    sd a5,72(a1)
    0x84014470    0x16    ld a5,0(a0)
    0x84014472    0x18    andi a5,a5,-4
    0x84014474    0x1a    sd a5,0(a0)
    0x84014476    0x1c    ld a5,368(a1)
    0x8401447a    0x20    beqz a5,ffffffff84014484 <completeSignal+0x2a>
    0x8401447c    0x22    ld ra,8(sp)           ; stack access
    0x8401447e    0x24    ld s0,0(sp)           ; stack access
    0x84014480    0x26    addi sp,sp,16
    0x84014482    0x28    ret
    0x84014484    0x2a    ld a5,32(a0)
    0x84014486    0x2c    slli a4,a5,0x19
    0x8401448a    0x30    srli a4,a4,0x19
    0x8401448c    0x32    srli a5,a5,0x26
    0x8401448e    0x34    andi a5,a5,1
    0x84014490    0x36    beqz a5,ffffffff840144bc <completeSignal+0x62>
    0x84014492    0x38    li s0,-1
    0x84014494    0x3a    slli s0,s0,0x27
    0x84014496    0x3c    or s0,s0,a4
    0x84014498    0x3e    ld a5,24(s0)
    0x8401449a    0x40    bnez a5,ffffffff8401447c <completeSignal+0x22>
    0x8401449c    0x42    mv a0,s0
    0x8401449e    0x44    jal ra,ffffffff840130c2 <schedContext_donate>
    0x840144a2    0x48    auipc a5,0x19
    0x840144a6    0x4c    ld a5,-1146(a5) # ffffffff8402d028 <ksCurSC>
    0x840144aa    0x50    beq s0,a5,ffffffff840144b4 <completeSignal+0x5a>
    0x840144ae    0x54    mv a0,s0
    0x840144b0    0x56    jal ra,ffffffff840117d6 <refill_unblock_check>
    0x840144b4    0x5a    mv a0,s0
    0x840144b6    0x5c    jal ra,ffffffff84013d0a <schedContext_resume>
    0x840144ba    0x60    j ffffffff8401447c <completeSignal+0x22>
    0x840144bc    0x62    beqz a4,ffffffff8401447c <completeSignal+0x22>
    0x840144be    0x64    mv s0,a4
    0x840144c0    0x66    j ffffffff84014498 <completeSignal+0x3e>
    0x840144c2    0x68    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 76 nodes.

Section restart (262 of 301)
============================

Deriving specifications
-----------------------

Section `restart` consists of 36 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `restart`:

    0x84013d60     0x0    addi sp,sp,-16
    0x84013d62     0x2    sd ra,8(sp)           ; stack access
    0x84013d64     0x4    sd s0,0(sp)           ; stack access
    0x84013d66     0x6    mv s0,a0
    0x84013d68     0x8    ld a5,280(a0)
    0x84013d6c     0xc    andi a5,a5,15
    0x84013d6e     0xe    beqz a5,ffffffff84013d78 <restart+0x18>
    0x84013d70    0x10    addi a5,a5,-3
    0x84013d72    0x12    li a4,3
    0x84013d74    0x14    bltu a4,a5,ffffffff84013d9c <restart+0x3c>
    0x84013d78    0x18    mv a0,s0
    0x84013d7a    0x1a    jal ra,ffffffff84013542 <cancelIPC>
    0x84013d7e    0x1e    li a1,2
    0x84013d80    0x20    mv a0,s0
    0x84013d82    0x22    jal ra,ffffffff84012996 <setThreadState>
    0x84013d86    0x26    ld a0,368(s0)
    0x84013d8a    0x2a    jal ra,ffffffff84013d0a <schedContext_resume>
    0x84013d8e    0x2e    ld a5,280(s0)
    0x84013d92    0x32    andi a5,a5,15
    0x84013d94    0x34    addi a5,a5,-1
    0x84013d96    0x36    li a4,1
    0x84013d98    0x38    bgeu a4,a5,ffffffff84013da4 <restart+0x44>
    0x84013d9c    0x3c    ld ra,8(sp)           ; stack access
    0x84013d9e    0x3e    ld s0,0(sp)           ; stack access
    0x84013da0    0x40    addi sp,sp,16
    0x84013da2    0x42    ret
    0x84013da4    0x44    ld a5,368(s0)
    0x84013da8    0x48    beqz a5,ffffffff84013d9c <restart+0x3c>
    0x84013daa    0x4a    ld a5,64(a5)
    0x84013dac    0x4c    beqz a5,ffffffff84013d9c <restart+0x3c>
    0x84013dae    0x4e    ld a5,288(s0)
    0x84013db2    0x52    andi a5,a5,1
    0x84013db4    0x54    bnez a5,ffffffff84013d9c <restart+0x3c>
    0x84013db6    0x56    mv a0,s0
    0x84013db8    0x58    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x84013dbc    0x5c    j ffffffff84013d9c <restart+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 63 nodes.

Section cancelIPC (263 of 301)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 102 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelIPC`:

    0x84013542     0x0    addi sp,sp,-48
    0x84013544     0x2    sd ra,40(sp)          ; stack access
    0x84013546     0x4    sd s0,32(sp)          ; stack access
    0x84013548     0x6    sd s1,24(sp)          ; stack access
    0x8401354a     0x8    mv s0,a0
    0x8401354c     0xa    sd zero,312(a0)
    0x84013550     0xe    sd zero,320(a0)
    0x84013554    0x12    ld a4,280(a0)
    0x84013558    0x16    andi a5,a4,15
    0x8401355c    0x1a    li a3,5
    0x8401355e    0x1c    beq a5,a3,ffffffff84013634 <cancelIPC+0xf2>
    0x84013562    0x20    bltu a3,a5,ffffffff840135f8 <cancelIPC+0xb6>
    0x84013566    0x24    addi a5,a5,-3
    0x84013568    0x26    li a3,1
    0x8401356a    0x28    bltu a3,a5,ffffffff8401362a <cancelIPC+0xe8>
    0x8401356e    0x2c    lui a5,0xe0000
    0x84013572    0x30    srli a5,a5,0x19
    0x84013574    0x32    and a5,a5,a4
    0x84013576    0x34    srli a4,a4,0x26
    0x84013578    0x36    andi a4,a4,1
    0x8401357a    0x38    beqz a4,ffffffff84013582 <cancelIPC+0x40>
    0x8401357c    0x3a    li a4,-1
    0x8401357e    0x3c    slli a4,a4,0x27
    0x84013580    0x3e    or a5,a5,a4
    0x84013582    0x40    mv s1,a5
    0x84013584    0x42    ld a1,8(a5)
    0x84013586    0x44    ld a5,0(a5)
    0x84013588    0x46    lui a2,0xf8000
    0x8401358c    0x4a    srli a2,a2,0x19
    0x8401358e    0x4c    and a2,a2,a5
    0x84013590    0x4e    srli a5,a5,0x26
    0x84013592    0x50    andi a5,a5,1
    0x84013594    0x52    beqz a5,ffffffff8401359c <cancelIPC+0x5a>
    0x84013596    0x54    li a5,-1
    0x84013598    0x56    slli a5,a5,0x27
    0x8401359a    0x58    or a2,a2,a5
    0x8401359c    0x5a    mv a0,s0
    0x8401359e    0x5c    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x840135a2    0x60    sd a0,0(sp)           ; stack access
    0x840135a4    0x62    sd a1,8(sp)           ; stack access
    0x840135a6    0x64    sd a0,8(s1)
    0x840135a8    0x66    ld a5,0(s1)
    0x840135aa    0x68    li a4,-1
    0x840135ac    0x6a    slli a4,a4,0x27
    0x840135ae    0x6c    addi a4,a4,3
    0x840135b0    0x6e    and a5,a5,a4
    0x840135b2    0x70    lui a4,0xf8000
    0x840135b6    0x74    srli a4,a4,0x19
    0x840135b8    0x76    and a1,a1,a4
    0x840135ba    0x78    or a1,a1,a5
    0x840135bc    0x7a    beqz a0,ffffffff8401361a <cancelIPC+0xd8>
    0x840135be    0x7c    sd a1,0(s1)
    0x840135c0    0x7e    ld a5,288(s0)
    0x840135c4    0x82    srli a5,a5,0x1
    0x840135c6    0x84    lui a4,0xe0000
    0x840135ca    0x88    srli a4,a4,0x19
    0x840135cc    0x8a    and a4,a4,a5
    0x840135ce    0x8c    srli a5,a5,0x26
    0x840135d0    0x8e    andi a5,a5,1
    0x840135d2    0x90    beqz a5,ffffffff84013620 <cancelIPC+0xde>
    0x840135d4    0x92    li a5,-1
    0x840135d6    0x94    slli a5,a5,0x27
    0x840135d8    0x96    or a4,a4,a5
    0x840135da    0x98    ld a0,0(a4)
    0x840135dc    0x9a    ld a3,288(a0)
    0x840135e0    0x9e    li a5,-1
    0x840135e2    0xa0    slli a5,a5,0x28
    0x840135e4    0xa2    addi a5,a5,31
    0x840135e6    0xa4    and a5,a5,a3
    0x840135e8    0xa6    sd a5,288(a0)
    0x840135ec    0xaa    sd zero,0(a4) # ffffffffe0000000 <ki_end+0x5bfce000>
    0x840135f0    0xae    li a1,0
    0x840135f2    0xb0    jal ra,ffffffff84012996 <setThreadState>
    0x840135f6    0xb4    j ffffffff84013622 <cancelIPC+0xe0>
    0x840135f8    0xb6    li a3,6
    0x840135fa    0xb8    bne a5,a3,ffffffff8401362a <cancelIPC+0xe8>
    0x840135fe    0xbc    lui a1,0xe0000
    0x84013602    0xc0    srli a1,a1,0x19
    0x84013604    0xc2    and a1,a1,a4
    0x84013606    0xc4    srli a4,a4,0x26
    0x84013608    0xc6    andi a4,a4,1
    0x8401360a    0xc8    beqz a4,ffffffff84013612 <cancelIPC+0xd0>
    0x8401360c    0xca    li a5,-1
    0x8401360e    0xcc    slli a5,a5,0x27
    0x84013610    0xce    or a1,a1,a5
    0x84013612    0xd0    mv a0,s0
    0x84013614    0xd2    jal ra,ffffffff840134d4 <cancelSignal>
    0x84013618    0xd6    j ffffffff8401362a <cancelIPC+0xe8>
    0x8401361a    0xd8    andi a1,a1,-4
    0x8401361c    0xda    sd a1,0(s1)
    0x8401361e    0xdc    j ffffffff840135c0 <cancelIPC+0x7e>
    0x84013620    0xde    bnez a4,ffffffff840135da <cancelIPC+0x98>
    0x84013622    0xe0    li a1,0
    0x84013624    0xe2    mv a0,s0
    0x84013626    0xe4    jal ra,ffffffff84012996 <setThreadState>
    0x8401362a    0xe8    ld ra,40(sp)          ; stack access
    0x8401362c    0xea    ld s0,32(sp)          ; stack access
    0x8401362e    0xec    ld s1,24(sp)          ; stack access
    0x84013630    0xee    addi sp,sp,48
    0x84013632    0xf0    ret
    0x84013634    0xf2    jal ra,ffffffff84012bc4 <reply_remove_tcb>
    0x84013638    0xf6    j ffffffff8401362a <cancelIPC+0xe8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
102 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 150 nodes.

Section schedContext_completeYieldTo (264 of 301)
=================================================

Deriving specifications
-----------------------

Section `schedContext_completeYieldTo` consists of 34 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `schedContext_completeYieldTo`:

    0x8401280c     0x0    beqz a0,ffffffff8401285e <schedContext_completeYieldTo+0x52>
    0x8401280e     0x2    addi sp,sp,-32
    0x84012810     0x4    sd ra,24(sp)          ; stack access
    0x84012812     0x6    sd s0,16(sp)          ; stack access
    0x84012814     0x8    sd s1,8(sp)           ; stack access
    0x84012816     0xa    sd s2,0(sp)           ; stack access
    0x84012818     0xc    mv s0,a0
    0x8401281a     0xe    ld s1,376(a0)
    0x8401281e    0x12    beqz s1,ffffffff84012852 <schedContext_completeYieldTo+0x46>
    0x84012820    0x14    mv a1,a0
    0x84012822    0x16    li a0,1
    0x84012824    0x18    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84012828    0x1c    mv s2,a0
    0x8401282a    0x1e    mv a0,s1
    0x8401282c    0x20    jal ra,ffffffff840125da <schedContext_updateConsumed>
    0x84012830    0x24    mv a3,a0
    0x84012832    0x26    auipc s1,0x1b
    0x84012836    0x2a    addi s1,s1,-2010 # ffffffff8402d058 <ksCurThread>
    0x8401283a    0x2e    li a2,0
    0x8401283c    0x30    mv a1,s2
    0x8401283e    0x32    ld a0,0(s1)
    0x84012840    0x34    jal ra,ffffffff840100ea <setMR>
    0x84012844    0x38    ld a5,0(s1)
    0x84012846    0x3a    andi a0,a0,127
    0x8401284a    0x3e    sd a0,80(a5)
    0x8401284c    0x40    mv a0,s0
    0x8401284e    0x42    jal ra,ffffffff840127fa <schedContext_cancelYieldTo>
    0x84012852    0x46    ld ra,24(sp)          ; stack access
    0x84012854    0x48    ld s0,16(sp)          ; stack access
    0x84012856    0x4a    ld s1,8(sp)           ; stack access
    0x84012858    0x4c    ld s2,0(sp)           ; stack access
    0x8401285a    0x4e    addi sp,sp,32
    0x8401285c    0x50    ret
    0x8401285e    0x52    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedContext_completeYieldTo` has 56 nodes.

Section setMRs_fault (265 of 301)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 176 instructions.

LWU..

Stack analysis
---------------

12 stack accesses found. Annotated code for `setMRs_fault`:

    0x840125e4      0x0    addi sp,sp,-48
    0x840125e6      0x2    sd ra,40(sp)          ; stack access
    0x840125e8      0x4    sd s0,32(sp)          ; stack access
    0x840125ea      0x6    sd s1,24(sp)          ; stack access
    0x840125ec      0x8    sd s2,16(sp)          ; stack access
    0x840125ee      0xa    sd s3,8(sp)           ; stack access
    0x840125f0      0xc    sd s4,0(sp)           ; stack access
    0x840125f2      0xe    mv s0,a0
    0x840125f4     0x10    mv s1,a1
    0x840125f6     0x12    mv s2,a2
    0x840125f8     0x14    ld a5,312(a0)
    0x840125fc     0x18    andi a3,a5,15
    0x84012600     0x1c    li a4,3
    0x84012602     0x1e    beq a3,a4,ffffffff8401276c <setMRs_fault+0x188>
    0x84012606     0x22    andi a5,a5,12
    0x84012608     0x24    bnez a5,ffffffff84012662 <setMRs_fault+0x7e>
    0x8401260a     0x26    li a5,1
    0x8401260c     0x28    beq a3,a5,ffffffff84012698 <setMRs_fault+0xb4>
    0x84012610     0x2c    li a5,2
    0x84012612     0x2e    bne a3,a5,ffffffff840127b2 <setMRs_fault+0x1ce>
    0x84012616     0x32    ld a5,264(a0)
    0x8401261a     0x36    sd a5,88(a1)
    0x8401261c     0x38    ld a5,8(a0)
    0x8401261e     0x3a    sd a5,96(a1)
    0x84012620     0x3c    ld a5,0(a0)
    0x84012622     0x3e    sd a5,104(a1)
    0x84012624     0x40    ld a5,72(a0)
    0x84012626     0x42    sd a5,112(a1)
    0x84012628     0x44    beqz a2,ffffffff8401264e <setMRs_fault+0x6a>
    0x8401262a     0x46    auipc a3,0x8
    0x8401262e     0x4a    addi a3,a3,-1938 # ffffffff84019e98 <fault_messages>
    0x84012632     0x4e    addi a4,a2,40
    0x84012636     0x52    addi a2,a2,88
    0x8401263a     0x56    lbu a5,4(a3)
    0x8401263e     0x5a    slli a5,a5,0x3
    0x84012640     0x5c    add a5,a5,s0
    0x84012642     0x5e    ld a5,0(a5)
    0x84012644     0x60    sd a5,0(a4)
    0x84012646     0x62    addi a3,a3,1
    0x84012648     0x64    addi a4,a4,8
    0x8401264a     0x66    bne a2,a4,ffffffff8401263a <setMRs_fault+0x56>
    0x8401264e     0x6a    ld a3,320(s0)
    0x84012652     0x6e    li a2,10
    0x84012654     0x70    mv a1,s2
    0x84012656     0x72    mv a0,s1
    0x84012658     0x74    jal ra,ffffffff840100ea <setMR>
    0x8401265c     0x78    slli a0,a0,0x20
    0x8401265e     0x7a    srli a0,a0,0x20
    0x84012660     0x7c    j ffffffff8401279a <setMRs_fault+0x1b6>
    0x84012662     0x7e    li a5,5
    0x84012664     0x80    bne a3,a5,ffffffff840127b2 <setMRs_fault+0x1ce>
    0x84012668     0x84    ld a3,320(a0)
    0x8401266c     0x88    li a2,0
    0x8401266e     0x8a    mv a1,s2
    0x84012670     0x8c    mv a0,s1
    0x84012672     0x8e    jal ra,ffffffff840100ea <setMR>
    0x84012676     0x92    sext.w s3,a0
    0x8401267a     0x96    ld a0,368(s0)
    0x8401267e     0x9a    beqz a0,ffffffff840127aa <setMRs_fault+0x1c6>
    0x84012682     0x9e    jal ra,ffffffff840125da <schedContext_updateConsumed>
    0x84012686     0xa2    mv a3,a0
    0x84012688     0xa4    mv a2,s3
    0x8401268a     0xa6    mv a1,s2
    0x8401268c     0xa8    mv a0,s1
    0x8401268e     0xaa    jal ra,ffffffff840100ea <setMR>
    0x84012692     0xae    slli a0,a0,0x20
    0x84012694     0xb0    srli a0,a0,0x20
    0x84012696     0xb2    j ffffffff8401279a <setMRs_fault+0x1b6>
    0x84012698     0xb4    ld a3,264(a0)
    0x8401269c     0xb8    li a2,0
    0x8401269e     0xba    mv a1,s2
    0x840126a0     0xbc    mv a0,s1
    0x840126a2     0xbe    jal ra,ffffffff840100ea <setMR>
    0x840126a6     0xc2    ld a3,320(s0)
    0x840126aa     0xc6    li a2,1
    0x840126ac     0xc8    mv a1,s2
    0x840126ae     0xca    mv a0,s1
    0x840126b0     0xcc    jal ra,ffffffff840100ea <setMR>
    0x840126b4     0xd0    ld a3,312(s0)
    0x840126b8     0xd4    srli a3,a3,0x3f
    0x840126ba     0xd6    li a2,2
    0x840126bc     0xd8    mv a1,s2
    0x840126be     0xda    mv a0,s1
    0x840126c0     0xdc    jal ra,ffffffff840100ea <setMR>
    0x840126c4     0xe0    ld s3,328(s0)
    0x840126c8     0xe4    ld s4,336(s0)
    0x840126cc     0xe8    andi s0,s3,3
    0x840126d0     0xec    addi a3,s0,1
    0x840126d4     0xf0    li a2,3
    0x840126d6     0xf2    mv a1,s2
    0x840126d8     0xf4    mv a0,s1
    0x840126da     0xf6    jal ra,ffffffff840100ea <setMR>
    0x840126de     0xfa    sext.w a0,a0
    0x840126e0     0xfc    li a5,2
    0x840126e2     0xfe    beq s0,a5,ffffffff8401270c <setMRs_fault+0x128>
    0x840126e6    0x102    bltu a5,s0,ffffffff84012734 <setMRs_fault+0x150>
    0x840126ea    0x106    beqz s0,ffffffff84012706 <setMRs_fault+0x122>
    0x840126ec    0x108    li a5,1
    0x840126ee    0x10a    bne s0,a5,ffffffff84012768 <setMRs_fault+0x184>
    0x840126f2    0x10e    srli a3,s3,0x2
    0x840126f6    0x112    andi a3,a3,127
    0x840126fa    0x116    li a2,4
    0x840126fc    0x118    mv a1,s2
    0x840126fe    0x11a    mv a0,s1
    0x84012700    0x11c    jal ra,ffffffff840100ea <setMR>
    0x84012704    0x120    sext.w a0,a0
    0x84012706    0x122    slli a0,a0,0x20
    0x84012708    0x124    srli a0,a0,0x20
    0x8401270a    0x126    j ffffffff8401279a <setMRs_fault+0x1b6>
    0x8401270c    0x128    srli a3,s3,0x2
    0x84012710    0x12c    andi a3,a3,127
    0x84012714    0x130    li a2,4
    0x84012716    0x132    mv a1,s2
    0x84012718    0x134    mv a0,s1
    0x8401271a    0x136    jal ra,ffffffff840100ea <setMR>
    0x8401271e    0x13a    srli a3,s3,0x9
    0x84012722    0x13e    andi a3,a3,127
    0x84012726    0x142    li a2,5
    0x84012728    0x144    mv a1,s2
    0x8401272a    0x146    mv a0,s1
    0x8401272c    0x148    jal ra,ffffffff840100ea <setMR>
    0x84012730    0x14c    sext.w a0,a0
    0x84012732    0x14e    j ffffffff84012706 <setMRs_fault+0x122>
    0x84012734    0x150    srli a3,s3,0x9
    0x84012738    0x154    andi a3,a3,127
    0x8401273c    0x158    li a2,4
    0x8401273e    0x15a    mv a1,s2
    0x84012740    0x15c    mv a0,s1
    0x84012742    0x15e    jal ra,ffffffff840100ea <setMR>
    0x84012746    0x162    mv a3,s4
    0x84012748    0x164    li a2,5
    0x8401274a    0x166    mv a1,s2
    0x8401274c    0x168    mv a0,s1
    0x8401274e    0x16a    jal ra,ffffffff840100ea <setMR>
    0x84012752    0x16e    srli a3,s3,0x2
    0x84012756    0x172    andi a3,a3,127
    0x8401275a    0x176    li a2,6
    0x8401275c    0x178    mv a1,s2
    0x8401275e    0x17a    mv a0,s1
    0x84012760    0x17c    jal ra,ffffffff840100ea <setMR>
    0x84012764    0x180    sext.w a0,a0
    0x84012766    0x182    j ffffffff84012706 <setMRs_fault+0x122>
    0x84012768    0x184    jal ra,ffffffff84010490 <halt>
    0x8401276c    0x188    ld a5,264(a0)
    0x84012770    0x18c    sd a5,88(a1)
    0x84012772    0x18e    ld a5,8(a0)
    0x84012774    0x190    sd a5,96(a1)
    0x84012776    0x192    lwu a3,316(a0)
    0x8401277a    0x196    li a2,2
    0x8401277c    0x198    mv a1,s2
    0x8401277e    0x19a    mv a0,s1
    0x84012780    0x19c    jal ra,ffffffff840100ea <setMR>
    0x84012784    0x1a0    ld a3,312(s0)
    0x84012788    0x1a4    srliw a3,a3,0x4
    0x8401278c    0x1a8    li a2,3
    0x8401278e    0x1aa    mv a1,s2
    0x84012790    0x1ac    mv a0,s1
    0x84012792    0x1ae    jal ra,ffffffff840100ea <setMR>
    0x84012796    0x1b2    slli a0,a0,0x20
    0x84012798    0x1b4    srli a0,a0,0x20
    0x8401279a    0x1b6    ld ra,40(sp)          ; stack access
    0x8401279c    0x1b8    ld s0,32(sp)          ; stack access
    0x8401279e    0x1ba    ld s1,24(sp)          ; stack access
    0x840127a0    0x1bc    ld s2,16(sp)          ; stack access
    0x840127a2    0x1be    ld s3,8(sp)           ; stack access
    0x840127a4    0x1c0    ld s4,0(sp)           ; stack access
    0x840127a6    0x1c2    addi sp,sp,48
    0x840127a8    0x1c4    ret
    0x840127aa    0x1c6    slli a0,s3,0x20
    0x840127ae    0x1ca    srli a0,a0,0x20
    0x840127b0    0x1cc    j ffffffff8401279a <setMRs_fault+0x1b6>
    0x840127b2    0x1ce    mv a2,s2
    0x840127b4    0x1d0    mv a1,s1
    0x840127b6    0x1d2    mv a0,s0
    0x840127b8    0x1d4    jal ra,ffffffff840104ae <Arch_setMRs_fault>
    0x840127bc    0x1d8    j ffffffff8401279a <setMRs_fault+0x1b6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
176 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 257 nodes.

Section create_it_address_space (266 of 301)
============================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 125 instructions.


Stack analysis
---------------

49 stack accesses found. Annotated code for `create_it_address_space`:

    0x840006ce      0x0    addi sp,sp,-240
    0x840006d0      0x2    sd ra,232(sp)         ; stack access
    0x840006d2      0x4    sd s0,224(sp)         ; stack access
    0x840006d4      0x6    sd s1,216(sp)         ; stack access
    0x840006d6      0x8    sd s2,208(sp)         ; stack access
    0x840006d8      0xa    sd s3,200(sp)         ; stack access
    0x840006da      0xc    sd s4,192(sp)         ; stack access
    0x840006dc      0xe    sd s5,184(sp)         ; stack access
    0x840006de     0x10    sd s6,176(sp)         ; stack access
    0x840006e0     0x12    sd s7,168(sp)         ; stack access
    0x840006e2     0x14    sd s8,160(sp)         ; stack access
    0x840006e4     0x16    sd s9,152(sp)         ; stack access
    0x840006e6     0x18    sd s10,144(sp)        ; stack access
    0x840006e8     0x1a    sd s11,136(sp)        ; stack access
    0x840006ea     0x1c    sd a0,48(sp)          ; stack access
    0x840006ec     0x1e    sd a1,56(sp)          ; stack access
    0x840006ee     0x20    sd a2,32(sp)          ; stack access
    0x840006f0     0x22    mv s6,a3
    0x840006f2     0x24    auipc s0,0x1
    0x840006f6     0x28    addi s0,s0,-162 # ffffffff84001650 <ndks_boot>
    0x840006fa     0x2c    ld a0,616(s0)
    0x840006fe     0x30    jal ra,ffffffff8401051c <copyGlobalMappings>
    0x84000702     0x34    ld a5,616(s0)
    0x84000706     0x38    slli s4,a5,0x19
    0x8400070a     0x3c    srli s4,s4,0x19
    0x8400070e     0x40    lui a4,0x300
    0x84000712     0x44    addi a4,a4,1
    0x84000714     0x46    slli a4,a4,0x27
    0x84000716     0x48    or s4,s4,a4
    0x8400071a     0x4c    slli a5,a5,0x9
    0x8400071c     0x4e    lui a4,0xfe000
    0x84000720     0x52    srli a4,a4,0x10
    0x84000722     0x54    and a5,a5,a4
    0x84000724     0x56    li a4,1
    0x84000726     0x58    slli a4,a4,0x30
    0x84000728     0x5a    or s1,a5,a4
    0x8400072c     0x5e    sd s1,8(sp)           ; stack access
    0x8400072e     0x60    ld a5,592(s0)
    0x84000732     0x64    sd a5,24(sp)          ; stack access
    0x84000734     0x66    ld a0,48(sp)          ; stack access
    0x84000736     0x68    ld a1,56(sp)          ; stack access
    0x84000738     0x6a    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x8400073c     0x6e    sd s4,96(a0)
    0x84000740     0x72    sd s1,104(a0)
    0x84000742     0x74    sd zero,112(a0)
    0x84000746     0x78    li a5,3
    0x84000748     0x7a    sd a5,120(a0)
    0x8400074a     0x7c    li a5,30
    0x8400074c     0x7e    sd a5,16(sp)          ; stack access
    0x8400074e     0x80    mv s3,s0
    0x84000750     0x82    li s8,-1
    0x84000752     0x84    srli s8,s8,0x19
    0x84000756     0x88    lui s5,0x300
    0x8400075a     0x8c    addi s5,s5,1
    0x8400075c     0x8e    slli s5,s5,0x27
    0x8400075e     0x90    lui s7,0xfe000
    0x84000762     0x94    srli s7,s7,0x10
    0x84000766     0x98    ld a4,16(sp)          ; stack access
    0x84000768     0x9a    sext.w a5,a4
    0x8400076c     0x9e    ld s2,32(sp)          ; stack access
    0x8400076e     0xa0    srl s2,s2,a4
    0x84000772     0xa4    sll s2,s2,a4
    0x84000776     0xa8    bgeu s2,s6,ffffffff840007c4 <create_it_address_space+0xf6>
    0x8400077a     0xac    li s10,1
    0x8400077c     0xae    sll s10,s10,a5
    0x84000780     0xb2    lui s11,0x1
    0x84000782     0xb4    li s9,1
    0x84000784     0xb6    slli s9,s9,0x30
    0x84000786     0xb8    ld s0,672(s3) # ffffffff800002a0 <KERNEL_OFFSET+0x800002a0>
    0x8400078a     0xbc    add a5,s0,s11
    0x8400078e     0xc0    sd a5,672(s3)
    0x84000792     0xc4    and s1,s2,s8
    0x84000796     0xc8    or s1,s1,s5
    0x8400079a     0xcc    slli s0,s0,0x9
    0x8400079c     0xce    and s0,s0,s7
    0x840007a0     0xd2    or s0,s0,s9
    0x840007a4     0xd6    mv a2,s1
    0x840007a6     0xd8    mv a3,s0
    0x840007a8     0xda    mv a0,s4
    0x840007aa     0xdc    ld a1,8(sp)           ; stack access
    0x840007ac     0xde    jal ra,ffffffff84000190 <map_it_pt_cap>
    0x840007b0     0xe2    mv a2,s1
    0x840007b2     0xe4    mv a3,s0
    0x840007b4     0xe6    ld a0,48(sp)          ; stack access
    0x840007b6     0xe8    ld a1,56(sp)          ; stack access
    0x840007b8     0xea    jal ra,ffffffff84000674 <provide_cap>
    0x840007bc     0xee    beqz a0,ffffffff84000810 <create_it_address_space+0x142>
    0x840007be     0xf0    add s2,s2,s10
    0x840007c0     0xf2    bltu s2,s6,ffffffff84000786 <create_it_address_space+0xb8>
    0x840007c4     0xf6    ld a5,16(sp)          ; stack access
    0x840007c6     0xf8    addiw a5,a5,-9
    0x840007c8     0xfa    mv a4,a5
    0x840007ca     0xfc    sd a5,16(sp)          ; stack access
    0x840007cc     0xfe    li a5,12
    0x840007ce    0x100    bne a4,a5,ffffffff84000766 <create_it_address_space+0x98>
    0x840007d2    0x104    auipc a5,0x1
    0x840007d6    0x108    addi a5,a5,-386 # ffffffff84001650 <ndks_boot>
    0x840007da    0x10c    ld a4,592(a5)
    0x840007de    0x110    ld a5,584(a5)
    0x840007e2    0x114    ld a3,24(sp)          ; stack access
    0x840007e4    0x116    sd a3,88(a5)
    0x840007e6    0x118    sd a4,96(a5)
    0x840007e8    0x11a    sd s4,112(sp)         ; stack access
    0x840007ea    0x11c    ld a5,8(sp)           ; stack access
    0x840007ec    0x11e    sd a5,120(sp)         ; stack access
    0x840007ee    0x120    ld a0,112(sp)         ; stack access
    0x840007f0    0x122    ld a1,120(sp)         ; stack access
    0x840007f2    0x124    ld ra,232(sp)         ; stack access
    0x840007f4    0x126    ld s0,224(sp)         ; stack access
    0x840007f6    0x128    ld s1,216(sp)         ; stack access
    0x840007f8    0x12a    ld s2,208(sp)         ; stack access
    0x840007fa    0x12c    ld s3,200(sp)         ; stack access
    0x840007fc    0x12e    ld s4,192(sp)         ; stack access
    0x840007fe    0x130    ld s5,184(sp)         ; stack access
    0x84000800    0x132    ld s6,176(sp)         ; stack access
    0x84000802    0x134    ld s7,168(sp)         ; stack access
    0x84000804    0x136    ld s8,160(sp)         ; stack access
    0x84000806    0x138    ld s9,152(sp)         ; stack access
    0x84000808    0x13a    ld s10,144(sp)        ; stack access
    0x8400080a    0x13c    ld s11,136(sp)        ; stack access
    0x8400080c    0x13e    addi sp,sp,240
    0x8400080e    0x140    ret
    0x84000810    0x142    sd zero,112(sp)       ; stack access
    0x84000812    0x144    sd zero,120(sp)       ; stack access
    0x84000814    0x146    j ffffffff840007ee <create_it_address_space+0x120>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
125 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 200 nodes.

Section decodeSetIPCBuffer (267 of 301)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 83 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x84016a52     0x0    addi sp,sp,-208
    0x84016a54     0x2    sd ra,200(sp)         ; stack access
    0x84016a56     0x4    sd s0,192(sp)         ; stack access
    0x84016a58     0x6    sd s1,184(sp)         ; stack access
    0x84016a5a     0x8    sd s2,176(sp)         ; stack access
    0x84016a5c     0xa    sd a0,96(sp)          ; stack access
    0x84016a5e     0xc    sd a1,104(sp)         ; stack access
    0x84016a60     0xe    beqz a2,ffffffff84016aa4 <decodeSetIPCBuffer+0x52>
    0x84016a62    0x10    mv s1,a3
    0x84016a64    0x12    mv a1,a4
    0x84016a66    0x14    auipc s0,0x4
    0x84016a6a    0x18    ld s0,1578(s0) # ffffffff8401b090 <current_extra_caps>
    0x84016a6e    0x1c    beqz s0,ffffffff84016aa4 <decodeSetIPCBuffer+0x52>
    0x84016a70    0x1e    li a0,0
    0x84016a72    0x20    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016a76    0x24    mv s2,a0
    0x84016a78    0x26    ld a5,0(s0)
    0x84016a7a    0x28    sd a5,144(sp)         ; stack access
    0x84016a7c    0x2a    ld a5,8(s0)
    0x84016a7e    0x2c    sd a5,152(sp)         ; stack access
    0x84016a80    0x2e    beqz a0,ffffffff84016ab2 <decodeSetIPCBuffer+0x60>
    0x84016a82    0x30    ld a2,144(sp)         ; stack access
    0x84016a84    0x32    mv a3,a5
    0x84016a86    0x34    mv a1,s0
    0x84016a88    0x36    addi a0,sp,120
    0x84016a8a    0x38    jal ra,ffffffff840122be <deriveCap>
    0x84016a8e    0x3c    ld a0,120(sp)         ; stack access
    0x84016a90    0x3e    bnez a0,ffffffff84016b04 <decodeSetIPCBuffer+0xb2>
    0x84016a92    0x40    ld a1,128(sp)         ; stack access
    0x84016a94    0x42    sd a1,144(sp)         ; stack access
    0x84016a96    0x44    ld a2,136(sp)         ; stack access
    0x84016a98    0x46    sd a2,152(sp)         ; stack access
    0x84016a9a    0x48    mv a0,s2
    0x84016a9c    0x4a    jal ra,ffffffff84010b3c <checkValidIPCBuffer>
    0x84016aa0    0x4e    beqz a0,ffffffff84016ab4 <decodeSetIPCBuffer+0x62>
    0x84016aa2    0x50    j ffffffff84016b04 <decodeSetIPCBuffer+0xb2>
    0x84016aa4    0x52    li a5,7
    0x84016aa6    0x54    auipc a4,0x4
    0x84016aaa    0x58    sd a5,410(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016aae    0x5c    li a0,3
    0x84016ab0    0x5e    j ffffffff84016b04 <decodeSetIPCBuffer+0xb2>
    0x84016ab2    0x60    li s0,0
    0x84016ab4    0x62    li a1,2
    0x84016ab6    0x64    auipc a0,0x16
    0x84016aba    0x68    ld a0,1442(a0) # ffffffff8402d058 <ksCurThread>
    0x84016abe    0x6c    jal ra,ffffffff84012996 <setThreadState>
    0x84016ac2    0x70    ld a5,96(sp)          ; stack access
    0x84016ac4    0x72    slli a0,a5,0x19
    0x84016ac8    0x76    srli a0,a0,0x19
    0x84016aca    0x78    srli a5,a5,0x26
    0x84016acc    0x7a    andi a5,a5,1
    0x84016ace    0x7c    beqz a5,ffffffff84016ad6 <decodeSetIPCBuffer+0x84>
    0x84016ad0    0x7e    li a5,-1
    0x84016ad2    0x80    slli a5,a5,0x27
    0x84016ad4    0x82    or a0,a0,a5
    0x84016ad6    0x84    li a5,1
    0x84016ad8    0x86    sd a5,80(sp)          ; stack access
    0x84016ada    0x88    sd s0,72(sp)          ; stack access
    0x84016adc    0x8a    ld a5,144(sp)         ; stack access
    0x84016ade    0x8c    sd a5,56(sp)          ; stack access
    0x84016ae0    0x8e    ld a5,152(sp)         ; stack access
    0x84016ae2    0x90    sd a5,64(sp)          ; stack access
    0x84016ae4    0x92    sd s2,48(sp)          ; stack access
    0x84016ae6    0x94    sd zero,40(sp)        ; stack access
    0x84016ae8    0x96    sd zero,24(sp)        ; stack access
    0x84016aea    0x98    sd zero,32(sp)        ; stack access
    0x84016aec    0x9a    sd zero,16(sp)        ; stack access
    0x84016aee    0x9c    sd zero,0(sp)         ; stack access
    0x84016af0    0x9e    sd zero,8(sp)         ; stack access
    0x84016af2    0xa0    li a7,0
    0x84016af4    0xa2    li a5,0
    0x84016af6    0xa4    li a6,0
    0x84016af8    0xa6    li a4,0
    0x84016afa    0xa8    li a2,0
    0x84016afc    0xaa    li a3,0
    0x84016afe    0xac    mv a1,s1
    0x84016b00    0xae    jal ra,ffffffff840165d8 <invokeTCB_ThreadControlCaps>
    0x84016b04    0xb2    ld ra,200(sp)         ; stack access
    0x84016b06    0xb4    ld s0,192(sp)         ; stack access
    0x84016b08    0xb6    ld s1,184(sp)         ; stack access
    0x84016b0a    0xb8    ld s2,176(sp)         ; stack access
    0x84016b0c    0xba    addi sp,sp,208
    0x84016b0e    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 138 nodes.

Section doNormalTransfer (268 of 301)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 146 instructions.

SLLW.....

Stack analysis
---------------

40 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84014d12      0x0    addi sp,sp,-192
    0x84014d14      0x2    sd ra,184(sp)         ; stack access
    0x84014d16      0x4    sd s0,176(sp)         ; stack access
    0x84014d18      0x6    sd s1,168(sp)         ; stack access
    0x84014d1a      0x8    sd s2,160(sp)         ; stack access
    0x84014d1c      0xa    sd s3,152(sp)         ; stack access
    0x84014d1e      0xc    sd s4,144(sp)         ; stack access
    0x84014d20      0xe    sd s5,136(sp)         ; stack access
    0x84014d22     0x10    sd s6,128(sp)         ; stack access
    0x84014d24     0x12    sd s7,120(sp)         ; stack access
    0x84014d26     0x14    sd s8,112(sp)         ; stack access
    0x84014d28     0x16    sd s9,104(sp)         ; stack access
    0x84014d2a     0x18    sd s10,96(sp)         ; stack access
    0x84014d2c     0x1a    sd s11,88(sp)         ; stack access
    0x84014d2e     0x1c    mv s2,a0
    0x84014d30     0x1e    mv s6,a1
    0x84014d32     0x20    mv s5,a2
    0x84014d34     0x22    mv s4,a3
    0x84014d36     0x24    mv s1,a5
    0x84014d38     0x26    mv s3,a6
    0x84014d3a     0x28    ld s0,80(a0)
    0x84014d3c     0x2a    andi a3,s0,127
    0x84014d40     0x2e    li a5,120
    0x84014d44     0x32    bgeu a5,a3,ffffffff84014d50 <doNormalTransfer+0x3e>
    0x84014d48     0x36    andi s0,s0,-128
    0x84014d4c     0x3a    ori s0,s0,120
    0x84014d50     0x3e    bnez a4,ffffffff84014dae <doNormalTransfer+0x9c>
    0x84014d52     0x40    auipc a5,0x6
    0x84014d56     0x44    sd zero,830(a5) # ffffffff8401b090 <current_extra_caps>
    0x84014d5a     0x48    andi a4,s0,127
    0x84014d5e     0x4c    mv a3,s3
    0x84014d60     0x4e    mv a2,s1
    0x84014d62     0x50    mv a1,s6
    0x84014d64     0x52    mv a0,s2
    0x84014d66     0x54    jal ra,ffffffff84014ca2 <copyMRs>
    0x84014d6a     0x58    mv s2,a0
    0x84014d6c     0x5a    lui a5,0xfffff
    0x84014d6e     0x5c    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfcd07f>
    0x84014d72     0x60    and s0,s0,a5
    0x84014d74     0x62    auipc a5,0x6
    0x84014d78     0x66    ld a5,796(a5) # ffffffff8401b090 <current_extra_caps>
    0x84014d7c     0x6a    bnez a5,ffffffff84014dc4 <doNormalTransfer+0xb2>
    0x84014d7e     0x6c    andi s0,s0,-128
    0x84014d82     0x70    andi s2,s2,127
    0x84014d86     0x74    or s0,s0,s2
    0x84014d8a     0x78    sd s0,80(s1)
    0x84014d8c     0x7a    sd s4,72(s1)
    0x84014d90     0x7e    ld ra,184(sp)         ; stack access
    0x84014d92     0x80    ld s0,176(sp)         ; stack access
    0x84014d94     0x82    ld s1,168(sp)         ; stack access
    0x84014d96     0x84    ld s2,160(sp)         ; stack access
    0x84014d98     0x86    ld s3,152(sp)         ; stack access
    0x84014d9a     0x88    ld s4,144(sp)         ; stack access
    0x84014d9c     0x8a    ld s5,136(sp)         ; stack access
    0x84014d9e     0x8c    ld s6,128(sp)         ; stack access
    0x84014da0     0x8e    ld s7,120(sp)         ; stack access
    0x84014da2     0x90    ld s8,112(sp)         ; stack access
    0x84014da4     0x92    ld s9,104(sp)         ; stack access
    0x84014da6     0x94    ld s10,96(sp)         ; stack access
    0x84014da8     0x96    ld s11,88(sp)         ; stack access
    0x84014daa     0x98    addi sp,sp,192
    0x84014dac     0x9a    ret
    0x84014dae     0x9c    mv a2,s0
    0x84014db0     0x9e    mv a1,s6
    0x84014db2     0xa0    mv a0,s2
    0x84014db4     0xa2    jal ra,ffffffff84014c0c <lookupExtraCaps>
    0x84014db8     0xa6    beqz a0,ffffffff84014d5a <doNormalTransfer+0x48>
    0x84014dba     0xa8    auipc a5,0x6
    0x84014dbe     0xac    sd zero,726(a5) # ffffffff8401b090 <current_extra_caps>
    0x84014dc2     0xb0    j ffffffff84014d5a <doNormalTransfer+0x48>
    0x84014dc4     0xb2    beqz s3,ffffffff84014d7e <doNormalTransfer+0x6c>
    0x84014dc8     0xb6    mv a1,s3
    0x84014dca     0xb8    mv a0,s1
    0x84014dcc     0xba    jal ra,ffffffff84011bde <getReceiveSlots>
    0x84014dd0     0xbe    mv s8,a0
    0x84014dd2     0xc0    auipc s9,0x6
    0x84014dd6     0xc4    addi s9,s9,702 # ffffffff8401b090 <current_extra_caps>
    0x84014dda     0xc8    addi s3,s3,976
    0x84014dde     0xcc    li s7,0
    0x84014de0     0xce    li s10,-1
    0x84014de2     0xd0    srli s11,s10,0x19
    0x84014de6     0xd4    li a5,1
    0x84014de8     0xd6    slli a5,a5,0x26
    0x84014dea     0xd8    sd a5,8(sp)           ; stack access
    0x84014dec     0xda    lui a5,0x1
    0x84014dee     0xdc    addi a5,a5,-512 # e00 <KERNEL_OFFSET-0xfffffffefffff200>
    0x84014df2     0xe0    sd a5,16(sp)          ; stack access
    0x84014df4     0xe2    lui a5,0xfffff
    0x84014df6     0xe4    addi a5,a5,511 # fffffffffffff1ff <ki_end+0x7bfcd1ff>
    0x84014dfa     0xe8    sd a5,24(sp)          ; stack access
    0x84014dfc     0xea    j ffffffff84014e32 <doNormalTransfer+0x120>
    0x84014dfe     0xec    beqz s8,ffffffff84014e84 <doNormalTransfer+0x172>
    0x84014e02     0xf0    sd a2,40(sp)          ; stack access
    0x84014e04     0xf2    sd a3,48(sp)          ; stack access
    0x84014e06     0xf4    mv a1,s6
    0x84014e08     0xf6    addi a0,sp,56
    0x84014e0a     0xf8    jal ra,ffffffff840122be <deriveCap>
    0x84014e0e     0xfc    ld a5,56(sp)          ; stack access
    0x84014e10     0xfe    bnez a5,ffffffff84014e84 <doNormalTransfer+0x172>
    0x84014e12    0x100    ld a5,64(sp)          ; stack access
    0x84014e14    0x102    srli a5,a5,0x3b
    0x84014e16    0x104    beqz a5,ffffffff84014e84 <doNormalTransfer+0x172>
    0x84014e18    0x106    mv a3,s8
    0x84014e1a    0x108    mv a2,s6
    0x84014e1c    0x10a    ld a0,64(sp)          ; stack access
    0x84014e1e    0x10c    ld a1,72(sp)          ; stack access
    0x84014e20    0x10e    jal ra,ffffffff840118d4 <cteInsert>
    0x84014e24    0x112    li s8,0
    0x84014e26    0x114    addi s7,s7,1
    0x84014e28    0x116    addi s9,s9,8
    0x84014e2a    0x118    addi s3,s3,8
    0x84014e2c    0x11a    li a5,3
    0x84014e2e    0x11c    beq s7,a5,ffffffff84014e84 <doNormalTransfer+0x172>
    0x84014e32    0x120    ld s6,0(s9)
    0x84014e36    0x124    beqz s6,ffffffff84014e84 <doNormalTransfer+0x172>
    0x84014e3a    0x128    ld a2,0(s6) # fffffffffe000000 <ki_end+0x79fce000>
    0x84014e3e    0x12c    sd a2,40(sp)          ; stack access
    0x84014e40    0x12e    ld a3,8(s6)
    0x84014e44    0x132    sd a3,48(sp)          ; stack access
    0x84014e46    0x134    srli a4,a2,0x3b
    0x84014e4a    0x138    li a5,4
    0x84014e4c    0x13a    bne a4,a5,ffffffff84014dfe <doNormalTransfer+0xec>
    0x84014e50    0x13e    and a5,a2,s11
    0x84014e54    0x142    ld a4,8(sp)           ; stack access
    0x84014e56    0x144    and a4,a4,a2
    0x84014e58    0x146    beqz a4,ffffffff84014e60 <doNormalTransfer+0x14e>
    0x84014e5a    0x148    slli a4,s10,0x27
    0x84014e5e    0x14c    or a5,a5,a4
    0x84014e60    0x14e    bne s5,a5,ffffffff84014dfe <doNormalTransfer+0xec>
    0x84014e64    0x152    sd a3,0(s3)
    0x84014e68    0x156    srli a5,s0,0x9
    0x84014e6c    0x15a    andi a5,a5,7
    0x84014e6e    0x15c    li a4,1
    0x84014e70    0x15e    sllw a4,a4,s7
    0x84014e74    0x162    or a5,a5,a4
    0x84014e76    0x164    slli a5,a5,0x9
    0x84014e78    0x166    ld a4,16(sp)          ; stack access
    0x84014e7a    0x168    and a5,a5,a4
    0x84014e7c    0x16a    ld a4,24(sp)          ; stack access
    0x84014e7e    0x16c    and s0,s0,a4
    0x84014e80    0x16e    or s0,s0,a5
    0x84014e82    0x170    j ffffffff84014e26 <doNormalTransfer+0x114>
    0x84014e84    0x172    slli a5,s7,0x7
    0x84014e88    0x176    andi a5,a5,384
    0x84014e8c    0x17a    or s0,s0,a5
    0x84014e8e    0x17c    j ffffffff84014d7e <doNormalTransfer+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
146 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 228 nodes.

Section receiveSignal (269 of 301)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 149 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `receiveSignal`:

    0x840144c6      0x0    addi sp,sp,-48
    0x840144c8      0x2    sd ra,40(sp)          ; stack access
    0x840144ca      0x4    sd s0,32(sp)          ; stack access
    0x840144cc      0x6    sd s1,24(sp)          ; stack access
    0x840144ce      0x8    mv s0,a0
    0x840144d0      0xa    sd a1,0(sp)           ; stack access
    0x840144d2      0xc    sd a2,8(sp)           ; stack access
    0x840144d4      0xe    slli a5,a1,0x19
    0x840144d8     0x12    srli a5,a5,0x19
    0x840144da     0x14    srli a1,a1,0x26
    0x840144dc     0x16    andi a1,a1,1
    0x840144de     0x18    beqz a1,ffffffff840144e6 <receiveSignal+0x20>
    0x840144e0     0x1a    li a4,-1
    0x840144e2     0x1c    slli a4,a4,0x27
    0x840144e4     0x1e    or a5,a5,a4
    0x840144e6     0x20    mv s1,a5
    0x840144e8     0x22    ld a4,0(a5)
    0x840144ea     0x24    andi a2,a4,3
    0x840144ee     0x28    andi a4,a4,2
    0x840144f0     0x2a    beqz a4,ffffffff84014514 <receiveSignal+0x4e>
    0x840144f2     0x2c    li a5,2
    0x840144f4     0x2e    bne a2,a5,ffffffff8401450a <receiveSignal+0x44>
    0x840144f8     0x32    ld a5,16(s1)
    0x840144fa     0x34    sd a5,72(s0)
    0x840144fc     0x36    ld a5,0(s1)
    0x840144fe     0x38    andi a5,a5,-4
    0x84014500     0x3a    sd a5,0(s1)
    0x84014502     0x3c    ld a5,368(s0)
    0x84014506     0x40    beqz a5,ffffffff84014604 <receiveSignal+0x13e>
    0x8401450a     0x44    ld ra,40(sp)          ; stack access
    0x8401450c     0x46    ld s0,32(sp)          ; stack access
    0x8401450e     0x48    ld s1,24(sp)          ; stack access
    0x84014510     0x4a    addi sp,sp,48
    0x84014512     0x4c    ret
    0x84014514     0x4e    beqz a3,ffffffff840145fe <receiveSignal+0x138>
    0x84014516     0x50    ld a3,280(s0)
    0x8401451a     0x54    li a4,-1
    0x8401451c     0x56    slli a2,a4,0x27
    0x84014520     0x5a    and a3,a3,a2
    0x84014522     0x5c    lui a2,0xe0000
    0x84014526     0x60    srli a2,a2,0x19
    0x84014528     0x62    and a5,a5,a2
    0x8401452a     0x64    or a5,a5,a3
    0x8401452c     0x66    ori a5,a5,6
    0x84014530     0x6a    sd a5,280(s0)
    0x84014534     0x6e    ld a3,32(s1)
    0x84014536     0x70    srli a5,a4,0x19
    0x8401453a     0x74    and a5,a5,a3
    0x8401453c     0x76    srli a3,a3,0x26
    0x8401453e     0x78    andi a3,a3,1
    0x84014540     0x7a    beqz a3,ffffffff84014546 <receiveSignal+0x80>
    0x84014542     0x7c    slli a4,a4,0x27
    0x84014544     0x7e    or a5,a5,a4
    0x84014546     0x80    ld a4,368(s0)
    0x8401454a     0x84    beq a4,a5,ffffffff84014592 <receiveSignal+0xcc>
    0x8401454e     0x88    mv a0,s0
    0x84014550     0x8a    jal ra,ffffffff8401294e <scheduleTCB>
    0x84014554     0x8e    ld a4,8(s1)
    0x84014556     0x90    slli a5,a4,0x19
    0x8401455a     0x94    srli a5,a5,0x19
    0x8401455c     0x96    srli a4,a4,0x26
    0x8401455e     0x98    andi a4,a4,1
    0x84014560     0x9a    beqz a4,ffffffff84014568 <receiveSignal+0xa2>
    0x84014562     0x9c    li a4,-1
    0x84014564     0x9e    slli a4,a4,0x27
    0x84014566     0xa0    or a5,a5,a4
    0x84014568     0xa2    ld a3,0(s1)
    0x8401456a     0xa4    srli a4,a3,0x19
    0x8401456e     0xa8    bgez a3,ffffffff840145ac <receiveSignal+0xe6>
    0x84014572     0xac    li a3,-1
    0x84014574     0xae    slli a3,a3,0x27
    0x84014576     0xb0    or a4,a4,a3
    0x84014578     0xb2    ld a1,360(s0)
    0x8401457c     0xb6    mv a3,a4
    0x8401457e     0xb8    li a2,0
    0x84014580     0xba    ld a0,360(a3)
    0x84014584     0xbe    bltu a0,a1,ffffffff840145e6 <receiveSignal+0x120>
    0x84014588     0xc2    sd s0,408(a3)
    0x8401458c     0xc6    bnez a2,ffffffff840145f2 <receiveSignal+0x12c>
    0x8401458e     0xc8    mv a4,s0
    0x84014590     0xca    j ffffffff840145b6 <receiveSignal+0xf0>
    0x84014592     0xcc    sd zero,368(s0)
    0x84014596     0xd0    sd zero,24(a5)
    0x8401459a     0xd4    auipc a5,0x19
    0x8401459e     0xd8    ld a5,-1346(a5) # ffffffff8402d058 <ksCurThread>
    0x840145a2     0xdc    bne s0,a5,ffffffff8401454e <receiveSignal+0x88>
    0x840145a6     0xe0    jal ra,ffffffff840128fc <rescheduleRequired>
    0x840145aa     0xe4    j ffffffff8401454e <receiveSignal+0x88>
    0x840145ac     0xe6    bnez a4,ffffffff84014578 <receiveSignal+0xb2>
    0x840145ae     0xe8    mv a5,s0
    0x840145b0     0xea    mv a4,s0
    0x840145b2     0xec    li a2,0
    0x840145b4     0xee    li a3,0
    0x840145b6     0xf0    sd a2,408(s0)
    0x840145ba     0xf4    sd a3,416(s0)
    0x840145be     0xf8    ld a3,0(s1)
    0x840145c0     0xfa    ld a2,8(s1)
    0x840145c2     0xfc    li a1,-1
    0x840145c4     0xfe    slli a0,a1,0x27
    0x840145c8    0x102    and a2,a2,a0
    0x840145ca    0x104    srli a1,a1,0x19
    0x840145cc    0x106    and a5,a5,a1
    0x840145ce    0x108    or a5,a5,a2
    0x840145d0    0x10a    sd a5,8(s1)
    0x840145d2    0x10c    lui a5,0x2000
    0x840145d6    0x110    addi a5,a5,-4
    0x840145d8    0x112    and a5,a5,a3
    0x840145da    0x114    slli a4,a4,0x19
    0x840145dc    0x116    or a4,a4,a5
    0x840145de    0x118    ori a4,a4,1
    0x840145e2    0x11c    sd a4,0(s1)
    0x840145e4    0x11e    j ffffffff8401450a <receiveSignal+0x44>
    0x840145e6    0x120    ld a0,416(a3)
    0x840145ea    0x124    bnez a0,ffffffff840145f8 <receiveSignal+0x132>
    0x840145ec    0x126    mv a2,a3
    0x840145ee    0x128    mv a5,s0
    0x840145f0    0x12a    mv a3,a0
    0x840145f2    0x12c    sd s0,416(a2) # ffffffffe00001a0 <ki_end+0x5bfce1a0>
    0x840145f6    0x130    j ffffffff840145b6 <receiveSignal+0xf0>
    0x840145f8    0x132    mv a2,a3
    0x840145fa    0x134    mv a3,a0
    0x840145fc    0x136    j ffffffff84014580 <receiveSignal+0xba>
    0x840145fe    0x138    sd zero,72(s0)
    0x84014602    0x13c    j ffffffff8401450a <receiveSignal+0x44>
    0x84014604    0x13e    ld a5,32(s1)
    0x84014606    0x140    slli a4,a5,0x19
    0x8401460a    0x144    srli a4,a4,0x19
    0x8401460c    0x146    srli a5,a5,0x26
    0x8401460e    0x148    andi a5,a5,1
    0x84014610    0x14a    beqz a5,ffffffff84014640 <receiveSignal+0x17a>
    0x84014612    0x14c    li s1,-1
    0x84014614    0x14e    slli s1,s1,0x27
    0x84014616    0x150    or s1,s1,a4
    0x84014618    0x152    ld a5,24(s1)
    0x8401461a    0x154    bnez a5,ffffffff8401450a <receiveSignal+0x44>
    0x8401461e    0x158    mv a1,s0
    0x84014620    0x15a    mv a0,s1
    0x84014622    0x15c    jal ra,ffffffff840130c2 <schedContext_donate>
    0x84014626    0x160    auipc a5,0x19
    0x8401462a    0x164    ld a5,-1534(a5) # ffffffff8402d028 <ksCurSC>
    0x8401462e    0x168    beq s1,a5,ffffffff84014638 <receiveSignal+0x172>
    0x84014632    0x16c    mv a0,s1
    0x84014634    0x16e    jal ra,ffffffff840117d6 <refill_unblock_check>
    0x84014638    0x172    mv a0,s1
    0x8401463a    0x174    jal ra,ffffffff84013d0a <schedContext_resume>
    0x8401463e    0x178    j ffffffff8401450a <receiveSignal+0x44>
    0x84014640    0x17a    beqz a4,ffffffff8401450a <receiveSignal+0x44>
    0x84014644    0x17e    mv s1,a4
    0x84014646    0x180    j ffffffff84014618 <receiveSignal+0x152>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
149 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 229 nodes.

Section suspend (270 of 301)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x840137e4     0x0    addi sp,sp,-16
    0x840137e6     0x2    sd ra,8(sp)           ; stack access
    0x840137e8     0x4    sd s0,0(sp)           ; stack access
    0x840137ea     0x6    mv s0,a0
    0x840137ec     0x8    jal ra,ffffffff84013542 <cancelIPC>
    0x840137f0     0xc    ld a5,280(s0)
    0x840137f4    0x10    andi a5,a5,15
    0x840137f6    0x12    li a4,1
    0x840137f8    0x14    beq a5,a4,ffffffff8401381e <suspend+0x3a>
    0x840137fc    0x18    li a1,0
    0x840137fe    0x1a    mv a0,s0
    0x84013800    0x1c    jal ra,ffffffff84012996 <setThreadState>
    0x84013804    0x20    mv a0,s0
    0x84013806    0x22    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x8401380a    0x26    mv a0,s0
    0x8401380c    0x28    jal ra,ffffffff84013794 <tcbReleaseRemove>
    0x84013810    0x2c    mv a0,s0
    0x84013812    0x2e    jal ra,ffffffff840127fa <schedContext_cancelYieldTo>
    0x84013816    0x32    ld ra,8(sp)           ; stack access
    0x84013818    0x34    ld s0,0(sp)           ; stack access
    0x8401381a    0x36    addi sp,sp,16
    0x8401381c    0x38    ret
    0x8401381e    0x3a    ld a5,272(s0)
    0x84013822    0x3e    sd a5,264(s0)
    0x84013826    0x42    j ffffffff840137fc <suspend+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 40 nodes.

Section setPriority (271 of 301)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 65 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setPriority`:

    0x840136e6     0x0    addi sp,sp,-32
    0x840136e8     0x2    sd ra,24(sp)          ; stack access
    0x840136ea     0x4    sd s0,16(sp)          ; stack access
    0x840136ec     0x6    sd s1,8(sp)           ; stack access
    0x840136ee     0x8    mv s0,a0
    0x840136f0     0xa    mv s1,a1
    0x840136f2     0xc    ld a4,280(a0)
    0x840136f6    0x10    andi a5,a4,15
    0x840136fa    0x14    li a3,4
    0x840136fc    0x16    bltu a3,a5,ffffffff8401372a <setPriority+0x44>
    0x84013700    0x1a    li a3,2
    0x84013702    0x1c    bltu a3,a5,ffffffff84013766 <setPriority+0x80>
    0x84013706    0x20    addi a5,a5,-1
    0x84013708    0x22    li a4,1
    0x8401370a    0x24    bltu a4,a5,ffffffff8401378e <setPriority+0xa8>
    0x8401370e    0x28    ld a5,288(a0)
    0x84013712    0x2c    srli a5,a5,0x1
    0x84013714    0x2e    andi a5,a5,1
    0x84013716    0x30    bnez a5,ffffffff84013750 <setPriority+0x6a>
    0x84013718    0x32    auipc a5,0x1a
    0x8401371c    0x36    ld a5,-1728(a5) # ffffffff8402d058 <ksCurThread>
    0x84013720    0x3a    beq a5,a0,ffffffff84013750 <setPriority+0x6a>
    0x84013724    0x3e    sd a1,360(s0)
    0x84013728    0x42    j ffffffff84013784 <setPriority+0x9e>
    0x8401372a    0x44    li a3,6
    0x8401372c    0x46    bne a5,a3,ffffffff8401378e <setPriority+0xa8>
    0x84013730    0x4a    sd a1,360(s0)
    0x84013734    0x4e    lui a0,0xe0000
    0x84013738    0x52    srli a0,a0,0x19
    0x8401373a    0x54    and a0,a0,a4
    0x8401373c    0x56    srli a4,a4,0x26
    0x8401373e    0x58    andi a4,a4,1
    0x84013740    0x5a    beqz a4,ffffffff84013748 <setPriority+0x62>
    0x84013742    0x5c    li a5,-1
    0x84013744    0x5e    slli a5,a5,0x27
    0x84013746    0x60    or a0,a0,a5
    0x84013748    0x62    mv a1,s0
    0x8401374a    0x64    jal ra,ffffffff8401363a <reorderNTFN>
    0x8401374e    0x68    j ffffffff84013784 <setPriority+0x9e>
    0x84013750    0x6a    mv a0,s0
    0x84013752    0x6c    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x84013756    0x70    sd s1,360(s0)
    0x8401375a    0x74    mv a0,s0
    0x8401375c    0x76    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84013760    0x7a    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84013764    0x7e    j ffffffff84013784 <setPriority+0x9e>
    0x84013766    0x80    sd a1,360(s0)
    0x8401376a    0x84    lui a0,0xe0000
    0x8401376e    0x88    srli a0,a0,0x19
    0x84013770    0x8a    and a0,a0,a4
    0x84013772    0x8c    srli a4,a4,0x26
    0x84013774    0x8e    andi a4,a4,1
    0x84013776    0x90    beqz a4,ffffffff8401377e <setPriority+0x98>
    0x84013778    0x92    li a5,-1
    0x8401377a    0x94    slli a5,a5,0x27
    0x8401377c    0x96    or a0,a0,a5
    0x8401377e    0x98    mv a1,s0
    0x84013780    0x9a    jal ra,ffffffff8401343a <reorderEP>
    0x84013784    0x9e    ld ra,24(sp)          ; stack access
    0x84013786    0xa0    ld s0,16(sp)          ; stack access
    0x84013788    0xa2    ld s1,8(sp)           ; stack access
    0x8401378a    0xa4    addi sp,sp,32
    0x8401378c    0xa6    ret
    0x8401378e    0xa8    sd s1,360(s0)
    0x84013792    0xac    j ffffffff84013784 <setPriority+0x9e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 101 nodes.

Section cancelBadgedSends (272 of 301)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 92 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x84013326     0x0    addi sp,sp,-80
    0x84013328     0x2    sd ra,72(sp)          ; stack access
    0x8401332a     0x4    sd s0,64(sp)          ; stack access
    0x8401332c     0x6    sd s1,56(sp)          ; stack access
    0x8401332e     0x8    sd s2,48(sp)          ; stack access
    0x84013330     0xa    sd s3,40(sp)          ; stack access
    0x84013332     0xc    sd s4,32(sp)          ; stack access
    0x84013334     0xe    sd s5,24(sp)          ; stack access
    0x84013336    0x10    ld a5,0(a0)
    0x84013338    0x12    andi a3,a5,3
    0x8401333c    0x16    li a4,1
    0x8401333e    0x18    beq a3,a4,ffffffff8401334a <cancelBadgedSends+0x24>
    0x84013342    0x1c    andi a5,a5,1
    0x84013344    0x1e    beqz a5,ffffffff840133fc <cancelBadgedSends+0xd6>
    0x84013346    0x20    jal ra,ffffffff84010490 <halt>
    0x8401334a    0x24    mv s5,a0
    0x8401334c    0x26    mv s4,a1
    0x8401334e    0x28    ld s0,8(a0)
    0x84013350    0x2a    mv s3,s0
    0x84013352    0x2c    lui a4,0xf8000
    0x84013356    0x30    srli a4,a4,0x19
    0x84013358    0x32    and a4,a4,a5
    0x8401335a    0x34    srli a3,a5,0x26
    0x8401335e    0x38    andi a3,a3,1
    0x84013360    0x3a    beqz a3,ffffffff84013368 <cancelBadgedSends+0x42>
    0x84013362    0x3c    li a3,-1
    0x84013364    0x3e    slli a3,a3,0x27
    0x84013366    0x40    or a4,a4,a3
    0x84013368    0x42    mv s2,a4
    0x8401336a    0x44    sd zero,8(s5) # 2008 <KERNEL_OFFSET-0xfffffffeffffdff8>
    0x8401336e    0x48    srli a5,a5,0x27
    0x84013370    0x4a    slli a5,a5,0x27
    0x84013372    0x4c    sd a5,0(s5)
    0x84013376    0x50    bnez s0,ffffffff840133a8 <cancelBadgedSends+0x82>
    0x84013378    0x52    sd zero,8(s5)
    0x8401337c    0x56    lui a3,0xf8000
    0x84013380    0x5a    srli a3,a3,0x19
    0x84013382    0x5c    and a4,a4,a3
    0x84013384    0x5e    or a5,a5,a4
    0x84013386    0x60    sd a5,0(s5)
    0x8401338a    0x64    j ffffffff840133f8 <cancelBadgedSends+0xd2>
    0x8401338c    0x66    li a1,0
    0x8401338e    0x68    mv a0,s1
    0x84013390    0x6a    jal ra,ffffffff84012996 <setThreadState>
    0x84013394    0x6e    mv a1,s3
    0x84013396    0x70    mv a2,s2
    0x84013398    0x72    mv a0,s1
    0x8401339a    0x74    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x8401339e    0x78    mv s3,a0
    0x840133a0    0x7a    sd a0,0(sp)           ; stack access
    0x840133a2    0x7c    sd a1,8(sp)           ; stack access
    0x840133a4    0x7e    mv s2,a1
    0x840133a6    0x80    beqz s0,ffffffff840133ce <cancelBadgedSends+0xa8>
    0x840133a8    0x82    ld a5,296(s0)
    0x840133ac    0x86    mv s1,s0
    0x840133ae    0x88    ld s0,408(s0)
    0x840133b2    0x8c    bne s4,a5,ffffffff840133a6 <cancelBadgedSends+0x80>
    0x840133b6    0x90    ld a5,312(s1)
    0x840133ba    0x94    andi a5,a5,15
    0x840133bc    0x96    bnez a5,ffffffff8401338c <cancelBadgedSends+0x66>
    0x840133be    0x98    li a1,2
    0x840133c0    0x9a    mv a0,s1
    0x840133c2    0x9c    jal ra,ffffffff84012996 <setThreadState>
    0x840133c6    0xa0    mv a0,s1
    0x840133c8    0xa2    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x840133cc    0xa6    j ffffffff84013394 <cancelBadgedSends+0x6e>
    0x840133ce    0xa8    sd s3,8(s5)
    0x840133d2    0xac    ld a2,0(s5)
    0x840133d6    0xb0    li a5,-1
    0x840133d8    0xb2    slli a5,a5,0x27
    0x840133da    0xb4    addi a5,a5,3
    0x840133dc    0xb6    and a5,a5,a2
    0x840133de    0xb8    lui a2,0xf8000
    0x840133e2    0xbc    srli a2,a2,0x19
    0x840133e4    0xbe    and a2,s2,a2
    0x840133e8    0xc2    or a2,a2,a5
    0x840133ea    0xc4    beqz s3,ffffffff8401340e <cancelBadgedSends+0xe8>
    0x840133ee    0xc8    andi a2,a2,-4
    0x840133f0    0xca    ori a2,a2,1
    0x840133f4    0xce    sd a2,0(s5)
    0x840133f8    0xd2    jal ra,ffffffff840128fc <rescheduleRequired>
    0x840133fc    0xd6    ld ra,72(sp)          ; stack access
    0x840133fe    0xd8    ld s0,64(sp)          ; stack access
    0x84013400    0xda    ld s1,56(sp)          ; stack access
    0x84013402    0xdc    ld s2,48(sp)          ; stack access
    0x84013404    0xde    ld s3,40(sp)          ; stack access
    0x84013406    0xe0    ld s4,32(sp)          ; stack access
    0x84013408    0xe2    ld s5,24(sp)          ; stack access
    0x8401340a    0xe4    addi sp,sp,80
    0x8401340c    0xe6    ret
    0x8401340e    0xe8    sd a2,0(s5)
    0x84013412    0xec    j ffffffff840133f8 <cancelBadgedSends+0xd2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
92 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 144 nodes.

Section Arch_finaliseCap (273 of 301)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 104 instructions.


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84010d3e      0x0    addi sp,sp,-80
    0x84010d40      0x2    sd ra,72(sp)          ; stack access
    0x84010d42      0x4    sd s0,64(sp)          ; stack access
    0x84010d44      0x6    sd s1,56(sp)          ; stack access
    0x84010d46      0x8    sd s2,48(sp)          ; stack access
    0x84010d48      0xa    sd s3,40(sp)          ; stack access
    0x84010d4a      0xc    mv s0,a0
    0x84010d4c      0xe    mv s2,a2
    0x84010d4e     0x10    mv s1,a1
    0x84010d50     0x12    srli a5,a1,0x3b
    0x84010d54     0x16    li a4,3
    0x84010d56     0x18    beq a5,a4,ffffffff84010dc6 <Arch_finaliseCap+0x88>
    0x84010d5a     0x1c    li a4,13
    0x84010d5c     0x1e    beq a5,a4,ffffffff84010e28 <Arch_finaliseCap+0xea>
    0x84010d60     0x22    li a4,1
    0x84010d62     0x24    beq a5,a4,ffffffff84010d86 <Arch_finaliseCap+0x48>
    0x84010d66     0x28    sd zero,0(s0)         ; stack access
    0x84010d6a     0x2c    sd zero,8(s0)         ; stack access
    0x84010d6e     0x30    sd zero,16(s0)        ; stack access
    0x84010d72     0x34    sd zero,24(s0)        ; stack access
    0x84010d76     0x38    mv a0,s0
    0x84010d78     0x3a    ld ra,72(sp)          ; stack access
    0x84010d7a     0x3c    ld s0,64(sp)          ; stack access
    0x84010d7c     0x3e    ld s1,56(sp)          ; stack access
    0x84010d7e     0x40    ld s2,48(sp)          ; stack access
    0x84010d80     0x42    ld s3,40(sp)          ; stack access
    0x84010d82     0x44    addi sp,sp,80
    0x84010d84     0x46    ret
    0x84010d86     0x48    srli a1,a2,0x30
    0x84010d8a     0x4c    beqz a1,ffffffff84010d66 <Arch_finaliseCap+0x28>
    0x84010d8c     0x4e    srli a0,s1,0x39
    0x84010d90     0x52    andi a0,a0,3
    0x84010d92     0x54    slli a2,s1,0x19
    0x84010d96     0x58    srli a2,a2,0x19
    0x84010d98     0x5a    srli s1,s1,0x26
    0x84010d9a     0x5c    andi s1,s1,1
    0x84010d9c     0x5e    beqz s1,ffffffff84010da4 <Arch_finaliseCap+0x66>
    0x84010d9e     0x60    li a5,-1
    0x84010da0     0x62    slli a5,a5,0x27
    0x84010da2     0x64    or a2,a2,a5
    0x84010da4     0x66    srli s2,s2,0x9
    0x84010da8     0x6a    slli a3,s2,0x19
    0x84010dac     0x6e    srli a3,a3,0x19
    0x84010dae     0x70    srli s2,s2,0x26
    0x84010db2     0x74    andi s2,s2,1
    0x84010db6     0x78    beqz s2,ffffffff84010dc0 <Arch_finaliseCap+0x82>
    0x84010dba     0x7c    li a5,-1
    0x84010dbc     0x7e    slli a5,a5,0x27
    0x84010dbe     0x80    or a3,a3,a5
    0x84010dc0     0x82    jal ra,ffffffff84010930 <unmapPage>
    0x84010dc4     0x86    j ffffffff84010d66 <Arch_finaliseCap+0x28>
    0x84010dc6     0x88    beqz a3,ffffffff84010d66 <Arch_finaliseCap+0x28>
    0x84010dc8     0x8a    srli a5,a1,0x27
    0x84010dcc     0x8e    andi a5,a5,1
    0x84010dce     0x90    beqz a5,ffffffff84010d66 <Arch_finaliseCap+0x28>
    0x84010dd0     0x92    srli s3,a2,0x30
    0x84010dd4     0x96    mv a0,s3
    0x84010dd6     0x98    jal ra,ffffffff84010182 <findVSpaceForASID>
    0x84010dda     0x9c    sd a0,16(sp)          ; stack access
    0x84010ddc     0x9e    sd a1,24(sp)          ; stack access
    0x84010dde     0xa0    srli s2,s2,0x9
    0x84010de2     0xa4    slli a2,s2,0x19
    0x84010de6     0xa8    srli a2,a2,0x19
    0x84010de8     0xaa    srli s2,s2,0x26
    0x84010dec     0xae    andi s2,s2,1
    0x84010df0     0xb2    beqz s2,ffffffff84010dfa <Arch_finaliseCap+0xbc>
    0x84010df4     0xb6    li a5,-1
    0x84010df6     0xb8    slli a5,a5,0x27
    0x84010df8     0xba    or a2,a2,a5
    0x84010dfa     0xbc    ld a5,16(sp)          ; stack access
    0x84010dfc     0xbe    bnez a5,ffffffff84010e04 <Arch_finaliseCap+0xc6>
    0x84010dfe     0xc0    ld a5,24(sp)          ; stack access
    0x84010e00     0xc2    beq a5,a2,ffffffff84010e1e <Arch_finaliseCap+0xe0>
    0x84010e04     0xc6    slli a1,s1,0x19
    0x84010e08     0xca    srli a1,a1,0x19
    0x84010e0a     0xcc    srli s1,s1,0x26
    0x84010e0c     0xce    andi s1,s1,1
    0x84010e0e     0xd0    beqz s1,ffffffff84010e16 <Arch_finaliseCap+0xd8>
    0x84010e10     0xd2    li a5,-1
    0x84010e12     0xd4    slli a5,a5,0x27
    0x84010e14     0xd6    or a1,a1,a5
    0x84010e16     0xd8    mv a0,s3
    0x84010e18     0xda    jal ra,ffffffff84010886 <unmapPageTable>
    0x84010e1c     0xde    j ffffffff84010d66 <Arch_finaliseCap+0x28>
    0x84010e1e     0xe0    mv a1,a2
    0x84010e20     0xe2    mv a0,s3
    0x84010e22     0xe4    jal ra,ffffffff84010ae2 <deleteASID>
    0x84010e26     0xe8    j ffffffff84010d66 <Arch_finaliseCap+0x28>
    0x84010e28     0xea    beqz a3,ffffffff84010d66 <Arch_finaliseCap+0x28>
    0x84010e2a     0xec    srli a0,a1,0x2b
    0x84010e2e     0xf0    slli a0,a0,0x30
    0x84010e30     0xf2    srli a0,a0,0x30
    0x84010e32     0xf4    slli s1,a1,0x2
    0x84010e36     0xf8    lui a1,0xf8000
    0x84010e3a     0xfc    srli a1,a1,0x19
    0x84010e3c     0xfe    and a1,a1,s1
    0x84010e3e    0x100    srli s1,s1,0x26
    0x84010e40    0x102    andi s1,s1,1
    0x84010e42    0x104    beqz s1,ffffffff84010e4a <Arch_finaliseCap+0x10c>
    0x84010e44    0x106    li a5,-1
    0x84010e46    0x108    slli a5,a5,0x27
    0x84010e48    0x10a    or a1,a1,a5
    0x84010e4a    0x10c    jal ra,ffffffff84010aa4 <deleteASIDPool>
    0x84010e4e    0x110    j ffffffff84010d66 <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 156 nodes.

Section init_freemem (274 of 301)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 299 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `init_freemem`:

    0x84001066      0x0    addi sp,sp,-192
    0x84001068      0x2    sd ra,184(sp)         ; stack access
    0x8400106a      0x4    sd s0,176(sp)         ; stack access
    0x8400106c      0x6    sd s1,168(sp)         ; stack access
    0x8400106e      0x8    sd s2,160(sp)         ; stack access
    0x84001070      0xa    sd s3,152(sp)         ; stack access
    0x84001072      0xc    sd s4,144(sp)         ; stack access
    0x84001074      0xe    sd s5,136(sp)         ; stack access
    0x84001076     0x10    sd s6,128(sp)         ; stack access
    0x84001078     0x12    sd s7,120(sp)         ; stack access
    0x8400107a     0x14    sd s8,112(sp)         ; stack access
    0x8400107c     0x16    sd s9,104(sp)         ; stack access
    0x8400107e     0x18    mv s4,a0
    0x84001080     0x1a    mv s5,a2
    0x84001082     0x1c    mv s6,a3
    0x84001084     0x1e    sd a4,0(sp)           ; stack access
    0x84001086     0x20    sd a5,8(sp)           ; stack access
    0x84001088     0x22    mv s3,a6
    0x8400108a     0x24    li a5,1
    0x8400108c     0x26    bgeu a5,a2,ffffffff8400109c <init_freemem+0x36>
    0x84001090     0x2a    addi a4,a2,-1
    0x84001094     0x2e    li a5,0
    0x84001096     0x30    addi a5,a5,1
    0x84001098     0x32    bne a5,a4,ffffffff84001096 <init_freemem+0x30>
    0x8400109c     0x36    addi a4,s4,-1 # fff <KERNEL_OFFSET-0xfffffffefffff001>
    0x840010a0     0x3a    beqz a4,ffffffff840010aa <init_freemem+0x44>
    0x840010a2     0x3c    li a5,0
    0x840010a4     0x3e    addi a5,a5,1
    0x840010a6     0x40    bne a5,a4,ffffffff840010a4 <init_freemem+0x3e>
    0x840010aa     0x44    auipc a5,0x0
    0x840010ae     0x48    addi a5,a5,1774 # ffffffff84001798 <ndks_boot+0x148>
    0x840010b2     0x4c    auipc a4,0x0
    0x840010b6     0x50    addi a4,a4,2022 # ffffffff84001898 <ndks_boot+0x248>
    0x840010ba     0x54    sd zero,0(a5)
    0x840010be     0x58    sd zero,8(a5)
    0x840010c2     0x5c    addi a5,a5,16
    0x840010c4     0x5e    bne a5,a4,ffffffff840010ba <init_freemem+0x54>
    0x840010c8     0x62    beqz s4,ffffffff840012f6 <init_freemem+0x290>
    0x840010cc     0x66    mv a6,a1
    0x840010ce     0x68    auipc a4,0x1
    0x840010d2     0x6c    addi a4,a4,-1974 # ffffffff84001918 <avail_reg+0x8>
    0x840010d6     0x70    slli t1,s4,0x4
    0x840010da     0x74    add t1,t1,a1
    0x840010dc     0x76    li a7,-1
    0x840010de     0x78    slli a7,a7,0x26
    0x840010e0     0x7a    li a0,127
    0x840010e4     0x7e    slli a0,a0,0x1f
    0x840010e6     0x80    lui t4,0x80000
    0x840010ea     0x84    li t3,1
    0x840010ec     0x86    slli t3,t3,0x26
    0x840010ee     0x88    j ffffffff84001100 <init_freemem+0x9a>
    0x840010f0     0x8a    mv a5,t4
    0x840010f2     0x8c    j ffffffff8400111a <init_freemem+0xb4>
    0x840010f4     0x8e    sd a5,-8(a3)
    0x840010f8     0x92    addi a6,a6,16
    0x840010fa     0x94    addi a4,a4,16
    0x840010fc     0x96    beq a6,t1,ffffffff840013ae <init_freemem+0x348>
    0x84001100     0x9a    ld a1,8(a6)
    0x84001104     0x9e    add a5,a1,a7
    0x84001108     0xa2    mv a3,a4
    0x8400110a     0xa4    ld a2,0(a6)
    0x8400110e     0xa8    add a2,a2,a7
    0x84001110     0xaa    sd a2,-8(a4)
    0x84001114     0xae    sd a5,0(a4)
    0x84001116     0xb0    bltu a0,a1,ffffffff840010f0 <init_freemem+0x8a>
    0x8400111a     0xb4    sd a5,0(a3)
    0x8400111c     0xb6    ld a5,-8(a3)
    0x84001120     0xba    add a2,a5,t3
    0x84001124     0xbe    bgeu a0,a2,ffffffff840010f4 <init_freemem+0x8e>
    0x84001128     0xc2    mv a5,t4
    0x8400112a     0xc4    j ffffffff840010f4 <init_freemem+0x8e>
    0x8400112c     0xc6    addi s1,s1,1
    0x8400112e     0xc8    bgeu s0,s4,ffffffff840012fa <init_freemem+0x294>
    0x84001132     0xcc    bgeu s1,s5,ffffffff8400121e <init_freemem+0x1b8>
    0x84001136     0xd0    slli s2,s1,0x4
    0x8400113a     0xd4    add s2,s2,s6
    0x8400113c     0xd6    ld a1,0(s2)
    0x84001140     0xda    ld a4,8(s2)
    0x84001144     0xde    beq a1,a4,ffffffff8400112c <init_freemem+0xc6>
    0x84001148     0xe2    slli a5,s0,0x4
    0x8400114c     0xe6    add a5,a5,s7
    0x8400114e     0xe8    ld a3,704(a5)
    0x84001152     0xec    ld a5,712(a5)
    0x84001156     0xf0    bltu a3,a5,ffffffff8400115e <init_freemem+0xf8>
    0x8400115a     0xf4    addi s0,s0,1
    0x8400115c     0xf6    j ffffffff8400112e <init_freemem+0xc8>
    0x8400115e     0xf8    bgeu a3,a4,ffffffff84001192 <init_freemem+0x12c>
    0x84001162     0xfc    bgeu a1,a5,ffffffff840011a6 <init_freemem+0x140>
    0x84001166    0x100    bltu a3,a1,ffffffff840011bc <init_freemem+0x156>
    0x8400116a    0x104    slli a3,s0,0x4
    0x8400116e    0x108    add a3,a3,s7
    0x84001170    0x10a    bgeu a5,a4,ffffffff84001176 <init_freemem+0x110>
    0x84001174    0x10e    mv a4,a5
    0x84001176    0x110    sd a4,704(a3)
    0x8400117a    0x114    ld a1,8(s2)
    0x8400117e    0x118    add a1,a1,s8
    0x84001180    0x11a    ld a0,0(s2)
    0x84001184    0x11e    add a0,a0,s8
    0x84001186    0x120    sd a0,48(sp)          ; stack access
    0x84001188    0x122    sd a1,56(sp)          ; stack access
    0x8400118a    0x124    jal ra,ffffffff84000352 <reserve_region>
    0x8400118e    0x128    addi s1,s1,1
    0x84001190    0x12a    j ffffffff8400112e <init_freemem+0xc8>
    0x84001192    0x12c    add a0,a1,s8
    0x84001196    0x130    sd a0,32(sp)          ; stack access
    0x84001198    0x132    add a1,a4,s8
    0x8400119c    0x136    sd a1,40(sp)          ; stack access
    0x8400119e    0x138    jal ra,ffffffff84000352 <reserve_region>
    0x840011a2    0x13c    addi s1,s1,1
    0x840011a4    0x13e    j ffffffff8400112e <init_freemem+0xc8>
    0x840011a6    0x140    slli a5,s0,0x4
    0x840011aa    0x144    add a5,a5,s7
    0x840011ac    0x146    ld a0,704(a5)
    0x840011b0    0x14a    ld a1,712(a5)
    0x840011b4    0x14e    jal ra,ffffffff8400051e <insert_region>
    0x840011b8    0x152    addi s0,s0,1
    0x840011ba    0x154    j ffffffff8400112e <init_freemem+0xc8>
    0x840011bc    0x156    slli s9,s0,0x4
    0x840011c0    0x15a    add s9,s9,s7
    0x840011c2    0x15c    ld a0,704(s9)
    0x840011c6    0x160    sd a0,16(sp)          ; stack access
    0x840011c8    0x162    sd a1,24(sp)          ; stack access
    0x840011ca    0x164    jal ra,ffffffff8400051e <insert_region>
    0x840011ce    0x168    ld a5,8(s2)
    0x840011d2    0x16c    ld a4,712(s9)
    0x840011d6    0x170    bltu a5,a4,ffffffff840011de <init_freemem+0x178>
    0x840011da    0x174    addi s0,s0,1
    0x840011dc    0x176    j ffffffff8400112e <init_freemem+0xc8>
    0x840011de    0x178    sd a5,704(s9)
    0x840011e2    0x17c    ld a0,0(s2)
    0x840011e6    0x180    add a0,a0,s8
    0x840011e8    0x182    sd a0,64(sp)          ; stack access
    0x840011ea    0x184    add a1,a5,s8
    0x840011ee    0x188    sd a1,72(sp)          ; stack access
    0x840011f0    0x18a    jal ra,ffffffff84000352 <reserve_region>
    0x840011f4    0x18e    addi s1,s1,1
    0x840011f6    0x190    j ffffffff8400112e <init_freemem+0xc8>
    0x840011f8    0x192    addi s1,s1,1
    0x840011fa    0x194    addi s2,s2,16
    0x840011fc    0x196    beq s5,s1,ffffffff8400121a <init_freemem+0x1b4>
    0x84001200    0x19a    ld a0,0(s2)
    0x84001204    0x19e    ld a1,8(s2)
    0x84001208    0x1a2    bgeu a0,a1,ffffffff840011f8 <init_freemem+0x192>
    0x8400120c    0x1a6    add a0,a0,s6
    0x8400120e    0x1a8    sd a0,80(sp)          ; stack access
    0x84001210    0x1aa    add a1,a1,s6
    0x84001212    0x1ac    sd a1,88(sp)          ; stack access
    0x84001214    0x1ae    jal ra,ffffffff84000352 <reserve_region>
    0x84001218    0x1b2    j ffffffff840011f8 <init_freemem+0x192>
    0x8400121a    0x1b4    bgeu s0,s4,ffffffff84001308 <init_freemem+0x2a2>
    0x8400121e    0x1b8    slli a5,s0,0x4
    0x84001222    0x1bc    auipc s1,0x0
    0x84001226    0x1c0    addi s1,s1,1774 # ffffffff84001910 <avail_reg>
    0x8400122a    0x1c4    add s1,s1,a5
    0x8400122c    0x1c6    auipc s2,0x0
    0x84001230    0x1ca    addi s2,s2,1060 # ffffffff84001650 <ndks_boot>
    0x84001234    0x1ce    j ffffffff8400123e <init_freemem+0x1d8>
    0x84001236    0x1d0    addi s0,s0,1
    0x84001238    0x1d2    addi s1,s1,16
    0x8400123a    0x1d4    beq s4,s0,ffffffff84001308 <init_freemem+0x2a2>
    0x8400123e    0x1d8    ld a4,0(s1)
    0x84001240    0x1da    ld a5,8(s1)
    0x84001242    0x1dc    bgeu a4,a5,ffffffff84001236 <init_freemem+0x1d0>
    0x84001246    0x1e0    slli a5,s0,0x4
    0x8400124a    0x1e4    add a5,a5,s2
    0x8400124c    0x1e6    ld a0,704(a5)
    0x84001250    0x1ea    ld a1,712(a5)
    0x84001254    0x1ee    jal ra,ffffffff8400051e <insert_region>
    0x84001258    0x1f2    j ffffffff84001236 <init_freemem+0x1d0>
    0x8400125a    0x1f4    jal ra,ffffffff84010490 <halt>
    0x8400125e    0x1f8    mv s5,s1
    0x84001260    0x1fa    mv s1,s2
    0x84001262    0x1fc    mv a3,s3
    0x84001264    0x1fe    ld a1,0(sp)           ; stack access
    0x84001266    0x200    ld a2,8(sp)           ; stack access
    0x84001268    0x202    mv a0,s0
    0x8400126a    0x204    jal ra,ffffffff84000f70 <create_rootserver_objects>
    0x8400126e    0x208    li a5,15
    0x84001270    0x20a    bltu a5,s5,ffffffff84001294 <init_freemem+0x22e>
    0x84001274    0x20e    auipc a5,0x0
    0x84001278    0x212    addi a5,a5,988 # ffffffff84001650 <ndks_boot>
    0x8400127c    0x216    addi a4,s5,20 # 300014 <KERNEL_OFFSET-0xfffffffeffcfffec>
    0x84001280    0x21a    slli a4,a4,0x4
    0x84001282    0x21c    add a4,a4,a5
    0x84001284    0x21e    ld a4,16(a4)
    0x84001286    0x220    addi s1,s1,20
    0x84001288    0x222    slli s1,s1,0x4
    0x8400128a    0x224    add a5,a5,s1
    0x8400128c    0x226    sd a4,16(a5)
    0x8400128e    0x228    add s4,s4,s0
    0x84001290    0x22a    sd s4,8(a5)
    0x84001294    0x22e    addi s5,s5,20
    0x84001296    0x230    slli s5,s5,0x4
    0x84001298    0x232    auipc a5,0x0
    0x8400129c    0x236    addi a5,a5,952 # ffffffff84001650 <ndks_boot>
    0x840012a0    0x23a    add s5,s5,a5
    0x840012a2    0x23c    sd s0,16(s5)
    0x840012a6    0x240    ld ra,184(sp)         ; stack access
    0x840012a8    0x242    ld s0,176(sp)         ; stack access
    0x840012aa    0x244    ld s1,168(sp)         ; stack access
    0x840012ac    0x246    ld s2,160(sp)         ; stack access
    0x840012ae    0x248    ld s3,152(sp)         ; stack access
    0x840012b0    0x24a    ld s4,144(sp)         ; stack access
    0x840012b2    0x24c    ld s5,136(sp)         ; stack access
    0x840012b4    0x24e    ld s6,128(sp)         ; stack access
    0x840012b6    0x250    ld s7,120(sp)         ; stack access
    0x840012b8    0x252    ld s8,112(sp)         ; stack access
    0x840012ba    0x254    ld s9,104(sp)         ; stack access
    0x840012bc    0x256    addi sp,sp,192
    0x840012be    0x258    ret
    0x840012c0    0x25a    addi s5,s1,-1
    0x840012c4    0x25e    ld s0,8(a5)
    0x840012c6    0x260    sub s0,s0,s4
    0x840012ca    0x264    srl s0,s0,a4
    0x840012ce    0x268    sll s0,s0,a4
    0x840012d2    0x26c    addi a5,a5,-16
    0x840012d4    0x26e    mv s2,s1
    0x840012d6    0x270    ld a3,16(a5)
    0x840012d8    0x272    bgeu s0,a3,ffffffff84001262 <init_freemem+0x1fc>
    0x840012dc    0x276    mv s1,s5
    0x840012de    0x278    bltu a2,s1,ffffffff840012c0 <init_freemem+0x25a>
    0x840012e2    0x27c    addi s2,s2,20
    0x840012e4    0x27e    slli s2,s2,0x4
    0x840012e6    0x280    add s2,s2,a1
    0x840012e8    0x282    ld a3,16(a5)
    0x840012ea    0x284    sd a3,8(s2)
    0x840012ee    0x288    ld a3,24(a5)
    0x840012f0    0x28a    sd a3,16(s2)
    0x840012f4    0x28e    j ffffffff840012c0 <init_freemem+0x25a>
    0x840012f6    0x290    mv s0,s4
    0x840012f8    0x292    mv s1,s4
    0x840012fa    0x294    slli s2,s1,0x4
    0x840012fe    0x298    add s2,s2,s6
    0x84001300    0x29a    li s6,1
    0x84001302    0x29c    slli s6,s6,0x26
    0x84001304    0x29e    bltu s1,s5,ffffffff84001200 <init_freemem+0x19a>
    0x84001308    0x2a2    auipc a5,0x0
    0x8400130c    0x2a6    addi a5,a5,840 # ffffffff84001650 <ndks_boot>
    0x84001310    0x2aa    ld a3,568(a5)
    0x84001314    0x2ae    ld a4,576(a5)
    0x84001318    0x2b2    auipc a5,0x0
    0x8400131c    0x2b6    addi a5,a5,1376 # ffffffff84001878 <ndks_boot+0x228>
    0x84001320    0x2ba    li s1,15
    0x84001322    0x2bc    bne a3,a4,ffffffff8400125a <init_freemem+0x1f4>
    0x84001326    0x2c0    mv s2,s1
    0x84001328    0x2c2    addi s1,s1,-1
    0x8400132a    0x2c4    ld a3,0(a5)
    0x8400132c    0x2c6    addi a5,a5,-16
    0x8400132e    0x2c8    ld a4,24(a5)
    0x84001330    0x2ca    beq a3,a4,ffffffff84001326 <init_freemem+0x2c0>
    0x84001334    0x2ce    ld a5,0(sp)           ; stack access
    0x84001336    0x2d0    sd a5,16(sp)          ; stack access
    0x84001338    0x2d2    ld a5,8(sp)           ; stack access
    0x8400133a    0x2d4    sd a5,24(sp)          ; stack access
    0x8400133c    0x2d6    mv s0,s3
    0x8400133e    0x2d8    beqz s3,ffffffff84001348 <init_freemem+0x2e2>
    0x84001342    0x2dc    li s0,1
    0x84001344    0x2de    sll s0,s0,s3
    0x84001348    0x2e2    ld a0,16(sp)          ; stack access
    0x8400134a    0x2e4    ld a1,24(sp)          ; stack access
    0x8400134c    0x2e6    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84001350    0x2ea    lui s4,0x1004
    0x84001354    0x2ee    addi s4,s4,1280 # 1004500 <KERNEL_OFFSET-0xfffffffefeffbb00>
    0x84001358    0x2f2    add s0,s0,s4
    0x8400135a    0x2f4    slli s4,a0,0xc
    0x8400135e    0x2f8    add s4,s4,s0
    0x84001360    0x2fa    mv a3,s3
    0x84001362    0x2fc    li a5,24
    0x84001364    0x2fe    bgeu s3,a5,ffffffff8400136a <init_freemem+0x304>
    0x84001368    0x302    li a3,24
    0x8400136a    0x304    sext.w a4,a3
    0x8400136e    0x308    addi a5,s1,20
    0x84001372    0x30c    slli a2,a5,0x4
    0x84001376    0x310    auipc a5,0x0
    0x8400137a    0x314    addi a5,a5,730 # ffffffff84001650 <ndks_boot>
    0x8400137e    0x318    add a5,a5,a2
    0x84001380    0x31a    ld s0,16(a5)
    0x84001382    0x31c    sub s0,s0,s4
    0x84001386    0x320    srl s0,s0,a3
    0x8400138a    0x324    sll s0,s0,a3
    0x8400138e    0x328    ld a5,8(a5)
    0x84001390    0x32a    bgeu s0,a5,ffffffff8400125e <init_freemem+0x1f8>
    0x84001394    0x32e    slli a5,s1,0x4
    0x84001398    0x332    auipc a3,0x0
    0x8400139c    0x336    addi a3,a3,1008 # ffffffff84001788 <ndks_boot+0x138>
    0x840013a0    0x33a    add a5,a5,a3
    0x840013a2    0x33c    li a2,15
    0x840013a4    0x33e    auipc a1,0x0
    0x840013a8    0x342    addi a1,a1,684 # ffffffff84001650 <ndks_boot>
    0x840013ac    0x346    j ffffffff840012de <init_freemem+0x278>
    0x840013ae    0x348    li s1,0
    0x840013b0    0x34a    li s0,0
    0x840013b2    0x34c    auipc s7,0x0
    0x840013b6    0x350    addi s7,s7,670 # ffffffff84001650 <ndks_boot>
    0x840013ba    0x354    li s8,1
    0x840013bc    0x356    slli s8,s8,0x26
    0x840013be    0x358    bnez s5,ffffffff84001136 <init_freemem+0xd0>
    0x840013c2    0x35c    mv s0,s5
    0x840013c4    0x35e    j ffffffff8400121e <init_freemem+0x1b8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
299 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 463 nodes.

Section create_initial_thread (275 of 301)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 130 instructions.


Stack analysis
---------------

37 stack accesses found. Annotated code for `create_initial_thread`:

    0x84000c1e      0x0    addi sp,sp,-144
    0x84000c20      0x2    sd ra,120(sp)         ; stack access
    0x84000c22      0x4    sd s0,112(sp)         ; stack access
    0x84000c24      0x6    sd s1,104(sp)         ; stack access
    0x84000c26      0x8    sd s2,96(sp)          ; stack access
    0x84000c28      0xa    sd s3,88(sp)          ; stack access
    0x84000c2a      0xc    sd s4,80(sp)          ; stack access
    0x84000c2c      0xe    sd s5,72(sp)          ; stack access
    0x84000c2e     0x10    sd a0,16(sp)          ; stack access
    0x84000c30     0x12    sd a1,24(sp)          ; stack access
    0x84000c32     0x14    sd a2,0(sp)           ; stack access
    0x84000c34     0x16    sd a3,8(sp)           ; stack access
    0x84000c36     0x18    mv s3,a4
    0x84000c38     0x1a    mv s4,a5
    0x84000c3a     0x1c    mv s5,a6
    0x84000c3c     0x1e    mv s2,a7
    0x84000c3e     0x20    sd a7,136(sp)         ; stack access
    0x84000c40     0x22    auipc s0,0x1
    0x84000c44     0x26    ld s0,-864(s0) # ffffffff840018e0 <rootserver+0x30>
    0x84000c48     0x2a    addi s0,s0,512
    0x84000c4c     0x2e    li a5,32
    0x84000c50     0x32    sd a5,256(s0)
    0x84000c54     0x36    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000c58     0x3a    mv a2,s2
    0x84000c5a     0x3c    ld a3,144(sp)         ; stack access
    0x84000c5c     0x3e    addi a1,a0,320
    0x84000c60     0x42    addi a0,sp,40
    0x84000c62     0x44    jal ra,ffffffff840122be <deriveCap>
    0x84000c66     0x48    ld a5,40(sp)          ; stack access
    0x84000c68     0x4a    li s1,0
    0x84000c6a     0x4c    bnez a5,ffffffff84000d88 <create_initial_thread+0x16a>
    0x84000c6e     0x50    mv s1,s0
    0x84000c70     0x52    ld a0,16(sp)          ; stack access
    0x84000c72     0x54    ld a1,24(sp)          ; stack access
    0x84000c74     0x56    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000c78     0x5a    auipc s2,0x1
    0x84000c7c     0x5e    addi s2,s2,-1576 # ffffffff84001650 <ndks_boot>
    0x84000c80     0x62    ld a3,656(s2)
    0x84000c84     0x66    addi a2,a0,64
    0x84000c88     0x6a    ld a0,16(sp)          ; stack access
    0x84000c8a     0x6c    ld a1,24(sp)          ; stack access
    0x84000c8c     0x6e    jal ra,ffffffff840118d4 <cteInsert>
    0x84000c90     0x72    ld a0,16(sp)          ; stack access
    0x84000c92     0x74    ld a1,24(sp)          ; stack access
    0x84000c94     0x76    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000c98     0x7a    ld a3,656(s2)
    0x84000c9c     0x7e    addi a3,a3,32
    0x84000ca0     0x82    addi a2,a0,96
    0x84000ca4     0x86    ld a0,0(sp)           ; stack access
    0x84000ca6     0x88    ld a1,8(sp)           ; stack access
    0x84000ca8     0x8a    jal ra,ffffffff840118d4 <cteInsert>
    0x84000cac     0x8e    ld a0,16(sp)          ; stack access
    0x84000cae     0x90    ld a1,24(sp)          ; stack access
    0x84000cb0     0x92    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000cb4     0x96    ld a3,656(s2)
    0x84000cb8     0x9a    addi a3,a3,64
    0x84000cbc     0x9e    addi a2,a0,320
    0x84000cc0     0xa2    ld a0,48(sp)          ; stack access
    0x84000cc2     0xa4    ld a1,56(sp)          ; stack access
    0x84000cc4     0xa6    jal ra,ffffffff840118d4 <cteInsert>
    0x84000cc8     0xaa    sd s5,384(s0)
    0x84000ccc     0xae    sd s4,72(s0)
    0x84000cd0     0xb2    sd s3,272(s0)
    0x84000cd4     0xb6    ld a0,664(s2)
    0x84000cd8     0xba    sd a0,368(s0)
    0x84000cdc     0xbe    li a3,0
    0x84000cde     0xc0    lui a2,0x1
    0x84000ce0     0xc2    addi a2,a2,904 # 1388 <KERNEL_OFFSET-0xfffffffeffffec78>
    0x84000ce4     0xc6    li a1,2
    0x84000ce6     0xc8    jal ra,ffffffff84011406 <refill_new>
    0x84000cea     0xcc    ld a5,368(s0)
    0x84000cee     0xd0    sd s0,24(a5)
    0x84000cf0     0xd2    li a5,255
    0x84000cf4     0xd6    sd a5,360(s0)
    0x84000cf8     0xda    sd a5,352(s0)
    0x84000cfc     0xde    li a1,1
    0x84000cfe     0xe0    mv a0,s0
    0x84000d00     0xe2    jal ra,ffffffff84012996 <setThreadState>
    0x84000d04     0xe6    auipc a5,0x2c
    0x84000d08     0xea    ld a5,772(a5) # ffffffff8402d008 <ksDomScheduleIdx>
    0x84000d0c     0xee    slli a4,a5,0x4
    0x84000d10     0xf2    auipc a5,0x19
    0x84000d14     0xf6    addi a5,a5,392 # ffffffff84019e98 <fault_messages>
    0x84000d18     0xfa    add a5,a5,a4
    0x84000d1a     0xfc    ld a4,96(a5)
    0x84000d1c     0xfe    auipc a3,0x2c
    0x84000d20    0x102    sd a4,764(a3) # ffffffff8402d018 <ksCurDomain>
    0x84000d24    0x106    ld a5,104(a5)
    0x84000d26    0x108    li a4,1000
    0x84000d2a    0x10c    mul a5,a5,a4
    0x84000d2e    0x110    auipc a4,0x2c
    0x84000d32    0x114    sd a5,738(a4) # ffffffff8402d010 <ksDomainTime>
    0x84000d36    0x118    ld a0,16(sp)          ; stack access
    0x84000d38    0x11a    ld a1,24(sp)          ; stack access
    0x84000d3a    0x11c    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000d3e    0x120    slli a5,s0,0x19
    0x84000d42    0x124    srli a5,a5,0x19
    0x84000d44    0x126    li s2,3
    0x84000d46    0x128    slli a4,s2,0x3d
    0x84000d4a    0x12c    or a5,a5,a4
    0x84000d4c    0x12e    sd a5,32(a0)
    0x84000d4e    0x130    sd zero,40(a0)
    0x84000d52    0x134    sd zero,48(a0)
    0x84000d56    0x138    sd s2,56(a0)
    0x84000d5a    0x13c    ld s0,368(s0)
    0x84000d5e    0x140    slli s0,s0,0x10
    0x84000d60    0x142    lui a5,0xfe000
    0x84000d64    0x146    srli a5,a5,0x9
    0x84000d66    0x148    and s0,s0,a5
    0x84000d68    0x14a    lui a5,0x2
    0x84000d6a    0x14c    or s0,s0,a5
    0x84000d6c    0x14e    ld a0,16(sp)          ; stack access
    0x84000d6e    0x150    ld a1,24(sp)          ; stack access
    0x84000d70    0x152    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x84000d74    0x156    li a5,-5
    0x84000d76    0x158    slli a5,a5,0x3c
    0x84000d78    0x15a    sd a5,384(a0)
    0x84000d7c    0x15e    sd s0,392(a0)
    0x84000d80    0x162    sd zero,400(a0)
    0x84000d84    0x166    sd s2,408(a0)
    0x84000d88    0x16a    mv a0,s1
    0x84000d8a    0x16c    ld ra,120(sp)         ; stack access
    0x84000d8c    0x16e    ld s0,112(sp)         ; stack access
    0x84000d8e    0x170    ld s1,104(sp)         ; stack access
    0x84000d90    0x172    ld s2,96(sp)          ; stack access
    0x84000d92    0x174    ld s3,88(sp)          ; stack access
    0x84000d94    0x176    ld s4,80(sp)          ; stack access
    0x84000d96    0x178    ld s5,72(sp)          ; stack access
    0x84000d98    0x17a    addi sp,sp,144
    0x84000d9a    0x17c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
130 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 210 nodes.

Section invokeTCB_ThreadControlSched (276 of 301)
=================================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControlSched` consists of 94 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `invokeTCB_ThreadControlSched`:

    0x84016cce     0x0    addi sp,sp,-128
    0x84016cd0     0x2    sd ra,120(sp)         ; stack access
    0x84016cd2     0x4    sd s0,112(sp)         ; stack access
    0x84016cd4     0x6    sd s1,104(sp)         ; stack access
    0x84016cd6     0x8    sd s2,96(sp)          ; stack access
    0x84016cd8     0xa    sd s3,88(sp)          ; stack access
    0x84016cda     0xc    sd s4,80(sp)          ; stack access
    0x84016cdc     0xe    sd s5,72(sp)          ; stack access
    0x84016cde    0x10    sd s6,64(sp)          ; stack access
    0x84016ce0    0x12    sd s7,56(sp)          ; stack access
    0x84016ce2    0x14    mv s0,a0
    0x84016ce4    0x16    sd a2,0(sp)           ; stack access
    0x84016ce6    0x18    sd a3,8(sp)           ; stack access
    0x84016ce8    0x1a    mv s6,a5
    0x84016cea    0x1c    mv s4,a6
    0x84016cec    0x1e    mv s2,a7
    0x84016cee    0x20    ld s1,128(sp)         ; stack access
    0x84016cf0    0x22    andi a3,s1,8
    0x84016cf4    0x26    bnez a3,ffffffff84016d36 <invokeTCB_ThreadControlSched+0x68>
    0x84016cf6    0x28    andi a5,s1,2
    0x84016cfa    0x2c    bnez a5,ffffffff84016d94 <invokeTCB_ThreadControlSched+0xc6>
    0x84016cfc    0x2e    andi a5,s1,1
    0x84016d00    0x32    bnez a5,ffffffff84016d9a <invokeTCB_ThreadControlSched+0xcc>
    0x84016d02    0x34    andi a0,s1,4
    0x84016d06    0x38    beqz a0,ffffffff84016d20 <invokeTCB_ThreadControlSched+0x52>
    0x84016d08    0x3a    beqz s2,ffffffff84016da4 <invokeTCB_ThreadControlSched+0xd6>
    0x84016d0c    0x3e    ld a5,368(s0)
    0x84016d10    0x42    li a0,0
    0x84016d12    0x44    beq a5,s2,ffffffff84016d20 <invokeTCB_ThreadControlSched+0x52>
    0x84016d16    0x48    mv a1,s0
    0x84016d18    0x4a    mv a0,s2
    0x84016d1a    0x4c    jal ra,ffffffff84013dbe <schedContext_bindTCB>
    0x84016d1e    0x50    li a0,0
    0x84016d20    0x52    ld ra,120(sp)         ; stack access
    0x84016d22    0x54    ld s0,112(sp)         ; stack access
    0x84016d24    0x56    ld s1,104(sp)         ; stack access
    0x84016d26    0x58    ld s2,96(sp)          ; stack access
    0x84016d28    0x5a    ld s3,88(sp)          ; stack access
    0x84016d2a    0x5c    ld s4,80(sp)          ; stack access
    0x84016d2c    0x5e    ld s5,72(sp)          ; stack access
    0x84016d2e    0x60    ld s6,64(sp)          ; stack access
    0x84016d30    0x62    ld s7,56(sp)          ; stack access
    0x84016d32    0x64    addi sp,sp,128
    0x84016d34    0x66    ret
    0x84016d36    0x68    mv s5,a1
    0x84016d38    0x6a    mv s3,a4
    0x84016d3a    0x6c    slli a5,a0,0x19
    0x84016d3e    0x70    srli a5,a5,0x19
    0x84016d40    0x72    li a4,3
    0x84016d42    0x74    slli a4,a4,0x3d
    0x84016d44    0x76    or a5,a5,a4
    0x84016d46    0x78    sd a5,16(sp)          ; stack access
    0x84016d48    0x7a    sd zero,24(sp)        ; stack access
    0x84016d4a    0x7c    sd a2,32(sp)          ; stack access
    0x84016d4c    0x7e    ld a5,8(sp)           ; stack access
    0x84016d4e    0x80    sd a5,40(sp)          ; stack access
    0x84016d50    0x82    andi s7,a0,-1024
    0x84016d54    0x86    addi s7,s7,96
    0x84016d58    0x8a    li a1,1
    0x84016d5a    0x8c    mv a0,s7
    0x84016d5c    0x8e    jal ra,ffffffff8401585a <cteDelete>
    0x84016d60    0x92    bnez a0,ffffffff84016d20 <invokeTCB_ThreadControlSched+0x52>
    0x84016d62    0x94    ld a2,0(s3)
    0x84016d66    0x98    ld a3,8(s3)
    0x84016d6a    0x9c    ld a0,32(sp)          ; stack access
    0x84016d6c    0x9e    ld a1,40(sp)          ; stack access
    0x84016d6e    0xa0    jal ra,ffffffff8401232a <sameObjectAs>
    0x84016d72    0xa4    beqz a0,ffffffff84016cf6 <invokeTCB_ThreadControlSched+0x28>
    0x84016d74    0xa6    ld a2,0(s5)
    0x84016d78    0xaa    ld a3,8(s5)
    0x84016d7c    0xae    ld a0,16(sp)          ; stack access
    0x84016d7e    0xb0    ld a1,24(sp)          ; stack access
    0x84016d80    0xb2    jal ra,ffffffff8401232a <sameObjectAs>
    0x84016d84    0xb6    beqz a0,ffffffff84016cf6 <invokeTCB_ThreadControlSched+0x28>
    0x84016d86    0xb8    mv a3,s7
    0x84016d88    0xba    mv a2,s3
    0x84016d8a    0xbc    ld a0,32(sp)          ; stack access
    0x84016d8c    0xbe    ld a1,40(sp)          ; stack access
    0x84016d8e    0xc0    jal ra,ffffffff840118d4 <cteInsert>
    0x84016d92    0xc4    j ffffffff84016cf6 <invokeTCB_ThreadControlSched+0x28>
    0x84016d94    0xc6    sd s6,352(s0)
    0x84016d98    0xca    j ffffffff84016cfc <invokeTCB_ThreadControlSched+0x2e>
    0x84016d9a    0xcc    mv a1,s4
    0x84016d9c    0xce    mv a0,s0
    0x84016d9e    0xd0    jal ra,ffffffff840136e6 <setPriority>
    0x84016da2    0xd4    j ffffffff84016d02 <invokeTCB_ThreadControlSched+0x34>
    0x84016da4    0xd6    ld a5,368(s0)
    0x84016da8    0xda    li a0,0
    0x84016daa    0xdc    beqz a5,ffffffff84016d20 <invokeTCB_ThreadControlSched+0x52>
    0x84016dac    0xde    mv a1,s0
    0x84016dae    0xe0    mv a0,a5
    0x84016db0    0xe2    jal ra,ffffffff84013828 <schedContext_unbindTCB>
    0x84016db4    0xe6    li a0,0
    0x84016db6    0xe8    j ffffffff84016d20 <invokeTCB_ThreadControlSched+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
94 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControlSched` has 161 nodes.

Section cteDelete (277 of 301)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 162 instructions.


Stack analysis
---------------

34 stack accesses found. Annotated code for `cteDelete`:

    0x8401585a      0x0    addi sp,sp,-160
    0x8401585c      0x2    sd ra,152(sp)         ; stack access
    0x8401585e      0x4    sd s0,144(sp)         ; stack access
    0x84015860      0x6    sd s1,136(sp)         ; stack access
    0x84015862      0x8    sd s2,128(sp)         ; stack access
    0x84015864      0xa    sd s3,120(sp)         ; stack access
    0x84015866      0xc    sd s4,112(sp)         ; stack access
    0x84015868      0xe    sd s5,104(sp)         ; stack access
    0x8401586a     0x10    sd s6,96(sp)          ; stack access
    0x8401586c     0x12    sd s7,88(sp)          ; stack access
    0x8401586e     0x14    sd s8,80(sp)          ; stack access
    0x84015870     0x16    sd s9,72(sp)          ; stack access
    0x84015872     0x18    mv s0,a0
    0x84015874     0x1a    mv s4,a1
    0x84015876     0x1c    li s2,18
    0x84015878     0x1e    li s3,64
    0x8401587c     0x22    li s6,4
    0x8401587e     0x24    li s5,-1
    0x84015880     0x26    li s1,1
    0x84015882     0x28    j ffffffff840158c2 <cteDelete+0x68>
    0x84015884     0x2a    mv a2,s6
    0x84015886     0x2c    j ffffffff840158fa <cteDelete+0xa0>
    0x84015888     0x2e    bnez a1,ffffffff84015928 <cteDelete+0xce>
    0x8401588a     0x30    ld a3,0(sp)           ; stack access
    0x8401588c     0x32    sd a3,0(s0)
    0x8401588e     0x34    ld a3,8(sp)           ; stack access
    0x84015890     0x36    sd a3,8(s0)
    0x84015892     0x38    bnez s4,ffffffff8401598e <cteDelete+0x134>
    0x84015896     0x3c    beq a4,s2,ffffffff8401592e <cteDelete+0xd4>
    0x8401589a     0x40    ld a5,0(s0)
    0x8401589c     0x42    ld a4,8(s0)
    0x8401589e     0x44    andi a3,a5,127
    0x840158a2     0x48    beq a3,s3,ffffffff84015a14 <cteDelete+0x1ba>
    0x840158a6     0x4c    andi a0,a5,63
    0x840158aa     0x50    addiw a0,a0,1
    0x840158ac     0x52    sll a0,s1,a0
    0x840158b0     0x56    neg a0,a0
    0x840158b4     0x5a    and a0,a0,a4
    0x840158b6     0x5c    mv a1,s0
    0x840158b8     0x5e    jal ra,ffffffff84011b4c <capSwapForDelete>
    0x840158bc     0x62    jal ra,ffffffff8401578e <preemptionPoint>
    0x840158c0     0x66    bnez a0,ffffffff8401596a <cteDelete+0x110>
    0x840158c2     0x68    ld a5,0(s0)
    0x840158c4     0x6a    srli a5,a5,0x3b
    0x840158c6     0x6c    beqz a5,ffffffff8401595a <cteDelete+0x100>
    0x840158c8     0x6e    mv a0,s0
    0x840158ca     0x70    jal ra,ffffffff84012382 <isFinalCapability>
    0x840158ce     0x74    mv a3,a0
    0x840158d0     0x76    li a4,0
    0x840158d2     0x78    ld a1,0(s0)
    0x840158d4     0x7a    ld a2,8(s0)
    0x840158d6     0x7c    mv a0,sp
    0x840158d8     0x7e    jal ra,ffffffff84013874 <finaliseCap>
    0x840158dc     0x82    ld a7,16(sp)          ; stack access
    0x840158de     0x84    ld a6,24(sp)          ; stack access
    0x840158e0     0x86    ld a5,0(sp)           ; stack access
    0x840158e2     0x88    ld a0,8(sp)           ; stack access
    0x840158e4     0x8a    srli a4,a5,0x3b
    0x840158e8     0x8e    beqz a4,ffffffff84015928 <cteDelete+0xce>
    0x840158ea     0x90    bne a4,s2,ffffffff84015924 <cteDelete+0xca>
    0x840158ee     0x94    andi a3,a5,127
    0x840158f2     0x98    beq a3,s3,ffffffff84015884 <cteDelete+0x2a>
    0x840158f6     0x9c    andi a2,a5,63
    0x840158fa     0xa0    addi a2,a2,1
    0x840158fc     0xa2    sll a3,s5,a2
    0x84015900     0xa6    not a3,a3
    0x84015904     0xaa    and a3,a3,a0
    0x84015906     0xac    mv a1,s1
    0x84015908     0xae    beqz a3,ffffffff84015888 <cteDelete+0x2e>
    0x8401590a     0xb0    li a1,0
    0x8401590c     0xb2    bne a3,s1,ffffffff84015888 <cteDelete+0x2e>
    0x84015910     0xb6    sll a3,s1,a2
    0x84015914     0xba    neg a3,a3
    0x84015918     0xbe    and a3,a3,a0
    0x8401591a     0xc0    sub a3,s0,a3
    0x8401591e     0xc4    seqz a1,a3
    0x84015922     0xc8    j ffffffff84015888 <cteDelete+0x2e>
    0x84015924     0xca    jal ra,ffffffff84010490 <halt>
    0x84015928     0xce    sd a7,48(sp)          ; stack access
    0x8401592a     0xd0    sd a6,56(sp)          ; stack access
    0x8401592c     0xd2    j ffffffff8401595e <cteDelete+0x104>
    0x8401592e     0xd4    andi a4,a5,127
    0x84015932     0xd8    beq a4,s3,ffffffff8401594e <cteDelete+0xf4>
    0x84015936     0xdc    andi a5,a5,63
    0x8401593a     0xe0    addiw a5,a5,1
    0x8401593c     0xe2    sll a5,s1,a5
    0x84015940     0xe6    neg a5,a5
    0x84015944     0xea    and a5,a5,a0
    0x84015946     0xec    bne s0,a5,ffffffff8401589a <cteDelete+0x40>
    0x8401594a     0xf0    mv a0,s4
    0x8401594c     0xf2    j ffffffff8401596a <cteDelete+0x110>
    0x8401594e     0xf4    mv a5,s6
    0x84015950     0xf6    j ffffffff8401593a <cteDelete+0xe0>
    0x84015952     0xf8    mv a5,s6
    0x84015954     0xfa    j ffffffff840159e6 <cteDelete+0x18c>
    0x84015956     0xfc    jal ra,ffffffff84010490 <halt>
    0x8401595a    0x100    sd zero,48(sp)        ; stack access
    0x8401595c    0x102    sd zero,56(sp)        ; stack access
    0x8401595e    0x104    ld a1,48(sp)          ; stack access
    0x84015960    0x106    ld a2,56(sp)          ; stack access
    0x84015962    0x108    mv a0,s0
    0x84015964    0x10a    jal ra,ffffffff84011d2c <emptySlot>
    0x84015968    0x10e    li a0,0
    0x8401596a    0x110    ld ra,152(sp)         ; stack access
    0x8401596c    0x112    ld s0,144(sp)         ; stack access
    0x8401596e    0x114    ld s1,136(sp)         ; stack access
    0x84015970    0x116    ld s2,128(sp)         ; stack access
    0x84015972    0x118    ld s3,120(sp)         ; stack access
    0x84015974    0x11a    ld s4,112(sp)         ; stack access
    0x84015976    0x11c    ld s5,104(sp)         ; stack access
    0x84015978    0x11e    ld s6,96(sp)          ; stack access
    0x8401597a    0x120    ld s7,88(sp)          ; stack access
    0x8401597c    0x122    ld s8,80(sp)          ; stack access
    0x8401597e    0x124    ld s9,72(sp)          ; stack access
    0x84015980    0x126    addi sp,sp,160
    0x84015982    0x128    ret
    0x84015984    0x12a    andi s8,s9,-32
    0x84015988    0x12e    andi s9,s9,31
    0x8401598c    0x132    j ffffffff840159ba <cteDelete+0x160>
    0x8401598e    0x134    ld a5,0(s0)
    0x84015990    0x136    ld s9,8(s0) # ffffffffe0000008 <ki_end+0x5bfce008>
    0x84015994    0x13a    andi s7,a5,127
    0x84015998    0x13e    beq s7,s3,ffffffff84015984 <cteDelete+0x12a>
    0x8401599c    0x142    andi a5,a5,63
    0x840159a0    0x146    addi a5,a5,1
    0x840159a2    0x148    sll s8,s1,a5
    0x840159a6    0x14c    neg s8,s8
    0x840159aa    0x150    and s8,s8,s9
    0x840159ae    0x154    sll a5,s5,a5
    0x840159b2    0x158    not a5,a5
    0x840159b6    0x15c    and s9,a5,s9
    0x840159ba    0x160    slli a0,s9,0x5
    0x840159be    0x164    addi a0,a0,-32
    0x840159c0    0x166    li a1,0
    0x840159c2    0x168    add a0,a0,s8
    0x840159c4    0x16a    jal ra,ffffffff8401585a <cteDelete>
    0x840159c8    0x16e    bnez a0,ffffffff8401596a <cteDelete+0x110>
    0x840159ca    0x170    ld a5,0(s0)
    0x840159cc    0x172    srli a4,a5,0x3b
    0x840159d0    0x176    beqz a4,ffffffff840158bc <cteDelete+0x62>
    0x840159d4    0x17a    bne a4,s2,ffffffff84015956 <cteDelete+0xfc>
    0x840159d8    0x17e    ld a3,8(s0)
    0x840159da    0x180    andi a2,a5,127
    0x840159de    0x184    beq a2,s3,ffffffff84015952 <cteDelete+0xf8>
    0x840159e2    0x188    andi a5,a5,63
    0x840159e6    0x18c    addi a5,a5,1
    0x840159e8    0x18e    sll a4,s1,a5
    0x840159ec    0x192    neg a4,a4
    0x840159f0    0x196    and a4,a4,a3
    0x840159f2    0x198    bne s8,a4,ffffffff840158bc <cteDelete+0x62>
    0x840159f6    0x19c    sll a5,s5,a5
    0x840159fa    0x1a0    not a5,a5
    0x840159fe    0x1a4    and a3,a3,a5
    0x84015a00    0x1a6    bne a3,s9,ffffffff840158bc <cteDelete+0x62>
    0x84015a04    0x1aa    bne a2,s7,ffffffff840158bc <cteDelete+0x62>
    0x84015a08    0x1ae    addi s9,s9,-1
    0x84015a0a    0x1b0    and a5,s9,a5
    0x84015a0e    0x1b4    or a4,a4,a5
    0x84015a10    0x1b6    sd a4,8(s0)
    0x84015a12    0x1b8    j ffffffff840158bc <cteDelete+0x62>
    0x84015a14    0x1ba    andi a0,a4,-32
    0x84015a18    0x1be    j ffffffff840158b6 <cteDelete+0x5c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
162 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 258 nodes.

Section handleUserLevelFault (278 of 301)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 80 instructions.

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x84015672     0x0    addi sp,sp,-16
    0x84015674     0x2    sd ra,8(sp)           ; stack access
    0x84015676     0x4    auipc a4,0x18
    0x8401567a     0x8    addi a4,a4,-1606 # ffffffff8402d030 <ksCurTime>
    0x8401567e     0xc    ld a2,0(a4)
    0x84015680     0xe    rdtime a3
    0x84015684    0x12    sd a3,0(a4)
    0x84015686    0x14    auipc a4,0x18
    0x8401568a    0x18    addi a4,a4,-1606 # ffffffff8402d040 <ksConsumed>
    0x8401568e    0x1c    ld a5,0(a4)
    0x84015690    0x1e    sub a5,a5,a2
    0x84015692    0x20    add a5,a5,a3
    0x84015694    0x22    sd a5,0(a4)
    0x84015696    0x24    auipc a3,0x18
    0x8401569a    0x28    ld a3,-1646(a3) # ffffffff8402d028 <ksCurSC>
    0x8401569e    0x2c    ld a2,72(a3)
    0x840156a0    0x2e    slli a4,a2,0x4
    0x840156a4    0x32    add a4,a4,a3
    0x840156a6    0x34    ld a4,96(a4)
    0x840156a8    0x36    bltu a4,a5,ffffffff8401571a <handleUserLevelFault+0xa8>
    0x840156ac    0x3a    sub a4,a4,a5
    0x840156ae    0x3c    li a6,19
    0x840156b0    0x3e    bgeu a6,a4,ffffffff8401571a <handleUserLevelFault+0xa8>
    0x840156b4    0x42    ld a4,0(a3)
    0x840156b6    0x44    bnez a4,ffffffff84015702 <handleUserLevelFault+0x90>
    0x840156b8    0x46    addi a5,a5,20
    0x840156ba    0x48    auipc a4,0x18
    0x840156be    0x4c    ld a4,-1706(a4) # ffffffff8402d010 <ksDomainTime>
    0x840156c2    0x50    bltu a4,a5,ffffffff8401574c <handleUserLevelFault+0xda>
    0x840156c6    0x54    auipc a4,0x5
    0x840156ca    0x58    addi a4,a4,314 # ffffffff8401a800 <riscvKSASIDTable>
    0x840156ce    0x5c    slli a1,a1,0x4
    0x840156d0    0x5e    li a5,-1
    0x840156d2    0x60    srli a5,a5,0x20
    0x840156d4    0x62    and a1,a1,a5
    0x840156d6    0x64    slli a0,a0,0x20
    0x840156d8    0x66    or a1,a1,a0
    0x840156da    0x68    ori a1,a1,3
    0x840156de    0x6c    sd a1,1736(a4)
    0x840156e2    0x70    sd zero,1744(a4)
    0x840156e6    0x74    auipc a0,0x18
    0x840156ea    0x78    ld a0,-1678(a0) # ffffffff8402d058 <ksCurThread>
    0x840156ee    0x7c    jal ra,ffffffff84015172 <handleFault>
    0x840156f2    0x80    jal ra,ffffffff840149e0 <schedule>
    0x840156f6    0x84    jal ra,ffffffff84012aa0 <activateThread>
    0x840156fa    0x88    li a0,0
    0x840156fc    0x8a    ld ra,8(sp)           ; stack access
    0x840156fe    0x8c    addi sp,sp,16
    0x84015700    0x8e    ret
    0x84015702    0x90    ld a4,80(a3)
    0x84015704    0x92    bgeu a4,a2,ffffffff84015744 <handleUserLevelFault+0xd2>
    0x84015708    0x96    ld a6,64(a3)
    0x8401570c    0x9a    add a4,a4,a6
    0x8401570e    0x9c    addi a4,a4,1
    0x84015710    0x9e    sub a2,a4,a2
    0x84015714    0xa2    ld a4,64(a3)
    0x84015716    0xa4    bne a4,a2,ffffffff840156b8 <handleUserLevelFault+0x46>
    0x8401571a    0xa8    li a3,1
    0x8401571c    0xaa    li a2,0
    0x8401571e    0xac    li a1,1
    0x84015720    0xae    mv a0,a5
    0x84015722    0xb0    jal ra,ffffffff8401523c <chargeBudget>
    0x84015726    0xb4    auipc a0,0x18
    0x8401572a    0xb8    ld a0,-1742(a0) # ffffffff8402d058 <ksCurThread>
    0x8401572e    0xbc    ld a5,280(a0)
    0x84015732    0xc0    andi a5,a5,15
    0x84015734    0xc2    addi a5,a5,-1
    0x84015736    0xc4    li a4,1
    0x84015738    0xc6    bltu a4,a5,ffffffff840156f2 <handleUserLevelFault+0x80>
    0x8401573c    0xca    li a1,2
    0x8401573e    0xcc    jal ra,ffffffff84012996 <setThreadState>
    0x84015742    0xd0    j ffffffff840156f2 <handleUserLevelFault+0x80>
    0x84015744    0xd2    addi a4,a4,1
    0x84015746    0xd4    sub a2,a4,a2
    0x8401574a    0xd8    j ffffffff84015714 <handleUserLevelFault+0xa2>
    0x8401574c    0xda    li a5,1
    0x8401574e    0xdc    auipc a4,0x18
    0x84015752    0xe0    sd a5,-1814(a4) # ffffffff8402d038 <ksReprogram>
    0x84015756    0xe4    jal ra,ffffffff840128fc <rescheduleRequired>
    0x8401575a    0xe8    j ffffffff84015726 <handleUserLevelFault+0xb4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 122 nodes.

Section handleInterruptEntry (279 of 301)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 78 instructions.

Skipping c0102773 rdtime a4


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x840154a8     0x0    addi sp,sp,-16
    0x840154aa     0x2    sd ra,8(sp)           ; stack access
    0x840154ac     0x4    sd s0,0(sp)           ; stack access
    0x840154ae     0x6    auipc a5,0x18
    0x840154b2     0xa    lw a5,-1086(a5) # ffffffff8402d070 <active_irq>
    0x840154b6     0xe    addiw a3,a5,-1
    0x840154ba    0x12    li a4,53
    0x840154be    0x16    bltu a4,a3,ffffffff8401552c <handleInterruptEntry+0x84>
    0x840154c2    0x1a    slli s0,a5,0x20
    0x840154c6    0x1e    srli s0,s0,0x20
    0x840154c8    0x20    auipc a5,0x18
    0x840154cc    0x24    addi a5,a5,-1176 # ffffffff8402d030 <ksCurTime>
    0x840154d0    0x28    ld a3,0(a5)
    0x840154d2    0x2a    rdtime a4
    0x840154d6    0x2e    sd a4,0(a5)
    0x840154d8    0x30    auipc a5,0x18
    0x840154dc    0x34    addi a5,a5,-1176 # ffffffff8402d040 <ksConsumed>
    0x840154e0    0x38    ld a0,0(a5)
    0x840154e2    0x3a    sub a0,a0,a3
    0x840154e4    0x3c    add a0,a0,a4
    0x840154e6    0x3e    sd a0,0(a5)
    0x840154e8    0x40    auipc a4,0x18
    0x840154ec    0x44    ld a4,-1216(a4) # ffffffff8402d028 <ksCurSC>
    0x840154f0    0x48    ld a3,72(a4)
    0x840154f2    0x4a    slli a5,a3,0x4
    0x840154f6    0x4e    add a5,a5,a4
    0x840154f8    0x50    ld a5,96(a5)
    0x840154fa    0x52    bltu a5,a0,ffffffff84015560 <handleInterruptEntry+0xb8>
    0x840154fe    0x56    sub a5,a5,a0
    0x84015500    0x58    li a2,19
    0x84015502    0x5a    bgeu a2,a5,ffffffff84015560 <handleInterruptEntry+0xb8>
    0x84015506    0x5e    ld a5,0(a4)
    0x84015508    0x60    bnez a5,ffffffff8401554a <handleInterruptEntry+0xa2>
    0x8401550a    0x62    addi a0,a0,20
    0x8401550c    0x64    auipc a5,0x18
    0x84015510    0x68    ld a5,-1276(a5) # ffffffff8402d010 <ksDomainTime>
    0x84015514    0x6c    bltu a5,a0,ffffffff84015574 <handleInterruptEntry+0xcc>
    0x84015518    0x70    bnez s0,ffffffff84015584 <handleInterruptEntry+0xdc>
    0x8401551a    0x72    jal ra,ffffffff840149e0 <schedule>
    0x8401551e    0x76    jal ra,ffffffff84012aa0 <activateThread>
    0x84015522    0x7a    li a0,0
    0x84015524    0x7c    ld ra,8(sp)           ; stack access
    0x84015526    0x7e    ld s0,0(sp)           ; stack access
    0x84015528    0x80    addi sp,sp,16
    0x8401552a    0x82    ret
    0x8401552c    0x84    jal ra,ffffffff840101e2 <getNewActiveIRQ>
    0x84015530    0x88    sext.w a5,a0
    0x84015534    0x8c    auipc a4,0x18
    0x84015538    0x90    sw a0,-1220(a4) # ffffffff8402d070 <active_irq>
    0x8401553c    0x94    addiw a0,a0,-1
    0x8401553e    0x96    li a4,53
    0x84015542    0x9a    bgeu a4,a0,ffffffff840154c2 <handleInterruptEntry+0x1a>
    0x84015546    0x9e    li a5,0
    0x84015548    0xa0    j ffffffff840154c2 <handleInterruptEntry+0x1a>
    0x8401554a    0xa2    ld a5,80(a4)
    0x8401554c    0xa4    bgeu a5,a3,ffffffff8401556c <handleInterruptEntry+0xc4>
    0x84015550    0xa8    ld a2,64(a4)
    0x84015552    0xaa    add a5,a5,a2
    0x84015554    0xac    addi a5,a5,1
    0x84015556    0xae    sub a3,a5,a3
    0x8401555a    0xb2    ld a5,64(a4)
    0x8401555c    0xb4    bne a5,a3,ffffffff8401550a <handleInterruptEntry+0x62>
    0x84015560    0xb8    li a3,1
    0x84015562    0xba    li a2,0
    0x84015564    0xbc    li a1,1
    0x84015566    0xbe    jal ra,ffffffff8401523c <chargeBudget>
    0x8401556a    0xc2    j ffffffff84015518 <handleInterruptEntry+0x70>
    0x8401556c    0xc4    addi a5,a5,1
    0x8401556e    0xc6    sub a3,a5,a3
    0x84015572    0xca    j ffffffff8401555a <handleInterruptEntry+0xb2>
    0x84015574    0xcc    li a5,1
    0x84015576    0xce    auipc a4,0x18
    0x8401557a    0xd2    sd a5,-1342(a4) # ffffffff8402d038 <ksReprogram>
    0x8401557e    0xd6    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84015582    0xda    j ffffffff84015518 <handleInterruptEntry+0x70>
    0x84015584    0xdc    mv a0,s0
    0x84015586    0xde    jal ra,ffffffff8401483a <handleInterrupt>
    0x8401558a    0xe2    j ffffffff8401551a <handleInterruptEntry+0x72>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 123 nodes.

Section handleUnknownSyscall (280 of 301)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 74 instructions.

Skipping c01026f3 rdtime a3


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x840153ce     0x0    addi sp,sp,-16
    0x840153d0     0x2    sd ra,8(sp)           ; stack access
    0x840153d2     0x4    auipc a4,0x18
    0x840153d6     0x8    addi a4,a4,-930 # ffffffff8402d030 <ksCurTime>
    0x840153da     0xc    ld a2,0(a4)
    0x840153dc     0xe    rdtime a3
    0x840153e0    0x12    sd a3,0(a4)
    0x840153e2    0x14    auipc a4,0x18
    0x840153e6    0x18    addi a4,a4,-930 # ffffffff8402d040 <ksConsumed>
    0x840153ea    0x1c    ld a5,0(a4)
    0x840153ec    0x1e    sub a5,a5,a2
    0x840153ee    0x20    add a5,a5,a3
    0x840153f0    0x22    sd a5,0(a4)
    0x840153f2    0x24    auipc a3,0x18
    0x840153f6    0x28    ld a3,-970(a3) # ffffffff8402d028 <ksCurSC>
    0x840153fa    0x2c    ld a2,72(a3)
    0x840153fc    0x2e    slli a4,a2,0x4
    0x84015400    0x32    add a4,a4,a3
    0x84015402    0x34    ld a4,96(a4)
    0x84015404    0x36    bltu a4,a5,ffffffff84015466 <handleUnknownSyscall+0x98>
    0x84015408    0x3a    sub a4,a4,a5
    0x8401540a    0x3c    li a1,19
    0x8401540c    0x3e    bgeu a1,a4,ffffffff84015466 <handleUnknownSyscall+0x98>
    0x84015410    0x42    ld a4,0(a3)
    0x84015412    0x44    bnez a4,ffffffff84015450 <handleUnknownSyscall+0x82>
    0x84015414    0x46    addi a5,a5,20
    0x84015416    0x48    auipc a4,0x18
    0x8401541a    0x4c    ld a4,-1030(a4) # ffffffff8402d010 <ksDomainTime>
    0x8401541e    0x50    bltu a4,a5,ffffffff84015498 <handleUnknownSyscall+0xca>
    0x84015422    0x54    auipc a5,0x5
    0x84015426    0x58    addi a5,a5,990 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401542a    0x5c    li a4,2
    0x8401542c    0x5e    sd a4,1736(a5)
    0x84015430    0x62    sd a0,1744(a5)
    0x84015434    0x66    auipc a0,0x18
    0x84015438    0x6a    ld a0,-988(a0) # ffffffff8402d058 <ksCurThread>
    0x8401543c    0x6e    jal ra,ffffffff84015172 <handleFault>
    0x84015440    0x72    jal ra,ffffffff840149e0 <schedule>
    0x84015444    0x76    jal ra,ffffffff84012aa0 <activateThread>
    0x84015448    0x7a    li a0,0
    0x8401544a    0x7c    ld ra,8(sp)           ; stack access
    0x8401544c    0x7e    addi sp,sp,16
    0x8401544e    0x80    ret
    0x84015450    0x82    ld a4,80(a3)
    0x84015452    0x84    bgeu a4,a2,ffffffff84015490 <handleUnknownSyscall+0xc2>
    0x84015456    0x88    ld a1,64(a3)
    0x84015458    0x8a    add a4,a4,a1
    0x8401545a    0x8c    addi a4,a4,1
    0x8401545c    0x8e    sub a2,a4,a2
    0x84015460    0x92    ld a4,64(a3)
    0x84015462    0x94    bne a4,a2,ffffffff84015414 <handleUnknownSyscall+0x46>
    0x84015466    0x98    li a3,1
    0x84015468    0x9a    li a2,0
    0x8401546a    0x9c    li a1,1
    0x8401546c    0x9e    mv a0,a5
    0x8401546e    0xa0    jal ra,ffffffff8401523c <chargeBudget>
    0x84015472    0xa4    auipc a0,0x18
    0x84015476    0xa8    ld a0,-1050(a0) # ffffffff8402d058 <ksCurThread>
    0x8401547a    0xac    ld a5,280(a0)
    0x8401547e    0xb0    andi a5,a5,15
    0x84015480    0xb2    addi a5,a5,-1
    0x84015482    0xb4    li a4,1
    0x84015484    0xb6    bltu a4,a5,ffffffff84015440 <handleUnknownSyscall+0x72>
    0x84015488    0xba    li a1,2
    0x8401548a    0xbc    jal ra,ffffffff84012996 <setThreadState>
    0x8401548e    0xc0    j ffffffff84015440 <handleUnknownSyscall+0x72>
    0x84015490    0xc2    addi a4,a4,1
    0x84015492    0xc4    sub a2,a4,a2
    0x84015496    0xc8    j ffffffff84015460 <handleUnknownSyscall+0x92>
    0x84015498    0xca    li a5,1
    0x8401549a    0xcc    auipc a4,0x18
    0x8401549e    0xd0    sd a5,-1122(a4) # ffffffff8402d038 <ksReprogram>
    0x840154a2    0xd4    jal ra,ffffffff840128fc <rescheduleRequired>
    0x840154a6    0xd8    j ffffffff84015472 <handleUnknownSyscall+0xa4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 116 nodes.

Section Arch_decodeIRQControlInvocation (281 of 301)
====================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 83 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `Arch_decodeIRQControlInvocation`:

    0x840129b2     0x0    li a5,43
    0x840129b6     0x4    bne a0,a5,ffffffff84012a82 <Arch_decodeIRQControlInvocation+0xd0>
    0x840129ba     0x8    addi sp,sp,-80
    0x840129bc     0xa    sd ra,72(sp)          ; stack access
    0x840129be     0xc    sd s0,64(sp)          ; stack access
    0x840129c0     0xe    sd s1,56(sp)          ; stack access
    0x840129c2    0x10    sd s2,48(sp)          ; stack access
    0x840129c4    0x12    sd s3,40(sp)          ; stack access
    0x840129c6    0x14    sd s4,32(sp)          ; stack access
    0x840129c8    0x16    mv s1,a2
    0x840129ca    0x18    mv s0,a3
    0x840129cc    0x1a    li a5,3
    0x840129ce    0x1c    bgeu a5,a1,ffffffff84012a32 <Arch_decodeIRQControlInvocation+0x80>
    0x840129d2    0x20    auipc s2,0x8
    0x840129d6    0x24    ld s2,1726(s2) # ffffffff8401b090 <current_extra_caps>
    0x840129da    0x28    beqz s2,ffffffff84012a32 <Arch_decodeIRQControlInvocation+0x80>
    0x840129de    0x2c    mv a1,a3
    0x840129e0    0x2e    li a0,0
    0x840129e2    0x30    jal ra,ffffffff84010128 <getSyscallArg>
    0x840129e6    0x34    mv s3,a0
    0x840129e8    0x36    mv a1,s0
    0x840129ea    0x38    li a0,2
    0x840129ec    0x3a    jal ra,ffffffff84010128 <getSyscallArg>
    0x840129f0    0x3e    mv s4,a0
    0x840129f2    0x40    mv a1,s0
    0x840129f4    0x42    li a0,3
    0x840129f6    0x44    jal ra,ffffffff84010128 <getSyscallArg>
    0x840129fa    0x48    mv s0,a0
    0x840129fc    0x4a    ld a5,0(s2)
    0x84012a00    0x4e    sd a5,0(sp)           ; stack access
    0x84012a02    0x50    ld a5,8(s2)
    0x84012a06    0x54    sd a5,8(sp)           ; stack access
    0x84012a08    0x56    mv a0,s3
    0x84012a0a    0x58    jal ra,ffffffff84010c58 <Arch_checkIRQ>
    0x84012a0e    0x5c    bnez a0,ffffffff84012a3e <Arch_decodeIRQControlInvocation+0x8c>
    0x84012a10    0x5e    slli a4,s3,0x3
    0x84012a14    0x62    auipc a5,0x8
    0x84012a18    0x66    addi a5,a5,-532 # ffffffff8401a800 <riscvKSASIDTable>
    0x84012a1c    0x6a    add a5,a5,a4
    0x84012a1e    0x6c    ld a5,1752(a5)
    0x84012a22    0x70    beqz a5,ffffffff84012a4e <Arch_decodeIRQControlInvocation+0x9c>
    0x84012a24    0x72    li a5,9
    0x84012a26    0x74    auipc a4,0x8
    0x84012a2a    0x78    sd a5,538(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84012a2e    0x7c    li a0,3
    0x84012a30    0x7e    j ffffffff84012a3e <Arch_decodeIRQControlInvocation+0x8c>
    0x84012a32    0x80    li a5,7
    0x84012a34    0x82    auipc a4,0x8
    0x84012a38    0x86    sd a5,524(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84012a3c    0x8a    li a0,3
    0x84012a3e    0x8c    ld ra,72(sp)          ; stack access
    0x84012a40    0x8e    ld s0,64(sp)          ; stack access
    0x84012a42    0x90    ld s1,56(sp)          ; stack access
    0x84012a44    0x92    ld s2,48(sp)          ; stack access
    0x84012a46    0x94    ld s3,40(sp)          ; stack access
    0x84012a48    0x96    ld s4,32(sp)          ; stack access
    0x84012a4a    0x98    addi sp,sp,80
    0x84012a4c    0x9a    ret
    0x84012a4e    0x9c    mv a3,s0
    0x84012a50    0x9e    mv a2,s4
    0x84012a52    0xa0    ld a0,0(sp)           ; stack access
    0x84012a54    0xa2    ld a1,8(sp)           ; stack access
    0x84012a56    0xa4    jal ra,ffffffff840113d2 <lookupTargetSlot>
    0x84012a5a    0xa8    sd a1,24(sp)          ; stack access
    0x84012a5c    0xaa    bnez a0,ffffffff84012a3e <Arch_decodeIRQControlInvocation+0x8c>
    0x84012a5e    0xac    mv s0,a1
    0x84012a60    0xae    mv a0,a1
    0x84012a62    0xb0    jal ra,ffffffff84011bc8 <ensureEmptySlot>
    0x84012a66    0xb4    bnez a0,ffffffff84012a3e <Arch_decodeIRQControlInvocation+0x8c>
    0x84012a68    0xb6    li a1,2
    0x84012a6a    0xb8    auipc a0,0x1a
    0x84012a6e    0xbc    ld a0,1518(a0) # ffffffff8402d058 <ksCurThread>
    0x84012a72    0xc0    jal ra,ffffffff84012996 <setThreadState>
    0x84012a76    0xc4    mv a2,s1
    0x84012a78    0xc6    mv a1,s0
    0x84012a7a    0xc8    mv a0,s3
    0x84012a7c    0xca    jal ra,ffffffff84011ce2 <invokeIRQControl>
    0x84012a80    0xce    j ffffffff84012a3e <Arch_decodeIRQControlInvocation+0x8c>
    0x84012a82    0xd0    li a5,3
    0x84012a84    0xd2    auipc a4,0x8
    0x84012a88    0xd6    sd a5,444(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84012a8c    0xda    li a0,3
    0x84012a8e    0xdc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 132 nodes.

Section handleInvocation (282 of 301)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 113 instructions.


Stack analysis
---------------

29 stack accesses found. Annotated code for `handleInvocation`:

    0x84018c50      0x0    addi sp,sp,-160
    0x84018c52      0x2    sd ra,152(sp)         ; stack access
    0x84018c54      0x4    sd s0,144(sp)         ; stack access
    0x84018c56      0x6    sd s1,136(sp)         ; stack access
    0x84018c58      0x8    sd s2,128(sp)         ; stack access
    0x84018c5a      0xa    sd s3,120(sp)         ; stack access
    0x84018c5c      0xc    sd s4,112(sp)         ; stack access
    0x84018c5e      0xe    sd s5,104(sp)         ; stack access
    0x84018c60     0x10    sd s6,96(sp)          ; stack access
    0x84018c62     0x12    sd s7,88(sp)          ; stack access
    0x84018c64     0x14    sd s8,80(sp)          ; stack access
    0x84018c66     0x16    sd s9,72(sp)          ; stack access
    0x84018c68     0x18    mv s6,a0
    0x84018c6a     0x1a    mv s5,a1
    0x84018c6c     0x1c    mv s7,a2
    0x84018c6e     0x1e    mv s8,a3
    0x84018c70     0x20    mv s3,a4
    0x84018c72     0x22    auipc s1,0x14
    0x84018c76     0x26    ld s1,998(s1) # ffffffff8402d058 <ksCurThread>
    0x84018c7a     0x2a    ld s0,80(s1)
    0x84018c7c     0x2c    andi a4,s0,127
    0x84018c80     0x30    li a5,120
    0x84018c84     0x34    bgeu a5,a4,ffffffff84018c90 <handleInvocation+0x40>
    0x84018c88     0x38    andi s0,s0,-128
    0x84018c8c     0x3c    ori s0,s0,120
    0x84018c90     0x40    mv a2,s3
    0x84018c92     0x42    mv a1,s1
    0x84018c94     0x44    addi a0,sp,32
    0x84018c96     0x46    jal ra,ffffffff840112aa <lookupCapAndSlot>
    0x84018c9a     0x4a    ld s9,32(sp)          ; stack access
    0x84018c9c     0x4c    bnez s9,ffffffff84018d10 <handleInvocation+0xc0>
    0x84018ca0     0x50    mv a1,s1
    0x84018ca2     0x52    li a0,0
    0x84018ca4     0x54    jal ra,ffffffff84010542 <lookupIPCBuffer>
    0x84018ca8     0x58    mv s4,a0
    0x84018caa     0x5a    mv a2,s0
    0x84018cac     0x5c    mv a1,a0
    0x84018cae     0x5e    mv a0,s1
    0x84018cb0     0x60    jal ra,ffffffff84014c0c <lookupExtraCaps>
    0x84018cb4     0x64    mv s2,a0
    0x84018cb6     0x66    bnez a0,ffffffff84018d32 <handleInvocation+0xe2>
    0x84018cb8     0x68    andi a1,s0,127
    0x84018cbc     0x6c    li a5,4
    0x84018cbe     0x6e    bltu a5,a1,ffffffff84018d42 <handleInvocation+0xf2>
    0x84018cc2     0x72    sd s4,16(sp)          ; stack access
    0x84018cc4     0x74    sd s8,8(sp)           ; stack access
    0x84018cc6     0x76    sd s7,0(sp)           ; stack access
    0x84018cc8     0x78    mv a7,s6
    0x84018cca     0x7a    mv a6,s5
    0x84018ccc     0x7c    ld a4,40(sp)          ; stack access
    0x84018cce     0x7e    ld a5,48(sp)          ; stack access
    0x84018cd0     0x80    ld a3,56(sp)          ; stack access
    0x84018cd2     0x82    mv a2,s3
    0x84018cd4     0x84    srli a0,s0,0xc
    0x84018cd8     0x88    jal ra,ffffffff84018a0a <decodeInvocation>
    0x84018cdc     0x8c    li a5,4
    0x84018cde     0x8e    beq a0,a5,ffffffff84018d72 <handleInvocation+0x122>
    0x84018ce2     0x92    li a5,3
    0x84018ce4     0x94    beq a0,a5,ffffffff84018d4a <handleInvocation+0xfa>
    0x84018ce8     0x98    ld a5,280(s1)
    0x84018cec     0x9c    andi a5,a5,15
    0x84018cee     0x9e    li a4,2
    0x84018cf0     0xa0    beq a5,a4,ffffffff84018d5a <handleInvocation+0x10a>
    0x84018cf4     0xa4    mv a0,s2
    0x84018cf6     0xa6    ld ra,152(sp)         ; stack access
    0x84018cf8     0xa8    ld s0,144(sp)         ; stack access
    0x84018cfa     0xaa    ld s1,136(sp)         ; stack access
    0x84018cfc     0xac    ld s2,128(sp)         ; stack access
    0x84018cfe     0xae    ld s3,120(sp)         ; stack access
    0x84018d00     0xb0    ld s4,112(sp)         ; stack access
    0x84018d02     0xb2    ld s5,104(sp)         ; stack access
    0x84018d04     0xb4    ld s6,96(sp)          ; stack access
    0x84018d06     0xb6    ld s7,88(sp)          ; stack access
    0x84018d08     0xb8    ld s8,80(sp)          ; stack access
    0x84018d0a     0xba    ld s9,72(sp)          ; stack access
    0x84018d0c     0xbc    addi sp,sp,160
    0x84018d0e     0xbe    ret
    0x84018d10     0xc0    auipc a5,0x2
    0x84018d14     0xc4    addi a5,a5,-1296 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018d18     0xc8    li a4,1
    0x84018d1a     0xca    sd a4,1736(a5)
    0x84018d1e     0xce    sd s3,1744(a5)
    0x84018d22     0xd2    mv s2,s5
    0x84018d24     0xd4    beqz s5,ffffffff84018cf4 <handleInvocation+0xa4>
    0x84018d28     0xd8    mv a0,s1
    0x84018d2a     0xda    jal ra,ffffffff84015172 <handleFault>
    0x84018d2e     0xde    li s2,0
    0x84018d30     0xe0    j ffffffff84018cf4 <handleInvocation+0xa4>
    0x84018d32     0xe2    mv s2,s5
    0x84018d34     0xe4    beqz s5,ffffffff84018cf4 <handleInvocation+0xa4>
    0x84018d38     0xe8    mv a0,s1
    0x84018d3a     0xea    jal ra,ffffffff84015172 <handleFault>
    0x84018d3e     0xee    mv s2,s9
    0x84018d40     0xf0    j ffffffff84018cf4 <handleInvocation+0xa4>
    0x84018d42     0xf2    bnez s4,ffffffff84018cc2 <handleInvocation+0x72>
    0x84018d46     0xf6    li a1,4
    0x84018d48     0xf8    j ffffffff84018cc2 <handleInvocation+0x72>
    0x84018d4a     0xfa    bnez s6,ffffffff84018d52 <handleInvocation+0x102>
    0x84018d4e     0xfe    mv s2,s6
    0x84018d50    0x100    j ffffffff84018cf4 <handleInvocation+0xa4>
    0x84018d52    0x102    mv a0,s1
    0x84018d54    0x104    jal ra,ffffffff84017a0a <replyFromKernel_error>
    0x84018d58    0x108    j ffffffff84018cf4 <handleInvocation+0xa4>
    0x84018d5a    0x10a    bnez s6,ffffffff84018d68 <handleInvocation+0x118>
    0x84018d5e    0x10e    li a1,1
    0x84018d60    0x110    mv a0,s1
    0x84018d62    0x112    jal ra,ffffffff84012996 <setThreadState>
    0x84018d66    0x116    j ffffffff84018cf4 <handleInvocation+0xa4>
    0x84018d68    0x118    sd zero,72(s1)
    0x84018d6c    0x11c    sd zero,80(s1)
    0x84018d70    0x120    j ffffffff84018d5e <handleInvocation+0x10e>
    0x84018d72    0x122    mv s2,a0
    0x84018d74    0x124    j ffffffff84018cf4 <handleInvocation+0xa4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
113 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 182 nodes.

Section decodeUntypedInvocation (283 of 301)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 283 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x840186d8      0x0    addi sp,sp,-176
    0x840186da      0x2    sd ra,168(sp)         ; stack access
    0x840186dc      0x4    sd s0,160(sp)         ; stack access
    0x840186de      0x6    sd s1,152(sp)         ; stack access
    0x840186e0      0x8    sd s2,144(sp)         ; stack access
    0x840186e2      0xa    sd s3,136(sp)         ; stack access
    0x840186e4      0xc    sd s4,128(sp)         ; stack access
    0x840186e6      0xe    sd s5,120(sp)         ; stack access
    0x840186e8     0x10    sd s6,112(sp)         ; stack access
    0x840186ea     0x12    sd s7,104(sp)         ; stack access
    0x840186ec     0x14    sd s8,96(sp)          ; stack access
    0x840186ee     0x16    sd s9,88(sp)          ; stack access
    0x840186f0     0x18    sd s10,80(sp)         ; stack access
    0x840186f2     0x1a    sd s11,72(sp)         ; stack access
    0x840186f4     0x1c    sd a3,16(sp)          ; stack access
    0x840186f6     0x1e    sd a4,24(sp)          ; stack access
    0x840186f8     0x20    li a5,1
    0x840186fa     0x22    bne a0,a5,ffffffff8401887a <decodeUntypedInvocation+0x1a2>
    0x840186fe     0x26    mv s1,a0
    0x84018700     0x28    mv s2,a2
    0x84018702     0x2a    mv s0,a6
    0x84018704     0x2c    li a5,5
    0x84018706     0x2e    bgeu a5,a1,ffffffff840188a4 <decodeUntypedInvocation+0x1cc>
    0x8401870a     0x32    auipc s9,0x3
    0x8401870e     0x36    ld s9,-1658(s9) # ffffffff8401b090 <current_extra_caps>
    0x84018712     0x3a    beqz s9,ffffffff840188a4 <decodeUntypedInvocation+0x1cc>
    0x84018716     0x3e    mv a1,a6
    0x84018718     0x40    li a0,0
    0x8401871a     0x42    jal ra,ffffffff84010128 <getSyscallArg>
    0x8401871e     0x46    mv s3,a0
    0x84018720     0x48    li a5,10
    0x84018722     0x4a    bltu a5,a0,ffffffff840188b2 <decodeUntypedInvocation+0x1da>
    0x84018726     0x4e    mv a1,s0
    0x84018728     0x50    li a0,1
    0x8401872a     0x52    jal ra,ffffffff84010128 <getSyscallArg>
    0x8401872e     0x56    mv s4,a0
    0x84018730     0x58    mv a1,a0
    0x84018732     0x5a    mv a0,s3
    0x84018734     0x5c    jal ra,ffffffff84011dfe <getObjectSize>
    0x84018738     0x60    mv s5,a0
    0x8401873a     0x62    li a5,63
    0x8401873e     0x66    bltu a5,s4,ffffffff840188c8 <decodeUntypedInvocation+0x1f0>
    0x84018742     0x6a    li a5,38
    0x84018746     0x6e    bltu a5,a0,ffffffff840188c8 <decodeUntypedInvocation+0x1f0>
    0x8401874a     0x72    li a5,4
    0x8401874c     0x74    beq s3,a5,ffffffff840188e6 <decodeUntypedInvocation+0x20e>
    0x84018750     0x78    bnez s3,ffffffff84018916 <decodeUntypedInvocation+0x23e>
    0x84018754     0x7c    li a5,3
    0x84018756     0x7e    bgeu a5,s4,ffffffff84018900 <decodeUntypedInvocation+0x228>
    0x8401875a     0x82    ld s10,24(sp)         ; stack access
    0x8401875c     0x84    mv a1,s0
    0x8401875e     0x86    li a0,3
    0x84018760     0x88    jal ra,ffffffff84010128 <getSyscallArg>
    0x84018764     0x8c    mv s6,a0
    0x84018766     0x8e    mv a1,s0
    0x84018768     0x90    li a0,4
    0x8401876a     0x92    jal ra,ffffffff84010128 <getSyscallArg>
    0x8401876e     0x96    mv s7,a0
    0x84018770     0x98    mv a1,s0
    0x84018772     0x9a    li a0,5
    0x84018774     0x9c    jal ra,ffffffff84010128 <getSyscallArg>
    0x84018778     0xa0    mv s8,a0
    0x8401877a     0xa2    bnez s6,ffffffff84018938 <decodeUntypedInvocation+0x260>
    0x8401877e     0xa6    ld a5,0(s9)
    0x84018782     0xaa    srli a4,a5,0x3b
    0x84018786     0xae    li a3,10
    0x84018788     0xb0    bne a4,a3,ffffffff8401895e <decodeUntypedInvocation+0x286>
    0x8401878c     0xb4    srli a4,a5,0x2f
    0x84018790     0xb8    li a3,1
    0x84018792     0xba    sll a4,a3,a4
    0x84018796     0xbe    addi a3,a4,-1
    0x8401879a     0xc2    bltu a3,s7,ffffffff84018988 <decodeUntypedInvocation+0x2b0>
    0x8401879e     0xc6    addi a3,s8,-1
    0x840187a2     0xca    li a2,255
    0x840187a6     0xce    bltu a2,a3,ffffffff840189a2 <decodeUntypedInvocation+0x2ca>
    0x840187aa     0xd2    sub a4,a4,s7
    0x840187ae     0xd6    bltu a4,s8,ffffffff840189c2 <decodeUntypedInvocation+0x2ea>
    0x840187b2     0xda    slli a5,a5,0x1
    0x840187b4     0xdc    lui s0,0xfc000
    0x840187b8     0xe0    srli s0,s0,0x19
    0x840187ba     0xe2    and a4,a5,s0
    0x840187be     0xe6    srli a5,a5,0x26
    0x840187c0     0xe8    andi a5,a5,1
    0x840187c2     0xea    beqz a5,ffffffff840187ca <decodeUntypedInvocation+0xf2>
    0x840187c4     0xec    li a5,-1
    0x840187c6     0xee    slli a5,a5,0x27
    0x840187c8     0xf0    or a4,a4,a5
    0x840187ca     0xf2    mv s11,a4
    0x840187cc     0xf4    add s9,s7,s8
    0x840187d0     0xf8    bgeu s7,s9,ffffffff840187ee <decodeUntypedInvocation+0x116>
    0x840187d4     0xfc    slli s0,s7,0x5
    0x840187d8    0x100    add s0,s0,a4
    0x840187da    0x102    mv s6,s7
    0x840187dc    0x104    mv a0,s0
    0x840187de    0x106    jal ra,ffffffff84011bc8 <ensureEmptySlot>
    0x840187e2    0x10a    bnez a0,ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840187e4    0x10c    addi s6,s6,1
    0x840187e6    0x10e    addi s0,s0,32 # fffffffffc000020 <ki_end+0x77fce020>
    0x840187ea    0x112    bne s6,s9,ffffffff840187dc <decodeUntypedInvocation+0x104>
    0x840187ee    0x116    mv a0,s2
    0x840187f0    0x118    jal ra,ffffffff84012280 <ensureNoChildren>
    0x840187f4    0x11c    beqz a0,ffffffff840187fc <decodeUntypedInvocation+0x124>
    0x840187f6    0x11e    srli a0,s10,0x19
    0x840187fa    0x122    li s1,0
    0x840187fc    0x124    ld a5,16(sp)          ; stack access
    0x840187fe    0x126    slli a4,a5,0x19
    0x84018802    0x12a    srli a4,a4,0x19
    0x84018804    0x12c    srli a5,a5,0x26
    0x84018806    0x12e    andi a5,a5,1
    0x84018808    0x130    beqz a5,ffffffff84018810 <decodeUntypedInvocation+0x138>
    0x8401880a    0x132    li a5,-1
    0x8401880c    0x134    slli a5,a5,0x27
    0x8401880e    0x136    or a4,a4,a5
    0x84018810    0x138    slli a0,a0,0x4
    0x84018812    0x13a    li a5,1
    0x84018814    0x13c    sll a5,a5,s10
    0x84018818    0x140    sub a5,a5,a0
    0x8401881a    0x142    sext.w a3,s5
    0x8401881e    0x146    srl s5,a5,s5
    0x84018822    0x14a    bltu s5,s8,ffffffff840189de <decodeUntypedInvocation+0x306>
    0x84018826    0x14e    srli s0,s10,0x6
    0x8401882a    0x152    andi s0,s0,1
    0x8401882c    0x154    beqz s0,ffffffff8401883c <decodeUntypedInvocation+0x164>
    0x8401882e    0x156    addi a5,s3,-7
    0x84018832    0x15a    li a2,2
    0x84018834    0x15c    bgeu a2,a5,ffffffff8401883c <decodeUntypedInvocation+0x164>
    0x84018838    0x160    bnez s3,ffffffff840189f4 <decodeUntypedInvocation+0x31c>
    0x8401883c    0x164    li a5,1
    0x8401883e    0x166    sll a5,a5,a3
    0x84018842    0x16a    addi s5,a5,-1 # ffff <KERNEL_OFFSET-0xfffffffeffff0001>
    0x84018846    0x16e    add a0,a0,s5
    0x84018848    0x170    add s5,a0,a4
    0x8401884c    0x174    neg a5,a5
    0x84018850    0x178    and s5,s5,a5
    0x84018854    0x17c    li a1,2
    0x84018856    0x17e    auipc a0,0x15
    0x8401885a    0x182    ld a0,-2046(a0) # ffffffff8402d058 <ksCurThread>
    0x8401885e    0x186    jal ra,ffffffff84012996 <setThreadState>
    0x84018862    0x18a    sd s0,0(sp)           ; stack access
    0x84018864    0x18c    mv a7,s8
    0x84018866    0x18e    mv a6,s7
    0x84018868    0x190    mv a5,s11
    0x8401886a    0x192    mv a4,s4
    0x8401886c    0x194    mv a3,s3
    0x8401886e    0x196    mv a2,s5
    0x84018870    0x198    mv a1,s1
    0x84018872    0x19a    mv a0,s2
    0x84018874    0x19c    jal ra,ffffffff840185c4 <invokeUntyped_Retype>
    0x84018878    0x1a0    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x8401887a    0x1a2    li a5,3
    0x8401887c    0x1a4    auipc a4,0x2
    0x84018880    0x1a8    sd a5,964(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84018884    0x1ac    li a0,3
    0x84018886    0x1ae    ld ra,168(sp)         ; stack access
    0x84018888    0x1b0    ld s0,160(sp)         ; stack access
    0x8401888a    0x1b2    ld s1,152(sp)         ; stack access
    0x8401888c    0x1b4    ld s2,144(sp)         ; stack access
    0x8401888e    0x1b6    ld s3,136(sp)         ; stack access
    0x84018890    0x1b8    ld s4,128(sp)         ; stack access
    0x84018892    0x1ba    ld s5,120(sp)         ; stack access
    0x84018894    0x1bc    ld s6,112(sp)         ; stack access
    0x84018896    0x1be    ld s7,104(sp)         ; stack access
    0x84018898    0x1c0    ld s8,96(sp)          ; stack access
    0x8401889a    0x1c2    ld s9,88(sp)          ; stack access
    0x8401889c    0x1c4    ld s10,80(sp)         ; stack access
    0x8401889e    0x1c6    ld s11,72(sp)         ; stack access
    0x840188a0    0x1c8    addi sp,sp,176
    0x840188a2    0x1ca    ret
    0x840188a4    0x1cc    li a5,7
    0x840188a6    0x1ce    auipc a4,0x2
    0x840188aa    0x1d2    sd a5,922(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840188ae    0x1d6    li a0,3
    0x840188b0    0x1d8    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840188b2    0x1da    auipc a5,0x2
    0x840188b6    0x1de    addi a5,a5,-178 # ffffffff8401a800 <riscvKSASIDTable>
    0x840188ba    0x1e2    li a4,1
    0x840188bc    0x1e4    sd a4,1088(a5)
    0x840188c0    0x1e8    sd zero,1040(a5)
    0x840188c4    0x1ec    li a0,3
    0x840188c6    0x1ee    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840188c8    0x1f0    auipc a5,0x2
    0x840188cc    0x1f4    addi a5,a5,-200 # ffffffff8401a800 <riscvKSASIDTable>
    0x840188d0    0x1f8    li a4,4
    0x840188d2    0x1fa    sd a4,1088(a5)
    0x840188d6    0x1fe    sd zero,1056(a5)
    0x840188da    0x202    li a4,38
    0x840188de    0x206    sd a4,1064(a5)
    0x840188e2    0x20a    li a0,3
    0x840188e4    0x20c    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840188e6    0x20e    bnez s4,ffffffff8401875a <decodeUntypedInvocation+0x82>
    0x840188ea    0x212    auipc a5,0x2
    0x840188ee    0x216    addi a5,a5,-234 # ffffffff8401a800 <riscvKSASIDTable>
    0x840188f2    0x21a    li a4,1
    0x840188f4    0x21c    sd a4,1088(a5)
    0x840188f8    0x220    sd a4,1040(a5)
    0x840188fc    0x224    li a0,3
    0x840188fe    0x226    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x84018900    0x228    auipc a5,0x2
    0x84018904    0x22c    addi a5,a5,-256 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018908    0x230    li a4,1
    0x8401890a    0x232    sd a4,1088(a5)
    0x8401890e    0x236    sd a4,1040(a5)
    0x84018912    0x23a    li a0,3
    0x84018914    0x23c    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x84018916    0x23e    li a5,5
    0x84018918    0x240    bne s3,a5,ffffffff8401875a <decodeUntypedInvocation+0x82>
    0x8401891c    0x244    li a5,7
    0x8401891e    0x246    bltu a5,s4,ffffffff8401875a <decodeUntypedInvocation+0x82>
    0x84018922    0x24a    auipc a5,0x2
    0x84018926    0x24e    addi a5,a5,-290 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401892a    0x252    li a4,1
    0x8401892c    0x254    sd a4,1088(a5)
    0x84018930    0x258    sd a4,1040(a5)
    0x84018934    0x25c    li a0,3
    0x84018936    0x25e    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x84018938    0x260    mv a1,s0
    0x8401893a    0x262    li a0,2
    0x8401893c    0x264    jal ra,ffffffff84010128 <getSyscallArg>
    0x84018940    0x268    mv a2,a0
    0x84018942    0x26a    ld a0,0(s9)
    0x84018946    0x26e    sd a0,32(sp)          ; stack access
    0x84018948    0x270    ld a1,8(s9)
    0x8401894c    0x274    sd a1,40(sp)          ; stack access
    0x8401894e    0x276    mv a3,s6
    0x84018950    0x278    jal ra,ffffffff840113d2 <lookupTargetSlot>
    0x84018954    0x27c    sd a0,48(sp)          ; stack access
    0x84018956    0x27e    sd a1,56(sp)          ; stack access
    0x84018958    0x280    bnez a0,ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x8401895a    0x282    ld a5,0(a1)
    0x8401895c    0x284    j ffffffff84018782 <decodeUntypedInvocation+0xaa>
    0x8401895e    0x286    auipc a4,0x2
    0x84018962    0x28a    addi a4,a4,-350 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018966    0x28e    li a5,6
    0x84018968    0x290    sd a5,1088(a4)
    0x8401896c    0x294    sd zero,1080(a4)
    0x84018970    0x298    slli a5,s6,0x2
    0x84018974    0x29c    andi a5,a5,508
    0x84018978    0x2a0    ori a5,a5,1
    0x8401897c    0x2a4    sd a5,1024(a4)
    0x84018980    0x2a8    sd zero,1032(a4)
    0x84018984    0x2ac    li a0,3
    0x84018986    0x2ae    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x84018988    0x2b0    auipc a5,0x2
    0x8401898c    0x2b4    addi a5,a5,-392 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018990    0x2b8    li a4,4
    0x84018992    0x2ba    sd a4,1088(a5)
    0x84018996    0x2be    sd zero,1056(a5)
    0x8401899a    0x2c2    sd a3,1064(a5)
    0x8401899e    0x2c6    li a0,3
    0x840189a0    0x2c8    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840189a2    0x2ca    auipc a5,0x2
    0x840189a6    0x2ce    addi a5,a5,-418 # ffffffff8401a800 <riscvKSASIDTable>
    0x840189aa    0x2d2    li a4,4
    0x840189ac    0x2d4    sd a4,1088(a5)
    0x840189b0    0x2d8    li a4,1
    0x840189b2    0x2da    sd a4,1056(a5)
    0x840189b6    0x2de    li a4,256
    0x840189ba    0x2e2    sd a4,1064(a5)
    0x840189be    0x2e6    li a0,3
    0x840189c0    0x2e8    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840189c2    0x2ea    auipc a5,0x2
    0x840189c6    0x2ee    addi a5,a5,-450 # ffffffff8401a800 <riscvKSASIDTable>
    0x840189ca    0x2f2    li a3,4
    0x840189cc    0x2f4    sd a3,1088(a5)
    0x840189d0    0x2f8    li a3,1
    0x840189d2    0x2fa    sd a3,1056(a5)
    0x840189d6    0x2fe    sd a4,1064(a5)
    0x840189da    0x302    li a0,3
    0x840189dc    0x304    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840189de    0x306    auipc a4,0x2
    0x840189e2    0x30a    addi a4,a4,-478 # ffffffff8401a800 <riscvKSASIDTable>
    0x840189e6    0x30e    li a3,10
    0x840189e8    0x310    sd a3,1088(a4)
    0x840189ec    0x314    sd a5,1072(a4)
    0x840189f0    0x318    li a0,3
    0x840189f2    0x31a    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>
    0x840189f4    0x31c    auipc a5,0x2
    0x840189f8    0x320    addi a5,a5,-500 # ffffffff8401a800 <riscvKSASIDTable>
    0x840189fc    0x324    li a4,1
    0x840189fe    0x326    sd a4,1088(a5)
    0x84018a02    0x32a    sd a4,1040(a5)
    0x84018a06    0x32e    li a0,3
    0x84018a08    0x330    j ffffffff84018886 <decodeUntypedInvocation+0x1ae>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
283 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 423 nodes.

Section doReplyTransfer (284 of 301)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 89 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `doReplyTransfer`:

    0x84015f96     0x0    addi sp,sp,-48
    0x84015f98     0x2    sd ra,40(sp)          ; stack access
    0x84015f9a     0x4    sd s0,32(sp)          ; stack access
    0x84015f9c     0x6    sd s1,24(sp)          ; stack access
    0x84015f9e     0x8    sd s2,16(sp)          ; stack access
    0x84015fa0     0xa    sd s3,8(sp)           ; stack access
    0x84015fa2     0xc    ld s0,0(a1)
    0x84015fa4     0xe    beqz s0,ffffffff84015fb6 <doReplyTransfer+0x20>
    0x84015fa6    0x10    mv s1,a0
    0x84015fa8    0x12    mv s2,a2
    0x84015faa    0x14    ld a5,280(s0)
    0x84015fae    0x18    andi a5,a5,15
    0x84015fb0    0x1a    li a4,5
    0x84015fb2    0x1c    beq a5,a4,ffffffff84015fc4 <doReplyTransfer+0x2e>
    0x84015fb6    0x20    ld ra,40(sp)          ; stack access
    0x84015fb8    0x22    ld s0,32(sp)          ; stack access
    0x84015fba    0x24    ld s1,24(sp)          ; stack access
    0x84015fbc    0x26    ld s2,16(sp)          ; stack access
    0x84015fbe    0x28    ld s3,8(sp)           ; stack access
    0x84015fc0    0x2a    addi sp,sp,48
    0x84015fc2    0x2c    ret
    0x84015fc4    0x2e    mv a0,a1
    0x84015fc6    0x30    jal ra,ffffffff84013244 <reply_remove>
    0x84015fca    0x34    ld s3,312(s0)
    0x84015fce    0x38    andi s3,s3,15
    0x84015fd2    0x3c    bnez s3,ffffffff8401603c <doReplyTransfer+0xa6>
    0x84015fd6    0x40    mv a4,s0
    0x84015fd8    0x42    mv a3,s2
    0x84015fda    0x44    li a2,0
    0x84015fdc    0x46    li a1,0
    0x84015fde    0x48    mv a0,s1
    0x84015fe0    0x4a    jal ra,ffffffff84014e90 <doIPCTransfer>
    0x84015fe4    0x4e    li a1,1
    0x84015fe6    0x50    mv a0,s0
    0x84015fe8    0x52    jal ra,ffffffff84012996 <setThreadState>
    0x84015fec    0x56    ld a0,368(s0)
    0x84015ff0    0x5a    beqz a0,ffffffff84015fb6 <doReplyTransfer+0x20>
    0x84015ff2    0x5c    ld a5,280(s0)
    0x84015ff6    0x60    andi a5,a5,15
    0x84015ff8    0x62    addi a5,a5,-1
    0x84015ffa    0x64    li a4,1
    0x84015ffc    0x66    bltu a4,a5,ffffffff84015fb6 <doReplyTransfer+0x20>
    0x84016000    0x6a    ld a5,72(a0)
    0x84016002    0x6c    slli a5,a5,0x4
    0x84016004    0x6e    addi a4,a0,88
    0x84016008    0x72    add a5,a5,a4
    0x8401600a    0x74    auipc a4,0x17
    0x8401600e    0x78    ld a4,38(a4) # ffffffff8402d030 <ksCurTime>
    0x84016012    0x7c    addi a4,a4,10
    0x84016014    0x7e    ld a3,0(a5)
    0x84016016    0x80    bltu a4,a3,ffffffff84016022 <doReplyTransfer+0x8c>
    0x8401601a    0x84    ld a4,8(a5)
    0x8401601c    0x86    li a5,19
    0x8401601e    0x88    bltu a5,a4,ffffffff84016062 <doReplyTransfer+0xcc>
    0x84016022    0x8c    andi a5,s0,-1024
    0x84016026    0x90    ld a5,128(a5)
    0x84016028    0x92    srli a5,a5,0x3b
    0x8401602a    0x94    li a4,4
    0x8401602c    0x96    bne a5,a4,ffffffff84016036 <doReplyTransfer+0xa0>
    0x84016030    0x9a    li a5,5
    0x84016032    0x9c    bne s3,a5,ffffffff8401606a <doReplyTransfer+0xd4>
    0x84016036    0xa0    jal ra,ffffffff84013ce4 <postpone>
    0x8401603a    0xa4    j ffffffff84015fb6 <doReplyTransfer+0x20>
    0x8401603c    0xa6    mv a1,s1
    0x8401603e    0xa8    mv a0,s0
    0x84016040    0xaa    jal ra,ffffffff840105d2 <handleFaultReply>
    0x84016044    0xae    sd zero,312(s0)
    0x84016048    0xb2    sd zero,320(s0)
    0x8401604c    0xb6    beqz a0,ffffffff84016058 <doReplyTransfer+0xc2>
    0x8401604e    0xb8    li a1,2
    0x84016050    0xba    mv a0,s0
    0x84016052    0xbc    jal ra,ffffffff84012996 <setThreadState>
    0x84016056    0xc0    j ffffffff84015fec <doReplyTransfer+0x56>
    0x84016058    0xc2    li a1,0
    0x8401605a    0xc4    mv a0,s0
    0x8401605c    0xc6    jal ra,ffffffff84012996 <setThreadState>
    0x84016060    0xca    j ffffffff84015fec <doReplyTransfer+0x56>
    0x84016062    0xcc    mv a0,s0
    0x84016064    0xce    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x84016068    0xd2    j ffffffff84015fb6 <doReplyTransfer+0x20>
    0x8401606a    0xd4    ld a4,48(a0)
    0x8401606c    0xd6    auipc a5,0x4
    0x84016070    0xda    addi a5,a5,1940 # ffffffff8401a800 <riscvKSASIDTable>
    0x84016074    0xde    li a3,5
    0x84016076    0xe0    sd a3,1736(a5)
    0x8401607a    0xe4    sd a4,1744(a5)
    0x8401607e    0xe8    mv a0,s0
    0x84016080    0xea    jal ra,ffffffff840151a0 <handleTimeout>
    0x84016084    0xee    j ffffffff84015fb6 <doReplyTransfer+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
89 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 144 nodes.

Section handleVMFaultEvent (285 of 301)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 75 instructions.

Skipping c0102573 rdtime a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x84015598     0x0    addi sp,sp,-16
    0x8401559a     0x2    sd ra,8(sp)           ; stack access
    0x8401559c     0x4    mv a1,a0
    0x8401559e     0x6    auipc a4,0x18
    0x840155a2     0xa    addi a4,a4,-1390 # ffffffff8402d030 <ksCurTime>
    0x840155a6     0xe    ld a3,0(a4)
    0x840155a8    0x10    rdtime a0
    0x840155ac    0x14    sd a0,0(a4)
    0x840155ae    0x16    auipc a4,0x18
    0x840155b2    0x1a    addi a4,a4,-1390 # ffffffff8402d040 <ksConsumed>
    0x840155b6    0x1e    ld a5,0(a4)
    0x840155b8    0x20    sub a5,a5,a3
    0x840155ba    0x22    add a5,a5,a0
    0x840155bc    0x24    sd a5,0(a4)
    0x840155be    0x26    auipc a3,0x18
    0x840155c2    0x2a    ld a3,-1430(a3) # ffffffff8402d028 <ksCurSC>
    0x840155c6    0x2e    ld a2,72(a3)
    0x840155c8    0x30    slli a4,a2,0x4
    0x840155cc    0x34    add a4,a4,a3
    0x840155ce    0x36    ld a4,96(a4)
    0x840155d0    0x38    bltu a4,a5,ffffffff84015622 <handleVMFaultEvent+0x8a>
    0x840155d4    0x3c    sub a4,a4,a5
    0x840155d6    0x3e    li a0,19
    0x840155d8    0x40    bgeu a0,a4,ffffffff84015622 <handleVMFaultEvent+0x8a>
    0x840155dc    0x44    ld a4,0(a3)
    0x840155de    0x46    bnez a4,ffffffff8401560c <handleVMFaultEvent+0x74>
    0x840155e0    0x48    addi a5,a5,20
    0x840155e2    0x4a    auipc a4,0x18
    0x840155e6    0x4e    ld a4,-1490(a4) # ffffffff8402d010 <ksDomainTime>
    0x840155ea    0x52    bltu a4,a5,ffffffff84015654 <handleVMFaultEvent+0xbc>
    0x840155ee    0x56    auipc a0,0x18
    0x840155f2    0x5a    ld a0,-1430(a0) # ffffffff8402d058 <ksCurThread>
    0x840155f6    0x5e    jal ra,ffffffff84010818 <handleVMFault>
    0x840155fa    0x62    bnez a0,ffffffff84015664 <handleVMFaultEvent+0xcc>
    0x840155fc    0x64    jal ra,ffffffff840149e0 <schedule>
    0x84015600    0x68    jal ra,ffffffff84012aa0 <activateThread>
    0x84015604    0x6c    li a0,0
    0x84015606    0x6e    ld ra,8(sp)           ; stack access
    0x84015608    0x70    addi sp,sp,16
    0x8401560a    0x72    ret
    0x8401560c    0x74    ld a4,80(a3)
    0x8401560e    0x76    bgeu a4,a2,ffffffff8401564c <handleVMFaultEvent+0xb4>
    0x84015612    0x7a    ld a0,64(a3)
    0x84015614    0x7c    add a4,a4,a0
    0x84015616    0x7e    addi a4,a4,1
    0x84015618    0x80    sub a2,a4,a2
    0x8401561c    0x84    ld a4,64(a3)
    0x8401561e    0x86    bne a4,a2,ffffffff840155e0 <handleVMFaultEvent+0x48>
    0x84015622    0x8a    li a3,1
    0x84015624    0x8c    li a2,0
    0x84015626    0x8e    li a1,1
    0x84015628    0x90    mv a0,a5
    0x8401562a    0x92    jal ra,ffffffff8401523c <chargeBudget>
    0x8401562e    0x96    auipc a0,0x18
    0x84015632    0x9a    ld a0,-1494(a0) # ffffffff8402d058 <ksCurThread>
    0x84015636    0x9e    ld a5,280(a0)
    0x8401563a    0xa2    andi a5,a5,15
    0x8401563c    0xa4    addi a5,a5,-1
    0x8401563e    0xa6    li a4,1
    0x84015640    0xa8    bltu a4,a5,ffffffff840155fc <handleVMFaultEvent+0x64>
    0x84015644    0xac    li a1,2
    0x84015646    0xae    jal ra,ffffffff84012996 <setThreadState>
    0x8401564a    0xb2    j ffffffff840155fc <handleVMFaultEvent+0x64>
    0x8401564c    0xb4    addi a4,a4,1
    0x8401564e    0xb6    sub a2,a4,a2
    0x84015652    0xba    j ffffffff8401561c <handleVMFaultEvent+0x84>
    0x84015654    0xbc    li a5,1
    0x84015656    0xbe    auipc a4,0x18
    0x8401565a    0xc2    sd a5,-1566(a4) # ffffffff8402d038 <ksReprogram>
    0x8401565e    0xc6    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84015662    0xca    j ffffffff8401562e <handleVMFaultEvent+0x96>
    0x84015664    0xcc    auipc a0,0x18
    0x84015668    0xd0    ld a0,-1548(a0) # ffffffff8402d058 <ksCurThread>
    0x8401566c    0xd4    jal ra,ffffffff84015172 <handleFault>
    0x84015670    0xd8    j ffffffff840155fc <handleVMFaultEvent+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 119 nodes.

Section sendIPC (286 of 301)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 201 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `sendIPC`:

    0x84014ef6      0x0    addi sp,sp,-96
    0x84014ef8      0x2    sd ra,88(sp)          ; stack access
    0x84014efa      0x4    sd s0,80(sp)          ; stack access
    0x84014efc      0x6    sd s1,72(sp)          ; stack access
    0x84014efe      0x8    sd s2,64(sp)          ; stack access
    0x84014f00      0xa    sd s3,56(sp)          ; stack access
    0x84014f02      0xc    sd s4,48(sp)          ; stack access
    0x84014f04      0xe    sd s5,40(sp)          ; stack access
    0x84014f06     0x10    sd s6,32(sp)          ; stack access
    0x84014f08     0x12    sd s7,24(sp)          ; stack access
    0x84014f0a     0x14    mv s3,a1
    0x84014f0c     0x16    mv s5,a2
    0x84014f0e     0x18    mv s2,a3
    0x84014f10     0x1a    mv s4,a4
    0x84014f12     0x1c    mv s6,a5
    0x84014f14     0x1e    mv s1,a6
    0x84014f16     0x20    mv s0,a7
    0x84014f18     0x22    ld a6,0(a7)
    0x84014f1c     0x26    andi a5,a6,2
    0x84014f20     0x2a    beqz a5,ffffffff84014ff6 <sendIPC+0x100>
    0x84014f22     0x2c    andi a4,a6,3
    0x84014f26     0x30    li a5,2
    0x84014f28     0x32    bne a4,a5,ffffffff84014fe0 <sendIPC+0xea>
    0x84014f2c     0x36    ld s7,8(a7)
    0x84014f30     0x3a    lui a2,0xf8000
    0x84014f34     0x3e    srli a2,a2,0x19
    0x84014f36     0x40    and a2,a6,a2
    0x84014f3a     0x44    srli a6,a6,0x26
    0x84014f3e     0x48    andi a6,a6,1
    0x84014f42     0x4c    beqz a6,ffffffff84014f4c <sendIPC+0x56>
    0x84014f46     0x50    li a5,-1
    0x84014f48     0x52    slli a5,a5,0x27
    0x84014f4a     0x54    or a2,a2,a5
    0x84014f4c     0x56    mv a1,s7
    0x84014f4e     0x58    mv a0,s7
    0x84014f50     0x5a    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x84014f54     0x5e    sd a0,0(sp)           ; stack access
    0x84014f56     0x60    sd a1,8(sp)           ; stack access
    0x84014f58     0x62    sd a0,8(s0)
    0x84014f5a     0x64    ld a5,0(s0)
    0x84014f5c     0x66    li a4,-1
    0x84014f5e     0x68    slli a4,a4,0x27
    0x84014f60     0x6a    addi a4,a4,3
    0x84014f62     0x6c    and a5,a5,a4
    0x84014f64     0x6e    lui a4,0xf8000
    0x84014f68     0x72    srli a4,a4,0x19
    0x84014f6a     0x74    and a1,a1,a4
    0x84014f6c     0x76    or a1,a1,a5
    0x84014f6e     0x78    beqz a0,ffffffff840150c2 <sendIPC+0x1cc>
    0x84014f72     0x7c    sd a1,0(s0)
    0x84014f74     0x7e    mv a4,s7
    0x84014f76     0x80    mv a3,s2
    0x84014f78     0x82    mv a2,s5
    0x84014f7a     0x84    mv a1,s0
    0x84014f7c     0x86    mv a0,s1
    0x84014f7e     0x88    jal ra,ffffffff84014e90 <doIPCTransfer>
    0x84014f82     0x8c    ld a5,288(s7)
    0x84014f86     0x90    srli a5,a5,0x1
    0x84014f88     0x92    lui s0,0xe0000
    0x84014f8c     0x96    srli s0,s0,0x19
    0x84014f8e     0x98    and s0,s0,a5
    0x84014f90     0x9a    srli a5,a5,0x26
    0x84014f92     0x9c    andi a5,a5,1
    0x84014f94     0x9e    beqz a5,ffffffff840150c8 <sendIPC+0x1d2>
    0x84014f98     0xa2    li a5,-1
    0x84014f9a     0xa4    slli a5,a5,0x27
    0x84014f9c     0xa6    or s0,s0,a5
    0x84014f9e     0xa8    mv s5,s0
    0x84014fa0     0xaa    ld a0,0(s5)
    0x84014fa4     0xae    ld a4,288(a0)
    0x84014fa8     0xb2    li a5,-1
    0x84014faa     0xb4    slli a5,a5,0x28
    0x84014fac     0xb6    addi a5,a5,31
    0x84014fae     0xb8    and a5,a5,a4
    0x84014fb0     0xba    sd a5,288(a0)
    0x84014fb4     0xbe    sd zero,0(s5)
    0x84014fb8     0xc2    li a1,0
    0x84014fba     0xc4    jal ra,ffffffff84012996 <setThreadState>
    0x84014fbe     0xc8    beqz s3,ffffffff840150f4 <sendIPC+0x1fe>
    0x84014fc2     0xcc    or s2,s2,s4
    0x84014fc6     0xd0    bnez s2,ffffffff84015102 <sendIPC+0x20c>
    0x84014fca     0xd4    li a1,0
    0x84014fcc     0xd6    mv a0,s1
    0x84014fce     0xd8    jal ra,ffffffff84012996 <setThreadState>
    0x84014fd2     0xdc    li a1,1
    0x84014fd4     0xde    mv a0,s7
    0x84014fd6     0xe0    jal ra,ffffffff84012996 <setThreadState>
    0x84014fda     0xe4    mv a0,s7
    0x84014fdc     0xe6    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x84014fe0     0xea    ld ra,88(sp)          ; stack access
    0x84014fe2     0xec    ld s0,80(sp)          ; stack access
    0x84014fe4     0xee    ld s1,72(sp)          ; stack access
    0x84014fe6     0xf0    ld s2,64(sp)          ; stack access
    0x84014fe8     0xf2    ld s3,56(sp)          ; stack access
    0x84014fea     0xf4    ld s4,48(sp)          ; stack access
    0x84014fec     0xf6    ld s5,40(sp)          ; stack access
    0x84014fee     0xf8    ld s6,32(sp)          ; stack access
    0x84014ff0     0xfa    ld s7,24(sp)          ; stack access
    0x84014ff2     0xfc    addi sp,sp,96
    0x84014ff4     0xfe    ret
    0x84014ff6    0x100    beqz a0,ffffffff84014fe0 <sendIPC+0xea>
    0x84014ff8    0x102    ld a5,280(s1)
    0x84014ffc    0x106    srli a5,a5,0x27
    0x84014ffe    0x108    slli a5,a5,0x27
    0x84015000    0x10a    lui a4,0xe0000
    0x84015004    0x10e    srli a4,a4,0x19
    0x84015006    0x110    and a4,a7,a4
    0x8401500a    0x114    or a5,a5,a4
    0x8401500c    0x116    ori a5,a5,4
    0x84015010    0x11a    sd a5,280(s1)
    0x84015014    0x11e    sd a2,296(s1)
    0x84015018    0x122    ld a5,288(s1)
    0x8401501c    0x126    slli s2,a3,0x4
    0x84015020    0x12a    andi s2,s2,16
    0x84015024    0x12e    andi a5,a5,-25
    0x84015026    0x130    or a5,a5,s2
    0x8401502a    0x134    slli s4,s4,0x3
    0x8401502c    0x136    andi s4,s4,8
    0x84015030    0x13a    or a5,a5,s4
    0x84015034    0x13e    andi a5,a5,-5
    0x84015036    0x140    slli s3,a1,0x2
    0x8401503a    0x144    andi s3,s3,4
    0x8401503e    0x148    or s3,a5,s3
    0x84015042    0x14c    sd s3,288(s1)
    0x84015046    0x150    mv a0,s1
    0x84015048    0x152    jal ra,ffffffff8401294e <scheduleTCB>
    0x8401504c    0x156    ld a2,8(s0)
    0x8401504e    0x158    ld a4,0(s0)
    0x84015050    0x15a    lui a5,0xf8000
    0x84015054    0x15e    srli a5,a5,0x19
    0x84015056    0x160    and a5,a5,a4
    0x84015058    0x162    srli a4,a4,0x26
    0x8401505a    0x164    andi a4,a4,1
    0x8401505c    0x166    beqz a4,ffffffff8401507e <sendIPC+0x188>
    0x8401505e    0x168    li a4,-1
    0x84015060    0x16a    slli a4,a4,0x27
    0x84015062    0x16c    or a5,a5,a4
    0x84015064    0x16e    ld a1,360(s1)
    0x84015068    0x172    mv a4,a5
    0x8401506a    0x174    li a3,0
    0x8401506c    0x176    ld a0,360(a4) # ffffffffe0000168 <ki_end+0x5bfce168>
    0x84015070    0x17a    bltu a0,a1,ffffffff840150aa <sendIPC+0x1b4>
    0x84015074    0x17e    sd s1,408(a4)
    0x84015078    0x182    bnez a3,ffffffff840150b6 <sendIPC+0x1c0>
    0x8401507a    0x184    mv a5,s1
    0x8401507c    0x186    j ffffffff84015088 <sendIPC+0x192>
    0x8401507e    0x188    bnez a5,ffffffff84015064 <sendIPC+0x16e>
    0x84015080    0x18a    mv a2,s1
    0x84015082    0x18c    mv a5,s1
    0x84015084    0x18e    li a3,0
    0x84015086    0x190    li a4,0
    0x84015088    0x192    sd a3,408(s1)
    0x8401508c    0x196    sd a4,416(s1)
    0x84015090    0x19a    ld a4,0(s0)
    0x84015092    0x19c    sd a2,8(s0)
    0x84015094    0x19e    srli a4,a4,0x27
    0x84015096    0x1a0    slli a4,a4,0x27
    0x84015098    0x1a2    lui a3,0xf8000
    0x8401509c    0x1a6    srli a3,a3,0x19
    0x8401509e    0x1a8    and a5,a5,a3
    0x840150a0    0x1aa    or a5,a5,a4
    0x840150a2    0x1ac    ori a5,a5,1
    0x840150a6    0x1b0    sd a5,0(s0)
    0x840150a8    0x1b2    j ffffffff84014fe0 <sendIPC+0xea>
    0x840150aa    0x1b4    ld a0,416(a4)
    0x840150ae    0x1b8    bnez a0,ffffffff840150bc <sendIPC+0x1c6>
    0x840150b0    0x1ba    mv a2,s1
    0x840150b2    0x1bc    mv a3,a4
    0x840150b4    0x1be    mv a4,a0
    0x840150b6    0x1c0    sd s1,416(a3) # fffffffff80001a0 <ki_end+0x73fce1a0>
    0x840150ba    0x1c4    j ffffffff84015088 <sendIPC+0x192>
    0x840150bc    0x1c6    mv a3,a4
    0x840150be    0x1c8    mv a4,a0
    0x840150c0    0x1ca    j ffffffff8401506c <sendIPC+0x176>
    0x840150c2    0x1cc    andi a1,a1,-4
    0x840150c4    0x1ce    sd a1,0(s0)
    0x840150c6    0x1d0    j ffffffff84014f74 <sendIPC+0x7e>
    0x840150c8    0x1d2    mv s5,s0
    0x840150ca    0x1d4    bnez s0,ffffffff84014fa0 <sendIPC+0xaa>
    0x840150ce    0x1d8    bnez s3,ffffffff84014fca <sendIPC+0xd4>
    0x840150d2    0x1dc    ld a5,312(s1)
    0x840150d6    0x1e0    andi a5,a5,15
    0x840150d8    0x1e2    bnez a5,ffffffff84014fca <sendIPC+0xd4>
    0x840150dc    0x1e6    beqz s6,ffffffff84014fd2 <sendIPC+0xdc>
    0x840150e0    0x1ea    ld a5,368(s7)
    0x840150e4    0x1ee    bnez a5,ffffffff84014fd2 <sendIPC+0xdc>
    0x840150e8    0x1f2    mv a1,s7
    0x840150ea    0x1f4    ld a0,368(s1)
    0x840150ee    0x1f8    jal ra,ffffffff840130c2 <schedContext_donate>
    0x840150f2    0x1fc    j ffffffff84014fd2 <sendIPC+0xdc>
    0x840150f4    0x1fe    ld a5,312(s1)
    0x840150f8    0x202    andi a5,a5,15
    0x840150fa    0x204    beqz a5,ffffffff840150dc <sendIPC+0x1e6>
    0x840150fc    0x206    bnez s0,ffffffff84014fc2 <sendIPC+0xcc>
    0x84015100    0x20a    j ffffffff84014fca <sendIPC+0xd4>
    0x84015102    0x20c    mv a3,s6
    0x84015104    0x20e    mv a2,s5
    0x84015106    0x210    mv a1,s7
    0x84015108    0x212    mv a0,s1
    0x8401510a    0x214    jal ra,ffffffff84013112 <reply_push>
    0x8401510e    0x218    j ffffffff84014fd2 <sendIPC+0xdc>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
201 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 303 nodes.

Section sendSignal (287 of 301)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 192 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `sendSignal`:

    0x84014648      0x0    addi sp,sp,-48
    0x8401464a      0x2    sd ra,40(sp)          ; stack access
    0x8401464c      0x4    sd s0,32(sp)          ; stack access
    0x8401464e      0x6    sd s1,24(sp)          ; stack access
    0x84014650      0x8    sd s2,16(sp)          ; stack access
    0x84014652      0xa    mv s0,a0
    0x84014654      0xc    mv s1,a1
    0x84014656      0xe    ld a4,0(a0)
    0x84014658     0x10    andi a5,a4,3
    0x8401465c     0x14    li a3,1
    0x8401465e     0x16    beq a5,a3,ffffffff84014744 <sendSignal+0xfc>
    0x84014662     0x1a    li a3,2
    0x84014664     0x1c    beq a5,a3,ffffffff84014832 <sendSignal+0x1ea>
    0x84014668     0x20    beqz a5,ffffffff84014676 <sendSignal+0x2e>
    0x8401466a     0x22    ld ra,40(sp)          ; stack access
    0x8401466c     0x24    ld s0,32(sp)          ; stack access
    0x8401466e     0x26    ld s1,24(sp)          ; stack access
    0x84014670     0x28    ld s2,16(sp)          ; stack access
    0x84014672     0x2a    addi sp,sp,48
    0x84014674     0x2c    ret
    0x84014676     0x2e    ld a5,24(a0)
    0x84014678     0x30    slli a3,a5,0x19
    0x8401467c     0x34    srli a3,a3,0x19
    0x8401467e     0x36    srli a5,a5,0x26
    0x84014680     0x38    andi a5,a5,1
    0x84014682     0x3a    beqz a5,ffffffff840146a4 <sendSignal+0x5c>
    0x84014684     0x3c    li s2,-1
    0x84014686     0x3e    slli s2,s2,0x27
    0x84014688     0x40    or s2,a3,s2
    0x8401468c     0x44    ld a5,280(s2)
    0x84014690     0x48    andi a5,a5,15
    0x84014692     0x4a    li a3,3
    0x84014694     0x4c    beq a5,a3,ffffffff840146b6 <sendSignal+0x6e>
    0x84014698     0x50    andi a4,a4,-4
    0x8401469a     0x52    ori a4,a4,2
    0x8401469e     0x56    sd a4,0(s0)
    0x840146a0     0x58    sd s1,16(s0)
    0x840146a2     0x5a    j ffffffff8401466a <sendSignal+0x22>
    0x840146a4     0x5c    bnez a3,ffffffff840146b2 <sendSignal+0x6a>
    0x840146a6     0x5e    andi a4,a4,-4
    0x840146a8     0x60    ori a4,a4,2
    0x840146ac     0x64    sd a4,0(a0)
    0x840146ae     0x66    sd a1,16(s0)
    0x840146b0     0x68    j ffffffff8401466a <sendSignal+0x22>
    0x840146b2     0x6a    mv s2,a3
    0x840146b4     0x6c    j ffffffff8401468c <sendSignal+0x44>
    0x840146b6     0x6e    mv a0,s2
    0x840146b8     0x70    jal ra,ffffffff84013542 <cancelIPC>
    0x840146bc     0x74    li a1,1
    0x840146be     0x76    mv a0,s2
    0x840146c0     0x78    jal ra,ffffffff84012996 <setThreadState>
    0x840146c4     0x7c    sd s1,72(s2)
    0x840146c8     0x80    ld a4,368(s2)
    0x840146cc     0x84    beqz a4,ffffffff840146f0 <sendSignal+0xa8>
    0x840146ce     0x86    ld a5,280(s2)
    0x840146d2     0x8a    andi a5,a5,15
    0x840146d4     0x8c    addi a5,a5,-1
    0x840146d6     0x8e    li a3,1
    0x840146d8     0x90    bltu a3,a5,ffffffff8401466a <sendSignal+0x22>
    0x840146dc     0x94    ld a5,64(a4)
    0x840146de     0x96    beqz a5,ffffffff8401466a <sendSignal+0x22>
    0x840146e0     0x98    ld a5,288(s2)
    0x840146e4     0x9c    andi a5,a5,1
    0x840146e6     0x9e    bnez a5,ffffffff8401466a <sendSignal+0x22>
    0x840146e8     0xa0    mv a0,s2
    0x840146ea     0xa2    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x840146ee     0xa6    j ffffffff8401466a <sendSignal+0x22>
    0x840146f0     0xa8    ld a5,32(s0)
    0x840146f2     0xaa    slli a4,a5,0x19
    0x840146f6     0xae    srli a4,a4,0x19
    0x840146f8     0xb0    srli a5,a5,0x26
    0x840146fa     0xb2    andi a5,a5,1
    0x840146fc     0xb4    beqz a5,ffffffff8401473e <sendSignal+0xf6>
    0x840146fe     0xb6    li s0,-1
    0x84014700     0xb8    slli s0,s0,0x27
    0x84014702     0xba    or s0,s0,a4
    0x84014704     0xbc    ld a5,24(s0)
    0x84014706     0xbe    bnez a5,ffffffff8401466a <sendSignal+0x22>
    0x84014708     0xc0    mv a1,s2
    0x8401470a     0xc2    mv a0,s0
    0x8401470c     0xc4    jal ra,ffffffff840130c2 <schedContext_donate>
    0x84014710     0xc8    auipc a5,0x19
    0x84014714     0xcc    ld a5,-1768(a5) # ffffffff8402d028 <ksCurSC>
    0x84014718     0xd0    beq a5,s0,ffffffff84014722 <sendSignal+0xda>
    0x8401471c     0xd4    mv a0,s0
    0x8401471e     0xd6    jal ra,ffffffff840117d6 <refill_unblock_check>
    0x84014722     0xda    mv a0,s0
    0x84014724     0xdc    jal ra,ffffffff84013d0a <schedContext_resume>
    0x84014728     0xe0    ld a5,280(s2)
    0x8401472c     0xe4    andi a5,a5,15
    0x8401472e     0xe6    addi a5,a5,-1
    0x84014730     0xe8    li a4,1
    0x84014732     0xea    bltu a4,a5,ffffffff8401466a <sendSignal+0x22>
    0x84014736     0xee    ld a4,368(s2)
    0x8401473a     0xf2    beqz a4,ffffffff8401466a <sendSignal+0x22>
    0x8401473c     0xf4    j ffffffff840146dc <sendSignal+0x94>
    0x8401473e     0xf6    beqz a4,ffffffff8401466a <sendSignal+0x22>
    0x84014740     0xf8    mv s0,a4
    0x84014742     0xfa    j ffffffff84014704 <sendSignal+0xbc>
    0x84014744     0xfc    ld a5,8(a0)
    0x84014746     0xfe    slli s2,a5,0x19
    0x8401474a    0x102    srli s2,s2,0x19
    0x8401474e    0x106    srli a5,a5,0x26
    0x84014750    0x108    andi a5,a5,1
    0x84014752    0x10a    beqz a5,ffffffff8401475c <sendSignal+0x114>
    0x84014754    0x10c    li a5,-1
    0x84014756    0x10e    slli a5,a5,0x27
    0x84014758    0x110    or s2,s2,a5
    0x8401475c    0x114    srli a2,a4,0x19
    0x84014760    0x118    bgez a4,ffffffff8401476a <sendSignal+0x122>
    0x84014764    0x11c    li a5,-1
    0x84014766    0x11e    slli a5,a5,0x27
    0x84014768    0x120    or a2,a2,a5
    0x8401476a    0x122    mv a1,s2
    0x8401476c    0x124    mv a0,s2
    0x8401476e    0x126    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x84014772    0x12a    sd a0,0(sp)           ; stack access
    0x84014774    0x12c    sd a1,8(sp)           ; stack access
    0x84014776    0x12e    ld a4,8(s0)
    0x84014778    0x130    li a5,-1
    0x8401477a    0x132    slli a3,a5,0x27
    0x8401477e    0x136    and a4,a4,a3
    0x84014780    0x138    srli a5,a5,0x19
    0x84014782    0x13a    and a5,a5,a0
    0x84014784    0x13c    or a5,a5,a4
    0x84014786    0x13e    sd a5,8(s0)
    0x84014788    0x140    ld a5,0(s0)
    0x8401478a    0x142    slli a5,a5,0x27
    0x8401478c    0x144    srli a5,a5,0x27
    0x8401478e    0x146    slli a1,a1,0x19
    0x84014790    0x148    or a5,a5,a1
    0x84014792    0x14a    beqz a0,ffffffff840147d2 <sendSignal+0x18a>
    0x84014794    0x14c    sd a5,0(s0)
    0x84014796    0x14e    li a1,1
    0x84014798    0x150    mv a0,s2
    0x8401479a    0x152    jal ra,ffffffff84012996 <setThreadState>
    0x8401479e    0x156    sd s1,72(s2)
    0x840147a2    0x15a    ld a5,368(s2)
    0x840147a6    0x15e    beqz a5,ffffffff840147d8 <sendSignal+0x190>
    0x840147a8    0x160    ld a5,280(s2)
    0x840147ac    0x164    andi a5,a5,15
    0x840147ae    0x166    addi a5,a5,-1
    0x840147b0    0x168    li a4,1
    0x840147b2    0x16a    bltu a4,a5,ffffffff8401466a <sendSignal+0x22>
    0x840147b6    0x16e    ld a5,368(s2)
    0x840147ba    0x172    ld a5,64(a5)
    0x840147bc    0x174    beqz a5,ffffffff8401466a <sendSignal+0x22>
    0x840147c0    0x178    ld a5,288(s2)
    0x840147c4    0x17c    andi a5,a5,1
    0x840147c6    0x17e    bnez a5,ffffffff8401466a <sendSignal+0x22>
    0x840147ca    0x182    mv a0,s2
    0x840147cc    0x184    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x840147d0    0x188    j ffffffff8401466a <sendSignal+0x22>
    0x840147d2    0x18a    andi a5,a5,-4
    0x840147d4    0x18c    sd a5,0(s0)
    0x840147d6    0x18e    j ffffffff84014796 <sendSignal+0x14e>
    0x840147d8    0x190    ld a5,32(s0)
    0x840147da    0x192    slli a4,a5,0x19
    0x840147de    0x196    srli a4,a4,0x19
    0x840147e0    0x198    srli a5,a5,0x26
    0x840147e2    0x19a    andi a5,a5,1
    0x840147e4    0x19c    beqz a5,ffffffff8401482a <sendSignal+0x1e2>
    0x840147e6    0x19e    li s0,-1
    0x840147e8    0x1a0    slli s0,s0,0x27
    0x840147ea    0x1a2    or s0,s0,a4
    0x840147ec    0x1a4    ld a5,24(s0)
    0x840147ee    0x1a6    bnez a5,ffffffff8401466a <sendSignal+0x22>
    0x840147f2    0x1aa    mv a1,s2
    0x840147f4    0x1ac    mv a0,s0
    0x840147f6    0x1ae    jal ra,ffffffff840130c2 <schedContext_donate>
    0x840147fa    0x1b2    auipc a5,0x19
    0x840147fe    0x1b6    ld a5,-2002(a5) # ffffffff8402d028 <ksCurSC>
    0x84014802    0x1ba    beq a5,s0,ffffffff8401480c <sendSignal+0x1c4>
    0x84014806    0x1be    mv a0,s0
    0x84014808    0x1c0    jal ra,ffffffff840117d6 <refill_unblock_check>
    0x8401480c    0x1c4    mv a0,s0
    0x8401480e    0x1c6    jal ra,ffffffff84013d0a <schedContext_resume>
    0x84014812    0x1ca    ld a5,280(s2)
    0x84014816    0x1ce    andi a5,a5,15
    0x84014818    0x1d0    addi a5,a5,-1
    0x8401481a    0x1d2    li a4,1
    0x8401481c    0x1d4    bltu a4,a5,ffffffff8401466a <sendSignal+0x22>
    0x84014820    0x1d8    ld a5,368(s2)
    0x84014824    0x1dc    beqz a5,ffffffff8401466a <sendSignal+0x22>
    0x84014828    0x1e0    j ffffffff840147ba <sendSignal+0x172>
    0x8401482a    0x1e2    beqz a4,ffffffff8401466a <sendSignal+0x22>
    0x8401482e    0x1e6    mv s0,a4
    0x84014830    0x1e8    j ffffffff840147ec <sendSignal+0x1a4>
    0x84014832    0x1ea    ld a1,16(a0)
    0x84014834    0x1ec    or s1,s1,a1
    0x84014836    0x1ee    sd s1,16(a0)
    0x84014838    0x1f0    j ffffffff8401466a <sendSignal+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
192 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 309 nodes.

Section decodeIRQControlInvocation (288 of 301)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 80 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeIRQControlInvocation`:

    0x84012af0     0x0    addi sp,sp,-80
    0x84012af2     0x2    sd ra,72(sp)          ; stack access
    0x84012af4     0x4    sd s0,64(sp)          ; stack access
    0x84012af6     0x6    sd s1,56(sp)          ; stack access
    0x84012af8     0x8    sd s2,48(sp)          ; stack access
    0x84012afa     0xa    sd s3,40(sp)          ; stack access
    0x84012afc     0xc    sd s4,32(sp)          ; stack access
    0x84012afe     0xe    mv s1,a2
    0x84012b00    0x10    mv s0,a3
    0x84012b02    0x12    li a5,25
    0x84012b04    0x14    bne a0,a5,ffffffff84012bbe <decodeIRQControlInvocation+0xce>
    0x84012b08    0x18    li a5,2
    0x84012b0a    0x1a    bgeu a5,a1,ffffffff84012b6e <decodeIRQControlInvocation+0x7e>
    0x84012b0e    0x1e    auipc s2,0x8
    0x84012b12    0x22    ld s2,1410(s2) # ffffffff8401b090 <current_extra_caps>
    0x84012b16    0x26    beqz s2,ffffffff84012b6e <decodeIRQControlInvocation+0x7e>
    0x84012b1a    0x2a    mv a1,a3
    0x84012b1c    0x2c    li a0,0
    0x84012b1e    0x2e    jal ra,ffffffff84010128 <getSyscallArg>
    0x84012b22    0x32    mv s3,a0
    0x84012b24    0x34    mv a1,s0
    0x84012b26    0x36    li a0,1
    0x84012b28    0x38    jal ra,ffffffff84010128 <getSyscallArg>
    0x84012b2c    0x3c    mv s4,a0
    0x84012b2e    0x3e    mv a1,s0
    0x84012b30    0x40    li a0,2
    0x84012b32    0x42    jal ra,ffffffff84010128 <getSyscallArg>
    0x84012b36    0x46    mv s0,a0
    0x84012b38    0x48    ld a5,0(s2)
    0x84012b3c    0x4c    sd a5,0(sp)           ; stack access
    0x84012b3e    0x4e    ld a5,8(s2)
    0x84012b42    0x52    sd a5,8(sp)           ; stack access
    0x84012b44    0x54    mv a0,s3
    0x84012b46    0x56    jal ra,ffffffff84010c58 <Arch_checkIRQ>
    0x84012b4a    0x5a    bnez a0,ffffffff84012b7a <decodeIRQControlInvocation+0x8a>
    0x84012b4c    0x5c    slli a4,s3,0x3
    0x84012b50    0x60    auipc a5,0x8
    0x84012b54    0x64    addi a5,a5,-848 # ffffffff8401a800 <riscvKSASIDTable>
    0x84012b58    0x68    add a5,a5,a4
    0x84012b5a    0x6a    ld a5,1752(a5)
    0x84012b5e    0x6e    beqz a5,ffffffff84012b8a <decodeIRQControlInvocation+0x9a>
    0x84012b60    0x70    li a5,9
    0x84012b62    0x72    auipc a4,0x8
    0x84012b66    0x76    sd a5,222(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84012b6a    0x7a    li a0,3
    0x84012b6c    0x7c    j ffffffff84012b7a <decodeIRQControlInvocation+0x8a>
    0x84012b6e    0x7e    li a5,7
    0x84012b70    0x80    auipc a4,0x8
    0x84012b74    0x84    sd a5,208(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84012b78    0x88    li a0,3
    0x84012b7a    0x8a    ld ra,72(sp)          ; stack access
    0x84012b7c    0x8c    ld s0,64(sp)          ; stack access
    0x84012b7e    0x8e    ld s1,56(sp)          ; stack access
    0x84012b80    0x90    ld s2,48(sp)          ; stack access
    0x84012b82    0x92    ld s3,40(sp)          ; stack access
    0x84012b84    0x94    ld s4,32(sp)          ; stack access
    0x84012b86    0x96    addi sp,sp,80
    0x84012b88    0x98    ret
    0x84012b8a    0x9a    mv a3,s0
    0x84012b8c    0x9c    mv a2,s4
    0x84012b8e    0x9e    ld a0,0(sp)           ; stack access
    0x84012b90    0xa0    ld a1,8(sp)           ; stack access
    0x84012b92    0xa2    jal ra,ffffffff840113d2 <lookupTargetSlot>
    0x84012b96    0xa6    sd a1,24(sp)          ; stack access
    0x84012b98    0xa8    bnez a0,ffffffff84012b7a <decodeIRQControlInvocation+0x8a>
    0x84012b9a    0xaa    mv s0,a1
    0x84012b9c    0xac    mv a0,a1
    0x84012b9e    0xae    jal ra,ffffffff84011bc8 <ensureEmptySlot>
    0x84012ba2    0xb2    bnez a0,ffffffff84012b7a <decodeIRQControlInvocation+0x8a>
    0x84012ba4    0xb4    li a1,2
    0x84012ba6    0xb6    auipc a0,0x1a
    0x84012baa    0xba    ld a0,1202(a0) # ffffffff8402d058 <ksCurThread>
    0x84012bae    0xbe    jal ra,ffffffff84012996 <setThreadState>
    0x84012bb2    0xc2    mv a2,s1
    0x84012bb4    0xc4    mv a1,s0
    0x84012bb6    0xc6    mv a0,s3
    0x84012bb8    0xc8    jal ra,ffffffff84011ce2 <invokeIRQControl>
    0x84012bbc    0xcc    j ffffffff84012b7a <decodeIRQControlInvocation+0x8a>
    0x84012bbe    0xce    jal ra,ffffffff840129b2 <Arch_decodeIRQControlInvocation>
    0x84012bc2    0xd2    j ffffffff84012b7a <decodeIRQControlInvocation+0x8a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 128 nodes.

Section decodeSetSpace (289 of 301)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 176 instructions.

RVC_FFFFFFFT______FF.

Stack analysis
---------------

67 stack accesses found. Annotated code for `decodeSetSpace`:

    0x84016b10      0x0    addi sp,sp,-304
    0x84016b12      0x2    sd ra,296(sp)         ; stack access
    0x84016b14      0x4    sd s0,288(sp)         ; stack access
    0x84016b16      0x6    sd s1,280(sp)         ; stack access
    0x84016b18      0x8    sd s2,272(sp)         ; stack access
    0x84016b1a      0xa    sd s3,264(sp)         ; stack access
    0x84016b1c      0xc    sd s4,256(sp)         ; stack access
    0x84016b1e      0xe    sd s5,248(sp)         ; stack access
    0x84016b20     0x10    sd s6,240(sp)         ; stack access
    0x84016b22     0x12    sd s7,232(sp)         ; stack access
    0x84016b24     0x14    sd s8,224(sp)         ; stack access
    0x84016b26     0x16    sd s9,216(sp)         ; stack access
    0x84016b28     0x18    sd a0,96(sp)          ; stack access
    0x84016b2a     0x1a    sd a1,104(sp)         ; stack access
    0x84016b2c     0x1c    li a5,1
    0x84016b2e     0x1e    bgeu a5,a2,ffffffff84016c70 <decodeSetSpace+0x160>
    0x84016b32     0x22    mv s2,a3
    0x84016b34     0x24    mv s0,a4
    0x84016b36     0x26    auipc s3,0x4
    0x84016b3a     0x2a    ld s3,1370(s3) # ffffffff8401b090 <current_extra_caps>
    0x84016b3e     0x2e    beqz s3,ffffffff84016c70 <decodeSetSpace+0x160>
    0x84016b42     0x32    auipc s1,0x4
    0x84016b46     0x36    ld s1,1366(s1) # ffffffff8401b098 <current_extra_caps+0x8>
    0x84016b4a     0x3a    beqz s1,ffffffff84016c70 <decodeSetSpace+0x160>
    0x84016b4e     0x3e    auipc s4,0x4
    0x84016b52     0x42    ld s4,1362(s4) # ffffffff8401b0a0 <current_extra_caps+0x10>
    0x84016b56     0x46    beqz s4,ffffffff84016c70 <decodeSetSpace+0x160>
    0x84016b5a     0x4a    mv a1,a4
    0x84016b5c     0x4c    li a0,0
    0x84016b5e     0x4e    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016b62     0x52    mv s5,a0
    0x84016b64     0x54    mv a1,s0
    0x84016b66     0x56    li a0,1
    0x84016b68     0x58    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016b6c     0x5c    mv s6,a0
    0x84016b6e     0x5e    ld a5,0(s3)
    0x84016b72     0x62    sd a5,120(sp)         ; stack access
    0x84016b74     0x64    ld a5,8(s3)
    0x84016b78     0x68    sd a5,128(sp)         ; stack access
    0x84016b7a     0x6a    ld s7,0(s1)
    0x84016b7e     0x6e    sd s7,176(sp)         ; stack access
    0x84016b80     0x70    ld a5,8(s1)
    0x84016b82     0x72    sd a5,184(sp)         ; stack access
    0x84016b84     0x74    mv s8,s7
    0x84016b86     0x76    ld a5,0(s4)
    0x84016b8a     0x7a    sd a5,160(sp)         ; stack access
    0x84016b8c     0x7c    ld a5,8(s4)
    0x84016b90     0x80    sd a5,168(sp)         ; stack access
    0x84016b92     0x82    ld a5,96(sp)          ; stack access
    0x84016b94     0x84    slli s0,a5,0x19
    0x84016b98     0x88    srli s0,s0,0x19
    0x84016b9a     0x8a    srli a5,a5,0x26
    0x84016b9c     0x8c    andi a5,a5,1
    0x84016b9e     0x8e    beqz a5,ffffffff84016ba6 <decodeSetSpace+0x96>
    0x84016ba0     0x90    li a5,-1
    0x84016ba2     0x92    slli a5,a5,0x27
    0x84016ba4     0x94    or s0,s0,a5
    0x84016ba6     0x96    andi s9,s0,-1024
    0x84016baa     0x9a    mv a0,s9
    0x84016bac     0x9c    jal ra,ffffffff840123d8 <slotCapLongRunningDelete>
    0x84016bb0     0xa0    bnez a0,ffffffff84016c96 <decodeSetSpace+0x186>
    0x84016bb4     0xa4    addi a0,s9,32
    0x84016bb8     0xa8    jal ra,ffffffff840123d8 <slotCapLongRunningDelete>
    0x84016bbc     0xac    bnez a0,ffffffff84016c96 <decodeSetSpace+0x186>
    0x84016bbe     0xae    beqz s5,ffffffff84016bd2 <decodeSetSpace+0xc2>
    0x84016bc2     0xb2    mv a2,s7
    0x84016bc4     0xb4    ld a3,184(sp)         ; stack access
    0x84016bc6     0xb6    mv a1,s5
    0x84016bc8     0xb8    li a0,0
    0x84016bca     0xba    jal ra,ffffffff84012412 <updateCapData>
    0x84016bce     0xbe    sd a1,184(sp)         ; stack access
    0x84016bd0     0xc0    mv s8,a0
    0x84016bd2     0xc2    mv a2,s8
    0x84016bd4     0xc4    ld a3,184(sp)         ; stack access
    0x84016bd6     0xc6    mv a1,s1
    0x84016bd8     0xc8    addi a0,sp,136
    0x84016bda     0xca    jal ra,ffffffff840122be <deriveCap>
    0x84016bde     0xce    ld a0,136(sp)         ; stack access
    0x84016be0     0xd0    bnez a0,ffffffff84016c7c <decodeSetSpace+0x16c>
    0x84016be2     0xd2    ld s5,144(sp)         ; stack access
    0x84016be4     0xd4    ld a5,152(sp)         ; stack access
    0x84016be6     0xd6    sd a5,184(sp)         ; stack access
    0x84016be8     0xd8    srli a4,s5,0x3b
    0x84016bec     0xdc    li a5,10
    0x84016bee     0xde    bne a4,a5,ffffffff84016ca4 <decodeSetSpace+0x194>
    0x84016bf2     0xe2    beqz s6,ffffffff84016c06 <decodeSetSpace+0xf6>
    0x84016bf6     0xe6    ld a2,160(sp)         ; stack access
    0x84016bf8     0xe8    ld a3,168(sp)         ; stack access
    0x84016bfa     0xea    mv a1,s6
    0x84016bfc     0xec    li a0,0
    0x84016bfe     0xee    jal ra,ffffffff84012412 <updateCapData>
    0x84016c02     0xf2    sd a0,160(sp)         ; stack access
    0x84016c04     0xf4    sd a1,168(sp)         ; stack access
    0x84016c06     0xf6    ld a2,160(sp)         ; stack access
    0x84016c08     0xf8    ld a3,168(sp)         ; stack access
    0x84016c0a     0xfa    mv a1,s4
    0x84016c0c     0xfc    addi a0,sp,136
    0x84016c0e     0xfe    jal ra,ffffffff840122be <deriveCap>
    0x84016c12    0x102    ld a0,136(sp)         ; stack access
    0x84016c14    0x104    bnez a0,ffffffff84016c7c <decodeSetSpace+0x16c>
    0x84016c16    0x106    ld a0,144(sp)         ; stack access
    0x84016c18    0x108    sd a0,160(sp)         ; stack access
    0x84016c1a    0x10a    ld a1,152(sp)         ; stack access
    0x84016c1c    0x10c    sd a1,168(sp)         ; stack access
    0x84016c1e    0x10e    jal ra,ffffffff84010b26 <isValidVTableRoot>
    0x84016c22    0x112    beqz a0,ffffffff84016cb2 <decodeSetSpace+0x1a2>
    0x84016c24    0x114    ld a0,120(sp)         ; stack access
    0x84016c26    0x116    ld a1,128(sp)         ; stack access
    0x84016c28    0x118    jal ra,ffffffff84010206 <validFaultHandler>
    0x84016c2c    0x11c    beqz a0,ffffffff84016cc0 <decodeSetSpace+0x1b0>
    0x84016c2e    0x11e    li a1,2
    0x84016c30    0x120    auipc a0,0x16
    0x84016c34    0x124    ld a0,1064(a0) # ffffffff8402d058 <ksCurThread>
    0x84016c38    0x128    jal ra,ffffffff84012996 <setThreadState>
    0x84016c3c    0x12c    li a5,6
    0x84016c3e    0x12e    sd a5,80(sp)          ; stack access
    0x84016c40    0x130    sd zero,72(sp)        ; stack access
    0x84016c42    0x132    sd zero,56(sp)        ; stack access
    0x84016c44    0x134    sd zero,64(sp)        ; stack access
    0x84016c46    0x136    sd zero,48(sp)        ; stack access
    0x84016c48    0x138    sd s4,40(sp)          ; stack access
    0x84016c4a    0x13a    ld a5,160(sp)         ; stack access
    0x84016c4c    0x13c    sd a5,24(sp)          ; stack access
    0x84016c4e    0x13e    ld a5,168(sp)         ; stack access
    0x84016c50    0x140    sd a5,32(sp)          ; stack access
    0x84016c52    0x142    sd s1,16(sp)          ; stack access
    0x84016c54    0x144    sd s5,0(sp)           ; stack access
    0x84016c56    0x146    ld a5,184(sp)         ; stack access
    0x84016c58    0x148    sd a5,8(sp)           ; stack access
    0x84016c5a    0x14a    li a7,0
    0x84016c5c    0x14c    li a5,0
    0x84016c5e    0x14e    li a6,0
    0x84016c60    0x150    mv a4,s3
    0x84016c62    0x152    ld a2,120(sp)         ; stack access
    0x84016c64    0x154    ld a3,128(sp)         ; stack access
    0x84016c66    0x156    mv a1,s2
    0x84016c68    0x158    mv a0,s0
    0x84016c6a    0x15a    jal ra,ffffffff840165d8 <invokeTCB_ThreadControlCaps>
    0x84016c6e    0x15e    j ffffffff84016c7c <decodeSetSpace+0x16c>
    0x84016c70    0x160    li a5,7
    0x84016c72    0x162    auipc a4,0x4
    0x84016c76    0x166    sd a5,-50(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016c7a    0x16a    li a0,3
    0x84016c7c    0x16c    ld ra,296(sp)         ; stack access
    0x84016c7e    0x16e    ld s0,288(sp)         ; stack access
    0x84016c80    0x170    ld s1,280(sp)         ; stack access
    0x84016c82    0x172    ld s2,272(sp)         ; stack access
    0x84016c84    0x174    ld s3,264(sp)         ; stack access
    0x84016c86    0x176    ld s4,256(sp)         ; stack access
    0x84016c88    0x178    ld s5,248(sp)         ; stack access
    0x84016c8a    0x17a    ld s6,240(sp)         ; stack access
    0x84016c8c    0x17c    ld s7,232(sp)         ; stack access
    0x84016c8e    0x17e    ld s8,224(sp)         ; stack access
    0x84016c90    0x180    ld s9,216(sp)         ; stack access
    0x84016c92    0x182    addi sp,sp,304
    0x84016c94    0x184    ret
    0x84016c96    0x186    li a5,3
    0x84016c98    0x188    auipc a4,0x4
    0x84016c9c    0x18c    sd a5,-88(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016ca0    0x190    li a0,3
    0x84016ca2    0x192    j ffffffff84016c7c <decodeSetSpace+0x16c>
    0x84016ca4    0x194    li a5,3
    0x84016ca6    0x196    auipc a4,0x4
    0x84016caa    0x19a    sd a5,-102(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016cae    0x19e    li a0,3
    0x84016cb0    0x1a0    j ffffffff84016c7c <decodeSetSpace+0x16c>
    0x84016cb2    0x1a2    li a5,3
    0x84016cb4    0x1a4    auipc a4,0x4
    0x84016cb8    0x1a8    sd a5,-116(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016cbc    0x1ac    li a0,3
    0x84016cbe    0x1ae    j ffffffff84016c7c <decodeSetSpace+0x16c>
    0x84016cc0    0x1b0    li a5,1
    0x84016cc2    0x1b2    auipc a4,0x4
    0x84016cc6    0x1b6    sd a5,-170(a4) # ffffffff8401ac18 <current_syscall_error+0x8>
    0x84016cca    0x1ba    li a0,3
    0x84016ccc    0x1bc    j ffffffff84016c7c <decodeSetSpace+0x16c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
176 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 299 nodes.

Section decodeTCBConfigure (290 of 301)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 192 instructions.


Stack analysis
---------------

73 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x840167da      0x0    addi sp,sp,-304
    0x840167dc      0x2    sd ra,296(sp)         ; stack access
    0x840167de      0x4    sd s0,288(sp)         ; stack access
    0x840167e0      0x6    sd s1,280(sp)         ; stack access
    0x840167e2      0x8    sd s2,272(sp)         ; stack access
    0x840167e4      0xa    sd s3,264(sp)         ; stack access
    0x840167e6      0xc    sd s4,256(sp)         ; stack access
    0x840167e8      0xe    sd s5,248(sp)         ; stack access
    0x840167ea     0x10    sd s6,240(sp)         ; stack access
    0x840167ec     0x12    sd s7,232(sp)         ; stack access
    0x840167ee     0x14    sd s8,224(sp)         ; stack access
    0x840167f0     0x16    sd s9,216(sp)         ; stack access
    0x840167f2     0x18    sd s10,208(sp)        ; stack access
    0x840167f4     0x1a    sd a0,96(sp)          ; stack access
    0x840167f6     0x1c    sd a1,104(sp)         ; stack access
    0x840167f8     0x1e    li a5,2
    0x840167fa     0x20    bgeu a5,a2,ffffffff8401694e <decodeTCBConfigure+0x174>
    0x840167fe     0x24    mv s1,a3
    0x84016800     0x26    mv s0,a4
    0x84016802     0x28    auipc s2,0x5
    0x84016806     0x2c    ld s2,-1906(s2) # ffffffff8401b090 <current_extra_caps>
    0x8401680a     0x30    beqz s2,ffffffff8401694e <decodeTCBConfigure+0x174>
    0x8401680e     0x34    auipc s4,0x5
    0x84016812     0x38    ld s4,-1910(s4) # ffffffff8401b098 <current_extra_caps+0x8>
    0x84016816     0x3c    beqz s4,ffffffff8401694e <decodeTCBConfigure+0x174>
    0x8401681a     0x40    auipc s3,0x5
    0x8401681e     0x44    ld s3,-1914(s3) # ffffffff8401b0a0 <current_extra_caps+0x10>
    0x84016822     0x48    beqz s3,ffffffff8401694e <decodeTCBConfigure+0x174>
    0x84016826     0x4c    mv a1,a4
    0x84016828     0x4e    li a0,0
    0x8401682a     0x50    jal ra,ffffffff84010128 <getSyscallArg>
    0x8401682e     0x54    mv s5,a0
    0x84016830     0x56    mv a1,s0
    0x84016832     0x58    li a0,1
    0x84016834     0x5a    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016838     0x5e    mv s6,a0
    0x8401683a     0x60    mv a1,s0
    0x8401683c     0x62    li a0,2
    0x8401683e     0x64    jal ra,ffffffff84010128 <getSyscallArg>
    0x84016842     0x68    mv s0,a0
    0x84016844     0x6a    ld s7,0(s2)
    0x84016848     0x6e    sd s7,160(sp)         ; stack access
    0x8401684a     0x70    ld a5,8(s2)
    0x8401684e     0x74    sd a5,168(sp)         ; stack access
    0x84016850     0x76    mv s8,s7
    0x84016852     0x78    ld a5,0(s4)
    0x84016856     0x7c    sd a5,144(sp)         ; stack access
    0x84016858     0x7e    ld a5,8(s4)
    0x8401685c     0x82    sd a5,152(sp)         ; stack access
    0x8401685e     0x84    ld a5,0(s3)
    0x84016862     0x88    sd a5,176(sp)         ; stack access
    0x84016864     0x8a    ld a5,8(s3)
    0x84016868     0x8e    sd a5,184(sp)         ; stack access
    0x8401686a     0x90    bnez a0,ffffffff84016976 <decodeTCBConfigure+0x19c>
    0x8401686e     0x94    li s3,0
    0x84016870     0x96    ld a5,96(sp)          ; stack access
    0x84016872     0x98    slli s9,a5,0x19
    0x84016876     0x9c    srli s9,s9,0x19
    0x8401687a     0xa0    srli a5,a5,0x26
    0x8401687c     0xa2    andi a5,a5,1
    0x8401687e     0xa4    beqz a5,ffffffff84016888 <decodeTCBConfigure+0xae>
    0x84016880     0xa6    li a5,-1
    0x84016882     0xa8    slli a5,a5,0x27
    0x84016884     0xaa    or s9,s9,a5
    0x84016888     0xae    andi s10,s9,-1024
    0x8401688c     0xb2    mv a0,s10
    0x8401688e     0xb4    jal ra,ffffffff840123d8 <slotCapLongRunningDelete>
    0x84016892     0xb8    bnez a0,ffffffff8401699a <decodeTCBConfigure+0x1c0>
    0x84016896     0xbc    addi a0,s10,32
    0x8401689a     0xc0    jal ra,ffffffff840123d8 <slotCapLongRunningDelete>
    0x8401689e     0xc4    bnez a0,ffffffff8401699a <decodeTCBConfigure+0x1c0>
    0x840168a2     0xc8    beqz s5,ffffffff840168b6 <decodeTCBConfigure+0xdc>
    0x840168a6     0xcc    mv a2,s7
    0x840168a8     0xce    ld a3,168(sp)         ; stack access
    0x840168aa     0xd0    mv a1,s5
    0x840168ac     0xd2    li a0,0
    0x840168ae     0xd4    jal ra,ffffffff84012412 <updateCapData>
    0x840168b2     0xd8    sd a1,168(sp)         ; stack access
    0x840168b4     0xda    mv s8,a0
    0x840168b6     0xdc    mv a2,s8
    0x840168b8     0xde    ld a3,168(sp)         ; stack access
    0x840168ba     0xe0    mv a1,s2
    0x840168bc     0xe2    addi a0,sp,120
    0x840168be     0xe4    jal ra,ffffffff840122be <deriveCap>
    0x840168c2     0xe8    ld a0,120(sp)         ; stack access
    0x840168c4     0xea    bnez a0,ffffffff8401695a <decodeTCBConfigure+0x180>
    0x840168c6     0xec    ld s5,128(sp)         ; stack access
    0x840168c8     0xee    ld a5,136(sp)         ; stack access
    0x840168ca     0xf0    sd a5,168(sp)         ; stack access
    0x840168cc     0xf2    srli a4,s5,0x3b
    0x840168d0     0xf6    li a5,10
    0x840168d2     0xf8    bne a4,a5,ffffffff840169a8 <decodeTCBConfigure+0x1ce>
    0x840168d6     0xfc    beqz s6,ffffffff840168ea <decodeTCBConfigure+0x110>
    0x840168da    0x100    ld a2,144(sp)         ; stack access
    0x840168dc    0x102    ld a3,152(sp)         ; stack access
    0x840168de    0x104    mv a1,s6
    0x840168e0    0x106    li a0,0
    0x840168e2    0x108    jal ra,ffffffff84012412 <updateCapData>
    0x840168e6    0x10c    sd a0,144(sp)         ; stack access
    0x840168e8    0x10e    sd a1,152(sp)         ; stack access
    0x840168ea    0x110    ld a2,144(sp)         ; stack access
    0x840168ec    0x112    ld a3,152(sp)         ; stack access
    0x840168ee    0x114    mv a1,s4
    0x840168f0    0x116    addi a0,sp,120
    0x840168f2    0x118    jal ra,ffffffff840122be <deriveCap>
    0x840168f6    0x11c    ld a0,120(sp)         ; stack access
    0x840168f8    0x11e    bnez a0,ffffffff8401695a <decodeTCBConfigure+0x180>
    0x840168fa    0x120    ld a0,128(sp)         ; stack access
    0x840168fc    0x122    sd a0,144(sp)         ; stack access
    0x840168fe    0x124    ld a1,136(sp)         ; stack access
    0x84016900    0x126    sd a1,152(sp)         ; stack access
    0x84016902    0x128    jal ra,ffffffff84010b26 <isValidVTableRoot>
    0x84016906    0x12c    beqz a0,ffffffff840169b6 <decodeTCBConfigure+0x1dc>
    0x84016908    0x12e    li a1,2
    0x8401690a    0x130    auipc a0,0x16
    0x8401690e    0x134    ld a0,1870(a0) # ffffffff8402d058 <ksCurThread>
    0x84016912    0x138    jal ra,ffffffff84012996 <setThreadState>
    0x84016916    0x13c    li a5,3
    0x84016918    0x13e    sd a5,80(sp)          ; stack access
    0x8401691a    0x140    sd s3,72(sp)          ; stack access
    0x8401691c    0x142    ld a5,176(sp)         ; stack access
    0x8401691e    0x144    sd a5,56(sp)          ; stack access
    0x84016920    0x146    ld a5,184(sp)         ; stack access
    0x84016922    0x148    sd a5,64(sp)          ; stack access
    0x84016924    0x14a    sd s0,48(sp)          ; stack access
    0x84016926    0x14c    sd s4,40(sp)          ; stack access
    0x84016928    0x14e    ld a5,144(sp)         ; stack access
    0x8401692a    0x150    sd a5,24(sp)          ; stack access
    0x8401692c    0x152    ld a5,152(sp)         ; stack access
    0x8401692e    0x154    sd a5,32(sp)          ; stack access
    0x84016930    0x156    sd s2,16(sp)          ; stack access
    0x84016932    0x158    sd s5,0(sp)           ; stack access
    0x84016934    0x15a    ld a5,168(sp)         ; stack access
    0x84016936    0x15c    sd a5,8(sp)           ; stack access
    0x84016938    0x15e    li a7,0
    0x8401693a    0x160    li a5,0
    0x8401693c    0x162    li a6,0
    0x8401693e    0x164    li a4,0
    0x84016940    0x166    li a2,0
    0x84016942    0x168    li a3,0
    0x84016944    0x16a    mv a1,s1
    0x84016946    0x16c    mv a0,s9
    0x84016948    0x16e    jal ra,ffffffff840165d8 <invokeTCB_ThreadControlCaps>
    0x8401694c    0x172    j ffffffff8401695a <decodeTCBConfigure+0x180>
    0x8401694e    0x174    li a5,7
    0x84016950    0x176    auipc a4,0x4
    0x84016954    0x17a    sd a5,752(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84016958    0x17e    li a0,3
    0x8401695a    0x180    ld ra,296(sp)         ; stack access
    0x8401695c    0x182    ld s0,288(sp)         ; stack access
    0x8401695e    0x184    ld s1,280(sp)         ; stack access
    0x84016960    0x186    ld s2,272(sp)         ; stack access
    0x84016962    0x188    ld s3,264(sp)         ; stack access
    0x84016964    0x18a    ld s4,256(sp)         ; stack access
    0x84016966    0x18c    ld s5,248(sp)         ; stack access
    0x84016968    0x18e    ld s6,240(sp)         ; stack access
    0x8401696a    0x190    ld s7,232(sp)         ; stack access
    0x8401696c    0x192    ld s8,224(sp)         ; stack access
    0x8401696e    0x194    ld s9,216(sp)         ; stack access
    0x84016970    0x196    ld s10,208(sp)        ; stack access
    0x84016972    0x198    addi sp,sp,304
    0x84016974    0x19a    ret
    0x84016976    0x19c    ld a2,176(sp)         ; stack access
    0x84016978    0x19e    mv a3,a5
    0x8401697a    0x1a0    mv a1,s3
    0x8401697c    0x1a2    addi a0,sp,120
    0x8401697e    0x1a4    jal ra,ffffffff840122be <deriveCap>
    0x84016982    0x1a8    ld a0,120(sp)         ; stack access
    0x84016984    0x1aa    bnez a0,ffffffff8401695a <decodeTCBConfigure+0x180>
    0x84016986    0x1ac    ld a1,128(sp)         ; stack access
    0x84016988    0x1ae    sd a1,176(sp)         ; stack access
    0x8401698a    0x1b0    ld a2,136(sp)         ; stack access
    0x8401698c    0x1b2    sd a2,184(sp)         ; stack access
    0x8401698e    0x1b4    mv a0,s0
    0x84016990    0x1b6    jal ra,ffffffff84010b3c <checkValidIPCBuffer>
    0x84016994    0x1ba    beqz a0,ffffffff84016870 <decodeTCBConfigure+0x96>
    0x84016998    0x1be    j ffffffff8401695a <decodeTCBConfigure+0x180>
    0x8401699a    0x1c0    li a5,3
    0x8401699c    0x1c2    auipc a4,0x4
    0x840169a0    0x1c6    sd a5,676(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840169a4    0x1ca    li a0,3
    0x840169a6    0x1cc    j ffffffff8401695a <decodeTCBConfigure+0x180>
    0x840169a8    0x1ce    li a5,3
    0x840169aa    0x1d0    auipc a4,0x4
    0x840169ae    0x1d4    sd a5,662(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840169b2    0x1d8    li a0,3
    0x840169b4    0x1da    j ffffffff8401695a <decodeTCBConfigure+0x180>
    0x840169b6    0x1dc    li a5,3
    0x840169b8    0x1de    auipc a4,0x4
    0x840169bc    0x1e2    sd a5,648(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840169c0    0x1e6    li a0,3
    0x840169c2    0x1e8    j ffffffff8401695a <decodeTCBConfigure+0x180>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
192 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 326 nodes.

Section receiveIPC (291 of 301)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 236 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `receiveIPC`:

    0x84016096      0x0    addi sp,sp,-112
    0x84016098      0x2    sd ra,104(sp)         ; stack access
    0x8401609a      0x4    sd s0,96(sp)          ; stack access
    0x8401609c      0x6    sd s1,88(sp)          ; stack access
    0x8401609e      0x8    sd s2,80(sp)          ; stack access
    0x840160a0      0xa    sd s3,72(sp)          ; stack access
    0x840160a2      0xc    sd s4,64(sp)          ; stack access
    0x840160a4      0xe    sd s5,56(sp)          ; stack access
    0x840160a6     0x10    mv s0,a0
    0x840160a8     0x12    sd a1,16(sp)          ; stack access
    0x840160aa     0x14    sd a2,24(sp)          ; stack access
    0x840160ac     0x16    mv s3,a3
    0x840160ae     0x18    sd a4,0(sp)           ; stack access
    0x840160b0     0x1a    sd a5,8(sp)           ; stack access
    0x840160b2     0x1c    slli s1,a1,0x19
    0x840160b6     0x20    srli s1,s1,0x19
    0x840160b8     0x22    srli a1,a1,0x26
    0x840160ba     0x24    andi a1,a1,1
    0x840160bc     0x26    beqz a1,ffffffff840160c4 <receiveIPC+0x2e>
    0x840160be     0x28    li a5,-1
    0x840160c0     0x2a    slli a5,a5,0x27
    0x840160c2     0x2c    or s1,s1,a5
    0x840160c4     0x2e    mv s2,s1
    0x840160c6     0x30    ld a5,0(sp)           ; stack access
    0x840160c8     0x32    srli a5,a5,0x3b
    0x840160ca     0x34    li a4,8
    0x840160cc     0x36    li s4,0
    0x840160ce     0x38    beq a5,a4,ffffffff8401610c <receiveIPC+0x76>
    0x840160d2     0x3c    ld a0,304(s0)
    0x840160d6     0x40    beqz a0,ffffffff84016170 <receiveIPC+0xda>
    0x840160d8     0x42    ld a5,0(a0)
    0x840160da     0x44    andi a5,a5,3
    0x840160dc     0x46    li a4,2
    0x840160de     0x48    beq a5,a4,ffffffff8401611e <receiveIPC+0x88>
    0x840160e2     0x4c    bnez s3,ffffffff84016126 <receiveIPC+0x90>
    0x840160e6     0x50    ld a5,0(s2) # fffffffff8000000 <ki_end+0x73fce000>
    0x840160ea     0x54    andi a3,a5,3
    0x840160ee     0x58    li a4,1
    0x840160f0     0x5a    beq a3,a4,ffffffff84016252 <receiveIPC+0x1bc>
    0x840160f4     0x5e    andi a5,a5,1
    0x840160f6     0x60    beqz a5,ffffffff8401624c <receiveIPC+0x1b6>
    0x840160fa     0x64    ld ra,104(sp)         ; stack access
    0x840160fc     0x66    ld s0,96(sp)          ; stack access
    0x840160fe     0x68    ld s1,88(sp)          ; stack access
    0x84016100     0x6a    ld s2,80(sp)          ; stack access
    0x84016102     0x6c    ld s3,72(sp)          ; stack access
    0x84016104     0x6e    ld s4,64(sp)          ; stack access
    0x84016106     0x70    ld s5,56(sp)          ; stack access
    0x84016108     0x72    addi sp,sp,112
    0x8401610a     0x74    ret
    0x8401610c     0x76    ld s4,8(sp)           ; stack access
    0x8401610e     0x78    ld a0,0(s4)
    0x84016112     0x7c    beqz a0,ffffffff840160d2 <receiveIPC+0x3c>
    0x84016114     0x7e    beq a0,s0,ffffffff840160d2 <receiveIPC+0x3c>
    0x84016118     0x82    jal ra,ffffffff84013542 <cancelIPC>
    0x8401611c     0x86    j ffffffff840160d2 <receiveIPC+0x3c>
    0x8401611e     0x88    mv a1,s0
    0x84016120     0x8a    jal ra,ffffffff8401445a <completeSignal>
    0x84016124     0x8e    j ffffffff840160fa <receiveIPC+0x64>
    0x84016126     0x90    ld a5,32(a0)
    0x84016128     0x92    slli a4,a5,0x19
    0x8401612c     0x96    srli a4,a4,0x19
    0x8401612e     0x98    srli a5,a5,0x26
    0x84016130     0x9a    andi a5,a5,1
    0x84016132     0x9c    beqz a5,ffffffff8401613a <receiveIPC+0xa4>
    0x84016134     0x9e    li a5,-1
    0x84016136     0xa0    slli a5,a5,0x27
    0x84016138     0xa2    or a4,a4,a5
    0x8401613a     0xa4    ld a5,368(s0)
    0x8401613e     0xa8    beq a5,a4,ffffffff84016156 <receiveIPC+0xc0>
    0x84016142     0xac    ld a5,0(s2)
    0x84016146     0xb0    andi a3,a5,3
    0x8401614a     0xb4    li a4,1
    0x8401614c     0xb6    beq a3,a4,ffffffff84016252 <receiveIPC+0x1bc>
    0x84016150     0xba    andi a5,a5,1
    0x84016152     0xbc    bnez a5,ffffffff840160fa <receiveIPC+0x64>
    0x84016154     0xbe    j ffffffff84016186 <receiveIPC+0xf0>
    0x84016156     0xc0    sd zero,368(s0)
    0x8401615a     0xc4    sd zero,24(a4)
    0x8401615e     0xc8    auipc a5,0x17
    0x84016162     0xcc    ld a5,-262(a5) # ffffffff8402d058 <ksCurThread>
    0x84016166     0xd0    bne s0,a5,ffffffff84016142 <receiveIPC+0xac>
    0x8401616a     0xd4    jal ra,ffffffff840128fc <rescheduleRequired>
    0x8401616e     0xd8    j ffffffff84016142 <receiveIPC+0xac>
    0x84016170     0xda    ld a5,0(s2)
    0x84016174     0xde    andi a3,a5,3
    0x84016178     0xe2    li a4,1
    0x8401617a     0xe4    beq a3,a4,ffffffff84016252 <receiveIPC+0x1bc>
    0x8401617e     0xe8    andi a5,a5,1
    0x84016180     0xea    bnez a5,ffffffff840160fa <receiveIPC+0x64>
    0x84016182     0xec    beqz s3,ffffffff8401624c <receiveIPC+0x1b6>
    0x84016186     0xf0    ld a5,280(s0)
    0x8401618a     0xf4    li a4,-1
    0x8401618c     0xf6    slli a3,a4,0x27
    0x84016190     0xfa    and a5,a5,a3
    0x84016192     0xfc    lui a3,0xe0000
    0x84016196    0x100    srli a2,a3,0x19
    0x8401619a    0x104    and s1,s1,a2
    0x8401619c    0x106    or s1,s1,a5
    0x8401619e    0x108    ori s1,s1,3
    0x840161a2    0x10c    sd s1,280(s0)
    0x840161a6    0x110    ld a5,288(s0)
    0x840161aa    0x114    slli a4,a4,0x28
    0x840161ac    0x116    addi a4,a4,31
    0x840161ae    0x118    and a4,a4,a5
    0x840161b0    0x11a    slli a5,s4,0x1
    0x840161b4    0x11e    srli a3,a3,0x18
    0x840161b6    0x120    and a5,a5,a3
    0x840161b8    0x122    or a4,a4,a5
    0x840161ba    0x124    sd a4,288(s0)
    0x840161be    0x128    beqz s4,ffffffff840161c6 <receiveIPC+0x130>
    0x840161c2    0x12c    sd s0,0(s4)
    0x840161c6    0x130    mv a0,s0
    0x840161c8    0x132    jal ra,ffffffff8401294e <scheduleTCB>
    0x840161cc    0x136    ld a2,8(s2)
    0x840161d0    0x13a    ld a4,0(s2)
    0x840161d4    0x13e    lui a5,0xf8000
    0x840161d8    0x142    srli a5,a5,0x19
    0x840161da    0x144    and a5,a5,a4
    0x840161dc    0x146    srli a4,a4,0x26
    0x840161de    0x148    andi a4,a4,1
    0x840161e0    0x14a    beqz a4,ffffffff84016202 <receiveIPC+0x16c>
    0x840161e2    0x14c    li a4,-1
    0x840161e4    0x14e    slli a4,a4,0x27
    0x840161e6    0x150    or a5,a5,a4
    0x840161e8    0x152    ld a1,360(s0)
    0x840161ec    0x156    mv a4,a5
    0x840161ee    0x158    li a3,0
    0x840161f0    0x15a    ld a0,360(a4)
    0x840161f4    0x15e    bltu a0,a1,ffffffff84016234 <receiveIPC+0x19e>
    0x840161f8    0x162    sd s0,408(a4)
    0x840161fc    0x166    bnez a3,ffffffff84016240 <receiveIPC+0x1aa>
    0x840161fe    0x168    mv a5,s0
    0x84016200    0x16a    j ffffffff8401620c <receiveIPC+0x176>
    0x84016202    0x16c    bnez a5,ffffffff840161e8 <receiveIPC+0x152>
    0x84016204    0x16e    mv a2,s0
    0x84016206    0x170    mv a5,s0
    0x84016208    0x172    li a4,0
    0x8401620a    0x174    li a3,0
    0x8401620c    0x176    sd a3,408(s0)
    0x84016210    0x17a    sd a4,416(s0)
    0x84016214    0x17e    ld a4,0(s2)
    0x84016218    0x182    sd a2,8(s2)
    0x8401621c    0x186    srli a4,a4,0x27
    0x8401621e    0x188    slli a4,a4,0x27
    0x84016220    0x18a    lui a3,0xf8000
    0x84016224    0x18e    srli a3,a3,0x19
    0x84016226    0x190    and a5,a5,a3
    0x84016228    0x192    or a5,a5,a4
    0x8401622a    0x194    ori a5,a5,2
    0x8401622e    0x198    sd a5,0(s2)
    0x84016232    0x19c    j ffffffff840160fa <receiveIPC+0x64>
    0x84016234    0x19e    ld a0,416(a4)
    0x84016238    0x1a2    bnez a0,ffffffff84016246 <receiveIPC+0x1b0>
    0x8401623a    0x1a4    mv a2,s0
    0x8401623c    0x1a6    mv a3,a4
    0x8401623e    0x1a8    mv a4,a0
    0x84016240    0x1aa    sd s0,416(a3) # fffffffff80001a0 <ki_end+0x73fce1a0>
    0x84016244    0x1ae    j ffffffff8401620c <receiveIPC+0x176>
    0x84016246    0x1b0    mv a3,a4
    0x84016248    0x1b2    mv a4,a0
    0x8401624a    0x1b4    j ffffffff840161f0 <receiveIPC+0x15a>
    0x8401624c    0x1b6    sd zero,72(s0)
    0x84016250    0x1ba    j ffffffff840160fa <receiveIPC+0x64>
    0x84016252    0x1bc    ld s1,8(s2)
    0x84016256    0x1c0    lui a2,0xf8000
    0x8401625a    0x1c4    srli a2,a2,0x19
    0x8401625c    0x1c6    and a2,a2,a5
    0x8401625e    0x1c8    srli a5,a5,0x26
    0x84016260    0x1ca    andi a5,a5,1
    0x84016262    0x1cc    beqz a5,ffffffff8401626a <receiveIPC+0x1d4>
    0x84016264    0x1ce    li a5,-1
    0x84016266    0x1d0    slli a5,a5,0x27
    0x84016268    0x1d2    or a2,a2,a5
    0x8401626a    0x1d4    mv a1,s1
    0x8401626c    0x1d6    mv a0,s1
    0x8401626e    0x1d8    jal ra,ffffffff840132f0 <tcbEPDequeue>
    0x84016272    0x1dc    sd a0,32(sp)          ; stack access
    0x84016274    0x1de    sd a1,40(sp)          ; stack access
    0x84016276    0x1e0    sd a0,8(s2)
    0x8401627a    0x1e4    ld a5,0(s2)
    0x8401627e    0x1e8    li a4,-1
    0x84016280    0x1ea    slli a4,a4,0x27
    0x84016282    0x1ec    addi a4,a4,3
    0x84016284    0x1ee    and a5,a5,a4
    0x84016286    0x1f0    lui a4,0xf8000
    0x8401628a    0x1f4    srli a4,a4,0x19
    0x8401628c    0x1f6    and a1,a1,a4
    0x8401628e    0x1f8    or a1,a1,a5
    0x84016290    0x1fa    beqz a0,ffffffff840162f2 <receiveIPC+0x25c>
    0x84016292    0x1fc    sd a1,0(s2)
    0x84016296    0x200    ld a5,288(s1)
    0x8401629a    0x204    srli s5,a5,0x4
    0x8401629e    0x208    srli s3,a5,0x3
    0x840162a2    0x20c    mv a4,s0
    0x840162a4    0x20e    andi a3,s5,1
    0x840162a8    0x212    ld a2,296(s1)
    0x840162ac    0x216    mv a1,s2
    0x840162ae    0x218    mv a0,s1
    0x840162b0    0x21a    jal ra,ffffffff84014e90 <doIPCTransfer>
    0x840162b4    0x21e    ld a5,288(s1)
    0x840162b8    0x222    srli a5,a5,0x2
    0x840162ba    0x224    andi a5,a5,1
    0x840162bc    0x226    bnez a5,ffffffff840162c6 <receiveIPC+0x230>
    0x840162be    0x228    ld a5,312(s1)
    0x840162c2    0x22c    andi a5,a5,15
    0x840162c4    0x22e    beqz a5,ffffffff84016304 <receiveIPC+0x26e>
    0x840162c6    0x230    or a5,s3,s5
    0x840162ca    0x234    andi a5,a5,1
    0x840162cc    0x236    beqz a5,ffffffff840162fa <receiveIPC+0x264>
    0x840162ce    0x238    beqz s4,ffffffff840162fa <receiveIPC+0x264>
    0x840162d2    0x23c    ld a5,368(s1)
    0x840162d6    0x240    li a3,0
    0x840162d8    0x242    beqz a5,ffffffff840162e6 <receiveIPC+0x250>
    0x840162da    0x244    ld a3,312(s1)
    0x840162de    0x248    andi a3,a3,15
    0x840162e0    0x24a    addi a3,a3,-5
    0x840162e2    0x24c    snez a3,a3
    0x840162e6    0x250    mv a2,s4
    0x840162e8    0x252    mv a1,s0
    0x840162ea    0x254    mv a0,s1
    0x840162ec    0x256    jal ra,ffffffff84013112 <reply_push>
    0x840162f0    0x25a    j ffffffff840160fa <receiveIPC+0x64>
    0x840162f2    0x25c    andi a1,a1,-4
    0x840162f4    0x25e    sd a1,0(s2)
    0x840162f8    0x262    j ffffffff84016296 <receiveIPC+0x200>
    0x840162fa    0x264    li a1,0
    0x840162fc    0x266    mv a0,s1
    0x840162fe    0x268    jal ra,ffffffff84012996 <setThreadState>
    0x84016302    0x26c    j ffffffff840160fa <receiveIPC+0x64>
    0x84016304    0x26e    li a1,1
    0x84016306    0x270    mv a0,s1
    0x84016308    0x272    jal ra,ffffffff84012996 <setThreadState>
    0x8401630c    0x276    mv a0,s1
    0x8401630e    0x278    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x84016312    0x27c    j ffffffff840160fa <receiveIPC+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
236 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 369 nodes.

Section schedule (292 of 301)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 174 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedule`:

    0x840149e0      0x0    addi sp,sp,-48
    0x840149e2      0x2    sd ra,40(sp)          ; stack access
    0x840149e4      0x4    sd s0,32(sp)          ; stack access
    0x840149e6      0x6    sd s1,24(sp)          ; stack access
    0x840149e8      0x8    sd s2,16(sp)          ; stack access
    0x840149ea      0xa    sd s3,8(sp)           ; stack access
    0x840149ec      0xc    sd s4,0(sp)           ; stack access
    0x840149ee      0xe    jal ra,ffffffff8401497a <awaken>
    0x840149f2     0x12    auipc a5,0x18
    0x840149f6     0x16    ld a5,1622(a5) # ffffffff8402d048 <ksSchedulerAction>
    0x840149fa     0x1a    beqz a5,ffffffff84014ae8 <schedule+0x108>
    0x840149fe     0x1e    auipc a0,0x18
    0x84014a02     0x22    ld a0,1626(a0) # ffffffff8402d058 <ksCurThread>
    0x84014a06     0x26    ld a5,280(a0)
    0x84014a0a     0x2a    andi a5,a5,15
    0x84014a0c     0x2c    addi a5,a5,-1
    0x84014a0e     0x2e    li a4,1
    0x84014a10     0x30    li s1,0
    0x84014a12     0x32    bgeu a4,a5,ffffffff84014ab0 <schedule+0xd0>
    0x84014a16     0x36    auipc s0,0x18
    0x84014a1a     0x3a    ld s0,1586(s0) # ffffffff8402d048 <ksSchedulerAction>
    0x84014a1e     0x3e    li a5,1
    0x84014a20     0x40    beq s0,a5,ffffffff84014ace <schedule+0xee>
    0x84014a24     0x44    auipc s4,0x18
    0x84014a28     0x48    ld s4,1588(s4) # ffffffff8402d058 <ksCurThread>
    0x84014a2c     0x4c    auipc a5,0x18
    0x84014a30     0x50    ld a5,1572(a5) # ffffffff8402d050 <ksIdleThread>
    0x84014a34     0x54    beq s4,a5,ffffffff84014a44 <schedule+0x64>
    0x84014a38     0x58    ld a4,360(s0)
    0x84014a3c     0x5c    ld a5,360(s4)
    0x84014a40     0x60    bgeu a4,a5,ffffffff84014ad4 <schedule+0xf4>
    0x84014a44     0x64    auipc s2,0x18
    0x84014a48     0x68    ld s2,1492(s2) # ffffffff8402d018 <ksCurDomain>
    0x84014a4c     0x6c    slli a4,s2,0x3
    0x84014a50     0x70    auipc a5,0x6
    0x84014a54     0x74    addi a5,a5,-592 # ffffffff8401a800 <riscvKSASIDTable>
    0x84014a58     0x78    add a5,a5,a4
    0x84014a5a     0x7a    ld a0,1096(a5)
    0x84014a5e     0x7e    beqz a0,ffffffff84014ad4 <schedule+0xf4>
    0x84014a60     0x80    jal ra,ffffffff840100cc <clzl>
    0x84014a64     0x84    mv s3,a0
    0x84014a66     0x86    slli s2,s2,0x2
    0x84014a68     0x88    addi a5,a0,-60
    0x84014a6c     0x8c    add s2,s2,a5
    0x84014a6e     0x8e    slli s2,s2,0x3
    0x84014a70     0x90    auipc a5,0x6
    0x84014a74     0x94    addi a5,a5,-624 # ffffffff8401a800 <riscvKSASIDTable>
    0x84014a78     0x98    add s2,s2,a5
    0x84014a7a     0x9a    ld a0,1224(s2)
    0x84014a7e     0x9e    jal ra,ffffffff840100cc <clzl>
    0x84014a82     0xa2    li a5,63
    0x84014a86     0xa6    sub s3,a5,s3
    0x84014a8a     0xaa    slli s3,s3,0x6
    0x84014a8c     0xac    sub a5,a5,a0
    0x84014a8e     0xae    or s3,s3,a5
    0x84014a92     0xb2    ld a5,360(s0)
    0x84014a96     0xb6    bgeu a5,s3,ffffffff84014ad4 <schedule+0xf4>
    0x84014a9a     0xba    mv a0,s0
    0x84014a9c     0xbc    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84014aa0     0xc0    li a5,1
    0x84014aa2     0xc2    auipc a4,0x18
    0x84014aa6     0xc6    sd a5,1446(a4) # ffffffff8402d048 <ksSchedulerAction>
    0x84014aaa     0xca    jal ra,ffffffff84012fea <scheduleChooseNewThread>
    0x84014aae     0xce    j ffffffff84014ae8 <schedule+0x108>
    0x84014ab0     0xd0    ld a5,368(a0)
    0x84014ab4     0xd4    beqz a5,ffffffff84014a16 <schedule+0x36>
    0x84014ab6     0xd6    ld s1,64(a5)
    0x84014ab8     0xd8    beqz s1,ffffffff84014a16 <schedule+0x36>
    0x84014aba     0xda    ld a5,288(a0)
    0x84014abe     0xde    andi a5,a5,1
    0x84014ac0     0xe0    bnez a5,ffffffff84014aca <schedule+0xea>
    0x84014ac2     0xe2    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84014ac6     0xe6    li s1,1
    0x84014ac8     0xe8    j ffffffff84014a16 <schedule+0x36>
    0x84014aca     0xea    li s1,0
    0x84014acc     0xec    j ffffffff84014a16 <schedule+0x36>
    0x84014ace     0xee    jal ra,ffffffff84012fea <scheduleChooseNewThread>
    0x84014ad2     0xf2    j ffffffff84014ae8 <schedule+0x108>
    0x84014ad4     0xf4    beqz s1,ffffffff84014ae2 <schedule+0x102>
    0x84014ad6     0xf6    ld a4,360(s0)
    0x84014ada     0xfa    ld a5,360(s4)
    0x84014ade     0xfe    beq a4,a5,ffffffff84014b40 <schedule+0x160>
    0x84014ae2    0x102    mv a0,s0
    0x84014ae4    0x104    jal ra,ffffffff84012f4c <switchToThread>
    0x84014ae8    0x108    auipc a5,0x18
    0x84014aec    0x10c    sd zero,1376(a5) # ffffffff8402d048 <ksSchedulerAction>
    0x84014af0    0x110    auipc a5,0x18
    0x84014af4    0x114    ld a5,1384(a5) # ffffffff8402d058 <ksCurThread>
    0x84014af8    0x118    ld a0,368(a5)
    0x84014afc    0x11c    auipc a5,0x18
    0x84014b00    0x120    ld a5,1324(a5) # ffffffff8402d028 <ksCurSC>
    0x84014b04    0x124    bne a0,a5,ffffffff84014b56 <schedule+0x176>
    0x84014b08    0x128    auipc a5,0x18
    0x84014b0c    0x12c    ld a5,1328(a5) # ffffffff8402d038 <ksReprogram>
    0x84014b10    0x130    bnez a5,ffffffff84014b76 <schedule+0x196>
    0x84014b12    0x132    auipc a5,0x18
    0x84014b16    0x136    ld a5,1350(a5) # ffffffff8402d058 <ksCurThread>
    0x84014b1a    0x13a    ld a5,368(a5)
    0x84014b1e    0x13e    auipc a4,0x18
    0x84014b22    0x142    sd a5,1290(a4) # ffffffff8402d028 <ksCurSC>
    0x84014b26    0x146    auipc a5,0x18
    0x84014b2a    0x14a    ld a5,1298(a5) # ffffffff8402d038 <ksReprogram>
    0x84014b2e    0x14e    bnez a5,ffffffff84014be6 <schedule+0x206>
    0x84014b30    0x150    ld ra,40(sp)          ; stack access
    0x84014b32    0x152    ld s0,32(sp)          ; stack access
    0x84014b34    0x154    ld s1,24(sp)          ; stack access
    0x84014b36    0x156    ld s2,16(sp)          ; stack access
    0x84014b38    0x158    ld s3,8(sp)           ; stack access
    0x84014b3a    0x15a    ld s4,0(sp)           ; stack access
    0x84014b3c    0x15c    addi sp,sp,48
    0x84014b3e    0x15e    ret
    0x84014b40    0x160    mv a0,s0
    0x84014b42    0x162    jal ra,ffffffff84012dd4 <tcbSchedAppend>
    0x84014b46    0x166    li a5,1
    0x84014b48    0x168    auipc a4,0x18
    0x84014b4c    0x16c    sd a5,1280(a4) # ffffffff8402d048 <ksSchedulerAction>
    0x84014b50    0x170    jal ra,ffffffff84012fea <scheduleChooseNewThread>
    0x84014b54    0x174    j ffffffff84014ae8 <schedule+0x108>
    0x84014b56    0x176    ld a5,64(a5)
    0x84014b58    0x178    bnez a5,ffffffff84014b66 <schedule+0x186>
    0x84014b5a    0x17a    auipc a5,0x18
    0x84014b5e    0x17e    ld a5,1246(a5) # ffffffff8402d038 <ksReprogram>
    0x84014b62    0x182    beqz a5,ffffffff84014b12 <schedule+0x132>
    0x84014b64    0x184    j ffffffff84014bc2 <schedule+0x1e2>
    0x84014b66    0x186    li a5,1
    0x84014b68    0x188    auipc a4,0x18
    0x84014b6c    0x18c    sd a5,1232(a4) # ffffffff8402d038 <ksReprogram>
    0x84014b70    0x190    jal ra,ffffffff840117d6 <refill_unblock_check>
    0x84014b74    0x194    j ffffffff84014b08 <schedule+0x128>
    0x84014b76    0x196    auipc a5,0x18
    0x84014b7a    0x19a    ld a5,1202(a5) # ffffffff8402d028 <ksCurSC>
    0x84014b7e    0x19e    ld a4,64(a5)
    0x84014b80    0x1a0    beqz a4,ffffffff84014bc2 <schedule+0x1e2>
    0x84014b82    0x1a2    auipc a0,0x18
    0x84014b86    0x1a6    ld a0,1214(a0) # ffffffff8402d040 <ksConsumed>
    0x84014b8a    0x1aa    beqz a0,ffffffff84014bac <schedule+0x1cc>
    0x84014b8c    0x1ac    ld a4,0(a5)
    0x84014b8e    0x1ae    bnez a4,ffffffff84014be0 <schedule+0x200>
    0x84014b90    0x1b0    addi a2,a5,88
    0x84014b94    0x1b4    ld a4,72(a5)
    0x84014b96    0x1b6    slli a4,a4,0x4
    0x84014b98    0x1b8    add a4,a4,a2
    0x84014b9a    0x1ba    ld a3,8(a4)
    0x84014b9c    0x1bc    sub a3,a3,a0
    0x84014b9e    0x1be    sd a3,8(a4)
    0x84014ba0    0x1c0    ld a5,80(a5)
    0x84014ba2    0x1c2    slli a5,a5,0x4
    0x84014ba4    0x1c4    add a5,a5,a2
    0x84014ba6    0x1c6    ld a4,8(a5)
    0x84014ba8    0x1c8    add a0,a0,a4
    0x84014baa    0x1ca    sd a0,8(a5)
    0x84014bac    0x1cc    auipc a4,0x18
    0x84014bb0    0x1d0    ld a4,1148(a4) # ffffffff8402d028 <ksCurSC>
    0x84014bb4    0x1d4    ld a5,8(a4)
    0x84014bb6    0x1d6    auipc a3,0x18
    0x84014bba    0x1da    ld a3,1162(a3) # ffffffff8402d040 <ksConsumed>
    0x84014bbe    0x1de    add a5,a5,a3
    0x84014bc0    0x1e0    sd a5,8(a4)
    0x84014bc2    0x1e2    auipc a3,0x18
    0x84014bc6    0x1e6    addi a3,a3,1102 # ffffffff8402d010 <ksDomainTime>
    0x84014bca    0x1ea    auipc a4,0x18
    0x84014bce    0x1ee    addi a4,a4,1142 # ffffffff8402d040 <ksConsumed>
    0x84014bd2    0x1f2    ld a5,0(a3)
    0x84014bd4    0x1f4    ld a2,0(a4)
    0x84014bd6    0x1f6    sub a5,a5,a2
    0x84014bd8    0x1f8    sd a5,0(a3)
    0x84014bda    0x1fa    sd zero,0(a4)
    0x84014bde    0x1fe    j ffffffff84014b12 <schedule+0x132>
    0x84014be0    0x200    jal ra,ffffffff840114ec <refill_split_check>
    0x84014be4    0x204    j ffffffff84014bac <schedule+0x1cc>
    0x84014be6    0x206    jal ra,ffffffff8401187c <setNextInterrupt>
    0x84014bea    0x20a    auipc a5,0x18
    0x84014bee    0x20e    sd zero,1102(a5) # ffffffff8402d038 <ksReprogram>
    0x84014bf2    0x212    j ffffffff84014b30 <schedule+0x150>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
174 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 290 nodes.

Section decodeSchedControlInvocation (293 of 301)
=================================================

Deriving specifications
-----------------------

Section `decodeSchedControlInvocation` consists of 241 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `decodeSchedControlInvocation`:

    0x840141b2      0x0    addi sp,sp,-80
    0x840141b4      0x2    sd ra,72(sp)          ; stack access
    0x840141b6      0x4    sd s0,64(sp)          ; stack access
    0x840141b8      0x6    sd s1,56(sp)          ; stack access
    0x840141ba      0x8    sd s2,48(sp)          ; stack access
    0x840141bc      0xa    sd s3,40(sp)          ; stack access
    0x840141be      0xc    sd s4,32(sp)          ; stack access
    0x840141c0      0xe    sd s5,24(sp)          ; stack access
    0x840141c2     0x10    sd a1,0(sp)           ; stack access
    0x840141c4     0x12    sd a2,8(sp)           ; stack access
    0x840141c6     0x14    li a5,30
    0x840141c8     0x16    beq a0,a5,ffffffff840141ea <decodeSchedControlInvocation+0x38>
    0x840141cc     0x1a    li a5,3
    0x840141ce     0x1c    auipc a4,0x7
    0x840141d2     0x20    sd a5,-1422(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840141d6     0x24    li a0,3
    0x840141d8     0x26    ld ra,72(sp)          ; stack access
    0x840141da     0x28    ld s0,64(sp)          ; stack access
    0x840141dc     0x2a    ld s1,56(sp)          ; stack access
    0x840141de     0x2c    ld s2,48(sp)          ; stack access
    0x840141e0     0x2e    ld s3,40(sp)          ; stack access
    0x840141e2     0x30    ld s4,32(sp)          ; stack access
    0x840141e4     0x32    ld s5,24(sp)          ; stack access
    0x840141e6     0x34    addi sp,sp,80
    0x840141e8     0x36    ret
    0x840141ea     0x38    mv s0,a4
    0x840141ec     0x3a    auipc s1,0x7
    0x840141f0     0x3e    ld s1,-348(s1) # ffffffff8401b090 <current_extra_caps>
    0x840141f4     0x42    beqz s1,ffffffff84014314 <decodeSchedControlInvocation+0x162>
    0x840141f8     0x46    li a5,3
    0x840141fa     0x48    bgeu a5,a3,ffffffff84014322 <decodeSchedControlInvocation+0x170>
    0x840141fe     0x4c    ld a5,0(s1)
    0x84014200     0x4e    srli a5,a5,0x3b
    0x84014202     0x50    li a4,22
    0x84014204     0x52    bne a5,a4,ffffffff84014330 <decodeSchedControlInvocation+0x17e>
    0x84014208     0x56    mv a1,s0
    0x8401420a     0x58    li a0,0
    0x8401420c     0x5a    jal ra,ffffffff84010128 <getSyscallArg>
    0x84014210     0x5e    mv s2,a0
    0x84014212     0x60    addi a4,a0,-20
    0x84014216     0x64    lui a5,0x6b49d
    0x8401421a     0x68    slli a5,a5,0x1
    0x8401421c     0x6a    addi a5,a5,1004 # 6b49d3ec <KERNEL_OFFSET-0xfffffffe94b62c14>
    0x84014220     0x6e    bltu a5,a4,ffffffff84014348 <decodeSchedControlInvocation+0x196>
    0x84014224     0x72    mv a1,s0
    0x84014226     0x74    li a0,1
    0x84014228     0x76    jal ra,ffffffff84010128 <getSyscallArg>
    0x8401422c     0x7a    mv s3,a0
    0x8401422e     0x7c    addi a4,a0,-20
    0x84014232     0x80    lui a5,0x6b49d
    0x84014236     0x84    slli a5,a5,0x1
    0x84014238     0x86    addi a5,a5,1004 # 6b49d3ec <KERNEL_OFFSET-0xfffffffe94b62c14>
    0x8401423c     0x8a    bltu a5,a4,ffffffff8401436e <decodeSchedControlInvocation+0x1bc>
    0x84014240     0x8e    bltu a0,s2,ffffffff84014394 <decodeSchedControlInvocation+0x1e2>
    0x84014244     0x92    mv a1,s0
    0x84014246     0x94    li a0,2
    0x84014248     0x96    jal ra,ffffffff84010128 <getSyscallArg>
    0x8401424c     0x9a    ld s1,8(s1)
    0x8401424e     0x9c    addi s4,a0,2
    0x84014252     0xa0    srli a4,s1,0xa
    0x84014256     0xa4    li a5,1
    0x84014258     0xa6    sll a5,a5,a4
    0x8401425c     0xaa    addi a5,a5,-88
    0x84014260     0xae    srli a5,a5,0x4
    0x84014262     0xb0    bltu a5,s4,ffffffff840143b0 <decodeSchedControlInvocation+0x1fe>
    0x84014266     0xb4    mv a1,s0
    0x84014268     0xb6    li a0,3
    0x8401426a     0xb8    jal ra,ffffffff84010128 <getSyscallArg>
    0x8401426e     0xbc    mv s5,a0
    0x84014270     0xbe    li a1,2
    0x84014272     0xc0    auipc a0,0x19
    0x84014276     0xc4    ld a0,-538(a0) # ffffffff8402d058 <ksCurThread>
    0x8401427a     0xc8    jal ra,ffffffff84012996 <setThreadState>
    0x8401427e     0xcc    srli s1,s1,0x10
    0x84014280     0xce    slli s0,s1,0x19
    0x84014284     0xd2    srli s0,s0,0x19
    0x84014286     0xd4    srli s1,s1,0x26
    0x84014288     0xd6    andi s1,s1,1
    0x8401428a     0xd8    beqz s1,ffffffff84014292 <decodeSchedControlInvocation+0xe0>
    0x8401428c     0xda    li a5,-1
    0x8401428e     0xdc    slli a5,a5,0x27
    0x84014290     0xde    or s0,s0,a5
    0x84014292     0xe0    mv s1,s0
    0x84014294     0xe2    sd s5,48(s0)
    0x84014298     0xe6    ld a0,24(s0)
    0x8401429a     0xe8    beqz a0,ffffffff840142b2 <decodeSchedControlInvocation+0x100>
    0x8401429c     0xea    jal ra,ffffffff84013794 <tcbReleaseRemove>
    0x840142a0     0xee    ld a0,24(s0)
    0x840142a2     0xf0    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x840142a6     0xf4    auipc a5,0x19
    0x840142aa     0xf8    ld a5,-638(a5) # ffffffff8402d028 <ksCurSC>
    0x840142ae     0xfc    beq s0,a5,ffffffff840143cc <decodeSchedControlInvocation+0x21a>
    0x840142b2    0x100    beq s2,s3,ffffffff84014434 <decodeSchedControlInvocation+0x282>
    0x840142b6    0x104    ld a5,64(s1)
    0x840142b8    0x106    beqz a5,ffffffff840142cc <decodeSchedControlInvocation+0x11a>
    0x840142ba    0x108    ld a5,24(s1)
    0x840142bc    0x10a    beqz a5,ffffffff840142cc <decodeSchedControlInvocation+0x11a>
    0x840142be    0x10c    ld a5,280(a5)
    0x840142c2    0x110    andi a5,a5,15
    0x840142c4    0x112    addi a5,a5,-1
    0x840142c6    0x114    li a4,1
    0x840142c8    0x116    bgeu a4,a5,ffffffff8401443a <decodeSchedControlInvocation+0x288>
    0x840142cc    0x11a    mv a3,s3
    0x840142ce    0x11c    mv a2,s2
    0x840142d0    0x11e    mv a1,s4
    0x840142d2    0x120    mv a0,s1
    0x840142d4    0x122    jal ra,ffffffff84011406 <refill_new>
    0x840142d8    0x126    ld a5,24(s1)
    0x840142da    0x128    li a0,0
    0x840142dc    0x12a    beqz a5,ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x840142e0    0x12e    ld a0,64(s1)
    0x840142e2    0x130    beqz a0,ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x840142e6    0x134    mv a0,s1
    0x840142e8    0x136    jal ra,ffffffff84013d0a <schedContext_resume>
    0x840142ec    0x13a    ld a0,24(s1)
    0x840142ee    0x13c    ld a5,280(a0)
    0x840142f2    0x140    andi a5,a5,15
    0x840142f4    0x142    addi a5,a5,-1
    0x840142f6    0x144    li a4,1
    0x840142f8    0x146    bgeu a4,a5,ffffffff84014448 <decodeSchedControlInvocation+0x296>
    0x840142fc    0x14a    ld a4,24(s1)
    0x840142fe    0x14c    auipc a5,0x19
    0x84014302    0x150    ld a5,-678(a5) # ffffffff8402d058 <ksCurThread>
    0x84014306    0x154    li a0,0
    0x84014308    0x156    bne a4,a5,ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x8401430c    0x15a    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84014310    0x15e    li a0,0
    0x84014312    0x160    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x84014314    0x162    li a5,7
    0x84014316    0x164    auipc a4,0x7
    0x8401431a    0x168    sd a5,-1750(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401431e    0x16c    li a0,3
    0x84014320    0x16e    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x84014322    0x170    li a5,7
    0x84014324    0x172    auipc a4,0x7
    0x84014328    0x176    sd a5,-1764(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401432c    0x17a    li a0,3
    0x8401432e    0x17c    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x84014330    0x17e    auipc a5,0x6
    0x84014334    0x182    addi a5,a5,1232 # ffffffff8401a800 <riscvKSASIDTable>
    0x84014338    0x186    li a4,2
    0x8401433a    0x188    sd a4,1088(a5)
    0x8401433e    0x18c    li a4,1
    0x84014340    0x18e    sd a4,1048(a5)
    0x84014344    0x192    li a0,3
    0x84014346    0x194    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x84014348    0x196    auipc a4,0x6
    0x8401434c    0x19a    addi a4,a4,1208 # ffffffff8401a800 <riscvKSASIDTable>
    0x84014350    0x19e    li a5,4
    0x84014352    0x1a0    sd a5,1088(a4)
    0x84014356    0x1a4    li a5,20
    0x84014358    0x1a6    sd a5,1056(a4)
    0x8401435c    0x1aa    lui a5,0x6b49d
    0x84014360    0x1ae    slli a5,a5,0x1
    0x84014362    0x1b0    addi a5,a5,1024 # 6b49d400 <KERNEL_OFFSET-0xfffffffe94b62c00>
    0x84014366    0x1b4    sd a5,1064(a4)
    0x8401436a    0x1b8    li a0,3
    0x8401436c    0x1ba    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x8401436e    0x1bc    auipc a4,0x6
    0x84014372    0x1c0    addi a4,a4,1170 # ffffffff8401a800 <riscvKSASIDTable>
    0x84014376    0x1c4    li a5,4
    0x84014378    0x1c6    sd a5,1088(a4)
    0x8401437c    0x1ca    li a5,20
    0x8401437e    0x1cc    sd a5,1056(a4)
    0x84014382    0x1d0    lui a5,0x6b49d
    0x84014386    0x1d4    slli a5,a5,0x1
    0x84014388    0x1d6    addi a5,a5,1024 # 6b49d400 <KERNEL_OFFSET-0xfffffffe94b62c00>
    0x8401438c    0x1da    sd a5,1064(a4)
    0x84014390    0x1de    li a0,3
    0x84014392    0x1e0    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x84014394    0x1e2    auipc a5,0x6
    0x84014398    0x1e6    addi a5,a5,1132 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401439c    0x1ea    li a4,4
    0x8401439e    0x1ec    sd a4,1088(a5)
    0x840143a2    0x1f0    li a4,20
    0x840143a4    0x1f2    sd a4,1056(a5)
    0x840143a8    0x1f6    sd a0,1064(a5)
    0x840143ac    0x1fa    li a0,3
    0x840143ae    0x1fc    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x840143b0    0x1fe    auipc a4,0x6
    0x840143b4    0x202    addi a4,a4,1104 # ffffffff8401a800 <riscvKSASIDTable>
    0x840143b8    0x206    li a3,4
    0x840143ba    0x208    sd a3,1088(a4)
    0x840143be    0x20c    sd zero,1056(a4)
    0x840143c2    0x210    addi a5,a5,-2
    0x840143c4    0x212    sd a5,1064(a4)
    0x840143c8    0x216    li a0,3
    0x840143ca    0x218    j ffffffff840141d8 <decodeSchedControlInvocation+0x26>
    0x840143cc    0x21a    ld a4,64(a5)
    0x840143ce    0x21c    beqz a4,ffffffff84014410 <decodeSchedControlInvocation+0x25e>
    0x840143d0    0x21e    auipc a0,0x19
    0x840143d4    0x222    ld a0,-912(a0) # ffffffff8402d040 <ksConsumed>
    0x840143d8    0x226    beqz a0,ffffffff840143fa <decodeSchedControlInvocation+0x248>
    0x840143da    0x228    ld a4,0(a5)
    0x840143dc    0x22a    bnez a4,ffffffff8401442e <decodeSchedControlInvocation+0x27c>
    0x840143de    0x22c    addi a2,a5,88
    0x840143e2    0x230    ld a4,72(a5)
    0x840143e4    0x232    slli a4,a4,0x4
    0x840143e6    0x234    add a4,a4,a2
    0x840143e8    0x236    ld a3,8(a4)
    0x840143ea    0x238    sub a3,a3,a0
    0x840143ec    0x23a    sd a3,8(a4)
    0x840143ee    0x23c    ld a5,80(a5)
    0x840143f0    0x23e    slli a5,a5,0x4
    0x840143f2    0x240    add a5,a5,a2
    0x840143f4    0x242    ld a4,8(a5)
    0x840143f6    0x244    add a4,a4,a0
    0x840143f8    0x246    sd a4,8(a5)
    0x840143fa    0x248    auipc a4,0x19
    0x840143fe    0x24c    ld a4,-978(a4) # ffffffff8402d028 <ksCurSC>
    0x84014402    0x250    ld a5,8(a4)
    0x84014404    0x252    auipc a3,0x19
    0x84014408    0x256    ld a3,-964(a3) # ffffffff8402d040 <ksConsumed>
    0x8401440c    0x25a    add a5,a5,a3
    0x8401440e    0x25c    sd a5,8(a4)
    0x84014410    0x25e    auipc a3,0x19
    0x84014414    0x262    addi a3,a3,-1024 # ffffffff8402d010 <ksDomainTime>
    0x84014418    0x266    auipc a4,0x19
    0x8401441c    0x26a    addi a4,a4,-984 # ffffffff8402d040 <ksConsumed>
    0x84014420    0x26e    ld a5,0(a3)
    0x84014422    0x270    ld a2,0(a4)
    0x84014424    0x272    sub a5,a5,a2
    0x84014426    0x274    sd a5,0(a3)
    0x84014428    0x276    sd zero,0(a4)
    0x8401442c    0x27a    j ffffffff840142b2 <decodeSchedControlInvocation+0x100>
    0x8401442e    0x27c    jal ra,ffffffff840114ec <refill_split_check>
    0x84014432    0x280    j ffffffff840143fa <decodeSchedControlInvocation+0x248>
    0x84014434    0x282    li s4,2
    0x84014436    0x284    li s3,0
    0x84014438    0x286    j ffffffff840142b6 <decodeSchedControlInvocation+0x104>
    0x8401443a    0x288    mv a3,s4
    0x8401443c    0x28a    mv a2,s2
    0x8401443e    0x28c    mv a1,s3
    0x84014440    0x28e    mv a0,s1
    0x84014442    0x290    jal ra,ffffffff84011452 <refill_update>
    0x84014446    0x294    j ffffffff840142d8 <decodeSchedControlInvocation+0x126>
    0x84014448    0x296    auipc a5,0x19
    0x8401444c    0x29a    ld a5,-1008(a5) # ffffffff8402d058 <ksCurThread>
    0x84014450    0x29e    beq a0,a5,ffffffff8401430c <decodeSchedControlInvocation+0x15a>
    0x84014454    0x2a2    jal ra,ffffffff84012c6e <possibleSwitchTo>
    0x84014458    0x2a6    j ffffffff840142fc <decodeSchedControlInvocation+0x14a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
241 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSchedControlInvocation` has 369 nodes.

Section handleSyscall (294 of 301)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 271 instructions.

Skipping c01026f3 rdtime a3
Switch found.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleSyscall`:

    0x84018d76      0x0    addi sp,sp,-16
    0x84018d78      0x2    sd ra,8(sp)           ; stack access
    0x84018d7a      0x4    sd s0,0(sp)           ; stack access
    0x84018d7c      0x6    auipc a5,0x14
    0x84018d80      0xa    addi a5,a5,692 # ffffffff8402d030 <ksCurTime>
    0x84018d84      0xe    ld a2,0(a5)
    0x84018d86     0x10    rdtime a3
    0x84018d8a     0x14    sd a3,0(a5)
    0x84018d8c     0x16    auipc a5,0x14
    0x84018d90     0x1a    addi a5,a5,692 # ffffffff8402d040 <ksConsumed>
    0x84018d94     0x1e    ld a4,0(a5)
    0x84018d96     0x20    sub a4,a4,a2
    0x84018d98     0x22    add a4,a4,a3
    0x84018d9a     0x24    sd a4,0(a5)
    0x84018d9c     0x26    auipc a3,0x14
    0x84018da0     0x2a    ld a3,652(a3) # ffffffff8402d028 <ksCurSC>
    0x84018da4     0x2e    ld a2,72(a3)
    0x84018da6     0x30    slli a5,a2,0x4
    0x84018daa     0x34    add a5,a5,a3
    0x84018dac     0x36    ld a6,96(a5)
    0x84018db0     0x3a    bltu a6,a4,ffffffff84018e04 <handleSyscall+0x8e>
    0x84018db4     0x3e    sub a5,a6,a4
    0x84018db8     0x42    li a1,19
    0x84018dba     0x44    bgeu a1,a5,ffffffff84018e04 <handleSyscall+0x8e>
    0x84018dbe     0x48    ld a5,0(a3)
    0x84018dc0     0x4a    bnez a5,ffffffff84018dee <handleSyscall+0x78>
    0x84018dc2     0x4c    addi a5,a4,20
    0x84018dc6     0x50    auipc a2,0x14
    0x84018dca     0x54    ld a2,586(a2) # ffffffff8402d010 <ksDomainTime>
    0x84018dce     0x58    bltu a2,a5,ffffffff84018e40 <handleSyscall+0xca>
    0x84018dd2     0x5c    addi a5,a0,11
    0x84018dd6     0x60    li a2,10
    0x84018dd8     0x62    bltu a2,a5,ffffffff8401909e <handleSyscall+0x328>
    0x84018ddc     0x66    slli a5,a5,0x2
    0x84018dde     0x68    auipc a2,0x1
    0x84018de2     0x6c    addi a2,a2,142 # ffffffff84019e6c <msgRegisters+0x424>
    0x84018de6     0x70    add a5,a5,a2
    0x84018de8     0x72    lw a5,0(a5)
    0x84018dea     0x74    add a5,a5,a2
    0x84018dec     0x76    jr a5
    0x84018dee     0x78    ld a5,80(a3)
    0x84018df0     0x7a    bgeu a5,a2,ffffffff84018e38 <handleSyscall+0xc2>
    0x84018df4     0x7e    ld a1,64(a3)
    0x84018df6     0x80    add a5,a5,a1
    0x84018df8     0x82    addi a5,a5,1
    0x84018dfa     0x84    sub a2,a5,a2
    0x84018dfe     0x88    ld a5,64(a3)
    0x84018e00     0x8a    bne a5,a2,ffffffff84018dc2 <handleSyscall+0x4c>
    0x84018e04     0x8e    li a3,1
    0x84018e06     0x90    li a2,0
    0x84018e08     0x92    li a1,1
    0x84018e0a     0x94    mv a0,a4
    0x84018e0c     0x96    jal ra,ffffffff8401523c <chargeBudget>
    0x84018e10     0x9a    auipc a0,0x14
    0x84018e14     0x9e    ld a0,584(a0) # ffffffff8402d058 <ksCurThread>
    0x84018e18     0xa2    ld a5,280(a0)
    0x84018e1c     0xa6    andi a5,a5,15
    0x84018e1e     0xa8    addi a5,a5,-1
    0x84018e20     0xaa    li a4,1
    0x84018e22     0xac    bgeu a4,a5,ffffffff84018e50 <handleSyscall+0xda>
    0x84018e26     0xb0    jal ra,ffffffff840149e0 <schedule>
    0x84018e2a     0xb4    jal ra,ffffffff84012aa0 <activateThread>
    0x84018e2e     0xb8    li a0,0
    0x84018e30     0xba    ld ra,8(sp)           ; stack access
    0x84018e32     0xbc    ld s0,0(sp)           ; stack access
    0x84018e34     0xbe    addi sp,sp,16
    0x84018e36     0xc0    ret
    0x84018e38     0xc2    addi a5,a5,1
    0x84018e3a     0xc4    sub a2,a5,a2
    0x84018e3e     0xc8    j ffffffff84018dfe <handleSyscall+0x88>
    0x84018e40     0xca    li a5,1
    0x84018e42     0xcc    auipc a4,0x14
    0x84018e46     0xd0    sd a5,502(a4) # ffffffff8402d038 <ksReprogram>
    0x84018e4a     0xd4    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84018e4e     0xd8    j ffffffff84018e10 <handleSyscall+0x9a>
    0x84018e50     0xda    li a1,2
    0x84018e52     0xdc    jal ra,ffffffff84012996 <setThreadState>
    0x84018e56     0xe0    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018e58     0xe2    auipc a5,0x14
    0x84018e5c     0xe6    ld a5,512(a5) # ffffffff8402d058 <ksCurThread>
    0x84018e60     0xea    ld a4,72(a5)
    0x84018e62     0xec    li a3,0
    0x84018e64     0xee    li a2,0
    0x84018e66     0xf0    li a1,1
    0x84018e68     0xf2    li a0,0
    0x84018e6a     0xf4    jal ra,ffffffff84018c50 <handleInvocation>
    0x84018e6e     0xf8    beqz a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84018e70     0xfa    auipc a5,0x14
    0x84018e74     0xfe    lw a5,512(a5) # ffffffff8402d070 <active_irq>
    0x84018e78    0x102    addiw a3,a5,-1
    0x84018e7c    0x106    li a4,53
    0x84018e80    0x10a    bltu a4,a3,ffffffff84018e98 <handleSyscall+0x122>
    0x84018e84    0x10e    slli s0,a5,0x20
    0x84018e88    0x112    srli s0,s0,0x20
    0x84018e8a    0x114    mv a0,s0
    0x84018e8c    0x116    jal ra,ffffffff840152e0 <mcsIRQ>
    0x84018e90    0x11a    mv a0,s0
    0x84018e92    0x11c    jal ra,ffffffff8401483a <handleInterrupt>
    0x84018e96    0x120    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018e98    0x122    jal ra,ffffffff840101e2 <getNewActiveIRQ>
    0x84018e9c    0x126    sext.w a5,a0
    0x84018ea0    0x12a    auipc a4,0x14
    0x84018ea4    0x12e    sw a0,464(a4) # ffffffff8402d070 <active_irq>
    0x84018ea8    0x132    addiw a0,a0,-1
    0x84018eaa    0x134    li a4,53
    0x84018eae    0x138    bltu a4,a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84018eb2    0x13c    j ffffffff84018e84 <handleSyscall+0x10e>
    0x84018eb4    0x13e    auipc a5,0x14
    0x84018eb8    0x142    ld a5,420(a5) # ffffffff8402d058 <ksCurThread>
    0x84018ebc    0x146    ld a4,72(a5)
    0x84018ebe    0x148    li a3,0
    0x84018ec0    0x14a    li a2,0
    0x84018ec2    0x14c    li a1,0
    0x84018ec4    0x14e    li a0,0
    0x84018ec6    0x150    jal ra,ffffffff84018c50 <handleInvocation>
    0x84018eca    0x154    beqz a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84018ecc    0x156    auipc a5,0x14
    0x84018ed0    0x15a    lw a5,420(a5) # ffffffff8402d070 <active_irq>
    0x84018ed4    0x15e    addiw a3,a5,-1
    0x84018ed8    0x162    li a4,53
    0x84018edc    0x166    bltu a4,a3,ffffffff84018ef4 <handleSyscall+0x17e>
    0x84018ee0    0x16a    slli s0,a5,0x20
    0x84018ee4    0x16e    srli s0,s0,0x20
    0x84018ee6    0x170    mv a0,s0
    0x84018ee8    0x172    jal ra,ffffffff840152e0 <mcsIRQ>
    0x84018eec    0x176    mv a0,s0
    0x84018eee    0x178    jal ra,ffffffff8401483a <handleInterrupt>
    0x84018ef2    0x17c    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018ef4    0x17e    jal ra,ffffffff840101e2 <getNewActiveIRQ>
    0x84018ef8    0x182    sext.w a5,a0
    0x84018efc    0x186    auipc a4,0x14
    0x84018f00    0x18a    sw a0,372(a4) # ffffffff8402d070 <active_irq>
    0x84018f04    0x18e    addiw a0,a0,-1
    0x84018f06    0x190    li a4,53
    0x84018f0a    0x194    bltu a4,a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84018f0e    0x198    j ffffffff84018ee0 <handleSyscall+0x16a>
    0x84018f10    0x19a    auipc a5,0x14
    0x84018f14    0x19e    ld a5,328(a5) # ffffffff8402d058 <ksCurThread>
    0x84018f18    0x1a2    ld a4,72(a5)
    0x84018f1a    0x1a4    li a3,0
    0x84018f1c    0x1a6    li a2,1
    0x84018f1e    0x1a8    li a1,1
    0x84018f20    0x1aa    li a0,1
    0x84018f22    0x1ac    jal ra,ffffffff84018c50 <handleInvocation>
    0x84018f26    0x1b0    beqz a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84018f2a    0x1b4    auipc a5,0x14
    0x84018f2e    0x1b8    lw a5,326(a5) # ffffffff8402d070 <active_irq>
    0x84018f32    0x1bc    addiw a3,a5,-1
    0x84018f36    0x1c0    li a4,53
    0x84018f3a    0x1c4    bltu a4,a3,ffffffff84018f52 <handleSyscall+0x1dc>
    0x84018f3e    0x1c8    slli s0,a5,0x20
    0x84018f42    0x1cc    srli s0,s0,0x20
    0x84018f44    0x1ce    mv a0,s0
    0x84018f46    0x1d0    jal ra,ffffffff840152e0 <mcsIRQ>
    0x84018f4a    0x1d4    mv a0,s0
    0x84018f4c    0x1d6    jal ra,ffffffff8401483a <handleInterrupt>
    0x84018f50    0x1da    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018f52    0x1dc    jal ra,ffffffff840101e2 <getNewActiveIRQ>
    0x84018f56    0x1e0    sext.w a5,a0
    0x84018f5a    0x1e4    auipc a4,0x14
    0x84018f5e    0x1e8    sw a0,278(a4) # ffffffff8402d070 <active_irq>
    0x84018f62    0x1ec    addiw a0,a0,-1
    0x84018f64    0x1ee    li a4,53
    0x84018f68    0x1f2    bltu a4,a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84018f6c    0x1f6    j ffffffff84018f3e <handleSyscall+0x1c8>
    0x84018f6e    0x1f8    li a1,1
    0x84018f70    0x1fa    li a0,1
    0x84018f72    0x1fc    jal ra,ffffffff84016314 <handleRecv>
    0x84018f76    0x200    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018f78    0x202    li a1,0
    0x84018f7a    0x204    li a0,1
    0x84018f7c    0x206    jal ra,ffffffff84016314 <handleRecv>
    0x84018f80    0x20a    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018f82    0x20c    li a1,0
    0x84018f84    0x20e    li a0,0
    0x84018f86    0x210    jal ra,ffffffff84016314 <handleRecv>
    0x84018f8a    0x214    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018f8c    0x216    auipc a5,0x14
    0x84018f90    0x21a    ld a5,204(a5) # ffffffff8402d058 <ksCurThread>
    0x84018f94    0x21e    ld a4,120(a5)
    0x84018f96    0x220    li a3,1
    0x84018f98    0x222    li a2,1
    0x84018f9a    0x224    li a1,0
    0x84018f9c    0x226    li a0,0
    0x84018f9e    0x228    jal ra,ffffffff84018c50 <handleInvocation>
    0x84018fa2    0x22c    li a1,1
    0x84018fa4    0x22e    li a0,1
    0x84018fa6    0x230    jal ra,ffffffff84016314 <handleRecv>
    0x84018faa    0x234    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018fac    0x236    auipc a5,0x14
    0x84018fb0    0x23a    ld a5,172(a5) # ffffffff8402d058 <ksCurThread>
    0x84018fb4    0x23e    ld a4,32(a5)
    0x84018fb6    0x240    li a3,1
    0x84018fb8    0x242    li a2,1
    0x84018fba    0x244    li a1,0
    0x84018fbc    0x246    li a0,0
    0x84018fbe    0x248    jal ra,ffffffff84018c50 <handleInvocation>
    0x84018fc2    0x24c    bnez a0,ffffffff84018fce <handleSyscall+0x258>
    0x84018fc4    0x24e    li a1,1
    0x84018fc6    0x250    li a0,1
    0x84018fc8    0x252    jal ra,ffffffff84016314 <handleRecv>
    0x84018fcc    0x256    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018fce    0x258    auipc a5,0x14
    0x84018fd2    0x25c    lw a5,162(a5) # ffffffff8402d070 <active_irq>
    0x84018fd6    0x260    addiw a3,a5,-1
    0x84018fda    0x264    li a4,53
    0x84018fde    0x268    bltu a4,a3,ffffffff84018ff6 <handleSyscall+0x280>
    0x84018fe2    0x26c    slli s0,a5,0x20
    0x84018fe6    0x270    srli s0,s0,0x20
    0x84018fe8    0x272    mv a0,s0
    0x84018fea    0x274    jal ra,ffffffff840152e0 <mcsIRQ>
    0x84018fee    0x278    mv a0,s0
    0x84018ff0    0x27a    jal ra,ffffffff8401483a <handleInterrupt>
    0x84018ff4    0x27e    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84018ff6    0x280    jal ra,ffffffff840101e2 <getNewActiveIRQ>
    0x84018ffa    0x284    sext.w a5,a0
    0x84018ffe    0x288    auipc a4,0x14
    0x84019002    0x28c    sw a0,114(a4) # ffffffff8402d070 <active_irq>
    0x84019006    0x290    addiw a0,a0,-1
    0x84019008    0x292    li a4,53
    0x8401900c    0x296    bltu a4,a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84019010    0x29a    j ffffffff84018fe2 <handleSyscall+0x26c>
    0x84019012    0x29c    auipc a5,0x14
    0x84019016    0x2a0    ld a5,70(a5) # ffffffff8402d058 <ksCurThread>
    0x8401901a    0x2a4    ld a4,120(a5)
    0x8401901c    0x2a6    li a3,1
    0x8401901e    0x2a8    li a2,1
    0x84019020    0x2aa    li a1,0
    0x84019022    0x2ac    li a0,0
    0x84019024    0x2ae    jal ra,ffffffff84018c50 <handleInvocation>
    0x84019028    0x2b2    bnez a0,ffffffff84019034 <handleSyscall+0x2be>
    0x8401902a    0x2b4    li a1,0
    0x8401902c    0x2b6    li a0,1
    0x8401902e    0x2b8    jal ra,ffffffff84016314 <handleRecv>
    0x84019032    0x2bc    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84019034    0x2be    auipc a5,0x14
    0x84019038    0x2c2    lw a5,60(a5) # ffffffff8402d070 <active_irq>
    0x8401903c    0x2c6    addiw a3,a5,-1
    0x84019040    0x2ca    li a4,53
    0x84019044    0x2ce    bltu a4,a3,ffffffff8401905c <handleSyscall+0x2e6>
    0x84019048    0x2d2    slli s0,a5,0x20
    0x8401904c    0x2d6    srli s0,s0,0x20
    0x8401904e    0x2d8    mv a0,s0
    0x84019050    0x2da    jal ra,ffffffff840152e0 <mcsIRQ>
    0x84019054    0x2de    mv a0,s0
    0x84019056    0x2e0    jal ra,ffffffff8401483a <handleInterrupt>
    0x8401905a    0x2e4    j ffffffff84018e26 <handleSyscall+0xb0>
    0x8401905c    0x2e6    jal ra,ffffffff840101e2 <getNewActiveIRQ>
    0x84019060    0x2ea    sext.w a5,a0
    0x84019064    0x2ee    auipc a4,0x14
    0x84019068    0x2f2    sw a0,12(a4) # ffffffff8402d070 <active_irq>
    0x8401906c    0x2f6    addiw a0,a0,-1
    0x8401906e    0x2f8    li a4,53
    0x84019072    0x2fc    bltu a4,a0,ffffffff84018e26 <handleSyscall+0xb0>
    0x84019076    0x300    j ffffffff84019048 <handleSyscall+0x2d2>
    0x84019078    0x302    li a1,1
    0x8401907a    0x304    li a0,0
    0x8401907c    0x306    jal ra,ffffffff84016314 <handleRecv>
    0x84019080    0x30a    j ffffffff84018e26 <handleSyscall+0xb0>
    0x84019082    0x30c    ld s0,8(a3)
    0x84019084    0x30e    add s0,s0,a4
    0x84019086    0x310    li a3,1
    0x84019088    0x312    li a2,0
    0x8401908a    0x314    li a1,0
    0x8401908c    0x316    mv a0,a6
    0x8401908e    0x318    jal ra,ffffffff8401523c <chargeBudget>
    0x84019092    0x31c    auipc a5,0x14
    0x84019096    0x320    ld a5,-106(a5) # ffffffff8402d028 <ksCurSC>
    0x8401909a    0x324    sd s0,8(a5)
    0x8401909c    0x326    j ffffffff84018e26 <handleSyscall+0xb0>
    0x8401909e    0x328    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
265 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 423 nodes.

Section decodeInvocation (295 of 301)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 216 instructions.
Switch found.


Stack analysis
---------------

38 stack accesses found. Annotated code for `decodeInvocation`:

    0x84018a0a      0x0    addi sp,sp,-80
    0x84018a0c      0x2    sd ra,72(sp)          ; stack access
    0x84018a0e      0x4    sd s0,64(sp)          ; stack access
    0x84018a10      0x6    sd s1,56(sp)          ; stack access
    0x84018a12      0x8    sd s2,48(sp)          ; stack access
    0x84018a14      0xa    sd s3,40(sp)          ; stack access
    0x84018a16      0xc    sd s4,32(sp)          ; stack access
    0x84018a18      0xe    mv t3,a3
    0x84018a1a     0x10    sd a4,0(sp)           ; stack access
    0x84018a1c     0x12    sd a5,8(sp)           ; stack access
    0x84018a1e     0x14    mv s1,a4
    0x84018a20     0x16    mv s3,a5
    0x84018a22     0x18    srli t1,a4,0x3b
    0x84018a26     0x1c    andi s0,t1,1
    0x84018a2a     0x20    bnez s0,ffffffff84018a4a <decodeInvocation+0x40>
    0x84018a2c     0x22    mv s4,a6
    0x84018a2e     0x24    mv s2,a7
    0x84018a30     0x26    li a5,24
    0x84018a32     0x28    bltu a5,t1,ffffffff84018c4c <decodeInvocation+0x242>
    0x84018a36     0x2c    slli t1,t1,0x2
    0x84018a38     0x2e    auipc a4,0x1
    0x84018a3c     0x32    addi a4,a4,976 # ffffffff84019e08 <msgRegisters+0x3c0>
    0x84018a40     0x36    add t1,t1,a4
    0x84018a42     0x38    lw a5,0(t1)
    0x84018a46     0x3c    add a5,a5,a4
    0x84018a48     0x3e    jr a5
    0x84018a4a     0x40    ld a6,96(sp)          ; stack access
    0x84018a4c     0x42    jal ra,ffffffff84017b66 <decodeRISCVMMUInvocation>
    0x84018a50     0x46    mv s0,a0
    0x84018a52     0x48    mv a0,s0
    0x84018a54     0x4a    ld ra,72(sp)          ; stack access
    0x84018a56     0x4c    ld s0,64(sp)          ; stack access
    0x84018a58     0x4e    ld s1,56(sp)          ; stack access
    0x84018a5a     0x50    ld s2,48(sp)          ; stack access
    0x84018a5c     0x52    ld s3,40(sp)          ; stack access
    0x84018a5e     0x54    ld s4,32(sp)          ; stack access
    0x84018a60     0x56    addi sp,sp,80
    0x84018a62     0x58    ret
    0x84018a64     0x5a    auipc a5,0x2
    0x84018a68     0x5e    addi a5,a5,-612 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018a6c     0x62    li a4,2
    0x84018a6e     0x64    sd a4,1088(a5)
    0x84018a72     0x68    sd zero,1048(a5)
    0x84018a76     0x6c    li s0,3
    0x84018a78     0x6e    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018a7a     0x70    auipc a5,0x2
    0x84018a7e     0x74    addi a5,a5,-634 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018a82     0x78    li a4,2
    0x84018a84     0x7a    sd a4,1088(a5)
    0x84018a88     0x7e    sd zero,1048(a5)
    0x84018a8c     0x82    li s0,3
    0x84018a8e     0x84    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018a90     0x86    srli a5,s1,0x37
    0x84018a94     0x8a    andi a5,a5,1
    0x84018a96     0x8c    beqz a5,ffffffff84018ad6 <decodeInvocation+0xcc>
    0x84018a98     0x8e    li a1,2
    0x84018a9a     0x90    auipc a0,0x14
    0x84018a9e     0x94    ld a0,1470(a0) # ffffffff8402d058 <ksCurThread>
    0x84018aa2     0x98    jal ra,ffffffff84012996 <setThreadState>
    0x84018aa6     0x9c    slli a0,s1,0x19
    0x84018aaa     0xa0    srli a0,a0,0x19
    0x84018aac     0xa2    srli a5,s1,0x26
    0x84018ab0     0xa6    andi a5,a5,1
    0x84018ab2     0xa8    beqz a5,ffffffff84018aba <decodeInvocation+0xb0>
    0x84018ab4     0xaa    li a5,-1
    0x84018ab6     0xac    slli a5,a5,0x27
    0x84018ab8     0xae    or a0,a0,a5
    0x84018aba     0xb0    srli a3,s1,0x3a
    0x84018abe     0xb4    srli a2,s1,0x39
    0x84018ac2     0xb8    ld a6,80(sp)          ; stack access
    0x84018ac4     0xba    mv a5,s2
    0x84018ac6     0xbc    mv a4,s4
    0x84018ac8     0xbe    andi a3,a3,1
    0x84018aca     0xc0    andi a2,a2,1
    0x84018acc     0xc2    mv a1,s3
    0x84018ace     0xc4    jal ra,ffffffff84015f6e <performInvocation_Endpoint>
    0x84018ad2     0xc8    mv s0,a0
    0x84018ad4     0xca    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018ad6     0xcc    auipc a5,0x2
    0x84018ada     0xd0    addi a5,a5,-726 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018ade     0xd4    li a4,2
    0x84018ae0     0xd6    sd a4,1088(a5)
    0x84018ae4     0xda    sd zero,1048(a5)
    0x84018ae8     0xde    li s0,3
    0x84018aea     0xe0    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018aec     0xe2    srli a5,s1,0x39
    0x84018af0     0xe6    andi a5,a5,1
    0x84018af2     0xe8    beqz a5,ffffffff84018b1c <decodeInvocation+0x112>
    0x84018af4     0xea    li a1,2
    0x84018af6     0xec    auipc a0,0x14
    0x84018afa     0xf0    ld a0,1378(a0) # ffffffff8402d058 <ksCurThread>
    0x84018afe     0xf4    jal ra,ffffffff84012996 <setThreadState>
    0x84018b02     0xf8    slli a0,s1,0x19
    0x84018b06     0xfc    srli a0,a0,0x19
    0x84018b08     0xfe    srli s1,s1,0x26
    0x84018b0a    0x100    andi s1,s1,1
    0x84018b0c    0x102    beqz s1,ffffffff84018b14 <decodeInvocation+0x10a>
    0x84018b0e    0x104    li a5,-1
    0x84018b10    0x106    slli a5,a5,0x27
    0x84018b12    0x108    or a0,a0,a5
    0x84018b14    0x10a    mv a1,s3
    0x84018b16    0x10c    jal ra,ffffffff84014648 <sendSignal>
    0x84018b1a    0x110    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018b1c    0x112    auipc a5,0x2
    0x84018b20    0x116    addi a5,a5,-796 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018b24    0x11a    li a4,2
    0x84018b26    0x11c    sd a4,1088(a5)
    0x84018b2a    0x120    sd zero,1048(a5)
    0x84018b2e    0x124    li s0,3
    0x84018b30    0x126    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018b32    0x128    auipc s2,0x14
    0x84018b36    0x12c    addi s2,s2,1318 # ffffffff8402d058 <ksCurThread>
    0x84018b3a    0x130    li a1,2
    0x84018b3c    0x132    ld a0,0(s2)
    0x84018b40    0x136    jal ra,ffffffff84012996 <setThreadState>
    0x84018b44    0x13a    srli a2,s1,0x3a
    0x84018b48    0x13e    andi a2,a2,1
    0x84018b4a    0x140    mv a1,s3
    0x84018b4c    0x142    ld a0,0(s2)
    0x84018b50    0x146    jal ra,ffffffff84015f96 <doReplyTransfer>
    0x84018b54    0x14a    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018b56    0x14c    ld a5,88(sp)          ; stack access
    0x84018b58    0x14e    bnez a5,ffffffff84018b6c <decodeInvocation+0x162>
    0x84018b5a    0x150    ld a6,96(sp)          ; stack access
    0x84018b5c    0x152    mv a5,a7
    0x84018b5e    0x154    mv a4,a3
    0x84018b60    0x156    ld a2,0(sp)           ; stack access
    0x84018b62    0x158    ld a3,8(sp)           ; stack access
    0x84018b64    0x15a    jal ra,ffffffff8401770a <decodeTCBInvocation>
    0x84018b68    0x15e    mv s0,a0
    0x84018b6a    0x160    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018b6c    0x162    auipc a5,0x2
    0x84018b70    0x166    addi a5,a5,-876 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018b74    0x16a    li a4,2
    0x84018b76    0x16c    sd a4,1088(a5)
    0x84018b7a    0x170    sd zero,1048(a5)
    0x84018b7e    0x174    li s0,3
    0x84018b80    0x176    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018b82    0x178    ld a5,88(sp)          ; stack access
    0x84018b84    0x17a    bnez a5,ffffffff84018b90 <decodeInvocation+0x186>
    0x84018b86    0x17c    ld a2,96(sp)          ; stack access
    0x84018b88    0x17e    jal ra,ffffffff840164f8 <decodeDomainInvocation>
    0x84018b8c    0x182    mv s0,a0
    0x84018b8e    0x184    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018b90    0x186    auipc a5,0x2
    0x84018b94    0x18a    addi a5,a5,-912 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018b98    0x18e    li a4,2
    0x84018b9a    0x190    sd a4,1088(a5)
    0x84018b9e    0x194    sd zero,1048(a5)
    0x84018ba2    0x198    li s0,3
    0x84018ba4    0x19a    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018ba6    0x19c    ld a5,88(sp)          ; stack access
    0x84018ba8    0x19e    bnez a5,ffffffff84018bb8 <decodeInvocation+0x1ae>
    0x84018baa    0x1a0    ld a4,96(sp)          ; stack access
    0x84018bac    0x1a2    ld a2,0(sp)           ; stack access
    0x84018bae    0x1a4    ld a3,8(sp)           ; stack access
    0x84018bb0    0x1a6    jal ra,ffffffff84015abc <decodeCNodeInvocation>
    0x84018bb4    0x1aa    mv s0,a0
    0x84018bb6    0x1ac    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018bb8    0x1ae    auipc a5,0x2
    0x84018bbc    0x1b2    addi a5,a5,-952 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018bc0    0x1b6    li a4,2
    0x84018bc2    0x1b8    sd a4,1088(a5)
    0x84018bc6    0x1bc    sd zero,1048(a5)
    0x84018bca    0x1c0    li s0,3
    0x84018bcc    0x1c2    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018bce    0x1c4    ld a6,96(sp)          ; stack access
    0x84018bd0    0x1c6    mv a5,a7
    0x84018bd2    0x1c8    ld a3,0(sp)           ; stack access
    0x84018bd4    0x1ca    ld a4,8(sp)           ; stack access
    0x84018bd6    0x1cc    mv a2,t3
    0x84018bd8    0x1ce    jal ra,ffffffff840186d8 <decodeUntypedInvocation>
    0x84018bdc    0x1d2    mv s0,a0
    0x84018bde    0x1d4    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018be0    0x1d6    ld a3,96(sp)          ; stack access
    0x84018be2    0x1d8    mv a2,t3
    0x84018be4    0x1da    jal ra,ffffffff84012af0 <decodeIRQControlInvocation>
    0x84018be8    0x1de    mv s0,a0
    0x84018bea    0x1e0    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018bec    0x1e2    slli a1,s3,0x34
    0x84018bf0    0x1e6    srli a1,a1,0x34
    0x84018bf2    0x1e8    jal ra,ffffffff84013b8a <decodeIRQHandlerInvocation>
    0x84018bf6    0x1ec    mv s0,a0
    0x84018bf8    0x1ee    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018bfa    0x1f0    ld a5,88(sp)          ; stack access
    0x84018bfc    0x1f2    bnez a5,ffffffff84018c0e <decodeInvocation+0x204>
    0x84018bfe    0x1f4    ld a4,96(sp)          ; stack access
    0x84018c00    0x1f6    mv a3,a1
    0x84018c02    0x1f8    ld a1,0(sp)           ; stack access
    0x84018c04    0x1fa    ld a2,8(sp)           ; stack access
    0x84018c06    0x1fc    jal ra,ffffffff840141b2 <decodeSchedControlInvocation>
    0x84018c0a    0x200    mv s0,a0
    0x84018c0c    0x202    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018c0e    0x204    auipc a5,0x2
    0x84018c12    0x208    addi a5,a5,-1038 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018c16    0x20c    li a4,2
    0x84018c18    0x20e    sd a4,1088(a5)
    0x84018c1c    0x212    sd zero,1048(a5)
    0x84018c20    0x216    li s0,3
    0x84018c22    0x218    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018c24    0x21a    ld a5,88(sp)          ; stack access
    0x84018c26    0x21c    bnez a5,ffffffff84018c36 <decodeInvocation+0x22c>
    0x84018c28    0x21e    ld a3,96(sp)          ; stack access
    0x84018c2a    0x220    ld a1,0(sp)           ; stack access
    0x84018c2c    0x222    ld a2,8(sp)           ; stack access
    0x84018c2e    0x224    jal ra,ffffffff84013e04 <decodeSchedContextInvocation>
    0x84018c32    0x228    mv s0,a0
    0x84018c34    0x22a    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018c36    0x22c    auipc a5,0x2
    0x84018c3a    0x230    addi a5,a5,-1078 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018c3e    0x234    li a4,2
    0x84018c40    0x236    sd a4,1088(a5)
    0x84018c44    0x23a    sd zero,1048(a5)
    0x84018c48    0x23e    li s0,3
    0x84018c4a    0x240    j ffffffff84018a52 <decodeInvocation+0x48>
    0x84018c4c    0x242    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
210 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 382 nodes.

Section decodeSchedContextInvocation (296 of 301)
=================================================

Deriving specifications
-----------------------

Section `decodeSchedContextInvocation` consists of 332 instructions.
Switch found.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeSchedContextInvocation`:

    0x84013e04      0x0    addi sp,sp,-48
    0x84013e06      0x2    sd ra,40(sp)          ; stack access
    0x84013e08      0x4    sd s0,32(sp)          ; stack access
    0x84013e0a      0x6    sd s1,24(sp)          ; stack access
    0x84013e0c      0x8    sd s2,16(sp)          ; stack access
    0x84013e0e      0xa    sd a1,0(sp)           ; stack access
    0x84013e10      0xc    sd a2,8(sp)           ; stack access
    0x84013e12      0xe    mv s1,a3
    0x84013e14     0x10    srli a2,a2,0x10
    0x84013e16     0x12    slli a5,a2,0x19
    0x84013e1a     0x16    srli a5,a5,0x19
    0x84013e1c     0x18    srli a2,a2,0x26
    0x84013e1e     0x1a    andi a2,a2,1
    0x84013e20     0x1c    beqz a2,ffffffff84013e28 <decodeSchedContextInvocation+0x24>
    0x84013e22     0x1e    li a4,-1
    0x84013e24     0x20    slli a4,a4,0x27
    0x84013e26     0x22    or a5,a5,a4
    0x84013e28     0x24    mv s0,a5
    0x84013e2a     0x26    addi a5,a0,-31
    0x84013e2e     0x2a    li a4,4
    0x84013e30     0x2c    bltu a4,a5,ffffffff84014156 <decodeSchedContextInvocation+0x352>
    0x84013e34     0x30    slli a5,a5,0x2
    0x84013e36     0x32    auipc a4,0x6
    0x84013e3a     0x36    addi a4,a4,-270 # ffffffff84019d28 <msgRegisters+0x2e0>
    0x84013e3e     0x3a    add a5,a5,a4
    0x84013e40     0x3c    lw a5,0(a5)
    0x84013e42     0x3e    add a5,a5,a4
    0x84013e44     0x40    jr a5
    0x84013e46     0x42    auipc s2,0x19
    0x84013e4a     0x46    addi s2,s2,530 # ffffffff8402d058 <ksCurThread>
    0x84013e4e     0x4a    li a1,2
    0x84013e50     0x4c    ld a0,0(s2)
    0x84013e54     0x50    jal ra,ffffffff84012996 <setThreadState>
    0x84013e58     0x54    mv a0,s0
    0x84013e5a     0x56    jal ra,ffffffff840125da <schedContext_updateConsumed>
    0x84013e5e     0x5a    mv a3,a0
    0x84013e60     0x5c    li a2,0
    0x84013e62     0x5e    mv a1,s1
    0x84013e64     0x60    ld a0,0(s2)
    0x84013e68     0x64    jal ra,ffffffff840100ea <setMR>
    0x84013e6c     0x68    ld a5,0(s2)
    0x84013e70     0x6c    andi a0,a0,127
    0x84013e74     0x70    sd a0,80(a5)
    0x84013e76     0x72    li s2,0
    0x84013e78     0x74    mv a0,s2
    0x84013e7a     0x76    ld ra,40(sp)          ; stack access
    0x84013e7c     0x78    ld s0,32(sp)          ; stack access
    0x84013e7e     0x7a    ld s1,24(sp)          ; stack access
    0x84013e80     0x7c    ld s2,16(sp)          ; stack access
    0x84013e82     0x7e    addi sp,sp,48
    0x84013e84     0x80    ret
    0x84013e86     0x82    auipc a5,0x7
    0x84013e8a     0x86    ld a5,522(a5) # ffffffff8401b090 <current_extra_caps>
    0x84013e8e     0x8a    beqz a5,ffffffff84013ee4 <decodeSchedContextInvocation+0xe0>
    0x84013e90     0x8c    ld a4,24(s0)
    0x84013e92     0x8e    bnez a4,ffffffff84013ef2 <decodeSchedContextInvocation+0xee>
    0x84013e94     0x90    ld a4,40(s0)
    0x84013e96     0x92    bnez a4,ffffffff84013ef2 <decodeSchedContextInvocation+0xee>
    0x84013e98     0x94    ld a5,0(a5)
    0x84013e9a     0x96    srli a4,a5,0x3b
    0x84013e9e     0x9a    li a3,6
    0x84013ea0     0x9c    beq a4,a3,ffffffff84013f0e <decodeSchedContextInvocation+0x10a>
    0x84013ea4     0xa0    li a3,12
    0x84013ea6     0xa2    bne a4,a3,ffffffff84013f3c <decodeSchedContextInvocation+0x138>
    0x84013eaa     0xa6    slli s1,a5,0x19
    0x84013eae     0xaa    srli s1,s1,0x19
    0x84013eb0     0xac    srli a5,a5,0x26
    0x84013eb2     0xae    andi a5,a5,1
    0x84013eb4     0xb0    beqz a5,ffffffff84014164 <decodeSchedContextInvocation+0x360>
    0x84013eb8     0xb4    li a5,-1
    0x84013eba     0xb6    slli a5,a5,0x27
    0x84013ebc     0xb8    or a5,a5,s1
    0x84013ebe     0xba    ld a5,368(a5)
    0x84013ec2     0xbe    bnez a5,ffffffff84013f00 <decodeSchedContextInvocation+0xfc>
    0x84013ec4     0xc0    li a1,2
    0x84013ec6     0xc2    auipc a0,0x19
    0x84013eca     0xc6    ld a0,402(a0) # ffffffff8402d058 <ksCurThread>
    0x84013ece     0xca    jal ra,ffffffff84012996 <setThreadState>
    0x84013ed2     0xce    li a5,-1
    0x84013ed4     0xd0    slli a5,a5,0x27
    0x84013ed6     0xd2    or s1,s1,a5
    0x84013ed8     0xd4    mv a1,s1
    0x84013eda     0xd6    mv a0,s0
    0x84013edc     0xd8    jal ra,ffffffff84013dbe <schedContext_bindTCB>
    0x84013ee0     0xdc    li s2,0
    0x84013ee2     0xde    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013ee4     0xe0    li a5,7
    0x84013ee6     0xe2    auipc a4,0x7
    0x84013eea     0xe6    sd a5,-678(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013eee     0xea    li s2,3
    0x84013ef0     0xec    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013ef2     0xee    li a5,3
    0x84013ef4     0xf0    auipc a4,0x7
    0x84013ef8     0xf4    sd a5,-692(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013efc     0xf8    li s2,3
    0x84013efe     0xfa    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013f00     0xfc    li a5,3
    0x84013f02     0xfe    auipc a4,0x7
    0x84013f06    0x102    sd a5,-706(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013f0a    0x106    li s2,3
    0x84013f0c    0x108    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013f0e    0x10a    slli s1,a5,0x19
    0x84013f12    0x10e    srli s1,s1,0x19
    0x84013f14    0x110    srli a5,a5,0x26
    0x84013f16    0x112    andi a5,a5,1
    0x84013f18    0x114    beqz a5,ffffffff8401419a <decodeSchedContextInvocation+0x396>
    0x84013f1c    0x118    li a5,-1
    0x84013f1e    0x11a    slli a4,a5,0x27
    0x84013f22    0x11e    or a4,a4,s1
    0x84013f24    0x120    ld a4,32(a4)
    0x84013f26    0x122    srli a5,a5,0x19
    0x84013f28    0x124    and a5,a5,a4
    0x84013f2a    0x126    beqz a5,ffffffff8401417c <decodeSchedContextInvocation+0x378>
    0x84013f2e    0x12a    li a5,3
    0x84013f30    0x12c    auipc a4,0x7
    0x84013f34    0x130    sd a5,-752(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013f38    0x134    li s2,3
    0x84013f3a    0x136    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013f3c    0x138    auipc a5,0x7
    0x84013f40    0x13c    addi a5,a5,-1852 # ffffffff8401a800 <riscvKSASIDTable>
    0x84013f44    0x140    li a4,2
    0x84013f46    0x142    sd a4,1088(a5)
    0x84013f4a    0x146    li a4,1
    0x84013f4c    0x148    sd a4,1048(a5)
    0x84013f50    0x14c    li s2,3
    0x84013f52    0x14e    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013f54    0x150    auipc a5,0x7
    0x84013f58    0x154    ld a5,316(a5) # ffffffff8401b090 <current_extra_caps>
    0x84013f5c    0x158    beqz a5,ffffffff84013fa4 <decodeSchedContextInvocation+0x1a0>
    0x84013f5e    0x15a    ld a5,0(a5)
    0x84013f60    0x15c    srli a4,a5,0x3b
    0x84013f64    0x160    li a3,6
    0x84013f66    0x162    beq a4,a3,ffffffff84013fce <decodeSchedContextInvocation+0x1ca>
    0x84013f6a    0x166    li a3,12
    0x84013f6c    0x168    bne a4,a3,ffffffff8401400c <decodeSchedContextInvocation+0x208>
    0x84013f70    0x16c    ld a3,24(s0)
    0x84013f72    0x16e    slli a4,a5,0x19
    0x84013f76    0x172    srli a4,a4,0x19
    0x84013f78    0x174    srli a5,a5,0x26
    0x84013f7a    0x176    andi a5,a5,1
    0x84013f7c    0x178    beqz a5,ffffffff84013f84 <decodeSchedContextInvocation+0x180>
    0x84013f7e    0x17a    li a5,-1
    0x84013f80    0x17c    slli a5,a5,0x27
    0x84013f82    0x17e    or a4,a4,a5
    0x84013f84    0x180    bne a3,a4,ffffffff84013fb2 <decodeSchedContextInvocation+0x1ae>
    0x84013f88    0x184    auipc a0,0x19
    0x84013f8c    0x188    ld a0,208(a0) # ffffffff8402d058 <ksCurThread>
    0x84013f90    0x18c    beq a3,a0,ffffffff84013fc0 <decodeSchedContextInvocation+0x1bc>
    0x84013f94    0x190    li a1,2
    0x84013f96    0x192    jal ra,ffffffff84012996 <setThreadState>
    0x84013f9a    0x196    ld a1,24(s0)
    0x84013f9c    0x198    mv a0,s0
    0x84013f9e    0x19a    jal ra,ffffffff84013828 <schedContext_unbindTCB>
    0x84013fa2    0x19e    j ffffffff84013ffa <decodeSchedContextInvocation+0x1f6>
    0x84013fa4    0x1a0    li a5,7
    0x84013fa6    0x1a2    auipc a4,0x7
    0x84013faa    0x1a6    sd a5,-870(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013fae    0x1aa    li s2,3
    0x84013fb0    0x1ac    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013fb2    0x1ae    li a5,3
    0x84013fb4    0x1b0    auipc a4,0x7
    0x84013fb8    0x1b4    sd a5,-884(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013fbc    0x1b8    li s2,3
    0x84013fbe    0x1ba    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013fc0    0x1bc    li a5,3
    0x84013fc2    0x1be    auipc a4,0x7
    0x84013fc6    0x1c2    sd a5,-898(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84013fca    0x1c6    li s2,3
    0x84013fcc    0x1c8    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013fce    0x1ca    ld a3,40(s0)
    0x84013fd0    0x1cc    slli a4,a5,0x19
    0x84013fd4    0x1d0    srli a4,a4,0x19
    0x84013fd6    0x1d2    srli a5,a5,0x26
    0x84013fd8    0x1d4    andi a5,a5,1
    0x84013fda    0x1d6    beqz a5,ffffffff84013fe2 <decodeSchedContextInvocation+0x1de>
    0x84013fdc    0x1d8    li a5,-1
    0x84013fde    0x1da    slli a5,a5,0x27
    0x84013fe0    0x1dc    or a4,a4,a5
    0x84013fe2    0x1de    bne a3,a4,ffffffff84013ffe <decodeSchedContextInvocation+0x1fa>
    0x84013fe6    0x1e2    li a1,2
    0x84013fe8    0x1e4    auipc a0,0x19
    0x84013fec    0x1e8    ld a0,112(a0) # ffffffff8402d058 <ksCurThread>
    0x84013ff0    0x1ec    jal ra,ffffffff84012996 <setThreadState>
    0x84013ff4    0x1f0    mv a0,s0
    0x84013ff6    0x1f2    jal ra,ffffffff840125c6 <schedContext_unbindNtfn>
    0x84013ffa    0x1f6    li s2,0
    0x84013ffc    0x1f8    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84013ffe    0x1fa    li a5,3
    0x84014000    0x1fc    auipc a4,0x7
    0x84014004    0x200    sd a5,-960(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84014008    0x204    li s2,3
    0x8401400a    0x206    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x8401400c    0x208    auipc a5,0x6
    0x84014010    0x20c    addi a5,a5,2036 # ffffffff8401a800 <riscvKSASIDTable>
    0x84014014    0x210    li a4,2
    0x84014016    0x212    sd a4,1088(a5)
    0x8401401a    0x216    li a4,1
    0x8401401c    0x218    sd a4,1048(a5)
    0x84014020    0x21c    li s2,3
    0x84014022    0x21e    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84014024    0x220    auipc a0,0x19
    0x84014028    0x224    ld a0,52(a0) # ffffffff8402d058 <ksCurThread>
    0x8401402c    0x228    ld a5,24(s0)
    0x8401402e    0x22a    beq a5,a0,ffffffff84014056 <decodeSchedContextInvocation+0x252>
    0x84014032    0x22e    li a1,2
    0x84014034    0x230    jal ra,ffffffff84012996 <setThreadState>
    0x84014038    0x234    mv a0,s0
    0x8401403a    0x236    jal ra,ffffffff84013860 <schedContext_unbindAllTCBs>
    0x8401403e    0x23a    mv a0,s0
    0x84014040    0x23c    jal ra,ffffffff840125c6 <schedContext_unbindNtfn>
    0x84014044    0x240    ld a5,32(s0)
    0x84014046    0x242    li s2,0
    0x84014048    0x244    beqz a5,ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x8401404c    0x248    sd zero,16(a5)
    0x84014050    0x24c    sd zero,32(s0)
    0x84014054    0x250    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84014056    0x252    li a5,3
    0x84014058    0x254    auipc a4,0x7
    0x8401405c    0x258    sd a5,-1048(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84014060    0x25c    li s2,3
    0x84014062    0x25e    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84014064    0x260    ld a5,24(s0)
    0x84014066    0x262    auipc a0,0x19
    0x8401406a    0x266    ld a0,-14(a0) # ffffffff8402d058 <ksCurThread>
    0x8401406e    0x26a    beq a5,a0,ffffffff840140ca <decodeSchedContextInvocation+0x2c6>
    0x84014072    0x26e    beqz a5,ffffffff840140d8 <decodeSchedContextInvocation+0x2d4>
    0x84014074    0x270    ld a4,360(a5)
    0x84014078    0x274    ld a5,352(a0)
    0x8401407c    0x278    bltu a5,a4,ffffffff840140e6 <decodeSchedContextInvocation+0x2e2>
    0x84014080    0x27c    li a1,2
    0x84014082    0x27e    jal ra,ffffffff84012996 <setThreadState>
    0x84014086    0x282    ld a0,56(s0)
    0x84014088    0x284    beqz a0,ffffffff8401408e <decodeSchedContextInvocation+0x28a>
    0x8401408a    0x286    jal ra,ffffffff8401280c <schedContext_completeYieldTo>
    0x8401408e    0x28a    mv a0,s0
    0x84014090    0x28c    jal ra,ffffffff84013d0a <schedContext_resume>
    0x84014094    0x290    ld a4,24(s0)
    0x84014096    0x292    ld a5,280(a4)
    0x8401409a    0x296    andi a5,a5,15
    0x8401409c    0x298    addi a5,a5,-1
    0x8401409e    0x29a    li a3,1
    0x840140a0    0x29c    bgeu a3,a5,ffffffff840140f4 <decodeSchedContextInvocation+0x2f0>
    0x840140a4    0x2a0    mv a0,s0
    0x840140a6    0x2a2    jal ra,ffffffff840125da <schedContext_updateConsumed>
    0x840140aa    0x2a6    mv a3,a0
    0x840140ac    0x2a8    auipc s0,0x19
    0x840140b0    0x2ac    addi s0,s0,-84 # ffffffff8402d058 <ksCurThread>
    0x840140b4    0x2b0    li a2,0
    0x840140b6    0x2b2    mv a1,s1
    0x840140b8    0x2b4    ld a0,0(s0)
    0x840140ba    0x2b6    jal ra,ffffffff840100ea <setMR>
    0x840140be    0x2ba    ld a5,0(s0)
    0x840140c0    0x2bc    andi a0,a0,127
    0x840140c4    0x2c0    sd a0,80(a5)
    0x840140c6    0x2c2    li s2,0
    0x840140c8    0x2c4    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x840140ca    0x2c6    li a5,3
    0x840140cc    0x2c8    auipc a4,0x7
    0x840140d0    0x2cc    sd a5,-1164(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840140d4    0x2d0    li s2,3
    0x840140d6    0x2d2    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x840140d8    0x2d4    li a5,3
    0x840140da    0x2d6    auipc a4,0x7
    0x840140de    0x2da    sd a5,-1178(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840140e2    0x2de    li s2,3
    0x840140e4    0x2e0    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x840140e6    0x2e2    li a5,3
    0x840140e8    0x2e4    auipc a4,0x7
    0x840140ec    0x2e8    sd a5,-1192(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840140f0    0x2ec    li s2,3
    0x840140f2    0x2ee    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x840140f4    0x2f0    ld a5,368(a4)
    0x840140f8    0x2f4    beqz a5,ffffffff840140a4 <decodeSchedContextInvocation+0x2a0>
    0x840140fa    0x2f6    ld a5,64(a5)
    0x840140fc    0x2f8    beqz a5,ffffffff840140a4 <decodeSchedContextInvocation+0x2a0>
    0x840140fe    0x2fa    ld s2,288(a4)
    0x84014102    0x2fe    andi s2,s2,1
    0x84014106    0x302    bnez s2,ffffffff840140a4 <decodeSchedContextInvocation+0x2a0>
    0x8401410a    0x306    mv a0,s0
    0x8401410c    0x308    jal ra,ffffffff840117d6 <refill_unblock_check>
    0x84014110    0x30c    ld a0,24(s0)
    0x84014112    0x30e    auipc a5,0x19
    0x84014116    0x312    ld a5,-186(a5) # ffffffff8402d058 <ksCurThread>
    0x8401411a    0x316    ld a3,360(a0)
    0x8401411e    0x31a    ld a4,360(a5)
    0x84014122    0x31e    bgeu a3,a4,ffffffff84014132 <decodeSchedContextInvocation+0x32e>
    0x84014126    0x322    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x8401412a    0x326    ld a0,24(s0)
    0x8401412c    0x328    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84014130    0x32c    j ffffffff840140a4 <decodeSchedContextInvocation+0x2a0>
    0x84014132    0x32e    sd s0,376(a5)
    0x84014136    0x332    sd a5,56(s0)
    0x84014138    0x334    ld a0,24(s0)
    0x8401413a    0x336    jal ra,ffffffff84012e6e <tcbSchedDequeue>
    0x8401413e    0x33a    auipc a0,0x19
    0x84014142    0x33e    ld a0,-230(a0) # ffffffff8402d058 <ksCurThread>
    0x84014146    0x342    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x8401414a    0x346    ld a0,24(s0)
    0x8401414c    0x348    jal ra,ffffffff84012860 <tcbSchedEnqueue>
    0x84014150    0x34c    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84014154    0x350    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84014156    0x352    li a5,3
    0x84014158    0x354    auipc a4,0x7
    0x8401415c    0x358    sd a5,-1304(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84014160    0x35c    li s2,3
    0x84014162    0x35e    j ffffffff84013e78 <decodeSchedContextInvocation+0x74>
    0x84014164    0x360    ld a5,368(s1)
    0x84014168    0x364    bnez a5,ffffffff84013f00 <decodeSchedContextInvocation+0xfc>
    0x8401416c    0x368    li a1,2
    0x8401416e    0x36a    auipc a0,0x19
    0x84014172    0x36e    ld a0,-278(a0) # ffffffff8402d058 <ksCurThread>
    0x84014176    0x372    jal ra,ffffffff84012996 <setThreadState>
    0x8401417a    0x376    j ffffffff84013ed8 <decodeSchedContextInvocation+0xd4>
    0x8401417c    0x378    li a1,2
    0x8401417e    0x37a    auipc a0,0x19
    0x84014182    0x37e    ld a0,-294(a0) # ffffffff8402d058 <ksCurThread>
    0x84014186    0x382    jal ra,ffffffff84012996 <setThreadState>
    0x8401418a    0x386    li a5,-1
    0x8401418c    0x388    slli a5,a5,0x27
    0x8401418e    0x38a    or s1,s1,a5
    0x84014190    0x38c    mv a1,s1
    0x84014192    0x38e    mv a0,s0
    0x84014194    0x390    jal ra,ffffffff840125b0 <schedContext_bindNtfn>
    0x84014198    0x394    j ffffffff84013ee0 <decodeSchedContextInvocation+0xdc>
    0x8401419a    0x396    ld a5,32(s1)
    0x8401419c    0x398    slli a5,a5,0x19
    0x8401419e    0x39a    bnez a5,ffffffff84013f2e <decodeSchedContextInvocation+0x12a>
    0x840141a2    0x39e    li a1,2
    0x840141a4    0x3a0    auipc a0,0x19
    0x840141a8    0x3a4    ld a0,-332(a0) # ffffffff8402d058 <ksCurThread>
    0x840141ac    0x3a8    jal ra,ffffffff84012996 <setThreadState>
    0x840141b0    0x3ac    j ffffffff84014190 <decodeSchedContextInvocation+0x38c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
326 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSchedContextInvocation` has 510 nodes.

Section finaliseCap (297 of 301)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 231 instructions.
Switch found.
Switch found.

XOR.....
RVC_TFFFTT___FT___FT..

Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
54 stack accesses found. Annotated code for `finaliseCap`:

    0x84013874      0x0    addi sp,sp,-64
    0x84013876      0x2    sd ra,56(sp)          ; stack access
    0x84013878      0x4    sd s0,48(sp)          ; stack access
    0x8401387a      0x6    sd s1,40(sp)          ; stack access
    0x8401387c      0x8    sd s2,32(sp)          ; stack access
    0x8401387e      0xa    sd s3,24(sp)          ; stack access
    0x84013880      0xc    mv s0,a0
    0x84013882      0xe    sd a1,0(sp)           ; stack access
    0x84013884     0x10    sd a2,8(sp)           ; stack access
    0x84013886     0x12    mv s1,a1
    0x84013888     0x14    srli a5,a1,0x3b
    0x8401388c     0x18    andi a2,a5,1
    0x84013890     0x1c    bnez a2,ffffffff840138ae <finaliseCap+0x3a>
    0x84013892     0x1e    ld s2,8(sp)           ; stack access
    0x84013894     0x20    li a2,20
    0x84013896     0x22    bltu a2,a5,ffffffff840139a2 <finaliseCap+0x12e>
    0x8401389a     0x26    slli a1,a5,0x2
    0x8401389e     0x2a    auipc a0,0x6
    0x840138a2     0x2e    addi a0,a0,1026 # ffffffff84019ca0 <msgRegisters+0x258>
    0x840138a6     0x32    add a1,a1,a0
    0x840138a8     0x34    lw a2,0(a1)
    0x840138aa     0x36    add a2,a2,a0
    0x840138ac     0x38    jr a2
    0x840138ae     0x3a    ld a2,8(sp)           ; stack access
    0x840138b0     0x3c    jal ra,ffffffff84010d3e <Arch_finaliseCap>
    0x840138b4     0x40    mv a0,s0
    0x840138b6     0x42    ld ra,56(sp)          ; stack access
    0x840138b8     0x44    ld s0,48(sp)          ; stack access
    0x840138ba     0x46    ld s1,40(sp)          ; stack access
    0x840138bc     0x48    ld s2,32(sp)          ; stack access
    0x840138be     0x4a    ld s3,24(sp)          ; stack access
    0x840138c0     0x4c    addi sp,sp,64
    0x840138c2     0x4e    ret
    0x840138c4     0x50    beqz a3,ffffffff840138dc <finaliseCap+0x68>
    0x840138c6     0x52    slli a0,s1,0x19
    0x840138ca     0x56    srli a0,a0,0x19
    0x840138cc     0x58    srli s1,s1,0x26
    0x840138ce     0x5a    andi s1,s1,1
    0x840138d0     0x5c    beqz s1,ffffffff840138d8 <finaliseCap+0x64>
    0x840138d2     0x5e    li a5,-1
    0x840138d4     0x60    slli a5,a5,0x27
    0x840138d6     0x62    or a0,a0,a5
    0x840138d8     0x64    jal ra,ffffffff84012cc2 <cancelAllIPC>
    0x840138dc     0x68    sd zero,0(s0)         ; stack access
    0x840138e0     0x6c    sd zero,8(s0)         ; stack access
    0x840138e4     0x70    sd zero,16(s0)        ; stack access
    0x840138e8     0x74    sd zero,24(s0)        ; stack access
    0x840138ec     0x78    j ffffffff840138b4 <finaliseCap+0x40>
    0x840138ee     0x7a    beqz a3,ffffffff84013928 <finaliseCap+0xb4>
    0x840138f0     0x7c    slli a5,s1,0x19
    0x840138f4     0x80    srli a5,a5,0x19
    0x840138f6     0x82    srli s1,s1,0x26
    0x840138f8     0x84    andi s1,s1,1
    0x840138fa     0x86    beqz s1,ffffffff84013902 <finaliseCap+0x8e>
    0x840138fc     0x88    li a4,-1
    0x840138fe     0x8a    slli a4,a4,0x27
    0x84013900     0x8c    or a5,a5,a4
    0x84013902     0x8e    mv s1,a5
    0x84013904     0x90    ld a5,32(a5)
    0x84013906     0x92    slli a0,a5,0x19
    0x8401390a     0x96    srli a0,a0,0x19
    0x8401390c     0x98    srli a5,a5,0x26
    0x8401390e     0x9a    andi a5,a5,1
    0x84013910     0x9c    beqz a5,ffffffff84013918 <finaliseCap+0xa4>
    0x84013912     0x9e    li a5,-1
    0x84013914     0xa0    slli a5,a5,0x27
    0x84013916     0xa2    or a0,a0,a5
    0x84013918     0xa4    jal ra,ffffffff840125c6 <schedContext_unbindNtfn>
    0x8401391c     0xa8    mv a0,s1
    0x8401391e     0xaa    jal ra,ffffffff84011dac <unbindMaybeNotification>
    0x84013922     0xae    mv a0,s1
    0x84013924     0xb0    jal ra,ffffffff84012d68 <cancelAllSignals>
    0x84013928     0xb4    sd zero,0(s0)         ; stack access
    0x8401392c     0xb8    sd zero,8(s0)         ; stack access
    0x84013930     0xbc    sd zero,16(s0)        ; stack access
    0x84013934     0xc0    sd zero,24(s0)        ; stack access
    0x84013938     0xc4    j ffffffff840138b4 <finaliseCap+0x40>
    0x8401393a     0xc6    beqz a3,ffffffff8401395e <finaliseCap+0xea>
    0x8401393c     0xc8    beqz s2,ffffffff8401395e <finaliseCap+0xea>
    0x84013940     0xcc    ld a0,0(s2)
    0x84013944     0xd0    beqz a0,ffffffff8401395e <finaliseCap+0xea>
    0x84013946     0xd2    ld a5,280(a0)
    0x8401394a     0xd6    andi a5,a5,15
    0x8401394c     0xd8    li a4,3
    0x8401394e     0xda    beq a5,a4,ffffffff84013970 <finaliseCap+0xfc>
    0x84013952     0xde    li a4,5
    0x84013954     0xe0    bne a5,a4,ffffffff8401398c <finaliseCap+0x118>
    0x84013958     0xe4    mv a0,s2
    0x8401395a     0xe6    jal ra,ffffffff84013244 <reply_remove>
    0x8401395e     0xea    sd zero,0(s0)         ; stack access
    0x84013962     0xee    sd zero,8(s0)         ; stack access
    0x84013966     0xf2    sd zero,16(s0)        ; stack access
    0x8401396a     0xf6    sd zero,24(s0)        ; stack access
    0x8401396e     0xfa    j ffffffff840138b4 <finaliseCap+0x40>
    0x84013970     0xfc    ld a4,288(a0)
    0x84013974    0x100    li a5,-1
    0x84013976    0x102    slli a5,a5,0x28
    0x84013978    0x104    addi a5,a5,31
    0x8401397a    0x106    and a5,a5,a4
    0x8401397c    0x108    sd a5,288(a0)
    0x84013980    0x10c    sd zero,0(s2)
    0x84013984    0x110    li a1,0
    0x84013986    0x112    jal ra,ffffffff84012996 <setThreadState>
    0x8401398a    0x116    j ffffffff8401395e <finaliseCap+0xea>
    0x8401398c    0x118    jal ra,ffffffff84010490 <halt>
    0x84013990    0x11c    sd zero,0(s0)         ; stack access
    0x84013994    0x120    sd zero,8(s0)         ; stack access
    0x84013998    0x124    sd zero,16(s0)        ; stack access
    0x8401399c    0x128    sd zero,24(s0)        ; stack access
    0x840139a0    0x12c    j ffffffff840138b4 <finaliseCap+0x40>
    0x840139a2    0x12e    bnez a4,ffffffff840139be <finaliseCap+0x14a>
    0x840139a4    0x130    addi a5,a5,-10
    0x840139a6    0x132    li a4,12
    0x840139a8    0x134    bltu a4,a5,ffffffff84013ada <finaliseCap+0x266>
    0x840139ac    0x138    slli a5,a5,0x2
    0x840139ae    0x13a    auipc a4,0x6
    0x840139b2    0x13e    addi a4,a4,838 # ffffffff84019cf4 <msgRegisters+0x2ac>
    0x840139b6    0x142    add a5,a5,a4
    0x840139b8    0x144    lw a5,0(a5)
    0x840139ba    0x146    add a5,a5,a4
    0x840139bc    0x148    jr a5
    0x840139be    0x14a    jal ra,ffffffff84010490 <halt>
    0x840139c2    0x14e    beqz a3,ffffffff84013ada <finaliseCap+0x266>
    0x840139c6    0x152    srli a3,s1,0x2f
    0x840139ca    0x156    andi a0,a3,63
    0x840139ce    0x15a    mv a3,a0
    0x840139d0    0x15c    li a2,1
    0x840139d2    0x15e    sll a1,a2,a0
    0x840139d6    0x162    slli s1,s1,0x1
    0x840139d8    0x164    lui a5,0xfc000
    0x840139dc    0x168    srli a5,a5,0x19
    0x840139de    0x16a    and a4,s1,a5
    0x840139e2    0x16e    slli a2,a2,0x26
    0x840139e4    0x170    and s1,s1,a2
    0x840139e6    0x172    beqz s1,ffffffff840139ee <finaliseCap+0x17a>
    0x840139e8    0x174    li a5,-1
    0x840139ea    0x176    slli a5,a5,0x27
    0x840139ec    0x178    or a4,a4,a5
    0x840139ee    0x17a    li a5,-7
    0x840139f0    0x17c    slli a5,a5,0x3c
    0x840139f2    0x17e    or a5,a5,a0
    0x840139f4    0x180    sd a5,0(s0)           ; stack access
    0x840139f6    0x182    addiw a3,a3,1
    0x840139f8    0x184    li a5,-1
    0x840139fa    0x186    sll a5,a5,a3
    0x840139fe    0x18a    not a5,a5
    0x84013a02    0x18e    xor a3,a1,a4
    0x84013a06    0x192    and a5,a5,a3
    0x84013a08    0x194    xor a5,a5,a4
    0x84013a0a    0x196    sd a5,8(s0)           ; stack access
    0x84013a0c    0x198    sd zero,16(s0)        ; stack access
    0x84013a10    0x19c    sd zero,24(s0)        ; stack access
    0x84013a14    0x1a0    j ffffffff840138b4 <finaliseCap+0x40>
    0x84013a16    0x1a2    beqz a3,ffffffff84013ada <finaliseCap+0x266>
    0x84013a18    0x1a4    slli s2,s1,0x19
    0x84013a1c    0x1a8    srli s2,s2,0x19
    0x84013a20    0x1ac    srli a5,s1,0x26
    0x84013a24    0x1b0    andi a5,a5,1
    0x84013a26    0x1b2    beqz a5,ffffffff84013a30 <finaliseCap+0x1bc>
    0x84013a28    0x1b4    li a5,-1
    0x84013a2a    0x1b6    slli a5,a5,0x27
    0x84013a2c    0x1b8    or s2,s2,a5
    0x84013a30    0x1bc    mv s3,s2
    0x84013a32    0x1be    andi s1,s2,-1024
    0x84013a36    0x1c2    mv a0,s2
    0x84013a38    0x1c4    jal ra,ffffffff84011dd2 <unbindNotification>
    0x84013a3c    0x1c8    ld a5,368(s2)
    0x84013a40    0x1cc    beqz a5,ffffffff84013a52 <finaliseCap+0x1de>
    0x84013a42    0x1ce    ld a0,56(a5)
    0x84013a44    0x1d0    jal ra,ffffffff8401280c <schedContext_completeYieldTo>
    0x84013a48    0x1d4    mv a1,s2
    0x84013a4a    0x1d6    ld a0,368(s2)
    0x84013a4e    0x1da    jal ra,ffffffff84013828 <schedContext_unbindTCB>
    0x84013a52    0x1de    mv a0,s3
    0x84013a54    0x1e0    jal ra,ffffffff840137e4 <suspend>
    0x84013a58    0x1e4    li a5,-7
    0x84013a5a    0x1e6    slli a5,a5,0x3c
    0x84013a5c    0x1e8    addi a5,a5,64 # fffffffffc000040 <ki_end+0x77fce040>
    0x84013a60    0x1ec    sd a5,0(s0)           ; stack access
    0x84013a62    0x1ee    xori s1,s1,5
    0x84013a66    0x1f2    sd s1,8(s0)           ; stack access
    0x84013a68    0x1f4    sd zero,16(s0)        ; stack access
    0x84013a6c    0x1f8    sd zero,24(s0)        ; stack access
    0x84013a70    0x1fc    j ffffffff840138b4 <finaliseCap+0x40>
    0x84013a72    0x1fe    beqz a3,ffffffff84013ada <finaliseCap+0x266>
    0x84013a74    0x200    srli s2,s2,0x10
    0x84013a78    0x204    slli s1,s2,0x19
    0x84013a7c    0x208    srli s1,s1,0x19
    0x84013a7e    0x20a    srli s2,s2,0x26
    0x84013a82    0x20e    andi a5,s2,1
    0x84013a86    0x212    beqz a5,ffffffff84013a8e <finaliseCap+0x21a>
    0x84013a88    0x214    li a5,-1
    0x84013a8a    0x216    slli a5,a5,0x27
    0x84013a8c    0x218    or s1,s1,a5
    0x84013a8e    0x21a    mv s2,s1
    0x84013a90    0x21c    mv a0,s1
    0x84013a92    0x21e    jal ra,ffffffff84013860 <schedContext_unbindAllTCBs>
    0x84013a96    0x222    mv a0,s1
    0x84013a98    0x224    jal ra,ffffffff840125c6 <schedContext_unbindNtfn>
    0x84013a9c    0x228    ld a5,32(s1)
    0x84013a9e    0x22a    beqz a5,ffffffff84013aa8 <finaliseCap+0x234>
    0x84013aa0    0x22c    sd zero,16(a5)
    0x84013aa4    0x230    sd zero,32(s1)
    0x84013aa8    0x234    ld a0,56(s2)
    0x84013aac    0x238    beqz a0,ffffffff84013ab2 <finaliseCap+0x23e>
    0x84013aae    0x23a    jal ra,ffffffff8401280c <schedContext_completeYieldTo>
    0x84013ab2    0x23e    sd zero,64(s2)
    0x84013ab6    0x242    sd zero,0(s0)         ; stack access
    0x84013aba    0x246    sd zero,8(s0)         ; stack access
    0x84013abe    0x24a    sd zero,16(s0)        ; stack access
    0x84013ac2    0x24e    sd zero,24(s0)        ; stack access
    0x84013ac6    0x252    j ffffffff840138b4 <finaliseCap+0x40>
    0x84013ac8    0x254    sd s1,0(s0)           ; stack access
    0x84013aca    0x256    sd s2,8(s0)           ; stack access
    0x84013ace    0x25a    sd zero,16(s0)        ; stack access
    0x84013ad2    0x25e    sd zero,24(s0)        ; stack access
    0x84013ad6    0x262    j ffffffff840138b4 <finaliseCap+0x40>
    0x84013ad8    0x264    bnez a3,ffffffff84013aec <finaliseCap+0x278>
    0x84013ada    0x266    sd zero,0(s0)         ; stack access
    0x84013ade    0x26a    sd zero,8(s0)         ; stack access
    0x84013ae2    0x26e    sd zero,16(s0)        ; stack access
    0x84013ae6    0x272    sd zero,24(s0)        ; stack access
    0x84013aea    0x276    j ffffffff840138b4 <finaliseCap+0x40>
    0x84013aec    0x278    slli a0,s2,0x34
    0x84013af0    0x27c    srli a0,a0,0x34
    0x84013af2    0x27e    jal ra,ffffffff84013c54 <deletingIRQHandler>
    0x84013af6    0x282    sd zero,0(s0)         ; stack access
    0x84013afa    0x286    sd zero,8(s0)         ; stack access
    0x84013afe    0x28a    sd s1,16(s0)          ; stack access
    0x84013b00    0x28c    sd s2,24(s0)          ; stack access
    0x84013b04    0x290    j ffffffff840138b4 <finaliseCap+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
219 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 469 nodes.

Section decodeRISCVMMUInvocation (298 of 301)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 768 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

56 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x84017b66      0x0    addi sp,sp,-208
    0x84017b68      0x2    sd ra,200(sp)         ; stack access
    0x84017b6a      0x4    sd s0,192(sp)         ; stack access
    0x84017b6c      0x6    sd s1,184(sp)         ; stack access
    0x84017b6e      0x8    sd s2,176(sp)         ; stack access
    0x84017b70      0xa    sd s3,168(sp)         ; stack access
    0x84017b72      0xc    sd s4,160(sp)         ; stack access
    0x84017b74      0xe    sd s5,152(sp)         ; stack access
    0x84017b76     0x10    sd s6,144(sp)         ; stack access
    0x84017b78     0x12    sd s7,136(sp)         ; stack access
    0x84017b7a     0x14    sd s8,128(sp)         ; stack access
    0x84017b7c     0x16    sd s9,120(sp)         ; stack access
    0x84017b7e     0x18    sd s10,112(sp)        ; stack access
    0x84017b80     0x1a    sd s11,104(sp)        ; stack access
    0x84017b82     0x1c    sd a4,0(sp)           ; stack access
    0x84017b84     0x1e    sd a5,8(sp)           ; stack access
    0x84017b86     0x20    mv s3,a6
    0x84017b88     0x22    srli s0,a4,0x3b
    0x84017b8c     0x26    li a5,11
    0x84017b8e     0x28    beq s0,a5,ffffffff8401819e <decodeRISCVMMUInvocation+0x638>
    0x84017b92     0x2c    mv s2,a3
    0x84017b94     0x2e    mv s1,a4
    0x84017b96     0x30    bltu a5,s0,ffffffff84017cd2 <decodeRISCVMMUInvocation+0x16c>
    0x84017b9a     0x34    li a5,1
    0x84017b9c     0x36    beq s0,a5,ffffffff84017e50 <decodeRISCVMMUInvocation+0x2ea>
    0x84017ba0     0x3a    li a5,3
    0x84017ba2     0x3c    bne s0,a5,ffffffff84018430 <decodeRISCVMMUInvocation+0x8ca>
    0x84017ba6     0x40    ld a5,0(sp)           ; stack access
    0x84017ba8     0x42    sd a5,16(sp)          ; stack access
    0x84017baa     0x44    ld s4,8(sp)           ; stack access
    0x84017bac     0x46    sd s4,24(sp)          ; stack access
    0x84017bae     0x48    li a5,37
    0x84017bb2     0x4c    beq a0,a5,ffffffff84017d4c <decodeRISCVMMUInvocation+0x1e6>
    0x84017bb6     0x50    li a5,36
    0x84017bba     0x54    bne a0,a5,ffffffff84017dbc <decodeRISCVMMUInvocation+0x256>
    0x84017bbe     0x58    li a5,1
    0x84017bc0     0x5a    bgeu a5,a1,ffffffff84017dc8 <decodeRISCVMMUInvocation+0x262>
    0x84017bc4     0x5e    auipc a4,0x3
    0x84017bc8     0x62    ld a4,1228(a4) # ffffffff8401b090 <current_extra_caps>
    0x84017bcc     0x66    beqz a4,ffffffff84017dc8 <decodeRISCVMMUInvocation+0x262>
    0x84017bd0     0x6a    srli a5,s1,0x27
    0x84017bd4     0x6e    andi a5,a5,1
    0x84017bd6     0x70    bnez a5,ffffffff84017dd4 <decodeRISCVMMUInvocation+0x26e>
    0x84017bda     0x74    ld a5,0(a4)
    0x84017bdc     0x76    srli s5,a5,0x3b
    0x84017be0     0x7a    li a3,3
    0x84017be2     0x7c    bne s5,a3,ffffffff84017de8 <decodeRISCVMMUInvocation+0x282>
    0x84017be6     0x80    srli a5,a5,0x27
    0x84017be8     0x82    andi a5,a5,1
    0x84017bea     0x84    beqz a5,ffffffff84017de8 <decodeRISCVMMUInvocation+0x282>
    0x84017bee     0x88    ld s8,8(a4)
    0x84017bf2     0x8c    srli a5,s8,0x9
    0x84017bf6     0x90    slli s0,a5,0x19
    0x84017bfa     0x94    srli s0,s0,0x19
    0x84017bfc     0x96    srli a5,a5,0x26
    0x84017bfe     0x98    andi a5,a5,1
    0x84017c00     0x9a    beqz a5,ffffffff84017c08 <decodeRISCVMMUInvocation+0xa2>
    0x84017c02     0x9c    li a5,-1
    0x84017c04     0x9e    slli a5,a5,0x27
    0x84017c06     0xa0    or s0,s0,a5
    0x84017c08     0xa2    mv a1,s3
    0x84017c0a     0xa4    li a0,0
    0x84017c0c     0xa6    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017c10     0xaa    mv s6,a0
    0x84017c12     0xac    srli a0,s8,0x30
    0x84017c16     0xb0    lui a5,0xfefff
    0x84017c1a     0xb4    slli a5,a5,0xe
    0x84017c1c     0xb6    srli a5,a5,0x1a
    0x84017c1e     0xb8    bltu a5,s6,ffffffff84017dfe <decodeRISCVMMUInvocation+0x298>
    0x84017c22     0xbc    jal ra,ffffffff84010182 <findVSpaceForASID>
    0x84017c26     0xc0    sd a0,64(sp)          ; stack access
    0x84017c28     0xc2    sd a1,72(sp)          ; stack access
    0x84017c2a     0xc4    bnez a0,ffffffff84017e14 <decodeRISCVMMUInvocation+0x2ae>
    0x84017c2e     0xc8    ld a5,72(sp)          ; stack access
    0x84017c30     0xca    bne s0,a5,ffffffff84017e2a <decodeRISCVMMUInvocation+0x2c4>
    0x84017c34     0xce    mv a1,s6
    0x84017c36     0xd0    mv a0,s0
    0x84017c38     0xd2    jal ra,ffffffff840107b2 <lookupPTSlot>
    0x84017c3c     0xd6    mv s7,a0
    0x84017c3e     0xd8    mv s3,a1
    0x84017c40     0xda    sd a0,48(sp)          ; stack access
    0x84017c42     0xdc    sd a1,56(sp)          ; stack access
    0x84017c44     0xde    li a5,12
    0x84017c46     0xe0    beq a1,a5,ffffffff84017e42 <decodeRISCVMMUInvocation+0x2dc>
    0x84017c4a     0xe4    ld s0,0(a0)
    0x84017c4c     0xe6    andi s0,s0,1
    0x84017c4e     0xe8    bnez s0,ffffffff84017e42 <decodeRISCVMMUInvocation+0x2dc>
    0x84017c52     0xec    srli a5,s4,0x9
    0x84017c56     0xf0    slli s5,a5,0x19
    0x84017c5a     0xf4    srli s5,s5,0x19
    0x84017c5e     0xf8    srli a5,a5,0x26
    0x84017c60     0xfa    andi a5,a5,1
    0x84017c62     0xfc    beqz a5,ffffffff84017c6c <decodeRISCVMMUInvocation+0x106>
    0x84017c64     0xfe    li a5,-1
    0x84017c66    0x100    slli a5,a5,0x27
    0x84017c68    0x102    or s5,s5,a5
    0x84017c6c    0x106    li s9,-1
    0x84017c6e    0x108    srli a5,s9,0x10
    0x84017c72    0x10c    and s4,s4,a5
    0x84017c76    0x110    slli a5,s9,0x30
    0x84017c7a    0x114    and s8,s8,a5
    0x84017c7e    0x118    or s4,s4,s8
    0x84017c82    0x11c    li a1,2
    0x84017c84    0x11e    auipc a0,0x15
    0x84017c88    0x122    ld a0,980(a0) # ffffffff8402d058 <ksCurThread>
    0x84017c8c    0x126    jal ra,ffffffff84012996 <setThreadState>
    0x84017c90    0x12a    li a4,1
    0x84017c92    0x12c    sll a5,a4,s3
    0x84017c96    0x130    neg a5,a5
    0x84017c9a    0x134    and a5,a5,s6
    0x84017c9e    0x138    slli s9,s9,0x28
    0x84017ca0    0x13a    and s1,s1,s9
    0x84017ca4    0x13e    or a5,a5,s1
    0x84017ca6    0x140    slli a3,a4,0x27
    0x84017caa    0x144    or a5,a5,a3
    0x84017cac    0x146    sd a5,0(s2)
    0x84017cb0    0x14a    sd s4,8(s2)
    0x84017cb4    0x14e    slli a5,a4,0x26
    0x84017cb8    0x152    add a5,a5,s5
    0x84017cba    0x154    srli a5,a5,0x2
    0x84017cbc    0x156    lui a4,0xfff00
    0x84017cc0    0x15a    srli a4,a4,0xa
    0x84017cc2    0x15c    and a5,a5,a4
    0x84017cc4    0x15e    ori a5,a5,193
    0x84017cc8    0x162    sd a5,0(s7)
    0x84017ccc    0x166    sfence.vma
    0x84017cd0    0x16a    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017cd2    0x16c    li a5,13
    0x84017cd4    0x16e    bne s0,a5,ffffffff84018430 <decodeRISCVMMUInvocation+0x8ca>
    0x84017cd8    0x172    li a5,42
    0x84017cdc    0x176    bne a0,a5,ffffffff84018340 <decodeRISCVMMUInvocation+0x7da>
    0x84017ce0    0x17a    auipc s3,0x3
    0x84017ce4    0x17e    ld s3,944(s3) # ffffffff8401b090 <current_extra_caps>
    0x84017ce8    0x182    beqz s3,ffffffff8401834e <decodeRISCVMMUInvocation+0x7e8>
    0x84017cec    0x186    ld s2,0(s3)
    0x84017cf0    0x18a    srli s0,s2,0x3b
    0x84017cf4    0x18e    li a5,3
    0x84017cf6    0x190    bne s0,a5,ffffffff8401835c <decodeRISCVMMUInvocation+0x7f6>
    0x84017cfa    0x194    srli s2,s2,0x27
    0x84017cfe    0x198    andi s2,s2,1
    0x84017d02    0x19c    bnez s2,ffffffff8401835c <decodeRISCVMMUInvocation+0x7f6>
    0x84017d06    0x1a0    srli a2,a4,0x2b
    0x84017d0a    0x1a4    slli a2,a2,0x30
    0x84017d0c    0x1a6    srli a2,a2,0x30
    0x84017d0e    0x1a8    srli a5,a2,0x9
    0x84017d12    0x1ac    slli a4,a5,0x3
    0x84017d16    0x1b0    auipc a5,0x3
    0x84017d1a    0x1b4    addi a5,a5,-1302 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017d1e    0x1b8    add a5,a5,a4
    0x84017d20    0x1ba    ld s4,0(a5)
    0x84017d24    0x1be    beqz s4,ffffffff84018374 <decodeRISCVMMUInvocation+0x80e>
    0x84017d28    0x1c2    slli s1,s1,0x2
    0x84017d2a    0x1c4    lui a5,0xf8000
    0x84017d2e    0x1c8    srli a5,a5,0x19
    0x84017d30    0x1ca    and a5,a5,s1
    0x84017d32    0x1cc    srli s1,s1,0x26
    0x84017d34    0x1ce    andi s1,s1,1
    0x84017d36    0x1d0    beqz s1,ffffffff84017d3e <decodeRISCVMMUInvocation+0x1d8>
    0x84017d38    0x1d2    li a4,-1
    0x84017d3a    0x1d4    slli a4,a4,0x27
    0x84017d3c    0x1d6    or a5,a5,a4
    0x84017d3e    0x1d8    bne s4,a5,ffffffff84018390 <decodeRISCVMMUInvocation+0x82a>
    0x84017d42    0x1dc    mv a4,s4
    0x84017d44    0x1de    mv a5,s2
    0x84017d46    0x1e0    li a1,512
    0x84017d4a    0x1e4    j ffffffff840183ac <decodeRISCVMMUInvocation+0x846>
    0x84017d4c    0x1e6    mv a0,a3
    0x84017d4e    0x1e8    jal ra,ffffffff84012382 <isFinalCapability>
    0x84017d52    0x1ec    beqz a0,ffffffff84017d9e <decodeRISCVMMUInvocation+0x238>
    0x84017d54    0x1ee    srli a5,s1,0x27
    0x84017d58    0x1f2    andi a5,a5,1
    0x84017d5a    0x1f4    beqz a5,ffffffff84017d82 <decodeRISCVMMUInvocation+0x21c>
    0x84017d5c    0x1f6    srli a0,s4,0x30
    0x84017d60    0x1fa    jal ra,ffffffff84010182 <findVSpaceForASID>
    0x84017d64    0x1fe    sd a0,64(sp)          ; stack access
    0x84017d66    0x200    sd a1,72(sp)          ; stack access
    0x84017d68    0x202    srli a5,s4,0x9
    0x84017d6c    0x206    slli a4,a5,0x19
    0x84017d70    0x20a    srli a4,a4,0x19
    0x84017d72    0x20c    srli a5,a5,0x26
    0x84017d74    0x20e    andi a5,a5,1
    0x84017d76    0x210    beqz a5,ffffffff84017d7e <decodeRISCVMMUInvocation+0x218>
    0x84017d78    0x212    li a5,-1
    0x84017d7a    0x214    slli a5,a5,0x27
    0x84017d7c    0x216    or a4,a4,a5
    0x84017d7e    0x218    ld a5,64(sp)          ; stack access
    0x84017d80    0x21a    beqz a5,ffffffff84017daa <decodeRISCVMMUInvocation+0x244>
    0x84017d82    0x21c    li a1,2
    0x84017d84    0x21e    auipc a0,0x15
    0x84017d88    0x222    ld a0,724(a0) # ffffffff8402d058 <ksCurThread>
    0x84017d8c    0x226    jal ra,ffffffff84012996 <setThreadState>
    0x84017d90    0x22a    mv a2,s2
    0x84017d92    0x22c    mv a0,s1
    0x84017d94    0x22e    mv a1,s4
    0x84017d96    0x230    jal ra,ffffffff84017afa <performPageTableInvocationUnmap>
    0x84017d9a    0x234    mv s0,a0
    0x84017d9c    0x236    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017d9e    0x238    li a5,9
    0x84017da0    0x23a    auipc a4,0x3
    0x84017da4    0x23e    sd a5,-352(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017da8    0x242    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017daa    0x244    ld a5,72(sp)          ; stack access
    0x84017dac    0x246    bne a5,a4,ffffffff84017d82 <decodeRISCVMMUInvocation+0x21c>
    0x84017db0    0x24a    li a5,9
    0x84017db2    0x24c    auipc a4,0x3
    0x84017db6    0x250    sd a5,-370(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017dba    0x254    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017dbc    0x256    li a5,3
    0x84017dbe    0x258    auipc a4,0x3
    0x84017dc2    0x25c    sd a5,-382(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017dc6    0x260    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017dc8    0x262    li a5,7
    0x84017dca    0x264    auipc a4,0x3
    0x84017dce    0x268    sd a5,-394(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017dd2    0x26c    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017dd4    0x26e    auipc a5,0x3
    0x84017dd8    0x272    addi a5,a5,-1492 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017ddc    0x276    li a4,2
    0x84017dde    0x278    sd a4,1088(a5)
    0x84017de2    0x27c    sd zero,1048(a5)
    0x84017de6    0x280    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017de8    0x282    auipc a5,0x3
    0x84017dec    0x286    addi a5,a5,-1512 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017df0    0x28a    li a4,2
    0x84017df2    0x28c    sd a4,1088(a5)
    0x84017df6    0x290    li a4,1
    0x84017df8    0x292    sd a4,1048(a5)
    0x84017dfc    0x296    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017dfe    0x298    auipc a5,0x3
    0x84017e02    0x29c    addi a5,a5,-1534 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017e06    0x2a0    li a4,1
    0x84017e08    0x2a2    sd a4,1088(a5)
    0x84017e0c    0x2a6    sd zero,1040(a5)
    0x84017e10    0x2aa    mv s0,s5
    0x84017e12    0x2ac    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017e14    0x2ae    auipc a5,0x3
    0x84017e18    0x2b2    addi a5,a5,-1556 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017e1c    0x2b6    li a4,6
    0x84017e1e    0x2b8    sd a4,1088(a5)
    0x84017e22    0x2bc    sd zero,1080(a5)
    0x84017e26    0x2c0    mv s0,s5
    0x84017e28    0x2c2    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017e2a    0x2c4    auipc a5,0x3
    0x84017e2e    0x2c8    addi a5,a5,-1578 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017e32    0x2cc    li a4,2
    0x84017e34    0x2ce    sd a4,1088(a5)
    0x84017e38    0x2d2    li a4,1
    0x84017e3a    0x2d4    sd a4,1048(a5)
    0x84017e3e    0x2d8    mv s0,s5
    0x84017e40    0x2da    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017e42    0x2dc    li a5,8
    0x84017e44    0x2de    auipc a4,0x3
    0x84017e48    0x2e2    sd a5,-516(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017e4c    0x2e6    mv s0,s5
    0x84017e4e    0x2e8    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017e50    0x2ea    ld a5,0(sp)           ; stack access
    0x84017e52    0x2ec    sd a5,32(sp)          ; stack access
    0x84017e54    0x2ee    ld s4,8(sp)           ; stack access
    0x84017e56    0x2f0    sd s4,40(sp)          ; stack access
    0x84017e58    0x2f2    li a5,39
    0x84017e5c    0x2f6    beq a0,a5,ffffffff84018140 <decodeRISCVMMUInvocation+0x5da>
    0x84017e60    0x2fa    li a5,40
    0x84017e64    0x2fe    beq a0,a5,ffffffff8401815c <decodeRISCVMMUInvocation+0x5f6>
    0x84017e68    0x302    li a5,38
    0x84017e6c    0x306    beq a0,a5,ffffffff84017e7e <decodeRISCVMMUInvocation+0x318>
    0x84017e70    0x30a    li a5,3
    0x84017e72    0x30c    auipc a4,0x3
    0x84017e76    0x310    sd a5,-562(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017e7a    0x314    li s0,3
    0x84017e7c    0x316    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017e7e    0x318    li a5,2
    0x84017e80    0x31a    bgeu a5,a1,ffffffff84017f0a <decodeRISCVMMUInvocation+0x3a4>
    0x84017e84    0x31e    auipc a4,0x3
    0x84017e88    0x322    ld a4,524(a4) # ffffffff8401b090 <current_extra_caps>
    0x84017e8c    0x326    beqz a4,ffffffff84017f0a <decodeRISCVMMUInvocation+0x3a4>
    0x84017e8e    0x328    ld a5,0(a4)
    0x84017e90    0x32a    srli s8,a5,0x3b
    0x84017e94    0x32e    li a3,3
    0x84017e96    0x330    bne s8,a3,ffffffff84017f18 <decodeRISCVMMUInvocation+0x3b2>
    0x84017e9a    0x334    srli a5,a5,0x27
    0x84017e9c    0x336    andi a5,a5,1
    0x84017e9e    0x338    beqz a5,ffffffff84017f18 <decodeRISCVMMUInvocation+0x3b2>
    0x84017ea0    0x33a    ld s7,8(a4)
    0x84017ea4    0x33e    srli a5,s7,0x9
    0x84017ea8    0x342    slli s0,a5,0x19
    0x84017eac    0x346    srli s0,s0,0x19
    0x84017eae    0x348    srli a5,a5,0x26
    0x84017eb0    0x34a    andi a5,a5,1
    0x84017eb2    0x34c    beqz a5,ffffffff84017eba <decodeRISCVMMUInvocation+0x354>
    0x84017eb4    0x34e    li a5,-1
    0x84017eb6    0x350    slli a5,a5,0x27
    0x84017eb8    0x352    or s0,s0,a5
    0x84017eba    0x354    mv a1,s3
    0x84017ebc    0x356    li a0,0
    0x84017ebe    0x358    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017ec2    0x35c    mv s5,a0
    0x84017ec4    0x35e    mv a1,s3
    0x84017ec6    0x360    li a0,1
    0x84017ec8    0x362    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017ecc    0x366    mv s9,a0
    0x84017ece    0x368    mv a1,s3
    0x84017ed0    0x36a    li a0,2
    0x84017ed2    0x36c    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017ed6    0x370    mv s6,a0
    0x84017ed8    0x372    mv s3,s0
    0x84017eda    0x374    srli s11,s7,0x30
    0x84017ede    0x378    mv a0,s11
    0x84017ee0    0x37a    jal ra,ffffffff84010182 <findVSpaceForASID>
    0x84017ee4    0x37e    sd a0,48(sp)          ; stack access
    0x84017ee6    0x380    sd a1,56(sp)          ; stack access
    0x84017ee8    0x382    bnez a0,ffffffff84017f30 <decodeRISCVMMUInvocation+0x3ca>
    0x84017eea    0x384    ld a5,56(sp)          ; stack access
    0x84017eec    0x386    bne s0,a5,ffffffff84017f46 <decodeRISCVMMUInvocation+0x3e0>
    0x84017ef0    0x38a    srli a5,s1,0x39
    0x84017ef4    0x38e    andi a5,a5,3
    0x84017ef6    0x390    li a4,1
    0x84017ef8    0x392    beq a5,a4,ffffffff84017f5e <decodeRISCVMMUInvocation+0x3f8>
    0x84017efc    0x396    li a4,2
    0x84017efe    0x398    beq a5,a4,ffffffff84017f62 <decodeRISCVMMUInvocation+0x3fc>
    0x84017f02    0x39c    beqz a5,ffffffff84018060 <decodeRISCVMMUInvocation+0x4fa>
    0x84017f06    0x3a0    jal ra,ffffffff84010490 <halt>
    0x84017f0a    0x3a4    li a5,7
    0x84017f0c    0x3a6    auipc a4,0x3
    0x84017f10    0x3aa    sd a5,-716(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84017f14    0x3ae    li s0,3
    0x84017f16    0x3b0    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017f18    0x3b2    auipc a5,0x3
    0x84017f1c    0x3b6    addi a5,a5,-1816 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017f20    0x3ba    li a4,2
    0x84017f22    0x3bc    sd a4,1088(a5)
    0x84017f26    0x3c0    li a4,1
    0x84017f28    0x3c2    sd a4,1048(a5)
    0x84017f2c    0x3c6    li s0,3
    0x84017f2e    0x3c8    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017f30    0x3ca    auipc a5,0x3
    0x84017f34    0x3ce    addi a5,a5,-1840 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017f38    0x3d2    li a4,6
    0x84017f3a    0x3d4    sd a4,1088(a5)
    0x84017f3e    0x3d8    sd zero,1080(a5)
    0x84017f42    0x3dc    mv s0,s8
    0x84017f44    0x3de    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017f46    0x3e0    auipc a5,0x3
    0x84017f4a    0x3e4    addi a5,a5,-1862 # ffffffff8401a800 <riscvKSASIDTable>
    0x84017f4e    0x3e8    li a4,2
    0x84017f50    0x3ea    sd a4,1088(a5)
    0x84017f54    0x3ee    li a4,1
    0x84017f56    0x3f0    sd a4,1048(a5)
    0x84017f5a    0x3f4    mv s0,s8
    0x84017f5c    0x3f6    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84017f5e    0x3f8    li s10,21
    0x84017f60    0x3fa    j ffffffff84017f64 <decodeRISCVMMUInvocation+0x3fe>
    0x84017f62    0x3fc    li s10,30
    0x84017f64    0x3fe    sext.w a3,s10
    0x84017f68    0x402    addi a4,s5,-1
    0x84017f6c    0x406    li a5,1
    0x84017f6e    0x408    sll a5,a5,s10
    0x84017f72    0x40c    add a4,a4,a5
    0x84017f74    0x40e    lui a5,0xfefff
    0x84017f78    0x412    slli a5,a5,0xe
    0x84017f7a    0x414    srli a5,a5,0x1a
    0x84017f7c    0x416    bltu a5,a4,ffffffff84018064 <decodeRISCVMMUInvocation+0x4fe>
    0x84017f80    0x41a    li s0,-1
    0x84017f82    0x41c    sll s0,s0,a3
    0x84017f86    0x420    not s0,s0
    0x84017f8a    0x424    and s0,s0,s5
    0x84017f8e    0x428    bnez s0,ffffffff8401807a <decodeRISCVMMUInvocation+0x514>
    0x84017f90    0x42a    mv a1,s5
    0x84017f92    0x42c    mv a0,s3
    0x84017f94    0x42e    jal ra,ffffffff840107b2 <lookupPTSlot>
    0x84017f98    0x432    mv s3,a0
    0x84017f9a    0x434    sd a0,64(sp)          ; stack access
    0x84017f9c    0x436    sd a1,72(sp)          ; stack access
    0x84017f9e    0x438    bne a1,s10,ffffffff84018088 <decodeRISCVMMUInvocation+0x522>
    0x84017fa2    0x43c    srli a5,s4,0x30
    0x84017fa6    0x440    bnez a5,ffffffff840180b2 <decodeRISCVMMUInvocation+0x54c>
    0x84017faa    0x444    ld a5,0(a0)
    0x84017fac    0x446    andi a5,a5,1
    0x84017fae    0x448    bnez a5,ffffffff8401812a <decodeRISCVMMUInvocation+0x5c4>
    0x84017fb2    0x44c    srli a0,s1,0x37
    0x84017fb6    0x450    mv a1,s9
    0x84017fb8    0x452    andi a0,a0,3
    0x84017fba    0x454    jal ra,ffffffff84010b82 <maskVMRights>
    0x84017fbe    0x458    srli a4,s4,0x9
    0x84017fc2    0x45c    slli a5,a4,0x19
    0x84017fc6    0x460    srli a5,a5,0x19
    0x84017fc8    0x462    srli a4,a4,0x26
    0x84017fca    0x464    andi a4,a4,1
    0x84017fcc    0x466    beqz a4,ffffffff84017fd4 <decodeRISCVMMUInvocation+0x46e>
    0x84017fce    0x468    li a4,-1
    0x84017fd0    0x46a    slli a4,a4,0x27
    0x84017fd2    0x46c    or a5,a5,a4
    0x84017fd4    0x46e    li a1,1
    0x84017fd6    0x470    slli a4,a1,0x26
    0x84017fda    0x474    add a5,a5,a4
    0x84017fdc    0x476    li a4,-1
    0x84017fde    0x478    srli a3,a4,0x10
    0x84017fe2    0x47c    and s4,s4,a3
    0x84017fe6    0x480    slli a3,a4,0x30
    0x84017fea    0x484    and s7,s7,a3
    0x84017fee    0x488    or s4,s4,s7
    0x84017ff2    0x48c    slli a3,a4,0x27
    0x84017ff6    0x490    and s1,s1,a3
    0x84017ff8    0x492    srli a4,a4,0x19
    0x84017ffa    0x494    and s5,s5,a4
    0x84017ffe    0x498    or s5,s1,s5
    0x84018002    0x49c    andi s6,s6,1
    0x84018006    0x4a0    xori a2,s6,1
    0x8401800a    0x4a4    addi a3,a0,-3
    0x8401800e    0x4a8    seqz a3,a3
    0x84018012    0x4ac    addi a4,a0,-1
    0x84018016    0x4b0    snez a4,a4
    0x8401801a    0x4b4    beq a0,a1,ffffffff84018138 <decodeRISCVMMUInvocation+0x5d2>
    0x8401801e    0x4b8    srli s1,a5,0x2
    0x84018022    0x4bc    lui a5,0xfff00
    0x84018026    0x4c0    srli a5,a5,0xa
    0x84018028    0x4c2    and s1,s1,a5
    0x8401802a    0x4c4    slli a5,a2,0x3
    0x8401802e    0x4c8    or s1,s1,a5
    0x84018030    0x4ca    slli a5,a3,0x2
    0x84018034    0x4ce    or s1,s1,a5
    0x84018036    0x4d0    slli a5,a4,0x1
    0x8401803a    0x4d4    or s1,s1,a5
    0x8401803c    0x4d6    ori s1,s1,209
    0x84018040    0x4da    li a1,2
    0x84018042    0x4dc    auipc a0,0x15
    0x84018046    0x4e0    ld a0,22(a0) # ffffffff8402d058 <ksCurThread>
    0x8401804a    0x4e4    jal ra,ffffffff84012996 <setThreadState>
    0x8401804e    0x4e8    sd s5,0(s2)
    0x84018052    0x4ec    sd s4,8(s2)
    0x84018056    0x4f0    sd s1,0(s3)
    0x8401805a    0x4f4    sfence.vma
    0x8401805e    0x4f8    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018060    0x4fa    li s10,12
    0x84018062    0x4fc    j ffffffff84017f64 <decodeRISCVMMUInvocation+0x3fe>
    0x84018064    0x4fe    auipc a5,0x2
    0x84018068    0x502    addi a5,a5,1948 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401806c    0x506    li a4,1
    0x8401806e    0x508    sd a4,1088(a5)
    0x84018072    0x50c    sd zero,1040(a5)
    0x84018076    0x510    mv s0,s8
    0x84018078    0x512    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401807a    0x514    li a5,5
    0x8401807c    0x516    auipc a4,0x3
    0x84018080    0x51a    sd a5,-1084(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84018084    0x51e    mv s0,s8
    0x84018086    0x520    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018088    0x522    auipc a4,0x2
    0x8401808c    0x526    addi a4,a4,1912 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018090    0x52a    slli a5,a1,0x2
    0x84018094    0x52e    andi a5,a5,508
    0x84018098    0x532    ori a5,a5,1
    0x8401809c    0x536    sd a5,1024(a4)
    0x840180a0    0x53a    sd zero,1032(a4)
    0x840180a4    0x53e    li a5,6
    0x840180a6    0x540    sd a5,1088(a4)
    0x840180aa    0x544    sd zero,1080(a4)
    0x840180ae    0x548    mv s0,s8
    0x840180b0    0x54a    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x840180b2    0x54c    beq s11,a5,ffffffff840180ce <decodeRISCVMMUInvocation+0x568>
    0x840180b6    0x550    auipc a5,0x2
    0x840180ba    0x554    addi a5,a5,1866 # ffffffff8401a800 <riscvKSASIDTable>
    0x840180be    0x558    li a4,2
    0x840180c0    0x55a    sd a4,1088(a5)
    0x840180c4    0x55e    li a4,1
    0x840180c6    0x560    sd a4,1048(a5)
    0x840180ca    0x564    mv s0,s8
    0x840180cc    0x566    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x840180ce    0x568    slli a5,s1,0x19
    0x840180d2    0x56c    srli a5,a5,0x19
    0x840180d4    0x56e    srli a4,s1,0x26
    0x840180d8    0x572    andi a4,a4,1
    0x840180da    0x574    beqz a4,ffffffff840180e2 <decodeRISCVMMUInvocation+0x57c>
    0x840180dc    0x576    li a4,-1
    0x840180de    0x578    slli a4,a4,0x27
    0x840180e0    0x57a    or a5,a5,a4
    0x840180e2    0x57c    bne s5,a5,ffffffff84018114 <decodeRISCVMMUInvocation+0x5ae>
    0x840180e6    0x580    ld a4,0(s3)
    0x840180ea    0x584    andi a5,a4,1
    0x840180ee    0x588    beqz a5,ffffffff84017fb2 <decodeRISCVMMUInvocation+0x44c>
    0x840180f2    0x58c    srli a5,a4,0x1
    0x840180f6    0x590    srli a3,a4,0x2
    0x840180fa    0x594    or a5,a5,a3
    0x840180fc    0x596    srli a4,a4,0x3
    0x840180fe    0x598    or a5,a5,a4
    0x84018100    0x59a    andi a5,a5,1
    0x84018102    0x59c    bnez a5,ffffffff84017fb2 <decodeRISCVMMUInvocation+0x44c>
    0x84018106    0x5a0    li a5,8
    0x84018108    0x5a2    auipc a4,0x3
    0x8401810c    0x5a6    sd a5,-1224(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84018110    0x5aa    mv s0,s8
    0x84018112    0x5ac    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018114    0x5ae    auipc a5,0x2
    0x84018118    0x5b2    addi a5,a5,1772 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401811c    0x5b6    li a4,1
    0x8401811e    0x5b8    sd a4,1088(a5)
    0x84018122    0x5bc    sd zero,1040(a5)
    0x84018126    0x5c0    mv s0,s8
    0x84018128    0x5c2    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401812a    0x5c4    li a5,8
    0x8401812c    0x5c6    auipc a4,0x3
    0x84018130    0x5ca    sd a5,-1260(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84018134    0x5ce    mv s0,s8
    0x84018136    0x5d0    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018138    0x5d2    beqz s6,ffffffff8401801e <decodeRISCVMMUInvocation+0x4b8>
    0x8401813c    0x5d6    mv s1,s0
    0x8401813e    0x5d8    j ffffffff84018040 <decodeRISCVMMUInvocation+0x4da>
    0x84018140    0x5da    li a1,2
    0x84018142    0x5dc    auipc a0,0x15
    0x84018146    0x5e0    ld a0,-234(a0) # ffffffff8402d058 <ksCurThread>
    0x8401814a    0x5e4    jal ra,ffffffff84012996 <setThreadState>
    0x8401814e    0x5e8    mv a2,s2
    0x84018150    0x5ea    mv a0,s1
    0x84018152    0x5ec    mv a1,s4
    0x84018154    0x5ee    jal ra,ffffffff84010bda <performPageInvocationUnmap>
    0x84018158    0x5f2    mv s0,a0
    0x8401815a    0x5f4    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401815c    0x5f6    li a1,2
    0x8401815e    0x5f8    auipc a0,0x15
    0x84018162    0x5fc    ld a0,-262(a0) # ffffffff8402d058 <ksCurThread>
    0x84018166    0x600    jal ra,ffffffff84012996 <setThreadState>
    0x8401816a    0x604    srli s4,s4,0x9
    0x8401816e    0x608    slli a5,s4,0x19
    0x84018172    0x60c    srli a5,a5,0x19
    0x84018174    0x60e    srli s4,s4,0x26
    0x84018178    0x612    andi s4,s4,1
    0x8401817c    0x616    beqz s4,ffffffff84018186 <decodeRISCVMMUInvocation+0x620>
    0x84018180    0x61a    li a4,-1
    0x84018182    0x61c    slli a4,a4,0x27
    0x84018184    0x61e    or a5,a5,a4
    0x84018186    0x620    auipc a4,0x15
    0x8401818a    0x624    ld a4,-302(a4) # ffffffff8402d058 <ksCurThread>
    0x8401818e    0x628    li a3,1
    0x84018190    0x62a    slli a2,a3,0x26
    0x84018194    0x62e    add a5,a5,a2
    0x84018196    0x630    sd a5,88(a4)
    0x84018198    0x632    sd a3,80(a4)
    0x8401819a    0x634    li s0,0
    0x8401819c    0x636    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401819e    0x638    li a5,41
    0x840181a2    0x63c    beq a0,a5,ffffffff840181d2 <decodeRISCVMMUInvocation+0x66c>
    0x840181a6    0x640    li a5,3
    0x840181a8    0x642    auipc a4,0x3
    0x840181ac    0x646    sd a5,-1384(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x840181b0    0x64a    li s0,3
    0x840181b2    0x64c    mv a0,s0
    0x840181b4    0x64e    ld ra,200(sp)         ; stack access
    0x840181b6    0x650    ld s0,192(sp)         ; stack access
    0x840181b8    0x652    ld s1,184(sp)         ; stack access
    0x840181ba    0x654    ld s2,176(sp)         ; stack access
    0x840181bc    0x656    ld s3,168(sp)         ; stack access
    0x840181be    0x658    ld s4,160(sp)         ; stack access
    0x840181c0    0x65a    ld s5,152(sp)         ; stack access
    0x840181c2    0x65c    ld s6,144(sp)         ; stack access
    0x840181c4    0x65e    ld s7,136(sp)         ; stack access
    0x840181c6    0x660    ld s8,128(sp)         ; stack access
    0x840181c8    0x662    ld s9,120(sp)         ; stack access
    0x840181ca    0x664    ld s10,112(sp)        ; stack access
    0x840181cc    0x666    ld s11,104(sp)        ; stack access
    0x840181ce    0x668    addi sp,sp,208
    0x840181d0    0x66a    ret
    0x840181d2    0x66c    li a5,1
    0x840181d4    0x66e    bgeu a5,a1,ffffffff8401823a <decodeRISCVMMUInvocation+0x6d4>
    0x840181d8    0x672    auipc s2,0x3
    0x840181dc    0x676    ld s2,-328(s2) # ffffffff8401b090 <current_extra_caps>
    0x840181e0    0x67a    beqz s2,ffffffff8401823a <decodeRISCVMMUInvocation+0x6d4>
    0x840181e4    0x67e    auipc s0,0x3
    0x840181e8    0x682    ld s0,-332(s0) # ffffffff8401b098 <current_extra_caps+0x8>
    0x840181ec    0x686    beqz s0,ffffffff8401823a <decodeRISCVMMUInvocation+0x6d4>
    0x840181ee    0x688    mv a1,a6
    0x840181f0    0x68a    li a0,0
    0x840181f2    0x68c    jal ra,ffffffff84010128 <getSyscallArg>
    0x840181f6    0x690    mv s4,a0
    0x840181f8    0x692    mv a1,s3
    0x840181fa    0x694    li a0,1
    0x840181fc    0x696    jal ra,ffffffff84010128 <getSyscallArg>
    0x84018200    0x69a    mv s3,a0
    0x84018202    0x69c    ld s5,0(s2)
    0x84018206    0x6a0    ld a2,8(s2)
    0x8401820a    0x6a4    ld a5,0(s0)
    0x8401820c    0x6a6    sd a5,48(sp)          ; stack access
    0x8401820e    0x6a8    ld a5,8(s0)
    0x84018210    0x6aa    sd a5,56(sp)          ; stack access
    0x84018212    0x6ac    auipc a5,0x2
    0x84018216    0x6b0    addi a5,a5,1518 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401821a    0x6b4    li s1,0
    0x8401821c    0x6b6    li a3,128
    0x84018220    0x6ba    ld a4,0(a5)
    0x84018222    0x6bc    beqz a4,ffffffff84018248 <decodeRISCVMMUInvocation+0x6e2>
    0x84018224    0x6be    addi s1,s1,1
    0x84018226    0x6c0    addi a5,a5,8
    0x84018228    0x6c2    bne s1,a3,ffffffff84018220 <decodeRISCVMMUInvocation+0x6ba>
    0x8401822c    0x6c6    li a5,8
    0x8401822e    0x6c8    auipc a4,0x3
    0x84018232    0x6cc    sd a5,-1518(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84018236    0x6d0    li s0,3
    0x84018238    0x6d2    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401823a    0x6d4    li a5,7
    0x8401823c    0x6d6    auipc a4,0x3
    0x84018240    0x6da    sd a5,-1532(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84018244    0x6de    li s0,3
    0x84018246    0x6e0    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018248    0x6e2    li a5,128
    0x8401824c    0x6e6    beq s1,a5,ffffffff8401822c <decodeRISCVMMUInvocation+0x6c6>
    0x84018250    0x6ea    srli a5,s5,0x3b
    0x84018254    0x6ee    li a4,2
    0x84018256    0x6f0    bne a5,a4,ffffffff8401826c <decodeRISCVMMUInvocation+0x706>
    0x8401825a    0x6f4    andi a5,a2,63
    0x8401825e    0x6f8    li a4,12
    0x84018260    0x6fa    bne a5,a4,ffffffff8401826c <decodeRISCVMMUInvocation+0x706>
    0x84018264    0x6fe    srli a5,a2,0x6
    0x84018268    0x702    andi a5,a5,1
    0x8401826a    0x704    beqz a5,ffffffff84018284 <decodeRISCVMMUInvocation+0x71e>
    0x8401826c    0x706    auipc a5,0x2
    0x84018270    0x70a    addi a5,a5,1428 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018274    0x70e    li a4,2
    0x84018276    0x710    sd a4,1088(a5)
    0x8401827a    0x714    li a4,1
    0x8401827c    0x716    sd a4,1048(a5)
    0x84018280    0x71a    li s0,3
    0x84018282    0x71c    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018284    0x71e    mv a0,s2
    0x84018286    0x720    jal ra,ffffffff84012280 <ensureNoChildren>
    0x8401828a    0x724    mv s0,a0
    0x8401828c    0x726    bnez a0,ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401828e    0x728    slli s6,s5,0x19
    0x84018292    0x72c    srli s6,s6,0x19
    0x84018296    0x730    srli a5,s5,0x26
    0x8401829a    0x734    andi a5,a5,1
    0x8401829c    0x736    beqz a5,ffffffff840182a6 <decodeRISCVMMUInvocation+0x740>
    0x8401829e    0x738    li a5,-1
    0x840182a0    0x73a    slli a5,a5,0x27
    0x840182a2    0x73c    or s6,s6,a5
    0x840182a6    0x740    mv a3,s3
    0x840182a8    0x742    mv a2,s4
    0x840182aa    0x744    ld a0,48(sp)          ; stack access
    0x840182ac    0x746    ld a1,56(sp)          ; stack access
    0x840182ae    0x748    jal ra,ffffffff840113d2 <lookupTargetSlot>
    0x840182b2    0x74c    sd a0,64(sp)          ; stack access
    0x840182b4    0x74e    sd a1,72(sp)          ; stack access
    0x840182b6    0x750    mv s0,a0
    0x840182b8    0x752    bnez a0,ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x840182bc    0x756    mv s3,a1
    0x840182be    0x758    mv a0,a1
    0x840182c0    0x75a    jal ra,ffffffff84011bc8 <ensureEmptySlot>
    0x840182c4    0x75e    mv s0,a0
    0x840182c6    0x760    bnez a0,ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x840182ca    0x764    li a1,2
    0x840182cc    0x766    auipc a0,0x15
    0x840182d0    0x76a    ld a0,-628(a0) # ffffffff8402d058 <ksCurThread>
    0x840182d4    0x76e    jal ra,ffffffff84012996 <setThreadState>
    0x840182d8    0x772    ld a5,8(s2)
    0x840182dc    0x776    andi a4,a5,63
    0x840182e0    0x77a    addiw a3,a4,-4
    0x840182e4    0x77e    lui a4,0x2000
    0x840182e8    0x782    sll a4,a4,a3
    0x840182ec    0x786    slli a5,a5,0x27
    0x840182ee    0x788    srli a5,a5,0x27
    0x840182f0    0x78a    or a5,a5,a4
    0x840182f2    0x78c    sd a5,8(s2)
    0x840182f6    0x790    lui a1,0x1
    0x840182f8    0x792    mv a0,s6
    0x840182fa    0x794    jal ra,ffffffff84017ae8 <memzero>
    0x840182fe    0x798    slli a5,s1,0x34
    0x84018302    0x79c    lui a4,0xffff
    0x84018306    0x7a0    slli a4,a4,0x1f
    0x84018308    0x7a2    and a5,a5,a4
    0x8401830a    0x7a4    srli a4,s6,0x2
    0x8401830e    0x7a8    li s4,-1
    0x84018310    0x7aa    srli a3,s4,0x1b
    0x84018314    0x7ae    and a4,a4,a3
    0x84018316    0x7b0    or a5,a5,a4
    0x84018318    0x7b2    mv a3,s3
    0x8401831a    0x7b4    mv a2,s2
    0x8401831c    0x7b6    li a0,13
    0x8401831e    0x7b8    slli a0,a0,0x3b
    0x84018320    0x7ba    or a0,a0,a5
    0x84018322    0x7bc    li a1,0
    0x84018324    0x7be    jal ra,ffffffff840118d4 <cteInsert>
    0x84018328    0x7c2    srli a5,s4,0x9
    0x8401832c    0x7c6    and a5,a5,s1
    0x8401832e    0x7c8    slli a5,a5,0x3
    0x84018330    0x7ca    auipc a4,0x2
    0x84018334    0x7ce    addi a4,a4,1232 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018338    0x7d2    add a5,a5,a4
    0x8401833a    0x7d4    sd s6,0(a5)
    0x8401833e    0x7d8    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018340    0x7da    li a5,3
    0x84018342    0x7dc    auipc a4,0x3
    0x84018346    0x7e0    sd a5,-1794(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401834a    0x7e4    li s0,3
    0x8401834c    0x7e6    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401834e    0x7e8    li a5,7
    0x84018350    0x7ea    auipc a4,0x3
    0x84018354    0x7ee    sd a5,-1808(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84018358    0x7f2    li s0,3
    0x8401835a    0x7f4    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x8401835c    0x7f6    auipc a5,0x2
    0x84018360    0x7fa    addi a5,a5,1188 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018364    0x7fe    li a4,2
    0x84018366    0x800    sd a4,1088(a5)
    0x8401836a    0x804    li a4,1
    0x8401836c    0x806    sd a4,1048(a5)
    0x84018370    0x80a    li s0,3
    0x84018372    0x80c    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018374    0x80e    auipc a5,0x2
    0x84018378    0x812    addi a5,a5,1164 # ffffffff8401a800 <riscvKSASIDTable>
    0x8401837c    0x816    li a4,6
    0x8401837e    0x818    sd a4,1088(a5)
    0x84018382    0x81c    sd zero,1080(a5)
    0x84018386    0x820    sd zero,1024(a5)
    0x8401838a    0x824    sd zero,1032(a5)
    0x8401838e    0x828    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018390    0x82a    auipc a5,0x2
    0x84018394    0x82e    addi a5,a5,1136 # ffffffff8401a800 <riscvKSASIDTable>
    0x84018398    0x832    li a4,2
    0x8401839a    0x834    sd a4,1088(a5)
    0x8401839e    0x838    sd zero,1048(a5)
    0x840183a2    0x83c    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x840183a4    0x83e    addi a5,a5,1
    0x840183a6    0x840    addi a4,a4,8
    0x840183a8    0x842    beq a5,a1,ffffffff84018424 <decodeRISCVMMUInvocation+0x8be>
    0x840183ac    0x846    add a3,a5,a2
    0x840183b0    0x84a    beqz a3,ffffffff840183a4 <decodeRISCVMMUInvocation+0x83e>
    0x840183b2    0x84c    ld a3,0(a4)
    0x840183b4    0x84e    bnez a3,ffffffff840183a4 <decodeRISCVMMUInvocation+0x83e>
    0x840183b6    0x850    li a4,512
    0x840183ba    0x854    beq a5,a4,ffffffff84018424 <decodeRISCVMMUInvocation+0x8be>
    0x840183be    0x858    add s0,a5,a2
    0x840183c2    0x85c    li a1,2
    0x840183c4    0x85e    auipc a0,0x15
    0x840183c8    0x862    ld a0,-876(a0) # ffffffff8402d058 <ksCurThread>
    0x840183cc    0x866    jal ra,ffffffff84012996 <setThreadState>
    0x840183d0    0x86a    ld a3,0(s3)
    0x840183d4    0x86e    ld a5,8(s3)
    0x840183d8    0x872    srli a4,a5,0x9
    0x840183dc    0x876    slli s1,a4,0x19
    0x840183e0    0x87a    srli s1,s1,0x19
    0x840183e2    0x87c    srli a4,a4,0x26
    0x840183e4    0x87e    andi a4,a4,1
    0x840183e6    0x880    beqz a4,ffffffff840183ee <decodeRISCVMMUInvocation+0x888>
    0x840183e8    0x882    li a4,-1
    0x840183ea    0x884    slli a4,a4,0x27
    0x840183ec    0x886    or s1,s1,a4
    0x840183ee    0x888    li a2,-1
    0x840183f0    0x88a    slli a4,a2,0x28
    0x840183f4    0x88e    and a4,a4,a3
    0x840183f6    0x890    li a3,1
    0x840183f8    0x892    slli a3,a3,0x27
    0x840183fa    0x894    or a4,a4,a3
    0x840183fc    0x896    sd a4,0(s3)
    0x84018400    0x89a    srli a2,a2,0x10
    0x84018402    0x89c    and a5,a5,a2
    0x84018404    0x89e    slli a4,s0,0x30
    0x84018408    0x8a2    or a5,a5,a4
    0x8401840a    0x8a4    sd a5,8(s3)
    0x8401840e    0x8a8    mv a0,s1
    0x84018410    0x8aa    jal ra,ffffffff8401051c <copyGlobalMappings>
    0x84018414    0x8ae    andi a5,s0,511
    0x84018418    0x8b2    slli a5,a5,0x3
    0x8401841a    0x8b4    add s4,s4,a5
    0x8401841c    0x8b6    sd s1,0(s4)
    0x84018420    0x8ba    mv s0,s2
    0x84018422    0x8bc    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018424    0x8be    li a5,8
    0x84018426    0x8c0    auipc a4,0x3
    0x8401842a    0x8c4    sd a5,-2022(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401842e    0x8c8    j ffffffff840181b2 <decodeRISCVMMUInvocation+0x64c>
    0x84018430    0x8ca    jal ra,ffffffff84010490 <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
768 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1107 nodes.

Section decodeCNodeInvocation (299 of 301)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 445 instructions.


Stack analysis
---------------

80 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x84015abc      0x0    addi sp,sp,-224
    0x84015abe      0x2    sd ra,216(sp)         ; stack access
    0x84015ac0      0x4    sd s0,208(sp)         ; stack access
    0x84015ac2      0x6    sd s1,200(sp)         ; stack access
    0x84015ac4      0x8    sd s2,192(sp)         ; stack access
    0x84015ac6      0xa    sd s3,184(sp)         ; stack access
    0x84015ac8      0xc    sd s4,176(sp)         ; stack access
    0x84015aca      0xe    sd s5,168(sp)         ; stack access
    0x84015acc     0x10    sd s6,160(sp)         ; stack access
    0x84015ace     0x12    sd s7,152(sp)         ; stack access
    0x84015ad0     0x14    sd s8,144(sp)         ; stack access
    0x84015ad2     0x16    sd a2,0(sp)           ; stack access
    0x84015ad4     0x18    sd a3,8(sp)           ; stack access
    0x84015ad6     0x1a    mv s2,a4
    0x84015ad8     0x1c    addi a4,a0,-17
    0x84015adc     0x20    li a5,7
    0x84015ade     0x22    bltu a5,a4,ffffffff84015b9e <decodeCNodeInvocation+0xe2>
    0x84015ae2     0x26    mv s1,a0
    0x84015ae4     0x28    mv s3,a1
    0x84015ae6     0x2a    li a5,1
    0x84015ae8     0x2c    bgeu a5,a1,ffffffff84015bac <decodeCNodeInvocation+0xf0>
    0x84015aec     0x30    mv a1,s2
    0x84015aee     0x32    li a0,0
    0x84015af0     0x34    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015af4     0x38    mv s0,a0
    0x84015af6     0x3a    mv a1,s2
    0x84015af8     0x3c    li a0,1
    0x84015afa     0x3e    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015afe     0x42    mv a3,a0
    0x84015b00     0x44    mv a2,s0
    0x84015b02     0x46    ld a0,0(sp)           ; stack access
    0x84015b04     0x48    ld a1,8(sp)           ; stack access
    0x84015b06     0x4a    jal ra,ffffffff840113d2 <lookupTargetSlot>
    0x84015b0a     0x4e    sd a0,112(sp)         ; stack access
    0x84015b0c     0x50    sd a1,120(sp)         ; stack access
    0x84015b0e     0x52    mv s0,a0
    0x84015b10     0x54    bnez a0,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015b12     0x56    mv s4,a1
    0x84015b14     0x58    addi a5,s1,-20
    0x84015b18     0x5c    li a4,3
    0x84015b1a     0x5e    bltu a4,a5,ffffffff84015d3e <decodeCNodeInvocation+0x282>
    0x84015b1e     0x62    li a5,3
    0x84015b20     0x64    bgeu a5,s3,ffffffff84015bd2 <decodeCNodeInvocation+0x116>
    0x84015b24     0x68    auipc s0,0x5
    0x84015b28     0x6c    ld s0,1388(s0) # ffffffff8401b090 <current_extra_caps>
    0x84015b2c     0x70    beqz s0,ffffffff84015bd2 <decodeCNodeInvocation+0x116>
    0x84015b2e     0x72    mv a1,s2
    0x84015b30     0x74    li a0,2
    0x84015b32     0x76    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015b36     0x7a    mv s6,a0
    0x84015b38     0x7c    mv a1,s2
    0x84015b3a     0x7e    li a0,3
    0x84015b3c     0x80    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015b40     0x84    mv s5,a0
    0x84015b42     0x86    ld a5,0(s0)
    0x84015b44     0x88    sd a5,24(sp)          ; stack access
    0x84015b46     0x8a    ld a5,8(s0)
    0x84015b48     0x8c    sd a5,32(sp)          ; stack access
    0x84015b4a     0x8e    mv a0,s4
    0x84015b4c     0x90    jal ra,ffffffff84011bc8 <ensureEmptySlot>
    0x84015b50     0x94    mv s0,a0
    0x84015b52     0x96    bnez a0,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015b54     0x98    mv a3,s5
    0x84015b56     0x9a    mv a2,s6
    0x84015b58     0x9c    ld a0,24(sp)          ; stack access
    0x84015b5a     0x9e    ld a1,32(sp)          ; stack access
    0x84015b5c     0xa0    jal ra,ffffffff840113b8 <lookupSourceSlot>
    0x84015b60     0xa4    sd a0,112(sp)         ; stack access
    0x84015b62     0xa6    sd a1,120(sp)         ; stack access
    0x84015b64     0xa8    mv s0,a0
    0x84015b66     0xaa    bnez a0,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015b68     0xac    mv s6,a1
    0x84015b6a     0xae    ld s7,0(a1)
    0x84015b6e     0xb2    srli a5,s7,0x3b
    0x84015b72     0xb6    beqz a5,ffffffff84015be0 <decodeCNodeInvocation+0x124>
    0x84015b74     0xb8    li a5,22
    0x84015b76     0xba    beq s1,a5,ffffffff84015cc6 <decodeCNodeInvocation+0x20a>
    0x84015b7a     0xbe    bltu a5,s1,ffffffff84015cf0 <decodeCNodeInvocation+0x234>
    0x84015b7e     0xc2    li a5,20
    0x84015b80     0xc4    beq s1,a5,ffffffff84015c0c <decodeCNodeInvocation+0x150>
    0x84015b84     0xc8    li a5,21
    0x84015b86     0xca    bne s1,a5,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015b8a     0xce    li a5,5
    0x84015b8c     0xd0    bltu a5,s3,ffffffff84015c7a <decodeCNodeInvocation+0x1be>
    0x84015b90     0xd4    li a5,7
    0x84015b92     0xd6    auipc a4,0x5
    0x84015b96     0xda    sd a5,174(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015b9a     0xde    li s0,3
    0x84015b9c     0xe0    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015b9e     0xe2    li a5,3
    0x84015ba0     0xe4    auipc a4,0x5
    0x84015ba4     0xe8    sd a5,160(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015ba8     0xec    li s0,3
    0x84015baa     0xee    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015bac     0xf0    li a5,7
    0x84015bae     0xf2    auipc a4,0x5
    0x84015bb2     0xf6    sd a5,146(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015bb6     0xfa    li s0,3
    0x84015bb8     0xfc    mv a0,s0
    0x84015bba     0xfe    ld ra,216(sp)         ; stack access
    0x84015bbc    0x100    ld s0,208(sp)         ; stack access
    0x84015bbe    0x102    ld s1,200(sp)         ; stack access
    0x84015bc0    0x104    ld s2,192(sp)         ; stack access
    0x84015bc2    0x106    ld s3,184(sp)         ; stack access
    0x84015bc4    0x108    ld s4,176(sp)         ; stack access
    0x84015bc6    0x10a    ld s5,168(sp)         ; stack access
    0x84015bc8    0x10c    ld s6,160(sp)         ; stack access
    0x84015bca    0x10e    ld s7,152(sp)         ; stack access
    0x84015bcc    0x110    ld s8,144(sp)         ; stack access
    0x84015bce    0x112    addi sp,sp,224
    0x84015bd0    0x114    ret
    0x84015bd2    0x116    li a5,7
    0x84015bd4    0x118    auipc a4,0x5
    0x84015bd8    0x11c    sd a5,108(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015bdc    0x120    li s0,3
    0x84015bde    0x122    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015be0    0x124    auipc a4,0x5
    0x84015be4    0x128    addi a4,a4,-992 # ffffffff8401a800 <riscvKSASIDTable>
    0x84015be8    0x12c    li a5,6
    0x84015bea    0x12e    sd a5,1088(a4)
    0x84015bee    0x132    li a5,1
    0x84015bf0    0x134    sd a5,1080(a4)
    0x84015bf4    0x138    slli a5,s5,0x2
    0x84015bf8    0x13c    andi a5,a5,508
    0x84015bfc    0x140    ori a5,a5,1
    0x84015c00    0x144    sd a5,1024(a4)
    0x84015c04    0x148    sd zero,1032(a4)
    0x84015c08    0x14c    li s0,3
    0x84015c0a    0x14e    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015c0c    0x150    li a5,4
    0x84015c0e    0x152    bltu a5,s3,ffffffff84015c20 <decodeCNodeInvocation+0x164>
    0x84015c12    0x156    li a5,7
    0x84015c14    0x158    auipc a4,0x5
    0x84015c18    0x15c    sd a5,44(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015c1c    0x160    li s0,3
    0x84015c1e    0x162    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015c20    0x164    mv a1,s2
    0x84015c22    0x166    li a0,4
    0x84015c24    0x168    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015c28    0x16c    ld a1,0(s6)
    0x84015c2c    0x170    ld a2,8(s6)
    0x84015c30    0x174    jal ra,ffffffff840124a2 <maskCapRights>
    0x84015c34    0x178    mv a2,a0
    0x84015c36    0x17a    mv a3,a1
    0x84015c38    0x17c    sd a0,56(sp)          ; stack access
    0x84015c3a    0x17e    sd a1,64(sp)          ; stack access
    0x84015c3c    0x180    mv a1,s6
    0x84015c3e    0x182    addi a0,sp,88
    0x84015c40    0x184    jal ra,ffffffff840122be <deriveCap>
    0x84015c44    0x188    ld a5,88(sp)          ; stack access
    0x84015c46    0x18a    bnez a5,ffffffff84015d36 <decodeCNodeInvocation+0x27a>
    0x84015c4a    0x18e    ld s1,96(sp)          ; stack access
    0x84015c4c    0x190    sd s1,40(sp)          ; stack access
    0x84015c4e    0x192    ld a5,104(sp)         ; stack access
    0x84015c50    0x194    sd a5,48(sp)          ; stack access
    0x84015c52    0x196    srli a5,s1,0x3b
    0x84015c56    0x19a    beqz a5,ffffffff84015d1a <decodeCNodeInvocation+0x25e>
    0x84015c58    0x19c    li a1,2
    0x84015c5a    0x19e    auipc a0,0x17
    0x84015c5e    0x1a2    ld a0,1022(a0) # ffffffff8402d058 <ksCurThread>
    0x84015c62    0x1a6    jal ra,ffffffff84012996 <setThreadState>
    0x84015c66    0x1aa    sd s1,40(sp)          ; stack access
    0x84015c68    0x1ac    sd s1,72(sp)          ; stack access
    0x84015c6a    0x1ae    ld a1,48(sp)          ; stack access
    0x84015c6c    0x1b0    sd a1,80(sp)          ; stack access
    0x84015c6e    0x1b2    mv a3,s4
    0x84015c70    0x1b4    mv a2,s6
    0x84015c72    0x1b6    mv a0,s1
    0x84015c74    0x1b8    jal ra,ffffffff840118d4 <cteInsert>
    0x84015c78    0x1bc    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015c7a    0x1be    mv a1,s2
    0x84015c7c    0x1c0    li a0,4
    0x84015c7e    0x1c2    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015c82    0x1c6    mv s3,a0
    0x84015c84    0x1c8    mv a1,s2
    0x84015c86    0x1ca    li a0,5
    0x84015c88    0x1cc    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015c8c    0x1d0    mv s1,a0
    0x84015c8e    0x1d2    ld a1,0(s6)
    0x84015c92    0x1d6    ld a2,8(s6)
    0x84015c96    0x1da    mv a0,s3
    0x84015c98    0x1dc    jal ra,ffffffff840124a2 <maskCapRights>
    0x84015c9c    0x1e0    mv a2,a0
    0x84015c9e    0x1e2    mv a3,a1
    0x84015ca0    0x1e4    sd a0,56(sp)          ; stack access
    0x84015ca2    0x1e6    sd a1,64(sp)          ; stack access
    0x84015ca4    0x1e8    mv a1,s1
    0x84015ca6    0x1ea    li a0,0
    0x84015ca8    0x1ec    jal ra,ffffffff84012412 <updateCapData>
    0x84015cac    0x1f0    mv a2,a0
    0x84015cae    0x1f2    mv a3,a1
    0x84015cb0    0x1f4    mv a1,s6
    0x84015cb2    0x1f6    addi a0,sp,88
    0x84015cb4    0x1f8    jal ra,ffffffff840122be <deriveCap>
    0x84015cb8    0x1fc    ld a5,88(sp)          ; stack access
    0x84015cba    0x1fe    bnez a5,ffffffff84015d3a <decodeCNodeInvocation+0x27e>
    0x84015cbc    0x200    ld s1,96(sp)          ; stack access
    0x84015cbe    0x202    sd s1,40(sp)          ; stack access
    0x84015cc0    0x204    ld a5,104(sp)         ; stack access
    0x84015cc2    0x206    sd a5,48(sp)          ; stack access
    0x84015cc4    0x208    j ffffffff84015c52 <decodeCNodeInvocation+0x196>
    0x84015cc6    0x20a    ld a5,0(a1)
    0x84015cc8    0x20c    sd a5,40(sp)          ; stack access
    0x84015cca    0x20e    ld a5,8(a1)
    0x84015ccc    0x210    sd a5,48(sp)          ; stack access
    0x84015cce    0x212    li a1,2
    0x84015cd0    0x214    auipc a0,0x17
    0x84015cd4    0x218    ld a0,904(a0) # ffffffff8402d058 <ksCurThread>
    0x84015cd8    0x21c    jal ra,ffffffff84012996 <setThreadState>
    0x84015cdc    0x220    sd s7,40(sp)          ; stack access
    0x84015cde    0x222    sd s7,88(sp)          ; stack access
    0x84015ce0    0x224    ld a1,48(sp)          ; stack access
    0x84015ce2    0x226    sd a1,96(sp)          ; stack access
    0x84015ce4    0x228    mv a3,s4
    0x84015ce6    0x22a    mv a2,s6
    0x84015ce8    0x22c    mv a0,s7
    0x84015cea    0x22e    jal ra,ffffffff84011a10 <cteMove>
    0x84015cee    0x232    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015cf0    0x234    li a5,4
    0x84015cf2    0x236    bgeu a5,s3,ffffffff84015d28 <decodeCNodeInvocation+0x26c>
    0x84015cf6    0x23a    mv a1,s2
    0x84015cf8    0x23c    li a0,4
    0x84015cfa    0x23e    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015cfe    0x242    mv a1,a0
    0x84015d00    0x244    ld a2,0(s6)
    0x84015d04    0x248    ld a3,8(s6)
    0x84015d08    0x24c    li a0,1
    0x84015d0a    0x24e    jal ra,ffffffff84012412 <updateCapData>
    0x84015d0e    0x252    sd a0,40(sp)          ; stack access
    0x84015d10    0x254    sd a1,48(sp)          ; stack access
    0x84015d12    0x256    mv s7,a0
    0x84015d14    0x258    srli a0,a0,0x3b
    0x84015d16    0x25a    bnez a0,ffffffff84015f5e <decodeCNodeInvocation+0x4a2>
    0x84015d1a    0x25e    li a5,3
    0x84015d1c    0x260    auipc a4,0x5
    0x84015d20    0x264    sd a5,-220(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015d24    0x268    li s0,3
    0x84015d26    0x26a    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015d28    0x26c    li a5,7
    0x84015d2a    0x26e    auipc a4,0x5
    0x84015d2e    0x272    sd a5,-234(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015d32    0x276    li s0,3
    0x84015d34    0x278    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015d36    0x27a    mv s0,a5
    0x84015d38    0x27c    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015d3a    0x27e    mv s0,a5
    0x84015d3c    0x280    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015d3e    0x282    li a5,17
    0x84015d40    0x284    beq s1,a5,ffffffff84015e54 <decodeCNodeInvocation+0x398>
    0x84015d44    0x288    li a5,18
    0x84015d46    0x28a    beq s1,a5,ffffffff84015e6c <decodeCNodeInvocation+0x3b0>
    0x84015d4a    0x28e    li a5,19
    0x84015d4c    0x290    beq s1,a5,ffffffff84015e84 <decodeCNodeInvocation+0x3c8>
    0x84015d50    0x294    li a5,24
    0x84015d52    0x296    bne s1,a5,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015d56    0x29a    li a5,7
    0x84015d58    0x29c    bgeu a5,s3,ffffffff84015eba <decodeCNodeInvocation+0x3fe>
    0x84015d5c    0x2a0    auipc s0,0x5
    0x84015d60    0x2a4    ld s0,820(s0) # ffffffff8401b090 <current_extra_caps>
    0x84015d64    0x2a8    beqz s0,ffffffff84015eba <decodeCNodeInvocation+0x3fe>
    0x84015d68    0x2ac    auipc s1,0x5
    0x84015d6c    0x2b0    ld s1,816(s1) # ffffffff8401b098 <current_extra_caps+0x8>
    0x84015d70    0x2b4    beqz s1,ffffffff84015eba <decodeCNodeInvocation+0x3fe>
    0x84015d74    0x2b8    mv a1,s2
    0x84015d76    0x2ba    li a0,2
    0x84015d78    0x2bc    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015d7c    0x2c0    mv s7,a0
    0x84015d7e    0x2c2    mv a1,s2
    0x84015d80    0x2c4    li a0,3
    0x84015d82    0x2c6    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015d86    0x2ca    mv s6,a0
    0x84015d88    0x2cc    mv a1,s2
    0x84015d8a    0x2ce    li a0,4
    0x84015d8c    0x2d0    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015d90    0x2d4    mv s3,a0
    0x84015d92    0x2d6    mv a1,s2
    0x84015d94    0x2d8    li a0,5
    0x84015d96    0x2da    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015d9a    0x2de    mv s8,a0
    0x84015d9c    0x2e0    mv a1,s2
    0x84015d9e    0x2e2    li a0,6
    0x84015da0    0x2e4    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015da4    0x2e8    mv s5,a0
    0x84015da6    0x2ea    mv a1,s2
    0x84015da8    0x2ec    li a0,7
    0x84015daa    0x2ee    jal ra,ffffffff84010128 <getSyscallArg>
    0x84015dae    0x2f2    mv s2,a0
    0x84015db0    0x2f4    ld a5,0(s0)
    0x84015db2    0x2f6    sd a5,40(sp)          ; stack access
    0x84015db4    0x2f8    ld a5,8(s0)
    0x84015db6    0x2fa    sd a5,48(sp)          ; stack access
    0x84015db8    0x2fc    ld a0,0(s1)
    0x84015dba    0x2fe    sd a0,56(sp)          ; stack access
    0x84015dbc    0x300    ld a1,8(s1)
    0x84015dbe    0x302    sd a1,64(sp)          ; stack access
    0x84015dc0    0x304    mv a3,s2
    0x84015dc2    0x306    mv a2,s5
    0x84015dc4    0x308    jal ra,ffffffff840113b8 <lookupSourceSlot>
    0x84015dc8    0x30c    sd a1,120(sp)         ; stack access
    0x84015dca    0x30e    mv s0,a0
    0x84015dcc    0x310    bnez a0,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015dd0    0x314    mv s1,a1
    0x84015dd2    0x316    mv a3,s3
    0x84015dd4    0x318    mv a2,s6
    0x84015dd6    0x31a    ld a0,40(sp)          ; stack access
    0x84015dd8    0x31c    ld a1,48(sp)          ; stack access
    0x84015dda    0x31e    jal ra,ffffffff840113ec <lookupPivotSlot>
    0x84015dde    0x322    sd a0,112(sp)         ; stack access
    0x84015de0    0x324    sd a1,120(sp)         ; stack access
    0x84015de2    0x326    mv s0,a0
    0x84015de4    0x328    bnez a0,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015de8    0x32c    mv s5,a1
    0x84015dea    0x32e    beq s1,a1,ffffffff84015ec8 <decodeCNodeInvocation+0x40c>
    0x84015dee    0x332    beq s4,a1,ffffffff84015ec8 <decodeCNodeInvocation+0x40c>
    0x84015df2    0x336    beq s4,s1,ffffffff84015e02 <decodeCNodeInvocation+0x346>
    0x84015df6    0x33a    mv a0,s4
    0x84015df8    0x33c    jal ra,ffffffff84011bc8 <ensureEmptySlot>
    0x84015dfc    0x340    mv s0,a0
    0x84015dfe    0x342    bnez a0,ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015e02    0x346    ld a5,0(s1)
    0x84015e04    0x348    srli a5,a5,0x3b
    0x84015e06    0x34a    beqz a5,ffffffff84015ed6 <decodeCNodeInvocation+0x41a>
    0x84015e08    0x34c    ld a5,0(s5)
    0x84015e0c    0x350    srli a5,a5,0x3b
    0x84015e0e    0x352    beqz a5,ffffffff84015f02 <decodeCNodeInvocation+0x446>
    0x84015e12    0x356    ld a2,0(s1)
    0x84015e14    0x358    ld a3,8(s1)
    0x84015e16    0x35a    mv a1,s8
    0x84015e18    0x35c    li a0,1
    0x84015e1a    0x35e    jal ra,ffffffff84012412 <updateCapData>
    0x84015e1e    0x362    mv s0,a0
    0x84015e20    0x364    sd a0,72(sp)          ; stack access
    0x84015e22    0x366    sd a1,80(sp)          ; stack access
    0x84015e24    0x368    ld a2,0(s5)
    0x84015e28    0x36c    ld a3,8(s5)
    0x84015e2c    0x370    mv a1,s7
    0x84015e2e    0x372    li a0,1
    0x84015e30    0x374    jal ra,ffffffff84012412 <updateCapData>
    0x84015e34    0x378    sd a0,88(sp)          ; stack access
    0x84015e36    0x37a    sd a1,96(sp)          ; stack access
    0x84015e38    0x37c    srli s0,s0,0x3b
    0x84015e3a    0x37e    beqz s0,ffffffff84015f2c <decodeCNodeInvocation+0x470>
    0x84015e3e    0x382    ld a5,88(sp)          ; stack access
    0x84015e40    0x384    srli a5,a5,0x3b
    0x84015e42    0x386    bnez a5,ffffffff84015f3a <decodeCNodeInvocation+0x47e>
    0x84015e46    0x38a    li a5,3
    0x84015e48    0x38c    auipc a4,0x5
    0x84015e4c    0x390    sd a5,-520(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015e50    0x394    li s0,3
    0x84015e52    0x396    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015e54    0x398    li a1,2
    0x84015e56    0x39a    auipc a0,0x17
    0x84015e5a    0x39e    ld a0,514(a0) # ffffffff8402d058 <ksCurThread>
    0x84015e5e    0x3a2    jal ra,ffffffff84012996 <setThreadState>
    0x84015e62    0x3a6    mv a0,s4
    0x84015e64    0x3a8    jal ra,ffffffff84015a2a <cteRevoke>
    0x84015e68    0x3ac    mv s0,a0
    0x84015e6a    0x3ae    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015e6c    0x3b0    li a1,2
    0x84015e6e    0x3b2    auipc a0,0x17
    0x84015e72    0x3b6    ld a0,490(a0) # ffffffff8402d058 <ksCurThread>
    0x84015e76    0x3ba    jal ra,ffffffff84012996 <setThreadState>
    0x84015e7a    0x3be    mv a0,s4
    0x84015e7c    0x3c0    jal ra,ffffffff84015a1a <invokeCNodeDelete>
    0x84015e80    0x3c4    mv s0,a0
    0x84015e82    0x3c6    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015e84    0x3c8    ld a0,0(a1)
    0x84015e86    0x3ca    sd a0,88(sp)          ; stack access
    0x84015e88    0x3cc    ld a1,8(a1)
    0x84015e8a    0x3ce    sd a1,96(sp)          ; stack access
    0x84015e8c    0x3d0    jal ra,ffffffff84011e4e <hasCancelSendRights>
    0x84015e90    0x3d4    bnez a0,ffffffff84015ea0 <decodeCNodeInvocation+0x3e4>
    0x84015e92    0x3d6    li a5,3
    0x84015e94    0x3d8    auipc a4,0x5
    0x84015e98    0x3dc    sd a5,-596(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015e9c    0x3e0    li s0,3
    0x84015e9e    0x3e2    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015ea0    0x3e4    li a1,2
    0x84015ea2    0x3e6    auipc a0,0x17
    0x84015ea6    0x3ea    ld a0,438(a0) # ffffffff8402d058 <ksCurThread>
    0x84015eaa    0x3ee    jal ra,ffffffff84012996 <setThreadState>
    0x84015eae    0x3f2    ld a0,88(sp)          ; stack access
    0x84015eb0    0x3f4    ld a1,96(sp)          ; stack access
    0x84015eb2    0x3f6    jal ra,ffffffff84013414 <invokeCNodeCancelBadgedSends>
    0x84015eb6    0x3fa    mv s0,a0
    0x84015eb8    0x3fc    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015eba    0x3fe    li a5,7
    0x84015ebc    0x400    auipc a4,0x5
    0x84015ec0    0x404    sd a5,-636(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015ec4    0x408    li s0,3
    0x84015ec6    0x40a    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015ec8    0x40c    li a5,3
    0x84015eca    0x40e    auipc a4,0x5
    0x84015ece    0x412    sd a5,-650(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015ed2    0x416    li s0,3
    0x84015ed4    0x418    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015ed6    0x41a    auipc a4,0x5
    0x84015eda    0x41e    addi a4,a4,-1750 # ffffffff8401a800 <riscvKSASIDTable>
    0x84015ede    0x422    li a5,6
    0x84015ee0    0x424    sd a5,1088(a4)
    0x84015ee4    0x428    li a5,1
    0x84015ee6    0x42a    sd a5,1080(a4)
    0x84015eea    0x42e    slli a5,s2,0x2
    0x84015eee    0x432    andi a5,a5,508
    0x84015ef2    0x436    ori a5,a5,1
    0x84015ef6    0x43a    sd a5,1024(a4)
    0x84015efa    0x43e    sd zero,1032(a4)
    0x84015efe    0x442    li s0,3
    0x84015f00    0x444    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015f02    0x446    auipc a4,0x5
    0x84015f06    0x44a    addi a4,a4,-1794 # ffffffff8401a800 <riscvKSASIDTable>
    0x84015f0a    0x44e    li a5,6
    0x84015f0c    0x450    sd a5,1088(a4)
    0x84015f10    0x454    sd zero,1080(a4)
    0x84015f14    0x458    slli a5,s3,0x2
    0x84015f18    0x45c    andi a5,a5,508
    0x84015f1c    0x460    ori a5,a5,1
    0x84015f20    0x464    sd a5,1024(a4)
    0x84015f24    0x468    sd zero,1032(a4)
    0x84015f28    0x46c    li s0,3
    0x84015f2a    0x46e    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015f2c    0x470    li a5,3
    0x84015f2e    0x472    auipc a4,0x5
    0x84015f32    0x476    sd a5,-750(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x84015f36    0x47a    li s0,3
    0x84015f38    0x47c    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015f3a    0x47e    li a1,2
    0x84015f3c    0x480    auipc a0,0x17
    0x84015f40    0x484    ld a0,284(a0) # ffffffff8402d058 <ksCurThread>
    0x84015f44    0x488    jal ra,ffffffff84012996 <setThreadState>
    0x84015f48    0x48c    mv a6,s4
    0x84015f4a    0x48e    mv a5,s5
    0x84015f4c    0x490    mv a4,s1
    0x84015f4e    0x492    ld a2,88(sp)          ; stack access
    0x84015f50    0x494    ld a3,96(sp)          ; stack access
    0x84015f52    0x496    ld a0,72(sp)          ; stack access
    0x84015f54    0x498    ld a1,80(sp)          ; stack access
    0x84015f56    0x49a    jal ra,ffffffff84011b04 <invokeCNodeRotate>
    0x84015f5a    0x49e    mv s0,a0
    0x84015f5c    0x4a0    j ffffffff84015bb8 <decodeCNodeInvocation+0xfc>
    0x84015f5e    0x4a2    li a1,2
    0x84015f60    0x4a4    auipc a0,0x17
    0x84015f64    0x4a8    ld a0,248(a0) # ffffffff8402d058 <ksCurThread>
    0x84015f68    0x4ac    jal ra,ffffffff84012996 <setThreadState>
    0x84015f6c    0x4b0    j ffffffff84015cdc <decodeCNodeInvocation+0x220>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
445 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 701 nodes.

Section decodeTCBInvocation (300 of 301)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 154 instructions.
Switch found.


Stack analysis
---------------

32 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x8401770a      0x0    addi sp,sp,-48
    0x8401770c      0x2    sd ra,40(sp)          ; stack access
    0x8401770e      0x4    sd s0,32(sp)          ; stack access
    0x84017710      0x6    sd s1,24(sp)          ; stack access
    0x84017712      0x8    sd a2,0(sp)           ; stack access
    0x84017714      0xa    sd a3,8(sp)           ; stack access
    0x84017716      0xc    mv a3,a4
    0x84017718      0xe    li a4,16
    0x8401771a     0x10    bltu a4,a0,ffffffff84017882 <decodeTCBInvocation+0x178>
    0x8401771e     0x14    mv s0,a2
    0x84017720     0x16    slli a0,a0,0x2
    0x84017722     0x18    auipc a4,0x2
    0x84017726     0x1c    addi a4,a4,1626 # ffffffff84019d7c <msgRegisters+0x334>
    0x8401772a     0x20    add a0,a0,a4
    0x8401772c     0x22    lw a0,0(a0)
    0x8401772e     0x24    add a0,a0,a4
    0x84017730     0x26    jr a0
    0x84017732     0x28    mv a4,a6
    0x84017734     0x2a    mv a3,a5
    0x84017736     0x2c    mv a2,a1
    0x84017738     0x2e    ld a0,0(sp)           ; stack access
    0x8401773a     0x30    ld a1,8(sp)           ; stack access
    0x8401773c     0x32    jal ra,ffffffff84017392 <decodeReadRegisters>
    0x84017740     0x36    ld ra,40(sp)          ; stack access
    0x84017742     0x38    ld s0,32(sp)          ; stack access
    0x84017744     0x3a    ld s1,24(sp)          ; stack access
    0x84017746     0x3c    addi sp,sp,48
    0x84017748     0x3e    ret
    0x8401774a     0x40    mv a3,a6
    0x8401774c     0x42    mv a2,a1
    0x8401774e     0x44    ld a0,0(sp)           ; stack access
    0x84017750     0x46    ld a1,8(sp)           ; stack access
    0x84017752     0x48    jal ra,ffffffff84017532 <decodeWriteRegisters>
    0x84017756     0x4c    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017758     0x4e    mv a3,a6
    0x8401775a     0x50    mv a2,a1
    0x8401775c     0x52    ld a0,0(sp)           ; stack access
    0x8401775e     0x54    ld a1,8(sp)           ; stack access
    0x84017760     0x56    jal ra,ffffffff840171d2 <decodeCopyRegisters>
    0x84017764     0x5a    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017766     0x5c    li a1,2
    0x84017768     0x5e    auipc a0,0x16
    0x8401776c     0x62    ld a0,-1808(a0) # ffffffff8402d058 <ksCurThread>
    0x84017770     0x66    jal ra,ffffffff84012996 <setThreadState>
    0x84017774     0x6a    slli a0,s0,0x19
    0x84017778     0x6e    srli a0,a0,0x19
    0x8401777a     0x70    srli a2,s0,0x26
    0x8401777e     0x74    andi a2,a2,1
    0x84017780     0x76    beqz a2,ffffffff84017788 <decodeTCBInvocation+0x7e>
    0x84017782     0x78    li a5,-1
    0x84017784     0x7a    slli a5,a5,0x27
    0x84017786     0x7c    or a0,a0,a5
    0x84017788     0x7e    jal ra,ffffffff840137e4 <suspend>
    0x8401778c     0x82    li a0,0
    0x8401778e     0x84    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017790     0x86    li a1,2
    0x84017792     0x88    auipc a0,0x16
    0x84017796     0x8c    ld a0,-1850(a0) # ffffffff8402d058 <ksCurThread>
    0x8401779a     0x90    jal ra,ffffffff84012996 <setThreadState>
    0x8401779e     0x94    slli a0,s0,0x19
    0x840177a2     0x98    srli a0,a0,0x19
    0x840177a4     0x9a    srli a2,s0,0x26
    0x840177a8     0x9e    andi a2,a2,1
    0x840177aa     0xa0    beqz a2,ffffffff840177b2 <decodeTCBInvocation+0xa8>
    0x840177ac     0xa2    li a5,-1
    0x840177ae     0xa4    slli a5,a5,0x27
    0x840177b0     0xa6    or a0,a0,a5
    0x840177b2     0xa8    jal ra,ffffffff84013d60 <restart>
    0x840177b6     0xac    li a0,0
    0x840177b8     0xae    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x840177ba     0xb0    mv a4,a6
    0x840177bc     0xb2    mv a2,a1
    0x840177be     0xb4    ld a0,0(sp)           ; stack access
    0x840177c0     0xb6    ld a1,8(sp)           ; stack access
    0x840177c2     0xb8    jal ra,ffffffff840167da <decodeTCBConfigure>
    0x840177c6     0xbc    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x840177c8     0xbe    mv a3,a6
    0x840177ca     0xc0    mv a2,a1
    0x840177cc     0xc2    ld a0,0(sp)           ; stack access
    0x840177ce     0xc4    ld a1,8(sp)           ; stack access
    0x840177d0     0xc6    jal ra,ffffffff84016db8 <decodeSetPriority>
    0x840177d4     0xca    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x840177d6     0xcc    mv a3,a6
    0x840177d8     0xce    mv a2,a1
    0x840177da     0xd0    ld a0,0(sp)           ; stack access
    0x840177dc     0xd2    ld a1,8(sp)           ; stack access
    0x840177de     0xd4    jal ra,ffffffff84016e82 <decodeSetMCPriority>
    0x840177e2     0xd8    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x840177e4     0xda    mv a4,a6
    0x840177e6     0xdc    mv a2,a1
    0x840177e8     0xde    ld a0,0(sp)           ; stack access
    0x840177ea     0xe0    ld a1,8(sp)           ; stack access
    0x840177ec     0xe2    jal ra,ffffffff84016f4c <decodeSetSchedParams>
    0x840177f0     0xe6    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x840177f2     0xe8    mv a4,a6
    0x840177f4     0xea    mv a2,a1
    0x840177f6     0xec    ld a0,0(sp)           ; stack access
    0x840177f8     0xee    ld a1,8(sp)           ; stack access
    0x840177fa     0xf0    jal ra,ffffffff84016a52 <decodeSetIPCBuffer>
    0x840177fe     0xf4    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017800     0xf6    mv a4,a6
    0x84017802     0xf8    mv a2,a1
    0x84017804     0xfa    ld a0,0(sp)           ; stack access
    0x84017806     0xfc    ld a1,8(sp)           ; stack access
    0x84017808     0xfe    jal ra,ffffffff84016b10 <decodeSetSpace>
    0x8401780c    0x102    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x8401780e    0x104    ld a0,0(sp)           ; stack access
    0x84017810    0x106    ld a1,8(sp)           ; stack access
    0x84017812    0x108    jal ra,ffffffff840175f0 <decodeBindNotification>
    0x84017816    0x10c    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017818    0x10e    ld a0,0(sp)           ; stack access
    0x8401781a    0x110    ld a1,8(sp)           ; stack access
    0x8401781c    0x112    jal ra,ffffffff840176bc <decodeUnbindNotification>
    0x84017820    0x116    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017822    0x118    mv a2,a3
    0x84017824    0x11a    ld a0,0(sp)           ; stack access
    0x84017826    0x11c    ld a1,8(sp)           ; stack access
    0x84017828    0x11e    jal ra,ffffffff840169c4 <decodeSetTimeoutEndpoint>
    0x8401782c    0x122    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x8401782e    0x124    beqz a1,ffffffff84017874 <decodeTCBInvocation+0x16a>
    0x84017830    0x126    mv a1,a6
    0x84017832    0x128    li a0,0
    0x84017834    0x12a    jal ra,ffffffff84010128 <getSyscallArg>
    0x84017838    0x12e    mv s1,a0
    0x8401783a    0x130    li a1,2
    0x8401783c    0x132    auipc a0,0x16
    0x84017840    0x136    ld a0,-2020(a0) # ffffffff8402d058 <ksCurThread>
    0x84017844    0x13a    jal ra,ffffffff84012996 <setThreadState>
    0x84017848    0x13e    slli a5,s0,0x19
    0x8401784c    0x142    srli a5,a5,0x19
    0x8401784e    0x144    srli a2,s0,0x26
    0x84017852    0x148    andi a2,a2,1
    0x84017854    0x14a    beqz a2,ffffffff8401785c <decodeTCBInvocation+0x152>
    0x84017856    0x14c    li a4,-1
    0x84017858    0x14e    slli a4,a4,0x27
    0x8401785a    0x150    or a5,a5,a4
    0x8401785c    0x152    sd s1,24(a5)
    0x8401785e    0x154    auipc a4,0x15
    0x84017862    0x158    ld a4,2042(a4) # ffffffff8402d058 <ksCurThread>
    0x84017866    0x15c    li a0,0
    0x84017868    0x15e    bne a5,a4,ffffffff84017740 <decodeTCBInvocation+0x36>
    0x8401786c    0x162    jal ra,ffffffff840128fc <rescheduleRequired>
    0x84017870    0x166    li a0,0
    0x84017872    0x168    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017874    0x16a    li a5,7
    0x84017876    0x16c    auipc a4,0x3
    0x8401787a    0x170    sd a5,970(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401787e    0x174    li a0,3
    0x84017880    0x176    j ffffffff84017740 <decodeTCBInvocation+0x36>
    0x84017882    0x178    li a5,3
    0x84017884    0x17a    auipc a4,0x3
    0x84017888    0x17e    sd a5,956(a4) # ffffffff8401ac40 <current_syscall_error+0x30>
    0x8401788c    0x182    li a0,3
    0x8401788e    0x184    j ffffffff84017740 <decodeTCBInvocation+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
148 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 268 nodes.

Section init_kernel (301 of 301)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 233 instructions.

RVC_FTTFT____FFFT_FT.
Skipping 10579073 csrw stvec,a5

RVC_FTTFFT___FFT__FT.
Skipping 1007b073 csrc sstatus,a5

Skipping c01027f3 rdtime a5

Skipping c01027f3 rdtime a5

RVC_FTTFFFFTFFFT__FT.
RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp


Stack analysis
---------------

80 stack accesses found. Annotated code for `init_kernel`:

    0x840013c6      0x0    addi sp,sp,-256
    0x840013c8      0x2    sd ra,248(sp)         ; stack access
    0x840013ca      0x4    sd s0,240(sp)         ; stack access
    0x840013cc      0x6    sd s1,232(sp)         ; stack access
    0x840013ce      0x8    sd s2,224(sp)         ; stack access
    0x840013d0      0xa    sd s3,216(sp)         ; stack access
    0x840013d2      0xc    sd s4,208(sp)         ; stack access
    0x840013d4      0xe    sd s5,200(sp)         ; stack access
    0x840013d6     0x10    sd s6,192(sp)         ; stack access
    0x840013d8     0x12    sd s7,184(sp)         ; stack access
    0x840013da     0x14    mv s7,a3
    0x840013dc     0x16    li s0,-1
    0x840013de     0x18    slli s0,s0,0x26
    0x840013e0     0x1a    add s1,a0,s0
    0x840013e4     0x1e    add s0,s0,a1
    0x840013e6     0x20    sd s1,88(sp)          ; stack access
    0x840013e8     0x22    sd s0,96(sp)          ; stack access
    0x840013ea     0x24    slli s6,a2,0x20
    0x840013ee     0x28    srli s6,s6,0x20
    0x840013f2     0x2c    sub s3,a0,s6
    0x840013f6     0x30    sub s4,a1,s6
    0x840013fa     0x34    lui s5,0x2
    0x840013fc     0x36    add s5,s5,s4
    0x840013fe     0x38    jal ra,ffffffff84000460 <map_kernel_window>
    0x84001402     0x3c    jal ra,ffffffff84000138 <activate_kernel_vspace>
    0x84001406     0x40    auipc a5,0xf
    0x8400140a     0x44    addi a5,a5,-1030 # ffffffff84010000 <ki_boot_end>
    0x8400140e     0x48    csrw stvec,a5
    0x84001412     0x4c    jal ra,ffffffff840002b6 <initLocalIRQController>
    0x84001416     0x50    lui a5,0x6
    0x84001418     0x52    csrc sstatus,a5
    0x8400141c     0x56    jal ra,ffffffff840002fa <initIRQController>
    0x84001420     0x5a    sd s3,152(sp)         ; stack access
    0x84001422     0x5c    sd s5,160(sp)         ; stack access
    0x84001424     0x5e    auipc a5,0x0
    0x84001428     0x62    addi a5,a5,556 # ffffffff84001650 <ndks_boot>
    0x8400142c     0x66    lui a4,0xff021
    0x84001430     0x6a    slli a4,a4,0xe
    0x84001432     0x6c    sd a4,960(a5)
    0x84001436     0x70    auipc a4,0x31
    0x8400143a     0x74    addi a4,a4,-1078 # ffffffff84032000 <ki_end>
    0x8400143e     0x78    li a3,-63
    0x84001442     0x7c    slli a3,a3,0x20
    0x84001444     0x7e    add a4,a4,a3
    0x84001446     0x80    sd a4,968(a5)
    0x8400144a     0x84    sd s1,976(a5)
    0x8400144e     0x88    sd s0,984(a5)
    0x84001452     0x8c    li a6,0
    0x84001454     0x8e    mv a4,s3
    0x84001456     0x90    mv a5,s5
    0x84001458     0x92    auipc a3,0x0
    0x8400145c     0x96    addi a3,a3,1464 # ffffffff84001a10 <res_reg>
    0x84001460     0x9a    li a2,2
    0x84001462     0x9c    auipc a1,0x0
    0x84001466     0xa0    addi a1,a1,478 # ffffffff84001640 <avail_p_regs>
    0x8400146a     0xa4    li a0,1
    0x8400146c     0xa6    jal ra,ffffffff84001066 <init_freemem>
    0x84001470     0xaa    jal ra,ffffffff8400058e <create_root_cnode>
    0x84001474     0xae    sd a0,24(sp)          ; stack access
    0x84001476     0xb0    sd a1,32(sp)          ; stack access
    0x84001478     0xb2    srli a0,a0,0x3b
    0x8400147a     0xb4    bnez a0,ffffffff84001480 <init_kernel+0xba>
    0x8400147c     0xb6    jal ra,ffffffff84010490 <halt>
    0x84001480     0xba    ld a0,24(sp)          ; stack access
    0x84001482     0xbc    jal ra,ffffffff840005ca <create_domain_cap>
    0x84001486     0xc0    ld a5,24(sp)          ; stack access
    0x84001488     0xc2    sd a5,152(sp)         ; stack access
    0x8400148a     0xc4    ld a5,32(sp)          ; stack access
    0x8400148c     0xc6    sd a5,160(sp)         ; stack access
    0x8400148e     0xc8    li s1,1
    0x84001490     0xca    li s0,0
    0x84001492     0xcc    li s2,54
    0x84001496     0xd0    j ffffffff8400149c <init_kernel+0xd6>
    0x84001498     0xd2    addi s0,s0,1
    0x8400149a     0xd4    addi s1,s1,1
    0x8400149c     0xd6    beqz s0,ffffffff84001498 <init_kernel+0xd2>
    0x8400149e     0xd8    mv a1,s0
    0x840014a0     0xda    li a0,0
    0x840014a2     0xdc    jal ra,ffffffff84011c7a <setIRQState>
    0x840014a6     0xe0    bgeu s2,s1,ffffffff84001498 <init_kernel+0xd2>
    0x840014aa     0xe4    li a1,54
    0x840014ae     0xe8    li a0,2
    0x840014b0     0xea    jal ra,ffffffff84011c7a <setIRQState>
    0x840014b4     0xee    ld a0,152(sp)         ; stack access
    0x840014b6     0xf0    ld a1,160(sp)         ; stack access
    0x840014b8     0xf2    jal ra,ffffffff8401024a <cap_get_capPtr>
    0x840014bc     0xf6    li a5,7
    0x840014be     0xf8    slli a5,a5,0x3c
    0x840014c0     0xfa    sd a5,128(a0)
    0x840014c2     0xfc    sd zero,136(a0)
    0x840014c6    0x100    sd zero,144(a0)
    0x840014ca    0x104    li a5,3
    0x840014cc    0x106    sd a5,152(a0)
    0x840014ce    0x108    li a3,0
    0x840014d0    0x10a    mv a2,s4
    0x840014d2    0x10c    li a1,1
    0x840014d4    0x10e    li a0,0
    0x840014d6    0x110    jal ra,ffffffff84000e76 <populate_bi_frame>
    0x840014da    0x114    mv a2,s3
    0x840014dc    0x116    mv a3,s5
    0x840014de    0x118    ld a0,24(sp)          ; stack access
    0x840014e0    0x11a    ld a1,32(sp)          ; stack access
    0x840014e2    0x11c    jal ra,ffffffff840006ce <create_it_address_space>
    0x840014e6    0x120    sd a0,40(sp)          ; stack access
    0x840014e8    0x122    sd a1,48(sp)          ; stack access
    0x840014ea    0x124    srli a0,a0,0x3b
    0x840014ec    0x126    beqz a0,ffffffff8400147c <init_kernel+0xb6>
    0x840014ee    0x128    lui s0,0x1
    0x840014f0    0x12a    add s0,s0,s4
    0x840014f2    0x12c    mv a4,s0
    0x840014f4    0x12e    ld a2,40(sp)          ; stack access
    0x840014f6    0x130    mv a3,a1
    0x840014f8    0x132    ld a0,24(sp)          ; stack access
    0x840014fa    0x134    ld a1,32(sp)          ; stack access
    0x840014fc    0x136    jal ra,ffffffff840005ee <create_bi_frame_cap>
    0x84001500    0x13a    li a2,1
    0x84001502    0x13c    ld a0,24(sp)          ; stack access
    0x84001504    0x13e    ld a1,32(sp)          ; stack access
    0x84001506    0x140    jal ra,ffffffff84000946 <init_sched_control>
    0x8400150a    0x144    mv a4,s4
    0x8400150c    0x146    ld a2,40(sp)          ; stack access
    0x8400150e    0x148    ld a3,48(sp)          ; stack access
    0x84001510    0x14a    ld a0,24(sp)          ; stack access
    0x84001512    0x14c    ld a1,32(sp)          ; stack access
    0x84001514    0x14e    jal ra,ffffffff84000e12 <create_ipcbuf_frame_cap>
    0x84001518    0x152    sd a0,72(sp)          ; stack access
    0x8400151a    0x154    sd a1,80(sp)          ; stack access
    0x8400151c    0x156    srli a0,a0,0x3b
    0x8400151e    0x158    beqz a0,ffffffff8400147c <init_kernel+0xb6>
    0x84001520    0x15a    sd s6,0(sp)           ; stack access
    0x84001522    0x15c    li a7,1
    0x84001524    0x15e    ld a5,88(sp)          ; stack access
    0x84001526    0x160    ld a6,96(sp)          ; stack access
    0x84001528    0x162    ld a3,40(sp)          ; stack access
    0x8400152a    0x164    ld a4,48(sp)          ; stack access
    0x8400152c    0x166    ld a1,24(sp)          ; stack access
    0x8400152e    0x168    ld a2,32(sp)          ; stack access
    0x84001530    0x16a    addi a0,sp,152
    0x84001532    0x16c    jal ra,ffffffff84000816 <create_frames_of_region>
    0x84001536    0x170    ld a5,168(sp)         ; stack access
    0x84001538    0x172    beqz a5,ffffffff8400147c <init_kernel+0xb6>
    0x8400153a    0x174    auipc a5,0x0
    0x8400153e    0x178    ld a5,862(a5) # ffffffff84001898 <ndks_boot+0x248>
    0x84001542    0x17c    ld a4,152(sp)         ; stack access
    0x84001544    0x17e    sd a4,72(a5)
    0x84001546    0x180    ld a4,160(sp)         ; stack access
    0x84001548    0x182    sd a4,80(a5)
    0x8400154a    0x184    ld a0,24(sp)          ; stack access
    0x8400154c    0x186    ld a1,32(sp)          ; stack access
    0x8400154e    0x188    jal ra,ffffffff840008e4 <create_it_asid_pool>
    0x84001552    0x18c    sd a0,56(sp)          ; stack access
    0x84001554    0x18e    sd a1,64(sp)          ; stack access
    0x84001556    0x190    srli a0,a0,0x3b
    0x84001558    0x192    beqz a0,ffffffff8400147c <init_kernel+0xb6>
    0x8400155c    0x196    ld a2,40(sp)          ; stack access
    0x8400155e    0x198    ld a3,48(sp)          ; stack access
    0x84001560    0x19a    ld a0,56(sp)          ; stack access
    0x84001562    0x19c    jal ra,ffffffff8400015e <write_it_asid_pool>
    0x84001566    0x1a0    rdtime a5
    0x8400156a    0x1a4    auipc a4,0x2c
    0x8400156e    0x1a8    sd a5,-1338(a4) # ffffffff8402d030 <ksCurTime>
    0x84001572    0x1ac    jal ra,ffffffff84000dca <create_idle_thread>
    0x84001576    0x1b0    beqz a0,ffffffff8400147c <init_kernel+0xb6>
    0x8400157a    0x1b4    ld a5,80(sp)          ; stack access
    0x8400157c    0x1b6    sd a5,0(sp)           ; stack access
    0x8400157e    0x1b8    ld a7,72(sp)          ; stack access
    0x84001580    0x1ba    mv a6,s4
    0x84001582    0x1bc    mv a5,s0
    0x84001584    0x1be    mv a4,s7
    0x84001586    0x1c0    ld a2,40(sp)          ; stack access
    0x84001588    0x1c2    ld a3,48(sp)          ; stack access
    0x8400158a    0x1c4    ld a0,24(sp)          ; stack access
    0x8400158c    0x1c6    ld a1,32(sp)          ; stack access
    0x8400158e    0x1c8    jal ra,ffffffff84000c1e <create_initial_thread>
    0x84001592    0x1cc    beqz a0,ffffffff8400147c <init_kernel+0xb6>
    0x84001596    0x1d0    jal ra,ffffffff840009a8 <init_core_state>
    0x8400159a    0x1d4    ld a0,24(sp)          ; stack access
    0x8400159c    0x1d6    sd a0,120(sp)         ; stack access
    0x8400159e    0x1d8    ld a1,32(sp)          ; stack access
    0x840015a0    0x1da    sd a1,128(sp)         ; stack access
    0x840015a2    0x1dc    lui a5,0xff021
    0x840015a6    0x1e0    slli a5,a5,0xe
    0x840015a8    0x1e2    sd a5,136(sp)         ; stack access
    0x840015aa    0x1e4    auipc a5,0xf
    0x840015ae    0x1e8    addi a5,a5,-1450 # ffffffff84010000 <ki_boot_end>
    0x840015b2    0x1ec    li a4,-63
    0x840015b6    0x1f0    slli a4,a4,0x20
    0x840015b8    0x1f2    add a5,a5,a4
    0x840015ba    0x1f4    sd a5,144(sp)         ; stack access
    0x840015bc    0x1f6    auipc s1,0x0
    0x840015c0    0x1fa    addi s1,s1,148 # ffffffff84001650 <ndks_boot>
    0x840015c4    0x1fe    ld s0,592(s1)
    0x840015c8    0x202    mv a2,s0
    0x840015ca    0x204    jal ra,ffffffff84000b04 <create_device_untypeds>
    0x840015ce    0x208    mv a4,s0
    0x840015d0    0x20a    ld a2,136(sp)         ; stack access
    0x840015d2    0x20c    ld a3,144(sp)         ; stack access
    0x840015d4    0x20e    ld a0,120(sp)         ; stack access
    0x840015d6    0x210    ld a1,128(sp)         ; stack access
    0x840015d8    0x212    jal ra,ffffffff84000ba6 <create_kernel_untypeds>
    0x840015dc    0x216    ld a4,592(s1)
    0x840015e0    0x21a    ld a5,584(s1)
    0x840015e4    0x21e    sd s0,168(a5)
    0x840015e6    0x220    sd a4,176(a5)
    0x840015e8    0x222    beqz a0,ffffffff8400147c <init_kernel+0xb6>
    0x840015ec    0x226    auipc a5,0x0
    0x840015f0    0x22a    ld a5,684(a5) # ffffffff84001898 <ndks_boot+0x248>
    0x840015f4    0x22e    sd zero,56(a5)
    0x840015f8    0x232    sd zero,64(a5)
    0x840015fc    0x236    jal ra,ffffffff84000c04 <bi_finalise>
    0x84001600    0x23a    li a5,1
    0x84001602    0x23c    auipc a4,0x2c
    0x84001606    0x240    sd a5,-1434(a4) # ffffffff8402d068 <ksNumCPUs>
    0x8400160a    0x244    rdtime a5
    0x8400160e    0x248    auipc a4,0x2c
    0x84001612    0x24c    sd a5,-1502(a4) # ffffffff8402d030 <ksCurTime>
    0x84001616    0x250    auipc a5,0x2c
    0x8400161a    0x254    sd zero,-1494(a5) # ffffffff8402d040 <ksConsumed>
    0x8400161e    0x258    jal ra,ffffffff840149e0 <schedule>
    0x84001622    0x25c    jal ra,ffffffff84012aa0 <activateThread>
    0x84001626    0x260    ld ra,248(sp)         ; stack access
    0x84001628    0x262    ld s0,240(sp)         ; stack access
    0x8400162a    0x264    ld s1,232(sp)         ; stack access
    0x8400162c    0x266    ld s2,224(sp)         ; stack access
    0x8400162e    0x268    ld s3,216(sp)         ; stack access
    0x84001630    0x26a    ld s4,208(sp)         ; stack access
    0x84001632    0x26c    ld s5,200(sp)         ; stack access
    0x84001634    0x26e    ld s6,192(sp)         ; stack access
    0x84001636    0x270    ld s7,184(sp)         ; stack access
    0x84001638    0x272    addi sp,sp,256
    0x8400163a    0x274    ret
    0x8400163c    0x276    unimp
    0x8400163e    0x278    unimp

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
233 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 390 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84011C9A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84011CA4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840118CE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010BD0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010BBA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84010498` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84010478` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_84010480` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84010474` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_8401048C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_840101E2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_84010158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_840009E6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_840002F4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84000154` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_84010B0C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010A76` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010A46` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_840109E8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010A7A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010A4A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840109EC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401092A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a3_stval_84010818` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84019854` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_8401985C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_840197C0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84019850` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84019868` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840197C4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_840193A6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_840193AE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84019310` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_840193A2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_840193BA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84019314` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_840157A8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_840157C0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_8401531E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84014900` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8401008C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8401007C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84010084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840100A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84010000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000256` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840001EA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_84015760` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840109B4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_84015680` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a4_840154D2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_840153DC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a0_840155A8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a3_84018D86` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84017CCC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401805A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_8400140E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrc_sstatus_a5_84001418` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_8400163C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_8400163E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_84001566` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_8400160A` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
Graph spec failed in trap_entry for pos 0x840100ae.
Graph spec failed in trap_entry for pos 0x840100ae.
Graph spec failed in trap_entry for pos 0x840100a8.
Graph spec failed in trap_entry for pos 0x840100a8.
No export failures.
No call offset failures.
> 