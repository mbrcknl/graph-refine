
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Mon Jun 01 02:31:25 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/zoltan/Documents/BINVER-exp/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/zoltan/Documents/BINVER-exp/graph-refine/seL4-example/kernel
  Poly/ML: 580
  HOL: Kananaskis 13 (stdknl) commit fb4c5e290
======================================================================
  Reading /home/zoltan/Documents/BINVER-exp/graph-refine/seL4-example/kernel.elf.txt, done.
  Reading /home/zoltan/Documents/BINVER-exp/graph-refine/seL4-example/kernel.elf.txt, done.
  Reading /home/zoltan/Documents/BINVER-exp/graph-refine/seL4-example/kernel.sigs, done.
No signature info for section: _start
No signature info for section: avail_p_regs
No signature info for section: ndks_boot
No signature info for section: rootserver
No signature info for section: rootserver_mem
No signature info for section: avail_reg
No signature info for section: res_reg
No signature info for section: trap_entry
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzsi2
No signature info for section: __ctzsi2
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 267 functions, 11840 RISC-V instructions
  Longest function: decodeRISCVMMUInvocation (776 instructions)
  0 deps: 92 functions (create_it_address_space, avail_p_regs, ...)
  1 deps: 77 functions (str_to_long, memset, ...)
  2 deps: 43 functions (performPageTableInvocationUnmap, ...)
  3 deps: 23 functions (c_handle_syscall, ...)
  4 deps: 6 functions (invokeUntyped_Retype, decodeSetIPCBuffer, ...)
  5 deps: 11 functions (invokeTCB_ThreadControl, handleRecv, ...)
  6 deps: 5 functions (decodeUntypedInvocation, decodeSetSpace, ...)
  7 deps: 3 functions (handleInvocation, decodeTCBConfigure, ...)
  8 deps: 1 functions (finaliseCap)
  11 deps: 1 functions (handleSyscall)
  12 deps: 1 functions (decodeInvocation)
  14 deps: 1 functions (decodeRISCVMMUInvocation)
  15 deps: 1 functions (decodeTCBInvocation)
  16 deps: 1 functions (decodeCNodeInvocation)
  26 deps: 1 functions (init_kernel)
======================================================================

Section create_it_address_space (1 of 267)
==========================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 0 nodes.

Section avail_p_regs (2 of 267)
===============================

Deriving specifications
-----------------------

Section `avail_p_regs` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_p_regs` has 0 nodes.

Section ndks_boot (3 of 267)
============================

Deriving specifications
-----------------------

Section `ndks_boot` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ndks_boot` has 0 nodes.

Section rootserver (4 of 267)
=============================

Deriving specifications
-----------------------

Section `rootserver` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver` has 0 nodes.

Section rootserver_mem (5 of 267)
=================================

Deriving specifications
-----------------------

Section `rootserver_mem` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver_mem` has 0 nodes.

Section avail_reg (6 of 267)
============================

Deriving specifications
-----------------------

Section `avail_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_reg` has 0 nodes.

Section res_reg (7 of 267)
==========================

Deriving specifications
-----------------------

Section `res_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `res_reg` has 0 nodes.

Section restore_user_context (8 of 267)
=======================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 0 nodes.

Section slowpath (9 of 267)
===========================

Deriving specifications
-----------------------

Section `slowpath` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 0 nodes.

Section fastpath_call (10 of 267)
=================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 0 nodes.

Section fastpath_reply_recv (11 of 267)
=======================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 0 nodes.

Section __ctzdi2 (12 of 267)
============================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 13 instructions.

RVC_TFFFFT___FT___TF..
ANDI..
RVC_TTT___________FT.
RVC_FTF___________FT.
ADDI..
RVC_TFF_FF________FT.
RVC_FFT___________FT.
BNE..
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x8401708a     0x0    mv a5,a0
    0x8401708c     0x2    andi a4,a0,1
    0x84017090     0x6    bnez a4,ffffffff840170a8 <__ctzdi2+0x1e>
    0x84017092     0x8    li a0,0
    0x84017094     0xa    li a3,65
    0x84017098     0xe    srli a5,a5,0x1
    0x8401709a    0x10    addiw a0,a0,1
    0x8401709c    0x12    andi a4,a5,1
    0x840170a0    0x16    bnez a4,ffffffff840170aa <__ctzdi2+0x20>
    0x840170a2    0x18    bne a0,a3,ffffffff84017098 <__ctzdi2+0xe>
    0x840170a6    0x1c    ret
    0x840170a8    0x1e    li a0,0
    0x840170aa    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 21 nodes.

Section __clzdi2 (13 of 267)
============================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 11 instructions.

BLT..
RVC_FFF___________TF.

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x8401706c     0x0    mv a5,a0
    0x8401706e     0x2    bltz a0,ffffffff84017086 <__clzdi2+0x1a>
    0x84017072     0x6    li a0,0
    0x84017074     0x8    li a4,65
    0x84017078     0xc    slli a5,a5,0x1
    0x8401707a     0xe    addiw a0,a0,1
    0x8401707c    0x10    bltz a5,ffffffff84017088 <__clzdi2+0x1c>
    0x84017080    0x14    bne a0,a4,ffffffff84017078 <__clzdi2+0xc>
    0x84017084    0x18    ret
    0x84017086    0x1a    li a0,0
    0x84017088    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 19 nodes.

Section __ctzsi2 (14 of 267)
============================

Deriving specifications
-----------------------

Section `__ctzsi2` consists of 13 instructions.

RVC_TFF_TF________FT.
SRLIW..
ADDIW..

Stack analysis
---------------

No stack accesses found. Code for `__ctzsi2`:

    0x8401704a     0x0    mv a4,a0
    0x8401704c     0x2    andi a0,a0,1
    0x8401704e     0x4    bnez a0,ffffffff84017068 <__ctzsi2+0x1e>
    0x84017050     0x6    li a3,33
    0x84017054     0xa    srliw a5,a4,0x1
    0x84017058     0xe    sext.w a4,a5
    0x8401705c    0x12    addiw a0,a0,1
    0x8401705e    0x14    andi a5,a5,1
    0x84017060    0x16    bnez a5,ffffffff8401706a <__ctzsi2+0x20>
    0x84017062    0x18    bne a0,a3,ffffffff84017054 <__ctzsi2+0xa>
    0x84017066    0x1c    ret
    0x84017068    0x1e    li a0,0
    0x8401706a    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzsi2` has 21 nodes.

Section __clzsi2 (15 of 267)
============================

Deriving specifications
-----------------------

Section `__clzsi2` consists of 13 instructions.

SLLIW..
SLLI..

Stack analysis
---------------

No stack accesses found. Code for `__clzsi2`:

    0x84017022     0x0    mv a4,a0
    0x84017024     0x2    bltz a0,ffffffff84017046 <__clzsi2+0x24>
    0x84017028     0x6    li a0,0
    0x8401702a     0x8    li a3,34
    0x8401702e     0xc    slliw a5,a4,0x1
    0x84017032    0x10    sext.w a4,a5
    0x84017036    0x14    addiw a0,a0,1
    0x84017038    0x16    slli a2,a5,0x20
    0x8401703c    0x1a    bltz a2,ffffffff84017048 <__clzsi2+0x26>
    0x84017040    0x1e    bne a0,a3,ffffffff8401702e <__clzsi2+0xc>
    0x84017044    0x22    ret
    0x84017046    0x24    li a0,0
    0x84017048    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzsi2` has 21 nodes.

Section char_to_long (16 of 267)
================================

Deriving specifications
-----------------------

Section `char_to_long` consists of 20 instructions.

BGEU..
BLTU..

Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x84016f6e     0x0    addiw a5,a0,-48
    0x84016f72     0x4    andi a5,a5,255
    0x84016f76     0x8    li a4,9
    0x84016f78     0xa    bgeu a4,a5,ffffffff84016f9e <char_to_long+0x30>
    0x84016f7c     0xe    addiw a5,a0,-65
    0x84016f80    0x12    andi a5,a5,255
    0x84016f84    0x16    li a4,5
    0x84016f86    0x18    bgeu a4,a5,ffffffff84016fa4 <char_to_long+0x36>
    0x84016f8a    0x1c    addiw a5,a0,-97
    0x84016f8e    0x20    andi a5,a5,255
    0x84016f92    0x24    li a4,5
    0x84016f94    0x26    bltu a4,a5,ffffffff84016faa <char_to_long+0x3c>
    0x84016f98    0x2a    addiw a0,a0,-87
    0x84016f9c    0x2e    ret
    0x84016f9e    0x30    addiw a0,a0,-48
    0x84016fa2    0x34    ret
    0x84016fa4    0x36    addiw a0,a0,-55
    0x84016fa8    0x3a    ret
    0x84016faa    0x3c    li a0,-1
    0x84016fac    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 30 nodes.

Section strncmp (17 of 267)
===========================

Deriving specifications
-----------------------

Section `strncmp` consists of 14 instructions.

RVC_TTF___________FT.
RVC_TFFTFT___FT___TF..
LBU..
SUBW.....
RVC_FFFFFT________FT.

Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x84016f4a     0x0    beqz a2,ffffffff84016f6a <strncmp+0x20>
    0x84016f4c     0x2    mv a5,a0
    0x84016f4e     0x4    add a2,a2,a0
    0x84016f50     0x6    lbu a4,0(a5)
    0x84016f54     0xa    lbu a0,0(a1)
    0x84016f58     0xe    subw a0,a4,a0
    0x84016f5c    0x12    bnez a0,ffffffff84016f6c <strncmp+0x22>
    0x84016f5e    0x14    beqz a4,ffffffff84016f6c <strncmp+0x22>
    0x84016f60    0x16    addi a5,a5,1
    0x84016f62    0x18    addi a1,a1,1
    0x84016f64    0x1a    bne a5,a2,ffffffff84016f50 <strncmp+0x6>
    0x84016f68    0x1e    ret
    0x84016f6a    0x20    li a0,0
    0x84016f6c    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 26 nodes.

Section memcpy (18 of 267)
==========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x84016f32     0x0    beqz a2,ffffffff84016f48 <memcpy+0x16>
    0x84016f34     0x2    add a2,a2,a0
    0x84016f36     0x4    mv a5,a0
    0x84016f38     0x6    lbu a4,0(a1)
    0x84016f3c     0xa    sb a4,0(a5)
    0x84016f40     0xe    addi a5,a5,1
    0x84016f42    0x10    addi a1,a1,1
    0x84016f44    0x12    bne a2,a5,ffffffff84016f38 <memcpy+0x6>
    0x84016f48    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memzero (19 of 267)
===========================

Deriving specifications
-----------------------

Section `memzero` consists of 7 instructions.

SD..

Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x840156b8     0x0    beqz a1,ffffffff840156c8 <memzero+0x10>
    0x840156ba     0x2    mv a5,a0
    0x840156bc     0x4    add a1,a1,a0
    0x840156be     0x6    sd zero,0(a5)
    0x840156c2     0xa    addi a5,a5,8
    0x840156c4     0xc    bne a5,a1,ffffffff840156be <memzero+0x6>
    0x840156c8    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 13 nodes.

Section strlcat (20 of 267)
===========================

Deriving specifications
-----------------------

Section `strlcat` consists of 31 instructions.

ADD.....
RVC_TFT___________FT.
SUB.....
RVC_TFFFFT___T____TF.

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x8401565e     0x0    mv a3,a0
    0x84015660     0x2    li a0,0
    0x84015662     0x4    beqz a2,ffffffff84015676 <strlcat+0x18>
    0x84015664     0x6    add a5,a3,a0
    0x84015668     0xa    lbu a5,0(a5)
    0x8401566c     0xe    beqz a5,ffffffff8401567a <strlcat+0x1c>
    0x8401566e    0x10    addi a0,a0,1
    0x84015670    0x12    bne a2,a0,ffffffff84015664 <strlcat+0x6>
    0x84015674    0x16    j ffffffff840156b2 <strlcat+0x54>
    0x84015676    0x18    mv a0,a2
    0x84015678    0x1a    ret
    0x8401567a    0x1c    bgeu a0,a2,ffffffff840156b2 <strlcat+0x54>
    0x8401567e    0x20    addi a5,a0,1
    0x84015682    0x24    bgeu a5,a2,ffffffff840156ac <strlcat+0x4e>
    0x84015686    0x28    addi a6,a5,-1
    0x8401568a    0x2c    sub a4,a5,a0
    0x8401568e    0x30    add a4,a4,a1
    0x84015690    0x32    lbu a4,-1(a4)
    0x84015694    0x36    beqz a4,ffffffff840156aa <strlcat+0x4c>
    0x84015696    0x38    add a6,a3,a5
    0x8401569a    0x3c    sb a4,-1(a6)
    0x8401569e    0x40    addi a4,a5,1
    0x840156a2    0x44    bgeu a4,a2,ffffffff840156b4 <strlcat+0x56>
    0x840156a6    0x48    mv a5,a4
    0x840156a8    0x4a    j ffffffff84015686 <strlcat+0x28>
    0x840156aa    0x4c    mv a0,a6
    0x840156ac    0x4e    add a3,a3,a0
    0x840156ae    0x50    sb zero,0(a3)
    0x840156b2    0x54    ret
    0x840156b4    0x56    mv a0,a5
    0x840156b6    0x58    j ffffffff840156ac <strlcat+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 51 nodes.

Section strlcpy (21 of 267)
===========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 19 instructions.

RVC_FFFT__________FT.

Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x8401562c     0x0    mv a3,a0
    0x8401562e     0x2    li a5,1
    0x84015630     0x4    bgeu a5,a2,ffffffff8401565a <strlcpy+0x2e>
    0x84015634     0x8    addi a2,a2,-1
    0x84015636     0xa    li a5,0
    0x84015638     0xc    mv a0,a5
    0x8401563a     0xe    addi a5,a5,1
    0x8401563c    0x10    add a4,a1,a0
    0x84015640    0x14    lbu a4,0(a4)
    0x84015644    0x18    beqz a4,ffffffff84015652 <strlcpy+0x26>
    0x84015646    0x1a    add a0,a0,a3
    0x84015648    0x1c    sb a4,0(a0)
    0x8401564c    0x20    bne a5,a2,ffffffff84015638 <strlcpy+0xc>
    0x84015650    0x24    mv a0,a5
    0x84015652    0x26    add a3,a3,a0
    0x84015654    0x28    sb zero,0(a3)
    0x84015658    0x2c    ret
    0x8401565a    0x2e    li a0,0
    0x8401565c    0x30    j ffffffff84015652 <strlcpy+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 29 nodes.

Section strnlen (22 of 267)
===========================

Deriving specifications
-----------------------

Section `strnlen` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x84015610     0x0    mv a4,a0
    0x84015612     0x2    li a0,0
    0x84015614     0x4    beqz a1,ffffffff84015628 <strnlen+0x18>
    0x84015616     0x6    add a5,a4,a0
    0x8401561a     0xa    lbu a5,0(a5)
    0x8401561e     0xe    beqz a5,ffffffff84015626 <strnlen+0x16>
    0x84015620    0x10    addi a0,a0,1
    0x84015622    0x12    bne a1,a0,ffffffff84015616 <strnlen+0x6>
    0x84015626    0x16    ret
    0x84015628    0x18    mv a0,a1
    0x8401562a    0x1a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 20 nodes.

Section copyMRs (23 of 267)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 46 instructions.

RVC_FTT___________FF..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x84013b6a     0x0    mv a5,a0
    0x84013b6c     0x2    mv a0,a4
    0x84013b6e     0x4    beqz a4,ffffffff84013bca <copyMRs+0x60>
    0x84013b70     0x6    ld a4,88(a5)
    0x84013b72     0x8    sd a4,88(a2)
    0x84013b74     0xa    li a4,1
    0x84013b76     0xc    bgeu a4,a0,ffffffff84013bbe <copyMRs+0x54>
    0x84013b7a    0x10    ld a4,96(a5)
    0x84013b7c    0x12    sd a4,96(a2)
    0x84013b7e    0x14    li a4,2
    0x84013b80    0x16    bgeu a4,a0,ffffffff84013bc2 <copyMRs+0x58>
    0x84013b84    0x1a    ld a4,104(a5)
    0x84013b86    0x1c    sd a4,104(a2)
    0x84013b88    0x1e    li a4,3
    0x84013b8a    0x20    bgeu a4,a0,ffffffff84013bc6 <copyMRs+0x5c>
    0x84013b8e    0x24    ld a5,112(a5)
    0x84013b90    0x26    sd a5,112(a2)
    0x84013b92    0x28    li a5,4
    0x84013b94    0x2a    beqz a3,ffffffff84013bce <copyMRs+0x64>
    0x84013b96    0x2c    beqz a1,ffffffff84013bd2 <copyMRs+0x68>
    0x84013b98    0x2e    bgeu a5,a0,ffffffff84013bd6 <copyMRs+0x6c>
    0x84013b9c    0x32    addi a5,a5,1
    0x84013b9e    0x34    slli a5,a5,0x3
    0x84013ba0    0x36    addi a4,a0,1
    0x84013ba4    0x3a    slli a4,a4,0x3
    0x84013ba6    0x3c    add a2,a1,a5
    0x84013baa    0x40    ld a6,0(a2)
    0x84013bae    0x44    add a2,a3,a5
    0x84013bb2    0x48    sd a6,0(a2)
    0x84013bb6    0x4c    addi a5,a5,8
    0x84013bb8    0x4e    bne a5,a4,ffffffff84013ba6 <copyMRs+0x3c>
    0x84013bbc    0x52    ret
    0x84013bbe    0x54    li a5,1
    0x84013bc0    0x56    j ffffffff84013b94 <copyMRs+0x2a>
    0x84013bc2    0x58    li a5,2
    0x84013bc4    0x5a    j ffffffff84013b94 <copyMRs+0x2a>
    0x84013bc6    0x5c    li a5,3
    0x84013bc8    0x5e    j ffffffff84013b94 <copyMRs+0x2a>
    0x84013bca    0x60    mv a5,a4
    0x84013bcc    0x62    j ffffffff84013b94 <copyMRs+0x2a>
    0x84013bce    0x64    mv a0,a5
    0x84013bd0    0x66    ret
    0x84013bd2    0x68    mv a0,a5
    0x84013bd4    0x6a    ret
    0x84013bd6    0x6c    mv a0,a5
    0x84013bd8    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 76 nodes.

Section setExtraBadge (24 of 267)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x84013a72    0x0    addi a2,a2,122 # fffffffff800007a <ki_end+0x73fd207a>
    0x84013a76    0x4    slli a2,a2,0x3
    0x84013a78    0x6    add a2,a2,a0
    0x84013a7a    0x8    sd a1,0(a2)
    0x84013a7c    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (25 of 267)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x84013a66    0x0    addi a1,a1,122
    0x84013a6a    0x4    slli a1,a1,0x3
    0x84013a6c    0x6    add a1,a1,a0
    0x84013a6e    0x8    ld a0,0(a1)
    0x84013a70    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbEPDequeue (26 of 267)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 19 instructions.

RVC_TTT___________TF..
RVC_FTT_FT________TF.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

2 stack accesses found. Annotated code for `tcbEPDequeue`:

    0x84012af8     0x0    addi sp,sp,-32
    0x84012afa     0x2    mv a5,a0
    0x84012afc     0x4    sd a1,0(sp)           ; stack access
    0x84012afe     0x6    mv a1,a2
    0x84012b00     0x8    ld a4,416(a0)
    0x84012b04     0xc    beqz a4,ffffffff84012b22 <tcbEPDequeue+0x2a>
    0x84012b06     0xe    ld a0,0(sp)           ; stack access
    0x84012b08    0x10    ld a3,408(a5)
    0x84012b0c    0x14    sd a3,408(a4)
    0x84012b10    0x18    ld a4,408(a5)
    0x84012b14    0x1c    beqz a4,ffffffff84012b28 <tcbEPDequeue+0x30>
    0x84012b16    0x1e    ld a5,416(a5)
    0x84012b1a    0x22    sd a5,416(a4)
    0x84012b1e    0x26    addi sp,sp,32
    0x84012b20    0x28    ret
    0x84012b22    0x2a    ld a0,408(a0)
    0x84012b26    0x2e    j ffffffff84012b10 <tcbEPDequeue+0x18>
    0x84012b28    0x30    ld a1,416(a5)
    0x84012b2c    0x34    j ffffffff84012b1e <tcbEPDequeue+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 34 nodes.

Section tcbEPAppend (27 of 267)
===============================

Deriving specifications
-----------------------

Section `tcbEPAppend` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbEPAppend`:

    0x84012ade     0x0    addi sp,sp,-32
    0x84012ae0     0x2    mv a5,a0
    0x84012ae2     0x4    beqz a1,ffffffff84012aea <tcbEPAppend+0xc>
    0x84012ae4     0x6    mv a0,a1
    0x84012ae6     0x8    sd a5,408(a2)
    0x84012aea     0xc    sd a2,416(a5)
    0x84012aee    0x10    sd zero,408(a5)
    0x84012af2    0x14    mv a1,a5
    0x84012af4    0x16    addi sp,sp,32
    0x84012af6    0x18    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPAppend` has 16 nodes.

Section tcbSchedDequeue (28 of 267)
===================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 60 instructions.

AUIPC.
SRLI..
SLL.....
XORI..
RVC_TFFTFT___T____TF.
AND.....
RVC_TFFFTT___TT___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x84012768     0x0    ld a5,288(a0)
    0x8401276c     0x4    andi a5,a5,1
    0x8401276e     0x6    beqz a5,ffffffff840127bc <tcbSchedDequeue+0x54>
    0x84012770     0x8    ld a2,344(a0)
    0x84012774     0xc    ld a3,360(a0)
    0x84012778    0x10    slli a5,a2,0x8
    0x8401277c    0x14    add a5,a5,a3
    0x8401277e    0x16    slli a5,a5,0x4
    0x84012780    0x18    auipc a4,0xa
    0x84012784    0x1c    addi a4,a4,1752 # ffffffff8401ce58 <ksReadyQueues>
    0x84012788    0x20    add a5,a5,a4
    0x8401278a    0x22    ld a6,8(a5)
    0x8401278e    0x26    ld a4,400(a0)
    0x84012792    0x2a    beqz a4,ffffffff840127be <tcbSchedDequeue+0x56>
    0x84012794    0x2c    ld a1,0(a5)
    0x84012796    0x2e    ld a3,392(a0)
    0x8401279a    0x32    sd a3,392(a4)
    0x8401279e    0x36    ld a4,392(a0)
    0x840127a2    0x3a    beqz a4,ffffffff84012818 <tcbSchedDequeue+0xb0>
    0x840127a4    0x3c    ld a3,400(a0)
    0x840127a8    0x40    sd a3,400(a4)
    0x840127ac    0x44    sd a1,0(a5)
    0x840127ae    0x46    sd a6,8(a5)
    0x840127b2    0x4a    ld a5,288(a0)
    0x840127b6    0x4e    andi a5,a5,-2
    0x840127b8    0x50    sd a5,288(a0)
    0x840127bc    0x54    ret
    0x840127be    0x56    ld a1,392(a0)
    0x840127c2    0x5a    bnez a1,ffffffff84012814 <tcbSchedDequeue+0xac>
    0x840127c4    0x5c    srli t1,a3,0x6
    0x840127c8    0x60    li a4,3
    0x840127ca    0x62    sub a7,a4,t1
    0x840127ce    0x66    li a4,1
    0x840127d0    0x68    sll a3,a4,a3
    0x840127d4    0x6c    not a3,a3
    0x840127d8    0x70    slli a4,a2,0x2
    0x840127dc    0x74    add a4,a4,a7
    0x840127de    0x76    slli a4,a4,0x3
    0x840127e0    0x78    auipc a7,0x1b
    0x840127e4    0x7c    addi a7,a7,48 # ffffffff8402d810 <ksReadyQueuesL2Bitmap>
    0x840127e8    0x80    add a4,a4,a7
    0x840127ea    0x82    ld a7,0(a4)
    0x840127ee    0x86    and a3,a3,a7
    0x840127f2    0x8a    sd a3,0(a4)
    0x840127f4    0x8c    bnez a3,ffffffff8401279e <tcbSchedDequeue+0x36>
    0x840127f6    0x8e    slli a2,a2,0x3
    0x840127f8    0x90    auipc a4,0x1b
    0x840127fc    0x94    addi a4,a4,544 # ffffffff8402da18 <ksReadyQueuesL1Bitmap>
    0x84012800    0x98    add a2,a2,a4
    0x84012802    0x9a    li a4,1
    0x84012804    0x9c    sll a4,a4,t1
    0x84012808    0xa0    not a4,a4
    0x8401280c    0xa4    ld a3,0(a2)
    0x8401280e    0xa6    and a4,a4,a3
    0x84012810    0xa8    sd a4,0(a2)
    0x84012812    0xaa    j ffffffff8401279e <tcbSchedDequeue+0x36>
    0x84012814    0xac    mv a4,a1
    0x84012816    0xae    j ffffffff840127a4 <tcbSchedDequeue+0x3c>
    0x84012818    0xb0    ld a6,400(a0)
    0x8401281c    0xb4    j ffffffff840127ac <tcbSchedDequeue+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 92 nodes.

Section tcbSchedAppend (29 of 267)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 47 instructions.

ORI..
RVC_TFFTT____FT___TF.
OR.....
RVC_TFFTFT___FFT__TF.
RVC_TFFFTT___TF___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x84012688     0x0    ld a5,288(a0)
    0x8401268c     0x4    andi a5,a5,1
    0x8401268e     0x6    bnez a5,ffffffff840126cc <tcbSchedAppend+0x44>
    0x84012690     0x8    ld a4,344(a0)
    0x84012694     0xc    ld a1,360(a0)
    0x84012698    0x10    slli a5,a4,0x8
    0x8401269c    0x14    add a5,a5,a1
    0x8401269e    0x16    slli a5,a5,0x4
    0x840126a0    0x18    auipc a3,0xa
    0x840126a4    0x1c    addi a3,a3,1976 # ffffffff8401ce58 <ksReadyQueues>
    0x840126a8    0x20    add a5,a5,a3
    0x840126aa    0x22    ld a3,0(a5)
    0x840126ac    0x24    ld a2,8(a5)
    0x840126ae    0x26    beqz a3,ffffffff840126ce <tcbSchedAppend+0x46>
    0x840126b0    0x28    sd a0,392(a2)
    0x840126b4    0x2c    sd a2,400(a0)
    0x840126b8    0x30    sd zero,392(a0)
    0x840126bc    0x34    sd a3,0(a5)
    0x840126be    0x36    sd a0,8(a5)
    0x840126c0    0x38    ld a5,288(a0)
    0x840126c4    0x3c    ori a5,a5,1
    0x840126c8    0x40    sd a5,288(a0)
    0x840126cc    0x44    ret
    0x840126ce    0x46    srli a7,a1,0x6
    0x840126d2    0x4a    li t1,3
    0x840126d4    0x4c    sub t1,t1,a7
    0x840126d8    0x50    slli a3,a4,0x3
    0x840126dc    0x54    auipc a6,0x1b
    0x840126e0    0x58    addi a6,a6,828 # ffffffff8402da18 <ksReadyQueuesL1Bitmap>
    0x840126e4    0x5c    add a6,a6,a3
    0x840126e6    0x5e    li a3,1
    0x840126e8    0x60    sll a7,a3,a7
    0x840126ec    0x64    ld t3,0(a6)
    0x840126f0    0x68    or a7,t3,a7
    0x840126f4    0x6c    sd a7,0(a6)
    0x840126f8    0x70    slli a4,a4,0x2
    0x840126fa    0x72    add a4,a4,t1
    0x840126fc    0x74    slli a4,a4,0x3
    0x840126fe    0x76    auipc a6,0x1b
    0x84012702    0x7a    addi a6,a6,274 # ffffffff8402d810 <ksReadyQueuesL2Bitmap>
    0x84012706    0x7e    add a4,a4,a6
    0x84012708    0x80    sll a1,a3,a1
    0x8401270c    0x84    ld a3,0(a4)
    0x8401270e    0x86    or a1,a1,a3
    0x84012710    0x88    sd a1,0(a4)
    0x84012712    0x8a    mv a3,a0
    0x84012714    0x8c    j ffffffff840126b4 <tcbSchedAppend+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 68 nodes.

Section tcbSchedEnqueue (30 of 267)
===================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 47 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x840121dc     0x0    ld a5,288(a0)
    0x840121e0     0x4    andi a5,a5,1
    0x840121e2     0x6    bnez a5,ffffffff84012220 <tcbSchedEnqueue+0x44>
    0x840121e4     0x8    ld a4,344(a0)
    0x840121e8     0xc    ld a1,360(a0)
    0x840121ec    0x10    slli a5,a4,0x8
    0x840121f0    0x14    add a5,a5,a1
    0x840121f2    0x16    slli a5,a5,0x4
    0x840121f4    0x18    auipc a3,0xb
    0x840121f8    0x1c    addi a3,a3,-924 # ffffffff8401ce58 <ksReadyQueues>
    0x840121fc    0x20    add a5,a5,a3
    0x840121fe    0x22    ld a2,0(a5)
    0x84012200    0x24    ld a3,8(a5)
    0x84012202    0x26    beqz a3,ffffffff84012222 <tcbSchedEnqueue+0x46>
    0x84012204    0x28    sd a0,400(a2)
    0x84012208    0x2c    sd zero,400(a0)
    0x8401220c    0x30    sd a2,392(a0)
    0x84012210    0x34    sd a0,0(a5)
    0x84012212    0x36    sd a3,8(a5)
    0x84012214    0x38    ld a5,288(a0)
    0x84012218    0x3c    ori a5,a5,1
    0x8401221c    0x40    sd a5,288(a0)
    0x84012220    0x44    ret
    0x84012222    0x46    srli a7,a1,0x6
    0x84012226    0x4a    li t1,3
    0x84012228    0x4c    sub t1,t1,a7
    0x8401222c    0x50    slli a3,a4,0x3
    0x84012230    0x54    auipc a6,0x1b
    0x84012234    0x58    addi a6,a6,2024 # ffffffff8402da18 <ksReadyQueuesL1Bitmap>
    0x84012238    0x5c    add a6,a6,a3
    0x8401223a    0x5e    li a3,1
    0x8401223c    0x60    sll a7,a3,a7
    0x84012240    0x64    ld t3,0(a6)
    0x84012244    0x68    or a7,t3,a7
    0x84012248    0x6c    sd a7,0(a6)
    0x8401224c    0x70    slli a4,a4,0x2
    0x8401224e    0x72    add a4,a4,t1
    0x84012250    0x74    slli a4,a4,0x3
    0x84012252    0x76    auipc a6,0x1b
    0x84012256    0x7a    addi a6,a6,1470 # ffffffff8402d810 <ksReadyQueuesL2Bitmap>
    0x8401225a    0x7e    add a4,a4,a6
    0x8401225c    0x80    sll a1,a3,a1
    0x84012260    0x84    ld a3,0(a4)
    0x84012262    0x86    or a1,a1,a3
    0x84012264    0x88    sd a1,0(a4)
    0x84012266    0x8a    mv a3,a0
    0x84012268    0x8c    j ffffffff84012208 <tcbSchedEnqueue+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 68 nodes.

Section updateCapData (31 of 267)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 58 instructions.

BEQ..

Stack analysis
---------------

18 stack accesses found. Annotated code for `updateCapData`:

    0x84011f0c     0x0    addi sp,sp,-32
    0x84011f0e     0x2    slli a4,a2,0x4
    0x84011f12     0x6    bltz a4,ffffffff84011f32 <updateCapData+0x26>
    0x84011f16     0xa    srli a5,a2,0x3b
    0x84011f1a     0xe    li a4,6
    0x84011f1c    0x10    beq a5,a4,ffffffff84011f4e <updateCapData+0x42>
    0x84011f20    0x14    li a4,10
    0x84011f22    0x16    beq a5,a4,ffffffff84011f5e <updateCapData+0x52>
    0x84011f26    0x1a    li a4,4
    0x84011f28    0x1c    beq a5,a4,ffffffff84011f3e <updateCapData+0x32>
    0x84011f2c    0x20    sd a2,16(sp)          ; stack access
    0x84011f2e    0x22    sd a3,24(sp)          ; stack access
    0x84011f30    0x24    j ffffffff84011f36 <updateCapData+0x2a>
    0x84011f32    0x26    sd a2,16(sp)          ; stack access
    0x84011f34    0x28    sd a3,24(sp)          ; stack access
    0x84011f36    0x2a    ld a0,16(sp)          ; stack access
    0x84011f38    0x2c    ld a1,24(sp)          ; stack access
    0x84011f3a    0x2e    addi sp,sp,32
    0x84011f3c    0x30    ret
    0x84011f3e    0x32    or a3,a3,a0
    0x84011f40    0x34    bnez a3,ffffffff84011f48 <updateCapData+0x3c>
    0x84011f42    0x36    sd a2,16(sp)          ; stack access
    0x84011f44    0x38    sd a1,24(sp)          ; stack access
    0x84011f46    0x3a    j ffffffff84011f36 <updateCapData+0x2a>
    0x84011f48    0x3c    sd zero,16(sp)        ; stack access
    0x84011f4a    0x3e    sd zero,24(sp)        ; stack access
    0x84011f4c    0x40    j ffffffff84011f36 <updateCapData+0x2a>
    0x84011f4e    0x42    or a3,a3,a0
    0x84011f50    0x44    bnez a3,ffffffff84011f58 <updateCapData+0x4c>
    0x84011f52    0x46    sd a2,16(sp)          ; stack access
    0x84011f54    0x48    sd a1,24(sp)          ; stack access
    0x84011f56    0x4a    j ffffffff84011f36 <updateCapData+0x2a>
    0x84011f58    0x4c    sd zero,16(sp)        ; stack access
    0x84011f5a    0x4e    sd zero,24(sp)        ; stack access
    0x84011f5c    0x50    j ffffffff84011f36 <updateCapData+0x2a>
    0x84011f5e    0x52    andi a4,a1,63
    0x84011f62    0x56    srli a5,a2,0x2f
    0x84011f66    0x5a    andi a5,a5,63
    0x84011f6a    0x5e    add a5,a5,a4
    0x84011f6c    0x60    li a3,64
    0x84011f70    0x64    bgeu a3,a5,ffffffff84011f7a <updateCapData+0x6e>
    0x84011f74    0x68    sd zero,16(sp)        ; stack access
    0x84011f76    0x6a    sd zero,24(sp)        ; stack access
    0x84011f78    0x6c    j ffffffff84011f36 <updateCapData+0x2a>
    0x84011f7a    0x6e    li a5,-63
    0x84011f7e    0x72    slli a5,a5,0x35
    0x84011f80    0x74    addi a5,a5,-1
    0x84011f82    0x76    and a2,a2,a5
    0x84011f84    0x78    slli a5,a4,0x35
    0x84011f88    0x7c    or a2,a2,a5
    0x84011f8a    0x7e    sd a2,16(sp)          ; stack access
    0x84011f8c    0x80    li a5,-1
    0x84011f8e    0x82    sll a5,a5,a4
    0x84011f92    0x86    not a5,a5
    0x84011f96    0x8a    srli a1,a1,0x6
    0x84011f98    0x8c    and a1,a1,a5
    0x84011f9a    0x8e    sd a1,24(sp)          ; stack access
    0x84011f9c    0x90    j ffffffff84011f36 <updateCapData+0x2a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 91 nodes.

Section hasCancelSendRights (32 of 267)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 20 instructions.

RVC_FFFFFFFT______FT.
RVC_TFFFTT___FF___FT..
SLTIU..

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x840119a6     0x0    addi sp,sp,-16
    0x840119a8     0x2    srli a4,a0,0x3b
    0x840119ac     0x6    li a5,4
    0x840119ae     0x8    beq a4,a5,ffffffff840119b8 <hasCancelSendRights+0x12>
    0x840119b2     0xc    li a0,0
    0x840119b4     0xe    addi sp,sp,16
    0x840119b6    0x10    ret
    0x840119b8    0x12    li a4,3
    0x840119ba    0x14    slli a4,a4,0x37
    0x840119bc    0x16    and a3,a0,a4
    0x840119c0    0x1a    li a5,0
    0x840119c2    0x1c    beq a3,a4,ffffffff840119ca <hasCancelSendRights+0x24>
    0x840119c6    0x20    mv a0,a5
    0x840119c8    0x22    j ffffffff840119b4 <hasCancelSendRights+0xe>
    0x840119ca    0x24    li a5,3
    0x840119cc    0x26    slli a5,a5,0x39
    0x840119ce    0x28    and a0,a0,a5
    0x840119d0    0x2a    sub a0,a0,a5
    0x840119d2    0x2c    seqz a5,a0
    0x840119d6    0x30    j ffffffff840119c6 <hasCancelSendRights+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 25 nodes.

Section bindNotification (33 of 267)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84011946     0x0    ld a4,24(a1)
    0x84011948     0x2    li a5,-1
    0x8401194a     0x4    slli a3,a5,0x27
    0x8401194e     0x8    and a4,a4,a3
    0x84011950     0xa    srli a5,a5,0x19
    0x84011952     0xc    and a5,a5,a0
    0x84011954     0xe    or a5,a5,a4
    0x84011956    0x10    sd a5,24(a1)
    0x84011958    0x12    sd a1,304(a0)
    0x8401195c    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (34 of 267)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x84011932     0x0    ld a4,304(a0)
    0x84011936     0x4    beqz a4,ffffffff84011944 <unbindNotification+0x12>
    0x84011938     0x6    ld a5,24(a4)
    0x8401193a     0x8    srli a5,a5,0x27
    0x8401193c     0xa    slli a5,a5,0x27
    0x8401193e     0xc    sd a5,24(a4)
    0x84011940     0xe    sd zero,304(a0)
    0x84011944    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (35 of 267)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 15 instructions.

BGE..

Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x8401190c     0x0    ld a4,24(a0)
    0x8401190e     0x2    slli a5,a4,0x19
    0x84011912     0x6    srli a5,a5,0x19
    0x84011914     0x8    slli a3,a4,0x19
    0x84011918     0xc    bgez a3,ffffffff8401192e <unbindMaybeNotification+0x22>
    0x8401191c    0x10    li a3,-1
    0x8401191e    0x12    slli a3,a3,0x27
    0x84011920    0x14    or a5,a5,a3
    0x84011922    0x16    srli a4,a4,0x27
    0x84011924    0x18    slli a4,a4,0x27
    0x84011926    0x1a    sd a4,24(a0)
    0x84011928    0x1c    sd zero,304(a5) # fffffffff8000130 <ki_end+0x73fd2130>
    0x8401192c    0x20    j ffffffff84011930 <unbindMaybeNotification+0x24>
    0x8401192e    0x22    bnez a5,ffffffff84011922 <unbindMaybeNotification+0x16>
    0x84011930    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 23 nodes.

Section setIRQState (36 of 267)
===============================

Deriving specifications
-----------------------

Section `setIRQState` consists of 35 instructions.

LUI.
RVC_FTF___________FF..
RVC_TTF___________FF..
Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `setIRQState`:

    0x840117bc     0x0    slli a4,a1,0x3
    0x840117c0     0x4    auipc a5,0xb
    0x840117c4     0x8    addi a5,a5,1240 # ffffffff8401cc98 <intStateIRQTable>
    0x840117c8     0xc    add a5,a5,a4
    0x840117ca     0xe    sd a0,0(a5)
    0x840117cc    0x10    li a5,54
    0x840117d0    0x14    beq a1,a5,ffffffff84011800 <setIRQState+0x44>
    0x840117d4    0x18    andi a3,a1,31
    0x840117d8    0x1c    srli a1,a1,0x5
    0x840117da    0x1e    slli a1,a1,0x2
    0x840117dc    0x20    lui a4,0xcc002
    0x840117e0    0x24    addi a4,a4,256 # ffffffffcc002100 <ki_end+0x47fd4100>
    0x840117e4    0x28    add a1,a1,a4
    0x840117e6    0x2a    lw a5,0(a1)
    0x840117e8    0x2c    sext.w a4,a5
    0x840117ec    0x30    bnez a0,ffffffff84011816 <setIRQState+0x5a>
    0x840117ee    0x32    li a5,1
    0x840117f0    0x34    sll a5,a5,a3
    0x840117f4    0x38    not a5,a5
    0x840117f8    0x3c    and a5,a5,a4
    0x840117fa    0x3e    sext.w a5,a5
    0x840117fc    0x40    sw a5,0(a1)
    0x840117fe    0x42    ret
    0x84011800    0x44    bnez a0,ffffffff8401180c <setIRQState+0x50>
    0x84011802    0x46    li a5,32
    0x84011806    0x4a    csrrc a5,sie,a5
    0x8401180a    0x4e    ret
    0x8401180c    0x50    li a5,32
    0x84011810    0x54    csrrs a5,sie,a5
    0x84011814    0x58    ret
    0x84011816    0x5a    li a5,1
    0x84011818    0x5c    sll a5,a5,a3
    0x8401181c    0x60    or a5,a5,a4
    0x8401181e    0x62    sext.w a5,a5
    0x84011820    0x64    j ffffffff840117fc <setIRQState+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 49 nodes.

Section isIRQActive (37 of 267)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 7 instructions.

SLTU.....

Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x840117a6     0x0    slli a5,a0,0x3
    0x840117aa     0x4    auipc a0,0xb
    0x840117ae     0x8    addi a0,a0,1262 # ffffffff8401cc98 <intStateIRQTable>
    0x840117b2     0xc    add a0,a0,a5
    0x840117b4     0xe    ld a0,0(a0)
    0x840117b6    0x10    snez a0,a0
    0x840117ba    0x14    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 9 nodes.

Section invokeIRQHandler_AckIRQ (38 of 267)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x8401179c    0x0    sext.w a0,a0
    0x8401179e    0x2    lui a5,0xcc202
    0x840117a2    0x6    sw a0,4(a5)
    0x840117a4    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 6 nodes.

Section replyFromKernel_success_empty (39 of 267)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x84011792    0x0    sd zero,72(a0)
    0x84011796    0x4    sd zero,80(a0)
    0x8401179a    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (40 of 267)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x8401177e     0x0    ld a3,1008(a1)
    0x84011782     0x4    ld a4,1016(a1)
    0x84011786     0x8    ld a2,1000(a1)
    0x8401178a     0xc    sd a2,0(a0)           ; stack access
    0x8401178c     0xe    sd a3,8(a0)           ; stack access
    0x8401178e    0x10    sd a4,16(a0)          ; stack access
    0x84011790    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (41 of 267)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x8401170c     0x0    ld a0,0(a0)
    0x8401170e     0x2    srli a0,a0,0x3b
    0x84011710     0x4    bnez a0,ffffffff84011714 <ensureEmptySlot+0x8>
    0x84011712     0x6    ret
    0x84011714     0x8    li a5,8
    0x84011716     0xa    auipc a4,0xb
    0x8401171a     0xe    sd a5,1378(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401171e    0x12    li a0,3
    0x84011720    0x14    j ffffffff84011712 <ensureEmptySlot+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 14 nodes.

Section setupReplyMaster (42 of 267)
====================================

Deriving specifications
-----------------------

Section `setupReplyMaster` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setupReplyMaster`:

    0x840116ee     0x0    andi a4,a0,-1024
    0x840116f2     0x4    ld a5,64(a4)
    0x840116f4     0x6    srli a5,a5,0x3b
    0x840116f6     0x8    bnez a5,ffffffff8401170a <setupReplyMaster+0x1c>
    0x840116f8     0xa    li a5,1
    0x840116fa     0xc    slli a5,a5,0x3e
    0x840116fc     0xe    addi a5,a5,3
    0x840116fe    0x10    sd a5,64(a4)
    0x84011700    0x12    sd a0,72(a4)
    0x84011702    0x14    sd zero,80(a4) # fffffffff8000050 <ki_end+0x73fd2050>
    0x84011706    0x18    li a5,3
    0x84011708    0x1a    sd a5,88(a4)
    0x8401170a    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupReplyMaster` has 21 nodes.

Section insertNewCap (43 of 267)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 42 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `insertNewCap`:

    0x8401168e     0x0    addi sp,sp,-16
    0x84011690     0x2    sd a2,0(sp)           ; stack access
    0x84011692     0x4    sd a3,8(sp)           ; stack access
    0x84011694     0x6    ld a4,24(a0)
    0x84011696     0x8    lui a5,0xf8000
    0x8401169a     0xc    srli a5,a5,0x19
    0x8401169c     0xe    and a5,a5,a4
    0x8401169e    0x10    slli a3,a4,0x19
    0x840116a2    0x14    bgez a3,ffffffff840116be <insertNewCap+0x30>
    0x840116a6    0x18    li a4,-1
    0x840116a8    0x1a    slli a4,a4,0x27
    0x840116aa    0x1c    or a4,a4,a5
    0x840116ac    0x1e    sd a2,0(a1)
    0x840116ae    0x20    ld a3,8(sp)           ; stack access
    0x840116b0    0x22    sd a3,8(a1)
    0x840116b2    0x24    sd a0,16(a1)
    0x840116b4    0x26    ori a5,a5,3
    0x840116b8    0x2a    sd a5,24(a1)
    0x840116ba    0x2c    sd a1,16(a4)
    0x840116bc    0x2e    j ffffffff840116d0 <insertNewCap+0x42>
    0x840116be    0x30    ld a4,0(sp)           ; stack access
    0x840116c0    0x32    sd a4,0(a1)
    0x840116c2    0x34    ld a4,8(sp)           ; stack access
    0x840116c4    0x36    sd a4,8(a1)
    0x840116c6    0x38    sd a0,16(a1)
    0x840116c8    0x3a    ori a4,a5,3
    0x840116cc    0x3e    sd a4,24(a1)
    0x840116ce    0x40    bnez a5,ffffffff840116ea <insertNewCap+0x5c>
    0x840116d0    0x42    ld a5,24(a0)
    0x840116d2    0x44    li a4,-1
    0x840116d4    0x46    slli a4,a4,0x27
    0x840116d6    0x48    addi a4,a4,3
    0x840116d8    0x4a    and a5,a5,a4
    0x840116da    0x4c    lui a4,0xf8000
    0x840116de    0x50    srli a4,a4,0x19
    0x840116e0    0x52    and a1,a1,a4
    0x840116e2    0x54    or a1,a1,a5
    0x840116e4    0x56    sd a1,24(a0)
    0x840116e6    0x58    addi sp,sp,16
    0x840116e8    0x5a    ret
    0x840116ea    0x5c    mv a4,a5
    0x840116ec    0x5e    j ffffffff840116ba <insertNewCap+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 64 nodes.

Section cteSwap (44 of 267)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 63 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x84011598     0x0    addi sp,sp,-32
    0x8401159a     0x2    sd a0,16(sp)          ; stack access
    0x8401159c     0x4    sd a1,24(sp)          ; stack access
    0x8401159e     0x6    sd a3,0(sp)           ; stack access
    0x840115a0     0x8    sd a4,8(sp)           ; stack access
    0x840115a2     0xa    sd a3,0(a2)
    0x840115a4     0xc    sd a4,8(a2)
    0x840115a6     0xe    sd a0,0(a5)
    0x840115a8    0x10    sd a1,8(a5)
    0x840115aa    0x12    ld a0,16(a2)
    0x840115ac    0x14    ld a1,24(a2)
    0x840115ae    0x16    beqz a0,ffffffff840115c6 <cteSwap+0x2e>
    0x840115b0    0x18    ld a4,24(a0)
    0x840115b2    0x1a    li a3,-1
    0x840115b4    0x1c    slli a3,a3,0x27
    0x840115b6    0x1e    addi a3,a3,3
    0x840115b8    0x20    and a4,a4,a3
    0x840115ba    0x22    lui a3,0xf8000
    0x840115be    0x26    srli a3,a3,0x19
    0x840115c0    0x28    and a3,a3,a5
    0x840115c2    0x2a    or a4,a4,a3
    0x840115c4    0x2c    sd a4,24(a0)
    0x840115c6    0x2e    lui a4,0xf8000
    0x840115ca    0x32    srli a4,a4,0x19
    0x840115cc    0x34    and a4,a4,a1
    0x840115ce    0x36    slli a3,a1,0x19
    0x840115d2    0x3a    bgez a3,ffffffff840115e0 <cteSwap+0x48>
    0x840115d6    0x3e    li a3,-1
    0x840115d8    0x40    slli a3,a3,0x27
    0x840115da    0x42    or a4,a4,a3
    0x840115dc    0x44    sd a5,16(a4)
    0x840115de    0x46    j ffffffff840115e2 <cteSwap+0x4a>
    0x840115e0    0x48    bnez a4,ffffffff840115dc <cteSwap+0x44>
    0x840115e2    0x4a    ld a3,16(a5)
    0x840115e4    0x4c    ld a4,24(a5)
    0x840115e6    0x4e    sd a3,16(a2)
    0x840115e8    0x50    sd a4,24(a2)
    0x840115ea    0x52    sd a0,16(a5)
    0x840115ec    0x54    sd a1,24(a5)
    0x840115ee    0x56    beqz a3,ffffffff84011606 <cteSwap+0x6e>
    0x840115f0    0x58    ld a5,24(a3)
    0x840115f2    0x5a    li a1,-1
    0x840115f4    0x5c    slli a1,a1,0x27
    0x840115f6    0x5e    addi a1,a1,3
    0x840115f8    0x60    and a5,a5,a1
    0x840115fa    0x62    lui a1,0xf8000
    0x840115fe    0x66    srli a1,a1,0x19
    0x84011600    0x68    and a1,a1,a2
    0x84011602    0x6a    or a5,a5,a1
    0x84011604    0x6c    sd a5,24(a3)
    0x84011606    0x6e    lui a5,0xf8000
    0x8401160a    0x72    srli a5,a5,0x19
    0x8401160c    0x74    and a5,a5,a4
    0x8401160e    0x76    slli a3,a4,0x19
    0x84011612    0x7a    bgez a3,ffffffff84011620 <cteSwap+0x88>
    0x84011616    0x7e    li a4,-1
    0x84011618    0x80    slli a4,a4,0x27
    0x8401161a    0x82    or a5,a5,a4
    0x8401161c    0x84    sd a2,16(a5)
    0x8401161e    0x86    j ffffffff84011622 <cteSwap+0x8a>
    0x84011620    0x88    bnez a5,ffffffff8401161c <cteSwap+0x84>
    0x84011622    0x8a    addi sp,sp,32
    0x84011624    0x8c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 98 nodes.

Section cteMove (45 of 267)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 37 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x840114ea     0x0    addi sp,sp,-16
    0x840114ec     0x2    sd a0,0(sp)           ; stack access
    0x840114ee     0x4    sd a1,8(sp)           ; stack access
    0x840114f0     0x6    ld a5,16(a2)
    0x840114f2     0x8    ld a4,24(a2)
    0x840114f4     0xa    sd a0,0(a3)
    0x840114f6     0xc    sd a1,8(a3)
    0x840114f8     0xe    sd zero,0(a2)
    0x840114fc    0x12    sd zero,8(a2)
    0x84011500    0x16    sd a5,16(a3)
    0x84011502    0x18    sd a4,24(a3)
    0x84011504    0x1a    sd zero,16(a2)
    0x84011508    0x1e    sd zero,24(a2)
    0x8401150c    0x22    beqz a5,ffffffff84011524 <cteMove+0x3a>
    0x8401150e    0x24    ld a2,24(a5)
    0x84011510    0x26    li a1,-1
    0x84011512    0x28    slli a1,a1,0x27
    0x84011514    0x2a    addi a1,a1,3
    0x84011516    0x2c    and a2,a2,a1
    0x84011518    0x2e    lui a1,0xf8000
    0x8401151c    0x32    srli a1,a1,0x19
    0x8401151e    0x34    and a1,a1,a3
    0x84011520    0x36    or a2,a2,a1
    0x84011522    0x38    sd a2,24(a5)
    0x84011524    0x3a    lui a5,0xf8000
    0x84011528    0x3e    srli a5,a5,0x19
    0x8401152a    0x40    and a5,a5,a4
    0x8401152c    0x42    slli a2,a4,0x19
    0x84011530    0x46    bgez a2,ffffffff8401153e <cteMove+0x54>
    0x84011534    0x4a    li a4,-1
    0x84011536    0x4c    slli a4,a4,0x27
    0x84011538    0x4e    or a5,a5,a4
    0x8401153a    0x50    sd a3,16(a5)
    0x8401153c    0x52    j ffffffff84011540 <cteMove+0x56>
    0x8401153e    0x54    bnez a5,ffffffff8401153a <cteMove+0x50>
    0x84011540    0x56    addi sp,sp,16
    0x84011542    0x58    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 59 nodes.

Section cteInsert (46 of 267)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 107 instructions.

RVC_TFFFT____FT___TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x840113ac      0x0    addi sp,sp,-16
    0x840113ae      0x2    sd a0,0(sp)           ; stack access
    0x840113b0      0x4    sd a1,8(sp)           ; stack access
    0x840113b2      0x6    ld a4,24(a2)
    0x840113b4      0x8    ld a5,0(a2)
    0x840113b6      0xa    ld t1,8(a2)
    0x840113ba      0xe    srli a6,a0,0x3b
    0x840113be     0x12    slli a7,a0,0x4
    0x840113c2     0x16    bltz a7,ffffffff84011446 <cteInsert+0x9a>
    0x840113c6     0x1a    li a7,6
    0x840113c8     0x1c    beq a6,a7,ffffffff8401143c <cteInsert+0x90>
    0x840113cc     0x20    bltu a7,a6,ffffffff8401142c <cteInsert+0x80>
    0x840113d0     0x24    li a7,2
    0x840113d2     0x26    beq a6,a7,ffffffff84011470 <cteInsert+0xc4>
    0x840113d6     0x2a    li a0,4
    0x840113d8     0x2c    sub a5,a1,t1
    0x840113dc     0x30    snez a5,a5
    0x840113e0     0x34    bne a6,a0,ffffffff840114d4 <cteInsert+0x128>
    0x840113e4     0x38    mv a7,a2
    0x840113e6     0x3a    slli a1,a5,0x1
    0x840113ea     0x3e    andi a4,a4,-4
    0x840113ec     0x40    or a4,a4,a1
    0x840113ee     0x42    or a4,a4,a5
    0x840113f0     0x44    ld a5,0(sp)           ; stack access
    0x840113f2     0x46    sd a5,0(a3)
    0x840113f4     0x48    ld a5,8(sp)           ; stack access
    0x840113f6     0x4a    sd a5,8(a3)
    0x840113f8     0x4c    sd a7,16(a3)
    0x840113fc     0x50    sd a4,24(a3)
    0x840113fe     0x52    ld a1,24(a2)
    0x84011400     0x54    li a5,-1
    0x84011402     0x56    slli a5,a5,0x27
    0x84011404     0x58    addi a5,a5,3
    0x84011406     0x5a    and a1,a1,a5
    0x84011408     0x5c    lui a5,0xf8000
    0x8401140c     0x60    srli a5,a5,0x19
    0x8401140e     0x62    and a0,a3,a5
    0x84011412     0x66    or a1,a1,a0
    0x84011414     0x68    sd a1,24(a2)
    0x84011416     0x6a    and a5,a5,a4
    0x84011418     0x6c    slli a2,a4,0x19
    0x8401141c     0x70    bgez a2,ffffffff8401146c <cteInsert+0xc0>
    0x84011420     0x74    li a4,-1
    0x84011422     0x76    slli a4,a4,0x27
    0x84011424     0x78    or a5,a5,a4
    0x84011426     0x7a    sd a3,16(a5)
    0x84011428     0x7c    addi sp,sp,16
    0x8401142a     0x7e    ret
    0x8401142c     0x80    li a1,16
    0x8401142e     0x82    bne a6,a1,ffffffff840114d4 <cteInsert+0x128>
    0x84011432     0x86    srli a5,a5,0x3b
    0x84011434     0x88    addi a5,a5,-14
    0x84011436     0x8a    seqz a5,a5
    0x8401143a     0x8e    j ffffffff840113e4 <cteInsert+0x38>
    0x8401143c     0x90    sub a5,a1,t1
    0x84011440     0x94    snez a5,a5
    0x84011444     0x98    j ffffffff840113e4 <cteInsert+0x38>
    0x84011446     0x9a    mv a7,a2
    0x84011448     0x9c    andi a4,a4,-4
    0x8401144a     0x9e    srli t3,a5,0x3b
    0x8401144e     0xa2    li t4,2
    0x84011450     0xa4    bne t3,t4,ffffffff840113f0 <cteInsert+0x44>
    0x84011454     0xa8    li t3,2
    0x84011456     0xaa    beq a6,t3,ffffffff84011480 <cteInsert+0xd4>
    0x8401145a     0xae    j ffffffff840113f0 <cteInsert+0x44>
    0x8401145c     0xb0    slli a5,a0,0x19
    0x84011460     0xb4    srli a5,a5,0x19
    0x84011462     0xb6    slli t3,a0,0x19
    0x84011466     0xba    bltz t3,ffffffff840114a6 <cteInsert+0xfa>
    0x8401146a     0xbe    j ffffffff840114ac <cteInsert+0x100>
    0x8401146c     0xc0    beqz a5,ffffffff84011428 <cteInsert+0x7c>
    0x8401146e     0xc2    j ffffffff84011426 <cteInsert+0x7a>
    0x84011470     0xc4    mv a7,a2
    0x84011472     0xc6    ori a4,a4,3
    0x84011476     0xca    srli a6,a5,0x3b
    0x8401147a     0xce    li t3,2
    0x8401147c     0xd0    bne a6,t3,ffffffff840113f0 <cteInsert+0x44>
    0x84011480     0xd4    slli a6,a5,0x19
    0x84011484     0xd8    srli a6,a6,0x19
    0x84011488     0xdc    slli t3,a5,0x19
    0x8401148c     0xe0    bgez t3,ffffffff8401145c <cteInsert+0xb0>
    0x84011490     0xe4    li a5,-1
    0x84011492     0xe6    slli t3,a5,0x27
    0x84011496     0xea    or a6,a6,t3
    0x8401149a     0xee    srli a5,a5,0x19
    0x8401149c     0xf0    and a5,a5,a0
    0x8401149e     0xf2    slli t3,a0,0x19
    0x840114a2     0xf6    bgez t3,ffffffff840113f0 <cteInsert+0x44>
    0x840114a6     0xfa    li a0,-1
    0x840114a8     0xfc    slli a0,a0,0x27
    0x840114aa     0xfe    or a5,a5,a0
    0x840114ac    0x100    bne a5,a6,ffffffff840113f0 <cteInsert+0x44>
    0x840114b0    0x104    andi t1,t1,63
    0x840114b4    0x108    andi a5,a1,63
    0x840114b8    0x10c    bne a5,t1,ffffffff840113f0 <cteInsert+0x44>
    0x840114bc    0x110    addiw t1,t1,-4
    0x840114be    0x112    lui a5,0x2000
    0x840114c2    0x116    sll t1,a5,t1
    0x840114c6    0x11a    ld a5,8(a2)
    0x840114c8    0x11c    slli a5,a5,0x27
    0x840114ca    0x11e    srli a5,a5,0x27
    0x840114cc    0x120    or a5,t1,a5
    0x840114d0    0x124    sd a5,8(a2)
    0x840114d2    0x126    j ffffffff840113f0 <cteInsert+0x44>
    0x840114d4    0x128    mv a7,a2
    0x840114d6    0x12a    andi a4,a4,-4
    0x840114d8    0x12c    j ffffffff840113f0 <cteInsert+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
107 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 156 nodes.

Section preemptionPoint (47 of 267)
===================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 17 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `preemptionPoint`:

    0x84011376     0x0    auipc a5,0x1c
    0x8401137a     0x4    ld a5,1690(a5) # ffffffff8402da10 <ksWorkUnitsCompleted>
    0x8401137e     0x8    addi a5,a5,1
    0x84011380     0xa    li a4,99
    0x84011384     0xe    bltu a4,a5,ffffffff84011394 <preemptionPoint+0x1e>
    0x84011388    0x12    auipc a4,0x1c
    0x8401138c    0x16    sd a5,1672(a4) # ffffffff8402da10 <ksWorkUnitsCompleted>
    0x84011390    0x1a    li a0,0
    0x84011392    0x1c    ret
    0x84011394    0x1e    auipc a5,0x1c
    0x84011398    0x22    sd zero,1660(a5) # ffffffff8402da10 <ksWorkUnitsCompleted>
    0x8401139c    0x26    csrr a0,sip
    0x840113a0    0x2a    andi a0,a0,544
    0x840113a4    0x2e    bnez a0,ffffffff840113a8 <preemptionPoint+0x32>
    0x840113a6    0x30    ret
    0x840113a8    0x32    li a0,4
    0x840113aa    0x34    j ffffffff840113a6 <preemptionPoint+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 27 nodes.

Section setMCPriority (48 of 267)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x84011370    0x0    sd a1,352(a0)
    0x84011374    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (49 of 267)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x8401134c    0x0    sd zero,72(a0)
    0x84011350    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section resolveAddressBits (50 of 267)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 97 instructions.

SRL.....
RVC_TFFTTT___FF___FT..
RVC_FTTFFT___T____FT.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
21 stack accesses found. Annotated code for `resolveAddressBits`:

    0x84011030      0x0    addi sp,sp,-32
    0x84011032      0x2    sd s0,24(sp)          ; stack access
    0x84011034      0x4    sd s1,16(sp)          ; stack access
    0x84011036      0x6    sd a1,0(sp)           ; stack access
    0x84011038      0x8    sd a2,8(sp)           ; stack access
    0x8401103a      0xa    srli a7,a1,0x3b
    0x8401103e      0xe    li a5,10
    0x84011040     0x10    bne a7,a5,ffffffff840110ce <resolveAddressBits+0x9e>
    0x84011044     0x14    mv a6,a4
    0x84011046     0x16    li t5,-1
    0x84011048     0x18    lui t0,0xfc000
    0x8401104c     0x1c    srli t0,t0,0x19
    0x84011050     0x20    li t6,1
    0x84011052     0x22    slli t6,t6,0x26
    0x84011054     0x24    slli t2,t5,0x27
    0x84011058     0x28    li s0,10
    0x8401105a     0x2a    srli a7,a1,0x2f
    0x8401105e     0x2e    andi a7,a7,63
    0x84011062     0x32    srli t1,a1,0x35
    0x84011066     0x36    andi t1,t1,63
    0x8401106a     0x3a    add s1,t1,a7
    0x8401106e     0x3e    sext.w a5,a6
    0x84011072     0x42    subw t3,a6,t1
    0x84011076     0x46    srl t3,a3,t3
    0x8401107a     0x4a    sll t4,t5,t1
    0x8401107e     0x4e    not t4,t4
    0x84011082     0x52    and t3,t3,t4
    0x84011086     0x56    bltu a6,t1,ffffffff840110ea <resolveAddressBits+0xba>
    0x8401108a     0x5a    bne a2,t3,ffffffff840110ea <resolveAddressBits+0xba>
    0x8401108e     0x5e    bltu a6,s1,ffffffff84011118 <resolveAddressBits+0xe8>
    0x84011092     0x62    subw a5,a5,s1
    0x84011094     0x64    srl a5,a3,a5
    0x84011098     0x68    sll a7,t5,a7
    0x8401109c     0x6c    not a7,a7
    0x840110a0     0x70    and a5,a5,a7
    0x840110a4     0x74    slli a5,a5,0x5
    0x840110a6     0x76    slli a1,a1,0x1
    0x840110a8     0x78    and a2,a1,t0
    0x840110ac     0x7c    and a1,a1,t6
    0x840110b0     0x80    beqz a1,ffffffff840110b6 <resolveAddressBits+0x86>
    0x840110b2     0x82    or a2,a2,t2
    0x840110b6     0x86    add a5,a5,a2
    0x840110b8     0x88    bne a6,s1,ffffffff84011140 <resolveAddressBits+0x110>
    0x840110bc     0x8c    sd zero,0(a0) # fffffffff8000000 <ki_end+0x73fd2000>  ; stack access
    0x840110c0     0x90    sd a5,8(a0)           ; stack access
    0x840110c2     0x92    sd zero,16(a0)        ; stack access
    0x840110c6     0x96    ld s0,24(sp)          ; stack access
    0x840110c8     0x98    ld s1,16(sp)          ; stack access
    0x840110ca     0x9a    addi sp,sp,32
    0x840110cc     0x9c    ret
    0x840110ce     0x9e    auipc a5,0xc
    0x840110d2     0xa2    addi a5,a5,-1182 # ffffffff8401cc30 <current_lookup_fault>
    0x840110d6     0xa6    sd zero,0(a5)
    0x840110da     0xaa    sd zero,8(a5)
    0x840110de     0xae    li a5,2
    0x840110e0     0xb0    sd a5,0(a0)           ; stack access
    0x840110e2     0xb2    sd zero,8(a0)         ; stack access
    0x840110e6     0xb6    sd a4,16(a0)          ; stack access
    0x840110e8     0xb8    j ffffffff840110c6 <resolveAddressBits+0x96>
    0x840110ea     0xba    auipc a3,0xc
    0x840110ee     0xbe    addi a3,a3,-1210 # ffffffff8401cc30 <current_lookup_fault>
    0x840110f2     0xc2    slli a6,a6,0x9
    0x840110f4     0xc4    lui a5,0x10
    0x840110f6     0xc6    addi a5,a5,-1
    0x840110f8     0xc8    and a6,a6,a5
    0x840110fc     0xcc    slli t1,t1,0x2
    0x840110fe     0xce    or t1,a6,t1
    0x84011102     0xd2    ori t1,t1,3
    0x84011106     0xd6    sd t1,0(a3)
    0x8401110a     0xda    sd a2,8(a3)
    0x8401110c     0xdc    li a5,2
    0x8401110e     0xde    sd a5,0(a0)           ; stack access
    0x84011110     0xe0    sd zero,8(a0)         ; stack access
    0x84011114     0xe4    sd a4,16(a0)          ; stack access
    0x84011116     0xe6    j ffffffff840110c6 <resolveAddressBits+0x96>
    0x84011118     0xe8    auipc a5,0xc
    0x8401111c     0xec    addi a5,a5,-1256 # ffffffff8401cc30 <current_lookup_fault>
    0x84011120     0xf0    slli s1,s1,0x9
    0x84011122     0xf2    slli a6,a6,0x2
    0x84011124     0xf4    or a6,s1,a6
    0x84011128     0xf8    ori a6,a6,2
    0x8401112c     0xfc    sd a6,0(a5)
    0x84011130    0x100    sd zero,8(a5)
    0x84011134    0x104    li a5,2
    0x84011136    0x106    sd a5,0(a0)           ; stack access
    0x84011138    0x108    sd zero,8(a0)         ; stack access
    0x8401113c    0x10c    sd a4,16(a0)          ; stack access
    0x8401113e    0x10e    j ffffffff840110c6 <resolveAddressBits+0x96>
    0x84011140    0x110    sub a6,a6,s1
    0x84011144    0x114    ld a1,0(a5)
    0x84011146    0x116    ld a2,8(a5)
    0x84011148    0x118    srli a7,a1,0x3b
    0x8401114c    0x11c    beq a7,s0,ffffffff8401105a <resolveAddressBits+0x2a>
    0x84011150    0x120    sd zero,0(a0)         ; stack access
    0x84011154    0x124    sd a5,8(a0)           ; stack access
    0x84011156    0x126    sd a6,16(a0)          ; stack access
    0x8401115a    0x12a    j ffffffff840110c6 <resolveAddressBits+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 141 nodes.

Section Arch_performTransfer (51 of 267)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x8401102c    0x0    li a0,0
    0x8401102e    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (52 of 267)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x84011028    0x0    li a0,0
    0x8401102a    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (53 of 267)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x84011020    0x0    addi a0,a0,-5
    0x84011022    0x2    sltiu a0,a0,3
    0x84011026    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (54 of 267)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x8401101e    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_updateCapData (55 of 267)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_updateCapData`:

    0x84010be8    0x0    addi sp,sp,-32
    0x84010bea    0x2    mv a0,a2
    0x84010bec    0x4    mv a1,a3
    0x84010bee    0x6    addi sp,sp,32
    0x84010bf0    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_checkIRQ (56 of 267)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84010b5c     0x0    addi a0,a0,-1
    0x84010b5e     0x2    li a5,53
    0x84010b62     0x6    bltu a5,a0,ffffffff84010b6a <Arch_checkIRQ+0xe>
    0x84010b66     0xa    li a0,0
    0x84010b68     0xc    ret
    0x84010b6a     0xe    auipc a5,0xc
    0x84010b6e    0x12    addi a5,a5,222 # ffffffff8401cc48 <current_syscall_error>
    0x84010b72    0x16    li a4,4
    0x84010b74    0x18    sd a4,48(a5)
    0x84010b76    0x1a    li a4,1
    0x84010b78    0x1c    sd a4,16(a5)
    0x84010b7a    0x1e    li a4,54
    0x84010b7e    0x22    sd a4,24(a5)
    0x84010b80    0x24    li a0,3
    0x84010b82    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 22 nodes.

Section plat_cleanInvalidateL2Range (57 of 267)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84010b5a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (58 of 267)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84010b58    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (59 of 267)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84010b56    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section setIRQTrigger (60 of 267)
=================================

Deriving specifications
-----------------------

Section `setIRQTrigger` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setIRQTrigger`:

    0x84010b54    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQTrigger` has 2 nodes.

Section setNextPC (61 of 267)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84010b4e    0x0    sd a1,272(a0)
    0x84010b52    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (62 of 267)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84010b48    0x0    ld a0,264(a0)
    0x84010b4c    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (63 of 267)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x84010ad0     0x0    addi sp,sp,-16
    0x84010ad2     0x2    sd a0,0(sp)           ; stack access
    0x84010ad4     0x4    sd a1,8(sp)           ; stack access
    0x84010ad6     0x6    sd a0,0(a2)
    0x84010ad8     0x8    sd a1,8(a2)
    0x84010ada     0xa    sd a3,0(a4)
    0x84010adc     0xc    sfence.vma
    0x84010ae0    0x10    li a0,0
    0x84010ae2    0x12    addi sp,sp,16
    0x84010ae4    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (64 of 267)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84010aba     0x0    addi sp,sp,-16
    0x84010abc     0x2    sd a0,0(sp)           ; stack access
    0x84010abe     0x4    sd a1,8(sp)           ; stack access
    0x84010ac0     0x6    sd a0,0(a2)
    0x84010ac2     0x8    sd a1,8(a2)
    0x84010ac4     0xa    sd a3,0(a4)
    0x84010ac6     0xc    sfence.vma
    0x84010aca    0x10    li a0,0
    0x84010acc    0x12    addi sp,sp,16
    0x84010ace    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (65 of 267)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x84010a8e     0x0    mv a5,a0
    0x84010a90     0x2    li a4,2
    0x84010a92     0x4    beq a0,a4,ffffffff84010aa0 <maskVMRights+0x12>
    0x84010a96     0x8    li a4,3
    0x84010a98     0xa    li a0,1
    0x84010a9a     0xc    beq a5,a4,ffffffff84010aaa <maskVMRights+0x1c>
    0x84010a9e    0x10    ret
    0x84010aa0    0x12    srli a1,a1,0x1
    0x84010aa2    0x14    andi a1,a1,1
    0x84010aa4    0x16    addi a0,a1,1
    0x84010aa8    0x1a    ret
    0x84010aaa    0x1c    srli a5,a1,0x1
    0x84010aae    0x20    andi a5,a5,1
    0x84010ab0    0x22    beqz a5,ffffffff84010a9e <maskVMRights+0x10>
    0x84010ab2    0x24    andi a1,a1,1
    0x84010ab4    0x26    addi a0,a1,2
    0x84010ab8    0x2a    j ffffffff84010a9e <maskVMRights+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 25 nodes.

Section checkValidIPCBuffer (66 of 267)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 25 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x84010a46     0x0    addi sp,sp,-16
    0x84010a48     0x2    srli a4,a1,0x3b
    0x84010a4c     0x6    li a5,1
    0x84010a4e     0x8    bne a4,a5,ffffffff84010a64 <checkValidIPCBuffer+0x1e>
    0x84010a52     0xc    slli a5,a1,0x9
    0x84010a56    0x10    bltz a5,ffffffff84010a72 <checkValidIPCBuffer+0x2c>
    0x84010a5a    0x14    andi a0,a0,1023
    0x84010a5e    0x18    bnez a0,ffffffff84010a80 <checkValidIPCBuffer+0x3a>
    0x84010a60    0x1a    addi sp,sp,16
    0x84010a62    0x1c    ret
    0x84010a64    0x1e    li a5,3
    0x84010a66    0x20    auipc a4,0xc
    0x84010a6a    0x24    sd a5,530(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84010a6e    0x28    li a0,3
    0x84010a70    0x2a    j ffffffff84010a60 <checkValidIPCBuffer+0x1a>
    0x84010a72    0x2c    li a5,3
    0x84010a74    0x2e    auipc a4,0xc
    0x84010a78    0x32    sd a5,516(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84010a7c    0x36    li a0,3
    0x84010a7e    0x38    j ffffffff84010a60 <checkValidIPCBuffer+0x1a>
    0x84010a80    0x3a    li a5,5
    0x84010a82    0x3c    auipc a4,0xc
    0x84010a86    0x40    sd a5,502(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84010a8a    0x44    li a0,3
    0x84010a8c    0x46    j ffffffff84010a60 <checkValidIPCBuffer+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 35 nodes.

Section isValidVTableRoot (67 of 267)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x84010a30     0x0    addi sp,sp,-16
    0x84010a32     0x2    srli a4,a0,0x3b
    0x84010a36     0x6    li a5,3
    0x84010a38     0x8    srli a0,a0,0x27
    0x84010a3a     0xa    andi a0,a0,1
    0x84010a3c     0xc    beq a4,a5,ffffffff84010a42 <isValidVTableRoot+0x12>
    0x84010a40    0x10    li a0,0
    0x84010a42    0x12    addi sp,sp,16
    0x84010a44    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (68 of 267)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 36 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupPTSlot`:

    0x840106c6     0x0    addi sp,sp,-16
    0x840106c8     0x2    mv a3,a1
    0x840106ca     0x4    srli a5,a1,0x1e
    0x840106ce     0x8    andi a5,a5,511
    0x840106d2     0xc    slli a5,a5,0x3
    0x840106d4     0xe    add a0,a0,a5
    0x840106d6    0x10    li a1,30
    0x840106d8    0x12    li a7,3
    0x840106da    0x14    lui a6,0xfff00
    0x840106de    0x18    srli a6,a6,0x8
    0x840106e2    0x1c    li a2,-1
    0x840106e4    0x1e    slli a2,a2,0x26
    0x840106e6    0x20    j ffffffff84010704 <lookupPTSlot+0x3e>
    0x840106e8    0x22    addi a1,a1,-9
    0x840106ea    0x24    beq a1,a7,ffffffff84010728 <lookupPTSlot+0x62>
    0x840106ee    0x28    slli a0,a5,0x2
    0x840106f2    0x2c    and a0,a0,a6
    0x840106f6    0x30    add a0,a0,a2
    0x840106f8    0x32    srl a5,a3,a1
    0x840106fc    0x36    andi a5,a5,511
    0x84010700    0x3a    slli a5,a5,0x3
    0x84010702    0x3c    add a0,a0,a5
    0x84010704    0x3e    ld a5,0(a0)
    0x84010706    0x40    andi a4,a5,1
    0x8401070a    0x44    beqz a4,ffffffff84010724 <lookupPTSlot+0x5e>
    0x8401070c    0x46    srli a4,a5,0x1
    0x84010710    0x4a    srli t1,a5,0x2
    0x84010714    0x4e    or a4,a4,t1
    0x84010718    0x52    srli t1,a5,0x3
    0x8401071c    0x56    or a4,a4,t1
    0x84010720    0x5a    andi a4,a4,1
    0x84010722    0x5c    beqz a4,ffffffff840106e8 <lookupPTSlot+0x22>
    0x84010724    0x5e    addi sp,sp,16
    0x84010726    0x60    ret
    0x84010728    0x62    li a1,12
    0x8401072a    0x64    j ffffffff84010724 <lookupPTSlot+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 44 nodes.

Section copyGlobalMappings (69 of 267)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x840104be     0x0    auipc a5,0xa
    0x840104c2     0x4    addi a5,a5,834 # ffffffff8401a800 <kernel_root_pageTable+0x800>
    0x840104c6     0x8    lui a4,0x1
    0x840104c8     0xa    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x840104cc     0xe    add a4,a4,a0
    0x840104ce    0x10    auipc a2,0xb
    0x840104d2    0x14    addi a2,a2,-1230 # ffffffff8401b000 <kernel_root_pageTable+0x1000>
    0x840104d6    0x18    ld a3,0(a5)
    0x840104d8    0x1a    sd a3,0(a4)
    0x840104da    0x1c    addi a5,a5,8
    0x840104dc    0x1e    addi a4,a4,8
    0x840104de    0x20    bne a5,a2,ffffffff840104d6 <copyGlobalMappings+0x18>
    0x840104e2    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (70 of 267)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x840104bc    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (71 of 267)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x840104ba    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (72 of 267)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x8401034a    0x0    li a0,0
    0x8401034c    0x2    li a1,0
    0x8401034e    0x4    li a2,0
    0x84010350    0x6    li a7,8
    0x84010352    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section cap_get_capPtr (73 of 267)
==================================

Deriving specifications
-----------------------

Section `cap_get_capPtr` consists of 106 instructions.

RVC_TFFFFT___FFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `cap_get_capPtr`:

    0x84010182      0x0    addi sp,sp,-16
    0x84010184      0x2    srli a5,a0,0x3b
    0x84010188      0x6    li a4,20
    0x8401018a      0x8    bltu a4,a5,ffffffff84010242 <cap_get_capPtr+0xc0>
    0x8401018e      0xc    slli a3,a5,0x2
    0x84010192     0x10    auipc a2,0x7
    0x84010196     0x14    addi a2,a2,-218 # ffffffff840170b8 <ksDomScheduleLength+0x8>
    0x8401019a     0x18    add a3,a3,a2
    0x8401019c     0x1a    lw a4,0(a3)
    0x8401019e     0x1c    add a4,a4,a2
    0x840101a0     0x1e    jr a4
    0x840101a2     0x20    slli a5,a0,0x19
    0x840101a6     0x24    srli a5,a5,0x19
    0x840101a8     0x26    slli a4,a0,0x19
    0x840101ac     0x2a    bgez a4,ffffffff840101b6 <cap_get_capPtr+0x34>
    0x840101b0     0x2e    li a4,-1
    0x840101b2     0x30    slli a4,a4,0x27
    0x840101b4     0x32    or a5,a5,a4
    0x840101b6     0x34    mv a0,a5
    0x840101b8     0x36    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x840101ba     0x38    slli a5,a0,0x19
    0x840101be     0x3c    srli a5,a5,0x19
    0x840101c0     0x3e    slli a4,a0,0x19
    0x840101c4     0x42    bgez a4,ffffffff840101ce <cap_get_capPtr+0x4c>
    0x840101c8     0x46    li a4,-1
    0x840101ca     0x48    slli a4,a4,0x27
    0x840101cc     0x4a    or a5,a5,a4
    0x840101ce     0x4c    mv a0,a5
    0x840101d0     0x4e    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x840101d2     0x50    slli a5,a0,0x19
    0x840101d6     0x54    srli a5,a5,0x19
    0x840101d8     0x56    slli a4,a0,0x19
    0x840101dc     0x5a    bgez a4,ffffffff840101e6 <cap_get_capPtr+0x64>
    0x840101e0     0x5e    li a4,-1
    0x840101e2     0x60    slli a4,a4,0x27
    0x840101e4     0x62    or a5,a5,a4
    0x840101e6     0x64    mv a0,a5
    0x840101e8     0x66    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x840101ea     0x68    slli a5,a0,0x1
    0x840101ee     0x6c    lui a0,0xfc000
    0x840101f2     0x70    srli a0,a0,0x19
    0x840101f4     0x72    and a0,a0,a5
    0x840101f6     0x74    slli a4,a5,0x19
    0x840101fa     0x78    bgez a4,ffffffff840102a4 <cap_get_capPtr+0x122>
    0x840101fe     0x7c    li a5,-1
    0x84010200     0x7e    slli a5,a5,0x27
    0x84010202     0x80    or a0,a0,a5
    0x84010204     0x82    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x84010206     0x84    slli a5,a0,0x19
    0x8401020a     0x88    srli a5,a5,0x19
    0x8401020c     0x8a    slli a4,a0,0x19
    0x84010210     0x8e    bgez a4,ffffffff8401021a <cap_get_capPtr+0x98>
    0x84010214     0x92    li a4,-1
    0x84010216     0x94    slli a4,a4,0x27
    0x84010218     0x96    or a5,a5,a4
    0x8401021a     0x98    andi a0,a5,-1024
    0x8401021e     0x9c    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x84010220     0x9e    andi a5,a0,127
    0x84010224     0xa2    li a4,64
    0x84010228     0xa6    beq a5,a4,ffffffff8401023e <cap_get_capPtr+0xbc>
    0x8401022c     0xaa    andi a0,a0,63
    0x84010230     0xae    addiw a5,a0,1
    0x84010234     0xb2    li a0,-1
    0x84010236     0xb4    sll a0,a0,a5
    0x8401023a     0xb8    and a0,a0,a1
    0x8401023c     0xba    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x8401023e     0xbc    li a0,4
    0x84010240     0xbe    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x84010242     0xc0    li a4,3
    0x84010244     0xc2    beq a5,a4,ffffffff8401026e <cap_get_capPtr+0xec>
    0x84010248     0xc6    li a4,13
    0x8401024a     0xc8    beq a5,a4,ffffffff84010286 <cap_get_capPtr+0x104>
    0x8401024e     0xcc    li a4,1
    0x84010250     0xce    li a0,0
    0x84010252     0xd0    bne a5,a4,ffffffff840102a4 <cap_get_capPtr+0x122>
    0x84010256     0xd4    srli a1,a1,0x9
    0x84010258     0xd6    slli a0,a1,0x19
    0x8401025c     0xda    srli a0,a0,0x19
    0x8401025e     0xdc    slli a5,a1,0x19
    0x84010262     0xe0    bgez a5,ffffffff840102a4 <cap_get_capPtr+0x122>
    0x84010266     0xe4    li a5,-1
    0x84010268     0xe6    slli a5,a5,0x27
    0x8401026a     0xe8    or a0,a0,a5
    0x8401026c     0xea    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x8401026e     0xec    srli a1,a1,0x9
    0x84010270     0xee    slli a0,a1,0x19
    0x84010274     0xf2    srli a0,a0,0x19
    0x84010276     0xf4    slli a5,a1,0x19
    0x8401027a     0xf8    bgez a5,ffffffff840102a4 <cap_get_capPtr+0x122>
    0x8401027e     0xfc    li a5,-1
    0x84010280     0xfe    slli a5,a5,0x27
    0x84010282    0x100    or a0,a0,a5
    0x84010284    0x102    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x84010286    0x104    slli a5,a0,0x2
    0x8401028a    0x108    lui a0,0xf8000
    0x8401028e    0x10c    srli a0,a0,0x19
    0x84010290    0x10e    and a0,a0,a5
    0x84010292    0x110    slli a4,a5,0x19
    0x84010296    0x114    bgez a4,ffffffff840102a4 <cap_get_capPtr+0x122>
    0x8401029a    0x118    li a5,-1
    0x8401029c    0x11a    slli a5,a5,0x27
    0x8401029e    0x11c    or a0,a0,a5
    0x840102a0    0x11e    j ffffffff840102a4 <cap_get_capPtr+0x122>
    0x840102a2    0x120    li a0,0
    0x840102a4    0x122    addi sp,sp,16
    0x840102a6    0x124    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
106 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cap_get_capPtr` has 135 nodes.

Section getNewActiveIRQ (74 of 267)
===================================

Deriving specifications
-----------------------

Section `getNewActiveIRQ` consists of 13 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `getNewActiveIRQ`:

    0x8401015e     0x0    csrr a0,sip
    0x84010162     0x4    andi a5,a0,512
    0x84010166     0x8    bnez a5,ffffffff84010170 <getNewActiveIRQ+0x12>
    0x84010168     0xa    andi a0,a0,32
    0x8401016c     0xe    bnez a0,ffffffff8401017c <getNewActiveIRQ+0x1e>
    0x8401016e    0x10    ret
    0x84010170    0x12    lui a5,0xcc202
    0x84010174    0x16    lw a0,4(a5)
    0x84010176    0x18    slli a0,a0,0x20
    0x84010178    0x1a    srli a0,a0,0x20
    0x8401017a    0x1c    ret
    0x8401017c    0x1e    li a0,54
    0x84010180    0x22    j ffffffff8401016e <getNewActiveIRQ+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNewActiveIRQ` has 21 nodes.

Section findVSpaceForASID (75 of 267)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 35 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x840100fe     0x0    addi sp,sp,-16
    0x84010100     0x2    srli a5,a0,0x9
    0x84010104     0x6    slli a4,a5,0x3
    0x84010108     0xa    auipc a5,0xb
    0x8401010c     0xe    addi a5,a5,1824 # ffffffff8401b828 <riscvKSASIDTable>
    0x84010110    0x12    add a5,a5,a4
    0x84010112    0x14    ld a5,0(a5)
    0x84010114    0x16    beqz a5,ffffffff8401012e <findVSpaceForASID+0x30>
    0x84010116    0x18    andi a0,a0,511
    0x8401011a    0x1c    slli a0,a0,0x3
    0x8401011c    0x1e    add a0,a0,a5
    0x8401011e    0x20    ld a5,0(a0)
    0x84010120    0x22    beqz a5,ffffffff84010146 <findVSpaceForASID+0x48>
    0x84010122    0x24    sd zero,0(sp)         ; stack access
    0x84010124    0x26    sd a5,8(sp)           ; stack access
    0x84010126    0x28    ld a0,0(sp)           ; stack access
    0x84010128    0x2a    ld a1,8(sp)           ; stack access
    0x8401012a    0x2c    addi sp,sp,16
    0x8401012c    0x2e    ret
    0x8401012e    0x30    auipc a5,0xd
    0x84010132    0x34    addi a5,a5,-1278 # ffffffff8401cc30 <current_lookup_fault>
    0x84010136    0x38    sd zero,0(a5)
    0x8401013a    0x3c    sd zero,8(a5)
    0x8401013e    0x40    li a5,2
    0x84010140    0x42    sd a5,0(sp)           ; stack access
    0x84010142    0x44    sd zero,8(sp)         ; stack access
    0x84010144    0x46    j ffffffff84010126 <findVSpaceForASID+0x28>
    0x84010146    0x48    auipc a5,0xd
    0x8401014a    0x4c    addi a5,a5,-1302 # ffffffff8401cc30 <current_lookup_fault>
    0x8401014e    0x50    sd zero,0(a5)
    0x84010152    0x54    sd zero,8(a5)
    0x84010156    0x58    li a5,2
    0x84010158    0x5a    sd a5,0(sp)           ; stack access
    0x8401015a    0x5c    sd zero,8(sp)         ; stack access
    0x8401015c    0x5e    j ffffffff84010126 <findVSpaceForASID+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 54 nodes.

Section pte_next (76 of 267)
============================

Deriving specifications
-----------------------

Section `pte_next` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `pte_next`:

    0x840100da     0x0    snez a1,a1
    0x840100de     0x4    srli a0,a0,0x2
    0x840100e0     0x6    lui a5,0xfff00
    0x840100e4     0xa    srli a5,a5,0xa
    0x840100e6     0xc    and a0,a0,a5
    0x840100e8     0xe    slli a5,a1,0x3
    0x840100ec    0x12    slli a4,a1,0x2
    0x840100f0    0x16    or a5,a5,a4
    0x840100f2    0x18    or a0,a0,a5
    0x840100f4    0x1a    slli a1,a1,0x1
    0x840100f6    0x1c    or a0,a0,a1
    0x840100f8    0x1e    ori a0,a0,225
    0x840100fc    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `pte_next` has 14 nodes.

Section idle_thread (77 of 267)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x840100d4    0x0    wfi
    0x840100d8    0x4    j ffffffff840100d4 <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section bi_finalise (78 of 267)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x84000b88     0x0    auipc a5,0x1
    0x84000b8c     0x4    addi a5,a5,-1640 # ffffffff84001520 <ndks_boot>
    0x84000b90     0x8    ld a3,592(a5)
    0x84000b94     0xc    ld a4,600(a5)
    0x84000b98    0x10    ld a5,584(a5)
    0x84000b9c    0x14    sd a3,40(a5)
    0x84000b9e    0x16    sd a4,48(a5)
    0x84000ba0    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (79 of 267)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 7 instructions.


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x84000960     0x0    auipc a5,0x1c
    0x84000964     0x4    sd a0,736(a5) # ffffffff8401cc40 <ksSchedulerAction>
    0x84000968     0x8    auipc a5,0x1c
    0x8400096c     0xc    ld a5,704(a5) # ffffffff8401cc28 <ksIdleThread>
    0x84000970    0x10    auipc a4,0x2d
    0x84000974    0x14    sd a5,296(a4) # ffffffff8402da98 <ksCurThread>
    0x84000978    0x18    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 11 nodes.

Section create_root_cnode (80 of 267)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_root_cnode`:

    0x840005aa     0x0    addi sp,sp,-16
    0x840005ac     0x2    auipc a5,0x1
    0x840005b0     0x6    addi a5,a5,-140 # ffffffff84001520 <ndks_boot>
    0x840005b4     0xa    lui a4,0x80
    0x840005b8     0xe    sd a4,600(a5)
    0x840005bc    0x12    ld a4,608(a5)
    0x840005c0    0x16    slli a0,a4,0x19
    0x840005c4    0x1a    srli a0,a0,0x1a
    0x840005c6    0x1c    lui a5,0xab53
    0x840005ca    0x20    slli a5,a5,0x23
    0x840005cc    0x22    or a0,a0,a5
    0x840005ce    0x24    addi a5,a4,64 # 80040 <KERNEL_OFFSET-0xfffffffefff7ffc0>
    0x840005d2    0x28    sd a0,64(a4)
    0x840005d4    0x2a    sd zero,72(a4)
    0x840005d8    0x2e    sd zero,80(a4)
    0x840005dc    0x32    li a4,3
    0x840005de    0x34    sd a4,24(a5)
    0x840005e0    0x36    li a1,0
    0x840005e2    0x38    addi sp,sp,16
    0x840005e4    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (81 of 267)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x84000598     0x0    addi sp,sp,-16
    0x8400059a     0x2    sd a1,0(a0)
    0x8400059c     0x4    sd a2,8(a0)
    0x8400059e     0x6    sd zero,16(a0) # c000010 <KERNEL_OFFSET-0xfffffffef3fffff0>
    0x840005a2     0xa    li a5,3
    0x840005a4     0xc    sd a5,24(a0)
    0x840005a6     0xe    addi sp,sp,16
    0x840005a8    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section initIRQController (82 of 267)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 30 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x84000310     0x0    li a4,1
    0x84000312     0x2    lui a1,0xcc001
    0x84000316     0x6    lui a3,0xcc202
    0x8400031a     0xa    li a2,54
    0x8400031e     0xe    j ffffffff84000326 <initIRQController+0x16>
    0x84000320    0x10    addi a4,a4,1
    0x84000322    0x12    beq a4,a2,ffffffff8400034a <initIRQController+0x3a>
    0x84000326    0x16    sext.w a0,a4
    0x8400032a    0x1a    srli a5,a4,0x5
    0x8400032e    0x1e    slli a5,a5,0x2
    0x84000330    0x20    add a5,a5,a1
    0x84000332    0x22    lw a5,0(a5)
    0x84000334    0x24    slli a5,a5,0x20
    0x84000336    0x26    srli a5,a5,0x20
    0x84000338    0x28    andi a6,a4,31
    0x8400033c    0x2c    srl a5,a5,a6
    0x84000340    0x30    andi a5,a5,1
    0x84000342    0x32    beqz a5,ffffffff84000320 <initIRQController+0x10>
    0x84000344    0x34    lw a5,4(a3)
    0x84000346    0x36    sw a0,4(a3)
    0x84000348    0x38    j ffffffff84000320 <initIRQController+0x10>
    0x8400034a    0x3a    lui a5,0xcc000
    0x8400034e    0x3e    addi a5,a5,4
    0x84000350    0x40    li a3,2
    0x84000352    0x42    lui a4,0xcc000
    0x84000356    0x46    addi a4,a4,220 # ffffffffcc0000dc <ki_end+0x47fd20dc>
    0x8400035a    0x4a    sw a3,0(a5)
    0x8400035c    0x4c    addi a5,a5,4
    0x8400035e    0x4e    bne a5,a4,ffffffff8400035a <initIRQController+0x4a>
    0x84000362    0x52    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 41 nodes.

Section initLocalIRQController (83 of 267)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 22 instructions.

SW..
Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x840002cc     0x0    li a3,1
    0x840002ce     0x2    lui a1,0xcc002
    0x840002d2     0x6    addi a1,a1,256 # ffffffffcc002100 <ki_end+0x47fd4100>
    0x840002d6     0xa    li a6,1
    0x840002d8     0xc    li a0,54
    0x840002dc    0x10    srli a4,a3,0x5
    0x840002e0    0x14    slli a4,a4,0x2
    0x840002e2    0x16    add a4,a4,a1
    0x840002e4    0x18    lw a2,0(a4)
    0x840002e6    0x1a    andi a5,a3,31
    0x840002ea    0x1e    sll a5,a6,a5
    0x840002ee    0x22    not a5,a5
    0x840002f2    0x26    and a5,a5,a2
    0x840002f4    0x28    sext.w a5,a5
    0x840002f6    0x2a    sw a5,0(a4)
    0x840002f8    0x2c    addi a3,a3,1
    0x840002fa    0x2e    bne a3,a0,ffffffff840002dc <initLocalIRQController+0x10>
    0x840002fe    0x32    lui a5,0xcc202
    0x84000302    0x36    sw zero,0(a5) # ffffffffcc202000 <ki_end+0x481d4000>
    0x84000306    0x3a    li a5,544
    0x8400030a    0x3e    csrrs a5,sie,a5
    0x8400030e    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 29 nodes.

Section initL2Cache (84 of 267)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x840002ca    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section initTimer (85 of 267)
=============================

Deriving specifications
-----------------------

Section `initTimer` consists of 7 instructions.

Skipping c0102573 rdtime a0

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `initTimer`:

    0x840002b6     0x0    rdtime a0
    0x840002ba     0x4    addi a0,a0,2000
    0x840002be     0x8    li a1,0
    0x840002c0     0xa    li a2,0
    0x840002c2     0xc    li a7,0
    0x840002c4     0xe    ecall
    0x840002c8    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initTimer` has 10 nodes.

Section get_avail_p_regs (86 of 267)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x840002ac    0x0    auipc a0,0x1
    0x840002b0    0x4    addi a0,a0,612 # ffffffff84001510 <avail_p_regs>
    0x840002b4    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (87 of 267)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x840002a8    0x0    li a0,1
    0x840002aa    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section activate_kernel_vspace (88 of 267)
==========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x84000138     0x0    auipc a5,0x1a
    0x8400013c     0x4    addi a5,a5,-312 # ffffffff8401a000 <kernel_root_pageTable>
    0x84000140     0x8    li a4,1
    0x84000142     0xa    slli a4,a4,0x20
    0x84000144     0xc    add a5,a5,a4
    0x84000146     0xe    srli a5,a5,0xc
    0x84000148    0x10    li a4,-1
    0x8400014a    0x12    srli a3,a4,0x14
    0x8400014e    0x16    and a5,a5,a3
    0x84000150    0x18    slli a4,a4,0x3f
    0x84000152    0x1a    or a5,a5,a4
    0x84000154    0x1c    csrw satp,a5
    0x84000158    0x20    sfence.vma
    0x8400015c    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (89 of 267)
=====================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x84000108     0x0    addi sp,sp,-16
    0x8400010a     0x2    addi a1,a1,-1
    0x8400010c     0x4    srli a4,a1,0x15
    0x84000110     0x8    addi a4,a4,1
    0x84000112     0xa    slli a4,a4,0x15
    0x84000114     0xc    lui a5,0xffe00
    0x84000118    0x10    and a5,a5,a0
    0x8400011a    0x12    sub a4,a4,a5
    0x8400011c    0x14    srli a4,a4,0x15
    0x8400011e    0x16    srli a5,a1,0x1e
    0x84000122    0x1a    addi a5,a5,1
    0x84000124    0x1c    slli a5,a5,0x1e
    0x84000126    0x1e    lui a3,0xc0000
    0x8400012a    0x22    and a0,a0,a3
    0x8400012c    0x24    sub a5,a5,a0
    0x8400012e    0x26    srli a5,a5,0x1e
    0x84000130    0x28    add a0,a4,a5
    0x84000134    0x2c    addi sp,sp,16
    0x84000136    0x2e    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (90 of 267)
================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x840000f2     0x0    addi sp,sp,-16
    0x840000f4     0x2    slli a1,a0,0x9
    0x840000f8     0x6    li a0,1
    0x840000fa     0x8    slli a0,a0,0x3b
    0x840000fc     0xa    lui a5,0xfe000
    0x84000100     0xe    srli a5,a5,0x10
    0x84000102    0x10    and a1,a1,a5
    0x84000104    0x12    addi sp,sp,16
    0x84000106    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section Arch_configureIdleThread (91 of 267)
============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x840000a4     0x0    auipc a5,0x10
    0x840000a8     0x4    addi a5,a5,48 # ffffffff840100d4 <idle_thread>
    0x840000ac     0x8    sd a5,272(a0)
    0x840000b0     0xc    li a5,288
    0x840000b4    0x10    sd a5,256(a0)
    0x840000b8    0x14    auipc a5,0x1d
    0x840000bc    0x18    addi a5,a5,-1168 # ffffffff8401cc28 <ksIdleThread>
    0x840000c0    0x1c    sd a5,8(a0)
    0x840000c2    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (92 of 267)
=================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 43 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    auipc a1,0x1
    0x8400002a     0x4    ld a1,1594(a1) # ffffffff84001660 <ndks_boot+0x140>
    0x8400002e     0x8    li a5,1
    0x84000030     0xa    bgeu a5,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000034     0xe    li a4,1
    0x84000036    0x10    auipc a2,0x1
    0x8400003a    0x14    addi a2,a2,1258 # ffffffff84001520 <ndks_boot>
    0x8400003e    0x18    auipc a6,0x1
    0x84000042    0x1c    addi a6,a6,1234 # ffffffff84001510 <avail_p_regs>
    0x84000046    0x20    j ffffffff84000086 <merge_regions+0x60>
    0x84000048    0x22    slli a5,a4,0x4
    0x8400004c    0x26    add a5,a5,a2
    0x8400004e    0x28    ld a5,8(a5)
    0x84000050    0x2a    slli a0,a0,0x4
    0x84000052    0x2c    add a0,a0,a2
    0x84000054    0x2e    sd a5,8(a0)
    0x84000056    0x30    addi a5,a4,1
    0x8400005a    0x34    bgeu a5,a1,ffffffff84000078 <merge_regions+0x52>
    0x8400005e    0x38    slli a5,a4,0x4
    0x84000062    0x3c    add a5,a5,a2
    0x84000064    0x3e    slli a0,a1,0x4
    0x84000068    0x42    add a0,a0,a6
    0x8400006a    0x44    ld a3,16(a5)
    0x8400006c    0x46    sd a3,0(a5)
    0x8400006e    0x48    ld a3,24(a5)
    0x84000070    0x4a    sd a3,8(a5)
    0x84000072    0x4c    addi a5,a5,16
    0x84000074    0x4e    bne a5,a0,ffffffff8400006a <merge_regions+0x44>
    0x84000078    0x52    addi a1,a1,-1
    0x8400007a    0x54    sd a1,320(a2)
    0x8400007e    0x58    ld a1,320(a2)
    0x84000082    0x5c    bgeu a4,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000086    0x60    addi a0,a4,-1
    0x8400008a    0x64    slli a3,a0,0x4
    0x8400008e    0x68    add a3,a3,a2
    0x84000090    0x6a    slli a5,a4,0x4
    0x84000094    0x6e    add a5,a5,a2
    0x84000096    0x70    ld a3,8(a3)
    0x84000098    0x72    ld a5,0(a5)
    0x8400009a    0x74    beq a3,a5,ffffffff84000048 <merge_regions+0x22>
    0x8400009e    0x78    addi a4,a4,1
    0x840000a0    0x7a    j ffffffff8400007e <merge_regions+0x58>
    0x840000a2    0x7c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 65 nodes.

Section str_to_long (93 of 267)
===============================

Deriving specifications
-----------------------

Section `str_to_long` consists of 44 instructions.

RVC_FTTTFFFTF_____FT.
JAL.
MUL.....
RVC_FTT_FFFFT_____TF.
RVC_FTT_T_________TF.
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `str_to_long`:

    0x84016fae     0x0    addi sp,sp,-48
    0x84016fb0     0x2    sd ra,40(sp)          ; stack access
    0x84016fb2     0x4    sd s0,32(sp)          ; stack access
    0x84016fb4     0x6    sd s1,24(sp)          ; stack access
    0x84016fb6     0x8    sd s2,16(sp)          ; stack access
    0x84016fb8     0xa    sd s3,8(sp)           ; stack access
    0x84016fba     0xc    mv s1,a0
    0x84016fbc     0xe    lbu a0,0(a0)
    0x84016fc0    0x12    li a5,48
    0x84016fc4    0x16    li s2,10
    0x84016fc6    0x18    beq a0,a5,ffffffff84016ff8 <str_to_long+0x4a>
    0x84016fca    0x1c    lbu a0,0(s1)
    0x84016fce    0x20    beqz a0,ffffffff8401700e <str_to_long+0x60>
    0x84016fd0    0x22    li s0,0
    0x84016fd2    0x24    li s3,-1
    0x84016fd4    0x26    slli s2,s2,0x20
    0x84016fd6    0x28    srli s2,s2,0x20
    0x84016fda    0x2c    jal ra,ffffffff84016f6e <char_to_long>
    0x84016fde    0x30    beq a0,s3,ffffffff84017014 <str_to_long+0x66>
    0x84016fe2    0x34    bge a0,s2,ffffffff84017012 <str_to_long+0x64>
    0x84016fe6    0x38    mul s0,s2,s0
    0x84016fea    0x3c    add s0,s0,a0
    0x84016fec    0x3e    addi s1,s1,1
    0x84016fee    0x40    lbu a0,0(s1)
    0x84016ff2    0x44    bnez a0,ffffffff84016fda <str_to_long+0x2c>
    0x84016ff4    0x46    mv a0,s0
    0x84016ff6    0x48    j ffffffff84017014 <str_to_long+0x66>
    0x84016ff8    0x4a    lbu a5,1(s1)
    0x84016ffc    0x4e    andi a5,a5,223
    0x84017000    0x52    li a4,88
    0x84017004    0x56    bne a5,a4,ffffffff84016fd0 <str_to_long+0x22>
    0x84017008    0x5a    addi s1,s1,2
    0x8401700a    0x5c    li s2,16
    0x8401700c    0x5e    j ffffffff84016fca <str_to_long+0x1c>
    0x8401700e    0x60    li a0,-1
    0x84017010    0x62    j ffffffff84017014 <str_to_long+0x66>
    0x84017012    0x64    li a0,-1
    0x84017014    0x66    ld ra,40(sp)          ; stack access
    0x84017016    0x68    ld s0,32(sp)          ; stack access
    0x84017018    0x6a    ld s1,24(sp)          ; stack access
    0x8401701a    0x6c    ld s2,16(sp)          ; stack access
    0x8401701c    0x6e    ld s3,8(sp)           ; stack access
    0x8401701e    0x70    addi sp,sp,48
    0x84017020    0x72    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 72 nodes.

Section memset (94 of 267)
==========================

Deriving specifications
-----------------------

Section `memset` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `memset`:

    0x84016efa     0x0    addi sp,sp,-16
    0x84016efc     0x2    sd ra,8(sp)           ; stack access
    0x84016efe     0x4    sd s0,0(sp)           ; stack access
    0x84016f00     0x6    mv s0,a0
    0x84016f02     0x8    mv a4,a1
    0x84016f04     0xa    mv a1,a2
    0x84016f06     0xc    or a5,a0,a2
    0x84016f0a    0x10    andi a5,a5,7
    0x84016f0c    0x12    or a5,a5,a4
    0x84016f0e    0x14    bnez a5,ffffffff84016f1e <memset+0x24>
    0x84016f10    0x16    jal ra,ffffffff840156b8 <memzero>
    0x84016f14    0x1a    mv a0,s0
    0x84016f16    0x1c    ld ra,8(sp)           ; stack access
    0x84016f18    0x1e    ld s0,0(sp)           ; stack access
    0x84016f1a    0x20    addi sp,sp,16
    0x84016f1c    0x22    ret
    0x84016f1e    0x24    add a3,a0,a2
    0x84016f22    0x28    mv a5,a0
    0x84016f24    0x2a    beqz a2,ffffffff84016f14 <memset+0x1a>
    0x84016f26    0x2c    sb a4,0(a5)
    0x84016f2a    0x30    addi a5,a5,1
    0x84016f2c    0x32    bne a3,a5,ffffffff84016f26 <memset+0x2c>
    0x84016f30    0x36    j ffffffff84016f14 <memset+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 36 nodes.

Section Arch_decodeInvocation (95 of 267)
=========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 7 instructions.

RVC_TFFFT____T____TF..

Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_decodeInvocation`:

    0x84016028    0x0    addi sp,sp,-32
    0x8401602a    0x2    sd ra,24(sp)          ; stack access
    0x8401602c    0x4    mv a6,a7
    0x8401602e    0x6    jal ra,ffffffff8401573a <decodeRISCVMMUInvocation>
    0x84016032    0xa    ld ra,24(sp)          ; stack access
    0x84016034    0xc    addi sp,sp,32
    0x84016036    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 11 nodes.

Section setMRs_syscall_error (96 of 267)
========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 88 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x840154e8     0x0    addi sp,sp,-16
    0x840154ea     0x2    sd ra,8(sp)           ; stack access
    0x840154ec     0x4    mv a5,a0
    0x840154ee     0x6    auipc a0,0x7
    0x840154f2     0xa    ld a0,1930(a0) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840154f6     0xe    li a4,10
    0x840154f8    0x10    bltu a4,a0,ffffffff840155ce <setMRs_syscall_error+0xe6>
    0x840154fc    0x14    slli a3,a0,0x2
    0x84015500    0x18    auipc a2,0x2
    0x84015504    0x1c    addi a2,a2,-360 # ffffffff84017398 <ksDomScheduleLength+0x2e8>
    0x84015508    0x20    add a3,a3,a2
    0x8401550a    0x22    lw a4,0(a3)
    0x8401550c    0x24    add a4,a4,a2
    0x8401550e    0x26    jr a4
    0x84015510    0x28    auipc a4,0x7
    0x84015514    0x2c    ld a4,1848(a4) # ffffffff8401cc48 <current_syscall_error>
    0x84015518    0x30    sd a4,88(a5)
    0x8401551a    0x32    j ffffffff840155d4 <setMRs_syscall_error+0xec>
    0x8401551c    0x34    auipc a4,0x7
    0x84015520    0x38    ld a4,1844(a4) # ffffffff8401cc50 <current_syscall_error+0x8>
    0x84015524    0x3c    sd a4,88(a5)
    0x84015526    0x3e    li a0,1
    0x84015528    0x40    j ffffffff840155d4 <setMRs_syscall_error+0xec>
    0x8401552a    0x42    auipc a4,0x7
    0x8401552e    0x46    addi a4,a4,1822 # ffffffff8401cc48 <current_syscall_error>
    0x84015532    0x4a    ld a3,16(a4)
    0x84015534    0x4c    sd a3,88(a5)
    0x84015536    0x4e    ld a4,24(a4)
    0x84015538    0x50    sd a4,96(a5)
    0x8401553a    0x52    li a0,2
    0x8401553c    0x54    j ffffffff840155d4 <setMRs_syscall_error+0xec>
    0x8401553e    0x56    auipc a4,0x7
    0x84015542    0x5a    ld a4,1842(a4) # ffffffff8401cc70 <current_syscall_error+0x28>
    0x84015546    0x5e    snez a4,a4
    0x8401554a    0x62    sd a4,88(a5)
    0x8401554c    0x64    auipc a4,0x7
    0x84015550    0x68    addi a4,a4,1764 # ffffffff8401cc30 <current_lookup_fault>
    0x84015554    0x6c    ld a3,0(a4)
    0x84015556    0x6e    ld a0,8(a4)
    0x84015558    0x70    andi a4,a3,3
    0x8401555c    0x74    addi a2,a4,1
    0x84015560    0x78    sd a2,96(a5)
    0x84015562    0x7a    li a2,2
    0x84015564    0x7c    beq a4,a2,ffffffff84015580 <setMRs_syscall_error+0x98>
    0x84015568    0x80    bltu a2,a4,ffffffff84015596 <setMRs_syscall_error+0xae>
    0x8401556c    0x84    beqz a4,ffffffff840155b4 <setMRs_syscall_error+0xcc>
    0x8401556e    0x86    li a2,1
    0x84015570    0x88    bne a4,a2,ffffffff840155b0 <setMRs_syscall_error+0xc8>
    0x84015574    0x8c    srli a3,a3,0x2
    0x84015576    0x8e    andi a3,a3,127
    0x8401557a    0x92    sd a3,104(a5)
    0x8401557c    0x94    li a0,3
    0x8401557e    0x96    j ffffffff840155b6 <setMRs_syscall_error+0xce>
    0x84015580    0x98    srli a4,a3,0x2
    0x84015584    0x9c    andi a4,a4,127
    0x84015588    0xa0    sd a4,104(a5)
    0x8401558a    0xa2    srli a3,a3,0x9
    0x8401558c    0xa4    andi a3,a3,127
    0x84015590    0xa8    sd a3,112(a5)
    0x84015592    0xaa    li a0,4
    0x84015594    0xac    j ffffffff840155b6 <setMRs_syscall_error+0xce>
    0x84015596    0xae    srli a4,a3,0x9
    0x8401559a    0xb2    andi a4,a4,127
    0x8401559e    0xb6    sd a4,104(a5)
    0x840155a0    0xb8    sd a0,112(a5)
    0x840155a2    0xba    beqz a1,ffffffff840155bc <setMRs_syscall_error+0xd4>
    0x840155a4    0xbc    srli a3,a3,0x2
    0x840155a6    0xbe    andi a3,a3,127
    0x840155aa    0xc2    sd a3,40(a1)
    0x840155ac    0xc4    li a0,5
    0x840155ae    0xc6    j ffffffff840155b6 <setMRs_syscall_error+0xce>
    0x840155b0    0xc8    jal ra,ffffffff8401034a <halt>
    0x840155b4    0xcc    li a0,2
    0x840155b6    0xce    slli a0,a0,0x20
    0x840155b8    0xd0    srli a0,a0,0x20
    0x840155ba    0xd2    j ffffffff840155d4 <setMRs_syscall_error+0xec>
    0x840155bc    0xd4    li a0,4
    0x840155be    0xd6    j ffffffff840155b6 <setMRs_syscall_error+0xce>
    0x840155c0    0xd8    auipc a4,0x7
    0x840155c4    0xdc    ld a4,1704(a4) # ffffffff8401cc68 <current_syscall_error+0x20>
    0x840155c8    0xe0    sd a4,88(a5)
    0x840155ca    0xe2    li a0,1
    0x840155cc    0xe4    j ffffffff840155d4 <setMRs_syscall_error+0xec>
    0x840155ce    0xe6    jal ra,ffffffff8401034a <halt>
    0x840155d2    0xea    li a0,0
    0x840155d4    0xec    ld ra,8(sp)           ; stack access
    0x840155d6    0xee    addi sp,sp,16
    0x840155d8    0xf0    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 129 nodes.

Section invokeTCB_Resume (97 of 267)
====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x840145c2    0x0    addi sp,sp,-16
    0x840145c4    0x2    sd ra,8(sp)           ; stack access
    0x840145c6    0x4    jal ra,ffffffff840137bc <restart>
    0x840145ca    0x8    li a0,0
    0x840145cc    0xa    ld ra,8(sp)           ; stack access
    0x840145ce    0xc    addi sp,sp,16
    0x840145d0    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 11 nodes.

Section invokeTCB_Suspend (98 of 267)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x840145b2    0x0    addi sp,sp,-16
    0x840145b4    0x2    sd ra,8(sp)           ; stack access
    0x840145b6    0x4    jal ra,ffffffff84012d86 <suspend>
    0x840145ba    0x8    li a0,0
    0x840145bc    0xa    ld ra,8(sp)           ; stack access
    0x840145be    0xc    addi sp,sp,16
    0x840145c0    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section performInvocation_Endpoint (99 of 267)
==============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x840141dc     0x0    addi sp,sp,-16
    0x840141de     0x2    sd ra,8(sp)           ; stack access
    0x840141e0     0x4    mv a6,a0
    0x840141e2     0x6    mv a7,a1
    0x840141e4     0x8    mv a0,a4
    0x840141e6     0xa    mv a1,a5
    0x840141e8     0xc    auipc a5,0x1a
    0x840141ec    0x10    ld a5,-1872(a5) # ffffffff8402da98 <ksCurThread>
    0x840141f0    0x14    mv a4,a3
    0x840141f2    0x16    mv a3,a2
    0x840141f4    0x18    mv a2,a7
    0x840141f6    0x1a    jal ra,ffffffff84013e8e <sendIPC>
    0x840141fa    0x1e    li a0,0
    0x840141fc    0x20    ld ra,8(sp)           ; stack access
    0x840141fe    0x22    addi sp,sp,16
    0x84014200    0x24    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 21 nodes.

Section performInvocation_Reply (100 of 267)
============================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x84013e70     0x0    addi sp,sp,-16
    0x84013e72     0x2    sd ra,8(sp)           ; stack access
    0x84013e74     0x4    mv a3,a2
    0x84013e76     0x6    mv a2,a1
    0x84013e78     0x8    mv a1,a0
    0x84013e7a     0xa    auipc a0,0x1a
    0x84013e7e     0xe    ld a0,-994(a0) # ffffffff8402da98 <ksCurThread>
    0x84013e82    0x12    jal ra,ffffffff84013dbe <doReplyTransfer>
    0x84013e86    0x16    li a0,0
    0x84013e88    0x18    ld ra,8(sp)           ; stack access
    0x84013e8a    0x1a    addi sp,sp,16
    0x84013e8c    0x1c    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 17 nodes.

Section lookupExtraCaps (101 of 267)
====================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 56 instructions.

RVC_FFFFT_________FT.

Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84013ad6     0x0    beqz a1,ffffffff84013b3c <lookupExtraCaps+0x66>
    0x84013ad8     0x2    addi sp,sp,-80
    0x84013ada     0x4    sd ra,72(sp)          ; stack access
    0x84013adc     0x6    sd s0,64(sp)          ; stack access
    0x84013ade     0x8    sd s1,56(sp)          ; stack access
    0x84013ae0     0xa    sd s2,48(sp)          ; stack access
    0x84013ae2     0xc    sd s3,40(sp)          ; stack access
    0x84013ae4     0xe    sd s4,32(sp)          ; stack access
    0x84013ae6    0x10    sd s5,24(sp)          ; stack access
    0x84013ae8    0x12    mv s4,a0
    0x84013aea    0x14    srli a2,a2,0x7
    0x84013aec    0x16    andi s3,a2,3
    0x84013af0    0x1a    beqz s3,ffffffff84013b28 <lookupExtraCaps+0x52>
    0x84013af4    0x1e    addi s0,a1,976
    0x84013af8    0x22    auipc s2,0x9
    0x84013afc    0x26    addi s2,s2,392 # ffffffff8401cc80 <current_extra_caps>
    0x84013b00    0x2a    li s1,0
    0x84013b02    0x2c    ld s5,0(s0)
    0x84013b06    0x30    mv a1,s5
    0x84013b08    0x32    mv a0,s4
    0x84013b0a    0x34    jal ra,ffffffff8401115c <lookupSlot>
    0x84013b0e    0x38    sd a1,8(sp)           ; stack access
    0x84013b10    0x3a    bnez a0,ffffffff84013b48 <lookupExtraCaps+0x72>
    0x84013b12    0x3c    ld a5,8(sp)           ; stack access
    0x84013b14    0x3e    sd a5,0(s2)
    0x84013b18    0x42    addi s1,s1,1
    0x84013b1a    0x44    addi s0,s0,8
    0x84013b1c    0x46    addi s2,s2,8
    0x84013b1e    0x48    bne s1,s3,ffffffff84013b02 <lookupExtraCaps+0x2c>
    0x84013b22    0x4c    li a5,2
    0x84013b24    0x4e    bltu a5,s3,ffffffff84013b58 <lookupExtraCaps+0x82>
    0x84013b28    0x52    slli s3,s3,0x3
    0x84013b2a    0x54    auipc a5,0x9
    0x84013b2e    0x58    addi a5,a5,342 # ffffffff8401cc80 <current_extra_caps>
    0x84013b32    0x5c    add s3,s3,a5
    0x84013b34    0x5e    sd zero,0(s3)
    0x84013b38    0x62    li a0,0
    0x84013b3a    0x64    j ffffffff84013b58 <lookupExtraCaps+0x82>
    0x84013b3c    0x66    auipc a5,0x9
    0x84013b40    0x6a    sd zero,324(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84013b44    0x6e    li a0,0
    0x84013b46    0x70    ret
    0x84013b48    0x72    auipc a5,0x8
    0x84013b4c    0x76    addi a5,a5,-840 # ffffffff8401b800 <current_fault>
    0x84013b50    0x7a    li a4,1
    0x84013b52    0x7c    sd a4,0(a5)
    0x84013b54    0x7e    sd s5,8(a5)
    0x84013b58    0x82    ld ra,72(sp)          ; stack access
    0x84013b5a    0x84    ld s0,64(sp)          ; stack access
    0x84013b5c    0x86    ld s1,56(sp)          ; stack access
    0x84013b5e    0x88    ld s2,48(sp)          ; stack access
    0x84013b60    0x8a    ld s3,40(sp)          ; stack access
    0x84013b62    0x8c    ld s4,32(sp)          ; stack access
    0x84013b64    0x8e    ld s5,24(sp)          ; stack access
    0x84013b66    0x90    addi sp,sp,80
    0x84013b68    0x92    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 91 nodes.

Section deleteCallerCap (102 of 267)
====================================

Deriving specifications
-----------------------

Section `deleteCallerCap` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteCallerCap`:

    0x84013ac0     0x0    addi sp,sp,-16
    0x84013ac2     0x2    sd ra,8(sp)           ; stack access
    0x84013ac4     0x4    andi a0,a0,-1024
    0x84013ac8     0x8    addi a0,a0,96
    0x84013acc     0xc    jal ra,ffffffff8401364e <cteDeleteOne>
    0x84013ad0    0x10    ld ra,8(sp)           ; stack access
    0x84013ad2    0x12    addi sp,sp,16
    0x84013ad4    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteCallerCap` has 12 nodes.

Section performInvocation_Notification (103 of 267)
===================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x84013a56    0x0    addi sp,sp,-16
    0x84013a58    0x2    sd ra,8(sp)           ; stack access
    0x84013a5a    0x4    jal ra,ffffffff840137fc <sendSignal>
    0x84013a5e    0x8    li a0,0
    0x84013a60    0xa    ld ra,8(sp)           ; stack access
    0x84013a62    0xc    addi sp,sp,16
    0x84013a64    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section deletingIRQHandler (104 of 267)
=======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletingIRQHandler`:

    0x840137a2     0x0    addi sp,sp,-16
    0x840137a4     0x2    sd ra,8(sp)           ; stack access
    0x840137a6     0x4    slli a0,a0,0x5
    0x840137a8     0x6    auipc a5,0x1a
    0x840137ac     0xa    addi a5,a5,-1960 # ffffffff8402d000 <intStateIRQNode>
    0x840137b0     0xe    add a0,a0,a5
    0x840137b2    0x10    jal ra,ffffffff8401364e <cteDeleteOne>
    0x840137b6    0x14    ld ra,8(sp)           ; stack access
    0x840137b8    0x16    addi sp,sp,16
    0x840137ba    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 14 nodes.

Section invokeIRQHandler_ClearIRQHandler (105 of 267)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeIRQHandler_ClearIRQHandler`:

    0x840136b8     0x0    addi sp,sp,-16
    0x840136ba     0x2    sd ra,8(sp)           ; stack access
    0x840136bc     0x4    slli a0,a0,0x5
    0x840136be     0x6    auipc a5,0x1a
    0x840136c2     0xa    addi a5,a5,-1726 # ffffffff8402d000 <intStateIRQNode>
    0x840136c6     0xe    add a0,a0,a5
    0x840136c8    0x10    jal ra,ffffffff8401364e <cteDeleteOne>
    0x840136cc    0x14    ld ra,8(sp)           ; stack access
    0x840136ce    0x16    addi sp,sp,16
    0x840136d0    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 14 nodes.

Section invokeCNodeRevoke (106 of 267)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeRevoke`:

    0x840131c0    0x0    addi sp,sp,-16
    0x840131c2    0x2    sd ra,8(sp)           ; stack access
    0x840131c4    0x4    jal ra,ffffffff8401313c <cteRevoke>
    0x840131c8    0x8    ld ra,8(sp)           ; stack access
    0x840131ca    0xa    addi sp,sp,16
    0x840131cc    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 10 nodes.

Section invokeCNodeDelete (107 of 267)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x8401312c    0x0    addi sp,sp,-16
    0x8401312e    0x2    sd ra,8(sp)           ; stack access
    0x84013130    0x4    li a1,1
    0x84013132    0x6    jal ra,ffffffff84012f74 <cteDelete>
    0x84013136    0xa    ld ra,8(sp)           ; stack access
    0x84013138    0xc    addi sp,sp,16
    0x8401313a    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 11 nodes.

Section invokeCNodeCancelBadgedSends (108 of 267)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 17 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x84012c0a     0x0    addi sp,sp,-32
    0x84012c0c     0x2    sd ra,24(sp)          ; stack access
    0x84012c0e     0x4    sd a0,0(sp)           ; stack access
    0x84012c10     0x6    beqz a1,ffffffff84012c2a <invokeCNodeCancelBadgedSends+0x20>
    0x84012c12     0x8    mv a5,a0
    0x84012c14     0xa    slli a0,a0,0x19
    0x84012c16     0xc    srli a0,a0,0x19
    0x84012c18     0xe    slli a4,a5,0x19
    0x84012c1c    0x12    bgez a4,ffffffff84012c26 <invokeCNodeCancelBadgedSends+0x1c>
    0x84012c20    0x16    li a5,-1
    0x84012c22    0x18    slli a5,a5,0x27
    0x84012c24    0x1a    or a0,a0,a5
    0x84012c26    0x1c    jal ra,ffffffff84012b2e <cancelBadgedSends>
    0x84012c2a    0x20    li a0,0
    0x84012c2c    0x22    ld ra,24(sp)          ; stack access
    0x84012c2e    0x24    addi sp,sp,32
    0x84012c30    0x26    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 26 nodes.

Section scheduleChooseNewThread (109 of 267)
============================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 34 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleChooseNewThread`:

    0x840128bc     0x0    addi sp,sp,-16
    0x840128be     0x2    sd ra,8(sp)           ; stack access
    0x840128c0     0x4    auipc a5,0x1a
    0x840128c4     0x8    ld a5,1432(a5) # ffffffff8402ce58 <ksDomainTime>
    0x840128c8     0xc    beqz a5,ffffffff840128d4 <scheduleChooseNewThread+0x18>
    0x840128ca     0xe    jal ra,ffffffff84012840 <chooseThread>
    0x840128ce    0x12    ld ra,8(sp)           ; stack access
    0x840128d0    0x14    addi sp,sp,16
    0x840128d2    0x16    ret
    0x840128d4    0x18    auipc a5,0x1b
    0x840128d8    0x1c    ld a5,460(a5) # ffffffff8402daa0 <ksDomScheduleIdx>
    0x840128dc    0x20    addi a5,a5,1
    0x840128de    0x22    li a4,2
    0x840128e0    0x24    bltu a4,a5,ffffffff84012920 <scheduleChooseNewThread+0x64>
    0x840128e4    0x28    auipc a4,0x1b
    0x840128e8    0x2c    sd a5,444(a4) # ffffffff8402daa0 <ksDomScheduleIdx>
    0x840128ec    0x30    auipc a5,0x1b
    0x840128f0    0x34    sd zero,292(a5) # ffffffff8402da10 <ksWorkUnitsCompleted>
    0x840128f4    0x38    auipc a5,0x1b
    0x840128f8    0x3c    ld a5,428(a5) # ffffffff8402daa0 <ksDomScheduleIdx>
    0x840128fc    0x40    slli a4,a5,0x4
    0x84012900    0x44    auipc a5,0x5
    0x84012904    0x48    addi a5,a5,-1224 # ffffffff84017438 <fault_messages>
    0x84012908    0x4c    add a5,a5,a4
    0x8401290a    0x4e    ld a4,192(a5)
    0x8401290c    0x50    auipc a3,0x1b
    0x84012910    0x54    sd a4,-268(a3) # ffffffff8402d800 <ksCurDomain>
    0x84012914    0x58    ld a5,200(a5)
    0x84012916    0x5a    auipc a4,0x1a
    0x8401291a    0x5e    sd a5,1346(a4) # ffffffff8402ce58 <ksDomainTime>
    0x8401291e    0x62    j ffffffff840128ca <scheduleChooseNewThread+0xe>
    0x84012920    0x64    auipc a5,0x1b
    0x84012924    0x68    sd zero,384(a5) # ffffffff8402daa0 <ksDomScheduleIdx>
    0x84012928    0x6c    j ffffffff840128ec <scheduleChooseNewThread+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 52 nodes.

Section receiveSignal (110 of 267)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 89 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `receiveSignal`:

    0x840124b6     0x0    addi sp,sp,-48
    0x840124b8     0x2    sd ra,40(sp)          ; stack access
    0x840124ba     0x4    sd s0,32(sp)          ; stack access
    0x840124bc     0x6    sd s1,24(sp)          ; stack access
    0x840124be     0x8    sd s2,16(sp)          ; stack access
    0x840124c0     0xa    mv s0,a0
    0x840124c2     0xc    sd a1,0(sp)           ; stack access
    0x840124c4     0xe    sd a2,8(sp)           ; stack access
    0x840124c6    0x10    slli a5,a1,0x19
    0x840124ca    0x14    srli a5,a5,0x19
    0x840124cc    0x16    slli a4,a1,0x19
    0x840124d0    0x1a    bgez a4,ffffffff840124da <receiveSignal+0x24>
    0x840124d4    0x1e    li a4,-1
    0x840124d6    0x20    slli a4,a4,0x27
    0x840124d8    0x22    or a5,a5,a4
    0x840124da    0x24    mv s1,a5
    0x840124dc    0x26    ld a4,0(a5)
    0x840124de    0x28    andi a2,a4,3
    0x840124e2    0x2c    andi a4,a4,2
    0x840124e4    0x2e    beqz a4,ffffffff84012502 <receiveSignal+0x4c>
    0x840124e6    0x30    li a5,2
    0x840124e8    0x32    bne a2,a5,ffffffff840124f6 <receiveSignal+0x40>
    0x840124ec    0x36    ld a5,16(s1)
    0x840124ee    0x38    sd a5,72(s0)
    0x840124f0    0x3a    ld a5,0(s1)
    0x840124f2    0x3c    andi a5,a5,-4
    0x840124f4    0x3e    sd a5,0(s1)
    0x840124f6    0x40    ld ra,40(sp)          ; stack access
    0x840124f8    0x42    ld s0,32(sp)          ; stack access
    0x840124fa    0x44    ld s1,24(sp)          ; stack access
    0x840124fc    0x46    ld s2,16(sp)          ; stack access
    0x840124fe    0x48    addi sp,sp,48
    0x84012500    0x4a    ret
    0x84012502    0x4c    beqz a3,ffffffff84012594 <receiveSignal+0xde>
    0x84012504    0x4e    ld a4,280(s0)
    0x84012508    0x52    li s2,-1
    0x8401250a    0x54    slli a3,s2,0x27
    0x8401250e    0x58    and a4,a4,a3
    0x84012510    0x5a    lui a3,0xe0000
    0x84012514    0x5e    srli a3,a3,0x19
    0x84012516    0x60    and a5,a5,a3
    0x84012518    0x62    or a5,a5,a4
    0x8401251a    0x64    ori a5,a5,6
    0x8401251e    0x68    sd a5,280(s0)
    0x84012522    0x6c    mv a0,s0
    0x84012524    0x6e    jal ra,ffffffff8401229c <scheduleTCB>
    0x84012528    0x72    ld a4,8(s1)
    0x8401252a    0x74    srli a5,s2,0x19
    0x8401252e    0x78    and a5,a5,a4
    0x84012530    0x7a    slli a3,a4,0x19
    0x84012534    0x7e    bgez a3,ffffffff84012584 <receiveSignal+0xce>
    0x84012538    0x82    li a4,-1
    0x8401253a    0x84    slli a4,a4,0x27
    0x8401253c    0x86    or a5,a5,a4
    0x8401253e    0x88    ld a3,0(s1)
    0x84012540    0x8a    srli a4,a3,0x19
    0x84012544    0x8e    bgez a3,ffffffff84012550 <receiveSignal+0x9a>
    0x84012548    0x92    li a3,-1
    0x8401254a    0x94    slli a3,a3,0x27
    0x8401254c    0x96    or a4,a4,a3
    0x8401254e    0x98    beqz a5,ffffffff84012590 <receiveSignal+0xda>
    0x84012550    0x9a    sd s0,408(a4)
    0x84012554    0x9e    sd a4,416(s0)
    0x84012558    0xa2    sd zero,408(s0)
    0x8401255c    0xa6    ld a4,0(s1)
    0x8401255e    0xa8    ld a3,8(s1)
    0x84012560    0xaa    li a2,-1
    0x84012562    0xac    slli a1,a2,0x27
    0x84012566    0xb0    and a3,a3,a1
    0x84012568    0xb2    srli a2,a2,0x19
    0x8401256a    0xb4    and a5,a5,a2
    0x8401256c    0xb6    or a5,a5,a3
    0x8401256e    0xb8    sd a5,8(s1)
    0x84012570    0xba    lui a5,0x2000
    0x84012574    0xbe    addi a5,a5,-4
    0x84012576    0xc0    and a5,a5,a4
    0x84012578    0xc2    slli s0,s0,0x19
    0x8401257a    0xc4    or s0,s0,a5
    0x8401257c    0xc6    ori s0,s0,1
    0x84012580    0xca    sd s0,0(s1)
    0x84012582    0xcc    j ffffffff840124f6 <receiveSignal+0x40>
    0x84012584    0xce    ld a3,0(s1)
    0x84012586    0xd0    srli a4,a3,0x19
    0x8401258a    0xd4    bltz a3,ffffffff84012548 <receiveSignal+0x92>
    0x8401258e    0xd8    j ffffffff8401254e <receiveSignal+0x98>
    0x84012590    0xda    mv a5,s0
    0x84012592    0xdc    j ffffffff84012554 <receiveSignal+0x9e>
    0x84012594    0xde    sd zero,72(s0)
    0x84012598    0xe2    j ffffffff840124f6 <receiveSignal+0x40>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
89 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 135 nodes.

Section handleDoubleFault (111 of 267)
======================================

Deriving specifications
-----------------------

Section `handleDoubleFault` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleDoubleFault`:

    0x840123b0    0x0    addi sp,sp,-32
    0x840123b2    0x2    sd ra,24(sp)          ; stack access
    0x840123b4    0x4    li a1,0
    0x840123b6    0x6    jal ra,ffffffff840122d0 <setThreadState>
    0x840123ba    0xa    ld ra,24(sp)          ; stack access
    0x840123bc    0xc    addi sp,sp,32
    0x840123be    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleDoubleFault` has 11 nodes.

Section setThreadState (112 of 267)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setThreadState`:

    0x840122d0     0x0    addi sp,sp,-16
    0x840122d2     0x2    sd ra,8(sp)           ; stack access
    0x840122d4     0x4    ld a5,280(a0)
    0x840122d8     0x8    andi a5,a5,-16
    0x840122da     0xa    andi a1,a1,15
    0x840122dc     0xc    or a5,a5,a1
    0x840122de     0xe    sd a5,280(a0)
    0x840122e2    0x12    jal ra,ffffffff8401229c <scheduleTCB>
    0x840122e6    0x16    ld ra,8(sp)           ; stack access
    0x840122e8    0x18    addi sp,sp,16
    0x840122ea    0x1a    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 17 nodes.

Section scheduleTCB (113 of 267)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 18 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleTCB`:

    0x8401229c     0x0    auipc a5,0x1b
    0x840122a0     0x4    ld a5,2044(a5) # ffffffff8402da98 <ksCurThread>
    0x840122a4     0x8    beq a5,a0,ffffffff840122aa <scheduleTCB+0xe>
    0x840122a8     0xc    ret
    0x840122aa     0xe    auipc a5,0xb
    0x840122ae    0x12    ld a5,-1642(a5) # ffffffff8401cc40 <ksSchedulerAction>
    0x840122b2    0x16    bnez a5,ffffffff840122a8 <scheduleTCB+0xc>
    0x840122b4    0x18    ld a5,280(a0)
    0x840122b8    0x1c    andi a5,a5,15
    0x840122ba    0x1e    addi a5,a5,-1
    0x840122bc    0x20    li a4,1
    0x840122be    0x22    bgeu a4,a5,ffffffff840122a8 <scheduleTCB+0xc>
    0x840122c2    0x26    addi sp,sp,-16
    0x840122c4    0x28    sd ra,8(sp)           ; stack access
    0x840122c6    0x2a    jal ra,ffffffff8401226a <rescheduleRequired>
    0x840122ca    0x2e    ld ra,8(sp)           ; stack access
    0x840122cc    0x30    addi sp,sp,16
    0x840122ce    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 32 nodes.

Section rescheduleRequired (114 of 267)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `rescheduleRequired`:

    0x8401226a     0x0    auipc a0,0xb
    0x8401226e     0x4    ld a0,-1578(a0) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012272     0x8    li a5,1
    0x84012274     0xa    bltu a5,a0,ffffffff84012284 <rescheduleRequired+0x1a>
    0x84012278     0xe    li a5,1
    0x8401227a    0x10    auipc a4,0xb
    0x8401227e    0x14    sd a5,-1594(a4) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012282    0x18    ret
    0x84012284    0x1a    addi sp,sp,-16
    0x84012286    0x1c    sd ra,8(sp)           ; stack access
    0x84012288    0x1e    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x8401228c    0x22    li a5,1
    0x8401228e    0x24    auipc a4,0xb
    0x84012292    0x28    sd a5,-1614(a4) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012296    0x2c    ld ra,8(sp)           ; stack access
    0x84012298    0x2e    addi sp,sp,16
    0x8401229a    0x30    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 27 nodes.

Section slotCapLongRunningDelete (115 of 267)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 24 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x84011ed0     0x0    addi sp,sp,-16
    0x84011ed2     0x2    sd ra,8(sp)           ; stack access
    0x84011ed4     0x4    sd s0,0(sp)           ; stack access
    0x84011ed6     0x6    ld s0,0(a0)
    0x84011ed8     0x8    srli s0,s0,0x3b
    0x84011eda     0xa    beqz s0,ffffffff84011efe <slotCapLongRunningDelete+0x2e>
    0x84011edc     0xc    jal ra,ffffffff84011e78 <isFinalCapability>
    0x84011ee0    0x10    beqz a0,ffffffff84011efc <slotCapLongRunningDelete+0x2c>
    0x84011ee2    0x12    addi a5,s0,-10
    0x84011ee6    0x16    li a4,8
    0x84011ee8    0x18    bltu a4,a5,ffffffff84011f08 <slotCapLongRunningDelete+0x38>
    0x84011eec    0x1c    li s0,1
    0x84011eee    0x1e    sll s0,s0,a5
    0x84011ef2    0x22    andi s0,s0,261
    0x84011ef6    0x26    snez s0,s0
    0x84011efa    0x2a    j ffffffff84011efe <slotCapLongRunningDelete+0x2e>
    0x84011efc    0x2c    mv s0,a0
    0x84011efe    0x2e    mv a0,s0
    0x84011f00    0x30    ld ra,8(sp)           ; stack access
    0x84011f02    0x32    ld s0,0(sp)           ; stack access
    0x84011f04    0x34    addi sp,sp,16
    0x84011f06    0x36    ret
    0x84011f08    0x38    li s0,0
    0x84011f0a    0x3a    j ffffffff84011efe <slotCapLongRunningDelete+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 37 nodes.

Section isFinalCapability (116 of 267)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 38 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `isFinalCapability`:

    0x84011e78     0x0    addi sp,sp,-32
    0x84011e7a     0x2    sd ra,24(sp)          ; stack access
    0x84011e7c     0x4    sd s0,16(sp)          ; stack access
    0x84011e7e     0x6    sd s1,8(sp)           ; stack access
    0x84011e80     0x8    mv s0,a0
    0x84011e82     0xa    ld a5,16(a0)
    0x84011e84     0xc    ld s1,24(a0)
    0x84011e86     0xe    beqz a5,ffffffff84011e9a <isFinalCapability+0x22>
    0x84011e88    0x10    ld a2,0(a0)
    0x84011e8a    0x12    ld a3,8(a0)
    0x84011e8c    0x14    ld a0,0(a5)
    0x84011e8e    0x16    ld a1,8(a5)
    0x84011e90    0x18    jal ra,ffffffff84011e20 <sameObjectAs>
    0x84011e94    0x1c    mv a5,a0
    0x84011e96    0x1e    li a0,0
    0x84011e98    0x20    bnez a5,ffffffff84011ec6 <isFinalCapability+0x4e>
    0x84011e9a    0x22    lui a5,0xf8000
    0x84011e9e    0x26    srli a5,a5,0x19
    0x84011ea0    0x28    and a5,a5,s1
    0x84011ea2    0x2a    slli a4,s1,0x19
    0x84011ea6    0x2e    bgez a4,ffffffff84011ec2 <isFinalCapability+0x4a>
    0x84011eaa    0x32    li a4,-1
    0x84011eac    0x34    slli a4,a4,0x27
    0x84011eae    0x36    or a5,a5,a4
    0x84011eb0    0x38    ld a2,0(a5)
    0x84011eb2    0x3a    ld a3,8(a5)
    0x84011eb4    0x3c    ld a0,0(s0)
    0x84011eb6    0x3e    ld a1,8(s0)
    0x84011eb8    0x40    jal ra,ffffffff84011e20 <sameObjectAs>
    0x84011ebc    0x44    seqz a0,a0
    0x84011ec0    0x48    j ffffffff84011ec6 <isFinalCapability+0x4e>
    0x84011ec2    0x4a    li a0,1
    0x84011ec4    0x4c    bnez a5,ffffffff84011eb0 <isFinalCapability+0x38>
    0x84011ec6    0x4e    ld ra,24(sp)          ; stack access
    0x84011ec8    0x50    ld s0,16(sp)          ; stack access
    0x84011eca    0x52    ld s1,8(sp)           ; stack access
    0x84011ecc    0x54    addi sp,sp,32
    0x84011ece    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 65 nodes.

Section ensureNoChildren (117 of 267)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 26 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `ensureNoChildren`:

    0x84011d66     0x0    ld a5,24(a0)
    0x84011d68     0x2    lui a1,0xf8000
    0x84011d6c     0x6    srli a1,a1,0x19
    0x84011d6e     0x8    and a1,a1,a5
    0x84011d70     0xa    slli a4,a5,0x19
    0x84011d74     0xe    bgez a4,ffffffff84011d92 <ensureNoChildren+0x2c>
    0x84011d78    0x12    li a5,-1
    0x84011d7a    0x14    slli a5,a5,0x27
    0x84011d7c    0x16    or a1,a1,a5
    0x84011d7e    0x18    addi sp,sp,-16
    0x84011d80    0x1a    sd ra,8(sp)           ; stack access
    0x84011d82    0x1c    jal ra,ffffffff84011cee <isMDBParentOf>
    0x84011d86    0x20    mv a1,a0
    0x84011d88    0x22    bnez a0,ffffffff84011d98 <ensureNoChildren+0x32>
    0x84011d8a    0x24    mv a0,a1
    0x84011d8c    0x26    ld ra,8(sp)           ; stack access
    0x84011d8e    0x28    addi sp,sp,16
    0x84011d90    0x2a    ret
    0x84011d92    0x2c    bnez a1,ffffffff84011d7e <ensureNoChildren+0x18>
    0x84011d94    0x2e    mv a0,a1
    0x84011d96    0x30    ret
    0x84011d98    0x32    li a5,9
    0x84011d9a    0x34    auipc a4,0xb
    0x84011d9e    0x38    sd a5,-290(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84011da2    0x3c    li a1,3
    0x84011da4    0x3e    j ffffffff84011d8a <ensureNoChildren+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 39 nodes.

Section isMDBParentOf (118 of 267)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isMDBParentOf`:

    0x84011cee     0x0    addi sp,sp,-32
    0x84011cf0     0x2    sd ra,24(sp)          ; stack access
    0x84011cf2     0x4    sd s0,16(sp)          ; stack access
    0x84011cf4     0x6    sd s1,8(sp)           ; stack access
    0x84011cf6     0x8    sd s2,0(sp)           ; stack access
    0x84011cf8     0xa    ld s0,24(a0)
    0x84011cfa     0xc    srli s0,s0,0x1
    0x84011cfc     0xe    andi s0,s0,1
    0x84011cfe    0x10    beqz s0,ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d00    0x12    mv s1,a0
    0x84011d02    0x14    mv s2,a1
    0x84011d04    0x16    ld a2,0(a1)
    0x84011d06    0x18    ld a3,8(a1)
    0x84011d08    0x1a    ld a0,0(a0)
    0x84011d0a    0x1c    ld a1,8(s1)
    0x84011d0c    0x1e    jal ra,ffffffff840119d8 <sameRegionAs>
    0x84011d10    0x22    beqz a0,ffffffff84011d56 <isMDBParentOf+0x68>
    0x84011d12    0x24    ld a5,0(s1)
    0x84011d14    0x26    srli a5,a5,0x3b
    0x84011d16    0x28    li a4,4
    0x84011d18    0x2a    beq a5,a4,ffffffff84011d3c <isMDBParentOf+0x4e>
    0x84011d1c    0x2e    li a4,6
    0x84011d1e    0x30    bne a5,a4,ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d22    0x34    ld a5,8(s1)
    0x84011d24    0x36    beqz a5,ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d26    0x38    ld a4,8(s2)
    0x84011d2a    0x3c    li s0,0
    0x84011d2c    0x3e    bne a5,a4,ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d30    0x42    ld s0,24(s2)
    0x84011d34    0x46    xori s0,s0,1
    0x84011d38    0x4a    andi s0,s0,1
    0x84011d3a    0x4c    j ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d3c    0x4e    ld a5,8(s1)
    0x84011d3e    0x50    beqz a5,ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d40    0x52    ld a4,8(s2)
    0x84011d44    0x56    li s0,0
    0x84011d46    0x58    bne a5,a4,ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d4a    0x5c    ld s0,24(s2)
    0x84011d4e    0x60    xori s0,s0,1
    0x84011d52    0x64    andi s0,s0,1
    0x84011d54    0x66    j ffffffff84011d58 <isMDBParentOf+0x6a>
    0x84011d56    0x68    mv s0,a0
    0x84011d58    0x6a    mv a0,s0
    0x84011d5a    0x6c    ld ra,24(sp)          ; stack access
    0x84011d5c    0x6e    ld s0,16(sp)          ; stack access
    0x84011d5e    0x70    ld s1,8(sp)           ; stack access
    0x84011d60    0x72    ld s2,0(sp)           ; stack access
    0x84011d62    0x74    addi sp,sp,32
    0x84011d64    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 87 nodes.

Section completeSignal (119 of 267)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 14 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `completeSignal`:

    0x840118ec     0x0    beqz a1,ffffffff84011904 <completeSignal+0x18>
    0x840118ee     0x2    ld a5,0(a0)
    0x840118f0     0x4    andi a5,a5,3
    0x840118f2     0x6    li a4,2
    0x840118f4     0x8    bne a5,a4,ffffffff84011904 <completeSignal+0x18>
    0x840118f8     0xc    ld a5,16(a0)
    0x840118fa     0xe    sd a5,72(a1)
    0x840118fc    0x10    ld a5,0(a0)
    0x840118fe    0x12    andi a5,a5,-4
    0x84011900    0x14    sd a5,0(a0)
    0x84011902    0x16    ret
    0x84011904    0x18    addi sp,sp,-16
    0x84011906    0x1a    sd ra,8(sp)           ; stack access
    0x84011908    0x1c    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 26 nodes.

Section emptySlot (120 of 267)
==============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 54 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `emptySlot`:

    0x8401186c     0x0    addi sp,sp,-32
    0x8401186e     0x2    sd ra,24(sp)          ; stack access
    0x84011870     0x4    sd a1,0(sp)           ; stack access
    0x84011872     0x6    sd a2,8(sp)           ; stack access
    0x84011874     0x8    ld a5,0(a0)
    0x84011876     0xa    srli a5,a5,0x3b
    0x84011878     0xc    beqz a5,ffffffff840118be <emptySlot+0x52>
    0x8401187a     0xe    ld a2,16(a0)
    0x8401187c    0x10    ld a4,24(a0)
    0x8401187e    0x12    lui a5,0xf8000
    0x84011882    0x16    srli a5,a5,0x19
    0x84011884    0x18    and a5,a5,a4
    0x84011886    0x1a    slli a3,a4,0x19
    0x8401188a    0x1e    bgez a3,ffffffff840118c4 <emptySlot+0x58>
    0x8401188e    0x22    li a3,-1
    0x84011890    0x24    slli a3,a3,0x27
    0x84011892    0x26    or a5,a5,a3
    0x84011894    0x28    bnez a2,ffffffff840118c6 <emptySlot+0x5a>
    0x84011896    0x2a    sd a2,16(a5)
    0x84011898    0x2c    ld a3,24(a5)
    0x8401189a    0x2e    or a4,a4,a3
    0x8401189c    0x30    andi a4,a4,1
    0x8401189e    0x32    andi a3,a3,-2
    0x840118a0    0x34    or a4,a4,a3
    0x840118a2    0x36    sd a4,24(a5)
    0x840118a4    0x38    sd zero,0(a0)
    0x840118a8    0x3c    sd zero,8(a0)
    0x840118ac    0x40    sd zero,16(a0)
    0x840118b0    0x44    sd zero,24(a0)
    0x840118b4    0x48    ld a5,0(sp)           ; stack access
    0x840118b6    0x4a    srli a5,a5,0x3b
    0x840118b8    0x4c    li a4,16
    0x840118ba    0x4e    beq a5,a4,ffffffff840118e0 <emptySlot+0x74>
    0x840118be    0x52    ld ra,24(sp)          ; stack access
    0x840118c0    0x54    addi sp,sp,32
    0x840118c2    0x56    ret
    0x840118c4    0x58    beqz a2,ffffffff840118dc <emptySlot+0x70>
    0x840118c6    0x5a    ld a3,24(a2)
    0x840118c8    0x5c    li a1,-1
    0x840118ca    0x5e    slli a1,a1,0x27
    0x840118cc    0x60    addi a1,a1,3
    0x840118ce    0x62    and a3,a3,a1
    0x840118d0    0x64    lui a1,0xf8000
    0x840118d4    0x68    srli a1,a1,0x19
    0x840118d6    0x6a    and a1,a1,a5
    0x840118d8    0x6c    or a3,a3,a1
    0x840118da    0x6e    sd a3,24(a2)
    0x840118dc    0x70    beqz a5,ffffffff840118a4 <emptySlot+0x38>
    0x840118de    0x72    j ffffffff84011896 <emptySlot+0x2a>
    0x840118e0    0x74    ld a0,8(sp)           ; stack access
    0x840118e2    0x76    slli a0,a0,0x34
    0x840118e4    0x78    srli a0,a0,0x34
    0x840118e6    0x7a    jal ra,ffffffff8401185a <deletedIRQHandler>
    0x840118ea    0x7e    j ffffffff840118be <emptySlot+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 86 nodes.

Section deletedIRQHandler (121 of 267)
======================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletedIRQHandler`:

    0x8401185a     0x0    addi sp,sp,-16
    0x8401185c     0x2    sd ra,8(sp)           ; stack access
    0x8401185e     0x4    mv a1,a0
    0x84011860     0x6    li a0,0
    0x84011862     0x8    jal ra,ffffffff840117bc <setIRQState>
    0x84011866     0xc    ld ra,8(sp)           ; stack access
    0x84011868     0xe    addi sp,sp,16
    0x8401186a    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 12 nodes.

Section capSwapForDelete (122 of 267)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 14 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `capSwapForDelete`:

    0x8401166e     0x0    beq a0,a1,ffffffff8401168c <capSwapForDelete+0x1e>
    0x84011672     0x4    addi sp,sp,-48
    0x84011674     0x6    sd ra,40(sp)          ; stack access
    0x84011676     0x8    mv a2,a0
    0x84011678     0xa    mv a5,a1
    0x8401167a     0xc    ld a3,0(a1)
    0x8401167c     0xe    ld a4,8(a1)
    0x8401167e    0x10    ld a0,0(a0)
    0x84011680    0x12    ld a1,8(a2)
    0x84011682    0x14    jal ra,ffffffff84011598 <cteSwap>
    0x84011686    0x18    ld ra,40(sp)          ; stack access
    0x84011688    0x1a    addi sp,sp,48
    0x8401168a    0x1c    ret
    0x8401168c    0x1e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 25 nodes.

Section invokeCNodeMove (123 of 267)
====================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x84011544    0x0    addi sp,sp,-32
    0x84011546    0x2    sd ra,24(sp)          ; stack access
    0x84011548    0x4    jal ra,ffffffff840114ea <cteMove>
    0x8401154c    0x8    li a0,0
    0x8401154e    0xa    ld ra,24(sp)          ; stack access
    0x84011550    0xc    addi sp,sp,32
    0x84011552    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 11 nodes.

Section invokeCNodeInsert (124 of 267)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x840114da    0x0    addi sp,sp,-32
    0x840114dc    0x2    sd ra,24(sp)          ; stack access
    0x840114de    0x4    jal ra,ffffffff840113ac <cteInsert>
    0x840114e2    0x8    li a0,0
    0x840114e4    0xa    ld ra,24(sp)          ; stack access
    0x840114e6    0xc    addi sp,sp,32
    0x840114e8    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section switchToIdleThread (125 of 267)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `switchToIdleThread`:

    0x84011352     0x0    addi sp,sp,-16
    0x84011354     0x2    sd ra,8(sp)           ; stack access
    0x84011356     0x4    jal ra,ffffffff84010998 <Arch_switchToIdleThread>
    0x8401135a     0x8    auipc a5,0xc
    0x8401135e     0xc    ld a5,-1842(a5) # ffffffff8401cc28 <ksIdleThread>
    0x84011362    0x10    auipc a4,0x1c
    0x84011366    0x14    sd a5,1846(a4) # ffffffff8402da98 <ksCurThread>
    0x8401136a    0x18    ld ra,8(sp)           ; stack access
    0x8401136c    0x1a    addi sp,sp,16
    0x8401136e    0x1c    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 16 nodes.

Section doFaultTransfer (126 of 267)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x84011310     0x0    addi sp,sp,-32
    0x84011312     0x2    sd ra,24(sp)          ; stack access
    0x84011314     0x4    sd s0,16(sp)          ; stack access
    0x84011316     0x6    sd s1,8(sp)           ; stack access
    0x84011318     0x8    sd s2,0(sp)           ; stack access
    0x8401131a     0xa    mv s2,a0
    0x8401131c     0xc    mv s1,a1
    0x8401131e     0xe    mv s0,a2
    0x84011320    0x10    mv a2,a3
    0x84011322    0x12    mv a1,s0
    0x84011324    0x14    mv a0,s1
    0x84011326    0x16    jal ra,ffffffff8401039a <setMRs_fault>
    0x8401132a    0x1a    ld a5,312(s1)
    0x8401132e    0x1e    slli a5,a5,0xc
    0x84011330    0x20    lui a4,0xf
    0x84011332    0x22    and a5,a5,a4
    0x84011334    0x24    andi a0,a0,127
    0x84011338    0x28    or a5,a5,a0
    0x8401133a    0x2a    sd a5,80(s0)
    0x8401133c    0x2c    sd s2,72(s0)
    0x84011340    0x30    ld ra,24(sp)          ; stack access
    0x84011342    0x32    ld s0,16(sp)          ; stack access
    0x84011344    0x34    ld s1,8(sp)           ; stack access
    0x84011346    0x36    ld s2,0(sp)           ; stack access
    0x84011348    0x38    addi sp,sp,32
    0x8401134a    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section lookupPivotSlot (127 of 267)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupPivotSlot`:

    0x840112f6     0x0    addi sp,sp,-48
    0x840112f8     0x2    sd ra,40(sp)          ; stack access
    0x840112fa     0x4    mv a5,a1
    0x840112fc     0x6    mv a4,a3
    0x840112fe     0x8    mv a3,a2
    0x84011300     0xa    mv a1,a0
    0x84011302     0xc    mv a2,a5
    0x84011304     0xe    li a0,1
    0x84011306    0x10    jal ra,ffffffff840111f6 <lookupSlotForCNodeOp>
    0x8401130a    0x14    ld ra,40(sp)          ; stack access
    0x8401130c    0x16    addi sp,sp,48
    0x8401130e    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 16 nodes.

Section lookupTargetSlot (128 of 267)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupTargetSlot`:

    0x840112dc     0x0    addi sp,sp,-48
    0x840112de     0x2    sd ra,40(sp)          ; stack access
    0x840112e0     0x4    mv a5,a1
    0x840112e2     0x6    mv a4,a3
    0x840112e4     0x8    mv a3,a2
    0x840112e6     0xa    mv a1,a0
    0x840112e8     0xc    mv a2,a5
    0x840112ea     0xe    li a0,0
    0x840112ec    0x10    jal ra,ffffffff840111f6 <lookupSlotForCNodeOp>
    0x840112f0    0x14    ld ra,40(sp)          ; stack access
    0x840112f2    0x16    addi sp,sp,48
    0x840112f4    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 16 nodes.

Section lookupSourceSlot (129 of 267)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupSourceSlot`:

    0x840112c2     0x0    addi sp,sp,-48
    0x840112c4     0x2    sd ra,40(sp)          ; stack access
    0x840112c6     0x4    mv a5,a1
    0x840112c8     0x6    mv a4,a3
    0x840112ca     0x8    mv a3,a2
    0x840112cc     0xa    mv a1,a0
    0x840112ce     0xc    mv a2,a5
    0x840112d0     0xe    li a0,1
    0x840112d2    0x10    jal ra,ffffffff840111f6 <lookupSlotForCNodeOp>
    0x840112d6    0x14    ld ra,40(sp)          ; stack access
    0x840112d8    0x16    addi sp,sp,48
    0x840112da    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 16 nodes.

Section lookupSlotForCNodeOp (130 of 267)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 79 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

23 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x840111f6     0x0    addi sp,sp,-80
    0x840111f8     0x2    sd ra,72(sp)          ; stack access
    0x840111fa     0x4    sd s0,64(sp)          ; stack access
    0x840111fc     0x6    mv s0,a0
    0x840111fe     0x8    sd a1,0(sp)           ; stack access
    0x84011200     0xa    sd a2,8(sp)           ; stack access
    0x84011202     0xc    srli a1,a1,0x3b
    0x84011204     0xe    li a5,10
    0x84011206    0x10    bne a1,a5,ffffffff8401123a <lookupSlotForCNodeOp+0x44>
    0x8401120a    0x14    addi a5,a4,-1
    0x8401120e    0x18    li a2,63
    0x84011212    0x1c    bltu a2,a5,ffffffff84011260 <lookupSlotForCNodeOp+0x6a>
    0x84011216    0x20    ld a1,0(sp)           ; stack access
    0x84011218    0x22    ld a2,8(sp)           ; stack access
    0x8401121a    0x24    addi a0,sp,24
    0x8401121c    0x26    jal ra,ffffffff84011030 <resolveAddressBits>
    0x84011220    0x2a    ld a5,40(sp)          ; stack access
    0x84011222    0x2c    ld a4,24(sp)          ; stack access
    0x84011224    0x2e    bnez a4,ffffffff8401127e <lookupSlotForCNodeOp+0x88>
    0x84011226    0x30    bnez a5,ffffffff84011294 <lookupSlotForCNodeOp+0x9e>
    0x84011228    0x32    sd zero,48(sp)        ; stack access
    0x8401122a    0x34    ld a5,32(sp)          ; stack access
    0x8401122c    0x36    sd a5,56(sp)          ; stack access
    0x8401122e    0x38    ld a0,48(sp)          ; stack access
    0x84011230    0x3a    ld a1,56(sp)          ; stack access
    0x84011232    0x3c    ld ra,72(sp)          ; stack access
    0x84011234    0x3e    ld s0,64(sp)          ; stack access
    0x84011236    0x40    addi sp,sp,80
    0x84011238    0x42    ret
    0x8401123a    0x44    auipc a5,0xc
    0x8401123e    0x48    addi a5,a5,-1522 # ffffffff8401cc48 <current_syscall_error>
    0x84011242    0x4c    li a4,6
    0x84011244    0x4e    sd a4,48(a5)
    0x84011246    0x50    sd a0,40(a5)
    0x84011248    0x52    auipc a5,0xc
    0x8401124c    0x56    addi a5,a5,-1560 # ffffffff8401cc30 <current_lookup_fault>
    0x84011250    0x5a    sd zero,0(a5)
    0x84011254    0x5e    sd zero,8(a5)
    0x84011258    0x62    li a5,3
    0x8401125a    0x64    sd a5,48(sp)          ; stack access
    0x8401125c    0x66    sd zero,56(sp)        ; stack access
    0x8401125e    0x68    j ffffffff8401122e <lookupSlotForCNodeOp+0x38>
    0x84011260    0x6a    auipc a5,0xc
    0x84011264    0x6e    addi a5,a5,-1560 # ffffffff8401cc48 <current_syscall_error>
    0x84011268    0x72    li a4,4
    0x8401126a    0x74    sd a4,48(a5)
    0x8401126c    0x76    li a4,1
    0x8401126e    0x78    sd a4,16(a5)
    0x84011270    0x7a    li a4,64
    0x84011274    0x7e    sd a4,24(a5)
    0x84011276    0x80    li a5,3
    0x84011278    0x82    sd a5,48(sp)          ; stack access
    0x8401127a    0x84    sd zero,56(sp)        ; stack access
    0x8401127c    0x86    j ffffffff8401122e <lookupSlotForCNodeOp+0x38>
    0x8401127e    0x88    auipc a5,0xc
    0x84011282    0x8c    addi a5,a5,-1590 # ffffffff8401cc48 <current_syscall_error>
    0x84011286    0x90    li a4,6
    0x84011288    0x92    sd a4,48(a5)
    0x8401128a    0x94    sd s0,40(a5)
    0x8401128c    0x96    li a5,3
    0x8401128e    0x98    sd a5,48(sp)          ; stack access
    0x84011290    0x9a    sd zero,56(sp)        ; stack access
    0x84011292    0x9c    j ffffffff8401122e <lookupSlotForCNodeOp+0x38>
    0x84011294    0x9e    auipc a4,0xc
    0x84011298    0xa2    addi a4,a4,-1612 # ffffffff8401cc48 <current_syscall_error>
    0x8401129c    0xa6    li a3,6
    0x8401129e    0xa8    sd a3,48(a4)
    0x840112a0    0xaa    sd s0,40(a4)
    0x840112a2    0xac    auipc a4,0xc
    0x840112a6    0xb0    addi a4,a4,-1650 # ffffffff8401cc30 <current_lookup_fault>
    0x840112aa    0xb4    slli a5,a5,0x2
    0x840112ac    0xb6    andi a5,a5,508
    0x840112b0    0xba    ori a5,a5,2
    0x840112b4    0xbe    sd a5,0(a4)
    0x840112b6    0xc0    sd zero,8(a4)
    0x840112ba    0xc4    li a5,3
    0x840112bc    0xc6    sd a5,48(sp)          ; stack access
    0x840112be    0xc8    sd zero,56(sp)        ; stack access
    0x840112c0    0xca    j ffffffff8401122e <lookupSlotForCNodeOp+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 125 nodes.

Section lookupCapAndSlot (131 of 267)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 26 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x840111b8     0x0    addi sp,sp,-32
    0x840111ba     0x2    sd ra,24(sp)          ; stack access
    0x840111bc     0x4    sd s0,16(sp)          ; stack access
    0x840111be     0x6    mv s0,a0
    0x840111c0     0x8    mv a0,a1
    0x840111c2     0xa    mv a1,a2
    0x840111c4     0xc    jal ra,ffffffff8401115c <lookupSlot>
    0x840111c8    0x10    sd a0,0(sp)           ; stack access
    0x840111ca    0x12    sd a1,8(sp)           ; stack access
    0x840111cc    0x14    bnez a0,ffffffff840111e6 <lookupCapAndSlot+0x2e>
    0x840111ce    0x16    ld a4,0(a1)
    0x840111d0    0x18    ld a5,8(a1)
    0x840111d2    0x1a    sd zero,0(s0)         ; stack access
    0x840111d6    0x1e    sd a4,8(s0)           ; stack access
    0x840111d8    0x20    sd a5,16(s0)          ; stack access
    0x840111da    0x22    sd a1,24(s0)          ; stack access
    0x840111dc    0x24    mv a0,s0
    0x840111de    0x26    ld ra,24(sp)          ; stack access
    0x840111e0    0x28    ld s0,16(sp)          ; stack access
    0x840111e2    0x2a    addi sp,sp,32
    0x840111e4    0x2c    ret
    0x840111e6    0x2e    sd a0,0(s0)           ; stack access
    0x840111e8    0x30    sd zero,8(s0)         ; stack access
    0x840111ec    0x34    sd zero,16(s0)        ; stack access
    0x840111f0    0x38    sd zero,24(s0)        ; stack access
    0x840111f4    0x3c    j ffffffff840111dc <lookupCapAndSlot+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 46 nodes.

Section lookupCap (132 of 267)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 25 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
13 stack accesses found. Annotated code for `lookupCap`:

    0x8401117e     0x0    addi sp,sp,-32
    0x84011180     0x2    sd ra,24(sp)          ; stack access
    0x84011182     0x4    sd s0,16(sp)          ; stack access
    0x84011184     0x6    mv s0,a0
    0x84011186     0x8    mv a0,a1
    0x84011188     0xa    mv a1,a2
    0x8401118a     0xc    jal ra,ffffffff8401115c <lookupSlot>
    0x8401118e    0x10    sd a0,0(sp)           ; stack access
    0x84011190    0x12    sd a1,8(sp)           ; stack access
    0x84011192    0x14    bnez a0,ffffffff840111ac <lookupCap+0x2e>
    0x84011194    0x16    ld a5,8(sp)           ; stack access
    0x84011196    0x18    ld a4,0(a5)
    0x84011198    0x1a    ld a5,8(a5)
    0x8401119a    0x1c    sd zero,0(s0)         ; stack access
    0x8401119e    0x20    sd a4,8(s0)           ; stack access
    0x840111a0    0x22    sd a5,16(s0)          ; stack access
    0x840111a2    0x24    mv a0,s0
    0x840111a4    0x26    ld ra,24(sp)          ; stack access
    0x840111a6    0x28    ld s0,16(sp)          ; stack access
    0x840111a8    0x2a    addi sp,sp,32
    0x840111aa    0x2c    ret
    0x840111ac    0x2e    sd a0,0(s0)           ; stack access
    0x840111ae    0x30    sd zero,8(s0)         ; stack access
    0x840111b2    0x34    sd zero,16(s0)        ; stack access
    0x840111b6    0x38    j ffffffff840111a2 <lookupCap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 44 nodes.

Section lookupSlot (133 of 267)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.

RVC_FFFFFFFFFFT___FF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `lookupSlot`:

    0x8401115c     0x0    addi sp,sp,-80
    0x8401115e     0x2    sd ra,72(sp)          ; stack access
    0x84011160     0x4    mv a3,a1
    0x84011162     0x6    andi a0,a0,-1024
    0x84011166     0xa    li a4,64
    0x8401116a     0xe    ld a1,0(a0)
    0x8401116c    0x10    ld a2,8(a0)
    0x8401116e    0x12    addi a0,sp,8
    0x84011170    0x14    jal ra,ffffffff84011030 <resolveAddressBits>
    0x84011174    0x18    ld a0,8(sp)           ; stack access
    0x84011176    0x1a    ld a1,16(sp)          ; stack access
    0x84011178    0x1c    ld ra,72(sp)          ; stack access
    0x8401117a    0x1e    addi sp,sp,80
    0x8401117c    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (134 of 267)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 61 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_createObject`:

    0x84010f90     0x0    addi sp,sp,-32
    0x84010f92     0x2    sd ra,24(sp)          ; stack access
    0x84010f94     0x4    li a5,7
    0x84010f96     0x6    beq a0,a5,ffffffff84010fe6 <Arch_createObject+0x56>
    0x84010f9a     0xa    bltu a5,a0,ffffffff84010fcc <Arch_createObject+0x3c>
    0x84010f9e     0xe    li a5,5
    0x84010fa0    0x10    beq a0,a5,ffffffff84011000 <Arch_createObject+0x70>
    0x84010fa4    0x14    li a5,6
    0x84010fa6    0x16    bne a0,a5,ffffffff8401101a <Arch_createObject+0x8a>
    0x84010faa    0x1a    andi a3,a3,1
    0x84010fac    0x1c    slli a3,a3,0x36
    0x84010fae    0x1e    li a5,19
    0x84010fb0    0x20    slli a5,a5,0x37
    0x84010fb2    0x22    or a3,a3,a5
    0x84010fb4    0x24    sd a3,0(sp)           ; stack access
    0x84010fb6    0x26    slli a1,a1,0x9
    0x84010fb8    0x28    lui a5,0xfe000
    0x84010fbc    0x2c    srli a5,a5,0x10
    0x84010fbe    0x2e    and a1,a1,a5
    0x84010fc0    0x30    sd a1,8(sp)           ; stack access
    0x84010fc2    0x32    ld a0,0(sp)           ; stack access
    0x84010fc4    0x34    ld a1,8(sp)           ; stack access
    0x84010fc6    0x36    ld ra,24(sp)          ; stack access
    0x84010fc8    0x38    addi sp,sp,32
    0x84010fca    0x3a    ret
    0x84010fcc    0x3c    li a5,8
    0x84010fce    0x3e    bne a0,a5,ffffffff8401101a <Arch_createObject+0x8a>
    0x84010fd2    0x42    li a5,3
    0x84010fd4    0x44    slli a5,a5,0x3b
    0x84010fd6    0x46    sd a5,0(sp)           ; stack access
    0x84010fd8    0x48    slli a1,a1,0x9
    0x84010fda    0x4a    lui a5,0xfe000
    0x84010fde    0x4e    srli a5,a5,0x10
    0x84010fe0    0x50    and a1,a1,a5
    0x84010fe2    0x52    sd a1,8(sp)           ; stack access
    0x84010fe4    0x54    j ffffffff84010fc2 <Arch_createObject+0x32>
    0x84010fe6    0x56    andi a3,a3,1
    0x84010fe8    0x58    slli a3,a3,0x36
    0x84010fea    0x5a    li a5,23
    0x84010fec    0x5c    slli a5,a5,0x37
    0x84010fee    0x5e    or a3,a3,a5
    0x84010ff0    0x60    sd a3,0(sp)           ; stack access
    0x84010ff2    0x62    slli a1,a1,0x9
    0x84010ff4    0x64    lui a5,0xfe000
    0x84010ff8    0x68    srli a5,a5,0x10
    0x84010ffa    0x6a    and a1,a1,a5
    0x84010ffc    0x6c    sd a1,8(sp)           ; stack access
    0x84010ffe    0x6e    j ffffffff84010fc2 <Arch_createObject+0x32>
    0x84011000    0x70    andi a3,a3,1
    0x84011002    0x72    slli a3,a3,0x36
    0x84011004    0x74    li a5,27
    0x84011006    0x76    slli a5,a5,0x37
    0x84011008    0x78    or a3,a3,a5
    0x8401100a    0x7a    sd a3,0(sp)           ; stack access
    0x8401100c    0x7c    slli a1,a1,0x9
    0x8401100e    0x7e    lui a5,0xfe000
    0x84011012    0x82    srli a5,a5,0x10
    0x84011014    0x84    and a1,a1,a5
    0x84011016    0x86    sd a1,8(sp)           ; stack access
    0x84011018    0x88    j ffffffff84010fc2 <Arch_createObject+0x32>
    0x8401101a    0x8a    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 85 nodes.

Section Arch_getObjectSize (135 of 267)
=======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 19 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_getObjectSize`:

    0x84010f5e     0x0    li a4,7
    0x84010f60     0x2    beq a0,a4,ffffffff84010f8c <Arch_getObjectSize+0x2e>
    0x84010f64     0x6    mv a5,a0
    0x84010f66     0x8    bltu a4,a0,ffffffff84010f7c <Arch_getObjectSize+0x1e>
    0x84010f6a     0xc    li a4,5
    0x84010f6c     0xe    li a0,30
    0x84010f6e    0x10    beq a5,a4,ffffffff84010f7a <Arch_getObjectSize+0x1c>
    0x84010f72    0x14    li a4,6
    0x84010f74    0x16    li a0,12
    0x84010f76    0x18    bne a5,a4,ffffffff84010f84 <Arch_getObjectSize+0x26>
    0x84010f7a    0x1c    ret
    0x84010f7c    0x1e    li a4,8
    0x84010f7e    0x20    li a0,12
    0x84010f80    0x22    beq a5,a4,ffffffff84010f7a <Arch_getObjectSize+0x1c>
    0x84010f84    0x26    addi sp,sp,-16
    0x84010f86    0x28    sd ra,8(sp)           ; stack access
    0x84010f88    0x2a    jal ra,ffffffff8401034a <halt>
    0x84010f8c    0x2e    li a0,21
    0x84010f8e    0x30    j ffffffff84010f7a <Arch_getObjectSize+0x1c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 32 nodes.

Section Arch_sameObjectAs (136 of 267)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84010eb6     0x0    addi sp,sp,-48
    0x84010eb8     0x2    sd ra,40(sp)          ; stack access
    0x84010eba     0x4    sd a0,16(sp)          ; stack access
    0x84010ebc     0x6    sd a1,24(sp)          ; stack access
    0x84010ebe     0x8    sd a2,0(sp)           ; stack access
    0x84010ec0     0xa    sd a3,8(sp)           ; stack access
    0x84010ec2     0xc    srli a4,a0,0x3b
    0x84010ec6    0x10    li a5,1
    0x84010ec8    0x12    beq a4,a5,ffffffff84010ede <Arch_sameObjectAs+0x28>
    0x84010ecc    0x16    ld a2,0(sp)           ; stack access
    0x84010ece    0x18    ld a3,8(sp)           ; stack access
    0x84010ed0    0x1a    ld a0,16(sp)          ; stack access
    0x84010ed2    0x1c    ld a1,24(sp)          ; stack access
    0x84010ed4    0x1e    jal ra,ffffffff84010d4c <Arch_sameRegionAs>
    0x84010ed8    0x22    ld ra,40(sp)          ; stack access
    0x84010eda    0x24    addi sp,sp,48
    0x84010edc    0x26    ret
    0x84010ede    0x28    mv a4,a2
    0x84010ee0    0x2a    srli a3,a2,0x3b
    0x84010ee4    0x2e    bne a3,a5,ffffffff84010ecc <Arch_sameObjectAs+0x16>
    0x84010ee8    0x32    srli a5,a1,0x9
    0x84010eec    0x36    slli a2,a5,0x19
    0x84010ef0    0x3a    srli a2,a2,0x19
    0x84010ef2    0x3c    slli a3,a5,0x19
    0x84010ef6    0x40    bgez a3,ffffffff84010f24 <Arch_sameObjectAs+0x6e>
    0x84010efa    0x44    li a3,-1
    0x84010efc    0x46    slli a5,a3,0x27
    0x84010f00    0x4a    or a2,a2,a5
    0x84010f02    0x4c    ld a5,8(sp)           ; stack access
    0x84010f04    0x4e    srli a5,a5,0x9
    0x84010f06    0x50    srli a3,a3,0x19
    0x84010f08    0x52    and a3,a3,a5
    0x84010f0a    0x54    slli a1,a5,0x19
    0x84010f0e    0x58    li a5,0
    0x84010f10    0x5a    bgez a1,ffffffff84010f20 <Arch_sameObjectAs+0x6a>
    0x84010f14    0x5e    li a5,-1
    0x84010f16    0x60    slli a5,a5,0x27
    0x84010f18    0x62    or a3,a3,a5
    0x84010f1a    0x64    li a5,0
    0x84010f1c    0x66    beq a3,a2,ffffffff84010f38 <Arch_sameObjectAs+0x82>
    0x84010f20    0x6a    mv a0,a5
    0x84010f22    0x6c    j ffffffff84010ed8 <Arch_sameObjectAs+0x22>
    0x84010f24    0x6e    ld a5,8(sp)           ; stack access
    0x84010f26    0x70    srli a5,a5,0x9
    0x84010f28    0x72    slli a3,a5,0x19
    0x84010f2c    0x76    srli a3,a3,0x19
    0x84010f2e    0x78    slli a1,a5,0x19
    0x84010f32    0x7c    bltz a1,ffffffff84010f14 <Arch_sameObjectAs+0x5e>
    0x84010f36    0x80    j ffffffff84010f1a <Arch_sameObjectAs+0x64>
    0x84010f38    0x82    srli a2,a4,0x39
    0x84010f3c    0x86    andi a2,a2,3
    0x84010f3e    0x88    srli a3,a0,0x39
    0x84010f42    0x8c    andi a3,a3,3
    0x84010f44    0x8e    bne a2,a3,ffffffff84010f20 <Arch_sameObjectAs+0x6a>
    0x84010f48    0x92    srli a5,a0,0x36
    0x84010f4c    0x96    srli a4,a4,0x36
    0x84010f4e    0x98    xori a4,a4,1
    0x84010f52    0x9c    andi a5,a5,1
    0x84010f54    0x9e    andi a4,a4,1
    0x84010f56    0xa0    sub a5,a5,a4
    0x84010f58    0xa2    snez a5,a5
    0x84010f5c    0xa6    j ffffffff84010f20 <Arch_sameObjectAs+0x6a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 90 nodes.

Section Arch_sameRegionAs (137 of 267)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 132 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x84010d4c      0x0    srli a5,a0,0x3b
    0x84010d50      0x4    li a6,11
    0x84010d52      0x6    beq a5,a6,ffffffff84010eaa <Arch_sameRegionAs+0x15e>
    0x84010d56      0xa    mv a4,a0
    0x84010d58      0xc    bltu a6,a5,ffffffff84010d78 <Arch_sameRegionAs+0x2c>
    0x84010d5c     0x10    li a6,1
    0x84010d5e     0x12    beq a5,a6,ffffffff84010dca <Arch_sameRegionAs+0x7e>
    0x84010d62     0x16    li a6,3
    0x84010d64     0x18    bne a5,a6,ffffffff84010d74 <Arch_sameRegionAs+0x28>
    0x84010d68     0x1c    srli a2,a2,0x3b
    0x84010d6a     0x1e    li a5,3
    0x84010d6c     0x20    li a0,0
    0x84010d6e     0x22    beq a2,a5,ffffffff84010e74 <Arch_sameRegionAs+0x128>
    0x84010d72     0x26    ret
    0x84010d74     0x28    li a0,0
    0x84010d76     0x2a    ret
    0x84010d78     0x2c    li a3,13
    0x84010d7a     0x2e    bne a5,a3,ffffffff84010dc6 <Arch_sameRegionAs+0x7a>
    0x84010d7e     0x32    srli a5,a2,0x3b
    0x84010d82     0x36    li a3,13
    0x84010d84     0x38    li a0,0
    0x84010d86     0x3a    bne a5,a3,ffffffff84010d72 <Arch_sameRegionAs+0x26>
    0x84010d8a     0x3e    slli a4,a4,0x2
    0x84010d8c     0x40    lui a0,0xf8000
    0x84010d90     0x44    srli a0,a0,0x19
    0x84010d92     0x46    and a0,a0,a4
    0x84010d94     0x48    slli a5,a4,0x19
    0x84010d98     0x4c    bgez a5,ffffffff84010da2 <Arch_sameRegionAs+0x56>
    0x84010d9c     0x50    li a5,-1
    0x84010d9e     0x52    slli a5,a5,0x27
    0x84010da0     0x54    or a0,a0,a5
    0x84010da2     0x56    slli a4,a2,0x2
    0x84010da6     0x5a    lui a5,0xf8000
    0x84010daa     0x5e    srli a5,a5,0x19
    0x84010dac     0x60    and a5,a5,a4
    0x84010dae     0x62    slli a3,a4,0x19
    0x84010db2     0x66    bgez a3,ffffffff84010dbc <Arch_sameRegionAs+0x70>
    0x84010db6     0x6a    li a4,-1
    0x84010db8     0x6c    slli a4,a4,0x27
    0x84010dba     0x6e    or a5,a5,a4
    0x84010dbc     0x70    sub a0,a5,a0
    0x84010dc0     0x74    seqz a0,a0
    0x84010dc4     0x78    ret
    0x84010dc6     0x7a    li a0,0
    0x84010dc8     0x7c    ret
    0x84010dca     0x7e    srli a5,a2,0x3b
    0x84010dce     0x82    li a6,1
    0x84010dd0     0x84    li a0,0
    0x84010dd2     0x86    bne a5,a6,ffffffff84010d72 <Arch_sameRegionAs+0x26>
    0x84010dd6     0x8a    addi sp,sp,-48
    0x84010dd8     0x8c    sd ra,40(sp)          ; stack access
    0x84010dda     0x8e    srli a1,a1,0x9
    0x84010ddc     0x90    slli a5,a1,0x19
    0x84010de0     0x94    srli a5,a5,0x19
    0x84010de2     0x96    slli a0,a1,0x19
    0x84010de6     0x9a    bgez a0,ffffffff84010df0 <Arch_sameRegionAs+0xa4>
    0x84010dea     0x9e    li a1,-1
    0x84010dec     0xa0    slli a1,a1,0x27
    0x84010dee     0xa2    or a5,a5,a1
    0x84010df0     0xa4    srli a3,a3,0x9
    0x84010df2     0xa6    slli a1,a3,0x19
    0x84010df6     0xaa    srli a1,a1,0x19
    0x84010df8     0xac    slli a0,a3,0x19
    0x84010dfc     0xb0    bgez a0,ffffffff84010e06 <Arch_sameRegionAs+0xba>
    0x84010e00     0xb4    li a3,-1
    0x84010e02     0xb6    slli a3,a3,0x27
    0x84010e04     0xb8    or a1,a1,a3
    0x84010e06     0xba    srli a4,a4,0x39
    0x84010e08     0xbc    andi a4,a4,3
    0x84010e0a     0xbe    li a3,1
    0x84010e0c     0xc0    beq a4,a3,ffffffff84010e1c <Arch_sameRegionAs+0xd0>
    0x84010e10     0xc4    li a3,2
    0x84010e12     0xc6    beq a4,a3,ffffffff84010e20 <Arch_sameRegionAs+0xd4>
    0x84010e16     0xca    beqz a4,ffffffff84010e38 <Arch_sameRegionAs+0xec>
    0x84010e18     0xcc    jal ra,ffffffff8401034a <halt>
    0x84010e1c     0xd0    li a6,21
    0x84010e1e     0xd2    j ffffffff84010e22 <Arch_sameRegionAs+0xd6>
    0x84010e20     0xd4    li a6,30
    0x84010e22     0xd6    srli a2,a2,0x39
    0x84010e24     0xd8    andi a2,a2,3
    0x84010e26     0xda    li a4,1
    0x84010e28     0xdc    beq a2,a4,ffffffff84010e3c <Arch_sameRegionAs+0xf0>
    0x84010e2c     0xe0    li a4,2
    0x84010e2e     0xe2    beq a2,a4,ffffffff84010e40 <Arch_sameRegionAs+0xf4>
    0x84010e32     0xe6    beqz a2,ffffffff84010e70 <Arch_sameRegionAs+0x124>
    0x84010e34     0xe8    jal ra,ffffffff8401034a <halt>
    0x84010e38     0xec    li a6,12
    0x84010e3a     0xee    j ffffffff84010e22 <Arch_sameRegionAs+0xd6>
    0x84010e3c     0xf0    li a4,21
    0x84010e3e     0xf2    j ffffffff84010e42 <Arch_sameRegionAs+0xf6>
    0x84010e40     0xf4    li a4,30
    0x84010e42     0xf6    li a0,0
    0x84010e44     0xf8    bltu a1,a5,ffffffff84010e6a <Arch_sameRegionAs+0x11e>
    0x84010e48     0xfc    li a3,1
    0x84010e4a     0xfe    sll a4,a3,a4
    0x84010e4e    0x102    addi a2,a1,-1 # fffffffff7ffffff <ki_end+0x73fd1fff>
    0x84010e52    0x106    add a4,a4,a2
    0x84010e54    0x108    sll a3,a3,a6
    0x84010e58    0x10c    addi a5,a5,-1
    0x84010e5a    0x10e    add a5,a5,a3
    0x84010e5c    0x110    bltu a5,a4,ffffffff84010e6a <Arch_sameRegionAs+0x11e>
    0x84010e60    0x114    sltu a0,a4,a1
    0x84010e64    0x118    xori a0,a0,1
    0x84010e68    0x11c    sext.w a0,a0
    0x84010e6a    0x11e    ld ra,40(sp)          ; stack access
    0x84010e6c    0x120    addi sp,sp,48
    0x84010e6e    0x122    ret
    0x84010e70    0x124    li a4,12
    0x84010e72    0x126    j ffffffff84010e42 <Arch_sameRegionAs+0xf6>
    0x84010e74    0x128    srli a1,a1,0x9
    0x84010e76    0x12a    slli a0,a1,0x19
    0x84010e7a    0x12e    srli a5,a0,0x19
    0x84010e7e    0x132    slli a4,a1,0x19
    0x84010e82    0x136    bgez a4,ffffffff84010e8c <Arch_sameRegionAs+0x140>
    0x84010e86    0x13a    li a4,-1
    0x84010e88    0x13c    slli a4,a4,0x27
    0x84010e8a    0x13e    or a5,a5,a4
    0x84010e8c    0x140    srli a3,a3,0x9
    0x84010e8e    0x142    slli a0,a3,0x19
    0x84010e92    0x146    srli a0,a0,0x19
    0x84010e94    0x148    slli a4,a3,0x19
    0x84010e98    0x14c    bgez a4,ffffffff84010ea2 <Arch_sameRegionAs+0x156>
    0x84010e9c    0x150    li a4,-1
    0x84010e9e    0x152    slli a4,a4,0x27
    0x84010ea0    0x154    or a0,a0,a4
    0x84010ea2    0x156    sub a0,a0,a5
    0x84010ea4    0x158    seqz a0,a0
    0x84010ea8    0x15c    ret
    0x84010eaa    0x15e    srli a0,a2,0x3b
    0x84010eae    0x162    addi a0,a0,-11
    0x84010eb0    0x164    seqz a0,a0
    0x84010eb4    0x168    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
132 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 187 nodes.

Section Arch_maskCapRights (138 of 267)
=======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 32 instructions.

RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84010bf2     0x0    addi sp,sp,-64
    0x84010bf4     0x2    sd ra,56(sp)          ; stack access
    0x84010bf6     0x4    sd s0,48(sp)          ; stack access
    0x84010bf8     0x6    sd s1,40(sp)          ; stack access
    0x84010bfa     0x8    mv s0,a1
    0x84010bfc     0xa    mv s1,a2
    0x84010bfe     0xc    srli a4,a1,0x3b
    0x84010c02    0x10    li a5,1
    0x84010c04    0x12    beq a4,a5,ffffffff84010c1a <Arch_maskCapRights+0x28>
    0x84010c08    0x16    sd a1,16(sp)          ; stack access
    0x84010c0a    0x18    sd a2,24(sp)          ; stack access
    0x84010c0c    0x1a    ld a0,16(sp)          ; stack access
    0x84010c0e    0x1c    ld a1,24(sp)          ; stack access
    0x84010c10    0x1e    ld ra,56(sp)          ; stack access
    0x84010c12    0x20    ld s0,48(sp)          ; stack access
    0x84010c14    0x22    ld s1,40(sp)          ; stack access
    0x84010c16    0x24    addi sp,sp,64
    0x84010c18    0x26    ret
    0x84010c1a    0x28    srli a5,a1,0x37
    0x84010c1e    0x2c    mv a1,a0
    0x84010c20    0x2e    andi a0,a5,3
    0x84010c24    0x32    jal ra,ffffffff84010a8e <maskVMRights>
    0x84010c28    0x36    andi a0,a0,3
    0x84010c2a    0x38    slli a0,a0,0x37
    0x84010c2c    0x3a    li a1,-3
    0x84010c2e    0x3c    slli a1,a1,0x37
    0x84010c30    0x3e    addi a1,a1,-1
    0x84010c32    0x40    and s0,s0,a1
    0x84010c34    0x42    or s0,s0,a0
    0x84010c36    0x44    sd s0,16(sp)          ; stack access
    0x84010c38    0x46    sd s1,24(sp)          ; stack access
    0x84010c3a    0x48    j ffffffff84010c0c <Arch_maskCapRights+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 48 nodes.

Section Arch_deriveCap (139 of 267)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 39 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84010b84     0x0    srli a5,a2,0x3b
    0x84010b88     0x4    li a4,3
    0x84010b8a     0x6    beq a5,a4,ffffffff84010bbc <Arch_deriveCap+0x38>
    0x84010b8e     0xa    bgeu a4,a5,ffffffff84010ba0 <Arch_deriveCap+0x1c>
    0x84010b92     0xe    addi a5,a5,-11
    0x84010b94    0x10    andi a5,a5,-3
    0x84010b96    0x12    beqz a5,ffffffff84010bde <Arch_deriveCap+0x5a>
    0x84010b98    0x14    addi sp,sp,-32
    0x84010b9a    0x16    sd ra,24(sp)          ; stack access
    0x84010b9c    0x18    jal ra,ffffffff8401034a <halt>
    0x84010ba0    0x1c    li a4,1
    0x84010ba2    0x1e    bne a5,a4,ffffffff84010b98 <Arch_deriveCap+0x14>
    0x84010ba6    0x22    sd zero,0(a0)         ; stack access
    0x84010baa    0x26    li a5,-1
    0x84010bac    0x28    slli a4,a5,0x27
    0x84010bb0    0x2c    and a2,a2,a4
    0x84010bb2    0x2e    sd a2,8(a0)           ; stack access
    0x84010bb4    0x30    srli a5,a5,0x10
    0x84010bb6    0x32    and a3,a3,a5
    0x84010bb8    0x34    sd a3,16(a0)          ; stack access
    0x84010bba    0x36    ret
    0x84010bbc    0x38    srli a4,a2,0x27
    0x84010bc0    0x3c    andi a4,a4,1
    0x84010bc2    0x3e    bnez a4,ffffffff84010bda <Arch_deriveCap+0x56>
    0x84010bc4    0x40    li a3,3
    0x84010bc6    0x42    auipc a2,0xc
    0x84010bca    0x46    sd a3,178(a2) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84010bce    0x4a    mv a3,a4
    0x84010bd0    0x4c    mv a2,a4
    0x84010bd2    0x4e    sd a5,0(a0)           ; stack access
    0x84010bd4    0x50    sd a2,8(a0)           ; stack access
    0x84010bd6    0x52    sd a3,16(a0)          ; stack access
    0x84010bd8    0x54    ret
    0x84010bda    0x56    li a5,0
    0x84010bdc    0x58    j ffffffff84010bd2 <Arch_deriveCap+0x4e>
    0x84010bde    0x5a    sd zero,0(a0)         ; stack access
    0x84010be2    0x5e    sd a2,8(a0)           ; stack access
    0x84010be4    0x60    sd a3,16(a0)          ; stack access
    0x84010be6    0x62    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 64 nodes.

Section performPageInvocationUnmap (140 of 267)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 41 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x84010ae6     0x0    addi sp,sp,-32
    0x84010ae8     0x2    sd ra,24(sp)          ; stack access
    0x84010aea     0x4    sd s0,16(sp)          ; stack access
    0x84010aec     0x6    sd a0,0(sp)           ; stack access
    0x84010aee     0x8    mv s0,a2
    0x84010af0     0xa    mv a5,a1
    0x84010af2     0xc    srli a1,a1,0x30
    0x84010af4     0xe    beqz a1,ffffffff84010b2a <performPageInvocationUnmap+0x44>
    0x84010af6    0x10    mv a4,a0
    0x84010af8    0x12    srli a0,a0,0x39
    0x84010afa    0x14    andi a0,a0,3
    0x84010afc    0x16    slli a2,a4,0x19
    0x84010b00    0x1a    srli a2,a2,0x19
    0x84010b02    0x1c    slli a3,a4,0x19
    0x84010b06    0x20    bgez a3,ffffffff84010b10 <performPageInvocationUnmap+0x2a>
    0x84010b0a    0x24    li a4,-1
    0x84010b0c    0x26    slli a4,a4,0x27
    0x84010b0e    0x28    or a2,a2,a4
    0x84010b10    0x2a    srli a5,a5,0x9
    0x84010b12    0x2c    slli a3,a5,0x19
    0x84010b16    0x30    srli a3,a3,0x19
    0x84010b18    0x32    slli a4,a5,0x19
    0x84010b1c    0x36    bgez a4,ffffffff84010b26 <performPageInvocationUnmap+0x40>
    0x84010b20    0x3a    li a5,-1
    0x84010b22    0x3c    slli a5,a5,0x27
    0x84010b24    0x3e    or a3,a3,a5
    0x84010b26    0x40    jal ra,ffffffff84010838 <unmapPage>
    0x84010b2a    0x44    ld a4,8(s0)
    0x84010b2c    0x46    li a5,-1
    0x84010b2e    0x48    srli a3,a5,0x10
    0x84010b32    0x4c    and a4,a4,a3
    0x84010b34    0x4e    ld a3,0(s0)
    0x84010b36    0x50    slli a5,a5,0x27
    0x84010b38    0x52    and a5,a5,a3
    0x84010b3a    0x54    sd a5,0(s0)
    0x84010b3c    0x56    sd a4,8(s0)
    0x84010b3e    0x58    li a0,0
    0x84010b40    0x5a    ld ra,24(sp)          ; stack access
    0x84010b42    0x5c    ld s0,16(sp)          ; stack access
    0x84010b44    0x5e    addi sp,sp,32
    0x84010b46    0x60    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 58 nodes.

Section deleteASID (141 of 267)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 23 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASID`:

    0x840109ec     0x0    srli a5,a0,0x9
    0x840109f0     0x4    slli a4,a5,0x3
    0x840109f4     0x8    auipc a5,0xb
    0x840109f8     0xc    addi a5,a5,-460 # ffffffff8401b828 <riscvKSASIDTable>
    0x840109fc    0x10    add a5,a5,a4
    0x840109fe    0x12    ld a5,0(a5)
    0x84010a00    0x14    beqz a5,ffffffff84010a10 <deleteASID+0x24>
    0x84010a02    0x16    andi a4,a0,511
    0x84010a06    0x1a    slli a4,a4,0x3
    0x84010a08    0x1c    add a5,a5,a4
    0x84010a0a    0x1e    ld a4,0(a5)
    0x84010a0c    0x20    beq a4,a1,ffffffff84010a12 <deleteASID+0x26>
    0x84010a10    0x24    ret
    0x84010a12    0x26    addi sp,sp,-16
    0x84010a14    0x28    sd ra,8(sp)           ; stack access
    0x84010a16    0x2a    sfence.vma zero,a0
    0x84010a1a    0x2e    sd zero,0(a5)
    0x84010a1e    0x32    auipc a0,0x1d
    0x84010a22    0x36    ld a0,122(a0) # ffffffff8402da98 <ksCurThread>
    0x84010a26    0x3a    jal ra,ffffffff840108c6 <setVMRoot>
    0x84010a2a    0x3e    ld ra,8(sp)           ; stack access
    0x84010a2c    0x40    addi sp,sp,16
    0x84010a2e    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 37 nodes.

Section deleteASIDPool (142 of 267)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASIDPool`:

    0x840109ae     0x0    srli a0,a0,0x9
    0x840109b0     0x2    slli a4,a0,0x3
    0x840109b4     0x6    auipc a5,0xb
    0x840109b8     0xa    addi a5,a5,-396 # ffffffff8401b828 <riscvKSASIDTable>
    0x840109bc     0xe    add a5,a5,a4
    0x840109be    0x10    ld a5,0(a5)
    0x840109c0    0x12    beq a5,a1,ffffffff840109c6 <deleteASIDPool+0x18>
    0x840109c4    0x16    ret
    0x840109c6    0x18    addi sp,sp,-16
    0x840109c8    0x1a    sd ra,8(sp)           ; stack access
    0x840109ca    0x1c    auipc a5,0xb
    0x840109ce    0x20    addi a5,a5,-418 # ffffffff8401b828 <riscvKSASIDTable>
    0x840109d2    0x24    add a0,a5,a4
    0x840109d6    0x28    sd zero,0(a0)
    0x840109da    0x2c    auipc a0,0x1d
    0x840109de    0x30    ld a0,190(a0) # ffffffff8402da98 <ksCurThread>
    0x840109e2    0x34    jal ra,ffffffff840108c6 <setVMRoot>
    0x840109e6    0x38    ld ra,8(sp)           ; stack access
    0x840109e8    0x3a    addi sp,sp,16
    0x840109ea    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 30 nodes.

Section Arch_switchToIdleThread (143 of 267)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToIdleThread`:

    0x84010998     0x0    addi sp,sp,-16
    0x8401099a     0x2    sd ra,8(sp)           ; stack access
    0x8401099c     0x4    auipc a0,0xc
    0x840109a0     0x8    ld a0,652(a0) # ffffffff8401cc28 <ksIdleThread>
    0x840109a4     0xc    jal ra,ffffffff840108c6 <setVMRoot>
    0x840109a8    0x10    ld ra,8(sp)           ; stack access
    0x840109aa    0x12    addi sp,sp,16
    0x840109ac    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 13 nodes.

Section Arch_switchToThread (144 of 267)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToThread`:

    0x8401098a    0x0    addi sp,sp,-16
    0x8401098c    0x2    sd ra,8(sp)           ; stack access
    0x8401098e    0x4    jal ra,ffffffff840108c6 <setVMRoot>
    0x84010992    0x8    ld ra,8(sp)           ; stack access
    0x84010994    0xa    addi sp,sp,16
    0x84010996    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 10 nodes.

Section setVMRoot (145 of 267)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 74 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `setVMRoot`:

    0x840108c6     0x0    andi a0,a0,-1024
    0x840108ca     0x4    ld a5,32(a0)
    0x840108cc     0x6    srli a5,a5,0x3b
    0x840108ce     0x8    li a4,3
    0x840108d0     0xa    beq a5,a4,ffffffff840108fa <setVMRoot+0x34>
    0x840108d4     0xe    auipc a5,0x9
    0x840108d8    0x12    addi a5,a5,1836 # ffffffff8401a000 <kernel_root_pageTable>
    0x840108dc    0x16    li a4,1
    0x840108de    0x18    slli a4,a4,0x20
    0x840108e0    0x1a    add a5,a5,a4
    0x840108e2    0x1c    srli a5,a5,0xc
    0x840108e4    0x1e    li a4,-1
    0x840108e6    0x20    srli a3,a4,0x14
    0x840108ea    0x24    and a5,a5,a3
    0x840108ec    0x26    slli a4,a4,0x3f
    0x840108ee    0x28    or a5,a5,a4
    0x840108f0    0x2a    csrw satp,a5
    0x840108f4    0x2e    sfence.vma
    0x840108f8    0x32    ret
    0x840108fa    0x34    addi sp,sp,-48
    0x840108fc    0x36    sd ra,40(sp)          ; stack access
    0x840108fe    0x38    sd s0,32(sp)          ; stack access
    0x84010900    0x3a    sd s1,24(sp)          ; stack access
    0x84010902    0x3c    sd s2,16(sp)          ; stack access
    0x84010904    0x3e    addi a3,a0,32
    0x84010908    0x42    ld a5,8(a3)
    0x8401090a    0x44    srli a4,a5,0x9
    0x8401090e    0x48    slli s0,a4,0x19
    0x84010912    0x4c    srli s0,s0,0x19
    0x84010914    0x4e    slli a3,a4,0x19
    0x84010918    0x52    bgez a3,ffffffff84010922 <setVMRoot+0x5c>
    0x8401091c    0x56    li a4,-1
    0x8401091e    0x58    slli a4,a4,0x27
    0x84010920    0x5a    or s0,s0,a4
    0x84010922    0x5c    srli s1,a5,0x30
    0x84010926    0x60    mv a0,s1
    0x84010928    0x62    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x8401092c    0x66    sd a0,0(sp)           ; stack access
    0x8401092e    0x68    sd a1,8(sp)           ; stack access
    0x84010930    0x6a    bnez a0,ffffffff84010964 <setVMRoot+0x9e>
    0x84010932    0x6c    bne a1,s0,ffffffff84010964 <setVMRoot+0x9e>
    0x84010936    0x70    li a5,1
    0x84010938    0x72    slli a5,a5,0x26
    0x8401093a    0x74    add a5,a5,s0
    0x8401093c    0x76    srli a5,a5,0xc
    0x8401093e    0x78    li a4,-1
    0x84010940    0x7a    srli s0,a4,0x14
    0x84010944    0x7e    and a5,a5,s0
    0x84010946    0x80    slli a0,s1,0x2c
    0x8401094a    0x84    or a5,a5,a0
    0x8401094c    0x86    slli a4,a4,0x3f
    0x8401094e    0x88    or a5,a5,a4
    0x84010950    0x8a    csrw satp,a5
    0x84010954    0x8e    sfence.vma
    0x84010958    0x92    ld ra,40(sp)          ; stack access
    0x8401095a    0x94    ld s0,32(sp)          ; stack access
    0x8401095c    0x96    ld s1,24(sp)          ; stack access
    0x8401095e    0x98    ld s2,16(sp)          ; stack access
    0x84010960    0x9a    addi sp,sp,48
    0x84010962    0x9c    ret
    0x84010964    0x9e    auipc a5,0x9
    0x84010968    0xa2    addi a5,a5,1692 # ffffffff8401a000 <kernel_root_pageTable>
    0x8401096c    0xa6    li a4,1
    0x8401096e    0xa8    slli a4,a4,0x20
    0x84010970    0xaa    add a5,a5,a4
    0x84010972    0xac    srli a5,a5,0xc
    0x84010974    0xae    li a4,-1
    0x84010976    0xb0    srli a3,a4,0x14
    0x8401097a    0xb4    and a5,a5,a3
    0x8401097c    0xb6    slli a4,a4,0x3f
    0x8401097e    0xb8    or a5,a5,a4
    0x84010980    0xba    csrw satp,a5
    0x84010984    0xbe    sfence.vma
    0x84010988    0xc2    j ffffffff84010958 <setVMRoot+0x92>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 103 nodes.

Section unmapPageTable (146 of 267)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 64 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `unmapPageTable`:

    0x8401078e     0x0    addi sp,sp,-48
    0x84010790     0x2    sd ra,40(sp)          ; stack access
    0x84010792     0x4    sd s0,32(sp)          ; stack access
    0x84010794     0x6    sd s1,24(sp)          ; stack access
    0x84010796     0x8    mv s0,a1
    0x84010798     0xa    mv s1,a2
    0x8401079a     0xc    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x8401079e    0x10    sd a0,0(sp)           ; stack access
    0x840107a0    0x12    sd a1,8(sp)           ; stack access
    0x840107a2    0x14    bnez a0,ffffffff84010822 <unmapPageTable+0x94>
    0x840107a4    0x16    beq a1,s1,ffffffff8401082c <unmapPageTable+0x9e>
    0x840107a8    0x1a    srli a5,s0,0x1e
    0x840107ac    0x1e    andi a5,a5,511
    0x840107b0    0x22    slli a5,a5,0x3
    0x840107b2    0x24    add a4,a1,a5
    0x840107b6    0x28    ld a5,0(a4)
    0x840107b8    0x2a    andi a3,a5,1
    0x840107bc    0x2e    beqz a3,ffffffff84010822 <unmapPageTable+0x94>
    0x840107be    0x30    srli a3,a5,0x1
    0x840107c2    0x34    srli a2,a5,0x2
    0x840107c6    0x38    or a3,a3,a2
    0x840107c8    0x3a    srli a2,a5,0x3
    0x840107cc    0x3e    or a3,a3,a2
    0x840107ce    0x40    andi a3,a3,1
    0x840107d0    0x42    bnez a3,ffffffff84010822 <unmapPageTable+0x94>
    0x840107d2    0x44    slli a5,a5,0x2
    0x840107d4    0x46    lui a3,0xfff00
    0x840107d8    0x4a    srli a3,a3,0x8
    0x840107da    0x4c    and a5,a5,a3
    0x840107dc    0x4e    li a3,-1
    0x840107de    0x50    slli a3,a3,0x26
    0x840107e0    0x52    add a5,a5,a3
    0x840107e2    0x54    beq s1,a5,ffffffff8401082e <unmapPageTable+0xa0>
    0x840107e6    0x58    srli s0,s0,0x15
    0x840107e8    0x5a    andi s0,s0,511
    0x840107ec    0x5e    slli s0,s0,0x3
    0x840107ee    0x60    add a4,a5,s0
    0x840107f2    0x64    ld a5,0(a4)
    0x840107f4    0x66    andi a3,a5,1
    0x840107f8    0x6a    beqz a3,ffffffff84010822 <unmapPageTable+0x94>
    0x840107fa    0x6c    srli a3,a5,0x1
    0x840107fe    0x70    srli a2,a5,0x2
    0x84010802    0x74    or a3,a3,a2
    0x84010804    0x76    srli a2,a5,0x3
    0x84010808    0x7a    or a3,a3,a2
    0x8401080a    0x7c    andi a3,a3,1
    0x8401080c    0x7e    bnez a3,ffffffff84010822 <unmapPageTable+0x94>
    0x8401080e    0x80    slli a5,a5,0x2
    0x84010810    0x82    lui a3,0xfff00
    0x84010814    0x86    srli a3,a3,0x8
    0x84010816    0x88    and a5,a5,a3
    0x84010818    0x8a    li a3,-1
    0x8401081a    0x8c    slli a3,a3,0x26
    0x8401081c    0x8e    add a5,a5,a3
    0x8401081e    0x90    beq s1,a5,ffffffff8401082e <unmapPageTable+0xa0>
    0x84010822    0x94    ld ra,40(sp)          ; stack access
    0x84010824    0x96    ld s0,32(sp)          ; stack access
    0x84010826    0x98    ld s1,24(sp)          ; stack access
    0x84010828    0x9a    addi sp,sp,48
    0x8401082a    0x9c    ret
    0x8401082c    0x9e    li a4,0
    0x8401082e    0xa0    sd zero,0(a4)
    0x84010832    0xa4    sfence.vma
    0x84010836    0xa8    j ffffffff84010822 <unmapPageTable+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 94 nodes.

Section handleVMFault (147 of 267)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 35 instructions.

Skipping 143026f3 csrr a3,stval


Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x8401072c     0x0    csrr a3,stval
    0x84010730     0x4    li a5,15
    0x84010732     0x6    bltu a5,a1,ffffffff84010786 <handleVMFault+0x5a>
    0x84010736     0xa    slli a1,a1,0x2
    0x84010738     0xc    auipc a4,0x7
    0x8401073c    0x10    addi a4,a4,-1580 # ffffffff8401710c <ksDomScheduleLength+0x5c>
    0x84010740    0x14    add a1,a1,a4
    0x84010742    0x16    lw a5,0(a1)
    0x84010744    0x18    add a5,a5,a4
    0x84010746    0x1a    jr a5
    0x84010748    0x1c    auipc a4,0xb
    0x8401074c    0x20    addi a4,a4,184 # ffffffff8401b800 <current_fault>
    0x84010750    0x24    lui a5,0x28000
    0x84010754    0x28    addi a5,a5,5
    0x84010756    0x2a    sd a5,0(a4)
    0x84010758    0x2c    sd a3,8(a4)
    0x8401075a    0x2e    li a0,1
    0x8401075c    0x30    ret
    0x8401075e    0x32    auipc a4,0xb
    0x84010762    0x36    addi a4,a4,162 # ffffffff8401b800 <current_fault>
    0x84010766    0x3a    lui a5,0x38000
    0x8401076a    0x3e    addi a5,a5,5
    0x8401076c    0x40    sd a5,0(a4)
    0x8401076e    0x42    sd a3,8(a4)
    0x84010770    0x44    j ffffffff8401075a <handleVMFault+0x2e>
    0x84010772    0x46    auipc a4,0xb
    0x84010776    0x4a    addi a4,a4,142 # ffffffff8401b800 <current_fault>
    0x8401077a    0x4e    lui a5,0x8080
    0x8401077e    0x52    addi a5,a5,5
    0x84010780    0x54    sd a5,0(a4)
    0x84010782    0x56    sd a3,8(a4)
    0x84010784    0x58    j ffffffff8401075a <handleVMFault+0x2e>
    0x84010786    0x5a    addi sp,sp,-16
    0x84010788    0x5c    sd ra,8(sp)           ; stack access
    0x8401078a    0x5e    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 49 nodes.

Section lookupIPCBuffer (148 of 267)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 54 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x840104e4     0x0    andi a5,a1,-1024
    0x840104e8     0x4    addi a2,a5,128
    0x840104ec     0x8    ld a5,128(a5)
    0x840104ee     0xa    srli a3,a5,0x3b
    0x840104f2     0xe    li a4,1
    0x840104f4    0x10    bne a3,a4,ffffffff8401056a <lookupIPCBuffer+0x86>
    0x840104f8    0x14    slli a4,a5,0x9
    0x840104fc    0x18    bltz a4,ffffffff8401056e <lookupIPCBuffer+0x8a>
    0x84010500    0x1c    srli a4,a5,0x37
    0x84010504    0x20    andi a4,a4,3
    0x84010506    0x22    li a3,3
    0x84010508    0x24    bne a4,a3,ffffffff84010544 <lookupIPCBuffer+0x60>
    0x8401050c    0x28    ld a3,8(a2)
    0x8401050e    0x2a    srli a3,a3,0x9
    0x84010510    0x2c    slli a0,a3,0x19
    0x84010514    0x30    srli a4,a0,0x19
    0x84010518    0x34    slli a2,a3,0x19
    0x8401051c    0x38    bgez a2,ffffffff84010526 <lookupIPCBuffer+0x42>
    0x84010520    0x3c    li a3,-1
    0x84010522    0x3e    slli a3,a3,0x27
    0x84010524    0x40    or a4,a4,a3
    0x84010526    0x42    ld a3,384(a1)
    0x8401052a    0x46    srli a5,a5,0x39
    0x8401052c    0x48    andi a5,a5,3
    0x8401052e    0x4a    li a2,1
    0x84010530    0x4c    beq a5,a2,ffffffff84010550 <lookupIPCBuffer+0x6c>
    0x84010534    0x50    li a2,2
    0x84010536    0x52    beq a5,a2,ffffffff84010554 <lookupIPCBuffer+0x70>
    0x8401053a    0x56    beqz a5,ffffffff84010566 <lookupIPCBuffer+0x82>
    0x8401053c    0x58    addi sp,sp,-16
    0x8401053e    0x5a    sd ra,8(sp)           ; stack access
    0x84010540    0x5c    jal ra,ffffffff8401034a <halt>
    0x84010544    0x60    bnez a0,ffffffff84010572 <lookupIPCBuffer+0x8e>
    0x84010546    0x62    li a3,2
    0x84010548    0x64    beq a4,a3,ffffffff8401050c <lookupIPCBuffer+0x28>
    0x8401054c    0x68    li a0,0
    0x8401054e    0x6a    ret
    0x84010550    0x6c    li a5,21
    0x84010552    0x6e    j ffffffff84010556 <lookupIPCBuffer+0x72>
    0x84010554    0x70    li a5,30
    0x84010556    0x72    li a0,-1
    0x84010558    0x74    sll a0,a0,a5
    0x8401055c    0x78    not a0,a0
    0x84010560    0x7c    and a0,a0,a3
    0x84010562    0x7e    add a0,a0,a4
    0x84010564    0x80    ret
    0x84010566    0x82    li a5,12
    0x84010568    0x84    j ffffffff84010556 <lookupIPCBuffer+0x72>
    0x8401056a    0x86    li a0,0
    0x8401056c    0x88    ret
    0x8401056e    0x8a    li a0,0
    0x84010570    0x8c    ret
    0x84010572    0x8e    li a0,0
    0x84010574    0x90    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 82 nodes.

Section Arch_setMRs_fault (149 of 267)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 18 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x84010368     0x0    li a5,5
    0x8401036a     0x2    bne a3,a5,ffffffff84010392 <Arch_setMRs_fault+0x2a>
    0x8401036e     0x6    ld a5,264(a0) # fffffffff8000108 <ki_end+0x73fd2108>
    0x84010372     0xa    sd a5,88(a1)
    0x84010374     0xc    ld a5,320(a0)
    0x84010378    0x10    sd a5,96(a1)
    0x8401037a    0x12    ld a5,312(a0)
    0x8401037e    0x16    srli a5,a5,0x13
    0x84010380    0x18    andi a5,a5,1
    0x84010382    0x1a    sd a5,104(a1)
    0x84010384    0x1c    ld a5,312(a0)
    0x84010388    0x20    srliw a5,a5,0x1b
    0x8401038c    0x24    sd a5,112(a1)
    0x8401038e    0x26    li a0,4
    0x84010390    0x28    ret
    0x84010392    0x2a    addi sp,sp,-16
    0x84010394    0x2c    sd ra,8(sp)           ; stack access
    0x84010396    0x2e    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 31 nodes.

Section Arch_handleFaultReply (150 of 267)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x84010356    0x0    li a5,5
    0x84010358    0x2    bne a2,a5,ffffffff84010360 <Arch_handleFaultReply+0xa>
    0x8401035c    0x6    li a0,1
    0x8401035e    0x8    ret
    0x84010360    0xa    addi sp,sp,-16
    0x84010362    0xc    sd ra,8(sp)           ; stack access
    0x84010364    0xe    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section interrupt (151 of 267)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840100cc    0x0    sd ra,272(t0)
    0x840100d0    0x4    j ffffffff84013a4a <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (152 of 267)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840100c4    0x0    sd ra,272(t0)
    0x840100c8    0x4    j ffffffff840141aa <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (153 of 267)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840100ba    0x0    addi ra,ra,4
    0x840100bc    0x2    sd ra,272(t0)
    0x840100c0    0x6    j ffffffff84016edc <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section maybe_alloc_extra_bi (154 of 267)
=========================================

Deriving specifications
-----------------------

Section `maybe_alloc_extra_bi` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `maybe_alloc_extra_bi`:

    0x84000e54     0x0    bltu a1,a0,ffffffff84000e64 <maybe_alloc_extra_bi+0x10>
    0x84000e58     0x4    mv a5,a1
    0x84000e5a     0x6    auipc a4,0x1
    0x84000e5e     0xa    ld a4,-1714(a4) # ffffffff840017a8 <rootserver+0x28>
    0x84000e62     0xe    beqz a4,ffffffff84000e66 <maybe_alloc_extra_bi+0x12>
    0x84000e64    0x10    ret
    0x84000e66    0x12    addi sp,sp,-16
    0x84000e68    0x14    sd ra,8(sp)           ; stack access
    0x84000e6a    0x16    li a1,1
    0x84000e6c    0x18    mv a0,a5
    0x84000e6e    0x1a    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000e72    0x1e    auipc a5,0x1
    0x84000e76    0x22    sd a0,-1738(a5) # ffffffff840017a8 <rootserver+0x28>
    0x84000e7a    0x26    ld ra,8(sp)           ; stack access
    0x84000e7c    0x28    addi sp,sp,16
    0x84000e7e    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maybe_alloc_extra_bi` has 27 nodes.

Section alloc_rootserver_obj (155 of 267)
=========================================

Deriving specifications
-----------------------

Section `alloc_rootserver_obj` consists of 16 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `alloc_rootserver_obj`:

    0x84000e26     0x0    addi sp,sp,-16
    0x84000e28     0x2    sd ra,8(sp)           ; stack access
    0x84000e2a     0x4    sd s0,0(sp)           ; stack access
    0x84000e2c     0x6    auipc a5,0x0
    0x84000e30     0xa    addi a5,a5,1780 # ffffffff84001520 <ndks_boot>
    0x84000e34     0xe    ld s0,680(a5)
    0x84000e38    0x12    sll a1,a1,a0
    0x84000e3c    0x16    add a4,a1,s0
    0x84000e40    0x1a    sd a4,680(a5)
    0x84000e44    0x1e    mv a0,s0
    0x84000e46    0x20    jal ra,ffffffff840156b8 <memzero>
    0x84000e4a    0x24    mv a0,s0
    0x84000e4c    0x26    ld ra,8(sp)           ; stack access
    0x84000e4e    0x28    ld s0,0(sp)           ; stack access
    0x84000e50    0x2a    addi sp,sp,16
    0x84000e52    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `alloc_rootserver_obj` has 24 nodes.

Section create_idle_thread (156 of 267)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_idle_thread`:

    0x84000d02     0x0    addi sp,sp,-16
    0x84000d04     0x2    sd ra,8(sp)           ; stack access
    0x84000d06     0x4    auipc a0,0x17
    0x84000d0a     0x8    addi a0,a0,-774 # ffffffff84017a00 <__global_pointer$+0x154>
    0x84000d0e     0xc    auipc a5,0x1c
    0x84000d12    0x10    sd a0,-230(a5) # ffffffff8401cc28 <ksIdleThread>
    0x84000d16    0x14    jal ra,ffffffff84000cd4 <configureIdleThread>
    0x84000d1a    0x18    li a0,1
    0x84000d1c    0x1a    ld ra,8(sp)           ; stack access
    0x84000d1e    0x1c    addi sp,sp,16
    0x84000d20    0x1e    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 16 nodes.

Section configureIdleThread (157 of 267)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `configureIdleThread`:

    0x84000cd4     0x0    addi sp,sp,-16
    0x84000cd6     0x2    sd ra,8(sp)           ; stack access
    0x84000cd8     0x4    auipc a4,0xf
    0x84000cdc     0x8    addi a4,a4,1020 # ffffffff840100d4 <idle_thread>
    0x84000ce0     0xc    sd a4,272(a0)
    0x84000ce4    0x10    li a4,288
    0x84000ce8    0x14    sd a4,256(a0)
    0x84000cec    0x18    auipc a4,0x1c
    0x84000cf0    0x1c    addi a4,a4,-196 # ffffffff8401cc28 <ksIdleThread>
    0x84000cf4    0x20    sd a4,8(a0)
    0x84000cf6    0x22    li a1,7
    0x84000cf8    0x24    jal ra,ffffffff840122d0 <setThreadState>
    0x84000cfc    0x28    ld ra,8(sp)           ; stack access
    0x84000cfe    0x2a    addi sp,sp,16
    0x84000d00    0x2c    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 22 nodes.

Section create_kernel_untypeds (158 of 267)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 38 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x84000b2a     0x0    addi sp,sp,-80
    0x84000b2c     0x2    sd ra,72(sp)          ; stack access
    0x84000b2e     0x4    sd s0,64(sp)          ; stack access
    0x84000b30     0x6    sd s1,56(sp)          ; stack access
    0x84000b32     0x8    sd s2,48(sp)          ; stack access
    0x84000b34     0xa    sd a0,16(sp)          ; stack access
    0x84000b36     0xc    sd a1,24(sp)          ; stack access
    0x84000b38     0xe    mv a6,a3
    0x84000b3a    0x10    mv s1,a4
    0x84000b3c    0x12    mv a5,a4
    0x84000b3e    0x14    mv a3,a2
    0x84000b40    0x16    mv a4,a6
    0x84000b42    0x18    li a2,0
    0x84000b44    0x1a    jal ra,ffffffff8400097a <create_untypeds_for_region>
    0x84000b48    0x1e    beqz a0,ffffffff84000b7c <create_kernel_untypeds+0x52>
    0x84000b4a    0x20    auipc s0,0x1
    0x84000b4e    0x24    addi s0,s0,-1250 # ffffffff84001668 <ndks_boot+0x148>
    0x84000b52    0x28    auipc s2,0x1
    0x84000b56    0x2c    addi s2,s2,-1002 # ffffffff84001768 <ndks_boot+0x248>
    0x84000b5a    0x30    ld a3,0(s0)
    0x84000b5c    0x32    ld a4,8(s0)
    0x84000b5e    0x34    sd zero,0(s0)
    0x84000b62    0x38    sd zero,8(s0)
    0x84000b66    0x3c    mv a5,s1
    0x84000b68    0x3e    li a2,0
    0x84000b6a    0x40    ld a0,16(sp)          ; stack access
    0x84000b6c    0x42    ld a1,24(sp)          ; stack access
    0x84000b6e    0x44    jal ra,ffffffff8400097a <create_untypeds_for_region>
    0x84000b72    0x48    beqz a0,ffffffff84000b7c <create_kernel_untypeds+0x52>
    0x84000b74    0x4a    addi s0,s0,16
    0x84000b76    0x4c    bne s0,s2,ffffffff84000b5a <create_kernel_untypeds+0x30>
    0x84000b7a    0x50    li a0,1
    0x84000b7c    0x52    ld ra,72(sp)          ; stack access
    0x84000b7e    0x54    ld s0,64(sp)          ; stack access
    0x84000b80    0x56    ld s1,56(sp)          ; stack access
    0x84000b82    0x58    ld s2,48(sp)          ; stack access
    0x84000b84    0x5a    addi sp,sp,80
    0x84000b86    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 63 nodes.

Section create_device_untypeds (159 of 267)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 64 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `create_device_untypeds`:

    0x84000a90     0x0    addi sp,sp,-96
    0x84000a92     0x2    sd ra,88(sp)          ; stack access
    0x84000a94     0x4    sd s0,80(sp)          ; stack access
    0x84000a96     0x6    sd s1,72(sp)          ; stack access
    0x84000a98     0x8    sd s2,64(sp)          ; stack access
    0x84000a9a     0xa    sd s3,56(sp)          ; stack access
    0x84000a9c     0xc    sd s4,48(sp)          ; stack access
    0x84000a9e     0xe    sd s5,40(sp)          ; stack access
    0x84000aa0    0x10    sd a0,0(sp)           ; stack access
    0x84000aa2    0x12    sd a1,8(sp)           ; stack access
    0x84000aa4    0x14    mv s5,a2
    0x84000aa6    0x16    auipc a3,0x1
    0x84000aaa    0x1a    ld a3,-1094(a3) # ffffffff84001660 <ndks_boot+0x140>
    0x84000aae    0x1e    beqz a3,ffffffff84000b0e <create_device_untypeds+0x7e>
    0x84000ab0    0x20    auipc s0,0x1
    0x84000ab4    0x24    addi s0,s0,-1424 # ffffffff84001520 <ndks_boot>
    0x84000ab8    0x28    li s1,0
    0x84000aba    0x2a    li a3,0
    0x84000abc    0x2c    li s4,-1
    0x84000abe    0x2e    slli s4,s4,0x26
    0x84000ac0    0x30    mv s3,s0
    0x84000ac2    0x32    j ffffffff84000ad4 <create_device_untypeds+0x44>
    0x84000ac4    0x34    ld a3,8(s2)
    0x84000ac8    0x38    addi s1,s1,1
    0x84000aca    0x3a    addi s0,s0,16
    0x84000acc    0x3c    ld a5,320(s3)
    0x84000ad0    0x40    bgeu s1,a5,ffffffff84000af0 <create_device_untypeds+0x60>
    0x84000ad4    0x44    mv s2,s0
    0x84000ad6    0x46    ld a4,0(s0)
    0x84000ad8    0x48    bgeu a3,a4,ffffffff84000ac4 <create_device_untypeds+0x34>
    0x84000adc    0x4c    mv a5,s5
    0x84000ade    0x4e    add a3,a3,s4
    0x84000ae0    0x50    add a4,a4,s4
    0x84000ae2    0x52    li a2,1
    0x84000ae4    0x54    ld a0,0(sp)           ; stack access
    0x84000ae6    0x56    ld a1,8(sp)           ; stack access
    0x84000ae8    0x58    jal ra,ffffffff8400097a <create_untypeds_for_region>
    0x84000aec    0x5c    bnez a0,ffffffff84000ac4 <create_device_untypeds+0x34>
    0x84000aee    0x5e    j ffffffff84000afc <create_device_untypeds+0x6c>
    0x84000af0    0x60    lui a5,0xfc000
    0x84000af4    0x64    srli a5,a5,0x19
    0x84000af6    0x66    li a0,1
    0x84000af8    0x68    bgeu a5,a3,ffffffff84000b0e <create_device_untypeds+0x7e>
    0x84000afc    0x6c    ld ra,88(sp)          ; stack access
    0x84000afe    0x6e    ld s0,80(sp)          ; stack access
    0x84000b00    0x70    ld s1,72(sp)          ; stack access
    0x84000b02    0x72    ld s2,64(sp)          ; stack access
    0x84000b04    0x74    ld s3,56(sp)          ; stack access
    0x84000b06    0x76    ld s4,48(sp)          ; stack access
    0x84000b08    0x78    ld s5,40(sp)          ; stack access
    0x84000b0a    0x7a    addi sp,sp,96
    0x84000b0c    0x7c    ret
    0x84000b0e    0x7e    li a4,-1
    0x84000b10    0x80    slli a2,a4,0x26
    0x84000b14    0x84    mv a5,s5
    0x84000b16    0x86    add a3,a3,a2
    0x84000b18    0x88    srli a4,a4,0x1a
    0x84000b1a    0x8a    li a2,1
    0x84000b1c    0x8c    ld a0,0(sp)           ; stack access
    0x84000b1e    0x8e    ld a1,8(sp)           ; stack access
    0x84000b20    0x90    jal ra,ffffffff8400097a <create_untypeds_for_region>
    0x84000b24    0x94    beqz a0,ffffffff84000afc <create_device_untypeds+0x6c>
    0x84000b26    0x96    li a0,1
    0x84000b28    0x98    j ffffffff84000afc <create_device_untypeds+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 103 nodes.

Section create_it_asid_pool (160 of 267)
========================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 39 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x840008fe     0x0    addi sp,sp,-80
    0x84000900     0x2    sd ra,72(sp)          ; stack access
    0x84000902     0x4    sd s0,64(sp)          ; stack access
    0x84000904     0x6    sd s1,56(sp)          ; stack access
    0x84000906     0x8    sd s2,48(sp)          ; stack access
    0x84000908     0xa    sd s3,40(sp)          ; stack access
    0x8400090a     0xc    mv s2,a0
    0x8400090c     0xe    mv s1,a1
    0x8400090e    0x10    auipc s0,0x1
    0x84000912    0x14    ld s0,-382(s0) # ffffffff84001790 <rootserver+0x10>
    0x84000916    0x18    slli s0,s0,0x19
    0x84000918    0x1a    srli s0,s0,0x1b
    0x8400091a    0x1c    li a5,13
    0x8400091c    0x1e    slli a5,a5,0x3b
    0x8400091e    0x20    or s0,s0,a5
    0x84000920    0x22    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000924    0x26    sd s0,192(a0)
    0x84000926    0x28    sd zero,200(a0)
    0x8400092a    0x2c    sd zero,208(a0)
    0x8400092e    0x30    li s3,3
    0x84000930    0x32    sd s3,216(a0)
    0x84000934    0x36    mv a0,s2
    0x84000936    0x38    mv a1,s1
    0x84000938    0x3a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x8400093c    0x3e    li a5,11
    0x8400093e    0x40    slli a5,a5,0x3b
    0x84000940    0x42    sd a5,160(a0)
    0x84000942    0x44    sd zero,168(a0)
    0x84000946    0x48    sd zero,176(a0)
    0x8400094a    0x4c    sd s3,184(a0)
    0x8400094e    0x50    mv a0,s0
    0x84000950    0x52    li a1,0
    0x84000952    0x54    ld ra,72(sp)          ; stack access
    0x84000954    0x56    ld s0,64(sp)          ; stack access
    0x84000956    0x58    ld s1,56(sp)          ; stack access
    0x84000958    0x5a    ld s2,48(sp)          ; stack access
    0x8400095a    0x5c    ld s3,40(sp)          ; stack access
    0x8400095c    0x5e    addi sp,sp,80
    0x8400095e    0x60    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 61 nodes.

Section provide_cap (161 of 267)
================================

Deriving specifications
-----------------------

Section `provide_cap` consists of 34 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `provide_cap`:

    0x8400068e     0x0    addi sp,sp,-48
    0x84000690     0x2    sd ra,40(sp)          ; stack access
    0x84000692     0x4    sd s0,32(sp)          ; stack access
    0x84000694     0x6    sd a0,16(sp)          ; stack access
    0x84000696     0x8    sd a1,24(sp)          ; stack access
    0x84000698     0xa    sd a2,0(sp)           ; stack access
    0x8400069a     0xc    sd a3,8(sp)           ; stack access
    0x8400069c     0xe    auipc a5,0x1
    0x840006a0    0x12    addi a5,a5,-380 # ffffffff84001520 <ndks_boot>
    0x840006a4    0x16    ld s0,592(a5)
    0x840006a8    0x1a    ld a5,600(a5)
    0x840006ac    0x1e    bltu s0,a5,ffffffff840006ba <provide_cap+0x2c>
    0x840006b0    0x22    li a0,0
    0x840006b2    0x24    ld ra,40(sp)          ; stack access
    0x840006b4    0x26    ld s0,32(sp)          ; stack access
    0x840006b6    0x28    addi sp,sp,48
    0x840006b8    0x2a    ret
    0x840006ba    0x2c    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840006be    0x30    slli s0,s0,0x5
    0x840006c0    0x32    add s0,s0,a0
    0x840006c2    0x34    ld a5,0(sp)           ; stack access
    0x840006c4    0x36    sd a5,0(s0)
    0x840006c6    0x38    ld a5,8(sp)           ; stack access
    0x840006c8    0x3a    sd a5,8(s0)
    0x840006ca    0x3c    sd zero,16(s0)
    0x840006ce    0x40    li a5,3
    0x840006d0    0x42    sd a5,24(s0)
    0x840006d2    0x44    auipc a4,0x1
    0x840006d6    0x48    addi a4,a4,-434 # ffffffff84001520 <ndks_boot>
    0x840006da    0x4c    ld a5,592(a4)
    0x840006de    0x50    addi a5,a5,1
    0x840006e0    0x52    sd a5,592(a4)
    0x840006e4    0x56    li a0,1
    0x840006e6    0x58    j ffffffff840006b2 <provide_cap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 56 nodes.

Section calculate_extra_bi_size_bits (162 of 267)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x84000656     0x0    addi sp,sp,-16
    0x84000658     0x2    sd ra,8(sp)           ; stack access
    0x8400065a     0x4    sd s0,0(sp)           ; stack access
    0x8400065c     0x6    mv s0,a0
    0x8400065e     0x8    beqz a0,ffffffff84000686 <calculate_extra_bi_size_bits+0x30>
    0x84000660     0xa    addi a0,a0,-1
    0x84000662     0xc    srli a0,a0,0xc
    0x84000664     0xe    addi a0,a0,1
    0x84000666    0x10    slli a0,a0,0xc
    0x84000668    0x12    jal ra,ffffffff8401706c <__clzdi2>
    0x8400066c    0x16    sext.w a5,a0
    0x84000670    0x1a    li a0,63
    0x84000674    0x1e    sub a0,a0,a5
    0x84000676    0x20    li a4,1
    0x84000678    0x22    sll a4,a4,a0
    0x8400067c    0x26    bgeu a4,s0,ffffffff84000686 <calculate_extra_bi_size_bits+0x30>
    0x84000680    0x2a    li a0,64
    0x84000684    0x2e    sub a0,a0,a5
    0x84000686    0x30    ld ra,8(sp)           ; stack access
    0x84000688    0x32    ld s0,0(sp)           ; stack access
    0x8400068a    0x34    addi sp,sp,16
    0x8400068c    0x36    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 32 nodes.

Section create_domain_cap (163 of 267)
======================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 13 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_domain_cap`:

    0x840005e6     0x0    addi sp,sp,-32
    0x840005e8     0x2    sd ra,24(sp)          ; stack access
    0x840005ea     0x4    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840005ee     0x8    li a5,-3
    0x840005f0     0xa    slli a5,a5,0x3d
    0x840005f2     0xc    sd a5,352(a0)
    0x840005f6    0x10    sd zero,360(a0)
    0x840005fa    0x14    sd zero,368(a0)
    0x840005fe    0x18    li a5,3
    0x84000600    0x1a    sd a5,376(a0)
    0x84000604    0x1e    ld ra,24(sp)          ; stack access
    0x84000606    0x20    addi sp,sp,32
    0x84000608    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 21 nodes.

Section insert_region (164 of 267)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 39 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `insert_region`:

    0x8400053a     0x0    addi sp,sp,-48
    0x8400053c     0x2    sd ra,40(sp)          ; stack access
    0x8400053e     0x4    sd s0,32(sp)          ; stack access
    0x84000540     0x6    sd a0,0(sp)           ; stack access
    0x84000542     0x8    sd a1,8(sp)           ; stack access
    0x84000544     0xa    beq a0,a1,ffffffff84000594 <insert_region+0x5a>
    0x84000548     0xe    auipc a5,0x1
    0x8400054c    0x12    addi a5,a5,288 # ffffffff84001668 <ndks_boot+0x148>
    0x84000550    0x16    li s0,0
    0x84000552    0x18    li a2,16
    0x84000554    0x1a    ld a3,0(a5)
    0x84000556    0x1c    ld a4,8(a5)
    0x84000558    0x1e    beq a3,a4,ffffffff8400056e <insert_region+0x34>
    0x8400055c    0x22    addi s0,s0,1
    0x8400055e    0x24    addi a5,a5,16
    0x84000560    0x26    bne s0,a2,ffffffff84000554 <insert_region+0x1a>
    0x84000564    0x2a    li a0,0
    0x84000566    0x2c    ld ra,40(sp)          ; stack access
    0x84000568    0x2e    ld s0,32(sp)          ; stack access
    0x8400056a    0x30    addi sp,sp,48
    0x8400056c    0x32    ret
    0x8400056e    0x34    li a5,1
    0x84000570    0x36    slli a5,a5,0x26
    0x84000572    0x38    add a0,a0,a5
    0x84000574    0x3a    add a1,a1,a5
    0x84000576    0x3c    jal ra,ffffffff84000364 <reserve_region>
    0x8400057a    0x40    addi s0,s0,20
    0x8400057c    0x42    slli s0,s0,0x4
    0x8400057e    0x44    auipc a5,0x1
    0x84000582    0x48    addi a5,a5,-94 # ffffffff84001520 <ndks_boot>
    0x84000586    0x4c    add s0,s0,a5
    0x84000588    0x4e    ld a5,0(sp)           ; stack access
    0x8400058a    0x50    sd a5,8(s0)
    0x8400058c    0x52    ld a5,8(sp)           ; stack access
    0x8400058e    0x54    sd a5,16(s0)
    0x84000590    0x56    li a0,1
    0x84000592    0x58    j ffffffff84000566 <insert_region+0x2c>
    0x84000594    0x5a    li a0,1
    0x84000596    0x5c    j ffffffff84000566 <insert_region+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 59 nodes.

Section reserve_region (165 of 267)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 81 instructions.

RVC_TFFFFT___FFT__TF.
RVC_TFFTFFT__FT___TF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `reserve_region`:

    0x84000364     0x0    beq a0,a1,ffffffff84000454 <reserve_region+0xf0>
    0x84000368     0x4    addi sp,sp,-32
    0x8400036a     0x6    sd ra,24(sp)          ; stack access
    0x8400036c     0x8    mv a7,a0
    0x8400036e     0xa    auipc a6,0x1
    0x84000372     0xe    ld a6,754(a6) # ffffffff84001660 <ndks_boot+0x140>
    0x84000376    0x12    beqz a6,ffffffff840003a6 <reserve_region+0x42>
    0x8400037a    0x16    auipc t1,0x1
    0x8400037e    0x1a    addi t1,t1,422 # ffffffff84001520 <ndks_boot>
    0x84000382    0x1e    mv a5,t1
    0x84000384    0x20    li a4,0
    0x84000386    0x22    ld a3,0(a5)
    0x84000388    0x24    beq a3,a1,ffffffff840003c8 <reserve_region+0x64>
    0x8400038c    0x28    ld a2,8(a5)
    0x8400038e    0x2a    beq a2,a7,ffffffff840003e4 <reserve_region+0x80>
    0x84000392    0x2e    bltu a1,a3,ffffffff840003fa <reserve_region+0x96>
    0x84000396    0x32    addi a4,a4,1
    0x84000398    0x34    addi a5,a5,16
    0x8400039a    0x36    bne a4,a6,ffffffff84000386 <reserve_region+0x22>
    0x8400039e    0x3a    li a5,19
    0x840003a0    0x3c    li a0,0
    0x840003a2    0x3e    beq a6,a5,ffffffff840003de <reserve_region+0x7a>
    0x840003a6    0x42    auipc a5,0x1
    0x840003aa    0x46    addi a5,a5,378 # ffffffff84001520 <ndks_boot>
    0x840003ae    0x4a    slli a6,a6,0x4
    0x840003b0    0x4c    add a6,a6,a5
    0x840003b2    0x4e    sd a7,0(a6)
    0x840003b6    0x52    sd a1,8(a6)
    0x840003ba    0x56    ld a4,320(a5)
    0x840003be    0x5a    addi a4,a4,1
    0x840003c0    0x5c    sd a4,320(a5)
    0x840003c4    0x60    li a0,1
    0x840003c6    0x62    j ffffffff840003de <reserve_region+0x7a>
    0x840003c8    0x64    slli a4,a4,0x4
    0x840003ca    0x66    auipc a5,0x1
    0x840003ce    0x6a    addi a5,a5,342 # ffffffff84001520 <ndks_boot>
    0x840003d2    0x6e    add a4,a4,a5
    0x840003d4    0x70    sd a7,0(a4)
    0x840003d8    0x74    jal ra,ffffffff84000026 <merge_regions>
    0x840003dc    0x78    li a0,1
    0x840003de    0x7a    ld ra,24(sp)          ; stack access
    0x840003e0    0x7c    addi sp,sp,32
    0x840003e2    0x7e    ret
    0x840003e4    0x80    slli a4,a4,0x4
    0x840003e6    0x82    auipc a5,0x1
    0x840003ea    0x86    addi a5,a5,314 # ffffffff84001520 <ndks_boot>
    0x840003ee    0x8a    add a4,a4,a5
    0x840003f0    0x8c    sd a1,8(a4)
    0x840003f2    0x8e    jal ra,ffffffff84000026 <merge_regions>
    0x840003f6    0x92    li a0,1
    0x840003f8    0x94    j ffffffff840003de <reserve_region+0x7a>
    0x840003fa    0x96    addi a5,a6,1
    0x840003fe    0x9a    li a3,19
    0x84000400    0x9c    li a0,0
    0x84000402    0x9e    bltu a3,a5,ffffffff840003de <reserve_region+0x7a>
    0x84000406    0xa2    bgeu a4,a6,ffffffff84000432 <reserve_region+0xce>
    0x8400040a    0xa6    slli a6,a6,0x4
    0x8400040c    0xa8    auipc a5,0x1
    0x84000410    0xac    addi a5,a5,276 # ffffffff84001520 <ndks_boot>
    0x84000414    0xb0    add a6,a6,a5
    0x84000416    0xb2    slli a5,a4,0x4
    0x8400041a    0xb6    add t1,t1,a5
    0x8400041c    0xb8    ld a5,-16(a6)
    0x84000420    0xbc    sd a5,0(a6)
    0x84000424    0xc0    ld a5,-8(a6)
    0x84000428    0xc4    sd a5,8(a6)
    0x8400042c    0xc8    addi a6,a6,-16
    0x8400042e    0xca    bne a6,t1,ffffffff8400041c <reserve_region+0xb8>
    0x84000432    0xce    auipc a3,0x1
    0x84000436    0xd2    addi a3,a3,238 # ffffffff84001520 <ndks_boot>
    0x8400043a    0xd6    slli a5,a4,0x4
    0x8400043e    0xda    add a5,a5,a3
    0x84000440    0xdc    sd a7,0(a5)
    0x84000444    0xe0    sd a1,8(a5)
    0x84000446    0xe2    ld a5,320(a3)
    0x8400044a    0xe6    addi a5,a5,1
    0x8400044c    0xe8    sd a5,320(a3)
    0x84000450    0xec    li a0,1
    0x84000452    0xee    j ffffffff840003de <reserve_region+0x7a>
    0x84000454    0xf0    li a0,1
    0x84000456    0xf2    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
81 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 124 nodes.

Section create_mapped_it_frame_cap (166 of 267)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x8400026a     0x0    addi sp,sp,-80
    0x8400026c     0x2    sd ra,72(sp)          ; stack access
    0x8400026e     0x4    sd s0,64(sp)          ; stack access
    0x84000270     0x6    sd s1,56(sp)          ; stack access
    0x84000272     0x8    snez s0,a5
    0x84000276     0xc    slli s0,s0,0x39
    0x84000278     0xe    slli a3,a3,0x19
    0x8400027a    0x10    srli a3,a3,0x19
    0x8400027c    0x12    or s0,s0,a3
    0x8400027e    0x14    li a5,19
    0x84000280    0x16    slli a5,a5,0x37
    0x84000282    0x18    or s0,s0,a5
    0x84000284    0x1a    slli a2,a2,0x9
    0x84000286    0x1c    lui s1,0xfe000
    0x8400028a    0x20    srli s1,s1,0x10
    0x8400028c    0x22    and s1,s1,a2
    0x8400028e    0x24    slli a4,a4,0x30
    0x84000290    0x26    or s1,s1,a4
    0x84000292    0x28    mv a2,s0
    0x84000294    0x2a    mv a3,s1
    0x84000296    0x2c    jal ra,ffffffff840001fc <map_it_frame_cap>
    0x8400029a    0x30    mv a0,s0
    0x8400029c    0x32    mv a1,s1
    0x8400029e    0x34    ld ra,72(sp)          ; stack access
    0x840002a0    0x36    ld s0,64(sp)          ; stack access
    0x840002a2    0x38    ld s1,56(sp)          ; stack access
    0x840002a4    0x3a    addi sp,sp,80
    0x840002a6    0x3c    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section write_it_asid_pool (167 of 267)
=======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 21 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x8400015e     0x0    addi sp,sp,-64
    0x84000160     0x2    sd ra,56(sp)          ; stack access
    0x84000162     0x4    sd s0,48(sp)          ; stack access
    0x84000164     0x6    sd s1,40(sp)          ; stack access
    0x84000166     0x8    sd s2,32(sp)          ; stack access
    0x84000168     0xa    mv s2,a2
    0x8400016a     0xc    mv s1,a3
    0x8400016c     0xe    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000170    0x12    mv s0,a0
    0x84000172    0x14    mv a0,s2
    0x84000174    0x16    mv a1,s1
    0x84000176    0x18    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x8400017a    0x1c    sd a0,8(s0)
    0x8400017c    0x1e    auipc a5,0x1b
    0x84000180    0x22    sd s0,1708(a5) # ffffffff8401b828 <riscvKSASIDTable>
    0x84000184    0x26    ld ra,56(sp)          ; stack access
    0x84000186    0x28    ld s0,48(sp)          ; stack access
    0x84000188    0x2a    ld s1,40(sp)          ; stack access
    0x8400018a    0x2c    ld s2,32(sp)          ; stack access
    0x8400018c    0x2e    addi sp,sp,64
    0x8400018e    0x30    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 34 nodes.

Section map_kernel_frame (168 of 267)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `map_kernel_frame`:

    0x840000c4     0x0    addi sp,sp,-16
    0x840000c6     0x2    sd ra,8(sp)           ; stack access
    0x840000c8     0x4    sd s0,0(sp)           ; stack access
    0x840000ca     0x6    srli a1,a1,0x1e
    0x840000cc     0x8    andi a1,a1,511
    0x840000d0     0xc    slli a1,a1,0x3
    0x840000d2     0xe    auipc s0,0x1a
    0x840000d6    0x12    addi s0,s0,-210 # ffffffff8401a000 <kernel_root_pageTable>
    0x840000da    0x16    add s0,s0,a1
    0x840000dc    0x18    li a1,1
    0x840000de    0x1a    lui a5,0xc0000
    0x840000e2    0x1e    and a0,a0,a5
    0x840000e4    0x20    jal ra,ffffffff840100da <pte_next>
    0x840000e8    0x24    sd a0,0(s0)
    0x840000ea    0x26    ld ra,8(sp)           ; stack access
    0x840000ec    0x28    ld s0,0(sp)           ; stack access
    0x840000ee    0x2a    addi sp,sp,16
    0x840000f0    0x2c    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 25 nodes.

Section _start (169 of 267)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0x18
    0x84000008     0x8    addi gp,gp,-1880 # ffffffff840178ac <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x1d
    0x84000010    0x10    addi sp,sp,-996 # ffffffff8401cc28 <ksIdleThread>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff840012c2 <init_kernel>
    0x8400001c    0x1c    auipc ra,0x10
    0x84000020    0x20    addi ra,ra,652 # ffffffff840102a8 <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section performPageTableInvocationUnmap (170 of 267)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 44 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x840156ca     0x0    addi sp,sp,-48
    0x840156cc     0x2    sd ra,40(sp)          ; stack access
    0x840156ce     0x4    sd s0,32(sp)          ; stack access
    0x840156d0     0x6    sd s1,24(sp)          ; stack access
    0x840156d2     0x8    sd a1,8(sp)           ; stack access
    0x840156d4     0xa    mv s0,a2
    0x840156d6     0xc    slli a4,a0,0x18
    0x840156da    0x10    bgez a4,ffffffff84015722 <performPageTableInvocationUnmap+0x58>
    0x840156de    0x14    mv a5,a0
    0x840156e0    0x16    mv a4,a1
    0x840156e2    0x18    srli a3,a1,0x9
    0x840156e6    0x1c    slli a0,a3,0x19
    0x840156ea    0x20    srli a0,a0,0x19
    0x840156ec    0x22    slli a2,a3,0x19
    0x840156f0    0x26    bgez a2,ffffffff840156fa <performPageTableInvocationUnmap+0x30>
    0x840156f4    0x2a    li a3,-1
    0x840156f6    0x2c    slli a3,a3,0x27
    0x840156f8    0x2e    or a0,a0,a3
    0x840156fa    0x30    mv s1,a0
    0x840156fc    0x32    srli a0,a4,0x30
    0x84015700    0x36    slli a1,a5,0x19
    0x84015704    0x3a    srli a1,a1,0x19
    0x84015706    0x3c    slli a4,a5,0x19
    0x8401570a    0x40    bgez a4,ffffffff84015714 <performPageTableInvocationUnmap+0x4a>
    0x8401570e    0x44    li a5,-1
    0x84015710    0x46    slli a5,a5,0x27
    0x84015712    0x48    or a1,a1,a5
    0x84015714    0x4a    mv a2,s1
    0x84015716    0x4c    jal ra,ffffffff8401078e <unmapPageTable>
    0x8401571a    0x50    lui a1,0x1
    0x8401571c    0x52    mv a0,s1
    0x8401571e    0x54    jal ra,ffffffff840156b8 <memzero>
    0x84015722    0x58    ld a4,0(s0)
    0x84015724    0x5a    li a5,-1
    0x84015726    0x5c    slli a5,a5,0x27
    0x84015728    0x5e    addi a5,a5,-1
    0x8401572a    0x60    and a5,a5,a4
    0x8401572c    0x62    sd a5,0(s0)
    0x8401572e    0x64    li a0,0
    0x84015730    0x66    ld ra,40(sp)          ; stack access
    0x84015732    0x68    ld s0,32(sp)          ; stack access
    0x84015734    0x6a    ld s1,24(sp)          ; stack access
    0x84015736    0x6c    addi sp,sp,48
    0x84015738    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 62 nodes.

Section replyFromKernel_error (171 of 267)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x840155da     0x0    addi sp,sp,-16
    0x840155dc     0x2    sd ra,8(sp)           ; stack access
    0x840155de     0x4    sd s0,0(sp)           ; stack access
    0x840155e0     0x6    mv s0,a0
    0x840155e2     0x8    mv a1,a0
    0x840155e4     0xa    li a0,1
    0x840155e6     0xc    jal ra,ffffffff840104e4 <lookupIPCBuffer>
    0x840155ea    0x10    mv a1,a0
    0x840155ec    0x12    sd zero,72(s0)
    0x840155f0    0x16    mv a0,s0
    0x840155f2    0x18    jal ra,ffffffff840154e8 <setMRs_syscall_error>
    0x840155f6    0x1c    auipc a5,0x7
    0x840155fa    0x20    ld a5,1666(a5) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840155fe    0x24    slli a5,a5,0xc
    0x84015600    0x26    andi a0,a0,127
    0x84015604    0x2a    or a5,a5,a0
    0x84015606    0x2c    sd a5,80(s0)
    0x84015608    0x2e    ld ra,8(sp)           ; stack access
    0x8401560a    0x30    ld s0,0(sp)           ; stack access
    0x8401560c    0x32    addi sp,sp,16
    0x8401560e    0x34    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 31 nodes.

Section decodeUnbindNotification (172 of 267)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 30 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x84015326     0x0    addi sp,sp,-32
    0x84015328     0x2    sd ra,24(sp)          ; stack access
    0x8401532a     0x4    sd s0,16(sp)          ; stack access
    0x8401532c     0x6    sd a0,0(sp)           ; stack access
    0x8401532e     0x8    sd a1,8(sp)           ; stack access
    0x84015330     0xa    slli s0,a0,0x19
    0x84015334     0xe    srli s0,s0,0x19
    0x84015336    0x10    slli a5,a0,0x19
    0x8401533a    0x14    bgez a5,ffffffff84015344 <decodeUnbindNotification+0x1e>
    0x8401533e    0x18    li a5,-1
    0x84015340    0x1a    slli a5,a5,0x27
    0x84015342    0x1c    or s0,s0,a5
    0x84015344    0x1e    ld a5,304(s0)
    0x84015348    0x22    beqz a5,ffffffff84015368 <decodeUnbindNotification+0x42>
    0x8401534a    0x24    li a1,2
    0x8401534c    0x26    auipc a0,0x18
    0x84015350    0x2a    ld a0,1868(a0) # ffffffff8402da98 <ksCurThread>
    0x84015354    0x2e    jal ra,ffffffff840122d0 <setThreadState>
    0x84015358    0x32    li a1,0
    0x8401535a    0x34    mv a0,s0
    0x8401535c    0x36    jal ra,ffffffff8401523e <invokeTCB_NotificationControl>
    0x84015360    0x3a    ld ra,24(sp)          ; stack access
    0x84015362    0x3c    ld s0,16(sp)          ; stack access
    0x84015364    0x3e    addi sp,sp,32
    0x84015366    0x40    ret
    0x84015368    0x42    li a5,3
    0x8401536a    0x44    auipc a4,0x8
    0x8401536e    0x48    sd a5,-1778(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015372    0x4c    li a0,3
    0x84015374    0x4e    j ffffffff84015360 <decodeUnbindNotification+0x3a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 46 nodes.

Section decodeBindNotification (173 of 267)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 77 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeBindNotification`:

    0x84015256     0x0    addi sp,sp,-48
    0x84015258     0x2    sd ra,40(sp)          ; stack access
    0x8401525a     0x4    sd s0,32(sp)          ; stack access
    0x8401525c     0x6    sd s1,24(sp)          ; stack access
    0x8401525e     0x8    sd a0,0(sp)           ; stack access
    0x84015260     0xa    sd a1,8(sp)           ; stack access
    0x84015262     0xc    auipc a3,0x8
    0x84015266    0x10    ld a3,-1506(a3) # ffffffff8401cc80 <current_extra_caps>
    0x8401526a    0x14    beqz a3,ffffffff840152c8 <decodeBindNotification+0x72>
    0x8401526c    0x16    ld a4,0(sp)           ; stack access
    0x8401526e    0x18    slli a5,a4,0x19
    0x84015272    0x1c    srli a5,a5,0x19
    0x84015274    0x1e    slli a2,a4,0x19
    0x84015278    0x22    bgez a2,ffffffff84015282 <decodeBindNotification+0x2c>
    0x8401527c    0x26    li a4,-1
    0x8401527e    0x28    slli a4,a4,0x27
    0x84015280    0x2a    or a5,a5,a4
    0x84015282    0x2c    mv s0,a5
    0x84015284    0x2e    ld a5,304(a5)
    0x84015288    0x32    bnez a5,ffffffff840152d6 <decodeBindNotification+0x80>
    0x8401528a    0x34    ld a4,0(a3)
    0x8401528c    0x36    srli a3,a4,0x3b
    0x84015290    0x3a    li a5,6
    0x84015292    0x3c    bne a3,a5,ffffffff840152ec <decodeBindNotification+0x96>
    0x84015296    0x40    slli a5,a4,0x19
    0x8401529a    0x44    srli a5,a5,0x19
    0x8401529c    0x46    slli a3,a4,0x19
    0x840152a0    0x4a    bgez a3,ffffffff840152aa <decodeBindNotification+0x54>
    0x840152a4    0x4e    li a3,-1
    0x840152a6    0x50    slli a3,a3,0x27
    0x840152a8    0x52    or a5,a5,a3
    0x840152aa    0x54    mv s1,a5
    0x840152ac    0x56    slli a3,a4,0x5
    0x840152b0    0x5a    bgez a3,ffffffff840152fa <decodeBindNotification+0xa4>
    0x840152b4    0x5e    ld a5,8(a5)
    0x840152b6    0x60    slli a5,a5,0x19
    0x840152b8    0x62    beqz a5,ffffffff84015308 <decodeBindNotification+0xb2>
    0x840152ba    0x64    li a5,3
    0x840152bc    0x66    auipc a4,0x8
    0x840152c0    0x6a    sd a5,-1604(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840152c4    0x6e    li a0,3
    0x840152c6    0x70    j ffffffff840152e2 <decodeBindNotification+0x8c>
    0x840152c8    0x72    li a5,7
    0x840152ca    0x74    auipc a4,0x8
    0x840152ce    0x78    sd a5,-1618(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840152d2    0x7c    li a0,3
    0x840152d4    0x7e    j ffffffff840152e2 <decodeBindNotification+0x8c>
    0x840152d6    0x80    li a5,3
    0x840152d8    0x82    auipc a4,0x8
    0x840152dc    0x86    sd a5,-1632(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840152e0    0x8a    li a0,3
    0x840152e2    0x8c    ld ra,40(sp)          ; stack access
    0x840152e4    0x8e    ld s0,32(sp)          ; stack access
    0x840152e6    0x90    ld s1,24(sp)          ; stack access
    0x840152e8    0x92    addi sp,sp,48
    0x840152ea    0x94    ret
    0x840152ec    0x96    li a5,3
    0x840152ee    0x98    auipc a4,0x8
    0x840152f2    0x9c    sd a5,-1654(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840152f6    0xa0    li a0,3
    0x840152f8    0xa2    j ffffffff840152e2 <decodeBindNotification+0x8c>
    0x840152fa    0xa4    li a5,3
    0x840152fc    0xa6    auipc a4,0x8
    0x84015300    0xaa    sd a5,-1668(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015304    0xae    li a0,3
    0x84015306    0xb0    j ffffffff840152e2 <decodeBindNotification+0x8c>
    0x84015308    0xb2    ld a5,24(s1)
    0x8401530a    0xb4    slli a5,a5,0x19
    0x8401530c    0xb6    bnez a5,ffffffff840152ba <decodeBindNotification+0x64>
    0x8401530e    0xb8    li a1,2
    0x84015310    0xba    auipc a0,0x18
    0x84015314    0xbe    ld a0,1928(a0) # ffffffff8402da98 <ksCurThread>
    0x84015318    0xc2    jal ra,ffffffff840122d0 <setThreadState>
    0x8401531c    0xc6    mv a1,s1
    0x8401531e    0xc8    mv a0,s0
    0x84015320    0xca    jal ra,ffffffff8401523e <invokeTCB_NotificationControl>
    0x84015324    0xce    j ffffffff840152e2 <decodeBindNotification+0x8c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 116 nodes.

Section invokeTCB_NotificationControl (174 of 267)
==================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_NotificationControl`:

    0x8401523e     0x0    addi sp,sp,-16
    0x84015240     0x2    sd ra,8(sp)           ; stack access
    0x84015242     0x4    beqz a1,ffffffff84015250 <invokeTCB_NotificationControl+0x12>
    0x84015244     0x6    jal ra,ffffffff84011946 <bindNotification>
    0x84015248     0xa    li a0,0
    0x8401524a     0xc    ld ra,8(sp)           ; stack access
    0x8401524c     0xe    addi sp,sp,16
    0x8401524e    0x10    ret
    0x84015250    0x12    jal ra,ffffffff84011932 <unbindNotification>
    0x84015254    0x16    j ffffffff84015248 <invokeTCB_NotificationControl+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 17 nodes.

Section decodeWriteRegisters (175 of 267)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 56 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x840151a8     0x0    addi sp,sp,-64
    0x840151aa     0x2    sd ra,56(sp)          ; stack access
    0x840151ac     0x4    sd s0,48(sp)          ; stack access
    0x840151ae     0x6    sd s1,40(sp)          ; stack access
    0x840151b0     0x8    sd s2,32(sp)          ; stack access
    0x840151b2     0xa    sd s3,24(sp)          ; stack access
    0x840151b4     0xc    sd a0,0(sp)           ; stack access
    0x840151b6     0xe    sd a1,8(sp)           ; stack access
    0x840151b8    0x10    li a5,1
    0x840151ba    0x12    bgeu a5,a2,ffffffff84015214 <decodeWriteRegisters+0x6c>
    0x840151be    0x16    mv s1,a3
    0x840151c0    0x18    auipc a0,0x19
    0x840151c4    0x1c    ld a0,-1832(a0) # ffffffff8402da98 <ksCurThread>
    0x840151c8    0x20    ld s2,96(a0)
    0x840151cc    0x24    addi a2,a2,-2
    0x840151ce    0x26    bltu a2,s2,ffffffff84015222 <decodeWriteRegisters+0x7a>
    0x840151d2    0x2a    ld a5,0(sp)           ; stack access
    0x840151d4    0x2c    slli s0,a5,0x19
    0x840151d8    0x30    srli s0,s0,0x19
    0x840151da    0x32    slli a4,a5,0x19
    0x840151de    0x36    bgez a4,ffffffff840151e8 <decodeWriteRegisters+0x40>
    0x840151e2    0x3a    li a5,-1
    0x840151e4    0x3c    slli a5,a5,0x27
    0x840151e6    0x3e    or s0,s0,a5
    0x840151e8    0x40    beq a0,s0,ffffffff84015230 <decodeWriteRegisters+0x88>
    0x840151ec    0x44    ld s3,88(a0)
    0x840151f0    0x48    li a1,2
    0x840151f2    0x4a    jal ra,ffffffff840122d0 <setThreadState>
    0x840151f6    0x4e    mv a4,s1
    0x840151f8    0x50    li a3,0
    0x840151fa    0x52    mv a2,s2
    0x840151fc    0x54    andi a1,s3,1
    0x84015200    0x58    mv a0,s0
    0x84015202    0x5a    jal ra,ffffffff840150c2 <invokeTCB_WriteRegisters>
    0x84015206    0x5e    ld ra,56(sp)          ; stack access
    0x84015208    0x60    ld s0,48(sp)          ; stack access
    0x8401520a    0x62    ld s1,40(sp)          ; stack access
    0x8401520c    0x64    ld s2,32(sp)          ; stack access
    0x8401520e    0x66    ld s3,24(sp)          ; stack access
    0x84015210    0x68    addi sp,sp,64
    0x84015212    0x6a    ret
    0x84015214    0x6c    li a5,7
    0x84015216    0x6e    auipc a4,0x8
    0x8401521a    0x72    sd a5,-1438(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401521e    0x76    li a0,3
    0x84015220    0x78    j ffffffff84015206 <decodeWriteRegisters+0x5e>
    0x84015222    0x7a    li a5,7
    0x84015224    0x7c    auipc a4,0x8
    0x84015228    0x80    sd a5,-1452(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401522c    0x84    li a0,3
    0x8401522e    0x86    j ffffffff84015206 <decodeWriteRegisters+0x5e>
    0x84015230    0x88    li a5,3
    0x84015232    0x8a    auipc a4,0x8
    0x84015236    0x8e    sd a5,-1466(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401523a    0x92    li a0,3
    0x8401523c    0x94    j ffffffff84015206 <decodeWriteRegisters+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 86 nodes.

Section invokeTCB_WriteRegisters (176 of 267)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 79 instructions.

RVC_TFFTFFT__T____TF.
RVC_TFFTT____FFT__TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x840150c2     0x0    addi sp,sp,-16
    0x840150c4     0x2    sd ra,8(sp)           ; stack access
    0x840150c6     0x4    sd s0,0(sp)           ; stack access
    0x840150c8     0x6    mv s0,a0
    0x840150ca     0x8    mv a7,a2
    0x840150cc     0xa    li a5,32
    0x840150d0     0xe    bgeu a5,a2,ffffffff840150d8 <invokeTCB_WriteRegisters+0x16>
    0x840150d4    0x12    li a7,32
    0x840150d8    0x16    beqz a2,ffffffff8401517a <invokeTCB_WriteRegisters+0xb8>
    0x840150da    0x18    auipc a0,0x2
    0x840150de    0x1c    addi a0,a0,1102 # ffffffff84017528 <frameRegisters>
    0x840150e2    0x20    li a5,2
    0x840150e4    0x22    li t3,3
    0x840150e6    0x24    li t4,17
    0x840150e8    0x26    auipc t6,0x19
    0x840150ec    0x2a    addi t6,t6,-1616 # ffffffff8402da98 <ksCurThread>
    0x840150f0    0x2e    auipc t5,0x2
    0x840150f4    0x32    addi t5,t5,1000 # ffffffff840174d8 <msgRegisters>
    0x840150f8    0x36    j ffffffff84015126 <invokeTCB_WriteRegisters+0x64>
    0x840150fa    0x38    ld a6,0(t6)
    0x840150fe    0x3c    slli t1,a5,0x3
    0x84015102    0x40    add t1,t1,t5
    0x84015104    0x42    ld t1,0(t1)
    0x84015108    0x46    slli t1,t1,0x3
    0x8401510a    0x48    add a6,a6,t1
    0x8401510c    0x4a    ld a6,0(a6)
    0x84015110    0x4e    slli a3,a3,0x3
    0x84015112    0x50    add a3,a3,s0
    0x84015114    0x52    sd a6,0(a3)
    0x84015118    0x56    addi a0,a0,8
    0x8401511a    0x58    addi a3,a5,1
    0x8401511e    0x5c    addi a5,a5,-1
    0x84015120    0x5e    bgeu a5,a7,ffffffff84015142 <invokeTCB_WriteRegisters+0x80>
    0x84015124    0x62    mv a5,a3
    0x84015126    0x64    ld a3,0(a0)
    0x84015128    0x66    bgeu t3,a5,ffffffff840150fa <invokeTCB_WriteRegisters+0x38>
    0x8401512c    0x6a    slli a6,a5,0x3
    0x84015130    0x6e    add a6,a6,a4
    0x84015132    0x70    ld a6,8(a6)
    0x84015136    0x74    slli a3,a3,0x3
    0x84015138    0x76    add a3,a3,s0
    0x8401513a    0x78    sd a6,0(a3)
    0x8401513e    0x7c    bne a5,t4,ffffffff84015118 <invokeTCB_WriteRegisters+0x56>
    0x84015142    0x80    li a5,16
    0x84015144    0x82    bgeu a5,a2,ffffffff8401517a <invokeTCB_WriteRegisters+0xb8>
    0x84015148    0x86    addi a4,a4,152
    0x8401514c    0x8a    auipc a3,0x2
    0x84015150    0x8e    addi a3,a3,1124 # ffffffff840175b0 <gpRegisters+0x8>
    0x84015154    0x92    auipc a6,0x2
    0x84015158    0x96    addi a6,a6,1236 # ffffffff84017628 <gpRegisters+0x80>
    0x8401515c    0x9a    li a2,17
    0x8401515e    0x9c    li a5,9
    0x84015160    0x9e    j ffffffff84015168 <invokeTCB_WriteRegisters+0xa6>
    0x84015162    0xa0    ld a5,0(a3)
    0x84015164    0xa2    addi a3,a3,8
    0x84015166    0xa4    addi a2,a2,1
    0x84015168    0xa6    ld a0,0(a4)
    0x8401516a    0xa8    slli a5,a5,0x3
    0x8401516c    0xaa    add a5,a5,s0
    0x8401516e    0xac    sd a0,0(a5)
    0x84015170    0xae    beq a3,a6,ffffffff8401517a <invokeTCB_WriteRegisters+0xb8>
    0x84015174    0xb2    addi a4,a4,8
    0x84015176    0xb4    bltu a2,a7,ffffffff84015162 <invokeTCB_WriteRegisters+0xa0>
    0x8401517a    0xb8    ld a5,264(s0)
    0x8401517e    0xbc    sd a5,272(s0)
    0x84015182    0xc0    bnez a1,ffffffff8401519a <invokeTCB_WriteRegisters+0xd8>
    0x84015184    0xc2    auipc a5,0x19
    0x84015188    0xc6    ld a5,-1772(a5) # ffffffff8402da98 <ksCurThread>
    0x8401518c    0xca    beq a5,s0,ffffffff840151a2 <invokeTCB_WriteRegisters+0xe0>
    0x84015190    0xce    li a0,0
    0x84015192    0xd0    ld ra,8(sp)           ; stack access
    0x84015194    0xd2    ld s0,0(sp)           ; stack access
    0x84015196    0xd4    addi sp,sp,16
    0x84015198    0xd6    ret
    0x8401519a    0xd8    mv a0,s0
    0x8401519c    0xda    jal ra,ffffffff840137bc <restart>
    0x840151a0    0xde    j ffffffff84015184 <invokeTCB_WriteRegisters+0xc2>
    0x840151a2    0xe0    jal ra,ffffffff8401226a <rescheduleRequired>
    0x840151a6    0xe4    j ffffffff84015190 <invokeTCB_WriteRegisters+0xce>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 119 nodes.

Section decodeReadRegisters (177 of 267)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 62 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x8401501e     0x0    addi sp,sp,-64
    0x84015020     0x2    sd ra,56(sp)          ; stack access
    0x84015022     0x4    sd s0,48(sp)          ; stack access
    0x84015024     0x6    sd s1,40(sp)          ; stack access
    0x84015026     0x8    sd s2,32(sp)          ; stack access
    0x84015028     0xa    sd s3,24(sp)          ; stack access
    0x8401502a     0xc    sd a0,0(sp)           ; stack access
    0x8401502c     0xe    sd a1,8(sp)           ; stack access
    0x8401502e    0x10    li a5,1
    0x84015030    0x12    bgeu a5,a2,ffffffff8401508c <decodeReadRegisters+0x6e>
    0x84015034    0x16    mv s2,a3
    0x84015036    0x18    auipc a0,0x19
    0x8401503a    0x1c    ld a0,-1438(a0) # ffffffff8402da98 <ksCurThread>
    0x8401503e    0x20    ld s1,96(a0)
    0x84015040    0x22    addi a4,s1,-1
    0x84015044    0x26    li a5,31
    0x84015046    0x28    bltu a5,a4,ffffffff8401509a <decodeReadRegisters+0x7c>
    0x8401504a    0x2c    ld a5,0(sp)           ; stack access
    0x8401504c    0x2e    slli s0,a5,0x19
    0x84015050    0x32    srli s0,s0,0x19
    0x84015052    0x34    slli a4,a5,0x19
    0x84015056    0x38    bgez a4,ffffffff84015060 <decodeReadRegisters+0x42>
    0x8401505a    0x3c    li a5,-1
    0x8401505c    0x3e    slli a5,a5,0x27
    0x8401505e    0x40    or s0,s0,a5
    0x84015060    0x42    beq a0,s0,ffffffff840150b4 <decodeReadRegisters+0x96>
    0x84015064    0x46    ld s3,88(a0)
    0x84015068    0x4a    li a1,2
    0x8401506a    0x4c    jal ra,ffffffff840122d0 <setThreadState>
    0x8401506e    0x50    mv a4,s2
    0x84015070    0x52    li a3,0
    0x84015072    0x54    mv a2,s1
    0x84015074    0x56    andi a1,s3,1
    0x84015078    0x5a    mv a0,s0
    0x8401507a    0x5c    jal ra,ffffffff84014f0c <invokeTCB_ReadRegisters>
    0x8401507e    0x60    ld ra,56(sp)          ; stack access
    0x84015080    0x62    ld s0,48(sp)          ; stack access
    0x84015082    0x64    ld s1,40(sp)          ; stack access
    0x84015084    0x66    ld s2,32(sp)          ; stack access
    0x84015086    0x68    ld s3,24(sp)          ; stack access
    0x84015088    0x6a    addi sp,sp,64
    0x8401508a    0x6c    ret
    0x8401508c    0x6e    li a5,7
    0x8401508e    0x70    auipc a4,0x8
    0x84015092    0x74    sd a5,-1046(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015096    0x78    li a0,3
    0x84015098    0x7a    j ffffffff8401507e <decodeReadRegisters+0x60>
    0x8401509a    0x7c    auipc a5,0x8
    0x8401509e    0x80    addi a5,a5,-1106 # ffffffff8401cc48 <current_syscall_error>
    0x840150a2    0x84    li a4,4
    0x840150a4    0x86    sd a4,48(a5)
    0x840150a6    0x88    li a4,1
    0x840150a8    0x8a    sd a4,16(a5)
    0x840150aa    0x8c    li a4,32
    0x840150ae    0x90    sd a4,24(a5)
    0x840150b0    0x92    li a0,3
    0x840150b2    0x94    j ffffffff8401507e <decodeReadRegisters+0x60>
    0x840150b4    0x96    li a5,3
    0x840150b6    0x98    auipc a4,0x8
    0x840150ba    0x9c    sd a5,-1086(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840150be    0xa0    li a0,3
    0x840150c0    0xa2    j ffffffff8401507e <decodeReadRegisters+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 94 nodes.

Section decodeCopyRegisters (178 of 267)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 60 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x84014e68     0x0    addi sp,sp,-48
    0x84014e6a     0x2    sd ra,40(sp)          ; stack access
    0x84014e6c     0x4    sd s0,32(sp)          ; stack access
    0x84014e6e     0x6    sd s1,24(sp)          ; stack access
    0x84014e70     0x8    sd a0,0(sp)           ; stack access
    0x84014e72     0xa    sd a1,8(sp)           ; stack access
    0x84014e74     0xc    beqz a2,ffffffff84014eea <decodeCopyRegisters+0x82>
    0x84014e76     0xe    auipc a5,0x8
    0x84014e7a    0x12    ld a5,-502(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84014e7e    0x16    beqz a5,ffffffff84014eea <decodeCopyRegisters+0x82>
    0x84014e80    0x18    ld a5,0(a5)
    0x84014e82    0x1a    srli a3,a5,0x3b
    0x84014e86    0x1e    li a4,12
    0x84014e88    0x20    bne a3,a4,ffffffff84014ef8 <decodeCopyRegisters+0x90>
    0x84014e8c    0x24    slli a1,a5,0x19
    0x84014e90    0x28    srli a1,a1,0x19
    0x84014e92    0x2a    slli a4,a5,0x19
    0x84014e96    0x2e    bgez a4,ffffffff84014ea0 <decodeCopyRegisters+0x38>
    0x84014e9a    0x32    li a5,-1
    0x84014e9c    0x34    slli a5,a5,0x27
    0x84014e9e    0x36    or a1,a1,a5
    0x84014ea0    0x38    auipc a0,0x19
    0x84014ea4    0x3c    ld a0,-1032(a0) # ffffffff8402da98 <ksCurThread>
    0x84014ea8    0x40    ld s1,88(a0)
    0x84014eaa    0x42    mv s0,a1
    0x84014eac    0x44    li a1,2
    0x84014eae    0x46    jal ra,ffffffff840122d0 <setThreadState>
    0x84014eb2    0x4a    ld a5,0(sp)           ; stack access
    0x84014eb4    0x4c    slli a0,a5,0x19
    0x84014eb8    0x50    srli a0,a0,0x19
    0x84014eba    0x52    slli a4,a5,0x19
    0x84014ebe    0x56    bgez a4,ffffffff84014ec8 <decodeCopyRegisters+0x60>
    0x84014ec2    0x5a    li a5,-1
    0x84014ec4    0x5c    slli a5,a5,0x27
    0x84014ec6    0x5e    or a0,a0,a5
    0x84014ec8    0x60    li a6,0
    0x84014eca    0x62    andi a5,s1,8
    0x84014ece    0x66    andi a4,s1,4
    0x84014ed2    0x6a    andi a3,s1,2
    0x84014ed6    0x6e    andi a2,s1,1
    0x84014eda    0x72    mv a1,s0
    0x84014edc    0x74    jal ra,ffffffff84014dbe <invokeTCB_CopyRegisters>
    0x84014ee0    0x78    ld ra,40(sp)          ; stack access
    0x84014ee2    0x7a    ld s0,32(sp)          ; stack access
    0x84014ee4    0x7c    ld s1,24(sp)          ; stack access
    0x84014ee6    0x7e    addi sp,sp,48
    0x84014ee8    0x80    ret
    0x84014eea    0x82    li a5,7
    0x84014eec    0x84    auipc a4,0x8
    0x84014ef0    0x88    sd a5,-628(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014ef4    0x8c    li a0,3
    0x84014ef6    0x8e    j ffffffff84014ee0 <decodeCopyRegisters+0x78>
    0x84014ef8    0x90    auipc a5,0x8
    0x84014efc    0x94    addi a5,a5,-688 # ffffffff8401cc48 <current_syscall_error>
    0x84014f00    0x98    li a4,2
    0x84014f02    0x9a    sd a4,48(a5)
    0x84014f04    0x9c    li a4,1
    0x84014f06    0x9e    sd a4,8(a5)
    0x84014f08    0xa0    li a0,3
    0x84014f0a    0xa2    j ffffffff84014ee0 <decodeCopyRegisters+0x78>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
60 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 89 nodes.

Section decodeSetSchedParams (179 of 267)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 90 instructions.

RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x84014a94     0x0    addi sp,sp,-128
    0x84014a96     0x2    sd ra,120(sp)         ; stack access
    0x84014a98     0x4    sd s0,112(sp)         ; stack access
    0x84014a9a     0x6    sd s1,104(sp)         ; stack access
    0x84014a9c     0x8    sd a0,64(sp)          ; stack access
    0x84014a9e     0xa    sd a1,72(sp)          ; stack access
    0x84014aa0     0xc    li a5,1
    0x84014aa2     0xe    bgeu a5,a2,ffffffff84014b2a <decodeSetSchedParams+0x96>
    0x84014aa6    0x12    auipc a5,0x8
    0x84014aaa    0x16    ld a5,474(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84014aae    0x1a    beqz a5,ffffffff84014b2a <decodeSetSchedParams+0x96>
    0x84014ab0    0x1c    ld a4,0(a5)
    0x84014ab2    0x1e    srli a3,a4,0x3b
    0x84014ab6    0x22    li a5,12
    0x84014ab8    0x24    bne a3,a5,ffffffff84014b38 <decodeSetSchedParams+0xa4>
    0x84014abc    0x28    slli a5,a4,0x19
    0x84014ac0    0x2c    srli a5,a5,0x19
    0x84014ac2    0x2e    slli a3,a4,0x19
    0x84014ac6    0x32    bgez a3,ffffffff84014ad0 <decodeSetSchedParams+0x3c>
    0x84014aca    0x36    li a4,-1
    0x84014acc    0x38    slli a4,a4,0x27
    0x84014ace    0x3a    or a5,a5,a4
    0x84014ad0    0x3c    auipc a0,0x19
    0x84014ad4    0x40    ld a0,-56(a0) # ffffffff8402da98 <ksCurThread>
    0x84014ad8    0x44    ld s0,88(a0)
    0x84014ada    0x46    ld a5,352(a5)
    0x84014ade    0x4a    bltu a5,s0,ffffffff84014b54 <decodeSetSchedParams+0xc0>
    0x84014ae2    0x4e    ld s1,96(a0)
    0x84014ae4    0x50    bltu a5,s1,ffffffff84014b6a <decodeSetSchedParams+0xd6>
    0x84014ae8    0x54    li a1,2
    0x84014aea    0x56    jal ra,ffffffff840122d0 <setThreadState>
    0x84014aee    0x5a    ld a5,64(sp)          ; stack access
    0x84014af0    0x5c    slli a0,a5,0x19
    0x84014af4    0x60    srli a0,a0,0x19
    0x84014af6    0x62    slli a4,a5,0x19
    0x84014afa    0x66    bgez a4,ffffffff84014b04 <decodeSetSchedParams+0x70>
    0x84014afe    0x6a    li a5,-1
    0x84014b00    0x6c    slli a5,a5,0x27
    0x84014b02    0x6e    or a0,a0,a5
    0x84014b04    0x70    li a5,9
    0x84014b06    0x72    sd a5,56(sp)          ; stack access
    0x84014b08    0x74    sd zero,48(sp)        ; stack access
    0x84014b0a    0x76    sd zero,32(sp)        ; stack access
    0x84014b0c    0x78    sd zero,40(sp)        ; stack access
    0x84014b0e    0x7a    sd zero,24(sp)        ; stack access
    0x84014b10    0x7c    sd zero,16(sp)        ; stack access
    0x84014b12    0x7e    sd zero,0(sp)         ; stack access
    0x84014b14    0x80    sd zero,8(sp)         ; stack access
    0x84014b16    0x82    li a7,0
    0x84014b18    0x84    li a5,0
    0x84014b1a    0x86    li a6,0
    0x84014b1c    0x88    mv a4,s1
    0x84014b1e    0x8a    mv a3,s0
    0x84014b20    0x8c    li a2,0
    0x84014b22    0x8e    li a1,0
    0x84014b24    0x90    jal ra,ffffffff840145d2 <invokeTCB_ThreadControl>
    0x84014b28    0x94    j ffffffff84014b4a <decodeSetSchedParams+0xb6>
    0x84014b2a    0x96    li a5,7
    0x84014b2c    0x98    auipc a4,0x8
    0x84014b30    0x9c    sd a5,332(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014b34    0xa0    li a0,3
    0x84014b36    0xa2    j ffffffff84014b4a <decodeSetSchedParams+0xb6>
    0x84014b38    0xa4    auipc a5,0x8
    0x84014b3c    0xa8    addi a5,a5,272 # ffffffff8401cc48 <current_syscall_error>
    0x84014b40    0xac    li a4,2
    0x84014b42    0xae    sd a4,48(a5)
    0x84014b44    0xb0    li a4,1
    0x84014b46    0xb2    sd a4,8(a5)
    0x84014b48    0xb4    li a0,3
    0x84014b4a    0xb6    ld ra,120(sp)         ; stack access
    0x84014b4c    0xb8    ld s0,112(sp)         ; stack access
    0x84014b4e    0xba    ld s1,104(sp)         ; stack access
    0x84014b50    0xbc    addi sp,sp,128
    0x84014b52    0xbe    ret
    0x84014b54    0xc0    auipc a4,0x8
    0x84014b58    0xc4    addi a4,a4,244 # ffffffff8401cc48 <current_syscall_error>
    0x84014b5c    0xc8    li a3,4
    0x84014b5e    0xca    sd a3,48(a4)
    0x84014b60    0xcc    sd zero,16(a4)
    0x84014b64    0xd0    sd a5,24(a4)
    0x84014b66    0xd2    li a0,3
    0x84014b68    0xd4    j ffffffff84014b4a <decodeSetSchedParams+0xb6>
    0x84014b6a    0xd6    auipc a4,0x8
    0x84014b6e    0xda    addi a4,a4,222 # ffffffff8401cc48 <current_syscall_error>
    0x84014b72    0xde    li a3,4
    0x84014b74    0xe0    sd a3,48(a4)
    0x84014b76    0xe2    sd zero,16(a4)
    0x84014b7a    0xe6    sd a5,24(a4)
    0x84014b7c    0xe8    li a0,3
    0x84014b7e    0xea    j ffffffff84014b4a <decodeSetSchedParams+0xb6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
90 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 139 nodes.

Section decodeSetMCPriority (180 of 267)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 77 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x840149cc     0x0    addi sp,sp,-112
    0x840149ce     0x2    sd ra,104(sp)         ; stack access
    0x840149d0     0x4    sd s0,96(sp)          ; stack access
    0x840149d2     0x6    sd a0,64(sp)          ; stack access
    0x840149d4     0x8    sd a1,72(sp)          ; stack access
    0x840149d6     0xa    beqz a2,ffffffff84014a56 <decodeSetMCPriority+0x8a>
    0x840149d8     0xc    auipc a5,0x8
    0x840149dc    0x10    ld a5,680(a5) # ffffffff8401cc80 <current_extra_caps>
    0x840149e0    0x14    beqz a5,ffffffff84014a56 <decodeSetMCPriority+0x8a>
    0x840149e2    0x16    ld a4,0(a5)
    0x840149e4    0x18    srli a3,a4,0x3b
    0x840149e8    0x1c    li a5,12
    0x840149ea    0x1e    bne a3,a5,ffffffff84014a6a <decodeSetMCPriority+0x9e>
    0x840149ee    0x22    slli a5,a4,0x19
    0x840149f2    0x26    srli a5,a5,0x19
    0x840149f4    0x28    slli a3,a4,0x19
    0x840149f8    0x2c    bgez a3,ffffffff84014a02 <decodeSetMCPriority+0x36>
    0x840149fc    0x30    li a4,-1
    0x840149fe    0x32    slli a4,a4,0x27
    0x84014a00    0x34    or a5,a5,a4
    0x84014a02    0x36    auipc a0,0x19
    0x84014a06    0x3a    ld a0,150(a0) # ffffffff8402da98 <ksCurThread>
    0x84014a0a    0x3e    ld s0,88(a0)
    0x84014a0c    0x40    ld a5,352(a5)
    0x84014a10    0x44    bltu a5,s0,ffffffff84014a7e <decodeSetMCPriority+0xb2>
    0x84014a14    0x48    li a1,2
    0x84014a16    0x4a    jal ra,ffffffff840122d0 <setThreadState>
    0x84014a1a    0x4e    ld a5,64(sp)          ; stack access
    0x84014a1c    0x50    slli a0,a5,0x19
    0x84014a20    0x54    srli a0,a0,0x19
    0x84014a22    0x56    slli a4,a5,0x19
    0x84014a26    0x5a    bgez a4,ffffffff84014a30 <decodeSetMCPriority+0x64>
    0x84014a2a    0x5e    li a5,-1
    0x84014a2c    0x60    slli a5,a5,0x27
    0x84014a2e    0x62    or a0,a0,a5
    0x84014a30    0x64    li a5,8
    0x84014a32    0x66    sd a5,56(sp)          ; stack access
    0x84014a34    0x68    sd zero,48(sp)        ; stack access
    0x84014a36    0x6a    sd zero,32(sp)        ; stack access
    0x84014a38    0x6c    sd zero,40(sp)        ; stack access
    0x84014a3a    0x6e    sd zero,24(sp)        ; stack access
    0x84014a3c    0x70    sd zero,16(sp)        ; stack access
    0x84014a3e    0x72    sd zero,0(sp)         ; stack access
    0x84014a40    0x74    sd zero,8(sp)         ; stack access
    0x84014a42    0x76    li a7,0
    0x84014a44    0x78    li a5,0
    0x84014a46    0x7a    li a6,0
    0x84014a48    0x7c    li a4,0
    0x84014a4a    0x7e    mv a3,s0
    0x84014a4c    0x80    li a2,0
    0x84014a4e    0x82    li a1,0
    0x84014a50    0x84    jal ra,ffffffff840145d2 <invokeTCB_ThreadControl>
    0x84014a54    0x88    j ffffffff84014a62 <decodeSetMCPriority+0x96>
    0x84014a56    0x8a    li a5,7
    0x84014a58    0x8c    auipc a4,0x8
    0x84014a5c    0x90    sd a5,544(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014a60    0x94    li a0,3
    0x84014a62    0x96    ld ra,104(sp)         ; stack access
    0x84014a64    0x98    ld s0,96(sp)          ; stack access
    0x84014a66    0x9a    addi sp,sp,112
    0x84014a68    0x9c    ret
    0x84014a6a    0x9e    auipc a5,0x8
    0x84014a6e    0xa2    addi a5,a5,478 # ffffffff8401cc48 <current_syscall_error>
    0x84014a72    0xa6    li a4,2
    0x84014a74    0xa8    sd a4,48(a5)
    0x84014a76    0xaa    li a4,1
    0x84014a78    0xac    sd a4,8(a5)
    0x84014a7a    0xae    li a0,3
    0x84014a7c    0xb0    j ffffffff84014a62 <decodeSetMCPriority+0x96>
    0x84014a7e    0xb2    auipc a4,0x8
    0x84014a82    0xb6    addi a4,a4,458 # ffffffff8401cc48 <current_syscall_error>
    0x84014a86    0xba    li a3,4
    0x84014a88    0xbc    sd a3,48(a4)
    0x84014a8a    0xbe    sd zero,16(a4)
    0x84014a8e    0xc2    sd a5,24(a4)
    0x84014a90    0xc4    li a0,3
    0x84014a92    0xc6    j ffffffff84014a62 <decodeSetMCPriority+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 118 nodes.

Section decodeSetPriority (181 of 267)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 77 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeSetPriority`:

    0x84014904     0x0    addi sp,sp,-112
    0x84014906     0x2    sd ra,104(sp)         ; stack access
    0x84014908     0x4    sd s0,96(sp)          ; stack access
    0x8401490a     0x6    sd a0,64(sp)          ; stack access
    0x8401490c     0x8    sd a1,72(sp)          ; stack access
    0x8401490e     0xa    beqz a2,ffffffff8401498e <decodeSetPriority+0x8a>
    0x84014910     0xc    auipc a5,0x8
    0x84014914    0x10    ld a5,880(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84014918    0x14    beqz a5,ffffffff8401498e <decodeSetPriority+0x8a>
    0x8401491a    0x16    ld a4,0(a5)
    0x8401491c    0x18    srli a3,a4,0x3b
    0x84014920    0x1c    li a5,12
    0x84014922    0x1e    bne a3,a5,ffffffff840149a2 <decodeSetPriority+0x9e>
    0x84014926    0x22    slli a5,a4,0x19
    0x8401492a    0x26    srli a5,a5,0x19
    0x8401492c    0x28    slli a3,a4,0x19
    0x84014930    0x2c    bgez a3,ffffffff8401493a <decodeSetPriority+0x36>
    0x84014934    0x30    li a4,-1
    0x84014936    0x32    slli a4,a4,0x27
    0x84014938    0x34    or a5,a5,a4
    0x8401493a    0x36    auipc a0,0x19
    0x8401493e    0x3a    ld a0,350(a0) # ffffffff8402da98 <ksCurThread>
    0x84014942    0x3e    ld s0,88(a0)
    0x84014944    0x40    ld a5,352(a5)
    0x84014948    0x44    bltu a5,s0,ffffffff840149b6 <decodeSetPriority+0xb2>
    0x8401494c    0x48    li a1,2
    0x8401494e    0x4a    jal ra,ffffffff840122d0 <setThreadState>
    0x84014952    0x4e    ld a5,64(sp)          ; stack access
    0x84014954    0x50    slli a0,a5,0x19
    0x84014958    0x54    srli a0,a0,0x19
    0x8401495a    0x56    slli a4,a5,0x19
    0x8401495e    0x5a    bgez a4,ffffffff84014968 <decodeSetPriority+0x64>
    0x84014962    0x5e    li a5,-1
    0x84014964    0x60    slli a5,a5,0x27
    0x84014966    0x62    or a0,a0,a5
    0x84014968    0x64    li a5,1
    0x8401496a    0x66    sd a5,56(sp)          ; stack access
    0x8401496c    0x68    sd zero,48(sp)        ; stack access
    0x8401496e    0x6a    sd zero,32(sp)        ; stack access
    0x84014970    0x6c    sd zero,40(sp)        ; stack access
    0x84014972    0x6e    sd zero,24(sp)        ; stack access
    0x84014974    0x70    sd zero,16(sp)        ; stack access
    0x84014976    0x72    sd zero,0(sp)         ; stack access
    0x84014978    0x74    sd zero,8(sp)         ; stack access
    0x8401497a    0x76    li a7,0
    0x8401497c    0x78    li a5,0
    0x8401497e    0x7a    li a6,0
    0x84014980    0x7c    mv a4,s0
    0x84014982    0x7e    li a3,0
    0x84014984    0x80    li a2,0
    0x84014986    0x82    li a1,0
    0x84014988    0x84    jal ra,ffffffff840145d2 <invokeTCB_ThreadControl>
    0x8401498c    0x88    j ffffffff8401499a <decodeSetPriority+0x96>
    0x8401498e    0x8a    li a5,7
    0x84014990    0x8c    auipc a4,0x8
    0x84014994    0x90    sd a5,744(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014998    0x94    li a0,3
    0x8401499a    0x96    ld ra,104(sp)         ; stack access
    0x8401499c    0x98    ld s0,96(sp)          ; stack access
    0x8401499e    0x9a    addi sp,sp,112
    0x840149a0    0x9c    ret
    0x840149a2    0x9e    auipc a5,0x8
    0x840149a6    0xa2    addi a5,a5,678 # ffffffff8401cc48 <current_syscall_error>
    0x840149aa    0xa6    li a4,2
    0x840149ac    0xa8    sd a4,48(a5)
    0x840149ae    0xaa    li a4,1
    0x840149b0    0xac    sd a4,8(a5)
    0x840149b2    0xae    li a0,3
    0x840149b4    0xb0    j ffffffff8401499a <decodeSetPriority+0x96>
    0x840149b6    0xb2    auipc a4,0x8
    0x840149ba    0xb6    addi a4,a4,658 # ffffffff8401cc48 <current_syscall_error>
    0x840149be    0xba    li a3,4
    0x840149c0    0xbc    sd a3,48(a4)
    0x840149c2    0xbe    sd zero,16(a4)
    0x840149c6    0xc2    sd a5,24(a4)
    0x840149c8    0xc4    li a0,3
    0x840149ca    0xc6    j ffffffff8401499a <decodeSetPriority+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 118 nodes.

Section decodeDomainInvocation (182 of 267)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 65 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x84014500     0x0    li a5,29
    0x84014502     0x2    bne a0,a5,ffffffff84014562 <decodeDomainInvocation+0x62>
    0x84014506     0x6    beqz a1,ffffffff84014570 <decodeDomainInvocation+0x70>
    0x84014508     0x8    addi sp,sp,-32
    0x8401450a     0xa    sd ra,24(sp)          ; stack access
    0x8401450c     0xc    sd s0,16(sp)          ; stack access
    0x8401450e     0xe    sd s1,8(sp)           ; stack access
    0x84014510    0x10    auipc a0,0x19
    0x84014514    0x14    ld a0,1416(a0) # ffffffff8402da98 <ksCurThread>
    0x84014518    0x18    ld s1,88(a0)
    0x8401451a    0x1a    li a5,15
    0x8401451c    0x1c    bltu a5,s1,ffffffff8401457e <decodeDomainInvocation+0x7e>
    0x84014520    0x20    auipc a5,0x8
    0x84014524    0x24    ld a5,1888(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84014528    0x28    beqz a5,ffffffff84014592 <decodeDomainInvocation+0x92>
    0x8401452a    0x2a    ld s0,0(a5)
    0x8401452c    0x2c    srli a4,s0,0x3b
    0x84014530    0x30    li a5,12
    0x84014532    0x32    bne a4,a5,ffffffff840145a0 <decodeDomainInvocation+0xa0>
    0x84014536    0x36    li a1,2
    0x84014538    0x38    jal ra,ffffffff840122d0 <setThreadState>
    0x8401453c    0x3c    slli a0,s0,0x19
    0x84014540    0x40    srli a0,a0,0x19
    0x84014542    0x42    slli a5,s0,0x19
    0x84014546    0x46    bgez a5,ffffffff84014550 <decodeDomainInvocation+0x50>
    0x8401454a    0x4a    li a5,-1
    0x8401454c    0x4c    slli a5,a5,0x27
    0x8401454e    0x4e    or a0,a0,a5
    0x84014550    0x50    mv a1,s1
    0x84014552    0x52    jal ra,ffffffff84012a52 <setDomain>
    0x84014556    0x56    li a0,0
    0x84014558    0x58    ld ra,24(sp)          ; stack access
    0x8401455a    0x5a    ld s0,16(sp)          ; stack access
    0x8401455c    0x5c    ld s1,8(sp)           ; stack access
    0x8401455e    0x5e    addi sp,sp,32
    0x84014560    0x60    ret
    0x84014562    0x62    li a5,3
    0x84014564    0x64    auipc a4,0x8
    0x84014568    0x68    sd a5,1812(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401456c    0x6c    li a0,3
    0x8401456e    0x6e    ret
    0x84014570    0x70    li a5,7
    0x84014572    0x72    auipc a4,0x8
    0x84014576    0x76    sd a5,1798(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401457a    0x7a    li a0,3
    0x8401457c    0x7c    ret
    0x8401457e    0x7e    auipc a5,0x8
    0x84014582    0x82    addi a5,a5,1738 # ffffffff8401cc48 <current_syscall_error>
    0x84014586    0x86    li a4,1
    0x84014588    0x88    sd a4,48(a5)
    0x8401458a    0x8a    sd zero,0(a5)
    0x8401458e    0x8e    li a0,3
    0x84014590    0x90    j ffffffff84014558 <decodeDomainInvocation+0x58>
    0x84014592    0x92    li a5,7
    0x84014594    0x94    auipc a4,0x8
    0x84014598    0x98    sd a5,1764(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401459c    0x9c    li a0,3
    0x8401459e    0x9e    j ffffffff84014558 <decodeDomainInvocation+0x58>
    0x840145a0    0xa0    auipc a5,0x8
    0x840145a4    0xa4    addi a5,a5,1704 # ffffffff8401cc48 <current_syscall_error>
    0x840145a8    0xa8    li a4,1
    0x840145aa    0xaa    sd a4,48(a5)
    0x840145ac    0xac    sd a4,0(a5)
    0x840145ae    0xae    li a0,3
    0x840145b0    0xb0    j ffffffff84014558 <decodeDomainInvocation+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 99 nodes.

Section handleFault (183 of 267)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 14 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleFault`:

    0x840140ec     0x0    addi sp,sp,-16
    0x840140ee     0x2    sd ra,8(sp)           ; stack access
    0x840140f0     0x4    sd s0,0(sp)           ; stack access
    0x840140f2     0x6    mv s0,a0
    0x840140f4     0x8    jal ra,ffffffff84014002 <sendFaultIPC>
    0x840140f8     0xc    bnez a0,ffffffff84014102 <handleFault+0x16>
    0x840140fa     0xe    ld ra,8(sp)           ; stack access
    0x840140fc    0x10    ld s0,0(sp)           ; stack access
    0x840140fe    0x12    addi sp,sp,16
    0x84014100    0x14    ret
    0x84014102    0x16    li a1,0
    0x84014104    0x18    mv a0,s0
    0x84014106    0x1a    jal ra,ffffffff840122d0 <setThreadState>
    0x8401410a    0x1e    j ffffffff840140fa <handleFault+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 23 nodes.

Section sendFaultIPC (184 of 267)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 83 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `sendFaultIPC`:

    0x84014002     0x0    addi sp,sp,-80
    0x84014004     0x2    sd ra,72(sp)          ; stack access
    0x84014006     0x4    sd s0,64(sp)          ; stack access
    0x84014008     0x6    sd s1,56(sp)          ; stack access
    0x8401400a     0x8    sd s2,48(sp)          ; stack access
    0x8401400c     0xa    sd s3,40(sp)          ; stack access
    0x8401400e     0xc    sd s4,32(sp)          ; stack access
    0x84014010     0xe    mv s0,a0
    0x84014012    0x10    auipc a5,0x9
    0x84014016    0x14    addi a5,a5,-994 # ffffffff8401cc30 <current_lookup_fault>
    0x8401401a    0x18    ld s4,0(a5)
    0x8401401e    0x1c    ld s3,8(a5)
    0x84014022    0x20    ld s2,376(a0)
    0x84014026    0x24    mv a2,s2
    0x84014028    0x26    mv a1,a0
    0x8401402a    0x28    addi a0,sp,8
    0x8401402c    0x2a    jal ra,ffffffff8401117e <lookupCap>
    0x84014030    0x2e    ld s1,8(sp)           ; stack access
    0x84014032    0x30    bnez s1,ffffffff8401409c <sendFaultIPC+0x9a>
    0x84014034    0x32    ld a5,16(sp)          ; stack access
    0x84014036    0x34    srli a3,a5,0x3b
    0x8401403a    0x38    li a4,4
    0x8401403c    0x3a    bne a3,a4,ffffffff840140ba <sendFaultIPC+0xb8>
    0x84014040    0x3e    slli a4,a5,0x8
    0x84014044    0x42    bgez a4,ffffffff840140ba <sendFaultIPC+0xb8>
    0x84014048    0x46    srli a3,a5,0x39
    0x8401404c    0x4a    srli a4,a5,0x3a
    0x84014050    0x4e    or a4,a4,a3
    0x84014052    0x50    andi a4,a4,1
    0x84014054    0x52    beqz a4,ffffffff840140ba <sendFaultIPC+0xb8>
    0x84014056    0x54    ld a2,24(sp)          ; stack access
    0x84014058    0x56    auipc a1,0x7
    0x8401405c    0x5a    addi a1,a1,1960 # ffffffff8401b800 <current_fault>
    0x84014060    0x5e    ld a4,0(a1)
    0x84014062    0x60    sd a4,312(s0)
    0x84014066    0x64    ld a1,8(a1)
    0x84014068    0x66    sd a1,320(s0)
    0x8401406c    0x6a    andi a4,a4,15
    0x8401406e    0x6c    li a1,1
    0x84014070    0x6e    beq a4,a1,ffffffff840140b0 <sendFaultIPC+0xae>
    0x84014074    0x72    slli a6,a5,0x19
    0x84014078    0x76    srli a6,a6,0x19
    0x8401407c    0x7a    slli a4,a5,0x19
    0x84014080    0x7e    bgez a4,ffffffff8401408c <sendFaultIPC+0x8a>
    0x84014084    0x82    li a5,-1
    0x84014086    0x84    slli a5,a5,0x27
    0x84014088    0x86    or a6,a6,a5
    0x8401408c    0x8a    mv a5,s0
    0x8401408e    0x8c    li a4,1
    0x84014090    0x8e    andi a3,a3,1
    0x84014092    0x90    li a1,1
    0x84014094    0x92    li a0,1
    0x84014096    0x94    jal ra,ffffffff84013e8e <sendIPC>
    0x8401409a    0x98    j ffffffff840140da <sendFaultIPC+0xd8>
    0x8401409c    0x9a    auipc a5,0x7
    0x840140a0    0x9e    addi a5,a5,1892 # ffffffff8401b800 <current_fault>
    0x840140a4    0xa2    li a4,1
    0x840140a6    0xa4    sd a4,0(a5)
    0x840140a8    0xa6    sd s2,8(a5)
    0x840140ac    0xaa    li s1,1
    0x840140ae    0xac    j ffffffff840140da <sendFaultIPC+0xd8>
    0x840140b0    0xae    sd s4,328(s0)
    0x840140b4    0xb2    sd s3,336(s0)
    0x840140b8    0xb6    j ffffffff84014074 <sendFaultIPC+0x72>
    0x840140ba    0xb8    auipc a5,0x7
    0x840140be    0xbc    addi a5,a5,1862 # ffffffff8401b800 <current_fault>
    0x840140c2    0xc0    li a4,1
    0x840140c4    0xc2    sd a4,0(a5)
    0x840140c6    0xc4    sd s2,8(a5)
    0x840140ca    0xc8    auipc a5,0x9
    0x840140ce    0xcc    addi a5,a5,-1178 # ffffffff8401cc30 <current_lookup_fault>
    0x840140d2    0xd0    sd a4,0(a5)
    0x840140d4    0xd2    sd zero,8(a5)
    0x840140d8    0xd6    li s1,1
    0x840140da    0xd8    mv a0,s1
    0x840140dc    0xda    ld ra,72(sp)          ; stack access
    0x840140de    0xdc    ld s0,64(sp)          ; stack access
    0x840140e0    0xde    ld s1,56(sp)          ; stack access
    0x840140e2    0xe0    ld s2,48(sp)          ; stack access
    0x840140e4    0xe2    ld s3,40(sp)          ; stack access
    0x840140e6    0xe4    ld s4,32(sp)          ; stack access
    0x840140e8    0xe6    addi sp,sp,80
    0x840140ea    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 128 nodes.

Section handleReply (185 of 267)
================================

Deriving specifications
-----------------------

Section `handleReply` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleReply`:

    0x84013e32     0x0    auipc a0,0x1a
    0x84013e36     0x4    ld a0,-922(a0) # ffffffff8402da98 <ksCurThread>
    0x84013e3a     0x8    andi a5,a0,-1024
    0x84013e3e     0xc    addi a2,a5,96
    0x84013e42    0x10    ld a3,96(a5)
    0x84013e44    0x12    srli a5,a3,0x3b
    0x84013e48    0x16    beqz a5,ffffffff84013e6e <handleReply+0x3c>
    0x84013e4a    0x18    addi sp,sp,-16
    0x84013e4c    0x1a    sd ra,8(sp)           ; stack access
    0x84013e4e    0x1c    li a4,8
    0x84013e50    0x1e    bne a5,a4,ffffffff84013e6a <handleReply+0x38>
    0x84013e54    0x22    andi a5,a3,1
    0x84013e58    0x26    bnez a5,ffffffff84013e6a <handleReply+0x38>
    0x84013e5a    0x28    srli a3,a3,0x1
    0x84013e5c    0x2a    andi a3,a3,1
    0x84013e5e    0x2c    ld a1,8(a2)
    0x84013e60    0x2e    jal ra,ffffffff84013dbe <doReplyTransfer>
    0x84013e64    0x32    ld ra,8(sp)           ; stack access
    0x84013e66    0x34    addi sp,sp,16
    0x84013e68    0x36    ret
    0x84013e6a    0x38    jal ra,ffffffff8401034a <halt>
    0x84013e6e    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleReply` has 37 nodes.

Section setupCallerCap (186 of 267)
===================================

Deriving specifications
-----------------------

Section `setupCallerCap` consists of 27 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `setupCallerCap`:

    0x84013a7e     0x0    addi sp,sp,-48
    0x84013a80     0x2    sd ra,40(sp)          ; stack access
    0x84013a82     0x4    sd s0,32(sp)          ; stack access
    0x84013a84     0x6    sd s1,24(sp)          ; stack access
    0x84013a86     0x8    sd s2,16(sp)          ; stack access
    0x84013a88     0xa    mv s2,a0
    0x84013a8a     0xc    mv s1,a1
    0x84013a8c     0xe    mv s0,a2
    0x84013a8e    0x10    li a1,5
    0x84013a90    0x12    jal ra,ffffffff840122d0 <setThreadState>
    0x84013a94    0x16    slli s0,s0,0x1
    0x84013a96    0x18    andi s0,s0,2
    0x84013a98    0x1a    andi a3,s1,-1024
    0x84013a9c    0x1e    andi a2,s2,-1024
    0x84013aa0    0x22    addi a3,a3,96
    0x84013aa4    0x26    addi a2,a2,64
    0x84013aa8    0x2a    li a0,1
    0x84013aaa    0x2c    slli a0,a0,0x3e
    0x84013aac    0x2e    or a0,a0,s0
    0x84013aae    0x30    mv a1,s2
    0x84013ab0    0x32    jal ra,ffffffff840113ac <cteInsert>
    0x84013ab4    0x36    ld ra,40(sp)          ; stack access
    0x84013ab6    0x38    ld s0,32(sp)          ; stack access
    0x84013ab8    0x3a    ld s1,24(sp)          ; stack access
    0x84013aba    0x3c    ld s2,16(sp)          ; stack access
    0x84013abc    0x3e    addi sp,sp,48
    0x84013abe    0x40    ret

Proving inst theorems
---------------------

27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupCallerCap` has 38 nodes.

Section c_handle_interrupt (187 of 267)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x84013a4a    0x0    addi sp,sp,-16
    0x84013a4c    0x2    sd ra,8(sp)           ; stack access
    0x84013a4e    0x4    jal ra,ffffffff840139fc <handleInterruptEntry>
    0x84013a52    0x8    jal ra,ffffffff840102a8 <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section invokeIRQHandler_SetIRQHandler (188 of 267)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 23 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x84013682     0x0    addi sp,sp,-48
    0x84013684     0x2    sd ra,40(sp)          ; stack access
    0x84013686     0x4    sd s0,32(sp)          ; stack access
    0x84013688     0x6    sd s1,24(sp)          ; stack access
    0x8401368a     0x8    sd a1,0(sp)           ; stack access
    0x8401368c     0xa    sd a2,8(sp)           ; stack access
    0x8401368e     0xc    mv s1,a3
    0x84013690     0xe    slli a0,a0,0x5
    0x84013692    0x10    auipc s0,0x1a
    0x84013696    0x14    addi s0,s0,-1682 # ffffffff8402d000 <intStateIRQNode>
    0x8401369a    0x18    add s0,s0,a0
    0x8401369c    0x1a    mv a0,s0
    0x8401369e    0x1c    jal ra,ffffffff8401364e <cteDeleteOne>
    0x840136a2    0x20    mv a3,s0
    0x840136a4    0x22    mv a2,s1
    0x840136a6    0x24    ld a0,0(sp)           ; stack access
    0x840136a8    0x26    ld a1,8(sp)           ; stack access
    0x840136aa    0x28    jal ra,ffffffff840113ac <cteInsert>
    0x840136ae    0x2c    ld ra,40(sp)          ; stack access
    0x840136b0    0x2e    ld s0,32(sp)          ; stack access
    0x840136b2    0x30    ld s1,24(sp)          ; stack access
    0x840136b4    0x32    addi sp,sp,48
    0x840136b6    0x34    ret

Proving inst theorems
---------------------

23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 36 nodes.

Section cancelSignal (189 of 267)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 48 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `cancelSignal`:

    0x84012c32     0x0    addi sp,sp,-48
    0x84012c34     0x2    sd ra,40(sp)          ; stack access
    0x84012c36     0x4    sd s0,32(sp)          ; stack access
    0x84012c38     0x6    sd s1,24(sp)          ; stack access
    0x84012c3a     0x8    mv s1,a0
    0x84012c3c     0xa    mv s0,a1
    0x84012c3e     0xc    ld a5,8(a1)
    0x84012c40     0xe    slli a1,a5,0x19
    0x84012c44    0x12    srli a1,a1,0x19
    0x84012c46    0x14    slli a4,a5,0x19
    0x84012c4a    0x18    bgez a4,ffffffff84012c54 <cancelSignal+0x22>
    0x84012c4e    0x1c    li a5,-1
    0x84012c50    0x1e    slli a5,a5,0x27
    0x84012c52    0x20    or a1,a1,a5
    0x84012c54    0x22    ld a5,0(s0)
    0x84012c56    0x24    srli a2,a5,0x19
    0x84012c5a    0x28    bgez a5,ffffffff84012c64 <cancelSignal+0x32>
    0x84012c5e    0x2c    li a5,-1
    0x84012c60    0x2e    slli a5,a5,0x27
    0x84012c62    0x30    or a2,a2,a5
    0x84012c64    0x32    mv a0,s1
    0x84012c66    0x34    jal ra,ffffffff84012af8 <tcbEPDequeue>
    0x84012c6a    0x38    ld a3,8(s0)
    0x84012c6c    0x3a    li a4,-1
    0x84012c6e    0x3c    slli a5,a4,0x27
    0x84012c72    0x40    and a3,a3,a5
    0x84012c74    0x42    srli a4,a4,0x19
    0x84012c76    0x44    and a4,a4,a0
    0x84012c78    0x46    or a4,a4,a3
    0x84012c7a    0x48    sd a4,8(s0)
    0x84012c7c    0x4a    ld a5,0(s0)
    0x84012c7e    0x4c    slli a5,a5,0x27
    0x84012c80    0x4e    srli a5,a5,0x27
    0x84012c82    0x50    slli a1,a1,0x19
    0x84012c84    0x52    or a5,a5,a1
    0x84012c86    0x54    beqz a0,ffffffff84012c9c <cancelSignal+0x6a>
    0x84012c88    0x56    sd a5,0(s0)
    0x84012c8a    0x58    li a1,0
    0x84012c8c    0x5a    mv a0,s1
    0x84012c8e    0x5c    jal ra,ffffffff840122d0 <setThreadState>
    0x84012c92    0x60    ld ra,40(sp)          ; stack access
    0x84012c94    0x62    ld s0,32(sp)          ; stack access
    0x84012c96    0x64    ld s1,24(sp)          ; stack access
    0x84012c98    0x66    addi sp,sp,48
    0x84012c9a    0x68    ret
    0x84012c9c    0x6a    andi a5,a5,-4
    0x84012c9e    0x6c    sd a5,0(s0)
    0x84012ca0    0x6e    j ffffffff84012c8a <cancelSignal+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 70 nodes.

Section switchToThread (190 of 267)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 13 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x8401281e     0x0    addi sp,sp,-16
    0x84012820     0x2    sd ra,8(sp)           ; stack access
    0x84012822     0x4    sd s0,0(sp)           ; stack access
    0x84012824     0x6    mv s0,a0
    0x84012826     0x8    jal ra,ffffffff840108c6 <setVMRoot>
    0x8401282a     0xc    mv a0,s0
    0x8401282c     0xe    jal ra,ffffffff84012768 <tcbSchedDequeue>
    0x84012830    0x12    auipc a5,0x1b
    0x84012834    0x16    sd s0,616(a5) # ffffffff8402da98 <ksCurThread>
    0x84012838    0x1a    ld ra,8(sp)           ; stack access
    0x8401283a    0x1c    ld s0,0(sp)           ; stack access
    0x8401283c    0x1e    addi sp,sp,16
    0x8401283e    0x20    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 21 nodes.

Section timerTick (191 of 267)
==============================

Deriving specifications
-----------------------

Section `timerTick` consists of 28 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `timerTick`:

    0x84012716     0x0    addi sp,sp,-16
    0x84012718     0x2    sd ra,8(sp)           ; stack access
    0x8401271a     0x4    auipc a0,0x1b
    0x8401271e     0x8    ld a0,894(a0) # ffffffff8402da98 <ksCurThread>
    0x84012722     0xc    ld a5,280(a0)
    0x84012726    0x10    andi a5,a5,15
    0x84012728    0x12    li a4,1
    0x8401272a    0x14    bne a5,a4,ffffffff8401273c <timerTick+0x26>
    0x8401272e    0x18    ld a5,368(a0)
    0x84012732    0x1c    bgeu a4,a5,ffffffff84012752 <timerTick+0x3c>
    0x84012736    0x20    addi a5,a5,-1
    0x84012738    0x22    sd a5,368(a0)
    0x8401273c    0x26    auipc a4,0x1a
    0x84012740    0x2a    addi a4,a4,1820 # ffffffff8402ce58 <ksDomainTime>
    0x84012744    0x2e    ld a5,0(a4)
    0x84012746    0x30    addi a5,a5,-1
    0x84012748    0x32    sd a5,0(a4)
    0x8401274a    0x34    beqz a5,ffffffff84012762 <timerTick+0x4c>
    0x8401274c    0x36    ld ra,8(sp)           ; stack access
    0x8401274e    0x38    addi sp,sp,16
    0x84012750    0x3a    ret
    0x84012752    0x3c    li a5,5
    0x84012754    0x3e    sd a5,368(a0)
    0x84012758    0x42    jal ra,ffffffff84012688 <tcbSchedAppend>
    0x8401275c    0x46    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84012760    0x4a    j ffffffff8401273c <timerTick+0x26>
    0x84012762    0x4c    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84012766    0x50    j ffffffff8401274c <timerTick+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `timerTick` has 47 nodes.

Section possibleSwitchTo (192 of 267)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x8401259a     0x0    addi sp,sp,-16
    0x8401259c     0x2    sd ra,8(sp)           ; stack access
    0x8401259e     0x4    sd s0,0(sp)           ; stack access
    0x840125a0     0x6    mv s0,a0
    0x840125a2     0x8    ld a4,344(a0)
    0x840125a6     0xc    auipc a5,0x1b
    0x840125aa    0x10    ld a5,602(a5) # ffffffff8402d800 <ksCurDomain>
    0x840125ae    0x14    bne a4,a5,ffffffff840125c8 <possibleSwitchTo+0x2e>
    0x840125b2    0x18    auipc a5,0xa
    0x840125b6    0x1c    ld a5,1678(a5) # ffffffff8401cc40 <ksSchedulerAction>
    0x840125ba    0x20    beqz a5,ffffffff840125d4 <possibleSwitchTo+0x3a>
    0x840125bc    0x22    jal ra,ffffffff8401226a <rescheduleRequired>
    0x840125c0    0x26    mv a0,s0
    0x840125c2    0x28    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x840125c6    0x2c    j ffffffff840125cc <possibleSwitchTo+0x32>
    0x840125c8    0x2e    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x840125cc    0x32    ld ra,8(sp)           ; stack access
    0x840125ce    0x34    ld s0,0(sp)           ; stack access
    0x840125d0    0x36    addi sp,sp,16
    0x840125d2    0x38    ret
    0x840125d4    0x3a    auipc a5,0xa
    0x840125d8    0x3e    sd a0,1644(a5) # ffffffff8401cc40 <ksSchedulerAction>
    0x840125dc    0x42    j ffffffff840125cc <possibleSwitchTo+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 39 nodes.

Section activateThread (193 of 267)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `activateThread`:

    0x840123c0     0x0    addi sp,sp,-16
    0x840123c2     0x2    sd ra,8(sp)           ; stack access
    0x840123c4     0x4    auipc a0,0x1b
    0x840123c8     0x8    ld a0,1748(a0) # ffffffff8402da98 <ksCurThread>
    0x840123cc     0xc    ld a5,280(a0)
    0x840123d0    0x10    andi a5,a5,15
    0x840123d2    0x12    li a4,2
    0x840123d4    0x14    beq a5,a4,ffffffff840123e8 <activateThread+0x28>
    0x840123d8    0x18    li a4,7
    0x840123da    0x1a    beq a5,a4,ffffffff840123f6 <activateThread+0x36>
    0x840123de    0x1e    li a4,1
    0x840123e0    0x20    beq a5,a4,ffffffff840123f6 <activateThread+0x36>
    0x840123e4    0x24    jal ra,ffffffff8401034a <halt>
    0x840123e8    0x28    ld a5,264(a0)
    0x840123ec    0x2c    sd a5,272(a0)
    0x840123f0    0x30    li a1,1
    0x840123f2    0x32    jal ra,ffffffff840122d0 <setThreadState>
    0x840123f6    0x36    ld ra,8(sp)           ; stack access
    0x840123f8    0x38    addi sp,sp,16
    0x840123fa    0x3a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 35 nodes.

Section createObject (194 of 267)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 77 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `createObject`:

    0x840120a8     0x0    addi sp,sp,-32
    0x840120aa     0x2    sd ra,24(sp)          ; stack access
    0x840120ac     0x4    li a5,4
    0x840120ae     0x6    bltu a5,a0,ffffffff840120ca <createObject+0x22>
    0x840120b2     0xa    li a5,4
    0x840120b4     0xc    bltu a5,a0,ffffffff84012160 <createObject+0xb8>
    0x840120b8    0x10    slli a0,a0,0x2
    0x840120ba    0x12    auipc a4,0x5
    0x840120be    0x16    addi a4,a4,502 # ffffffff840172b0 <ksDomScheduleLength+0x200>
    0x840120c2    0x1a    add a0,a0,a4
    0x840120c4    0x1c    lw a5,0(a0)
    0x840120c6    0x1e    add a5,a5,a4
    0x840120c8    0x20    jr a5
    0x840120ca    0x22    jal ra,ffffffff84010f90 <Arch_createObject>
    0x840120ce    0x26    sd a0,0(sp)           ; stack access
    0x840120d0    0x28    sd a1,8(sp)           ; stack access
    0x840120d2    0x2a    ld a0,0(sp)           ; stack access
    0x840120d4    0x2c    ld a1,8(sp)           ; stack access
    0x840120d6    0x2e    ld ra,24(sp)          ; stack access
    0x840120d8    0x30    addi sp,sp,32
    0x840120da    0x32    ret
    0x840120dc    0x34    li a5,32
    0x840120e0    0x38    sd a5,768(a1) # fffffffff8000300 <ki_end+0x73fd2300>
    0x840120e4    0x3c    li a5,5
    0x840120e6    0x3e    sd a5,880(a1)
    0x840120ea    0x42    auipc a5,0x1b
    0x840120ee    0x46    ld a5,1814(a5) # ffffffff8402d800 <ksCurDomain>
    0x840120f2    0x4a    sd a5,856(a1)
    0x840120f6    0x4e    addi a1,a1,512
    0x840120fa    0x52    slli a1,a1,0x19
    0x840120fc    0x54    srli a1,a1,0x19
    0x840120fe    0x56    li a5,3
    0x84012100    0x58    slli a5,a5,0x3d
    0x84012102    0x5a    or a1,a1,a5
    0x84012104    0x5c    sd a1,0(sp)
    0x84012106    0x5e    sd zero,8(sp)
    0x84012108    0x60    j ffffffff840120d2 <createObject+0x2a>
    0x8401210a    0x62    slli a1,a1,0x19
    0x8401210c    0x64    srli a1,a1,0x19
    0x8401210e    0x66    li a5,79
    0x84012112    0x6a    slli a5,a5,0x37
    0x84012114    0x6c    or a1,a1,a5
    0x84012116    0x6e    sd a1,0(sp)
    0x84012118    0x70    sd zero,8(sp)
    0x8401211a    0x72    j ffffffff840120d2 <createObject+0x2a>
    0x8401211c    0x74    slli a1,a1,0x19
    0x8401211e    0x76    srli a1,a1,0x19
    0x84012120    0x78    li a5,27
    0x84012122    0x7a    slli a5,a5,0x39
    0x84012124    0x7c    or a1,a1,a5
    0x84012126    0x7e    sd a1,0(sp)
    0x84012128    0x80    sd zero,8(sp)
    0x8401212a    0x82    j ffffffff840120d2 <createObject+0x2a>
    0x8401212c    0x84    andi a2,a2,63
    0x84012130    0x88    slli a2,a2,0x2f
    0x84012132    0x8a    slli a1,a1,0x19
    0x84012134    0x8c    srli a1,a1,0x1a
    0x84012136    0x8e    or a2,a2,a1
    0x84012138    0x90    li a1,5
    0x8401213a    0x92    slli a1,a1,0x3c
    0x8401213c    0x94    or a2,a2,a1
    0x8401213e    0x96    sd a2,0(sp)
    0x84012140    0x98    sd zero,8(sp)
    0x84012142    0x9a    j ffffffff840120d2 <createObject+0x2a>
    0x84012144    0x9c    slli a1,a1,0x19
    0x84012146    0x9e    srli a1,a1,0x19
    0x84012148    0xa0    li a5,1
    0x8401214a    0xa2    slli a5,a5,0x3c
    0x8401214c    0xa4    or a1,a1,a5
    0x8401214e    0xa6    sd a1,0(sp)
    0x84012150    0xa8    snez a3,a3
    0x84012154    0xac    slli a3,a3,0x6
    0x84012156    0xae    andi a2,a2,63
    0x8401215a    0xb2    or a2,a2,a3
    0x8401215c    0xb4    sd a2,8(sp)
    0x8401215e    0xb6    j ffffffff840120d2 <createObject+0x2a>
    0x84012160    0xb8    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
77 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 106 nodes.

Section maskCapRights (195 of 267)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 101 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `maskCapRights`:

    0x84011f9e      0x0    addi sp,sp,-48
    0x84011fa0      0x2    sd ra,40(sp)          ; stack access
    0x84011fa2      0x4    sd a1,0(sp)           ; stack access
    0x84011fa4      0x6    sd a2,8(sp)           ; stack access
    0x84011fa6      0x8    slli a4,a1,0x4
    0x84011faa      0xc    bltz a4,ffffffff84011fcc <maskCapRights+0x2e>
    0x84011fae     0x10    srli a5,a1,0x3b
    0x84011fb2     0x14    ld a4,8(sp)           ; stack access
    0x84011fb4     0x16    li a3,20
    0x84011fb6     0x18    bltu a3,a5,ffffffff840120a4 <maskCapRights+0x106>
    0x84011fba     0x1c    slli a5,a5,0x2
    0x84011fbc     0x1e    auipc a3,0x5
    0x84011fc0     0x22    addi a3,a3,672 # ffffffff8401725c <ksDomScheduleLength+0x1ac>
    0x84011fc4     0x26    add a5,a5,a3
    0x84011fc6     0x28    lw a5,0(a5)
    0x84011fc8     0x2a    add a5,a5,a3
    0x84011fca     0x2c    jr a5
    0x84011fcc     0x2e    jal ra,ffffffff84010bf2 <Arch_maskCapRights>
    0x84011fd0     0x32    sd a0,16(sp)          ; stack access
    0x84011fd2     0x34    sd a1,24(sp)          ; stack access
    0x84011fd4     0x36    ld a0,16(sp)          ; stack access
    0x84011fd6     0x38    ld a1,24(sp)          ; stack access
    0x84011fd8     0x3a    ld ra,40(sp)          ; stack access
    0x84011fda     0x3c    addi sp,sp,48
    0x84011fdc     0x3e    ret
    0x84011fde     0x40    sd a1,16(sp)
    0x84011fe0     0x42    sd a4,24(sp)
    0x84011fe2     0x44    j ffffffff84011fd4 <maskCapRights+0x36>
    0x84011fe4     0x46    srli a5,a1,0x37
    0x84011fe8     0x4a    and a5,a5,a0
    0x84011fea     0x4c    li a3,1
    0x84011fec     0x4e    and a5,a5,a3
    0x84011fee     0x50    slli a5,a5,0x37
    0x84011ff0     0x52    li a2,-1
    0x84011ff2     0x54    slli a6,a2,0x37
    0x84011ff6     0x58    addi a6,a6,-1
    0x84011ff8     0x5a    and a6,a1,a6
    0x84011ffc     0x5e    or a5,a5,a6
    0x84012000     0x62    slli a6,a2,0x38
    0x84012004     0x66    addi a6,a6,-1
    0x84012006     0x68    and a5,a5,a6
    0x8401200a     0x6c    srli a6,a0,0x1
    0x8401200e     0x70    srli a7,a1,0x38
    0x84012012     0x74    and a6,a6,a7
    0x84012016     0x78    and a6,a3,a6
    0x8401201a     0x7c    slli a6,a6,0x38
    0x8401201c     0x7e    or a5,a5,a6
    0x84012020     0x82    slli a6,a2,0x39
    0x84012024     0x86    addi a6,a6,-1
    0x84012026     0x88    and a5,a5,a6
    0x8401202a     0x8c    srli a6,a0,0x2
    0x8401202e     0x90    srli a7,a1,0x39
    0x84012032     0x94    and a6,a6,a7
    0x84012036     0x98    and a6,a3,a6
    0x8401203a     0x9c    slli a6,a6,0x39
    0x8401203c     0x9e    or a5,a5,a6
    0x84012040     0xa2    slli a2,a2,0x3a
    0x84012042     0xa4    addi a2,a2,-1
    0x84012044     0xa6    and a5,a5,a2
    0x84012046     0xa8    srli a0,a0,0x3
    0x84012048     0xaa    srli a1,a1,0x3a
    0x8401204a     0xac    and a0,a0,a1
    0x8401204c     0xae    and a3,a3,a0
    0x8401204e     0xb0    slli a3,a3,0x3a
    0x84012050     0xb2    or a5,a5,a3
    0x84012052     0xb4    sd a5,16(sp)
    0x84012054     0xb6    sd a4,24(sp)
    0x84012056     0xb8    j ffffffff84011fd4 <maskCapRights+0x36>
    0x84012058     0xba    srli a5,a1,0x39
    0x8401205c     0xbe    and a5,a5,a0
    0x8401205e     0xc0    li a3,1
    0x84012060     0xc2    and a5,a5,a3
    0x84012062     0xc4    slli a5,a5,0x39
    0x84012064     0xc6    li a2,-1
    0x84012066     0xc8    slli a6,a2,0x39
    0x8401206a     0xcc    addi a6,a6,-1
    0x8401206c     0xce    and a6,a1,a6
    0x84012070     0xd2    or a5,a5,a6
    0x84012074     0xd6    slli a2,a2,0x3a
    0x84012076     0xd8    addi a2,a2,-1
    0x84012078     0xda    and a5,a5,a2
    0x8401207a     0xdc    srli a0,a0,0x1
    0x8401207c     0xde    srli a1,a1,0x3a
    0x8401207e     0xe0    and a0,a0,a1
    0x84012080     0xe2    and a3,a3,a0
    0x84012082     0xe4    slli a3,a3,0x3a
    0x84012084     0xe6    or a5,a5,a3
    0x84012086     0xe8    sd a5,16(sp)
    0x84012088     0xea    sd a4,24(sp)
    0x8401208a     0xec    j ffffffff84011fd4 <maskCapRights+0x36>
    0x8401208c     0xee    srli a5,a0,0x2
    0x84012090     0xf2    srli a0,a1,0x1
    0x84012094     0xf6    and a5,a5,a0
    0x84012096     0xf8    slli a5,a5,0x1
    0x84012098     0xfa    andi a5,a5,2
    0x8401209a     0xfc    andi a1,a1,-3
    0x8401209c     0xfe    or a1,a1,a5
    0x8401209e    0x100    sd a1,16(sp)
    0x840120a0    0x102    sd a4,24(sp)
    0x840120a2    0x104    j ffffffff84011fd4 <maskCapRights+0x36>
    0x840120a4    0x106    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 127 nodes.

Section sameObjectAs (196 of 267)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 36 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `sameObjectAs`:

    0x84011e20     0x0    addi sp,sp,-48
    0x84011e22     0x2    sd ra,40(sp)          ; stack access
    0x84011e24     0x4    sd a0,16(sp)          ; stack access
    0x84011e26     0x6    sd a1,24(sp)          ; stack access
    0x84011e28     0x8    sd a2,0(sp)           ; stack access
    0x84011e2a     0xa    sd a3,8(sp)           ; stack access
    0x84011e2c     0xc    srli a0,a0,0x3b
    0x84011e2e     0xe    li a5,2
    0x84011e30    0x10    beq a0,a5,ffffffff84011e74 <sameObjectAs+0x54>
    0x84011e34    0x14    li a4,14
    0x84011e36    0x16    beq a0,a4,ffffffff84011e58 <sameObjectAs+0x38>
    0x84011e3a    0x1a    andi a0,a0,1
    0x84011e3c    0x1c    beqz a0,ffffffff84011e46 <sameObjectAs+0x26>
    0x84011e3e    0x1e    slli a4,a2,0x4
    0x84011e42    0x22    bltz a4,ffffffff84011e66 <sameObjectAs+0x46>
    0x84011e46    0x26    ld a2,0(sp)           ; stack access
    0x84011e48    0x28    ld a3,8(sp)           ; stack access
    0x84011e4a    0x2a    ld a0,16(sp)          ; stack access
    0x84011e4c    0x2c    ld a1,24(sp)          ; stack access
    0x84011e4e    0x2e    jal ra,ffffffff840119d8 <sameRegionAs>
    0x84011e52    0x32    ld ra,40(sp)          ; stack access
    0x84011e54    0x34    addi sp,sp,48
    0x84011e56    0x36    ret
    0x84011e58    0x38    srli a5,a2,0x3b
    0x84011e5c    0x3c    li a4,16
    0x84011e5e    0x3e    li a0,0
    0x84011e60    0x40    bne a5,a4,ffffffff84011e46 <sameObjectAs+0x26>
    0x84011e64    0x44    j ffffffff84011e52 <sameObjectAs+0x32>
    0x84011e66    0x46    ld a2,0(sp)           ; stack access
    0x84011e68    0x48    ld a3,8(sp)           ; stack access
    0x84011e6a    0x4a    ld a0,16(sp)          ; stack access
    0x84011e6c    0x4c    ld a1,24(sp)          ; stack access
    0x84011e6e    0x4e    jal ra,ffffffff84010eb6 <Arch_sameObjectAs>
    0x84011e72    0x52    j ffffffff84011e52 <sameObjectAs+0x32>
    0x84011e74    0x54    li a0,0
    0x84011e76    0x56    j ffffffff84011e52 <sameObjectAs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 63 nodes.

Section deriveCap (197 of 267)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 51 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `deriveCap`:

    0x84011da6     0x0    addi sp,sp,-64
    0x84011da8     0x2    sd ra,56(sp)          ; stack access
    0x84011daa     0x4    sd s0,48(sp)          ; stack access
    0x84011dac     0x6    sd s1,40(sp)          ; stack access
    0x84011dae     0x8    sd s2,32(sp)          ; stack access
    0x84011db0     0xa    sd s3,24(sp)          ; stack access
    0x84011db2     0xc    mv s0,a0
    0x84011db4     0xe    sd a2,0(sp)           ; stack access
    0x84011db6    0x10    sd a3,8(sp)           ; stack access
    0x84011db8    0x12    mv s1,a2
    0x84011dba    0x14    srli a5,a2,0x3b
    0x84011dbe    0x18    andi s3,a5,1
    0x84011dc2    0x1c    bnez s3,ffffffff84011de4 <deriveCap+0x3e>
    0x84011dc6    0x20    ld s2,8(sp)           ; stack access
    0x84011dc8    0x22    li a4,8
    0x84011dca    0x24    beq a5,a4,ffffffff84011e12 <deriveCap+0x6c>
    0x84011dce    0x28    bltu a4,a5,ffffffff84011dea <deriveCap+0x44>
    0x84011dd2    0x2c    li a4,2
    0x84011dd4    0x2e    bne a5,a4,ffffffff84011df0 <deriveCap+0x4a>
    0x84011dd8    0x32    mv a0,a1
    0x84011dda    0x34    jal ra,ffffffff84011d66 <ensureNoChildren>
    0x84011dde    0x38    bnez a0,ffffffff84011e18 <deriveCap+0x72>
    0x84011de0    0x3a    mv s3,a0
    0x84011de2    0x3c    j ffffffff84011df0 <deriveCap+0x4a>
    0x84011de4    0x3e    jal ra,ffffffff84010b84 <Arch_deriveCap>
    0x84011de8    0x42    j ffffffff84011dfa <deriveCap+0x54>
    0x84011dea    0x44    addi a5,a5,-14
    0x84011dec    0x46    andi a5,a5,-5
    0x84011dee    0x48    beqz a5,ffffffff84011e0a <deriveCap+0x64>
    0x84011df0    0x4a    sd s3,0(s0)           ; stack access
    0x84011df4    0x4e    sd s1,8(s0)           ; stack access
    0x84011df6    0x50    sd s2,16(s0)          ; stack access
    0x84011dfa    0x54    mv a0,s0
    0x84011dfc    0x56    ld ra,56(sp)          ; stack access
    0x84011dfe    0x58    ld s0,48(sp)          ; stack access
    0x84011e00    0x5a    ld s1,40(sp)          ; stack access
    0x84011e02    0x5c    ld s2,32(sp)          ; stack access
    0x84011e04    0x5e    ld s3,24(sp)          ; stack access
    0x84011e06    0x60    addi sp,sp,64
    0x84011e08    0x62    ret
    0x84011e0a    0x64    mv s2,a5
    0x84011e0c    0x66    mv s1,a5
    0x84011e0e    0x68    mv s3,a5
    0x84011e10    0x6a    j ffffffff84011df0 <deriveCap+0x4a>
    0x84011e12    0x6c    mv s2,s3
    0x84011e14    0x6e    mv s1,s3
    0x84011e16    0x70    j ffffffff84011df0 <deriveCap+0x4a>
    0x84011e18    0x72    mv s2,s3
    0x84011e1a    0x74    mv s1,s3
    0x84011e1c    0x76    mv s3,a0
    0x84011e1e    0x78    j ffffffff84011df0 <deriveCap+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 82 nodes.

Section getObjectSize (198 of 267)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 28 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `getObjectSize`:

    0x8401195e     0x0    addi sp,sp,-16
    0x84011960     0x2    sd ra,8(sp)           ; stack access
    0x84011962     0x4    li a5,4
    0x84011964     0x6    bltu a5,a0,ffffffff84011982 <getObjectSize+0x24>
    0x84011968     0xa    li a5,4
    0x8401196a     0xc    bltu a5,a0,ffffffff8401199a <getObjectSize+0x3c>
    0x8401196e    0x10    slli a0,a0,0x2
    0x84011970    0x12    auipc a4,0x5
    0x84011974    0x16    addi a4,a4,2012 # ffffffff8401714c <ksDomScheduleLength+0x9c>
    0x84011978    0x1a    add a5,a0,a4
    0x8401197c    0x1e    lw a5,0(a5)
    0x8401197e    0x20    add a5,a5,a4
    0x84011980    0x22    jr a5
    0x84011982    0x24    jal ra,ffffffff84010f5e <Arch_getObjectSize>
    0x84011986    0x28    ld ra,8(sp)           ; stack access
    0x84011988    0x2a    addi sp,sp,16
    0x8401198a    0x2c    ret
    0x8401198c    0x2e    li a0,4
    0x8401198e    0x30    j ffffffff84011986 <getObjectSize+0x28>
    0x84011990    0x32    addi a0,a1,5 # fffffffff8000005 <ki_end+0x73fd2005>
    0x84011994    0x36    j ffffffff84011986 <getObjectSize+0x28>
    0x84011996    0x38    mv a0,a1
    0x84011998    0x3a    j ffffffff84011986 <getObjectSize+0x28>
    0x8401199a    0x3c    jal ra,ffffffff8401034a <halt>
    0x8401199e    0x40    li a0,10
    0x840119a0    0x42    j ffffffff84011986 <getObjectSize+0x28>
    0x840119a2    0x44    li a0,5
    0x840119a4    0x46    j ffffffff84011986 <getObjectSize+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 39 nodes.

Section invokeIRQControl (199 of 267)
=====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 25 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `invokeIRQControl`:

    0x84011822     0x0    addi sp,sp,-48
    0x84011824     0x2    sd ra,40(sp)          ; stack access
    0x84011826     0x4    sd s0,32(sp)          ; stack access
    0x84011828     0x6    sd s1,24(sp)          ; stack access
    0x8401182a     0x8    sd s2,16(sp)          ; stack access
    0x8401182c     0xa    mv s0,a0
    0x8401182e     0xc    mv s2,a1
    0x84011830     0xe    mv s1,a2
    0x84011832    0x10    mv a1,a0
    0x84011834    0x12    li a0,1
    0x84011836    0x14    jal ra,ffffffff840117bc <setIRQState>
    0x8401183a    0x18    slli s0,s0,0x34
    0x8401183c    0x1a    mv a3,s2
    0x8401183e    0x1c    mv a2,s1
    0x84011840    0x1e    li a0,-1
    0x84011842    0x20    slli a0,a0,0x3f
    0x84011844    0x22    srli a1,s0,0x34
    0x84011848    0x26    jal ra,ffffffff840113ac <cteInsert>
    0x8401184c    0x2a    li a0,0
    0x8401184e    0x2c    ld ra,40(sp)          ; stack access
    0x84011850    0x2e    ld s0,32(sp)          ; stack access
    0x84011852    0x30    ld s1,24(sp)          ; stack access
    0x84011854    0x32    ld s2,16(sp)          ; stack access
    0x84011856    0x34    addi sp,sp,48
    0x84011858    0x36    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 36 nodes.

Section getReceiveSlots (200 of 267)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 38 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

13 stack accesses found. Annotated code for `getReceiveSlots`:

    0x84011722     0x0    beqz a1,ffffffff84011776 <getReceiveSlots+0x54>
    0x84011724     0x2    addi sp,sp,-96
    0x84011726     0x4    sd ra,88(sp)          ; stack access
    0x84011728     0x6    sd s0,80(sp)          ; stack access
    0x8401172a     0x8    sd s1,72(sp)          ; stack access
    0x8401172c     0xa    ld s0,1008(a1) # fffffffff80003f0 <ki_end+0x73fd23f0>
    0x84011730     0xe    ld s1,1016(a1)
    0x84011734    0x12    ld a2,1000(a1)
    0x84011738    0x16    mv a1,a0
    0x8401173a    0x18    addi a0,sp,40
    0x8401173c    0x1a    jal ra,ffffffff8401117e <lookupCap>
    0x84011740    0x1e    ld a5,40(sp)          ; stack access
    0x84011742    0x20    li a0,0
    0x84011744    0x22    bnez a5,ffffffff8401176c <getReceiveSlots+0x4a>
    0x84011746    0x24    ld a0,48(sp)          ; stack access
    0x84011748    0x26    sd a0,8(sp)           ; stack access
    0x8401174a    0x28    ld a1,56(sp)          ; stack access
    0x8401174c    0x2a    sd a1,16(sp)          ; stack access
    0x8401174e    0x2c    mv a3,s1
    0x84011750    0x2e    mv a2,s0
    0x84011752    0x30    jal ra,ffffffff840112dc <lookupTargetSlot>
    0x84011756    0x34    sd a0,24(sp)          ; stack access
    0x84011758    0x36    sd a1,32(sp)          ; stack access
    0x8401175a    0x38    bnez a0,ffffffff8401177a <getReceiveSlots+0x58>
    0x8401175c    0x3a    ld a5,0(a1)
    0x8401175e    0x3c    srli a5,a5,0x3b
    0x84011760    0x3e    seqz a5,a5
    0x84011764    0x42    neg a5,a5
    0x84011768    0x46    and a0,a1,a5
    0x8401176c    0x4a    ld ra,88(sp)          ; stack access
    0x8401176e    0x4c    ld s0,80(sp)          ; stack access
    0x84011770    0x4e    ld s1,72(sp)          ; stack access
    0x84011772    0x50    addi sp,sp,96
    0x84011774    0x52    ret
    0x84011776    0x54    mv a0,a1
    0x84011778    0x56    ret
    0x8401177a    0x58    li a0,0
    0x8401177c    0x5a    j ffffffff8401176c <getReceiveSlots+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 65 nodes.

Section invokeCNodeRotate (201 of 267)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 32 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x84011626     0x0    addi sp,sp,-64
    0x84011628     0x2    sd ra,56(sp)          ; stack access
    0x8401162a     0x4    sd s0,48(sp)          ; stack access
    0x8401162c     0x6    sd s1,40(sp)          ; stack access
    0x8401162e     0x8    sd a0,16(sp)          ; stack access
    0x84011630     0xa    sd a1,24(sp)          ; stack access
    0x84011632     0xc    sd a2,0(sp)           ; stack access
    0x84011634     0xe    sd a3,8(sp)           ; stack access
    0x84011636    0x10    mv s0,a4
    0x84011638    0x12    mv s1,a5
    0x8401163a    0x14    beq a4,a6,ffffffff84011662 <invokeCNodeRotate+0x3c>
    0x8401163e    0x18    mv a3,a6
    0x84011640    0x1a    mv a2,a5
    0x84011642    0x1c    ld a0,0(sp)           ; stack access
    0x84011644    0x1e    ld a1,8(sp)           ; stack access
    0x84011646    0x20    jal ra,ffffffff840114ea <cteMove>
    0x8401164a    0x24    mv a3,s1
    0x8401164c    0x26    mv a2,s0
    0x8401164e    0x28    ld a0,16(sp)          ; stack access
    0x84011650    0x2a    ld a1,24(sp)          ; stack access
    0x84011652    0x2c    jal ra,ffffffff840114ea <cteMove>
    0x84011656    0x30    li a0,0
    0x84011658    0x32    ld ra,56(sp)          ; stack access
    0x8401165a    0x34    ld s0,48(sp)          ; stack access
    0x8401165c    0x36    ld s1,40(sp)          ; stack access
    0x8401165e    0x38    addi sp,sp,64
    0x84011660    0x3a    ret
    0x84011662    0x3c    mv a3,a2
    0x84011664    0x3e    ld a4,8(sp)           ; stack access
    0x84011666    0x40    mv a2,s0
    0x84011668    0x42    jal ra,ffffffff84011598 <cteSwap>
    0x8401166c    0x46    j ffffffff84011656 <invokeCNodeRotate+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 53 nodes.

Section invokeCNodeSaveCaller (202 of 267)
==========================================

Deriving specifications
-----------------------

Section `invokeCNodeSaveCaller` consists of 25 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `invokeCNodeSaveCaller`:

    0x84011554     0x0    addi sp,sp,-32
    0x84011556     0x2    sd ra,24(sp)          ; stack access
    0x84011558     0x4    mv a3,a0
    0x8401155a     0x6    auipc a5,0x1c
    0x8401155e     0xa    ld a5,1342(a5) # ffffffff8402da98 <ksCurThread>
    0x84011562     0xe    andi a5,a5,-1024
    0x84011566    0x12    addi a2,a5,96
    0x8401156a    0x16    ld a0,96(a5)
    0x8401156c    0x18    sd a0,0(sp)           ; stack access
    0x8401156e    0x1a    ld a5,8(a2)
    0x84011570    0x1c    sd a5,8(sp)           ; stack access
    0x84011572    0x1e    srli a5,a0,0x3b
    0x84011576    0x22    beqz a5,ffffffff84011584 <invokeCNodeSaveCaller+0x30>
    0x84011578    0x24    li a4,8
    0x8401157a    0x26    bne a5,a4,ffffffff84011594 <invokeCNodeSaveCaller+0x40>
    0x8401157e    0x2a    andi a5,a0,1
    0x84011582    0x2e    beqz a5,ffffffff8401158c <invokeCNodeSaveCaller+0x38>
    0x84011584    0x30    li a0,0
    0x84011586    0x32    ld ra,24(sp)          ; stack access
    0x84011588    0x34    addi sp,sp,32
    0x8401158a    0x36    ret
    0x8401158c    0x38    ld a1,8(sp)           ; stack access
    0x8401158e    0x3a    jal ra,ffffffff840114ea <cteMove>
    0x84011592    0x3e    j ffffffff84011584 <invokeCNodeSaveCaller+0x30>
    0x84011594    0x40    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeSaveCaller` has 42 nodes.

Section handleFaultReply (203 of 267)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 123 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `handleFaultReply`:

    0x84010576      0x0    addi sp,sp,-48
    0x84010578      0x2    sd ra,40(sp)          ; stack access
    0x8401057a      0x4    sd s0,32(sp)          ; stack access
    0x8401057c      0x6    sd s1,24(sp)          ; stack access
    0x8401057e      0x8    sd s2,16(sp)          ; stack access
    0x84010580      0xa    sd s3,8(sp)           ; stack access
    0x84010582      0xc    mv s0,a0
    0x84010584      0xe    ld a4,80(a1)
    0x84010586     0x10    andi a3,a4,127
    0x8401058a     0x14    li a5,120
    0x8401058e     0x18    bgeu a5,a3,ffffffff8401059a <handleFaultReply+0x24>
    0x84010592     0x1c    andi a4,a4,-128
    0x84010596     0x20    ori a4,a4,120
    0x8401059a     0x24    srli s1,a4,0xc
    0x8401059e     0x28    andi a6,a4,127
    0x840105a2     0x2c    ld a5,312(s0) # 1138 <KERNEL_OFFSET-0xfffffffeffffeec8>
    0x840105a6     0x30    andi a0,a5,15
    0x840105aa     0x34    li a5,2
    0x840105ac     0x36    beq a0,a5,ffffffff840105c6 <handleFaultReply+0x50>
    0x840105b0     0x3a    li a5,3
    0x840105b2     0x3c    beq a0,a5,ffffffff84010658 <handleFaultReply+0xe2>
    0x840105b6     0x40    li a5,1
    0x840105b8     0x42    beq a0,a5,ffffffff8401064a <handleFaultReply+0xd4>
    0x840105bc     0x46    li a5,5
    0x840105be     0x48    bne a0,a5,ffffffff840106c2 <handleFaultReply+0x14c>
    0x840105c2     0x4c    li a0,1
    0x840105c4     0x4e    j ffffffff8401064a <handleFaultReply+0xd4>
    0x840105c6     0x50    mv s2,a6
    0x840105c8     0x52    li a5,10
    0x840105ca     0x54    bgeu a5,a6,ffffffff840105d0 <handleFaultReply+0x5a>
    0x840105ce     0x58    li s2,10
    0x840105d0     0x5a    mv a7,s2
    0x840105d2     0x5c    li a5,4
    0x840105d4     0x5e    bgeu a5,s2,ffffffff840105da <handleFaultReply+0x64>
    0x840105d8     0x62    li a7,4
    0x840105da     0x64    beqz a6,ffffffff84010646 <handleFaultReply+0xd0>
    0x840105de     0x68    auipc a0,0x7
    0x840105e2     0x6c    addi a0,a0,-422 # ffffffff84017438 <fault_messages>
    0x840105e6     0x70    auipc a2,0x7
    0x840105ea     0x74    addi a2,a2,-270 # ffffffff840174d8 <msgRegisters>
    0x840105ee     0x78    li a3,0
    0x840105f0     0x7a    ld a5,0(a0)
    0x840105f2     0x7c    ld a4,0(a2)
    0x840105f4     0x7e    slli a4,a4,0x3
    0x840105f6     0x80    add a4,a4,a1
    0x840105f8     0x82    ld a4,0(a4)
    0x840105fa     0x84    slli a5,a5,0x3
    0x840105fc     0x86    add a5,a5,s0
    0x840105fe     0x88    sd a4,0(a5)
    0x84010600     0x8a    addi a3,a3,1
    0x84010602     0x8c    addi a0,a0,8
    0x84010604     0x8e    addi a2,a2,8
    0x84010606     0x90    bltu a3,a7,ffffffff840105f0 <handleFaultReply+0x7a>
    0x8401060a     0x94    li a4,1
    0x8401060c     0x96    beqz a6,ffffffff84010612 <handleFaultReply+0x9c>
    0x84010610     0x9a    mv a4,a7
    0x84010612     0x9c    mv s3,a4
    0x84010614     0x9e    bgeu a4,s2,ffffffff84010646 <handleFaultReply+0xd0>
    0x84010618     0xa2    li a0,0
    0x8401061a     0xa4    jal ra,ffffffff840104e4 <lookupIPCBuffer>
    0x8401061e     0xa8    beqz a0,ffffffff84010646 <handleFaultReply+0xd0>
    0x84010620     0xaa    slli a4,s3,0x3
    0x84010624     0xae    auipc a3,0x7
    0x84010628     0xb2    addi a3,a3,-492 # ffffffff84017438 <fault_messages>
    0x8401062c     0xb6    add a3,a3,a4
    0x8401062e     0xb8    add a4,a4,a0
    0x84010630     0xba    slli s2,s2,0x3
    0x84010632     0xbc    add s2,s2,a0
    0x84010634     0xbe    ld a5,0(a3)
    0x84010636     0xc0    ld a2,8(a4)
    0x84010638     0xc2    slli a5,a5,0x3
    0x8401063a     0xc4    add a5,a5,s0
    0x8401063c     0xc6    sd a2,0(a5)
    0x8401063e     0xc8    addi a3,a3,8
    0x84010640     0xca    addi a4,a4,8
    0x84010642     0xcc    bne a4,s2,ffffffff84010634 <handleFaultReply+0xbe>
    0x84010646     0xd0    seqz a0,s1
    0x8401064a     0xd4    ld ra,40(sp)          ; stack access
    0x8401064c     0xd6    ld s0,32(sp)          ; stack access
    0x8401064e     0xd8    ld s1,24(sp)          ; stack access
    0x84010650     0xda    ld s2,16(sp)          ; stack access
    0x84010652     0xdc    ld s3,8(sp)           ; stack access
    0x84010654     0xde    addi sp,sp,48
    0x84010656     0xe0    ret
    0x84010658     0xe2    mv s3,a6
    0x8401065a     0xe4    li a5,2
    0x8401065c     0xe6    bgeu a5,a6,ffffffff84010662 <handleFaultReply+0xec>
    0x84010660     0xea    li s3,2
    0x84010662     0xec    mv a3,s3
    0x84010664     0xee    li a5,4
    0x84010666     0xf0    bgeu a5,s3,ffffffff8401066c <handleFaultReply+0xf6>
    0x8401066a     0xf4    li a3,4
    0x8401066c     0xf6    beqz a6,ffffffff840106bc <handleFaultReply+0x146>
    0x84010670     0xfa    ld a5,88(a1)
    0x84010672     0xfc    sd a5,264(s0)
    0x84010676    0x100    andi a4,a4,126
    0x8401067a    0x104    beqz a4,ffffffff84010680 <handleFaultReply+0x10a>
    0x8401067c    0x106    ld a5,96(a1)
    0x8401067e    0x108    sd a5,8(s0)
    0x84010680    0x10a    li a5,1
    0x84010682    0x10c    beqz a6,ffffffff84010688 <handleFaultReply+0x112>
    0x84010686    0x110    mv a5,a3
    0x84010688    0x112    mv s2,a5
    0x8401068a    0x114    bgeu a5,s3,ffffffff840106bc <handleFaultReply+0x146>
    0x8401068e    0x118    li a0,0
    0x84010690    0x11a    jal ra,ffffffff840104e4 <lookupIPCBuffer>
    0x84010694    0x11e    beqz a0,ffffffff840106bc <handleFaultReply+0x146>
    0x84010696    0x120    slli a5,s2,0x3
    0x8401069a    0x124    slli s3,s3,0x3
    0x8401069c    0x126    auipc a2,0x7
    0x840106a0    0x12a    addi a2,a2,-612 # ffffffff84017438 <fault_messages>
    0x840106a4    0x12e    add a4,a2,a5
    0x840106a8    0x132    ld a4,80(a4)
    0x840106aa    0x134    add a3,a0,a5
    0x840106ae    0x138    ld a3,8(a3)
    0x840106b0    0x13a    slli a4,a4,0x3
    0x840106b2    0x13c    add a4,a4,s0
    0x840106b4    0x13e    sd a3,0(a4)
    0x840106b6    0x140    addi a5,a5,8
    0x840106b8    0x142    bne a5,s3,ffffffff840106a4 <handleFaultReply+0x12e>
    0x840106bc    0x146    seqz a0,s1
    0x840106c0    0x14a    j ffffffff8401064a <handleFaultReply+0xd4>
    0x840106c2    0x14c    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
123 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 195 nodes.

Section setMRs_fault (204 of 267)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 108 instructions.

LWU..

Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_fault`:

    0x8401039a      0x0    ld a3,312(a0)
    0x8401039e      0x4    andi a3,a3,15
    0x840103a0      0x6    li a5,2
    0x840103a2      0x8    beq a3,a5,ffffffff84010450 <setMRs_fault+0xb6>
    0x840103a6      0xc    li a5,3
    0x840103a8      0xe    beq a3,a5,ffffffff8401049c <setMRs_fault+0x102>
    0x840103ac     0x12    addi sp,sp,-16
    0x840103ae     0x14    sd ra,8(sp)           ; stack access
    0x840103b0     0x16    li a5,1
    0x840103b2     0x18    beq a3,a5,ffffffff840103c0 <setMRs_fault+0x26>
    0x840103b6     0x1c    jal ra,ffffffff84010368 <Arch_setMRs_fault>
    0x840103ba     0x20    ld ra,8(sp)           ; stack access
    0x840103bc     0x22    addi sp,sp,16
    0x840103be     0x24    ret
    0x840103c0     0x26    ld a5,264(a0)
    0x840103c4     0x2a    sd a5,88(a1)
    0x840103c6     0x2c    ld a5,320(a0)
    0x840103ca     0x30    sd a5,96(a1)
    0x840103cc     0x32    ld a5,312(a0)
    0x840103d0     0x36    srli a5,a5,0x3f
    0x840103d2     0x38    sd a5,104(a1)
    0x840103d4     0x3a    ld a4,328(a0)
    0x840103d8     0x3e    ld a0,336(a0)
    0x840103dc     0x42    andi a5,a4,3
    0x840103e0     0x46    addi a3,a5,1
    0x840103e4     0x4a    sd a3,112(a1)
    0x840103e6     0x4c    li a3,2
    0x840103e8     0x4e    beq a5,a3,ffffffff84010406 <setMRs_fault+0x6c>
    0x840103ec     0x52    bltu a3,a5,ffffffff8401041e <setMRs_fault+0x84>
    0x840103f0     0x56    beqz a5,ffffffff8401043c <setMRs_fault+0xa2>
    0x840103f2     0x58    li a3,1
    0x840103f4     0x5a    bne a5,a3,ffffffff84010438 <setMRs_fault+0x9e>
    0x840103f8     0x5e    beqz a2,ffffffff84010444 <setMRs_fault+0xaa>
    0x840103fa     0x60    srli a4,a4,0x2
    0x840103fc     0x62    andi a4,a4,127
    0x84010400     0x66    sd a4,40(a2)
    0x84010402     0x68    li a0,5
    0x84010404     0x6a    j ffffffff8401043e <setMRs_fault+0xa4>
    0x84010406     0x6c    beqz a2,ffffffff84010448 <setMRs_fault+0xae>
    0x84010408     0x6e    srli a5,a4,0x2
    0x8401040c     0x72    andi a5,a5,127
    0x84010410     0x76    sd a5,40(a2)
    0x84010412     0x78    srli a4,a4,0x9
    0x84010414     0x7a    andi a4,a4,127
    0x84010418     0x7e    sd a4,48(a2)
    0x8401041a     0x80    li a0,6
    0x8401041c     0x82    j ffffffff8401043e <setMRs_fault+0xa4>
    0x8401041e     0x84    beqz a2,ffffffff8401044c <setMRs_fault+0xb2>
    0x84010420     0x86    srli a5,a4,0x9
    0x84010424     0x8a    andi a5,a5,127
    0x84010428     0x8e    sd a5,40(a2)
    0x8401042a     0x90    sd a0,48(a2)
    0x8401042c     0x92    srli a4,a4,0x2
    0x8401042e     0x94    andi a4,a4,127
    0x84010432     0x98    sd a4,56(a2)
    0x84010434     0x9a    li a0,7
    0x84010436     0x9c    j ffffffff8401043e <setMRs_fault+0xa4>
    0x84010438     0x9e    jal ra,ffffffff8401034a <halt>
    0x8401043c     0xa2    li a0,4
    0x8401043e     0xa4    slli a0,a0,0x20
    0x84010440     0xa6    srli a0,a0,0x20
    0x84010442     0xa8    j ffffffff840103ba <setMRs_fault+0x20>
    0x84010444     0xaa    li a0,4
    0x84010446     0xac    j ffffffff8401043e <setMRs_fault+0xa4>
    0x84010448     0xae    li a0,4
    0x8401044a     0xb0    j ffffffff8401043e <setMRs_fault+0xa4>
    0x8401044c     0xb2    li a0,4
    0x8401044e     0xb4    j ffffffff8401043e <setMRs_fault+0xa4>
    0x84010450     0xb6    ld a5,264(a0)
    0x84010454     0xba    sd a5,88(a1)
    0x84010456     0xbc    ld a5,8(a0)
    0x84010458     0xbe    sd a5,96(a1)
    0x8401045a     0xc0    ld a5,0(a0)
    0x8401045c     0xc2    sd a5,104(a1)
    0x8401045e     0xc4    ld a5,72(a0)
    0x84010460     0xc6    sd a5,112(a1)
    0x84010462     0xc8    li a5,4
    0x84010464     0xca    beqz a2,ffffffff84010494 <setMRs_fault+0xfa>
    0x84010466     0xcc    auipc a4,0x7
    0x8401046a     0xd0    addi a4,a4,-46 # ffffffff84017438 <fault_messages>
    0x8401046e     0xd4    addi a3,a2,40
    0x84010472     0xd8    auipc a1,0x7
    0x84010476     0xdc    addi a1,a1,-10 # ffffffff84017468 <fault_messages+0x30>
    0x8401047a     0xe0    ld a5,32(a4)
    0x8401047c     0xe2    slli a5,a5,0x3
    0x8401047e     0xe4    add a5,a5,a0
    0x84010480     0xe6    ld a5,0(a5)
    0x84010482     0xe8    sd a5,0(a3)
    0x84010484     0xea    addi a4,a4,8
    0x84010486     0xec    addi a3,a3,8
    0x84010488     0xee    bne a1,a4,ffffffff8401047a <setMRs_fault+0xe0>
    0x8401048c     0xf2    ld a5,320(a0)
    0x84010490     0xf6    sd a5,88(a2)
    0x84010492     0xf8    li a5,11
    0x84010494     0xfa    slli a0,a5,0x20
    0x84010498     0xfe    srli a0,a0,0x20
    0x8401049a    0x100    ret
    0x8401049c    0x102    ld a5,264(a0)
    0x840104a0    0x106    sd a5,88(a1)
    0x840104a2    0x108    ld a5,8(a0)
    0x840104a4    0x10a    sd a5,96(a1)
    0x840104a6    0x10c    lwu a5,316(a0)
    0x840104aa    0x110    sd a5,104(a1)
    0x840104ac    0x112    ld a5,312(a0)
    0x840104b0    0x116    srliw a5,a5,0x4
    0x840104b4    0x11a    sd a5,112(a1)
    0x840104b6    0x11c    li a0,4
    0x840104b8    0x11e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
108 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 176 nodes.

Section trap_entry (205 of 267)
===============================

Deriving specifications
-----------------------

Section `trap_entry` consists of 48 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc


Stack analysis
---------------

No stack accesses found. Code for `trap_entry`:

    0x84010000     0x0    csrrw t0,sscratch,t0
    0x84010004     0x4    sd ra,0(t0)
    0x84010008     0x8    sd sp,8(t0)
    0x8401000c     0xc    sd gp,16(t0)
    0x84010010    0x10    sd tp,24(t0)
    0x84010014    0x14    sd t1,40(t0)
    0x84010018    0x18    sd t2,48(t0)
    0x8401001c    0x1c    sd s0,56(t0)
    0x84010020    0x20    sd s1,64(t0)
    0x84010024    0x24    sd a0,72(t0)
    0x84010028    0x28    sd a1,80(t0)
    0x8401002c    0x2c    sd a2,88(t0)
    0x84010030    0x30    sd a3,96(t0)
    0x84010034    0x34    sd a4,104(t0)
    0x84010038    0x38    sd a5,112(t0)
    0x8401003c    0x3c    sd a6,120(t0)
    0x84010040    0x40    sd a7,128(t0)
    0x84010044    0x44    sd s2,136(t0)
    0x84010048    0x48    sd s3,144(t0)
    0x8401004c    0x4c    sd s4,152(t0)
    0x84010050    0x50    sd s5,160(t0)
    0x84010054    0x54    sd s6,168(t0)
    0x84010058    0x58    sd s7,176(t0)
    0x8401005c    0x5c    sd s8,184(t0)
    0x84010060    0x60    sd s9,192(t0)
    0x84010064    0x64    sd s10,200(t0)
    0x84010068    0x68    sd s11,208(t0)
    0x8401006c    0x6c    sd t3,216(t0)
    0x84010070    0x70    sd t4,224(t0)
    0x84010074    0x74    sd t5,232(t0)
    0x84010078    0x78    sd t6,240(t0)
    0x8401007c    0x7c    csrr ra,sscratch
    0x84010080    0x80    sd ra,32(t0)
    0x84010084    0x84    csrr ra,sstatus
    0x84010088    0x88    sd ra,256(t0)
    0x8401008c    0x8c    csrr s0,scause
    0x84010090    0x90    sd s0,248(t0)
    0x84010094    0x94    mv gp,gp
    0x84010098    0x98    auipc sp,0xd
    0x8401009c    0x9c    addi sp,sp,-1136 # ffffffff8401cc28 <ksIdleThread>
    0x840100a0    0xa0    csrr ra,sepc
    0x840100a4    0xa4    sd ra,264(t0)
    0x840100a8    0xa8    srli s2,s0,0x3f
    0x840100ac    0xac    li s1,1
    0x840100ae    0xae    beq s2,s1,ffffffff840100cc <interrupt>
    0x840100b2    0xb2    andi s0,s0,15
    0x840100b4    0xb4    li s4,8
    0x840100b6    0xb6    bne s0,s4,ffffffff840100c4 <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `trap_entry` has 95 nodes.

Section populate_bi_frame (206 of 267)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 55 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `populate_bi_frame`:

    0x84000d86     0x0    addi sp,sp,-48
    0x84000d88     0x2    sd ra,40(sp)          ; stack access
    0x84000d8a     0x4    sd s0,32(sp)          ; stack access
    0x84000d8c     0x6    sd s1,24(sp)          ; stack access
    0x84000d8e     0x8    sd s2,16(sp)          ; stack access
    0x84000d90     0xa    sd s3,8(sp)           ; stack access
    0x84000d92     0xc    mv s3,a0
    0x84000d94     0xe    mv s2,a1
    0x84000d96    0x10    mv s1,a2
    0x84000d98    0x12    mv s0,a3
    0x84000d9a    0x14    lui a1,0x1
    0x84000d9c    0x16    auipc a0,0x1
    0x84000da0    0x1a    ld a0,-1532(a0) # ffffffff840017a0 <rootserver+0x20>
    0x84000da4    0x1e    jal ra,ffffffff840156b8 <memzero>
    0x84000da8    0x22    bnez s0,ffffffff84000e0c <populate_bi_frame+0x86>
    0x84000daa    0x24    auipc a5,0x0
    0x84000dae    0x28    addi a5,a5,1910 # ffffffff84001520 <ndks_boot>
    0x84000db2    0x2c    ld a4,640(a5)
    0x84000db6    0x30    sd a4,584(a5)
    0x84000dba    0x34    li a3,12
    0x84000dbc    0x36    sd a3,592(a5)
    0x84000dc0    0x3a    sd s3,8(a4)
    0x84000dc4    0x3e    ld a4,640(a5)
    0x84000dc8    0x42    sd s2,16(a4)
    0x84000dcc    0x46    ld a4,640(a5)
    0x84000dd0    0x4a    sd zero,24(a4)
    0x84000dd4    0x4e    ld a4,640(a5)
    0x84000dd8    0x52    sd s1,32(a4)
    0x84000dda    0x54    ld a5,640(a5)
    0x84000dde    0x58    li a4,19
    0x84000de0    0x5a    sd a4,136(a5)
    0x84000de2    0x5c    auipc a4,0x2d
    0x84000de6    0x60    ld a4,-834(a4) # ffffffff8402daa0 <ksDomScheduleIdx>
    0x84000dea    0x64    slli a3,a4,0x4
    0x84000dee    0x68    auipc a4,0x16
    0x84000df2    0x6c    addi a4,a4,1610 # ffffffff84017438 <fault_messages>
    0x84000df6    0x70    add a4,a4,a3
    0x84000df8    0x72    ld a4,192(a4)
    0x84000dfa    0x74    sd a4,144(a5)
    0x84000dfc    0x76    sd s0,0(a5)
    0x84000dfe    0x78    ld ra,40(sp)          ; stack access
    0x84000e00    0x7a    ld s0,32(sp)          ; stack access
    0x84000e02    0x7c    ld s1,24(sp)          ; stack access
    0x84000e04    0x7e    ld s2,16(sp)          ; stack access
    0x84000e06    0x80    ld s3,8(sp)           ; stack access
    0x84000e08    0x82    addi sp,sp,48
    0x84000e0a    0x84    ret
    0x84000e0c    0x86    mv a0,s0
    0x84000e0e    0x88    jal ra,ffffffff84000656 <calculate_extra_bi_size_bits>
    0x84000e12    0x8c    li a1,1
    0x84000e14    0x8e    sll a1,a1,a0
    0x84000e18    0x92    auipc a0,0x1
    0x84000e1c    0x96    ld a0,-1648(a0) # ffffffff840017a8 <rootserver+0x28>
    0x84000e20    0x9a    jal ra,ffffffff840156b8 <memzero>
    0x84000e24    0x9e    j ffffffff84000daa <populate_bi_frame+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 89 nodes.

Section create_frames_of_region (207 of 267)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 80 instructions.

RVC_FTTFT____FFFFTFT.

Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
43 stack accesses found. Annotated code for `create_frames_of_region`:

    0x84000830     0x0    addi sp,sp,-160
    0x84000832     0x2    sd ra,152(sp)         ; stack access
    0x84000834     0x4    sd s0,144(sp)         ; stack access
    0x84000836     0x6    sd s1,136(sp)         ; stack access
    0x84000838     0x8    sd s2,128(sp)         ; stack access
    0x8400083a     0xa    sd s3,120(sp)         ; stack access
    0x8400083c     0xc    sd s4,112(sp)         ; stack access
    0x8400083e     0xe    sd s5,104(sp)         ; stack access
    0x84000840    0x10    sd s6,96(sp)          ; stack access
    0x84000842    0x12    sd s7,88(sp)          ; stack access
    0x84000844    0x14    sd s8,80(sp)          ; stack access
    0x84000846    0x16    sd s9,72(sp)          ; stack access
    0x84000848    0x18    mv s7,a0
    0x8400084a    0x1a    sd a1,32(sp)          ; stack access
    0x8400084c    0x1c    sd a2,40(sp)          ; stack access
    0x8400084e    0x1e    sd a3,16(sp)          ; stack access
    0x84000850    0x20    sd a4,24(sp)          ; stack access
    0x84000852    0x22    auipc s9,0x1
    0x84000856    0x26    ld s9,-226(s9) # ffffffff84001770 <ndks_boot+0x250>
    0x8400085a    0x2a    bgeu a5,a6,ffffffff840008cc <create_frames_of_region+0x9c>
    0x8400085e    0x2e    mv s2,a7
    0x84000860    0x30    mv s1,a6
    0x84000862    0x32    mv s0,a5
    0x84000864    0x34    li s3,1
    0x84000866    0x36    slli s8,s3,0x3b
    0x8400086a    0x3a    lui s6,0xfe000
    0x8400086e    0x3e    srli s6,s6,0x10
    0x84000872    0x42    slli s5,s3,0x26
    0x84000876    0x46    ld a5,160(sp)         ; stack access
    0x84000878    0x48    sub s5,s5,a5
    0x8400087c    0x4c    lui s4,0x1
    0x8400087e    0x4e    j ffffffff840008a0 <create_frames_of_region+0x70>
    0x84000880    0x50    sd s8,48(sp)          ; stack access
    0x84000882    0x52    slli a5,s0,0x9
    0x84000886    0x56    and a5,a5,s6
    0x8400088a    0x5a    sd a5,56(sp)          ; stack access
    0x8400088c    0x5c    ld a2,48(sp)          ; stack access
    0x8400088e    0x5e    ld a3,56(sp)          ; stack access
    0x84000890    0x60    ld a0,32(sp)          ; stack access
    0x84000892    0x62    ld a1,40(sp)          ; stack access
    0x84000894    0x64    jal ra,ffffffff8400068e <provide_cap>
    0x84000898    0x68    beqz a0,ffffffff840008be <create_frames_of_region+0x8e>
    0x8400089a    0x6a    add s0,s0,s4
    0x8400089c    0x6c    bgeu s0,s1,ffffffff840008cc <create_frames_of_region+0x9c>
    0x840008a0    0x70    beqz s2,ffffffff84000880 <create_frames_of_region+0x50>
    0x840008a4    0x74    mv a6,s3
    0x840008a6    0x76    li a5,0
    0x840008a8    0x78    mv a4,s3
    0x840008aa    0x7a    add a3,s5,s0
    0x840008ae    0x7e    mv a2,s0
    0x840008b0    0x80    ld a0,16(sp)          ; stack access
    0x840008b2    0x82    ld a1,24(sp)          ; stack access
    0x840008b4    0x84    jal ra,ffffffff8400026a <create_mapped_it_frame_cap>
    0x840008b8    0x88    sd a0,48(sp)          ; stack access
    0x840008ba    0x8a    sd a1,56(sp)          ; stack access
    0x840008bc    0x8c    j ffffffff8400088c <create_frames_of_region+0x5c>
    0x840008be    0x8e    sd zero,0(s7) # fffffffffe000000 <ki_end+0x79fd2000>  ; stack access
    0x840008c2    0x92    sd zero,8(s7)         ; stack access
    0x840008c6    0x96    sd zero,16(s7)        ; stack access
    0x840008ca    0x9a    j ffffffff840008e2 <create_frames_of_region+0xb2>
    0x840008cc    0x9c    sd s9,0(s7)           ; stack access
    0x840008d0    0xa0    auipc a5,0x1
    0x840008d4    0xa4    ld a5,-352(a5) # ffffffff84001770 <ndks_boot+0x250>
    0x840008d8    0xa8    sd a5,8(s7)           ; stack access
    0x840008dc    0xac    li a5,1
    0x840008de    0xae    sd a5,16(s7)          ; stack access
    0x840008e2    0xb2    mv a0,s7
    0x840008e4    0xb4    ld ra,152(sp)         ; stack access
    0x840008e6    0xb6    ld s0,144(sp)         ; stack access
    0x840008e8    0xb8    ld s1,136(sp)         ; stack access
    0x840008ea    0xba    ld s2,128(sp)         ; stack access
    0x840008ec    0xbc    ld s3,120(sp)         ; stack access
    0x840008ee    0xbe    ld s4,112(sp)         ; stack access
    0x840008f0    0xc0    ld s5,104(sp)         ; stack access
    0x840008f2    0xc2    ld s6,96(sp)          ; stack access
    0x840008f4    0xc4    ld s7,88(sp)          ; stack access
    0x840008f6    0xc6    ld s8,80(sp)          ; stack access
    0x840008f8    0xc8    ld s9,72(sp)          ; stack access
    0x840008fa    0xca    addi sp,sp,160
    0x840008fc    0xcc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 136 nodes.

Section create_bi_frame_cap (208 of 267)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 30 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x8400060a     0x0    addi sp,sp,-80
    0x8400060c     0x2    sd ra,72(sp)          ; stack access
    0x8400060e     0x4    sd s0,64(sp)          ; stack access
    0x84000610     0x6    sd s1,56(sp)          ; stack access
    0x84000612     0x8    sd a0,16(sp)          ; stack access
    0x84000614     0xa    sd a1,24(sp)          ; stack access
    0x84000616     0xc    mv a0,a2
    0x84000618     0xe    mv a1,a3
    0x8400061a    0x10    mv a3,a4
    0x8400061c    0x12    li a6,0
    0x8400061e    0x14    li a5,0
    0x84000620    0x16    li a4,1
    0x84000622    0x18    auipc a2,0x1
    0x84000626    0x1c    ld a2,382(a2) # ffffffff840017a0 <rootserver+0x20>
    0x8400062a    0x20    jal ra,ffffffff8400026a <create_mapped_it_frame_cap>
    0x8400062e    0x24    mv s1,a0
    0x84000630    0x26    mv s0,a1
    0x84000632    0x28    ld a0,16(sp)          ; stack access
    0x84000634    0x2a    ld a1,24(sp)          ; stack access
    0x84000636    0x2c    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x8400063a    0x30    sd s1,288(a0)
    0x8400063e    0x34    sd s0,296(a0)
    0x84000642    0x38    sd zero,304(a0)
    0x84000646    0x3c    li a5,3
    0x84000648    0x3e    sd a5,312(a0)
    0x8400064c    0x42    ld ra,72(sp)          ; stack access
    0x8400064e    0x44    ld s0,64(sp)          ; stack access
    0x84000650    0x46    ld s1,56(sp)          ; stack access
    0x84000652    0x48    addi sp,sp,80
    0x84000654    0x4a    ret

Proving inst theorems
---------------------

30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 48 nodes.

Section map_kernel_window (209 of 267)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 69 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_window`:

    0x8400047c     0x0    addi sp,sp,-64
    0x8400047e     0x2    sd ra,56(sp)          ; stack access
    0x84000480     0x4    sd s0,48(sp)          ; stack access
    0x84000482     0x6    sd s1,40(sp)          ; stack access
    0x84000484     0x8    sd s2,32(sp)          ; stack access
    0x84000486     0xa    sd s3,24(sp)          ; stack access
    0x84000488     0xc    sd s4,16(sp)          ; stack access
    0x8400048a     0xe    sd s5,8(sp)           ; stack access
    0x8400048c    0x10    sd s6,0(sp)           ; stack access
    0x8400048e    0x12    li s1,-1
    0x84000490    0x14    slli s1,s1,0x26
    0x84000492    0x16    auipc s6,0x1a
    0x84000496    0x1a    addi s6,s6,-1170 # ffffffff8401a000 <kernel_root_pageTable>
    0x8400049a    0x1e    li s2,1
    0x8400049c    0x20    slli s5,s2,0x26
    0x840004a0    0x24    lui s4,0x40000
    0x840004a4    0x28    lui s3,0x80000
    0x840004a8    0x2c    srli s0,s1,0x1e
    0x840004ac    0x30    andi s0,s0,511
    0x840004b0    0x34    slli s0,s0,0x3
    0x840004b2    0x36    add s0,s0,s6
    0x840004b4    0x38    mv a1,s2
    0x840004b6    0x3a    add a0,s1,s5
    0x840004ba    0x3e    jal ra,ffffffff840100da <pte_next>
    0x840004be    0x42    sd a0,0(s0)
    0x840004c0    0x44    add s1,s1,s4
    0x840004c2    0x46    bne s1,s3,ffffffff840004a8 <map_kernel_window+0x2c>
    0x840004c6    0x4a    li s0,1
    0x840004c8    0x4c    slli a5,s0,0x20
    0x840004cc    0x50    auipc s1,0x19
    0x840004d0    0x54    addi s1,s1,-1228 # ffffffff84019000 <kernel_image_level2_pt>
    0x840004d4    0x58    add s1,s1,a5
    0x840004d6    0x5a    auipc s2,0x1b
    0x840004da    0x5e    addi s2,s2,-1238 # ffffffff8401b000 <kernel_root_pageTable+0x1000>
    0x840004de    0x62    li a1,0
    0x840004e0    0x64    mv a0,s1
    0x840004e2    0x66    jal ra,ffffffff840100da <pte_next>
    0x840004e6    0x6a    sd a0,-2032(s2)
    0x840004ea    0x6e    li a1,0
    0x840004ec    0x70    mv a0,s1
    0x840004ee    0x72    jal ra,ffffffff840100da <pte_next>
    0x840004f2    0x76    sd a0,-16(s2)
    0x840004f6    0x7a    li s2,0
    0x840004f8    0x7c    slli s0,s0,0x1f
    0x840004fa    0x7e    auipc s5,0x19
    0x840004fe    0x82    addi s5,s5,-1274 # ffffffff84019000 <kernel_image_level2_pt>
    0x84000502    0x86    lui s4,0x200
    0x84000506    0x8a    li s3,3
    0x84000508    0x8c    slli s3,s3,0x1e
    0x8400050a    0x8e    slli s1,s2,0x3
    0x8400050e    0x92    add s1,s1,s5
    0x84000510    0x94    li a1,1
    0x84000512    0x96    mv a0,s0
    0x84000514    0x98    jal ra,ffffffff840100da <pte_next>
    0x84000518    0x9c    sd a0,0(s1)
    0x8400051a    0x9e    addi s2,s2,1
    0x8400051c    0xa0    add s0,s0,s4
    0x8400051e    0xa2    bne s0,s3,ffffffff8400050a <map_kernel_window+0x8e>
    0x84000522    0xa6    jal ra,ffffffff84000458 <map_kernel_devices>
    0x84000526    0xaa    ld ra,56(sp)          ; stack access
    0x84000528    0xac    ld s0,48(sp)          ; stack access
    0x8400052a    0xae    ld s1,40(sp)          ; stack access
    0x8400052c    0xb0    ld s2,32(sp)          ; stack access
    0x8400052e    0xb2    ld s3,24(sp)          ; stack access
    0x84000530    0xb4    ld s4,16(sp)          ; stack access
    0x84000532    0xb6    ld s5,8(sp)           ; stack access
    0x84000534    0xb8    ld s6,0(sp)           ; stack access
    0x84000536    0xba    addi sp,sp,64
    0x84000538    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 99 nodes.

Section map_kernel_devices (210 of 267)
=======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `map_kernel_devices`:

    0x84000458     0x0    addi sp,sp,-32
    0x8400045a     0x2    sd ra,24(sp)          ; stack access
    0x8400045c     0x4    li a2,1
    0x8400045e     0x6    lui a1,0xc0000
    0x84000462     0xa    lui a0,0xc000
    0x84000466     0xe    jal ra,ffffffff840000c4 <map_kernel_frame>
    0x8400046a    0x12    lui a0,0xc000
    0x8400046e    0x16    lui a1,0xc001
    0x84000472    0x1a    jal ra,ffffffff84000364 <reserve_region>
    0x84000476    0x1e    ld ra,24(sp)          ; stack access
    0x84000478    0x20    addi sp,sp,32
    0x8400047a    0x22    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 17 nodes.

Section map_it_frame_cap (211 of 267)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 46 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x840001fc     0x0    addi sp,sp,-96
    0x840001fe     0x2    sd ra,88(sp)          ; stack access
    0x84000200     0x4    sd s0,80(sp)          ; stack access
    0x84000202     0x6    sd s1,72(sp)          ; stack access
    0x84000204     0x8    sd s2,64(sp)          ; stack access
    0x84000206     0xa    sd s3,56(sp)          ; stack access
    0x84000208     0xc    sd a0,16(sp)          ; stack access
    0x8400020a     0xe    sd a1,24(sp)          ; stack access
    0x8400020c    0x10    mv s3,a2
    0x8400020e    0x12    sd a2,0(sp)           ; stack access
    0x84000210    0x14    mv s0,a3
    0x84000212    0x16    sd a3,8(sp)           ; stack access
    0x84000214    0x18    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000218    0x1c    mv s2,a0
    0x8400021a    0x1e    mv a0,s3
    0x8400021c    0x20    mv a1,s0
    0x8400021e    0x22    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000222    0x26    mv s0,a0
    0x84000224    0x28    slli a1,s3,0x19
    0x84000228    0x2c    srli a1,a1,0x19
    0x8400022a    0x2e    slli a5,s3,0x19
    0x8400022e    0x32    bgez a5,ffffffff84000238 <map_it_frame_cap+0x3c>
    0x84000232    0x36    li a5,-1
    0x84000234    0x38    slli a5,a5,0x27
    0x84000236    0x3a    or a1,a1,a5
    0x84000238    0x3c    mv a0,s2
    0x8400023a    0x3e    jal ra,ffffffff840106c6 <lookupPTSlot>
    0x8400023e    0x42    sd a0,32(sp)          ; stack access
    0x84000240    0x44    sd a1,40(sp)          ; stack access
    0x84000242    0x46    li a5,1
    0x84000244    0x48    slli a5,a5,0x26
    0x84000246    0x4a    add s0,s0,a5
    0x84000248    0x4c    srli s0,s0,0x2
    0x8400024a    0x4e    lui a5,0xfff00
    0x8400024e    0x52    srli a5,a5,0xa
    0x84000250    0x54    and s0,s0,a5
    0x84000252    0x56    ori s0,s0,223
    0x84000256    0x5a    sd s0,0(a0)
    0x84000258    0x5c    sfence.vma
    0x8400025c    0x60    ld ra,88(sp)          ; stack access
    0x8400025e    0x62    ld s0,80(sp)          ; stack access
    0x84000260    0x64    ld s1,72(sp)          ; stack access
    0x84000262    0x66    ld s2,64(sp)          ; stack access
    0x84000264    0x68    ld s3,56(sp)          ; stack access
    0x84000266    0x6a    addi sp,sp,96
    0x84000268    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 70 nodes.

Section map_it_pt_cap (212 of 267)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 45 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

18 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x84000190     0x0    addi sp,sp,-80
    0x84000192     0x2    sd ra,72(sp)          ; stack access
    0x84000194     0x4    sd s0,64(sp)          ; stack access
    0x84000196     0x6    sd s1,56(sp)          ; stack access
    0x84000198     0x8    sd s2,48(sp)          ; stack access
    0x8400019a     0xa    sd a0,16(sp)          ; stack access
    0x8400019c     0xc    sd a1,24(sp)          ; stack access
    0x8400019e     0xe    sd a2,0(sp)           ; stack access
    0x840001a0    0x10    sd a3,8(sp)           ; stack access
    0x840001a2    0x12    slli s1,a2,0x19
    0x840001a6    0x16    srli s1,s1,0x19
    0x840001a8    0x18    slli a5,a2,0x19
    0x840001ac    0x1c    bgez a5,ffffffff840001b6 <map_it_pt_cap+0x26>
    0x840001b0    0x20    li a5,-1
    0x840001b2    0x22    slli a5,a5,0x27
    0x840001b4    0x24    or s1,s1,a5
    0x840001b6    0x26    ld a0,16(sp)          ; stack access
    0x840001b8    0x28    ld a1,24(sp)          ; stack access
    0x840001ba    0x2a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840001be    0x2e    mv s2,a0
    0x840001c0    0x30    ld a0,0(sp)           ; stack access
    0x840001c2    0x32    ld a1,8(sp)           ; stack access
    0x840001c4    0x34    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840001c8    0x38    mv s0,a0
    0x840001ca    0x3a    mv a1,s1
    0x840001cc    0x3c    mv a0,s2
    0x840001ce    0x3e    jal ra,ffffffff840106c6 <lookupPTSlot>
    0x840001d2    0x42    sd a0,32(sp)          ; stack access
    0x840001d4    0x44    sd a1,40(sp)          ; stack access
    0x840001d6    0x46    li a5,1
    0x840001d8    0x48    slli a5,a5,0x26
    0x840001da    0x4a    add s0,s0,a5
    0x840001dc    0x4c    srli s0,s0,0x2
    0x840001de    0x4e    lui a5,0xfff00
    0x840001e2    0x52    srli a5,a5,0xa
    0x840001e4    0x54    and s0,s0,a5
    0x840001e6    0x56    ori s0,s0,193
    0x840001ea    0x5a    sd s0,0(a0)
    0x840001ec    0x5c    sfence.vma
    0x840001f0    0x60    ld ra,72(sp)          ; stack access
    0x840001f2    0x62    ld s0,64(sp)          ; stack access
    0x840001f4    0x64    ld s1,56(sp)          ; stack access
    0x840001f6    0x66    ld s2,48(sp)          ; stack access
    0x840001f8    0x68    addi sp,sp,80
    0x840001fa    0x6a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
45 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 71 nodes.

Section c_handle_syscall (213 of 267)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 10 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x84016edc     0x0    addi sp,sp,-16
    0x84016ede     0x2    sd ra,8(sp)           ; stack access
    0x84016ee0     0x4    li a5,-1
    0x84016ee2     0x6    beq a7,a5,ffffffff84016ef2 <c_handle_syscall+0x16>
    0x84016ee6     0xa    li a5,-2
    0x84016ee8     0xc    beq a7,a5,ffffffff84016ef6 <c_handle_syscall+0x1a>
    0x84016eec    0x10    mv a0,a7
    0x84016eee    0x12    jal ra,ffffffff84016838 <slowpath>
    0x84016ef2    0x16    jal ra,ffffffff84016850 <fastpath_call>
    0x84016ef6    0x1a    jal ra,ffffffff84016b6c <fastpath_reply_recv>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 18 nodes.

Section invokeTCB_ReadRegisters (214 of 267)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 106 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x84014f0c      0x0    addi sp,sp,-48
    0x84014f0e      0x2    sd ra,40(sp)          ; stack access
    0x84014f10      0x4    sd s0,32(sp)          ; stack access
    0x84014f12      0x6    sd s1,24(sp)          ; stack access
    0x84014f14      0x8    sd s2,16(sp)          ; stack access
    0x84014f16      0xa    sd s3,8(sp)           ; stack access
    0x84014f18      0xc    mv s1,a0
    0x84014f1a      0xe    mv s0,a2
    0x84014f1c     0x10    mv s3,a4
    0x84014f1e     0x12    auipc s2,0x19
    0x84014f22     0x16    ld s2,-1158(s2) # ffffffff8402da98 <ksCurThread>
    0x84014f26     0x1a    bnez a1,ffffffff84014fa2 <invokeTCB_ReadRegisters+0x96>
    0x84014f28     0x1c    beqz s3,ffffffff84014fc2 <invokeTCB_ReadRegisters+0xb6>
    0x84014f2c     0x20    mv a1,s2
    0x84014f2e     0x22    li a0,1
    0x84014f30     0x24    jal ra,ffffffff840104e4 <lookupIPCBuffer>
    0x84014f34     0x28    sd zero,72(s2)
    0x84014f38     0x2c    beqz s0,ffffffff84015016 <invokeTCB_ReadRegisters+0x10a>
    0x84014f3a     0x2e    ld a5,264(s1)
    0x84014f3e     0x32    sd a5,88(s2)
    0x84014f42     0x36    li a5,1
    0x84014f44     0x38    bgeu a5,s0,ffffffff84014fa8 <invokeTCB_ReadRegisters+0x9c>
    0x84014f48     0x3c    ld a5,0(s1)
    0x84014f4a     0x3e    sd a5,96(s2)
    0x84014f4e     0x42    li a5,2
    0x84014f50     0x44    bgeu a5,s0,ffffffff84014fda <invokeTCB_ReadRegisters+0xce>
    0x84014f54     0x48    ld a5,8(s1)
    0x84014f56     0x4a    sd a5,104(s2)
    0x84014f5a     0x4e    li a5,3
    0x84014f5c     0x50    bgeu a5,s0,ffffffff84014fde <invokeTCB_ReadRegisters+0xd2>
    0x84014f60     0x54    ld a5,16(s1)
    0x84014f62     0x56    sd a5,112(s2)
    0x84014f66     0x5a    li a5,4
    0x84014f68     0x5c    li a3,4
    0x84014f6a     0x5e    bgeu a5,s0,ffffffff84014faa <invokeTCB_ReadRegisters+0x9e>
    0x84014f6e     0x62    li a3,4
    0x84014f70     0x64    beqz a0,ffffffff8401501a <invokeTCB_ReadRegisters+0x10e>
    0x84014f72     0x66    bgeu a3,s0,ffffffff84014fb0 <invokeTCB_ReadRegisters+0xa4>
    0x84014f76     0x6a    slli a4,a3,0x3
    0x84014f7a     0x6e    auipc a2,0x2
    0x84014f7e     0x72    addi a2,a2,1454 # ffffffff84017528 <frameRegisters>
    0x84014f82     0x76    add a2,a2,a4
    0x84014f84     0x78    add a4,a4,a0
    0x84014f86     0x7a    li a1,16
    0x84014f88     0x7c    addi a3,a3,1
    0x84014f8a     0x7e    ld a5,0(a2)
    0x84014f8c     0x80    slli a5,a5,0x3
    0x84014f8e     0x82    add a5,a5,s1
    0x84014f90     0x84    ld a5,0(a5)
    0x84014f92     0x86    sd a5,8(a4)
    0x84014f94     0x88    bgeu a3,s0,ffffffff84014fb0 <invokeTCB_ReadRegisters+0xa4>
    0x84014f98     0x8c    addi a2,a2,8
    0x84014f9a     0x8e    addi a4,a4,8
    0x84014f9c     0x90    bne a3,a1,ffffffff84014f88 <invokeTCB_ReadRegisters+0x7c>
    0x84014fa0     0x94    j ffffffff84014fb0 <invokeTCB_ReadRegisters+0xa4>
    0x84014fa2     0x96    jal ra,ffffffff84012d86 <suspend>
    0x84014fa6     0x9a    j ffffffff84014f28 <invokeTCB_ReadRegisters+0x1c>
    0x84014fa8     0x9c    li a3,1
    0x84014faa     0x9e    beqz a0,ffffffff8401501a <invokeTCB_ReadRegisters+0x10e>
    0x84014fac     0xa0    bltu a3,s0,ffffffff84014f72 <invokeTCB_ReadRegisters+0x66>
    0x84014fb0     0xa4    li a5,16
    0x84014fb2     0xa6    bltu a5,s0,ffffffff84014fe6 <invokeTCB_ReadRegisters+0xda>
    0x84014fb6     0xaa    li a5,0
    0x84014fb8     0xac    add a5,a5,a3
    0x84014fba     0xae    andi a5,a5,127
    0x84014fbe     0xb2    sd a5,80(s2)
    0x84014fc2     0xb6    li a1,1
    0x84014fc4     0xb8    mv a0,s2
    0x84014fc6     0xba    jal ra,ffffffff840122d0 <setThreadState>
    0x84014fca     0xbe    li a0,0
    0x84014fcc     0xc0    ld ra,40(sp)          ; stack access
    0x84014fce     0xc2    ld s0,32(sp)          ; stack access
    0x84014fd0     0xc4    ld s1,24(sp)          ; stack access
    0x84014fd2     0xc6    ld s2,16(sp)          ; stack access
    0x84014fd4     0xc8    ld s3,8(sp)           ; stack access
    0x84014fd6     0xca    addi sp,sp,48
    0x84014fd8     0xcc    ret
    0x84014fda     0xce    li a3,2
    0x84014fdc     0xd0    j ffffffff84014faa <invokeTCB_ReadRegisters+0x9e>
    0x84014fde     0xd2    li a3,3
    0x84014fe0     0xd4    j ffffffff84014faa <invokeTCB_ReadRegisters+0x9e>
    0x84014fe2     0xd6    mv a5,s0
    0x84014fe4     0xd8    j ffffffff84014fb8 <invokeTCB_ReadRegisters+0xac>
    0x84014fe6     0xda    ld a5,72(s1)
    0x84014fe8     0xdc    sd a5,136(a0)
    0x84014fea     0xde    auipc a1,0x2
    0x84014fee     0xe2    addi a1,a1,1478 # ffffffff840175b0 <gpRegisters+0x8>
    0x84014ff2     0xe6    addi a0,a0,144
    0x84014ff6     0xea    addi s0,s0,-16
    0x84014ff8     0xec    li a5,1
    0x84014ffa     0xee    li a2,16
    0x84014ffc     0xf0    beq a5,s0,ffffffff84014fe2 <invokeTCB_ReadRegisters+0xd6>
    0x84015000     0xf4    ld a4,0(a1)
    0x84015002     0xf6    slli a4,a4,0x3
    0x84015004     0xf8    add a4,a4,s1
    0x84015006     0xfa    ld a4,0(a4)
    0x84015008     0xfc    sd a4,0(a0)
    0x8401500a     0xfe    addi a5,a5,1
    0x8401500c    0x100    addi a1,a1,8
    0x8401500e    0x102    addi a0,a0,8
    0x84015010    0x104    bne a5,a2,ffffffff84014ffc <invokeTCB_ReadRegisters+0xf0>
    0x84015014    0x108    j ffffffff84014fb8 <invokeTCB_ReadRegisters+0xac>
    0x84015016    0x10a    mv a3,s0
    0x84015018    0x10c    bnez a0,ffffffff84014fb0 <invokeTCB_ReadRegisters+0xa4>
    0x8401501a    0x10e    li a5,0
    0x8401501c    0x110    j ffffffff84014fb8 <invokeTCB_ReadRegisters+0xac>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
106 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 173 nodes.

Section invokeTCB_CopyRegisters (215 of 267)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x84014dbe     0x0    addi sp,sp,-48
    0x84014dc0     0x2    sd ra,40(sp)          ; stack access
    0x84014dc2     0x4    sd s0,32(sp)          ; stack access
    0x84014dc4     0x6    sd s1,24(sp)          ; stack access
    0x84014dc6     0x8    sd s2,16(sp)          ; stack access
    0x84014dc8     0xa    sd s3,8(sp)           ; stack access
    0x84014dca     0xc    sd s4,0(sp)           ; stack access
    0x84014dcc     0xe    mv s0,a0
    0x84014dce    0x10    mv s1,a1
    0x84014dd0    0x12    mv s4,a3
    0x84014dd2    0x14    mv s3,a4
    0x84014dd4    0x16    mv s2,a5
    0x84014dd6    0x18    bnez a2,ffffffff84014e52 <invokeTCB_CopyRegisters+0x94>
    0x84014dd8    0x1a    bnez s4,ffffffff84014e5a <invokeTCB_CopyRegisters+0x9c>
    0x84014ddc    0x1e    beqz s3,ffffffff84014e0c <invokeTCB_CopyRegisters+0x4e>
    0x84014de0    0x22    auipc a3,0x2
    0x84014de4    0x26    addi a3,a3,1864 # ffffffff84017528 <frameRegisters>
    0x84014de8    0x2a    auipc a1,0x2
    0x84014dec    0x2e    addi a1,a1,1984 # ffffffff840175a8 <gpRegisters>
    0x84014df0    0x32    ld a4,0(a3)
    0x84014df2    0x34    slli a4,a4,0x3
    0x84014df4    0x36    add a2,s1,a4
    0x84014df8    0x3a    ld a2,0(a2)
    0x84014dfa    0x3c    add a4,a4,s0
    0x84014dfc    0x3e    sd a2,0(a4)
    0x84014dfe    0x40    addi a3,a3,8
    0x84014e00    0x42    bne a3,a1,ffffffff84014df0 <invokeTCB_CopyRegisters+0x32>
    0x84014e04    0x46    ld a5,264(s0)
    0x84014e08    0x4a    sd a5,272(s0)
    0x84014e0c    0x4e    beqz s2,ffffffff84014e34 <invokeTCB_CopyRegisters+0x76>
    0x84014e10    0x52    auipc a4,0x2
    0x84014e14    0x56    addi a4,a4,1944 # ffffffff840175a8 <gpRegisters>
    0x84014e18    0x5a    auipc a2,0x3
    0x84014e1c    0x5e    addi a2,a2,-2032 # ffffffff84017628 <gpRegisters+0x80>
    0x84014e20    0x62    ld a5,0(a4)
    0x84014e22    0x64    slli a5,a5,0x3
    0x84014e24    0x66    add a3,s1,a5
    0x84014e28    0x6a    ld a3,0(a3)
    0x84014e2a    0x6c    add a5,a5,s0
    0x84014e2c    0x6e    sd a3,0(a5)
    0x84014e2e    0x70    addi a4,a4,8
    0x84014e30    0x72    bne a4,a2,ffffffff84014e20 <invokeTCB_CopyRegisters+0x62>
    0x84014e34    0x76    auipc a5,0x19
    0x84014e38    0x7a    ld a5,-924(a5) # ffffffff8402da98 <ksCurThread>
    0x84014e3c    0x7e    beq a5,s0,ffffffff84014e62 <invokeTCB_CopyRegisters+0xa4>
    0x84014e40    0x82    li a0,0
    0x84014e42    0x84    ld ra,40(sp)          ; stack access
    0x84014e44    0x86    ld s0,32(sp)          ; stack access
    0x84014e46    0x88    ld s1,24(sp)          ; stack access
    0x84014e48    0x8a    ld s2,16(sp)          ; stack access
    0x84014e4a    0x8c    ld s3,8(sp)           ; stack access
    0x84014e4c    0x8e    ld s4,0(sp)           ; stack access
    0x84014e4e    0x90    addi sp,sp,48
    0x84014e50    0x92    ret
    0x84014e52    0x94    mv a0,a1
    0x84014e54    0x96    jal ra,ffffffff84012d86 <suspend>
    0x84014e58    0x9a    j ffffffff84014dd8 <invokeTCB_CopyRegisters+0x1a>
    0x84014e5a    0x9c    mv a0,s0
    0x84014e5c    0x9e    jal ra,ffffffff840137bc <restart>
    0x84014e60    0xa2    j ffffffff84014ddc <invokeTCB_CopyRegisters+0x1e>
    0x84014e62    0xa4    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84014e66    0xa8    j ffffffff84014e40 <invokeTCB_CopyRegisters+0x82>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 101 nodes.

Section c_handle_exception (216 of 267)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 17 instructions.

Skipping 14202573 csrr a0,scause


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x840141aa     0x0    addi sp,sp,-16
    0x840141ac     0x2    sd ra,8(sp)           ; stack access
    0x840141ae     0x4    csrr a0,scause
    0x840141b2     0x8    li a5,15
    0x840141b4     0xa    bltu a5,a0,ffffffff840141d4 <c_handle_exception+0x2a>
    0x840141b8     0xe    slli a4,a0,0x2
    0x840141bc    0x12    auipc a3,0x3
    0x840141c0    0x16    addi a3,a3,348 # ffffffff84017318 <ksDomScheduleLength+0x268>
    0x840141c4    0x1a    add a4,a4,a3
    0x840141c6    0x1c    lw a5,0(a4)
    0x840141c8    0x1e    add a5,a5,a3
    0x840141ca    0x20    jr a5
    0x840141cc    0x22    jal ra,ffffffff84014178 <handleVMFaultEvent>
    0x840141d0    0x26    jal ra,ffffffff840102a8 <restore_user_context>
    0x840141d4    0x2a    li a1,0
    0x840141d6    0x2c    jal ra,ffffffff8401413a <handleUserLevelFault>
    0x840141da    0x30    j ffffffff840141d0 <c_handle_exception+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 26 nodes.

Section handleUserLevelFault (217 of 267)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x8401413a     0x0    addi sp,sp,-16
    0x8401413c     0x2    sd ra,8(sp)           ; stack access
    0x8401413e     0x4    auipc a4,0x7
    0x84014142     0x8    addi a4,a4,1730 # ffffffff8401b800 <current_fault>
    0x84014146     0xc    slli a1,a1,0x4
    0x84014148     0xe    li a5,-1
    0x8401414a    0x10    srli a5,a5,0x20
    0x8401414c    0x12    and a1,a1,a5
    0x8401414e    0x14    slli a0,a0,0x20
    0x84014150    0x16    or a1,a1,a0
    0x84014152    0x18    ori a1,a1,3
    0x84014156    0x1c    sd a1,0(a4)
    0x84014158    0x1e    sd zero,8(a4)
    0x8401415c    0x22    auipc a0,0x1a
    0x84014160    0x26    ld a0,-1732(a0) # ffffffff8402da98 <ksCurThread>
    0x84014164    0x2a    jal ra,ffffffff840140ec <handleFault>
    0x84014168    0x2e    jal ra,ffffffff8401292a <schedule>
    0x8401416c    0x32    jal ra,ffffffff840123c0 <activateThread>
    0x84014170    0x36    li a0,0
    0x84014172    0x38    ld ra,8(sp)           ; stack access
    0x84014174    0x3a    addi sp,sp,16
    0x84014176    0x3c    ret

Proving inst theorems
---------------------

22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 31 nodes.

Section handleUnknownSyscall (218 of 267)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x8401410c     0x0    addi sp,sp,-16
    0x8401410e     0x2    sd ra,8(sp)           ; stack access
    0x84014110     0x4    auipc a5,0x7
    0x84014114     0x8    addi a5,a5,1776 # ffffffff8401b800 <current_fault>
    0x84014118     0xc    li a4,2
    0x8401411a     0xe    sd a4,0(a5)
    0x8401411c    0x10    sd a0,8(a5)
    0x8401411e    0x12    auipc a0,0x1a
    0x84014122    0x16    ld a0,-1670(a0) # ffffffff8402da98 <ksCurThread>
    0x84014126    0x1a    jal ra,ffffffff840140ec <handleFault>
    0x8401412a    0x1e    jal ra,ffffffff8401292a <schedule>
    0x8401412e    0x22    jal ra,ffffffff840123c0 <activateThread>
    0x84014132    0x26    li a0,0
    0x84014134    0x28    ld ra,8(sp)           ; stack access
    0x84014136    0x2a    addi sp,sp,16
    0x84014138    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 25 nodes.

Section doIPCTransfer (219 of 267)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 46 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `doIPCTransfer`:

    0x84013d58     0x0    addi sp,sp,-64
    0x84013d5a     0x2    sd ra,56(sp)          ; stack access
    0x84013d5c     0x4    sd s0,48(sp)          ; stack access
    0x84013d5e     0x6    sd s1,40(sp)          ; stack access
    0x84013d60     0x8    sd s2,32(sp)          ; stack access
    0x84013d62     0xa    sd s3,24(sp)          ; stack access
    0x84013d64     0xc    sd s4,16(sp)          ; stack access
    0x84013d66     0xe    sd s5,8(sp)           ; stack access
    0x84013d68    0x10    mv s0,a0
    0x84013d6a    0x12    mv s5,a1
    0x84013d6c    0x14    mv s2,a2
    0x84013d6e    0x16    mv s4,a3
    0x84013d70    0x18    mv s1,a4
    0x84013d72    0x1a    mv a1,a4
    0x84013d74    0x1c    li a0,1
    0x84013d76    0x1e    jal ra,ffffffff840104e4 <lookupIPCBuffer>
    0x84013d7a    0x22    mv s3,a0
    0x84013d7c    0x24    ld a5,312(s0)
    0x84013d80    0x28    andi a5,a5,15
    0x84013d82    0x2a    bnez a5,ffffffff84013db0 <doIPCTransfer+0x58>
    0x84013d84    0x2c    mv a1,s0
    0x84013d86    0x2e    li a0,0
    0x84013d88    0x30    jal ra,ffffffff840104e4 <lookupIPCBuffer>
    0x84013d8c    0x34    mv a1,a0
    0x84013d8e    0x36    mv a6,s3
    0x84013d90    0x38    mv a5,s1
    0x84013d92    0x3a    mv a4,s4
    0x84013d94    0x3c    mv a3,s2
    0x84013d96    0x3e    mv a2,s5
    0x84013d98    0x40    mv a0,s0
    0x84013d9a    0x42    jal ra,ffffffff84013bda <doNormalTransfer>
    0x84013d9e    0x46    ld ra,56(sp)          ; stack access
    0x84013da0    0x48    ld s0,48(sp)          ; stack access
    0x84013da2    0x4a    ld s1,40(sp)          ; stack access
    0x84013da4    0x4c    ld s2,32(sp)          ; stack access
    0x84013da6    0x4e    ld s3,24(sp)          ; stack access
    0x84013da8    0x50    ld s4,16(sp)          ; stack access
    0x84013daa    0x52    ld s5,8(sp)           ; stack access
    0x84013dac    0x54    addi sp,sp,64
    0x84013dae    0x56    ret
    0x84013db0    0x58    mv a3,a0
    0x84013db2    0x5a    mv a2,s1
    0x84013db4    0x5c    mv a1,s0
    0x84013db6    0x5e    mv a0,s2
    0x84013db8    0x60    jal ra,ffffffff84011310 <doFaultTransfer>
    0x84013dbc    0x64    j ffffffff84013d9e <doIPCTransfer+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 68 nodes.

Section handleInterrupt (220 of 267)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 87 instructions.

Skipping c01027f3 rdtime a5

Skipping 00000073 ecall

Skipping c0102773 rdtime a4

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterrupt`:

    0x840138f8      0x0    li a5,54
    0x840138fc      0x4    bltu a5,a0,ffffffff8401395c <handleInterrupt+0x64>
    0x84013900      0x8    addi sp,sp,-16
    0x84013902      0xa    sd ra,8(sp)           ; stack access
    0x84013904      0xc    slli a4,a0,0x3
    0x84013908     0x10    auipc a5,0x9
    0x8401390c     0x14    addi a5,a5,912 # ffffffff8401cc98 <intStateIRQTable>
    0x84013910     0x18    add a5,a5,a4
    0x84013912     0x1a    ld a5,0(a5)
    0x84013914     0x1c    li a4,2
    0x84013916     0x1e    beq a5,a4,ffffffff8401399e <handleInterrupt+0xa6>
    0x8401391a     0x22    bltu a4,a5,ffffffff8401398a <handleInterrupt+0x92>
    0x8401391e     0x26    beqz a5,ffffffff840139c0 <handleInterrupt+0xc8>
    0x84013920     0x28    slli a0,a0,0x5
    0x84013922     0x2a    auipc a5,0x19
    0x84013926     0x2e    addi a5,a5,1758 # ffffffff8402d000 <intStateIRQNode>
    0x8401392a     0x32    add a5,a5,a0
    0x8401392c     0x34    ld a4,0(a5)
    0x8401392e     0x36    srli a2,a4,0x3b
    0x84013932     0x3a    li a3,6
    0x84013934     0x3c    bne a2,a3,ffffffff84013990 <handleInterrupt+0x98>
    0x84013938     0x40    slli a3,a4,0x6
    0x8401393c     0x44    bgez a3,ffffffff84013990 <handleInterrupt+0x98>
    0x84013940     0x48    slli a0,a4,0x19
    0x84013944     0x4c    srli a0,a0,0x19
    0x84013946     0x4e    slli a3,a4,0x19
    0x8401394a     0x52    bgez a3,ffffffff84013954 <handleInterrupt+0x5c>
    0x8401394e     0x56    li a4,-1
    0x84013950     0x58    slli a4,a4,0x27
    0x84013952     0x5a    or a0,a0,a4
    0x84013954     0x5c    ld a1,8(a5)
    0x84013956     0x5e    jal ra,ffffffff840137fc <sendSignal>
    0x8401395a     0x62    j ffffffff84013990 <handleInterrupt+0x98>
    0x8401395c     0x64    srli a4,a0,0x5
    0x84013960     0x68    slli a4,a4,0x2
    0x84013962     0x6a    lui a5,0xcc002
    0x84013966     0x6e    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd4100>
    0x8401396a     0x72    add a4,a4,a5
    0x8401396c     0x74    lw a3,0(a4)
    0x8401396e     0x76    andi a0,a0,31
    0x84013970     0x78    li a5,1
    0x84013972     0x7a    sll a0,a5,a0
    0x84013976     0x7e    not a5,a0
    0x8401397a     0x82    and a5,a5,a3
    0x8401397c     0x84    sext.w a5,a5
    0x8401397e     0x86    sw a5,0(a4)
    0x84013980     0x88    auipc a5,0x4
    0x84013984     0x8c    sw zero,648(a5) # ffffffff84017c08 <active_irq>
    0x84013988     0x90    ret
    0x8401398a     0x92    li a4,3
    0x8401398c     0x94    bne a5,a4,ffffffff840139f8 <handleInterrupt+0x100>
    0x84013990     0x98    auipc a5,0x4
    0x84013994     0x9c    sw zero,632(a5) # ffffffff84017c08 <active_irq>
    0x84013998     0xa0    ld ra,8(sp)           ; stack access
    0x8401399a     0xa2    addi sp,sp,16
    0x8401399c     0xa4    ret
    0x8401399e     0xa6    jal ra,ffffffff84012716 <timerTick>
    0x840139a2     0xaa    rdtime a5
    0x840139a6     0xae    addi a5,a5,2000
    0x840139aa     0xb2    mv a0,a5
    0x840139ac     0xb4    li a1,0
    0x840139ae     0xb6    li a2,0
    0x840139b0     0xb8    li a7,0
    0x840139b2     0xba    ecall
    0x840139b6     0xbe    rdtime a4
    0x840139ba     0xc2    bltu a5,a4,ffffffff840139a2 <handleInterrupt+0xaa>
    0x840139be     0xc6    j ffffffff84013990 <handleInterrupt+0x98>
    0x840139c0     0xc8    li a5,54
    0x840139c4     0xcc    beq a0,a5,ffffffff840139ee <handleInterrupt+0xf6>
    0x840139c8     0xd0    srli a4,a0,0x5
    0x840139cc     0xd4    slli a4,a4,0x2
    0x840139ce     0xd6    lui a5,0xcc002
    0x840139d2     0xda    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd4100>
    0x840139d6     0xde    add a4,a4,a5
    0x840139d8     0xe0    lw a3,0(a4)
    0x840139da     0xe2    andi a0,a0,31
    0x840139dc     0xe4    li a5,1
    0x840139de     0xe6    sll a0,a5,a0
    0x840139e2     0xea    not a5,a0
    0x840139e6     0xee    and a5,a5,a3
    0x840139e8     0xf0    sext.w a5,a5
    0x840139ea     0xf2    sw a5,0(a4)
    0x840139ec     0xf4    j ffffffff84013990 <handleInterrupt+0x98>
    0x840139ee     0xf6    li a5,32
    0x840139f2     0xfa    csrrc a5,sie,a5
    0x840139f6     0xfe    j ffffffff84013990 <handleInterrupt+0x98>
    0x840139f8    0x100    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
87 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 127 nodes.

Section decodeIRQHandlerInvocation (221 of 267)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 74 instructions.


Stack analysis
---------------

11 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x840136d2     0x0    addi sp,sp,-48
    0x840136d4     0x2    sd ra,40(sp)          ; stack access
    0x840136d6     0x4    sd s0,32(sp)          ; stack access
    0x840136d8     0x6    sd s1,24(sp)          ; stack access
    0x840136da     0x8    sd s2,16(sp)          ; stack access
    0x840136dc     0xa    mv s0,a1
    0x840136de     0xc    li a5,27
    0x840136e0     0xe    beq a0,a5,ffffffff84013724 <decodeIRQHandlerInvocation+0x52>
    0x840136e4    0x12    li a5,28
    0x840136e6    0x14    beq a0,a5,ffffffff8401378a <decodeIRQHandlerInvocation+0xb8>
    0x840136ea    0x18    li a5,26
    0x840136ec    0x1a    beq a0,a5,ffffffff840136fe <decodeIRQHandlerInvocation+0x2c>
    0x840136f0    0x1e    li a5,3
    0x840136f2    0x20    auipc a4,0x9
    0x840136f6    0x24    sd a5,1414(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840136fa    0x28    li a0,3
    0x840136fc    0x2a    j ffffffff84013718 <decodeIRQHandlerInvocation+0x46>
    0x840136fe    0x2c    li a1,2
    0x84013700    0x2e    auipc a0,0x1a
    0x84013704    0x32    ld a0,920(a0) # ffffffff8402da98 <ksCurThread>
    0x84013708    0x36    jal ra,ffffffff840122d0 <setThreadState>
    0x8401370c    0x3a    sext.w a1,s0
    0x84013710    0x3e    lui a5,0xcc202
    0x84013714    0x42    sw a1,4(a5)
    0x84013716    0x44    li a0,0
    0x84013718    0x46    ld ra,40(sp)          ; stack access
    0x8401371a    0x48    ld s0,32(sp)          ; stack access
    0x8401371c    0x4a    ld s1,24(sp)          ; stack access
    0x8401371e    0x4c    ld s2,16(sp)          ; stack access
    0x84013720    0x4e    addi sp,sp,48
    0x84013722    0x50    ret
    0x84013724    0x52    auipc s1,0x9
    0x84013728    0x56    ld s1,1372(s1) # ffffffff8401cc80 <current_extra_caps>
    0x8401372c    0x5a    beqz s1,ffffffff8401375e <decodeIRQHandlerInvocation+0x8c>
    0x8401372e    0x5c    ld s2,0(s1)
    0x84013732    0x60    sd s2,0(sp)           ; stack access
    0x84013734    0x62    ld a5,8(s1)
    0x84013736    0x64    sd a5,8(sp)           ; stack access
    0x84013738    0x66    srli a4,s2,0x3b
    0x8401373c    0x6a    li a5,6
    0x8401373e    0x6c    bne a4,a5,ffffffff8401374a <decodeIRQHandlerInvocation+0x78>
    0x84013742    0x70    slli a5,s2,0x6
    0x84013746    0x74    bltz a5,ffffffff8401376c <decodeIRQHandlerInvocation+0x9a>
    0x8401374a    0x78    auipc a5,0x9
    0x8401374e    0x7c    addi a5,a5,1278 # ffffffff8401cc48 <current_syscall_error>
    0x84013752    0x80    li a4,2
    0x84013754    0x82    sd a4,48(a5)
    0x84013756    0x84    sd zero,8(a5)
    0x8401375a    0x88    li a0,3
    0x8401375c    0x8a    j ffffffff84013718 <decodeIRQHandlerInvocation+0x46>
    0x8401375e    0x8c    li a5,7
    0x84013760    0x8e    auipc a4,0x9
    0x84013764    0x92    sd a5,1304(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84013768    0x96    li a0,3
    0x8401376a    0x98    j ffffffff84013718 <decodeIRQHandlerInvocation+0x46>
    0x8401376c    0x9a    li a1,2
    0x8401376e    0x9c    auipc a0,0x1a
    0x84013772    0xa0    ld a0,810(a0) # ffffffff8402da98 <ksCurThread>
    0x84013776    0xa4    jal ra,ffffffff840122d0 <setThreadState>
    0x8401377a    0xa8    mv a3,s1
    0x8401377c    0xaa    mv a1,s2
    0x8401377e    0xac    ld a2,8(sp)           ; stack access
    0x84013780    0xae    mv a0,s0
    0x84013782    0xb0    jal ra,ffffffff84013682 <invokeIRQHandler_SetIRQHandler>
    0x84013786    0xb4    li a0,0
    0x84013788    0xb6    j ffffffff84013718 <decodeIRQHandlerInvocation+0x46>
    0x8401378a    0xb8    li a1,2
    0x8401378c    0xba    auipc a0,0x1a
    0x84013790    0xbe    ld a0,780(a0) # ffffffff8402da98 <ksCurThread>
    0x84013794    0xc2    jal ra,ffffffff840122d0 <setThreadState>
    0x84013798    0xc6    mv a0,s0
    0x8401379a    0xc8    jal ra,ffffffff840136b8 <invokeIRQHandler_ClearIRQHandler>
    0x8401379e    0xcc    li a0,0
    0x840137a0    0xce    j ffffffff84013718 <decodeIRQHandlerInvocation+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
74 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 114 nodes.

Section cteDeleteOne (222 of 267)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 23 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteDeleteOne`:

    0x8401364e     0x0    ld a5,0(a0)
    0x84013650     0x2    srli a5,a5,0x3b
    0x84013652     0x4    bnez a5,ffffffff84013656 <cteDeleteOne+0x8>
    0x84013654     0x6    ret
    0x84013656     0x8    addi sp,sp,-64
    0x84013658     0xa    sd ra,56(sp)          ; stack access
    0x8401365a     0xc    sd s0,48(sp)          ; stack access
    0x8401365c     0xe    mv s0,a0
    0x8401365e    0x10    jal ra,ffffffff84011e78 <isFinalCapability>
    0x84013662    0x14    mv a3,a0
    0x84013664    0x16    li a4,1
    0x84013666    0x18    ld a1,0(s0)
    0x84013668    0x1a    ld a2,8(s0)
    0x8401366a    0x1c    mv a0,sp
    0x8401366c    0x1e    jal ra,ffffffff84012dbe <finaliseCap>
    0x84013670    0x22    li a1,0
    0x84013672    0x24    li a2,0
    0x84013674    0x26    mv a0,s0
    0x84013676    0x28    jal ra,ffffffff8401186c <emptySlot>
    0x8401367a    0x2c    ld ra,56(sp)          ; stack access
    0x8401367c    0x2e    ld s0,48(sp)          ; stack access
    0x8401367e    0x30    addi sp,sp,64
    0x84013680    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 37 nodes.

Section cteRevoke (223 of 267)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 54 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cteRevoke`:

    0x8401313c     0x0    addi sp,sp,-64
    0x8401313e     0x2    sd ra,56(sp)          ; stack access
    0x84013140     0x4    sd s0,48(sp)          ; stack access
    0x84013142     0x6    sd s1,40(sp)          ; stack access
    0x84013144     0x8    sd s2,32(sp)          ; stack access
    0x84013146     0xa    sd s3,24(sp)          ; stack access
    0x84013148     0xc    sd s4,16(sp)          ; stack access
    0x8401314a     0xe    sd s5,8(sp)           ; stack access
    0x8401314c    0x10    mv s1,a0
    0x8401314e    0x12    ld a5,24(a0)
    0x84013150    0x14    lui a0,0xf8000
    0x84013154    0x18    srli a0,a0,0x19
    0x84013156    0x1a    and a0,a0,a5
    0x84013158    0x1c    slli a4,a5,0x19
    0x8401315c    0x20    bgez a4,ffffffff8401317a <cteRevoke+0x3e>
    0x84013160    0x24    li s0,-1
    0x84013162    0x26    slli s0,s0,0x27
    0x84013164    0x28    or s0,s0,a0
    0x84013166    0x2a    li s3,1
    0x84013168    0x2c    lui s2,0xf8000
    0x8401316c    0x30    srli s2,s2,0x19
    0x84013170    0x34    slli s5,s3,0x26
    0x84013174    0x38    li s4,-1
    0x84013176    0x3a    slli s4,s4,0x27
    0x84013178    0x3c    j ffffffff84013194 <cteRevoke+0x58>
    0x8401317a    0x3e    mv s0,a0
    0x8401317c    0x40    bnez a0,ffffffff84013166 <cteRevoke+0x2a>
    0x8401317e    0x42    ld ra,56(sp)          ; stack access
    0x84013180    0x44    ld s0,48(sp)          ; stack access
    0x84013182    0x46    ld s1,40(sp)          ; stack access
    0x84013184    0x48    ld s2,32(sp)          ; stack access
    0x84013186    0x4a    ld s3,24(sp)          ; stack access
    0x84013188    0x4c    ld s4,16(sp)          ; stack access
    0x8401318a    0x4e    ld s5,8(sp)           ; stack access
    0x8401318c    0x50    addi sp,sp,64
    0x8401318e    0x52    ret
    0x84013190    0x54    or s0,a0,s4
    0x84013194    0x58    mv a1,s0
    0x84013196    0x5a    mv a0,s1
    0x84013198    0x5c    jal ra,ffffffff84011cee <isMDBParentOf>
    0x8401319c    0x60    beqz a0,ffffffff8401317e <cteRevoke+0x42>
    0x8401319e    0x62    mv a1,s3
    0x840131a0    0x64    mv a0,s0
    0x840131a2    0x66    jal ra,ffffffff84012f74 <cteDelete>
    0x840131a6    0x6a    bnez a0,ffffffff8401317e <cteRevoke+0x42>
    0x840131a8    0x6c    jal ra,ffffffff84011376 <preemptionPoint>
    0x840131ac    0x70    bnez a0,ffffffff8401317e <cteRevoke+0x42>
    0x840131ae    0x72    ld a5,24(s1)
    0x840131b0    0x74    and a0,a5,s2
    0x840131b4    0x78    and a5,a5,s5
    0x840131b8    0x7c    bnez a5,ffffffff84013190 <cteRevoke+0x54>
    0x840131ba    0x7e    beqz a0,ffffffff8401317e <cteRevoke+0x42>
    0x840131bc    0x80    mv s0,a0
    0x840131be    0x82    j ffffffff84013194 <cteRevoke+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
54 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 88 nodes.

Section suspend (224 of 267)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x84012d86     0x0    addi sp,sp,-16
    0x84012d88     0x2    sd ra,8(sp)           ; stack access
    0x84012d8a     0x4    sd s0,0(sp)           ; stack access
    0x84012d8c     0x6    mv s0,a0
    0x84012d8e     0x8    jal ra,ffffffff84012ca2 <cancelIPC>
    0x84012d92     0xc    ld a5,280(s0)
    0x84012d96    0x10    andi a5,a5,15
    0x84012d98    0x12    li a4,1
    0x84012d9a    0x14    beq a5,a4,ffffffff84012db4 <suspend+0x2e>
    0x84012d9e    0x18    li a1,0
    0x84012da0    0x1a    mv a0,s0
    0x84012da2    0x1c    jal ra,ffffffff840122d0 <setThreadState>
    0x84012da6    0x20    mv a0,s0
    0x84012da8    0x22    jal ra,ffffffff84012768 <tcbSchedDequeue>
    0x84012dac    0x26    ld ra,8(sp)           ; stack access
    0x84012dae    0x28    ld s0,0(sp)           ; stack access
    0x84012db0    0x2a    addi sp,sp,16
    0x84012db2    0x2c    ret
    0x84012db4    0x2e    ld a5,272(s0)
    0x84012db8    0x32    sd a5,264(s0)
    0x84012dbc    0x36    j ffffffff84012d9e <suspend+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 34 nodes.

Section setPriority (225 of 267)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setPriority`:

    0x84012a98     0x0    addi sp,sp,-32
    0x84012a9a     0x2    sd ra,24(sp)          ; stack access
    0x84012a9c     0x4    sd s0,16(sp)          ; stack access
    0x84012a9e     0x6    sd s1,8(sp)           ; stack access
    0x84012aa0     0x8    mv s0,a0
    0x84012aa2     0xa    mv s1,a1
    0x84012aa4     0xc    jal ra,ffffffff84012768 <tcbSchedDequeue>
    0x84012aa8    0x10    sd s1,360(s0)
    0x84012aac    0x14    ld a5,280(s0)
    0x84012ab0    0x18    andi a5,a5,15
    0x84012ab2    0x1a    addi a5,a5,-1
    0x84012ab4    0x1c    li a4,1
    0x84012ab6    0x1e    bgeu a4,a5,ffffffff84012ac4 <setPriority+0x2c>
    0x84012aba    0x22    ld ra,24(sp)          ; stack access
    0x84012abc    0x24    ld s0,16(sp)          ; stack access
    0x84012abe    0x26    ld s1,8(sp)           ; stack access
    0x84012ac0    0x28    addi sp,sp,32
    0x84012ac2    0x2a    ret
    0x84012ac4    0x2c    auipc a5,0x1b
    0x84012ac8    0x30    ld a5,-44(a5) # ffffffff8402da98 <ksCurThread>
    0x84012acc    0x34    beq a5,s0,ffffffff84012ad8 <setPriority+0x40>
    0x84012ad0    0x38    mv a0,s0
    0x84012ad2    0x3a    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x84012ad6    0x3e    j ffffffff84012aba <setPriority+0x22>
    0x84012ad8    0x40    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84012adc    0x44    j ffffffff84012aba <setPriority+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 43 nodes.

Section setDomain (226 of 267)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setDomain`:

    0x84012a52     0x0    addi sp,sp,-32
    0x84012a54     0x2    sd ra,24(sp)          ; stack access
    0x84012a56     0x4    sd s0,16(sp)          ; stack access
    0x84012a58     0x6    sd s1,8(sp)           ; stack access
    0x84012a5a     0x8    mv s0,a0
    0x84012a5c     0xa    mv s1,a1
    0x84012a5e     0xc    jal ra,ffffffff84012768 <tcbSchedDequeue>
    0x84012a62    0x10    sd s1,344(s0)
    0x84012a66    0x14    ld a5,280(s0)
    0x84012a6a    0x18    andi a5,a5,15
    0x84012a6c    0x1a    addi a5,a5,-1
    0x84012a6e    0x1c    li a4,1
    0x84012a70    0x1e    bgeu a4,a5,ffffffff84012a8a <setDomain+0x38>
    0x84012a74    0x22    auipc a5,0x1b
    0x84012a78    0x26    ld a5,36(a5) # ffffffff8402da98 <ksCurThread>
    0x84012a7c    0x2a    beq a5,s0,ffffffff84012a92 <setDomain+0x40>
    0x84012a80    0x2e    ld ra,24(sp)          ; stack access
    0x84012a82    0x30    ld s0,16(sp)          ; stack access
    0x84012a84    0x32    ld s1,8(sp)           ; stack access
    0x84012a86    0x34    addi sp,sp,32
    0x84012a88    0x36    ret
    0x84012a8a    0x38    mv a0,s0
    0x84012a8c    0x3a    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x84012a90    0x3e    j ffffffff84012a74 <setDomain+0x22>
    0x84012a92    0x40    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84012a96    0x44    j ffffffff84012a80 <setDomain+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 43 nodes.

Section chooseThread (227 of 267)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 44 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `chooseThread`:

    0x84012840     0x0    addi sp,sp,-32
    0x84012842     0x2    sd ra,24(sp)          ; stack access
    0x84012844     0x4    sd s0,16(sp)          ; stack access
    0x84012846     0x6    sd s1,8(sp)           ; stack access
    0x84012848     0x8    auipc s1,0x1b
    0x8401284c     0xc    ld s1,-72(s1) # ffffffff8402d800 <ksCurDomain>
    0x84012850    0x10    slli a4,s1,0x3
    0x84012854    0x14    auipc a5,0x1b
    0x84012858    0x18    addi a5,a5,452 # ffffffff8402da18 <ksReadyQueuesL1Bitmap>
    0x8401285c    0x1c    add a5,a5,a4
    0x8401285e    0x1e    ld a0,0(a5)
    0x84012860    0x20    beqz a0,ffffffff840128b6 <chooseThread+0x76>
    0x84012862    0x22    jal ra,ffffffff8401706c <__clzdi2>
    0x84012866    0x26    sext.w s0,a0
    0x8401286a    0x2a    slli a5,s1,0x2
    0x8401286e    0x2e    addi a4,s0,-60
    0x84012872    0x32    add a5,a5,a4
    0x84012874    0x34    slli a5,a5,0x3
    0x84012876    0x36    auipc a4,0x1b
    0x8401287a    0x3a    addi a4,a4,-102 # ffffffff8402d810 <ksReadyQueuesL2Bitmap>
    0x8401287e    0x3e    add a5,a5,a4
    0x84012880    0x40    ld a0,0(a5)
    0x84012882    0x42    jal ra,ffffffff8401706c <__clzdi2>
    0x84012886    0x46    sext.w a0,a0
    0x84012888    0x48    li a5,63
    0x8401288c    0x4c    sub s0,a5,s0
    0x84012890    0x50    slli s0,s0,0x6
    0x84012892    0x52    sub a5,a5,a0
    0x84012894    0x54    or s0,s0,a5
    0x84012896    0x56    slli s1,s1,0x8
    0x84012898    0x58    add s0,s0,s1
    0x8401289a    0x5a    slli s0,s0,0x4
    0x8401289c    0x5c    auipc s1,0xa
    0x840128a0    0x60    addi s1,s1,1468 # ffffffff8401ce58 <ksReadyQueues>
    0x840128a4    0x64    add s0,s0,s1
    0x840128a6    0x66    ld a0,0(s0)
    0x840128a8    0x68    jal ra,ffffffff8401281e <switchToThread>
    0x840128ac    0x6c    ld ra,24(sp)          ; stack access
    0x840128ae    0x6e    ld s0,16(sp)          ; stack access
    0x840128b0    0x70    ld s1,8(sp)           ; stack access
    0x840128b2    0x72    addi sp,sp,32
    0x840128b4    0x74    ret
    0x840128b6    0x76    jal ra,ffffffff84011352 <switchToIdleThread>
    0x840128ba    0x7a    j ffffffff840128ac <chooseThread+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 61 nodes.

Section cancelAllSignals (228 of 267)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 43 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllSignals`:

    0x8401261c     0x0    ld a5,0(a0)
    0x8401261e     0x2    andi a3,a5,3
    0x84012622     0x6    li a4,1
    0x84012624     0x8    beq a3,a4,ffffffff8401262a <cancelAllSignals+0xe>
    0x84012628     0xc    ret
    0x8401262a     0xe    addi sp,sp,-16
    0x8401262c    0x10    sd ra,8(sp)           ; stack access
    0x8401262e    0x12    sd s0,0(sp)           ; stack access
    0x84012630    0x14    ld a4,8(a0)
    0x84012632    0x16    slli s0,a4,0x19
    0x84012636    0x1a    srli s0,s0,0x19
    0x84012638    0x1c    slli a3,a4,0x19
    0x8401263c    0x20    bgez a3,ffffffff84012674 <cancelAllSignals+0x58>
    0x84012640    0x24    li a3,-1
    0x84012642    0x26    slli a3,a3,0x27
    0x84012644    0x28    or s0,s0,a3
    0x84012646    0x2a    and a4,a4,a3
    0x84012648    0x2c    sd a4,8(a0)
    0x8401264a    0x2e    lui a4,0x2000
    0x8401264e    0x32    addi a4,a4,-4
    0x84012650    0x34    and a5,a5,a4
    0x84012652    0x36    sd a5,0(a0)
    0x84012654    0x38    li a1,2
    0x84012656    0x3a    mv a0,s0
    0x84012658    0x3c    jal ra,ffffffff840122d0 <setThreadState>
    0x8401265c    0x40    mv a0,s0
    0x8401265e    0x42    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x84012662    0x46    ld s0,408(s0)
    0x84012666    0x4a    bnez s0,ffffffff84012654 <cancelAllSignals+0x38>
    0x84012668    0x4c    jal ra,ffffffff8401226a <rescheduleRequired>
    0x8401266c    0x50    ld ra,8(sp)           ; stack access
    0x8401266e    0x52    ld s0,0(sp)           ; stack access
    0x84012670    0x54    addi sp,sp,16
    0x84012672    0x56    ret
    0x84012674    0x58    srli a4,a4,0x27
    0x84012676    0x5a    slli a4,a4,0x27
    0x84012678    0x5c    sd a4,8(a0)
    0x8401267a    0x5e    lui a4,0x2000
    0x8401267e    0x62    addi a4,a4,-4
    0x84012680    0x64    and a5,a5,a4
    0x84012682    0x66    sd a5,0(a0)
    0x84012684    0x68    beqz s0,ffffffff84012668 <cancelAllSignals+0x4c>
    0x84012686    0x6a    j ffffffff84012654 <cancelAllSignals+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 67 nodes.

Section cancelAllIPC (229 of 267)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllIPC`:

    0x840125de     0x0    ld a5,0(a0)
    0x840125e0     0x2    andi a4,a5,3
    0x840125e4     0x6    beqz a4,ffffffff8401261a <cancelAllIPC+0x3c>
    0x840125e6     0x8    addi sp,sp,-16
    0x840125e8     0xa    sd ra,8(sp)           ; stack access
    0x840125ea     0xc    sd s0,0(sp)           ; stack access
    0x840125ec     0xe    ld s0,8(a0)
    0x840125ee    0x10    sd zero,8(a0)
    0x840125f2    0x14    srli a5,a5,0x27
    0x840125f4    0x16    slli a5,a5,0x27
    0x840125f6    0x18    sd a5,0(a0)
    0x840125f8    0x1a    beqz s0,ffffffff8401260e <cancelAllIPC+0x30>
    0x840125fa    0x1c    li a1,2
    0x840125fc    0x1e    mv a0,s0
    0x840125fe    0x20    jal ra,ffffffff840122d0 <setThreadState>
    0x84012602    0x24    mv a0,s0
    0x84012604    0x26    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x84012608    0x2a    ld s0,408(s0)
    0x8401260c    0x2e    bnez s0,ffffffff840125fa <cancelAllIPC+0x1c>
    0x8401260e    0x30    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84012612    0x34    ld ra,8(sp)           ; stack access
    0x84012614    0x36    ld s0,0(sp)           ; stack access
    0x84012616    0x38    addi sp,sp,16
    0x84012618    0x3a    ret
    0x8401261a    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 45 nodes.

Section createNewObjects (230 of 267)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 52 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `createNewObjects`:

    0x84012164     0x0    addi sp,sp,-96
    0x84012166     0x2    sd ra,88(sp)          ; stack access
    0x84012168     0x4    sd s0,80(sp)          ; stack access
    0x8401216a     0x6    sd s1,72(sp)          ; stack access
    0x8401216c     0x8    sd s2,64(sp)          ; stack access
    0x8401216e     0xa    sd s3,56(sp)          ; stack access
    0x84012170     0xc    sd s4,48(sp)          ; stack access
    0x84012172     0xe    sd s5,40(sp)          ; stack access
    0x84012174    0x10    sd s6,32(sp)          ; stack access
    0x84012176    0x12    sd s7,24(sp)          ; stack access
    0x84012178    0x14    sd s8,16(sp)          ; stack access
    0x8401217a    0x16    mv s5,a0
    0x8401217c    0x18    mv s6,a1
    0x8401217e    0x1a    mv s1,a2
    0x84012180    0x1c    mv s0,a3
    0x84012182    0x1e    mv s2,a4
    0x84012184    0x20    mv s7,a5
    0x84012186    0x22    mv s3,a6
    0x84012188    0x24    mv s8,a7
    0x8401218a    0x26    mv a1,a6
    0x8401218c    0x28    jal ra,ffffffff8401195e <getObjectSize>
    0x84012190    0x2c    beqz s2,ffffffff840121c4 <createNewObjects+0x60>
    0x84012194    0x30    sext.w s4,a0
    0x84012198    0x34    slli s0,s0,0x5
    0x8401219a    0x36    add s1,s1,s0
    0x8401219c    0x38    li s0,0
    0x8401219e    0x3a    sll a1,s0,s4
    0x840121a2    0x3e    mv a3,s8
    0x840121a4    0x40    mv a2,s3
    0x840121a6    0x42    add a1,a1,s7
    0x840121a8    0x44    mv a0,s5
    0x840121aa    0x46    jal ra,ffffffff840120a8 <createObject>
    0x840121ae    0x4a    mv a2,a0
    0x840121b0    0x4c    mv a3,a1
    0x840121b2    0x4e    mv a1,s1
    0x840121b4    0x50    mv a0,s6
    0x840121b6    0x52    jal ra,ffffffff8401168e <insertNewCap>
    0x840121ba    0x56    addi s0,s0,1
    0x840121bc    0x58    addi s1,s1,32
    0x840121c0    0x5c    bne s2,s0,ffffffff8401219e <createNewObjects+0x3a>
    0x840121c4    0x60    ld ra,88(sp)          ; stack access
    0x840121c6    0x62    ld s0,80(sp)          ; stack access
    0x840121c8    0x64    ld s1,72(sp)          ; stack access
    0x840121ca    0x66    ld s2,64(sp)          ; stack access
    0x840121cc    0x68    ld s3,56(sp)          ; stack access
    0x840121ce    0x6a    ld s4,48(sp)          ; stack access
    0x840121d0    0x6c    ld s5,40(sp)          ; stack access
    0x840121d2    0x6e    ld s6,32(sp)          ; stack access
    0x840121d4    0x70    ld s7,24(sp)          ; stack access
    0x840121d6    0x72    ld s8,16(sp)          ; stack access
    0x840121d8    0x74    addi sp,sp,96
    0x840121da    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 80 nodes.

Section sameRegionAs (231 of 267)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 282 instructions.

RVC_FTTFT____FFFT_FT.

Stack analysis
---------------

20 stack accesses found. Annotated code for `sameRegionAs`:

    0x840119d8      0x0    addi sp,sp,-80
    0x840119da      0x2    sd ra,72(sp)          ; stack access
    0x840119dc      0x4    sd s0,64(sp)          ; stack access
    0x840119de      0x6    sd s1,56(sp)          ; stack access
    0x840119e0      0x8    sd s2,48(sp)          ; stack access
    0x840119e2      0xa    sd s3,40(sp)          ; stack access
    0x840119e4      0xc    sd s4,32(sp)          ; stack access
    0x840119e6      0xe    sd a0,16(sp)          ; stack access
    0x840119e8     0x10    sd a1,24(sp)          ; stack access
    0x840119ea     0x12    sd a2,0(sp)           ; stack access
    0x840119ec     0x14    sd a3,8(sp)           ; stack access
    0x840119ee     0x16    mv s0,a2
    0x840119f0     0x18    srli a5,a0,0x3b
    0x840119f4     0x1c    li a4,20
    0x840119f6     0x1e    bltu a4,a5,ffffffff84011cce <sameRegionAs+0x2f6>
    0x840119fa     0x22    mv s2,a1
    0x840119fc     0x24    mv s1,a3
    0x840119fe     0x26    mv a2,a0
    0x84011a00     0x28    slli a3,a5,0x2
    0x84011a04     0x2c    auipc a1,0x5
    0x84011a08     0x30    addi a1,a1,1884 # ffffffff84017160 <ksDomScheduleLength+0xb0>
    0x84011a0c     0x34    add a3,a3,a1
    0x84011a0e     0x36    lw a4,0(a3)
    0x84011a10     0x38    add a4,a4,a1
    0x84011a12     0x3a    jr a4
    0x84011a14     0x3c    srli s3,s0,0x3b
    0x84011a18     0x40    li a5,20
    0x84011a1a     0x42    bltu a5,s3,ffffffff84011a32 <sameRegionAs+0x5a>
    0x84011a1e     0x46    slli a4,s3,0x2
    0x84011a22     0x4a    auipc a3,0x5
    0x84011a26     0x4e    addi a3,a3,1938 # ffffffff840171b4 <ksDomScheduleLength+0x104>
    0x84011a2a     0x52    add a4,a4,a3
    0x84011a2c     0x54    lw a5,0(a4)
    0x84011a2e     0x56    add a5,a5,a3
    0x84011a30     0x58    jr a5
    0x84011a32     0x5a    li a5,13
    0x84011a34     0x5c    bltu a5,s3,ffffffff84011cea <sameRegionAs+0x312>
    0x84011a38     0x60    li a4,1
    0x84011a3a     0x62    sll a4,a4,s3
    0x84011a3e     0x66    lui a6,0x2
    0x84011a40     0x68    addi a6,a6,10
    0x84011a42     0x6a    and a4,a4,a6
    0x84011a46     0x6e    beqz a4,ffffffff84011cea <sameRegionAs+0x312>
    0x84011a4a     0x72    slli s4,a2,0x19
    0x84011a4e     0x76    srli s4,s4,0x19
    0x84011a52     0x7a    slli a5,a2,0x19
    0x84011a56     0x7e    bgez a5,ffffffff84011a62 <sameRegionAs+0x8a>
    0x84011a5a     0x82    li a5,-1
    0x84011a5c     0x84    slli a5,a5,0x27
    0x84011a5e     0x86    or s4,s4,a5
    0x84011a62     0x8a    ld a0,0(sp)
    0x84011a64     0x8c    ld a1,8(sp)
    0x84011a66     0x8e    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84011a6a     0x92    mv a4,a0
    0x84011a6c     0x94    li a5,20
    0x84011a6e     0x96    bltu a5,s3,ffffffff84011af2 <sameRegionAs+0x11a>
    0x84011a72     0x9a    slli a3,s3,0x2
    0x84011a76     0x9e    auipc a2,0x5
    0x84011a7a     0xa2    addi a2,a2,1938 # ffffffff84017208 <ksDomScheduleLength+0x158>
    0x84011a7e     0xa6    add a3,a3,a2
    0x84011a80     0xa8    lw a5,0(a3)
    0x84011a82     0xaa    add a5,a5,a2
    0x84011a84     0xac    jr a5
    0x84011a86     0xae    li s1,5
    0x84011a88     0xb0    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011a8a     0xb2    andi s1,s1,63
    0x84011a8e     0xb6    li a0,0
    0x84011a90     0xb8    bltu a4,s4,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011a94     0xbc    li a5,1
    0x84011a96     0xbe    sll s1,a5,s1
    0x84011a9a     0xc2    addi a3,a4,-1
    0x84011a9e     0xc6    add s1,s1,a3
    0x84011aa0     0xc8    sll a5,a5,s2
    0x84011aa4     0xcc    addi a5,a5,-1
    0x84011aa6     0xce    add s4,s4,a5
    0x84011aa8     0xd0    bltu s4,s1,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011aac     0xd4    sltu a0,s1,a4
    0x84011ab0     0xd8    xori a0,a0,1
    0x84011ab4     0xdc    sext.w a0,a0
    0x84011ab6     0xde    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011ab8     0xe0    srli a0,s0,0x2f
    0x84011abc     0xe4    andi s1,a0,63
    0x84011ac0     0xe8    addi s1,s1,5
    0x84011ac2     0xea    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011ac4     0xec    li s1,10
    0x84011ac6     0xee    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011ac8     0xf0    andi a5,s0,127
    0x84011acc     0xf4    li a3,64
    0x84011ad0     0xf8    beq a5,a3,ffffffff84011b36 <sameRegionAs+0x15e>
    0x84011ad4     0xfc    andi a0,s0,63
    0x84011ad8    0x100    addi s1,a0,5
    0x84011adc    0x104    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011ade    0x106    li s1,0
    0x84011ae0    0x108    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011ae2    0x10a    li s1,0
    0x84011ae4    0x10c    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011ae6    0x10e    li s1,0
    0x84011ae8    0x110    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011aea    0x112    li s1,0
    0x84011aec    0x114    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011aee    0x116    li s1,0
    0x84011af0    0x118    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011af2    0x11a    li a5,3
    0x84011af4    0x11c    beq s3,a5,ffffffff84011b1e <sameRegionAs+0x146>
    0x84011af8    0x120    li a5,13
    0x84011afa    0x122    beq s3,a5,ffffffff84011b22 <sameRegionAs+0x14a>
    0x84011afe    0x126    li a5,1
    0x84011b00    0x128    li s1,0
    0x84011b02    0x12a    bne s3,a5,ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b06    0x12e    srli a5,s0,0x39
    0x84011b0a    0x132    andi a5,a5,3
    0x84011b0c    0x134    li a3,1
    0x84011b0e    0x136    beq a5,a3,ffffffff84011b26 <sameRegionAs+0x14e>
    0x84011b12    0x13a    li a3,2
    0x84011b14    0x13c    beq a5,a3,ffffffff84011b2a <sameRegionAs+0x152>
    0x84011b18    0x140    beqz a5,ffffffff84011b2e <sameRegionAs+0x156>
    0x84011b1a    0x142    jal ra,ffffffff8401034a <halt>
    0x84011b1e    0x146    li s1,12
    0x84011b20    0x148    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b22    0x14a    li s1,12
    0x84011b24    0x14c    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b26    0x14e    li s1,21
    0x84011b28    0x150    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b2a    0x152    li s1,30
    0x84011b2c    0x154    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b2e    0x156    li s1,12
    0x84011b30    0x158    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b32    0x15a    li s1,4
    0x84011b34    0x15c    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b36    0x15e    li s1,10
    0x84011b38    0x160    j ffffffff84011a8e <sameRegionAs+0xb6>
    0x84011b3a    0x162    srli a5,s0,0x3b
    0x84011b3e    0x166    li a4,4
    0x84011b40    0x168    li a0,0
    0x84011b42    0x16a    bne a5,a4,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011b46    0x16e    slli a0,a2,0x19
    0x84011b4a    0x172    srli a0,a0,0x19
    0x84011b4c    0x174    slli a5,a2,0x19
    0x84011b50    0x178    bgez a5,ffffffff84011b5a <sameRegionAs+0x182>
    0x84011b54    0x17c    li a5,-1
    0x84011b56    0x17e    slli a5,a5,0x27
    0x84011b58    0x180    or a0,a0,a5
    0x84011b5a    0x182    slli a4,s0,0x19
    0x84011b5e    0x186    srli a4,a4,0x19
    0x84011b60    0x188    slli a5,s0,0x19
    0x84011b64    0x18c    bgez a5,ffffffff84011b6e <sameRegionAs+0x196>
    0x84011b68    0x190    li a5,-1
    0x84011b6a    0x192    slli a5,a5,0x27
    0x84011b6c    0x194    or a4,a4,a5
    0x84011b6e    0x196    sub a0,a4,a0
    0x84011b72    0x19a    seqz a0,a0
    0x84011b76    0x19e    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011b78    0x1a0    srli a5,s0,0x3b
    0x84011b7c    0x1a4    li a4,6
    0x84011b7e    0x1a6    li a0,0
    0x84011b80    0x1a8    bne a5,a4,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011b84    0x1ac    slli a0,a2,0x19
    0x84011b88    0x1b0    srli a0,a0,0x19
    0x84011b8a    0x1b2    slli a5,a2,0x19
    0x84011b8e    0x1b6    bgez a5,ffffffff84011b98 <sameRegionAs+0x1c0>
    0x84011b92    0x1ba    li a5,-1
    0x84011b94    0x1bc    slli a5,a5,0x27
    0x84011b96    0x1be    or a0,a0,a5
    0x84011b98    0x1c0    slli a4,s0,0x19
    0x84011b9c    0x1c4    srli a4,a4,0x19
    0x84011b9e    0x1c6    slli a5,s0,0x19
    0x84011ba2    0x1ca    bgez a5,ffffffff84011bac <sameRegionAs+0x1d4>
    0x84011ba6    0x1ce    li a5,-1
    0x84011ba8    0x1d0    slli a5,a5,0x27
    0x84011baa    0x1d2    or a4,a4,a5
    0x84011bac    0x1d4    sub a0,a4,a0
    0x84011bb0    0x1d8    seqz a0,a0
    0x84011bb4    0x1dc    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011bb6    0x1de    srli a5,s0,0x3b
    0x84011bba    0x1e2    li a4,10
    0x84011bbc    0x1e4    li a0,0
    0x84011bbe    0x1e6    bne a5,a4,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011bc2    0x1ea    slli a5,a2,0x1
    0x84011bc6    0x1ee    lui a4,0xfc000
    0x84011bca    0x1f2    srli a4,a4,0x19
    0x84011bcc    0x1f4    and a4,a4,a5
    0x84011bce    0x1f6    slli a3,a5,0x19
    0x84011bd2    0x1fa    bgez a3,ffffffff84011c02 <sameRegionAs+0x22a>
    0x84011bd6    0x1fe    li a5,-1
    0x84011bd8    0x200    slli a5,a5,0x27
    0x84011bda    0x202    or a4,a4,a5
    0x84011bdc    0x204    slli a5,s0,0x1
    0x84011be0    0x208    lui a3,0xfc000
    0x84011be4    0x20c    srli a3,a3,0x19
    0x84011be6    0x20e    and a3,a3,a5
    0x84011be8    0x210    slli a1,a5,0x19
    0x84011bec    0x214    li a5,0
    0x84011bee    0x216    bgez a1,ffffffff84011bfe <sameRegionAs+0x226>
    0x84011bf2    0x21a    li a5,-1
    0x84011bf4    0x21c    slli a5,a5,0x27
    0x84011bf6    0x21e    or a3,a3,a5
    0x84011bf8    0x220    li a5,0
    0x84011bfa    0x222    beq a4,a3,ffffffff84011c18 <sameRegionAs+0x240>
    0x84011bfe    0x226    mv a0,a5
    0x84011c00    0x228    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011c02    0x22a    slli a5,s0,0x1
    0x84011c06    0x22e    lui a3,0xfc000
    0x84011c0a    0x232    srli a3,a3,0x19
    0x84011c0c    0x234    and a3,a3,a5
    0x84011c0e    0x236    slli a1,a5,0x19
    0x84011c12    0x23a    bltz a1,ffffffff84011bf2 <sameRegionAs+0x21a>
    0x84011c16    0x23e    j ffffffff84011bf8 <sameRegionAs+0x220>
    0x84011c18    0x240    srli a5,s0,0x2f
    0x84011c1c    0x244    andi a5,a5,63
    0x84011c20    0x248    srli a4,a2,0x2f
    0x84011c24    0x24c    andi a4,a4,63
    0x84011c28    0x250    sub a5,a5,a4
    0x84011c2a    0x252    seqz a5,a5
    0x84011c2e    0x256    j ffffffff84011bfe <sameRegionAs+0x226>
    0x84011c30    0x258    srli a5,s0,0x3b
    0x84011c34    0x25c    li a4,12
    0x84011c36    0x25e    li a0,0
    0x84011c38    0x260    bne a5,a4,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011c3c    0x264    slli a0,a2,0x19
    0x84011c40    0x268    srli a0,a0,0x19
    0x84011c42    0x26a    slli a5,a2,0x19
    0x84011c46    0x26e    bgez a5,ffffffff84011c50 <sameRegionAs+0x278>
    0x84011c4a    0x272    li a5,-1
    0x84011c4c    0x274    slli a5,a5,0x27
    0x84011c4e    0x276    or a0,a0,a5
    0x84011c50    0x278    slli a4,s0,0x19
    0x84011c54    0x27c    srli a4,a4,0x19
    0x84011c56    0x27e    slli a5,s0,0x19
    0x84011c5a    0x282    bgez a5,ffffffff84011c64 <sameRegionAs+0x28c>
    0x84011c5e    0x286    li a5,-1
    0x84011c60    0x288    slli a5,a5,0x27
    0x84011c62    0x28a    or a4,a4,a5
    0x84011c64    0x28c    sub a0,a4,a0
    0x84011c68    0x290    seqz a0,a0
    0x84011c6c    0x294    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011c6e    0x296    srli a5,s0,0x3b
    0x84011c72    0x29a    li a4,8
    0x84011c74    0x29c    li a0,0
    0x84011c76    0x29e    bne a5,a4,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011c7a    0x2a2    sub a0,s2,s1
    0x84011c7e    0x2a6    seqz a0,a0
    0x84011c82    0x2aa    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011c84    0x2ac    srli a0,s0,0x3b
    0x84011c88    0x2b0    addi a0,a0,-20
    0x84011c8a    0x2b2    seqz a0,a0
    0x84011c8e    0x2b6    ld ra,72(sp)          ; stack access
    0x84011c90    0x2b8    ld s0,64(sp)          ; stack access
    0x84011c92    0x2ba    ld s1,56(sp)          ; stack access
    0x84011c94    0x2bc    ld s2,48(sp)          ; stack access
    0x84011c96    0x2be    ld s3,40(sp)          ; stack access
    0x84011c98    0x2c0    ld s4,32(sp)          ; stack access
    0x84011c9a    0x2c2    addi sp,sp,80
    0x84011c9c    0x2c4    ret
    0x84011c9e    0x2c6    srli a0,s0,0x3b
    0x84011ca2    0x2ca    addi a0,a0,-14
    0x84011ca4    0x2cc    andi a0,a0,-3
    0x84011ca6    0x2ce    seqz a0,a0
    0x84011caa    0x2d2    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011cac    0x2d4    srli a5,s0,0x3b
    0x84011cb0    0x2d8    li a4,16
    0x84011cb2    0x2da    li a0,0
    0x84011cb4    0x2dc    bne a5,a4,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011cb8    0x2e0    lui a5,0x1
    0x84011cba    0x2e2    addi a5,a5,-1
    0x84011cbc    0x2e4    and a0,s1,a5
    0x84011cc0    0x2e8    and s2,s2,a5
    0x84011cc4    0x2ec    sub a0,a0,s2
    0x84011cc8    0x2f0    seqz a0,a0
    0x84011ccc    0x2f4    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011cce    0x2f6    andi a0,a5,1
    0x84011cd2    0x2fa    beqz a0,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011cd4    0x2fc    srli a0,s0,0x3b
    0x84011cd8    0x300    andi a0,a0,1
    0x84011cda    0x302    beqz a0,ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011cdc    0x304    ld a2,0(sp)           ; stack access
    0x84011cde    0x306    ld a3,8(sp)           ; stack access
    0x84011ce0    0x308    ld a0,16(sp)          ; stack access
    0x84011ce2    0x30a    ld a1,24(sp)          ; stack access
    0x84011ce4    0x30c    jal ra,ffffffff84010d4c <Arch_sameRegionAs>
    0x84011ce8    0x310    j ffffffff84011c8e <sameRegionAs+0x2b6>
    0x84011cea    0x312    li a0,0
    0x84011cec    0x314    j ffffffff84011c8e <sameRegionAs+0x2b6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
282 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 380 nodes.

Section unmapPage (232 of 267)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 57 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `unmapPage`:

    0x84010838     0x0    addi sp,sp,-64
    0x8401083a     0x2    sd ra,56(sp)          ; stack access
    0x8401083c     0x4    sd s0,48(sp)          ; stack access
    0x8401083e     0x6    sd s1,40(sp)          ; stack access
    0x84010840     0x8    sd s2,32(sp)          ; stack access
    0x84010842     0xa    mv s0,a0
    0x84010844     0xc    mv s2,a2
    0x84010846     0xe    mv s1,a3
    0x84010848    0x10    mv a0,a1
    0x8401084a    0x12    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x8401084e    0x16    sd a0,16(sp)          ; stack access
    0x84010850    0x18    sd a1,24(sp)          ; stack access
    0x84010852    0x1a    beqz a0,ffffffff84010860 <unmapPage+0x28>
    0x84010854    0x1c    ld ra,56(sp)          ; stack access
    0x84010856    0x1e    ld s0,48(sp)          ; stack access
    0x84010858    0x20    ld s1,40(sp)          ; stack access
    0x8401085a    0x22    ld s2,32(sp)          ; stack access
    0x8401085c    0x24    addi sp,sp,64
    0x8401085e    0x26    ret
    0x84010860    0x28    mv a1,s2
    0x84010862    0x2a    ld a0,24(sp)          ; stack access
    0x84010864    0x2c    jal ra,ffffffff840106c6 <lookupPTSlot>
    0x84010868    0x30    sd a0,0(sp)           ; stack access
    0x8401086a    0x32    sd a1,8(sp)           ; stack access
    0x8401086c    0x34    li a5,1
    0x8401086e    0x36    beq s0,a5,ffffffff8401087e <unmapPage+0x46>
    0x84010872    0x3a    li a5,2
    0x84010874    0x3c    beq s0,a5,ffffffff84010882 <unmapPage+0x4a>
    0x84010878    0x40    beqz s0,ffffffff840108c2 <unmapPage+0x8a>
    0x8401087a    0x42    jal ra,ffffffff8401034a <halt>
    0x8401087e    0x46    li a5,21
    0x84010880    0x48    j ffffffff84010884 <unmapPage+0x4c>
    0x84010882    0x4a    li a5,30
    0x84010884    0x4c    bne a1,a5,ffffffff84010854 <unmapPage+0x1c>
    0x84010888    0x50    ld a4,0(a0)
    0x8401088a    0x52    andi a5,a4,1
    0x8401088e    0x56    beqz a5,ffffffff84010854 <unmapPage+0x1c>
    0x84010890    0x58    srli a5,a4,0x1
    0x84010894    0x5c    srli a3,a4,0x2
    0x84010898    0x60    or a5,a5,a3
    0x8401089a    0x62    srli a3,a4,0x3
    0x8401089e    0x66    or a5,a5,a3
    0x840108a0    0x68    andi a5,a5,1
    0x840108a2    0x6a    beqz a5,ffffffff84010854 <unmapPage+0x1c>
    0x840108a4    0x6c    slli a4,a4,0x2
    0x840108a6    0x6e    lui a5,0xfff00
    0x840108aa    0x72    srli a5,a5,0x8
    0x840108ac    0x74    and a4,a4,a5
    0x840108ae    0x76    li a3,1
    0x840108b0    0x78    slli a3,a3,0x26
    0x840108b2    0x7a    add s1,s1,a3
    0x840108b4    0x7c    bne a4,s1,ffffffff84010854 <unmapPage+0x1c>
    0x840108b8    0x80    sd zero,0(a0)
    0x840108bc    0x84    sfence.vma
    0x840108c0    0x88    j ffffffff84010854 <unmapPage+0x1c>
    0x840108c2    0x8a    li a5,12
    0x840108c4    0x8c    j ffffffff84010884 <unmapPage+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 93 nodes.

Section create_rootserver_objects (233 of 267)
==============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 88 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x84000e80     0x0    addi sp,sp,-80
    0x84000e82     0x2    sd ra,72(sp)          ; stack access
    0x84000e84     0x4    sd s0,64(sp)          ; stack access
    0x84000e86     0x6    sd s1,56(sp)          ; stack access
    0x84000e88     0x8    sd s2,48(sp)          ; stack access
    0x84000e8a     0xa    sd s3,40(sp)          ; stack access
    0x84000e8c     0xc    sd s4,32(sp)          ; stack access
    0x84000e8e     0xe    mv s1,a0
    0x84000e90    0x10    sd a1,0(sp)           ; stack access
    0x84000e92    0x12    sd a2,8(sp)           ; stack access
    0x84000e94    0x14    mv s2,a3
    0x84000e96    0x16    mv s4,a3
    0x84000e98    0x18    li a5,24
    0x84000e9a    0x1a    bgeu a3,a5,ffffffff84000ea0 <create_rootserver_objects+0x20>
    0x84000e9e    0x1e    li s4,24
    0x84000ea0    0x20    ld a5,0(sp)           ; stack access
    0x84000ea2    0x22    sd a5,16(sp)          ; stack access
    0x84000ea4    0x24    ld a5,8(sp)           ; stack access
    0x84000ea6    0x26    sd a5,24(sp)          ; stack access
    0x84000ea8    0x28    mv s3,s2
    0x84000eaa    0x2a    beqz s2,ffffffff84000eb4 <create_rootserver_objects+0x34>
    0x84000eae    0x2e    li s3,1
    0x84000eb0    0x30    sll s3,s3,s2
    0x84000eb4    0x34    ld a0,16(sp)          ; stack access
    0x84000eb6    0x36    ld a1,24(sp)          ; stack access
    0x84000eb8    0x38    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000ebc    0x3c    auipc s0,0x0
    0x84000ec0    0x40    addi s0,s0,1636 # ffffffff84001520 <ndks_boot>
    0x84000ec4    0x44    sd s1,680(s0)
    0x84000ec8    0x48    lui a5,0x1004
    0x84000ecc    0x4c    addi a5,a5,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x84000ed0    0x50    add s1,s1,a5
    0x84000ed2    0x52    add s1,s1,s3
    0x84000ed4    0x54    slli a0,a0,0xc
    0x84000ed6    0x56    add s1,s1,a0
    0x84000ed8    0x58    sd s1,688(s0)
    0x84000edc    0x5c    mv a1,s2
    0x84000ede    0x5e    mv a0,s4
    0x84000ee0    0x60    jal ra,ffffffff84000e54 <maybe_alloc_extra_bi>
    0x84000ee4    0x64    li a1,1
    0x84000ee6    0x66    li a0,24
    0x84000ee8    0x68    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000eec    0x6c    sd a0,608(s0)
    0x84000ef0    0x70    mv a1,s2
    0x84000ef2    0x72    li a0,12
    0x84000ef4    0x74    jal ra,ffffffff84000e54 <maybe_alloc_extra_bi>
    0x84000ef8    0x78    li a1,1
    0x84000efa    0x7a    li a0,12
    0x84000efc    0x7c    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f00    0x80    sd a0,616(s0)
    0x84000f04    0x84    mv a1,s2
    0x84000f06    0x86    li a0,12
    0x84000f08    0x88    jal ra,ffffffff84000e54 <maybe_alloc_extra_bi>
    0x84000f0c    0x8c    li a1,1
    0x84000f0e    0x8e    li a0,12
    0x84000f10    0x90    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f14    0x94    sd a0,624(s0)
    0x84000f18    0x98    li a1,1
    0x84000f1a    0x9a    li a0,12
    0x84000f1c    0x9c    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f20    0xa0    sd a0,632(s0)
    0x84000f24    0xa4    li a1,1
    0x84000f26    0xa6    li a0,12
    0x84000f28    0xa8    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f2c    0xac    sd a0,640(s0)
    0x84000f30    0xb0    ld a0,0(sp)           ; stack access
    0x84000f32    0xb2    ld a1,8(sp)           ; stack access
    0x84000f34    0xb4    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000f38    0xb8    mv s1,a0
    0x84000f3a    0xba    mv a1,a0
    0x84000f3c    0xbc    li a0,12
    0x84000f3e    0xbe    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f42    0xc2    sd a0,664(s0)
    0x84000f46    0xc6    slli s1,s1,0xc
    0x84000f48    0xc8    add a0,a0,s1
    0x84000f4a    0xca    sd a0,672(s0)
    0x84000f4e    0xce    li a1,1
    0x84000f50    0xd0    li a0,10
    0x84000f52    0xd2    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f56    0xd6    sd a0,656(s0)
    0x84000f5a    0xda    ld ra,72(sp)          ; stack access
    0x84000f5c    0xdc    ld s0,64(sp)          ; stack access
    0x84000f5e    0xde    ld s1,56(sp)          ; stack access
    0x84000f60    0xe0    ld s2,48(sp)          ; stack access
    0x84000f62    0xe2    ld s3,40(sp)          ; stack access
    0x84000f64    0xe4    ld s4,32(sp)          ; stack access
    0x84000f66    0xe6    addi sp,sp,80
    0x84000f68    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 137 nodes.

Section create_ipcbuf_frame_cap (234 of 267)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 39 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84000d22     0x0    addi sp,sp,-96
    0x84000d24     0x2    sd ra,88(sp)          ; stack access
    0x84000d26     0x4    sd s0,80(sp)          ; stack access
    0x84000d28     0x6    sd s1,72(sp)          ; stack access
    0x84000d2a     0x8    sd a0,16(sp)          ; stack access
    0x84000d2c     0xa    sd a1,24(sp)          ; stack access
    0x84000d2e     0xc    sd a2,0(sp)           ; stack access
    0x84000d30     0xe    sd a3,8(sp)           ; stack access
    0x84000d32    0x10    mv s0,a4
    0x84000d34    0x12    auipc s1,0x0
    0x84000d38    0x16    addi s1,s1,2028 # ffffffff84001520 <ndks_boot>
    0x84000d3c    0x1a    lui a1,0x1
    0x84000d3e    0x1c    ld a0,632(s1)
    0x84000d42    0x20    jal ra,ffffffff840156b8 <memzero>
    0x84000d46    0x24    li a6,0
    0x84000d48    0x26    li a5,0
    0x84000d4a    0x28    li a4,1
    0x84000d4c    0x2a    mv a3,s0
    0x84000d4e    0x2c    ld a2,632(s1)
    0x84000d52    0x30    ld a0,0(sp)           ; stack access
    0x84000d54    0x32    ld a1,8(sp)           ; stack access
    0x84000d56    0x34    jal ra,ffffffff8400026a <create_mapped_it_frame_cap>
    0x84000d5a    0x38    mv s1,a0
    0x84000d5c    0x3a    mv s0,a1
    0x84000d5e    0x3c    ld a0,16(sp)          ; stack access
    0x84000d60    0x3e    ld a1,24(sp)          ; stack access
    0x84000d62    0x40    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000d66    0x44    sd s1,320(a0)
    0x84000d6a    0x48    sd s0,328(a0)
    0x84000d6e    0x4c    sd zero,336(a0)
    0x84000d72    0x50    li a5,3
    0x84000d74    0x52    sd a5,344(a0)
    0x84000d78    0x56    mv a0,s1
    0x84000d7a    0x58    mv a1,s0
    0x84000d7c    0x5a    ld ra,88(sp)          ; stack access
    0x84000d7e    0x5c    ld s0,80(sp)          ; stack access
    0x84000d80    0x5e    ld s1,72(sp)          ; stack access
    0x84000d82    0x60    addi sp,sp,96
    0x84000d84    0x62    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 63 nodes.

Section create_untypeds_for_region (235 of 267)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 103 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x8400097a      0x0    addi sp,sp,-192
    0x8400097c      0x2    sd ra,184(sp)         ; stack access
    0x8400097e      0x4    sd s0,176(sp)         ; stack access
    0x84000980      0x6    sd s1,168(sp)         ; stack access
    0x84000982      0x8    sd s2,160(sp)         ; stack access
    0x84000984      0xa    sd s3,152(sp)         ; stack access
    0x84000986      0xc    sd s4,144(sp)         ; stack access
    0x84000988      0xe    sd s5,136(sp)         ; stack access
    0x8400098a     0x10    sd s6,128(sp)         ; stack access
    0x8400098c     0x12    sd s7,120(sp)         ; stack access
    0x8400098e     0x14    sd s8,112(sp)         ; stack access
    0x84000990     0x16    sd s9,104(sp)         ; stack access
    0x84000992     0x18    sd s10,96(sp)         ; stack access
    0x84000994     0x1a    sd s11,88(sp)         ; stack access
    0x84000996     0x1c    sd a0,32(sp)          ; stack access
    0x84000998     0x1e    sd a1,40(sp)          ; stack access
    0x8400099a     0x20    beq a4,a3,ffffffff84000a8c <create_untypeds_for_region+0x112>
    0x8400099e     0x24    mv s9,a2
    0x840009a0     0x26    mv s8,a5
    0x840009a2     0x28    mv s2,a3
    0x840009a4     0x2a    mv s3,a4
    0x840009a6     0x2c    slli s10,a2,0x6
    0x840009aa     0x30    andi s10,s10,64
    0x840009ae     0x34    li s6,63
    0x840009b2     0x38    li s5,38
    0x840009b6     0x3c    auipc s7,0x1
    0x840009ba     0x40    addi s7,s7,-1174 # ffffffff84001520 <ndks_boot>
    0x840009be     0x44    li s4,1
    0x840009c0     0x46    slli s11,s4,0x26
    0x840009c4     0x4a    li a5,-1
    0x840009c6     0x4c    srli a5,a5,0x19
    0x840009c8     0x4e    sd a5,0(sp)           ; stack access
    0x840009ca     0x50    slli a5,s4,0x3c
    0x840009ce     0x54    sd a5,8(sp)           ; stack access
    0x840009d0     0x56    j ffffffff840009f6 <create_untypeds_for_region+0x7c>
    0x840009d2     0x58    mv s0,s5
    0x840009d4     0x5a    ld a5,32(sp)          ; stack access
    0x840009d6     0x5c    sd a5,48(sp)          ; stack access
    0x840009d8     0x5e    ld a5,40(sp)          ; stack access
    0x840009da     0x60    sd a5,56(sp)          ; stack access
    0x840009dc     0x62    ld a5,592(s7)
    0x840009e0     0x66    sub a5,a5,s8
    0x840009e4     0x6a    li a4,49
    0x840009e8     0x6e    bgeu a4,a5,ffffffff84000a28 <create_untypeds_for_region+0xae>
    0x840009ec     0x72    sll s0,s4,s0
    0x840009f0     0x76    add s2,s2,s0
    0x840009f2     0x78    beq s3,s2,ffffffff84000a6c <create_untypeds_for_region+0xf2>
    0x840009f6     0x7c    sub a0,s3,s2
    0x840009fa     0x80    jal ra,ffffffff8401706c <__clzdi2>
    0x840009fe     0x84    sext.w s1,a0
    0x84000a02     0x88    sub s1,s6,s1
    0x84000a06     0x8c    mv s0,s1
    0x84000a08     0x8e    beqz s2,ffffffff84000a16 <create_untypeds_for_region+0x9c>
    0x84000a0c     0x92    mv a0,s2
    0x84000a0e     0x94    jal ra,ffffffff8401708a <__ctzdi2>
    0x84000a12     0x98    sext.w s0,a0
    0x84000a16     0x9c    bgeu s1,s0,ffffffff84000a1c <create_untypeds_for_region+0xa2>
    0x84000a1a     0xa0    mv s0,s1
    0x84000a1c     0xa2    bltu s5,s0,ffffffff840009d2 <create_untypeds_for_region+0x58>
    0x84000a20     0xa6    li a5,3
    0x84000a22     0xa8    bgeu a5,s0,ffffffff840009ec <create_untypeds_for_region+0x72>
    0x84000a26     0xac    j ffffffff840009d4 <create_untypeds_for_region+0x5a>
    0x84000a28     0xae    slli a5,a5,0x4
    0x84000a2a     0xb0    ld a4,584(s7)
    0x84000a2e     0xb4    add a5,a5,a4
    0x84000a30     0xb6    sd zero,176(a5)
    0x84000a34     0xba    add a4,s2,s11
    0x84000a38     0xbe    sd a4,168(a5)
    0x84000a3a     0xc0    sb s0,176(a5)
    0x84000a3e     0xc4    sb s9,177(a5)
    0x84000a42     0xc8    ld a5,0(sp)           ; stack access
    0x84000a44     0xca    and a2,s2,a5
    0x84000a48     0xce    addiw a5,s0,-4
    0x84000a4c     0xd2    sll a5,s4,a5
    0x84000a50     0xd6    slli a5,a5,0x19
    0x84000a52     0xd8    andi a3,s0,63
    0x84000a56     0xdc    or a3,a3,s10
    0x84000a5a     0xe0    ld a4,8(sp)           ; stack access
    0x84000a5c     0xe2    or a2,a2,a4
    0x84000a5e     0xe4    or a3,a3,a5
    0x84000a60     0xe6    ld a0,48(sp)          ; stack access
    0x84000a62     0xe8    ld a1,56(sp)          ; stack access
    0x84000a64     0xea    jal ra,ffffffff8400068e <provide_cap>
    0x84000a68     0xee    bnez a0,ffffffff840009ec <create_untypeds_for_region+0x72>
    0x84000a6a     0xf0    j ffffffff84000a6e <create_untypeds_for_region+0xf4>
    0x84000a6c     0xf2    li a0,1
    0x84000a6e     0xf4    ld ra,184(sp)         ; stack access
    0x84000a70     0xf6    ld s0,176(sp)         ; stack access
    0x84000a72     0xf8    ld s1,168(sp)         ; stack access
    0x84000a74     0xfa    ld s2,160(sp)         ; stack access
    0x84000a76     0xfc    ld s3,152(sp)         ; stack access
    0x84000a78     0xfe    ld s4,144(sp)         ; stack access
    0x84000a7a    0x100    ld s5,136(sp)         ; stack access
    0x84000a7c    0x102    ld s6,128(sp)         ; stack access
    0x84000a7e    0x104    ld s7,120(sp)         ; stack access
    0x84000a80    0x106    ld s8,112(sp)         ; stack access
    0x84000a82    0x108    ld s9,104(sp)         ; stack access
    0x84000a84    0x10a    ld s10,96(sp)         ; stack access
    0x84000a86    0x10c    ld s11,88(sp)         ; stack access
    0x84000a88    0x10e    addi sp,sp,192
    0x84000a8a    0x110    ret
    0x84000a8c    0x112    li a0,1
    0x84000a8e    0x114    j ffffffff84000a6e <create_untypeds_for_region+0xf4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 167 nodes.

Section invokeUntyped_Retype (236 of 267)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 103 instructions.


Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x84016038      0x0    addi sp,sp,-112
    0x8401603a      0x2    sd ra,104(sp)         ; stack access
    0x8401603c      0x4    sd s0,96(sp)          ; stack access
    0x8401603e      0x6    sd s1,88(sp)          ; stack access
    0x84016040      0x8    sd s2,80(sp)          ; stack access
    0x84016042      0xa    sd s3,72(sp)          ; stack access
    0x84016044      0xc    sd s4,64(sp)          ; stack access
    0x84016046      0xe    sd s5,56(sp)          ; stack access
    0x84016048     0x10    sd s6,48(sp)          ; stack access
    0x8401604a     0x12    sd s7,40(sp)          ; stack access
    0x8401604c     0x14    sd s8,32(sp)          ; stack access
    0x8401604e     0x16    sd s9,24(sp)          ; stack access
    0x84016050     0x18    sd s10,16(sp)         ; stack access
    0x84016052     0x1a    sd s11,8(sp)          ; stack access
    0x84016054     0x1c    mv s0,a0
    0x84016056     0x1e    mv s3,a2
    0x84016058     0x20    mv s1,a3
    0x8401605a     0x22    mv s4,a4
    0x8401605c     0x24    mv s5,a5
    0x8401605e     0x26    mv s6,a6
    0x84016060     0x28    mv s2,a7
    0x84016062     0x2a    ld s9,0(a0)
    0x84016066     0x2e    slli s7,s9,0x19
    0x8401606a     0x32    srli s7,s7,0x19
    0x8401606e     0x36    slli a5,s9,0x19
    0x84016072     0x3a    bgez a5,ffffffff8401607e <invokeUntyped_Retype+0x46>
    0x84016076     0x3e    li a5,-1
    0x84016078     0x40    slli a5,a5,0x27
    0x8401607a     0x42    or s7,s7,a5
    0x8401607e     0x46    beqz a1,ffffffff840160b6 <invokeUntyped_Retype+0x7e>
    0x84016080     0x48    ld s10,8(s0)
    0x84016084     0x4c    srli a5,s10,0x19
    0x84016088     0x50    slli s8,a5,0x4
    0x8401608c     0x54    beqz a5,ffffffff840160b6 <invokeUntyped_Retype+0x7e>
    0x8401608e     0x56    srli a5,s10,0x6
    0x84016092     0x5a    andi a5,a5,1
    0x84016094     0x5c    bnez a5,ffffffff840160a8 <invokeUntyped_Retype+0x70>
    0x84016096     0x5e    andi a5,s10,56
    0x8401609a     0x62    bnez a5,ffffffff8401610a <invokeUntyped_Retype+0xd2>
    0x8401609c     0x64    li a1,1
    0x8401609e     0x66    sll a1,a1,s10
    0x840160a2     0x6a    mv a0,s7
    0x840160a4     0x6c    jal ra,ffffffff840156b8 <memzero>
    0x840160a8     0x70    sd s9,0(s0)
    0x840160ac     0x74    slli s10,s10,0x27
    0x840160ae     0x76    srli s10,s10,0x27
    0x840160b2     0x7a    sd s10,8(s0)
    0x840160b6     0x7e    mv a1,s4
    0x840160b8     0x80    mv a0,s1
    0x840160ba     0x82    jal ra,ffffffff8401195e <getObjectSize>
    0x840160be     0x86    sll a1,s2,a0
    0x840160c2     0x8a    sub s7,s3,s7
    0x840160c6     0x8e    add a1,a1,s7
    0x840160c8     0x90    srli a1,a1,0x4
    0x840160ca     0x92    slli a1,a1,0x19
    0x840160cc     0x94    ld a5,8(s0)
    0x840160ce     0x96    slli a5,a5,0x27
    0x840160d0     0x98    srli a5,a5,0x27
    0x840160d2     0x9a    or a1,a1,a5
    0x840160d4     0x9c    sd a1,8(s0)
    0x840160d6     0x9e    ld a7,112(sp)         ; stack access
    0x840160d8     0xa0    mv a6,s4
    0x840160da     0xa2    mv a5,s3
    0x840160dc     0xa4    mv a4,s2
    0x840160de     0xa6    mv a3,s6
    0x840160e0     0xa8    mv a2,s5
    0x840160e2     0xaa    mv a1,s0
    0x840160e4     0xac    mv a0,s1
    0x840160e6     0xae    jal ra,ffffffff84012164 <createNewObjects>
    0x840160ea     0xb2    li a0,0
    0x840160ec     0xb4    ld ra,104(sp)         ; stack access
    0x840160ee     0xb6    ld s0,96(sp)          ; stack access
    0x840160f0     0xb8    ld s1,88(sp)          ; stack access
    0x840160f2     0xba    ld s2,80(sp)          ; stack access
    0x840160f4     0xbc    ld s3,72(sp)          ; stack access
    0x840160f6     0xbe    ld s4,64(sp)          ; stack access
    0x840160f8     0xc0    ld s5,56(sp)          ; stack access
    0x840160fa     0xc2    ld s6,48(sp)          ; stack access
    0x840160fc     0xc4    ld s7,40(sp)          ; stack access
    0x840160fe     0xc6    ld s8,32(sp)          ; stack access
    0x84016100     0xc8    ld s9,24(sp)          ; stack access
    0x84016102     0xca    ld s10,16(sp)         ; stack access
    0x84016104     0xcc    ld s11,8(sp)          ; stack access
    0x84016106     0xce    addi sp,sp,112
    0x84016108     0xd0    ret
    0x8401610a     0xd2    addi s8,s8,-1
    0x8401610c     0xd4    andi s8,s8,-256
    0x84016110     0xd8    slli s10,s10,0x27
    0x84016112     0xda    srli s10,s10,0x27
    0x84016116     0xde    li s11,-256
    0x8401611a     0xe2    li a1,256
    0x8401611e     0xe6    add a0,s7,s8
    0x84016122     0xea    jal ra,ffffffff840156b8 <memzero>
    0x84016126     0xee    sd s9,0(s0)
    0x8401612a     0xf2    srli a5,s8,0x4
    0x8401612e     0xf6    slli a5,a5,0x19
    0x84016130     0xf8    or a5,a5,s10
    0x84016134     0xfc    sd a5,8(s0)
    0x84016136     0xfe    jal ra,ffffffff84011376 <preemptionPoint>
    0x8401613a    0x102    bnez a0,ffffffff840160ec <invokeUntyped_Retype+0xb4>
    0x8401613c    0x104    addi s8,s8,-256
    0x84016140    0x108    bne s8,s11,ffffffff8401611a <invokeUntyped_Retype+0xe2>
    0x84016144    0x10c    j ffffffff840160b6 <invokeUntyped_Retype+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 158 nodes.

Section decodeSetIPCBuffer (237 of 267)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 78 instructions.


Stack analysis
---------------

29 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x84014b80     0x0    addi sp,sp,-176
    0x84014b82     0x2    sd ra,168(sp)         ; stack access
    0x84014b84     0x4    sd s0,160(sp)         ; stack access
    0x84014b86     0x6    sd s1,152(sp)         ; stack access
    0x84014b88     0x8    sd s2,144(sp)         ; stack access
    0x84014b8a     0xa    sd a0,64(sp)          ; stack access
    0x84014b8c     0xc    sd a1,72(sp)          ; stack access
    0x84014b8e     0xe    beqz a2,ffffffff84014bd2 <decodeSetIPCBuffer+0x52>
    0x84014b90    0x10    mv s2,a3
    0x84014b92    0x12    auipc s0,0x8
    0x84014b96    0x16    ld s0,238(s0) # ffffffff8401cc80 <current_extra_caps>
    0x84014b9a    0x1a    beqz s0,ffffffff84014bd2 <decodeSetIPCBuffer+0x52>
    0x84014b9c    0x1c    auipc a5,0x19
    0x84014ba0    0x20    ld a5,-260(a5) # ffffffff8402da98 <ksCurThread>
    0x84014ba4    0x24    ld s1,88(a5)
    0x84014ba6    0x26    ld a5,0(s0)
    0x84014ba8    0x28    sd a5,112(sp)         ; stack access
    0x84014baa    0x2a    ld a5,8(s0)
    0x84014bac    0x2c    sd a5,120(sp)         ; stack access
    0x84014bae    0x2e    beqz s1,ffffffff84014be0 <decodeSetIPCBuffer+0x60>
    0x84014bb0    0x30    ld a2,112(sp)         ; stack access
    0x84014bb2    0x32    mv a3,a5
    0x84014bb4    0x34    mv a1,s0
    0x84014bb6    0x36    addi a0,sp,88
    0x84014bb8    0x38    jal ra,ffffffff84011da6 <deriveCap>
    0x84014bbc    0x3c    ld a0,88(sp)          ; stack access
    0x84014bbe    0x3e    bnez a0,ffffffff84014c2e <decodeSetIPCBuffer+0xae>
    0x84014bc0    0x40    ld a1,96(sp)          ; stack access
    0x84014bc2    0x42    sd a1,112(sp)         ; stack access
    0x84014bc4    0x44    ld a2,104(sp)         ; stack access
    0x84014bc6    0x46    sd a2,120(sp)         ; stack access
    0x84014bc8    0x48    mv a0,s1
    0x84014bca    0x4a    jal ra,ffffffff84010a46 <checkValidIPCBuffer>
    0x84014bce    0x4e    beqz a0,ffffffff84014be2 <decodeSetIPCBuffer+0x62>
    0x84014bd0    0x50    j ffffffff84014c2e <decodeSetIPCBuffer+0xae>
    0x84014bd2    0x52    li a5,7
    0x84014bd4    0x54    auipc a4,0x8
    0x84014bd8    0x58    sd a5,164(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014bdc    0x5c    li a0,3
    0x84014bde    0x5e    j ffffffff84014c2e <decodeSetIPCBuffer+0xae>
    0x84014be0    0x60    li s0,0
    0x84014be2    0x62    li a1,2
    0x84014be4    0x64    auipc a0,0x19
    0x84014be8    0x68    ld a0,-332(a0) # ffffffff8402da98 <ksCurThread>
    0x84014bec    0x6c    jal ra,ffffffff840122d0 <setThreadState>
    0x84014bf0    0x70    ld a5,64(sp)          ; stack access
    0x84014bf2    0x72    slli a0,a5,0x19
    0x84014bf6    0x76    srli a0,a0,0x19
    0x84014bf8    0x78    slli a4,a5,0x19
    0x84014bfc    0x7c    bgez a4,ffffffff84014c06 <decodeSetIPCBuffer+0x86>
    0x84014c00    0x80    li a5,-1
    0x84014c02    0x82    slli a5,a5,0x27
    0x84014c04    0x84    or a0,a0,a5
    0x84014c06    0x86    li a5,2
    0x84014c08    0x88    sd a5,56(sp)          ; stack access
    0x84014c0a    0x8a    sd s0,48(sp)          ; stack access
    0x84014c0c    0x8c    ld a5,112(sp)         ; stack access
    0x84014c0e    0x8e    sd a5,32(sp)          ; stack access
    0x84014c10    0x90    ld a5,120(sp)         ; stack access
    0x84014c12    0x92    sd a5,40(sp)          ; stack access
    0x84014c14    0x94    sd s1,24(sp)          ; stack access
    0x84014c16    0x96    sd zero,16(sp)        ; stack access
    0x84014c18    0x98    sd zero,0(sp)         ; stack access
    0x84014c1a    0x9a    sd zero,8(sp)         ; stack access
    0x84014c1c    0x9c    li a7,0
    0x84014c1e    0x9e    li a5,0
    0x84014c20    0xa0    li a6,0
    0x84014c22    0xa2    li a4,0
    0x84014c24    0xa4    li a3,0
    0x84014c26    0xa6    li a2,0
    0x84014c28    0xa8    mv a1,s2
    0x84014c2a    0xaa    jal ra,ffffffff840145d2 <invokeTCB_ThreadControl>
    0x84014c2e    0xae    ld ra,168(sp)         ; stack access
    0x84014c30    0xb0    ld s0,160(sp)         ; stack access
    0x84014c32    0xb2    ld s1,152(sp)         ; stack access
    0x84014c34    0xb4    ld s2,144(sp)         ; stack access
    0x84014c36    0xb6    addi sp,sp,176
    0x84014c38    0xb8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 131 nodes.

Section handleVMFaultEvent (238 of 267)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x84014178     0x0    addi sp,sp,-16
    0x8401417a     0x2    sd ra,8(sp)           ; stack access
    0x8401417c     0x4    mv a1,a0
    0x8401417e     0x6    auipc a0,0x1a
    0x84014182     0xa    ld a0,-1766(a0) # ffffffff8402da98 <ksCurThread>
    0x84014186     0xe    jal ra,ffffffff8401072c <handleVMFault>
    0x8401418a    0x12    bnez a0,ffffffff8401419c <handleVMFaultEvent+0x24>
    0x8401418c    0x14    jal ra,ffffffff8401292a <schedule>
    0x84014190    0x18    jal ra,ffffffff840123c0 <activateThread>
    0x84014194    0x1c    li a0,0
    0x84014196    0x1e    ld ra,8(sp)           ; stack access
    0x84014198    0x20    addi sp,sp,16
    0x8401419a    0x22    ret
    0x8401419c    0x24    auipc a0,0x1a
    0x840141a0    0x28    ld a0,-1796(a0) # ffffffff8402da98 <ksCurThread>
    0x840141a4    0x2c    jal ra,ffffffff840140ec <handleFault>
    0x840141a8    0x30    j ffffffff8401418c <handleVMFaultEvent+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 28 nodes.

Section handleInterruptEntry (239 of 267)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 24 instructions.

LW..

Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x840139fc     0x0    addi sp,sp,-16
    0x840139fe     0x2    sd ra,8(sp)           ; stack access
    0x84013a00     0x4    auipc a5,0x4
    0x84013a04     0x8    lw a5,520(a5) # ffffffff84017c08 <active_irq>
    0x84013a08     0xc    addiw a3,a5,-1
    0x84013a0c    0x10    li a4,53
    0x84013a10    0x14    bltu a4,a3,ffffffff84013a20 <handleInterruptEntry+0x24>
    0x84013a14    0x18    slli a0,a5,0x20
    0x84013a18    0x1c    srli a0,a0,0x20
    0x84013a1a    0x1e    jal ra,ffffffff840138f8 <handleInterrupt>
    0x84013a1e    0x22    j ffffffff84013a3a <handleInterruptEntry+0x3e>
    0x84013a20    0x24    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84013a24    0x28    sext.w a5,a0
    0x84013a28    0x2c    auipc a4,0x4
    0x84013a2c    0x30    sw a0,480(a4) # ffffffff84017c08 <active_irq>
    0x84013a30    0x34    addiw a0,a0,-1
    0x84013a32    0x36    li a4,53
    0x84013a36    0x3a    bgeu a4,a0,ffffffff84013a14 <handleInterruptEntry+0x18>
    0x84013a3a    0x3e    jal ra,ffffffff8401292a <schedule>
    0x84013a3e    0x42    jal ra,ffffffff840123c0 <activateThread>
    0x84013a42    0x46    li a0,0
    0x84013a44    0x48    ld ra,8(sp)           ; stack access
    0x84013a46    0x4a    addi sp,sp,16
    0x84013a48    0x4c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 37 nodes.

Section sendSignal (240 of 267)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 99 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `sendSignal`:

    0x840137fc     0x0    addi sp,sp,-48
    0x840137fe     0x2    sd ra,40(sp)          ; stack access
    0x84013800     0x4    sd s0,32(sp)          ; stack access
    0x84013802     0x6    sd s1,24(sp)          ; stack access
    0x84013804     0x8    sd s2,16(sp)          ; stack access
    0x84013806     0xa    mv s0,a0
    0x84013808     0xc    mv s1,a1
    0x8401380a     0xe    ld a4,0(a0)
    0x8401380c    0x10    andi a5,a4,3
    0x84013810    0x14    li a3,1
    0x84013812    0x16    beq a5,a3,ffffffff84013886 <sendSignal+0x8a>
    0x84013816    0x1a    li a3,2
    0x84013818    0x1c    beq a5,a3,ffffffff840138f0 <sendSignal+0xf4>
    0x8401381c    0x20    beqz a5,ffffffff8401382a <sendSignal+0x2e>
    0x8401381e    0x22    ld ra,40(sp)          ; stack access
    0x84013820    0x24    ld s0,32(sp)          ; stack access
    0x84013822    0x26    ld s1,24(sp)          ; stack access
    0x84013824    0x28    ld s2,16(sp)          ; stack access
    0x84013826    0x2a    addi sp,sp,48
    0x84013828    0x2c    ret
    0x8401382a    0x2e    ld a3,24(a0)
    0x8401382c    0x30    slli a5,a3,0x19
    0x84013830    0x34    srli a5,a5,0x19
    0x84013832    0x36    slli a2,a3,0x19
    0x84013836    0x3a    bgez a2,ffffffff8401385a <sendSignal+0x5e>
    0x8401383a    0x3e    li s2,-1
    0x8401383c    0x40    slli s2,s2,0x27
    0x8401383e    0x42    or s2,a5,s2
    0x84013842    0x46    ld a5,280(s2) # fffffffff8000118 <ki_end+0x73fd2118>
    0x84013846    0x4a    andi a5,a5,15
    0x84013848    0x4c    li a3,3
    0x8401384a    0x4e    beq a5,a3,ffffffff8401386c <sendSignal+0x70>
    0x8401384e    0x52    andi a4,a4,-4
    0x84013850    0x54    ori a4,a4,2
    0x84013854    0x58    sd a4,0(s0)
    0x84013856    0x5a    sd s1,16(s0)
    0x84013858    0x5c    j ffffffff8401381e <sendSignal+0x22>
    0x8401385a    0x5e    bnez a5,ffffffff84013868 <sendSignal+0x6c>
    0x8401385c    0x60    andi a4,a4,-4
    0x8401385e    0x62    ori a4,a4,2
    0x84013862    0x66    sd a4,0(a0)
    0x84013864    0x68    sd a1,16(s0)
    0x84013866    0x6a    j ffffffff8401381e <sendSignal+0x22>
    0x84013868    0x6c    mv s2,a5
    0x8401386a    0x6e    j ffffffff84013842 <sendSignal+0x46>
    0x8401386c    0x70    mv a0,s2
    0x8401386e    0x72    jal ra,ffffffff84012ca2 <cancelIPC>
    0x84013872    0x76    li a1,1
    0x84013874    0x78    mv a0,s2
    0x84013876    0x7a    jal ra,ffffffff840122d0 <setThreadState>
    0x8401387a    0x7e    sd s1,72(s2)
    0x8401387e    0x82    mv a0,s2
    0x84013880    0x84    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x84013884    0x88    j ffffffff8401381e <sendSignal+0x22>
    0x84013886    0x8a    ld a5,8(a0)
    0x84013888    0x8c    slli s2,a5,0x19
    0x8401388c    0x90    srli s2,s2,0x19
    0x84013890    0x94    slli a3,a5,0x19
    0x84013894    0x98    bgez a3,ffffffff840138a0 <sendSignal+0xa4>
    0x84013898    0x9c    li a5,-1
    0x8401389a    0x9e    slli a5,a5,0x27
    0x8401389c    0xa0    or s2,s2,a5
    0x840138a0    0xa4    srli a2,a4,0x19
    0x840138a4    0xa8    bgez a4,ffffffff840138ae <sendSignal+0xb2>
    0x840138a8    0xac    li a5,-1
    0x840138aa    0xae    slli a5,a5,0x27
    0x840138ac    0xb0    or a2,a2,a5
    0x840138ae    0xb2    mv a1,s2
    0x840138b0    0xb4    mv a0,s2
    0x840138b2    0xb6    jal ra,ffffffff84012af8 <tcbEPDequeue>
    0x840138b6    0xba    ld a3,8(s0)
    0x840138b8    0xbc    li a4,-1
    0x840138ba    0xbe    slli a5,a4,0x27
    0x840138be    0xc2    and a3,a3,a5
    0x840138c0    0xc4    srli a4,a4,0x19
    0x840138c2    0xc6    and a4,a4,a0
    0x840138c4    0xc8    or a4,a4,a3
    0x840138c6    0xca    sd a4,8(s0)
    0x840138c8    0xcc    ld a5,0(s0)
    0x840138ca    0xce    slli a5,a5,0x27
    0x840138cc    0xd0    srli a5,a5,0x27
    0x840138ce    0xd2    slli a1,a1,0x19
    0x840138d0    0xd4    or a5,a5,a1
    0x840138d2    0xd6    beqz a0,ffffffff840138ea <sendSignal+0xee>
    0x840138d4    0xd8    sd a5,0(s0)
    0x840138d6    0xda    li a1,1
    0x840138d8    0xdc    mv a0,s2
    0x840138da    0xde    jal ra,ffffffff840122d0 <setThreadState>
    0x840138de    0xe2    sd s1,72(s2)
    0x840138e2    0xe6    mv a0,s2
    0x840138e4    0xe8    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x840138e8    0xec    j ffffffff8401381e <sendSignal+0x22>
    0x840138ea    0xee    andi a5,a5,-4
    0x840138ec    0xf0    sd a5,0(s0)
    0x840138ee    0xf2    j ffffffff840138d6 <sendSignal+0xda>
    0x840138f0    0xf4    ld a1,16(a0)
    0x840138f2    0xf6    or s1,s1,a1
    0x840138f4    0xf8    sd s1,16(a0)
    0x840138f6    0xfa    j ffffffff8401381e <sendSignal+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
99 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 149 nodes.

Section cancelIPC (241 of 267)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 88 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelIPC`:

    0x84012ca2     0x0    addi sp,sp,-48
    0x84012ca4     0x2    sd ra,40(sp)          ; stack access
    0x84012ca6     0x4    sd s0,32(sp)          ; stack access
    0x84012ca8     0x6    sd s1,24(sp)          ; stack access
    0x84012caa     0x8    mv s0,a0
    0x84012cac     0xa    ld a4,280(a0)
    0x84012cb0     0xe    andi a5,a4,15
    0x84012cb4    0x12    li a3,5
    0x84012cb6    0x14    beq a5,a3,ffffffff84012d58 <cancelIPC+0xb6>
    0x84012cba    0x18    bltu a3,a5,ffffffff84012d2e <cancelIPC+0x8c>
    0x84012cbe    0x1c    addi a5,a5,-3
    0x84012cc0    0x1e    li a3,1
    0x84012cc2    0x20    bltu a3,a5,ffffffff84012d24 <cancelIPC+0x82>
    0x84012cc6    0x24    lui a5,0xe0000
    0x84012cca    0x28    srli a5,a5,0x19
    0x84012ccc    0x2a    and a5,a5,a4
    0x84012cce    0x2c    slli a3,a4,0x19
    0x84012cd2    0x30    bgez a3,ffffffff84012cdc <cancelIPC+0x3a>
    0x84012cd6    0x34    li a4,-1
    0x84012cd8    0x36    slli a4,a4,0x27
    0x84012cda    0x38    or a5,a5,a4
    0x84012cdc    0x3a    mv s1,a5
    0x84012cde    0x3c    ld a1,8(a5)
    0x84012ce0    0x3e    ld a5,0(a5)
    0x84012ce2    0x40    lui a2,0xf8000
    0x84012ce6    0x44    srli a2,a2,0x19
    0x84012ce8    0x46    and a2,a2,a5
    0x84012cea    0x48    slli a4,a5,0x19
    0x84012cee    0x4c    bgez a4,ffffffff84012cf8 <cancelIPC+0x56>
    0x84012cf2    0x50    li a5,-1
    0x84012cf4    0x52    slli a5,a5,0x27
    0x84012cf6    0x54    or a2,a2,a5
    0x84012cf8    0x56    mv a0,s0
    0x84012cfa    0x58    jal ra,ffffffff84012af8 <tcbEPDequeue>
    0x84012cfe    0x5c    sd a0,0(sp)           ; stack access
    0x84012d00    0x5e    sd a1,8(sp)           ; stack access
    0x84012d02    0x60    sd a0,8(s1)
    0x84012d04    0x62    ld a5,0(s1)
    0x84012d06    0x64    li a4,-1
    0x84012d08    0x66    slli a4,a4,0x27
    0x84012d0a    0x68    addi a4,a4,3
    0x84012d0c    0x6a    and a5,a5,a4
    0x84012d0e    0x6c    lui a4,0xf8000
    0x84012d12    0x70    srli a4,a4,0x19
    0x84012d14    0x72    and a1,a1,a4
    0x84012d16    0x74    or a1,a1,a5
    0x84012d18    0x76    beqz a0,ffffffff84012d52 <cancelIPC+0xb0>
    0x84012d1a    0x78    sd a1,0(s1)
    0x84012d1c    0x7a    li a1,0
    0x84012d1e    0x7c    mv a0,s0
    0x84012d20    0x7e    jal ra,ffffffff840122d0 <setThreadState>
    0x84012d24    0x82    ld ra,40(sp)          ; stack access
    0x84012d26    0x84    ld s0,32(sp)          ; stack access
    0x84012d28    0x86    ld s1,24(sp)          ; stack access
    0x84012d2a    0x88    addi sp,sp,48
    0x84012d2c    0x8a    ret
    0x84012d2e    0x8c    li a3,6
    0x84012d30    0x8e    bne a5,a3,ffffffff84012d24 <cancelIPC+0x82>
    0x84012d34    0x92    lui a1,0xe0000
    0x84012d38    0x96    srli a1,a1,0x19
    0x84012d3a    0x98    and a1,a1,a4
    0x84012d3c    0x9a    slli a5,a4,0x19
    0x84012d40    0x9e    bgez a5,ffffffff84012d4a <cancelIPC+0xa8>
    0x84012d44    0xa2    li a5,-1
    0x84012d46    0xa4    slli a5,a5,0x27
    0x84012d48    0xa6    or a1,a1,a5
    0x84012d4a    0xa8    mv a0,s0
    0x84012d4c    0xaa    jal ra,ffffffff84012c32 <cancelSignal>
    0x84012d50    0xae    j ffffffff84012d24 <cancelIPC+0x82>
    0x84012d52    0xb0    andi a1,a1,-4
    0x84012d54    0xb2    sd a1,0(s1)
    0x84012d56    0xb4    j ffffffff84012d1c <cancelIPC+0x7a>
    0x84012d58    0xb6    sd zero,312(a0)
    0x84012d5c    0xba    sd zero,320(a0)
    0x84012d60    0xbe    andi s0,a0,-1024
    0x84012d64    0xc2    ld a5,88(s0)
    0x84012d66    0xc4    lui a0,0xf8000
    0x84012d6a    0xc8    srli a0,a0,0x19
    0x84012d6c    0xca    and a0,a0,a5
    0x84012d6e    0xcc    slli a4,a5,0x19
    0x84012d72    0xd0    bgez a4,ffffffff84012d82 <cancelIPC+0xe0>
    0x84012d76    0xd4    li a5,-1
    0x84012d78    0xd6    slli a5,a5,0x27
    0x84012d7a    0xd8    or a0,a0,a5
    0x84012d7c    0xda    jal ra,ffffffff8401364e <cteDeleteOne>
    0x84012d80    0xde    j ffffffff84012d24 <cancelIPC+0x82>
    0x84012d82    0xe0    beqz a0,ffffffff84012d24 <cancelIPC+0x82>
    0x84012d84    0xe2    j ffffffff84012d7c <cancelIPC+0xda>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 131 nodes.

Section invokeTCB_ThreadControl (242 of 267)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControl` consists of 130 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `invokeTCB_ThreadControl`:

    0x840145d2      0x0    addi sp,sp,-96
    0x840145d4      0x2    sd ra,88(sp)          ; stack access
    0x840145d6      0x4    sd s0,80(sp)          ; stack access
    0x840145d8      0x6    sd s1,72(sp)          ; stack access
    0x840145da      0x8    sd s2,64(sp)          ; stack access
    0x840145dc      0xa    sd s3,56(sp)          ; stack access
    0x840145de      0xc    sd s4,48(sp)          ; stack access
    0x840145e0      0xe    sd s5,40(sp)          ; stack access
    0x840145e2     0x10    mv s0,a0
    0x840145e4     0x12    mv s2,a1
    0x840145e6     0x14    mv s3,a4
    0x840145e8     0x16    sd a5,0(sp)           ; stack access
    0x840145ea     0x18    sd a6,8(sp)           ; stack access
    0x840145ec     0x1a    mv s4,a7
    0x840145ee     0x1c    ld s1,152(sp)         ; stack access
    0x840145f0     0x1e    slli a5,a0,0x19
    0x840145f4     0x22    srli a5,a5,0x19
    0x840145f6     0x24    li a0,3
    0x840145f8     0x26    slli a0,a0,0x3d
    0x840145fa     0x28    or a5,a5,a0
    0x840145fc     0x2a    sd a5,16(sp)          ; stack access
    0x840145fe     0x2c    sd zero,24(sp)        ; stack access
    0x84014600     0x2e    andi a5,s1,4
    0x84014604     0x32    beqz a5,ffffffff84014702 <invokeTCB_ThreadControl+0x130>
    0x84014608     0x36    sd a2,376(s0)
    0x8401460c     0x3a    andi a4,s1,8
    0x84014610     0x3e    bnez a4,ffffffff84014684 <invokeTCB_ThreadControl+0xb2>
    0x84014612     0x40    andi s5,s0,-1024
    0x84014616     0x44    li a1,1
    0x84014618     0x46    mv a0,s5
    0x8401461a     0x48    jal ra,ffffffff84012f74 <cteDelete>
    0x8401461e     0x4c    bnez a0,ffffffff84014714 <invokeTCB_ThreadControl+0x142>
    0x84014622     0x50    ld a2,0(s4)
    0x84014626     0x54    ld a3,8(s4)
    0x8401462a     0x58    ld a0,0(sp)           ; stack access
    0x8401462c     0x5a    ld a1,8(sp)           ; stack access
    0x8401462e     0x5c    jal ra,ffffffff84011e20 <sameObjectAs>
    0x84014632     0x60    beqz a0,ffffffff84014646 <invokeTCB_ThreadControl+0x74>
    0x84014634     0x62    ld a2,0(s2)
    0x84014638     0x66    ld a3,8(s2)
    0x8401463c     0x6a    ld a0,16(sp)          ; stack access
    0x8401463e     0x6c    ld a1,24(sp)          ; stack access
    0x84014640     0x6e    jal ra,ffffffff84011e20 <sameObjectAs>
    0x84014644     0x72    bnez a0,ffffffff8401468c <invokeTCB_ThreadControl+0xba>
    0x84014646     0x74    addi s5,s5,32 # 2020 <KERNEL_OFFSET-0xfffffffeffffdfe0>
    0x8401464a     0x78    li a1,1
    0x8401464c     0x7a    mv a0,s5
    0x8401464e     0x7c    jal ra,ffffffff84012f74 <cteDelete>
    0x84014652     0x80    bnez a0,ffffffff84014714 <invokeTCB_ThreadControl+0x142>
    0x84014654     0x82    ld a5,112(sp)         ; stack access
    0x84014656     0x84    ld a2,0(a5)
    0x84014658     0x86    ld a3,8(a5)
    0x8401465a     0x88    ld a0,96(sp)          ; stack access
    0x8401465c     0x8a    ld a1,104(sp)         ; stack access
    0x8401465e     0x8c    jal ra,ffffffff84011e20 <sameObjectAs>
    0x84014662     0x90    beqz a0,ffffffff84014708 <invokeTCB_ThreadControl+0x136>
    0x84014664     0x92    ld a2,0(s2)
    0x84014668     0x96    ld a3,8(s2)
    0x8401466c     0x9a    ld a0,16(sp)          ; stack access
    0x8401466e     0x9c    ld a1,24(sp)          ; stack access
    0x84014670     0x9e    jal ra,ffffffff84011e20 <sameObjectAs>
    0x84014674     0xa2    beqz a0,ffffffff84014708 <invokeTCB_ThreadControl+0x136>
    0x84014676     0xa4    mv a3,s5
    0x84014678     0xa6    ld a2,112(sp)         ; stack access
    0x8401467a     0xa8    ld a0,96(sp)          ; stack access
    0x8401467c     0xaa    ld a1,104(sp)         ; stack access
    0x8401467e     0xac    jal ra,ffffffff840113ac <cteInsert>
    0x84014682     0xb0    j ffffffff84014708 <invokeTCB_ThreadControl+0x136>
    0x84014684     0xb2    sd a3,352(s0)
    0x84014688     0xb6    beqz a5,ffffffff84014708 <invokeTCB_ThreadControl+0x136>
    0x8401468a     0xb8    j ffffffff84014612 <invokeTCB_ThreadControl+0x40>
    0x8401468c     0xba    mv a3,s5
    0x8401468e     0xbc    mv a2,s4
    0x84014690     0xbe    ld a0,0(sp)           ; stack access
    0x84014692     0xc0    ld a1,8(sp)           ; stack access
    0x84014694     0xc2    jal ra,ffffffff840113ac <cteInsert>
    0x84014698     0xc6    j ffffffff84014646 <invokeTCB_ThreadControl+0x74>
    0x8401469a     0xc8    andi s4,s0,-1024
    0x8401469e     0xcc    addi s4,s4,128
    0x840146a2     0xd0    li a1,1
    0x840146a4     0xd2    mv a0,s4
    0x840146a6     0xd4    jal ra,ffffffff84012f74 <cteDelete>
    0x840146aa     0xd8    bnez a0,ffffffff84014714 <invokeTCB_ThreadControl+0x142>
    0x840146ac     0xda    ld a5,120(sp)         ; stack access
    0x840146ae     0xdc    sd a5,384(s0)
    0x840146b2     0xe0    ld a5,144(sp)         ; stack access
    0x840146b4     0xe2    beqz a5,ffffffff840146d6 <invokeTCB_ThreadControl+0x104>
    0x840146b6     0xe4    ld a2,0(a5)
    0x840146b8     0xe6    ld a3,8(a5)
    0x840146ba     0xe8    ld a0,128(sp)         ; stack access
    0x840146bc     0xea    ld a1,136(sp)         ; stack access
    0x840146be     0xec    jal ra,ffffffff84011e20 <sameObjectAs>
    0x840146c2     0xf0    beqz a0,ffffffff840146d6 <invokeTCB_ThreadControl+0x104>
    0x840146c4     0xf2    ld a2,0(s2)
    0x840146c8     0xf6    ld a3,8(s2)
    0x840146cc     0xfa    ld a0,16(sp)          ; stack access
    0x840146ce     0xfc    ld a1,24(sp)          ; stack access
    0x840146d0     0xfe    jal ra,ffffffff84011e20 <sameObjectAs>
    0x840146d4    0x102    bnez a0,ffffffff840146e8 <invokeTCB_ThreadControl+0x116>
    0x840146d6    0x104    auipc a5,0x19
    0x840146da    0x108    ld a5,962(a5) # ffffffff8402da98 <ksCurThread>
    0x840146de    0x10c    bne a5,s0,ffffffff8401470e <invokeTCB_ThreadControl+0x13c>
    0x840146e2    0x110    jal ra,ffffffff8401226a <rescheduleRequired>
    0x840146e6    0x114    j ffffffff8401470e <invokeTCB_ThreadControl+0x13c>
    0x840146e8    0x116    mv a3,s4
    0x840146ea    0x118    ld a2,144(sp)         ; stack access
    0x840146ec    0x11a    ld a0,128(sp)         ; stack access
    0x840146ee    0x11c    ld a1,136(sp)         ; stack access
    0x840146f0    0x11e    jal ra,ffffffff840113ac <cteInsert>
    0x840146f4    0x122    j ffffffff840146d6 <invokeTCB_ThreadControl+0x104>
    0x840146f6    0x124    mv a1,s3
    0x840146f8    0x126    mv a0,s0
    0x840146fa    0x128    jal ra,ffffffff84012a98 <setPriority>
    0x840146fe    0x12c    li a0,0
    0x84014700    0x12e    j ffffffff84014714 <invokeTCB_ThreadControl+0x142>
    0x84014702    0x130    andi a4,s1,8
    0x84014706    0x134    bnez a4,ffffffff84014684 <invokeTCB_ThreadControl+0xb2>
    0x84014708    0x136    andi a5,s1,2
    0x8401470c    0x13a    bnez a5,ffffffff8401469a <invokeTCB_ThreadControl+0xc8>
    0x8401470e    0x13c    andi a0,s1,1
    0x84014712    0x140    bnez a0,ffffffff840146f6 <invokeTCB_ThreadControl+0x124>
    0x84014714    0x142    ld ra,88(sp)          ; stack access
    0x84014716    0x144    ld s0,80(sp)          ; stack access
    0x84014718    0x146    ld s1,72(sp)          ; stack access
    0x8401471a    0x148    ld s2,64(sp)          ; stack access
    0x8401471c    0x14a    ld s3,56(sp)          ; stack access
    0x8401471e    0x14c    ld s4,48(sp)          ; stack access
    0x84014720    0x14e    ld s5,40(sp)          ; stack access
    0x84014722    0x150    addi sp,sp,96
    0x84014724    0x152    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
130 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControl` has 237 nodes.

Section handleRecv (243 of 267)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 125 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `handleRecv`:

    0x84014394      0x0    addi sp,sp,-64
    0x84014396      0x2    sd ra,56(sp)          ; stack access
    0x84014398      0x4    sd s0,48(sp)          ; stack access
    0x8401439a      0x6    sd s1,40(sp)          ; stack access
    0x8401439c      0x8    mv s0,a0
    0x8401439e      0xa    auipc a1,0x19
    0x840143a2      0xe    ld a1,1786(a1) # ffffffff8402da98 <ksCurThread>
    0x840143a6     0x12    ld s1,72(a1)
    0x840143a8     0x14    mv a2,s1
    0x840143aa     0x16    addi a0,sp,8
    0x840143ac     0x18    jal ra,ffffffff8401117e <lookupCap>
    0x840143b0     0x1c    ld a5,8(sp)           ; stack access
    0x840143b2     0x1e    bnez a5,ffffffff840143fe <handleRecv+0x6a>
    0x840143b4     0x20    ld a5,16(sp)          ; stack access
    0x840143b6     0x22    srli a4,a5,0x3b
    0x840143ba     0x26    li a3,4
    0x840143bc     0x28    beq a4,a3,ffffffff8401441e <handleRecv+0x8a>
    0x840143c0     0x2c    li a3,6
    0x840143c2     0x2e    beq a4,a3,ffffffff84014472 <handleRecv+0xde>
    0x840143c6     0x32    auipc a5,0x9
    0x840143ca     0x36    addi a5,a5,-1942 # ffffffff8401cc30 <current_lookup_fault>
    0x840143ce     0x3a    li a4,1
    0x840143d0     0x3c    sd a4,0(a5)
    0x840143d2     0x3e    sd zero,8(a5)
    0x840143d6     0x42    auipc a4,0x7
    0x840143da     0x46    addi a4,a4,1066 # ffffffff8401b800 <current_fault>
    0x840143de     0x4a    li a5,-1
    0x840143e0     0x4c    slli a5,a5,0x3f
    0x840143e2     0x4e    addi a5,a5,1
    0x840143e4     0x50    sd a5,0(a4)
    0x840143e6     0x52    sd s1,8(a4)
    0x840143e8     0x54    auipc a0,0x19
    0x840143ec     0x58    ld a0,1712(a0) # ffffffff8402da98 <ksCurThread>
    0x840143f0     0x5c    jal ra,ffffffff840140ec <handleFault>
    0x840143f4     0x60    ld ra,56(sp)          ; stack access
    0x840143f6     0x62    ld s0,48(sp)          ; stack access
    0x840143f8     0x64    ld s1,40(sp)          ; stack access
    0x840143fa     0x66    addi sp,sp,64
    0x840143fc     0x68    ret
    0x840143fe     0x6a    auipc a4,0x7
    0x84014402     0x6e    addi a4,a4,1026 # ffffffff8401b800 <current_fault>
    0x84014406     0x72    li a5,-1
    0x84014408     0x74    slli a5,a5,0x3f
    0x8401440a     0x76    addi a5,a5,1
    0x8401440c     0x78    sd a5,0(a4)
    0x8401440e     0x7a    sd s1,8(a4)
    0x84014410     0x7c    auipc a0,0x19
    0x84014414     0x80    ld a0,1672(a0) # ffffffff8402da98 <ksCurThread>
    0x84014418     0x84    jal ra,ffffffff840140ec <handleFault>
    0x8401441c     0x88    j ffffffff840143f4 <handleRecv+0x60>
    0x8401441e     0x8a    slli a4,a5,0x7
    0x84014422     0x8e    bgez a4,ffffffff84014442 <handleRecv+0xae>
    0x84014426     0x92    auipc s1,0x19
    0x8401442a     0x96    addi s1,s1,1650 # ffffffff8402da98 <ksCurThread>
    0x8401442e     0x9a    ld a0,0(s1)
    0x84014430     0x9c    jal ra,ffffffff84013ac0 <deleteCallerCap>
    0x84014434     0xa0    mv a3,s0
    0x84014436     0xa2    ld a1,16(sp)          ; stack access
    0x84014438     0xa4    ld a2,24(sp)          ; stack access
    0x8401443a     0xa6    ld a0,0(s1)
    0x8401443c     0xa8    jal ra,ffffffff84014202 <receiveIPC>
    0x84014440     0xac    j ffffffff840143f4 <handleRecv+0x60>
    0x84014442     0xae    auipc a5,0x8
    0x84014446     0xb2    addi a5,a5,2030 # ffffffff8401cc30 <current_lookup_fault>
    0x8401444a     0xb6    li a4,1
    0x8401444c     0xb8    sd a4,0(a5)
    0x8401444e     0xba    sd zero,8(a5)
    0x84014452     0xbe    auipc a4,0x7
    0x84014456     0xc2    addi a4,a4,942 # ffffffff8401b800 <current_fault>
    0x8401445a     0xc6    li a5,-1
    0x8401445c     0xc8    slli a5,a5,0x3f
    0x8401445e     0xca    addi a5,a5,1
    0x84014460     0xcc    sd a5,0(a4)
    0x84014462     0xce    sd s1,8(a4)
    0x84014464     0xd0    auipc a0,0x19
    0x84014468     0xd4    ld a0,1588(a0) # ffffffff8402da98 <ksCurThread>
    0x8401446c     0xd8    jal ra,ffffffff840140ec <handleFault>
    0x84014470     0xdc    j ffffffff840143f4 <handleRecv+0x60>
    0x84014472     0xde    slli a4,a5,0x19
    0x84014476     0xe2    srli a4,a4,0x19
    0x84014478     0xe4    slli a3,a5,0x19
    0x8401447c     0xe8    bgez a3,ffffffff84014486 <handleRecv+0xf2>
    0x84014480     0xec    li a3,-1
    0x84014482     0xee    slli a3,a3,0x27
    0x84014484     0xf0    or a4,a4,a3
    0x84014486     0xf2    ld a3,24(a4)
    0x84014488     0xf4    slli a4,a3,0x19
    0x8401448c     0xf8    srli a4,a4,0x19
    0x8401448e     0xfa    slli a2,a3,0x19
    0x84014492     0xfe    bgez a2,ffffffff840144d4 <handleRecv+0x140>
    0x84014496    0x102    slli a3,a5,0x5
    0x8401449a    0x106    li a5,-1
    0x8401449c    0x108    slli a5,a5,0x27
    0x8401449e    0x10a    or a4,a4,a5
    0x840144a0    0x10c    bltz a3,ffffffff840144f2 <handleRecv+0x15e>
    0x840144a4    0x110    auipc a5,0x8
    0x840144a8    0x114    addi a5,a5,1932 # ffffffff8401cc30 <current_lookup_fault>
    0x840144ac    0x118    li a4,1
    0x840144ae    0x11a    sd a4,0(a5)
    0x840144b0    0x11c    sd zero,8(a5)
    0x840144b4    0x120    auipc a4,0x7
    0x840144b8    0x124    addi a4,a4,844 # ffffffff8401b800 <current_fault>
    0x840144bc    0x128    li a5,-1
    0x840144be    0x12a    slli a5,a5,0x3f
    0x840144c0    0x12c    addi a5,a5,1
    0x840144c2    0x12e    sd a5,0(a4)
    0x840144c4    0x130    sd s1,8(a4)
    0x840144c6    0x132    auipc a0,0x19
    0x840144ca    0x136    ld a0,1490(a0) # ffffffff8402da98 <ksCurThread>
    0x840144ce    0x13a    jal ra,ffffffff840140ec <handleFault>
    0x840144d2    0x13e    j ffffffff840143f4 <handleRecv+0x60>
    0x840144d4    0x140    slli a3,a5,0x5
    0x840144d8    0x144    bgez a3,ffffffff840144a4 <handleRecv+0x110>
    0x840144dc    0x148    bnez a4,ffffffff840144f2 <handleRecv+0x15e>
    0x840144de    0x14a    mv a3,s0
    0x840144e0    0x14c    ld a1,16(sp)          ; stack access
    0x840144e2    0x14e    ld a2,24(sp)          ; stack access
    0x840144e4    0x150    auipc a0,0x19
    0x840144e8    0x154    ld a0,1460(a0) # ffffffff8402da98 <ksCurThread>
    0x840144ec    0x158    jal ra,ffffffff840124b6 <receiveSignal>
    0x840144f0    0x15c    j ffffffff840143f4 <handleRecv+0x60>
    0x840144f2    0x15e    auipc a5,0x19
    0x840144f6    0x162    ld a5,1446(a5) # ffffffff8402da98 <ksCurThread>
    0x840144fa    0x166    beq a4,a5,ffffffff840144de <handleRecv+0x14a>
    0x840144fe    0x16a    j ffffffff840144a4 <handleRecv+0x110>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
125 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 191 nodes.

Section doReplyTransfer (244 of 267)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 46 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `doReplyTransfer`:

    0x84013dbe     0x0    addi sp,sp,-32
    0x84013dc0     0x2    sd ra,24(sp)          ; stack access
    0x84013dc2     0x4    sd s0,16(sp)          ; stack access
    0x84013dc4     0x6    sd s1,8(sp)           ; stack access
    0x84013dc6     0x8    sd s2,0(sp)           ; stack access
    0x84013dc8     0xa    mv s1,a0
    0x84013dca     0xc    mv s0,a1
    0x84013dcc     0xe    mv s2,a2
    0x84013dce    0x10    ld a5,312(a1)
    0x84013dd2    0x14    andi a5,a5,15
    0x84013dd4    0x16    bnez a5,ffffffff84013e00 <doReplyTransfer+0x42>
    0x84013dd6    0x18    mv a4,a1
    0x84013dd8    0x1a    li a2,0
    0x84013dda    0x1c    li a1,0
    0x84013ddc    0x1e    jal ra,ffffffff84013d58 <doIPCTransfer>
    0x84013de0    0x22    mv a0,s2
    0x84013de2    0x24    jal ra,ffffffff8401364e <cteDeleteOne>
    0x84013de6    0x28    li a1,1
    0x84013de8    0x2a    mv a0,s0
    0x84013dea    0x2c    jal ra,ffffffff840122d0 <setThreadState>
    0x84013dee    0x30    mv a0,s0
    0x84013df0    0x32    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x84013df4    0x36    ld ra,24(sp)          ; stack access
    0x84013df6    0x38    ld s0,16(sp)          ; stack access
    0x84013df8    0x3a    ld s1,8(sp)           ; stack access
    0x84013dfa    0x3c    ld s2,0(sp)           ; stack access
    0x84013dfc    0x3e    addi sp,sp,32
    0x84013dfe    0x40    ret
    0x84013e00    0x42    mv a0,a2
    0x84013e02    0x44    jal ra,ffffffff8401364e <cteDeleteOne>
    0x84013e06    0x48    mv a1,s1
    0x84013e08    0x4a    mv a0,s0
    0x84013e0a    0x4c    jal ra,ffffffff84010576 <handleFaultReply>
    0x84013e0e    0x50    sd zero,312(s0)
    0x84013e12    0x54    sd zero,320(s0)
    0x84013e16    0x58    beqz a0,ffffffff84013e28 <doReplyTransfer+0x6a>
    0x84013e18    0x5a    li a1,2
    0x84013e1a    0x5c    mv a0,s0
    0x84013e1c    0x5e    jal ra,ffffffff840122d0 <setThreadState>
    0x84013e20    0x62    mv a0,s0
    0x84013e22    0x64    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x84013e26    0x68    j ffffffff84013df4 <doReplyTransfer+0x36>
    0x84013e28    0x6a    li a1,0
    0x84013e2a    0x6c    mv a0,s0
    0x84013e2c    0x6e    jal ra,ffffffff840122d0 <setThreadState>
    0x84013e30    0x72    j ffffffff84013df4 <doReplyTransfer+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 71 nodes.

Section doNormalTransfer (245 of 267)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 146 instructions.

RVC_FTTTFT________FT.
SLLW.....

Stack analysis
---------------

40 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84013bda      0x0    addi sp,sp,-192
    0x84013bdc      0x2    sd ra,184(sp)         ; stack access
    0x84013bde      0x4    sd s0,176(sp)         ; stack access
    0x84013be0      0x6    sd s1,168(sp)         ; stack access
    0x84013be2      0x8    sd s2,160(sp)         ; stack access
    0x84013be4      0xa    sd s3,152(sp)         ; stack access
    0x84013be6      0xc    sd s4,144(sp)         ; stack access
    0x84013be8      0xe    sd s5,136(sp)         ; stack access
    0x84013bea     0x10    sd s6,128(sp)         ; stack access
    0x84013bec     0x12    sd s7,120(sp)         ; stack access
    0x84013bee     0x14    sd s8,112(sp)         ; stack access
    0x84013bf0     0x16    sd s9,104(sp)         ; stack access
    0x84013bf2     0x18    sd s10,96(sp)         ; stack access
    0x84013bf4     0x1a    sd s11,88(sp)         ; stack access
    0x84013bf6     0x1c    mv s2,a0
    0x84013bf8     0x1e    mv s6,a1
    0x84013bfa     0x20    mv s5,a2
    0x84013bfc     0x22    mv s4,a3
    0x84013bfe     0x24    mv s1,a5
    0x84013c00     0x26    mv s3,a6
    0x84013c02     0x28    ld s0,80(a0)
    0x84013c04     0x2a    andi a3,s0,127
    0x84013c08     0x2e    li a5,120
    0x84013c0c     0x32    bgeu a5,a3,ffffffff84013c18 <doNormalTransfer+0x3e>
    0x84013c10     0x36    andi s0,s0,-128
    0x84013c14     0x3a    ori s0,s0,120
    0x84013c18     0x3e    bnez a4,ffffffff84013c76 <doNormalTransfer+0x9c>
    0x84013c1a     0x40    auipc a5,0x9
    0x84013c1e     0x44    sd zero,102(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84013c22     0x48    andi a4,s0,127
    0x84013c26     0x4c    mv a3,s3
    0x84013c28     0x4e    mv a2,s1
    0x84013c2a     0x50    mv a1,s6
    0x84013c2c     0x52    mv a0,s2
    0x84013c2e     0x54    jal ra,ffffffff84013b6a <copyMRs>
    0x84013c32     0x58    mv s2,a0
    0x84013c34     0x5a    lui a5,0xfffff
    0x84013c36     0x5c    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfd107f>
    0x84013c3a     0x60    and s0,s0,a5
    0x84013c3c     0x62    auipc a5,0x9
    0x84013c40     0x66    ld a5,68(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84013c44     0x6a    bnez a5,ffffffff84013c8c <doNormalTransfer+0xb2>
    0x84013c46     0x6c    andi s0,s0,-128
    0x84013c4a     0x70    andi s2,s2,127
    0x84013c4e     0x74    or s0,s0,s2
    0x84013c52     0x78    sd s0,80(s1)
    0x84013c54     0x7a    sd s4,72(s1)
    0x84013c58     0x7e    ld ra,184(sp)         ; stack access
    0x84013c5a     0x80    ld s0,176(sp)         ; stack access
    0x84013c5c     0x82    ld s1,168(sp)         ; stack access
    0x84013c5e     0x84    ld s2,160(sp)         ; stack access
    0x84013c60     0x86    ld s3,152(sp)         ; stack access
    0x84013c62     0x88    ld s4,144(sp)         ; stack access
    0x84013c64     0x8a    ld s5,136(sp)         ; stack access
    0x84013c66     0x8c    ld s6,128(sp)         ; stack access
    0x84013c68     0x8e    ld s7,120(sp)         ; stack access
    0x84013c6a     0x90    ld s8,112(sp)         ; stack access
    0x84013c6c     0x92    ld s9,104(sp)         ; stack access
    0x84013c6e     0x94    ld s10,96(sp)         ; stack access
    0x84013c70     0x96    ld s11,88(sp)         ; stack access
    0x84013c72     0x98    addi sp,sp,192
    0x84013c74     0x9a    ret
    0x84013c76     0x9c    mv a2,s0
    0x84013c78     0x9e    mv a1,s6
    0x84013c7a     0xa0    mv a0,s2
    0x84013c7c     0xa2    jal ra,ffffffff84013ad6 <lookupExtraCaps>
    0x84013c80     0xa6    beqz a0,ffffffff84013c22 <doNormalTransfer+0x48>
    0x84013c82     0xa8    auipc a5,0x9
    0x84013c86     0xac    sd zero,-2(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84013c8a     0xb0    j ffffffff84013c22 <doNormalTransfer+0x48>
    0x84013c8c     0xb2    beqz s3,ffffffff84013c46 <doNormalTransfer+0x6c>
    0x84013c90     0xb6    mv a1,s3
    0x84013c92     0xb8    mv a0,s1
    0x84013c94     0xba    jal ra,ffffffff84011722 <getReceiveSlots>
    0x84013c98     0xbe    mv s8,a0
    0x84013c9a     0xc0    auipc s9,0x9
    0x84013c9e     0xc4    addi s9,s9,-26 # ffffffff8401cc80 <current_extra_caps>
    0x84013ca2     0xc8    li s7,0
    0x84013ca4     0xca    li s10,-1
    0x84013ca6     0xcc    srli s11,s10,0x19
    0x84013caa     0xd0    li a5,1
    0x84013cac     0xd2    slli a5,a5,0x26
    0x84013cae     0xd4    sd a5,8(sp)           ; stack access
    0x84013cb0     0xd6    lui a5,0x1
    0x84013cb2     0xd8    addi a5,a5,-512 # e00 <KERNEL_OFFSET-0xfffffffefffff200>
    0x84013cb6     0xdc    sd a5,16(sp)          ; stack access
    0x84013cb8     0xde    lui a5,0xfffff
    0x84013cba     0xe0    addi a5,a5,511 # fffffffffffff1ff <ki_end+0x7bfd11ff>
    0x84013cbe     0xe4    sd a5,24(sp)          ; stack access
    0x84013cc0     0xe6    j ffffffff84013cf4 <doNormalTransfer+0x11a>
    0x84013cc2     0xe8    beqz s8,ffffffff84013d4c <doNormalTransfer+0x172>
    0x84013cc6     0xec    sd a2,40(sp)          ; stack access
    0x84013cc8     0xee    sd a3,48(sp)          ; stack access
    0x84013cca     0xf0    mv a1,s6
    0x84013ccc     0xf2    addi a0,sp,56
    0x84013cce     0xf4    jal ra,ffffffff84011da6 <deriveCap>
    0x84013cd2     0xf8    ld a5,56(sp)          ; stack access
    0x84013cd4     0xfa    bnez a5,ffffffff84013d4c <doNormalTransfer+0x172>
    0x84013cd6     0xfc    ld a5,64(sp)          ; stack access
    0x84013cd8     0xfe    srli a5,a5,0x3b
    0x84013cda    0x100    beqz a5,ffffffff84013d4c <doNormalTransfer+0x172>
    0x84013cdc    0x102    mv a3,s8
    0x84013cde    0x104    mv a2,s6
    0x84013ce0    0x106    ld a0,64(sp)          ; stack access
    0x84013ce2    0x108    ld a1,72(sp)          ; stack access
    0x84013ce4    0x10a    jal ra,ffffffff840113ac <cteInsert>
    0x84013ce8    0x10e    li s8,0
    0x84013cea    0x110    addi s7,s7,1
    0x84013cec    0x112    addi s9,s9,8
    0x84013cee    0x114    li a5,3
    0x84013cf0    0x116    beq s7,a5,ffffffff84013d4c <doNormalTransfer+0x172>
    0x84013cf4    0x11a    ld s6,0(s9)
    0x84013cf8    0x11e    beqz s6,ffffffff84013d4c <doNormalTransfer+0x172>
    0x84013cfc    0x122    ld a2,0(s6)
    0x84013d00    0x126    sd a2,40(sp)          ; stack access
    0x84013d02    0x128    ld a3,8(s6)
    0x84013d06    0x12c    sd a3,48(sp)          ; stack access
    0x84013d08    0x12e    srli a4,a2,0x3b
    0x84013d0c    0x132    li a5,4
    0x84013d0e    0x134    bne a4,a5,ffffffff84013cc2 <doNormalTransfer+0xe8>
    0x84013d12    0x138    and a5,a2,s11
    0x84013d16    0x13c    ld a4,8(sp)           ; stack access
    0x84013d18    0x13e    and a4,a4,a2
    0x84013d1a    0x140    beqz a4,ffffffff84013d22 <doNormalTransfer+0x148>
    0x84013d1c    0x142    slli a4,s10,0x27
    0x84013d20    0x146    or a5,a5,a4
    0x84013d22    0x148    bne s5,a5,ffffffff84013cc2 <doNormalTransfer+0xe8>
    0x84013d26    0x14c    slli a5,s7,0x3
    0x84013d2a    0x150    add a5,a5,s3
    0x84013d2c    0x152    sd a3,976(a5)
    0x84013d30    0x156    srli a5,s0,0x9
    0x84013d34    0x15a    andi a5,a5,7
    0x84013d36    0x15c    li a4,1
    0x84013d38    0x15e    sllw a4,a4,s7
    0x84013d3c    0x162    or a5,a5,a4
    0x84013d3e    0x164    slli a5,a5,0x9
    0x84013d40    0x166    ld a4,16(sp)          ; stack access
    0x84013d42    0x168    and a5,a5,a4
    0x84013d44    0x16a    ld a4,24(sp)          ; stack access
    0x84013d46    0x16c    and s0,s0,a4
    0x84013d48    0x16e    or s0,s0,a5
    0x84013d4a    0x170    j ffffffff84013cea <doNormalTransfer+0x110>
    0x84013d4c    0x172    slli a5,s7,0x7
    0x84013d50    0x176    andi a5,a5,384
    0x84013d54    0x17a    or s0,s0,a5
    0x84013d56    0x17c    j ffffffff84013c46 <doNormalTransfer+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
146 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 228 nodes.

Section restart (246 of 267)
============================

Deriving specifications
-----------------------

Section `restart` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `restart`:

    0x840137bc     0x0    addi sp,sp,-16
    0x840137be     0x2    sd ra,8(sp)           ; stack access
    0x840137c0     0x4    sd s0,0(sp)           ; stack access
    0x840137c2     0x6    mv s0,a0
    0x840137c4     0x8    ld a5,280(a0)
    0x840137c8     0xc    andi a5,a5,15
    0x840137ca     0xe    beqz a5,ffffffff840137d4 <restart+0x18>
    0x840137cc    0x10    addi a5,a5,-3
    0x840137ce    0x12    li a4,3
    0x840137d0    0x14    bltu a4,a5,ffffffff840137f4 <restart+0x38>
    0x840137d4    0x18    mv a0,s0
    0x840137d6    0x1a    jal ra,ffffffff84012ca2 <cancelIPC>
    0x840137da    0x1e    mv a0,s0
    0x840137dc    0x20    jal ra,ffffffff840116ee <setupReplyMaster>
    0x840137e0    0x24    li a1,2
    0x840137e2    0x26    mv a0,s0
    0x840137e4    0x28    jal ra,ffffffff840122d0 <setThreadState>
    0x840137e8    0x2c    mv a0,s0
    0x840137ea    0x2e    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x840137ee    0x32    mv a0,s0
    0x840137f0    0x34    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x840137f4    0x38    ld ra,8(sp)           ; stack access
    0x840137f6    0x3a    ld s0,0(sp)           ; stack access
    0x840137f8    0x3c    addi sp,sp,16
    0x840137fa    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 40 nodes.

Section cancelBadgedSends (247 of 267)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 85 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x84012b2e     0x0    addi sp,sp,-80
    0x84012b30     0x2    sd ra,72(sp)          ; stack access
    0x84012b32     0x4    sd s0,64(sp)          ; stack access
    0x84012b34     0x6    sd s1,56(sp)          ; stack access
    0x84012b36     0x8    sd s2,48(sp)          ; stack access
    0x84012b38     0xa    sd s3,40(sp)          ; stack access
    0x84012b3a     0xc    sd s4,32(sp)          ; stack access
    0x84012b3c     0xe    sd s5,24(sp)          ; stack access
    0x84012b3e    0x10    ld a5,0(a0)
    0x84012b40    0x12    andi a3,a5,3
    0x84012b44    0x16    li a4,1
    0x84012b46    0x18    beq a3,a4,ffffffff84012b52 <cancelBadgedSends+0x24>
    0x84012b4a    0x1c    andi a5,a5,1
    0x84012b4c    0x1e    beqz a5,ffffffff84012bf2 <cancelBadgedSends+0xc4>
    0x84012b4e    0x20    jal ra,ffffffff8401034a <halt>
    0x84012b52    0x24    mv s3,a0
    0x84012b54    0x26    mv s2,a1
    0x84012b56    0x28    ld s1,8(a0)
    0x84012b58    0x2a    mv s0,s1
    0x84012b5a    0x2c    lui a4,0xf8000
    0x84012b5e    0x30    srli a4,a4,0x19
    0x84012b60    0x32    and a4,a4,a5
    0x84012b62    0x34    slli a3,a5,0x19
    0x84012b66    0x38    bgez a3,ffffffff84012b70 <cancelBadgedSends+0x42>
    0x84012b6a    0x3c    li a3,-1
    0x84012b6c    0x3e    slli a3,a3,0x27
    0x84012b6e    0x40    or a4,a4,a3
    0x84012b70    0x42    mv s5,a4
    0x84012b72    0x44    sd zero,8(s3)
    0x84012b76    0x48    srli a5,a5,0x27
    0x84012b78    0x4a    slli a5,a5,0x27
    0x84012b7a    0x4c    sd a5,0(s3)
    0x84012b7e    0x50    bnez s1,ffffffff84012bb6 <cancelBadgedSends+0x88>
    0x84012b80    0x52    sd zero,8(s3)
    0x84012b84    0x56    lui a3,0xf8000
    0x84012b88    0x5a    srli a3,a3,0x19
    0x84012b8a    0x5c    and a4,a4,a3
    0x84012b8c    0x5e    or a5,a5,a4
    0x84012b8e    0x60    sd a5,0(s3)
    0x84012b92    0x64    j ffffffff84012bee <cancelBadgedSends+0xc0>
    0x84012b94    0x66    li a1,2
    0x84012b96    0x68    mv a0,s4
    0x84012b98    0x6a    jal ra,ffffffff840122d0 <setThreadState>
    0x84012b9c    0x6e    mv a0,s4
    0x84012b9e    0x70    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x84012ba2    0x74    mv a1,s1
    0x84012ba4    0x76    mv a2,s5
    0x84012ba6    0x78    mv a0,s4
    0x84012ba8    0x7a    jal ra,ffffffff84012af8 <tcbEPDequeue>
    0x84012bac    0x7e    mv s1,a0
    0x84012bae    0x80    sd a0,0(sp)           ; stack access
    0x84012bb0    0x82    sd a1,8(sp)           ; stack access
    0x84012bb2    0x84    mv s5,a1
    0x84012bb4    0x86    beqz s0,ffffffff84012bc6 <cancelBadgedSends+0x98>
    0x84012bb6    0x88    ld a5,296(s0)
    0x84012bba    0x8c    mv s4,s0
    0x84012bbc    0x8e    ld s0,408(s0)
    0x84012bc0    0x92    bne s2,a5,ffffffff84012bb4 <cancelBadgedSends+0x86>
    0x84012bc4    0x96    j ffffffff84012b94 <cancelBadgedSends+0x66>
    0x84012bc6    0x98    sd s1,8(s3)
    0x84012bca    0x9c    ld a1,0(s3)
    0x84012bce    0xa0    li a5,-1
    0x84012bd0    0xa2    slli a5,a5,0x27
    0x84012bd2    0xa4    addi a5,a5,3
    0x84012bd4    0xa6    and a5,a5,a1
    0x84012bd6    0xa8    lui a1,0xf8000
    0x84012bda    0xac    srli a1,a1,0x19
    0x84012bdc    0xae    and a1,s5,a1
    0x84012be0    0xb2    or a1,a1,a5
    0x84012be2    0xb4    beqz s1,ffffffff84012c04 <cancelBadgedSends+0xd6>
    0x84012be4    0xb6    andi a1,a1,-4
    0x84012be6    0xb8    ori a1,a1,1
    0x84012bea    0xbc    sd a1,0(s3)
    0x84012bee    0xc0    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84012bf2    0xc4    ld ra,72(sp)          ; stack access
    0x84012bf4    0xc6    ld s0,64(sp)          ; stack access
    0x84012bf6    0xc8    ld s1,56(sp)          ; stack access
    0x84012bf8    0xca    ld s2,48(sp)          ; stack access
    0x84012bfa    0xcc    ld s3,40(sp)          ; stack access
    0x84012bfc    0xce    ld s4,32(sp)          ; stack access
    0x84012bfe    0xd0    ld s5,24(sp)          ; stack access
    0x84012c00    0xd2    addi sp,sp,80
    0x84012c02    0xd4    ret
    0x84012c04    0xd6    sd a1,0(s3)
    0x84012c08    0xda    j ffffffff84012bee <cancelBadgedSends+0xc0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
85 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 133 nodes.

Section schedule (248 of 267)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 95 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedule`:

    0x8401292a      0x0    auipc a5,0xa
    0x8401292e      0x4    ld a5,790(a5) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012932      0x8    beqz a5,ffffffff84012a48 <schedule+0x11e>
    0x84012936      0xc    addi sp,sp,-48
    0x84012938      0xe    sd ra,40(sp)          ; stack access
    0x8401293a     0x10    sd s0,32(sp)          ; stack access
    0x8401293c     0x12    sd s1,24(sp)          ; stack access
    0x8401293e     0x14    sd s2,16(sp)          ; stack access
    0x84012940     0x16    sd s3,8(sp)           ; stack access
    0x84012942     0x18    sd s4,0(sp)           ; stack access
    0x84012944     0x1a    auipc a0,0x1b
    0x84012948     0x1e    ld a0,340(a0) # ffffffff8402da98 <ksCurThread>
    0x8401294c     0x22    ld a5,280(a0)
    0x84012950     0x26    andi a5,a5,15
    0x84012952     0x28    addi a5,a5,-1
    0x84012954     0x2a    li a4,1
    0x84012956     0x2c    li s3,0
    0x84012958     0x2e    bgeu a4,a5,ffffffff840129f6 <schedule+0xcc>
    0x8401295c     0x32    auipc s0,0xa
    0x84012960     0x36    ld s0,740(s0) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012964     0x3a    li a5,1
    0x84012966     0x3c    beq s0,a5,ffffffff840129fe <schedule+0xd4>
    0x8401296a     0x40    auipc s4,0x1b
    0x8401296e     0x44    ld s4,302(s4) # ffffffff8402da98 <ksCurThread>
    0x84012972     0x48    auipc a5,0xa
    0x84012976     0x4c    ld a5,694(a5) # ffffffff8401cc28 <ksIdleThread>
    0x8401297a     0x50    beq s4,a5,ffffffff8401298a <schedule+0x60>
    0x8401297e     0x54    ld a4,360(s0)
    0x84012982     0x58    ld a5,360(s4)
    0x84012986     0x5c    bgeu a4,a5,ffffffff84012a04 <schedule+0xda>
    0x8401298a     0x60    auipc s1,0x1b
    0x8401298e     0x64    ld s1,-394(s1) # ffffffff8402d800 <ksCurDomain>
    0x84012992     0x68    slli a4,s1,0x3
    0x84012996     0x6c    auipc a5,0x1b
    0x8401299a     0x70    addi a5,a5,130 # ffffffff8402da18 <ksReadyQueuesL1Bitmap>
    0x8401299e     0x74    add a5,a5,a4
    0x840129a0     0x76    ld a0,0(a5)
    0x840129a2     0x78    beqz a0,ffffffff84012a04 <schedule+0xda>
    0x840129a4     0x7a    jal ra,ffffffff8401706c <__clzdi2>
    0x840129a8     0x7e    sext.w s2,a0
    0x840129ac     0x82    slli s1,s1,0x2
    0x840129ae     0x84    addi a5,s2,-60
    0x840129b2     0x88    add s1,s1,a5
    0x840129b4     0x8a    slli s1,s1,0x3
    0x840129b6     0x8c    auipc a5,0x1b
    0x840129ba     0x90    addi a5,a5,-422 # ffffffff8402d810 <ksReadyQueuesL2Bitmap>
    0x840129be     0x94    add s1,s1,a5
    0x840129c0     0x96    ld a0,0(s1)
    0x840129c2     0x98    jal ra,ffffffff8401706c <__clzdi2>
    0x840129c6     0x9c    sext.w a0,a0
    0x840129c8     0x9e    li a5,63
    0x840129cc     0xa2    sub s2,a5,s2
    0x840129d0     0xa6    slli s2,s2,0x6
    0x840129d2     0xa8    sub a5,a5,a0
    0x840129d4     0xaa    or s2,s2,a5
    0x840129d8     0xae    ld a5,360(s0)
    0x840129dc     0xb2    bgeu a5,s2,ffffffff84012a04 <schedule+0xda>
    0x840129e0     0xb6    mv a0,s0
    0x840129e2     0xb8    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x840129e6     0xbc    li a5,1
    0x840129e8     0xbe    auipc a4,0xa
    0x840129ec     0xc2    sd a5,600(a4) # ffffffff8401cc40 <ksSchedulerAction>
    0x840129f0     0xc6    jal ra,ffffffff840128bc <scheduleChooseNewThread>
    0x840129f4     0xca    j ffffffff84012a1a <schedule+0xf0>
    0x840129f6     0xcc    jal ra,ffffffff840121dc <tcbSchedEnqueue>
    0x840129fa     0xd0    li s3,1
    0x840129fc     0xd2    j ffffffff8401295c <schedule+0x32>
    0x840129fe     0xd4    jal ra,ffffffff840128bc <scheduleChooseNewThread>
    0x84012a02     0xd8    j ffffffff84012a1a <schedule+0xf0>
    0x84012a04     0xda    beqz s3,ffffffff84012a14 <schedule+0xea>
    0x84012a08     0xde    ld a4,360(s0)
    0x84012a0c     0xe2    ld a5,360(s4)
    0x84012a10     0xe6    beq a4,a5,ffffffff84012a32 <schedule+0x108>
    0x84012a14     0xea    mv a0,s0
    0x84012a16     0xec    jal ra,ffffffff8401281e <switchToThread>
    0x84012a1a     0xf0    auipc a5,0xa
    0x84012a1e     0xf4    sd zero,550(a5) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012a22     0xf8    ld ra,40(sp)          ; stack access
    0x84012a24     0xfa    ld s0,32(sp)          ; stack access
    0x84012a26     0xfc    ld s1,24(sp)          ; stack access
    0x84012a28     0xfe    ld s2,16(sp)          ; stack access
    0x84012a2a    0x100    ld s3,8(sp)           ; stack access
    0x84012a2c    0x102    ld s4,0(sp)           ; stack access
    0x84012a2e    0x104    addi sp,sp,48
    0x84012a30    0x106    ret
    0x84012a32    0x108    mv a0,s0
    0x84012a34    0x10a    jal ra,ffffffff84012688 <tcbSchedAppend>
    0x84012a38    0x10e    li a5,1
    0x84012a3a    0x110    auipc a4,0xa
    0x84012a3e    0x114    sd a5,518(a4) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012a42    0x118    jal ra,ffffffff840128bc <scheduleChooseNewThread>
    0x84012a46    0x11c    j ffffffff84012a1a <schedule+0xf0>
    0x84012a48    0x11e    auipc a5,0xa
    0x84012a4c    0x122    sd zero,504(a5) # ffffffff8401cc40 <ksSchedulerAction>
    0x84012a50    0x126    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
95 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 154 nodes.

Section Arch_decodeIRQControlInvocation (249 of 267)
====================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 73 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `Arch_decodeIRQControlInvocation`:

    0x840122ec     0x0    li a5,37
    0x840122f0     0x4    bne a0,a5,ffffffff840123a2 <Arch_decodeIRQControlInvocation+0xb6>
    0x840122f4     0x8    addi sp,sp,-80
    0x840122f6     0xa    sd ra,72(sp)          ; stack access
    0x840122f8     0xc    sd s0,64(sp)          ; stack access
    0x840122fa     0xe    sd s1,56(sp)          ; stack access
    0x840122fc    0x10    sd s2,48(sp)          ; stack access
    0x840122fe    0x12    sd s3,40(sp)          ; stack access
    0x84012300    0x14    mv s0,a2
    0x84012302    0x16    li a5,3
    0x84012304    0x18    bgeu a5,a1,ffffffff84012354 <Arch_decodeIRQControlInvocation+0x68>
    0x84012308    0x1c    auipc a5,0xb
    0x8401230c    0x20    ld a5,-1672(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84012310    0x24    beqz a5,ffffffff84012354 <Arch_decodeIRQControlInvocation+0x68>
    0x84012312    0x26    auipc a4,0x1b
    0x84012316    0x2a    ld a4,1926(a4) # ffffffff8402da98 <ksCurThread>
    0x8401231a    0x2e    ld s1,88(a4)
    0x8401231c    0x30    ld s2,104(a4)
    0x84012320    0x34    ld s3,112(a4)
    0x84012324    0x38    ld a4,0(a5)
    0x84012326    0x3a    sd a4,0(sp)           ; stack access
    0x84012328    0x3c    ld a5,8(a5)
    0x8401232a    0x3e    sd a5,8(sp)           ; stack access
    0x8401232c    0x40    mv a0,s1
    0x8401232e    0x42    jal ra,ffffffff84010b5c <Arch_checkIRQ>
    0x84012332    0x46    bnez a0,ffffffff84012360 <Arch_decodeIRQControlInvocation+0x74>
    0x84012334    0x48    slli a4,s1,0x3
    0x84012338    0x4c    auipc a5,0xb
    0x8401233c    0x50    addi a5,a5,-1696 # ffffffff8401cc98 <intStateIRQTable>
    0x84012340    0x54    add a5,a5,a4
    0x84012342    0x56    ld a5,0(a5)
    0x84012344    0x58    beqz a5,ffffffff8401236e <Arch_decodeIRQControlInvocation+0x82>
    0x84012346    0x5a    li a5,9
    0x84012348    0x5c    auipc a4,0xb
    0x8401234c    0x60    sd a5,-1744(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84012350    0x64    li a0,3
    0x84012352    0x66    j ffffffff84012360 <Arch_decodeIRQControlInvocation+0x74>
    0x84012354    0x68    li a5,7
    0x84012356    0x6a    auipc a4,0xb
    0x8401235a    0x6e    sd a5,-1758(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401235e    0x72    li a0,3
    0x84012360    0x74    ld ra,72(sp)          ; stack access
    0x84012362    0x76    ld s0,64(sp)          ; stack access
    0x84012364    0x78    ld s1,56(sp)          ; stack access
    0x84012366    0x7a    ld s2,48(sp)          ; stack access
    0x84012368    0x7c    ld s3,40(sp)          ; stack access
    0x8401236a    0x7e    addi sp,sp,80
    0x8401236c    0x80    ret
    0x8401236e    0x82    mv a3,s3
    0x84012370    0x84    mv a2,s2
    0x84012372    0x86    ld a0,0(sp)           ; stack access
    0x84012374    0x88    ld a1,8(sp)           ; stack access
    0x84012376    0x8a    jal ra,ffffffff840112dc <lookupTargetSlot>
    0x8401237a    0x8e    sd a1,24(sp)          ; stack access
    0x8401237c    0x90    bnez a0,ffffffff84012360 <Arch_decodeIRQControlInvocation+0x74>
    0x8401237e    0x92    mv s2,a1
    0x84012380    0x94    mv a0,a1
    0x84012382    0x96    jal ra,ffffffff8401170c <ensureEmptySlot>
    0x84012386    0x9a    bnez a0,ffffffff84012360 <Arch_decodeIRQControlInvocation+0x74>
    0x84012388    0x9c    li a1,2
    0x8401238a    0x9e    auipc a0,0x1b
    0x8401238e    0xa2    ld a0,1806(a0) # ffffffff8402da98 <ksCurThread>
    0x84012392    0xa6    jal ra,ffffffff840122d0 <setThreadState>
    0x84012396    0xaa    mv a2,s0
    0x84012398    0xac    mv a1,s2
    0x8401239a    0xae    mv a0,s1
    0x8401239c    0xb0    jal ra,ffffffff84011822 <invokeIRQControl>
    0x840123a0    0xb4    j ffffffff84012360 <Arch_decodeIRQControlInvocation+0x74>
    0x840123a2    0xb6    li a5,3
    0x840123a4    0xb8    auipc a4,0xb
    0x840123a8    0xbc    sd a5,-1836(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840123ac    0xc0    li a0,3
    0x840123ae    0xc2    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 121 nodes.

Section Arch_finaliseCap (250 of 267)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 98 instructions.


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84010c3c      0x0    addi sp,sp,-80
    0x84010c3e      0x2    sd ra,72(sp)          ; stack access
    0x84010c40      0x4    sd s0,64(sp)          ; stack access
    0x84010c42      0x6    sd s1,56(sp)          ; stack access
    0x84010c44      0x8    sd s2,48(sp)          ; stack access
    0x84010c46      0xa    sd s3,40(sp)          ; stack access
    0x84010c48      0xc    mv s0,a0
    0x84010c4a      0xe    mv s2,a2
    0x84010c4c     0x10    mv s1,a1
    0x84010c4e     0x12    srli a5,a1,0x3b
    0x84010c52     0x16    li a4,3
    0x84010c54     0x18    beq a5,a4,ffffffff84010cc2 <Arch_finaliseCap+0x86>
    0x84010c58     0x1c    li a4,13
    0x84010c5a     0x1e    beq a5,a4,ffffffff84010d22 <Arch_finaliseCap+0xe6>
    0x84010c5e     0x22    li a4,1
    0x84010c60     0x24    beq a5,a4,ffffffff84010c84 <Arch_finaliseCap+0x48>
    0x84010c64     0x28    sd zero,0(s0)         ; stack access
    0x84010c68     0x2c    sd zero,8(s0)         ; stack access
    0x84010c6c     0x30    sd zero,16(s0)        ; stack access
    0x84010c70     0x34    sd zero,24(s0)        ; stack access
    0x84010c74     0x38    mv a0,s0
    0x84010c76     0x3a    ld ra,72(sp)          ; stack access
    0x84010c78     0x3c    ld s0,64(sp)          ; stack access
    0x84010c7a     0x3e    ld s1,56(sp)          ; stack access
    0x84010c7c     0x40    ld s2,48(sp)          ; stack access
    0x84010c7e     0x42    ld s3,40(sp)          ; stack access
    0x84010c80     0x44    addi sp,sp,80
    0x84010c82     0x46    ret
    0x84010c84     0x48    srli a1,a2,0x30
    0x84010c88     0x4c    beqz a1,ffffffff84010c64 <Arch_finaliseCap+0x28>
    0x84010c8a     0x4e    srli a0,s1,0x39
    0x84010c8e     0x52    andi a0,a0,3
    0x84010c90     0x54    slli a2,s1,0x19
    0x84010c94     0x58    srli a2,a2,0x19
    0x84010c96     0x5a    slli a5,s1,0x19
    0x84010c9a     0x5e    bgez a5,ffffffff84010ca4 <Arch_finaliseCap+0x68>
    0x84010c9e     0x62    li a5,-1
    0x84010ca0     0x64    slli a5,a5,0x27
    0x84010ca2     0x66    or a2,a2,a5
    0x84010ca4     0x68    srli s2,s2,0x9
    0x84010ca8     0x6c    slli a3,s2,0x19
    0x84010cac     0x70    srli a3,a3,0x19
    0x84010cae     0x72    slli a5,s2,0x19
    0x84010cb2     0x76    bgez a5,ffffffff84010cbc <Arch_finaliseCap+0x80>
    0x84010cb6     0x7a    li a5,-1
    0x84010cb8     0x7c    slli a5,a5,0x27
    0x84010cba     0x7e    or a3,a3,a5
    0x84010cbc     0x80    jal ra,ffffffff84010838 <unmapPage>
    0x84010cc0     0x84    j ffffffff84010c64 <Arch_finaliseCap+0x28>
    0x84010cc2     0x86    beqz a3,ffffffff84010c64 <Arch_finaliseCap+0x28>
    0x84010cc4     0x88    slli a5,a1,0x18
    0x84010cc8     0x8c    bgez a5,ffffffff84010c64 <Arch_finaliseCap+0x28>
    0x84010ccc     0x90    srli s3,a2,0x30
    0x84010cd0     0x94    mv a0,s3
    0x84010cd2     0x96    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010cd6     0x9a    sd a0,16(sp)          ; stack access
    0x84010cd8     0x9c    sd a1,24(sp)          ; stack access
    0x84010cda     0x9e    srli s2,s2,0x9
    0x84010cde     0xa2    slli a2,s2,0x19
    0x84010ce2     0xa6    srli a2,a2,0x19
    0x84010ce4     0xa8    slli a5,s2,0x19
    0x84010ce8     0xac    bgez a5,ffffffff84010cf2 <Arch_finaliseCap+0xb6>
    0x84010cec     0xb0    li a5,-1
    0x84010cee     0xb2    slli a5,a5,0x27
    0x84010cf0     0xb4    or a2,a2,a5
    0x84010cf2     0xb6    ld a5,16(sp)          ; stack access
    0x84010cf4     0xb8    bnez a5,ffffffff84010cfc <Arch_finaliseCap+0xc0>
    0x84010cf6     0xba    ld a5,24(sp)          ; stack access
    0x84010cf8     0xbc    beq a5,a2,ffffffff84010d18 <Arch_finaliseCap+0xdc>
    0x84010cfc     0xc0    slli a1,s1,0x19
    0x84010d00     0xc4    srli a1,a1,0x19
    0x84010d02     0xc6    slli a5,s1,0x19
    0x84010d06     0xca    bgez a5,ffffffff84010d10 <Arch_finaliseCap+0xd4>
    0x84010d0a     0xce    li a5,-1
    0x84010d0c     0xd0    slli a5,a5,0x27
    0x84010d0e     0xd2    or a1,a1,a5
    0x84010d10     0xd4    mv a0,s3
    0x84010d12     0xd6    jal ra,ffffffff8401078e <unmapPageTable>
    0x84010d16     0xda    j ffffffff84010c64 <Arch_finaliseCap+0x28>
    0x84010d18     0xdc    mv a1,a2
    0x84010d1a     0xde    mv a0,s3
    0x84010d1c     0xe0    jal ra,ffffffff840109ec <deleteASID>
    0x84010d20     0xe4    j ffffffff84010c64 <Arch_finaliseCap+0x28>
    0x84010d22     0xe6    beqz a3,ffffffff84010c64 <Arch_finaliseCap+0x28>
    0x84010d24     0xe8    srli a0,a1,0x2b
    0x84010d28     0xec    slli a0,a0,0x30
    0x84010d2a     0xee    srli a0,a0,0x30
    0x84010d2c     0xf0    slli s1,a1,0x2
    0x84010d30     0xf4    lui a1,0xf8000
    0x84010d34     0xf8    srli a1,a1,0x19
    0x84010d36     0xfa    and a1,a1,s1
    0x84010d38     0xfc    slli a5,s1,0x19
    0x84010d3c    0x100    bgez a5,ffffffff84010d46 <Arch_finaliseCap+0x10a>
    0x84010d40    0x104    li a5,-1
    0x84010d42    0x106    slli a5,a5,0x27
    0x84010d44    0x108    or a1,a1,a5
    0x84010d46    0x10a    jal ra,ffffffff840109ae <deleteASIDPool>
    0x84010d4a    0x10e    j ffffffff84010c64 <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
98 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 150 nodes.

Section init_freemem (251 of 267)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 300 instructions.

RVC_TFFTT____T____TF..

Stack analysis
---------------

42 stack accesses found. Annotated code for `init_freemem`:

    0x84000f6a      0x0    addi sp,sp,-192
    0x84000f6c      0x2    sd ra,184(sp)         ; stack access
    0x84000f6e      0x4    sd s0,176(sp)         ; stack access
    0x84000f70      0x6    sd s1,168(sp)         ; stack access
    0x84000f72      0x8    sd s2,160(sp)         ; stack access
    0x84000f74      0xa    sd s3,152(sp)         ; stack access
    0x84000f76      0xc    sd s4,144(sp)         ; stack access
    0x84000f78      0xe    sd s5,136(sp)         ; stack access
    0x84000f7a     0x10    sd s6,128(sp)         ; stack access
    0x84000f7c     0x12    sd s7,120(sp)         ; stack access
    0x84000f7e     0x14    sd s8,112(sp)         ; stack access
    0x84000f80     0x16    sd s9,104(sp)         ; stack access
    0x84000f82     0x18    mv s3,a0
    0x84000f84     0x1a    mv s4,a2
    0x84000f86     0x1c    mv s5,a3
    0x84000f88     0x1e    sd a4,0(sp)           ; stack access
    0x84000f8a     0x20    sd a5,8(sp)           ; stack access
    0x84000f8c     0x22    mv s2,a6
    0x84000f8e     0x24    li a5,1
    0x84000f90     0x26    bgeu a5,a2,ffffffff84000fa0 <init_freemem+0x36>
    0x84000f94     0x2a    addi a4,a2,-1
    0x84000f98     0x2e    li a5,0
    0x84000f9a     0x30    addi a5,a5,1
    0x84000f9c     0x32    bne a5,a4,ffffffff84000f9a <init_freemem+0x30>
    0x84000fa0     0x36    addi a4,s3,-1
    0x84000fa4     0x3a    beqz a4,ffffffff84000fae <init_freemem+0x44>
    0x84000fa6     0x3c    li a5,0
    0x84000fa8     0x3e    addi a5,a5,1
    0x84000faa     0x40    bne a5,a4,ffffffff84000fa8 <init_freemem+0x3e>
    0x84000fae     0x44    auipc a5,0x0
    0x84000fb2     0x48    addi a5,a5,1722 # ffffffff84001668 <ndks_boot+0x148>
    0x84000fb6     0x4c    auipc a4,0x0
    0x84000fba     0x50    addi a4,a4,1970 # ffffffff84001768 <ndks_boot+0x248>
    0x84000fbe     0x54    sd zero,0(a5)
    0x84000fc2     0x58    sd zero,8(a5)
    0x84000fc6     0x5c    addi a5,a5,16
    0x84000fc8     0x5e    bne a5,a4,ffffffff84000fbe <init_freemem+0x54>
    0x84000fcc     0x62    beqz s3,ffffffff8400127a <init_freemem+0x310>
    0x84000fd0     0x66    mv a6,a1
    0x84000fd2     0x68    auipc a4,0x1
    0x84000fd6     0x6c    addi a4,a4,-2034 # ffffffff840017e0 <avail_reg+0x8>
    0x84000fda     0x70    slli t1,s3,0x4
    0x84000fde     0x74    add t1,t1,a1
    0x84000fe0     0x76    li a7,-1
    0x84000fe2     0x78    slli a7,a7,0x26
    0x84000fe4     0x7a    li a0,127
    0x84000fe8     0x7e    slli a0,a0,0x1f
    0x84000fea     0x80    lui t4,0x80000
    0x84000fee     0x84    li t3,1
    0x84000ff0     0x86    slli t3,t3,0x26
    0x84000ff2     0x88    j ffffffff84001004 <init_freemem+0x9a>
    0x84000ff4     0x8a    mv a5,t4
    0x84000ff6     0x8c    j ffffffff8400101e <init_freemem+0xb4>
    0x84000ff8     0x8e    sd a5,-8(a3)
    0x84000ffc     0x92    addi a6,a6,16
    0x84000ffe     0x94    addi a4,a4,16
    0x84001000     0x96    beq a6,t1,ffffffff84001290 <init_freemem+0x326>
    0x84001004     0x9a    ld a1,8(a6)
    0x84001008     0x9e    add a5,a1,a7
    0x8400100c     0xa2    mv a3,a4
    0x8400100e     0xa4    ld a2,0(a6)
    0x84001012     0xa8    add a2,a2,a7
    0x84001014     0xaa    sd a2,-8(a4)
    0x84001018     0xae    sd a5,0(a4)
    0x8400101a     0xb0    bltu a0,a1,ffffffff84000ff4 <init_freemem+0x8a>
    0x8400101e     0xb4    sd a5,0(a3)
    0x84001020     0xb6    ld a5,-8(a3)
    0x84001024     0xba    add a2,a5,t3
    0x84001028     0xbe    bgeu a0,a2,ffffffff84000ff8 <init_freemem+0x8e>
    0x8400102c     0xc2    mv a5,t4
    0x8400102e     0xc4    j ffffffff84000ff8 <init_freemem+0x8e>
    0x84001030     0xc6    addi s0,s0,1
    0x84001032     0xc8    bgeu s1,s3,ffffffff8400127e <init_freemem+0x314>
    0x84001036     0xcc    bgeu s0,s4,ffffffff840012aa <init_freemem+0x340>
    0x8400103a     0xd0    slli s6,s0,0x4
    0x8400103e     0xd4    add s6,s6,s5
    0x84001040     0xd6    ld a1,0(s6) # fffffffffe000000 <ki_end+0x79fd2000>
    0x84001044     0xda    ld a4,8(s6)
    0x84001048     0xde    beq a1,a4,ffffffff84001030 <init_freemem+0xc6>
    0x8400104c     0xe2    slli a5,s1,0x4
    0x84001050     0xe6    add a5,a5,s7
    0x84001052     0xe8    ld a3,696(a5)
    0x84001056     0xec    ld a5,704(a5)
    0x8400105a     0xf0    bltu a3,a5,ffffffff84001062 <init_freemem+0xf8>
    0x8400105e     0xf4    addi s1,s1,1
    0x84001060     0xf6    j ffffffff84001032 <init_freemem+0xc8>
    0x84001062     0xf8    bgeu a3,a4,ffffffff84001096 <init_freemem+0x12c>
    0x84001066     0xfc    bgeu a1,a5,ffffffff840010aa <init_freemem+0x140>
    0x8400106a    0x100    bltu a3,a1,ffffffff840010c0 <init_freemem+0x156>
    0x8400106e    0x104    slli a3,s1,0x4
    0x84001072    0x108    add a3,a3,s7
    0x84001074    0x10a    bgeu a5,a4,ffffffff8400107a <init_freemem+0x110>
    0x84001078    0x10e    mv a4,a5
    0x8400107a    0x110    sd a4,696(a3)
    0x8400107e    0x114    ld a1,8(s6)
    0x84001082    0x118    add a1,a1,s8
    0x84001084    0x11a    ld a0,0(s6)
    0x84001088    0x11e    add a0,a0,s8
    0x8400108a    0x120    sd a0,48(sp)          ; stack access
    0x8400108c    0x122    sd a1,56(sp)          ; stack access
    0x8400108e    0x124    jal ra,ffffffff84000364 <reserve_region>
    0x84001092    0x128    addi s0,s0,1
    0x84001094    0x12a    j ffffffff84001032 <init_freemem+0xc8>
    0x84001096    0x12c    add a0,a1,s8
    0x8400109a    0x130    sd a0,32(sp)          ; stack access
    0x8400109c    0x132    add a1,a4,s8
    0x840010a0    0x136    sd a1,40(sp)          ; stack access
    0x840010a2    0x138    jal ra,ffffffff84000364 <reserve_region>
    0x840010a6    0x13c    addi s0,s0,1
    0x840010a8    0x13e    j ffffffff84001032 <init_freemem+0xc8>
    0x840010aa    0x140    slli a5,s1,0x4
    0x840010ae    0x144    add a5,a5,s7
    0x840010b0    0x146    ld a0,696(a5)
    0x840010b4    0x14a    ld a1,704(a5)
    0x840010b8    0x14e    jal ra,ffffffff8400053a <insert_region>
    0x840010bc    0x152    addi s1,s1,1
    0x840010be    0x154    j ffffffff84001032 <init_freemem+0xc8>
    0x840010c0    0x156    slli s9,s1,0x4
    0x840010c4    0x15a    add s9,s9,s7
    0x840010c6    0x15c    ld a0,696(s9)
    0x840010ca    0x160    sd a0,16(sp)          ; stack access
    0x840010cc    0x162    sd a1,24(sp)          ; stack access
    0x840010ce    0x164    jal ra,ffffffff8400053a <insert_region>
    0x840010d2    0x168    ld a5,8(s6)
    0x840010d6    0x16c    ld a4,704(s9)
    0x840010da    0x170    bltu a5,a4,ffffffff840010e2 <init_freemem+0x178>
    0x840010de    0x174    addi s1,s1,1
    0x840010e0    0x176    j ffffffff84001032 <init_freemem+0xc8>
    0x840010e2    0x178    sd a5,696(s9)
    0x840010e6    0x17c    ld a0,0(s6)
    0x840010ea    0x180    add a0,a0,s8
    0x840010ec    0x182    sd a0,64(sp)          ; stack access
    0x840010ee    0x184    add a1,a5,s8
    0x840010f2    0x188    sd a1,72(sp)          ; stack access
    0x840010f4    0x18a    jal ra,ffffffff84000364 <reserve_region>
    0x840010f8    0x18e    addi s0,s0,1
    0x840010fa    0x190    j ffffffff84001032 <init_freemem+0xc8>
    0x840010fc    0x192    add a0,a0,s4
    0x840010fe    0x194    sd a0,80(sp)          ; stack access
    0x84001100    0x196    add a1,a1,s4
    0x84001102    0x198    sd a1,88(sp)          ; stack access
    0x84001104    0x19a    jal ra,ffffffff84000364 <reserve_region>
    0x84001108    0x19e    addi s0,s0,16
    0x8400110a    0x1a0    beq s0,s5,ffffffff840012a6 <init_freemem+0x33c>
    0x8400110e    0x1a4    ld a0,0(s0)
    0x84001110    0x1a6    ld a1,8(s0)
    0x84001112    0x1a8    bgeu a0,a1,ffffffff84001108 <init_freemem+0x19e>
    0x84001116    0x1ac    j ffffffff840010fc <init_freemem+0x192>
    0x84001118    0x1ae    slli a5,s1,0x4
    0x8400111c    0x1b2    add a5,a5,s4
    0x8400111e    0x1b4    ld a0,696(a5)
    0x84001122    0x1b8    ld a1,704(a5)
    0x84001126    0x1bc    jal ra,ffffffff8400053a <insert_region>
    0x8400112a    0x1c0    addi s1,s1,1
    0x8400112c    0x1c2    addi s0,s0,16
    0x8400112e    0x1c4    beq s3,s1,ffffffff8400113c <init_freemem+0x1d2>
    0x84001132    0x1c8    ld a4,0(s0)
    0x84001134    0x1ca    ld a5,8(s0)
    0x84001136    0x1cc    bgeu a4,a5,ffffffff8400112a <init_freemem+0x1c0>
    0x8400113a    0x1d0    j ffffffff84001118 <init_freemem+0x1ae>
    0x8400113c    0x1d2    auipc a5,0x0
    0x84001140    0x1d6    addi a5,a5,996 # ffffffff84001520 <ndks_boot>
    0x84001144    0x1da    ld a3,568(a5)
    0x84001148    0x1de    ld a4,576(a5)
    0x8400114c    0x1e2    auipc a5,0x0
    0x84001150    0x1e6    addi a5,a5,1532 # ffffffff84001748 <ndks_boot+0x228>
    0x84001154    0x1ea    li s3,15
    0x84001156    0x1ec    bne a3,a4,ffffffff840011e2 <init_freemem+0x278>
    0x8400115a    0x1f0    mv s1,s3
    0x8400115c    0x1f2    addi s3,s3,-1
    0x8400115e    0x1f4    ld a3,0(a5)
    0x84001160    0x1f6    addi a5,a5,-16
    0x84001162    0x1f8    ld a4,24(a5)
    0x84001164    0x1fa    beq a3,a4,ffffffff8400115a <init_freemem+0x1f0>
    0x84001168    0x1fe    ld a5,0(sp)           ; stack access
    0x8400116a    0x200    sd a5,16(sp)          ; stack access
    0x8400116c    0x202    ld a5,8(sp)           ; stack access
    0x8400116e    0x204    sd a5,24(sp)          ; stack access
    0x84001170    0x206    mv s0,s2
    0x84001172    0x208    beqz s2,ffffffff8400117c <init_freemem+0x212>
    0x84001176    0x20c    li s0,1
    0x84001178    0x20e    sll s0,s0,s2
    0x8400117c    0x212    ld a0,16(sp)          ; stack access
    0x8400117e    0x214    ld a1,24(sp)          ; stack access
    0x84001180    0x216    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84001184    0x21a    lui s4,0x1004
    0x84001188    0x21e    addi s4,s4,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x8400118c    0x222    add s0,s0,s4
    0x8400118e    0x224    slli s4,a0,0xc
    0x84001192    0x228    add s4,s4,s0
    0x84001194    0x22a    mv a3,s2
    0x84001196    0x22c    li a5,24
    0x84001198    0x22e    bgeu s2,a5,ffffffff8400119e <init_freemem+0x234>
    0x8400119c    0x232    li a3,24
    0x8400119e    0x234    sext.w a4,a3
    0x840011a2    0x238    addi a5,s3,20
    0x840011a6    0x23c    slli a2,a5,0x4
    0x840011aa    0x240    auipc a5,0x0
    0x840011ae    0x244    addi a5,a5,886 # ffffffff84001520 <ndks_boot>
    0x840011b2    0x248    add a5,a5,a2
    0x840011b4    0x24a    ld s0,16(a5)
    0x840011b6    0x24c    sub s0,s0,s4
    0x840011ba    0x250    srl s0,s0,a3
    0x840011be    0x254    sll s0,s0,a3
    0x840011c2    0x258    ld a5,8(a5)
    0x840011c4    0x25a    bgeu s0,a5,ffffffff840011e6 <init_freemem+0x27c>
    0x840011c8    0x25e    slli a5,s3,0x4
    0x840011cc    0x262    auipc a3,0x0
    0x840011d0    0x266    addi a3,a3,1164 # ffffffff84001658 <ndks_boot+0x138>
    0x840011d4    0x26a    add a5,a5,a3
    0x840011d6    0x26c    li a2,15
    0x840011d8    0x26e    auipc a1,0x0
    0x840011dc    0x272    addi a1,a1,840 # ffffffff84001520 <ndks_boot>
    0x840011e0    0x276    j ffffffff84001266 <init_freemem+0x2fc>
    0x840011e2    0x278    jal ra,ffffffff8401034a <halt>
    0x840011e6    0x27c    mv s5,s3
    0x840011e8    0x27e    mv s3,s1
    0x840011ea    0x280    mv a3,s2
    0x840011ec    0x282    ld a1,0(sp)           ; stack access
    0x840011ee    0x284    ld a2,8(sp)           ; stack access
    0x840011f0    0x286    mv a0,s0
    0x840011f2    0x288    jal ra,ffffffff84000e80 <create_rootserver_objects>
    0x840011f6    0x28c    li a5,15
    0x840011f8    0x28e    bltu a5,s5,ffffffff8400121c <init_freemem+0x2b2>
    0x840011fc    0x292    auipc a5,0x0
    0x84001200    0x296    addi a5,a5,804 # ffffffff84001520 <ndks_boot>
    0x84001204    0x29a    addi a4,s5,20 # 300014 <KERNEL_OFFSET-0xfffffffeffcfffec>
    0x84001208    0x29e    slli a4,a4,0x4
    0x8400120a    0x2a0    add a4,a4,a5
    0x8400120c    0x2a2    ld a4,16(a4)
    0x8400120e    0x2a4    addi s3,s3,20
    0x84001210    0x2a6    slli s3,s3,0x4
    0x84001212    0x2a8    add a5,a5,s3
    0x84001214    0x2aa    sd a4,16(a5)
    0x84001216    0x2ac    add s4,s4,s0
    0x84001218    0x2ae    sd s4,8(a5)
    0x8400121c    0x2b2    addi s5,s5,20
    0x8400121e    0x2b4    slli s5,s5,0x4
    0x84001220    0x2b6    auipc a5,0x0
    0x84001224    0x2ba    addi a5,a5,768 # ffffffff84001520 <ndks_boot>
    0x84001228    0x2be    add s5,s5,a5
    0x8400122a    0x2c0    sd s0,16(s5)
    0x8400122e    0x2c4    ld ra,184(sp)         ; stack access
    0x84001230    0x2c6    ld s0,176(sp)         ; stack access
    0x84001232    0x2c8    ld s1,168(sp)         ; stack access
    0x84001234    0x2ca    ld s2,160(sp)         ; stack access
    0x84001236    0x2cc    ld s3,152(sp)         ; stack access
    0x84001238    0x2ce    ld s4,144(sp)         ; stack access
    0x8400123a    0x2d0    ld s5,136(sp)         ; stack access
    0x8400123c    0x2d2    ld s6,128(sp)         ; stack access
    0x8400123e    0x2d4    ld s7,120(sp)         ; stack access
    0x84001240    0x2d6    ld s8,112(sp)         ; stack access
    0x84001242    0x2d8    ld s9,104(sp)         ; stack access
    0x84001244    0x2da    addi sp,sp,192
    0x84001246    0x2dc    ret
    0x84001248    0x2de    addi s5,s3,-1
    0x8400124c    0x2e2    ld s0,8(a5)
    0x8400124e    0x2e4    sub s0,s0,s4
    0x84001252    0x2e8    srl s0,s0,a4
    0x84001256    0x2ec    sll s0,s0,a4
    0x8400125a    0x2f0    addi a5,a5,-16
    0x8400125c    0x2f2    mv s1,s3
    0x8400125e    0x2f4    ld a3,16(a5)
    0x84001260    0x2f6    bgeu s0,a3,ffffffff840011ea <init_freemem+0x280>
    0x84001264    0x2fa    mv s3,s5
    0x84001266    0x2fc    bltu a2,s3,ffffffff84001248 <init_freemem+0x2de>
    0x8400126a    0x300    addi s1,s1,20
    0x8400126c    0x302    slli s1,s1,0x4
    0x8400126e    0x304    add s1,s1,a1
    0x84001270    0x306    ld a3,16(a5)
    0x84001272    0x308    sd a3,8(s1)
    0x84001274    0x30a    ld a3,24(a5)
    0x84001276    0x30c    sd a3,16(s1)
    0x84001278    0x30e    j ffffffff84001248 <init_freemem+0x2de>
    0x8400127a    0x310    mv s1,s3
    0x8400127c    0x312    mv s0,s3
    0x8400127e    0x314    bgeu s0,s4,ffffffff8400113c <init_freemem+0x1d2>
    0x84001282    0x318    slli s0,s0,0x4
    0x84001284    0x31a    add s0,s0,s5
    0x84001286    0x31c    slli s4,s4,0x4
    0x84001288    0x31e    add s5,s5,s4
    0x8400128a    0x320    li s4,1
    0x8400128c    0x322    slli s4,s4,0x26
    0x8400128e    0x324    j ffffffff8400110e <init_freemem+0x1a4>
    0x84001290    0x326    li s0,0
    0x84001292    0x328    li s1,0
    0x84001294    0x32a    auipc s7,0x0
    0x84001298    0x32e    addi s7,s7,652 # ffffffff84001520 <ndks_boot>
    0x8400129c    0x332    li s8,1
    0x8400129e    0x334    slli s8,s8,0x26
    0x840012a0    0x336    bnez s4,ffffffff8400103a <init_freemem+0xd0>
    0x840012a4    0x33a    mv s1,s4
    0x840012a6    0x33c    bgeu s1,s3,ffffffff8400113c <init_freemem+0x1d2>
    0x840012aa    0x340    slli a5,s1,0x4
    0x840012ae    0x344    auipc s0,0x0
    0x840012b2    0x348    addi s0,s0,1322 # ffffffff840017d8 <avail_reg>
    0x840012b6    0x34c    add s0,s0,a5
    0x840012b8    0x34e    auipc s4,0x0
    0x840012bc    0x352    addi s4,s4,616 # ffffffff84001520 <ndks_boot>
    0x840012c0    0x356    j ffffffff84001132 <init_freemem+0x1c8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
300 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 464 nodes.

Section create_initial_thread (252 of 267)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 107 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `create_initial_thread`:

    0x84000ba2      0x0    addi sp,sp,-144
    0x84000ba4      0x2    sd ra,120(sp)         ; stack access
    0x84000ba6      0x4    sd s0,112(sp)         ; stack access
    0x84000ba8      0x6    sd s1,104(sp)         ; stack access
    0x84000baa      0x8    sd s2,96(sp)          ; stack access
    0x84000bac      0xa    sd s3,88(sp)          ; stack access
    0x84000bae      0xc    sd s4,80(sp)          ; stack access
    0x84000bb0      0xe    sd s5,72(sp)          ; stack access
    0x84000bb2     0x10    sd a0,16(sp)          ; stack access
    0x84000bb4     0x12    sd a1,24(sp)          ; stack access
    0x84000bb6     0x14    sd a2,0(sp)           ; stack access
    0x84000bb8     0x16    sd a3,8(sp)           ; stack access
    0x84000bba     0x18    mv s2,a4
    0x84000bbc     0x1a    mv s3,a5
    0x84000bbe     0x1c    mv s4,a6
    0x84000bc0     0x1e    mv s1,a7
    0x84000bc2     0x20    sd a7,136(sp)         ; stack access
    0x84000bc4     0x22    auipc s0,0x1
    0x84000bc8     0x26    ld s0,-1044(s0) # ffffffff840017b0 <rootserver+0x30>
    0x84000bcc     0x2a    addi s0,s0,512
    0x84000bd0     0x2e    li a5,5
    0x84000bd2     0x30    sd a5,368(s0)
    0x84000bd6     0x34    li a5,32
    0x84000bda     0x38    sd a5,256(s0)
    0x84000bde     0x3c    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000be2     0x40    mv a2,s1
    0x84000be4     0x42    ld a3,144(sp)         ; stack access
    0x84000be6     0x44    addi a1,a0,320
    0x84000bea     0x48    addi a0,sp,40
    0x84000bec     0x4a    jal ra,ffffffff84011da6 <deriveCap>
    0x84000bf0     0x4e    ld a5,40(sp)          ; stack access
    0x84000bf2     0x50    li s5,0
    0x84000bf4     0x52    bnez a5,ffffffff84000cc0 <create_initial_thread+0x11e>
    0x84000bf6     0x54    mv s5,s0
    0x84000bf8     0x56    ld a0,16(sp)          ; stack access
    0x84000bfa     0x58    ld a1,24(sp)          ; stack access
    0x84000bfc     0x5a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000c00     0x5e    auipc s1,0x1
    0x84000c04     0x62    addi s1,s1,-1760 # ffffffff84001520 <ndks_boot>
    0x84000c08     0x66    ld a3,656(s1)
    0x84000c0c     0x6a    addi a2,a0,64
    0x84000c10     0x6e    ld a0,16(sp)          ; stack access
    0x84000c12     0x70    ld a1,24(sp)          ; stack access
    0x84000c14     0x72    jal ra,ffffffff840113ac <cteInsert>
    0x84000c18     0x76    ld a0,16(sp)          ; stack access
    0x84000c1a     0x78    ld a1,24(sp)          ; stack access
    0x84000c1c     0x7a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000c20     0x7e    ld a3,656(s1)
    0x84000c24     0x82    addi a3,a3,32
    0x84000c28     0x86    addi a2,a0,96
    0x84000c2c     0x8a    ld a0,0(sp)           ; stack access
    0x84000c2e     0x8c    ld a1,8(sp)           ; stack access
    0x84000c30     0x8e    jal ra,ffffffff840113ac <cteInsert>
    0x84000c34     0x92    ld a0,16(sp)          ; stack access
    0x84000c36     0x94    ld a1,24(sp)          ; stack access
    0x84000c38     0x96    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000c3c     0x9a    ld a3,656(s1)
    0x84000c40     0x9e    addi a3,a3,128
    0x84000c44     0xa2    addi a2,a0,320
    0x84000c48     0xa6    ld a0,48(sp)          ; stack access
    0x84000c4a     0xa8    ld a1,56(sp)          ; stack access
    0x84000c4c     0xaa    jal ra,ffffffff840113ac <cteInsert>
    0x84000c50     0xae    sd s4,384(s0)
    0x84000c54     0xb2    sd s3,72(s0)
    0x84000c58     0xb6    sd s2,272(s0)
    0x84000c5c     0xba    li a5,255
    0x84000c60     0xbe    sd a5,360(s0)
    0x84000c64     0xc2    sd a5,352(s0)
    0x84000c68     0xc6    mv a0,s0
    0x84000c6a     0xc8    jal ra,ffffffff840116ee <setupReplyMaster>
    0x84000c6e     0xcc    li a1,1
    0x84000c70     0xce    mv a0,s0
    0x84000c72     0xd0    jal ra,ffffffff840122d0 <setThreadState>
    0x84000c76     0xd4    auipc a5,0x2d
    0x84000c7a     0xd8    ld a5,-470(a5) # ffffffff8402daa0 <ksDomScheduleIdx>
    0x84000c7e     0xdc    slli a4,a5,0x4
    0x84000c82     0xe0    auipc a5,0x16
    0x84000c86     0xe4    addi a5,a5,1974 # ffffffff84017438 <fault_messages>
    0x84000c8a     0xe8    add a5,a5,a4
    0x84000c8c     0xea    ld a4,192(a5)
    0x84000c8e     0xec    auipc a3,0x2d
    0x84000c92     0xf0    sd a4,-1166(a3) # ffffffff8402d800 <ksCurDomain>
    0x84000c96     0xf4    ld a5,200(a5)
    0x84000c98     0xf6    auipc a4,0x2c
    0x84000c9c     0xfa    sd a5,448(a4) # ffffffff8402ce58 <ksDomainTime>
    0x84000ca0     0xfe    ld a0,16(sp)          ; stack access
    0x84000ca2    0x100    ld a1,24(sp)          ; stack access
    0x84000ca4    0x102    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000ca8    0x106    slli s0,s0,0x19
    0x84000caa    0x108    srli s0,s0,0x19
    0x84000cac    0x10a    li a5,3
    0x84000cae    0x10c    slli a4,a5,0x3d
    0x84000cb2    0x110    or s0,s0,a4
    0x84000cb4    0x112    sd s0,32(a0)
    0x84000cb6    0x114    sd zero,40(a0)
    0x84000cba    0x118    sd zero,48(a0)
    0x84000cbe    0x11c    sd a5,56(a0)
    0x84000cc0    0x11e    mv a0,s5
    0x84000cc2    0x120    ld ra,120(sp)         ; stack access
    0x84000cc4    0x122    ld s0,112(sp)         ; stack access
    0x84000cc6    0x124    ld s1,104(sp)         ; stack access
    0x84000cc8    0x126    ld s2,96(sp)          ; stack access
    0x84000cca    0x128    ld s3,88(sp)          ; stack access
    0x84000ccc    0x12a    ld s4,80(sp)          ; stack access
    0x84000cce    0x12c    ld s5,72(sp)          ; stack access
    0x84000cd0    0x12e    addi sp,sp,144
    0x84000cd2    0x130    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
107 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 176 nodes.

Section decodeUntypedInvocation (253 of 267)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 256 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x84016146      0x0    addi sp,sp,-176
    0x84016148      0x2    sd ra,168(sp)         ; stack access
    0x8401614a      0x4    sd s0,160(sp)         ; stack access
    0x8401614c      0x6    sd s1,152(sp)         ; stack access
    0x8401614e      0x8    sd s2,144(sp)         ; stack access
    0x84016150      0xa    sd s3,136(sp)         ; stack access
    0x84016152      0xc    sd s4,128(sp)         ; stack access
    0x84016154      0xe    sd s5,120(sp)         ; stack access
    0x84016156     0x10    sd s6,112(sp)         ; stack access
    0x84016158     0x12    sd s7,104(sp)         ; stack access
    0x8401615a     0x14    sd s8,96(sp)          ; stack access
    0x8401615c     0x16    sd s9,88(sp)          ; stack access
    0x8401615e     0x18    sd s10,80(sp)         ; stack access
    0x84016160     0x1a    sd s11,72(sp)         ; stack access
    0x84016162     0x1c    sd a3,16(sp)          ; stack access
    0x84016164     0x1e    sd a4,24(sp)          ; stack access
    0x84016166     0x20    li a5,1
    0x84016168     0x22    bne a0,a5,ffffffff840162dc <decodeUntypedInvocation+0x196>
    0x8401616c     0x26    mv s0,a0
    0x8401616e     0x28    mv s1,a2
    0x84016170     0x2a    mv s5,a6
    0x84016172     0x2c    li a5,5
    0x84016174     0x2e    bgeu a5,a1,ffffffff84016306 <decodeUntypedInvocation+0x1c0>
    0x84016178     0x32    auipc s11,0x7
    0x8401617c     0x36    ld s11,-1272(s11) # ffffffff8401cc80 <current_extra_caps>
    0x84016180     0x3a    beqz s11,ffffffff84016306 <decodeUntypedInvocation+0x1c0>
    0x84016184     0x3e    auipc s8,0x18
    0x84016188     0x42    ld s8,-1772(s8) # ffffffff8402da98 <ksCurThread>
    0x8401618c     0x46    ld s2,88(s8)
    0x84016190     0x4a    li a5,8
    0x84016192     0x4c    bltu a5,s2,ffffffff84016314 <decodeUntypedInvocation+0x1ce>
    0x84016196     0x50    ld s6,96(s8)
    0x8401619a     0x54    mv a1,s6
    0x8401619c     0x56    mv a0,s2
    0x8401619e     0x58    jal ra,ffffffff8401195e <getObjectSize>
    0x840161a2     0x5c    mv s3,a0
    0x840161a4     0x5e    li a5,63
    0x840161a8     0x62    bltu a5,s6,ffffffff84016328 <decodeUntypedInvocation+0x1e2>
    0x840161ac     0x66    li a5,38
    0x840161b0     0x6a    bltu a5,a0,ffffffff84016328 <decodeUntypedInvocation+0x1e2>
    0x840161b4     0x6e    li a5,4
    0x840161b6     0x70    beq s2,a5,ffffffff84016342 <decodeUntypedInvocation+0x1fc>
    0x840161ba     0x74    bnez s2,ffffffff840161c4 <decodeUntypedInvocation+0x7e>
    0x840161be     0x78    li a5,3
    0x840161c0     0x7a    bgeu a5,s6,ffffffff84016358 <decodeUntypedInvocation+0x212>
    0x840161c4     0x7e    ld s10,24(sp)         ; stack access
    0x840161c6     0x80    ld s4,112(s8)
    0x840161ca     0x84    ld s7,40(s5)
    0x840161ce     0x88    ld s9,48(s5)
    0x840161d2     0x8c    bnez s4,ffffffff8401636a <decodeUntypedInvocation+0x224>
    0x840161d6     0x90    ld a4,0(s11)
    0x840161da     0x94    srli a5,a4,0x3b
    0x840161de     0x98    li a3,10
    0x840161e0     0x9a    bne a5,a3,ffffffff8401638a <decodeUntypedInvocation+0x244>
    0x840161e4     0x9e    srli a5,a4,0x2f
    0x840161e8     0xa2    li a3,1
    0x840161ea     0xa4    sll a5,a3,a5
    0x840161ee     0xa8    addi a3,a5,-1 # fffffffffeffefff <ki_end+0x7afd0fff>
    0x840161f2     0xac    bltu a3,s7,ffffffff840163b8 <decodeUntypedInvocation+0x272>
    0x840161f6     0xb0    addi a3,s9,-1
    0x840161fa     0xb4    li a2,255
    0x840161fe     0xb8    bltu a2,a3,ffffffff840163ce <decodeUntypedInvocation+0x288>
    0x84016202     0xbc    sub a5,a5,s7
    0x84016206     0xc0    bltu a5,s9,ffffffff840163e8 <decodeUntypedInvocation+0x2a2>
    0x8401620a     0xc4    slli a4,a4,0x1
    0x8401620c     0xc6    lui s4,0xfc000
    0x84016210     0xca    srli s4,s4,0x19
    0x84016214     0xce    and a5,a4,s4
    0x84016218     0xd2    slli a3,a4,0x19
    0x8401621c     0xd6    bgez a3,ffffffff84016226 <decodeUntypedInvocation+0xe0>
    0x84016220     0xda    li a4,-1
    0x84016222     0xdc    slli a4,a4,0x27
    0x84016224     0xde    or a5,a5,a4
    0x84016226     0xe0    mv s11,a5
    0x84016228     0xe2    add s8,s9,s7
    0x8401622c     0xe6    bgeu s7,s8,ffffffff8401624a <decodeUntypedInvocation+0x104>
    0x84016230     0xea    slli s4,s7,0x5
    0x84016234     0xee    add s4,s4,a5
    0x84016236     0xf0    mv s5,s7
    0x84016238     0xf2    mv a0,s4
    0x8401623a     0xf4    jal ra,ffffffff8401170c <ensureEmptySlot>
    0x8401623e     0xf8    bnez a0,ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x84016240     0xfa    addi s5,s5,1
    0x84016242     0xfc    addi s4,s4,32 # fffffffffc000020 <ki_end+0x77fd2020>
    0x84016246    0x100    bne s5,s8,ffffffff84016238 <decodeUntypedInvocation+0xf2>
    0x8401624a    0x104    mv a0,s1
    0x8401624c    0x106    jal ra,ffffffff84011d66 <ensureNoChildren>
    0x84016250    0x10a    beqz a0,ffffffff84016258 <decodeUntypedInvocation+0x112>
    0x84016252    0x10c    srli a0,s10,0x19
    0x84016256    0x110    li s0,0
    0x84016258    0x112    ld a5,16(sp)          ; stack access
    0x8401625a    0x114    slli a4,a5,0x19
    0x8401625e    0x118    srli a4,a4,0x19
    0x84016260    0x11a    slli a3,a5,0x19
    0x84016264    0x11e    bgez a3,ffffffff8401626e <decodeUntypedInvocation+0x128>
    0x84016268    0x122    li a5,-1
    0x8401626a    0x124    slli a5,a5,0x27
    0x8401626c    0x126    or a4,a4,a5
    0x8401626e    0x128    slli a0,a0,0x4
    0x84016270    0x12a    li a5,1
    0x84016272    0x12c    sll a5,a5,s10
    0x84016276    0x130    sub a5,a5,a0
    0x84016278    0x132    sext.w a3,s3
    0x8401627c    0x136    srl s3,a5,s3
    0x84016280    0x13a    bltu s3,s9,ffffffff840163fe <decodeUntypedInvocation+0x2b8>
    0x84016284    0x13e    srli s10,s10,0x6
    0x84016288    0x142    andi s10,s10,1
    0x8401628c    0x146    beqz s10,ffffffff8401629e <decodeUntypedInvocation+0x158>
    0x84016290    0x14a    addi a5,s2,-5
    0x84016294    0x14e    li a2,2
    0x84016296    0x150    bgeu a2,a5,ffffffff8401629e <decodeUntypedInvocation+0x158>
    0x8401629a    0x154    bnez s2,ffffffff84016410 <decodeUntypedInvocation+0x2ca>
    0x8401629e    0x158    li a5,1
    0x840162a0    0x15a    sll a5,a5,a3
    0x840162a4    0x15e    addi s3,a5,-1
    0x840162a8    0x162    add a0,a0,s3
    0x840162aa    0x164    add s3,a0,a4
    0x840162ae    0x168    neg a5,a5
    0x840162b2    0x16c    and s3,s3,a5
    0x840162b6    0x170    li a1,2
    0x840162b8    0x172    auipc a0,0x17
    0x840162bc    0x176    ld a0,2016(a0) # ffffffff8402da98 <ksCurThread>
    0x840162c0    0x17a    jal ra,ffffffff840122d0 <setThreadState>
    0x840162c4    0x17e    sd s10,0(sp)          ; stack access
    0x840162c6    0x180    mv a7,s9
    0x840162c8    0x182    mv a6,s7
    0x840162ca    0x184    mv a5,s11
    0x840162cc    0x186    mv a4,s6
    0x840162ce    0x188    mv a3,s2
    0x840162d0    0x18a    mv a2,s3
    0x840162d2    0x18c    mv a1,s0
    0x840162d4    0x18e    mv a0,s1
    0x840162d6    0x190    jal ra,ffffffff84016038 <invokeUntyped_Retype>
    0x840162da    0x194    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x840162dc    0x196    li a5,3
    0x840162de    0x198    auipc a4,0x7
    0x840162e2    0x19c    sd a5,-1638(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840162e6    0x1a0    li a0,3
    0x840162e8    0x1a2    ld ra,168(sp)         ; stack access
    0x840162ea    0x1a4    ld s0,160(sp)         ; stack access
    0x840162ec    0x1a6    ld s1,152(sp)         ; stack access
    0x840162ee    0x1a8    ld s2,144(sp)         ; stack access
    0x840162f0    0x1aa    ld s3,136(sp)         ; stack access
    0x840162f2    0x1ac    ld s4,128(sp)         ; stack access
    0x840162f4    0x1ae    ld s5,120(sp)         ; stack access
    0x840162f6    0x1b0    ld s6,112(sp)         ; stack access
    0x840162f8    0x1b2    ld s7,104(sp)         ; stack access
    0x840162fa    0x1b4    ld s8,96(sp)          ; stack access
    0x840162fc    0x1b6    ld s9,88(sp)          ; stack access
    0x840162fe    0x1b8    ld s10,80(sp)         ; stack access
    0x84016300    0x1ba    ld s11,72(sp)         ; stack access
    0x84016302    0x1bc    addi sp,sp,176
    0x84016304    0x1be    ret
    0x84016306    0x1c0    li a5,7
    0x84016308    0x1c2    auipc a4,0x7
    0x8401630c    0x1c6    sd a5,-1680(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84016310    0x1ca    li a0,3
    0x84016312    0x1cc    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x84016314    0x1ce    auipc a5,0x7
    0x84016318    0x1d2    addi a5,a5,-1740 # ffffffff8401cc48 <current_syscall_error>
    0x8401631c    0x1d6    li a4,1
    0x8401631e    0x1d8    sd a4,48(a5)
    0x84016320    0x1da    sd zero,0(a5)
    0x84016324    0x1de    li a0,3
    0x84016326    0x1e0    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x84016328    0x1e2    auipc a5,0x7
    0x8401632c    0x1e6    addi a5,a5,-1760 # ffffffff8401cc48 <current_syscall_error>
    0x84016330    0x1ea    li a4,4
    0x84016332    0x1ec    sd a4,48(a5)
    0x84016334    0x1ee    sd zero,16(a5)
    0x84016338    0x1f2    li a4,38
    0x8401633c    0x1f6    sd a4,24(a5)
    0x8401633e    0x1f8    li a0,3
    0x84016340    0x1fa    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x84016342    0x1fc    bnez s6,ffffffff840161c4 <decodeUntypedInvocation+0x7e>
    0x84016346    0x200    auipc a5,0x7
    0x8401634a    0x204    addi a5,a5,-1790 # ffffffff8401cc48 <current_syscall_error>
    0x8401634e    0x208    li a4,1
    0x84016350    0x20a    sd a4,48(a5)
    0x84016352    0x20c    sd a4,0(a5)
    0x84016354    0x20e    li a0,3
    0x84016356    0x210    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x84016358    0x212    auipc a5,0x7
    0x8401635c    0x216    addi a5,a5,-1808 # ffffffff8401cc48 <current_syscall_error>
    0x84016360    0x21a    li a4,1
    0x84016362    0x21c    sd a4,48(a5)
    0x84016364    0x21e    sd a4,0(a5)
    0x84016366    0x220    li a0,3
    0x84016368    0x222    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x8401636a    0x224    ld a0,0(s11)
    0x8401636e    0x228    sd a0,32(sp)          ; stack access
    0x84016370    0x22a    ld a1,8(s11)
    0x84016374    0x22e    sd a1,40(sp)          ; stack access
    0x84016376    0x230    mv a3,s4
    0x84016378    0x232    ld a2,104(s8)
    0x8401637c    0x236    jal ra,ffffffff840112dc <lookupTargetSlot>
    0x84016380    0x23a    sd a0,48(sp)          ; stack access
    0x84016382    0x23c    sd a1,56(sp)          ; stack access
    0x84016384    0x23e    bnez a0,ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x84016386    0x240    ld a4,0(a1)
    0x84016388    0x242    j ffffffff840161da <decodeUntypedInvocation+0x94>
    0x8401638a    0x244    auipc a5,0x7
    0x8401638e    0x248    addi a5,a5,-1858 # ffffffff8401cc48 <current_syscall_error>
    0x84016392    0x24c    li a4,6
    0x84016394    0x24e    sd a4,48(a5)
    0x84016396    0x250    sd zero,40(a5)
    0x8401639a    0x254    auipc a4,0x7
    0x8401639e    0x258    addi a4,a4,-1898 # ffffffff8401cc30 <current_lookup_fault>
    0x840163a2    0x25c    slli a5,s4,0x2
    0x840163a6    0x260    andi a5,a5,508
    0x840163aa    0x264    ori a5,a5,1
    0x840163ae    0x268    sd a5,0(a4)
    0x840163b0    0x26a    sd zero,8(a4)
    0x840163b4    0x26e    li a0,3
    0x840163b6    0x270    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x840163b8    0x272    auipc a5,0x7
    0x840163bc    0x276    addi a5,a5,-1904 # ffffffff8401cc48 <current_syscall_error>
    0x840163c0    0x27a    li a4,4
    0x840163c2    0x27c    sd a4,48(a5)
    0x840163c4    0x27e    sd zero,16(a5)
    0x840163c8    0x282    sd a3,24(a5)
    0x840163ca    0x284    li a0,3
    0x840163cc    0x286    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x840163ce    0x288    auipc a5,0x7
    0x840163d2    0x28c    addi a5,a5,-1926 # ffffffff8401cc48 <current_syscall_error>
    0x840163d6    0x290    li a4,4
    0x840163d8    0x292    sd a4,48(a5)
    0x840163da    0x294    li a4,1
    0x840163dc    0x296    sd a4,16(a5)
    0x840163de    0x298    li a4,256
    0x840163e2    0x29c    sd a4,24(a5)
    0x840163e4    0x29e    li a0,3
    0x840163e6    0x2a0    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x840163e8    0x2a2    auipc a4,0x7
    0x840163ec    0x2a6    addi a4,a4,-1952 # ffffffff8401cc48 <current_syscall_error>
    0x840163f0    0x2aa    li a3,4
    0x840163f2    0x2ac    sd a3,48(a4)
    0x840163f4    0x2ae    li a3,1
    0x840163f6    0x2b0    sd a3,16(a4)
    0x840163f8    0x2b2    sd a5,24(a4)
    0x840163fa    0x2b4    li a0,3
    0x840163fc    0x2b6    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x840163fe    0x2b8    auipc a4,0x7
    0x84016402    0x2bc    addi a4,a4,-1974 # ffffffff8401cc48 <current_syscall_error>
    0x84016406    0x2c0    li a3,10
    0x84016408    0x2c2    sd a3,48(a4)
    0x8401640a    0x2c4    sd a5,32(a4)
    0x8401640c    0x2c6    li a0,3
    0x8401640e    0x2c8    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>
    0x84016410    0x2ca    auipc a5,0x7
    0x84016414    0x2ce    addi a5,a5,-1992 # ffffffff8401cc48 <current_syscall_error>
    0x84016418    0x2d2    li a4,1
    0x8401641a    0x2d4    sd a4,48(a5)
    0x8401641c    0x2d6    sd a4,0(a5)
    0x8401641e    0x2d8    li a0,3
    0x84016420    0x2da    j ffffffff840162e8 <decodeUntypedInvocation+0x1a2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
256 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 391 nodes.

Section decodeSetSpace (254 of 267)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 151 instructions.

RVC_FTTFFFFTFFFT__FT.

Stack analysis
---------------

58 stack accesses found. Annotated code for `decodeSetSpace`:

    0x84014c3a      0x0    addi sp,sp,-256
    0x84014c3c      0x2    sd ra,248(sp)         ; stack access
    0x84014c3e      0x4    sd s0,240(sp)         ; stack access
    0x84014c40      0x6    sd s1,232(sp)         ; stack access
    0x84014c42      0x8    sd s2,224(sp)         ; stack access
    0x84014c44      0xa    sd s3,216(sp)         ; stack access
    0x84014c46      0xc    sd s4,208(sp)         ; stack access
    0x84014c48      0xe    sd s5,200(sp)         ; stack access
    0x84014c4a     0x10    sd s6,192(sp)         ; stack access
    0x84014c4c     0x12    sd s7,184(sp)         ; stack access
    0x84014c4e     0x14    sd s8,176(sp)         ; stack access
    0x84014c50     0x16    sd s9,168(sp)         ; stack access
    0x84014c52     0x18    sd a0,64(sp)          ; stack access
    0x84014c54     0x1a    sd a1,72(sp)          ; stack access
    0x84014c56     0x1c    li a5,2
    0x84014c58     0x1e    bgeu a5,a2,ffffffff84014d6e <decodeSetSpace+0x134>
    0x84014c5c     0x22    mv s4,a3
    0x84014c5e     0x24    auipc s1,0x8
    0x84014c62     0x28    ld s1,34(s1) # ffffffff8401cc80 <current_extra_caps>
    0x84014c66     0x2c    beqz s1,ffffffff84014d6e <decodeSetSpace+0x134>
    0x84014c6a     0x30    auipc s2,0x8
    0x84014c6e     0x34    ld s2,30(s2) # ffffffff8401cc88 <current_extra_caps+0x8>
    0x84014c72     0x38    beqz s2,ffffffff84014d6e <decodeSetSpace+0x134>
    0x84014c76     0x3c    auipc a5,0x19
    0x84014c7a     0x40    ld a5,-478(a5) # ffffffff8402da98 <ksCurThread>
    0x84014c7e     0x44    ld s6,88(a5)
    0x84014c82     0x48    ld s5,96(a5)
    0x84014c86     0x4c    ld s7,104(a5)
    0x84014c8a     0x50    ld s3,0(s1)
    0x84014c8e     0x54    sd s3,128(sp)         ; stack access
    0x84014c90     0x56    ld a5,8(s1)
    0x84014c92     0x58    sd a5,136(sp)         ; stack access
    0x84014c94     0x5a    mv s8,s3
    0x84014c96     0x5c    ld a5,0(s2)
    0x84014c9a     0x60    sd a5,112(sp)         ; stack access
    0x84014c9c     0x62    ld a5,8(s2)
    0x84014ca0     0x66    sd a5,120(sp)         ; stack access
    0x84014ca2     0x68    ld a5,64(sp)          ; stack access
    0x84014ca4     0x6a    slli s0,a5,0x19
    0x84014ca8     0x6e    srli s0,s0,0x19
    0x84014caa     0x70    slli a4,a5,0x19
    0x84014cae     0x74    bgez a4,ffffffff84014cb8 <decodeSetSpace+0x7e>
    0x84014cb2     0x78    li a5,-1
    0x84014cb4     0x7a    slli a5,a5,0x27
    0x84014cb6     0x7c    or s0,s0,a5
    0x84014cb8     0x7e    andi s9,s0,-1024
    0x84014cbc     0x82    mv a0,s9
    0x84014cbe     0x84    jal ra,ffffffff84011ed0 <slotCapLongRunningDelete>
    0x84014cc2     0x88    bnez a0,ffffffff84014d94 <decodeSetSpace+0x15a>
    0x84014cc4     0x8a    addi a0,s9,32
    0x84014cc8     0x8e    jal ra,ffffffff84011ed0 <slotCapLongRunningDelete>
    0x84014ccc     0x92    bnez a0,ffffffff84014d94 <decodeSetSpace+0x15a>
    0x84014cce     0x94    beqz s5,ffffffff84014ce2 <decodeSetSpace+0xa8>
    0x84014cd2     0x98    mv a2,s3
    0x84014cd4     0x9a    ld a3,136(sp)         ; stack access
    0x84014cd6     0x9c    mv a1,s5
    0x84014cd8     0x9e    li a0,0
    0x84014cda     0xa0    jal ra,ffffffff84011f0c <updateCapData>
    0x84014cde     0xa4    sd a1,136(sp)         ; stack access
    0x84014ce0     0xa6    mv s8,a0
    0x84014ce2     0xa8    mv a2,s8
    0x84014ce4     0xaa    ld a3,136(sp)         ; stack access
    0x84014ce6     0xac    mv a1,s1
    0x84014ce8     0xae    addi a0,sp,88
    0x84014cea     0xb0    jal ra,ffffffff84011da6 <deriveCap>
    0x84014cee     0xb4    ld a0,88(sp)          ; stack access
    0x84014cf0     0xb6    bnez a0,ffffffff84014d7a <decodeSetSpace+0x140>
    0x84014cf2     0xb8    ld s3,96(sp)          ; stack access
    0x84014cf4     0xba    ld a5,104(sp)         ; stack access
    0x84014cf6     0xbc    sd a5,136(sp)         ; stack access
    0x84014cf8     0xbe    srli a4,s3,0x3b
    0x84014cfc     0xc2    li a5,10
    0x84014cfe     0xc4    bne a4,a5,ffffffff84014da2 <decodeSetSpace+0x168>
    0x84014d02     0xc8    beqz s7,ffffffff84014d16 <decodeSetSpace+0xdc>
    0x84014d06     0xcc    ld a2,112(sp)         ; stack access
    0x84014d08     0xce    ld a3,120(sp)         ; stack access
    0x84014d0a     0xd0    mv a1,s7
    0x84014d0c     0xd2    li a0,0
    0x84014d0e     0xd4    jal ra,ffffffff84011f0c <updateCapData>
    0x84014d12     0xd8    sd a0,112(sp)         ; stack access
    0x84014d14     0xda    sd a1,120(sp)         ; stack access
    0x84014d16     0xdc    ld a2,112(sp)         ; stack access
    0x84014d18     0xde    ld a3,120(sp)         ; stack access
    0x84014d1a     0xe0    mv a1,s2
    0x84014d1c     0xe2    addi a0,sp,88
    0x84014d1e     0xe4    jal ra,ffffffff84011da6 <deriveCap>
    0x84014d22     0xe8    ld a0,88(sp)          ; stack access
    0x84014d24     0xea    bnez a0,ffffffff84014d7a <decodeSetSpace+0x140>
    0x84014d26     0xec    ld a0,96(sp)          ; stack access
    0x84014d28     0xee    sd a0,112(sp)         ; stack access
    0x84014d2a     0xf0    ld a1,104(sp)         ; stack access
    0x84014d2c     0xf2    sd a1,120(sp)         ; stack access
    0x84014d2e     0xf4    jal ra,ffffffff84010a30 <isValidVTableRoot>
    0x84014d32     0xf8    beqz a0,ffffffff84014db0 <decodeSetSpace+0x176>
    0x84014d34     0xfa    li a1,2
    0x84014d36     0xfc    auipc a0,0x19
    0x84014d3a    0x100    ld a0,-670(a0) # ffffffff8402da98 <ksCurThread>
    0x84014d3e    0x104    jal ra,ffffffff840122d0 <setThreadState>
    0x84014d42    0x108    li a5,4
    0x84014d44    0x10a    sd a5,56(sp)          ; stack access
    0x84014d46    0x10c    sd zero,48(sp)        ; stack access
    0x84014d48    0x10e    sd zero,32(sp)        ; stack access
    0x84014d4a    0x110    sd zero,40(sp)        ; stack access
    0x84014d4c    0x112    sd zero,24(sp)        ; stack access
    0x84014d4e    0x114    sd s2,16(sp)          ; stack access
    0x84014d50    0x116    ld a5,112(sp)         ; stack access
    0x84014d52    0x118    sd a5,0(sp)           ; stack access
    0x84014d54    0x11a    ld a5,120(sp)         ; stack access
    0x84014d56    0x11c    sd a5,8(sp)           ; stack access
    0x84014d58    0x11e    mv a7,s1
    0x84014d5a    0x120    mv a5,s3
    0x84014d5c    0x122    ld a6,136(sp)         ; stack access
    0x84014d5e    0x124    li a4,0
    0x84014d60    0x126    li a3,0
    0x84014d62    0x128    mv a2,s6
    0x84014d64    0x12a    mv a1,s4
    0x84014d66    0x12c    mv a0,s0
    0x84014d68    0x12e    jal ra,ffffffff840145d2 <invokeTCB_ThreadControl>
    0x84014d6c    0x132    j ffffffff84014d7a <decodeSetSpace+0x140>
    0x84014d6e    0x134    li a5,7
    0x84014d70    0x136    auipc a4,0x8
    0x84014d74    0x13a    sd a5,-248(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014d78    0x13e    li a0,3
    0x84014d7a    0x140    ld ra,248(sp)         ; stack access
    0x84014d7c    0x142    ld s0,240(sp)         ; stack access
    0x84014d7e    0x144    ld s1,232(sp)         ; stack access
    0x84014d80    0x146    ld s2,224(sp)         ; stack access
    0x84014d82    0x148    ld s3,216(sp)         ; stack access
    0x84014d84    0x14a    ld s4,208(sp)         ; stack access
    0x84014d86    0x14c    ld s5,200(sp)         ; stack access
    0x84014d88    0x14e    ld s6,192(sp)         ; stack access
    0x84014d8a    0x150    ld s7,184(sp)         ; stack access
    0x84014d8c    0x152    ld s8,176(sp)         ; stack access
    0x84014d8e    0x154    ld s9,168(sp)         ; stack access
    0x84014d90    0x156    addi sp,sp,256
    0x84014d92    0x158    ret
    0x84014d94    0x15a    li a5,3
    0x84014d96    0x15c    auipc a4,0x8
    0x84014d9a    0x160    sd a5,-286(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014d9e    0x164    li a0,3
    0x84014da0    0x166    j ffffffff84014d7a <decodeSetSpace+0x140>
    0x84014da2    0x168    li a5,3
    0x84014da4    0x16a    auipc a4,0x8
    0x84014da8    0x16e    sd a5,-300(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014dac    0x172    li a0,3
    0x84014dae    0x174    j ffffffff84014d7a <decodeSetSpace+0x140>
    0x84014db0    0x176    li a5,3
    0x84014db2    0x178    auipc a4,0x8
    0x84014db6    0x17c    sd a5,-314(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014dba    0x180    li a0,3
    0x84014dbc    0x182    j ffffffff84014d7a <decodeSetSpace+0x140>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
151 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 258 nodes.

Section sendIPC (255 of 267)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 139 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `sendIPC`:

    0x84013e8e      0x0    addi sp,sp,-80
    0x84013e90      0x2    sd ra,72(sp)          ; stack access
    0x84013e92      0x4    sd s0,64(sp)          ; stack access
    0x84013e94      0x6    sd s1,56(sp)          ; stack access
    0x84013e96      0x8    sd s2,48(sp)          ; stack access
    0x84013e98      0xa    sd s3,40(sp)          ; stack access
    0x84013e9a      0xc    sd s4,32(sp)          ; stack access
    0x84013e9c      0xe    sd s5,24(sp)          ; stack access
    0x84013e9e     0x10    sd s6,16(sp)          ; stack access
    0x84013ea0     0x12    mv s3,a1
    0x84013ea2     0x14    mv s5,a2
    0x84013ea4     0x16    mv s2,a3
    0x84013ea6     0x18    mv s4,a4
    0x84013ea8     0x1a    mv s1,a5
    0x84013eaa     0x1c    mv s0,a6
    0x84013eac     0x1e    ld a5,0(a6)
    0x84013eb0     0x22    andi a4,a5,2
    0x84013eb4     0x26    beqz a4,ffffffff84013f3e <sendIPC+0xb0>
    0x84013eb6     0x28    andi a3,a5,3
    0x84013eba     0x2c    li a4,2
    0x84013ebc     0x2e    bne a3,a4,ffffffff84013f40 <sendIPC+0xb2>
    0x84013ec0     0x32    ld s6,8(a6)
    0x84013ec4     0x36    lui a2,0xf8000
    0x84013ec8     0x3a    srli a2,a2,0x19
    0x84013eca     0x3c    and a2,a2,a5
    0x84013ecc     0x3e    slli a4,a5,0x19
    0x84013ed0     0x42    bgez a4,ffffffff84013eda <sendIPC+0x4c>
    0x84013ed4     0x46    li a5,-1
    0x84013ed6     0x48    slli a5,a5,0x27
    0x84013ed8     0x4a    or a2,a2,a5
    0x84013eda     0x4c    mv a1,s6
    0x84013edc     0x4e    mv a0,s6
    0x84013ede     0x50    jal ra,ffffffff84012af8 <tcbEPDequeue>
    0x84013ee2     0x54    sd a0,0(sp)           ; stack access
    0x84013ee4     0x56    sd a1,8(sp)           ; stack access
    0x84013ee6     0x58    sd a0,8(s0)
    0x84013ee8     0x5a    ld a5,0(s0)
    0x84013eea     0x5c    li a4,-1
    0x84013eec     0x5e    slli a4,a4,0x27
    0x84013eee     0x60    addi a4,a4,3
    0x84013ef0     0x62    and a5,a5,a4
    0x84013ef2     0x64    lui a4,0xf8000
    0x84013ef6     0x68    srli a4,a4,0x19
    0x84013ef8     0x6a    and a1,a1,a4
    0x84013efa     0x6c    or a1,a1,a5
    0x84013efc     0x6e    beqz a0,ffffffff84013ff2 <sendIPC+0x164>
    0x84013f00     0x72    sd a1,0(s0)
    0x84013f02     0x74    mv a4,s6
    0x84013f04     0x76    mv a3,s2
    0x84013f06     0x78    mv a2,s5
    0x84013f08     0x7a    mv a1,s0
    0x84013f0a     0x7c    mv a0,s1
    0x84013f0c     0x7e    jal ra,ffffffff84013d58 <doIPCTransfer>
    0x84013f10     0x82    ld s0,288(s6)
    0x84013f14     0x86    li a1,1
    0x84013f16     0x88    mv a0,s6
    0x84013f18     0x8a    jal ra,ffffffff840122d0 <setThreadState>
    0x84013f1c     0x8e    mv a0,s6
    0x84013f1e     0x90    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x84013f22     0x94    beqz s3,ffffffff84013f40 <sendIPC+0xb2>
    0x84013f26     0x98    or s2,s2,s4
    0x84013f2a     0x9c    beqz s2,ffffffff84013ff8 <sendIPC+0x16a>
    0x84013f2e     0xa0    srli a2,s0,0x3
    0x84013f32     0xa4    andi a2,a2,1
    0x84013f34     0xa6    mv a1,s6
    0x84013f36     0xa8    mv a0,s1
    0x84013f38     0xaa    jal ra,ffffffff84013a7e <setupCallerCap>
    0x84013f3c     0xae    j ffffffff84013f40 <sendIPC+0xb2>
    0x84013f3e     0xb0    bnez a0,ffffffff84013f54 <sendIPC+0xc6>
    0x84013f40     0xb2    ld ra,72(sp)          ; stack access
    0x84013f42     0xb4    ld s0,64(sp)          ; stack access
    0x84013f44     0xb6    ld s1,56(sp)          ; stack access
    0x84013f46     0xb8    ld s2,48(sp)          ; stack access
    0x84013f48     0xba    ld s3,40(sp)          ; stack access
    0x84013f4a     0xbc    ld s4,32(sp)          ; stack access
    0x84013f4c     0xbe    ld s5,24(sp)          ; stack access
    0x84013f4e     0xc0    ld s6,16(sp)          ; stack access
    0x84013f50     0xc2    addi sp,sp,80
    0x84013f52     0xc4    ret
    0x84013f54     0xc6    ld a5,280(s1)
    0x84013f58     0xca    srli a5,a5,0x27
    0x84013f5a     0xcc    slli a5,a5,0x27
    0x84013f5c     0xce    lui a4,0xe0000
    0x84013f60     0xd2    srli a4,a4,0x19
    0x84013f62     0xd4    and a4,a6,a4
    0x84013f66     0xd8    or a5,a5,a4
    0x84013f68     0xda    ori a5,a5,4
    0x84013f6c     0xde    sd a5,280(s1)
    0x84013f70     0xe2    sd a2,296(s1)
    0x84013f74     0xe6    ld a5,288(s1)
    0x84013f78     0xea    slli s2,a3,0x3
    0x84013f7c     0xee    andi s2,s2,8
    0x84013f80     0xf2    andi a5,a5,-13
    0x84013f82     0xf4    or a5,a5,s2
    0x84013f86     0xf8    slli s4,s4,0x2
    0x84013f88     0xfa    andi s4,s4,4
    0x84013f8c     0xfe    or a5,a5,s4
    0x84013f90    0x102    andi a5,a5,-3
    0x84013f92    0x104    slli s3,a1,0x1
    0x84013f96    0x108    andi s3,s3,2
    0x84013f9a    0x10c    or s3,a5,s3
    0x84013f9e    0x110    sd s3,288(s1)
    0x84013fa2    0x114    mv a0,s1
    0x84013fa4    0x116    jal ra,ffffffff8401229c <scheduleTCB>
    0x84013fa8    0x11a    ld a2,8(s0)
    0x84013faa    0x11c    ld a4,0(s0)
    0x84013fac    0x11e    lui a5,0xf8000
    0x84013fb0    0x122    srli a5,a5,0x19
    0x84013fb2    0x124    and a5,a5,a4
    0x84013fb4    0x126    slli a3,a4,0x19
    0x84013fb8    0x12a    bgez a3,ffffffff84013fc2 <sendIPC+0x134>
    0x84013fbc    0x12e    li a4,-1
    0x84013fbe    0x130    slli a4,a4,0x27
    0x84013fc0    0x132    or a5,a5,a4
    0x84013fc2    0x134    mv a4,a5
    0x84013fc4    0x136    mv a3,s1
    0x84013fc6    0x138    beqz a2,ffffffff84013fce <sendIPC+0x140>
    0x84013fc8    0x13a    mv a3,a2
    0x84013fca    0x13c    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd2198>
    0x84013fce    0x140    sd a4,416(s1)
    0x84013fd2    0x144    sd zero,408(s1)
    0x84013fd6    0x148    ld a4,0(s0)
    0x84013fd8    0x14a    sd a3,8(s0)
    0x84013fda    0x14c    lui a5,0xf8000
    0x84013fde    0x150    srli a5,a5,0x19
    0x84013fe0    0x152    and s1,s1,a5
    0x84013fe2    0x154    srli a5,a4,0x27
    0x84013fe6    0x158    slli a5,a5,0x27
    0x84013fe8    0x15a    or s1,s1,a5
    0x84013fea    0x15c    ori s1,s1,1
    0x84013fee    0x160    sd s1,0(s0)
    0x84013ff0    0x162    j ffffffff84013f40 <sendIPC+0xb2>
    0x84013ff2    0x164    andi a1,a1,-4
    0x84013ff4    0x166    sd a1,0(s0)
    0x84013ff6    0x168    j ffffffff84013f02 <sendIPC+0x74>
    0x84013ff8    0x16a    li a1,0
    0x84013ffa    0x16c    mv a0,s1
    0x84013ffc    0x16e    jal ra,ffffffff840122d0 <setThreadState>
    0x84014000    0x172    j ffffffff84013f40 <sendIPC+0xb2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
139 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 203 nodes.

Section cteDelete (256 of 267)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 158 instructions.


Stack analysis
---------------

32 stack accesses found. Annotated code for `cteDelete`:

    0x84012f74      0x0    addi sp,sp,-160
    0x84012f76      0x2    sd ra,152(sp)         ; stack access
    0x84012f78      0x4    sd s0,144(sp)         ; stack access
    0x84012f7a      0x6    sd s1,136(sp)         ; stack access
    0x84012f7c      0x8    sd s2,128(sp)         ; stack access
    0x84012f7e      0xa    sd s3,120(sp)         ; stack access
    0x84012f80      0xc    sd s4,112(sp)         ; stack access
    0x84012f82      0xe    sd s5,104(sp)         ; stack access
    0x84012f84     0x10    sd s6,96(sp)          ; stack access
    0x84012f86     0x12    sd s7,88(sp)          ; stack access
    0x84012f88     0x14    sd s8,80(sp)          ; stack access
    0x84012f8a     0x16    sd s9,72(sp)          ; stack access
    0x84012f8c     0x18    mv s0,a0
    0x84012f8e     0x1a    mv s3,a1
    0x84012f90     0x1c    li s4,18
    0x84012f92     0x1e    li s2,64
    0x84012f96     0x22    li s6,4
    0x84012f98     0x24    li s5,-1
    0x84012f9a     0x26    li s1,1
    0x84012f9c     0x28    j ffffffff84012fd4 <cteDelete+0x60>
    0x84012f9e     0x2a    mv a4,s6
    0x84012fa0     0x2c    j ffffffff8401300c <cteDelete+0x98>
    0x84012fa2     0x2e    bnez a1,ffffffff8401303a <cteDelete+0xc6>
    0x84012fa4     0x30    sd a5,0(s0)
    0x84012fa6     0x32    sd a0,8(s0)
    0x84012fa8     0x34    bnez s3,ffffffff840130a0 <cteDelete+0x12c>
    0x84012fac     0x38    beq a2,s4,ffffffff84013040 <cteDelete+0xcc>
    0x84012fb0     0x3c    andi a4,a5,127
    0x84012fb4     0x40    beq a4,s2,ffffffff84013128 <cteDelete+0x1b4>
    0x84012fb8     0x44    andi a5,a5,63
    0x84012fbc     0x48    addiw a5,a5,1
    0x84012fbe     0x4a    sll a5,s1,a5
    0x84012fc2     0x4e    neg a5,a5
    0x84012fc6     0x52    and a0,a0,a5
    0x84012fc8     0x54    mv a1,s0
    0x84012fca     0x56    jal ra,ffffffff8401166e <capSwapForDelete>
    0x84012fce     0x5a    jal ra,ffffffff84011376 <preemptionPoint>
    0x84012fd2     0x5e    bnez a0,ffffffff84013078 <cteDelete+0x104>
    0x84012fd4     0x60    ld a5,0(s0)
    0x84012fd6     0x62    srli a5,a5,0x3b
    0x84012fd8     0x64    beqz a5,ffffffff84013068 <cteDelete+0xf4>
    0x84012fda     0x66    mv a0,s0
    0x84012fdc     0x68    jal ra,ffffffff84011e78 <isFinalCapability>
    0x84012fe0     0x6c    mv a3,a0
    0x84012fe2     0x6e    li a4,0
    0x84012fe4     0x70    ld a1,0(s0)
    0x84012fe6     0x72    ld a2,8(s0)
    0x84012fe8     0x74    mv a0,sp
    0x84012fea     0x76    jal ra,ffffffff84012dbe <finaliseCap>
    0x84012fee     0x7a    ld a5,0(sp)           ; stack access
    0x84012ff0     0x7c    ld a0,8(sp)           ; stack access
    0x84012ff2     0x7e    ld a7,16(sp)          ; stack access
    0x84012ff4     0x80    ld a6,24(sp)          ; stack access
    0x84012ff6     0x82    srli a2,a5,0x3b
    0x84012ffa     0x86    beqz a2,ffffffff8401303a <cteDelete+0xc6>
    0x84012ffc     0x88    bne a2,s4,ffffffff84013036 <cteDelete+0xc2>
    0x84013000     0x8c    andi a4,a5,127
    0x84013004     0x90    beq a4,s2,ffffffff84012f9e <cteDelete+0x2a>
    0x84013008     0x94    andi a4,a5,63
    0x8401300c     0x98    addi a4,a4,1
    0x8401300e     0x9a    sll a3,s5,a4
    0x84013012     0x9e    not a3,a3
    0x84013016     0xa2    and a3,a3,a0
    0x84013018     0xa4    mv a1,s1
    0x8401301a     0xa6    beqz a3,ffffffff84012fa2 <cteDelete+0x2e>
    0x8401301c     0xa8    li a1,0
    0x8401301e     0xaa    bne a3,s1,ffffffff84012fa2 <cteDelete+0x2e>
    0x84013022     0xae    sll a4,s1,a4
    0x84013026     0xb2    neg a4,a4
    0x8401302a     0xb6    and a4,a4,a0
    0x8401302c     0xb8    sub a4,s0,a4
    0x84013030     0xbc    seqz a1,a4
    0x84013034     0xc0    j ffffffff84012fa2 <cteDelete+0x2e>
    0x84013036     0xc2    jal ra,ffffffff8401034a <halt>
    0x8401303a     0xc6    sd a7,48(sp)          ; stack access
    0x8401303c     0xc8    sd a6,56(sp)          ; stack access
    0x8401303e     0xca    j ffffffff8401306c <cteDelete+0xf8>
    0x84013040     0xcc    andi a4,a5,127
    0x84013044     0xd0    beq a4,s2,ffffffff84013120 <cteDelete+0x1ac>
    0x84013048     0xd4    andi a4,a5,63
    0x8401304c     0xd8    addiw a4,a4,1
    0x8401304e     0xda    sll a4,s1,a4
    0x84013052     0xde    neg a4,a4
    0x84013056     0xe2    and a4,a4,a0
    0x84013058     0xe4    bne s0,a4,ffffffff84012fb0 <cteDelete+0x3c>
    0x8401305c     0xe8    mv a0,s3
    0x8401305e     0xea    j ffffffff84013078 <cteDelete+0x104>
    0x84013060     0xec    mv a5,s6
    0x84013062     0xee    j ffffffff840130f2 <cteDelete+0x17e>
    0x84013064     0xf0    jal ra,ffffffff8401034a <halt>
    0x84013068     0xf4    sd zero,48(sp)        ; stack access
    0x8401306a     0xf6    sd zero,56(sp)        ; stack access
    0x8401306c     0xf8    ld a1,48(sp)          ; stack access
    0x8401306e     0xfa    ld a2,56(sp)          ; stack access
    0x84013070     0xfc    mv a0,s0
    0x84013072     0xfe    jal ra,ffffffff8401186c <emptySlot>
    0x84013076    0x102    li a0,0
    0x84013078    0x104    ld ra,152(sp)         ; stack access
    0x8401307a    0x106    ld s0,144(sp)         ; stack access
    0x8401307c    0x108    ld s1,136(sp)         ; stack access
    0x8401307e    0x10a    ld s2,128(sp)         ; stack access
    0x84013080    0x10c    ld s3,120(sp)         ; stack access
    0x84013082    0x10e    ld s4,112(sp)         ; stack access
    0x84013084    0x110    ld s5,104(sp)         ; stack access
    0x84013086    0x112    ld s6,96(sp)          ; stack access
    0x84013088    0x114    ld s7,88(sp)          ; stack access
    0x8401308a    0x116    ld s8,80(sp)          ; stack access
    0x8401308c    0x118    ld s9,72(sp)          ; stack access
    0x8401308e    0x11a    addi sp,sp,160
    0x84013090    0x11c    ret
    0x84013092    0x11e    mv a0,s3
    0x84013094    0x120    j ffffffff84013078 <cteDelete+0x104>
    0x84013096    0x122    andi s9,a0,-32
    0x8401309a    0x126    andi s7,a0,31
    0x8401309e    0x12a    j ffffffff840130c6 <cteDelete+0x152>
    0x840130a0    0x12c    andi s8,a5,127
    0x840130a4    0x130    beq s8,s2,ffffffff84013096 <cteDelete+0x122>
    0x840130a8    0x134    andi a5,a5,63
    0x840130ac    0x138    addi a5,a5,1
    0x840130ae    0x13a    sll s9,s1,a5
    0x840130b2    0x13e    neg s9,s9
    0x840130b6    0x142    and s9,s9,a0
    0x840130ba    0x146    sll s7,s5,a5
    0x840130be    0x14a    not s7,s7
    0x840130c2    0x14e    and s7,s7,a0
    0x840130c6    0x152    slli a0,s7,0x5
    0x840130ca    0x156    addi a0,a0,-32
    0x840130cc    0x158    li a1,0
    0x840130ce    0x15a    add a0,a0,s9
    0x840130d0    0x15c    jal ra,ffffffff84012f74 <cteDelete>
    0x840130d4    0x160    bnez a0,ffffffff84013078 <cteDelete+0x104>
    0x840130d6    0x162    ld a5,0(s0)
    0x840130d8    0x164    srli a4,a5,0x3b
    0x840130dc    0x168    beqz a4,ffffffff84012fce <cteDelete+0x5a>
    0x840130e0    0x16c    bne a4,s4,ffffffff84013064 <cteDelete+0xf0>
    0x840130e4    0x170    ld a3,8(s0)
    0x840130e6    0x172    andi a2,a5,127
    0x840130ea    0x176    beq a2,s2,ffffffff84013060 <cteDelete+0xec>
    0x840130ee    0x17a    andi a5,a5,63
    0x840130f2    0x17e    addi a5,a5,1
    0x840130f4    0x180    sll a4,s1,a5
    0x840130f8    0x184    neg a4,a4
    0x840130fc    0x188    and a4,a4,a3
    0x840130fe    0x18a    bne s9,a4,ffffffff84012fce <cteDelete+0x5a>
    0x84013102    0x18e    sll a5,s5,a5
    0x84013106    0x192    not a5,a5
    0x8401310a    0x196    and a3,a3,a5
    0x8401310c    0x198    bne a3,s7,ffffffff84012fce <cteDelete+0x5a>
    0x84013110    0x19c    bne a2,s8,ffffffff84012fce <cteDelete+0x5a>
    0x84013114    0x1a0    addi s7,s7,-1
    0x84013116    0x1a2    and a5,s7,a5
    0x8401311a    0x1a6    or a4,a4,a5
    0x8401311c    0x1a8    sd a4,8(s0)
    0x8401311e    0x1aa    j ffffffff84012fce <cteDelete+0x5a>
    0x84013120    0x1ac    andi a5,a0,-32
    0x84013124    0x1b0    beq s0,a5,ffffffff84013092 <cteDelete+0x11e>
    0x84013128    0x1b4    andi a0,a0,-32
    0x8401312a    0x1b6    j ffffffff84012fc8 <cteDelete+0x54>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
158 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 250 nodes.

Section decodeIRQControlInvocation (257 of 267)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 70 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeIRQControlInvocation`:

    0x840123fc     0x0    addi sp,sp,-80
    0x840123fe     0x2    sd ra,72(sp)          ; stack access
    0x84012400     0x4    sd s0,64(sp)          ; stack access
    0x84012402     0x6    sd s1,56(sp)          ; stack access
    0x84012404     0x8    sd s2,48(sp)          ; stack access
    0x84012406     0xa    sd s3,40(sp)          ; stack access
    0x84012408     0xc    mv s0,a2
    0x8401240a     0xe    li a5,25
    0x8401240c    0x10    bne a0,a5,ffffffff840124b0 <decodeIRQControlInvocation+0xb4>
    0x84012410    0x14    li a5,2
    0x84012412    0x16    bgeu a5,a1,ffffffff84012462 <decodeIRQControlInvocation+0x66>
    0x84012416    0x1a    auipc a5,0xb
    0x8401241a    0x1e    ld a5,-1942(a5) # ffffffff8401cc80 <current_extra_caps>
    0x8401241e    0x22    beqz a5,ffffffff84012462 <decodeIRQControlInvocation+0x66>
    0x84012420    0x24    auipc a4,0x1b
    0x84012424    0x28    ld a4,1656(a4) # ffffffff8402da98 <ksCurThread>
    0x84012428    0x2c    ld s1,88(a4)
    0x8401242a    0x2e    ld s2,96(a4)
    0x8401242e    0x32    ld s3,104(a4)
    0x84012432    0x36    ld a4,0(a5)
    0x84012434    0x38    sd a4,0(sp)           ; stack access
    0x84012436    0x3a    ld a5,8(a5)
    0x84012438    0x3c    sd a5,8(sp)           ; stack access
    0x8401243a    0x3e    mv a0,s1
    0x8401243c    0x40    jal ra,ffffffff84010b5c <Arch_checkIRQ>
    0x84012440    0x44    bnez a0,ffffffff8401246e <decodeIRQControlInvocation+0x72>
    0x84012442    0x46    slli a4,s1,0x3
    0x84012446    0x4a    auipc a5,0xb
    0x8401244a    0x4e    addi a5,a5,-1966 # ffffffff8401cc98 <intStateIRQTable>
    0x8401244e    0x52    add a5,a5,a4
    0x84012450    0x54    ld a5,0(a5)
    0x84012452    0x56    beqz a5,ffffffff8401247c <decodeIRQControlInvocation+0x80>
    0x84012454    0x58    li a5,9
    0x84012456    0x5a    auipc a4,0xb
    0x8401245a    0x5e    sd a5,-2014(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401245e    0x62    li a0,3
    0x84012460    0x64    j ffffffff8401246e <decodeIRQControlInvocation+0x72>
    0x84012462    0x66    li a5,7
    0x84012464    0x68    auipc a4,0xb
    0x84012468    0x6c    sd a5,-2028(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401246c    0x70    li a0,3
    0x8401246e    0x72    ld ra,72(sp)          ; stack access
    0x84012470    0x74    ld s0,64(sp)          ; stack access
    0x84012472    0x76    ld s1,56(sp)          ; stack access
    0x84012474    0x78    ld s2,48(sp)          ; stack access
    0x84012476    0x7a    ld s3,40(sp)          ; stack access
    0x84012478    0x7c    addi sp,sp,80
    0x8401247a    0x7e    ret
    0x8401247c    0x80    mv a3,s3
    0x8401247e    0x82    mv a2,s2
    0x84012480    0x84    ld a0,0(sp)           ; stack access
    0x84012482    0x86    ld a1,8(sp)           ; stack access
    0x84012484    0x88    jal ra,ffffffff840112dc <lookupTargetSlot>
    0x84012488    0x8c    sd a1,24(sp)          ; stack access
    0x8401248a    0x8e    bnez a0,ffffffff8401246e <decodeIRQControlInvocation+0x72>
    0x8401248c    0x90    mv s2,a1
    0x8401248e    0x92    mv a0,a1
    0x84012490    0x94    jal ra,ffffffff8401170c <ensureEmptySlot>
    0x84012494    0x98    bnez a0,ffffffff8401246e <decodeIRQControlInvocation+0x72>
    0x84012496    0x9a    li a1,2
    0x84012498    0x9c    auipc a0,0x1b
    0x8401249c    0xa0    ld a0,1536(a0) # ffffffff8402da98 <ksCurThread>
    0x840124a0    0xa4    jal ra,ffffffff840122d0 <setThreadState>
    0x840124a4    0xa8    mv a2,s0
    0x840124a6    0xaa    mv a1,s2
    0x840124a8    0xac    mv a0,s1
    0x840124aa    0xae    jal ra,ffffffff84011822 <invokeIRQControl>
    0x840124ae    0xb2    j ffffffff8401246e <decodeIRQControlInvocation+0x72>
    0x840124b0    0xb4    jal ra,ffffffff840122ec <Arch_decodeIRQControlInvocation>
    0x840124b4    0xb8    j ffffffff8401246e <decodeIRQControlInvocation+0x72>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
70 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 117 nodes.

Section handleInvocation (258 of 267)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 105 instructions.


Stack analysis
---------------

23 stack accesses found. Annotated code for `handleInvocation`:

    0x840165da      0x0    addi sp,sp,-128
    0x840165dc      0x2    sd ra,120(sp)         ; stack access
    0x840165de      0x4    sd s0,112(sp)         ; stack access
    0x840165e0      0x6    sd s1,104(sp)         ; stack access
    0x840165e2      0x8    sd s2,96(sp)          ; stack access
    0x840165e4      0xa    sd s3,88(sp)          ; stack access
    0x840165e6      0xc    sd s4,80(sp)          ; stack access
    0x840165e8      0xe    sd s5,72(sp)          ; stack access
    0x840165ea     0x10    sd s6,64(sp)          ; stack access
    0x840165ec     0x12    sd s7,56(sp)          ; stack access
    0x840165ee     0x14    mv s5,a0
    0x840165f0     0x16    mv s4,a1
    0x840165f2     0x18    auipc s0,0x17
    0x840165f6     0x1c    ld s0,1190(s0) # ffffffff8402da98 <ksCurThread>
    0x840165fa     0x20    ld s1,80(s0)
    0x840165fc     0x22    andi a4,s1,127
    0x84016600     0x26    li a5,120
    0x84016604     0x2a    bgeu a5,a4,ffffffff84016610 <handleInvocation+0x36>
    0x84016608     0x2e    andi s1,s1,-128
    0x8401660c     0x32    ori s1,s1,120
    0x84016610     0x36    ld s6,72(s0)
    0x84016614     0x3a    mv a2,s6
    0x84016616     0x3c    mv a1,s0
    0x84016618     0x3e    addi a0,sp,16
    0x8401661a     0x40    jal ra,ffffffff840111b8 <lookupCapAndSlot>
    0x8401661e     0x44    ld s7,16(sp)          ; stack access
    0x84016620     0x46    bnez s7,ffffffff8401668c <handleInvocation+0xb2>
    0x84016624     0x4a    mv a1,s0
    0x84016626     0x4c    li a0,0
    0x84016628     0x4e    jal ra,ffffffff840104e4 <lookupIPCBuffer>
    0x8401662c     0x52    mv s3,a0
    0x8401662e     0x54    mv a2,s1
    0x84016630     0x56    mv a1,a0
    0x84016632     0x58    mv a0,s0
    0x84016634     0x5a    jal ra,ffffffff84013ad6 <lookupExtraCaps>
    0x84016638     0x5e    mv s2,a0
    0x8401663a     0x60    bnez a0,ffffffff840166ac <handleInvocation+0xd2>
    0x8401663c     0x62    andi a1,s1,127
    0x84016640     0x66    li a5,4
    0x84016642     0x68    bltu a5,a1,ffffffff840166bc <handleInvocation+0xe2>
    0x84016646     0x6c    sd s3,0(sp)           ; stack access
    0x84016648     0x6e    mv a7,s5
    0x8401664a     0x70    mv a6,s4
    0x8401664c     0x72    ld a4,24(sp)          ; stack access
    0x8401664e     0x74    ld a5,32(sp)          ; stack access
    0x84016650     0x76    ld a3,40(sp)          ; stack access
    0x84016652     0x78    mv a2,s6
    0x84016654     0x7a    srli a0,s1,0xc
    0x84016658     0x7e    jal ra,ffffffff84016422 <decodeInvocation>
    0x8401665c     0x82    li a5,4
    0x8401665e     0x84    beq a0,a5,ffffffff840166ec <handleInvocation+0x112>
    0x84016662     0x88    li a5,3
    0x84016664     0x8a    beq a0,a5,ffffffff840166c4 <handleInvocation+0xea>
    0x84016668     0x8e    ld a5,280(s0)
    0x8401666c     0x92    andi a5,a5,15
    0x8401666e     0x94    li a4,2
    0x84016670     0x96    beq a5,a4,ffffffff840166d4 <handleInvocation+0xfa>
    0x84016674     0x9a    mv a0,s2
    0x84016676     0x9c    ld ra,120(sp)         ; stack access
    0x84016678     0x9e    ld s0,112(sp)         ; stack access
    0x8401667a     0xa0    ld s1,104(sp)         ; stack access
    0x8401667c     0xa2    ld s2,96(sp)          ; stack access
    0x8401667e     0xa4    ld s3,88(sp)          ; stack access
    0x84016680     0xa6    ld s4,80(sp)          ; stack access
    0x84016682     0xa8    ld s5,72(sp)          ; stack access
    0x84016684     0xaa    ld s6,64(sp)          ; stack access
    0x84016686     0xac    ld s7,56(sp)          ; stack access
    0x84016688     0xae    addi sp,sp,128
    0x8401668a     0xb0    ret
    0x8401668c     0xb2    auipc a5,0x5
    0x84016690     0xb6    addi a5,a5,372 # ffffffff8401b800 <current_fault>
    0x84016694     0xba    li a4,1
    0x84016696     0xbc    sd a4,0(a5)
    0x84016698     0xbe    sd s6,8(a5)
    0x8401669c     0xc2    mv s2,s4
    0x8401669e     0xc4    beqz s4,ffffffff84016674 <handleInvocation+0x9a>
    0x840166a2     0xc8    mv a0,s0
    0x840166a4     0xca    jal ra,ffffffff840140ec <handleFault>
    0x840166a8     0xce    li s2,0
    0x840166aa     0xd0    j ffffffff84016674 <handleInvocation+0x9a>
    0x840166ac     0xd2    mv s2,s4
    0x840166ae     0xd4    beqz s4,ffffffff84016674 <handleInvocation+0x9a>
    0x840166b2     0xd8    mv a0,s0
    0x840166b4     0xda    jal ra,ffffffff840140ec <handleFault>
    0x840166b8     0xde    mv s2,s7
    0x840166ba     0xe0    j ffffffff84016674 <handleInvocation+0x9a>
    0x840166bc     0xe2    bnez s3,ffffffff84016646 <handleInvocation+0x6c>
    0x840166c0     0xe6    li a1,4
    0x840166c2     0xe8    j ffffffff84016646 <handleInvocation+0x6c>
    0x840166c4     0xea    bnez s5,ffffffff840166cc <handleInvocation+0xf2>
    0x840166c8     0xee    mv s2,s5
    0x840166ca     0xf0    j ffffffff84016674 <handleInvocation+0x9a>
    0x840166cc     0xf2    mv a0,s0
    0x840166ce     0xf4    jal ra,ffffffff840155da <replyFromKernel_error>
    0x840166d2     0xf8    j ffffffff84016674 <handleInvocation+0x9a>
    0x840166d4     0xfa    bnez s5,ffffffff840166e2 <handleInvocation+0x108>
    0x840166d8     0xfe    li a1,1
    0x840166da    0x100    mv a0,s0
    0x840166dc    0x102    jal ra,ffffffff840122d0 <setThreadState>
    0x840166e0    0x106    j ffffffff84016674 <handleInvocation+0x9a>
    0x840166e2    0x108    sd zero,72(s0)
    0x840166e6    0x10c    sd zero,80(s0)
    0x840166ea    0x110    j ffffffff840166d8 <handleInvocation+0xfe>
    0x840166ec    0x112    mv s2,a0
    0x840166ee    0x114    j ffffffff84016674 <handleInvocation+0x9a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
105 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 169 nodes.

Section decodeTCBConfigure (259 of 267)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 182 instructions.


Stack analysis
---------------

72 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x84014726      0x0    addi sp,sp,-272
    0x84014728      0x2    sd ra,264(sp)         ; stack access
    0x8401472a      0x4    sd s0,256(sp)         ; stack access
    0x8401472c      0x6    sd s1,248(sp)         ; stack access
    0x8401472e      0x8    sd s2,240(sp)         ; stack access
    0x84014730      0xa    sd s3,232(sp)         ; stack access
    0x84014732      0xc    sd s4,224(sp)         ; stack access
    0x84014734      0xe    sd s5,216(sp)         ; stack access
    0x84014736     0x10    sd s6,208(sp)         ; stack access
    0x84014738     0x12    sd s7,200(sp)         ; stack access
    0x8401473a     0x14    sd s8,192(sp)         ; stack access
    0x8401473c     0x16    sd s9,184(sp)         ; stack access
    0x8401473e     0x18    sd s10,176(sp)        ; stack access
    0x84014740     0x1a    sd s11,168(sp)        ; stack access
    0x84014742     0x1c    sd a0,64(sp)          ; stack access
    0x84014744     0x1e    sd a1,72(sp)          ; stack access
    0x84014746     0x20    li a5,3
    0x84014748     0x22    bgeu a5,a2,ffffffff8401488c <decodeTCBConfigure+0x166>
    0x8401474c     0x26    mv s0,a3
    0x8401474e     0x28    auipc s1,0x8
    0x84014752     0x2c    ld s1,1330(s1) # ffffffff8401cc80 <current_extra_caps>
    0x84014756     0x30    beqz s1,ffffffff8401488c <decodeTCBConfigure+0x166>
    0x8401475a     0x34    auipc s3,0x8
    0x8401475e     0x38    ld s3,1326(s3) # ffffffff8401cc88 <current_extra_caps+0x8>
    0x84014762     0x3c    beqz s3,ffffffff8401488c <decodeTCBConfigure+0x166>
    0x84014766     0x40    auipc s2,0x8
    0x8401476a     0x44    ld s2,1322(s2) # ffffffff8401cc90 <current_extra_caps+0x10>
    0x8401476e     0x48    beqz s2,ffffffff8401488c <decodeTCBConfigure+0x166>
    0x84014772     0x4c    auipc a5,0x19
    0x84014776     0x50    ld a5,806(a5) # ffffffff8402da98 <ksCurThread>
    0x8401477a     0x54    ld s8,88(a5)
    0x8401477e     0x58    ld s6,96(a5)
    0x84014782     0x5c    ld s7,104(a5)
    0x84014786     0x60    ld s5,112(a5)
    0x8401478a     0x64    ld s4,0(s1)
    0x8401478e     0x68    sd s4,128(sp)         ; stack access
    0x84014790     0x6a    ld a5,8(s1)
    0x84014792     0x6c    sd a5,136(sp)         ; stack access
    0x84014794     0x6e    mv s9,s4
    0x84014796     0x70    ld a5,0(s3)
    0x8401479a     0x74    sd a5,112(sp)         ; stack access
    0x8401479c     0x76    ld a5,8(s3)
    0x840147a0     0x7a    sd a5,120(sp)         ; stack access
    0x840147a2     0x7c    ld a5,0(s2)
    0x840147a6     0x80    sd a5,144(sp)         ; stack access
    0x840147a8     0x82    ld a5,8(s2)
    0x840147ac     0x86    sd a5,152(sp)         ; stack access
    0x840147ae     0x88    bnez s5,ffffffff840148b6 <decodeTCBConfigure+0x190>
    0x840147b2     0x8c    li s2,0
    0x840147b4     0x8e    ld a5,64(sp)          ; stack access
    0x840147b6     0x90    slli s10,a5,0x19
    0x840147ba     0x94    srli s10,s10,0x19
    0x840147be     0x98    slli a4,a5,0x19
    0x840147c2     0x9c    bgez a4,ffffffff840147ce <decodeTCBConfigure+0xa8>
    0x840147c6     0xa0    li a5,-1
    0x840147c8     0xa2    slli a5,a5,0x27
    0x840147ca     0xa4    or s10,s10,a5
    0x840147ce     0xa8    andi s11,s10,-1024
    0x840147d2     0xac    mv a0,s11
    0x840147d4     0xae    jal ra,ffffffff84011ed0 <slotCapLongRunningDelete>
    0x840147d8     0xb2    bnez a0,ffffffff840148da <decodeTCBConfigure+0x1b4>
    0x840147dc     0xb6    addi a0,s11,32 # 1020 <KERNEL_OFFSET-0xfffffffeffffefe0>
    0x840147e0     0xba    jal ra,ffffffff84011ed0 <slotCapLongRunningDelete>
    0x840147e4     0xbe    bnez a0,ffffffff840148da <decodeTCBConfigure+0x1b4>
    0x840147e8     0xc2    beqz s6,ffffffff840147fc <decodeTCBConfigure+0xd6>
    0x840147ec     0xc6    mv a2,s4
    0x840147ee     0xc8    ld a3,136(sp)         ; stack access
    0x840147f0     0xca    mv a1,s6
    0x840147f2     0xcc    li a0,0
    0x840147f4     0xce    jal ra,ffffffff84011f0c <updateCapData>
    0x840147f8     0xd2    sd a1,136(sp)         ; stack access
    0x840147fa     0xd4    mv s9,a0
    0x840147fc     0xd6    mv a2,s9
    0x840147fe     0xd8    ld a3,136(sp)         ; stack access
    0x84014800     0xda    mv a1,s1
    0x84014802     0xdc    addi a0,sp,88
    0x84014804     0xde    jal ra,ffffffff84011da6 <deriveCap>
    0x84014808     0xe2    ld a0,88(sp)          ; stack access
    0x8401480a     0xe4    bnez a0,ffffffff84014898 <decodeTCBConfigure+0x172>
    0x8401480c     0xe6    ld s4,96(sp)          ; stack access
    0x8401480e     0xe8    ld a5,104(sp)         ; stack access
    0x84014810     0xea    sd a5,136(sp)         ; stack access
    0x84014812     0xec    srli a4,s4,0x3b
    0x84014816     0xf0    li a5,10
    0x84014818     0xf2    bne a4,a5,ffffffff840148e8 <decodeTCBConfigure+0x1c2>
    0x8401481c     0xf6    beqz s7,ffffffff84014830 <decodeTCBConfigure+0x10a>
    0x84014820     0xfa    ld a2,112(sp)         ; stack access
    0x84014822     0xfc    ld a3,120(sp)         ; stack access
    0x84014824     0xfe    mv a1,s7
    0x84014826    0x100    li a0,0
    0x84014828    0x102    jal ra,ffffffff84011f0c <updateCapData>
    0x8401482c    0x106    sd a0,112(sp)         ; stack access
    0x8401482e    0x108    sd a1,120(sp)         ; stack access
    0x84014830    0x10a    ld a2,112(sp)         ; stack access
    0x84014832    0x10c    ld a3,120(sp)         ; stack access
    0x84014834    0x10e    mv a1,s3
    0x84014836    0x110    addi a0,sp,88
    0x84014838    0x112    jal ra,ffffffff84011da6 <deriveCap>
    0x8401483c    0x116    ld a0,88(sp)          ; stack access
    0x8401483e    0x118    bnez a0,ffffffff84014898 <decodeTCBConfigure+0x172>
    0x84014840    0x11a    ld a0,96(sp)          ; stack access
    0x84014842    0x11c    sd a0,112(sp)         ; stack access
    0x84014844    0x11e    ld a1,104(sp)         ; stack access
    0x84014846    0x120    sd a1,120(sp)         ; stack access
    0x84014848    0x122    jal ra,ffffffff84010a30 <isValidVTableRoot>
    0x8401484c    0x126    beqz a0,ffffffff840148f6 <decodeTCBConfigure+0x1d0>
    0x8401484e    0x128    li a1,2
    0x84014850    0x12a    auipc a0,0x19
    0x84014854    0x12e    ld a0,584(a0) # ffffffff8402da98 <ksCurThread>
    0x84014858    0x132    jal ra,ffffffff840122d0 <setThreadState>
    0x8401485c    0x136    li a5,6
    0x8401485e    0x138    sd a5,56(sp)          ; stack access
    0x84014860    0x13a    sd s2,48(sp)          ; stack access
    0x84014862    0x13c    ld a5,144(sp)         ; stack access
    0x84014864    0x13e    sd a5,32(sp)          ; stack access
    0x84014866    0x140    ld a5,152(sp)         ; stack access
    0x84014868    0x142    sd a5,40(sp)          ; stack access
    0x8401486a    0x144    sd s5,24(sp)          ; stack access
    0x8401486c    0x146    sd s3,16(sp)          ; stack access
    0x8401486e    0x148    ld a5,112(sp)         ; stack access
    0x84014870    0x14a    sd a5,0(sp)           ; stack access
    0x84014872    0x14c    ld a5,120(sp)         ; stack access
    0x84014874    0x14e    sd a5,8(sp)           ; stack access
    0x84014876    0x150    mv a7,s1
    0x84014878    0x152    mv a5,s4
    0x8401487a    0x154    ld a6,136(sp)         ; stack access
    0x8401487c    0x156    li a4,0
    0x8401487e    0x158    li a3,0
    0x84014880    0x15a    mv a2,s8
    0x84014882    0x15c    mv a1,s0
    0x84014884    0x15e    mv a0,s10
    0x84014886    0x160    jal ra,ffffffff840145d2 <invokeTCB_ThreadControl>
    0x8401488a    0x164    j ffffffff84014898 <decodeTCBConfigure+0x172>
    0x8401488c    0x166    li a5,7
    0x8401488e    0x168    auipc a4,0x8
    0x84014892    0x16c    sd a5,1002(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014896    0x170    li a0,3
    0x84014898    0x172    ld ra,264(sp)         ; stack access
    0x8401489a    0x174    ld s0,256(sp)         ; stack access
    0x8401489c    0x176    ld s1,248(sp)         ; stack access
    0x8401489e    0x178    ld s2,240(sp)         ; stack access
    0x840148a0    0x17a    ld s3,232(sp)         ; stack access
    0x840148a2    0x17c    ld s4,224(sp)         ; stack access
    0x840148a4    0x17e    ld s5,216(sp)         ; stack access
    0x840148a6    0x180    ld s6,208(sp)         ; stack access
    0x840148a8    0x182    ld s7,200(sp)         ; stack access
    0x840148aa    0x184    ld s8,192(sp)         ; stack access
    0x840148ac    0x186    ld s9,184(sp)         ; stack access
    0x840148ae    0x188    ld s10,176(sp)        ; stack access
    0x840148b0    0x18a    ld s11,168(sp)        ; stack access
    0x840148b2    0x18c    addi sp,sp,272
    0x840148b4    0x18e    ret
    0x840148b6    0x190    ld a2,144(sp)         ; stack access
    0x840148b8    0x192    mv a3,a5
    0x840148ba    0x194    mv a1,s2
    0x840148bc    0x196    addi a0,sp,88
    0x840148be    0x198    jal ra,ffffffff84011da6 <deriveCap>
    0x840148c2    0x19c    ld a0,88(sp)          ; stack access
    0x840148c4    0x19e    bnez a0,ffffffff84014898 <decodeTCBConfigure+0x172>
    0x840148c6    0x1a0    ld a1,96(sp)          ; stack access
    0x840148c8    0x1a2    sd a1,144(sp)         ; stack access
    0x840148ca    0x1a4    ld a2,104(sp)         ; stack access
    0x840148cc    0x1a6    sd a2,152(sp)         ; stack access
    0x840148ce    0x1a8    mv a0,s5
    0x840148d0    0x1aa    jal ra,ffffffff84010a46 <checkValidIPCBuffer>
    0x840148d4    0x1ae    beqz a0,ffffffff840147b4 <decodeTCBConfigure+0x8e>
    0x840148d8    0x1b2    j ffffffff84014898 <decodeTCBConfigure+0x172>
    0x840148da    0x1b4    li a5,3
    0x840148dc    0x1b6    auipc a4,0x8
    0x840148e0    0x1ba    sd a5,924(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840148e4    0x1be    li a0,3
    0x840148e6    0x1c0    j ffffffff84014898 <decodeTCBConfigure+0x172>
    0x840148e8    0x1c2    li a5,3
    0x840148ea    0x1c4    auipc a4,0x8
    0x840148ee    0x1c8    sd a5,910(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840148f2    0x1cc    li a0,3
    0x840148f4    0x1ce    j ffffffff84014898 <decodeTCBConfigure+0x172>
    0x840148f6    0x1d0    li a5,3
    0x840148f8    0x1d2    auipc a4,0x8
    0x840148fc    0x1d6    sd a5,896(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84014900    0x1da    li a0,3
    0x84014902    0x1dc    j ffffffff84014898 <decodeTCBConfigure+0x172>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
182 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 317 nodes.

Section receiveIPC (260 of 267)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 153 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `receiveIPC`:

    0x84014202      0x0    addi sp,sp,-96
    0x84014204      0x2    sd ra,88(sp)          ; stack access
    0x84014206      0x4    sd s0,80(sp)          ; stack access
    0x84014208      0x6    sd s1,72(sp)          ; stack access
    0x8401420a      0x8    sd s2,64(sp)          ; stack access
    0x8401420c      0xa    sd s3,56(sp)          ; stack access
    0x8401420e      0xc    sd s4,48(sp)          ; stack access
    0x84014210      0xe    sd s5,40(sp)          ; stack access
    0x84014212     0x10    mv s2,a0
    0x84014214     0x12    sd a1,0(sp)           ; stack access
    0x84014216     0x14    sd a2,8(sp)           ; stack access
    0x84014218     0x16    mv s0,a1
    0x8401421a     0x18    slli a5,a1,0x19
    0x8401421e     0x1c    srli a5,a5,0x19
    0x84014220     0x1e    slli a4,a1,0x19
    0x84014224     0x22    bgez a4,ffffffff8401422e <receiveIPC+0x2c>
    0x84014228     0x26    li a4,-1
    0x8401422a     0x28    slli a4,a4,0x27
    0x8401422c     0x2a    or a5,a5,a4
    0x8401422e     0x2c    mv s1,a5
    0x84014230     0x2e    ld a0,304(s2)
    0x84014234     0x32    beqz a0,ffffffff84014240 <receiveIPC+0x3e>
    0x84014236     0x34    ld a4,0(a0)
    0x84014238     0x36    andi a4,a4,3
    0x8401423a     0x38    li a2,2
    0x8401423c     0x3a    beq a4,a2,ffffffff84014262 <receiveIPC+0x60>
    0x84014240     0x3e    ld a4,0(s1)
    0x84014242     0x40    andi a1,a4,3
    0x84014246     0x44    li a2,1
    0x84014248     0x46    beq a1,a2,ffffffff840142f0 <receiveIPC+0xee>
    0x8401424c     0x4a    andi a4,a4,1
    0x8401424e     0x4c    beqz a4,ffffffff8401426a <receiveIPC+0x68>
    0x84014250     0x4e    ld ra,88(sp)          ; stack access
    0x84014252     0x50    ld s0,80(sp)          ; stack access
    0x84014254     0x52    ld s1,72(sp)          ; stack access
    0x84014256     0x54    ld s2,64(sp)          ; stack access
    0x84014258     0x56    ld s3,56(sp)          ; stack access
    0x8401425a     0x58    ld s4,48(sp)          ; stack access
    0x8401425c     0x5a    ld s5,40(sp)          ; stack access
    0x8401425e     0x5c    addi sp,sp,96
    0x84014260     0x5e    ret
    0x84014262     0x60    mv a1,s2
    0x84014264     0x62    jal ra,ffffffff840118ec <completeSignal>
    0x84014268     0x66    j ffffffff84014250 <receiveIPC+0x4e>
    0x8401426a     0x68    beqz a3,ffffffff840142ea <receiveIPC+0xe8>
    0x8401426c     0x6a    ld a4,280(s2)
    0x84014270     0x6e    srli a4,a4,0x27
    0x84014272     0x70    slli a4,a4,0x27
    0x84014274     0x72    lui a3,0xe0000
    0x84014278     0x76    srli a3,a3,0x19
    0x8401427a     0x78    and a5,a5,a3
    0x8401427c     0x7a    or a5,a5,a4
    0x8401427e     0x7c    ori a5,a5,3
    0x84014282     0x80    sd a5,280(s2)
    0x84014286     0x84    srli s0,s0,0x36
    0x84014288     0x86    andi s0,s0,8
    0x8401428a     0x88    ld a5,288(s2)
    0x8401428e     0x8c    andi a5,a5,-9
    0x84014290     0x8e    or s0,s0,a5
    0x84014292     0x90    sd s0,288(s2)
    0x84014296     0x94    mv a0,s2
    0x84014298     0x96    jal ra,ffffffff8401229c <scheduleTCB>
    0x8401429c     0x9a    ld a3,8(s1)
    0x8401429e     0x9c    ld a4,0(s1)
    0x840142a0     0x9e    lui a5,0xf8000
    0x840142a4     0xa2    srli a5,a5,0x19
    0x840142a6     0xa4    and a5,a5,a4
    0x840142a8     0xa6    slli a2,a4,0x19
    0x840142ac     0xaa    bgez a2,ffffffff840142b6 <receiveIPC+0xb4>
    0x840142b0     0xae    li a4,-1
    0x840142b2     0xb0    slli a4,a4,0x27
    0x840142b4     0xb2    or a5,a5,a4
    0x840142b6     0xb4    mv a2,a5
    0x840142b8     0xb6    mv a4,s2
    0x840142ba     0xb8    beqz a3,ffffffff840142c2 <receiveIPC+0xc0>
    0x840142bc     0xba    mv a4,a3
    0x840142be     0xbc    sd s2,408(a5) # fffffffff8000198 <ki_end+0x73fd2198>
    0x840142c2     0xc0    sd a2,416(s2)
    0x840142c6     0xc4    sd zero,408(s2)
    0x840142ca     0xc8    ld a5,0(s1)
    0x840142cc     0xca    sd a4,8(s1)
    0x840142ce     0xcc    lui a0,0xf8000
    0x840142d2     0xd0    srli a0,a0,0x19
    0x840142d4     0xd2    and s2,s2,a0
    0x840142d8     0xd6    srli a5,a5,0x27
    0x840142da     0xd8    slli a5,a5,0x27
    0x840142dc     0xda    or s2,s2,a5
    0x840142e0     0xde    ori s2,s2,2
    0x840142e4     0xe2    sd s2,0(s1)
    0x840142e8     0xe6    j ffffffff84014250 <receiveIPC+0x4e>
    0x840142ea     0xe8    sd zero,72(s2)
    0x840142ee     0xec    j ffffffff84014250 <receiveIPC+0x4e>
    0x840142f0     0xee    ld s3,8(s1)
    0x840142f4     0xf2    lui a2,0xf8000
    0x840142f8     0xf6    srli a2,a2,0x19
    0x840142fa     0xf8    and a2,a2,a4
    0x840142fc     0xfa    slli a5,a4,0x19
    0x84014300     0xfe    bgez a5,ffffffff8401430a <receiveIPC+0x108>
    0x84014304    0x102    li a5,-1
    0x84014306    0x104    slli a5,a5,0x27
    0x84014308    0x106    or a2,a2,a5
    0x8401430a    0x108    mv a1,s3
    0x8401430c    0x10a    mv a0,s3
    0x8401430e    0x10c    jal ra,ffffffff84012af8 <tcbEPDequeue>
    0x84014312    0x110    sd a0,16(sp)          ; stack access
    0x84014314    0x112    sd a1,24(sp)          ; stack access
    0x84014316    0x114    sd a0,8(s1)
    0x84014318    0x116    ld a5,0(s1)
    0x8401431a    0x118    li a4,-1
    0x8401431c    0x11a    slli a4,a4,0x27
    0x8401431e    0x11c    addi a4,a4,3
    0x84014320    0x11e    and a5,a5,a4
    0x84014322    0x120    lui a4,0xf8000
    0x84014326    0x124    srli a4,a4,0x19
    0x84014328    0x126    and a1,a1,a4
    0x8401432a    0x128    or a1,a1,a5
    0x8401432c    0x12a    beqz a0,ffffffff84014374 <receiveIPC+0x172>
    0x8401432e    0x12c    sd a1,0(s1)
    0x84014330    0x12e    ld s4,288(s3)
    0x84014334    0x132    srli s5,s4,0x3
    0x84014338    0x136    mv a4,s2
    0x8401433a    0x138    andi a3,s5,1
    0x8401433e    0x13c    ld a2,296(s3)
    0x84014342    0x140    mv a1,s1
    0x84014344    0x142    mv a0,s3
    0x84014346    0x144    jal ra,ffffffff84013d58 <doIPCTransfer>
    0x8401434a    0x148    ld a5,288(s3)
    0x8401434e    0x14c    srli a5,a5,0x1
    0x84014350    0x14e    andi a5,a5,1
    0x84014352    0x150    beqz a5,ffffffff84014384 <receiveIPC+0x182>
    0x84014354    0x152    srli s4,s4,0x2
    0x84014358    0x156    or s4,s4,s5
    0x8401435c    0x15a    andi s4,s4,1
    0x84014360    0x15e    beqz s4,ffffffff8401437a <receiveIPC+0x178>
    0x84014364    0x162    srli a2,s0,0x39
    0x84014368    0x166    andi a2,a2,1
    0x8401436a    0x168    mv a1,s2
    0x8401436c    0x16a    mv a0,s3
    0x8401436e    0x16c    jal ra,ffffffff84013a7e <setupCallerCap>
    0x84014372    0x170    j ffffffff84014250 <receiveIPC+0x4e>
    0x84014374    0x172    andi a1,a1,-4
    0x84014376    0x174    sd a1,0(s1)
    0x84014378    0x176    j ffffffff84014330 <receiveIPC+0x12e>
    0x8401437a    0x178    li a1,0
    0x8401437c    0x17a    mv a0,s3
    0x8401437e    0x17c    jal ra,ffffffff840122d0 <setThreadState>
    0x84014382    0x180    j ffffffff84014250 <receiveIPC+0x4e>
    0x84014384    0x182    li a1,1
    0x84014386    0x184    mv a0,s3
    0x84014388    0x186    jal ra,ffffffff840122d0 <setThreadState>
    0x8401438c    0x18a    mv a0,s3
    0x8401438e    0x18c    jal ra,ffffffff8401259a <possibleSwitchTo>
    0x84014392    0x190    j ffffffff84014250 <receiveIPC+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
153 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 228 nodes.

Section finaliseCap (261 of 267)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 149 instructions.

XOR.....
RVC_TFFFTT___FT___FT..

Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
31 stack accesses found. Annotated code for `finaliseCap`:

    0x84012dbe      0x0    addi sp,sp,-48
    0x84012dc0      0x2    sd ra,40(sp)          ; stack access
    0x84012dc2      0x4    sd s0,32(sp)          ; stack access
    0x84012dc4      0x6    sd s1,24(sp)          ; stack access
    0x84012dc6      0x8    sd s2,16(sp)          ; stack access
    0x84012dc8      0xa    mv s0,a0
    0x84012dca      0xc    sd a1,0(sp)           ; stack access
    0x84012dcc      0xe    sd a2,8(sp)           ; stack access
    0x84012dce     0x10    mv s1,a1
    0x84012dd0     0x12    slli a5,a1,0x4
    0x84012dd4     0x16    bltz a5,ffffffff84012df4 <finaliseCap+0x36>
    0x84012dd8     0x1a    srli a1,a1,0x3b
    0x84012dda     0x1c    li a5,20
    0x84012ddc     0x1e    bltu a5,a1,ffffffff84012e7c <finaliseCap+0xbe>
    0x84012de0     0x22    slli a2,a1,0x2
    0x84012de4     0x26    auipc a0,0x4
    0x84012de8     0x2a    addi a0,a0,1248 # ffffffff840172c4 <ksDomScheduleLength+0x214>
    0x84012dec     0x2e    add a2,a2,a0
    0x84012dee     0x30    lw a5,0(a2)
    0x84012df0     0x32    add a5,a5,a0
    0x84012df2     0x34    jr a5
    0x84012df4     0x36    jal ra,ffffffff84010c3c <Arch_finaliseCap>
    0x84012df8     0x3a    mv a0,s0
    0x84012dfa     0x3c    ld ra,40(sp)          ; stack access
    0x84012dfc     0x3e    ld s0,32(sp)          ; stack access
    0x84012dfe     0x40    ld s1,24(sp)          ; stack access
    0x84012e00     0x42    ld s2,16(sp)          ; stack access
    0x84012e02     0x44    addi sp,sp,48
    0x84012e04     0x46    ret
    0x84012e06     0x48    beqz a3,ffffffff84012e20 <finaliseCap+0x62>
    0x84012e08     0x4a    slli a0,s1,0x19
    0x84012e0c     0x4e    srli a0,a0,0x19
    0x84012e0e     0x50    slli a5,s1,0x19
    0x84012e12     0x54    bgez a5,ffffffff84012e1c <finaliseCap+0x5e>
    0x84012e16     0x58    li a5,-1
    0x84012e18     0x5a    slli a5,a5,0x27
    0x84012e1a     0x5c    or a0,a0,a5
    0x84012e1c     0x5e    jal ra,ffffffff840125de <cancelAllIPC>
    0x84012e20     0x62    sd zero,0(s0)
    0x84012e24     0x66    sd zero,8(s0)
    0x84012e28     0x6a    sd zero,16(s0)
    0x84012e2c     0x6e    sd zero,24(s0)
    0x84012e30     0x72    j ffffffff84012df8 <finaliseCap+0x3a>
    0x84012e32     0x74    beqz a3,ffffffff84012e58 <finaliseCap+0x9a>
    0x84012e34     0x76    slli s2,s1,0x19
    0x84012e38     0x7a    srli s2,s2,0x19
    0x84012e3c     0x7e    slli a5,s1,0x19
    0x84012e40     0x82    bgez a5,ffffffff84012e4c <finaliseCap+0x8e>
    0x84012e44     0x86    li a5,-1
    0x84012e46     0x88    slli a5,a5,0x27
    0x84012e48     0x8a    or s2,s2,a5
    0x84012e4c     0x8e    mv a0,s2
    0x84012e4e     0x90    jal ra,ffffffff8401190c <unbindMaybeNotification>
    0x84012e52     0x94    mv a0,s2
    0x84012e54     0x96    jal ra,ffffffff8401261c <cancelAllSignals>
    0x84012e58     0x9a    sd zero,0(s0)
    0x84012e5c     0x9e    sd zero,8(s0)
    0x84012e60     0xa2    sd zero,16(s0)
    0x84012e64     0xa6    sd zero,24(s0)
    0x84012e68     0xaa    j ffffffff84012df8 <finaliseCap+0x3a>
    0x84012e6a     0xac    sd zero,0(s0)
    0x84012e6e     0xb0    sd zero,8(s0)
    0x84012e72     0xb4    sd zero,16(s0)
    0x84012e76     0xb8    sd zero,24(s0)
    0x84012e7a     0xbc    j ffffffff84012df8 <finaliseCap+0x3a>
    0x84012e7c     0xbe    bnez a4,ffffffff84012eda <finaliseCap+0x11c>
    0x84012e7e     0xc0    ld s2,8(sp)           ; stack access
    0x84012e80     0xc2    li a5,16
    0x84012e82     0xc4    beq a1,a5,ffffffff84012f46 <finaliseCap+0x188>
    0x84012e86     0xc8    bltu a5,a1,ffffffff84012ede <finaliseCap+0x120>
    0x84012e8a     0xcc    li a5,10
    0x84012e8c     0xce    beq a1,a5,ffffffff84012ef4 <finaliseCap+0x136>
    0x84012e90     0xd2    li a5,12
    0x84012e92     0xd4    bne a1,a5,ffffffff84012f48 <finaliseCap+0x18a>
    0x84012e96     0xd8    beqz a3,ffffffff84012f48 <finaliseCap+0x18a>
    0x84012e98     0xda    slli s2,s1,0x19
    0x84012e9c     0xde    srli s2,s2,0x19
    0x84012ea0     0xe2    slli a5,s1,0x19
    0x84012ea4     0xe6    bgez a5,ffffffff84012eb0 <finaliseCap+0xf2>
    0x84012ea8     0xea    li a5,-1
    0x84012eaa     0xec    slli a5,a5,0x27
    0x84012eac     0xee    or s2,s2,a5
    0x84012eb0     0xf2    mv a0,s2
    0x84012eb2     0xf4    jal ra,ffffffff84011932 <unbindNotification>
    0x84012eb6     0xf8    mv a0,s2
    0x84012eb8     0xfa    jal ra,ffffffff84012d86 <suspend>
    0x84012ebc     0xfe    li a5,-7
    0x84012ebe    0x100    slli a5,a5,0x3c
    0x84012ec0    0x102    addi a5,a5,64 # ffffffffe0000040 <ki_end+0x5bfd2040>
    0x84012ec4    0x106    sd a5,0(s0)           ; stack access
    0x84012ec6    0x108    andi a5,s2,-1024
    0x84012eca    0x10c    xori a5,a5,5
    0x84012ece    0x110    sd a5,8(s0)           ; stack access
    0x84012ed0    0x112    sd zero,16(s0)        ; stack access
    0x84012ed4    0x116    sd zero,24(s0)        ; stack access
    0x84012ed8    0x11a    j ffffffff84012df8 <finaliseCap+0x3a>
    0x84012eda    0x11c    jal ra,ffffffff8401034a <halt>
    0x84012ede    0x120    li a5,18
    0x84012ee0    0x122    bne a1,a5,ffffffff84012f48 <finaliseCap+0x18a>
    0x84012ee4    0x126    sd s1,0(s0)           ; stack access
    0x84012ee6    0x128    sd s2,8(s0)           ; stack access
    0x84012eea    0x12c    sd zero,16(s0)        ; stack access
    0x84012eee    0x130    sd zero,24(s0)        ; stack access
    0x84012ef2    0x134    j ffffffff84012df8 <finaliseCap+0x3a>
    0x84012ef4    0x136    beqz a3,ffffffff84012f48 <finaliseCap+0x18a>
    0x84012ef6    0x138    srli a3,s1,0x2f
    0x84012efa    0x13c    andi a0,a3,63
    0x84012efe    0x140    mv a3,a0
    0x84012f00    0x142    li a2,1
    0x84012f02    0x144    sll a1,a2,a0
    0x84012f06    0x148    slli s1,s1,0x1
    0x84012f08    0x14a    lui a5,0xfc000
    0x84012f0c    0x14e    srli a5,a5,0x19
    0x84012f0e    0x150    and a4,s1,a5
    0x84012f12    0x154    slli a2,a2,0x26
    0x84012f14    0x156    and s1,s1,a2
    0x84012f16    0x158    beqz s1,ffffffff84012f1e <finaliseCap+0x160>
    0x84012f18    0x15a    li a5,-1
    0x84012f1a    0x15c    slli a5,a5,0x27
    0x84012f1c    0x15e    or a4,a4,a5
    0x84012f1e    0x160    li a5,-7
    0x84012f20    0x162    slli a5,a5,0x3c
    0x84012f22    0x164    or a5,a5,a0
    0x84012f24    0x166    sd a5,0(s0)           ; stack access
    0x84012f26    0x168    addiw a3,a3,1
    0x84012f28    0x16a    li a5,-1
    0x84012f2a    0x16c    sll a5,a5,a3
    0x84012f2e    0x170    not a5,a5
    0x84012f32    0x174    xor a3,a1,a4
    0x84012f36    0x178    and a5,a5,a3
    0x84012f38    0x17a    xor a5,a5,a4
    0x84012f3a    0x17c    sd a5,8(s0)           ; stack access
    0x84012f3c    0x17e    sd zero,16(s0)        ; stack access
    0x84012f40    0x182    sd zero,24(s0)        ; stack access
    0x84012f44    0x186    j ffffffff84012df8 <finaliseCap+0x3a>
    0x84012f46    0x188    bnez a3,ffffffff84012f5a <finaliseCap+0x19c>
    0x84012f48    0x18a    sd zero,0(s0)         ; stack access
    0x84012f4c    0x18e    sd zero,8(s0)         ; stack access
    0x84012f50    0x192    sd zero,16(s0)        ; stack access
    0x84012f54    0x196    sd zero,24(s0)        ; stack access
    0x84012f58    0x19a    j ffffffff84012df8 <finaliseCap+0x3a>
    0x84012f5a    0x19c    slli a0,s2,0x34
    0x84012f5e    0x1a0    srli a0,a0,0x34
    0x84012f60    0x1a2    jal ra,ffffffff840137a2 <deletingIRQHandler>
    0x84012f64    0x1a6    sd zero,0(s0)         ; stack access
    0x84012f68    0x1aa    sd zero,8(s0)         ; stack access
    0x84012f6c    0x1ae    sd s1,16(s0)          ; stack access
    0x84012f6e    0x1b0    sd s2,24(s0)          ; stack access
    0x84012f72    0x1b4    j ffffffff84012df8 <finaliseCap+0x3a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
149 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 237 nodes.

Section handleSyscall (262 of 267)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 103 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleSyscall`:

    0x840166f0      0x0    addi sp,sp,-16
    0x840166f2      0x2    sd ra,8(sp)           ; stack access
    0x840166f4      0x4    sd s0,0(sp)           ; stack access
    0x840166f6      0x6    addi a0,a0,8
    0x840166f8      0x8    li a5,7
    0x840166fa      0xa    bltu a5,a0,ffffffff84016834 <handleSyscall+0x144>
    0x840166fe      0xe    slli a0,a0,0x2
    0x84016700     0x10    auipc a4,0x1
    0x84016704     0x14    addi a4,a4,-744 # ffffffff84017418 <ksDomScheduleLength+0x368>
    0x84016708     0x18    add a0,a0,a4
    0x8401670a     0x1a    lw a5,0(a0)
    0x8401670c     0x1c    add a5,a5,a4
    0x8401670e     0x1e    jr a5
    0x84016710     0x20    li a1,1
    0x84016712     0x22    li a0,0
    0x84016714     0x24    jal ra,ffffffff840165da <handleInvocation>
    0x84016718     0x28    beqz a0,ffffffff840167ee <handleSyscall+0xfe>
    0x8401671a     0x2a    auipc a4,0x1
    0x8401671e     0x2e    lw a4,1262(a4) # ffffffff84017c08 <active_irq>
    0x84016722     0x32    addiw a3,a4,-1
    0x84016726     0x36    li a5,53
    0x8401672a     0x3a    bltu a5,a3,ffffffff8401673a <handleSyscall+0x4a>
    0x8401672e     0x3e    slli a0,a4,0x20
    0x84016732     0x42    srli a0,a0,0x20
    0x84016734     0x44    jal ra,ffffffff840138f8 <handleInterrupt>
    0x84016738     0x48    j ffffffff840167ee <handleSyscall+0xfe>
    0x8401673a     0x4a    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x8401673e     0x4e    sext.w a4,a0
    0x84016742     0x52    auipc a5,0x1
    0x84016746     0x56    sw a0,1222(a5) # ffffffff84017c08 <active_irq>
    0x8401674a     0x5a    addiw a5,a0,-1
    0x8401674e     0x5e    li a3,53
    0x84016752     0x62    bltu a3,a5,ffffffff840167ee <handleSyscall+0xfe>
    0x84016756     0x66    j ffffffff8401672e <handleSyscall+0x3e>
    0x84016758     0x68    li a1,0
    0x8401675a     0x6a    li a0,0
    0x8401675c     0x6c    jal ra,ffffffff840165da <handleInvocation>
    0x84016760     0x70    beqz a0,ffffffff840167ee <handleSyscall+0xfe>
    0x84016762     0x72    auipc a4,0x1
    0x84016766     0x76    lw a4,1190(a4) # ffffffff84017c08 <active_irq>
    0x8401676a     0x7a    addiw a3,a4,-1
    0x8401676e     0x7e    li a5,53
    0x84016772     0x82    bltu a5,a3,ffffffff84016782 <handleSyscall+0x92>
    0x84016776     0x86    slli a0,a4,0x20
    0x8401677a     0x8a    srli a0,a0,0x20
    0x8401677c     0x8c    jal ra,ffffffff840138f8 <handleInterrupt>
    0x84016780     0x90    j ffffffff840167ee <handleSyscall+0xfe>
    0x84016782     0x92    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84016786     0x96    sext.w a4,a0
    0x8401678a     0x9a    auipc a5,0x1
    0x8401678e     0x9e    sw a0,1150(a5) # ffffffff84017c08 <active_irq>
    0x84016792     0xa2    addiw a5,a0,-1
    0x84016796     0xa6    li a3,53
    0x8401679a     0xaa    bltu a3,a5,ffffffff840167ee <handleSyscall+0xfe>
    0x8401679e     0xae    j ffffffff84016776 <handleSyscall+0x86>
    0x840167a0     0xb0    li a1,1
    0x840167a2     0xb2    li a0,1
    0x840167a4     0xb4    jal ra,ffffffff840165da <handleInvocation>
    0x840167a8     0xb8    beqz a0,ffffffff840167ee <handleSyscall+0xfe>
    0x840167aa     0xba    auipc a4,0x1
    0x840167ae     0xbe    lw a4,1118(a4) # ffffffff84017c08 <active_irq>
    0x840167b2     0xc2    addiw a3,a4,-1
    0x840167b6     0xc6    li a5,53
    0x840167ba     0xca    bltu a5,a3,ffffffff840167ca <handleSyscall+0xda>
    0x840167be     0xce    slli a0,a4,0x20
    0x840167c2     0xd2    srli a0,a0,0x20
    0x840167c4     0xd4    jal ra,ffffffff840138f8 <handleInterrupt>
    0x840167c8     0xd8    j ffffffff840167ee <handleSyscall+0xfe>
    0x840167ca     0xda    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x840167ce     0xde    sext.w a4,a0
    0x840167d2     0xe2    auipc a5,0x1
    0x840167d6     0xe6    sw a0,1078(a5) # ffffffff84017c08 <active_irq>
    0x840167da     0xea    addiw a5,a0,-1
    0x840167de     0xee    li a3,53
    0x840167e2     0xf2    bltu a3,a5,ffffffff840167ee <handleSyscall+0xfe>
    0x840167e6     0xf6    j ffffffff840167be <handleSyscall+0xce>
    0x840167e8     0xf8    li a0,1
    0x840167ea     0xfa    jal ra,ffffffff84014394 <handleRecv>
    0x840167ee     0xfe    jal ra,ffffffff8401292a <schedule>
    0x840167f2    0x102    jal ra,ffffffff840123c0 <activateThread>
    0x840167f6    0x106    li a0,0
    0x840167f8    0x108    ld ra,8(sp)
    0x840167fa    0x10a    ld s0,0(sp)
    0x840167fc    0x10c    addi sp,sp,16
    0x840167fe    0x10e    ret
    0x84016800    0x110    jal ra,ffffffff84013e32 <handleReply>
    0x84016804    0x114    j ffffffff840167ee <handleSyscall+0xfe>
    0x84016806    0x116    jal ra,ffffffff84013e32 <handleReply>
    0x8401680a    0x11a    li a0,1
    0x8401680c    0x11c    jal ra,ffffffff84014394 <handleRecv>
    0x84016810    0x120    j ffffffff840167ee <handleSyscall+0xfe>
    0x84016812    0x122    li a0,0
    0x84016814    0x124    jal ra,ffffffff84014394 <handleRecv>
    0x84016818    0x128    j ffffffff840167ee <handleSyscall+0xfe>
    0x8401681a    0x12a    auipc s0,0x17
    0x8401681e    0x12e    addi s0,s0,638 # ffffffff8402da98 <ksCurThread>
    0x84016822    0x132    ld a0,0(s0)
    0x84016824    0x134    jal ra,ffffffff84012768 <tcbSchedDequeue>
    0x84016828    0x138    ld a0,0(s0)
    0x8401682a    0x13a    jal ra,ffffffff84012688 <tcbSchedAppend>
    0x8401682e    0x13e    jal ra,ffffffff8401226a <rescheduleRequired>
    0x84016832    0x142    j ffffffff840167ee <handleSyscall+0xfe>
    0x84016834    0x144    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 158 nodes.

Section decodeInvocation (263 of 267)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 164 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeInvocation`:

    0x84016422      0x0    addi sp,sp,-96
    0x84016424      0x2    sd ra,88(sp)          ; stack access
    0x84016426      0x4    sd s0,80(sp)          ; stack access
    0x84016428      0x6    sd s1,72(sp)          ; stack access
    0x8401642a      0x8    sd s2,64(sp)          ; stack access
    0x8401642c      0xa    sd s3,56(sp)          ; stack access
    0x8401642e      0xc    sd s4,48(sp)          ; stack access
    0x84016430      0xe    sd s5,40(sp)          ; stack access
    0x84016432     0x10    mv s3,a3
    0x84016434     0x12    sd a4,0(sp)           ; stack access
    0x84016436     0x14    sd a5,8(sp)           ; stack access
    0x84016438     0x16    mv s1,a4
    0x8401643a     0x18    mv s2,a5
    0x8401643c     0x1a    srli t1,a4,0x3b
    0x84016440     0x1e    andi s0,t1,1
    0x84016444     0x22    bnez s0,ffffffff84016464 <decodeInvocation+0x42>
    0x84016446     0x24    mv s5,a6
    0x84016448     0x26    mv s4,a7
    0x8401644a     0x28    li a5,20
    0x8401644c     0x2a    bltu a5,t1,ffffffff840165d6 <decodeInvocation+0x1b4>
    0x84016450     0x2e    slli t1,t1,0x2
    0x84016452     0x30    auipc a5,0x1
    0x84016456     0x34    addi a5,a5,-142 # ffffffff840173c4 <ksDomScheduleLength+0x314>
    0x8401645a     0x38    add t1,t1,a5
    0x8401645c     0x3a    lw a4,0(t1)
    0x84016460     0x3e    add a4,a4,a5
    0x84016462     0x40    jr a4
    0x84016464     0x42    ld a6,96(sp)          ; stack access
    0x84016466     0x44    jal ra,ffffffff8401573a <decodeRISCVMMUInvocation>
    0x8401646a     0x48    mv s0,a0
    0x8401646c     0x4a    mv a0,s0
    0x8401646e     0x4c    ld ra,88(sp)          ; stack access
    0x84016470     0x4e    ld s0,80(sp)          ; stack access
    0x84016472     0x50    ld s1,72(sp)          ; stack access
    0x84016474     0x52    ld s2,64(sp)          ; stack access
    0x84016476     0x54    ld s3,56(sp)          ; stack access
    0x84016478     0x56    ld s4,48(sp)          ; stack access
    0x8401647a     0x58    ld s5,40(sp)          ; stack access
    0x8401647c     0x5a    addi sp,sp,96
    0x8401647e     0x5c    ret
    0x84016480     0x5e    auipc a5,0x6
    0x84016484     0x62    addi a5,a5,1992 # ffffffff8401cc48 <current_syscall_error>
    0x84016488     0x66    li a4,2
    0x8401648a     0x68    sd a4,48(a5)
    0x8401648c     0x6a    sd zero,8(a5)
    0x84016490     0x6e    li s0,3
    0x84016492     0x70    j ffffffff8401646c <decodeInvocation+0x4a>
    0x84016494     0x72    auipc a5,0x6
    0x84016498     0x76    addi a5,a5,1972 # ffffffff8401cc48 <current_syscall_error>
    0x8401649c     0x7a    li a4,2
    0x8401649e     0x7c    sd a4,48(a5)
    0x840164a0     0x7e    sd zero,8(a5)
    0x840164a4     0x82    li s0,3
    0x840164a6     0x84    j ffffffff8401646c <decodeInvocation+0x4a>
    0x840164a8     0x86    slli a5,s1,0x8
    0x840164ac     0x8a    bgez a5,ffffffff840164ec <decodeInvocation+0xca>
    0x840164b0     0x8e    li a1,2
    0x840164b2     0x90    auipc a0,0x17
    0x840164b6     0x94    ld a0,1510(a0) # ffffffff8402da98 <ksCurThread>
    0x840164ba     0x98    jal ra,ffffffff840122d0 <setThreadState>
    0x840164be     0x9c    slli a0,s1,0x19
    0x840164c2     0xa0    srli a0,a0,0x19
    0x840164c4     0xa2    slli a5,s1,0x19
    0x840164c8     0xa6    bgez a5,ffffffff840164d2 <decodeInvocation+0xb0>
    0x840164cc     0xaa    li a5,-1
    0x840164ce     0xac    slli a5,a5,0x27
    0x840164d0     0xae    or a0,a0,a5
    0x840164d2     0xb0    srli a3,s1,0x3a
    0x840164d6     0xb4    srli a2,s1,0x39
    0x840164da     0xb8    mv a5,s4
    0x840164dc     0xba    mv a4,s5
    0x840164de     0xbc    andi a3,a3,1
    0x840164e0     0xbe    andi a2,a2,1
    0x840164e2     0xc0    mv a1,s2
    0x840164e4     0xc2    jal ra,ffffffff840141dc <performInvocation_Endpoint>
    0x840164e8     0xc6    mv s0,a0
    0x840164ea     0xc8    j ffffffff8401646c <decodeInvocation+0x4a>
    0x840164ec     0xca    auipc a5,0x6
    0x840164f0     0xce    addi a5,a5,1884 # ffffffff8401cc48 <current_syscall_error>
    0x840164f4     0xd2    li a4,2
    0x840164f6     0xd4    sd a4,48(a5)
    0x840164f8     0xd6    sd zero,8(a5)
    0x840164fc     0xda    li s0,3
    0x840164fe     0xdc    j ffffffff8401646c <decodeInvocation+0x4a>
    0x84016500     0xde    slli a5,s1,0x6
    0x84016504     0xe2    bgez a5,ffffffff84016532 <decodeInvocation+0x110>
    0x84016508     0xe6    li a1,2
    0x8401650a     0xe8    auipc a0,0x17
    0x8401650e     0xec    ld a0,1422(a0) # ffffffff8402da98 <ksCurThread>
    0x84016512     0xf0    jal ra,ffffffff840122d0 <setThreadState>
    0x84016516     0xf4    slli a0,s1,0x19
    0x8401651a     0xf8    srli a0,a0,0x19
    0x8401651c     0xfa    slli a5,s1,0x19
    0x84016520     0xfe    bgez a5,ffffffff8401652a <decodeInvocation+0x108>
    0x84016524    0x102    li a5,-1
    0x84016526    0x104    slli a5,a5,0x27
    0x84016528    0x106    or a0,a0,a5
    0x8401652a    0x108    mv a1,s2
    0x8401652c    0x10a    jal ra,ffffffff840137fc <sendSignal>
    0x84016530    0x10e    j ffffffff8401646c <decodeInvocation+0x4a>
    0x84016532    0x110    auipc a5,0x6
    0x84016536    0x114    addi a5,a5,1814 # ffffffff8401cc48 <current_syscall_error>
    0x8401653a    0x118    li a4,2
    0x8401653c    0x11a    sd a4,48(a5)
    0x8401653e    0x11c    sd zero,8(a5)
    0x84016542    0x120    li s0,3
    0x84016544    0x122    j ffffffff8401646c <decodeInvocation+0x4a>
    0x84016546    0x124    andi a5,s1,1
    0x8401654a    0x128    bnez a5,ffffffff8401656c <decodeInvocation+0x14a>
    0x8401654c    0x12a    li a1,2
    0x8401654e    0x12c    auipc a0,0x17
    0x84016552    0x130    ld a0,1354(a0) # ffffffff8402da98 <ksCurThread>
    0x84016556    0x134    jal ra,ffffffff840122d0 <setThreadState>
    0x8401655a    0x138    srli a2,s1,0x1
    0x8401655e    0x13c    andi a2,a2,1
    0x84016560    0x13e    mv a1,s3
    0x84016562    0x140    mv a0,s2
    0x84016564    0x142    jal ra,ffffffff84013e70 <performInvocation_Reply>
    0x84016568    0x146    mv s0,a0
    0x8401656a    0x148    j ffffffff8401646c <decodeInvocation+0x4a>
    0x8401656c    0x14a    auipc a5,0x6
    0x84016570    0x14e    addi a5,a5,1756 # ffffffff8401cc48 <current_syscall_error>
    0x84016574    0x152    li a4,2
    0x84016576    0x154    sd a4,48(a5)
    0x84016578    0x156    sd zero,8(a5)
    0x8401657c    0x15a    li s0,3
    0x8401657e    0x15c    j ffffffff8401646c <decodeInvocation+0x4a>
    0x84016580    0x15e    ld a6,96(sp)
    0x84016582    0x160    mv a5,a7
    0x84016584    0x162    mv a4,a3
    0x84016586    0x164    ld a2,0(sp)
    0x84016588    0x166    ld a3,8(sp)
    0x8401658a    0x168    jal ra,ffffffff84015376 <decodeTCBInvocation>
    0x8401658e    0x16c    mv s0,a0
    0x84016590    0x16e    j ffffffff8401646c <decodeInvocation+0x4a>
    0x84016592    0x170    ld a2,96(sp)
    0x84016594    0x172    jal ra,ffffffff84014500 <decodeDomainInvocation>
    0x84016598    0x176    mv s0,a0
    0x8401659a    0x178    j ffffffff8401646c <decodeInvocation+0x4a>
    0x8401659c    0x17a    ld a4,96(sp)
    0x8401659e    0x17c    ld a2,0(sp)
    0x840165a0    0x17e    ld a3,8(sp)
    0x840165a2    0x180    jal ra,ffffffff840131ce <decodeCNodeInvocation>
    0x840165a6    0x184    mv s0,a0
    0x840165a8    0x186    j ffffffff8401646c <decodeInvocation+0x4a>
    0x840165aa    0x188    ld a6,96(sp)
    0x840165ac    0x18a    mv a5,a7
    0x840165ae    0x18c    ld a3,0(sp)
    0x840165b0    0x18e    ld a4,8(sp)
    0x840165b2    0x190    mv a2,s3
    0x840165b4    0x192    jal ra,ffffffff84016146 <decodeUntypedInvocation>
    0x840165b8    0x196    mv s0,a0
    0x840165ba    0x198    j ffffffff8401646c <decodeInvocation+0x4a>
    0x840165bc    0x19a    ld a3,96(sp)
    0x840165be    0x19c    mv a2,s3
    0x840165c0    0x19e    jal ra,ffffffff840123fc <decodeIRQControlInvocation>
    0x840165c4    0x1a2    mv s0,a0
    0x840165c6    0x1a4    j ffffffff8401646c <decodeInvocation+0x4a>
    0x840165c8    0x1a6    slli a1,s2,0x34
    0x840165cc    0x1aa    srli a1,a1,0x34
    0x840165ce    0x1ac    jal ra,ffffffff840136d2 <decodeIRQHandlerInvocation>
    0x840165d2    0x1b0    mv s0,a0
    0x840165d4    0x1b2    j ffffffff8401646c <decodeInvocation+0x4a>
    0x840165d6    0x1b4    jal ra,ffffffff8401034a <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
164 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 236 nodes.

Section decodeRISCVMMUInvocation (264 of 267)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 776 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

60 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x8401573a      0x0    addi sp,sp,-208
    0x8401573c      0x2    sd ra,200(sp)         ; stack access
    0x8401573e      0x4    sd s0,192(sp)         ; stack access
    0x84015740      0x6    sd s1,184(sp)         ; stack access
    0x84015742      0x8    sd s2,176(sp)         ; stack access
    0x84015744      0xa    sd s3,168(sp)         ; stack access
    0x84015746      0xc    sd s4,160(sp)         ; stack access
    0x84015748      0xe    sd s5,152(sp)         ; stack access
    0x8401574a     0x10    sd s6,144(sp)         ; stack access
    0x8401574c     0x12    sd s7,136(sp)         ; stack access
    0x8401574e     0x14    sd s8,128(sp)         ; stack access
    0x84015750     0x16    sd s9,120(sp)         ; stack access
    0x84015752     0x18    sd s10,112(sp)        ; stack access
    0x84015754     0x1a    sd s11,104(sp)        ; stack access
    0x84015756     0x1c    sd a4,0(sp)           ; stack access
    0x84015758     0x1e    sd a5,8(sp)           ; stack access
    0x8401575a     0x20    srli s0,a4,0x3b
    0x8401575e     0x24    li a5,11
    0x84015760     0x26    beq s0,a5,ffffffff84015d46 <decodeRISCVMMUInvocation+0x60c>
    0x84015764     0x2a    mv s2,a3
    0x84015766     0x2c    mv s1,a4
    0x84015768     0x2e    bltu a5,s0,ffffffff840158a4 <decodeRISCVMMUInvocation+0x16a>
    0x8401576c     0x32    li a5,1
    0x8401576e     0x34    beq s0,a5,ffffffff84015a26 <decodeRISCVMMUInvocation+0x2ec>
    0x84015772     0x38    li a5,3
    0x84015774     0x3a    bne s0,a5,ffffffff84015fc4 <decodeRISCVMMUInvocation+0x88a>
    0x84015778     0x3e    ld a5,0(sp)           ; stack access
    0x8401577a     0x40    sd a5,16(sp)          ; stack access
    0x8401577c     0x42    ld s3,8(sp)           ; stack access
    0x8401577e     0x44    sd s3,24(sp)          ; stack access
    0x84015780     0x46    li a5,31
    0x84015782     0x48    beq a0,a5,ffffffff8401592e <decodeRISCVMMUInvocation+0x1f4>
    0x84015786     0x4c    li a5,30
    0x84015788     0x4e    bne a0,a5,ffffffff840159a0 <decodeRISCVMMUInvocation+0x266>
    0x8401578c     0x52    li a5,1
    0x8401578e     0x54    bgeu a5,a1,ffffffff840159ac <decodeRISCVMMUInvocation+0x272>
    0x84015792     0x58    auipc a5,0x7
    0x84015796     0x5c    ld a5,1262(a5) # ffffffff8401cc80 <current_extra_caps>
    0x8401579a     0x60    beqz a5,ffffffff840159ac <decodeRISCVMMUInvocation+0x272>
    0x8401579e     0x64    slli a4,a4,0x18
    0x840157a0     0x66    bltz a4,ffffffff840159b8 <decodeRISCVMMUInvocation+0x27e>
    0x840157a4     0x6a    ld a4,0(a5)
    0x840157a6     0x6c    srli s5,a4,0x3b
    0x840157aa     0x70    li a3,3
    0x840157ac     0x72    bne s5,a3,ffffffff840159ca <decodeRISCVMMUInvocation+0x290>
    0x840157b0     0x76    slli a3,a4,0x18
    0x840157b4     0x7a    bgez a3,ffffffff840159ca <decodeRISCVMMUInvocation+0x290>
    0x840157b8     0x7e    ld s9,8(a5)
    0x840157bc     0x82    srli a5,s9,0x9
    0x840157c0     0x86    slli a0,a5,0x19
    0x840157c4     0x8a    srli a0,a0,0x19
    0x840157c6     0x8c    slli a4,a5,0x19
    0x840157ca     0x90    bgez a4,ffffffff840157d4 <decodeRISCVMMUInvocation+0x9a>
    0x840157ce     0x94    li a5,-1
    0x840157d0     0x96    slli a5,a5,0x27
    0x840157d2     0x98    or a0,a0,a5
    0x840157d4     0x9a    auipc a5,0x18
    0x840157d8     0x9e    ld a5,708(a5) # ffffffff8402da98 <ksCurThread>
    0x840157dc     0xa2    ld s8,88(a5)
    0x840157e0     0xa6    mv s0,a0
    0x840157e2     0xa8    srli a0,s9,0x30
    0x840157e6     0xac    lui a5,0xfefff
    0x840157ea     0xb0    slli a5,a5,0xe
    0x840157ec     0xb2    srli a5,a5,0x1a
    0x840157ee     0xb4    bltu a5,s8,ffffffff840159dc <decodeRISCVMMUInvocation+0x2a2>
    0x840157f2     0xb8    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x840157f6     0xbc    sd a0,64(sp)          ; stack access
    0x840157f8     0xbe    sd a1,72(sp)          ; stack access
    0x840157fa     0xc0    bnez a0,ffffffff840159f0 <decodeRISCVMMUInvocation+0x2b6>
    0x840157fe     0xc4    ld a5,72(sp)          ; stack access
    0x84015800     0xc6    bne s0,a5,ffffffff84015a04 <decodeRISCVMMUInvocation+0x2ca>
    0x84015804     0xca    mv a1,s8
    0x84015806     0xcc    mv a0,s0
    0x84015808     0xce    jal ra,ffffffff840106c6 <lookupPTSlot>
    0x8401580c     0xd2    mv s6,a0
    0x8401580e     0xd4    mv s4,a1
    0x84015810     0xd6    sd a0,48(sp)          ; stack access
    0x84015812     0xd8    sd a1,56(sp)          ; stack access
    0x84015814     0xda    li a5,12
    0x84015816     0xdc    beq a1,a5,ffffffff84015a18 <decodeRISCVMMUInvocation+0x2de>
    0x8401581a     0xe0    ld s0,0(a0)
    0x8401581c     0xe2    andi s0,s0,1
    0x8401581e     0xe4    bnez s0,ffffffff84015a18 <decodeRISCVMMUInvocation+0x2de>
    0x84015822     0xe8    srli a5,s3,0x9
    0x84015826     0xec    slli s5,a5,0x19
    0x8401582a     0xf0    srli s5,s5,0x19
    0x8401582e     0xf4    slli a4,a5,0x19
    0x84015832     0xf8    bgez a4,ffffffff8401583e <decodeRISCVMMUInvocation+0x104>
    0x84015836     0xfc    li a5,-1
    0x84015838     0xfe    slli a5,a5,0x27
    0x8401583a    0x100    or s5,s5,a5
    0x8401583e    0x104    li s7,-1
    0x84015840    0x106    srli a5,s7,0x10
    0x84015844    0x10a    and s3,s3,a5
    0x84015848    0x10e    slli a5,s7,0x30
    0x8401584c    0x112    and s9,s9,a5
    0x84015850    0x116    or s3,s3,s9
    0x84015854    0x11a    li a1,2
    0x84015856    0x11c    auipc a0,0x18
    0x8401585a    0x120    ld a0,578(a0) # ffffffff8402da98 <ksCurThread>
    0x8401585e    0x124    jal ra,ffffffff840122d0 <setThreadState>
    0x84015862    0x128    li a4,1
    0x84015864    0x12a    sll a5,a4,s4
    0x84015868    0x12e    neg a5,a5
    0x8401586c    0x132    and a5,a5,s8
    0x84015870    0x136    slli s7,s7,0x28
    0x84015872    0x138    and s1,s1,s7
    0x84015876    0x13c    or a5,a5,s1
    0x84015878    0x13e    slli a3,a4,0x27
    0x8401587c    0x142    or a5,a5,a3
    0x8401587e    0x144    sd a5,0(s2)
    0x84015882    0x148    sd s3,8(s2)
    0x84015886    0x14c    slli a5,a4,0x26
    0x8401588a    0x150    add a5,a5,s5
    0x8401588c    0x152    srli a5,a5,0x2
    0x8401588e    0x154    lui a4,0xfff00
    0x84015892    0x158    srli a4,a4,0xa
    0x84015894    0x15a    and a5,a5,a4
    0x84015896    0x15c    ori a5,a5,193
    0x8401589a    0x160    sd a5,0(s6)
    0x8401589e    0x164    sfence.vma
    0x840158a2    0x168    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x840158a4    0x16a    li a5,13
    0x840158a6    0x16c    bne s0,a5,ffffffff84015fc4 <decodeRISCVMMUInvocation+0x88a>
    0x840158aa    0x170    li a5,36
    0x840158ae    0x174    bne a0,a5,ffffffff84015ee0 <decodeRISCVMMUInvocation+0x7a6>
    0x840158b2    0x178    auipc s3,0x7
    0x840158b6    0x17c    ld s3,974(s3) # ffffffff8401cc80 <current_extra_caps>
    0x840158ba    0x180    beqz s3,ffffffff84015eee <decodeRISCVMMUInvocation+0x7b4>
    0x840158be    0x184    ld s2,0(s3)
    0x840158c2    0x188    srli s0,s2,0x3b
    0x840158c6    0x18c    li a5,3
    0x840158c8    0x18e    bne s0,a5,ffffffff84015efc <decodeRISCVMMUInvocation+0x7c2>
    0x840158cc    0x192    srli s2,s2,0x27
    0x840158d0    0x196    andi s2,s2,1
    0x840158d4    0x19a    bnez s2,ffffffff84015efc <decodeRISCVMMUInvocation+0x7c2>
    0x840158d8    0x19e    srli a3,a4,0x2b
    0x840158dc    0x1a2    slli a3,a3,0x30
    0x840158de    0x1a4    srli a3,a3,0x30
    0x840158e0    0x1a6    srli a5,a3,0x9
    0x840158e4    0x1aa    slli a4,a5,0x3
    0x840158e8    0x1ae    auipc a5,0x6
    0x840158ec    0x1b2    addi a5,a5,-192 # ffffffff8401b828 <riscvKSASIDTable>
    0x840158f0    0x1b6    add a5,a5,a4
    0x840158f2    0x1b8    ld s4,0(a5)
    0x840158f6    0x1bc    beqz s4,ffffffff84015f10 <decodeRISCVMMUInvocation+0x7d6>
    0x840158fa    0x1c0    slli s1,s1,0x2
    0x840158fc    0x1c2    lui a1,0xf8000
    0x84015900    0x1c6    srli a1,a1,0x19
    0x84015902    0x1c8    and a1,a1,s1
    0x84015904    0x1ca    slli a5,s1,0x19
    0x84015908    0x1ce    bgez a5,ffffffff84015912 <decodeRISCVMMUInvocation+0x1d8>
    0x8401590c    0x1d2    li a5,-1
    0x8401590e    0x1d4    slli a5,a5,0x27
    0x84015910    0x1d6    or a1,a1,a5
    0x84015912    0x1d8    mv a5,s2
    0x84015914    0x1da    li a2,512
    0x84015918    0x1de    beq s4,a1,ffffffff84015f38 <decodeRISCVMMUInvocation+0x7fe>
    0x8401591c    0x1e2    auipc a5,0x7
    0x84015920    0x1e6    addi a5,a5,812 # ffffffff8401cc48 <current_syscall_error>
    0x84015924    0x1ea    li a4,2
    0x84015926    0x1ec    sd a4,48(a5)
    0x84015928    0x1ee    sd zero,8(a5)
    0x8401592c    0x1f2    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x8401592e    0x1f4    mv a0,a3
    0x84015930    0x1f6    jal ra,ffffffff84011e78 <isFinalCapability>
    0x84015934    0x1fa    beqz a0,ffffffff84015982 <decodeRISCVMMUInvocation+0x248>
    0x84015936    0x1fc    slli a5,s1,0x18
    0x8401593a    0x200    bgez a5,ffffffff84015966 <decodeRISCVMMUInvocation+0x22c>
    0x8401593e    0x204    srli a0,s3,0x30
    0x84015942    0x208    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015946    0x20c    sd a0,64(sp)          ; stack access
    0x84015948    0x20e    sd a1,72(sp)          ; stack access
    0x8401594a    0x210    srli a4,s3,0x9
    0x8401594e    0x214    slli a5,a4,0x19
    0x84015952    0x218    srli a5,a5,0x19
    0x84015954    0x21a    slli a3,a4,0x19
    0x84015958    0x21e    bgez a3,ffffffff84015962 <decodeRISCVMMUInvocation+0x228>
    0x8401595c    0x222    li a4,-1
    0x8401595e    0x224    slli a4,a4,0x27
    0x84015960    0x226    or a5,a5,a4
    0x84015962    0x228    ld a4,64(sp)          ; stack access
    0x84015964    0x22a    beqz a4,ffffffff8401598e <decodeRISCVMMUInvocation+0x254>
    0x84015966    0x22c    li a1,2
    0x84015968    0x22e    auipc a0,0x18
    0x8401596c    0x232    ld a0,304(a0) # ffffffff8402da98 <ksCurThread>
    0x84015970    0x236    jal ra,ffffffff840122d0 <setThreadState>
    0x84015974    0x23a    mv a2,s2
    0x84015976    0x23c    mv a0,s1
    0x84015978    0x23e    mv a1,s3
    0x8401597a    0x240    jal ra,ffffffff840156ca <performPageTableInvocationUnmap>
    0x8401597e    0x244    mv s0,a0
    0x84015980    0x246    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015982    0x248    li a5,9
    0x84015984    0x24a    auipc a4,0x7
    0x84015988    0x24e    sd a5,756(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401598c    0x252    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x8401598e    0x254    ld a4,72(sp)          ; stack access
    0x84015990    0x256    bne a4,a5,ffffffff84015966 <decodeRISCVMMUInvocation+0x22c>
    0x84015994    0x25a    li a5,9
    0x84015996    0x25c    auipc a4,0x7
    0x8401599a    0x260    sd a5,738(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401599e    0x264    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x840159a0    0x266    li a5,3
    0x840159a2    0x268    auipc a4,0x7
    0x840159a6    0x26c    sd a5,726(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840159aa    0x270    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x840159ac    0x272    li a5,7
    0x840159ae    0x274    auipc a4,0x7
    0x840159b2    0x278    sd a5,714(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840159b6    0x27c    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x840159b8    0x27e    auipc a5,0x7
    0x840159bc    0x282    addi a5,a5,656 # ffffffff8401cc48 <current_syscall_error>
    0x840159c0    0x286    li a4,2
    0x840159c2    0x288    sd a4,48(a5)
    0x840159c4    0x28a    sd zero,8(a5)
    0x840159c8    0x28e    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x840159ca    0x290    auipc a5,0x7
    0x840159ce    0x294    addi a5,a5,638 # ffffffff8401cc48 <current_syscall_error>
    0x840159d2    0x298    li a4,2
    0x840159d4    0x29a    sd a4,48(a5)
    0x840159d6    0x29c    li a4,1
    0x840159d8    0x29e    sd a4,8(a5)
    0x840159da    0x2a0    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x840159dc    0x2a2    auipc a5,0x7
    0x840159e0    0x2a6    addi a5,a5,620 # ffffffff8401cc48 <current_syscall_error>
    0x840159e4    0x2aa    li a4,1
    0x840159e6    0x2ac    sd a4,48(a5)
    0x840159e8    0x2ae    sd zero,0(a5)
    0x840159ec    0x2b2    mv s0,s5
    0x840159ee    0x2b4    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x840159f0    0x2b6    auipc a5,0x7
    0x840159f4    0x2ba    addi a5,a5,600 # ffffffff8401cc48 <current_syscall_error>
    0x840159f8    0x2be    li a4,6
    0x840159fa    0x2c0    sd a4,48(a5)
    0x840159fc    0x2c2    sd zero,40(a5)
    0x84015a00    0x2c6    mv s0,s5
    0x84015a02    0x2c8    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015a04    0x2ca    auipc a5,0x7
    0x84015a08    0x2ce    addi a5,a5,580 # ffffffff8401cc48 <current_syscall_error>
    0x84015a0c    0x2d2    li a4,2
    0x84015a0e    0x2d4    sd a4,48(a5)
    0x84015a10    0x2d6    li a4,1
    0x84015a12    0x2d8    sd a4,8(a5)
    0x84015a14    0x2da    mv s0,s5
    0x84015a16    0x2dc    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015a18    0x2de    li a5,8
    0x84015a1a    0x2e0    auipc a4,0x7
    0x84015a1e    0x2e4    sd a5,606(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015a22    0x2e8    mv s0,s5
    0x84015a24    0x2ea    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015a26    0x2ec    ld a5,0(sp)           ; stack access
    0x84015a28    0x2ee    sd a5,32(sp)          ; stack access
    0x84015a2a    0x2f0    ld s4,8(sp)           ; stack access
    0x84015a2c    0x2f2    sd s4,40(sp)          ; stack access
    0x84015a2e    0x2f4    li a5,33
    0x84015a32    0x2f8    beq a0,a5,ffffffff84015cec <decodeRISCVMMUInvocation+0x5b2>
    0x84015a36    0x2fc    li a5,34
    0x84015a3a    0x300    beq a0,a5,ffffffff84015d08 <decodeRISCVMMUInvocation+0x5ce>
    0x84015a3e    0x304    li a5,32
    0x84015a42    0x308    beq a0,a5,ffffffff84015a54 <decodeRISCVMMUInvocation+0x31a>
    0x84015a46    0x30c    li a5,3
    0x84015a48    0x30e    auipc a4,0x7
    0x84015a4c    0x312    sd a5,560(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015a50    0x316    li s0,3
    0x84015a52    0x318    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015a54    0x31a    li a5,2
    0x84015a56    0x31c    bgeu a5,a1,ffffffff84015adc <decodeRISCVMMUInvocation+0x3a2>
    0x84015a5a    0x320    auipc a5,0x7
    0x84015a5e    0x324    ld a5,550(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84015a62    0x328    beqz a5,ffffffff84015adc <decodeRISCVMMUInvocation+0x3a2>
    0x84015a64    0x32a    ld a4,0(a5)
    0x84015a66    0x32c    srli s9,a4,0x3b
    0x84015a6a    0x330    li a3,3
    0x84015a6c    0x332    bne s9,a3,ffffffff84015aea <decodeRISCVMMUInvocation+0x3b0>
    0x84015a70    0x336    slli a3,a4,0x18
    0x84015a74    0x33a    bgez a3,ffffffff84015aea <decodeRISCVMMUInvocation+0x3b0>
    0x84015a78    0x33e    ld s5,8(a5)
    0x84015a7c    0x342    srli a5,s5,0x9
    0x84015a80    0x346    slli a0,a5,0x19
    0x84015a84    0x34a    srli a0,a0,0x19
    0x84015a86    0x34c    slli a4,a5,0x19
    0x84015a8a    0x350    bgez a4,ffffffff84015a94 <decodeRISCVMMUInvocation+0x35a>
    0x84015a8e    0x354    li a5,-1
    0x84015a90    0x356    slli a5,a5,0x27
    0x84015a92    0x358    or a0,a0,a5
    0x84015a94    0x35a    auipc a5,0x18
    0x84015a98    0x35e    ld a5,4(a5) # ffffffff8402da98 <ksCurThread>
    0x84015a9c    0x362    ld s8,88(a5)
    0x84015aa0    0x366    ld s10,96(a5)
    0x84015aa4    0x36a    ld s7,104(a5)
    0x84015aa8    0x36e    mv s3,a0
    0x84015aaa    0x370    srli s11,s5,0x30
    0x84015aae    0x374    mv a0,s11
    0x84015ab0    0x376    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015ab4    0x37a    mv s6,a0
    0x84015ab6    0x37c    sd a0,48(sp)          ; stack access
    0x84015ab8    0x37e    sd a1,56(sp)          ; stack access
    0x84015aba    0x380    mv s0,a0
    0x84015abc    0x382    bnez a0,ffffffff84015afe <decodeRISCVMMUInvocation+0x3c4>
    0x84015abe    0x384    ld a5,56(sp)          ; stack access
    0x84015ac0    0x386    bne s3,a5,ffffffff84015b12 <decodeRISCVMMUInvocation+0x3d8>
    0x84015ac4    0x38a    srli a5,s1,0x39
    0x84015ac8    0x38e    andi a5,a5,3
    0x84015aca    0x390    li a4,1
    0x84015acc    0x392    beq a5,a4,ffffffff84015fc8 <decodeRISCVMMUInvocation+0x88e>
    0x84015ad0    0x396    li a4,2
    0x84015ad2    0x398    beq a5,a4,ffffffff84015ff8 <decodeRISCVMMUInvocation+0x8be>
    0x84015ad6    0x39c    beqz a5,ffffffff84015b26 <decodeRISCVMMUInvocation+0x3ec>
    0x84015ad8    0x39e    jal ra,ffffffff8401034a <halt>
    0x84015adc    0x3a2    li a5,7
    0x84015ade    0x3a4    auipc a4,0x7
    0x84015ae2    0x3a8    sd a5,410(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015ae6    0x3ac    li s0,3
    0x84015ae8    0x3ae    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015aea    0x3b0    auipc a5,0x7
    0x84015aee    0x3b4    addi a5,a5,350 # ffffffff8401cc48 <current_syscall_error>
    0x84015af2    0x3b8    li a4,2
    0x84015af4    0x3ba    sd a4,48(a5)
    0x84015af6    0x3bc    li a4,1
    0x84015af8    0x3be    sd a4,8(a5)
    0x84015afa    0x3c0    li s0,3
    0x84015afc    0x3c2    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015afe    0x3c4    auipc a5,0x7
    0x84015b02    0x3c8    addi a5,a5,330 # ffffffff8401cc48 <current_syscall_error>
    0x84015b06    0x3cc    li a4,6
    0x84015b08    0x3ce    sd a4,48(a5)
    0x84015b0a    0x3d0    sd zero,40(a5)
    0x84015b0e    0x3d4    mv s0,s9
    0x84015b10    0x3d6    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015b12    0x3d8    auipc a5,0x7
    0x84015b16    0x3dc    addi a5,a5,310 # ffffffff8401cc48 <current_syscall_error>
    0x84015b1a    0x3e0    li a4,2
    0x84015b1c    0x3e2    sd a4,48(a5)
    0x84015b1e    0x3e4    li a4,1
    0x84015b20    0x3e6    sd a4,8(a5)
    0x84015b22    0x3e8    mv s0,s9
    0x84015b24    0x3ea    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015b26    0x3ec    lui a4,0x1
    0x84015b28    0x3ee    addi a4,a4,-1
    0x84015b2a    0x3f0    add a4,a4,s8
    0x84015b2c    0x3f2    lui a5,0xfefff
    0x84015b30    0x3f6    slli a5,a5,0xe
    0x84015b32    0x3f8    srli a5,a5,0x1a
    0x84015b34    0x3fa    bltu a5,a4,ffffffff84015c16 <decodeRISCVMMUInvocation+0x4dc>
    0x84015b38    0x3fe    slli a5,s8,0x34
    0x84015b3c    0x402    bnez a5,ffffffff84015c2a <decodeRISCVMMUInvocation+0x4f0>
    0x84015b3e    0x404    mv a1,s8
    0x84015b40    0x406    mv a0,s3
    0x84015b42    0x408    jal ra,ffffffff840106c6 <lookupPTSlot>
    0x84015b46    0x40c    mv s3,a0
    0x84015b48    0x40e    mv a5,a1
    0x84015b4a    0x410    sd a0,64(sp)          ; stack access
    0x84015b4c    0x412    sd a1,72(sp)          ; stack access
    0x84015b4e    0x414    li a4,12
    0x84015b50    0x416    bne a5,a4,ffffffff84015c38 <decodeRISCVMMUInvocation+0x4fe>
    0x84015b54    0x41a    srli a5,s4,0x30
    0x84015b58    0x41e    bnez a5,ffffffff84015c64 <decodeRISCVMMUInvocation+0x52a>
    0x84015b5c    0x422    ld a5,0(s3)
    0x84015b60    0x426    andi a5,a5,1
    0x84015b62    0x428    bnez a5,ffffffff84015cd6 <decodeRISCVMMUInvocation+0x59c>
    0x84015b66    0x42c    srli a0,s1,0x37
    0x84015b6a    0x430    mv a1,s10
    0x84015b6c    0x432    andi a0,a0,3
    0x84015b6e    0x434    jal ra,ffffffff84010a8e <maskVMRights>
    0x84015b72    0x438    srli a4,s4,0x9
    0x84015b76    0x43c    slli a5,a4,0x19
    0x84015b7a    0x440    srli a5,a5,0x19
    0x84015b7c    0x442    slli a3,a4,0x19
    0x84015b80    0x446    bgez a3,ffffffff84015b8a <decodeRISCVMMUInvocation+0x450>
    0x84015b84    0x44a    li a4,-1
    0x84015b86    0x44c    slli a4,a4,0x27
    0x84015b88    0x44e    or a5,a5,a4
    0x84015b8a    0x450    li a4,1
    0x84015b8c    0x452    slli a4,a4,0x26
    0x84015b8e    0x454    add a5,a5,a4
    0x84015b90    0x456    li a4,-1
    0x84015b92    0x458    srli a3,a4,0x10
    0x84015b96    0x45c    and s4,s4,a3
    0x84015b9a    0x460    slli a3,a4,0x30
    0x84015b9e    0x464    and s5,s5,a3
    0x84015ba2    0x468    or s4,s4,s5
    0x84015ba6    0x46c    slli s5,a4,0x27
    0x84015baa    0x470    and s1,s1,s5
    0x84015bae    0x474    srli a4,a4,0x19
    0x84015bb0    0x476    and s8,s8,a4
    0x84015bb4    0x47a    or s8,s1,s8
    0x84015bb8    0x47e    andi s7,s7,1
    0x84015bbc    0x482    xori a1,s7,1
    0x84015bc0    0x486    addi a4,a0,-3
    0x84015bc4    0x48a    seqz a4,a4
    0x84015bc8    0x48e    addi a3,a0,-1
    0x84015bcc    0x492    snez a2,a3
    0x84015bd0    0x496    bnez a3,ffffffff84015bd6 <decodeRISCVMMUInvocation+0x49c>
    0x84015bd2    0x498    beqz a4,ffffffff84015ce4 <decodeRISCVMMUInvocation+0x5aa>
    0x84015bd6    0x49c    srli s1,a5,0x2
    0x84015bda    0x4a0    lui a5,0xfff00
    0x84015bde    0x4a4    srli a5,a5,0xa
    0x84015be0    0x4a6    and s1,s1,a5
    0x84015be2    0x4a8    slli a5,a1,0x3
    0x84015be6    0x4ac    or s1,s1,a5
    0x84015be8    0x4ae    slli a4,a4,0x2
    0x84015bea    0x4b0    or s1,s1,a4
    0x84015bec    0x4b2    slli a5,a2,0x1
    0x84015bf0    0x4b6    or s1,s1,a5
    0x84015bf2    0x4b8    ori s1,s1,209
    0x84015bf6    0x4bc    li a1,2
    0x84015bf8    0x4be    auipc a0,0x18
    0x84015bfc    0x4c2    ld a0,-352(a0) # ffffffff8402da98 <ksCurThread>
    0x84015c00    0x4c6    jal ra,ffffffff840122d0 <setThreadState>
    0x84015c04    0x4ca    sd s8,0(s2)
    0x84015c08    0x4ce    sd s4,8(s2)
    0x84015c0c    0x4d2    sd s1,0(s3)
    0x84015c10    0x4d6    sfence.vma
    0x84015c14    0x4da    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015c16    0x4dc    auipc a5,0x7
    0x84015c1a    0x4e0    addi a5,a5,50 # ffffffff8401cc48 <current_syscall_error>
    0x84015c1e    0x4e4    li a4,1
    0x84015c20    0x4e6    sd a4,48(a5)
    0x84015c22    0x4e8    sd zero,0(a5)
    0x84015c26    0x4ec    mv s0,s9
    0x84015c28    0x4ee    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015c2a    0x4f0    li a5,5
    0x84015c2c    0x4f2    auipc a4,0x7
    0x84015c30    0x4f6    sd a5,76(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015c34    0x4fa    mv s0,s9
    0x84015c36    0x4fc    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015c38    0x4fe    auipc a4,0x7
    0x84015c3c    0x502    addi a4,a4,-8 # ffffffff8401cc30 <current_lookup_fault>
    0x84015c40    0x506    slli a5,a5,0x2
    0x84015c42    0x508    andi a5,a5,508
    0x84015c46    0x50c    ori a5,a5,1
    0x84015c4a    0x510    sd a5,0(a4)
    0x84015c4c    0x512    sd zero,8(a4)
    0x84015c50    0x516    auipc a5,0x7
    0x84015c54    0x51a    addi a5,a5,-8 # ffffffff8401cc48 <current_syscall_error>
    0x84015c58    0x51e    li a4,6
    0x84015c5a    0x520    sd a4,48(a5)
    0x84015c5c    0x522    sd zero,40(a5)
    0x84015c60    0x526    mv s0,s9
    0x84015c62    0x528    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015c64    0x52a    beq s11,a5,ffffffff84015c7c <decodeRISCVMMUInvocation+0x542>
    0x84015c68    0x52e    auipc a5,0x7
    0x84015c6c    0x532    addi a5,a5,-32 # ffffffff8401cc48 <current_syscall_error>
    0x84015c70    0x536    li a4,2
    0x84015c72    0x538    sd a4,48(a5)
    0x84015c74    0x53a    li a4,1
    0x84015c76    0x53c    sd a4,8(a5)
    0x84015c78    0x53e    mv s0,s9
    0x84015c7a    0x540    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015c7c    0x542    slli a5,s1,0x19
    0x84015c80    0x546    srli a5,a5,0x19
    0x84015c82    0x548    slli a4,s1,0x19
    0x84015c86    0x54c    bgez a4,ffffffff84015c90 <decodeRISCVMMUInvocation+0x556>
    0x84015c8a    0x550    li a4,-1
    0x84015c8c    0x552    slli a4,a4,0x27
    0x84015c8e    0x554    or a5,a5,a4
    0x84015c90    0x556    bne s8,a5,ffffffff84015cc2 <decodeRISCVMMUInvocation+0x588>
    0x84015c94    0x55a    ld a4,0(s3)
    0x84015c98    0x55e    andi a5,a4,1
    0x84015c9c    0x562    beqz a5,ffffffff84015b66 <decodeRISCVMMUInvocation+0x42c>
    0x84015ca0    0x566    srli a5,a4,0x1
    0x84015ca4    0x56a    srli a3,a4,0x2
    0x84015ca8    0x56e    or a5,a5,a3
    0x84015caa    0x570    srli a4,a4,0x3
    0x84015cac    0x572    or a5,a5,a4
    0x84015cae    0x574    andi a5,a5,1
    0x84015cb0    0x576    bnez a5,ffffffff84015b66 <decodeRISCVMMUInvocation+0x42c>
    0x84015cb4    0x57a    li a5,8
    0x84015cb6    0x57c    auipc a4,0x7
    0x84015cba    0x580    sd a5,-62(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015cbe    0x584    mv s0,s9
    0x84015cc0    0x586    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015cc2    0x588    auipc a5,0x7
    0x84015cc6    0x58c    addi a5,a5,-122 # ffffffff8401cc48 <current_syscall_error>
    0x84015cca    0x590    li a4,1
    0x84015ccc    0x592    sd a4,48(a5)
    0x84015cce    0x594    sd zero,0(a5)
    0x84015cd2    0x598    mv s0,s9
    0x84015cd4    0x59a    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015cd6    0x59c    li a5,8
    0x84015cd8    0x59e    auipc a4,0x7
    0x84015cdc    0x5a2    sd a5,-96(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015ce0    0x5a6    mv s0,s9
    0x84015ce2    0x5a8    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015ce4    0x5aa    beqz s7,ffffffff84015bd6 <decodeRISCVMMUInvocation+0x49c>
    0x84015ce8    0x5ae    mv s1,s6
    0x84015cea    0x5b0    j ffffffff84015bf6 <decodeRISCVMMUInvocation+0x4bc>
    0x84015cec    0x5b2    li a1,2
    0x84015cee    0x5b4    auipc a0,0x18
    0x84015cf2    0x5b8    ld a0,-598(a0) # ffffffff8402da98 <ksCurThread>
    0x84015cf6    0x5bc    jal ra,ffffffff840122d0 <setThreadState>
    0x84015cfa    0x5c0    mv a2,s2
    0x84015cfc    0x5c2    mv a0,s1
    0x84015cfe    0x5c4    mv a1,s4
    0x84015d00    0x5c6    jal ra,ffffffff84010ae6 <performPageInvocationUnmap>
    0x84015d04    0x5ca    mv s0,a0
    0x84015d06    0x5cc    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015d08    0x5ce    li a1,2
    0x84015d0a    0x5d0    auipc a0,0x18
    0x84015d0e    0x5d4    ld a0,-626(a0) # ffffffff8402da98 <ksCurThread>
    0x84015d12    0x5d8    jal ra,ffffffff840122d0 <setThreadState>
    0x84015d16    0x5dc    srli s4,s4,0x9
    0x84015d1a    0x5e0    slli a5,s4,0x19
    0x84015d1e    0x5e4    srli a5,a5,0x19
    0x84015d20    0x5e6    slli a4,s4,0x19
    0x84015d24    0x5ea    bgez a4,ffffffff84015d2e <decodeRISCVMMUInvocation+0x5f4>
    0x84015d28    0x5ee    li a4,-1
    0x84015d2a    0x5f0    slli a4,a4,0x27
    0x84015d2c    0x5f2    or a5,a5,a4
    0x84015d2e    0x5f4    auipc a4,0x18
    0x84015d32    0x5f8    ld a4,-662(a4) # ffffffff8402da98 <ksCurThread>
    0x84015d36    0x5fc    li a3,1
    0x84015d38    0x5fe    slli a2,a3,0x26
    0x84015d3c    0x602    add a5,a5,a2
    0x84015d3e    0x604    sd a5,88(a4)
    0x84015d40    0x606    sd a3,80(a4)
    0x84015d42    0x608    li s0,0
    0x84015d44    0x60a    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015d46    0x60c    li a5,35
    0x84015d4a    0x610    beq a0,a5,ffffffff84015d7a <decodeRISCVMMUInvocation+0x640>
    0x84015d4e    0x614    li a5,3
    0x84015d50    0x616    auipc a4,0x7
    0x84015d54    0x61a    sd a5,-216(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015d58    0x61e    li s0,3
    0x84015d5a    0x620    mv a0,s0
    0x84015d5c    0x622    ld ra,200(sp)         ; stack access
    0x84015d5e    0x624    ld s0,192(sp)         ; stack access
    0x84015d60    0x626    ld s1,184(sp)         ; stack access
    0x84015d62    0x628    ld s2,176(sp)         ; stack access
    0x84015d64    0x62a    ld s3,168(sp)         ; stack access
    0x84015d66    0x62c    ld s4,160(sp)         ; stack access
    0x84015d68    0x62e    ld s5,152(sp)         ; stack access
    0x84015d6a    0x630    ld s6,144(sp)         ; stack access
    0x84015d6c    0x632    ld s7,136(sp)         ; stack access
    0x84015d6e    0x634    ld s8,128(sp)         ; stack access
    0x84015d70    0x636    ld s9,120(sp)         ; stack access
    0x84015d72    0x638    ld s10,112(sp)        ; stack access
    0x84015d74    0x63a    ld s11,104(sp)        ; stack access
    0x84015d76    0x63c    addi sp,sp,208
    0x84015d78    0x63e    ret
    0x84015d7a    0x640    li a5,1
    0x84015d7c    0x642    bgeu a5,a1,ffffffff84015dde <decodeRISCVMMUInvocation+0x6a4>
    0x84015d80    0x646    auipc s2,0x7
    0x84015d84    0x64a    ld s2,-256(s2) # ffffffff8401cc80 <current_extra_caps>
    0x84015d88    0x64e    beqz s2,ffffffff84015dde <decodeRISCVMMUInvocation+0x6a4>
    0x84015d8c    0x652    auipc a5,0x7
    0x84015d90    0x656    ld a5,-260(a5) # ffffffff8401cc88 <current_extra_caps+0x8>
    0x84015d94    0x65a    beqz a5,ffffffff84015dde <decodeRISCVMMUInvocation+0x6a4>
    0x84015d96    0x65c    auipc a4,0x18
    0x84015d9a    0x660    ld a4,-766(a4) # ffffffff8402da98 <ksCurThread>
    0x84015d9e    0x664    ld s4,88(a4)
    0x84015da2    0x668    ld s5,96(a4)
    0x84015da6    0x66c    ld s3,0(s2)
    0x84015daa    0x670    ld a2,8(s2)
    0x84015dae    0x674    ld a4,0(a5)
    0x84015db0    0x676    sd a4,48(sp)          ; stack access
    0x84015db2    0x678    ld a5,8(a5)
    0x84015db4    0x67a    sd a5,56(sp)          ; stack access
    0x84015db6    0x67c    auipc a5,0x6
    0x84015dba    0x680    addi a5,a5,-1422 # ffffffff8401b828 <riscvKSASIDTable>
    0x84015dbe    0x684    li s1,0
    0x84015dc0    0x686    li a3,128
    0x84015dc4    0x68a    ld a4,0(a5)
    0x84015dc6    0x68c    beqz a4,ffffffff84015dec <decodeRISCVMMUInvocation+0x6b2>
    0x84015dc8    0x68e    addi s1,s1,1
    0x84015dca    0x690    addi a5,a5,8
    0x84015dcc    0x692    bne s1,a3,ffffffff84015dc4 <decodeRISCVMMUInvocation+0x68a>
    0x84015dd0    0x696    li a5,8
    0x84015dd2    0x698    auipc a4,0x7
    0x84015dd6    0x69c    sd a5,-346(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015dda    0x6a0    li s0,3
    0x84015ddc    0x6a2    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015dde    0x6a4    li a5,7
    0x84015de0    0x6a6    auipc a4,0x7
    0x84015de4    0x6aa    sd a5,-360(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015de8    0x6ae    li s0,3
    0x84015dea    0x6b0    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015dec    0x6b2    li a5,128
    0x84015df0    0x6b6    beq s1,a5,ffffffff84015dd0 <decodeRISCVMMUInvocation+0x696>
    0x84015df4    0x6ba    srli a5,s3,0x3b
    0x84015df8    0x6be    li a4,2
    0x84015dfa    0x6c0    bne a5,a4,ffffffff84015e10 <decodeRISCVMMUInvocation+0x6d6>
    0x84015dfe    0x6c4    andi a5,a2,63
    0x84015e02    0x6c8    li a4,12
    0x84015e04    0x6ca    bne a5,a4,ffffffff84015e10 <decodeRISCVMMUInvocation+0x6d6>
    0x84015e08    0x6ce    srli a5,a2,0x6
    0x84015e0c    0x6d2    andi a5,a5,1
    0x84015e0e    0x6d4    beqz a5,ffffffff84015e24 <decodeRISCVMMUInvocation+0x6ea>
    0x84015e10    0x6d6    auipc a5,0x7
    0x84015e14    0x6da    addi a5,a5,-456 # ffffffff8401cc48 <current_syscall_error>
    0x84015e18    0x6de    li a4,2
    0x84015e1a    0x6e0    sd a4,48(a5)
    0x84015e1c    0x6e2    li a4,1
    0x84015e1e    0x6e4    sd a4,8(a5)
    0x84015e20    0x6e6    li s0,3
    0x84015e22    0x6e8    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015e24    0x6ea    mv a0,s2
    0x84015e26    0x6ec    jal ra,ffffffff84011d66 <ensureNoChildren>
    0x84015e2a    0x6f0    mv s0,a0
    0x84015e2c    0x6f2    bnez a0,ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015e2e    0x6f4    slli s6,s3,0x19
    0x84015e32    0x6f8    srli s6,s6,0x19
    0x84015e36    0x6fc    slli a5,s3,0x19
    0x84015e3a    0x700    bgez a5,ffffffff84015e46 <decodeRISCVMMUInvocation+0x70c>
    0x84015e3e    0x704    li a5,-1
    0x84015e40    0x706    slli a5,a5,0x27
    0x84015e42    0x708    or s6,s6,a5
    0x84015e46    0x70c    mv a3,s5
    0x84015e48    0x70e    mv a2,s4
    0x84015e4a    0x710    ld a0,48(sp)          ; stack access
    0x84015e4c    0x712    ld a1,56(sp)          ; stack access
    0x84015e4e    0x714    jal ra,ffffffff840112dc <lookupTargetSlot>
    0x84015e52    0x718    sd a0,64(sp)          ; stack access
    0x84015e54    0x71a    sd a1,72(sp)          ; stack access
    0x84015e56    0x71c    mv s0,a0
    0x84015e58    0x71e    bnez a0,ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015e5c    0x722    mv s3,a1
    0x84015e5e    0x724    mv a0,a1
    0x84015e60    0x726    jal ra,ffffffff8401170c <ensureEmptySlot>
    0x84015e64    0x72a    mv s0,a0
    0x84015e66    0x72c    bnez a0,ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015e6a    0x730    li a1,2
    0x84015e6c    0x732    auipc a0,0x18
    0x84015e70    0x736    ld a0,-980(a0) # ffffffff8402da98 <ksCurThread>
    0x84015e74    0x73a    jal ra,ffffffff840122d0 <setThreadState>
    0x84015e78    0x73e    ld a5,8(s2)
    0x84015e7c    0x742    andi a4,a5,63
    0x84015e80    0x746    addiw a3,a4,-4
    0x84015e84    0x74a    lui a4,0x2000
    0x84015e88    0x74e    sll a4,a4,a3
    0x84015e8c    0x752    slli a5,a5,0x27
    0x84015e8e    0x754    srli a5,a5,0x27
    0x84015e90    0x756    or a5,a5,a4
    0x84015e92    0x758    sd a5,8(s2)
    0x84015e96    0x75c    lui a1,0x1
    0x84015e98    0x75e    mv a0,s6
    0x84015e9a    0x760    jal ra,ffffffff840156b8 <memzero>
    0x84015e9e    0x764    slli a5,s1,0x34
    0x84015ea2    0x768    lui a4,0xffff
    0x84015ea6    0x76c    slli a4,a4,0x1f
    0x84015ea8    0x76e    and a5,a5,a4
    0x84015eaa    0x770    srli a4,s6,0x2
    0x84015eae    0x774    li s4,-1
    0x84015eb0    0x776    srli a3,s4,0x1b
    0x84015eb4    0x77a    and a4,a4,a3
    0x84015eb6    0x77c    or a5,a5,a4
    0x84015eb8    0x77e    mv a3,s3
    0x84015eba    0x780    mv a2,s2
    0x84015ebc    0x782    li a0,13
    0x84015ebe    0x784    slli a0,a0,0x3b
    0x84015ec0    0x786    or a0,a0,a5
    0x84015ec2    0x788    li a1,0
    0x84015ec4    0x78a    jal ra,ffffffff840113ac <cteInsert>
    0x84015ec8    0x78e    srli a5,s4,0x9
    0x84015ecc    0x792    and a5,a5,s1
    0x84015ece    0x794    slli a5,a5,0x3
    0x84015ed0    0x796    auipc a4,0x6
    0x84015ed4    0x79a    addi a4,a4,-1704 # ffffffff8401b828 <riscvKSASIDTable>
    0x84015ed8    0x79e    add a5,a5,a4
    0x84015eda    0x7a0    sd s6,0(a5)
    0x84015ede    0x7a4    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015ee0    0x7a6    li a5,3
    0x84015ee2    0x7a8    auipc a4,0x7
    0x84015ee6    0x7ac    sd a5,-618(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015eea    0x7b0    li s0,3
    0x84015eec    0x7b2    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015eee    0x7b4    li a5,7
    0x84015ef0    0x7b6    auipc a4,0x7
    0x84015ef4    0x7ba    sd a5,-632(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015ef8    0x7be    li s0,3
    0x84015efa    0x7c0    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015efc    0x7c2    auipc a5,0x7
    0x84015f00    0x7c6    addi a5,a5,-692 # ffffffff8401cc48 <current_syscall_error>
    0x84015f04    0x7ca    li a4,2
    0x84015f06    0x7cc    sd a4,48(a5)
    0x84015f08    0x7ce    li a4,1
    0x84015f0a    0x7d0    sd a4,8(a5)
    0x84015f0c    0x7d2    li s0,3
    0x84015f0e    0x7d4    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015f10    0x7d6    auipc a5,0x7
    0x84015f14    0x7da    addi a5,a5,-712 # ffffffff8401cc48 <current_syscall_error>
    0x84015f18    0x7de    li a4,6
    0x84015f1a    0x7e0    sd a4,48(a5)
    0x84015f1c    0x7e2    sd zero,40(a5)
    0x84015f20    0x7e6    auipc a5,0x7
    0x84015f24    0x7ea    addi a5,a5,-752 # ffffffff8401cc30 <current_lookup_fault>
    0x84015f28    0x7ee    sd zero,0(a5)
    0x84015f2c    0x7f2    sd zero,8(a5)
    0x84015f30    0x7f6    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015f32    0x7f8    addi a5,a5,1
    0x84015f34    0x7fa    beq a5,a2,ffffffff84015fb8 <decodeRISCVMMUInvocation+0x87e>
    0x84015f38    0x7fe    add a4,a5,a3
    0x84015f3c    0x802    beqz a4,ffffffff84015f32 <decodeRISCVMMUInvocation+0x7f8>
    0x84015f3e    0x804    slli a4,a5,0x3
    0x84015f42    0x808    add a4,a4,s4
    0x84015f44    0x80a    ld a4,0(a4)
    0x84015f46    0x80c    bnez a4,ffffffff84015f32 <decodeRISCVMMUInvocation+0x7f8>
    0x84015f48    0x80e    li a4,512
    0x84015f4c    0x812    beq a5,a4,ffffffff84015fb8 <decodeRISCVMMUInvocation+0x87e>
    0x84015f50    0x816    add s0,a5,a3
    0x84015f54    0x81a    li a1,2
    0x84015f56    0x81c    auipc a0,0x18
    0x84015f5a    0x820    ld a0,-1214(a0) # ffffffff8402da98 <ksCurThread>
    0x84015f5e    0x824    jal ra,ffffffff840122d0 <setThreadState>
    0x84015f62    0x828    ld a4,0(s3)
    0x84015f66    0x82c    ld a5,8(s3)
    0x84015f6a    0x830    srli a3,a5,0x9
    0x84015f6e    0x834    slli s1,a3,0x19
    0x84015f72    0x838    srli s1,s1,0x19
    0x84015f74    0x83a    slli a2,a3,0x19
    0x84015f78    0x83e    bgez a2,ffffffff84015f82 <decodeRISCVMMUInvocation+0x848>
    0x84015f7c    0x842    li a3,-1
    0x84015f7e    0x844    slli a3,a3,0x27
    0x84015f80    0x846    or s1,s1,a3
    0x84015f82    0x848    li a3,-1
    0x84015f84    0x84a    slli a2,a3,0x28
    0x84015f88    0x84e    and a4,a4,a2
    0x84015f8a    0x850    li a2,1
    0x84015f8c    0x852    slli a2,a2,0x27
    0x84015f8e    0x854    or a4,a4,a2
    0x84015f90    0x856    sd a4,0(s3)
    0x84015f94    0x85a    srli a3,a3,0x10
    0x84015f96    0x85c    and a5,a5,a3
    0x84015f98    0x85e    slli a4,s0,0x30
    0x84015f9c    0x862    or a5,a5,a4
    0x84015f9e    0x864    sd a5,8(s3)
    0x84015fa2    0x868    mv a0,s1
    0x84015fa4    0x86a    jal ra,ffffffff840104be <copyGlobalMappings>
    0x84015fa8    0x86e    andi a5,s0,511
    0x84015fac    0x872    slli a5,a5,0x3
    0x84015fae    0x874    add s4,s4,a5
    0x84015fb0    0x876    sd s1,0(s4)
    0x84015fb4    0x87a    mv s0,s2
    0x84015fb6    0x87c    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015fb8    0x87e    li a5,8
    0x84015fba    0x880    auipc a4,0x7
    0x84015fbe    0x884    sd a5,-834(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84015fc2    0x888    j ffffffff84015d5a <decodeRISCVMMUInvocation+0x620>
    0x84015fc4    0x88a    jal ra,ffffffff8401034a <halt>
    0x84015fc8    0x88e    lui a4,0x200
    0x84015fcc    0x892    addi a4,a4,-1
    0x84015fce    0x894    add a4,a4,s8
    0x84015fd0    0x896    lui a5,0xfefff
    0x84015fd4    0x89a    slli a5,a5,0xe
    0x84015fd6    0x89c    srli a5,a5,0x1a
    0x84015fd8    0x89e    bltu a5,a4,ffffffff84015c16 <decodeRISCVMMUInvocation+0x4dc>
    0x84015fdc    0x8a2    slli a5,s8,0x2b
    0x84015fe0    0x8a6    bnez a5,ffffffff84015c2a <decodeRISCVMMUInvocation+0x4f0>
    0x84015fe4    0x8aa    mv a1,s8
    0x84015fe6    0x8ac    mv a0,s3
    0x84015fe8    0x8ae    jal ra,ffffffff840106c6 <lookupPTSlot>
    0x84015fec    0x8b2    mv s3,a0
    0x84015fee    0x8b4    mv a5,a1
    0x84015ff0    0x8b6    sd a0,64(sp)          ; stack access
    0x84015ff2    0x8b8    sd a1,72(sp)          ; stack access
    0x84015ff4    0x8ba    li a4,21
    0x84015ff6    0x8bc    j ffffffff84015b50 <decodeRISCVMMUInvocation+0x416>
    0x84015ff8    0x8be    lui a4,0x40000
    0x84015ffc    0x8c2    addi a4,a4,-1
    0x84015ffe    0x8c4    add a4,a4,s8
    0x84016000    0x8c6    lui a5,0xfefff
    0x84016004    0x8ca    slli a5,a5,0xe
    0x84016006    0x8cc    srli a5,a5,0x1a
    0x84016008    0x8ce    bltu a5,a4,ffffffff84015c16 <decodeRISCVMMUInvocation+0x4dc>
    0x8401600c    0x8d2    slli a5,s8,0x22
    0x84016010    0x8d6    bnez a5,ffffffff84015c2a <decodeRISCVMMUInvocation+0x4f0>
    0x84016014    0x8da    mv a1,s8
    0x84016016    0x8dc    mv a0,s3
    0x84016018    0x8de    jal ra,ffffffff840106c6 <lookupPTSlot>
    0x8401601c    0x8e2    mv s3,a0
    0x8401601e    0x8e4    mv a5,a1
    0x84016020    0x8e6    sd a0,64(sp)          ; stack access
    0x84016022    0x8e8    sd a1,72(sp)          ; stack access
    0x84016024    0x8ea    li a4,30
    0x84016026    0x8ec    j ffffffff84015b50 <decodeRISCVMMUInvocation+0x416>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
776 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1134 nodes.

Section decodeTCBInvocation (265 of 267)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 143 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x84015376      0x0    addi sp,sp,-48
    0x84015378      0x2    sd ra,40(sp)          ; stack access
    0x8401537a      0x4    sd s0,32(sp)          ; stack access
    0x8401537c      0x6    sd s1,24(sp)          ; stack access
    0x8401537e      0x8    sd a2,0(sp)           ; stack access
    0x84015380      0xa    sd a3,8(sp)           ; stack access
    0x84015382      0xc    mv a3,a4
    0x84015384      0xe    li a4,15
    0x84015386     0x10    bltu a4,a0,ffffffff840154da <decodeTCBInvocation+0x164>
    0x8401538a     0x14    mv s0,a2
    0x8401538c     0x16    slli a0,a0,0x2
    0x8401538e     0x18    auipc a4,0x2
    0x84015392     0x1c    addi a4,a4,-54 # ffffffff84017358 <ksDomScheduleLength+0x2a8>
    0x84015396     0x20    add a0,a0,a4
    0x84015398     0x22    lw a0,0(a0)
    0x8401539a     0x24    add a0,a0,a4
    0x8401539c     0x26    jr a0
    0x8401539e     0x28    mv a4,a6
    0x840153a0     0x2a    mv a3,a5
    0x840153a2     0x2c    mv a2,a1
    0x840153a4     0x2e    ld a0,0(sp)
    0x840153a6     0x30    ld a1,8(sp)
    0x840153a8     0x32    jal ra,ffffffff8401501e <decodeReadRegisters>
    0x840153ac     0x36    ld ra,40(sp)          ; stack access
    0x840153ae     0x38    ld s0,32(sp)          ; stack access
    0x840153b0     0x3a    ld s1,24(sp)          ; stack access
    0x840153b2     0x3c    addi sp,sp,48
    0x840153b4     0x3e    ret
    0x840153b6     0x40    mv a3,a6
    0x840153b8     0x42    mv a2,a1
    0x840153ba     0x44    ld a0,0(sp)
    0x840153bc     0x46    ld a1,8(sp)
    0x840153be     0x48    jal ra,ffffffff840151a8 <decodeWriteRegisters>
    0x840153c2     0x4c    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x840153c4     0x4e    mv a3,a6
    0x840153c6     0x50    mv a2,a1
    0x840153c8     0x52    ld a0,0(sp)
    0x840153ca     0x54    ld a1,8(sp)
    0x840153cc     0x56    jal ra,ffffffff84014e68 <decodeCopyRegisters>
    0x840153d0     0x5a    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x840153d2     0x5c    li a1,2
    0x840153d4     0x5e    auipc a0,0x18
    0x840153d8     0x62    ld a0,1732(a0) # ffffffff8402da98 <ksCurThread>
    0x840153dc     0x66    jal ra,ffffffff840122d0 <setThreadState>
    0x840153e0     0x6a    slli a0,s0,0x19
    0x840153e4     0x6e    srli a0,a0,0x19
    0x840153e6     0x70    slli a5,s0,0x19
    0x840153ea     0x74    bgez a5,ffffffff840153f4 <decodeTCBInvocation+0x7e>
    0x840153ee     0x78    li a5,-1
    0x840153f0     0x7a    slli a5,a5,0x27
    0x840153f2     0x7c    or a0,a0,a5
    0x840153f4     0x7e    jal ra,ffffffff84012d86 <suspend>
    0x840153f8     0x82    li a0,0
    0x840153fa     0x84    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x840153fc     0x86    li a1,2
    0x840153fe     0x88    auipc a0,0x18
    0x84015402     0x8c    ld a0,1690(a0) # ffffffff8402da98 <ksCurThread>
    0x84015406     0x90    jal ra,ffffffff840122d0 <setThreadState>
    0x8401540a     0x94    slli a0,s0,0x19
    0x8401540e     0x98    srli a0,a0,0x19
    0x84015410     0x9a    slli a5,s0,0x19
    0x84015414     0x9e    bgez a5,ffffffff8401541e <decodeTCBInvocation+0xa8>
    0x84015418     0xa2    li a5,-1
    0x8401541a     0xa4    slli a5,a5,0x27
    0x8401541c     0xa6    or a0,a0,a5
    0x8401541e     0xa8    jal ra,ffffffff840137bc <restart>
    0x84015422     0xac    li a0,0
    0x84015424     0xae    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x84015426     0xb0    mv a4,a6
    0x84015428     0xb2    mv a2,a1
    0x8401542a     0xb4    ld a0,0(sp)
    0x8401542c     0xb6    ld a1,8(sp)
    0x8401542e     0xb8    jal ra,ffffffff84014726 <decodeTCBConfigure>
    0x84015432     0xbc    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x84015434     0xbe    mv a3,a6
    0x84015436     0xc0    mv a2,a1
    0x84015438     0xc2    ld a0,0(sp)
    0x8401543a     0xc4    ld a1,8(sp)
    0x8401543c     0xc6    jal ra,ffffffff84014904 <decodeSetPriority>
    0x84015440     0xca    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x84015442     0xcc    mv a3,a6
    0x84015444     0xce    mv a2,a1
    0x84015446     0xd0    ld a0,0(sp)
    0x84015448     0xd2    ld a1,8(sp)
    0x8401544a     0xd4    jal ra,ffffffff840149cc <decodeSetMCPriority>
    0x8401544e     0xd8    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x84015450     0xda    mv a3,a6
    0x84015452     0xdc    mv a2,a1
    0x84015454     0xde    ld a0,0(sp)
    0x84015456     0xe0    ld a1,8(sp)
    0x84015458     0xe2    jal ra,ffffffff84014a94 <decodeSetSchedParams>
    0x8401545c     0xe6    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x8401545e     0xe8    mv a4,a6
    0x84015460     0xea    mv a2,a1
    0x84015462     0xec    ld a0,0(sp)
    0x84015464     0xee    ld a1,8(sp)
    0x84015466     0xf0    jal ra,ffffffff84014b80 <decodeSetIPCBuffer>
    0x8401546a     0xf4    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x8401546c     0xf6    mv a4,a6
    0x8401546e     0xf8    mv a2,a1
    0x84015470     0xfa    ld a0,0(sp)
    0x84015472     0xfc    ld a1,8(sp)
    0x84015474     0xfe    jal ra,ffffffff84014c3a <decodeSetSpace>
    0x84015478    0x102    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x8401547a    0x104    ld a0,0(sp)
    0x8401547c    0x106    ld a1,8(sp)
    0x8401547e    0x108    jal ra,ffffffff84015256 <decodeBindNotification>
    0x84015482    0x10c    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x84015484    0x10e    ld a0,0(sp)
    0x84015486    0x110    ld a1,8(sp)
    0x84015488    0x112    jal ra,ffffffff84015326 <decodeUnbindNotification>
    0x8401548c    0x116    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x8401548e    0x118    beqz a1,ffffffff840154cc <decodeTCBInvocation+0x156>
    0x84015490    0x11a    auipc a0,0x18
    0x84015494    0x11e    ld a0,1544(a0) # ffffffff8402da98 <ksCurThread>
    0x84015498    0x122    ld s1,88(a0)
    0x8401549a    0x124    li a1,2
    0x8401549c    0x126    jal ra,ffffffff840122d0 <setThreadState>
    0x840154a0    0x12a    slli a5,s0,0x19
    0x840154a4    0x12e    srli a5,a5,0x19
    0x840154a6    0x130    slli a4,s0,0x19
    0x840154aa    0x134    bgez a4,ffffffff840154b4 <decodeTCBInvocation+0x13e>
    0x840154ae    0x138    li a4,-1
    0x840154b0    0x13a    slli a4,a4,0x27
    0x840154b2    0x13c    or a5,a5,a4
    0x840154b4    0x13e    sd s1,24(a5)
    0x840154b6    0x140    auipc a4,0x18
    0x840154ba    0x144    ld a4,1506(a4) # ffffffff8402da98 <ksCurThread>
    0x840154be    0x148    li a0,0
    0x840154c0    0x14a    bne a5,a4,ffffffff840153ac <decodeTCBInvocation+0x36>
    0x840154c4    0x14e    jal ra,ffffffff8401226a <rescheduleRequired>
    0x840154c8    0x152    li a0,0
    0x840154ca    0x154    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x840154cc    0x156    li a5,7
    0x840154ce    0x158    auipc a4,0x7
    0x840154d2    0x15c    sd a5,1962(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840154d6    0x160    li a0,3
    0x840154d8    0x162    j ffffffff840153ac <decodeTCBInvocation+0x36>
    0x840154da    0x164    li a5,3
    0x840154dc    0x166    auipc a4,0x7
    0x840154e0    0x16a    sd a5,1948(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840154e4    0x16e    li a0,3
    0x840154e6    0x170    j ffffffff840153ac <decodeTCBInvocation+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
143 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 213 nodes.

Section decodeCNodeInvocation (266 of 267)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 412 instructions.


Stack analysis
---------------

65 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x840131ce      0x0    addi sp,sp,-224
    0x840131d0      0x2    sd ra,216(sp)         ; stack access
    0x840131d2      0x4    sd s0,208(sp)         ; stack access
    0x840131d4      0x6    sd s1,200(sp)         ; stack access
    0x840131d6      0x8    sd s2,192(sp)         ; stack access
    0x840131d8      0xa    sd s3,184(sp)         ; stack access
    0x840131da      0xc    sd s4,176(sp)         ; stack access
    0x840131dc      0xe    sd s5,168(sp)         ; stack access
    0x840131de     0x10    sd s6,160(sp)         ; stack access
    0x840131e0     0x12    sd s7,152(sp)         ; stack access
    0x840131e2     0x14    sd a2,0(sp)           ; stack access
    0x840131e4     0x16    sd a3,8(sp)           ; stack access
    0x840131e6     0x18    addi a3,a0,-16 # fffffffff7fffff0 <ki_end+0x73fd1ff0>
    0x840131ea     0x1c    li a5,8
    0x840131ec     0x1e    bltu a5,a3,ffffffff840132a0 <decodeCNodeInvocation+0xd2>
    0x840131f0     0x22    mv s1,a0
    0x840131f2     0x24    mv s2,a1
    0x840131f4     0x26    mv s3,a4
    0x840131f6     0x28    li a5,1
    0x840131f8     0x2a    bgeu a5,a1,ffffffff840132ae <decodeCNodeInvocation+0xe0>
    0x840131fc     0x2e    auipc a5,0x1b
    0x84013200     0x32    ld a5,-1892(a5) # ffffffff8402da98 <ksCurThread>
    0x84013204     0x36    ld a3,96(a5)
    0x84013206     0x38    ld a2,88(a5)
    0x84013208     0x3a    ld a0,0(sp)           ; stack access
    0x8401320a     0x3c    ld a1,8(sp)           ; stack access
    0x8401320c     0x3e    jal ra,ffffffff840112dc <lookupTargetSlot>
    0x84013210     0x42    sd a0,112(sp)         ; stack access
    0x84013212     0x44    sd a1,120(sp)         ; stack access
    0x84013214     0x46    mv s0,a0
    0x84013216     0x48    bnez a0,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013218     0x4a    mv s4,a1
    0x8401321a     0x4c    addi a5,s1,-19
    0x8401321e     0x50    li a4,3
    0x84013220     0x52    bltu a4,a5,ffffffff84013404 <decodeCNodeInvocation+0x236>
    0x84013224     0x56    li a5,3
    0x84013226     0x58    bgeu a5,s2,ffffffff840132d2 <decodeCNodeInvocation+0x104>
    0x8401322a     0x5c    auipc a5,0xa
    0x8401322e     0x60    ld a5,-1450(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84013232     0x64    beqz a5,ffffffff840132d2 <decodeCNodeInvocation+0x104>
    0x84013234     0x66    auipc a4,0x1b
    0x84013238     0x6a    ld a4,-1948(a4) # ffffffff8402da98 <ksCurThread>
    0x8401323c     0x6e    ld s6,104(a4)
    0x84013240     0x72    ld s5,112(a4)
    0x84013244     0x76    ld a4,0(a5)
    0x84013246     0x78    sd a4,24(sp)          ; stack access
    0x84013248     0x7a    ld a5,8(a5)
    0x8401324a     0x7c    sd a5,32(sp)          ; stack access
    0x8401324c     0x7e    mv a0,a1
    0x8401324e     0x80    jal ra,ffffffff8401170c <ensureEmptySlot>
    0x84013252     0x84    mv s0,a0
    0x84013254     0x86    bnez a0,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013256     0x88    mv a3,s5
    0x84013258     0x8a    mv a2,s6
    0x8401325a     0x8c    ld a0,24(sp)          ; stack access
    0x8401325c     0x8e    ld a1,32(sp)          ; stack access
    0x8401325e     0x90    jal ra,ffffffff840112c2 <lookupSourceSlot>
    0x84013262     0x94    sd a0,112(sp)         ; stack access
    0x84013264     0x96    sd a1,120(sp)         ; stack access
    0x84013266     0x98    mv s0,a0
    0x84013268     0x9a    bnez a0,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401326a     0x9c    mv s6,a1
    0x8401326c     0x9e    ld s7,0(a1) # ffffffffe0000000 <ki_end+0x5bfd2000>
    0x84013270     0xa2    srli a5,s7,0x3b
    0x84013274     0xa6    beqz a5,ffffffff840132e0 <decodeCNodeInvocation+0x112>
    0x84013276     0xa8    li a5,21
    0x84013278     0xaa    beq s1,a5,ffffffff8401339e <decodeCNodeInvocation+0x1d0>
    0x8401327c     0xae    bltu a5,s1,ffffffff840133c2 <decodeCNodeInvocation+0x1f4>
    0x84013280     0xb2    li a5,19
    0x84013282     0xb4    beq s1,a5,ffffffff8401330e <decodeCNodeInvocation+0x140>
    0x84013286     0xb8    li a5,20
    0x84013288     0xba    bne s1,a5,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401328c     0xbe    li a5,5
    0x8401328e     0xc0    bltu a5,s2,ffffffff84013368 <decodeCNodeInvocation+0x19a>
    0x84013292     0xc4    li a5,7
    0x84013294     0xc6    auipc a4,0xa
    0x84013298     0xca    sd a5,-1564(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401329c     0xce    li s0,3
    0x8401329e     0xd0    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840132a0     0xd2    li a5,3
    0x840132a2     0xd4    auipc a4,0xa
    0x840132a6     0xd8    sd a5,-1578(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840132aa     0xdc    li s0,3
    0x840132ac     0xde    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840132ae     0xe0    li a5,7
    0x840132b0     0xe2    auipc a4,0xa
    0x840132b4     0xe6    sd a5,-1592(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840132b8     0xea    li s0,3
    0x840132ba     0xec    mv a0,s0
    0x840132bc     0xee    ld ra,216(sp)         ; stack access
    0x840132be     0xf0    ld s0,208(sp)         ; stack access
    0x840132c0     0xf2    ld s1,200(sp)         ; stack access
    0x840132c2     0xf4    ld s2,192(sp)         ; stack access
    0x840132c4     0xf6    ld s3,184(sp)         ; stack access
    0x840132c6     0xf8    ld s4,176(sp)         ; stack access
    0x840132c8     0xfa    ld s5,168(sp)         ; stack access
    0x840132ca     0xfc    ld s6,160(sp)         ; stack access
    0x840132cc     0xfe    ld s7,152(sp)         ; stack access
    0x840132ce    0x100    addi sp,sp,224
    0x840132d0    0x102    ret
    0x840132d2    0x104    li a5,7
    0x840132d4    0x106    auipc a4,0xa
    0x840132d8    0x10a    sd a5,-1628(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840132dc    0x10e    li s0,3
    0x840132de    0x110    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840132e0    0x112    auipc a5,0xa
    0x840132e4    0x116    addi a5,a5,-1688 # ffffffff8401cc48 <current_syscall_error>
    0x840132e8    0x11a    li a4,6
    0x840132ea    0x11c    sd a4,48(a5)
    0x840132ec    0x11e    li a4,1
    0x840132ee    0x120    sd a4,40(a5)
    0x840132f0    0x122    auipc a4,0xa
    0x840132f4    0x126    addi a4,a4,-1728 # ffffffff8401cc30 <current_lookup_fault>
    0x840132f8    0x12a    slli a5,s5,0x2
    0x840132fc    0x12e    andi a5,a5,508
    0x84013300    0x132    ori a5,a5,1
    0x84013304    0x136    sd a5,0(a4)
    0x84013306    0x138    sd zero,8(a4)
    0x8401330a    0x13c    li s0,3
    0x8401330c    0x13e    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401330e    0x140    li a5,4
    0x84013310    0x142    bltu a5,s2,ffffffff84013322 <decodeCNodeInvocation+0x154>
    0x84013314    0x146    li a5,7
    0x84013316    0x148    auipc a4,0xa
    0x8401331a    0x14c    sd a5,-1694(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401331e    0x150    li s0,3
    0x84013320    0x152    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013322    0x154    ld a1,0(a1)
    0x84013324    0x156    ld a2,8(s6)
    0x84013328    0x15a    ld a0,40(s3)
    0x8401332c    0x15e    jal ra,ffffffff84011f9e <maskCapRights>
    0x84013330    0x162    mv a2,a0
    0x84013332    0x164    mv a3,a1
    0x84013334    0x166    mv a1,s6
    0x84013336    0x168    addi a0,sp,88
    0x84013338    0x16a    jal ra,ffffffff84011da6 <deriveCap>
    0x8401333c    0x16e    ld a5,88(sp)          ; stack access
    0x8401333e    0x170    bnez a5,ffffffff840133fc <decodeCNodeInvocation+0x22e>
    0x84013340    0x172    ld a5,104(sp)         ; stack access
    0x84013342    0x174    sd a5,48(sp)          ; stack access
    0x84013344    0x176    ld s1,96(sp)          ; stack access
    0x84013346    0x178    srli a5,s1,0x3b
    0x8401334a    0x17c    beqz a5,ffffffff840133e0 <decodeCNodeInvocation+0x212>
    0x8401334c    0x17e    li a1,2
    0x8401334e    0x180    auipc a0,0x1a
    0x84013352    0x184    ld a0,1866(a0) # ffffffff8402da98 <ksCurThread>
    0x84013356    0x188    jal ra,ffffffff840122d0 <setThreadState>
    0x8401335a    0x18c    mv a3,s4
    0x8401335c    0x18e    mv a2,s6
    0x8401335e    0x190    mv a0,s1
    0x84013360    0x192    ld a1,48(sp)          ; stack access
    0x84013362    0x194    jal ra,ffffffff840113ac <cteInsert>
    0x84013366    0x198    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013368    0x19a    ld s1,48(s3)
    0x8401336c    0x19e    ld a1,0(a1)
    0x8401336e    0x1a0    ld a2,8(s6)
    0x84013372    0x1a4    ld a0,40(s3)
    0x84013376    0x1a8    jal ra,ffffffff84011f9e <maskCapRights>
    0x8401337a    0x1ac    mv a2,a0
    0x8401337c    0x1ae    mv a3,a1
    0x8401337e    0x1b0    mv a1,s1
    0x84013380    0x1b2    li a0,0
    0x84013382    0x1b4    jal ra,ffffffff84011f0c <updateCapData>
    0x84013386    0x1b8    mv a2,a0
    0x84013388    0x1ba    mv a3,a1
    0x8401338a    0x1bc    mv a1,s6
    0x8401338c    0x1be    addi a0,sp,88
    0x8401338e    0x1c0    jal ra,ffffffff84011da6 <deriveCap>
    0x84013392    0x1c4    ld a5,88(sp)          ; stack access
    0x84013394    0x1c6    bnez a5,ffffffff84013400 <decodeCNodeInvocation+0x232>
    0x84013396    0x1c8    ld a5,104(sp)         ; stack access
    0x84013398    0x1ca    sd a5,48(sp)          ; stack access
    0x8401339a    0x1cc    ld s1,96(sp)          ; stack access
    0x8401339c    0x1ce    j ffffffff84013346 <decodeCNodeInvocation+0x178>
    0x8401339e    0x1d0    ld a5,0(a1)
    0x840133a0    0x1d2    sd a5,40(sp)          ; stack access
    0x840133a2    0x1d4    ld a5,8(a1)
    0x840133a4    0x1d6    sd a5,48(sp)          ; stack access
    0x840133a6    0x1d8    li a1,2
    0x840133a8    0x1da    auipc a0,0x1a
    0x840133ac    0x1de    ld a0,1776(a0) # ffffffff8402da98 <ksCurThread>
    0x840133b0    0x1e2    jal ra,ffffffff840122d0 <setThreadState>
    0x840133b4    0x1e6    mv a3,s4
    0x840133b6    0x1e8    mv a2,s6
    0x840133b8    0x1ea    mv a0,s7
    0x840133ba    0x1ec    ld a1,48(sp)          ; stack access
    0x840133bc    0x1ee    jal ra,ffffffff840114ea <cteMove>
    0x840133c0    0x1f2    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840133c2    0x1f4    li a5,4
    0x840133c4    0x1f6    bgeu a5,s2,ffffffff840133ee <decodeCNodeInvocation+0x220>
    0x840133c8    0x1fa    ld a2,0(a1)
    0x840133ca    0x1fc    ld a3,8(a1)
    0x840133cc    0x1fe    ld a1,40(s3)
    0x840133d0    0x202    li a0,1
    0x840133d2    0x204    jal ra,ffffffff84011f0c <updateCapData>
    0x840133d6    0x208    sd a1,48(sp)          ; stack access
    0x840133d8    0x20a    mv s7,a0
    0x840133da    0x20c    srli a0,a0,0x3b
    0x840133dc    0x20e    bnez a0,ffffffff8401363e <decodeCNodeInvocation+0x470>
    0x840133e0    0x212    li a5,3
    0x840133e2    0x214    auipc a4,0xa
    0x840133e6    0x218    sd a5,-1898(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840133ea    0x21c    li s0,3
    0x840133ec    0x21e    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840133ee    0x220    li a5,7
    0x840133f0    0x222    auipc a4,0xa
    0x840133f4    0x226    sd a5,-1912(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840133f8    0x22a    li s0,3
    0x840133fa    0x22c    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840133fc    0x22e    mv s0,a5
    0x840133fe    0x230    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013400    0x232    mv s0,a5
    0x84013402    0x234    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013404    0x236    li a5,16
    0x84013406    0x238    beq s1,a5,ffffffff8401350a <decodeCNodeInvocation+0x33c>
    0x8401340a    0x23c    li a5,17
    0x8401340c    0x23e    beq s1,a5,ffffffff84013522 <decodeCNodeInvocation+0x354>
    0x84013410    0x242    li a5,24
    0x84013412    0x244    beq s1,a5,ffffffff8401353a <decodeCNodeInvocation+0x36c>
    0x84013416    0x248    li a5,18
    0x84013418    0x24a    beq s1,a5,ffffffff8401355e <decodeCNodeInvocation+0x390>
    0x8401341c    0x24e    li a5,23
    0x8401341e    0x250    bne s1,a5,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013422    0x254    li a5,7
    0x84013424    0x256    bgeu a5,s2,ffffffff84013594 <decodeCNodeInvocation+0x3c6>
    0x84013428    0x25a    auipc a5,0xa
    0x8401342c    0x25e    ld a5,-1960(a5) # ffffffff8401cc80 <current_extra_caps>
    0x84013430    0x262    beqz a5,ffffffff84013594 <decodeCNodeInvocation+0x3c6>
    0x84013434    0x266    auipc a4,0xa
    0x84013438    0x26a    ld a4,-1964(a4) # ffffffff8401cc88 <current_extra_caps+0x8>
    0x8401343c    0x26e    beqz a4,ffffffff84013594 <decodeCNodeInvocation+0x3c6>
    0x84013440    0x272    auipc a3,0x1a
    0x84013444    0x276    ld a3,1624(a3) # ffffffff8402da98 <ksCurThread>
    0x84013448    0x27a    ld s5,104(a3)
    0x8401344c    0x27e    ld s7,112(a3)
    0x84013450    0x282    ld s2,40(s3)
    0x84013454    0x286    ld s6,48(s3)
    0x84013458    0x28a    ld s1,64(s3)
    0x8401345c    0x28e    ld a3,0(a5)
    0x8401345e    0x290    sd a3,40(sp)          ; stack access
    0x84013460    0x292    ld a5,8(a5)
    0x84013462    0x294    sd a5,48(sp)          ; stack access
    0x84013464    0x296    ld a0,0(a4)
    0x84013466    0x298    sd a0,56(sp)          ; stack access
    0x84013468    0x29a    ld a1,8(a4)
    0x8401346a    0x29c    sd a1,64(sp)          ; stack access
    0x8401346c    0x29e    mv a3,s1
    0x8401346e    0x2a0    ld a2,56(s3)
    0x84013472    0x2a4    jal ra,ffffffff840112c2 <lookupSourceSlot>
    0x84013476    0x2a8    sd a1,120(sp)         ; stack access
    0x84013478    0x2aa    mv s0,a0
    0x8401347a    0x2ac    bnez a0,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401347e    0x2b0    mv s3,a1
    0x84013480    0x2b2    mv a3,s2
    0x84013482    0x2b4    mv a2,s7
    0x84013484    0x2b6    ld a0,40(sp)          ; stack access
    0x84013486    0x2b8    ld a1,48(sp)          ; stack access
    0x84013488    0x2ba    jal ra,ffffffff840112f6 <lookupPivotSlot>
    0x8401348c    0x2be    sd a0,112(sp)         ; stack access
    0x8401348e    0x2c0    sd a1,120(sp)         ; stack access
    0x84013490    0x2c2    mv s0,a0
    0x84013492    0x2c4    bnez a0,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013496    0x2c8    mv s7,a1
    0x84013498    0x2ca    beq a1,s3,ffffffff840135a2 <decodeCNodeInvocation+0x3d4>
    0x8401349c    0x2ce    beq a1,s4,ffffffff840135a2 <decodeCNodeInvocation+0x3d4>
    0x840134a0    0x2d2    beq s4,s3,ffffffff840134b0 <decodeCNodeInvocation+0x2e2>
    0x840134a4    0x2d6    mv a0,s4
    0x840134a6    0x2d8    jal ra,ffffffff8401170c <ensureEmptySlot>
    0x840134aa    0x2dc    mv s0,a0
    0x840134ac    0x2de    bnez a0,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840134b0    0x2e2    ld a5,0(s3)
    0x840134b4    0x2e6    srli a5,a5,0x3b
    0x840134b6    0x2e8    beqz a5,ffffffff840135b0 <decodeCNodeInvocation+0x3e2>
    0x840134ba    0x2ec    ld a5,0(s7)
    0x840134be    0x2f0    srli a5,a5,0x3b
    0x840134c0    0x2f2    beqz a5,ffffffff840135de <decodeCNodeInvocation+0x410>
    0x840134c4    0x2f6    ld a2,0(s3)
    0x840134c8    0x2fa    ld a3,8(s3)
    0x840134cc    0x2fe    mv a1,s6
    0x840134ce    0x300    li a0,1
    0x840134d0    0x302    jal ra,ffffffff84011f0c <updateCapData>
    0x840134d4    0x306    mv s0,a0
    0x840134d6    0x308    sd a0,72(sp)          ; stack access
    0x840134d8    0x30a    sd a1,80(sp)          ; stack access
    0x840134da    0x30c    ld a2,0(s7)
    0x840134de    0x310    ld a3,8(s7)
    0x840134e2    0x314    mv a1,s5
    0x840134e4    0x316    li a0,1
    0x840134e6    0x318    jal ra,ffffffff84011f0c <updateCapData>
    0x840134ea    0x31c    sd a0,88(sp)          ; stack access
    0x840134ec    0x31e    sd a1,96(sp)          ; stack access
    0x840134ee    0x320    srli s0,s0,0x3b
    0x840134f0    0x322    beqz s0,ffffffff8401360c <decodeCNodeInvocation+0x43e>
    0x840134f4    0x326    ld a5,88(sp)          ; stack access
    0x840134f6    0x328    srli a5,a5,0x3b
    0x840134f8    0x32a    bnez a5,ffffffff8401361a <decodeCNodeInvocation+0x44c>
    0x840134fc    0x32e    li a5,3
    0x840134fe    0x330    auipc a4,0x9
    0x84013502    0x334    sd a5,1914(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84013506    0x338    li s0,3
    0x84013508    0x33a    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401350a    0x33c    li a1,2
    0x8401350c    0x33e    auipc a0,0x1a
    0x84013510    0x342    ld a0,1420(a0) # ffffffff8402da98 <ksCurThread>
    0x84013514    0x346    jal ra,ffffffff840122d0 <setThreadState>
    0x84013518    0x34a    mv a0,s4
    0x8401351a    0x34c    jal ra,ffffffff8401313c <cteRevoke>
    0x8401351e    0x350    mv s0,a0
    0x84013520    0x352    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013522    0x354    li a1,2
    0x84013524    0x356    auipc a0,0x1a
    0x84013528    0x35a    ld a0,1396(a0) # ffffffff8402da98 <ksCurThread>
    0x8401352c    0x35e    jal ra,ffffffff840122d0 <setThreadState>
    0x84013530    0x362    mv a0,s4
    0x84013532    0x364    jal ra,ffffffff8401312c <invokeCNodeDelete>
    0x84013536    0x368    mv s0,a0
    0x84013538    0x36a    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401353a    0x36c    mv a0,a1
    0x8401353c    0x36e    jal ra,ffffffff8401170c <ensureEmptySlot>
    0x84013540    0x372    mv s0,a0
    0x84013542    0x374    bnez a0,ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013546    0x378    li a1,2
    0x84013548    0x37a    auipc a0,0x1a
    0x8401354c    0x37e    ld a0,1360(a0) # ffffffff8402da98 <ksCurThread>
    0x84013550    0x382    jal ra,ffffffff840122d0 <setThreadState>
    0x84013554    0x386    mv a0,s4
    0x84013556    0x388    jal ra,ffffffff84011554 <invokeCNodeSaveCaller>
    0x8401355a    0x38c    mv s0,a0
    0x8401355c    0x38e    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401355e    0x390    ld a0,0(a1)
    0x84013560    0x392    sd a0,88(sp)          ; stack access
    0x84013562    0x394    ld a1,8(a1)
    0x84013564    0x396    sd a1,96(sp)          ; stack access
    0x84013566    0x398    jal ra,ffffffff840119a6 <hasCancelSendRights>
    0x8401356a    0x39c    bnez a0,ffffffff8401357a <decodeCNodeInvocation+0x3ac>
    0x8401356c    0x39e    li a5,3
    0x8401356e    0x3a0    auipc a4,0x9
    0x84013572    0x3a4    sd a5,1802(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84013576    0x3a8    li s0,3
    0x84013578    0x3aa    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401357a    0x3ac    li a1,2
    0x8401357c    0x3ae    auipc a0,0x1a
    0x84013580    0x3b2    ld a0,1308(a0) # ffffffff8402da98 <ksCurThread>
    0x84013584    0x3b6    jal ra,ffffffff840122d0 <setThreadState>
    0x84013588    0x3ba    ld a0,88(sp)          ; stack access
    0x8401358a    0x3bc    ld a1,96(sp)          ; stack access
    0x8401358c    0x3be    jal ra,ffffffff84012c0a <invokeCNodeCancelBadgedSends>
    0x84013590    0x3c2    mv s0,a0
    0x84013592    0x3c4    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x84013594    0x3c6    li a5,7
    0x84013596    0x3c8    auipc a4,0x9
    0x8401359a    0x3cc    sd a5,1762(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x8401359e    0x3d0    li s0,3
    0x840135a0    0x3d2    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840135a2    0x3d4    li a5,3
    0x840135a4    0x3d6    auipc a4,0x9
    0x840135a8    0x3da    sd a5,1748(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x840135ac    0x3de    li s0,3
    0x840135ae    0x3e0    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840135b0    0x3e2    auipc a5,0x9
    0x840135b4    0x3e6    addi a5,a5,1688 # ffffffff8401cc48 <current_syscall_error>
    0x840135b8    0x3ea    li a4,6
    0x840135ba    0x3ec    sd a4,48(a5)
    0x840135bc    0x3ee    li a4,1
    0x840135be    0x3f0    sd a4,40(a5)
    0x840135c0    0x3f2    auipc a4,0x9
    0x840135c4    0x3f6    addi a4,a4,1648 # ffffffff8401cc30 <current_lookup_fault>
    0x840135c8    0x3fa    slli a5,s1,0x2
    0x840135cc    0x3fe    andi a5,a5,508
    0x840135d0    0x402    ori a5,a5,1
    0x840135d4    0x406    sd a5,0(a4)
    0x840135d6    0x408    sd zero,8(a4)
    0x840135da    0x40c    li s0,3
    0x840135dc    0x40e    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x840135de    0x410    auipc a5,0x9
    0x840135e2    0x414    addi a5,a5,1642 # ffffffff8401cc48 <current_syscall_error>
    0x840135e6    0x418    li a4,6
    0x840135e8    0x41a    sd a4,48(a5)
    0x840135ea    0x41c    sd zero,40(a5)
    0x840135ee    0x420    auipc a4,0x9
    0x840135f2    0x424    addi a4,a4,1602 # ffffffff8401cc30 <current_lookup_fault>
    0x840135f6    0x428    slli a5,s2,0x2
    0x840135fa    0x42c    andi a5,a5,508
    0x840135fe    0x430    ori a5,a5,1
    0x84013602    0x434    sd a5,0(a4)
    0x84013604    0x436    sd zero,8(a4)
    0x84013608    0x43a    li s0,3
    0x8401360a    0x43c    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401360c    0x43e    li a5,3
    0x8401360e    0x440    auipc a4,0x9
    0x84013612    0x444    sd a5,1642(a4) # ffffffff8401cc78 <current_syscall_error+0x30>
    0x84013616    0x448    li s0,3
    0x84013618    0x44a    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401361a    0x44c    li a1,2
    0x8401361c    0x44e    auipc a0,0x1a
    0x84013620    0x452    ld a0,1148(a0) # ffffffff8402da98 <ksCurThread>
    0x84013624    0x456    jal ra,ffffffff840122d0 <setThreadState>
    0x84013628    0x45a    mv a6,s4
    0x8401362a    0x45c    mv a5,s7
    0x8401362c    0x45e    mv a4,s3
    0x8401362e    0x460    ld a2,88(sp)          ; stack access
    0x84013630    0x462    ld a3,96(sp)          ; stack access
    0x84013632    0x464    ld a0,72(sp)          ; stack access
    0x84013634    0x466    ld a1,80(sp)          ; stack access
    0x84013636    0x468    jal ra,ffffffff84011626 <invokeCNodeRotate>
    0x8401363a    0x46c    mv s0,a0
    0x8401363c    0x46e    j ffffffff840132ba <decodeCNodeInvocation+0xec>
    0x8401363e    0x470    li a1,2
    0x84013640    0x472    auipc a0,0x1a
    0x84013644    0x476    ld a0,1112(a0) # ffffffff8402da98 <ksCurThread>
    0x84013648    0x47a    jal ra,ffffffff840122d0 <setThreadState>
    0x8401364c    0x47e    j ffffffff840133b4 <decodeCNodeInvocation+0x1e6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
412 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 664 nodes.

Section init_kernel (267 of 267)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 220 instructions.

Skipping 10579073 csrw stvec,a5

RVC_FTTFFT___FFT__FT.
Skipping 1007b073 csrc sstatus,a5

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp

RVC_FFFFFFFFFFF___FFdfn'UnknownInstruction (s with c_Skip := s.c_Skip(|s.procID |-> 2w|))

Skipping 0000 unimp


Stack analysis
---------------

76 stack accesses found. Annotated code for `init_kernel`:

    0x840012c2      0x0    addi sp,sp,-256
    0x840012c4      0x2    sd ra,248(sp)         ; stack access
    0x840012c6      0x4    sd s0,240(sp)         ; stack access
    0x840012c8      0x6    sd s1,232(sp)         ; stack access
    0x840012ca      0x8    sd s2,224(sp)         ; stack access
    0x840012cc      0xa    sd s3,216(sp)         ; stack access
    0x840012ce      0xc    sd s4,208(sp)         ; stack access
    0x840012d0      0xe    sd s5,200(sp)         ; stack access
    0x840012d2     0x10    sd s6,192(sp)         ; stack access
    0x840012d4     0x12    sd s7,184(sp)         ; stack access
    0x840012d6     0x14    mv s3,a3
    0x840012d8     0x16    li s0,-1
    0x840012da     0x18    slli s0,s0,0x26
    0x840012dc     0x1a    add s6,a0,s0
    0x840012e0     0x1e    add s0,s0,a1
    0x840012e2     0x20    sd s6,88(sp)          ; stack access
    0x840012e4     0x22    sd s0,96(sp)          ; stack access
    0x840012e6     0x24    slli s4,a2,0x20
    0x840012ea     0x28    srli s4,s4,0x20
    0x840012ee     0x2c    sub s2,a0,s4
    0x840012f2     0x30    sub s1,a1,s4
    0x840012f6     0x34    lui s5,0x2
    0x840012f8     0x36    add s5,s5,s1
    0x840012fa     0x38    jal ra,ffffffff8400047c <map_kernel_window>
    0x840012fe     0x3c    jal ra,ffffffff84000138 <activate_kernel_vspace>
    0x84001302     0x40    auipc a5,0xf
    0x84001306     0x44    addi a5,a5,-770 # ffffffff84010000 <ki_boot_end>
    0x8400130a     0x48    csrw stvec,a5
    0x8400130e     0x4c    jal ra,ffffffff840002cc <initLocalIRQController>
    0x84001312     0x50    jal ra,ffffffff840002b6 <initTimer>
    0x84001316     0x54    lui a5,0x6
    0x84001318     0x56    csrc sstatus,a5
    0x8400131c     0x5a    jal ra,ffffffff84000310 <initIRQController>
    0x84001320     0x5e    auipc a5,0x0
    0x84001324     0x62    addi a5,a5,512 # ffffffff84001520 <ndks_boot>
    0x84001328     0x66    lui a4,0xff021
    0x8400132c     0x6a    slli a4,a4,0xe
    0x8400132e     0x6c    sd a4,952(a5)
    0x84001332     0x70    auipc a4,0x2d
    0x84001336     0x74    addi a4,a4,-818 # ffffffff8402e000 <ki_end>
    0x8400133a     0x78    li a3,-63
    0x8400133e     0x7c    slli a3,a3,0x20
    0x84001340     0x7e    add a4,a4,a3
    0x84001342     0x80    sd a4,960(a5)
    0x84001346     0x84    sd s6,968(a5)
    0x8400134a     0x88    sd s0,976(a5)
    0x8400134e     0x8c    li a6,0
    0x84001350     0x8e    mv a4,s2
    0x84001352     0x90    mv a5,s5
    0x84001354     0x92    auipc a3,0x0
    0x84001358     0x96    addi a3,a3,1412 # ffffffff840018d8 <res_reg>
    0x8400135c     0x9a    li a2,2
    0x8400135e     0x9c    auipc a1,0x0
    0x84001362     0xa0    addi a1,a1,434 # ffffffff84001510 <avail_p_regs>
    0x84001366     0xa4    li a0,1
    0x84001368     0xa6    jal ra,ffffffff84000f6a <init_freemem>
    0x8400136c     0xaa    jal ra,ffffffff840005aa <create_root_cnode>
    0x84001370     0xae    sd a0,24(sp)          ; stack access
    0x84001372     0xb0    sd a1,32(sp)          ; stack access
    0x84001374     0xb2    srli a0,a0,0x3b
    0x84001376     0xb4    bnez a0,ffffffff8400137c <init_kernel+0xba>
    0x84001378     0xb6    jal ra,ffffffff8401034a <halt>
    0x8400137c     0xba    ld a0,24(sp)          ; stack access
    0x8400137e     0xbc    jal ra,ffffffff840005e6 <create_domain_cap>
    0x84001382     0xc0    ld a5,24(sp)          ; stack access
    0x84001384     0xc2    sd a5,152(sp)         ; stack access
    0x84001386     0xc4    ld a5,32(sp)          ; stack access
    0x84001388     0xc6    sd a5,160(sp)         ; stack access
    0x8400138a     0xc8    li s6,1
    0x8400138c     0xca    li s0,0
    0x8400138e     0xcc    li s7,54
    0x84001392     0xd0    j ffffffff84001398 <init_kernel+0xd6>
    0x84001394     0xd2    addi s0,s0,1
    0x84001396     0xd4    addi s6,s6,1
    0x84001398     0xd6    beqz s0,ffffffff84001394 <init_kernel+0xd2>
    0x8400139a     0xd8    mv a1,s0
    0x8400139c     0xda    li a0,0
    0x8400139e     0xdc    jal ra,ffffffff840117bc <setIRQState>
    0x840013a2     0xe0    bgeu s7,s6,ffffffff84001394 <init_kernel+0xd2>
    0x840013a6     0xe4    li a1,54
    0x840013aa     0xe8    li a0,2
    0x840013ac     0xea    jal ra,ffffffff840117bc <setIRQState>
    0x840013b0     0xee    ld a0,152(sp)         ; stack access
    0x840013b2     0xf0    ld a1,160(sp)         ; stack access
    0x840013b4     0xf2    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840013b8     0xf6    li a5,7
    0x840013ba     0xf8    slli a5,a5,0x3c
    0x840013bc     0xfa    sd a5,128(a0)
    0x840013be     0xfc    sd zero,136(a0)
    0x840013c2    0x100    sd zero,144(a0)
    0x840013c6    0x104    li a5,3
    0x840013c8    0x106    sd a5,152(a0)
    0x840013ca    0x108    li a3,0
    0x840013cc    0x10a    mv a2,s1
    0x840013ce    0x10c    li a1,1
    0x840013d0    0x10e    li a0,0
    0x840013d2    0x110    jal ra,ffffffff84000d86 <populate_bi_frame>
    0x840013d6    0x114    mv a2,s2
    0x840013d8    0x116    mv a3,s5
    0x840013da    0x118    ld a0,24(sp)          ; stack access
    0x840013dc    0x11a    ld a1,32(sp)          ; stack access
    0x840013de    0x11c    jal ra,ffffffff840006e8 <create_it_address_space>
    0x840013e2    0x120    sd a0,40(sp)          ; stack access
    0x840013e4    0x122    sd a1,48(sp)          ; stack access
    0x840013e6    0x124    srli a0,a0,0x3b
    0x840013e8    0x126    beqz a0,ffffffff84001378 <init_kernel+0xb6>
    0x840013ea    0x128    lui s0,0x1
    0x840013ec    0x12a    add s0,s0,s1
    0x840013ee    0x12c    mv a4,s0
    0x840013f0    0x12e    ld a2,40(sp)          ; stack access
    0x840013f2    0x130    mv a3,a1
    0x840013f4    0x132    ld a0,24(sp)          ; stack access
    0x840013f6    0x134    ld a1,32(sp)          ; stack access
    0x840013f8    0x136    jal ra,ffffffff8400060a <create_bi_frame_cap>
    0x840013fc    0x13a    mv a4,s1
    0x840013fe    0x13c    ld a2,40(sp)          ; stack access
    0x84001400    0x13e    ld a3,48(sp)          ; stack access
    0x84001402    0x140    ld a0,24(sp)          ; stack access
    0x84001404    0x142    ld a1,32(sp)          ; stack access
    0x84001406    0x144    jal ra,ffffffff84000d22 <create_ipcbuf_frame_cap>
    0x8400140a    0x148    sd a0,72(sp)          ; stack access
    0x8400140c    0x14a    sd a1,80(sp)          ; stack access
    0x8400140e    0x14c    srli a0,a0,0x3b
    0x84001410    0x14e    beqz a0,ffffffff84001378 <init_kernel+0xb6>
    0x84001412    0x150    sd s4,0(sp)           ; stack access
    0x84001414    0x152    li a7,1
    0x84001416    0x154    ld a5,88(sp)          ; stack access
    0x84001418    0x156    ld a6,96(sp)          ; stack access
    0x8400141a    0x158    ld a3,40(sp)          ; stack access
    0x8400141c    0x15a    ld a4,48(sp)          ; stack access
    0x8400141e    0x15c    ld a1,24(sp)          ; stack access
    0x84001420    0x15e    ld a2,32(sp)          ; stack access
    0x84001422    0x160    addi a0,sp,152
    0x84001424    0x162    jal ra,ffffffff84000830 <create_frames_of_region>
    0x84001428    0x166    ld a5,168(sp)         ; stack access
    0x8400142a    0x168    beqz a5,ffffffff84001378 <init_kernel+0xb6>
    0x8400142c    0x16a    auipc a5,0x0
    0x84001430    0x16e    ld a5,828(a5) # ffffffff84001768 <ndks_boot+0x248>
    0x84001434    0x172    ld a4,152(sp)         ; stack access
    0x84001436    0x174    sd a4,72(a5)
    0x84001438    0x176    ld a4,160(sp)         ; stack access
    0x8400143a    0x178    sd a4,80(a5)
    0x8400143c    0x17a    ld a0,24(sp)          ; stack access
    0x8400143e    0x17c    ld a1,32(sp)          ; stack access
    0x84001440    0x17e    jal ra,ffffffff840008fe <create_it_asid_pool>
    0x84001444    0x182    sd a0,56(sp)          ; stack access
    0x84001446    0x184    sd a1,64(sp)          ; stack access
    0x84001448    0x186    srli a0,a0,0x3b
    0x8400144a    0x188    beqz a0,ffffffff84001378 <init_kernel+0xb6>
    0x8400144c    0x18a    ld a2,40(sp)          ; stack access
    0x8400144e    0x18c    ld a3,48(sp)          ; stack access
    0x84001450    0x18e    ld a0,56(sp)          ; stack access
    0x84001452    0x190    jal ra,ffffffff8400015e <write_it_asid_pool>
    0x84001456    0x194    jal ra,ffffffff84000d02 <create_idle_thread>
    0x8400145a    0x198    beqz a0,ffffffff84001378 <init_kernel+0xb6>
    0x8400145e    0x19c    ld a5,80(sp)          ; stack access
    0x84001460    0x19e    sd a5,0(sp)           ; stack access
    0x84001462    0x1a0    ld a7,72(sp)          ; stack access
    0x84001464    0x1a2    mv a6,s1
    0x84001466    0x1a4    mv a5,s0
    0x84001468    0x1a6    mv a4,s3
    0x8400146a    0x1a8    ld a2,40(sp)          ; stack access
    0x8400146c    0x1aa    ld a3,48(sp)          ; stack access
    0x8400146e    0x1ac    ld a0,24(sp)          ; stack access
    0x84001470    0x1ae    ld a1,32(sp)          ; stack access
    0x84001472    0x1b0    jal ra,ffffffff84000ba2 <create_initial_thread>
    0x84001476    0x1b4    beqz a0,ffffffff84001378 <init_kernel+0xb6>
    0x8400147a    0x1b8    jal ra,ffffffff84000960 <init_core_state>
    0x8400147e    0x1bc    ld a0,24(sp)          ; stack access
    0x84001480    0x1be    sd a0,120(sp)         ; stack access
    0x84001482    0x1c0    ld a1,32(sp)          ; stack access
    0x84001484    0x1c2    sd a1,128(sp)         ; stack access
    0x84001486    0x1c4    lui a5,0xff021
    0x8400148a    0x1c8    slli a5,a5,0xe
    0x8400148c    0x1ca    sd a5,136(sp)         ; stack access
    0x8400148e    0x1cc    auipc a5,0xf
    0x84001492    0x1d0    addi a5,a5,-1166 # ffffffff84010000 <ki_boot_end>
    0x84001496    0x1d4    li a4,-63
    0x8400149a    0x1d8    slli a4,a4,0x20
    0x8400149c    0x1da    add a5,a5,a4
    0x8400149e    0x1dc    sd a5,144(sp)         ; stack access
    0x840014a0    0x1de    auipc s1,0x0
    0x840014a4    0x1e2    addi s1,s1,128 # ffffffff84001520 <ndks_boot>
    0x840014a8    0x1e6    ld s0,592(s1)
    0x840014ac    0x1ea    mv a2,s0
    0x840014ae    0x1ec    jal ra,ffffffff84000a90 <create_device_untypeds>
    0x840014b2    0x1f0    mv a4,s0
    0x840014b4    0x1f2    ld a2,136(sp)         ; stack access
    0x840014b6    0x1f4    ld a3,144(sp)         ; stack access
    0x840014b8    0x1f6    ld a0,120(sp)         ; stack access
    0x840014ba    0x1f8    ld a1,128(sp)         ; stack access
    0x840014bc    0x1fa    jal ra,ffffffff84000b2a <create_kernel_untypeds>
    0x840014c0    0x1fe    ld a4,592(s1)
    0x840014c4    0x202    ld a5,584(s1)
    0x840014c8    0x206    sd s0,152(a5)
    0x840014ca    0x208    sd a4,160(a5)
    0x840014cc    0x20a    beqz a0,ffffffff84001378 <init_kernel+0xb6>
    0x840014d0    0x20e    auipc a5,0x0
    0x840014d4    0x212    ld a5,664(a5) # ffffffff84001768 <ndks_boot+0x248>
    0x840014d8    0x216    sd zero,56(a5)
    0x840014dc    0x21a    sd zero,64(a5)
    0x840014e0    0x21e    jal ra,ffffffff84000b88 <bi_finalise>
    0x840014e4    0x222    li a5,1
    0x840014e6    0x224    auipc a4,0x1c
    0x840014ea    0x228    sd a5,-1686(a4) # ffffffff8401ce50 <ksNumCPUs>
    0x840014ee    0x22c    jal ra,ffffffff8401292a <schedule>
    0x840014f2    0x230    jal ra,ffffffff840123c0 <activateThread>
    0x840014f6    0x234    ld ra,248(sp)         ; stack access
    0x840014f8    0x236    ld s0,240(sp)         ; stack access
    0x840014fa    0x238    ld s1,232(sp)         ; stack access
    0x840014fc    0x23a    ld s2,224(sp)         ; stack access
    0x840014fe    0x23c    ld s3,216(sp)         ; stack access
    0x84001500    0x23e    ld s4,208(sp)         ; stack access
    0x84001502    0x240    ld s5,200(sp)         ; stack access
    0x84001504    0x242    ld s6,192(sp)         ; stack access
    0x84001506    0x244    ld s7,184(sp)         ; stack access
    0x84001508    0x246    addi sp,sp,256
    0x8400150a    0x248    ret
    0x8400150c    0x24a    unimp
    0x8400150e    0x24c    unimp

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
220 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 368 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84011806` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84011810` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_8401139C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010ADC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010AC6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84010352` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_8401015E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_840100D4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_8400030A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840002C4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a0_840002B6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84000154` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_84010A16` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010950` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010980` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_840108F0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010954` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010984` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840108F4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010832` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a3_stval_8401072C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8401008C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8401007C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84010084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840100A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84010000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000258` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840001EC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_840141AE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_840139F2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840139B2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_840139A2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a4_840139B6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840108BC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84015C10` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_8401589E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_8400130A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrc_sstatus_a5_84001318` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_8400150C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'unimp_8400150E` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
No graph spec failures.
No export failures.
No call offset failures.
> 