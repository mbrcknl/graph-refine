
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Tue Jun 16 16:11:50 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
** Load path (see loadPath variable) now contains 18 entries
** after consulting Holmakefiles

[In non-standard heap: /home/matthewb/verification/bv/HOL4/examples/machine-code/graph/local-hol-heap]
> > 
Resetting specifications database.

Specializing fetch: 4 -> 1(1)
Specializing decode ARM (cond = 14): 95 -> 95(95)
Specializing decode ARM (cond = 15): 5 -> 5(5)
Specializing decode ARM (cond not in {14, 15}): 95 -> 95(95)
Specializing decode ARM (fallback): 1 -> 1(1)
Specializing eval: 374 -> 348(348)
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
val it = (): unit
> ======================================================================
  Base name: /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel
  Poly/ML: 580
  HOL: Kananaskis 13 (stdknl) commit 08998e3c2
======================================================================
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.elf.txt, done.
  Reading /home/matthewb/verification/bv/graph-refine-master/seL4-example/target/RISCV64-O1/kernel.sigs, done.
No signature info for section: _start
No signature info for section: avail_p_regs
No signature info for section: ndks_boot
No signature info for section: rootserver
No signature info for section: rootserver_mem
No signature info for section: avail_reg
No signature info for section: res_reg
No signature info for section: trap_entry
No signature info for section: syscall
No signature info for section: exception
No signature info for section: interrupt
No signature info for section: __clzsi2
No signature info for section: __ctzsi2
No signature info for section: __clzdi2
No signature info for section: __ctzdi2
======================================================================
  Total: 269 functions, 12909 RISC-V instructions
  Longest function: decodeRISCVMMUInvocation (756 instructions)
  0 deps: 88 functions (avail_p_regs, ndks_boot, rootserver, ...)
  1 deps: 78 functions (str_to_long, memset, ...)
  2 deps: 46 functions (fastpath_reply_recv, fastpath_call, ...)
  3 deps: 24 functions (c_handle_syscall, slowpath, ...)
  4 deps: 7 functions (invokeUntyped_Retype, decodeSetIPCBuffer, ...)
  5 deps: 11 functions (invokeTCB_ThreadControl, handleRecv, ...)
  6 deps: 5 functions (decodeUntypedInvocation, decodeSetSpace, ...)
  7 deps: 3 functions (handleInvocation, decodeTCBConfigure, ...)
  8 deps: 1 functions (finaliseCap)
  11 deps: 1 functions (handleSyscall)
  12 deps: 1 functions (decodeInvocation)
  14 deps: 1 functions (decodeRISCVMMUInvocation)
  15 deps: 1 functions (decodeTCBInvocation)
  16 deps: 1 functions (decodeCNodeInvocation)
  26 deps: 1 functions (init_kernel)
======================================================================

Section avail_p_regs (1 of 269)
===============================

Deriving specifications
-----------------------

Section `avail_p_regs` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_p_regs` has 0 nodes.

Section ndks_boot (2 of 269)
============================

Deriving specifications
-----------------------

Section `ndks_boot` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ndks_boot` has 0 nodes.

Section rootserver (3 of 269)
=============================

Deriving specifications
-----------------------

Section `rootserver` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver` has 0 nodes.

Section rootserver_mem (4 of 269)
=================================

Deriving specifications
-----------------------

Section `rootserver_mem` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rootserver_mem` has 0 nodes.

Section avail_reg (5 of 269)
============================

Deriving specifications
-----------------------

Section `avail_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `avail_reg` has 0 nodes.

Section res_reg (6 of 269)
==========================

Deriving specifications
-----------------------

Section `res_reg` consists of 0 instructions.

Proving inst theorems
---------------------

0 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `res_reg` has 0 nodes.

Section __ctzdi2 (7 of 269)
===========================

Deriving specifications
-----------------------

Section `__ctzdi2` consists of 13 instructions.

RVC_TFFFFT___FT___TF..
ANDI..
RVC_TTT___________FT.
RVC_FTF___________FT.
ADDI..
RVC_TFF_FF________FT.
RVC_FFT___________FT.
BNE..
RVC_TFFFFFFFTFFFFFTF.

Stack analysis
---------------

No stack accesses found. Code for `__ctzdi2`:

    0x840173b8     0x0    mv a5,a0
    0x840173ba     0x2    andi a4,a0,1
    0x840173be     0x6    bnez a4,ffffffff840173d6 <__ctzdi2+0x1e>
    0x840173c0     0x8    li a0,0
    0x840173c2     0xa    li a3,65
    0x840173c6     0xe    srli a5,a5,0x1
    0x840173c8    0x10    addiw a0,a0,1
    0x840173ca    0x12    andi a4,a5,1
    0x840173ce    0x16    bnez a4,ffffffff840173d8 <__ctzdi2+0x20>
    0x840173d0    0x18    bne a0,a3,ffffffff840173c6 <__ctzdi2+0xe>
    0x840173d4    0x1c    ret
    0x840173d6    0x1e    li a0,0
    0x840173d8    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzdi2` has 21 nodes.

Section __clzdi2 (8 of 269)
===========================

Deriving specifications
-----------------------

Section `__clzdi2` consists of 11 instructions.

BLT..
RVC_FFF___________TF.

Stack analysis
---------------

No stack accesses found. Code for `__clzdi2`:

    0x8401739a     0x0    mv a5,a0
    0x8401739c     0x2    bltz a0,ffffffff840173b4 <__clzdi2+0x1a>
    0x840173a0     0x6    li a0,0
    0x840173a2     0x8    li a4,65
    0x840173a6     0xc    slli a5,a5,0x1
    0x840173a8     0xe    addiw a0,a0,1
    0x840173aa    0x10    bltz a5,ffffffff840173b6 <__clzdi2+0x1c>
    0x840173ae    0x14    bne a0,a4,ffffffff840173a6 <__clzdi2+0xc>
    0x840173b2    0x18    ret
    0x840173b4    0x1a    li a0,0
    0x840173b6    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzdi2` has 19 nodes.

Section __ctzsi2 (9 of 269)
===========================

Deriving specifications
-----------------------

Section `__ctzsi2` consists of 13 instructions.

RVC_TFF_TF________FT.
SRLIW..
ADDIW..

Stack analysis
---------------

No stack accesses found. Code for `__ctzsi2`:

    0x84017378     0x0    mv a4,a0
    0x8401737a     0x2    andi a0,a0,1
    0x8401737c     0x4    bnez a0,ffffffff84017396 <__ctzsi2+0x1e>
    0x8401737e     0x6    li a3,33
    0x84017382     0xa    srliw a5,a4,0x1
    0x84017386     0xe    sext.w a4,a5
    0x8401738a    0x12    addiw a0,a0,1
    0x8401738c    0x14    andi a5,a5,1
    0x8401738e    0x16    bnez a5,ffffffff84017398 <__ctzsi2+0x20>
    0x84017390    0x18    bne a0,a3,ffffffff84017382 <__ctzsi2+0xa>
    0x84017394    0x1c    ret
    0x84017396    0x1e    li a0,0
    0x84017398    0x20    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__ctzsi2` has 21 nodes.

Section __clzsi2 (10 of 269)
============================

Deriving specifications
-----------------------

Section `__clzsi2` consists of 12 instructions.

SLLIW..

Stack analysis
---------------

No stack accesses found. Code for `__clzsi2`:

    0x84017354     0x0    mv a4,a0
    0x84017356     0x2    bltz a0,ffffffff84017374 <__clzsi2+0x20>
    0x8401735a     0x6    li a0,0
    0x8401735c     0x8    li a3,34
    0x84017360     0xc    slliw a5,a4,0x1
    0x84017364    0x10    sext.w a4,a5
    0x84017368    0x14    addiw a0,a0,1
    0x8401736a    0x16    bltz a4,ffffffff84017376 <__clzsi2+0x22>
    0x8401736e    0x1a    bne a0,a3,ffffffff84017360 <__clzsi2+0xc>
    0x84017372    0x1e    ret
    0x84017374    0x20    li a0,0
    0x84017376    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `__clzsi2` has 20 nodes.

Section char_to_long (11 of 269)
================================

Deriving specifications
-----------------------

Section `char_to_long` consists of 20 instructions.

BGEU..
BLTU..

Stack analysis
---------------

No stack accesses found. Code for `char_to_long`:

    0x840172a0     0x0    addiw a5,a0,-48
    0x840172a4     0x4    andi a5,a5,255
    0x840172a8     0x8    li a4,9
    0x840172aa     0xa    bgeu a4,a5,ffffffff840172d0 <char_to_long+0x30>
    0x840172ae     0xe    addiw a5,a0,-65
    0x840172b2    0x12    andi a5,a5,255
    0x840172b6    0x16    li a4,5
    0x840172b8    0x18    bgeu a4,a5,ffffffff840172d6 <char_to_long+0x36>
    0x840172bc    0x1c    addiw a5,a0,-97
    0x840172c0    0x20    andi a5,a5,255
    0x840172c4    0x24    li a4,5
    0x840172c6    0x26    bltu a4,a5,ffffffff840172dc <char_to_long+0x3c>
    0x840172ca    0x2a    addiw a0,a0,-87
    0x840172ce    0x2e    ret
    0x840172d0    0x30    addiw a0,a0,-48
    0x840172d4    0x34    ret
    0x840172d6    0x36    addiw a0,a0,-55
    0x840172da    0x3a    ret
    0x840172dc    0x3c    li a0,-1
    0x840172de    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `char_to_long` has 30 nodes.

Section strncmp (12 of 269)
===========================

Deriving specifications
-----------------------

Section `strncmp` consists of 14 instructions.

RVC_TTF___________FT.
RVC_TFFTFT___FT___TF..
LBU..
SUBW.....
RVC_FFFFFT________FT.

Stack analysis
---------------

No stack accesses found. Code for `strncmp`:

    0x8401727c     0x0    beqz a2,ffffffff8401729c <strncmp+0x20>
    0x8401727e     0x2    mv a5,a0
    0x84017280     0x4    add a2,a2,a0
    0x84017282     0x6    lbu a4,0(a5)
    0x84017286     0xa    lbu a0,0(a1)
    0x8401728a     0xe    subw a0,a4,a0
    0x8401728e    0x12    bnez a0,ffffffff8401729e <strncmp+0x22>
    0x84017290    0x14    beqz a4,ffffffff8401729e <strncmp+0x22>
    0x84017292    0x16    addi a5,a5,1
    0x84017294    0x18    addi a1,a1,1
    0x84017296    0x1a    bne a5,a2,ffffffff84017282 <strncmp+0x6>
    0x8401729a    0x1e    ret
    0x8401729c    0x20    li a0,0
    0x8401729e    0x22    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strncmp` has 26 nodes.

Section memcpy (13 of 269)
==========================

Deriving specifications
-----------------------

Section `memcpy` consists of 9 instructions.

SB..

Stack analysis
---------------

No stack accesses found. Code for `memcpy`:

    0x84017264     0x0    beqz a2,ffffffff8401727a <memcpy+0x16>
    0x84017266     0x2    add a2,a2,a0
    0x84017268     0x4    mv a5,a0
    0x8401726a     0x6    lbu a4,0(a1)
    0x8401726e     0xa    sb a4,0(a5)
    0x84017272     0xe    addi a5,a5,1
    0x84017274    0x10    addi a1,a1,1
    0x84017276    0x12    bne a2,a5,ffffffff8401726a <memcpy+0x6>
    0x8401727a    0x16    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memcpy` has 16 nodes.

Section memzero (14 of 269)
===========================

Deriving specifications
-----------------------

Section `memzero` consists of 7 instructions.

SD..

Stack analysis
---------------

No stack accesses found. Code for `memzero`:

    0x84015a40     0x0    beqz a1,ffffffff84015a50 <memzero+0x10>
    0x84015a42     0x2    mv a5,a0
    0x84015a44     0x4    add a1,a1,a0
    0x84015a46     0x6    sd zero,0(a5)
    0x84015a4a     0xa    addi a5,a5,8
    0x84015a4c     0xc    bne a5,a1,ffffffff84015a46 <memzero+0x6>
    0x84015a50    0x10    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memzero` has 13 nodes.

Section strlcat (15 of 269)
===========================

Deriving specifications
-----------------------

Section `strlcat` consists of 31 instructions.

ADD.....
RVC_TFT___________FT.
SUB.....
RVC_TFFFFT___T____TF.

Stack analysis
---------------

No stack accesses found. Code for `strlcat`:

    0x840159e6     0x0    mv a3,a0
    0x840159e8     0x2    li a0,0
    0x840159ea     0x4    beqz a2,ffffffff840159fe <strlcat+0x18>
    0x840159ec     0x6    add a5,a3,a0
    0x840159f0     0xa    lbu a5,0(a5)
    0x840159f4     0xe    beqz a5,ffffffff84015a02 <strlcat+0x1c>
    0x840159f6    0x10    addi a0,a0,1
    0x840159f8    0x12    bne a2,a0,ffffffff840159ec <strlcat+0x6>
    0x840159fc    0x16    j ffffffff84015a3a <strlcat+0x54>
    0x840159fe    0x18    mv a0,a2
    0x84015a00    0x1a    ret
    0x84015a02    0x1c    bgeu a0,a2,ffffffff84015a3a <strlcat+0x54>
    0x84015a06    0x20    addi a5,a0,1
    0x84015a0a    0x24    bgeu a5,a2,ffffffff84015a34 <strlcat+0x4e>
    0x84015a0e    0x28    addi a6,a5,-1
    0x84015a12    0x2c    sub a4,a5,a0
    0x84015a16    0x30    add a4,a4,a1
    0x84015a18    0x32    lbu a4,-1(a4)
    0x84015a1c    0x36    beqz a4,ffffffff84015a32 <strlcat+0x4c>
    0x84015a1e    0x38    add a6,a3,a5
    0x84015a22    0x3c    sb a4,-1(a6)
    0x84015a26    0x40    addi a4,a5,1
    0x84015a2a    0x44    bgeu a4,a2,ffffffff84015a3c <strlcat+0x56>
    0x84015a2e    0x48    mv a5,a4
    0x84015a30    0x4a    j ffffffff84015a0e <strlcat+0x28>
    0x84015a32    0x4c    mv a0,a6
    0x84015a34    0x4e    add a3,a3,a0
    0x84015a36    0x50    sb zero,0(a3)
    0x84015a3a    0x54    ret
    0x84015a3c    0x56    mv a0,a5
    0x84015a3e    0x58    j ffffffff84015a34 <strlcat+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcat` has 51 nodes.

Section strlcpy (16 of 269)
===========================

Deriving specifications
-----------------------

Section `strlcpy` consists of 19 instructions.

RVC_FFFT__________FT.

Stack analysis
---------------

No stack accesses found. Code for `strlcpy`:

    0x840159b4     0x0    mv a3,a0
    0x840159b6     0x2    li a5,1
    0x840159b8     0x4    bgeu a5,a2,ffffffff840159e2 <strlcpy+0x2e>
    0x840159bc     0x8    addi a2,a2,-1
    0x840159be     0xa    li a5,0
    0x840159c0     0xc    mv a0,a5
    0x840159c2     0xe    addi a5,a5,1
    0x840159c4    0x10    add a4,a1,a0
    0x840159c8    0x14    lbu a4,0(a4)
    0x840159cc    0x18    beqz a4,ffffffff840159da <strlcpy+0x26>
    0x840159ce    0x1a    add a0,a0,a3
    0x840159d0    0x1c    sb a4,0(a0)
    0x840159d4    0x20    bne a5,a2,ffffffff840159c0 <strlcpy+0xc>
    0x840159d8    0x24    mv a0,a5
    0x840159da    0x26    add a3,a3,a0
    0x840159dc    0x28    sb zero,0(a3)
    0x840159e0    0x2c    ret
    0x840159e2    0x2e    li a0,0
    0x840159e4    0x30    j ffffffff840159da <strlcpy+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strlcpy` has 29 nodes.

Section strnlen (17 of 269)
===========================

Deriving specifications
-----------------------

Section `strnlen` consists of 11 instructions.


Stack analysis
---------------

No stack accesses found. Code for `strnlen`:

    0x84015998     0x0    mv a4,a0
    0x8401599a     0x2    li a0,0
    0x8401599c     0x4    beqz a1,ffffffff840159b0 <strnlen+0x18>
    0x8401599e     0x6    add a5,a4,a0
    0x840159a2     0xa    lbu a5,0(a5)
    0x840159a6     0xe    beqz a5,ffffffff840159ae <strnlen+0x16>
    0x840159a8    0x10    addi a0,a0,1
    0x840159aa    0x12    bne a1,a0,ffffffff8401599e <strnlen+0x6>
    0x840159ae    0x16    ret
    0x840159b0    0x18    mv a0,a1
    0x840159b2    0x1a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `strnlen` has 20 nodes.

Section copyMRs (18 of 269)
===========================

Deriving specifications
-----------------------

Section `copyMRs` consists of 46 instructions.

RVC_FTT___________FF..
RVC_TTT___________FF..
LD..

Stack analysis
---------------

No stack accesses found. Code for `copyMRs`:

    0x84013ed8     0x0    mv a5,a0
    0x84013eda     0x2    mv a0,a4
    0x84013edc     0x4    beqz a4,ffffffff84013f38 <copyMRs+0x60>
    0x84013ede     0x6    ld a4,88(a5)
    0x84013ee0     0x8    sd a4,88(a2)
    0x84013ee2     0xa    li a4,1
    0x84013ee4     0xc    bgeu a4,a0,ffffffff84013f2c <copyMRs+0x54>
    0x84013ee8    0x10    ld a4,96(a5)
    0x84013eea    0x12    sd a4,96(a2)
    0x84013eec    0x14    li a4,2
    0x84013eee    0x16    bgeu a4,a0,ffffffff84013f30 <copyMRs+0x58>
    0x84013ef2    0x1a    ld a4,104(a5)
    0x84013ef4    0x1c    sd a4,104(a2)
    0x84013ef6    0x1e    li a4,3
    0x84013ef8    0x20    bgeu a4,a0,ffffffff84013f34 <copyMRs+0x5c>
    0x84013efc    0x24    ld a5,112(a5)
    0x84013efe    0x26    sd a5,112(a2)
    0x84013f00    0x28    li a5,4
    0x84013f02    0x2a    beqz a3,ffffffff84013f3c <copyMRs+0x64>
    0x84013f04    0x2c    beqz a1,ffffffff84013f40 <copyMRs+0x68>
    0x84013f06    0x2e    bgeu a5,a0,ffffffff84013f44 <copyMRs+0x6c>
    0x84013f0a    0x32    addi a5,a5,1
    0x84013f0c    0x34    slli a5,a5,0x3
    0x84013f0e    0x36    addi a4,a0,1
    0x84013f12    0x3a    slli a4,a4,0x3
    0x84013f14    0x3c    add a2,a1,a5
    0x84013f18    0x40    ld a6,0(a2)
    0x84013f1c    0x44    add a2,a3,a5
    0x84013f20    0x48    sd a6,0(a2)
    0x84013f24    0x4c    addi a5,a5,8
    0x84013f26    0x4e    bne a5,a4,ffffffff84013f14 <copyMRs+0x3c>
    0x84013f2a    0x52    ret
    0x84013f2c    0x54    li a5,1
    0x84013f2e    0x56    j ffffffff84013f02 <copyMRs+0x2a>
    0x84013f30    0x58    li a5,2
    0x84013f32    0x5a    j ffffffff84013f02 <copyMRs+0x2a>
    0x84013f34    0x5c    li a5,3
    0x84013f36    0x5e    j ffffffff84013f02 <copyMRs+0x2a>
    0x84013f38    0x60    mv a5,a4
    0x84013f3a    0x62    j ffffffff84013f02 <copyMRs+0x2a>
    0x84013f3c    0x64    mv a0,a5
    0x84013f3e    0x66    ret
    0x84013f40    0x68    mv a0,a5
    0x84013f42    0x6a    ret
    0x84013f44    0x6c    mv a0,a5
    0x84013f46    0x6e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyMRs` has 76 nodes.

Section setExtraBadge (19 of 269)
=================================

Deriving specifications
-----------------------

Section `setExtraBadge` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setExtraBadge`:

    0x84013dde    0x0    addi a2,a2,122 # fffffffff800007a <ki_end+0x73fd107a>
    0x84013de2    0x4    slli a2,a2,0x3
    0x84013de4    0x6    add a0,a0,a2
    0x84013de6    0x8    sd a1,0(a0)
    0x84013de8    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setExtraBadge` has 7 nodes.

Section getExtraCPtr (20 of 269)
================================

Deriving specifications
-----------------------

Section `getExtraCPtr` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getExtraCPtr`:

    0x84013dd2    0x0    addi a1,a1,122
    0x84013dd6    0x4    slli a1,a1,0x3
    0x84013dd8    0x6    add a0,a0,a1
    0x84013dda    0x8    ld a0,0(a0)
    0x84013ddc    0xa    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getExtraCPtr` has 7 nodes.

Section tcbEPDequeue (21 of 269)
================================

Deriving specifications
-----------------------

Section `tcbEPDequeue` consists of 19 instructions.

RVC_TTT___________TF..
RVC_FTT_FT________TF.
RVC_FTTFFFFTFFFFFTFT.

Stack analysis
---------------

2 stack accesses found. Annotated code for `tcbEPDequeue`:

    0x84012e56     0x0    addi sp,sp,-32
    0x84012e58     0x2    mv a5,a0
    0x84012e5a     0x4    sd a1,0(sp)           ; stack access
    0x84012e5c     0x6    mv a1,a2
    0x84012e5e     0x8    ld a4,416(a0)
    0x84012e62     0xc    beqz a4,ffffffff84012e80 <tcbEPDequeue+0x2a>
    0x84012e64     0xe    ld a0,0(sp)           ; stack access
    0x84012e66    0x10    ld a3,408(a5)
    0x84012e6a    0x14    sd a3,408(a4)
    0x84012e6e    0x18    ld a4,408(a5)
    0x84012e72    0x1c    beqz a4,ffffffff84012e86 <tcbEPDequeue+0x30>
    0x84012e74    0x1e    ld a5,416(a5)
    0x84012e78    0x22    sd a5,416(a4)
    0x84012e7c    0x26    addi sp,sp,32
    0x84012e7e    0x28    ret
    0x84012e80    0x2a    ld a0,408(a0)
    0x84012e84    0x2e    j ffffffff84012e6e <tcbEPDequeue+0x18>
    0x84012e86    0x30    ld a1,416(a5)
    0x84012e8a    0x34    j ffffffff84012e7c <tcbEPDequeue+0x26>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPDequeue` has 34 nodes.

Section tcbEPAppend (22 of 269)
===============================

Deriving specifications
-----------------------

Section `tcbEPAppend` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `tcbEPAppend`:

    0x84012e3c     0x0    addi sp,sp,-32
    0x84012e3e     0x2    mv a5,a0
    0x84012e40     0x4    beqz a1,ffffffff84012e48 <tcbEPAppend+0xc>
    0x84012e42     0x6    mv a0,a1
    0x84012e44     0x8    sd a5,408(a2)
    0x84012e48     0xc    sd a2,416(a5)
    0x84012e4c    0x10    sd zero,408(a5)
    0x84012e50    0x14    mv a1,a5
    0x84012e52    0x16    addi sp,sp,32
    0x84012e54    0x18    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbEPAppend` has 16 nodes.

Section tcbSchedDequeue (23 of 269)
===================================

Deriving specifications
-----------------------

Section `tcbSchedDequeue` consists of 68 instructions.

SLLI..
AUIPC.
SRLI..
SLL.....
XORI..
RVC_TFFFTT___TT___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedDequeue`:

    0x84012a98     0x0    ld a5,288(a0)
    0x84012a9c     0x4    andi a5,a5,1
    0x84012a9e     0x6    beqz a5,ffffffff84012b0c <tcbSchedDequeue+0x74>
    0x84012aa0     0x8    ld a1,344(a0)
    0x84012aa4     0xc    ld a2,360(a0)
    0x84012aa8    0x10    slli a5,a1,0x8
    0x84012aac    0x14    add a5,a5,a2
    0x84012aae    0x16    slli a3,a5,0x4
    0x84012ab2    0x1a    auipc a4,0x7
    0x84012ab6    0x1e    addi a4,a4,-690 # ffffffff84019800 <ksReadyQueues>
    0x84012aba    0x22    add a4,a4,a3
    0x84012abc    0x24    ld a7,8(a4)
    0x84012ac0    0x28    ld a3,400(a0)
    0x84012ac4    0x2c    beqz a3,ffffffff84012b0e <tcbSchedDequeue+0x76>
    0x84012ac6    0x2e    slli a2,a5,0x4
    0x84012aca    0x32    auipc a4,0x7
    0x84012ace    0x36    addi a4,a4,-714 # ffffffff84019800 <ksReadyQueues>
    0x84012ad2    0x3a    add a4,a4,a2
    0x84012ad4    0x3c    ld a6,0(a4)
    0x84012ad8    0x40    ld a4,392(a0)
    0x84012adc    0x44    sd a4,392(a3)
    0x84012ae0    0x48    ld a4,392(a0)
    0x84012ae4    0x4c    beqz a4,ffffffff84012b6e <tcbSchedDequeue+0xd6>
    0x84012ae6    0x4e    ld a3,400(a0)
    0x84012aea    0x52    sd a3,400(a4)
    0x84012aee    0x56    slli a5,a5,0x4
    0x84012af0    0x58    auipc a4,0x7
    0x84012af4    0x5c    addi a4,a4,-752 # ffffffff84019800 <ksReadyQueues>
    0x84012af8    0x60    add a5,a5,a4
    0x84012afa    0x62    sd a6,0(a5)
    0x84012afe    0x66    sd a7,8(a5)
    0x84012b02    0x6a    ld a5,288(a0)
    0x84012b06    0x6e    andi a5,a5,-2
    0x84012b08    0x70    sd a5,288(a0)
    0x84012b0c    0x74    ret
    0x84012b0e    0x76    ld a6,392(a0)
    0x84012b12    0x7a    bnez a6,ffffffff84012b6a <tcbSchedDequeue+0xd2>
    0x84012b16    0x7e    srli t1,a2,0x6
    0x84012b1a    0x82    li a4,3
    0x84012b1c    0x84    sub a3,a4,t1
    0x84012b20    0x88    li a4,1
    0x84012b22    0x8a    sll a2,a4,a2
    0x84012b26    0x8e    not a2,a2
    0x84012b2a    0x92    slli a4,a1,0x2
    0x84012b2e    0x96    add a4,a4,a3
    0x84012b30    0x98    slli a4,a4,0x3
    0x84012b32    0x9a    auipc a3,0x5
    0x84012b36    0x9e    addi a3,a3,1230 # ffffffff84018000 <riscvKSASIDTable>
    0x84012b3a    0xa2    add a4,a4,a3
    0x84012b3c    0xa4    ld a3,1168(a4)
    0x84012b40    0xa8    and a2,a2,a3
    0x84012b42    0xaa    sd a2,1168(a4)
    0x84012b46    0xae    bnez a2,ffffffff84012ae0 <tcbSchedDequeue+0x48>
    0x84012b48    0xb0    slli a1,a1,0x3
    0x84012b4a    0xb2    auipc a4,0x5
    0x84012b4e    0xb6    addi a4,a4,1206 # ffffffff84018000 <riscvKSASIDTable>
    0x84012b52    0xba    add a1,a1,a4
    0x84012b54    0xbc    li a4,1
    0x84012b56    0xbe    sll a4,a4,t1
    0x84012b5a    0xc2    not a4,a4
    0x84012b5e    0xc6    ld a3,1040(a1)
    0x84012b62    0xca    and a4,a4,a3
    0x84012b64    0xcc    sd a4,1040(a1)
    0x84012b68    0xd0    j ffffffff84012ae0 <tcbSchedDequeue+0x48>
    0x84012b6a    0xd2    mv a4,a6
    0x84012b6c    0xd4    j ffffffff84012ae6 <tcbSchedDequeue+0x4e>
    0x84012b6e    0xd6    ld a7,400(a0)
    0x84012b72    0xda    j ffffffff84012aee <tcbSchedDequeue+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedDequeue` has 100 nodes.

Section tcbSchedAppend (24 of 269)
==================================

Deriving specifications
-----------------------

Section `tcbSchedAppend` consists of 49 instructions.

ORI..
RVC_TFFTT____T____TF..
OR.....
RVC_TFFTFT___T____TF.
RVC_TFFFTT___TF___FT..

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedAppend`:

    0x840129ae     0x0    ld a5,288(a0)
    0x840129b2     0x4    andi a5,a5,1
    0x840129b4     0x6    bnez a5,ffffffff84012a00 <tcbSchedAppend+0x52>
    0x840129b6     0x8    ld a3,344(a0)
    0x840129ba     0xc    ld a1,360(a0)
    0x840129be    0x10    slli a5,a3,0x8
    0x840129c2    0x14    add a5,a5,a1
    0x840129c4    0x16    slli a2,a5,0x4
    0x840129c8    0x1a    auipc a4,0x7
    0x840129cc    0x1e    addi a4,a4,-456 # ffffffff84019800 <ksReadyQueues>
    0x840129d0    0x22    add a4,a4,a2
    0x840129d2    0x24    ld a2,0(a4)
    0x840129d4    0x26    ld a4,8(a4)
    0x840129d6    0x28    beqz a2,ffffffff84012a02 <tcbSchedAppend+0x54>
    0x840129d8    0x2a    sd a0,392(a4)
    0x840129dc    0x2e    sd a4,400(a0)
    0x840129e0    0x32    sd zero,392(a0)
    0x840129e4    0x36    slli a5,a5,0x4
    0x840129e6    0x38    auipc a4,0x7
    0x840129ea    0x3c    addi a4,a4,-486 # ffffffff84019800 <ksReadyQueues>
    0x840129ee    0x40    add a5,a5,a4
    0x840129f0    0x42    sd a2,0(a5)
    0x840129f2    0x44    sd a0,8(a5)
    0x840129f4    0x46    ld a5,288(a0)
    0x840129f8    0x4a    ori a5,a5,1
    0x840129fc    0x4e    sd a5,288(a0)
    0x84012a00    0x52    ret
    0x84012a02    0x54    srli t1,a1,0x6
    0x84012a06    0x58    li t3,3
    0x84012a08    0x5a    sub t3,t3,t1
    0x84012a0c    0x5e    auipc a6,0x5
    0x84012a10    0x62    addi a6,a6,1524 # ffffffff84018000 <riscvKSASIDTable>
    0x84012a14    0x66    slli a7,a3,0x3
    0x84012a18    0x6a    add a7,a7,a6
    0x84012a1a    0x6c    li a2,1
    0x84012a1c    0x6e    sll t1,a2,t1
    0x84012a20    0x72    ld t4,1040(a7)
    0x84012a24    0x76    or t1,t4,t1
    0x84012a28    0x7a    sd t1,1040(a7)
    0x84012a2c    0x7e    slli a3,a3,0x2
    0x84012a2e    0x80    add a3,a3,t3
    0x84012a30    0x82    slli a3,a3,0x3
    0x84012a32    0x84    add a3,a3,a6
    0x84012a34    0x86    sll a2,a2,a1
    0x84012a38    0x8a    ld a1,1168(a3) # ffffffffe0000490 <ki_end+0x5bfd1490>
    0x84012a3c    0x8e    or a2,a2,a1
    0x84012a3e    0x90    sd a2,1168(a3)
    0x84012a42    0x94    mv a2,a0
    0x84012a44    0x96    j ffffffff840129dc <tcbSchedAppend+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedAppend` has 70 nodes.

Section tcbSchedEnqueue (25 of 269)
===================================

Deriving specifications
-----------------------

Section `tcbSchedEnqueue` consists of 49 instructions.

RVC_TFFTT____FT___TF.

Stack analysis
---------------

No stack accesses found. Code for `tcbSchedEnqueue`:

    0x840124f6     0x0    ld a5,288(a0) # 2120 <KERNEL_OFFSET-0xfffffffeffffdee0>
    0x840124fa     0x4    andi a5,a5,1
    0x840124fc     0x6    bnez a5,ffffffff84012548 <tcbSchedEnqueue+0x52>
    0x840124fe     0x8    ld a3,344(a0)
    0x84012502     0xc    ld a6,360(a0)
    0x84012506    0x10    slli a5,a3,0x8
    0x8401250a    0x14    add a5,a5,a6
    0x8401250c    0x16    slli a2,a5,0x4
    0x84012510    0x1a    auipc a4,0x7
    0x84012514    0x1e    addi a4,a4,752 # ffffffff84019800 <ksReadyQueues>
    0x84012518    0x22    add a4,a4,a2
    0x8401251a    0x24    ld a1,0(a4)
    0x8401251c    0x26    ld a2,8(a4)
    0x8401251e    0x28    beqz a2,ffffffff8401254a <tcbSchedEnqueue+0x54>
    0x84012520    0x2a    sd a0,400(a1)
    0x84012524    0x2e    sd zero,400(a0)
    0x84012528    0x32    sd a1,392(a0)
    0x8401252c    0x36    slli a5,a5,0x4
    0x8401252e    0x38    auipc a4,0x7
    0x84012532    0x3c    addi a4,a4,722 # ffffffff84019800 <ksReadyQueues>
    0x84012536    0x40    add a5,a5,a4
    0x84012538    0x42    sd a0,0(a5)
    0x8401253a    0x44    sd a2,8(a5)
    0x8401253c    0x46    ld a5,288(a0)
    0x84012540    0x4a    ori a5,a5,1
    0x84012544    0x4e    sd a5,288(a0)
    0x84012548    0x52    ret
    0x8401254a    0x54    srli t1,a6,0x6
    0x8401254e    0x58    li t3,3
    0x84012550    0x5a    sub t3,t3,t1
    0x84012554    0x5e    auipc a2,0x6
    0x84012558    0x62    addi a2,a2,-1364 # ffffffff84018000 <riscvKSASIDTable>
    0x8401255c    0x66    slli a7,a3,0x3
    0x84012560    0x6a    add a7,a7,a2
    0x84012562    0x6c    li a4,1
    0x84012564    0x6e    sll t1,a4,t1
    0x84012568    0x72    ld t4,1040(a7)
    0x8401256c    0x76    or t1,t4,t1
    0x84012570    0x7a    sd t1,1040(a7)
    0x84012574    0x7e    slli a3,a3,0x2
    0x84012576    0x80    add a3,a3,t3
    0x84012578    0x82    slli a3,a3,0x3
    0x8401257a    0x84    add a3,a3,a2
    0x8401257c    0x86    sll a4,a4,a6
    0x84012580    0x8a    ld a6,1168(a3) # fffffffffc000490 <ki_end+0x77fd1490>
    0x84012584    0x8e    or a4,a4,a6
    0x84012588    0x92    sd a4,1168(a3)
    0x8401258c    0x96    mv a2,a0
    0x8401258e    0x98    j ffffffff84012524 <tcbSchedEnqueue+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `tcbSchedEnqueue` has 70 nodes.

Section updateCapData (26 of 269)
=================================

Deriving specifications
-----------------------

Section `updateCapData` consists of 58 instructions.

BEQ..

Stack analysis
---------------

18 stack accesses found. Annotated code for `updateCapData`:

    0x8401220a     0x0    addi sp,sp,-32
    0x8401220c     0x2    srli a5,a2,0x3b
    0x84012210     0x6    andi a4,a5,1
    0x84012214     0xa    bnez a4,ffffffff8401222e <updateCapData+0x24>
    0x84012216     0xc    li a4,6
    0x84012218     0xe    beq a5,a4,ffffffff8401224a <updateCapData+0x40>
    0x8401221c    0x12    li a4,10
    0x8401221e    0x14    beq a5,a4,ffffffff8401225a <updateCapData+0x50>
    0x84012222    0x18    li a4,4
    0x84012224    0x1a    beq a5,a4,ffffffff8401223a <updateCapData+0x30>
    0x84012228    0x1e    sd a2,16(sp)          ; stack access
    0x8401222a    0x20    sd a3,24(sp)          ; stack access
    0x8401222c    0x22    j ffffffff84012232 <updateCapData+0x28>
    0x8401222e    0x24    sd a2,16(sp)          ; stack access
    0x84012230    0x26    sd a3,24(sp)          ; stack access
    0x84012232    0x28    ld a0,16(sp)          ; stack access
    0x84012234    0x2a    ld a1,24(sp)          ; stack access
    0x84012236    0x2c    addi sp,sp,32
    0x84012238    0x2e    ret
    0x8401223a    0x30    or a3,a3,a0
    0x8401223c    0x32    bnez a3,ffffffff84012244 <updateCapData+0x3a>
    0x8401223e    0x34    sd a2,16(sp)          ; stack access
    0x84012240    0x36    sd a1,24(sp)          ; stack access
    0x84012242    0x38    j ffffffff84012232 <updateCapData+0x28>
    0x84012244    0x3a    sd zero,16(sp)        ; stack access
    0x84012246    0x3c    sd zero,24(sp)        ; stack access
    0x84012248    0x3e    j ffffffff84012232 <updateCapData+0x28>
    0x8401224a    0x40    or a3,a3,a0
    0x8401224c    0x42    bnez a3,ffffffff84012254 <updateCapData+0x4a>
    0x8401224e    0x44    sd a2,16(sp)          ; stack access
    0x84012250    0x46    sd a1,24(sp)          ; stack access
    0x84012252    0x48    j ffffffff84012232 <updateCapData+0x28>
    0x84012254    0x4a    sd zero,16(sp)        ; stack access
    0x84012256    0x4c    sd zero,24(sp)        ; stack access
    0x84012258    0x4e    j ffffffff84012232 <updateCapData+0x28>
    0x8401225a    0x50    andi a4,a1,63
    0x8401225e    0x54    srli a5,a2,0x2f
    0x84012262    0x58    andi a5,a5,63
    0x84012266    0x5c    add a5,a5,a4
    0x84012268    0x5e    li a3,64
    0x8401226c    0x62    bgeu a3,a5,ffffffff84012276 <updateCapData+0x6c>
    0x84012270    0x66    sd zero,16(sp)        ; stack access
    0x84012272    0x68    sd zero,24(sp)        ; stack access
    0x84012274    0x6a    j ffffffff84012232 <updateCapData+0x28>
    0x84012276    0x6c    li a5,-63
    0x8401227a    0x70    slli a5,a5,0x35
    0x8401227c    0x72    addi a5,a5,-1
    0x8401227e    0x74    and a2,a2,a5
    0x84012280    0x76    slli a5,a4,0x35
    0x84012284    0x7a    or a2,a2,a5
    0x84012286    0x7c    sd a2,16(sp)          ; stack access
    0x84012288    0x7e    li a5,-1
    0x8401228a    0x80    sll a5,a5,a4
    0x8401228e    0x84    not a5,a5
    0x84012292    0x88    srli a1,a1,0x6
    0x84012294    0x8a    and a1,a1,a5
    0x84012296    0x8c    sd a1,24(sp)          ; stack access
    0x84012298    0x8e    j ffffffff84012232 <updateCapData+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
58 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `updateCapData` has 91 nodes.

Section hasCancelSendRights (27 of 269)
=======================================

Deriving specifications
-----------------------

Section `hasCancelSendRights` consists of 20 instructions.

RVC_FFFFFFFT______FT.
AND.....
RVC_TFFFTT___FF___FT..
SLTIU..

Stack analysis
---------------

No stack accesses found. Code for `hasCancelSendRights`:

    0x84011c68     0x0    addi sp,sp,-16
    0x84011c6a     0x2    srli a4,a0,0x3b
    0x84011c6e     0x6    li a5,4
    0x84011c70     0x8    beq a4,a5,ffffffff84011c7a <hasCancelSendRights+0x12>
    0x84011c74     0xc    li a0,0
    0x84011c76     0xe    addi sp,sp,16
    0x84011c78    0x10    ret
    0x84011c7a    0x12    li a4,3
    0x84011c7c    0x14    slli a4,a4,0x37
    0x84011c7e    0x16    and a3,a0,a4
    0x84011c82    0x1a    li a5,0
    0x84011c84    0x1c    beq a3,a4,ffffffff84011c8c <hasCancelSendRights+0x24>
    0x84011c88    0x20    mv a0,a5
    0x84011c8a    0x22    j ffffffff84011c76 <hasCancelSendRights+0xe>
    0x84011c8c    0x24    li a5,3
    0x84011c8e    0x26    slli a5,a5,0x39
    0x84011c90    0x28    and a0,a0,a5
    0x84011c92    0x2a    sub a0,a0,a5
    0x84011c94    0x2c    seqz a5,a0
    0x84011c98    0x30    j ffffffff84011c88 <hasCancelSendRights+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `hasCancelSendRights` has 25 nodes.

Section bindNotification (28 of 269)
====================================

Deriving specifications
-----------------------

Section `bindNotification` consists of 10 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bindNotification`:

    0x84011c0a     0x0    ld a4,24(a1)
    0x84011c0c     0x2    li a5,-1
    0x84011c0e     0x4    slli a3,a5,0x27
    0x84011c12     0x8    and a4,a4,a3
    0x84011c14     0xa    srli a5,a5,0x19
    0x84011c16     0xc    and a5,a5,a0
    0x84011c18     0xe    or a5,a5,a4
    0x84011c1a    0x10    sd a5,24(a1)
    0x84011c1c    0x12    sd a1,304(a0)
    0x84011c20    0x16    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bindNotification` has 14 nodes.

Section unbindNotification (29 of 269)
======================================

Deriving specifications
-----------------------

Section `unbindNotification` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindNotification`:

    0x84011bf6     0x0    ld a4,304(a0)
    0x84011bfa     0x4    beqz a4,ffffffff84011c08 <unbindNotification+0x12>
    0x84011bfc     0x6    ld a5,24(a4)
    0x84011bfe     0x8    srli a5,a5,0x27
    0x84011c00     0xa    slli a5,a5,0x27
    0x84011c02     0xc    sd a5,24(a4)
    0x84011c04     0xe    sd zero,304(a0)
    0x84011c08    0x12    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindNotification` has 15 nodes.

Section unbindMaybeNotification (30 of 269)
===========================================

Deriving specifications
-----------------------

Section `unbindMaybeNotification` consists of 16 instructions.


Stack analysis
---------------

No stack accesses found. Code for `unbindMaybeNotification`:

    0x84011bd0     0x0    ld a4,24(a0)
    0x84011bd2     0x2    slli a5,a4,0x19
    0x84011bd6     0x6    srli a5,a5,0x19
    0x84011bd8     0x8    srli a3,a4,0x26
    0x84011bdc     0xc    andi a3,a3,1
    0x84011bde     0xe    beqz a3,ffffffff84011bf2 <unbindMaybeNotification+0x22>
    0x84011be0    0x10    li a3,-1
    0x84011be2    0x12    slli a3,a3,0x27
    0x84011be4    0x14    or a5,a5,a3
    0x84011be6    0x16    srli a4,a4,0x27
    0x84011be8    0x18    slli a4,a4,0x27
    0x84011bea    0x1a    sd a4,24(a0)
    0x84011bec    0x1c    sd zero,304(a5) # fffffffff8000130 <ki_end+0x73fd1130>
    0x84011bf0    0x20    ret
    0x84011bf2    0x22    beqz a5,ffffffff84011bf0 <unbindMaybeNotification+0x20>
    0x84011bf4    0x24    j ffffffff84011be6 <unbindMaybeNotification+0x16>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unbindMaybeNotification` has 24 nodes.

Section setIRQState (31 of 269)
===============================

Deriving specifications
-----------------------

Section `setIRQState` consists of 35 instructions.

Skipping 1047b7f3 csrrc a5,sie,a5

Skipping 1047a7f3 csrrs a5,sie,a5

LUI.
RVC_FTF___________FF..
RVC_TTF___________FF..

Stack analysis
---------------

No stack accesses found. Code for `setIRQState`:

    0x84011a7e     0x0    slli a4,a1,0x3
    0x84011a82     0x4    auipc a5,0x6
    0x84011a86     0x8    addi a5,a5,1406 # ffffffff84018000 <riscvKSASIDTable>
    0x84011a8a     0xc    add a5,a5,a4
    0x84011a8c     0xe    sd a0,1752(a5)
    0x84011a90    0x12    li a5,54
    0x84011a94    0x16    bne a1,a5,ffffffff84011aae <setIRQState+0x30>
    0x84011a98    0x1a    bnez a0,ffffffff84011aa4 <setIRQState+0x26>
    0x84011a9a    0x1c    li a5,32
    0x84011a9e    0x20    csrrc a5,sie,a5
    0x84011aa2    0x24    ret
    0x84011aa4    0x26    li a5,32
    0x84011aa8    0x2a    csrrs a5,sie,a5
    0x84011aac    0x2e    ret
    0x84011aae    0x30    andi a3,a1,31
    0x84011ab2    0x34    srli a1,a1,0x5
    0x84011ab4    0x36    slli a1,a1,0x2
    0x84011ab6    0x38    lui a4,0xcc002
    0x84011aba    0x3c    addi a4,a4,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x84011abe    0x40    add a1,a1,a4
    0x84011ac0    0x42    lw a5,0(a1)
    0x84011ac2    0x44    sext.w a4,a5
    0x84011ac6    0x48    bnez a0,ffffffff84011ada <setIRQState+0x5c>
    0x84011ac8    0x4a    li a5,1
    0x84011aca    0x4c    sll a5,a5,a3
    0x84011ace    0x50    not a5,a5
    0x84011ad2    0x54    and a5,a5,a4
    0x84011ad4    0x56    sext.w a5,a5
    0x84011ad6    0x58    sw a5,0(a1)
    0x84011ad8    0x5a    ret
    0x84011ada    0x5c    li a5,1
    0x84011adc    0x5e    sll a5,a5,a3
    0x84011ae0    0x62    or a5,a5,a4
    0x84011ae2    0x64    sext.w a5,a5
    0x84011ae4    0x66    j ffffffff84011ad6 <setIRQState+0x58>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQState` has 49 nodes.

Section isIRQActive (32 of 269)
===============================

Deriving specifications
-----------------------

Section `isIRQActive` consists of 7 instructions.

SLTU.....

Stack analysis
---------------

No stack accesses found. Code for `isIRQActive`:

    0x84011a66     0x0    slli a5,a0,0x3
    0x84011a6a     0x4    auipc a0,0x6
    0x84011a6e     0x8    addi a0,a0,1430 # ffffffff84018000 <riscvKSASIDTable>
    0x84011a72     0xc    add a0,a0,a5
    0x84011a74     0xe    ld a0,1752(a0)
    0x84011a78    0x12    snez a0,a0
    0x84011a7c    0x16    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isIRQActive` has 9 nodes.

Section invokeIRQHandler_AckIRQ (33 of 269)
===========================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_AckIRQ` consists of 4 instructions.


Stack analysis
---------------

No stack accesses found. Code for `invokeIRQHandler_AckIRQ`:

    0x84011a5c    0x0    sext.w a0,a0
    0x84011a5e    0x2    lui a5,0xcc202
    0x84011a62    0x6    sw a0,4(a5)
    0x84011a64    0x8    ret

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_AckIRQ` has 6 nodes.

Section replyFromKernel_success_empty (34 of 269)
=================================================

Deriving specifications
-----------------------

Section `replyFromKernel_success_empty` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `replyFromKernel_success_empty`:

    0x84011a52    0x0    sd zero,72(a0)
    0x84011a56    0x4    sd zero,80(a0)
    0x84011a5a    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_success_empty` has 6 nodes.

Section loadCapTransfer (35 of 269)
===================================

Deriving specifications
-----------------------

Section `loadCapTransfer` consists of 7 instructions.


Stack analysis
---------------

Section `loadCapTransfer` expects pointer to stack in a0.
3 stack accesses found. Annotated code for `loadCapTransfer`:

    0x84011a3e     0x0    ld a3,1008(a1)
    0x84011a42     0x4    ld a4,1016(a1)
    0x84011a46     0x8    ld a2,1000(a1)
    0x84011a4a     0xc    sd a2,0(a0)           ; stack access
    0x84011a4c     0xe    sd a3,8(a0)           ; stack access
    0x84011a4e    0x10    sd a4,16(a0)          ; stack access
    0x84011a50    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `loadCapTransfer` has 14 nodes.

Section ensureEmptySlot (36 of 269)
===================================

Deriving specifications
-----------------------

Section `ensureEmptySlot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `ensureEmptySlot`:

    0x840119cc     0x0    ld a0,0(a0)
    0x840119ce     0x2    srli a0,a0,0x3b
    0x840119d0     0x4    bnez a0,ffffffff840119d4 <ensureEmptySlot+0x8>
    0x840119d2     0x6    ret
    0x840119d4     0x8    li a5,8
    0x840119d6     0xa    auipc a4,0x7
    0x840119da     0xe    sd a5,-774(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840119de    0x12    li a0,3
    0x840119e0    0x14    j ffffffff840119d2 <ensureEmptySlot+0x6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureEmptySlot` has 14 nodes.

Section setupReplyMaster (37 of 269)
====================================

Deriving specifications
-----------------------

Section `setupReplyMaster` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setupReplyMaster`:

    0x840119ae     0x0    andi a4,a0,-1024
    0x840119b2     0x4    ld a5,64(a4)
    0x840119b4     0x6    srli a5,a5,0x3b
    0x840119b6     0x8    bnez a5,ffffffff840119ca <setupReplyMaster+0x1c>
    0x840119b8     0xa    li a5,1
    0x840119ba     0xc    slli a5,a5,0x3e
    0x840119bc     0xe    addi a5,a5,3
    0x840119be    0x10    sd a5,64(a4)
    0x840119c0    0x12    sd a0,72(a4)
    0x840119c2    0x14    sd zero,80(a4) # fffffffff8000050 <ki_end+0x73fd1050>
    0x840119c6    0x18    li a5,3
    0x840119c8    0x1a    sd a5,88(a4)
    0x840119ca    0x1c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupReplyMaster` has 21 nodes.

Section insertNewCap (38 of 269)
================================

Deriving specifications
-----------------------

Section `insertNewCap` consists of 42 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `insertNewCap`:

    0x84011952     0x0    addi sp,sp,-16
    0x84011954     0x2    sd a2,0(sp)           ; stack access
    0x84011956     0x4    sd a3,8(sp)           ; stack access
    0x84011958     0x6    ld a4,24(a0)
    0x8401195a     0x8    lui a5,0xf8000
    0x8401195e     0xc    srli a5,a5,0x19
    0x84011960     0xe    and a5,a5,a4
    0x84011962    0x10    srli a4,a4,0x26
    0x84011964    0x12    andi a4,a4,1
    0x84011966    0x14    beqz a4,ffffffff84011998 <insertNewCap+0x46>
    0x84011968    0x16    li a4,-1
    0x8401196a    0x18    slli a4,a4,0x27
    0x8401196c    0x1a    or a4,a4,a5
    0x8401196e    0x1c    sd a2,0(a1)
    0x84011970    0x1e    ld a3,8(sp)           ; stack access
    0x84011972    0x20    sd a3,8(a1)
    0x84011974    0x22    sd a0,16(a1)
    0x84011976    0x24    ori a5,a5,3
    0x8401197a    0x28    sd a5,24(a1)
    0x8401197c    0x2a    sd a1,16(a4)
    0x8401197e    0x2c    ld a5,24(a0)
    0x84011980    0x2e    li a4,-1
    0x84011982    0x30    slli a4,a4,0x27
    0x84011984    0x32    addi a4,a4,3
    0x84011986    0x34    and a5,a5,a4
    0x84011988    0x36    lui a4,0xf8000
    0x8401198c    0x3a    srli a4,a4,0x19
    0x8401198e    0x3c    and a1,a1,a4
    0x84011990    0x3e    or a1,a1,a5
    0x84011992    0x40    sd a1,24(a0)
    0x84011994    0x42    addi sp,sp,16
    0x84011996    0x44    ret
    0x84011998    0x46    ld a4,0(sp)           ; stack access
    0x8401199a    0x48    sd a4,0(a1)
    0x8401199c    0x4a    ld a4,8(sp)           ; stack access
    0x8401199e    0x4c    sd a4,8(a1)
    0x840119a0    0x4e    sd a0,16(a1)
    0x840119a2    0x50    ori a4,a5,3
    0x840119a6    0x54    sd a4,24(a1)
    0x840119a8    0x56    beqz a5,ffffffff8401197e <insertNewCap+0x2c>
    0x840119aa    0x58    mv a4,a5
    0x840119ac    0x5a    j ffffffff8401197c <insertNewCap+0x2a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insertNewCap` has 64 nodes.

Section cteSwap (39 of 269)
===========================

Deriving specifications
-----------------------

Section `cteSwap` consists of 65 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cteSwap`:

    0x8401185e     0x0    addi sp,sp,-32
    0x84011860     0x2    sd a0,16(sp)          ; stack access
    0x84011862     0x4    sd a1,24(sp)          ; stack access
    0x84011864     0x6    sd a3,0(sp)           ; stack access
    0x84011866     0x8    sd a4,8(sp)           ; stack access
    0x84011868     0xa    sd a3,0(a2)
    0x8401186a     0xc    sd a4,8(a2)
    0x8401186c     0xe    sd a0,0(a5)
    0x8401186e    0x10    sd a1,8(a5)
    0x84011870    0x12    ld a0,16(a2)
    0x84011872    0x14    ld a1,24(a2)
    0x84011874    0x16    beqz a0,ffffffff8401188c <cteSwap+0x2e>
    0x84011876    0x18    ld a4,24(a0)
    0x84011878    0x1a    li a3,-1
    0x8401187a    0x1c    slli a3,a3,0x27
    0x8401187c    0x1e    addi a3,a3,3
    0x8401187e    0x20    and a4,a4,a3
    0x84011880    0x22    lui a3,0xf8000
    0x84011884    0x26    srli a3,a3,0x19
    0x84011886    0x28    and a3,a3,a5
    0x84011888    0x2a    or a4,a4,a3
    0x8401188a    0x2c    sd a4,24(a0)
    0x8401188c    0x2e    lui a4,0xf8000
    0x84011890    0x32    srli a4,a4,0x19
    0x84011892    0x34    and a4,a4,a1
    0x84011894    0x36    srli a3,a1,0x26
    0x84011898    0x3a    andi a3,a3,1
    0x8401189a    0x3c    beqz a3,ffffffff840118e2 <cteSwap+0x84>
    0x8401189c    0x3e    li a3,-1
    0x8401189e    0x40    slli a3,a3,0x27
    0x840118a0    0x42    or a4,a4,a3
    0x840118a2    0x44    sd a5,16(a4)
    0x840118a4    0x46    ld a3,16(a5)
    0x840118a6    0x48    ld a4,24(a5)
    0x840118a8    0x4a    sd a3,16(a2)
    0x840118aa    0x4c    sd a4,24(a2)
    0x840118ac    0x4e    sd a0,16(a5)
    0x840118ae    0x50    sd a1,24(a5)
    0x840118b0    0x52    beqz a3,ffffffff840118c8 <cteSwap+0x6a>
    0x840118b2    0x54    ld a5,24(a3)
    0x840118b4    0x56    li a1,-1
    0x840118b6    0x58    slli a1,a1,0x27
    0x840118b8    0x5a    addi a1,a1,3
    0x840118ba    0x5c    and a5,a5,a1
    0x840118bc    0x5e    lui a1,0xf8000
    0x840118c0    0x62    srli a1,a1,0x19
    0x840118c2    0x64    and a1,a1,a2
    0x840118c4    0x66    or a5,a5,a1
    0x840118c6    0x68    sd a5,24(a3)
    0x840118c8    0x6a    lui a5,0xf8000
    0x840118cc    0x6e    srli a5,a5,0x19
    0x840118ce    0x70    and a5,a5,a4
    0x840118d0    0x72    srli a4,a4,0x26
    0x840118d2    0x74    andi a4,a4,1
    0x840118d4    0x76    beqz a4,ffffffff840118e6 <cteSwap+0x88>
    0x840118d6    0x78    li a4,-1
    0x840118d8    0x7a    slli a4,a4,0x27
    0x840118da    0x7c    or a5,a5,a4
    0x840118dc    0x7e    sd a2,16(a5)
    0x840118de    0x80    addi sp,sp,32
    0x840118e0    0x82    ret
    0x840118e2    0x84    beqz a4,ffffffff840118a4 <cteSwap+0x46>
    0x840118e4    0x86    j ffffffff840118a2 <cteSwap+0x44>
    0x840118e6    0x88    beqz a5,ffffffff840118de <cteSwap+0x80>
    0x840118e8    0x8a    j ffffffff840118dc <cteSwap+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
65 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteSwap` has 100 nodes.

Section cteMove (40 of 269)
===========================

Deriving specifications
-----------------------

Section `cteMove` consists of 38 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `cteMove`:

    0x840117b2     0x0    addi sp,sp,-16
    0x840117b4     0x2    sd a0,0(sp)           ; stack access
    0x840117b6     0x4    sd a1,8(sp)           ; stack access
    0x840117b8     0x6    ld a4,16(a2)
    0x840117ba     0x8    ld a5,24(a2)
    0x840117bc     0xa    sd a0,0(a3)
    0x840117be     0xc    sd a1,8(a3)
    0x840117c0     0xe    sd zero,0(a2)
    0x840117c4    0x12    sd zero,8(a2)
    0x840117c8    0x16    sd a4,16(a3)
    0x840117ca    0x18    sd a5,24(a3)
    0x840117cc    0x1a    sd zero,16(a2)
    0x840117d0    0x1e    sd zero,24(a2)
    0x840117d4    0x22    beqz a4,ffffffff840117ec <cteMove+0x3a>
    0x840117d6    0x24    ld a2,24(a4)
    0x840117d8    0x26    li a1,-1
    0x840117da    0x28    slli a1,a1,0x27
    0x840117dc    0x2a    addi a1,a1,3
    0x840117de    0x2c    and a2,a2,a1
    0x840117e0    0x2e    lui a1,0xf8000
    0x840117e4    0x32    srli a1,a1,0x19
    0x840117e6    0x34    and a1,a1,a3
    0x840117e8    0x36    or a2,a2,a1
    0x840117ea    0x38    sd a2,24(a4)
    0x840117ec    0x3a    lui a4,0xf8000
    0x840117f0    0x3e    srli a4,a4,0x19
    0x840117f2    0x40    and a4,a4,a5
    0x840117f4    0x42    srli a5,a5,0x26
    0x840117f6    0x44    andi a5,a5,1
    0x840117f8    0x46    beqz a5,ffffffff84011806 <cteMove+0x54>
    0x840117fa    0x48    li a5,-1
    0x840117fc    0x4a    slli a5,a5,0x27
    0x840117fe    0x4c    or a4,a4,a5
    0x84011800    0x4e    sd a3,16(a4)
    0x84011802    0x50    addi sp,sp,16
    0x84011804    0x52    ret
    0x84011806    0x54    beqz a4,ffffffff84011802 <cteMove+0x50>
    0x84011808    0x56    j ffffffff84011800 <cteMove+0x4e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteMove` has 60 nodes.

Section cteInsert (41 of 269)
=============================

Deriving specifications
-----------------------

Section `cteInsert` consists of 108 instructions.

RVC_TFFFFFT__FT___TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteInsert`:

    0x84011676      0x0    addi sp,sp,-16
    0x84011678      0x2    sd a0,0(sp)           ; stack access
    0x8401167a      0x4    sd a1,8(sp)           ; stack access
    0x8401167c      0x6    ld a5,24(a2)
    0x8401167e      0x8    ld a7,0(a2)
    0x84011682      0xc    ld t3,8(a2)
    0x84011686     0x10    srli a4,a0,0x3b
    0x8401168a     0x14    andi a6,a4,1
    0x8401168e     0x18    bnez a6,ffffffff84011714 <cteInsert+0x9e>
    0x84011692     0x1c    li t1,6
    0x84011694     0x1e    beq a4,t1,ffffffff8401170a <cteInsert+0x94>
    0x84011698     0x22    bltu t1,a4,ffffffff840116f8 <cteInsert+0x82>
    0x8401169c     0x26    li t1,2
    0x8401169e     0x28    beq a4,t1,ffffffff8401173c <cteInsert+0xc6>
    0x840116a2     0x2c    li a0,4
    0x840116a4     0x2e    bne a4,a0,ffffffff840116b0 <cteInsert+0x3a>
    0x840116a8     0x32    sub a6,t3,a1
    0x840116ac     0x36    snez a6,a6
    0x840116b0     0x3a    mv t1,a2
    0x840116b2     0x3c    slli a4,a6,0x1
    0x840116b6     0x40    andi a5,a5,-4
    0x840116b8     0x42    or a5,a5,a4
    0x840116ba     0x44    or a5,a5,a6
    0x840116be     0x48    ld a4,0(sp)           ; stack access
    0x840116c0     0x4a    sd a4,0(a3)
    0x840116c2     0x4c    ld a4,8(sp)           ; stack access
    0x840116c4     0x4e    sd a4,8(a3)
    0x840116c6     0x50    sd t1,16(a3)
    0x840116ca     0x54    sd a5,24(a3)
    0x840116cc     0x56    ld a1,24(a2)
    0x840116ce     0x58    li a4,-1
    0x840116d0     0x5a    slli a4,a4,0x27
    0x840116d2     0x5c    addi a4,a4,3
    0x840116d4     0x5e    and a1,a1,a4
    0x840116d6     0x60    lui a4,0xf8000
    0x840116da     0x64    srli a4,a4,0x19
    0x840116dc     0x66    and a0,a3,a4
    0x840116e0     0x6a    or a1,a1,a0
    0x840116e2     0x6c    sd a1,24(a2)
    0x840116e4     0x6e    and a4,a4,a5
    0x840116e6     0x70    srli a5,a5,0x26
    0x840116e8     0x72    andi a5,a5,1
    0x840116ea     0x74    beqz a5,ffffffff84011738 <cteInsert+0xc2>
    0x840116ec     0x76    li a5,-1
    0x840116ee     0x78    slli a5,a5,0x27
    0x840116f0     0x7a    or a4,a4,a5
    0x840116f2     0x7c    sd a3,16(a4)
    0x840116f4     0x7e    addi sp,sp,16
    0x840116f6     0x80    ret
    0x840116f8     0x82    li a1,16
    0x840116fa     0x84    bne a4,a1,ffffffff840116b0 <cteInsert+0x3a>
    0x840116fe     0x88    srli a6,a7,0x3b
    0x84011702     0x8c    addi a6,a6,-14
    0x84011704     0x8e    seqz a6,a6
    0x84011708     0x92    j ffffffff840116b0 <cteInsert+0x3a>
    0x8401170a     0x94    sub a6,t3,a1
    0x8401170e     0x98    snez a6,a6
    0x84011712     0x9c    j ffffffff840116b0 <cteInsert+0x3a>
    0x84011714     0x9e    mv t1,a2
    0x84011716     0xa0    andi a5,a5,-4
    0x84011718     0xa2    srli a6,a7,0x3b
    0x8401171c     0xa6    li t4,2
    0x8401171e     0xa8    bne a6,t4,ffffffff840116be <cteInsert+0x48>
    0x84011722     0xac    li a6,2
    0x84011724     0xae    beq a4,a6,ffffffff8401174c <cteInsert+0xd6>
    0x84011728     0xb2    j ffffffff840116be <cteInsert+0x48>
    0x8401172a     0xb4    slli a4,a0,0x19
    0x8401172e     0xb8    srli a4,a4,0x19
    0x84011730     0xba    srli a0,a0,0x26
    0x84011732     0xbc    andi a0,a0,1
    0x84011734     0xbe    bnez a0,ffffffff84011774 <cteInsert+0xfe>
    0x84011736     0xc0    j ffffffff8401177a <cteInsert+0x104>
    0x84011738     0xc2    beqz a4,ffffffff840116f4 <cteInsert+0x7e>
    0x8401173a     0xc4    j ffffffff840116f2 <cteInsert+0x7c>
    0x8401173c     0xc6    mv t1,a2
    0x8401173e     0xc8    ori a5,a5,3
    0x84011742     0xcc    srli a4,a7,0x3b
    0x84011746     0xd0    li a6,2
    0x84011748     0xd2    bne a4,a6,ffffffff840116be <cteInsert+0x48>
    0x8401174c     0xd6    slli t4,a7,0x19
    0x84011750     0xda    srli t4,t4,0x19
    0x84011754     0xde    srli a6,a7,0x26
    0x84011758     0xe2    andi a6,a6,1
    0x8401175c     0xe6    beqz a6,ffffffff8401172a <cteInsert+0xb4>
    0x84011760     0xea    li a4,-1
    0x84011762     0xec    slli a6,a4,0x27
    0x84011766     0xf0    or t4,t4,a6
    0x8401176a     0xf4    srli a4,a4,0x19
    0x8401176c     0xf6    and a4,a4,a0
    0x8401176e     0xf8    srli a0,a0,0x26
    0x84011770     0xfa    andi a0,a0,1
    0x84011772     0xfc    beqz a0,ffffffff840116be <cteInsert+0x48>
    0x84011774     0xfe    li a0,-1
    0x84011776    0x100    slli a0,a0,0x27
    0x84011778    0x102    or a4,a4,a0
    0x8401177a    0x104    bne a4,t4,ffffffff840116be <cteInsert+0x48>
    0x8401177e    0x108    andi t3,t3,63
    0x84011782    0x10c    andi a6,a1,63
    0x84011786    0x110    bne a6,t3,ffffffff840116be <cteInsert+0x48>
    0x8401178a    0x114    addiw t3,t3,-4
    0x8401178c    0x116    lui a4,0x2000
    0x84011790    0x11a    sll t3,a4,t3
    0x84011794    0x11e    ld a4,8(a2)
    0x84011796    0x120    slli a4,a4,0x27
    0x84011798    0x122    srli a4,a4,0x27
    0x8401179a    0x124    or a4,t3,a4
    0x8401179e    0x128    sd a4,8(a2)
    0x840117a0    0x12a    j ffffffff840116be <cteInsert+0x48>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
108 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteInsert` has 157 nodes.

Section preemptionPoint (42 of 269)
===================================

Deriving specifications
-----------------------

Section `preemptionPoint` consists of 17 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `preemptionPoint`:

    0x84011640     0x0    auipc a5,0x19
    0x84011644     0x4    ld a5,480(a5) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x84011648     0x8    addi a5,a5,1
    0x8401164a     0xa    li a4,99
    0x8401164e     0xe    bltu a4,a5,ffffffff8401165e <preemptionPoint+0x1e>
    0x84011652    0x12    auipc a4,0x19
    0x84011656    0x16    sd a5,462(a4) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x8401165a    0x1a    li a0,0
    0x8401165c    0x1c    ret
    0x8401165e    0x1e    auipc a5,0x19
    0x84011662    0x22    sd zero,450(a5) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x84011666    0x26    csrr a0,sip
    0x8401166a    0x2a    andi a0,a0,544
    0x8401166e    0x2e    bnez a0,ffffffff84011672 <preemptionPoint+0x32>
    0x84011670    0x30    ret
    0x84011672    0x32    li a0,4
    0x84011674    0x34    j ffffffff84011670 <preemptionPoint+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `preemptionPoint` has 27 nodes.

Section setMCPriority (43 of 269)
=================================

Deriving specifications
-----------------------

Section `setMCPriority` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setMCPriority`:

    0x8401163a    0x0    sd a1,352(a0)
    0x8401163e    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMCPriority` has 4 nodes.

Section doNBRecvFailedTransfer (44 of 269)
==========================================

Deriving specifications
-----------------------

Section `doNBRecvFailedTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `doNBRecvFailedTransfer`:

    0x84011616    0x0    sd zero,72(a0)
    0x8401161a    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNBRecvFailedTransfer` has 4 nodes.

Section resolveAddressBits (45 of 269)
======================================

Deriving specifications
-----------------------

Section `resolveAddressBits` consists of 97 instructions.

RVC_TFFFT____FT___TF.
SRL.....
RVC_TFFTTT___FF___FT..
RVC_FTTFFT___T____FT.

Stack analysis
---------------

Section `resolveAddressBits` expects pointer to stack in a0.
21 stack accesses found. Annotated code for `resolveAddressBits`:

    0x840112f4      0x0    addi sp,sp,-32
    0x840112f6      0x2    sd s0,24(sp)          ; stack access
    0x840112f8      0x4    sd s1,16(sp)          ; stack access
    0x840112fa      0x6    sd a1,0(sp)           ; stack access
    0x840112fc      0x8    sd a2,8(sp)           ; stack access
    0x840112fe      0xa    srli a7,a1,0x3b
    0x84011302      0xe    li a5,10
    0x84011304     0x10    bne a7,a5,ffffffff84011392 <resolveAddressBits+0x9e>
    0x84011308     0x14    mv a6,a4
    0x8401130a     0x16    li t5,-1
    0x8401130c     0x18    lui t0,0xfc000
    0x84011310     0x1c    srli t0,t0,0x19
    0x84011314     0x20    li t6,1
    0x84011316     0x22    slli t6,t6,0x26
    0x84011318     0x24    slli t2,t5,0x27
    0x8401131c     0x28    li s0,10
    0x8401131e     0x2a    srli a7,a1,0x2f
    0x84011322     0x2e    andi a7,a7,63
    0x84011326     0x32    srli t1,a1,0x35
    0x8401132a     0x36    andi t1,t1,63
    0x8401132e     0x3a    add s1,t1,a7
    0x84011332     0x3e    sext.w a5,a6
    0x84011336     0x42    subw t3,a6,t1
    0x8401133a     0x46    srl t3,a3,t3
    0x8401133e     0x4a    sll t4,t5,t1
    0x84011342     0x4e    not t4,t4
    0x84011346     0x52    and t3,t3,t4
    0x8401134a     0x56    bltu a6,t1,ffffffff840113ae <resolveAddressBits+0xba>
    0x8401134e     0x5a    bne a2,t3,ffffffff840113ae <resolveAddressBits+0xba>
    0x84011352     0x5e    bltu a6,s1,ffffffff840113de <resolveAddressBits+0xea>
    0x84011356     0x62    subw a5,a5,s1
    0x84011358     0x64    srl a5,a3,a5
    0x8401135c     0x68    sll a7,t5,a7
    0x84011360     0x6c    not a7,a7
    0x84011364     0x70    and a5,a5,a7
    0x84011368     0x74    slli a5,a5,0x5
    0x8401136a     0x76    slli a1,a1,0x1
    0x8401136c     0x78    and a2,a1,t0
    0x84011370     0x7c    and a1,a1,t6
    0x84011374     0x80    beqz a1,ffffffff8401137a <resolveAddressBits+0x86>
    0x84011376     0x82    or a2,a2,t2
    0x8401137a     0x86    add a5,a5,a2
    0x8401137c     0x88    bne a6,s1,ffffffff84011406 <resolveAddressBits+0x112>
    0x84011380     0x8c    sd zero,0(a0) # fffffffff8000000 <ki_end+0x73fd1000>  ; stack access
    0x84011384     0x90    sd a5,8(a0)           ; stack access
    0x84011386     0x92    sd zero,16(a0)        ; stack access
    0x8401138a     0x96    ld s0,24(sp)          ; stack access
    0x8401138c     0x98    ld s1,16(sp)          ; stack access
    0x8401138e     0x9a    addi sp,sp,32
    0x84011390     0x9c    ret
    0x84011392     0x9e    auipc a5,0x7
    0x84011396     0xa2    addi a5,a5,-914 # ffffffff84018000 <riscvKSASIDTable>
    0x8401139a     0xa6    sd zero,1024(a5)
    0x8401139e     0xaa    sd zero,1032(a5)
    0x840113a2     0xae    li a5,2
    0x840113a4     0xb0    sd a5,0(a0)           ; stack access
    0x840113a6     0xb2    sd zero,8(a0)         ; stack access
    0x840113aa     0xb6    sd a4,16(a0)          ; stack access
    0x840113ac     0xb8    j ffffffff8401138a <resolveAddressBits+0x96>
    0x840113ae     0xba    auipc a3,0x7
    0x840113b2     0xbe    addi a3,a3,-942 # ffffffff84018000 <riscvKSASIDTable>
    0x840113b6     0xc2    slli a6,a6,0x9
    0x840113b8     0xc4    lui a5,0x10
    0x840113ba     0xc6    addi a5,a5,-1
    0x840113bc     0xc8    and a6,a6,a5
    0x840113c0     0xcc    slli t1,t1,0x2
    0x840113c2     0xce    or t1,a6,t1
    0x840113c6     0xd2    ori t1,t1,3
    0x840113ca     0xd6    sd t1,1024(a3)
    0x840113ce     0xda    sd a2,1032(a3)
    0x840113d2     0xde    li a5,2
    0x840113d4     0xe0    sd a5,0(a0)           ; stack access
    0x840113d6     0xe2    sd zero,8(a0)         ; stack access
    0x840113da     0xe6    sd a4,16(a0)          ; stack access
    0x840113dc     0xe8    j ffffffff8401138a <resolveAddressBits+0x96>
    0x840113de     0xea    auipc a5,0x7
    0x840113e2     0xee    addi a5,a5,-990 # ffffffff84018000 <riscvKSASIDTable>
    0x840113e6     0xf2    slli s1,s1,0x9
    0x840113e8     0xf4    slli a6,a6,0x2
    0x840113ea     0xf6    or a6,s1,a6
    0x840113ee     0xfa    ori a6,a6,2
    0x840113f2     0xfe    sd a6,1024(a5)
    0x840113f6    0x102    sd zero,1032(a5)
    0x840113fa    0x106    li a5,2
    0x840113fc    0x108    sd a5,0(a0)           ; stack access
    0x840113fe    0x10a    sd zero,8(a0)         ; stack access
    0x84011402    0x10e    sd a4,16(a0)          ; stack access
    0x84011404    0x110    j ffffffff8401138a <resolveAddressBits+0x96>
    0x84011406    0x112    sub a6,a6,s1
    0x8401140a    0x116    ld a1,0(a5)
    0x8401140c    0x118    ld a2,8(a5)
    0x8401140e    0x11a    srli a7,a1,0x3b
    0x84011412    0x11e    beq a7,s0,ffffffff8401131e <resolveAddressBits+0x2a>
    0x84011416    0x122    sd zero,0(a0)         ; stack access
    0x8401141a    0x126    sd a5,8(a0)           ; stack access
    0x8401141c    0x128    sd a6,16(a0)          ; stack access
    0x84011420    0x12c    j ffffffff8401138a <resolveAddressBits+0x96>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
97 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `resolveAddressBits` has 141 nodes.

Section Arch_performTransfer (46 of 269)
========================================

Deriving specifications
-----------------------

Section `Arch_performTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_performTransfer`:

    0x840112f0    0x0    li a0,0
    0x840112f2    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_performTransfer` has 3 nodes.

Section Arch_decodeTransfer (47 of 269)
=======================================

Deriving specifications
-----------------------

Section `Arch_decodeTransfer` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_decodeTransfer`:

    0x840112ec    0x0    li a0,0
    0x840112ee    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeTransfer` has 3 nodes.

Section Arch_isFrameType (48 of 269)
====================================

Deriving specifications
-----------------------

Section `Arch_isFrameType` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_isFrameType`:

    0x840112e4    0x0    addi a0,a0,-5
    0x840112e6    0x2    sltiu a0,a0,3
    0x840112ea    0x6    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_isFrameType` has 4 nodes.

Section Arch_prepareThreadDelete (49 of 269)
============================================

Deriving specifications
-----------------------

Section `Arch_prepareThreadDelete` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_prepareThreadDelete`:

    0x840112e2    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_prepareThreadDelete` has 2 nodes.

Section Arch_updateCapData (50 of 269)
======================================

Deriving specifications
-----------------------

Section `Arch_updateCapData` consists of 5 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_updateCapData`:

    0x84010ebe    0x0    addi sp,sp,-32
    0x84010ec0    0x2    mv a0,a2
    0x84010ec2    0x4    mv a1,a3
    0x84010ec4    0x6    addi sp,sp,32
    0x84010ec6    0x8    ret

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_updateCapData` has 6 nodes.

Section Arch_checkIRQ (51 of 269)
=================================

Deriving specifications
-----------------------

Section `Arch_checkIRQ` consists of 15 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_checkIRQ`:

    0x84010e2c     0x0    addi a0,a0,-1
    0x84010e2e     0x2    li a5,53
    0x84010e32     0x6    bltu a5,a0,ffffffff84010e3a <Arch_checkIRQ+0xe>
    0x84010e36     0xa    li a0,0
    0x84010e38     0xc    ret
    0x84010e3a     0xe    auipc a5,0x7
    0x84010e3e    0x12    addi a5,a5,454 # ffffffff84018000 <riscvKSASIDTable>
    0x84010e42    0x16    li a4,4
    0x84010e44    0x18    sd a4,1744(a5)
    0x84010e48    0x1c    li a4,1
    0x84010e4a    0x1e    sd a4,1712(a5)
    0x84010e4e    0x22    li a4,54
    0x84010e52    0x26    sd a4,1720(a5)
    0x84010e56    0x2a    li a0,3
    0x84010e58    0x2c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_checkIRQ` has 22 nodes.

Section plat_cleanInvalidateL2Range (52 of 269)
===============================================

Deriving specifications
-----------------------

Section `plat_cleanInvalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanInvalidateL2Range`:

    0x84010e2a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanInvalidateL2Range` has 2 nodes.

Section plat_invalidateL2Range (53 of 269)
==========================================

Deriving specifications
-----------------------

Section `plat_invalidateL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_invalidateL2Range`:

    0x84010e28    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_invalidateL2Range` has 2 nodes.

Section plat_cleanL2Range (54 of 269)
=====================================

Deriving specifications
-----------------------

Section `plat_cleanL2Range` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `plat_cleanL2Range`:

    0x84010e26    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `plat_cleanL2Range` has 2 nodes.

Section setIRQTrigger (55 of 269)
=================================

Deriving specifications
-----------------------

Section `setIRQTrigger` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setIRQTrigger`:

    0x84010e24    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setIRQTrigger` has 2 nodes.

Section setNextPC (56 of 269)
=============================

Deriving specifications
-----------------------

Section `setNextPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `setNextPC`:

    0x84010e1e    0x0    sd a1,272(a0)
    0x84010e22    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setNextPC` has 4 nodes.

Section getRestartPC (57 of 269)
================================

Deriving specifications
-----------------------

Section `getRestartPC` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `getRestartPC`:

    0x84010e18    0x0    ld a0,264(a0)
    0x84010e1c    0x4    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getRestartPC` has 4 nodes.

Section performPageInvocationMapPTE (58 of 269)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationMapPTE` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageInvocationMapPTE`:

    0x84010da4     0x0    addi sp,sp,-16
    0x84010da6     0x2    sd a0,0(sp)           ; stack access
    0x84010da8     0x4    sd a1,8(sp)           ; stack access
    0x84010daa     0x6    sd a0,0(a2)
    0x84010dac     0x8    sd a1,8(a2)
    0x84010dae     0xa    sd a3,0(a4)
    0x84010db0     0xc    sfence.vma
    0x84010db4    0x10    li a0,0
    0x84010db6    0x12    addi sp,sp,16
    0x84010db8    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationMapPTE` has 17 nodes.

Section performPageTableInvocationMap (59 of 269)
=================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationMap` consists of 10 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

2 stack accesses found. Annotated code for `performPageTableInvocationMap`:

    0x84010d8e     0x0    addi sp,sp,-16
    0x84010d90     0x2    sd a0,0(sp)           ; stack access
    0x84010d92     0x4    sd a1,8(sp)           ; stack access
    0x84010d94     0x6    sd a0,0(a2)
    0x84010d96     0x8    sd a1,8(a2)
    0x84010d98     0xa    sd a3,0(a4)
    0x84010d9a     0xc    sfence.vma
    0x84010d9e    0x10    li a0,0
    0x84010da0    0x12    addi sp,sp,16
    0x84010da2    0x14    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationMap` has 17 nodes.

Section maskVMRights (60 of 269)
================================

Deriving specifications
-----------------------

Section `maskVMRights` consists of 17 instructions.


Stack analysis
---------------

No stack accesses found. Code for `maskVMRights`:

    0x84010d62     0x0    mv a5,a0
    0x84010d64     0x2    li a4,2
    0x84010d66     0x4    beq a0,a4,ffffffff84010d74 <maskVMRights+0x12>
    0x84010d6a     0x8    li a4,3
    0x84010d6c     0xa    li a0,1
    0x84010d6e     0xc    beq a5,a4,ffffffff84010d7e <maskVMRights+0x1c>
    0x84010d72    0x10    ret
    0x84010d74    0x12    srli a1,a1,0x1
    0x84010d76    0x14    andi a1,a1,1
    0x84010d78    0x16    addi a0,a1,1
    0x84010d7c    0x1a    ret
    0x84010d7e    0x1c    srli a5,a1,0x1
    0x84010d82    0x20    andi a5,a5,1
    0x84010d84    0x22    beqz a5,ffffffff84010d72 <maskVMRights+0x10>
    0x84010d86    0x24    andi a1,a1,1
    0x84010d88    0x26    addi a0,a1,2
    0x84010d8c    0x2a    j ffffffff84010d72 <maskVMRights+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskVMRights` has 25 nodes.

Section checkValidIPCBuffer (61 of 269)
=======================================

Deriving specifications
-----------------------

Section `checkValidIPCBuffer` consists of 26 instructions.


Stack analysis
---------------

No stack accesses found. Code for `checkValidIPCBuffer`:

    0x84010d1c     0x0    addi sp,sp,-16
    0x84010d1e     0x2    srli a4,a1,0x3b
    0x84010d22     0x6    li a5,1
    0x84010d24     0x8    bne a4,a5,ffffffff84010d38 <checkValidIPCBuffer+0x1c>
    0x84010d28     0xc    srli a1,a1,0x36
    0x84010d2a     0xe    andi a1,a1,1
    0x84010d2c    0x10    bnez a1,ffffffff84010d46 <checkValidIPCBuffer+0x2a>
    0x84010d2e    0x12    andi a0,a0,1023
    0x84010d32    0x16    bnez a0,ffffffff84010d54 <checkValidIPCBuffer+0x38>
    0x84010d34    0x18    addi sp,sp,16
    0x84010d36    0x1a    ret
    0x84010d38    0x1c    li a5,3
    0x84010d3a    0x1e    auipc a4,0x8
    0x84010d3e    0x22    sd a5,-1642(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010d42    0x26    li a0,3
    0x84010d44    0x28    j ffffffff84010d34 <checkValidIPCBuffer+0x18>
    0x84010d46    0x2a    li a5,3
    0x84010d48    0x2c    auipc a4,0x8
    0x84010d4c    0x30    sd a5,-1656(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010d50    0x34    li a0,3
    0x84010d52    0x36    j ffffffff84010d34 <checkValidIPCBuffer+0x18>
    0x84010d54    0x38    li a5,5
    0x84010d56    0x3a    auipc a4,0x8
    0x84010d5a    0x3e    sd a5,-1670(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010d5e    0x42    li a0,3
    0x84010d60    0x44    j ffffffff84010d34 <checkValidIPCBuffer+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `checkValidIPCBuffer` has 36 nodes.

Section isValidVTableRoot (62 of 269)
=====================================

Deriving specifications
-----------------------

Section `isValidVTableRoot` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `isValidVTableRoot`:

    0x84010d06     0x0    addi sp,sp,-16
    0x84010d08     0x2    srli a4,a0,0x3b
    0x84010d0c     0x6    li a5,3
    0x84010d0e     0x8    srli a0,a0,0x27
    0x84010d10     0xa    andi a0,a0,1
    0x84010d12     0xc    beq a4,a5,ffffffff84010d18 <isValidVTableRoot+0x12>
    0x84010d16    0x10    li a0,0
    0x84010d18    0x12    addi sp,sp,16
    0x84010d1a    0x14    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isValidVTableRoot` has 12 nodes.

Section lookupPTSlot (63 of 269)
================================

Deriving specifications
-----------------------

Section `lookupPTSlot` consists of 36 instructions.


Stack analysis
---------------

No stack accesses found. Code for `lookupPTSlot`:

    0x84010982     0x0    addi sp,sp,-16
    0x84010984     0x2    mv a3,a1
    0x84010986     0x4    srli a5,a1,0x1e
    0x8401098a     0x8    andi a5,a5,511
    0x8401098e     0xc    slli a5,a5,0x3
    0x84010990     0xe    add a0,a0,a5
    0x84010992    0x10    li a1,30
    0x84010994    0x12    li a7,3
    0x84010996    0x14    lui a6,0xfff00
    0x8401099a    0x18    srli a6,a6,0x8
    0x8401099e    0x1c    li a2,-1
    0x840109a0    0x1e    slli a2,a2,0x26
    0x840109a2    0x20    j ffffffff840109c0 <lookupPTSlot+0x3e>
    0x840109a4    0x22    addi a1,a1,-9
    0x840109a6    0x24    beq a1,a7,ffffffff840109e4 <lookupPTSlot+0x62>
    0x840109aa    0x28    slli a0,a5,0x2
    0x840109ae    0x2c    and a0,a0,a6
    0x840109b2    0x30    add a0,a0,a2
    0x840109b4    0x32    srl a5,a3,a1
    0x840109b8    0x36    andi a5,a5,511
    0x840109bc    0x3a    slli a5,a5,0x3
    0x840109be    0x3c    add a0,a0,a5
    0x840109c0    0x3e    ld a5,0(a0)
    0x840109c2    0x40    andi a4,a5,1
    0x840109c6    0x44    beqz a4,ffffffff840109e0 <lookupPTSlot+0x5e>
    0x840109c8    0x46    srli a4,a5,0x1
    0x840109cc    0x4a    srli t1,a5,0x2
    0x840109d0    0x4e    or a4,a4,t1
    0x840109d4    0x52    srli t1,a5,0x3
    0x840109d8    0x56    or a4,a4,t1
    0x840109dc    0x5a    andi a4,a4,1
    0x840109de    0x5c    beqz a4,ffffffff840109a4 <lookupPTSlot+0x22>
    0x840109e0    0x5e    addi sp,sp,16
    0x840109e2    0x60    ret
    0x840109e4    0x62    li a1,12
    0x840109e6    0x64    j ffffffff840109e0 <lookupPTSlot+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
36 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPTSlot` has 44 nodes.

Section copyGlobalMappings (64 of 269)
======================================

Deriving specifications
-----------------------

Section `copyGlobalMappings` consists of 13 instructions.

RVC_FTTFFT___FFFFTFT.

Stack analysis
---------------

No stack accesses found. Code for `copyGlobalMappings`:

    0x8401077c     0x0    auipc a5,0x1d
    0x84010780     0x4    addi a5,a5,132 # ffffffff8402d800 <kernel_root_pageTable+0x800>
    0x84010784     0x8    lui a4,0x1
    0x84010786     0xa    addi a4,a4,-2048 # 800 <KERNEL_OFFSET-0xfffffffefffff800>
    0x8401078a     0xe    add a4,a4,a0
    0x8401078c    0x10    auipc a2,0x1e
    0x84010790    0x14    addi a2,a2,-1932 # ffffffff8402e000 <kernel_root_pageTable+0x1000>
    0x84010794    0x18    ld a3,0(a5)
    0x84010796    0x1a    sd a3,0(a4)
    0x84010798    0x1c    addi a5,a5,8
    0x8401079a    0x1e    addi a4,a4,8
    0x8401079c    0x20    bne a5,a2,ffffffff84010794 <copyGlobalMappings+0x18>
    0x840107a0    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `copyGlobalMappings` has 18 nodes.

Section Arch_postModifyRegisters (65 of 269)
============================================

Deriving specifications
-----------------------

Section `Arch_postModifyRegisters` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_postModifyRegisters`:

    0x8401077a    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_postModifyRegisters` has 2 nodes.

Section Arch_activateIdleThread (66 of 269)
===========================================

Deriving specifications
-----------------------

Section `Arch_activateIdleThread` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_activateIdleThread`:

    0x84010778    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_activateIdleThread` has 2 nodes.

Section halt (67 of 269)
========================

Deriving specifications
-----------------------

Section `halt` consists of 5 instructions.

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `halt`:

    0x840103da    0x0    li a0,0
    0x840103dc    0x2    li a1,0
    0x840103de    0x4    li a2,0
    0x840103e0    0x6    li a7,8
    0x840103e2    0x8    ecall

Proving inst theorems
---------------------

5 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `halt` has 6 nodes.

Section restore_user_context (68 of 269)
========================================

Deriving specifications
-----------------------

Section `restore_user_context` consists of 41 instructions.

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

No stack accesses found. Code for `restore_user_context`:

    0x84010338     0x0    auipc a5,0x1a
    0x8401033c     0x4    ld a5,1280(a5) # ffffffff8402a838 <ksCurThread>
    0x84010340     0x8    mv t0,a5
    0x84010342     0xa    ld ra,0(t0)
    0x84010346     0xe    ld sp,8(t0)
    0x8401034a    0x12    ld gp,16(t0)
    0x8401034e    0x16    ld t2,48(t0)
    0x84010352    0x1a    ld s0,56(t0)
    0x84010356    0x1e    ld s1,64(t0)
    0x8401035a    0x22    ld a0,72(t0)
    0x8401035e    0x26    ld a1,80(t0)
    0x84010362    0x2a    ld a2,88(t0)
    0x84010366    0x2e    ld a3,96(t0)
    0x8401036a    0x32    ld a4,104(t0)
    0x8401036e    0x36    ld a5,112(t0)
    0x84010372    0x3a    ld a6,120(t0)
    0x84010376    0x3e    ld a7,128(t0)
    0x8401037a    0x42    ld s2,136(t0)
    0x8401037e    0x46    ld s3,144(t0)
    0x84010382    0x4a    ld s4,152(t0)
    0x84010386    0x4e    ld s5,160(t0)
    0x8401038a    0x52    ld s6,168(t0)
    0x8401038e    0x56    ld s7,176(t0)
    0x84010392    0x5a    ld s8,184(t0)
    0x84010396    0x5e    ld s9,192(t0)
    0x8401039a    0x62    ld s10,200(t0)
    0x8401039e    0x66    ld s11,208(t0)
    0x840103a2    0x6a    ld t3,216(t0)
    0x840103a6    0x6e    ld t4,224(t0)
    0x840103aa    0x72    ld t5,232(t0)
    0x840103ae    0x76    ld t6,240(t0)
    0x840103b2    0x7a    ld t1,24(t0)
    0x840103b6    0x7e    add tp,t1,zero
    0x840103ba    0x82    ld t1,272(t0)
    0x840103be    0x86    csrw sepc,t1
    0x840103c2    0x8a    csrw sscratch,t0
    0x840103c6    0x8e    ld t1,256(t0)
    0x840103ca    0x92    csrw sstatus,t1
    0x840103ce    0x96    ld t1,40(t0)
    0x840103d2    0x9a    ld t0,32(t0)
    0x840103d6    0x9e    sret

Proving inst theorems
---------------------

41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restore_user_context` has 79 nodes.

Section cap_get_capPtr (69 of 269)
==================================

Deriving specifications
-----------------------

Section `cap_get_capPtr` consists of 129 instructions.


Stack analysis
---------------

No stack accesses found. Code for `cap_get_capPtr`:

    0x84010182      0x0    addi sp,sp,-16
    0x84010184      0x2    mv a4,a0
    0x84010186      0x4    srli a5,a0,0x3b
    0x8401018a      0x8    li a3,10
    0x8401018c      0xa    beq a5,a3,ffffffff8401024c <cap_get_capPtr+0xca>
    0x84010190      0xe    bltu a3,a5,ffffffff840101da <cap_get_capPtr+0x58>
    0x84010194     0x12    li a3,4
    0x84010196     0x14    beq a5,a3,ffffffff84010234 <cap_get_capPtr+0xb2>
    0x8401019a     0x18    bgeu a3,a5,ffffffff840101bc <cap_get_capPtr+0x3a>
    0x8401019e     0x1c    li a3,6
    0x840101a0     0x1e    li a0,0
    0x840101a2     0x20    bne a5,a3,ffffffff84010230 <cap_get_capPtr+0xae>
    0x840101a6     0x24    slli a5,a4,0x19
    0x840101aa     0x28    srli a5,a5,0x19
    0x840101ac     0x2a    srli a4,a4,0x26
    0x840101ae     0x2c    andi a4,a4,1
    0x840101b0     0x2e    beqz a4,ffffffff840101b8 <cap_get_capPtr+0x36>
    0x840101b2     0x30    li a4,-1
    0x840101b4     0x32    slli a4,a4,0x27
    0x840101b6     0x34    or a5,a5,a4
    0x840101b8     0x36    mv a0,a5
    0x840101ba     0x38    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x840101bc     0x3a    li a3,2
    0x840101be     0x3c    bne a5,a3,ffffffff840102a2 <cap_get_capPtr+0x120>
    0x840101c2     0x40    slli a5,a0,0x19
    0x840101c6     0x44    srli a5,a5,0x19
    0x840101c8     0x46    srli a4,a0,0x26
    0x840101cc     0x4a    andi a4,a4,1
    0x840101ce     0x4c    beqz a4,ffffffff840101d6 <cap_get_capPtr+0x54>
    0x840101d0     0x4e    li a4,-1
    0x840101d2     0x50    slli a4,a4,0x27
    0x840101d4     0x52    or a5,a5,a4
    0x840101d6     0x54    mv a0,a5
    0x840101d8     0x56    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x840101da     0x58    li a3,16
    0x840101dc     0x5a    beq a5,a3,ffffffff8401029e <cap_get_capPtr+0x11c>
    0x840101e0     0x5e    bgeu a3,a5,ffffffff84010208 <cap_get_capPtr+0x86>
    0x840101e4     0x62    li a3,18
    0x840101e6     0x64    li a0,0
    0x840101e8     0x66    bne a5,a3,ffffffff84010230 <cap_get_capPtr+0xae>
    0x840101ec     0x6a    andi a5,a4,127
    0x840101f0     0x6e    li a3,64
    0x840101f4     0x72    beq a5,a3,ffffffff84010266 <cap_get_capPtr+0xe4>
    0x840101f8     0x76    andi a4,a4,63
    0x840101fc     0x7a    addiw a4,a4,1
    0x840101fe     0x7c    li a0,-1
    0x84010200     0x7e    sll a0,a0,a4
    0x84010204     0x82    and a0,a0,a1
    0x84010206     0x84    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x84010208     0x86    li a3,12
    0x8401020a     0x88    bne a5,a3,ffffffff84010228 <cap_get_capPtr+0xa6>
    0x8401020e     0x8c    slli a5,a0,0x19
    0x84010212     0x90    srli a5,a5,0x19
    0x84010214     0x92    srli a4,a0,0x26
    0x84010218     0x96    andi a4,a4,1
    0x8401021a     0x98    beqz a4,ffffffff84010222 <cap_get_capPtr+0xa0>
    0x8401021c     0x9a    li a4,-1
    0x8401021e     0x9c    slli a4,a4,0x27
    0x84010220     0x9e    or a5,a5,a4
    0x84010222     0xa0    andi a0,a5,-1024
    0x84010226     0xa4    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x84010228     0xa6    li a3,14
    0x8401022a     0xa8    li a0,0
    0x8401022c     0xaa    bne a5,a3,ffffffff8401026a <cap_get_capPtr+0xe8>
    0x84010230     0xae    addi sp,sp,16
    0x84010232     0xb0    ret
    0x84010234     0xb2    slli a5,a0,0x19
    0x84010238     0xb6    srli a5,a5,0x19
    0x8401023a     0xb8    srli a4,a0,0x26
    0x8401023e     0xbc    andi a4,a4,1
    0x84010240     0xbe    beqz a4,ffffffff84010248 <cap_get_capPtr+0xc6>
    0x84010242     0xc0    li a4,-1
    0x84010244     0xc2    slli a4,a4,0x27
    0x84010246     0xc4    or a5,a5,a4
    0x84010248     0xc6    mv a0,a5
    0x8401024a     0xc8    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x8401024c     0xca    slli a4,a0,0x1
    0x84010250     0xce    lui a0,0xfc000
    0x84010254     0xd2    srli a0,a0,0x19
    0x84010256     0xd4    and a0,a0,a4
    0x84010258     0xd6    srli a4,a4,0x26
    0x8401025a     0xd8    andi a4,a4,1
    0x8401025c     0xda    beqz a4,ffffffff84010230 <cap_get_capPtr+0xae>
    0x8401025e     0xdc    li a5,-1
    0x84010260     0xde    slli a5,a5,0x27
    0x84010262     0xe0    or a0,a0,a5
    0x84010264     0xe2    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x84010266     0xe4    li a4,4
    0x84010268     0xe6    j ffffffff840101fc <cap_get_capPtr+0x7a>
    0x8401026a     0xe8    li a3,13
    0x8401026c     0xea    bne a5,a3,ffffffff840102a8 <cap_get_capPtr+0x126>
    0x84010270     0xee    slli a4,a4,0x2
    0x84010272     0xf0    lui a0,0xf8000
    0x84010276     0xf4    srli a0,a0,0x19
    0x84010278     0xf6    and a0,a0,a4
    0x8401027a     0xf8    srli a4,a4,0x26
    0x8401027c     0xfa    andi a4,a4,1
    0x8401027e     0xfc    beqz a4,ffffffff84010230 <cap_get_capPtr+0xae>
    0x84010280     0xfe    li a5,-1
    0x84010282    0x100    slli a5,a5,0x27
    0x84010284    0x102    or a0,a0,a5
    0x84010286    0x104    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x84010288    0x106    srli a1,a1,0x9
    0x8401028a    0x108    slli a0,a1,0x19
    0x8401028e    0x10c    srli a0,a0,0x19
    0x84010290    0x10e    srli a1,a1,0x26
    0x84010292    0x110    andi a1,a1,1
    0x84010294    0x112    beqz a1,ffffffff84010230 <cap_get_capPtr+0xae>
    0x84010296    0x114    li a5,-1
    0x84010298    0x116    slli a5,a5,0x27
    0x8401029a    0x118    or a0,a0,a5
    0x8401029c    0x11a    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x8401029e    0x11c    li a0,0
    0x840102a0    0x11e    j ffffffff84010230 <cap_get_capPtr+0xae>
    0x840102a2    0x120    li a4,3
    0x840102a4    0x122    beq a5,a4,ffffffff84010288 <cap_get_capPtr+0x106>
    0x840102a8    0x126    li a4,1
    0x840102aa    0x128    li a0,0
    0x840102ac    0x12a    bne a5,a4,ffffffff84010230 <cap_get_capPtr+0xae>
    0x840102b0    0x12e    srli a1,a1,0x9
    0x840102b2    0x130    slli a0,a1,0x19
    0x840102b6    0x134    srli a0,a0,0x19
    0x840102b8    0x136    srli a1,a1,0x26
    0x840102ba    0x138    andi a1,a1,1
    0x840102bc    0x13a    beqz a1,ffffffff84010230 <cap_get_capPtr+0xae>
    0x840102be    0x13c    li a5,-1
    0x840102c0    0x13e    slli a5,a5,0x27
    0x840102c2    0x140    or a0,a0,a5
    0x840102c4    0x142    j ffffffff84010230 <cap_get_capPtr+0xae>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
129 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cap_get_capPtr` has 176 nodes.

Section getNewActiveIRQ (70 of 269)
===================================

Deriving specifications
-----------------------

Section `getNewActiveIRQ` consists of 13 instructions.

Skipping 14402573 csrr a0,sip


Stack analysis
---------------

No stack accesses found. Code for `getNewActiveIRQ`:

    0x8401015e     0x0    csrr a0,sip
    0x84010162     0x4    andi a5,a0,512
    0x84010166     0x8    bnez a5,ffffffff84010170 <getNewActiveIRQ+0x12>
    0x84010168     0xa    andi a0,a0,32
    0x8401016c     0xe    bnez a0,ffffffff8401017c <getNewActiveIRQ+0x1e>
    0x8401016e    0x10    ret
    0x84010170    0x12    lui a5,0xcc202
    0x84010174    0x16    lw a0,4(a5)
    0x84010176    0x18    slli a0,a0,0x20
    0x84010178    0x1a    srli a0,a0,0x20
    0x8401017a    0x1c    ret
    0x8401017c    0x1e    li a0,54
    0x84010180    0x22    j ffffffff8401016e <getNewActiveIRQ+0x10>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getNewActiveIRQ` has 21 nodes.

Section findVSpaceForASID (71 of 269)
=====================================

Deriving specifications
-----------------------

Section `findVSpaceForASID` consists of 35 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `findVSpaceForASID`:

    0x840100fe     0x0    addi sp,sp,-16
    0x84010100     0x2    srli a5,a0,0x9
    0x84010104     0x6    slli a4,a5,0x3
    0x84010108     0xa    auipc a5,0x8
    0x8401010c     0xe    addi a5,a5,-264 # ffffffff84018000 <riscvKSASIDTable>
    0x84010110    0x12    add a5,a5,a4
    0x84010112    0x14    ld a5,0(a5)
    0x84010114    0x16    beqz a5,ffffffff8401012e <findVSpaceForASID+0x30>
    0x84010116    0x18    andi a0,a0,511
    0x8401011a    0x1c    slli a0,a0,0x3
    0x8401011c    0x1e    add a0,a0,a5
    0x8401011e    0x20    ld a5,0(a0)
    0x84010120    0x22    beqz a5,ffffffff84010146 <findVSpaceForASID+0x48>
    0x84010122    0x24    sd zero,0(sp)         ; stack access
    0x84010124    0x26    sd a5,8(sp)           ; stack access
    0x84010126    0x28    ld a0,0(sp)           ; stack access
    0x84010128    0x2a    ld a1,8(sp)           ; stack access
    0x8401012a    0x2c    addi sp,sp,16
    0x8401012c    0x2e    ret
    0x8401012e    0x30    auipc a5,0x8
    0x84010132    0x34    addi a5,a5,-302 # ffffffff84018000 <riscvKSASIDTable>
    0x84010136    0x38    sd zero,1024(a5)
    0x8401013a    0x3c    sd zero,1032(a5)
    0x8401013e    0x40    li a5,2
    0x84010140    0x42    sd a5,0(sp)           ; stack access
    0x84010142    0x44    sd zero,8(sp)         ; stack access
    0x84010144    0x46    j ffffffff84010126 <findVSpaceForASID+0x28>
    0x84010146    0x48    auipc a5,0x8
    0x8401014a    0x4c    addi a5,a5,-326 # ffffffff84018000 <riscvKSASIDTable>
    0x8401014e    0x50    sd zero,1024(a5)
    0x84010152    0x54    sd zero,1032(a5)
    0x84010156    0x58    li a5,2
    0x84010158    0x5a    sd a5,0(sp)           ; stack access
    0x8401015a    0x5c    sd zero,8(sp)         ; stack access
    0x8401015c    0x5e    j ffffffff84010126 <findVSpaceForASID+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
35 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `findVSpaceForASID` has 54 nodes.

Section pte_next (72 of 269)
============================

Deriving specifications
-----------------------

Section `pte_next` consists of 13 instructions.


Stack analysis
---------------

No stack accesses found. Code for `pte_next`:

    0x840100da     0x0    snez a1,a1
    0x840100de     0x4    srli a0,a0,0x2
    0x840100e0     0x6    lui a5,0xfff00
    0x840100e4     0xa    srli a5,a5,0xa
    0x840100e6     0xc    and a0,a0,a5
    0x840100e8     0xe    slli a5,a1,0x3
    0x840100ec    0x12    slli a4,a1,0x2
    0x840100f0    0x16    or a5,a5,a4
    0x840100f2    0x18    or a0,a0,a5
    0x840100f4    0x1a    slli a1,a1,0x1
    0x840100f6    0x1c    or a0,a0,a1
    0x840100f8    0x1e    ori a0,a0,225
    0x840100fc    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `pte_next` has 14 nodes.

Section idle_thread (73 of 269)
===============================

Deriving specifications
-----------------------

Section `idle_thread` consists of 2 instructions.

Skipping 10500073 wfi


Stack analysis
---------------

No stack accesses found. Code for `idle_thread`:

    0x840100d4    0x0    wfi
    0x840100d8    0x4    j ffffffff840100d4 <idle_thread>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `idle_thread` has 3 nodes.

Section bi_finalise (74 of 269)
===============================

Deriving specifications
-----------------------

Section `bi_finalise` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `bi_finalise`:

    0x84000b88     0x0    auipc a5,0x1
    0x84000b8c     0x4    addi a5,a5,-1632 # ffffffff84001528 <ndks_boot>
    0x84000b90     0x8    ld a3,592(a5)
    0x84000b94     0xc    ld a4,600(a5)
    0x84000b98    0x10    ld a5,584(a5)
    0x84000b9c    0x14    sd a3,40(a5)
    0x84000b9e    0x16    sd a4,48(a5)
    0x84000ba0    0x18    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `bi_finalise` has 14 nodes.

Section init_core_state (75 of 269)
===================================

Deriving specifications
-----------------------

Section `init_core_state` consists of 7 instructions.


Stack analysis
---------------

No stack accesses found. Code for `init_core_state`:

    0x84000958     0x0    auipc a5,0x2a
    0x8400095c     0x4    sd a0,-304(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84000960     0x8    auipc a5,0x2a
    0x84000964     0xc    ld a5,-304(a5) # ffffffff8402a830 <ksIdleThread>
    0x84000968    0x10    auipc a4,0x2a
    0x8400096c    0x14    sd a5,-304(a4) # ffffffff8402a838 <ksCurThread>
    0x84000970    0x18    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_core_state` has 11 nodes.

Section create_root_cnode (76 of 269)
=====================================

Deriving specifications
-----------------------

Section `create_root_cnode` consists of 20 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_root_cnode`:

    0x840005a2     0x0    addi sp,sp,-16
    0x840005a4     0x2    auipc a5,0x1
    0x840005a8     0x6    addi a5,a5,-124 # ffffffff84001528 <ndks_boot>
    0x840005ac     0xa    lui a4,0x80
    0x840005b0     0xe    sd a4,600(a5)
    0x840005b4    0x12    ld a4,608(a5)
    0x840005b8    0x16    slli a0,a4,0x19
    0x840005bc    0x1a    srli a0,a0,0x1a
    0x840005be    0x1c    lui a5,0xab53
    0x840005c2    0x20    slli a5,a5,0x23
    0x840005c4    0x22    or a0,a0,a5
    0x840005c6    0x24    addi a5,a4,64 # 80040 <KERNEL_OFFSET-0xfffffffefff7ffc0>
    0x840005ca    0x28    sd a0,64(a4)
    0x840005cc    0x2a    sd zero,72(a4)
    0x840005d0    0x2e    sd zero,80(a4)
    0x840005d4    0x32    li a4,3
    0x840005d6    0x34    sd a4,24(a5)
    0x840005d8    0x36    li a1,0
    0x840005da    0x38    addi sp,sp,16
    0x840005dc    0x3a    ret

Proving inst theorems
---------------------

20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_root_cnode` has 27 nodes.

Section write_slot (77 of 269)
==============================

Deriving specifications
-----------------------

Section `write_slot` consists of 8 instructions.


Stack analysis
---------------

No stack accesses found. Code for `write_slot`:

    0x84000590     0x0    addi sp,sp,-16
    0x84000592     0x2    sd a1,0(a0)
    0x84000594     0x4    sd a2,8(a0)
    0x84000596     0x6    sd zero,16(a0) # c000010 <KERNEL_OFFSET-0xfffffffef3fffff0>
    0x8400059a     0xa    li a5,3
    0x8400059c     0xc    sd a5,24(a0)
    0x8400059e     0xe    addi sp,sp,16
    0x840005a0    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_slot` has 13 nodes.

Section initIRQController (78 of 269)
=====================================

Deriving specifications
-----------------------

Section `initIRQController` consists of 30 instructions.

LW..
SW..

Stack analysis
---------------

No stack accesses found. Code for `initIRQController`:

    0x8400030e     0x0    li a4,1
    0x84000310     0x2    lui a0,0xcc001
    0x84000314     0x6    lui a6,0xcc202
    0x84000318     0xa    li a1,54
    0x8400031c     0xe    j ffffffff84000324 <initIRQController+0x16>
    0x8400031e    0x10    addi a4,a4,1
    0x84000320    0x12    beq a4,a1,ffffffff8400034c <initIRQController+0x3e>
    0x84000324    0x16    sext.w a2,a4
    0x84000328    0x1a    srli a5,a4,0x5
    0x8400032c    0x1e    slli a5,a5,0x2
    0x8400032e    0x20    add a5,a5,a0
    0x84000330    0x22    lw a5,0(a5)
    0x84000332    0x24    slli a5,a5,0x20
    0x84000334    0x26    srli a5,a5,0x20
    0x84000336    0x28    andi a3,a4,31
    0x8400033a    0x2c    srl a5,a5,a3
    0x8400033e    0x30    andi a5,a5,1
    0x84000340    0x32    beqz a5,ffffffff8400031e <initIRQController+0x10>
    0x84000342    0x34    lw a5,4(a6) # ffffffffcc202004 <ki_end+0x481d3004>
    0x84000346    0x38    sw a2,4(a6)
    0x8400034a    0x3c    j ffffffff8400031e <initIRQController+0x10>
    0x8400034c    0x3e    lui a5,0xcc000
    0x84000350    0x42    addi a5,a5,4
    0x84000352    0x44    li a3,2
    0x84000354    0x46    lui a4,0xcc000
    0x84000358    0x4a    addi a4,a4,220 # ffffffffcc0000dc <ki_end+0x47fd10dc>
    0x8400035c    0x4e    sw a3,0(a5)
    0x8400035e    0x50    addi a5,a5,4
    0x84000360    0x52    bne a5,a4,ffffffff8400035c <initIRQController+0x4e>
    0x84000364    0x56    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initIRQController` has 41 nodes.

Section initLocalIRQController (79 of 269)
==========================================

Deriving specifications
-----------------------

Section `initLocalIRQController` consists of 22 instructions.

Skipping 1047a7f3 csrrs a5,sie,a5


Stack analysis
---------------

No stack accesses found. Code for `initLocalIRQController`:

    0x840002ca     0x0    li a3,1
    0x840002cc     0x2    lui a1,0xcc002
    0x840002d0     0x6    addi a1,a1,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x840002d4     0xa    li a6,1
    0x840002d6     0xc    li a0,54
    0x840002da    0x10    srli a4,a3,0x5
    0x840002de    0x14    slli a4,a4,0x2
    0x840002e0    0x16    add a4,a4,a1
    0x840002e2    0x18    lw a2,0(a4)
    0x840002e4    0x1a    andi a5,a3,31
    0x840002e8    0x1e    sll a5,a6,a5
    0x840002ec    0x22    not a5,a5
    0x840002f0    0x26    and a5,a5,a2
    0x840002f2    0x28    sext.w a5,a5
    0x840002f4    0x2a    sw a5,0(a4)
    0x840002f6    0x2c    addi a3,a3,1
    0x840002f8    0x2e    bne a3,a0,ffffffff840002da <initLocalIRQController+0x10>
    0x840002fc    0x32    lui a5,0xcc202
    0x84000300    0x36    sw zero,0(a5) # ffffffffcc202000 <ki_end+0x481d3000>
    0x84000304    0x3a    li a5,544
    0x84000308    0x3e    csrrs a5,sie,a5
    0x8400030c    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initLocalIRQController` has 29 nodes.

Section initL2Cache (80 of 269)
===============================

Deriving specifications
-----------------------

Section `initL2Cache` consists of 1 instructions.


Stack analysis
---------------

No stack accesses found. Code for `initL2Cache`:

    0x840002c8    0x0    ret

Proving inst theorems
---------------------

1 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initL2Cache` has 2 nodes.

Section initTimer (81 of 269)
=============================

Deriving specifications
-----------------------

Section `initTimer` consists of 7 instructions.

Skipping c0102573 rdtime a0

Skipping 00000073 ecall


Stack analysis
---------------

No stack accesses found. Code for `initTimer`:

    0x840002b4     0x0    rdtime a0
    0x840002b8     0x4    addi a0,a0,2000
    0x840002bc     0x8    li a1,0
    0x840002be     0xa    li a2,0
    0x840002c0     0xc    li a7,0
    0x840002c2     0xe    ecall
    0x840002c6    0x12    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `initTimer` has 10 nodes.

Section get_avail_p_regs (82 of 269)
====================================

Deriving specifications
-----------------------

Section `get_avail_p_regs` consists of 3 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_avail_p_regs`:

    0x840002aa    0x0    auipc a0,0x1
    0x840002ae    0x4    addi a0,a0,622 # ffffffff84001518 <avail_p_regs>
    0x840002b2    0x8    ret

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_avail_p_regs` has 4 nodes.

Section get_num_avail_p_regs (83 of 269)
========================================

Deriving specifications
-----------------------

Section `get_num_avail_p_regs` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `get_num_avail_p_regs`:

    0x840002a6    0x0    li a0,1
    0x840002a8    0x2    ret

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `get_num_avail_p_regs` has 3 nodes.

Section activate_kernel_vspace (84 of 269)
==========================================

Deriving specifications
-----------------------

Section `activate_kernel_vspace` consists of 14 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

No stack accesses found. Code for `activate_kernel_vspace`:

    0x84000138     0x0    auipc a5,0x2d
    0x8400013c     0x4    addi a5,a5,-312 # ffffffff8402d000 <kernel_root_pageTable>
    0x84000140     0x8    li a4,1
    0x84000142     0xa    slli a4,a4,0x20
    0x84000144     0xc    add a5,a5,a4
    0x84000146     0xe    srli a5,a5,0xc
    0x84000148    0x10    li a4,-1
    0x8400014a    0x12    srli a3,a4,0x14
    0x8400014e    0x16    and a5,a5,a3
    0x84000150    0x18    slli a4,a4,0x3f
    0x84000152    0x1a    or a5,a5,a4
    0x84000154    0x1c    csrw satp,a5
    0x84000158    0x20    sfence.vma
    0x8400015c    0x24    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activate_kernel_vspace` has 17 nodes.

Section arch_get_n_paging (85 of 269)
=====================================

Deriving specifications
-----------------------

Section `arch_get_n_paging` consists of 19 instructions.


Stack analysis
---------------

No stack accesses found. Code for `arch_get_n_paging`:

    0x84000108     0x0    addi sp,sp,-16
    0x8400010a     0x2    addi a1,a1,-1
    0x8400010c     0x4    srli a4,a1,0x15
    0x84000110     0x8    addi a4,a4,1
    0x84000112     0xa    slli a4,a4,0x15
    0x84000114     0xc    lui a5,0xffe00
    0x84000118    0x10    and a5,a5,a0
    0x8400011a    0x12    sub a4,a4,a5
    0x8400011c    0x14    srli a4,a4,0x15
    0x8400011e    0x16    srli a5,a1,0x1e
    0x84000122    0x1a    addi a5,a5,1
    0x84000124    0x1c    slli a5,a5,0x1e
    0x84000126    0x1e    lui a3,0xc0000
    0x8400012a    0x22    and a0,a0,a3
    0x8400012c    0x24    sub a5,a5,a0
    0x8400012e    0x26    srli a5,a5,0x1e
    0x84000130    0x28    add a0,a4,a5
    0x84000134    0x2c    addi sp,sp,16
    0x84000136    0x2e    ret

Proving inst theorems
---------------------

19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `arch_get_n_paging` has 20 nodes.

Section create_unmapped_it_frame_cap (86 of 269)
================================================

Deriving specifications
-----------------------

Section `create_unmapped_it_frame_cap` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `create_unmapped_it_frame_cap`:

    0x840000f2     0x0    addi sp,sp,-16
    0x840000f4     0x2    slli a1,a0,0x9
    0x840000f8     0x6    li a0,1
    0x840000fa     0x8    slli a0,a0,0x3b
    0x840000fc     0xa    lui a5,0xfe000
    0x84000100     0xe    srli a5,a5,0x10
    0x84000102    0x10    and a1,a1,a5
    0x84000104    0x12    addi sp,sp,16
    0x84000106    0x14    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_unmapped_it_frame_cap` has 10 nodes.

Section Arch_configureIdleThread (87 of 269)
============================================

Deriving specifications
-----------------------

Section `Arch_configureIdleThread` consists of 9 instructions.


Stack analysis
---------------

No stack accesses found. Code for `Arch_configureIdleThread`:

    0x840000a4     0x0    auipc a5,0x10
    0x840000a8     0x4    addi a5,a5,48 # ffffffff840100d4 <idle_thread>
    0x840000ac     0x8    sd a5,272(a0)
    0x840000b0     0xc    li a5,288
    0x840000b4    0x10    sd a5,256(a0)
    0x840000b8    0x14    auipc a5,0x2a
    0x840000bc    0x18    addi a5,a5,1864 # ffffffff8402a800 <tlbLockCount>
    0x840000c0    0x1c    sd a5,8(a0)
    0x840000c2    0x1e    ret

Proving inst theorems
---------------------

9 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_configureIdleThread` has 13 nodes.

Section merge_regions (88 of 269)
=================================

Deriving specifications
-----------------------

Section `merge_regions` consists of 43 instructions.


Stack analysis
---------------

No stack accesses found. Code for `merge_regions`:

    0x84000026     0x0    auipc a1,0x1
    0x8400002a     0x4    ld a1,1602(a1) # ffffffff84001668 <ndks_boot+0x140>
    0x8400002e     0x8    li a5,1
    0x84000030     0xa    bgeu a5,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000034     0xe    li a4,1
    0x84000036    0x10    auipc a2,0x1
    0x8400003a    0x14    addi a2,a2,1266 # ffffffff84001528 <ndks_boot>
    0x8400003e    0x18    auipc a6,0x1
    0x84000042    0x1c    addi a6,a6,1242 # ffffffff84001518 <avail_p_regs>
    0x84000046    0x20    j ffffffff84000086 <merge_regions+0x60>
    0x84000048    0x22    slli a5,a4,0x4
    0x8400004c    0x26    add a5,a5,a2
    0x8400004e    0x28    ld a5,8(a5)
    0x84000050    0x2a    slli a0,a0,0x4
    0x84000052    0x2c    add a0,a0,a2
    0x84000054    0x2e    sd a5,8(a0)
    0x84000056    0x30    addi a5,a4,1
    0x8400005a    0x34    bgeu a5,a1,ffffffff84000078 <merge_regions+0x52>
    0x8400005e    0x38    slli a5,a4,0x4
    0x84000062    0x3c    add a5,a5,a2
    0x84000064    0x3e    slli a0,a1,0x4
    0x84000068    0x42    add a0,a0,a6
    0x8400006a    0x44    ld a3,16(a5)
    0x8400006c    0x46    sd a3,0(a5)
    0x8400006e    0x48    ld a3,24(a5)
    0x84000070    0x4a    sd a3,8(a5)
    0x84000072    0x4c    addi a5,a5,16
    0x84000074    0x4e    bne a5,a0,ffffffff8400006a <merge_regions+0x44>
    0x84000078    0x52    addi a1,a1,-1
    0x8400007a    0x54    sd a1,320(a2)
    0x8400007e    0x58    ld a1,320(a2)
    0x84000082    0x5c    bgeu a4,a1,ffffffff840000a2 <merge_regions+0x7c>
    0x84000086    0x60    addi a0,a4,-1
    0x8400008a    0x64    slli a3,a0,0x4
    0x8400008e    0x68    add a3,a3,a2
    0x84000090    0x6a    slli a5,a4,0x4
    0x84000094    0x6e    add a5,a5,a2
    0x84000096    0x70    ld a3,8(a3)
    0x84000098    0x72    ld a5,0(a5)
    0x8400009a    0x74    beq a3,a5,ffffffff84000048 <merge_regions+0x22>
    0x8400009e    0x78    addi a4,a4,1
    0x840000a0    0x7a    j ffffffff8400007e <merge_regions+0x58>
    0x840000a2    0x7c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `merge_regions` has 65 nodes.

Section str_to_long (89 of 269)
===============================

Deriving specifications
-----------------------

Section `str_to_long` consists of 44 instructions.

RVC_FTTTFFFTF_____FT.
JAL.
BGE..
MUL.....
RVC_FTT_FFFFT_____TF.
RVC_FTT_T_________TF.
RVC_FTTFFFFTFT____FT.

Stack analysis
---------------

10 stack accesses found. Annotated code for `str_to_long`:

    0x840172e0     0x0    addi sp,sp,-48
    0x840172e2     0x2    sd ra,40(sp)          ; stack access
    0x840172e4     0x4    sd s0,32(sp)          ; stack access
    0x840172e6     0x6    sd s1,24(sp)          ; stack access
    0x840172e8     0x8    sd s2,16(sp)          ; stack access
    0x840172ea     0xa    sd s3,8(sp)           ; stack access
    0x840172ec     0xc    mv s1,a0
    0x840172ee     0xe    lbu a0,0(a0)
    0x840172f2    0x12    li a5,48
    0x840172f6    0x16    li s2,10
    0x840172f8    0x18    beq a0,a5,ffffffff8401732a <str_to_long+0x4a>
    0x840172fc    0x1c    lbu a0,0(s1)
    0x84017300    0x20    beqz a0,ffffffff84017340 <str_to_long+0x60>
    0x84017302    0x22    li s0,0
    0x84017304    0x24    li s3,-1
    0x84017306    0x26    slli s2,s2,0x20
    0x84017308    0x28    srli s2,s2,0x20
    0x8401730c    0x2c    jal ra,ffffffff840172a0 <char_to_long>
    0x84017310    0x30    beq a0,s3,ffffffff84017346 <str_to_long+0x66>
    0x84017314    0x34    bge a0,s2,ffffffff84017344 <str_to_long+0x64>
    0x84017318    0x38    mul s0,s2,s0
    0x8401731c    0x3c    add s0,s0,a0
    0x8401731e    0x3e    addi s1,s1,1
    0x84017320    0x40    lbu a0,0(s1)
    0x84017324    0x44    bnez a0,ffffffff8401730c <str_to_long+0x2c>
    0x84017326    0x46    mv a0,s0
    0x84017328    0x48    j ffffffff84017346 <str_to_long+0x66>
    0x8401732a    0x4a    lbu a5,1(s1)
    0x8401732e    0x4e    andi a5,a5,223
    0x84017332    0x52    li a4,88
    0x84017336    0x56    bne a5,a4,ffffffff84017302 <str_to_long+0x22>
    0x8401733a    0x5a    addi s1,s1,2
    0x8401733c    0x5c    li s2,16
    0x8401733e    0x5e    j ffffffff840172fc <str_to_long+0x1c>
    0x84017340    0x60    li a0,-1
    0x84017342    0x62    j ffffffff84017346 <str_to_long+0x66>
    0x84017344    0x64    li a0,-1
    0x84017346    0x66    ld ra,40(sp)          ; stack access
    0x84017348    0x68    ld s0,32(sp)          ; stack access
    0x8401734a    0x6a    ld s1,24(sp)          ; stack access
    0x8401734c    0x6c    ld s2,16(sp)          ; stack access
    0x8401734e    0x6e    ld s3,8(sp)           ; stack access
    0x84017350    0x70    addi sp,sp,48
    0x84017352    0x72    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `str_to_long` has 72 nodes.

Section memset (90 of 269)
==========================

Deriving specifications
-----------------------

Section `memset` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `memset`:

    0x8401722c     0x0    addi sp,sp,-16
    0x8401722e     0x2    sd ra,8(sp)           ; stack access
    0x84017230     0x4    sd s0,0(sp)           ; stack access
    0x84017232     0x6    mv s0,a0
    0x84017234     0x8    mv a4,a1
    0x84017236     0xa    mv a1,a2
    0x84017238     0xc    or a5,a0,a2
    0x8401723c    0x10    andi a5,a5,7
    0x8401723e    0x12    or a5,a5,a4
    0x84017240    0x14    bnez a5,ffffffff84017250 <memset+0x24>
    0x84017242    0x16    jal ra,ffffffff84015a40 <memzero>
    0x84017246    0x1a    mv a0,s0
    0x84017248    0x1c    ld ra,8(sp)           ; stack access
    0x8401724a    0x1e    ld s0,0(sp)           ; stack access
    0x8401724c    0x20    addi sp,sp,16
    0x8401724e    0x22    ret
    0x84017250    0x24    add a3,a0,a2
    0x84017254    0x28    mv a5,a0
    0x84017256    0x2a    beqz a2,ffffffff84017246 <memset+0x1a>
    0x84017258    0x2c    sb a4,0(a5)
    0x8401725c    0x30    addi a5,a5,1
    0x8401725e    0x32    bne a3,a5,ffffffff84017258 <memset+0x2c>
    0x84017262    0x36    j ffffffff84017246 <memset+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `memset` has 36 nodes.

Section Arch_decodeInvocation (91 of 269)
=========================================

Deriving specifications
-----------------------

Section `Arch_decodeInvocation` consists of 7 instructions.

RVC_TFFFT____T____TF..

Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_decodeInvocation`:

    0x84016376    0x0    addi sp,sp,-32
    0x84016378    0x2    sd ra,24(sp)          ; stack access
    0x8401637a    0x4    mv a6,a7
    0x8401637c    0x6    jal ra,ffffffff84015abe <decodeRISCVMMUInvocation>
    0x84016380    0xa    ld ra,24(sp)          ; stack access
    0x84016382    0xc    addi sp,sp,32
    0x84016384    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeInvocation` has 11 nodes.

Section invokeTCB_Resume (92 of 269)
====================================

Deriving specifications
-----------------------

Section `invokeTCB_Resume` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Resume`:

    0x84014938    0x0    addi sp,sp,-16
    0x8401493a    0x2    sd ra,8(sp)           ; stack access
    0x8401493c    0x4    jal ra,ffffffff84013b2c <restart>
    0x84014940    0x8    li a0,0
    0x84014942    0xa    ld ra,8(sp)           ; stack access
    0x84014944    0xc    addi sp,sp,16
    0x84014946    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Resume` has 11 nodes.

Section invokeTCB_Suspend (93 of 269)
=====================================

Deriving specifications
-----------------------

Section `invokeTCB_Suspend` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_Suspend`:

    0x84014928    0x0    addi sp,sp,-16
    0x8401492a    0x2    sd ra,8(sp)           ; stack access
    0x8401492c    0x4    jal ra,ffffffff840130d8 <suspend>
    0x84014930    0x8    li a0,0
    0x84014932    0xa    ld ra,8(sp)           ; stack access
    0x84014934    0xc    addi sp,sp,16
    0x84014936    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_Suspend` has 11 nodes.

Section performInvocation_Endpoint (94 of 269)
==============================================

Deriving specifications
-----------------------

Section `performInvocation_Endpoint` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Endpoint`:

    0x8401454e     0x0    addi sp,sp,-16
    0x84014550     0x2    sd ra,8(sp)           ; stack access
    0x84014552     0x4    mv a6,a0
    0x84014554     0x6    mv a7,a1
    0x84014556     0x8    mv a0,a4
    0x84014558     0xa    mv a1,a5
    0x8401455a     0xc    auipc a5,0x16
    0x8401455e    0x10    ld a5,734(a5) # ffffffff8402a838 <ksCurThread>
    0x84014562    0x14    mv a4,a3
    0x84014564    0x16    mv a3,a2
    0x84014566    0x18    mv a2,a7
    0x84014568    0x1a    jal ra,ffffffff840141fc <sendIPC>
    0x8401456c    0x1e    li a0,0
    0x8401456e    0x20    ld ra,8(sp)           ; stack access
    0x84014570    0x22    addi sp,sp,16
    0x84014572    0x24    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Endpoint` has 21 nodes.

Section performInvocation_Reply (95 of 269)
===========================================

Deriving specifications
-----------------------

Section `performInvocation_Reply` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Reply`:

    0x840141de     0x0    addi sp,sp,-16
    0x840141e0     0x2    sd ra,8(sp)           ; stack access
    0x840141e2     0x4    mv a3,a2
    0x840141e4     0x6    mv a2,a1
    0x840141e6     0x8    mv a1,a0
    0x840141e8     0xa    auipc a0,0x16
    0x840141ec     0xe    ld a0,1616(a0) # ffffffff8402a838 <ksCurThread>
    0x840141f0    0x12    jal ra,ffffffff8401412c <doReplyTransfer>
    0x840141f4    0x16    li a0,0
    0x840141f6    0x18    ld ra,8(sp)           ; stack access
    0x840141f8    0x1a    addi sp,sp,16
    0x840141fa    0x1c    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Reply` has 17 nodes.

Section lookupExtraCaps (96 of 269)
===================================

Deriving specifications
-----------------------

Section `lookupExtraCaps` consists of 56 instructions.

RVC_FFFFT_________FT.

Stack analysis
---------------

16 stack accesses found. Annotated code for `lookupExtraCaps`:

    0x84013e42     0x0    beqz a1,ffffffff84013ea8 <lookupExtraCaps+0x66>
    0x84013e44     0x2    addi sp,sp,-80
    0x84013e46     0x4    sd ra,72(sp)          ; stack access
    0x84013e48     0x6    sd s0,64(sp)          ; stack access
    0x84013e4a     0x8    sd s1,56(sp)          ; stack access
    0x84013e4c     0xa    sd s2,48(sp)          ; stack access
    0x84013e4e     0xc    sd s3,40(sp)          ; stack access
    0x84013e50     0xe    sd s4,32(sp)          ; stack access
    0x84013e52    0x10    sd s5,24(sp)          ; stack access
    0x84013e54    0x12    mv s4,a0
    0x84013e56    0x14    srli a2,a2,0x7
    0x84013e58    0x16    andi s3,a2,3
    0x84013e5c    0x1a    beqz s3,ffffffff84013e94 <lookupExtraCaps+0x52>
    0x84013e60    0x1e    addi s0,a1,976
    0x84013e64    0x22    auipc s2,0x5
    0x84013e68    0x26    addi s2,s2,-1492 # ffffffff84018890 <current_extra_caps>
    0x84013e6c    0x2a    li s1,0
    0x84013e6e    0x2c    ld s5,0(s0)
    0x84013e72    0x30    mv a1,s5
    0x84013e74    0x32    mv a0,s4
    0x84013e76    0x34    jal ra,ffffffff84011422 <lookupSlot>
    0x84013e7a    0x38    sd a1,8(sp)           ; stack access
    0x84013e7c    0x3a    bnez a0,ffffffff84013eb4 <lookupExtraCaps+0x72>
    0x84013e7e    0x3c    ld a5,8(sp)           ; stack access
    0x84013e80    0x3e    sd a5,0(s2)
    0x84013e84    0x42    addi s1,s1,1
    0x84013e86    0x44    addi s0,s0,8
    0x84013e88    0x46    addi s2,s2,8
    0x84013e8a    0x48    bne s1,s3,ffffffff84013e6e <lookupExtraCaps+0x2c>
    0x84013e8e    0x4c    li a5,2
    0x84013e90    0x4e    bltu a5,s3,ffffffff84013ec6 <lookupExtraCaps+0x84>
    0x84013e94    0x52    slli s3,s3,0x3
    0x84013e96    0x54    auipc a5,0x5
    0x84013e9a    0x58    addi a5,a5,362 # ffffffff84019000 <intStateIRQNode>
    0x84013e9e    0x5c    add s3,s3,a5
    0x84013ea0    0x5e    sd zero,-1904(s3)
    0x84013ea4    0x62    li a0,0
    0x84013ea6    0x64    j ffffffff84013ec6 <lookupExtraCaps+0x84>
    0x84013ea8    0x66    auipc a5,0x5
    0x84013eac    0x6a    sd zero,-1560(a5) # ffffffff84018890 <current_extra_caps>
    0x84013eb0    0x6e    li a0,0
    0x84013eb2    0x70    ret
    0x84013eb4    0x72    auipc a5,0x4
    0x84013eb8    0x76    addi a5,a5,332 # ffffffff84018000 <riscvKSASIDTable>
    0x84013ebc    0x7a    li a4,1
    0x84013ebe    0x7c    sd a4,1680(a5)
    0x84013ec2    0x80    sd s5,1688(a5)
    0x84013ec6    0x84    ld ra,72(sp)          ; stack access
    0x84013ec8    0x86    ld s0,64(sp)          ; stack access
    0x84013eca    0x88    ld s1,56(sp)          ; stack access
    0x84013ecc    0x8a    ld s2,48(sp)          ; stack access
    0x84013ece    0x8c    ld s3,40(sp)          ; stack access
    0x84013ed0    0x8e    ld s4,32(sp)          ; stack access
    0x84013ed2    0x90    ld s5,24(sp)          ; stack access
    0x84013ed4    0x92    addi sp,sp,80
    0x84013ed6    0x94    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupExtraCaps` has 91 nodes.

Section deleteCallerCap (97 of 269)
===================================

Deriving specifications
-----------------------

Section `deleteCallerCap` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteCallerCap`:

    0x84013e2c     0x0    addi sp,sp,-16
    0x84013e2e     0x2    sd ra,8(sp)           ; stack access
    0x84013e30     0x4    andi a0,a0,-1024
    0x84013e34     0x8    addi a0,a0,96
    0x84013e38     0xc    jal ra,ffffffff840139c4 <cteDeleteOne>
    0x84013e3c    0x10    ld ra,8(sp)           ; stack access
    0x84013e3e    0x12    addi sp,sp,16
    0x84013e40    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteCallerCap` has 12 nodes.

Section performInvocation_Notification (98 of 269)
==================================================

Deriving specifications
-----------------------

Section `performInvocation_Notification` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `performInvocation_Notification`:

    0x84013dc2    0x0    addi sp,sp,-16
    0x84013dc4    0x2    sd ra,8(sp)           ; stack access
    0x84013dc6    0x4    jal ra,ffffffff84013b6c <sendSignal>
    0x84013dca    0x8    li a0,0
    0x84013dcc    0xa    ld ra,8(sp)           ; stack access
    0x84013dce    0xc    addi sp,sp,16
    0x84013dd0    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performInvocation_Notification` has 11 nodes.

Section deletingIRQHandler (99 of 269)
======================================

Deriving specifications
-----------------------

Section `deletingIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletingIRQHandler`:

    0x84013b12     0x0    addi sp,sp,-16
    0x84013b14     0x2    sd ra,8(sp)           ; stack access
    0x84013b16     0x4    slli a0,a0,0x5
    0x84013b18     0x6    auipc a5,0x5
    0x84013b1c     0xa    addi a5,a5,1256 # ffffffff84019000 <intStateIRQNode>
    0x84013b20     0xe    add a0,a0,a5
    0x84013b22    0x10    jal ra,ffffffff840139c4 <cteDeleteOne>
    0x84013b26    0x14    ld ra,8(sp)           ; stack access
    0x84013b28    0x16    addi sp,sp,16
    0x84013b2a    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletingIRQHandler` has 14 nodes.

Section invokeIRQHandler_ClearIRQHandler (100 of 269)
=====================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_ClearIRQHandler` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeIRQHandler_ClearIRQHandler`:

    0x84013a2e     0x0    addi sp,sp,-16
    0x84013a30     0x2    sd ra,8(sp)           ; stack access
    0x84013a32     0x4    slli a0,a0,0x5
    0x84013a34     0x6    auipc a5,0x5
    0x84013a38     0xa    addi a5,a5,1484 # ffffffff84019000 <intStateIRQNode>
    0x84013a3c     0xe    add a0,a0,a5
    0x84013a3e    0x10    jal ra,ffffffff840139c4 <cteDeleteOne>
    0x84013a42    0x14    ld ra,8(sp)           ; stack access
    0x84013a44    0x16    addi sp,sp,16
    0x84013a46    0x18    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_ClearIRQHandler` has 14 nodes.

Section invokeCNodeRevoke (101 of 269)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRevoke` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeRevoke`:

    0x84013524    0x0    addi sp,sp,-16
    0x84013526    0x2    sd ra,8(sp)           ; stack access
    0x84013528    0x4    jal ra,ffffffff840134a0 <cteRevoke>
    0x8401352c    0x8    ld ra,8(sp)           ; stack access
    0x8401352e    0xa    addi sp,sp,16
    0x84013530    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRevoke` has 10 nodes.

Section invokeCNodeDelete (102 of 269)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeDelete` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeDelete`:

    0x84013490    0x0    addi sp,sp,-16
    0x84013492    0x2    sd ra,8(sp)           ; stack access
    0x84013494    0x4    li a1,1
    0x84013496    0x6    jal ra,ffffffff840132d0 <cteDelete>
    0x8401349a    0xa    ld ra,8(sp)           ; stack access
    0x8401349c    0xc    addi sp,sp,16
    0x8401349e    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeDelete` has 11 nodes.

Section invokeCNodeCancelBadgedSends (103 of 269)
=================================================

Deriving specifications
-----------------------

Section `invokeCNodeCancelBadgedSends` consists of 18 instructions.


Stack analysis
---------------

3 stack accesses found. Annotated code for `invokeCNodeCancelBadgedSends`:

    0x84012f68     0x0    addi sp,sp,-32
    0x84012f6a     0x2    sd ra,24(sp)          ; stack access
    0x84012f6c     0x4    sd a0,0(sp)           ; stack access
    0x84012f6e     0x6    beqz a1,ffffffff84012f86 <invokeCNodeCancelBadgedSends+0x1e>
    0x84012f70     0x8    mv a5,a0
    0x84012f72     0xa    slli a0,a0,0x19
    0x84012f74     0xc    srli a0,a0,0x19
    0x84012f76     0xe    srli a5,a5,0x26
    0x84012f78    0x10    andi a5,a5,1
    0x84012f7a    0x12    beqz a5,ffffffff84012f82 <invokeCNodeCancelBadgedSends+0x1a>
    0x84012f7c    0x14    li a5,-1
    0x84012f7e    0x16    slli a5,a5,0x27
    0x84012f80    0x18    or a0,a0,a5
    0x84012f82    0x1a    jal ra,ffffffff84012e8c <cancelBadgedSends>
    0x84012f86    0x1e    li a0,0
    0x84012f88    0x20    ld ra,24(sp)          ; stack access
    0x84012f8a    0x22    addi sp,sp,32
    0x84012f8c    0x24    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeCancelBadgedSends` has 27 nodes.

Section scheduleChooseNewThread (104 of 269)
============================================

Deriving specifications
-----------------------

Section `scheduleChooseNewThread` consists of 34 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleChooseNewThread`:

    0x84012c16     0x0    addi sp,sp,-16
    0x84012c18     0x2    sd ra,8(sp)           ; stack access
    0x84012c1a     0x4    auipc a5,0x18
    0x84012c1e     0x8    ld a5,-1034(a5) # ffffffff8402a810 <ksDomainTime>
    0x84012c22     0xc    beqz a5,ffffffff84012c2e <scheduleChooseNewThread+0x18>
    0x84012c24     0xe    jal ra,ffffffff84012b96 <chooseThread>
    0x84012c28    0x12    ld ra,8(sp)           ; stack access
    0x84012c2a    0x14    addi sp,sp,16
    0x84012c2c    0x16    ret
    0x84012c2e    0x18    auipc a5,0x18
    0x84012c32    0x1c    ld a5,-1062(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012c36    0x20    addi a5,a5,1
    0x84012c38    0x22    li a4,2
    0x84012c3a    0x24    bltu a4,a5,ffffffff84012c7a <scheduleChooseNewThread+0x64>
    0x84012c3e    0x28    auipc a4,0x18
    0x84012c42    0x2c    sd a5,-1078(a4) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012c46    0x30    auipc a5,0x18
    0x84012c4a    0x34    sd zero,-1062(a5) # ffffffff8402a820 <ksWorkUnitsCompleted>
    0x84012c4e    0x38    auipc a5,0x18
    0x84012c52    0x3c    ld a5,-1094(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012c56    0x40    slli a4,a5,0x4
    0x84012c5a    0x44    auipc a5,0x4
    0x84012c5e    0x48    addi a5,a5,1934 # ffffffff840173e8 <msgRegisters>
    0x84012c62    0x4c    add a5,a5,a4
    0x84012c64    0x4e    ld a4,192(a5)
    0x84012c66    0x50    auipc a3,0x18
    0x84012c6a    0x54    sd a4,-1102(a3) # ffffffff8402a818 <ksCurDomain>
    0x84012c6e    0x58    ld a5,200(a5)
    0x84012c70    0x5a    auipc a4,0x18
    0x84012c74    0x5e    sd a5,-1120(a4) # ffffffff8402a810 <ksDomainTime>
    0x84012c78    0x62    j ffffffff84012c24 <scheduleChooseNewThread+0xe>
    0x84012c7a    0x64    auipc a5,0x18
    0x84012c7e    0x68    sd zero,-1138(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84012c82    0x6c    j ffffffff84012c46 <scheduleChooseNewThread+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleChooseNewThread` has 52 nodes.

Section receiveSignal (105 of 269)
==================================

Deriving specifications
-----------------------

Section `receiveSignal` consists of 91 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `receiveSignal`:

    0x840127e0     0x0    addi sp,sp,-48
    0x840127e2     0x2    sd ra,40(sp)          ; stack access
    0x840127e4     0x4    sd s0,32(sp)          ; stack access
    0x840127e6     0x6    sd s1,24(sp)          ; stack access
    0x840127e8     0x8    sd s2,16(sp)          ; stack access
    0x840127ea     0xa    mv s0,a0
    0x840127ec     0xc    sd a1,0(sp)           ; stack access
    0x840127ee     0xe    sd a2,8(sp)           ; stack access
    0x840127f0    0x10    slli a5,a1,0x19
    0x840127f4    0x14    srli a5,a5,0x19
    0x840127f6    0x16    srli a1,a1,0x26
    0x840127f8    0x18    andi a1,a1,1
    0x840127fa    0x1a    beqz a1,ffffffff84012802 <receiveSignal+0x22>
    0x840127fc    0x1c    li a4,-1
    0x840127fe    0x1e    slli a4,a4,0x27
    0x84012800    0x20    or a5,a5,a4
    0x84012802    0x22    mv s1,a5
    0x84012804    0x24    ld a4,0(a5)
    0x84012806    0x26    andi a2,a4,3
    0x8401280a    0x2a    andi a4,a4,2
    0x8401280c    0x2c    beqz a4,ffffffff8401282a <receiveSignal+0x4a>
    0x8401280e    0x2e    li a5,2
    0x84012810    0x30    bne a2,a5,ffffffff8401281e <receiveSignal+0x3e>
    0x84012814    0x34    ld a5,16(s1)
    0x84012816    0x36    sd a5,72(s0)
    0x84012818    0x38    ld a5,0(s1)
    0x8401281a    0x3a    andi a5,a5,-4
    0x8401281c    0x3c    sd a5,0(s1)
    0x8401281e    0x3e    ld ra,40(sp)          ; stack access
    0x84012820    0x40    ld s0,32(sp)          ; stack access
    0x84012822    0x42    ld s1,24(sp)          ; stack access
    0x84012824    0x44    ld s2,16(sp)          ; stack access
    0x84012826    0x46    addi sp,sp,48
    0x84012828    0x48    ret
    0x8401282a    0x4a    beqz a3,ffffffff840128ba <receiveSignal+0xda>
    0x8401282c    0x4c    ld a4,280(s0)
    0x84012830    0x50    li s2,-1
    0x84012832    0x52    slli a3,s2,0x27
    0x84012836    0x56    and a4,a4,a3
    0x84012838    0x58    lui a3,0xe0000
    0x8401283c    0x5c    srli a3,a3,0x19
    0x8401283e    0x5e    and a5,a5,a3
    0x84012840    0x60    or a5,a5,a4
    0x84012842    0x62    ori a5,a5,6
    0x84012846    0x66    sd a5,280(s0)
    0x8401284a    0x6a    mv a0,s0
    0x8401284c    0x6c    jal ra,ffffffff840125c2 <scheduleTCB>
    0x84012850    0x70    ld a4,8(s1)
    0x84012852    0x72    srli a5,s2,0x19
    0x84012856    0x76    and a5,a5,a4
    0x84012858    0x78    srli a4,a4,0x26
    0x8401285a    0x7a    andi a4,a4,1
    0x8401285c    0x7c    beqz a4,ffffffff840128aa <receiveSignal+0xca>
    0x8401285e    0x7e    li a4,-1
    0x84012860    0x80    slli a4,a4,0x27
    0x84012862    0x82    or a5,a5,a4
    0x84012864    0x84    ld a3,0(s1)
    0x84012866    0x86    srli a4,a3,0x19
    0x8401286a    0x8a    bgez a3,ffffffff84012876 <receiveSignal+0x96>
    0x8401286e    0x8e    li a3,-1
    0x84012870    0x90    slli a3,a3,0x27
    0x84012872    0x92    or a4,a4,a3
    0x84012874    0x94    beqz a5,ffffffff840128b6 <receiveSignal+0xd6>
    0x84012876    0x96    sd s0,408(a4)
    0x8401287a    0x9a    sd a4,416(s0)
    0x8401287e    0x9e    sd zero,408(s0)
    0x84012882    0xa2    ld a4,0(s1)
    0x84012884    0xa4    ld a3,8(s1)
    0x84012886    0xa6    li a2,-1
    0x84012888    0xa8    slli a1,a2,0x27
    0x8401288c    0xac    and a3,a3,a1
    0x8401288e    0xae    srli a2,a2,0x19
    0x84012890    0xb0    and a5,a5,a2
    0x84012892    0xb2    or a5,a5,a3
    0x84012894    0xb4    sd a5,8(s1)
    0x84012896    0xb6    lui a5,0x2000
    0x8401289a    0xba    addi a5,a5,-4
    0x8401289c    0xbc    and a5,a5,a4
    0x8401289e    0xbe    slli s0,s0,0x19
    0x840128a0    0xc0    or s0,s0,a5
    0x840128a2    0xc2    ori s0,s0,1
    0x840128a6    0xc6    sd s0,0(s1)
    0x840128a8    0xc8    j ffffffff8401281e <receiveSignal+0x3e>
    0x840128aa    0xca    ld a3,0(s1)
    0x840128ac    0xcc    srli a4,a3,0x19
    0x840128b0    0xd0    bltz a3,ffffffff8401286e <receiveSignal+0x8e>
    0x840128b4    0xd4    j ffffffff84012874 <receiveSignal+0x94>
    0x840128b6    0xd6    mv a5,s0
    0x840128b8    0xd8    j ffffffff8401287a <receiveSignal+0x9a>
    0x840128ba    0xda    sd zero,72(s0)
    0x840128be    0xde    j ffffffff8401281e <receiveSignal+0x3e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
91 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveSignal` has 137 nodes.

Section handleDoubleFault (106 of 269)
======================================

Deriving specifications
-----------------------

Section `handleDoubleFault` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleDoubleFault`:

    0x840126d8    0x0    addi sp,sp,-32
    0x840126da    0x2    sd ra,24(sp)          ; stack access
    0x840126dc    0x4    li a1,0
    0x840126de    0x6    jal ra,ffffffff840125f6 <setThreadState>
    0x840126e2    0xa    ld ra,24(sp)          ; stack access
    0x840126e4    0xc    addi sp,sp,32
    0x840126e6    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleDoubleFault` has 11 nodes.

Section setThreadState (107 of 269)
===================================

Deriving specifications
-----------------------

Section `setThreadState` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setThreadState`:

    0x840125f6     0x0    addi sp,sp,-16
    0x840125f8     0x2    sd ra,8(sp)           ; stack access
    0x840125fa     0x4    ld a5,280(a0)
    0x840125fe     0x8    andi a5,a5,-16
    0x84012600     0xa    andi a1,a1,15
    0x84012602     0xc    or a5,a5,a1
    0x84012604     0xe    sd a5,280(a0)
    0x84012608    0x12    jal ra,ffffffff840125c2 <scheduleTCB>
    0x8401260c    0x16    ld ra,8(sp)           ; stack access
    0x8401260e    0x18    addi sp,sp,16
    0x84012610    0x1a    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setThreadState` has 17 nodes.

Section scheduleTCB (108 of 269)
================================

Deriving specifications
-----------------------

Section `scheduleTCB` consists of 18 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `scheduleTCB`:

    0x840125c2     0x0    auipc a5,0x18
    0x840125c6     0x4    ld a5,630(a5) # ffffffff8402a838 <ksCurThread>
    0x840125ca     0x8    beq a5,a0,ffffffff840125d0 <scheduleTCB+0xe>
    0x840125ce     0xc    ret
    0x840125d0     0xe    auipc a5,0x18
    0x840125d4    0x12    ld a5,600(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x840125d8    0x16    bnez a5,ffffffff840125ce <scheduleTCB+0xc>
    0x840125da    0x18    ld a5,280(a0)
    0x840125de    0x1c    andi a5,a5,15
    0x840125e0    0x1e    addi a5,a5,-1
    0x840125e2    0x20    li a4,1
    0x840125e4    0x22    bgeu a4,a5,ffffffff840125ce <scheduleTCB+0xc>
    0x840125e8    0x26    addi sp,sp,-16
    0x840125ea    0x28    sd ra,8(sp)           ; stack access
    0x840125ec    0x2a    jal ra,ffffffff84012590 <rescheduleRequired>
    0x840125f0    0x2e    ld ra,8(sp)           ; stack access
    0x840125f2    0x30    addi sp,sp,16
    0x840125f4    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `scheduleTCB` has 32 nodes.

Section rescheduleRequired (109 of 269)
=======================================

Deriving specifications
-----------------------

Section `rescheduleRequired` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `rescheduleRequired`:

    0x84012590     0x0    auipc a0,0x18
    0x84012594     0x4    ld a0,664(a0) # ffffffff8402a828 <ksSchedulerAction>
    0x84012598     0x8    li a5,1
    0x8401259a     0xa    bltu a5,a0,ffffffff840125aa <rescheduleRequired+0x1a>
    0x8401259e     0xe    li a5,1
    0x840125a0    0x10    auipc a4,0x18
    0x840125a4    0x14    sd a5,648(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x840125a8    0x18    ret
    0x840125aa    0x1a    addi sp,sp,-16
    0x840125ac    0x1c    sd ra,8(sp)           ; stack access
    0x840125ae    0x1e    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x840125b2    0x22    li a5,1
    0x840125b4    0x24    auipc a4,0x18
    0x840125b8    0x28    sd a5,628(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x840125bc    0x2c    ld ra,8(sp)           ; stack access
    0x840125be    0x2e    addi sp,sp,16
    0x840125c0    0x30    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `rescheduleRequired` has 27 nodes.

Section slotCapLongRunningDelete (110 of 269)
=============================================

Deriving specifications
-----------------------

Section `slotCapLongRunningDelete` consists of 24 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `slotCapLongRunningDelete`:

    0x840121d0     0x0    addi sp,sp,-16
    0x840121d2     0x2    sd ra,8(sp)           ; stack access
    0x840121d4     0x4    sd s0,0(sp)           ; stack access
    0x840121d6     0x6    ld s0,0(a0)
    0x840121d8     0x8    srli s0,s0,0x3b
    0x840121da     0xa    beqz s0,ffffffff840121f8 <slotCapLongRunningDelete+0x28>
    0x840121dc     0xc    jal ra,ffffffff8401217a <isFinalCapability>
    0x840121e0    0x10    beqz a0,ffffffff84012202 <slotCapLongRunningDelete+0x32>
    0x840121e2    0x12    addi s0,s0,-10
    0x840121e4    0x14    li a5,8
    0x840121e6    0x16    bltu a5,s0,ffffffff84012206 <slotCapLongRunningDelete+0x36>
    0x840121ea    0x1a    li a5,1
    0x840121ec    0x1c    sll s0,a5,s0
    0x840121f0    0x20    andi s0,s0,261
    0x840121f4    0x24    snez s0,s0
    0x840121f8    0x28    mv a0,s0
    0x840121fa    0x2a    ld ra,8(sp)           ; stack access
    0x840121fc    0x2c    ld s0,0(sp)           ; stack access
    0x840121fe    0x2e    addi sp,sp,16
    0x84012200    0x30    ret
    0x84012202    0x32    mv s0,a0
    0x84012204    0x34    j ffffffff840121f8 <slotCapLongRunningDelete+0x28>
    0x84012206    0x36    li s0,0
    0x84012208    0x38    j ffffffff840121f8 <slotCapLongRunningDelete+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slotCapLongRunningDelete` has 37 nodes.

Section isFinalCapability (111 of 269)
======================================

Deriving specifications
-----------------------

Section `isFinalCapability` consists of 39 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `isFinalCapability`:

    0x8401217a     0x0    addi sp,sp,-32
    0x8401217c     0x2    sd ra,24(sp)          ; stack access
    0x8401217e     0x4    sd s0,16(sp)          ; stack access
    0x84012180     0x6    sd s1,8(sp)           ; stack access
    0x84012182     0x8    mv s0,a0
    0x84012184     0xa    ld a5,16(a0)
    0x84012186     0xc    ld s1,24(a0)
    0x84012188     0xe    beqz a5,ffffffff8401219c <isFinalCapability+0x22>
    0x8401218a    0x10    ld a2,0(a0)
    0x8401218c    0x12    ld a3,8(a0)
    0x8401218e    0x14    ld a0,0(a5)
    0x84012190    0x16    ld a1,8(a5)
    0x84012192    0x18    jal ra,ffffffff84012122 <sameObjectAs>
    0x84012196    0x1c    mv a5,a0
    0x84012198    0x1e    li a0,0
    0x8401219a    0x20    bnez a5,ffffffff840121c6 <isFinalCapability+0x4c>
    0x8401219c    0x22    lui a5,0xf8000
    0x840121a0    0x26    srli a5,a5,0x19
    0x840121a2    0x28    and a5,a5,s1
    0x840121a4    0x2a    srli s1,s1,0x26
    0x840121a6    0x2c    andi s1,s1,1
    0x840121a8    0x2e    beqz s1,ffffffff840121c2 <isFinalCapability+0x48>
    0x840121aa    0x30    li a4,-1
    0x840121ac    0x32    slli a4,a4,0x27
    0x840121ae    0x34    or a5,a5,a4
    0x840121b0    0x36    ld a2,0(a5)
    0x840121b2    0x38    ld a3,8(a5)
    0x840121b4    0x3a    ld a0,0(s0)
    0x840121b6    0x3c    ld a1,8(s0)
    0x840121b8    0x3e    jal ra,ffffffff84012122 <sameObjectAs>
    0x840121bc    0x42    seqz a0,a0
    0x840121c0    0x46    j ffffffff840121c6 <isFinalCapability+0x4c>
    0x840121c2    0x48    li a0,1
    0x840121c4    0x4a    bnez a5,ffffffff840121b0 <isFinalCapability+0x36>
    0x840121c6    0x4c    ld ra,24(sp)          ; stack access
    0x840121c8    0x4e    ld s0,16(sp)          ; stack access
    0x840121ca    0x50    ld s1,8(sp)           ; stack access
    0x840121cc    0x52    addi sp,sp,32
    0x840121ce    0x54    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isFinalCapability` has 66 nodes.

Section ensureNoChildren (112 of 269)
=====================================

Deriving specifications
-----------------------

Section `ensureNoChildren` consists of 27 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `ensureNoChildren`:

    0x8401206a     0x0    ld a5,24(a0)
    0x8401206c     0x2    lui a1,0xf8000
    0x84012070     0x6    srli a1,a1,0x19
    0x84012072     0x8    and a1,a1,a5
    0x84012074     0xa    srli a5,a5,0x26
    0x84012076     0xc    andi a5,a5,1
    0x84012078     0xe    beqz a5,ffffffff84012094 <ensureNoChildren+0x2a>
    0x8401207a    0x10    li a5,-1
    0x8401207c    0x12    slli a5,a5,0x27
    0x8401207e    0x14    or a1,a1,a5
    0x84012080    0x16    addi sp,sp,-16
    0x84012082    0x18    sd ra,8(sp)           ; stack access
    0x84012084    0x1a    jal ra,ffffffff84011ff2 <isMDBParentOf>
    0x84012088    0x1e    mv a1,a0
    0x8401208a    0x20    bnez a0,ffffffff8401209a <ensureNoChildren+0x30>
    0x8401208c    0x22    mv a0,a1
    0x8401208e    0x24    ld ra,8(sp)           ; stack access
    0x84012090    0x26    addi sp,sp,16
    0x84012092    0x28    ret
    0x84012094    0x2a    bnez a1,ffffffff84012080 <ensureNoChildren+0x16>
    0x84012096    0x2c    mv a0,a1
    0x84012098    0x2e    ret
    0x8401209a    0x30    li a5,9
    0x8401209c    0x32    auipc a4,0x6
    0x840120a0    0x36    sd a5,1588(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840120a4    0x3a    li a1,3
    0x840120a6    0x3c    j ffffffff8401208c <ensureNoChildren+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `ensureNoChildren` has 40 nodes.

Section isMDBParentOf (113 of 269)
==================================

Deriving specifications
-----------------------

Section `isMDBParentOf` consists of 49 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isMDBParentOf`:

    0x84011ff2     0x0    addi sp,sp,-32
    0x84011ff4     0x2    sd ra,24(sp)          ; stack access
    0x84011ff6     0x4    sd s0,16(sp)          ; stack access
    0x84011ff8     0x6    sd s1,8(sp)           ; stack access
    0x84011ffa     0x8    sd s2,0(sp)           ; stack access
    0x84011ffc     0xa    ld s0,24(a0)
    0x84011ffe     0xc    srli s0,s0,0x1
    0x84012000     0xe    andi s0,s0,1
    0x84012002    0x10    beqz s0,ffffffff8401205c <isMDBParentOf+0x6a>
    0x84012004    0x12    mv s1,a0
    0x84012006    0x14    mv s2,a1
    0x84012008    0x16    ld a2,0(a1)
    0x8401200a    0x18    ld a3,8(a1)
    0x8401200c    0x1a    ld a0,0(a0)
    0x8401200e    0x1c    ld a1,8(s1)
    0x84012010    0x1e    jal ra,ffffffff84011c9a <sameRegionAs>
    0x84012014    0x22    beqz a0,ffffffff8401205a <isMDBParentOf+0x68>
    0x84012016    0x24    ld a5,0(s1)
    0x84012018    0x26    srli a5,a5,0x3b
    0x8401201a    0x28    li a4,4
    0x8401201c    0x2a    beq a5,a4,ffffffff84012040 <isMDBParentOf+0x4e>
    0x84012020    0x2e    li a4,6
    0x84012022    0x30    bne a5,a4,ffffffff8401205c <isMDBParentOf+0x6a>
    0x84012026    0x34    ld a5,8(s1)
    0x84012028    0x36    beqz a5,ffffffff8401205c <isMDBParentOf+0x6a>
    0x8401202a    0x38    ld a4,8(s2)
    0x8401202e    0x3c    li s0,0
    0x84012030    0x3e    bne a5,a4,ffffffff8401205c <isMDBParentOf+0x6a>
    0x84012034    0x42    ld s0,24(s2)
    0x84012038    0x46    xori s0,s0,1
    0x8401203c    0x4a    andi s0,s0,1
    0x8401203e    0x4c    j ffffffff8401205c <isMDBParentOf+0x6a>
    0x84012040    0x4e    ld a5,8(s1)
    0x84012042    0x50    beqz a5,ffffffff8401205c <isMDBParentOf+0x6a>
    0x84012044    0x52    ld a4,8(s2)
    0x84012048    0x56    li s0,0
    0x8401204a    0x58    bne a4,a5,ffffffff8401205c <isMDBParentOf+0x6a>
    0x8401204e    0x5c    ld s0,24(s2)
    0x84012052    0x60    xori s0,s0,1
    0x84012056    0x64    andi s0,s0,1
    0x84012058    0x66    j ffffffff8401205c <isMDBParentOf+0x6a>
    0x8401205a    0x68    mv s0,a0
    0x8401205c    0x6a    mv a0,s0
    0x8401205e    0x6c    ld ra,24(sp)          ; stack access
    0x84012060    0x6e    ld s0,16(sp)          ; stack access
    0x84012062    0x70    ld s1,8(sp)           ; stack access
    0x84012064    0x72    ld s2,0(sp)           ; stack access
    0x84012066    0x74    addi sp,sp,32
    0x84012068    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isMDBParentOf` has 87 nodes.

Section completeSignal (114 of 269)
===================================

Deriving specifications
-----------------------

Section `completeSignal` consists of 14 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `completeSignal`:

    0x84011bb0     0x0    beqz a1,ffffffff84011bc8 <completeSignal+0x18>
    0x84011bb2     0x2    ld a5,0(a0)
    0x84011bb4     0x4    andi a5,a5,3
    0x84011bb6     0x6    li a4,2
    0x84011bb8     0x8    bne a5,a4,ffffffff84011bc8 <completeSignal+0x18>
    0x84011bbc     0xc    ld a5,16(a0)
    0x84011bbe     0xe    sd a5,72(a1)
    0x84011bc0    0x10    ld a5,0(a0)
    0x84011bc2    0x12    andi a5,a5,-4
    0x84011bc4    0x14    sd a5,0(a0)
    0x84011bc6    0x16    ret
    0x84011bc8    0x18    addi sp,sp,-16
    0x84011bca    0x1a    sd ra,8(sp)           ; stack access
    0x84011bcc    0x1c    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `completeSignal` has 26 nodes.

Section emptySlot (115 of 269)
==============================

Deriving specifications
-----------------------

Section `emptySlot` consists of 55 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `emptySlot`:

    0x84011b30     0x0    addi sp,sp,-32
    0x84011b32     0x2    sd ra,24(sp)          ; stack access
    0x84011b34     0x4    sd a1,0(sp)           ; stack access
    0x84011b36     0x6    sd a2,8(sp)           ; stack access
    0x84011b38     0x8    ld a5,0(a0)
    0x84011b3a     0xa    srli a5,a5,0x3b
    0x84011b3c     0xc    beqz a5,ffffffff84011b82 <emptySlot+0x52>
    0x84011b3e     0xe    ld a2,16(a0)
    0x84011b40    0x10    ld a4,24(a0)
    0x84011b42    0x12    lui a5,0xf8000
    0x84011b46    0x16    srli a5,a5,0x19
    0x84011b48    0x18    and a5,a5,a4
    0x84011b4a    0x1a    srli a3,a4,0x26
    0x84011b4e    0x1e    andi a3,a3,1
    0x84011b50    0x20    beqz a3,ffffffff84011b88 <emptySlot+0x58>
    0x84011b52    0x22    li a3,-1
    0x84011b54    0x24    slli a3,a3,0x27
    0x84011b56    0x26    or a5,a5,a3
    0x84011b58    0x28    bnez a2,ffffffff84011b8a <emptySlot+0x5a>
    0x84011b5a    0x2a    sd a2,16(a5)
    0x84011b5c    0x2c    ld a3,24(a5)
    0x84011b5e    0x2e    or a4,a4,a3
    0x84011b60    0x30    andi a4,a4,1
    0x84011b62    0x32    andi a3,a3,-2
    0x84011b64    0x34    or a4,a4,a3
    0x84011b66    0x36    sd a4,24(a5)
    0x84011b68    0x38    sd zero,0(a0)
    0x84011b6c    0x3c    sd zero,8(a0)
    0x84011b70    0x40    sd zero,16(a0)
    0x84011b74    0x44    sd zero,24(a0)
    0x84011b78    0x48    ld a5,0(sp)           ; stack access
    0x84011b7a    0x4a    srli a5,a5,0x3b
    0x84011b7c    0x4c    li a4,16
    0x84011b7e    0x4e    beq a5,a4,ffffffff84011ba4 <emptySlot+0x74>
    0x84011b82    0x52    ld ra,24(sp)          ; stack access
    0x84011b84    0x54    addi sp,sp,32
    0x84011b86    0x56    ret
    0x84011b88    0x58    beqz a2,ffffffff84011ba0 <emptySlot+0x70>
    0x84011b8a    0x5a    ld a3,24(a2)
    0x84011b8c    0x5c    li a1,-1
    0x84011b8e    0x5e    slli a1,a1,0x27
    0x84011b90    0x60    addi a1,a1,3
    0x84011b92    0x62    and a3,a3,a1
    0x84011b94    0x64    lui a1,0xf8000
    0x84011b98    0x68    srli a1,a1,0x19
    0x84011b9a    0x6a    and a1,a1,a5
    0x84011b9c    0x6c    or a3,a3,a1
    0x84011b9e    0x6e    sd a3,24(a2)
    0x84011ba0    0x70    beqz a5,ffffffff84011b68 <emptySlot+0x38>
    0x84011ba2    0x72    j ffffffff84011b5a <emptySlot+0x2a>
    0x84011ba4    0x74    ld a0,8(sp)           ; stack access
    0x84011ba6    0x76    slli a0,a0,0x34
    0x84011ba8    0x78    srli a0,a0,0x34
    0x84011baa    0x7a    jal ra,ffffffff84011b1e <deletedIRQHandler>
    0x84011bae    0x7e    j ffffffff84011b82 <emptySlot+0x52>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `emptySlot` has 87 nodes.

Section deletedIRQHandler (116 of 269)
======================================

Deriving specifications
-----------------------

Section `deletedIRQHandler` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deletedIRQHandler`:

    0x84011b1e     0x0    addi sp,sp,-16
    0x84011b20     0x2    sd ra,8(sp)           ; stack access
    0x84011b22     0x4    mv a1,a0
    0x84011b24     0x6    li a0,0
    0x84011b26     0x8    jal ra,ffffffff84011a7e <setIRQState>
    0x84011b2a     0xc    ld ra,8(sp)           ; stack access
    0x84011b2c     0xe    addi sp,sp,16
    0x84011b2e    0x10    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deletedIRQHandler` has 12 nodes.

Section capSwapForDelete (117 of 269)
=====================================

Deriving specifications
-----------------------

Section `capSwapForDelete` consists of 14 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `capSwapForDelete`:

    0x84011932     0x0    beq a0,a1,ffffffff84011950 <capSwapForDelete+0x1e>
    0x84011936     0x4    addi sp,sp,-48
    0x84011938     0x6    sd ra,40(sp)          ; stack access
    0x8401193a     0x8    mv a2,a0
    0x8401193c     0xa    mv a5,a1
    0x8401193e     0xc    ld a3,0(a1)
    0x84011940     0xe    ld a4,8(a1)
    0x84011942    0x10    ld a0,0(a0)
    0x84011944    0x12    ld a1,8(a2)
    0x84011946    0x14    jal ra,ffffffff8401185e <cteSwap>
    0x8401194a    0x18    ld ra,40(sp)          ; stack access
    0x8401194c    0x1a    addi sp,sp,48
    0x8401194e    0x1c    ret
    0x84011950    0x1e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `capSwapForDelete` has 25 nodes.

Section invokeCNodeMove (118 of 269)
====================================

Deriving specifications
-----------------------

Section `invokeCNodeMove` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeMove`:

    0x8401180a    0x0    addi sp,sp,-32
    0x8401180c    0x2    sd ra,24(sp)          ; stack access
    0x8401180e    0x4    jal ra,ffffffff840117b2 <cteMove>
    0x84011812    0x8    li a0,0
    0x84011814    0xa    ld ra,24(sp)          ; stack access
    0x84011816    0xc    addi sp,sp,32
    0x84011818    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeMove` has 11 nodes.

Section invokeCNodeInsert (119 of 269)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeInsert` consists of 7 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeCNodeInsert`:

    0x840117a2    0x0    addi sp,sp,-32
    0x840117a4    0x2    sd ra,24(sp)          ; stack access
    0x840117a6    0x4    jal ra,ffffffff84011676 <cteInsert>
    0x840117aa    0x8    li a0,0
    0x840117ac    0xa    ld ra,24(sp)          ; stack access
    0x840117ae    0xc    addi sp,sp,32
    0x840117b0    0xe    ret

Proving inst theorems
---------------------

7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeInsert` has 11 nodes.

Section switchToIdleThread (120 of 269)
=======================================

Deriving specifications
-----------------------

Section `switchToIdleThread` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `switchToIdleThread`:

    0x8401161c     0x0    addi sp,sp,-16
    0x8401161e     0x2    sd ra,8(sp)           ; stack access
    0x84011620     0x4    jal ra,ffffffff84010c6e <Arch_switchToIdleThread>
    0x84011624     0x8    auipc a5,0x19
    0x84011628     0xc    ld a5,524(a5) # ffffffff8402a830 <ksIdleThread>
    0x8401162c    0x10    auipc a4,0x19
    0x84011630    0x14    sd a5,524(a4) # ffffffff8402a838 <ksCurThread>
    0x84011634    0x18    ld ra,8(sp)           ; stack access
    0x84011636    0x1a    addi sp,sp,16
    0x84011638    0x1c    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToIdleThread` has 16 nodes.

Section doFaultTransfer (121 of 269)
====================================

Deriving specifications
-----------------------

Section `doFaultTransfer` consists of 26 instructions.

RVC_FTTFFT___FT___FT.

Stack analysis
---------------

8 stack accesses found. Annotated code for `doFaultTransfer`:

    0x840115da     0x0    addi sp,sp,-32
    0x840115dc     0x2    sd ra,24(sp)          ; stack access
    0x840115de     0x4    sd s0,16(sp)          ; stack access
    0x840115e0     0x6    sd s1,8(sp)           ; stack access
    0x840115e2     0x8    sd s2,0(sp)           ; stack access
    0x840115e4     0xa    mv s2,a0
    0x840115e6     0xc    mv s1,a1
    0x840115e8     0xe    mv s0,a2
    0x840115ea    0x10    mv a2,a3
    0x840115ec    0x12    mv a1,s0
    0x840115ee    0x14    mv a0,s1
    0x840115f0    0x16    jal ra,ffffffff840106b8 <setMRs_fault>
    0x840115f4    0x1a    ld a5,312(s1)
    0x840115f8    0x1e    slli a5,a5,0xc
    0x840115fa    0x20    lui a4,0xf
    0x840115fc    0x22    and a5,a5,a4
    0x840115fe    0x24    andi a0,a0,127
    0x84011602    0x28    or a5,a5,a0
    0x84011604    0x2a    sd a5,80(s0)
    0x84011606    0x2c    sd s2,72(s0)
    0x8401160a    0x30    ld ra,24(sp)          ; stack access
    0x8401160c    0x32    ld s0,16(sp)          ; stack access
    0x8401160e    0x34    ld s1,8(sp)           ; stack access
    0x84011610    0x36    ld s2,0(sp)           ; stack access
    0x84011612    0x38    addi sp,sp,32
    0x84011614    0x3a    ret

Proving inst theorems
---------------------

26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doFaultTransfer` has 39 nodes.

Section lookupPivotSlot (122 of 269)
====================================

Deriving specifications
-----------------------

Section `lookupPivotSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupPivotSlot`:

    0x840115c0     0x0    addi sp,sp,-48
    0x840115c2     0x2    sd ra,40(sp)          ; stack access
    0x840115c4     0x4    mv a5,a1
    0x840115c6     0x6    mv a4,a3
    0x840115c8     0x8    mv a3,a2
    0x840115ca     0xa    mv a1,a0
    0x840115cc     0xc    mv a2,a5
    0x840115ce     0xe    li a0,1
    0x840115d0    0x10    jal ra,ffffffff840114bc <lookupSlotForCNodeOp>
    0x840115d4    0x14    ld ra,40(sp)          ; stack access
    0x840115d6    0x16    addi sp,sp,48
    0x840115d8    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupPivotSlot` has 16 nodes.

Section lookupTargetSlot (123 of 269)
=====================================

Deriving specifications
-----------------------

Section `lookupTargetSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupTargetSlot`:

    0x840115a6     0x0    addi sp,sp,-48
    0x840115a8     0x2    sd ra,40(sp)          ; stack access
    0x840115aa     0x4    mv a5,a1
    0x840115ac     0x6    mv a4,a3
    0x840115ae     0x8    mv a3,a2
    0x840115b0     0xa    mv a1,a0
    0x840115b2     0xc    mv a2,a5
    0x840115b4     0xe    li a0,0
    0x840115b6    0x10    jal ra,ffffffff840114bc <lookupSlotForCNodeOp>
    0x840115ba    0x14    ld ra,40(sp)          ; stack access
    0x840115bc    0x16    addi sp,sp,48
    0x840115be    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupTargetSlot` has 16 nodes.

Section lookupSourceSlot (124 of 269)
=====================================

Deriving specifications
-----------------------

Section `lookupSourceSlot` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `lookupSourceSlot`:

    0x8401158c     0x0    addi sp,sp,-48
    0x8401158e     0x2    sd ra,40(sp)          ; stack access
    0x84011590     0x4    mv a5,a1
    0x84011592     0x6    mv a4,a3
    0x84011594     0x8    mv a3,a2
    0x84011596     0xa    mv a1,a0
    0x84011598     0xc    mv a2,a5
    0x8401159a     0xe    li a0,1
    0x8401159c    0x10    jal ra,ffffffff840114bc <lookupSlotForCNodeOp>
    0x840115a0    0x14    ld ra,40(sp)          ; stack access
    0x840115a2    0x16    addi sp,sp,48
    0x840115a4    0x18    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSourceSlot` has 16 nodes.

Section lookupSlotForCNodeOp (125 of 269)
=========================================

Deriving specifications
-----------------------

Section `lookupSlotForCNodeOp` consists of 75 instructions.

RVC_FFFFT_________FF.

Stack analysis
---------------

23 stack accesses found. Annotated code for `lookupSlotForCNodeOp`:

    0x840114bc     0x0    addi sp,sp,-80
    0x840114be     0x2    sd ra,72(sp)          ; stack access
    0x840114c0     0x4    sd s0,64(sp)          ; stack access
    0x840114c2     0x6    mv s0,a0
    0x840114c4     0x8    sd a1,0(sp)           ; stack access
    0x840114c6     0xa    sd a2,8(sp)           ; stack access
    0x840114c8     0xc    srli a1,a1,0x3b
    0x840114ca     0xe    li a5,10
    0x840114cc    0x10    bne a1,a5,ffffffff84011500 <lookupSlotForCNodeOp+0x44>
    0x840114d0    0x14    addi a5,a4,-1
    0x840114d4    0x18    li a2,63
    0x840114d8    0x1c    bltu a2,a5,ffffffff84011522 <lookupSlotForCNodeOp+0x66>
    0x840114dc    0x20    ld a1,0(sp)           ; stack access
    0x840114de    0x22    ld a2,8(sp)           ; stack access
    0x840114e0    0x24    addi a0,sp,24
    0x840114e2    0x26    jal ra,ffffffff840112f4 <resolveAddressBits>
    0x840114e6    0x2a    ld a5,40(sp)          ; stack access
    0x840114e8    0x2c    ld a4,24(sp)          ; stack access
    0x840114ea    0x2e    bnez a4,ffffffff84011546 <lookupSlotForCNodeOp+0x8a>
    0x840114ec    0x30    bnez a5,ffffffff84011560 <lookupSlotForCNodeOp+0xa4>
    0x840114ee    0x32    sd zero,48(sp)        ; stack access
    0x840114f0    0x34    ld a5,32(sp)          ; stack access
    0x840114f2    0x36    sd a5,56(sp)          ; stack access
    0x840114f4    0x38    ld a0,48(sp)          ; stack access
    0x840114f6    0x3a    ld a1,56(sp)          ; stack access
    0x840114f8    0x3c    ld ra,72(sp)          ; stack access
    0x840114fa    0x3e    ld s0,64(sp)          ; stack access
    0x840114fc    0x40    addi sp,sp,80
    0x840114fe    0x42    ret
    0x84011500    0x44    auipc a5,0x7
    0x84011504    0x48    addi a5,a5,-1280 # ffffffff84018000 <riscvKSASIDTable>
    0x84011508    0x4c    li a4,6
    0x8401150a    0x4e    sd a4,1744(a5)
    0x8401150e    0x52    sd a0,1736(a5)
    0x84011512    0x56    sd zero,1024(a5)
    0x84011516    0x5a    sd zero,1032(a5)
    0x8401151a    0x5e    li a5,3
    0x8401151c    0x60    sd a5,48(sp)          ; stack access
    0x8401151e    0x62    sd zero,56(sp)        ; stack access
    0x84011520    0x64    j ffffffff840114f4 <lookupSlotForCNodeOp+0x38>
    0x84011522    0x66    auipc a5,0x7
    0x84011526    0x6a    addi a5,a5,-1314 # ffffffff84018000 <riscvKSASIDTable>
    0x8401152a    0x6e    li a4,4
    0x8401152c    0x70    sd a4,1744(a5)
    0x84011530    0x74    li a4,1
    0x84011532    0x76    sd a4,1712(a5)
    0x84011536    0x7a    li a4,64
    0x8401153a    0x7e    sd a4,1720(a5)
    0x8401153e    0x82    li a5,3
    0x84011540    0x84    sd a5,48(sp)          ; stack access
    0x84011542    0x86    sd zero,56(sp)        ; stack access
    0x84011544    0x88    j ffffffff840114f4 <lookupSlotForCNodeOp+0x38>
    0x84011546    0x8a    auipc a5,0x7
    0x8401154a    0x8e    addi a5,a5,-1350 # ffffffff84018000 <riscvKSASIDTable>
    0x8401154e    0x92    li a4,6
    0x84011550    0x94    sd a4,1744(a5)
    0x84011554    0x98    sd s0,1736(a5)
    0x84011558    0x9c    li a5,3
    0x8401155a    0x9e    sd a5,48(sp)          ; stack access
    0x8401155c    0xa0    sd zero,56(sp)        ; stack access
    0x8401155e    0xa2    j ffffffff840114f4 <lookupSlotForCNodeOp+0x38>
    0x84011560    0xa4    auipc a4,0x7
    0x84011564    0xa8    addi a4,a4,-1376 # ffffffff84018000 <riscvKSASIDTable>
    0x84011568    0xac    li a3,6
    0x8401156a    0xae    sd a3,1744(a4)
    0x8401156e    0xb2    sd s0,1736(a4)
    0x84011572    0xb6    slli a5,a5,0x2
    0x84011574    0xb8    andi a5,a5,508
    0x84011578    0xbc    ori a5,a5,2
    0x8401157c    0xc0    sd a5,1024(a4)
    0x84011580    0xc4    sd zero,1032(a4)
    0x84011584    0xc8    li a5,3
    0x84011586    0xca    sd a5,48(sp)          ; stack access
    0x84011588    0xcc    sd zero,56(sp)        ; stack access
    0x8401158a    0xce    j ffffffff840114f4 <lookupSlotForCNodeOp+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlotForCNodeOp` has 121 nodes.

Section lookupCapAndSlot (126 of 269)
=====================================

Deriving specifications
-----------------------

Section `lookupCapAndSlot` consists of 26 instructions.


Stack analysis
---------------

Section `lookupCapAndSlot` expects pointer to stack in a0.
14 stack accesses found. Annotated code for `lookupCapAndSlot`:

    0x8401147e     0x0    addi sp,sp,-32
    0x84011480     0x2    sd ra,24(sp)          ; stack access
    0x84011482     0x4    sd s0,16(sp)          ; stack access
    0x84011484     0x6    mv s0,a0
    0x84011486     0x8    mv a0,a1
    0x84011488     0xa    mv a1,a2
    0x8401148a     0xc    jal ra,ffffffff84011422 <lookupSlot>
    0x8401148e    0x10    sd a0,0(sp)           ; stack access
    0x84011490    0x12    sd a1,8(sp)           ; stack access
    0x84011492    0x14    bnez a0,ffffffff840114ac <lookupCapAndSlot+0x2e>
    0x84011494    0x16    ld a4,0(a1)
    0x84011496    0x18    ld a5,8(a1)
    0x84011498    0x1a    sd zero,0(s0)         ; stack access
    0x8401149c    0x1e    sd a4,8(s0)           ; stack access
    0x8401149e    0x20    sd a5,16(s0)          ; stack access
    0x840114a0    0x22    sd a1,24(s0)          ; stack access
    0x840114a2    0x24    mv a0,s0
    0x840114a4    0x26    ld ra,24(sp)          ; stack access
    0x840114a6    0x28    ld s0,16(sp)          ; stack access
    0x840114a8    0x2a    addi sp,sp,32
    0x840114aa    0x2c    ret
    0x840114ac    0x2e    sd a0,0(s0)           ; stack access
    0x840114ae    0x30    sd zero,8(s0)         ; stack access
    0x840114b2    0x34    sd zero,16(s0)        ; stack access
    0x840114b6    0x38    sd zero,24(s0)        ; stack access
    0x840114ba    0x3c    j ffffffff840114a2 <lookupCapAndSlot+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCapAndSlot` has 46 nodes.

Section lookupCap (127 of 269)
==============================

Deriving specifications
-----------------------

Section `lookupCap` consists of 25 instructions.


Stack analysis
---------------

Section `lookupCap` expects pointer to stack in a0.
13 stack accesses found. Annotated code for `lookupCap`:

    0x84011444     0x0    addi sp,sp,-32
    0x84011446     0x2    sd ra,24(sp)          ; stack access
    0x84011448     0x4    sd s0,16(sp)          ; stack access
    0x8401144a     0x6    mv s0,a0
    0x8401144c     0x8    mv a0,a1
    0x8401144e     0xa    mv a1,a2
    0x84011450     0xc    jal ra,ffffffff84011422 <lookupSlot>
    0x84011454    0x10    sd a0,0(sp)           ; stack access
    0x84011456    0x12    sd a1,8(sp)           ; stack access
    0x84011458    0x14    bnez a0,ffffffff84011472 <lookupCap+0x2e>
    0x8401145a    0x16    ld a5,8(sp)           ; stack access
    0x8401145c    0x18    ld a4,0(a5)
    0x8401145e    0x1a    ld a5,8(a5)
    0x84011460    0x1c    sd zero,0(s0)         ; stack access
    0x84011464    0x20    sd a4,8(s0)           ; stack access
    0x84011466    0x22    sd a5,16(s0)          ; stack access
    0x84011468    0x24    mv a0,s0
    0x8401146a    0x26    ld ra,24(sp)          ; stack access
    0x8401146c    0x28    ld s0,16(sp)          ; stack access
    0x8401146e    0x2a    addi sp,sp,32
    0x84011470    0x2c    ret
    0x84011472    0x2e    sd a0,0(s0)           ; stack access
    0x84011474    0x30    sd zero,8(s0)         ; stack access
    0x84011478    0x34    sd zero,16(s0)        ; stack access
    0x8401147c    0x38    j ffffffff84011468 <lookupCap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupCap` has 44 nodes.

Section lookupSlot (128 of 269)
===============================

Deriving specifications
-----------------------

Section `lookupSlot` consists of 14 instructions.

RVC_FFFFFFFFFFT___FF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `lookupSlot`:

    0x84011422     0x0    addi sp,sp,-80
    0x84011424     0x2    sd ra,72(sp)          ; stack access
    0x84011426     0x4    mv a3,a1
    0x84011428     0x6    andi a0,a0,-1024
    0x8401142c     0xa    li a4,64
    0x84011430     0xe    ld a1,0(a0)
    0x84011432    0x10    ld a2,8(a0)
    0x84011434    0x12    addi a0,sp,8
    0x84011436    0x14    jal ra,ffffffff840112f4 <resolveAddressBits>
    0x8401143a    0x18    ld a0,8(sp)           ; stack access
    0x8401143c    0x1a    ld a1,16(sp)          ; stack access
    0x8401143e    0x1c    ld ra,72(sp)          ; stack access
    0x84011440    0x1e    addi sp,sp,80
    0x84011442    0x20    ret

Proving inst theorems
---------------------

14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupSlot` has 22 nodes.

Section Arch_createObject (129 of 269)
======================================

Deriving specifications
-----------------------

Section `Arch_createObject` consists of 61 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_createObject`:

    0x84011254     0x0    addi sp,sp,-32
    0x84011256     0x2    sd ra,24(sp)          ; stack access
    0x84011258     0x4    li a5,7
    0x8401125a     0x6    beq a0,a5,ffffffff840112aa <Arch_createObject+0x56>
    0x8401125e     0xa    bltu a5,a0,ffffffff84011290 <Arch_createObject+0x3c>
    0x84011262     0xe    li a5,5
    0x84011264    0x10    beq a0,a5,ffffffff840112c4 <Arch_createObject+0x70>
    0x84011268    0x14    li a5,6
    0x8401126a    0x16    bne a0,a5,ffffffff840112de <Arch_createObject+0x8a>
    0x8401126e    0x1a    andi a3,a3,1
    0x84011270    0x1c    slli a3,a3,0x36
    0x84011272    0x1e    li a5,19
    0x84011274    0x20    slli a5,a5,0x37
    0x84011276    0x22    or a3,a3,a5
    0x84011278    0x24    sd a3,0(sp)           ; stack access
    0x8401127a    0x26    slli a1,a1,0x9
    0x8401127c    0x28    lui a5,0xfe000
    0x84011280    0x2c    srli a5,a5,0x10
    0x84011282    0x2e    and a1,a1,a5
    0x84011284    0x30    sd a1,8(sp)           ; stack access
    0x84011286    0x32    ld a0,0(sp)           ; stack access
    0x84011288    0x34    ld a1,8(sp)           ; stack access
    0x8401128a    0x36    ld ra,24(sp)          ; stack access
    0x8401128c    0x38    addi sp,sp,32
    0x8401128e    0x3a    ret
    0x84011290    0x3c    li a5,8
    0x84011292    0x3e    bne a0,a5,ffffffff840112de <Arch_createObject+0x8a>
    0x84011296    0x42    li a5,3
    0x84011298    0x44    slli a5,a5,0x3b
    0x8401129a    0x46    sd a5,0(sp)           ; stack access
    0x8401129c    0x48    slli a1,a1,0x9
    0x8401129e    0x4a    lui a5,0xfe000
    0x840112a2    0x4e    srli a5,a5,0x10
    0x840112a4    0x50    and a1,a1,a5
    0x840112a6    0x52    sd a1,8(sp)           ; stack access
    0x840112a8    0x54    j ffffffff84011286 <Arch_createObject+0x32>
    0x840112aa    0x56    andi a3,a3,1
    0x840112ac    0x58    slli a3,a3,0x36
    0x840112ae    0x5a    li a5,23
    0x840112b0    0x5c    slli a5,a5,0x37
    0x840112b2    0x5e    or a3,a3,a5
    0x840112b4    0x60    sd a3,0(sp)           ; stack access
    0x840112b6    0x62    slli a1,a1,0x9
    0x840112b8    0x64    lui a5,0xfe000
    0x840112bc    0x68    srli a5,a5,0x10
    0x840112be    0x6a    and a1,a1,a5
    0x840112c0    0x6c    sd a1,8(sp)           ; stack access
    0x840112c2    0x6e    j ffffffff84011286 <Arch_createObject+0x32>
    0x840112c4    0x70    andi a3,a3,1
    0x840112c6    0x72    slli a3,a3,0x36
    0x840112c8    0x74    li a5,27
    0x840112ca    0x76    slli a5,a5,0x37
    0x840112cc    0x78    or a3,a3,a5
    0x840112ce    0x7a    sd a3,0(sp)           ; stack access
    0x840112d0    0x7c    slli a1,a1,0x9
    0x840112d2    0x7e    lui a5,0xfe000
    0x840112d6    0x82    srli a5,a5,0x10
    0x840112d8    0x84    and a1,a1,a5
    0x840112da    0x86    sd a1,8(sp)           ; stack access
    0x840112dc    0x88    j ffffffff84011286 <Arch_createObject+0x32>
    0x840112de    0x8a    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
61 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_createObject` has 85 nodes.

Section Arch_getObjectSize (130 of 269)
=======================================

Deriving specifications
-----------------------

Section `Arch_getObjectSize` consists of 19 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_getObjectSize`:

    0x84011222     0x0    li a4,7
    0x84011224     0x2    beq a0,a4,ffffffff84011250 <Arch_getObjectSize+0x2e>
    0x84011228     0x6    mv a5,a0
    0x8401122a     0x8    bltu a4,a0,ffffffff84011240 <Arch_getObjectSize+0x1e>
    0x8401122e     0xc    li a4,5
    0x84011230     0xe    li a0,30
    0x84011232    0x10    beq a5,a4,ffffffff8401123e <Arch_getObjectSize+0x1c>
    0x84011236    0x14    li a4,6
    0x84011238    0x16    li a0,12
    0x8401123a    0x18    bne a5,a4,ffffffff84011248 <Arch_getObjectSize+0x26>
    0x8401123e    0x1c    ret
    0x84011240    0x1e    li a4,8
    0x84011242    0x20    li a0,12
    0x84011244    0x22    beq a5,a4,ffffffff8401123e <Arch_getObjectSize+0x1c>
    0x84011248    0x26    addi sp,sp,-16
    0x8401124a    0x28    sd ra,8(sp)           ; stack access
    0x8401124c    0x2a    jal ra,ffffffff840103da <halt>
    0x84011250    0x2e    li a0,21
    0x84011252    0x30    j ffffffff8401123e <Arch_getObjectSize+0x1c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
19 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_getObjectSize` has 32 nodes.

Section Arch_sameObjectAs (131 of 269)
======================================

Deriving specifications
-----------------------

Section `Arch_sameObjectAs` consists of 64 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_sameObjectAs`:

    0x84011182     0x0    addi sp,sp,-48
    0x84011184     0x2    sd ra,40(sp)          ; stack access
    0x84011186     0x4    sd a0,16(sp)          ; stack access
    0x84011188     0x6    sd a1,24(sp)          ; stack access
    0x8401118a     0x8    sd a2,0(sp)           ; stack access
    0x8401118c     0xa    sd a3,8(sp)           ; stack access
    0x8401118e     0xc    srli a4,a0,0x3b
    0x84011192    0x10    li a5,1
    0x84011194    0x12    beq a4,a5,ffffffff840111aa <Arch_sameObjectAs+0x28>
    0x84011198    0x16    ld a2,0(sp)           ; stack access
    0x8401119a    0x18    ld a3,8(sp)           ; stack access
    0x8401119c    0x1a    ld a0,16(sp)          ; stack access
    0x8401119e    0x1c    ld a1,24(sp)          ; stack access
    0x840111a0    0x1e    jal ra,ffffffff84011024 <Arch_sameRegionAs>
    0x840111a4    0x22    ld ra,40(sp)          ; stack access
    0x840111a6    0x24    addi sp,sp,48
    0x840111a8    0x26    ret
    0x840111aa    0x28    mv a4,a2
    0x840111ac    0x2a    srli a3,a2,0x3b
    0x840111b0    0x2e    bne a3,a5,ffffffff84011198 <Arch_sameObjectAs+0x16>
    0x840111b4    0x32    srli a5,a1,0x9
    0x840111b8    0x36    slli a2,a5,0x19
    0x840111bc    0x3a    srli a2,a2,0x19
    0x840111be    0x3c    srli a5,a5,0x26
    0x840111c0    0x3e    andi a5,a5,1
    0x840111c2    0x40    beqz a5,ffffffff840111ea <Arch_sameObjectAs+0x68>
    0x840111c4    0x42    li a3,-1
    0x840111c6    0x44    slli a5,a3,0x27
    0x840111ca    0x48    or a2,a2,a5
    0x840111cc    0x4a    ld a5,8(sp)           ; stack access
    0x840111ce    0x4c    srli a5,a5,0x9
    0x840111d0    0x4e    srli a3,a3,0x19
    0x840111d2    0x50    and a3,a3,a5
    0x840111d4    0x52    srli a5,a5,0x26
    0x840111d6    0x54    andi a5,a5,1
    0x840111d8    0x56    beqz a5,ffffffff840111e6 <Arch_sameObjectAs+0x64>
    0x840111da    0x58    li a5,-1
    0x840111dc    0x5a    slli a5,a5,0x27
    0x840111de    0x5c    or a3,a3,a5
    0x840111e0    0x5e    li a5,0
    0x840111e2    0x60    beq a3,a2,ffffffff840111fc <Arch_sameObjectAs+0x7a>
    0x840111e6    0x64    mv a0,a5
    0x840111e8    0x66    j ffffffff840111a4 <Arch_sameObjectAs+0x22>
    0x840111ea    0x68    ld a5,8(sp)           ; stack access
    0x840111ec    0x6a    srli a5,a5,0x9
    0x840111ee    0x6c    slli a3,a5,0x19
    0x840111f2    0x70    srli a3,a3,0x19
    0x840111f4    0x72    srli a5,a5,0x26
    0x840111f6    0x74    andi a5,a5,1
    0x840111f8    0x76    bnez a5,ffffffff840111da <Arch_sameObjectAs+0x58>
    0x840111fa    0x78    j ffffffff840111e0 <Arch_sameObjectAs+0x5e>
    0x840111fc    0x7a    srli a2,a4,0x39
    0x84011200    0x7e    andi a2,a2,3
    0x84011202    0x80    srli a3,a0,0x39
    0x84011206    0x84    andi a3,a3,3
    0x84011208    0x86    bne a2,a3,ffffffff840111e6 <Arch_sameObjectAs+0x64>
    0x8401120c    0x8a    srli a5,a0,0x36
    0x84011210    0x8e    srli a4,a4,0x36
    0x84011212    0x90    xori a4,a4,1
    0x84011216    0x94    andi a5,a5,1
    0x84011218    0x96    andi a4,a4,1
    0x8401121a    0x98    sub a5,a5,a4
    0x8401121c    0x9a    snez a5,a5
    0x84011220    0x9e    j ffffffff840111e6 <Arch_sameObjectAs+0x64>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameObjectAs` has 92 nodes.

Section Arch_sameRegionAs (132 of 269)
======================================

Deriving specifications
-----------------------

Section `Arch_sameRegionAs` consists of 138 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_sameRegionAs`:

    0x84011024      0x0    srli a5,a0,0x3b
    0x84011028      0x4    li a6,11
    0x8401102a      0x6    beq a5,a6,ffffffff84011176 <Arch_sameRegionAs+0x152>
    0x8401102e      0xa    mv a4,a0
    0x84011030      0xc    bltu a6,a5,ffffffff84011080 <Arch_sameRegionAs+0x5c>
    0x84011034     0x10    li a6,1
    0x84011036     0x12    beq a5,a6,ffffffff840110ce <Arch_sameRegionAs+0xaa>
    0x8401103a     0x16    li a6,3
    0x8401103c     0x18    bne a5,a6,ffffffff8401107c <Arch_sameRegionAs+0x58>
    0x84011040     0x1c    srli a2,a2,0x3b
    0x84011042     0x1e    li a5,3
    0x84011044     0x20    li a0,0
    0x84011046     0x22    bne a2,a5,ffffffff840110da <Arch_sameRegionAs+0xb6>
    0x8401104a     0x26    srli a1,a1,0x9
    0x8401104c     0x28    slli a0,a1,0x19
    0x84011050     0x2c    srli a5,a0,0x19
    0x84011054     0x30    srli a1,a1,0x26
    0x84011056     0x32    andi a1,a1,1
    0x84011058     0x34    beqz a1,ffffffff84011060 <Arch_sameRegionAs+0x3c>
    0x8401105a     0x36    li a4,-1
    0x8401105c     0x38    slli a4,a4,0x27
    0x8401105e     0x3a    or a5,a5,a4
    0x84011060     0x3c    srli a3,a3,0x9
    0x84011062     0x3e    slli a0,a3,0x19
    0x84011066     0x42    srli a0,a0,0x19
    0x84011068     0x44    srli a3,a3,0x26
    0x8401106a     0x46    andi a3,a3,1
    0x8401106c     0x48    beqz a3,ffffffff84011074 <Arch_sameRegionAs+0x50>
    0x8401106e     0x4a    li a4,-1
    0x84011070     0x4c    slli a4,a4,0x27
    0x84011072     0x4e    or a0,a0,a4
    0x84011074     0x50    sub a0,a0,a5
    0x84011076     0x52    seqz a0,a0
    0x8401107a     0x56    ret
    0x8401107c     0x58    li a0,0
    0x8401107e     0x5a    ret
    0x84011080     0x5c    li a3,13
    0x84011082     0x5e    bne a5,a3,ffffffff840110ca <Arch_sameRegionAs+0xa6>
    0x84011086     0x62    srli a5,a2,0x3b
    0x8401108a     0x66    li a3,13
    0x8401108c     0x68    li a0,0
    0x8401108e     0x6a    bne a5,a3,ffffffff840110da <Arch_sameRegionAs+0xb6>
    0x84011092     0x6e    slli a4,a4,0x2
    0x84011094     0x70    lui a0,0xf8000
    0x84011098     0x74    srli a0,a0,0x19
    0x8401109a     0x76    and a0,a0,a4
    0x8401109c     0x78    srli a4,a4,0x26
    0x8401109e     0x7a    andi a4,a4,1
    0x840110a0     0x7c    beqz a4,ffffffff840110a8 <Arch_sameRegionAs+0x84>
    0x840110a2     0x7e    li a5,-1
    0x840110a4     0x80    slli a5,a5,0x27
    0x840110a6     0x82    or a0,a0,a5
    0x840110a8     0x84    slli a4,a2,0x2
    0x840110ac     0x88    lui a5,0xf8000
    0x840110b0     0x8c    srli a5,a5,0x19
    0x840110b2     0x8e    and a5,a5,a4
    0x840110b4     0x90    srli a4,a4,0x26
    0x840110b6     0x92    andi a4,a4,1
    0x840110b8     0x94    beqz a4,ffffffff840110c0 <Arch_sameRegionAs+0x9c>
    0x840110ba     0x96    li a4,-1
    0x840110bc     0x98    slli a4,a4,0x27
    0x840110be     0x9a    or a5,a5,a4
    0x840110c0     0x9c    sub a0,a5,a0
    0x840110c4     0xa0    seqz a0,a0
    0x840110c8     0xa4    ret
    0x840110ca     0xa6    li a0,0
    0x840110cc     0xa8    ret
    0x840110ce     0xaa    srli a5,a2,0x3b
    0x840110d2     0xae    li a6,1
    0x840110d4     0xb0    li a0,0
    0x840110d6     0xb2    beq a5,a6,ffffffff840110dc <Arch_sameRegionAs+0xb8>
    0x840110da     0xb6    ret
    0x840110dc     0xb8    addi sp,sp,-48
    0x840110de     0xba    sd ra,40(sp)          ; stack access
    0x840110e0     0xbc    srli a1,a1,0x9
    0x840110e2     0xbe    slli a5,a1,0x19
    0x840110e6     0xc2    srli a5,a5,0x19
    0x840110e8     0xc4    srli a1,a1,0x26
    0x840110ea     0xc6    andi a1,a1,1
    0x840110ec     0xc8    beqz a1,ffffffff840110f4 <Arch_sameRegionAs+0xd0>
    0x840110ee     0xca    li a1,-1
    0x840110f0     0xcc    slli a1,a1,0x27
    0x840110f2     0xce    or a5,a5,a1
    0x840110f4     0xd0    srli a3,a3,0x9
    0x840110f6     0xd2    slli a1,a3,0x19
    0x840110fa     0xd6    srli a1,a1,0x19
    0x840110fc     0xd8    srli a3,a3,0x26
    0x840110fe     0xda    andi a3,a3,1
    0x84011100     0xdc    beqz a3,ffffffff84011108 <Arch_sameRegionAs+0xe4>
    0x84011102     0xde    li a3,-1
    0x84011104     0xe0    slli a3,a3,0x27
    0x84011106     0xe2    or a1,a1,a3
    0x84011108     0xe4    srli a4,a4,0x39
    0x8401110a     0xe6    andi a4,a4,3
    0x8401110c     0xe8    li a3,1
    0x8401110e     0xea    beq a4,a3,ffffffff8401111e <Arch_sameRegionAs+0xfa>
    0x84011112     0xee    li a3,2
    0x84011114     0xf0    beq a4,a3,ffffffff84011122 <Arch_sameRegionAs+0xfe>
    0x84011118     0xf4    beqz a4,ffffffff8401113a <Arch_sameRegionAs+0x116>
    0x8401111a     0xf6    jal ra,ffffffff840103da <halt>
    0x8401111e     0xfa    li a6,21
    0x84011120     0xfc    j ffffffff84011124 <Arch_sameRegionAs+0x100>
    0x84011122     0xfe    li a6,30
    0x84011124    0x100    srli a2,a2,0x39
    0x84011126    0x102    andi a2,a2,3
    0x84011128    0x104    li a4,1
    0x8401112a    0x106    beq a2,a4,ffffffff8401113e <Arch_sameRegionAs+0x11a>
    0x8401112e    0x10a    li a4,2
    0x84011130    0x10c    beq a2,a4,ffffffff84011142 <Arch_sameRegionAs+0x11e>
    0x84011134    0x110    beqz a2,ffffffff84011172 <Arch_sameRegionAs+0x14e>
    0x84011136    0x112    jal ra,ffffffff840103da <halt>
    0x8401113a    0x116    li a6,12
    0x8401113c    0x118    j ffffffff84011124 <Arch_sameRegionAs+0x100>
    0x8401113e    0x11a    li a4,21
    0x84011140    0x11c    j ffffffff84011144 <Arch_sameRegionAs+0x120>
    0x84011142    0x11e    li a4,30
    0x84011144    0x120    li a0,0
    0x84011146    0x122    bltu a1,a5,ffffffff8401116c <Arch_sameRegionAs+0x148>
    0x8401114a    0x126    li a3,1
    0x8401114c    0x128    sll a4,a3,a4
    0x84011150    0x12c    addi a2,a1,-1 # fffffffff7ffffff <ki_end+0x73fd0fff>
    0x84011154    0x130    add a4,a4,a2
    0x84011156    0x132    sll a3,a3,a6
    0x8401115a    0x136    addi a5,a5,-1
    0x8401115c    0x138    add a5,a5,a3
    0x8401115e    0x13a    bltu a5,a4,ffffffff8401116c <Arch_sameRegionAs+0x148>
    0x84011162    0x13e    sltu a0,a4,a1
    0x84011166    0x142    xori a0,a0,1
    0x8401116a    0x146    sext.w a0,a0
    0x8401116c    0x148    ld ra,40(sp)          ; stack access
    0x8401116e    0x14a    addi sp,sp,48
    0x84011170    0x14c    ret
    0x84011172    0x14e    li a4,12
    0x84011174    0x150    j ffffffff84011144 <Arch_sameRegionAs+0x120>
    0x84011176    0x152    srli a0,a2,0x3b
    0x8401117a    0x156    addi a0,a0,-11
    0x8401117c    0x158    seqz a0,a0
    0x84011180    0x15c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
138 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_sameRegionAs` has 193 nodes.

Section Arch_maskCapRights (133 of 269)
=======================================

Deriving specifications
-----------------------

Section `Arch_maskCapRights` consists of 32 instructions.

RVC_FTTFFFFTFFT___FT.

Stack analysis
---------------

12 stack accesses found. Annotated code for `Arch_maskCapRights`:

    0x84010ec8     0x0    addi sp,sp,-64
    0x84010eca     0x2    sd ra,56(sp)          ; stack access
    0x84010ecc     0x4    sd s0,48(sp)          ; stack access
    0x84010ece     0x6    sd s1,40(sp)          ; stack access
    0x84010ed0     0x8    mv s0,a1
    0x84010ed2     0xa    mv s1,a2
    0x84010ed4     0xc    srli a4,a1,0x3b
    0x84010ed8    0x10    li a5,1
    0x84010eda    0x12    beq a4,a5,ffffffff84010ef0 <Arch_maskCapRights+0x28>
    0x84010ede    0x16    sd a1,16(sp)          ; stack access
    0x84010ee0    0x18    sd a2,24(sp)          ; stack access
    0x84010ee2    0x1a    ld a0,16(sp)          ; stack access
    0x84010ee4    0x1c    ld a1,24(sp)          ; stack access
    0x84010ee6    0x1e    ld ra,56(sp)          ; stack access
    0x84010ee8    0x20    ld s0,48(sp)          ; stack access
    0x84010eea    0x22    ld s1,40(sp)          ; stack access
    0x84010eec    0x24    addi sp,sp,64
    0x84010eee    0x26    ret
    0x84010ef0    0x28    srli a5,a1,0x37
    0x84010ef4    0x2c    mv a1,a0
    0x84010ef6    0x2e    andi a0,a5,3
    0x84010efa    0x32    jal ra,ffffffff84010d62 <maskVMRights>
    0x84010efe    0x36    andi a0,a0,3
    0x84010f00    0x38    slli a0,a0,0x37
    0x84010f02    0x3a    li a1,-3
    0x84010f04    0x3c    slli a1,a1,0x37
    0x84010f06    0x3e    addi a1,a1,-1
    0x84010f08    0x40    and s0,s0,a1
    0x84010f0a    0x42    or s0,s0,a0
    0x84010f0c    0x44    sd s0,16(sp)          ; stack access
    0x84010f0e    0x46    sd s1,24(sp)          ; stack access
    0x84010f10    0x48    j ffffffff84010ee2 <Arch_maskCapRights+0x1a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_maskCapRights` has 48 nodes.

Section Arch_deriveCap (134 of 269)
===================================

Deriving specifications
-----------------------

Section `Arch_deriveCap` consists of 39 instructions.


Stack analysis
---------------

Section `Arch_deriveCap` expects pointer to stack in a0.
10 stack accesses found. Annotated code for `Arch_deriveCap`:

    0x84010e5a     0x0    srli a5,a2,0x3b
    0x84010e5e     0x4    li a4,3
    0x84010e60     0x6    beq a5,a4,ffffffff84010e92 <Arch_deriveCap+0x38>
    0x84010e64     0xa    bgeu a4,a5,ffffffff84010e76 <Arch_deriveCap+0x1c>
    0x84010e68     0xe    addi a5,a5,-11
    0x84010e6a    0x10    andi a5,a5,-3
    0x84010e6c    0x12    beqz a5,ffffffff84010eb4 <Arch_deriveCap+0x5a>
    0x84010e6e    0x14    addi sp,sp,-32
    0x84010e70    0x16    sd ra,24(sp)          ; stack access
    0x84010e72    0x18    jal ra,ffffffff840103da <halt>
    0x84010e76    0x1c    li a4,1
    0x84010e78    0x1e    bne a5,a4,ffffffff84010e6e <Arch_deriveCap+0x14>
    0x84010e7c    0x22    sd zero,0(a0)         ; stack access
    0x84010e80    0x26    li a5,-1
    0x84010e82    0x28    slli a4,a5,0x27
    0x84010e86    0x2c    and a2,a2,a4
    0x84010e88    0x2e    sd a2,8(a0)           ; stack access
    0x84010e8a    0x30    srli a5,a5,0x10
    0x84010e8c    0x32    and a3,a3,a5
    0x84010e8e    0x34    sd a3,16(a0)          ; stack access
    0x84010e90    0x36    ret
    0x84010e92    0x38    srli a4,a2,0x27
    0x84010e96    0x3c    andi a4,a4,1
    0x84010e98    0x3e    bnez a4,ffffffff84010eb0 <Arch_deriveCap+0x56>
    0x84010e9a    0x40    li a3,3
    0x84010e9c    0x42    auipc a2,0x8
    0x84010ea0    0x46    sd a3,-1996(a2) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84010ea4    0x4a    mv a3,a4
    0x84010ea6    0x4c    mv a2,a4
    0x84010ea8    0x4e    sd a5,0(a0)           ; stack access
    0x84010eaa    0x50    sd a2,8(a0)           ; stack access
    0x84010eac    0x52    sd a3,16(a0)          ; stack access
    0x84010eae    0x54    ret
    0x84010eb0    0x56    li a5,0
    0x84010eb2    0x58    j ffffffff84010ea8 <Arch_deriveCap+0x4e>
    0x84010eb4    0x5a    sd zero,0(a0)         ; stack access
    0x84010eb8    0x5e    sd a2,8(a0)           ; stack access
    0x84010eba    0x60    sd a3,16(a0)          ; stack access
    0x84010ebc    0x62    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_deriveCap` has 64 nodes.

Section performPageInvocationUnmap (135 of 269)
===============================================

Deriving specifications
-----------------------

Section `performPageInvocationUnmap` consists of 43 instructions.


Stack analysis
---------------

5 stack accesses found. Annotated code for `performPageInvocationUnmap`:

    0x84010dba     0x0    addi sp,sp,-32
    0x84010dbc     0x2    sd ra,24(sp)          ; stack access
    0x84010dbe     0x4    sd s0,16(sp)          ; stack access
    0x84010dc0     0x6    sd a0,0(sp)           ; stack access
    0x84010dc2     0x8    mv s0,a2
    0x84010dc4     0xa    mv a5,a1
    0x84010dc6     0xc    srli a1,a1,0x30
    0x84010dc8     0xe    beqz a1,ffffffff84010dfa <performPageInvocationUnmap+0x40>
    0x84010dca    0x10    mv a4,a0
    0x84010dcc    0x12    srli a0,a0,0x39
    0x84010dce    0x14    andi a0,a0,3
    0x84010dd0    0x16    slli a2,a4,0x19
    0x84010dd4    0x1a    srli a2,a2,0x19
    0x84010dd6    0x1c    srli a4,a4,0x26
    0x84010dd8    0x1e    andi a4,a4,1
    0x84010dda    0x20    beqz a4,ffffffff84010de2 <performPageInvocationUnmap+0x28>
    0x84010ddc    0x22    li a4,-1
    0x84010dde    0x24    slli a4,a4,0x27
    0x84010de0    0x26    or a2,a2,a4
    0x84010de2    0x28    srli a5,a5,0x9
    0x84010de4    0x2a    slli a3,a5,0x19
    0x84010de8    0x2e    srli a3,a3,0x19
    0x84010dea    0x30    srli a5,a5,0x26
    0x84010dec    0x32    andi a5,a5,1
    0x84010dee    0x34    beqz a5,ffffffff84010df6 <performPageInvocationUnmap+0x3c>
    0x84010df0    0x36    li a5,-1
    0x84010df2    0x38    slli a5,a5,0x27
    0x84010df4    0x3a    or a3,a3,a5
    0x84010df6    0x3c    jal ra,ffffffff84010b10 <unmapPage>
    0x84010dfa    0x40    ld a4,8(s0)
    0x84010dfc    0x42    li a5,-1
    0x84010dfe    0x44    srli a3,a5,0x10
    0x84010e02    0x48    and a4,a4,a3
    0x84010e04    0x4a    ld a3,0(s0)
    0x84010e06    0x4c    slli a5,a5,0x27
    0x84010e08    0x4e    and a5,a5,a3
    0x84010e0a    0x50    sd a5,0(s0)
    0x84010e0c    0x52    sd a4,8(s0)
    0x84010e0e    0x54    li a0,0
    0x84010e10    0x56    ld ra,24(sp)          ; stack access
    0x84010e12    0x58    ld s0,16(sp)          ; stack access
    0x84010e14    0x5a    addi sp,sp,32
    0x84010e16    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
43 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageInvocationUnmap` has 60 nodes.

Section deleteASID (136 of 269)
===============================

Deriving specifications
-----------------------

Section `deleteASID` consists of 23 instructions.

Skipping 12a00073 sfence.vma zero,a0


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASID`:

    0x84010cc2     0x0    srli a5,a0,0x9
    0x84010cc6     0x4    slli a4,a5,0x3
    0x84010cca     0x8    auipc a5,0x7
    0x84010cce     0xc    addi a5,a5,822 # ffffffff84018000 <riscvKSASIDTable>
    0x84010cd2    0x10    add a5,a5,a4
    0x84010cd4    0x12    ld a5,0(a5)
    0x84010cd6    0x14    beqz a5,ffffffff84010ce6 <deleteASID+0x24>
    0x84010cd8    0x16    andi a4,a0,511
    0x84010cdc    0x1a    slli a4,a4,0x3
    0x84010cde    0x1c    add a5,a5,a4
    0x84010ce0    0x1e    ld a4,0(a5)
    0x84010ce2    0x20    beq a4,a1,ffffffff84010ce8 <deleteASID+0x26>
    0x84010ce6    0x24    ret
    0x84010ce8    0x26    addi sp,sp,-16
    0x84010cea    0x28    sd ra,8(sp)           ; stack access
    0x84010cec    0x2a    sfence.vma zero,a0
    0x84010cf0    0x2e    sd zero,0(a5)
    0x84010cf4    0x32    auipc a0,0x1a
    0x84010cf8    0x36    ld a0,-1212(a0) # ffffffff8402a838 <ksCurThread>
    0x84010cfc    0x3a    jal ra,ffffffff84010b9e <setVMRoot>
    0x84010d00    0x3e    ld ra,8(sp)           ; stack access
    0x84010d02    0x40    addi sp,sp,16
    0x84010d04    0x42    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASID` has 37 nodes.

Section deleteASIDPool (137 of 269)
===================================

Deriving specifications
-----------------------

Section `deleteASIDPool` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `deleteASIDPool`:

    0x84010c84     0x0    srli a0,a0,0x9
    0x84010c86     0x2    slli a4,a0,0x3
    0x84010c8a     0x6    auipc a5,0x7
    0x84010c8e     0xa    addi a5,a5,886 # ffffffff84018000 <riscvKSASIDTable>
    0x84010c92     0xe    add a5,a5,a4
    0x84010c94    0x10    ld a5,0(a5)
    0x84010c96    0x12    beq a5,a1,ffffffff84010c9c <deleteASIDPool+0x18>
    0x84010c9a    0x16    ret
    0x84010c9c    0x18    addi sp,sp,-16
    0x84010c9e    0x1a    sd ra,8(sp)           ; stack access
    0x84010ca0    0x1c    auipc a5,0x7
    0x84010ca4    0x20    addi a5,a5,864 # ffffffff84018000 <riscvKSASIDTable>
    0x84010ca8    0x24    add a0,a5,a4
    0x84010cac    0x28    sd zero,0(a0)
    0x84010cb0    0x2c    auipc a0,0x1a
    0x84010cb4    0x30    ld a0,-1144(a0) # ffffffff8402a838 <ksCurThread>
    0x84010cb8    0x34    jal ra,ffffffff84010b9e <setVMRoot>
    0x84010cbc    0x38    ld ra,8(sp)           ; stack access
    0x84010cbe    0x3a    addi sp,sp,16
    0x84010cc0    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deleteASIDPool` has 30 nodes.

Section Arch_switchToIdleThread (138 of 269)
============================================

Deriving specifications
-----------------------

Section `Arch_switchToIdleThread` consists of 8 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToIdleThread`:

    0x84010c6e     0x0    addi sp,sp,-16
    0x84010c70     0x2    sd ra,8(sp)           ; stack access
    0x84010c72     0x4    auipc a0,0x1a
    0x84010c76     0x8    ld a0,-1090(a0) # ffffffff8402a830 <ksIdleThread>
    0x84010c7a     0xc    jal ra,ffffffff84010b9e <setVMRoot>
    0x84010c7e    0x10    ld ra,8(sp)           ; stack access
    0x84010c80    0x12    addi sp,sp,16
    0x84010c82    0x14    ret

Proving inst theorems
---------------------

8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToIdleThread` has 13 nodes.

Section Arch_switchToThread (139 of 269)
========================================

Deriving specifications
-----------------------

Section `Arch_switchToThread` consists of 6 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `Arch_switchToThread`:

    0x84010c60    0x0    addi sp,sp,-16
    0x84010c62    0x2    sd ra,8(sp)           ; stack access
    0x84010c64    0x4    jal ra,ffffffff84010b9e <setVMRoot>
    0x84010c68    0x8    ld ra,8(sp)           ; stack access
    0x84010c6a    0xa    addi sp,sp,16
    0x84010c6c    0xc    ret

Proving inst theorems
---------------------

6 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_switchToThread` has 10 nodes.

Section setVMRoot (140 of 269)
==============================

Deriving specifications
-----------------------

Section `setVMRoot` consists of 75 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma


Stack analysis
---------------

10 stack accesses found. Annotated code for `setVMRoot`:

    0x84010b9e     0x0    andi a0,a0,-1024
    0x84010ba2     0x4    ld a5,32(a0)
    0x84010ba4     0x6    srli a5,a5,0x3b
    0x84010ba6     0x8    li a4,3
    0x84010ba8     0xa    beq a5,a4,ffffffff84010bd2 <setVMRoot+0x34>
    0x84010bac     0xe    auipc a5,0x1c
    0x84010bb0    0x12    addi a5,a5,1108 # ffffffff8402d000 <kernel_root_pageTable>
    0x84010bb4    0x16    li a4,1
    0x84010bb6    0x18    slli a4,a4,0x20
    0x84010bb8    0x1a    add a5,a5,a4
    0x84010bba    0x1c    srli a5,a5,0xc
    0x84010bbc    0x1e    li a4,-1
    0x84010bbe    0x20    srli a3,a4,0x14
    0x84010bc2    0x24    and a5,a5,a3
    0x84010bc4    0x26    slli a4,a4,0x3f
    0x84010bc6    0x28    or a5,a5,a4
    0x84010bc8    0x2a    csrw satp,a5
    0x84010bcc    0x2e    sfence.vma
    0x84010bd0    0x32    ret
    0x84010bd2    0x34    addi sp,sp,-48
    0x84010bd4    0x36    sd ra,40(sp)          ; stack access
    0x84010bd6    0x38    sd s0,32(sp)          ; stack access
    0x84010bd8    0x3a    sd s1,24(sp)          ; stack access
    0x84010bda    0x3c    sd s2,16(sp)          ; stack access
    0x84010bdc    0x3e    addi a3,a0,32
    0x84010be0    0x42    ld a5,8(a3)
    0x84010be2    0x44    srli a4,a5,0x9
    0x84010be6    0x48    slli s0,a4,0x19
    0x84010bea    0x4c    srli s0,s0,0x19
    0x84010bec    0x4e    srli a4,a4,0x26
    0x84010bee    0x50    andi a4,a4,1
    0x84010bf0    0x52    beqz a4,ffffffff84010bf8 <setVMRoot+0x5a>
    0x84010bf2    0x54    li a4,-1
    0x84010bf4    0x56    slli a4,a4,0x27
    0x84010bf6    0x58    or s0,s0,a4
    0x84010bf8    0x5a    srli s1,a5,0x30
    0x84010bfc    0x5e    mv a0,s1
    0x84010bfe    0x60    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010c02    0x64    sd a0,0(sp)           ; stack access
    0x84010c04    0x66    sd a1,8(sp)           ; stack access
    0x84010c06    0x68    bnez a0,ffffffff84010c3a <setVMRoot+0x9c>
    0x84010c08    0x6a    bne a1,s0,ffffffff84010c3a <setVMRoot+0x9c>
    0x84010c0c    0x6e    li a5,1
    0x84010c0e    0x70    slli a5,a5,0x26
    0x84010c10    0x72    add a5,a5,s0
    0x84010c12    0x74    srli a5,a5,0xc
    0x84010c14    0x76    li a4,-1
    0x84010c16    0x78    srli s0,a4,0x14
    0x84010c1a    0x7c    and a5,a5,s0
    0x84010c1c    0x7e    slli a0,s1,0x2c
    0x84010c20    0x82    or a5,a5,a0
    0x84010c22    0x84    slli a4,a4,0x3f
    0x84010c24    0x86    or a5,a5,a4
    0x84010c26    0x88    csrw satp,a5
    0x84010c2a    0x8c    sfence.vma
    0x84010c2e    0x90    ld ra,40(sp)          ; stack access
    0x84010c30    0x92    ld s0,32(sp)          ; stack access
    0x84010c32    0x94    ld s1,24(sp)          ; stack access
    0x84010c34    0x96    ld s2,16(sp)          ; stack access
    0x84010c36    0x98    addi sp,sp,48
    0x84010c38    0x9a    ret
    0x84010c3a    0x9c    auipc a5,0x1c
    0x84010c3e    0xa0    addi a5,a5,966 # ffffffff8402d000 <kernel_root_pageTable>
    0x84010c42    0xa4    li a4,1
    0x84010c44    0xa6    slli a4,a4,0x20
    0x84010c46    0xa8    add a5,a5,a4
    0x84010c48    0xaa    srli a5,a5,0xc
    0x84010c4a    0xac    li a4,-1
    0x84010c4c    0xae    srli a3,a4,0x14
    0x84010c50    0xb2    and a5,a5,a3
    0x84010c52    0xb4    slli a4,a4,0x3f
    0x84010c54    0xb6    or a5,a5,a4
    0x84010c56    0xb8    csrw satp,a5
    0x84010c5a    0xbc    sfence.vma
    0x84010c5e    0xc0    j ffffffff84010c2e <setVMRoot+0x90>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
75 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setVMRoot` has 104 nodes.

Section unmapPageTable (141 of 269)
===================================

Deriving specifications
-----------------------

Section `unmapPageTable` consists of 64 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

8 stack accesses found. Annotated code for `unmapPageTable`:

    0x84010a66     0x0    addi sp,sp,-48
    0x84010a68     0x2    sd ra,40(sp)          ; stack access
    0x84010a6a     0x4    sd s0,32(sp)          ; stack access
    0x84010a6c     0x6    sd s1,24(sp)          ; stack access
    0x84010a6e     0x8    mv s0,a1
    0x84010a70     0xa    mv s1,a2
    0x84010a72     0xc    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010a76    0x10    sd a0,0(sp)           ; stack access
    0x84010a78    0x12    sd a1,8(sp)           ; stack access
    0x84010a7a    0x14    bnez a0,ffffffff84010afa <unmapPageTable+0x94>
    0x84010a7c    0x16    beq a1,s1,ffffffff84010b04 <unmapPageTable+0x9e>
    0x84010a80    0x1a    srli a5,s0,0x1e
    0x84010a84    0x1e    andi a5,a5,511
    0x84010a88    0x22    slli a5,a5,0x3
    0x84010a8a    0x24    add a4,a1,a5
    0x84010a8e    0x28    ld a5,0(a4)
    0x84010a90    0x2a    andi a3,a5,1
    0x84010a94    0x2e    beqz a3,ffffffff84010afa <unmapPageTable+0x94>
    0x84010a96    0x30    srli a3,a5,0x1
    0x84010a9a    0x34    srli a2,a5,0x2
    0x84010a9e    0x38    or a3,a3,a2
    0x84010aa0    0x3a    srli a2,a5,0x3
    0x84010aa4    0x3e    or a3,a3,a2
    0x84010aa6    0x40    andi a3,a3,1
    0x84010aa8    0x42    bnez a3,ffffffff84010afa <unmapPageTable+0x94>
    0x84010aaa    0x44    slli a5,a5,0x2
    0x84010aac    0x46    lui a3,0xfff00
    0x84010ab0    0x4a    srli a3,a3,0x8
    0x84010ab2    0x4c    and a5,a5,a3
    0x84010ab4    0x4e    li a3,-1
    0x84010ab6    0x50    slli a3,a3,0x26
    0x84010ab8    0x52    add a5,a5,a3
    0x84010aba    0x54    beq s1,a5,ffffffff84010b06 <unmapPageTable+0xa0>
    0x84010abe    0x58    srli s0,s0,0x15
    0x84010ac0    0x5a    andi s0,s0,511
    0x84010ac4    0x5e    slli s0,s0,0x3
    0x84010ac6    0x60    add a4,a5,s0
    0x84010aca    0x64    ld a5,0(a4)
    0x84010acc    0x66    andi a3,a5,1
    0x84010ad0    0x6a    beqz a3,ffffffff84010afa <unmapPageTable+0x94>
    0x84010ad2    0x6c    srli a3,a5,0x1
    0x84010ad6    0x70    srli a2,a5,0x2
    0x84010ada    0x74    or a3,a3,a2
    0x84010adc    0x76    srli a2,a5,0x3
    0x84010ae0    0x7a    or a3,a3,a2
    0x84010ae2    0x7c    andi a3,a3,1
    0x84010ae4    0x7e    bnez a3,ffffffff84010afa <unmapPageTable+0x94>
    0x84010ae6    0x80    slli a5,a5,0x2
    0x84010ae8    0x82    lui a3,0xfff00
    0x84010aec    0x86    srli a3,a3,0x8
    0x84010aee    0x88    and a5,a5,a3
    0x84010af0    0x8a    li a3,-1
    0x84010af2    0x8c    slli a3,a3,0x26
    0x84010af4    0x8e    add a5,a5,a3
    0x84010af6    0x90    beq s1,a5,ffffffff84010b06 <unmapPageTable+0xa0>
    0x84010afa    0x94    ld ra,40(sp)          ; stack access
    0x84010afc    0x96    ld s0,32(sp)          ; stack access
    0x84010afe    0x98    ld s1,24(sp)          ; stack access
    0x84010b00    0x9a    addi sp,sp,48
    0x84010b02    0x9c    ret
    0x84010b04    0x9e    li a4,0
    0x84010b06    0xa0    sd zero,0(a4)
    0x84010b0a    0xa4    sfence.vma
    0x84010b0e    0xa8    j ffffffff84010afa <unmapPageTable+0x94>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
64 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPageTable` has 94 nodes.

Section handleVMFault (142 of 269)
==================================

Deriving specifications
-----------------------

Section `handleVMFault` consists of 42 instructions.

Skipping 14302773 csrr a4,stval

RVC_FTTFFT___FFFT_FT.

Stack analysis
---------------

1 stack accesses found. Annotated code for `handleVMFault`:

    0x840109e8     0x0    csrr a4,stval
    0x840109ec     0x4    li a5,15
    0x840109ee     0x6    bltu a5,a1,ffffffff84010a14 <handleVMFault+0x2c>
    0x840109f2     0xa    li a5,1
    0x840109f4     0xc    sll a1,a5,a1
    0x840109f8    0x10    lui a5,0x1
    0x840109fa    0x12    addi a5,a5,2
    0x840109fc    0x14    and a5,a5,a1
    0x840109fe    0x16    bnez a5,ffffffff84010a4e <handleVMFault+0x66>
    0x84010a00    0x18    lui a5,0x8
    0x84010a02    0x1a    addi a5,a5,128 # 8080 <KERNEL_OFFSET-0xfffffffeffff7f80>
    0x84010a06    0x1e    and a5,a5,a1
    0x84010a08    0x20    bnez a5,ffffffff84010a36 <handleVMFault+0x4e>
    0x84010a0a    0x22    lui a5,0x2
    0x84010a0c    0x24    addi a5,a5,32 # 2020 <KERNEL_OFFSET-0xfffffffeffffdfe0>
    0x84010a10    0x28    and a1,a1,a5
    0x84010a12    0x2a    bnez a1,ffffffff84010a1c <handleVMFault+0x34>
    0x84010a14    0x2c    addi sp,sp,-16
    0x84010a16    0x2e    sd ra,8(sp)           ; stack access
    0x84010a18    0x30    jal ra,ffffffff840103da <halt>
    0x84010a1c    0x34    auipc a3,0x7
    0x84010a20    0x38    addi a3,a3,1508 # ffffffff84018000 <riscvKSASIDTable>
    0x84010a24    0x3c    lui a5,0x28000
    0x84010a28    0x40    addi a5,a5,5
    0x84010a2a    0x42    sd a5,1680(a3)
    0x84010a2e    0x46    sd a4,1688(a3)
    0x84010a32    0x4a    li a0,1
    0x84010a34    0x4c    ret
    0x84010a36    0x4e    auipc a3,0x7
    0x84010a3a    0x52    addi a3,a3,1482 # ffffffff84018000 <riscvKSASIDTable>
    0x84010a3e    0x56    lui a5,0x38000
    0x84010a42    0x5a    addi a5,a5,5
    0x84010a44    0x5c    sd a5,1680(a3)
    0x84010a48    0x60    sd a4,1688(a3)
    0x84010a4c    0x64    j ffffffff84010a32 <handleVMFault+0x4a>
    0x84010a4e    0x66    auipc a3,0x7
    0x84010a52    0x6a    addi a3,a3,1458 # ffffffff84018000 <riscvKSASIDTable>
    0x84010a56    0x6e    lui a5,0x8080
    0x84010a5a    0x72    addi a5,a5,5
    0x84010a5c    0x74    sd a5,1680(a3)
    0x84010a60    0x78    sd a4,1688(a3)
    0x84010a64    0x7c    j ffffffff84010a32 <handleVMFault+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
42 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFault` has 60 nodes.

Section lookupIPCBuffer (143 of 269)
====================================

Deriving specifications
-----------------------

Section `lookupIPCBuffer` consists of 56 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `lookupIPCBuffer`:

    0x840107a2     0x0    andi a5,a1,-1024
    0x840107a6     0x4    addi a2,a5,128
    0x840107aa     0x8    ld a5,128(a5)
    0x840107ac     0xa    srli a3,a5,0x3b
    0x840107b0     0xe    li a4,1
    0x840107b2    0x10    bne a3,a4,ffffffff84010826 <lookupIPCBuffer+0x84>
    0x840107b6    0x14    srli a4,a5,0x36
    0x840107ba    0x18    andi a4,a4,1
    0x840107bc    0x1a    bnez a4,ffffffff8401082a <lookupIPCBuffer+0x88>
    0x840107be    0x1c    srli a4,a5,0x37
    0x840107c2    0x20    andi a4,a4,3
    0x840107c4    0x22    li a3,3
    0x840107c6    0x24    bne a4,a3,ffffffff84010800 <lookupIPCBuffer+0x5e>
    0x840107ca    0x28    ld a4,8(a2)
    0x840107cc    0x2a    srli a4,a4,0x9
    0x840107ce    0x2c    slli a0,a4,0x19
    0x840107d2    0x30    srli a3,a0,0x19
    0x840107d6    0x34    srli a4,a4,0x26
    0x840107d8    0x36    andi a4,a4,1
    0x840107da    0x38    beqz a4,ffffffff840107e2 <lookupIPCBuffer+0x40>
    0x840107dc    0x3a    li a4,-1
    0x840107de    0x3c    slli a4,a4,0x27
    0x840107e0    0x3e    or a3,a3,a4
    0x840107e2    0x40    ld a4,384(a1)
    0x840107e6    0x44    srli a5,a5,0x39
    0x840107e8    0x46    andi a5,a5,3
    0x840107ea    0x48    li a2,1
    0x840107ec    0x4a    beq a5,a2,ffffffff8401080c <lookupIPCBuffer+0x6a>
    0x840107f0    0x4e    li a2,2
    0x840107f2    0x50    beq a5,a2,ffffffff84010810 <lookupIPCBuffer+0x6e>
    0x840107f6    0x54    beqz a5,ffffffff84010822 <lookupIPCBuffer+0x80>
    0x840107f8    0x56    addi sp,sp,-16
    0x840107fa    0x58    sd ra,8(sp)           ; stack access
    0x840107fc    0x5a    jal ra,ffffffff840103da <halt>
    0x84010800    0x5e    bnez a0,ffffffff8401082e <lookupIPCBuffer+0x8c>
    0x84010802    0x60    li a3,2
    0x84010804    0x62    beq a4,a3,ffffffff840107ca <lookupIPCBuffer+0x28>
    0x84010808    0x66    li a0,0
    0x8401080a    0x68    ret
    0x8401080c    0x6a    li a5,21
    0x8401080e    0x6c    j ffffffff84010812 <lookupIPCBuffer+0x70>
    0x84010810    0x6e    li a5,30
    0x84010812    0x70    li a0,-1
    0x84010814    0x72    sll a0,a0,a5
    0x84010818    0x76    not a0,a0
    0x8401081c    0x7a    and a0,a0,a4
    0x8401081e    0x7c    add a0,a0,a3
    0x84010820    0x7e    ret
    0x84010822    0x80    li a5,12
    0x84010824    0x82    j ffffffff84010812 <lookupIPCBuffer+0x70>
    0x84010826    0x84    li a0,0
    0x84010828    0x86    ret
    0x8401082a    0x88    li a0,0
    0x8401082c    0x8a    ret
    0x8401082e    0x8c    li a0,0
    0x84010830    0x8e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
56 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `lookupIPCBuffer` has 84 nodes.

Section Arch_setMRs_fault (144 of 269)
======================================

Deriving specifications
-----------------------

Section `Arch_setMRs_fault` consists of 18 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_setMRs_fault`:

    0x84010686     0x0    li a5,5
    0x84010688     0x2    bne a3,a5,ffffffff840106b0 <Arch_setMRs_fault+0x2a>
    0x8401068c     0x6    ld a5,264(a0)
    0x84010690     0xa    sd a5,88(a1)
    0x84010692     0xc    ld a5,320(a0)
    0x84010696    0x10    sd a5,96(a1)
    0x84010698    0x12    ld a5,312(a0)
    0x8401069c    0x16    srli a5,a5,0x13
    0x8401069e    0x18    andi a5,a5,1
    0x840106a0    0x1a    sd a5,104(a1)
    0x840106a2    0x1c    ld a5,312(a0)
    0x840106a6    0x20    srliw a5,a5,0x1b
    0x840106aa    0x24    sd a5,112(a1)
    0x840106ac    0x26    li a0,4
    0x840106ae    0x28    ret
    0x840106b0    0x2a    addi sp,sp,-16
    0x840106b2    0x2c    sd ra,8(sp)           ; stack access
    0x840106b4    0x2e    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_setMRs_fault` has 31 nodes.

Section Arch_handleFaultReply (145 of 269)
==========================================

Deriving specifications
-----------------------

Section `Arch_handleFaultReply` consists of 7 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `Arch_handleFaultReply`:

    0x84010674    0x0    li a5,5
    0x84010676    0x2    bne a2,a5,ffffffff8401067e <Arch_handleFaultReply+0xa>
    0x8401067a    0x6    li a0,1
    0x8401067c    0x8    ret
    0x8401067e    0xa    addi sp,sp,-16
    0x84010680    0xc    sd ra,8(sp)           ; stack access
    0x84010682    0xe    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
7 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_handleFaultReply` has 12 nodes.

Section setMRs_lookup_failure (146 of 269)
==========================================

Deriving specifications
-----------------------

Section `setMRs_lookup_failure` consists of 238 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setMRs_lookup_failure`:

    0x840103e6      0x0    addi sp,sp,-32
    0x840103e8      0x2    sd ra,24(sp)          ; stack access
    0x840103ea      0x4    mv a6,a0
    0x840103ec      0x6    sd a3,8(sp)           ; stack access
    0x840103ee      0x8    andi a5,a2,3
    0x840103f2      0xc    addi a7,a5,1
    0x840103f6     0x10    li a3,3
    0x840103f8     0x12    bgeu a3,a4,ffffffff84010452 <setMRs_lookup_failure+0x6c>
    0x840103fc     0x16    beqz a1,ffffffff84010476 <setMRs_lookup_failure+0x90>
    0x840103fe     0x18    addiw a3,a4,1
    0x84010402     0x1c    sext.w a0,a3
    0x84010406     0x20    slli a3,a3,0x20
    0x84010408     0x22    srli a3,a3,0x20
    0x8401040a     0x24    slli a3,a3,0x3
    0x8401040c     0x26    add a3,a3,a1
    0x8401040e     0x28    sd a7,0(a3)
    0x84010412     0x2c    li a3,2
    0x84010414     0x2e    beq a5,a3,ffffffff84010498 <setMRs_lookup_failure+0xb2>
    0x84010418     0x32    bltu a3,a5,ffffffff84010510 <setMRs_lookup_failure+0x12a>
    0x8401041c     0x36    beqz a5,ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x8401041e     0x38    li a3,1
    0x84010420     0x3a    bne a5,a3,ffffffff840105d0 <setMRs_lookup_failure+0x1ea>
    0x84010424     0x3e    addiw a5,a4,1
    0x84010428     0x42    sext.w a0,a5
    0x8401042c     0x46    srli a2,a2,0x2
    0x8401042e     0x48    andi a2,a2,127
    0x84010432     0x4c    li a3,3
    0x84010434     0x4e    bgeu a3,a0,ffffffff8401047a <setMRs_lookup_failure+0x94>
    0x84010438     0x52    beqz a1,ffffffff840105d4 <setMRs_lookup_failure+0x1ee>
    0x8401043c     0x56    addiw a4,a4,2
    0x8401043e     0x58    sext.w a0,a4
    0x84010442     0x5c    slli a4,a4,0x20
    0x84010444     0x5e    srli a4,a4,0x20
    0x84010446     0x60    slli a4,a4,0x3
    0x84010448     0x62    add a1,a1,a4
    0x8401044a     0x64    sd a2,0(a1)
    0x8401044c     0x66    ld ra,24(sp)          ; stack access
    0x8401044e     0x68    addi sp,sp,32
    0x84010450     0x6a    ret
    0x84010452     0x6c    slli a3,a4,0x20
    0x84010456     0x70    srli a3,a3,0x20
    0x84010458     0x72    slli a0,a3,0x3
    0x8401045c     0x76    auipc a3,0x7
    0x84010460     0x7a    addi a3,a3,-116 # ffffffff840173e8 <msgRegisters>
    0x84010464     0x7e    add a3,a3,a0
    0x84010466     0x80    ld a3,0(a3)
    0x84010468     0x82    slli a3,a3,0x3
    0x8401046a     0x84    add a3,a3,a6
    0x8401046c     0x86    sd a7,0(a3)
    0x84010470     0x8a    addiw a0,a4,1
    0x84010474     0x8e    j ffffffff84010412 <setMRs_lookup_failure+0x2c>
    0x84010476     0x90    li a0,4
    0x84010478     0x92    j ffffffff84010412 <setMRs_lookup_failure+0x2c>
    0x8401047a     0x94    slli a5,a5,0x20
    0x8401047c     0x96    srli a5,a5,0x20
    0x8401047e     0x98    slli a5,a5,0x3
    0x84010480     0x9a    auipc a3,0x7
    0x84010484     0x9e    addi a3,a3,-152 # ffffffff840173e8 <msgRegisters>
    0x84010488     0xa2    add a5,a5,a3
    0x8401048a     0xa4    ld a0,0(a5)
    0x8401048c     0xa6    slli a0,a0,0x3
    0x8401048e     0xa8    add a0,a0,a6
    0x84010490     0xaa    sd a2,0(a0)
    0x84010492     0xac    addiw a0,a4,2
    0x84010496     0xb0    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x84010498     0xb2    addiw a0,a4,1
    0x8401049c     0xb6    sext.w a7,a0
    0x840104a0     0xba    srli a5,a2,0x2
    0x840104a4     0xbe    andi a3,a5,127
    0x840104a8     0xc2    li a5,3
    0x840104aa     0xc4    bgeu a5,a7,ffffffff840104e2 <setMRs_lookup_failure+0xfc>
    0x840104ae     0xc8    beqz a1,ffffffff840105d8 <setMRs_lookup_failure+0x1f2>
    0x840104b2     0xcc    addiw a5,a4,2
    0x840104b6     0xd0    sext.w a7,a5
    0x840104ba     0xd4    slli a5,a5,0x20
    0x840104bc     0xd6    srli a5,a5,0x20
    0x840104be     0xd8    slli a5,a5,0x3
    0x840104c0     0xda    add a5,a5,a1
    0x840104c2     0xdc    sd a3,0(a5)
    0x840104c4     0xde    srli a2,a2,0x9
    0x840104c6     0xe0    andi a2,a2,127
    0x840104ca     0xe4    li a5,3
    0x840104cc     0xe6    bgeu a5,a7,ffffffff840105ea <setMRs_lookup_failure+0x204>
    0x840104d0     0xea    addiw a4,a4,3
    0x840104d2     0xec    sext.w a0,a4
    0x840104d6     0xf0    slli a4,a4,0x20
    0x840104d8     0xf2    srli a4,a4,0x20
    0x840104da     0xf4    slli a4,a4,0x3
    0x840104dc     0xf6    add a1,a1,a4
    0x840104de     0xf8    sd a2,0(a1)
    0x840104e0     0xfa    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x840104e2     0xfc    slli a0,a0,0x20
    0x840104e4     0xfe    srli a0,a0,0x20
    0x840104e6    0x100    slli a0,a0,0x3
    0x840104e8    0x102    auipc a5,0x7
    0x840104ec    0x106    addi a5,a5,-256 # ffffffff840173e8 <msgRegisters>
    0x840104f0    0x10a    add a0,a0,a5
    0x840104f2    0x10c    ld a5,0(a0)
    0x840104f4    0x10e    slli a5,a5,0x3
    0x840104f6    0x110    add a5,a5,a6
    0x840104f8    0x112    sd a3,0(a5)
    0x840104fa    0x114    addiw a7,a4,2
    0x840104fe    0x118    srli a2,a2,0x9
    0x84010500    0x11a    andi a2,a2,127
    0x84010504    0x11e    li a5,3
    0x84010506    0x120    bgeu a5,a7,ffffffff840105ea <setMRs_lookup_failure+0x204>
    0x8401050a    0x124    bnez a1,ffffffff840104d0 <setMRs_lookup_failure+0xea>
    0x8401050c    0x126    li a0,4
    0x8401050e    0x128    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x84010510    0x12a    addiw a3,a4,1
    0x84010514    0x12e    sext.w a7,a3
    0x84010518    0x132    srli a5,a2,0x9
    0x8401051c    0x136    andi a5,a5,127
    0x84010520    0x13a    li a0,3
    0x84010522    0x13c    bgeu a0,a7,ffffffff84010578 <setMRs_lookup_failure+0x192>
    0x84010526    0x140    beqz a1,ffffffff84010654 <setMRs_lookup_failure+0x26e>
    0x8401052a    0x144    addiw a0,a4,2
    0x8401052e    0x148    sext.w t1,a0
    0x84010532    0x14c    slli a3,a0,0x20
    0x84010536    0x150    srli a3,a3,0x20
    0x84010538    0x152    slli a3,a3,0x3
    0x8401053a    0x154    add a3,a3,a1
    0x8401053c    0x156    sd a5,0(a3)
    0x8401053e    0x158    ld a7,8(sp)           ; stack access
    0x84010540    0x15a    li a5,3
    0x84010542    0x15c    bgeu a5,t1,ffffffff8401060c <setMRs_lookup_failure+0x226>
    0x84010546    0x160    addiw a5,a4,3
    0x8401054a    0x164    sext.w a3,a5
    0x8401054e    0x168    slli a5,a5,0x20
    0x84010550    0x16a    srli a5,a5,0x20
    0x84010552    0x16c    slli a5,a5,0x3
    0x84010554    0x16e    add a5,a5,a1
    0x84010556    0x170    sd a7,0(a5)
    0x8401055a    0x174    srli a2,a2,0x2
    0x8401055c    0x176    andi a2,a2,127
    0x84010560    0x17a    li a5,3
    0x84010562    0x17c    bgeu a5,a3,ffffffff84010636 <setMRs_lookup_failure+0x250>
    0x84010566    0x180    addiw a4,a4,4
    0x84010568    0x182    sext.w a0,a4
    0x8401056c    0x186    slli a4,a4,0x20
    0x8401056e    0x188    srli a4,a4,0x20
    0x84010570    0x18a    slli a4,a4,0x3
    0x84010572    0x18c    add a1,a1,a4
    0x84010574    0x18e    sd a2,0(a1)
    0x84010576    0x190    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x84010578    0x192    slli a3,a3,0x20
    0x8401057a    0x194    srli a3,a3,0x20
    0x8401057c    0x196    slli a3,a3,0x3
    0x8401057e    0x198    auipc a0,0x7
    0x84010582    0x19c    addi a0,a0,-406 # ffffffff840173e8 <msgRegisters>
    0x84010586    0x1a0    add a3,a3,a0
    0x84010588    0x1a2    ld a3,0(a3)
    0x8401058a    0x1a4    slli a3,a3,0x3
    0x8401058c    0x1a6    add a3,a3,a6
    0x8401058e    0x1a8    sd a5,0(a3)
    0x84010590    0x1aa    addiw a5,a4,2
    0x84010594    0x1ae    ld a7,8(sp)           ; stack access
    0x84010596    0x1b0    li a3,3
    0x84010598    0x1b2    bgeu a3,a5,ffffffff840105a0 <setMRs_lookup_failure+0x1ba>
    0x8401059c    0x1b6    bnez a1,ffffffff84010546 <setMRs_lookup_failure+0x160>
    0x8401059e    0x1b8    j ffffffff84010660 <setMRs_lookup_failure+0x27a>
    0x840105a0    0x1ba    slli a5,a5,0x20
    0x840105a2    0x1bc    srli a5,a5,0x20
    0x840105a4    0x1be    slli a5,a5,0x3
    0x840105a6    0x1c0    auipc a3,0x7
    0x840105aa    0x1c4    addi a3,a3,-446 # ffffffff840173e8 <msgRegisters>
    0x840105ae    0x1c8    add a5,a5,a3
    0x840105b0    0x1ca    ld a5,0(a5)
    0x840105b2    0x1cc    slli a5,a5,0x3
    0x840105b4    0x1ce    add a5,a5,a6
    0x840105b6    0x1d0    sd a7,0(a5)
    0x840105ba    0x1d4    addiw a3,a4,3
    0x840105be    0x1d8    srli a2,a2,0x2
    0x840105c0    0x1da    andi a2,a2,127
    0x840105c4    0x1de    li a5,3
    0x840105c6    0x1e0    bgeu a5,a3,ffffffff84010636 <setMRs_lookup_failure+0x250>
    0x840105ca    0x1e4    li a0,4
    0x840105cc    0x1e6    bnez a1,ffffffff84010566 <setMRs_lookup_failure+0x180>
    0x840105ce    0x1e8    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x840105d0    0x1ea    jal ra,ffffffff840103da <halt>
    0x840105d4    0x1ee    li a0,4
    0x840105d6    0x1f0    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x840105d8    0x1f2    addiw a7,a4,2
    0x840105dc    0x1f6    li a5,3
    0x840105de    0x1f8    li a0,4
    0x840105e0    0x1fa    srli a2,a2,0x9
    0x840105e2    0x1fc    andi a2,a2,127
    0x840105e6    0x200    bltu a5,a7,ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x840105ea    0x204    slli a7,a7,0x20
    0x840105ec    0x206    srli a7,a7,0x20
    0x840105f0    0x20a    slli a7,a7,0x3
    0x840105f2    0x20c    auipc a5,0x7
    0x840105f6    0x210    addi a5,a5,-522 # ffffffff840173e8 <msgRegisters>
    0x840105fa    0x214    add a7,a7,a5
    0x840105fc    0x216    ld a0,0(a7)
    0x84010600    0x21a    slli a0,a0,0x3
    0x84010602    0x21c    add a0,a0,a6
    0x84010604    0x21e    sd a2,0(a0)
    0x84010606    0x220    addiw a0,a4,3
    0x8401060a    0x224    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x8401060c    0x226    slli a0,a0,0x20
    0x8401060e    0x228    srli a0,a0,0x20
    0x84010610    0x22a    slli a0,a0,0x3
    0x84010612    0x22c    auipc a5,0x7
    0x84010616    0x230    addi a5,a5,-554 # ffffffff840173e8 <msgRegisters>
    0x8401061a    0x234    add a0,a0,a5
    0x8401061c    0x236    ld a5,0(a0)
    0x8401061e    0x238    slli a5,a5,0x3
    0x84010620    0x23a    add a5,a5,a6
    0x84010622    0x23c    sd a7,0(a5)
    0x84010626    0x240    addiw a3,a4,3
    0x8401062a    0x244    srli a2,a2,0x2
    0x8401062c    0x246    andi a2,a2,127
    0x84010630    0x24a    li a5,3
    0x84010632    0x24c    bltu a5,a3,ffffffff84010566 <setMRs_lookup_failure+0x180>
    0x84010636    0x250    slli a3,a3,0x20
    0x84010638    0x252    srli a3,a3,0x20
    0x8401063a    0x254    slli a3,a3,0x3
    0x8401063c    0x256    auipc a5,0x7
    0x84010640    0x25a    addi a5,a5,-596 # ffffffff840173e8 <msgRegisters>
    0x84010644    0x25e    add a3,a3,a5
    0x84010646    0x260    ld a0,0(a3)
    0x84010648    0x262    slli a0,a0,0x3
    0x8401064a    0x264    add a0,a0,a6
    0x8401064c    0x266    sd a2,0(a0)
    0x8401064e    0x268    addiw a0,a4,4
    0x84010652    0x26c    j ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x84010654    0x26e    addiw a5,a4,2
    0x84010658    0x272    ld a7,8(sp)           ; stack access
    0x8401065a    0x274    li a3,3
    0x8401065c    0x276    bgeu a3,a5,ffffffff840105a0 <setMRs_lookup_failure+0x1ba>
    0x84010660    0x27a    addiw a3,a4,3
    0x84010664    0x27e    li a5,3
    0x84010666    0x280    li a0,4
    0x84010668    0x282    srli a2,a2,0x2
    0x8401066a    0x284    andi a2,a2,127
    0x8401066e    0x288    bltu a5,a3,ffffffff8401044c <setMRs_lookup_failure+0x66>
    0x84010672    0x28c    j ffffffff84010636 <setMRs_lookup_failure+0x250>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
238 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_lookup_failure` has 319 nodes.

Section isHighestPrio (147 of 269)
==================================

Deriving specifications
-----------------------

Section `isHighestPrio` consists of 41 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `isHighestPrio`:

    0x840102c6     0x0    addi sp,sp,-32
    0x840102c8     0x2    sd ra,24(sp)          ; stack access
    0x840102ca     0x4    sd s0,16(sp)          ; stack access
    0x840102cc     0x6    sd s1,8(sp)           ; stack access
    0x840102ce     0x8    sd s2,0(sp)           ; stack access
    0x840102d0     0xa    mv s0,a0
    0x840102d2     0xc    slli a4,a0,0x3
    0x840102d6    0x10    auipc a5,0x8
    0x840102da    0x14    addi a5,a5,-726 # ffffffff84018000 <riscvKSASIDTable>
    0x840102de    0x18    add a5,a5,a4
    0x840102e0    0x1a    ld a0,1040(a5)
    0x840102e4    0x1e    beqz a0,ffffffff84010334 <isHighestPrio+0x6e>
    0x840102e6    0x20    mv s1,a1
    0x840102e8    0x22    jal ra,ffffffff8401739a <__clzdi2>
    0x840102ec    0x26    sext.w s2,a0
    0x840102f0    0x2a    slli s0,s0,0x2
    0x840102f2    0x2c    addi a0,s2,-60
    0x840102f6    0x30    add s0,s0,a0
    0x840102f8    0x32    slli s0,s0,0x3
    0x840102fa    0x34    auipc a5,0x8
    0x840102fe    0x38    addi a5,a5,-762 # ffffffff84018000 <riscvKSASIDTable>
    0x84010302    0x3c    add s0,s0,a5
    0x84010304    0x3e    ld a0,1168(s0) # 1490 <KERNEL_OFFSET-0xfffffffeffffeb70>
    0x84010308    0x42    jal ra,ffffffff8401739a <__clzdi2>
    0x8401030c    0x46    sext.w a4,a0
    0x84010310    0x4a    li a5,63
    0x84010314    0x4e    sub a0,a5,s2
    0x84010318    0x52    slli a0,a0,0x6
    0x8401031a    0x54    sub a5,a5,a4
    0x8401031c    0x56    or a0,a0,a5
    0x8401031e    0x58    sltu a0,s1,a0
    0x84010322    0x5c    xori a0,a0,1
    0x84010326    0x60    sext.w a0,a0
    0x84010328    0x62    ld ra,24(sp)          ; stack access
    0x8401032a    0x64    ld s0,16(sp)          ; stack access
    0x8401032c    0x66    ld s1,8(sp)           ; stack access
    0x8401032e    0x68    ld s2,0(sp)           ; stack access
    0x84010330    0x6a    addi sp,sp,32
    0x84010332    0x6c    ret
    0x84010334    0x6e    li a0,1
    0x84010336    0x70    j ffffffff84010328 <isHighestPrio+0x62>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
41 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `isHighestPrio` has 56 nodes.

Section interrupt (148 of 269)
==============================

Deriving specifications
-----------------------

Section `interrupt` consists of 2 instructions.

JAL_NOP.

Stack analysis
---------------

No stack accesses found. Code for `interrupt`:

    0x840100cc    0x0    sd ra,272(t0)
    0x840100d0    0x4    j ffffffff84013db6 <c_handle_interrupt>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `interrupt` has 4 nodes.

Section exception (149 of 269)
==============================

Deriving specifications
-----------------------

Section `exception` consists of 2 instructions.


Stack analysis
---------------

No stack accesses found. Code for `exception`:

    0x840100c4    0x0    sd ra,272(t0)
    0x840100c8    0x4    j ffffffff84014520 <c_handle_exception>

Proving inst theorems
---------------------

2 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `exception` has 4 nodes.

Section syscall (150 of 269)
============================

Deriving specifications
-----------------------

Section `syscall` consists of 3 instructions.

RVC_FFFFFFFFT_____FT.

Stack analysis
---------------

No stack accesses found. Code for `syscall`:

    0x840100ba    0x0    addi ra,ra,4
    0x840100bc    0x2    sd ra,272(t0)
    0x840100c0    0x6    j ffffffff8401720e <c_handle_syscall>

Proving inst theorems
---------------------

3 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `syscall` has 5 nodes.

Section maybe_alloc_extra_bi (151 of 269)
=========================================

Deriving specifications
-----------------------

Section `maybe_alloc_extra_bi` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `maybe_alloc_extra_bi`:

    0x84000e54     0x0    bltu a1,a0,ffffffff84000e64 <maybe_alloc_extra_bi+0x10>
    0x84000e58     0x4    mv a5,a1
    0x84000e5a     0x6    auipc a4,0x1
    0x84000e5e     0xa    ld a4,-1706(a4) # ffffffff840017b0 <rootserver+0x28>
    0x84000e62     0xe    beqz a4,ffffffff84000e66 <maybe_alloc_extra_bi+0x12>
    0x84000e64    0x10    ret
    0x84000e66    0x12    addi sp,sp,-16
    0x84000e68    0x14    sd ra,8(sp)           ; stack access
    0x84000e6a    0x16    li a1,1
    0x84000e6c    0x18    mv a0,a5
    0x84000e6e    0x1a    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000e72    0x1e    auipc a5,0x1
    0x84000e76    0x22    sd a0,-1730(a5) # ffffffff840017b0 <rootserver+0x28>
    0x84000e7a    0x26    ld ra,8(sp)           ; stack access
    0x84000e7c    0x28    addi sp,sp,16
    0x84000e7e    0x2a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maybe_alloc_extra_bi` has 27 nodes.

Section alloc_rootserver_obj (152 of 269)
=========================================

Deriving specifications
-----------------------

Section `alloc_rootserver_obj` consists of 16 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `alloc_rootserver_obj`:

    0x84000e26     0x0    addi sp,sp,-16
    0x84000e28     0x2    sd ra,8(sp)           ; stack access
    0x84000e2a     0x4    sd s0,0(sp)           ; stack access
    0x84000e2c     0x6    auipc a5,0x0
    0x84000e30     0xa    addi a5,a5,1788 # ffffffff84001528 <ndks_boot>
    0x84000e34     0xe    ld s0,680(a5)
    0x84000e38    0x12    sll a1,a1,a0
    0x84000e3c    0x16    add a4,a1,s0
    0x84000e40    0x1a    sd a4,680(a5)
    0x84000e44    0x1e    mv a0,s0
    0x84000e46    0x20    jal ra,ffffffff84015a40 <memzero>
    0x84000e4a    0x24    mv a0,s0
    0x84000e4c    0x26    ld ra,8(sp)           ; stack access
    0x84000e4e    0x28    ld s0,0(sp)           ; stack access
    0x84000e50    0x2a    addi sp,sp,16
    0x84000e52    0x2c    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `alloc_rootserver_obj` has 24 nodes.

Section create_idle_thread (153 of 269)
=======================================

Deriving specifications
-----------------------

Section `create_idle_thread` consists of 11 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_idle_thread`:

    0x84000d02     0x0    addi sp,sp,-16
    0x84000d04     0x2    sd ra,8(sp)           ; stack access
    0x84000d06     0x4    auipc a0,0x17
    0x84000d0a     0x8    addi a0,a0,-1286 # ffffffff84017800 <ksIdleThreadTCB+0x200>
    0x84000d0e     0xc    auipc a5,0x2a
    0x84000d12    0x10    sd a0,-1246(a5) # ffffffff8402a830 <ksIdleThread>
    0x84000d16    0x14    jal ra,ffffffff84000cd4 <configureIdleThread>
    0x84000d1a    0x18    li a0,1
    0x84000d1c    0x1a    ld ra,8(sp)           ; stack access
    0x84000d1e    0x1c    addi sp,sp,16
    0x84000d20    0x1e    ret

Proving inst theorems
---------------------

11 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_idle_thread` has 16 nodes.

Section configureIdleThread (154 of 269)
========================================

Deriving specifications
-----------------------

Section `configureIdleThread` consists of 15 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `configureIdleThread`:

    0x84000cd4     0x0    addi sp,sp,-16
    0x84000cd6     0x2    sd ra,8(sp)           ; stack access
    0x84000cd8     0x4    auipc a4,0xf
    0x84000cdc     0x8    addi a4,a4,1020 # ffffffff840100d4 <idle_thread>
    0x84000ce0     0xc    sd a4,272(a0)
    0x84000ce4    0x10    li a4,288
    0x84000ce8    0x14    sd a4,256(a0)
    0x84000cec    0x18    auipc a4,0x2a
    0x84000cf0    0x1c    addi a4,a4,-1260 # ffffffff8402a800 <tlbLockCount>
    0x84000cf4    0x20    sd a4,8(a0)
    0x84000cf6    0x22    li a1,7
    0x84000cf8    0x24    jal ra,ffffffff840125f6 <setThreadState>
    0x84000cfc    0x28    ld ra,8(sp)           ; stack access
    0x84000cfe    0x2a    addi sp,sp,16
    0x84000d00    0x2c    ret

Proving inst theorems
---------------------

15 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `configureIdleThread` has 22 nodes.

Section create_kernel_untypeds (155 of 269)
===========================================

Deriving specifications
-----------------------

Section `create_kernel_untypeds` consists of 38 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `create_kernel_untypeds`:

    0x84000b2a     0x0    addi sp,sp,-80
    0x84000b2c     0x2    sd ra,72(sp)          ; stack access
    0x84000b2e     0x4    sd s0,64(sp)          ; stack access
    0x84000b30     0x6    sd s1,56(sp)          ; stack access
    0x84000b32     0x8    sd s2,48(sp)          ; stack access
    0x84000b34     0xa    sd a0,16(sp)          ; stack access
    0x84000b36     0xc    sd a1,24(sp)          ; stack access
    0x84000b38     0xe    mv a6,a3
    0x84000b3a    0x10    mv s1,a4
    0x84000b3c    0x12    mv a5,a4
    0x84000b3e    0x14    mv a3,a2
    0x84000b40    0x16    mv a4,a6
    0x84000b42    0x18    li a2,0
    0x84000b44    0x1a    jal ra,ffffffff84000972 <create_untypeds_for_region>
    0x84000b48    0x1e    beqz a0,ffffffff84000b7c <create_kernel_untypeds+0x52>
    0x84000b4a    0x20    auipc s0,0x1
    0x84000b4e    0x24    addi s0,s0,-1242 # ffffffff84001670 <ndks_boot+0x148>
    0x84000b52    0x28    auipc s2,0x1
    0x84000b56    0x2c    addi s2,s2,-994 # ffffffff84001770 <ndks_boot+0x248>
    0x84000b5a    0x30    ld a3,0(s0)
    0x84000b5c    0x32    ld a4,8(s0)
    0x84000b5e    0x34    sd zero,0(s0)
    0x84000b62    0x38    sd zero,8(s0)
    0x84000b66    0x3c    mv a5,s1
    0x84000b68    0x3e    li a2,0
    0x84000b6a    0x40    ld a0,16(sp)          ; stack access
    0x84000b6c    0x42    ld a1,24(sp)          ; stack access
    0x84000b6e    0x44    jal ra,ffffffff84000972 <create_untypeds_for_region>
    0x84000b72    0x48    beqz a0,ffffffff84000b7c <create_kernel_untypeds+0x52>
    0x84000b74    0x4a    addi s0,s0,16
    0x84000b76    0x4c    bne s0,s2,ffffffff84000b5a <create_kernel_untypeds+0x30>
    0x84000b7a    0x50    li a0,1
    0x84000b7c    0x52    ld ra,72(sp)          ; stack access
    0x84000b7e    0x54    ld s0,64(sp)          ; stack access
    0x84000b80    0x56    ld s1,56(sp)          ; stack access
    0x84000b82    0x58    ld s2,48(sp)          ; stack access
    0x84000b84    0x5a    addi sp,sp,80
    0x84000b86    0x5c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_kernel_untypeds` has 63 nodes.

Section create_device_untypeds (156 of 269)
===========================================

Deriving specifications
-----------------------

Section `create_device_untypeds` consists of 68 instructions.


Stack analysis
---------------

24 stack accesses found. Annotated code for `create_device_untypeds`:

    0x84000a88     0x0    addi sp,sp,-96
    0x84000a8a     0x2    sd ra,88(sp)          ; stack access
    0x84000a8c     0x4    sd s0,80(sp)          ; stack access
    0x84000a8e     0x6    sd s1,72(sp)          ; stack access
    0x84000a90     0x8    sd s2,64(sp)          ; stack access
    0x84000a92     0xa    sd s3,56(sp)          ; stack access
    0x84000a94     0xc    sd s4,48(sp)          ; stack access
    0x84000a96     0xe    sd s5,40(sp)          ; stack access
    0x84000a98    0x10    sd a0,0(sp)           ; stack access
    0x84000a9a    0x12    sd a1,8(sp)           ; stack access
    0x84000a9c    0x14    mv s4,a2
    0x84000a9e    0x16    auipc a3,0x1
    0x84000aa2    0x1a    ld a3,-1078(a3) # ffffffff84001668 <ndks_boot+0x140>
    0x84000aa6    0x1e    beqz a3,ffffffff84000b0a <create_device_untypeds+0x82>
    0x84000aa8    0x20    auipc s0,0x1
    0x84000aac    0x24    addi s0,s0,-1408 # ffffffff84001528 <ndks_boot>
    0x84000ab0    0x28    li s1,0
    0x84000ab2    0x2a    li a3,0
    0x84000ab4    0x2c    li s5,-1
    0x84000ab6    0x2e    slli s5,s5,0x26
    0x84000ab8    0x30    mv s3,s0
    0x84000aba    0x32    j ffffffff84000acc <create_device_untypeds+0x44>
    0x84000abc    0x34    ld a3,8(s2)
    0x84000ac0    0x38    addi s1,s1,1
    0x84000ac2    0x3a    addi s0,s0,16
    0x84000ac4    0x3c    ld a4,320(s3)
    0x84000ac8    0x40    bgeu s1,a4,ffffffff84000aec <create_device_untypeds+0x64>
    0x84000acc    0x44    mv s2,s0
    0x84000ace    0x46    ld a4,0(s0)
    0x84000ad0    0x48    bgeu a3,a4,ffffffff84000abc <create_device_untypeds+0x34>
    0x84000ad4    0x4c    add a3,a3,s5
    0x84000ad6    0x4e    sd a3,16(sp)          ; stack access
    0x84000ad8    0x50    add a4,a4,s5
    0x84000ada    0x52    sd a4,24(sp)          ; stack access
    0x84000adc    0x54    mv a5,s4
    0x84000ade    0x56    li a2,1
    0x84000ae0    0x58    ld a0,0(sp)           ; stack access
    0x84000ae2    0x5a    ld a1,8(sp)           ; stack access
    0x84000ae4    0x5c    jal ra,ffffffff84000972 <create_untypeds_for_region>
    0x84000ae8    0x60    bnez a0,ffffffff84000abc <create_device_untypeds+0x34>
    0x84000aea    0x62    j ffffffff84000af8 <create_device_untypeds+0x70>
    0x84000aec    0x64    lui a5,0xfc000
    0x84000af0    0x68    srli a5,a5,0x19
    0x84000af2    0x6a    li a0,1
    0x84000af4    0x6c    bgeu a5,a3,ffffffff84000b0a <create_device_untypeds+0x82>
    0x84000af8    0x70    ld ra,88(sp)          ; stack access
    0x84000afa    0x72    ld s0,80(sp)          ; stack access
    0x84000afc    0x74    ld s1,72(sp)          ; stack access
    0x84000afe    0x76    ld s2,64(sp)          ; stack access
    0x84000b00    0x78    ld s3,56(sp)          ; stack access
    0x84000b02    0x7a    ld s4,48(sp)          ; stack access
    0x84000b04    0x7c    ld s5,40(sp)          ; stack access
    0x84000b06    0x7e    addi sp,sp,96
    0x84000b08    0x80    ret
    0x84000b0a    0x82    li a4,-1
    0x84000b0c    0x84    slli a5,a4,0x26
    0x84000b10    0x88    add a3,a3,a5
    0x84000b12    0x8a    sd a3,16(sp)          ; stack access
    0x84000b14    0x8c    srli a4,a4,0x1a
    0x84000b16    0x8e    sd a4,24(sp)          ; stack access
    0x84000b18    0x90    mv a5,s4
    0x84000b1a    0x92    li a2,1
    0x84000b1c    0x94    ld a0,0(sp)           ; stack access
    0x84000b1e    0x96    ld a1,8(sp)           ; stack access
    0x84000b20    0x98    jal ra,ffffffff84000972 <create_untypeds_for_region>
    0x84000b24    0x9c    beqz a0,ffffffff84000af8 <create_device_untypeds+0x70>
    0x84000b26    0x9e    li a0,1
    0x84000b28    0xa0    j ffffffff84000af8 <create_device_untypeds+0x70>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
68 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_device_untypeds` has 111 nodes.

Section create_it_asid_pool (157 of 269)
========================================

Deriving specifications
-----------------------

Section `create_it_asid_pool` consists of 39 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_it_asid_pool`:

    0x840008f6     0x0    addi sp,sp,-80
    0x840008f8     0x2    sd ra,72(sp)          ; stack access
    0x840008fa     0x4    sd s0,64(sp)          ; stack access
    0x840008fc     0x6    sd s1,56(sp)          ; stack access
    0x840008fe     0x8    sd s2,48(sp)          ; stack access
    0x84000900     0xa    sd s3,40(sp)          ; stack access
    0x84000902     0xc    mv s2,a0
    0x84000904     0xe    mv s1,a1
    0x84000906    0x10    auipc s0,0x1
    0x8400090a    0x14    ld s0,-366(s0) # ffffffff84001798 <rootserver+0x10>
    0x8400090e    0x18    slli s0,s0,0x19
    0x84000910    0x1a    srli s0,s0,0x1b
    0x84000912    0x1c    li a5,13
    0x84000914    0x1e    slli a5,a5,0x3b
    0x84000916    0x20    or s0,s0,a5
    0x84000918    0x22    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x8400091c    0x26    sd s0,192(a0)
    0x8400091e    0x28    sd zero,200(a0)
    0x84000922    0x2c    sd zero,208(a0)
    0x84000926    0x30    li s3,3
    0x84000928    0x32    sd s3,216(a0)
    0x8400092c    0x36    mv a0,s2
    0x8400092e    0x38    mv a1,s1
    0x84000930    0x3a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000934    0x3e    li a5,11
    0x84000936    0x40    slli a5,a5,0x3b
    0x84000938    0x42    sd a5,160(a0)
    0x8400093a    0x44    sd zero,168(a0)
    0x8400093e    0x48    sd zero,176(a0)
    0x84000942    0x4c    sd s3,184(a0)
    0x84000946    0x50    mv a0,s0
    0x84000948    0x52    li a1,0
    0x8400094a    0x54    ld ra,72(sp)          ; stack access
    0x8400094c    0x56    ld s0,64(sp)          ; stack access
    0x8400094e    0x58    ld s1,56(sp)          ; stack access
    0x84000950    0x5a    ld s2,48(sp)          ; stack access
    0x84000952    0x5c    ld s3,40(sp)          ; stack access
    0x84000954    0x5e    addi sp,sp,80
    0x84000956    0x60    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_asid_pool` has 61 nodes.

Section provide_cap (158 of 269)
================================

Deriving specifications
-----------------------

Section `provide_cap` consists of 34 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `provide_cap`:

    0x84000686     0x0    addi sp,sp,-48
    0x84000688     0x2    sd ra,40(sp)          ; stack access
    0x8400068a     0x4    sd s0,32(sp)          ; stack access
    0x8400068c     0x6    sd a0,16(sp)          ; stack access
    0x8400068e     0x8    sd a1,24(sp)          ; stack access
    0x84000690     0xa    sd a2,0(sp)           ; stack access
    0x84000692     0xc    sd a3,8(sp)           ; stack access
    0x84000694     0xe    auipc a5,0x1
    0x84000698    0x12    addi a5,a5,-364 # ffffffff84001528 <ndks_boot>
    0x8400069c    0x16    ld s0,592(a5)
    0x840006a0    0x1a    ld a5,600(a5)
    0x840006a4    0x1e    bltu s0,a5,ffffffff840006b2 <provide_cap+0x2c>
    0x840006a8    0x22    li a0,0
    0x840006aa    0x24    ld ra,40(sp)          ; stack access
    0x840006ac    0x26    ld s0,32(sp)          ; stack access
    0x840006ae    0x28    addi sp,sp,48
    0x840006b0    0x2a    ret
    0x840006b2    0x2c    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840006b6    0x30    slli s0,s0,0x5
    0x840006b8    0x32    add s0,s0,a0
    0x840006ba    0x34    ld a5,0(sp)           ; stack access
    0x840006bc    0x36    sd a5,0(s0)
    0x840006be    0x38    ld a5,8(sp)           ; stack access
    0x840006c0    0x3a    sd a5,8(s0)
    0x840006c2    0x3c    sd zero,16(s0)
    0x840006c6    0x40    li a5,3
    0x840006c8    0x42    sd a5,24(s0)
    0x840006ca    0x44    auipc a4,0x1
    0x840006ce    0x48    addi a4,a4,-418 # ffffffff84001528 <ndks_boot>
    0x840006d2    0x4c    ld a5,592(a4)
    0x840006d6    0x50    addi a5,a5,1
    0x840006d8    0x52    sd a5,592(a4)
    0x840006dc    0x56    li a0,1
    0x840006de    0x58    j ffffffff840006aa <provide_cap+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
34 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `provide_cap` has 56 nodes.

Section calculate_extra_bi_size_bits (159 of 269)
=================================================

Deriving specifications
-----------------------

Section `calculate_extra_bi_size_bits` consists of 22 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `calculate_extra_bi_size_bits`:

    0x8400064e     0x0    addi sp,sp,-16
    0x84000650     0x2    sd ra,8(sp)           ; stack access
    0x84000652     0x4    sd s0,0(sp)           ; stack access
    0x84000654     0x6    mv s0,a0
    0x84000656     0x8    beqz a0,ffffffff8400067e <calculate_extra_bi_size_bits+0x30>
    0x84000658     0xa    addi a0,a0,-1
    0x8400065a     0xc    srli a0,a0,0xc
    0x8400065c     0xe    addi a0,a0,1
    0x8400065e    0x10    slli a0,a0,0xc
    0x84000660    0x12    jal ra,ffffffff8401739a <__clzdi2>
    0x84000664    0x16    sext.w a5,a0
    0x84000668    0x1a    li a0,63
    0x8400066c    0x1e    sub a0,a0,a5
    0x8400066e    0x20    li a4,1
    0x84000670    0x22    sll a4,a4,a0
    0x84000674    0x26    bgeu a4,s0,ffffffff8400067e <calculate_extra_bi_size_bits+0x30>
    0x84000678    0x2a    li a0,64
    0x8400067c    0x2e    sub a0,a0,a5
    0x8400067e    0x30    ld ra,8(sp)           ; stack access
    0x84000680    0x32    ld s0,0(sp)           ; stack access
    0x84000682    0x34    addi sp,sp,16
    0x84000684    0x36    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `calculate_extra_bi_size_bits` has 32 nodes.

Section create_domain_cap (160 of 269)
======================================

Deriving specifications
-----------------------

Section `create_domain_cap` consists of 13 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `create_domain_cap`:

    0x840005de     0x0    addi sp,sp,-32
    0x840005e0     0x2    sd ra,24(sp)          ; stack access
    0x840005e2     0x4    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840005e6     0x8    li a5,-3
    0x840005e8     0xa    slli a5,a5,0x3d
    0x840005ea     0xc    sd a5,352(a0)
    0x840005ee    0x10    sd zero,360(a0)
    0x840005f2    0x14    sd zero,368(a0)
    0x840005f6    0x18    li a5,3
    0x840005f8    0x1a    sd a5,376(a0)
    0x840005fc    0x1e    ld ra,24(sp)          ; stack access
    0x840005fe    0x20    addi sp,sp,32
    0x84000600    0x22    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_domain_cap` has 21 nodes.

Section insert_region (161 of 269)
==================================

Deriving specifications
-----------------------

Section `insert_region` consists of 39 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `insert_region`:

    0x84000532     0x0    addi sp,sp,-48
    0x84000534     0x2    sd ra,40(sp)          ; stack access
    0x84000536     0x4    sd s0,32(sp)          ; stack access
    0x84000538     0x6    sd a0,0(sp)           ; stack access
    0x8400053a     0x8    sd a1,8(sp)           ; stack access
    0x8400053c     0xa    beq a1,a0,ffffffff8400058c <insert_region+0x5a>
    0x84000540     0xe    auipc a5,0x1
    0x84000544    0x12    addi a5,a5,304 # ffffffff84001670 <ndks_boot+0x148>
    0x84000548    0x16    li s0,0
    0x8400054a    0x18    li a2,16
    0x8400054c    0x1a    ld a3,0(a5)
    0x8400054e    0x1c    ld a4,8(a5)
    0x84000550    0x1e    beq a3,a4,ffffffff84000566 <insert_region+0x34>
    0x84000554    0x22    addi s0,s0,1
    0x84000556    0x24    addi a5,a5,16
    0x84000558    0x26    bne s0,a2,ffffffff8400054c <insert_region+0x1a>
    0x8400055c    0x2a    li a0,0
    0x8400055e    0x2c    ld ra,40(sp)          ; stack access
    0x84000560    0x2e    ld s0,32(sp)          ; stack access
    0x84000562    0x30    addi sp,sp,48
    0x84000564    0x32    ret
    0x84000566    0x34    li a5,1
    0x84000568    0x36    slli a5,a5,0x26
    0x8400056a    0x38    add a0,a0,a5
    0x8400056c    0x3a    add a1,a1,a5
    0x8400056e    0x3c    jal ra,ffffffff84000366 <reserve_region>
    0x84000572    0x40    addi s0,s0,20
    0x84000574    0x42    slli s0,s0,0x4
    0x84000576    0x44    auipc a5,0x1
    0x8400057a    0x48    addi a5,a5,-78 # ffffffff84001528 <ndks_boot>
    0x8400057e    0x4c    add s0,s0,a5
    0x84000580    0x4e    ld a5,0(sp)           ; stack access
    0x84000582    0x50    sd a5,8(s0)
    0x84000584    0x52    ld a5,8(sp)           ; stack access
    0x84000586    0x54    sd a5,16(s0)
    0x84000588    0x56    li a0,1
    0x8400058a    0x58    j ffffffff8400055e <insert_region+0x2c>
    0x8400058c    0x5a    li a0,1
    0x8400058e    0x5c    j ffffffff8400055e <insert_region+0x2c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `insert_region` has 59 nodes.

Section reserve_region (162 of 269)
===================================

Deriving specifications
-----------------------

Section `reserve_region` consists of 78 instructions.

RVC_TFFFFT___FFT__TF.
RVC_TFFTFFT__FT___TF.

Stack analysis
---------------

2 stack accesses found. Annotated code for `reserve_region`:

    0x84000366     0x0    beq a0,a1,ffffffff8400044c <reserve_region+0xe6>
    0x8400036a     0x4    addi sp,sp,-32
    0x8400036c     0x6    sd ra,24(sp)          ; stack access
    0x8400036e     0x8    mv a7,a0
    0x84000370     0xa    auipc a6,0x1
    0x84000374     0xe    ld a6,760(a6) # ffffffff84001668 <ndks_boot+0x140>
    0x84000378    0x12    beqz a6,ffffffff840003a8 <reserve_region+0x42>
    0x8400037c    0x16    auipc t1,0x1
    0x84000380    0x1a    addi t1,t1,428 # ffffffff84001528 <ndks_boot>
    0x84000384    0x1e    mv a5,t1
    0x84000386    0x20    li a4,0
    0x84000388    0x22    ld a3,0(a5)
    0x8400038a    0x24    beq a3,a1,ffffffff840003c6 <reserve_region+0x60>
    0x8400038e    0x28    ld a2,8(a5)
    0x84000390    0x2a    beq a2,a7,ffffffff840003e2 <reserve_region+0x7c>
    0x84000394    0x2e    bltu a1,a3,ffffffff840003f8 <reserve_region+0x92>
    0x84000398    0x32    addi a4,a4,1
    0x8400039a    0x34    addi a5,a5,16
    0x8400039c    0x36    bne a4,a6,ffffffff84000388 <reserve_region+0x22>
    0x840003a0    0x3a    li a5,19
    0x840003a2    0x3c    li a0,0
    0x840003a4    0x3e    beq a6,a5,ffffffff840003dc <reserve_region+0x76>
    0x840003a8    0x42    auipc a4,0x1
    0x840003ac    0x46    addi a4,a4,384 # ffffffff84001528 <ndks_boot>
    0x840003b0    0x4a    slli a5,a6,0x4
    0x840003b4    0x4e    add a5,a5,a4
    0x840003b6    0x50    sd a7,0(a5) # ffffffffcc000000 <ki_end+0x47fd1000>
    0x840003ba    0x54    sd a1,8(a5)
    0x840003bc    0x56    addi a6,a6,1
    0x840003be    0x58    sd a6,320(a4)
    0x840003c2    0x5c    li a0,1
    0x840003c4    0x5e    j ffffffff840003dc <reserve_region+0x76>
    0x840003c6    0x60    slli a4,a4,0x4
    0x840003c8    0x62    auipc a5,0x1
    0x840003cc    0x66    addi a5,a5,352 # ffffffff84001528 <ndks_boot>
    0x840003d0    0x6a    add a4,a4,a5
    0x840003d2    0x6c    sd a7,0(a4)
    0x840003d6    0x70    jal ra,ffffffff84000026 <merge_regions>
    0x840003da    0x74    li a0,1
    0x840003dc    0x76    ld ra,24(sp)          ; stack access
    0x840003de    0x78    addi sp,sp,32
    0x840003e0    0x7a    ret
    0x840003e2    0x7c    slli a4,a4,0x4
    0x840003e4    0x7e    auipc a5,0x1
    0x840003e8    0x82    addi a5,a5,324 # ffffffff84001528 <ndks_boot>
    0x840003ec    0x86    add a4,a4,a5
    0x840003ee    0x88    sd a1,8(a4)
    0x840003f0    0x8a    jal ra,ffffffff84000026 <merge_regions>
    0x840003f4    0x8e    li a0,1
    0x840003f6    0x90    j ffffffff840003dc <reserve_region+0x76>
    0x840003f8    0x92    addi a3,a6,1
    0x840003fc    0x96    li a5,19
    0x840003fe    0x98    li a0,0
    0x84000400    0x9a    bltu a5,a3,ffffffff840003dc <reserve_region+0x76>
    0x84000404    0x9e    bgeu a4,a6,ffffffff84000430 <reserve_region+0xca>
    0x84000408    0xa2    slli a6,a6,0x4
    0x8400040a    0xa4    auipc a5,0x1
    0x8400040e    0xa8    addi a5,a5,286 # ffffffff84001528 <ndks_boot>
    0x84000412    0xac    add a6,a6,a5
    0x84000414    0xae    slli a5,a4,0x4
    0x84000418    0xb2    add t1,t1,a5
    0x8400041a    0xb4    ld a5,-16(a6)
    0x8400041e    0xb8    sd a5,0(a6)
    0x84000422    0xbc    ld a5,-8(a6)
    0x84000426    0xc0    sd a5,8(a6)
    0x8400042a    0xc4    addi a6,a6,-16
    0x8400042c    0xc6    bne a6,t1,ffffffff8400041a <reserve_region+0xb4>
    0x84000430    0xca    auipc a2,0x1
    0x84000434    0xce    addi a2,a2,248 # ffffffff84001528 <ndks_boot>
    0x84000438    0xd2    slli a5,a4,0x4
    0x8400043c    0xd6    add a5,a5,a2
    0x8400043e    0xd8    sd a7,0(a5)
    0x84000442    0xdc    sd a1,8(a5)
    0x84000444    0xde    sd a3,320(a2)
    0x84000448    0xe2    li a0,1
    0x8400044a    0xe4    j ffffffff840003dc <reserve_region+0x76>
    0x8400044c    0xe6    li a0,1
    0x8400044e    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `reserve_region` has 119 nodes.

Section create_mapped_it_frame_cap (163 of 269)
===============================================

Deriving specifications
-----------------------

Section `create_mapped_it_frame_cap` consists of 28 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `create_mapped_it_frame_cap`:

    0x84000268     0x0    addi sp,sp,-80
    0x8400026a     0x2    sd ra,72(sp)          ; stack access
    0x8400026c     0x4    sd s0,64(sp)          ; stack access
    0x8400026e     0x6    sd s1,56(sp)          ; stack access
    0x84000270     0x8    snez s0,a5
    0x84000274     0xc    slli s0,s0,0x39
    0x84000276     0xe    slli a3,a3,0x19
    0x84000278    0x10    srli a3,a3,0x19
    0x8400027a    0x12    or s0,s0,a3
    0x8400027c    0x14    li a5,19
    0x8400027e    0x16    slli a5,a5,0x37
    0x84000280    0x18    or s0,s0,a5
    0x84000282    0x1a    slli a2,a2,0x9
    0x84000284    0x1c    lui s1,0xfe000
    0x84000288    0x20    srli s1,s1,0x10
    0x8400028a    0x22    and s1,s1,a2
    0x8400028c    0x24    slli a4,a4,0x30
    0x8400028e    0x26    or s1,s1,a4
    0x84000290    0x28    mv a2,s0
    0x84000292    0x2a    mv a3,s1
    0x84000294    0x2c    jal ra,ffffffff840001fa <map_it_frame_cap>
    0x84000298    0x30    mv a0,s0
    0x8400029a    0x32    mv a1,s1
    0x8400029c    0x34    ld ra,72(sp)          ; stack access
    0x8400029e    0x36    ld s0,64(sp)          ; stack access
    0x840002a0    0x38    ld s1,56(sp)          ; stack access
    0x840002a2    0x3a    addi sp,sp,80
    0x840002a4    0x3c    ret

Proving inst theorems
---------------------

28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_mapped_it_frame_cap` has 36 nodes.

Section write_it_asid_pool (164 of 269)
=======================================

Deriving specifications
-----------------------

Section `write_it_asid_pool` consists of 21 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `write_it_asid_pool`:

    0x8400015e     0x0    addi sp,sp,-64
    0x84000160     0x2    sd ra,56(sp)          ; stack access
    0x84000162     0x4    sd s0,48(sp)          ; stack access
    0x84000164     0x6    sd s1,40(sp)          ; stack access
    0x84000166     0x8    sd s2,32(sp)          ; stack access
    0x84000168     0xa    mv s2,a2
    0x8400016a     0xc    mv s1,a3
    0x8400016c     0xe    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000170    0x12    mv s0,a0
    0x84000172    0x14    mv a0,s2
    0x84000174    0x16    mv a1,s1
    0x84000176    0x18    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x8400017a    0x1c    sd a0,8(s0)
    0x8400017c    0x1e    auipc a5,0x18
    0x84000180    0x22    sd s0,-380(a5) # ffffffff84018000 <riscvKSASIDTable>
    0x84000184    0x26    ld ra,56(sp)          ; stack access
    0x84000186    0x28    ld s0,48(sp)          ; stack access
    0x84000188    0x2a    ld s1,40(sp)          ; stack access
    0x8400018a    0x2c    ld s2,32(sp)          ; stack access
    0x8400018c    0x2e    addi sp,sp,64
    0x8400018e    0x30    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `write_it_asid_pool` has 34 nodes.

Section map_kernel_frame (165 of 269)
=====================================

Deriving specifications
-----------------------

Section `map_kernel_frame` consists of 18 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `map_kernel_frame`:

    0x840000c4     0x0    addi sp,sp,-16
    0x840000c6     0x2    sd ra,8(sp)           ; stack access
    0x840000c8     0x4    sd s0,0(sp)           ; stack access
    0x840000ca     0x6    srli a1,a1,0x1e
    0x840000cc     0x8    andi a1,a1,511
    0x840000d0     0xc    slli a1,a1,0x3
    0x840000d2     0xe    auipc s0,0x2d
    0x840000d6    0x12    addi s0,s0,-210 # ffffffff8402d000 <kernel_root_pageTable>
    0x840000da    0x16    add s0,s0,a1
    0x840000dc    0x18    li a1,1
    0x840000de    0x1a    lui a5,0xc0000
    0x840000e2    0x1e    and a0,a0,a5
    0x840000e4    0x20    jal ra,ffffffff840100da <pte_next>
    0x840000e8    0x24    sd a0,0(s0)
    0x840000ea    0x26    ld ra,8(sp)           ; stack access
    0x840000ec    0x28    ld s0,0(sp)           ; stack access
    0x840000ee    0x2a    addi sp,sp,16
    0x840000f0    0x2c    ret

Proving inst theorems
---------------------

18 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_frame` has 25 nodes.

Section _start (166 of 269)
===========================

Deriving specifications
-----------------------

Section `_start` consists of 10 instructions.

Skipping 0000100f fence.i

Skipping 14001073 csrw sscratch,zero


Stack analysis
---------------

No stack accesses found. Code for `_start`:

    0x84000000     0x0    fence.i
    0x84000004     0x4    auipc gp,0x18
    0x84000008     0x8    addi gp,gp,-1066 # ffffffff84017bda <__global_pointer$>
    0x8400000c     0xc    auipc sp,0x2a
    0x84000010    0x10    addi sp,sp,2036 # ffffffff8402a800 <tlbLockCount>
    0x84000014    0x14    csrw sscratch,zero
    0x84000018    0x18    jal ra,ffffffff840012ca <init_kernel>
    0x8400001c    0x1c    auipc ra,0x10
    0x84000020    0x20    addi ra,ra,796 # ffffffff84010338 <restore_user_context>
    0x84000024    0x24    ret

Proving inst theorems
---------------------

10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `_start` has 14 nodes.

Section fastpath_reply_recv (167 of 269)
========================================

Deriving specifications
-----------------------

Section `fastpath_reply_recv` consists of 252 instructions.

Skipping 180b1073 csrw satp,s6

Skipping 12000073 sfence.vma

RVC_FTTTFT________FT.
RVC_TFFFFFT__T____TF.
Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

12 stack accesses found. Annotated code for `fastpath_reply_recv`:

    0x84016eea      0x0    addi sp,sp,-96
    0x84016eec      0x2    sd ra,88(sp)          ; stack access
    0x84016eee      0x4    sd s0,80(sp)          ; stack access
    0x84016ef0      0x6    sd s1,72(sp)          ; stack access
    0x84016ef2      0x8    sd s2,64(sp)          ; stack access
    0x84016ef4      0xa    sd s3,56(sp)          ; stack access
    0x84016ef6      0xc    sd s4,48(sp)          ; stack access
    0x84016ef8      0xe    sd s5,40(sp)          ; stack access
    0x84016efa     0x10    sd s6,32(sp)          ; stack access
    0x84016efc     0x12    sd s7,24(sp)          ; stack access
    0x84016efe     0x14    sd s8,16(sp)          ; stack access
    0x84016f00     0x16    sd s9,8(sp)           ; stack access
    0x84016f02     0x18    sd s10,0(sp)          ; stack access
    0x84016f04     0x1a    auipc s2,0x14
    0x84016f08     0x1e    ld s2,-1740(s2) # ffffffff8402a838 <ksCurThread>
    0x84016f0c     0x22    ld a4,312(s2)
    0x84016f10     0x26    andi a3,a1,511
    0x84016f14     0x2a    li a5,4
    0x84016f16     0x2c    bltu a5,a3,ffffffff8401703c <fastpath_reply_recv+0x152>
    0x84016f1a     0x30    mv s1,a1
    0x84016f1c     0x32    andi a4,a4,15
    0x84016f1e     0x34    bnez a4,ffffffff8401703c <fastpath_reply_recv+0x152>
    0x84016f22     0x38    andi s3,s2,-1024
    0x84016f26     0x3c    ld s0,0(s3)
    0x84016f2a     0x40    ld a6,8(s3)
    0x84016f2e     0x44    srli a3,s0,0x3b
    0x84016f32     0x48    li a5,10
    0x84016f34     0x4a    bne a3,a5,ffffffff8401704c <fastpath_reply_recv+0x162>
    0x84016f38     0x4e    li t3,64
    0x84016f3c     0x52    lui a5,0xfc000
    0x84016f40     0x56    srli t4,a5,0x19
    0x84016f44     0x5a    li a5,1
    0x84016f46     0x5c    slli t1,a5,0x26
    0x84016f4a     0x60    li a5,-1
    0x84016f4c     0x62    slli a7,a5,0x27
    0x84016f50     0x66    li t5,63
    0x84016f54     0x6a    li t6,10
    0x84016f56     0x6c    srli a3,s0,0x35
    0x84016f5a     0x70    andi a3,a3,63
    0x84016f5e     0x74    srli a2,s0,0x2f
    0x84016f62     0x78    andi a2,a2,63
    0x84016f66     0x7c    sll a5,a0,a4
    0x84016f6a     0x80    beqz a3,ffffffff84016f78 <fastpath_reply_recv+0x8e>
    0x84016f6c     0x82    subw a1,t3,a3
    0x84016f70     0x86    srl a1,a5,a1
    0x84016f74     0x8a    bne a6,a1,ffffffff8401704c <fastpath_reply_recv+0x162>
    0x84016f78     0x8e    sll a5,a5,a3
    0x84016f7c     0x92    subw a1,t3,a2
    0x84016f80     0x96    srl a5,a5,a1
    0x84016f84     0x9a    slli a5,a5,0x5
    0x84016f86     0x9c    slli s0,s0,0x1
    0x84016f88     0x9e    and a1,s0,t4
    0x84016f8c     0xa2    and s0,s0,t1
    0x84016f90     0xa6    beqz s0,ffffffff84016f96 <fastpath_reply_recv+0xac>
    0x84016f92     0xa8    or a1,a1,a7
    0x84016f96     0xac    add a5,a5,a1
    0x84016f98     0xae    ld s0,0(a5)
    0x84016f9a     0xb0    ld a6,8(a5) # fffffffffc000008 <ki_end+0x77fd1008>
    0x84016f9e     0xb4    add a3,a3,a2
    0x84016fa0     0xb6    add a4,a4,a3
    0x84016fa2     0xb8    bgeu t5,a4,ffffffff84017042 <fastpath_reply_recv+0x158>
    0x84016fa6     0xbc    li a5,64
    0x84016faa     0xc0    bltu a5,a4,ffffffff8401704c <fastpath_reply_recv+0x162>
    0x84016fae     0xc4    srli a5,s0,0x3b
    0x84016fb2     0xc8    li a4,4
    0x84016fb4     0xca    bne a5,a4,ffffffff8401704c <fastpath_reply_recv+0x162>
    0x84016fb8     0xce    srli a5,s0,0x38
    0x84016fbc     0xd2    andi a5,a5,1
    0x84016fbe     0xd4    beqz a5,ffffffff8401704c <fastpath_reply_recv+0x162>
    0x84016fc0     0xd6    ld a5,304(s2)
    0x84016fc4     0xda    bnez a5,ffffffff84017052 <fastpath_reply_recv+0x168>
    0x84016fc6     0xdc    slli s9,s0,0x19
    0x84016fca     0xe0    srli s9,s9,0x19
    0x84016fce     0xe4    srli a5,s0,0x26
    0x84016fd2     0xe8    andi a5,a5,1
    0x84016fd4     0xea    beqz a5,ffffffff84016fde <fastpath_reply_recv+0xf4>
    0x84016fd6     0xec    li a5,-1
    0x84016fd8     0xee    slli a5,a5,0x27
    0x84016fda     0xf0    or s9,s9,a5
    0x84016fde     0xf4    mv s8,s9
    0x84016fe0     0xf6    ld a5,0(s9)
    0x84016fe4     0xfa    andi a5,a5,3
    0x84016fe6     0xfc    li a4,1
    0x84016fe8     0xfe    beq a5,a4,ffffffff84017062 <fastpath_reply_recv+0x178>
    0x84016fec    0x102    addi s7,s3,96
    0x84016ff0    0x106    ld s5,8(s7)
    0x84016ff4    0x10a    ld a5,96(s3)
    0x84016ff8    0x10e    srli a5,a5,0x3b
    0x84016ffa    0x110    li a4,8
    0x84016ffc    0x112    bne a5,a4,ffffffff84017068 <fastpath_reply_recv+0x17e>
    0x84017000    0x116    ld a5,312(s5)
    0x84017004    0x11a    andi a5,a5,15
    0x84017006    0x11c    bnez a5,ffffffff8401706e <fastpath_reply_recv+0x184>
    0x84017008    0x11e    andi a5,s5,-1024
    0x8401700c    0x122    ld a4,32(a5)
    0x8401700e    0x124    ld s6,40(a5)
    0x84017012    0x128    srli a5,s6,0x9
    0x84017016    0x12c    slli s4,a5,0x19
    0x8401701a    0x130    srli s4,s4,0x19
    0x8401701e    0x134    srli a5,a5,0x26
    0x84017020    0x136    andi a5,a5,1
    0x84017022    0x138    beqz a5,ffffffff8401702c <fastpath_reply_recv+0x142>
    0x84017024    0x13a    li a5,-1
    0x84017026    0x13c    slli a5,a5,0x27
    0x84017028    0x13e    or s4,s4,a5
    0x8401702c    0x142    srli a5,a4,0x3b
    0x84017030    0x146    li a3,3
    0x84017032    0x148    beq a5,a3,ffffffff84017074 <fastpath_reply_recv+0x18a>
    0x84017036    0x14c    li a0,-2
    0x84017038    0x14e    jal ra,ffffffff84016c02 <slowpath>
    0x8401703c    0x152    li a0,-2
    0x8401703e    0x154    jal ra,ffffffff84016c02 <slowpath>
    0x84017042    0x158    srli a5,s0,0x3b
    0x84017046    0x15c    bne a5,t6,ffffffff84016fae <fastpath_reply_recv+0xc4>
    0x8401704a    0x160    j ffffffff84016f56 <fastpath_reply_recv+0x6c>
    0x8401704c    0x162    li a0,-2
    0x8401704e    0x164    jal ra,ffffffff84016c02 <slowpath>
    0x84017052    0x168    ld a5,0(a5)
    0x84017054    0x16a    andi a5,a5,3
    0x84017056    0x16c    li a4,2
    0x84017058    0x16e    bne a5,a4,ffffffff84016fc6 <fastpath_reply_recv+0xdc>
    0x8401705c    0x172    li a0,-2
    0x8401705e    0x174    jal ra,ffffffff84016c02 <slowpath>
    0x84017062    0x178    li a0,-2
    0x84017064    0x17a    jal ra,ffffffff84016c02 <slowpath>
    0x84017068    0x17e    li a0,-2
    0x8401706a    0x180    jal ra,ffffffff84016c02 <slowpath>
    0x8401706e    0x184    li a0,-2
    0x84017070    0x186    jal ra,ffffffff84016c02 <slowpath>
    0x84017074    0x18a    srli a4,a4,0x27
    0x84017076    0x18c    andi a4,a4,1
    0x84017078    0x18e    beqz a4,ffffffff84017036 <fastpath_reply_recv+0x14c>
    0x8401707a    0x190    srli s6,s6,0x30
    0x8401707e    0x194    auipc s10,0x13
    0x84017082    0x198    ld s10,1946(s10) # ffffffff8402a818 <ksCurDomain>
    0x84017086    0x19c    ld a1,360(s5)
    0x8401708a    0x1a0    mv a0,s10
    0x8401708c    0x1a2    jal ra,ffffffff840102c6 <isHighestPrio>
    0x84017090    0x1a6    beqz a0,ffffffff840170e0 <fastpath_reply_recv+0x1f6>
    0x84017092    0x1a8    ld a5,344(s5)
    0x84017096    0x1ac    bne a5,s10,ffffffff840170e6 <fastpath_reply_recv+0x1fc>
    0x8401709a    0x1b0    ori s9,s9,3
    0x8401709e    0x1b4    sd s9,280(s2)
    0x840170a2    0x1b8    srli s0,s0,0x36
    0x840170a4    0x1ba    andi s0,s0,8
    0x840170a6    0x1bc    ld a5,288(s2)
    0x840170aa    0x1c0    andi a5,a5,-9
    0x840170ac    0x1c2    or s0,s0,a5
    0x840170ae    0x1c4    sd s0,288(s2)
    0x840170b2    0x1c8    ld a4,0(s8)
    0x840170b6    0x1cc    lui a5,0xf8000
    0x840170ba    0x1d0    srli a5,a5,0x19
    0x840170bc    0x1d2    and a5,a5,a4
    0x840170be    0x1d4    srli a4,a4,0x26
    0x840170c0    0x1d6    andi a4,a4,1
    0x840170c2    0x1d8    beqz a4,ffffffff840170ec <fastpath_reply_recv+0x202>
    0x840170c4    0x1da    li a4,-1
    0x840170c6    0x1dc    slli a4,a4,0x27
    0x840170c8    0x1de    or a5,a5,a4
    0x840170ca    0x1e0    sd s2,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x840170ce    0x1e4    sd a5,416(s2)
    0x840170d2    0x1e8    sd zero,408(s2)
    0x840170d6    0x1ec    ori s2,s2,2
    0x840170da    0x1f0    sd s2,0(s8)
    0x840170de    0x1f4    j ffffffff84017102 <fastpath_reply_recv+0x218>
    0x840170e0    0x1f6    li a0,-2
    0x840170e2    0x1f8    jal ra,ffffffff84016c02 <slowpath>
    0x840170e6    0x1fc    li a0,-2
    0x840170e8    0x1fe    jal ra,ffffffff84016c02 <slowpath>
    0x840170ec    0x202    bnez a5,ffffffff840170ca <fastpath_reply_recv+0x1e0>
    0x840170ee    0x204    sd zero,416(s2)
    0x840170f2    0x208    sd zero,408(s2)
    0x840170f6    0x20c    sd s2,8(s8)
    0x840170fa    0x210    ori s2,s2,2
    0x840170fe    0x214    sd s2,0(s8)
    0x84017102    0x218    andi a3,s1,127
    0x84017106    0x21c    ld a5,16(s7)
    0x8401710a    0x220    li a4,3
    0x8401710c    0x222    sd a4,24(a5)
    0x8401710e    0x224    sd zero,96(s3)
    0x84017112    0x228    sd zero,8(s7)
    0x84017116    0x22c    sd zero,16(s7)
    0x8401711a    0x230    sd zero,24(s7)
    0x8401711e    0x234    auipc a2,0x13
    0x84017122    0x238    ld a2,1818(a2) # ffffffff8402a838 <ksCurThread>
    0x84017126    0x23c    beqz a3,ffffffff8401713e <fastpath_reply_recv+0x254>
    0x84017128    0x23e    mv a5,a2
    0x8401712a    0x240    addi a4,s5,88
    0x8401712e    0x244    slli a3,a3,0x3
    0x84017130    0x246    add a2,a2,a3
    0x84017132    0x248    ld a3,88(a5)
    0x84017134    0x24a    sd a3,0(a4)
    0x84017136    0x24c    addi a5,a5,8
    0x84017138    0x24e    addi a4,a4,8
    0x8401713a    0x250    bne a2,a5,ffffffff84017132 <fastpath_reply_recv+0x248>
    0x8401713e    0x254    li a5,1
    0x84017140    0x256    sd a5,280(s5)
    0x84017144    0x25a    slli a5,a5,0x26
    0x84017146    0x25c    add s4,s4,a5
    0x84017148    0x25e    srli s4,s4,0xc
    0x8401714c    0x262    li a5,-1
    0x8401714e    0x264    srli a4,a5,0x14
    0x84017152    0x268    and s4,s4,a4
    0x84017156    0x26c    slli s6,s6,0x2c
    0x84017158    0x26e    or s6,s4,s6
    0x8401715c    0x272    slli a5,a5,0x3f
    0x8401715e    0x274    or s6,s6,a5
    0x84017162    0x278    csrw satp,s6
    0x84017166    0x27c    sfence.vma
    0x8401716a    0x280    auipc a5,0x13
    0x8401716e    0x284    sd s5,1742(a5) # ffffffff8402a838 <ksCurThread>
    0x84017172    0x288    li a0,0
    0x84017174    0x28a    lui a1,0xfffff
    0x84017176    0x28c    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x8401717a    0x290    and a1,a1,s1
    0x8401717c    0x292    mv t0,s5
    0x8401717e    0x294    ld ra,0(t0)
    0x84017182    0x298    ld sp,8(t0)
    0x84017186    0x29c    ld gp,16(t0)
    0x8401718a    0x2a0    ld t2,48(t0)
    0x8401718e    0x2a4    ld s0,56(t0)
    0x84017192    0x2a8    ld s1,64(t0)
    0x84017196    0x2ac    ld a2,88(t0)
    0x8401719a    0x2b0    ld a3,96(t0)
    0x8401719e    0x2b4    ld a4,104(t0)
    0x840171a2    0x2b8    ld a5,112(t0)
    0x840171a6    0x2bc    ld a6,120(t0)
    0x840171aa    0x2c0    ld a7,128(t0)
    0x840171ae    0x2c4    ld s2,136(t0)
    0x840171b2    0x2c8    ld s3,144(t0)
    0x840171b6    0x2cc    ld s4,152(t0)
    0x840171ba    0x2d0    ld s5,160(t0)
    0x840171be    0x2d4    ld s6,168(t0)
    0x840171c2    0x2d8    ld s7,176(t0)
    0x840171c6    0x2dc    ld s8,184(t0)
    0x840171ca    0x2e0    ld s9,192(t0)
    0x840171ce    0x2e4    ld s10,200(t0)
    0x840171d2    0x2e8    ld s11,208(t0)
    0x840171d6    0x2ec    ld t3,216(t0)
    0x840171da    0x2f0    ld t4,224(t0)
    0x840171de    0x2f4    ld t5,232(t0)
    0x840171e2    0x2f8    ld t6,240(t0)
    0x840171e6    0x2fc    ld t1,24(t0)
    0x840171ea    0x300    add tp,t1,zero
    0x840171ee    0x304    ld t1,272(t0)
    0x840171f2    0x308    csrw sepc,t1
    0x840171f6    0x30c    csrw sscratch,t0
    0x840171fa    0x310    ld t1,256(t0)
    0x840171fe    0x314    csrw sstatus,t1
    0x84017202    0x318    ld t1,40(t0)
    0x84017206    0x31c    ld t0,32(t0)
    0x8401720a    0x320    sret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
252 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_reply_recv` has 403 nodes.

Section fastpath_call (168 of 269)
==================================

Deriving specifications
-----------------------

Section `fastpath_call` consists of 227 instructions.

Skipping 18079073 csrw satp,a5

Skipping 12000073 sfence.vma

Skipping 14131073 csrw sepc,t1

Skipping 14029073 csrw sscratch,t0

Skipping 10031073 csrw sstatus,t1

Skipping 10200073 sret


Stack analysis
---------------

10 stack accesses found. Annotated code for `fastpath_call`:

    0x84016c1a      0x0    addi sp,sp,-80
    0x84016c1c      0x2    sd ra,72(sp)          ; stack access
    0x84016c1e      0x4    sd s0,64(sp)          ; stack access
    0x84016c20      0x6    sd s1,56(sp)          ; stack access
    0x84016c22      0x8    sd s2,48(sp)          ; stack access
    0x84016c24      0xa    sd s3,40(sp)          ; stack access
    0x84016c26      0xc    sd s4,32(sp)          ; stack access
    0x84016c28      0xe    sd s5,24(sp)          ; stack access
    0x84016c2a     0x10    sd s6,16(sp)          ; stack access
    0x84016c2c     0x12    sd s7,8(sp)           ; stack access
    0x84016c2e     0x14    sd s8,0(sp)           ; stack access
    0x84016c30     0x16    auipc a6,0x14
    0x84016c34     0x1a    ld a6,-1016(a6) # ffffffff8402a838 <ksCurThread>
    0x84016c38     0x1e    ld a4,312(a6)
    0x84016c3c     0x22    andi a3,a1,511
    0x84016c40     0x26    li a5,4
    0x84016c42     0x28    bltu a5,a3,ffffffff84016d3e <fastpath_call+0x124>
    0x84016c46     0x2c    mv s2,a1
    0x84016c48     0x2e    andi a4,a4,15
    0x84016c4a     0x30    bnez a4,ffffffff84016d3e <fastpath_call+0x124>
    0x84016c4c     0x32    andi a5,a6,-1024
    0x84016c50     0x36    ld s0,0(a5)
    0x84016c52     0x38    ld s3,8(a5)
    0x84016c56     0x3c    srli a3,s0,0x3b
    0x84016c5a     0x40    li a5,10
    0x84016c5c     0x42    bne a3,a5,ffffffff84016d4e <fastpath_call+0x134>
    0x84016c60     0x46    li t4,64
    0x84016c64     0x4a    lui a5,0xfc000
    0x84016c68     0x4e    srli t3,a5,0x19
    0x84016c6c     0x52    li a5,1
    0x84016c6e     0x54    slli t1,a5,0x26
    0x84016c72     0x58    li a5,-1
    0x84016c74     0x5a    slli a7,a5,0x27
    0x84016c78     0x5e    li t5,63
    0x84016c7c     0x62    li t6,10
    0x84016c7e     0x64    srli a3,s0,0x35
    0x84016c82     0x68    andi a3,a3,63
    0x84016c86     0x6c    srli a2,s0,0x2f
    0x84016c8a     0x70    andi a2,a2,63
    0x84016c8e     0x74    sll a5,a0,a4
    0x84016c92     0x78    beqz a3,ffffffff84016ca0 <fastpath_call+0x86>
    0x84016c94     0x7a    subw a1,t4,a3
    0x84016c98     0x7e    srl a1,a5,a1
    0x84016c9c     0x82    bne s3,a1,ffffffff84016d4e <fastpath_call+0x134>
    0x84016ca0     0x86    sll a5,a5,a3
    0x84016ca4     0x8a    subw a1,t4,a2
    0x84016ca8     0x8e    srl a5,a5,a1
    0x84016cac     0x92    slli a5,a5,0x5
    0x84016cae     0x94    slli s0,s0,0x1
    0x84016cb0     0x96    and a1,s0,t3
    0x84016cb4     0x9a    and s0,s0,t1
    0x84016cb8     0x9e    beqz s0,ffffffff84016cbe <fastpath_call+0xa4>
    0x84016cba     0xa0    or a1,a1,a7
    0x84016cbe     0xa4    add a5,a5,a1
    0x84016cc0     0xa6    ld s0,0(a5)
    0x84016cc2     0xa8    ld s3,8(a5) # fffffffffc000008 <ki_end+0x77fd1008>
    0x84016cc6     0xac    add a3,a3,a2
    0x84016cc8     0xae    add a4,a4,a3
    0x84016cca     0xb0    bgeu t5,a4,ffffffff84016d44 <fastpath_call+0x12a>
    0x84016cce     0xb4    li a5,64
    0x84016cd2     0xb8    bltu a5,a4,ffffffff84016d4e <fastpath_call+0x134>
    0x84016cd6     0xbc    srli a5,s0,0x3b
    0x84016cda     0xc0    li a4,4
    0x84016cdc     0xc2    bne a5,a4,ffffffff84016d4e <fastpath_call+0x134>
    0x84016ce0     0xc6    srli a5,s0,0x37
    0x84016ce4     0xca    andi a5,a5,1
    0x84016ce6     0xcc    beqz a5,ffffffff84016d4e <fastpath_call+0x134>
    0x84016ce8     0xce    slli a5,s0,0x19
    0x84016cec     0xd2    srli a5,a5,0x19
    0x84016cee     0xd4    srli a4,s0,0x26
    0x84016cf2     0xd8    andi a4,a4,1
    0x84016cf4     0xda    beqz a4,ffffffff84016cfc <fastpath_call+0xe2>
    0x84016cf6     0xdc    li a4,-1
    0x84016cf8     0xde    slli a4,a4,0x27
    0x84016cfa     0xe0    or a5,a5,a4
    0x84016cfc     0xe2    mv s6,a5
    0x84016cfe     0xe4    ld s4,8(a5)
    0x84016d02     0xe8    ld a5,0(a5)
    0x84016d04     0xea    andi a5,a5,3
    0x84016d06     0xec    li a4,2
    0x84016d08     0xee    bne a5,a4,ffffffff84016d54 <fastpath_call+0x13a>
    0x84016d0c     0xf2    andi s7,s4,-1024
    0x84016d10     0xf6    ld a3,32(s7)
    0x84016d14     0xfa    ld s5,40(s7)
    0x84016d18     0xfe    srli a4,s5,0x9
    0x84016d1c    0x102    slli s1,a4,0x19
    0x84016d20    0x106    srli s1,s1,0x19
    0x84016d22    0x108    srli a4,a4,0x26
    0x84016d24    0x10a    andi a4,a4,1
    0x84016d26    0x10c    beqz a4,ffffffff84016d2e <fastpath_call+0x114>
    0x84016d28    0x10e    li a4,-1
    0x84016d2a    0x110    slli a4,a4,0x27
    0x84016d2c    0x112    or s1,s1,a4
    0x84016d2e    0x114    srli a4,a3,0x3b
    0x84016d32    0x118    li a5,3
    0x84016d34    0x11a    beq a4,a5,ffffffff84016d5a <fastpath_call+0x140>
    0x84016d38    0x11e    li a0,-1
    0x84016d3a    0x120    jal ra,ffffffff84016c02 <slowpath>
    0x84016d3e    0x124    li a0,-1
    0x84016d40    0x126    jal ra,ffffffff84016c02 <slowpath>
    0x84016d44    0x12a    srli a5,s0,0x3b
    0x84016d48    0x12e    bne a5,t6,ffffffff84016cd6 <fastpath_call+0xbc>
    0x84016d4c    0x132    j ffffffff84016c7e <fastpath_call+0x64>
    0x84016d4e    0x134    li a0,-1
    0x84016d50    0x136    jal ra,ffffffff84016c02 <slowpath>
    0x84016d54    0x13a    li a0,-1
    0x84016d56    0x13c    jal ra,ffffffff84016c02 <slowpath>
    0x84016d5a    0x140    srli a3,a3,0x27
    0x84016d5c    0x142    andi a3,a3,1
    0x84016d5e    0x144    beqz a3,ffffffff84016d38 <fastpath_call+0x11e>
    0x84016d60    0x146    srli s5,s5,0x30
    0x84016d64    0x14a    auipc s8,0x14
    0x84016d68    0x14e    ld s8,-1356(s8) # ffffffff8402a818 <ksCurDomain>
    0x84016d6c    0x152    ld a1,360(s4)
    0x84016d70    0x156    ld a5,360(a6)
    0x84016d74    0x15a    bltu a1,a5,ffffffff84016ec8 <fastpath_call+0x2ae>
    0x84016d78    0x15e    srli a5,s0,0x39
    0x84016d7c    0x162    srli s0,s0,0x3a
    0x84016d7e    0x164    or s0,s0,a5
    0x84016d80    0x166    andi s0,s0,1
    0x84016d82    0x168    beqz s0,ffffffff84016ed8 <fastpath_call+0x2be>
    0x84016d86    0x16c    ld a5,344(s4)
    0x84016d8a    0x170    bne a5,s8,ffffffff84016ede <fastpath_call+0x2c4>
    0x84016d8e    0x174    ld a5,408(s4)
    0x84016d92    0x178    sd a5,8(s6)
    0x84016d96    0x17c    ld a5,408(s4)
    0x84016d9a    0x180    bnez a5,ffffffff84016ee4 <fastpath_call+0x2ca>
    0x84016d9e    0x184    sd zero,0(s6)
    0x84016da2    0x188    andi a1,s2,127
    0x84016da6    0x18c    auipc a0,0x14
    0x84016daa    0x190    addi a0,a0,-1390 # ffffffff8402a838 <ksCurThread>
    0x84016dae    0x194    ld a2,0(a0)
    0x84016db0    0x196    li a5,5
    0x84016db2    0x198    sd a5,280(a2)
    0x84016db6    0x19c    andi a3,a2,-1024
    0x84016dba    0x1a0    addi a3,a3,64
    0x84016dbe    0x1a4    addi a4,s7,96
    0x84016dc2    0x1a8    ld a5,288(s4)
    0x84016dc6    0x1ac    sd a2,104(s7)
    0x84016dca    0x1b0    srli a5,a5,0x2
    0x84016dcc    0x1b2    andi a5,a5,2
    0x84016dce    0x1b4    li a2,1
    0x84016dd0    0x1b6    slli a2,a2,0x3e
    0x84016dd2    0x1b8    or a5,a5,a2
    0x84016dd4    0x1ba    sd a5,96(s7)
    0x84016dd8    0x1be    sd a3,112(s7)
    0x84016ddc    0x1c2    ori a4,a4,3
    0x84016de0    0x1c6    sd a4,24(a3)
    0x84016de2    0x1c8    ld a2,0(a0)
    0x84016de4    0x1ca    beqz a1,ffffffff84016dfc <fastpath_call+0x1e2>
    0x84016de6    0x1cc    mv a5,a2
    0x84016de8    0x1ce    addi a4,s4,88
    0x84016dec    0x1d2    slli a1,a1,0x3
    0x84016dee    0x1d4    add a2,a2,a1
    0x84016df0    0x1d6    ld a3,88(a5)
    0x84016df2    0x1d8    sd a3,0(a4)
    0x84016df4    0x1da    addi a5,a5,8
    0x84016df6    0x1dc    addi a4,a4,8
    0x84016df8    0x1de    bne a5,a2,ffffffff84016df0 <fastpath_call+0x1d6>
    0x84016dfc    0x1e2    li a5,1
    0x84016dfe    0x1e4    sd a5,280(s4)
    0x84016e02    0x1e8    slli a5,a5,0x26
    0x84016e04    0x1ea    add a5,a5,s1
    0x84016e06    0x1ec    srli a5,a5,0xc
    0x84016e08    0x1ee    li a4,-1
    0x84016e0a    0x1f0    srli s1,a4,0x14
    0x84016e0e    0x1f4    and a5,a5,s1
    0x84016e10    0x1f6    slli s5,s5,0x2c
    0x84016e12    0x1f8    or a5,a5,s5
    0x84016e16    0x1fc    slli a4,a4,0x3f
    0x84016e18    0x1fe    or a5,a5,a4
    0x84016e1a    0x200    csrw satp,a5
    0x84016e1e    0x204    sfence.vma
    0x84016e22    0x208    auipc a5,0x14
    0x84016e26    0x20c    sd s4,-1514(a5) # ffffffff8402a838 <ksCurThread>
    0x84016e2a    0x210    mv a0,s3
    0x84016e2c    0x212    lui a1,0xfffff
    0x84016e2e    0x214    addi a1,a1,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84016e32    0x218    and a1,s2,a1
    0x84016e36    0x21c    mv t0,s4
    0x84016e38    0x21e    ld ra,0(t0)
    0x84016e3c    0x222    ld sp,8(t0)
    0x84016e40    0x226    ld gp,16(t0)
    0x84016e44    0x22a    ld t2,48(t0)
    0x84016e48    0x22e    ld s0,56(t0)
    0x84016e4c    0x232    ld s1,64(t0)
    0x84016e50    0x236    ld a2,88(t0)
    0x84016e54    0x23a    ld a3,96(t0)
    0x84016e58    0x23e    ld a4,104(t0)
    0x84016e5c    0x242    ld a5,112(t0)
    0x84016e60    0x246    ld a6,120(t0)
    0x84016e64    0x24a    ld a7,128(t0)
    0x84016e68    0x24e    ld s2,136(t0)
    0x84016e6c    0x252    ld s3,144(t0)
    0x84016e70    0x256    ld s4,152(t0)
    0x84016e74    0x25a    ld s5,160(t0)
    0x84016e78    0x25e    ld s6,168(t0)
    0x84016e7c    0x262    ld s7,176(t0)
    0x84016e80    0x266    ld s8,184(t0)
    0x84016e84    0x26a    ld s9,192(t0)
    0x84016e88    0x26e    ld s10,200(t0)
    0x84016e8c    0x272    ld s11,208(t0)
    0x84016e90    0x276    ld t3,216(t0)
    0x84016e94    0x27a    ld t4,224(t0)
    0x84016e98    0x27e    ld t5,232(t0)
    0x84016e9c    0x282    ld t6,240(t0)
    0x84016ea0    0x286    ld t1,24(t0)
    0x84016ea4    0x28a    add tp,t1,zero
    0x84016ea8    0x28e    ld t1,272(t0)
    0x84016eac    0x292    csrw sepc,t1
    0x84016eb0    0x296    csrw sscratch,t0
    0x84016eb4    0x29a    ld t1,256(t0)
    0x84016eb8    0x29e    csrw sstatus,t1
    0x84016ebc    0x2a2    ld t1,40(t0)
    0x84016ec0    0x2a6    ld t0,32(t0)
    0x84016ec4    0x2aa    sret
    0x84016ec8    0x2ae    mv a0,s8
    0x84016eca    0x2b0    jal ra,ffffffff840102c6 <isHighestPrio>
    0x84016ece    0x2b4    bnez a0,ffffffff84016d78 <fastpath_call+0x15e>
    0x84016ed2    0x2b8    li a0,-1
    0x84016ed4    0x2ba    jal ra,ffffffff84016c02 <slowpath>
    0x84016ed8    0x2be    li a0,-1
    0x84016eda    0x2c0    jal ra,ffffffff84016c02 <slowpath>
    0x84016ede    0x2c4    li a0,-1
    0x84016ee0    0x2c6    jal ra,ffffffff84016c02 <slowpath>
    0x84016ee4    0x2ca    sd zero,416(a5)
    0x84016ee8    0x2ce    j ffffffff84016da2 <fastpath_call+0x188>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
227 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `fastpath_call` has 359 nodes.

Section performPageTableInvocationUnmap (169 of 269)
====================================================

Deriving specifications
-----------------------

Section `performPageTableInvocationUnmap` consists of 47 instructions.


Stack analysis
---------------

7 stack accesses found. Annotated code for `performPageTableInvocationUnmap`:

    0x84015a52     0x0    addi sp,sp,-48
    0x84015a54     0x2    sd ra,40(sp)          ; stack access
    0x84015a56     0x4    sd s0,32(sp)          ; stack access
    0x84015a58     0x6    sd s1,24(sp)          ; stack access
    0x84015a5a     0x8    sd a1,8(sp)           ; stack access
    0x84015a5c     0xa    mv s0,a2
    0x84015a5e     0xc    srli a4,a0,0x27
    0x84015a62    0x10    andi a4,a4,1
    0x84015a64    0x12    beqz a4,ffffffff84015aa6 <performPageTableInvocationUnmap+0x54>
    0x84015a66    0x14    mv a5,a0
    0x84015a68    0x16    mv a3,a1
    0x84015a6a    0x18    srli a4,a1,0x9
    0x84015a6e    0x1c    slli a0,a4,0x19
    0x84015a72    0x20    srli a0,a0,0x19
    0x84015a74    0x22    srli a4,a4,0x26
    0x84015a76    0x24    andi a4,a4,1
    0x84015a78    0x26    beqz a4,ffffffff84015a80 <performPageTableInvocationUnmap+0x2e>
    0x84015a7a    0x28    li a4,-1
    0x84015a7c    0x2a    slli a4,a4,0x27
    0x84015a7e    0x2c    or a0,a0,a4
    0x84015a80    0x2e    mv s1,a0
    0x84015a82    0x30    srli a0,a3,0x30
    0x84015a86    0x34    slli a1,a5,0x19
    0x84015a8a    0x38    srli a1,a1,0x19
    0x84015a8c    0x3a    srli a5,a5,0x26
    0x84015a8e    0x3c    andi a5,a5,1
    0x84015a90    0x3e    beqz a5,ffffffff84015a98 <performPageTableInvocationUnmap+0x46>
    0x84015a92    0x40    li a5,-1
    0x84015a94    0x42    slli a5,a5,0x27
    0x84015a96    0x44    or a1,a1,a5
    0x84015a98    0x46    mv a2,s1
    0x84015a9a    0x48    jal ra,ffffffff84010a66 <unmapPageTable>
    0x84015a9e    0x4c    lui a1,0x1
    0x84015aa0    0x4e    mv a0,s1
    0x84015aa2    0x50    jal ra,ffffffff84015a40 <memzero>
    0x84015aa6    0x54    ld a4,0(s0)
    0x84015aa8    0x56    li a5,-1
    0x84015aaa    0x58    slli a5,a5,0x27
    0x84015aac    0x5a    addi a5,a5,-1
    0x84015aae    0x5c    and a5,a5,a4
    0x84015ab0    0x5e    sd a5,0(s0)
    0x84015ab2    0x60    li a0,0
    0x84015ab4    0x62    ld ra,40(sp)          ; stack access
    0x84015ab6    0x64    ld s0,32(sp)          ; stack access
    0x84015ab8    0x66    ld s1,24(sp)          ; stack access
    0x84015aba    0x68    addi sp,sp,48
    0x84015abc    0x6a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `performPageTableInvocationUnmap` has 65 nodes.

Section replyFromKernel_error (170 of 269)
==========================================

Deriving specifications
-----------------------

Section `replyFromKernel_error` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `replyFromKernel_error`:

    0x84015962     0x0    addi sp,sp,-16
    0x84015964     0x2    sd ra,8(sp)           ; stack access
    0x84015966     0x4    sd s0,0(sp)           ; stack access
    0x84015968     0x6    mv s0,a0
    0x8401596a     0x8    mv a1,a0
    0x8401596c     0xa    li a0,1
    0x8401596e     0xc    jal ra,ffffffff840107a2 <lookupIPCBuffer>
    0x84015972    0x10    mv a1,a0
    0x84015974    0x12    sd zero,72(s0)
    0x84015978    0x16    mv a0,s0
    0x8401597a    0x18    jal ra,ffffffff840158a4 <setMRs_syscall_error>
    0x8401597e    0x1c    auipc a5,0x3
    0x84015982    0x20    ld a5,-686(a5) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015986    0x24    slli a5,a5,0xc
    0x84015988    0x26    andi a0,a0,127
    0x8401598c    0x2a    or a5,a5,a0
    0x8401598e    0x2c    sd a5,80(s0)
    0x84015990    0x2e    ld ra,8(sp)           ; stack access
    0x84015992    0x30    ld s0,0(sp)           ; stack access
    0x84015994    0x32    addi sp,sp,16
    0x84015996    0x34    ret

Proving inst theorems
---------------------

21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `replyFromKernel_error` has 31 nodes.

Section setMRs_syscall_error (171 of 269)
=========================================

Deriving specifications
-----------------------

Section `setMRs_syscall_error` consists of 66 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_syscall_error`:

    0x840158a4     0x0    mv a5,a0
    0x840158a6     0x2    auipc a0,0x3
    0x840158aa     0x6    ld a0,-470(a0) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840158ae     0xa    li a4,4
    0x840158b0     0xc    beq a0,a4,ffffffff8401593e <setMRs_syscall_error+0x9a>
    0x840158b4    0x10    addi sp,sp,-16
    0x840158b6    0x12    sd ra,8(sp)           ; stack access
    0x840158b8    0x14    bgeu a4,a0,ffffffff840158f6 <setMRs_syscall_error+0x52>
    0x840158bc    0x18    li a4,9
    0x840158be    0x1a    bltu a4,a0,ffffffff8401591c <setMRs_syscall_error+0x78>
    0x840158c2    0x1e    li a4,6
    0x840158c4    0x20    bltu a4,a0,ffffffff8401595a <setMRs_syscall_error+0xb6>
    0x840158c8    0x24    li a4,5
    0x840158ca    0x26    beq a0,a4,ffffffff8401595e <setMRs_syscall_error+0xba>
    0x840158ce    0x2a    auipc a3,0x2
    0x840158d2    0x2e    addi a3,a3,1842 # ffffffff84018000 <riscvKSASIDTable>
    0x840158d6    0x32    ld a4,1736(a3)
    0x840158da    0x36    snez a4,a4
    0x840158de    0x3a    sd a4,88(a5)
    0x840158e0    0x3c    li a4,1
    0x840158e2    0x3e    ld a2,1024(a3)
    0x840158e6    0x42    ld a3,1032(a3)
    0x840158ea    0x46    mv a0,a5
    0x840158ec    0x48    jal ra,ffffffff840103e6 <setMRs_lookup_failure>
    0x840158f0    0x4c    slli a0,a0,0x20
    0x840158f2    0x4e    srli a0,a0,0x20
    0x840158f4    0x50    j ffffffff84015904 <setMRs_syscall_error+0x60>
    0x840158f6    0x52    li a4,2
    0x840158f8    0x54    beq a0,a4,ffffffff84015930 <setMRs_syscall_error+0x8c>
    0x840158fc    0x58    li a4,3
    0x840158fe    0x5a    bne a0,a4,ffffffff8401590a <setMRs_syscall_error+0x66>
    0x84015902    0x5e    li a0,0
    0x84015904    0x60    ld ra,8(sp)           ; stack access
    0x84015906    0x62    addi sp,sp,16
    0x84015908    0x64    ret
    0x8401590a    0x66    li a4,1
    0x8401590c    0x68    bne a0,a4,ffffffff84015956 <setMRs_syscall_error+0xb2>
    0x84015910    0x6c    auipc a4,0x3
    0x84015914    0x70    ld a4,-624(a4) # ffffffff840186a0 <current_syscall_error>
    0x84015918    0x74    sd a4,88(a5)
    0x8401591a    0x76    j ffffffff84015904 <setMRs_syscall_error+0x60>
    0x8401591c    0x78    li a4,10
    0x8401591e    0x7a    bne a0,a4,ffffffff84015956 <setMRs_syscall_error+0xb2>
    0x84015922    0x7e    auipc a4,0x3
    0x84015926    0x82    ld a4,-610(a4) # ffffffff840186c0 <current_syscall_error+0x20>
    0x8401592a    0x86    sd a4,88(a5)
    0x8401592c    0x88    li a0,1
    0x8401592e    0x8a    j ffffffff84015904 <setMRs_syscall_error+0x60>
    0x84015930    0x8c    auipc a4,0x3
    0x84015934    0x90    ld a4,-648(a4) # ffffffff840186a8 <current_syscall_error+0x8>
    0x84015938    0x94    sd a4,88(a5)
    0x8401593a    0x96    li a0,1
    0x8401593c    0x98    j ffffffff84015904 <setMRs_syscall_error+0x60>
    0x8401593e    0x9a    auipc a4,0x2
    0x84015942    0x9e    addi a4,a4,1730 # ffffffff84018000 <riscvKSASIDTable>
    0x84015946    0xa2    ld a3,1712(a4)
    0x8401594a    0xa6    sd a3,88(a5)
    0x8401594c    0xa8    ld a4,1720(a4)
    0x84015950    0xac    sd a4,96(a5)
    0x84015952    0xae    li a0,2
    0x84015954    0xb0    ret
    0x84015956    0xb2    jal ra,ffffffff840103da <halt>
    0x8401595a    0xb6    li a0,0
    0x8401595c    0xb8    j ffffffff84015904 <setMRs_syscall_error+0x60>
    0x8401595e    0xba    li a0,0
    0x84015960    0xbc    j ffffffff84015904 <setMRs_syscall_error+0x60>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_syscall_error` has 105 nodes.

Section decodeUnbindNotification (172 of 269)
=============================================

Deriving specifications
-----------------------

Section `decodeUnbindNotification` consists of 31 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeUnbindNotification`:

    0x840156a0     0x0    addi sp,sp,-32
    0x840156a2     0x2    sd ra,24(sp)          ; stack access
    0x840156a4     0x4    sd s0,16(sp)          ; stack access
    0x840156a6     0x6    sd a0,0(sp)           ; stack access
    0x840156a8     0x8    sd a1,8(sp)           ; stack access
    0x840156aa     0xa    slli s0,a0,0x19
    0x840156ae     0xe    srli s0,s0,0x19
    0x840156b0    0x10    srli a0,a0,0x26
    0x840156b2    0x12    andi a0,a0,1
    0x840156b4    0x14    beqz a0,ffffffff840156bc <decodeUnbindNotification+0x1c>
    0x840156b6    0x16    li a5,-1
    0x840156b8    0x18    slli a5,a5,0x27
    0x840156ba    0x1a    or s0,s0,a5
    0x840156bc    0x1c    ld a5,304(s0)
    0x840156c0    0x20    beqz a5,ffffffff840156e0 <decodeUnbindNotification+0x40>
    0x840156c2    0x22    li a1,2
    0x840156c4    0x24    auipc a0,0x15
    0x840156c8    0x28    ld a0,372(a0) # ffffffff8402a838 <ksCurThread>
    0x840156cc    0x2c    jal ra,ffffffff840125f6 <setThreadState>
    0x840156d0    0x30    li a1,0
    0x840156d2    0x32    mv a0,s0
    0x840156d4    0x34    jal ra,ffffffff840155bc <invokeTCB_NotificationControl>
    0x840156d8    0x38    ld ra,24(sp)          ; stack access
    0x840156da    0x3a    ld s0,16(sp)          ; stack access
    0x840156dc    0x3c    addi sp,sp,32
    0x840156de    0x3e    ret
    0x840156e0    0x40    li a5,3
    0x840156e2    0x42    auipc a4,0x3
    0x840156e6    0x46    sd a5,-18(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840156ea    0x4a    li a0,3
    0x840156ec    0x4c    j ffffffff840156d8 <decodeUnbindNotification+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
31 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUnbindNotification` has 47 nodes.

Section decodeBindNotification (173 of 269)
===========================================

Deriving specifications
-----------------------

Section `decodeBindNotification` consists of 80 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeBindNotification`:

    0x840155d4     0x0    addi sp,sp,-48
    0x840155d6     0x2    sd ra,40(sp)          ; stack access
    0x840155d8     0x4    sd s0,32(sp)          ; stack access
    0x840155da     0x6    sd s1,24(sp)          ; stack access
    0x840155dc     0x8    sd a0,0(sp)           ; stack access
    0x840155de     0xa    sd a1,8(sp)           ; stack access
    0x840155e0     0xc    auipc a3,0x3
    0x840155e4    0x10    ld a3,688(a3) # ffffffff84018890 <current_extra_caps>
    0x840155e8    0x14    beqz a3,ffffffff84015642 <decodeBindNotification+0x6e>
    0x840155ea    0x16    ld a5,0(sp)           ; stack access
    0x840155ec    0x18    slli a4,a5,0x19
    0x840155f0    0x1c    srli a4,a4,0x19
    0x840155f2    0x1e    srli a5,a5,0x26
    0x840155f4    0x20    andi a5,a5,1
    0x840155f6    0x22    beqz a5,ffffffff840155fe <decodeBindNotification+0x2a>
    0x840155f8    0x24    li a5,-1
    0x840155fa    0x26    slli a5,a5,0x27
    0x840155fc    0x28    or a4,a4,a5
    0x840155fe    0x2a    mv s0,a4
    0x84015600    0x2c    ld a5,304(a4)
    0x84015604    0x30    bnez a5,ffffffff84015650 <decodeBindNotification+0x7c>
    0x84015606    0x32    ld a5,0(a3)
    0x84015608    0x34    srli a3,a5,0x3b
    0x8401560c    0x38    li a4,6
    0x8401560e    0x3a    bne a3,a4,ffffffff84015666 <decodeBindNotification+0x92>
    0x84015612    0x3e    slli a4,a5,0x19
    0x84015616    0x42    srli a4,a4,0x19
    0x84015618    0x44    srli a3,a5,0x26
    0x8401561c    0x48    andi a3,a3,1
    0x8401561e    0x4a    beqz a3,ffffffff84015626 <decodeBindNotification+0x52>
    0x84015620    0x4c    li a3,-1
    0x84015622    0x4e    slli a3,a3,0x27
    0x84015624    0x50    or a4,a4,a3
    0x84015626    0x52    mv s1,a4
    0x84015628    0x54    srli a5,a5,0x3a
    0x8401562a    0x56    andi a5,a5,1
    0x8401562c    0x58    beqz a5,ffffffff84015674 <decodeBindNotification+0xa0>
    0x8401562e    0x5a    ld a5,8(a4)
    0x84015630    0x5c    slli a5,a5,0x19
    0x84015632    0x5e    beqz a5,ffffffff84015682 <decodeBindNotification+0xae>
    0x84015634    0x60    li a5,3
    0x84015636    0x62    auipc a4,0x3
    0x8401563a    0x66    sd a5,154(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401563e    0x6a    li a0,3
    0x84015640    0x6c    j ffffffff8401565c <decodeBindNotification+0x88>
    0x84015642    0x6e    li a5,7
    0x84015644    0x70    auipc a4,0x3
    0x84015648    0x74    sd a5,140(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401564c    0x78    li a0,3
    0x8401564e    0x7a    j ffffffff8401565c <decodeBindNotification+0x88>
    0x84015650    0x7c    li a5,3
    0x84015652    0x7e    auipc a4,0x3
    0x84015656    0x82    sd a5,126(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401565a    0x86    li a0,3
    0x8401565c    0x88    ld ra,40(sp)          ; stack access
    0x8401565e    0x8a    ld s0,32(sp)          ; stack access
    0x84015660    0x8c    ld s1,24(sp)          ; stack access
    0x84015662    0x8e    addi sp,sp,48
    0x84015664    0x90    ret
    0x84015666    0x92    li a5,3
    0x84015668    0x94    auipc a4,0x3
    0x8401566c    0x98    sd a5,104(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015670    0x9c    li a0,3
    0x84015672    0x9e    j ffffffff8401565c <decodeBindNotification+0x88>
    0x84015674    0xa0    li a5,3
    0x84015676    0xa2    auipc a4,0x3
    0x8401567a    0xa6    sd a5,90(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401567e    0xaa    li a0,3
    0x84015680    0xac    j ffffffff8401565c <decodeBindNotification+0x88>
    0x84015682    0xae    ld a5,24(a4)
    0x84015684    0xb0    slli a5,a5,0x19
    0x84015686    0xb2    bnez a5,ffffffff84015634 <decodeBindNotification+0x60>
    0x84015688    0xb4    li a1,2
    0x8401568a    0xb6    auipc a0,0x15
    0x8401568e    0xba    ld a0,430(a0) # ffffffff8402a838 <ksCurThread>
    0x84015692    0xbe    jal ra,ffffffff840125f6 <setThreadState>
    0x84015696    0xc2    mv a1,s1
    0x84015698    0xc4    mv a0,s0
    0x8401569a    0xc6    jal ra,ffffffff840155bc <invokeTCB_NotificationControl>
    0x8401569e    0xca    j ffffffff8401565c <decodeBindNotification+0x88>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeBindNotification` has 119 nodes.

Section invokeTCB_NotificationControl (174 of 269)
==================================================

Deriving specifications
-----------------------

Section `invokeTCB_NotificationControl` consists of 10 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `invokeTCB_NotificationControl`:

    0x840155bc     0x0    addi sp,sp,-16
    0x840155be     0x2    sd ra,8(sp)           ; stack access
    0x840155c0     0x4    beqz a1,ffffffff840155ce <invokeTCB_NotificationControl+0x12>
    0x840155c2     0x6    jal ra,ffffffff84011c0a <bindNotification>
    0x840155c6     0xa    li a0,0
    0x840155c8     0xc    ld ra,8(sp)           ; stack access
    0x840155ca     0xe    addi sp,sp,16
    0x840155cc    0x10    ret
    0x840155ce    0x12    jal ra,ffffffff84011bf6 <unbindNotification>
    0x840155d2    0x16    j ffffffff840155c6 <invokeTCB_NotificationControl+0xa>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_NotificationControl` has 17 nodes.

Section decodeWriteRegisters (175 of 269)
=========================================

Deriving specifications
-----------------------

Section `decodeWriteRegisters` consists of 57 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeWriteRegisters`:

    0x84015528     0x0    addi sp,sp,-64
    0x8401552a     0x2    sd ra,56(sp)          ; stack access
    0x8401552c     0x4    sd s0,48(sp)          ; stack access
    0x8401552e     0x6    sd s1,40(sp)          ; stack access
    0x84015530     0x8    sd s2,32(sp)          ; stack access
    0x84015532     0xa    sd s3,24(sp)          ; stack access
    0x84015534     0xc    sd a0,0(sp)           ; stack access
    0x84015536     0xe    sd a1,8(sp)           ; stack access
    0x84015538    0x10    li a5,1
    0x8401553a    0x12    bgeu a5,a2,ffffffff84015592 <decodeWriteRegisters+0x6a>
    0x8401553e    0x16    mv s1,a3
    0x84015540    0x18    auipc a0,0x15
    0x84015544    0x1c    ld a0,760(a0) # ffffffff8402a838 <ksCurThread>
    0x84015548    0x20    ld s2,96(a0)
    0x8401554c    0x24    addi a2,a2,-2
    0x8401554e    0x26    bltu a2,s2,ffffffff840155a0 <decodeWriteRegisters+0x78>
    0x84015552    0x2a    ld a5,0(sp)           ; stack access
    0x84015554    0x2c    slli s0,a5,0x19
    0x84015558    0x30    srli s0,s0,0x19
    0x8401555a    0x32    srli a5,a5,0x26
    0x8401555c    0x34    andi a5,a5,1
    0x8401555e    0x36    beqz a5,ffffffff84015566 <decodeWriteRegisters+0x3e>
    0x84015560    0x38    li a5,-1
    0x84015562    0x3a    slli a5,a5,0x27
    0x84015564    0x3c    or s0,s0,a5
    0x84015566    0x3e    beq a0,s0,ffffffff840155ae <decodeWriteRegisters+0x86>
    0x8401556a    0x42    ld s3,88(a0)
    0x8401556e    0x46    li a1,2
    0x84015570    0x48    jal ra,ffffffff840125f6 <setThreadState>
    0x84015574    0x4c    mv a4,s1
    0x84015576    0x4e    li a3,0
    0x84015578    0x50    mv a2,s2
    0x8401557a    0x52    andi a1,s3,1
    0x8401557e    0x56    mv a0,s0
    0x84015580    0x58    jal ra,ffffffff84015446 <invokeTCB_WriteRegisters>
    0x84015584    0x5c    ld ra,56(sp)          ; stack access
    0x84015586    0x5e    ld s0,48(sp)          ; stack access
    0x84015588    0x60    ld s1,40(sp)          ; stack access
    0x8401558a    0x62    ld s2,32(sp)          ; stack access
    0x8401558c    0x64    ld s3,24(sp)          ; stack access
    0x8401558e    0x66    addi sp,sp,64
    0x84015590    0x68    ret
    0x84015592    0x6a    li a5,7
    0x84015594    0x6c    auipc a4,0x3
    0x84015598    0x70    sd a5,316(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401559c    0x74    li a0,3
    0x8401559e    0x76    j ffffffff84015584 <decodeWriteRegisters+0x5c>
    0x840155a0    0x78    li a5,7
    0x840155a2    0x7a    auipc a4,0x3
    0x840155a6    0x7e    sd a5,302(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840155aa    0x82    li a0,3
    0x840155ac    0x84    j ffffffff84015584 <decodeWriteRegisters+0x5c>
    0x840155ae    0x86    li a5,3
    0x840155b0    0x88    auipc a4,0x3
    0x840155b4    0x8c    sd a5,288(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840155b8    0x90    li a0,3
    0x840155ba    0x92    j ffffffff84015584 <decodeWriteRegisters+0x5c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeWriteRegisters` has 87 nodes.

Section invokeTCB_WriteRegisters (176 of 269)
=============================================

Deriving specifications
-----------------------

Section `invokeTCB_WriteRegisters` consists of 78 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `invokeTCB_WriteRegisters`:

    0x84015446     0x0    addi sp,sp,-16
    0x84015448     0x2    sd ra,8(sp)           ; stack access
    0x8401544a     0x4    sd s0,0(sp)           ; stack access
    0x8401544c     0x6    mv s0,a0
    0x8401544e     0x8    mv t1,a2
    0x84015450     0xa    li a5,32
    0x84015454     0xe    bgeu a5,a2,ffffffff8401545c <invokeTCB_WriteRegisters+0x16>
    0x84015458    0x12    li t1,32
    0x8401545c    0x16    beqz a2,ffffffff840154fa <invokeTCB_WriteRegisters+0xb4>
    0x8401545e    0x18    auipc a0,0x2
    0x84015462    0x1c    addi a0,a0,122 # ffffffff840174d8 <frameRegisters>
    0x84015466    0x20    auipc a7,0x2
    0x8401546a    0x24    addi a7,a7,-126 # ffffffff840173e8 <msgRegisters>
    0x8401546e    0x28    addi a6,a4,24
    0x84015472    0x2c    li a3,0
    0x84015474    0x2e    li t5,3
    0x84015476    0x30    li t6,16
    0x84015478    0x32    auipc t0,0x15
    0x8401547c    0x36    addi t0,t0,960 # ffffffff8402a838 <ksCurThread>
    0x84015480    0x3a    j ffffffff840154a6 <invokeTCB_WriteRegisters+0x60>
    0x84015482    0x3c    ld t3,0(t0)
    0x84015486    0x40    ld t4,16(a7)
    0x8401548a    0x44    slli t4,t4,0x3
    0x8401548c    0x46    add t3,t3,t4
    0x8401548e    0x48    ld t3,0(t3)
    0x84015492    0x4c    slli a5,a5,0x3
    0x84015494    0x4e    add a5,a5,s0
    0x84015496    0x50    sd t3,0(a5)
    0x8401549a    0x54    addi a3,a3,1
    0x8401549c    0x56    addi a0,a0,8
    0x8401549e    0x58    addi a7,a7,8
    0x840154a0    0x5a    addi a6,a6,8
    0x840154a2    0x5c    bgeu a3,t1,ffffffff840154c2 <invokeTCB_WriteRegisters+0x7c>
    0x840154a6    0x60    ld a5,0(a0)
    0x840154a8    0x62    addi t3,a3,2
    0x840154ac    0x66    bgeu t5,t3,ffffffff84015482 <invokeTCB_WriteRegisters+0x3c>
    0x840154b0    0x6a    ld t3,0(a6)
    0x840154b4    0x6e    slli a5,a5,0x3
    0x840154b6    0x70    add a5,a5,s0
    0x840154b8    0x72    sd t3,0(a5)
    0x840154bc    0x76    addi a3,a3,1
    0x840154be    0x78    bne a3,t6,ffffffff8401549c <invokeTCB_WriteRegisters+0x56>
    0x840154c2    0x7c    li a5,16
    0x840154c4    0x7e    bgeu a5,a2,ffffffff840154fa <invokeTCB_WriteRegisters+0xb4>
    0x840154c8    0x82    addi a4,a4,152
    0x840154cc    0x86    auipc a3,0x2
    0x840154d0    0x8a    addi a3,a3,148 # ffffffff84017560 <gpRegisters+0x8>
    0x840154d4    0x8e    auipc a6,0x2
    0x840154d8    0x92    addi a6,a6,260 # ffffffff840175d8 <gpRegisters+0x80>
    0x840154dc    0x96    li a2,17
    0x840154de    0x98    li a5,9
    0x840154e0    0x9a    j ffffffff840154e8 <invokeTCB_WriteRegisters+0xa2>
    0x840154e2    0x9c    ld a5,0(a3)
    0x840154e4    0x9e    addi a3,a3,8
    0x840154e6    0xa0    addi a2,a2,1
    0x840154e8    0xa2    ld a0,0(a4)
    0x840154ea    0xa4    slli a5,a5,0x3
    0x840154ec    0xa6    add a5,a5,s0
    0x840154ee    0xa8    sd a0,0(a5)
    0x840154f0    0xaa    beq a3,a6,ffffffff840154fa <invokeTCB_WriteRegisters+0xb4>
    0x840154f4    0xae    addi a4,a4,8
    0x840154f6    0xb0    bltu a2,t1,ffffffff840154e2 <invokeTCB_WriteRegisters+0x9c>
    0x840154fa    0xb4    ld a5,264(s0)
    0x840154fe    0xb8    sd a5,272(s0)
    0x84015502    0xbc    bnez a1,ffffffff8401551a <invokeTCB_WriteRegisters+0xd4>
    0x84015504    0xbe    auipc a5,0x15
    0x84015508    0xc2    ld a5,820(a5) # ffffffff8402a838 <ksCurThread>
    0x8401550c    0xc6    beq a5,s0,ffffffff84015522 <invokeTCB_WriteRegisters+0xdc>
    0x84015510    0xca    li a0,0
    0x84015512    0xcc    ld ra,8(sp)           ; stack access
    0x84015514    0xce    ld s0,0(sp)           ; stack access
    0x84015516    0xd0    addi sp,sp,16
    0x84015518    0xd2    ret
    0x8401551a    0xd4    mv a0,s0
    0x8401551c    0xd6    jal ra,ffffffff84013b2c <restart>
    0x84015520    0xda    j ffffffff84015504 <invokeTCB_WriteRegisters+0xbe>
    0x84015522    0xdc    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84015526    0xe0    j ffffffff84015510 <invokeTCB_WriteRegisters+0xca>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
78 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_WriteRegisters` has 118 nodes.

Section decodeReadRegisters (177 of 269)
========================================

Deriving specifications
-----------------------

Section `decodeReadRegisters` consists of 63 instructions.


Stack analysis
---------------

13 stack accesses found. Annotated code for `decodeReadRegisters`:

    0x8401539e     0x0    addi sp,sp,-64
    0x840153a0     0x2    sd ra,56(sp)          ; stack access
    0x840153a2     0x4    sd s0,48(sp)          ; stack access
    0x840153a4     0x6    sd s1,40(sp)          ; stack access
    0x840153a6     0x8    sd s2,32(sp)          ; stack access
    0x840153a8     0xa    sd s3,24(sp)          ; stack access
    0x840153aa     0xc    sd a0,0(sp)           ; stack access
    0x840153ac     0xe    sd a1,8(sp)           ; stack access
    0x840153ae    0x10    li a5,1
    0x840153b0    0x12    bgeu a5,a2,ffffffff8401540a <decodeReadRegisters+0x6c>
    0x840153b4    0x16    mv s2,a3
    0x840153b6    0x18    auipc a0,0x15
    0x840153ba    0x1c    ld a0,1154(a0) # ffffffff8402a838 <ksCurThread>
    0x840153be    0x20    ld s1,96(a0)
    0x840153c0    0x22    addi a4,s1,-1
    0x840153c4    0x26    li a5,31
    0x840153c6    0x28    bltu a5,a4,ffffffff84015418 <decodeReadRegisters+0x7a>
    0x840153ca    0x2c    ld a5,0(sp)           ; stack access
    0x840153cc    0x2e    slli s0,a5,0x19
    0x840153d0    0x32    srli s0,s0,0x19
    0x840153d2    0x34    srli a5,a5,0x26
    0x840153d4    0x36    andi a5,a5,1
    0x840153d6    0x38    beqz a5,ffffffff840153de <decodeReadRegisters+0x40>
    0x840153d8    0x3a    li a5,-1
    0x840153da    0x3c    slli a5,a5,0x27
    0x840153dc    0x3e    or s0,s0,a5
    0x840153de    0x40    beq a0,s0,ffffffff84015438 <decodeReadRegisters+0x9a>
    0x840153e2    0x44    ld s3,88(a0)
    0x840153e6    0x48    li a1,2
    0x840153e8    0x4a    jal ra,ffffffff840125f6 <setThreadState>
    0x840153ec    0x4e    mv a4,s2
    0x840153ee    0x50    li a3,0
    0x840153f0    0x52    mv a2,s1
    0x840153f2    0x54    andi a1,s3,1
    0x840153f6    0x58    mv a0,s0
    0x840153f8    0x5a    jal ra,ffffffff8401528c <invokeTCB_ReadRegisters>
    0x840153fc    0x5e    ld ra,56(sp)          ; stack access
    0x840153fe    0x60    ld s0,48(sp)          ; stack access
    0x84015400    0x62    ld s1,40(sp)          ; stack access
    0x84015402    0x64    ld s2,32(sp)          ; stack access
    0x84015404    0x66    ld s3,24(sp)          ; stack access
    0x84015406    0x68    addi sp,sp,64
    0x84015408    0x6a    ret
    0x8401540a    0x6c    li a5,7
    0x8401540c    0x6e    auipc a4,0x3
    0x84015410    0x72    sd a5,708(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015414    0x76    li a0,3
    0x84015416    0x78    j ffffffff840153fc <decodeReadRegisters+0x5e>
    0x84015418    0x7a    auipc a5,0x3
    0x8401541c    0x7e    addi a5,a5,-1048 # ffffffff84018000 <riscvKSASIDTable>
    0x84015420    0x82    li a4,4
    0x84015422    0x84    sd a4,1744(a5)
    0x84015426    0x88    li a4,1
    0x84015428    0x8a    sd a4,1712(a5)
    0x8401542c    0x8e    li a4,32
    0x84015430    0x92    sd a4,1720(a5)
    0x84015434    0x96    li a0,3
    0x84015436    0x98    j ffffffff840153fc <decodeReadRegisters+0x5e>
    0x84015438    0x9a    li a5,3
    0x8401543a    0x9c    auipc a4,0x3
    0x8401543e    0xa0    sd a5,662(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015442    0xa4    li a0,3
    0x84015444    0xa6    j ffffffff840153fc <decodeReadRegisters+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
63 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeReadRegisters` has 95 nodes.

Section decodeCopyRegisters (178 of 269)
========================================

Deriving specifications
-----------------------

Section `decodeCopyRegisters` consists of 62 instructions.


Stack analysis
---------------

9 stack accesses found. Annotated code for `decodeCopyRegisters`:

    0x840151e8     0x0    addi sp,sp,-48
    0x840151ea     0x2    sd ra,40(sp)          ; stack access
    0x840151ec     0x4    sd s0,32(sp)          ; stack access
    0x840151ee     0x6    sd s1,24(sp)          ; stack access
    0x840151f0     0x8    sd a0,0(sp)           ; stack access
    0x840151f2     0xa    sd a1,8(sp)           ; stack access
    0x840151f4     0xc    beqz a2,ffffffff84015266 <decodeCopyRegisters+0x7e>
    0x840151f6     0xe    auipc a5,0x3
    0x840151fa    0x12    ld a5,1690(a5) # ffffffff84018890 <current_extra_caps>
    0x840151fe    0x16    beqz a5,ffffffff84015266 <decodeCopyRegisters+0x7e>
    0x84015200    0x18    ld a5,0(a5)
    0x84015202    0x1a    srli a3,a5,0x3b
    0x84015206    0x1e    li a4,12
    0x84015208    0x20    bne a3,a4,ffffffff84015274 <decodeCopyRegisters+0x8c>
    0x8401520c    0x24    slli a1,a5,0x19
    0x84015210    0x28    srli a1,a1,0x19
    0x84015212    0x2a    srli a5,a5,0x26
    0x84015214    0x2c    andi a5,a5,1
    0x84015216    0x2e    beqz a5,ffffffff8401521e <decodeCopyRegisters+0x36>
    0x84015218    0x30    li a5,-1
    0x8401521a    0x32    slli a5,a5,0x27
    0x8401521c    0x34    or a1,a1,a5
    0x8401521e    0x36    auipc a0,0x15
    0x84015222    0x3a    ld a0,1562(a0) # ffffffff8402a838 <ksCurThread>
    0x84015226    0x3e    ld s1,88(a0)
    0x84015228    0x40    mv s0,a1
    0x8401522a    0x42    li a1,2
    0x8401522c    0x44    jal ra,ffffffff840125f6 <setThreadState>
    0x84015230    0x48    ld a5,0(sp)           ; stack access
    0x84015232    0x4a    slli a0,a5,0x19
    0x84015236    0x4e    srli a0,a0,0x19
    0x84015238    0x50    srli a5,a5,0x26
    0x8401523a    0x52    andi a5,a5,1
    0x8401523c    0x54    beqz a5,ffffffff84015244 <decodeCopyRegisters+0x5c>
    0x8401523e    0x56    li a5,-1
    0x84015240    0x58    slli a5,a5,0x27
    0x84015242    0x5a    or a0,a0,a5
    0x84015244    0x5c    li a6,0
    0x84015246    0x5e    andi a5,s1,8
    0x8401524a    0x62    andi a4,s1,4
    0x8401524e    0x66    andi a3,s1,2
    0x84015252    0x6a    andi a2,s1,1
    0x84015256    0x6e    mv a1,s0
    0x84015258    0x70    jal ra,ffffffff8401513e <invokeTCB_CopyRegisters>
    0x8401525c    0x74    ld ra,40(sp)          ; stack access
    0x8401525e    0x76    ld s0,32(sp)          ; stack access
    0x84015260    0x78    ld s1,24(sp)          ; stack access
    0x84015262    0x7a    addi sp,sp,48
    0x84015264    0x7c    ret
    0x84015266    0x7e    li a5,7
    0x84015268    0x80    auipc a4,0x3
    0x8401526c    0x84    sd a5,1128(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015270    0x88    li a0,3
    0x84015272    0x8a    j ffffffff8401525c <decodeCopyRegisters+0x74>
    0x84015274    0x8c    auipc a5,0x3
    0x84015278    0x90    addi a5,a5,-628 # ffffffff84018000 <riscvKSASIDTable>
    0x8401527c    0x94    li a4,2
    0x8401527e    0x96    sd a4,1744(a5)
    0x84015282    0x9a    li a4,1
    0x84015284    0x9c    sd a4,1704(a5)
    0x84015288    0xa0    li a0,3
    0x8401528a    0xa2    j ffffffff8401525c <decodeCopyRegisters+0x74>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCopyRegisters` has 91 nodes.

Section decodeSetSchedParams (179 of 269)
=========================================

Deriving specifications
-----------------------

Section `decodeSetSchedParams` consists of 92 instructions.

RVC_FTTFFFFTFFFFT_FT.

Stack analysis
---------------

17 stack accesses found. Annotated code for `decodeSetSchedParams`:

    0x84014e10     0x0    addi sp,sp,-128
    0x84014e12     0x2    sd ra,120(sp)         ; stack access
    0x84014e14     0x4    sd s0,112(sp)         ; stack access
    0x84014e16     0x6    sd s1,104(sp)         ; stack access
    0x84014e18     0x8    sd a0,64(sp)          ; stack access
    0x84014e1a     0xa    sd a1,72(sp)          ; stack access
    0x84014e1c     0xc    li a5,1
    0x84014e1e     0xe    bgeu a5,a2,ffffffff84014ea2 <decodeSetSchedParams+0x92>
    0x84014e22    0x12    auipc a5,0x4
    0x84014e26    0x16    ld a5,-1426(a5) # ffffffff84018890 <current_extra_caps>
    0x84014e2a    0x1a    beqz a5,ffffffff84014ea2 <decodeSetSchedParams+0x92>
    0x84014e2c    0x1c    ld a5,0(a5)
    0x84014e2e    0x1e    srli a3,a5,0x3b
    0x84014e32    0x22    li a4,12
    0x84014e34    0x24    bne a3,a4,ffffffff84014eb0 <decodeSetSchedParams+0xa0>
    0x84014e38    0x28    slli a4,a5,0x19
    0x84014e3c    0x2c    srli a4,a4,0x19
    0x84014e3e    0x2e    srli a5,a5,0x26
    0x84014e40    0x30    andi a5,a5,1
    0x84014e42    0x32    beqz a5,ffffffff84014e4a <decodeSetSchedParams+0x3a>
    0x84014e44    0x34    li a5,-1
    0x84014e46    0x36    slli a5,a5,0x27
    0x84014e48    0x38    or a4,a4,a5
    0x84014e4a    0x3a    auipc a0,0x16
    0x84014e4e    0x3e    ld a0,-1554(a0) # ffffffff8402a838 <ksCurThread>
    0x84014e52    0x42    ld s0,88(a0)
    0x84014e54    0x44    ld a5,352(a4)
    0x84014e58    0x48    bltu a5,s0,ffffffff84014ed0 <decodeSetSchedParams+0xc0>
    0x84014e5c    0x4c    ld s1,96(a0)
    0x84014e5e    0x4e    bltu a5,s1,ffffffff84014eea <decodeSetSchedParams+0xda>
    0x84014e62    0x52    li a1,2
    0x84014e64    0x54    jal ra,ffffffff840125f6 <setThreadState>
    0x84014e68    0x58    ld a5,64(sp)          ; stack access
    0x84014e6a    0x5a    slli a0,a5,0x19
    0x84014e6e    0x5e    srli a0,a0,0x19
    0x84014e70    0x60    srli a5,a5,0x26
    0x84014e72    0x62    andi a5,a5,1
    0x84014e74    0x64    beqz a5,ffffffff84014e7c <decodeSetSchedParams+0x6c>
    0x84014e76    0x66    li a5,-1
    0x84014e78    0x68    slli a5,a5,0x27
    0x84014e7a    0x6a    or a0,a0,a5
    0x84014e7c    0x6c    li a5,9
    0x84014e7e    0x6e    sd a5,56(sp)          ; stack access
    0x84014e80    0x70    sd zero,48(sp)        ; stack access
    0x84014e82    0x72    sd zero,32(sp)        ; stack access
    0x84014e84    0x74    sd zero,40(sp)        ; stack access
    0x84014e86    0x76    sd zero,24(sp)        ; stack access
    0x84014e88    0x78    sd zero,16(sp)        ; stack access
    0x84014e8a    0x7a    sd zero,0(sp)         ; stack access
    0x84014e8c    0x7c    sd zero,8(sp)         ; stack access
    0x84014e8e    0x7e    li a7,0
    0x84014e90    0x80    li a5,0
    0x84014e92    0x82    li a6,0
    0x84014e94    0x84    mv a4,s1
    0x84014e96    0x86    mv a3,s0
    0x84014e98    0x88    li a2,0
    0x84014e9a    0x8a    li a1,0
    0x84014e9c    0x8c    jal ra,ffffffff84014948 <invokeTCB_ThreadControl>
    0x84014ea0    0x90    j ffffffff84014ec6 <decodeSetSchedParams+0xb6>
    0x84014ea2    0x92    li a5,7
    0x84014ea4    0x94    auipc a4,0x4
    0x84014ea8    0x98    sd a5,-2004(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014eac    0x9c    li a0,3
    0x84014eae    0x9e    j ffffffff84014ec6 <decodeSetSchedParams+0xb6>
    0x84014eb0    0xa0    auipc a5,0x3
    0x84014eb4    0xa4    addi a5,a5,336 # ffffffff84018000 <riscvKSASIDTable>
    0x84014eb8    0xa8    li a4,2
    0x84014eba    0xaa    sd a4,1744(a5)
    0x84014ebe    0xae    li a4,1
    0x84014ec0    0xb0    sd a4,1704(a5)
    0x84014ec4    0xb4    li a0,3
    0x84014ec6    0xb6    ld ra,120(sp)         ; stack access
    0x84014ec8    0xb8    ld s0,112(sp)         ; stack access
    0x84014eca    0xba    ld s1,104(sp)         ; stack access
    0x84014ecc    0xbc    addi sp,sp,128
    0x84014ece    0xbe    ret
    0x84014ed0    0xc0    auipc a4,0x3
    0x84014ed4    0xc4    addi a4,a4,304 # ffffffff84018000 <riscvKSASIDTable>
    0x84014ed8    0xc8    li a3,4
    0x84014eda    0xca    sd a3,1744(a4)
    0x84014ede    0xce    sd zero,1712(a4)
    0x84014ee2    0xd2    sd a5,1720(a4)
    0x84014ee6    0xd6    li a0,3
    0x84014ee8    0xd8    j ffffffff84014ec6 <decodeSetSchedParams+0xb6>
    0x84014eea    0xda    auipc a4,0x3
    0x84014eee    0xde    addi a4,a4,278 # ffffffff84018000 <riscvKSASIDTable>
    0x84014ef2    0xe2    li a3,4
    0x84014ef4    0xe4    sd a3,1744(a4)
    0x84014ef8    0xe8    sd zero,1712(a4)
    0x84014efc    0xec    sd a5,1720(a4)
    0x84014f00    0xf0    li a0,3
    0x84014f02    0xf2    j ffffffff84014ec6 <decodeSetSchedParams+0xb6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
92 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSchedParams` has 141 nodes.

Section decodeSetMCPriority (180 of 269)
========================================

Deriving specifications
-----------------------

Section `decodeSetMCPriority` consists of 79 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeSetMCPriority`:

    0x84014d44     0x0    addi sp,sp,-112
    0x84014d46     0x2    sd ra,104(sp)         ; stack access
    0x84014d48     0x4    sd s0,96(sp)          ; stack access
    0x84014d4a     0x6    sd a0,64(sp)          ; stack access
    0x84014d4c     0x8    sd a1,72(sp)          ; stack access
    0x84014d4e     0xa    beqz a2,ffffffff84014dca <decodeSetMCPriority+0x86>
    0x84014d50     0xc    auipc a5,0x4
    0x84014d54    0x10    ld a5,-1216(a5) # ffffffff84018890 <current_extra_caps>
    0x84014d58    0x14    beqz a5,ffffffff84014dca <decodeSetMCPriority+0x86>
    0x84014d5a    0x16    ld a5,0(a5)
    0x84014d5c    0x18    srli a3,a5,0x3b
    0x84014d60    0x1c    li a4,12
    0x84014d62    0x1e    bne a3,a4,ffffffff84014dde <decodeSetMCPriority+0x9a>
    0x84014d66    0x22    slli a4,a5,0x19
    0x84014d6a    0x26    srli a4,a4,0x19
    0x84014d6c    0x28    srli a5,a5,0x26
    0x84014d6e    0x2a    andi a5,a5,1
    0x84014d70    0x2c    beqz a5,ffffffff84014d78 <decodeSetMCPriority+0x34>
    0x84014d72    0x2e    li a5,-1
    0x84014d74    0x30    slli a5,a5,0x27
    0x84014d76    0x32    or a4,a4,a5
    0x84014d78    0x34    auipc a0,0x16
    0x84014d7c    0x38    ld a0,-1344(a0) # ffffffff8402a838 <ksCurThread>
    0x84014d80    0x3c    ld s0,88(a0)
    0x84014d82    0x3e    ld a5,352(a4)
    0x84014d86    0x42    bltu a5,s0,ffffffff84014df6 <decodeSetMCPriority+0xb2>
    0x84014d8a    0x46    li a1,2
    0x84014d8c    0x48    jal ra,ffffffff840125f6 <setThreadState>
    0x84014d90    0x4c    ld a5,64(sp)          ; stack access
    0x84014d92    0x4e    slli a0,a5,0x19
    0x84014d96    0x52    srli a0,a0,0x19
    0x84014d98    0x54    srli a5,a5,0x26
    0x84014d9a    0x56    andi a5,a5,1
    0x84014d9c    0x58    beqz a5,ffffffff84014da4 <decodeSetMCPriority+0x60>
    0x84014d9e    0x5a    li a5,-1
    0x84014da0    0x5c    slli a5,a5,0x27
    0x84014da2    0x5e    or a0,a0,a5
    0x84014da4    0x60    li a5,8
    0x84014da6    0x62    sd a5,56(sp)          ; stack access
    0x84014da8    0x64    sd zero,48(sp)        ; stack access
    0x84014daa    0x66    sd zero,32(sp)        ; stack access
    0x84014dac    0x68    sd zero,40(sp)        ; stack access
    0x84014dae    0x6a    sd zero,24(sp)        ; stack access
    0x84014db0    0x6c    sd zero,16(sp)        ; stack access
    0x84014db2    0x6e    sd zero,0(sp)         ; stack access
    0x84014db4    0x70    sd zero,8(sp)         ; stack access
    0x84014db6    0x72    li a7,0
    0x84014db8    0x74    li a5,0
    0x84014dba    0x76    li a6,0
    0x84014dbc    0x78    li a4,0
    0x84014dbe    0x7a    mv a3,s0
    0x84014dc0    0x7c    li a2,0
    0x84014dc2    0x7e    li a1,0
    0x84014dc4    0x80    jal ra,ffffffff84014948 <invokeTCB_ThreadControl>
    0x84014dc8    0x84    j ffffffff84014dd6 <decodeSetMCPriority+0x92>
    0x84014dca    0x86    li a5,7
    0x84014dcc    0x88    auipc a4,0x4
    0x84014dd0    0x8c    sd a5,-1788(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014dd4    0x90    li a0,3
    0x84014dd6    0x92    ld ra,104(sp)         ; stack access
    0x84014dd8    0x94    ld s0,96(sp)          ; stack access
    0x84014dda    0x96    addi sp,sp,112
    0x84014ddc    0x98    ret
    0x84014dde    0x9a    auipc a5,0x3
    0x84014de2    0x9e    addi a5,a5,546 # ffffffff84018000 <riscvKSASIDTable>
    0x84014de6    0xa2    li a4,2
    0x84014de8    0xa4    sd a4,1744(a5)
    0x84014dec    0xa8    li a4,1
    0x84014dee    0xaa    sd a4,1704(a5)
    0x84014df2    0xae    li a0,3
    0x84014df4    0xb0    j ffffffff84014dd6 <decodeSetMCPriority+0x92>
    0x84014df6    0xb2    auipc a4,0x3
    0x84014dfa    0xb6    addi a4,a4,522 # ffffffff84018000 <riscvKSASIDTable>
    0x84014dfe    0xba    li a3,4
    0x84014e00    0xbc    sd a3,1744(a4)
    0x84014e04    0xc0    sd zero,1712(a4)
    0x84014e08    0xc4    sd a5,1720(a4)
    0x84014e0c    0xc8    li a0,3
    0x84014e0e    0xca    j ffffffff84014dd6 <decodeSetMCPriority+0x92>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetMCPriority` has 120 nodes.

Section decodeSetPriority (181 of 269)
======================================

Deriving specifications
-----------------------

Section `decodeSetPriority` consists of 79 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeSetPriority`:

    0x84014c78     0x0    addi sp,sp,-112
    0x84014c7a     0x2    sd ra,104(sp)         ; stack access
    0x84014c7c     0x4    sd s0,96(sp)          ; stack access
    0x84014c7e     0x6    sd a0,64(sp)          ; stack access
    0x84014c80     0x8    sd a1,72(sp)          ; stack access
    0x84014c82     0xa    beqz a2,ffffffff84014cfe <decodeSetPriority+0x86>
    0x84014c84     0xc    auipc a5,0x4
    0x84014c88    0x10    ld a5,-1012(a5) # ffffffff84018890 <current_extra_caps>
    0x84014c8c    0x14    beqz a5,ffffffff84014cfe <decodeSetPriority+0x86>
    0x84014c8e    0x16    ld a5,0(a5)
    0x84014c90    0x18    srli a3,a5,0x3b
    0x84014c94    0x1c    li a4,12
    0x84014c96    0x1e    bne a3,a4,ffffffff84014d12 <decodeSetPriority+0x9a>
    0x84014c9a    0x22    slli a4,a5,0x19
    0x84014c9e    0x26    srli a4,a4,0x19
    0x84014ca0    0x28    srli a5,a5,0x26
    0x84014ca2    0x2a    andi a5,a5,1
    0x84014ca4    0x2c    beqz a5,ffffffff84014cac <decodeSetPriority+0x34>
    0x84014ca6    0x2e    li a5,-1
    0x84014ca8    0x30    slli a5,a5,0x27
    0x84014caa    0x32    or a4,a4,a5
    0x84014cac    0x34    auipc a0,0x16
    0x84014cb0    0x38    ld a0,-1140(a0) # ffffffff8402a838 <ksCurThread>
    0x84014cb4    0x3c    ld s0,88(a0)
    0x84014cb6    0x3e    ld a5,352(a4)
    0x84014cba    0x42    bltu a5,s0,ffffffff84014d2a <decodeSetPriority+0xb2>
    0x84014cbe    0x46    li a1,2
    0x84014cc0    0x48    jal ra,ffffffff840125f6 <setThreadState>
    0x84014cc4    0x4c    ld a5,64(sp)          ; stack access
    0x84014cc6    0x4e    slli a0,a5,0x19
    0x84014cca    0x52    srli a0,a0,0x19
    0x84014ccc    0x54    srli a5,a5,0x26
    0x84014cce    0x56    andi a5,a5,1
    0x84014cd0    0x58    beqz a5,ffffffff84014cd8 <decodeSetPriority+0x60>
    0x84014cd2    0x5a    li a5,-1
    0x84014cd4    0x5c    slli a5,a5,0x27
    0x84014cd6    0x5e    or a0,a0,a5
    0x84014cd8    0x60    li a5,1
    0x84014cda    0x62    sd a5,56(sp)          ; stack access
    0x84014cdc    0x64    sd zero,48(sp)        ; stack access
    0x84014cde    0x66    sd zero,32(sp)        ; stack access
    0x84014ce0    0x68    sd zero,40(sp)        ; stack access
    0x84014ce2    0x6a    sd zero,24(sp)        ; stack access
    0x84014ce4    0x6c    sd zero,16(sp)        ; stack access
    0x84014ce6    0x6e    sd zero,0(sp)         ; stack access
    0x84014ce8    0x70    sd zero,8(sp)         ; stack access
    0x84014cea    0x72    li a7,0
    0x84014cec    0x74    li a5,0
    0x84014cee    0x76    li a6,0
    0x84014cf0    0x78    mv a4,s0
    0x84014cf2    0x7a    li a3,0
    0x84014cf4    0x7c    li a2,0
    0x84014cf6    0x7e    li a1,0
    0x84014cf8    0x80    jal ra,ffffffff84014948 <invokeTCB_ThreadControl>
    0x84014cfc    0x84    j ffffffff84014d0a <decodeSetPriority+0x92>
    0x84014cfe    0x86    li a5,7
    0x84014d00    0x88    auipc a4,0x4
    0x84014d04    0x8c    sd a5,-1584(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014d08    0x90    li a0,3
    0x84014d0a    0x92    ld ra,104(sp)         ; stack access
    0x84014d0c    0x94    ld s0,96(sp)          ; stack access
    0x84014d0e    0x96    addi sp,sp,112
    0x84014d10    0x98    ret
    0x84014d12    0x9a    auipc a5,0x3
    0x84014d16    0x9e    addi a5,a5,750 # ffffffff84018000 <riscvKSASIDTable>
    0x84014d1a    0xa2    li a4,2
    0x84014d1c    0xa4    sd a4,1744(a5)
    0x84014d20    0xa8    li a4,1
    0x84014d22    0xaa    sd a4,1704(a5)
    0x84014d26    0xae    li a0,3
    0x84014d28    0xb0    j ffffffff84014d0a <decodeSetPriority+0x92>
    0x84014d2a    0xb2    auipc a4,0x3
    0x84014d2e    0xb6    addi a4,a4,726 # ffffffff84018000 <riscvKSASIDTable>
    0x84014d32    0xba    li a3,4
    0x84014d34    0xbc    sd a3,1744(a4)
    0x84014d38    0xc0    sd zero,1712(a4)
    0x84014d3c    0xc4    sd a5,1720(a4)
    0x84014d40    0xc8    li a0,3
    0x84014d42    0xca    j ffffffff84014d0a <decodeSetPriority+0x92>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetPriority` has 120 nodes.

Section decodeDomainInvocation (182 of 269)
===========================================

Deriving specifications
-----------------------

Section `decodeDomainInvocation` consists of 66 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `decodeDomainInvocation`:

    0x84014872     0x0    li a5,29
    0x84014874     0x2    bne a0,a5,ffffffff840148d2 <decodeDomainInvocation+0x60>
    0x84014878     0x6    beqz a1,ffffffff840148e0 <decodeDomainInvocation+0x6e>
    0x8401487a     0x8    addi sp,sp,-32
    0x8401487c     0xa    sd ra,24(sp)          ; stack access
    0x8401487e     0xc    sd s0,16(sp)          ; stack access
    0x84014880     0xe    sd s1,8(sp)           ; stack access
    0x84014882    0x10    auipc a0,0x16
    0x84014886    0x14    ld a0,-74(a0) # ffffffff8402a838 <ksCurThread>
    0x8401488a    0x18    ld s1,88(a0)
    0x8401488c    0x1a    li a5,15
    0x8401488e    0x1c    bltu a5,s1,ffffffff840148ee <decodeDomainInvocation+0x7c>
    0x84014892    0x20    auipc a5,0x4
    0x84014896    0x24    ld a5,-2(a5) # ffffffff84018890 <current_extra_caps>
    0x8401489a    0x28    beqz a5,ffffffff84014904 <decodeDomainInvocation+0x92>
    0x8401489c    0x2a    ld s0,0(a5)
    0x8401489e    0x2c    srli a4,s0,0x3b
    0x840148a2    0x30    li a5,12
    0x840148a4    0x32    bne a4,a5,ffffffff84014912 <decodeDomainInvocation+0xa0>
    0x840148a8    0x36    li a1,2
    0x840148aa    0x38    jal ra,ffffffff840125f6 <setThreadState>
    0x840148ae    0x3c    slli a0,s0,0x19
    0x840148b2    0x40    srli a0,a0,0x19
    0x840148b4    0x42    srli s0,s0,0x26
    0x840148b6    0x44    andi s0,s0,1
    0x840148b8    0x46    beqz s0,ffffffff840148c0 <decodeDomainInvocation+0x4e>
    0x840148ba    0x48    li a5,-1
    0x840148bc    0x4a    slli a5,a5,0x27
    0x840148be    0x4c    or a0,a0,a5
    0x840148c0    0x4e    mv a1,s1
    0x840148c2    0x50    jal ra,ffffffff84012db0 <setDomain>
    0x840148c6    0x54    li a0,0
    0x840148c8    0x56    ld ra,24(sp)          ; stack access
    0x840148ca    0x58    ld s0,16(sp)          ; stack access
    0x840148cc    0x5a    ld s1,8(sp)           ; stack access
    0x840148ce    0x5c    addi sp,sp,32
    0x840148d0    0x5e    ret
    0x840148d2    0x60    li a5,3
    0x840148d4    0x62    auipc a4,0x4
    0x840148d8    0x66    sd a5,-516(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840148dc    0x6a    li a0,3
    0x840148de    0x6c    ret
    0x840148e0    0x6e    li a5,7
    0x840148e2    0x70    auipc a4,0x4
    0x840148e6    0x74    sd a5,-530(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840148ea    0x78    li a0,3
    0x840148ec    0x7a    ret
    0x840148ee    0x7c    auipc a5,0x3
    0x840148f2    0x80    addi a5,a5,1810 # ffffffff84018000 <riscvKSASIDTable>
    0x840148f6    0x84    li a4,1
    0x840148f8    0x86    sd a4,1744(a5)
    0x840148fc    0x8a    sd zero,1696(a5)
    0x84014900    0x8e    li a0,3
    0x84014902    0x90    j ffffffff840148c8 <decodeDomainInvocation+0x56>
    0x84014904    0x92    li a5,7
    0x84014906    0x94    auipc a4,0x4
    0x8401490a    0x98    sd a5,-566(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401490e    0x9c    li a0,3
    0x84014910    0x9e    j ffffffff840148c8 <decodeDomainInvocation+0x56>
    0x84014912    0xa0    auipc a5,0x3
    0x84014916    0xa4    addi a5,a5,1774 # ffffffff84018000 <riscvKSASIDTable>
    0x8401491a    0xa8    li a4,1
    0x8401491c    0xaa    sd a4,1744(a5)
    0x84014920    0xae    sd a4,1696(a5)
    0x84014924    0xb2    li a0,3
    0x84014926    0xb4    j ffffffff840148c8 <decodeDomainInvocation+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
66 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeDomainInvocation` has 100 nodes.

Section handleFault (183 of 269)
================================

Deriving specifications
-----------------------

Section `handleFault` consists of 14 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleFault`:

    0x8401445c     0x0    addi sp,sp,-16
    0x8401445e     0x2    sd ra,8(sp)           ; stack access
    0x84014460     0x4    sd s0,0(sp)           ; stack access
    0x84014462     0x6    mv s0,a0
    0x84014464     0x8    jal ra,ffffffff84014372 <sendFaultIPC>
    0x84014468     0xc    bnez a0,ffffffff84014472 <handleFault+0x16>
    0x8401446a     0xe    ld ra,8(sp)           ; stack access
    0x8401446c    0x10    ld s0,0(sp)           ; stack access
    0x8401446e    0x12    addi sp,sp,16
    0x84014470    0x14    ret
    0x84014472    0x16    li a1,0
    0x84014474    0x18    mv a0,s0
    0x84014476    0x1a    jal ra,ffffffff840125f6 <setThreadState>
    0x8401447a    0x1e    j ffffffff8401446a <handleFault+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
14 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFault` has 23 nodes.

Section sendFaultIPC (184 of 269)
=================================

Deriving specifications
-----------------------

Section `sendFaultIPC` consists of 83 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `sendFaultIPC`:

    0x84014372     0x0    addi sp,sp,-80
    0x84014374     0x2    sd ra,72(sp)          ; stack access
    0x84014376     0x4    sd s0,64(sp)          ; stack access
    0x84014378     0x6    sd s1,56(sp)          ; stack access
    0x8401437a     0x8    sd s2,48(sp)          ; stack access
    0x8401437c     0xa    sd s3,40(sp)          ; stack access
    0x8401437e     0xc    sd s4,32(sp)          ; stack access
    0x84014380     0xe    mv s0,a0
    0x84014382    0x10    auipc a5,0x4
    0x84014386    0x14    addi a5,a5,-898 # ffffffff84018000 <riscvKSASIDTable>
    0x8401438a    0x18    ld s3,1024(a5)
    0x8401438e    0x1c    ld s4,1032(a5)
    0x84014392    0x20    ld s2,376(a0)
    0x84014396    0x24    mv a2,s2
    0x84014398    0x26    mv a1,a0
    0x8401439a    0x28    addi a0,sp,8
    0x8401439c    0x2a    jal ra,ffffffff84011444 <lookupCap>
    0x840143a0    0x2e    ld s1,8(sp)           ; stack access
    0x840143a2    0x30    bnez s1,ffffffff8401440e <sendFaultIPC+0x9c>
    0x840143a4    0x32    ld a5,16(sp)          ; stack access
    0x840143a6    0x34    srli a3,a5,0x3b
    0x840143aa    0x38    li a4,4
    0x840143ac    0x3a    bne a3,a4,ffffffff8401442e <sendFaultIPC+0xbc>
    0x840143b0    0x3e    srli a4,a5,0x37
    0x840143b4    0x42    andi a4,a4,1
    0x840143b6    0x44    beqz a4,ffffffff8401442e <sendFaultIPC+0xbc>
    0x840143b8    0x46    srli a3,a5,0x39
    0x840143bc    0x4a    srli a4,a5,0x3a
    0x840143c0    0x4e    or a4,a4,a3
    0x840143c2    0x50    andi a4,a4,1
    0x840143c4    0x52    beqz a4,ffffffff8401442e <sendFaultIPC+0xbc>
    0x840143c6    0x54    ld a2,24(sp)          ; stack access
    0x840143c8    0x56    auipc a1,0x4
    0x840143cc    0x5a    addi a1,a1,-968 # ffffffff84018000 <riscvKSASIDTable>
    0x840143d0    0x5e    ld a4,1680(a1)
    0x840143d4    0x62    sd a4,312(s0)
    0x840143d8    0x66    ld a1,1688(a1)
    0x840143dc    0x6a    sd a1,320(s0)
    0x840143e0    0x6e    andi a4,a4,15
    0x840143e2    0x70    li a1,1
    0x840143e4    0x72    beq a4,a1,ffffffff84014424 <sendFaultIPC+0xb2>
    0x840143e8    0x76    slli a6,a5,0x19
    0x840143ec    0x7a    srli a6,a6,0x19
    0x840143f0    0x7e    srli a5,a5,0x26
    0x840143f2    0x80    andi a5,a5,1
    0x840143f4    0x82    beqz a5,ffffffff840143fe <sendFaultIPC+0x8c>
    0x840143f6    0x84    li a5,-1
    0x840143f8    0x86    slli a5,a5,0x27
    0x840143fa    0x88    or a6,a6,a5
    0x840143fe    0x8c    mv a5,s0
    0x84014400    0x8e    li a4,1
    0x84014402    0x90    andi a3,a3,1
    0x84014404    0x92    li a1,1
    0x84014406    0x94    li a0,1
    0x84014408    0x96    jal ra,ffffffff840141fc <sendIPC>
    0x8401440c    0x9a    j ffffffff8401444a <sendFaultIPC+0xd8>
    0x8401440e    0x9c    auipc a5,0x4
    0x84014412    0xa0    addi a5,a5,-1038 # ffffffff84018000 <riscvKSASIDTable>
    0x84014416    0xa4    li a4,1
    0x84014418    0xa6    sd a4,1680(a5)
    0x8401441c    0xaa    sd s2,1688(a5)
    0x84014420    0xae    li s1,1
    0x84014422    0xb0    j ffffffff8401444a <sendFaultIPC+0xd8>
    0x84014424    0xb2    sd s3,328(s0)
    0x84014428    0xb6    sd s4,336(s0)
    0x8401442c    0xba    j ffffffff840143e8 <sendFaultIPC+0x76>
    0x8401442e    0xbc    auipc a5,0x4
    0x84014432    0xc0    addi a5,a5,-1070 # ffffffff84018000 <riscvKSASIDTable>
    0x84014436    0xc4    li a4,1
    0x84014438    0xc6    sd a4,1680(a5)
    0x8401443c    0xca    sd s2,1688(a5)
    0x84014440    0xce    sd a4,1024(a5)
    0x84014444    0xd2    sd zero,1032(a5)
    0x84014448    0xd6    li s1,1
    0x8401444a    0xd8    mv a0,s1
    0x8401444c    0xda    ld ra,72(sp)          ; stack access
    0x8401444e    0xdc    ld s0,64(sp)          ; stack access
    0x84014450    0xde    ld s1,56(sp)          ; stack access
    0x84014452    0xe0    ld s2,48(sp)          ; stack access
    0x84014454    0xe2    ld s3,40(sp)          ; stack access
    0x84014456    0xe4    ld s4,32(sp)          ; stack access
    0x84014458    0xe6    addi sp,sp,80
    0x8401445a    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
83 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendFaultIPC` has 128 nodes.

Section handleReply (185 of 269)
================================

Deriving specifications
-----------------------

Section `handleReply` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleReply`:

    0x840141a0     0x0    auipc a0,0x16
    0x840141a4     0x4    ld a0,1688(a0) # ffffffff8402a838 <ksCurThread>
    0x840141a8     0x8    andi a5,a0,-1024
    0x840141ac     0xc    addi a2,a5,96
    0x840141b0    0x10    ld a3,96(a5)
    0x840141b2    0x12    srli a5,a3,0x3b
    0x840141b6    0x16    beqz a5,ffffffff840141dc <handleReply+0x3c>
    0x840141b8    0x18    addi sp,sp,-16
    0x840141ba    0x1a    sd ra,8(sp)           ; stack access
    0x840141bc    0x1c    li a4,8
    0x840141be    0x1e    bne a5,a4,ffffffff840141d8 <handleReply+0x38>
    0x840141c2    0x22    andi a5,a3,1
    0x840141c6    0x26    bnez a5,ffffffff840141d8 <handleReply+0x38>
    0x840141c8    0x28    srli a3,a3,0x1
    0x840141ca    0x2a    andi a3,a3,1
    0x840141cc    0x2c    ld a1,8(a2)
    0x840141ce    0x2e    jal ra,ffffffff8401412c <doReplyTransfer>
    0x840141d2    0x32    ld ra,8(sp)           ; stack access
    0x840141d4    0x34    addi sp,sp,16
    0x840141d6    0x36    ret
    0x840141d8    0x38    jal ra,ffffffff840103da <halt>
    0x840141dc    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleReply` has 37 nodes.

Section setupCallerCap (186 of 269)
===================================

Deriving specifications
-----------------------

Section `setupCallerCap` consists of 27 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `setupCallerCap`:

    0x84013dea     0x0    addi sp,sp,-48
    0x84013dec     0x2    sd ra,40(sp)          ; stack access
    0x84013dee     0x4    sd s0,32(sp)          ; stack access
    0x84013df0     0x6    sd s1,24(sp)          ; stack access
    0x84013df2     0x8    sd s2,16(sp)          ; stack access
    0x84013df4     0xa    mv s2,a0
    0x84013df6     0xc    mv s1,a1
    0x84013df8     0xe    mv s0,a2
    0x84013dfa    0x10    li a1,5
    0x84013dfc    0x12    jal ra,ffffffff840125f6 <setThreadState>
    0x84013e00    0x16    slli s0,s0,0x1
    0x84013e02    0x18    andi s0,s0,2
    0x84013e04    0x1a    andi a3,s1,-1024
    0x84013e08    0x1e    andi a2,s2,-1024
    0x84013e0c    0x22    addi a3,a3,96
    0x84013e10    0x26    addi a2,a2,64
    0x84013e14    0x2a    li a0,1
    0x84013e16    0x2c    slli a0,a0,0x3e
    0x84013e18    0x2e    or a0,a0,s0
    0x84013e1a    0x30    mv a1,s2
    0x84013e1c    0x32    jal ra,ffffffff84011676 <cteInsert>
    0x84013e20    0x36    ld ra,40(sp)          ; stack access
    0x84013e22    0x38    ld s0,32(sp)          ; stack access
    0x84013e24    0x3a    ld s1,24(sp)          ; stack access
    0x84013e26    0x3c    ld s2,16(sp)          ; stack access
    0x84013e28    0x3e    addi sp,sp,48
    0x84013e2a    0x40    ret

Proving inst theorems
---------------------

27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setupCallerCap` has 38 nodes.

Section c_handle_interrupt (187 of 269)
=======================================

Deriving specifications
-----------------------

Section `c_handle_interrupt` consists of 4 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_interrupt`:

    0x84013db6    0x0    addi sp,sp,-16
    0x84013db8    0x2    sd ra,8(sp)           ; stack access
    0x84013dba    0x4    jal ra,ffffffff84013d68 <handleInterruptEntry>
    0x84013dbe    0x8    jal ra,ffffffff84010338 <restore_user_context>

Proving inst theorems
---------------------

4 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_interrupt` has 7 nodes.

Section invokeIRQHandler_SetIRQHandler (188 of 269)
===================================================

Deriving specifications
-----------------------

Section `invokeIRQHandler_SetIRQHandler` consists of 23 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeIRQHandler_SetIRQHandler`:

    0x840139f8     0x0    addi sp,sp,-48
    0x840139fa     0x2    sd ra,40(sp)          ; stack access
    0x840139fc     0x4    sd s0,32(sp)          ; stack access
    0x840139fe     0x6    sd s1,24(sp)          ; stack access
    0x84013a00     0x8    sd a1,0(sp)           ; stack access
    0x84013a02     0xa    sd a2,8(sp)           ; stack access
    0x84013a04     0xc    mv s1,a3
    0x84013a06     0xe    slli a0,a0,0x5
    0x84013a08    0x10    auipc s0,0x5
    0x84013a0c    0x14    addi s0,s0,1528 # ffffffff84019000 <intStateIRQNode>
    0x84013a10    0x18    add s0,s0,a0
    0x84013a12    0x1a    mv a0,s0
    0x84013a14    0x1c    jal ra,ffffffff840139c4 <cteDeleteOne>
    0x84013a18    0x20    mv a3,s0
    0x84013a1a    0x22    mv a2,s1
    0x84013a1c    0x24    ld a0,0(sp)           ; stack access
    0x84013a1e    0x26    ld a1,8(sp)           ; stack access
    0x84013a20    0x28    jal ra,ffffffff84011676 <cteInsert>
    0x84013a24    0x2c    ld ra,40(sp)          ; stack access
    0x84013a26    0x2e    ld s0,32(sp)          ; stack access
    0x84013a28    0x30    ld s1,24(sp)          ; stack access
    0x84013a2a    0x32    addi sp,sp,48
    0x84013a2c    0x34    ret

Proving inst theorems
---------------------

23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQHandler_SetIRQHandler` has 36 nodes.

Section cancelSignal (189 of 269)
=================================

Deriving specifications
-----------------------

Section `cancelSignal` consists of 49 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `cancelSignal`:

    0x84012f8e     0x0    addi sp,sp,-48
    0x84012f90     0x2    sd ra,40(sp)          ; stack access
    0x84012f92     0x4    sd s0,32(sp)          ; stack access
    0x84012f94     0x6    sd s1,24(sp)          ; stack access
    0x84012f96     0x8    mv s1,a0
    0x84012f98     0xa    mv s0,a1
    0x84012f9a     0xc    ld a5,8(a1)
    0x84012f9c     0xe    slli a1,a5,0x19
    0x84012fa0    0x12    srli a1,a1,0x19
    0x84012fa2    0x14    srli a5,a5,0x26
    0x84012fa4    0x16    andi a5,a5,1
    0x84012fa6    0x18    beqz a5,ffffffff84012fae <cancelSignal+0x20>
    0x84012fa8    0x1a    li a5,-1
    0x84012faa    0x1c    slli a5,a5,0x27
    0x84012fac    0x1e    or a1,a1,a5
    0x84012fae    0x20    ld a5,0(s0)
    0x84012fb0    0x22    srli a2,a5,0x19
    0x84012fb4    0x26    bgez a5,ffffffff84012fbe <cancelSignal+0x30>
    0x84012fb8    0x2a    li a5,-1
    0x84012fba    0x2c    slli a5,a5,0x27
    0x84012fbc    0x2e    or a2,a2,a5
    0x84012fbe    0x30    mv a0,s1
    0x84012fc0    0x32    jal ra,ffffffff84012e56 <tcbEPDequeue>
    0x84012fc4    0x36    ld a3,8(s0)
    0x84012fc6    0x38    li a4,-1
    0x84012fc8    0x3a    slli a5,a4,0x27
    0x84012fcc    0x3e    and a3,a3,a5
    0x84012fce    0x40    srli a4,a4,0x19
    0x84012fd0    0x42    and a4,a4,a0
    0x84012fd2    0x44    or a4,a4,a3
    0x84012fd4    0x46    sd a4,8(s0)
    0x84012fd6    0x48    ld a5,0(s0)
    0x84012fd8    0x4a    slli a5,a5,0x27
    0x84012fda    0x4c    srli a5,a5,0x27
    0x84012fdc    0x4e    slli a1,a1,0x19
    0x84012fde    0x50    or a5,a5,a1
    0x84012fe0    0x52    beqz a0,ffffffff84012ff6 <cancelSignal+0x68>
    0x84012fe2    0x54    sd a5,0(s0)
    0x84012fe4    0x56    li a1,0
    0x84012fe6    0x58    mv a0,s1
    0x84012fe8    0x5a    jal ra,ffffffff840125f6 <setThreadState>
    0x84012fec    0x5e    ld ra,40(sp)          ; stack access
    0x84012fee    0x60    ld s0,32(sp)          ; stack access
    0x84012ff0    0x62    ld s1,24(sp)          ; stack access
    0x84012ff2    0x64    addi sp,sp,48
    0x84012ff4    0x66    ret
    0x84012ff6    0x68    andi a5,a5,-4
    0x84012ff8    0x6a    sd a5,0(s0)
    0x84012ffa    0x6c    j ffffffff84012fe4 <cancelSignal+0x56>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
49 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelSignal` has 71 nodes.

Section switchToThread (190 of 269)
===================================

Deriving specifications
-----------------------

Section `switchToThread` consists of 13 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `switchToThread`:

    0x84012b74     0x0    addi sp,sp,-16
    0x84012b76     0x2    sd ra,8(sp)           ; stack access
    0x84012b78     0x4    sd s0,0(sp)           ; stack access
    0x84012b7a     0x6    mv s0,a0
    0x84012b7c     0x8    jal ra,ffffffff84010b9e <setVMRoot>
    0x84012b80     0xc    mv a0,s0
    0x84012b82     0xe    jal ra,ffffffff84012a98 <tcbSchedDequeue>
    0x84012b86    0x12    auipc a5,0x18
    0x84012b8a    0x16    sd s0,-846(a5) # ffffffff8402a838 <ksCurThread>
    0x84012b8e    0x1a    ld ra,8(sp)           ; stack access
    0x84012b90    0x1c    ld s0,0(sp)           ; stack access
    0x84012b92    0x1e    addi sp,sp,16
    0x84012b94    0x20    ret

Proving inst theorems
---------------------

13 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `switchToThread` has 21 nodes.

Section timerTick (191 of 269)
==============================

Deriving specifications
-----------------------

Section `timerTick` consists of 28 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `timerTick`:

    0x84012a46     0x0    addi sp,sp,-16
    0x84012a48     0x2    sd ra,8(sp)           ; stack access
    0x84012a4a     0x4    auipc a0,0x18
    0x84012a4e     0x8    ld a0,-530(a0) # ffffffff8402a838 <ksCurThread>
    0x84012a52     0xc    ld a5,280(a0)
    0x84012a56    0x10    andi a5,a5,15
    0x84012a58    0x12    li a4,1
    0x84012a5a    0x14    bne a5,a4,ffffffff84012a6c <timerTick+0x26>
    0x84012a5e    0x18    ld a5,368(a0)
    0x84012a62    0x1c    bgeu a4,a5,ffffffff84012a82 <timerTick+0x3c>
    0x84012a66    0x20    addi a5,a5,-1
    0x84012a68    0x22    sd a5,368(a0)
    0x84012a6c    0x26    auipc a4,0x18
    0x84012a70    0x2a    addi a4,a4,-604 # ffffffff8402a810 <ksDomainTime>
    0x84012a74    0x2e    ld a5,0(a4)
    0x84012a76    0x30    addi a5,a5,-1
    0x84012a78    0x32    sd a5,0(a4)
    0x84012a7a    0x34    beqz a5,ffffffff84012a92 <timerTick+0x4c>
    0x84012a7c    0x36    ld ra,8(sp)           ; stack access
    0x84012a7e    0x38    addi sp,sp,16
    0x84012a80    0x3a    ret
    0x84012a82    0x3c    li a5,5
    0x84012a84    0x3e    sd a5,368(a0)
    0x84012a88    0x42    jal ra,ffffffff840129ae <tcbSchedAppend>
    0x84012a8c    0x46    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84012a90    0x4a    j ffffffff84012a6c <timerTick+0x26>
    0x84012a92    0x4c    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84012a96    0x50    j ffffffff84012a7c <timerTick+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
28 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `timerTick` has 47 nodes.

Section possibleSwitchTo (192 of 269)
=====================================

Deriving specifications
-----------------------

Section `possibleSwitchTo` consists of 23 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `possibleSwitchTo`:

    0x840128c0     0x0    addi sp,sp,-16
    0x840128c2     0x2    sd ra,8(sp)           ; stack access
    0x840128c4     0x4    sd s0,0(sp)           ; stack access
    0x840128c6     0x6    mv s0,a0
    0x840128c8     0x8    ld a4,344(a0)
    0x840128cc     0xc    auipc a5,0x18
    0x840128d0    0x10    ld a5,-180(a5) # ffffffff8402a818 <ksCurDomain>
    0x840128d4    0x14    bne a4,a5,ffffffff840128ee <possibleSwitchTo+0x2e>
    0x840128d8    0x18    auipc a5,0x18
    0x840128dc    0x1c    ld a5,-176(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x840128e0    0x20    beqz a5,ffffffff840128fa <possibleSwitchTo+0x3a>
    0x840128e2    0x22    jal ra,ffffffff84012590 <rescheduleRequired>
    0x840128e6    0x26    mv a0,s0
    0x840128e8    0x28    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x840128ec    0x2c    j ffffffff840128f2 <possibleSwitchTo+0x32>
    0x840128ee    0x2e    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x840128f2    0x32    ld ra,8(sp)           ; stack access
    0x840128f4    0x34    ld s0,0(sp)           ; stack access
    0x840128f6    0x36    addi sp,sp,16
    0x840128f8    0x38    ret
    0x840128fa    0x3a    auipc a5,0x18
    0x840128fe    0x3e    sd a0,-210(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012902    0x42    j ffffffff840128f2 <possibleSwitchTo+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `possibleSwitchTo` has 39 nodes.

Section activateThread (193 of 269)
===================================

Deriving specifications
-----------------------

Section `activateThread` consists of 20 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `activateThread`:

    0x840126e8     0x0    addi sp,sp,-16
    0x840126ea     0x2    sd ra,8(sp)           ; stack access
    0x840126ec     0x4    auipc a0,0x18
    0x840126f0     0x8    ld a0,332(a0) # ffffffff8402a838 <ksCurThread>
    0x840126f4     0xc    ld a5,280(a0)
    0x840126f8    0x10    andi a5,a5,15
    0x840126fa    0x12    li a4,2
    0x840126fc    0x14    beq a5,a4,ffffffff84012710 <activateThread+0x28>
    0x84012700    0x18    li a4,7
    0x84012702    0x1a    beq a5,a4,ffffffff8401271e <activateThread+0x36>
    0x84012706    0x1e    li a4,1
    0x84012708    0x20    beq a5,a4,ffffffff8401271e <activateThread+0x36>
    0x8401270c    0x24    jal ra,ffffffff840103da <halt>
    0x84012710    0x28    ld a5,264(a0)
    0x84012714    0x2c    sd a5,272(a0)
    0x84012718    0x30    li a1,1
    0x8401271a    0x32    jal ra,ffffffff840125f6 <setThreadState>
    0x8401271e    0x36    ld ra,8(sp)           ; stack access
    0x84012720    0x38    addi sp,sp,16
    0x84012722    0x3a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
20 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `activateThread` has 35 nodes.

Section createObject (194 of 269)
=================================

Deriving specifications
-----------------------

Section `createObject` consists of 76 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `createObject`:

    0x840123c2     0x0    addi sp,sp,-32
    0x840123c4     0x2    sd ra,24(sp)          ; stack access
    0x840123c6     0x4    li a5,4
    0x840123c8     0x6    bltu a5,a0,ffffffff8401240c <createObject+0x4a>
    0x840123cc     0xa    li a5,2
    0x840123ce     0xc    beq a0,a5,ffffffff8401243c <createObject+0x7a>
    0x840123d2    0x10    bltu a5,a0,ffffffff8401241e <createObject+0x5c>
    0x840123d6    0x14    beqz a0,ffffffff8401245e <createObject+0x9c>
    0x840123d8    0x16    li a5,1
    0x840123da    0x18    bne a0,a5,ffffffff8401247a <createObject+0xb8>
    0x840123de    0x1c    li a5,32
    0x840123e2    0x20    sd a5,768(a1) # fffffffff8000300 <ki_end+0x73fd1300>
    0x840123e6    0x24    li a5,5
    0x840123e8    0x26    sd a5,880(a1)
    0x840123ec    0x2a    auipc a5,0x18
    0x840123f0    0x2e    ld a5,1068(a5) # ffffffff8402a818 <ksCurDomain>
    0x840123f4    0x32    sd a5,856(a1)
    0x840123f8    0x36    addi a1,a1,512
    0x840123fc    0x3a    slli a1,a1,0x19
    0x840123fe    0x3c    srli a1,a1,0x19
    0x84012400    0x3e    li a5,3
    0x84012402    0x40    slli a5,a5,0x3d
    0x84012404    0x42    or a1,a1,a5
    0x84012406    0x44    sd a1,0(sp)           ; stack access
    0x84012408    0x46    sd zero,8(sp)         ; stack access
    0x8401240a    0x48    j ffffffff84012414 <createObject+0x52>
    0x8401240c    0x4a    jal ra,ffffffff84011254 <Arch_createObject>
    0x84012410    0x4e    sd a0,0(sp)           ; stack access
    0x84012412    0x50    sd a1,8(sp)           ; stack access
    0x84012414    0x52    ld a0,0(sp)           ; stack access
    0x84012416    0x54    ld a1,8(sp)           ; stack access
    0x84012418    0x56    ld ra,24(sp)          ; stack access
    0x8401241a    0x58    addi sp,sp,32
    0x8401241c    0x5a    ret
    0x8401241e    0x5c    li a5,3
    0x84012420    0x5e    beq a0,a5,ffffffff8401244e <createObject+0x8c>
    0x84012424    0x62    andi a2,a2,63
    0x84012428    0x66    slli a2,a2,0x2f
    0x8401242a    0x68    slli a1,a1,0x19
    0x8401242c    0x6a    srli a1,a1,0x1a
    0x8401242e    0x6c    or a2,a2,a1
    0x84012430    0x6e    li a1,5
    0x84012432    0x70    slli a1,a1,0x3c
    0x84012434    0x72    or a2,a2,a1
    0x84012436    0x74    sd a2,0(sp)           ; stack access
    0x84012438    0x76    sd zero,8(sp)         ; stack access
    0x8401243a    0x78    j ffffffff84012414 <createObject+0x52>
    0x8401243c    0x7a    slli a1,a1,0x19
    0x8401243e    0x7c    srli a1,a1,0x19
    0x84012440    0x7e    li a5,79
    0x84012444    0x82    slli a5,a5,0x37
    0x84012446    0x84    or a1,a1,a5
    0x84012448    0x86    sd a1,0(sp)           ; stack access
    0x8401244a    0x88    sd zero,8(sp)         ; stack access
    0x8401244c    0x8a    j ffffffff84012414 <createObject+0x52>
    0x8401244e    0x8c    slli a1,a1,0x19
    0x84012450    0x8e    srli a1,a1,0x19
    0x84012452    0x90    li a5,27
    0x84012454    0x92    slli a5,a5,0x39
    0x84012456    0x94    or a1,a1,a5
    0x84012458    0x96    sd a1,0(sp)           ; stack access
    0x8401245a    0x98    sd zero,8(sp)         ; stack access
    0x8401245c    0x9a    j ffffffff84012414 <createObject+0x52>
    0x8401245e    0x9c    slli a1,a1,0x19
    0x84012460    0x9e    srli a1,a1,0x19
    0x84012462    0xa0    li a5,1
    0x84012464    0xa2    slli a5,a5,0x3c
    0x84012466    0xa4    or a1,a1,a5
    0x84012468    0xa6    sd a1,0(sp)           ; stack access
    0x8401246a    0xa8    snez a3,a3
    0x8401246e    0xac    slli a3,a3,0x6
    0x84012470    0xae    andi a2,a2,63
    0x84012474    0xb2    or a2,a2,a3
    0x84012476    0xb4    sd a2,8(sp)           ; stack access
    0x84012478    0xb6    j ffffffff84012414 <createObject+0x52>
    0x8401247a    0xb8    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
76 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createObject` has 111 nodes.

Section maskCapRights (195 of 269)
==================================

Deriving specifications
-----------------------

Section `maskCapRights` consists of 111 instructions.


Stack analysis
---------------

17 stack accesses found. Annotated code for `maskCapRights`:

    0x8401229a      0x0    addi sp,sp,-48
    0x8401229c      0x2    sd ra,40(sp)          ; stack access
    0x8401229e      0x4    sd a1,0(sp)           ; stack access
    0x840122a0      0x6    sd a2,8(sp)           ; stack access
    0x840122a2      0x8    srli a5,a1,0x3b
    0x840122a6      0xc    andi a4,a5,1
    0x840122aa     0x10    bnez a4,ffffffff8401230c <maskCapRights+0x72>
    0x840122ac     0x12    ld a3,8(sp)           ; stack access
    0x840122ae     0x14    li a4,20
    0x840122b0     0x16    bltu a4,a5,ffffffff840123a0 <maskCapRights+0x106>
    0x840122b4     0x1a    li a4,5
    0x840122b6     0x1c    bgeu a4,a5,ffffffff8401231e <maskCapRights+0x84>
    0x840122ba     0x20    li a4,1
    0x840122bc     0x22    sll a5,a4,a5
    0x840122c0     0x26    lui a4,0x155
    0x840122c4     0x2a    addi a4,a4,1024 # 155400 <KERNEL_OFFSET-0xfffffffeffeaac00>
    0x840122c8     0x2e    and a4,a4,a5
    0x840122ca     0x30    bnez a4,ffffffff840123a4 <maskCapRights+0x10a>
    0x840122cc     0x32    andi a4,a5,256
    0x840122d0     0x36    bnez a4,ffffffff840123aa <maskCapRights+0x110>
    0x840122d2     0x38    andi a5,a5,64
    0x840122d6     0x3c    beqz a5,ffffffff840123a0 <maskCapRights+0x106>
    0x840122d8     0x3e    srli a5,a1,0x39
    0x840122dc     0x42    and a5,a5,a0
    0x840122de     0x44    li a4,1
    0x840122e0     0x46    and a5,a5,a4
    0x840122e2     0x48    slli a5,a5,0x39
    0x840122e4     0x4a    li a2,-1
    0x840122e6     0x4c    slli a6,a2,0x39
    0x840122ea     0x50    addi a6,a6,-1
    0x840122ec     0x52    and a6,a1,a6
    0x840122f0     0x56    or a5,a5,a6
    0x840122f4     0x5a    slli a2,a2,0x3a
    0x840122f6     0x5c    addi a2,a2,-1
    0x840122f8     0x5e    and a5,a5,a2
    0x840122fa     0x60    srli a0,a0,0x1
    0x840122fc     0x62    srli a1,a1,0x3a
    0x840122fe     0x64    and a1,a1,a0
    0x84012300     0x66    and a4,a4,a1
    0x84012302     0x68    slli a4,a4,0x3a
    0x84012304     0x6a    or a5,a5,a4
    0x84012306     0x6c    sd a5,16(sp)          ; stack access
    0x84012308     0x6e    sd a3,24(sp)          ; stack access
    0x8401230a     0x70    j ffffffff84012314 <maskCapRights+0x7a>
    0x8401230c     0x72    jal ra,ffffffff84010ec8 <Arch_maskCapRights>
    0x84012310     0x76    sd a0,16(sp)          ; stack access
    0x84012312     0x78    sd a1,24(sp)          ; stack access
    0x84012314     0x7a    ld a0,16(sp)          ; stack access
    0x84012316     0x7c    ld a1,24(sp)          ; stack access
    0x84012318     0x7e    ld ra,40(sp)          ; stack access
    0x8401231a     0x80    addi sp,sp,48
    0x8401231c     0x82    ret
    0x8401231e     0x84    li a4,4
    0x84012320     0x86    bne a5,a4,ffffffff84012398 <maskCapRights+0xfe>
    0x84012324     0x8a    srli a5,a1,0x37
    0x84012328     0x8e    and a5,a5,a0
    0x8401232a     0x90    li a4,1
    0x8401232c     0x92    and a5,a5,a4
    0x8401232e     0x94    slli a5,a5,0x37
    0x84012330     0x96    li a2,-1
    0x84012332     0x98    slli a6,a2,0x37
    0x84012336     0x9c    addi a6,a6,-1
    0x84012338     0x9e    and a6,a1,a6
    0x8401233c     0xa2    or a5,a5,a6
    0x84012340     0xa6    slli a6,a2,0x38
    0x84012344     0xaa    addi a6,a6,-1
    0x84012346     0xac    and a5,a5,a6
    0x8401234a     0xb0    srli a6,a0,0x1
    0x8401234e     0xb4    srli a7,a1,0x38
    0x84012352     0xb8    and a6,a6,a7
    0x84012356     0xbc    and a6,a4,a6
    0x8401235a     0xc0    slli a6,a6,0x38
    0x8401235c     0xc2    or a5,a5,a6
    0x84012360     0xc6    slli a6,a2,0x39
    0x84012364     0xca    addi a6,a6,-1
    0x84012366     0xcc    and a5,a5,a6
    0x8401236a     0xd0    srli a6,a0,0x2
    0x8401236e     0xd4    srli a7,a1,0x39
    0x84012372     0xd8    and a6,a6,a7
    0x84012376     0xdc    and a6,a4,a6
    0x8401237a     0xe0    slli a6,a6,0x39
    0x8401237c     0xe2    or a5,a5,a6
    0x84012380     0xe6    slli a2,a2,0x3a
    0x84012382     0xe8    addi a2,a2,-1
    0x84012384     0xea    and a5,a5,a2
    0x84012386     0xec    srli a0,a0,0x3
    0x84012388     0xee    srli a1,a1,0x3a
    0x8401238a     0xf0    and a1,a1,a0
    0x8401238c     0xf2    and a4,a4,a1
    0x8401238e     0xf4    slli a4,a4,0x3a
    0x84012390     0xf6    or a5,a5,a4
    0x84012392     0xf8    sd a5,16(sp)          ; stack access
    0x84012394     0xfa    sd a3,24(sp)          ; stack access
    0x84012396     0xfc    j ffffffff84012314 <maskCapRights+0x7a>
    0x84012398     0xfe    bltu a4,a5,ffffffff840123a0 <maskCapRights+0x106>
    0x8401239c    0x102    andi a5,a5,-3
    0x8401239e    0x104    beqz a5,ffffffff840123a4 <maskCapRights+0x10a>
    0x840123a0    0x106    jal ra,ffffffff840103da <halt>
    0x840123a4    0x10a    sd a1,16(sp)          ; stack access
    0x840123a6    0x10c    sd a3,24(sp)          ; stack access
    0x840123a8    0x10e    j ffffffff84012314 <maskCapRights+0x7a>
    0x840123aa    0x110    srli a5,a0,0x2
    0x840123ae    0x114    srli a0,a1,0x1
    0x840123b2    0x118    and a5,a5,a0
    0x840123b4    0x11a    slli a5,a5,0x1
    0x840123b6    0x11c    andi a5,a5,2
    0x840123b8    0x11e    andi a1,a1,-3
    0x840123ba    0x120    or a1,a1,a5
    0x840123bc    0x122    sd a1,16(sp)          ; stack access
    0x840123be    0x124    sd a3,24(sp)          ; stack access
    0x840123c0    0x126    j ffffffff84012314 <maskCapRights+0x7a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
111 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `maskCapRights` has 149 nodes.

Section sameObjectAs (196 of 269)
=================================

Deriving specifications
-----------------------

Section `sameObjectAs` consists of 37 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `sameObjectAs`:

    0x84012122     0x0    addi sp,sp,-48
    0x84012124     0x2    sd ra,40(sp)          ; stack access
    0x84012126     0x4    sd a0,16(sp)          ; stack access
    0x84012128     0x6    sd a1,24(sp)          ; stack access
    0x8401212a     0x8    sd a2,0(sp)           ; stack access
    0x8401212c     0xa    sd a3,8(sp)           ; stack access
    0x8401212e     0xc    srli a0,a0,0x3b
    0x84012130     0xe    li a5,2
    0x84012132    0x10    beq a0,a5,ffffffff84012176 <sameObjectAs+0x54>
    0x84012136    0x14    li a4,14
    0x84012138    0x16    beq a0,a4,ffffffff8401215a <sameObjectAs+0x38>
    0x8401213c    0x1a    andi a0,a0,1
    0x8401213e    0x1c    beqz a0,ffffffff84012148 <sameObjectAs+0x26>
    0x84012140    0x1e    srli a5,a2,0x3b
    0x84012144    0x22    andi a5,a5,1
    0x84012146    0x24    bnez a5,ffffffff84012168 <sameObjectAs+0x46>
    0x84012148    0x26    ld a2,0(sp)           ; stack access
    0x8401214a    0x28    ld a3,8(sp)           ; stack access
    0x8401214c    0x2a    ld a0,16(sp)          ; stack access
    0x8401214e    0x2c    ld a1,24(sp)          ; stack access
    0x84012150    0x2e    jal ra,ffffffff84011c9a <sameRegionAs>
    0x84012154    0x32    ld ra,40(sp)          ; stack access
    0x84012156    0x34    addi sp,sp,48
    0x84012158    0x36    ret
    0x8401215a    0x38    srli a5,a2,0x3b
    0x8401215e    0x3c    li a4,16
    0x84012160    0x3e    li a0,0
    0x84012162    0x40    bne a5,a4,ffffffff84012148 <sameObjectAs+0x26>
    0x84012166    0x44    j ffffffff84012154 <sameObjectAs+0x32>
    0x84012168    0x46    ld a2,0(sp)           ; stack access
    0x8401216a    0x48    ld a3,8(sp)           ; stack access
    0x8401216c    0x4a    ld a0,16(sp)          ; stack access
    0x8401216e    0x4c    ld a1,24(sp)          ; stack access
    0x84012170    0x4e    jal ra,ffffffff84011182 <Arch_sameObjectAs>
    0x84012174    0x52    j ffffffff84012154 <sameObjectAs+0x32>
    0x84012176    0x54    li a0,0
    0x84012178    0x56    j ffffffff84012154 <sameObjectAs+0x32>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
37 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameObjectAs` has 64 nodes.

Section deriveCap (197 of 269)
==============================

Deriving specifications
-----------------------

Section `deriveCap` consists of 51 instructions.


Stack analysis
---------------

Section `deriveCap` expects pointer to stack in a0.
16 stack accesses found. Annotated code for `deriveCap`:

    0x840120a8     0x0    addi sp,sp,-64
    0x840120aa     0x2    sd ra,56(sp)          ; stack access
    0x840120ac     0x4    sd s0,48(sp)          ; stack access
    0x840120ae     0x6    sd s1,40(sp)          ; stack access
    0x840120b0     0x8    sd s2,32(sp)          ; stack access
    0x840120b2     0xa    sd s3,24(sp)          ; stack access
    0x840120b4     0xc    mv s0,a0
    0x840120b6     0xe    sd a2,0(sp)           ; stack access
    0x840120b8    0x10    sd a3,8(sp)           ; stack access
    0x840120ba    0x12    mv s1,a2
    0x840120bc    0x14    srli a5,a2,0x3b
    0x840120c0    0x18    andi s3,a5,1
    0x840120c4    0x1c    bnez s3,ffffffff840120e6 <deriveCap+0x3e>
    0x840120c8    0x20    ld s2,8(sp)           ; stack access
    0x840120ca    0x22    li a4,8
    0x840120cc    0x24    beq a5,a4,ffffffff84012114 <deriveCap+0x6c>
    0x840120d0    0x28    bltu a4,a5,ffffffff840120ec <deriveCap+0x44>
    0x840120d4    0x2c    li a4,2
    0x840120d6    0x2e    bne a5,a4,ffffffff840120f2 <deriveCap+0x4a>
    0x840120da    0x32    mv a0,a1
    0x840120dc    0x34    jal ra,ffffffff8401206a <ensureNoChildren>
    0x840120e0    0x38    bnez a0,ffffffff8401211a <deriveCap+0x72>
    0x840120e2    0x3a    mv s3,a0
    0x840120e4    0x3c    j ffffffff840120f2 <deriveCap+0x4a>
    0x840120e6    0x3e    jal ra,ffffffff84010e5a <Arch_deriveCap>
    0x840120ea    0x42    j ffffffff840120fc <deriveCap+0x54>
    0x840120ec    0x44    addi a5,a5,-14
    0x840120ee    0x46    andi a5,a5,-5
    0x840120f0    0x48    beqz a5,ffffffff8401210c <deriveCap+0x64>
    0x840120f2    0x4a    sd s3,0(s0)           ; stack access
    0x840120f6    0x4e    sd s1,8(s0)           ; stack access
    0x840120f8    0x50    sd s2,16(s0)          ; stack access
    0x840120fc    0x54    mv a0,s0
    0x840120fe    0x56    ld ra,56(sp)          ; stack access
    0x84012100    0x58    ld s0,48(sp)          ; stack access
    0x84012102    0x5a    ld s1,40(sp)          ; stack access
    0x84012104    0x5c    ld s2,32(sp)          ; stack access
    0x84012106    0x5e    ld s3,24(sp)          ; stack access
    0x84012108    0x60    addi sp,sp,64
    0x8401210a    0x62    ret
    0x8401210c    0x64    mv s2,a5
    0x8401210e    0x66    mv s1,a5
    0x84012110    0x68    mv s3,a5
    0x84012112    0x6a    j ffffffff840120f2 <deriveCap+0x4a>
    0x84012114    0x6c    mv s2,s3
    0x84012116    0x6e    mv s1,s3
    0x84012118    0x70    j ffffffff840120f2 <deriveCap+0x4a>
    0x8401211a    0x72    mv s2,s3
    0x8401211c    0x74    mv s1,s3
    0x8401211e    0x76    mv s3,a0
    0x84012120    0x78    j ffffffff840120f2 <deriveCap+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
51 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `deriveCap` has 82 nodes.

Section getObjectSize (198 of 269)
==================================

Deriving specifications
-----------------------

Section `getObjectSize` consists of 27 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `getObjectSize`:

    0x84011c22     0x0    addi sp,sp,-16
    0x84011c24     0x2    sd ra,8(sp)           ; stack access
    0x84011c26     0x4    mv a5,a0
    0x84011c28     0x6    li a4,4
    0x84011c2a     0x8    bltu a4,a0,ffffffff84011c48 <getObjectSize+0x26>
    0x84011c2e     0xc    li a4,2
    0x84011c30     0xe    beq a0,a4,ffffffff84011c60 <getObjectSize+0x3e>
    0x84011c34    0x12    bltu a4,a0,ffffffff84011c4e <getObjectSize+0x2c>
    0x84011c38    0x16    beqz a0,ffffffff84011c64 <getObjectSize+0x42>
    0x84011c3a    0x18    li a4,1
    0x84011c3c    0x1a    li a0,10
    0x84011c3e    0x1c    bne a5,a4,ffffffff84011c5c <getObjectSize+0x3a>
    0x84011c42    0x20    ld ra,8(sp)           ; stack access
    0x84011c44    0x22    addi sp,sp,16
    0x84011c46    0x24    ret
    0x84011c48    0x26    jal ra,ffffffff84011222 <Arch_getObjectSize>
    0x84011c4c    0x2a    j ffffffff84011c42 <getObjectSize+0x20>
    0x84011c4e    0x2c    li a4,3
    0x84011c50    0x2e    li a0,5
    0x84011c52    0x30    beq a5,a4,ffffffff84011c42 <getObjectSize+0x20>
    0x84011c56    0x34    addi a0,a1,5 # fffffffff8000005 <ki_end+0x73fd1005>
    0x84011c5a    0x38    j ffffffff84011c42 <getObjectSize+0x20>
    0x84011c5c    0x3a    jal ra,ffffffff840103da <halt>
    0x84011c60    0x3e    li a0,4
    0x84011c62    0x40    j ffffffff84011c42 <getObjectSize+0x20>
    0x84011c64    0x42    mv a0,a1
    0x84011c66    0x44    j ffffffff84011c42 <getObjectSize+0x20>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
27 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getObjectSize` has 44 nodes.

Section invokeIRQControl (199 of 269)
=====================================

Deriving specifications
-----------------------

Section `invokeIRQControl` consists of 25 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `invokeIRQControl`:

    0x84011ae6     0x0    addi sp,sp,-48
    0x84011ae8     0x2    sd ra,40(sp)          ; stack access
    0x84011aea     0x4    sd s0,32(sp)          ; stack access
    0x84011aec     0x6    sd s1,24(sp)          ; stack access
    0x84011aee     0x8    sd s2,16(sp)          ; stack access
    0x84011af0     0xa    mv s0,a0
    0x84011af2     0xc    mv s2,a1
    0x84011af4     0xe    mv s1,a2
    0x84011af6    0x10    mv a1,a0
    0x84011af8    0x12    li a0,1
    0x84011afa    0x14    jal ra,ffffffff84011a7e <setIRQState>
    0x84011afe    0x18    slli s0,s0,0x34
    0x84011b00    0x1a    mv a3,s2
    0x84011b02    0x1c    mv a2,s1
    0x84011b04    0x1e    li a0,-1
    0x84011b06    0x20    slli a0,a0,0x3f
    0x84011b08    0x22    srli a1,s0,0x34
    0x84011b0c    0x26    jal ra,ffffffff84011676 <cteInsert>
    0x84011b10    0x2a    li a0,0
    0x84011b12    0x2c    ld ra,40(sp)          ; stack access
    0x84011b14    0x2e    ld s0,32(sp)          ; stack access
    0x84011b16    0x30    ld s1,24(sp)          ; stack access
    0x84011b18    0x32    ld s2,16(sp)          ; stack access
    0x84011b1a    0x34    addi sp,sp,48
    0x84011b1c    0x36    ret

Proving inst theorems
---------------------

25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeIRQControl` has 36 nodes.

Section getReceiveSlots (200 of 269)
====================================

Deriving specifications
-----------------------

Section `getReceiveSlots` consists of 38 instructions.

RVC_FFFT__________FF.

Stack analysis
---------------

13 stack accesses found. Annotated code for `getReceiveSlots`:

    0x840119e2     0x0    beqz a1,ffffffff84011a36 <getReceiveSlots+0x54>
    0x840119e4     0x2    addi sp,sp,-96
    0x840119e6     0x4    sd ra,88(sp)          ; stack access
    0x840119e8     0x6    sd s0,80(sp)          ; stack access
    0x840119ea     0x8    sd s1,72(sp)          ; stack access
    0x840119ec     0xa    ld s0,1008(a1) # fffffffff80003f0 <ki_end+0x73fd13f0>
    0x840119f0     0xe    ld s1,1016(a1)
    0x840119f4    0x12    ld a2,1000(a1)
    0x840119f8    0x16    mv a1,a0
    0x840119fa    0x18    addi a0,sp,40
    0x840119fc    0x1a    jal ra,ffffffff84011444 <lookupCap>
    0x84011a00    0x1e    ld a5,40(sp)          ; stack access
    0x84011a02    0x20    li a0,0
    0x84011a04    0x22    bnez a5,ffffffff84011a2c <getReceiveSlots+0x4a>
    0x84011a06    0x24    ld a0,48(sp)          ; stack access
    0x84011a08    0x26    sd a0,8(sp)           ; stack access
    0x84011a0a    0x28    ld a1,56(sp)          ; stack access
    0x84011a0c    0x2a    sd a1,16(sp)          ; stack access
    0x84011a0e    0x2c    mv a3,s1
    0x84011a10    0x2e    mv a2,s0
    0x84011a12    0x30    jal ra,ffffffff840115a6 <lookupTargetSlot>
    0x84011a16    0x34    sd a0,24(sp)          ; stack access
    0x84011a18    0x36    sd a1,32(sp)          ; stack access
    0x84011a1a    0x38    bnez a0,ffffffff84011a3a <getReceiveSlots+0x58>
    0x84011a1c    0x3a    ld a5,0(a1)
    0x84011a1e    0x3c    srli a5,a5,0x3b
    0x84011a20    0x3e    seqz a5,a5
    0x84011a24    0x42    neg a5,a5
    0x84011a28    0x46    and a0,a1,a5
    0x84011a2c    0x4a    ld ra,88(sp)          ; stack access
    0x84011a2e    0x4c    ld s0,80(sp)          ; stack access
    0x84011a30    0x4e    ld s1,72(sp)          ; stack access
    0x84011a32    0x50    addi sp,sp,96
    0x84011a34    0x52    ret
    0x84011a36    0x54    mv a0,a1
    0x84011a38    0x56    ret
    0x84011a3a    0x58    li a0,0
    0x84011a3c    0x5a    j ffffffff84011a2c <getReceiveSlots+0x4a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
38 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `getReceiveSlots` has 65 nodes.

Section invokeCNodeRotate (201 of 269)
======================================

Deriving specifications
-----------------------

Section `invokeCNodeRotate` consists of 32 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `invokeCNodeRotate`:

    0x840118ea     0x0    addi sp,sp,-64
    0x840118ec     0x2    sd ra,56(sp)          ; stack access
    0x840118ee     0x4    sd s0,48(sp)          ; stack access
    0x840118f0     0x6    sd s1,40(sp)          ; stack access
    0x840118f2     0x8    sd a0,16(sp)          ; stack access
    0x840118f4     0xa    sd a1,24(sp)          ; stack access
    0x840118f6     0xc    sd a2,0(sp)           ; stack access
    0x840118f8     0xe    sd a3,8(sp)           ; stack access
    0x840118fa    0x10    mv s0,a4
    0x840118fc    0x12    mv s1,a5
    0x840118fe    0x14    beq a4,a6,ffffffff84011926 <invokeCNodeRotate+0x3c>
    0x84011902    0x18    mv a3,a6
    0x84011904    0x1a    mv a2,a5
    0x84011906    0x1c    ld a0,0(sp)           ; stack access
    0x84011908    0x1e    ld a1,8(sp)           ; stack access
    0x8401190a    0x20    jal ra,ffffffff840117b2 <cteMove>
    0x8401190e    0x24    mv a3,s1
    0x84011910    0x26    mv a2,s0
    0x84011912    0x28    ld a0,16(sp)          ; stack access
    0x84011914    0x2a    ld a1,24(sp)          ; stack access
    0x84011916    0x2c    jal ra,ffffffff840117b2 <cteMove>
    0x8401191a    0x30    li a0,0
    0x8401191c    0x32    ld ra,56(sp)          ; stack access
    0x8401191e    0x34    ld s0,48(sp)          ; stack access
    0x84011920    0x36    ld s1,40(sp)          ; stack access
    0x84011922    0x38    addi sp,sp,64
    0x84011924    0x3a    ret
    0x84011926    0x3c    mv a3,a2
    0x84011928    0x3e    ld a4,8(sp)           ; stack access
    0x8401192a    0x40    mv a2,s0
    0x8401192c    0x42    jal ra,ffffffff8401185e <cteSwap>
    0x84011930    0x46    j ffffffff8401191a <invokeCNodeRotate+0x30>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
32 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeRotate` has 53 nodes.

Section invokeCNodeSaveCaller (202 of 269)
==========================================

Deriving specifications
-----------------------

Section `invokeCNodeSaveCaller` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `invokeCNodeSaveCaller`:

    0x8401181a     0x0    addi sp,sp,-32
    0x8401181c     0x2    sd ra,24(sp)          ; stack access
    0x8401181e     0x4    auipc a5,0x19
    0x84011822     0x8    ld a5,26(a5) # ffffffff8402a838 <ksCurThread>
    0x84011826     0xc    andi a5,a5,-1024
    0x8401182a    0x10    addi a2,a5,96
    0x8401182e    0x14    ld a5,96(a5)
    0x84011830    0x16    sd a5,0(sp)           ; stack access
    0x84011832    0x18    ld a4,8(a2)
    0x84011834    0x1a    sd a4,8(sp)           ; stack access
    0x84011836    0x1c    srli a4,a5,0x3b
    0x8401183a    0x20    beqz a4,ffffffff84011846 <invokeCNodeSaveCaller+0x2c>
    0x8401183c    0x22    li a3,8
    0x8401183e    0x24    bne a4,a3,ffffffff8401185a <invokeCNodeSaveCaller+0x40>
    0x84011842    0x28    andi a5,a5,1
    0x84011844    0x2a    beqz a5,ffffffff8401184e <invokeCNodeSaveCaller+0x34>
    0x84011846    0x2c    li a0,0
    0x84011848    0x2e    ld ra,24(sp)          ; stack access
    0x8401184a    0x30    addi sp,sp,32
    0x8401184c    0x32    ret
    0x8401184e    0x34    mv a3,a0
    0x84011850    0x36    ld a0,0(sp)           ; stack access
    0x84011852    0x38    ld a1,8(sp)           ; stack access
    0x84011854    0x3a    jal ra,ffffffff840117b2 <cteMove>
    0x84011858    0x3e    j ffffffff84011846 <invokeCNodeSaveCaller+0x2c>
    0x8401185a    0x40    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeCNodeSaveCaller` has 44 nodes.

Section handleFaultReply (203 of 269)
=====================================

Deriving specifications
-----------------------

Section `handleFaultReply` consists of 123 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `handleFaultReply`:

    0x84010832      0x0    addi sp,sp,-48
    0x84010834      0x2    sd ra,40(sp)          ; stack access
    0x84010836      0x4    sd s0,32(sp)          ; stack access
    0x84010838      0x6    sd s1,24(sp)          ; stack access
    0x8401083a      0x8    sd s2,16(sp)          ; stack access
    0x8401083c      0xa    sd s3,8(sp)           ; stack access
    0x8401083e      0xc    mv s0,a0
    0x84010840      0xe    ld a4,80(a1)
    0x84010842     0x10    andi a3,a4,127
    0x84010846     0x14    li a5,120
    0x8401084a     0x18    bgeu a5,a3,ffffffff84010856 <handleFaultReply+0x24>
    0x8401084e     0x1c    andi a4,a4,-128
    0x84010852     0x20    ori a4,a4,120
    0x84010856     0x24    srli s1,a4,0xc
    0x8401085a     0x28    andi a6,a4,127
    0x8401085e     0x2c    ld a5,312(s0)
    0x84010862     0x30    andi a0,a5,15
    0x84010866     0x34    li a5,2
    0x84010868     0x36    beq a0,a5,ffffffff84010882 <handleFaultReply+0x50>
    0x8401086c     0x3a    li a5,3
    0x8401086e     0x3c    beq a0,a5,ffffffff84010914 <handleFaultReply+0xe2>
    0x84010872     0x40    li a5,1
    0x84010874     0x42    beq a0,a5,ffffffff84010906 <handleFaultReply+0xd4>
    0x84010878     0x46    li a5,5
    0x8401087a     0x48    bne a0,a5,ffffffff8401097e <handleFaultReply+0x14c>
    0x8401087e     0x4c    li a0,1
    0x84010880     0x4e    j ffffffff84010906 <handleFaultReply+0xd4>
    0x84010882     0x50    mv s2,a6
    0x84010884     0x52    li a5,10
    0x84010886     0x54    bgeu a5,a6,ffffffff8401088c <handleFaultReply+0x5a>
    0x8401088a     0x58    li s2,10
    0x8401088c     0x5a    mv a7,s2
    0x8401088e     0x5c    li a5,4
    0x84010890     0x5e    bgeu a5,s2,ffffffff84010896 <handleFaultReply+0x64>
    0x84010894     0x62    li a7,4
    0x84010896     0x64    beqz a6,ffffffff84010902 <handleFaultReply+0xd0>
    0x8401089a     0x68    auipc a0,0x7
    0x8401089e     0x6c    addi a0,a0,-1170 # ffffffff84017408 <fault_messages>
    0x840108a2     0x70    auipc a2,0x7
    0x840108a6     0x74    addi a2,a2,-1210 # ffffffff840173e8 <msgRegisters>
    0x840108aa     0x78    li a3,0
    0x840108ac     0x7a    ld a5,0(a0)
    0x840108ae     0x7c    ld a4,0(a2)
    0x840108b0     0x7e    slli a4,a4,0x3
    0x840108b2     0x80    add a4,a4,a1
    0x840108b4     0x82    ld a4,0(a4)
    0x840108b6     0x84    slli a5,a5,0x3
    0x840108b8     0x86    add a5,a5,s0
    0x840108ba     0x88    sd a4,0(a5)
    0x840108bc     0x8a    addi a3,a3,1
    0x840108be     0x8c    addi a0,a0,8
    0x840108c0     0x8e    addi a2,a2,8
    0x840108c2     0x90    bltu a3,a7,ffffffff840108ac <handleFaultReply+0x7a>
    0x840108c6     0x94    li a4,1
    0x840108c8     0x96    beqz a6,ffffffff840108ce <handleFaultReply+0x9c>
    0x840108cc     0x9a    mv a4,a7
    0x840108ce     0x9c    mv s3,a4
    0x840108d0     0x9e    bgeu a4,s2,ffffffff84010902 <handleFaultReply+0xd0>
    0x840108d4     0xa2    li a0,0
    0x840108d6     0xa4    jal ra,ffffffff840107a2 <lookupIPCBuffer>
    0x840108da     0xa8    beqz a0,ffffffff84010902 <handleFaultReply+0xd0>
    0x840108dc     0xaa    slli a4,s3,0x3
    0x840108e0     0xae    auipc a3,0x7
    0x840108e4     0xb2    addi a3,a3,-1240 # ffffffff84017408 <fault_messages>
    0x840108e8     0xb6    add a3,a3,a4
    0x840108ea     0xb8    add a4,a4,a0
    0x840108ec     0xba    slli s2,s2,0x3
    0x840108ee     0xbc    add s2,s2,a0
    0x840108f0     0xbe    ld a5,0(a3)
    0x840108f2     0xc0    ld a2,8(a4)
    0x840108f4     0xc2    slli a5,a5,0x3
    0x840108f6     0xc4    add a5,a5,s0
    0x840108f8     0xc6    sd a2,0(a5)
    0x840108fa     0xc8    addi a3,a3,8
    0x840108fc     0xca    addi a4,a4,8
    0x840108fe     0xcc    bne a4,s2,ffffffff840108f0 <handleFaultReply+0xbe>
    0x84010902     0xd0    seqz a0,s1
    0x84010906     0xd4    ld ra,40(sp)          ; stack access
    0x84010908     0xd6    ld s0,32(sp)          ; stack access
    0x8401090a     0xd8    ld s1,24(sp)          ; stack access
    0x8401090c     0xda    ld s2,16(sp)          ; stack access
    0x8401090e     0xdc    ld s3,8(sp)           ; stack access
    0x84010910     0xde    addi sp,sp,48
    0x84010912     0xe0    ret
    0x84010914     0xe2    mv s3,a6
    0x84010916     0xe4    li a5,2
    0x84010918     0xe6    bgeu a5,a6,ffffffff8401091e <handleFaultReply+0xec>
    0x8401091c     0xea    li s3,2
    0x8401091e     0xec    mv a3,s3
    0x84010920     0xee    li a5,4
    0x84010922     0xf0    bgeu a5,s3,ffffffff84010928 <handleFaultReply+0xf6>
    0x84010926     0xf4    li a3,4
    0x84010928     0xf6    beqz a6,ffffffff84010978 <handleFaultReply+0x146>
    0x8401092c     0xfa    ld a5,88(a1)
    0x8401092e     0xfc    sd a5,264(s0)
    0x84010932    0x100    andi a4,a4,126
    0x84010936    0x104    beqz a4,ffffffff8401093c <handleFaultReply+0x10a>
    0x84010938    0x106    ld a5,96(a1)
    0x8401093a    0x108    sd a5,8(s0)
    0x8401093c    0x10a    li a5,1
    0x8401093e    0x10c    beqz a6,ffffffff84010944 <handleFaultReply+0x112>
    0x84010942    0x110    mv a5,a3
    0x84010944    0x112    mv s2,a5
    0x84010946    0x114    bgeu a5,s3,ffffffff84010978 <handleFaultReply+0x146>
    0x8401094a    0x118    li a0,0
    0x8401094c    0x11a    jal ra,ffffffff840107a2 <lookupIPCBuffer>
    0x84010950    0x11e    beqz a0,ffffffff84010978 <handleFaultReply+0x146>
    0x84010952    0x120    slli a5,s2,0x3
    0x84010956    0x124    slli s3,s3,0x3
    0x84010958    0x126    auipc a2,0x7
    0x8401095c    0x12a    addi a2,a2,-1360 # ffffffff84017408 <fault_messages>
    0x84010960    0x12e    add a4,a2,a5
    0x84010964    0x132    ld a4,80(a4)
    0x84010966    0x134    add a3,a0,a5
    0x8401096a    0x138    ld a3,8(a3)
    0x8401096c    0x13a    slli a4,a4,0x3
    0x8401096e    0x13c    add a4,a4,s0
    0x84010970    0x13e    sd a3,0(a4)
    0x84010972    0x140    addi a5,a5,8
    0x84010974    0x142    bne a5,s3,ffffffff84010960 <handleFaultReply+0x12e>
    0x84010978    0x146    seqz a0,s1
    0x8401097c    0x14a    j ffffffff84010906 <handleFaultReply+0xd4>
    0x8401097e    0x14c    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
123 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleFaultReply` has 195 nodes.

Section setMRs_fault (204 of 269)
=================================

Deriving specifications
-----------------------

Section `setMRs_fault` consists of 72 instructions.

LWU..

Stack analysis
---------------

2 stack accesses found. Annotated code for `setMRs_fault`:

    0x840106b8     0x0    mv a5,a1
    0x840106ba     0x2    mv a1,a2
    0x840106bc     0x4    ld a3,312(a0)
    0x840106c0     0x8    andi a3,a3,15
    0x840106c2     0xa    li a4,2
    0x840106c4     0xc    beq a3,a4,ffffffff8401070e <setMRs_fault+0x56>
    0x840106c8    0x10    li a4,3
    0x840106ca    0x12    beq a3,a4,ffffffff8401075a <setMRs_fault+0xa2>
    0x840106ce    0x16    addi sp,sp,-16
    0x840106d0    0x18    sd ra,8(sp)           ; stack access
    0x840106d2    0x1a    li a4,1
    0x840106d4    0x1c    beq a3,a4,ffffffff840106e0 <setMRs_fault+0x28>
    0x840106d8    0x20    mv a1,a5
    0x840106da    0x22    jal ra,ffffffff84010686 <Arch_setMRs_fault>
    0x840106de    0x26    j ffffffff84010708 <setMRs_fault+0x50>
    0x840106e0    0x28    ld a4,264(a0)
    0x840106e4    0x2c    sd a4,88(a5)
    0x840106e6    0x2e    ld a4,320(a0)
    0x840106ea    0x32    sd a4,96(a5)
    0x840106ec    0x34    ld a4,312(a0)
    0x840106f0    0x38    srli a4,a4,0x3f
    0x840106f2    0x3a    sd a4,104(a5)
    0x840106f4    0x3c    li a4,3
    0x840106f6    0x3e    ld a2,328(a0)
    0x840106fa    0x42    ld a3,336(a0)
    0x840106fe    0x46    mv a0,a5
    0x84010700    0x48    jal ra,ffffffff840103e6 <setMRs_lookup_failure>
    0x84010704    0x4c    slli a0,a0,0x20
    0x84010706    0x4e    srli a0,a0,0x20
    0x84010708    0x50    ld ra,8(sp)           ; stack access
    0x8401070a    0x52    addi sp,sp,16
    0x8401070c    0x54    ret
    0x8401070e    0x56    ld a4,264(a0)
    0x84010712    0x5a    sd a4,88(a5)
    0x84010714    0x5c    ld a4,8(a0)
    0x84010716    0x5e    sd a4,96(a5)
    0x84010718    0x60    ld a4,0(a0)
    0x8401071a    0x62    sd a4,104(a5)
    0x8401071c    0x64    ld a4,72(a0)
    0x8401071e    0x66    sd a4,112(a5)
    0x84010720    0x68    li a5,4
    0x84010722    0x6a    beqz a2,ffffffff84010752 <setMRs_fault+0x9a>
    0x84010724    0x6c    auipc a4,0x7
    0x84010728    0x70    addi a4,a4,-796 # ffffffff84017408 <fault_messages>
    0x8401072c    0x74    addi a3,a2,40
    0x84010730    0x78    auipc a2,0x7
    0x84010734    0x7c    addi a2,a2,-760 # ffffffff84017438 <fault_messages+0x30>
    0x84010738    0x80    ld a5,32(a4)
    0x8401073a    0x82    slli a5,a5,0x3
    0x8401073c    0x84    add a5,a5,a0
    0x8401073e    0x86    ld a5,0(a5)
    0x84010740    0x88    sd a5,0(a3)
    0x84010742    0x8a    addi a4,a4,8
    0x84010744    0x8c    addi a3,a3,8
    0x84010746    0x8e    bne a2,a4,ffffffff84010738 <setMRs_fault+0x80>
    0x8401074a    0x92    ld a5,320(a0)
    0x8401074e    0x96    sd a5,88(a1)
    0x84010750    0x98    li a5,11
    0x84010752    0x9a    slli a0,a5,0x20
    0x84010756    0x9e    srli a0,a0,0x20
    0x84010758    0xa0    ret
    0x8401075a    0xa2    ld a4,264(a0)
    0x8401075e    0xa6    sd a4,88(a5)
    0x84010760    0xa8    ld a4,8(a0)
    0x84010762    0xaa    sd a4,96(a5)
    0x84010764    0xac    lwu a4,316(a0)
    0x84010768    0xb0    sd a4,104(a5)
    0x8401076a    0xb2    ld a4,312(a0)
    0x8401076e    0xb6    srliw a4,a4,0x4
    0x84010772    0xba    sd a4,112(a5)
    0x84010774    0xbc    li a0,4
    0x84010776    0xbe    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
72 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setMRs_fault` has 119 nodes.

Section trap_entry (205 of 269)
===============================

Deriving specifications
-----------------------

Section `trap_entry` consists of 48 instructions.

Skipping 140292f3 csrrw t0,sscratch,t0

Skipping 140020f3 csrr ra,sscratch

Skipping 100020f3 csrr ra,sstatus

Skipping 14202473 csrr s0,scause

Skipping 141020f3 csrr ra,sepc


Stack analysis
---------------

No stack accesses found. Code for `trap_entry`:

    0x84010000     0x0    csrrw t0,sscratch,t0
    0x84010004     0x4    sd ra,0(t0)
    0x84010008     0x8    sd sp,8(t0)
    0x8401000c     0xc    sd gp,16(t0)
    0x84010010    0x10    sd tp,24(t0)
    0x84010014    0x14    sd t1,40(t0)
    0x84010018    0x18    sd t2,48(t0)
    0x8401001c    0x1c    sd s0,56(t0)
    0x84010020    0x20    sd s1,64(t0)
    0x84010024    0x24    sd a0,72(t0)
    0x84010028    0x28    sd a1,80(t0)
    0x8401002c    0x2c    sd a2,88(t0)
    0x84010030    0x30    sd a3,96(t0)
    0x84010034    0x34    sd a4,104(t0)
    0x84010038    0x38    sd a5,112(t0)
    0x8401003c    0x3c    sd a6,120(t0)
    0x84010040    0x40    sd a7,128(t0)
    0x84010044    0x44    sd s2,136(t0)
    0x84010048    0x48    sd s3,144(t0)
    0x8401004c    0x4c    sd s4,152(t0)
    0x84010050    0x50    sd s5,160(t0)
    0x84010054    0x54    sd s6,168(t0)
    0x84010058    0x58    sd s7,176(t0)
    0x8401005c    0x5c    sd s8,184(t0)
    0x84010060    0x60    sd s9,192(t0)
    0x84010064    0x64    sd s10,200(t0)
    0x84010068    0x68    sd s11,208(t0)
    0x8401006c    0x6c    sd t3,216(t0)
    0x84010070    0x70    sd t4,224(t0)
    0x84010074    0x74    sd t5,232(t0)
    0x84010078    0x78    sd t6,240(t0)
    0x8401007c    0x7c    csrr ra,sscratch
    0x84010080    0x80    sd ra,32(t0)
    0x84010084    0x84    csrr ra,sstatus
    0x84010088    0x88    sd ra,256(t0)
    0x8401008c    0x8c    csrr s0,scause
    0x84010090    0x90    sd s0,248(t0)
    0x84010094    0x94    mv gp,gp
    0x84010098    0x98    auipc sp,0x1a
    0x8401009c    0x9c    addi sp,sp,1896 # ffffffff8402a800 <tlbLockCount>
    0x840100a0    0xa0    csrr ra,sepc
    0x840100a4    0xa4    sd ra,264(t0)
    0x840100a8    0xa8    srli s2,s0,0x3f
    0x840100ac    0xac    li s1,1
    0x840100ae    0xae    beq s2,s1,ffffffff840100cc <interrupt>
    0x840100b2    0xb2    andi s0,s0,15
    0x840100b4    0xb4    li s4,8
    0x840100b6    0xb6    bne s0,s4,ffffffff840100c4 <exception>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
48 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `trap_entry` has 95 nodes.

Section populate_bi_frame (206 of 269)
======================================

Deriving specifications
-----------------------

Section `populate_bi_frame` consists of 55 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `populate_bi_frame`:

    0x84000d86     0x0    addi sp,sp,-48
    0x84000d88     0x2    sd ra,40(sp)          ; stack access
    0x84000d8a     0x4    sd s0,32(sp)          ; stack access
    0x84000d8c     0x6    sd s1,24(sp)          ; stack access
    0x84000d8e     0x8    sd s2,16(sp)          ; stack access
    0x84000d90     0xa    sd s3,8(sp)           ; stack access
    0x84000d92     0xc    mv s3,a0
    0x84000d94     0xe    mv s2,a1
    0x84000d96    0x10    mv s1,a2
    0x84000d98    0x12    mv s0,a3
    0x84000d9a    0x14    lui a1,0x1
    0x84000d9c    0x16    auipc a0,0x1
    0x84000da0    0x1a    ld a0,-1524(a0) # ffffffff840017a8 <rootserver+0x20>
    0x84000da4    0x1e    jal ra,ffffffff84015a40 <memzero>
    0x84000da8    0x22    bnez s0,ffffffff84000e0c <populate_bi_frame+0x86>
    0x84000daa    0x24    auipc a5,0x0
    0x84000dae    0x28    addi a5,a5,1918 # ffffffff84001528 <ndks_boot>
    0x84000db2    0x2c    ld a4,640(a5)
    0x84000db6    0x30    sd a4,584(a5)
    0x84000dba    0x34    li a3,12
    0x84000dbc    0x36    sd a3,592(a5)
    0x84000dc0    0x3a    sd s3,8(a4)
    0x84000dc4    0x3e    ld a4,640(a5)
    0x84000dc8    0x42    sd s2,16(a4)
    0x84000dcc    0x46    ld a4,640(a5)
    0x84000dd0    0x4a    sd zero,24(a4)
    0x84000dd4    0x4e    ld a4,640(a5)
    0x84000dd8    0x52    sd s1,32(a4)
    0x84000dda    0x54    ld a5,640(a5)
    0x84000dde    0x58    li a4,19
    0x84000de0    0x5a    sd a4,136(a5)
    0x84000de2    0x5c    auipc a4,0x2a
    0x84000de6    0x60    ld a4,-1498(a4) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84000dea    0x64    slli a3,a4,0x4
    0x84000dee    0x68    auipc a4,0x16
    0x84000df2    0x6c    addi a4,a4,1530 # ffffffff840173e8 <msgRegisters>
    0x84000df6    0x70    add a4,a4,a3
    0x84000df8    0x72    ld a4,192(a4)
    0x84000dfa    0x74    sd a4,144(a5)
    0x84000dfc    0x76    sd s0,0(a5)
    0x84000dfe    0x78    ld ra,40(sp)          ; stack access
    0x84000e00    0x7a    ld s0,32(sp)          ; stack access
    0x84000e02    0x7c    ld s1,24(sp)          ; stack access
    0x84000e04    0x7e    ld s2,16(sp)          ; stack access
    0x84000e06    0x80    ld s3,8(sp)           ; stack access
    0x84000e08    0x82    addi sp,sp,48
    0x84000e0a    0x84    ret
    0x84000e0c    0x86    mv a0,s0
    0x84000e0e    0x88    jal ra,ffffffff8400064e <calculate_extra_bi_size_bits>
    0x84000e12    0x8c    li a1,1
    0x84000e14    0x8e    sll a1,a1,a0
    0x84000e18    0x92    auipc a0,0x1
    0x84000e1c    0x96    ld a0,-1640(a0) # ffffffff840017b0 <rootserver+0x28>
    0x84000e20    0x9a    jal ra,ffffffff84015a40 <memzero>
    0x84000e24    0x9e    j ffffffff84000daa <populate_bi_frame+0x24>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `populate_bi_frame` has 89 nodes.

Section create_frames_of_region (207 of 269)
============================================

Deriving specifications
-----------------------

Section `create_frames_of_region` consists of 80 instructions.

RVC_FTTFT____FFFFTFT.

Stack analysis
---------------

Section `create_frames_of_region` expects pointer to stack in a0.
43 stack accesses found. Annotated code for `create_frames_of_region`:

    0x84000828     0x0    addi sp,sp,-160
    0x8400082a     0x2    sd ra,152(sp)         ; stack access
    0x8400082c     0x4    sd s0,144(sp)         ; stack access
    0x8400082e     0x6    sd s1,136(sp)         ; stack access
    0x84000830     0x8    sd s2,128(sp)         ; stack access
    0x84000832     0xa    sd s3,120(sp)         ; stack access
    0x84000834     0xc    sd s4,112(sp)         ; stack access
    0x84000836     0xe    sd s5,104(sp)         ; stack access
    0x84000838    0x10    sd s6,96(sp)          ; stack access
    0x8400083a    0x12    sd s7,88(sp)          ; stack access
    0x8400083c    0x14    sd s8,80(sp)          ; stack access
    0x8400083e    0x16    sd s9,72(sp)          ; stack access
    0x84000840    0x18    mv s7,a0
    0x84000842    0x1a    sd a1,32(sp)          ; stack access
    0x84000844    0x1c    sd a2,40(sp)          ; stack access
    0x84000846    0x1e    sd a3,16(sp)          ; stack access
    0x84000848    0x20    sd a4,24(sp)          ; stack access
    0x8400084a    0x22    auipc s9,0x1
    0x8400084e    0x26    ld s9,-210(s9) # ffffffff84001778 <ndks_boot+0x250>
    0x84000852    0x2a    bgeu a5,a6,ffffffff840008c4 <create_frames_of_region+0x9c>
    0x84000856    0x2e    mv s2,a7
    0x84000858    0x30    mv s1,a6
    0x8400085a    0x32    mv s0,a5
    0x8400085c    0x34    li s3,1
    0x8400085e    0x36    slli s8,s3,0x3b
    0x84000862    0x3a    lui s6,0xfe000
    0x84000866    0x3e    srli s6,s6,0x10
    0x8400086a    0x42    slli s5,s3,0x26
    0x8400086e    0x46    ld a5,160(sp)         ; stack access
    0x84000870    0x48    sub s5,s5,a5
    0x84000874    0x4c    lui s4,0x1
    0x84000876    0x4e    j ffffffff84000898 <create_frames_of_region+0x70>
    0x84000878    0x50    sd s8,48(sp)          ; stack access
    0x8400087a    0x52    slli a5,s0,0x9
    0x8400087e    0x56    and a5,a5,s6
    0x84000882    0x5a    sd a5,56(sp)          ; stack access
    0x84000884    0x5c    ld a2,48(sp)          ; stack access
    0x84000886    0x5e    ld a3,56(sp)          ; stack access
    0x84000888    0x60    ld a0,32(sp)          ; stack access
    0x8400088a    0x62    ld a1,40(sp)          ; stack access
    0x8400088c    0x64    jal ra,ffffffff84000686 <provide_cap>
    0x84000890    0x68    beqz a0,ffffffff840008b6 <create_frames_of_region+0x8e>
    0x84000892    0x6a    add s0,s0,s4
    0x84000894    0x6c    bgeu s0,s1,ffffffff840008c4 <create_frames_of_region+0x9c>
    0x84000898    0x70    beqz s2,ffffffff84000878 <create_frames_of_region+0x50>
    0x8400089c    0x74    mv a6,s3
    0x8400089e    0x76    li a5,0
    0x840008a0    0x78    mv a4,s3
    0x840008a2    0x7a    add a3,s5,s0
    0x840008a6    0x7e    mv a2,s0
    0x840008a8    0x80    ld a0,16(sp)          ; stack access
    0x840008aa    0x82    ld a1,24(sp)          ; stack access
    0x840008ac    0x84    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x840008b0    0x88    sd a0,48(sp)          ; stack access
    0x840008b2    0x8a    sd a1,56(sp)          ; stack access
    0x840008b4    0x8c    j ffffffff84000884 <create_frames_of_region+0x5c>
    0x840008b6    0x8e    sd zero,0(s7) # fffffffffe000000 <ki_end+0x79fd1000>  ; stack access
    0x840008ba    0x92    sd zero,8(s7)         ; stack access
    0x840008be    0x96    sd zero,16(s7)        ; stack access
    0x840008c2    0x9a    j ffffffff840008da <create_frames_of_region+0xb2>
    0x840008c4    0x9c    sd s9,0(s7)           ; stack access
    0x840008c8    0xa0    auipc a5,0x1
    0x840008cc    0xa4    ld a5,-336(a5) # ffffffff84001778 <ndks_boot+0x250>
    0x840008d0    0xa8    sd a5,8(s7)           ; stack access
    0x840008d4    0xac    li a5,1
    0x840008d6    0xae    sd a5,16(s7)          ; stack access
    0x840008da    0xb2    mv a0,s7
    0x840008dc    0xb4    ld ra,152(sp)         ; stack access
    0x840008de    0xb6    ld s0,144(sp)         ; stack access
    0x840008e0    0xb8    ld s1,136(sp)         ; stack access
    0x840008e2    0xba    ld s2,128(sp)         ; stack access
    0x840008e4    0xbc    ld s3,120(sp)         ; stack access
    0x840008e6    0xbe    ld s4,112(sp)         ; stack access
    0x840008e8    0xc0    ld s5,104(sp)         ; stack access
    0x840008ea    0xc2    ld s6,96(sp)          ; stack access
    0x840008ec    0xc4    ld s7,88(sp)          ; stack access
    0x840008ee    0xc6    ld s8,80(sp)          ; stack access
    0x840008f0    0xc8    ld s9,72(sp)          ; stack access
    0x840008f2    0xca    addi sp,sp,160
    0x840008f4    0xcc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
80 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_frames_of_region` has 136 nodes.

Section create_bi_frame_cap (208 of 269)
========================================

Deriving specifications
-----------------------

Section `create_bi_frame_cap` consists of 30 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `create_bi_frame_cap`:

    0x84000602     0x0    addi sp,sp,-80
    0x84000604     0x2    sd ra,72(sp)          ; stack access
    0x84000606     0x4    sd s0,64(sp)          ; stack access
    0x84000608     0x6    sd s1,56(sp)          ; stack access
    0x8400060a     0x8    sd a0,16(sp)          ; stack access
    0x8400060c     0xa    sd a1,24(sp)          ; stack access
    0x8400060e     0xc    mv a0,a2
    0x84000610     0xe    mv a1,a3
    0x84000612    0x10    mv a3,a4
    0x84000614    0x12    li a6,0
    0x84000616    0x14    li a5,0
    0x84000618    0x16    li a4,1
    0x8400061a    0x18    auipc a2,0x1
    0x8400061e    0x1c    ld a2,398(a2) # ffffffff840017a8 <rootserver+0x20>
    0x84000622    0x20    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x84000626    0x24    mv s1,a0
    0x84000628    0x26    mv s0,a1
    0x8400062a    0x28    ld a0,16(sp)          ; stack access
    0x8400062c    0x2a    ld a1,24(sp)          ; stack access
    0x8400062e    0x2c    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000632    0x30    sd s1,288(a0)
    0x84000636    0x34    sd s0,296(a0)
    0x8400063a    0x38    sd zero,304(a0)
    0x8400063e    0x3c    li a5,3
    0x84000640    0x3e    sd a5,312(a0)
    0x84000644    0x42    ld ra,72(sp)          ; stack access
    0x84000646    0x44    ld s0,64(sp)          ; stack access
    0x84000648    0x46    ld s1,56(sp)          ; stack access
    0x8400064a    0x48    addi sp,sp,80
    0x8400064c    0x4a    ret

Proving inst theorems
---------------------

30 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_bi_frame_cap` has 48 nodes.

Section map_kernel_window (209 of 269)
======================================

Deriving specifications
-----------------------

Section `map_kernel_window` consists of 69 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_kernel_window`:

    0x84000474     0x0    addi sp,sp,-64
    0x84000476     0x2    sd ra,56(sp)          ; stack access
    0x84000478     0x4    sd s0,48(sp)          ; stack access
    0x8400047a     0x6    sd s1,40(sp)          ; stack access
    0x8400047c     0x8    sd s2,32(sp)          ; stack access
    0x8400047e     0xa    sd s3,24(sp)          ; stack access
    0x84000480     0xc    sd s4,16(sp)          ; stack access
    0x84000482     0xe    sd s5,8(sp)           ; stack access
    0x84000484    0x10    sd s6,0(sp)           ; stack access
    0x84000486    0x12    li s1,-1
    0x84000488    0x14    slli s1,s1,0x26
    0x8400048a    0x16    auipc s6,0x2d
    0x8400048e    0x1a    addi s6,s6,-1162 # ffffffff8402d000 <kernel_root_pageTable>
    0x84000492    0x1e    li s2,1
    0x84000494    0x20    slli s5,s2,0x26
    0x84000498    0x24    lui s4,0x40000
    0x8400049c    0x28    lui s3,0x80000
    0x840004a0    0x2c    srli s0,s1,0x1e
    0x840004a4    0x30    andi s0,s0,511
    0x840004a8    0x34    slli s0,s0,0x3
    0x840004aa    0x36    add s0,s0,s6
    0x840004ac    0x38    mv a1,s2
    0x840004ae    0x3a    add a0,s1,s5
    0x840004b2    0x3e    jal ra,ffffffff840100da <pte_next>
    0x840004b6    0x42    sd a0,0(s0)
    0x840004b8    0x44    add s1,s1,s4
    0x840004ba    0x46    bne s1,s3,ffffffff840004a0 <map_kernel_window+0x2c>
    0x840004be    0x4a    li s0,1
    0x840004c0    0x4c    slli a5,s0,0x20
    0x840004c4    0x50    auipc s1,0x2c
    0x840004c8    0x54    addi s1,s1,-1220 # ffffffff8402c000 <kernel_image_level2_pt>
    0x840004cc    0x58    add s1,s1,a5
    0x840004ce    0x5a    auipc s2,0x2e
    0x840004d2    0x5e    addi s2,s2,-1230 # ffffffff8402e000 <kernel_root_pageTable+0x1000>
    0x840004d6    0x62    li a1,0
    0x840004d8    0x64    mv a0,s1
    0x840004da    0x66    jal ra,ffffffff840100da <pte_next>
    0x840004de    0x6a    sd a0,-2032(s2)
    0x840004e2    0x6e    li a1,0
    0x840004e4    0x70    mv a0,s1
    0x840004e6    0x72    jal ra,ffffffff840100da <pte_next>
    0x840004ea    0x76    sd a0,-16(s2)
    0x840004ee    0x7a    li s2,0
    0x840004f0    0x7c    slli s0,s0,0x1f
    0x840004f2    0x7e    auipc s5,0x2c
    0x840004f6    0x82    addi s5,s5,-1266 # ffffffff8402c000 <kernel_image_level2_pt>
    0x840004fa    0x86    lui s4,0x200
    0x840004fe    0x8a    li s3,3
    0x84000500    0x8c    slli s3,s3,0x1e
    0x84000502    0x8e    slli s1,s2,0x3
    0x84000506    0x92    add s1,s1,s5
    0x84000508    0x94    li a1,1
    0x8400050a    0x96    mv a0,s0
    0x8400050c    0x98    jal ra,ffffffff840100da <pte_next>
    0x84000510    0x9c    sd a0,0(s1)
    0x84000512    0x9e    addi s2,s2,1
    0x84000514    0xa0    add s0,s0,s4
    0x84000516    0xa2    bne s0,s3,ffffffff84000502 <map_kernel_window+0x8e>
    0x8400051a    0xa6    jal ra,ffffffff84000450 <map_kernel_devices>
    0x8400051e    0xaa    ld ra,56(sp)          ; stack access
    0x84000520    0xac    ld s0,48(sp)          ; stack access
    0x84000522    0xae    ld s1,40(sp)          ; stack access
    0x84000524    0xb0    ld s2,32(sp)          ; stack access
    0x84000526    0xb2    ld s3,24(sp)          ; stack access
    0x84000528    0xb4    ld s4,16(sp)          ; stack access
    0x8400052a    0xb6    ld s5,8(sp)           ; stack access
    0x8400052c    0xb8    ld s6,0(sp)           ; stack access
    0x8400052e    0xba    addi sp,sp,64
    0x84000530    0xbc    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
69 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_window` has 99 nodes.

Section map_kernel_devices (210 of 269)
=======================================

Deriving specifications
-----------------------

Section `map_kernel_devices` consists of 12 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `map_kernel_devices`:

    0x84000450     0x0    addi sp,sp,-32
    0x84000452     0x2    sd ra,24(sp)          ; stack access
    0x84000454     0x4    li a2,1
    0x84000456     0x6    lui a1,0xc0000
    0x8400045a     0xa    lui a0,0xc000
    0x8400045e     0xe    jal ra,ffffffff840000c4 <map_kernel_frame>
    0x84000462    0x12    lui a0,0xc000
    0x84000466    0x16    lui a1,0xc001
    0x8400046a    0x1a    jal ra,ffffffff84000366 <reserve_region>
    0x8400046e    0x1e    ld ra,24(sp)          ; stack access
    0x84000470    0x20    addi sp,sp,32
    0x84000472    0x22    ret

Proving inst theorems
---------------------

12 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_kernel_devices` has 17 nodes.

Section map_it_frame_cap (211 of 269)
=====================================

Deriving specifications
-----------------------

Section `map_it_frame_cap` consists of 47 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

16 stack accesses found. Annotated code for `map_it_frame_cap`:

    0x840001fa     0x0    addi sp,sp,-96
    0x840001fc     0x2    sd ra,88(sp)          ; stack access
    0x840001fe     0x4    sd s0,80(sp)          ; stack access
    0x84000200     0x6    sd s1,72(sp)          ; stack access
    0x84000202     0x8    sd s2,64(sp)          ; stack access
    0x84000204     0xa    sd s3,56(sp)          ; stack access
    0x84000206     0xc    sd a0,16(sp)          ; stack access
    0x84000208     0xe    sd a1,24(sp)          ; stack access
    0x8400020a    0x10    mv s3,a2
    0x8400020c    0x12    sd a2,0(sp)           ; stack access
    0x8400020e    0x14    mv s0,a3
    0x84000210    0x16    sd a3,8(sp)           ; stack access
    0x84000212    0x18    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000216    0x1c    mv s2,a0
    0x84000218    0x1e    mv a0,s3
    0x8400021a    0x20    mv a1,s0
    0x8400021c    0x22    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000220    0x26    mv s0,a0
    0x84000222    0x28    slli a1,s3,0x19
    0x84000226    0x2c    srli a1,a1,0x19
    0x84000228    0x2e    srli s1,s3,0x26
    0x8400022c    0x32    andi s1,s1,1
    0x8400022e    0x34    beqz s1,ffffffff84000236 <map_it_frame_cap+0x3c>
    0x84000230    0x36    li a5,-1
    0x84000232    0x38    slli a5,a5,0x27
    0x84000234    0x3a    or a1,a1,a5
    0x84000236    0x3c    mv a0,s2
    0x84000238    0x3e    jal ra,ffffffff84010982 <lookupPTSlot>
    0x8400023c    0x42    sd a0,32(sp)          ; stack access
    0x8400023e    0x44    sd a1,40(sp)          ; stack access
    0x84000240    0x46    li a5,1
    0x84000242    0x48    slli a5,a5,0x26
    0x84000244    0x4a    add s0,s0,a5
    0x84000246    0x4c    srli s0,s0,0x2
    0x84000248    0x4e    lui a5,0xfff00
    0x8400024c    0x52    srli a5,a5,0xa
    0x8400024e    0x54    and s0,s0,a5
    0x84000250    0x56    ori s0,s0,223
    0x84000254    0x5a    sd s0,0(a0)
    0x84000256    0x5c    sfence.vma
    0x8400025a    0x60    ld ra,88(sp)          ; stack access
    0x8400025c    0x62    ld s0,80(sp)          ; stack access
    0x8400025e    0x64    ld s1,72(sp)          ; stack access
    0x84000260    0x66    ld s2,64(sp)          ; stack access
    0x84000262    0x68    ld s3,56(sp)          ; stack access
    0x84000264    0x6a    addi sp,sp,96
    0x84000266    0x6c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
47 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_frame_cap` has 71 nodes.

Section map_it_pt_cap (212 of 269)
==================================

Deriving specifications
-----------------------

Section `map_it_pt_cap` consists of 46 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

18 stack accesses found. Annotated code for `map_it_pt_cap`:

    0x84000190     0x0    addi sp,sp,-80
    0x84000192     0x2    sd ra,72(sp)          ; stack access
    0x84000194     0x4    sd s0,64(sp)          ; stack access
    0x84000196     0x6    sd s1,56(sp)          ; stack access
    0x84000198     0x8    sd s2,48(sp)          ; stack access
    0x8400019a     0xa    sd a0,16(sp)          ; stack access
    0x8400019c     0xc    sd a1,24(sp)          ; stack access
    0x8400019e     0xe    sd a2,0(sp)           ; stack access
    0x840001a0    0x10    sd a3,8(sp)           ; stack access
    0x840001a2    0x12    slli s1,a2,0x19
    0x840001a6    0x16    srli s1,s1,0x19
    0x840001a8    0x18    srli a2,a2,0x26
    0x840001aa    0x1a    andi a2,a2,1
    0x840001ac    0x1c    beqz a2,ffffffff840001b4 <map_it_pt_cap+0x24>
    0x840001ae    0x1e    li a5,-1
    0x840001b0    0x20    slli a5,a5,0x27
    0x840001b2    0x22    or s1,s1,a5
    0x840001b4    0x24    ld a0,16(sp)          ; stack access
    0x840001b6    0x26    ld a1,24(sp)          ; stack access
    0x840001b8    0x28    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840001bc    0x2c    mv s2,a0
    0x840001be    0x2e    ld a0,0(sp)           ; stack access
    0x840001c0    0x30    ld a1,8(sp)           ; stack access
    0x840001c2    0x32    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840001c6    0x36    mv s0,a0
    0x840001c8    0x38    mv a1,s1
    0x840001ca    0x3a    mv a0,s2
    0x840001cc    0x3c    jal ra,ffffffff84010982 <lookupPTSlot>
    0x840001d0    0x40    sd a0,32(sp)          ; stack access
    0x840001d2    0x42    sd a1,40(sp)          ; stack access
    0x840001d4    0x44    li a5,1
    0x840001d6    0x46    slli a5,a5,0x26
    0x840001d8    0x48    add s0,s0,a5
    0x840001da    0x4a    srli s0,s0,0x2
    0x840001dc    0x4c    lui a5,0xfff00
    0x840001e0    0x50    srli a5,a5,0xa
    0x840001e2    0x52    and s0,s0,a5
    0x840001e4    0x54    ori s0,s0,193
    0x840001e8    0x58    sd s0,0(a0)
    0x840001ea    0x5a    sfence.vma
    0x840001ee    0x5e    ld ra,72(sp)          ; stack access
    0x840001f0    0x60    ld s0,64(sp)          ; stack access
    0x840001f2    0x62    ld s1,56(sp)          ; stack access
    0x840001f4    0x64    ld s2,48(sp)          ; stack access
    0x840001f6    0x66    addi sp,sp,80
    0x840001f8    0x68    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `map_it_pt_cap` has 72 nodes.

Section c_handle_syscall (213 of 269)
=====================================

Deriving specifications
-----------------------

Section `c_handle_syscall` consists of 10 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_syscall`:

    0x8401720e     0x0    addi sp,sp,-16
    0x84017210     0x2    sd ra,8(sp)           ; stack access
    0x84017212     0x4    li a5,-1
    0x84017214     0x6    beq a7,a5,ffffffff84017224 <c_handle_syscall+0x16>
    0x84017218     0xa    li a5,-2
    0x8401721a     0xc    beq a7,a5,ffffffff84017228 <c_handle_syscall+0x1a>
    0x8401721e    0x10    mv a0,a7
    0x84017220    0x12    jal ra,ffffffff84016c02 <slowpath>
    0x84017224    0x16    jal ra,ffffffff84016c1a <fastpath_call>
    0x84017228    0x1a    jal ra,ffffffff84016eea <fastpath_reply_recv>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
10 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_syscall` has 18 nodes.

Section slowpath (214 of 269)
=============================

Deriving specifications
-----------------------

Section `slowpath` consists of 8 instructions.


Stack analysis
---------------

1 stack accesses found. Annotated code for `slowpath`:

    0x84016c02     0x0    addi sp,sp,-16
    0x84016c04     0x2    sd ra,8(sp)           ; stack access
    0x84016c06     0x4    li a5,-9
    0x84016c08     0x6    bgeu a5,a0,ffffffff84016c14 <slowpath+0x12>
    0x84016c0c     0xa    jal ra,ffffffff84016aa0 <handleSyscall>
    0x84016c10     0xe    jal ra,ffffffff84010338 <restore_user_context>
    0x84016c14    0x12    jal ra,ffffffff8401447c <handleUnknownSyscall>
    0x84016c18    0x16    j ffffffff84016c10 <slowpath+0xe>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
8 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `slowpath` has 14 nodes.

Section invokeTCB_ReadRegisters (215 of 269)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ReadRegisters` consists of 106 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `invokeTCB_ReadRegisters`:

    0x8401528c      0x0    addi sp,sp,-48
    0x8401528e      0x2    sd ra,40(sp)          ; stack access
    0x84015290      0x4    sd s0,32(sp)          ; stack access
    0x84015292      0x6    sd s1,24(sp)          ; stack access
    0x84015294      0x8    sd s2,16(sp)          ; stack access
    0x84015296      0xa    sd s3,8(sp)           ; stack access
    0x84015298      0xc    mv s1,a0
    0x8401529a      0xe    mv s0,a2
    0x8401529c     0x10    mv s3,a4
    0x8401529e     0x12    auipc s2,0x15
    0x840152a2     0x16    ld s2,1434(s2) # ffffffff8402a838 <ksCurThread>
    0x840152a6     0x1a    bnez a1,ffffffff84015322 <invokeTCB_ReadRegisters+0x96>
    0x840152a8     0x1c    beqz s3,ffffffff84015342 <invokeTCB_ReadRegisters+0xb6>
    0x840152ac     0x20    mv a1,s2
    0x840152ae     0x22    li a0,1
    0x840152b0     0x24    jal ra,ffffffff840107a2 <lookupIPCBuffer>
    0x840152b4     0x28    sd zero,72(s2)
    0x840152b8     0x2c    beqz s0,ffffffff84015396 <invokeTCB_ReadRegisters+0x10a>
    0x840152ba     0x2e    ld a5,264(s1)
    0x840152be     0x32    sd a5,88(s2)
    0x840152c2     0x36    li a5,1
    0x840152c4     0x38    bgeu a5,s0,ffffffff84015328 <invokeTCB_ReadRegisters+0x9c>
    0x840152c8     0x3c    ld a5,0(s1)
    0x840152ca     0x3e    sd a5,96(s2)
    0x840152ce     0x42    li a5,2
    0x840152d0     0x44    bgeu a5,s0,ffffffff8401535a <invokeTCB_ReadRegisters+0xce>
    0x840152d4     0x48    ld a5,8(s1)
    0x840152d6     0x4a    sd a5,104(s2)
    0x840152da     0x4e    li a5,3
    0x840152dc     0x50    bgeu a5,s0,ffffffff8401535e <invokeTCB_ReadRegisters+0xd2>
    0x840152e0     0x54    ld a5,16(s1)
    0x840152e2     0x56    sd a5,112(s2)
    0x840152e6     0x5a    li a5,4
    0x840152e8     0x5c    li a3,4
    0x840152ea     0x5e    bgeu a5,s0,ffffffff8401532a <invokeTCB_ReadRegisters+0x9e>
    0x840152ee     0x62    li a3,4
    0x840152f0     0x64    beqz a0,ffffffff8401539a <invokeTCB_ReadRegisters+0x10e>
    0x840152f2     0x66    bgeu a3,s0,ffffffff84015330 <invokeTCB_ReadRegisters+0xa4>
    0x840152f6     0x6a    slli a4,a3,0x3
    0x840152fa     0x6e    auipc a2,0x2
    0x840152fe     0x72    addi a2,a2,478 # ffffffff840174d8 <frameRegisters>
    0x84015302     0x76    add a2,a2,a4
    0x84015304     0x78    add a4,a4,a0
    0x84015306     0x7a    li a1,16
    0x84015308     0x7c    addi a3,a3,1
    0x8401530a     0x7e    ld a5,0(a2)
    0x8401530c     0x80    slli a5,a5,0x3
    0x8401530e     0x82    add a5,a5,s1
    0x84015310     0x84    ld a5,0(a5)
    0x84015312     0x86    sd a5,8(a4)
    0x84015314     0x88    bgeu a3,s0,ffffffff84015330 <invokeTCB_ReadRegisters+0xa4>
    0x84015318     0x8c    addi a2,a2,8
    0x8401531a     0x8e    addi a4,a4,8
    0x8401531c     0x90    bne a3,a1,ffffffff84015308 <invokeTCB_ReadRegisters+0x7c>
    0x84015320     0x94    j ffffffff84015330 <invokeTCB_ReadRegisters+0xa4>
    0x84015322     0x96    jal ra,ffffffff840130d8 <suspend>
    0x84015326     0x9a    j ffffffff840152a8 <invokeTCB_ReadRegisters+0x1c>
    0x84015328     0x9c    li a3,1
    0x8401532a     0x9e    beqz a0,ffffffff8401539a <invokeTCB_ReadRegisters+0x10e>
    0x8401532c     0xa0    bltu a3,s0,ffffffff840152f2 <invokeTCB_ReadRegisters+0x66>
    0x84015330     0xa4    li a5,16
    0x84015332     0xa6    bltu a5,s0,ffffffff84015366 <invokeTCB_ReadRegisters+0xda>
    0x84015336     0xaa    li a5,0
    0x84015338     0xac    add a5,a5,a3
    0x8401533a     0xae    andi a5,a5,127
    0x8401533e     0xb2    sd a5,80(s2)
    0x84015342     0xb6    li a1,1
    0x84015344     0xb8    mv a0,s2
    0x84015346     0xba    jal ra,ffffffff840125f6 <setThreadState>
    0x8401534a     0xbe    li a0,0
    0x8401534c     0xc0    ld ra,40(sp)          ; stack access
    0x8401534e     0xc2    ld s0,32(sp)          ; stack access
    0x84015350     0xc4    ld s1,24(sp)          ; stack access
    0x84015352     0xc6    ld s2,16(sp)          ; stack access
    0x84015354     0xc8    ld s3,8(sp)           ; stack access
    0x84015356     0xca    addi sp,sp,48
    0x84015358     0xcc    ret
    0x8401535a     0xce    li a3,2
    0x8401535c     0xd0    j ffffffff8401532a <invokeTCB_ReadRegisters+0x9e>
    0x8401535e     0xd2    li a3,3
    0x84015360     0xd4    j ffffffff8401532a <invokeTCB_ReadRegisters+0x9e>
    0x84015362     0xd6    mv a5,s0
    0x84015364     0xd8    j ffffffff84015338 <invokeTCB_ReadRegisters+0xac>
    0x84015366     0xda    ld a5,72(s1)
    0x84015368     0xdc    sd a5,136(a0)
    0x8401536a     0xde    auipc a1,0x2
    0x8401536e     0xe2    addi a1,a1,502 # ffffffff84017560 <gpRegisters+0x8>
    0x84015372     0xe6    addi a0,a0,144
    0x84015376     0xea    addi s0,s0,-16
    0x84015378     0xec    li a5,1
    0x8401537a     0xee    li a2,16
    0x8401537c     0xf0    beq a5,s0,ffffffff84015362 <invokeTCB_ReadRegisters+0xd6>
    0x84015380     0xf4    ld a4,0(a1)
    0x84015382     0xf6    slli a4,a4,0x3
    0x84015384     0xf8    add a4,a4,s1
    0x84015386     0xfa    ld a4,0(a4)
    0x84015388     0xfc    sd a4,0(a0)
    0x8401538a     0xfe    addi a5,a5,1
    0x8401538c    0x100    addi a1,a1,8
    0x8401538e    0x102    addi a0,a0,8
    0x84015390    0x104    bne a5,a2,ffffffff8401537c <invokeTCB_ReadRegisters+0xf0>
    0x84015394    0x108    j ffffffff84015338 <invokeTCB_ReadRegisters+0xac>
    0x84015396    0x10a    mv a3,s0
    0x84015398    0x10c    bnez a0,ffffffff84015330 <invokeTCB_ReadRegisters+0xa4>
    0x8401539a    0x10e    li a5,0
    0x8401539c    0x110    j ffffffff84015338 <invokeTCB_ReadRegisters+0xac>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
106 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ReadRegisters` has 173 nodes.

Section invokeTCB_CopyRegisters (216 of 269)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_CopyRegisters` consists of 62 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `invokeTCB_CopyRegisters`:

    0x8401513e     0x0    addi sp,sp,-48
    0x84015140     0x2    sd ra,40(sp)          ; stack access
    0x84015142     0x4    sd s0,32(sp)          ; stack access
    0x84015144     0x6    sd s1,24(sp)          ; stack access
    0x84015146     0x8    sd s2,16(sp)          ; stack access
    0x84015148     0xa    sd s3,8(sp)           ; stack access
    0x8401514a     0xc    sd s4,0(sp)           ; stack access
    0x8401514c     0xe    mv s0,a0
    0x8401514e    0x10    mv s1,a1
    0x84015150    0x12    mv s4,a3
    0x84015152    0x14    mv s3,a4
    0x84015154    0x16    mv s2,a5
    0x84015156    0x18    bnez a2,ffffffff840151d2 <invokeTCB_CopyRegisters+0x94>
    0x84015158    0x1a    bnez s4,ffffffff840151da <invokeTCB_CopyRegisters+0x9c>
    0x8401515c    0x1e    beqz s3,ffffffff8401518c <invokeTCB_CopyRegisters+0x4e>
    0x84015160    0x22    auipc a3,0x2
    0x84015164    0x26    addi a3,a3,888 # ffffffff840174d8 <frameRegisters>
    0x84015168    0x2a    auipc a1,0x2
    0x8401516c    0x2e    addi a1,a1,1008 # ffffffff84017558 <gpRegisters>
    0x84015170    0x32    ld a4,0(a3)
    0x84015172    0x34    slli a4,a4,0x3
    0x84015174    0x36    add a2,s1,a4
    0x84015178    0x3a    ld a2,0(a2)
    0x8401517a    0x3c    add a4,a4,s0
    0x8401517c    0x3e    sd a2,0(a4)
    0x8401517e    0x40    addi a3,a3,8
    0x84015180    0x42    bne a3,a1,ffffffff84015170 <invokeTCB_CopyRegisters+0x32>
    0x84015184    0x46    ld a5,264(s0)
    0x84015188    0x4a    sd a5,272(s0)
    0x8401518c    0x4e    beqz s2,ffffffff840151b4 <invokeTCB_CopyRegisters+0x76>
    0x84015190    0x52    auipc a4,0x2
    0x84015194    0x56    addi a4,a4,968 # ffffffff84017558 <gpRegisters>
    0x84015198    0x5a    auipc a2,0x2
    0x8401519c    0x5e    addi a2,a2,1088 # ffffffff840175d8 <gpRegisters+0x80>
    0x840151a0    0x62    ld a5,0(a4)
    0x840151a2    0x64    slli a5,a5,0x3
    0x840151a4    0x66    add a3,s1,a5
    0x840151a8    0x6a    ld a3,0(a3)
    0x840151aa    0x6c    add a5,a5,s0
    0x840151ac    0x6e    sd a3,0(a5)
    0x840151ae    0x70    addi a4,a4,8
    0x840151b0    0x72    bne a4,a2,ffffffff840151a0 <invokeTCB_CopyRegisters+0x62>
    0x840151b4    0x76    auipc a5,0x15
    0x840151b8    0x7a    ld a5,1668(a5) # ffffffff8402a838 <ksCurThread>
    0x840151bc    0x7e    beq a5,s0,ffffffff840151e2 <invokeTCB_CopyRegisters+0xa4>
    0x840151c0    0x82    li a0,0
    0x840151c2    0x84    ld ra,40(sp)          ; stack access
    0x840151c4    0x86    ld s0,32(sp)          ; stack access
    0x840151c6    0x88    ld s1,24(sp)          ; stack access
    0x840151c8    0x8a    ld s2,16(sp)          ; stack access
    0x840151ca    0x8c    ld s3,8(sp)           ; stack access
    0x840151cc    0x8e    ld s4,0(sp)           ; stack access
    0x840151ce    0x90    addi sp,sp,48
    0x840151d0    0x92    ret
    0x840151d2    0x94    mv a0,a1
    0x840151d4    0x96    jal ra,ffffffff840130d8 <suspend>
    0x840151d8    0x9a    j ffffffff84015158 <invokeTCB_CopyRegisters+0x1a>
    0x840151da    0x9c    mv a0,s0
    0x840151dc    0x9e    jal ra,ffffffff84013b2c <restart>
    0x840151e0    0xa2    j ffffffff8401515c <invokeTCB_CopyRegisters+0x1e>
    0x840151e2    0xa4    jal ra,ffffffff84012590 <rescheduleRequired>
    0x840151e6    0xa8    j ffffffff840151c0 <invokeTCB_CopyRegisters+0x82>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
62 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_CopyRegisters` has 101 nodes.

Section c_handle_exception (217 of 269)
=======================================

Deriving specifications
-----------------------

Section `c_handle_exception` consists of 16 instructions.

Skipping 14202573 csrr a0,scause


Stack analysis
---------------

1 stack accesses found. Annotated code for `c_handle_exception`:

    0x84014520     0x0    addi sp,sp,-16
    0x84014522     0x2    sd ra,8(sp)           ; stack access
    0x84014524     0x4    csrr a0,scause
    0x84014528     0x8    li a5,15
    0x8401452a     0xa    bltu a5,a0,ffffffff8401453e <c_handle_exception+0x1e>
    0x8401452e     0xe    li a5,1
    0x84014530    0x10    sll a5,a5,a0
    0x84014534    0x14    lui a4,0xb
    0x84014536    0x16    addi a4,a4,162 # b0a2 <KERNEL_OFFSET-0xfffffffeffff4f5e>
    0x8401453a    0x1a    and a5,a5,a4
    0x8401453c    0x1c    bnez a5,ffffffff84014546 <c_handle_exception+0x26>
    0x8401453e    0x1e    li a1,0
    0x84014540    0x20    jal ra,ffffffff840144ae <handleUserLevelFault>
    0x84014544    0x24    j ffffffff8401454a <c_handle_exception+0x2a>
    0x84014546    0x26    jal ra,ffffffff840144ee <handleVMFaultEvent>
    0x8401454a    0x2a    jal ra,ffffffff84010338 <restore_user_context>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `c_handle_exception` has 25 nodes.

Section handleUserLevelFault (218 of 269)
=========================================

Deriving specifications
-----------------------

Section `handleUserLevelFault` consists of 22 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUserLevelFault`:

    0x840144ae     0x0    addi sp,sp,-16
    0x840144b0     0x2    sd ra,8(sp)           ; stack access
    0x840144b2     0x4    auipc a4,0x4
    0x840144b6     0x8    addi a4,a4,-1202 # ffffffff84018000 <riscvKSASIDTable>
    0x840144ba     0xc    slli a1,a1,0x4
    0x840144bc     0xe    li a5,-1
    0x840144be    0x10    srli a5,a5,0x20
    0x840144c0    0x12    and a1,a1,a5
    0x840144c2    0x14    slli a0,a0,0x20
    0x840144c4    0x16    or a1,a1,a0
    0x840144c6    0x18    ori a1,a1,3
    0x840144ca    0x1c    sd a1,1680(a4)
    0x840144ce    0x20    sd zero,1688(a4)
    0x840144d2    0x24    auipc a0,0x16
    0x840144d6    0x28    ld a0,870(a0) # ffffffff8402a838 <ksCurThread>
    0x840144da    0x2c    jal ra,ffffffff8401445c <handleFault>
    0x840144de    0x30    jal ra,ffffffff84012c84 <schedule>
    0x840144e2    0x34    jal ra,ffffffff840126e8 <activateThread>
    0x840144e6    0x38    li a0,0
    0x840144e8    0x3a    ld ra,8(sp)           ; stack access
    0x840144ea    0x3c    addi sp,sp,16
    0x840144ec    0x3e    ret

Proving inst theorems
---------------------

22 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUserLevelFault` has 31 nodes.

Section handleUnknownSyscall (219 of 269)
=========================================

Deriving specifications
-----------------------

Section `handleUnknownSyscall` consists of 16 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleUnknownSyscall`:

    0x8401447c     0x0    addi sp,sp,-16
    0x8401447e     0x2    sd ra,8(sp)           ; stack access
    0x84014480     0x4    auipc a5,0x4
    0x84014484     0x8    addi a5,a5,-1152 # ffffffff84018000 <riscvKSASIDTable>
    0x84014488     0xc    li a4,2
    0x8401448a     0xe    sd a4,1680(a5)
    0x8401448e    0x12    sd a0,1688(a5)
    0x84014492    0x16    auipc a0,0x16
    0x84014496    0x1a    ld a0,934(a0) # ffffffff8402a838 <ksCurThread>
    0x8401449a    0x1e    jal ra,ffffffff8401445c <handleFault>
    0x8401449e    0x22    jal ra,ffffffff84012c84 <schedule>
    0x840144a2    0x26    jal ra,ffffffff840126e8 <activateThread>
    0x840144a6    0x2a    li a0,0
    0x840144a8    0x2c    ld ra,8(sp)           ; stack access
    0x840144aa    0x2e    addi sp,sp,16
    0x840144ac    0x30    ret

Proving inst theorems
---------------------

16 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleUnknownSyscall` has 25 nodes.

Section doIPCTransfer (220 of 269)
==================================

Deriving specifications
-----------------------

Section `doIPCTransfer` consists of 46 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `doIPCTransfer`:

    0x840140c6     0x0    addi sp,sp,-64
    0x840140c8     0x2    sd ra,56(sp)          ; stack access
    0x840140ca     0x4    sd s0,48(sp)          ; stack access
    0x840140cc     0x6    sd s1,40(sp)          ; stack access
    0x840140ce     0x8    sd s2,32(sp)          ; stack access
    0x840140d0     0xa    sd s3,24(sp)          ; stack access
    0x840140d2     0xc    sd s4,16(sp)          ; stack access
    0x840140d4     0xe    sd s5,8(sp)           ; stack access
    0x840140d6    0x10    mv s0,a0
    0x840140d8    0x12    mv s5,a1
    0x840140da    0x14    mv s2,a2
    0x840140dc    0x16    mv s4,a3
    0x840140de    0x18    mv s1,a4
    0x840140e0    0x1a    mv a1,a4
    0x840140e2    0x1c    li a0,1
    0x840140e4    0x1e    jal ra,ffffffff840107a2 <lookupIPCBuffer>
    0x840140e8    0x22    mv s3,a0
    0x840140ea    0x24    ld a5,312(s0)
    0x840140ee    0x28    andi a5,a5,15
    0x840140f0    0x2a    bnez a5,ffffffff8401411e <doIPCTransfer+0x58>
    0x840140f2    0x2c    mv a1,s0
    0x840140f4    0x2e    li a0,0
    0x840140f6    0x30    jal ra,ffffffff840107a2 <lookupIPCBuffer>
    0x840140fa    0x34    mv a1,a0
    0x840140fc    0x36    mv a6,s3
    0x840140fe    0x38    mv a5,s1
    0x84014100    0x3a    mv a4,s4
    0x84014102    0x3c    mv a3,s2
    0x84014104    0x3e    mv a2,s5
    0x84014106    0x40    mv a0,s0
    0x84014108    0x42    jal ra,ffffffff84013f48 <doNormalTransfer>
    0x8401410c    0x46    ld ra,56(sp)          ; stack access
    0x8401410e    0x48    ld s0,48(sp)          ; stack access
    0x84014110    0x4a    ld s1,40(sp)          ; stack access
    0x84014112    0x4c    ld s2,32(sp)          ; stack access
    0x84014114    0x4e    ld s3,24(sp)          ; stack access
    0x84014116    0x50    ld s4,16(sp)          ; stack access
    0x84014118    0x52    ld s5,8(sp)           ; stack access
    0x8401411a    0x54    addi sp,sp,64
    0x8401411c    0x56    ret
    0x8401411e    0x58    mv a3,a0
    0x84014120    0x5a    mv a2,s1
    0x84014122    0x5c    mv a1,s0
    0x84014124    0x5e    mv a0,s2
    0x84014126    0x60    jal ra,ffffffff840115da <doFaultTransfer>
    0x8401412a    0x64    j ffffffff8401410c <doIPCTransfer+0x46>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doIPCTransfer` has 68 nodes.

Section handleInterrupt (221 of 269)
====================================

Deriving specifications
-----------------------

Section `handleInterrupt` consists of 89 instructions.

Skipping c01027f3 rdtime a5

Skipping 00000073 ecall

Skipping c0102773 rdtime a4

Skipping 1047b7f3 csrrc a5,sie,a5


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterrupt`:

    0x84013c64      0x0    li a5,54
    0x84013c68      0x4    bltu a5,a0,ffffffff84013cc8 <handleInterrupt+0x64>
    0x84013c6c      0x8    addi sp,sp,-16
    0x84013c6e      0xa    sd ra,8(sp)           ; stack access
    0x84013c70      0xc    slli a4,a0,0x3
    0x84013c74     0x10    auipc a5,0x4
    0x84013c78     0x14    addi a5,a5,908 # ffffffff84018000 <riscvKSASIDTable>
    0x84013c7c     0x18    add a5,a5,a4
    0x84013c7e     0x1a    ld a5,1752(a5)
    0x84013c82     0x1e    li a4,2
    0x84013c84     0x20    beq a5,a4,ffffffff84013d0a <handleInterrupt+0xa6>
    0x84013c88     0x24    bltu a4,a5,ffffffff84013cf6 <handleInterrupt+0x92>
    0x84013c8c     0x28    beqz a5,ffffffff84013d2c <handleInterrupt+0xc8>
    0x84013c8e     0x2a    slli a0,a0,0x5
    0x84013c90     0x2c    auipc a5,0x5
    0x84013c94     0x30    addi a5,a5,880 # ffffffff84019000 <intStateIRQNode>
    0x84013c98     0x34    add a5,a5,a0
    0x84013c9a     0x36    ld a4,0(a5)
    0x84013c9c     0x38    srli a2,a4,0x3b
    0x84013ca0     0x3c    li a3,6
    0x84013ca2     0x3e    bne a2,a3,ffffffff84013cfc <handleInterrupt+0x98>
    0x84013ca6     0x42    srli a3,a4,0x39
    0x84013caa     0x46    andi a3,a3,1
    0x84013cac     0x48    beqz a3,ffffffff84013cfc <handleInterrupt+0x98>
    0x84013cae     0x4a    slli a0,a4,0x19
    0x84013cb2     0x4e    srli a0,a0,0x19
    0x84013cb4     0x50    srli a4,a4,0x26
    0x84013cb6     0x52    andi a4,a4,1
    0x84013cb8     0x54    beqz a4,ffffffff84013cc0 <handleInterrupt+0x5c>
    0x84013cba     0x56    li a4,-1
    0x84013cbc     0x58    slli a4,a4,0x27
    0x84013cbe     0x5a    or a0,a0,a4
    0x84013cc0     0x5c    ld a1,8(a5)
    0x84013cc2     0x5e    jal ra,ffffffff84013b6c <sendSignal>
    0x84013cc6     0x62    j ffffffff84013cfc <handleInterrupt+0x98>
    0x84013cc8     0x64    srli a4,a0,0x5
    0x84013ccc     0x68    slli a4,a4,0x2
    0x84013cce     0x6a    lui a5,0xcc002
    0x84013cd2     0x6e    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x84013cd6     0x72    add a4,a4,a5
    0x84013cd8     0x74    lw a3,0(a4)
    0x84013cda     0x76    andi a0,a0,31
    0x84013cdc     0x78    li a5,1
    0x84013cde     0x7a    sll a0,a5,a0
    0x84013ce2     0x7e    not a5,a0
    0x84013ce6     0x82    and a5,a5,a3
    0x84013ce8     0x84    sext.w a5,a5
    0x84013cea     0x86    sw a5,0(a4)
    0x84013cec     0x88    auipc a5,0x17
    0x84013cf0     0x8c    sw zero,-1188(a5) # ffffffff8402a848 <active_irq>
    0x84013cf4     0x90    ret
    0x84013cf6     0x92    li a4,3
    0x84013cf8     0x94    bne a5,a4,ffffffff84013d64 <handleInterrupt+0x100>
    0x84013cfc     0x98    auipc a5,0x17
    0x84013d00     0x9c    sw zero,-1204(a5) # ffffffff8402a848 <active_irq>
    0x84013d04     0xa0    ld ra,8(sp)           ; stack access
    0x84013d06     0xa2    addi sp,sp,16
    0x84013d08     0xa4    ret
    0x84013d0a     0xa6    jal ra,ffffffff84012a46 <timerTick>
    0x84013d0e     0xaa    rdtime a5
    0x84013d12     0xae    addi a5,a5,2000
    0x84013d16     0xb2    mv a0,a5
    0x84013d18     0xb4    li a1,0
    0x84013d1a     0xb6    li a2,0
    0x84013d1c     0xb8    li a7,0
    0x84013d1e     0xba    ecall
    0x84013d22     0xbe    rdtime a4
    0x84013d26     0xc2    bltu a5,a4,ffffffff84013d0e <handleInterrupt+0xaa>
    0x84013d2a     0xc6    j ffffffff84013cfc <handleInterrupt+0x98>
    0x84013d2c     0xc8    li a5,54
    0x84013d30     0xcc    bne a0,a5,ffffffff84013d3e <handleInterrupt+0xda>
    0x84013d34     0xd0    li a5,32
    0x84013d38     0xd4    csrrc a5,sie,a5
    0x84013d3c     0xd8    j ffffffff84013cfc <handleInterrupt+0x98>
    0x84013d3e     0xda    srli a4,a0,0x5
    0x84013d42     0xde    slli a4,a4,0x2
    0x84013d44     0xe0    lui a5,0xcc002
    0x84013d48     0xe4    addi a5,a5,256 # ffffffffcc002100 <ki_end+0x47fd3100>
    0x84013d4c     0xe8    add a4,a4,a5
    0x84013d4e     0xea    lw a3,0(a4)
    0x84013d50     0xec    andi a0,a0,31
    0x84013d52     0xee    li a5,1
    0x84013d54     0xf0    sll a0,a5,a0
    0x84013d58     0xf4    not a5,a0
    0x84013d5c     0xf8    and a5,a5,a3
    0x84013d5e     0xfa    sext.w a5,a5
    0x84013d60     0xfc    sw a5,0(a4)
    0x84013d62     0xfe    j ffffffff84013cfc <handleInterrupt+0x98>
    0x84013d64    0x100    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
89 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterrupt` has 129 nodes.

Section decodeIRQHandlerInvocation (222 of 269)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQHandlerInvocation` consists of 73 instructions.


Stack analysis
---------------

10 stack accesses found. Annotated code for `decodeIRQHandlerInvocation`:

    0x84013a48     0x0    addi sp,sp,-48
    0x84013a4a     0x2    sd ra,40(sp)          ; stack access
    0x84013a4c     0x4    sd s0,32(sp)          ; stack access
    0x84013a4e     0x6    sd s1,24(sp)          ; stack access
    0x84013a50     0x8    mv s0,a1
    0x84013a52     0xa    li a5,27
    0x84013a54     0xc    beq a0,a5,ffffffff84013a96 <decodeIRQHandlerInvocation+0x4e>
    0x84013a58    0x10    li a5,28
    0x84013a5a    0x12    beq a0,a5,ffffffff84013afa <decodeIRQHandlerInvocation+0xb2>
    0x84013a5e    0x16    li a5,26
    0x84013a60    0x18    beq a0,a5,ffffffff84013a72 <decodeIRQHandlerInvocation+0x2a>
    0x84013a64    0x1c    li a5,3
    0x84013a66    0x1e    auipc a4,0x5
    0x84013a6a    0x22    sd a5,-918(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013a6e    0x26    li a0,3
    0x84013a70    0x28    j ffffffff84013a8c <decodeIRQHandlerInvocation+0x44>
    0x84013a72    0x2a    li a1,2
    0x84013a74    0x2c    auipc a0,0x17
    0x84013a78    0x30    ld a0,-572(a0) # ffffffff8402a838 <ksCurThread>
    0x84013a7c    0x34    jal ra,ffffffff840125f6 <setThreadState>
    0x84013a80    0x38    sext.w a1,s0
    0x84013a84    0x3c    lui a5,0xcc202
    0x84013a88    0x40    sw a1,4(a5)
    0x84013a8a    0x42    li a0,0
    0x84013a8c    0x44    ld ra,40(sp)          ; stack access
    0x84013a8e    0x46    ld s0,32(sp)          ; stack access
    0x84013a90    0x48    ld s1,24(sp)          ; stack access
    0x84013a92    0x4a    addi sp,sp,48
    0x84013a94    0x4c    ret
    0x84013a96    0x4e    auipc s1,0x5
    0x84013a9a    0x52    ld s1,-518(s1) # ffffffff84018890 <current_extra_caps>
    0x84013a9e    0x56    beqz s1,ffffffff84013ace <decodeIRQHandlerInvocation+0x86>
    0x84013aa0    0x58    ld a5,0(s1)
    0x84013aa2    0x5a    sd a5,0(sp)           ; stack access
    0x84013aa4    0x5c    ld a4,8(s1)
    0x84013aa6    0x5e    sd a4,8(sp)           ; stack access
    0x84013aa8    0x60    srli a3,a5,0x3b
    0x84013aac    0x64    li a4,6
    0x84013aae    0x66    bne a3,a4,ffffffff84013ab8 <decodeIRQHandlerInvocation+0x70>
    0x84013ab2    0x6a    srli a5,a5,0x39
    0x84013ab4    0x6c    andi a5,a5,1
    0x84013ab6    0x6e    bnez a5,ffffffff84013adc <decodeIRQHandlerInvocation+0x94>
    0x84013ab8    0x70    auipc a5,0x4
    0x84013abc    0x74    addi a5,a5,1352 # ffffffff84018000 <riscvKSASIDTable>
    0x84013ac0    0x78    li a4,2
    0x84013ac2    0x7a    sd a4,1744(a5)
    0x84013ac6    0x7e    sd zero,1704(a5)
    0x84013aca    0x82    li a0,3
    0x84013acc    0x84    j ffffffff84013a8c <decodeIRQHandlerInvocation+0x44>
    0x84013ace    0x86    li a5,7
    0x84013ad0    0x88    auipc a4,0x5
    0x84013ad4    0x8c    sd a5,-1024(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013ad8    0x90    li a0,3
    0x84013ada    0x92    j ffffffff84013a8c <decodeIRQHandlerInvocation+0x44>
    0x84013adc    0x94    li a1,2
    0x84013ade    0x96    auipc a0,0x17
    0x84013ae2    0x9a    ld a0,-678(a0) # ffffffff8402a838 <ksCurThread>
    0x84013ae6    0x9e    jal ra,ffffffff840125f6 <setThreadState>
    0x84013aea    0xa2    mv a3,s1
    0x84013aec    0xa4    ld a1,0(sp)           ; stack access
    0x84013aee    0xa6    ld a2,8(sp)           ; stack access
    0x84013af0    0xa8    mv a0,s0
    0x84013af2    0xaa    jal ra,ffffffff840139f8 <invokeIRQHandler_SetIRQHandler>
    0x84013af6    0xae    li a0,0
    0x84013af8    0xb0    j ffffffff84013a8c <decodeIRQHandlerInvocation+0x44>
    0x84013afa    0xb2    li a1,2
    0x84013afc    0xb4    auipc a0,0x17
    0x84013b00    0xb8    ld a0,-708(a0) # ffffffff8402a838 <ksCurThread>
    0x84013b04    0xbc    jal ra,ffffffff840125f6 <setThreadState>
    0x84013b08    0xc0    mv a0,s0
    0x84013b0a    0xc2    jal ra,ffffffff84013a2e <invokeIRQHandler_ClearIRQHandler>
    0x84013b0e    0xc6    li a0,0
    0x84013b10    0xc8    j ffffffff84013a8c <decodeIRQHandlerInvocation+0x44>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQHandlerInvocation` has 112 nodes.

Section cteDeleteOne (223 of 269)
=================================

Deriving specifications
-----------------------

Section `cteDeleteOne` consists of 23 instructions.

RVC_TFFFFT___FFFT_TF.

Stack analysis
---------------

4 stack accesses found. Annotated code for `cteDeleteOne`:

    0x840139c4     0x0    ld a5,0(a0)
    0x840139c6     0x2    srli a5,a5,0x3b
    0x840139c8     0x4    bnez a5,ffffffff840139cc <cteDeleteOne+0x8>
    0x840139ca     0x6    ret
    0x840139cc     0x8    addi sp,sp,-64
    0x840139ce     0xa    sd ra,56(sp)          ; stack access
    0x840139d0     0xc    sd s0,48(sp)          ; stack access
    0x840139d2     0xe    mv s0,a0
    0x840139d4    0x10    jal ra,ffffffff8401217a <isFinalCapability>
    0x840139d8    0x14    mv a3,a0
    0x840139da    0x16    li a4,1
    0x840139dc    0x18    ld a1,0(s0)
    0x840139de    0x1a    ld a2,8(s0)
    0x840139e0    0x1c    mv a0,sp
    0x840139e2    0x1e    jal ra,ffffffff84013110 <finaliseCap>
    0x840139e6    0x22    li a1,0
    0x840139e8    0x24    li a2,0
    0x840139ea    0x26    mv a0,s0
    0x840139ec    0x28    jal ra,ffffffff84011b30 <emptySlot>
    0x840139f0    0x2c    ld ra,56(sp)          ; stack access
    0x840139f2    0x2e    ld s0,48(sp)          ; stack access
    0x840139f4    0x30    addi sp,sp,64
    0x840139f6    0x32    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
23 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDeleteOne` has 37 nodes.

Section cteRevoke (224 of 269)
==============================

Deriving specifications
-----------------------

Section `cteRevoke` consists of 55 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `cteRevoke`:

    0x840134a0     0x0    addi sp,sp,-64
    0x840134a2     0x2    sd ra,56(sp)          ; stack access
    0x840134a4     0x4    sd s0,48(sp)          ; stack access
    0x840134a6     0x6    sd s1,40(sp)          ; stack access
    0x840134a8     0x8    sd s2,32(sp)          ; stack access
    0x840134aa     0xa    sd s3,24(sp)          ; stack access
    0x840134ac     0xc    sd s4,16(sp)          ; stack access
    0x840134ae     0xe    sd s5,8(sp)           ; stack access
    0x840134b0    0x10    mv s1,a0
    0x840134b2    0x12    ld a4,24(a0)
    0x840134b4    0x14    lui a5,0xf8000
    0x840134b8    0x18    srli a5,a5,0x19
    0x840134ba    0x1a    and a0,a4,a5
    0x840134be    0x1e    srli a4,a4,0x26
    0x840134c0    0x20    andi a4,a4,1
    0x840134c2    0x22    beqz a4,ffffffff84013508 <cteRevoke+0x68>
    0x840134c4    0x24    li s0,-1
    0x840134c6    0x26    slli s0,s0,0x27
    0x840134c8    0x28    or s0,s0,a0
    0x840134ca    0x2a    li s3,1
    0x840134cc    0x2c    lui s2,0xf8000
    0x840134d0    0x30    srli s2,s2,0x19
    0x840134d4    0x34    slli s5,s3,0x26
    0x840134d8    0x38    li s4,-1
    0x840134da    0x3a    slli s4,s4,0x27
    0x840134dc    0x3c    mv a1,s0
    0x840134de    0x3e    mv a0,s1
    0x840134e0    0x40    jal ra,ffffffff84011ff2 <isMDBParentOf>
    0x840134e4    0x44    beqz a0,ffffffff8401350c <cteRevoke+0x6c>
    0x840134e6    0x46    mv a1,s3
    0x840134e8    0x48    mv a0,s0
    0x840134ea    0x4a    jal ra,ffffffff840132d0 <cteDelete>
    0x840134ee    0x4e    bnez a0,ffffffff8401350c <cteRevoke+0x6c>
    0x840134f0    0x50    jal ra,ffffffff84011640 <preemptionPoint>
    0x840134f4    0x54    bnez a0,ffffffff8401350c <cteRevoke+0x6c>
    0x840134f6    0x56    ld a5,24(s1)
    0x840134f8    0x58    and a0,a5,s2
    0x840134fc    0x5c    and a5,a5,s5
    0x84013500    0x60    beqz a5,ffffffff8401351e <cteRevoke+0x7e>
    0x84013502    0x62    or s0,a0,s4
    0x84013506    0x66    j ffffffff840134dc <cteRevoke+0x3c>
    0x84013508    0x68    mv s0,a0
    0x8401350a    0x6a    bnez a0,ffffffff840134ca <cteRevoke+0x2a>
    0x8401350c    0x6c    ld ra,56(sp)          ; stack access
    0x8401350e    0x6e    ld s0,48(sp)          ; stack access
    0x84013510    0x70    ld s1,40(sp)          ; stack access
    0x84013512    0x72    ld s2,32(sp)          ; stack access
    0x84013514    0x74    ld s3,24(sp)          ; stack access
    0x84013516    0x76    ld s4,16(sp)          ; stack access
    0x84013518    0x78    ld s5,8(sp)           ; stack access
    0x8401351a    0x7a    addi sp,sp,64
    0x8401351c    0x7c    ret
    0x8401351e    0x7e    beqz a0,ffffffff8401350c <cteRevoke+0x6c>
    0x84013520    0x80    mv s0,a0
    0x84013522    0x82    j ffffffff840134dc <cteRevoke+0x3c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
55 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteRevoke` has 89 nodes.

Section suspend (225 of 269)
============================

Deriving specifications
-----------------------

Section `suspend` consists of 21 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `suspend`:

    0x840130d8     0x0    addi sp,sp,-16
    0x840130da     0x2    sd ra,8(sp)           ; stack access
    0x840130dc     0x4    sd s0,0(sp)           ; stack access
    0x840130de     0x6    mv s0,a0
    0x840130e0     0x8    jal ra,ffffffff84012ffc <cancelIPC>
    0x840130e4     0xc    ld a5,280(s0)
    0x840130e8    0x10    andi a5,a5,15
    0x840130ea    0x12    li a4,1
    0x840130ec    0x14    beq a5,a4,ffffffff84013106 <suspend+0x2e>
    0x840130f0    0x18    li a1,0
    0x840130f2    0x1a    mv a0,s0
    0x840130f4    0x1c    jal ra,ffffffff840125f6 <setThreadState>
    0x840130f8    0x20    mv a0,s0
    0x840130fa    0x22    jal ra,ffffffff84012a98 <tcbSchedDequeue>
    0x840130fe    0x26    ld ra,8(sp)           ; stack access
    0x84013100    0x28    ld s0,0(sp)           ; stack access
    0x84013102    0x2a    addi sp,sp,16
    0x84013104    0x2c    ret
    0x84013106    0x2e    ld a5,272(s0)
    0x8401310a    0x32    sd a5,264(s0)
    0x8401310e    0x36    j ffffffff840130f0 <suspend+0x18>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
21 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `suspend` has 34 nodes.

Section setPriority (226 of 269)
================================

Deriving specifications
-----------------------

Section `setPriority` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setPriority`:

    0x84012df6     0x0    addi sp,sp,-32
    0x84012df8     0x2    sd ra,24(sp)          ; stack access
    0x84012dfa     0x4    sd s0,16(sp)          ; stack access
    0x84012dfc     0x6    sd s1,8(sp)           ; stack access
    0x84012dfe     0x8    mv s0,a0
    0x84012e00     0xa    mv s1,a1
    0x84012e02     0xc    jal ra,ffffffff84012a98 <tcbSchedDequeue>
    0x84012e06    0x10    sd s1,360(s0)
    0x84012e0a    0x14    ld a5,280(s0)
    0x84012e0e    0x18    andi a5,a5,15
    0x84012e10    0x1a    addi a5,a5,-1
    0x84012e12    0x1c    li a4,1
    0x84012e14    0x1e    bgeu a4,a5,ffffffff84012e22 <setPriority+0x2c>
    0x84012e18    0x22    ld ra,24(sp)          ; stack access
    0x84012e1a    0x24    ld s0,16(sp)          ; stack access
    0x84012e1c    0x26    ld s1,8(sp)           ; stack access
    0x84012e1e    0x28    addi sp,sp,32
    0x84012e20    0x2a    ret
    0x84012e22    0x2c    auipc a5,0x18
    0x84012e26    0x30    ld a5,-1514(a5) # ffffffff8402a838 <ksCurThread>
    0x84012e2a    0x34    beq a5,s0,ffffffff84012e36 <setPriority+0x40>
    0x84012e2e    0x38    mv a0,s0
    0x84012e30    0x3a    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x84012e34    0x3e    j ffffffff84012e18 <setPriority+0x22>
    0x84012e36    0x40    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84012e3a    0x44    j ffffffff84012e18 <setPriority+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setPriority` has 43 nodes.

Section setDomain (227 of 269)
==============================

Deriving specifications
-----------------------

Section `setDomain` consists of 26 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `setDomain`:

    0x84012db0     0x0    addi sp,sp,-32
    0x84012db2     0x2    sd ra,24(sp)          ; stack access
    0x84012db4     0x4    sd s0,16(sp)          ; stack access
    0x84012db6     0x6    sd s1,8(sp)           ; stack access
    0x84012db8     0x8    mv s0,a0
    0x84012dba     0xa    mv s1,a1
    0x84012dbc     0xc    jal ra,ffffffff84012a98 <tcbSchedDequeue>
    0x84012dc0    0x10    sd s1,344(s0)
    0x84012dc4    0x14    ld a5,280(s0)
    0x84012dc8    0x18    andi a5,a5,15
    0x84012dca    0x1a    addi a5,a5,-1
    0x84012dcc    0x1c    li a4,1
    0x84012dce    0x1e    bgeu a4,a5,ffffffff84012de8 <setDomain+0x38>
    0x84012dd2    0x22    auipc a5,0x18
    0x84012dd6    0x26    ld a5,-1434(a5) # ffffffff8402a838 <ksCurThread>
    0x84012dda    0x2a    beq a5,s0,ffffffff84012df0 <setDomain+0x40>
    0x84012dde    0x2e    ld ra,24(sp)          ; stack access
    0x84012de0    0x30    ld s0,16(sp)          ; stack access
    0x84012de2    0x32    ld s1,8(sp)           ; stack access
    0x84012de4    0x34    addi sp,sp,32
    0x84012de6    0x36    ret
    0x84012de8    0x38    mv a0,s0
    0x84012dea    0x3a    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x84012dee    0x3e    j ffffffff84012dd2 <setDomain+0x22>
    0x84012df0    0x40    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84012df4    0x44    j ffffffff84012dde <setDomain+0x2e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
26 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `setDomain` has 43 nodes.

Section chooseThread (228 of 269)
=================================

Deriving specifications
-----------------------

Section `chooseThread` consists of 44 instructions.


Stack analysis
---------------

6 stack accesses found. Annotated code for `chooseThread`:

    0x84012b96     0x0    addi sp,sp,-32
    0x84012b98     0x2    sd ra,24(sp)          ; stack access
    0x84012b9a     0x4    sd s0,16(sp)          ; stack access
    0x84012b9c     0x6    sd s1,8(sp)           ; stack access
    0x84012b9e     0x8    auipc s1,0x18
    0x84012ba2     0xc    ld s1,-902(s1) # ffffffff8402a818 <ksCurDomain>
    0x84012ba6    0x10    slli a4,s1,0x3
    0x84012baa    0x14    auipc a5,0x5
    0x84012bae    0x18    addi a5,a5,1110 # ffffffff84018000 <riscvKSASIDTable>
    0x84012bb2    0x1c    add a5,a5,a4
    0x84012bb4    0x1e    ld a0,1040(a5)
    0x84012bb8    0x22    beqz a0,ffffffff84012c10 <chooseThread+0x7a>
    0x84012bba    0x24    jal ra,ffffffff8401739a <__clzdi2>
    0x84012bbe    0x28    sext.w s0,a0
    0x84012bc2    0x2c    slli a5,s1,0x2
    0x84012bc6    0x30    addi a4,s0,-60
    0x84012bca    0x34    add a5,a5,a4
    0x84012bcc    0x36    slli a5,a5,0x3
    0x84012bce    0x38    auipc a4,0x5
    0x84012bd2    0x3c    addi a4,a4,1074 # ffffffff84018000 <riscvKSASIDTable>
    0x84012bd6    0x40    add a5,a5,a4
    0x84012bd8    0x42    ld a0,1168(a5)
    0x84012bdc    0x46    jal ra,ffffffff8401739a <__clzdi2>
    0x84012be0    0x4a    sext.w a0,a0
    0x84012be2    0x4c    li a5,63
    0x84012be6    0x50    sub s0,a5,s0
    0x84012bea    0x54    slli s0,s0,0x6
    0x84012bec    0x56    sub a5,a5,a0
    0x84012bee    0x58    or s0,s0,a5
    0x84012bf0    0x5a    slli s1,s1,0x8
    0x84012bf2    0x5c    add s0,s0,s1
    0x84012bf4    0x5e    slli s0,s0,0x4
    0x84012bf6    0x60    auipc s1,0x7
    0x84012bfa    0x64    addi s1,s1,-1014 # ffffffff84019800 <ksReadyQueues>
    0x84012bfe    0x68    add s0,s0,s1
    0x84012c00    0x6a    ld a0,0(s0)
    0x84012c02    0x6c    jal ra,ffffffff84012b74 <switchToThread>
    0x84012c06    0x70    ld ra,24(sp)          ; stack access
    0x84012c08    0x72    ld s0,16(sp)          ; stack access
    0x84012c0a    0x74    ld s1,8(sp)           ; stack access
    0x84012c0c    0x76    addi sp,sp,32
    0x84012c0e    0x78    ret
    0x84012c10    0x7a    jal ra,ffffffff8401161c <switchToIdleThread>
    0x84012c14    0x7e    j ffffffff84012c06 <chooseThread+0x70>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `chooseThread` has 61 nodes.

Section cancelAllSignals (229 of 269)
=====================================

Deriving specifications
-----------------------

Section `cancelAllSignals` consists of 44 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllSignals`:

    0x84012942     0x0    ld a5,0(a0)
    0x84012944     0x2    andi a3,a5,3
    0x84012948     0x6    li a4,1
    0x8401294a     0x8    beq a3,a4,ffffffff84012950 <cancelAllSignals+0xe>
    0x8401294e     0xc    ret
    0x84012950     0xe    addi sp,sp,-16
    0x84012952    0x10    sd ra,8(sp)           ; stack access
    0x84012954    0x12    sd s0,0(sp)           ; stack access
    0x84012956    0x14    ld a4,8(a0)
    0x84012958    0x16    slli s0,a4,0x19
    0x8401295c    0x1a    srli s0,s0,0x19
    0x8401295e    0x1c    srli a3,a4,0x26
    0x84012962    0x20    andi a3,a3,1
    0x84012964    0x22    beqz a3,ffffffff8401299a <cancelAllSignals+0x58>
    0x84012966    0x24    li a3,-1
    0x84012968    0x26    slli a3,a3,0x27
    0x8401296a    0x28    or s0,s0,a3
    0x8401296c    0x2a    and a4,a4,a3
    0x8401296e    0x2c    sd a4,8(a0)
    0x84012970    0x2e    lui a4,0x2000
    0x84012974    0x32    addi a4,a4,-4
    0x84012976    0x34    and a5,a5,a4
    0x84012978    0x36    sd a5,0(a0)
    0x8401297a    0x38    li a1,2
    0x8401297c    0x3a    mv a0,s0
    0x8401297e    0x3c    jal ra,ffffffff840125f6 <setThreadState>
    0x84012982    0x40    mv a0,s0
    0x84012984    0x42    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x84012988    0x46    ld s0,408(s0)
    0x8401298c    0x4a    bnez s0,ffffffff8401297a <cancelAllSignals+0x38>
    0x8401298e    0x4c    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84012992    0x50    ld ra,8(sp)           ; stack access
    0x84012994    0x52    ld s0,0(sp)           ; stack access
    0x84012996    0x54    addi sp,sp,16
    0x84012998    0x56    ret
    0x8401299a    0x58    srli a4,a4,0x27
    0x8401299c    0x5a    slli a4,a4,0x27
    0x8401299e    0x5c    sd a4,8(a0)
    0x840129a0    0x5e    lui a4,0x2000
    0x840129a4    0x62    addi a4,a4,-4
    0x840129a6    0x64    and a5,a5,a4
    0x840129a8    0x66    sd a5,0(a0)
    0x840129aa    0x68    beqz s0,ffffffff8401298e <cancelAllSignals+0x4c>
    0x840129ac    0x6a    j ffffffff8401297a <cancelAllSignals+0x38>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
44 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllSignals` has 68 nodes.

Section cancelAllIPC (230 of 269)
=================================

Deriving specifications
-----------------------

Section `cancelAllIPC` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `cancelAllIPC`:

    0x84012904     0x0    ld a5,0(a0)
    0x84012906     0x2    andi a4,a5,3
    0x8401290a     0x6    beqz a4,ffffffff84012940 <cancelAllIPC+0x3c>
    0x8401290c     0x8    addi sp,sp,-16
    0x8401290e     0xa    sd ra,8(sp)           ; stack access
    0x84012910     0xc    sd s0,0(sp)           ; stack access
    0x84012912     0xe    ld s0,8(a0)
    0x84012914    0x10    sd zero,8(a0)
    0x84012918    0x14    srli a5,a5,0x27
    0x8401291a    0x16    slli a5,a5,0x27
    0x8401291c    0x18    sd a5,0(a0)
    0x8401291e    0x1a    beqz s0,ffffffff84012934 <cancelAllIPC+0x30>
    0x84012920    0x1c    li a1,2
    0x84012922    0x1e    mv a0,s0
    0x84012924    0x20    jal ra,ffffffff840125f6 <setThreadState>
    0x84012928    0x24    mv a0,s0
    0x8401292a    0x26    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x8401292e    0x2a    ld s0,408(s0)
    0x84012932    0x2e    bnez s0,ffffffff84012920 <cancelAllIPC+0x1c>
    0x84012934    0x30    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84012938    0x34    ld ra,8(sp)           ; stack access
    0x8401293a    0x36    ld s0,0(sp)           ; stack access
    0x8401293c    0x38    addi sp,sp,16
    0x8401293e    0x3a    ret
    0x84012940    0x3c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelAllIPC` has 45 nodes.

Section createNewObjects (231 of 269)
=====================================

Deriving specifications
-----------------------

Section `createNewObjects` consists of 52 instructions.


Stack analysis
---------------

20 stack accesses found. Annotated code for `createNewObjects`:

    0x8401247e     0x0    addi sp,sp,-96
    0x84012480     0x2    sd ra,88(sp)          ; stack access
    0x84012482     0x4    sd s0,80(sp)          ; stack access
    0x84012484     0x6    sd s1,72(sp)          ; stack access
    0x84012486     0x8    sd s2,64(sp)          ; stack access
    0x84012488     0xa    sd s3,56(sp)          ; stack access
    0x8401248a     0xc    sd s4,48(sp)          ; stack access
    0x8401248c     0xe    sd s5,40(sp)          ; stack access
    0x8401248e    0x10    sd s6,32(sp)          ; stack access
    0x84012490    0x12    sd s7,24(sp)          ; stack access
    0x84012492    0x14    sd s8,16(sp)          ; stack access
    0x84012494    0x16    mv s5,a0
    0x84012496    0x18    mv s6,a1
    0x84012498    0x1a    mv s1,a2
    0x8401249a    0x1c    mv s0,a3
    0x8401249c    0x1e    mv s2,a4
    0x8401249e    0x20    mv s7,a5
    0x840124a0    0x22    mv s3,a6
    0x840124a2    0x24    mv s8,a7
    0x840124a4    0x26    mv a1,a6
    0x840124a6    0x28    jal ra,ffffffff84011c22 <getObjectSize>
    0x840124aa    0x2c    beqz s2,ffffffff840124de <createNewObjects+0x60>
    0x840124ae    0x30    sext.w s4,a0
    0x840124b2    0x34    slli s0,s0,0x5
    0x840124b4    0x36    add s1,s1,s0
    0x840124b6    0x38    li s0,0
    0x840124b8    0x3a    sll a1,s0,s4
    0x840124bc    0x3e    mv a3,s8
    0x840124be    0x40    mv a2,s3
    0x840124c0    0x42    add a1,a1,s7
    0x840124c2    0x44    mv a0,s5
    0x840124c4    0x46    jal ra,ffffffff840123c2 <createObject>
    0x840124c8    0x4a    mv a2,a0
    0x840124ca    0x4c    mv a3,a1
    0x840124cc    0x4e    mv a1,s1
    0x840124ce    0x50    mv a0,s6
    0x840124d0    0x52    jal ra,ffffffff84011952 <insertNewCap>
    0x840124d4    0x56    addi s0,s0,1
    0x840124d6    0x58    addi s1,s1,32
    0x840124da    0x5c    bne s2,s0,ffffffff840124b8 <createNewObjects+0x3a>
    0x840124de    0x60    ld ra,88(sp)          ; stack access
    0x840124e0    0x62    ld s0,80(sp)          ; stack access
    0x840124e2    0x64    ld s1,72(sp)          ; stack access
    0x840124e4    0x66    ld s2,64(sp)          ; stack access
    0x840124e6    0x68    ld s3,56(sp)          ; stack access
    0x840124e8    0x6a    ld s4,48(sp)          ; stack access
    0x840124ea    0x6c    ld s5,40(sp)          ; stack access
    0x840124ec    0x6e    ld s6,32(sp)          ; stack access
    0x840124ee    0x70    ld s7,24(sp)          ; stack access
    0x840124f0    0x72    ld s8,16(sp)          ; stack access
    0x840124f2    0x74    addi sp,sp,96
    0x840124f4    0x76    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
52 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `createNewObjects` has 80 nodes.

Section sameRegionAs (232 of 269)
=================================

Deriving specifications
-----------------------

Section `sameRegionAs` consists of 315 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `sameRegionAs`:

    0x84011c9a      0x0    addi sp,sp,-80
    0x84011c9c      0x2    sd ra,72(sp)          ; stack access
    0x84011c9e      0x4    sd s0,64(sp)          ; stack access
    0x84011ca0      0x6    sd s1,56(sp)          ; stack access
    0x84011ca2      0x8    sd s2,48(sp)          ; stack access
    0x84011ca4      0xa    sd s3,40(sp)          ; stack access
    0x84011ca6      0xc    sd s4,32(sp)          ; stack access
    0x84011ca8      0xe    sd a0,16(sp)          ; stack access
    0x84011caa     0x10    sd a1,24(sp)          ; stack access
    0x84011cac     0x12    sd a2,0(sp)           ; stack access
    0x84011cae     0x14    sd a3,8(sp)           ; stack access
    0x84011cb0     0x16    mv s0,a2
    0x84011cb2     0x18    mv s1,a3
    0x84011cb4     0x1a    mv a4,a0
    0x84011cb6     0x1c    srli a5,a0,0x3b
    0x84011cba     0x20    li a3,10
    0x84011cbc     0x22    beq a5,a3,ffffffff84011efe <sameRegionAs+0x264>
    0x84011cc0     0x26    mv s2,a1
    0x84011cc2     0x28    bgeu a3,a5,ffffffff84011cf0 <sameRegionAs+0x56>
    0x84011cc6     0x2c    li a3,16
    0x84011cc8     0x2e    beq a5,a3,ffffffff84011faa <sameRegionAs+0x310>
    0x84011ccc     0x32    bgeu a3,a5,ffffffff84011d5e <sameRegionAs+0xc4>
    0x84011cd0     0x36    li a4,20
    0x84011cd2     0x38    bne a5,a4,ffffffff84011fc8 <sameRegionAs+0x32e>
    0x84011cd6     0x3c    srli a0,a2,0x3b
    0x84011cda     0x40    addi a0,a0,-20
    0x84011cdc     0x42    seqz a0,a0
    0x84011ce0     0x46    ld ra,72(sp)          ; stack access
    0x84011ce2     0x48    ld s0,64(sp)          ; stack access
    0x84011ce4     0x4a    ld s1,56(sp)          ; stack access
    0x84011ce6     0x4c    ld s2,48(sp)          ; stack access
    0x84011ce8     0x4e    ld s3,40(sp)          ; stack access
    0x84011cea     0x50    ld s4,32(sp)          ; stack access
    0x84011cec     0x52    addi sp,sp,80
    0x84011cee     0x54    ret
    0x84011cf0     0x56    li a3,6
    0x84011cf2     0x58    beq a5,a3,ffffffff84011ec2 <sameRegionAs+0x228>
    0x84011cf6     0x5c    bgeu a3,a5,ffffffff84011d16 <sameRegionAs+0x7c>
    0x84011cfa     0x60    li a4,8
    0x84011cfc     0x62    bne a5,a4,ffffffff84011fc8 <sameRegionAs+0x32e>
    0x84011d00     0x66    srli s0,a2,0x3b
    0x84011d04     0x6a    li a5,8
    0x84011d06     0x6c    li a0,0
    0x84011d08     0x6e    bne s0,a5,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011d0c     0x72    sub a0,a1,s1
    0x84011d10     0x76    seqz a0,a0
    0x84011d14     0x7a    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011d16     0x7c    li a3,2
    0x84011d18     0x7e    beq a5,a3,ffffffff84011d78 <sameRegionAs+0xde>
    0x84011d1c     0x82    li a3,4
    0x84011d1e     0x84    bne a5,a3,ffffffff84011fc8 <sameRegionAs+0x32e>
    0x84011d22     0x88    srli a5,a2,0x3b
    0x84011d26     0x8c    li a3,4
    0x84011d28     0x8e    li a0,0
    0x84011d2a     0x90    bne a5,a3,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011d2e     0x94    slli a5,a4,0x19
    0x84011d32     0x98    srli a3,a5,0x19
    0x84011d36     0x9c    srli a4,a4,0x26
    0x84011d38     0x9e    andi a4,a4,1
    0x84011d3a     0xa0    beqz a4,ffffffff84011d42 <sameRegionAs+0xa8>
    0x84011d3c     0xa2    li a5,-1
    0x84011d3e     0xa4    slli a5,a5,0x27
    0x84011d40     0xa6    or a3,a3,a5
    0x84011d42     0xa8    slli a5,s0,0x19
    0x84011d46     0xac    srli a5,a5,0x19
    0x84011d48     0xae    srli a0,s0,0x26
    0x84011d4c     0xb2    andi a0,a0,1
    0x84011d4e     0xb4    beqz a0,ffffffff84011d56 <sameRegionAs+0xbc>
    0x84011d50     0xb6    li a4,-1
    0x84011d52     0xb8    slli a4,a4,0x27
    0x84011d54     0xba    or a5,a5,a4
    0x84011d56     0xbc    sub a5,a5,a3
    0x84011d58     0xbe    seqz a0,a5
    0x84011d5c     0xc2    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011d5e     0xc4    li a3,12
    0x84011d60     0xc6    beq a5,a3,ffffffff84011f6e <sameRegionAs+0x2d4>
    0x84011d64     0xca    li a4,14
    0x84011d66     0xcc    bne a5,a4,ffffffff84011fc8 <sameRegionAs+0x32e>
    0x84011d6a     0xd0    srli a0,a2,0x3b
    0x84011d6e     0xd4    addi a0,a0,-14
    0x84011d70     0xd6    andi a0,a0,-3
    0x84011d72     0xd8    seqz a0,a0
    0x84011d76     0xdc    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011d78     0xde    srli s3,a2,0x3b
    0x84011d7c     0xe2    li a5,20
    0x84011d7e     0xe4    bltu a5,s3,ffffffff84011da2 <sameRegionAs+0x108>
    0x84011d82     0xe8    li a3,1
    0x84011d84     0xea    sll a3,a3,s3
    0x84011d88     0xee    lui a5,0x41
    0x84011d8c     0xf2    addi a5,a5,1108 # 41454 <KERNEL_OFFSET-0xfffffffefffbebac>
    0x84011d90     0xf6    and a0,a3,a5
    0x84011d94     0xfa    bnez a0,ffffffff84011dba <sameRegionAs+0x120>
    0x84011d96     0xfc    lui a5,0x114
    0x84011d9a    0x100    addi a5,a5,256 # 114100 <KERNEL_OFFSET-0xfffffffeffeebf00>
    0x84011d9e    0x104    and a3,a3,a5
    0x84011da0    0x106    bnez a3,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011da2    0x108    li a5,13
    0x84011da4    0x10a    bltu a5,s3,ffffffff84011dfa <sameRegionAs+0x160>
    0x84011da8    0x10e    li a5,1
    0x84011daa    0x110    sll a5,a5,s3
    0x84011dae    0x114    lui a0,0x2
    0x84011db0    0x116    addi a0,a0,10
    0x84011db2    0x118    and a5,a5,a0
    0x84011db4    0x11a    snez a0,a5
    0x84011db8    0x11e    beqz a0,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011dba    0x120    slli s4,a4,0x19
    0x84011dbe    0x124    srli s4,s4,0x19
    0x84011dc2    0x128    srli a4,a4,0x26
    0x84011dc4    0x12a    andi a4,a4,1
    0x84011dc6    0x12c    beqz a4,ffffffff84011dd0 <sameRegionAs+0x136>
    0x84011dc8    0x12e    li a5,-1
    0x84011dca    0x130    slli a5,a5,0x27
    0x84011dcc    0x132    or s4,s4,a5
    0x84011dd0    0x136    ld a0,0(sp)           ; stack access
    0x84011dd2    0x138    ld a1,8(sp)           ; stack access
    0x84011dd4    0x13a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84011dd8    0x13e    mv a5,a0
    0x84011dda    0x140    li a4,10
    0x84011ddc    0x142    beq s3,a4,ffffffff84011e92 <sameRegionAs+0x1f8>
    0x84011de0    0x146    bltu a4,s3,ffffffff84011e36 <sameRegionAs+0x19c>
    0x84011de4    0x14a    li a4,4
    0x84011de6    0x14c    beq s3,a4,ffffffff84011eae <sameRegionAs+0x214>
    0x84011dea    0x150    bgeu a4,s3,ffffffff84011dfe <sameRegionAs+0x164>
    0x84011dee    0x154    li a4,6
    0x84011df0    0x156    li s1,5
    0x84011df2    0x158    beq s3,a4,ffffffff84011e0c <sameRegionAs+0x172>
    0x84011df6    0x15c    li s1,0
    0x84011df8    0x15e    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011dfa    0x160    li a0,0
    0x84011dfc    0x162    j ffffffff84011db8 <sameRegionAs+0x11e>
    0x84011dfe    0x164    beqz s3,ffffffff84011eb2 <sameRegionAs+0x218>
    0x84011e02    0x168    li a4,2
    0x84011e04    0x16a    andi s1,s1,63
    0x84011e08    0x16e    bne s3,a4,ffffffff84011fe8 <sameRegionAs+0x34e>
    0x84011e0c    0x172    li a0,0
    0x84011e0e    0x174    bltu a5,s4,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011e12    0x178    li a4,1
    0x84011e14    0x17a    sll s1,a4,s1
    0x84011e18    0x17e    addi a3,a5,-1
    0x84011e1c    0x182    add s1,s1,a3
    0x84011e1e    0x184    sll a4,a4,s2
    0x84011e22    0x188    addi a4,a4,-1
    0x84011e24    0x18a    add s4,s4,a4
    0x84011e26    0x18c    bltu s4,s1,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011e2a    0x190    sltu a0,s1,a5
    0x84011e2e    0x194    xori a0,a0,1
    0x84011e32    0x198    sext.w a0,a0
    0x84011e34    0x19a    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011e36    0x19c    li a4,16
    0x84011e38    0x19e    beq s3,a4,ffffffff84011eb6 <sameRegionAs+0x21c>
    0x84011e3c    0x1a2    bgeu a4,s3,ffffffff84011e5c <sameRegionAs+0x1c2>
    0x84011e40    0x1a6    li a4,18
    0x84011e42    0x1a8    li s1,0
    0x84011e44    0x1aa    bne s3,a4,ffffffff84011e0c <sameRegionAs+0x172>
    0x84011e48    0x1ae    andi a4,s0,127
    0x84011e4c    0x1b2    li a3,64
    0x84011e50    0x1b6    beq a4,a3,ffffffff84011ebe <sameRegionAs+0x224>
    0x84011e54    0x1ba    andi s1,s0,63
    0x84011e58    0x1be    addi s1,s1,5
    0x84011e5a    0x1c0    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011e5c    0x1c2    li a4,12
    0x84011e5e    0x1c4    beq s3,a4,ffffffff84011eba <sameRegionAs+0x220>
    0x84011e62    0x1c8    li a4,14
    0x84011e64    0x1ca    li s1,0
    0x84011e66    0x1cc    beq s3,a4,ffffffff84011e0c <sameRegionAs+0x172>
    0x84011e6a    0x1d0    li a4,13
    0x84011e6c    0x1d2    beq s3,a4,ffffffff84011e9e <sameRegionAs+0x204>
    0x84011e70    0x1d6    li a4,1
    0x84011e72    0x1d8    li s1,0
    0x84011e74    0x1da    bne s3,a4,ffffffff84011e0c <sameRegionAs+0x172>
    0x84011e78    0x1de    srli a0,s0,0x39
    0x84011e7c    0x1e2    andi a4,a0,3
    0x84011e80    0x1e6    li a3,1
    0x84011e82    0x1e8    beq a4,a3,ffffffff84011ea2 <sameRegionAs+0x208>
    0x84011e86    0x1ec    li a3,2
    0x84011e88    0x1ee    beq a4,a3,ffffffff84011ea6 <sameRegionAs+0x20c>
    0x84011e8c    0x1f2    beqz a4,ffffffff84011eaa <sameRegionAs+0x210>
    0x84011e8e    0x1f4    jal ra,ffffffff840103da <halt>
    0x84011e92    0x1f8    srli s1,s0,0x2f
    0x84011e96    0x1fc    andi s1,s1,63
    0x84011e9a    0x200    addi s1,s1,5
    0x84011e9c    0x202    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011e9e    0x204    li s1,12
    0x84011ea0    0x206    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011ea2    0x208    li s1,21
    0x84011ea4    0x20a    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011ea6    0x20c    li s1,30
    0x84011ea8    0x20e    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011eaa    0x210    li s1,12
    0x84011eac    0x212    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011eae    0x214    li s1,4
    0x84011eb0    0x216    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011eb2    0x218    li s1,0
    0x84011eb4    0x21a    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011eb6    0x21c    li s1,0
    0x84011eb8    0x21e    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011eba    0x220    li s1,10
    0x84011ebc    0x222    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011ebe    0x224    li s1,10
    0x84011ec0    0x226    j ffffffff84011e0c <sameRegionAs+0x172>
    0x84011ec2    0x228    srli a5,a2,0x3b
    0x84011ec6    0x22c    li a3,6
    0x84011ec8    0x22e    li a0,0
    0x84011eca    0x230    bne a5,a3,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011ece    0x234    slli a5,a4,0x19
    0x84011ed2    0x238    srli a3,a5,0x19
    0x84011ed6    0x23c    srli a4,a4,0x26
    0x84011ed8    0x23e    andi a4,a4,1
    0x84011eda    0x240    beqz a4,ffffffff84011ee2 <sameRegionAs+0x248>
    0x84011edc    0x242    li a5,-1
    0x84011ede    0x244    slli a5,a5,0x27
    0x84011ee0    0x246    or a3,a3,a5
    0x84011ee2    0x248    slli a5,s0,0x19
    0x84011ee6    0x24c    srli a5,a5,0x19
    0x84011ee8    0x24e    srli a0,s0,0x26
    0x84011eec    0x252    andi a0,a0,1
    0x84011eee    0x254    beqz a0,ffffffff84011ef6 <sameRegionAs+0x25c>
    0x84011ef0    0x256    li a4,-1
    0x84011ef2    0x258    slli a4,a4,0x27
    0x84011ef4    0x25a    or a5,a5,a4
    0x84011ef6    0x25c    sub a5,a5,a3
    0x84011ef8    0x25e    seqz a0,a5
    0x84011efc    0x262    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011efe    0x264    srli a5,a2,0x3b
    0x84011f02    0x268    li a3,10
    0x84011f04    0x26a    li a0,0
    0x84011f06    0x26c    bne a5,a3,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011f0a    0x270    slli a5,a4,0x1
    0x84011f0e    0x274    lui a3,0xfc000
    0x84011f12    0x278    srli a3,a3,0x19
    0x84011f14    0x27a    and a3,a3,a5
    0x84011f16    0x27c    srli a5,a5,0x26
    0x84011f18    0x27e    andi a5,a5,1
    0x84011f1a    0x280    beqz a5,ffffffff84011f44 <sameRegionAs+0x2aa>
    0x84011f1c    0x282    li a5,-1
    0x84011f1e    0x284    slli a5,a5,0x27
    0x84011f20    0x286    or a3,a3,a5
    0x84011f22    0x288    slli a5,a2,0x1
    0x84011f26    0x28c    lui a2,0xfc000
    0x84011f2a    0x290    srli a2,a2,0x19
    0x84011f2c    0x292    and a2,a2,a5
    0x84011f2e    0x294    srli a5,a5,0x26
    0x84011f30    0x296    andi a5,a5,1
    0x84011f32    0x298    beqz a5,ffffffff84011f40 <sameRegionAs+0x2a6>
    0x84011f34    0x29a    li a5,-1
    0x84011f36    0x29c    slli a5,a5,0x27
    0x84011f38    0x29e    or a2,a2,a5
    0x84011f3a    0x2a0    li a5,0
    0x84011f3c    0x2a2    beq a2,a3,ffffffff84011f58 <sameRegionAs+0x2be>
    0x84011f40    0x2a6    mv a0,a5
    0x84011f42    0x2a8    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011f44    0x2aa    slli a5,a2,0x1
    0x84011f48    0x2ae    lui a2,0xfc000
    0x84011f4c    0x2b2    srli a2,a2,0x19
    0x84011f4e    0x2b4    and a2,a2,a5
    0x84011f50    0x2b6    srli a5,a5,0x26
    0x84011f52    0x2b8    andi a5,a5,1
    0x84011f54    0x2ba    bnez a5,ffffffff84011f34 <sameRegionAs+0x29a>
    0x84011f56    0x2bc    j ffffffff84011f3a <sameRegionAs+0x2a0>
    0x84011f58    0x2be    srli a5,s0,0x2f
    0x84011f5c    0x2c2    andi a5,a5,63
    0x84011f60    0x2c6    srli a4,a4,0x2f
    0x84011f62    0x2c8    andi a4,a4,63
    0x84011f66    0x2cc    sub a5,a5,a4
    0x84011f68    0x2ce    seqz a5,a5
    0x84011f6c    0x2d2    j ffffffff84011f40 <sameRegionAs+0x2a6>
    0x84011f6e    0x2d4    srli a5,a2,0x3b
    0x84011f72    0x2d8    li a3,12
    0x84011f74    0x2da    li a0,0
    0x84011f76    0x2dc    bne a5,a3,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011f7a    0x2e0    slli a5,a4,0x19
    0x84011f7e    0x2e4    srli a3,a5,0x19
    0x84011f82    0x2e8    srli a4,a4,0x26
    0x84011f84    0x2ea    andi a4,a4,1
    0x84011f86    0x2ec    beqz a4,ffffffff84011f8e <sameRegionAs+0x2f4>
    0x84011f88    0x2ee    li a5,-1
    0x84011f8a    0x2f0    slli a5,a5,0x27
    0x84011f8c    0x2f2    or a3,a3,a5
    0x84011f8e    0x2f4    slli a5,s0,0x19
    0x84011f92    0x2f8    srli a5,a5,0x19
    0x84011f94    0x2fa    srli a0,s0,0x26
    0x84011f98    0x2fe    andi a0,a0,1
    0x84011f9a    0x300    beqz a0,ffffffff84011fa2 <sameRegionAs+0x308>
    0x84011f9c    0x302    li a4,-1
    0x84011f9e    0x304    slli a4,a4,0x27
    0x84011fa0    0x306    or a5,a5,a4
    0x84011fa2    0x308    sub a5,a5,a3
    0x84011fa4    0x30a    seqz a0,a5
    0x84011fa8    0x30e    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011faa    0x310    srli s0,a2,0x3b
    0x84011fae    0x314    li a5,16
    0x84011fb0    0x316    li a0,0
    0x84011fb2    0x318    bne s0,a5,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011fb6    0x31c    lui a5,0x1
    0x84011fb8    0x31e    addi a5,a5,-1
    0x84011fba    0x320    and a0,s1,a5
    0x84011fbe    0x324    and a5,a5,a1
    0x84011fc0    0x326    sub a0,a0,a5
    0x84011fc2    0x328    seqz a0,a0
    0x84011fc6    0x32c    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011fc8    0x32e    andi a0,a5,1
    0x84011fcc    0x332    beqz a0,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011fd0    0x336    srli a0,s0,0x3b
    0x84011fd4    0x33a    andi a0,a0,1
    0x84011fd6    0x33c    beqz a0,ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011fda    0x340    ld a2,0(sp)           ; stack access
    0x84011fdc    0x342    ld a3,8(sp)           ; stack access
    0x84011fde    0x344    ld a0,16(sp)          ; stack access
    0x84011fe0    0x346    ld a1,24(sp)          ; stack access
    0x84011fe2    0x348    jal ra,ffffffff84011024 <Arch_sameRegionAs>
    0x84011fe6    0x34c    j ffffffff84011ce0 <sameRegionAs+0x46>
    0x84011fe8    0x34e    li a4,3
    0x84011fea    0x350    bne s3,a4,ffffffff84011e70 <sameRegionAs+0x1d6>
    0x84011fee    0x354    li s1,12
    0x84011ff0    0x356    j ffffffff84011e0c <sameRegionAs+0x172>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
315 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sameRegionAs` has 455 nodes.

Section unmapPage (233 of 269)
==============================

Deriving specifications
-----------------------

Section `unmapPage` consists of 57 instructions.

Skipping 12000073 sfence.vma


Stack analysis
---------------

13 stack accesses found. Annotated code for `unmapPage`:

    0x84010b10     0x0    addi sp,sp,-64
    0x84010b12     0x2    sd ra,56(sp)          ; stack access
    0x84010b14     0x4    sd s0,48(sp)          ; stack access
    0x84010b16     0x6    sd s1,40(sp)          ; stack access
    0x84010b18     0x8    sd s2,32(sp)          ; stack access
    0x84010b1a     0xa    mv s0,a0
    0x84010b1c     0xc    mv s2,a2
    0x84010b1e     0xe    mv s1,a3
    0x84010b20    0x10    mv a0,a1
    0x84010b22    0x12    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010b26    0x16    sd a0,16(sp)          ; stack access
    0x84010b28    0x18    sd a1,24(sp)          ; stack access
    0x84010b2a    0x1a    beqz a0,ffffffff84010b38 <unmapPage+0x28>
    0x84010b2c    0x1c    ld ra,56(sp)          ; stack access
    0x84010b2e    0x1e    ld s0,48(sp)          ; stack access
    0x84010b30    0x20    ld s1,40(sp)          ; stack access
    0x84010b32    0x22    ld s2,32(sp)          ; stack access
    0x84010b34    0x24    addi sp,sp,64
    0x84010b36    0x26    ret
    0x84010b38    0x28    mv a1,s2
    0x84010b3a    0x2a    ld a0,24(sp)          ; stack access
    0x84010b3c    0x2c    jal ra,ffffffff84010982 <lookupPTSlot>
    0x84010b40    0x30    sd a0,0(sp)           ; stack access
    0x84010b42    0x32    sd a1,8(sp)           ; stack access
    0x84010b44    0x34    li a5,1
    0x84010b46    0x36    beq s0,a5,ffffffff84010b56 <unmapPage+0x46>
    0x84010b4a    0x3a    li a5,2
    0x84010b4c    0x3c    beq s0,a5,ffffffff84010b5a <unmapPage+0x4a>
    0x84010b50    0x40    beqz s0,ffffffff84010b9a <unmapPage+0x8a>
    0x84010b52    0x42    jal ra,ffffffff840103da <halt>
    0x84010b56    0x46    li a5,21
    0x84010b58    0x48    j ffffffff84010b5c <unmapPage+0x4c>
    0x84010b5a    0x4a    li a5,30
    0x84010b5c    0x4c    bne a1,a5,ffffffff84010b2c <unmapPage+0x1c>
    0x84010b60    0x50    ld a4,0(a0)
    0x84010b62    0x52    andi a5,a4,1
    0x84010b66    0x56    beqz a5,ffffffff84010b2c <unmapPage+0x1c>
    0x84010b68    0x58    srli a5,a4,0x1
    0x84010b6c    0x5c    srli a3,a4,0x2
    0x84010b70    0x60    or a5,a5,a3
    0x84010b72    0x62    srli a3,a4,0x3
    0x84010b76    0x66    or a5,a5,a3
    0x84010b78    0x68    andi a5,a5,1
    0x84010b7a    0x6a    beqz a5,ffffffff84010b2c <unmapPage+0x1c>
    0x84010b7c    0x6c    slli a4,a4,0x2
    0x84010b7e    0x6e    lui a5,0xfff00
    0x84010b82    0x72    srli a5,a5,0x8
    0x84010b84    0x74    and a4,a4,a5
    0x84010b86    0x76    li a3,1
    0x84010b88    0x78    slli a3,a3,0x26
    0x84010b8a    0x7a    add s1,s1,a3
    0x84010b8c    0x7c    bne a4,s1,ffffffff84010b2c <unmapPage+0x1c>
    0x84010b90    0x80    sd zero,0(a0)
    0x84010b94    0x84    sfence.vma
    0x84010b98    0x88    j ffffffff84010b2c <unmapPage+0x1c>
    0x84010b9a    0x8a    li a5,12
    0x84010b9c    0x8c    j ffffffff84010b5c <unmapPage+0x4c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
57 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `unmapPage` has 93 nodes.

Section create_rootserver_objects (234 of 269)
==============================================

Deriving specifications
-----------------------

Section `create_rootserver_objects` consists of 88 instructions.


Stack analysis
---------------

22 stack accesses found. Annotated code for `create_rootserver_objects`:

    0x84000e80     0x0    addi sp,sp,-80
    0x84000e82     0x2    sd ra,72(sp)          ; stack access
    0x84000e84     0x4    sd s0,64(sp)          ; stack access
    0x84000e86     0x6    sd s1,56(sp)          ; stack access
    0x84000e88     0x8    sd s2,48(sp)          ; stack access
    0x84000e8a     0xa    sd s3,40(sp)          ; stack access
    0x84000e8c     0xc    sd s4,32(sp)          ; stack access
    0x84000e8e     0xe    mv s1,a0
    0x84000e90    0x10    sd a1,0(sp)           ; stack access
    0x84000e92    0x12    sd a2,8(sp)           ; stack access
    0x84000e94    0x14    mv s2,a3
    0x84000e96    0x16    mv s4,a3
    0x84000e98    0x18    li a5,24
    0x84000e9a    0x1a    bgeu a3,a5,ffffffff84000ea0 <create_rootserver_objects+0x20>
    0x84000e9e    0x1e    li s4,24
    0x84000ea0    0x20    ld a5,0(sp)           ; stack access
    0x84000ea2    0x22    sd a5,16(sp)          ; stack access
    0x84000ea4    0x24    ld a5,8(sp)           ; stack access
    0x84000ea6    0x26    sd a5,24(sp)          ; stack access
    0x84000ea8    0x28    mv s3,s2
    0x84000eaa    0x2a    beqz s2,ffffffff84000eb4 <create_rootserver_objects+0x34>
    0x84000eae    0x2e    li s3,1
    0x84000eb0    0x30    sll s3,s3,s2
    0x84000eb4    0x34    ld a0,16(sp)          ; stack access
    0x84000eb6    0x36    ld a1,24(sp)          ; stack access
    0x84000eb8    0x38    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000ebc    0x3c    auipc s0,0x0
    0x84000ec0    0x40    addi s0,s0,1644 # ffffffff84001528 <ndks_boot>
    0x84000ec4    0x44    sd s1,680(s0)
    0x84000ec8    0x48    lui a5,0x1004
    0x84000ecc    0x4c    addi a5,a5,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x84000ed0    0x50    add s1,s1,a5
    0x84000ed2    0x52    add s1,s1,s3
    0x84000ed4    0x54    slli a0,a0,0xc
    0x84000ed6    0x56    add s1,s1,a0
    0x84000ed8    0x58    sd s1,688(s0)
    0x84000edc    0x5c    mv a1,s2
    0x84000ede    0x5e    mv a0,s4
    0x84000ee0    0x60    jal ra,ffffffff84000e54 <maybe_alloc_extra_bi>
    0x84000ee4    0x64    li a1,1
    0x84000ee6    0x66    li a0,24
    0x84000ee8    0x68    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000eec    0x6c    sd a0,608(s0)
    0x84000ef0    0x70    mv a1,s2
    0x84000ef2    0x72    li a0,12
    0x84000ef4    0x74    jal ra,ffffffff84000e54 <maybe_alloc_extra_bi>
    0x84000ef8    0x78    li a1,1
    0x84000efa    0x7a    li a0,12
    0x84000efc    0x7c    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f00    0x80    sd a0,616(s0)
    0x84000f04    0x84    mv a1,s2
    0x84000f06    0x86    li a0,12
    0x84000f08    0x88    jal ra,ffffffff84000e54 <maybe_alloc_extra_bi>
    0x84000f0c    0x8c    li a1,1
    0x84000f0e    0x8e    li a0,12
    0x84000f10    0x90    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f14    0x94    sd a0,624(s0)
    0x84000f18    0x98    li a1,1
    0x84000f1a    0x9a    li a0,12
    0x84000f1c    0x9c    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f20    0xa0    sd a0,632(s0)
    0x84000f24    0xa4    li a1,1
    0x84000f26    0xa6    li a0,12
    0x84000f28    0xa8    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f2c    0xac    sd a0,640(s0)
    0x84000f30    0xb0    ld a0,0(sp)           ; stack access
    0x84000f32    0xb2    ld a1,8(sp)           ; stack access
    0x84000f34    0xb4    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84000f38    0xb8    mv s1,a0
    0x84000f3a    0xba    mv a1,a0
    0x84000f3c    0xbc    li a0,12
    0x84000f3e    0xbe    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f42    0xc2    sd a0,664(s0)
    0x84000f46    0xc6    slli s1,s1,0xc
    0x84000f48    0xc8    add s1,s1,a0
    0x84000f4a    0xca    sd s1,672(s0)
    0x84000f4e    0xce    li a1,1
    0x84000f50    0xd0    li a0,10
    0x84000f52    0xd2    jal ra,ffffffff84000e26 <alloc_rootserver_obj>
    0x84000f56    0xd6    sd a0,656(s0)
    0x84000f5a    0xda    ld ra,72(sp)          ; stack access
    0x84000f5c    0xdc    ld s0,64(sp)          ; stack access
    0x84000f5e    0xde    ld s1,56(sp)          ; stack access
    0x84000f60    0xe0    ld s2,48(sp)          ; stack access
    0x84000f62    0xe2    ld s3,40(sp)          ; stack access
    0x84000f64    0xe4    ld s4,32(sp)          ; stack access
    0x84000f66    0xe6    addi sp,sp,80
    0x84000f68    0xe8    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
88 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_rootserver_objects` has 137 nodes.

Section create_ipcbuf_frame_cap (235 of 269)
============================================

Deriving specifications
-----------------------

Section `create_ipcbuf_frame_cap` consists of 39 instructions.


Stack analysis
---------------

14 stack accesses found. Annotated code for `create_ipcbuf_frame_cap`:

    0x84000d22     0x0    addi sp,sp,-96
    0x84000d24     0x2    sd ra,88(sp)          ; stack access
    0x84000d26     0x4    sd s0,80(sp)          ; stack access
    0x84000d28     0x6    sd s1,72(sp)          ; stack access
    0x84000d2a     0x8    sd a0,16(sp)          ; stack access
    0x84000d2c     0xa    sd a1,24(sp)          ; stack access
    0x84000d2e     0xc    sd a2,0(sp)           ; stack access
    0x84000d30     0xe    sd a3,8(sp)           ; stack access
    0x84000d32    0x10    mv s0,a4
    0x84000d34    0x12    auipc s1,0x0
    0x84000d38    0x16    addi s1,s1,2036 # ffffffff84001528 <ndks_boot>
    0x84000d3c    0x1a    lui a1,0x1
    0x84000d3e    0x1c    ld a0,632(s1)
    0x84000d42    0x20    jal ra,ffffffff84015a40 <memzero>
    0x84000d46    0x24    li a6,0
    0x84000d48    0x26    li a5,0
    0x84000d4a    0x28    li a4,1
    0x84000d4c    0x2a    mv a3,s0
    0x84000d4e    0x2c    ld a2,632(s1)
    0x84000d52    0x30    ld a0,0(sp)           ; stack access
    0x84000d54    0x32    ld a1,8(sp)           ; stack access
    0x84000d56    0x34    jal ra,ffffffff84000268 <create_mapped_it_frame_cap>
    0x84000d5a    0x38    mv s1,a0
    0x84000d5c    0x3a    mv s0,a1
    0x84000d5e    0x3c    ld a0,16(sp)          ; stack access
    0x84000d60    0x3e    ld a1,24(sp)          ; stack access
    0x84000d62    0x40    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000d66    0x44    sd s1,320(a0)
    0x84000d6a    0x48    sd s0,328(a0)
    0x84000d6e    0x4c    sd zero,336(a0)
    0x84000d72    0x50    li a5,3
    0x84000d74    0x52    sd a5,344(a0)
    0x84000d78    0x56    mv a0,s1
    0x84000d7a    0x58    mv a1,s0
    0x84000d7c    0x5a    ld ra,88(sp)          ; stack access
    0x84000d7e    0x5c    ld s0,80(sp)          ; stack access
    0x84000d80    0x5e    ld s1,72(sp)          ; stack access
    0x84000d82    0x60    addi sp,sp,96
    0x84000d84    0x62    ret

Proving inst theorems
---------------------

39 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_ipcbuf_frame_cap` has 63 nodes.

Section create_untypeds_for_region (236 of 269)
===============================================

Deriving specifications
-----------------------

Section `create_untypeds_for_region` consists of 103 instructions.


Stack analysis
---------------

38 stack accesses found. Annotated code for `create_untypeds_for_region`:

    0x84000972      0x0    addi sp,sp,-192
    0x84000974      0x2    sd ra,184(sp)         ; stack access
    0x84000976      0x4    sd s0,176(sp)         ; stack access
    0x84000978      0x6    sd s1,168(sp)         ; stack access
    0x8400097a      0x8    sd s2,160(sp)         ; stack access
    0x8400097c      0xa    sd s3,152(sp)         ; stack access
    0x8400097e      0xc    sd s4,144(sp)         ; stack access
    0x84000980      0xe    sd s5,136(sp)         ; stack access
    0x84000982     0x10    sd s6,128(sp)         ; stack access
    0x84000984     0x12    sd s7,120(sp)         ; stack access
    0x84000986     0x14    sd s8,112(sp)         ; stack access
    0x84000988     0x16    sd s9,104(sp)         ; stack access
    0x8400098a     0x18    sd s10,96(sp)         ; stack access
    0x8400098c     0x1a    sd s11,88(sp)         ; stack access
    0x8400098e     0x1c    sd a0,32(sp)          ; stack access
    0x84000990     0x1e    sd a1,40(sp)          ; stack access
    0x84000992     0x20    beq a3,a4,ffffffff84000a84 <create_untypeds_for_region+0x112>
    0x84000996     0x24    mv s9,a2
    0x84000998     0x26    mv s8,a5
    0x8400099a     0x28    mv s2,a3
    0x8400099c     0x2a    mv s3,a4
    0x8400099e     0x2c    slli s10,a2,0x6
    0x840009a2     0x30    andi s10,s10,64
    0x840009a6     0x34    li s6,63
    0x840009aa     0x38    li s5,38
    0x840009ae     0x3c    auipc s7,0x1
    0x840009b2     0x40    addi s7,s7,-1158 # ffffffff84001528 <ndks_boot>
    0x840009b6     0x44    li s4,1
    0x840009b8     0x46    slli s11,s4,0x26
    0x840009bc     0x4a    li a5,-1
    0x840009be     0x4c    srli a5,a5,0x19
    0x840009c0     0x4e    sd a5,0(sp)           ; stack access
    0x840009c2     0x50    slli a5,s4,0x3c
    0x840009c6     0x54    sd a5,8(sp)           ; stack access
    0x840009c8     0x56    j ffffffff840009ee <create_untypeds_for_region+0x7c>
    0x840009ca     0x58    mv s0,s5
    0x840009cc     0x5a    ld a5,32(sp)          ; stack access
    0x840009ce     0x5c    sd a5,48(sp)          ; stack access
    0x840009d0     0x5e    ld a5,40(sp)          ; stack access
    0x840009d2     0x60    sd a5,56(sp)          ; stack access
    0x840009d4     0x62    ld a5,592(s7)
    0x840009d8     0x66    sub a5,a5,s8
    0x840009dc     0x6a    li a4,49
    0x840009e0     0x6e    bgeu a4,a5,ffffffff84000a20 <create_untypeds_for_region+0xae>
    0x840009e4     0x72    sll s0,s4,s0
    0x840009e8     0x76    add s2,s2,s0
    0x840009ea     0x78    beq s2,s3,ffffffff84000a64 <create_untypeds_for_region+0xf2>
    0x840009ee     0x7c    sub a0,s3,s2
    0x840009f2     0x80    jal ra,ffffffff8401739a <__clzdi2>
    0x840009f6     0x84    sext.w s1,a0
    0x840009fa     0x88    sub s1,s6,s1
    0x840009fe     0x8c    mv s0,s1
    0x84000a00     0x8e    beqz s2,ffffffff84000a0e <create_untypeds_for_region+0x9c>
    0x84000a04     0x92    mv a0,s2
    0x84000a06     0x94    jal ra,ffffffff840173b8 <__ctzdi2>
    0x84000a0a     0x98    sext.w s0,a0
    0x84000a0e     0x9c    bgeu s1,s0,ffffffff84000a14 <create_untypeds_for_region+0xa2>
    0x84000a12     0xa0    mv s0,s1
    0x84000a14     0xa2    bltu s5,s0,ffffffff840009ca <create_untypeds_for_region+0x58>
    0x84000a18     0xa6    li a5,3
    0x84000a1a     0xa8    bgeu a5,s0,ffffffff840009e4 <create_untypeds_for_region+0x72>
    0x84000a1e     0xac    j ffffffff840009cc <create_untypeds_for_region+0x5a>
    0x84000a20     0xae    slli a5,a5,0x4
    0x84000a22     0xb0    ld a4,584(s7)
    0x84000a26     0xb4    add a5,a5,a4
    0x84000a28     0xb6    sd zero,176(a5)
    0x84000a2c     0xba    add a4,s2,s11
    0x84000a30     0xbe    sd a4,168(a5)
    0x84000a32     0xc0    sb s0,176(a5)
    0x84000a36     0xc4    sb s9,177(a5)
    0x84000a3a     0xc8    ld a5,0(sp)           ; stack access
    0x84000a3c     0xca    and a2,s2,a5
    0x84000a40     0xce    addiw a5,s0,-4
    0x84000a44     0xd2    sll a5,s4,a5
    0x84000a48     0xd6    slli a5,a5,0x19
    0x84000a4a     0xd8    andi a3,s0,63
    0x84000a4e     0xdc    or a3,a3,s10
    0x84000a52     0xe0    ld a4,8(sp)           ; stack access
    0x84000a54     0xe2    or a2,a2,a4
    0x84000a56     0xe4    or a3,a3,a5
    0x84000a58     0xe6    ld a0,48(sp)          ; stack access
    0x84000a5a     0xe8    ld a1,56(sp)          ; stack access
    0x84000a5c     0xea    jal ra,ffffffff84000686 <provide_cap>
    0x84000a60     0xee    bnez a0,ffffffff840009e4 <create_untypeds_for_region+0x72>
    0x84000a62     0xf0    j ffffffff84000a66 <create_untypeds_for_region+0xf4>
    0x84000a64     0xf2    li a0,1
    0x84000a66     0xf4    ld ra,184(sp)         ; stack access
    0x84000a68     0xf6    ld s0,176(sp)         ; stack access
    0x84000a6a     0xf8    ld s1,168(sp)         ; stack access
    0x84000a6c     0xfa    ld s2,160(sp)         ; stack access
    0x84000a6e     0xfc    ld s3,152(sp)         ; stack access
    0x84000a70     0xfe    ld s4,144(sp)         ; stack access
    0x84000a72    0x100    ld s5,136(sp)         ; stack access
    0x84000a74    0x102    ld s6,128(sp)         ; stack access
    0x84000a76    0x104    ld s7,120(sp)         ; stack access
    0x84000a78    0x106    ld s8,112(sp)         ; stack access
    0x84000a7a    0x108    ld s9,104(sp)         ; stack access
    0x84000a7c    0x10a    ld s10,96(sp)         ; stack access
    0x84000a7e    0x10c    ld s11,88(sp)         ; stack access
    0x84000a80    0x10e    addi sp,sp,192
    0x84000a82    0x110    ret
    0x84000a84    0x112    li a0,1
    0x84000a86    0x114    j ffffffff84000a66 <create_untypeds_for_region+0xf4>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
103 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_untypeds_for_region` has 167 nodes.

Section invokeUntyped_Retype (237 of 269)
=========================================

Deriving specifications
-----------------------

Section `invokeUntyped_Retype` consists of 104 instructions.

RVC_TFFTFFT__T____TF.

Stack analysis
---------------

27 stack accesses found. Annotated code for `invokeUntyped_Retype`:

    0x84016386      0x0    addi sp,sp,-112
    0x84016388      0x2    sd ra,104(sp)         ; stack access
    0x8401638a      0x4    sd s0,96(sp)          ; stack access
    0x8401638c      0x6    sd s1,88(sp)          ; stack access
    0x8401638e      0x8    sd s2,80(sp)          ; stack access
    0x84016390      0xa    sd s3,72(sp)          ; stack access
    0x84016392      0xc    sd s4,64(sp)          ; stack access
    0x84016394      0xe    sd s5,56(sp)          ; stack access
    0x84016396     0x10    sd s6,48(sp)          ; stack access
    0x84016398     0x12    sd s7,40(sp)          ; stack access
    0x8401639a     0x14    sd s8,32(sp)          ; stack access
    0x8401639c     0x16    sd s9,24(sp)          ; stack access
    0x8401639e     0x18    sd s10,16(sp)         ; stack access
    0x840163a0     0x1a    sd s11,8(sp)          ; stack access
    0x840163a2     0x1c    mv s0,a0
    0x840163a4     0x1e    mv s3,a2
    0x840163a6     0x20    mv s1,a3
    0x840163a8     0x22    mv s4,a4
    0x840163aa     0x24    mv s5,a5
    0x840163ac     0x26    mv s6,a6
    0x840163ae     0x28    mv s2,a7
    0x840163b0     0x2a    ld s9,0(a0)
    0x840163b4     0x2e    slli s7,s9,0x19
    0x840163b8     0x32    srli s7,s7,0x19
    0x840163bc     0x36    srli a5,s9,0x26
    0x840163c0     0x3a    andi a5,a5,1
    0x840163c2     0x3c    beqz a5,ffffffff840163cc <invokeUntyped_Retype+0x46>
    0x840163c4     0x3e    li a5,-1
    0x840163c6     0x40    slli a5,a5,0x27
    0x840163c8     0x42    or s7,s7,a5
    0x840163cc     0x46    beqz a1,ffffffff84016404 <invokeUntyped_Retype+0x7e>
    0x840163ce     0x48    ld s10,8(s0)
    0x840163d2     0x4c    srli a5,s10,0x19
    0x840163d6     0x50    slli s8,a5,0x4
    0x840163da     0x54    beqz a5,ffffffff84016404 <invokeUntyped_Retype+0x7e>
    0x840163dc     0x56    srli a5,s10,0x6
    0x840163e0     0x5a    andi a5,a5,1
    0x840163e2     0x5c    bnez a5,ffffffff840163f6 <invokeUntyped_Retype+0x70>
    0x840163e4     0x5e    andi a5,s10,56
    0x840163e8     0x62    bnez a5,ffffffff8401645e <invokeUntyped_Retype+0xd8>
    0x840163ea     0x64    li a1,1
    0x840163ec     0x66    sll a1,a1,s10
    0x840163f0     0x6a    mv a0,s7
    0x840163f2     0x6c    jal ra,ffffffff84015a40 <memzero>
    0x840163f6     0x70    sd s9,0(s0)
    0x840163fa     0x74    slli s10,s10,0x27
    0x840163fc     0x76    srli s10,s10,0x27
    0x84016400     0x7a    sd s10,8(s0)
    0x84016404     0x7e    mv a1,s4
    0x84016406     0x80    mv a0,s1
    0x84016408     0x82    jal ra,ffffffff84011c22 <getObjectSize>
    0x8401640c     0x86    sll t1,s2,a0
    0x84016410     0x8a    sub s7,s3,s7
    0x84016414     0x8e    add t1,t1,s7
    0x84016416     0x90    srli t1,t1,0x4
    0x8401641a     0x94    slli t1,t1,0x19
    0x8401641c     0x96    ld a5,8(s0)
    0x8401641e     0x98    slli a5,a5,0x27
    0x84016420     0x9a    srli a5,a5,0x27
    0x84016422     0x9c    or t1,t1,a5
    0x84016426     0xa0    sd t1,8(s0)
    0x8401642a     0xa4    ld a7,112(sp)         ; stack access
    0x8401642c     0xa6    mv a6,s4
    0x8401642e     0xa8    mv a5,s3
    0x84016430     0xaa    mv a4,s2
    0x84016432     0xac    mv a3,s6
    0x84016434     0xae    mv a2,s5
    0x84016436     0xb0    mv a1,s0
    0x84016438     0xb2    mv a0,s1
    0x8401643a     0xb4    jal ra,ffffffff8401247e <createNewObjects>
    0x8401643e     0xb8    li a0,0
    0x84016440     0xba    ld ra,104(sp)         ; stack access
    0x84016442     0xbc    ld s0,96(sp)          ; stack access
    0x84016444     0xbe    ld s1,88(sp)          ; stack access
    0x84016446     0xc0    ld s2,80(sp)          ; stack access
    0x84016448     0xc2    ld s3,72(sp)          ; stack access
    0x8401644a     0xc4    ld s4,64(sp)          ; stack access
    0x8401644c     0xc6    ld s5,56(sp)          ; stack access
    0x8401644e     0xc8    ld s6,48(sp)          ; stack access
    0x84016450     0xca    ld s7,40(sp)          ; stack access
    0x84016452     0xcc    ld s8,32(sp)          ; stack access
    0x84016454     0xce    ld s9,24(sp)          ; stack access
    0x84016456     0xd0    ld s10,16(sp)         ; stack access
    0x84016458     0xd2    ld s11,8(sp)          ; stack access
    0x8401645a     0xd4    addi sp,sp,112
    0x8401645c     0xd6    ret
    0x8401645e     0xd8    addi s8,s8,-1
    0x84016460     0xda    andi s8,s8,-256
    0x84016464     0xde    slli s10,s10,0x27
    0x84016466     0xe0    srli s10,s10,0x27
    0x8401646a     0xe4    li s11,-256
    0x8401646e     0xe8    li a1,256
    0x84016472     0xec    add a0,s7,s8
    0x84016476     0xf0    jal ra,ffffffff84015a40 <memzero>
    0x8401647a     0xf4    sd s9,0(s0)
    0x8401647e     0xf8    srli a5,s8,0x4
    0x84016482     0xfc    slli a5,a5,0x19
    0x84016484     0xfe    or a5,a5,s10
    0x84016488    0x102    sd a5,8(s0)
    0x8401648a    0x104    jal ra,ffffffff84011640 <preemptionPoint>
    0x8401648e    0x108    bnez a0,ffffffff84016440 <invokeUntyped_Retype+0xba>
    0x84016490    0x10a    addi s8,s8,-256
    0x84016494    0x10e    bne s8,s11,ffffffff8401646e <invokeUntyped_Retype+0xe8>
    0x84016498    0x112    j ffffffff84016404 <invokeUntyped_Retype+0x7e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeUntyped_Retype` has 159 nodes.

Section decodeSetIPCBuffer (238 of 269)
=======================================

Deriving specifications
-----------------------

Section `decodeSetIPCBuffer` consists of 79 instructions.


Stack analysis
---------------

29 stack accesses found. Annotated code for `decodeSetIPCBuffer`:

    0x84014f04     0x0    addi sp,sp,-176
    0x84014f06     0x2    sd ra,168(sp)         ; stack access
    0x84014f08     0x4    sd s0,160(sp)         ; stack access
    0x84014f0a     0x6    sd s1,152(sp)         ; stack access
    0x84014f0c     0x8    sd s2,144(sp)         ; stack access
    0x84014f0e     0xa    sd a0,64(sp)          ; stack access
    0x84014f10     0xc    sd a1,72(sp)          ; stack access
    0x84014f12     0xe    beqz a2,ffffffff84014f56 <decodeSetIPCBuffer+0x52>
    0x84014f14    0x10    mv s2,a3
    0x84014f16    0x12    auipc s0,0x4
    0x84014f1a    0x16    ld s0,-1670(s0) # ffffffff84018890 <current_extra_caps>
    0x84014f1e    0x1a    beqz s0,ffffffff84014f56 <decodeSetIPCBuffer+0x52>
    0x84014f20    0x1c    auipc a5,0x16
    0x84014f24    0x20    ld a5,-1768(a5) # ffffffff8402a838 <ksCurThread>
    0x84014f28    0x24    ld s1,88(a5)
    0x84014f2a    0x26    ld a5,0(s0)
    0x84014f2c    0x28    sd a5,112(sp)         ; stack access
    0x84014f2e    0x2a    ld a5,8(s0)
    0x84014f30    0x2c    sd a5,120(sp)         ; stack access
    0x84014f32    0x2e    beqz s1,ffffffff84014f64 <decodeSetIPCBuffer+0x60>
    0x84014f34    0x30    ld a2,112(sp)         ; stack access
    0x84014f36    0x32    mv a3,a5
    0x84014f38    0x34    mv a1,s0
    0x84014f3a    0x36    addi a0,sp,88
    0x84014f3c    0x38    jal ra,ffffffff840120a8 <deriveCap>
    0x84014f40    0x3c    ld a0,88(sp)          ; stack access
    0x84014f42    0x3e    bnez a0,ffffffff84014fb0 <decodeSetIPCBuffer+0xac>
    0x84014f44    0x40    ld a1,96(sp)          ; stack access
    0x84014f46    0x42    sd a1,112(sp)         ; stack access
    0x84014f48    0x44    ld a2,104(sp)         ; stack access
    0x84014f4a    0x46    sd a2,120(sp)         ; stack access
    0x84014f4c    0x48    mv a0,s1
    0x84014f4e    0x4a    jal ra,ffffffff84010d1c <checkValidIPCBuffer>
    0x84014f52    0x4e    beqz a0,ffffffff84014f66 <decodeSetIPCBuffer+0x62>
    0x84014f54    0x50    j ffffffff84014fb0 <decodeSetIPCBuffer+0xac>
    0x84014f56    0x52    li a5,7
    0x84014f58    0x54    auipc a4,0x3
    0x84014f5c    0x58    sd a5,1912(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014f60    0x5c    li a0,3
    0x84014f62    0x5e    j ffffffff84014fb0 <decodeSetIPCBuffer+0xac>
    0x84014f64    0x60    li s0,0
    0x84014f66    0x62    li a1,2
    0x84014f68    0x64    auipc a0,0x16
    0x84014f6c    0x68    ld a0,-1840(a0) # ffffffff8402a838 <ksCurThread>
    0x84014f70    0x6c    jal ra,ffffffff840125f6 <setThreadState>
    0x84014f74    0x70    ld a5,64(sp)          ; stack access
    0x84014f76    0x72    slli a0,a5,0x19
    0x84014f7a    0x76    srli a0,a0,0x19
    0x84014f7c    0x78    srli a5,a5,0x26
    0x84014f7e    0x7a    andi a5,a5,1
    0x84014f80    0x7c    beqz a5,ffffffff84014f88 <decodeSetIPCBuffer+0x84>
    0x84014f82    0x7e    li a5,-1
    0x84014f84    0x80    slli a5,a5,0x27
    0x84014f86    0x82    or a0,a0,a5
    0x84014f88    0x84    li a5,2
    0x84014f8a    0x86    sd a5,56(sp)          ; stack access
    0x84014f8c    0x88    sd s0,48(sp)          ; stack access
    0x84014f8e    0x8a    ld a5,112(sp)         ; stack access
    0x84014f90    0x8c    sd a5,32(sp)          ; stack access
    0x84014f92    0x8e    ld a5,120(sp)         ; stack access
    0x84014f94    0x90    sd a5,40(sp)          ; stack access
    0x84014f96    0x92    sd s1,24(sp)          ; stack access
    0x84014f98    0x94    sd zero,16(sp)        ; stack access
    0x84014f9a    0x96    sd zero,0(sp)         ; stack access
    0x84014f9c    0x98    sd zero,8(sp)         ; stack access
    0x84014f9e    0x9a    li a7,0
    0x84014fa0    0x9c    li a5,0
    0x84014fa2    0x9e    li a6,0
    0x84014fa4    0xa0    li a4,0
    0x84014fa6    0xa2    li a3,0
    0x84014fa8    0xa4    li a2,0
    0x84014faa    0xa6    mv a1,s2
    0x84014fac    0xa8    jal ra,ffffffff84014948 <invokeTCB_ThreadControl>
    0x84014fb0    0xac    ld ra,168(sp)         ; stack access
    0x84014fb2    0xae    ld s0,160(sp)         ; stack access
    0x84014fb4    0xb0    ld s1,152(sp)         ; stack access
    0x84014fb6    0xb2    ld s2,144(sp)         ; stack access
    0x84014fb8    0xb4    addi sp,sp,176
    0x84014fba    0xb6    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
79 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetIPCBuffer` has 132 nodes.

Section handleVMFaultEvent (239 of 269)
=======================================

Deriving specifications
-----------------------

Section `handleVMFaultEvent` consists of 17 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleVMFaultEvent`:

    0x840144ee     0x0    addi sp,sp,-16
    0x840144f0     0x2    sd ra,8(sp)           ; stack access
    0x840144f2     0x4    mv a1,a0
    0x840144f4     0x6    auipc a0,0x16
    0x840144f8     0xa    ld a0,836(a0) # ffffffff8402a838 <ksCurThread>
    0x840144fc     0xe    jal ra,ffffffff840109e8 <handleVMFault>
    0x84014500    0x12    bnez a0,ffffffff84014512 <handleVMFaultEvent+0x24>
    0x84014502    0x14    jal ra,ffffffff84012c84 <schedule>
    0x84014506    0x18    jal ra,ffffffff840126e8 <activateThread>
    0x8401450a    0x1c    li a0,0
    0x8401450c    0x1e    ld ra,8(sp)           ; stack access
    0x8401450e    0x20    addi sp,sp,16
    0x84014510    0x22    ret
    0x84014512    0x24    auipc a0,0x16
    0x84014516    0x28    ld a0,806(a0) # ffffffff8402a838 <ksCurThread>
    0x8401451a    0x2c    jal ra,ffffffff8401445c <handleFault>
    0x8401451e    0x30    j ffffffff84014502 <handleVMFaultEvent+0x14>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
17 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleVMFaultEvent` has 28 nodes.

Section handleInterruptEntry (240 of 269)
=========================================

Deriving specifications
-----------------------

Section `handleInterruptEntry` consists of 24 instructions.


Stack analysis
---------------

2 stack accesses found. Annotated code for `handleInterruptEntry`:

    0x84013d68     0x0    addi sp,sp,-16
    0x84013d6a     0x2    sd ra,8(sp)           ; stack access
    0x84013d6c     0x4    auipc a5,0x17
    0x84013d70     0x8    lw a5,-1316(a5) # ffffffff8402a848 <active_irq>
    0x84013d74     0xc    addiw a3,a5,-1
    0x84013d78    0x10    li a4,53
    0x84013d7c    0x14    bltu a4,a3,ffffffff84013d8c <handleInterruptEntry+0x24>
    0x84013d80    0x18    slli a0,a5,0x20
    0x84013d84    0x1c    srli a0,a0,0x20
    0x84013d86    0x1e    jal ra,ffffffff84013c64 <handleInterrupt>
    0x84013d8a    0x22    j ffffffff84013da6 <handleInterruptEntry+0x3e>
    0x84013d8c    0x24    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84013d90    0x28    sext.w a5,a0
    0x84013d94    0x2c    auipc a4,0x17
    0x84013d98    0x30    sw a0,-1356(a4) # ffffffff8402a848 <active_irq>
    0x84013d9c    0x34    addiw a0,a0,-1
    0x84013d9e    0x36    li a4,53
    0x84013da2    0x3a    bgeu a4,a0,ffffffff84013d80 <handleInterruptEntry+0x18>
    0x84013da6    0x3e    jal ra,ffffffff84012c84 <schedule>
    0x84013daa    0x42    jal ra,ffffffff840126e8 <activateThread>
    0x84013dae    0x46    li a0,0
    0x84013db0    0x48    ld ra,8(sp)           ; stack access
    0x84013db2    0x4a    addi sp,sp,16
    0x84013db4    0x4c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
24 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInterruptEntry` has 37 nodes.

Section sendSignal (241 of 269)
===============================

Deriving specifications
-----------------------

Section `sendSignal` consists of 101 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `sendSignal`:

    0x84013b6c     0x0    addi sp,sp,-48
    0x84013b6e     0x2    sd ra,40(sp)          ; stack access
    0x84013b70     0x4    sd s0,32(sp)          ; stack access
    0x84013b72     0x6    sd s1,24(sp)          ; stack access
    0x84013b74     0x8    sd s2,16(sp)          ; stack access
    0x84013b76     0xa    mv s0,a0
    0x84013b78     0xc    mv s1,a1
    0x84013b7a     0xe    ld a4,0(a0)
    0x84013b7c    0x10    andi a5,a4,3
    0x84013b80    0x14    li a3,1
    0x84013b82    0x16    beq a5,a3,ffffffff84013bf4 <sendSignal+0x88>
    0x84013b86    0x1a    li a3,2
    0x84013b88    0x1c    beq a5,a3,ffffffff84013c5c <sendSignal+0xf0>
    0x84013b8c    0x20    beqz a5,ffffffff84013b9a <sendSignal+0x2e>
    0x84013b8e    0x22    ld ra,40(sp)          ; stack access
    0x84013b90    0x24    ld s0,32(sp)          ; stack access
    0x84013b92    0x26    ld s1,24(sp)          ; stack access
    0x84013b94    0x28    ld s2,16(sp)          ; stack access
    0x84013b96    0x2a    addi sp,sp,48
    0x84013b98    0x2c    ret
    0x84013b9a    0x2e    ld a5,24(a0)
    0x84013b9c    0x30    slli a3,a5,0x19
    0x84013ba0    0x34    srli a3,a3,0x19
    0x84013ba2    0x36    srli a5,a5,0x26
    0x84013ba4    0x38    andi a5,a5,1
    0x84013ba6    0x3a    beqz a5,ffffffff84013bc8 <sendSignal+0x5c>
    0x84013ba8    0x3c    li s2,-1
    0x84013baa    0x3e    slli s2,s2,0x27
    0x84013bac    0x40    or s2,a3,s2
    0x84013bb0    0x44    ld a5,280(s2) # fffffffff8000118 <ki_end+0x73fd1118>
    0x84013bb4    0x48    andi a5,a5,15
    0x84013bb6    0x4a    li a3,3
    0x84013bb8    0x4c    beq a5,a3,ffffffff84013bda <sendSignal+0x6e>
    0x84013bbc    0x50    andi a4,a4,-4
    0x84013bbe    0x52    ori a4,a4,2
    0x84013bc2    0x56    sd a4,0(s0)
    0x84013bc4    0x58    sd s1,16(s0)
    0x84013bc6    0x5a    j ffffffff84013b8e <sendSignal+0x22>
    0x84013bc8    0x5c    bnez a3,ffffffff84013bd6 <sendSignal+0x6a>
    0x84013bca    0x5e    andi a4,a4,-4
    0x84013bcc    0x60    ori a4,a4,2
    0x84013bd0    0x64    sd a4,0(a0)
    0x84013bd2    0x66    sd a1,16(s0)
    0x84013bd4    0x68    j ffffffff84013b8e <sendSignal+0x22>
    0x84013bd6    0x6a    mv s2,a3
    0x84013bd8    0x6c    j ffffffff84013bb0 <sendSignal+0x44>
    0x84013bda    0x6e    mv a0,s2
    0x84013bdc    0x70    jal ra,ffffffff84012ffc <cancelIPC>
    0x84013be0    0x74    li a1,1
    0x84013be2    0x76    mv a0,s2
    0x84013be4    0x78    jal ra,ffffffff840125f6 <setThreadState>
    0x84013be8    0x7c    sd s1,72(s2)
    0x84013bec    0x80    mv a0,s2
    0x84013bee    0x82    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x84013bf2    0x86    j ffffffff84013b8e <sendSignal+0x22>
    0x84013bf4    0x88    ld a5,8(a0)
    0x84013bf6    0x8a    slli s2,a5,0x19
    0x84013bfa    0x8e    srli s2,s2,0x19
    0x84013bfe    0x92    srli a5,a5,0x26
    0x84013c00    0x94    andi a5,a5,1
    0x84013c02    0x96    beqz a5,ffffffff84013c0c <sendSignal+0xa0>
    0x84013c04    0x98    li a5,-1
    0x84013c06    0x9a    slli a5,a5,0x27
    0x84013c08    0x9c    or s2,s2,a5
    0x84013c0c    0xa0    srli a2,a4,0x19
    0x84013c10    0xa4    bgez a4,ffffffff84013c1a <sendSignal+0xae>
    0x84013c14    0xa8    li a5,-1
    0x84013c16    0xaa    slli a5,a5,0x27
    0x84013c18    0xac    or a2,a2,a5
    0x84013c1a    0xae    mv a1,s2
    0x84013c1c    0xb0    mv a0,s2
    0x84013c1e    0xb2    jal ra,ffffffff84012e56 <tcbEPDequeue>
    0x84013c22    0xb6    ld a3,8(s0)
    0x84013c24    0xb8    li a4,-1
    0x84013c26    0xba    slli a5,a4,0x27
    0x84013c2a    0xbe    and a3,a3,a5
    0x84013c2c    0xc0    srli a4,a4,0x19
    0x84013c2e    0xc2    and a4,a4,a0
    0x84013c30    0xc4    or a4,a4,a3
    0x84013c32    0xc6    sd a4,8(s0)
    0x84013c34    0xc8    ld a5,0(s0)
    0x84013c36    0xca    slli a5,a5,0x27
    0x84013c38    0xcc    srli a5,a5,0x27
    0x84013c3a    0xce    slli a1,a1,0x19
    0x84013c3c    0xd0    or a5,a5,a1
    0x84013c3e    0xd2    beqz a0,ffffffff84013c56 <sendSignal+0xea>
    0x84013c40    0xd4    sd a5,0(s0)
    0x84013c42    0xd6    li a1,1
    0x84013c44    0xd8    mv a0,s2
    0x84013c46    0xda    jal ra,ffffffff840125f6 <setThreadState>
    0x84013c4a    0xde    sd s1,72(s2)
    0x84013c4e    0xe2    mv a0,s2
    0x84013c50    0xe4    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x84013c54    0xe8    j ffffffff84013b8e <sendSignal+0x22>
    0x84013c56    0xea    andi a5,a5,-4
    0x84013c58    0xec    sd a5,0(s0)
    0x84013c5a    0xee    j ffffffff84013c42 <sendSignal+0xd6>
    0x84013c5c    0xf0    ld a1,16(a0)
    0x84013c5e    0xf2    or s1,s1,a1
    0x84013c60    0xf4    sd s1,16(a0)
    0x84013c62    0xf6    j ffffffff84013b8e <sendSignal+0x22>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
101 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendSignal` has 151 nodes.

Section cancelIPC (242 of 269)
==============================

Deriving specifications
-----------------------

Section `cancelIPC` consists of 92 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `cancelIPC`:

    0x84012ffc     0x0    addi sp,sp,-48
    0x84012ffe     0x2    sd ra,40(sp)          ; stack access
    0x84013000     0x4    sd s0,32(sp)          ; stack access
    0x84013002     0x6    sd s1,24(sp)          ; stack access
    0x84013004     0x8    mv s0,a0
    0x84013006     0xa    ld a4,280(a0)
    0x8401300a     0xe    andi a5,a4,15
    0x8401300e    0x12    li a3,5
    0x84013010    0x14    beq a5,a3,ffffffff840130ac <cancelIPC+0xb0>
    0x84013014    0x18    bltu a3,a5,ffffffff84013084 <cancelIPC+0x88>
    0x84013018    0x1c    addi a5,a5,-3
    0x8401301a    0x1e    li a3,1
    0x8401301c    0x20    bltu a3,a5,ffffffff8401307a <cancelIPC+0x7e>
    0x84013020    0x24    lui a5,0xe0000
    0x84013024    0x28    srli a5,a5,0x19
    0x84013026    0x2a    and a5,a5,a4
    0x84013028    0x2c    srli a4,a4,0x26
    0x8401302a    0x2e    andi a4,a4,1
    0x8401302c    0x30    beqz a4,ffffffff84013034 <cancelIPC+0x38>
    0x8401302e    0x32    li a4,-1
    0x84013030    0x34    slli a4,a4,0x27
    0x84013032    0x36    or a5,a5,a4
    0x84013034    0x38    mv s1,a5
    0x84013036    0x3a    ld a1,8(a5)
    0x84013038    0x3c    ld a5,0(a5)
    0x8401303a    0x3e    lui a2,0xf8000
    0x8401303e    0x42    srli a2,a2,0x19
    0x84013040    0x44    and a2,a2,a5
    0x84013042    0x46    srli a5,a5,0x26
    0x84013044    0x48    andi a5,a5,1
    0x84013046    0x4a    beqz a5,ffffffff8401304e <cancelIPC+0x52>
    0x84013048    0x4c    li a5,-1
    0x8401304a    0x4e    slli a5,a5,0x27
    0x8401304c    0x50    or a2,a2,a5
    0x8401304e    0x52    mv a0,s0
    0x84013050    0x54    jal ra,ffffffff84012e56 <tcbEPDequeue>
    0x84013054    0x58    sd a0,0(sp)           ; stack access
    0x84013056    0x5a    sd a1,8(sp)           ; stack access
    0x84013058    0x5c    sd a0,8(s1)
    0x8401305a    0x5e    ld a5,0(s1)
    0x8401305c    0x60    li a4,-1
    0x8401305e    0x62    slli a4,a4,0x27
    0x84013060    0x64    addi a4,a4,3
    0x84013062    0x66    and a5,a5,a4
    0x84013064    0x68    lui a4,0xf8000
    0x84013068    0x6c    srli a4,a4,0x19
    0x8401306a    0x6e    and a1,a1,a4
    0x8401306c    0x70    or a1,a1,a5
    0x8401306e    0x72    beqz a0,ffffffff840130a6 <cancelIPC+0xaa>
    0x84013070    0x74    sd a1,0(s1)
    0x84013072    0x76    li a1,0
    0x84013074    0x78    mv a0,s0
    0x84013076    0x7a    jal ra,ffffffff840125f6 <setThreadState>
    0x8401307a    0x7e    ld ra,40(sp)          ; stack access
    0x8401307c    0x80    ld s0,32(sp)          ; stack access
    0x8401307e    0x82    ld s1,24(sp)          ; stack access
    0x84013080    0x84    addi sp,sp,48
    0x84013082    0x86    ret
    0x84013084    0x88    li a3,6
    0x84013086    0x8a    bne a5,a3,ffffffff8401307a <cancelIPC+0x7e>
    0x8401308a    0x8e    lui a1,0xe0000
    0x8401308e    0x92    srli a1,a1,0x19
    0x84013090    0x94    and a1,a1,a4
    0x84013092    0x96    srli a4,a4,0x26
    0x84013094    0x98    andi a4,a4,1
    0x84013096    0x9a    beqz a4,ffffffff8401309e <cancelIPC+0xa2>
    0x84013098    0x9c    li a5,-1
    0x8401309a    0x9e    slli a5,a5,0x27
    0x8401309c    0xa0    or a1,a1,a5
    0x8401309e    0xa2    mv a0,s0
    0x840130a0    0xa4    jal ra,ffffffff84012f8e <cancelSignal>
    0x840130a4    0xa8    j ffffffff8401307a <cancelIPC+0x7e>
    0x840130a6    0xaa    andi a1,a1,-4
    0x840130a8    0xac    sd a1,0(s1)
    0x840130aa    0xae    j ffffffff84013072 <cancelIPC+0x76>
    0x840130ac    0xb0    sd zero,312(a0)
    0x840130b0    0xb4    sd zero,320(a0)
    0x840130b4    0xb8    andi s0,a0,-1024
    0x840130b8    0xbc    ld a5,88(s0)
    0x840130ba    0xbe    lui a0,0xf8000
    0x840130be    0xc2    srli a0,a0,0x19
    0x840130c0    0xc4    and a0,a0,a5
    0x840130c2    0xc6    srli a5,a5,0x26
    0x840130c4    0xc8    andi a5,a5,1
    0x840130c6    0xca    beqz a5,ffffffff840130d4 <cancelIPC+0xd8>
    0x840130c8    0xcc    li a5,-1
    0x840130ca    0xce    slli a5,a5,0x27
    0x840130cc    0xd0    or a0,a0,a5
    0x840130ce    0xd2    jal ra,ffffffff840139c4 <cteDeleteOne>
    0x840130d2    0xd6    j ffffffff8401307a <cancelIPC+0x7e>
    0x840130d4    0xd8    beqz a0,ffffffff8401307a <cancelIPC+0x7e>
    0x840130d6    0xda    j ffffffff840130ce <cancelIPC+0xd2>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
92 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelIPC` has 135 nodes.

Section create_it_address_space (243 of 269)
============================================

Deriving specifications
-----------------------

Section `create_it_address_space` consists of 125 instructions.


Stack analysis
---------------

49 stack accesses found. Annotated code for `create_it_address_space`:

    0x840006e0      0x0    addi sp,sp,-240
    0x840006e2      0x2    sd ra,232(sp)         ; stack access
    0x840006e4      0x4    sd s0,224(sp)         ; stack access
    0x840006e6      0x6    sd s1,216(sp)         ; stack access
    0x840006e8      0x8    sd s2,208(sp)         ; stack access
    0x840006ea      0xa    sd s3,200(sp)         ; stack access
    0x840006ec      0xc    sd s4,192(sp)         ; stack access
    0x840006ee      0xe    sd s5,184(sp)         ; stack access
    0x840006f0     0x10    sd s6,176(sp)         ; stack access
    0x840006f2     0x12    sd s7,168(sp)         ; stack access
    0x840006f4     0x14    sd s8,160(sp)         ; stack access
    0x840006f6     0x16    sd s9,152(sp)         ; stack access
    0x840006f8     0x18    sd s10,144(sp)        ; stack access
    0x840006fa     0x1a    sd s11,136(sp)        ; stack access
    0x840006fc     0x1c    sd a0,48(sp)          ; stack access
    0x840006fe     0x1e    sd a1,56(sp)          ; stack access
    0x84000700     0x20    sd a2,32(sp)          ; stack access
    0x84000702     0x22    mv s6,a3
    0x84000704     0x24    auipc s0,0x1
    0x84000708     0x28    addi s0,s0,-476 # ffffffff84001528 <ndks_boot>
    0x8400070c     0x2c    ld a0,616(s0)
    0x84000710     0x30    jal ra,ffffffff8401077c <copyGlobalMappings>
    0x84000714     0x34    ld a5,616(s0)
    0x84000718     0x38    slli s4,a5,0x19
    0x8400071c     0x3c    srli s4,s4,0x19
    0x84000720     0x40    lui a4,0x300
    0x84000724     0x44    addi a4,a4,1
    0x84000726     0x46    slli a4,a4,0x27
    0x84000728     0x48    or s4,s4,a4
    0x8400072c     0x4c    slli a5,a5,0x9
    0x8400072e     0x4e    lui a4,0xfe000
    0x84000732     0x52    srli a4,a4,0x10
    0x84000734     0x54    and a5,a5,a4
    0x84000736     0x56    li a4,1
    0x84000738     0x58    slli a4,a4,0x30
    0x8400073a     0x5a    or s1,a5,a4
    0x8400073e     0x5e    sd s1,8(sp)           ; stack access
    0x84000740     0x60    ld a5,592(s0)
    0x84000744     0x64    sd a5,24(sp)          ; stack access
    0x84000746     0x66    ld a0,48(sp)          ; stack access
    0x84000748     0x68    ld a1,56(sp)          ; stack access
    0x8400074a     0x6a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x8400074e     0x6e    sd s4,96(a0)
    0x84000752     0x72    sd s1,104(a0)
    0x84000754     0x74    sd zero,112(a0)
    0x84000758     0x78    li a5,3
    0x8400075a     0x7a    sd a5,120(a0)
    0x8400075c     0x7c    li a5,30
    0x8400075e     0x7e    sd a5,16(sp)          ; stack access
    0x84000760     0x80    mv s3,s0
    0x84000762     0x82    li s8,-1
    0x84000764     0x84    srli s8,s8,0x19
    0x84000768     0x88    lui s5,0x300
    0x8400076c     0x8c    addi s5,s5,1
    0x8400076e     0x8e    slli s5,s5,0x27
    0x84000770     0x90    lui s7,0xfe000
    0x84000774     0x94    srli s7,s7,0x10
    0x84000778     0x98    ld a4,16(sp)          ; stack access
    0x8400077a     0x9a    sext.w a5,a4
    0x8400077e     0x9e    ld s2,32(sp)          ; stack access
    0x84000780     0xa0    srl s2,s2,a4
    0x84000784     0xa4    sll s2,s2,a4
    0x84000788     0xa8    bgeu s2,s6,ffffffff840007d6 <create_it_address_space+0xf6>
    0x8400078c     0xac    li s10,1
    0x8400078e     0xae    sll s10,s10,a5
    0x84000792     0xb2    lui s11,0x1
    0x84000794     0xb4    li s9,1
    0x84000796     0xb6    slli s9,s9,0x30
    0x84000798     0xb8    ld s0,664(s3) # ffffffff80000298 <KERNEL_OFFSET+0x80000298>
    0x8400079c     0xbc    add a5,s0,s11
    0x840007a0     0xc0    sd a5,664(s3)
    0x840007a4     0xc4    and s1,s2,s8
    0x840007a8     0xc8    or s1,s1,s5
    0x840007ac     0xcc    slli s0,s0,0x9
    0x840007ae     0xce    and s0,s0,s7
    0x840007b2     0xd2    or s0,s0,s9
    0x840007b6     0xd6    mv a2,s1
    0x840007b8     0xd8    mv a3,s0
    0x840007ba     0xda    mv a0,s4
    0x840007bc     0xdc    ld a1,8(sp)           ; stack access
    0x840007be     0xde    jal ra,ffffffff84000190 <map_it_pt_cap>
    0x840007c2     0xe2    mv a2,s1
    0x840007c4     0xe4    mv a3,s0
    0x840007c6     0xe6    ld a0,48(sp)          ; stack access
    0x840007c8     0xe8    ld a1,56(sp)          ; stack access
    0x840007ca     0xea    jal ra,ffffffff84000686 <provide_cap>
    0x840007ce     0xee    beqz a0,ffffffff84000822 <create_it_address_space+0x142>
    0x840007d0     0xf0    add s2,s2,s10
    0x840007d2     0xf2    bltu s2,s6,ffffffff84000798 <create_it_address_space+0xb8>
    0x840007d6     0xf6    ld a5,16(sp)          ; stack access
    0x840007d8     0xf8    addiw a5,a5,-9
    0x840007da     0xfa    mv a4,a5
    0x840007dc     0xfc    sd a5,16(sp)          ; stack access
    0x840007de     0xfe    li a5,12
    0x840007e0    0x100    bne a4,a5,ffffffff84000778 <create_it_address_space+0x98>
    0x840007e4    0x104    auipc a5,0x1
    0x840007e8    0x108    addi a5,a5,-700 # ffffffff84001528 <ndks_boot>
    0x840007ec    0x10c    ld a4,592(a5)
    0x840007f0    0x110    ld a5,584(a5)
    0x840007f4    0x114    ld a3,24(sp)          ; stack access
    0x840007f6    0x116    sd a3,88(a5)
    0x840007f8    0x118    sd a4,96(a5)
    0x840007fa    0x11a    sd s4,112(sp)         ; stack access
    0x840007fc    0x11c    ld a5,8(sp)           ; stack access
    0x840007fe    0x11e    sd a5,120(sp)         ; stack access
    0x84000800    0x120    ld a0,112(sp)         ; stack access
    0x84000802    0x122    ld a1,120(sp)         ; stack access
    0x84000804    0x124    ld ra,232(sp)         ; stack access
    0x84000806    0x126    ld s0,224(sp)         ; stack access
    0x84000808    0x128    ld s1,216(sp)         ; stack access
    0x8400080a    0x12a    ld s2,208(sp)         ; stack access
    0x8400080c    0x12c    ld s3,200(sp)         ; stack access
    0x8400080e    0x12e    ld s4,192(sp)         ; stack access
    0x84000810    0x130    ld s5,184(sp)         ; stack access
    0x84000812    0x132    ld s6,176(sp)         ; stack access
    0x84000814    0x134    ld s7,168(sp)         ; stack access
    0x84000816    0x136    ld s8,160(sp)         ; stack access
    0x84000818    0x138    ld s9,152(sp)         ; stack access
    0x8400081a    0x13a    ld s10,144(sp)        ; stack access
    0x8400081c    0x13c    ld s11,136(sp)        ; stack access
    0x8400081e    0x13e    addi sp,sp,240
    0x84000820    0x140    ret
    0x84000822    0x142    sd zero,112(sp)       ; stack access
    0x84000824    0x144    sd zero,120(sp)       ; stack access
    0x84000826    0x146    j ffffffff84000800 <create_it_address_space+0x120>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
125 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_it_address_space` has 200 nodes.

Section invokeTCB_ThreadControl (244 of 269)
============================================

Deriving specifications
-----------------------

Section `invokeTCB_ThreadControl` consists of 130 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `invokeTCB_ThreadControl`:

    0x84014948      0x0    addi sp,sp,-96
    0x8401494a      0x2    sd ra,88(sp)          ; stack access
    0x8401494c      0x4    sd s0,80(sp)          ; stack access
    0x8401494e      0x6    sd s1,72(sp)          ; stack access
    0x84014950      0x8    sd s2,64(sp)          ; stack access
    0x84014952      0xa    sd s3,56(sp)          ; stack access
    0x84014954      0xc    sd s4,48(sp)          ; stack access
    0x84014956      0xe    sd s5,40(sp)          ; stack access
    0x84014958     0x10    mv s0,a0
    0x8401495a     0x12    mv s2,a1
    0x8401495c     0x14    mv s3,a4
    0x8401495e     0x16    sd a5,0(sp)           ; stack access
    0x84014960     0x18    sd a6,8(sp)           ; stack access
    0x84014962     0x1a    mv s4,a7
    0x84014964     0x1c    ld s1,152(sp)         ; stack access
    0x84014966     0x1e    slli a5,a0,0x19
    0x8401496a     0x22    srli a5,a5,0x19
    0x8401496c     0x24    li a0,3
    0x8401496e     0x26    slli a0,a0,0x3d
    0x84014970     0x28    or a5,a5,a0
    0x84014972     0x2a    sd a5,16(sp)          ; stack access
    0x84014974     0x2c    sd zero,24(sp)        ; stack access
    0x84014976     0x2e    andi a5,s1,4
    0x8401497a     0x32    beqz a5,ffffffff84014a78 <invokeTCB_ThreadControl+0x130>
    0x8401497e     0x36    sd a2,376(s0)
    0x84014982     0x3a    andi a4,s1,8
    0x84014986     0x3e    bnez a4,ffffffff840149fa <invokeTCB_ThreadControl+0xb2>
    0x84014988     0x40    andi s5,s0,-1024
    0x8401498c     0x44    li a1,1
    0x8401498e     0x46    mv a0,s5
    0x84014990     0x48    jal ra,ffffffff840132d0 <cteDelete>
    0x84014994     0x4c    bnez a0,ffffffff84014a8a <invokeTCB_ThreadControl+0x142>
    0x84014998     0x50    ld a2,0(s4)
    0x8401499c     0x54    ld a3,8(s4)
    0x840149a0     0x58    ld a0,0(sp)           ; stack access
    0x840149a2     0x5a    ld a1,8(sp)           ; stack access
    0x840149a4     0x5c    jal ra,ffffffff84012122 <sameObjectAs>
    0x840149a8     0x60    beqz a0,ffffffff840149bc <invokeTCB_ThreadControl+0x74>
    0x840149aa     0x62    ld a2,0(s2)
    0x840149ae     0x66    ld a3,8(s2)
    0x840149b2     0x6a    ld a0,16(sp)          ; stack access
    0x840149b4     0x6c    ld a1,24(sp)          ; stack access
    0x840149b6     0x6e    jal ra,ffffffff84012122 <sameObjectAs>
    0x840149ba     0x72    bnez a0,ffffffff84014a02 <invokeTCB_ThreadControl+0xba>
    0x840149bc     0x74    addi s5,s5,32 # 2020 <KERNEL_OFFSET-0xfffffffeffffdfe0>
    0x840149c0     0x78    li a1,1
    0x840149c2     0x7a    mv a0,s5
    0x840149c4     0x7c    jal ra,ffffffff840132d0 <cteDelete>
    0x840149c8     0x80    bnez a0,ffffffff84014a8a <invokeTCB_ThreadControl+0x142>
    0x840149ca     0x82    ld a5,112(sp)         ; stack access
    0x840149cc     0x84    ld a2,0(a5)
    0x840149ce     0x86    ld a3,8(a5)
    0x840149d0     0x88    ld a0,96(sp)          ; stack access
    0x840149d2     0x8a    ld a1,104(sp)         ; stack access
    0x840149d4     0x8c    jal ra,ffffffff84012122 <sameObjectAs>
    0x840149d8     0x90    beqz a0,ffffffff84014a7e <invokeTCB_ThreadControl+0x136>
    0x840149da     0x92    ld a2,0(s2)
    0x840149de     0x96    ld a3,8(s2)
    0x840149e2     0x9a    ld a0,16(sp)          ; stack access
    0x840149e4     0x9c    ld a1,24(sp)          ; stack access
    0x840149e6     0x9e    jal ra,ffffffff84012122 <sameObjectAs>
    0x840149ea     0xa2    beqz a0,ffffffff84014a7e <invokeTCB_ThreadControl+0x136>
    0x840149ec     0xa4    mv a3,s5
    0x840149ee     0xa6    ld a2,112(sp)         ; stack access
    0x840149f0     0xa8    ld a0,96(sp)          ; stack access
    0x840149f2     0xaa    ld a1,104(sp)         ; stack access
    0x840149f4     0xac    jal ra,ffffffff84011676 <cteInsert>
    0x840149f8     0xb0    j ffffffff84014a7e <invokeTCB_ThreadControl+0x136>
    0x840149fa     0xb2    sd a3,352(s0)
    0x840149fe     0xb6    beqz a5,ffffffff84014a7e <invokeTCB_ThreadControl+0x136>
    0x84014a00     0xb8    j ffffffff84014988 <invokeTCB_ThreadControl+0x40>
    0x84014a02     0xba    mv a3,s5
    0x84014a04     0xbc    mv a2,s4
    0x84014a06     0xbe    ld a0,0(sp)           ; stack access
    0x84014a08     0xc0    ld a1,8(sp)           ; stack access
    0x84014a0a     0xc2    jal ra,ffffffff84011676 <cteInsert>
    0x84014a0e     0xc6    j ffffffff840149bc <invokeTCB_ThreadControl+0x74>
    0x84014a10     0xc8    andi s4,s0,-1024
    0x84014a14     0xcc    addi s4,s4,128
    0x84014a18     0xd0    li a1,1
    0x84014a1a     0xd2    mv a0,s4
    0x84014a1c     0xd4    jal ra,ffffffff840132d0 <cteDelete>
    0x84014a20     0xd8    bnez a0,ffffffff84014a8a <invokeTCB_ThreadControl+0x142>
    0x84014a22     0xda    ld a5,120(sp)         ; stack access
    0x84014a24     0xdc    sd a5,384(s0)
    0x84014a28     0xe0    ld a5,144(sp)         ; stack access
    0x84014a2a     0xe2    beqz a5,ffffffff84014a4c <invokeTCB_ThreadControl+0x104>
    0x84014a2c     0xe4    ld a2,0(a5)
    0x84014a2e     0xe6    ld a3,8(a5)
    0x84014a30     0xe8    ld a0,128(sp)         ; stack access
    0x84014a32     0xea    ld a1,136(sp)         ; stack access
    0x84014a34     0xec    jal ra,ffffffff84012122 <sameObjectAs>
    0x84014a38     0xf0    beqz a0,ffffffff84014a4c <invokeTCB_ThreadControl+0x104>
    0x84014a3a     0xf2    ld a2,0(s2)
    0x84014a3e     0xf6    ld a3,8(s2)
    0x84014a42     0xfa    ld a0,16(sp)          ; stack access
    0x84014a44     0xfc    ld a1,24(sp)          ; stack access
    0x84014a46     0xfe    jal ra,ffffffff84012122 <sameObjectAs>
    0x84014a4a    0x102    bnez a0,ffffffff84014a5e <invokeTCB_ThreadControl+0x116>
    0x84014a4c    0x104    auipc a5,0x16
    0x84014a50    0x108    ld a5,-532(a5) # ffffffff8402a838 <ksCurThread>
    0x84014a54    0x10c    bne a5,s0,ffffffff84014a84 <invokeTCB_ThreadControl+0x13c>
    0x84014a58    0x110    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84014a5c    0x114    j ffffffff84014a84 <invokeTCB_ThreadControl+0x13c>
    0x84014a5e    0x116    mv a3,s4
    0x84014a60    0x118    ld a2,144(sp)         ; stack access
    0x84014a62    0x11a    ld a0,128(sp)         ; stack access
    0x84014a64    0x11c    ld a1,136(sp)         ; stack access
    0x84014a66    0x11e    jal ra,ffffffff84011676 <cteInsert>
    0x84014a6a    0x122    j ffffffff84014a4c <invokeTCB_ThreadControl+0x104>
    0x84014a6c    0x124    mv a1,s3
    0x84014a6e    0x126    mv a0,s0
    0x84014a70    0x128    jal ra,ffffffff84012df6 <setPriority>
    0x84014a74    0x12c    li a0,0
    0x84014a76    0x12e    j ffffffff84014a8a <invokeTCB_ThreadControl+0x142>
    0x84014a78    0x130    andi a4,s1,8
    0x84014a7c    0x134    bnez a4,ffffffff840149fa <invokeTCB_ThreadControl+0xb2>
    0x84014a7e    0x136    andi a5,s1,2
    0x84014a82    0x13a    bnez a5,ffffffff84014a10 <invokeTCB_ThreadControl+0xc8>
    0x84014a84    0x13c    andi a0,s1,1
    0x84014a88    0x140    bnez a0,ffffffff84014a6c <invokeTCB_ThreadControl+0x124>
    0x84014a8a    0x142    ld ra,88(sp)          ; stack access
    0x84014a8c    0x144    ld s0,80(sp)          ; stack access
    0x84014a8e    0x146    ld s1,72(sp)          ; stack access
    0x84014a90    0x148    ld s2,64(sp)          ; stack access
    0x84014a92    0x14a    ld s3,56(sp)          ; stack access
    0x84014a94    0x14c    ld s4,48(sp)          ; stack access
    0x84014a96    0x14e    ld s5,40(sp)          ; stack access
    0x84014a98    0x150    addi sp,sp,96
    0x84014a9a    0x152    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
130 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `invokeTCB_ThreadControl` has 237 nodes.

Section handleRecv (245 of 269)
===============================

Deriving specifications
-----------------------

Section `handleRecv` consists of 124 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `handleRecv`:

    0x84014710      0x0    addi sp,sp,-64
    0x84014712      0x2    sd ra,56(sp)          ; stack access
    0x84014714      0x4    sd s0,48(sp)          ; stack access
    0x84014716      0x6    sd s1,40(sp)          ; stack access
    0x84014718      0x8    mv s0,a0
    0x8401471a      0xa    auipc a1,0x16
    0x8401471e      0xe    ld a1,286(a1) # ffffffff8402a838 <ksCurThread>
    0x84014722     0x12    ld s1,72(a1)
    0x84014724     0x14    mv a2,s1
    0x84014726     0x16    addi a0,sp,8
    0x84014728     0x18    jal ra,ffffffff84011444 <lookupCap>
    0x8401472c     0x1c    ld a5,8(sp)           ; stack access
    0x8401472e     0x1e    bnez a5,ffffffff84014778 <handleRecv+0x68>
    0x84014730     0x20    ld a5,16(sp)          ; stack access
    0x84014732     0x22    srli a4,a5,0x3b
    0x84014736     0x26    li a3,4
    0x84014738     0x28    beq a4,a3,ffffffff8401479c <handleRecv+0x8c>
    0x8401473c     0x2c    li a3,6
    0x8401473e     0x2e    beq a4,a3,ffffffff840147ec <handleRecv+0xdc>
    0x84014742     0x32    auipc a4,0x4
    0x84014746     0x36    addi a4,a4,-1858 # ffffffff84018000 <riscvKSASIDTable>
    0x8401474a     0x3a    li a5,1
    0x8401474c     0x3c    sd a5,1024(a4)
    0x84014750     0x40    sd zero,1032(a4)
    0x84014754     0x44    li a5,-1
    0x84014756     0x46    slli a5,a5,0x3f
    0x84014758     0x48    addi a5,a5,1
    0x8401475a     0x4a    sd a5,1680(a4)
    0x8401475e     0x4e    sd s1,1688(a4)
    0x84014762     0x52    auipc a0,0x16
    0x84014766     0x56    ld a0,214(a0) # ffffffff8402a838 <ksCurThread>
    0x8401476a     0x5a    jal ra,ffffffff8401445c <handleFault>
    0x8401476e     0x5e    ld ra,56(sp)          ; stack access
    0x84014770     0x60    ld s0,48(sp)          ; stack access
    0x84014772     0x62    ld s1,40(sp)          ; stack access
    0x84014774     0x64    addi sp,sp,64
    0x84014776     0x66    ret
    0x84014778     0x68    auipc a4,0x4
    0x8401477c     0x6c    addi a4,a4,-1912 # ffffffff84018000 <riscvKSASIDTable>
    0x84014780     0x70    li a5,-1
    0x84014782     0x72    slli a5,a5,0x3f
    0x84014784     0x74    addi a5,a5,1
    0x84014786     0x76    sd a5,1680(a4)
    0x8401478a     0x7a    sd s1,1688(a4)
    0x8401478e     0x7e    auipc a0,0x16
    0x84014792     0x82    ld a0,170(a0) # ffffffff8402a838 <ksCurThread>
    0x84014796     0x86    jal ra,ffffffff8401445c <handleFault>
    0x8401479a     0x8a    j ffffffff8401476e <handleRecv+0x5e>
    0x8401479c     0x8c    srli a5,a5,0x38
    0x8401479e     0x8e    andi a5,a5,1
    0x840147a0     0x90    beqz a5,ffffffff840147be <handleRecv+0xae>
    0x840147a2     0x92    auipc s1,0x16
    0x840147a6     0x96    addi s1,s1,150 # ffffffff8402a838 <ksCurThread>
    0x840147aa     0x9a    ld a0,0(s1)
    0x840147ac     0x9c    jal ra,ffffffff84013e2c <deleteCallerCap>
    0x840147b0     0xa0    mv a3,s0
    0x840147b2     0xa2    ld a1,16(sp)          ; stack access
    0x840147b4     0xa4    ld a2,24(sp)          ; stack access
    0x840147b6     0xa6    ld a0,0(s1)
    0x840147b8     0xa8    jal ra,ffffffff84014574 <receiveIPC>
    0x840147bc     0xac    j ffffffff8401476e <handleRecv+0x5e>
    0x840147be     0xae    auipc a4,0x4
    0x840147c2     0xb2    addi a4,a4,-1982 # ffffffff84018000 <riscvKSASIDTable>
    0x840147c6     0xb6    li a5,1
    0x840147c8     0xb8    sd a5,1024(a4)
    0x840147cc     0xbc    sd zero,1032(a4)
    0x840147d0     0xc0    li a5,-1
    0x840147d2     0xc2    slli a5,a5,0x3f
    0x840147d4     0xc4    addi a5,a5,1
    0x840147d6     0xc6    sd a5,1680(a4)
    0x840147da     0xca    sd s1,1688(a4)
    0x840147de     0xce    auipc a0,0x16
    0x840147e2     0xd2    ld a0,90(a0) # ffffffff8402a838 <ksCurThread>
    0x840147e6     0xd6    jal ra,ffffffff8401445c <handleFault>
    0x840147ea     0xda    j ffffffff8401476e <handleRecv+0x5e>
    0x840147ec     0xdc    slli a4,a5,0x19
    0x840147f0     0xe0    srli a4,a4,0x19
    0x840147f2     0xe2    srli a3,a5,0x26
    0x840147f6     0xe6    andi a3,a3,1
    0x840147f8     0xe8    beqz a3,ffffffff84014800 <handleRecv+0xf0>
    0x840147fa     0xea    li a3,-1
    0x840147fc     0xec    slli a3,a3,0x27
    0x840147fe     0xee    or a4,a4,a3
    0x84014800     0xf0    ld a4,24(a4)
    0x84014802     0xf2    slli a3,a4,0x19
    0x84014806     0xf6    srli a3,a3,0x19
    0x84014808     0xf8    srli a4,a4,0x26
    0x8401480a     0xfa    andi a4,a4,1
    0x8401480c     0xfc    beqz a4,ffffffff84014856 <handleRecv+0x146>
    0x8401480e     0xfe    srli a5,a5,0x3a
    0x84014810    0x100    andi a5,a5,1
    0x84014812    0x102    bnez a5,ffffffff84014842 <handleRecv+0x132>
    0x84014814    0x104    auipc a4,0x3
    0x84014818    0x108    addi a4,a4,2028 # ffffffff84018000 <riscvKSASIDTable>
    0x8401481c    0x10c    li a5,1
    0x8401481e    0x10e    sd a5,1024(a4)
    0x84014822    0x112    sd zero,1032(a4)
    0x84014826    0x116    li a5,-1
    0x84014828    0x118    slli a5,a5,0x3f
    0x8401482a    0x11a    addi a5,a5,1
    0x8401482c    0x11c    sd a5,1680(a4)
    0x84014830    0x120    sd s1,1688(a4)
    0x84014834    0x124    auipc a0,0x16
    0x84014838    0x128    ld a0,4(a0) # ffffffff8402a838 <ksCurThread>
    0x8401483c    0x12c    jal ra,ffffffff8401445c <handleFault>
    0x84014840    0x130    j ffffffff8401476e <handleRecv+0x5e>
    0x84014842    0x132    li a5,-1
    0x84014844    0x134    slli a5,a5,0x27
    0x84014846    0x136    or a3,a3,a5
    0x84014848    0x138    auipc a5,0x16
    0x8401484c    0x13c    ld a5,-16(a5) # ffffffff8402a838 <ksCurThread>
    0x84014850    0x140    beq a3,a5,ffffffff8401485e <handleRecv+0x14e>
    0x84014854    0x144    j ffffffff84014814 <handleRecv+0x104>
    0x84014856    0x146    srli a5,a5,0x3a
    0x84014858    0x148    andi a5,a5,1
    0x8401485a    0x14a    beqz a5,ffffffff84014814 <handleRecv+0x104>
    0x8401485c    0x14c    bnez a3,ffffffff84014848 <handleRecv+0x138>
    0x8401485e    0x14e    mv a3,s0
    0x84014860    0x150    ld a1,16(sp)          ; stack access
    0x84014862    0x152    ld a2,24(sp)          ; stack access
    0x84014864    0x154    auipc a0,0x16
    0x84014868    0x158    ld a0,-44(a0) # ffffffff8402a838 <ksCurThread>
    0x8401486c    0x15c    jal ra,ffffffff840127e0 <receiveSignal>
    0x84014870    0x160    j ffffffff8401476e <handleRecv+0x5e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
124 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleRecv` has 190 nodes.

Section doReplyTransfer (246 of 269)
====================================

Deriving specifications
-----------------------

Section `doReplyTransfer` consists of 46 instructions.


Stack analysis
---------------

8 stack accesses found. Annotated code for `doReplyTransfer`:

    0x8401412c     0x0    addi sp,sp,-32
    0x8401412e     0x2    sd ra,24(sp)          ; stack access
    0x84014130     0x4    sd s0,16(sp)          ; stack access
    0x84014132     0x6    sd s1,8(sp)           ; stack access
    0x84014134     0x8    sd s2,0(sp)           ; stack access
    0x84014136     0xa    mv s1,a0
    0x84014138     0xc    mv s0,a1
    0x8401413a     0xe    mv s2,a2
    0x8401413c    0x10    ld a5,312(a1)
    0x84014140    0x14    andi a5,a5,15
    0x84014142    0x16    bnez a5,ffffffff8401416e <doReplyTransfer+0x42>
    0x84014144    0x18    mv a4,a1
    0x84014146    0x1a    li a2,0
    0x84014148    0x1c    li a1,0
    0x8401414a    0x1e    jal ra,ffffffff840140c6 <doIPCTransfer>
    0x8401414e    0x22    mv a0,s2
    0x84014150    0x24    jal ra,ffffffff840139c4 <cteDeleteOne>
    0x84014154    0x28    li a1,1
    0x84014156    0x2a    mv a0,s0
    0x84014158    0x2c    jal ra,ffffffff840125f6 <setThreadState>
    0x8401415c    0x30    mv a0,s0
    0x8401415e    0x32    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x84014162    0x36    ld ra,24(sp)          ; stack access
    0x84014164    0x38    ld s0,16(sp)          ; stack access
    0x84014166    0x3a    ld s1,8(sp)           ; stack access
    0x84014168    0x3c    ld s2,0(sp)           ; stack access
    0x8401416a    0x3e    addi sp,sp,32
    0x8401416c    0x40    ret
    0x8401416e    0x42    mv a0,a2
    0x84014170    0x44    jal ra,ffffffff840139c4 <cteDeleteOne>
    0x84014174    0x48    mv a1,s1
    0x84014176    0x4a    mv a0,s0
    0x84014178    0x4c    jal ra,ffffffff84010832 <handleFaultReply>
    0x8401417c    0x50    sd zero,312(s0)
    0x84014180    0x54    sd zero,320(s0)
    0x84014184    0x58    beqz a0,ffffffff84014196 <doReplyTransfer+0x6a>
    0x84014186    0x5a    li a1,2
    0x84014188    0x5c    mv a0,s0
    0x8401418a    0x5e    jal ra,ffffffff840125f6 <setThreadState>
    0x8401418e    0x62    mv a0,s0
    0x84014190    0x64    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x84014194    0x68    j ffffffff84014162 <doReplyTransfer+0x36>
    0x84014196    0x6a    li a1,0
    0x84014198    0x6c    mv a0,s0
    0x8401419a    0x6e    jal ra,ffffffff840125f6 <setThreadState>
    0x8401419e    0x72    j ffffffff84014162 <doReplyTransfer+0x36>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
46 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doReplyTransfer` has 71 nodes.

Section doNormalTransfer (247 of 269)
=====================================

Deriving specifications
-----------------------

Section `doNormalTransfer` consists of 146 instructions.

SLLW.....

Stack analysis
---------------

40 stack accesses found. Annotated code for `doNormalTransfer`:

    0x84013f48      0x0    addi sp,sp,-192
    0x84013f4a      0x2    sd ra,184(sp)         ; stack access
    0x84013f4c      0x4    sd s0,176(sp)         ; stack access
    0x84013f4e      0x6    sd s1,168(sp)         ; stack access
    0x84013f50      0x8    sd s2,160(sp)         ; stack access
    0x84013f52      0xa    sd s3,152(sp)         ; stack access
    0x84013f54      0xc    sd s4,144(sp)         ; stack access
    0x84013f56      0xe    sd s5,136(sp)         ; stack access
    0x84013f58     0x10    sd s6,128(sp)         ; stack access
    0x84013f5a     0x12    sd s7,120(sp)         ; stack access
    0x84013f5c     0x14    sd s8,112(sp)         ; stack access
    0x84013f5e     0x16    sd s9,104(sp)         ; stack access
    0x84013f60     0x18    sd s10,96(sp)         ; stack access
    0x84013f62     0x1a    sd s11,88(sp)         ; stack access
    0x84013f64     0x1c    mv s2,a0
    0x84013f66     0x1e    mv s6,a1
    0x84013f68     0x20    mv s5,a2
    0x84013f6a     0x22    mv s4,a3
    0x84013f6c     0x24    mv s1,a5
    0x84013f6e     0x26    mv s3,a6
    0x84013f70     0x28    ld s0,80(a0)
    0x84013f72     0x2a    andi a3,s0,127
    0x84013f76     0x2e    li a5,120
    0x84013f7a     0x32    bgeu a5,a3,ffffffff84013f86 <doNormalTransfer+0x3e>
    0x84013f7e     0x36    andi s0,s0,-128
    0x84013f82     0x3a    ori s0,s0,120
    0x84013f86     0x3e    bnez a4,ffffffff84013fe4 <doNormalTransfer+0x9c>
    0x84013f88     0x40    auipc a5,0x5
    0x84013f8c     0x44    sd zero,-1784(a5) # ffffffff84018890 <current_extra_caps>
    0x84013f90     0x48    andi a4,s0,127
    0x84013f94     0x4c    mv a3,s3
    0x84013f96     0x4e    mv a2,s1
    0x84013f98     0x50    mv a1,s6
    0x84013f9a     0x52    mv a0,s2
    0x84013f9c     0x54    jal ra,ffffffff84013ed8 <copyMRs>
    0x84013fa0     0x58    mv s2,a0
    0x84013fa2     0x5a    lui a5,0xfffff
    0x84013fa4     0x5c    addi a5,a5,127 # fffffffffffff07f <ki_end+0x7bfd007f>
    0x84013fa8     0x60    and s0,s0,a5
    0x84013faa     0x62    auipc a5,0x5
    0x84013fae     0x66    ld a5,-1818(a5) # ffffffff84018890 <current_extra_caps>
    0x84013fb2     0x6a    bnez a5,ffffffff84013ffa <doNormalTransfer+0xb2>
    0x84013fb4     0x6c    andi s0,s0,-128
    0x84013fb8     0x70    andi s2,s2,127
    0x84013fbc     0x74    or s0,s0,s2
    0x84013fc0     0x78    sd s0,80(s1)
    0x84013fc2     0x7a    sd s4,72(s1)
    0x84013fc6     0x7e    ld ra,184(sp)         ; stack access
    0x84013fc8     0x80    ld s0,176(sp)         ; stack access
    0x84013fca     0x82    ld s1,168(sp)         ; stack access
    0x84013fcc     0x84    ld s2,160(sp)         ; stack access
    0x84013fce     0x86    ld s3,152(sp)         ; stack access
    0x84013fd0     0x88    ld s4,144(sp)         ; stack access
    0x84013fd2     0x8a    ld s5,136(sp)         ; stack access
    0x84013fd4     0x8c    ld s6,128(sp)         ; stack access
    0x84013fd6     0x8e    ld s7,120(sp)         ; stack access
    0x84013fd8     0x90    ld s8,112(sp)         ; stack access
    0x84013fda     0x92    ld s9,104(sp)         ; stack access
    0x84013fdc     0x94    ld s10,96(sp)         ; stack access
    0x84013fde     0x96    ld s11,88(sp)         ; stack access
    0x84013fe0     0x98    addi sp,sp,192
    0x84013fe2     0x9a    ret
    0x84013fe4     0x9c    mv a2,s0
    0x84013fe6     0x9e    mv a1,s6
    0x84013fe8     0xa0    mv a0,s2
    0x84013fea     0xa2    jal ra,ffffffff84013e42 <lookupExtraCaps>
    0x84013fee     0xa6    beqz a0,ffffffff84013f90 <doNormalTransfer+0x48>
    0x84013ff0     0xa8    auipc a5,0x5
    0x84013ff4     0xac    sd zero,-1888(a5) # ffffffff84018890 <current_extra_caps>
    0x84013ff8     0xb0    j ffffffff84013f90 <doNormalTransfer+0x48>
    0x84013ffa     0xb2    beqz s3,ffffffff84013fb4 <doNormalTransfer+0x6c>
    0x84013ffe     0xb6    mv a1,s3
    0x84014000     0xb8    mv a0,s1
    0x84014002     0xba    jal ra,ffffffff840119e2 <getReceiveSlots>
    0x84014006     0xbe    mv s8,a0
    0x84014008     0xc0    auipc s9,0x5
    0x8401400c     0xc4    addi s9,s9,-1912 # ffffffff84018890 <current_extra_caps>
    0x84014010     0xc8    addi s3,s3,976
    0x84014014     0xcc    li s7,0
    0x84014016     0xce    li s10,-1
    0x84014018     0xd0    srli s11,s10,0x19
    0x8401401c     0xd4    li a5,1
    0x8401401e     0xd6    slli a5,a5,0x26
    0x84014020     0xd8    sd a5,8(sp)           ; stack access
    0x84014022     0xda    lui a5,0x1
    0x84014024     0xdc    addi a5,a5,-512 # e00 <KERNEL_OFFSET-0xfffffffefffff200>
    0x84014028     0xe0    sd a5,16(sp)          ; stack access
    0x8401402a     0xe2    lui a5,0xfffff
    0x8401402c     0xe4    addi a5,a5,511 # fffffffffffff1ff <ki_end+0x7bfd01ff>
    0x84014030     0xe8    sd a5,24(sp)          ; stack access
    0x84014032     0xea    j ffffffff84014068 <doNormalTransfer+0x120>
    0x84014034     0xec    beqz s8,ffffffff840140ba <doNormalTransfer+0x172>
    0x84014038     0xf0    sd a2,40(sp)          ; stack access
    0x8401403a     0xf2    sd a3,48(sp)          ; stack access
    0x8401403c     0xf4    mv a1,s6
    0x8401403e     0xf6    addi a0,sp,56
    0x84014040     0xf8    jal ra,ffffffff840120a8 <deriveCap>
    0x84014044     0xfc    ld a5,56(sp)          ; stack access
    0x84014046     0xfe    bnez a5,ffffffff840140ba <doNormalTransfer+0x172>
    0x84014048    0x100    ld a5,64(sp)          ; stack access
    0x8401404a    0x102    srli a5,a5,0x3b
    0x8401404c    0x104    beqz a5,ffffffff840140ba <doNormalTransfer+0x172>
    0x8401404e    0x106    mv a3,s8
    0x84014050    0x108    mv a2,s6
    0x84014052    0x10a    ld a0,64(sp)          ; stack access
    0x84014054    0x10c    ld a1,72(sp)          ; stack access
    0x84014056    0x10e    jal ra,ffffffff84011676 <cteInsert>
    0x8401405a    0x112    li s8,0
    0x8401405c    0x114    addi s7,s7,1
    0x8401405e    0x116    addi s9,s9,8
    0x84014060    0x118    addi s3,s3,8
    0x84014062    0x11a    li a5,3
    0x84014064    0x11c    beq s7,a5,ffffffff840140ba <doNormalTransfer+0x172>
    0x84014068    0x120    ld s6,0(s9)
    0x8401406c    0x124    beqz s6,ffffffff840140ba <doNormalTransfer+0x172>
    0x84014070    0x128    ld a2,0(s6)
    0x84014074    0x12c    sd a2,40(sp)          ; stack access
    0x84014076    0x12e    ld a3,8(s6)
    0x8401407a    0x132    sd a3,48(sp)          ; stack access
    0x8401407c    0x134    srli a4,a2,0x3b
    0x84014080    0x138    li a5,4
    0x84014082    0x13a    bne a4,a5,ffffffff84014034 <doNormalTransfer+0xec>
    0x84014086    0x13e    and a5,a2,s11
    0x8401408a    0x142    ld a4,8(sp)           ; stack access
    0x8401408c    0x144    and a4,a4,a2
    0x8401408e    0x146    beqz a4,ffffffff84014096 <doNormalTransfer+0x14e>
    0x84014090    0x148    slli a4,s10,0x27
    0x84014094    0x14c    or a5,a5,a4
    0x84014096    0x14e    bne s5,a5,ffffffff84014034 <doNormalTransfer+0xec>
    0x8401409a    0x152    sd a3,0(s3)
    0x8401409e    0x156    srli a5,s0,0x9
    0x840140a2    0x15a    andi a5,a5,7
    0x840140a4    0x15c    li a4,1
    0x840140a6    0x15e    sllw a4,a4,s7
    0x840140aa    0x162    or a5,a5,a4
    0x840140ac    0x164    slli a5,a5,0x9
    0x840140ae    0x166    ld a4,16(sp)          ; stack access
    0x840140b0    0x168    and a5,a5,a4
    0x840140b2    0x16a    ld a4,24(sp)          ; stack access
    0x840140b4    0x16c    and s0,s0,a4
    0x840140b6    0x16e    or s0,s0,a5
    0x840140b8    0x170    j ffffffff8401405c <doNormalTransfer+0x114>
    0x840140ba    0x172    slli a5,s7,0x7
    0x840140be    0x176    andi a5,a5,384
    0x840140c2    0x17a    or s0,s0,a5
    0x840140c4    0x17c    j ffffffff84013fb4 <doNormalTransfer+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
146 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `doNormalTransfer` has 228 nodes.

Section restart (248 of 269)
============================

Deriving specifications
-----------------------

Section `restart` consists of 25 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `restart`:

    0x84013b2c     0x0    addi sp,sp,-16
    0x84013b2e     0x2    sd ra,8(sp)           ; stack access
    0x84013b30     0x4    sd s0,0(sp)           ; stack access
    0x84013b32     0x6    mv s0,a0
    0x84013b34     0x8    ld a5,280(a0)
    0x84013b38     0xc    andi a5,a5,15
    0x84013b3a     0xe    beqz a5,ffffffff84013b44 <restart+0x18>
    0x84013b3c    0x10    addi a5,a5,-3
    0x84013b3e    0x12    li a4,3
    0x84013b40    0x14    bltu a4,a5,ffffffff84013b64 <restart+0x38>
    0x84013b44    0x18    mv a0,s0
    0x84013b46    0x1a    jal ra,ffffffff84012ffc <cancelIPC>
    0x84013b4a    0x1e    mv a0,s0
    0x84013b4c    0x20    jal ra,ffffffff840119ae <setupReplyMaster>
    0x84013b50    0x24    li a1,2
    0x84013b52    0x26    mv a0,s0
    0x84013b54    0x28    jal ra,ffffffff840125f6 <setThreadState>
    0x84013b58    0x2c    mv a0,s0
    0x84013b5a    0x2e    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x84013b5e    0x32    mv a0,s0
    0x84013b60    0x34    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x84013b64    0x38    ld ra,8(sp)           ; stack access
    0x84013b66    0x3a    ld s0,0(sp)           ; stack access
    0x84013b68    0x3c    addi sp,sp,16
    0x84013b6a    0x3e    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
25 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `restart` has 40 nodes.

Section cancelBadgedSends (249 of 269)
======================================

Deriving specifications
-----------------------

Section `cancelBadgedSends` consists of 86 instructions.


Stack analysis
---------------

16 stack accesses found. Annotated code for `cancelBadgedSends`:

    0x84012e8c     0x0    addi sp,sp,-80
    0x84012e8e     0x2    sd ra,72(sp)          ; stack access
    0x84012e90     0x4    sd s0,64(sp)          ; stack access
    0x84012e92     0x6    sd s1,56(sp)          ; stack access
    0x84012e94     0x8    sd s2,48(sp)          ; stack access
    0x84012e96     0xa    sd s3,40(sp)          ; stack access
    0x84012e98     0xc    sd s4,32(sp)          ; stack access
    0x84012e9a     0xe    sd s5,24(sp)          ; stack access
    0x84012e9c    0x10    ld a5,0(a0)
    0x84012e9e    0x12    andi a3,a5,3
    0x84012ea2    0x16    li a4,1
    0x84012ea4    0x18    beq a3,a4,ffffffff84012eb0 <cancelBadgedSends+0x24>
    0x84012ea8    0x1c    andi a5,a5,1
    0x84012eaa    0x1e    beqz a5,ffffffff84012f50 <cancelBadgedSends+0xc4>
    0x84012eac    0x20    jal ra,ffffffff840103da <halt>
    0x84012eb0    0x24    mv s4,a0
    0x84012eb2    0x26    mv s3,a1
    0x84012eb4    0x28    ld s0,8(a0)
    0x84012eb6    0x2a    mv s2,s0
    0x84012eb8    0x2c    lui a4,0xf8000
    0x84012ebc    0x30    srli a4,a4,0x19
    0x84012ebe    0x32    and a4,a4,a5
    0x84012ec0    0x34    srli a3,a5,0x26
    0x84012ec4    0x38    andi a3,a3,1
    0x84012ec6    0x3a    beqz a3,ffffffff84012ece <cancelBadgedSends+0x42>
    0x84012ec8    0x3c    li a3,-1
    0x84012eca    0x3e    slli a3,a3,0x27
    0x84012ecc    0x40    or a4,a4,a3
    0x84012ece    0x42    mv s1,a4
    0x84012ed0    0x44    sd zero,8(s4)
    0x84012ed4    0x48    srli a5,a5,0x27
    0x84012ed6    0x4a    slli a5,a5,0x27
    0x84012ed8    0x4c    sd a5,0(s4)
    0x84012edc    0x50    bnez s0,ffffffff84012ef4 <cancelBadgedSends+0x68>
    0x84012ede    0x52    sd zero,8(s4)
    0x84012ee2    0x56    lui a3,0xf8000
    0x84012ee6    0x5a    srli a3,a3,0x19
    0x84012ee8    0x5c    and a4,a4,a3
    0x84012eea    0x5e    or a5,a5,a4
    0x84012eec    0x60    sd a5,0(s4)
    0x84012ef0    0x64    j ffffffff84012f4c <cancelBadgedSends+0xc0>
    0x84012ef2    0x66    beqz s0,ffffffff84012f24 <cancelBadgedSends+0x98>
    0x84012ef4    0x68    ld a5,296(s0)
    0x84012ef8    0x6c    mv s5,s0
    0x84012efa    0x6e    ld s0,408(s0)
    0x84012efe    0x72    bne s3,a5,ffffffff84012ef2 <cancelBadgedSends+0x66>
    0x84012f02    0x76    li a1,2
    0x84012f04    0x78    mv a0,s5
    0x84012f06    0x7a    jal ra,ffffffff840125f6 <setThreadState>
    0x84012f0a    0x7e    mv a0,s5
    0x84012f0c    0x80    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x84012f10    0x84    mv a1,s2
    0x84012f12    0x86    mv a2,s1
    0x84012f14    0x88    mv a0,s5
    0x84012f16    0x8a    jal ra,ffffffff84012e56 <tcbEPDequeue>
    0x84012f1a    0x8e    mv s2,a0
    0x84012f1c    0x90    mv s1,a1
    0x84012f1e    0x92    sd a0,0(sp)           ; stack access
    0x84012f20    0x94    sd a1,8(sp)           ; stack access
    0x84012f22    0x96    j ffffffff84012ef2 <cancelBadgedSends+0x66>
    0x84012f24    0x98    sd s2,8(s4)
    0x84012f28    0x9c    ld a5,0(s4)
    0x84012f2c    0xa0    li a4,-1
    0x84012f2e    0xa2    slli a4,a4,0x27
    0x84012f30    0xa4    addi a4,a4,3
    0x84012f32    0xa6    and a5,a5,a4
    0x84012f34    0xa8    lui a4,0xf8000
    0x84012f38    0xac    srli a4,a4,0x19
    0x84012f3a    0xae    and s1,s1,a4
    0x84012f3c    0xb0    or s1,s1,a5
    0x84012f3e    0xb2    beqz s2,ffffffff84012f62 <cancelBadgedSends+0xd6>
    0x84012f42    0xb6    andi s1,s1,-4
    0x84012f44    0xb8    ori s1,s1,1
    0x84012f48    0xbc    sd s1,0(s4)
    0x84012f4c    0xc0    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84012f50    0xc4    ld ra,72(sp)          ; stack access
    0x84012f52    0xc6    ld s0,64(sp)          ; stack access
    0x84012f54    0xc8    ld s1,56(sp)          ; stack access
    0x84012f56    0xca    ld s2,48(sp)          ; stack access
    0x84012f58    0xcc    ld s3,40(sp)          ; stack access
    0x84012f5a    0xce    ld s4,32(sp)          ; stack access
    0x84012f5c    0xd0    ld s5,24(sp)          ; stack access
    0x84012f5e    0xd2    addi sp,sp,80
    0x84012f60    0xd4    ret
    0x84012f62    0xd6    sd s1,0(s4)
    0x84012f66    0xda    j ffffffff84012f4c <cancelBadgedSends+0xc0>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
86 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cancelBadgedSends` has 134 nodes.

Section schedule (250 of 269)
=============================

Deriving specifications
-----------------------

Section `schedule` consists of 95 instructions.


Stack analysis
---------------

12 stack accesses found. Annotated code for `schedule`:

    0x84012c84      0x0    auipc a5,0x18
    0x84012c88      0x4    ld a5,-1116(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012c8c      0x8    beqz a5,ffffffff84012da6 <schedule+0x122>
    0x84012c90      0xc    addi sp,sp,-48
    0x84012c92      0xe    sd ra,40(sp)          ; stack access
    0x84012c94     0x10    sd s0,32(sp)          ; stack access
    0x84012c96     0x12    sd s1,24(sp)          ; stack access
    0x84012c98     0x14    sd s2,16(sp)          ; stack access
    0x84012c9a     0x16    sd s3,8(sp)           ; stack access
    0x84012c9c     0x18    sd s4,0(sp)           ; stack access
    0x84012c9e     0x1a    auipc a0,0x18
    0x84012ca2     0x1e    ld a0,-1126(a0) # ffffffff8402a838 <ksCurThread>
    0x84012ca6     0x22    ld a5,280(a0)
    0x84012caa     0x26    andi a5,a5,15
    0x84012cac     0x28    addi a5,a5,-1
    0x84012cae     0x2a    li a4,1
    0x84012cb0     0x2c    li s3,0
    0x84012cb2     0x2e    bgeu a4,a5,ffffffff84012d54 <schedule+0xd0>
    0x84012cb6     0x32    auipc s0,0x18
    0x84012cba     0x36    ld s0,-1166(s0) # ffffffff8402a828 <ksSchedulerAction>
    0x84012cbe     0x3a    li a5,1
    0x84012cc0     0x3c    beq s0,a5,ffffffff84012d5c <schedule+0xd8>
    0x84012cc4     0x40    auipc s4,0x18
    0x84012cc8     0x44    ld s4,-1164(s4) # ffffffff8402a838 <ksCurThread>
    0x84012ccc     0x48    auipc a5,0x18
    0x84012cd0     0x4c    ld a5,-1180(a5) # ffffffff8402a830 <ksIdleThread>
    0x84012cd4     0x50    beq s4,a5,ffffffff84012ce4 <schedule+0x60>
    0x84012cd8     0x54    ld a4,360(s0)
    0x84012cdc     0x58    ld a5,360(s4)
    0x84012ce0     0x5c    bgeu a4,a5,ffffffff84012d62 <schedule+0xde>
    0x84012ce4     0x60    auipc s1,0x18
    0x84012ce8     0x64    ld s1,-1228(s1) # ffffffff8402a818 <ksCurDomain>
    0x84012cec     0x68    slli a4,s1,0x3
    0x84012cf0     0x6c    auipc a5,0x5
    0x84012cf4     0x70    addi a5,a5,784 # ffffffff84018000 <riscvKSASIDTable>
    0x84012cf8     0x74    add a5,a5,a4
    0x84012cfa     0x76    ld a0,1040(a5)
    0x84012cfe     0x7a    beqz a0,ffffffff84012d62 <schedule+0xde>
    0x84012d00     0x7c    jal ra,ffffffff8401739a <__clzdi2>
    0x84012d04     0x80    sext.w s2,a0
    0x84012d08     0x84    slli s1,s1,0x2
    0x84012d0a     0x86    addi a5,s2,-60
    0x84012d0e     0x8a    add s1,s1,a5
    0x84012d10     0x8c    slli s1,s1,0x3
    0x84012d12     0x8e    auipc a5,0x5
    0x84012d16     0x92    addi a5,a5,750 # ffffffff84018000 <riscvKSASIDTable>
    0x84012d1a     0x96    add s1,s1,a5
    0x84012d1c     0x98    ld a0,1168(s1)
    0x84012d20     0x9c    jal ra,ffffffff8401739a <__clzdi2>
    0x84012d24     0xa0    sext.w a0,a0
    0x84012d26     0xa2    li a5,63
    0x84012d2a     0xa6    sub s2,a5,s2
    0x84012d2e     0xaa    slli s2,s2,0x6
    0x84012d30     0xac    sub a5,a5,a0
    0x84012d32     0xae    or s2,s2,a5
    0x84012d36     0xb2    ld a5,360(s0)
    0x84012d3a     0xb6    bgeu a5,s2,ffffffff84012d62 <schedule+0xde>
    0x84012d3e     0xba    mv a0,s0
    0x84012d40     0xbc    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x84012d44     0xc0    li a5,1
    0x84012d46     0xc2    auipc a4,0x18
    0x84012d4a     0xc6    sd a5,-1310(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x84012d4e     0xca    jal ra,ffffffff84012c16 <scheduleChooseNewThread>
    0x84012d52     0xce    j ffffffff84012d78 <schedule+0xf4>
    0x84012d54     0xd0    jal ra,ffffffff840124f6 <tcbSchedEnqueue>
    0x84012d58     0xd4    li s3,1
    0x84012d5a     0xd6    j ffffffff84012cb6 <schedule+0x32>
    0x84012d5c     0xd8    jal ra,ffffffff84012c16 <scheduleChooseNewThread>
    0x84012d60     0xdc    j ffffffff84012d78 <schedule+0xf4>
    0x84012d62     0xde    beqz s3,ffffffff84012d72 <schedule+0xee>
    0x84012d66     0xe2    ld a4,360(s0)
    0x84012d6a     0xe6    ld a5,360(s4)
    0x84012d6e     0xea    beq a4,a5,ffffffff84012d90 <schedule+0x10c>
    0x84012d72     0xee    mv a0,s0
    0x84012d74     0xf0    jal ra,ffffffff84012b74 <switchToThread>
    0x84012d78     0xf4    auipc a5,0x18
    0x84012d7c     0xf8    sd zero,-1360(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012d80     0xfc    ld ra,40(sp)          ; stack access
    0x84012d82     0xfe    ld s0,32(sp)          ; stack access
    0x84012d84    0x100    ld s1,24(sp)          ; stack access
    0x84012d86    0x102    ld s2,16(sp)          ; stack access
    0x84012d88    0x104    ld s3,8(sp)           ; stack access
    0x84012d8a    0x106    ld s4,0(sp)           ; stack access
    0x84012d8c    0x108    addi sp,sp,48
    0x84012d8e    0x10a    ret
    0x84012d90    0x10c    mv a0,s0
    0x84012d92    0x10e    jal ra,ffffffff840129ae <tcbSchedAppend>
    0x84012d96    0x112    li a5,1
    0x84012d98    0x114    auipc a4,0x18
    0x84012d9c    0x118    sd a5,-1392(a4) # ffffffff8402a828 <ksSchedulerAction>
    0x84012da0    0x11c    jal ra,ffffffff84012c16 <scheduleChooseNewThread>
    0x84012da4    0x120    j ffffffff84012d78 <schedule+0xf4>
    0x84012da6    0x122    auipc a5,0x18
    0x84012daa    0x126    sd zero,-1406(a5) # ffffffff8402a828 <ksSchedulerAction>
    0x84012dae    0x12a    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
95 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `schedule` has 154 nodes.

Section Arch_decodeIRQControlInvocation (251 of 269)
====================================================

Deriving specifications
-----------------------

Section `Arch_decodeIRQControlInvocation` consists of 73 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `Arch_decodeIRQControlInvocation`:

    0x84012612     0x0    li a5,37
    0x84012616     0x4    bne a0,a5,ffffffff840126ca <Arch_decodeIRQControlInvocation+0xb8>
    0x8401261a     0x8    addi sp,sp,-80
    0x8401261c     0xa    sd ra,72(sp)          ; stack access
    0x8401261e     0xc    sd s0,64(sp)          ; stack access
    0x84012620     0xe    sd s1,56(sp)          ; stack access
    0x84012622    0x10    sd s2,48(sp)          ; stack access
    0x84012624    0x12    sd s3,40(sp)          ; stack access
    0x84012626    0x14    mv s0,a2
    0x84012628    0x16    li a5,3
    0x8401262a    0x18    bgeu a5,a1,ffffffff8401267c <Arch_decodeIRQControlInvocation+0x6a>
    0x8401262e    0x1c    auipc a5,0x6
    0x84012632    0x20    ld a5,610(a5) # ffffffff84018890 <current_extra_caps>
    0x84012636    0x24    beqz a5,ffffffff8401267c <Arch_decodeIRQControlInvocation+0x6a>
    0x84012638    0x26    auipc a4,0x18
    0x8401263c    0x2a    ld a4,512(a4) # ffffffff8402a838 <ksCurThread>
    0x84012640    0x2e    ld s1,88(a4)
    0x84012642    0x30    ld s2,104(a4)
    0x84012646    0x34    ld s3,112(a4)
    0x8401264a    0x38    ld a4,0(a5)
    0x8401264c    0x3a    sd a4,0(sp)           ; stack access
    0x8401264e    0x3c    ld a5,8(a5)
    0x84012650    0x3e    sd a5,8(sp)           ; stack access
    0x84012652    0x40    mv a0,s1
    0x84012654    0x42    jal ra,ffffffff84010e2c <Arch_checkIRQ>
    0x84012658    0x46    bnez a0,ffffffff84012688 <Arch_decodeIRQControlInvocation+0x76>
    0x8401265a    0x48    slli a4,s1,0x3
    0x8401265e    0x4c    auipc a5,0x6
    0x84012662    0x50    addi a5,a5,-1630 # ffffffff84018000 <riscvKSASIDTable>
    0x84012666    0x54    add a5,a5,a4
    0x84012668    0x56    ld a5,1752(a5)
    0x8401266c    0x5a    beqz a5,ffffffff84012696 <Arch_decodeIRQControlInvocation+0x84>
    0x8401266e    0x5c    li a5,9
    0x84012670    0x5e    auipc a4,0x6
    0x84012674    0x62    sd a5,96(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84012678    0x66    li a0,3
    0x8401267a    0x68    j ffffffff84012688 <Arch_decodeIRQControlInvocation+0x76>
    0x8401267c    0x6a    li a5,7
    0x8401267e    0x6c    auipc a4,0x6
    0x84012682    0x70    sd a5,82(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84012686    0x74    li a0,3
    0x84012688    0x76    ld ra,72(sp)          ; stack access
    0x8401268a    0x78    ld s0,64(sp)          ; stack access
    0x8401268c    0x7a    ld s1,56(sp)          ; stack access
    0x8401268e    0x7c    ld s2,48(sp)          ; stack access
    0x84012690    0x7e    ld s3,40(sp)          ; stack access
    0x84012692    0x80    addi sp,sp,80
    0x84012694    0x82    ret
    0x84012696    0x84    mv a3,s3
    0x84012698    0x86    mv a2,s2
    0x8401269a    0x88    ld a0,0(sp)           ; stack access
    0x8401269c    0x8a    ld a1,8(sp)           ; stack access
    0x8401269e    0x8c    jal ra,ffffffff840115a6 <lookupTargetSlot>
    0x840126a2    0x90    sd a1,24(sp)          ; stack access
    0x840126a4    0x92    bnez a0,ffffffff84012688 <Arch_decodeIRQControlInvocation+0x76>
    0x840126a6    0x94    mv s2,a1
    0x840126a8    0x96    mv a0,a1
    0x840126aa    0x98    jal ra,ffffffff840119cc <ensureEmptySlot>
    0x840126ae    0x9c    bnez a0,ffffffff84012688 <Arch_decodeIRQControlInvocation+0x76>
    0x840126b0    0x9e    li a1,2
    0x840126b2    0xa0    auipc a0,0x18
    0x840126b6    0xa4    ld a0,390(a0) # ffffffff8402a838 <ksCurThread>
    0x840126ba    0xa8    jal ra,ffffffff840125f6 <setThreadState>
    0x840126be    0xac    mv a2,s0
    0x840126c0    0xae    mv a1,s2
    0x840126c2    0xb0    mv a0,s1
    0x840126c4    0xb2    jal ra,ffffffff84011ae6 <invokeIRQControl>
    0x840126c8    0xb6    j ffffffff84012688 <Arch_decodeIRQControlInvocation+0x76>
    0x840126ca    0xb8    li a5,3
    0x840126cc    0xba    auipc a4,0x6
    0x840126d0    0xbe    sd a5,4(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840126d4    0xc2    li a0,3
    0x840126d6    0xc4    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
73 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_decodeIRQControlInvocation` has 121 nodes.

Section Arch_finaliseCap (252 of 269)
=====================================

Deriving specifications
-----------------------

Section `Arch_finaliseCap` consists of 104 instructions.


Stack analysis
---------------

Section `Arch_finaliseCap` expects pointer to stack in a0.
18 stack accesses found. Annotated code for `Arch_finaliseCap`:

    0x84010f12      0x0    addi sp,sp,-80
    0x84010f14      0x2    sd ra,72(sp)          ; stack access
    0x84010f16      0x4    sd s0,64(sp)          ; stack access
    0x84010f18      0x6    sd s1,56(sp)          ; stack access
    0x84010f1a      0x8    sd s2,48(sp)          ; stack access
    0x84010f1c      0xa    sd s3,40(sp)          ; stack access
    0x84010f1e      0xc    mv s0,a0
    0x84010f20      0xe    mv s2,a2
    0x84010f22     0x10    mv s1,a1
    0x84010f24     0x12    srli a5,a1,0x3b
    0x84010f28     0x16    li a4,3
    0x84010f2a     0x18    beq a5,a4,ffffffff84010f9a <Arch_finaliseCap+0x88>
    0x84010f2e     0x1c    li a4,13
    0x84010f30     0x1e    beq a5,a4,ffffffff84010ffc <Arch_finaliseCap+0xea>
    0x84010f34     0x22    li a4,1
    0x84010f36     0x24    beq a5,a4,ffffffff84010f5a <Arch_finaliseCap+0x48>
    0x84010f3a     0x28    sd zero,0(s0)         ; stack access
    0x84010f3e     0x2c    sd zero,8(s0)         ; stack access
    0x84010f42     0x30    sd zero,16(s0)        ; stack access
    0x84010f46     0x34    sd zero,24(s0)        ; stack access
    0x84010f4a     0x38    mv a0,s0
    0x84010f4c     0x3a    ld ra,72(sp)          ; stack access
    0x84010f4e     0x3c    ld s0,64(sp)          ; stack access
    0x84010f50     0x3e    ld s1,56(sp)          ; stack access
    0x84010f52     0x40    ld s2,48(sp)          ; stack access
    0x84010f54     0x42    ld s3,40(sp)          ; stack access
    0x84010f56     0x44    addi sp,sp,80
    0x84010f58     0x46    ret
    0x84010f5a     0x48    srli a1,a2,0x30
    0x84010f5e     0x4c    beqz a1,ffffffff84010f3a <Arch_finaliseCap+0x28>
    0x84010f60     0x4e    srli a0,s1,0x39
    0x84010f64     0x52    andi a0,a0,3
    0x84010f66     0x54    slli a2,s1,0x19
    0x84010f6a     0x58    srli a2,a2,0x19
    0x84010f6c     0x5a    srli s1,s1,0x26
    0x84010f6e     0x5c    andi s1,s1,1
    0x84010f70     0x5e    beqz s1,ffffffff84010f78 <Arch_finaliseCap+0x66>
    0x84010f72     0x60    li a5,-1
    0x84010f74     0x62    slli a5,a5,0x27
    0x84010f76     0x64    or a2,a2,a5
    0x84010f78     0x66    srli s2,s2,0x9
    0x84010f7c     0x6a    slli a3,s2,0x19
    0x84010f80     0x6e    srli a3,a3,0x19
    0x84010f82     0x70    srli s2,s2,0x26
    0x84010f86     0x74    andi s2,s2,1
    0x84010f8a     0x78    beqz s2,ffffffff84010f94 <Arch_finaliseCap+0x82>
    0x84010f8e     0x7c    li a5,-1
    0x84010f90     0x7e    slli a5,a5,0x27
    0x84010f92     0x80    or a3,a3,a5
    0x84010f94     0x82    jal ra,ffffffff84010b10 <unmapPage>
    0x84010f98     0x86    j ffffffff84010f3a <Arch_finaliseCap+0x28>
    0x84010f9a     0x88    beqz a3,ffffffff84010f3a <Arch_finaliseCap+0x28>
    0x84010f9c     0x8a    srli a5,a1,0x27
    0x84010fa0     0x8e    andi a5,a5,1
    0x84010fa2     0x90    beqz a5,ffffffff84010f3a <Arch_finaliseCap+0x28>
    0x84010fa4     0x92    srli s3,a2,0x30
    0x84010fa8     0x96    mv a0,s3
    0x84010faa     0x98    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84010fae     0x9c    sd a0,16(sp)          ; stack access
    0x84010fb0     0x9e    sd a1,24(sp)          ; stack access
    0x84010fb2     0xa0    srli s2,s2,0x9
    0x84010fb6     0xa4    slli a2,s2,0x19
    0x84010fba     0xa8    srli a2,a2,0x19
    0x84010fbc     0xaa    srli s2,s2,0x26
    0x84010fc0     0xae    andi s2,s2,1
    0x84010fc4     0xb2    beqz s2,ffffffff84010fce <Arch_finaliseCap+0xbc>
    0x84010fc8     0xb6    li a5,-1
    0x84010fca     0xb8    slli a5,a5,0x27
    0x84010fcc     0xba    or a2,a2,a5
    0x84010fce     0xbc    ld a5,16(sp)          ; stack access
    0x84010fd0     0xbe    bnez a5,ffffffff84010fd8 <Arch_finaliseCap+0xc6>
    0x84010fd2     0xc0    ld a5,24(sp)          ; stack access
    0x84010fd4     0xc2    beq a5,a2,ffffffff84010ff2 <Arch_finaliseCap+0xe0>
    0x84010fd8     0xc6    slli a1,s1,0x19
    0x84010fdc     0xca    srli a1,a1,0x19
    0x84010fde     0xcc    srli s1,s1,0x26
    0x84010fe0     0xce    andi s1,s1,1
    0x84010fe2     0xd0    beqz s1,ffffffff84010fea <Arch_finaliseCap+0xd8>
    0x84010fe4     0xd2    li a5,-1
    0x84010fe6     0xd4    slli a5,a5,0x27
    0x84010fe8     0xd6    or a1,a1,a5
    0x84010fea     0xd8    mv a0,s3
    0x84010fec     0xda    jal ra,ffffffff84010a66 <unmapPageTable>
    0x84010ff0     0xde    j ffffffff84010f3a <Arch_finaliseCap+0x28>
    0x84010ff2     0xe0    mv a1,a2
    0x84010ff4     0xe2    mv a0,s3
    0x84010ff6     0xe4    jal ra,ffffffff84010cc2 <deleteASID>
    0x84010ffa     0xe8    j ffffffff84010f3a <Arch_finaliseCap+0x28>
    0x84010ffc     0xea    beqz a3,ffffffff84010f3a <Arch_finaliseCap+0x28>
    0x84010ffe     0xec    srli a0,a1,0x2b
    0x84011002     0xf0    slli a0,a0,0x30
    0x84011004     0xf2    srli a0,a0,0x30
    0x84011006     0xf4    slli s1,a1,0x2
    0x8401100a     0xf8    lui a1,0xf8000
    0x8401100e     0xfc    srli a1,a1,0x19
    0x84011010     0xfe    and a1,a1,s1
    0x84011012    0x100    srli s1,s1,0x26
    0x84011014    0x102    andi s1,s1,1
    0x84011016    0x104    beqz s1,ffffffff8401101e <Arch_finaliseCap+0x10c>
    0x84011018    0x106    li a5,-1
    0x8401101a    0x108    slli a5,a5,0x27
    0x8401101c    0x10a    or a1,a1,a5
    0x8401101e    0x10c    jal ra,ffffffff84010c84 <deleteASIDPool>
    0x84011022    0x110    j ffffffff84010f3a <Arch_finaliseCap+0x28>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
104 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `Arch_finaliseCap` has 156 nodes.

Section init_freemem (253 of 269)
=================================

Deriving specifications
-----------------------

Section `init_freemem` consists of 299 instructions.


Stack analysis
---------------

42 stack accesses found. Annotated code for `init_freemem`:

    0x84000f6a      0x0    addi sp,sp,-192
    0x84000f6c      0x2    sd ra,184(sp)         ; stack access
    0x84000f6e      0x4    sd s0,176(sp)         ; stack access
    0x84000f70      0x6    sd s1,168(sp)         ; stack access
    0x84000f72      0x8    sd s2,160(sp)         ; stack access
    0x84000f74      0xa    sd s3,152(sp)         ; stack access
    0x84000f76      0xc    sd s4,144(sp)         ; stack access
    0x84000f78      0xe    sd s5,136(sp)         ; stack access
    0x84000f7a     0x10    sd s6,128(sp)         ; stack access
    0x84000f7c     0x12    sd s7,120(sp)         ; stack access
    0x84000f7e     0x14    sd s8,112(sp)         ; stack access
    0x84000f80     0x16    sd s9,104(sp)         ; stack access
    0x84000f82     0x18    mv s4,a0
    0x84000f84     0x1a    mv s5,a2
    0x84000f86     0x1c    mv s6,a3
    0x84000f88     0x1e    sd a4,0(sp)           ; stack access
    0x84000f8a     0x20    sd a5,8(sp)           ; stack access
    0x84000f8c     0x22    mv s3,a6
    0x84000f8e     0x24    li a5,1
    0x84000f90     0x26    bgeu a5,a2,ffffffff84000fa0 <init_freemem+0x36>
    0x84000f94     0x2a    addi a4,a2,-1
    0x84000f98     0x2e    li a5,0
    0x84000f9a     0x30    addi a5,a5,1
    0x84000f9c     0x32    bne a5,a4,ffffffff84000f9a <init_freemem+0x30>
    0x84000fa0     0x36    addi a4,s4,-1 # fff <KERNEL_OFFSET-0xfffffffefffff001>
    0x84000fa4     0x3a    beqz a4,ffffffff84000fae <init_freemem+0x44>
    0x84000fa6     0x3c    li a5,0
    0x84000fa8     0x3e    addi a5,a5,1
    0x84000faa     0x40    bne a5,a4,ffffffff84000fa8 <init_freemem+0x3e>
    0x84000fae     0x44    auipc a5,0x0
    0x84000fb2     0x48    addi a5,a5,1730 # ffffffff84001670 <ndks_boot+0x148>
    0x84000fb6     0x4c    auipc a4,0x0
    0x84000fba     0x50    addi a4,a4,1978 # ffffffff84001770 <ndks_boot+0x248>
    0x84000fbe     0x54    sd zero,0(a5)
    0x84000fc2     0x58    sd zero,8(a5)
    0x84000fc6     0x5c    addi a5,a5,16
    0x84000fc8     0x5e    bne a5,a4,ffffffff84000fbe <init_freemem+0x54>
    0x84000fcc     0x62    beqz s4,ffffffff840011fa <init_freemem+0x290>
    0x84000fd0     0x66    mv a6,a1
    0x84000fd2     0x68    auipc a4,0x1
    0x84000fd6     0x6c    addi a4,a4,-2026 # ffffffff840017e8 <avail_reg+0x8>
    0x84000fda     0x70    slli t1,s4,0x4
    0x84000fde     0x74    add t1,t1,a1
    0x84000fe0     0x76    li a7,-1
    0x84000fe2     0x78    slli a7,a7,0x26
    0x84000fe4     0x7a    li a0,127
    0x84000fe8     0x7e    slli a0,a0,0x1f
    0x84000fea     0x80    lui t4,0x80000
    0x84000fee     0x84    li t3,1
    0x84000ff0     0x86    slli t3,t3,0x26
    0x84000ff2     0x88    j ffffffff84001004 <init_freemem+0x9a>
    0x84000ff4     0x8a    mv a5,t4
    0x84000ff6     0x8c    j ffffffff8400101e <init_freemem+0xb4>
    0x84000ff8     0x8e    sd a5,-8(a3)
    0x84000ffc     0x92    addi a6,a6,16
    0x84000ffe     0x94    addi a4,a4,16
    0x84001000     0x96    beq a6,t1,ffffffff840012b2 <init_freemem+0x348>
    0x84001004     0x9a    ld a1,8(a6)
    0x84001008     0x9e    add a5,a1,a7
    0x8400100c     0xa2    mv a3,a4
    0x8400100e     0xa4    ld a2,0(a6)
    0x84001012     0xa8    add a2,a2,a7
    0x84001014     0xaa    sd a2,-8(a4)
    0x84001018     0xae    sd a5,0(a4)
    0x8400101a     0xb0    bltu a0,a1,ffffffff84000ff4 <init_freemem+0x8a>
    0x8400101e     0xb4    sd a5,0(a3)
    0x84001020     0xb6    ld a5,-8(a3)
    0x84001024     0xba    add a2,a5,t3
    0x84001028     0xbe    bgeu a0,a2,ffffffff84000ff8 <init_freemem+0x8e>
    0x8400102c     0xc2    mv a5,t4
    0x8400102e     0xc4    j ffffffff84000ff8 <init_freemem+0x8e>
    0x84001030     0xc6    addi s1,s1,1
    0x84001032     0xc8    bgeu s0,s4,ffffffff840011fe <init_freemem+0x294>
    0x84001036     0xcc    bgeu s1,s5,ffffffff84001122 <init_freemem+0x1b8>
    0x8400103a     0xd0    slli s2,s1,0x4
    0x8400103e     0xd4    add s2,s2,s6
    0x84001040     0xd6    ld a1,0(s2)
    0x84001044     0xda    ld a4,8(s2)
    0x84001048     0xde    beq a1,a4,ffffffff84001030 <init_freemem+0xc6>
    0x8400104c     0xe2    slli a5,s0,0x4
    0x84001050     0xe6    add a5,a5,s7
    0x84001052     0xe8    ld a3,696(a5)
    0x84001056     0xec    ld a5,704(a5)
    0x8400105a     0xf0    bltu a3,a5,ffffffff84001062 <init_freemem+0xf8>
    0x8400105e     0xf4    addi s0,s0,1
    0x84001060     0xf6    j ffffffff84001032 <init_freemem+0xc8>
    0x84001062     0xf8    bgeu a3,a4,ffffffff84001096 <init_freemem+0x12c>
    0x84001066     0xfc    bgeu a1,a5,ffffffff840010aa <init_freemem+0x140>
    0x8400106a    0x100    bltu a3,a1,ffffffff840010c0 <init_freemem+0x156>
    0x8400106e    0x104    slli a3,s0,0x4
    0x84001072    0x108    add a3,a3,s7
    0x84001074    0x10a    bgeu a5,a4,ffffffff8400107a <init_freemem+0x110>
    0x84001078    0x10e    mv a4,a5
    0x8400107a    0x110    sd a4,696(a3)
    0x8400107e    0x114    ld a1,8(s2)
    0x84001082    0x118    add a1,a1,s8
    0x84001084    0x11a    ld a0,0(s2)
    0x84001088    0x11e    add a0,a0,s8
    0x8400108a    0x120    sd a0,48(sp)          ; stack access
    0x8400108c    0x122    sd a1,56(sp)          ; stack access
    0x8400108e    0x124    jal ra,ffffffff84000366 <reserve_region>
    0x84001092    0x128    addi s1,s1,1
    0x84001094    0x12a    j ffffffff84001032 <init_freemem+0xc8>
    0x84001096    0x12c    add a0,a1,s8
    0x8400109a    0x130    sd a0,32(sp)          ; stack access
    0x8400109c    0x132    add a1,a4,s8
    0x840010a0    0x136    sd a1,40(sp)          ; stack access
    0x840010a2    0x138    jal ra,ffffffff84000366 <reserve_region>
    0x840010a6    0x13c    addi s1,s1,1
    0x840010a8    0x13e    j ffffffff84001032 <init_freemem+0xc8>
    0x840010aa    0x140    slli a5,s0,0x4
    0x840010ae    0x144    add a5,a5,s7
    0x840010b0    0x146    ld a0,696(a5)
    0x840010b4    0x14a    ld a1,704(a5)
    0x840010b8    0x14e    jal ra,ffffffff84000532 <insert_region>
    0x840010bc    0x152    addi s0,s0,1
    0x840010be    0x154    j ffffffff84001032 <init_freemem+0xc8>
    0x840010c0    0x156    slli s9,s0,0x4
    0x840010c4    0x15a    add s9,s9,s7
    0x840010c6    0x15c    ld a0,696(s9)
    0x840010ca    0x160    sd a0,16(sp)          ; stack access
    0x840010cc    0x162    sd a1,24(sp)          ; stack access
    0x840010ce    0x164    jal ra,ffffffff84000532 <insert_region>
    0x840010d2    0x168    ld a5,8(s2)
    0x840010d6    0x16c    ld a4,704(s9)
    0x840010da    0x170    bltu a5,a4,ffffffff840010e2 <init_freemem+0x178>
    0x840010de    0x174    addi s0,s0,1
    0x840010e0    0x176    j ffffffff84001032 <init_freemem+0xc8>
    0x840010e2    0x178    sd a5,696(s9)
    0x840010e6    0x17c    ld a0,0(s2)
    0x840010ea    0x180    add a0,a0,s8
    0x840010ec    0x182    sd a0,64(sp)          ; stack access
    0x840010ee    0x184    add a1,a5,s8
    0x840010f2    0x188    sd a1,72(sp)          ; stack access
    0x840010f4    0x18a    jal ra,ffffffff84000366 <reserve_region>
    0x840010f8    0x18e    addi s1,s1,1
    0x840010fa    0x190    j ffffffff84001032 <init_freemem+0xc8>
    0x840010fc    0x192    addi s1,s1,1
    0x840010fe    0x194    addi s2,s2,16
    0x84001100    0x196    beq s5,s1,ffffffff8400111e <init_freemem+0x1b4>
    0x84001104    0x19a    ld a0,0(s2)
    0x84001108    0x19e    ld a1,8(s2)
    0x8400110c    0x1a2    bgeu a0,a1,ffffffff840010fc <init_freemem+0x192>
    0x84001110    0x1a6    add a0,a0,s6
    0x84001112    0x1a8    sd a0,80(sp)          ; stack access
    0x84001114    0x1aa    add a1,a1,s6
    0x84001116    0x1ac    sd a1,88(sp)          ; stack access
    0x84001118    0x1ae    jal ra,ffffffff84000366 <reserve_region>
    0x8400111c    0x1b2    j ffffffff840010fc <init_freemem+0x192>
    0x8400111e    0x1b4    bgeu s0,s4,ffffffff8400120c <init_freemem+0x2a2>
    0x84001122    0x1b8    slli a5,s0,0x4
    0x84001126    0x1bc    auipc s1,0x0
    0x8400112a    0x1c0    addi s1,s1,1722 # ffffffff840017e0 <avail_reg>
    0x8400112e    0x1c4    add s1,s1,a5
    0x84001130    0x1c6    auipc s2,0x0
    0x84001134    0x1ca    addi s2,s2,1016 # ffffffff84001528 <ndks_boot>
    0x84001138    0x1ce    j ffffffff84001142 <init_freemem+0x1d8>
    0x8400113a    0x1d0    addi s0,s0,1
    0x8400113c    0x1d2    addi s1,s1,16
    0x8400113e    0x1d4    beq s4,s0,ffffffff8400120c <init_freemem+0x2a2>
    0x84001142    0x1d8    ld a4,0(s1)
    0x84001144    0x1da    ld a5,8(s1)
    0x84001146    0x1dc    bgeu a4,a5,ffffffff8400113a <init_freemem+0x1d0>
    0x8400114a    0x1e0    slli a5,s0,0x4
    0x8400114e    0x1e4    add a5,a5,s2
    0x84001150    0x1e6    ld a0,696(a5)
    0x84001154    0x1ea    ld a1,704(a5)
    0x84001158    0x1ee    jal ra,ffffffff84000532 <insert_region>
    0x8400115c    0x1f2    j ffffffff8400113a <init_freemem+0x1d0>
    0x8400115e    0x1f4    jal ra,ffffffff840103da <halt>
    0x84001162    0x1f8    mv s5,s1
    0x84001164    0x1fa    mv s1,s2
    0x84001166    0x1fc    mv a3,s3
    0x84001168    0x1fe    ld a1,0(sp)           ; stack access
    0x8400116a    0x200    ld a2,8(sp)           ; stack access
    0x8400116c    0x202    mv a0,s0
    0x8400116e    0x204    jal ra,ffffffff84000e80 <create_rootserver_objects>
    0x84001172    0x208    li a5,15
    0x84001174    0x20a    bltu a5,s5,ffffffff84001198 <init_freemem+0x22e>
    0x84001178    0x20e    auipc a5,0x0
    0x8400117c    0x212    addi a5,a5,944 # ffffffff84001528 <ndks_boot>
    0x84001180    0x216    addi a4,s5,20 # 300014 <KERNEL_OFFSET-0xfffffffeffcfffec>
    0x84001184    0x21a    slli a4,a4,0x4
    0x84001186    0x21c    add a4,a4,a5
    0x84001188    0x21e    ld a4,16(a4)
    0x8400118a    0x220    addi s1,s1,20
    0x8400118c    0x222    slli s1,s1,0x4
    0x8400118e    0x224    add a5,a5,s1
    0x84001190    0x226    sd a4,16(a5)
    0x84001192    0x228    add s4,s4,s0
    0x84001194    0x22a    sd s4,8(a5)
    0x84001198    0x22e    addi s5,s5,20
    0x8400119a    0x230    slli s5,s5,0x4
    0x8400119c    0x232    auipc a5,0x0
    0x840011a0    0x236    addi a5,a5,908 # ffffffff84001528 <ndks_boot>
    0x840011a4    0x23a    add s5,s5,a5
    0x840011a6    0x23c    sd s0,16(s5)
    0x840011aa    0x240    ld ra,184(sp)         ; stack access
    0x840011ac    0x242    ld s0,176(sp)         ; stack access
    0x840011ae    0x244    ld s1,168(sp)         ; stack access
    0x840011b0    0x246    ld s2,160(sp)         ; stack access
    0x840011b2    0x248    ld s3,152(sp)         ; stack access
    0x840011b4    0x24a    ld s4,144(sp)         ; stack access
    0x840011b6    0x24c    ld s5,136(sp)         ; stack access
    0x840011b8    0x24e    ld s6,128(sp)         ; stack access
    0x840011ba    0x250    ld s7,120(sp)         ; stack access
    0x840011bc    0x252    ld s8,112(sp)         ; stack access
    0x840011be    0x254    ld s9,104(sp)         ; stack access
    0x840011c0    0x256    addi sp,sp,192
    0x840011c2    0x258    ret
    0x840011c4    0x25a    addi s5,s1,-1
    0x840011c8    0x25e    ld s0,8(a5)
    0x840011ca    0x260    sub s0,s0,s4
    0x840011ce    0x264    srl s0,s0,a4
    0x840011d2    0x268    sll s0,s0,a4
    0x840011d6    0x26c    addi a5,a5,-16
    0x840011d8    0x26e    mv s2,s1
    0x840011da    0x270    ld a3,16(a5)
    0x840011dc    0x272    bgeu s0,a3,ffffffff84001166 <init_freemem+0x1fc>
    0x840011e0    0x276    mv s1,s5
    0x840011e2    0x278    bltu a2,s1,ffffffff840011c4 <init_freemem+0x25a>
    0x840011e6    0x27c    addi s2,s2,20
    0x840011e8    0x27e    slli s2,s2,0x4
    0x840011ea    0x280    add s2,s2,a1
    0x840011ec    0x282    ld a3,16(a5)
    0x840011ee    0x284    sd a3,8(s2)
    0x840011f2    0x288    ld a3,24(a5)
    0x840011f4    0x28a    sd a3,16(s2)
    0x840011f8    0x28e    j ffffffff840011c4 <init_freemem+0x25a>
    0x840011fa    0x290    mv s0,s4
    0x840011fc    0x292    mv s1,s4
    0x840011fe    0x294    slli s2,s1,0x4
    0x84001202    0x298    add s2,s2,s6
    0x84001204    0x29a    li s6,1
    0x84001206    0x29c    slli s6,s6,0x26
    0x84001208    0x29e    bltu s1,s5,ffffffff84001104 <init_freemem+0x19a>
    0x8400120c    0x2a2    auipc a5,0x0
    0x84001210    0x2a6    addi a5,a5,796 # ffffffff84001528 <ndks_boot>
    0x84001214    0x2aa    ld a3,568(a5)
    0x84001218    0x2ae    ld a4,576(a5)
    0x8400121c    0x2b2    auipc a5,0x0
    0x84001220    0x2b6    addi a5,a5,1332 # ffffffff84001750 <ndks_boot+0x228>
    0x84001224    0x2ba    li s1,15
    0x84001226    0x2bc    bne a3,a4,ffffffff8400115e <init_freemem+0x1f4>
    0x8400122a    0x2c0    mv s2,s1
    0x8400122c    0x2c2    addi s1,s1,-1
    0x8400122e    0x2c4    ld a3,0(a5)
    0x84001230    0x2c6    addi a5,a5,-16
    0x84001232    0x2c8    ld a4,24(a5)
    0x84001234    0x2ca    beq a3,a4,ffffffff8400122a <init_freemem+0x2c0>
    0x84001238    0x2ce    ld a5,0(sp)           ; stack access
    0x8400123a    0x2d0    sd a5,16(sp)          ; stack access
    0x8400123c    0x2d2    ld a5,8(sp)           ; stack access
    0x8400123e    0x2d4    sd a5,24(sp)          ; stack access
    0x84001240    0x2d6    mv s0,s3
    0x84001242    0x2d8    beqz s3,ffffffff8400124c <init_freemem+0x2e2>
    0x84001246    0x2dc    li s0,1
    0x84001248    0x2de    sll s0,s0,s3
    0x8400124c    0x2e2    ld a0,16(sp)          ; stack access
    0x8400124e    0x2e4    ld a1,24(sp)          ; stack access
    0x84001250    0x2e6    jal ra,ffffffff84000108 <arch_get_n_paging>
    0x84001254    0x2ea    lui s4,0x1004
    0x84001258    0x2ee    addi s4,s4,1024 # 1004400 <KERNEL_OFFSET-0xfffffffefeffbc00>
    0x8400125c    0x2f2    add s0,s0,s4
    0x8400125e    0x2f4    slli s4,a0,0xc
    0x84001262    0x2f8    add s4,s4,s0
    0x84001264    0x2fa    mv a3,s3
    0x84001266    0x2fc    li a5,24
    0x84001268    0x2fe    bgeu s3,a5,ffffffff8400126e <init_freemem+0x304>
    0x8400126c    0x302    li a3,24
    0x8400126e    0x304    sext.w a4,a3
    0x84001272    0x308    addi a5,s1,20
    0x84001276    0x30c    slli a2,a5,0x4
    0x8400127a    0x310    auipc a5,0x0
    0x8400127e    0x314    addi a5,a5,686 # ffffffff84001528 <ndks_boot>
    0x84001282    0x318    add a5,a5,a2
    0x84001284    0x31a    ld s0,16(a5)
    0x84001286    0x31c    sub s0,s0,s4
    0x8400128a    0x320    srl s0,s0,a3
    0x8400128e    0x324    sll s0,s0,a3
    0x84001292    0x328    ld a5,8(a5)
    0x84001294    0x32a    bgeu s0,a5,ffffffff84001162 <init_freemem+0x1f8>
    0x84001298    0x32e    slli a5,s1,0x4
    0x8400129c    0x332    auipc a3,0x0
    0x840012a0    0x336    addi a3,a3,964 # ffffffff84001660 <ndks_boot+0x138>
    0x840012a4    0x33a    add a5,a5,a3
    0x840012a6    0x33c    li a2,15
    0x840012a8    0x33e    auipc a1,0x0
    0x840012ac    0x342    addi a1,a1,640 # ffffffff84001528 <ndks_boot>
    0x840012b0    0x346    j ffffffff840011e2 <init_freemem+0x278>
    0x840012b2    0x348    li s1,0
    0x840012b4    0x34a    li s0,0
    0x840012b6    0x34c    auipc s7,0x0
    0x840012ba    0x350    addi s7,s7,626 # ffffffff84001528 <ndks_boot>
    0x840012be    0x354    li s8,1
    0x840012c0    0x356    slli s8,s8,0x26
    0x840012c2    0x358    bnez s5,ffffffff8400103a <init_freemem+0xd0>
    0x840012c6    0x35c    mv s0,s5
    0x840012c8    0x35e    j ffffffff84001122 <init_freemem+0x1b8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
299 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_freemem` has 463 nodes.

Section create_initial_thread (254 of 269)
==========================================

Deriving specifications
-----------------------

Section `create_initial_thread` consists of 107 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `create_initial_thread`:

    0x84000ba2      0x0    addi sp,sp,-144
    0x84000ba4      0x2    sd ra,120(sp)         ; stack access
    0x84000ba6      0x4    sd s0,112(sp)         ; stack access
    0x84000ba8      0x6    sd s1,104(sp)         ; stack access
    0x84000baa      0x8    sd s2,96(sp)          ; stack access
    0x84000bac      0xa    sd s3,88(sp)          ; stack access
    0x84000bae      0xc    sd s4,80(sp)          ; stack access
    0x84000bb0      0xe    sd s5,72(sp)          ; stack access
    0x84000bb2     0x10    sd a0,16(sp)          ; stack access
    0x84000bb4     0x12    sd a1,24(sp)          ; stack access
    0x84000bb6     0x14    sd a2,0(sp)           ; stack access
    0x84000bb8     0x16    sd a3,8(sp)           ; stack access
    0x84000bba     0x18    mv s2,a4
    0x84000bbc     0x1a    mv s3,a5
    0x84000bbe     0x1c    mv s4,a6
    0x84000bc0     0x1e    mv s1,a7
    0x84000bc2     0x20    sd a7,136(sp)         ; stack access
    0x84000bc4     0x22    auipc s0,0x1
    0x84000bc8     0x26    ld s0,-1036(s0) # ffffffff840017b8 <rootserver+0x30>
    0x84000bcc     0x2a    addi s0,s0,512
    0x84000bd0     0x2e    li a5,5
    0x84000bd2     0x30    sd a5,368(s0)
    0x84000bd6     0x34    li a5,32
    0x84000bda     0x38    sd a5,256(s0)
    0x84000bde     0x3c    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000be2     0x40    mv a2,s1
    0x84000be4     0x42    ld a3,144(sp)         ; stack access
    0x84000be6     0x44    addi a1,a0,320
    0x84000bea     0x48    addi a0,sp,40
    0x84000bec     0x4a    jal ra,ffffffff840120a8 <deriveCap>
    0x84000bf0     0x4e    ld a5,40(sp)          ; stack access
    0x84000bf2     0x50    li s5,0
    0x84000bf4     0x52    bnez a5,ffffffff84000cc0 <create_initial_thread+0x11e>
    0x84000bf6     0x54    mv s5,s0
    0x84000bf8     0x56    ld a0,16(sp)          ; stack access
    0x84000bfa     0x58    ld a1,24(sp)          ; stack access
    0x84000bfc     0x5a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000c00     0x5e    auipc s1,0x1
    0x84000c04     0x62    addi s1,s1,-1752 # ffffffff84001528 <ndks_boot>
    0x84000c08     0x66    ld a3,656(s1)
    0x84000c0c     0x6a    addi a2,a0,64
    0x84000c10     0x6e    ld a0,16(sp)          ; stack access
    0x84000c12     0x70    ld a1,24(sp)          ; stack access
    0x84000c14     0x72    jal ra,ffffffff84011676 <cteInsert>
    0x84000c18     0x76    ld a0,16(sp)          ; stack access
    0x84000c1a     0x78    ld a1,24(sp)          ; stack access
    0x84000c1c     0x7a    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000c20     0x7e    ld a3,656(s1)
    0x84000c24     0x82    addi a3,a3,32
    0x84000c28     0x86    addi a2,a0,96
    0x84000c2c     0x8a    ld a0,0(sp)           ; stack access
    0x84000c2e     0x8c    ld a1,8(sp)           ; stack access
    0x84000c30     0x8e    jal ra,ffffffff84011676 <cteInsert>
    0x84000c34     0x92    ld a0,16(sp)          ; stack access
    0x84000c36     0x94    ld a1,24(sp)          ; stack access
    0x84000c38     0x96    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000c3c     0x9a    ld a3,656(s1)
    0x84000c40     0x9e    addi a3,a3,128
    0x84000c44     0xa2    addi a2,a0,320
    0x84000c48     0xa6    ld a0,48(sp)          ; stack access
    0x84000c4a     0xa8    ld a1,56(sp)          ; stack access
    0x84000c4c     0xaa    jal ra,ffffffff84011676 <cteInsert>
    0x84000c50     0xae    sd s4,384(s0)
    0x84000c54     0xb2    sd s3,72(s0)
    0x84000c58     0xb6    sd s2,272(s0)
    0x84000c5c     0xba    li a5,255
    0x84000c60     0xbe    sd a5,360(s0)
    0x84000c64     0xc2    sd a5,352(s0)
    0x84000c68     0xc6    mv a0,s0
    0x84000c6a     0xc8    jal ra,ffffffff840119ae <setupReplyMaster>
    0x84000c6e     0xcc    li a1,1
    0x84000c70     0xce    mv a0,s0
    0x84000c72     0xd0    jal ra,ffffffff840125f6 <setThreadState>
    0x84000c76     0xd4    auipc a5,0x2a
    0x84000c7a     0xd8    ld a5,-1134(a5) # ffffffff8402a808 <ksDomScheduleIdx>
    0x84000c7e     0xdc    slli a4,a5,0x4
    0x84000c82     0xe0    auipc a5,0x16
    0x84000c86     0xe4    addi a5,a5,1894 # ffffffff840173e8 <msgRegisters>
    0x84000c8a     0xe8    add a5,a5,a4
    0x84000c8c     0xea    ld a4,192(a5)
    0x84000c8e     0xec    auipc a3,0x2a
    0x84000c92     0xf0    sd a4,-1142(a3) # ffffffff8402a818 <ksCurDomain>
    0x84000c96     0xf4    ld a5,200(a5)
    0x84000c98     0xf6    auipc a4,0x2a
    0x84000c9c     0xfa    sd a5,-1160(a4) # ffffffff8402a810 <ksDomainTime>
    0x84000ca0     0xfe    ld a0,16(sp)          ; stack access
    0x84000ca2    0x100    ld a1,24(sp)          ; stack access
    0x84000ca4    0x102    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x84000ca8    0x106    slli s0,s0,0x19
    0x84000caa    0x108    srli s0,s0,0x19
    0x84000cac    0x10a    li a5,3
    0x84000cae    0x10c    slli a4,a5,0x3d
    0x84000cb2    0x110    or s0,s0,a4
    0x84000cb4    0x112    sd s0,32(a0)
    0x84000cb6    0x114    sd zero,40(a0)
    0x84000cba    0x118    sd zero,48(a0)
    0x84000cbe    0x11c    sd a5,56(a0)
    0x84000cc0    0x11e    mv a0,s5
    0x84000cc2    0x120    ld ra,120(sp)         ; stack access
    0x84000cc4    0x122    ld s0,112(sp)         ; stack access
    0x84000cc6    0x124    ld s1,104(sp)         ; stack access
    0x84000cc8    0x126    ld s2,96(sp)          ; stack access
    0x84000cca    0x128    ld s3,88(sp)          ; stack access
    0x84000ccc    0x12a    ld s4,80(sp)          ; stack access
    0x84000cce    0x12c    ld s5,72(sp)          ; stack access
    0x84000cd0    0x12e    addi sp,sp,144
    0x84000cd2    0x130    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
107 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `create_initial_thread` has 176 nodes.

Section decodeUntypedInvocation (255 of 269)
============================================

Deriving specifications
-----------------------

Section `decodeUntypedInvocation` consists of 256 instructions.


Stack analysis
---------------

35 stack accesses found. Annotated code for `decodeUntypedInvocation`:

    0x8401649a      0x0    addi sp,sp,-176
    0x8401649c      0x2    sd ra,168(sp)         ; stack access
    0x8401649e      0x4    sd s0,160(sp)         ; stack access
    0x840164a0      0x6    sd s1,152(sp)         ; stack access
    0x840164a2      0x8    sd s2,144(sp)         ; stack access
    0x840164a4      0xa    sd s3,136(sp)         ; stack access
    0x840164a6      0xc    sd s4,128(sp)         ; stack access
    0x840164a8      0xe    sd s5,120(sp)         ; stack access
    0x840164aa     0x10    sd s6,112(sp)         ; stack access
    0x840164ac     0x12    sd s7,104(sp)         ; stack access
    0x840164ae     0x14    sd s8,96(sp)          ; stack access
    0x840164b0     0x16    sd s9,88(sp)          ; stack access
    0x840164b2     0x18    sd s10,80(sp)         ; stack access
    0x840164b4     0x1a    sd s11,72(sp)         ; stack access
    0x840164b6     0x1c    sd a3,16(sp)          ; stack access
    0x840164b8     0x1e    sd a4,24(sp)          ; stack access
    0x840164ba     0x20    li a5,1
    0x840164bc     0x22    bne a0,a5,ffffffff8401662c <decodeUntypedInvocation+0x192>
    0x840164c0     0x26    mv s0,a0
    0x840164c2     0x28    mv s1,a2
    0x840164c4     0x2a    mv s5,a6
    0x840164c6     0x2c    li a5,5
    0x840164c8     0x2e    bgeu a5,a1,ffffffff84016656 <decodeUntypedInvocation+0x1bc>
    0x840164cc     0x32    auipc s11,0x2
    0x840164d0     0x36    ld s11,964(s11) # ffffffff84018890 <current_extra_caps>
    0x840164d4     0x3a    beqz s11,ffffffff84016656 <decodeUntypedInvocation+0x1bc>
    0x840164d8     0x3e    auipc s8,0x14
    0x840164dc     0x42    ld s8,864(s8) # ffffffff8402a838 <ksCurThread>
    0x840164e0     0x46    ld s2,88(s8)
    0x840164e4     0x4a    li a5,8
    0x840164e6     0x4c    bltu a5,s2,ffffffff84016664 <decodeUntypedInvocation+0x1ca>
    0x840164ea     0x50    ld s6,96(s8)
    0x840164ee     0x54    mv a1,s6
    0x840164f0     0x56    mv a0,s2
    0x840164f2     0x58    jal ra,ffffffff84011c22 <getObjectSize>
    0x840164f6     0x5c    mv s3,a0
    0x840164f8     0x5e    li a5,63
    0x840164fc     0x62    bltu a5,s6,ffffffff8401667a <decodeUntypedInvocation+0x1e0>
    0x84016500     0x66    li a5,38
    0x84016504     0x6a    bltu a5,a0,ffffffff8401667a <decodeUntypedInvocation+0x1e0>
    0x84016508     0x6e    li a5,4
    0x8401650a     0x70    beq s2,a5,ffffffff84016698 <decodeUntypedInvocation+0x1fe>
    0x8401650e     0x74    bnez s2,ffffffff84016518 <decodeUntypedInvocation+0x7e>
    0x84016512     0x78    li a5,3
    0x84016514     0x7a    bgeu a5,s6,ffffffff840166b2 <decodeUntypedInvocation+0x218>
    0x84016518     0x7e    ld s10,24(sp)         ; stack access
    0x8401651a     0x80    ld s4,112(s8)
    0x8401651e     0x84    ld s7,40(s5)
    0x84016522     0x88    ld s9,48(s5)
    0x84016526     0x8c    bnez s4,ffffffff840166c8 <decodeUntypedInvocation+0x22e>
    0x8401652a     0x90    ld a5,0(s11)
    0x8401652e     0x94    srli a4,a5,0x3b
    0x84016532     0x98    li a3,10
    0x84016534     0x9a    bne a4,a3,ffffffff840166e8 <decodeUntypedInvocation+0x24e>
    0x84016538     0x9e    srli a4,a5,0x2f
    0x8401653c     0xa2    li a3,1
    0x8401653e     0xa4    sll a4,a3,a4
    0x84016542     0xa8    addi a3,a4,-1
    0x84016546     0xac    bltu a3,s7,ffffffff84016712 <decodeUntypedInvocation+0x278>
    0x8401654a     0xb0    addi a3,s9,-1
    0x8401654e     0xb4    li a2,255
    0x84016552     0xb8    bltu a2,a3,ffffffff8401672c <decodeUntypedInvocation+0x292>
    0x84016556     0xbc    sub a4,a4,s7
    0x8401655a     0xc0    bltu a4,s9,ffffffff8401674c <decodeUntypedInvocation+0x2b2>
    0x8401655e     0xc4    slli a5,a5,0x1
    0x84016560     0xc6    lui s4,0xfc000
    0x84016564     0xca    srli s4,s4,0x19
    0x84016568     0xce    and a4,a5,s4
    0x8401656c     0xd2    srli a5,a5,0x26
    0x8401656e     0xd4    andi a5,a5,1
    0x84016570     0xd6    beqz a5,ffffffff84016578 <decodeUntypedInvocation+0xde>
    0x84016572     0xd8    li a5,-1
    0x84016574     0xda    slli a5,a5,0x27
    0x84016576     0xdc    or a4,a4,a5
    0x84016578     0xde    mv s11,a4
    0x8401657a     0xe0    add s8,s9,s7
    0x8401657e     0xe4    bgeu s7,s8,ffffffff8401659c <decodeUntypedInvocation+0x102>
    0x84016582     0xe8    slli s4,s7,0x5
    0x84016586     0xec    add s4,s4,a4
    0x84016588     0xee    mv s5,s7
    0x8401658a     0xf0    mv a0,s4
    0x8401658c     0xf2    jal ra,ffffffff840119cc <ensureEmptySlot>
    0x84016590     0xf6    bnez a0,ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x84016592     0xf8    addi s5,s5,1
    0x84016594     0xfa    addi s4,s4,32 # fffffffffc000020 <ki_end+0x77fd1020>
    0x84016598     0xfe    bne s5,s8,ffffffff8401658a <decodeUntypedInvocation+0xf0>
    0x8401659c    0x102    mv a0,s1
    0x8401659e    0x104    jal ra,ffffffff8401206a <ensureNoChildren>
    0x840165a2    0x108    beqz a0,ffffffff840165aa <decodeUntypedInvocation+0x110>
    0x840165a4    0x10a    srli a0,s10,0x19
    0x840165a8    0x10e    li s0,0
    0x840165aa    0x110    ld a5,16(sp)          ; stack access
    0x840165ac    0x112    slli a4,a5,0x19
    0x840165b0    0x116    srli a4,a4,0x19
    0x840165b2    0x118    srli a5,a5,0x26
    0x840165b4    0x11a    andi a5,a5,1
    0x840165b6    0x11c    beqz a5,ffffffff840165be <decodeUntypedInvocation+0x124>
    0x840165b8    0x11e    li a5,-1
    0x840165ba    0x120    slli a5,a5,0x27
    0x840165bc    0x122    or a4,a4,a5
    0x840165be    0x124    slli a0,a0,0x4
    0x840165c0    0x126    li a5,1
    0x840165c2    0x128    sll a5,a5,s10
    0x840165c6    0x12c    sub a5,a5,a0
    0x840165c8    0x12e    sext.w a3,s3
    0x840165cc    0x132    srl s3,a5,s3
    0x840165d0    0x136    bltu s3,s9,ffffffff84016768 <decodeUntypedInvocation+0x2ce>
    0x840165d4    0x13a    srli s10,s10,0x6
    0x840165d8    0x13e    andi s10,s10,1
    0x840165dc    0x142    beqz s10,ffffffff840165ee <decodeUntypedInvocation+0x154>
    0x840165e0    0x146    addi a5,s2,-5
    0x840165e4    0x14a    li a2,2
    0x840165e6    0x14c    bgeu a2,a5,ffffffff840165ee <decodeUntypedInvocation+0x154>
    0x840165ea    0x150    bnez s2,ffffffff8401677e <decodeUntypedInvocation+0x2e4>
    0x840165ee    0x154    li a5,1
    0x840165f0    0x156    sll a5,a5,a3
    0x840165f4    0x15a    addi s3,a5,-1
    0x840165f8    0x15e    add a0,a0,s3
    0x840165fa    0x160    add s3,a0,a4
    0x840165fe    0x164    neg a5,a5
    0x84016602    0x168    and s3,s3,a5
    0x84016606    0x16c    li a1,2
    0x84016608    0x16e    auipc a0,0x14
    0x8401660c    0x172    ld a0,560(a0) # ffffffff8402a838 <ksCurThread>
    0x84016610    0x176    jal ra,ffffffff840125f6 <setThreadState>
    0x84016614    0x17a    sd s10,0(sp)          ; stack access
    0x84016616    0x17c    mv a7,s9
    0x84016618    0x17e    mv a6,s7
    0x8401661a    0x180    mv a5,s11
    0x8401661c    0x182    mv a4,s6
    0x8401661e    0x184    mv a3,s2
    0x84016620    0x186    mv a2,s3
    0x84016622    0x188    mv a1,s0
    0x84016624    0x18a    mv a0,s1
    0x84016626    0x18c    jal ra,ffffffff84016386 <invokeUntyped_Retype>
    0x8401662a    0x190    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x8401662c    0x192    li a5,3
    0x8401662e    0x194    auipc a4,0x2
    0x84016632    0x198    sd a5,162(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016636    0x19c    li a0,3
    0x84016638    0x19e    ld ra,168(sp)         ; stack access
    0x8401663a    0x1a0    ld s0,160(sp)         ; stack access
    0x8401663c    0x1a2    ld s1,152(sp)         ; stack access
    0x8401663e    0x1a4    ld s2,144(sp)         ; stack access
    0x84016640    0x1a6    ld s3,136(sp)         ; stack access
    0x84016642    0x1a8    ld s4,128(sp)         ; stack access
    0x84016644    0x1aa    ld s5,120(sp)         ; stack access
    0x84016646    0x1ac    ld s6,112(sp)         ; stack access
    0x84016648    0x1ae    ld s7,104(sp)         ; stack access
    0x8401664a    0x1b0    ld s8,96(sp)          ; stack access
    0x8401664c    0x1b2    ld s9,88(sp)          ; stack access
    0x8401664e    0x1b4    ld s10,80(sp)         ; stack access
    0x84016650    0x1b6    ld s11,72(sp)         ; stack access
    0x84016652    0x1b8    addi sp,sp,176
    0x84016654    0x1ba    ret
    0x84016656    0x1bc    li a5,7
    0x84016658    0x1be    auipc a4,0x2
    0x8401665c    0x1c2    sd a5,120(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016660    0x1c6    li a0,3
    0x84016662    0x1c8    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x84016664    0x1ca    auipc a5,0x2
    0x84016668    0x1ce    addi a5,a5,-1636 # ffffffff84018000 <riscvKSASIDTable>
    0x8401666c    0x1d2    li a4,1
    0x8401666e    0x1d4    sd a4,1744(a5)
    0x84016672    0x1d8    sd zero,1696(a5)
    0x84016676    0x1dc    li a0,3
    0x84016678    0x1de    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x8401667a    0x1e0    auipc a5,0x2
    0x8401667e    0x1e4    addi a5,a5,-1658 # ffffffff84018000 <riscvKSASIDTable>
    0x84016682    0x1e8    li a4,4
    0x84016684    0x1ea    sd a4,1744(a5)
    0x84016688    0x1ee    sd zero,1712(a5)
    0x8401668c    0x1f2    li a4,38
    0x84016690    0x1f6    sd a4,1720(a5)
    0x84016694    0x1fa    li a0,3
    0x84016696    0x1fc    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x84016698    0x1fe    bnez s6,ffffffff84016518 <decodeUntypedInvocation+0x7e>
    0x8401669c    0x202    auipc a5,0x2
    0x840166a0    0x206    addi a5,a5,-1692 # ffffffff84018000 <riscvKSASIDTable>
    0x840166a4    0x20a    li a4,1
    0x840166a6    0x20c    sd a4,1744(a5)
    0x840166aa    0x210    sd a4,1696(a5)
    0x840166ae    0x214    li a0,3
    0x840166b0    0x216    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x840166b2    0x218    auipc a5,0x2
    0x840166b6    0x21c    addi a5,a5,-1714 # ffffffff84018000 <riscvKSASIDTable>
    0x840166ba    0x220    li a4,1
    0x840166bc    0x222    sd a4,1744(a5)
    0x840166c0    0x226    sd a4,1696(a5)
    0x840166c4    0x22a    li a0,3
    0x840166c6    0x22c    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x840166c8    0x22e    ld a0,0(s11)
    0x840166cc    0x232    sd a0,32(sp)          ; stack access
    0x840166ce    0x234    ld a1,8(s11)
    0x840166d2    0x238    sd a1,40(sp)          ; stack access
    0x840166d4    0x23a    mv a3,s4
    0x840166d6    0x23c    ld a2,104(s8)
    0x840166da    0x240    jal ra,ffffffff840115a6 <lookupTargetSlot>
    0x840166de    0x244    sd a0,48(sp)          ; stack access
    0x840166e0    0x246    sd a1,56(sp)          ; stack access
    0x840166e2    0x248    bnez a0,ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x840166e4    0x24a    ld a5,0(a1)
    0x840166e6    0x24c    j ffffffff8401652e <decodeUntypedInvocation+0x94>
    0x840166e8    0x24e    auipc a4,0x2
    0x840166ec    0x252    addi a4,a4,-1768 # ffffffff84018000 <riscvKSASIDTable>
    0x840166f0    0x256    li a5,6
    0x840166f2    0x258    sd a5,1744(a4)
    0x840166f6    0x25c    sd zero,1736(a4)
    0x840166fa    0x260    slli a5,s4,0x2
    0x840166fe    0x264    andi a5,a5,508
    0x84016702    0x268    ori a5,a5,1
    0x84016706    0x26c    sd a5,1024(a4)
    0x8401670a    0x270    sd zero,1032(a4)
    0x8401670e    0x274    li a0,3
    0x84016710    0x276    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x84016712    0x278    auipc a5,0x2
    0x84016716    0x27c    addi a5,a5,-1810 # ffffffff84018000 <riscvKSASIDTable>
    0x8401671a    0x280    li a4,4
    0x8401671c    0x282    sd a4,1744(a5)
    0x84016720    0x286    sd zero,1712(a5)
    0x84016724    0x28a    sd a3,1720(a5)
    0x84016728    0x28e    li a0,3
    0x8401672a    0x290    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x8401672c    0x292    auipc a5,0x2
    0x84016730    0x296    addi a5,a5,-1836 # ffffffff84018000 <riscvKSASIDTable>
    0x84016734    0x29a    li a4,4
    0x84016736    0x29c    sd a4,1744(a5)
    0x8401673a    0x2a0    li a4,1
    0x8401673c    0x2a2    sd a4,1712(a5)
    0x84016740    0x2a6    li a4,256
    0x84016744    0x2aa    sd a4,1720(a5)
    0x84016748    0x2ae    li a0,3
    0x8401674a    0x2b0    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x8401674c    0x2b2    auipc a5,0x2
    0x84016750    0x2b6    addi a5,a5,-1868 # ffffffff84018000 <riscvKSASIDTable>
    0x84016754    0x2ba    li a3,4
    0x84016756    0x2bc    sd a3,1744(a5)
    0x8401675a    0x2c0    li a3,1
    0x8401675c    0x2c2    sd a3,1712(a5)
    0x84016760    0x2c6    sd a4,1720(a5)
    0x84016764    0x2ca    li a0,3
    0x84016766    0x2cc    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x84016768    0x2ce    auipc a4,0x2
    0x8401676c    0x2d2    addi a4,a4,-1896 # ffffffff84018000 <riscvKSASIDTable>
    0x84016770    0x2d6    li a3,10
    0x84016772    0x2d8    sd a3,1744(a4)
    0x84016776    0x2dc    sd a5,1728(a4)
    0x8401677a    0x2e0    li a0,3
    0x8401677c    0x2e2    j ffffffff84016638 <decodeUntypedInvocation+0x19e>
    0x8401677e    0x2e4    auipc a5,0x2
    0x84016782    0x2e8    addi a5,a5,-1918 # ffffffff84018000 <riscvKSASIDTable>
    0x84016786    0x2ec    li a4,1
    0x84016788    0x2ee    sd a4,1744(a5)
    0x8401678c    0x2f2    sd a4,1696(a5)
    0x84016790    0x2f6    li a0,3
    0x84016792    0x2f8    j ffffffff84016638 <decodeUntypedInvocation+0x19e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
256 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeUntypedInvocation` has 391 nodes.

Section decodeSetSpace (256 of 269)
===================================

Deriving specifications
-----------------------

Section `decodeSetSpace` consists of 152 instructions.

RVC_FTTFFFFTFFFT__FT.

Stack analysis
---------------

58 stack accesses found. Annotated code for `decodeSetSpace`:

    0x84014fbc      0x0    addi sp,sp,-256
    0x84014fbe      0x2    sd ra,248(sp)         ; stack access
    0x84014fc0      0x4    sd s0,240(sp)         ; stack access
    0x84014fc2      0x6    sd s1,232(sp)         ; stack access
    0x84014fc4      0x8    sd s2,224(sp)         ; stack access
    0x84014fc6      0xa    sd s3,216(sp)         ; stack access
    0x84014fc8      0xc    sd s4,208(sp)         ; stack access
    0x84014fca      0xe    sd s5,200(sp)         ; stack access
    0x84014fcc     0x10    sd s6,192(sp)         ; stack access
    0x84014fce     0x12    sd s7,184(sp)         ; stack access
    0x84014fd0     0x14    sd s8,176(sp)         ; stack access
    0x84014fd2     0x16    sd s9,168(sp)         ; stack access
    0x84014fd4     0x18    sd a0,64(sp)          ; stack access
    0x84014fd6     0x1a    sd a1,72(sp)          ; stack access
    0x84014fd8     0x1c    li a5,2
    0x84014fda     0x1e    bgeu a5,a2,ffffffff840150ee <decodeSetSpace+0x132>
    0x84014fde     0x22    mv s2,a3
    0x84014fe0     0x24    auipc s1,0x4
    0x84014fe4     0x28    ld s1,-1872(s1) # ffffffff84018890 <current_extra_caps>
    0x84014fe8     0x2c    beqz s1,ffffffff840150ee <decodeSetSpace+0x132>
    0x84014fec     0x30    auipc s3,0x4
    0x84014ff0     0x34    ld s3,-1876(s3) # ffffffff84018898 <current_extra_caps+0x8>
    0x84014ff4     0x38    beqz s3,ffffffff840150ee <decodeSetSpace+0x132>
    0x84014ff8     0x3c    auipc a5,0x16
    0x84014ffc     0x40    ld a5,-1984(a5) # ffffffff8402a838 <ksCurThread>
    0x84015000     0x44    ld s6,88(a5)
    0x84015004     0x48    ld s5,96(a5)
    0x84015008     0x4c    ld s7,104(a5)
    0x8401500c     0x50    ld s4,0(s1)
    0x84015010     0x54    sd s4,128(sp)         ; stack access
    0x84015012     0x56    ld a5,8(s1)
    0x84015014     0x58    sd a5,136(sp)         ; stack access
    0x84015016     0x5a    mv s8,s4
    0x84015018     0x5c    ld a5,0(s3)
    0x8401501c     0x60    sd a5,112(sp)         ; stack access
    0x8401501e     0x62    ld a5,8(s3)
    0x84015022     0x66    sd a5,120(sp)         ; stack access
    0x84015024     0x68    ld a5,64(sp)          ; stack access
    0x84015026     0x6a    slli s0,a5,0x19
    0x8401502a     0x6e    srli s0,s0,0x19
    0x8401502c     0x70    srli a5,a5,0x26
    0x8401502e     0x72    andi a5,a5,1
    0x84015030     0x74    beqz a5,ffffffff84015038 <decodeSetSpace+0x7c>
    0x84015032     0x76    li a5,-1
    0x84015034     0x78    slli a5,a5,0x27
    0x84015036     0x7a    or s0,s0,a5
    0x84015038     0x7c    andi s9,s0,-1024
    0x8401503c     0x80    mv a0,s9
    0x8401503e     0x82    jal ra,ffffffff840121d0 <slotCapLongRunningDelete>
    0x84015042     0x86    bnez a0,ffffffff84015114 <decodeSetSpace+0x158>
    0x84015044     0x88    addi a0,s9,32
    0x84015048     0x8c    jal ra,ffffffff840121d0 <slotCapLongRunningDelete>
    0x8401504c     0x90    bnez a0,ffffffff84015114 <decodeSetSpace+0x158>
    0x8401504e     0x92    beqz s5,ffffffff84015062 <decodeSetSpace+0xa6>
    0x84015052     0x96    mv a2,s4
    0x84015054     0x98    ld a3,136(sp)         ; stack access
    0x84015056     0x9a    mv a1,s5
    0x84015058     0x9c    li a0,0
    0x8401505a     0x9e    jal ra,ffffffff8401220a <updateCapData>
    0x8401505e     0xa2    sd a1,136(sp)         ; stack access
    0x84015060     0xa4    mv s8,a0
    0x84015062     0xa6    mv a2,s8
    0x84015064     0xa8    ld a3,136(sp)         ; stack access
    0x84015066     0xaa    mv a1,s1
    0x84015068     0xac    addi a0,sp,88
    0x8401506a     0xae    jal ra,ffffffff840120a8 <deriveCap>
    0x8401506e     0xb2    ld a0,88(sp)          ; stack access
    0x84015070     0xb4    bnez a0,ffffffff840150fa <decodeSetSpace+0x13e>
    0x84015072     0xb6    ld s4,96(sp)          ; stack access
    0x84015074     0xb8    ld a5,104(sp)         ; stack access
    0x84015076     0xba    sd a5,136(sp)         ; stack access
    0x84015078     0xbc    srli a4,s4,0x3b
    0x8401507c     0xc0    li a5,10
    0x8401507e     0xc2    bne a4,a5,ffffffff84015122 <decodeSetSpace+0x166>
    0x84015082     0xc6    beqz s7,ffffffff84015096 <decodeSetSpace+0xda>
    0x84015086     0xca    ld a2,112(sp)         ; stack access
    0x84015088     0xcc    ld a3,120(sp)         ; stack access
    0x8401508a     0xce    mv a1,s7
    0x8401508c     0xd0    li a0,0
    0x8401508e     0xd2    jal ra,ffffffff8401220a <updateCapData>
    0x84015092     0xd6    sd a0,112(sp)         ; stack access
    0x84015094     0xd8    sd a1,120(sp)         ; stack access
    0x84015096     0xda    ld a2,112(sp)         ; stack access
    0x84015098     0xdc    ld a3,120(sp)         ; stack access
    0x8401509a     0xde    mv a1,s3
    0x8401509c     0xe0    addi a0,sp,88
    0x8401509e     0xe2    jal ra,ffffffff840120a8 <deriveCap>
    0x840150a2     0xe6    ld a0,88(sp)          ; stack access
    0x840150a4     0xe8    bnez a0,ffffffff840150fa <decodeSetSpace+0x13e>
    0x840150a6     0xea    ld a0,96(sp)          ; stack access
    0x840150a8     0xec    sd a0,112(sp)         ; stack access
    0x840150aa     0xee    ld a1,104(sp)         ; stack access
    0x840150ac     0xf0    sd a1,120(sp)         ; stack access
    0x840150ae     0xf2    jal ra,ffffffff84010d06 <isValidVTableRoot>
    0x840150b2     0xf6    beqz a0,ffffffff84015130 <decodeSetSpace+0x174>
    0x840150b4     0xf8    li a1,2
    0x840150b6     0xfa    auipc a0,0x15
    0x840150ba     0xfe    ld a0,1922(a0) # ffffffff8402a838 <ksCurThread>
    0x840150be    0x102    jal ra,ffffffff840125f6 <setThreadState>
    0x840150c2    0x106    li a5,4
    0x840150c4    0x108    sd a5,56(sp)          ; stack access
    0x840150c6    0x10a    sd zero,48(sp)        ; stack access
    0x840150c8    0x10c    sd zero,32(sp)        ; stack access
    0x840150ca    0x10e    sd zero,40(sp)        ; stack access
    0x840150cc    0x110    sd zero,24(sp)        ; stack access
    0x840150ce    0x112    sd s3,16(sp)          ; stack access
    0x840150d0    0x114    ld a5,112(sp)         ; stack access
    0x840150d2    0x116    sd a5,0(sp)           ; stack access
    0x840150d4    0x118    ld a5,120(sp)         ; stack access
    0x840150d6    0x11a    sd a5,8(sp)           ; stack access
    0x840150d8    0x11c    mv a7,s1
    0x840150da    0x11e    mv a5,s4
    0x840150dc    0x120    ld a6,136(sp)         ; stack access
    0x840150de    0x122    li a4,0
    0x840150e0    0x124    li a3,0
    0x840150e2    0x126    mv a2,s6
    0x840150e4    0x128    mv a1,s2
    0x840150e6    0x12a    mv a0,s0
    0x840150e8    0x12c    jal ra,ffffffff84014948 <invokeTCB_ThreadControl>
    0x840150ec    0x130    j ffffffff840150fa <decodeSetSpace+0x13e>
    0x840150ee    0x132    li a5,7
    0x840150f0    0x134    auipc a4,0x3
    0x840150f4    0x138    sd a5,1504(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840150f8    0x13c    li a0,3
    0x840150fa    0x13e    ld ra,248(sp)         ; stack access
    0x840150fc    0x140    ld s0,240(sp)         ; stack access
    0x840150fe    0x142    ld s1,232(sp)         ; stack access
    0x84015100    0x144    ld s2,224(sp)         ; stack access
    0x84015102    0x146    ld s3,216(sp)         ; stack access
    0x84015104    0x148    ld s4,208(sp)         ; stack access
    0x84015106    0x14a    ld s5,200(sp)         ; stack access
    0x84015108    0x14c    ld s6,192(sp)         ; stack access
    0x8401510a    0x14e    ld s7,184(sp)         ; stack access
    0x8401510c    0x150    ld s8,176(sp)         ; stack access
    0x8401510e    0x152    ld s9,168(sp)         ; stack access
    0x84015110    0x154    addi sp,sp,256
    0x84015112    0x156    ret
    0x84015114    0x158    li a5,3
    0x84015116    0x15a    auipc a4,0x3
    0x8401511a    0x15e    sd a5,1466(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401511e    0x162    li a0,3
    0x84015120    0x164    j ffffffff840150fa <decodeSetSpace+0x13e>
    0x84015122    0x166    li a5,3
    0x84015124    0x168    auipc a4,0x3
    0x84015128    0x16c    sd a5,1452(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401512c    0x170    li a0,3
    0x8401512e    0x172    j ffffffff840150fa <decodeSetSpace+0x13e>
    0x84015130    0x174    li a5,3
    0x84015132    0x176    auipc a4,0x3
    0x84015136    0x17a    sd a5,1438(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401513a    0x17e    li a0,3
    0x8401513c    0x180    j ffffffff840150fa <decodeSetSpace+0x13e>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
152 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeSetSpace` has 259 nodes.

Section sendIPC (257 of 269)
============================

Deriving specifications
-----------------------

Section `sendIPC` consists of 141 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `sendIPC`:

    0x840141fc      0x0    addi sp,sp,-80
    0x840141fe      0x2    sd ra,72(sp)          ; stack access
    0x84014200      0x4    sd s0,64(sp)          ; stack access
    0x84014202      0x6    sd s1,56(sp)          ; stack access
    0x84014204      0x8    sd s2,48(sp)          ; stack access
    0x84014206      0xa    sd s3,40(sp)          ; stack access
    0x84014208      0xc    sd s4,32(sp)          ; stack access
    0x8401420a      0xe    sd s5,24(sp)          ; stack access
    0x8401420c     0x10    sd s6,16(sp)          ; stack access
    0x8401420e     0x12    mv s3,a1
    0x84014210     0x14    mv s5,a2
    0x84014212     0x16    mv s2,a3
    0x84014214     0x18    mv s4,a4
    0x84014216     0x1a    mv s1,a5
    0x84014218     0x1c    mv s0,a6
    0x8401421a     0x1e    ld a6,0(a6)
    0x8401421e     0x22    andi a5,a6,2
    0x84014222     0x26    beqz a5,ffffffff840142b2 <sendIPC+0xb6>
    0x84014224     0x28    andi a4,a6,3
    0x84014228     0x2c    li a5,2
    0x8401422a     0x2e    bne a4,a5,ffffffff840142b4 <sendIPC+0xb8>
    0x8401422e     0x32    ld s6,8(s0)
    0x84014232     0x36    lui a2,0xf8000
    0x84014236     0x3a    srli a2,a2,0x19
    0x84014238     0x3c    and a2,a6,a2
    0x8401423c     0x40    srli a6,a6,0x26
    0x84014240     0x44    andi a6,a6,1
    0x84014244     0x48    beqz a6,ffffffff8401424e <sendIPC+0x52>
    0x84014248     0x4c    li a5,-1
    0x8401424a     0x4e    slli a5,a5,0x27
    0x8401424c     0x50    or a2,a2,a5
    0x8401424e     0x52    mv a1,s6
    0x84014250     0x54    mv a0,s6
    0x84014252     0x56    jal ra,ffffffff84012e56 <tcbEPDequeue>
    0x84014256     0x5a    sd a0,0(sp)           ; stack access
    0x84014258     0x5c    sd a1,8(sp)           ; stack access
    0x8401425a     0x5e    sd a0,8(s0)
    0x8401425c     0x60    ld a5,0(s0)
    0x8401425e     0x62    li a4,-1
    0x84014260     0x64    slli a4,a4,0x27
    0x84014262     0x66    addi a4,a4,3
    0x84014264     0x68    and a5,a5,a4
    0x84014266     0x6a    lui a4,0xf8000
    0x8401426a     0x6e    srli a4,a4,0x19
    0x8401426c     0x70    and a1,a1,a4
    0x8401426e     0x72    or a1,a1,a5
    0x84014270     0x74    beqz a0,ffffffff84014362 <sendIPC+0x166>
    0x84014274     0x78    sd a1,0(s0)
    0x84014276     0x7a    mv a4,s6
    0x84014278     0x7c    mv a3,s2
    0x8401427a     0x7e    mv a2,s5
    0x8401427c     0x80    mv a1,s0
    0x8401427e     0x82    mv a0,s1
    0x84014280     0x84    jal ra,ffffffff840140c6 <doIPCTransfer>
    0x84014284     0x88    ld s0,288(s6)
    0x84014288     0x8c    li a1,1
    0x8401428a     0x8e    mv a0,s6
    0x8401428c     0x90    jal ra,ffffffff840125f6 <setThreadState>
    0x84014290     0x94    mv a0,s6
    0x84014292     0x96    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x84014296     0x9a    beqz s3,ffffffff840142b4 <sendIPC+0xb8>
    0x8401429a     0x9e    or s2,s2,s4
    0x8401429e     0xa2    beqz s2,ffffffff84014368 <sendIPC+0x16c>
    0x840142a2     0xa6    srli a2,s0,0x3
    0x840142a6     0xaa    andi a2,a2,1
    0x840142a8     0xac    mv a1,s6
    0x840142aa     0xae    mv a0,s1
    0x840142ac     0xb0    jal ra,ffffffff84013dea <setupCallerCap>
    0x840142b0     0xb4    j ffffffff840142b4 <sendIPC+0xb8>
    0x840142b2     0xb6    bnez a0,ffffffff840142c8 <sendIPC+0xcc>
    0x840142b4     0xb8    ld ra,72(sp)          ; stack access
    0x840142b6     0xba    ld s0,64(sp)          ; stack access
    0x840142b8     0xbc    ld s1,56(sp)          ; stack access
    0x840142ba     0xbe    ld s2,48(sp)          ; stack access
    0x840142bc     0xc0    ld s3,40(sp)          ; stack access
    0x840142be     0xc2    ld s4,32(sp)          ; stack access
    0x840142c0     0xc4    ld s5,24(sp)          ; stack access
    0x840142c2     0xc6    ld s6,16(sp)          ; stack access
    0x840142c4     0xc8    addi sp,sp,80
    0x840142c6     0xca    ret
    0x840142c8     0xcc    ld a5,280(s1)
    0x840142cc     0xd0    srli a5,a5,0x27
    0x840142ce     0xd2    slli a5,a5,0x27
    0x840142d0     0xd4    lui a4,0xe0000
    0x840142d4     0xd8    srli a4,a4,0x19
    0x840142d6     0xda    and a4,a4,s0
    0x840142d8     0xdc    or a5,a5,a4
    0x840142da     0xde    ori a5,a5,4
    0x840142de     0xe2    sd a5,280(s1)
    0x840142e2     0xe6    sd a2,296(s1)
    0x840142e6     0xea    ld a5,288(s1)
    0x840142ea     0xee    slli s2,a3,0x3
    0x840142ee     0xf2    andi s2,s2,8
    0x840142f2     0xf6    andi a5,a5,-13
    0x840142f4     0xf8    or a5,a5,s2
    0x840142f8     0xfc    slli s4,s4,0x2
    0x840142fa     0xfe    andi s4,s4,4
    0x840142fe    0x102    or a5,a5,s4
    0x84014302    0x106    andi a5,a5,-3
    0x84014304    0x108    slli s3,a1,0x1
    0x84014308    0x10c    andi s3,s3,2
    0x8401430c    0x110    or s3,a5,s3
    0x84014310    0x114    sd s3,288(s1)
    0x84014314    0x118    mv a0,s1
    0x84014316    0x11a    jal ra,ffffffff840125c2 <scheduleTCB>
    0x8401431a    0x11e    ld a2,8(s0)
    0x8401431c    0x120    ld a4,0(s0)
    0x8401431e    0x122    lui a5,0xf8000
    0x84014322    0x126    srli a5,a5,0x19
    0x84014324    0x128    and a5,a5,a4
    0x84014326    0x12a    srli a4,a4,0x26
    0x84014328    0x12c    andi a4,a4,1
    0x8401432a    0x12e    beqz a4,ffffffff84014332 <sendIPC+0x136>
    0x8401432c    0x130    li a4,-1
    0x8401432e    0x132    slli a4,a4,0x27
    0x84014330    0x134    or a5,a5,a4
    0x84014332    0x136    mv a4,a5
    0x84014334    0x138    mv a3,s1
    0x84014336    0x13a    beqz a2,ffffffff8401433e <sendIPC+0x142>
    0x84014338    0x13c    mv a3,a2
    0x8401433a    0x13e    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x8401433e    0x142    sd a4,416(s1)
    0x84014342    0x146    sd zero,408(s1)
    0x84014346    0x14a    ld a4,0(s0)
    0x84014348    0x14c    sd a3,8(s0)
    0x8401434a    0x14e    lui a5,0xf8000
    0x8401434e    0x152    srli a5,a5,0x19
    0x84014350    0x154    and s1,s1,a5
    0x84014352    0x156    srli a5,a4,0x27
    0x84014356    0x15a    slli a5,a5,0x27
    0x84014358    0x15c    or s1,s1,a5
    0x8401435a    0x15e    ori s1,s1,1
    0x8401435e    0x162    sd s1,0(s0)
    0x84014360    0x164    j ffffffff840142b4 <sendIPC+0xb8>
    0x84014362    0x166    andi a1,a1,-4
    0x84014364    0x168    sd a1,0(s0)
    0x84014366    0x16a    j ffffffff84014276 <sendIPC+0x7a>
    0x84014368    0x16c    li a1,0
    0x8401436a    0x16e    mv a0,s1
    0x8401436c    0x170    jal ra,ffffffff840125f6 <setThreadState>
    0x84014370    0x174    j ffffffff840142b4 <sendIPC+0xb8>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
141 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `sendIPC` has 205 nodes.

Section cteDelete (258 of 269)
==============================

Deriving specifications
-----------------------

Section `cteDelete` consists of 162 instructions.


Stack analysis
---------------

34 stack accesses found. Annotated code for `cteDelete`:

    0x840132d0      0x0    addi sp,sp,-160
    0x840132d2      0x2    sd ra,152(sp)         ; stack access
    0x840132d4      0x4    sd s0,144(sp)         ; stack access
    0x840132d6      0x6    sd s1,136(sp)         ; stack access
    0x840132d8      0x8    sd s2,128(sp)         ; stack access
    0x840132da      0xa    sd s3,120(sp)         ; stack access
    0x840132dc      0xc    sd s4,112(sp)         ; stack access
    0x840132de      0xe    sd s5,104(sp)         ; stack access
    0x840132e0     0x10    sd s6,96(sp)          ; stack access
    0x840132e2     0x12    sd s7,88(sp)          ; stack access
    0x840132e4     0x14    sd s8,80(sp)          ; stack access
    0x840132e6     0x16    sd s9,72(sp)          ; stack access
    0x840132e8     0x18    mv s0,a0
    0x840132ea     0x1a    mv s4,a1
    0x840132ec     0x1c    li s2,18
    0x840132ee     0x1e    li s3,64
    0x840132f2     0x22    li s6,4
    0x840132f4     0x24    li s5,-1
    0x840132f6     0x26    li s1,1
    0x840132f8     0x28    j ffffffff84013338 <cteDelete+0x68>
    0x840132fa     0x2a    mv a2,s6
    0x840132fc     0x2c    j ffffffff84013370 <cteDelete+0xa0>
    0x840132fe     0x2e    bnez a1,ffffffff8401339e <cteDelete+0xce>
    0x84013300     0x30    ld a3,0(sp)           ; stack access
    0x84013302     0x32    sd a3,0(s0)
    0x84013304     0x34    ld a3,8(sp)           ; stack access
    0x84013306     0x36    sd a3,8(s0)
    0x84013308     0x38    bnez s4,ffffffff84013404 <cteDelete+0x134>
    0x8401330c     0x3c    beq a4,s2,ffffffff840133a4 <cteDelete+0xd4>
    0x84013310     0x40    ld a5,0(s0)
    0x84013312     0x42    ld a4,8(s0)
    0x84013314     0x44    andi a3,a5,127
    0x84013318     0x48    beq a3,s3,ffffffff8401348a <cteDelete+0x1ba>
    0x8401331c     0x4c    andi a0,a5,63
    0x84013320     0x50    addiw a0,a0,1
    0x84013322     0x52    sll a0,s1,a0
    0x84013326     0x56    neg a0,a0
    0x8401332a     0x5a    and a0,a0,a4
    0x8401332c     0x5c    mv a1,s0
    0x8401332e     0x5e    jal ra,ffffffff84011932 <capSwapForDelete>
    0x84013332     0x62    jal ra,ffffffff84011640 <preemptionPoint>
    0x84013336     0x66    bnez a0,ffffffff840133e0 <cteDelete+0x110>
    0x84013338     0x68    ld a5,0(s0)
    0x8401333a     0x6a    srli a5,a5,0x3b
    0x8401333c     0x6c    beqz a5,ffffffff840133d0 <cteDelete+0x100>
    0x8401333e     0x6e    mv a0,s0
    0x84013340     0x70    jal ra,ffffffff8401217a <isFinalCapability>
    0x84013344     0x74    mv a3,a0
    0x84013346     0x76    li a4,0
    0x84013348     0x78    ld a1,0(s0)
    0x8401334a     0x7a    ld a2,8(s0)
    0x8401334c     0x7c    mv a0,sp
    0x8401334e     0x7e    jal ra,ffffffff84013110 <finaliseCap>
    0x84013352     0x82    ld a7,16(sp)          ; stack access
    0x84013354     0x84    ld a6,24(sp)          ; stack access
    0x84013356     0x86    ld a5,0(sp)           ; stack access
    0x84013358     0x88    ld a0,8(sp)           ; stack access
    0x8401335a     0x8a    srli a4,a5,0x3b
    0x8401335e     0x8e    beqz a4,ffffffff8401339e <cteDelete+0xce>
    0x84013360     0x90    bne a4,s2,ffffffff8401339a <cteDelete+0xca>
    0x84013364     0x94    andi a3,a5,127
    0x84013368     0x98    beq a3,s3,ffffffff840132fa <cteDelete+0x2a>
    0x8401336c     0x9c    andi a2,a5,63
    0x84013370     0xa0    addi a2,a2,1
    0x84013372     0xa2    sll a3,s5,a2
    0x84013376     0xa6    not a3,a3
    0x8401337a     0xaa    and a3,a3,a0
    0x8401337c     0xac    mv a1,s1
    0x8401337e     0xae    beqz a3,ffffffff840132fe <cteDelete+0x2e>
    0x84013380     0xb0    li a1,0
    0x84013382     0xb2    bne a3,s1,ffffffff840132fe <cteDelete+0x2e>
    0x84013386     0xb6    sll a3,s1,a2
    0x8401338a     0xba    neg a3,a3
    0x8401338e     0xbe    and a3,a3,a0
    0x84013390     0xc0    sub a3,s0,a3
    0x84013394     0xc4    seqz a1,a3
    0x84013398     0xc8    j ffffffff840132fe <cteDelete+0x2e>
    0x8401339a     0xca    jal ra,ffffffff840103da <halt>
    0x8401339e     0xce    sd a7,48(sp)          ; stack access
    0x840133a0     0xd0    sd a6,56(sp)          ; stack access
    0x840133a2     0xd2    j ffffffff840133d4 <cteDelete+0x104>
    0x840133a4     0xd4    andi a4,a5,127
    0x840133a8     0xd8    beq a4,s3,ffffffff840133c4 <cteDelete+0xf4>
    0x840133ac     0xdc    andi a5,a5,63
    0x840133b0     0xe0    addiw a5,a5,1
    0x840133b2     0xe2    sll a5,s1,a5
    0x840133b6     0xe6    neg a5,a5
    0x840133ba     0xea    and a5,a5,a0
    0x840133bc     0xec    bne s0,a5,ffffffff84013310 <cteDelete+0x40>
    0x840133c0     0xf0    mv a0,s4
    0x840133c2     0xf2    j ffffffff840133e0 <cteDelete+0x110>
    0x840133c4     0xf4    mv a5,s6
    0x840133c6     0xf6    j ffffffff840133b0 <cteDelete+0xe0>
    0x840133c8     0xf8    mv a5,s6
    0x840133ca     0xfa    j ffffffff8401345c <cteDelete+0x18c>
    0x840133cc     0xfc    jal ra,ffffffff840103da <halt>
    0x840133d0    0x100    sd zero,48(sp)        ; stack access
    0x840133d2    0x102    sd zero,56(sp)        ; stack access
    0x840133d4    0x104    ld a1,48(sp)          ; stack access
    0x840133d6    0x106    ld a2,56(sp)          ; stack access
    0x840133d8    0x108    mv a0,s0
    0x840133da    0x10a    jal ra,ffffffff84011b30 <emptySlot>
    0x840133de    0x10e    li a0,0
    0x840133e0    0x110    ld ra,152(sp)         ; stack access
    0x840133e2    0x112    ld s0,144(sp)         ; stack access
    0x840133e4    0x114    ld s1,136(sp)         ; stack access
    0x840133e6    0x116    ld s2,128(sp)         ; stack access
    0x840133e8    0x118    ld s3,120(sp)         ; stack access
    0x840133ea    0x11a    ld s4,112(sp)         ; stack access
    0x840133ec    0x11c    ld s5,104(sp)         ; stack access
    0x840133ee    0x11e    ld s6,96(sp)          ; stack access
    0x840133f0    0x120    ld s7,88(sp)          ; stack access
    0x840133f2    0x122    ld s8,80(sp)          ; stack access
    0x840133f4    0x124    ld s9,72(sp)          ; stack access
    0x840133f6    0x126    addi sp,sp,160
    0x840133f8    0x128    ret
    0x840133fa    0x12a    andi s8,s9,-32
    0x840133fe    0x12e    andi s9,s9,31
    0x84013402    0x132    j ffffffff84013430 <cteDelete+0x160>
    0x84013404    0x134    ld a5,0(s0)
    0x84013406    0x136    ld s9,8(s0)
    0x8401340a    0x13a    andi s7,a5,127
    0x8401340e    0x13e    beq s7,s3,ffffffff840133fa <cteDelete+0x12a>
    0x84013412    0x142    andi a5,a5,63
    0x84013416    0x146    addi a5,a5,1
    0x84013418    0x148    sll s8,s1,a5
    0x8401341c    0x14c    neg s8,s8
    0x84013420    0x150    and s8,s8,s9
    0x84013424    0x154    sll a5,s5,a5
    0x84013428    0x158    not a5,a5
    0x8401342c    0x15c    and s9,a5,s9
    0x84013430    0x160    slli a0,s9,0x5
    0x84013434    0x164    addi a0,a0,-32
    0x84013436    0x166    li a1,0
    0x84013438    0x168    add a0,a0,s8
    0x8401343a    0x16a    jal ra,ffffffff840132d0 <cteDelete>
    0x8401343e    0x16e    bnez a0,ffffffff840133e0 <cteDelete+0x110>
    0x84013440    0x170    ld a5,0(s0)
    0x84013442    0x172    srli a4,a5,0x3b
    0x84013446    0x176    beqz a4,ffffffff84013332 <cteDelete+0x62>
    0x8401344a    0x17a    bne a4,s2,ffffffff840133cc <cteDelete+0xfc>
    0x8401344e    0x17e    ld a3,8(s0)
    0x84013450    0x180    andi a2,a5,127
    0x84013454    0x184    beq a2,s3,ffffffff840133c8 <cteDelete+0xf8>
    0x84013458    0x188    andi a5,a5,63
    0x8401345c    0x18c    addi a5,a5,1
    0x8401345e    0x18e    sll a4,s1,a5
    0x84013462    0x192    neg a4,a4
    0x84013466    0x196    and a4,a4,a3
    0x84013468    0x198    bne s8,a4,ffffffff84013332 <cteDelete+0x62>
    0x8401346c    0x19c    sll a5,s5,a5
    0x84013470    0x1a0    not a5,a5
    0x84013474    0x1a4    and a3,a3,a5
    0x84013476    0x1a6    bne a3,s9,ffffffff84013332 <cteDelete+0x62>
    0x8401347a    0x1aa    bne a2,s7,ffffffff84013332 <cteDelete+0x62>
    0x8401347e    0x1ae    addi s9,s9,-1
    0x84013480    0x1b0    and a5,s9,a5
    0x84013484    0x1b4    or a4,a4,a5
    0x84013486    0x1b6    sd a4,8(s0)
    0x84013488    0x1b8    j ffffffff84013332 <cteDelete+0x62>
    0x8401348a    0x1ba    andi a0,a4,-32
    0x8401348e    0x1be    j ffffffff8401332c <cteDelete+0x5c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
162 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `cteDelete` has 258 nodes.

Section decodeIRQControlInvocation (259 of 269)
===============================================

Deriving specifications
-----------------------

Section `decodeIRQControlInvocation` consists of 70 instructions.


Stack analysis
---------------

15 stack accesses found. Annotated code for `decodeIRQControlInvocation`:

    0x84012724     0x0    addi sp,sp,-80
    0x84012726     0x2    sd ra,72(sp)          ; stack access
    0x84012728     0x4    sd s0,64(sp)          ; stack access
    0x8401272a     0x6    sd s1,56(sp)          ; stack access
    0x8401272c     0x8    sd s2,48(sp)          ; stack access
    0x8401272e     0xa    sd s3,40(sp)          ; stack access
    0x84012730     0xc    mv s0,a2
    0x84012732     0xe    li a5,25
    0x84012734    0x10    bne a0,a5,ffffffff840127da <decodeIRQControlInvocation+0xb6>
    0x84012738    0x14    li a5,2
    0x8401273a    0x16    bgeu a5,a1,ffffffff8401278c <decodeIRQControlInvocation+0x68>
    0x8401273e    0x1a    auipc a5,0x6
    0x84012742    0x1e    ld a5,338(a5) # ffffffff84018890 <current_extra_caps>
    0x84012746    0x22    beqz a5,ffffffff8401278c <decodeIRQControlInvocation+0x68>
    0x84012748    0x24    auipc a4,0x18
    0x8401274c    0x28    ld a4,240(a4) # ffffffff8402a838 <ksCurThread>
    0x84012750    0x2c    ld s1,88(a4)
    0x84012752    0x2e    ld s2,96(a4)
    0x84012756    0x32    ld s3,104(a4)
    0x8401275a    0x36    ld a4,0(a5)
    0x8401275c    0x38    sd a4,0(sp)           ; stack access
    0x8401275e    0x3a    ld a5,8(a5)
    0x84012760    0x3c    sd a5,8(sp)           ; stack access
    0x84012762    0x3e    mv a0,s1
    0x84012764    0x40    jal ra,ffffffff84010e2c <Arch_checkIRQ>
    0x84012768    0x44    bnez a0,ffffffff84012798 <decodeIRQControlInvocation+0x74>
    0x8401276a    0x46    slli a4,s1,0x3
    0x8401276e    0x4a    auipc a5,0x6
    0x84012772    0x4e    addi a5,a5,-1902 # ffffffff84018000 <riscvKSASIDTable>
    0x84012776    0x52    add a5,a5,a4
    0x84012778    0x54    ld a5,1752(a5)
    0x8401277c    0x58    beqz a5,ffffffff840127a6 <decodeIRQControlInvocation+0x82>
    0x8401277e    0x5a    li a5,9
    0x84012780    0x5c    auipc a4,0x6
    0x84012784    0x60    sd a5,-176(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84012788    0x64    li a0,3
    0x8401278a    0x66    j ffffffff84012798 <decodeIRQControlInvocation+0x74>
    0x8401278c    0x68    li a5,7
    0x8401278e    0x6a    auipc a4,0x6
    0x84012792    0x6e    sd a5,-190(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84012796    0x72    li a0,3
    0x84012798    0x74    ld ra,72(sp)          ; stack access
    0x8401279a    0x76    ld s0,64(sp)          ; stack access
    0x8401279c    0x78    ld s1,56(sp)          ; stack access
    0x8401279e    0x7a    ld s2,48(sp)          ; stack access
    0x840127a0    0x7c    ld s3,40(sp)          ; stack access
    0x840127a2    0x7e    addi sp,sp,80
    0x840127a4    0x80    ret
    0x840127a6    0x82    mv a3,s3
    0x840127a8    0x84    mv a2,s2
    0x840127aa    0x86    ld a0,0(sp)           ; stack access
    0x840127ac    0x88    ld a1,8(sp)           ; stack access
    0x840127ae    0x8a    jal ra,ffffffff840115a6 <lookupTargetSlot>
    0x840127b2    0x8e    sd a1,24(sp)          ; stack access
    0x840127b4    0x90    bnez a0,ffffffff84012798 <decodeIRQControlInvocation+0x74>
    0x840127b6    0x92    mv s2,a1
    0x840127b8    0x94    mv a0,a1
    0x840127ba    0x96    jal ra,ffffffff840119cc <ensureEmptySlot>
    0x840127be    0x9a    bnez a0,ffffffff84012798 <decodeIRQControlInvocation+0x74>
    0x840127c0    0x9c    li a1,2
    0x840127c2    0x9e    auipc a0,0x18
    0x840127c6    0xa2    ld a0,118(a0) # ffffffff8402a838 <ksCurThread>
    0x840127ca    0xa6    jal ra,ffffffff840125f6 <setThreadState>
    0x840127ce    0xaa    mv a2,s0
    0x840127d0    0xac    mv a1,s2
    0x840127d2    0xae    mv a0,s1
    0x840127d4    0xb0    jal ra,ffffffff84011ae6 <invokeIRQControl>
    0x840127d8    0xb4    j ffffffff84012798 <decodeIRQControlInvocation+0x74>
    0x840127da    0xb6    jal ra,ffffffff84012612 <Arch_decodeIRQControlInvocation>
    0x840127de    0xba    j ffffffff84012798 <decodeIRQControlInvocation+0x74>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
70 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeIRQControlInvocation` has 117 nodes.

Section handleInvocation (260 of 269)
=====================================

Deriving specifications
-----------------------

Section `handleInvocation` consists of 105 instructions.


Stack analysis
---------------

23 stack accesses found. Annotated code for `handleInvocation`:

    0x84016988      0x0    addi sp,sp,-128
    0x8401698a      0x2    sd ra,120(sp)         ; stack access
    0x8401698c      0x4    sd s0,112(sp)         ; stack access
    0x8401698e      0x6    sd s1,104(sp)         ; stack access
    0x84016990      0x8    sd s2,96(sp)          ; stack access
    0x84016992      0xa    sd s3,88(sp)          ; stack access
    0x84016994      0xc    sd s4,80(sp)          ; stack access
    0x84016996      0xe    sd s5,72(sp)          ; stack access
    0x84016998     0x10    sd s6,64(sp)          ; stack access
    0x8401699a     0x12    sd s7,56(sp)          ; stack access
    0x8401699c     0x14    mv s5,a0
    0x8401699e     0x16    mv s4,a1
    0x840169a0     0x18    auipc s0,0x14
    0x840169a4     0x1c    ld s0,-360(s0) # ffffffff8402a838 <ksCurThread>
    0x840169a8     0x20    ld s1,80(s0)
    0x840169aa     0x22    andi a4,s1,127
    0x840169ae     0x26    li a5,120
    0x840169b2     0x2a    bgeu a5,a4,ffffffff840169be <handleInvocation+0x36>
    0x840169b6     0x2e    andi s1,s1,-128
    0x840169ba     0x32    ori s1,s1,120
    0x840169be     0x36    ld s6,72(s0)
    0x840169c2     0x3a    mv a2,s6
    0x840169c4     0x3c    mv a1,s0
    0x840169c6     0x3e    addi a0,sp,16
    0x840169c8     0x40    jal ra,ffffffff8401147e <lookupCapAndSlot>
    0x840169cc     0x44    ld s7,16(sp)          ; stack access
    0x840169ce     0x46    bnez s7,ffffffff84016a3a <handleInvocation+0xb2>
    0x840169d2     0x4a    mv a1,s0
    0x840169d4     0x4c    li a0,0
    0x840169d6     0x4e    jal ra,ffffffff840107a2 <lookupIPCBuffer>
    0x840169da     0x52    mv s3,a0
    0x840169dc     0x54    mv a2,s1
    0x840169de     0x56    mv a1,a0
    0x840169e0     0x58    mv a0,s0
    0x840169e2     0x5a    jal ra,ffffffff84013e42 <lookupExtraCaps>
    0x840169e6     0x5e    mv s2,a0
    0x840169e8     0x60    bnez a0,ffffffff84016a5c <handleInvocation+0xd4>
    0x840169ea     0x62    andi a1,s1,127
    0x840169ee     0x66    li a5,4
    0x840169f0     0x68    bltu a5,a1,ffffffff84016a6c <handleInvocation+0xe4>
    0x840169f4     0x6c    sd s3,0(sp)           ; stack access
    0x840169f6     0x6e    mv a7,s5
    0x840169f8     0x70    mv a6,s4
    0x840169fa     0x72    ld a4,24(sp)          ; stack access
    0x840169fc     0x74    ld a5,32(sp)          ; stack access
    0x840169fe     0x76    ld a3,40(sp)          ; stack access
    0x84016a00     0x78    mv a2,s6
    0x84016a02     0x7a    srli a0,s1,0xc
    0x84016a06     0x7e    jal ra,ffffffff84016794 <decodeInvocation>
    0x84016a0a     0x82    li a5,4
    0x84016a0c     0x84    beq a0,a5,ffffffff84016a9c <handleInvocation+0x114>
    0x84016a10     0x88    li a5,3
    0x84016a12     0x8a    beq a0,a5,ffffffff84016a74 <handleInvocation+0xec>
    0x84016a16     0x8e    ld a5,280(s0)
    0x84016a1a     0x92    andi a5,a5,15
    0x84016a1c     0x94    li a4,2
    0x84016a1e     0x96    beq a5,a4,ffffffff84016a84 <handleInvocation+0xfc>
    0x84016a22     0x9a    mv a0,s2
    0x84016a24     0x9c    ld ra,120(sp)         ; stack access
    0x84016a26     0x9e    ld s0,112(sp)         ; stack access
    0x84016a28     0xa0    ld s1,104(sp)         ; stack access
    0x84016a2a     0xa2    ld s2,96(sp)          ; stack access
    0x84016a2c     0xa4    ld s3,88(sp)          ; stack access
    0x84016a2e     0xa6    ld s4,80(sp)          ; stack access
    0x84016a30     0xa8    ld s5,72(sp)          ; stack access
    0x84016a32     0xaa    ld s6,64(sp)          ; stack access
    0x84016a34     0xac    ld s7,56(sp)          ; stack access
    0x84016a36     0xae    addi sp,sp,128
    0x84016a38     0xb0    ret
    0x84016a3a     0xb2    auipc a5,0x1
    0x84016a3e     0xb6    addi a5,a5,1478 # ffffffff84018000 <riscvKSASIDTable>
    0x84016a42     0xba    li a4,1
    0x84016a44     0xbc    sd a4,1680(a5)
    0x84016a48     0xc0    sd s6,1688(a5)
    0x84016a4c     0xc4    mv s2,s4
    0x84016a4e     0xc6    beqz s4,ffffffff84016a22 <handleInvocation+0x9a>
    0x84016a52     0xca    mv a0,s0
    0x84016a54     0xcc    jal ra,ffffffff8401445c <handleFault>
    0x84016a58     0xd0    li s2,0
    0x84016a5a     0xd2    j ffffffff84016a22 <handleInvocation+0x9a>
    0x84016a5c     0xd4    mv s2,s4
    0x84016a5e     0xd6    beqz s4,ffffffff84016a22 <handleInvocation+0x9a>
    0x84016a62     0xda    mv a0,s0
    0x84016a64     0xdc    jal ra,ffffffff8401445c <handleFault>
    0x84016a68     0xe0    mv s2,s7
    0x84016a6a     0xe2    j ffffffff84016a22 <handleInvocation+0x9a>
    0x84016a6c     0xe4    bnez s3,ffffffff840169f4 <handleInvocation+0x6c>
    0x84016a70     0xe8    li a1,4
    0x84016a72     0xea    j ffffffff840169f4 <handleInvocation+0x6c>
    0x84016a74     0xec    bnez s5,ffffffff84016a7c <handleInvocation+0xf4>
    0x84016a78     0xf0    mv s2,s5
    0x84016a7a     0xf2    j ffffffff84016a22 <handleInvocation+0x9a>
    0x84016a7c     0xf4    mv a0,s0
    0x84016a7e     0xf6    jal ra,ffffffff84015962 <replyFromKernel_error>
    0x84016a82     0xfa    j ffffffff84016a22 <handleInvocation+0x9a>
    0x84016a84     0xfc    bnez s5,ffffffff84016a92 <handleInvocation+0x10a>
    0x84016a88    0x100    li a1,1
    0x84016a8a    0x102    mv a0,s0
    0x84016a8c    0x104    jal ra,ffffffff840125f6 <setThreadState>
    0x84016a90    0x108    j ffffffff84016a22 <handleInvocation+0x9a>
    0x84016a92    0x10a    sd zero,72(s0)
    0x84016a96    0x10e    sd zero,80(s0)
    0x84016a9a    0x112    j ffffffff84016a88 <handleInvocation+0x100>
    0x84016a9c    0x114    mv s2,a0
    0x84016a9e    0x116    j ffffffff84016a22 <handleInvocation+0x9a>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
105 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleInvocation` has 169 nodes.

Section decodeTCBConfigure (261 of 269)
=======================================

Deriving specifications
-----------------------

Section `decodeTCBConfigure` consists of 183 instructions.


Stack analysis
---------------

72 stack accesses found. Annotated code for `decodeTCBConfigure`:

    0x84014a9c      0x0    addi sp,sp,-272
    0x84014a9e      0x2    sd ra,264(sp)         ; stack access
    0x84014aa0      0x4    sd s0,256(sp)         ; stack access
    0x84014aa2      0x6    sd s1,248(sp)         ; stack access
    0x84014aa4      0x8    sd s2,240(sp)         ; stack access
    0x84014aa6      0xa    sd s3,232(sp)         ; stack access
    0x84014aa8      0xc    sd s4,224(sp)         ; stack access
    0x84014aaa      0xe    sd s5,216(sp)         ; stack access
    0x84014aac     0x10    sd s6,208(sp)         ; stack access
    0x84014aae     0x12    sd s7,200(sp)         ; stack access
    0x84014ab0     0x14    sd s8,192(sp)         ; stack access
    0x84014ab2     0x16    sd s9,184(sp)         ; stack access
    0x84014ab4     0x18    sd s10,176(sp)        ; stack access
    0x84014ab6     0x1a    sd s11,168(sp)        ; stack access
    0x84014ab8     0x1c    sd a0,64(sp)          ; stack access
    0x84014aba     0x1e    sd a1,72(sp)          ; stack access
    0x84014abc     0x20    li a5,3
    0x84014abe     0x22    bgeu a5,a2,ffffffff84014c00 <decodeTCBConfigure+0x164>
    0x84014ac2     0x26    mv s0,a3
    0x84014ac4     0x28    auipc s1,0x4
    0x84014ac8     0x2c    ld s1,-564(s1) # ffffffff84018890 <current_extra_caps>
    0x84014acc     0x30    beqz s1,ffffffff84014c00 <decodeTCBConfigure+0x164>
    0x84014ad0     0x34    auipc s3,0x4
    0x84014ad4     0x38    ld s3,-568(s3) # ffffffff84018898 <current_extra_caps+0x8>
    0x84014ad8     0x3c    beqz s3,ffffffff84014c00 <decodeTCBConfigure+0x164>
    0x84014adc     0x40    auipc s2,0x4
    0x84014ae0     0x44    ld s2,-572(s2) # ffffffff840188a0 <current_extra_caps+0x10>
    0x84014ae4     0x48    beqz s2,ffffffff84014c00 <decodeTCBConfigure+0x164>
    0x84014ae8     0x4c    auipc a5,0x16
    0x84014aec     0x50    ld a5,-688(a5) # ffffffff8402a838 <ksCurThread>
    0x84014af0     0x54    ld s9,88(a5)
    0x84014af4     0x58    ld s7,96(a5)
    0x84014af8     0x5c    ld s8,104(a5)
    0x84014afc     0x60    ld s5,112(a5)
    0x84014b00     0x64    ld s4,0(s1)
    0x84014b04     0x68    sd s4,128(sp)         ; stack access
    0x84014b06     0x6a    ld a5,8(s1)
    0x84014b08     0x6c    sd a5,136(sp)         ; stack access
    0x84014b0a     0x6e    mv s6,s4
    0x84014b0c     0x70    ld a5,0(s3)
    0x84014b10     0x74    sd a5,112(sp)         ; stack access
    0x84014b12     0x76    ld a5,8(s3)
    0x84014b16     0x7a    sd a5,120(sp)         ; stack access
    0x84014b18     0x7c    ld a5,0(s2)
    0x84014b1c     0x80    sd a5,144(sp)         ; stack access
    0x84014b1e     0x82    ld a5,8(s2)
    0x84014b22     0x86    sd a5,152(sp)         ; stack access
    0x84014b24     0x88    bnez s5,ffffffff84014c2a <decodeTCBConfigure+0x18e>
    0x84014b28     0x8c    li s2,0
    0x84014b2a     0x8e    ld a5,64(sp)          ; stack access
    0x84014b2c     0x90    slli s10,a5,0x19
    0x84014b30     0x94    srli s10,s10,0x19
    0x84014b34     0x98    srli a5,a5,0x26
    0x84014b36     0x9a    andi a5,a5,1
    0x84014b38     0x9c    beqz a5,ffffffff84014b42 <decodeTCBConfigure+0xa6>
    0x84014b3a     0x9e    li a5,-1
    0x84014b3c     0xa0    slli a5,a5,0x27
    0x84014b3e     0xa2    or s10,s10,a5
    0x84014b42     0xa6    andi s11,s10,-1024
    0x84014b46     0xaa    mv a0,s11
    0x84014b48     0xac    jal ra,ffffffff840121d0 <slotCapLongRunningDelete>
    0x84014b4c     0xb0    bnez a0,ffffffff84014c4e <decodeTCBConfigure+0x1b2>
    0x84014b50     0xb4    addi a0,s11,32 # 1020 <KERNEL_OFFSET-0xfffffffeffffefe0>
    0x84014b54     0xb8    jal ra,ffffffff840121d0 <slotCapLongRunningDelete>
    0x84014b58     0xbc    bnez a0,ffffffff84014c4e <decodeTCBConfigure+0x1b2>
    0x84014b5c     0xc0    beqz s7,ffffffff84014b70 <decodeTCBConfigure+0xd4>
    0x84014b60     0xc4    mv a2,s4
    0x84014b62     0xc6    ld a3,136(sp)         ; stack access
    0x84014b64     0xc8    mv a1,s7
    0x84014b66     0xca    li a0,0
    0x84014b68     0xcc    jal ra,ffffffff8401220a <updateCapData>
    0x84014b6c     0xd0    sd a1,136(sp)         ; stack access
    0x84014b6e     0xd2    mv s6,a0
    0x84014b70     0xd4    mv a2,s6
    0x84014b72     0xd6    ld a3,136(sp)         ; stack access
    0x84014b74     0xd8    mv a1,s1
    0x84014b76     0xda    addi a0,sp,88
    0x84014b78     0xdc    jal ra,ffffffff840120a8 <deriveCap>
    0x84014b7c     0xe0    ld a0,88(sp)          ; stack access
    0x84014b7e     0xe2    bnez a0,ffffffff84014c0c <decodeTCBConfigure+0x170>
    0x84014b80     0xe4    ld s4,96(sp)          ; stack access
    0x84014b82     0xe6    ld a5,104(sp)         ; stack access
    0x84014b84     0xe8    sd a5,136(sp)         ; stack access
    0x84014b86     0xea    srli a4,s4,0x3b
    0x84014b8a     0xee    li a5,10
    0x84014b8c     0xf0    bne a4,a5,ffffffff84014c5c <decodeTCBConfigure+0x1c0>
    0x84014b90     0xf4    beqz s8,ffffffff84014ba4 <decodeTCBConfigure+0x108>
    0x84014b94     0xf8    ld a2,112(sp)         ; stack access
    0x84014b96     0xfa    ld a3,120(sp)         ; stack access
    0x84014b98     0xfc    mv a1,s8
    0x84014b9a     0xfe    li a0,0
    0x84014b9c    0x100    jal ra,ffffffff8401220a <updateCapData>
    0x84014ba0    0x104    sd a0,112(sp)         ; stack access
    0x84014ba2    0x106    sd a1,120(sp)         ; stack access
    0x84014ba4    0x108    ld a2,112(sp)         ; stack access
    0x84014ba6    0x10a    ld a3,120(sp)         ; stack access
    0x84014ba8    0x10c    mv a1,s3
    0x84014baa    0x10e    addi a0,sp,88
    0x84014bac    0x110    jal ra,ffffffff840120a8 <deriveCap>
    0x84014bb0    0x114    ld a0,88(sp)          ; stack access
    0x84014bb2    0x116    bnez a0,ffffffff84014c0c <decodeTCBConfigure+0x170>
    0x84014bb4    0x118    ld a0,96(sp)          ; stack access
    0x84014bb6    0x11a    sd a0,112(sp)         ; stack access
    0x84014bb8    0x11c    ld a1,104(sp)         ; stack access
    0x84014bba    0x11e    sd a1,120(sp)         ; stack access
    0x84014bbc    0x120    jal ra,ffffffff84010d06 <isValidVTableRoot>
    0x84014bc0    0x124    beqz a0,ffffffff84014c6a <decodeTCBConfigure+0x1ce>
    0x84014bc2    0x126    li a1,2
    0x84014bc4    0x128    auipc a0,0x16
    0x84014bc8    0x12c    ld a0,-908(a0) # ffffffff8402a838 <ksCurThread>
    0x84014bcc    0x130    jal ra,ffffffff840125f6 <setThreadState>
    0x84014bd0    0x134    li a5,6
    0x84014bd2    0x136    sd a5,56(sp)          ; stack access
    0x84014bd4    0x138    sd s2,48(sp)          ; stack access
    0x84014bd6    0x13a    ld a5,144(sp)         ; stack access
    0x84014bd8    0x13c    sd a5,32(sp)          ; stack access
    0x84014bda    0x13e    ld a5,152(sp)         ; stack access
    0x84014bdc    0x140    sd a5,40(sp)          ; stack access
    0x84014bde    0x142    sd s5,24(sp)          ; stack access
    0x84014be0    0x144    sd s3,16(sp)          ; stack access
    0x84014be2    0x146    ld a5,112(sp)         ; stack access
    0x84014be4    0x148    sd a5,0(sp)           ; stack access
    0x84014be6    0x14a    ld a5,120(sp)         ; stack access
    0x84014be8    0x14c    sd a5,8(sp)           ; stack access
    0x84014bea    0x14e    mv a7,s1
    0x84014bec    0x150    mv a5,s4
    0x84014bee    0x152    ld a6,136(sp)         ; stack access
    0x84014bf0    0x154    li a4,0
    0x84014bf2    0x156    li a3,0
    0x84014bf4    0x158    mv a2,s9
    0x84014bf6    0x15a    mv a1,s0
    0x84014bf8    0x15c    mv a0,s10
    0x84014bfa    0x15e    jal ra,ffffffff84014948 <invokeTCB_ThreadControl>
    0x84014bfe    0x162    j ffffffff84014c0c <decodeTCBConfigure+0x170>
    0x84014c00    0x164    li a5,7
    0x84014c02    0x166    auipc a4,0x4
    0x84014c06    0x16a    sd a5,-1330(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014c0a    0x16e    li a0,3
    0x84014c0c    0x170    ld ra,264(sp)         ; stack access
    0x84014c0e    0x172    ld s0,256(sp)         ; stack access
    0x84014c10    0x174    ld s1,248(sp)         ; stack access
    0x84014c12    0x176    ld s2,240(sp)         ; stack access
    0x84014c14    0x178    ld s3,232(sp)         ; stack access
    0x84014c16    0x17a    ld s4,224(sp)         ; stack access
    0x84014c18    0x17c    ld s5,216(sp)         ; stack access
    0x84014c1a    0x17e    ld s6,208(sp)         ; stack access
    0x84014c1c    0x180    ld s7,200(sp)         ; stack access
    0x84014c1e    0x182    ld s8,192(sp)         ; stack access
    0x84014c20    0x184    ld s9,184(sp)         ; stack access
    0x84014c22    0x186    ld s10,176(sp)        ; stack access
    0x84014c24    0x188    ld s11,168(sp)        ; stack access
    0x84014c26    0x18a    addi sp,sp,272
    0x84014c28    0x18c    ret
    0x84014c2a    0x18e    ld a2,144(sp)         ; stack access
    0x84014c2c    0x190    mv a3,a5
    0x84014c2e    0x192    mv a1,s2
    0x84014c30    0x194    addi a0,sp,88
    0x84014c32    0x196    jal ra,ffffffff840120a8 <deriveCap>
    0x84014c36    0x19a    ld a0,88(sp)          ; stack access
    0x84014c38    0x19c    bnez a0,ffffffff84014c0c <decodeTCBConfigure+0x170>
    0x84014c3a    0x19e    ld a1,96(sp)          ; stack access
    0x84014c3c    0x1a0    sd a1,144(sp)         ; stack access
    0x84014c3e    0x1a2    ld a2,104(sp)         ; stack access
    0x84014c40    0x1a4    sd a2,152(sp)         ; stack access
    0x84014c42    0x1a6    mv a0,s5
    0x84014c44    0x1a8    jal ra,ffffffff84010d1c <checkValidIPCBuffer>
    0x84014c48    0x1ac    beqz a0,ffffffff84014b2a <decodeTCBConfigure+0x8e>
    0x84014c4c    0x1b0    j ffffffff84014c0c <decodeTCBConfigure+0x170>
    0x84014c4e    0x1b2    li a5,3
    0x84014c50    0x1b4    auipc a4,0x4
    0x84014c54    0x1b8    sd a5,-1408(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014c58    0x1bc    li a0,3
    0x84014c5a    0x1be    j ffffffff84014c0c <decodeTCBConfigure+0x170>
    0x84014c5c    0x1c0    li a5,3
    0x84014c5e    0x1c2    auipc a4,0x4
    0x84014c62    0x1c6    sd a5,-1422(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014c66    0x1ca    li a0,3
    0x84014c68    0x1cc    j ffffffff84014c0c <decodeTCBConfigure+0x170>
    0x84014c6a    0x1ce    li a5,3
    0x84014c6c    0x1d0    auipc a4,0x4
    0x84014c70    0x1d4    sd a5,-1436(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84014c74    0x1d8    li a0,3
    0x84014c76    0x1da    j ffffffff84014c0c <decodeTCBConfigure+0x170>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
183 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBConfigure` has 318 nodes.

Section receiveIPC (262 of 269)
===============================

Deriving specifications
-----------------------

Section `receiveIPC` consists of 156 instructions.


Stack analysis
---------------

18 stack accesses found. Annotated code for `receiveIPC`:

    0x84014574      0x0    addi sp,sp,-96
    0x84014576      0x2    sd ra,88(sp)          ; stack access
    0x84014578      0x4    sd s0,80(sp)          ; stack access
    0x8401457a      0x6    sd s1,72(sp)          ; stack access
    0x8401457c      0x8    sd s2,64(sp)          ; stack access
    0x8401457e      0xa    sd s3,56(sp)          ; stack access
    0x84014580      0xc    sd s4,48(sp)          ; stack access
    0x84014582      0xe    sd s5,40(sp)          ; stack access
    0x84014584     0x10    mv s1,a0
    0x84014586     0x12    sd a1,0(sp)           ; stack access
    0x84014588     0x14    sd a2,8(sp)           ; stack access
    0x8401458a     0x16    mv s0,a1
    0x8401458c     0x18    slli a5,a1,0x19
    0x84014590     0x1c    srli a5,a5,0x19
    0x84014592     0x1e    srli a4,a1,0x26
    0x84014596     0x22    andi a4,a4,1
    0x84014598     0x24    beqz a4,ffffffff840145a0 <receiveIPC+0x2c>
    0x8401459a     0x26    li a4,-1
    0x8401459c     0x28    slli a4,a4,0x27
    0x8401459e     0x2a    or a5,a5,a4
    0x840145a0     0x2c    mv s2,a5
    0x840145a2     0x2e    ld a0,304(s1)
    0x840145a6     0x32    beqz a0,ffffffff840145b2 <receiveIPC+0x3e>
    0x840145a8     0x34    ld a4,0(a0)
    0x840145aa     0x36    andi a4,a4,3
    0x840145ac     0x38    li a2,2
    0x840145ae     0x3a    beq a4,a2,ffffffff840145d6 <receiveIPC+0x62>
    0x840145b2     0x3e    ld a4,0(s2)
    0x840145b6     0x42    andi a1,a4,3
    0x840145ba     0x46    li a2,1
    0x840145bc     0x48    beq a1,a2,ffffffff84014666 <receiveIPC+0xf2>
    0x840145c0     0x4c    andi a4,a4,1
    0x840145c2     0x4e    beqz a4,ffffffff840145de <receiveIPC+0x6a>
    0x840145c4     0x50    ld ra,88(sp)          ; stack access
    0x840145c6     0x52    ld s0,80(sp)          ; stack access
    0x840145c8     0x54    ld s1,72(sp)          ; stack access
    0x840145ca     0x56    ld s2,64(sp)          ; stack access
    0x840145cc     0x58    ld s3,56(sp)          ; stack access
    0x840145ce     0x5a    ld s4,48(sp)          ; stack access
    0x840145d0     0x5c    ld s5,40(sp)          ; stack access
    0x840145d2     0x5e    addi sp,sp,96
    0x840145d4     0x60    ret
    0x840145d6     0x62    mv a1,s1
    0x840145d8     0x64    jal ra,ffffffff84011bb0 <completeSignal>
    0x840145dc     0x68    j ffffffff840145c4 <receiveIPC+0x50>
    0x840145de     0x6a    beqz a3,ffffffff84014660 <receiveIPC+0xec>
    0x840145e0     0x6c    ld a4,280(s1)
    0x840145e4     0x70    srli a4,a4,0x27
    0x840145e6     0x72    slli a4,a4,0x27
    0x840145e8     0x74    lui a3,0xe0000
    0x840145ec     0x78    srli a3,a3,0x19
    0x840145ee     0x7a    and a5,a5,a3
    0x840145f0     0x7c    or a5,a5,a4
    0x840145f2     0x7e    ori a5,a5,3
    0x840145f6     0x82    sd a5,280(s1)
    0x840145fa     0x86    srli s0,s0,0x36
    0x840145fc     0x88    andi s0,s0,8
    0x840145fe     0x8a    ld a5,288(s1)
    0x84014602     0x8e    andi a5,a5,-9
    0x84014604     0x90    or s0,s0,a5
    0x84014606     0x92    sd s0,288(s1)
    0x8401460a     0x96    mv a0,s1
    0x8401460c     0x98    jal ra,ffffffff840125c2 <scheduleTCB>
    0x84014610     0x9c    ld a3,8(s2)
    0x84014614     0xa0    ld a4,0(s2)
    0x84014618     0xa4    lui a5,0xf8000
    0x8401461c     0xa8    srli a5,a5,0x19
    0x8401461e     0xaa    and a5,a5,a4
    0x84014620     0xac    srli a4,a4,0x26
    0x84014622     0xae    andi a4,a4,1
    0x84014624     0xb0    beqz a4,ffffffff8401462c <receiveIPC+0xb8>
    0x84014626     0xb2    li a4,-1
    0x84014628     0xb4    slli a4,a4,0x27
    0x8401462a     0xb6    or a5,a5,a4
    0x8401462c     0xb8    mv a2,a5
    0x8401462e     0xba    mv a4,s1
    0x84014630     0xbc    beqz a3,ffffffff84014638 <receiveIPC+0xc4>
    0x84014632     0xbe    mv a4,a3
    0x84014634     0xc0    sd s1,408(a5) # fffffffff8000198 <ki_end+0x73fd1198>
    0x84014638     0xc4    sd a2,416(s1)
    0x8401463c     0xc8    sd zero,408(s1)
    0x84014640     0xcc    ld a5,0(s2)
    0x84014644     0xd0    sd a4,8(s2)
    0x84014648     0xd4    lui a0,0xf8000
    0x8401464c     0xd8    srli a0,a0,0x19
    0x8401464e     0xda    and s1,s1,a0
    0x84014650     0xdc    srli a5,a5,0x27
    0x84014652     0xde    slli a5,a5,0x27
    0x84014654     0xe0    or s1,s1,a5
    0x84014656     0xe2    ori s1,s1,2
    0x8401465a     0xe6    sd s1,0(s2)
    0x8401465e     0xea    j ffffffff840145c4 <receiveIPC+0x50>
    0x84014660     0xec    sd zero,72(s1)
    0x84014664     0xf0    j ffffffff840145c4 <receiveIPC+0x50>
    0x84014666     0xf2    ld s3,8(s2)
    0x8401466a     0xf6    lui a2,0xf8000
    0x8401466e     0xfa    srli a2,a2,0x19
    0x84014670     0xfc    and a2,a2,a4
    0x84014672     0xfe    srli a4,a4,0x26
    0x84014674    0x100    andi a4,a4,1
    0x84014676    0x102    beqz a4,ffffffff8401467e <receiveIPC+0x10a>
    0x84014678    0x104    li a5,-1
    0x8401467a    0x106    slli a5,a5,0x27
    0x8401467c    0x108    or a2,a2,a5
    0x8401467e    0x10a    mv a1,s3
    0x84014680    0x10c    mv a0,s3
    0x84014682    0x10e    jal ra,ffffffff84012e56 <tcbEPDequeue>
    0x84014686    0x112    sd a0,16(sp)          ; stack access
    0x84014688    0x114    sd a1,24(sp)          ; stack access
    0x8401468a    0x116    sd a0,8(s2)
    0x8401468e    0x11a    ld a5,0(s2)
    0x84014692    0x11e    li a4,-1
    0x84014694    0x120    slli a4,a4,0x27
    0x84014696    0x122    addi a4,a4,3
    0x84014698    0x124    and a5,a5,a4
    0x8401469a    0x126    lui a4,0xf8000
    0x8401469e    0x12a    srli a4,a4,0x19
    0x840146a0    0x12c    and a1,a1,a4
    0x840146a2    0x12e    or a1,a1,a5
    0x840146a4    0x130    beqz a0,ffffffff840146ee <receiveIPC+0x17a>
    0x840146a6    0x132    sd a1,0(s2)
    0x840146aa    0x136    ld s4,288(s3)
    0x840146ae    0x13a    srli s5,s4,0x3
    0x840146b2    0x13e    mv a4,s1
    0x840146b4    0x140    andi a3,s5,1
    0x840146b8    0x144    ld a2,296(s3)
    0x840146bc    0x148    mv a1,s2
    0x840146be    0x14a    mv a0,s3
    0x840146c0    0x14c    jal ra,ffffffff840140c6 <doIPCTransfer>
    0x840146c4    0x150    ld a5,288(s3)
    0x840146c8    0x154    srli a5,a5,0x1
    0x840146ca    0x156    andi a5,a5,1
    0x840146cc    0x158    beqz a5,ffffffff84014700 <receiveIPC+0x18c>
    0x840146ce    0x15a    srli s4,s4,0x2
    0x840146d2    0x15e    or s4,s4,s5
    0x840146d6    0x162    andi s4,s4,1
    0x840146da    0x166    beqz s4,ffffffff840146f6 <receiveIPC+0x182>
    0x840146de    0x16a    srli a2,s0,0x39
    0x840146e2    0x16e    andi a2,a2,1
    0x840146e4    0x170    mv a1,s1
    0x840146e6    0x172    mv a0,s3
    0x840146e8    0x174    jal ra,ffffffff84013dea <setupCallerCap>
    0x840146ec    0x178    j ffffffff840145c4 <receiveIPC+0x50>
    0x840146ee    0x17a    andi a1,a1,-4
    0x840146f0    0x17c    sd a1,0(s2)
    0x840146f4    0x180    j ffffffff840146aa <receiveIPC+0x136>
    0x840146f6    0x182    li a1,0
    0x840146f8    0x184    mv a0,s3
    0x840146fa    0x186    jal ra,ffffffff840125f6 <setThreadState>
    0x840146fe    0x18a    j ffffffff840145c4 <receiveIPC+0x50>
    0x84014700    0x18c    li a1,1
    0x84014702    0x18e    mv a0,s3
    0x84014704    0x190    jal ra,ffffffff840125f6 <setThreadState>
    0x84014708    0x194    mv a0,s3
    0x8401470a    0x196    jal ra,ffffffff840128c0 <possibleSwitchTo>
    0x8401470e    0x19a    j ffffffff840145c4 <receiveIPC+0x50>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
156 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `receiveIPC` has 231 nodes.

Section finaliseCap (263 of 269)
================================

Deriving specifications
-----------------------

Section `finaliseCap` consists of 155 instructions.

XOR.....
RVC_TFFFTT___FT___FT..

Stack analysis
---------------

Section `finaliseCap` expects pointer to stack in a0.
44 stack accesses found. Annotated code for `finaliseCap`:

    0x84013110      0x0    addi sp,sp,-48
    0x84013112      0x2    sd ra,40(sp)          ; stack access
    0x84013114      0x4    sd s0,32(sp)          ; stack access
    0x84013116      0x6    sd s1,24(sp)          ; stack access
    0x84013118      0x8    sd s2,16(sp)          ; stack access
    0x8401311a      0xa    mv s0,a0
    0x8401311c      0xc    sd a1,0(sp)           ; stack access
    0x8401311e      0xe    sd a2,8(sp)           ; stack access
    0x84013120     0x10    mv s1,a1
    0x84013122     0x12    srli a5,a1,0x3b
    0x84013126     0x16    andi a2,a5,1
    0x8401312a     0x1a    bnez a2,ffffffff8401316a <finaliseCap+0x5a>
    0x8401312c     0x1c    li a2,6
    0x8401312e     0x1e    beq a5,a2,ffffffff8401319c <finaliseCap+0x8c>
    0x84013132     0x22    bltu a2,a5,ffffffff8401317e <finaliseCap+0x6e>
    0x84013136     0x26    beqz a5,ffffffff8401318a <finaliseCap+0x7a>
    0x84013138     0x28    li a2,4
    0x8401313a     0x2a    bne a5,a2,ffffffff840132ca <finaliseCap+0x1ba>
    0x8401313e     0x2e    beqz a3,ffffffff84013158 <finaliseCap+0x48>
    0x84013140     0x30    slli a0,a1,0x19
    0x84013144     0x34    srli a0,a0,0x19
    0x84013146     0x36    srli s1,a1,0x26
    0x8401314a     0x3a    andi s1,s1,1
    0x8401314c     0x3c    beqz s1,ffffffff84013154 <finaliseCap+0x44>
    0x8401314e     0x3e    li a5,-1
    0x84013150     0x40    slli a5,a5,0x27
    0x84013152     0x42    or a0,a0,a5
    0x84013154     0x44    jal ra,ffffffff84012904 <cancelAllIPC>
    0x84013158     0x48    sd zero,0(s0)         ; stack access
    0x8401315c     0x4c    sd zero,8(s0)         ; stack access
    0x84013160     0x50    sd zero,16(s0)        ; stack access
    0x84013164     0x54    sd zero,24(s0)        ; stack access
    0x84013168     0x58    j ffffffff84013170 <finaliseCap+0x60>
    0x8401316a     0x5a    ld a2,8(sp)           ; stack access
    0x8401316c     0x5c    jal ra,ffffffff84010f12 <Arch_finaliseCap>
    0x84013170     0x60    mv a0,s0
    0x84013172     0x62    ld ra,40(sp)          ; stack access
    0x84013174     0x64    ld s0,32(sp)          ; stack access
    0x84013176     0x66    ld s1,24(sp)          ; stack access
    0x84013178     0x68    ld s2,16(sp)          ; stack access
    0x8401317a     0x6a    addi sp,sp,48
    0x8401317c     0x6c    ret
    0x8401317e     0x6e    li a2,8
    0x84013180     0x70    beq a5,a2,ffffffff8401318a <finaliseCap+0x7a>
    0x84013184     0x74    li a2,20
    0x84013186     0x76    bne a5,a2,ffffffff840131d4 <finaliseCap+0xc4>
    0x8401318a     0x7a    sd zero,0(s0)         ; stack access
    0x8401318e     0x7e    sd zero,8(s0)         ; stack access
    0x84013192     0x82    sd zero,16(s0)        ; stack access
    0x84013196     0x86    sd zero,24(s0)        ; stack access
    0x8401319a     0x8a    j ffffffff84013170 <finaliseCap+0x60>
    0x8401319c     0x8c    beqz a3,ffffffff840131c2 <finaliseCap+0xb2>
    0x8401319e     0x8e    slli s2,a1,0x19
    0x840131a2     0x92    srli s2,s2,0x19
    0x840131a6     0x96    srli s1,a1,0x26
    0x840131aa     0x9a    andi s1,s1,1
    0x840131ac     0x9c    beqz s1,ffffffff840131b6 <finaliseCap+0xa6>
    0x840131ae     0x9e    li a5,-1
    0x840131b0     0xa0    slli a5,a5,0x27
    0x840131b2     0xa2    or s2,s2,a5
    0x840131b6     0xa6    mv a0,s2
    0x840131b8     0xa8    jal ra,ffffffff84011bd0 <unbindMaybeNotification>
    0x840131bc     0xac    mv a0,s2
    0x840131be     0xae    jal ra,ffffffff84012942 <cancelAllSignals>
    0x840131c2     0xb2    sd zero,0(s0)         ; stack access
    0x840131c6     0xb6    sd zero,8(s0)         ; stack access
    0x840131ca     0xba    sd zero,16(s0)        ; stack access
    0x840131ce     0xbe    sd zero,24(s0)        ; stack access
    0x840131d2     0xc2    j ffffffff84013170 <finaliseCap+0x60>
    0x840131d4     0xc4    bnez a4,ffffffff840132cc <finaliseCap+0x1bc>
    0x840131d8     0xc8    ld s2,8(sp)           ; stack access
    0x840131da     0xca    li a4,16
    0x840131dc     0xcc    beq a5,a4,ffffffff8401329c <finaliseCap+0x18c>
    0x840131e0     0xd0    bltu a4,a5,ffffffff84013234 <finaliseCap+0x124>
    0x840131e4     0xd4    li a4,10
    0x840131e6     0xd6    beq a5,a4,ffffffff8401324a <finaliseCap+0x13a>
    0x840131ea     0xda    li a4,12
    0x840131ec     0xdc    bne a5,a4,ffffffff8401329e <finaliseCap+0x18e>
    0x840131f0     0xe0    beqz a3,ffffffff8401329e <finaliseCap+0x18e>
    0x840131f2     0xe2    slli s2,a1,0x19
    0x840131f6     0xe6    srli s2,s2,0x19
    0x840131fa     0xea    srli a5,a1,0x26
    0x840131fe     0xee    andi a5,a5,1
    0x84013200     0xf0    beqz a5,ffffffff8401320a <finaliseCap+0xfa>
    0x84013202     0xf2    li a5,-1
    0x84013204     0xf4    slli a5,a5,0x27
    0x84013206     0xf6    or s2,s2,a5
    0x8401320a     0xfa    mv a0,s2
    0x8401320c     0xfc    jal ra,ffffffff84011bf6 <unbindNotification>
    0x84013210    0x100    mv a0,s2
    0x84013212    0x102    jal ra,ffffffff840130d8 <suspend>
    0x84013216    0x106    li a5,-7
    0x84013218    0x108    slli a5,a5,0x3c
    0x8401321a    0x10a    addi a5,a5,64 # ffffffffe0000040 <ki_end+0x5bfd1040>
    0x8401321e    0x10e    sd a5,0(s0)           ; stack access
    0x84013220    0x110    andi a5,s2,-1024
    0x84013224    0x114    xori a5,a5,5
    0x84013228    0x118    sd a5,8(s0)           ; stack access
    0x8401322a    0x11a    sd zero,16(s0)        ; stack access
    0x8401322e    0x11e    sd zero,24(s0)        ; stack access
    0x84013232    0x122    j ffffffff84013170 <finaliseCap+0x60>
    0x84013234    0x124    li a4,18
    0x84013236    0x126    bne a5,a4,ffffffff8401329e <finaliseCap+0x18e>
    0x8401323a    0x12a    sd a1,0(s0)           ; stack access
    0x8401323c    0x12c    sd s2,8(a0) # fffffffff8000008 <ki_end+0x73fd1008>  ; stack access
    0x84013240    0x130    sd zero,16(a0)        ; stack access
    0x84013244    0x134    sd zero,24(a0)        ; stack access
    0x84013248    0x138    j ffffffff84013170 <finaliseCap+0x60>
    0x8401324a    0x13a    beqz a3,ffffffff8401329e <finaliseCap+0x18e>
    0x8401324c    0x13c    srli a3,a1,0x2f
    0x84013250    0x140    andi a0,a3,63
    0x84013254    0x144    mv a3,a0
    0x84013256    0x146    li a2,1
    0x84013258    0x148    sll a1,a2,a0
    0x8401325c    0x14c    slli s1,s1,0x1
    0x8401325e    0x14e    lui a5,0xfc000
    0x84013262    0x152    srli a5,a5,0x19
    0x84013264    0x154    and a4,s1,a5
    0x84013268    0x158    slli a2,a2,0x26
    0x8401326a    0x15a    and s1,s1,a2
    0x8401326c    0x15c    beqz s1,ffffffff84013274 <finaliseCap+0x164>
    0x8401326e    0x15e    li a5,-1
    0x84013270    0x160    slli a5,a5,0x27
    0x84013272    0x162    or a4,a4,a5
    0x84013274    0x164    li a5,-7
    0x84013276    0x166    slli a5,a5,0x3c
    0x84013278    0x168    or a5,a5,a0
    0x8401327a    0x16a    sd a5,0(s0)           ; stack access
    0x8401327c    0x16c    addiw a3,a3,1
    0x8401327e    0x16e    li a5,-1
    0x84013280    0x170    sll a5,a5,a3
    0x84013284    0x174    not a5,a5
    0x84013288    0x178    xor a3,a1,a4
    0x8401328c    0x17c    and a5,a5,a3
    0x8401328e    0x17e    xor a5,a5,a4
    0x84013290    0x180    sd a5,8(s0)           ; stack access
    0x84013292    0x182    sd zero,16(s0)        ; stack access
    0x84013296    0x186    sd zero,24(s0)        ; stack access
    0x8401329a    0x18a    j ffffffff84013170 <finaliseCap+0x60>
    0x8401329c    0x18c    bnez a3,ffffffff840132b0 <finaliseCap+0x1a0>
    0x8401329e    0x18e    sd zero,0(s0)         ; stack access
    0x840132a2    0x192    sd zero,8(s0)         ; stack access
    0x840132a6    0x196    sd zero,16(s0)        ; stack access
    0x840132aa    0x19a    sd zero,24(s0)        ; stack access
    0x840132ae    0x19e    j ffffffff84013170 <finaliseCap+0x60>
    0x840132b0    0x1a0    slli a0,s2,0x34
    0x840132b4    0x1a4    srli a0,a0,0x34
    0x840132b6    0x1a6    jal ra,ffffffff84013b12 <deletingIRQHandler>
    0x840132ba    0x1aa    sd zero,0(s0)         ; stack access
    0x840132be    0x1ae    sd zero,8(s0)         ; stack access
    0x840132c2    0x1b2    sd s1,16(s0)          ; stack access
    0x840132c4    0x1b4    sd s2,24(s0)          ; stack access
    0x840132c8    0x1b8    j ffffffff84013170 <finaliseCap+0x60>
    0x840132ca    0x1ba    beqz a4,ffffffff8401329e <finaliseCap+0x18e>
    0x840132cc    0x1bc    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
155 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `finaliseCap` has 254 nodes.

Section handleSyscall (264 of 269)
==================================

Deriving specifications
-----------------------

Section `handleSyscall` consists of 109 instructions.


Stack analysis
---------------

4 stack accesses found. Annotated code for `handleSyscall`:

    0x84016aa0      0x0    addi sp,sp,-16
    0x84016aa2      0x2    sd ra,8(sp)           ; stack access
    0x84016aa4      0x4    sd s0,0(sp)           ; stack access
    0x84016aa6      0x6    li a5,-4
    0x84016aa8      0x8    beq a0,a5,ffffffff84016b66 <handleSyscall+0xc6>
    0x84016aac      0xc    bltu a5,a0,ffffffff84016ae0 <handleSyscall+0x40>
    0x84016ab0     0x10    li a5,-6
    0x84016ab2     0x12    beq a0,a5,ffffffff84016be4 <handleSyscall+0x144>
    0x84016ab6     0x16    bltu a5,a0,ffffffff84016bcc <handleSyscall+0x12c>
    0x84016aba     0x1a    li a5,-8
    0x84016abc     0x1c    beq a0,a5,ffffffff84016bf6 <handleSyscall+0x156>
    0x84016ac0     0x20    li a5,-7
    0x84016ac2     0x22    bne a0,a5,ffffffff84016bfe <handleSyscall+0x15e>
    0x84016ac6     0x26    auipc s0,0x14
    0x84016aca     0x2a    addi s0,s0,-654 # ffffffff8402a838 <ksCurThread>
    0x84016ace     0x2e    ld a0,0(s0)
    0x84016ad0     0x30    jal ra,ffffffff84012a98 <tcbSchedDequeue>
    0x84016ad4     0x34    ld a0,0(s0)
    0x84016ad6     0x36    jal ra,ffffffff840129ae <tcbSchedAppend>
    0x84016ada     0x3a    jal ra,ffffffff84012590 <rescheduleRequired>
    0x84016ade     0x3e    j ffffffff84016bd2 <handleSyscall+0x132>
    0x84016ae0     0x40    li a5,-2
    0x84016ae2     0x42    beq a0,a5,ffffffff84016bea <handleSyscall+0x14a>
    0x84016ae6     0x46    li a5,-1
    0x84016ae8     0x48    bne a0,a5,ffffffff84016b18 <handleSyscall+0x78>
    0x84016aec     0x4c    li a1,1
    0x84016aee     0x4e    li a0,1
    0x84016af0     0x50    jal ra,ffffffff84016988 <handleInvocation>
    0x84016af4     0x54    beqz a0,ffffffff84016bd2 <handleSyscall+0x132>
    0x84016af8     0x58    auipc a4,0x14
    0x84016afc     0x5c    lw a4,-688(a4) # ffffffff8402a848 <active_irq>
    0x84016b00     0x60    addiw a3,a4,-1
    0x84016b04     0x64    li a5,53
    0x84016b08     0x68    bltu a5,a3,ffffffff84016bae <handleSyscall+0x10e>
    0x84016b0c     0x6c    slli a0,a4,0x20
    0x84016b10     0x70    srli a0,a0,0x20
    0x84016b12     0x72    jal ra,ffffffff84013c64 <handleInterrupt>
    0x84016b16     0x76    j ffffffff84016bd2 <handleSyscall+0x132>
    0x84016b18     0x78    li a5,-3
    0x84016b1a     0x7a    bne a0,a5,ffffffff84016bfe <handleSyscall+0x15e>
    0x84016b1e     0x7e    li a1,1
    0x84016b20     0x80    li a0,0
    0x84016b22     0x82    jal ra,ffffffff84016988 <handleInvocation>
    0x84016b26     0x86    beqz a0,ffffffff84016bd2 <handleSyscall+0x132>
    0x84016b28     0x88    auipc a4,0x14
    0x84016b2c     0x8c    lw a4,-736(a4) # ffffffff8402a848 <active_irq>
    0x84016b30     0x90    addiw a3,a4,-1
    0x84016b34     0x94    li a5,53
    0x84016b38     0x98    bltu a5,a3,ffffffff84016b48 <handleSyscall+0xa8>
    0x84016b3c     0x9c    slli a0,a4,0x20
    0x84016b40     0xa0    srli a0,a0,0x20
    0x84016b42     0xa2    jal ra,ffffffff84013c64 <handleInterrupt>
    0x84016b46     0xa6    j ffffffff84016bd2 <handleSyscall+0x132>
    0x84016b48     0xa8    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84016b4c     0xac    sext.w a4,a0
    0x84016b50     0xb0    auipc a5,0x14
    0x84016b54     0xb4    sw a0,-776(a5) # ffffffff8402a848 <active_irq>
    0x84016b58     0xb8    addiw a5,a0,-1
    0x84016b5c     0xbc    li a3,53
    0x84016b60     0xc0    bltu a3,a5,ffffffff84016bd2 <handleSyscall+0x132>
    0x84016b64     0xc4    j ffffffff84016b3c <handleSyscall+0x9c>
    0x84016b66     0xc6    li a1,0
    0x84016b68     0xc8    li a0,0
    0x84016b6a     0xca    jal ra,ffffffff84016988 <handleInvocation>
    0x84016b6e     0xce    beqz a0,ffffffff84016bd2 <handleSyscall+0x132>
    0x84016b70     0xd0    auipc a4,0x14
    0x84016b74     0xd4    lw a4,-808(a4) # ffffffff8402a848 <active_irq>
    0x84016b78     0xd8    addiw a3,a4,-1
    0x84016b7c     0xdc    li a5,53
    0x84016b80     0xe0    bltu a5,a3,ffffffff84016b90 <handleSyscall+0xf0>
    0x84016b84     0xe4    slli a0,a4,0x20
    0x84016b88     0xe8    srli a0,a0,0x20
    0x84016b8a     0xea    jal ra,ffffffff84013c64 <handleInterrupt>
    0x84016b8e     0xee    j ffffffff84016bd2 <handleSyscall+0x132>
    0x84016b90     0xf0    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84016b94     0xf4    sext.w a4,a0
    0x84016b98     0xf8    auipc a5,0x14
    0x84016b9c     0xfc    sw a0,-848(a5) # ffffffff8402a848 <active_irq>
    0x84016ba0    0x100    addiw a5,a0,-1
    0x84016ba4    0x104    li a3,53
    0x84016ba8    0x108    bltu a3,a5,ffffffff84016bd2 <handleSyscall+0x132>
    0x84016bac    0x10c    j ffffffff84016b84 <handleSyscall+0xe4>
    0x84016bae    0x10e    jal ra,ffffffff8401015e <getNewActiveIRQ>
    0x84016bb2    0x112    sext.w a4,a0
    0x84016bb6    0x116    auipc a5,0x14
    0x84016bba    0x11a    sw a0,-878(a5) # ffffffff8402a848 <active_irq>
    0x84016bbe    0x11e    addiw a5,a0,-1
    0x84016bc2    0x122    li a3,53
    0x84016bc6    0x126    bltu a3,a5,ffffffff84016bd2 <handleSyscall+0x132>
    0x84016bca    0x12a    j ffffffff84016b0c <handleSyscall+0x6c>
    0x84016bcc    0x12c    li a0,1
    0x84016bce    0x12e    jal ra,ffffffff84014710 <handleRecv>
    0x84016bd2    0x132    jal ra,ffffffff84012c84 <schedule>
    0x84016bd6    0x136    jal ra,ffffffff840126e8 <activateThread>
    0x84016bda    0x13a    li a0,0
    0x84016bdc    0x13c    ld ra,8(sp)           ; stack access
    0x84016bde    0x13e    ld s0,0(sp)           ; stack access
    0x84016be0    0x140    addi sp,sp,16
    0x84016be2    0x142    ret
    0x84016be4    0x144    jal ra,ffffffff840141a0 <handleReply>
    0x84016be8    0x148    j ffffffff84016bd2 <handleSyscall+0x132>
    0x84016bea    0x14a    jal ra,ffffffff840141a0 <handleReply>
    0x84016bee    0x14e    li a0,1
    0x84016bf0    0x150    jal ra,ffffffff84014710 <handleRecv>
    0x84016bf4    0x154    j ffffffff84016bd2 <handleSyscall+0x132>
    0x84016bf6    0x156    li a0,0
    0x84016bf8    0x158    jal ra,ffffffff84014710 <handleRecv>
    0x84016bfc    0x15c    j ffffffff84016bd2 <handleSyscall+0x132>
    0x84016bfe    0x15e    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
109 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `handleSyscall` has 178 nodes.

Section decodeInvocation (265 of 269)
=====================================

Deriving specifications
-----------------------

Section `decodeInvocation` consists of 183 instructions.


Stack analysis
---------------

28 stack accesses found. Annotated code for `decodeInvocation`:

    0x84016794      0x0    addi sp,sp,-96
    0x84016796      0x2    sd ra,88(sp)          ; stack access
    0x84016798      0x4    sd s0,80(sp)          ; stack access
    0x8401679a      0x6    sd s1,72(sp)          ; stack access
    0x8401679c      0x8    sd s2,64(sp)          ; stack access
    0x8401679e      0xa    sd s3,56(sp)          ; stack access
    0x840167a0      0xc    sd s4,48(sp)          ; stack access
    0x840167a2      0xe    sd s5,40(sp)          ; stack access
    0x840167a4     0x10    mv s3,a3
    0x840167a6     0x12    sd a4,0(sp)           ; stack access
    0x840167a8     0x14    sd a5,8(sp)           ; stack access
    0x840167aa     0x16    mv s1,a4
    0x840167ac     0x18    mv s2,a5
    0x840167ae     0x1a    srli t1,a4,0x3b
    0x840167b2     0x1e    andi s0,t1,1
    0x840167b6     0x22    bnez s0,ffffffff84016804 <decodeInvocation+0x70>
    0x840167b8     0x24    mv s4,a6
    0x840167ba     0x26    mv s5,a7
    0x840167bc     0x28    li a5,10
    0x840167be     0x2a    beq t1,a5,ffffffff84016968 <decodeInvocation+0x1d4>
    0x840167c2     0x2e    bltu a5,t1,ffffffff8401683c <decodeInvocation+0xa8>
    0x840167c6     0x32    li a5,4
    0x840167c8     0x34    beq t1,a5,ffffffff840168a0 <decodeInvocation+0x10c>
    0x840167cc     0x38    bgeu a5,t1,ffffffff84016820 <decodeInvocation+0x8c>
    0x840167d0     0x3c    li a5,6
    0x840167d2     0x3e    beq t1,a5,ffffffff840168fa <decodeInvocation+0x166>
    0x840167d6     0x42    li a5,8
    0x840167d8     0x44    bne t1,a5,ffffffff84016984 <decodeInvocation+0x1f0>
    0x840167dc     0x48    andi a5,a4,1
    0x840167e0     0x4c    bnez a5,ffffffff84016940 <decodeInvocation+0x1ac>
    0x840167e4     0x50    li a1,2
    0x840167e6     0x52    auipc a0,0x14
    0x840167ea     0x56    ld a0,82(a0) # ffffffff8402a838 <ksCurThread>
    0x840167ee     0x5a    jal ra,ffffffff840125f6 <setThreadState>
    0x840167f2     0x5e    srli s1,s1,0x1
    0x840167f4     0x60    andi a2,s1,1
    0x840167f8     0x64    mv a1,s3
    0x840167fa     0x66    mv a0,s2
    0x840167fc     0x68    jal ra,ffffffff840141de <performInvocation_Reply>
    0x84016800     0x6c    mv s0,a0
    0x84016802     0x6e    j ffffffff8401680c <decodeInvocation+0x78>
    0x84016804     0x70    ld a6,96(sp)          ; stack access
    0x84016806     0x72    jal ra,ffffffff84015abe <decodeRISCVMMUInvocation>
    0x8401680a     0x76    mv s0,a0
    0x8401680c     0x78    mv a0,s0
    0x8401680e     0x7a    ld ra,88(sp)          ; stack access
    0x84016810     0x7c    ld s0,80(sp)          ; stack access
    0x84016812     0x7e    ld s1,72(sp)          ; stack access
    0x84016814     0x80    ld s2,64(sp)          ; stack access
    0x84016816     0x82    ld s3,56(sp)          ; stack access
    0x84016818     0x84    ld s4,48(sp)          ; stack access
    0x8401681a     0x86    ld s5,40(sp)          ; stack access
    0x8401681c     0x88    addi sp,sp,96
    0x8401681e     0x8a    ret
    0x84016820     0x8c    beqz t1,ffffffff84016874 <decodeInvocation+0xe0>
    0x84016824     0x90    li a5,2
    0x84016826     0x92    bne t1,a5,ffffffff84016984 <decodeInvocation+0x1f0>
    0x8401682a     0x96    ld a6,96(sp)          ; stack access
    0x8401682c     0x98    mv a5,a7
    0x8401682e     0x9a    ld a3,0(sp)           ; stack access
    0x84016830     0x9c    ld a4,8(sp)           ; stack access
    0x84016832     0x9e    mv a2,s3
    0x84016834     0xa0    jal ra,ffffffff8401649a <decodeUntypedInvocation>
    0x84016838     0xa4    mv s0,a0
    0x8401683a     0xa6    j ffffffff8401680c <decodeInvocation+0x78>
    0x8401683c     0xa8    li a5,16
    0x8401683e     0xaa    beq t1,a5,ffffffff84016976 <decodeInvocation+0x1e2>
    0x84016842     0xae    bgeu a5,t1,ffffffff8401685c <decodeInvocation+0xc8>
    0x84016846     0xb2    li a5,18
    0x84016848     0xb4    beq t1,a5,ffffffff8401688a <decodeInvocation+0xf6>
    0x8401684c     0xb8    li a5,20
    0x8401684e     0xba    bne t1,a5,ffffffff84016984 <decodeInvocation+0x1f0>
    0x84016852     0xbe    ld a2,96(sp)          ; stack access
    0x84016854     0xc0    jal ra,ffffffff84014872 <decodeDomainInvocation>
    0x84016858     0xc4    mv s0,a0
    0x8401685a     0xc6    j ffffffff8401680c <decodeInvocation+0x78>
    0x8401685c     0xc8    li a5,12
    0x8401685e     0xca    beq t1,a5,ffffffff84016956 <decodeInvocation+0x1c2>
    0x84016862     0xce    li a5,14
    0x84016864     0xd0    bne t1,a5,ffffffff84016984 <decodeInvocation+0x1f0>
    0x84016868     0xd4    ld a3,96(sp)          ; stack access
    0x8401686a     0xd6    mv a2,s3
    0x8401686c     0xd8    jal ra,ffffffff84012724 <decodeIRQControlInvocation>
    0x84016870     0xdc    mv s0,a0
    0x84016872     0xde    j ffffffff8401680c <decodeInvocation+0x78>
    0x84016874     0xe0    auipc a5,0x1
    0x84016878     0xe4    addi a5,a5,1932 # ffffffff84018000 <riscvKSASIDTable>
    0x8401687c     0xe8    li a4,2
    0x8401687e     0xea    sd a4,1744(a5)
    0x84016882     0xee    sd zero,1704(a5)
    0x84016886     0xf2    li s0,3
    0x84016888     0xf4    j ffffffff8401680c <decodeInvocation+0x78>
    0x8401688a     0xf6    auipc a5,0x1
    0x8401688e     0xfa    addi a5,a5,1910 # ffffffff84018000 <riscvKSASIDTable>
    0x84016892     0xfe    li a4,2
    0x84016894    0x100    sd a4,1744(a5)
    0x84016898    0x104    sd zero,1704(a5)
    0x8401689c    0x108    li s0,3
    0x8401689e    0x10a    j ffffffff8401680c <decodeInvocation+0x78>
    0x840168a0    0x10c    srli a5,a4,0x37
    0x840168a4    0x110    andi a5,a5,1
    0x840168a6    0x112    beqz a5,ffffffff840168e4 <decodeInvocation+0x150>
    0x840168a8    0x114    li a1,2
    0x840168aa    0x116    auipc a0,0x14
    0x840168ae    0x11a    ld a0,-114(a0) # ffffffff8402a838 <ksCurThread>
    0x840168b2    0x11e    jal ra,ffffffff840125f6 <setThreadState>
    0x840168b6    0x122    slli a0,s1,0x19
    0x840168ba    0x126    srli a0,a0,0x19
    0x840168bc    0x128    srli a5,s1,0x26
    0x840168c0    0x12c    andi a5,a5,1
    0x840168c2    0x12e    beqz a5,ffffffff840168ca <decodeInvocation+0x136>
    0x840168c4    0x130    li a5,-1
    0x840168c6    0x132    slli a5,a5,0x27
    0x840168c8    0x134    or a0,a0,a5
    0x840168ca    0x136    srli a3,s1,0x3a
    0x840168ce    0x13a    srli a2,s1,0x39
    0x840168d2    0x13e    mv a5,s5
    0x840168d4    0x140    mv a4,s4
    0x840168d6    0x142    andi a3,a3,1
    0x840168d8    0x144    andi a2,a2,1
    0x840168da    0x146    mv a1,s2
    0x840168dc    0x148    jal ra,ffffffff8401454e <performInvocation_Endpoint>
    0x840168e0    0x14c    mv s0,a0
    0x840168e2    0x14e    j ffffffff8401680c <decodeInvocation+0x78>
    0x840168e4    0x150    auipc a5,0x1
    0x840168e8    0x154    addi a5,a5,1820 # ffffffff84018000 <riscvKSASIDTable>
    0x840168ec    0x158    li a4,2
    0x840168ee    0x15a    sd a4,1744(a5)
    0x840168f2    0x15e    sd zero,1704(a5)
    0x840168f6    0x162    li s0,3
    0x840168f8    0x164    j ffffffff8401680c <decodeInvocation+0x78>
    0x840168fa    0x166    srli a5,a4,0x39
    0x840168fe    0x16a    andi a5,a5,1
    0x84016900    0x16c    beqz a5,ffffffff8401692a <decodeInvocation+0x196>
    0x84016902    0x16e    li a1,2
    0x84016904    0x170    auipc a0,0x14
    0x84016908    0x174    ld a0,-204(a0) # ffffffff8402a838 <ksCurThread>
    0x8401690c    0x178    jal ra,ffffffff840125f6 <setThreadState>
    0x84016910    0x17c    slli a0,s1,0x19
    0x84016914    0x180    srli a0,a0,0x19
    0x84016916    0x182    srli s1,s1,0x26
    0x84016918    0x184    andi s1,s1,1
    0x8401691a    0x186    beqz s1,ffffffff84016922 <decodeInvocation+0x18e>
    0x8401691c    0x188    li a5,-1
    0x8401691e    0x18a    slli a5,a5,0x27
    0x84016920    0x18c    or a0,a0,a5
    0x84016922    0x18e    mv a1,s2
    0x84016924    0x190    jal ra,ffffffff84013b6c <sendSignal>
    0x84016928    0x194    j ffffffff8401680c <decodeInvocation+0x78>
    0x8401692a    0x196    auipc a5,0x1
    0x8401692e    0x19a    addi a5,a5,1750 # ffffffff84018000 <riscvKSASIDTable>
    0x84016932    0x19e    li a4,2
    0x84016934    0x1a0    sd a4,1744(a5)
    0x84016938    0x1a4    sd zero,1704(a5)
    0x8401693c    0x1a8    li s0,3
    0x8401693e    0x1aa    j ffffffff8401680c <decodeInvocation+0x78>
    0x84016940    0x1ac    auipc a5,0x1
    0x84016944    0x1b0    addi a5,a5,1728 # ffffffff84018000 <riscvKSASIDTable>
    0x84016948    0x1b4    li a4,2
    0x8401694a    0x1b6    sd a4,1744(a5)
    0x8401694e    0x1ba    sd zero,1704(a5)
    0x84016952    0x1be    li s0,3
    0x84016954    0x1c0    j ffffffff8401680c <decodeInvocation+0x78>
    0x84016956    0x1c2    ld a6,96(sp)          ; stack access
    0x84016958    0x1c4    mv a5,a7
    0x8401695a    0x1c6    mv a4,a3
    0x8401695c    0x1c8    ld a2,0(sp)           ; stack access
    0x8401695e    0x1ca    ld a3,8(sp)           ; stack access
    0x84016960    0x1cc    jal ra,ffffffff840156ee <decodeTCBInvocation>
    0x84016964    0x1d0    mv s0,a0
    0x84016966    0x1d2    j ffffffff8401680c <decodeInvocation+0x78>
    0x84016968    0x1d4    ld a4,96(sp)          ; stack access
    0x8401696a    0x1d6    ld a2,0(sp)           ; stack access
    0x8401696c    0x1d8    ld a3,8(sp)           ; stack access
    0x8401696e    0x1da    jal ra,ffffffff84013532 <decodeCNodeInvocation>
    0x84016972    0x1de    mv s0,a0
    0x84016974    0x1e0    j ffffffff8401680c <decodeInvocation+0x78>
    0x84016976    0x1e2    slli a1,s2,0x34
    0x8401697a    0x1e6    srli a1,a1,0x34
    0x8401697c    0x1e8    jal ra,ffffffff84013a48 <decodeIRQHandlerInvocation>
    0x84016980    0x1ec    mv s0,a0
    0x84016982    0x1ee    j ffffffff8401680c <decodeInvocation+0x78>
    0x84016984    0x1f0    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
183 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeInvocation` has 279 nodes.

Section decodeRISCVMMUInvocation (266 of 269)
=============================================

Deriving specifications
-----------------------

Section `decodeRISCVMMUInvocation` consists of 756 instructions.

Skipping 12000073 sfence.vma

Skipping 12000073 sfence.vma


Stack analysis
---------------

56 stack accesses found. Annotated code for `decodeRISCVMMUInvocation`:

    0x84015abe      0x0    addi sp,sp,-208
    0x84015ac0      0x2    sd ra,200(sp)         ; stack access
    0x84015ac2      0x4    sd s0,192(sp)         ; stack access
    0x84015ac4      0x6    sd s1,184(sp)         ; stack access
    0x84015ac6      0x8    sd s2,176(sp)         ; stack access
    0x84015ac8      0xa    sd s3,168(sp)         ; stack access
    0x84015aca      0xc    sd s4,160(sp)         ; stack access
    0x84015acc      0xe    sd s5,152(sp)         ; stack access
    0x84015ace     0x10    sd s6,144(sp)         ; stack access
    0x84015ad0     0x12    sd s7,136(sp)         ; stack access
    0x84015ad2     0x14    sd s8,128(sp)         ; stack access
    0x84015ad4     0x16    sd s9,120(sp)         ; stack access
    0x84015ad6     0x18    sd s10,112(sp)        ; stack access
    0x84015ad8     0x1a    sd s11,104(sp)        ; stack access
    0x84015ada     0x1c    sd a4,0(sp)           ; stack access
    0x84015adc     0x1e    sd a5,8(sp)           ; stack access
    0x84015ade     0x20    srli s0,a4,0x3b
    0x84015ae2     0x24    li a5,11
    0x84015ae4     0x26    beq s0,a5,ffffffff840160e4 <decodeRISCVMMUInvocation+0x626>
    0x84015ae8     0x2a    mv s2,a3
    0x84015aea     0x2c    mv s1,a4
    0x84015aec     0x2e    bltu a5,s0,ffffffff84015c28 <decodeRISCVMMUInvocation+0x16a>
    0x84015af0     0x32    li a5,1
    0x84015af2     0x34    beq s0,a5,ffffffff84015da6 <decodeRISCVMMUInvocation+0x2e8>
    0x84015af6     0x38    li a5,3
    0x84015af8     0x3a    bne s0,a5,ffffffff84016372 <decodeRISCVMMUInvocation+0x8b4>
    0x84015afc     0x3e    ld a5,0(sp)           ; stack access
    0x84015afe     0x40    sd a5,16(sp)          ; stack access
    0x84015b00     0x42    ld s3,8(sp)           ; stack access
    0x84015b02     0x44    sd s3,24(sp)          ; stack access
    0x84015b04     0x46    li a5,31
    0x84015b06     0x48    beq a0,a5,ffffffff84015ca2 <decodeRISCVMMUInvocation+0x1e4>
    0x84015b0a     0x4c    li a5,30
    0x84015b0c     0x4e    bne a0,a5,ffffffff84015d12 <decodeRISCVMMUInvocation+0x254>
    0x84015b10     0x52    li a5,1
    0x84015b12     0x54    bgeu a5,a1,ffffffff84015d1e <decodeRISCVMMUInvocation+0x260>
    0x84015b16     0x58    auipc a4,0x3
    0x84015b1a     0x5c    ld a4,-646(a4) # ffffffff84018890 <current_extra_caps>
    0x84015b1e     0x60    beqz a4,ffffffff84015d1e <decodeRISCVMMUInvocation+0x260>
    0x84015b22     0x64    srli a5,s1,0x27
    0x84015b26     0x68    andi a5,a5,1
    0x84015b28     0x6a    bnez a5,ffffffff84015d2a <decodeRISCVMMUInvocation+0x26c>
    0x84015b2c     0x6e    ld a5,0(a4)
    0x84015b2e     0x70    srli s5,a5,0x3b
    0x84015b32     0x74    li a3,3
    0x84015b34     0x76    bne s5,a3,ffffffff84015d3e <decodeRISCVMMUInvocation+0x280>
    0x84015b38     0x7a    srli a5,a5,0x27
    0x84015b3a     0x7c    andi a5,a5,1
    0x84015b3c     0x7e    beqz a5,ffffffff84015d3e <decodeRISCVMMUInvocation+0x280>
    0x84015b40     0x82    ld s9,8(a4)
    0x84015b44     0x86    srli a5,s9,0x9
    0x84015b48     0x8a    slli a0,a5,0x19
    0x84015b4c     0x8e    srli a0,a0,0x19
    0x84015b4e     0x90    srli a5,a5,0x26
    0x84015b50     0x92    andi a5,a5,1
    0x84015b52     0x94    beqz a5,ffffffff84015b5a <decodeRISCVMMUInvocation+0x9c>
    0x84015b54     0x96    li a5,-1
    0x84015b56     0x98    slli a5,a5,0x27
    0x84015b58     0x9a    or a0,a0,a5
    0x84015b5a     0x9c    auipc a5,0x15
    0x84015b5e     0xa0    ld a5,-802(a5) # ffffffff8402a838 <ksCurThread>
    0x84015b62     0xa4    ld s8,88(a5)
    0x84015b66     0xa8    mv s0,a0
    0x84015b68     0xaa    srli a0,s9,0x30
    0x84015b6c     0xae    lui a5,0xfefff
    0x84015b70     0xb2    slli a5,a5,0xe
    0x84015b72     0xb4    srli a5,a5,0x1a
    0x84015b74     0xb6    bltu a5,s8,ffffffff84015d54 <decodeRISCVMMUInvocation+0x296>
    0x84015b78     0xba    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015b7c     0xbe    sd a0,64(sp)          ; stack access
    0x84015b7e     0xc0    sd a1,72(sp)          ; stack access
    0x84015b80     0xc2    bnez a0,ffffffff84015d6a <decodeRISCVMMUInvocation+0x2ac>
    0x84015b84     0xc6    ld a5,72(sp)          ; stack access
    0x84015b86     0xc8    bne s0,a5,ffffffff84015d80 <decodeRISCVMMUInvocation+0x2c2>
    0x84015b8a     0xcc    mv a1,s8
    0x84015b8c     0xce    mv a0,s0
    0x84015b8e     0xd0    jal ra,ffffffff84010982 <lookupPTSlot>
    0x84015b92     0xd4    mv s6,a0
    0x84015b94     0xd6    mv s4,a1
    0x84015b96     0xd8    sd a0,48(sp)          ; stack access
    0x84015b98     0xda    sd a1,56(sp)          ; stack access
    0x84015b9a     0xdc    li a5,12
    0x84015b9c     0xde    beq a1,a5,ffffffff84015d98 <decodeRISCVMMUInvocation+0x2da>
    0x84015ba0     0xe2    ld s0,0(a0)
    0x84015ba2     0xe4    andi s0,s0,1
    0x84015ba4     0xe6    bnez s0,ffffffff84015d98 <decodeRISCVMMUInvocation+0x2da>
    0x84015ba8     0xea    srli a5,s3,0x9
    0x84015bac     0xee    slli s5,a5,0x19
    0x84015bb0     0xf2    srli s5,s5,0x19
    0x84015bb4     0xf6    srli a5,a5,0x26
    0x84015bb6     0xf8    andi a5,a5,1
    0x84015bb8     0xfa    beqz a5,ffffffff84015bc2 <decodeRISCVMMUInvocation+0x104>
    0x84015bba     0xfc    li a5,-1
    0x84015bbc     0xfe    slli a5,a5,0x27
    0x84015bbe    0x100    or s5,s5,a5
    0x84015bc2    0x104    li s7,-1
    0x84015bc4    0x106    srli a5,s7,0x10
    0x84015bc8    0x10a    and s3,s3,a5
    0x84015bcc    0x10e    slli a5,s7,0x30
    0x84015bd0    0x112    and s9,s9,a5
    0x84015bd4    0x116    or s3,s3,s9
    0x84015bd8    0x11a    li a1,2
    0x84015bda    0x11c    auipc a0,0x15
    0x84015bde    0x120    ld a0,-930(a0) # ffffffff8402a838 <ksCurThread>
    0x84015be2    0x124    jal ra,ffffffff840125f6 <setThreadState>
    0x84015be6    0x128    li a4,1
    0x84015be8    0x12a    sll a5,a4,s4
    0x84015bec    0x12e    neg a5,a5
    0x84015bf0    0x132    and a5,a5,s8
    0x84015bf4    0x136    slli s7,s7,0x28
    0x84015bf6    0x138    and s1,s1,s7
    0x84015bfa    0x13c    or a5,a5,s1
    0x84015bfc    0x13e    slli a3,a4,0x27
    0x84015c00    0x142    or a5,a5,a3
    0x84015c02    0x144    sd a5,0(s2)
    0x84015c06    0x148    sd s3,8(s2)
    0x84015c0a    0x14c    slli a5,a4,0x26
    0x84015c0e    0x150    add a5,a5,s5
    0x84015c10    0x152    srli a5,a5,0x2
    0x84015c12    0x154    lui a4,0xfff00
    0x84015c16    0x158    srli a4,a4,0xa
    0x84015c18    0x15a    and a5,a5,a4
    0x84015c1a    0x15c    ori a5,a5,193
    0x84015c1e    0x160    sd a5,0(s6)
    0x84015c22    0x164    sfence.vma
    0x84015c26    0x168    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015c28    0x16a    li a5,13
    0x84015c2a    0x16c    bne s0,a5,ffffffff84016372 <decodeRISCVMMUInvocation+0x8b4>
    0x84015c2e    0x170    li a5,36
    0x84015c32    0x174    bne a0,a5,ffffffff84016282 <decodeRISCVMMUInvocation+0x7c4>
    0x84015c36    0x178    auipc s3,0x3
    0x84015c3a    0x17c    ld s3,-934(s3) # ffffffff84018890 <current_extra_caps>
    0x84015c3e    0x180    beqz s3,ffffffff84016290 <decodeRISCVMMUInvocation+0x7d2>
    0x84015c42    0x184    ld s2,0(s3)
    0x84015c46    0x188    srli s0,s2,0x3b
    0x84015c4a    0x18c    li a5,3
    0x84015c4c    0x18e    bne s0,a5,ffffffff8401629e <decodeRISCVMMUInvocation+0x7e0>
    0x84015c50    0x192    srli s2,s2,0x27
    0x84015c54    0x196    andi s2,s2,1
    0x84015c58    0x19a    bnez s2,ffffffff8401629e <decodeRISCVMMUInvocation+0x7e0>
    0x84015c5c    0x19e    srli a2,a4,0x2b
    0x84015c60    0x1a2    slli a2,a2,0x30
    0x84015c62    0x1a4    srli a2,a2,0x30
    0x84015c64    0x1a6    srli a5,a2,0x9
    0x84015c68    0x1aa    slli a4,a5,0x3
    0x84015c6c    0x1ae    auipc a5,0x2
    0x84015c70    0x1b2    addi a5,a5,916 # ffffffff84018000 <riscvKSASIDTable>
    0x84015c74    0x1b6    add a5,a5,a4
    0x84015c76    0x1b8    ld s4,0(a5)
    0x84015c7a    0x1bc    beqz s4,ffffffff840162b6 <decodeRISCVMMUInvocation+0x7f8>
    0x84015c7e    0x1c0    slli s1,s1,0x2
    0x84015c80    0x1c2    lui a5,0xf8000
    0x84015c84    0x1c6    srli a5,a5,0x19
    0x84015c86    0x1c8    and a5,a5,s1
    0x84015c88    0x1ca    srli s1,s1,0x26
    0x84015c8a    0x1cc    andi s1,s1,1
    0x84015c8c    0x1ce    beqz s1,ffffffff84015c94 <decodeRISCVMMUInvocation+0x1d6>
    0x84015c8e    0x1d0    li a4,-1
    0x84015c90    0x1d2    slli a4,a4,0x27
    0x84015c92    0x1d4    or a5,a5,a4
    0x84015c94    0x1d6    bne s4,a5,ffffffff840162d2 <decodeRISCVMMUInvocation+0x814>
    0x84015c98    0x1da    mv a4,s4
    0x84015c9a    0x1dc    mv a5,s2
    0x84015c9c    0x1de    li a1,512
    0x84015ca0    0x1e2    j ffffffff840162ee <decodeRISCVMMUInvocation+0x830>
    0x84015ca2    0x1e4    mv a0,a3
    0x84015ca4    0x1e6    jal ra,ffffffff8401217a <isFinalCapability>
    0x84015ca8    0x1ea    beqz a0,ffffffff84015cf4 <decodeRISCVMMUInvocation+0x236>
    0x84015caa    0x1ec    srli a5,s1,0x27
    0x84015cae    0x1f0    andi a5,a5,1
    0x84015cb0    0x1f2    beqz a5,ffffffff84015cd8 <decodeRISCVMMUInvocation+0x21a>
    0x84015cb2    0x1f4    srli a0,s3,0x30
    0x84015cb6    0x1f8    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015cba    0x1fc    sd a0,64(sp)          ; stack access
    0x84015cbc    0x1fe    sd a1,72(sp)          ; stack access
    0x84015cbe    0x200    srli a5,s3,0x9
    0x84015cc2    0x204    slli a4,a5,0x19
    0x84015cc6    0x208    srli a4,a4,0x19
    0x84015cc8    0x20a    srli a5,a5,0x26
    0x84015cca    0x20c    andi a5,a5,1
    0x84015ccc    0x20e    beqz a5,ffffffff84015cd4 <decodeRISCVMMUInvocation+0x216>
    0x84015cce    0x210    li a5,-1
    0x84015cd0    0x212    slli a5,a5,0x27
    0x84015cd2    0x214    or a4,a4,a5
    0x84015cd4    0x216    ld a5,64(sp)          ; stack access
    0x84015cd6    0x218    beqz a5,ffffffff84015d00 <decodeRISCVMMUInvocation+0x242>
    0x84015cd8    0x21a    li a1,2
    0x84015cda    0x21c    auipc a0,0x15
    0x84015cde    0x220    ld a0,-1186(a0) # ffffffff8402a838 <ksCurThread>
    0x84015ce2    0x224    jal ra,ffffffff840125f6 <setThreadState>
    0x84015ce6    0x228    mv a2,s2
    0x84015ce8    0x22a    mv a0,s1
    0x84015cea    0x22c    mv a1,s3
    0x84015cec    0x22e    jal ra,ffffffff84015a52 <performPageTableInvocationUnmap>
    0x84015cf0    0x232    mv s0,a0
    0x84015cf2    0x234    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015cf4    0x236    li a5,9
    0x84015cf6    0x238    auipc a4,0x3
    0x84015cfa    0x23c    sd a5,-1574(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015cfe    0x240    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d00    0x242    ld a5,72(sp)          ; stack access
    0x84015d02    0x244    bne a5,a4,ffffffff84015cd8 <decodeRISCVMMUInvocation+0x21a>
    0x84015d06    0x248    li a5,9
    0x84015d08    0x24a    auipc a4,0x3
    0x84015d0c    0x24e    sd a5,-1592(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015d10    0x252    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d12    0x254    li a5,3
    0x84015d14    0x256    auipc a4,0x3
    0x84015d18    0x25a    sd a5,-1604(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015d1c    0x25e    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d1e    0x260    li a5,7
    0x84015d20    0x262    auipc a4,0x3
    0x84015d24    0x266    sd a5,-1616(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015d28    0x26a    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d2a    0x26c    auipc a5,0x2
    0x84015d2e    0x270    addi a5,a5,726 # ffffffff84018000 <riscvKSASIDTable>
    0x84015d32    0x274    li a4,2
    0x84015d34    0x276    sd a4,1744(a5)
    0x84015d38    0x27a    sd zero,1704(a5)
    0x84015d3c    0x27e    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d3e    0x280    auipc a5,0x2
    0x84015d42    0x284    addi a5,a5,706 # ffffffff84018000 <riscvKSASIDTable>
    0x84015d46    0x288    li a4,2
    0x84015d48    0x28a    sd a4,1744(a5)
    0x84015d4c    0x28e    li a4,1
    0x84015d4e    0x290    sd a4,1704(a5)
    0x84015d52    0x294    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d54    0x296    auipc a5,0x2
    0x84015d58    0x29a    addi a5,a5,684 # ffffffff84018000 <riscvKSASIDTable>
    0x84015d5c    0x29e    li a4,1
    0x84015d5e    0x2a0    sd a4,1744(a5)
    0x84015d62    0x2a4    sd zero,1696(a5)
    0x84015d66    0x2a8    mv s0,s5
    0x84015d68    0x2aa    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d6a    0x2ac    auipc a5,0x2
    0x84015d6e    0x2b0    addi a5,a5,662 # ffffffff84018000 <riscvKSASIDTable>
    0x84015d72    0x2b4    li a4,6
    0x84015d74    0x2b6    sd a4,1744(a5)
    0x84015d78    0x2ba    sd zero,1736(a5)
    0x84015d7c    0x2be    mv s0,s5
    0x84015d7e    0x2c0    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d80    0x2c2    auipc a5,0x2
    0x84015d84    0x2c6    addi a5,a5,640 # ffffffff84018000 <riscvKSASIDTable>
    0x84015d88    0x2ca    li a4,2
    0x84015d8a    0x2cc    sd a4,1744(a5)
    0x84015d8e    0x2d0    li a4,1
    0x84015d90    0x2d2    sd a4,1704(a5)
    0x84015d94    0x2d6    mv s0,s5
    0x84015d96    0x2d8    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015d98    0x2da    li a5,8
    0x84015d9a    0x2dc    auipc a4,0x3
    0x84015d9e    0x2e0    sd a5,-1738(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015da2    0x2e4    mv s0,s5
    0x84015da4    0x2e6    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015da6    0x2e8    ld a5,0(sp)           ; stack access
    0x84015da8    0x2ea    sd a5,32(sp)          ; stack access
    0x84015daa    0x2ec    ld s4,8(sp)           ; stack access
    0x84015dac    0x2ee    sd s4,40(sp)          ; stack access
    0x84015dae    0x2f0    li a5,33
    0x84015db2    0x2f4    beq a0,a5,ffffffff8401608c <decodeRISCVMMUInvocation+0x5ce>
    0x84015db6    0x2f8    li a5,34
    0x84015dba    0x2fc    beq a0,a5,ffffffff840160a8 <decodeRISCVMMUInvocation+0x5ea>
    0x84015dbe    0x300    li a5,32
    0x84015dc2    0x304    beq a0,a5,ffffffff84015dd4 <decodeRISCVMMUInvocation+0x316>
    0x84015dc6    0x308    li a5,3
    0x84015dc8    0x30a    auipc a4,0x3
    0x84015dcc    0x30e    sd a5,-1784(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015dd0    0x312    li s0,3
    0x84015dd2    0x314    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015dd4    0x316    li a5,2
    0x84015dd6    0x318    bgeu a5,a1,ffffffff84015e56 <decodeRISCVMMUInvocation+0x398>
    0x84015dda    0x31c    auipc a4,0x3
    0x84015dde    0x320    ld a4,-1354(a4) # ffffffff84018890 <current_extra_caps>
    0x84015de2    0x324    beqz a4,ffffffff84015e56 <decodeRISCVMMUInvocation+0x398>
    0x84015de4    0x326    ld a5,0(a4)
    0x84015de6    0x328    srli s8,a5,0x3b
    0x84015dea    0x32c    li a3,3
    0x84015dec    0x32e    bne s8,a3,ffffffff84015e64 <decodeRISCVMMUInvocation+0x3a6>
    0x84015df0    0x332    srli a5,a5,0x27
    0x84015df2    0x334    andi a5,a5,1
    0x84015df4    0x336    beqz a5,ffffffff84015e64 <decodeRISCVMMUInvocation+0x3a6>
    0x84015df6    0x338    ld s7,8(a4)
    0x84015dfa    0x33c    srli a5,s7,0x9
    0x84015dfe    0x340    slli a0,a5,0x19
    0x84015e02    0x344    srli a0,a0,0x19
    0x84015e04    0x346    srli a5,a5,0x26
    0x84015e06    0x348    andi a5,a5,1
    0x84015e08    0x34a    beqz a5,ffffffff84015e10 <decodeRISCVMMUInvocation+0x352>
    0x84015e0a    0x34c    li a5,-1
    0x84015e0c    0x34e    slli a5,a5,0x27
    0x84015e0e    0x350    or a0,a0,a5
    0x84015e10    0x352    auipc a5,0x15
    0x84015e14    0x356    ld a5,-1496(a5) # ffffffff8402a838 <ksCurThread>
    0x84015e18    0x35a    ld s5,88(a5)
    0x84015e1c    0x35e    ld s10,96(a5)
    0x84015e20    0x362    ld s6,104(a5)
    0x84015e24    0x366    mv s3,a0
    0x84015e26    0x368    srli s11,s7,0x30
    0x84015e2a    0x36c    mv a0,s11
    0x84015e2c    0x36e    jal ra,ffffffff840100fe <findVSpaceForASID>
    0x84015e30    0x372    sd a0,48(sp)          ; stack access
    0x84015e32    0x374    sd a1,56(sp)          ; stack access
    0x84015e34    0x376    bnez a0,ffffffff84015e7c <decodeRISCVMMUInvocation+0x3be>
    0x84015e36    0x378    ld a5,56(sp)          ; stack access
    0x84015e38    0x37a    bne s3,a5,ffffffff84015e92 <decodeRISCVMMUInvocation+0x3d4>
    0x84015e3c    0x37e    srli a5,s1,0x39
    0x84015e40    0x382    andi a5,a5,3
    0x84015e42    0x384    li a4,1
    0x84015e44    0x386    beq a5,a4,ffffffff84015eaa <decodeRISCVMMUInvocation+0x3ec>
    0x84015e48    0x38a    li a4,2
    0x84015e4a    0x38c    beq a5,a4,ffffffff84015eae <decodeRISCVMMUInvocation+0x3f0>
    0x84015e4e    0x390    beqz a5,ffffffff84015fac <decodeRISCVMMUInvocation+0x4ee>
    0x84015e52    0x394    jal ra,ffffffff840103da <halt>
    0x84015e56    0x398    li a5,7
    0x84015e58    0x39a    auipc a4,0x3
    0x84015e5c    0x39e    sd a5,-1928(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015e60    0x3a2    li s0,3
    0x84015e62    0x3a4    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015e64    0x3a6    auipc a5,0x2
    0x84015e68    0x3aa    addi a5,a5,412 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e6c    0x3ae    li a4,2
    0x84015e6e    0x3b0    sd a4,1744(a5)
    0x84015e72    0x3b4    li a4,1
    0x84015e74    0x3b6    sd a4,1704(a5)
    0x84015e78    0x3ba    li s0,3
    0x84015e7a    0x3bc    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015e7c    0x3be    auipc a5,0x2
    0x84015e80    0x3c2    addi a5,a5,388 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e84    0x3c6    li a4,6
    0x84015e86    0x3c8    sd a4,1744(a5)
    0x84015e8a    0x3cc    sd zero,1736(a5)
    0x84015e8e    0x3d0    mv s0,s8
    0x84015e90    0x3d2    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015e92    0x3d4    auipc a5,0x2
    0x84015e96    0x3d8    addi a5,a5,366 # ffffffff84018000 <riscvKSASIDTable>
    0x84015e9a    0x3dc    li a4,2
    0x84015e9c    0x3de    sd a4,1744(a5)
    0x84015ea0    0x3e2    li a4,1
    0x84015ea2    0x3e4    sd a4,1704(a5)
    0x84015ea6    0x3e8    mv s0,s8
    0x84015ea8    0x3ea    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015eaa    0x3ec    li s9,21
    0x84015eac    0x3ee    j ffffffff84015eb0 <decodeRISCVMMUInvocation+0x3f2>
    0x84015eae    0x3f0    li s9,30
    0x84015eb0    0x3f2    sext.w a3,s9
    0x84015eb4    0x3f6    addi a4,s5,-1
    0x84015eb8    0x3fa    li a5,1
    0x84015eba    0x3fc    sll a5,a5,s9
    0x84015ebe    0x400    add a4,a4,a5
    0x84015ec0    0x402    lui a5,0xfefff
    0x84015ec4    0x406    slli a5,a5,0xe
    0x84015ec6    0x408    srli a5,a5,0x1a
    0x84015ec8    0x40a    bltu a5,a4,ffffffff84015fb0 <decodeRISCVMMUInvocation+0x4f2>
    0x84015ecc    0x40e    li s0,-1
    0x84015ece    0x410    sll s0,s0,a3
    0x84015ed2    0x414    not s0,s0
    0x84015ed6    0x418    and s0,s0,s5
    0x84015eda    0x41c    bnez s0,ffffffff84015fc6 <decodeRISCVMMUInvocation+0x508>
    0x84015edc    0x41e    mv a1,s5
    0x84015ede    0x420    mv a0,s3
    0x84015ee0    0x422    jal ra,ffffffff84010982 <lookupPTSlot>
    0x84015ee4    0x426    mv s3,a0
    0x84015ee6    0x428    sd a0,64(sp)          ; stack access
    0x84015ee8    0x42a    sd a1,72(sp)          ; stack access
    0x84015eea    0x42c    bne a1,s9,ffffffff84015fd4 <decodeRISCVMMUInvocation+0x516>
    0x84015eee    0x430    srli a5,s4,0x30
    0x84015ef2    0x434    bnez a5,ffffffff84015ffe <decodeRISCVMMUInvocation+0x540>
    0x84015ef6    0x438    ld a5,0(a0)
    0x84015ef8    0x43a    andi a5,a5,1
    0x84015efa    0x43c    bnez a5,ffffffff84016076 <decodeRISCVMMUInvocation+0x5b8>
    0x84015efe    0x440    srli a0,s1,0x37
    0x84015f02    0x444    mv a1,s10
    0x84015f04    0x446    andi a0,a0,3
    0x84015f06    0x448    jal ra,ffffffff84010d62 <maskVMRights>
    0x84015f0a    0x44c    srli a4,s4,0x9
    0x84015f0e    0x450    slli a5,a4,0x19
    0x84015f12    0x454    srli a5,a5,0x19
    0x84015f14    0x456    srli a4,a4,0x26
    0x84015f16    0x458    andi a4,a4,1
    0x84015f18    0x45a    beqz a4,ffffffff84015f20 <decodeRISCVMMUInvocation+0x462>
    0x84015f1a    0x45c    li a4,-1
    0x84015f1c    0x45e    slli a4,a4,0x27
    0x84015f1e    0x460    or a5,a5,a4
    0x84015f20    0x462    li a1,1
    0x84015f22    0x464    slli a4,a1,0x26
    0x84015f26    0x468    add a5,a5,a4
    0x84015f28    0x46a    li a4,-1
    0x84015f2a    0x46c    srli a3,a4,0x10
    0x84015f2e    0x470    and s4,s4,a3
    0x84015f32    0x474    slli a3,a4,0x30
    0x84015f36    0x478    and s7,s7,a3
    0x84015f3a    0x47c    or s4,s4,s7
    0x84015f3e    0x480    slli a3,a4,0x27
    0x84015f42    0x484    and s1,s1,a3
    0x84015f44    0x486    srli a4,a4,0x19
    0x84015f46    0x488    and s5,s5,a4
    0x84015f4a    0x48c    or s5,s1,s5
    0x84015f4e    0x490    andi s6,s6,1
    0x84015f52    0x494    xori a2,s6,1
    0x84015f56    0x498    addi a3,a0,-3
    0x84015f5a    0x49c    seqz a3,a3
    0x84015f5e    0x4a0    addi a4,a0,-1
    0x84015f62    0x4a4    snez a4,a4
    0x84015f66    0x4a8    beq a0,a1,ffffffff84016084 <decodeRISCVMMUInvocation+0x5c6>
    0x84015f6a    0x4ac    srli s1,a5,0x2
    0x84015f6e    0x4b0    lui a5,0xfff00
    0x84015f72    0x4b4    srli a5,a5,0xa
    0x84015f74    0x4b6    and s1,s1,a5
    0x84015f76    0x4b8    slli a5,a2,0x3
    0x84015f7a    0x4bc    or s1,s1,a5
    0x84015f7c    0x4be    slli a5,a3,0x2
    0x84015f80    0x4c2    or s1,s1,a5
    0x84015f82    0x4c4    slli a5,a4,0x1
    0x84015f86    0x4c8    or s1,s1,a5
    0x84015f88    0x4ca    ori s1,s1,209
    0x84015f8c    0x4ce    li a1,2
    0x84015f8e    0x4d0    auipc a0,0x15
    0x84015f92    0x4d4    ld a0,-1878(a0) # ffffffff8402a838 <ksCurThread>
    0x84015f96    0x4d8    jal ra,ffffffff840125f6 <setThreadState>
    0x84015f9a    0x4dc    sd s5,0(s2)
    0x84015f9e    0x4e0    sd s4,8(s2)
    0x84015fa2    0x4e4    sd s1,0(s3)
    0x84015fa6    0x4e8    sfence.vma
    0x84015faa    0x4ec    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015fac    0x4ee    li s9,12
    0x84015fae    0x4f0    j ffffffff84015eb0 <decodeRISCVMMUInvocation+0x3f2>
    0x84015fb0    0x4f2    auipc a5,0x2
    0x84015fb4    0x4f6    addi a5,a5,80 # ffffffff84018000 <riscvKSASIDTable>
    0x84015fb8    0x4fa    li a4,1
    0x84015fba    0x4fc    sd a4,1744(a5)
    0x84015fbe    0x500    sd zero,1696(a5)
    0x84015fc2    0x504    mv s0,s8
    0x84015fc4    0x506    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015fc6    0x508    li a5,5
    0x84015fc8    0x50a    auipc a4,0x2
    0x84015fcc    0x50e    sd a5,1800(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015fd0    0x512    mv s0,s8
    0x84015fd2    0x514    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015fd4    0x516    auipc a4,0x2
    0x84015fd8    0x51a    addi a4,a4,44 # ffffffff84018000 <riscvKSASIDTable>
    0x84015fdc    0x51e    slli a5,a1,0x2
    0x84015fe0    0x522    andi a5,a5,508
    0x84015fe4    0x526    ori a5,a5,1
    0x84015fe8    0x52a    sd a5,1024(a4)
    0x84015fec    0x52e    sd zero,1032(a4)
    0x84015ff0    0x532    li a5,6
    0x84015ff2    0x534    sd a5,1744(a4)
    0x84015ff6    0x538    sd zero,1736(a4)
    0x84015ffa    0x53c    mv s0,s8
    0x84015ffc    0x53e    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84015ffe    0x540    beq s11,a5,ffffffff8401601a <decodeRISCVMMUInvocation+0x55c>
    0x84016002    0x544    auipc a5,0x2
    0x84016006    0x548    addi a5,a5,-2 # ffffffff84018000 <riscvKSASIDTable>
    0x8401600a    0x54c    li a4,2
    0x8401600c    0x54e    sd a4,1744(a5)
    0x84016010    0x552    li a4,1
    0x84016012    0x554    sd a4,1704(a5)
    0x84016016    0x558    mv s0,s8
    0x84016018    0x55a    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x8401601a    0x55c    slli a5,s1,0x19
    0x8401601e    0x560    srli a5,a5,0x19
    0x84016020    0x562    srli a4,s1,0x26
    0x84016024    0x566    andi a4,a4,1
    0x84016026    0x568    beqz a4,ffffffff8401602e <decodeRISCVMMUInvocation+0x570>
    0x84016028    0x56a    li a4,-1
    0x8401602a    0x56c    slli a4,a4,0x27
    0x8401602c    0x56e    or a5,a5,a4
    0x8401602e    0x570    bne s5,a5,ffffffff84016060 <decodeRISCVMMUInvocation+0x5a2>
    0x84016032    0x574    ld a4,0(s3)
    0x84016036    0x578    andi a5,a4,1
    0x8401603a    0x57c    beqz a5,ffffffff84015efe <decodeRISCVMMUInvocation+0x440>
    0x8401603e    0x580    srli a5,a4,0x1
    0x84016042    0x584    srli a3,a4,0x2
    0x84016046    0x588    or a5,a5,a3
    0x84016048    0x58a    srli a4,a4,0x3
    0x8401604a    0x58c    or a5,a5,a4
    0x8401604c    0x58e    andi a5,a5,1
    0x8401604e    0x590    bnez a5,ffffffff84015efe <decodeRISCVMMUInvocation+0x440>
    0x84016052    0x594    li a5,8
    0x84016054    0x596    auipc a4,0x2
    0x84016058    0x59a    sd a5,1660(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401605c    0x59e    mv s0,s8
    0x8401605e    0x5a0    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84016060    0x5a2    auipc a5,0x2
    0x84016064    0x5a6    addi a5,a5,-96 # ffffffff84018000 <riscvKSASIDTable>
    0x84016068    0x5aa    li a4,1
    0x8401606a    0x5ac    sd a4,1744(a5)
    0x8401606e    0x5b0    sd zero,1696(a5)
    0x84016072    0x5b4    mv s0,s8
    0x84016074    0x5b6    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84016076    0x5b8    li a5,8
    0x84016078    0x5ba    auipc a4,0x2
    0x8401607c    0x5be    sd a5,1624(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016080    0x5c2    mv s0,s8
    0x84016082    0x5c4    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84016084    0x5c6    beqz s6,ffffffff84015f6a <decodeRISCVMMUInvocation+0x4ac>
    0x84016088    0x5ca    mv s1,s0
    0x8401608a    0x5cc    j ffffffff84015f8c <decodeRISCVMMUInvocation+0x4ce>
    0x8401608c    0x5ce    li a1,2
    0x8401608e    0x5d0    auipc a0,0x14
    0x84016092    0x5d4    ld a0,1962(a0) # ffffffff8402a838 <ksCurThread>
    0x84016096    0x5d8    jal ra,ffffffff840125f6 <setThreadState>
    0x8401609a    0x5dc    mv a2,s2
    0x8401609c    0x5de    mv a0,s1
    0x8401609e    0x5e0    mv a1,s4
    0x840160a0    0x5e2    jal ra,ffffffff84010dba <performPageInvocationUnmap>
    0x840160a4    0x5e6    mv s0,a0
    0x840160a6    0x5e8    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840160a8    0x5ea    li a1,2
    0x840160aa    0x5ec    auipc a0,0x14
    0x840160ae    0x5f0    ld a0,1934(a0) # ffffffff8402a838 <ksCurThread>
    0x840160b2    0x5f4    jal ra,ffffffff840125f6 <setThreadState>
    0x840160b6    0x5f8    srli a5,s4,0x9
    0x840160ba    0x5fc    slli a4,a5,0x19
    0x840160be    0x600    srli a4,a4,0x19
    0x840160c0    0x602    srli a5,a5,0x26
    0x840160c2    0x604    andi a5,a5,1
    0x840160c4    0x606    beqz a5,ffffffff840160cc <decodeRISCVMMUInvocation+0x60e>
    0x840160c6    0x608    li a5,-1
    0x840160c8    0x60a    slli a5,a5,0x27
    0x840160ca    0x60c    or a4,a4,a5
    0x840160cc    0x60e    auipc a5,0x14
    0x840160d0    0x612    ld a5,1900(a5) # ffffffff8402a838 <ksCurThread>
    0x840160d4    0x616    li a3,1
    0x840160d6    0x618    slli a2,a3,0x26
    0x840160da    0x61c    add a4,a4,a2
    0x840160dc    0x61e    sd a4,88(a5)
    0x840160de    0x620    sd a3,80(a5)
    0x840160e0    0x622    li s0,0
    0x840160e2    0x624    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840160e4    0x626    li a5,35
    0x840160e8    0x62a    beq a0,a5,ffffffff84016118 <decodeRISCVMMUInvocation+0x65a>
    0x840160ec    0x62e    li a5,3
    0x840160ee    0x630    auipc a4,0x2
    0x840160f2    0x634    sd a5,1506(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840160f6    0x638    li s0,3
    0x840160f8    0x63a    mv a0,s0
    0x840160fa    0x63c    ld ra,200(sp)         ; stack access
    0x840160fc    0x63e    ld s0,192(sp)         ; stack access
    0x840160fe    0x640    ld s1,184(sp)         ; stack access
    0x84016100    0x642    ld s2,176(sp)         ; stack access
    0x84016102    0x644    ld s3,168(sp)         ; stack access
    0x84016104    0x646    ld s4,160(sp)         ; stack access
    0x84016106    0x648    ld s5,152(sp)         ; stack access
    0x84016108    0x64a    ld s6,144(sp)         ; stack access
    0x8401610a    0x64c    ld s7,136(sp)         ; stack access
    0x8401610c    0x64e    ld s8,128(sp)         ; stack access
    0x8401610e    0x650    ld s9,120(sp)         ; stack access
    0x84016110    0x652    ld s10,112(sp)        ; stack access
    0x84016112    0x654    ld s11,104(sp)        ; stack access
    0x84016114    0x656    addi sp,sp,208
    0x84016116    0x658    ret
    0x84016118    0x65a    li a5,1
    0x8401611a    0x65c    bgeu a5,a1,ffffffff8401617c <decodeRISCVMMUInvocation+0x6be>
    0x8401611e    0x660    auipc s2,0x2
    0x84016122    0x664    ld s2,1906(s2) # ffffffff84018890 <current_extra_caps>
    0x84016126    0x668    beqz s2,ffffffff8401617c <decodeRISCVMMUInvocation+0x6be>
    0x8401612a    0x66c    auipc a5,0x2
    0x8401612e    0x670    ld a5,1902(a5) # ffffffff84018898 <current_extra_caps+0x8>
    0x84016132    0x674    beqz a5,ffffffff8401617c <decodeRISCVMMUInvocation+0x6be>
    0x84016134    0x676    auipc a4,0x14
    0x84016138    0x67a    ld a4,1796(a4) # ffffffff8402a838 <ksCurThread>
    0x8401613c    0x67e    ld s4,88(a4)
    0x84016140    0x682    ld s5,96(a4)
    0x84016144    0x686    ld s3,0(s2)
    0x84016148    0x68a    ld a2,8(s2)
    0x8401614c    0x68e    ld a4,0(a5)
    0x8401614e    0x690    sd a4,48(sp)          ; stack access
    0x84016150    0x692    ld a5,8(a5)
    0x84016152    0x694    sd a5,56(sp)          ; stack access
    0x84016154    0x696    auipc a5,0x2
    0x84016158    0x69a    addi a5,a5,-340 # ffffffff84018000 <riscvKSASIDTable>
    0x8401615c    0x69e    li s1,0
    0x8401615e    0x6a0    li a3,128
    0x84016162    0x6a4    ld a4,0(a5)
    0x84016164    0x6a6    beqz a4,ffffffff8401618a <decodeRISCVMMUInvocation+0x6cc>
    0x84016166    0x6a8    addi s1,s1,1
    0x84016168    0x6aa    addi a5,a5,8
    0x8401616a    0x6ac    bne s1,a3,ffffffff84016162 <decodeRISCVMMUInvocation+0x6a4>
    0x8401616e    0x6b0    li a5,8
    0x84016170    0x6b2    auipc a4,0x2
    0x84016174    0x6b6    sd a5,1376(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016178    0x6ba    li s0,3
    0x8401617a    0x6bc    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x8401617c    0x6be    li a5,7
    0x8401617e    0x6c0    auipc a4,0x2
    0x84016182    0x6c4    sd a5,1362(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016186    0x6c8    li s0,3
    0x84016188    0x6ca    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x8401618a    0x6cc    li a5,128
    0x8401618e    0x6d0    beq s1,a5,ffffffff8401616e <decodeRISCVMMUInvocation+0x6b0>
    0x84016192    0x6d4    srli a5,s3,0x3b
    0x84016196    0x6d8    li a4,2
    0x84016198    0x6da    bne a5,a4,ffffffff840161ae <decodeRISCVMMUInvocation+0x6f0>
    0x8401619c    0x6de    andi a5,a2,63
    0x840161a0    0x6e2    li a4,12
    0x840161a2    0x6e4    bne a5,a4,ffffffff840161ae <decodeRISCVMMUInvocation+0x6f0>
    0x840161a6    0x6e8    srli a5,a2,0x6
    0x840161aa    0x6ec    andi a5,a5,1
    0x840161ac    0x6ee    beqz a5,ffffffff840161c6 <decodeRISCVMMUInvocation+0x708>
    0x840161ae    0x6f0    auipc a5,0x2
    0x840161b2    0x6f4    addi a5,a5,-430 # ffffffff84018000 <riscvKSASIDTable>
    0x840161b6    0x6f8    li a4,2
    0x840161b8    0x6fa    sd a4,1744(a5)
    0x840161bc    0x6fe    li a4,1
    0x840161be    0x700    sd a4,1704(a5)
    0x840161c2    0x704    li s0,3
    0x840161c4    0x706    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840161c6    0x708    mv a0,s2
    0x840161c8    0x70a    jal ra,ffffffff8401206a <ensureNoChildren>
    0x840161cc    0x70e    mv s0,a0
    0x840161ce    0x710    bnez a0,ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840161d0    0x712    slli s6,s3,0x19
    0x840161d4    0x716    srli s6,s6,0x19
    0x840161d8    0x71a    srli a5,s3,0x26
    0x840161dc    0x71e    andi a5,a5,1
    0x840161de    0x720    beqz a5,ffffffff840161e8 <decodeRISCVMMUInvocation+0x72a>
    0x840161e0    0x722    li a5,-1
    0x840161e2    0x724    slli a5,a5,0x27
    0x840161e4    0x726    or s6,s6,a5
    0x840161e8    0x72a    mv a3,s5
    0x840161ea    0x72c    mv a2,s4
    0x840161ec    0x72e    ld a0,48(sp)          ; stack access
    0x840161ee    0x730    ld a1,56(sp)          ; stack access
    0x840161f0    0x732    jal ra,ffffffff840115a6 <lookupTargetSlot>
    0x840161f4    0x736    sd a0,64(sp)          ; stack access
    0x840161f6    0x738    sd a1,72(sp)          ; stack access
    0x840161f8    0x73a    mv s0,a0
    0x840161fa    0x73c    bnez a0,ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840161fe    0x740    mv s3,a1
    0x84016200    0x742    mv a0,a1
    0x84016202    0x744    jal ra,ffffffff840119cc <ensureEmptySlot>
    0x84016206    0x748    mv s0,a0
    0x84016208    0x74a    bnez a0,ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x8401620c    0x74e    li a1,2
    0x8401620e    0x750    auipc a0,0x14
    0x84016212    0x754    ld a0,1578(a0) # ffffffff8402a838 <ksCurThread>
    0x84016216    0x758    jal ra,ffffffff840125f6 <setThreadState>
    0x8401621a    0x75c    ld a5,8(s2)
    0x8401621e    0x760    andi a4,a5,63
    0x84016222    0x764    addiw a3,a4,-4
    0x84016226    0x768    lui a4,0x2000
    0x8401622a    0x76c    sll a4,a4,a3
    0x8401622e    0x770    slli a5,a5,0x27
    0x84016230    0x772    srli a5,a5,0x27
    0x84016232    0x774    or a5,a5,a4
    0x84016234    0x776    sd a5,8(s2)
    0x84016238    0x77a    lui a1,0x1
    0x8401623a    0x77c    mv a0,s6
    0x8401623c    0x77e    jal ra,ffffffff84015a40 <memzero>
    0x84016240    0x782    slli a5,s1,0x34
    0x84016244    0x786    lui a4,0xffff
    0x84016248    0x78a    slli a4,a4,0x1f
    0x8401624a    0x78c    and a5,a5,a4
    0x8401624c    0x78e    srli a4,s6,0x2
    0x84016250    0x792    li s4,-1
    0x84016252    0x794    srli a3,s4,0x1b
    0x84016256    0x798    and a4,a4,a3
    0x84016258    0x79a    or a5,a5,a4
    0x8401625a    0x79c    mv a3,s3
    0x8401625c    0x79e    mv a2,s2
    0x8401625e    0x7a0    li a0,13
    0x84016260    0x7a2    slli a0,a0,0x3b
    0x84016262    0x7a4    or a0,a0,a5
    0x84016264    0x7a6    li a1,0
    0x84016266    0x7a8    jal ra,ffffffff84011676 <cteInsert>
    0x8401626a    0x7ac    srli a5,s4,0x9
    0x8401626e    0x7b0    and a5,a5,s1
    0x84016270    0x7b2    slli a5,a5,0x3
    0x84016272    0x7b4    auipc a4,0x2
    0x84016276    0x7b8    addi a4,a4,-626 # ffffffff84018000 <riscvKSASIDTable>
    0x8401627a    0x7bc    add a5,a5,a4
    0x8401627c    0x7be    sd s6,0(a5)
    0x84016280    0x7c2    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84016282    0x7c4    li a5,3
    0x84016284    0x7c6    auipc a4,0x2
    0x84016288    0x7ca    sd a5,1100(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401628c    0x7ce    li s0,3
    0x8401628e    0x7d0    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84016290    0x7d2    li a5,7
    0x84016292    0x7d4    auipc a4,0x2
    0x84016296    0x7d8    sd a5,1086(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401629a    0x7dc    li s0,3
    0x8401629c    0x7de    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x8401629e    0x7e0    auipc a5,0x2
    0x840162a2    0x7e4    addi a5,a5,-670 # ffffffff84018000 <riscvKSASIDTable>
    0x840162a6    0x7e8    li a4,2
    0x840162a8    0x7ea    sd a4,1744(a5)
    0x840162ac    0x7ee    li a4,1
    0x840162ae    0x7f0    sd a4,1704(a5)
    0x840162b2    0x7f4    li s0,3
    0x840162b4    0x7f6    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840162b6    0x7f8    auipc a5,0x2
    0x840162ba    0x7fc    addi a5,a5,-694 # ffffffff84018000 <riscvKSASIDTable>
    0x840162be    0x800    li a4,6
    0x840162c0    0x802    sd a4,1744(a5)
    0x840162c4    0x806    sd zero,1736(a5)
    0x840162c8    0x80a    sd zero,1024(a5)
    0x840162cc    0x80e    sd zero,1032(a5)
    0x840162d0    0x812    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840162d2    0x814    auipc a5,0x2
    0x840162d6    0x818    addi a5,a5,-722 # ffffffff84018000 <riscvKSASIDTable>
    0x840162da    0x81c    li a4,2
    0x840162dc    0x81e    sd a4,1744(a5)
    0x840162e0    0x822    sd zero,1704(a5)
    0x840162e4    0x826    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x840162e6    0x828    addi a5,a5,1
    0x840162e8    0x82a    addi a4,a4,8
    0x840162ea    0x82c    beq a5,a1,ffffffff84016366 <decodeRISCVMMUInvocation+0x8a8>
    0x840162ee    0x830    add a3,a5,a2
    0x840162f2    0x834    beqz a3,ffffffff840162e6 <decodeRISCVMMUInvocation+0x828>
    0x840162f4    0x836    ld a3,0(a4)
    0x840162f6    0x838    bnez a3,ffffffff840162e6 <decodeRISCVMMUInvocation+0x828>
    0x840162f8    0x83a    li a4,512
    0x840162fc    0x83e    beq a5,a4,ffffffff84016366 <decodeRISCVMMUInvocation+0x8a8>
    0x84016300    0x842    add s0,a5,a2
    0x84016304    0x846    li a1,2
    0x84016306    0x848    auipc a0,0x14
    0x8401630a    0x84c    ld a0,1330(a0) # ffffffff8402a838 <ksCurThread>
    0x8401630e    0x850    jal ra,ffffffff840125f6 <setThreadState>
    0x84016312    0x854    ld a3,0(s3)
    0x84016316    0x858    ld a5,8(s3)
    0x8401631a    0x85c    srli a4,a5,0x9
    0x8401631e    0x860    slli s1,a4,0x19
    0x84016322    0x864    srli s1,s1,0x19
    0x84016324    0x866    srli a4,a4,0x26
    0x84016326    0x868    andi a4,a4,1
    0x84016328    0x86a    beqz a4,ffffffff84016330 <decodeRISCVMMUInvocation+0x872>
    0x8401632a    0x86c    li a4,-1
    0x8401632c    0x86e    slli a4,a4,0x27
    0x8401632e    0x870    or s1,s1,a4
    0x84016330    0x872    li a2,-1
    0x84016332    0x874    slli a4,a2,0x28
    0x84016336    0x878    and a4,a4,a3
    0x84016338    0x87a    li a3,1
    0x8401633a    0x87c    slli a3,a3,0x27
    0x8401633c    0x87e    or a4,a4,a3
    0x8401633e    0x880    sd a4,0(s3)
    0x84016342    0x884    srli a2,a2,0x10
    0x84016344    0x886    and a5,a5,a2
    0x84016346    0x888    slli a4,s0,0x30
    0x8401634a    0x88c    or a5,a5,a4
    0x8401634c    0x88e    sd a5,8(s3)
    0x84016350    0x892    mv a0,s1
    0x84016352    0x894    jal ra,ffffffff8401077c <copyGlobalMappings>
    0x84016356    0x898    andi a5,s0,511
    0x8401635a    0x89c    slli a5,a5,0x3
    0x8401635c    0x89e    add s4,s4,a5
    0x8401635e    0x8a0    sd s1,0(s4)
    0x84016362    0x8a4    mv s0,s2
    0x84016364    0x8a6    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84016366    0x8a8    li a5,8
    0x84016368    0x8aa    auipc a4,0x2
    0x8401636c    0x8ae    sd a5,872(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84016370    0x8b2    j ffffffff840160f8 <decodeRISCVMMUInvocation+0x63a>
    0x84016372    0x8b4    jal ra,ffffffff840103da <halt>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
756 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeRISCVMMUInvocation` has 1098 nodes.

Section decodeTCBInvocation (267 of 269)
========================================

Deriving specifications
-----------------------

Section `decodeTCBInvocation` consists of 168 instructions.


Stack analysis
---------------

30 stack accesses found. Annotated code for `decodeTCBInvocation`:

    0x840156ee      0x0    addi sp,sp,-48
    0x840156f0      0x2    sd ra,40(sp)          ; stack access
    0x840156f2      0x4    sd s0,32(sp)          ; stack access
    0x840156f4      0x6    sd s1,24(sp)          ; stack access
    0x840156f6      0x8    sd a2,0(sp)           ; stack access
    0x840156f8      0xa    sd a3,8(sp)           ; stack access
    0x840156fa      0xc    mv a3,a4
    0x840156fc      0xe    li a4,9
    0x840156fe     0x10    beq a0,a4,ffffffff84015866 <decodeTCBInvocation+0x178>
    0x84015702     0x14    mv s0,a2
    0x84015704     0x16    bltu a4,a0,ffffffff84015778 <decodeTCBInvocation+0x8a>
    0x84015708     0x1a    li a4,5
    0x8401570a     0x1c    beq a0,a4,ffffffff8401584a <decodeTCBInvocation+0x15c>
    0x8401570e     0x20    bgeu a4,a0,ffffffff8401572c <decodeTCBInvocation+0x3e>
    0x84015712     0x24    li a5,7
    0x84015714     0x26    beq a0,a5,ffffffff84015858 <decodeTCBInvocation+0x16a>
    0x84015718     0x2a    li a5,8
    0x8401571a     0x2c    bne a0,a5,ffffffff84015764 <decodeTCBInvocation+0x76>
    0x8401571e     0x30    mv a3,a6
    0x84015720     0x32    mv a2,a1
    0x84015722     0x34    ld a0,0(sp)           ; stack access
    0x84015724     0x36    ld a1,8(sp)           ; stack access
    0x84015726     0x38    jal ra,ffffffff84014e10 <decodeSetSchedParams>
    0x8401572a     0x3c    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x8401572c     0x3e    li a4,3
    0x8401572e     0x40    beq a0,a4,ffffffff84015814 <decodeTCBInvocation+0x126>
    0x84015732     0x44    li a4,4
    0x84015734     0x46    bne a0,a4,ffffffff84015746 <decodeTCBInvocation+0x58>
    0x84015738     0x4a    mv a3,a6
    0x8401573a     0x4c    mv a2,a1
    0x8401573c     0x4e    ld a0,0(sp)           ; stack access
    0x8401573e     0x50    ld a1,8(sp)           ; stack access
    0x84015740     0x52    jal ra,ffffffff840151e8 <decodeCopyRegisters>
    0x84015744     0x56    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015746     0x58    li a4,2
    0x84015748     0x5a    bne a0,a4,ffffffff84015896 <decodeTCBInvocation+0x1a8>
    0x8401574c     0x5e    mv a4,a6
    0x8401574e     0x60    mv a3,a5
    0x84015750     0x62    mv a2,a1
    0x84015752     0x64    ld a0,0(sp)           ; stack access
    0x84015754     0x66    ld a1,8(sp)           ; stack access
    0x84015756     0x68    jal ra,ffffffff8401539e <decodeReadRegisters>
    0x8401575a     0x6c    ld ra,40(sp)          ; stack access
    0x8401575c     0x6e    ld s0,32(sp)          ; stack access
    0x8401575e     0x70    ld s1,24(sp)          ; stack access
    0x84015760     0x72    addi sp,sp,48
    0x84015762     0x74    ret
    0x84015764     0x76    li a5,6
    0x84015766     0x78    bne a0,a5,ffffffff84015896 <decodeTCBInvocation+0x1a8>
    0x8401576a     0x7c    mv a3,a6
    0x8401576c     0x7e    mv a2,a1
    0x8401576e     0x80    ld a0,0(sp)           ; stack access
    0x84015770     0x82    ld a1,8(sp)           ; stack access
    0x84015772     0x84    jal ra,ffffffff84014c78 <decodeSetPriority>
    0x84015776     0x88    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015778     0x8a    li a5,13
    0x8401577a     0x8c    beq a0,a5,ffffffff84015874 <decodeTCBInvocation+0x186>
    0x8401577e     0x90    bgeu a5,a0,ffffffff840157cc <decodeTCBInvocation+0xde>
    0x84015782     0x94    li a5,14
    0x84015784     0x96    beq a0,a5,ffffffff8401587e <decodeTCBInvocation+0x190>
    0x84015788     0x9a    li a5,15
    0x8401578a     0x9c    bne a0,a5,ffffffff84015896 <decodeTCBInvocation+0x1a8>
    0x8401578e     0xa0    beqz a1,ffffffff84015888 <decodeTCBInvocation+0x19a>
    0x84015792     0xa4    auipc a0,0x15
    0x84015796     0xa8    ld a0,166(a0) # ffffffff8402a838 <ksCurThread>
    0x8401579a     0xac    ld s1,88(a0)
    0x8401579c     0xae    li a1,2
    0x8401579e     0xb0    jal ra,ffffffff840125f6 <setThreadState>
    0x840157a2     0xb4    slli a5,s0,0x19
    0x840157a6     0xb8    srli a5,a5,0x19
    0x840157a8     0xba    srli s0,s0,0x26
    0x840157aa     0xbc    andi s0,s0,1
    0x840157ac     0xbe    beqz s0,ffffffff840157b4 <decodeTCBInvocation+0xc6>
    0x840157ae     0xc0    li a4,-1
    0x840157b0     0xc2    slli a4,a4,0x27
    0x840157b2     0xc4    or a5,a5,a4
    0x840157b4     0xc6    sd s1,24(a5)
    0x840157b6     0xc8    auipc a4,0x15
    0x840157ba     0xcc    ld a4,130(a4) # ffffffff8402a838 <ksCurThread>
    0x840157be     0xd0    li a0,0
    0x840157c0     0xd2    bne a5,a4,ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x840157c4     0xd6    jal ra,ffffffff84012590 <rescheduleRequired>
    0x840157c8     0xda    li a0,0
    0x840157ca     0xdc    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x840157cc     0xde    li a5,11
    0x840157ce     0xe0    beq a0,a5,ffffffff84015822 <decodeTCBInvocation+0x134>
    0x840157d2     0xe4    li a5,12
    0x840157d4     0xe6    bne a0,a5,ffffffff84015800 <decodeTCBInvocation+0x112>
    0x840157d8     0xea    li a1,2
    0x840157da     0xec    auipc a0,0x15
    0x840157de     0xf0    ld a0,94(a0) # ffffffff8402a838 <ksCurThread>
    0x840157e2     0xf4    jal ra,ffffffff840125f6 <setThreadState>
    0x840157e6     0xf8    slli a0,s0,0x19
    0x840157ea     0xfc    srli a0,a0,0x19
    0x840157ec     0xfe    srli s0,s0,0x26
    0x840157ee    0x100    andi s0,s0,1
    0x840157f0    0x102    beqz s0,ffffffff840157f8 <decodeTCBInvocation+0x10a>
    0x840157f2    0x104    li a5,-1
    0x840157f4    0x106    slli a5,a5,0x27
    0x840157f6    0x108    or a0,a0,a5
    0x840157f8    0x10a    jal ra,ffffffff84013b2c <restart>
    0x840157fc    0x10e    li a0,0
    0x840157fe    0x110    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015800    0x112    li a5,10
    0x84015802    0x114    bne a0,a5,ffffffff84015896 <decodeTCBInvocation+0x1a8>
    0x84015806    0x118    mv a4,a6
    0x84015808    0x11a    mv a2,a1
    0x8401580a    0x11c    ld a0,0(sp)           ; stack access
    0x8401580c    0x11e    ld a1,8(sp)           ; stack access
    0x8401580e    0x120    jal ra,ffffffff84014fbc <decodeSetSpace>
    0x84015812    0x124    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015814    0x126    mv a3,a6
    0x84015816    0x128    mv a2,a1
    0x84015818    0x12a    ld a0,0(sp)           ; stack access
    0x8401581a    0x12c    ld a1,8(sp)           ; stack access
    0x8401581c    0x12e    jal ra,ffffffff84015528 <decodeWriteRegisters>
    0x84015820    0x132    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015822    0x134    li a1,2
    0x84015824    0x136    auipc a0,0x15
    0x84015828    0x13a    ld a0,20(a0) # ffffffff8402a838 <ksCurThread>
    0x8401582c    0x13e    jal ra,ffffffff840125f6 <setThreadState>
    0x84015830    0x142    slli a0,s0,0x19
    0x84015834    0x146    srli a0,a0,0x19
    0x84015836    0x148    srli s0,s0,0x26
    0x84015838    0x14a    andi s0,s0,1
    0x8401583a    0x14c    beqz s0,ffffffff84015842 <decodeTCBInvocation+0x154>
    0x8401583c    0x14e    li a5,-1
    0x8401583e    0x150    slli a5,a5,0x27
    0x84015840    0x152    or a0,a0,a5
    0x84015842    0x154    jal ra,ffffffff840130d8 <suspend>
    0x84015846    0x158    li a0,0
    0x84015848    0x15a    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x8401584a    0x15c    mv a4,a6
    0x8401584c    0x15e    mv a2,a1
    0x8401584e    0x160    ld a0,0(sp)           ; stack access
    0x84015850    0x162    ld a1,8(sp)           ; stack access
    0x84015852    0x164    jal ra,ffffffff84014a9c <decodeTCBConfigure>
    0x84015856    0x168    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015858    0x16a    mv a3,a6
    0x8401585a    0x16c    mv a2,a1
    0x8401585c    0x16e    ld a0,0(sp)           ; stack access
    0x8401585e    0x170    ld a1,8(sp)           ; stack access
    0x84015860    0x172    jal ra,ffffffff84014d44 <decodeSetMCPriority>
    0x84015864    0x176    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015866    0x178    mv a4,a6
    0x84015868    0x17a    mv a2,a1
    0x8401586a    0x17c    ld a0,0(sp)           ; stack access
    0x8401586c    0x17e    ld a1,8(sp)           ; stack access
    0x8401586e    0x180    jal ra,ffffffff84014f04 <decodeSetIPCBuffer>
    0x84015872    0x184    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015874    0x186    ld a0,0(sp)           ; stack access
    0x84015876    0x188    ld a1,8(sp)           ; stack access
    0x84015878    0x18a    jal ra,ffffffff840155d4 <decodeBindNotification>
    0x8401587c    0x18e    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x8401587e    0x190    ld a0,0(sp)           ; stack access
    0x84015880    0x192    ld a1,8(sp)           ; stack access
    0x84015882    0x194    jal ra,ffffffff840156a0 <decodeUnbindNotification>
    0x84015886    0x198    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015888    0x19a    li a5,7
    0x8401588a    0x19c    auipc a4,0x3
    0x8401588e    0x1a0    sd a5,-442(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84015892    0x1a4    li a0,3
    0x84015894    0x1a6    j ffffffff8401575a <decodeTCBInvocation+0x6c>
    0x84015896    0x1a8    li a5,3
    0x84015898    0x1aa    auipc a4,0x3
    0x8401589c    0x1ae    sd a5,-456(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840158a0    0x1b2    li a0,3
    0x840158a2    0x1b4    j ffffffff8401575a <decodeTCBInvocation+0x6c>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
168 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeTCBInvocation` has 268 nodes.

Section decodeCNodeInvocation (268 of 269)
==========================================

Deriving specifications
-----------------------

Section `decodeCNodeInvocation` consists of 419 instructions.


Stack analysis
---------------

78 stack accesses found. Annotated code for `decodeCNodeInvocation`:

    0x84013532      0x0    addi sp,sp,-224
    0x84013534      0x2    sd ra,216(sp)         ; stack access
    0x84013536      0x4    sd s0,208(sp)         ; stack access
    0x84013538      0x6    sd s1,200(sp)         ; stack access
    0x8401353a      0x8    sd s2,192(sp)         ; stack access
    0x8401353c      0xa    sd s3,184(sp)         ; stack access
    0x8401353e      0xc    sd s4,176(sp)         ; stack access
    0x84013540      0xe    sd s5,168(sp)         ; stack access
    0x84013542     0x10    sd s6,160(sp)         ; stack access
    0x84013544     0x12    sd s7,152(sp)         ; stack access
    0x84013546     0x14    sd a2,0(sp)           ; stack access
    0x84013548     0x16    sd a3,8(sp)           ; stack access
    0x8401354a     0x18    addi a3,a0,-16
    0x8401354e     0x1c    li a5,8
    0x84013550     0x1e    bltu a5,a3,ffffffff84013604 <decodeCNodeInvocation+0xd2>
    0x84013554     0x22    mv s1,a0
    0x84013556     0x24    mv s2,a1
    0x84013558     0x26    mv s3,a4
    0x8401355a     0x28    li a5,1
    0x8401355c     0x2a    bgeu a5,a1,ffffffff84013612 <decodeCNodeInvocation+0xe0>
    0x84013560     0x2e    auipc a5,0x17
    0x84013564     0x32    ld a5,728(a5) # ffffffff8402a838 <ksCurThread>
    0x84013568     0x36    ld a3,96(a5)
    0x8401356a     0x38    ld a2,88(a5)
    0x8401356c     0x3a    ld a0,0(sp)           ; stack access
    0x8401356e     0x3c    ld a1,8(sp)           ; stack access
    0x84013570     0x3e    jal ra,ffffffff840115a6 <lookupTargetSlot>
    0x84013574     0x42    sd a0,112(sp)         ; stack access
    0x84013576     0x44    sd a1,120(sp)         ; stack access
    0x84013578     0x46    mv s0,a0
    0x8401357a     0x48    bnez a0,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401357c     0x4a    mv s4,a1
    0x8401357e     0x4c    addi a5,s1,-19
    0x84013582     0x50    li a4,3
    0x84013584     0x52    bltu a4,a5,ffffffff84013780 <decodeCNodeInvocation+0x24e>
    0x84013588     0x56    li a5,3
    0x8401358a     0x58    bgeu a5,s2,ffffffff84013636 <decodeCNodeInvocation+0x104>
    0x8401358e     0x5c    auipc a5,0x5
    0x84013592     0x60    ld a5,770(a5) # ffffffff84018890 <current_extra_caps>
    0x84013596     0x64    beqz a5,ffffffff84013636 <decodeCNodeInvocation+0x104>
    0x84013598     0x66    auipc a4,0x17
    0x8401359c     0x6a    ld a4,672(a4) # ffffffff8402a838 <ksCurThread>
    0x840135a0     0x6e    ld s6,104(a4)
    0x840135a4     0x72    ld s5,112(a4)
    0x840135a8     0x76    ld a4,0(a5)
    0x840135aa     0x78    sd a4,24(sp)          ; stack access
    0x840135ac     0x7a    ld a5,8(a5)
    0x840135ae     0x7c    sd a5,32(sp)          ; stack access
    0x840135b0     0x7e    mv a0,a1
    0x840135b2     0x80    jal ra,ffffffff840119cc <ensureEmptySlot>
    0x840135b6     0x84    mv s0,a0
    0x840135b8     0x86    bnez a0,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840135ba     0x88    mv a3,s5
    0x840135bc     0x8a    mv a2,s6
    0x840135be     0x8c    ld a0,24(sp)          ; stack access
    0x840135c0     0x8e    ld a1,32(sp)          ; stack access
    0x840135c2     0x90    jal ra,ffffffff8401158c <lookupSourceSlot>
    0x840135c6     0x94    sd a0,112(sp)         ; stack access
    0x840135c8     0x96    sd a1,120(sp)         ; stack access
    0x840135ca     0x98    mv s0,a0
    0x840135cc     0x9a    bnez a0,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840135ce     0x9c    mv s6,a1
    0x840135d0     0x9e    ld s7,0(a1) # ffffffffe0000000 <ki_end+0x5bfd1000>
    0x840135d4     0xa2    srli a5,s7,0x3b
    0x840135d8     0xa6    beqz a5,ffffffff84013644 <decodeCNodeInvocation+0x112>
    0x840135da     0xa8    li a5,21
    0x840135dc     0xaa    beq s1,a5,ffffffff84013712 <decodeCNodeInvocation+0x1e0>
    0x840135e0     0xae    bltu a5,s1,ffffffff8401373c <decodeCNodeInvocation+0x20a>
    0x840135e4     0xb2    li a5,19
    0x840135e6     0xb4    beq s1,a5,ffffffff84013670 <decodeCNodeInvocation+0x13e>
    0x840135ea     0xb8    li a5,20
    0x840135ec     0xba    bne s1,a5,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840135f0     0xbe    li a5,5
    0x840135f2     0xc0    bltu a5,s2,ffffffff840136d6 <decodeCNodeInvocation+0x1a4>
    0x840135f6     0xc4    li a5,7
    0x840135f8     0xc6    auipc a4,0x5
    0x840135fc     0xca    sd a5,216(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013600     0xce    li s0,3
    0x84013602     0xd0    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013604     0xd2    li a5,3
    0x84013606     0xd4    auipc a4,0x5
    0x8401360a     0xd8    sd a5,202(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401360e     0xdc    li s0,3
    0x84013610     0xde    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013612     0xe0    li a5,7
    0x84013614     0xe2    auipc a4,0x5
    0x84013618     0xe6    sd a5,188(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401361c     0xea    li s0,3
    0x8401361e     0xec    mv a0,s0
    0x84013620     0xee    ld ra,216(sp)         ; stack access
    0x84013622     0xf0    ld s0,208(sp)         ; stack access
    0x84013624     0xf2    ld s1,200(sp)         ; stack access
    0x84013626     0xf4    ld s2,192(sp)         ; stack access
    0x84013628     0xf6    ld s3,184(sp)         ; stack access
    0x8401362a     0xf8    ld s4,176(sp)         ; stack access
    0x8401362c     0xfa    ld s5,168(sp)         ; stack access
    0x8401362e     0xfc    ld s6,160(sp)         ; stack access
    0x84013630     0xfe    ld s7,152(sp)         ; stack access
    0x84013632    0x100    addi sp,sp,224
    0x84013634    0x102    ret
    0x84013636    0x104    li a5,7
    0x84013638    0x106    auipc a4,0x5
    0x8401363c    0x10a    sd a5,152(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013640    0x10e    li s0,3
    0x84013642    0x110    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013644    0x112    auipc a4,0x5
    0x84013648    0x116    addi a4,a4,-1604 # ffffffff84018000 <riscvKSASIDTable>
    0x8401364c    0x11a    li a5,6
    0x8401364e    0x11c    sd a5,1744(a4)
    0x84013652    0x120    li a5,1
    0x84013654    0x122    sd a5,1736(a4)
    0x84013658    0x126    slli a5,s5,0x2
    0x8401365c    0x12a    andi a5,a5,508
    0x84013660    0x12e    ori a5,a5,1
    0x84013664    0x132    sd a5,1024(a4)
    0x84013668    0x136    sd zero,1032(a4)
    0x8401366c    0x13a    li s0,3
    0x8401366e    0x13c    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013670    0x13e    li a5,4
    0x84013672    0x140    bltu a5,s2,ffffffff84013684 <decodeCNodeInvocation+0x152>
    0x84013676    0x144    li a5,7
    0x84013678    0x146    auipc a4,0x5
    0x8401367c    0x14a    sd a5,88(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013680    0x14e    li s0,3
    0x84013682    0x150    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013684    0x152    ld a1,0(a1)
    0x84013686    0x154    ld a2,8(s6) # fffffffffe000008 <ki_end+0x79fd1008>
    0x8401368a    0x158    ld a0,40(s3)
    0x8401368e    0x15c    jal ra,ffffffff8401229a <maskCapRights>
    0x84013692    0x160    mv a2,a0
    0x84013694    0x162    mv a3,a1
    0x84013696    0x164    sd a0,56(sp)          ; stack access
    0x84013698    0x166    sd a1,64(sp)          ; stack access
    0x8401369a    0x168    mv a1,s6
    0x8401369c    0x16a    addi a0,sp,88
    0x8401369e    0x16c    jal ra,ffffffff840120a8 <deriveCap>
    0x840136a2    0x170    ld a5,88(sp)          ; stack access
    0x840136a4    0x172    bnez a5,ffffffff84013778 <decodeCNodeInvocation+0x246>
    0x840136a6    0x174    ld s1,96(sp)          ; stack access
    0x840136a8    0x176    sd s1,40(sp)          ; stack access
    0x840136aa    0x178    ld a5,104(sp)         ; stack access
    0x840136ac    0x17a    sd a5,48(sp)          ; stack access
    0x840136ae    0x17c    srli a5,s1,0x3b
    0x840136b2    0x180    beqz a5,ffffffff8401375c <decodeCNodeInvocation+0x22a>
    0x840136b4    0x182    li a1,2
    0x840136b6    0x184    auipc a0,0x17
    0x840136ba    0x188    ld a0,386(a0) # ffffffff8402a838 <ksCurThread>
    0x840136be    0x18c    jal ra,ffffffff840125f6 <setThreadState>
    0x840136c2    0x190    sd s1,40(sp)          ; stack access
    0x840136c4    0x192    sd s1,72(sp)          ; stack access
    0x840136c6    0x194    ld a1,48(sp)          ; stack access
    0x840136c8    0x196    sd a1,80(sp)          ; stack access
    0x840136ca    0x198    mv a3,s4
    0x840136cc    0x19a    mv a2,s6
    0x840136ce    0x19c    mv a0,s1
    0x840136d0    0x19e    jal ra,ffffffff84011676 <cteInsert>
    0x840136d4    0x1a2    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840136d6    0x1a4    ld s1,48(s3)
    0x840136da    0x1a8    ld a1,0(a1)
    0x840136dc    0x1aa    ld a2,8(s6)
    0x840136e0    0x1ae    ld a0,40(s3)
    0x840136e4    0x1b2    jal ra,ffffffff8401229a <maskCapRights>
    0x840136e8    0x1b6    mv a2,a0
    0x840136ea    0x1b8    mv a3,a1
    0x840136ec    0x1ba    sd a0,56(sp)          ; stack access
    0x840136ee    0x1bc    sd a1,64(sp)          ; stack access
    0x840136f0    0x1be    mv a1,s1
    0x840136f2    0x1c0    li a0,0
    0x840136f4    0x1c2    jal ra,ffffffff8401220a <updateCapData>
    0x840136f8    0x1c6    mv a2,a0
    0x840136fa    0x1c8    mv a3,a1
    0x840136fc    0x1ca    mv a1,s6
    0x840136fe    0x1cc    addi a0,sp,88
    0x84013700    0x1ce    jal ra,ffffffff840120a8 <deriveCap>
    0x84013704    0x1d2    ld a5,88(sp)          ; stack access
    0x84013706    0x1d4    bnez a5,ffffffff8401377c <decodeCNodeInvocation+0x24a>
    0x84013708    0x1d6    ld s1,96(sp)          ; stack access
    0x8401370a    0x1d8    sd s1,40(sp)          ; stack access
    0x8401370c    0x1da    ld a5,104(sp)         ; stack access
    0x8401370e    0x1dc    sd a5,48(sp)          ; stack access
    0x84013710    0x1de    j ffffffff840136ae <decodeCNodeInvocation+0x17c>
    0x84013712    0x1e0    ld a5,0(a1)
    0x84013714    0x1e2    sd a5,40(sp)          ; stack access
    0x84013716    0x1e4    ld a5,8(a1)
    0x84013718    0x1e6    sd a5,48(sp)          ; stack access
    0x8401371a    0x1e8    li a1,2
    0x8401371c    0x1ea    auipc a0,0x17
    0x84013720    0x1ee    ld a0,284(a0) # ffffffff8402a838 <ksCurThread>
    0x84013724    0x1f2    jal ra,ffffffff840125f6 <setThreadState>
    0x84013728    0x1f6    sd s7,40(sp)          ; stack access
    0x8401372a    0x1f8    sd s7,88(sp)          ; stack access
    0x8401372c    0x1fa    ld a1,48(sp)          ; stack access
    0x8401372e    0x1fc    sd a1,96(sp)          ; stack access
    0x84013730    0x1fe    mv a3,s4
    0x84013732    0x200    mv a2,s6
    0x84013734    0x202    mv a0,s7
    0x84013736    0x204    jal ra,ffffffff840117b2 <cteMove>
    0x8401373a    0x208    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401373c    0x20a    li a5,4
    0x8401373e    0x20c    bgeu a5,s2,ffffffff8401376a <decodeCNodeInvocation+0x238>
    0x84013742    0x210    ld a2,0(a1)
    0x84013744    0x212    ld a3,8(a1)
    0x84013746    0x214    ld a1,40(s3)
    0x8401374a    0x218    li a0,1
    0x8401374c    0x21a    jal ra,ffffffff8401220a <updateCapData>
    0x84013750    0x21e    sd a0,40(sp)          ; stack access
    0x84013752    0x220    sd a1,48(sp)          ; stack access
    0x84013754    0x222    mv s7,a0
    0x84013756    0x224    srli a0,a0,0x3b
    0x84013758    0x226    bnez a0,ffffffff840139b4 <decodeCNodeInvocation+0x482>
    0x8401375c    0x22a    li a5,3
    0x8401375e    0x22c    auipc a4,0x5
    0x84013762    0x230    sd a5,-142(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013766    0x234    li s0,3
    0x84013768    0x236    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401376a    0x238    li a5,7
    0x8401376c    0x23a    auipc a4,0x5
    0x84013770    0x23e    sd a5,-156(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013774    0x242    li s0,3
    0x84013776    0x244    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013778    0x246    mv s0,a5
    0x8401377a    0x248    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401377c    0x24a    mv s0,a5
    0x8401377e    0x24c    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013780    0x24e    li a5,16
    0x84013782    0x250    beq s1,a5,ffffffff84013886 <decodeCNodeInvocation+0x354>
    0x84013786    0x254    li a5,17
    0x84013788    0x256    beq s1,a5,ffffffff8401389e <decodeCNodeInvocation+0x36c>
    0x8401378c    0x25a    li a5,24
    0x8401378e    0x25c    beq s1,a5,ffffffff840138b6 <decodeCNodeInvocation+0x384>
    0x84013792    0x260    li a5,18
    0x84013794    0x262    beq s1,a5,ffffffff840138da <decodeCNodeInvocation+0x3a8>
    0x84013798    0x266    li a5,23
    0x8401379a    0x268    bne s1,a5,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401379e    0x26c    li a5,7
    0x840137a0    0x26e    bgeu a5,s2,ffffffff84013910 <decodeCNodeInvocation+0x3de>
    0x840137a4    0x272    auipc a5,0x5
    0x840137a8    0x276    ld a5,236(a5) # ffffffff84018890 <current_extra_caps>
    0x840137ac    0x27a    beqz a5,ffffffff84013910 <decodeCNodeInvocation+0x3de>
    0x840137b0    0x27e    auipc a4,0x5
    0x840137b4    0x282    ld a4,232(a4) # ffffffff84018898 <current_extra_caps+0x8>
    0x840137b8    0x286    beqz a4,ffffffff84013910 <decodeCNodeInvocation+0x3de>
    0x840137bc    0x28a    auipc a3,0x17
    0x840137c0    0x28e    ld a3,124(a3) # ffffffff8402a838 <ksCurThread>
    0x840137c4    0x292    ld s5,104(a3)
    0x840137c8    0x296    ld s7,112(a3)
    0x840137cc    0x29a    ld s2,40(s3)
    0x840137d0    0x29e    ld s6,48(s3)
    0x840137d4    0x2a2    ld s1,64(s3)
    0x840137d8    0x2a6    ld a3,0(a5)
    0x840137da    0x2a8    sd a3,40(sp)          ; stack access
    0x840137dc    0x2aa    ld a5,8(a5)
    0x840137de    0x2ac    sd a5,48(sp)          ; stack access
    0x840137e0    0x2ae    ld a0,0(a4)
    0x840137e2    0x2b0    sd a0,56(sp)          ; stack access
    0x840137e4    0x2b2    ld a1,8(a4)
    0x840137e6    0x2b4    sd a1,64(sp)          ; stack access
    0x840137e8    0x2b6    mv a3,s1
    0x840137ea    0x2b8    ld a2,56(s3)
    0x840137ee    0x2bc    jal ra,ffffffff8401158c <lookupSourceSlot>
    0x840137f2    0x2c0    sd a1,120(sp)         ; stack access
    0x840137f4    0x2c2    mv s0,a0
    0x840137f6    0x2c4    bnez a0,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840137fa    0x2c8    mv s3,a1
    0x840137fc    0x2ca    mv a3,s2
    0x840137fe    0x2cc    mv a2,s7
    0x84013800    0x2ce    ld a0,40(sp)          ; stack access
    0x84013802    0x2d0    ld a1,48(sp)          ; stack access
    0x84013804    0x2d2    jal ra,ffffffff840115c0 <lookupPivotSlot>
    0x84013808    0x2d6    sd a0,112(sp)         ; stack access
    0x8401380a    0x2d8    sd a1,120(sp)         ; stack access
    0x8401380c    0x2da    mv s0,a0
    0x8401380e    0x2dc    bnez a0,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013812    0x2e0    mv s7,a1
    0x84013814    0x2e2    beq s3,a1,ffffffff8401391e <decodeCNodeInvocation+0x3ec>
    0x84013818    0x2e6    beq s4,a1,ffffffff8401391e <decodeCNodeInvocation+0x3ec>
    0x8401381c    0x2ea    beq s4,s3,ffffffff8401382c <decodeCNodeInvocation+0x2fa>
    0x84013820    0x2ee    mv a0,s4
    0x84013822    0x2f0    jal ra,ffffffff840119cc <ensureEmptySlot>
    0x84013826    0x2f4    mv s0,a0
    0x84013828    0x2f6    bnez a0,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401382c    0x2fa    ld a5,0(s3)
    0x84013830    0x2fe    srli a5,a5,0x3b
    0x84013832    0x300    beqz a5,ffffffff8401392c <decodeCNodeInvocation+0x3fa>
    0x84013836    0x304    ld a5,0(s7)
    0x8401383a    0x308    srli a5,a5,0x3b
    0x8401383c    0x30a    beqz a5,ffffffff84013958 <decodeCNodeInvocation+0x426>
    0x84013840    0x30e    ld a2,0(s3)
    0x84013844    0x312    ld a3,8(s3)
    0x84013848    0x316    mv a1,s6
    0x8401384a    0x318    li a0,1
    0x8401384c    0x31a    jal ra,ffffffff8401220a <updateCapData>
    0x84013850    0x31e    mv s0,a0
    0x84013852    0x320    sd a0,72(sp)          ; stack access
    0x84013854    0x322    sd a1,80(sp)          ; stack access
    0x84013856    0x324    ld a2,0(s7)
    0x8401385a    0x328    ld a3,8(s7)
    0x8401385e    0x32c    mv a1,s5
    0x84013860    0x32e    li a0,1
    0x84013862    0x330    jal ra,ffffffff8401220a <updateCapData>
    0x84013866    0x334    sd a0,88(sp)          ; stack access
    0x84013868    0x336    sd a1,96(sp)          ; stack access
    0x8401386a    0x338    srli s0,s0,0x3b
    0x8401386c    0x33a    beqz s0,ffffffff84013982 <decodeCNodeInvocation+0x450>
    0x84013870    0x33e    ld a5,88(sp)          ; stack access
    0x84013872    0x340    srli a5,a5,0x3b
    0x84013874    0x342    bnez a5,ffffffff84013990 <decodeCNodeInvocation+0x45e>
    0x84013878    0x346    li a5,3
    0x8401387a    0x348    auipc a4,0x5
    0x8401387e    0x34c    sd a5,-426(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013882    0x350    li s0,3
    0x84013884    0x352    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013886    0x354    li a1,2
    0x84013888    0x356    auipc a0,0x17
    0x8401388c    0x35a    ld a0,-80(a0) # ffffffff8402a838 <ksCurThread>
    0x84013890    0x35e    jal ra,ffffffff840125f6 <setThreadState>
    0x84013894    0x362    mv a0,s4
    0x84013896    0x364    jal ra,ffffffff840134a0 <cteRevoke>
    0x8401389a    0x368    mv s0,a0
    0x8401389c    0x36a    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401389e    0x36c    li a1,2
    0x840138a0    0x36e    auipc a0,0x17
    0x840138a4    0x372    ld a0,-104(a0) # ffffffff8402a838 <ksCurThread>
    0x840138a8    0x376    jal ra,ffffffff840125f6 <setThreadState>
    0x840138ac    0x37a    mv a0,s4
    0x840138ae    0x37c    jal ra,ffffffff84013490 <invokeCNodeDelete>
    0x840138b2    0x380    mv s0,a0
    0x840138b4    0x382    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840138b6    0x384    mv a0,a1
    0x840138b8    0x386    jal ra,ffffffff840119cc <ensureEmptySlot>
    0x840138bc    0x38a    mv s0,a0
    0x840138be    0x38c    bnez a0,ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840138c2    0x390    li a1,2
    0x840138c4    0x392    auipc a0,0x17
    0x840138c8    0x396    ld a0,-140(a0) # ffffffff8402a838 <ksCurThread>
    0x840138cc    0x39a    jal ra,ffffffff840125f6 <setThreadState>
    0x840138d0    0x39e    mv a0,s4
    0x840138d2    0x3a0    jal ra,ffffffff8401181a <invokeCNodeSaveCaller>
    0x840138d6    0x3a4    mv s0,a0
    0x840138d8    0x3a6    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840138da    0x3a8    ld a0,0(a1)
    0x840138dc    0x3aa    sd a0,88(sp)          ; stack access
    0x840138de    0x3ac    ld a1,8(a1)
    0x840138e0    0x3ae    sd a1,96(sp)          ; stack access
    0x840138e2    0x3b0    jal ra,ffffffff84011c68 <hasCancelSendRights>
    0x840138e6    0x3b4    bnez a0,ffffffff840138f6 <decodeCNodeInvocation+0x3c4>
    0x840138e8    0x3b6    li a5,3
    0x840138ea    0x3b8    auipc a4,0x5
    0x840138ee    0x3bc    sd a5,-538(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x840138f2    0x3c0    li s0,3
    0x840138f4    0x3c2    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840138f6    0x3c4    li a1,2
    0x840138f8    0x3c6    auipc a0,0x17
    0x840138fc    0x3ca    ld a0,-192(a0) # ffffffff8402a838 <ksCurThread>
    0x84013900    0x3ce    jal ra,ffffffff840125f6 <setThreadState>
    0x84013904    0x3d2    ld a0,88(sp)          ; stack access
    0x84013906    0x3d4    ld a1,96(sp)          ; stack access
    0x84013908    0x3d6    jal ra,ffffffff84012f68 <invokeCNodeCancelBadgedSends>
    0x8401390c    0x3da    mv s0,a0
    0x8401390e    0x3dc    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013910    0x3de    li a5,7
    0x84013912    0x3e0    auipc a4,0x5
    0x84013916    0x3e4    sd a5,-578(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401391a    0x3e8    li s0,3
    0x8401391c    0x3ea    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401391e    0x3ec    li a5,3
    0x84013920    0x3ee    auipc a4,0x5
    0x84013924    0x3f2    sd a5,-592(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x84013928    0x3f6    li s0,3
    0x8401392a    0x3f8    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x8401392c    0x3fa    auipc a4,0x4
    0x84013930    0x3fe    addi a4,a4,1748 # ffffffff84018000 <riscvKSASIDTable>
    0x84013934    0x402    li a5,6
    0x84013936    0x404    sd a5,1744(a4)
    0x8401393a    0x408    li a5,1
    0x8401393c    0x40a    sd a5,1736(a4)
    0x84013940    0x40e    slli a5,s1,0x2
    0x84013944    0x412    andi a5,a5,508
    0x84013948    0x416    ori a5,a5,1
    0x8401394c    0x41a    sd a5,1024(a4)
    0x84013950    0x41e    sd zero,1032(a4)
    0x84013954    0x422    li s0,3
    0x84013956    0x424    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013958    0x426    auipc a4,0x4
    0x8401395c    0x42a    addi a4,a4,1704 # ffffffff84018000 <riscvKSASIDTable>
    0x84013960    0x42e    li a5,6
    0x84013962    0x430    sd a5,1744(a4)
    0x84013966    0x434    sd zero,1736(a4)
    0x8401396a    0x438    slli a5,s2,0x2
    0x8401396e    0x43c    andi a5,a5,508
    0x84013972    0x440    ori a5,a5,1
    0x84013976    0x444    sd a5,1024(a4)
    0x8401397a    0x448    sd zero,1032(a4)
    0x8401397e    0x44c    li s0,3
    0x84013980    0x44e    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013982    0x450    li a5,3
    0x84013984    0x452    auipc a4,0x5
    0x84013988    0x456    sd a5,-692(a4) # ffffffff840186d0 <current_syscall_error+0x30>
    0x8401398c    0x45a    li s0,3
    0x8401398e    0x45c    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x84013990    0x45e    li a1,2
    0x84013992    0x460    auipc a0,0x17
    0x84013996    0x464    ld a0,-346(a0) # ffffffff8402a838 <ksCurThread>
    0x8401399a    0x468    jal ra,ffffffff840125f6 <setThreadState>
    0x8401399e    0x46c    mv a6,s4
    0x840139a0    0x46e    mv a5,s7
    0x840139a2    0x470    mv a4,s3
    0x840139a4    0x472    ld a2,88(sp)          ; stack access
    0x840139a6    0x474    ld a3,96(sp)          ; stack access
    0x840139a8    0x476    ld a0,72(sp)          ; stack access
    0x840139aa    0x478    ld a1,80(sp)          ; stack access
    0x840139ac    0x47a    jal ra,ffffffff840118ea <invokeCNodeRotate>
    0x840139b0    0x47e    mv s0,a0
    0x840139b2    0x480    j ffffffff8401361e <decodeCNodeInvocation+0xec>
    0x840139b4    0x482    li a1,2
    0x840139b6    0x484    auipc a0,0x17
    0x840139ba    0x488    ld a0,-382(a0) # ffffffff8402a838 <ksCurThread>
    0x840139be    0x48c    jal ra,ffffffff840125f6 <setThreadState>
    0x840139c2    0x490    j ffffffff84013728 <decodeCNodeInvocation+0x1f6>

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
419 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `decodeCNodeInvocation` has 684 nodes.

Section init_kernel (269 of 269)
================================

Deriving specifications
-----------------------

Section `init_kernel` consists of 220 instructions.

RVC_FTTFT____FFFT_FT.
Skipping 10579073 csrw stvec,a5

RVC_FTTFFT___FFT__FT.
Skipping 1007b073 csrc sstatus,a5


Stack analysis
---------------

78 stack accesses found. Annotated code for `init_kernel`:

    0x840012ca      0x0    addi sp,sp,-256
    0x840012cc      0x2    sd ra,248(sp)         ; stack access
    0x840012ce      0x4    sd s0,240(sp)         ; stack access
    0x840012d0      0x6    sd s1,232(sp)         ; stack access
    0x840012d2      0x8    sd s2,224(sp)         ; stack access
    0x840012d4      0xa    sd s3,216(sp)         ; stack access
    0x840012d6      0xc    sd s4,208(sp)         ; stack access
    0x840012d8      0xe    sd s5,200(sp)         ; stack access
    0x840012da     0x10    sd s6,192(sp)         ; stack access
    0x840012dc     0x12    sd s7,184(sp)         ; stack access
    0x840012de     0x14    mv s7,a3
    0x840012e0     0x16    li s0,-1
    0x840012e2     0x18    slli s0,s0,0x26
    0x840012e4     0x1a    add s1,a0,s0
    0x840012e8     0x1e    add s0,s0,a1
    0x840012ea     0x20    sd s1,88(sp)          ; stack access
    0x840012ec     0x22    sd s0,96(sp)          ; stack access
    0x840012ee     0x24    slli s6,a2,0x20
    0x840012f2     0x28    srli s6,s6,0x20
    0x840012f6     0x2c    sub s3,a0,s6
    0x840012fa     0x30    sub s4,a1,s6
    0x840012fe     0x34    lui s5,0x2
    0x84001300     0x36    add s5,s5,s4
    0x84001302     0x38    jal ra,ffffffff84000474 <map_kernel_window>
    0x84001306     0x3c    jal ra,ffffffff84000138 <activate_kernel_vspace>
    0x8400130a     0x40    auipc a5,0xf
    0x8400130e     0x44    addi a5,a5,-778 # ffffffff84010000 <ki_boot_end>
    0x84001312     0x48    csrw stvec,a5
    0x84001316     0x4c    jal ra,ffffffff840002ca <initLocalIRQController>
    0x8400131a     0x50    jal ra,ffffffff840002b4 <initTimer>
    0x8400131e     0x54    lui a5,0x6
    0x84001320     0x56    csrc sstatus,a5
    0x84001324     0x5a    jal ra,ffffffff8400030e <initIRQController>
    0x84001328     0x5e    sd s3,152(sp)         ; stack access
    0x8400132a     0x60    sd s5,160(sp)         ; stack access
    0x8400132c     0x62    auipc a5,0x0
    0x84001330     0x66    addi a5,a5,508 # ffffffff84001528 <ndks_boot>
    0x84001334     0x6a    lui a4,0xff021
    0x84001338     0x6e    slli a4,a4,0xe
    0x8400133a     0x70    sd a4,952(a5)
    0x8400133e     0x74    auipc a4,0x2e
    0x84001342     0x78    addi a4,a4,-830 # ffffffff8402f000 <ki_end>
    0x84001346     0x7c    li a3,-63
    0x8400134a     0x80    slli a3,a3,0x20
    0x8400134c     0x82    add a4,a4,a3
    0x8400134e     0x84    sd a4,960(a5)
    0x84001352     0x88    sd s1,968(a5)
    0x84001356     0x8c    sd s0,976(a5)
    0x8400135a     0x90    li a6,0
    0x8400135c     0x92    mv a4,s3
    0x8400135e     0x94    mv a5,s5
    0x84001360     0x96    auipc a3,0x0
    0x84001364     0x9a    addi a3,a3,1408 # ffffffff840018e0 <res_reg>
    0x84001368     0x9e    li a2,2
    0x8400136a     0xa0    auipc a1,0x0
    0x8400136e     0xa4    addi a1,a1,430 # ffffffff84001518 <avail_p_regs>
    0x84001372     0xa8    li a0,1
    0x84001374     0xaa    jal ra,ffffffff84000f6a <init_freemem>
    0x84001378     0xae    jal ra,ffffffff840005a2 <create_root_cnode>
    0x8400137c     0xb2    sd a0,24(sp)          ; stack access
    0x8400137e     0xb4    sd a1,32(sp)          ; stack access
    0x84001380     0xb6    srli a0,a0,0x3b
    0x84001382     0xb8    bnez a0,ffffffff84001388 <init_kernel+0xbe>
    0x84001384     0xba    jal ra,ffffffff840103da <halt>
    0x84001388     0xbe    ld a0,24(sp)          ; stack access
    0x8400138a     0xc0    jal ra,ffffffff840005de <create_domain_cap>
    0x8400138e     0xc4    ld a5,24(sp)          ; stack access
    0x84001390     0xc6    sd a5,152(sp)         ; stack access
    0x84001392     0xc8    ld a5,32(sp)          ; stack access
    0x84001394     0xca    sd a5,160(sp)         ; stack access
    0x84001396     0xcc    li s1,1
    0x84001398     0xce    li s0,0
    0x8400139a     0xd0    li s2,54
    0x8400139e     0xd4    j ffffffff840013a4 <init_kernel+0xda>
    0x840013a0     0xd6    addi s0,s0,1
    0x840013a2     0xd8    addi s1,s1,1
    0x840013a4     0xda    beqz s0,ffffffff840013a0 <init_kernel+0xd6>
    0x840013a6     0xdc    mv a1,s0
    0x840013a8     0xde    li a0,0
    0x840013aa     0xe0    jal ra,ffffffff84011a7e <setIRQState>
    0x840013ae     0xe4    bgeu s2,s1,ffffffff840013a0 <init_kernel+0xd6>
    0x840013b2     0xe8    li a1,54
    0x840013b6     0xec    li a0,2
    0x840013b8     0xee    jal ra,ffffffff84011a7e <setIRQState>
    0x840013bc     0xf2    ld a0,152(sp)         ; stack access
    0x840013be     0xf4    ld a1,160(sp)         ; stack access
    0x840013c0     0xf6    jal ra,ffffffff84010182 <cap_get_capPtr>
    0x840013c4     0xfa    li a5,7
    0x840013c6     0xfc    slli a5,a5,0x3c
    0x840013c8     0xfe    sd a5,128(a0)
    0x840013ca    0x100    sd zero,136(a0)
    0x840013ce    0x104    sd zero,144(a0)
    0x840013d2    0x108    li a5,3
    0x840013d4    0x10a    sd a5,152(a0)
    0x840013d6    0x10c    li a3,0
    0x840013d8    0x10e    mv a2,s4
    0x840013da    0x110    li a1,1
    0x840013dc    0x112    li a0,0
    0x840013de    0x114    jal ra,ffffffff84000d86 <populate_bi_frame>
    0x840013e2    0x118    mv a2,s3
    0x840013e4    0x11a    mv a3,s5
    0x840013e6    0x11c    ld a0,24(sp)          ; stack access
    0x840013e8    0x11e    ld a1,32(sp)          ; stack access
    0x840013ea    0x120    jal ra,ffffffff840006e0 <create_it_address_space>
    0x840013ee    0x124    sd a0,40(sp)          ; stack access
    0x840013f0    0x126    sd a1,48(sp)          ; stack access
    0x840013f2    0x128    srli a0,a0,0x3b
    0x840013f4    0x12a    beqz a0,ffffffff84001384 <init_kernel+0xba>
    0x840013f6    0x12c    lui s0,0x1
    0x840013f8    0x12e    add s0,s0,s4
    0x840013fa    0x130    mv a4,s0
    0x840013fc    0x132    ld a2,40(sp)          ; stack access
    0x840013fe    0x134    mv a3,a1
    0x84001400    0x136    ld a0,24(sp)          ; stack access
    0x84001402    0x138    ld a1,32(sp)          ; stack access
    0x84001404    0x13a    jal ra,ffffffff84000602 <create_bi_frame_cap>
    0x84001408    0x13e    mv a4,s4
    0x8400140a    0x140    ld a2,40(sp)          ; stack access
    0x8400140c    0x142    ld a3,48(sp)          ; stack access
    0x8400140e    0x144    ld a0,24(sp)          ; stack access
    0x84001410    0x146    ld a1,32(sp)          ; stack access
    0x84001412    0x148    jal ra,ffffffff84000d22 <create_ipcbuf_frame_cap>
    0x84001416    0x14c    sd a0,72(sp)          ; stack access
    0x84001418    0x14e    sd a1,80(sp)          ; stack access
    0x8400141a    0x150    srli a0,a0,0x3b
    0x8400141c    0x152    beqz a0,ffffffff84001384 <init_kernel+0xba>
    0x8400141e    0x154    sd s6,0(sp)           ; stack access
    0x84001420    0x156    li a7,1
    0x84001422    0x158    ld a5,88(sp)          ; stack access
    0x84001424    0x15a    ld a6,96(sp)          ; stack access
    0x84001426    0x15c    ld a3,40(sp)          ; stack access
    0x84001428    0x15e    ld a4,48(sp)          ; stack access
    0x8400142a    0x160    ld a1,24(sp)          ; stack access
    0x8400142c    0x162    ld a2,32(sp)          ; stack access
    0x8400142e    0x164    addi a0,sp,152
    0x84001430    0x166    jal ra,ffffffff84000828 <create_frames_of_region>
    0x84001434    0x16a    ld a5,168(sp)         ; stack access
    0x84001436    0x16c    beqz a5,ffffffff84001384 <init_kernel+0xba>
    0x84001438    0x16e    auipc a5,0x0
    0x8400143c    0x172    ld a5,824(a5) # ffffffff84001770 <ndks_boot+0x248>
    0x84001440    0x176    ld a4,152(sp)         ; stack access
    0x84001442    0x178    sd a4,72(a5)
    0x84001444    0x17a    ld a4,160(sp)         ; stack access
    0x84001446    0x17c    sd a4,80(a5)
    0x84001448    0x17e    ld a0,24(sp)          ; stack access
    0x8400144a    0x180    ld a1,32(sp)          ; stack access
    0x8400144c    0x182    jal ra,ffffffff840008f6 <create_it_asid_pool>
    0x84001450    0x186    sd a0,56(sp)          ; stack access
    0x84001452    0x188    sd a1,64(sp)          ; stack access
    0x84001454    0x18a    srli a0,a0,0x3b
    0x84001456    0x18c    beqz a0,ffffffff84001384 <init_kernel+0xba>
    0x84001458    0x18e    ld a2,40(sp)          ; stack access
    0x8400145a    0x190    ld a3,48(sp)          ; stack access
    0x8400145c    0x192    ld a0,56(sp)          ; stack access
    0x8400145e    0x194    jal ra,ffffffff8400015e <write_it_asid_pool>
    0x84001462    0x198    jal ra,ffffffff84000d02 <create_idle_thread>
    0x84001466    0x19c    beqz a0,ffffffff84001384 <init_kernel+0xba>
    0x8400146a    0x1a0    ld a5,80(sp)          ; stack access
    0x8400146c    0x1a2    sd a5,0(sp)           ; stack access
    0x8400146e    0x1a4    ld a7,72(sp)          ; stack access
    0x84001470    0x1a6    mv a6,s4
    0x84001472    0x1a8    mv a5,s0
    0x84001474    0x1aa    mv a4,s7
    0x84001476    0x1ac    ld a2,40(sp)          ; stack access
    0x84001478    0x1ae    ld a3,48(sp)          ; stack access
    0x8400147a    0x1b0    ld a0,24(sp)          ; stack access
    0x8400147c    0x1b2    ld a1,32(sp)          ; stack access
    0x8400147e    0x1b4    jal ra,ffffffff84000ba2 <create_initial_thread>
    0x84001482    0x1b8    beqz a0,ffffffff84001384 <init_kernel+0xba>
    0x84001486    0x1bc    jal ra,ffffffff84000958 <init_core_state>
    0x8400148a    0x1c0    ld a0,24(sp)          ; stack access
    0x8400148c    0x1c2    sd a0,120(sp)         ; stack access
    0x8400148e    0x1c4    ld a1,32(sp)          ; stack access
    0x84001490    0x1c6    sd a1,128(sp)         ; stack access
    0x84001492    0x1c8    lui a5,0xff021
    0x84001496    0x1cc    slli a5,a5,0xe
    0x84001498    0x1ce    sd a5,136(sp)         ; stack access
    0x8400149a    0x1d0    auipc a5,0xf
    0x8400149e    0x1d4    addi a5,a5,-1178 # ffffffff84010000 <ki_boot_end>
    0x840014a2    0x1d8    li a4,-63
    0x840014a6    0x1dc    slli a4,a4,0x20
    0x840014a8    0x1de    add a5,a5,a4
    0x840014aa    0x1e0    sd a5,144(sp)         ; stack access
    0x840014ac    0x1e2    auipc s1,0x0
    0x840014b0    0x1e6    addi s1,s1,124 # ffffffff84001528 <ndks_boot>
    0x840014b4    0x1ea    ld s0,592(s1)
    0x840014b8    0x1ee    mv a2,s0
    0x840014ba    0x1f0    jal ra,ffffffff84000a88 <create_device_untypeds>
    0x840014be    0x1f4    mv a4,s0
    0x840014c0    0x1f6    ld a2,136(sp)         ; stack access
    0x840014c2    0x1f8    ld a3,144(sp)         ; stack access
    0x840014c4    0x1fa    ld a0,120(sp)         ; stack access
    0x840014c6    0x1fc    ld a1,128(sp)         ; stack access
    0x840014c8    0x1fe    jal ra,ffffffff84000b2a <create_kernel_untypeds>
    0x840014cc    0x202    ld a4,592(s1)
    0x840014d0    0x206    ld a5,584(s1)
    0x840014d4    0x20a    sd s0,152(a5)
    0x840014d6    0x20c    sd a4,160(a5)
    0x840014d8    0x20e    beqz a0,ffffffff84001384 <init_kernel+0xba>
    0x840014dc    0x212    auipc a5,0x0
    0x840014e0    0x216    ld a5,660(a5) # ffffffff84001770 <ndks_boot+0x248>
    0x840014e4    0x21a    sd zero,56(a5)
    0x840014e8    0x21e    sd zero,64(a5)
    0x840014ec    0x222    jal ra,ffffffff84000b88 <bi_finalise>
    0x840014f0    0x226    li a5,1
    0x840014f2    0x228    auipc a4,0x29
    0x840014f6    0x22c    sd a5,846(a4) # ffffffff8402a840 <ksNumCPUs>
    0x840014fa    0x230    jal ra,ffffffff84012c84 <schedule>
    0x840014fe    0x234    jal ra,ffffffff840126e8 <activateThread>
    0x84001502    0x238    ld ra,248(sp)         ; stack access
    0x84001504    0x23a    ld s0,240(sp)         ; stack access
    0x84001506    0x23c    ld s1,232(sp)         ; stack access
    0x84001508    0x23e    ld s2,224(sp)         ; stack access
    0x8400150a    0x240    ld s3,216(sp)         ; stack access
    0x8400150c    0x242    ld s4,208(sp)         ; stack access
    0x8400150e    0x244    ld s5,200(sp)         ; stack access
    0x84001510    0x246    ld s6,192(sp)         ; stack access
    0x84001512    0x248    ld s7,184(sp)         ; stack access
    0x84001514    0x24a    addi sp,sp,256
    0x84001516    0x24c    ret

Proving inst theorems
---------------------

<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
<<HOL message: inventing new type variable names: 'a>>
220 inst theorems describe instructions.

Evaluating graph
----------------

The graph for `init_kernel` has 368 nodes.

Completing graph
-----------------

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84011A9E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84011AA8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_84011666` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010DB0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010D9A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840103E2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_840103C2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_840103CA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_840103BE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_840103D6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_sip_8401015E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'wfi_840100D4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrs_a5_sie_a5_84000308` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_840002C2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a0_840002B4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84000154` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000158` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_zero_a0_84010CEC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010C56` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010C26` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84010BC8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010C5A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010C2A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010BCC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010B0A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a4_stval_840109E8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_zero_84000014` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'fence_i_84000000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_840171F6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_840171FE` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_s6_84017162` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_840171F2` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_8401720A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84017166` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sscratch_t0_84016EB0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sstatus_t1_84016EB8` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_satp_a5_84016E1A` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_sepc_t1_84016EAC` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sret_84016EC4` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84016E1E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_s0_scause_8401008C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sscratch_8401007C` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sstatus_84010084` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_ra_sepc_840100A0` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrw_t0_sscratch_t0_84010000` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84000256` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_840001EA` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrr_a0_scause_84014524` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrrc_a5_sie_a5_84013D38` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'ecall_84013D1E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a5_84013D0E` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'rdtime_a4_84013D22` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84010B94` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84015C22` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'sfence_vma_84015FA6` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrw_stvec_a5_84001312` has 0 nodes.

Evaluating graph
----------------

The graph for `instruction'csrc_sstatus_a5_84001320` has 0 nodes.

Proving correctness of call offsets
===================================

Offsets proved correct.

Summary
=======

No stack intro failures.
No graph spec failures.
No export failures.
No call offset failures.
> 